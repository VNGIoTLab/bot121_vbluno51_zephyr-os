
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
       0:	2000300c 	.word	0x2000300c
       4:	00010ae9 	.word	0x00010ae9
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf(fputc, DESC(stdout), format, vargs);
       8:	00010b17 	.word	0x00010b17
int printf(const char *_MLIBC_RESTRICT format, ...)
{
	va_list vargs;
	int     r;

	va_start(vargs, format);
       c:	00010989 	.word	0x00010989
	r = _prf(fputc, DESC(stdout), format, vargs);
      10:	00010989 	.word	0x00010989
	va_end(vargs);

	return r;
}
      14:	00010989 	.word	0x00010989
      18:	00010989 	.word	0x00010989
      1c:	00010989 	.word	0x00010989
	uint64_t			double_temp;

	count = 0;

	while ((c = *format++)) {
		if (c != '%') {
      20:	00010989 	.word	0x00010989
      24:	00010989 	.word	0x00010989
      28:	00010989 	.word	0x00010989
      2c:	000107b5 	.word	0x000107b5
			}

			if (c == '.') {
				c = *format++;
				if (c == '*') {
					precision = (int32_t)
      30:	00010989 	.word	0x00010989
      34:	00010989 	.word	0x00010989
					va_arg(vargs, int32_t);
				} else
					precision = _atoi(&format);

				if (precision > MAXFLD)
      38:	00010759 	.word	0x00010759
					precision = -1;
      3c:	00010989 	.word	0x00010989

00000040 <_irq_vector_table>:
				c = *format++;
      40:	00010ab1 0000f233 00010ab1 00010ab1     ....3...........
			 * No further special processing is done for them.
			 */

			if (strchr("hlLz", c) != NULL) {
				i = c;
				c = *format++;
      50:	00010ab1 00010ab1 00010ab1 00010ab1     ................
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
      60:	00010ab1 00010ab1 00010ab1 00010ab1     ................
				if (precision != -1)
					pad = ' ';
				break;

			case '%':
				if ((*func)('%', dest) == EOF) {
      70:	00010ab1 00010ab1 00010ab1 00010ab1     ................
	count = 0;

	while ((c = *format++)) {
		if (c != '%') {
			if ((*func) (c, dest) == EOF) {
				return EOF;
      80:	00010ab1 00010ab1 00010ab1 00010ab1     ................
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
      90:	00010ab1 00010ab1 00010ab1 00010ab1     ................
      a0:	00010ab1 00010ab1                       ........

000000a8 <_sw_isr_table>:
				switch (c) {
      a8:	00000000 000013c9 00000000 00010901     ................
      b8:	00000000 00010901 00000000 00010901     ................
				case '-':
					fminus = true;
					break;

				case '+':
					fplus = true;
      c8:	00000000 00010901 00000000 00010901     ................
				}
			}

			if (c == '*') {
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
      d8:	200005bc 00001115 00000000 00010901     ... ............
				if (width < 0) {
					fminus = true;
					width = -width;
				}
				c = *format++;
      e8:	00000000 00010901 00000000 00010901     ................
			} else if (!isdigit(c))
      f8:	00000000 00010901 00000000 0000f1f1     ................
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
     108:	00000000 00010901 00000000 0000f22b     ............+...
		i = 10 * i + *p++ - '0';
     118:	00000000 00010901 00000000 00010901     ................
			 */
			if ((unsigned) width > MAXFLD) {
				width = MAXFLD;
			}

			if (c == '.') {
     128:	00000000 00010901 00000000 00000ebd     ................

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
		i = 10 * i + *p++ - '0';
     138:	00000000 00010901 00000000 00010901     ................
     148:	00000000 00010901 00000000 00010901     ................
			count++;

		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */
     158:	00000000 00010901 00000000 00010901     ................
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     168:	00000000 0000f221 00000000 00010901     ....!...........

00000178 <__gnu_thumb1_case_uqi>:
     178:	b402      	push	{r1}
     17a:	4671      	mov	r1, lr
     17c:	0849      	lsrs	r1, r1, #1
     17e:	0049      	lsls	r1, r1, #1
     180:	5c09      	ldrb	r1, [r1, r0]
     182:	0049      	lsls	r1, r1, #1
     184:	448e      	add	lr, r1
     186:	bc02      	pop	{r1}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <__gnu_thumb1_case_shi>:
     18c:	b403      	push	{r0, r1}
     18e:	4671      	mov	r1, lr
     190:	0849      	lsrs	r1, r1, #1
     192:	0040      	lsls	r0, r0, #1
     194:	0049      	lsls	r1, r1, #1
     196:	5e09      	ldrsh	r1, [r1, r0]
     198:	0049      	lsls	r1, r1, #1
     19a:	448e      	add	lr, r1
     19c:	bc03      	pop	{r0, r1}
     19e:	4770      	bx	lr

000001a0 <__gnu_thumb1_case_uhi>:
				if (precision != -1)
					pad = ' ';
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
     1a0:	b403      	push	{r0, r1}
     1a2:	4671      	mov	r1, lr
     1a4:	0849      	lsrs	r1, r1, #1
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     1a6:	0040      	lsls	r0, r0, #1
     1a8:	0049      	lsls	r1, r1, #1

			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     1aa:	5a09      	ldrh	r1, [r1, r0]
     1ac:	0049      	lsls	r1, r1, #1
     1ae:	448e      	add	lr, r1
     1b0:	bc03      	pop	{r0, r1}
     1b2:	4770      	bx	lr

000001b4 <__aeabi_uidiv>:
				buf[1] = '\0';
     1b4:	2200      	movs	r2, #0
				need_justifying = true;
				c = 1;
     1b6:	0843      	lsrs	r3, r0, #1
			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
				buf[1] = '\0';
     1b8:	428b      	cmp	r3, r1
				need_justifying = true;
				c = 1;
				break;
     1ba:	d374      	bcc.n	2a6 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x26>

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     1bc:	0903      	lsrs	r3, r0, #4
     1be:	428b      	cmp	r3, r1
     1c0:	d35f      	bcc.n	282 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x2>
     1c2:	0a03      	lsrs	r3, r0, #8

#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
     1c4:	428b      	cmp	r3, r1
     1c6:	d344      	bcc.n	252 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x92>
		*buf++ = '-';
     1c8:	0b03      	lsrs	r3, r0, #12
     1ca:	428b      	cmp	r3, r1
		if (value != 0x80000000)
     1cc:	d328      	bcc.n	220 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x60>
			value = -value;
     1ce:	0c03      	lsrs	r3, r0, #16
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
		if (value != 0x80000000)
     1d0:	428b      	cmp	r3, r1
     1d2:	d30d      	bcc.n	1f0 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x30>
     1d4:	22ff      	movs	r2, #255	; 0xff
     1d6:	0209      	lsls	r1, r1, #8
     1d8:	ba12      	rev	r2, r2
			value = -value;
	} else if (fplus)
     1da:	0c03      	lsrs	r3, r0, #16
     1dc:	428b      	cmp	r3, r1
     1de:	d302      	bcc.n	1e6 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x26>
		*buf++ = '+';
     1e0:	1212      	asrs	r2, r2, #8
     1e2:	0209      	lsls	r1, r1, #8
	else if (fspace)
     1e4:	d065      	beq.n	2b2 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x32>
     1e6:	0b03      	lsrs	r3, r0, #12
     1e8:	428b      	cmp	r3, r1
     1ea:	d319      	bcc.n	220 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x60>
		*buf++ = ' ';
     1ec:	e000      	b.n	1f0 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x30>
     1ee:	0a09      	lsrs	r1, r1, #8
     1f0:	0bc3      	lsrs	r3, r0, #15
     1f2:	428b      	cmp	r3, r1
     1f4:	d301      	bcc.n	1fa <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x3a>
     1f6:	03cb      	lsls	r3, r1, #15
     1f8:	1ac0      	subs	r0, r0, r3
#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
     1fa:	4152      	adcs	r2, r2
     1fc:	0b83      	lsrs	r3, r0, #14
     1fe:	428b      	cmp	r3, r1
     200:	d301      	bcc.n	206 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x46>
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     202:	038b      	lsls	r3, r1, #14
     204:	1ac0      	subs	r0, r0, r3
     206:	4152      	adcs	r2, r2
     208:	0b43      	lsrs	r3, r0, #13
     20a:	428b      	cmp	r3, r1

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     20c:	d301      	bcc.n	212 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x52>
     20e:	034b      	lsls	r3, r1, #13
	} else if (fplus)
		*buf++ = '+';
	else if (fspace)
		*buf++ = ' ';

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
     210:	1ac0      	subs	r0, r0, r3
     212:	4152      	adcs	r2, r2
     214:	0b03      	lsrs	r3, r0, #12

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     216:	428b      	cmp	r3, r1
					prefix = 1;
     218:	d301      	bcc.n	21e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x5e>

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     21a:	030b      	lsls	r3, r1, #12
     21c:	1ac0      	subs	r0, r0, r3
     21e:	4152      	adcs	r2, r2
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     220:	0ac3      	lsrs	r3, r0, #11
     222:	428b      	cmp	r3, r1
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     224:	d301      	bcc.n	22a <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x6a>
     226:	02cb      	lsls	r3, r1, #11
     228:	1ac0      	subs	r0, r0, r3
     22a:	4152      	adcs	r2, r2
				double_temp = u.i;
     22c:	0a83      	lsrs	r3, r0, #10
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     22e:	428b      	cmp	r3, r1
     230:	d301      	bcc.n	236 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x76>
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     232:	028b      	lsls	r3, r1, #10
     234:	1ac0      	subs	r0, r0, r3
     236:	4152      	adcs	r2, r2
     238:	0a43      	lsrs	r3, r0, #9
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     23a:	428b      	cmp	r3, r1
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     23c:	d301      	bcc.n	242 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x82>
	fract = (double_temp << 11) & ~HIGHBIT64;
     23e:	024b      	lsls	r3, r1, #9
     240:	1ac0      	subs	r0, r0, r3
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     242:	4152      	adcs	r2, r2
	fract = (double_temp << 11) & ~HIGHBIT64;
     244:	0a03      	lsrs	r3, r0, #8
     246:	428b      	cmp	r3, r1
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     248:	d301      	bcc.n	24e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x8e>
     24a:	020b      	lsls	r3, r1, #8
		if (!fract) {
     24c:	1ac0      	subs	r0, r0, r3
     24e:	4152      	adcs	r2, r2
     250:	d2cd      	bcs.n	1ee <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x2e>
     252:	09c3      	lsrs	r3, r0, #7
			*buf++ = sign ? '-' : '+';
     254:	428b      	cmp	r3, r1
     256:	d301      	bcc.n	25c <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x9c>
     258:	01cb      	lsls	r3, r1, #7
     25a:	1ac0      	subs	r0, r0, r3
     25c:	4152      	adcs	r2, r2
			*buf++ = 'I';
     25e:	0983      	lsrs	r3, r0, #6
     260:	428b      	cmp	r3, r1
			*buf++ = 'N';
     262:	d301      	bcc.n	268 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xa8>
     264:	018b      	lsls	r3, r1, #6
			*buf++ = 'F';
     266:	1ac0      	subs	r0, r0, r3
     268:	4152      	adcs	r2, r2
     26a:	0943      	lsrs	r3, r0, #5
     26c:	428b      	cmp	r3, r1
		} else {
			*buf++ = 'N';
     26e:	d301      	bcc.n	274 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xb4>
			*buf++ = 'a';
     270:	014b      	lsls	r3, r1, #5
			*buf++ = sign ? '-' : '+';
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
     272:	1ac0      	subs	r0, r0, r3
			*buf++ = 'a';
			*buf++ = 'N';
     274:	4152      	adcs	r2, r2
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
     276:	0903      	lsrs	r3, r0, #4
			*buf++ = 'N';
     278:	428b      	cmp	r3, r1
     27a:	d301      	bcc.n	280 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE>
     27c:	010b      	lsls	r3, r1, #4
		}
		*buf = 0;
     27e:	1ac0      	subs	r0, r0, r3
		return buf - start;
     280:	4152      	adcs	r2, r2
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
			*buf++ = 'N';
		}
		*buf = 0;
     282:	08c3      	lsrs	r3, r0, #3
		return buf - start;
     284:	428b      	cmp	r3, r1
     286:	d301      	bcc.n	28c <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0xc>
	}

	if ((exp | fract) != 0) {
     288:	00cb      	lsls	r3, r1, #3
     28a:	1ac0      	subs	r0, r0, r3
     28c:	4152      	adcs	r2, r2
     28e:	0883      	lsrs	r3, r0, #2
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     290:	428b      	cmp	r3, r1
		fract |= HIGHBIT64;
     292:	d301      	bcc.n	298 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x18>
		*buf = 0;
		return buf - start;
	}

	if ((exp | fract) != 0) {
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     294:	008b      	lsls	r3, r1, #2
		fract |= HIGHBIT64;
     296:	1ac0      	subs	r0, r0, r3
     298:	4152      	adcs	r2, r2
     29a:	0843      	lsrs	r3, r0, #1
     29c:	428b      	cmp	r3, r1
		decexp = true;		/* Wasn't zero */
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
     29e:	d301      	bcc.n	2a4 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x24>
     2a0:	004b      	lsls	r3, r1, #1
		*buf++ = '-';
     2a2:	1ac0      	subs	r0, r0, r3
     2a4:	4152      	adcs	r2, r2
     2a6:	1a41      	subs	r1, r0, r1
	} else if (fplus) {
     2a8:	d200      	bcs.n	2ac <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x2c>
     2aa:	4601      	mov	r1, r0
     2ac:	4152      	adcs	r2, r2
     2ae:	4610      	mov	r0, r2
		*buf++ = '+';
     2b0:	4770      	bx	lr
     2b2:	e7ff      	b.n	2b4 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x34>
	} else if (fspace) {
     2b4:	b501      	push	{r0, lr}
     2b6:	2000      	movs	r0, #0
     2b8:	f000 f8f0 	bl	49c <__aeabi_idiv0>
		*buf++ = ' ';
     2bc:	bd02      	pop	{r1, pc}
     2be:	46c0      	nop			; (mov r8, r8)

000002c0 <__aeabi_uidivmod>:
     2c0:	2900      	cmp	r1, #0
     2c2:	d0f7      	beq.n	2b4 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x34>
     2c4:	e776      	b.n	1b4 <__aeabi_uidiv>
	}

	decexp = 0;
     2c6:	4770      	bx	lr

000002c8 <__aeabi_idiv>:
     2c8:	4603      	mov	r3, r0
	while (exp <= -3) {
     2ca:	430b      	orrs	r3, r1
     2cc:	d47f      	bmi.n	3ce <__aeabi_idiv+0x106>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     2ce:	2200      	movs	r2, #0
     2d0:	0843      	lsrs	r3, r0, #1
     2d2:	428b      	cmp	r3, r1
     2d4:	d374      	bcc.n	3c0 <__aeabi_idiv+0xf8>
     2d6:	0903      	lsrs	r3, r0, #4
			_rlrshift(&fract);
     2d8:	428b      	cmp	r3, r1
     2da:	d35f      	bcc.n	39c <__aeabi_idiv+0xd4>
     2dc:	0a03      	lsrs	r3, r0, #8
			exp++;
     2de:	428b      	cmp	r3, r1
     2e0:	d344      	bcc.n	36c <__aeabi_idiv+0xa4>
		}
		fract *= 5;
     2e2:	0b03      	lsrs	r3, r0, #12
     2e4:	428b      	cmp	r3, r1
     2e6:	d328      	bcc.n	33a <__aeabi_idiv+0x72>
     2e8:	0c03      	lsrs	r3, r0, #16
		exp++;
		decexp--;
     2ea:	428b      	cmp	r3, r1
	while (exp <= -3) {
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
     2ec:	d30d      	bcc.n	30a <__aeabi_idiv+0x42>
     2ee:	22ff      	movs	r2, #255	; 0xff
		exp++;
		decexp--;
     2f0:	0209      	lsls	r1, r1, #8
     2f2:	ba12      	rev	r2, r2
     2f4:	0c03      	lsrs	r3, r0, #16

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     2f6:	428b      	cmp	r3, r1
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
		exp++;
     2f8:	d302      	bcc.n	300 <__aeabi_idiv+0x38>
		decexp--;

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     2fa:	1212      	asrs	r2, r2, #8
     2fc:	0209      	lsls	r1, r1, #8
			fract <<= 1;
     2fe:	d065      	beq.n	3cc <__aeabi_idiv+0x104>
     300:	0b03      	lsrs	r3, r0, #12
			exp--;
     302:	428b      	cmp	r3, r1
     304:	d319      	bcc.n	33a <__aeabi_idiv+0x72>
     306:	e000      	b.n	30a <__aeabi_idiv+0x42>
     308:	0a09      	lsrs	r1, r1, #8
     30a:	0bc3      	lsrs	r3, r0, #15
     30c:	428b      	cmp	r3, r1
     30e:	d301      	bcc.n	314 <__aeabi_idiv+0x4c>
     310:	03cb      	lsls	r3, r1, #15
     312:	1ac0      	subs	r0, r0, r3
     314:	4152      	adcs	r2, r2
     316:	0b83      	lsrs	r3, r0, #14
     318:	428b      	cmp	r3, r1
     31a:	d301      	bcc.n	320 <__aeabi_idiv+0x58>
     31c:	038b      	lsls	r3, r1, #14
     31e:	1ac0      	subs	r0, r0, r3
     320:	4152      	adcs	r2, r2
     322:	0b43      	lsrs	r3, r0, #13
     324:	428b      	cmp	r3, r1
     326:	d301      	bcc.n	32c <__aeabi_idiv+0x64>
     328:	034b      	lsls	r3, r1, #13
     32a:	1ac0      	subs	r0, r0, r3
     32c:	4152      	adcs	r2, r2
     32e:	0b03      	lsrs	r3, r0, #12
     330:	428b      	cmp	r3, r1
     332:	d301      	bcc.n	338 <__aeabi_idiv+0x70>
		}
	}

	while (exp > 0) {
     334:	030b      	lsls	r3, r1, #12
     336:	1ac0      	subs	r0, r0, r3
		_ldiv5(&fract);
     338:	4152      	adcs	r2, r2
     33a:	0ac3      	lsrs	r3, r0, #11
     33c:	428b      	cmp	r3, r1
		exp--;
		decexp++;
     33e:	d301      	bcc.n	344 <__aeabi_idiv+0x7c>
     340:	02cb      	lsls	r3, r1, #11
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     342:	1ac0      	subs	r0, r0, r3
	}

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
     344:	4152      	adcs	r2, r2
		}
	}

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
     346:	0a83      	lsrs	r3, r0, #10
		decexp++;
     348:	428b      	cmp	r3, r1
     34a:	d301      	bcc.n	350 <__aeabi_idiv+0x88>
     34c:	028b      	lsls	r3, r1, #10
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     34e:	1ac0      	subs	r0, r0, r3
     350:	4152      	adcs	r2, r2
			fract <<= 1;
     352:	0a43      	lsrs	r3, r0, #9
     354:	428b      	cmp	r3, r1
			exp--;
     356:	d301      	bcc.n	35c <__aeabi_idiv+0x94>
     358:	024b      	lsls	r3, r1, #9
     35a:	1ac0      	subs	r0, r0, r3
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     35c:	4152      	adcs	r2, r2
		exp++;
     35e:	0a03      	lsrs	r3, r0, #8
			exp--;
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     360:	428b      	cmp	r3, r1
     362:	d301      	bcc.n	368 <__aeabi_idiv+0xa0>
			fract <<= 1;
			exp--;
		}
	}

	while (exp < (0 + 4)) {
     364:	020b      	lsls	r3, r1, #8
     366:	1ac0      	subs	r0, r0, r3
		_rlrshift(&fract);
		exp++;
	}

	if (precision < 0)
     368:	4152      	adcs	r2, r2
     36a:	d2cd      	bcs.n	308 <__aeabi_idiv+0x40>
		precision = 6;		/* Default precision if none given */
     36c:	09c3      	lsrs	r3, r0, #7
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
     36e:	428b      	cmp	r3, r1
     370:	d301      	bcc.n	376 <__aeabi_idiv+0xae>
     372:	01cb      	lsls	r3, r1, #7
     374:	1ac0      	subs	r0, r0, r3
     376:	4152      	adcs	r2, r2
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     378:	0983      	lsrs	r3, r0, #6
     37a:	428b      	cmp	r3, r1
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
     37c:	d301      	bcc.n	382 <__aeabi_idiv+0xba>
     37e:	018b      	lsls	r3, r1, #6
     380:	1ac0      	subs	r0, r0, r3
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     382:	4152      	adcs	r2, r2
     384:	0943      	lsrs	r3, r0, #5
     386:	428b      	cmp	r3, r1
     388:	d301      	bcc.n	38e <__aeabi_idiv+0xc6>
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     38a:	014b      	lsls	r3, r1, #5
     38c:	1ac0      	subs	r0, r0, r3
     38e:	4152      	adcs	r2, r2
     390:	0903      	lsrs	r3, r0, #4
     392:	428b      	cmp	r3, r1
     394:	d301      	bcc.n	39a <__aeabi_idiv+0xd2>
     396:	010b      	lsls	r3, r1, #4
			if (c == 'g')
     398:	1ac0      	subs	r0, r0, r3
     39a:	4152      	adcs	r2, r2
				c = 'e';
			else
				c = 'E';
     39c:	08c3      	lsrs	r3, r0, #3
     39e:	428b      	cmp	r3, r1
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     3a0:	d301      	bcc.n	3a6 <__aeabi_idiv+0xde>
     3a2:	00cb      	lsls	r3, r1, #3
				c = 'E';
		} else
			c = 'f';
	}

	if (c == 'f') {
     3a4:	1ac0      	subs	r0, r0, r3
     3a6:	4152      	adcs	r2, r2
		exp = precision + decexp;
     3a8:	0883      	lsrs	r3, r0, #2
     3aa:	428b      	cmp	r3, r1
     3ac:	d301      	bcc.n	3b2 <__aeabi_idiv+0xea>
     3ae:	008b      	lsls	r3, r1, #2
     3b0:	1ac0      	subs	r0, r0, r3
     3b2:	4152      	adcs	r2, r2
     3b4:	0843      	lsrs	r3, r0, #1
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
			if (c == 'g')
				c = 'e';
     3b6:	428b      	cmp	r3, r1
	if (c == 'f') {
		exp = precision + decexp;
		if (exp < 0)
			exp = 0;
	} else
		exp = precision + 1;
     3b8:	d301      	bcc.n	3be <__aeabi_idiv+0xf6>
	digit_count = 16;
     3ba:	004b      	lsls	r3, r1, #1
     3bc:	1ac0      	subs	r0, r0, r3
     3be:	4152      	adcs	r2, r2
     3c0:	1a41      	subs	r1, r0, r1
     3c2:	d200      	bcs.n	3c6 <__aeabi_idiv+0xfe>
	if (exp > 16)
		exp = 16;

	ltemp = 0x0800000000000000;
     3c4:	4601      	mov	r1, r0
     3c6:	4152      	adcs	r2, r2
     3c8:	4610      	mov	r0, r2
     3ca:	4770      	bx	lr
     3cc:	e05d      	b.n	48a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x8a>
	while (exp--) {
     3ce:	0fca      	lsrs	r2, r1, #31
     3d0:	d000      	beq.n	3d4 <__aeabi_idiv+0x10c>
		_ldiv5(&ltemp);
     3d2:	4249      	negs	r1, r1
     3d4:	1003      	asrs	r3, r0, #32
     3d6:	d300      	bcc.n	3da <__aeabi_idiv+0x112>
		_rlrshift(&ltemp);
     3d8:	4240      	negs	r0, r0
     3da:	4053      	eors	r3, r2
     3dc:	2200      	movs	r2, #0
     3de:	469c      	mov	ip, r3
	}

	fract += ltemp;
     3e0:	0903      	lsrs	r3, r0, #4
     3e2:	428b      	cmp	r3, r1
     3e4:	d32d      	bcc.n	442 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x42>
     3e6:	0a03      	lsrs	r3, r0, #8
     3e8:	428b      	cmp	r3, r1
     3ea:	d312      	bcc.n	412 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x12>
     3ec:	22fc      	movs	r2, #252	; 0xfc
     3ee:	0189      	lsls	r1, r1, #6
	if ((fract >> 32) & 0xF0000000) {
     3f0:	ba12      	rev	r2, r2
     3f2:	0a03      	lsrs	r3, r0, #8
		_ldiv5(&fract);
     3f4:	428b      	cmp	r3, r1
     3f6:	d30c      	bcc.n	412 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x12>
     3f8:	0189      	lsls	r1, r1, #6
		_rlrshift(&fract);
     3fa:	1192      	asrs	r2, r2, #6
     3fc:	428b      	cmp	r3, r1
     3fe:	d308      	bcc.n	412 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x12>
		decexp++;
     400:	0189      	lsls	r1, r1, #6
     402:	1192      	asrs	r2, r2, #6
     404:	428b      	cmp	r3, r1
	}

	if (c == 'f') {
     406:	d304      	bcc.n	412 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x12>
     408:	0189      	lsls	r1, r1, #6
		if (decexp > 0) {
     40a:	d03a      	beq.n	482 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x82>
     40c:	1192      	asrs	r2, r2, #6
     40e:	e000      	b.n	412 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x12>
     410:	0989      	lsrs	r1, r1, #6
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
     412:	09c3      	lsrs	r3, r0, #7
     414:	428b      	cmp	r3, r1
     416:	d301      	bcc.n	41c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x1c>
     418:	01cb      	lsls	r3, r1, #7
     41a:	1ac0      	subs	r0, r0, r3
     41c:	4152      	adcs	r2, r2
		decexp++;
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
     41e:	0983      	lsrs	r3, r0, #6
     420:	428b      	cmp	r3, r1
     422:	d301      	bcc.n	428 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x28>
     424:	018b      	lsls	r3, r1, #6
     426:	1ac0      	subs	r0, r0, r3
				*buf++ = _get_digit(&fract, &digit_count);
				decexp--;
			}
		} else
			*buf++ = '0';
     428:	4152      	adcs	r2, r2
     42a:	0943      	lsrs	r3, r0, #5
     42c:	428b      	cmp	r3, r1
		if (falt || (precision > 0))
     42e:	d301      	bcc.n	434 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x34>
     430:	014b      	lsls	r3, r1, #5
     432:	1ac0      	subs	r0, r0, r3
     434:	4152      	adcs	r2, r2
     436:	0903      	lsrs	r3, r0, #4
     438:	428b      	cmp	r3, r1
			*buf++ = '.';
     43a:	d301      	bcc.n	440 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x40>
     43c:	010b      	lsls	r3, r1, #4
     43e:	1ac0      	subs	r0, r0, r3
     440:	4152      	adcs	r2, r2
     442:	08c3      	lsrs	r3, r0, #3
		while (precision-- > 0) {
     444:	428b      	cmp	r3, r1
     446:	d301      	bcc.n	44c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x4c>
     448:	00cb      	lsls	r3, r1, #3
			if (decexp < 0) {
     44a:	1ac0      	subs	r0, r0, r3
     44c:	4152      	adcs	r2, r2
     44e:	0883      	lsrs	r3, r0, #2
				*buf++ = '0';
     450:	428b      	cmp	r3, r1
     452:	d301      	bcc.n	458 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x58>
				decexp++;
     454:	008b      	lsls	r3, r1, #2
     456:	1ac0      	subs	r0, r0, r3
     458:	4152      	adcs	r2, r2
     45a:	d2d9      	bcs.n	410 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x10>
			} else
				*buf++ = _get_digit(&fract, &digit_count);
     45c:	0843      	lsrs	r3, r0, #1
     45e:	428b      	cmp	r3, r1
     460:	d301      	bcc.n	466 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x66>
     462:	004b      	lsls	r3, r1, #1
     464:	1ac0      	subs	r0, r0, r3
     466:	4152      	adcs	r2, r2
     468:	1a41      	subs	r1, r0, r1
     46a:	d200      	bcs.n	46e <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x6e>
     46c:	4601      	mov	r1, r0
     46e:	4663      	mov	r3, ip
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
     470:	4152      	adcs	r2, r2
     472:	105b      	asrs	r3, r3, #1
     474:	4610      	mov	r0, r2
     476:	d301      	bcc.n	47c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x7c>
     478:	4240      	negs	r0, r0
		if (*buf++ != '0')
			decexp--;
     47a:	2b00      	cmp	r3, #0
     47c:	d500      	bpl.n	480 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x80>
     47e:	4249      	negs	r1, r1
     480:	4770      	bx	lr
     482:	4663      	mov	r3, ip
     484:	105b      	asrs	r3, r3, #1
		if (falt || (precision > 0))
     486:	d300      	bcc.n	48a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x8a>
     488:	4240      	negs	r0, r0
     48a:	b501      	push	{r0, lr}
			} else
				*buf++ = _get_digit(&fract, &digit_count);
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
     48c:	2000      	movs	r0, #0
			decexp--;
		if (falt || (precision > 0))
     48e:	f000 f805 	bl	49c <__aeabi_idiv0>
			*buf++ = '.';
     492:	bd02      	pop	{r1, pc}

00000494 <__aeabi_idivmod>:
     494:	2900      	cmp	r1, #0
     496:	d0f8      	beq.n	48a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x8a>
     498:	e716      	b.n	2c8 <__aeabi_idiv>
		while (precision-- > 0)
     49a:	4770      	bx	lr

0000049c <__aeabi_idiv0>:
     49c:	4770      	bx	lr
			*buf++ = _get_digit(&fract, &digit_count);
     49e:	46c0      	nop			; (mov r8, r8)

000004a0 <__aeabi_uldivmod>:
     4a0:	2b00      	cmp	r3, #0
     4a2:	d111      	bne.n	4c8 <__aeabi_uldivmod+0x28>
     4a4:	2a00      	cmp	r2, #0
     4a6:	d10f      	bne.n	4c8 <__aeabi_uldivmod+0x28>
     4a8:	2900      	cmp	r1, #0
     4aa:	d100      	bne.n	4ae <__aeabi_uldivmod+0xe>
	}

	if (prune_zero) {
     4ac:	2800      	cmp	r0, #0
     4ae:	d002      	beq.n	4b6 <__aeabi_uldivmod+0x16>
     4b0:	2100      	movs	r1, #0
		while (*--buf == '0')
     4b2:	43c9      	mvns	r1, r1
     4b4:	1c08      	adds	r0, r1, #0
     4b6:	b407      	push	{r0, r1, r2}
     4b8:	4802      	ldr	r0, [pc, #8]	; (4c4 <__aeabi_uldivmod+0x24>)
     4ba:	a102      	add	r1, pc, #8	; (adr r1, 4c4 <__aeabi_uldivmod+0x24>)
			;
		if (*buf != '.')
     4bc:	1840      	adds	r0, r0, r1
     4be:	9002      	str	r0, [sp, #8]
     4c0:	bd03      	pop	{r0, r1, pc}
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	ffffffd9 	.word	0xffffffd9
     4c8:	b403      	push	{r0, r1}
     4ca:	4668      	mov	r0, sp
		*buf++ = (char) c;
		if (decexp < 0) {
     4cc:	b501      	push	{r0, lr}
		if (*buf != '.')
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
		*buf++ = (char) c;
     4ce:	9802      	ldr	r0, [sp, #8]
     4d0:	f000 f856 	bl	580 <__udivmoddi4>
		if (decexp < 0) {
     4d4:	9b01      	ldr	r3, [sp, #4]
			decexp = -decexp;
     4d6:	469e      	mov	lr, r3
     4d8:	b002      	add	sp, #8
			*buf++ = '-';
     4da:	bc0c      	pop	{r2, r3}
     4dc:	4770      	bx	lr
		} else
			*buf++ = '+';
     4de:	46c0      	nop			; (mov r8, r8)

000004e0 <__aeabi_lmul>:
     4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
		*buf++ = (char) ((decexp / 100) + '0');
     4e2:	464f      	mov	r7, r9
     4e4:	4646      	mov	r6, r8
     4e6:	b4c0      	push	{r6, r7}
     4e8:	0416      	lsls	r6, r2, #16
     4ea:	0c36      	lsrs	r6, r6, #16
     4ec:	4699      	mov	r9, r3
		decexp %= 100;
     4ee:	0033      	movs	r3, r6
     4f0:	0405      	lsls	r5, r0, #16
     4f2:	0c2c      	lsrs	r4, r5, #16
     4f4:	0c07      	lsrs	r7, r0, #16
     4f6:	0c15      	lsrs	r5, r2, #16
		*buf++ = (char) ((decexp / 10) + '0');
     4f8:	4363      	muls	r3, r4
     4fa:	437e      	muls	r6, r7
     4fc:	436f      	muls	r7, r5
     4fe:	4365      	muls	r5, r4
     500:	0c1c      	lsrs	r4, r3, #16
     502:	19ad      	adds	r5, r5, r6
		decexp %= 10;
		*buf++ = (char) (decexp + '0');
     504:	1964      	adds	r4, r4, r5
     506:	469c      	mov	ip, r3
     508:	42a6      	cmp	r6, r4
     50a:	d903      	bls.n	514 <__aeabi_lmul+0x34>
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	025b      	lsls	r3, r3, #9
     510:	4698      	mov	r8, r3
	}
	*buf = 0;
     512:	4447      	add	r7, r8

	return buf - start;
     514:	4663      	mov	r3, ip
		decexp %= 100;
		*buf++ = (char) ((decexp / 10) + '0');
		decexp %= 10;
		*buf++ = (char) (decexp + '0');
	}
	*buf = 0;
     516:	0c25      	lsrs	r5, r4, #16

	return buf - start;
     518:	19ef      	adds	r7, r5, r7
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
     51a:	041d      	lsls	r5, r3, #16
     51c:	464b      	mov	r3, r9
					prefix = 1;
     51e:	434a      	muls	r2, r1
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
     520:	4343      	muls	r3, r0
     522:	0c2d      	lsrs	r5, r5, #16
     524:	0424      	lsls	r4, r4, #16
     526:	1964      	adds	r4, r4, r5
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     528:	1899      	adds	r1, r3, r2
     52a:	19c9      	adds	r1, r1, r7
     52c:	0020      	movs	r0, r4
     52e:	bc0c      	pop	{r2, r3}
     530:	4690      	mov	r8, r2
					prefix = 1;
				need_justifying = true;
				break;

			case 'n':
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
     532:	4699      	mov	r9, r3
     534:	bdf0      	pop	{r4, r5, r6, r7, pc}
				*int32ptr_temp = count;
     536:	46c0      	nop			; (mov r8, r8)

00000538 <__ffssi2>:
     538:	b510      	push	{r4, lr}
     53a:	2300      	movs	r3, #0
				break;
     53c:	2800      	cmp	r0, #0

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     53e:	d002      	beq.n	546 <__ffssi2+0xe>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
				*int32ptr_temp = count;
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     540:	f000 f8ea 	bl	718 <__ctzsi2>
     544:	1c43      	adds	r3, r0, #1
     546:	0018      	movs	r0, r3

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     548:	bd10      	pop	{r4, pc}
     54a:	46c0      	nop			; (mov r8, r8)

0000054c <__popcountsi2>:
		*buf++ = '0';
     54c:	4b09      	ldr	r3, [pc, #36]	; (574 <__popcountsi2+0x28>)
     54e:	0842      	lsrs	r2, r0, #1
     550:	401a      	ands	r2, r3
     552:	1a82      	subs	r2, r0, r2
     554:	0010      	movs	r0, r2
		if (!value) {
     556:	4b08      	ldr	r3, [pc, #32]	; (578 <__popcountsi2+0x2c>)
     558:	0892      	lsrs	r2, r2, #2
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
     55a:	4018      	ands	r0, r3
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     55c:	4013      	ands	r3, r2

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
				if (precision != -1)
     55e:	18c0      	adds	r0, r0, r3
     560:	0903      	lsrs	r3, r0, #4
					pad = ' ';
     562:	1818      	adds	r0, r3, r0
     564:	4b05      	ldr	r3, [pc, #20]	; (57c <__popcountsi2+0x30>)
     566:	4018      	ands	r0, r3

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     568:	0203      	lsls	r3, r0, #8
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
			return 1;
		}
	}
	return (buf - buf0) + _to_x(buf, value, 8, precision);
     56a:	1818      	adds	r0, r3, r0
     56c:	0403      	lsls	r3, r0, #16
     56e:	18c0      	adds	r0, r0, r3
     570:	0e00      	lsrs	r0, r0, #24
     572:	4770      	bx	lr
     574:	55555555 	.word	0x55555555
     578:	33333333 	.word	0x33333333
	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     57c:	0f0f0f0f 	.word	0x0f0f0f0f

00000580 <__udivmoddi4>:
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     580:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
     582:	464d      	mov	r5, r9
     584:	4656      	mov	r6, sl
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     586:	4644      	mov	r4, r8
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
     588:	465f      	mov	r7, fp
     58a:	b4f0      	push	{r4, r5, r6, r7}
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     58c:	4692      	mov	sl, r2
	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     58e:	b083      	sub	sp, #12
     590:	0004      	movs	r4, r0
     592:	000d      	movs	r5, r1
     594:	4699      	mov	r9, r3
     596:	428b      	cmp	r3, r1
	if (prefix == 'X') {
		_uc(buf0);
	}

	return len + (buf - buf0);
     598:	d82f      	bhi.n	5fa <__udivmoddi4+0x7a>
     59a:	d02c      	beq.n	5f6 <__udivmoddi4+0x76>
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     59c:	4649      	mov	r1, r9
     59e:	4650      	mov	r0, sl
     5a0:	f000 f8ae 	bl	700 <__clzdi2>
					if (cptr_temp[c] == '\0') {
     5a4:	0029      	movs	r1, r5
     5a6:	0006      	movs	r6, r0
						break;
					}
				}
				if ((precision >= 0) && (precision < c))
     5a8:	0020      	movs	r0, r4
     5aa:	f000 f8a9 	bl	700 <__clzdi2>
     5ae:	1a33      	subs	r3, r6, r0
     5b0:	4698      	mov	r8, r3
     5b2:	3b20      	subs	r3, #32
     5b4:	469b      	mov	fp, r3
     5b6:	d500      	bpl.n	5ba <__udivmoddi4+0x3a>
					c = precision;
				if (c > 0) {
     5b8:	e074      	b.n	6a4 <__udivmoddi4+0x124>
     5ba:	4653      	mov	r3, sl
     5bc:	465a      	mov	r2, fp
					memcpy(buf, cptr_temp, (size_t) c);
     5be:	4093      	lsls	r3, r2
     5c0:	001f      	movs	r7, r3
     5c2:	4653      	mov	r3, sl
     5c4:	4642      	mov	r2, r8
     5c6:	4093      	lsls	r3, r2
					need_justifying = true;
				}
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5c8:	001e      	movs	r6, r3
     5ca:	42af      	cmp	r7, r5
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     5cc:	d829      	bhi.n	622 <__udivmoddi4+0xa2>
     5ce:	d026      	beq.n	61e <__udivmoddi4+0x9e>
     5d0:	465b      	mov	r3, fp
     5d2:	1ba4      	subs	r4, r4, r6
     5d4:	41bd      	sbcs	r5, r7
     5d6:	2b00      	cmp	r3, #0
     5d8:	da00      	bge.n	5dc <__udivmoddi4+0x5c>
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     5da:	e079      	b.n	6d0 <__udivmoddi4+0x150>
     5dc:	2200      	movs	r2, #0
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5de:	2300      	movs	r3, #0
     5e0:	9200      	str	r2, [sp, #0]
		   int alt_form, int precision, int prefix)
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
     5e2:	9301      	str	r3, [sp, #4]
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5e4:	2301      	movs	r3, #1
     5e6:	465a      	mov	r2, fp
		   int alt_form, int precision, int prefix)
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
     5e8:	4093      	lsls	r3, r2
     5ea:	9301      	str	r3, [sp, #4]
		*buf++ = '0';
     5ec:	2301      	movs	r3, #1
     5ee:	4642      	mov	r2, r8
		*buf++ = 'x';
     5f0:	4093      	lsls	r3, r2
     5f2:	9300      	str	r3, [sp, #0]
     5f4:	e019      	b.n	62a <__udivmoddi4+0xaa>
     5f6:	4282      	cmp	r2, r0
     5f8:	d9d0      	bls.n	59c <__udivmoddi4+0x1c>
	}

	len = _to_x(buf, value, 16, precision);
     5fa:	2200      	movs	r2, #0
     5fc:	2300      	movs	r3, #0
     5fe:	9200      	str	r2, [sp, #0]
     600:	9301      	str	r3, [sp, #4]
     602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (prefix == 'X') {
     604:	2b00      	cmp	r3, #0
     606:	d001      	beq.n	60c <__udivmoddi4+0x8c>
     608:	601c      	str	r4, [r3, #0]
		_uc(buf0);
	}

	return len + (buf - buf0);
     60a:	605d      	str	r5, [r3, #4]
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     60c:	9800      	ldr	r0, [sp, #0]
	len = _to_x(buf, value, 16, precision);
	if (prefix == 'X') {
		_uc(buf0);
	}

	return len + (buf - buf0);
     60e:	9901      	ldr	r1, [sp, #4]
     610:	b003      	add	sp, #12
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     612:	bc3c      	pop	{r2, r3, r4, r5}
				need_justifying = true;
				if (precision != -1)
     614:	4690      	mov	r8, r2
     616:	4699      	mov	r9, r3
					pad = ' ';
     618:	46a2      	mov	sl, r4
     61a:	46ab      	mov	fp, r5
     61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
		if (*buf >= 'a' && *buf <= 'z') {
     61e:	42a3      	cmp	r3, r4
     620:	d9d6      	bls.n	5d0 <__udivmoddi4+0x50>
     622:	2200      	movs	r2, #0
     624:	2300      	movs	r3, #0
			*buf += 'A' - 'a';
     626:	9200      	str	r2, [sp, #0]
     628:	9301      	str	r3, [sp, #4]
     62a:	4643      	mov	r3, r8
#define EOF  -1
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
     62c:	2b00      	cmp	r3, #0
     62e:	d0e8      	beq.n	602 <__udivmoddi4+0x82>
     630:	07fb      	lsls	r3, r7, #31
     632:	0872      	lsrs	r2, r6, #1
     634:	431a      	orrs	r2, r3
			case '%':
				if ((*func)('%', dest) == EOF) {
					return EOF;
				}

				count++;
     636:	4646      	mov	r6, r8
     638:	087b      	lsrs	r3, r7, #1
     63a:	e00e      	b.n	65a <__udivmoddi4+0xda>
     63c:	42ab      	cmp	r3, r5
     63e:	d101      	bne.n	644 <__udivmoddi4+0xc4>
     640:	42a2      	cmp	r2, r4
     642:	d80c      	bhi.n	65e <__udivmoddi4+0xde>
	if (alt_form) {
		*buf++ = '0';
		if (!value) {
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
			return 1;
     644:	1aa4      	subs	r4, r4, r2

			if (c >= MAXFLD + 1)
				return EOF;

			if (need_justifying) {
				if (c < width) {
     646:	419d      	sbcs	r5, r3
     648:	2001      	movs	r0, #1
     64a:	1924      	adds	r4, r4, r4
					if (fminus)	{
     64c:	416d      	adcs	r5, r5
     64e:	2100      	movs	r1, #0
     650:	3e01      	subs	r6, #1
						/* Left justify? */
						for (i = c; i < width; i++)
							buf[i] = ' ';
     652:	1824      	adds	r4, r4, r0
     654:	414d      	adcs	r5, r1
     656:	2e00      	cmp	r6, #0

			if (need_justifying) {
				if (c < width) {
					if (fminus)	{
						/* Left justify? */
						for (i = c; i < width; i++)
     658:	d006      	beq.n	668 <__udivmoddi4+0xe8>
     65a:	42ab      	cmp	r3, r5
     65c:	d9ee      	bls.n	63c <__udivmoddi4+0xbc>
     65e:	3e01      	subs	r6, #1
     660:	1924      	adds	r4, r4, r4
     662:	416d      	adcs	r5, r5
     664:	2e00      	cmp	r6, #0
     666:	d1f8      	bne.n	65a <__udivmoddi4+0xda>
     668:	465b      	mov	r3, fp
     66a:	9800      	ldr	r0, [sp, #0]
     66c:	9901      	ldr	r1, [sp, #4]
     66e:	1900      	adds	r0, r0, r4
							buf[i] = ' ';
					} else {
						/* Right justify */
						(void) memmove((buf + (width - c)), buf, (size_t) (c
     670:	4169      	adcs	r1, r5
     672:	2b00      	cmp	r3, #0
     674:	db22      	blt.n	6bc <__udivmoddi4+0x13c>
     676:	002b      	movs	r3, r5
     678:	465a      	mov	r2, fp
     67a:	40d3      	lsrs	r3, r2
     67c:	002a      	movs	r2, r5
     67e:	4644      	mov	r4, r8
										+ 1));
						if (pad == ' ')
     680:	40e2      	lsrs	r2, r4
     682:	001c      	movs	r4, r3
     684:	465b      	mov	r3, fp
							prefix = 0;
     686:	0015      	movs	r5, r2
						c = width - c + prefix;
     688:	2b00      	cmp	r3, #0
						for (i = prefix; i < c; i++)
     68a:	db2c      	blt.n	6e6 <__udivmoddi4+0x166>
     68c:	0026      	movs	r6, r4
							buf[i] = pad;
     68e:	409e      	lsls	r6, r3
     690:	0033      	movs	r3, r6
     692:	0026      	movs	r6, r4
     694:	4647      	mov	r7, r8
						(void) memmove((buf + (width - c)), buf, (size_t) (c
										+ 1));
						if (pad == ' ')
							prefix = 0;
						c = width - c + prefix;
						for (i = prefix; i < c; i++)
     696:	40be      	lsls	r6, r7
     698:	0032      	movs	r2, r6
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
					if ((*func)(*cptr, dest) == EOF)
     69a:	1a80      	subs	r0, r0, r2
     69c:	4199      	sbcs	r1, r3
     69e:	9000      	str	r0, [sp, #0]
     6a0:	9101      	str	r1, [sp, #4]
     6a2:	e7ae      	b.n	602 <__udivmoddi4+0x82>
     6a4:	4642      	mov	r2, r8
     6a6:	2320      	movs	r3, #32
     6a8:	1a9b      	subs	r3, r3, r2
     6aa:	4652      	mov	r2, sl
     6ac:	40da      	lsrs	r2, r3
							buf[i] = pad;
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
     6ae:	4641      	mov	r1, r8
     6b0:	0013      	movs	r3, r2
     6b2:	464a      	mov	r2, r9
     6b4:	408a      	lsls	r2, r1
     6b6:	0017      	movs	r7, r2
     6b8:	431f      	orrs	r7, r3
     6ba:	e782      	b.n	5c2 <__udivmoddi4+0x42>

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
     6bc:	4642      	mov	r2, r8
     6be:	2320      	movs	r3, #32
     6c0:	1a9b      	subs	r3, r3, r2
     6c2:	002a      	movs	r2, r5
     6c4:	4646      	mov	r6, r8
     6c6:	409a      	lsls	r2, r3
     6c8:	0023      	movs	r3, r4
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     6ca:	40f3      	lsrs	r3, r6
     6cc:	4313      	orrs	r3, r2

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
     6ce:	e7d5      	b.n	67c <__udivmoddi4+0xfc>
     6d0:	4642      	mov	r2, r8
     6d2:	2320      	movs	r3, #32
			*buf++ = '.';
		while (precision-- > 0)
			*buf++ = _get_digit(&fract, &digit_count);
	}

	if (prune_zero) {
     6d4:	2100      	movs	r1, #0
     6d6:	1a9b      	subs	r3, r3, r2
     6d8:	2200      	movs	r2, #0
     6da:	9100      	str	r1, [sp, #0]
     6dc:	9201      	str	r2, [sp, #4]
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     6de:	2201      	movs	r2, #1
     6e0:	40da      	lsrs	r2, r3
				}
			}
		}
	}
	return count;
}
     6e2:	9201      	str	r2, [sp, #4]
     6e4:	e782      	b.n	5ec <__udivmoddi4+0x6c>
     6e6:	4642      	mov	r2, r8
     6e8:	2320      	movs	r3, #32
     6ea:	0026      	movs	r6, r4
     6ec:	1a9b      	subs	r3, r3, r2
     6ee:	40de      	lsrs	r6, r3
     6f0:	002f      	movs	r7, r5
     6f2:	46b4      	mov	ip, r6
     6f4:	4097      	lsls	r7, r2
     6f6:	4666      	mov	r6, ip
     6f8:	003b      	movs	r3, r7
     6fa:	4333      	orrs	r3, r6
     6fc:	e7c9      	b.n	692 <__udivmoddi4+0x112>
     6fe:	46c0      	nop			; (mov r8, r8)

00000700 <__clzdi2>:
     700:	b510      	push	{r4, lr}
     702:	2900      	cmp	r1, #0
     704:	d103      	bne.n	70e <__clzdi2+0xe>
     706:	f000 f827 	bl	758 <__clzsi2>
     70a:	3020      	adds	r0, #32
     70c:	e002      	b.n	714 <__clzdi2+0x14>
     70e:	1c08      	adds	r0, r1, #0
     710:	f000 f822 	bl	758 <__clzsi2>
     714:	bd10      	pop	{r4, pc}
     716:	46c0      	nop			; (mov r8, r8)

00000718 <__ctzsi2>:
     718:	4241      	negs	r1, r0
     71a:	4008      	ands	r0, r1
     71c:	211c      	movs	r1, #28
     71e:	2301      	movs	r3, #1
     720:	041b      	lsls	r3, r3, #16
     722:	4298      	cmp	r0, r3
     724:	d301      	bcc.n	72a <__ctzsi2+0x12>
     726:	0c00      	lsrs	r0, r0, #16
     728:	3910      	subs	r1, #16
     72a:	0a1b      	lsrs	r3, r3, #8
     72c:	4298      	cmp	r0, r3
     72e:	d301      	bcc.n	734 <__ctzsi2+0x1c>
     730:	0a00      	lsrs	r0, r0, #8
     732:	3908      	subs	r1, #8
     734:	091b      	lsrs	r3, r3, #4
     736:	4298      	cmp	r0, r3
     738:	d301      	bcc.n	73e <__ctzsi2+0x26>
     73a:	0900      	lsrs	r0, r0, #4
     73c:	3904      	subs	r1, #4
     73e:	a202      	add	r2, pc, #8	; (adr r2, 748 <__ctzsi2+0x30>)
     740:	5c10      	ldrb	r0, [r2, r0]
     742:	1a40      	subs	r0, r0, r1
     744:	4770      	bx	lr
     746:	46c0      	nop			; (mov r8, r8)
     748:	1d1d1c1b 	.word	0x1d1d1c1b
     74c:	1e1e1e1e 	.word	0x1e1e1e1e
     750:	1f1f1f1f 	.word	0x1f1f1f1f
     754:	1f1f1f1f 	.word	0x1f1f1f1f

00000758 <__clzsi2>:
     758:	211c      	movs	r1, #28
     75a:	2301      	movs	r3, #1
     75c:	041b      	lsls	r3, r3, #16
     75e:	4298      	cmp	r0, r3
     760:	d301      	bcc.n	766 <__clzsi2+0xe>
     762:	0c00      	lsrs	r0, r0, #16
     764:	3910      	subs	r1, #16
     766:	0a1b      	lsrs	r3, r3, #8
     768:	4298      	cmp	r0, r3
     76a:	d301      	bcc.n	770 <__clzsi2+0x18>
     76c:	0a00      	lsrs	r0, r0, #8
     76e:	3908      	subs	r1, #8
     770:	091b      	lsrs	r3, r3, #4
     772:	4298      	cmp	r0, r3
     774:	d301      	bcc.n	77a <__clzsi2+0x22>
     776:	0900      	lsrs	r0, r0, #4
     778:	3904      	subs	r1, #4
     77a:	a202      	add	r2, pc, #8	; (adr r2, 784 <__clzsi2+0x2c>)
     77c:	5c10      	ldrb	r0, [r2, r0]
     77e:	1840      	adds	r0, r0, r1
     780:	4770      	bx	lr
     782:	46c0      	nop			; (mov r8, r8)
     784:	02020304 	.word	0x02020304
     788:	01010101 	.word	0x01010101
	...

00000794 <gpio_pin_write>:
 * @param value Value set on the pin.
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
     794:	b510      	push	{r4, lr}
     796:	0013      	movs	r3, r2
	const struct gpio_driver_api *api = port->driver_api;

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
     798:	6842      	ldr	r2, [r0, #4]
     79a:	6854      	ldr	r4, [r2, #4]
     79c:	000a      	movs	r2, r1
     79e:	2100      	movs	r1, #0
     7a0:	47a0      	blx	r4
}
     7a2:	bd10      	pop	{r4, pc}

000007a4 <control_motor>:
static u8_t bot_relay3_char_value[BUF_LEN] = {0};
static u8_t bot_relay4_char_value[BUF_LEN] = {0};

/************************Bot actions**********************************/

static void control_motor(u8_t left_dir, u8_t right_dir) {
     7a4:	b570      	push	{r4, r5, r6, lr}
     7a6:	0002      	movs	r2, r0
     7a8:	000d      	movs	r5, r1
     7aa:	4c17      	ldr	r4, [pc, #92]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
    //motor left
    switch(left_dir) {
     7ac:	2801      	cmp	r0, #1
     7ae:	d003      	beq.n	7b8 <control_motor+0x14>
     7b0:	2802      	cmp	r0, #2
     7b2:	d107      	bne.n	7c4 <control_motor+0x20>
            gpio_pin_write(dev, MOTOR_LEFT_A, 1);
            gpio_pin_write(dev, MOTOR_LEFT_B, 0);
            break;
        }
        case DIR_BACK: {
            gpio_pin_write(dev, MOTOR_LEFT_A, 0);
     7b4:	2200      	movs	r2, #0
     7b6:	e006      	b.n	7c6 <control_motor+0x22>

static void control_motor(u8_t left_dir, u8_t right_dir) {
    //motor left
    switch(left_dir) {
        case DIR_FORWARD: {
            gpio_pin_write(dev, MOTOR_LEFT_A, 1);
     7b8:	211c      	movs	r1, #28
     7ba:	6820      	ldr	r0, [r4, #0]
     7bc:	f7ff ffea 	bl	794 <gpio_pin_write>
            gpio_pin_write(dev, MOTOR_LEFT_B, 0);
     7c0:	2200      	movs	r2, #0
     7c2:	e005      	b.n	7d0 <control_motor+0x2c>
            gpio_pin_write(dev, MOTOR_LEFT_A, 0);
            gpio_pin_write(dev, MOTOR_LEFT_B, 1);
            break;
        }
        default: {
            gpio_pin_write(dev, MOTOR_LEFT_A, 1);
     7c4:	2201      	movs	r2, #1
     7c6:	211c      	movs	r1, #28
     7c8:	6820      	ldr	r0, [r4, #0]
     7ca:	f7ff ffe3 	bl	794 <gpio_pin_write>
            gpio_pin_write(dev, MOTOR_LEFT_B, 1);
     7ce:	2201      	movs	r2, #1
     7d0:	2119      	movs	r1, #25
     7d2:	6820      	ldr	r0, [r4, #0]
     7d4:	f7ff ffde 	bl	794 <gpio_pin_write>
            break;
        }
    }
    
    //motor right
    switch(right_dir) {
     7d8:	2d01      	cmp	r5, #1
     7da:	d004      	beq.n	7e6 <control_motor+0x42>
            gpio_pin_write(dev, MOTOR_RIGHT_A, 1);
            gpio_pin_write(dev, MOTOR_RIGHT_B, 0);
            break;
        }
        case DIR_BACK: {
            gpio_pin_write(dev, MOTOR_RIGHT_A, 0);
     7dc:	2200      	movs	r2, #0
            break;
        }
    }
    
    //motor right
    switch(right_dir) {
     7de:	2d02      	cmp	r5, #2
     7e0:	d008      	beq.n	7f4 <control_motor+0x50>
            gpio_pin_write(dev, MOTOR_RIGHT_A, 0);
            gpio_pin_write(dev, MOTOR_RIGHT_B, 1);
            break;
        }
        default: {
            gpio_pin_write(dev, MOTOR_RIGHT_A, 1);
     7e2:	2201      	movs	r2, #1
     7e4:	e006      	b.n	7f4 <control_motor+0x50>
    }
    
    //motor right
    switch(right_dir) {
        case DIR_FORWARD: {
            gpio_pin_write(dev, MOTOR_RIGHT_A, 1);
     7e6:	002a      	movs	r2, r5
     7e8:	2118      	movs	r1, #24
     7ea:	6820      	ldr	r0, [r4, #0]
     7ec:	f7ff ffd2 	bl	794 <gpio_pin_write>
            gpio_pin_write(dev, MOTOR_RIGHT_B, 0);
     7f0:	2200      	movs	r2, #0
     7f2:	e004      	b.n	7fe <control_motor+0x5a>
            gpio_pin_write(dev, MOTOR_RIGHT_A, 0);
            gpio_pin_write(dev, MOTOR_RIGHT_B, 1);
            break;
        }
        default: {
            gpio_pin_write(dev, MOTOR_RIGHT_A, 1);
     7f4:	2118      	movs	r1, #24
     7f6:	6820      	ldr	r0, [r4, #0]
     7f8:	f7ff ffcc 	bl	794 <gpio_pin_write>
            gpio_pin_write(dev, MOTOR_RIGHT_B, 1);
     7fc:	2201      	movs	r2, #1
     7fe:	2117      	movs	r1, #23
     800:	6820      	ldr	r0, [r4, #0]
     802:	f7ff ffc7 	bl	794 <gpio_pin_write>
            break;
        }
    }
}
     806:	bd70      	pop	{r4, r5, r6, pc}
     808:	200006c0 	.word	0x200006c0

0000080c <disconnected>:
		// bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
		// printk("Central address: %s\n", addr);
	}
}

static void disconnected(struct bt_conn *conn, u8_t reason) {
     80c:	b510      	push	{r4, lr}
     80e:	000c      	movs	r4, r1
	OFF_LED;
     810:	4b05      	ldr	r3, [pc, #20]	; (828 <disconnected+0x1c>)
     812:	2200      	movs	r2, #0
     814:	6818      	ldr	r0, [r3, #0]
     816:	2107      	movs	r1, #7
     818:	f7ff ffbc 	bl	794 <gpio_pin_write>
	printk("Disconnected (reason %u)\n", reason);
     81c:	0021      	movs	r1, r4
     81e:	4803      	ldr	r0, [pc, #12]	; (82c <disconnected+0x20>)
     820:	f001 f838 	bl	1894 <printk>
}
     824:	bd10      	pop	{r4, pc}
     826:	46c0      	nop			; (mov r8, r8)
     828:	200006c0 	.word	0x200006c0
     82c:	000120e6 	.word	0x000120e6

00000830 <relay4_callback>:
	return len;
}

static ssize_t relay4_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
     830:	b570      	push	{r4, r5, r6, lr}
     832:	000d      	movs	r5, r1
     834:	0011      	movs	r1, r2
     836:	aa04      	add	r2, sp, #16
     838:	8810      	ldrh	r0, [r2, #0]
     83a:	aa05      	add	r2, sp, #20
     83c:	7812      	ldrb	r2, [r2, #0]
	u8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
     83e:	2400      	movs	r4, #0
static ssize_t relay4_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
	u8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
     840:	07d2      	lsls	r2, r2, #31
     842:	d418      	bmi.n	876 <relay4_callback+0x46>
		return 0;
	}

	if (offset + len > sizeof(bot_relay4_char_value)) {		
     844:	001c      	movs	r4, r3
     846:	18c3      	adds	r3, r0, r3
     848:	2b02      	cmp	r3, #2
     84a:	dc12      	bgt.n	872 <relay4_callback+0x42>
}

static ssize_t relay4_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
	u8_t *value = attr->user_data;
     84c:	68ed      	ldr	r5, [r5, #12]

	if (offset + len > sizeof(bot_relay4_char_value)) {		
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
     84e:	0022      	movs	r2, r4
     850:	1828      	adds	r0, r5, r0
     852:	f000 f9fc 	bl	c4e <memcpy>

	relay4(value[0]);
     856:	782d      	ldrb	r5, [r5, #0]
	else
		printk("Turn Relay3 OFF\n");
}

static void relay4(u8_t value) {
	gpio_pin_write(dev, RL_4, value);
     858:	4b08      	ldr	r3, [pc, #32]	; (87c <relay4_callback+0x4c>)
     85a:	002a      	movs	r2, r5
     85c:	2114      	movs	r1, #20
     85e:	6818      	ldr	r0, [r3, #0]
     860:	f7ff ff98 	bl	794 <gpio_pin_write>

	if(value == RELAY_ON)
		printk("Turn Relay4 ON\n");
     864:	4806      	ldr	r0, [pc, #24]	; (880 <relay4_callback+0x50>)
}

static void relay4(u8_t value) {
	gpio_pin_write(dev, RL_4, value);

	if(value == RELAY_ON)
     866:	2d00      	cmp	r5, #0
     868:	d000      	beq.n	86c <relay4_callback+0x3c>
		printk("Turn Relay4 ON\n");
	else
		printk("Turn Relay4 OFF\n");
     86a:	4806      	ldr	r0, [pc, #24]	; (884 <relay4_callback+0x54>)
     86c:	f001 f812 	bl	1894 <printk>
     870:	e001      	b.n	876 <relay4_callback+0x46>
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
	}

	if (offset + len > sizeof(bot_relay4_char_value)) {		
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
     872:	2407      	movs	r4, #7
     874:	4264      	negs	r4, r4
	memcpy(value + offset, buf, len);

	relay4(value[0]);

	return len;
}
     876:	0020      	movs	r0, r4
     878:	bd70      	pop	{r4, r5, r6, pc}
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	200006c0 	.word	0x200006c0
     880:	00012100 	.word	0x00012100
     884:	00012110 	.word	0x00012110

00000888 <relay3_callback>:
	return len;
}

static ssize_t relay3_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
     888:	b570      	push	{r4, r5, r6, lr}
     88a:	000d      	movs	r5, r1
     88c:	0011      	movs	r1, r2
     88e:	aa04      	add	r2, sp, #16
     890:	8810      	ldrh	r0, [r2, #0]
     892:	aa05      	add	r2, sp, #20
     894:	7812      	ldrb	r2, [r2, #0]
	u8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
     896:	2400      	movs	r4, #0
static ssize_t relay3_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
	u8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
     898:	07d2      	lsls	r2, r2, #31
     89a:	d418      	bmi.n	8ce <relay3_callback+0x46>
		return 0;
	}

	if (offset + len > sizeof(bot_relay3_char_value)) {		
     89c:	001c      	movs	r4, r3
     89e:	18c3      	adds	r3, r0, r3
     8a0:	2b02      	cmp	r3, #2
     8a2:	dc12      	bgt.n	8ca <relay3_callback+0x42>
}

static ssize_t relay3_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
	u8_t *value = attr->user_data;
     8a4:	68ed      	ldr	r5, [r5, #12]

	if (offset + len > sizeof(bot_relay3_char_value)) {		
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
     8a6:	0022      	movs	r2, r4
     8a8:	1828      	adds	r0, r5, r0
     8aa:	f000 f9d0 	bl	c4e <memcpy>

	relay3(value[0]);
     8ae:	782d      	ldrb	r5, [r5, #0]
	else
		printk("Turn Relay2 OFF\n");
}

static void relay3(u8_t value) {
	gpio_pin_write(dev, RL_3, value);
     8b0:	4b08      	ldr	r3, [pc, #32]	; (8d4 <relay3_callback+0x4c>)
     8b2:	002a      	movs	r2, r5
     8b4:	2113      	movs	r1, #19
     8b6:	6818      	ldr	r0, [r3, #0]
     8b8:	f7ff ff6c 	bl	794 <gpio_pin_write>

	if(value == RELAY_ON)
		printk("Turn Relay3 ON\n");
     8bc:	4806      	ldr	r0, [pc, #24]	; (8d8 <relay3_callback+0x50>)
}

static void relay3(u8_t value) {
	gpio_pin_write(dev, RL_3, value);

	if(value == RELAY_ON)
     8be:	2d00      	cmp	r5, #0
     8c0:	d000      	beq.n	8c4 <relay3_callback+0x3c>
		printk("Turn Relay3 ON\n");
	else
		printk("Turn Relay3 OFF\n");
     8c2:	4806      	ldr	r0, [pc, #24]	; (8dc <relay3_callback+0x54>)
     8c4:	f000 ffe6 	bl	1894 <printk>
     8c8:	e001      	b.n	8ce <relay3_callback+0x46>
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
	}

	if (offset + len > sizeof(bot_relay3_char_value)) {		
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
     8ca:	2407      	movs	r4, #7
     8cc:	4264      	negs	r4, r4
	memcpy(value + offset, buf, len);

	relay3(value[0]);

	return len;
}
     8ce:	0020      	movs	r0, r4
     8d0:	bd70      	pop	{r4, r5, r6, pc}
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	200006c0 	.word	0x200006c0
     8d8:	00012121 	.word	0x00012121
     8dc:	00012131 	.word	0x00012131

000008e0 <relay2_callback>:
	return len;
}

static ssize_t relay2_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
     8e0:	b570      	push	{r4, r5, r6, lr}
     8e2:	000d      	movs	r5, r1
     8e4:	0011      	movs	r1, r2
     8e6:	aa04      	add	r2, sp, #16
     8e8:	8810      	ldrh	r0, [r2, #0]
     8ea:	aa05      	add	r2, sp, #20
     8ec:	7812      	ldrb	r2, [r2, #0]
	u8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
     8ee:	2400      	movs	r4, #0
static ssize_t relay2_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
	u8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
     8f0:	07d2      	lsls	r2, r2, #31
     8f2:	d418      	bmi.n	926 <relay2_callback+0x46>
		return 0;
	}

	if (offset + len > sizeof(bot_relay2_char_value)) {		
     8f4:	001c      	movs	r4, r3
     8f6:	18c3      	adds	r3, r0, r3
     8f8:	2b02      	cmp	r3, #2
     8fa:	dc12      	bgt.n	922 <relay2_callback+0x42>
}

static ssize_t relay2_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
	u8_t *value = attr->user_data;
     8fc:	68ed      	ldr	r5, [r5, #12]

	if (offset + len > sizeof(bot_relay2_char_value)) {		
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
     8fe:	0022      	movs	r2, r4
     900:	1828      	adds	r0, r5, r0
     902:	f000 f9a4 	bl	c4e <memcpy>

	relay2(value[0]);
     906:	782d      	ldrb	r5, [r5, #0]
	else
		printk("Turn Relay1 OFF\n");
}

static void relay2(u8_t value) {
	gpio_pin_write(dev, RL_1, value);
     908:	4b08      	ldr	r3, [pc, #32]	; (92c <relay2_callback+0x4c>)
     90a:	002a      	movs	r2, r5
     90c:	2111      	movs	r1, #17
     90e:	6818      	ldr	r0, [r3, #0]
     910:	f7ff ff40 	bl	794 <gpio_pin_write>

	if(value == RELAY_ON)
		printk("Turn Relay2 ON\n");
     914:	4806      	ldr	r0, [pc, #24]	; (930 <relay2_callback+0x50>)
}

static void relay2(u8_t value) {
	gpio_pin_write(dev, RL_1, value);

	if(value == RELAY_ON)
     916:	2d00      	cmp	r5, #0
     918:	d000      	beq.n	91c <relay2_callback+0x3c>
		printk("Turn Relay2 ON\n");
	else
		printk("Turn Relay2 OFF\n");
     91a:	4806      	ldr	r0, [pc, #24]	; (934 <relay2_callback+0x54>)
     91c:	f000 ffba 	bl	1894 <printk>
     920:	e001      	b.n	926 <relay2_callback+0x46>
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
	}

	if (offset + len > sizeof(bot_relay2_char_value)) {		
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
     922:	2407      	movs	r4, #7
     924:	4264      	negs	r4, r4
	memcpy(value + offset, buf, len);

	relay2(value[0]);

	return len;
}
     926:	0020      	movs	r0, r4
     928:	bd70      	pop	{r4, r5, r6, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	200006c0 	.word	0x200006c0
     930:	00012142 	.word	0x00012142
     934:	00012152 	.word	0x00012152

00000938 <relay1_callback>:
	return len;
}

static ssize_t relay1_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
     938:	b570      	push	{r4, r5, r6, lr}
     93a:	000d      	movs	r5, r1
     93c:	0011      	movs	r1, r2
     93e:	aa04      	add	r2, sp, #16
     940:	8810      	ldrh	r0, [r2, #0]
     942:	aa05      	add	r2, sp, #20
     944:	7812      	ldrb	r2, [r2, #0]
	u8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
     946:	2400      	movs	r4, #0
static ssize_t relay1_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
	u8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
     948:	07d2      	lsls	r2, r2, #31
     94a:	d418      	bmi.n	97e <relay1_callback+0x46>
		return 0;
	}

	if (offset + len > sizeof(bot_relay1_char_value)) {		
     94c:	001c      	movs	r4, r3
     94e:	18c3      	adds	r3, r0, r3
     950:	2b02      	cmp	r3, #2
     952:	dc12      	bgt.n	97a <relay1_callback+0x42>
}

static ssize_t relay1_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
	u8_t *value = attr->user_data;
     954:	68ed      	ldr	r5, [r5, #12]

	if (offset + len > sizeof(bot_relay1_char_value)) {		
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
     956:	0022      	movs	r2, r4
     958:	1828      	adds	r0, r5, r0
     95a:	f000 f978 	bl	c4e <memcpy>

	relay1(value[0]);
     95e:	782d      	ldrb	r5, [r5, #0]
	control_motor(STOP, STOP);
	printk("Stop\n");
}

static void relay1(u8_t value) {
	gpio_pin_write(dev, RL_1, value);
     960:	4b08      	ldr	r3, [pc, #32]	; (984 <relay1_callback+0x4c>)
     962:	002a      	movs	r2, r5
     964:	2111      	movs	r1, #17
     966:	6818      	ldr	r0, [r3, #0]
     968:	f7ff ff14 	bl	794 <gpio_pin_write>

	if(value == RELAY_ON)
		printk("Turn Relay1 ON\n");
     96c:	4806      	ldr	r0, [pc, #24]	; (988 <relay1_callback+0x50>)
}

static void relay1(u8_t value) {
	gpio_pin_write(dev, RL_1, value);

	if(value == RELAY_ON)
     96e:	2d00      	cmp	r5, #0
     970:	d000      	beq.n	974 <relay1_callback+0x3c>
		printk("Turn Relay1 ON\n");
	else
		printk("Turn Relay1 OFF\n");
     972:	4806      	ldr	r0, [pc, #24]	; (98c <relay1_callback+0x54>)
     974:	f000 ff8e 	bl	1894 <printk>
     978:	e001      	b.n	97e <relay1_callback+0x46>
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
	}

	if (offset + len > sizeof(bot_relay1_char_value)) {		
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
     97a:	2407      	movs	r4, #7
     97c:	4264      	negs	r4, r4
	memcpy(value + offset, buf, len);

	relay1(value[0]);

	return len;
}
     97e:	0020      	movs	r0, r4
     980:	bd70      	pop	{r4, r5, r6, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	200006c0 	.word	0x200006c0
     988:	00012163 	.word	0x00012163
     98c:	00012173 	.word	0x00012173

00000990 <motion_callback>:
		printk("Turn Relay4 OFF\n");
}

static ssize_t motion_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
     990:	b570      	push	{r4, r5, r6, lr}
     992:	000e      	movs	r6, r1
     994:	0011      	movs	r1, r2
     996:	aa04      	add	r2, sp, #16
     998:	8810      	ldrh	r0, [r2, #0]
     99a:	aa05      	add	r2, sp, #20
     99c:	7815      	ldrb	r5, [r2, #0]
	u8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
     99e:	2400      	movs	r4, #0
static ssize_t motion_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
	u8_t *value = attr->user_data;
	
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
     9a0:	2201      	movs	r2, #1
     9a2:	4015      	ands	r5, r2
     9a4:	42a5      	cmp	r5, r4
     9a6:	d132      	bne.n	a0e <motion_callback+0x7e>
		return 0;
	}

	if (offset + len > sizeof(bot_motion_char_value)) {		
     9a8:	001c      	movs	r4, r3
     9aa:	18c3      	adds	r3, r0, r3
     9ac:	2b02      	cmp	r3, #2
     9ae:	dc2c      	bgt.n	a0a <motion_callback+0x7a>
}

static ssize_t motion_callback(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, const void *buf,
			      u16_t len, u16_t offset, u8_t flags) {
	u8_t *value = attr->user_data;
     9b0:	68f6      	ldr	r6, [r6, #12]

	if (offset + len > sizeof(bot_motion_char_value)) {		
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
     9b2:	0022      	movs	r2, r4
     9b4:	1830      	adds	r0, r6, r0
     9b6:	f000 f94a 	bl	c4e <memcpy>

	switch(value[0]) {
     9ba:	7830      	ldrb	r0, [r6, #0]
     9bc:	3801      	subs	r0, #1
     9be:	2803      	cmp	r0, #3
     9c0:	d81b      	bhi.n	9fa <motion_callback+0x6a>
     9c2:	f7ff fbd9 	bl	178 <__gnu_thumb1_case_uqi>
     9c6:	0802      	.short	0x0802
     9c8:	140e      	.short	0x140e
        }
    }
}

static void go_forward() {
	control_motor(DIR_FORWARD, DIR_FORWARD);
     9ca:	2101      	movs	r1, #1
     9cc:	0008      	movs	r0, r1
     9ce:	f7ff fee9 	bl	7a4 <control_motor>
	printk("Go Forward\n");
     9d2:	4810      	ldr	r0, [pc, #64]	; (a14 <motion_callback+0x84>)
     9d4:	e016      	b.n	a04 <motion_callback+0x74>
}

static void go_back() {
	control_motor(DIR_BACK, DIR_BACK);
     9d6:	2102      	movs	r1, #2
     9d8:	0008      	movs	r0, r1
     9da:	f7ff fee3 	bl	7a4 <control_motor>
	printk("Go Back\n");
     9de:	480e      	ldr	r0, [pc, #56]	; (a18 <motion_callback+0x88>)
     9e0:	e010      	b.n	a04 <motion_callback+0x74>
}

static void rotate_left() {
	control_motor(DIR_BACK, DIR_FORWARD);
     9e2:	2002      	movs	r0, #2
     9e4:	2101      	movs	r1, #1
     9e6:	f7ff fedd 	bl	7a4 <control_motor>
	printk("Rotate Left\n");
     9ea:	480c      	ldr	r0, [pc, #48]	; (a1c <motion_callback+0x8c>)
     9ec:	e00a      	b.n	a04 <motion_callback+0x74>
}

static void rotate_right() {
	control_motor(DIR_FORWARD, DIR_BACK);
     9ee:	2001      	movs	r0, #1
     9f0:	2102      	movs	r1, #2
     9f2:	f7ff fed7 	bl	7a4 <control_motor>
	printk("Rotate Right\n");
     9f6:	480a      	ldr	r0, [pc, #40]	; (a20 <motion_callback+0x90>)
     9f8:	e004      	b.n	a04 <motion_callback+0x74>
}

static void stop() {
	control_motor(STOP, STOP);
     9fa:	0028      	movs	r0, r5
     9fc:	0029      	movs	r1, r5
     9fe:	f7ff fed1 	bl	7a4 <control_motor>
	printk("Stop\n");
     a02:	4808      	ldr	r0, [pc, #32]	; (a24 <motion_callback+0x94>)
     a04:	f000 ff46 	bl	1894 <printk>
     a08:	e001      	b.n	a0e <motion_callback+0x7e>
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
		return 0;
	}

	if (offset + len > sizeof(bot_motion_char_value)) {		
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
     a0a:	2407      	movs	r4, #7
     a0c:	4264      	negs	r4, r4
			break;
		}
	}

	return len;
}
     a0e:	0020      	movs	r0, r4
     a10:	bd70      	pop	{r4, r5, r6, pc}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	00012184 	.word	0x00012184
     a18:	00012190 	.word	0x00012190
     a1c:	00012199 	.word	0x00012199
     a20:	000121a6 	.word	0x000121a6
     a24:	000121b4 	.word	0x000121b4

00000a28 <connected>:

static const struct bt_data sd[] = {
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};

static void connected(struct bt_conn *conn, u8_t err) {
     a28:	b510      	push	{r4, lr}
	if (err) {
     a2a:	2900      	cmp	r1, #0
     a2c:	d003      	beq.n	a36 <connected+0xe>
		printk("Connection failed (err %u)\n", err);
     a2e:	4807      	ldr	r0, [pc, #28]	; (a4c <connected+0x24>)
     a30:	f000 ff30 	bl	1894 <printk>
     a34:	e008      	b.n	a48 <connected+0x20>
	} else {
		ON_LED;		
     a36:	4b06      	ldr	r3, [pc, #24]	; (a50 <connected+0x28>)
     a38:	2201      	movs	r2, #1
     a3a:	2107      	movs	r1, #7
     a3c:	6818      	ldr	r0, [r3, #0]
     a3e:	f7ff fea9 	bl	794 <gpio_pin_write>
		printk("Connected\n");		
     a42:	4804      	ldr	r0, [pc, #16]	; (a54 <connected+0x2c>)
     a44:	f000 ff26 	bl	1894 <printk>

		// char addr[BT_ADDR_LE_STR_LEN];		
		// bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
		// printk("Central address: %s\n", addr);
	}
}
     a48:	bd10      	pop	{r4, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	000121ba 	.word	0x000121ba
     a50:	200006c0 	.word	0x200006c0
     a54:	000121d6 	.word	0x000121d6

00000a58 <bt_ready>:
static struct bt_conn_cb conn_callbacks = {
	.connected = connected,
	.disconnected = disconnected,
};

static void bt_ready(int err) {
     a58:	b530      	push	{r4, r5, lr}
     a5a:	0005      	movs	r5, r0
     a5c:	b087      	sub	sp, #28
	if (err) {
     a5e:	2800      	cmp	r0, #0
     a60:	d002      	beq.n	a68 <bt_ready+0x10>
		printk("Bluetooth init failed (err %d)\n", err);
     a62:	0001      	movs	r1, r0
     a64:	4812      	ldr	r0, [pc, #72]	; (ab0 <bt_ready+0x58>)
     a66:	e01b      	b.n	aa0 <bt_ready+0x48>
		return;
	}

	printk("Bluetooth initialized\n");
     a68:	4812      	ldr	r0, [pc, #72]	; (ab4 <bt_ready+0x5c>)
     a6a:	f000 ff13 	bl	1894 <printk>

	bt_gatt_service_register(&bot_svc);

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     a6e:	ac03      	add	r4, sp, #12
		return;
	}

	printk("Bluetooth initialized\n");

	bt_gatt_service_register(&bot_svc);
     a70:	4811      	ldr	r0, [pc, #68]	; (ab8 <bt_ready+0x60>)
     a72:	f005 fad1 	bl	6018 <bt_gatt_service_register>

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     a76:	220c      	movs	r2, #12
     a78:	0029      	movs	r1, r5
     a7a:	0020      	movs	r0, r4
     a7c:	f000 f911 	bl	ca2 <memset>
     a80:	22a0      	movs	r2, #160	; 0xa0
     a82:	2301      	movs	r3, #1
     a84:	8062      	strh	r2, [r4, #2]
     a86:	3250      	adds	r2, #80	; 0x50
     a88:	7023      	strb	r3, [r4, #0]
     a8a:	80a2      	strh	r2, [r4, #4]
     a8c:	490b      	ldr	r1, [pc, #44]	; (abc <bt_ready+0x64>)
     a8e:	9300      	str	r3, [sp, #0]
     a90:	3aed      	subs	r2, #237	; 0xed
     a92:	4b0b      	ldr	r3, [pc, #44]	; (ac0 <bt_ready+0x68>)
     a94:	0020      	movs	r0, r4
     a96:	f002 fca9 	bl	33ec <bt_le_adv_start>
     a9a:	1e01      	subs	r1, r0, #0
			      sd, ARRAY_SIZE(sd));
	if (err) {
     a9c:	d003      	beq.n	aa6 <bt_ready+0x4e>
		printk("Advertising failed to start (err %d)\n", err);
     a9e:	4809      	ldr	r0, [pc, #36]	; (ac4 <bt_ready+0x6c>)
     aa0:	f000 fef8 	bl	1894 <printk>
     aa4:	e002      	b.n	aac <bt_ready+0x54>
		return;
	}

	printk("Advertising successfully started\n");
     aa6:	4808      	ldr	r0, [pc, #32]	; (ac8 <bt_ready+0x70>)
     aa8:	f000 fef4 	bl	1894 <printk>
}
     aac:	b007      	add	sp, #28
     aae:	bd30      	pop	{r4, r5, pc}
     ab0:	000121e1 	.word	0x000121e1
     ab4:	00012201 	.word	0x00012201
     ab8:	2000004c 	.word	0x2000004c
     abc:	00012090 	.word	0x00012090
     ac0:	000120bc 	.word	0x000120bc
     ac4:	00012218 	.word	0x00012218
     ac8:	0001223e 	.word	0x0001223e

00000acc <gpio_pin_configure.constprop.2>:
 * @param port Pointer to device structure for the driver instance.
 * @param pin Pin number to configure.
 * @param flags Flags for pin configuration. IN/OUT, interrupt ...
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
     acc:	b510      	push	{r4, lr}
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
     ace:	6843      	ldr	r3, [r0, #4]
 * @param port Pointer to device structure for the driver instance.
 * @param pin Pin number to configure.
 * @param flags Flags for pin configuration. IN/OUT, interrupt ...
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
     ad0:	000a      	movs	r2, r1
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
     ad2:	681c      	ldr	r4, [r3, #0]
     ad4:	2100      	movs	r1, #0
     ad6:	2301      	movs	r3, #1
     ad8:	47a0      	blx	r4
}
     ada:	bd10      	pop	{r4, pc}

00000adc <main>:

void main(void) {
     adc:	b510      	push	{r4, lr}

	/* Init gpio */
	dev = device_get_binding(GPIO_PORT);
     ade:	4838      	ldr	r0, [pc, #224]	; (bc0 <main+0xe4>)
     ae0:	f010 f86a 	bl	10bb8 <device_get_binding>
     ae4:	4c37      	ldr	r4, [pc, #220]	; (bc4 <main+0xe8>)
	gpio_pin_configure(dev, LED_GPIO_PIN, GPIO_DIR_OUT);			/* Set LED pin as output */
     ae6:	2107      	movs	r1, #7
}

void main(void) {

	/* Init gpio */
	dev = device_get_binding(GPIO_PORT);
     ae8:	6020      	str	r0, [r4, #0]
	gpio_pin_configure(dev, LED_GPIO_PIN, GPIO_DIR_OUT);			/* Set LED pin as output */
     aea:	f7ff ffef 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, M1_A, GPIO_DIR_OUT);
     aee:	211c      	movs	r1, #28
     af0:	6820      	ldr	r0, [r4, #0]
     af2:	f7ff ffeb 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, M1_B, GPIO_DIR_OUT);
     af6:	2119      	movs	r1, #25
     af8:	6820      	ldr	r0, [r4, #0]
     afa:	f7ff ffe7 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, M2_A, GPIO_DIR_OUT);
     afe:	2118      	movs	r1, #24
     b00:	6820      	ldr	r0, [r4, #0]
     b02:	f7ff ffe3 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, M2_B, GPIO_DIR_OUT);
     b06:	2117      	movs	r1, #23
     b08:	6820      	ldr	r0, [r4, #0]
     b0a:	f7ff ffdf 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, M3_A, GPIO_DIR_OUT);
     b0e:	2116      	movs	r1, #22
     b10:	6820      	ldr	r0, [r4, #0]
     b12:	f7ff ffdb 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, M3_B, GPIO_DIR_OUT);
     b16:	2115      	movs	r1, #21
     b18:	6820      	ldr	r0, [r4, #0]
     b1a:	f7ff ffd7 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, M4_A, GPIO_DIR_OUT);
     b1e:	2109      	movs	r1, #9
     b20:	6820      	ldr	r0, [r4, #0]
     b22:	f7ff ffd3 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, M4_B, GPIO_DIR_OUT);
     b26:	2110      	movs	r1, #16
     b28:	6820      	ldr	r0, [r4, #0]
     b2a:	f7ff ffcf 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, RL_1, GPIO_DIR_OUT);
     b2e:	2111      	movs	r1, #17
     b30:	6820      	ldr	r0, [r4, #0]
     b32:	f7ff ffcb 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, RL_2, GPIO_DIR_OUT);
     b36:	2112      	movs	r1, #18
     b38:	6820      	ldr	r0, [r4, #0]
     b3a:	f7ff ffc7 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, RL_3, GPIO_DIR_OUT);
     b3e:	2113      	movs	r1, #19
     b40:	6820      	ldr	r0, [r4, #0]
     b42:	f7ff ffc3 	bl	acc <gpio_pin_configure.constprop.2>
	gpio_pin_configure(dev, RL_4, GPIO_DIR_OUT);
     b46:	2114      	movs	r1, #20
     b48:	6820      	ldr	r0, [r4, #0]
     b4a:	f7ff ffbf 	bl	acc <gpio_pin_configure.constprop.2>
	control_motor(DIR_FORWARD, DIR_BACK);
	printk("Rotate Right\n");
}

static void stop() {
	control_motor(STOP, STOP);
     b4e:	2100      	movs	r1, #0
     b50:	0008      	movs	r0, r1
     b52:	f7ff fe27 	bl	7a4 <control_motor>
	printk("Stop\n");
     b56:	481c      	ldr	r0, [pc, #112]	; (bc8 <main+0xec>)
     b58:	f000 fe9c 	bl	1894 <printk>
}

static void relay1(u8_t value) {
	gpio_pin_write(dev, RL_1, value);
     b5c:	2201      	movs	r2, #1
     b5e:	2111      	movs	r1, #17
     b60:	6820      	ldr	r0, [r4, #0]
     b62:	f7ff fe17 	bl	794 <gpio_pin_write>

	if(value == RELAY_ON)
		printk("Turn Relay1 ON\n");
	else
		printk("Turn Relay1 OFF\n");
     b66:	4819      	ldr	r0, [pc, #100]	; (bcc <main+0xf0>)
     b68:	f000 fe94 	bl	1894 <printk>
}

static void relay2(u8_t value) {
	gpio_pin_write(dev, RL_1, value);
     b6c:	2201      	movs	r2, #1
     b6e:	2111      	movs	r1, #17
     b70:	6820      	ldr	r0, [r4, #0]
     b72:	f7ff fe0f 	bl	794 <gpio_pin_write>

	if(value == RELAY_ON)
		printk("Turn Relay2 ON\n");
	else
		printk("Turn Relay2 OFF\n");
     b76:	4816      	ldr	r0, [pc, #88]	; (bd0 <main+0xf4>)
     b78:	f000 fe8c 	bl	1894 <printk>
}

static void relay3(u8_t value) {
	gpio_pin_write(dev, RL_3, value);
     b7c:	2201      	movs	r2, #1
     b7e:	2113      	movs	r1, #19
     b80:	6820      	ldr	r0, [r4, #0]
     b82:	f7ff fe07 	bl	794 <gpio_pin_write>

	if(value == RELAY_ON)
		printk("Turn Relay3 ON\n");
	else
		printk("Turn Relay3 OFF\n");
     b86:	4813      	ldr	r0, [pc, #76]	; (bd4 <main+0xf8>)
     b88:	f000 fe84 	bl	1894 <printk>
}

static void relay4(u8_t value) {
	gpio_pin_write(dev, RL_4, value);
     b8c:	2114      	movs	r1, #20
     b8e:	2201      	movs	r2, #1
     b90:	6820      	ldr	r0, [r4, #0]
     b92:	f7ff fdff 	bl	794 <gpio_pin_write>

	if(value == RELAY_ON)
		printk("Turn Relay4 ON\n");
	else
		printk("Turn Relay4 OFF\n");
     b96:	4810      	ldr	r0, [pc, #64]	; (bd8 <main+0xfc>)
     b98:	f000 fe7c 	bl	1894 <printk>
	relay4(RELAY_OFF);

	/* Init BLE */
	int err;

	err = bt_enable(bt_ready);
     b9c:	480f      	ldr	r0, [pc, #60]	; (bdc <main+0x100>)
     b9e:	f002 fbad 	bl	32fc <bt_enable>
     ba2:	1e01      	subs	r1, r0, #0
	if (err) {
     ba4:	d003      	beq.n	bae <main+0xd2>
		printk("Bluetooth init failed (err %d)\n", err);
     ba6:	480e      	ldr	r0, [pc, #56]	; (be0 <main+0x104>)
     ba8:	f000 fe74 	bl	1894 <printk>

	while (1) {
		k_sleep(MSEC_PER_SEC);

	}
}
     bac:	bd10      	pop	{r4, pc}
	if (err) {
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	bt_conn_cb_register(&conn_callbacks);	
     bae:	480d      	ldr	r0, [pc, #52]	; (be4 <main+0x108>)
     bb0:	f002 fd6e 	bl	3690 <bt_conn_cb_register>

	while (1) {
		k_sleep(MSEC_PER_SEC);
     bb4:	20fa      	movs	r0, #250	; 0xfa
     bb6:	0080      	lsls	r0, r0, #2
     bb8:	f010 fdd8 	bl	1176c <k_sleep>
     bbc:	e7fa      	b.n	bb4 <main+0xd8>
     bbe:	46c0      	nop			; (mov r8, r8)
     bc0:	00012260 	.word	0x00012260
     bc4:	200006c0 	.word	0x200006c0
     bc8:	000121b4 	.word	0x000121b4
     bcc:	00012173 	.word	0x00012173
     bd0:	00012152 	.word	0x00012152
     bd4:	00012131 	.word	0x00012131
     bd8:	00012110 	.word	0x00012110
     bdc:	00000a59 	.word	0x00000a59
     be0:	000121e1 	.word	0x000121e1
     be4:	20000028 	.word	0x20000028

00000be8 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
     be8:	0003      	movs	r3, r0
     bea:	780a      	ldrb	r2, [r1, #0]
		*d = *s;
     bec:	701a      	strb	r2, [r3, #0]

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
     bee:	2a00      	cmp	r2, #0
     bf0:	d002      	beq.n	bf8 <strcpy+0x10>
		*d = *s;
		d++;
     bf2:	3301      	adds	r3, #1
		s++;
     bf4:	3101      	adds	r1, #1
     bf6:	e7f8      	b.n	bea <strcpy+0x2>
	}

	*d = '\0';

	return dest;
}
     bf8:	4770      	bx	lr

00000bfa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
     bfa:	0002      	movs	r2, r0
	size_t n = 0;

	while (*s != '\0') {
     bfc:	0003      	movs	r3, r0
     bfe:	7819      	ldrb	r1, [r3, #0]
     c00:	1a98      	subs	r0, r3, r2
     c02:	2900      	cmp	r1, #0
     c04:	d001      	beq.n	c0a <strlen+0x10>
		s++;
     c06:	3301      	adds	r3, #1
     c08:	e7f9      	b.n	bfe <strlen+0x4>
		n++;
	}

	return n;
}
     c0a:	4770      	bx	lr

00000c0c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
     c0c:	7803      	ldrb	r3, [r0, #0]
     c0e:	780a      	ldrb	r2, [r1, #0]
     c10:	4293      	cmp	r3, r2
     c12:	d105      	bne.n	c20 <strcmp+0x14>
     c14:	2b00      	cmp	r3, #0
     c16:	d002      	beq.n	c1e <strcmp+0x12>
		s1++;
     c18:	3001      	adds	r0, #1
		s2++;
     c1a:	3101      	adds	r1, #1
     c1c:	e7f6      	b.n	c0c <strcmp>
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
     c1e:	001a      	movs	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
     c20:	1a98      	subs	r0, r3, r2
}
     c22:	4770      	bx	lr

00000c24 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     c24:	0003      	movs	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
     c26:	2000      	movs	r0, #0
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     c28:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     c2a:	4282      	cmp	r2, r0
     c2c:	d00e      	beq.n	c4c <memcmp+0x28>
     c2e:	3a01      	subs	r2, #1
     c30:	189a      	adds	r2, r3, r2
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     c32:	4293      	cmp	r3, r2
     c34:	d103      	bne.n	c3e <memcmp+0x1a>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     c36:	781b      	ldrb	r3, [r3, #0]
     c38:	7808      	ldrb	r0, [r1, #0]
     c3a:	1a18      	subs	r0, r3, r0
     c3c:	e006      	b.n	c4c <memcmp+0x28>
	const char *c2 = m2;

	if (!n)
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     c3e:	781c      	ldrb	r4, [r3, #0]
     c40:	7808      	ldrb	r0, [r1, #0]
     c42:	4284      	cmp	r4, r0
     c44:	d1f7      	bne.n	c36 <memcmp+0x12>
		c1++;
     c46:	3301      	adds	r3, #1
		c2++;
     c48:	3101      	adds	r1, #1
     c4a:	e7f2      	b.n	c32 <memcmp+0xe>
	}

	return *c1 - *c2;
}
     c4c:	bd10      	pop	{r4, pc}

00000c4e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
     c4e:	b530      	push	{r4, r5, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     c50:	0004      	movs	r4, r0
     c52:	2303      	movs	r3, #3
     c54:	404c      	eors	r4, r1
     c56:	421c      	tst	r4, r3
     c58:	d002      	beq.n	c60 <memcpy+0x12>

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
     c5a:	0004      	movs	r4, r0
     c5c:	2300      	movs	r3, #0
     c5e:	e019      	b.n	c94 <memcpy+0x46>
     c60:	0004      	movs	r4, r0

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
     c62:	001d      	movs	r5, r3
     c64:	0023      	movs	r3, r4
     c66:	402b      	ands	r3, r5
     c68:	d007      	beq.n	c7a <memcpy+0x2c>
			if (n == 0) {
     c6a:	2a00      	cmp	r2, #0
     c6c:	d018      	beq.n	ca0 <memcpy+0x52>
				return d;
			}
			*(d_byte++) = *(s_byte++);
     c6e:	780b      	ldrb	r3, [r1, #0]
			n--;
     c70:	3a01      	subs	r2, #1

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
				return d;
			}
			*(d_byte++) = *(s_byte++);
     c72:	7023      	strb	r3, [r4, #0]
     c74:	3101      	adds	r1, #1
     c76:	3401      	adds	r4, #1
     c78:	e7f4      	b.n	c64 <memcpy+0x16>
		/* do word-sized copying as long as possible */

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
     c7a:	1ad5      	subs	r5, r2, r3
     c7c:	2d03      	cmp	r5, #3
     c7e:	d903      	bls.n	c88 <memcpy+0x3a>
			*(d_word++) = *(s_word++);
     c80:	58cd      	ldr	r5, [r1, r3]
     c82:	50e5      	str	r5, [r4, r3]
     c84:	3304      	adds	r3, #4
     c86:	e7f8      	b.n	c7a <memcpy+0x2c>
     c88:	0893      	lsrs	r3, r2, #2
     c8a:	009b      	lsls	r3, r3, #2
     c8c:	1ad2      	subs	r2, r2, r3
     c8e:	18e4      	adds	r4, r4, r3
     c90:	18c9      	adds	r1, r1, r3
     c92:	e7e3      	b.n	c5c <memcpy+0xe>
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     c94:	429a      	cmp	r2, r3
     c96:	d003      	beq.n	ca0 <memcpy+0x52>
		*(d_byte++) = *(s_byte++);
     c98:	5ccd      	ldrb	r5, [r1, r3]
     c9a:	54e5      	strb	r5, [r4, r3]
     c9c:	3301      	adds	r3, #1
     c9e:	e7f9      	b.n	c94 <memcpy+0x46>
		n--;
	}

	return d;
}
     ca0:	bd30      	pop	{r4, r5, pc}

00000ca2 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca4:	0003      	movs	r3, r0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
     ca6:	2603      	movs	r6, #3
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     ca8:	b2cc      	uxtb	r4, r1
     caa:	001d      	movs	r5, r3

	while (((unsigned int)d_byte) & 0x3) {
     cac:	4233      	tst	r3, r6
     cae:	d005      	beq.n	cbc <memset+0x1a>
		if (n == 0) {
     cb0:	2a00      	cmp	r2, #0
     cb2:	d01a      	beq.n	cea <memset+0x48>
			return buf;
		}
		*(d_byte++) = c_byte;
     cb4:	701c      	strb	r4, [r3, #0]
		n--;
     cb6:	3a01      	subs	r2, #1
     cb8:	3301      	adds	r3, #1
     cba:	e7f6      	b.n	caa <memset+0x8>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     cbc:	27ff      	movs	r7, #255	; 0xff
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
     cbe:	b2ce      	uxtb	r6, r1

	c_word |= c_word << 8;
     cc0:	023f      	lsls	r7, r7, #8
     cc2:	0209      	lsls	r1, r1, #8
     cc4:	4039      	ands	r1, r7
     cc6:	4331      	orrs	r1, r6
	c_word |= c_word << 16;
     cc8:	040e      	lsls	r6, r1, #16
     cca:	4331      	orrs	r1, r6

	while (n >= sizeof(unsigned int)) {
     ccc:	0016      	movs	r6, r2
     cce:	2e03      	cmp	r6, #3
     cd0:	d902      	bls.n	cd8 <memset+0x36>
		*(d_word++) = c_word;
     cd2:	c302      	stmia	r3!, {r1}
		n -= sizeof(unsigned int);
     cd4:	3e04      	subs	r6, #4
     cd6:	e7fa      	b.n	cce <memset+0x2c>
     cd8:	0893      	lsrs	r3, r2, #2
     cda:	009b      	lsls	r3, r3, #2
     cdc:	18eb      	adds	r3, r5, r3
     cde:	18aa      	adds	r2, r5, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     ce0:	4293      	cmp	r3, r2
     ce2:	d002      	beq.n	cea <memset+0x48>
		*(d_byte++) = c_byte;
     ce4:	701c      	strb	r4, [r3, #0]
     ce6:	3301      	adds	r3, #1
     ce8:	e7fa      	b.n	ce0 <memset+0x3e>
		n--;
	}

	return buf;
}
     cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000cec <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
     cec:	b570      	push	{r4, r5, r6, lr}
     cee:	0004      	movs	r4, r0
     cf0:	4d07      	ldr	r5, [pc, #28]	; (d10 <console_out+0x24>)
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     cf2:	280a      	cmp	r0, #10
     cf4:	d104      	bne.n	d00 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
     cf6:	6828      	ldr	r0, [r5, #0]
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
     cf8:	210d      	movs	r1, #13
     cfa:	6843      	ldr	r3, [r0, #4]
     cfc:	685b      	ldr	r3, [r3, #4]
     cfe:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
     d00:	6828      	ldr	r0, [r5, #0]
     d02:	b2e1      	uxtb	r1, r4
     d04:	6843      	ldr	r3, [r0, #4]
     d06:	685b      	ldr	r3, [r3, #4]
     d08:	4798      	blx	r3

	return c;
}
     d0a:	0020      	movs	r0, r4
     d0c:	bd70      	pop	{r4, r5, r6, pc}
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	200006c8 	.word	0x200006c8

00000d14 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     d14:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
     d16:	4802      	ldr	r0, [pc, #8]	; (d20 <uart_console_hook_install+0xc>)
     d18:	f000 fc84 	bl	1624 <__printk_hook_install>
}
     d1c:	bd10      	pop	{r4, pc}
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	00000ced 	.word	0x00000ced

00000d24 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     d24:	b510      	push	{r4, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     d26:	4804      	ldr	r0, [pc, #16]	; (d38 <uart_console_init+0x14>)
     d28:	f00f ff46 	bl	10bb8 <device_get_binding>
     d2c:	4b03      	ldr	r3, [pc, #12]	; (d3c <uart_console_init+0x18>)
     d2e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     d30:	f7ff fff0 	bl	d14 <uart_console_hook_install>

	return 0;
}
     d34:	2000      	movs	r0, #0
     d36:	bd10      	pop	{r4, pc}
     d38:	00012292 	.word	0x00012292
     d3c:	200006c8 	.word	0x200006c8

00000d40 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     d40:	6803      	ldr	r3, [r0, #0]
     d42:	689b      	ldr	r3, [r3, #8]
     d44:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
     d46:	001a      	movs	r2, r3
     d48:	32fc      	adds	r2, #252	; 0xfc
     d4a:	68d0      	ldr	r0, [r2, #12]
     d4c:	2800      	cmp	r0, #0
     d4e:	d006      	beq.n	d5e <uart_nrf5_poll_in+0x1e>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
     d50:	2000      	movs	r0, #0
     d52:	60d0      	str	r0, [r2, #12]

	/* got a character */
	*c = (unsigned char)uart->RXD;
     d54:	22a3      	movs	r2, #163	; 0xa3
     d56:	00d2      	lsls	r2, r2, #3
     d58:	589b      	ldr	r3, [r3, r2]
     d5a:	700b      	strb	r3, [r1, #0]

	return 0;
     d5c:	e001      	b.n	d62 <uart_nrf5_poll_in+0x22>
static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);

	if (!uart->EVENTS_RXDRDY) {
		return -1;
     d5e:	2001      	movs	r0, #1
     d60:	4240      	negs	r0, r0

	/* got a character */
	*c = (unsigned char)uart->RXD;

	return 0;
}
     d62:	4770      	bx	lr

00000d64 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     d64:	6803      	ldr	r3, [r0, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
     d66:	4a06      	ldr	r2, [pc, #24]	; (d80 <uart_nrf5_poll_out+0x1c>)
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     d68:	689b      	ldr	r3, [r3, #8]
     d6a:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
     d6c:	5099      	str	r1, [r3, r2]

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
     d6e:	33fc      	adds	r3, #252	; 0xfc
     d70:	6a1a      	ldr	r2, [r3, #32]
     d72:	2a00      	cmp	r2, #0
     d74:	d0fc      	beq.n	d70 <uart_nrf5_poll_out+0xc>
	}

	uart->EVENTS_TXDRDY = 0;
     d76:	2200      	movs	r2, #0

	return c;
}
     d78:	0008      	movs	r0, r1

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
	}

	uart->EVENTS_TXDRDY = 0;
     d7a:	621a      	str	r2, [r3, #32]

	return c;
}
     d7c:	4770      	bx	lr
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	0000051c 	.word	0x0000051c

00000d84 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     d84:	6803      	ldr	r3, [r0, #0]
	u32_t error = 0;
     d86:	2000      	movs	r0, #0
}

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     d88:	689b      	ldr	r3, [r3, #8]
     d8a:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
     d8c:	001a      	movs	r2, r3
     d8e:	32fc      	adds	r2, #252	; 0xfc
     d90:	6a92      	ldr	r2, [r2, #40]	; 0x28
     d92:	4282      	cmp	r2, r0
     d94:	d003      	beq.n	d9e <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
     d96:	2290      	movs	r2, #144	; 0x90
     d98:	00d2      	lsls	r2, r2, #3
     d9a:	5898      	ldr	r0, [r3, r2]

		/* Clear the register */
		uart->ERRORSRC = error;
     d9c:	5098      	str	r0, [r3, r2]
	}

	error = error & 0x0F;

	return error;
     d9e:	230f      	movs	r3, #15
     da0:	4018      	ands	r0, r3
}
     da2:	4770      	bx	lr

00000da4 <uart_nrf5_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
     da6:	6803      	ldr	r3, [r0, #0]
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     da8:	0005      	movs	r5, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
     daa:	689b      	ldr	r3, [r3, #8]
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     dac:	4818      	ldr	r0, [pc, #96]	; (e10 <uart_nrf5_init+0x6c>)
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     dae:	681c      	ldr	r4, [r3, #0]
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     db0:	f00f ff02 	bl	10bb8 <device_get_binding>
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
     db4:	6843      	ldr	r3, [r0, #4]
     db6:	0006      	movs	r6, r0
     db8:	681f      	ldr	r7, [r3, #0]
     dba:	2302      	movs	r3, #2
     dbc:	220a      	movs	r2, #10
     dbe:	33ff      	adds	r3, #255	; 0xff
     dc0:	2100      	movs	r1, #0
     dc2:	47b8      	blx	r7
     dc4:	6873      	ldr	r3, [r6, #4]
     dc6:	0030      	movs	r0, r6
     dc8:	681f      	ldr	r7, [r3, #0]
     dca:	2300      	movs	r3, #0
     dcc:	220b      	movs	r2, #11
     dce:	0019      	movs	r1, r3
     dd0:	47b8      	blx	r7
				  (GPIO_DIR_OUT | GPIO_PUD_PULL_UP));
	(void) gpio_pin_configure(gpio_dev,
				  CONFIG_UART_NRF5_GPIO_RX_PIN,
				  (GPIO_DIR_IN));

	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
     dd2:	220a      	movs	r2, #10
     dd4:	4b0f      	ldr	r3, [pc, #60]	; (e14 <uart_nrf5_init+0x70>)
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     dd6:	21eb      	movs	r1, #235	; 0xeb
				  (GPIO_DIR_OUT | GPIO_PUD_PULL_UP));
	(void) gpio_pin_configure(gpio_dev,
				  CONFIG_UART_NRF5_GPIO_RX_PIN,
				  (GPIO_DIR_IN));

	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
     dd8:	50e2      	str	r2, [r4, r3]
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
     dda:	4b0f      	ldr	r3, [pc, #60]	; (e18 <uart_nrf5_init+0x74>)
     ddc:	3201      	adds	r2, #1
     dde:	50e2      	str	r2, [r4, r3]
	uart->PSELCTS = CONFIG_UART_NRF5_GPIO_CTS_PIN;
	uart->CONFIG = (UART_CONFIG_HWFC_Enabled << UART_CONFIG_HWFC_Pos);

#endif /* CONFIG_UART_NRF5_FLOW_CONTROL */

	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
     de0:	22e1      	movs	r2, #225	; 0xe1
     de2:	68ab      	ldr	r3, [r5, #8]
     de4:	0252      	lsls	r2, r2, #9
     de6:	601a      	str	r2, [r3, #0]
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     de8:	682b      	ldr	r3, [r5, #0]
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     dea:	0449      	lsls	r1, r1, #17
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     dec:	689b      	ldr	r3, [r3, #8]
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);

	uart->EVENTS_TXDRDY = 0;
     dee:	2000      	movs	r0, #0
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     df0:	681a      	ldr	r2, [r3, #0]
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     df2:	4b0a      	ldr	r3, [pc, #40]	; (e1c <uart_nrf5_init+0x78>)
     df4:	50d1      	str	r1, [r2, r3]
	if (err) {
		return err;
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
     df6:	2204      	movs	r2, #4
     df8:	3b24      	subs	r3, #36	; 0x24
     dfa:	50e2      	str	r2, [r4, r3]

	uart->EVENTS_TXDRDY = 0;
     dfc:	0023      	movs	r3, r4
     dfe:	33fc      	adds	r3, #252	; 0xfc
     e00:	6218      	str	r0, [r3, #32]
	uart->EVENTS_RXDRDY = 0;
     e02:	60d8      	str	r0, [r3, #12]

	uart->TASKS_STARTTX = 1;
     e04:	2301      	movs	r3, #1
     e06:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
     e08:	6023      	str	r3, [r4, #0]

	dev->driver_api = &uart_nrf5_driver_api;
     e0a:	4b05      	ldr	r3, [pc, #20]	; (e20 <uart_nrf5_init+0x7c>)
     e0c:	606b      	str	r3, [r5, #4]
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->irq_config_func(dev);
#endif

	return 0;
}
     e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e10:	00012260 	.word	0x00012260
     e14:	0000050c 	.word	0x0000050c
     e18:	00000514 	.word	0x00000514
     e1c:	00000524 	.word	0x00000524
     e20:	000122bc 	.word	0x000122bc

00000e24 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
     e24:	22a8      	movs	r2, #168	; 0xa8
     e26:	4b08      	ldr	r3, [pc, #32]	; (e48 <rtc_compare_set+0x24>)
     e28:	00d2      	lsls	r2, r2, #3
     e2a:	5098      	str	r0, [r3, r2]
	rtc_now = RTC_COUNTER;
     e2c:	4a07      	ldr	r2, [pc, #28]	; (e4c <rtc_compare_set+0x28>)
     e2e:	589b      	ldr	r3, [r3, r2]
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
     e30:	1ac0      	subs	r0, r0, r3
     e32:	0200      	lsls	r0, r0, #8
     e34:	0a00      	lsrs	r0, r0, #8
     e36:	4b06      	ldr	r3, [pc, #24]	; (e50 <rtc_compare_set+0x2c>)
     e38:	3802      	subs	r0, #2
     e3a:	4298      	cmp	r0, r3
     e3c:	d903      	bls.n	e46 <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     e3e:	2280      	movs	r2, #128	; 0x80
     e40:	4b04      	ldr	r3, [pc, #16]	; (e54 <rtc_compare_set+0x30>)
     e42:	0292      	lsls	r2, r2, #10
     e44:	605a      	str	r2, [r3, #4]
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
     e46:	4770      	bx	lr
     e48:	40011000 	.word	0x40011000
     e4c:	00000504 	.word	0x00000504
     e50:	007ffffd 	.word	0x007ffffd
     e54:	e000e1fc 	.word	0xe000e1fc

00000e58 <rtc_announce_set_next>:

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     e58:	4b13      	ldr	r3, [pc, #76]	; (ea8 <rtc_announce_set_next+0x50>)
     e5a:	4a14      	ldr	r2, [pc, #80]	; (eac <rtc_announce_set_next+0x54>)
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
     e5c:	b570      	push	{r4, r5, r6, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     e5e:	58d0      	ldr	r0, [r2, r3]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     e60:	23a3      	movs	r3, #163	; 0xa3
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     e62:	4d13      	ldr	r5, [pc, #76]	; (eb0 <rtc_announce_set_next+0x58>)

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     e64:	005b      	lsls	r3, r3, #1
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     e66:	682c      	ldr	r4, [r5, #0]
     e68:	1b00      	subs	r0, r0, r4
     e6a:	0200      	lsls	r0, r0, #8
     e6c:	0a00      	lsrs	r0, r0, #8

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     e6e:	4298      	cmp	r0, r3
     e70:	d913      	bls.n	e9a <rtc_announce_set_next+0x42>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
     e72:	2148      	movs	r1, #72	; 0x48
     e74:	31ff      	adds	r1, #255	; 0xff
     e76:	f7ff f99d 	bl	1b4 <__aeabi_uidiv>

		if (sys_elapsed > expected_sys_ticks) {
     e7a:	4b0e      	ldr	r3, [pc, #56]	; (eb4 <rtc_announce_set_next+0x5c>)
     e7c:	681b      	ldr	r3, [r3, #0]
     e7e:	4298      	cmp	r0, r3
     e80:	d900      	bls.n	e84 <rtc_announce_set_next+0x2c>
     e82:	0018      	movs	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     e84:	2348      	movs	r3, #72	; 0x48
     e86:	33ff      	adds	r3, #255	; 0xff
     e88:	4343      	muls	r3, r0
     e8a:	191c      	adds	r4, r3, r4
     e8c:	0224      	lsls	r4, r4, #8
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     e8e:	4b0a      	ldr	r3, [pc, #40]	; (eb8 <rtc_announce_set_next+0x60>)

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     e90:	0a24      	lsrs	r4, r4, #8
     e92:	602c      	str	r4, [r5, #0]
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     e94:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
     e96:	f010 fd91 	bl	119bc <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
     e9a:	6828      	ldr	r0, [r5, #0]
     e9c:	3048      	adds	r0, #72	; 0x48
     e9e:	30ff      	adds	r0, #255	; 0xff
     ea0:	f7ff ffc0 	bl	e24 <rtc_compare_set>
}
     ea4:	bd70      	pop	{r4, r5, r6, pc}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	00000504 	.word	0x00000504
     eac:	40011000 	.word	0x40011000
     eb0:	200006cc 	.word	0x200006cc
     eb4:	200006d0 	.word	0x200006d0
     eb8:	2000057c 	.word	0x2000057c

00000ebc <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     ebc:	2200      	movs	r2, #0
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
     ebe:	b510      	push	{r4, lr}
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     ec0:	4b02      	ldr	r3, [pc, #8]	; (ecc <rtc1_nrf5_isr+0x10>)
     ec2:	645a      	str	r2, [r3, #68]	; 0x44
	rtc_announce_set_next();
     ec4:	f7ff ffc8 	bl	e58 <rtc_announce_set_next>
}
     ec8:	bd10      	pop	{r4, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	400110fc 	.word	0x400110fc

00000ed0 <_timer_idle_enter>:
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     ed0:	4b07      	ldr	r3, [pc, #28]	; (ef0 <_timer_idle_enter+0x20>)
 * c) The RTC is programmed to fire at sys tick 1 + 3 = 4 (RTC tick 400)
 *
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
     ed2:	b510      	push	{r4, lr}
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     ed4:	4298      	cmp	r0, r3
     ed6:	d900      	bls.n	eda <_timer_idle_enter+0xa>
	    (sys_ticks > (RTC_HALF / RTC_TICKS_PER_SYS_TICK))) {
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
     ed8:	0018      	movs	r0, r3
	}

	expected_sys_ticks = sys_ticks;
     eda:	4b06      	ldr	r3, [pc, #24]	; (ef4 <_timer_idle_enter+0x24>)
     edc:	6018      	str	r0, [r3, #0]

	/* If ticks is 0, the RTC interrupt handler will be set pending
	 * immediately, meaning that we will not go to sleep.
	 */
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
     ede:	2348      	movs	r3, #72	; 0x48
     ee0:	33ff      	adds	r3, #255	; 0xff
     ee2:	4358      	muls	r0, r3
     ee4:	4b04      	ldr	r3, [pc, #16]	; (ef8 <_timer_idle_enter+0x28>)
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	18c0      	adds	r0, r0, r3
     eea:	f7ff ff9b 	bl	e24 <rtc_compare_set>
}
     eee:	bd10      	pop	{r4, pc}
     ef0:	00006435 	.word	0x00006435
     ef4:	200006d0 	.word	0x200006d0
     ef8:	200006cc 	.word	0x200006cc

00000efc <_timer_idle_exit>:
{
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     efc:	2200      	movs	r2, #0
     efe:	4b07      	ldr	r3, [pc, #28]	; (f1c <_timer_idle_exit+0x20>)
 * a) Notify how many sys ticks have passed, i.e., 350 - 150 / 100 = 2.
 * b) Schedule next sys tick at 400.
 *
 */
void _timer_idle_exit(void)
{
     f00:	b510      	push	{r4, lr}
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     f02:	2180      	movs	r1, #128	; 0x80
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     f04:	645a      	str	r2, [r3, #68]	; 0x44
     f06:	23c0      	movs	r3, #192	; 0xc0
     f08:	4a05      	ldr	r2, [pc, #20]	; (f20 <_timer_idle_exit+0x24>)
     f0a:	005b      	lsls	r3, r3, #1
     f0c:	0289      	lsls	r1, r1, #10
     f0e:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	rtc_announce_set_next();
     f10:	f7ff ffa2 	bl	e58 <rtc_announce_set_next>

	/* After exiting idle, the kernel no longer expects more than one sys
	 * ticks to have passed when _sys_clock_tick_announce() is called.
	 */
	expected_sys_ticks = 1;
     f14:	2201      	movs	r2, #1
     f16:	4b03      	ldr	r3, [pc, #12]	; (f24 <_timer_idle_exit+0x28>)
     f18:	601a      	str	r2, [r3, #0]
}
     f1a:	bd10      	pop	{r4, pc}
     f1c:	400110fc 	.word	0x400110fc
     f20:	e000e100 	.word	0xe000e100
     f24:	200006d0 	.word	0x200006d0

00000f28 <_sys_clock_driver_init>:
	RTC_CC_EVENT = 0;
	rtc_announce_set_next();
}

int _sys_clock_driver_init(struct device *device)
{
     f28:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
     f2a:	481a      	ldr	r0, [pc, #104]	; (f94 <_sys_clock_driver_init+0x6c>)
     f2c:	f00f fe44 	bl	10bb8 <device_get_binding>
	if (!clock) {
     f30:	2800      	cmp	r0, #0
     f32:	d02c      	beq.n	f8e <_sys_clock_driver_init+0x66>
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     f34:	2400      	movs	r4, #0

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     f36:	2601      	movs	r6, #1
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
     f38:	6843      	ldr	r3, [r0, #4]
     f3a:	2101      	movs	r1, #1
     f3c:	681b      	ldr	r3, [r3, #0]
     f3e:	4798      	blx	r3
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     f40:	4b15      	ldr	r3, [pc, #84]	; (f98 <_sys_clock_driver_init+0x70>)
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
     f42:	2248      	movs	r2, #72	; 0x48
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     f44:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     f46:	4b15      	ldr	r3, [pc, #84]	; (f9c <_sys_clock_driver_init+0x74>)
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
     f48:	4d15      	ldr	r5, [pc, #84]	; (fa0 <_sys_clock_driver_init+0x78>)
	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     f4a:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
     f4c:	23a1      	movs	r3, #161	; 0xa1
     f4e:	00db      	lsls	r3, r3, #3
     f50:	50ec      	str	r4, [r5, r3]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
     f52:	32ff      	adds	r2, #255	; 0xff
     f54:	3338      	adds	r3, #56	; 0x38
     f56:	50ea      	str	r2, [r5, r3]
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
     f58:	2380      	movs	r3, #128	; 0x80
     f5a:	32fe      	adds	r2, #254	; 0xfe
     f5c:	025b      	lsls	r3, r3, #9
     f5e:	32ff      	adds	r2, #255	; 0xff
     f60:	50ab      	str	r3, [r5, r2]
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
     f62:	3a40      	subs	r2, #64	; 0x40
     f64:	50ab      	str	r3, [r5, r2]

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
     f66:	4b0f      	ldr	r3, [pc, #60]	; (fa4 <_sys_clock_driver_init+0x7c>)
     f68:	2180      	movs	r1, #128	; 0x80
     f6a:	645c      	str	r4, [r3, #68]	; 0x44
     f6c:	23c0      	movs	r3, #192	; 0xc0
     f6e:	4a0e      	ldr	r2, [pc, #56]	; (fa8 <_sys_clock_driver_init+0x80>)
     f70:	005b      	lsls	r3, r3, #1
     f72:	0289      	lsls	r1, r1, #10
     f74:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
     f76:	2011      	movs	r0, #17
     f78:	0022      	movs	r2, r4
     f7a:	0031      	movs	r1, r6
     f7c:	f00f fc8e 	bl	1089c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
     f80:	2011      	movs	r0, #17
     f82:	f00f fc6b 	bl	1085c <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
     f86:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
     f88:	0020      	movs	r0, r4

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
	irq_enable(NRF5_IRQ_RTC1_IRQn);

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;
     f8a:	602e      	str	r6, [r5, #0]

	return 0;
     f8c:	e001      	b.n	f92 <_sys_clock_driver_init+0x6a>

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
	if (!clock) {
		return -1;
     f8e:	2001      	movs	r0, #1
     f90:	4240      	negs	r0, r0

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
}
     f92:	bd70      	pop	{r4, r5, r6, pc}
     f94:	00012299 	.word	0x00012299
     f98:	200006cc 	.word	0x200006cc
     f9c:	200006d0 	.word	0x200006d0
     fa0:	40011000 	.word	0x40011000
     fa4:	400110fc 	.word	0x400110fc
     fa8:	e000e100 	.word	0xe000e100

00000fac <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     fac:	6803      	ldr	r3, [r0, #0]
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
     fae:	b570      	push	{r4, r5, r6, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     fb0:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     fb2:	2501      	movs	r5, #1
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     fb4:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     fb6:	261f      	movs	r6, #31
     fb8:	6883      	ldr	r3, [r0, #8]
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     fba:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
     fbc:	68dc      	ldr	r4, [r3, #12]
     fbe:	0023      	movs	r3, r4
     fc0:	40c3      	lsrs	r3, r0
     fc2:	422b      	tst	r3, r5
     fc4:	d008      	beq.n	fd8 <gpiote_find_channel+0x2c>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
     fc6:	0003      	movs	r3, r0
     fc8:	3345      	adds	r3, #69	; 0x45
     fca:	33ff      	adds	r3, #255	; 0xff
     fcc:	009b      	lsls	r3, r3, #2
     fce:	589b      	ldr	r3, [r3, r2]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     fd0:	0a1b      	lsrs	r3, r3, #8
     fd2:	4033      	ands	r3, r6
     fd4:	428b      	cmp	r3, r1
     fd6:	d003      	beq.n	fe0 <gpiote_find_channel+0x34>
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     fd8:	3001      	adds	r0, #1
     fda:	2804      	cmp	r0, #4
     fdc:	d1ef      	bne.n	fbe <gpiote_find_channel+0x12>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
			return i;
		}
	}

	return -ENODEV;
     fde:	3817      	subs	r0, #23
}
     fe0:	bd70      	pop	{r4, r5, r6, pc}

00000fe2 <gpio_nrf5_read>:
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
     fe2:	b530      	push	{r4, r5, lr}
     fe4:	0015      	movs	r5, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     fe6:	6802      	ldr	r2, [r0, #0]
     fe8:	20a2      	movs	r0, #162	; 0xa2
     fea:	6892      	ldr	r2, [r2, #8]
     fec:	00c0      	lsls	r0, r0, #3
     fee:	6814      	ldr	r4, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
     ff0:	5822      	ldr	r2, [r4, r0]
static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
     ff2:	2900      	cmp	r1, #0
     ff4:	d102      	bne.n	ffc <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
     ff6:	40ea      	lsrs	r2, r5
     ff8:	3101      	adds	r1, #1
     ffa:	400a      	ands	r2, r1
	} else {
		*value = gpio->IN;
	}
	return 0;
}
     ffc:	2000      	movs	r0, #0
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
     ffe:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    1000:	bd30      	pop	{r4, r5, pc}
	...

00001004 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1004:	6800      	ldr	r0, [r0, #0]
    1006:	6880      	ldr	r0, [r0, #8]
    1008:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    100a:	2900      	cmp	r1, #0
    100c:	d109      	bne.n	1022 <gpio_nrf5_write+0x1e>
    100e:	3101      	adds	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    1010:	4091      	lsls	r1, r2
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		if (value) { /* 1 */
    1012:	2b00      	cmp	r3, #0
    1014:	d002      	beq.n	101c <gpio_nrf5_write+0x18>
			gpio->OUTSET = BIT(pin);
    1016:	23a1      	movs	r3, #161	; 0xa1
    1018:	00db      	lsls	r3, r3, #3
    101a:	e000      	b.n	101e <gpio_nrf5_write+0x1a>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    101c:	4b03      	ldr	r3, [pc, #12]	; (102c <gpio_nrf5_write+0x28>)
    101e:	50c1      	str	r1, [r0, r3]
    1020:	e001      	b.n	1026 <gpio_nrf5_write+0x22>
		}
	} else {
		gpio->OUT = value;
    1022:	4a03      	ldr	r2, [pc, #12]	; (1030 <gpio_nrf5_write+0x2c>)
    1024:	5083      	str	r3, [r0, r2]
	}
	return 0;
}
    1026:	2000      	movs	r0, #0
    1028:	4770      	bx	lr
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	0000050c 	.word	0x0000050c
    1030:	00000504 	.word	0x00000504

00001034 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    1034:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1036:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    1038:	2a00      	cmp	r2, #0
    103a:	d007      	beq.n	104c <gpio_nrf5_manage_callback+0x18>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    103c:	681a      	ldr	r2, [r3, #0]
    103e:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    1040:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    1042:	6019      	str	r1, [r3, #0]

	if (!list->tail) {
    1044:	2a00      	cmp	r2, #0
    1046:	d119      	bne.n	107c <gpio_nrf5_manage_callback+0x48>
		list->tail = list->head;
    1048:	6059      	str	r1, [r3, #4]
    104a:	e017      	b.n	107c <gpio_nrf5_manage_callback+0x48>
    104c:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    104e:	2800      	cmp	r0, #0
    1050:	d014      	beq.n	107c <gpio_nrf5_manage_callback+0x48>
		if (test == node) {
    1052:	4281      	cmp	r1, r0
    1054:	d10f      	bne.n	1076 <gpio_nrf5_manage_callback+0x42>
    1056:	685c      	ldr	r4, [r3, #4]
    1058:	6808      	ldr	r0, [r1, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    105a:	2a00      	cmp	r2, #0
    105c:	d104      	bne.n	1068 <gpio_nrf5_manage_callback+0x34>
		list->head = node->next;
    105e:	6018      	str	r0, [r3, #0]

		/* Was node also the tail? */
		if (list->tail == node) {
    1060:	42a1      	cmp	r1, r4
    1062:	d105      	bne.n	1070 <gpio_nrf5_manage_callback+0x3c>
			list->tail = list->head;
    1064:	6058      	str	r0, [r3, #4]
    1066:	e003      	b.n	1070 <gpio_nrf5_manage_callback+0x3c>
		}
	} else {
		prev_node->next = node->next;
    1068:	6010      	str	r0, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    106a:	42a1      	cmp	r1, r4
    106c:	d100      	bne.n	1070 <gpio_nrf5_manage_callback+0x3c>
			list->tail = prev_node;
    106e:	605a      	str	r2, [r3, #4]
		}
	}

	node->next = NULL;
    1070:	2300      	movs	r3, #0
    1072:	600b      	str	r3, [r1, #0]
    1074:	e002      	b.n	107c <gpio_nrf5_manage_callback+0x48>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    1076:	0002      	movs	r2, r0
    1078:	6800      	ldr	r0, [r0, #0]
    107a:	e7e8      	b.n	104e <gpio_nrf5_manage_callback+0x1a>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    107c:	2000      	movs	r0, #0
    107e:	bd10      	pop	{r4, pc}

00001080 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1082:	6803      	ldr	r3, [r0, #0]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1084:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1086:	689b      	ldr	r3, [r3, #8]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1088:	0017      	movs	r7, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    108a:	689d      	ldr	r5, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    108c:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    108e:	2900      	cmp	r1, #0
    1090:	d114      	bne.n	10bc <gpio_nrf5_enable_callback+0x3c>

		i = gpiote_find_channel(dev, pin);
    1092:	0011      	movs	r1, r2
    1094:	f7ff ff8a 	bl	fac <gpiote_find_channel>
    1098:	1e02      	subs	r2, r0, #0
		if (i < 0) {
    109a:	db11      	blt.n	10c0 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    109c:	2301      	movs	r3, #1
    109e:	0019      	movs	r1, r3
    10a0:	40b9      	lsls	r1, r7
    10a2:	68b0      	ldr	r0, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    10a4:	4093      	lsls	r3, r2
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    10a6:	4301      	orrs	r1, r0
    10a8:	60b1      	str	r1, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    10aa:	0011      	movs	r1, r2
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    10ac:	22c1      	movs	r2, #193	; 0xc1
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    10ae:	3140      	adds	r1, #64	; 0x40
    10b0:	0089      	lsls	r1, r1, #2
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    10b2:	0092      	lsls	r2, r2, #2
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    10b4:	514c      	str	r4, [r1, r5]
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
	}

	return 0;
    10b6:	0020      	movs	r0, r4

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    10b8:	50ab      	str	r3, [r5, r2]
	} else {
		return -ENOTSUP;
	}

	return 0;
    10ba:	e001      	b.n	10c0 <gpio_nrf5_enable_callback+0x40>
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
    10bc:	2023      	movs	r0, #35	; 0x23
    10be:	4240      	negs	r0, r0
	}

	return 0;
}
    10c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000010c2 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    10c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    10c4:	6803      	ldr	r3, [r0, #0]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    10c6:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    10c8:	689b      	ldr	r3, [r3, #8]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    10ca:	0016      	movs	r6, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    10cc:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    10ce:	6885      	ldr	r5, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    10d0:	2900      	cmp	r1, #0
    10d2:	d110      	bne.n	10f6 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    10d4:	0011      	movs	r1, r2
    10d6:	f7ff ff69 	bl	fac <gpiote_find_channel>
    10da:	1e03      	subs	r3, r0, #0
		if (i < 0) {
    10dc:	db0d      	blt.n	10fa <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    10de:	2301      	movs	r3, #1
    10e0:	001a      	movs	r2, r3
    10e2:	40b2      	lsls	r2, r6
    10e4:	68a9      	ldr	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    10e6:	4083      	lsls	r3, r0
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    10e8:	4391      	bics	r1, r2
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    10ea:	22c2      	movs	r2, #194	; 0xc2
    10ec:	0092      	lsls	r2, r2, #2
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    10ee:	60a9      	str	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    10f0:	50bb      	str	r3, [r7, r2]
	} else {
		return -ENOTSUP;
	}

	return 0;
    10f2:	0023      	movs	r3, r4
    10f4:	e001      	b.n	10fa <gpio_nrf5_disable_callback+0x38>

		data->pin_callback_enables &= ~(BIT(pin));
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
	} else {
		return -ENOTSUP;
    10f6:	2323      	movs	r3, #35	; 0x23
    10f8:	425b      	negs	r3, r3
	}

	return 0;
}
    10fa:	0018      	movs	r0, r3
    10fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000010fe <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    10fe:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    1100:	2200      	movs	r2, #0
    1102:	2101      	movs	r1, #1
    1104:	2006      	movs	r0, #6
    1106:	f00f fbc9 	bl	1089c <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    110a:	2006      	movs	r0, #6
    110c:	f00f fba6 	bl	1085c <_arch_irq_enable>

	return 0;
}
    1110:	2000      	movs	r0, #0
    1112:	bd10      	pop	{r4, pc}

00001114 <gpio_nrf5_port_isr>:
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1114:	6803      	ldr	r3, [r0, #0]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
    1116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1118:	689b      	ldr	r3, [r3, #8]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
    111a:	0004      	movs	r4, r0
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    111c:	689b      	ldr	r3, [r3, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    111e:	2701      	movs	r7, #1
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1120:	9301      	str	r3, [sp, #4]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1122:	2300      	movs	r3, #0
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
    1124:	001a      	movs	r2, r3
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1126:	6885      	ldr	r5, [r0, #8]
    1128:	9801      	ldr	r0, [sp, #4]
    112a:	0099      	lsls	r1, r3, #2
    112c:	1841      	adds	r1, r0, r1
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
    112e:	0008      	movs	r0, r1
    1130:	30fc      	adds	r0, #252	; 0xfc
    1132:	6846      	ldr	r6, [r0, #4]
    1134:	2e00      	cmp	r6, #0
    1136:	d00a      	beq.n	114e <gpio_nrf5_port_isr+0x3a>
			gpiote->EVENTS_IN[i] = 0;
    1138:	2600      	movs	r6, #0
    113a:	6046      	str	r6, [r0, #4]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    113c:	20a2      	movs	r0, #162	; 0xa2
    113e:	00c0      	lsls	r0, r0, #3
    1140:	5809      	ldr	r1, [r1, r0]
    1142:	201f      	movs	r0, #31
    1144:	0a09      	lsrs	r1, r1, #8
    1146:	4001      	ands	r1, r0
    1148:	0038      	movs	r0, r7
    114a:	4088      	lsls	r0, r1
    114c:	4302      	orrs	r2, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    114e:	3301      	adds	r3, #1
    1150:	2b04      	cmp	r3, #4
    1152:	d1e9      	bne.n	1128 <gpio_nrf5_port_isr+0x14>
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
    1154:	68ae      	ldr	r6, [r5, #8]

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1156:	2006      	movs	r0, #6
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
    1158:	4016      	ands	r6, r2

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    115a:	f00f fb89 	bl	10870 <_arch_irq_disable>
    115e:	682d      	ldr	r5, [r5, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1160:	2d00      	cmp	r5, #0
    1162:	d103      	bne.n	116c <gpio_nrf5_port_isr+0x58>

	/* Call the registered callbacks */
	_gpio_fire_callbacks(&data->callbacks, (struct device *)dev,
			     enabled_int);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1164:	2006      	movs	r0, #6
    1166:	f00f fb79 	bl	1085c <_arch_irq_enable>
}
    116a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (cb->pin_mask & pins) {
    116c:	68ab      	ldr	r3, [r5, #8]
    116e:	4233      	tst	r3, r6
    1170:	d0f5      	beq.n	115e <gpio_nrf5_port_isr+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1172:	0032      	movs	r2, r6
    1174:	0029      	movs	r1, r5
    1176:	0020      	movs	r0, r4
    1178:	686b      	ldr	r3, [r5, #4]
    117a:	4798      	blx	r3
    117c:	e7ef      	b.n	115e <gpio_nrf5_port_isr+0x4a>
	...

00001180 <gpio_nrf5_config>:
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
    1180:	b5f0      	push	{r4, r5, r6, r7, lr}
    1182:	0006      	movs	r6, r0
    1184:	0014      	movs	r4, r2
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1186:	6802      	ldr	r2, [r0, #0]
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
    1188:	b085      	sub	sp, #20
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    118a:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    118c:	68b5      	ldr	r5, [r6, #8]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    118e:	6890      	ldr	r0, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1190:	6817      	ldr	r7, [r2, #0]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1192:	9003      	str	r0, [sp, #12]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1194:	2900      	cmp	r1, #0
    1196:	d001      	beq.n	119c <gpio_nrf5_config+0x1c>
					      pull |
					      GPIO_INPUT_CONNECT |
					      GPIO_DIR_INPUT);
		}
	} else {
		return -ENOTSUP;
    1198:	2023      	movs	r0, #35	; 0x23
    119a:	e069      	b.n	1270 <gpio_nrf5_config+0xf0>

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    119c:	2103      	movs	r1, #3
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    119e:	1398      	asrs	r0, r3, #14
    11a0:	4008      	ands	r0, r1

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    11a2:	131a      	asrs	r2, r3, #12
    11a4:	400a      	ands	r2, r1
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    11a6:	9001      	str	r0, [sp, #4]

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    11a8:	31fd      	adds	r1, #253	; 0xfd
    11aa:	20c0      	movs	r0, #192	; 0xc0
    11ac:	468c      	mov	ip, r1
    11ae:	0080      	lsls	r0, r0, #2
    11b0:	4018      	ands	r0, r3
			pull = GPIO_PULL_UP;
    11b2:	39f4      	subs	r1, #244	; 0xf4
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    11b4:	4560      	cmp	r0, ip
    11b6:	d004      	beq.n	11c2 <gpio_nrf5_config+0x42>
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
    11b8:	492f      	ldr	r1, [pc, #188]	; (1278 <gpio_nrf5_config+0xf8>)
    11ba:	1840      	adds	r0, r0, r1
    11bc:	4241      	negs	r1, r0
    11be:	4141      	adcs	r1, r0
    11c0:	0089      	lsls	r1, r1, #2
			pull = GPIO_PULL_UP;
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
			pull = GPIO_PULL_DOWN;
		}

		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    11c2:	2001      	movs	r0, #1
    11c4:	0092      	lsls	r2, r2, #2
    11c6:	9202      	str	r2, [sp, #8]
    11c8:	4203      	tst	r3, r0
    11ca:	d013      	beq.n	11f4 <gpio_nrf5_config+0x74>
			/* Set initial output value */
			if (pull == GPIO_PULL_UP) {
    11cc:	290c      	cmp	r1, #12
    11ce:	d103      	bne.n	11d8 <gpio_nrf5_config+0x58>
				gpio->OUTSET = BIT(pin);
    11d0:	22a1      	movs	r2, #161	; 0xa1
    11d2:	40a0      	lsls	r0, r4
    11d4:	00d2      	lsls	r2, r2, #3
    11d6:	e003      	b.n	11e0 <gpio_nrf5_config+0x60>
			} else if (pull == GPIO_PULL_DOWN) {
    11d8:	2904      	cmp	r1, #4
    11da:	d102      	bne.n	11e2 <gpio_nrf5_config+0x62>
				gpio->OUTCLR = BIT(pin);
    11dc:	40a0      	lsls	r0, r4
    11de:	4a27      	ldr	r2, [pc, #156]	; (127c <gpio_nrf5_config+0xfc>)
    11e0:	50b8      	str	r0, [r7, r2]
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    11e2:	9802      	ldr	r0, [sp, #8]
    11e4:	9a01      	ldr	r2, [sp, #4]
    11e6:	1882      	adds	r2, r0, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
    11e8:	4825      	ldr	r0, [pc, #148]	; (1280 <gpio_nrf5_config+0x100>)
			} else if (pull == GPIO_PULL_DOWN) {
				gpio->OUTCLR = BIT(pin);
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    11ea:	0092      	lsls	r2, r2, #2
					      pull |
					      GPIO_INPUT_DISCONNECT |
    11ec:	5812      	ldr	r2, [r2, r0]
    11ee:	2003      	movs	r0, #3
    11f0:	4302      	orrs	r2, r0
    11f2:	e005      	b.n	1200 <gpio_nrf5_config+0x80>
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    11f4:	9802      	ldr	r0, [sp, #8]
    11f6:	9a01      	ldr	r2, [sp, #4]
    11f8:	1882      	adds	r2, r0, r2
					      pull |
					      GPIO_INPUT_CONNECT |
    11fa:	4821      	ldr	r0, [pc, #132]	; (1280 <gpio_nrf5_config+0x100>)
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    11fc:	0092      	lsls	r2, r2, #2
					      pull |
					      GPIO_INPUT_CONNECT |
    11fe:	5812      	ldr	r2, [r2, r0]
    1200:	4311      	orrs	r1, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    1202:	0022      	movs	r2, r4
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
    1204:	2002      	movs	r0, #2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    1206:	32c1      	adds	r2, #193	; 0xc1
    1208:	32ff      	adds	r2, #255	; 0xff
    120a:	0092      	lsls	r2, r2, #2
    120c:	51d1      	str	r1, [r2, r7]
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
    120e:	4018      	ands	r0, r3
    1210:	d02f      	beq.n	1272 <gpio_nrf5_config+0xf2>
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
    1212:	069a      	lsls	r2, r3, #26
    1214:	d5c0      	bpl.n	1198 <gpio_nrf5_config+0x18>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1216:	065a      	lsls	r2, r3, #25
    1218:	d403      	bmi.n	1222 <gpio_nrf5_config+0xa2>
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
    121a:	2780      	movs	r7, #128	; 0x80
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    121c:	075b      	lsls	r3, r3, #29
    121e:	d403      	bmi.n	1228 <gpio_nrf5_config+0xa8>
    1220:	e000      	b.n	1224 <gpio_nrf5_config+0xa4>
	if (flags & GPIO_INT) {
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
    1222:	27c0      	movs	r7, #192	; 0xc0
    1224:	02bf      	lsls	r7, r7, #10
    1226:	e000      	b.n	122a <gpio_nrf5_config+0xaa>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
    1228:	027f      	lsls	r7, r7, #9
			}
		} else { /* GPIO_INT_LEVEL */
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    122a:	68e8      	ldr	r0, [r5, #12]
    122c:	f7ff f98e 	bl	54c <__popcountsi2>
    1230:	2804      	cmp	r0, #4
    1232:	d01c      	beq.n	126e <gpio_nrf5_config+0xee>
				GPIOTE_CHAN_COUNT) {
			return -EIO;
		}

		/* check if already allocated to replace */
		int i = gpiote_find_channel(dev, pin);
    1234:	0030      	movs	r0, r6
    1236:	0021      	movs	r1, r4
    1238:	f7ff feb8 	bl	fac <gpiote_find_channel>
    123c:	68ee      	ldr	r6, [r5, #12]

		if (i < 0) {
    123e:	2800      	cmp	r0, #0
    1240:	da03      	bge.n	124a <gpio_nrf5_config+0xca>
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    1242:	43f0      	mvns	r0, r6
    1244:	f7ff f978 	bl	538 <__ffssi2>
    1248:	3801      	subs	r0, #1
		}

		data->gpiote_chan_mask |= BIT(i);
    124a:	2201      	movs	r2, #1
    124c:	0013      	movs	r3, r2
    124e:	4083      	lsls	r3, r0
    1250:	431e      	orrs	r6, r3

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    1252:	23f8      	movs	r3, #248	; 0xf8
    1254:	0224      	lsls	r4, r4, #8
    1256:	015b      	lsls	r3, r3, #5
    1258:	401c      	ands	r4, r3

		gpiote->CONFIG[i] = config;
    125a:	3045      	adds	r0, #69	; 0x45

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    125c:	4314      	orrs	r4, r2

		gpiote->CONFIG[i] = config;
    125e:	30ff      	adds	r0, #255	; 0xff
    1260:	9b03      	ldr	r3, [sp, #12]
    1262:	0080      	lsls	r0, r0, #2

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    1264:	4327      	orrs	r7, r4
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
    1266:	60ee      	str	r6, [r5, #12]

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);

		gpiote->CONFIG[i] = config;
    1268:	50c7      	str	r7, [r0, r3]
	}


	return 0;
    126a:	2000      	movs	r0, #0
    126c:	e001      	b.n	1272 <gpio_nrf5_config+0xf2>
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
				GPIOTE_CHAN_COUNT) {
			return -EIO;
    126e:	2005      	movs	r0, #5
    1270:	4240      	negs	r0, r0
		gpiote->CONFIG[i] = config;
	}


	return 0;
}
    1272:	b005      	add	sp, #20
    1274:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	fffffe00 	.word	0xfffffe00
    127c:	0000050c 	.word	0x0000050c
    1280:	000122f8 	.word	0x000122f8

00001284 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1284:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    1286:	f3ef 8110 	mrs	r1, PRIMASK
    128a:	b672      	cpsid	i
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    128c:	4a15      	ldr	r2, [pc, #84]	; (12e4 <_m16src_stop+0x60>)
    128e:	7810      	ldrb	r0, [r2, #0]
    1290:	2800      	cmp	r0, #0
    1292:	d104      	bne.n	129e <_m16src_stop+0x1a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1294:	2900      	cmp	r1, #0
    1296:	d120      	bne.n	12da <_m16src_stop+0x56>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1298:	b662      	cpsie	i
		irq_unlock(imask);
		return -EALREADY;
    129a:	3845      	subs	r0, #69	; 0x45
    129c:	e021      	b.n	12e2 <_m16src_stop+0x5e>
	}

	if (--m16src_ref) {
    129e:	1e43      	subs	r3, r0, #1
    12a0:	b2db      	uxtb	r3, r3
    12a2:	7013      	strb	r3, [r2, #0]
    12a4:	2b00      	cmp	r3, #0
    12a6:	d004      	beq.n	12b2 <_m16src_stop+0x2e>
		irq_unlock(imask);
		return 0;
    12a8:	2000      	movs	r0, #0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    12aa:	4281      	cmp	r1, r0
    12ac:	d119      	bne.n	12e2 <_m16src_stop+0x5e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    12ae:	b662      	cpsie	i
    12b0:	e017      	b.n	12e2 <_m16src_stop+0x5e>
	}

	if (m16src_grd) {
    12b2:	4b0d      	ldr	r3, [pc, #52]	; (12e8 <_m16src_stop+0x64>)
    12b4:	781c      	ldrb	r4, [r3, #0]
    12b6:	2c00      	cmp	r4, #0
    12b8:	d004      	beq.n	12c4 <_m16src_stop+0x40>
		m16src_ref++;
    12ba:	7010      	strb	r0, [r2, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    12bc:	2900      	cmp	r1, #0
    12be:	d10e      	bne.n	12de <_m16src_stop+0x5a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    12c0:	b662      	cpsie	i
    12c2:	e00c      	b.n	12de <_m16src_stop+0x5a>
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    12c4:	2201      	movs	r2, #1
    12c6:	701a      	strb	r2, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    12c8:	2900      	cmp	r1, #0
    12ca:	d100      	bne.n	12ce <_m16src_stop+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    12cc:	b662      	cpsie	i

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    12ce:	2180      	movs	r1, #128	; 0x80

	/* release resource guard */
	m16src_grd = 0;
    12d0:	2000      	movs	r0, #0

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    12d2:	05c9      	lsls	r1, r1, #23
    12d4:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    12d6:	7018      	strb	r0, [r3, #0]

	return 0;
    12d8:	e003      	b.n	12e2 <_m16src_stop+0x5e>
	 */
	imask = irq_lock();

	if (!m16src_ref) {
		irq_unlock(imask);
		return -EALREADY;
    12da:	2045      	movs	r0, #69	; 0x45
    12dc:	e000      	b.n	12e0 <_m16src_stop+0x5c>
	}

	if (m16src_grd) {
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
    12de:	200b      	movs	r0, #11
    12e0:	4240      	negs	r0, r0

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    12e2:	bd10      	pop	{r4, pc}
    12e4:	200006e4 	.word	0x200006e4
    12e8:	200006e5 	.word	0x200006e5

000012ec <_clock_control_init>:
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    12ec:	2200      	movs	r2, #0
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    12ee:	b510      	push	{r4, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    12f0:	0010      	movs	r0, r2
    12f2:	2101      	movs	r1, #1
    12f4:	f00f fad2 	bl	1089c <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    12f8:	2000      	movs	r0, #0
    12fa:	f00f faaf 	bl	1085c <_arch_irq_enable>

	return 0;
}
    12fe:	2000      	movs	r0, #0
    1300:	bd10      	pop	{r4, pc}
	...

00001304 <_m16src_start>:

static u8_t m16src_ref;
static u8_t m16src_grd;

static int _m16src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    1304:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    1306:	f3ef 8310 	mrs	r3, PRIMASK
    130a:	b672      	cpsid	i

	/* Test for reference increment from zero and resource guard not taken.
	 */
	imask = irq_lock();

	if (m16src_ref++) {
    130c:	4a29      	ldr	r2, [pc, #164]	; (13b4 <_m16src_start+0xb0>)
    130e:	7810      	ldrb	r0, [r2, #0]
    1310:	1c44      	adds	r4, r0, #1
    1312:	7014      	strb	r4, [r2, #0]
    1314:	2800      	cmp	r0, #0
    1316:	d003      	beq.n	1320 <_m16src_start+0x1c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1318:	2b00      	cmp	r3, #0
    131a:	d13f      	bne.n	139c <_m16src_start+0x98>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    131c:	b662      	cpsie	i
    131e:	e03d      	b.n	139c <_m16src_start+0x98>
		irq_unlock(imask);
		goto hf_already_started;
	}

	if (m16src_grd) {
    1320:	4c25      	ldr	r4, [pc, #148]	; (13b8 <_m16src_start+0xb4>)
    1322:	7825      	ldrb	r5, [r4, #0]
    1324:	2d00      	cmp	r5, #0
    1326:	d004      	beq.n	1332 <_m16src_start+0x2e>
		m16src_ref--;
    1328:	7010      	strb	r0, [r2, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    132a:	2b00      	cmp	r3, #0
    132c:	d13f      	bne.n	13ae <_m16src_start+0xaa>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    132e:	b662      	cpsie	i
    1330:	e03d      	b.n	13ae <_m16src_start+0xaa>
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    1332:	2201      	movs	r2, #1
    1334:	7022      	strb	r2, [r4, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1336:	2b00      	cmp	r3, #0
    1338:	d100      	bne.n	133c <_m16src_start+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    133a:	b662      	cpsie	i
    133c:	2580      	movs	r5, #128	; 0x80
    133e:	4e1f      	ldr	r6, [pc, #124]	; (13bc <_m16src_start+0xb8>)
    1340:	05ed      	lsls	r5, r5, #23

	irq_unlock(imask);

	/* If blocking then spin-wait in CPU sleep until 16MHz clock settles. */
	blocking = POINTER_TO_UINT(sub_system);
	if (blocking) {
    1342:	2900      	cmp	r1, #0
    1344:	d025      	beq.n	1392 <_m16src_start+0x8e>
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);
    1346:	2000      	movs	r0, #0
    1348:	f00f fa92 	bl	10870 <_arch_irq_disable>

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    134c:	2300      	movs	r3, #0

		intenset = NRF_CLOCK->INTENSET;
    134e:	22c1      	movs	r2, #193	; 0xc1
	if (blocking) {
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1350:	6073      	str	r3, [r6, #4]

		intenset = NRF_CLOCK->INTENSET;
    1352:	0092      	lsls	r2, r2, #2
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1354:	3301      	adds	r3, #1

		irq_disable(POWER_CLOCK_IRQn);

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		intenset = NRF_CLOCK->INTENSET;
    1356:	58a9      	ldr	r1, [r5, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1358:	50ab      	str	r3, [r5, r2]

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    135a:	602b      	str	r3, [r5, #0]

		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    135c:	6873      	ldr	r3, [r6, #4]
    135e:	2b00      	cmp	r3, #0
    1360:	d103      	bne.n	136a <_m16src_start+0x66>
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    1362:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    1364:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    1366:	bf20      	wfe
    1368:	e7f8      	b.n	135c <_m16src_start+0x58>
			__WFE();
			__SEV();
			__WFE();
		}

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    136a:	2200      	movs	r2, #0
    136c:	4b13      	ldr	r3, [pc, #76]	; (13bc <_m16src_start+0xb8>)
    136e:	605a      	str	r2, [r3, #4]

		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1370:	2301      	movs	r3, #1
    1372:	4219      	tst	r1, r3
    1374:	d104      	bne.n	1380 <_m16src_start+0x7c>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1376:	22c2      	movs	r2, #194	; 0xc2
    1378:	2180      	movs	r1, #128	; 0x80
    137a:	0092      	lsls	r2, r2, #2
    137c:	05c9      	lsls	r1, r1, #23
    137e:	508b      	str	r3, [r1, r2]
    1380:	23c0      	movs	r3, #192	; 0xc0
    1382:	2101      	movs	r1, #1
    1384:	4a0e      	ldr	r2, [pc, #56]	; (13c0 <_m16src_start+0xbc>)
    1386:	005b      	lsls	r3, r3, #1
    1388:	50d1      	str	r1, [r2, r3]
		}

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
    138a:	2000      	movs	r0, #0
    138c:	f00f fa66 	bl	1085c <_arch_irq_enable>
    1390:	e002      	b.n	1398 <_m16src_start+0x94>
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1392:	2301      	movs	r3, #1

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1394:	6071      	str	r1, [r6, #4]

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1396:	602b      	str	r3, [r5, #0]
	}

	/* release resource guard */
	m16src_grd = 0;
    1398:	2300      	movs	r3, #0
    139a:	7023      	strb	r3, [r4, #0]
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    139c:	2280      	movs	r2, #128	; 0x80
    139e:	4b09      	ldr	r3, [pc, #36]	; (13c4 <_m16src_start+0xc0>)
    13a0:	05d2      	lsls	r2, r2, #23
    13a2:	58d3      	ldr	r3, [r2, r3]
		return 0;
    13a4:	2000      	movs	r0, #0
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    13a6:	03db      	lsls	r3, r3, #15
    13a8:	d403      	bmi.n	13b2 <_m16src_start+0xae>
		return 0;
	} else {
		return -EINPROGRESS;
    13aa:	3844      	subs	r0, #68	; 0x44
    13ac:	e001      	b.n	13b2 <_m16src_start+0xae>
	}

	if (m16src_grd) {
		m16src_ref--;
		irq_unlock(imask);
		return -EAGAIN;
    13ae:	200b      	movs	r0, #11
    13b0:	4240      	negs	r0, r0
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    13b2:	bd70      	pop	{r4, r5, r6, pc}
    13b4:	200006e4 	.word	0x200006e4
    13b8:	200006e5 	.word	0x200006e5
    13bc:	400000fc 	.word	0x400000fc
    13c0:	e000e100 	.word	0xe000e100
    13c4:	0000040c 	.word	0x0000040c

000013c8 <_power_clock_isr>:

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
    13c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t pof, hf_intenset, hf_stat, hf, lf, done, ctto;
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    13ca:	4c24      	ldr	r4, [pc, #144]	; (145c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x2c>)
    13cc:	2380      	movs	r3, #128	; 0x80
    13ce:	68e2      	ldr	r2, [r4, #12]
    13d0:	05db      	lsls	r3, r3, #23
    13d2:	4694      	mov	ip, r2

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    13d4:	22c1      	movs	r2, #193	; 0xc1
    13d6:	0092      	lsls	r2, r2, #2
    13d8:	5899      	ldr	r1, [r3, r2]
    13da:	2201      	movs	r2, #1
    13dc:	400a      	ands	r2, r1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    13de:	4920      	ldr	r1, [pc, #128]	; (1460 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x30>)

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
    13e0:	0005      	movs	r5, r0

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    13e2:	585e      	ldr	r6, [r3, r1]
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    13e4:	9200      	str	r2, [sp, #0]
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    13e6:	6867      	ldr	r7, [r4, #4]

	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    13e8:	68a0      	ldr	r0, [r4, #8]

	done = (NRF_CLOCK->EVENTS_DONE != 0);
    13ea:	6921      	ldr	r1, [r4, #16]
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    13ec:	6962      	ldr	r2, [r4, #20]
    13ee:	9201      	str	r2, [sp, #4]

	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);

	if (pof) {
    13f0:	4662      	mov	r2, ip
    13f2:	2a00      	cmp	r2, #0
    13f4:	d001      	beq.n	13fa <_power_clock_isr+0x32>
		NRF_POWER->EVENTS_POFWARN = 0;
    13f6:	2200      	movs	r2, #0
    13f8:	60e2      	str	r2, [r4, #12]
	}

	if (hf) {
    13fa:	2f00      	cmp	r7, #0
    13fc:	d001      	beq.n	1402 <_power_clock_isr+0x3a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    13fe:	2700      	movs	r7, #0
    1400:	6067      	str	r7, [r4, #4]
	}

	if (hf_intenset && hf_stat) {
    1402:	9a00      	ldr	r2, [sp, #0]
    1404:	2a00      	cmp	r2, #0
    1406:	d006      	beq.n	1416 <_power_clock_isr+0x4e>
    1408:	03f2      	lsls	r2, r6, #15
    140a:	d504      	bpl.n	1416 <_power_clock_isr+0x4e>
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    140c:	26c2      	movs	r6, #194	; 0xc2
    140e:	2201      	movs	r2, #1
    1410:	00b6      	lsls	r6, r6, #2
    1412:	519a      	str	r2, [r3, r6]

		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    1414:	611a      	str	r2, [r3, #16]
	}

	if (lf) {
    1416:	2800      	cmp	r0, #0
    1418:	d001      	beq.n	141e <_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    141a:	2300      	movs	r3, #0
    141c:	60a3      	str	r3, [r4, #8]

		__ASSERT_NO_MSG(0);
	}

	if (done) {
    141e:	2900      	cmp	r1, #0
    1420:	d008      	beq.n	1434 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x4>
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
    1422:	2100      	movs	r1, #0

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    1424:	0028      	movs	r0, r5
	}

	if (done) {
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
    1426:	6121      	str	r1, [r4, #16]

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    1428:	f7ff ff2c 	bl	1284 <_m16src_stop>
		__ASSERT_NO_MSG(!err);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    142c:	2380      	movs	r3, #128	; 0x80
    142e:	2201      	movs	r2, #1
    1430:	05db      	lsls	r3, r3, #23
    1432:	615a      	str	r2, [r3, #20]
	}

	if (ctto) {
    1434:	9b01      	ldr	r3, [sp, #4]
    1436:	2b00      	cmp	r3, #0
    1438:	d00e      	beq.n	1458 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x28>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    143a:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    143c:	23c1      	movs	r3, #193	; 0xc1
    143e:	2280      	movs	r2, #128	; 0x80
	}

	if (ctto) {
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    1440:	6161      	str	r1, [r4, #20]

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1442:	2401      	movs	r4, #1
    1444:	009b      	lsls	r3, r3, #2
    1446:	05d2      	lsls	r2, r2, #23
    1448:	50d4      	str	r4, [r2, r3]

		err = _m16src_start(dev, false);
    144a:	0028      	movs	r0, r5
    144c:	f7ff ff5a 	bl	1304 <_m16src_start>
		if (!err) {
    1450:	2800      	cmp	r0, #0
    1452:	d101      	bne.n	1458 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x28>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1454:	4b03      	ldr	r3, [pc, #12]	; (1464 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x34>)
    1456:	605c      	str	r4, [r3, #4]
			NVIC_SetPendingIRQ(POWER_CLOCK_IRQn);
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}
}
    1458:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    145a:	46c0      	nop			; (mov r8, r8)
    145c:	400000fc 	.word	0x400000fc
    1460:	0000040c 	.word	0x0000040c
    1464:	e000e1fc 	.word	0xe000e1fc

00001468 <_k32src_start>:

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    1468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    146a:	2580      	movs	r5, #128	; 0x80
    146c:	2383      	movs	r3, #131	; 0x83
    146e:	05ed      	lsls	r5, r5, #23
    1470:	00db      	lsls	r3, r3, #3
    1472:	58ec      	ldr	r4, [r5, r3]
    1474:	2380      	movs	r3, #128	; 0x80

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    1476:	0007      	movs	r7, r0
	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
		return 0;
    1478:	2000      	movs	r0, #0

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    147a:	025b      	lsls	r3, r3, #9

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    147c:	000e      	movs	r6, r1

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    147e:	401c      	ands	r4, r3
    1480:	4284      	cmp	r4, r0
    1482:	d14d      	bne.n	1520 <_k32src_start+0xb8>
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);
    1484:	0020      	movs	r0, r4
    1486:	f00f f9f3 	bl	10870 <_arch_irq_disable>

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;

	intenset = NRF_CLOCK->INTENSET;
    148a:	22c1      	movs	r2, #193	; 0xc1
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    148c:	2002      	movs	r0, #2
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    148e:	4b25      	ldr	r3, [pc, #148]	; (1524 <_k32src_start+0xbc>)

	intenset = NRF_CLOCK->INTENSET;
    1490:	0092      	lsls	r2, r2, #2
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1492:	609c      	str	r4, [r3, #8]

	intenset = NRF_CLOCK->INTENSET;
    1494:	58a9      	ldr	r1, [r5, r2]
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1496:	50a8      	str	r0, [r5, r2]

	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1498:	22a3      	movs	r2, #163	; 0xa3
    149a:	00d2      	lsls	r2, r2, #3
    149c:	50ae      	str	r6, [r5, r2]

	/* Start and spin-wait until clock settles */
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    149e:	2201      	movs	r2, #1
    14a0:	001c      	movs	r4, r3
    14a2:	60aa      	str	r2, [r5, #8]

	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    14a4:	68a3      	ldr	r3, [r4, #8]
    14a6:	2b00      	cmp	r3, #0
    14a8:	d103      	bne.n	14b2 <_k32src_start+0x4a>
    14aa:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    14ac:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    14ae:	bf20      	wfe
    14b0:	e7f8      	b.n	14a4 <_k32src_start+0x3c>
		__WFE();
		__SEV();
		__WFE();
	}

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    14b2:	2200      	movs	r2, #0
    14b4:	4b1b      	ldr	r3, [pc, #108]	; (1524 <_k32src_start+0xbc>)
    14b6:	609a      	str	r2, [r3, #8]

	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    14b8:	2302      	movs	r3, #2
    14ba:	4219      	tst	r1, r3
    14bc:	d104      	bne.n	14c8 <_k32src_start+0x60>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    14be:	22c2      	movs	r2, #194	; 0xc2
    14c0:	2180      	movs	r1, #128	; 0x80
    14c2:	0092      	lsls	r2, r2, #2
    14c4:	05c9      	lsls	r1, r1, #23
    14c6:	508b      	str	r3, [r1, r2]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    14c8:	23c0      	movs	r3, #192	; 0xc0
    14ca:	2501      	movs	r5, #1
    14cc:	4a16      	ldr	r2, [pc, #88]	; (1528 <_k32src_start+0xc0>)
    14ce:	005b      	lsls	r3, r3, #1
    14d0:	50d5      	str	r5, [r2, r3]
	}

	NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

	irq_enable(POWER_CLOCK_IRQn);
    14d2:	2000      	movs	r0, #0
    14d4:	f00f f9c2 	bl	1085c <_arch_irq_enable>

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    14d8:	2380      	movs	r3, #128	; 0x80
    14da:	22c2      	movs	r2, #194	; 0xc2
    14dc:	2018      	movs	r0, #24
    14de:	0092      	lsls	r2, r2, #2
    14e0:	05db      	lsls	r3, r3, #23
    14e2:	5098      	str	r0, [r3, r2]
	NRF_CLOCK->EVENTS_DONE = 0;
	NRF_CLOCK->EVENTS_CTTO = 0;

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    14e4:	2103      	movs	r1, #3

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
	NRF_CLOCK->EVENTS_DONE = 0;
    14e6:	2200      	movs	r2, #0
	NRF_CLOCK->EVENTS_CTTO = 0;

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    14e8:	4031      	ands	r1, r6

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
	NRF_CLOCK->EVENTS_DONE = 0;
    14ea:	6122      	str	r2, [r4, #16]
	NRF_CLOCK->EVENTS_CTTO = 0;
    14ec:	6162      	str	r2, [r4, #20]

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    14ee:	4291      	cmp	r1, r2
    14f0:	d10e      	bne.n	1510 <_k32src_start+0xa8>
		int err;

		/* Set the Calibration Timer Initial Value */
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    14f2:	22a7      	movs	r2, #167	; 0xa7
    14f4:	2410      	movs	r4, #16
    14f6:	00d2      	lsls	r2, r2, #3
    14f8:	509c      	str	r4, [r3, r2]

		/* Enable DONE and CTTO IRQs */
		NRF_CLOCK->INTENSET =
    14fa:	22c1      	movs	r2, #193	; 0xc1
    14fc:	0092      	lsls	r2, r2, #2
    14fe:	5098      	str	r0, [r3, r2]
		/* Start HF clock, if already started then explicitly
		 * assert IRQ.
		 * NOTE: The INTENSET is used as state flag to start
		 * calibration in ISR.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1500:	509d      	str	r5, [r3, r2]

		err = _m16src_start(dev, false);
    1502:	0038      	movs	r0, r7
    1504:	f7ff fefe 	bl	1304 <_m16src_start>
		if (!err) {
    1508:	2800      	cmp	r0, #0
    150a:	d101      	bne.n	1510 <_k32src_start+0xa8>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    150c:	4b07      	ldr	r3, [pc, #28]	; (152c <_k32src_start+0xc4>)
    150e:	605d      	str	r5, [r3, #4]
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
    1510:	2383      	movs	r3, #131	; 0x83
    1512:	2280      	movs	r2, #128	; 0x80
    1514:	2001      	movs	r0, #1
    1516:	00db      	lsls	r3, r3, #3
    1518:	05d2      	lsls	r2, r2, #23
    151a:	58d3      	ldr	r3, [r2, r3]
    151c:	0c1b      	lsrs	r3, r3, #16
    151e:	4398      	bics	r0, r3
}
    1520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	400000fc 	.word	0x400000fc
    1528:	e000e100 	.word	0xe000e100
    152c:	e000e1fc 	.word	0xe000e1fc

00001530 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1530:	2000      	movs	r0, #0
    1532:	4770      	bx	lr

00001534 <char_out>:
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
	ctx->count++;
    1534:	680b      	ldr	r3, [r1, #0]
struct out_context {
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
    1536:	b510      	push	{r4, lr}
	ctx->count++;
    1538:	3301      	adds	r3, #1
    153a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    153c:	4b01      	ldr	r3, [pc, #4]	; (1544 <char_out+0x10>)
    153e:	681b      	ldr	r3, [r3, #0]
    1540:	4798      	blx	r3
}
    1542:	bd10      	pop	{r4, pc}
    1544:	20000164 	.word	0x20000164

00001548 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1548:	b5f0      	push	{r4, r5, r6, r7, lr}
    154a:	b087      	sub	sp, #28
    154c:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    154e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1550:	0007      	movs	r7, r0
    1552:	9102      	str	r1, [sp, #8]
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    1554:	2b00      	cmp	r3, #0
    1556:	dc01      	bgt.n	155c <_printk_dec_ulong+0x14>
		min_width = 1;
    1558:	2301      	movs	r3, #1
    155a:	930c      	str	r3, [sp, #48]	; 0x30
    155c:	2320      	movs	r3, #32
    155e:	9305      	str	r3, [sp, #20]
    1560:	9b03      	ldr	r3, [sp, #12]
    1562:	2b01      	cmp	r3, #1
    1564:	d101      	bne.n	156a <_printk_dec_ulong+0x22>
    1566:	332f      	adds	r3, #47	; 0x2f
    1568:	9305      	str	r3, [sp, #20]
    156a:	230a      	movs	r3, #10
    156c:	9301      	str	r3, [sp, #4]
    156e:	2300      	movs	r3, #0
    1570:	0016      	movs	r6, r2
    1572:	2401      	movs	r4, #1
    1574:	4d1f      	ldr	r5, [pc, #124]	; (15f4 <_printk_dec_ulong+0xac>)
    1576:	9304      	str	r3, [sp, #16]
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    1578:	9b04      	ldr	r3, [sp, #16]
    157a:	2b00      	cmp	r3, #0
    157c:	d101      	bne.n	1582 <_printk_dec_ulong+0x3a>
    157e:	42b5      	cmp	r5, r6
    1580:	d20a      	bcs.n	1598 <_printk_dec_ulong+0x50>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    1582:	1c69      	adds	r1, r5, #1
    1584:	0030      	movs	r0, r6
    1586:	f7fe fe15 	bl	1b4 <__aeabi_uidiv>
    158a:	9902      	ldr	r1, [sp, #8]
    158c:	3030      	adds	r0, #48	; 0x30
    158e:	47b8      	blx	r7
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    1590:	2301      	movs	r3, #1
			out((int)((remainder / (pos + 1)) + 48), ctx);
			digits++;
    1592:	3401      	adds	r4, #1
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    1594:	9304      	str	r3, [sp, #16]
			out((int)((remainder / (pos + 1)) + 48), ctx);
			digits++;
    1596:	e00a      	b.n	15ae <_printk_dec_ulong+0x66>
		} else if (remaining <= min_width
    1598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    159a:	9a01      	ldr	r2, [sp, #4]
    159c:	4293      	cmp	r3, r2
    159e:	db06      	blt.n	15ae <_printk_dec_ulong+0x66>
				&& padding < PAD_SPACE_AFTER) {
    15a0:	9b03      	ldr	r3, [sp, #12]
    15a2:	2b02      	cmp	r3, #2
    15a4:	d803      	bhi.n	15ae <_printk_dec_ulong+0x66>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    15a6:	9902      	ldr	r1, [sp, #8]
    15a8:	9805      	ldr	r0, [sp, #20]
    15aa:	47b8      	blx	r7
			digits++;
    15ac:	3401      	adds	r4, #1
		}
		remaining--;
    15ae:	9b01      	ldr	r3, [sp, #4]
		remainder %= (pos + 1);
    15b0:	1c69      	adds	r1, r5, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    15b2:	3b01      	subs	r3, #1
		remainder %= (pos + 1);
    15b4:	0030      	movs	r0, r6
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    15b6:	9301      	str	r3, [sp, #4]
		remainder %= (pos + 1);
    15b8:	f7fe fe82 	bl	2c0 <__aeabi_uidivmod>
		pos /= 10;
    15bc:	0028      	movs	r0, r5
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
    15be:	000e      	movs	r6, r1
		pos /= 10;
    15c0:	210a      	movs	r1, #10
    15c2:	f7fe fdf7 	bl	1b4 <__aeabi_uidiv>
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
    15c6:	9b01      	ldr	r3, [sp, #4]
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
    15c8:	0005      	movs	r5, r0
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
    15ca:	2b01      	cmp	r3, #1
    15cc:	d1d4      	bne.n	1578 <_printk_dec_ulong+0x30>
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
	}
	out((int)(remainder + 48), ctx);
    15ce:	0030      	movs	r0, r6
    15d0:	9902      	ldr	r1, [sp, #8]
    15d2:	3030      	adds	r0, #48	; 0x30
    15d4:	47b8      	blx	r7

	if (padding == PAD_SPACE_AFTER) {
    15d6:	9b03      	ldr	r3, [sp, #12]
    15d8:	2b03      	cmp	r3, #3
    15da:	d108      	bne.n	15ee <_printk_dec_ulong+0xa6>
    15dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    15de:	1b1c      	subs	r4, r3, r4
		remaining = min_width - digits;
		while (remaining-- > 0) {
    15e0:	2c00      	cmp	r4, #0
    15e2:	dd04      	ble.n	15ee <_printk_dec_ulong+0xa6>
			out(' ', ctx);
    15e4:	9902      	ldr	r1, [sp, #8]
    15e6:	2020      	movs	r0, #32
    15e8:	47b8      	blx	r7
    15ea:	3c01      	subs	r4, #1
    15ec:	e7f8      	b.n	15e0 <_printk_dec_ulong+0x98>
		}
	}
}
    15ee:	b007      	add	sp, #28
    15f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	3b9ac9ff 	.word	0x3b9ac9ff

000015f8 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    15f8:	680a      	ldr	r2, [r1, #0]
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    15fa:	b530      	push	{r4, r5, lr}
    15fc:	688b      	ldr	r3, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
    15fe:	2a00      	cmp	r2, #0
    1600:	d002      	beq.n	1608 <str_out+0x10>
    1602:	684c      	ldr	r4, [r1, #4]
    1604:	42a3      	cmp	r3, r4
    1606:	db02      	blt.n	160e <str_out+0x16>
		ctx->count++;
    1608:	3301      	adds	r3, #1
    160a:	608b      	str	r3, [r1, #8]
		return c;
    160c:	e009      	b.n	1622 <str_out+0x2a>
	}

	if (ctx->count == ctx->max - 1) {
    160e:	1e65      	subs	r5, r4, #1
    1610:	42ab      	cmp	r3, r5
    1612:	d103      	bne.n	161c <str_out+0x24>
		ctx->str[ctx->count++] = '\0';
    1614:	608c      	str	r4, [r1, #8]
    1616:	2100      	movs	r1, #0
    1618:	54d1      	strb	r1, [r2, r3]
    161a:	e002      	b.n	1622 <str_out+0x2a>
	} else {
		ctx->str[ctx->count++] = c;
    161c:	1c5c      	adds	r4, r3, #1
    161e:	608c      	str	r4, [r1, #8]
    1620:	54d0      	strb	r0, [r2, r3]
	}

	return c;
}
    1622:	bd30      	pop	{r4, r5, pc}

00001624 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1624:	4b01      	ldr	r3, [pc, #4]	; (162c <__printk_hook_install+0x8>)
    1626:	6018      	str	r0, [r3, #0]
}
    1628:	4770      	bx	lr
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	20000164 	.word	0x20000164

00001630 <_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    1630:	b5f0      	push	{r4, r5, r6, r7, lr}
    1632:	001c      	movs	r4, r3
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	int long_ctr = 0;
    1634:	2300      	movs	r3, #0
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    1636:	b08d      	sub	sp, #52	; 0x34
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	int long_ctr = 0;
    1638:	9305      	str	r3, [sp, #20]
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
    163a:	3b01      	subs	r3, #1
    163c:	9304      	str	r3, [sp, #16]
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
    163e:	2300      	movs	r3, #0
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    1640:	0005      	movs	r5, r0
    1642:	000e      	movs	r6, r1
	int might_format = 0; /* 1 if encountered a '%' */
    1644:	001f      	movs	r7, r3
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    1646:	9207      	str	r2, [sp, #28]
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
    1648:	9303      	str	r3, [sp, #12]
	int min_width = -1;
	int long_ctr = 0;

	/* fmt has already been adjusted if needed */

	while (*fmt) {
    164a:	9b07      	ldr	r3, [sp, #28]
    164c:	7818      	ldrb	r0, [r3, #0]
    164e:	2800      	cmp	r0, #0
    1650:	d100      	bne.n	1654 <_vprintk+0x24>
    1652:	e10f      	b.n	1874 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x104>
		if (!might_format) {
    1654:	2f00      	cmp	r7, #0
    1656:	d105      	bne.n	1664 <_vprintk+0x34>
			if (*fmt != '%') {
    1658:	2825      	cmp	r0, #37	; 0x25
    165a:	d100      	bne.n	165e <_vprintk+0x2e>
    165c:	e0fb      	b.n	1856 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xe6>
				out((int)*fmt, ctx);
    165e:	0031      	movs	r1, r6
    1660:	47a8      	blx	r5
    1662:	e103      	b.n	186c <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xfc>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1664:	2864      	cmp	r0, #100	; 0x64
    1666:	d050      	beq.n	170a <_vprintk+0xda>
    1668:	d816      	bhi.n	1698 <_vprintk+0x68>
    166a:	2839      	cmp	r0, #57	; 0x39
    166c:	d809      	bhi.n	1682 <_vprintk+0x52>
    166e:	2831      	cmp	r0, #49	; 0x31
    1670:	d236      	bcs.n	16e0 <_vprintk+0xb0>
    1672:	282d      	cmp	r0, #45	; 0x2d
    1674:	d02a      	beq.n	16cc <_vprintk+0x9c>
    1676:	2830      	cmp	r0, #48	; 0x30
    1678:	d02a      	beq.n	16d0 <_vprintk+0xa0>
    167a:	2825      	cmp	r0, #37	; 0x25
    167c:	d000      	beq.n	1680 <_vprintk+0x50>
    167e:	e0e1      	b.n	1844 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xd4>
    1680:	e0e5      	b.n	184e <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xde>
    1682:	2858      	cmp	r0, #88	; 0x58
    1684:	d07b      	beq.n	177e <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xe>
    1686:	2863      	cmp	r0, #99	; 0x63
    1688:	d000      	beq.n	168c <_vprintk+0x5c>
    168a:	e0db      	b.n	1844 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xd4>
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);

				out(c, ctx);
    168c:	6820      	ldr	r0, [r4, #0]
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    168e:	1d27      	adds	r7, r4, #4

				out(c, ctx);
    1690:	0031      	movs	r1, r6
    1692:	47a8      	blx	r5
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    1694:	003c      	movs	r4, r7
    1696:	e0dc      	b.n	1852 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xe2>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1698:	2870      	cmp	r0, #112	; 0x70
    169a:	d066      	beq.n	176a <_vprintk+0x13a>
    169c:	d807      	bhi.n	16ae <_vprintk+0x7e>
    169e:	2869      	cmp	r0, #105	; 0x69
    16a0:	d033      	beq.n	170a <_vprintk+0xda>
    16a2:	286c      	cmp	r0, #108	; 0x6c
    16a4:	d02d      	beq.n	1702 <_vprintk+0xd2>
    16a6:	2868      	cmp	r0, #104	; 0x68
    16a8:	d000      	beq.n	16ac <_vprintk+0x7c>
    16aa:	e0cb      	b.n	1844 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xd4>
    16ac:	e0d9      	b.n	1862 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xf2>
    16ae:	2875      	cmp	r0, #117	; 0x75
    16b0:	d046      	beq.n	1740 <_vprintk+0x110>
    16b2:	d805      	bhi.n	16c0 <_vprintk+0x90>
    16b4:	2873      	cmp	r0, #115	; 0x73
    16b6:	d000      	beq.n	16ba <_vprintk+0x8a>
    16b8:	e0c4      	b.n	1844 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xd4>
				_printk_hex_ulong(out, ctx, x, padding,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    16ba:	1d27      	adds	r7, r4, #4
    16bc:	6824      	ldr	r4, [r4, #0]

				while (*s)
    16be:	e0b7      	b.n	1830 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xc0>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    16c0:	2878      	cmp	r0, #120	; 0x78
    16c2:	d05c      	beq.n	177e <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xe>
    16c4:	287a      	cmp	r0, #122	; 0x7a
    16c6:	d100      	bne.n	16ca <_vprintk+0x9a>
    16c8:	e0cb      	b.n	1862 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xf2>
    16ca:	e0bb      	b.n	1844 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xd4>
			case '-':
				padding = PAD_SPACE_AFTER;
    16cc:	2303      	movs	r3, #3
    16ce:	e0c7      	b.n	1860 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xf0>
				goto still_might_format;
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
    16d0:	9b04      	ldr	r3, [sp, #16]
    16d2:	2b00      	cmp	r3, #0
    16d4:	da07      	bge.n	16e6 <_vprintk+0xb6>
    16d6:	9b03      	ldr	r3, [sp, #12]
    16d8:	2b00      	cmp	r3, #0
    16da:	d100      	bne.n	16de <_vprintk+0xae>
    16dc:	e0c3      	b.n	1866 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xf6>
    16de:	e006      	b.n	16ee <_vprintk+0xbe>
					padding = PAD_ZERO_BEFORE;
					goto still_might_format;
				}
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
    16e0:	9b04      	ldr	r3, [sp, #16]
    16e2:	2b00      	cmp	r3, #0
    16e4:	db03      	blt.n	16ee <_vprintk+0xbe>
					min_width = *fmt - '0';
				} else {
					min_width = 10 * min_width + *fmt - '0';
    16e6:	230a      	movs	r3, #10
    16e8:	9a04      	ldr	r2, [sp, #16]
    16ea:	4353      	muls	r3, r2
    16ec:	1818      	adds	r0, r3, r0
				}

				if (padding == PAD_NONE) {
    16ee:	9b03      	ldr	r3, [sp, #12]
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
					min_width = *fmt - '0';
				} else {
					min_width = 10 * min_width + *fmt - '0';
    16f0:	3830      	subs	r0, #48	; 0x30
    16f2:	9004      	str	r0, [sp, #16]
    16f4:	2701      	movs	r7, #1
				}

				if (padding == PAD_NONE) {
    16f6:	2b00      	cmp	r3, #0
    16f8:	d000      	beq.n	16fc <_vprintk+0xcc>
    16fa:	e0b7      	b.n	186c <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xfc>
					padding = PAD_SPACE_BEFORE;
    16fc:	3302      	adds	r3, #2
    16fe:	9303      	str	r3, [sp, #12]
    1700:	e0b4      	b.n	186c <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xfc>
				}
				goto still_might_format;
			case 'l':
				long_ctr++;
    1702:	9b05      	ldr	r3, [sp, #20]
    1704:	3301      	adds	r3, #1
    1706:	9305      	str	r3, [sp, #20]
    1708:	e0ab      	b.n	1862 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xf2>
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d;
				if (long_ctr < 2) {
    170a:	9b05      	ldr	r3, [sp, #20]
    170c:	2b01      	cmp	r3, #1
    170e:	dc02      	bgt.n	1716 <_vprintk+0xe6>
					d = va_arg(ap, long);
    1710:	6827      	ldr	r7, [r4, #0]
    1712:	3404      	adds	r4, #4
    1714:	e006      	b.n	1724 <_vprintk+0xf4>
				} else {
					d = (long)va_arg(ap, long long);
    1716:	3407      	adds	r4, #7
    1718:	0023      	movs	r3, r4
    171a:	2207      	movs	r2, #7
    171c:	4393      	bics	r3, r2
    171e:	001c      	movs	r4, r3
    1720:	681f      	ldr	r7, [r3, #0]
    1722:	3408      	adds	r4, #8
				}

				if (d < 0) {
    1724:	2f00      	cmp	r7, #0
    1726:	da06      	bge.n	1736 <_vprintk+0x106>
					out((int)'-', ctx);
    1728:	0031      	movs	r1, r6
    172a:	202d      	movs	r0, #45	; 0x2d
    172c:	47a8      	blx	r5
					d = -d;
					min_width--;
    172e:	9b04      	ldr	r3, [sp, #16]
					d = (long)va_arg(ap, long long);
				}

				if (d < 0) {
					out((int)'-', ctx);
					d = -d;
    1730:	427f      	negs	r7, r7
					min_width--;
    1732:	3b01      	subs	r3, #1
    1734:	9304      	str	r3, [sp, #16]
				}
				_printk_dec_ulong(out, ctx, d, padding,
    1736:	9b04      	ldr	r3, [sp, #16]
    1738:	003a      	movs	r2, r7
    173a:	9300      	str	r3, [sp, #0]
    173c:	9b03      	ldr	r3, [sp, #12]
    173e:	e00f      	b.n	1760 <_vprintk+0x130>
				break;
			}
			case 'u': {
				unsigned long u;

				if (long_ctr < 2) {
    1740:	9b05      	ldr	r3, [sp, #20]
    1742:	2b01      	cmp	r3, #1
    1744:	dc02      	bgt.n	174c <_vprintk+0x11c>
					u = va_arg(ap, unsigned long);
    1746:	6822      	ldr	r2, [r4, #0]
    1748:	3404      	adds	r4, #4
    174a:	e006      	b.n	175a <_vprintk+0x12a>
				} else {
					u = (unsigned long)va_arg(ap,
    174c:	3407      	adds	r4, #7
    174e:	0023      	movs	r3, r4
    1750:	2207      	movs	r2, #7
    1752:	4393      	bics	r3, r2
    1754:	001c      	movs	r4, r3
    1756:	681a      	ldr	r2, [r3, #0]
    1758:	3408      	adds	r4, #8
							unsigned long long);
				}
				_printk_dec_ulong(out, ctx, u, padding,
    175a:	9b04      	ldr	r3, [sp, #16]
    175c:	9300      	str	r3, [sp, #0]
    175e:	9b03      	ldr	r3, [sp, #12]
    1760:	0031      	movs	r1, r6
    1762:	0028      	movs	r0, r5
    1764:	f7ff fef0 	bl	1548 <_printk_dec_ulong>
    1768:	e073      	b.n	1852 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xe2>
						  min_width);
				break;
			}
			case 'p':
				  out('0', ctx);
    176a:	0031      	movs	r1, r6
    176c:	2030      	movs	r0, #48	; 0x30
    176e:	47a8      	blx	r5
				  out('x', ctx);
    1770:	0031      	movs	r1, r6
    1772:	2078      	movs	r0, #120	; 0x78
    1774:	47a8      	blx	r5
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
				  min_width = 8;
    1776:	2308      	movs	r3, #8
    1778:	9304      	str	r3, [sp, #16]
			}
			case 'p':
				  out('0', ctx);
				  out('x', ctx);
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
    177a:	3b07      	subs	r3, #7
    177c:	9303      	str	r3, [sp, #12]
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x;

				if (long_ctr < 2) {
    177e:	9b05      	ldr	r3, [sp, #20]
    1780:	2b01      	cmp	r3, #1
    1782:	dc03      	bgt.n	178c <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x1c>
					x = va_arg(ap, unsigned long);
    1784:	6823      	ldr	r3, [r4, #0]
    1786:	3404      	adds	r4, #4
    1788:	9309      	str	r3, [sp, #36]	; 0x24
    178a:	e007      	b.n	179c <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x2c>
				} else {
					x = (unsigned long)va_arg(ap,
    178c:	3407      	adds	r4, #7
    178e:	0023      	movs	r3, r4
    1790:	2207      	movs	r2, #7
    1792:	4393      	bics	r3, r2
    1794:	001c      	movs	r4, r3
    1796:	681b      	ldr	r3, [r3, #0]
    1798:	3408      	adds	r4, #8
    179a:	9309      	str	r3, [sp, #36]	; 0x24
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
    179c:	2308      	movs	r3, #8
    179e:	9306      	str	r3, [sp, #24]
	int digits = 0;
    17a0:	2300      	movs	r3, #0
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
    17a2:	2708      	movs	r7, #8
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    17a4:	9308      	str	r3, [sp, #32]
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
    17a6:	930b      	str	r3, [sp, #44]	; 0x2c
	int remaining = 8; /* 8 digits max */
	int digits = 0;

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    17a8:	3f01      	subs	r7, #1
    17aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    17ac:	00bb      	lsls	r3, r7, #2
    17ae:	40d8      	lsrs	r0, r3
    17b0:	230f      	movs	r3, #15
    17b2:	4018      	ands	r0, r3

		if (nibble || found_largest_digit || size == 1) {
    17b4:	d105      	bne.n	17c2 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x52>
    17b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    17b8:	2b00      	cmp	r3, #0
    17ba:	d107      	bne.n	17cc <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x5c>
    17bc:	2f00      	cmp	r7, #0
    17be:	d111      	bne.n	17e4 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x74>
    17c0:	e004      	b.n	17cc <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x5c>
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    17c2:	2357      	movs	r3, #87	; 0x57
    17c4:	2809      	cmp	r0, #9
    17c6:	d802      	bhi.n	17ce <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x5e>
    17c8:	3b27      	subs	r3, #39	; 0x27
    17ca:	e000      	b.n	17ce <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x5e>
    17cc:	2330      	movs	r3, #48	; 0x30
			out((int)nibble, ctx);
    17ce:	18c0      	adds	r0, r0, r3
    17d0:	0031      	movs	r1, r6
    17d2:	47a8      	blx	r5
			digits++;
    17d4:	9b08      	ldr	r3, [sp, #32]
    17d6:	3301      	adds	r3, #1
    17d8:	9308      	str	r3, [sp, #32]
    17da:	9b06      	ldr	r3, [sp, #24]
    17dc:	930a      	str	r3, [sp, #40]	; 0x28

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
    17de:	2301      	movs	r3, #1
    17e0:	930b      	str	r3, [sp, #44]	; 0x2c
    17e2:	e012      	b.n	180a <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x9a>
			out((int)nibble, ctx);
			digits++;
			continue;
		}

		if (remaining-- <= min_width) {
    17e4:	9b06      	ldr	r3, [sp, #24]
    17e6:	9a06      	ldr	r2, [sp, #24]
    17e8:	3b01      	subs	r3, #1
    17ea:	930a      	str	r3, [sp, #40]	; 0x28
    17ec:	9b04      	ldr	r3, [sp, #16]
    17ee:	4293      	cmp	r3, r2
    17f0:	db0b      	blt.n	180a <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x9a>
			if (padding == PAD_ZERO_BEFORE) {
    17f2:	9b03      	ldr	r3, [sp, #12]
    17f4:	2b01      	cmp	r3, #1
    17f6:	d102      	bne.n	17fe <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x8e>
				out('0', ctx);
    17f8:	0031      	movs	r1, r6
    17fa:	2030      	movs	r0, #48	; 0x30
    17fc:	e004      	b.n	1808 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x98>
			} else if (padding == PAD_SPACE_BEFORE) {
    17fe:	9b03      	ldr	r3, [sp, #12]
    1800:	2b02      	cmp	r3, #2
    1802:	d102      	bne.n	180a <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x9a>
				out(' ', ctx);
    1804:	0031      	movs	r1, r6
    1806:	2020      	movs	r0, #32
    1808:	47a8      	blx	r5
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;

	for (; size; size--) {
    180a:	2f00      	cmp	r7, #0
    180c:	d002      	beq.n	1814 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xa4>
    180e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1810:	9306      	str	r3, [sp, #24]
    1812:	e7c9      	b.n	17a8 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x38>
				out(' ', ctx);
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    1814:	9b03      	ldr	r3, [sp, #12]
    1816:	2b03      	cmp	r3, #3
    1818:	d128      	bne.n	186c <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xfc>
    181a:	9b04      	ldr	r3, [sp, #16]
    181c:	005f      	lsls	r7, r3, #1
    181e:	9b08      	ldr	r3, [sp, #32]
    1820:	1aff      	subs	r7, r7, r3
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
    1822:	2f00      	cmp	r7, #0
    1824:	dd15      	ble.n	1852 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xe2>
			out(' ', ctx);
    1826:	0031      	movs	r1, r6
    1828:	2020      	movs	r0, #32
    182a:	47a8      	blx	r5
    182c:	3f01      	subs	r7, #1
    182e:	e7f8      	b.n	1822 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xb2>
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);

				while (*s)
    1830:	7820      	ldrb	r0, [r4, #0]
    1832:	2800      	cmp	r0, #0
    1834:	d003      	beq.n	183e <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xce>
					out((int)(*s++), ctx);
    1836:	0031      	movs	r1, r6
    1838:	3401      	adds	r4, #1
    183a:	47a8      	blx	r5
    183c:	e7f8      	b.n	1830 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xc0>
				_printk_hex_ulong(out, ctx, x, padding,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    183e:	003c      	movs	r4, r7
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
    1840:	0007      	movs	r7, r0
    1842:	e013      	b.n	186c <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xfc>
			case '%': {
				out((int)'%', ctx);
				break;
			}
			default:
				out((int)'%', ctx);
    1844:	0031      	movs	r1, r6
    1846:	2025      	movs	r0, #37	; 0x25
    1848:	47a8      	blx	r5
				out((int)*fmt, ctx);
    184a:	9b07      	ldr	r3, [sp, #28]
    184c:	7818      	ldrb	r0, [r3, #0]
    184e:	0031      	movs	r1, r6
    1850:	47a8      	blx	r5
				break;
			}
			might_format = 0;
    1852:	2700      	movs	r7, #0
				break;
			}
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
    1854:	e00a      	b.n	186c <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xfc>
		if (!might_format) {
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
    1856:	2301      	movs	r3, #1
    1858:	425b      	negs	r3, r3
    185a:	9304      	str	r3, [sp, #16]
				padding = PAD_NONE;
    185c:	003b      	movs	r3, r7
				long_ctr = 0;
    185e:	9705      	str	r7, [sp, #20]
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
				padding = PAD_NONE;
    1860:	9303      	str	r3, [sp, #12]
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1862:	2701      	movs	r7, #1
    1864:	e002      	b.n	186c <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xfc>
			case '-':
				padding = PAD_SPACE_AFTER;
				goto still_might_format;
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
					padding = PAD_ZERO_BEFORE;
    1866:	2301      	movs	r3, #1
    1868:	001f      	movs	r7, r3
    186a:	9303      	str	r3, [sp, #12]
				break;
			}
			might_format = 0;
		}
still_might_format:
		++fmt;
    186c:	9b07      	ldr	r3, [sp, #28]
    186e:	3301      	adds	r3, #1
    1870:	9307      	str	r3, [sp, #28]
    1872:	e6ea      	b.n	164a <_vprintk+0x1a>
	}
}
    1874:	b00d      	add	sp, #52	; 0x34
    1876:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001878 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

int vprintk(const char *fmt, va_list ap)
{
    1878:	b507      	push	{r0, r1, r2, lr}
    187a:	000b      	movs	r3, r1
	struct out_context ctx = { 0 };
    187c:	2100      	movs	r1, #0
	ctx->count++;
	return _char_out(c);
}

int vprintk(const char *fmt, va_list ap)
{
    187e:	0002      	movs	r2, r0
	struct out_context ctx = { 0 };
    1880:	9101      	str	r1, [sp, #4]

	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
    1882:	4803      	ldr	r0, [pc, #12]	; (1890 <vprintk+0x18>)
    1884:	a901      	add	r1, sp, #4
    1886:	f7ff fed3 	bl	1630 <_vprintk>
	return ctx.count;
}
    188a:	9801      	ldr	r0, [sp, #4]
    188c:	bd0e      	pop	{r1, r2, r3, pc}
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	00001535 	.word	0x00001535

00001894 <printk>:
 * @param fmt formatted string to output
 *
 * @return Number of characters printed
 */
int printk(const char *fmt, ...)
{
    1894:	b40f      	push	{r0, r1, r2, r3}
    1896:	b507      	push	{r0, r1, r2, lr}
    1898:	a904      	add	r1, sp, #16
    189a:	c901      	ldmia	r1!, {r0}
	int ret;
	va_list ap;

	va_start(ap, fmt);
    189c:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    189e:	f7ff ffeb 	bl	1878 <vprintk>
	va_end(ap);

	return ret;
}
    18a2:	b003      	add	sp, #12
    18a4:	bc08      	pop	{r3}
    18a6:	b004      	add	sp, #16
    18a8:	4718      	bx	r3
	...

000018ac <snprintk>:

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    18ac:	b40c      	push	{r2, r3}
    18ae:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    18b0:	2500      	movs	r5, #0

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    18b2:	b085      	sub	sp, #20
    18b4:	ab08      	add	r3, sp, #32
    18b6:	cb04      	ldmia	r3!, {r2}
	struct str_context ctx = { str, size, 0 };
    18b8:	9001      	str	r0, [sp, #4]
    18ba:	9102      	str	r1, [sp, #8]

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    18bc:	0004      	movs	r4, r0
	struct str_context ctx = { str, size, 0 };
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    18be:	a901      	add	r1, sp, #4
    18c0:	4807      	ldr	r0, [pc, #28]	; (18e0 <snprintk+0x34>)
int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
	va_list ap;

	va_start(ap, fmt);
    18c2:	9300      	str	r3, [sp, #0]
	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
    18c4:	9503      	str	r5, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    18c6:	f7ff feb3 	bl	1630 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    18ca:	9803      	ldr	r0, [sp, #12]
    18cc:	9b02      	ldr	r3, [sp, #8]
    18ce:	4298      	cmp	r0, r3
    18d0:	da00      	bge.n	18d4 <snprintk+0x28>
		str[ctx.count] = '\0';
    18d2:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    18d4:	b005      	add	sp, #20
    18d6:	bc30      	pop	{r4, r5}
    18d8:	bc08      	pop	{r3}
    18da:	b002      	add	sp, #8
    18dc:	4718      	bx	r3
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	000015f9 	.word	0x000015f9

000018e4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE, 448);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_MAX, 27);

GEN_ABS_SYM_END
    18e4:	4770      	bx	lr
	...

000018e8 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    18e8:	b5f0      	push	{r4, r5, r6, r7, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    18ea:	f3ef 8310 	mrs	r3, PRIMASK
    18ee:	b672      	cpsid	i
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    18f0:	2281      	movs	r2, #129	; 0x81
    18f2:	4e13      	ldr	r6, [pc, #76]	; (1940 <bt_hex+0x58>)
    18f4:	4d13      	ldr	r5, [pc, #76]	; (1944 <bt_hex+0x5c>)
    18f6:	7834      	ldrb	r4, [r6, #0]
    18f8:	4362      	muls	r2, r4
    18fa:	18aa      	adds	r2, r5, r2
	curbuf %= ARRAY_SIZE(hexbufs);
    18fc:	2503      	movs	r5, #3
    18fe:	3401      	adds	r4, #1
    1900:	402c      	ands	r4, r5
    1902:	7034      	strb	r4, [r6, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1904:	2b00      	cmp	r3, #0
    1906:	d100      	bne.n	190a <bt_hex+0x22>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1908:	b662      	cpsie	i
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    190a:	2940      	cmp	r1, #64	; 0x40
    190c:	d900      	bls.n	1910 <bt_hex+0x28>
    190e:	2140      	movs	r1, #64	; 0x40
    1910:	0003      	movs	r3, r0

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1912:	270f      	movs	r7, #15
    1914:	0010      	movs	r0, r2
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1916:	4d0c      	ldr	r5, [pc, #48]	; (1948 <bt_hex+0x60>)
    1918:	185e      	adds	r6, r3, r1
	curbuf %= ARRAY_SIZE(hexbufs);
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);

	for (i = 0; i < len; i++) {
    191a:	42b3      	cmp	r3, r6
    191c:	d00a      	beq.n	1934 <bt_hex+0x4c>
		str[i * 2]     = hex[b[i] >> 4];
    191e:	781c      	ldrb	r4, [r3, #0]
    1920:	0924      	lsrs	r4, r4, #4
    1922:	5d2c      	ldrb	r4, [r5, r4]
    1924:	7004      	strb	r4, [r0, #0]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1926:	781c      	ldrb	r4, [r3, #0]
    1928:	3301      	adds	r3, #1
    192a:	403c      	ands	r4, r7
    192c:	5d2c      	ldrb	r4, [r5, r4]
    192e:	7044      	strb	r4, [r0, #1]
    1930:	3002      	adds	r0, #2
    1932:	e7f2      	b.n	191a <bt_hex+0x32>
	}

	str[i * 2] = '\0';
    1934:	2300      	movs	r3, #0
    1936:	0049      	lsls	r1, r1, #1

	return str;
}
    1938:	0010      	movs	r0, r2
	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    193a:	548b      	strb	r3, [r1, r2]

	return str;
}
    193c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    193e:	46c0      	nop			; (mov r8, r8)
    1940:	200008ea 	.word	0x200008ea
    1944:	200006e6 	.word	0x200006e6
    1948:	00012350 	.word	0x00012350

0000194c <bt_rpa_create>:
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY) || \
	defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    194c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    194e:	1ccf      	adds	r7, r1, #3
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY) || \
	defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1950:	b085      	sub	sp, #20
    1952:	0004      	movs	r4, r0
    1954:	000d      	movs	r5, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1956:	0038      	movs	r0, r7
    1958:	2103      	movs	r1, #3
    195a:	f007 fbaf 	bl	90bc <bt_rand>
    195e:	1e06      	subs	r6, r0, #0
	if (err) {
    1960:	d11d      	bne.n	199e <bt_rpa_create+0x52>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1962:	233f      	movs	r3, #63	; 0x3f
    1964:	796a      	ldrb	r2, [r5, #5]
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1966:	0039      	movs	r1, r7
	err = bt_rand(rpa->val + 3, 3);
	if (err) {
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1968:	4013      	ands	r3, r2
    196a:	2240      	movs	r2, #64	; 0x40
    196c:	4313      	orrs	r3, r2
    196e:	716b      	strb	r3, [r5, #5]
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1970:	3a3d      	subs	r2, #61	; 0x3d
    1972:	4668      	mov	r0, sp
    1974:	f7ff f96b 	bl	c4e <memcpy>
	memset(res + 3, 0, 13);
    1978:	466b      	mov	r3, sp
    197a:	220d      	movs	r2, #13
    197c:	0031      	movs	r1, r6
    197e:	1cd8      	adds	r0, r3, #3
    1980:	f7ff f98f 	bl	ca2 <memset>

	err = bt_encrypt_le(irk, res, res);
    1984:	0020      	movs	r0, r4
    1986:	466a      	mov	r2, sp
    1988:	4669      	mov	r1, sp
    198a:	f007 fbb5 	bl	90f8 <bt_encrypt_le>
    198e:	1e04      	subs	r4, r0, #0
	if (err) {
    1990:	d104      	bne.n	199c <bt_rpa_create+0x50>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1992:	2203      	movs	r2, #3
    1994:	4669      	mov	r1, sp
    1996:	0028      	movs	r0, r5
    1998:	f7ff f959 	bl	c4e <memcpy>

	/* r' = padding || r */
	memcpy(res, r, 3);
	memset(res + 3, 0, 13);

	err = bt_encrypt_le(irk, res, res);
    199c:	0020      	movs	r0, r4
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    199e:	b005      	add	sp, #20
    19a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000019a4 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    19a4:	b570      	push	{r4, r5, r6, lr}
	switch (src->type) {
    19a6:	7803      	ldrb	r3, [r0, #0]
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    19a8:	0005      	movs	r5, r0
    19aa:	000c      	movs	r4, r1
	switch (src->type) {
    19ac:	2b01      	cmp	r3, #1
    19ae:	d013      	beq.n	19d8 <uuid_to_uuid128+0x34>
    19b0:	2b00      	cmp	r3, #0
    19b2:	d007      	beq.n	19c4 <uuid_to_uuid128+0x20>
    19b4:	2b02      	cmp	r3, #2
    19b6:	d11c      	bne.n	19f2 <uuid_to_uuid128+0x4e>
		*dst = uuid128_base;
		sys_put_le32(BT_UUID_32(src)->val,
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    19b8:	0001      	movs	r1, r0
    19ba:	2211      	movs	r2, #17
    19bc:	0020      	movs	r0, r4
    19be:	f7ff f946 	bl	c4e <memcpy>
		return;
    19c2:	e016      	b.n	19f2 <uuid_to_uuid128+0x4e>

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    19c4:	2211      	movs	r2, #17
    19c6:	490b      	ldr	r1, [pc, #44]	; (19f4 <uuid_to_uuid128+0x50>)
    19c8:	0020      	movs	r0, r4
    19ca:	f7ff f940 	bl	c4e <memcpy>
		sys_put_le16(BT_UUID_16(src)->val,
    19ce:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    19d0:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    19d2:	0a1b      	lsrs	r3, r3, #8
    19d4:	73a3      	strb	r3, [r4, #14]
    19d6:	e00c      	b.n	19f2 <uuid_to_uuid128+0x4e>
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    19d8:	2211      	movs	r2, #17
    19da:	4906      	ldr	r1, [pc, #24]	; (19f4 <uuid_to_uuid128+0x50>)
    19dc:	0020      	movs	r0, r4
    19de:	f7ff f936 	bl	c4e <memcpy>
		sys_put_le32(BT_UUID_32(src)->val,
    19e2:	686b      	ldr	r3, [r5, #4]
    19e4:	0a1a      	lsrs	r2, r3, #8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    19e6:	7363      	strb	r3, [r4, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    19e8:	0c1b      	lsrs	r3, r3, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    19ea:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    19ec:	0a1b      	lsrs	r3, r3, #8
    19ee:	73a2      	strb	r2, [r4, #14]
    19f0:	7423      	strb	r3, [r4, #16]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    19f2:	bd70      	pop	{r4, r5, r6, pc}
    19f4:	00014326 	.word	0x00014326

000019f8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    19f8:	b510      	push	{r4, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    19fa:	7802      	ldrb	r2, [r0, #0]
    19fc:	780b      	ldrb	r3, [r1, #0]

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    19fe:	b08a      	sub	sp, #40	; 0x28
    1a00:	000c      	movs	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1a02:	4293      	cmp	r3, r2
    1a04:	d00c      	beq.n	1a20 <bt_uuid_cmp+0x28>

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    1a06:	4669      	mov	r1, sp
    1a08:	f7ff ffcc 	bl	19a4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1a0c:	a905      	add	r1, sp, #20
    1a0e:	0020      	movs	r0, r4
    1a10:	f7ff ffc8 	bl	19a4 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    1a14:	2115      	movs	r1, #21
    1a16:	466b      	mov	r3, sp
    1a18:	2210      	movs	r2, #16
    1a1a:	4469      	add	r1, sp
    1a1c:	1c58      	adds	r0, r3, #1
    1a1e:	e010      	b.n	1a42 <bt_uuid_cmp+0x4a>
{
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    1a20:	2b01      	cmp	r3, #1
    1a22:	d00a      	beq.n	1a3a <bt_uuid_cmp+0x42>
    1a24:	2b00      	cmp	r3, #0
    1a26:	d005      	beq.n	1a34 <bt_uuid_cmp+0x3c>
    1a28:	2b02      	cmp	r3, #2
    1a2a:	d10d      	bne.n	1a48 <bt_uuid_cmp+0x50>
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1a2c:	3101      	adds	r1, #1
    1a2e:	3001      	adds	r0, #1
    1a30:	2210      	movs	r2, #16
    1a32:	e006      	b.n	1a42 <bt_uuid_cmp+0x4a>
	if (u1->type != u2->type)
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1a34:	8843      	ldrh	r3, [r0, #2]
    1a36:	8848      	ldrh	r0, [r1, #2]
    1a38:	e001      	b.n	1a3e <bt_uuid_cmp+0x46>
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1a3a:	6843      	ldr	r3, [r0, #4]
    1a3c:	6848      	ldr	r0, [r1, #4]
    1a3e:	1a18      	subs	r0, r3, r0
    1a40:	e004      	b.n	1a4c <bt_uuid_cmp+0x54>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1a42:	f7ff f8ef 	bl	c24 <memcmp>
    1a46:	e001      	b.n	1a4c <bt_uuid_cmp+0x54>
	}

	return -EINVAL;
    1a48:	2016      	movs	r0, #22
    1a4a:	4240      	negs	r0, r0
}
    1a4c:	b00a      	add	sp, #40	; 0x28
    1a4e:	bd10      	pop	{r4, pc}

00001a50 <net_buf_user_data>:
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    1a50:	89c3      	ldrh	r3, [r0, #14]
    1a52:	18c0      	adds	r0, r0, r3
    1a54:	2303      	movs	r3, #3
    1a56:	3013      	adds	r0, #19
    1a58:	4398      	bics	r0, r3
}
    1a5a:	4770      	bx	lr

00001a5c <ver_str>:
	return 0;
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(u8_t ver)
{
    1a5c:	b570      	push	{r4, r5, r6, lr}
    1a5e:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    1a60:	466a      	mov	r2, sp
    1a62:	4b09      	ldr	r3, [pc, #36]	; (1a88 <ver_str+0x2c>)
    1a64:	4669      	mov	r1, sp
    1a66:	cb70      	ldmia	r3!, {r4, r5, r6}
    1a68:	c270      	stmia	r2!, {r4, r5, r6}
    1a6a:	cb70      	ldmia	r3!, {r4, r5, r6}
    1a6c:	c270      	stmia	r2!, {r4, r5, r6}
    1a6e:	cb70      	ldmia	r3!, {r4, r5, r6}
    1a70:	c270      	stmia	r2!, {r4, r5, r6}
    1a72:	681b      	ldr	r3, [r3, #0]
    1a74:	6013      	str	r3, [r2, #0]

	if (ver < ARRAY_SIZE(str)) {
		return str[ver];
	}

	return "unknown";
    1a76:	4b05      	ldr	r3, [pc, #20]	; (1a8c <ver_str+0x30>)
	const char * const str[] = {
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    1a78:	2809      	cmp	r0, #9
    1a7a:	d801      	bhi.n	1a80 <ver_str+0x24>
		return str[ver];
    1a7c:	0080      	lsls	r0, r0, #2
    1a7e:	5843      	ldr	r3, [r0, r1]
	}

	return "unknown";
}
    1a80:	0018      	movs	r0, r3
    1a82:	b00a      	add	sp, #40	; 0x28
    1a84:	bd70      	pop	{r4, r5, r6, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	00012040 	.word	0x00012040
    1a8c:	000123d4 	.word	0x000123d4

00001a90 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1a90:	094b      	lsrs	r3, r1, #5
    1a92:	009b      	lsls	r3, r3, #2
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    1a94:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1a96:	18c0      	adds	r0, r0, r3
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    1a98:	000c      	movs	r4, r1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1a9a:	f00f f858 	bl	10b4e <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1a9e:	231f      	movs	r3, #31
    1aa0:	401c      	ands	r4, r3
    1aa2:	4120      	asrs	r0, r4
    1aa4:	3b1e      	subs	r3, #30
    1aa6:	4018      	ands	r0, r3
}
    1aa8:	bd10      	pop	{r4, pc}
	...

00001aac <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    1aac:	0001      	movs	r1, r0
    1aae:	2200      	movs	r2, #0

	return 0;
}

static void update_conn_param(struct bt_conn *conn)
{
    1ab0:	b510      	push	{r4, lr}
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    1ab2:	78c3      	ldrb	r3, [r0, #3]
    1ab4:	317c      	adds	r1, #124	; 0x7c
    1ab6:	4293      	cmp	r3, r2
    1ab8:	d000      	beq.n	1abc <update_conn_param+0x10>
    1aba:	4a02      	ldr	r2, [pc, #8]	; (1ac4 <update_conn_param+0x18>)
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1abc:	4802      	ldr	r0, [pc, #8]	; (1ac8 <update_conn_param+0x1c>)
    1abe:	f010 fa27 	bl	11f10 <k_delayed_work_submit_to_queue>
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
				 CONN_UPDATE_TIMEOUT);
}
    1ac2:	bd10      	pop	{r4, pc}
    1ac4:	00001388 	.word	0x00001388
    1ac8:	20001cf8 	.word	0x20001cf8

00001acc <hci_cmd_done>:
	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
{
    1acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ace:	0005      	movs	r5, r0
    1ad0:	b087      	sub	sp, #28
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ad2:	7990      	ldrb	r0, [r2, #6]
	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
{
    1ad4:	000e      	movs	r6, r1
    1ad6:	0014      	movs	r4, r2
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ad8:	f00e fcd6 	bl	10488 <net_buf_pool_get>
    1adc:	4f1a      	ldr	r7, [pc, #104]	; (1b48 <hci_cmd_done+0x7c>)
    1ade:	42b8      	cmp	r0, r7
    1ae0:	d011      	beq.n	1b06 <hci_cmd_done+0x3a>
		BT_WARN("pool id %u pool %p != &hci_cmd_pool %p",
    1ae2:	79a4      	ldrb	r4, [r4, #6]
    1ae4:	0020      	movs	r0, r4
    1ae6:	f00e fccf 	bl	10488 <net_buf_pool_get>
    1aea:	4b18      	ldr	r3, [pc, #96]	; (1b4c <hci_cmd_done+0x80>)
    1aec:	9002      	str	r0, [sp, #8]
    1aee:	9304      	str	r3, [sp, #16]
    1af0:	4b17      	ldr	r3, [pc, #92]	; (1b50 <hci_cmd_done+0x84>)
    1af2:	9703      	str	r7, [sp, #12]
    1af4:	9300      	str	r3, [sp, #0]
    1af6:	9401      	str	r4, [sp, #4]
    1af8:	4b16      	ldr	r3, [pc, #88]	; (1b54 <hci_cmd_done+0x88>)
    1afa:	4a17      	ldr	r2, [pc, #92]	; (1b58 <hci_cmd_done+0x8c>)
    1afc:	4917      	ldr	r1, [pc, #92]	; (1b5c <hci_cmd_done+0x90>)
    1afe:	4818      	ldr	r0, [pc, #96]	; (1b60 <hci_cmd_done+0x94>)
    1b00:	f7ff fec8 	bl	1894 <printk>
			buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
    1b04:	e01e      	b.n	1b44 <hci_cmd_done+0x78>
	}

	if (cmd(buf)->opcode != opcode) {
    1b06:	0020      	movs	r0, r4
    1b08:	f7ff ffa2 	bl	1a50 <net_buf_user_data>
    1b0c:	8843      	ldrh	r3, [r0, #2]
    1b0e:	429d      	cmp	r5, r3
    1b10:	d00b      	beq.n	1b2a <hci_cmd_done+0x5e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    1b12:	4a0e      	ldr	r2, [pc, #56]	; (1b4c <hci_cmd_done+0x80>)
    1b14:	9302      	str	r3, [sp, #8]
    1b16:	4b0e      	ldr	r3, [pc, #56]	; (1b50 <hci_cmd_done+0x84>)
    1b18:	9203      	str	r2, [sp, #12]
    1b1a:	9300      	str	r3, [sp, #0]
    1b1c:	9501      	str	r5, [sp, #4]
    1b1e:	4b0d      	ldr	r3, [pc, #52]	; (1b54 <hci_cmd_done+0x88>)
    1b20:	4a0d      	ldr	r2, [pc, #52]	; (1b58 <hci_cmd_done+0x8c>)
    1b22:	490e      	ldr	r1, [pc, #56]	; (1b5c <hci_cmd_done+0x90>)
    1b24:	480f      	ldr	r0, [pc, #60]	; (1b64 <hci_cmd_done+0x98>)
    1b26:	f7ff feb5 	bl	1894 <printk>
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1b2a:	0020      	movs	r0, r4
    1b2c:	f7ff ff90 	bl	1a50 <net_buf_user_data>
    1b30:	6843      	ldr	r3, [r0, #4]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d006      	beq.n	1b44 <hci_cmd_done+0x78>
		cmd(buf)->status = status;
    1b36:	7046      	strb	r6, [r0, #1]
		k_sem_give(cmd(buf)->sync);
    1b38:	0020      	movs	r0, r4
    1b3a:	f7ff ff89 	bl	1a50 <net_buf_user_data>
    1b3e:	6840      	ldr	r0, [r0, #4]
    1b40:	f00f fecc 	bl	118dc <k_sem_give>
	}
}
    1b44:	b007      	add	sp, #28
    1b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b48:	2000064c 	.word	0x2000064c
    1b4c:	0001241d 	.word	0x0001241d
    1b50:	00012422 	.word	0x00012422
    1b54:	00014447 	.word	0x00014447
    1b58:	000123dc 	.word	0x000123dc
    1b5c:	000123e3 	.word	0x000123e3
    1b60:	000123e6 	.word	0x000123e6
    1b64:	0001242a 	.word	0x0001242a

00001b68 <bt_hci_cmd_create>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    1b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b6a:	000e      	movs	r6, r1
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1b6c:	2101      	movs	r1, #1
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    1b6e:	0005      	movs	r5, r0
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1b70:	4249      	negs	r1, r1
    1b72:	480f      	ldr	r0, [pc, #60]	; (1bb0 <bt_hci_cmd_create+0x48>)
    1b74:	f00e fc90 	bl	10498 <net_buf_alloc>
    1b78:	0004      	movs	r4, r0
	__ASSERT_NO_MSG(buf);

	BT_DBG("buf %p", buf);

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    1b7a:	2100      	movs	r1, #0
    1b7c:	f00e fcec 	bl	10558 <net_buf_reserve>

	cmd(buf)->type = BT_BUF_CMD;
    1b80:	0020      	movs	r0, r4
    1b82:	f7ff ff65 	bl	1a50 <net_buf_user_data>
    1b86:	2700      	movs	r7, #0
    1b88:	7007      	strb	r7, [r0, #0]
	cmd(buf)->opcode = opcode;
    1b8a:	0020      	movs	r0, r4
    1b8c:	f7ff ff60 	bl	1a50 <net_buf_user_data>
    1b90:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    1b92:	0020      	movs	r0, r4
    1b94:	f7ff ff5c 	bl	1a50 <net_buf_user_data>
    1b98:	6047      	str	r7, [r0, #4]

	hdr = net_buf_add(buf, sizeof(*hdr));
    1b9a:	0020      	movs	r0, r4
    1b9c:	2103      	movs	r1, #3
    1b9e:	3008      	adds	r0, #8
    1ba0:	f00e fd10 	bl	105c4 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    1ba4:	7005      	strb	r5, [r0, #0]
    1ba6:	0a2d      	lsrs	r5, r5, #8
    1ba8:	7045      	strb	r5, [r0, #1]
	hdr->param_len = param_len;
    1baa:	7086      	strb	r6, [r0, #2]

	return buf;
}
    1bac:	0020      	movs	r0, r4
    1bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bb0:	2000064c 	.word	0x2000064c

00001bb4 <bt_hci_cmd_send_sync>:
	return 0;
}

int bt_hci_cmd_send_sync(u16_t opcode, struct net_buf *buf,
			 struct net_buf **rsp)
{
    1bb4:	b570      	push	{r4, r5, r6, lr}
    1bb6:	000c      	movs	r4, r1
    1bb8:	b086      	sub	sp, #24
    1bba:	0015      	movs	r5, r2
	struct k_sem sync_sem;
	int err;

	if (!buf) {
    1bbc:	2900      	cmp	r1, #0
    1bbe:	d103      	bne.n	1bc8 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    1bc0:	f7ff ffd2 	bl	1b68 <bt_hci_cmd_create>
    1bc4:	1e04      	subs	r4, r0, #0
		if (!buf) {
    1bc6:	d029      	beq.n	1c1c <bt_hci_cmd_send_sync+0x68>
		}
	}

	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);

	k_sem_init(&sync_sem, 0, 1);
    1bc8:	ae01      	add	r6, sp, #4
    1bca:	2201      	movs	r2, #1
    1bcc:	2100      	movs	r1, #0
    1bce:	0030      	movs	r0, r6
    1bd0:	f00f fe7c 	bl	118cc <k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1bd4:	0020      	movs	r0, r4
    1bd6:	f7ff ff3b 	bl	1a50 <net_buf_user_data>
    1bda:	6046      	str	r6, [r0, #4]

	/* Make sure the buffer stays around until the command completes */
	net_buf_ref(buf);
    1bdc:	0020      	movs	r0, r4
    1bde:	f00e fced 	bl	105bc <net_buf_ref>

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1be2:	4810      	ldr	r0, [pc, #64]	; (1c24 <bt_hci_cmd_send_sync+0x70>)
    1be4:	0021      	movs	r1, r4
    1be6:	30c4      	adds	r0, #196	; 0xc4
    1be8:	f00e fcbb 	bl	10562 <net_buf_put>

	err = k_sem_take(&sync_sem, HCI_CMD_TIMEOUT);
    1bec:	490e      	ldr	r1, [pc, #56]	; (1c28 <bt_hci_cmd_send_sync+0x74>)
    1bee:	0030      	movs	r0, r6
    1bf0:	f00f feb0 	bl	11954 <k_sem_take>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
    1bf4:	0020      	movs	r0, r4
    1bf6:	f7ff ff2b 	bl	1a50 <net_buf_user_data>
    1bfa:	7840      	ldrb	r0, [r0, #1]
    1bfc:	2800      	cmp	r0, #0
    1bfe:	d004      	beq.n	1c0a <bt_hci_cmd_send_sync+0x56>
		err = -EIO;
		net_buf_unref(buf);
    1c00:	0020      	movs	r0, r4
    1c02:	f00e fcbd 	bl	10580 <net_buf_unref>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
		err = -EIO;
    1c06:	2005      	movs	r0, #5
    1c08:	e009      	b.n	1c1e <bt_hci_cmd_send_sync+0x6a>
		net_buf_unref(buf);
	} else {
		err = 0;
		if (rsp) {
    1c0a:	2d00      	cmp	r5, #0
    1c0c:	d001      	beq.n	1c12 <bt_hci_cmd_send_sync+0x5e>
			*rsp = buf;
    1c0e:	602c      	str	r4, [r5, #0]
    1c10:	e006      	b.n	1c20 <bt_hci_cmd_send_sync+0x6c>
		} else {
			net_buf_unref(buf);
    1c12:	0020      	movs	r0, r4
    1c14:	f00e fcb4 	bl	10580 <net_buf_unref>

	if (cmd(buf)->status) {
		err = -EIO;
		net_buf_unref(buf);
	} else {
		err = 0;
    1c18:	0028      	movs	r0, r5
    1c1a:	e001      	b.n	1c20 <bt_hci_cmd_send_sync+0x6c>
	int err;

	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    1c1c:	2037      	movs	r0, #55	; 0x37
    1c1e:	4240      	negs	r0, r0
			net_buf_unref(buf);
		}
	}

	return err;
}
    1c20:	b006      	add	sp, #24
    1c22:	bd70      	pop	{r4, r5, r6, pc}
    1c24:	20000198 	.word	0x20000198
    1c28:	00002710 	.word	0x00002710

00001c2c <set_random_address>:

	return 0;
}

static int set_random_address(const bt_addr_t *addr)
{
    1c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    1c2e:	4e14      	ldr	r6, [pc, #80]	; (1c80 <set_random_address+0x54>)
    1c30:	2206      	movs	r2, #6
    1c32:	0037      	movs	r7, r6
    1c34:	3708      	adds	r7, #8
    1c36:	0039      	movs	r1, r7
    1c38:	0005      	movs	r5, r0
    1c3a:	f7fe fff3 	bl	c24 <memcmp>
    1c3e:	1e04      	subs	r4, r0, #0
	int err;

	BT_DBG("%s", bt_addr_str(addr));

	/* Do nothing if we already have the right address */
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    1c40:	d01b      	beq.n	1c7a <set_random_address+0x4e>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    1c42:	2106      	movs	r1, #6
    1c44:	480f      	ldr	r0, [pc, #60]	; (1c84 <set_random_address+0x58>)
    1c46:	f7ff ff8f 	bl	1b68 <bt_hci_cmd_create>
    1c4a:	1e04      	subs	r4, r0, #0
	if (!buf) {
    1c4c:	d013      	beq.n	1c76 <set_random_address+0x4a>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, addr, sizeof(*addr));
    1c4e:	2206      	movs	r2, #6
    1c50:	0029      	movs	r1, r5
    1c52:	3008      	adds	r0, #8
    1c54:	f00e fcbd 	bl	105d2 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    1c58:	0021      	movs	r1, r4
    1c5a:	2200      	movs	r2, #0
    1c5c:	4809      	ldr	r0, [pc, #36]	; (1c84 <set_random_address+0x58>)
    1c5e:	f7ff ffa9 	bl	1bb4 <bt_hci_cmd_send_sync>
    1c62:	1e04      	subs	r4, r0, #0
	if (err) {
    1c64:	d109      	bne.n	1c7a <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1c66:	2206      	movs	r2, #6
    1c68:	0029      	movs	r1, r5
    1c6a:	0038      	movs	r0, r7
    1c6c:	f7fe ffef 	bl	c4e <memcpy>
		return err;
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    1c70:	2301      	movs	r3, #1
    1c72:	71f3      	strb	r3, [r6, #7]
    1c74:	e001      	b.n	1c7a <set_random_address+0x4e>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
	if (!buf) {
		return -ENOBUFS;
    1c76:	2437      	movs	r4, #55	; 0x37
    1c78:	4264      	negs	r4, r4
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
	return 0;
}
    1c7a:	0020      	movs	r0, r4
    1c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	20000198 	.word	0x20000198
    1c84:	00002005 	.word	0x00002005

00001c88 <le_set_private_addr>:
		le_set_private_addr();
	}
}
#else
static int le_set_private_addr(void)
{
    1c88:	b507      	push	{r0, r1, r2, lr}
	bt_addr_t nrpa;
	int err;

	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    1c8a:	2106      	movs	r1, #6
    1c8c:	4668      	mov	r0, sp
    1c8e:	f007 fa15 	bl	90bc <bt_rand>
	if (err) {
    1c92:	2800      	cmp	r0, #0
    1c94:	d108      	bne.n	1ca8 <le_set_private_addr+0x20>
		return err;
	}

	nrpa.val[5] &= 0x3f;
    1c96:	466b      	mov	r3, sp
    1c98:	795a      	ldrb	r2, [r3, #5]
    1c9a:	233f      	movs	r3, #63	; 0x3f
    1c9c:	4013      	ands	r3, r2
    1c9e:	466a      	mov	r2, sp

	return set_random_address(&nrpa);
    1ca0:	4668      	mov	r0, sp
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
	if (err) {
		return err;
	}

	nrpa.val[5] &= 0x3f;
    1ca2:	7153      	strb	r3, [r2, #5]

	return set_random_address(&nrpa);
    1ca4:	f7ff ffc2 	bl	1c2c <set_random_address>
}
    1ca8:	bd0e      	pop	{r1, r2, r3, pc}
	...

00001cac <bt_hci_stop_scanning>:

	return err;
}

static int bt_hci_stop_scanning(void)
{
    1cac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    1cae:	4d1c      	ldr	r5, [pc, #112]	; (1d20 <bt_hci_stop_scanning+0x74>)
    1cb0:	2107      	movs	r1, #7
    1cb2:	356c      	adds	r5, #108	; 0x6c
    1cb4:	0028      	movs	r0, r5
    1cb6:	f7ff feeb 	bl	1a90 <atomic_test_bit>
    1cba:	2800      	cmp	r0, #0
    1cbc:	d02b      	beq.n	1d16 <bt_hci_stop_scanning+0x6a>
		return -EALREADY;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    1cbe:	2102      	movs	r1, #2
    1cc0:	4818      	ldr	r0, [pc, #96]	; (1d24 <bt_hci_stop_scanning+0x78>)
    1cc2:	f7ff ff51 	bl	1b68 <bt_hci_cmd_create>
    1cc6:	1e04      	subs	r4, r0, #0
				sizeof(*scan_enable));
	if (!buf) {
    1cc8:	d027      	beq.n	1d1a <bt_hci_stop_scanning+0x6e>
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    1cca:	2102      	movs	r1, #2
    1ccc:	3008      	adds	r0, #8
    1cce:	f00e fc79 	bl	105c4 <net_buf_simple_add>
	memset(scan_enable, 0, sizeof(*scan_enable));
    1cd2:	2202      	movs	r2, #2
    1cd4:	2100      	movs	r1, #0
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    1cd6:	0006      	movs	r6, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    1cd8:	f7fe ffe3 	bl	ca2 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1cdc:	2300      	movs	r3, #0
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    1cde:	aa01      	add	r2, sp, #4
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
	memset(scan_enable, 0, sizeof(*scan_enable));
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1ce0:	7073      	strb	r3, [r6, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    1ce2:	7033      	strb	r3, [r6, #0]

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    1ce4:	0021      	movs	r1, r4
    1ce6:	480f      	ldr	r0, [pc, #60]	; (1d24 <bt_hci_stop_scanning+0x78>)
    1ce8:	f7ff ff64 	bl	1bb4 <bt_hci_cmd_send_sync>
	if (err) {
    1cec:	2800      	cmp	r0, #0
    1cee:	d116      	bne.n	1d1e <bt_hci_stop_scanning+0x72>
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    1cf0:	9b01      	ldr	r3, [sp, #4]
    1cf2:	689b      	ldr	r3, [r3, #8]
    1cf4:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    1cf6:	2c00      	cmp	r4, #0
    1cf8:	d108      	bne.n	1d0c <bt_hci_stop_scanning+0x60>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1cfa:	2181      	movs	r1, #129	; 0x81
    1cfc:	0028      	movs	r0, r5
    1cfe:	4249      	negs	r1, r1
    1d00:	f00e ff3c 	bl	10b7c <atomic_and>
    1d04:	4908      	ldr	r1, [pc, #32]	; (1d28 <bt_hci_stop_scanning+0x7c>)
    1d06:	0028      	movs	r0, r5
    1d08:	f00e ff38 	bl	10b7c <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_SCANNING);
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);
    1d0c:	9801      	ldr	r0, [sp, #4]
    1d0e:	f00e fc37 	bl	10580 <net_buf_unref>
	if (err) {
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    1d12:	0020      	movs	r0, r4
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);

	return err;
    1d14:	e003      	b.n	1d1e <bt_hci_stop_scanning+0x72>
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
		return -EALREADY;
    1d16:	2045      	movs	r0, #69	; 0x45
    1d18:	e000      	b.n	1d1c <bt_hci_stop_scanning+0x70>
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
    1d1a:	2037      	movs	r0, #55	; 0x37
    1d1c:	4240      	negs	r0, r0
	}

	net_buf_unref(rsp);

	return err;
}
    1d1e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    1d20:	20000198 	.word	0x20000198
    1d24:	0000200c 	.word	0x0000200c
    1d28:	fffffdff 	.word	0xfffffdff

00001d2c <set_advertise_enable>:

	return addr;
}

static int set_advertise_enable(bool enable)
{
    1d2c:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    1d2e:	2101      	movs	r1, #1

	return addr;
}

static int set_advertise_enable(bool enable)
{
    1d30:	0005      	movs	r5, r0
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    1d32:	4812      	ldr	r0, [pc, #72]	; (1d7c <set_advertise_enable+0x50>)
    1d34:	f7ff ff18 	bl	1b68 <bt_hci_cmd_create>
    1d38:	1e04      	subs	r4, r0, #0
	if (!buf) {
    1d3a:	d01a      	beq.n	1d72 <set_advertise_enable+0x46>
    1d3c:	3008      	adds	r0, #8
		return -ENOBUFS;
	}

	if (enable) {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    1d3e:	2101      	movs	r1, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
	if (!buf) {
		return -ENOBUFS;
	}

	if (enable) {
    1d40:	2d00      	cmp	r5, #0
    1d42:	d100      	bne.n	1d46 <set_advertise_enable+0x1a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
	} else {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    1d44:	0029      	movs	r1, r5
    1d46:	f00e fc4e 	bl	105e6 <net_buf_simple_add_u8>
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    1d4a:	0021      	movs	r1, r4
    1d4c:	2200      	movs	r2, #0
    1d4e:	480b      	ldr	r0, [pc, #44]	; (1d7c <set_advertise_enable+0x50>)
    1d50:	f7ff ff30 	bl	1bb4 <bt_hci_cmd_send_sync>
    1d54:	1e04      	subs	r4, r0, #0
	if (err) {
    1d56:	d10e      	bne.n	1d76 <set_advertise_enable+0x4a>
    1d58:	4809      	ldr	r0, [pc, #36]	; (1d80 <set_advertise_enable+0x54>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1d5a:	306c      	adds	r0, #108	; 0x6c
		return err;
	}

	if (enable) {
    1d5c:	2d00      	cmp	r5, #0
    1d5e:	d003      	beq.n	1d68 <set_advertise_enable+0x3c>
    1d60:	2120      	movs	r1, #32
    1d62:	f00e ff00 	bl	10b66 <atomic_or>
    1d66:	e006      	b.n	1d76 <set_advertise_enable+0x4a>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1d68:	2121      	movs	r1, #33	; 0x21
    1d6a:	4249      	negs	r1, r1
    1d6c:	f00e ff06 	bl	10b7c <atomic_and>
    1d70:	e001      	b.n	1d76 <set_advertise_enable+0x4a>
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
	if (!buf) {
		return -ENOBUFS;
    1d72:	2437      	movs	r4, #55	; 0x37
    1d74:	4264      	negs	r4, r4
	} else {
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);
	}

	return 0;
}
    1d76:	0020      	movs	r0, r4
    1d78:	bd70      	pop	{r4, r5, r6, pc}
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	0000200a 	.word	0x0000200a
    1d80:	20000198 	.word	0x20000198

00001d84 <set_ad>:

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    1d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d86:	000c      	movs	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    1d88:	2120      	movs	r1, #32

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    1d8a:	9000      	str	r0, [sp, #0]
    1d8c:	9201      	str	r2, [sp, #4]
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    1d8e:	f7ff feeb 	bl	1b68 <bt_hci_cmd_create>
    1d92:	1e06      	subs	r6, r0, #0
	if (!buf) {
    1d94:	d037      	beq.n	1e06 <set_ad+0x82>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    1d96:	2120      	movs	r1, #32
    1d98:	3008      	adds	r0, #8
    1d9a:	f00e fc13 	bl	105c4 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    1d9e:	2220      	movs	r2, #32
    1da0:	2100      	movs	r1, #0
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    1da2:	0005      	movs	r5, r0

	memset(set_data, 0, sizeof(*set_data));

	for (i = 0; i < ad_len; i++) {
    1da4:	2700      	movs	r7, #0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));

	memset(set_data, 0, sizeof(*set_data));
    1da6:	f7fe ff7c 	bl	ca2 <memset>

	for (i = 0; i < ad_len; i++) {
    1daa:	9b01      	ldr	r3, [sp, #4]
    1dac:	429f      	cmp	r7, r3
    1dae:	d024      	beq.n	1dfa <set_ad+0x76>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    1db0:	7828      	ldrb	r0, [r5, #0]
    1db2:	7863      	ldrb	r3, [r4, #1]
    1db4:	181b      	adds	r3, r3, r0
    1db6:	3302      	adds	r3, #2
    1db8:	2b1f      	cmp	r3, #31
    1dba:	dd04      	ble.n	1dc6 <set_ad+0x42>
			net_buf_unref(buf);
    1dbc:	0030      	movs	r0, r6
    1dbe:	f00e fbdf 	bl	10580 <net_buf_unref>
			return -EINVAL;
    1dc2:	2016      	movs	r0, #22
    1dc4:	e020      	b.n	1e08 <set_ad+0x84>
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    1dc6:	1c43      	adds	r3, r0, #1
    1dc8:	b2db      	uxtb	r3, r3
    1dca:	702b      	strb	r3, [r5, #0]
    1dcc:	7862      	ldrb	r2, [r4, #1]
    1dce:	1829      	adds	r1, r5, r0
		set_data->data[set_data->len++] = ad[i].type;
    1dd0:	3002      	adds	r0, #2
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    1dd2:	3201      	adds	r2, #1
		set_data->data[set_data->len++] = ad[i].type;
    1dd4:	b2c0      	uxtb	r0, r0
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    1dd6:	704a      	strb	r2, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    1dd8:	7028      	strb	r0, [r5, #0]
    1dda:	7822      	ldrb	r2, [r4, #0]
    1ddc:	18eb      	adds	r3, r5, r3
    1dde:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    1de0:	1828      	adds	r0, r5, r0
    1de2:	7862      	ldrb	r2, [r4, #1]
    1de4:	6861      	ldr	r1, [r4, #4]
    1de6:	3001      	adds	r0, #1
    1de8:	f7fe ff31 	bl	c4e <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    1dec:	7863      	ldrb	r3, [r4, #1]
    1dee:	782a      	ldrb	r2, [r5, #0]

	set_data = net_buf_add(buf, sizeof(*set_data));

	memset(set_data, 0, sizeof(*set_data));

	for (i = 0; i < ad_len; i++) {
    1df0:	3701      	adds	r7, #1
		set_data->data[set_data->len++] = ad[i].data_len + 1;
		set_data->data[set_data->len++] = ad[i].type;

		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    1df2:	18d3      	adds	r3, r2, r3
    1df4:	702b      	strb	r3, [r5, #0]
    1df6:	3408      	adds	r4, #8
    1df8:	e7d7      	b.n	1daa <set_ad+0x26>
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    1dfa:	2200      	movs	r2, #0
    1dfc:	0031      	movs	r1, r6
    1dfe:	9800      	ldr	r0, [sp, #0]
    1e00:	f7ff fed8 	bl	1bb4 <bt_hci_cmd_send_sync>
    1e04:	e001      	b.n	1e0a <set_ad+0x86>
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
    1e06:	2037      	movs	r0, #55	; 0x37
    1e08:	4240      	negs	r0, r0
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
}
    1e0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001e0c <bt_le_conn_params_valid>:
done:
	bt_conn_unref(conn);
}

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
    1e0c:	b530      	push	{r4, r5, lr}
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
    1e0e:	8801      	ldrh	r1, [r0, #0]
    1e10:	8843      	ldrh	r3, [r0, #2]
done:
	bt_conn_unref(conn);
}

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
    1e12:	0002      	movs	r2, r0
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
	    param->interval_min < 6 || param->interval_max > 3200) {
		return false;
    1e14:	2000      	movs	r0, #0

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
    1e16:	4299      	cmp	r1, r3
    1e18:	d819      	bhi.n	1e4e <bt_le_conn_params_valid+0x42>
    1e1a:	2905      	cmp	r1, #5
    1e1c:	d917      	bls.n	1e4e <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    1e1e:	21c8      	movs	r1, #200	; 0xc8
    1e20:	0109      	lsls	r1, r1, #4
    1e22:	428b      	cmp	r3, r1
    1e24:	d813      	bhi.n	1e4e <bt_le_conn_params_valid+0x42>
		return false;
	}

	if (param->latency > 499) {
    1e26:	24f4      	movs	r4, #244	; 0xf4
    1e28:	8891      	ldrh	r1, [r2, #4]
    1e2a:	34ff      	adds	r4, #255	; 0xff
    1e2c:	42a1      	cmp	r1, r4
    1e2e:	d80e      	bhi.n	1e4e <bt_le_conn_params_valid+0x42>
		return false;
	}

	if (param->timeout < 10 || param->timeout > 3200 ||
    1e30:	88d2      	ldrh	r2, [r2, #6]
    1e32:	4d07      	ldr	r5, [pc, #28]	; (1e50 <bt_le_conn_params_valid+0x44>)
    1e34:	0014      	movs	r4, r2
    1e36:	3c0a      	subs	r4, #10
    1e38:	b2a4      	uxth	r4, r4
    1e3a:	42ac      	cmp	r4, r5
    1e3c:	d807      	bhi.n	1e4e <bt_le_conn_params_valid+0x42>
    1e3e:	3101      	adds	r1, #1
    1e40:	434b      	muls	r3, r1
    1e42:	0092      	lsls	r2, r2, #2
    1e44:	2101      	movs	r1, #1
    1e46:	429a      	cmp	r2, r3
    1e48:	dc00      	bgt.n	1e4c <bt_le_conn_params_valid+0x40>
    1e4a:	1c01      	adds	r1, r0, #0
    1e4c:	b2c8      	uxtb	r0, r1
	     ((1 + param->latency) * param->interval_max))) {
		return false;
	}

	return true;
}
    1e4e:	bd30      	pop	{r4, r5, pc}
    1e50:	00000c76 	.word	0x00000c76

00001e54 <bt_le_scan_update>:

	return err;
}

int bt_le_scan_update(bool fast_scan)
{
    1e54:	b510      	push	{r4, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    1e56:	4c09      	ldr	r4, [pc, #36]	; (1e7c <bt_le_scan_update+0x28>)
    1e58:	2108      	movs	r1, #8
    1e5a:	346c      	adds	r4, #108	; 0x6c
    1e5c:	0020      	movs	r0, r4
    1e5e:	f7ff fe17 	bl	1a90 <atomic_test_bit>
    1e62:	2800      	cmp	r0, #0
    1e64:	d001      	beq.n	1e6a <bt_le_scan_update+0x16>
		return 0;
    1e66:	2000      	movs	r0, #0
    1e68:	e007      	b.n	1e7a <bt_le_scan_update+0x26>
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    1e6a:	2107      	movs	r1, #7
    1e6c:	0020      	movs	r0, r4
    1e6e:	f7ff fe0f 	bl	1a90 <atomic_test_bit>
    1e72:	2800      	cmp	r0, #0
    1e74:	d0f7      	beq.n	1e66 <bt_le_scan_update+0x12>
		int err;

		err = bt_hci_stop_scanning();
    1e76:	f7ff ff19 	bl	1cac <bt_hci_stop_scanning>
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
				     0x01);
	}

	return 0;
}
    1e7a:	bd10      	pop	{r4, pc}
    1e7c:	20000198 	.word	0x20000198

00001e80 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    1e80:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    1e82:	b510      	push	{r4, lr}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;

	return bt_rand(addr->a.val, 6);
    1e84:	2106      	movs	r1, #6

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    1e86:	0004      	movs	r4, r0
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    1e88:	7003      	strb	r3, [r0, #0]

	return bt_rand(addr->a.val, 6);
    1e8a:	18c0      	adds	r0, r0, r3
    1e8c:	f007 f916 	bl	90bc <bt_rand>
int bt_addr_le_create_static(bt_addr_le_t *addr)
{
	int err;

	err = create_random_addr(addr);
	if (err) {
    1e90:	2800      	cmp	r0, #0
    1e92:	d104      	bne.n	1e9e <bt_addr_le_create_static+0x1e>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    1e94:	2240      	movs	r2, #64	; 0x40
    1e96:	79a3      	ldrb	r3, [r4, #6]
    1e98:	4252      	negs	r2, r2
    1e9a:	4313      	orrs	r3, r2
    1e9c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    1e9e:	bd10      	pop	{r4, pc}

00001ea0 <bt_init>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PRIVACY */

static int bt_init(void)
{
    1ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ea2:	b097      	sub	sp, #92	; 0x5c
{
	struct net_buf *rsp;
	int err;

	/* Send HCI_RESET */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    1ea4:	ae0f      	add	r6, sp, #60	; 0x3c
    1ea6:	0032      	movs	r2, r6
    1ea8:	2100      	movs	r1, #0
    1eaa:	48d0      	ldr	r0, [pc, #832]	; (21ec <bt_init+0x34c>)
    1eac:	f7ff fe82 	bl	1bb4 <bt_hci_cmd_send_sync>
	if (err) {
    1eb0:	1e04      	subs	r4, r0, #0
    1eb2:	d167      	bne.n	1f84 <bt_init+0xe4>
    1eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	}
}

static void hci_reset_complete(struct net_buf *buf)
{
	u8_t status = buf->data[0];
    1eb6:	689b      	ldr	r3, [r3, #8]

	BT_DBG("status %u", status);

	if (status) {
    1eb8:	781b      	ldrb	r3, [r3, #0]
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d106      	bne.n	1ecc <bt_init+0x2c>
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    1ebe:	48cc      	ldr	r0, [pc, #816]	; (21f0 <bt_init+0x350>)

	if (status) {
		return;
	}

	scan_dev_found_cb = NULL;
    1ec0:	4acc      	ldr	r2, [pc, #816]	; (21f4 <bt_init+0x354>)
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    1ec2:	2101      	movs	r1, #1
    1ec4:	306c      	adds	r0, #108	; 0x6c

	if (status) {
		return;
	}

	scan_dev_found_cb = NULL;
    1ec6:	6013      	str	r3, [r2, #0]
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    1ec8:	f00e fe43 	bl	10b52 <atomic_set>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
	if (err) {
		return err;
	}
	hci_reset_complete(rsp);
	net_buf_unref(rsp);
    1ecc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1ece:	f00e fb57 	bl	10580 <net_buf_unref>

	/* Read Local Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    1ed2:	0032      	movs	r2, r6
    1ed4:	2100      	movs	r1, #0
    1ed6:	48c8      	ldr	r0, [pc, #800]	; (21f8 <bt_init+0x358>)
    1ed8:	f7ff fe6c 	bl	1bb4 <bt_hci_cmd_send_sync>
    1edc:	0007      	movs	r7, r0
	if (err) {
    1ede:	1e04      	subs	r4, r0, #0
    1ee0:	d150      	bne.n	1f84 <bt_init+0xe4>
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    1ee2:	4dc3      	ldr	r5, [pc, #780]	; (21f0 <bt_init+0x350>)
    1ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ee6:	0028      	movs	r0, r5
    1ee8:	6899      	ldr	r1, [r3, #8]
    1eea:	2208      	movs	r2, #8
    1eec:	3101      	adds	r1, #1
    1eee:	3016      	adds	r0, #22
    1ef0:	f7fe fead 	bl	c4e <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
	if (err) {
		return err;
	}
	read_local_features_complete(rsp);
	net_buf_unref(rsp);
    1ef4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1ef6:	f00e fb43 	bl	10580 <net_buf_unref>

	/* Read Local Version Information */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1efa:	0039      	movs	r1, r7
    1efc:	0032      	movs	r2, r6
    1efe:	48bf      	ldr	r0, [pc, #764]	; (21fc <bt_init+0x35c>)
    1f00:	f7ff fe58 	bl	1bb4 <bt_hci_cmd_send_sync>
    1f04:	0007      	movs	r7, r0
				   &rsp);
	if (err) {
    1f06:	1e04      	subs	r4, r0, #0
    1f08:	d13c      	bne.n	1f84 <bt_init+0xe4>
		return err;
	}
	read_local_ver_complete(rsp);
    1f0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1f0c:	6883      	ldr	r3, [r0, #8]
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    1f0e:	785a      	ldrb	r2, [r3, #1]
    1f10:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    1f12:	78da      	ldrb	r2, [r3, #3]
    1f14:	7899      	ldrb	r1, [r3, #2]
    1f16:	0212      	lsls	r2, r2, #8
    1f18:	430a      	orrs	r2, r1
    1f1a:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    1f1c:	791a      	ldrb	r2, [r3, #4]
    1f1e:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    1f20:	7a1a      	ldrb	r2, [r3, #8]
    1f22:	79d9      	ldrb	r1, [r3, #7]
    1f24:	0212      	lsls	r2, r2, #8
    1f26:	430a      	orrs	r2, r1
    1f28:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    1f2a:	795a      	ldrb	r2, [r3, #5]
    1f2c:	799b      	ldrb	r3, [r3, #6]
    1f2e:	021b      	lsls	r3, r3, #8
    1f30:	4313      	orrs	r3, r2
    1f32:	82ab      	strh	r3, [r5, #20]
				   &rsp);
	if (err) {
		return err;
	}
	read_local_ver_complete(rsp);
	net_buf_unref(rsp);
    1f34:	f00e fb24 	bl	10580 <net_buf_unref>

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    1f38:	0039      	movs	r1, r7
    1f3a:	0032      	movs	r2, r6
    1f3c:	48b0      	ldr	r0, [pc, #704]	; (2200 <bt_init+0x360>)
    1f3e:	f7ff fe39 	bl	1bb4 <bt_hci_cmd_send_sync>
    1f42:	0007      	movs	r7, r0
	if (err) {
    1f44:	1e04      	subs	r4, r0, #0
    1f46:	d11d      	bne.n	1f84 <bt_init+0xe4>
    1f48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1f4a:	2206      	movs	r2, #6
{
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    1f4c:	6899      	ldr	r1, [r3, #8]
    1f4e:	1c68      	adds	r0, r5, #1
    1f50:	3101      	adds	r1, #1
    1f52:	f7fe fe7c 	bl	c4e <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    1f56:	980f      	ldr	r0, [sp, #60]	; 0x3c
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    1f58:	702f      	strb	r7, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    1f5a:	f00e fb11 	bl	10580 <net_buf_unref>

	/* Read Local Supported Commands */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    1f5e:	0032      	movs	r2, r6
    1f60:	0039      	movs	r1, r7
    1f62:	48a8      	ldr	r0, [pc, #672]	; (2204 <bt_init+0x364>)
    1f64:	f7ff fe26 	bl	1bb4 <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    1f68:	1e04      	subs	r4, r0, #0
    1f6a:	d10b      	bne.n	1f84 <bt_init+0xe4>
{
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
    1f6c:	0028      	movs	r0, r5
    1f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1f70:	2240      	movs	r2, #64	; 0x40
    1f72:	6899      	ldr	r1, [r3, #8]
    1f74:	301e      	adds	r0, #30
    1f76:	3101      	adds	r1, #1
    1f78:	f7fe fe69 	bl	c4e <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_supported_commands_complete(rsp);
	net_buf_unref(rsp);
    1f7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1f7e:	f00e faff 	bl	10580 <net_buf_unref>
    1f82:	e002      	b.n	1f8a <bt_init+0xea>
static int hci_init(void)
{
	int err;

	err = common_init();
	if (err) {
    1f84:	2c00      	cmp	r4, #0
    1f86:	d000      	beq.n	1f8a <bt_init+0xea>
    1f88:	e26d      	b.n	2466 <bt_init+0x5c6>
	struct net_buf *buf;
	struct net_buf *rsp;
	int err;

	/* For now we only support LE capable controllers */
	if (!BT_FEAT_LE(bt_dev.features)) {
    1f8a:	4d99      	ldr	r5, [pc, #612]	; (21f0 <bt_init+0x350>)
    1f8c:	7eab      	ldrb	r3, [r5, #26]
    1f8e:	065b      	lsls	r3, r3, #25
    1f90:	d40b      	bmi.n	1faa <bt_init+0x10a>
		BT_ERR("Non-LE capable controller detected!");
    1f92:	4b9d      	ldr	r3, [pc, #628]	; (2208 <bt_init+0x368>)
    1f94:	4a9d      	ldr	r2, [pc, #628]	; (220c <bt_init+0x36c>)
    1f96:	9301      	str	r3, [sp, #4]
    1f98:	4b9d      	ldr	r3, [pc, #628]	; (2210 <bt_init+0x370>)
    1f9a:	499e      	ldr	r1, [pc, #632]	; (2214 <bt_init+0x374>)
    1f9c:	9300      	str	r3, [sp, #0]
    1f9e:	489e      	ldr	r0, [pc, #632]	; (2218 <bt_init+0x378>)
    1fa0:	4b9e      	ldr	r3, [pc, #632]	; (221c <bt_init+0x37c>)
    1fa2:	f7ff fc77 	bl	1894 <printk>
		return -ENODEV;
    1fa6:	2413      	movs	r4, #19
    1fa8:	e25c      	b.n	2464 <bt_init+0x5c4>
	}

	/* Read Low Energy Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    1faa:	aa0d      	add	r2, sp, #52	; 0x34
    1fac:	2100      	movs	r1, #0
    1fae:	489c      	ldr	r0, [pc, #624]	; (2220 <bt_init+0x380>)
    1fb0:	f7ff fe00 	bl	1bb4 <bt_hci_cmd_send_sync>
    1fb4:	0007      	movs	r7, r0
				   &rsp);
	if (err) {
    1fb6:	1e04      	subs	r4, r0, #0
    1fb8:	d000      	beq.n	1fbc <bt_init+0x11c>
    1fba:	e0e1      	b.n	2180 <bt_init+0x2e0>
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    1fbc:	0028      	movs	r0, r5
    1fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1fc0:	2208      	movs	r2, #8
    1fc2:	6899      	ldr	r1, [r3, #8]
    1fc4:	3070      	adds	r0, #112	; 0x70
    1fc6:	3101      	adds	r1, #1
    1fc8:	f7fe fe41 	bl	c4e <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_le_features_complete(rsp);
	net_buf_unref(rsp);
    1fcc:	980d      	ldr	r0, [sp, #52]	; 0x34
    1fce:	f00e fad7 	bl	10580 <net_buf_unref>

#if defined(CONFIG_BLUETOOTH_CONN)
	/* Read LE Buffer Size */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    1fd2:	aa0d      	add	r2, sp, #52	; 0x34
    1fd4:	0039      	movs	r1, r7
    1fd6:	4893      	ldr	r0, [pc, #588]	; (2224 <bt_init+0x384>)
    1fd8:	f7ff fdec 	bl	1bb4 <bt_hci_cmd_send_sync>
				   NULL, &rsp);
	if (err) {
    1fdc:	1e04      	subs	r4, r0, #0
    1fde:	d000      	beq.n	1fe2 <bt_init+0x142>
    1fe0:	e0ce      	b.n	2180 <bt_init+0x2e0>
    1fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1fe4:	6899      	ldr	r1, [r3, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
	u8_t le_max_num;

	BT_DBG("status %u", rp->status);

	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    1fe6:	788b      	ldrb	r3, [r1, #2]
    1fe8:	784a      	ldrb	r2, [r1, #1]
    1fea:	021b      	lsls	r3, r3, #8
    1fec:	4313      	orrs	r3, r2
    1fee:	002a      	movs	r2, r5
    1ff0:	3280      	adds	r2, #128	; 0x80
    1ff2:	8013      	strh	r3, [r2, #0]
	if (!bt_dev.le.mtu) {
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d00a      	beq.n	200e <bt_init+0x16e>
	}

	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);

	le_max_num = min(rp->le_max_num, CONFIG_BLUETOOTH_CONN_TX_MAX);
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    1ff8:	78cb      	ldrb	r3, [r1, #3]
    1ffa:	1c19      	adds	r1, r3, #0
    1ffc:	2b02      	cmp	r3, #2
    1ffe:	d900      	bls.n	2002 <bt_init+0x162>
    2000:	2102      	movs	r1, #2
    2002:	0028      	movs	r0, r5
    2004:	b2c9      	uxtb	r1, r1
    2006:	3084      	adds	r0, #132	; 0x84
    2008:	000a      	movs	r2, r1
    200a:	f00f fc5f 	bl	118cc <k_sem_init>
				   NULL, &rsp);
	if (err) {
		return err;
	}
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    200e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2010:	f00e fab6 	bl	10580 <net_buf_unref>
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
    2014:	2320      	movs	r3, #32
    2016:	7eac      	ldrb	r4, [r5, #26]
    2018:	401c      	ands	r4, r3
    201a:	d005      	beq.n	2028 <bt_init+0x188>
			return err;
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    201c:	002b      	movs	r3, r5
    201e:	333a      	adds	r3, #58	; 0x3a
    2020:	781b      	ldrb	r3, [r3, #0]
    2022:	071b      	lsls	r3, r3, #28
    2024:	d53c      	bpl.n	20a0 <bt_init+0x200>
    2026:	e015      	b.n	2054 <bt_init+0x1b4>
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2028:	2102      	movs	r1, #2
    202a:	487f      	ldr	r0, [pc, #508]	; (2228 <bt_init+0x388>)
    202c:	f7ff fd9c 	bl	1b68 <bt_hci_cmd_create>
    2030:	1e07      	subs	r7, r0, #0
					sizeof(*cp_le));
		if (!buf) {
    2032:	d100      	bne.n	2036 <bt_init+0x196>
    2034:	e215      	b.n	2462 <bt_init+0x5c2>
			return -ENOBUFS;
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2036:	2102      	movs	r1, #2
    2038:	3008      	adds	r0, #8
    203a:	f00e fac3 	bl	105c4 <net_buf_simple_add>

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    203e:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2040:	7044      	strb	r4, [r0, #1]
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    2042:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2044:	0022      	movs	r2, r4
    2046:	0039      	movs	r1, r7
    2048:	4877      	ldr	r0, [pc, #476]	; (2228 <bt_init+0x388>)
    204a:	f7ff fdb3 	bl	1bb4 <bt_hci_cmd_send_sync>
					   NULL);
		if (err) {
    204e:	2800      	cmp	r0, #0
    2050:	d0e4      	beq.n	201c <bt_init+0x17c>
    2052:	e094      	b.n	217e <bt_init+0x2de>
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2054:	aa0d      	add	r2, sp, #52	; 0x34
    2056:	2100      	movs	r1, #0
    2058:	4874      	ldr	r0, [pc, #464]	; (222c <bt_init+0x38c>)
    205a:	f7ff fdab 	bl	1bb4 <bt_hci_cmd_send_sync>
					   &rsp);
		if (err) {
    205e:	1e04      	subs	r4, r0, #0
    2060:	d000      	beq.n	2064 <bt_init+0x1c4>
    2062:	e08d      	b.n	2180 <bt_init+0x2e0>
			return err;
		}
		le_read_supp_states_complete(rsp);
    2064:	980d      	ldr	r0, [sp, #52]	; 0x34
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2066:	6883      	ldr	r3, [r0, #8]
    2068:	1c5c      	adds	r4, r3, #1
    206a:	7859      	ldrb	r1, [r3, #1]
    206c:	789b      	ldrb	r3, [r3, #2]
    206e:	78a7      	ldrb	r7, [r4, #2]
    2070:	021b      	lsls	r3, r3, #8
    2072:	430b      	orrs	r3, r1
    2074:	043f      	lsls	r7, r7, #16
    2076:	001a      	movs	r2, r3
    2078:	003b      	movs	r3, r7
    207a:	78e7      	ldrb	r7, [r4, #3]
    207c:	4313      	orrs	r3, r2
    207e:	063f      	lsls	r7, r7, #24
    2080:	7962      	ldrb	r2, [r4, #5]
    2082:	431f      	orrs	r7, r3
    2084:	7923      	ldrb	r3, [r4, #4]
    2086:	0212      	lsls	r2, r2, #8
    2088:	431a      	orrs	r2, r3
    208a:	79a3      	ldrb	r3, [r4, #6]
    208c:	041b      	lsls	r3, r3, #16
    208e:	4313      	orrs	r3, r2
    2090:	001a      	movs	r2, r3
    2092:	79e3      	ldrb	r3, [r4, #7]
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    2094:	67af      	str	r7, [r5, #120]	; 0x78
    2096:	061b      	lsls	r3, r3, #24
    2098:	4313      	orrs	r3, r2
    209a:	67eb      	str	r3, [r5, #124]	; 0x7c
					   &rsp);
		if (err) {
			return err;
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
    209c:	f00e fa70 	bl	10580 <net_buf_unref>
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN) &&
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    20a0:	002b      	movs	r3, r5
    20a2:	3370      	adds	r3, #112	; 0x70
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN) &&
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	069b      	lsls	r3, r3, #26
    20a8:	d532      	bpl.n	2110 <bt_init+0x270>
		struct bt_hci_cp_le_write_default_data_len *cp;
		struct bt_hci_rp_le_read_max_data_len *rp;
		struct net_buf *buf, *rsp;
		u16_t tx_octets, tx_time;

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    20aa:	0032      	movs	r2, r6
    20ac:	2100      	movs	r1, #0
    20ae:	4860      	ldr	r0, [pc, #384]	; (2230 <bt_init+0x390>)
    20b0:	f7ff fd80 	bl	1bb4 <bt_hci_cmd_send_sync>
    20b4:	1e04      	subs	r4, r0, #0
					   &rsp);
		if (err) {
    20b6:	d163      	bne.n	2180 <bt_init+0x2e0>
			return err;
		}

		rp = (void *)rsp->data;
    20b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    20ba:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    20bc:	789a      	ldrb	r2, [r3, #2]
    20be:	7859      	ldrb	r1, [r3, #1]
    20c0:	0212      	lsls	r2, r2, #8
    20c2:	430a      	orrs	r2, r1
    20c4:	9206      	str	r2, [sp, #24]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    20c6:	78da      	ldrb	r2, [r3, #3]
    20c8:	791b      	ldrb	r3, [r3, #4]
    20ca:	021b      	lsls	r3, r3, #8
    20cc:	4313      	orrs	r3, r2
    20ce:	9307      	str	r3, [sp, #28]
		net_buf_unref(rsp);
    20d0:	f00e fa56 	bl	10580 <net_buf_unref>

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    20d4:	2104      	movs	r1, #4
    20d6:	4857      	ldr	r0, [pc, #348]	; (2234 <bt_init+0x394>)
    20d8:	f7ff fd46 	bl	1b68 <bt_hci_cmd_create>
    20dc:	1e07      	subs	r7, r0, #0
					sizeof(*cp));
		if (!buf) {
    20de:	d100      	bne.n	20e2 <bt_init+0x242>
    20e0:	e1bf      	b.n	2462 <bt_init+0x5c2>
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    20e2:	2104      	movs	r1, #4
    20e4:	3008      	adds	r0, #8
    20e6:	f00e fa6d 	bl	105c4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    20ea:	466b      	mov	r3, sp
    20ec:	7e1b      	ldrb	r3, [r3, #24]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    20ee:	0022      	movs	r2, r4
		if (!buf) {
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    20f0:	7003      	strb	r3, [r0, #0]
    20f2:	9b06      	ldr	r3, [sp, #24]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    20f4:	0039      	movs	r1, r7
		if (!buf) {
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    20f6:	0a1b      	lsrs	r3, r3, #8
    20f8:	7043      	strb	r3, [r0, #1]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    20fa:	466b      	mov	r3, sp
    20fc:	7f1b      	ldrb	r3, [r3, #28]
    20fe:	7083      	strb	r3, [r0, #2]
    2100:	9b07      	ldr	r3, [sp, #28]
    2102:	0a1b      	lsrs	r3, r3, #8
    2104:	70c3      	strb	r3, [r0, #3]

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2106:	484b      	ldr	r0, [pc, #300]	; (2234 <bt_init+0x394>)
    2108:	f7ff fd54 	bl	1bb4 <bt_hci_cmd_send_sync>
					   buf, NULL);
		if (err) {
    210c:	2800      	cmp	r0, #0
    210e:	d136      	bne.n	217e <bt_init+0x2de>
	struct bt_hci_cp_le_set_event_mask *cp_mask;
	struct net_buf *buf;
	u64_t mask = 0;

	/* Set LE event mask */
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2110:	2108      	movs	r1, #8
    2112:	4849      	ldr	r0, [pc, #292]	; (2238 <bt_init+0x398>)
    2114:	f7ff fd28 	bl	1b68 <bt_hci_cmd_create>
    2118:	1e04      	subs	r4, r0, #0
	if (!buf) {
    211a:	d100      	bne.n	211e <bt_init+0x27e>
    211c:	e1a1      	b.n	2462 <bt_init+0x5c2>
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    211e:	2108      	movs	r1, #8
    2120:	1840      	adds	r0, r0, r1
    2122:	f00e fa4f 	bl	105c4 <net_buf_simple_add>

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2126:	002b      	movs	r3, r5
    2128:	3370      	adds	r3, #112	; 0x70
    212a:	781a      	ldrb	r2, [r3, #0]
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    212c:	230f      	movs	r3, #15
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    212e:	0791      	lsls	r1, r2, #30
    2130:	d500      	bpl.n	2134 <bt_init+0x294>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    2132:	3320      	adds	r3, #32
		}
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2134:	0692      	lsls	r2, r2, #26
    2136:	d501      	bpl.n	213c <bt_init+0x29c>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2138:	2240      	movs	r2, #64	; 0x40
    213a:	4313      	orrs	r3, r2
		}
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    213c:	002a      	movs	r2, r5
    213e:	3271      	adds	r2, #113	; 0x71
    2140:	7811      	ldrb	r1, [r2, #0]
    2142:	2209      	movs	r2, #9
    2144:	4211      	tst	r1, r2
    2146:	d002      	beq.n	214e <bt_init+0x2ae>
		    BT_FEAT_LE_PHY_CODED(bt_dev.le.features)) {
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2148:	2280      	movs	r2, #128	; 0x80
    214a:	0112      	lsls	r2, r2, #4
    214c:	4313      	orrs	r3, r2

	/*
	 * If "LE Read Local P-256 Public Key" and "LE Generate DH Key" are
	 * supported we need to enable events generated by those commands.
	 */
	if ((bt_dev.supported_commands[34] & 0x02) &&
    214e:	002a      	movs	r2, r5
    2150:	3240      	adds	r2, #64	; 0x40
    2152:	7811      	ldrb	r1, [r2, #0]
    2154:	2206      	movs	r2, #6
    2156:	400a      	ands	r2, r1
    2158:	2a06      	cmp	r2, #6
    215a:	d102      	bne.n	2162 <bt_init+0x2c2>
	    (bt_dev.supported_commands[34] & 0x04)) {
		mask |= BT_EVT_MASK_LE_P256_PUBLIC_KEY_COMPLETE;
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    215c:	327b      	adds	r2, #123	; 0x7b
    215e:	32ff      	adds	r2, #255	; 0xff
    2160:	4313      	orrs	r3, r2
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2162:	2200      	movs	r2, #0
    2164:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2166:	0a1b      	lsrs	r3, r3, #8
    2168:	7043      	strb	r3, [r0, #1]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    216a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    216c:	70c2      	strb	r2, [r0, #3]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    216e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2170:	7142      	strb	r2, [r0, #5]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2172:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2174:	71c2      	strb	r2, [r0, #7]
	}

	sys_put_le64(mask, cp_mask->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2176:	0021      	movs	r1, r4
    2178:	482f      	ldr	r0, [pc, #188]	; (2238 <bt_init+0x398>)
    217a:	f7ff fd1b 	bl	1bb4 <bt_hci_cmd_send_sync>
		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
		cp_le->simul = 0x00;
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
					   NULL);
		if (err) {
    217e:	0004      	movs	r4, r0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    2180:	2c00      	cmp	r4, #0
    2182:	d000      	beq.n	2186 <bt_init+0x2e6>
    2184:	e16f      	b.n	2466 <bt_init+0x5c6>
		return err;
	}

	if (BT_FEAT_BREDR(bt_dev.features)) {
    2186:	7eab      	ldrb	r3, [r5, #26]
    2188:	069b      	lsls	r3, r3, #26
    218a:	d506      	bpl.n	219a <bt_init+0x2fa>
{
	struct bt_hci_cp_set_event_mask *ev;
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    218c:	2108      	movs	r1, #8
    218e:	482b      	ldr	r0, [pc, #172]	; (223c <bt_init+0x39c>)
    2190:	f7ff fcea 	bl	1b68 <bt_hci_cmd_create>
    2194:	1e04      	subs	r4, r0, #0
	if (!buf) {
    2196:	d155      	bne.n	2244 <bt_init+0x3a4>
    2198:	e163      	b.n	2462 <bt_init+0x5c2>
{
#if defined(CONFIG_BLUETOOTH_CONN)
	struct net_buf *rsp;
	int err;

	if (bt_dev.le.mtu) {
    219a:	002f      	movs	r7, r5
    219c:	3780      	adds	r7, #128	; 0x80
    219e:	883b      	ldrh	r3, [r7, #0]
    21a0:	2b00      	cmp	r3, #0
    21a2:	d1f3      	bne.n	218c <bt_init+0x2ec>
		return 0;
	}

	/* Use BR/EDR buffer size if LE reports zero buffers */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    21a4:	0021      	movs	r1, r4
    21a6:	0032      	movs	r2, r6
    21a8:	4825      	ldr	r0, [pc, #148]	; (2240 <bt_init+0x3a0>)
    21aa:	f7ff fd03 	bl	1bb4 <bt_hci_cmd_send_sync>
	if (err) {
    21ae:	1e04      	subs	r4, r0, #0
    21b0:	d000      	beq.n	21b4 <bt_init+0x314>
    21b2:	e158      	b.n	2466 <bt_init+0x5c6>
	u16_t pkts;

	BT_DBG("status %u", rp->status);

	/* If LE-side has buffers we can ignore the BR/EDR values */
	if (bt_dev.le.mtu) {
    21b4:	883b      	ldrh	r3, [r7, #0]
    21b6:	2b00      	cmp	r3, #0
    21b8:	d114      	bne.n	21e4 <bt_init+0x344>
    21ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    21bc:	689b      	ldr	r3, [r3, #8]
		return;
	}

	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    21be:	789a      	ldrb	r2, [r3, #2]
    21c0:	7859      	ldrb	r1, [r3, #1]
    21c2:	0212      	lsls	r2, r2, #8
    21c4:	430a      	orrs	r2, r1
    21c6:	803a      	strh	r2, [r7, #0]
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    21c8:	791a      	ldrb	r2, [r3, #4]
    21ca:	795b      	ldrb	r3, [r3, #5]
    21cc:	021b      	lsls	r3, r3, #8
    21ce:	4313      	orrs	r3, r2

	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);

	pkts = min(pkts, CONFIG_BLUETOOTH_CONN_TX_MAX);

	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    21d0:	1c19      	adds	r1, r3, #0
    21d2:	2b02      	cmp	r3, #2
    21d4:	d900      	bls.n	21d8 <bt_init+0x338>
    21d6:	2102      	movs	r1, #2
    21d8:	0028      	movs	r0, r5
    21da:	b289      	uxth	r1, r1
    21dc:	3084      	adds	r0, #132	; 0x84
    21de:	000a      	movs	r2, r1
    21e0:	f00f fb74 	bl	118cc <k_sem_init>
	if (err) {
		return err;
	}

	read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    21e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    21e6:	f00e f9cb 	bl	10580 <net_buf_unref>
    21ea:	e7cf      	b.n	218c <bt_init+0x2ec>
    21ec:	00000c03 	.word	0x00000c03
    21f0:	20000198 	.word	0x20000198
    21f4:	20000934 	.word	0x20000934
    21f8:	00001003 	.word	0x00001003
    21fc:	00001001 	.word	0x00001001
    2200:	00001009 	.word	0x00001009
    2204:	00001002 	.word	0x00001002
    2208:	0001241d 	.word	0x0001241d
    220c:	0001246d 	.word	0x0001246d
    2210:	000124a8 	.word	0x000124a8
    2214:	000123e3 	.word	0x000123e3
    2218:	00012474 	.word	0x00012474
    221c:	00014337 	.word	0x00014337
    2220:	00002003 	.word	0x00002003
    2224:	00002002 	.word	0x00002002
    2228:	00000c6d 	.word	0x00000c6d
    222c:	0000201c 	.word	0x0000201c
    2230:	0000202f 	.word	0x0000202f
    2234:	00002024 	.word	0x00002024
    2238:	00002001 	.word	0x00002001
    223c:	00000c01 	.word	0x00000c01
    2240:	00001005 	.word	0x00001005
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
	}

	ev = net_buf_add(buf, sizeof(*ev));
    2244:	2108      	movs	r1, #8
    2246:	3008      	adds	r0, #8
    2248:	f00e f9bc 	bl	105c4 <net_buf_simple_add>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    224c:	2310      	movs	r3, #16
    224e:	2200      	movs	r2, #0
    2250:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2252:	3378      	adds	r3, #120	; 0x78
    2254:	7043      	strb	r3, [r0, #1]
    2256:	3b86      	subs	r3, #134	; 0x86
    2258:	70c3      	strb	r3, [r0, #3]
    225a:	331e      	adds	r3, #30
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    225c:	7082      	strb	r2, [r0, #2]
    225e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2260:	7142      	strb	r2, [r0, #5]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2262:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2264:	71c3      	strb	r3, [r0, #7]
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
	}

	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2266:	0021      	movs	r1, r4
    2268:	4880      	ldr	r0, [pc, #512]	; (246c <bt_init+0x5cc>)
    226a:	f7ff fca3 	bl	1bb4 <bt_hci_cmd_send_sync>
    226e:	1e04      	subs	r4, r0, #0
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    2270:	d000      	beq.n	2274 <bt_init+0x3d4>
    2272:	e0f8      	b.n	2466 <bt_init+0x5c6>
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2274:	0001      	movs	r1, r0
    2276:	2207      	movs	r2, #7
    2278:	a80b      	add	r0, sp, #44	; 0x2c
    227a:	f7fe fd12 	bl	ca2 <memset>
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    227e:	2207      	movs	r2, #7
    2280:	a90b      	add	r1, sp, #44	; 0x2c
    2282:	0028      	movs	r0, r5
    2284:	f7fe fcce 	bl	c24 <memcmp>
    2288:	2800      	cmp	r0, #0
    228a:	d105      	bne.n	2298 <bt_init+0x3f8>

static int set_static_addr(void)
{
	int err;

	if (bt_storage) {
    228c:	4b78      	ldr	r3, [pc, #480]	; (2470 <bt_init+0x5d0>)
    228e:	4f79      	ldr	r7, [pc, #484]	; (2474 <bt_init+0x5d4>)
    2290:	681b      	ldr	r3, [r3, #0]
    2292:	2b00      	cmp	r3, #0
    2294:	d10e      	bne.n	22b4 <bt_init+0x414>
    2296:	e015      	b.n	22c4 <bt_init+0x424>
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2298:	4977      	ldr	r1, [pc, #476]	; (2478 <bt_init+0x5d8>)
    229a:	2207      	movs	r2, #7
    229c:	3128      	adds	r1, #40	; 0x28
    229e:	a809      	add	r0, sp, #36	; 0x24
    22a0:	f7fe fcd5 	bl	c4e <memcpy>
    22a4:	2207      	movs	r2, #7
    22a6:	a909      	add	r1, sp, #36	; 0x24
    22a8:	0028      	movs	r0, r5
    22aa:	f7fe fcbb 	bl	c24 <memcmp>
	err = set_event_mask();
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    22ae:	2800      	cmp	r0, #0
    22b0:	d0ec      	beq.n	228c <bt_init+0x3ec>
    22b2:	e06d      	b.n	2390 <bt_init+0x4f0>
	int err;

	if (bt_storage) {
		ssize_t ret;

		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    22b4:	2100      	movs	r1, #0
    22b6:	681c      	ldr	r4, [r3, #0]
    22b8:	002a      	movs	r2, r5
    22ba:	2307      	movs	r3, #7
    22bc:	0008      	movs	r0, r1
    22be:	47a0      	blx	r4
				       &bt_dev.id_addr, sizeof(bt_dev.id_addr));
		if (ret == sizeof(bt_dev.id_addr)) {
    22c0:	2807      	cmp	r0, #7
    22c2:	d046      	beq.n	2352 <bt_init+0x4b2>
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    22c4:	4b6d      	ldr	r3, [pc, #436]	; (247c <bt_init+0x5dc>)
    22c6:	6819      	ldr	r1, [r3, #0]
    22c8:	001a      	movs	r2, r3
    22ca:	1c4b      	adds	r3, r1, #1
    22cc:	d105      	bne.n	22da <bt_init+0x43a>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    22ce:	4b6c      	ldr	r3, [pc, #432]	; (2480 <bt_init+0x5e0>)
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    22d0:	496c      	ldr	r1, [pc, #432]	; (2484 <bt_init+0x5e4>)
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    22d2:	681b      	ldr	r3, [r3, #0]
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    22d4:	b29b      	uxth	r3, r3
    22d6:	428b      	cmp	r3, r1
    22d8:	d017      	beq.n	230a <bt_init+0x46a>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    22da:	4b6b      	ldr	r3, [pc, #428]	; (2488 <bt_init+0x5e8>)
    22dc:	6819      	ldr	r1, [r3, #0]
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    22de:	2301      	movs	r3, #1
    22e0:	4219      	tst	r1, r3
    22e2:	d012      	beq.n	230a <bt_init+0x46a>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    22e4:	702b      	strb	r3, [r5, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
    22e6:	6813      	ldr	r3, [r2, #0]
    22e8:	0a1a      	lsrs	r2, r3, #8
    22ea:	70aa      	strb	r2, [r5, #2]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    22ec:	2240      	movs	r2, #64	; 0x40
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    22ee:	706b      	strb	r3, [r5, #1]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    22f0:	0c1b      	lsrs	r3, r3, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    22f2:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    22f4:	0a1b      	lsrs	r3, r3, #8
    22f6:	712b      	strb	r3, [r5, #4]
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    22f8:	4b61      	ldr	r3, [pc, #388]	; (2480 <bt_init+0x5e0>)
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    22fa:	4252      	negs	r2, r2
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    22fc:	681b      	ldr	r3, [r3, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    22fe:	716b      	strb	r3, [r5, #5]
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    2300:	b29b      	uxth	r3, r3
    2302:	0a1b      	lsrs	r3, r3, #8
    2304:	4313      	orrs	r3, r2
    2306:	71ab      	strb	r3, [r5, #6]
    2308:	e023      	b.n	2352 <bt_init+0x4b2>
	}
#endif /* CONFIG_SOC_FAMILY_NRF5 */

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
    230a:	0028      	movs	r0, r5
    230c:	f7ff fdb8 	bl	1e80 <bt_addr_le_create_static>
	if (err) {
    2310:	2800      	cmp	r0, #0
    2312:	d000      	beq.n	2316 <bt_init+0x476>
    2314:	e099      	b.n	244a <bt_init+0x5aa>
		return err;
	}

	if (bt_storage) {
    2316:	4b56      	ldr	r3, [pc, #344]	; (2470 <bt_init+0x5d0>)
    2318:	681b      	ldr	r3, [r3, #0]
    231a:	2b00      	cmp	r3, #0
    231c:	d00f      	beq.n	233e <bt_init+0x49e>
		ssize_t ret;

		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    231e:	685c      	ldr	r4, [r3, #4]
    2320:	002a      	movs	r2, r5
    2322:	2307      	movs	r3, #7
    2324:	0001      	movs	r1, r0
    2326:	47a0      	blx	r4
					&bt_dev.id_addr,
					sizeof(bt_dev.id_addr));
		if (ret != sizeof(bt_dev.id_addr)) {
    2328:	2807      	cmp	r0, #7
    232a:	d012      	beq.n	2352 <bt_init+0x4b2>
			BT_ERR("Unable to store static address");
    232c:	4b57      	ldr	r3, [pc, #348]	; (248c <bt_init+0x5ec>)
    232e:	4a58      	ldr	r2, [pc, #352]	; (2490 <bt_init+0x5f0>)
    2330:	9301      	str	r3, [sp, #4]
    2332:	4b58      	ldr	r3, [pc, #352]	; (2494 <bt_init+0x5f4>)
    2334:	0039      	movs	r1, r7
    2336:	9300      	str	r3, [sp, #0]
    2338:	4857      	ldr	r0, [pc, #348]	; (2498 <bt_init+0x5f8>)
    233a:	4b58      	ldr	r3, [pc, #352]	; (249c <bt_init+0x5fc>)
    233c:	e007      	b.n	234e <bt_init+0x4ae>
		}
	} else {
		BT_WARN("Using temporary static random address");
    233e:	0039      	movs	r1, r7
    2340:	4b52      	ldr	r3, [pc, #328]	; (248c <bt_init+0x5ec>)
    2342:	4a57      	ldr	r2, [pc, #348]	; (24a0 <bt_init+0x600>)
    2344:	9301      	str	r3, [sp, #4]
    2346:	4b57      	ldr	r3, [pc, #348]	; (24a4 <bt_init+0x604>)
    2348:	4857      	ldr	r0, [pc, #348]	; (24a8 <bt_init+0x608>)
    234a:	9300      	str	r3, [sp, #0]
    234c:	4b53      	ldr	r3, [pc, #332]	; (249c <bt_init+0x5fc>)
    234e:	f7ff faa1 	bl	1894 <printk>
	}

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2352:	782b      	ldrb	r3, [r5, #0]
    2354:	2b01      	cmp	r3, #1
    2356:	d104      	bne.n	2362 <bt_init+0x4c2>
    2358:	223f      	movs	r2, #63	; 0x3f
    235a:	79ab      	ldrb	r3, [r5, #6]
    235c:	4393      	bics	r3, r2
    235e:	2bc0      	cmp	r3, #192	; 0xc0
    2360:	d00c      	beq.n	237c <bt_init+0x4dc>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
    2362:	2416      	movs	r4, #22
	}

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
    2364:	4b49      	ldr	r3, [pc, #292]	; (248c <bt_init+0x5ec>)
    2366:	4a4a      	ldr	r2, [pc, #296]	; (2490 <bt_init+0x5f0>)
    2368:	9301      	str	r3, [sp, #4]
    236a:	4b4a      	ldr	r3, [pc, #296]	; (2494 <bt_init+0x5f4>)
    236c:	0039      	movs	r1, r7
    236e:	9300      	str	r3, [sp, #0]
    2370:	484e      	ldr	r0, [pc, #312]	; (24ac <bt_init+0x60c>)
    2372:	4b4a      	ldr	r3, [pc, #296]	; (249c <bt_init+0x5fc>)
    2374:	f7ff fa8e 	bl	1894 <printk>
		return -EINVAL;
    2378:	4264      	negs	r4, r4
    237a:	e067      	b.n	244c <bt_init+0x5ac>
	}

	err = set_random_address(&bt_dev.id_addr.a);
    237c:	1c68      	adds	r0, r5, #1
    237e:	f7ff fc55 	bl	1c2c <set_random_address>
	if (err) {
    2382:	1e04      	subs	r4, r0, #0
    2384:	d162      	bne.n	244c <bt_init+0x5ac>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2386:	0028      	movs	r0, r5
    2388:	2104      	movs	r1, #4
    238a:	306c      	adds	r0, #108	; 0x6c
    238c:	f00e fbeb 	bl	10b66 <atomic_or>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    2390:	782b      	ldrb	r3, [r5, #0]
    2392:	2b00      	cmp	r3, #0
    2394:	d003      	beq.n	239e <bt_init+0x4fe>
    2396:	2b01      	cmp	r3, #1
    2398:	d106      	bne.n	23a8 <bt_init+0x508>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    239a:	4945      	ldr	r1, [pc, #276]	; (24b0 <bt_init+0x610>)
    239c:	e000      	b.n	23a0 <bt_init+0x500>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    239e:	4945      	ldr	r1, [pc, #276]	; (24b4 <bt_init+0x614>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    23a0:	a80d      	add	r0, sp, #52	; 0x34
    23a2:	f7fe fc21 	bl	be8 <strcpy>
    23a6:	e004      	b.n	23b2 <bt_init+0x512>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    23a8:	4a43      	ldr	r2, [pc, #268]	; (24b8 <bt_init+0x618>)
    23aa:	2107      	movs	r1, #7
    23ac:	a80d      	add	r0, sp, #52	; 0x34
    23ae:	f7ff fa7d 	bl	18ac <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    23b2:	aa0d      	add	r2, sp, #52	; 0x34
    23b4:	79ab      	ldrb	r3, [r5, #6]
    23b6:	9205      	str	r2, [sp, #20]
    23b8:	786a      	ldrb	r2, [r5, #1]
    23ba:	211b      	movs	r1, #27
    23bc:	9204      	str	r2, [sp, #16]
    23be:	78aa      	ldrb	r2, [r5, #2]
    23c0:	0030      	movs	r0, r6
    23c2:	9203      	str	r2, [sp, #12]
    23c4:	78ea      	ldrb	r2, [r5, #3]
    23c6:	9202      	str	r2, [sp, #8]
    23c8:	792a      	ldrb	r2, [r5, #4]
    23ca:	9201      	str	r2, [sp, #4]
    23cc:	796a      	ldrb	r2, [r5, #5]
    23ce:	9200      	str	r2, [sp, #0]
    23d0:	4a3a      	ldr	r2, [pc, #232]	; (24bc <bt_init+0x61c>)
    23d2:	f7ff fa6b 	bl	18ac <snprintk>
{
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(&bt_dev.id_addr, addr, sizeof(addr));

	BT_INFO("Identity: %s", addr);
    23d6:	4c3a      	ldr	r4, [pc, #232]	; (24c0 <bt_init+0x620>)
    23d8:	4f3a      	ldr	r7, [pc, #232]	; (24c4 <bt_init+0x624>)
    23da:	4a3b      	ldr	r2, [pc, #236]	; (24c8 <bt_init+0x628>)
    23dc:	003b      	movs	r3, r7
    23de:	4925      	ldr	r1, [pc, #148]	; (2474 <bt_init+0x5d4>)
    23e0:	9402      	str	r4, [sp, #8]
    23e2:	9601      	str	r6, [sp, #4]
    23e4:	9400      	str	r4, [sp, #0]
    23e6:	4839      	ldr	r0, [pc, #228]	; (24cc <bt_init+0x62c>)
    23e8:	f7ff fa54 	bl	1894 <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    23ec:	7bae      	ldrb	r6, [r5, #14]
    23ee:	0030      	movs	r0, r6
    23f0:	f7ff fb34 	bl	1a5c <ver_str>
    23f4:	9405      	str	r4, [sp, #20]
    23f6:	8aab      	ldrh	r3, [r5, #20]
    23f8:	4a33      	ldr	r2, [pc, #204]	; (24c8 <bt_init+0x628>)
    23fa:	9304      	str	r3, [sp, #16]
    23fc:	8a2b      	ldrh	r3, [r5, #16]
    23fe:	491d      	ldr	r1, [pc, #116]	; (2474 <bt_init+0x5d4>)
    2400:	9303      	str	r3, [sp, #12]
    2402:	9602      	str	r6, [sp, #8]
    2404:	003b      	movs	r3, r7
    2406:	9001      	str	r0, [sp, #4]
    2408:	9400      	str	r4, [sp, #0]
    240a:	4831      	ldr	r0, [pc, #196]	; (24d0 <bt_init+0x630>)
    240c:	f7ff fa42 	bl	1894 <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2410:	7bee      	ldrb	r6, [r5, #15]
    2412:	0030      	movs	r0, r6
    2414:	f7ff fb22 	bl	1a5c <ver_str>
    2418:	9404      	str	r4, [sp, #16]
    241a:	8a6b      	ldrh	r3, [r5, #18]
    241c:	4a2a      	ldr	r2, [pc, #168]	; (24c8 <bt_init+0x628>)
    241e:	9303      	str	r3, [sp, #12]
    2420:	9001      	str	r0, [sp, #4]
    2422:	9400      	str	r4, [sp, #0]
    2424:	003b      	movs	r3, r7
    2426:	4913      	ldr	r1, [pc, #76]	; (2474 <bt_init+0x5d4>)
    2428:	9602      	str	r6, [sp, #8]
    242a:	482a      	ldr	r0, [pc, #168]	; (24d4 <bt_init+0x634>)
    242c:	f7ff fa32 	bl	1894 <printk>
	if (err) {
		return err;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		err = bt_conn_init();
    2430:	f001 fdb0 	bl	3f94 <bt_conn_init>
    2434:	1e04      	subs	r4, r0, #0
		if (err) {
    2436:	d116      	bne.n	2466 <bt_init+0x5c6>
    2438:	0028      	movs	r0, r5
    243a:	2102      	movs	r1, #2
    243c:	306c      	adds	r0, #108	; 0x6c
    243e:	f00e fb92 	bl	10b66 <atomic_or>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);
    2442:	0020      	movs	r0, r4
    2444:	f7ff fd06 	bl	1e54 <bt_le_scan_update>
    2448:	e00d      	b.n	2466 <bt_init+0x5c6>
#endif /* CONFIG_SOC_FAMILY_NRF5 */

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
	if (err) {
    244a:	0004      	movs	r4, r0
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
		BT_DBG("No public address. Trying to set static random.");
		err = set_static_addr();
		if (err) {
			BT_ERR("Unable to set identity address");
    244c:	4b0f      	ldr	r3, [pc, #60]	; (248c <bt_init+0x5ec>)
    244e:	4a10      	ldr	r2, [pc, #64]	; (2490 <bt_init+0x5f0>)
    2450:	9301      	str	r3, [sp, #4]
    2452:	4b10      	ldr	r3, [pc, #64]	; (2494 <bt_init+0x5f4>)
    2454:	0039      	movs	r1, r7
    2456:	9300      	str	r3, [sp, #0]
    2458:	481f      	ldr	r0, [pc, #124]	; (24d8 <bt_init+0x638>)
    245a:	4b20      	ldr	r3, [pc, #128]	; (24dc <bt_init+0x63c>)
    245c:	f7ff fa1a 	bl	1894 <printk>
    2460:	e001      	b.n	2466 <bt_init+0x5c6>
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
    2462:	2437      	movs	r4, #55	; 0x37
    2464:	4264      	negs	r4, r4
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    2466:	0020      	movs	r0, r4
    2468:	b017      	add	sp, #92	; 0x5c
    246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    246c:	00000c01 	.word	0x00000c01
    2470:	20001bf4 	.word	0x20001bf4
    2474:	000123e3 	.word	0x000123e3
    2478:	00012040 	.word	0x00012040
    247c:	100000a4 	.word	0x100000a4
    2480:	100000a8 	.word	0x100000a8
    2484:	0000ffff 	.word	0x0000ffff
    2488:	100000a0 	.word	0x100000a0
    248c:	0001241d 	.word	0x0001241d
    2490:	0001246d 	.word	0x0001246d
    2494:	000124a8 	.word	0x000124a8
    2498:	000124b0 	.word	0x000124b0
    249c:	000143f0 	.word	0x000143f0
    24a0:	000123dc 	.word	0x000123dc
    24a4:	00012422 	.word	0x00012422
    24a8:	000124df 	.word	0x000124df
    24ac:	00012515 	.word	0x00012515
    24b0:	00012386 	.word	0x00012386
    24b4:	0001237f 	.word	0x0001237f
    24b8:	0001238d 	.word	0x0001238d
    24bc:	00012394 	.word	0x00012394
    24c0:	00012200 	.word	0x00012200
    24c4:	0001433f 	.word	0x0001433f
    24c8:	00012556 	.word	0x00012556
    24cc:	0001255d 	.word	0x0001255d
    24d0:	0001257a 	.word	0x0001257a
    24d4:	000125c8 	.word	0x000125c8
    24d8:	000125ff 	.word	0x000125ff
    24dc:	00014355 	.word	0x00014355

000024e0 <init_work>:

static void init_work(struct k_work *work)
{
    24e0:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    24e2:	f7ff fcdd 	bl	1ea0 <bt_init>
	if (ready_cb) {
    24e6:	4b03      	ldr	r3, [pc, #12]	; (24f4 <init_work+0x14>)
    24e8:	681b      	ldr	r3, [r3, #0]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d000      	beq.n	24f0 <init_work+0x10>
		ready_cb(err);
    24ee:	4798      	blx	r3
	}
}
    24f0:	bd10      	pop	{r4, pc}
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	200008f0 	.word	0x200008f0

000024f8 <bt_send>:

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    24f8:	4b03      	ldr	r3, [pc, #12]	; (2508 <bt_send+0x10>)

	return 0;
}

int bt_send(struct net_buf *buf)
{
    24fa:	b510      	push	{r4, lr}

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    24fc:	33d8      	adds	r3, #216	; 0xd8
    24fe:	681b      	ldr	r3, [r3, #0]
    2500:	68db      	ldr	r3, [r3, #12]
    2502:	4798      	blx	r3
}
    2504:	bd10      	pop	{r4, pc}
    2506:	46c0      	nop			; (mov r8, r8)
    2508:	20000198 	.word	0x20000198

0000250c <bt_hci_cmd_send>:

	return buf;
}

int bt_hci_cmd_send(u16_t opcode, struct net_buf *buf)
{
    250c:	b530      	push	{r4, r5, lr}
    250e:	0005      	movs	r5, r0
    2510:	b085      	sub	sp, #20
    2512:	1e0c      	subs	r4, r1, #0
	if (!buf) {
    2514:	d103      	bne.n	251e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    2516:	f7ff fb27 	bl	1b68 <bt_hci_cmd_create>
    251a:	1e04      	subs	r4, r0, #0
		if (!buf) {
    251c:	d020      	beq.n	2560 <bt_hci_cmd_send+0x54>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);

	/* Host Number of Completed Packets can ignore the ncmd value
	 * and does not generate any cmd complete/status events.
	 */
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    251e:	4b12      	ldr	r3, [pc, #72]	; (2568 <bt_hci_cmd_send+0x5c>)
    2520:	429d      	cmp	r5, r3
    2522:	d116      	bne.n	2552 <bt_hci_cmd_send+0x46>
		int err;

		err = bt_send(buf);
    2524:	0020      	movs	r0, r4
    2526:	f7ff ffe7 	bl	24f8 <bt_send>
    252a:	0005      	movs	r5, r0
    252c:	2000      	movs	r0, #0
		if (err) {
    252e:	4285      	cmp	r5, r0
    2530:	d018      	beq.n	2564 <bt_hci_cmd_send+0x58>
			BT_ERR("Unable to send to driver (err %d)", err);
    2532:	4b0e      	ldr	r3, [pc, #56]	; (256c <bt_hci_cmd_send+0x60>)
    2534:	4a0e      	ldr	r2, [pc, #56]	; (2570 <bt_hci_cmd_send+0x64>)
    2536:	9302      	str	r3, [sp, #8]
    2538:	4b0e      	ldr	r3, [pc, #56]	; (2574 <bt_hci_cmd_send+0x68>)
    253a:	490f      	ldr	r1, [pc, #60]	; (2578 <bt_hci_cmd_send+0x6c>)
    253c:	9300      	str	r3, [sp, #0]
    253e:	9501      	str	r5, [sp, #4]
    2540:	4b0e      	ldr	r3, [pc, #56]	; (257c <bt_hci_cmd_send+0x70>)
    2542:	480f      	ldr	r0, [pc, #60]	; (2580 <bt_hci_cmd_send+0x74>)
    2544:	f7ff f9a6 	bl	1894 <printk>
			net_buf_unref(buf);
    2548:	0020      	movs	r0, r4
    254a:	f00e f819 	bl	10580 <net_buf_unref>
    254e:	0028      	movs	r0, r5
    2550:	e008      	b.n	2564 <bt_hci_cmd_send+0x58>
		}

		return err;
	}

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2552:	480c      	ldr	r0, [pc, #48]	; (2584 <bt_hci_cmd_send+0x78>)
    2554:	0021      	movs	r1, r4
    2556:	30c4      	adds	r0, #196	; 0xc4
    2558:	f00e f803 	bl	10562 <net_buf_put>

	return 0;
    255c:	2000      	movs	r0, #0
    255e:	e001      	b.n	2564 <bt_hci_cmd_send+0x58>
int bt_hci_cmd_send(u16_t opcode, struct net_buf *buf)
{
	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    2560:	2037      	movs	r0, #55	; 0x37
    2562:	4240      	negs	r0, r0
	}

	net_buf_put(&bt_dev.cmd_tx_queue, buf);

	return 0;
}
    2564:	b005      	add	sp, #20
    2566:	bd30      	pop	{r4, r5, pc}
    2568:	00000c35 	.word	0x00000c35
    256c:	0001241d 	.word	0x0001241d
    2570:	0001246d 	.word	0x0001246d
    2574:	000124a8 	.word	0x000124a8
    2578:	000123e3 	.word	0x000123e3
    257c:	00014437 	.word	0x00014437
    2580:	0001262e 	.word	0x0001262e
    2584:	20000198 	.word	0x20000198

00002588 <hci_le_set_phy.isra.23>:
	}

	return 0;
}

static int hci_le_set_phy(struct bt_conn *conn)
    2588:	b570      	push	{r4, r5, r6, lr}
{
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    258a:	2107      	movs	r1, #7
	}

	return 0;
}

static int hci_le_set_phy(struct bt_conn *conn)
    258c:	0004      	movs	r4, r0
{
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    258e:	480e      	ldr	r0, [pc, #56]	; (25c8 <hci_le_set_phy.isra.23+0x40>)
    2590:	f7ff faea 	bl	1b68 <bt_hci_cmd_create>
    2594:	1e05      	subs	r5, r0, #0
	if (!buf) {
    2596:	d014      	beq.n	25c2 <hci_le_set_phy.isra.23+0x3a>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2598:	2107      	movs	r1, #7
    259a:	3008      	adds	r0, #8
    259c:	f00e f812 	bl	105c4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    25a0:	8823      	ldrh	r3, [r4, #0]
    25a2:	2400      	movs	r4, #0
    25a4:	7003      	strb	r3, [r0, #0]
    25a6:	0a1b      	lsrs	r3, r3, #8
    25a8:	7043      	strb	r3, [r0, #1]
	cp->all_phys = 0;
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    25aa:	2302      	movs	r3, #2
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
	cp->all_phys = 0;
    25ac:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    25ae:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    25b0:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    25b2:	7144      	strb	r4, [r0, #5]
    25b4:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    25b6:	0029      	movs	r1, r5
    25b8:	4803      	ldr	r0, [pc, #12]	; (25c8 <hci_le_set_phy.isra.23+0x40>)
    25ba:	f7ff ffa7 	bl	250c <bt_hci_cmd_send>

	return 0;
    25be:	0020      	movs	r0, r4
    25c0:	e001      	b.n	25c6 <hci_le_set_phy.isra.23+0x3e>
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    25c2:	2037      	movs	r0, #55	; 0x37
    25c4:	4240      	negs	r0, r0
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);

	return 0;
}
    25c6:	bd70      	pop	{r4, r5, r6, pc}
    25c8:	00002032 	.word	0x00002032

000025cc <hci_le_set_data_len.isra.24>:
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);

	return 0;
}

static int hci_le_set_data_len(struct bt_conn *conn)
    25cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    25ce:	0007      	movs	r7, r0
	struct bt_hci_cp_le_set_data_len *cp;
	struct net_buf *buf, *rsp;
	u16_t tx_octets, tx_time;
	int err;

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    25d0:	aa01      	add	r2, sp, #4
    25d2:	2100      	movs	r1, #0
    25d4:	4816      	ldr	r0, [pc, #88]	; (2630 <hci_le_set_data_len.isra.24+0x64>)
    25d6:	f7ff faed 	bl	1bb4 <bt_hci_cmd_send_sync>
	if (err) {
    25da:	2800      	cmp	r0, #0
    25dc:	d126      	bne.n	262c <hci_le_set_data_len.isra.24+0x60>
		return err;
	}

	rp = (void *)rsp->data;
    25de:	9801      	ldr	r0, [sp, #4]
    25e0:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    25e2:	789d      	ldrb	r5, [r3, #2]
    25e4:	785a      	ldrb	r2, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    25e6:	791c      	ldrb	r4, [r3, #4]
	if (err) {
		return err;
	}

	rp = (void *)rsp->data;
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    25e8:	022d      	lsls	r5, r5, #8
    25ea:	4315      	orrs	r5, r2
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    25ec:	78da      	ldrb	r2, [r3, #3]
    25ee:	0224      	lsls	r4, r4, #8
    25f0:	4314      	orrs	r4, r2
	net_buf_unref(rsp);
    25f2:	f00d ffc5 	bl	10580 <net_buf_unref>

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    25f6:	2106      	movs	r1, #6
    25f8:	480e      	ldr	r0, [pc, #56]	; (2634 <hci_le_set_data_len.isra.24+0x68>)
    25fa:	f7ff fab5 	bl	1b68 <bt_hci_cmd_create>
    25fe:	1e06      	subs	r6, r0, #0
	if (!buf) {
    2600:	d012      	beq.n	2628 <hci_le_set_data_len.isra.24+0x5c>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2602:	2106      	movs	r1, #6
    2604:	3008      	adds	r0, #8
    2606:	f00d ffdd 	bl	105c4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    260a:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    260c:	7085      	strb	r5, [r0, #2]
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    260e:	7003      	strb	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2610:	0a2d      	lsrs	r5, r5, #8
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    2612:	0a1b      	lsrs	r3, r3, #8
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2614:	7104      	strb	r4, [r0, #4]
    2616:	0a24      	lsrs	r4, r4, #8
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    2618:	7043      	strb	r3, [r0, #1]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    261a:	70c5      	strb	r5, [r0, #3]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    261c:	7144      	strb	r4, [r0, #5]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    261e:	0031      	movs	r1, r6
    2620:	4804      	ldr	r0, [pc, #16]	; (2634 <hci_le_set_data_len.isra.24+0x68>)
    2622:	f7ff ff73 	bl	250c <bt_hci_cmd_send>
    2626:	e001      	b.n	262c <hci_le_set_data_len.isra.24+0x60>
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
	net_buf_unref(rsp);

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    2628:	2037      	movs	r0, #55	; 0x37
    262a:	4240      	negs	r0, r0
	if (err) {
		return err;
	}

	return 0;
}
    262c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	0000202f 	.word	0x0000202f
    2634:	00002022 	.word	0x00002022

00002638 <le_conn_param_neg_reply>:

	return true;
}

static int le_conn_param_neg_reply(u16_t handle, u8_t reason)
{
    2638:	b570      	push	{r4, r5, r6, lr}
    263a:	0004      	movs	r4, r0
    263c:	000e      	movs	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    263e:	480b      	ldr	r0, [pc, #44]	; (266c <le_conn_param_neg_reply+0x34>)
    2640:	2103      	movs	r1, #3
    2642:	f7ff fa91 	bl	1b68 <bt_hci_cmd_create>
    2646:	1e05      	subs	r5, r0, #0
				sizeof(*cp));
	if (!buf) {
    2648:	d00c      	beq.n	2664 <le_conn_param_neg_reply+0x2c>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    264a:	2103      	movs	r1, #3
    264c:	3008      	adds	r0, #8
    264e:	f00d ffb9 	bl	105c4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    2652:	7004      	strb	r4, [r0, #0]
    2654:	0a24      	lsrs	r4, r4, #8
    2656:	7044      	strb	r4, [r0, #1]
	cp->reason = sys_cpu_to_le16(reason);
    2658:	7086      	strb	r6, [r0, #2]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    265a:	0029      	movs	r1, r5
    265c:	4803      	ldr	r0, [pc, #12]	; (266c <le_conn_param_neg_reply+0x34>)
    265e:	f7ff ff55 	bl	250c <bt_hci_cmd_send>
    2662:	e001      	b.n	2668 <le_conn_param_neg_reply+0x30>
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    2664:	2037      	movs	r0, #55	; 0x37
    2666:	4240      	negs	r0, r0
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
    2668:	bd70      	pop	{r4, r5, r6, pc}
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	00002021 	.word	0x00002021

00002670 <hci_tx_thread>:
/* command FIFO */
#define EV_COUNT 1
#endif

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
    2670:	b5f0      	push	{r4, r5, r6, r7, lr}
    2672:	b087      	sub	sp, #28
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    2674:	4c53      	ldr	r4, [pc, #332]	; (27c4 <hci_tx_thread+0x154>)
    2676:	4b54      	ldr	r3, [pc, #336]	; (27c8 <hci_tx_thread+0x158>)
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2678:	0020      	movs	r0, r4
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    267a:	6862      	ldr	r2, [r4, #4]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    267c:	300c      	adds	r0, #12
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    267e:	4013      	ands	r3, r2
    2680:	6063      	str	r3, [r4, #4]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2682:	f001 f9b3 	bl	39ec <bt_conn_prepare_events>
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    2686:	2201      	movs	r2, #1

		events[0].state = K_POLL_STATE_NOT_READY;
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2688:	1c43      	adds	r3, r0, #1
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    268a:	4252      	negs	r2, r2
    268c:	0019      	movs	r1, r3
    268e:	0020      	movs	r0, r4

		events[0].state = K_POLL_STATE_NOT_READY;
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2690:	9305      	str	r3, [sp, #20]
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    2692:	f00e fd13 	bl	110bc <k_poll>
		BT_ASSERT(err == 0);
    2696:	2800      	cmp	r0, #0
    2698:	d101      	bne.n	269e <hci_tx_thread+0x2e>
    269a:	3408      	adds	r4, #8
    269c:	e04f      	b.n	273e <hci_tx_thread+0xce>
    269e:	4b4b      	ldr	r3, [pc, #300]	; (27cc <hci_tx_thread+0x15c>)
    26a0:	4a4b      	ldr	r2, [pc, #300]	; (27d0 <hci_tx_thread+0x160>)
    26a2:	9301      	str	r3, [sp, #4]
    26a4:	4b4b      	ldr	r3, [pc, #300]	; (27d4 <hci_tx_thread+0x164>)
    26a6:	494c      	ldr	r1, [pc, #304]	; (27d8 <hci_tx_thread+0x168>)
    26a8:	9300      	str	r3, [sp, #0]
    26aa:	484c      	ldr	r0, [pc, #304]	; (27dc <hci_tx_thread+0x16c>)
    26ac:	4b4c      	ldr	r3, [pc, #304]	; (27e0 <hci_tx_thread+0x170>)
    26ae:	e065      	b.n	277c <hci_tx_thread+0x10c>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);

	/* Wait until ncmd > 0 */
	BT_DBG("calling sem_take_wait");
	k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    26b0:	0028      	movs	r0, r5
    26b2:	2101      	movs	r1, #1
    26b4:	3098      	adds	r0, #152	; 0x98
    26b6:	4249      	negs	r1, r1

	/* Clear out any existing sent command */
	if (bt_dev.sent_cmd) {
    26b8:	35ac      	adds	r5, #172	; 0xac
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);

	/* Wait until ncmd > 0 */
	BT_DBG("calling sem_take_wait");
	k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    26ba:	f00f f94b 	bl	11954 <k_sem_take>

	/* Clear out any existing sent command */
	if (bt_dev.sent_cmd) {
    26be:	682b      	ldr	r3, [r5, #0]
    26c0:	2b00      	cmp	r3, #0
    26c2:	d00d      	beq.n	26e0 <hci_tx_thread+0x70>
		BT_ERR("Uncleared pending sent_cmd");
    26c4:	4b41      	ldr	r3, [pc, #260]	; (27cc <hci_tx_thread+0x15c>)
    26c6:	4a42      	ldr	r2, [pc, #264]	; (27d0 <hci_tx_thread+0x160>)
    26c8:	9301      	str	r3, [sp, #4]
    26ca:	4b42      	ldr	r3, [pc, #264]	; (27d4 <hci_tx_thread+0x164>)
    26cc:	4942      	ldr	r1, [pc, #264]	; (27d8 <hci_tx_thread+0x168>)
    26ce:	9300      	str	r3, [sp, #0]
    26d0:	4844      	ldr	r0, [pc, #272]	; (27e4 <hci_tx_thread+0x174>)
    26d2:	4b45      	ldr	r3, [pc, #276]	; (27e8 <hci_tx_thread+0x178>)
    26d4:	f7ff f8de 	bl	1894 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    26d8:	6828      	ldr	r0, [r5, #0]
    26da:	f00d ff51 	bl	10580 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    26de:	602e      	str	r6, [r5, #0]
	}

	bt_dev.sent_cmd = net_buf_ref(buf);
    26e0:	0038      	movs	r0, r7
    26e2:	f00d ff6b 	bl	105bc <net_buf_ref>
    26e6:	4e41      	ldr	r6, [pc, #260]	; (27ec <hci_tx_thread+0x17c>)
    26e8:	0035      	movs	r5, r6
    26ea:	35ac      	adds	r5, #172	; 0xac
    26ec:	6028      	str	r0, [r5, #0]

	BT_DBG("Sending command 0x%04x (buf %p) to driver",
	       cmd(buf)->opcode, buf);

	err = bt_send(buf);
    26ee:	0038      	movs	r0, r7
    26f0:	f7ff ff02 	bl	24f8 <bt_send>
	if (err) {
    26f4:	2800      	cmp	r0, #0
    26f6:	d01e      	beq.n	2736 <hci_tx_thread+0xc6>
		BT_ERR("Unable to send to driver (err %d)", err);
    26f8:	4b34      	ldr	r3, [pc, #208]	; (27cc <hci_tx_thread+0x15c>)
    26fa:	4a35      	ldr	r2, [pc, #212]	; (27d0 <hci_tx_thread+0x160>)
    26fc:	9302      	str	r3, [sp, #8]
    26fe:	4b35      	ldr	r3, [pc, #212]	; (27d4 <hci_tx_thread+0x164>)
    2700:	4935      	ldr	r1, [pc, #212]	; (27d8 <hci_tx_thread+0x168>)
    2702:	9001      	str	r0, [sp, #4]
    2704:	9300      	str	r3, [sp, #0]
    2706:	483a      	ldr	r0, [pc, #232]	; (27f0 <hci_tx_thread+0x180>)
    2708:	4b37      	ldr	r3, [pc, #220]	; (27e8 <hci_tx_thread+0x178>)
    270a:	f7ff f8c3 	bl	1894 <printk>
		k_sem_give(&bt_dev.ncmd_sem);
    270e:	0030      	movs	r0, r6
    2710:	3098      	adds	r0, #152	; 0x98
    2712:	f00f f8e3 	bl	118dc <k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2716:	0038      	movs	r0, r7
    2718:	f7ff f99a 	bl	1a50 <net_buf_user_data>
    271c:	2200      	movs	r2, #0
    271e:	8840      	ldrh	r0, [r0, #2]
    2720:	211f      	movs	r1, #31
    2722:	f7ff f9d3 	bl	1acc <hci_cmd_done>
			     NULL);
		net_buf_unref(bt_dev.sent_cmd);
    2726:	6828      	ldr	r0, [r5, #0]
    2728:	f00d ff2a 	bl	10580 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    272c:	2300      	movs	r3, #0
		net_buf_unref(buf);
    272e:	0038      	movs	r0, r7
		BT_ERR("Unable to send to driver (err %d)", err);
		k_sem_give(&bt_dev.ncmd_sem);
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
			     NULL);
		net_buf_unref(bt_dev.sent_cmd);
		bt_dev.sent_cmd = NULL;
    2730:	602b      	str	r3, [r5, #0]
		net_buf_unref(buf);
    2732:	f00d ff25 	bl	10580 <net_buf_unref>

static void process_events(struct k_poll_event *ev, int count)
{
	BT_DBG("count %d", count);

	for (; count; ev++, count--) {
    2736:	9b05      	ldr	r3, [sp, #20]
    2738:	340c      	adds	r4, #12
    273a:	3b01      	subs	r3, #1
    273c:	9305      	str	r3, [sp, #20]
    273e:	0022      	movs	r2, r4
    2740:	9b05      	ldr	r3, [sp, #20]
    2742:	3a08      	subs	r2, #8
    2744:	2b00      	cmp	r3, #0
    2746:	d03a      	beq.n	27be <hci_tx_thread+0x14e>
		BT_DBG("ev->state %u", ev->state);

		switch (ev->state) {
    2748:	6853      	ldr	r3, [r2, #4]
    274a:	03db      	lsls	r3, r3, #15
    274c:	0edb      	lsrs	r3, r3, #27
    274e:	2b02      	cmp	r3, #2
    2750:	d0f1      	beq.n	2736 <hci_tx_thread+0xc6>
    2752:	2b08      	cmp	r3, #8
    2754:	d117      	bne.n	2786 <hci_tx_thread+0x116>
		case K_POLL_STATE_SIGNALED:
			break;
		case K_POLL_STATE_FIFO_DATA_AVAILABLE:
			if (ev->tag == BT_EVENT_CMD_TX) {
    2756:	7916      	ldrb	r6, [r2, #4]
    2758:	2e00      	cmp	r6, #0
    275a:	d122      	bne.n	27a2 <hci_tx_thread+0x132>
	struct net_buf *buf;
	int err;

	/* Get next command */
	BT_DBG("calling net_buf_get");
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    275c:	4d23      	ldr	r5, [pc, #140]	; (27ec <hci_tx_thread+0x17c>)
    275e:	0031      	movs	r1, r6
    2760:	0028      	movs	r0, r5
    2762:	30c4      	adds	r0, #196	; 0xc4
    2764:	f00d fee0 	bl	10528 <net_buf_get>
    2768:	1e07      	subs	r7, r0, #0
	BT_ASSERT(buf);
    276a:	d1a1      	bne.n	26b0 <hci_tx_thread+0x40>
    276c:	4b17      	ldr	r3, [pc, #92]	; (27cc <hci_tx_thread+0x15c>)
    276e:	4a18      	ldr	r2, [pc, #96]	; (27d0 <hci_tx_thread+0x160>)
    2770:	9301      	str	r3, [sp, #4]
    2772:	4b18      	ldr	r3, [pc, #96]	; (27d4 <hci_tx_thread+0x164>)
    2774:	4918      	ldr	r1, [pc, #96]	; (27d8 <hci_tx_thread+0x168>)
    2776:	9300      	str	r3, [sp, #0]
    2778:	481e      	ldr	r0, [pc, #120]	; (27f4 <hci_tx_thread+0x184>)
    277a:	4b1b      	ldr	r3, [pc, #108]	; (27e8 <hci_tx_thread+0x178>)
    277c:	f7ff f88a 	bl	1894 <printk>
    2780:	b662      	cpsie	i
    2782:	2004      	movs	r0, #4
    2784:	df02      	svc	2
	BT_DBG("count %d", count);

	for (; count; ev++, count--) {
		BT_DBG("ev->state %u", ev->state);

		switch (ev->state) {
    2786:	2b00      	cmp	r3, #0
    2788:	d0d5      	beq.n	2736 <hci_tx_thread+0xc6>
			}
			break;
		case K_POLL_STATE_NOT_READY:
			break;
		default:
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    278a:	4a10      	ldr	r2, [pc, #64]	; (27cc <hci_tx_thread+0x15c>)
    278c:	9301      	str	r3, [sp, #4]
    278e:	4b1a      	ldr	r3, [pc, #104]	; (27f8 <hci_tx_thread+0x188>)
    2790:	9202      	str	r2, [sp, #8]
    2792:	9300      	str	r3, [sp, #0]
    2794:	4a19      	ldr	r2, [pc, #100]	; (27fc <hci_tx_thread+0x18c>)
    2796:	4b1a      	ldr	r3, [pc, #104]	; (2800 <hci_tx_thread+0x190>)
    2798:	490f      	ldr	r1, [pc, #60]	; (27d8 <hci_tx_thread+0x168>)
    279a:	481a      	ldr	r0, [pc, #104]	; (2804 <hci_tx_thread+0x194>)
    279c:	f7ff f87a 	bl	1894 <printk>
    27a0:	e7c9      	b.n	2736 <hci_tx_thread+0xc6>
			if (ev->tag == BT_EVENT_CMD_TX) {
				send_cmd();
			} else if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
				struct bt_conn *conn;

				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    27a2:	2e01      	cmp	r6, #1
    27a4:	d104      	bne.n	27b0 <hci_tx_thread+0x140>
					conn = CONTAINER_OF(ev->fifo,
							    struct bt_conn,
							    tx_notify);
					bt_conn_notify_tx(conn);
    27a6:	6820      	ldr	r0, [r4, #0]
    27a8:	3818      	subs	r0, #24
    27aa:	f001 f867 	bl	387c <bt_conn_notify_tx>
    27ae:	e7c2      	b.n	2736 <hci_tx_thread+0xc6>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    27b0:	2e02      	cmp	r6, #2
    27b2:	d1c0      	bne.n	2736 <hci_tx_thread+0xc6>
					conn = CONTAINER_OF(ev->fifo,
							    struct bt_conn,
							    tx_queue);
					bt_conn_process_tx(conn);
    27b4:	6820      	ldr	r0, [r4, #0]
    27b6:	382c      	subs	r0, #44	; 0x2c
    27b8:	f001 fb86 	bl	3ec8 <bt_conn_process_tx>
    27bc:	e7bb      	b.n	2736 <hci_tx_thread+0xc6>
		process_events(events, ev_count);

		/* Make sure we don't hog the CPU if there's all the time
		 * some ready events.
		 */
		k_yield();
    27be:	f00e ffb9 	bl	11734 <k_yield>
	}
    27c2:	e757      	b.n	2674 <hci_tx_thread+0x4>
    27c4:	20000168 	.word	0x20000168
    27c8:	fffe0fff 	.word	0xfffe0fff
    27cc:	0001241d 	.word	0x0001241d
    27d0:	0001246d 	.word	0x0001246d
    27d4:	000124a8 	.word	0x000124a8
    27d8:	000123e3 	.word	0x000123e3
    27dc:	00012660 	.word	0x00012660
    27e0:	000143ad 	.word	0x000143ad
    27e4:	000126af 	.word	0x000126af
    27e8:	0001440a 	.word	0x0001440a
    27ec:	20000198 	.word	0x20000198
    27f0:	0001262e 	.word	0x0001262e
    27f4:	0001268a 	.word	0x0001268a
    27f8:	00012422 	.word	0x00012422
    27fc:	000123dc 	.word	0x000123dc
    2800:	00014413 	.word	0x00014413
    2804:	000126da 	.word	0x000126da

00002808 <bt_recv>:

	return bt_dev.drv->send(buf);
}

int bt_recv(struct net_buf *buf)
{
    2808:	b5f0      	push	{r4, r5, r6, r7, lr}
    280a:	0007      	movs	r7, r0
    280c:	b08f      	sub	sp, #60	; 0x3c

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	pool = net_buf_pool_get(buf->pool_id);
    280e:	7980      	ldrb	r0, [r0, #6]
    2810:	f00d fe3a 	bl	10488 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    2814:	8b43      	ldrh	r3, [r0, #26]
    2816:	2b03      	cmp	r3, #3
    2818:	d80a      	bhi.n	2830 <bt_recv+0x28>
		BT_ERR("Too small user data size");
    281a:	4bcb      	ldr	r3, [pc, #812]	; (2b48 <bt_recv+0x340>)
    281c:	4acb      	ldr	r2, [pc, #812]	; (2b4c <bt_recv+0x344>)
    281e:	9301      	str	r3, [sp, #4]
    2820:	4bcb      	ldr	r3, [pc, #812]	; (2b50 <bt_recv+0x348>)
    2822:	49cc      	ldr	r1, [pc, #816]	; (2b54 <bt_recv+0x34c>)
    2824:	9300      	str	r3, [sp, #0]
    2826:	48cc      	ldr	r0, [pc, #816]	; (2b58 <bt_recv+0x350>)
    2828:	4bcc      	ldr	r3, [pc, #816]	; (2b5c <bt_recv+0x354>)
    282a:	f7ff f833 	bl	1894 <printk>
    282e:	e083      	b.n	2938 <bt_recv+0x130>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    2830:	0038      	movs	r0, r7
    2832:	f7ff f90d 	bl	1a50 <net_buf_user_data>
    2836:	7803      	ldrb	r3, [r0, #0]
		net_buf_unref(buf);
		return -EINVAL;
	}

	switch (bt_buf_get_type(buf)) {
    2838:	2b01      	cmp	r3, #1
    283a:	d048      	beq.n	28ce <bt_recv+0xc6>
    283c:	2b03      	cmp	r3, #3
    283e:	d170      	bne.n	2922 <bt_recv+0x11a>
#endif

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    2840:	68bb      	ldr	r3, [r7, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    2842:	78dc      	ldrb	r4, [r3, #3]
    2844:	789a      	ldrb	r2, [r3, #2]
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    2846:	785d      	ldrb	r5, [r3, #1]
    2848:	7819      	ldrb	r1, [r3, #0]

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    284a:	0224      	lsls	r4, r4, #8
    284c:	4314      	orrs	r4, r2
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    284e:	022a      	lsls	r2, r5, #8
    2850:	430a      	orrs	r2, r1
	flags = bt_acl_flags(handle);

	acl(buf)->handle = bt_acl_handle(handle);
    2852:	0513      	lsls	r3, r2, #20
    2854:	0d1b      	lsrs	r3, r3, #20
    2856:	8043      	strh	r3, [r0, #2]

	net_buf_pull(buf, sizeof(*hdr));
    2858:	0038      	movs	r0, r7
    285a:	2104      	movs	r1, #4
    285c:	3008      	adds	r0, #8
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    285e:	0015      	movs	r5, r2
	flags = bt_acl_flags(handle);

	acl(buf)->handle = bt_acl_handle(handle);

	net_buf_pull(buf, sizeof(*hdr));
    2860:	f00d fed1 	bl	10606 <net_buf_simple_pull>

	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);

	if (buf->len != len) {
    2864:	89bb      	ldrh	r3, [r7, #12]
    2866:	429c      	cmp	r4, r3
    2868:	d00c      	beq.n	2884 <bt_recv+0x7c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    286a:	4ab7      	ldr	r2, [pc, #732]	; (2b48 <bt_recv+0x340>)
    286c:	9301      	str	r3, [sp, #4]
    286e:	4bb8      	ldr	r3, [pc, #736]	; (2b50 <bt_recv+0x348>)
    2870:	9203      	str	r2, [sp, #12]
    2872:	9300      	str	r3, [sp, #0]
    2874:	9402      	str	r4, [sp, #8]
    2876:	4bba      	ldr	r3, [pc, #744]	; (2b60 <bt_recv+0x358>)
    2878:	4ab4      	ldr	r2, [pc, #720]	; (2b4c <bt_recv+0x344>)
    287a:	49b6      	ldr	r1, [pc, #728]	; (2b54 <bt_recv+0x34c>)
    287c:	48b9      	ldr	r0, [pc, #740]	; (2b64 <bt_recv+0x35c>)
    287e:	f7ff f809 	bl	1894 <printk>
    2882:	e049      	b.n	2918 <bt_recv+0x110>
		net_buf_unref(buf);
		return;
	}

	conn = bt_conn_lookup_handle(acl(buf)->handle);
    2884:	0038      	movs	r0, r7
    2886:	f7ff f8e3 	bl	1a50 <net_buf_user_data>
    288a:	8840      	ldrh	r0, [r0, #2]
    288c:	f001 f9d8 	bl	3c40 <bt_conn_lookup_handle>
    2890:	1e04      	subs	r4, r0, #0
	if (!conn) {
    2892:	d114      	bne.n	28be <bt_recv+0xb6>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    2894:	0038      	movs	r0, r7
    2896:	f7ff f8db 	bl	1a50 <net_buf_user_data>
    289a:	4bab      	ldr	r3, [pc, #684]	; (2b48 <bt_recv+0x340>)
    289c:	4aab      	ldr	r2, [pc, #684]	; (2b4c <bt_recv+0x344>)
    289e:	9302      	str	r3, [sp, #8]
    28a0:	8843      	ldrh	r3, [r0, #2]
    28a2:	49ac      	ldr	r1, [pc, #688]	; (2b54 <bt_recv+0x34c>)
    28a4:	9301      	str	r3, [sp, #4]
    28a6:	4baa      	ldr	r3, [pc, #680]	; (2b50 <bt_recv+0x348>)
    28a8:	48af      	ldr	r0, [pc, #700]	; (2b68 <bt_recv+0x360>)
    28aa:	9300      	str	r3, [sp, #0]
    28ac:	4bac      	ldr	r3, [pc, #688]	; (2b60 <bt_recv+0x358>)
    28ae:	f7fe fff1 	bl	1894 <printk>
		net_buf_unref(buf);
    28b2:	0038      	movs	r0, r7
    28b4:	f00d fe64 	bl	10580 <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_acl(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    28b8:	0020      	movs	r0, r4
    28ba:	f000 fbf3 	bl	30a4 <bt_recv+0x89c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
		net_buf_unref(buf);
		return;
	}

	bt_conn_recv(conn, buf, flags);
    28be:	0b2a      	lsrs	r2, r5, #12
    28c0:	0039      	movs	r1, r7
    28c2:	f000 feed 	bl	36a0 <bt_conn_recv>
	bt_conn_unref(conn);
    28c6:	0020      	movs	r0, r4
    28c8:	f001 fa2e 	bl	3d28 <bt_conn_unref>
    28cc:	e027      	b.n	291e <bt_recv+0x116>
	}
}

static void hci_event(struct net_buf *buf)
{
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    28ce:	68bc      	ldr	r4, [r7, #8]

	BT_DBG("event 0x%02x", hdr->evt);

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    28d0:	7822      	ldrb	r2, [r4, #0]
    28d2:	2a13      	cmp	r2, #19
    28d4:	d811      	bhi.n	28fa <bt_recv+0xf2>
    28d6:	4093      	lsls	r3, r2
    28d8:	228c      	movs	r2, #140	; 0x8c
    28da:	0312      	lsls	r2, r2, #12
    28dc:	4213      	tst	r3, r2
    28de:	d00c      	beq.n	28fa <bt_recv+0xf2>
    28e0:	4b99      	ldr	r3, [pc, #612]	; (2b48 <bt_recv+0x340>)
    28e2:	4a9a      	ldr	r2, [pc, #616]	; (2b4c <bt_recv+0x344>)
    28e4:	9301      	str	r3, [sp, #4]
    28e6:	4b9a      	ldr	r3, [pc, #616]	; (2b50 <bt_recv+0x348>)
    28e8:	499a      	ldr	r1, [pc, #616]	; (2b54 <bt_recv+0x34c>)
    28ea:	9300      	str	r3, [sp, #0]
    28ec:	489f      	ldr	r0, [pc, #636]	; (2b6c <bt_recv+0x364>)
    28ee:	4ba0      	ldr	r3, [pc, #640]	; (2b70 <bt_recv+0x368>)
    28f0:	f7fe ffd0 	bl	1894 <printk>
    28f4:	b662      	cpsie	i
    28f6:	2004      	movs	r0, #4
    28f8:	df02      	svc	2

	net_buf_pull(buf, sizeof(*hdr));
    28fa:	003b      	movs	r3, r7
    28fc:	3308      	adds	r3, #8
    28fe:	2102      	movs	r1, #2
    2900:	0018      	movs	r0, r3
    2902:	9306      	str	r3, [sp, #24]
    2904:	f00d fe7f 	bl	10606 <net_buf_simple_pull>

	switch (hdr->evt) {
    2908:	7824      	ldrb	r4, [r4, #0]
    290a:	2c05      	cmp	r4, #5
    290c:	d176      	bne.n	29fc <bt_recv+0x1f4>
    290e:	68bd      	ldr	r5, [r7, #8]
	struct bt_conn *conn;

	BT_DBG("status %u handle %u reason %u", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    2910:	782b      	ldrb	r3, [r5, #0]
    2912:	9306      	str	r3, [sp, #24]
    2914:	2b00      	cmp	r3, #0
    2916:	d015      	beq.n	2944 <bt_recv+0x13c>
			buf->len, bt_hex(buf->data, buf->len));
		break;

	}

	net_buf_unref(buf);
    2918:	0038      	movs	r0, r7
    291a:	f00d fe31 	bl	10580 <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_event(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    291e:	2000      	movs	r0, #0
    2920:	e3c0      	b.n	30a4 <bt_recv+0x89c>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    2922:	4a89      	ldr	r2, [pc, #548]	; (2b48 <bt_recv+0x340>)
    2924:	9301      	str	r3, [sp, #4]
    2926:	4b8a      	ldr	r3, [pc, #552]	; (2b50 <bt_recv+0x348>)
    2928:	9202      	str	r2, [sp, #8]
    292a:	9300      	str	r3, [sp, #0]
    292c:	4a87      	ldr	r2, [pc, #540]	; (2b4c <bt_recv+0x344>)
    292e:	4b8b      	ldr	r3, [pc, #556]	; (2b5c <bt_recv+0x354>)
    2930:	4988      	ldr	r1, [pc, #544]	; (2b54 <bt_recv+0x34c>)
    2932:	4890      	ldr	r0, [pc, #576]	; (2b74 <bt_recv+0x36c>)
    2934:	f7fe ffae 	bl	1894 <printk>
		net_buf_unref(buf);
    2938:	0038      	movs	r0, r7
    293a:	f00d fe21 	bl	10580 <net_buf_unref>
		return -EINVAL;
    293e:	2016      	movs	r0, #22
    2940:	4240      	negs	r0, r0
    2942:	e3af      	b.n	30a4 <bt_recv+0x89c>
}

static void hci_disconn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2944:	78ae      	ldrb	r6, [r5, #2]
    2946:	786b      	ldrb	r3, [r5, #1]
    2948:	0236      	lsls	r6, r6, #8
    294a:	431e      	orrs	r6, r3

	if (evt->status) {
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    294c:	0030      	movs	r0, r6
    294e:	f001 f977 	bl	3c40 <bt_conn_lookup_handle>
    2952:	1e04      	subs	r4, r0, #0
	if (!conn) {
    2954:	d10b      	bne.n	296e <bt_recv+0x166>
		BT_ERR("Unable to look up conn with handle %u", handle);
    2956:	4b7c      	ldr	r3, [pc, #496]	; (2b48 <bt_recv+0x340>)
    2958:	9601      	str	r6, [sp, #4]
    295a:	9302      	str	r3, [sp, #8]
    295c:	4b7c      	ldr	r3, [pc, #496]	; (2b50 <bt_recv+0x348>)
    295e:	4a7b      	ldr	r2, [pc, #492]	; (2b4c <bt_recv+0x344>)
    2960:	9300      	str	r3, [sp, #0]
    2962:	497c      	ldr	r1, [pc, #496]	; (2b54 <bt_recv+0x34c>)
    2964:	4b84      	ldr	r3, [pc, #528]	; (2b78 <bt_recv+0x370>)
    2966:	4885      	ldr	r0, [pc, #532]	; (2b7c <bt_recv+0x374>)
    2968:	f7fe ff94 	bl	1894 <printk>
    296c:	e01f      	b.n	29ae <bt_recv+0x1a6>
		goto advertise;
	}

	conn->err = evt->reason;
    296e:	0003      	movs	r3, r0
    2970:	78ea      	ldrb	r2, [r5, #3]
    2972:	334c      	adds	r3, #76	; 0x4c
    2974:	701a      	strb	r2, [r3, #0]

	/* Check stacks usage (no-ops if not enabled) */
	k_call_stacks_analyze();
    2976:	f00e f967 	bl	10c48 <k_call_stacks_analyze>
#if !defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
	STACK_ANALYZE("rx stack", rx_thread_stack);
#endif
	STACK_ANALYZE("tx stack", tx_thread_stack);

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    297a:	9906      	ldr	r1, [sp, #24]
    297c:	0020      	movs	r0, r4
    297e:	f001 f8a5 	bl	3acc <bt_conn_set_state>
	conn->handle = 0;
    2982:	466b      	mov	r3, sp

	if (conn->type != BT_CONN_TYPE_LE) {
    2984:	78a5      	ldrb	r5, [r4, #2]
	STACK_ANALYZE("rx stack", rx_thread_stack);
#endif
	STACK_ANALYZE("tx stack", tx_thread_stack);

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	conn->handle = 0;
    2986:	8b1b      	ldrh	r3, [r3, #24]
    2988:	8023      	strh	r3, [r4, #0]

	if (conn->type != BT_CONN_TYPE_LE) {
    298a:	2d00      	cmp	r5, #0
    298c:	d132      	bne.n	29f4 <bt_recv+0x1ec>
#endif
		bt_conn_unref(conn);
		return;
	}

	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    298e:	1d20      	adds	r0, r4, #4
    2990:	0029      	movs	r1, r5
    2992:	f7ff f87d 	bl	1a90 <atomic_test_bit>
    2996:	2800      	cmp	r0, #0
    2998:	d006      	beq.n	29a8 <bt_recv+0x1a0>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    299a:	0020      	movs	r0, r4
    299c:	2101      	movs	r1, #1
    299e:	f001 f895 	bl	3acc <bt_conn_set_state>
		bt_le_scan_update(false);
    29a2:	0028      	movs	r0, r5
    29a4:	f7ff fa56 	bl	1e54 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    29a8:	0020      	movs	r0, r4
    29aa:	f001 f9bd 	bl	3d28 <bt_conn_unref>

advertise:
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    29ae:	4c74      	ldr	r4, [pc, #464]	; (2b80 <bt_recv+0x378>)
    29b0:	2106      	movs	r1, #6
    29b2:	346c      	adds	r4, #108	; 0x6c
    29b4:	0020      	movs	r0, r4
    29b6:	f7ff f86b 	bl	1a90 <atomic_test_bit>
    29ba:	2800      	cmp	r0, #0
    29bc:	d0ac      	beq.n	2918 <bt_recv+0x110>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    29be:	2105      	movs	r1, #5
    29c0:	0020      	movs	r0, r4
    29c2:	f7ff f865 	bl	1a90 <atomic_test_bit>
	}

	bt_conn_unref(conn);

advertise:
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    29c6:	2800      	cmp	r0, #0
    29c8:	d1a6      	bne.n	2918 <bt_recv+0x110>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
			le_set_private_addr();
		}

		set_advertise_enable(true);
    29ca:	3001      	adds	r0, #1
    29cc:	f7ff f9ae 	bl	1d2c <set_advertise_enable>
    29d0:	e7a2      	b.n	2918 <bt_recv+0x110>
    29d2:	68bd      	ldr	r5, [r7, #8]
	int err;

	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
	       evt->role, bt_addr_le_str(&evt->peer_addr));

	if (evt->status) {
    29d4:	782b      	ldrb	r3, [r5, #0]
    29d6:	2b00      	cmp	r3, #0
    29d8:	d02b      	beq.n	2a32 <bt_recv+0x22a>
		 * connection so there is no need to check ID address as
		 * only one connection can be in that state
		 *
		 * Depending on error code address might not be valid anyway.
		 */
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    29da:	2102      	movs	r1, #2
    29dc:	2000      	movs	r0, #0
    29de:	f001 f97f 	bl	3ce0 <bt_conn_lookup_state_le>
    29e2:	1e04      	subs	r4, r0, #0
		if (!conn) {
    29e4:	d098      	beq.n	2918 <bt_recv+0x110>
			return;
		}

		conn->err = evt->status;
    29e6:	0003      	movs	r3, r0
    29e8:	782a      	ldrb	r2, [r5, #0]
    29ea:	334c      	adds	r3, #76	; 0x4c
    29ec:	701a      	strb	r2, [r3, #0]

		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    29ee:	2100      	movs	r1, #0
    29f0:	f001 f86c 	bl	3acc <bt_conn_set_state>
	}

	update_conn_param(conn);

done:
	bt_conn_unref(conn);
    29f4:	0020      	movs	r0, r4
	}

	update_conn_param(conn);

done:
	bt_conn_unref(conn);
    29f6:	f001 f997 	bl	3d28 <bt_conn_unref>
    29fa:	e78d      	b.n	2918 <bt_recv+0x110>

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    29fc:	2c3e      	cmp	r4, #62	; 0x3e
    29fe:	d000      	beq.n	2a02 <bt_recv+0x1fa>
    2a00:	e33d      	b.n	307e <bt_recv+0x876>
	}
}

static void hci_le_meta_event(struct net_buf *buf)
{
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    2a02:	68bc      	ldr	r4, [r7, #8]

	BT_DBG("subevent 0x%02x", evt->subevent);

	net_buf_pull(buf, sizeof(*evt));
    2a04:	2101      	movs	r1, #1
    2a06:	9806      	ldr	r0, [sp, #24]
    2a08:	f00d fdfd 	bl	10606 <net_buf_simple_pull>

	switch (evt->subevent) {
    2a0c:	7824      	ldrb	r4, [r4, #0]
    2a0e:	1e60      	subs	r0, r4, #1
    2a10:	280b      	cmp	r0, #11
    2a12:	d900      	bls.n	2a16 <bt_recv+0x20e>
    2a14:	e322      	b.n	305c <bt_recv+0x854>
    2a16:	f7fd fbb9 	bl	18c <__gnu_thumb1_case_shi>
    2a1a:	ffdc      	.short	0xffdc
    2a1c:	00e40261 	.word	0x00e40261
    2a20:	03210111 	.word	0x03210111
    2a24:	01bc0158 	.word	0x01bc0158
    2a28:	0231020f 	.word	0x0231020f
    2a2c:	03210321 	.word	0x03210321
    2a30:	01d8      	.short	0x01d8
}

static void le_conn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2a32:	78aa      	ldrb	r2, [r5, #2]
    2a34:	786b      	ldrb	r3, [r5, #1]
    2a36:	0212      	lsls	r2, r2, #8
		bt_conn_unref(conn);

		return;
	}

	id_addr = find_id_addr(&evt->peer_addr);
    2a38:	1d2e      	adds	r6, r5, #4
}

static void le_conn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2a3a:	431a      	orrs	r2, r3

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    2a3c:	2102      	movs	r1, #2
    2a3e:	0030      	movs	r0, r6
}

static void le_conn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2a40:	9206      	str	r2, [sp, #24]

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    2a42:	f001 f94d 	bl	3ce0 <bt_conn_lookup_state_le>

	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2a46:	78eb      	ldrb	r3, [r5, #3]

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    2a48:	0004      	movs	r4, r0

	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2a4a:	2b01      	cmp	r3, #1
    2a4c:	d10b      	bne.n	2a66 <bt_recv+0x25e>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2a4e:	2121      	movs	r1, #33	; 0x21
    2a50:	484b      	ldr	r0, [pc, #300]	; (2b80 <bt_recv+0x378>)
    2a52:	4249      	negs	r1, r1
    2a54:	306c      	adds	r0, #108	; 0x6c
    2a56:	f00e f891 	bl	10b7c <atomic_and>
		 * object to keep host in sync with controller state
		 */
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);

		/* only for slave we may need to add new connection */
		if (!conn) {
    2a5a:	2c00      	cmp	r4, #0
    2a5c:	d110      	bne.n	2a80 <bt_recv+0x278>
			conn = bt_conn_add_le(id_addr);
    2a5e:	0030      	movs	r0, r6
    2a60:	f001 f804 	bl	3a6c <bt_conn_add_le>
    2a64:	0004      	movs	r4, r0
		}
	}

	if (!conn) {
    2a66:	2c00      	cmp	r4, #0
    2a68:	d10a      	bne.n	2a80 <bt_recv+0x278>
		BT_ERR("Unable to add new conn for handle %u", handle);
    2a6a:	4b37      	ldr	r3, [pc, #220]	; (2b48 <bt_recv+0x340>)
    2a6c:	4a37      	ldr	r2, [pc, #220]	; (2b4c <bt_recv+0x344>)
    2a6e:	9302      	str	r3, [sp, #8]
    2a70:	9b06      	ldr	r3, [sp, #24]
    2a72:	4938      	ldr	r1, [pc, #224]	; (2b54 <bt_recv+0x34c>)
    2a74:	9301      	str	r3, [sp, #4]
    2a76:	4b36      	ldr	r3, [pc, #216]	; (2b50 <bt_recv+0x348>)
    2a78:	4842      	ldr	r0, [pc, #264]	; (2b84 <bt_recv+0x37c>)
    2a7a:	9300      	str	r3, [sp, #0]
    2a7c:	4b42      	ldr	r3, [pc, #264]	; (2b88 <bt_recv+0x380>)
    2a7e:	e1b7      	b.n	2df0 <bt_recv+0x5e8>
		return;
	}

	conn->handle   = handle;
    2a80:	466b      	mov	r3, sp
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2a82:	0020      	movs	r0, r4
    2a84:	8b1b      	ldrh	r3, [r3, #24]
    2a86:	2207      	movs	r2, #7
    2a88:	8023      	strh	r3, [r4, #0]
    2a8a:	0031      	movs	r1, r6
    2a8c:	3050      	adds	r0, #80	; 0x50
    2a8e:	f7fe f8de 	bl	c4e <memcpy>
	bt_addr_le_copy(&conn->le.dst, id_addr);
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2a92:	7b2b      	ldrb	r3, [r5, #12]
    2a94:	7aea      	ldrb	r2, [r5, #11]
    2a96:	021b      	lsls	r3, r3, #8
    2a98:	4313      	orrs	r3, r2
    2a9a:	0022      	movs	r2, r4
    2a9c:	3266      	adds	r2, #102	; 0x66
    2a9e:	8013      	strh	r3, [r2, #0]
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2aa0:	7bab      	ldrb	r3, [r5, #14]
    2aa2:	7b6a      	ldrb	r2, [r5, #13]
    2aa4:	021b      	lsls	r3, r3, #8
    2aa6:	4313      	orrs	r3, r2
    2aa8:	0022      	movs	r2, r4
    2aaa:	326c      	adds	r2, #108	; 0x6c
    2aac:	8013      	strh	r3, [r2, #0]
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2aae:	7c2b      	ldrb	r3, [r5, #16]
    2ab0:	7bea      	ldrb	r2, [r5, #15]
    2ab2:	021b      	lsls	r3, r3, #8
    2ab4:	4313      	orrs	r3, r2
    2ab6:	0022      	movs	r2, r4
    2ab8:	326e      	adds	r2, #110	; 0x6e
    2aba:	8013      	strh	r3, [r2, #0]
	conn->role = evt->role;
    2abc:	78eb      	ldrb	r3, [r5, #3]
    2abe:	9306      	str	r3, [sp, #24]
    2ac0:	466b      	mov	r3, sp
    2ac2:	7e1b      	ldrb	r3, [r3, #24]
    2ac4:	70e3      	strb	r3, [r4, #3]
	/*
	 * Use connection address (instead of identity address) as initiator
	 * or responder address. Only slave needs to be updated. For master all
	 * was set during outgoing connection creation.
	 */
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    2ac6:	9b06      	ldr	r3, [sp, #24]
    2ac8:	2b01      	cmp	r3, #1
    2aca:	d119      	bne.n	2b00 <bt_recv+0x2f8>
    2acc:	0020      	movs	r0, r4
    2ace:	0031      	movs	r1, r6
    2ad0:	2207      	movs	r2, #7
    2ad2:	3057      	adds	r0, #87	; 0x57
    2ad4:	f7fe f8bb 	bl	c4e <memcpy>
    2ad8:	0020      	movs	r0, r4
    2ada:	4e29      	ldr	r6, [pc, #164]	; (2b80 <bt_recv+0x378>)
    2adc:	2207      	movs	r2, #7
    2ade:	0031      	movs	r1, r6
    2ae0:	305e      	adds	r0, #94	; 0x5e
    2ae2:	f7fe f8b4 	bl	c4e <memcpy>
		/* if the controller supports, lets advertise for another
		 * slave connection.
		 * check for connectable advertising state is sufficient as
		 * this is how this le connection complete for slave occurred.
		 */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2ae6:	0030      	movs	r0, r6
    2ae8:	2106      	movs	r1, #6
    2aea:	306c      	adds	r0, #108	; 0x6c
    2aec:	f7fe ffd0 	bl	1a90 <atomic_test_bit>
    2af0:	2800      	cmp	r0, #0
    2af2:	d005      	beq.n	2b00 <bt_recv+0x2f8>
    2af4:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    2af6:	065b      	lsls	r3, r3, #25
    2af8:	d502      	bpl.n	2b00 <bt_recv+0x2f8>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
			if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
				le_set_private_addr();
			}

			set_advertise_enable(true);
    2afa:	9806      	ldr	r0, [sp, #24]
    2afc:	f7ff f916 	bl	1d2c <set_advertise_enable>
		}

	}

	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2b00:	2103      	movs	r1, #3
    2b02:	0020      	movs	r0, r4
    2b04:	f000 ffe2 	bl	3acc <bt_conn_set_state>
	/*
	 * it is possible that connection was disconnected directly from
	 * connected callback so we must check state before doing connection
	 * parameters update
	 */
	if (conn->state != BT_CONN_CONNECTED) {
    2b08:	0023      	movs	r3, r4
    2b0a:	334d      	adds	r3, #77	; 0x4d
    2b0c:	781b      	ldrb	r3, [r3, #0]
    2b0e:	2b03      	cmp	r3, #3
    2b10:	d160      	bne.n	2bd4 <bt_recv+0x3cc>
		goto done;
	}

	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2b12:	78eb      	ldrb	r3, [r5, #3]
    2b14:	2b00      	cmp	r3, #0
    2b16:	d004      	beq.n	2b22 <bt_recv+0x31a>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2b18:	4b19      	ldr	r3, [pc, #100]	; (2b80 <bt_recv+0x378>)
    2b1a:	3370      	adds	r3, #112	; 0x70
	 */
	if (conn->state != BT_CONN_CONNECTED) {
		goto done;
	}

	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2b1c:	781b      	ldrb	r3, [r3, #0]
    2b1e:	071b      	lsls	r3, r3, #28
    2b20:	d536      	bpl.n	2b90 <bt_recv+0x388>
static int hci_le_read_remote_features(struct bt_conn *conn)
{
	struct bt_hci_cp_le_read_remote_features *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2b22:	2102      	movs	r1, #2
    2b24:	4819      	ldr	r0, [pc, #100]	; (2b8c <bt_recv+0x384>)
    2b26:	f7ff f81f 	bl	1b68 <bt_hci_cmd_create>
    2b2a:	1e05      	subs	r5, r0, #0
				sizeof(*cp));
	if (!buf) {
    2b2c:	d030      	beq.n	2b90 <bt_recv+0x388>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2b2e:	2102      	movs	r1, #2
    2b30:	3008      	adds	r0, #8
    2b32:	f00d fd47 	bl	105c4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2b36:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2b38:	0029      	movs	r1, r5
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    2b3a:	7003      	strb	r3, [r0, #0]
    2b3c:	0a1b      	lsrs	r3, r3, #8
    2b3e:	7043      	strb	r3, [r0, #1]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2b40:	4812      	ldr	r0, [pc, #72]	; (2b8c <bt_recv+0x384>)
    2b42:	f7ff fce3 	bl	250c <bt_hci_cmd_send>
    2b46:	e045      	b.n	2bd4 <bt_recv+0x3cc>
    2b48:	0001241d 	.word	0x0001241d
    2b4c:	0001246d 	.word	0x0001246d
    2b50:	000124a8 	.word	0x000124a8
    2b54:	000123e3 	.word	0x000123e3
    2b58:	0001270b 	.word	0x0001270b
    2b5c:	0001435e 	.word	0x0001435e
    2b60:	0001434d 	.word	0x0001434d
    2b64:	00012734 	.word	0x00012734
    2b68:	00012768 	.word	0x00012768
    2b6c:	000128c4 	.word	0x000128c4
    2b70:	000143d3 	.word	0x000143d3
    2b74:	000128a0 	.word	0x000128a0
    2b78:	00014422 	.word	0x00014422
    2b7c:	0001279a 	.word	0x0001279a
    2b80:	20000198 	.word	0x20000198
    2b84:	000127d0 	.word	0x000127d0
    2b88:	0001437d 	.word	0x0001437d
    2b8c:	00002016 	.word	0x00002016
		if (!err) {
			goto done;
		}
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2b90:	4bc2      	ldr	r3, [pc, #776]	; (2e9c <bt_recv+0x694>)
    2b92:	001a      	movs	r2, r3
    2b94:	3271      	adds	r2, #113	; 0x71
    2b96:	7812      	ldrb	r2, [r2, #0]
    2b98:	001d      	movs	r5, r3
    2b9a:	07d3      	lsls	r3, r2, #31
    2b9c:	d507      	bpl.n	2bae <bt_recv+0x3a6>
		err = hci_le_set_phy(conn);
    2b9e:	0020      	movs	r0, r4
    2ba0:	f7ff fcf2 	bl	2588 <hci_le_set_phy.isra.23>
		if (!err) {
    2ba4:	2800      	cmp	r0, #0
    2ba6:	d102      	bne.n	2bae <bt_recv+0x3a6>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    2ba8:	1d20      	adds	r0, r4, #4
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2baa:	2180      	movs	r1, #128	; 0x80
    2bac:	e00c      	b.n	2bc8 <bt_recv+0x3c0>
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2bae:	002b      	movs	r3, r5
    2bb0:	3370      	adds	r3, #112	; 0x70
    2bb2:	781b      	ldrb	r3, [r3, #0]
    2bb4:	069b      	lsls	r3, r3, #26
    2bb6:	d50a      	bpl.n	2bce <bt_recv+0x3c6>
		err = hci_le_set_data_len(conn);
    2bb8:	0020      	movs	r0, r4
    2bba:	f7ff fd07 	bl	25cc <hci_le_set_data_len.isra.24>
		if (!err) {
    2bbe:	2800      	cmp	r0, #0
    2bc0:	d105      	bne.n	2bce <bt_recv+0x3c6>
    2bc2:	2180      	movs	r1, #128	; 0x80
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    2bc4:	1d20      	adds	r0, r4, #4
    2bc6:	0049      	lsls	r1, r1, #1
    2bc8:	f00d ffcd 	bl	10b66 <atomic_or>
    2bcc:	e002      	b.n	2bd4 <bt_recv+0x3cc>
			goto done;
		}
	}

	update_conn_param(conn);
    2bce:	0020      	movs	r0, r4
    2bd0:	f7fe ff6c 	bl	1aac <update_conn_param>

done:
	bt_conn_unref(conn);
    2bd4:	0020      	movs	r0, r4
    2bd6:	f001 f8a7 	bl	3d28 <bt_conn_unref>
	bt_le_scan_update(false);
    2bda:	2000      	movs	r0, #0
    2bdc:	f7ff f93a 	bl	1e54 <bt_le_scan_update>
    2be0:	e69a      	b.n	2918 <bt_recv+0x110>
    2be2:	68bc      	ldr	r4, [r7, #8]
{
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
	struct bt_conn *conn;
	u16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    2be4:	78a3      	ldrb	r3, [r4, #2]
    2be6:	7866      	ldrb	r6, [r4, #1]
    2be8:	021b      	lsls	r3, r3, #8
    2bea:	431e      	orrs	r6, r3

	BT_DBG("status %u, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    2bec:	0030      	movs	r0, r6
    2bee:	f001 f827 	bl	3c40 <bt_conn_lookup_handle>
    2bf2:	1e05      	subs	r5, r0, #0
	if (!conn) {
    2bf4:	d106      	bne.n	2c04 <bt_recv+0x3fc>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    2bf6:	4baa      	ldr	r3, [pc, #680]	; (2ea0 <bt_recv+0x698>)
    2bf8:	9601      	str	r6, [sp, #4]
    2bfa:	9302      	str	r3, [sp, #8]
    2bfc:	4ba9      	ldr	r3, [pc, #676]	; (2ea4 <bt_recv+0x69c>)
    2bfe:	9300      	str	r3, [sp, #0]
    2c00:	4ba9      	ldr	r3, [pc, #676]	; (2ea8 <bt_recv+0x6a0>)
    2c02:	e0f2      	b.n	2dea <bt_recv+0x5e2>
		return;
	}

	if (!evt->status) {
    2c04:	7823      	ldrb	r3, [r4, #0]
    2c06:	2b00      	cmp	r3, #0
    2c08:	d000      	beq.n	2c0c <bt_recv+0x404>
    2c0a:	e0dc      	b.n	2dc6 <bt_recv+0x5be>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    2c0c:	7923      	ldrb	r3, [r4, #4]
    2c0e:	78e2      	ldrb	r2, [r4, #3]
    2c10:	021b      	lsls	r3, r3, #8
    2c12:	4313      	orrs	r3, r2
    2c14:	0002      	movs	r2, r0
    2c16:	3266      	adds	r2, #102	; 0x66
    2c18:	8013      	strh	r3, [r2, #0]
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    2c1a:	79a3      	ldrb	r3, [r4, #6]
    2c1c:	7962      	ldrb	r2, [r4, #5]
    2c1e:	021b      	lsls	r3, r3, #8
    2c20:	4313      	orrs	r3, r2
    2c22:	0002      	movs	r2, r0
    2c24:	326c      	adds	r2, #108	; 0x6c
    2c26:	8013      	strh	r3, [r2, #0]
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2c28:	7a23      	ldrb	r3, [r4, #8]
    2c2a:	79e2      	ldrb	r2, [r4, #7]
    2c2c:	021b      	lsls	r3, r3, #8
    2c2e:	4313      	orrs	r3, r2
    2c30:	0002      	movs	r2, r0
    2c32:	326e      	adds	r2, #110	; 0x6e
    2c34:	8013      	strh	r3, [r2, #0]
		notify_le_param_updated(conn);
    2c36:	f000 fcef 	bl	3618 <notify_le_param_updated>
    2c3a:	e0c4      	b.n	2dc6 <bt_recv+0x5be>
    2c3c:	68bd      	ldr	r5, [r7, #8]
}

static void le_remote_feat_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2c3e:	78ab      	ldrb	r3, [r5, #2]
    2c40:	786e      	ldrb	r6, [r5, #1]
    2c42:	021b      	lsls	r3, r3, #8
    2c44:	431e      	orrs	r6, r3
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    2c46:	0030      	movs	r0, r6
    2c48:	f000 fffa 	bl	3c40 <bt_conn_lookup_handle>
    2c4c:	1e04      	subs	r4, r0, #0
	if (!conn) {
    2c4e:	d106      	bne.n	2c5e <bt_recv+0x456>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    2c50:	4b93      	ldr	r3, [pc, #588]	; (2ea0 <bt_recv+0x698>)
    2c52:	9601      	str	r6, [sp, #4]
    2c54:	9302      	str	r3, [sp, #8]
    2c56:	4b93      	ldr	r3, [pc, #588]	; (2ea4 <bt_recv+0x69c>)
    2c58:	9300      	str	r3, [sp, #0]
    2c5a:	4b94      	ldr	r3, [pc, #592]	; (2eac <bt_recv+0x6a4>)
    2c5c:	e0c5      	b.n	2dea <bt_recv+0x5e2>
		return;
	}

	if (!evt->status) {
    2c5e:	782b      	ldrb	r3, [r5, #0]
    2c60:	2b00      	cmp	r3, #0
    2c62:	d104      	bne.n	2c6e <bt_recv+0x466>
		memcpy(conn->le.features, evt->features,
    2c64:	1ce9      	adds	r1, r5, #3
    2c66:	2208      	movs	r2, #8
    2c68:	3070      	adds	r0, #112	; 0x70
    2c6a:	f7fd fff0 	bl	c4e <memcpy>
		       sizeof(conn->le.features));
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    2c6e:	4b8b      	ldr	r3, [pc, #556]	; (2e9c <bt_recv+0x694>)
    2c70:	001a      	movs	r2, r3
    2c72:	3271      	adds	r2, #113	; 0x71
    2c74:	7811      	ldrb	r1, [r2, #0]
    2c76:	2201      	movs	r2, #1
    2c78:	001d      	movs	r5, r3
    2c7a:	4211      	tst	r1, r2
    2c7c:	d00c      	beq.n	2c98 <bt_recv+0x490>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    2c7e:	0023      	movs	r3, r4
    2c80:	3371      	adds	r3, #113	; 0x71
	if (!evt->status) {
		memcpy(conn->le.features, evt->features,
		       sizeof(conn->le.features));
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    2c82:	781b      	ldrb	r3, [r3, #0]
    2c84:	4213      	tst	r3, r2
    2c86:	d007      	beq.n	2c98 <bt_recv+0x490>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
		int err;

		err = hci_le_set_phy(conn);
    2c88:	0020      	movs	r0, r4
    2c8a:	f7ff fc7d 	bl	2588 <hci_le_set_phy.isra.23>
		if (!err) {
    2c8e:	2800      	cmp	r0, #0
    2c90:	d102      	bne.n	2c98 <bt_recv+0x490>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    2c92:	1d20      	adds	r0, r4, #4
    2c94:	2180      	movs	r1, #128	; 0x80
    2c96:	e015      	b.n	2cc4 <bt_recv+0x4bc>
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2c98:	002b      	movs	r3, r5
    2c9a:	3370      	adds	r3, #112	; 0x70
    2c9c:	781a      	ldrb	r2, [r3, #0]
    2c9e:	2320      	movs	r3, #32
    2ca0:	421a      	tst	r2, r3
    2ca2:	d100      	bne.n	2ca6 <bt_recv+0x49e>
    2ca4:	e0c4      	b.n	2e30 <bt_recv+0x628>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    2ca6:	0022      	movs	r2, r4
    2ca8:	3270      	adds	r2, #112	; 0x70
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2caa:	7812      	ldrb	r2, [r2, #0]
    2cac:	421a      	tst	r2, r3
    2cae:	d100      	bne.n	2cb2 <bt_recv+0x4aa>
    2cb0:	e0be      	b.n	2e30 <bt_recv+0x628>
	    BT_FEAT_LE_DLE(conn->le.features)) {
		int err;

		err = hci_le_set_data_len(conn);
    2cb2:	0020      	movs	r0, r4
    2cb4:	f7ff fc8a 	bl	25cc <hci_le_set_data_len.isra.24>
		if (!err) {
    2cb8:	2800      	cmp	r0, #0
    2cba:	d000      	beq.n	2cbe <bt_recv+0x4b6>
    2cbc:	e0b8      	b.n	2e30 <bt_recv+0x628>
    2cbe:	2180      	movs	r1, #128	; 0x80
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    2cc0:	1d20      	adds	r0, r4, #4
    2cc2:	0049      	lsls	r1, r1, #1
    2cc4:	f00d ff4f 	bl	10b66 <atomic_or>
    2cc8:	e694      	b.n	29f4 <bt_recv+0x1ec>
    2cca:	68bb      	ldr	r3, [r7, #8]
	struct bt_conn *conn;
	u16_t handle;
	int err;

	handle = sys_le16_to_cpu(evt->handle);
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    2ccc:	ac0c      	add	r4, sp, #48	; 0x30
	struct bt_le_conn_param param;
	struct bt_conn *conn;
	u16_t handle;
	int err;

	handle = sys_le16_to_cpu(evt->handle);
    2cce:	785e      	ldrb	r6, [r3, #1]
    2cd0:	781a      	ldrb	r2, [r3, #0]
    2cd2:	0236      	lsls	r6, r6, #8
    2cd4:	4316      	orrs	r6, r2
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    2cd6:	78da      	ldrb	r2, [r3, #3]
    2cd8:	7899      	ldrb	r1, [r3, #2]
    2cda:	0212      	lsls	r2, r2, #8
    2cdc:	430a      	orrs	r2, r1
    2cde:	8022      	strh	r2, [r4, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    2ce0:	795a      	ldrb	r2, [r3, #5]
    2ce2:	7919      	ldrb	r1, [r3, #4]
    2ce4:	0212      	lsls	r2, r2, #8
    2ce6:	430a      	orrs	r2, r1
    2ce8:	8062      	strh	r2, [r4, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    2cea:	79da      	ldrb	r2, [r3, #7]
    2cec:	7999      	ldrb	r1, [r3, #6]
    2cee:	0212      	lsls	r2, r2, #8
    2cf0:	430a      	orrs	r2, r1
    2cf2:	80a2      	strh	r2, [r4, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2cf4:	7a1a      	ldrb	r2, [r3, #8]
    2cf6:	7a5b      	ldrb	r3, [r3, #9]

	conn = bt_conn_lookup_handle(handle);
    2cf8:	0030      	movs	r0, r6

	handle = sys_le16_to_cpu(evt->handle);
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
	param.latency = sys_le16_to_cpu(evt->latency);
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2cfa:	021b      	lsls	r3, r3, #8
    2cfc:	4313      	orrs	r3, r2
    2cfe:	80e3      	strh	r3, [r4, #6]

	conn = bt_conn_lookup_handle(handle);
    2d00:	f000 ff9e 	bl	3c40 <bt_conn_lookup_handle>
    2d04:	9006      	str	r0, [sp, #24]
	if (!conn) {
    2d06:	2800      	cmp	r0, #0
    2d08:	d10f      	bne.n	2d2a <bt_recv+0x522>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    2d0a:	4b65      	ldr	r3, [pc, #404]	; (2ea0 <bt_recv+0x698>)
    2d0c:	9601      	str	r6, [sp, #4]
    2d0e:	9302      	str	r3, [sp, #8]
    2d10:	4b64      	ldr	r3, [pc, #400]	; (2ea4 <bt_recv+0x69c>)
    2d12:	4a67      	ldr	r2, [pc, #412]	; (2eb0 <bt_recv+0x6a8>)
    2d14:	9300      	str	r3, [sp, #0]
    2d16:	4967      	ldr	r1, [pc, #412]	; (2eb4 <bt_recv+0x6ac>)
    2d18:	4b67      	ldr	r3, [pc, #412]	; (2eb8 <bt_recv+0x6b0>)
    2d1a:	4868      	ldr	r0, [pc, #416]	; (2ebc <bt_recv+0x6b4>)
    2d1c:	f7fe fdba 	bl	1894 <printk>
		return le_conn_param_neg_reply(handle,
    2d20:	2102      	movs	r1, #2
    2d22:	0030      	movs	r0, r6
    2d24:	f7ff fc88 	bl	2638 <le_conn_param_neg_reply>
    2d28:	e5f6      	b.n	2918 <bt_recv+0x110>
					       BT_HCI_ERR_UNKNOWN_CONN_ID);
	}

	if (!le_param_req(conn, &param)) {
    2d2a:	0021      	movs	r1, r4
    2d2c:	9806      	ldr	r0, [sp, #24]
    2d2e:	f000 fc8d 	bl	364c <le_param_req>
    2d32:	2800      	cmp	r0, #0
    2d34:	d104      	bne.n	2d40 <bt_recv+0x538>
		err = le_conn_param_neg_reply(handle,
    2d36:	211e      	movs	r1, #30
    2d38:	0030      	movs	r0, r6
    2d3a:	f7ff fc7d 	bl	2638 <le_conn_param_neg_reply>
    2d3e:	e026      	b.n	2d8e <bt_recv+0x586>
				   const struct bt_le_conn_param *param)
{
	struct bt_hci_cp_le_conn_param_req_reply *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    2d40:	210e      	movs	r1, #14
    2d42:	485f      	ldr	r0, [pc, #380]	; (2ec0 <bt_recv+0x6b8>)
    2d44:	f7fe ff10 	bl	1b68 <bt_hci_cmd_create>
    2d48:	9007      	str	r0, [sp, #28]
	if (!buf) {
    2d4a:	2800      	cmp	r0, #0
    2d4c:	d01f      	beq.n	2d8e <bt_recv+0x586>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2d4e:	210e      	movs	r1, #14
    2d50:	3008      	adds	r0, #8
    2d52:	f00d fc37 	bl	105c4 <net_buf_simple_add>
    2d56:	0005      	movs	r5, r0
	memset(cp, 0, sizeof(*cp));
    2d58:	2100      	movs	r1, #0
    2d5a:	220e      	movs	r2, #14
    2d5c:	f7fd ffa1 	bl	ca2 <memset>

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    2d60:	7823      	ldrb	r3, [r4, #0]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
    2d62:	702e      	strb	r6, [r5, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    2d64:	70ab      	strb	r3, [r5, #2]
    2d66:	7863      	ldrb	r3, [r4, #1]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
    2d68:	0a36      	lsrs	r6, r6, #8
    2d6a:	706e      	strb	r6, [r5, #1]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    2d6c:	70eb      	strb	r3, [r5, #3]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    2d6e:	78a3      	ldrb	r3, [r4, #2]
	cp->latency = sys_cpu_to_le16(param->latency);
	cp->timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    2d70:	9907      	ldr	r1, [sp, #28]
	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    2d72:	712b      	strb	r3, [r5, #4]
    2d74:	78e3      	ldrb	r3, [r4, #3]
	cp->latency = sys_cpu_to_le16(param->latency);
	cp->timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    2d76:	4852      	ldr	r0, [pc, #328]	; (2ec0 <bt_recv+0x6b8>)
	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    2d78:	716b      	strb	r3, [r5, #5]
	cp->latency = sys_cpu_to_le16(param->latency);
    2d7a:	7923      	ldrb	r3, [r4, #4]
    2d7c:	71ab      	strb	r3, [r5, #6]
    2d7e:	7963      	ldrb	r3, [r4, #5]
    2d80:	71eb      	strb	r3, [r5, #7]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    2d82:	79a3      	ldrb	r3, [r4, #6]
    2d84:	722b      	strb	r3, [r5, #8]
    2d86:	79e3      	ldrb	r3, [r4, #7]
    2d88:	726b      	strb	r3, [r5, #9]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    2d8a:	f7ff fbbf 	bl	250c <bt_hci_cmd_send>
					      BT_HCI_ERR_INVALID_LL_PARAM);
	} else {
		err = le_conn_param_req_reply(handle, &param);
	}

	bt_conn_unref(conn);
    2d8e:	9806      	ldr	r0, [sp, #24]
    2d90:	e631      	b.n	29f6 <bt_recv+0x1ee>
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2d92:	68ba      	ldr	r2, [r7, #8]
    2d94:	7854      	ldrb	r4, [r2, #1]
    2d96:	7813      	ldrb	r3, [r2, #0]
    2d98:	0224      	lsls	r4, r4, #8
    2d9a:	431c      	orrs	r4, r3
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    2d9c:	0020      	movs	r0, r4
    2d9e:	f000 ff4f 	bl	3c40 <bt_conn_lookup_handle>
    2da2:	1e05      	subs	r5, r0, #0
	if (!conn) {
    2da4:	d106      	bne.n	2db4 <bt_recv+0x5ac>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    2da6:	4b3e      	ldr	r3, [pc, #248]	; (2ea0 <bt_recv+0x698>)
    2da8:	9401      	str	r4, [sp, #4]
    2daa:	9302      	str	r3, [sp, #8]
    2dac:	4b3d      	ldr	r3, [pc, #244]	; (2ea4 <bt_recv+0x69c>)
    2dae:	9300      	str	r3, [sp, #0]
    2db0:	4b44      	ldr	r3, [pc, #272]	; (2ec4 <bt_recv+0x6bc>)
    2db2:	e01a      	b.n	2dea <bt_recv+0x5e2>
	}

	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
	       max_tx_time, max_rx_octets, max_rx_time);

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    2db4:	3004      	adds	r0, #4
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2db6:	4944      	ldr	r1, [pc, #272]	; (2ec8 <bt_recv+0x6c0>)
    2db8:	f00d fee0 	bl	10b7c <atomic_and>
    2dbc:	05c3      	lsls	r3, r0, #23
    2dbe:	d502      	bpl.n	2dc6 <bt_recv+0x5be>
		goto done;
	}

	update_conn_param(conn);
    2dc0:	0028      	movs	r0, r5
    2dc2:	f7fe fe73 	bl	1aac <update_conn_param>

done:
	bt_conn_unref(conn);
    2dc6:	0028      	movs	r0, r5
    2dc8:	e615      	b.n	29f6 <bt_recv+0x1ee>
}

static void le_phy_update_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2dca:	68ba      	ldr	r2, [r7, #8]
    2dcc:	7895      	ldrb	r5, [r2, #2]
    2dce:	7853      	ldrb	r3, [r2, #1]
    2dd0:	022d      	lsls	r5, r5, #8
    2dd2:	431d      	orrs	r5, r3
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    2dd4:	0028      	movs	r0, r5
    2dd6:	f000 ff33 	bl	3c40 <bt_conn_lookup_handle>
    2dda:	1e04      	subs	r4, r0, #0
	if (!conn) {
    2ddc:	d10b      	bne.n	2df6 <bt_recv+0x5ee>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    2dde:	4b30      	ldr	r3, [pc, #192]	; (2ea0 <bt_recv+0x698>)
    2de0:	9501      	str	r5, [sp, #4]
    2de2:	9302      	str	r3, [sp, #8]
    2de4:	4b2f      	ldr	r3, [pc, #188]	; (2ea4 <bt_recv+0x69c>)
    2de6:	9300      	str	r3, [sp, #0]
    2de8:	4b38      	ldr	r3, [pc, #224]	; (2ecc <bt_recv+0x6c4>)
    2dea:	4a31      	ldr	r2, [pc, #196]	; (2eb0 <bt_recv+0x6a8>)
    2dec:	4931      	ldr	r1, [pc, #196]	; (2eb4 <bt_recv+0x6ac>)
    2dee:	4833      	ldr	r0, [pc, #204]	; (2ebc <bt_recv+0x6b4>)
    2df0:	f7fe fd50 	bl	1894 <printk>
    2df4:	e590      	b.n	2918 <bt_recv+0x110>
    2df6:	2181      	movs	r1, #129	; 0x81
	}

	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
	       evt->status, evt->tx_phy, evt->rx_phy);

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    2df8:	1d05      	adds	r5, r0, #4
    2dfa:	4249      	negs	r1, r1
    2dfc:	0028      	movs	r0, r5
    2dfe:	f00d febd 	bl	10b7c <atomic_and>
    2e02:	0603      	lsls	r3, r0, #24
    2e04:	d400      	bmi.n	2e08 <bt_recv+0x600>
    2e06:	e5f5      	b.n	29f4 <bt_recv+0x1ec>
		goto done;
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2e08:	4b24      	ldr	r3, [pc, #144]	; (2e9c <bt_recv+0x694>)
    2e0a:	3370      	adds	r3, #112	; 0x70
    2e0c:	781a      	ldrb	r2, [r3, #0]
    2e0e:	2320      	movs	r3, #32
    2e10:	421a      	tst	r2, r3
    2e12:	d00d      	beq.n	2e30 <bt_recv+0x628>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    2e14:	0022      	movs	r2, r4
    2e16:	3270      	adds	r2, #112	; 0x70

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
		goto done;
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2e18:	7812      	ldrb	r2, [r2, #0]
    2e1a:	421a      	tst	r2, r3
    2e1c:	d008      	beq.n	2e30 <bt_recv+0x628>
	    BT_FEAT_LE_DLE(conn->le.features)) {
		int err;

		err = hci_le_set_data_len(conn);
    2e1e:	0020      	movs	r0, r4
    2e20:	f7ff fbd4 	bl	25cc <hci_le_set_data_len.isra.24>
		if (!err) {
    2e24:	2800      	cmp	r0, #0
    2e26:	d103      	bne.n	2e30 <bt_recv+0x628>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e28:	2180      	movs	r1, #128	; 0x80
    2e2a:	0028      	movs	r0, r5
    2e2c:	0049      	lsls	r1, r1, #1
    2e2e:	e749      	b.n	2cc4 <bt_recv+0x4bc>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
			goto done;
		}
	}

	update_conn_param(conn);
    2e30:	0020      	movs	r0, r4
    2e32:	f7fe fe3b 	bl	1aac <update_conn_param>
    2e36:	e5dd      	b.n	29f4 <bt_recv+0x1ec>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2e38:	2111      	movs	r1, #17
    2e3a:	4d18      	ldr	r5, [pc, #96]	; (2e9c <bt_recv+0x694>)
    2e3c:	68bc      	ldr	r4, [r7, #8]
    2e3e:	356c      	adds	r5, #108	; 0x6c
    2e40:	4249      	negs	r1, r1
    2e42:	0028      	movs	r0, r5
    2e44:	f00d fe9a 	bl	10b7c <atomic_and>

	BT_DBG("status: 0x%x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    2e48:	7823      	ldrb	r3, [r4, #0]
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	d108      	bne.n	2e60 <bt_recv+0x658>
		memcpy(pub_key, evt->key, 64);
    2e4e:	1c61      	adds	r1, r4, #1
    2e50:	2240      	movs	r2, #64	; 0x40
    2e52:	481f      	ldr	r0, [pc, #124]	; (2ed0 <bt_recv+0x6c8>)
    2e54:	f7fd fefb 	bl	c4e <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e58:	2108      	movs	r1, #8
    2e5a:	0028      	movs	r0, r5
    2e5c:	f00d fe83 	bl	10b66 <atomic_or>
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2e60:	4b1c      	ldr	r3, [pc, #112]	; (2ed4 <bt_recv+0x6cc>)
    2e62:	681d      	ldr	r5, [r3, #0]
    2e64:	2d00      	cmp	r5, #0
    2e66:	d100      	bne.n	2e6a <bt_recv+0x662>
    2e68:	e556      	b.n	2918 <bt_recv+0x110>
		cb->func(evt->status ? NULL : evt->key);
    2e6a:	2000      	movs	r0, #0
    2e6c:	7822      	ldrb	r2, [r4, #0]
    2e6e:	682b      	ldr	r3, [r5, #0]
    2e70:	4282      	cmp	r2, r0
    2e72:	d100      	bne.n	2e76 <bt_recv+0x66e>
    2e74:	1c60      	adds	r0, r4, #1
    2e76:	4798      	blx	r3
	if (!evt->status) {
		memcpy(pub_key, evt->key, 64);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2e78:	686d      	ldr	r5, [r5, #4]
    2e7a:	e7f3      	b.n	2e64 <bt_recv+0x65c>
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    2e7c:	4c16      	ldr	r4, [pc, #88]	; (2ed8 <bt_recv+0x6d0>)
    2e7e:	68ba      	ldr	r2, [r7, #8]
    2e80:	6823      	ldr	r3, [r4, #0]
    2e82:	2b00      	cmp	r3, #0
    2e84:	d100      	bne.n	2e88 <bt_recv+0x680>
    2e86:	e547      	b.n	2918 <bt_recv+0x110>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2e88:	2000      	movs	r0, #0
    2e8a:	7811      	ldrb	r1, [r2, #0]
    2e8c:	4281      	cmp	r1, r0
    2e8e:	d100      	bne.n	2e92 <bt_recv+0x68a>
    2e90:	1c50      	adds	r0, r2, #1
    2e92:	4798      	blx	r3
		dh_key_cb = NULL;
    2e94:	2300      	movs	r3, #0
    2e96:	6023      	str	r3, [r4, #0]
    2e98:	e53e      	b.n	2918 <bt_recv+0x110>
    2e9a:	46c0      	nop			; (mov r8, r8)
    2e9c:	20000198 	.word	0x20000198
    2ea0:	0001241d 	.word	0x0001241d
    2ea4:	000124a8 	.word	0x000124a8
    2ea8:	00014480 	.word	0x00014480
    2eac:	000143bb 	.word	0x000143bb
    2eb0:	0001246d 	.word	0x0001246d
    2eb4:	000123e3 	.word	0x000123e3
    2eb8:	00014454 	.word	0x00014454
    2ebc:	00012805 	.word	0x00012805
    2ec0:	00002020 	.word	0x00002020
    2ec4:	000143dd 	.word	0x000143dd
    2ec8:	fffffeff 	.word	0xfffffeff
    2ecc:	00014366 	.word	0x00014366
    2ed0:	200008f4 	.word	0x200008f4
    2ed4:	200008ec 	.word	0x200008ec
    2ed8:	20000938 	.word	0x20000938
	return 0;
}

static void le_adv_report(struct net_buf *buf)
{
	u8_t num_reports = net_buf_pull_u8(buf);
    2edc:	9806      	ldr	r0, [sp, #24]
    2ede:	f00d fb9a 	bl	10616 <net_buf_simple_pull_u8>
    2ee2:	9009      	str	r0, [sp, #36]	; 0x24
	struct bt_hci_evt_le_advertising_info *info;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    2ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d100      	bne.n	2eec <bt_recv+0x6e4>
    2eea:	e515      	b.n	2918 <bt_recv+0x110>
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
    2eec:	68bb      	ldr	r3, [r7, #8]
		net_buf_pull(buf, sizeof(*info));
    2eee:	2109      	movs	r1, #9
    2ef0:	9806      	ldr	r0, [sp, #24]

	while (num_reports--) {
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
    2ef2:	9307      	str	r3, [sp, #28]
		net_buf_pull(buf, sizeof(*info));
    2ef4:	f00d fb87 	bl	10606 <net_buf_simple_pull>

		BT_DBG("%s event %u, len %u, rssi %d dBm",
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);
    2ef8:	9b07      	ldr	r3, [sp, #28]

		if (scan_dev_found_cb) {
    2efa:	4e6b      	ldr	r6, [pc, #428]	; (30a8 <bt_recv+0x8a0>)

		BT_DBG("%s event %u, len %u, rssi %d dBm",
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);
    2efc:	3301      	adds	r3, #1
    2efe:	9308      	str	r3, [sp, #32]

		if (scan_dev_found_cb) {
    2f00:	6833      	ldr	r3, [r6, #0]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d01c      	beq.n	2f40 <bt_recv+0x738>
		s8_t rssi;

		info = (void *)buf->data;
		net_buf_pull(buf, sizeof(*info));

		rssi = info->data[info->length];
    2f06:	9b07      	ldr	r3, [sp, #28]
    2f08:	9a07      	ldr	r2, [sp, #28]
    2f0a:	7a1b      	ldrb	r3, [r3, #8]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2f0c:	9806      	ldr	r0, [sp, #24]
    2f0e:	18d3      	adds	r3, r2, r3
    2f10:	7a5d      	ldrb	r5, [r3, #9]
    2f12:	f00d fb93 	bl	1063c <net_buf_simple_headroom>
	state->len = buf->len;
    2f16:	89bb      	ldrh	r3, [r7, #12]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2f18:	0004      	movs	r4, r0
	state->len = buf->len;
    2f1a:	930a      	str	r3, [sp, #40]	; 0x28
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    2f1c:	9b07      	ldr	r3, [sp, #28]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    2f1e:	b269      	sxtb	r1, r5
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    2f20:	7a1b      	ldrb	r3, [r3, #8]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    2f22:	6836      	ldr	r6, [r6, #0]
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    2f24:	81bb      	strh	r3, [r7, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    2f26:	9b07      	ldr	r3, [sp, #28]
    2f28:	9808      	ldr	r0, [sp, #32]
    2f2a:	781a      	ldrb	r2, [r3, #0]
    2f2c:	9b06      	ldr	r3, [sp, #24]
    2f2e:	47b0      	blx	r6
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2f30:	003b      	movs	r3, r7
    2f32:	b2a4      	uxth	r4, r4
    2f34:	3310      	adds	r3, #16
    2f36:	191c      	adds	r4, r3, r4
	buf->len = state->len;
    2f38:	466b      	mov	r3, sp
    2f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2f3c:	60bc      	str	r4, [r7, #8]
	buf->len = state->len;
    2f3e:	81bb      	strh	r3, [r7, #12]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2f40:	4d5a      	ldr	r5, [pc, #360]	; (30ac <bt_recv+0x8a4>)

			net_buf_simple_restore(&buf->b, &state);
		}

#if defined(CONFIG_BLUETOOTH_CONN)
		check_pending_conn(addr, &info->addr, info->evt_type);
    2f42:	9b07      	ldr	r3, [sp, #28]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2f44:	002e      	movs	r6, r5
    2f46:	366c      	adds	r6, #108	; 0x6c
    2f48:	2108      	movs	r1, #8
    2f4a:	0030      	movs	r0, r6

			net_buf_simple_restore(&buf->b, &state);
		}

#if defined(CONFIG_BLUETOOTH_CONN)
		check_pending_conn(addr, &info->addr, info->evt_type);
    2f4c:	781c      	ldrb	r4, [r3, #0]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2f4e:	f7fe fd9f 	bl	1a90 <atomic_test_bit>
    2f52:	2800      	cmp	r0, #0
    2f54:	d177      	bne.n	3046 <bt_recv+0x83e>
		return;
	}

	/* Return if event is not connectable */
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    2f56:	2c01      	cmp	r4, #1
    2f58:	d875      	bhi.n	3046 <bt_recv+0x83e>
		return;
	}

	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    2f5a:	2101      	movs	r1, #1
    2f5c:	9808      	ldr	r0, [sp, #32]
    2f5e:	f000 febf 	bl	3ce0 <bt_conn_lookup_state_le>
    2f62:	1e04      	subs	r4, r0, #0
	if (!conn) {
    2f64:	d06f      	beq.n	3046 <bt_recv+0x83e>
		return;
	}

	if (bt_hci_stop_scanning()) {
    2f66:	f7fe fea1 	bl	1cac <bt_hci_stop_scanning>
    2f6a:	2800      	cmp	r0, #0
    2f6c:	d15d      	bne.n	302a <bt_recv+0x822>
	} else {
		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    2f6e:	2102      	movs	r1, #2
    2f70:	0030      	movs	r0, r6
    2f72:	f7fe fd8d 	bl	1a90 <atomic_test_bit>
    2f76:	2800      	cmp	r0, #0
    2f78:	d002      	beq.n	2f80 <bt_recv+0x778>
			set_random_address(&bt_dev.id_addr.a);
    2f7a:	1c68      	adds	r0, r5, #1
    2f7c:	f7fe fe56 	bl	1c2c <set_random_address>
		}

		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    2f80:	0023      	movs	r3, r4
    2f82:	3357      	adds	r3, #87	; 0x57
    2f84:	2207      	movs	r2, #7
    2f86:	4949      	ldr	r1, [pc, #292]	; (30ac <bt_recv+0x8a4>)
    2f88:	0018      	movs	r0, r3
    2f8a:	930b      	str	r3, [sp, #44]	; 0x2c
    2f8c:	f7fd fe5f 	bl	c4e <memcpy>
	}

	bt_addr_le_copy(&conn->le.resp_addr, addr);
    2f90:	0023      	movs	r3, r4
    2f92:	335e      	adds	r3, #94	; 0x5e
    2f94:	2207      	movs	r2, #7
    2f96:	9908      	ldr	r1, [sp, #32]
    2f98:	0018      	movs	r0, r3
    2f9a:	930a      	str	r3, [sp, #40]	; 0x28
    2f9c:	f7fd fe57 	bl	c4e <memcpy>
static int hci_le_create_conn(const struct bt_conn *conn)
{
	struct net_buf *buf;
	struct bt_hci_cp_le_create_conn *cp;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    2fa0:	2119      	movs	r1, #25
    2fa2:	4843      	ldr	r0, [pc, #268]	; (30b0 <bt_recv+0x8a8>)
    2fa4:	f7fe fde0 	bl	1b68 <bt_hci_cmd_create>
    2fa8:	1e05      	subs	r5, r0, #0
	if (!buf) {
    2faa:	d03e      	beq.n	302a <bt_recv+0x822>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2fac:	2119      	movs	r1, #25
    2fae:	3008      	adds	r0, #8
    2fb0:	f00d fb08 	bl	105c4 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    2fb4:	2219      	movs	r2, #25
    2fb6:	2100      	movs	r1, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2fb8:	0006      	movs	r6, r0
	memset(cp, 0, sizeof(*cp));
    2fba:	f7fd fe72 	bl	ca2 <memset>

	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    2fbe:	2360      	movs	r3, #96	; 0x60
    2fc0:	2200      	movs	r2, #0
    2fc2:	7033      	strb	r3, [r6, #0]
	cp->scan_window = cp->scan_interval;
    2fc4:	70b3      	strb	r3, [r6, #2]
    2fc6:	2300      	movs	r3, #0

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    2fc8:	7072      	strb	r2, [r6, #1]
	cp->scan_window = cp->scan_interval;
    2fca:	70f3      	strb	r3, [r6, #3]
    2fcc:	2207      	movs	r2, #7
    2fce:	990a      	ldr	r1, [sp, #40]	; 0x28

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    2fd0:	1d70      	adds	r0, r6, #5
    2fd2:	f7fd fe3c 	bl	c4e <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    2fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2fd8:	2200      	movs	r2, #0
	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
    2fda:	781b      	ldrb	r3, [r3, #0]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2fdc:	0029      	movs	r1, r5
	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
    2fde:	7333      	strb	r3, [r6, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    2fe0:	0023      	movs	r3, r4
    2fe2:	3368      	adds	r3, #104	; 0x68
    2fe4:	881b      	ldrh	r3, [r3, #0]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2fe6:	4832      	ldr	r0, [pc, #200]	; (30b0 <bt_recv+0x8a8>)
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    2fe8:	7373      	strb	r3, [r6, #13]
    2fea:	0a1b      	lsrs	r3, r3, #8
    2fec:	73b3      	strb	r3, [r6, #14]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    2fee:	0023      	movs	r3, r4
    2ff0:	336a      	adds	r3, #106	; 0x6a
    2ff2:	881b      	ldrh	r3, [r3, #0]
    2ff4:	73f3      	strb	r3, [r6, #15]
    2ff6:	0a1b      	lsrs	r3, r3, #8
    2ff8:	7433      	strb	r3, [r6, #16]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    2ffa:	0023      	movs	r3, r4
    2ffc:	336c      	adds	r3, #108	; 0x6c
    2ffe:	881b      	ldrh	r3, [r3, #0]
    3000:	7473      	strb	r3, [r6, #17]
    3002:	0a1b      	lsrs	r3, r3, #8
    3004:	74b3      	strb	r3, [r6, #18]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3006:	0023      	movs	r3, r4
    3008:	336e      	adds	r3, #110	; 0x6e
    300a:	881b      	ldrh	r3, [r3, #0]
    300c:	74f3      	strb	r3, [r6, #19]
    300e:	0a1b      	lsrs	r3, r3, #8
    3010:	7533      	strb	r3, [r6, #20]

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3012:	f7fe fdcf 	bl	1bb4 <bt_hci_cmd_send_sync>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
	}

	bt_addr_le_copy(&conn->le.resp_addr, addr);

	if (hci_le_create_conn(conn)) {
    3016:	2800      	cmp	r0, #0
    3018:	d107      	bne.n	302a <bt_recv+0x822>
		goto failed;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT);
    301a:	0020      	movs	r0, r4
    301c:	2102      	movs	r1, #2
    301e:	f000 fd55 	bl	3acc <bt_conn_set_state>
	bt_conn_unref(conn);
    3022:	0020      	movs	r0, r4
    3024:	f000 fe80 	bl	3d28 <bt_conn_unref>
    3028:	e00d      	b.n	3046 <bt_recv+0x83e>
	return;

failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    302a:	0023      	movs	r3, r4
    302c:	221f      	movs	r2, #31
    302e:	334c      	adds	r3, #76	; 0x4c
    3030:	701a      	strb	r2, [r3, #0]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3032:	2100      	movs	r1, #0
    3034:	0020      	movs	r0, r4
    3036:	f000 fd49 	bl	3acc <bt_conn_set_state>
	bt_conn_unref(conn);
    303a:	0020      	movs	r0, r4
    303c:	f000 fe74 	bl	3d28 <bt_conn_unref>
	bt_le_scan_update(false);
    3040:	2000      	movs	r0, #0
    3042:	f7fe ff07 	bl	1e54 <bt_le_scan_update>
#endif /* CONFIG_BLUETOOTH_CONN */

		/* Get next report iteration by moving pointer to right offset
		 * in buf according to spec 4.2, Vol 2, Part E, 7.7.65.2.
		 */
		net_buf_pull(buf, info->length + sizeof(rssi));
    3046:	9b07      	ldr	r3, [sp, #28]
    3048:	9806      	ldr	r0, [sp, #24]
    304a:	7a19      	ldrb	r1, [r3, #8]
    304c:	3101      	adds	r1, #1
    304e:	f00d fada 	bl	10606 <net_buf_simple_pull>
    3052:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3054:	3b01      	subs	r3, #1
    3056:	b2db      	uxtb	r3, r3
    3058:	9309      	str	r3, [sp, #36]	; 0x24
    305a:	e743      	b.n	2ee4 <bt_recv+0x6dc>
		break;
	case BT_HCI_EVT_LE_ADVERTISING_REPORT:
		le_adv_report(buf);
		break;
	default:
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    305c:	89bd      	ldrh	r5, [r7, #12]
    305e:	68b8      	ldr	r0, [r7, #8]
    3060:	0029      	movs	r1, r5
    3062:	f7fe fc41 	bl	18e8 <bt_hex>
    3066:	4b13      	ldr	r3, [pc, #76]	; (30b4 <bt_recv+0x8ac>)
    3068:	9003      	str	r0, [sp, #12]
    306a:	9304      	str	r3, [sp, #16]
    306c:	4b12      	ldr	r3, [pc, #72]	; (30b8 <bt_recv+0x8b0>)
    306e:	9502      	str	r5, [sp, #8]
    3070:	9300      	str	r3, [sp, #0]
    3072:	9401      	str	r4, [sp, #4]
    3074:	4b11      	ldr	r3, [pc, #68]	; (30bc <bt_recv+0x8b4>)
    3076:	4a12      	ldr	r2, [pc, #72]	; (30c0 <bt_recv+0x8b8>)
    3078:	4912      	ldr	r1, [pc, #72]	; (30c4 <bt_recv+0x8bc>)
    307a:	4813      	ldr	r0, [pc, #76]	; (30c8 <bt_recv+0x8c0>)
    307c:	e00f      	b.n	309e <bt_recv+0x896>
#endif /* CONFIG_BLUETOOTH_SMP || CONFIG_BLUETOOTH_BREDR */
	case BT_HCI_EVT_LE_META_EVENT:
		hci_le_meta_event(buf);
		break;
	default:
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    307e:	89bd      	ldrh	r5, [r7, #12]
    3080:	68b8      	ldr	r0, [r7, #8]
    3082:	0029      	movs	r1, r5
    3084:	f7fe fc30 	bl	18e8 <bt_hex>
    3088:	4b0a      	ldr	r3, [pc, #40]	; (30b4 <bt_recv+0x8ac>)
    308a:	9003      	str	r0, [sp, #12]
    308c:	9304      	str	r3, [sp, #16]
    308e:	4b0a      	ldr	r3, [pc, #40]	; (30b8 <bt_recv+0x8b0>)
    3090:	4a0b      	ldr	r2, [pc, #44]	; (30c0 <bt_recv+0x8b8>)
    3092:	9300      	str	r3, [sp, #0]
    3094:	490b      	ldr	r1, [pc, #44]	; (30c4 <bt_recv+0x8bc>)
    3096:	4b0d      	ldr	r3, [pc, #52]	; (30cc <bt_recv+0x8c4>)
    3098:	480d      	ldr	r0, [pc, #52]	; (30d0 <bt_recv+0x8c8>)
    309a:	9502      	str	r5, [sp, #8]
    309c:	9401      	str	r4, [sp, #4]
    309e:	f7fe fbf9 	bl	1894 <printk>
    30a2:	e439      	b.n	2918 <bt_recv+0x110>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    30a4:	b00f      	add	sp, #60	; 0x3c
    30a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30a8:	20000934 	.word	0x20000934
    30ac:	20000198 	.word	0x20000198
    30b0:	0000200d 	.word	0x0000200d
    30b4:	0001241d 	.word	0x0001241d
    30b8:	00012422 	.word	0x00012422
    30bc:	0001439b 	.word	0x0001439b
    30c0:	000123dc 	.word	0x000123dc
    30c4:	000123e3 	.word	0x000123e3
    30c8:	00012839 	.word	0x00012839
    30cc:	000143d3 	.word	0x000143d3
    30d0:	0001286e 	.word	0x0001286e

000030d4 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    30d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30d6:	b089      	sub	sp, #36	; 0x24
    30d8:	0004      	movs	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    30da:	6885      	ldr	r5, [r0, #8]
    30dc:	f7fe fcb8 	bl	1a50 <net_buf_user_data>

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    30e0:	7803      	ldrb	r3, [r0, #0]
    30e2:	2b01      	cmp	r3, #1
    30e4:	d008      	beq.n	30f8 <bt_recv_prio+0x24>
    30e6:	4b6d      	ldr	r3, [pc, #436]	; (329c <bt_recv_prio+0x1c8>)
    30e8:	4a6d      	ldr	r2, [pc, #436]	; (32a0 <bt_recv_prio+0x1cc>)
    30ea:	9301      	str	r3, [sp, #4]
    30ec:	4b6d      	ldr	r3, [pc, #436]	; (32a4 <bt_recv_prio+0x1d0>)
    30ee:	496e      	ldr	r1, [pc, #440]	; (32a8 <bt_recv_prio+0x1d4>)
    30f0:	9300      	str	r3, [sp, #0]
    30f2:	486e      	ldr	r0, [pc, #440]	; (32ac <bt_recv_prio+0x1d8>)
    30f4:	4b6e      	ldr	r3, [pc, #440]	; (32b0 <bt_recv_prio+0x1dc>)
    30f6:	e00a      	b.n	310e <bt_recv_prio+0x3a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    30f8:	89a2      	ldrh	r2, [r4, #12]
    30fa:	2a01      	cmp	r2, #1
    30fc:	d80c      	bhi.n	3118 <bt_recv_prio+0x44>
    30fe:	4b67      	ldr	r3, [pc, #412]	; (329c <bt_recv_prio+0x1c8>)
    3100:	4a67      	ldr	r2, [pc, #412]	; (32a0 <bt_recv_prio+0x1cc>)
    3102:	9301      	str	r3, [sp, #4]
    3104:	4b67      	ldr	r3, [pc, #412]	; (32a4 <bt_recv_prio+0x1d0>)
    3106:	4968      	ldr	r1, [pc, #416]	; (32a8 <bt_recv_prio+0x1d4>)
    3108:	9300      	str	r3, [sp, #0]
    310a:	486a      	ldr	r0, [pc, #424]	; (32b4 <bt_recv_prio+0x1e0>)
    310c:	4b68      	ldr	r3, [pc, #416]	; (32b0 <bt_recv_prio+0x1dc>)
    310e:	f7fe fbc1 	bl	1894 <printk>
    3112:	b662      	cpsie	i
    3114:	2004      	movs	r0, #4
    3116:	df02      	svc	2
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3118:	782a      	ldrb	r2, [r5, #0]
    311a:	2a13      	cmp	r2, #19
    311c:	d804      	bhi.n	3128 <bt_recv_prio+0x54>
    311e:	4093      	lsls	r3, r2
    3120:	228c      	movs	r2, #140	; 0x8c
    3122:	0312      	lsls	r2, r2, #12
    3124:	4213      	tst	r3, r2
    3126:	d108      	bne.n	313a <bt_recv_prio+0x66>
    3128:	4b5c      	ldr	r3, [pc, #368]	; (329c <bt_recv_prio+0x1c8>)
    312a:	4a5d      	ldr	r2, [pc, #372]	; (32a0 <bt_recv_prio+0x1cc>)
    312c:	9301      	str	r3, [sp, #4]
    312e:	4b5d      	ldr	r3, [pc, #372]	; (32a4 <bt_recv_prio+0x1d0>)
    3130:	495d      	ldr	r1, [pc, #372]	; (32a8 <bt_recv_prio+0x1d4>)
    3132:	9300      	str	r3, [sp, #0]
    3134:	4860      	ldr	r0, [pc, #384]	; (32b8 <bt_recv_prio+0x1e4>)
    3136:	4b5e      	ldr	r3, [pc, #376]	; (32b0 <bt_recv_prio+0x1dc>)
    3138:	e7e9      	b.n	310e <bt_recv_prio+0x3a>

	net_buf_pull(buf, sizeof(*hdr));
    313a:	0026      	movs	r6, r4
    313c:	3608      	adds	r6, #8
    313e:	2102      	movs	r1, #2
    3140:	0030      	movs	r0, r6
    3142:	f00d fa60 	bl	10606 <net_buf_simple_pull>

	switch (hdr->evt) {
    3146:	782b      	ldrb	r3, [r5, #0]
    3148:	2b0f      	cmp	r3, #15
    314a:	d118      	bne.n	317e <bt_recv_prio+0xaa>
	}
}

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    314c:	68a5      	ldr	r5, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    314e:	2104      	movs	r1, #4
}

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3150:	78ef      	ldrb	r7, [r5, #3]
    3152:	78ab      	ldrb	r3, [r5, #2]
    3154:	023f      	lsls	r7, r7, #8
    3156:	431f      	orrs	r7, r3
	u8_t ncmd = evt->ncmd;
    3158:	786b      	ldrb	r3, [r5, #1]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    315a:	0030      	movs	r0, r6

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t ncmd = evt->ncmd;
    315c:	9304      	str	r3, [sp, #16]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    315e:	f00d fa52 	bl	10606 <net_buf_simple_pull>

	hci_cmd_done(opcode, evt->status, buf);
    3162:	7829      	ldrb	r1, [r5, #0]
    3164:	0022      	movs	r2, r4
    3166:	0038      	movs	r0, r7
    3168:	f7fe fcb0 	bl	1acc <hci_cmd_done>

	/* Allow next command to be sent */
	if (ncmd) {
    316c:	9b04      	ldr	r3, [sp, #16]
    316e:	2b00      	cmp	r3, #0
    3170:	d100      	bne.n	3174 <bt_recv_prio+0xa0>
    3172:	e08d      	b.n	3290 <bt_recv_prio+0x1bc>

	hci_cmd_done(opcode, status, buf);

	/* Allow next command to be sent */
	if (ncmd) {
		k_sem_give(&bt_dev.ncmd_sem);
    3174:	4851      	ldr	r0, [pc, #324]	; (32bc <bt_recv_prio+0x1e8>)
    3176:	3098      	adds	r0, #152	; 0x98
    3178:	f00e fbb0 	bl	118dc <k_sem_give>
    317c:	e088      	b.n	3290 <bt_recv_prio+0x1bc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    317e:	2b13      	cmp	r3, #19
    3180:	d157      	bne.n	3232 <bt_recv_prio+0x15e>
    3182:	68a3      	ldr	r3, [r4, #8]
    3184:	9305      	str	r3, [sp, #20]
}

static void hci_num_completed_packets(struct net_buf *buf)
{
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
	u16_t i, num_handles = sys_le16_to_cpu(evt->num_handles);
    3186:	781b      	ldrb	r3, [r3, #0]
    3188:	9306      	str	r3, [sp, #24]
    318a:	2300      	movs	r3, #0
    318c:	9304      	str	r3, [sp, #16]

	BT_DBG("num_handles %u", num_handles);

	for (i = 0; i < num_handles; i++) {
    318e:	466b      	mov	r3, sp
    3190:	9a06      	ldr	r2, [sp, #24]
    3192:	8a1b      	ldrh	r3, [r3, #16]
    3194:	4293      	cmp	r3, r2
    3196:	d300      	bcc.n	319a <bt_recv_prio+0xc6>
    3198:	e07a      	b.n	3290 <bt_recv_prio+0x1bc>
    319a:	9b04      	ldr	r3, [sp, #16]
    319c:	9a05      	ldr	r2, [sp, #20]
    319e:	009b      	lsls	r3, r3, #2
    31a0:	18d3      	adds	r3, r2, r3
		u16_t handle, count;
		struct bt_conn *conn;
		unsigned int key;

		handle = sys_le16_to_cpu(evt->h[i].handle);
    31a2:	789f      	ldrb	r7, [r3, #2]
    31a4:	785a      	ldrb	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    31a6:	791d      	ldrb	r5, [r3, #4]
	for (i = 0; i < num_handles; i++) {
		u16_t handle, count;
		struct bt_conn *conn;
		unsigned int key;

		handle = sys_le16_to_cpu(evt->h[i].handle);
    31a8:	023f      	lsls	r7, r7, #8
    31aa:	4317      	orrs	r7, r2
		count = sys_le16_to_cpu(evt->h[i].count);
    31ac:	78da      	ldrb	r2, [r3, #3]
    31ae:	022d      	lsls	r5, r5, #8
    31b0:	4315      	orrs	r5, r2
    31b2:	9507      	str	r5, [sp, #28]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    31b4:	f3ef 8510 	mrs	r5, PRIMASK
    31b8:	b672      	cpsid	i

		BT_DBG("handle %u count %u", handle, count);

		key = irq_lock();

		conn = bt_conn_lookup_handle(handle);
    31ba:	0038      	movs	r0, r7
    31bc:	f000 fd40 	bl	3c40 <bt_conn_lookup_handle>
    31c0:	1e06      	subs	r6, r0, #0
		if (!conn) {
    31c2:	d10e      	bne.n	31e2 <bt_recv_prio+0x10e>
			BT_ERR("No connection for handle %u", handle);
    31c4:	4b35      	ldr	r3, [pc, #212]	; (329c <bt_recv_prio+0x1c8>)
    31c6:	9701      	str	r7, [sp, #4]
    31c8:	9302      	str	r3, [sp, #8]
    31ca:	4b36      	ldr	r3, [pc, #216]	; (32a4 <bt_recv_prio+0x1d0>)
    31cc:	4a34      	ldr	r2, [pc, #208]	; (32a0 <bt_recv_prio+0x1cc>)
    31ce:	9300      	str	r3, [sp, #0]
    31d0:	4935      	ldr	r1, [pc, #212]	; (32a8 <bt_recv_prio+0x1d4>)
    31d2:	4b3b      	ldr	r3, [pc, #236]	; (32c0 <bt_recv_prio+0x1ec>)
    31d4:	483b      	ldr	r0, [pc, #236]	; (32c4 <bt_recv_prio+0x1f0>)
    31d6:	f7fe fb5d 	bl	1894 <printk>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    31da:	2d00      	cmp	r5, #0
    31dc:	d126      	bne.n	322c <bt_recv_prio+0x158>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    31de:	b662      	cpsie	i
    31e0:	e024      	b.n	322c <bt_recv_prio+0x158>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    31e2:	2d00      	cmp	r5, #0
    31e4:	d100      	bne.n	31e8 <bt_recv_prio+0x114>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    31e6:	b662      	cpsie	i
		return -EINVAL;
	}
}

int bt_recv_prio(struct net_buf *buf)
{
    31e8:	9d07      	ldr	r5, [sp, #28]
			continue;
		}

		irq_unlock(key);

		while (count--) {
    31ea:	2d00      	cmp	r5, #0
    31ec:	d01b      	beq.n	3226 <bt_recv_prio+0x152>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    31ee:	f3ef 8310 	mrs	r3, PRIMASK
    31f2:	b672      	cpsid	i
    31f4:	6931      	ldr	r1, [r6, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    31f6:	2900      	cmp	r1, #0
    31f8:	d006      	beq.n	3208 <bt_recv_prio+0x134>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    31fa:	680a      	ldr	r2, [r1, #0]
	if (list->tail == node) {
    31fc:	6970      	ldr	r0, [r6, #20]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    31fe:	6132      	str	r2, [r6, #16]
	if (list->tail == node) {
    3200:	4281      	cmp	r1, r0
    3202:	d137      	bne.n	3274 <bt_recv_prio+0x1a0>
		list->tail = list->head;
    3204:	6172      	str	r2, [r6, #20]
    3206:	e035      	b.n	3274 <bt_recv_prio+0x1a0>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3208:	2b00      	cmp	r3, #0
    320a:	d102      	bne.n	3212 <bt_recv_prio+0x13e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    320c:	b662      	cpsie	i

			key = irq_lock();
			node = sys_slist_get(&conn->tx_pending);
			irq_unlock(key);

			if (!node) {
    320e:	2900      	cmp	r1, #0
    3210:	d132      	bne.n	3278 <bt_recv_prio+0x1a4>
				BT_ERR("packets count mismatch");
    3212:	4b22      	ldr	r3, [pc, #136]	; (329c <bt_recv_prio+0x1c8>)
    3214:	4a22      	ldr	r2, [pc, #136]	; (32a0 <bt_recv_prio+0x1cc>)
    3216:	9301      	str	r3, [sp, #4]
    3218:	4b22      	ldr	r3, [pc, #136]	; (32a4 <bt_recv_prio+0x1d0>)
    321a:	4923      	ldr	r1, [pc, #140]	; (32a8 <bt_recv_prio+0x1d4>)
    321c:	9300      	str	r3, [sp, #0]
    321e:	482a      	ldr	r0, [pc, #168]	; (32c8 <bt_recv_prio+0x1f4>)
    3220:	4b27      	ldr	r3, [pc, #156]	; (32c0 <bt_recv_prio+0x1ec>)
    3222:	f7fe fb37 	bl	1894 <printk>

			k_fifo_put(&conn->tx_notify, node);
			k_sem_give(bt_conn_get_pkts(conn));
		}

		bt_conn_unref(conn);
    3226:	0030      	movs	r0, r6
    3228:	f000 fd7e 	bl	3d28 <bt_conn_unref>
    322c:	9b04      	ldr	r3, [sp, #16]
    322e:	3301      	adds	r3, #1
    3230:	e7ac      	b.n	318c <bt_recv_prio+0xb8>
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    3232:	2b0e      	cmp	r3, #14
    3234:	d112      	bne.n	325c <bt_recv_prio+0x188>
	}
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3236:	68a3      	ldr	r3, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t status, ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    3238:	2103      	movs	r1, #3
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    323a:	789d      	ldrb	r5, [r3, #2]
    323c:	785a      	ldrb	r2, [r3, #1]
    323e:	022d      	lsls	r5, r5, #8
	u8_t status, ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    3240:	0030      	movs	r0, r6
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3242:	4315      	orrs	r5, r2
	u8_t status, ncmd = evt->ncmd;
    3244:	781f      	ldrb	r7, [r3, #0]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    3246:	f00d f9de 	bl	10606 <net_buf_simple_pull>
	/* All command return parameters have a 1-byte status in the
	 * beginning, so we can safely make this generalization.
	 */
	status = buf->data[0];

	hci_cmd_done(opcode, status, buf);
    324a:	68a3      	ldr	r3, [r4, #8]
    324c:	0022      	movs	r2, r4
    324e:	7819      	ldrb	r1, [r3, #0]
    3250:	0028      	movs	r0, r5
    3252:	f7fe fc3b 	bl	1acc <hci_cmd_done>

	/* Allow next command to be sent */
	if (ncmd) {
    3256:	2f00      	cmp	r7, #0
    3258:	d01a      	beq.n	3290 <bt_recv_prio+0x1bc>
    325a:	e78b      	b.n	3174 <bt_recv_prio+0xa0>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		hci_num_completed_packets(buf);
		break;
#endif /* CONFIG_BLUETOOTH_CONN */
	default:
		net_buf_unref(buf);
    325c:	0020      	movs	r0, r4
    325e:	f00d f98f 	bl	10580 <net_buf_unref>
		BT_ASSERT(0);
    3262:	4b0e      	ldr	r3, [pc, #56]	; (329c <bt_recv_prio+0x1c8>)
    3264:	4a0e      	ldr	r2, [pc, #56]	; (32a0 <bt_recv_prio+0x1cc>)
    3266:	9301      	str	r3, [sp, #4]
    3268:	4b0e      	ldr	r3, [pc, #56]	; (32a4 <bt_recv_prio+0x1d0>)
    326a:	490f      	ldr	r1, [pc, #60]	; (32a8 <bt_recv_prio+0x1d4>)
    326c:	9300      	str	r3, [sp, #0]
    326e:	4817      	ldr	r0, [pc, #92]	; (32cc <bt_recv_prio+0x1f8>)
    3270:	4b0f      	ldr	r3, [pc, #60]	; (32b0 <bt_recv_prio+0x1dc>)
    3272:	e74c      	b.n	310e <bt_recv_prio+0x3a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3274:	2b00      	cmp	r3, #0
    3276:	d0c9      	beq.n	320c <bt_recv_prio+0x138>
			if (!node) {
				BT_ERR("packets count mismatch");
				break;
			}

			k_fifo_put(&conn->tx_notify, node);
    3278:	0030      	movs	r0, r6
    327a:	3018      	adds	r0, #24
    327c:	f00e f8c0 	bl	11400 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3280:	0030      	movs	r0, r6
    3282:	f000 f9c5 	bl	3610 <bt_conn_get_pkts>
    3286:	3d01      	subs	r5, #1
    3288:	f00e fb28 	bl	118dc <k_sem_give>
    328c:	b2ad      	uxth	r5, r5
    328e:	e7ac      	b.n	31ea <bt_recv_prio+0x116>
		net_buf_unref(buf);
		BT_ASSERT(0);
		return -EINVAL;
	}

	net_buf_unref(buf);
    3290:	0020      	movs	r0, r4
    3292:	f00d f975 	bl	10580 <net_buf_unref>

	return 0;
}
    3296:	2000      	movs	r0, #0
    3298:	b009      	add	sp, #36	; 0x24
    329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    329c:	0001241d 	.word	0x0001241d
    32a0:	0001246d 	.word	0x0001246d
    32a4:	000124a8 	.word	0x000124a8
    32a8:	000123e3 	.word	0x000123e3
    32ac:	00012903 	.word	0x00012903
    32b0:	0001438e 	.word	0x0001438e
    32b4:	00012947 	.word	0x00012947
    32b8:	000129f7 	.word	0x000129f7
    32bc:	20000198 	.word	0x20000198
    32c0:	00014466 	.word	0x00014466
    32c4:	00012981 	.word	0x00012981
    32c8:	000129ad 	.word	0x000129ad
    32cc:	000129d4 	.word	0x000129d4

000032d0 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    32d0:	4a09      	ldr	r2, [pc, #36]	; (32f8 <bt_hci_driver_register+0x28>)
    32d2:	32d8      	adds	r2, #216	; 0xd8
    32d4:	6813      	ldr	r3, [r2, #0]
    32d6:	2b00      	cmp	r3, #0
    32d8:	d108      	bne.n	32ec <bt_hci_driver_register+0x1c>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    32da:	6881      	ldr	r1, [r0, #8]
    32dc:	2900      	cmp	r1, #0
    32de:	d007      	beq.n	32f0 <bt_hci_driver_register+0x20>
    32e0:	68c1      	ldr	r1, [r0, #12]
    32e2:	2900      	cmp	r1, #0
    32e4:	d004      	beq.n	32f0 <bt_hci_driver_register+0x20>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    32e6:	6010      	str	r0, [r2, #0]
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    32e8:	0018      	movs	r0, r3
    32ea:	e003      	b.n	32f4 <bt_hci_driver_register+0x24>
}

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
		return -EALREADY;
    32ec:	2045      	movs	r0, #69	; 0x45
    32ee:	e000      	b.n	32f2 <bt_hci_driver_register+0x22>
	}

	if (!drv->open || !drv->send) {
		return -EINVAL;
    32f0:	2016      	movs	r0, #22
    32f2:	4240      	negs	r0, r0

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
}
    32f4:	4770      	bx	lr
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	20000198 	.word	0x20000198

000032fc <bt_enable>:
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    32fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
    32fe:	4d2d      	ldr	r5, [pc, #180]	; (33b4 <bt_enable+0xb8>)
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3300:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
    3302:	002e      	movs	r6, r5
    3304:	36d8      	adds	r6, #216	; 0xd8
    3306:	6833      	ldr	r3, [r6, #0]
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3308:	9007      	str	r0, [sp, #28]
	int err;

	if (!bt_dev.drv) {
    330a:	2b00      	cmp	r3, #0
    330c:	d10b      	bne.n	3326 <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    330e:	4b2a      	ldr	r3, [pc, #168]	; (33b8 <bt_enable+0xbc>)
    3310:	4a2a      	ldr	r2, [pc, #168]	; (33bc <bt_enable+0xc0>)
    3312:	9301      	str	r3, [sp, #4]
    3314:	4b2a      	ldr	r3, [pc, #168]	; (33c0 <bt_enable+0xc4>)
    3316:	492b      	ldr	r1, [pc, #172]	; (33c4 <bt_enable+0xc8>)
    3318:	9300      	str	r3, [sp, #0]
    331a:	482b      	ldr	r0, [pc, #172]	; (33c8 <bt_enable+0xcc>)
    331c:	4b2b      	ldr	r3, [pc, #172]	; (33cc <bt_enable+0xd0>)
    331e:	f7fe fab9 	bl	1894 <printk>
		return -ENODEV;
    3322:	2413      	movs	r4, #19
    3324:	e041      	b.n	33aa <bt_enable+0xae>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3326:	0028      	movs	r0, r5
    3328:	2101      	movs	r1, #1
    332a:	306c      	adds	r0, #108	; 0x6c
    332c:	f00d fc1b 	bl	10b66 <atomic_or>

	return (old & mask) != 0;
    3330:	2701      	movs	r7, #1
    3332:	4038      	ands	r0, r7
    3334:	1e04      	subs	r4, r0, #0
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3336:	d137      	bne.n	33a8 <bt_enable+0xac>
		return -EALREADY;
	}

	ready_cb = cb;
    3338:	4b25      	ldr	r3, [pc, #148]	; (33d0 <bt_enable+0xd4>)
    333a:	9a07      	ldr	r2, [sp, #28]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    333c:	4925      	ldr	r1, [pc, #148]	; (33d4 <bt_enable+0xd8>)

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
	}

	ready_cb = cb;
    333e:	601a      	str	r2, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    3340:	2309      	movs	r3, #9
    3342:	22eb      	movs	r2, #235	; 0xeb
    3344:	425b      	negs	r3, r3
    3346:	9005      	str	r0, [sp, #20]
    3348:	9004      	str	r0, [sp, #16]
    334a:	9303      	str	r3, [sp, #12]
    334c:	9002      	str	r0, [sp, #8]
    334e:	9001      	str	r0, [sp, #4]
    3350:	9000      	str	r0, [sp, #0]
    3352:	4b21      	ldr	r3, [pc, #132]	; (33d8 <bt_enable+0xdc>)
    3354:	0092      	lsls	r2, r2, #2
    3356:	4821      	ldr	r0, [pc, #132]	; (33dc <bt_enable+0xe0>)
    3358:	f00e fcb2 	bl	11cc0 <k_thread_create>

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    335c:	6833      	ldr	r3, [r6, #0]
    335e:	689b      	ldr	r3, [r3, #8]
    3360:	4798      	blx	r3
    3362:	1e06      	subs	r6, r0, #0
	if (err) {
    3364:	d00c      	beq.n	3380 <bt_enable+0x84>
		BT_ERR("HCI driver open failed (%d)", err);
    3366:	4b14      	ldr	r3, [pc, #80]	; (33b8 <bt_enable+0xbc>)
    3368:	9001      	str	r0, [sp, #4]
    336a:	9302      	str	r3, [sp, #8]
    336c:	4b14      	ldr	r3, [pc, #80]	; (33c0 <bt_enable+0xc4>)
    336e:	4a13      	ldr	r2, [pc, #76]	; (33bc <bt_enable+0xc0>)
    3370:	9300      	str	r3, [sp, #0]
    3372:	4914      	ldr	r1, [pc, #80]	; (33c4 <bt_enable+0xc8>)
    3374:	4b15      	ldr	r3, [pc, #84]	; (33cc <bt_enable+0xd0>)
    3376:	481a      	ldr	r0, [pc, #104]	; (33e0 <bt_enable+0xe4>)
    3378:	f7fe fa8c 	bl	1894 <printk>
		return err;
    337c:	0034      	movs	r4, r6
    337e:	e015      	b.n	33ac <bt_enable+0xb0>
	}

	if (!cb) {
    3380:	9b07      	ldr	r3, [sp, #28]
    3382:	2b00      	cmp	r3, #0
    3384:	d103      	bne.n	338e <bt_enable+0x92>
		return bt_init();
    3386:	f7fe fd8b 	bl	1ea0 <bt_init>
    338a:	0004      	movs	r4, r0
    338c:	e00e      	b.n	33ac <bt_enable+0xb0>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    338e:	0028      	movs	r0, r5
    3390:	0039      	movs	r1, r7
    3392:	3068      	adds	r0, #104	; 0x68
    3394:	f00d fbe7 	bl	10b66 <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3398:	4238      	tst	r0, r7
    339a:	d107      	bne.n	33ac <bt_enable+0xb0>
		k_fifo_put(&work_q->fifo, work);
    339c:	0029      	movs	r1, r5
    339e:	4811      	ldr	r0, [pc, #68]	; (33e4 <bt_enable+0xe8>)
    33a0:	3160      	adds	r1, #96	; 0x60
    33a2:	f00e f82d 	bl	11400 <k_queue_append>
    33a6:	e001      	b.n	33ac <bt_enable+0xb0>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
    33a8:	2445      	movs	r4, #69	; 0x45
    33aa:	4264      	negs	r4, r4
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    33ac:	0020      	movs	r0, r4
    33ae:	b009      	add	sp, #36	; 0x24
    33b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33b2:	46c0      	nop			; (mov r8, r8)
    33b4:	20000198 	.word	0x20000198
    33b8:	0001241d 	.word	0x0001241d
    33bc:	0001246d 	.word	0x0001246d
    33c0:	000124a8 	.word	0x000124a8
    33c4:	000123e3 	.word	0x000123e3
    33c8:	00012a35 	.word	0x00012a35
    33cc:	00014400 	.word	0x00014400
    33d0:	200008f0 	.word	0x200008f0
    33d4:	20001d6c 	.word	0x20001d6c
    33d8:	00002671 	.word	0x00002671
    33dc:	2000093c 	.word	0x2000093c
    33e0:	00012a5e 	.word	0x00012a5e
    33e4:	20001cf8 	.word	0x20001cf8

000033e8 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    33e8:	2000      	movs	r0, #0
    33ea:	4770      	bx	lr

000033ec <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    33ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ee:	b085      	sub	sp, #20
    33f0:	9201      	str	r2, [sp, #4]
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    33f2:	7802      	ldrb	r2, [r0, #0]
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    33f4:	9303      	str	r3, [sp, #12]
    33f6:	0004      	movs	r4, r0
    33f8:	000d      	movs	r5, r1
    33fa:	8843      	ldrh	r3, [r0, #2]
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    33fc:	07d2      	lsls	r2, r2, #31
    33fe:	d407      	bmi.n	3410 <bt_le_adv_start+0x24>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3400:	4a4b      	ldr	r2, [pc, #300]	; (3530 <bt_le_adv_start+0x144>)
    3402:	7b92      	ldrb	r2, [r2, #14]
    3404:	2a08      	cmp	r2, #8
    3406:	d803      	bhi.n	3410 <bt_le_adv_start+0x24>
    3408:	2b9f      	cmp	r3, #159	; 0x9f
    340a:	d801      	bhi.n	3410 <bt_le_adv_start+0x24>
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
    340c:	2616      	movs	r6, #22
    340e:	e025      	b.n	345c <bt_le_adv_start+0x70>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    3410:	88a2      	ldrh	r2, [r4, #4]
    3412:	4293      	cmp	r3, r2
    3414:	d8fa      	bhi.n	340c <bt_le_adv_start+0x20>
    3416:	2b1f      	cmp	r3, #31
    3418:	d9f8      	bls.n	340c <bt_le_adv_start+0x20>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    341a:	2380      	movs	r3, #128	; 0x80
    341c:	01db      	lsls	r3, r3, #7
    341e:	429a      	cmp	r2, r3
    3420:	d8f4      	bhi.n	340c <bt_le_adv_start+0x20>

	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3422:	4f43      	ldr	r7, [pc, #268]	; (3530 <bt_le_adv_start+0x144>)
    3424:	2105      	movs	r1, #5
    3426:	0038      	movs	r0, r7
    3428:	306c      	adds	r0, #108	; 0x6c
    342a:	f7fe fb31 	bl	1a90 <atomic_test_bit>
    342e:	1e06      	subs	r6, r0, #0
    3430:	d178      	bne.n	3524 <bt_le_adv_start+0x138>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    3432:	9a01      	ldr	r2, [sp, #4]
    3434:	0029      	movs	r1, r5
    3436:	483f      	ldr	r0, [pc, #252]	; (3534 <bt_le_adv_start+0x148>)
    3438:	f7fe fca4 	bl	1d84 <set_ad>
	if (err) {
    343c:	2800      	cmp	r0, #0
    343e:	d16f      	bne.n	3520 <bt_le_adv_start+0x134>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3440:	9b03      	ldr	r3, [sp, #12]
    3442:	2b00      	cmp	r3, #0
    3444:	d10c      	bne.n	3460 <bt_le_adv_start+0x74>
    3446:	7823      	ldrb	r3, [r4, #0]
    3448:	07db      	lsls	r3, r3, #31
    344a:	d409      	bmi.n	3460 <bt_le_adv_start+0x74>
		if (err) {
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    344c:	210f      	movs	r1, #15
    344e:	483a      	ldr	r0, [pc, #232]	; (3538 <bt_le_adv_start+0x14c>)
    3450:	f7fe fb8a 	bl	1b68 <bt_hci_cmd_create>
    3454:	9001      	str	r0, [sp, #4]
				sizeof(*set_param));
	if (!buf) {
    3456:	2800      	cmp	r0, #0
    3458:	d10a      	bne.n	3470 <bt_le_adv_start+0x84>
		return -ENOBUFS;
    345a:	2637      	movs	r6, #55	; 0x37
	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
    345c:	4276      	negs	r6, r6
    345e:	e063      	b.n	3528 <bt_le_adv_start+0x13c>
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    3460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3462:	9903      	ldr	r1, [sp, #12]
    3464:	4835      	ldr	r0, [pc, #212]	; (353c <bt_le_adv_start+0x150>)
    3466:	f7fe fc8d 	bl	1d84 <set_ad>
		if (err) {
    346a:	2800      	cmp	r0, #0
    346c:	d0ee      	beq.n	344c <bt_le_adv_start+0x60>
    346e:	e057      	b.n	3520 <bt_le_adv_start+0x134>
				sizeof(*set_param));
	if (!buf) {
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    3470:	9801      	ldr	r0, [sp, #4]
    3472:	210f      	movs	r1, #15
    3474:	3008      	adds	r0, #8
    3476:	f00d f8a5 	bl	105c4 <net_buf_simple_add>
    347a:	0005      	movs	r5, r0

	memset(set_param, 0, sizeof(*set_param));
    347c:	220f      	movs	r2, #15
    347e:	2100      	movs	r1, #0
    3480:	f7fd fc0f 	bl	ca2 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    3484:	78a3      	ldrb	r3, [r4, #2]
    3486:	702b      	strb	r3, [r5, #0]
    3488:	78e3      	ldrb	r3, [r4, #3]
    348a:	706b      	strb	r3, [r5, #1]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    348c:	7923      	ldrb	r3, [r4, #4]
    348e:	70ab      	strb	r3, [r5, #2]
    3490:	7963      	ldrb	r3, [r4, #5]
    3492:	70eb      	strb	r3, [r5, #3]
	set_param->channel_map  = 0x07;
    3494:	2307      	movs	r3, #7
    3496:	736b      	strb	r3, [r5, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3498:	7823      	ldrb	r3, [r4, #0]
    349a:	07db      	lsls	r3, r3, #31
    349c:	d50d      	bpl.n	34ba <bt_le_adv_start+0xce>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (atomic_test_bit(bt_dev.flags,
    349e:	0038      	movs	r0, r7
    34a0:	2102      	movs	r1, #2
    34a2:	306c      	adds	r0, #108	; 0x6c
    34a4:	f7fe faf4 	bl	1a90 <atomic_test_bit>
    34a8:	2800      	cmp	r0, #0
    34aa:	d002      	beq.n	34b2 <bt_le_adv_start+0xc6>
					    BT_DEV_ID_STATIC_RANDOM)) {
				set_random_address(&bt_dev.id_addr.a);
    34ac:	1c78      	adds	r0, r7, #1
    34ae:	f7fe fbbd 	bl	1c2c <set_random_address>
			}

			set_param->own_addr_type = bt_dev.id_addr.type;
    34b2:	783b      	ldrb	r3, [r7, #0]
    34b4:	716b      	strb	r3, [r5, #5]
		}

		set_param->type = BT_LE_ADV_IND;
    34b6:	2300      	movs	r3, #0
    34b8:	e01c      	b.n	34f4 <bt_le_adv_start+0x108>
	} else {
		if (param->own_addr) {
    34ba:	68a0      	ldr	r0, [r4, #8]
    34bc:	2800      	cmp	r0, #0
    34be:	d006      	beq.n	34ce <bt_le_adv_start+0xe2>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    34c0:	223f      	movs	r2, #63	; 0x3f
    34c2:	7943      	ldrb	r3, [r0, #5]
    34c4:	4393      	bics	r3, r2
    34c6:	d1a1      	bne.n	340c <bt_le_adv_start+0x20>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    34c8:	f7fe fbb0 	bl	1c2c <set_random_address>
    34cc:	e001      	b.n	34d2 <bt_le_adv_start+0xe6>
		} else {
			err = le_set_private_addr();
    34ce:	f7fe fbdb 	bl	1c88 <le_set_private_addr>
    34d2:	9002      	str	r0, [sp, #8]
		}

		if (err) {
    34d4:	9b02      	ldr	r3, [sp, #8]
    34d6:	2b00      	cmp	r3, #0
    34d8:	d004      	beq.n	34e4 <bt_le_adv_start+0xf8>
			net_buf_unref(buf);
    34da:	9801      	ldr	r0, [sp, #4]
    34dc:	f00d f850 	bl	10580 <net_buf_unref>
			return err;
    34e0:	9e02      	ldr	r6, [sp, #8]
    34e2:	e021      	b.n	3528 <bt_le_adv_start+0x13c>
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    34e4:	2301      	movs	r3, #1
    34e6:	716b      	strb	r3, [r5, #5]

		if (sd) {
    34e8:	9b03      	ldr	r3, [sp, #12]
    34ea:	2b00      	cmp	r3, #0
    34ec:	d001      	beq.n	34f2 <bt_le_adv_start+0x106>
			set_param->type = BT_LE_ADV_SCAN_IND;
    34ee:	2302      	movs	r3, #2
    34f0:	e000      	b.n	34f4 <bt_le_adv_start+0x108>
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
    34f2:	2303      	movs	r3, #3
    34f4:	712b      	strb	r3, [r5, #4]
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    34f6:	2200      	movs	r2, #0
    34f8:	9901      	ldr	r1, [sp, #4]
    34fa:	480f      	ldr	r0, [pc, #60]	; (3538 <bt_le_adv_start+0x14c>)
    34fc:	f7fe fb5a 	bl	1bb4 <bt_hci_cmd_send_sync>
	if (err) {
    3500:	2800      	cmp	r0, #0
    3502:	d10d      	bne.n	3520 <bt_le_adv_start+0x134>
		return err;
	}

	err = set_advertise_enable(true);
    3504:	3001      	adds	r0, #1
    3506:	f7fe fc11 	bl	1d2c <set_advertise_enable>
	if (err) {
    350a:	2800      	cmp	r0, #0
    350c:	d108      	bne.n	3520 <bt_le_adv_start+0x134>
		return err;
	}

	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    350e:	7823      	ldrb	r3, [r4, #0]
    3510:	079b      	lsls	r3, r3, #30
    3512:	d409      	bmi.n	3528 <bt_le_adv_start+0x13c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3514:	0038      	movs	r0, r7
    3516:	2140      	movs	r1, #64	; 0x40
    3518:	306c      	adds	r0, #108	; 0x6c
    351a:	f00d fb24 	bl	10b66 <atomic_or>
    351e:	e003      	b.n	3528 <bt_le_adv_start+0x13c>
    3520:	0006      	movs	r6, r0
    3522:	e001      	b.n	3528 <bt_le_adv_start+0x13c>
	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
    3524:	2645      	movs	r6, #69	; 0x45
    3526:	e799      	b.n	345c <bt_le_adv_start+0x70>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    3528:	0030      	movs	r0, r6
    352a:	b005      	add	sp, #20
    352c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    352e:	46c0      	nop			; (mov r8, r8)
    3530:	20000198 	.word	0x20000198
    3534:	00002008 	.word	0x00002008
    3538:	00002006 	.word	0x00002006
    353c:	00002009 	.word	0x00002009

00003540 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3540:	b570      	push	{r4, r5, r6, lr}
    3542:	0005      	movs	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3544:	4806      	ldr	r0, [pc, #24]	; (3560 <bt_buf_get_rx+0x20>)
    3546:	f00c ffa7 	bl	10498 <net_buf_alloc>
    354a:	1e04      	subs	r4, r0, #0
#endif

	if (buf) {
    354c:	d006      	beq.n	355c <bt_buf_get_rx+0x1c>
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    354e:	2100      	movs	r1, #0
    3550:	f00d f802 	bl	10558 <net_buf_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    3554:	0020      	movs	r0, r4
    3556:	f7fe fa7b 	bl	1a50 <net_buf_user_data>
    355a:	7005      	strb	r5, [r0, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    355c:	0020      	movs	r0, r4
    355e:	bd70      	pop	{r4, r5, r6, pc}
    3560:	20000670 	.word	0x20000670

00003564 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3564:	b510      	push	{r4, lr}
    3566:	0001      	movs	r1, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    3568:	f3ef 8210 	mrs	r2, PRIMASK
    356c:	b672      	cpsid	i
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    356e:	2000      	movs	r0, #0
{
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3570:	4b0c      	ldr	r3, [pc, #48]	; (35a4 <bt_buf_get_cmd_complete+0x40>)
    3572:	33ac      	adds	r3, #172	; 0xac
    3574:	681c      	ldr	r4, [r3, #0]
	bt_dev.sent_cmd = NULL;
    3576:	6018      	str	r0, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3578:	4282      	cmp	r2, r0
    357a:	d100      	bne.n	357e <bt_buf_get_cmd_complete+0x1a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    357c:	b662      	cpsie	i
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    357e:	2c00      	cmp	r4, #0
    3580:	d00b      	beq.n	359a <bt_buf_get_cmd_complete+0x36>
    3582:	0020      	movs	r0, r4
    3584:	f7fe fa64 	bl	1a50 <net_buf_user_data>
    3588:	2301      	movs	r3, #1
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    358a:	2100      	movs	r1, #0
    358c:	7003      	strb	r3, [r0, #0]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    358e:	0020      	movs	r0, r4

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    3590:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    3592:	f00c ffe1 	bl	10558 <net_buf_reserve>

		return buf;
    3596:	0020      	movs	r0, r4
    3598:	e002      	b.n	35a0 <bt_buf_get_cmd_complete+0x3c>
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    359a:	2001      	movs	r0, #1
    359c:	f7ff ffd0 	bl	3540 <bt_buf_get_rx>
}
    35a0:	bd10      	pop	{r4, pc}
    35a2:	46c0      	nop			; (mov r8, r8)
    35a4:	20000198 	.word	0x20000198

000035a8 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    35a8:	b570      	push	{r4, r5, r6, lr}
    35aa:	0005      	movs	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    35ac:	4b07      	ldr	r3, [pc, #28]	; (35cc <notify_connected+0x24>)
    35ae:	681c      	ldr	r4, [r3, #0]
    35b0:	2c00      	cmp	r4, #0
    35b2:	d009      	beq.n	35c8 <notify_connected+0x20>
		if (cb->connected) {
    35b4:	6823      	ldr	r3, [r4, #0]
    35b6:	2b00      	cmp	r3, #0
    35b8:	d004      	beq.n	35c4 <notify_connected+0x1c>
			cb->connected(conn, conn->err);
    35ba:	002a      	movs	r2, r5
    35bc:	324c      	adds	r2, #76	; 0x4c
    35be:	7811      	ldrb	r1, [r2, #0]
    35c0:	0028      	movs	r0, r5
    35c2:	4798      	blx	r3

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    35c4:	6924      	ldr	r4, [r4, #16]
    35c6:	e7f3      	b.n	35b0 <notify_connected+0x8>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    35c8:	bd70      	pop	{r4, r5, r6, pc}
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	20000a64 	.word	0x20000a64

000035d0 <bt_conn_reset_rx_state>:
	cb->_next = callback_list;
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
    35d0:	b510      	push	{r4, lr}
	if (!conn->rx_len) {
    35d2:	8903      	ldrh	r3, [r0, #8]
	cb->_next = callback_list;
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
    35d4:	0004      	movs	r4, r0
	if (!conn->rx_len) {
    35d6:	2b00      	cmp	r3, #0
    35d8:	d005      	beq.n	35e6 <bt_conn_reset_rx_state+0x16>
		return;
	}

	net_buf_unref(conn->rx);
    35da:	68c0      	ldr	r0, [r0, #12]
    35dc:	f00c ffd0 	bl	10580 <net_buf_unref>
	conn->rx = NULL;
    35e0:	2300      	movs	r3, #0
    35e2:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    35e4:	8123      	strh	r3, [r4, #8]
}
    35e6:	bd10      	pop	{r4, pc}

000035e8 <conn_cleanup>:
}

static struct k_poll_signal conn_change = K_POLL_SIGNAL_INITIALIZER();

static void conn_cleanup(struct bt_conn *conn)
{
    35e8:	b510      	push	{r4, lr}
    35ea:	0004      	movs	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    35ec:	0020      	movs	r0, r4
    35ee:	2100      	movs	r1, #0
    35f0:	302c      	adds	r0, #44	; 0x2c
    35f2:	f00c ff99 	bl	10528 <net_buf_get>
    35f6:	2800      	cmp	r0, #0
    35f8:	d002      	beq.n	3600 <conn_cleanup+0x18>
		net_buf_unref(buf);
    35fa:	f00c ffc1 	bl	10580 <net_buf_unref>
    35fe:	e7f5      	b.n	35ec <conn_cleanup+0x4>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_reset_rx_state(conn);
    3600:	0020      	movs	r0, r4
    3602:	f7ff ffe5 	bl	35d0 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    3606:	0020      	movs	r0, r4
    3608:	3048      	adds	r0, #72	; 0x48
    360a:	f00d fa95 	bl	10b38 <atomic_dec>

	/* Release the reference we took for the very first
	 * state transition.
	 */
	bt_conn_unref(conn);
}
    360e:	bd10      	pop	{r4, pc}

00003610 <bt_conn_get_pkts>:
		return &bt_dev.br.pkts;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return &bt_dev.le.pkts;
}
    3610:	4800      	ldr	r0, [pc, #0]	; (3614 <bt_conn_get_pkts+0x4>)
    3612:	4770      	bx	lr
    3614:	2000021c 	.word	0x2000021c

00003618 <notify_le_param_updated>:
		}
	}
}

void notify_le_param_updated(struct bt_conn *conn)
{
    3618:	b570      	push	{r4, r5, r6, lr}
    361a:	0005      	movs	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    361c:	4b0a      	ldr	r3, [pc, #40]	; (3648 <notify_le_param_updated+0x30>)
    361e:	681c      	ldr	r4, [r3, #0]
    3620:	2c00      	cmp	r4, #0
    3622:	d00f      	beq.n	3644 <notify_le_param_updated+0x2c>
		if (cb->le_param_updated) {
    3624:	68e6      	ldr	r6, [r4, #12]
    3626:	2e00      	cmp	r6, #0
    3628:	d00a      	beq.n	3640 <notify_le_param_updated+0x28>
			cb->le_param_updated(conn, conn->le.interval,
    362a:	002b      	movs	r3, r5
    362c:	002a      	movs	r2, r5
    362e:	0029      	movs	r1, r5
    3630:	336e      	adds	r3, #110	; 0x6e
    3632:	326c      	adds	r2, #108	; 0x6c
    3634:	3166      	adds	r1, #102	; 0x66
    3636:	881b      	ldrh	r3, [r3, #0]
    3638:	8812      	ldrh	r2, [r2, #0]
    363a:	8809      	ldrh	r1, [r1, #0]
    363c:	0028      	movs	r0, r5
    363e:	47b0      	blx	r6

void notify_le_param_updated(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3640:	6924      	ldr	r4, [r4, #16]
    3642:	e7ed      	b.n	3620 <notify_le_param_updated+0x8>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    3644:	bd70      	pop	{r4, r5, r6, pc}
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	20000a64 	.word	0x20000a64

0000364c <le_param_req>:

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    364e:	0007      	movs	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    3650:	0008      	movs	r0, r1
		}
	}
}

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    3652:	000e      	movs	r6, r1
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    3654:	f7fe fbda 	bl	1e0c <bt_le_conn_params_valid>
    3658:	1e05      	subs	r5, r0, #0
    365a:	d101      	bne.n	3660 <le_param_req+0x14>
		return false;
    365c:	2500      	movs	r5, #0
    365e:	e013      	b.n	3688 <le_param_req+0x3c>
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    3660:	4b0a      	ldr	r3, [pc, #40]	; (368c <le_param_req+0x40>)
    3662:	681c      	ldr	r4, [r3, #0]
    3664:	2c00      	cmp	r4, #0
    3666:	d00f      	beq.n	3688 <le_param_req+0x3c>
		if (!cb->le_param_req) {
    3668:	68a3      	ldr	r3, [r4, #8]
    366a:	2b00      	cmp	r3, #0
    366c:	d101      	bne.n	3672 <le_param_req+0x26>

	if (!bt_le_conn_params_valid(param)) {
		return false;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    366e:	6924      	ldr	r4, [r4, #16]
    3670:	e7f8      	b.n	3664 <le_param_req+0x18>
		if (!cb->le_param_req) {
			continue;
		}

		if (!cb->le_param_req(conn, param)) {
    3672:	0031      	movs	r1, r6
    3674:	0038      	movs	r0, r7
    3676:	4798      	blx	r3
    3678:	2800      	cmp	r0, #0
    367a:	d0ef      	beq.n	365c <le_param_req+0x10>
		}

		/* The callback may modify the parameters so we need to
		 * double-check that it returned valid parameters.
		 */
		if (!bt_le_conn_params_valid(param)) {
    367c:	0030      	movs	r0, r6
    367e:	f7fe fbc5 	bl	1e0c <bt_le_conn_params_valid>
    3682:	2800      	cmp	r0, #0
    3684:	d1f3      	bne.n	366e <le_param_req+0x22>
    3686:	e7e9      	b.n	365c <le_param_req+0x10>
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    3688:	0028      	movs	r0, r5
    368a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    368c:	20000a64 	.word	0x20000a64

00003690 <bt_conn_cb_register>:
}
#endif /* CONFIG_BLUETOOTH_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    3690:	4b02      	ldr	r3, [pc, #8]	; (369c <bt_conn_cb_register+0xc>)
    3692:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    3694:	6018      	str	r0, [r3, #0]
}
#endif /* CONFIG_BLUETOOTH_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    3696:	6102      	str	r2, [r0, #16]
	callback_list = cb;
}
    3698:	4770      	bx	lr
    369a:	46c0      	nop			; (mov r8, r8)
    369c:	20000a64 	.word	0x20000a64

000036a0 <bt_conn_recv>:
	conn->rx = NULL;
	conn->rx_len = 0;
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    36a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    36a2:	0004      	movs	r4, r0
    36a4:	000d      	movs	r5, r1
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    36a6:	2a01      	cmp	r2, #1
    36a8:	d01f      	beq.n	36ea <bt_conn_recv+0x4a>
    36aa:	2a02      	cmp	r2, #2
    36ac:	d15a      	bne.n	3764 <bt_conn_recv+0xc4>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    36ae:	688a      	ldr	r2, [r1, #8]
    36b0:	7856      	ldrb	r6, [r2, #1]
    36b2:	7813      	ldrb	r3, [r2, #0]
    36b4:	0236      	lsls	r6, r6, #8
    36b6:	431e      	orrs	r6, r3

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    36b8:	8903      	ldrh	r3, [r0, #8]
    36ba:	2b00      	cmp	r3, #0
    36bc:	d00c      	beq.n	36d8 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
    36be:	4b40      	ldr	r3, [pc, #256]	; (37c0 <bt_conn_recv+0x120>)
    36c0:	4a40      	ldr	r2, [pc, #256]	; (37c4 <bt_conn_recv+0x124>)
    36c2:	9301      	str	r3, [sp, #4]
    36c4:	4b40      	ldr	r3, [pc, #256]	; (37c8 <bt_conn_recv+0x128>)
    36c6:	4941      	ldr	r1, [pc, #260]	; (37cc <bt_conn_recv+0x12c>)
    36c8:	9300      	str	r3, [sp, #0]
    36ca:	4841      	ldr	r0, [pc, #260]	; (37d0 <bt_conn_recv+0x130>)
    36cc:	4b41      	ldr	r3, [pc, #260]	; (37d4 <bt_conn_recv+0x134>)
    36ce:	f7fe f8e1 	bl	1894 <printk>
			bt_conn_reset_rx_state(conn);
    36d2:	0020      	movs	r0, r4
    36d4:	f7ff ff7c 	bl	35d0 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    36d8:	89ab      	ldrh	r3, [r5, #12]
    36da:	3604      	adds	r6, #4
    36dc:	1af3      	subs	r3, r6, r3
    36de:	b29b      	uxth	r3, r3
    36e0:	8123      	strh	r3, [r4, #8]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    36e2:	2b00      	cmp	r3, #0
    36e4:	d04d      	beq.n	3782 <bt_conn_recv+0xe2>
			conn->rx = buf;
    36e6:	60e5      	str	r5, [r4, #12]
			return;
    36e8:	e068      	b.n	37bc <bt_conn_recv+0x11c>
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    36ea:	8903      	ldrh	r3, [r0, #8]
    36ec:	2b00      	cmp	r3, #0
    36ee:	d108      	bne.n	3702 <bt_conn_recv+0x62>
			BT_ERR("Unexpected L2CAP continuation");
    36f0:	4b33      	ldr	r3, [pc, #204]	; (37c0 <bt_conn_recv+0x120>)
    36f2:	4a34      	ldr	r2, [pc, #208]	; (37c4 <bt_conn_recv+0x124>)
    36f4:	9301      	str	r3, [sp, #4]
    36f6:	4b34      	ldr	r3, [pc, #208]	; (37c8 <bt_conn_recv+0x128>)
    36f8:	4934      	ldr	r1, [pc, #208]	; (37cc <bt_conn_recv+0x12c>)
    36fa:	9300      	str	r3, [sp, #0]
    36fc:	4836      	ldr	r0, [pc, #216]	; (37d8 <bt_conn_recv+0x138>)
    36fe:	4b35      	ldr	r3, [pc, #212]	; (37d4 <bt_conn_recv+0x134>)
    3700:	e00a      	b.n	3718 <bt_conn_recv+0x78>
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
			return;
		}

		if (buf->len > conn->rx_len) {
    3702:	898e      	ldrh	r6, [r1, #12]
    3704:	42b3      	cmp	r3, r6
    3706:	d20a      	bcs.n	371e <bt_conn_recv+0x7e>
			BT_ERR("L2CAP data overflow");
    3708:	4b2d      	ldr	r3, [pc, #180]	; (37c0 <bt_conn_recv+0x120>)
    370a:	4a2e      	ldr	r2, [pc, #184]	; (37c4 <bt_conn_recv+0x124>)
    370c:	9301      	str	r3, [sp, #4]
    370e:	4b2e      	ldr	r3, [pc, #184]	; (37c8 <bt_conn_recv+0x128>)
    3710:	492e      	ldr	r1, [pc, #184]	; (37cc <bt_conn_recv+0x12c>)
    3712:	9300      	str	r3, [sp, #0]
    3714:	4831      	ldr	r0, [pc, #196]	; (37dc <bt_conn_recv+0x13c>)
    3716:	4b2f      	ldr	r3, [pc, #188]	; (37d4 <bt_conn_recv+0x134>)
    3718:	f7fe f8bc 	bl	1894 <printk>
    371c:	e02d      	b.n	377a <bt_conn_recv+0xda>
			return;
		}

		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);

		if (buf->len > net_buf_tailroom(conn->rx)) {
    371e:	68c0      	ldr	r0, [r0, #12]
    3720:	3008      	adds	r0, #8
    3722:	f00c ff90 	bl	10646 <net_buf_simple_tailroom>
    3726:	4286      	cmp	r6, r0
    3728:	d908      	bls.n	373c <bt_conn_recv+0x9c>
			BT_ERR("Not enough buffer space for L2CAP data");
    372a:	4b25      	ldr	r3, [pc, #148]	; (37c0 <bt_conn_recv+0x120>)
    372c:	4a25      	ldr	r2, [pc, #148]	; (37c4 <bt_conn_recv+0x124>)
    372e:	9301      	str	r3, [sp, #4]
    3730:	4b25      	ldr	r3, [pc, #148]	; (37c8 <bt_conn_recv+0x128>)
    3732:	4926      	ldr	r1, [pc, #152]	; (37cc <bt_conn_recv+0x12c>)
    3734:	9300      	str	r3, [sp, #0]
    3736:	482a      	ldr	r0, [pc, #168]	; (37e0 <bt_conn_recv+0x140>)
    3738:	4b26      	ldr	r3, [pc, #152]	; (37d4 <bt_conn_recv+0x134>)
    373a:	e7ed      	b.n	3718 <bt_conn_recv+0x78>
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
			return;
		}

		net_buf_add_mem(conn->rx, buf->data, buf->len);
    373c:	68e0      	ldr	r0, [r4, #12]
    373e:	89aa      	ldrh	r2, [r5, #12]
    3740:	68a9      	ldr	r1, [r5, #8]
    3742:	3008      	adds	r0, #8
    3744:	f00c ff45 	bl	105d2 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    3748:	8923      	ldrh	r3, [r4, #8]
    374a:	89aa      	ldrh	r2, [r5, #12]
		net_buf_unref(buf);
    374c:	0028      	movs	r0, r5
			net_buf_unref(buf);
			return;
		}

		net_buf_add_mem(conn->rx, buf->data, buf->len);
		conn->rx_len -= buf->len;
    374e:	1a9b      	subs	r3, r3, r2
    3750:	8123      	strh	r3, [r4, #8]
		net_buf_unref(buf);
    3752:	f00c ff15 	bl	10580 <net_buf_unref>

		if (conn->rx_len) {
    3756:	8923      	ldrh	r3, [r4, #8]
    3758:	2b00      	cmp	r3, #0
    375a:	d12f      	bne.n	37bc <bt_conn_recv+0x11c>
			return;
		}

		buf = conn->rx;
    375c:	68e5      	ldr	r5, [r4, #12]
		conn->rx = NULL;
		conn->rx_len = 0;
    375e:	8123      	strh	r3, [r4, #8]
		if (conn->rx_len) {
			return;
		}

		buf = conn->rx;
		conn->rx = NULL;
    3760:	60e3      	str	r3, [r4, #12]
		conn->rx_len = 0;

		break;
    3762:	e00e      	b.n	3782 <bt_conn_recv+0xe2>
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    3764:	4b16      	ldr	r3, [pc, #88]	; (37c0 <bt_conn_recv+0x120>)
    3766:	9201      	str	r2, [sp, #4]
    3768:	9302      	str	r3, [sp, #8]
    376a:	4b17      	ldr	r3, [pc, #92]	; (37c8 <bt_conn_recv+0x128>)
    376c:	4a15      	ldr	r2, [pc, #84]	; (37c4 <bt_conn_recv+0x124>)
    376e:	9300      	str	r3, [sp, #0]
    3770:	4916      	ldr	r1, [pc, #88]	; (37cc <bt_conn_recv+0x12c>)
    3772:	4b18      	ldr	r3, [pc, #96]	; (37d4 <bt_conn_recv+0x134>)
    3774:	481b      	ldr	r0, [pc, #108]	; (37e4 <bt_conn_recv+0x144>)
    3776:	f7fe f88d 	bl	1894 <printk>
		bt_conn_reset_rx_state(conn);
    377a:	0020      	movs	r0, r4
    377c:	f7ff ff28 	bl	35d0 <bt_conn_reset_rx_state>
    3780:	e014      	b.n	37ac <bt_conn_recv+0x10c>
		net_buf_unref(buf);
		return;
	}

	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);
    3782:	68ab      	ldr	r3, [r5, #8]
    3784:	781a      	ldrb	r2, [r3, #0]
    3786:	785b      	ldrb	r3, [r3, #1]
    3788:	021b      	lsls	r3, r3, #8
    378a:	4313      	orrs	r3, r2

	if (sizeof(*hdr) + len != buf->len) {
    378c:	89aa      	ldrh	r2, [r5, #12]
    378e:	1d19      	adds	r1, r3, #4
    3790:	4291      	cmp	r1, r2
    3792:	d00f      	beq.n	37b4 <bt_conn_recv+0x114>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    3794:	490a      	ldr	r1, [pc, #40]	; (37c0 <bt_conn_recv+0x120>)
    3796:	9301      	str	r3, [sp, #4]
    3798:	4b0b      	ldr	r3, [pc, #44]	; (37c8 <bt_conn_recv+0x128>)
    379a:	9103      	str	r1, [sp, #12]
    379c:	9202      	str	r2, [sp, #8]
    379e:	9300      	str	r3, [sp, #0]
    37a0:	4a08      	ldr	r2, [pc, #32]	; (37c4 <bt_conn_recv+0x124>)
    37a2:	4b0c      	ldr	r3, [pc, #48]	; (37d4 <bt_conn_recv+0x134>)
    37a4:	4909      	ldr	r1, [pc, #36]	; (37cc <bt_conn_recv+0x12c>)
    37a6:	4810      	ldr	r0, [pc, #64]	; (37e8 <bt_conn_recv+0x148>)
    37a8:	f7fe f874 	bl	1894 <printk>
		net_buf_unref(buf);
    37ac:	0028      	movs	r0, r5
    37ae:	f00c fee7 	bl	10580 <net_buf_unref>
		return;
    37b2:	e003      	b.n	37bc <bt_conn_recv+0x11c>
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
    37b4:	0029      	movs	r1, r5
    37b6:	0020      	movs	r0, r4
    37b8:	f000 fdc6 	bl	4348 <bt_l2cap_recv>
}
    37bc:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	0001241d 	.word	0x0001241d
    37c4:	0001246d 	.word	0x0001246d
    37c8:	000124a8 	.word	0x000124a8
    37cc:	000123e3 	.word	0x000123e3
    37d0:	00012b1c 	.word	0x00012b1c
    37d4:	000144b5 	.word	0x000144b5
    37d8:	00012b49 	.word	0x00012b49
    37dc:	00012b77 	.word	0x00012b77
    37e0:	00012b9b 	.word	0x00012b9b
    37e4:	00012bd2 	.word	0x00012bd2
    37e8:	00012c00 	.word	0x00012c00

000037ec <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    37ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    37ee:	0005      	movs	r5, r0
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    37f0:	7988      	ldrb	r0, [r1, #6]
	bt_l2cap_recv(conn, buf);
}

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    37f2:	000c      	movs	r4, r1
    37f4:	0016      	movs	r6, r2
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    37f6:	f00c fe47 	bl	10488 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    37fa:	8b43      	ldrh	r3, [r0, #26]
    37fc:	2b03      	cmp	r3, #3
    37fe:	d80e      	bhi.n	381e <bt_conn_send_cb+0x32>
		BT_ERR("Too small user data size");
    3800:	4b17      	ldr	r3, [pc, #92]	; (3860 <bt_conn_send_cb+0x74>)
    3802:	4a18      	ldr	r2, [pc, #96]	; (3864 <bt_conn_send_cb+0x78>)
    3804:	9301      	str	r3, [sp, #4]
    3806:	4b18      	ldr	r3, [pc, #96]	; (3868 <bt_conn_send_cb+0x7c>)
    3808:	4918      	ldr	r1, [pc, #96]	; (386c <bt_conn_send_cb+0x80>)
    380a:	9300      	str	r3, [sp, #0]
    380c:	4818      	ldr	r0, [pc, #96]	; (3870 <bt_conn_send_cb+0x84>)
    380e:	4b19      	ldr	r3, [pc, #100]	; (3874 <bt_conn_send_cb+0x88>)
    3810:	f7fe f840 	bl	1894 <printk>
		net_buf_unref(buf);
    3814:	0020      	movs	r0, r4
    3816:	f00c feb3 	bl	10580 <net_buf_unref>
		return -EINVAL;
    381a:	2016      	movs	r0, #22
    381c:	e012      	b.n	3844 <bt_conn_send_cb+0x58>
	}

	if (conn->state != BT_CONN_CONNECTED) {
    381e:	002b      	movs	r3, r5
    3820:	334d      	adds	r3, #77	; 0x4d
    3822:	781a      	ldrb	r2, [r3, #0]
    3824:	2a03      	cmp	r2, #3
    3826:	d00f      	beq.n	3848 <bt_conn_send_cb+0x5c>
		BT_ERR("not connected!");
    3828:	4b0d      	ldr	r3, [pc, #52]	; (3860 <bt_conn_send_cb+0x74>)
    382a:	4a0e      	ldr	r2, [pc, #56]	; (3864 <bt_conn_send_cb+0x78>)
    382c:	9301      	str	r3, [sp, #4]
    382e:	4b0e      	ldr	r3, [pc, #56]	; (3868 <bt_conn_send_cb+0x7c>)
    3830:	490e      	ldr	r1, [pc, #56]	; (386c <bt_conn_send_cb+0x80>)
    3832:	9300      	str	r3, [sp, #0]
    3834:	4810      	ldr	r0, [pc, #64]	; (3878 <bt_conn_send_cb+0x8c>)
    3836:	4b0f      	ldr	r3, [pc, #60]	; (3874 <bt_conn_send_cb+0x88>)
    3838:	f7fe f82c 	bl	1894 <printk>
		net_buf_unref(buf);
    383c:	0020      	movs	r0, r4
    383e:	f00c fe9f 	bl	10580 <net_buf_unref>
		return -ENOTCONN;
    3842:	2039      	movs	r0, #57	; 0x39
    3844:	4240      	negs	r0, r0
    3846:	e00a      	b.n	385e <bt_conn_send_cb+0x72>
	}

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
    3848:	0028      	movs	r0, r5
		BT_ERR("not connected!");
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	conn_tx(buf)->cb = cb;
    384a:	89e3      	ldrh	r3, [r4, #14]

	net_buf_put(&conn->tx_queue, buf);
    384c:	302c      	adds	r0, #44	; 0x2c
		BT_ERR("not connected!");
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	conn_tx(buf)->cb = cb;
    384e:	18e3      	adds	r3, r4, r3
    3850:	3313      	adds	r3, #19
    3852:	4393      	bics	r3, r2
    3854:	601e      	str	r6, [r3, #0]

	net_buf_put(&conn->tx_queue, buf);
    3856:	0021      	movs	r1, r4
    3858:	f00c fe83 	bl	10562 <net_buf_put>
	return 0;
    385c:	2000      	movs	r0, #0
}
    385e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    3860:	0001241d 	.word	0x0001241d
    3864:	0001246d 	.word	0x0001246d
    3868:	000124a8 	.word	0x000124a8
    386c:	000123e3 	.word	0x000123e3
    3870:	0001270b 	.word	0x0001270b
    3874:	000144c2 	.word	0x000144c2
    3878:	00012c2c 	.word	0x00012c2c

0000387c <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    387c:	b570      	push	{r4, r5, r6, lr}
    387e:	0005      	movs	r5, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3880:	0028      	movs	r0, r5
    3882:	2100      	movs	r1, #0
    3884:	3018      	adds	r0, #24
    3886:	f00d fe0b 	bl	114a0 <k_queue_get>
    388a:	1e04      	subs	r4, r0, #0
    388c:	d00f      	beq.n	38ae <bt_conn_notify_tx+0x32>
		if (tx->cb) {
    388e:	6863      	ldr	r3, [r4, #4]
    3890:	2b00      	cmp	r3, #0
    3892:	d001      	beq.n	3898 <bt_conn_notify_tx+0x1c>
			tx->cb(conn);
    3894:	0028      	movs	r0, r5
    3896:	4798      	blx	r3
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    3898:	2300      	movs	r3, #0
    389a:	6063      	str	r3, [r4, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    389c:	4b04      	ldr	r3, [pc, #16]	; (38b0 <bt_conn_notify_tx+0x34>)
    389e:	681a      	ldr	r2, [r3, #0]
    38a0:	6022      	str	r2, [r4, #0]
	list->head = node;

	if (!list->tail) {
    38a2:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    38a4:	601c      	str	r4, [r3, #0]

	if (!list->tail) {
    38a6:	2a00      	cmp	r2, #0
    38a8:	d1ea      	bne.n	3880 <bt_conn_notify_tx+0x4>
		list->tail = list->head;
    38aa:	605c      	str	r4, [r3, #4]
    38ac:	e7e8      	b.n	3880 <bt_conn_notify_tx+0x4>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    38ae:	bd70      	pop	{r4, r5, r6, pc}
    38b0:	200009ac 	.word	0x200009ac

000038b4 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    38b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38b6:	000e      	movs	r6, r1

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    38b8:	2101      	movs	r1, #1
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    38ba:	0005      	movs	r5, r0
    38bc:	b087      	sub	sp, #28

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    38be:	4249      	negs	r1, r1
    38c0:	4842      	ldr	r0, [pc, #264]	; (39cc <send_frag+0x118>)
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    38c2:	9305      	str	r3, [sp, #20]
    38c4:	0017      	movs	r7, r2

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    38c6:	f00e f845 	bl	11954 <k_sem_take>

	/* Make sure we notify and free up any pending tx contexts */
	bt_conn_notify_tx(conn);
    38ca:	0028      	movs	r0, r5
    38cc:	f7ff ffd6 	bl	387c <bt_conn_notify_tx>

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    38d0:	002b      	movs	r3, r5
    38d2:	334d      	adds	r3, #77	; 0x4d
    38d4:	781c      	ldrb	r4, [r3, #0]
    38d6:	2c03      	cmp	r4, #3
    38d8:	d16b      	bne.n	39b2 <send_frag+0xfe>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    38da:	0030      	movs	r0, r6
    38dc:	2104      	movs	r1, #4
    38de:	3008      	adds	r0, #8
    38e0:	f00c fe89 	bl	105f6 <net_buf_simple_push>
    38e4:	2202      	movs	r2, #2
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    38e6:	882b      	ldrh	r3, [r5, #0]
    38e8:	033f      	lsls	r7, r7, #12
    38ea:	431f      	orrs	r7, r3
    38ec:	b2bf      	uxth	r7, r7
    38ee:	7007      	strb	r7, [r0, #0]
    38f0:	0a3f      	lsrs	r7, r7, #8
    38f2:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    38f4:	89b3      	ldrh	r3, [r6, #12]
    38f6:	3b04      	subs	r3, #4
    38f8:	b29b      	uxth	r3, r3
    38fa:	7083      	strb	r3, [r0, #2]
    38fc:	0a1b      	lsrs	r3, r3, #8
    38fe:	70c3      	strb	r3, [r0, #3]
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    3900:	89f3      	ldrh	r3, [r6, #14]
    3902:	18f3      	adds	r3, r6, r3
    3904:	3313      	adds	r3, #19
    3906:	43a3      	bics	r3, r4

	cb = conn_tx(buf)->cb;
    3908:	6819      	ldr	r1, [r3, #0]
    390a:	701a      	strb	r2, [r3, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;
    390c:	4b30      	ldr	r3, [pc, #192]	; (39d0 <send_frag+0x11c>)
    390e:	681c      	ldr	r4, [r3, #0]

	list->head = node->next;
	if (list->tail == node) {
    3910:	6858      	ldr	r0, [r3, #4]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    3912:	6822      	ldr	r2, [r4, #0]
    3914:	601a      	str	r2, [r3, #0]
	if (list->tail == node) {
    3916:	4284      	cmp	r4, r0
    3918:	d100      	bne.n	391c <send_frag+0x68>
		list->tail = list->head;
    391a:	605a      	str	r2, [r3, #4]
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    391c:	6061      	str	r1, [r4, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    391e:	f3ef 8210 	mrs	r2, PRIMASK
    3922:	b672      	cpsid	i
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    3924:	2300      	movs	r3, #0
    3926:	6023      	str	r3, [r4, #0]

	if (!list->tail) {
    3928:	696b      	ldr	r3, [r5, #20]
    392a:	2b00      	cmp	r3, #0
    392c:	d102      	bne.n	3934 <send_frag+0x80>
		list->tail = node;
    392e:	616c      	str	r4, [r5, #20]
		list->head = node;
    3930:	612c      	str	r4, [r5, #16]
    3932:	e001      	b.n	3938 <send_frag+0x84>
	} else {
		list->tail->next = node;
    3934:	601c      	str	r4, [r3, #0]
		list->tail = node;
    3936:	616c      	str	r4, [r5, #20]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3938:	2a00      	cmp	r2, #0
    393a:	d100      	bne.n	393e <send_frag+0x8a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    393c:	b662      	cpsie	i
	cb = conn_tx(buf)->cb;
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    393e:	0030      	movs	r0, r6
    3940:	f7fe fdda 	bl	24f8 <bt_send>
		BT_ERR("Unable to send to driver (err %d)", err);
		remove_pending_tx(conn, node);
		goto fail;
	}

	return true;
    3944:	2701      	movs	r7, #1
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
	if (err) {
    3946:	2800      	cmp	r0, #0
    3948:	d03d      	beq.n	39c6 <send_frag+0x112>
		BT_ERR("Unable to send to driver (err %d)", err);
    394a:	4b22      	ldr	r3, [pc, #136]	; (39d4 <send_frag+0x120>)
    394c:	9001      	str	r0, [sp, #4]
    394e:	9302      	str	r3, [sp, #8]
    3950:	4b21      	ldr	r3, [pc, #132]	; (39d8 <send_frag+0x124>)
    3952:	4a22      	ldr	r2, [pc, #136]	; (39dc <send_frag+0x128>)
    3954:	9300      	str	r3, [sp, #0]
    3956:	4922      	ldr	r1, [pc, #136]	; (39e0 <send_frag+0x12c>)
    3958:	4b22      	ldr	r3, [pc, #136]	; (39e4 <send_frag+0x130>)
    395a:	4823      	ldr	r0, [pc, #140]	; (39e8 <send_frag+0x134>)
    395c:	f7fd ff9a 	bl	1894 <printk>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    3960:	f3ef 8010 	mrs	r0, PRIMASK
    3964:	b672      	cpsid	i
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    3966:	2200      	movs	r2, #0
    3968:	692b      	ldr	r3, [r5, #16]
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    396a:	2b00      	cmp	r3, #0
    396c:	d014      	beq.n	3998 <send_frag+0xe4>
		if (test == node) {
    396e:	429c      	cmp	r4, r3
    3970:	d10f      	bne.n	3992 <send_frag+0xde>
    3972:	6823      	ldr	r3, [r4, #0]
    3974:	6969      	ldr	r1, [r5, #20]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    3976:	2a00      	cmp	r2, #0
    3978:	d104      	bne.n	3984 <send_frag+0xd0>
		list->head = node->next;
    397a:	612b      	str	r3, [r5, #16]

		/* Was node also the tail? */
		if (list->tail == node) {
    397c:	428c      	cmp	r4, r1
    397e:	d105      	bne.n	398c <send_frag+0xd8>
			list->tail = list->head;
    3980:	616b      	str	r3, [r5, #20]
    3982:	e003      	b.n	398c <send_frag+0xd8>
		}
	} else {
		prev_node->next = node->next;
    3984:	6013      	str	r3, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    3986:	428c      	cmp	r4, r1
    3988:	d100      	bne.n	398c <send_frag+0xd8>
			list->tail = prev_node;
    398a:	616a      	str	r2, [r5, #20]
		}
	}

	node->next = NULL;
    398c:	2300      	movs	r3, #0
    398e:	6023      	str	r3, [r4, #0]
    3990:	e002      	b.n	3998 <send_frag+0xe4>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    3992:	001a      	movs	r2, r3
    3994:	681b      	ldr	r3, [r3, #0]
    3996:	e7e8      	b.n	396a <send_frag+0xb6>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3998:	2800      	cmp	r0, #0
    399a:	d100      	bne.n	399e <send_frag+0xea>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    399c:	b662      	cpsie	i
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    399e:	2300      	movs	r3, #0
    39a0:	6063      	str	r3, [r4, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    39a2:	4b0b      	ldr	r3, [pc, #44]	; (39d0 <send_frag+0x11c>)
    39a4:	681a      	ldr	r2, [r3, #0]
    39a6:	6022      	str	r2, [r4, #0]
	list->head = node;

	if (!list->tail) {
    39a8:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    39aa:	601c      	str	r4, [r3, #0]

	if (!list->tail) {
    39ac:	2a00      	cmp	r2, #0
    39ae:	d100      	bne.n	39b2 <send_frag+0xfe>
		list->tail = list->head;
    39b0:	605c      	str	r4, [r3, #4]
fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
		net_buf_unref(buf);
	}
	return false;
    39b2:	2700      	movs	r7, #0
	}

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
    39b4:	4805      	ldr	r0, [pc, #20]	; (39cc <send_frag+0x118>)
    39b6:	f00d ff91 	bl	118dc <k_sem_give>
	if (always_consume) {
    39ba:	9b05      	ldr	r3, [sp, #20]
    39bc:	42bb      	cmp	r3, r7
    39be:	d002      	beq.n	39c6 <send_frag+0x112>
		net_buf_unref(buf);
    39c0:	0030      	movs	r0, r6
    39c2:	f00c fddd 	bl	10580 <net_buf_unref>
	}
	return false;
}
    39c6:	0038      	movs	r0, r7
    39c8:	b007      	add	sp, #28
    39ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39cc:	2000021c 	.word	0x2000021c
    39d0:	200009ac 	.word	0x200009ac
    39d4:	0001241d 	.word	0x0001241d
    39d8:	000124a8 	.word	0x000124a8
    39dc:	0001246d 	.word	0x0001246d
    39e0:	000123e3 	.word	0x000123e3
    39e4:	000144ab 	.word	0x000144ab
    39e8:	0001262e 	.word	0x0001262e

000039ec <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    39ec:	2200      	movs	r2, #0
    39ee:	4b1d      	ldr	r3, [pc, #116]	; (3a64 <bt_conn_prepare_events+0x78>)
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    39f0:	b570      	push	{r4, r5, r6, lr}
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    39f2:	2101      	movs	r1, #1
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    39f4:	0005      	movs	r5, r0
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    39f6:	605a      	str	r2, [r3, #4]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    39f8:	f00d fb42 	bl	11080 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    39fc:	4c1a      	ldr	r4, [pc, #104]	; (3a68 <bt_conn_prepare_events+0x7c>)
    39fe:	0020      	movs	r0, r4
    3a00:	3048      	adds	r0, #72	; 0x48
    3a02:	f00d f8a4 	bl	10b4e <atomic_get>
    3a06:	0026      	movs	r6, r4
    3a08:	2800      	cmp	r0, #0
    3a0a:	d00e      	beq.n	3a2a <bt_conn_prepare_events+0x3e>
			continue;
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
    3a0c:	0023      	movs	r3, r4
    3a0e:	334d      	adds	r3, #77	; 0x4d
    3a10:	781b      	ldrb	r3, [r3, #0]
    3a12:	2b00      	cmp	r3, #0
    3a14:	d10b      	bne.n	3a2e <bt_conn_prepare_events+0x42>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a16:	2141      	movs	r1, #65	; 0x41
    3a18:	1d20      	adds	r0, r4, #4
    3a1a:	4249      	negs	r1, r1
    3a1c:	f00d f8ae 	bl	10b7c <atomic_and>
    3a20:	0643      	lsls	r3, r0, #25
    3a22:	d504      	bpl.n	3a2e <bt_conn_prepare_events+0x42>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
    3a24:	0020      	movs	r0, r4
    3a26:	f7ff fddf 	bl	35e8 <conn_cleanup>
			continue;
    3a2a:	2001      	movs	r0, #1
    3a2c:	e019      	b.n	3a62 <bt_conn_prepare_events+0x76>
		}

		if (conn->state != BT_CONN_CONNECTED) {
    3a2e:	0033      	movs	r3, r6
    3a30:	334d      	adds	r3, #77	; 0x4d
    3a32:	781c      	ldrb	r4, [r3, #0]
    3a34:	2c03      	cmp	r4, #3
    3a36:	d1f8      	bne.n	3a2a <bt_conn_prepare_events+0x3e>
			continue;
		}

		BT_DBG("Adding conn %p to poll list", conn);

		k_poll_event_init(&events[ev_count],
    3a38:	0033      	movs	r3, r6
    3a3a:	0028      	movs	r0, r5
    3a3c:	332c      	adds	r3, #44	; 0x2c
    3a3e:	300c      	adds	r0, #12
    3a40:	2200      	movs	r2, #0
    3a42:	2104      	movs	r1, #4
    3a44:	f00d fb1c 	bl	11080 <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    3a48:	2302      	movs	r3, #2

		k_poll_event_init(&events[ev_count],
    3a4a:	0028      	movs	r0, r5

		k_poll_event_init(&events[ev_count],
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    3a4c:	742b      	strb	r3, [r5, #16]

		k_poll_event_init(&events[ev_count],
    3a4e:	0033      	movs	r3, r6
    3a50:	3018      	adds	r0, #24
    3a52:	3318      	adds	r3, #24
    3a54:	2200      	movs	r2, #0
    3a56:	2104      	movs	r1, #4
    3a58:	f00d fb12 	bl	11080 <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_notify);
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    3a5c:	2301      	movs	r3, #1
    3a5e:	0020      	movs	r0, r4
    3a60:	772b      	strb	r3, [r5, #28]
	}

	return ev_count;
}
    3a62:	bd70      	pop	{r4, r5, r6, pc}
    3a64:	200009b4 	.word	0x200009b4
    3a68:	200009c0 	.word	0x200009c0

00003a6c <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    3a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3a6e:	4c15      	ldr	r4, [pc, #84]	; (3ac4 <bt_conn_add_le+0x58>)
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    3a70:	0007      	movs	r7, r0
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3a72:	0026      	movs	r6, r4
    3a74:	3648      	adds	r6, #72	; 0x48
    3a76:	0030      	movs	r0, r6
    3a78:	f00d f869 	bl	10b4e <atomic_get>
    3a7c:	0005      	movs	r5, r0
struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    3a7e:	2000      	movs	r0, #0
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3a80:	2d00      	cmp	r5, #0
    3a82:	d11d      	bne.n	3ac0 <bt_conn_add_le+0x54>

	if (!conn) {
		return NULL;
	}

	memset(conn, 0, sizeof(*conn));
    3a84:	22a4      	movs	r2, #164	; 0xa4
    3a86:	0029      	movs	r1, r5
    3a88:	0020      	movs	r0, r4
    3a8a:	f7fd f90a 	bl	ca2 <memset>

	atomic_set(&conn->ref, 1);
    3a8e:	2101      	movs	r1, #1
    3a90:	0030      	movs	r0, r6
    3a92:	f00d f85e 	bl	10b52 <atomic_set>
    3a96:	0020      	movs	r0, r4
    3a98:	2207      	movs	r2, #7
    3a9a:	0039      	movs	r1, r7
    3a9c:	3050      	adds	r0, #80	; 0x50
    3a9e:	f7fd f8d6 	bl	c4e <memcpy>
#if defined(CONFIG_BLUETOOTH_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    3aa2:	0023      	movs	r3, r4
    3aa4:	2218      	movs	r2, #24
    3aa6:	3368      	adds	r3, #104	; 0x68
    3aa8:	801a      	strh	r2, [r3, #0]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    3aaa:	0023      	movs	r3, r4
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    3aac:	0020      	movs	r0, r4
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    3aae:	336a      	adds	r3, #106	; 0x6a
    3ab0:	3210      	adds	r2, #16
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    3ab2:	307c      	adds	r0, #124	; 0x7c
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BLUETOOTH_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
    3ab4:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    3ab6:	801a      	strh	r2, [r3, #0]
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    3ab8:	4903      	ldr	r1, [pc, #12]	; (3ac8 <bt_conn_add_le+0x5c>)
    3aba:	f00e f9db 	bl	11e74 <k_delayed_work_init>
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
			conn = &conns[i];
    3abe:	0020      	movs	r0, r4
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
	k_delayed_work_init(&conn->le.update_work, le_conn_update);

	return conn;
}
    3ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ac2:	46c0      	nop			; (mov r8, r8)
    3ac4:	200009c0 	.word	0x200009c0
    3ac8:	00003e09 	.word	0x00003e09

00003acc <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    3acc:	b5f0      	push	{r4, r5, r6, r7, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    3ace:	0007      	movs	r7, r0
    3ad0:	374d      	adds	r7, #77	; 0x4d
    3ad2:	783d      	ldrb	r5, [r7, #0]
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    3ad4:	b085      	sub	sp, #20
    3ad6:	0004      	movs	r4, r0
    3ad8:	000e      	movs	r6, r1
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    3ada:	428d      	cmp	r5, r1
    3adc:	d10a      	bne.n	3af4 <bt_conn_set_state+0x28>
		BT_WARN("no transition");
    3ade:	4b4d      	ldr	r3, [pc, #308]	; (3c14 <bt_conn_set_state+0x148>)
    3ae0:	4a4d      	ldr	r2, [pc, #308]	; (3c18 <bt_conn_set_state+0x14c>)
    3ae2:	9301      	str	r3, [sp, #4]
    3ae4:	4b4d      	ldr	r3, [pc, #308]	; (3c1c <bt_conn_set_state+0x150>)
    3ae6:	494e      	ldr	r1, [pc, #312]	; (3c20 <bt_conn_set_state+0x154>)
    3ae8:	9300      	str	r3, [sp, #0]
    3aea:	484e      	ldr	r0, [pc, #312]	; (3c24 <bt_conn_set_state+0x158>)
    3aec:	4b4e      	ldr	r3, [pc, #312]	; (3c28 <bt_conn_set_state+0x15c>)
    3aee:	f7fd fed1 	bl	1894 <printk>
		return;
    3af2:	e08d      	b.n	3c10 <bt_conn_set_state+0x144>
	}

	old_state = conn->state;
	conn->state = state;
    3af4:	7039      	strb	r1, [r7, #0]

	/* Actions needed for exiting the old state */
	switch (old_state) {
    3af6:	2d00      	cmp	r5, #0
    3af8:	d102      	bne.n	3b00 <bt_conn_set_state+0x34>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    3afa:	3048      	adds	r0, #72	; 0x48
    3afc:	f00d f811 	bl	10b22 <atomic_inc>
	default:
		break;
	}

	/* Actions needed for entering the new state */
	switch (conn->state) {
    3b00:	7838      	ldrb	r0, [r7, #0]
    3b02:	2804      	cmp	r0, #4
    3b04:	d865      	bhi.n	3bd2 <bt_conn_set_state+0x106>
    3b06:	f7fc fb37 	bl	178 <__gnu_thumb1_case_uqi>
    3b0a:	831c      	.short	0x831c
    3b0c:	0383      	.short	0x0383
    3b0e:	83          	.byte	0x83
    3b0f:	00          	.byte	0x00
	case BT_CONN_CONNECTED:
		if (conn->type == BT_CONN_TYPE_SCO) {
    3b10:	78a3      	ldrb	r3, [r4, #2]
    3b12:	2b02      	cmp	r3, #2
    3b14:	d07c      	beq.n	3c10 <bt_conn_set_state+0x144>
			/* TODO: Notify sco connected */
			break;
		}
		k_fifo_init(&conn->tx_queue);
    3b16:	0020      	movs	r0, r4
    3b18:	302c      	adds	r0, #44	; 0x2c
    3b1a:	f00d fc25 	bl	11368 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    3b1e:	0020      	movs	r0, r4
    3b20:	3018      	adds	r0, #24
    3b22:	f00d fc21 	bl	11368 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    3b26:	2100      	movs	r1, #0
    3b28:	4840      	ldr	r0, [pc, #256]	; (3c2c <bt_conn_set_state+0x160>)
    3b2a:	f00d fb8b 	bl	11244 <k_poll_signal>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    3b2e:	2300      	movs	r3, #0

		sys_slist_init(&conn->channels);

		bt_l2cap_connected(conn);
    3b30:	0020      	movs	r0, r4
    3b32:	6423      	str	r3, [r4, #64]	; 0x40
	list->tail = NULL;
    3b34:	6463      	str	r3, [r4, #68]	; 0x44
    3b36:	f000 fae3 	bl	4100 <bt_l2cap_connected>
		notify_connected(conn);
    3b3a:	0020      	movs	r0, r4
    3b3c:	f7ff fd34 	bl	35a8 <notify_connected>
		break;
    3b40:	e066      	b.n	3c10 <bt_conn_set_state+0x144>
	case BT_CONN_DISCONNECTED:
		if (conn->type == BT_CONN_TYPE_SCO) {
    3b42:	78a3      	ldrb	r3, [r4, #2]
    3b44:	2b02      	cmp	r3, #2
    3b46:	d037      	beq.n	3bb8 <bt_conn_set_state+0xec>
		}
		/* Notify disconnection and queue a dummy buffer to wake
		 * up and stop the tx thread for states where it was
		 * running.
		 */
		if (old_state == BT_CONN_CONNECTED ||
    3b48:	1eeb      	subs	r3, r5, #3
    3b4a:	2b01      	cmp	r3, #1
    3b4c:	d82f      	bhi.n	3bae <bt_conn_set_state+0xe2>
		    old_state == BT_CONN_DISCONNECT) {
			bt_l2cap_disconnected(conn);
    3b4e:	0020      	movs	r0, r4
    3b50:	f000 fb10 	bl	4174 <bt_l2cap_disconnected>

static void notify_disconnected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3b54:	4b36      	ldr	r3, [pc, #216]	; (3c30 <bt_conn_set_state+0x164>)
    3b56:	681d      	ldr	r5, [r3, #0]
    3b58:	2d00      	cmp	r5, #0
    3b5a:	d01b      	beq.n	3b94 <bt_conn_set_state+0xc8>
		if (cb->disconnected) {
    3b5c:	686b      	ldr	r3, [r5, #4]
    3b5e:	2b00      	cmp	r3, #0
    3b60:	d004      	beq.n	3b6c <bt_conn_set_state+0xa0>
			cb->disconnected(conn, conn->err);
    3b62:	0022      	movs	r2, r4
    3b64:	324c      	adds	r2, #76	; 0x4c
    3b66:	7811      	ldrb	r1, [r2, #0]
    3b68:	0020      	movs	r0, r4
    3b6a:	4798      	blx	r3

static void notify_disconnected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3b6c:	692d      	ldr	r5, [r5, #16]
    3b6e:	e7f3      	b.n	3b58 <bt_conn_set_state+0x8c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3b70:	2a00      	cmp	r2, #0
    3b72:	d13a      	bne.n	3bea <bt_conn_set_state+0x11e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    3b74:	b662      	cpsie	i

		key = irq_lock();
		node = sys_slist_get(&conn->tx_pending);
		irq_unlock(key);

		if (!node) {
    3b76:	2b00      	cmp	r3, #0
    3b78:	d037      	beq.n	3bea <bt_conn_set_state+0x11e>
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    3b7a:	2200      	movs	r2, #0
    3b7c:	605a      	str	r2, [r3, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    3b7e:	4a2d      	ldr	r2, [pc, #180]	; (3c34 <bt_conn_set_state+0x168>)
    3b80:	6811      	ldr	r1, [r2, #0]
    3b82:	6019      	str	r1, [r3, #0]
	list->head = node;

	if (!list->tail) {
    3b84:	6851      	ldr	r1, [r2, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    3b86:	6013      	str	r3, [r2, #0]

	if (!list->tail) {
    3b88:	2900      	cmp	r1, #0
    3b8a:	d100      	bne.n	3b8e <bt_conn_set_state+0xc2>
		list->tail = list->head;
    3b8c:	6053      	str	r3, [r2, #4]
			break;
		}

		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));

		k_sem_give(bt_conn_get_pkts(conn));
    3b8e:	482a      	ldr	r0, [pc, #168]	; (3c38 <bt_conn_set_state+0x16c>)
    3b90:	f00d fea4 	bl	118dc <k_sem_give>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    3b94:	f3ef 8210 	mrs	r2, PRIMASK
    3b98:	b672      	cpsid	i
    3b9a:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d0e7      	beq.n	3b70 <bt_conn_set_state+0xa4>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    3ba0:	6819      	ldr	r1, [r3, #0]
	if (list->tail == node) {
    3ba2:	6960      	ldr	r0, [r4, #20]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    3ba4:	6121      	str	r1, [r4, #16]
	if (list->tail == node) {
    3ba6:	4283      	cmp	r3, r0
    3ba8:	d12f      	bne.n	3c0a <bt_conn_set_state+0x13e>
		list->tail = list->head;
    3baa:	6161      	str	r1, [r4, #20]
    3bac:	e02d      	b.n	3c0a <bt_conn_set_state+0x13e>
			}

			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
			k_poll_signal(&conn_change, 0);
			/* The last ref will be dropped by the tx_thread */
		} else if (old_state == BT_CONN_CONNECT) {
    3bae:	2d02      	cmp	r5, #2
    3bb0:	d107      	bne.n	3bc2 <bt_conn_set_state+0xf6>
			/* conn->err will be set in this case */
			notify_connected(conn);
    3bb2:	0020      	movs	r0, r4
    3bb4:	f7ff fcf8 	bl	35a8 <notify_connected>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    3bb8:	0020      	movs	r0, r4
    3bba:	3048      	adds	r0, #72	; 0x48
    3bbc:	f00c ffbc 	bl	10b38 <atomic_dec>
    3bc0:	e026      	b.n	3c10 <bt_conn_set_state+0x144>
			/* The last ref will be dropped by the tx_thread */
		} else if (old_state == BT_CONN_CONNECT) {
			/* conn->err will be set in this case */
			notify_connected(conn);
			bt_conn_unref(conn);
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    3bc2:	2d01      	cmp	r5, #1
    3bc4:	d124      	bne.n	3c10 <bt_conn_set_state+0x144>
			/* this indicate LE Create Connection failed */
			if (conn->err) {
    3bc6:	0023      	movs	r3, r4
    3bc8:	334c      	adds	r3, #76	; 0x4c
    3bca:	781b      	ldrb	r3, [r3, #0]
    3bcc:	2b00      	cmp	r3, #0
    3bce:	d0f3      	beq.n	3bb8 <bt_conn_set_state+0xec>
    3bd0:	e7ef      	b.n	3bb2 <bt_conn_set_state+0xe6>

		break;
	case BT_CONN_DISCONNECT:
		break;
	default:
		BT_WARN("no valid (%u) state was set", state);
    3bd2:	4b10      	ldr	r3, [pc, #64]	; (3c14 <bt_conn_set_state+0x148>)
    3bd4:	9601      	str	r6, [sp, #4]
    3bd6:	9302      	str	r3, [sp, #8]
    3bd8:	4b10      	ldr	r3, [pc, #64]	; (3c1c <bt_conn_set_state+0x150>)
    3bda:	4a0f      	ldr	r2, [pc, #60]	; (3c18 <bt_conn_set_state+0x14c>)
    3bdc:	9300      	str	r3, [sp, #0]
    3bde:	4910      	ldr	r1, [pc, #64]	; (3c20 <bt_conn_set_state+0x154>)
    3be0:	4b11      	ldr	r3, [pc, #68]	; (3c28 <bt_conn_set_state+0x15c>)
    3be2:	4816      	ldr	r0, [pc, #88]	; (3c3c <bt_conn_set_state+0x170>)
    3be4:	f7fd fe56 	bl	1894 <printk>

		break;
    3be8:	e012      	b.n	3c10 <bt_conn_set_state+0x144>
			bt_l2cap_disconnected(conn);
			notify_disconnected(conn);
			process_unack_tx(conn);

			/* Cancel Connection Update if it is pending */
			if (conn->type == BT_CONN_TYPE_LE) {
    3bea:	78a3      	ldrb	r3, [r4, #2]
    3bec:	2b00      	cmp	r3, #0
    3bee:	d103      	bne.n	3bf8 <bt_conn_set_state+0x12c>
				k_delayed_work_cancel(&conn->le.update_work);
    3bf0:	0020      	movs	r0, r4
    3bf2:	307c      	adds	r0, #124	; 0x7c
    3bf4:	f00e f954 	bl	11ea0 <k_delayed_work_cancel>
			}

			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    3bf8:	1d20      	adds	r0, r4, #4
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3bfa:	2140      	movs	r1, #64	; 0x40
    3bfc:	f00c ffb3 	bl	10b66 <atomic_or>
			k_poll_signal(&conn_change, 0);
    3c00:	2100      	movs	r1, #0
    3c02:	480a      	ldr	r0, [pc, #40]	; (3c2c <bt_conn_set_state+0x160>)
    3c04:	f00d fb1e 	bl	11244 <k_poll_signal>
    3c08:	e002      	b.n	3c10 <bt_conn_set_state+0x144>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3c0a:	2a00      	cmp	r2, #0
    3c0c:	d1b5      	bne.n	3b7a <bt_conn_set_state+0xae>
    3c0e:	e7b1      	b.n	3b74 <bt_conn_set_state+0xa8>
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    3c10:	b005      	add	sp, #20
    3c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c14:	0001241d 	.word	0x0001241d
    3c18:	000123dc 	.word	0x000123dc
    3c1c:	00012422 	.word	0x00012422
    3c20:	000123e3 	.word	0x000123e3
    3c24:	00012c4b 	.word	0x00012c4b
    3c28:	000144d2 	.word	0x000144d2
    3c2c:	200009b4 	.word	0x200009b4
    3c30:	20000a64 	.word	0x20000a64
    3c34:	200009ac 	.word	0x200009ac
    3c38:	2000021c 	.word	0x2000021c
    3c3c:	00012c69 	.word	0x00012c69

00003c40 <bt_conn_lookup_handle>:

struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
    3c40:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3c42:	4c0c      	ldr	r4, [pc, #48]	; (3c74 <bt_conn_lookup_handle+0x34>)
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
    3c44:	0006      	movs	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3c46:	0025      	movs	r5, r4
    3c48:	3548      	adds	r5, #72	; 0x48
    3c4a:	0028      	movs	r0, r5
    3c4c:	f00c ff7f 	bl	10b4e <atomic_get>
			return bt_conn_ref(&sco_conns[i]);
		}
	}
#endif

	return NULL;
    3c50:	2200      	movs	r2, #0
struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3c52:	4290      	cmp	r0, r2
    3c54:	d00c      	beq.n	3c70 <bt_conn_lookup_handle+0x30>
			continue;
		}

		/* We only care about connections with a valid handle */
		if (conns[i].state != BT_CONN_CONNECTED &&
    3c56:	0023      	movs	r3, r4
    3c58:	334d      	adds	r3, #77	; 0x4d
    3c5a:	781b      	ldrb	r3, [r3, #0]
    3c5c:	3b03      	subs	r3, #3
    3c5e:	2b01      	cmp	r3, #1
    3c60:	d806      	bhi.n	3c70 <bt_conn_lookup_handle+0x30>
		    conns[i].state != BT_CONN_DISCONNECT) {
			continue;
		}

		if (conns[i].handle == handle) {
    3c62:	8823      	ldrh	r3, [r4, #0]
    3c64:	42b3      	cmp	r3, r6
    3c66:	d103      	bne.n	3c70 <bt_conn_lookup_handle+0x30>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    3c68:	0028      	movs	r0, r5
    3c6a:	f00c ff5a 	bl	10b22 <atomic_inc>
		    conns[i].state != BT_CONN_DISCONNECT) {
			continue;
		}

		if (conns[i].handle == handle) {
			return bt_conn_ref(&conns[i]);
    3c6e:	0022      	movs	r2, r4
		}
	}
#endif

	return NULL;
}
    3c70:	0010      	movs	r0, r2
    3c72:	bd70      	pop	{r4, r5, r6, pc}
    3c74:	200009c0 	.word	0x200009c0

00003c78 <bt_conn_addr_le_cmp>:

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    3c78:	b570      	push	{r4, r5, r6, lr}
    3c7a:	000d      	movs	r5, r1
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    3c7c:	0001      	movs	r1, r0

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    3c7e:	0004      	movs	r4, r0
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    3c80:	3150      	adds	r1, #80	; 0x50
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    3c82:	2207      	movs	r2, #7
    3c84:	0028      	movs	r0, r5
    3c86:	f7fc ffcd 	bl	c24 <memcmp>
    3c8a:	2800      	cmp	r0, #0
    3c8c:	d00a      	beq.n	3ca4 <bt_conn_addr_le_cmp+0x2c>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    3c8e:	78e3      	ldrb	r3, [r4, #3]
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    3c90:	0021      	movs	r1, r4
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    3c92:	2b00      	cmp	r3, #0
    3c94:	d101      	bne.n	3c9a <bt_conn_addr_le_cmp+0x22>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    3c96:	315e      	adds	r1, #94	; 0x5e
    3c98:	e000      	b.n	3c9c <bt_conn_addr_le_cmp+0x24>
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
    3c9a:	3157      	adds	r1, #87	; 0x57
    3c9c:	2207      	movs	r2, #7
    3c9e:	0028      	movs	r0, r5
    3ca0:	f7fc ffc0 	bl	c24 <memcmp>
}
    3ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

00003ca8 <bt_conn_lookup_addr_le>:

struct bt_conn *bt_conn_lookup_addr_le(const bt_addr_le_t *peer)
{
    3ca8:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3caa:	4c0c      	ldr	r4, [pc, #48]	; (3cdc <bt_conn_lookup_addr_le+0x34>)

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(const bt_addr_le_t *peer)
{
    3cac:	0006      	movs	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3cae:	0025      	movs	r5, r4
    3cb0:	3548      	adds	r5, #72	; 0x48
    3cb2:	0028      	movs	r0, r5
    3cb4:	f00c ff4b 	bl	10b4e <atomic_get>
    3cb8:	2800      	cmp	r0, #0
    3cba:	d00d      	beq.n	3cd8 <bt_conn_lookup_addr_le+0x30>
			continue;
		}

		if (conns[i].type != BT_CONN_TYPE_LE) {
    3cbc:	78a3      	ldrb	r3, [r4, #2]
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d10a      	bne.n	3cd8 <bt_conn_lookup_addr_le+0x30>
			continue;
		}

		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    3cc2:	0031      	movs	r1, r6
    3cc4:	0020      	movs	r0, r4
    3cc6:	f7ff ffd7 	bl	3c78 <bt_conn_addr_le_cmp>
    3cca:	2800      	cmp	r0, #0
    3ccc:	d104      	bne.n	3cd8 <bt_conn_lookup_addr_le+0x30>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    3cce:	0028      	movs	r0, r5
    3cd0:	f00c ff27 	bl	10b22 <atomic_inc>

		if (conns[i].type != BT_CONN_TYPE_LE) {
			continue;
		}

		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    3cd4:	0020      	movs	r0, r4
			return bt_conn_ref(&conns[i]);
    3cd6:	e000      	b.n	3cda <bt_conn_lookup_addr_le+0x32>
		}
	}

	return NULL;
    3cd8:	2000      	movs	r0, #0
}
    3cda:	bd70      	pop	{r4, r5, r6, pc}
    3cdc:	200009c0 	.word	0x200009c0

00003ce0 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    3ce0:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3ce2:	4c10      	ldr	r4, [pc, #64]	; (3d24 <bt_conn_lookup_state_le+0x44>)
	return NULL;
}

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    3ce4:	0005      	movs	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3ce6:	0020      	movs	r0, r4
    3ce8:	3048      	adds	r0, #72	; 0x48
	return NULL;
}

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    3cea:	000e      	movs	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3cec:	f00c ff2f 	bl	10b4e <atomic_get>
    3cf0:	2800      	cmp	r0, #0
    3cf2:	d015      	beq.n	3d20 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conns[i].type != BT_CONN_TYPE_LE) {
    3cf4:	78a3      	ldrb	r3, [r4, #2]
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d112      	bne.n	3d20 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    3cfa:	2d00      	cmp	r5, #0
    3cfc:	d10a      	bne.n	3d14 <bt_conn_lookup_state_le+0x34>
			continue;
		}

		if (conns[i].state == state) {
    3cfe:	0023      	movs	r3, r4
    3d00:	334d      	adds	r3, #77	; 0x4d
    3d02:	781b      	ldrb	r3, [r3, #0]
    3d04:	42b3      	cmp	r3, r6
    3d06:	d10b      	bne.n	3d20 <bt_conn_lookup_state_le+0x40>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    3d08:	0020      	movs	r0, r4
    3d0a:	3048      	adds	r0, #72	; 0x48
    3d0c:	f00c ff09 	bl	10b22 <atomic_inc>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
			continue;
		}

		if (conns[i].state == state) {
			return bt_conn_ref(&conns[i]);
    3d10:	0020      	movs	r0, r4
    3d12:	e006      	b.n	3d22 <bt_conn_lookup_state_le+0x42>

		if (conns[i].type != BT_CONN_TYPE_LE) {
			continue;
		}

		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    3d14:	0029      	movs	r1, r5
    3d16:	0020      	movs	r0, r4
    3d18:	f7ff ffae 	bl	3c78 <bt_conn_addr_le_cmp>
    3d1c:	2800      	cmp	r0, #0
    3d1e:	d0ee      	beq.n	3cfe <bt_conn_lookup_state_le+0x1e>
		if (conns[i].state == state) {
			return bt_conn_ref(&conns[i]);
		}
	}

	return NULL;
    3d20:	2000      	movs	r0, #0
}
    3d22:	bd70      	pop	{r4, r5, r6, pc}
    3d24:	200009c0 	.word	0x200009c0

00003d28 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
    3d28:	b510      	push	{r4, lr}
	atomic_dec(&conn->ref);
    3d2a:	3048      	adds	r0, #72	; 0x48
    3d2c:	f00c ff04 	bl	10b38 <atomic_dec>

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
}
    3d30:	bd10      	pop	{r4, pc}
	...

00003d34 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    3d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d36:	0007      	movs	r7, r0
    3d38:	000d      	movs	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    3d3a:	4815      	ldr	r0, [pc, #84]	; (3d90 <bt_conn_le_conn_update+0x5c>)
    3d3c:	210e      	movs	r1, #14
    3d3e:	f7fd ff13 	bl	1b68 <bt_hci_cmd_create>
    3d42:	1e06      	subs	r6, r0, #0
				sizeof(*conn_update));
	if (!buf) {
    3d44:	d021      	beq.n	3d8a <bt_conn_le_conn_update+0x56>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    3d46:	210e      	movs	r1, #14
    3d48:	3008      	adds	r0, #8
    3d4a:	f00c fc3b 	bl	105c4 <net_buf_simple_add>
    3d4e:	0004      	movs	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    3d50:	220e      	movs	r2, #14
    3d52:	2100      	movs	r1, #0
    3d54:	f7fc ffa5 	bl	ca2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    3d58:	783b      	ldrb	r3, [r7, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3d5a:	0031      	movs	r1, r6
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
	memset(conn_update, 0, sizeof(*conn_update));
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    3d5c:	7023      	strb	r3, [r4, #0]
    3d5e:	787b      	ldrb	r3, [r7, #1]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3d60:	480b      	ldr	r0, [pc, #44]	; (3d90 <bt_conn_le_conn_update+0x5c>)
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
	memset(conn_update, 0, sizeof(*conn_update));
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    3d62:	7063      	strb	r3, [r4, #1]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    3d64:	782b      	ldrb	r3, [r5, #0]
    3d66:	70a3      	strb	r3, [r4, #2]
    3d68:	786b      	ldrb	r3, [r5, #1]
    3d6a:	70e3      	strb	r3, [r4, #3]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    3d6c:	78ab      	ldrb	r3, [r5, #2]
    3d6e:	7123      	strb	r3, [r4, #4]
    3d70:	78eb      	ldrb	r3, [r5, #3]
    3d72:	7163      	strb	r3, [r4, #5]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    3d74:	792b      	ldrb	r3, [r5, #4]
    3d76:	71a3      	strb	r3, [r4, #6]
    3d78:	796b      	ldrb	r3, [r5, #5]
    3d7a:	71e3      	strb	r3, [r4, #7]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    3d7c:	79ab      	ldrb	r3, [r5, #6]
    3d7e:	7223      	strb	r3, [r4, #8]
    3d80:	79eb      	ldrb	r3, [r5, #7]
    3d82:	7263      	strb	r3, [r4, #9]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3d84:	f7fe fbc2 	bl	250c <bt_hci_cmd_send>
    3d88:	e001      	b.n	3d8e <bt_conn_le_conn_update+0x5a>
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
				sizeof(*conn_update));
	if (!buf) {
		return -ENOBUFS;
    3d8a:	2037      	movs	r0, #55	; 0x37
    3d8c:	4240      	negs	r0, r0
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}
    3d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d90:	00002013 	.word	0x00002013

00003d94 <bt_conn_le_param_update>:
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    3d94:	0003      	movs	r3, r0
	return 0;
}

int bt_conn_le_param_update(struct bt_conn *conn,
			    const struct bt_le_conn_param *param)
{
    3d96:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    3d98:	3366      	adds	r3, #102	; 0x66
    3d9a:	881b      	ldrh	r3, [r3, #0]
    3d9c:	880a      	ldrh	r2, [r1, #0]
	return 0;
}

int bt_conn_le_param_update(struct bt_conn *conn,
			    const struct bt_le_conn_param *param)
{
    3d9e:	0004      	movs	r4, r0
    3da0:	000d      	movs	r5, r1
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    3da2:	429a      	cmp	r2, r3
    3da4:	d80e      	bhi.n	3dc4 <bt_conn_le_param_update+0x30>
    3da6:	884a      	ldrh	r2, [r1, #2]
    3da8:	429a      	cmp	r2, r3
    3daa:	d30b      	bcc.n	3dc4 <bt_conn_le_param_update+0x30>
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
    3dac:	0003      	movs	r3, r0
    3dae:	336c      	adds	r3, #108	; 0x6c
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
    3db0:	881a      	ldrh	r2, [r3, #0]
    3db2:	888b      	ldrh	r3, [r1, #4]
    3db4:	429a      	cmp	r2, r3
    3db6:	d105      	bne.n	3dc4 <bt_conn_le_param_update+0x30>
	    conn->le.latency == param->latency &&
	    conn->le.timeout == param->timeout) {
    3db8:	0003      	movs	r3, r0
    3dba:	336e      	adds	r3, #110	; 0x6e
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
    3dbc:	881a      	ldrh	r2, [r3, #0]
    3dbe:	88cb      	ldrh	r3, [r1, #6]
    3dc0:	429a      	cmp	r2, r3
    3dc2:	d01b      	beq.n	3dfc <bt_conn_le_param_update+0x68>
	    conn->le.timeout == param->timeout) {
		return -EALREADY;
	}

	/* Cancel any pending update */
	k_delayed_work_cancel(&conn->le.update_work);
    3dc4:	0020      	movs	r0, r4
    3dc6:	307c      	adds	r0, #124	; 0x7c
    3dc8:	f00e f86a 	bl	11ea0 <k_delayed_work_cancel>

	/* Use LE connection parameter request if both local and remote support
	 * it; or if local role is master then use LE connection update.
	 */
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    3dcc:	4b0d      	ldr	r3, [pc, #52]	; (3e04 <bt_conn_le_param_update+0x70>)
    3dce:	3370      	adds	r3, #112	; 0x70
    3dd0:	781a      	ldrb	r2, [r3, #0]
    3dd2:	2302      	movs	r3, #2
    3dd4:	421a      	tst	r2, r3
    3dd6:	d004      	beq.n	3de2 <bt_conn_le_param_update+0x4e>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    3dd8:	0022      	movs	r2, r4
    3dda:	3270      	adds	r2, #112	; 0x70
	k_delayed_work_cancel(&conn->le.update_work);

	/* Use LE connection parameter request if both local and remote support
	 * it; or if local role is master then use LE connection update.
	 */
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    3ddc:	7812      	ldrb	r2, [r2, #0]
    3dde:	421a      	tst	r2, r3
    3de0:	d102      	bne.n	3de8 <bt_conn_le_param_update+0x54>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    3de2:	78e3      	ldrb	r3, [r4, #3]
    3de4:	2b00      	cmp	r3, #0
    3de6:	d104      	bne.n	3df2 <bt_conn_le_param_update+0x5e>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
		return bt_conn_le_conn_update(conn, param);
    3de8:	0029      	movs	r1, r5
    3dea:	0020      	movs	r0, r4
    3dec:	f7ff ffa2 	bl	3d34 <bt_conn_le_conn_update>
    3df0:	e006      	b.n	3e00 <bt_conn_le_param_update+0x6c>
	}

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
    3df2:	0029      	movs	r1, r5
    3df4:	0020      	movs	r0, r4
    3df6:	f000 faef 	bl	43d8 <bt_l2cap_update_conn_param>
    3dfa:	e001      	b.n	3e00 <bt_conn_le_param_update+0x6c>
	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
	    conn->le.timeout == param->timeout) {
		return -EALREADY;
    3dfc:	2045      	movs	r0, #69	; 0x45
    3dfe:	4240      	negs	r0, r0

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
}
    3e00:	bd70      	pop	{r4, r5, r6, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	20000198 	.word	0x20000198

00003e08 <le_conn_update>:
	/* Default to accepting if there's no app callback */
	return true;
}

static void le_conn_update(struct k_work *work)
{
    3e08:	b507      	push	{r0, r1, r2, lr}
	    conn->state == BT_CONN_CONNECT) {
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
		return;
	}

	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    3e0a:	0003      	movs	r3, r0
    3e0c:	4669      	mov	r1, sp
    3e0e:	3b14      	subs	r3, #20
    3e10:	881b      	ldrh	r3, [r3, #0]
    3e12:	0002      	movs	r2, r0
    3e14:	800b      	strh	r3, [r1, #0]
    3e16:	0003      	movs	r3, r0
    3e18:	3b12      	subs	r3, #18
    3e1a:	881b      	ldrh	r3, [r3, #0]
    3e1c:	3a7c      	subs	r2, #124	; 0x7c
    3e1e:	804b      	strh	r3, [r1, #2]
    3e20:	0003      	movs	r3, r0
    3e22:	3b10      	subs	r3, #16
    3e24:	881b      	ldrh	r3, [r3, #0]
    3e26:	808b      	strh	r3, [r1, #4]
    3e28:	0003      	movs	r3, r0
    3e2a:	3b0e      	subs	r3, #14
    3e2c:	881b      	ldrh	r3, [r3, #0]
				 conn->le.interval_max,
				 conn->le.latency,
				 conn->le.timeout);

	bt_conn_le_param_update(conn, param);
    3e2e:	0010      	movs	r0, r2
	    conn->state == BT_CONN_CONNECT) {
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
		return;
	}

	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    3e30:	80cb      	strh	r3, [r1, #6]
				 conn->le.interval_max,
				 conn->le.latency,
				 conn->le.timeout);

	bt_conn_le_param_update(conn, param);
    3e32:	f7ff ffaf 	bl	3d94 <bt_conn_le_param_update>
}
    3e36:	bd07      	pop	{r0, r1, r2, pc}

00003e38 <bt_conn_create_pdu>:

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    3e38:	b570      	push	{r4, r5, r6, lr}
    3e3a:	000c      	movs	r4, r1
	struct net_buf *buf;

	if (!pool) {
    3e3c:	2800      	cmp	r0, #0
    3e3e:	d100      	bne.n	3e42 <bt_conn_create_pdu+0xa>
		pool = &acl_tx_pool;
    3e40:	4805      	ldr	r0, [pc, #20]	; (3e58 <bt_conn_create_pdu+0x20>)
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    3e42:	2101      	movs	r1, #1
    3e44:	4249      	negs	r1, r1
    3e46:	f00c fb27 	bl	10498 <net_buf_alloc>
    3e4a:	0005      	movs	r5, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BLUETOOTH_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    3e4c:	1d21      	adds	r1, r4, #4
    3e4e:	f00c fb83 	bl	10558 <net_buf_reserve>

	return buf;
}
    3e52:	0028      	movs	r0, r5
    3e54:	bd70      	pop	{r4, r5, r6, pc}
    3e56:	46c0      	nop			; (mov r8, r8)
    3e58:	20000628 	.word	0x20000628

00003e5c <create_frag.isra.6>:
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
}

static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    3e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e5e:	000f      	movs	r7, r1
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    3e60:	2100      	movs	r1, #0
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
}

static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    3e62:	0005      	movs	r5, r0
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    3e64:	0008      	movs	r0, r1
    3e66:	f7ff ffe7 	bl	3e38 <bt_conn_create_pdu>

	if (conn->state != BT_CONN_CONNECTED) {
    3e6a:	782a      	ldrb	r2, [r5, #0]
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    3e6c:	0004      	movs	r4, r0

	if (conn->state != BT_CONN_CONNECTED) {
    3e6e:	2a03      	cmp	r2, #3
    3e70:	d003      	beq.n	3e7a <create_frag.isra.6+0x1e>
		net_buf_unref(frag);
    3e72:	f00c fb85 	bl	10580 <net_buf_unref>
		return NULL;
    3e76:	2000      	movs	r0, #0
    3e78:	e022      	b.n	3ec0 <create_frag.isra.6+0x64>
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    3e7a:	89c3      	ldrh	r3, [r0, #14]

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3e7c:	0006      	movs	r6, r0
		net_buf_unref(frag);
		return NULL;
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    3e7e:	18c3      	adds	r3, r0, r3
    3e80:	3313      	adds	r3, #19
    3e82:	4393      	bics	r3, r2
    3e84:	2200      	movs	r2, #0
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    3e86:	4d0f      	ldr	r5, [pc, #60]	; (3ec4 <create_frag.isra.6+0x68>)
		net_buf_unref(frag);
		return NULL;
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    3e88:	601a      	str	r2, [r3, #0]
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    3e8a:	3580      	adds	r5, #128	; 0x80
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3e8c:	882b      	ldrh	r3, [r5, #0]
    3e8e:	3608      	adds	r6, #8
    3e90:	0030      	movs	r0, r6
    3e92:	9301      	str	r3, [sp, #4]
    3e94:	f00c fbd7 	bl	10646 <net_buf_simple_tailroom>
    3e98:	9b01      	ldr	r3, [sp, #4]
    3e9a:	4283      	cmp	r3, r0
    3e9c:	d201      	bcs.n	3ea2 <create_frag.isra.6+0x46>
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    3e9e:	882d      	ldrh	r5, [r5, #0]
    3ea0:	e003      	b.n	3eaa <create_frag.isra.6+0x4e>
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3ea2:	0030      	movs	r0, r6
    3ea4:	f00c fbcf 	bl	10646 <net_buf_simple_tailroom>
    3ea8:	b285      	uxth	r5, r0

	net_buf_add_mem(frag, buf->data, frag_len);
    3eaa:	002a      	movs	r2, r5
    3eac:	68b9      	ldr	r1, [r7, #8]
    3eae:	0030      	movs	r0, r6
    3eb0:	f00c fb8f 	bl	105d2 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    3eb4:	0038      	movs	r0, r7
    3eb6:	0029      	movs	r1, r5
    3eb8:	3008      	adds	r0, #8
    3eba:	f00c fba4 	bl	10606 <net_buf_simple_pull>
    3ebe:	0020      	movs	r0, r4

	return frag;
}
    3ec0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ec2:	46c0      	nop			; (mov r8, r8)
    3ec4:	20000198 	.word	0x20000198

00003ec8 <bt_conn_process_tx>:

	return ev_count;
}

void bt_conn_process_tx(struct bt_conn *conn)
{
    3ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    3eca:	0007      	movs	r7, r0
    3ecc:	374d      	adds	r7, #77	; 0x4d
    3ece:	783b      	ldrb	r3, [r7, #0]

	return ev_count;
}

void bt_conn_process_tx(struct bt_conn *conn)
{
    3ed0:	0005      	movs	r5, r0
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	d10a      	bne.n	3eec <bt_conn_process_tx+0x24>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3ed6:	2141      	movs	r1, #65	; 0x41
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    3ed8:	3004      	adds	r0, #4
    3eda:	4249      	negs	r1, r1
    3edc:	f00c fe4e 	bl	10b7c <atomic_and>
{
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    3ee0:	0643      	lsls	r3, r0, #25
    3ee2:	d503      	bpl.n	3eec <bt_conn_process_tx+0x24>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
		conn_cleanup(conn);
    3ee4:	0028      	movs	r0, r5
    3ee6:	f7ff fb7f 	bl	35e8 <conn_cleanup>
		return;
    3eea:	e044      	b.n	3f76 <bt_conn_process_tx+0xae>
	}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    3eec:	0028      	movs	r0, r5
    3eee:	2100      	movs	r1, #0
    3ef0:	302c      	adds	r0, #44	; 0x2c
    3ef2:	f00c fb19 	bl	10528 <net_buf_get>
    3ef6:	1e04      	subs	r4, r0, #0
	BT_ASSERT(buf);
    3ef8:	d10c      	bne.n	3f14 <bt_conn_process_tx+0x4c>
    3efa:	4b1f      	ldr	r3, [pc, #124]	; (3f78 <bt_conn_process_tx+0xb0>)
    3efc:	4a1f      	ldr	r2, [pc, #124]	; (3f7c <bt_conn_process_tx+0xb4>)
    3efe:	9301      	str	r3, [sp, #4]
    3f00:	4b1f      	ldr	r3, [pc, #124]	; (3f80 <bt_conn_process_tx+0xb8>)
    3f02:	4920      	ldr	r1, [pc, #128]	; (3f84 <bt_conn_process_tx+0xbc>)
    3f04:	9300      	str	r3, [sp, #0]
    3f06:	4820      	ldr	r0, [pc, #128]	; (3f88 <bt_conn_process_tx+0xc0>)
    3f08:	4b20      	ldr	r3, [pc, #128]	; (3f8c <bt_conn_process_tx+0xc4>)
    3f0a:	f7fd fcc3 	bl	1894 <printk>
    3f0e:	b662      	cpsie	i
    3f10:	2004      	movs	r0, #4
    3f12:	df02      	svc	2
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    3f14:	4e1e      	ldr	r6, [pc, #120]	; (3f90 <bt_conn_process_tx+0xc8>)
	struct net_buf *frag;

	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);

	/* Send directly if the packet fits the ACL MTU */
	if (buf->len <= conn_mtu(conn)) {
    3f16:	8982      	ldrh	r2, [r0, #12]
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    3f18:	0033      	movs	r3, r6
    3f1a:	3380      	adds	r3, #128	; 0x80
	struct net_buf *frag;

	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);

	/* Send directly if the packet fits the ACL MTU */
	if (buf->len <= conn_mtu(conn)) {
    3f1c:	881b      	ldrh	r3, [r3, #0]
    3f1e:	429a      	cmp	r2, r3
    3f20:	d802      	bhi.n	3f28 <bt_conn_process_tx+0x60>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    3f22:	2300      	movs	r3, #0
    3f24:	001a      	movs	r2, r3
    3f26:	e01d      	b.n	3f64 <bt_conn_process_tx+0x9c>
	}

	/* Create & enqueue first fragment */
	frag = create_frag(conn, buf);
    3f28:	0001      	movs	r1, r0
    3f2a:	0038      	movs	r0, r7
    3f2c:	f7ff ff96 	bl	3e5c <create_frag.isra.6>
    3f30:	1e01      	subs	r1, r0, #0
	if (!frag) {
    3f32:	d01d      	beq.n	3f70 <bt_conn_process_tx+0xa8>
		return false;
	}

	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    3f34:	2301      	movs	r3, #1
    3f36:	2200      	movs	r2, #0
		frag = create_frag(conn, buf);
		if (!frag) {
			return false;
		}

		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    3f38:	0028      	movs	r0, r5
    3f3a:	f7ff fcbb 	bl	38b4 <send_frag>
    3f3e:	2800      	cmp	r0, #0
    3f40:	d016      	beq.n	3f70 <bt_conn_process_tx+0xa8>
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    3f42:	0033      	movs	r3, r6
    3f44:	3380      	adds	r3, #128	; 0x80

	/*
	 * Send the fragments. For the last one simply use the original
	 * buffer (which works since we've used net_buf_pull on it.
	 */
	while (buf->len > conn_mtu(conn)) {
    3f46:	89a2      	ldrh	r2, [r4, #12]
    3f48:	881b      	ldrh	r3, [r3, #0]
    3f4a:	429a      	cmp	r2, r3
    3f4c:	d908      	bls.n	3f60 <bt_conn_process_tx+0x98>
		frag = create_frag(conn, buf);
    3f4e:	0021      	movs	r1, r4
    3f50:	0038      	movs	r0, r7
    3f52:	f7ff ff83 	bl	3e5c <create_frag.isra.6>
    3f56:	1e01      	subs	r1, r0, #0
		if (!frag) {
    3f58:	d00a      	beq.n	3f70 <bt_conn_process_tx+0xa8>
			return false;
		}

		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    3f5a:	2301      	movs	r3, #1
    3f5c:	001a      	movs	r2, r3
    3f5e:	e7eb      	b.n	3f38 <bt_conn_process_tx+0x70>
			return false;
		}
	}

	return send_frag(conn, buf, BT_ACL_CONT, false);
    3f60:	2300      	movs	r3, #0
    3f62:	2201      	movs	r2, #1
    3f64:	0021      	movs	r1, r4
    3f66:	0028      	movs	r0, r5
    3f68:	f7ff fca4 	bl	38b4 <send_frag>
	}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);
	if (!send_buf(conn, buf)) {
    3f6c:	2800      	cmp	r0, #0
    3f6e:	d102      	bne.n	3f76 <bt_conn_process_tx+0xae>
		net_buf_unref(buf);
    3f70:	0020      	movs	r0, r4
    3f72:	f00c fb05 	bl	10580 <net_buf_unref>
	}
}
    3f76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3f78:	0001241d 	.word	0x0001241d
    3f7c:	0001246d 	.word	0x0001246d
    3f80:	000124a8 	.word	0x000124a8
    3f84:	000123e3 	.word	0x000123e3
    3f88:	0001268a 	.word	0x0001268a
    3f8c:	00014498 	.word	0x00014498
    3f90:	20000198 	.word	0x20000198

00003f94 <bt_conn_init>:
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    3f94:	4a0c      	ldr	r2, [pc, #48]	; (3fc8 <bt_conn_init+0x34>)
    3f96:	4b0d      	ldr	r3, [pc, #52]	; (3fcc <bt_conn_init+0x38>)
    3f98:	6811      	ldr	r1, [r2, #0]
	}
}
#endif /* CONFIG_BLUETOOTH_SMP || CONFIG_BLUETOOTH_BREDR */

int bt_conn_init(void)
{
    3f9a:	b510      	push	{r4, lr}
    3f9c:	6019      	str	r1, [r3, #0]
	list->head = node;

	if (!list->tail) {
    3f9e:	6851      	ldr	r1, [r2, #4]
    3fa0:	2900      	cmp	r1, #0
    3fa2:	d100      	bne.n	3fa6 <bt_conn_init+0x12>
		list->tail = list->head;
    3fa4:	6053      	str	r3, [r2, #4]
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;

	if (!list->tail) {
    3fa6:	6851      	ldr	r1, [r2, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    3fa8:	609b      	str	r3, [r3, #8]
	list->head = node;
    3faa:	3308      	adds	r3, #8
    3fac:	6013      	str	r3, [r2, #0]

	if (!list->tail) {
    3fae:	2900      	cmp	r1, #0
    3fb0:	d100      	bne.n	3fb4 <bt_conn_init+0x20>
		list->tail = list->head;
    3fb2:	6053      	str	r3, [r2, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    3fb4:	f001 fc70 	bl	5898 <bt_att_init>

	err = bt_smp_init();
    3fb8:	f002 f924 	bl	6204 <bt_smp_init>
    3fbc:	1e04      	subs	r4, r0, #0
	if (err) {
    3fbe:	d101      	bne.n	3fc4 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
    3fc0:	f000 fa48 	bl	4454 <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    3fc4:	0020      	movs	r0, r4
    3fc6:	bd10      	pop	{r4, pc}
    3fc8:	200009ac 	.word	0x200009ac
    3fcc:	2000099c 	.word	0x2000099c

00003fd0 <l2cap_disconnected>:

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}
    3fd0:	4770      	bx	lr
	...

00003fd4 <l2cap_accept>:

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    3fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    3fd6:	4a0c      	ldr	r2, [pc, #48]	; (4008 <l2cap_accept+0x34>)
    3fd8:	6813      	ldr	r3, [r2, #0]
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d104      	bne.n	3fe8 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    3fde:	480b      	ldr	r0, [pc, #44]	; (400c <l2cap_accept+0x38>)
    3fe0:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    3fe2:	600a      	str	r2, [r1, #0]

		return 0;
    3fe4:	0018      	movs	r0, r3
    3fe6:	e00c      	b.n	4002 <l2cap_accept+0x2e>
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    3fe8:	4b09      	ldr	r3, [pc, #36]	; (4010 <l2cap_accept+0x3c>)
    3fea:	9001      	str	r0, [sp, #4]
    3fec:	9302      	str	r3, [sp, #8]
    3fee:	4b09      	ldr	r3, [pc, #36]	; (4014 <l2cap_accept+0x40>)
    3ff0:	4a09      	ldr	r2, [pc, #36]	; (4018 <l2cap_accept+0x44>)
    3ff2:	9300      	str	r3, [sp, #0]
    3ff4:	4909      	ldr	r1, [pc, #36]	; (401c <l2cap_accept+0x48>)
    3ff6:	4b0a      	ldr	r3, [pc, #40]	; (4020 <l2cap_accept+0x4c>)
    3ff8:	480a      	ldr	r0, [pc, #40]	; (4024 <l2cap_accept+0x50>)
    3ffa:	f7fd fc4b 	bl	1894 <printk>

	return -ENOMEM;
    3ffe:	200c      	movs	r0, #12
    4000:	4240      	negs	r0, r0
}
    4002:	b005      	add	sp, #20
    4004:	bd00      	pop	{pc}
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	20000a74 	.word	0x20000a74
    400c:	20000284 	.word	0x20000284
    4010:	0001241d 	.word	0x0001241d
    4014:	000124a8 	.word	0x000124a8
    4018:	0001246d 	.word	0x0001246d
    401c:	000123e3 	.word	0x000123e3
    4020:	0001450f 	.word	0x0001450f
    4024:	00012c95 	.word	0x00012c95

00004028 <l2cap_connected>:
    4028:	4770      	bx	lr
	...

0000402c <bt_l2cap_le_fixed_chan_register>:
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    402c:	2300      	movs	r3, #0

void bt_l2cap_le_fixed_chan_register(struct bt_l2cap_fixed_chan *chan)
{
	BT_DBG("CID 0x%04x", chan->cid);

	sys_slist_append(&le_channels, &chan->node);
    402e:	0002      	movs	r2, r0
    4030:	6083      	str	r3, [r0, #8]

	if (!list->tail) {
    4032:	4b05      	ldr	r3, [pc, #20]	; (4048 <bt_l2cap_le_fixed_chan_register+0x1c>)
    4034:	3208      	adds	r2, #8
    4036:	6859      	ldr	r1, [r3, #4]
    4038:	2900      	cmp	r1, #0
    403a:	d102      	bne.n	4042 <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail = node;
    403c:	605a      	str	r2, [r3, #4]
		list->head = node;
    403e:	601a      	str	r2, [r3, #0]
    4040:	e001      	b.n	4046 <bt_l2cap_le_fixed_chan_register+0x1a>
	} else {
		list->tail->next = node;
    4042:	600a      	str	r2, [r1, #0]
		list->tail = node;
    4044:	605a      	str	r2, [r3, #4]
}
    4046:	4770      	bx	lr
    4048:	20000a68 	.word	0x20000a68

0000404c <bt_l2cap_chan_remove>:
	return NULL;
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_chan_remove(struct bt_conn *conn, struct bt_l2cap_chan *ch)
{
    404c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    404e:	b530      	push	{r4, r5, lr}
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4050:	2b00      	cmp	r3, #0
    4052:	d020      	beq.n	4096 <bt_l2cap_chan_remove+0x4a>
    4054:	2200      	movs	r2, #0
    4056:	3b08      	subs	r3, #8
    4058:	2b00      	cmp	r3, #0
    405a:	d01c      	beq.n	4096 <bt_l2cap_chan_remove+0x4a>
		if (chan == ch) {
    405c:	428b      	cmp	r3, r1
    405e:	d111      	bne.n	4084 <bt_l2cap_chan_remove+0x38>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    4060:	000d      	movs	r5, r1
    4062:	688b      	ldr	r3, [r1, #8]
    4064:	3508      	adds	r5, #8
    4066:	6c44      	ldr	r4, [r0, #68]	; 0x44
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    4068:	2a00      	cmp	r2, #0
    406a:	d104      	bne.n	4076 <bt_l2cap_chan_remove+0x2a>
		list->head = node->next;
    406c:	6403      	str	r3, [r0, #64]	; 0x40

		/* Was node also the tail? */
		if (list->tail == node) {
    406e:	42a5      	cmp	r5, r4
    4070:	d105      	bne.n	407e <bt_l2cap_chan_remove+0x32>
			list->tail = list->head;
    4072:	6443      	str	r3, [r0, #68]	; 0x44
    4074:	e003      	b.n	407e <bt_l2cap_chan_remove+0x32>
		}
	} else {
		prev_node->next = node->next;
    4076:	6013      	str	r3, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    4078:	42a5      	cmp	r5, r4
    407a:	d100      	bne.n	407e <bt_l2cap_chan_remove+0x32>
			list->tail = prev_node;
    407c:	6442      	str	r2, [r0, #68]	; 0x44
		}
	}

	node->next = NULL;
    407e:	2300      	movs	r3, #0
    4080:	608b      	str	r3, [r1, #8]
    4082:	e008      	b.n	4096 <bt_l2cap_chan_remove+0x4a>
			return;
		}

		prev = &chan->node;
    4084:	001a      	movs	r2, r3
    4086:	3208      	adds	r2, #8
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    4088:	2a00      	cmp	r2, #0
    408a:	d004      	beq.n	4096 <bt_l2cap_chan_remove+0x4a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    408c:	689b      	ldr	r3, [r3, #8]
void bt_l2cap_chan_remove(struct bt_conn *conn, struct bt_l2cap_chan *ch)
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    408e:	2b00      	cmp	r3, #0
    4090:	d001      	beq.n	4096 <bt_l2cap_chan_remove+0x4a>
    4092:	3b08      	subs	r3, #8
    4094:	e7e0      	b.n	4058 <bt_l2cap_chan_remove+0xc>
			return;
		}

		prev = &chan->node;
	}
}
    4096:	bd30      	pop	{r4, r5, pc}

00004098 <bt_l2cap_chan_del>:

void bt_l2cap_chan_del(struct bt_l2cap_chan *chan)
{
	BT_DBG("conn %p chan %p", chan->conn, chan);

	if (!chan->conn) {
    4098:	6803      	ldr	r3, [r0, #0]
}
#endif /* CONFIG_BLUETOOTH_DEBUG_L2CAP */
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_chan_del(struct bt_l2cap_chan *chan)
{
    409a:	b510      	push	{r4, lr}
    409c:	0004      	movs	r4, r0
	BT_DBG("conn %p chan %p", chan->conn, chan);

	if (!chan->conn) {
    409e:	2b00      	cmp	r3, #0
    40a0:	d006      	beq.n	40b0 <bt_l2cap_chan_del+0x18>
		goto destroy;
	}

	if (chan->ops->disconnected) {
    40a2:	6843      	ldr	r3, [r0, #4]
    40a4:	685b      	ldr	r3, [r3, #4]
    40a6:	2b00      	cmp	r3, #0
    40a8:	d000      	beq.n	40ac <bt_l2cap_chan_del+0x14>
		chan->ops->disconnected(chan);
    40aa:	4798      	blx	r3
	}

	chan->conn = NULL;
    40ac:	2300      	movs	r3, #0
    40ae:	6023      	str	r3, [r4, #0]
	/* Reset internal members of common channel */
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
	chan->psm = 0;
#endif

	if (chan->destroy) {
    40b0:	68e3      	ldr	r3, [r4, #12]
    40b2:	2b00      	cmp	r3, #0
    40b4:	d001      	beq.n	40ba <bt_l2cap_chan_del+0x22>
		chan->destroy(chan);
    40b6:	0020      	movs	r0, r4
    40b8:	4798      	blx	r3
	}
}
    40ba:	bd10      	pop	{r4, pc}

000040bc <l2cap_rtx_timeout>:

static void l2cap_rtx_timeout(struct k_work *work)
{
    40bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);

	BT_ERR("chan %p timeout", chan);
    40be:	3810      	subs	r0, #16
    40c0:	0004      	movs	r4, r0
    40c2:	4b09      	ldr	r3, [pc, #36]	; (40e8 <l2cap_rtx_timeout+0x2c>)
    40c4:	4a09      	ldr	r2, [pc, #36]	; (40ec <l2cap_rtx_timeout+0x30>)
    40c6:	9302      	str	r3, [sp, #8]
    40c8:	4b09      	ldr	r3, [pc, #36]	; (40f0 <l2cap_rtx_timeout+0x34>)
    40ca:	9001      	str	r0, [sp, #4]
    40cc:	9300      	str	r3, [sp, #0]
    40ce:	4909      	ldr	r1, [pc, #36]	; (40f4 <l2cap_rtx_timeout+0x38>)
    40d0:	4b09      	ldr	r3, [pc, #36]	; (40f8 <l2cap_rtx_timeout+0x3c>)
    40d2:	480a      	ldr	r0, [pc, #40]	; (40fc <l2cap_rtx_timeout+0x40>)
    40d4:	f7fd fbde 	bl	1894 <printk>

	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    40d8:	0021      	movs	r1, r4
    40da:	6820      	ldr	r0, [r4, #0]
    40dc:	f7ff ffb6 	bl	404c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    40e0:	0020      	movs	r0, r4
    40e2:	f7ff ffd9 	bl	4098 <bt_l2cap_chan_del>
}
    40e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    40e8:	0001241d 	.word	0x0001241d
    40ec:	0001246d 	.word	0x0001246d
    40f0:	000124a8 	.word	0x000124a8
    40f4:	000123e3 	.word	0x000123e3
    40f8:	0001451c 	.word	0x0001451c
    40fc:	00012ccc 	.word	0x00012ccc

00004100 <bt_l2cap_connected>:

	return true;
}

void bt_l2cap_connected(struct bt_conn *conn)
{
    4100:	4b1a      	ldr	r3, [pc, #104]	; (416c <bt_l2cap_connected+0x6c>)
    4102:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4104:	681b      	ldr	r3, [r3, #0]
    4106:	0006      	movs	r6, r0
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_connected(conn);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4108:	001c      	movs	r4, r3
    410a:	3c08      	subs	r4, #8
    410c:	2b00      	cmp	r3, #0
    410e:	d02b      	beq.n	4168 <bt_l2cap_connected+0x68>
    4110:	2c00      	cmp	r4, #0
    4112:	d029      	beq.n	4168 <bt_l2cap_connected+0x68>
		struct bt_l2cap_le_chan *ch;

		if (fchan->accept(conn, &chan) < 0) {
    4114:	a901      	add	r1, sp, #4
    4116:	0030      	movs	r0, r6
    4118:	6863      	ldr	r3, [r4, #4]
    411a:	4798      	blx	r3
    411c:	2800      	cmp	r0, #0
    411e:	db1e      	blt.n	415e <bt_l2cap_connected+0x5e>
			continue;
		}

		ch = BT_L2CAP_LE_CHAN(chan);
    4120:	9d01      	ldr	r5, [sp, #4]

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
    4122:	8823      	ldrh	r3, [r4, #0]
		ch->tx.cid = fchan->cid;
    4124:	002a      	movs	r2, r5
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4126:	0028      	movs	r0, r5

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
		ch->tx.cid = fchan->cid;
    4128:	3254      	adds	r2, #84	; 0x54
		ch = BT_L2CAP_LE_CHAN(chan);

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
    412a:	872b      	strh	r3, [r5, #56]	; 0x38
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    412c:	4910      	ldr	r1, [pc, #64]	; (4170 <bt_l2cap_connected+0x70>)

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
		ch->tx.cid = fchan->cid;
    412e:	8013      	strh	r3, [r2, #0]
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4130:	3010      	adds	r0, #16
    4132:	f00d fe9f 	bl	11e74 <k_delayed_work_init>

void bt_l2cap_chan_add(struct bt_conn *conn, struct bt_l2cap_chan *chan,
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
    4136:	002a      	movs	r2, r5
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    4138:	2300      	movs	r3, #0

	if (!list->tail) {
    413a:	6c71      	ldr	r1, [r6, #68]	; 0x44
    413c:	3208      	adds	r2, #8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    413e:	60ab      	str	r3, [r5, #8]

	if (!list->tail) {
    4140:	4299      	cmp	r1, r3
    4142:	d102      	bne.n	414a <bt_l2cap_connected+0x4a>
		list->tail = node;
    4144:	6472      	str	r2, [r6, #68]	; 0x44
		list->head = node;
    4146:	6432      	str	r2, [r6, #64]	; 0x40
    4148:	e001      	b.n	414e <bt_l2cap_connected+0x4e>
	} else {
		list->tail->next = node;
    414a:	600a      	str	r2, [r1, #0]
		list->tail = node;
    414c:	6472      	str	r2, [r6, #68]	; 0x44

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    414e:	9801      	ldr	r0, [sp, #4]
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
	chan->conn = conn;
	chan->destroy = destroy;
    4150:	60eb      	str	r3, [r5, #12]

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    4152:	6843      	ldr	r3, [r0, #4]
void bt_l2cap_chan_add(struct bt_conn *conn, struct bt_l2cap_chan *chan,
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
	chan->conn = conn;
    4154:	602e      	str	r6, [r5, #0]

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    4156:	681b      	ldr	r3, [r3, #0]
    4158:	2b00      	cmp	r3, #0
    415a:	d000      	beq.n	415e <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
    415c:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    415e:	68a4      	ldr	r4, [r4, #8]
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_connected(conn);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4160:	2c00      	cmp	r4, #0
    4162:	d001      	beq.n	4168 <bt_l2cap_connected+0x68>
    4164:	3c08      	subs	r4, #8
    4166:	e7d3      	b.n	4110 <bt_l2cap_connected+0x10>

		if (chan->ops->connected) {
			chan->ops->connected(chan);
		}
	}
}
    4168:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	20000a68 	.word	0x20000a68
    4170:	000040bd 	.word	0x000040bd

00004174 <bt_l2cap_disconnected>:

void bt_l2cap_disconnected(struct bt_conn *conn)
{
    4174:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4176:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4178:	2b00      	cmp	r3, #0
    417a:	d015      	beq.n	41a8 <bt_l2cap_disconnected+0x34>
    417c:	0018      	movs	r0, r3
    417e:	3808      	subs	r0, #8
    4180:	2800      	cmp	r0, #0
    4182:	d011      	beq.n	41a8 <bt_l2cap_disconnected+0x34>
    4184:	681b      	ldr	r3, [r3, #0]
    4186:	001c      	movs	r4, r3
    4188:	3c08      	subs	r4, #8
    418a:	2b00      	cmp	r3, #0
    418c:	d00a      	beq.n	41a4 <bt_l2cap_disconnected+0x30>
		bt_l2cap_chan_del(chan);
    418e:	f7ff ff83 	bl	4098 <bt_l2cap_chan_del>

void bt_l2cap_disconnected(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4192:	2c00      	cmp	r4, #0
    4194:	d008      	beq.n	41a8 <bt_l2cap_disconnected+0x34>
    4196:	68a3      	ldr	r3, [r4, #8]
    4198:	0020      	movs	r0, r4
    419a:	2b00      	cmp	r3, #0
    419c:	d002      	beq.n	41a4 <bt_l2cap_disconnected+0x30>
    419e:	3b08      	subs	r3, #8
    41a0:	001c      	movs	r4, r3
    41a2:	e7f4      	b.n	418e <bt_l2cap_disconnected+0x1a>
		bt_l2cap_chan_del(chan);
    41a4:	f7ff ff78 	bl	4098 <bt_l2cap_chan_del>
	}
}
    41a8:	bd10      	pop	{r4, pc}

000041aa <bt_l2cap_create_pdu>:

	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    41aa:	b510      	push	{r4, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    41ac:	3104      	adds	r1, #4
    41ae:	f7ff fe43 	bl	3e38 <bt_conn_create_pdu>
}
    41b2:	bd10      	pop	{r4, pc}

000041b4 <bt_l2cap_send_cb>:

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    41b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41b6:	0006      	movs	r6, r0
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    41b8:	0010      	movs	r0, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
}

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    41ba:	0015      	movs	r5, r2
    41bc:	000c      	movs	r4, r1
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    41be:	3008      	adds	r0, #8
    41c0:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
}

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    41c2:	001f      	movs	r7, r3
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    41c4:	f00c fa17 	bl	105f6 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    41c8:	89ab      	ldrh	r3, [r5, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    41ca:	7084      	strb	r4, [r0, #2]
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    41cc:	3b04      	subs	r3, #4
    41ce:	b29b      	uxth	r3, r3
    41d0:	7003      	strb	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    41d2:	0a24      	lsrs	r4, r4, #8
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    41d4:	0a1b      	lsrs	r3, r3, #8
    41d6:	7043      	strb	r3, [r0, #1]
	hdr->cid = sys_cpu_to_le16(cid);
    41d8:	70c4      	strb	r4, [r0, #3]

	bt_conn_send_cb(conn, buf, cb);
    41da:	003a      	movs	r2, r7
    41dc:	0029      	movs	r1, r5
    41de:	0030      	movs	r0, r6
    41e0:	f7ff fb04 	bl	37ec <bt_conn_send_cb>
}
    41e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000041e8 <l2cap_recv>:
	bt_l2cap_chan_del(&chan->chan);
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    41e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
	u16_t len;

	if (buf->len < sizeof(*hdr)) {
    41ea:	898b      	ldrh	r3, [r1, #12]
	bt_l2cap_chan_del(&chan->chan);
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    41ec:	b085      	sub	sp, #20
    41ee:	0007      	movs	r7, r0
    41f0:	000e      	movs	r6, r1
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
	u16_t len;

	if (buf->len < sizeof(*hdr)) {
    41f2:	2b03      	cmp	r3, #3
    41f4:	d808      	bhi.n	4208 <l2cap_recv+0x20>
		BT_ERR("Too small L2CAP signaling PDU");
    41f6:	4b36      	ldr	r3, [pc, #216]	; (42d0 <l2cap_recv+0xe8>)
    41f8:	4a36      	ldr	r2, [pc, #216]	; (42d4 <l2cap_recv+0xec>)
    41fa:	9301      	str	r3, [sp, #4]
    41fc:	4b36      	ldr	r3, [pc, #216]	; (42d8 <l2cap_recv+0xf0>)
    41fe:	4937      	ldr	r1, [pc, #220]	; (42dc <l2cap_recv+0xf4>)
    4200:	9300      	str	r3, [sp, #0]
    4202:	4837      	ldr	r0, [pc, #220]	; (42e0 <l2cap_recv+0xf8>)
    4204:	4b37      	ldr	r3, [pc, #220]	; (42e4 <l2cap_recv+0xfc>)
    4206:	e034      	b.n	4272 <l2cap_recv+0x8a>
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
	net_buf_pull(buf, sizeof(*hdr));
    4208:	0008      	movs	r0, r1
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    420a:	688c      	ldr	r4, [r1, #8]
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
	net_buf_pull(buf, sizeof(*hdr));
    420c:	3008      	adds	r0, #8
	if (buf->len < sizeof(*hdr)) {
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
    420e:	78e5      	ldrb	r5, [r4, #3]
    4210:	78a3      	ldrb	r3, [r4, #2]
    4212:	022d      	lsls	r5, r5, #8
	net_buf_pull(buf, sizeof(*hdr));
    4214:	2104      	movs	r1, #4
	if (buf->len < sizeof(*hdr)) {
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
    4216:	431d      	orrs	r5, r3
	net_buf_pull(buf, sizeof(*hdr));
    4218:	f00c f9f5 	bl	10606 <net_buf_simple_pull>

	BT_DBG("Signaling code 0x%02x ident %u len %u", hdr->code,
	       hdr->ident, len);

	if (buf->len != len) {
    421c:	89b3      	ldrh	r3, [r6, #12]
    421e:	429d      	cmp	r5, r3
    4220:	d00c      	beq.n	423c <l2cap_recv+0x54>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    4222:	4a2b      	ldr	r2, [pc, #172]	; (42d0 <l2cap_recv+0xe8>)
    4224:	9301      	str	r3, [sp, #4]
    4226:	4b2c      	ldr	r3, [pc, #176]	; (42d8 <l2cap_recv+0xf0>)
    4228:	9203      	str	r2, [sp, #12]
    422a:	9300      	str	r3, [sp, #0]
    422c:	9502      	str	r5, [sp, #8]
    422e:	4b2d      	ldr	r3, [pc, #180]	; (42e4 <l2cap_recv+0xfc>)
    4230:	4a28      	ldr	r2, [pc, #160]	; (42d4 <l2cap_recv+0xec>)
    4232:	492a      	ldr	r1, [pc, #168]	; (42dc <l2cap_recv+0xf4>)
    4234:	482c      	ldr	r0, [pc, #176]	; (42e8 <l2cap_recv+0x100>)
    4236:	f7fd fb2d 	bl	1894 <printk>
		return;
    423a:	e047      	b.n	42cc <l2cap_recv+0xe4>
	}

	if (!hdr->ident) {
    423c:	7863      	ldrb	r3, [r4, #1]
    423e:	2b00      	cmp	r3, #0
    4240:	d108      	bne.n	4254 <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
    4242:	4b23      	ldr	r3, [pc, #140]	; (42d0 <l2cap_recv+0xe8>)
    4244:	4a23      	ldr	r2, [pc, #140]	; (42d4 <l2cap_recv+0xec>)
    4246:	9301      	str	r3, [sp, #4]
    4248:	4b23      	ldr	r3, [pc, #140]	; (42d8 <l2cap_recv+0xf0>)
    424a:	4924      	ldr	r1, [pc, #144]	; (42dc <l2cap_recv+0xf4>)
    424c:	9300      	str	r3, [sp, #0]
    424e:	4827      	ldr	r0, [pc, #156]	; (42ec <l2cap_recv+0x104>)
    4250:	4b24      	ldr	r3, [pc, #144]	; (42e4 <l2cap_recv+0xfc>)
    4252:	e00e      	b.n	4272 <l2cap_recv+0x8a>
		return;
	}

	switch (hdr->code) {
    4254:	7823      	ldrb	r3, [r4, #0]
    4256:	2b01      	cmp	r3, #1
    4258:	d038      	beq.n	42cc <l2cap_recv+0xe4>
    425a:	2b13      	cmp	r3, #19
    425c:	d10c      	bne.n	4278 <l2cap_recv+0x90>

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
    425e:	2d01      	cmp	r5, #1
    4260:	d834      	bhi.n	42cc <l2cap_recv+0xe4>
		BT_ERR("Too small LE conn param rsp");
    4262:	4b1b      	ldr	r3, [pc, #108]	; (42d0 <l2cap_recv+0xe8>)
    4264:	4a1b      	ldr	r2, [pc, #108]	; (42d4 <l2cap_recv+0xec>)
    4266:	9301      	str	r3, [sp, #4]
    4268:	4b1b      	ldr	r3, [pc, #108]	; (42d8 <l2cap_recv+0xf0>)
    426a:	491c      	ldr	r1, [pc, #112]	; (42dc <l2cap_recv+0xf4>)
    426c:	9300      	str	r3, [sp, #0]
    426e:	4820      	ldr	r0, [pc, #128]	; (42f0 <l2cap_recv+0x108>)
    4270:	4b20      	ldr	r3, [pc, #128]	; (42f4 <l2cap_recv+0x10c>)
    4272:	f7fd fb0f 	bl	1894 <printk>
    4276:	e029      	b.n	42cc <l2cap_recv+0xe4>
	case BT_L2CAP_CMD_REJECT:
		/* Ignored */
		break;
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */
	default:
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    4278:	4a15      	ldr	r2, [pc, #84]	; (42d0 <l2cap_recv+0xe8>)
    427a:	9301      	str	r3, [sp, #4]
    427c:	4b1e      	ldr	r3, [pc, #120]	; (42f8 <l2cap_recv+0x110>)
    427e:	9202      	str	r2, [sp, #8]
    4280:	9300      	str	r3, [sp, #0]
    4282:	4a1e      	ldr	r2, [pc, #120]	; (42fc <l2cap_recv+0x114>)
    4284:	4b17      	ldr	r3, [pc, #92]	; (42e4 <l2cap_recv+0xfc>)
    4286:	4915      	ldr	r1, [pc, #84]	; (42dc <l2cap_recv+0xf4>)
    4288:	481d      	ldr	r0, [pc, #116]	; (4300 <l2cap_recv+0x118>)
    428a:	f7fd fb03 	bl	1894 <printk>
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    428e:	2104      	movs	r1, #4
    4290:	2000      	movs	r0, #0
		/* Ignored */
		break;
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */
	default:
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
		l2cap_send_reject(chan->conn, hdr->ident,
    4292:	683e      	ldr	r6, [r7, #0]
    4294:	7864      	ldrb	r4, [r4, #1]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4296:	f7ff fdcf 	bl	3e38 <bt_conn_create_pdu>
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    429a:	0007      	movs	r7, r0
    429c:	3708      	adds	r7, #8
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    429e:	0005      	movs	r5, r0
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    42a0:	2104      	movs	r1, #4
    42a2:	0038      	movs	r0, r7
    42a4:	f00c f98e 	bl	105c4 <net_buf_simple_add>
	hdr->code = code;
    42a8:	2301      	movs	r3, #1
	hdr->ident = ident;
    42aa:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    42ac:	2102      	movs	r1, #2
    42ae:	2400      	movs	r4, #0
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = code;
    42b0:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);
    42b2:	7081      	strb	r1, [r0, #2]
    42b4:	70c4      	strb	r4, [r0, #3]
	struct net_buf *buf;

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
				      sizeof(*rej) + data_len);

	rej = net_buf_add(buf, sizeof(*rej));
    42b6:	0038      	movs	r0, r7
    42b8:	f00c f984 	bl	105c4 <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    42bc:	0023      	movs	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
    42be:	7004      	strb	r4, [r0, #0]
    42c0:	7044      	strb	r4, [r0, #1]
    42c2:	002a      	movs	r2, r5
    42c4:	2105      	movs	r1, #5
    42c6:	0030      	movs	r0, r6
    42c8:	f7ff ff74 	bl	41b4 <bt_l2cap_send_cb>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
		l2cap_send_reject(chan->conn, hdr->ident,
				  BT_L2CAP_REJ_NOT_UNDERSTOOD, NULL, 0);
		break;
	}
}
    42cc:	b005      	add	sp, #20
    42ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42d0:	0001241d 	.word	0x0001241d
    42d4:	0001246d 	.word	0x0001246d
    42d8:	000124a8 	.word	0x000124a8
    42dc:	000123e3 	.word	0x000123e3
    42e0:	00012cec 	.word	0x00012cec
    42e4:	00014504 	.word	0x00014504
    42e8:	00012d1a 	.word	0x00012d1a
    42ec:	00012d4b 	.word	0x00012d4b
    42f0:	00012d7c 	.word	0x00012d7c
    42f4:	000144f2 	.word	0x000144f2
    42f8:	00012422 	.word	0x00012422
    42fc:	000123dc 	.word	0x000123dc
    4300:	00012da8 	.word	0x00012da8

00004304 <bt_l2cap_le_lookup_tx_cid>:
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
    4304:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
			return chan;
		}
	}

	return NULL;
    4306:	1e18      	subs	r0, r3, #0
struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4308:	d00d      	beq.n	4326 <bt_l2cap_le_lookup_tx_cid+0x22>
    430a:	3b08      	subs	r3, #8
    430c:	0018      	movs	r0, r3
    430e:	2800      	cmp	r0, #0
    4310:	d009      	beq.n	4326 <bt_l2cap_le_lookup_tx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    4312:	0003      	movs	r3, r0
    4314:	3354      	adds	r3, #84	; 0x54
    4316:	881b      	ldrh	r3, [r3, #0]
    4318:	428b      	cmp	r3, r1
    431a:	d004      	beq.n	4326 <bt_l2cap_le_lookup_tx_cid+0x22>
    431c:	6880      	ldr	r0, [r0, #8]
struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    431e:	2800      	cmp	r0, #0
    4320:	d001      	beq.n	4326 <bt_l2cap_le_lookup_tx_cid+0x22>
    4322:	3808      	subs	r0, #8
    4324:	e7f3      	b.n	430e <bt_l2cap_le_lookup_tx_cid+0xa>
			return chan;
		}
	}

	return NULL;
}
    4326:	4770      	bx	lr

00004328 <bt_l2cap_le_lookup_rx_cid>:

struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
    4328:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			return chan;
		}
	}

	return NULL;
    432a:	1e18      	subs	r0, r3, #0
struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    432c:	d00b      	beq.n	4346 <bt_l2cap_le_lookup_rx_cid+0x1e>
    432e:	3b08      	subs	r3, #8
    4330:	0018      	movs	r0, r3
    4332:	2800      	cmp	r0, #0
    4334:	d007      	beq.n	4346 <bt_l2cap_le_lookup_rx_cid+0x1e>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    4336:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    4338:	428b      	cmp	r3, r1
    433a:	d004      	beq.n	4346 <bt_l2cap_le_lookup_rx_cid+0x1e>
    433c:	6880      	ldr	r0, [r0, #8]
struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    433e:	2800      	cmp	r0, #0
    4340:	d001      	beq.n	4346 <bt_l2cap_le_lookup_rx_cid+0x1e>
    4342:	3808      	subs	r0, #8
    4344:	e7f5      	b.n	4332 <bt_l2cap_le_lookup_rx_cid+0xa>
			return chan;
		}
	}

	return NULL;
}
    4346:	4770      	bx	lr

00004348 <bt_l2cap_recv>:

	chan->ops->recv(chan, buf);
}

void bt_l2cap_recv(struct bt_conn *conn, struct net_buf *buf)
{
    4348:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_recv(conn, buf);
		return;
	}

	if (buf->len < sizeof(*hdr)) {
    434a:	898b      	ldrh	r3, [r1, #12]

	chan->ops->recv(chan, buf);
}

void bt_l2cap_recv(struct bt_conn *conn, struct net_buf *buf)
{
    434c:	0006      	movs	r6, r0
    434e:	000c      	movs	r4, r1
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_recv(conn, buf);
		return;
	}

	if (buf->len < sizeof(*hdr)) {
    4350:	2b03      	cmp	r3, #3
    4352:	d80a      	bhi.n	436a <bt_l2cap_recv+0x22>
		BT_ERR("Too small L2CAP PDU received");
    4354:	4b17      	ldr	r3, [pc, #92]	; (43b4 <bt_l2cap_recv+0x6c>)
    4356:	4a18      	ldr	r2, [pc, #96]	; (43b8 <bt_l2cap_recv+0x70>)
    4358:	9301      	str	r3, [sp, #4]
    435a:	4b18      	ldr	r3, [pc, #96]	; (43bc <bt_l2cap_recv+0x74>)
    435c:	4918      	ldr	r1, [pc, #96]	; (43c0 <bt_l2cap_recv+0x78>)
    435e:	9300      	str	r3, [sp, #0]
    4360:	4818      	ldr	r0, [pc, #96]	; (43c4 <bt_l2cap_recv+0x7c>)
    4362:	4b19      	ldr	r3, [pc, #100]	; (43c8 <bt_l2cap_recv+0x80>)
    4364:	f7fd fa96 	bl	1894 <printk>
    4368:	e01f      	b.n	43aa <bt_l2cap_recv+0x62>
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
	net_buf_pull(buf, sizeof(*hdr));
    436a:	0020      	movs	r0, r4
		BT_ERR("Too small L2CAP PDU received");
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
    436c:	688b      	ldr	r3, [r1, #8]
	net_buf_pull(buf, sizeof(*hdr));
    436e:	3008      	adds	r0, #8
		BT_ERR("Too small L2CAP PDU received");
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
    4370:	78dd      	ldrb	r5, [r3, #3]
    4372:	789a      	ldrb	r2, [r3, #2]
    4374:	022d      	lsls	r5, r5, #8
    4376:	4315      	orrs	r5, r2
	net_buf_pull(buf, sizeof(*hdr));
    4378:	2104      	movs	r1, #4
    437a:	f00c f944 	bl	10606 <net_buf_simple_pull>

	BT_DBG("Packet for CID %u len %u", cid, buf->len);

	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    437e:	0029      	movs	r1, r5
    4380:	0030      	movs	r0, r6
    4382:	f7ff ffd1 	bl	4328 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    4386:	2800      	cmp	r0, #0
    4388:	d10b      	bne.n	43a2 <bt_l2cap_recv+0x5a>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    438a:	4b0a      	ldr	r3, [pc, #40]	; (43b4 <bt_l2cap_recv+0x6c>)
    438c:	9501      	str	r5, [sp, #4]
    438e:	9302      	str	r3, [sp, #8]
    4390:	4b0e      	ldr	r3, [pc, #56]	; (43cc <bt_l2cap_recv+0x84>)
    4392:	4a0f      	ldr	r2, [pc, #60]	; (43d0 <bt_l2cap_recv+0x88>)
    4394:	9300      	str	r3, [sp, #0]
    4396:	490a      	ldr	r1, [pc, #40]	; (43c0 <bt_l2cap_recv+0x78>)
    4398:	4b0b      	ldr	r3, [pc, #44]	; (43c8 <bt_l2cap_recv+0x80>)
    439a:	480e      	ldr	r0, [pc, #56]	; (43d4 <bt_l2cap_recv+0x8c>)
    439c:	f7fd fa7a 	bl	1894 <printk>
    43a0:	e003      	b.n	43aa <bt_l2cap_recv+0x62>
	}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

	BT_DBG("chan %p len %u", chan, buf->len);

	chan->ops->recv(chan, buf);
    43a2:	6843      	ldr	r3, [r0, #4]
    43a4:	0021      	movs	r1, r4
    43a6:	691b      	ldr	r3, [r3, #16]
    43a8:	4798      	blx	r3
		net_buf_unref(buf);
		return;
	}

	l2cap_chan_recv(chan, buf);
	net_buf_unref(buf);
    43aa:	0020      	movs	r0, r4
    43ac:	f00c f8e8 	bl	10580 <net_buf_unref>
}
    43b0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    43b2:	46c0      	nop			; (mov r8, r8)
    43b4:	0001241d 	.word	0x0001241d
    43b8:	0001246d 	.word	0x0001246d
    43bc:	000124a8 	.word	0x000124a8
    43c0:	000123e3 	.word	0x000123e3
    43c4:	00012dd6 	.word	0x00012dd6
    43c8:	000144e4 	.word	0x000144e4
    43cc:	00012422 	.word	0x00012422
    43d0:	000123dc 	.word	0x000123dc
    43d4:	00012e03 	.word	0x00012e03

000043d8 <bt_l2cap_update_conn_param>:

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    43d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    43da:	4b1d      	ldr	r3, [pc, #116]	; (4450 <bt_l2cap_update_conn_param+0x78>)
	net_buf_unref(buf);
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    43dc:	000c      	movs	r4, r1

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    43de:	781a      	ldrb	r2, [r3, #0]
	net_buf_unref(buf);
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    43e0:	9001      	str	r0, [sp, #4]

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    43e2:	1c51      	adds	r1, r2, #1
    43e4:	b2c9      	uxtb	r1, r1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    43e6:	2900      	cmp	r1, #0
    43e8:	d001      	beq.n	43ee <bt_l2cap_update_conn_param+0x16>

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    43ea:	7019      	strb	r1, [r3, #0]
    43ec:	e001      	b.n	43f2 <bt_l2cap_update_conn_param+0x1a>
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
		ident++;
    43ee:	3202      	adds	r2, #2
    43f0:	701a      	strb	r2, [r3, #0]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    43f2:	2104      	movs	r1, #4
    43f4:	2000      	movs	r0, #0
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
		ident++;
	}

	return ident;
    43f6:	781d      	ldrb	r5, [r3, #0]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    43f8:	f7ff fd1e 	bl	3e38 <bt_conn_create_pdu>
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    43fc:	0007      	movs	r7, r0
    43fe:	3708      	adds	r7, #8
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4400:	0006      	movs	r6, r0
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    4402:	2104      	movs	r1, #4
    4404:	0038      	movs	r0, r7
    4406:	f00c f8dd 	bl	105c4 <net_buf_simple_add>
	hdr->code = code;
    440a:	2312      	movs	r3, #18
	hdr->ident = ident;
    440c:	7045      	strb	r5, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    440e:	2108      	movs	r1, #8
    4410:	2500      	movs	r5, #0
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = code;
    4412:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);
    4414:	70c5      	strb	r5, [r0, #3]
    4416:	7081      	strb	r1, [r0, #2]
	struct net_buf *buf;

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
				      get_ident(), sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    4418:	0038      	movs	r0, r7
    441a:	f00c f8d3 	bl	105c4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    441e:	7823      	ldrb	r3, [r4, #0]
    4420:	0032      	movs	r2, r6
    4422:	7003      	strb	r3, [r0, #0]
    4424:	7863      	ldrb	r3, [r4, #1]
    4426:	2105      	movs	r1, #5
    4428:	7043      	strb	r3, [r0, #1]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    442a:	78a3      	ldrb	r3, [r4, #2]
    442c:	7083      	strb	r3, [r0, #2]
    442e:	78e3      	ldrb	r3, [r4, #3]
    4430:	70c3      	strb	r3, [r0, #3]
	req->latency = sys_cpu_to_le16(param->latency);
    4432:	7923      	ldrb	r3, [r4, #4]
    4434:	7103      	strb	r3, [r0, #4]
    4436:	7963      	ldrb	r3, [r4, #5]
    4438:	7143      	strb	r3, [r0, #5]
	req->timeout = sys_cpu_to_le16(param->timeout);
    443a:	79a3      	ldrb	r3, [r4, #6]
    443c:	7183      	strb	r3, [r0, #6]
    443e:	79e3      	ldrb	r3, [r4, #7]
    4440:	71c3      	strb	r3, [r0, #7]
    4442:	002b      	movs	r3, r5
    4444:	9801      	ldr	r0, [sp, #4]
    4446:	f7ff feb5 	bl	41b4 <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);

	return 0;
}
    444a:	0028      	movs	r0, r5
    444c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    444e:	46c0      	nop			; (mov r8, r8)
    4450:	20000a70 	.word	0x20000a70

00004454 <bt_l2cap_init>:

	return -ENOMEM;
}

void bt_l2cap_init(void)
{
    4454:	b510      	push	{r4, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    4456:	4802      	ldr	r0, [pc, #8]	; (4460 <bt_l2cap_init+0xc>)
    4458:	f7ff fde8 	bl	402c <bt_l2cap_le_fixed_chan_register>

	if (IS_ENABLED(CONFIG_BLUETOOTH_BREDR)) {
		bt_l2cap_br_init();
	}
}
    445c:	bd10      	pop	{r4, pc}
    445e:	46c0      	nop			; (mov r8, r8)
    4460:	20000278 	.word	0x20000278

00004464 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4464:	2300      	movs	r3, #0
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    4466:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    4468:	4908      	ldr	r1, [pc, #32]	; (448c <att_op_get_type+0x28>)
    446a:	00da      	lsls	r2, r3, #3
    446c:	5c54      	ldrb	r4, [r2, r1]
    446e:	4284      	cmp	r4, r0
    4470:	d102      	bne.n	4478 <att_op_get_type+0x14>
			return handlers[i].type;
    4472:	188a      	adds	r2, r1, r2
    4474:	7893      	ldrb	r3, [r2, #2]
    4476:	e006      	b.n	4486 <att_op_get_type+0x22>
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4478:	3301      	adds	r3, #1
    447a:	2b1b      	cmp	r3, #27
    447c:	d1f5      	bne.n	446a <att_op_get_type+0x6>
			return handlers[i].type;
		}
	}

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
    447e:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
			return handlers[i].type;
		}
	}

	if (op & ATT_CMD_MASK) {
    4480:	0642      	lsls	r2, r0, #25
    4482:	d400      	bmi.n	4486 <att_op_get_type+0x22>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    4484:	3306      	adds	r3, #6
}
    4486:	0018      	movs	r0, r3
    4488:	bd10      	pop	{r4, pc}
    448a:	46c0      	nop			; (mov r8, r8)
    448c:	00014560 	.word	0x00014560

00004490 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BLUETOOTH_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4490:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    4492:	4d12      	ldr	r5, [pc, #72]	; (44dc <bt_att_accept+0x4c>)
	att->req->buf = NULL;
}
#endif /* CONFIG_BLUETOOTH_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4494:	000e      	movs	r6, r1
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    4496:	682c      	ldr	r4, [r5, #0]
    4498:	2c00      	cmp	r4, #0
    449a:	d10f      	bne.n	44bc <bt_att_accept+0x2c>
			continue;
		}

		att->chan.chan.ops = &ops;
		atomic_set(att->flags, 0);
    449c:	0028      	movs	r0, r5

		if (att->chan.chan.conn) {
			continue;
		}

		att->chan.chan.ops = &ops;
    449e:	4b10      	ldr	r3, [pc, #64]	; (44e0 <bt_att_accept+0x50>)
		atomic_set(att->flags, 0);
    44a0:	0021      	movs	r1, r4

		if (att->chan.chan.conn) {
			continue;
		}

		att->chan.chan.ops = &ops;
    44a2:	606b      	str	r3, [r5, #4]
		atomic_set(att->flags, 0);
    44a4:	3090      	adds	r0, #144	; 0x90
    44a6:	f00c fb54 	bl	10b52 <atomic_set>
		k_sem_init(&att->tx_sem, CONFIG_BLUETOOTH_ATT_TX_MAX,
    44aa:	2202      	movs	r2, #2
    44ac:	0028      	movs	r0, r5
    44ae:	0011      	movs	r1, r2
    44b0:	30c8      	adds	r0, #200	; 0xc8
    44b2:	f00d fa0b 	bl	118cc <k_sem_init>
			   CONFIG_BLUETOOTH_ATT_TX_MAX);

		*chan = &att->chan.chan;
    44b6:	6035      	str	r5, [r6, #0]

		return 0;
    44b8:	0020      	movs	r0, r4
    44ba:	e00c      	b.n	44d6 <bt_att_accept+0x46>
	}

	BT_ERR("No available ATT context for conn %p", conn);
    44bc:	4b09      	ldr	r3, [pc, #36]	; (44e4 <bt_att_accept+0x54>)
    44be:	9001      	str	r0, [sp, #4]
    44c0:	9302      	str	r3, [sp, #8]
    44c2:	4b09      	ldr	r3, [pc, #36]	; (44e8 <bt_att_accept+0x58>)
    44c4:	4a09      	ldr	r2, [pc, #36]	; (44ec <bt_att_accept+0x5c>)
    44c6:	9300      	str	r3, [sp, #0]
    44c8:	4909      	ldr	r1, [pc, #36]	; (44f0 <bt_att_accept+0x60>)
    44ca:	4b0a      	ldr	r3, [pc, #40]	; (44f4 <bt_att_accept+0x64>)
    44cc:	480a      	ldr	r0, [pc, #40]	; (44f8 <bt_att_accept+0x68>)
    44ce:	f7fd f9e1 	bl	1894 <printk>

	return -ENOMEM;
    44d2:	200c      	movs	r0, #12
    44d4:	4240      	negs	r0, r0
}
    44d6:	b004      	add	sp, #16
    44d8:	bd70      	pop	{r4, r5, r6, pc}
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	20000b04 	.word	0x20000b04
    44e0:	200002a4 	.word	0x200002a4
    44e4:	0001241d 	.word	0x0001241d
    44e8:	000124a8 	.word	0x000124a8
    44ec:	0001246d 	.word	0x0001246d
    44f0:	000123e3 	.word	0x000123e3
    44f4:	00014550 	.word	0x00014550
    44f8:	00012e38 	.word	0x00012e38

000044fc <att_req_destroy>:
};

static struct bt_att bt_req_pool[CONFIG_BLUETOOTH_MAX_CONN];

static void att_req_destroy(struct bt_att_req *req)
{
    44fc:	b510      	push	{r4, lr}
    44fe:	0004      	movs	r4, r0
	BT_DBG("req %p", req);

	if (req->buf) {
    4500:	6900      	ldr	r0, [r0, #16]
    4502:	2800      	cmp	r0, #0
    4504:	d001      	beq.n	450a <att_req_destroy+0xe>
		net_buf_unref(req->buf);
    4506:	f00c f83b 	bl	10580 <net_buf_unref>
	}

	if (req->destroy) {
    450a:	68a3      	ldr	r3, [r4, #8]
    450c:	2b00      	cmp	r3, #0
    450e:	d001      	beq.n	4514 <att_req_destroy+0x18>
		req->destroy(req);
    4510:	0020      	movs	r0, r4
    4512:	4798      	blx	r3
	}

	memset(req, 0, sizeof(*req));
    4514:	2214      	movs	r2, #20
    4516:	2100      	movs	r1, #0
    4518:	0020      	movs	r0, r4
    451a:	f7fc fbc2 	bl	ca2 <memset>
}
    451e:	bd10      	pop	{r4, pc}

00004520 <att_notify>:

	return att_handle_rsp(att, buf->data, buf->len, 0);
}

static u8_t att_notify(struct bt_att *att, struct net_buf *buf)
{
    4520:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    4522:	3108      	adds	r1, #8
    4524:	0008      	movs	r0, r1
    4526:	f00c f87e 	bl	10626 <net_buf_simple_pull_le16>
	BT_DBG("handle 0x%04x", handle);

	bt_gatt_notification(conn, handle, buf->data, buf->len);

	return 0;
}
    452a:	2000      	movs	r0, #0
    452c:	bd10      	pop	{r4, pc}

0000452e <find_info_cb>:
	struct bt_att *att = data->att;

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
    452e:	688b      	ldr	r3, [r1, #8]
		struct bt_att_info_128 *info128;
	};
};

static u8_t find_info_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4530:	b570      	push	{r4, r5, r6, lr}
    4532:	0005      	movs	r5, r0
    4534:	000c      	movs	r4, r1
	struct find_info_data *data = user_data;
	struct bt_att *att = data->att;
    4536:	680e      	ldr	r6, [r1, #0]

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
    4538:	2b00      	cmp	r3, #0
    453a:	d10c      	bne.n	4556 <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    453c:	6848      	ldr	r0, [r1, #4]
    453e:	2101      	movs	r1, #1
    4540:	3008      	adds	r0, #8
    4542:	f00c f83f 	bl	105c4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    4546:	682b      	ldr	r3, [r5, #0]

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4548:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    454a:	781a      	ldrb	r2, [r3, #0]
    454c:	4253      	negs	r3, r2
    454e:	4153      	adcs	r3, r2
    4550:	2202      	movs	r2, #2
    4552:	1ad3      	subs	r3, r2, r3
    4554:	7003      	strb	r3, [r0, #0]
				    BT_ATT_INFO_16 : BT_ATT_INFO_128;
	}

	switch (data->rsp->format) {
    4556:	68a3      	ldr	r3, [r4, #8]
    4558:	781b      	ldrb	r3, [r3, #0]
    455a:	2b01      	cmp	r3, #1
    455c:	d002      	beq.n	4564 <find_info_cb+0x36>
    455e:	2b02      	cmp	r3, #2
    4560:	d01b      	beq.n	459a <find_info_cb+0x6c>
    4562:	e03a      	b.n	45da <find_info_cb+0xac>
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    4564:	2000      	movs	r0, #0
				    BT_ATT_INFO_16 : BT_ATT_INFO_128;
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    4566:	682b      	ldr	r3, [r5, #0]
    4568:	781b      	ldrb	r3, [r3, #0]
    456a:	4283      	cmp	r3, r0
    456c:	d136      	bne.n	45dc <find_info_cb+0xae>
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    456e:	6860      	ldr	r0, [r4, #4]
    4570:	2104      	movs	r1, #4
    4572:	3008      	adds	r0, #8
    4574:	f00c f826 	bl	105c4 <net_buf_simple_add>
    4578:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    457a:	7c2b      	ldrb	r3, [r5, #16]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);

		if (att->chan.tx.mtu - data->buf->len >
    457c:	3656      	adds	r6, #86	; 0x56
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    457e:	7003      	strb	r3, [r0, #0]
    4580:	7c6b      	ldrb	r3, [r5, #17]
    4582:	7043      	strb	r3, [r0, #1]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    4584:	682b      	ldr	r3, [r5, #0]
    4586:	789a      	ldrb	r2, [r3, #2]
    4588:	7082      	strb	r2, [r0, #2]
    458a:	78db      	ldrb	r3, [r3, #3]

		if (att->chan.tx.mtu - data->buf->len >
    458c:	6862      	ldr	r2, [r4, #4]
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
		data->info16->handle = sys_cpu_to_le16(attr->handle);
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    458e:	70c3      	strb	r3, [r0, #3]
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    4590:	8833      	ldrh	r3, [r6, #0]
    4592:	8990      	ldrh	r0, [r2, #12]
    4594:	1a18      	subs	r0, r3, r0
    4596:	2304      	movs	r3, #4
    4598:	e01b      	b.n	45d2 <find_info_cb+0xa4>
			return BT_GATT_ITER_CONTINUE;
		}

		break;
	case BT_ATT_INFO_128:
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    459a:	682b      	ldr	r3, [r5, #0]
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    459c:	2000      	movs	r0, #0
			return BT_GATT_ITER_CONTINUE;
		}

		break;
	case BT_ATT_INFO_128:
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    459e:	781b      	ldrb	r3, [r3, #0]
    45a0:	2b02      	cmp	r3, #2
    45a2:	d11b      	bne.n	45dc <find_info_cb+0xae>
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    45a4:	6860      	ldr	r0, [r4, #4]
    45a6:	2112      	movs	r1, #18
    45a8:	3008      	adds	r0, #8
    45aa:	f00c f80b 	bl	105c4 <net_buf_simple_add>
    45ae:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    45b0:	7c2b      	ldrb	r3, [r5, #16]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    45b2:	6829      	ldr	r1, [r5, #0]
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    45b4:	7003      	strb	r3, [r0, #0]
    45b6:	7c6b      	ldrb	r3, [r5, #17]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    45b8:	2210      	movs	r2, #16
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    45ba:	7043      	strb	r3, [r0, #1]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    45bc:	68e3      	ldr	r3, [r4, #12]
    45be:	3101      	adds	r1, #1
    45c0:	1c98      	adds	r0, r3, #2
    45c2:	f7fc fb44 	bl	c4e <memcpy>
		       sizeof(data->info128->uuid));

		if (att->chan.tx.mtu - data->buf->len >
    45c6:	6862      	ldr	r2, [r4, #4]
    45c8:	3656      	adds	r6, #86	; 0x56
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    45ca:	8833      	ldrh	r3, [r6, #0]
    45cc:	8990      	ldrh	r0, [r2, #12]
    45ce:	1a18      	subs	r0, r3, r0
    45d0:	2312      	movs	r3, #18
    45d2:	4283      	cmp	r3, r0
    45d4:	4180      	sbcs	r0, r0
    45d6:	4240      	negs	r0, r0
    45d8:	e000      	b.n	45dc <find_info_cb+0xae>
		    sizeof(*data->info128)) {
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_STOP;
    45da:	2000      	movs	r0, #0
}
    45dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000045e0 <read_group_cb>:
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    45e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
    45e2:	680e      	ldr	r6, [r1, #0]
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    45e4:	b087      	sub	sp, #28
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    45e6:	6833      	ldr	r3, [r6, #0]
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    45e8:	2700      	movs	r7, #0

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    45ea:	9303      	str	r3, [sp, #12]
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    45ec:	23a0      	movs	r3, #160	; 0xa0
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    45ee:	0005      	movs	r5, r0
    45f0:	000c      	movs	r4, r1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    45f2:	019b      	lsls	r3, r3, #6
    45f4:	a904      	add	r1, sp, #16
    45f6:	6800      	ldr	r0, [r0, #0]
    45f8:	700f      	strb	r7, [r1, #0]
    45fa:	804b      	strh	r3, [r1, #2]
    45fc:	f7fd f9fc 	bl	19f8 <bt_uuid_cmp>
    4600:	42b8      	cmp	r0, r7
    4602:	d018      	beq.n	4636 <read_group_cb+0x56>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4604:	4b30      	ldr	r3, [pc, #192]	; (46c8 <read_group_cb+0xe8>)
    4606:	a905      	add	r1, sp, #20
    4608:	6828      	ldr	r0, [r5, #0]
    460a:	700f      	strb	r7, [r1, #0]
    460c:	804b      	strh	r3, [r1, #2]
    460e:	f7fd f9f3 	bl	19f8 <bt_uuid_cmp>
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4612:	42b8      	cmp	r0, r7
    4614:	d00f      	beq.n	4636 <read_group_cb+0x56>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    4616:	6923      	ldr	r3, [r4, #16]
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    4618:	2001      	movs	r0, #1
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    461a:	42bb      	cmp	r3, r7
    461c:	d051      	beq.n	46c2 <read_group_cb+0xe2>
    461e:	78d9      	ldrb	r1, [r3, #3]
    4620:	7898      	ldrb	r0, [r3, #2]
    4622:	8a2a      	ldrh	r2, [r5, #16]
    4624:	0209      	lsls	r1, r1, #8
    4626:	4301      	orrs	r1, r0
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    4628:	2001      	movs	r0, #1
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    462a:	428a      	cmp	r2, r1
    462c:	d949      	bls.n	46c2 <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    462e:	709a      	strb	r2, [r3, #2]
    4630:	0a12      	lsrs	r2, r2, #8
    4632:	70da      	strb	r2, [r3, #3]
    4634:	e045      	b.n	46c2 <read_group_cb+0xe2>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* If Group Type don't match skip */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4636:	6861      	ldr	r1, [r4, #4]
    4638:	6828      	ldr	r0, [r5, #0]
    463a:	f7fd f9dd 	bl	19f8 <bt_uuid_cmp>
    463e:	2800      	cmp	r0, #0
    4640:	d002      	beq.n	4648 <read_group_cb+0x68>
		data->group = NULL;
    4642:	2300      	movs	r3, #0
    4644:	6123      	str	r3, [r4, #16]
    4646:	e03b      	b.n	46c0 <read_group_cb+0xe0>
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* Stop if there is no space left */
	if (data->rsp->len &&
    4648:	68e3      	ldr	r3, [r4, #12]
    464a:	3656      	adds	r6, #86	; 0x56
    464c:	781a      	ldrb	r2, [r3, #0]
    464e:	68a0      	ldr	r0, [r4, #8]
    4650:	2a00      	cmp	r2, #0
    4652:	d006      	beq.n	4662 <read_group_cb+0x82>
    4654:	8833      	ldrh	r3, [r6, #0]
    4656:	8981      	ldrh	r1, [r0, #12]
    4658:	1a5b      	subs	r3, r3, r1
    465a:	4293      	cmp	r3, r2
    465c:	da01      	bge.n	4662 <read_group_cb+0x82>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
		return BT_GATT_ITER_STOP;
    465e:	2000      	movs	r0, #0
    4660:	e02f      	b.n	46c2 <read_group_cb+0xe2>
	}

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4662:	2104      	movs	r1, #4
    4664:	3008      	adds	r0, #8
    4666:	f00b ffad 	bl	105c4 <net_buf_simple_add>

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    466a:	2700      	movs	r7, #0
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
		return BT_GATT_ITER_STOP;
	}

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    466c:	6120      	str	r0, [r4, #16]

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    466e:	8a2b      	ldrh	r3, [r5, #16]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4670:	68a1      	ldr	r1, [r4, #8]

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4672:	b2da      	uxtb	r2, r3
    4674:	0a1b      	lsrs	r3, r3, #8
    4676:	7002      	strb	r2, [r0, #0]
    4678:	7043      	strb	r3, [r0, #1]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    467a:	7082      	strb	r2, [r0, #2]
    467c:	70c3      	strb	r3, [r0, #3]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    467e:	898a      	ldrh	r2, [r1, #12]
    4680:	8833      	ldrh	r3, [r6, #0]
    4682:	6889      	ldr	r1, [r1, #8]
    4684:	1a9b      	subs	r3, r3, r2
    4686:	b29b      	uxth	r3, r3
    4688:	188a      	adds	r2, r1, r2
    468a:	9700      	str	r7, [sp, #0]
    468c:	0029      	movs	r1, r5
    468e:	686e      	ldr	r6, [r5, #4]
    4690:	9803      	ldr	r0, [sp, #12]
    4692:	47b0      	blx	r6
    4694:	0001      	movs	r1, r0
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
    4696:	42b8      	cmp	r0, r7
    4698:	dbe1      	blt.n	465e <read_group_cb+0x7e>
		/* TODO: Handle read errors */
		return BT_GATT_ITER_STOP;
	}

	if (!data->rsp->len) {
    469a:	68e0      	ldr	r0, [r4, #12]
    469c:	1d0b      	adds	r3, r1, #4
    469e:	7802      	ldrb	r2, [r0, #0]
    46a0:	42ba      	cmp	r2, r7
    46a2:	d101      	bne.n	46a8 <read_group_cb+0xc8>
		/* Set len to be the first group found */
		data->rsp->len = read + sizeof(*data->group);
    46a4:	7003      	strb	r3, [r0, #0]
    46a6:	e006      	b.n	46b6 <read_group_cb+0xd6>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    46a8:	429a      	cmp	r2, r3
    46aa:	d004      	beq.n	46b6 <read_group_cb+0xd6>
		/* All groups entries should have the same size */
		data->buf->len -= sizeof(*data->group);
    46ac:	68a2      	ldr	r2, [r4, #8]
    46ae:	8993      	ldrh	r3, [r2, #12]
    46b0:	3b04      	subs	r3, #4
    46b2:	8193      	strh	r3, [r2, #12]
    46b4:	e7d3      	b.n	465e <read_group_cb+0x7e>
		return false;
	}

	net_buf_add(data->buf, read);
    46b6:	68a3      	ldr	r3, [r4, #8]
    46b8:	3308      	adds	r3, #8
    46ba:	0018      	movs	r0, r3
    46bc:	f00b ff82 	bl	105c4 <net_buf_simple_add>

	/* Continue to find the end handle */
	return BT_GATT_ITER_CONTINUE;
    46c0:	2001      	movs	r0, #1
}
    46c2:	b007      	add	sp, #28
    46c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	00002801 	.word	0x00002801

000046cc <find_type_cb>:
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    46cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    46ce:	2700      	movs	r7, #0
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
    46d0:	680e      	ldr	r6, [r1, #0]
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    46d2:	b08b      	sub	sp, #44	; 0x2c
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    46d4:	6833      	ldr	r3, [r6, #0]
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    46d6:	0005      	movs	r5, r0
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    46d8:	9303      	str	r3, [sp, #12]
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    46da:	4b29      	ldr	r3, [pc, #164]	; (4780 <find_type_cb+0xb4>)
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    46dc:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    46de:	6800      	ldr	r0, [r0, #0]
    46e0:	a904      	add	r1, sp, #16
    46e2:	700f      	strb	r7, [r1, #0]
    46e4:	804b      	strh	r3, [r1, #2]
    46e6:	f7fd f987 	bl	19f8 <bt_uuid_cmp>
    46ea:	42b8      	cmp	r0, r7
    46ec:	d102      	bne.n	46f4 <find_type_cb+0x28>
		data->group = NULL;
    46ee:	2300      	movs	r3, #0
    46f0:	60a3      	str	r3, [r4, #8]
    46f2:	e041      	b.n	4778 <find_type_cb+0xac>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    46f4:	23a0      	movs	r3, #160	; 0xa0
    46f6:	a905      	add	r1, sp, #20
    46f8:	019b      	lsls	r3, r3, #6
    46fa:	6828      	ldr	r0, [r5, #0]
    46fc:	700f      	strb	r7, [r1, #0]
    46fe:	804b      	strh	r3, [r1, #2]
    4700:	f7fd f97a 	bl	19f8 <bt_uuid_cmp>
    4704:	2800      	cmp	r0, #0
    4706:	d00e      	beq.n	4726 <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    4708:	68a3      	ldr	r3, [r4, #8]
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    470a:	2601      	movs	r6, #1
		return BT_GATT_ITER_CONTINUE;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    470c:	2b00      	cmp	r3, #0
    470e:	d034      	beq.n	477a <find_type_cb+0xae>
    4710:	78d9      	ldrb	r1, [r3, #3]
    4712:	7898      	ldrb	r0, [r3, #2]
    4714:	8a2a      	ldrh	r2, [r5, #16]
    4716:	0209      	lsls	r1, r1, #8
    4718:	4301      	orrs	r1, r0
    471a:	428a      	cmp	r2, r1
    471c:	d92d      	bls.n	477a <find_type_cb+0xae>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    471e:	709a      	strb	r2, [r3, #2]
    4720:	0a12      	lsrs	r2, r2, #8
    4722:	70da      	strb	r2, [r3, #3]
    4724:	e029      	b.n	477a <find_type_cb+0xae>
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* stop if there is no space left */
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    4726:	0033      	movs	r3, r6
    4728:	6862      	ldr	r2, [r4, #4]
    472a:	3356      	adds	r3, #86	; 0x56
    472c:	881b      	ldrh	r3, [r3, #0]
    472e:	8992      	ldrh	r2, [r2, #12]
		return BT_GATT_ITER_STOP;
    4730:	0006      	movs	r6, r0
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* stop if there is no space left */
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    4732:	1a9b      	subs	r3, r3, r2
    4734:	2b03      	cmp	r3, #3
    4736:	d920      	bls.n	477a <find_type_cb+0xae>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    4738:	9000      	str	r0, [sp, #0]
    473a:	aa06      	add	r2, sp, #24
    473c:	2310      	movs	r3, #16
    473e:	0029      	movs	r1, r5
    4740:	9803      	ldr	r0, [sp, #12]
    4742:	686f      	ldr	r7, [r5, #4]
    4744:	47b8      	blx	r7
    4746:	1e02      	subs	r2, r0, #0
	if (read < 0) {
    4748:	dbd1      	blt.n	46ee <find_type_cb+0x22>
		data->group = NULL;
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check if data matches */
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    474a:	7c23      	ldrb	r3, [r4, #16]
    474c:	4298      	cmp	r0, r3
    474e:	d1ce      	bne.n	46ee <find_type_cb+0x22>
    4750:	a906      	add	r1, sp, #24
    4752:	68e0      	ldr	r0, [r4, #12]
    4754:	f7fc fa66 	bl	c24 <memcmp>
    4758:	2800      	cmp	r0, #0
    475a:	d1c8      	bne.n	46ee <find_type_cb+0x22>

	/* If service has been found, error should be cleared */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    475c:	6860      	ldr	r0, [r4, #4]
		data->group = NULL;
		return BT_GATT_ITER_CONTINUE;
	}

	/* If service has been found, error should be cleared */
	data->err = 0x00;
    475e:	7466      	strb	r6, [r4, #17]

	/* Fast foward to next item position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4760:	3008      	adds	r0, #8
    4762:	2104      	movs	r1, #4
    4764:	f00b ff2e 	bl	105c4 <net_buf_simple_add>
    4768:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    476a:	8a2b      	ldrh	r3, [r5, #16]
    476c:	b2da      	uxtb	r2, r3
    476e:	0a1b      	lsrs	r3, r3, #8
    4770:	7002      	strb	r2, [r0, #0]
    4772:	7043      	strb	r3, [r0, #1]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4774:	7082      	strb	r2, [r0, #2]
    4776:	70c3      	strb	r3, [r0, #3]

	/* continue to find the end_handle */
	return BT_GATT_ITER_CONTINUE;
    4778:	2601      	movs	r6, #1
}
    477a:	0030      	movs	r0, r6
    477c:	b00b      	add	sp, #44	; 0x2c
    477e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4780:	00002801 	.word	0x00002801

00004784 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    4784:	b510      	push	{r4, lr}
    4786:	0004      	movs	r4, r0
	struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p cid 0x%04x", ch, ch->tx.cid);

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
    4788:	30dc      	adds	r0, #220	; 0xdc
    478a:	f00c fded 	bl	11368 <k_queue_init>
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    478e:	0022      	movs	r2, r4
    4790:	2317      	movs	r3, #23
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;

	k_delayed_work_init(&att->timeout_work, att_timeout);
    4792:	0020      	movs	r0, r4

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4794:	3256      	adds	r2, #86	; 0x56
    4796:	8013      	strh	r3, [r2, #0]
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;

	k_delayed_work_init(&att->timeout_work, att_timeout);
    4798:	4906      	ldr	r1, [pc, #24]	; (47b4 <bt_att_connected+0x30>)
#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    479a:	8763      	strh	r3, [r4, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
    479c:	30a0      	adds	r0, #160	; 0xa0
    479e:	f00d fb69 	bl	11e74 <k_delayed_work_init>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    47a2:	0023      	movs	r3, r4
    47a4:	2200      	movs	r2, #0
    47a6:	3398      	adds	r3, #152	; 0x98
    47a8:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
    47aa:	605a      	str	r2, [r3, #4]
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    47ac:	6820      	ldr	r0, [r4, #0]
    47ae:	f001 fcc9 	bl	6144 <bt_gatt_connected>
}
    47b2:	bd10      	pop	{r4, pc}
    47b4:	00004d0d 	.word	0x00004d0d

000047b8 <check_perm.isra.3>:
	}

	return false;
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
    47b8:	b510      	push	{r4, lr}
    47ba:	0002      	movs	r2, r0
    47bc:	7c83      	ldrb	r3, [r0, #18]
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    47be:	07c8      	lsls	r0, r1, #31
    47c0:	d506      	bpl.n	47d0 <check_perm.isra.3+0x18>
    47c2:	2415      	movs	r4, #21
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    47c4:	2002      	movs	r0, #2
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    47c6:	4223      	tst	r3, r4
    47c8:	d014      	beq.n	47f4 <check_perm.isra.3+0x3c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    47ca:	6854      	ldr	r4, [r2, #4]
    47cc:	2c00      	cmp	r4, #0
    47ce:	d011      	beq.n	47f4 <check_perm.isra.3+0x3c>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    47d0:	0788      	lsls	r0, r1, #30
    47d2:	d506      	bpl.n	47e2 <check_perm.isra.3+0x2a>
    47d4:	242a      	movs	r4, #42	; 0x2a
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    47d6:	2003      	movs	r0, #3
	if ((mask & BT_GATT_PERM_READ) &&
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
		return BT_ATT_ERR_READ_NOT_PERMITTED;
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    47d8:	4223      	tst	r3, r4
    47da:	d00b      	beq.n	47f4 <check_perm.isra.3+0x3c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    47dc:	6892      	ldr	r2, [r2, #8]
    47de:	2a00      	cmp	r2, #0
    47e0:	d008      	beq.n	47f4 <check_perm.isra.3+0x3c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
	}

	mask &= attr->perm;
    47e2:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    47e4:	2330      	movs	r3, #48	; 0x30
#if defined(CONFIG_BLUETOOTH_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
			return BT_ATT_ERR_AUTHENTICATION;
		}
#else
		return BT_ATT_ERR_AUTHENTICATION;
    47e6:	2005      	movs	r0, #5
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
	}

	mask &= attr->perm;
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    47e8:	4219      	tst	r1, r3
    47ea:	d103      	bne.n	47f4 <check_perm.isra.3+0x3c>
    47ec:	3007      	adds	r0, #7
    47ee:	4008      	ands	r0, r1
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    47f0:	d000      	beq.n	47f4 <check_perm.isra.3+0x3c>
#if defined(CONFIG_BLUETOOTH_SMP)
		if (!conn->encrypt) {
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
		}
#else
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    47f2:	200f      	movs	r0, #15
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	return 0;
}
    47f4:	bd10      	pop	{r4, pc}

000047f6 <read_type_cb>:
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    47f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
    47f8:	680b      	ldr	r3, [r1, #0]
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    47fa:	b085      	sub	sp, #20
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
    47fc:	9302      	str	r3, [sp, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    47fe:	681b      	ldr	r3, [r3, #0]
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4800:	0006      	movs	r6, r0
    4802:	000c      	movs	r4, r1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4804:	6800      	ldr	r0, [r0, #0]
    4806:	6849      	ldr	r1, [r1, #4]

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    4808:	9303      	str	r3, [sp, #12]
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    480a:	f7fd f8f5 	bl	19f8 <bt_uuid_cmp>
		return BT_GATT_ITER_CONTINUE;
    480e:	2501      	movs	r5, #1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4810:	1e07      	subs	r7, r0, #0
    4812:	d150      	bne.n	48b6 <read_type_cb+0xc0>
	 *
	 * If the first attribute in the set of requested attributes would
	 * cause an Error Response then no other attributes in the requested
	 * attributes can be considered.
	 */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    4814:	2115      	movs	r1, #21
    4816:	0030      	movs	r0, r6
    4818:	f7ff ffce 	bl	47b8 <check_perm.isra.3>
    481c:	1e05      	subs	r5, r0, #0
    481e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    4820:	d006      	beq.n	4830 <read_type_cb+0x3a>
		if (data->rsp->len) {
    4822:	68e3      	ldr	r3, [r4, #12]
    4824:	781d      	ldrb	r5, [r3, #0]
    4826:	2d00      	cmp	r5, #0
    4828:	d045      	beq.n	48b6 <read_type_cb+0xc0>
			data->err = 0x00;
    482a:	7527      	strb	r7, [r4, #20]
		}
		return BT_GATT_ITER_STOP;
    482c:	003d      	movs	r5, r7
    482e:	e042      	b.n	48b6 <read_type_cb+0xc0>

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: attr not found error to no error.
	 */
	data->err = 0x00;
    4830:	7520      	strb	r0, [r4, #20]

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    4832:	68a0      	ldr	r0, [r4, #8]
    4834:	2102      	movs	r1, #2
    4836:	3008      	adds	r0, #8
    4838:	f00b fec4 	bl	105c4 <net_buf_simple_add>
    483c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    483e:	7c33      	ldrb	r3, [r6, #16]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
    4840:	9f02      	ldr	r7, [sp, #8]
	 */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);
    4842:	7003      	strb	r3, [r0, #0]
    4844:	7c73      	ldrb	r3, [r6, #17]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4846:	68a1      	ldr	r1, [r4, #8]
	 */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);
    4848:	7043      	strb	r3, [r0, #1]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
    484a:	3756      	adds	r7, #86	; 0x56
	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    484c:	898a      	ldrh	r2, [r1, #12]
    484e:	883b      	ldrh	r3, [r7, #0]
    4850:	6889      	ldr	r1, [r1, #8]
    4852:	9500      	str	r5, [sp, #0]
    4854:	1a9b      	subs	r3, r3, r2
    4856:	188a      	adds	r2, r1, r2
    4858:	6871      	ldr	r1, [r6, #4]
    485a:	b29b      	uxth	r3, r3
    485c:	468c      	mov	ip, r1
    485e:	9803      	ldr	r0, [sp, #12]
    4860:	0031      	movs	r1, r6
    4862:	4666      	mov	r6, ip
    4864:	47b0      	blx	r6
    4866:	1e01      	subs	r1, r0, #0
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
    4868:	da08      	bge.n	487c <read_type_cb+0x86>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    486a:	000b      	movs	r3, r1
    486c:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    486e:	200e      	movs	r0, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    4870:	2bfe      	cmp	r3, #254	; 0xfe
    4872:	d801      	bhi.n	4878 <read_type_cb+0x82>
		return -err;
    4874:	4249      	negs	r1, r1
    4876:	b2c8      	uxtb	r0, r1

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
		data->err = err_to_att(read);
    4878:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    487a:	e01c      	b.n	48b6 <read_type_cb+0xc0>
	}

	if (!data->rsp->len) {
    487c:	68e0      	ldr	r0, [r4, #12]
    487e:	1c8b      	adds	r3, r1, #2
    4880:	7802      	ldrb	r2, [r0, #0]
    4882:	2a00      	cmp	r2, #0
    4884:	d101      	bne.n	488a <read_type_cb+0x94>
		/* Set len to be the first item found */
		data->rsp->len = read + sizeof(*data->item);
    4886:	7003      	strb	r3, [r0, #0]
    4888:	e006      	b.n	4898 <read_type_cb+0xa2>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    488a:	429a      	cmp	r2, r3
    488c:	d004      	beq.n	4898 <read_type_cb+0xa2>
		/* All items should have the same size */
		data->buf->len -= sizeof(*data->item);
    488e:	68a2      	ldr	r2, [r4, #8]
    4890:	8993      	ldrh	r3, [r2, #12]
    4892:	3b02      	subs	r3, #2
    4894:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    4896:	e00e      	b.n	48b6 <read_type_cb+0xc0>
	}

	net_buf_add(data->buf, read);
    4898:	68a0      	ldr	r0, [r4, #8]

	/* return true only if there are still space for more items */
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    489a:	2501      	movs	r5, #1
		/* All items should have the same size */
		data->buf->len -= sizeof(*data->item);
		return BT_GATT_ITER_STOP;
	}

	net_buf_add(data->buf, read);
    489c:	3008      	adds	r0, #8
    489e:	f00b fe91 	bl	105c4 <net_buf_simple_add>

	/* return true only if there are still space for more items */
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    48a2:	68a2      	ldr	r2, [r4, #8]
    48a4:	883b      	ldrh	r3, [r7, #0]
    48a6:	8992      	ldrh	r2, [r2, #12]
    48a8:	1a9b      	subs	r3, r3, r2
    48aa:	68e2      	ldr	r2, [r4, #12]
    48ac:	7812      	ldrb	r2, [r2, #0]
    48ae:	4293      	cmp	r3, r2
    48b0:	dc00      	bgt.n	48b4 <read_type_cb+0xbe>
    48b2:	2500      	movs	r5, #0
    48b4:	b2ed      	uxtb	r5, r5
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
}
    48b6:	0028      	movs	r0, r5
    48b8:	b005      	add	sp, #20
    48ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000048bc <uuid_create>:
	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
    48bc:	b510      	push	{r4, lr}
	switch (buf->len) {
    48be:	898b      	ldrh	r3, [r1, #12]
	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
    48c0:	0004      	movs	r4, r0
	switch (buf->len) {
    48c2:	2b02      	cmp	r3, #2
    48c4:	d009      	beq.n	48da <uuid_create+0x1e>
    48c6:	2b10      	cmp	r3, #16
    48c8:	d110      	bne.n	48ec <uuid_create+0x30>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
		return true;
	case 16:
		uuid->type = BT_UUID_TYPE_128;
    48ca:	2302      	movs	r3, #2
    48cc:	7003      	strb	r3, [r0, #0]
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    48ce:	898a      	ldrh	r2, [r1, #12]
    48d0:	3001      	adds	r0, #1
    48d2:	6889      	ldr	r1, [r1, #8]
    48d4:	f7fc f9bb 	bl	c4e <memcpy>
    48d8:	e006      	b.n	48e8 <uuid_create+0x2c>

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
	switch (buf->len) {
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    48da:	2300      	movs	r3, #0
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    48dc:	3108      	adds	r1, #8

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
	switch (buf->len) {
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    48de:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    48e0:	0008      	movs	r0, r1
    48e2:	f00b fea0 	bl	10626 <net_buf_simple_pull_le16>
    48e6:	8060      	strh	r0, [r4, #2]
		return true;
	case 16:
		uuid->type = BT_UUID_TYPE_128;
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    48e8:	2001      	movs	r0, #1
    48ea:	e000      	b.n	48ee <uuid_create+0x32>
		return true;
	}

	return false;
    48ec:	2000      	movs	r0, #0
}
    48ee:	bd10      	pop	{r4, pc}

000048f0 <att_req_sent>:

	k_sem_give(&att->tx_sem);
}

static void att_req_sent(struct bt_conn *conn)
{
    48f0:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    48f2:	2104      	movs	r1, #4
    48f4:	f7ff fd06 	bl	4304 <bt_l2cap_le_lookup_tx_cid>
    48f8:	0004      	movs	r4, r0
{
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p att->req %p", conn, att, att->req);

	k_sem_give(&att->tx_sem);
    48fa:	30c8      	adds	r0, #200	; 0xc8
    48fc:	f00c ffee 	bl	118dc <k_sem_give>

	/* Start timeout work */
	if (att->req) {
    4900:	0023      	movs	r3, r4
    4902:	3394      	adds	r3, #148	; 0x94
    4904:	681b      	ldr	r3, [r3, #0]
    4906:	2b00      	cmp	r3, #0
    4908:	d005      	beq.n	4916 <att_req_sent+0x26>
		k_delayed_work_submit(&att->timeout_work, ATT_TIMEOUT);
    490a:	0021      	movs	r1, r4
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    490c:	4a02      	ldr	r2, [pc, #8]	; (4918 <att_req_sent+0x28>)
    490e:	31a0      	adds	r1, #160	; 0xa0
    4910:	4802      	ldr	r0, [pc, #8]	; (491c <att_req_sent+0x2c>)
    4912:	f00d fafd 	bl	11f10 <k_delayed_work_submit_to_queue>
	}
}
    4916:	bd10      	pop	{r4, pc}
    4918:	00007530 	.word	0x00007530
    491c:	20001cf8 	.word	0x20001cf8

00004920 <att_is_connected>:
	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
}

static inline bool att_is_connected(struct bt_att *att)
{
    4920:	b510      	push	{r4, lr}
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    4922:	6803      	ldr	r3, [r0, #0]
    4924:	2401      	movs	r4, #1
    4926:	334d      	adds	r3, #77	; 0x4d
    4928:	781b      	ldrb	r3, [r3, #0]
    492a:	2b03      	cmp	r3, #3
    492c:	d104      	bne.n	4938 <att_is_connected+0x18>
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
    492e:	3090      	adds	r0, #144	; 0x90
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4930:	f00c f90d 	bl	10b4e <atomic_get>
    4934:	1080      	asrs	r0, r0, #2
	return 0;
}

static inline bool att_is_connected(struct bt_att *att)
{
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    4936:	4384      	bics	r4, r0
    4938:	0020      	movs	r0, r4
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}
    493a:	bd10      	pop	{r4, pc}

0000493c <att_pdu_sent>:
		k_delayed_work_submit(&att->timeout_work, ATT_TIMEOUT);
	}
}

static void att_pdu_sent(struct bt_conn *conn)
{
    493c:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    493e:	2104      	movs	r1, #4
    4940:	f7ff fce0 	bl	4304 <bt_l2cap_le_lookup_tx_cid>
{
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

	k_sem_give(&att->tx_sem);
    4944:	30c8      	adds	r0, #200	; 0xc8
    4946:	f00c ffc9 	bl	118dc <k_sem_give>
}
    494a:	bd10      	pop	{r4, pc}

0000494c <att_chan_get>:
static struct bt_att *att_chan_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    494c:	0003      	movs	r3, r0
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    494e:	b513      	push	{r0, r1, r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    4950:	334d      	adds	r3, #77	; 0x4d
    4952:	781b      	ldrb	r3, [r3, #0]
    4954:	2b03      	cmp	r3, #3
    4956:	d008      	beq.n	496a <att_chan_get+0x1e>
		BT_WARN("Not connected");
    4958:	4b15      	ldr	r3, [pc, #84]	; (49b0 <att_chan_get+0x64>)
    495a:	4a16      	ldr	r2, [pc, #88]	; (49b4 <att_chan_get+0x68>)
    495c:	9301      	str	r3, [sp, #4]
    495e:	4b16      	ldr	r3, [pc, #88]	; (49b8 <att_chan_get+0x6c>)
    4960:	4916      	ldr	r1, [pc, #88]	; (49bc <att_chan_get+0x70>)
    4962:	9300      	str	r3, [sp, #0]
    4964:	4816      	ldr	r0, [pc, #88]	; (49c0 <att_chan_get+0x74>)
    4966:	4b17      	ldr	r3, [pc, #92]	; (49c4 <att_chan_get+0x78>)
    4968:	e01c      	b.n	49a4 <att_chan_get+0x58>
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    496a:	2104      	movs	r1, #4
    496c:	f7ff fcdc 	bl	4328 <bt_l2cap_le_lookup_rx_cid>
    4970:	1e04      	subs	r4, r0, #0
	if (!chan) {
    4972:	d10a      	bne.n	498a <att_chan_get+0x3e>
		BT_ERR("Unable to find ATT channel");
    4974:	4b0e      	ldr	r3, [pc, #56]	; (49b0 <att_chan_get+0x64>)
    4976:	4a14      	ldr	r2, [pc, #80]	; (49c8 <att_chan_get+0x7c>)
    4978:	9301      	str	r3, [sp, #4]
    497a:	4b14      	ldr	r3, [pc, #80]	; (49cc <att_chan_get+0x80>)
    497c:	490f      	ldr	r1, [pc, #60]	; (49bc <att_chan_get+0x70>)
    497e:	9300      	str	r3, [sp, #0]
    4980:	4813      	ldr	r0, [pc, #76]	; (49d0 <att_chan_get+0x84>)
    4982:	4b10      	ldr	r3, [pc, #64]	; (49c4 <att_chan_get+0x78>)
    4984:	f7fc ff86 	bl	1894 <printk>
    4988:	e00f      	b.n	49aa <att_chan_get+0x5e>
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    498a:	3090      	adds	r0, #144	; 0x90
    498c:	f00c f8df 	bl	10b4e <atomic_get>
    4990:	0743      	lsls	r3, r0, #29
    4992:	d50a      	bpl.n	49aa <att_chan_get+0x5e>
		BT_WARN("ATT context flagged as disconnected");
    4994:	4b06      	ldr	r3, [pc, #24]	; (49b0 <att_chan_get+0x64>)
    4996:	4a07      	ldr	r2, [pc, #28]	; (49b4 <att_chan_get+0x68>)
    4998:	9301      	str	r3, [sp, #4]
    499a:	4b07      	ldr	r3, [pc, #28]	; (49b8 <att_chan_get+0x6c>)
    499c:	4907      	ldr	r1, [pc, #28]	; (49bc <att_chan_get+0x70>)
    499e:	9300      	str	r3, [sp, #0]
    49a0:	480c      	ldr	r0, [pc, #48]	; (49d4 <att_chan_get+0x88>)
    49a2:	4b08      	ldr	r3, [pc, #32]	; (49c4 <att_chan_get+0x78>)
    49a4:	f7fc ff76 	bl	1894 <printk>
		return NULL;
    49a8:	2400      	movs	r4, #0
	}

	return att;
}
    49aa:	0020      	movs	r0, r4
    49ac:	bd16      	pop	{r1, r2, r4, pc}
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	0001241d 	.word	0x0001241d
    49b4:	000123dc 	.word	0x000123dc
    49b8:	00012422 	.word	0x00012422
    49bc:	000123e3 	.word	0x000123e3
    49c0:	00012e6d 	.word	0x00012e6d
    49c4:	00014647 	.word	0x00014647
    49c8:	0001246d 	.word	0x0001246d
    49cc:	000124a8 	.word	0x000124a8
    49d0:	00012e8b 	.word	0x00012e8b
    49d4:	00012eb6 	.word	0x00012eb6

000049d8 <att_rsp_sent>:

	k_sem_give(&att->tx_sem);
}

static void att_rsp_sent(struct bt_conn *conn)
{
    49d8:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    49da:	2104      	movs	r1, #4
    49dc:	f7ff fc92 	bl	4304 <bt_l2cap_le_lookup_tx_cid>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    49e0:	2102      	movs	r1, #2
    49e2:	0004      	movs	r4, r0
    49e4:	4249      	negs	r1, r1
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    49e6:	3090      	adds	r0, #144	; 0x90
    49e8:	f00c f8c8 	bl	10b7c <atomic_and>
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    49ec:	0020      	movs	r0, r4
    49ee:	30c8      	adds	r0, #200	; 0xc8
    49f0:	f00c ff74 	bl	118dc <k_sem_give>
}
    49f4:	bd10      	pop	{r4, pc}

000049f6 <att_cfm_sent>:

	return CONTAINER_OF(chan, struct bt_att, chan);
}

static void att_cfm_sent(struct bt_conn *conn)
{
    49f6:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    49f8:	2104      	movs	r1, #4
    49fa:	f7ff fc83 	bl	4304 <bt_l2cap_le_lookup_tx_cid>
    49fe:	2103      	movs	r1, #3
    4a00:	0004      	movs	r4, r0
    4a02:	4249      	negs	r1, r1
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    4a04:	3090      	adds	r0, #144	; 0x90
    4a06:	f00c f8b9 	bl	10b7c <atomic_and>
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    4a0a:	0020      	movs	r0, r4
    4a0c:	30c8      	adds	r0, #200	; 0xc8
    4a0e:	f00c ff65 	bl	118dc <k_sem_give>
}
    4a12:	bd10      	pop	{r4, pc}

00004a14 <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4a16:	000c      	movs	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    4a18:	212a      	movs	r1, #42	; 0x2a
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4a1a:	0006      	movs	r6, r0
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    4a1c:	f7ff fecc 	bl	47b8 <check_perm.isra.3>
    4a20:	1e05      	subs	r5, r0, #0
    4a22:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    4a24:	d119      	bne.n	4a5a <write_cb+0x46>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	write = attr->write(data->conn, attr, data->value, data->len,
    4a26:	8a62      	ldrh	r2, [r4, #18]
    4a28:	9001      	str	r0, [sp, #4]
    4a2a:	9200      	str	r2, [sp, #0]
    4a2c:	7c23      	ldrb	r3, [r4, #16]
    4a2e:	68b7      	ldr	r7, [r6, #8]
    4a30:	68e2      	ldr	r2, [r4, #12]
    4a32:	0031      	movs	r1, r6
    4a34:	6820      	ldr	r0, [r4, #0]
    4a36:	47b8      	blx	r7
			    data->offset, 0);
	if (write < 0 || write != data->len) {
    4a38:	2800      	cmp	r0, #0
    4a3a:	db02      	blt.n	4a42 <write_cb+0x2e>
    4a3c:	7c23      	ldrb	r3, [r4, #16]
    4a3e:	4298      	cmp	r0, r3
    4a40:	d008      	beq.n	4a54 <write_cb+0x40>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    4a42:	0003      	movs	r3, r0
    4a44:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    4a46:	220e      	movs	r2, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    4a48:	2bfe      	cmp	r3, #254	; 0xfe
    4a4a:	d801      	bhi.n	4a50 <write_cb+0x3c>
		return -err;
    4a4c:	4240      	negs	r0, r0
    4a4e:	b2c2      	uxtb	r2, r0

	/* Read attribute value and store in the buffer */
	write = attr->write(data->conn, attr, data->value, data->len,
			    data->offset, 0);
	if (write < 0 || write != data->len) {
		data->err = err_to_att(write);
    4a50:	7522      	strb	r2, [r4, #20]
    4a52:	e003      	b.n	4a5c <write_cb+0x48>
		return BT_GATT_ITER_STOP;
	}

	data->err = 0;
    4a54:	7525      	strb	r5, [r4, #20]

	return BT_GATT_ITER_CONTINUE;
    4a56:	2501      	movs	r5, #1
    4a58:	e000      	b.n	4a5c <write_cb+0x48>
	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    4a5a:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    4a5c:	0028      	movs	r0, r5
    4a5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004a60 <att_send_req>:

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
	BT_DBG("req %p", req);

	att->req = req;
    4a60:	0003      	movs	r3, r0
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    4a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
	BT_DBG("req %p", req);

	att->req = req;
    4a64:	3394      	adds	r3, #148	; 0x94

	k_sem_take(&att->tx_sem, K_FOREVER);
    4a66:	0005      	movs	r5, r0

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
	BT_DBG("req %p", req);

	att->req = req;
    4a68:	6019      	str	r1, [r3, #0]
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    4a6a:	000e      	movs	r6, r1
	BT_DBG("req %p", req);

	att->req = req;

	k_sem_take(&att->tx_sem, K_FOREVER);
    4a6c:	2101      	movs	r1, #1
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    4a6e:	0004      	movs	r4, r0
	BT_DBG("req %p", req);

	att->req = req;

	k_sem_take(&att->tx_sem, K_FOREVER);
    4a70:	35c8      	adds	r5, #200	; 0xc8
    4a72:	4249      	negs	r1, r1
    4a74:	0028      	movs	r0, r5
    4a76:	f00c ff6d 	bl	11954 <k_sem_take>
	if (!att_is_connected(att)) {
    4a7a:	0020      	movs	r0, r4
    4a7c:	f7ff ff50 	bl	4920 <att_is_connected>
    4a80:	2800      	cmp	r0, #0
    4a82:	d10f      	bne.n	4aa4 <att_send_req+0x44>
		BT_WARN("Disconnected");
    4a84:	4b18      	ldr	r3, [pc, #96]	; (4ae8 <att_send_req+0x88>)
    4a86:	4a19      	ldr	r2, [pc, #100]	; (4aec <att_send_req+0x8c>)
    4a88:	9301      	str	r3, [sp, #4]
    4a8a:	4b19      	ldr	r3, [pc, #100]	; (4af0 <att_send_req+0x90>)
    4a8c:	4919      	ldr	r1, [pc, #100]	; (4af4 <att_send_req+0x94>)
    4a8e:	9300      	str	r3, [sp, #0]
    4a90:	4819      	ldr	r0, [pc, #100]	; (4af8 <att_send_req+0x98>)
    4a92:	4b1a      	ldr	r3, [pc, #104]	; (4afc <att_send_req+0x9c>)
    4a94:	f7fc fefe 	bl	1894 <printk>
		k_sem_give(&att->tx_sem);
    4a98:	0028      	movs	r0, r5
    4a9a:	f00c ff1f 	bl	118dc <k_sem_give>
		return -ENOTCONN;
    4a9e:	2039      	movs	r0, #57	; 0x39
    4aa0:	4240      	negs	r0, r0
    4aa2:	e01f      	b.n	4ae4 <att_send_req+0x84>
	}

	/* Save request state so it can be resent */
	net_buf_simple_save(&req->buf->b, &req->state);
    4aa4:	6935      	ldr	r5, [r6, #16]
    4aa6:	0028      	movs	r0, r5
    4aa8:	3008      	adds	r0, #8
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    4aaa:	f00b fdc7 	bl	1063c <net_buf_simple_headroom>
    4aae:	81b0      	strh	r0, [r6, #12]
	state->len = buf->len;
    4ab0:	89ab      	ldrh	r3, [r5, #12]

	/* Keep a reference for resending in case of an error */
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    4ab2:	6930      	ldr	r0, [r6, #16]
    4ab4:	81f3      	strh	r3, [r6, #14]
    4ab6:	6824      	ldr	r4, [r4, #0]
    4ab8:	f00b fd80 	bl	105bc <net_buf_ref>
    4abc:	6933      	ldr	r3, [r6, #16]
    4abe:	0005      	movs	r5, r0
	k_sem_give(&att->tx_sem);
}

static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
{
	switch (att_op_get_type(buf->data[0])) {
    4ac0:	689b      	ldr	r3, [r3, #8]
    4ac2:	7818      	ldrb	r0, [r3, #0]
    4ac4:	f7ff fcce 	bl	4464 <att_op_get_type>
    4ac8:	3801      	subs	r0, #1
    4aca:	b2c0      	uxtb	r0, r0
    4acc:	4b0c      	ldr	r3, [pc, #48]	; (4b00 <att_send_req+0xa0>)
    4ace:	2804      	cmp	r0, #4
    4ad0:	d802      	bhi.n	4ad8 <att_send_req+0x78>
    4ad2:	4b0c      	ldr	r3, [pc, #48]	; (4b04 <att_send_req+0xa4>)
    4ad4:	0080      	lsls	r0, r0, #2
    4ad6:	58c3      	ldr	r3, [r0, r3]

	/* Save request state so it can be resent */
	net_buf_simple_save(&req->buf->b, &req->state);

	/* Keep a reference for resending in case of an error */
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    4ad8:	0020      	movs	r0, r4
    4ada:	002a      	movs	r2, r5
    4adc:	2104      	movs	r1, #4
    4ade:	f7ff fb69 	bl	41b4 <bt_l2cap_send_cb>
			 net_buf_ref(req->buf), att_cb(req->buf));

	return 0;
    4ae2:	2000      	movs	r0, #0
}
    4ae4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    4ae6:	46c0      	nop			; (mov r8, r8)
    4ae8:	0001241d 	.word	0x0001241d
    4aec:	000123dc 	.word	0x000123dc
    4af0:	00012422 	.word	0x00012422
    4af4:	000123e3 	.word	0x000123e3
    4af8:	00012eea 	.word	0x00012eea
    4afc:	0001452e 	.word	0x0001452e
    4b00:	0000493d 	.word	0x0000493d
    4b04:	00014680 	.word	0x00014680

00004b08 <att_handle_rsp>:

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    4b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b0a:	0004      	movs	r4, r0
	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);

	if (!att->req) {
    4b0c:	0025      	movs	r5, r4

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    4b0e:	b085      	sub	sp, #20
	bt_att_func_t func;

	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);
    4b10:	30a0      	adds	r0, #160	; 0xa0

	if (!att->req) {
    4b12:	3594      	adds	r5, #148	; 0x94

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    4b14:	9303      	str	r3, [sp, #12]
    4b16:	9102      	str	r1, [sp, #8]
    4b18:	0017      	movs	r7, r2
	bt_att_func_t func;

	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);
    4b1a:	f00d f9c1 	bl	11ea0 <k_delayed_work_cancel>

	if (!att->req) {
    4b1e:	682b      	ldr	r3, [r5, #0]
    4b20:	2b00      	cmp	r3, #0
    4b22:	d10a      	bne.n	4b3a <att_handle_rsp+0x32>
		BT_WARN("No pending ATT request");
    4b24:	4b1b      	ldr	r3, [pc, #108]	; (4b94 <att_handle_rsp+0x8c>)
    4b26:	4a1c      	ldr	r2, [pc, #112]	; (4b98 <att_handle_rsp+0x90>)
    4b28:	9301      	str	r3, [sp, #4]
    4b2a:	4b1c      	ldr	r3, [pc, #112]	; (4b9c <att_handle_rsp+0x94>)
    4b2c:	491c      	ldr	r1, [pc, #112]	; (4ba0 <att_handle_rsp+0x98>)
    4b2e:	9300      	str	r3, [sp, #0]
    4b30:	481c      	ldr	r0, [pc, #112]	; (4ba4 <att_handle_rsp+0x9c>)
    4b32:	4b1d      	ldr	r3, [pc, #116]	; (4ba8 <att_handle_rsp+0xa0>)
    4b34:	f7fc feae 	bl	1894 <printk>
		goto process;
    4b38:	e01a      	b.n	4b70 <att_handle_rsp+0x68>
	}

	/* Release original buffer */
	if (att->req->buf) {
    4b3a:	6918      	ldr	r0, [r3, #16]
    4b3c:	2800      	cmp	r0, #0
    4b3e:	d004      	beq.n	4b4a <att_handle_rsp+0x42>
		net_buf_unref(att->req->buf);
    4b40:	f00b fd1e 	bl	10580 <net_buf_unref>
		att->req->buf = NULL;
    4b44:	2200      	movs	r2, #0
    4b46:	682b      	ldr	r3, [r5, #0]
    4b48:	611a      	str	r2, [r3, #16]
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    4b4a:	682b      	ldr	r3, [r5, #0]
	att->req->func = NULL;
    4b4c:	2600      	movs	r6, #0
		net_buf_unref(att->req->buf);
		att->req->buf = NULL;
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    4b4e:	685a      	ldr	r2, [r3, #4]
	att->req->func = NULL;

	func(att->chan.chan.conn, err, pdu, len, att->req);
    4b50:	6820      	ldr	r0, [r4, #0]
		net_buf_unref(att->req->buf);
		att->req->buf = NULL;
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    4b52:	4694      	mov	ip, r2
	att->req->func = NULL;
    4b54:	605e      	str	r6, [r3, #4]

	func(att->chan.chan.conn, err, pdu, len, att->req);
    4b56:	9a02      	ldr	r2, [sp, #8]
    4b58:	9300      	str	r3, [sp, #0]
    4b5a:	9903      	ldr	r1, [sp, #12]
    4b5c:	003b      	movs	r3, r7
    4b5e:	4667      	mov	r7, ip
    4b60:	47b8      	blx	r7

	/* Don't destroy if callback had reused the request */
	if (!att->req->func) {
    4b62:	6828      	ldr	r0, [r5, #0]
    4b64:	6843      	ldr	r3, [r0, #4]
    4b66:	42b3      	cmp	r3, r6
    4b68:	d101      	bne.n	4b6e <att_handle_rsp+0x66>
		att_req_destroy(att->req);
    4b6a:	f7ff fcc7 	bl	44fc <att_req_destroy>
	}

	att->req = NULL;
    4b6e:	602e      	str	r6, [r5, #0]
    4b70:	0023      	movs	r3, r4
    4b72:	3398      	adds	r3, #152	; 0x98
    4b74:	6819      	ldr	r1, [r3, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4b76:	2900      	cmp	r1, #0
    4b78:	d008      	beq.n	4b8c <att_handle_rsp+0x84>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    4b7a:	680a      	ldr	r2, [r1, #0]
	if (list->tail == node) {
    4b7c:	6858      	ldr	r0, [r3, #4]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    4b7e:	601a      	str	r2, [r3, #0]
	if (list->tail == node) {
    4b80:	4281      	cmp	r1, r0
    4b82:	d100      	bne.n	4b86 <att_handle_rsp+0x7e>
		list->tail = list->head;
    4b84:	605a      	str	r2, [r3, #4]
	node = sys_slist_get(&att->reqs);
	if (!node) {
		return;
	}

	att_send_req(att, ATT_REQ(node));
    4b86:	0020      	movs	r0, r4
    4b88:	f7ff ff6a 	bl	4a60 <att_send_req>
process:
	/* Process pending requests */
	att_process(att);

	return 0;
}
    4b8c:	2000      	movs	r0, #0
    4b8e:	b005      	add	sp, #20
    4b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b92:	46c0      	nop			; (mov r8, r8)
    4b94:	0001241d 	.word	0x0001241d
    4b98:	000123dc 	.word	0x000123dc
    4b9c:	00012422 	.word	0x00012422
    4ba0:	000123e3 	.word	0x000123e3
    4ba4:	00012f07 	.word	0x00012f07
    4ba8:	00014638 	.word	0x00014638

00004bac <att_confirm>:

	return 0;
}

static u8_t att_confirm(struct bt_att *att, struct net_buf *buf)
{
    4bac:	b510      	push	{r4, lr}
	BT_DBG("");

	return att_handle_rsp(att, buf->data, buf->len, 0);
    4bae:	2300      	movs	r3, #0
    4bb0:	898a      	ldrh	r2, [r1, #12]
    4bb2:	6889      	ldr	r1, [r1, #8]
    4bb4:	f7ff ffa8 	bl	4b08 <att_handle_rsp>
}
    4bb8:	bd10      	pop	{r4, pc}

00004bba <att_handle_exec_write_rsp>:
    4bba:	b510      	push	{r4, lr}
    4bbc:	f7ff fff6 	bl	4bac <att_confirm>
    4bc0:	bd10      	pop	{r4, pc}

00004bc2 <att_handle_prepare_write_rsp>:
    4bc2:	b510      	push	{r4, lr}
    4bc4:	f7ff fff2 	bl	4bac <att_confirm>
    4bc8:	bd10      	pop	{r4, pc}

00004bca <att_handle_write_rsp>:
    4bca:	b510      	push	{r4, lr}
    4bcc:	f7ff ffee 	bl	4bac <att_confirm>
    4bd0:	bd10      	pop	{r4, pc}

00004bd2 <att_handle_read_mult_rsp>:
    4bd2:	b510      	push	{r4, lr}
    4bd4:	f7ff ffea 	bl	4bac <att_confirm>
    4bd8:	bd10      	pop	{r4, pc}

00004bda <att_handle_read_blob_rsp>:
    4bda:	b510      	push	{r4, lr}
    4bdc:	f7ff ffe6 	bl	4bac <att_confirm>
    4be0:	bd10      	pop	{r4, pc}

00004be2 <att_handle_read_rsp>:
    4be2:	b510      	push	{r4, lr}
    4be4:	f7ff ffe2 	bl	4bac <att_confirm>
    4be8:	bd10      	pop	{r4, pc}

00004bea <att_handle_read_type_rsp>:
    4bea:	b510      	push	{r4, lr}
    4bec:	f7ff ffde 	bl	4bac <att_confirm>
    4bf0:	bd10      	pop	{r4, pc}

00004bf2 <att_handle_find_type_rsp>:
    4bf2:	b510      	push	{r4, lr}
    4bf4:	f7ff ffda 	bl	4bac <att_confirm>
    4bf8:	bd10      	pop	{r4, pc}

00004bfa <att_handle_find_info_rsp>:
    4bfa:	b510      	push	{r4, lr}
    4bfc:	f7ff ffd6 	bl	4bac <att_confirm>
    4c00:	bd10      	pop	{r4, pc}

00004c02 <att_mtu_rsp>:

	return 0;
}

static u8_t att_mtu_rsp(struct bt_att *att, struct net_buf *buf)
{
    4c02:	b510      	push	{r4, lr}
	struct bt_att_exchange_mtu_rsp *rsp;
	u16_t mtu;

	if (!att) {
		return 0;
    4c04:	0003      	movs	r3, r0

	return 0;
}

static u8_t att_mtu_rsp(struct bt_att *att, struct net_buf *buf)
{
    4c06:	000c      	movs	r4, r1
	struct bt_att_exchange_mtu_rsp *rsp;
	u16_t mtu;

	if (!att) {
    4c08:	2800      	cmp	r0, #0
    4c0a:	d014      	beq.n	4c36 <att_mtu_rsp+0x34>
		return 0;
	}

	rsp = (void *)buf->data;
    4c0c:	6889      	ldr	r1, [r1, #8]

	mtu = sys_le16_to_cpu(rsp->mtu);
    4c0e:	784b      	ldrb	r3, [r1, #1]
    4c10:	780a      	ldrb	r2, [r1, #0]
    4c12:	021b      	lsls	r3, r3, #8

	BT_DBG("Server MTU %u", mtu);

	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    4c14:	4313      	orrs	r3, r2
    4c16:	2b16      	cmp	r3, #22
    4c18:	d803      	bhi.n	4c22 <att_mtu_rsp+0x20>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    4c1a:	2200      	movs	r2, #0
    4c1c:	2304      	movs	r3, #4
    4c1e:	0011      	movs	r1, r2
    4c20:	e006      	b.n	4c30 <att_mtu_rsp+0x2e>
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    4c22:	0002      	movs	r2, r0
	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
	}

	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    4c24:	2317      	movs	r3, #23
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    4c26:	3256      	adds	r2, #86	; 0x56
	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
	}

	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    4c28:	8743      	strh	r3, [r0, #58]	; 0x3a
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    4c2a:	8013      	strh	r3, [r2, #0]

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);

	return att_handle_rsp(att, rsp, buf->len, 0);
    4c2c:	2300      	movs	r3, #0
    4c2e:	89a2      	ldrh	r2, [r4, #12]
    4c30:	f7ff ff6a 	bl	4b08 <att_handle_rsp>
    4c34:	0003      	movs	r3, r0
}
    4c36:	0018      	movs	r0, r3
    4c38:	bd10      	pop	{r4, pc}

00004c3a <att_error_rsp>:
	rsp = (void *)buf->data;

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    4c3a:	0003      	movs	r3, r0
	return bt_conn_security(conn, sec);
}
#endif /* CONFIG_BLUETOOTH_SMP */

static u8_t att_error_rsp(struct bt_att *att, struct net_buf *buf)
{
    4c3c:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    4c3e:	3394      	adds	r3, #148	; 0x94
    4c40:	681a      	ldr	r2, [r3, #0]
static u8_t att_error_rsp(struct bt_att *att, struct net_buf *buf)
{
	struct bt_att_error_rsp *rsp;
	u8_t err;

	rsp = (void *)buf->data;
    4c42:	688c      	ldr	r4, [r1, #8]

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
		err = BT_ATT_ERR_UNLIKELY;
    4c44:	230e      	movs	r3, #14
	rsp = (void *)buf->data;

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    4c46:	2a00      	cmp	r2, #0
    4c48:	d00a      	beq.n	4c60 <att_error_rsp+0x26>
		err = BT_ATT_ERR_UNLIKELY;
		goto done;
	}

	if (att->req->buf) {
    4c4a:	6913      	ldr	r3, [r2, #16]
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d006      	beq.n	4c5e <att_error_rsp+0x24>
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    4c50:	001d      	movs	r5, r3
    4c52:	8991      	ldrh	r1, [r2, #12]
    4c54:	3510      	adds	r5, #16
    4c56:	1869      	adds	r1, r5, r1
    4c58:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    4c5a:	89d2      	ldrh	r2, [r2, #14]
    4c5c:	819a      	strh	r2, [r3, #12]
		/* Restore state to be resent */
		net_buf_simple_restore(&att->req->buf->b, &att->req->state);
	}

	err = rsp->error;
    4c5e:	78e3      	ldrb	r3, [r4, #3]
		return 0;
	}
#endif /* CONFIG_BLUETOOTH_SMP */

done:
	return att_handle_rsp(att, NULL, 0, err);
    4c60:	2200      	movs	r2, #0
    4c62:	0011      	movs	r1, r2
    4c64:	f7ff ff50 	bl	4b08 <att_handle_rsp>
}
    4c68:	bd70      	pop	{r4, r5, r6, pc}

00004c6a <att_reset>:

	return buf;
}

static void att_reset(struct bt_att *att)
{
    4c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c6c:	0005      	movs	r5, r0
    4c6e:	b085      	sub	sp, #20
	int i;
#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	struct net_buf *buf;

	/* Discard queued buffers */
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
    4c70:	0028      	movs	r0, r5
    4c72:	2100      	movs	r1, #0
    4c74:	30dc      	adds	r0, #220	; 0xdc
    4c76:	f00c fc13 	bl	114a0 <k_queue_get>
    4c7a:	2800      	cmp	r0, #0
    4c7c:	d002      	beq.n	4c84 <att_reset+0x1a>
		net_buf_unref(buf);
    4c7e:	f00b fc7f 	bl	10580 <net_buf_unref>
    4c82:	e7f5      	b.n	4c70 <att_reset+0x6>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4c84:	0028      	movs	r0, r5

	atomic_set_bit(att->flags, ATT_DISCONNECTED);

	/* Ensure that any waiters are woken up */
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
    4c86:	002c      	movs	r4, r5
    4c88:	002e      	movs	r6, r5
    4c8a:	2104      	movs	r1, #4
    4c8c:	34c8      	adds	r4, #200	; 0xc8
    4c8e:	3090      	adds	r0, #144	; 0x90
    4c90:	f00b ff69 	bl	10b66 <atomic_or>
    4c94:	0020      	movs	r0, r4
    4c96:	f00c fe21 	bl	118dc <k_sem_give>
    4c9a:	3698      	adds	r6, #152	; 0x98
    4c9c:	0020      	movs	r0, r4
    4c9e:	f00c fe1d 	bl	118dc <k_sem_give>
    4ca2:	6834      	ldr	r4, [r6, #0]
    4ca4:	9603      	str	r6, [sp, #12]
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    4ca6:	2c00      	cmp	r4, #0
    4ca8:	d10e      	bne.n	4cc8 <att_reset+0x5e>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    4caa:	2100      	movs	r1, #0
    4cac:	9b03      	ldr	r3, [sp, #12]
    4cae:	6019      	str	r1, [r3, #0]
	list->tail = NULL;
    4cb0:	6059      	str	r1, [r3, #4]
	}

	/* Reset list */
	sys_slist_init(&att->reqs);

	if (!att->req) {
    4cb2:	002b      	movs	r3, r5
    4cb4:	3394      	adds	r3, #148	; 0x94
    4cb6:	681b      	ldr	r3, [r3, #0]
    4cb8:	428b      	cmp	r3, r1
    4cba:	d017      	beq.n	4cec <att_reset+0x82>
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    4cbc:	230e      	movs	r3, #14
    4cbe:	000a      	movs	r2, r1
    4cc0:	0028      	movs	r0, r5
    4cc2:	f7ff ff21 	bl	4b08 <att_handle_rsp>
    4cc6:	e011      	b.n	4cec <att_reset+0x82>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    4cc8:	6827      	ldr	r7, [r4, #0]
		k_sem_give(&att->tx_sem);
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
		if (req->func) {
    4cca:	6863      	ldr	r3, [r4, #4]
    4ccc:	1e1e      	subs	r6, r3, #0
    4cce:	d005      	beq.n	4cdc <att_reset+0x72>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    4cd0:	2300      	movs	r3, #0
    4cd2:	9400      	str	r4, [sp, #0]
    4cd4:	001a      	movs	r2, r3
    4cd6:	210e      	movs	r1, #14
    4cd8:	0018      	movs	r0, r3
    4cda:	47b0      	blx	r6
		}

		att_req_destroy(req);
    4cdc:	0020      	movs	r0, r4
    4cde:	f7ff fc0d 	bl	44fc <att_req_destroy>
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    4ce2:	2f00      	cmp	r7, #0
    4ce4:	d0e1      	beq.n	4caa <att_reset+0x40>
    4ce6:	003c      	movs	r4, r7
    4ce8:	683f      	ldr	r7, [r7, #0]
    4cea:	e7ee      	b.n	4cca <att_reset+0x60>
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}
    4cec:	b005      	add	sp, #20
    4cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004cf0 <bt_att_disconnected>:

	bt_gatt_connected(ch->chan.conn);
}

static void bt_att_disconnected(struct bt_l2cap_chan *chan)
{
    4cf0:	b510      	push	{r4, lr}
    4cf2:	0004      	movs	r4, r0
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p cid 0x%04x", ch, ch->tx.cid);

	att_reset(att);
    4cf4:	f7ff ffb9 	bl	4c6a <att_reset>

	bt_gatt_disconnected(ch->chan.conn);
    4cf8:	6820      	ldr	r0, [r4, #0]
    4cfa:	f001 fa2f 	bl	615c <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    4cfe:	22f0      	movs	r2, #240	; 0xf0
    4d00:	2100      	movs	r1, #0
    4d02:	0020      	movs	r0, r4
    4d04:	f7fb ffcd 	bl	ca2 <memset>
}
    4d08:	bd10      	pop	{r4, pc}
	...

00004d0c <att_timeout>:
	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}

static void att_timeout(struct k_work *work)
{
    4d0c:	b513      	push	{r0, r1, r4, lr}
    4d0e:	0004      	movs	r4, r0
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
	struct bt_l2cap_le_chan *ch = &att->chan;

	BT_ERR("ATT Timeout");
    4d10:	4b09      	ldr	r3, [pc, #36]	; (4d38 <att_timeout+0x2c>)
    4d12:	4a0a      	ldr	r2, [pc, #40]	; (4d3c <att_timeout+0x30>)
    4d14:	9301      	str	r3, [sp, #4]
    4d16:	4b0a      	ldr	r3, [pc, #40]	; (4d40 <att_timeout+0x34>)
    4d18:	490a      	ldr	r1, [pc, #40]	; (4d44 <att_timeout+0x38>)
	 * transaction shall be considered to have failed and the local higher
	 * layers shall be informed of this failure. No more attribute protocol
	 * requests, commands, indications or notifications shall be sent to the
	 * target device on this ATT Bearer.
	 */
	att_reset(att);
    4d1a:	3ca0      	subs	r4, #160	; 0xa0
static void att_timeout(struct k_work *work)
{
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
	struct bt_l2cap_le_chan *ch = &att->chan;

	BT_ERR("ATT Timeout");
    4d1c:	9300      	str	r3, [sp, #0]
    4d1e:	480a      	ldr	r0, [pc, #40]	; (4d48 <att_timeout+0x3c>)
    4d20:	4b0a      	ldr	r3, [pc, #40]	; (4d4c <att_timeout+0x40>)
    4d22:	f7fc fdb7 	bl	1894 <printk>
	 * transaction shall be considered to have failed and the local higher
	 * layers shall be informed of this failure. No more attribute protocol
	 * requests, commands, indications or notifications shall be sent to the
	 * target device on this ATT Bearer.
	 */
	att_reset(att);
    4d26:	0020      	movs	r0, r4
    4d28:	f7ff ff9f 	bl	4c6a <att_reset>

	/* Consider the channel disconnected */
	bt_gatt_disconnected(ch->chan.conn);
    4d2c:	6820      	ldr	r0, [r4, #0]
    4d2e:	f001 fa15 	bl	615c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    4d32:	2300      	movs	r3, #0
    4d34:	6023      	str	r3, [r4, #0]
}
    4d36:	bd13      	pop	{r0, r1, r4, pc}
    4d38:	0001241d 	.word	0x0001241d
    4d3c:	0001246d 	.word	0x0001246d
    4d40:	000124a8 	.word	0x000124a8
    4d44:	000123e3 	.word	0x000123e3
    4d48:	00012f2e 	.word	0x00012f2e
    4d4c:	00014672 	.word	0x00014672

00004d50 <prep_write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t prep_write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d52:	000c      	movs	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    4d54:	212a      	movs	r1, #42	; 0x2a
	u16_t offset;
	u8_t err;
};

static u8_t prep_write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4d56:	0006      	movs	r6, r0
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    4d58:	f7ff fd2e 	bl	47b8 <check_perm.isra.3>
    4d5c:	1e05      	subs	r5, r0, #0
    4d5e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    4d60:	d134      	bne.n	4dcc <prep_write_cb+0x7c>
    4d62:	7cb3      	ldrb	r3, [r6, #18]
		return BT_GATT_ITER_STOP;
	}

	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    4d64:	065b      	lsls	r3, r3, #25
    4d66:	d401      	bmi.n	4d6c <prep_write_cb+0x1c>
		data->err = BT_ATT_ERR_WRITE_NOT_PERMITTED;
    4d68:	2303      	movs	r3, #3
    4d6a:	e01c      	b.n	4da6 <prep_write_cb+0x56>
		return BT_GATT_ITER_STOP;
	}

	/* Write attribute value to check if device is authorized */
	write = attr->write(data->conn, attr, data->value, data->len,
    4d6c:	2201      	movs	r2, #1
    4d6e:	9201      	str	r2, [sp, #4]
    4d70:	89e2      	ldrh	r2, [r4, #14]
    4d72:	7b23      	ldrb	r3, [r4, #12]
    4d74:	9200      	str	r2, [sp, #0]
    4d76:	0031      	movs	r1, r6
    4d78:	68a2      	ldr	r2, [r4, #8]
    4d7a:	6820      	ldr	r0, [r4, #0]
    4d7c:	68b7      	ldr	r7, [r6, #8]
    4d7e:	47b8      	blx	r7
			    data->offset, BT_GATT_WRITE_FLAG_PREPARE);
	if (write != 0) {
    4d80:	2800      	cmp	r0, #0
    4d82:	d008      	beq.n	4d96 <prep_write_cb+0x46>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    4d84:	0003      	movs	r3, r0
    4d86:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    4d88:	220e      	movs	r2, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    4d8a:	2bfe      	cmp	r3, #254	; 0xfe
    4d8c:	d801      	bhi.n	4d92 <prep_write_cb+0x42>
		return -err;
    4d8e:	4240      	negs	r0, r0
    4d90:	b2c2      	uxtb	r2, r0

	/* Write attribute value to check if device is authorized */
	write = attr->write(data->conn, attr, data->value, data->len,
			    data->offset, BT_GATT_WRITE_FLAG_PREPARE);
	if (write != 0) {
		data->err = err_to_att(write);
    4d92:	7422      	strb	r2, [r4, #16]
		return BT_GATT_ITER_STOP;
    4d94:	e01b      	b.n	4dce <prep_write_cb+0x7e>
	}

	/* Copy data into the outstanding queue */
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    4d96:	0029      	movs	r1, r5
    4d98:	480e      	ldr	r0, [pc, #56]	; (4dd4 <prep_write_cb+0x84>)
    4d9a:	f00b fb7d 	bl	10498 <net_buf_alloc>
    4d9e:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    4da0:	2800      	cmp	r0, #0
    4da2:	d102      	bne.n	4daa <prep_write_cb+0x5a>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    4da4:	2309      	movs	r3, #9
    4da6:	7423      	strb	r3, [r4, #16]
    4da8:	e011      	b.n	4dce <prep_write_cb+0x7e>
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    4daa:	2203      	movs	r2, #3
    4dac:	89c3      	ldrh	r3, [r0, #14]

	attr_data = net_buf_user_data(data->buf);
	attr_data->handle = attr->handle;
	attr_data->offset = data->offset;

	net_buf_add_mem(data->buf, data->value, data->len);
    4dae:	68a1      	ldr	r1, [r4, #8]
    4db0:	18c3      	adds	r3, r0, r3
    4db2:	3313      	adds	r3, #19
    4db4:	4393      	bics	r3, r2
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
		return BT_GATT_ITER_STOP;
	}

	attr_data = net_buf_user_data(data->buf);
	attr_data->handle = attr->handle;
    4db6:	8a32      	ldrh	r2, [r6, #16]
	attr_data->offset = data->offset;

	net_buf_add_mem(data->buf, data->value, data->len);
    4db8:	3008      	adds	r0, #8
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
		return BT_GATT_ITER_STOP;
	}

	attr_data = net_buf_user_data(data->buf);
	attr_data->handle = attr->handle;
    4dba:	801a      	strh	r2, [r3, #0]
	attr_data->offset = data->offset;
    4dbc:	89e2      	ldrh	r2, [r4, #14]
    4dbe:	805a      	strh	r2, [r3, #2]

	net_buf_add_mem(data->buf, data->value, data->len);
    4dc0:	7b22      	ldrb	r2, [r4, #12]
    4dc2:	f00b fc06 	bl	105d2 <net_buf_simple_add_mem>

	data->err = 0;
    4dc6:	7425      	strb	r5, [r4, #16]

	return BT_GATT_ITER_CONTINUE;
    4dc8:	2501      	movs	r5, #1
    4dca:	e000      	b.n	4dce <prep_write_cb+0x7e>
	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    4dcc:	2500      	movs	r5, #0
	net_buf_add_mem(data->buf, data->value, data->len);

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    4dce:	0028      	movs	r0, r5
    4dd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4dd2:	46c0      	nop			; (mov r8, r8)
    4dd4:	20000694 	.word	0x20000694

00004dd8 <read_cb>:
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
    4dda:	680e      	ldr	r6, [r1, #0]
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4ddc:	0007      	movs	r7, r0
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4dde:	6888      	ldr	r0, [r1, #8]

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    4de0:	6833      	ldr	r3, [r6, #0]
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4de2:	000c      	movs	r4, r1
    4de4:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4de6:	2100      	movs	r1, #0
    4de8:	3008      	adds	r0, #8

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    4dea:	9303      	str	r3, [sp, #12]
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4dec:	f00b fbea 	bl	105c4 <net_buf_simple_add>

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: invalid handle error to no error.
	 */
	data->err = 0x00;
    4df0:	2300      	movs	r3, #0
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4df2:	60e0      	str	r0, [r4, #12]

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: invalid handle error to no error.
	 */
	data->err = 0x00;
    4df4:	7423      	strb	r3, [r4, #16]

	/* Check attribute permissions */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    4df6:	2115      	movs	r1, #21
    4df8:	0038      	movs	r0, r7
    4dfa:	f7ff fcdd 	bl	47b8 <check_perm.isra.3>
    4dfe:	1e05      	subs	r5, r0, #0
    4e00:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    4e02:	d11e      	bne.n	4e42 <read_cb+0x6a>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4e04:	68a1      	ldr	r1, [r4, #8]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    4e06:	3656      	adds	r6, #86	; 0x56
	if (data->err) {
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4e08:	898a      	ldrh	r2, [r1, #12]
    4e0a:	8833      	ldrh	r3, [r6, #0]
    4e0c:	6889      	ldr	r1, [r1, #8]
    4e0e:	1a9b      	subs	r3, r3, r2
    4e10:	188a      	adds	r2, r1, r2
    4e12:	88a1      	ldrh	r1, [r4, #4]
    4e14:	b29b      	uxth	r3, r3
    4e16:	9100      	str	r1, [sp, #0]
    4e18:	687e      	ldr	r6, [r7, #4]
    4e1a:	0039      	movs	r1, r7
    4e1c:	9803      	ldr	r0, [sp, #12]
    4e1e:	47b0      	blx	r6
    4e20:	1e01      	subs	r1, r0, #0
			  att->chan.tx.mtu - data->buf->len, data->offset);
	if (read < 0) {
    4e22:	da08      	bge.n	4e36 <read_cb+0x5e>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    4e24:	000b      	movs	r3, r1
    4e26:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    4e28:	200e      	movs	r0, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    4e2a:	2bfe      	cmp	r3, #254	; 0xfe
    4e2c:	d801      	bhi.n	4e32 <read_cb+0x5a>
		return -err;
    4e2e:	4249      	negs	r1, r1
    4e30:	b2c8      	uxtb	r0, r1

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, data->offset);
	if (read < 0) {
		data->err = err_to_att(read);
    4e32:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    4e34:	e006      	b.n	4e44 <read_cb+0x6c>
	}

	net_buf_add(data->buf, read);
    4e36:	68a0      	ldr	r0, [r4, #8]

	return BT_GATT_ITER_CONTINUE;
    4e38:	2501      	movs	r5, #1
	if (read < 0) {
		data->err = err_to_att(read);
		return BT_GATT_ITER_STOP;
	}

	net_buf_add(data->buf, read);
    4e3a:	3008      	adds	r0, #8
    4e3c:	f00b fbc2 	bl	105c4 <net_buf_simple_add>

	return BT_GATT_ITER_CONTINUE;
    4e40:	e000      	b.n	4e44 <read_cb+0x6c>
	data->err = 0x00;

	/* Check attribute permissions */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    4e42:	2500      	movs	r5, #0
	}

	net_buf_add(data->buf, read);

	return BT_GATT_ITER_CONTINUE;
}
    4e44:	0028      	movs	r0, r5
    4e46:	b005      	add	sp, #20
    4e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00004e4c <bt_att_create_pdu>:

	return att;
}

struct net_buf *bt_att_create_pdu(struct bt_conn *conn, u8_t op, size_t len)
{
    4e4c:	b530      	push	{r4, r5, lr}
    4e4e:	b085      	sub	sp, #20
    4e50:	000d      	movs	r5, r1
    4e52:	0014      	movs	r4, r2
	struct bt_att_hdr *hdr;
	struct net_buf *buf;
	struct bt_att *att;

	att = att_chan_get(conn);
    4e54:	f7ff fd7a 	bl	494c <att_chan_get>
    4e58:	1e03      	subs	r3, r0, #0
	if (!att) {
    4e5a:	d01d      	beq.n	4e98 <bt_att_create_pdu+0x4c>
		return NULL;
	}

	if (len + sizeof(op) > att->chan.tx.mtu) {
    4e5c:	3356      	adds	r3, #86	; 0x56
    4e5e:	881b      	ldrh	r3, [r3, #0]
    4e60:	1c62      	adds	r2, r4, #1
    4e62:	429a      	cmp	r2, r3
    4e64:	d90d      	bls.n	4e82 <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    4e66:	490d      	ldr	r1, [pc, #52]	; (4e9c <bt_att_create_pdu+0x50>)
    4e68:	9301      	str	r3, [sp, #4]
    4e6a:	4b0d      	ldr	r3, [pc, #52]	; (4ea0 <bt_att_create_pdu+0x54>)
    4e6c:	9103      	str	r1, [sp, #12]
    4e6e:	9202      	str	r2, [sp, #8]
    4e70:	9300      	str	r3, [sp, #0]
    4e72:	4a0c      	ldr	r2, [pc, #48]	; (4ea4 <bt_att_create_pdu+0x58>)
    4e74:	4b0c      	ldr	r3, [pc, #48]	; (4ea8 <bt_att_create_pdu+0x5c>)
    4e76:	490d      	ldr	r1, [pc, #52]	; (4eac <bt_att_create_pdu+0x60>)
    4e78:	480d      	ldr	r0, [pc, #52]	; (4eb0 <bt_att_create_pdu+0x64>)
    4e7a:	f7fc fd0b 	bl	1894 <printk>
			att->chan.tx.mtu, len + sizeof(op));
		return NULL;
    4e7e:	2000      	movs	r0, #0
    4e80:	e00a      	b.n	4e98 <bt_att_create_pdu+0x4c>
	}

	buf = bt_l2cap_create_pdu(NULL, 0);
    4e82:	2100      	movs	r1, #0
    4e84:	0008      	movs	r0, r1
    4e86:	f7ff f990 	bl	41aa <bt_l2cap_create_pdu>

	hdr = net_buf_add(buf, sizeof(*hdr));
    4e8a:	2101      	movs	r1, #1
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
			att->chan.tx.mtu, len + sizeof(op));
		return NULL;
	}

	buf = bt_l2cap_create_pdu(NULL, 0);
    4e8c:	0004      	movs	r4, r0

	hdr = net_buf_add(buf, sizeof(*hdr));
    4e8e:	3008      	adds	r0, #8
    4e90:	f00b fb98 	bl	105c4 <net_buf_simple_add>
	hdr->code = op;
    4e94:	7005      	strb	r5, [r0, #0]

	return buf;
    4e96:	0020      	movs	r0, r4
}
    4e98:	b005      	add	sp, #20
    4e9a:	bd30      	pop	{r4, r5, pc}
    4e9c:	0001241d 	.word	0x0001241d
    4ea0:	00012422 	.word	0x00012422
    4ea4:	000123dc 	.word	0x000123dc
    4ea8:	00014660 	.word	0x00014660
    4eac:	000123e3 	.word	0x000123e3
    4eb0:	00012f4a 	.word	0x00012f4a

00004eb4 <att_indicate>:

	return 0;
}

static u8_t att_indicate(struct bt_att *att, struct net_buf *buf)
{
    4eb4:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    4eb6:	3108      	adds	r1, #8
	return 0;
}

static u8_t att_indicate(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    4eb8:	6804      	ldr	r4, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    4eba:	0008      	movs	r0, r1
    4ebc:	f00b fbb3 	bl	10626 <net_buf_simple_pull_le16>

	BT_DBG("handle 0x%04x", handle);

	bt_gatt_notification(conn, handle, buf->data, buf->len);

	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    4ec0:	2200      	movs	r2, #0
    4ec2:	211e      	movs	r1, #30
    4ec4:	0020      	movs	r0, r4
    4ec6:	f7ff ffc1 	bl	4e4c <bt_att_create_pdu>
    4eca:	1e02      	subs	r2, r0, #0
	if (!buf) {
    4ecc:	d004      	beq.n	4ed8 <att_indicate+0x24>
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    4ece:	4b03      	ldr	r3, [pc, #12]	; (4edc <att_indicate+0x28>)
    4ed0:	2104      	movs	r1, #4
    4ed2:	0020      	movs	r0, r4
    4ed4:	f7ff f96e 	bl	41b4 <bt_l2cap_send_cb>

	return 0;
}
    4ed8:	2000      	movs	r0, #0
    4eda:	bd10      	pop	{r4, pc}
    4edc:	000049f7 	.word	0x000049f7

00004ee0 <att_mtu_req>:

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
    4ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    4ee2:	688b      	ldr	r3, [r1, #8]

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
    4ee4:	0004      	movs	r4, r0
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    4ee6:	781a      	ldrb	r2, [r3, #0]
    4ee8:	785b      	ldrb	r3, [r3, #1]

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
    4eea:	2004      	movs	r0, #4
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    4eec:	021b      	lsls	r3, r3, #8

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    4eee:	4313      	orrs	r3, r2
    4ef0:	2b16      	cmp	r3, #22
    4ef2:	d91c      	bls.n	4f2e <att_mtu_req+0x4e>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    4ef4:	6827      	ldr	r7, [r4, #0]
	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    4ef6:	2202      	movs	r2, #2
    4ef8:	2103      	movs	r1, #3
    4efa:	0038      	movs	r0, r7
    4efc:	f7ff ffa6 	bl	4e4c <bt_att_create_pdu>
    4f00:	0006      	movs	r6, r0
	if (!pdu) {
		return BT_ATT_ERR_UNLIKELY;
    4f02:	200e      	movs	r0, #14
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
	if (!pdu) {
    4f04:	2e00      	cmp	r6, #0
    4f06:	d012      	beq.n	4f2e <att_mtu_req+0x4e>

	mtu_server = BT_ATT_MTU;

	BT_DBG("Server MTU %u", mtu_server);

	rsp = net_buf_add(pdu, sizeof(*rsp));
    4f08:	0030      	movs	r0, r6
    4f0a:	2102      	movs	r1, #2
    4f0c:	3008      	adds	r0, #8
    4f0e:	f00b fb59 	bl	105c4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    4f12:	2517      	movs	r5, #23
    4f14:	2300      	movs	r3, #0
    4f16:	7005      	strb	r5, [r0, #0]
    4f18:	7043      	strb	r3, [r0, #1]

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    4f1a:	0032      	movs	r2, r6
    4f1c:	0038      	movs	r0, r7
    4f1e:	4b04      	ldr	r3, [pc, #16]	; (4f30 <att_mtu_req+0x50>)
    4f20:	2104      	movs	r1, #4
    4f22:	f7ff f947 	bl	41b4 <bt_l2cap_send_cb>
	 */
	att->chan.rx.mtu = min(mtu_client, mtu_server);
	att->chan.tx.mtu = att->chan.rx.mtu;

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
    4f26:	2000      	movs	r0, #0
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    4f28:	8765      	strh	r5, [r4, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    4f2a:	3456      	adds	r4, #86	; 0x56
    4f2c:	8025      	strh	r5, [r4, #0]

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
}
    4f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f30:	000049d9 	.word	0x000049d9

00004f34 <send_err_rsp.part.11>:
	default:
		return att_pdu_sent;
	}
}

static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    4f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f36:	000f      	movs	r7, r1
    4f38:	0014      	movs	r4, r2
	/* Ignore opcode 0x00 */
	if (!req) {
		return;
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    4f3a:	2101      	movs	r1, #1
    4f3c:	2204      	movs	r2, #4
	default:
		return att_pdu_sent;
	}
}

static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    4f3e:	0006      	movs	r6, r0
    4f40:	9301      	str	r3, [sp, #4]
	/* Ignore opcode 0x00 */
	if (!req) {
		return;
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    4f42:	f7ff ff83 	bl	4e4c <bt_att_create_pdu>
    4f46:	1e05      	subs	r5, r0, #0
	if (!buf) {
    4f48:	d010      	beq.n	4f6c <send_err_rsp.part.11+0x38>
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
    4f4a:	2104      	movs	r1, #4
    4f4c:	3008      	adds	r0, #8
    4f4e:	f00b fb39 	bl	105c4 <net_buf_simple_add>
	rsp->request = req;
	rsp->handle = sys_cpu_to_le16(handle);
	rsp->error = err;
    4f52:	466b      	mov	r3, sp
    4f54:	791b      	ldrb	r3, [r3, #4]
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
	rsp->request = req;
	rsp->handle = sys_cpu_to_le16(handle);
    4f56:	7044      	strb	r4, [r0, #1]
    4f58:	0a24      	lsrs	r4, r4, #8
	rsp->error = err;
    4f5a:	70c3      	strb	r3, [r0, #3]
	if (!buf) {
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
	rsp->request = req;
    4f5c:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    4f5e:	7084      	strb	r4, [r0, #2]
	rsp->error = err;

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    4f60:	4b03      	ldr	r3, [pc, #12]	; (4f70 <send_err_rsp.part.11+0x3c>)
    4f62:	002a      	movs	r2, r5
    4f64:	2104      	movs	r1, #4
    4f66:	0030      	movs	r0, r6
    4f68:	f7ff f924 	bl	41b4 <bt_l2cap_send_cb>
}
    4f6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4f6e:	46c0      	nop			; (mov r8, r8)
    4f70:	000049d9 	.word	0x000049d9

00004f74 <bt_att_recv>:

	return ATT_UNKNOWN;
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    4f74:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
	const struct att_handler *handler;
	u8_t err;
	size_t i;

	if (buf->len < sizeof(*hdr)) {
    4f76:	898b      	ldrh	r3, [r1, #12]

	return ATT_UNKNOWN;
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    4f78:	b087      	sub	sp, #28
    4f7a:	0005      	movs	r5, r0
    4f7c:	000e      	movs	r6, r1
	struct bt_att_hdr *hdr = (void *)buf->data;
	const struct att_handler *handler;
	u8_t err;
	size_t i;

	if (buf->len < sizeof(*hdr)) {
    4f7e:	2b00      	cmp	r3, #0
    4f80:	d108      	bne.n	4f94 <bt_att_recv+0x20>
		BT_ERR("Too small ATT PDU received");
    4f82:	4b44      	ldr	r3, [pc, #272]	; (5094 <bt_att_recv+0x120>)
    4f84:	4a44      	ldr	r2, [pc, #272]	; (5098 <bt_att_recv+0x124>)
    4f86:	9301      	str	r3, [sp, #4]
    4f88:	4b44      	ldr	r3, [pc, #272]	; (509c <bt_att_recv+0x128>)
    4f8a:	4945      	ldr	r1, [pc, #276]	; (50a0 <bt_att_recv+0x12c>)
    4f8c:	9300      	str	r3, [sp, #0]
    4f8e:	4845      	ldr	r0, [pc, #276]	; (50a4 <bt_att_recv+0x130>)
    4f90:	4b45      	ldr	r3, [pc, #276]	; (50a8 <bt_att_recv+0x134>)
    4f92:	e038      	b.n	5006 <bt_att_recv+0x92>
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    4f94:	0030      	movs	r0, r6
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_att_hdr *hdr = (void *)buf->data;
    4f96:	688f      	ldr	r7, [r1, #8]
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    4f98:	3008      	adds	r0, #8
    4f9a:	2101      	movs	r1, #1
    4f9c:	f00b fb33 	bl	10606 <net_buf_simple_pull>

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4fa0:	2200      	movs	r2, #0
		if (hdr->code == handlers[i].op) {
    4fa2:	7839      	ldrb	r1, [r7, #0]
    4fa4:	4b41      	ldr	r3, [pc, #260]	; (50ac <bt_att_recv+0x138>)
    4fa6:	00d0      	lsls	r0, r2, #3
    4fa8:	9005      	str	r0, [sp, #20]
    4faa:	5cc0      	ldrb	r0, [r0, r3]
    4fac:	4288      	cmp	r0, r1
    4fae:	d105      	bne.n	4fbc <bt_att_recv+0x48>
		}
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
    4fb0:	9a05      	ldr	r2, [sp, #20]
    4fb2:	189b      	adds	r3, r3, r2
    4fb4:	789c      	ldrb	r4, [r3, #2]
    4fb6:	2c01      	cmp	r4, #1
    4fb8:	d114      	bne.n	4fe4 <bt_att_recv+0x70>
    4fba:	e003      	b.n	4fc4 <bt_att_recv+0x50>

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4fbc:	3201      	adds	r2, #1
    4fbe:	2a1b      	cmp	r2, #27
    4fc0:	d1f1      	bne.n	4fa6 <bt_att_recv+0x32>
    4fc2:	e04d      	b.n	5060 <bt_att_recv+0xec>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4fc4:	0028      	movs	r0, r5
    4fc6:	0021      	movs	r1, r4
    4fc8:	3090      	adds	r0, #144	; 0x90
    4fca:	f00b fdcc 	bl	10b66 <atomic_or>
		}
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
    4fce:	4220      	tst	r0, r4
    4fd0:	d01c      	beq.n	500c <bt_att_recv+0x98>
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
			BT_WARN("Ignoring unexpected request");
    4fd2:	4b30      	ldr	r3, [pc, #192]	; (5094 <bt_att_recv+0x120>)
    4fd4:	4a36      	ldr	r2, [pc, #216]	; (50b0 <bt_att_recv+0x13c>)
    4fd6:	9301      	str	r3, [sp, #4]
    4fd8:	4b36      	ldr	r3, [pc, #216]	; (50b4 <bt_att_recv+0x140>)
    4fda:	4931      	ldr	r1, [pc, #196]	; (50a0 <bt_att_recv+0x12c>)
    4fdc:	9300      	str	r3, [sp, #0]
    4fde:	4836      	ldr	r0, [pc, #216]	; (50b8 <bt_att_recv+0x144>)
    4fe0:	4b31      	ldr	r3, [pc, #196]	; (50a8 <bt_att_recv+0x134>)
    4fe2:	e010      	b.n	5006 <bt_att_recv+0x92>
			return;
		} else if (handler->type == ATT_INDICATION &&
    4fe4:	2c05      	cmp	r4, #5
    4fe6:	d111      	bne.n	500c <bt_att_recv+0x98>
    4fe8:	0028      	movs	r0, r5
    4fea:	2102      	movs	r1, #2
    4fec:	3090      	adds	r0, #144	; 0x90
    4fee:	f00b fdba 	bl	10b66 <atomic_or>
    4ff2:	0783      	lsls	r3, r0, #30
    4ff4:	d50a      	bpl.n	500c <bt_att_recv+0x98>
			   atomic_test_and_set_bit(att->flags,
						   ATT_PENDING_CFM)) {
			BT_WARN("Ignoring unexpected indication");
    4ff6:	4b27      	ldr	r3, [pc, #156]	; (5094 <bt_att_recv+0x120>)
    4ff8:	4a2d      	ldr	r2, [pc, #180]	; (50b0 <bt_att_recv+0x13c>)
    4ffa:	9301      	str	r3, [sp, #4]
    4ffc:	4b2d      	ldr	r3, [pc, #180]	; (50b4 <bt_att_recv+0x140>)
    4ffe:	4928      	ldr	r1, [pc, #160]	; (50a0 <bt_att_recv+0x12c>)
    5000:	9300      	str	r3, [sp, #0]
    5002:	482e      	ldr	r0, [pc, #184]	; (50bc <bt_att_recv+0x148>)
    5004:	4b28      	ldr	r3, [pc, #160]	; (50a8 <bt_att_recv+0x134>)
    5006:	f7fc fc45 	bl	1894 <printk>
			return;
    500a:	e040      	b.n	508e <bt_att_recv+0x11a>
		}
	}

	if (buf->len < handler->expect_len) {
    500c:	4927      	ldr	r1, [pc, #156]	; (50ac <bt_att_recv+0x138>)
    500e:	9b05      	ldr	r3, [sp, #20]
    5010:	468c      	mov	ip, r1
    5012:	4463      	add	r3, ip
    5014:	89b2      	ldrh	r2, [r6, #12]
    5016:	7859      	ldrb	r1, [r3, #1]
    5018:	4291      	cmp	r1, r2
    501a:	d910      	bls.n	503e <bt_att_recv+0xca>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    501c:	4b1d      	ldr	r3, [pc, #116]	; (5094 <bt_att_recv+0x120>)
    501e:	4920      	ldr	r1, [pc, #128]	; (50a0 <bt_att_recv+0x12c>)
    5020:	9303      	str	r3, [sp, #12]
    5022:	783b      	ldrb	r3, [r7, #0]
    5024:	4826      	ldr	r0, [pc, #152]	; (50c0 <bt_att_recv+0x14c>)
    5026:	9302      	str	r3, [sp, #8]
    5028:	4b1c      	ldr	r3, [pc, #112]	; (509c <bt_att_recv+0x128>)
    502a:	9201      	str	r2, [sp, #4]
    502c:	9300      	str	r3, [sp, #0]
    502e:	4a1a      	ldr	r2, [pc, #104]	; (5098 <bt_att_recv+0x124>)
    5030:	4b1d      	ldr	r3, [pc, #116]	; (50a8 <bt_att_recv+0x134>)
    5032:	f7fc fc2f 	bl	1894 <printk>
		err = BT_ATT_ERR_INVALID_PDU;
	} else {
		err = handler->func(att, buf);
	}

	if (handler->type == ATT_REQUEST && err) {
    5036:	2c01      	cmp	r4, #1
    5038:	d129      	bne.n	508e <bt_att_recv+0x11a>
		}
	}

	if (buf->len < handler->expect_len) {
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
		err = BT_ATT_ERR_INVALID_PDU;
    503a:	2304      	movs	r3, #4
    503c:	e008      	b.n	5050 <bt_att_recv+0xdc>
	} else {
		err = handler->func(att, buf);
    503e:	685b      	ldr	r3, [r3, #4]
    5040:	0031      	movs	r1, r6
    5042:	0028      	movs	r0, r5
    5044:	4798      	blx	r3
    5046:	0003      	movs	r3, r0
	}

	if (handler->type == ATT_REQUEST && err) {
    5048:	2c01      	cmp	r4, #1
    504a:	d120      	bne.n	508e <bt_att_recv+0x11a>
    504c:	2800      	cmp	r0, #0
    504e:	d01e      	beq.n	508e <bt_att_recv+0x11a>
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5050:	7839      	ldrb	r1, [r7, #0]
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    5052:	2900      	cmp	r1, #0
    5054:	d01b      	beq.n	508e <bt_att_recv+0x11a>
    5056:	2200      	movs	r2, #0
    5058:	6828      	ldr	r0, [r5, #0]
    505a:	f7ff ff6b 	bl	4f34 <send_err_rsp.part.11>
    505e:	e016      	b.n	508e <bt_att_recv+0x11a>
			break;
		}
	}

	if (!handler) {
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5060:	4b0c      	ldr	r3, [pc, #48]	; (5094 <bt_att_recv+0x120>)
    5062:	9101      	str	r1, [sp, #4]
    5064:	9302      	str	r3, [sp, #8]
    5066:	4b13      	ldr	r3, [pc, #76]	; (50b4 <bt_att_recv+0x140>)
    5068:	4a11      	ldr	r2, [pc, #68]	; (50b0 <bt_att_recv+0x13c>)
    506a:	9300      	str	r3, [sp, #0]
    506c:	490c      	ldr	r1, [pc, #48]	; (50a0 <bt_att_recv+0x12c>)
    506e:	4b0e      	ldr	r3, [pc, #56]	; (50a8 <bt_att_recv+0x134>)
    5070:	4814      	ldr	r0, [pc, #80]	; (50c4 <bt_att_recv+0x150>)
    5072:	f7fc fc0f 	bl	1894 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5076:	783c      	ldrb	r4, [r7, #0]
    5078:	0020      	movs	r0, r4
    507a:	f7ff f9f3 	bl	4464 <att_op_get_type>
    507e:	2800      	cmp	r0, #0
    5080:	d005      	beq.n	508e <bt_att_recv+0x11a>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    5082:	2c00      	cmp	r4, #0
    5084:	d003      	beq.n	508e <bt_att_recv+0x11a>
    5086:	2306      	movs	r3, #6
    5088:	2200      	movs	r2, #0
    508a:	0021      	movs	r1, r4
    508c:	e7e4      	b.n	5058 <bt_att_recv+0xe4>

	if (handler->type == ATT_REQUEST && err) {
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}
    508e:	b007      	add	sp, #28
    5090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	0001241d 	.word	0x0001241d
    5098:	0001246d 	.word	0x0001246d
    509c:	000124a8 	.word	0x000124a8
    50a0:	000123e3 	.word	0x000123e3
    50a4:	00012f7f 	.word	0x00012f7f
    50a8:	00014654 	.word	0x00014654
    50ac:	00014560 	.word	0x00014560
    50b0:	000123dc 	.word	0x000123dc
    50b4:	00012422 	.word	0x00012422
    50b8:	00012faa 	.word	0x00012faa
    50bc:	00012fd6 	.word	0x00012fd6
    50c0:	00013005 	.word	0x00013005
    50c4:	00013034 	.word	0x00013034

000050c8 <att_write_rsp.part.12>:
	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    50c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ca:	b08b      	sub	sp, #44	; 0x2c
    50cc:	9301      	str	r3, [sp, #4]
    50ce:	ab10      	add	r3, sp, #64	; 0x40
    50d0:	881b      	ldrh	r3, [r3, #0]
    50d2:	0017      	movs	r7, r2
    50d4:	9302      	str	r3, [sp, #8]
    50d6:	ab12      	add	r3, sp, #72	; 0x48
    50d8:	781b      	ldrb	r3, [r3, #0]
    50da:	0005      	movs	r5, r0
    50dc:	000e      	movs	r6, r1

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    50de:	2218      	movs	r2, #24
    50e0:	2100      	movs	r1, #0
    50e2:	a804      	add	r0, sp, #16
	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    50e4:	9303      	str	r3, [sp, #12]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    50e6:	f7fb fddc 	bl	ca2 <memset>

	/* Only allocate buf if required to respond */
	if (rsp) {
    50ea:	2f00      	cmp	r7, #0
    50ec:	d119      	bne.n	5122 <att_write_rsp.part.12+0x5a>
		}
	}

	data.conn = conn;
	data.op = op;
	data.offset = offset;
    50ee:	466a      	mov	r2, sp
    50f0:	8912      	ldrh	r2, [r2, #8]
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
	data.op = op;
    50f2:	ab04      	add	r3, sp, #16
	data.offset = offset;
    50f4:	825a      	strh	r2, [r3, #18]
	data.value = value;
	data.len = len;
    50f6:	466a      	mov	r2, sp
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
	data.op = op;
    50f8:	721e      	strb	r6, [r3, #8]
	data.offset = offset;
	data.value = value;
    50fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
	data.len = len;
    50fc:	7b12      	ldrb	r2, [r2, #12]
	}

	data.conn = conn;
	data.op = op;
	data.offset = offset;
	data.value = value;
    50fe:	9307      	str	r3, [sp, #28]
	data.len = len;
    5100:	ab04      	add	r3, sp, #16
    5102:	741a      	strb	r2, [r3, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5104:	2301      	movs	r3, #1

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5106:	9901      	ldr	r1, [sp, #4]
	data.conn = conn;
	data.op = op;
	data.offset = offset;
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5108:	aa04      	add	r2, sp, #16
    510a:	7513      	strb	r3, [r2, #20]

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    510c:	0008      	movs	r0, r1
    510e:	0013      	movs	r3, r2
    5110:	4a19      	ldr	r2, [pc, #100]	; (5178 <att_write_rsp.part.12+0xb0>)
		if (!data.buf) {
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
    5112:	9504      	str	r5, [sp, #16]
	data.offset = offset;
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5114:	f000 ff12 	bl	5f3c <bt_gatt_foreach_attr>

	if (data.err) {
    5118:	ab04      	add	r3, sp, #16
    511a:	7d1c      	ldrb	r4, [r3, #20]
    511c:	2c00      	cmp	r4, #0
    511e:	d10a      	bne.n	5136 <att_write_rsp.part.12+0x6e>
    5120:	e01e      	b.n	5160 <att_write_rsp.part.12+0x98>

	memset(&data, 0, sizeof(data));

	/* Only allocate buf if required to respond */
	if (rsp) {
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    5122:	2200      	movs	r2, #0
    5124:	0039      	movs	r1, r7
    5126:	0028      	movs	r0, r5
    5128:	f7ff fe90 	bl	4e4c <bt_att_create_pdu>
		if (!data.buf) {
			return BT_ATT_ERR_UNLIKELY;
    512c:	240e      	movs	r4, #14

	memset(&data, 0, sizeof(data));

	/* Only allocate buf if required to respond */
	if (rsp) {
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    512e:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
    5130:	2800      	cmp	r0, #0
    5132:	d1dc      	bne.n	50ee <att_write_rsp.part.12+0x26>
    5134:	e01c      	b.n	5170 <att_write_rsp.part.12+0xa8>

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);

	if (data.err) {
		/* In case of error discard data and respond with an error */
		if (rsp) {
    5136:	2f00      	cmp	r7, #0
    5138:	d00d      	beq.n	5156 <att_write_rsp.part.12+0x8e>
			net_buf_unref(data.buf);
    513a:	9805      	ldr	r0, [sp, #20]
    513c:	f00b fa20 	bl	10580 <net_buf_unref>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    5140:	2e00      	cmp	r6, #0
    5142:	d101      	bne.n	5148 <att_write_rsp.part.12+0x80>
		if (rsp) {
			net_buf_unref(data.buf);
			/* Respond here since handle is set */
			send_err_rsp(conn, op, handle, data.err);
		}
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5144:	2400      	movs	r4, #0
    5146:	e013      	b.n	5170 <att_write_rsp.part.12+0xa8>
    5148:	ab04      	add	r3, sp, #16
    514a:	7d1b      	ldrb	r3, [r3, #20]
    514c:	9a01      	ldr	r2, [sp, #4]
    514e:	0031      	movs	r1, r6
    5150:	0028      	movs	r0, r5
    5152:	f7ff feef 	bl	4f34 <send_err_rsp.part.11>
    5156:	2e18      	cmp	r6, #24
    5158:	d1f4      	bne.n	5144 <att_write_rsp.part.12+0x7c>
    515a:	ab04      	add	r3, sp, #16
    515c:	7d1c      	ldrb	r4, [r3, #20]
    515e:	e007      	b.n	5170 <att_write_rsp.part.12+0xa8>
	}

	if (data.buf) {
    5160:	9a05      	ldr	r2, [sp, #20]
    5162:	2a00      	cmp	r2, #0
    5164:	d0ee      	beq.n	5144 <att_write_rsp.part.12+0x7c>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    5166:	4b05      	ldr	r3, [pc, #20]	; (517c <att_write_rsp.part.12+0xb4>)
    5168:	2104      	movs	r1, #4
    516a:	0028      	movs	r0, r5
    516c:	f7ff f822 	bl	41b4 <bt_l2cap_send_cb>
				 att_rsp_sent);
	}

	return 0;
}
    5170:	0020      	movs	r0, r4
    5172:	b00b      	add	sp, #44	; 0x2c
    5174:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5176:	46c0      	nop			; (mov r8, r8)
    5178:	00004a15 	.word	0x00004a15
    517c:	000049d9 	.word	0x000049d9

00005180 <att_write_cmd>:
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    5180:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5182:	6805      	ldr	r5, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    5184:	0008      	movs	r0, r1
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    5186:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    5188:	3008      	adds	r0, #8
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    518a:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    518c:	f00b fa4b 	bl	10626 <net_buf_simple_pull_le16>
    5190:	0003      	movs	r3, r0
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    5192:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    5194:	2b00      	cmp	r3, #0
    5196:	d009      	beq.n	51ac <att_write_cmd+0x2c>
    5198:	2100      	movs	r1, #0
    519a:	7b22      	ldrb	r2, [r4, #12]
    519c:	9100      	str	r1, [sp, #0]
    519e:	9202      	str	r2, [sp, #8]
    51a0:	68a2      	ldr	r2, [r4, #8]
    51a2:	0028      	movs	r0, r5
    51a4:	9201      	str	r2, [sp, #4]
    51a6:	000a      	movs	r2, r1
    51a8:	f7ff ff8e 	bl	50c8 <att_write_rsp.part.12>
	handle = net_buf_pull_le16(buf);

	BT_DBG("handle 0x%04x", handle);

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}
    51ac:	b005      	add	sp, #20
    51ae:	bd30      	pop	{r4, r5, pc}

000051b0 <att_write_req>:

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    51b0:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    51b2:	6805      	ldr	r5, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    51b4:	0008      	movs	r0, r1

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    51b6:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    51b8:	3008      	adds	r0, #8

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    51ba:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    51bc:	f00b fa33 	bl	10626 <net_buf_simple_pull_le16>
    51c0:	0003      	movs	r3, r0
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    51c2:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    51c4:	2b00      	cmp	r3, #0
    51c6:	d00a      	beq.n	51de <att_write_req+0x2e>
    51c8:	7b22      	ldrb	r2, [r4, #12]
    51ca:	2112      	movs	r1, #18
    51cc:	9202      	str	r2, [sp, #8]
    51ce:	68a2      	ldr	r2, [r4, #8]
    51d0:	0028      	movs	r0, r5
    51d2:	9201      	str	r2, [sp, #4]
    51d4:	2200      	movs	r2, #0
    51d6:	9200      	str	r2, [sp, #0]
    51d8:	3213      	adds	r2, #19
    51da:	f7ff ff75 	bl	50c8 <att_write_rsp.part.12>

	BT_DBG("handle 0x%04x", handle);

	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
			     handle, 0, buf->data, buf->len);
}
    51de:	b005      	add	sp, #20
    51e0:	bd30      	pop	{r4, r5, pc}
	...

000051e4 <att_signed_write_cmd>:

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    51e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	handle = sys_le16_to_cpu(req->handle);

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    51e6:	000e      	movs	r6, r1

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    51e8:	000c      	movs	r4, r1
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    51ea:	688b      	ldr	r3, [r1, #8]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    51ec:	6807      	ldr	r7, [r0, #0]
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    51ee:	781a      	ldrb	r2, [r3, #0]
    51f0:	785b      	ldrb	r3, [r3, #1]

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    51f2:	3608      	adds	r6, #8
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    51f4:	021b      	lsls	r3, r3, #8

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    51f6:	b087      	sub	sp, #28
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    51f8:	4313      	orrs	r3, r2

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    51fa:	2101      	movs	r1, #1
    51fc:	0030      	movs	r0, r6
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    51fe:	9305      	str	r3, [sp, #20]

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5200:	f00b f9f9 	bl	105f6 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    5204:	0021      	movs	r1, r4
    5206:	0038      	movs	r0, r7
    5208:	f000 fff9 	bl	61fe <bt_smp_sign_verify>
    520c:	1e05      	subs	r5, r0, #0
	if (err) {
    520e:	d00b      	beq.n	5228 <att_signed_write_cmd+0x44>
		BT_ERR("Error verifying data");
    5210:	4b13      	ldr	r3, [pc, #76]	; (5260 <att_signed_write_cmd+0x7c>)
    5212:	4a14      	ldr	r2, [pc, #80]	; (5264 <att_signed_write_cmd+0x80>)
    5214:	9301      	str	r3, [sp, #4]
    5216:	4b14      	ldr	r3, [pc, #80]	; (5268 <att_signed_write_cmd+0x84>)
    5218:	4914      	ldr	r1, [pc, #80]	; (526c <att_signed_write_cmd+0x88>)
    521a:	9300      	str	r3, [sp, #0]
    521c:	4814      	ldr	r0, [pc, #80]	; (5270 <att_signed_write_cmd+0x8c>)
    521e:	4b15      	ldr	r3, [pc, #84]	; (5274 <att_signed_write_cmd+0x90>)
    5220:	f7fc fb38 	bl	1894 <printk>
    5224:	2000      	movs	r0, #0
    5226:	e018      	b.n	525a <att_signed_write_cmd+0x76>
		/* No response for this command */
		return 0;
	}

	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    5228:	2101      	movs	r1, #1
    522a:	0030      	movs	r0, r6
    522c:	f00b f9eb 	bl	10606 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    5230:	2102      	movs	r1, #2
    5232:	0030      	movs	r0, r6
    5234:	f00b f9e7 	bl	10606 <net_buf_simple_pull>
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    5238:	9b05      	ldr	r3, [sp, #20]
		return BT_ATT_ERR_INVALID_HANDLE;
    523a:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    523c:	2b00      	cmp	r3, #0
    523e:	d00c      	beq.n	525a <att_signed_write_cmd+0x76>
    5240:	89a3      	ldrh	r3, [r4, #12]
    5242:	9500      	str	r5, [sp, #0]
    5244:	3b0c      	subs	r3, #12
    5246:	b2db      	uxtb	r3, r3
    5248:	9302      	str	r3, [sp, #8]
    524a:	68a3      	ldr	r3, [r4, #8]
    524c:	002a      	movs	r2, r5
    524e:	9301      	str	r3, [sp, #4]
    5250:	0029      	movs	r1, r5
    5252:	9b05      	ldr	r3, [sp, #20]
    5254:	0038      	movs	r0, r7
    5256:	f7ff ff37 	bl	50c8 <att_write_rsp.part.12>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
	net_buf_pull(buf, sizeof(*req));

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
			     buf->len - sizeof(struct bt_att_signature));
}
    525a:	b007      	add	sp, #28
    525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    525e:	46c0      	nop			; (mov r8, r8)
    5260:	0001241d 	.word	0x0001241d
    5264:	0001246d 	.word	0x0001246d
    5268:	000124a8 	.word	0x000124a8
    526c:	000123e3 	.word	0x000123e3
    5270:	0001305c 	.word	0x0001305c
    5274:	0001453b 	.word	0x0001453b

00005278 <att_exec_write_req>:
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */


static u8_t att_exec_write_req(struct bt_att *att, struct net_buf *buf)
{
    5278:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
static u8_t att_exec_write_rsp(struct bt_att *att, u8_t flags)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct net_buf *buf;
	u8_t err = 0;
    527a:	2500      	movs	r5, #0

	req = (void *)buf->data;

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
    527c:	688b      	ldr	r3, [r1, #8]
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */


static u8_t att_exec_write_req(struct bt_att *att, struct net_buf *buf)
{
    527e:	b089      	sub	sp, #36	; 0x24

	req = (void *)buf->data;

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
    5280:	781b      	ldrb	r3, [r3, #0]
}

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
static u8_t att_exec_write_rsp(struct bt_att *att, u8_t flags)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5282:	6806      	ldr	r6, [r0, #0]
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */


static u8_t att_exec_write_req(struct bt_att *att, struct net_buf *buf)
{
    5284:	9007      	str	r0, [sp, #28]

	req = (void *)buf->data;

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
    5286:	9306      	str	r3, [sp, #24]
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct net_buf *buf;
	u8_t err = 0;

	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    5288:	9807      	ldr	r0, [sp, #28]
    528a:	2100      	movs	r1, #0
    528c:	30dc      	adds	r0, #220	; 0xdc
    528e:	f00b f94b 	bl	10528 <net_buf_get>
    5292:	1e04      	subs	r4, r0, #0
    5294:	d028      	beq.n	52e8 <att_exec_write_req+0x70>

		BT_DBG("buf %p handle 0x%04x offset %u", buf, data->handle,
		       data->offset);

		/* Just discard the data if an error was set */
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    5296:	2d00      	cmp	r5, #0
    5298:	d122      	bne.n	52e0 <att_exec_write_req+0x68>
    529a:	9b06      	ldr	r3, [sp, #24]
    529c:	2b01      	cmp	r3, #1
    529e:	d11f      	bne.n	52e0 <att_exec_write_req+0x68>
    52a0:	2203      	movs	r2, #3
    52a2:	89e3      	ldrh	r3, [r4, #14]
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    52a4:	9f06      	ldr	r7, [sp, #24]
    52a6:	18e3      	adds	r3, r4, r3
    52a8:	3313      	adds	r3, #19
    52aa:	4393      	bics	r3, r2
    52ac:	9305      	str	r3, [sp, #20]
		BT_DBG("buf %p handle 0x%04x offset %u", buf, data->handle,
		       data->offset);

		/* Just discard the data if an error was set */
		if (!err && flags == BT_ATT_FLAG_EXEC) {
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    52ae:	881b      	ldrh	r3, [r3, #0]
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    52b0:	2b00      	cmp	r3, #0
    52b2:	d00d      	beq.n	52d0 <att_exec_write_req+0x58>
    52b4:	7b22      	ldrb	r2, [r4, #12]
    52b6:	2118      	movs	r1, #24
    52b8:	9202      	str	r2, [sp, #8]
    52ba:	68a2      	ldr	r2, [r4, #8]
    52bc:	0030      	movs	r0, r6
    52be:	9201      	str	r2, [sp, #4]
    52c0:	9a05      	ldr	r2, [sp, #20]
    52c2:	8852      	ldrh	r2, [r2, #2]
    52c4:	9200      	str	r2, [sp, #0]
    52c6:	002a      	movs	r2, r5
    52c8:	f7ff fefe 	bl	50c8 <att_write_rsp.part.12>
    52cc:	1e07      	subs	r7, r0, #0
		/* Just discard the data if an error was set */
		if (!err && flags == BT_ATT_FLAG_EXEC) {
			err = att_write_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ, 0,
					    data->handle, data->offset,
					    buf->data, buf->len);
			if (err) {
    52ce:	d007      	beq.n	52e0 <att_exec_write_req+0x68>
    52d0:	9b05      	ldr	r3, [sp, #20]
    52d2:	2118      	movs	r1, #24
    52d4:	881a      	ldrh	r2, [r3, #0]
    52d6:	0030      	movs	r0, r6
    52d8:	003b      	movs	r3, r7
    52da:	f7ff fe2b 	bl	4f34 <send_err_rsp.part.11>
    52de:	003d      	movs	r5, r7
				send_err_rsp(conn, BT_ATT_OP_EXEC_WRITE_REQ,
					     data->handle, err);
			}
		}

		net_buf_unref(buf);
    52e0:	0020      	movs	r0, r4
    52e2:	f00b f94d 	bl	10580 <net_buf_unref>
    52e6:	e7cf      	b.n	5288 <att_exec_write_req+0x10>
	}

	if (err) {
    52e8:	2d00      	cmp	r5, #0
    52ea:	d10e      	bne.n	530a <att_exec_write_req+0x92>
		return 0;
	}

	/* Generate response */
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    52ec:	0002      	movs	r2, r0
    52ee:	2119      	movs	r1, #25
    52f0:	0030      	movs	r0, r6
    52f2:	f7ff fdab 	bl	4e4c <bt_att_create_pdu>
    52f6:	0002      	movs	r2, r0
	if (!buf) {
		return BT_ATT_ERR_UNLIKELY;
    52f8:	200e      	movs	r0, #14
		return 0;
	}

	/* Generate response */
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
	if (!buf) {
    52fa:	2a00      	cmp	r2, #0
    52fc:	d005      	beq.n	530a <att_exec_write_req+0x92>
		return BT_ATT_ERR_UNLIKELY;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    52fe:	0030      	movs	r0, r6
    5300:	4b03      	ldr	r3, [pc, #12]	; (5310 <att_exec_write_req+0x98>)
    5302:	2104      	movs	r1, #4
    5304:	f7fe ff56 	bl	41b4 <bt_l2cap_send_cb>

	return 0;
    5308:	0028      	movs	r0, r5

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}
    530a:	b009      	add	sp, #36	; 0x24
    530c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    530e:	46c0      	nop			; (mov r8, r8)
    5310:	000049d9 	.word	0x000049d9

00005314 <att_prepare_write_req>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */

static u8_t att_prepare_write_req(struct bt_att *att, struct net_buf *buf)
{
    5314:	b5f0      	push	{r4, r5, r6, r7, lr}
    5316:	0007      	movs	r7, r0

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
	net_buf_pull(buf, sizeof(*req));
    5318:	0008      	movs	r0, r1
	return BT_ATT_ERR_NOT_SUPPORTED;
#else
	struct bt_att_prepare_write_req *req;
	u16_t handle, offset;

	req = (void *)buf->data;
    531a:	688b      	ldr	r3, [r1, #8]
	return 0;
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */

static u8_t att_prepare_write_req(struct bt_att *att, struct net_buf *buf)
{
    531c:	b08b      	sub	sp, #44	; 0x2c
	struct bt_att_prepare_write_req *req;
	u16_t handle, offset;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    531e:	785d      	ldrb	r5, [r3, #1]
    5320:	781a      	ldrb	r2, [r3, #0]
    5322:	022d      	lsls	r5, r5, #8
    5324:	4315      	orrs	r5, r2
	offset = sys_le16_to_cpu(req->offset);
    5326:	789a      	ldrb	r2, [r3, #2]
    5328:	78db      	ldrb	r3, [r3, #3]
	return 0;
}
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */

static u8_t att_prepare_write_req(struct bt_att *att, struct net_buf *buf)
{
    532a:	000c      	movs	r4, r1
	u16_t handle, offset;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
    532c:	021b      	lsls	r3, r3, #8
    532e:	4313      	orrs	r3, r2
	net_buf_pull(buf, sizeof(*req));
    5330:	3008      	adds	r0, #8
    5332:	2104      	movs	r1, #4
	u16_t handle, offset;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
    5334:	9301      	str	r3, [sp, #4]
	struct bt_conn *conn = att->chan.chan.conn;
	struct prep_data data;
	struct bt_att_prepare_write_rsp *rsp;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    5336:	2601      	movs	r6, #1

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
	net_buf_pull(buf, sizeof(*req));
    5338:	f00b f965 	bl	10606 <net_buf_simple_pull>
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct prep_data data;
	struct bt_att_prepare_write_rsp *rsp;

	if (!handle) {
    533c:	2d00      	cmp	r5, #0
    533e:	d054      	beq.n	53ea <att_prepare_write_req+0xd6>
	offset = sys_le16_to_cpu(req->offset);
	net_buf_pull(buf, sizeof(*req));

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    5340:	68a3      	ldr	r3, [r4, #8]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    5342:	2214      	movs	r2, #20
	offset = sys_le16_to_cpu(req->offset);
	net_buf_pull(buf, sizeof(*req));

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    5344:	9303      	str	r3, [sp, #12]
    5346:	7b23      	ldrb	r3, [r4, #12]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    5348:	ac05      	add	r4, sp, #20
	offset = sys_le16_to_cpu(req->offset);
	net_buf_pull(buf, sizeof(*req));

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
    534a:	9302      	str	r3, [sp, #8]
}

static u8_t att_prep_write_rsp(struct bt_att *att, u16_t handle, u16_t offset,
			       const void *value, u8_t len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    534c:	683b      	ldr	r3, [r7, #0]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    534e:	2100      	movs	r1, #0
    5350:	0020      	movs	r0, r4
}

static u8_t att_prep_write_rsp(struct bt_att *att, u16_t handle, u16_t offset,
			       const void *value, u8_t len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5352:	9300      	str	r3, [sp, #0]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    5354:	f7fb fca5 	bl	ca2 <memset>

	data.conn = conn;
    5358:	9b00      	ldr	r3, [sp, #0]
	data.offset = offset;
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    535a:	4a25      	ldr	r2, [pc, #148]	; (53f0 <att_prepare_write_req+0xdc>)
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));

	data.conn = conn;
    535c:	9305      	str	r3, [sp, #20]
	data.offset = offset;
    535e:	466b      	mov	r3, sp
    5360:	889b      	ldrh	r3, [r3, #4]
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    5362:	0029      	movs	r1, r5
	}

	memset(&data, 0, sizeof(data));

	data.conn = conn;
	data.offset = offset;
    5364:	81e3      	strh	r3, [r4, #14]
	data.value = value;
    5366:	9b03      	ldr	r3, [sp, #12]
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    5368:	0028      	movs	r0, r5

	memset(&data, 0, sizeof(data));

	data.conn = conn;
	data.offset = offset;
	data.value = value;
    536a:	60a3      	str	r3, [r4, #8]
	data.len = len;
    536c:	466b      	mov	r3, sp
    536e:	7a1b      	ldrb	r3, [r3, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5370:	7426      	strb	r6, [r4, #16]
	memset(&data, 0, sizeof(data));

	data.conn = conn;
	data.offset = offset;
	data.value = value;
	data.len = len;
    5372:	7323      	strb	r3, [r4, #12]
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    5374:	0023      	movs	r3, r4
    5376:	f000 fde1 	bl	5f3c <bt_gatt_foreach_attr>

	if (data.err) {
    537a:	7c26      	ldrb	r6, [r4, #16]
    537c:	2e00      	cmp	r6, #0
    537e:	d007      	beq.n	5390 <att_prepare_write_req+0x7c>
    5380:	0033      	movs	r3, r6
    5382:	002a      	movs	r2, r5
    5384:	2116      	movs	r1, #22
    5386:	9800      	ldr	r0, [sp, #0]
    5388:	f7ff fdd4 	bl	4f34 <send_err_rsp.part.11>
		/* Respond here since handle is set */
		send_err_rsp(conn, BT_ATT_OP_PREPARE_WRITE_REQ, handle,
			     data.err);
		return 0;
    538c:	2600      	movs	r6, #0
    538e:	e02c      	b.n	53ea <att_prepare_write_req+0xd6>
	}

	BT_DBG("buf %p handle 0x%04x offset %u", data.buf, handle, offset);

	/* Store buffer in the outstanding queue */
	net_buf_put(&att->prep_queue, data.buf);
    5390:	0038      	movs	r0, r7
    5392:	6861      	ldr	r1, [r4, #4]
    5394:	30dc      	adds	r0, #220	; 0xdc
    5396:	f00b f8e4 	bl	10562 <net_buf_put>

	/* Generate response */
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    539a:	0032      	movs	r2, r6
    539c:	2117      	movs	r1, #23
    539e:	9800      	ldr	r0, [sp, #0]
    53a0:	f7ff fd54 	bl	4e4c <bt_att_create_pdu>
    53a4:	6060      	str	r0, [r4, #4]
	if (!data.buf) {
    53a6:	2800      	cmp	r0, #0
    53a8:	d01e      	beq.n	53e8 <att_prepare_write_req+0xd4>
		return BT_ATT_ERR_UNLIKELY;
	}

	rsp = net_buf_add(data.buf, sizeof(*rsp));
    53aa:	2104      	movs	r1, #4
    53ac:	3008      	adds	r0, #8
    53ae:	f00b f909 	bl	105c4 <net_buf_simple_add>
	rsp->handle = sys_cpu_to_le16(handle);
	rsp->offset = sys_cpu_to_le16(offset);
    53b2:	466b      	mov	r3, sp
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	rsp = net_buf_add(data.buf, sizeof(*rsp));
    53b4:	0007      	movs	r7, r0
	rsp->handle = sys_cpu_to_le16(handle);
	rsp->offset = sys_cpu_to_le16(offset);
    53b6:	791b      	ldrb	r3, [r3, #4]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	rsp = net_buf_add(data.buf, sizeof(*rsp));
	rsp->handle = sys_cpu_to_le16(handle);
    53b8:	7005      	strb	r5, [r0, #0]
	rsp->offset = sys_cpu_to_le16(offset);
    53ba:	7083      	strb	r3, [r0, #2]
    53bc:	9b01      	ldr	r3, [sp, #4]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	rsp = net_buf_add(data.buf, sizeof(*rsp));
	rsp->handle = sys_cpu_to_le16(handle);
    53be:	0a2d      	lsrs	r5, r5, #8
	rsp->offset = sys_cpu_to_le16(offset);
    53c0:	0a1b      	lsrs	r3, r3, #8
    53c2:	70c3      	strb	r3, [r0, #3]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	rsp = net_buf_add(data.buf, sizeof(*rsp));
	rsp->handle = sys_cpu_to_le16(handle);
    53c4:	7045      	strb	r5, [r0, #1]
	rsp->offset = sys_cpu_to_le16(offset);
	net_buf_add(data.buf, len);
    53c6:	6860      	ldr	r0, [r4, #4]
    53c8:	9902      	ldr	r1, [sp, #8]
    53ca:	3008      	adds	r0, #8
    53cc:	f00b f8fa 	bl	105c4 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    53d0:	9a02      	ldr	r2, [sp, #8]
    53d2:	9903      	ldr	r1, [sp, #12]
    53d4:	1d38      	adds	r0, r7, #4
    53d6:	f7fb fc3a 	bl	c4e <memcpy>

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    53da:	4b06      	ldr	r3, [pc, #24]	; (53f4 <att_prepare_write_req+0xe0>)
    53dc:	6862      	ldr	r2, [r4, #4]
    53de:	2104      	movs	r1, #4
    53e0:	9800      	ldr	r0, [sp, #0]
    53e2:	f7fe fee7 	bl	41b4 <bt_l2cap_send_cb>
    53e6:	e000      	b.n	53ea <att_prepare_write_req+0xd6>
	net_buf_put(&att->prep_queue, data.buf);

	/* Generate response */
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    53e8:	260e      	movs	r6, #14

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}
    53ea:	0030      	movs	r0, r6
    53ec:	b00b      	add	sp, #44	; 0x2c
    53ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53f0:	00004d51 	.word	0x00004d51
    53f4:	000049d9 	.word	0x000049d9

000053f8 <att_read_group_req>:

	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
    53f8:	b5f0      	push	{r4, r5, r6, r7, lr}
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    53fa:	898b      	ldrh	r3, [r1, #12]

	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
    53fc:	b08f      	sub	sp, #60	; 0x3c
    53fe:	0007      	movs	r7, r0
    5400:	000e      	movs	r6, r1
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5402:	2b06      	cmp	r3, #6
    5404:	d002      	beq.n	540c <att_read_group_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    5406:	2504      	movs	r5, #4
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5408:	2b14      	cmp	r3, #20
    540a:	d179      	bne.n	5500 <att_read_group_req+0x108>

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    540c:	0030      	movs	r0, r6
	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    540e:	683b      	ldr	r3, [r7, #0]

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5410:	2104      	movs	r1, #4
	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5412:	9301      	str	r3, [sp, #4]
	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    5414:	68b3      	ldr	r3, [r6, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5416:	3008      	adds	r0, #8
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    5418:	785c      	ldrb	r4, [r3, #1]
    541a:	781a      	ldrb	r2, [r3, #0]
    541c:	0224      	lsls	r4, r4, #8
    541e:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    5420:	789a      	ldrb	r2, [r3, #2]
    5422:	78db      	ldrb	r3, [r3, #3]
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
		return BT_ATT_ERR_UNLIKELY;
    5424:	250e      	movs	r5, #14
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    5426:	021b      	lsls	r3, r3, #8
    5428:	4313      	orrs	r3, r2
    542a:	9300      	str	r3, [sp, #0]
	net_buf_pull(buf, sizeof(*req));
    542c:	f00b f8eb 	bl	10606 <net_buf_simple_pull>

	if (!uuid_create(&u.uuid, buf)) {
    5430:	0031      	movs	r1, r6
    5432:	a804      	add	r0, sp, #16
    5434:	f7ff fa42 	bl	48bc <uuid_create>
    5438:	2800      	cmp	r0, #0
    543a:	d061      	beq.n	5500 <att_read_group_req+0x108>
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    543c:	2c00      	cmp	r4, #0
    543e:	d007      	beq.n	5450 <att_read_group_req+0x58>
    5440:	2500      	movs	r5, #0
    5442:	9b00      	ldr	r3, [sp, #0]
    5444:	42ab      	cmp	r3, r5
    5446:	d002      	beq.n	544e <att_read_group_req+0x56>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    5448:	429c      	cmp	r4, r3
    544a:	d801      	bhi.n	5450 <att_read_group_req+0x58>
    544c:	e008      	b.n	5460 <att_read_group_req+0x68>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    544e:	9c00      	ldr	r4, [sp, #0]
    5450:	2301      	movs	r3, #1
    5452:	0022      	movs	r2, r4
    5454:	2110      	movs	r1, #16
    5456:	9801      	ldr	r0, [sp, #4]
    5458:	f7ff fd6c 	bl	4f34 <send_err_rsp.part.11>
	       start_handle, end_handle, bt_uuid_str(&u.uuid));

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    545c:	2500      	movs	r5, #0
    545e:	e04f      	b.n	5500 <att_read_group_req+0x108>
	 * Read By Group Type Request. The "Primary Service" and "Secondary
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5460:	ab02      	add	r3, sp, #8
    5462:	701d      	strb	r5, [r3, #0]
    5464:	23a0      	movs	r3, #160	; 0xa0
    5466:	aa02      	add	r2, sp, #8
    5468:	019b      	lsls	r3, r3, #6
    546a:	0011      	movs	r1, r2
    546c:	a804      	add	r0, sp, #16
    546e:	8053      	strh	r3, [r2, #2]
    5470:	f7fc fac2 	bl	19f8 <bt_uuid_cmp>
    5474:	2800      	cmp	r0, #0
    5476:	d00d      	beq.n	5494 <att_read_group_req+0x9c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    5478:	4b23      	ldr	r3, [pc, #140]	; (5508 <att_read_group_req+0x110>)
    547a:	a903      	add	r1, sp, #12
    547c:	a804      	add	r0, sp, #16
    547e:	700d      	strb	r5, [r1, #0]
    5480:	804b      	strh	r3, [r1, #2]
    5482:	f7fc fab9 	bl	19f8 <bt_uuid_cmp>
	 * Read By Group Type Request. The "Primary Service" and "Secondary
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5486:	2800      	cmp	r0, #0
    5488:	d004      	beq.n	5494 <att_read_group_req+0x9c>
    548a:	2310      	movs	r3, #16
    548c:	0022      	movs	r2, r4
    548e:	0019      	movs	r1, r3
    5490:	9801      	ldr	r0, [sp, #4]
    5492:	e02b      	b.n	54ec <att_read_group_req+0xf4>
}

static u8_t att_read_group_rsp(struct bt_att *att, struct bt_uuid *uuid,
			       u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5494:	683e      	ldr	r6, [r7, #0]
	struct read_group_data data;

	memset(&data, 0, sizeof(data));
    5496:	2214      	movs	r2, #20
    5498:	2100      	movs	r1, #0
    549a:	a809      	add	r0, sp, #36	; 0x24
    549c:	f7fb fc01 	bl	ca2 <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    54a0:	2201      	movs	r2, #1
    54a2:	2111      	movs	r1, #17
    54a4:	0030      	movs	r0, r6
    54a6:	f7ff fcd1 	bl	4e4c <bt_att_create_pdu>
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    54aa:	250e      	movs	r5, #14
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_group_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    54ac:	900b      	str	r0, [sp, #44]	; 0x2c
				     sizeof(*data.rsp));
	if (!data.buf) {
    54ae:	2800      	cmp	r0, #0
    54b0:	d026      	beq.n	5500 <att_read_group_req+0x108>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
    54b2:	ab04      	add	r3, sp, #16
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    54b4:	2101      	movs	r1, #1
    54b6:	3008      	adds	r0, #8
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    54b8:	9709      	str	r7, [sp, #36]	; 0x24
	data.uuid = uuid;
    54ba:	930a      	str	r3, [sp, #40]	; 0x28
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
    54bc:	2700      	movs	r7, #0
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    54be:	f00b f881 	bl	105c4 <net_buf_simple_add>
	data.rsp->len = 0;
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    54c2:	ab09      	add	r3, sp, #36	; 0x24
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    54c4:	900c      	str	r0, [sp, #48]	; 0x30
	data.rsp->len = 0;
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    54c6:	4a11      	ldr	r2, [pc, #68]	; (550c <att_read_group_req+0x114>)
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
    54c8:	7007      	strb	r7, [r0, #0]
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    54ca:	9900      	ldr	r1, [sp, #0]
    54cc:	0020      	movs	r0, r4

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
	data.group = NULL;
    54ce:	970d      	str	r7, [sp, #52]	; 0x34

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    54d0:	f000 fd34 	bl	5f3c <bt_gatt_foreach_attr>

	if (!data.rsp->len) {
    54d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    54d6:	781d      	ldrb	r5, [r3, #0]
    54d8:	9300      	str	r3, [sp, #0]
    54da:	42bd      	cmp	r5, r7
    54dc:	d109      	bne.n	54f2 <att_read_group_req+0xfa>
		net_buf_unref(data.buf);
    54de:	980b      	ldr	r0, [sp, #44]	; 0x2c
    54e0:	f00b f84e 	bl	10580 <net_buf_unref>
    54e4:	230a      	movs	r3, #10
    54e6:	0022      	movs	r2, r4
    54e8:	2110      	movs	r1, #16
    54ea:	0030      	movs	r0, r6
    54ec:	f7ff fd22 	bl	4f34 <send_err_rsp.part.11>
    54f0:	e006      	b.n	5500 <att_read_group_req+0x108>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    54f2:	4b07      	ldr	r3, [pc, #28]	; (5510 <att_read_group_req+0x118>)
    54f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    54f6:	2104      	movs	r1, #4
    54f8:	0030      	movs	r0, r6
    54fa:	f7fe fe5b 	bl	41b4 <bt_l2cap_send_cb>

	return 0;
    54fe:	003d      	movs	r5, r7
			     BT_ATT_ERR_UNSUPPORTED_GROUP_TYPE);
		return 0;
	}

	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
}
    5500:	0028      	movs	r0, r5
    5502:	b00f      	add	sp, #60	; 0x3c
    5504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5506:	46c0      	nop			; (mov r8, r8)
    5508:	00002801 	.word	0x00002801
    550c:	000045e1 	.word	0x000045e1
    5510:	000049d9 	.word	0x000049d9

00005514 <att_read_mult_req>:
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    5514:	b5f0      	push	{r4, r5, r6, r7, lr}
    5516:	b087      	sub	sp, #28
	struct bt_conn *conn = att->chan.chan.conn;
    5518:	6805      	ldr	r5, [r0, #0]
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));
    551a:	ac01      	add	r4, sp, #4
    551c:	2214      	movs	r2, #20
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    551e:	0006      	movs	r6, r0
    5520:	000f      	movs	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));
    5522:	0020      	movs	r0, r4
    5524:	2100      	movs	r1, #0
    5526:	f7fb fbbc 	bl	ca2 <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    552a:	2200      	movs	r2, #0
    552c:	210f      	movs	r1, #15
    552e:	0028      	movs	r0, r5
    5530:	f7ff fc8c 	bl	4e4c <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    5534:	230e      	movs	r3, #14
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    5536:	60a0      	str	r0, [r4, #8]
	if (!data.buf) {
    5538:	2800      	cmp	r0, #0
    553a:	d023      	beq.n	5584 <att_read_mult_req+0x70>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    553c:	9601      	str	r6, [sp, #4]

	while (buf->len >= sizeof(u16_t)) {
    553e:	89bb      	ldrh	r3, [r7, #12]
    5540:	2b01      	cmp	r3, #1
    5542:	d918      	bls.n	5576 <att_read_mult_req+0x62>
		handle = net_buf_pull_le16(buf);
    5544:	0038      	movs	r0, r7
    5546:	3008      	adds	r0, #8
    5548:	f00b f86d 	bl	10626 <net_buf_simple_pull_le16>
		 * permitted on any of the Characteristic Values.
		 *
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    554c:	2301      	movs	r3, #1

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    554e:	4a0f      	ldr	r2, [pc, #60]	; (558c <att_read_mult_req+0x78>)
		 * permitted on any of the Characteristic Values.
		 *
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5550:	7423      	strb	r3, [r4, #16]

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5552:	0001      	movs	r1, r0
    5554:	0023      	movs	r3, r4
	}

	data.att = att;

	while (buf->len >= sizeof(u16_t)) {
		handle = net_buf_pull_le16(buf);
    5556:	0006      	movs	r6, r0
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5558:	f000 fcf0 	bl	5f3c <bt_gatt_foreach_attr>

		/* Stop reading in case of error */
		if (data.err) {
    555c:	7c23      	ldrb	r3, [r4, #16]
    555e:	2b00      	cmp	r3, #0
    5560:	d0ed      	beq.n	553e <att_read_mult_req+0x2a>
			net_buf_unref(data.buf);
    5562:	68a0      	ldr	r0, [r4, #8]
    5564:	f00b f80c 	bl	10580 <net_buf_unref>
    5568:	7c23      	ldrb	r3, [r4, #16]
    556a:	0032      	movs	r2, r6
    556c:	210e      	movs	r1, #14
    556e:	0028      	movs	r0, r5
    5570:	f7ff fce0 	bl	4f34 <send_err_rsp.part.11>
    5574:	e005      	b.n	5582 <att_read_mult_req+0x6e>
				     data.err);
			return 0;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5576:	4b06      	ldr	r3, [pc, #24]	; (5590 <att_read_mult_req+0x7c>)
    5578:	68a2      	ldr	r2, [r4, #8]
    557a:	2104      	movs	r1, #4
    557c:	0028      	movs	r0, r5
    557e:	f7fe fe19 	bl	41b4 <bt_l2cap_send_cb>

	return 0;
    5582:	2300      	movs	r3, #0
}
    5584:	0018      	movs	r0, r3
    5586:	b007      	add	sp, #28
    5588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    558a:	46c0      	nop			; (mov r8, r8)
    558c:	00004dd9 	.word	0x00004dd9
    5590:	000049d9 	.word	0x000049d9

00005594 <att_read_rsp>:
	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_read_rsp(struct bt_att *att, u8_t op, u8_t rsp, u16_t handle,
			 u16_t offset)
{
    5594:	b5f0      	push	{r4, r5, r6, r7, lr}
    5596:	b08b      	sub	sp, #44	; 0x2c
    5598:	001e      	movs	r6, r3
    559a:	ab10      	add	r3, sp, #64	; 0x40
    559c:	881b      	ldrh	r3, [r3, #0]
    559e:	9000      	str	r0, [sp, #0]
    55a0:	9101      	str	r1, [sp, #4]
    55a2:	9202      	str	r2, [sp, #8]
    55a4:	9303      	str	r3, [sp, #12]
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    55a6:	2501      	movs	r5, #1
			 u16_t offset)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;

	if (!handle) {
    55a8:	2e00      	cmp	r6, #0
    55aa:	d033      	beq.n	5614 <att_read_rsp+0x80>
}

static u8_t att_read_rsp(struct bt_att *att, u8_t op, u8_t rsp, u16_t handle,
			 u16_t offset)
{
	struct bt_conn *conn = att->chan.chan.conn;
    55ac:	6807      	ldr	r7, [r0, #0]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    55ae:	ac05      	add	r4, sp, #20
    55b0:	2214      	movs	r2, #20
    55b2:	2100      	movs	r1, #0
    55b4:	0020      	movs	r0, r4
    55b6:	f7fb fb74 	bl	ca2 <memset>

	data.buf = bt_att_create_pdu(conn, rsp, 0);
    55ba:	2200      	movs	r2, #0
    55bc:	9902      	ldr	r1, [sp, #8]
    55be:	0038      	movs	r0, r7
    55c0:	f7ff fc44 	bl	4e4c <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    55c4:	350d      	adds	r5, #13
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, rsp, 0);
    55c6:	60a0      	str	r0, [r4, #8]
	if (!data.buf) {
    55c8:	2800      	cmp	r0, #0
    55ca:	d023      	beq.n	5614 <att_read_rsp+0x80>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    55cc:	9b00      	ldr	r3, [sp, #0]
	data.offset = offset;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    55ce:	4a13      	ldr	r2, [pc, #76]	; (561c <att_read_rsp+0x88>)
	data.buf = bt_att_create_pdu(conn, rsp, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    55d0:	9305      	str	r3, [sp, #20]
	data.offset = offset;
    55d2:	466b      	mov	r3, sp
    55d4:	899b      	ldrh	r3, [r3, #12]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    55d6:	0031      	movs	r1, r6
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.offset = offset;
    55d8:	80a3      	strh	r3, [r4, #4]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    55da:	2301      	movs	r3, #1

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    55dc:	0030      	movs	r0, r6

	data.att = att;
	data.offset = offset;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    55de:	7423      	strb	r3, [r4, #16]

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    55e0:	0023      	movs	r3, r4
    55e2:	f000 fcab 	bl	5f3c <bt_gatt_foreach_attr>

	/* In case of error discard data and respond with an error */
	if (data.err) {
    55e6:	7c25      	ldrb	r5, [r4, #16]
    55e8:	2d00      	cmp	r5, #0
    55ea:	d00d      	beq.n	5608 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
		/* Respond here since handle is set */
		send_err_rsp(conn, op, handle, data.err);
		return 0;
    55ec:	2500      	movs	r5, #0

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);

	/* In case of error discard data and respond with an error */
	if (data.err) {
		net_buf_unref(data.buf);
    55ee:	68a0      	ldr	r0, [r4, #8]
    55f0:	f00a ffc6 	bl	10580 <net_buf_unref>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    55f4:	9b01      	ldr	r3, [sp, #4]
    55f6:	42ab      	cmp	r3, r5
    55f8:	d00c      	beq.n	5614 <att_read_rsp+0x80>
    55fa:	7c23      	ldrb	r3, [r4, #16]
    55fc:	0032      	movs	r2, r6
    55fe:	9901      	ldr	r1, [sp, #4]
    5600:	0038      	movs	r0, r7
    5602:	f7ff fc97 	bl	4f34 <send_err_rsp.part.11>
    5606:	e005      	b.n	5614 <att_read_rsp+0x80>
		/* Respond here since handle is set */
		send_err_rsp(conn, op, handle, data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5608:	4b05      	ldr	r3, [pc, #20]	; (5620 <att_read_rsp+0x8c>)
    560a:	68a2      	ldr	r2, [r4, #8]
    560c:	2104      	movs	r1, #4
    560e:	0038      	movs	r0, r7
    5610:	f7fe fdd0 	bl	41b4 <bt_l2cap_send_cb>

	return 0;
}
    5614:	0028      	movs	r0, r5
    5616:	b00b      	add	sp, #44	; 0x2c
    5618:	bdf0      	pop	{r4, r5, r6, r7, pc}
    561a:	46c0      	nop			; (mov r8, r8)
    561c:	00004dd9 	.word	0x00004dd9
    5620:	000049d9 	.word	0x000049d9

00005624 <att_read_blob_req>:
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
			    handle, 0);
}

static u8_t att_read_blob_req(struct bt_att *att, struct net_buf *buf)
{
    5624:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_read_blob_req *req;
	u16_t handle, offset;

	req = (void *)buf->data;
    5626:	688a      	ldr	r2, [r1, #8]

	handle = sys_le16_to_cpu(req->handle);
    5628:	7853      	ldrb	r3, [r2, #1]
    562a:	7811      	ldrb	r1, [r2, #0]
    562c:	021b      	lsls	r3, r3, #8
	offset = sys_le16_to_cpu(req->offset);

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    562e:	430b      	orrs	r3, r1
	u16_t handle, offset;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
    5630:	7891      	ldrb	r1, [r2, #2]
    5632:	78d2      	ldrb	r2, [r2, #3]
    5634:	0212      	lsls	r2, r2, #8

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    5636:	430a      	orrs	r2, r1
    5638:	9200      	str	r2, [sp, #0]
    563a:	210c      	movs	r1, #12
    563c:	220d      	movs	r2, #13
    563e:	f7ff ffa9 	bl	5594 <att_read_rsp>
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}
    5642:	bd0e      	pop	{r1, r2, r3, pc}

00005644 <att_read_req>:

	return 0;
}

static u8_t att_read_req(struct bt_att *att, struct net_buf *buf)
{
    5644:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_read_req *req;
	u16_t handle;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    5646:	688b      	ldr	r3, [r1, #8]

	BT_DBG("handle 0x%04x", handle);

	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5648:	210a      	movs	r1, #10
	struct bt_att_read_req *req;
	u16_t handle;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    564a:	781a      	ldrb	r2, [r3, #0]
    564c:	785b      	ldrb	r3, [r3, #1]
    564e:	021b      	lsls	r3, r3, #8

	BT_DBG("handle 0x%04x", handle);

	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5650:	4313      	orrs	r3, r2
    5652:	2200      	movs	r2, #0
    5654:	9200      	str	r2, [sp, #0]
    5656:	320b      	adds	r2, #11
    5658:	f7ff ff9c 	bl	5594 <att_read_rsp>
			    handle, 0);
}
    565c:	bd0e      	pop	{r1, r2, r3, pc}
	...

00005660 <att_read_type_req>:

	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
    5660:	b5f0      	push	{r4, r5, r6, r7, lr}
    5662:	b08f      	sub	sp, #60	; 0x3c
    5664:	9001      	str	r0, [sp, #4]
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5666:	898b      	ldrh	r3, [r1, #12]

	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
    5668:	000e      	movs	r6, r1
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    566a:	2b06      	cmp	r3, #6
    566c:	d002      	beq.n	5674 <att_read_type_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    566e:	2504      	movs	r5, #4
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5670:	2b14      	cmp	r3, #20
    5672:	d159      	bne.n	5728 <att_read_type_req+0xc8>

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5674:	0030      	movs	r0, r6
	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5676:	9b01      	ldr	r3, [sp, #4]

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5678:	2104      	movs	r1, #4
	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    567a:	681f      	ldr	r7, [r3, #0]
	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    567c:	68b3      	ldr	r3, [r6, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    567e:	3008      	adds	r0, #8
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    5680:	785c      	ldrb	r4, [r3, #1]
    5682:	781a      	ldrb	r2, [r3, #0]
    5684:	0224      	lsls	r4, r4, #8
    5686:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    5688:	789a      	ldrb	r2, [r3, #2]
    568a:	78db      	ldrb	r3, [r3, #3]
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
		return BT_ATT_ERR_UNLIKELY;
    568c:	250e      	movs	r5, #14
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    568e:	021b      	lsls	r3, r3, #8
    5690:	4313      	orrs	r3, r2
    5692:	9300      	str	r3, [sp, #0]
	net_buf_pull(buf, sizeof(*req));
    5694:	f00a ffb7 	bl	10606 <net_buf_simple_pull>

	if (!uuid_create(&u.uuid, buf)) {
    5698:	0031      	movs	r1, r6
    569a:	a803      	add	r0, sp, #12
    569c:	f7ff f90e 	bl	48bc <uuid_create>
    56a0:	2800      	cmp	r0, #0
    56a2:	d041      	beq.n	5728 <att_read_type_req+0xc8>
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    56a4:	2c00      	cmp	r4, #0
    56a6:	d006      	beq.n	56b6 <att_read_type_req+0x56>
    56a8:	9b00      	ldr	r3, [sp, #0]
    56aa:	2b00      	cmp	r3, #0
    56ac:	d002      	beq.n	56b4 <att_read_type_req+0x54>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    56ae:	429c      	cmp	r4, r3
    56b0:	d801      	bhi.n	56b6 <att_read_type_req+0x56>
    56b2:	e008      	b.n	56c6 <att_read_type_req+0x66>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    56b4:	9c00      	ldr	r4, [sp, #0]
    56b6:	2301      	movs	r3, #1
    56b8:	0022      	movs	r2, r4
    56ba:	2108      	movs	r1, #8
    56bc:	0038      	movs	r0, r7
    56be:	f7ff fc39 	bl	4f34 <send_err_rsp.part.11>
	       start_handle, end_handle, bt_uuid_str(&u.uuid));

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    56c2:	2500      	movs	r5, #0
    56c4:	e030      	b.n	5728 <att_read_type_req+0xc8>
}

static u8_t att_read_type_rsp(struct bt_att *att, struct bt_uuid *uuid,
			      u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    56c6:	9b01      	ldr	r3, [sp, #4]
	struct read_type_data data;

	memset(&data, 0, sizeof(data));
    56c8:	ae08      	add	r6, sp, #32
}

static u8_t att_read_type_rsp(struct bt_att *att, struct bt_uuid *uuid,
			      u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    56ca:	681f      	ldr	r7, [r3, #0]
	struct read_type_data data;

	memset(&data, 0, sizeof(data));
    56cc:	2218      	movs	r2, #24
    56ce:	2100      	movs	r1, #0
    56d0:	0030      	movs	r0, r6
    56d2:	f7fb fae6 	bl	ca2 <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    56d6:	2201      	movs	r2, #1
    56d8:	2109      	movs	r1, #9
    56da:	0038      	movs	r0, r7
    56dc:	f7ff fbb6 	bl	4e4c <bt_att_create_pdu>
    56e0:	60b0      	str	r0, [r6, #8]
				     sizeof(*data.rsp));
	if (!data.buf) {
    56e2:	2800      	cmp	r0, #0
    56e4:	d020      	beq.n	5728 <att_read_type_req+0xc8>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    56e6:	9b01      	ldr	r3, [sp, #4]
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    56e8:	2101      	movs	r1, #1
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    56ea:	9308      	str	r3, [sp, #32]
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    56ec:	3008      	adds	r0, #8
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
    56ee:	ab03      	add	r3, sp, #12
    56f0:	6073      	str	r3, [r6, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    56f2:	f00a ff67 	bl	105c4 <net_buf_simple_add>
	data.rsp->len = 0;
    56f6:	2300      	movs	r3, #0
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    56f8:	60f0      	str	r0, [r6, #12]
	data.rsp->len = 0;
    56fa:	7003      	strb	r3, [r0, #0]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    56fc:	230a      	movs	r3, #10

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    56fe:	4a0c      	ldr	r2, [pc, #48]	; (5730 <att_read_type_req+0xd0>)
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5700:	7533      	strb	r3, [r6, #20]

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5702:	9900      	ldr	r1, [sp, #0]
    5704:	0033      	movs	r3, r6
    5706:	0020      	movs	r0, r4
    5708:	f000 fc18 	bl	5f3c <bt_gatt_foreach_attr>

	if (data.err) {
    570c:	7d35      	ldrb	r5, [r6, #20]
    570e:	2d00      	cmp	r5, #0
    5710:	d004      	beq.n	571c <att_read_type_req+0xbc>
		net_buf_unref(data.buf);
    5712:	68b0      	ldr	r0, [r6, #8]
    5714:	f00a ff34 	bl	10580 <net_buf_unref>
    5718:	7d33      	ldrb	r3, [r6, #20]
    571a:	e7cd      	b.n	56b8 <att_read_type_req+0x58>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
			     data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    571c:	4b05      	ldr	r3, [pc, #20]	; (5734 <att_read_type_req+0xd4>)
    571e:	68b2      	ldr	r2, [r6, #8]
    5720:	2104      	movs	r1, #4
    5722:	0038      	movs	r0, r7
    5724:	f7fe fd46 	bl	41b4 <bt_l2cap_send_cb>
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
	}

	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
}
    5728:	0028      	movs	r0, r5
    572a:	b00f      	add	sp, #60	; 0x3c
    572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	000047f7 	.word	0x000047f7
    5734:	000049d9 	.word	0x000049d9

00005738 <att_find_type_req>:

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    5738:	b5f0      	push	{r4, r5, r6, r7, lr}
    573a:	000d      	movs	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    573c:	6803      	ldr	r3, [r0, #0]

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    573e:	0007      	movs	r7, r0
	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
	value = net_buf_pull(buf, sizeof(*req));
    5740:	0028      	movs	r0, r5

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    5742:	b08b      	sub	sp, #44	; 0x2c
	struct bt_conn *conn = att->chan.chan.conn;
    5744:	9301      	str	r3, [sp, #4]
	struct bt_att_find_type_req *req;
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;
    5746:	688b      	ldr	r3, [r1, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
	value = net_buf_pull(buf, sizeof(*req));
    5748:	3008      	adds	r0, #8
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    574a:	785c      	ldrb	r4, [r3, #1]
    574c:	781a      	ldrb	r2, [r3, #0]
    574e:	0224      	lsls	r4, r4, #8
    5750:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    5752:	78da      	ldrb	r2, [r3, #3]
    5754:	7899      	ldrb	r1, [r3, #2]
    5756:	0212      	lsls	r2, r2, #8
    5758:	430a      	orrs	r2, r1
    575a:	9200      	str	r2, [sp, #0]
	type = sys_le16_to_cpu(req->type);
    575c:	795e      	ldrb	r6, [r3, #5]
    575e:	791a      	ldrb	r2, [r3, #4]
    5760:	0236      	lsls	r6, r6, #8
	value = net_buf_pull(buf, sizeof(*req));
    5762:	2106      	movs	r1, #6

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
    5764:	4316      	orrs	r6, r2
	value = net_buf_pull(buf, sizeof(*req));
    5766:	f00a ff4e 	bl	10606 <net_buf_simple_pull>
    576a:	9002      	str	r0, [sp, #8]
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    576c:	2c00      	cmp	r4, #0
    576e:	d006      	beq.n	577e <att_find_type_req+0x46>
    5770:	9b00      	ldr	r3, [sp, #0]
    5772:	2b00      	cmp	r3, #0
    5774:	d002      	beq.n	577c <att_find_type_req+0x44>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    5776:	429c      	cmp	r4, r3
    5778:	d801      	bhi.n	577e <att_find_type_req+0x46>
    577a:	e008      	b.n	578e <att_find_type_req+0x56>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    577c:	9c00      	ldr	r4, [sp, #0]
    577e:	2301      	movs	r3, #1
    5780:	0022      	movs	r2, r4
    5782:	2106      	movs	r1, #6
    5784:	9801      	ldr	r0, [sp, #4]
    5786:	f7ff fbd5 	bl	4f34 <send_err_rsp.part.11>
	 * UUID for the specific primary service.
	 */
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
    578a:	2600      	movs	r6, #0
    578c:	e036      	b.n	57fc <att_find_type_req+0xc4>
	/* The Attribute Protocol Find By Type Value Request shall be used with
	 * the Attribute Type parameter set to the UUID for "Primary Service"
	 * and the Attribute Value set to the 16-bit Bluetooth UUID or 128-bit
	 * UUID for the specific primary service.
	 */
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    578e:	23a0      	movs	r3, #160	; 0xa0
    5790:	019b      	lsls	r3, r3, #6
    5792:	429e      	cmp	r6, r3
    5794:	d001      	beq.n	579a <att_find_type_req+0x62>
    5796:	230a      	movs	r3, #10
    5798:	e7f2      	b.n	5780 <att_find_type_req+0x48>
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
    579a:	89ab      	ldrh	r3, [r5, #12]
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    579c:	ad05      	add	r5, sp, #20
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
    579e:	9303      	str	r3, [sp, #12]

static u8_t att_find_type_rsp(struct bt_att *att, u16_t start_handle,
			      u16_t end_handle, const void *value,
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    57a0:	683b      	ldr	r3, [r7, #0]
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    57a2:	2214      	movs	r2, #20
    57a4:	2100      	movs	r1, #0
    57a6:	0028      	movs	r0, r5

static u8_t att_find_type_rsp(struct bt_att *att, u16_t start_handle,
			      u16_t end_handle, const void *value,
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    57a8:	9301      	str	r3, [sp, #4]
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    57aa:	f7fb fa7a 	bl	ca2 <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    57ae:	2200      	movs	r2, #0
    57b0:	2107      	movs	r1, #7
    57b2:	9801      	ldr	r0, [sp, #4]
    57b4:	f7ff fb4a 	bl	4e4c <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    57b8:	260e      	movs	r6, #14
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_type_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    57ba:	6068      	str	r0, [r5, #4]
	if (!data.buf) {
    57bc:	2800      	cmp	r0, #0
    57be:	d01d      	beq.n	57fc <att_find_type_req+0xc4>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
	data.value = value;
    57c0:	9b02      	ldr	r3, [sp, #8]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    57c2:	9705      	str	r7, [sp, #20]
	data.group = NULL;
	data.value = value;
    57c4:	60eb      	str	r3, [r5, #12]
	data.value_len = value_len;
    57c6:	466b      	mov	r3, sp
    57c8:	7b1b      	ldrb	r3, [r3, #12]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
    57ca:	2700      	movs	r7, #0
	data.value = value;
	data.value_len = value_len;
    57cc:	742b      	strb	r3, [r5, #16]

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    57ce:	230a      	movs	r3, #10

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    57d0:	4a0c      	ldr	r2, [pc, #48]	; (5804 <att_find_type_req+0xcc>)
	data.group = NULL;
	data.value = value;
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    57d2:	746b      	strb	r3, [r5, #17]

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    57d4:	9900      	ldr	r1, [sp, #0]
    57d6:	002b      	movs	r3, r5
    57d8:	0020      	movs	r0, r4
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
    57da:	60af      	str	r7, [r5, #8]
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    57dc:	f000 fbae 	bl	5f3c <bt_gatt_foreach_attr>

	/* If error has not been cleared, no service has been found */
	if (data.err) {
    57e0:	7c6e      	ldrb	r6, [r5, #17]
    57e2:	42be      	cmp	r6, r7
    57e4:	d004      	beq.n	57f0 <att_find_type_req+0xb8>
		net_buf_unref(data.buf);
    57e6:	6868      	ldr	r0, [r5, #4]
    57e8:	f00a feca 	bl	10580 <net_buf_unref>
    57ec:	7c6b      	ldrb	r3, [r5, #17]
    57ee:	e7c7      	b.n	5780 <att_find_type_req+0x48>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
			     data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    57f0:	4b05      	ldr	r3, [pc, #20]	; (5808 <att_find_type_req+0xd0>)
    57f2:	686a      	ldr	r2, [r5, #4]
    57f4:	2104      	movs	r1, #4
    57f6:	9801      	ldr	r0, [sp, #4]
    57f8:	f7fe fcdc 	bl	41b4 <bt_l2cap_send_cb>
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}
    57fc:	0030      	movs	r0, r6
    57fe:	b00b      	add	sp, #44	; 0x2c
    5800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5802:	46c0      	nop			; (mov r8, r8)
    5804:	000046cd 	.word	0x000046cd
    5808:	000049d9 	.word	0x000049d9

0000580c <att_find_info_req>:

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    580c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;
    580e:	688b      	ldr	r3, [r1, #8]

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    5810:	b085      	sub	sp, #20
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    5812:	785c      	ldrb	r4, [r3, #1]
    5814:	781a      	ldrb	r2, [r3, #0]
    5816:	0224      	lsls	r4, r4, #8

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    5818:	0007      	movs	r7, r0
	struct bt_conn *conn = att->chan.chan.conn;
    581a:	6806      	ldr	r6, [r0, #0]
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    581c:	4314      	orrs	r4, r2
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    581e:	d008      	beq.n	5832 <att_find_info_req+0x26>
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    5820:	78dd      	ldrb	r5, [r3, #3]
    5822:	789a      	ldrb	r2, [r3, #2]
    5824:	022d      	lsls	r5, r5, #8
    5826:	4315      	orrs	r5, r2
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    5828:	d002      	beq.n	5830 <att_find_info_req+0x24>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    582a:	42ac      	cmp	r4, r5
    582c:	d801      	bhi.n	5832 <att_find_info_req+0x26>
    582e:	e008      	b.n	5842 <att_find_info_req+0x36>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    5830:	002c      	movs	r4, r5
    5832:	2301      	movs	r3, #1
    5834:	0022      	movs	r2, r4
    5836:	2104      	movs	r1, #4
    5838:	0030      	movs	r0, r6
    583a:	f7ff fb7b 	bl	4f34 <send_err_rsp.part.11>
	       end_handle);

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    583e:	2000      	movs	r0, #0
    5840:	e024      	b.n	588c <att_find_info_req+0x80>
			      u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_info_data data;

	memset(&data, 0, sizeof(data));
    5842:	2210      	movs	r2, #16
    5844:	2100      	movs	r1, #0
    5846:	4668      	mov	r0, sp
    5848:	f7fb fa2b 	bl	ca2 <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    584c:	2200      	movs	r2, #0
    584e:	2105      	movs	r1, #5
    5850:	0030      	movs	r0, r6
    5852:	f7ff fafb 	bl	4e4c <bt_att_create_pdu>
    5856:	0003      	movs	r3, r0
    5858:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    585a:	200e      	movs	r0, #14
	struct find_info_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
	if (!data.buf) {
    585c:	2b00      	cmp	r3, #0
    585e:	d015      	beq.n	588c <att_find_info_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5860:	0029      	movs	r1, r5
    5862:	466b      	mov	r3, sp
    5864:	4a0a      	ldr	r2, [pc, #40]	; (5890 <att_find_info_req+0x84>)
    5866:	0020      	movs	r0, r4
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    5868:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    586a:	f000 fb67 	bl	5f3c <bt_gatt_foreach_attr>

	if (!data.rsp) {
    586e:	9d02      	ldr	r5, [sp, #8]
    5870:	2d00      	cmp	r5, #0
    5872:	d104      	bne.n	587e <att_find_info_req+0x72>
		net_buf_unref(data.buf);
    5874:	9801      	ldr	r0, [sp, #4]
    5876:	f00a fe83 	bl	10580 <net_buf_unref>
    587a:	230a      	movs	r3, #10
    587c:	e7da      	b.n	5834 <att_find_info_req+0x28>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    587e:	4b05      	ldr	r3, [pc, #20]	; (5894 <att_find_info_req+0x88>)
    5880:	9a01      	ldr	r2, [sp, #4]
    5882:	2104      	movs	r1, #4
    5884:	0030      	movs	r0, r6
    5886:	f7fe fc95 	bl	41b4 <bt_l2cap_send_cb>
    588a:	e7d8      	b.n	583e <att_find_info_req+0x32>
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
	}

	return att_find_info_rsp(att, start_handle, end_handle);
}
    588c:	b005      	add	sp, #20
    588e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5890:	0000452f 	.word	0x0000452f
    5894:	000049d9 	.word	0x000049d9

00005898 <bt_att_init>:

	return -ENOMEM;
}

void bt_att_init(void)
{
    5898:	b510      	push	{r4, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    589a:	4803      	ldr	r0, [pc, #12]	; (58a8 <bt_att_init+0x10>)
    589c:	f7fe fbc6 	bl	402c <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    58a0:	f000 faa8 	bl	5df4 <bt_gatt_init>
}
    58a4:	bd10      	pop	{r4, pc}
    58a6:	46c0      	nop			; (mov r8, r8)
    58a8:	20000298 	.word	0x20000298

000058ac <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    58ac:	b510      	push	{r4, lr}
    58ae:	000c      	movs	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    58b0:	2800      	cmp	r0, #0
    58b2:	d01c      	beq.n	58ee <bt_att_req_send+0x42>
    58b4:	2900      	cmp	r1, #0
    58b6:	d01a      	beq.n	58ee <bt_att_req_send+0x42>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    58b8:	f7ff f848 	bl	494c <att_chan_get>
	if (!att) {
    58bc:	2800      	cmp	r0, #0
    58be:	d018      	beq.n	58f2 <bt_att_req_send+0x46>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    58c0:	0003      	movs	r3, r0
    58c2:	3394      	adds	r3, #148	; 0x94
    58c4:	681b      	ldr	r3, [r3, #0]
    58c6:	2b00      	cmp	r3, #0
    58c8:	d00d      	beq.n	58e6 <bt_att_req_send+0x3a>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
    58ca:	0002      	movs	r2, r0
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    58cc:	2300      	movs	r3, #0

	if (!list->tail) {
    58ce:	3298      	adds	r2, #152	; 0x98
    58d0:	6850      	ldr	r0, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    58d2:	6023      	str	r3, [r4, #0]

	if (!list->tail) {
    58d4:	4298      	cmp	r0, r3
    58d6:	d102      	bne.n	58de <bt_att_req_send+0x32>
		list->tail = node;
    58d8:	6054      	str	r4, [r2, #4]
		list->head = node;
    58da:	6014      	str	r4, [r2, #0]
    58dc:	e00b      	b.n	58f6 <bt_att_req_send+0x4a>
	} else {
		list->tail->next = node;
    58de:	6004      	str	r4, [r0, #0]
		list->tail = node;
    58e0:	6054      	str	r4, [r2, #4]
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    58e2:	0018      	movs	r0, r3
    58e4:	e007      	b.n	58f6 <bt_att_req_send+0x4a>
	}

	return att_send_req(att, req);
    58e6:	0021      	movs	r1, r4
    58e8:	f7ff f8ba 	bl	4a60 <att_send_req>
    58ec:	e003      	b.n	58f6 <bt_att_req_send+0x4a>
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
		return -EINVAL;
    58ee:	2016      	movs	r0, #22
    58f0:	e000      	b.n	58f4 <bt_att_req_send+0x48>
	}

	att = att_chan_get(conn);
	if (!att) {
		return -ENOTCONN;
    58f2:	2039      	movs	r0, #57	; 0x39
    58f4:	4240      	negs	r0, r0
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
    58f6:	bd10      	pop	{r4, pc}

000058f8 <sc_ccc_cfg_changed>:

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
	BT_DBG("value 0x%04x", value);
}
    58f8:	4770      	bx	lr

000058fa <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    58fa:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    58fc:	2000      	movs	r0, #0
    58fe:	4770      	bx	lr

00005900 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    5900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	u16_t value = 0x0000;
    5902:	2300      	movs	r3, #0

	for (i = 0; i < ccc->cfg_len; i++) {
		if (ccc->cfg[i].value > value) {
    5904:	260a      	movs	r6, #10
			     struct _bt_gatt_ccc *ccc)
{
	int i;
	u16_t value = 0x0000;

	for (i = 0; i < ccc->cfg_len; i++) {
    5906:	001a      	movs	r2, r3
    5908:	684d      	ldr	r5, [r1, #4]
    590a:	42aa      	cmp	r2, r5
    590c:	d00b      	beq.n	5926 <gatt_ccc_changed+0x26>
		if (ccc->cfg[i].value > value) {
    590e:	0034      	movs	r4, r6
    5910:	4354      	muls	r4, r2
    5912:	680f      	ldr	r7, [r1, #0]
    5914:	193c      	adds	r4, r7, r4
    5916:	8927      	ldrh	r7, [r4, #8]
    5918:	1c1c      	adds	r4, r3, #0
    591a:	42bb      	cmp	r3, r7
    591c:	d200      	bcs.n	5920 <gatt_ccc_changed+0x20>
    591e:	1c3c      	adds	r4, r7, #0
    5920:	b2a3      	uxth	r3, r4
			     struct _bt_gatt_ccc *ccc)
{
	int i;
	u16_t value = 0x0000;

	for (i = 0; i < ccc->cfg_len; i++) {
    5922:	3201      	adds	r2, #1
    5924:	e7f1      	b.n	590a <gatt_ccc_changed+0xa>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    5926:	890a      	ldrh	r2, [r1, #8]
    5928:	429a      	cmp	r2, r3
    592a:	d003      	beq.n	5934 <gatt_ccc_changed+0x34>
		ccc->value = value;
    592c:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    592e:	68ca      	ldr	r2, [r1, #12]
    5930:	0019      	movs	r1, r3
    5932:	4790      	blx	r2
	}
}
    5934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005936 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    5936:	b510      	push	{r4, lr}
    5938:	9b02      	ldr	r3, [sp, #8]
    593a:	000a      	movs	r2, r1
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    593c:	699c      	ldr	r4, [r3, #24]
    593e:	6959      	ldr	r1, [r3, #20]
    5940:	47a0      	blx	r4
}
    5942:	bd10      	pop	{r4, pc}

00005944 <sc_indicate_rsp>:

static struct k_sem sc_sem = K_SEM_INITIALIZER(sc_sem, 1, 1);

static void sc_indicate_rsp(struct bt_conn *conn,
			    const struct bt_gatt_attr *attr, u8_t err)
{
    5944:	b510      	push	{r4, lr}
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
    5946:	4802      	ldr	r0, [pc, #8]	; (5950 <sc_indicate_rsp+0xc>)
    5948:	f00b ffc8 	bl	118dc <k_sem_give>
}
    594c:	bd10      	pop	{r4, pc}
    594e:	46c0      	nop			; (mov r8, r8)
    5950:	200003b8 	.word	0x200003b8

00005954 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       u16_t len, u16_t offset, u8_t flags)
{
    5954:	b5f0      	push	{r4, r5, r6, r7, lr}
    5956:	b087      	sub	sp, #28
    5958:	9105      	str	r1, [sp, #20]
    595a:	a90c      	add	r1, sp, #48	; 0x30
    595c:	9004      	str	r0, [sp, #16]
    595e:	8809      	ldrh	r1, [r1, #0]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    5960:	9805      	ldr	r0, [sp, #20]
    5962:	68c5      	ldr	r5, [r0, #12]
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
    5964:	2902      	cmp	r1, #2
    5966:	d859      	bhi.n	5a1c <bt_gatt_attr_write_ccc+0xc8>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(u16_t)) {
    5968:	18c9      	adds	r1, r1, r3
    596a:	001e      	movs	r6, r3
    596c:	2902      	cmp	r1, #2
    596e:	dc57      	bgt.n	5a20 <bt_gatt_attr_write_ccc+0xcc>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    5970:	7853      	ldrb	r3, [r2, #1]
    5972:	7812      	ldrb	r2, [r2, #0]
    5974:	021b      	lsls	r3, r3, #8
    5976:	431a      	orrs	r2, r3
    5978:	0017      	movs	r7, r2
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    597a:	2400      	movs	r4, #0
    597c:	686b      	ldr	r3, [r5, #4]
    597e:	429c      	cmp	r4, r3
    5980:	d209      	bcs.n	5996 <bt_gatt_attr_write_ccc+0x42>
		/* Check for existing configuration */
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5982:	210a      	movs	r1, #10
    5984:	4361      	muls	r1, r4
    5986:	682b      	ldr	r3, [r5, #0]
    5988:	9804      	ldr	r0, [sp, #16]
    598a:	1859      	adds	r1, r3, r1
    598c:	3101      	adds	r1, #1
    598e:	f7fe f973 	bl	3c78 <bt_conn_addr_le_cmp>
    5992:	2800      	cmp	r0, #0
    5994:	d105      	bne.n	59a2 <bt_gatt_attr_write_ccc+0x4e>
			break;
		}
	}

	if (i == ccc->cfg_len) {
    5996:	686b      	ldr	r3, [r5, #4]
    5998:	429c      	cmp	r4, r3
    599a:	d12c      	bne.n	59f6 <bt_gatt_attr_write_ccc+0xa2>
    599c:	2400      	movs	r4, #0
    599e:	220a      	movs	r2, #10
    59a0:	e00b      	b.n	59ba <bt_gatt_attr_write_ccc+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    59a2:	3401      	adds	r4, #1
    59a4:	e7ea      	b.n	597c <bt_gatt_attr_write_ccc+0x28>
    59a6:	0011      	movs	r1, r2
    59a8:	4361      	muls	r1, r4
    59aa:	9103      	str	r1, [sp, #12]
	}

	if (i == ccc->cfg_len) {
		for (i = 0; i < ccc->cfg_len; i++) {
			/* Check for unused configuration */
			if (ccc->cfg[i].valid) {
    59ac:	9803      	ldr	r0, [sp, #12]
    59ae:	6829      	ldr	r1, [r5, #0]
    59b0:	1808      	adds	r0, r1, r0
    59b2:	7801      	ldrb	r1, [r0, #0]
    59b4:	2900      	cmp	r1, #0
    59b6:	d003      	beq.n	59c0 <bt_gatt_attr_write_ccc+0x6c>
			break;
		}
	}

	if (i == ccc->cfg_len) {
		for (i = 0; i < ccc->cfg_len; i++) {
    59b8:	3401      	adds	r4, #1
    59ba:	429c      	cmp	r4, r3
    59bc:	d1f3      	bne.n	59a6 <bt_gatt_attr_write_ccc+0x52>
    59be:	e00e      	b.n	59de <bt_gatt_attr_write_ccc+0x8a>
			/* Check for unused configuration */
			if (ccc->cfg[i].valid) {
				continue;
			}

			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    59c0:	9904      	ldr	r1, [sp, #16]
    59c2:	3001      	adds	r0, #1
    59c4:	3150      	adds	r1, #80	; 0x50
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    59c6:	2207      	movs	r2, #7
    59c8:	f7fb f941 	bl	c4e <memcpy>

			if (value) {
    59cc:	2f00      	cmp	r7, #0
    59ce:	d003      	beq.n	59d8 <bt_gatt_attr_write_ccc+0x84>
				ccc->cfg[i].valid = true;
    59d0:	2301      	movs	r3, #1
    59d2:	682a      	ldr	r2, [r5, #0]
    59d4:	9903      	ldr	r1, [sp, #12]
    59d6:	5453      	strb	r3, [r2, r1]
			}

			break;
		}

		if (i == ccc->cfg_len) {
    59d8:	686b      	ldr	r3, [r5, #4]
    59da:	429c      	cmp	r4, r3
    59dc:	d111      	bne.n	5a02 <bt_gatt_attr_write_ccc+0xae>
			BT_WARN("No space to store CCC cfg");
    59de:	4b13      	ldr	r3, [pc, #76]	; (5a2c <bt_gatt_attr_write_ccc+0xd8>)
    59e0:	4a13      	ldr	r2, [pc, #76]	; (5a30 <bt_gatt_attr_write_ccc+0xdc>)
    59e2:	9301      	str	r3, [sp, #4]
    59e4:	4b13      	ldr	r3, [pc, #76]	; (5a34 <bt_gatt_attr_write_ccc+0xe0>)
    59e6:	4914      	ldr	r1, [pc, #80]	; (5a38 <bt_gatt_attr_write_ccc+0xe4>)
    59e8:	9300      	str	r3, [sp, #0]
    59ea:	4814      	ldr	r0, [pc, #80]	; (5a3c <bt_gatt_attr_write_ccc+0xe8>)
    59ec:	4b14      	ldr	r3, [pc, #80]	; (5a40 <bt_gatt_attr_write_ccc+0xec>)
    59ee:	f7fb ff51 	bl	1894 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    59f2:	2611      	movs	r6, #17
    59f4:	e015      	b.n	5a22 <bt_gatt_attr_write_ccc+0xce>
		}
	} else if (!value) {
    59f6:	2f00      	cmp	r7, #0
    59f8:	d103      	bne.n	5a02 <bt_gatt_attr_write_ccc+0xae>
		/* free existing configuration for default value */
		ccc->cfg[i].valid = false;
    59fa:	230a      	movs	r3, #10
    59fc:	4363      	muls	r3, r4
    59fe:	682a      	ldr	r2, [r5, #0]
    5a00:	549f      	strb	r7, [r3, r2]
	}

	ccc->cfg[i].value = value;
    5a02:	230a      	movs	r3, #10
    5a04:	435c      	muls	r4, r3
    5a06:	682b      	ldr	r3, [r5, #0]
    5a08:	191c      	adds	r4, r3, r4
    5a0a:	8127      	strh	r7, [r4, #8]

	BT_DBG("handle 0x%04x value %u", attr->handle, ccc->cfg[i].value);

	/* Update cfg if don't match */
	if (ccc->cfg[i].value != ccc->value) {
    5a0c:	892b      	ldrh	r3, [r5, #8]
    5a0e:	42bb      	cmp	r3, r7
    5a10:	d008      	beq.n	5a24 <bt_gatt_attr_write_ccc+0xd0>
		gatt_ccc_changed(attr, ccc);
    5a12:	0029      	movs	r1, r5
    5a14:	9805      	ldr	r0, [sp, #20]
    5a16:	f7ff ff73 	bl	5900 <gatt_ccc_changed>
    5a1a:	e003      	b.n	5a24 <bt_gatt_attr_write_ccc+0xd0>
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5a1c:	2607      	movs	r6, #7
    5a1e:	e000      	b.n	5a22 <bt_gatt_attr_write_ccc+0xce>
	}

	if (offset + len > sizeof(u16_t)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    5a20:	260d      	movs	r6, #13
    5a22:	4276      	negs	r6, r6
	if (ccc->cfg[i].value != ccc->value) {
		gatt_ccc_changed(attr, ccc);
	}

	return len;
}
    5a24:	0030      	movs	r0, r6
    5a26:	b007      	add	sp, #28
    5a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a2a:	46c0      	nop			; (mov r8, r8)
    5a2c:	0001241d 	.word	0x0001241d
    5a30:	000123dc 	.word	0x000123dc
    5a34:	00012422 	.word	0x00012422
    5a38:	000123e3 	.word	0x000123e3
    5a3c:	000130a4 	.word	0x000130a4
    5a40:	000146b7 	.word	0x000146b7

00005a44 <connected_cb>:
{
	return bt_att_get_mtu(conn);
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5a46:	4b12      	ldr	r3, [pc, #72]	; (5a90 <connected_cb+0x4c>)
    5a48:	6882      	ldr	r2, [r0, #8]
{
	return bt_att_get_mtu(conn);
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5a4a:	0007      	movs	r7, r0
    5a4c:	9101      	str	r1, [sp, #4]
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5a4e:	429a      	cmp	r2, r3
    5a50:	d11c      	bne.n	5a8c <connected_cb+0x48>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    5a52:	68c5      	ldr	r5, [r0, #12]

	/* If already enabled skip */
	if (ccc->value) {
    5a54:	892c      	ldrh	r4, [r5, #8]
    5a56:	2c00      	cmp	r4, #0
    5a58:	d118      	bne.n	5a8c <connected_cb+0x48>
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    5a5a:	686b      	ldr	r3, [r5, #4]
    5a5c:	429c      	cmp	r4, r3
    5a5e:	d215      	bcs.n	5a8c <connected_cb+0x48>
    5a60:	260a      	movs	r6, #10
    5a62:	4366      	muls	r6, r4
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5a64:	682b      	ldr	r3, [r5, #0]
    5a66:	9801      	ldr	r0, [sp, #4]
    5a68:	1999      	adds	r1, r3, r6
    5a6a:	3101      	adds	r1, #1
    5a6c:	f7fe f904 	bl	3c78 <bt_conn_addr_le_cmp>
    5a70:	2800      	cmp	r0, #0
    5a72:	d109      	bne.n	5a88 <connected_cb+0x44>
			continue;
		}

		if (ccc->cfg[i].value) {
    5a74:	682b      	ldr	r3, [r5, #0]
    5a76:	199e      	adds	r6, r3, r6
    5a78:	8933      	ldrh	r3, [r6, #8]
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	d004      	beq.n	5a88 <connected_cb+0x44>
			gatt_ccc_changed(attr, ccc);
    5a7e:	0029      	movs	r1, r5
    5a80:	0038      	movs	r0, r7
    5a82:	f7ff ff3d 	bl	5900 <gatt_ccc_changed>
    5a86:	e001      	b.n	5a8c <connected_cb+0x48>
	/* If already enabled skip */
	if (ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    5a88:	3401      	adds	r4, #1
    5a8a:	e7e6      	b.n	5a5a <connected_cb+0x16>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    5a8c:	2001      	movs	r0, #1
    5a8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5a90:	00005955 	.word	0x00005955

00005a94 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    5a94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5a96:	4a22      	ldr	r2, [pc, #136]	; (5b20 <gatt_register+0x8c>)
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    5a98:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;

	if (sys_slist_is_empty(&db)) {
    5a9a:	6813      	ldr	r3, [r2, #0]
static int gatt_register(struct bt_gatt_service *svc)
{
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
	u16_t count = svc->attr_count;
    5a9c:	8881      	ldrh	r1, [r0, #4]

	if (sys_slist_is_empty(&db)) {
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	d018      	beq.n	5ad4 <gatt_register+0x40>
    5aa2:	6853      	ldr	r3, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    5aa4:	2b00      	cmp	r3, #0
    5aa6:	d036      	beq.n	5b16 <gatt_register+0x82>
	handle = last->attrs[last->attr_count - 1].handle;
    5aa8:	3b08      	subs	r3, #8
    5aaa:	001d      	movs	r5, r3
    5aac:	682e      	ldr	r6, [r5, #0]
    5aae:	2514      	movs	r5, #20
    5ab0:	889b      	ldrh	r3, [r3, #4]
    5ab2:	436b      	muls	r3, r5
    5ab4:	18f3      	adds	r3, r6, r3
    5ab6:	3b14      	subs	r3, #20
    5ab8:	8a1b      	ldrh	r3, [r3, #16]
    5aba:	e00b      	b.n	5ad4 <gatt_register+0x40>

populate:
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
    5abc:	2900      	cmp	r1, #0
    5abe:	d01c      	beq.n	5afa <gatt_register+0x66>
		if (!attrs->handle) {
    5ac0:	8a25      	ldrh	r5, [r4, #16]
    5ac2:	2d00      	cmp	r5, #0
    5ac4:	d109      	bne.n	5ada <gatt_register+0x46>
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
    5ac6:	3301      	adds	r3, #1
    5ac8:	b29d      	uxth	r5, r3
    5aca:	8225      	strh	r5, [r4, #16]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
	handle = last->attrs[last->attr_count - 1].handle;

populate:
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
    5acc:	002b      	movs	r3, r5
    5ace:	3901      	subs	r1, #1
    5ad0:	3414      	adds	r4, #20
    5ad2:	b289      	uxth	r1, r1
    5ad4:	2c00      	cmp	r4, #0
    5ad6:	d1f1      	bne.n	5abc <gatt_register+0x28>
    5ad8:	e00f      	b.n	5afa <gatt_register+0x66>
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    5ada:	42ab      	cmp	r3, r5
    5adc:	d3f6      	bcc.n	5acc <gatt_register+0x38>
			/* Use existing handle if valid */
			handle = attrs->handle;
		} else {
			/* Service has conflicting handles */
			BT_ERR("Unable to register handle 0x%04x",
    5ade:	4b11      	ldr	r3, [pc, #68]	; (5b24 <gatt_register+0x90>)
    5ae0:	9501      	str	r5, [sp, #4]
    5ae2:	9302      	str	r3, [sp, #8]
    5ae4:	4b10      	ldr	r3, [pc, #64]	; (5b28 <gatt_register+0x94>)
    5ae6:	4a11      	ldr	r2, [pc, #68]	; (5b2c <gatt_register+0x98>)
    5ae8:	9300      	str	r3, [sp, #0]
    5aea:	4911      	ldr	r1, [pc, #68]	; (5b30 <gatt_register+0x9c>)
    5aec:	4b11      	ldr	r3, [pc, #68]	; (5b34 <gatt_register+0xa0>)
    5aee:	4812      	ldr	r0, [pc, #72]	; (5b38 <gatt_register+0xa4>)
    5af0:	f7fb fed0 	bl	1894 <printk>
			       attrs->handle);
			return -EINVAL;
    5af4:	2016      	movs	r0, #22
    5af6:	4240      	negs	r0, r0
    5af8:	e00f      	b.n	5b1a <gatt_register+0x86>
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    5afa:	2300      	movs	r3, #0
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    5afc:	0001      	movs	r1, r0
    5afe:	6083      	str	r3, [r0, #8]

	if (!list->tail) {
    5b00:	6850      	ldr	r0, [r2, #4]
    5b02:	3108      	adds	r1, #8
    5b04:	4298      	cmp	r0, r3
    5b06:	d102      	bne.n	5b0e <gatt_register+0x7a>
		list->tail = node;
    5b08:	6051      	str	r1, [r2, #4]
		list->head = node;
    5b0a:	6011      	str	r1, [r2, #0]
    5b0c:	e005      	b.n	5b1a <gatt_register+0x86>
	} else {
		list->tail->next = node;
    5b0e:	6001      	str	r1, [r0, #0]
		list->tail = node;
    5b10:	6051      	str	r1, [r2, #4]

	return 0;
    5b12:	0018      	movs	r0, r3
    5b14:	e001      	b.n	5b1a <gatt_register+0x86>
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
	handle = last->attrs[last->attr_count - 1].handle;
    5b16:	681b      	ldr	r3, [r3, #0]
    5b18:	deff      	udf	#255	; 0xff
	}

	sys_slist_append(&db, &svc->node);

	return 0;
}
    5b1a:	b004      	add	sp, #16
    5b1c:	bd70      	pop	{r4, r5, r6, pc}
    5b1e:	46c0      	nop			; (mov r8, r8)
    5b20:	20000c18 	.word	0x20000c18
    5b24:	0001241d 	.word	0x0001241d
    5b28:	000124a8 	.word	0x000124a8
    5b2c:	0001246d 	.word	0x0001246d
    5b30:	000123e3 	.word	0x000123e3
    5b34:	000146d8 	.word	0x000146d8
    5b38:	000130ce 	.word	0x000130ce

00005b3c <gatt_notify>:
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len)
{
    5b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b3e:	b087      	sub	sp, #28
    5b40:	9104      	str	r1, [sp, #16]
    5b42:	9205      	str	r2, [sp, #20]
	struct net_buf *buf;
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    5b44:	211b      	movs	r1, #27
    5b46:	1c9a      	adds	r2, r3, #2
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len)
{
    5b48:	0007      	movs	r7, r0
    5b4a:	001e      	movs	r6, r3
	struct net_buf *buf;
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    5b4c:	f7ff f97e 	bl	4e4c <bt_att_create_pdu>
    5b50:	1e05      	subs	r5, r0, #0
	if (!buf) {
    5b52:	d10c      	bne.n	5b6e <gatt_notify+0x32>
		BT_WARN("No buffer available to send notification");
    5b54:	4b16      	ldr	r3, [pc, #88]	; (5bb0 <gatt_notify+0x74>)
    5b56:	4a17      	ldr	r2, [pc, #92]	; (5bb4 <gatt_notify+0x78>)
    5b58:	9301      	str	r3, [sp, #4]
    5b5a:	4b17      	ldr	r3, [pc, #92]	; (5bb8 <gatt_notify+0x7c>)
    5b5c:	4917      	ldr	r1, [pc, #92]	; (5bbc <gatt_notify+0x80>)
    5b5e:	9300      	str	r3, [sp, #0]
    5b60:	4817      	ldr	r0, [pc, #92]	; (5bc0 <gatt_notify+0x84>)
    5b62:	4b18      	ldr	r3, [pc, #96]	; (5bc4 <gatt_notify+0x88>)
    5b64:	f7fb fe96 	bl	1894 <printk>
    5b68:	200c      	movs	r0, #12
    5b6a:	4240      	negs	r0, r0
    5b6c:	e01d      	b.n	5baa <gatt_notify+0x6e>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    5b6e:	0003      	movs	r3, r0
    5b70:	3308      	adds	r3, #8
    5b72:	2102      	movs	r1, #2
    5b74:	0018      	movs	r0, r3
    5b76:	9303      	str	r3, [sp, #12]
    5b78:	f00a fd24 	bl	105c4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    5b7c:	466b      	mov	r3, sp
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    5b7e:	0004      	movs	r4, r0
	nfy->handle = sys_cpu_to_le16(handle);
    5b80:	7c1b      	ldrb	r3, [r3, #16]

	net_buf_add(buf, len);
    5b82:	0031      	movs	r1, r6
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
	nfy->handle = sys_cpu_to_le16(handle);
    5b84:	7003      	strb	r3, [r0, #0]
    5b86:	9b04      	ldr	r3, [sp, #16]
    5b88:	0a1b      	lsrs	r3, r3, #8
    5b8a:	7043      	strb	r3, [r0, #1]

	net_buf_add(buf, len);
    5b8c:	9803      	ldr	r0, [sp, #12]
    5b8e:	f00a fd19 	bl	105c4 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    5b92:	0032      	movs	r2, r6
    5b94:	9905      	ldr	r1, [sp, #20]
    5b96:	1ca0      	adds	r0, r4, #2
    5b98:	f7fb f859 	bl	c4e <memcpy>
    5b9c:	0038      	movs	r0, r7
    5b9e:	2300      	movs	r3, #0
    5ba0:	002a      	movs	r2, r5
    5ba2:	2104      	movs	r1, #4
    5ba4:	f7fe fb06 	bl	41b4 <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_ATT, buf);

	return 0;
    5ba8:	2000      	movs	r0, #0
}
    5baa:	b007      	add	sp, #28
    5bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bae:	46c0      	nop			; (mov r8, r8)
    5bb0:	0001241d 	.word	0x0001241d
    5bb4:	000123dc 	.word	0x000123dc
    5bb8:	00012422 	.word	0x00012422
    5bbc:	000123e3 	.word	0x000123e3
    5bc0:	000130ff 	.word	0x000130ff
    5bc4:	000146ab 	.word	0x000146ab

00005bc8 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    5bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    5bca:	8c0a      	ldrh	r2, [r1, #32]
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    5bcc:	b087      	sub	sp, #28
    5bce:	000c      	movs	r4, r1
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    5bd0:	3202      	adds	r2, #2
    5bd2:	211d      	movs	r1, #29
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    5bd4:	0007      	movs	r7, r0
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    5bd6:	f7ff f939 	bl	4e4c <bt_att_create_pdu>
    5bda:	1e06      	subs	r6, r0, #0
				sizeof(*ind) + params->len);
	if (!buf) {
    5bdc:	d10c      	bne.n	5bf8 <gatt_indicate+0x30>
		BT_WARN("No buffer available to send indication");
    5bde:	4b20      	ldr	r3, [pc, #128]	; (5c60 <gatt_indicate+0x98>)
    5be0:	4a20      	ldr	r2, [pc, #128]	; (5c64 <gatt_indicate+0x9c>)
    5be2:	9301      	str	r3, [sp, #4]
    5be4:	4b20      	ldr	r3, [pc, #128]	; (5c68 <gatt_indicate+0xa0>)
    5be6:	4921      	ldr	r1, [pc, #132]	; (5c6c <gatt_indicate+0xa4>)
    5be8:	9300      	str	r3, [sp, #0]
    5bea:	4821      	ldr	r0, [pc, #132]	; (5c70 <gatt_indicate+0xa8>)
    5bec:	4b21      	ldr	r3, [pc, #132]	; (5c74 <gatt_indicate+0xac>)
    5bee:	f7fb fe51 	bl	1894 <printk>
    5bf2:	200c      	movs	r0, #12
    5bf4:	4240      	negs	r0, r0
    5bf6:	e031      	b.n	5c5c <gatt_indicate+0x94>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
    5bf8:	0003      	movs	r3, r0
    5bfa:	3308      	adds	r3, #8
    5bfc:	2102      	movs	r1, #2
    5bfe:	0018      	movs	r0, r3
    5c00:	9305      	str	r3, [sp, #20]
    5c02:	f00a fcdf 	bl	105c4 <net_buf_simple_add>
    5c06:	0005      	movs	r5, r0
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    5c08:	6963      	ldr	r3, [r4, #20]
    5c0a:	7c1a      	ldrb	r2, [r3, #16]
    5c0c:	7002      	strb	r2, [r0, #0]
    5c0e:	7c5b      	ldrb	r3, [r3, #17]
    5c10:	7043      	strb	r3, [r0, #1]

	net_buf_add(buf, params->len);
    5c12:	8c21      	ldrh	r1, [r4, #32]
    5c14:	9805      	ldr	r0, [sp, #20]
    5c16:	f00a fcd5 	bl	105c4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    5c1a:	8c22      	ldrh	r2, [r4, #32]
    5c1c:	69e1      	ldr	r1, [r4, #28]
    5c1e:	1ca8      	adds	r0, r5, #2
    5c20:	f7fb f815 	bl	c4e <memcpy>

	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
		req->func = func;
    5c24:	4b14      	ldr	r3, [pc, #80]	; (5c78 <gatt_indicate+0xb0>)
	int err;

	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
    5c26:	6126      	str	r6, [r4, #16]
		req->func = func;
    5c28:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    5c2a:	2300      	movs	r3, #0

		err = bt_att_req_send(conn, req);
    5c2c:	0021      	movs	r1, r4
	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
		req->func = func;
		req->destroy = destroy;
    5c2e:	60a3      	str	r3, [r4, #8]

		err = bt_att_req_send(conn, req);
    5c30:	0038      	movs	r0, r7
    5c32:	f7ff fe3b 	bl	58ac <bt_att_req_send>
    5c36:	0004      	movs	r4, r0
	} else {
		err = bt_att_send(conn, buf);
	}

	if (err) {
    5c38:	2000      	movs	r0, #0
    5c3a:	4284      	cmp	r4, r0
    5c3c:	d00e      	beq.n	5c5c <gatt_indicate+0x94>
		BT_ERR("Error sending ATT PDU: %d", err);
    5c3e:	4b08      	ldr	r3, [pc, #32]	; (5c60 <gatt_indicate+0x98>)
    5c40:	4a0e      	ldr	r2, [pc, #56]	; (5c7c <gatt_indicate+0xb4>)
    5c42:	9302      	str	r3, [sp, #8]
    5c44:	4b0e      	ldr	r3, [pc, #56]	; (5c80 <gatt_indicate+0xb8>)
    5c46:	4909      	ldr	r1, [pc, #36]	; (5c6c <gatt_indicate+0xa4>)
    5c48:	9300      	str	r3, [sp, #0]
    5c4a:	9401      	str	r4, [sp, #4]
    5c4c:	4b0d      	ldr	r3, [pc, #52]	; (5c84 <gatt_indicate+0xbc>)
    5c4e:	480e      	ldr	r0, [pc, #56]	; (5c88 <gatt_indicate+0xc0>)
    5c50:	f7fb fe20 	bl	1894 <printk>
		net_buf_unref(buf);
    5c54:	0030      	movs	r0, r6
    5c56:	f00a fc93 	bl	10580 <net_buf_unref>
    5c5a:	0020      	movs	r0, r4

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    5c5c:	b007      	add	sp, #28
    5c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c60:	0001241d 	.word	0x0001241d
    5c64:	000123dc 	.word	0x000123dc
    5c68:	00012422 	.word	0x00012422
    5c6c:	000123e3 	.word	0x000123e3
    5c70:	00013138 	.word	0x00013138
    5c74:	000146e6 	.word	0x000146e6
    5c78:	00005937 	.word	0x00005937
    5c7c:	0001246d 	.word	0x0001246d
    5c80:	000124a8 	.word	0x000124a8
    5c84:	000146ce 	.word	0x000146ce
    5c88:	0001316f 	.word	0x0001316f

00005c8c <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    5c8e:	2600      	movs	r6, #0

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5c90:	b085      	sub	sp, #20
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    5c92:	ab02      	add	r3, sp, #8
    5c94:	aa02      	add	r2, sp, #8
    5c96:	701e      	strb	r6, [r3, #0]
    5c98:	4b27      	ldr	r3, [pc, #156]	; (5d38 <notify_cb+0xac>)

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5c9a:	0005      	movs	r5, r0
    5c9c:	000c      	movs	r4, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    5c9e:	6800      	ldr	r0, [r0, #0]
    5ca0:	0011      	movs	r1, r2
    5ca2:	8053      	strh	r3, [r2, #2]
    5ca4:	f7fb fea8 	bl	19f8 <bt_uuid_cmp>
    5ca8:	42b0      	cmp	r0, r6
    5caa:	d00a      	beq.n	5cc2 <notify_cb+0x36>
		/* Stop if we reach the next characteristic */
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    5cac:	4b23      	ldr	r3, [pc, #140]	; (5d3c <notify_cb+0xb0>)
    5cae:	a903      	add	r1, sp, #12
    5cb0:	6828      	ldr	r0, [r5, #0]
    5cb2:	804b      	strh	r3, [r1, #2]
    5cb4:	700e      	strb	r6, [r1, #0]
    5cb6:	f7fb fe9f 	bl	19f8 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    5cba:	1e43      	subs	r3, r0, #1
    5cbc:	4198      	sbcs	r0, r3
    5cbe:	b2c0      	uxtb	r0, r0
    5cc0:	e037      	b.n	5d32 <notify_cb+0xa6>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5cc2:	4b1f      	ldr	r3, [pc, #124]	; (5d40 <notify_cb+0xb4>)
    5cc4:	68aa      	ldr	r2, [r5, #8]
    5cc6:	429a      	cmp	r2, r3
    5cc8:	d001      	beq.n	5cce <notify_cb+0x42>
		return BT_GATT_ITER_CONTINUE;
    5cca:	2001      	movs	r0, #1
    5ccc:	e031      	b.n	5d32 <notify_cb+0xa6>
	}

	ccc = attr->user_data;

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    5cce:	0007      	movs	r7, r0
	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    5cd0:	68ee      	ldr	r6, [r5, #12]

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    5cd2:	6873      	ldr	r3, [r6, #4]
    5cd4:	429f      	cmp	r7, r3
    5cd6:	d2f8      	bcs.n	5cca <notify_cb+0x3e>
		struct bt_conn *conn;
		int err;

		if (ccc->value != data->type) {
    5cd8:	8932      	ldrh	r2, [r6, #8]
    5cda:	88a3      	ldrh	r3, [r4, #4]
    5cdc:	429a      	cmp	r2, r3
    5cde:	d126      	bne.n	5d2e <notify_cb+0xa2>
			continue;
		}

		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    5ce0:	200a      	movs	r0, #10
    5ce2:	4378      	muls	r0, r7
    5ce4:	6833      	ldr	r3, [r6, #0]
    5ce6:	1818      	adds	r0, r3, r0
    5ce8:	3001      	adds	r0, #1
    5cea:	f7fd ffdd 	bl	3ca8 <bt_conn_lookup_addr_le>
    5cee:	1e05      	subs	r5, r0, #0
		if (!conn) {
    5cf0:	d01d      	beq.n	5d2e <notify_cb+0xa2>
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
    5cf2:	0003      	movs	r3, r0
    5cf4:	334d      	adds	r3, #77	; 0x4d
    5cf6:	781b      	ldrb	r3, [r3, #0]
    5cf8:	2b03      	cmp	r3, #3
    5cfa:	d002      	beq.n	5d02 <notify_cb+0x76>
			bt_conn_unref(conn);
    5cfc:	f7fe f814 	bl	3d28 <bt_conn_unref>
    5d00:	e015      	b.n	5d2e <notify_cb+0xa2>
			continue;
		}

		if (data->type == BT_GATT_CCC_INDICATE) {
    5d02:	88a3      	ldrh	r3, [r4, #4]
    5d04:	2b02      	cmp	r3, #2
    5d06:	d103      	bne.n	5d10 <notify_cb+0x84>
			err = gatt_indicate(conn, data->params);
    5d08:	6961      	ldr	r1, [r4, #20]
    5d0a:	f7ff ff5d 	bl	5bc8 <gatt_indicate>
    5d0e:	e005      	b.n	5d1c <notify_cb+0x90>
		} else {
			err = gatt_notify(conn, data->attr->handle, data->data,
    5d10:	68a2      	ldr	r2, [r4, #8]
    5d12:	8a23      	ldrh	r3, [r4, #16]
    5d14:	8a11      	ldrh	r1, [r2, #16]
    5d16:	68e2      	ldr	r2, [r4, #12]
    5d18:	f7ff ff10 	bl	5b3c <gatt_notify>
    5d1c:	9001      	str	r0, [sp, #4]
					 data->len);
		}

		bt_conn_unref(conn);
    5d1e:	0028      	movs	r0, r5
    5d20:	f7fe f802 	bl	3d28 <bt_conn_unref>
    5d24:	2000      	movs	r0, #0

		if (err < 0) {
    5d26:	9b01      	ldr	r3, [sp, #4]
    5d28:	4283      	cmp	r3, r0
    5d2a:	db02      	blt.n	5d32 <notify_cb+0xa6>
			return BT_GATT_ITER_STOP;
		}

		data->err = 0;
    5d2c:	6020      	str	r0, [r4, #0]
	}

	ccc = attr->user_data;

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    5d2e:	3701      	adds	r7, #1
    5d30:	e7cf      	b.n	5cd2 <notify_cb+0x46>

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    5d32:	b005      	add	sp, #20
    5d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d36:	46c0      	nop			; (mov r8, r8)
    5d38:	00002902 	.word	0x00002902
    5d3c:	00002803 	.word	0x00002803
    5d40:	00005955 	.word	0x00005955

00005d44 <disconnected_cb>:

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5d46:	4b2a      	ldr	r3, [pc, #168]	; (5df0 <disconnected_cb+0xac>)
    5d48:	6882      	ldr	r2, [r0, #8]

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5d4a:	0007      	movs	r7, r0
    5d4c:	9101      	str	r1, [sp, #4]
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5d4e:	429a      	cmp	r2, r3
    5d50:	d14c      	bne.n	5dec <disconnected_cb+0xa8>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    5d52:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    5d54:	2600      	movs	r6, #0
    5d56:	8923      	ldrh	r3, [r4, #8]
    5d58:	2b00      	cmp	r3, #0
    5d5a:	d047      	beq.n	5dec <disconnected_cb+0xa8>
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    5d5c:	6863      	ldr	r3, [r4, #4]
    5d5e:	429e      	cmp	r6, r3
    5d60:	d238      	bcs.n	5dd4 <disconnected_cb+0x90>
    5d62:	250a      	movs	r5, #10
    5d64:	4375      	muls	r5, r6
		/* Ignore configurations with disabled value */
		if (!ccc->cfg[i].value) {
    5d66:	6823      	ldr	r3, [r4, #0]
    5d68:	1959      	adds	r1, r3, r5
    5d6a:	890b      	ldrh	r3, [r1, #8]
    5d6c:	2b00      	cmp	r3, #0
    5d6e:	d02f      	beq.n	5dd0 <disconnected_cb+0x8c>
			continue;
		}

		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5d70:	3101      	adds	r1, #1
    5d72:	9801      	ldr	r0, [sp, #4]
    5d74:	f7fd ff80 	bl	3c78 <bt_conn_addr_le_cmp>
    5d78:	2800      	cmp	r0, #0
    5d7a:	d011      	beq.n	5da0 <disconnected_cb+0x5c>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    5d7c:	6823      	ldr	r3, [r4, #0]
    5d7e:	1958      	adds	r0, r3, r5
    5d80:	3001      	adds	r0, #1
    5d82:	f7fd ff91 	bl	3ca8 <bt_conn_lookup_addr_le>
			if (tmp) {
    5d86:	2800      	cmp	r0, #0
    5d88:	d022      	beq.n	5dd0 <disconnected_cb+0x8c>
				if (tmp->state == BT_CONN_CONNECTED) {
    5d8a:	0003      	movs	r3, r0
    5d8c:	334d      	adds	r3, #77	; 0x4d
    5d8e:	781b      	ldrb	r3, [r3, #0]
    5d90:	2b03      	cmp	r3, #3
    5d92:	d102      	bne.n	5d9a <disconnected_cb+0x56>
					bt_conn_unref(tmp);
    5d94:	f7fd ffc8 	bl	3d28 <bt_conn_unref>
    5d98:	e028      	b.n	5dec <disconnected_cb+0xa8>
					return BT_GATT_ITER_CONTINUE;
				}

				bt_conn_unref(tmp);
    5d9a:	f7fd ffc5 	bl	3d28 <bt_conn_unref>
    5d9e:	e017      	b.n	5dd0 <disconnected_cb+0x8c>
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    5da0:	9b01      	ldr	r3, [sp, #4]
    5da2:	3350      	adds	r3, #80	; 0x50
    5da4:	0018      	movs	r0, r3
    5da6:	9300      	str	r3, [sp, #0]
    5da8:	f7fd fb1e 	bl	33e8 <bt_addr_le_is_bonded>
    5dac:	1e01      	subs	r1, r0, #0
    5dae:	6820      	ldr	r0, [r4, #0]
    5db0:	d108      	bne.n	5dc4 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    5db2:	5541      	strb	r1, [r0, r5]
				memset(&ccc->cfg[i].value, 0,
    5db4:	6823      	ldr	r3, [r4, #0]
    5db6:	2202      	movs	r2, #2
    5db8:	195d      	adds	r5, r3, r5
    5dba:	0028      	movs	r0, r5
    5dbc:	3008      	adds	r0, #8
    5dbe:	f7fa ff70 	bl	ca2 <memset>
    5dc2:	e005      	b.n	5dd0 <disconnected_cb+0x8c>
				       sizeof(ccc->cfg[i].value));
			} else {
				/* Update address in case it has changed */
				bt_addr_le_copy(&ccc->cfg[i].peer,
    5dc4:	1940      	adds	r0, r0, r5
    5dc6:	3001      	adds	r0, #1
    5dc8:	2207      	movs	r2, #7
    5dca:	9900      	ldr	r1, [sp, #0]
    5dcc:	f7fa ff3f 	bl	c4e <memcpy>
	/* If already disabled skip */
	if (!ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    5dd0:	3601      	adds	r6, #1
    5dd2:	e7c3      	b.n	5d5c <disconnected_cb+0x18>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    5dd4:	0020      	movs	r0, r4
    5dd6:	2202      	movs	r2, #2
    5dd8:	2100      	movs	r1, #0
    5dda:	3008      	adds	r0, #8
    5ddc:	f7fa ff61 	bl	ca2 <memset>
	if (ccc->cfg_changed) {
    5de0:	68e3      	ldr	r3, [r4, #12]
    5de2:	2b00      	cmp	r3, #0
    5de4:	d002      	beq.n	5dec <disconnected_cb+0xa8>
		ccc->cfg_changed(attr, ccc->value);
    5de6:	8921      	ldrh	r1, [r4, #8]
    5de8:	0038      	movs	r0, r7
    5dea:	4798      	blx	r3
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    5dec:	2001      	movs	r0, #1
    5dee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5df0:	00005955 	.word	0x00005955

00005df4 <bt_gatt_init>:

	return 0;
}

void bt_gatt_init(void)
{
    5df4:	b510      	push	{r4, lr}
	/* Register mandatory services */
	gatt_register(&gap_svc);
    5df6:	4803      	ldr	r0, [pc, #12]	; (5e04 <bt_gatt_init+0x10>)
    5df8:	f7ff fe4c 	bl	5a94 <gatt_register>
	gatt_register(&gatt_svc);
    5dfc:	4802      	ldr	r0, [pc, #8]	; (5e08 <bt_gatt_init+0x14>)
    5dfe:	f7ff fe49 	bl	5a94 <gatt_register>
}
    5e02:	bd10      	pop	{r4, pc}
    5e04:	200003ec 	.word	0x200003ec
    5e08:	200003a8 	.word	0x200003a8

00005e0c <bt_gatt_attr_read>:
}

ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			  void *buf, u16_t buf_len, u16_t offset,
			  const void *value, u16_t value_len)
{
    5e0c:	b510      	push	{r4, lr}
    5e0e:	0010      	movs	r0, r2
    5e10:	aa02      	add	r2, sp, #8
    5e12:	8811      	ldrh	r1, [r2, #0]
    5e14:	aa04      	add	r2, sp, #16
    5e16:	8814      	ldrh	r4, [r2, #0]
	u16_t len;

	if (offset > value_len) {
    5e18:	42a1      	cmp	r1, r4
    5e1a:	d80a      	bhi.n	5e32 <bt_gatt_attr_read+0x26>
    5e1c:	1a64      	subs	r4, r4, r1
    5e1e:	429c      	cmp	r4, r3
    5e20:	dd00      	ble.n	5e24 <bt_gatt_attr_read+0x18>
    5e22:	001c      	movs	r4, r3
	len = min(buf_len, value_len - offset);

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, value + offset, len);
    5e24:	9b03      	ldr	r3, [sp, #12]
    5e26:	b2a4      	uxth	r4, r4
    5e28:	1859      	adds	r1, r3, r1
    5e2a:	0022      	movs	r2, r4
    5e2c:	f7fa ff0f 	bl	c4e <memcpy>

	return len;
    5e30:	e001      	b.n	5e36 <bt_gatt_attr_read+0x2a>
			  const void *value, u16_t value_len)
{
	u16_t len;

	if (offset > value_len) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5e32:	2407      	movs	r4, #7
    5e34:	4264      	negs	r4, r4
	       len);

	memcpy(buf, value + offset, len);

	return len;
}
    5e36:	0020      	movs	r0, r4
    5e38:	bd10      	pop	{r4, pc}
	...

00005e3c <read_appearance>:
}

static ssize_t read_appearance(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    5e3c:	b570      	push	{r4, r5, r6, lr}
    5e3e:	b086      	sub	sp, #24
    5e40:	ac0a      	add	r4, sp, #40	; 0x28
    5e42:	8825      	ldrh	r5, [r4, #0]
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    5e44:	2416      	movs	r4, #22
    5e46:	4e05      	ldr	r6, [pc, #20]	; (5e5c <read_appearance+0x20>)
    5e48:	446c      	add	r4, sp
    5e4a:	8026      	strh	r6, [r4, #0]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    5e4c:	2602      	movs	r6, #2
    5e4e:	9401      	str	r4, [sp, #4]
    5e50:	9602      	str	r6, [sp, #8]
    5e52:	9500      	str	r5, [sp, #0]
    5e54:	f7ff ffda 	bl	5e0c <bt_gatt_attr_read>
				 sizeof(appearance));
}
    5e58:	b006      	add	sp, #24
    5e5a:	bd70      	pop	{r4, r5, r6, pc}
    5e5c:	00001770 	.word	0x00001770

00005e60 <read_name>:

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    5e60:	b5f0      	push	{r4, r5, r6, r7, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    5e62:	4c0b      	ldr	r4, [pc, #44]	; (5e90 <read_name+0x30>)

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    5e64:	b087      	sub	sp, #28
    5e66:	0005      	movs	r5, r0
    5e68:	001e      	movs	r6, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    5e6a:	0020      	movs	r0, r4

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    5e6c:	ab0c      	add	r3, sp, #48	; 0x30
    5e6e:	881f      	ldrh	r7, [r3, #0]
    5e70:	9104      	str	r1, [sp, #16]
    5e72:	9205      	str	r2, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    5e74:	f7fa fec1 	bl	bfa <strlen>
static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    5e78:	b280      	uxth	r0, r0
    5e7a:	9002      	str	r0, [sp, #8]
    5e7c:	9401      	str	r4, [sp, #4]
    5e7e:	9700      	str	r7, [sp, #0]
    5e80:	0033      	movs	r3, r6
    5e82:	9a05      	ldr	r2, [sp, #20]
    5e84:	9904      	ldr	r1, [sp, #16]
    5e86:	0028      	movs	r0, r5
    5e88:	f7ff ffc0 	bl	5e0c <bt_gatt_attr_read>
				 strlen(gap_name));
}
    5e8c:	b007      	add	sp, #28
    5e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e90:	00012267 	.word	0x00012267

00005e94 <bt_gatt_attr_read_service>:
}

ssize_t bt_gatt_attr_read_service(struct bt_conn *conn,
				  const struct bt_gatt_attr *attr,
				  void *buf, u16_t len, u16_t offset)
{
    5e94:	b570      	push	{r4, r5, r6, lr}
    5e96:	b086      	sub	sp, #24
    5e98:	ac0a      	add	r4, sp, #40	; 0x28
    5e9a:	8825      	ldrh	r5, [r4, #0]
	struct bt_uuid *uuid = attr->user_data;
    5e9c:	68cc      	ldr	r4, [r1, #12]

	if (uuid->type == BT_UUID_TYPE_16) {
    5e9e:	7826      	ldrb	r6, [r4, #0]
    5ea0:	2e00      	cmp	r6, #0
    5ea2:	d107      	bne.n	5eb4 <bt_gatt_attr_read_service+0x20>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    5ea4:	8864      	ldrh	r4, [r4, #2]
    5ea6:	3616      	adds	r6, #22
    5ea8:	446e      	add	r6, sp
    5eaa:	8034      	strh	r4, [r6, #0]

		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    5eac:	2402      	movs	r4, #2
    5eae:	9601      	str	r6, [sp, #4]
    5eb0:	9402      	str	r4, [sp, #8]
    5eb2:	e003      	b.n	5ebc <bt_gatt_attr_read_service+0x28>
					 &uuid16, 2);
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    5eb4:	2610      	movs	r6, #16
				 BT_UUID_128(uuid)->val, 16);
    5eb6:	3401      	adds	r4, #1

		return bt_gatt_attr_read(conn, attr, buf, len, offset,
					 &uuid16, 2);
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    5eb8:	9602      	str	r6, [sp, #8]
    5eba:	9401      	str	r4, [sp, #4]
    5ebc:	9500      	str	r5, [sp, #0]
    5ebe:	f7ff ffa5 	bl	5e0c <bt_gatt_attr_read>
				 BT_UUID_128(uuid)->val, 16);
}
    5ec2:	b006      	add	sp, #24
    5ec4:	bd70      	pop	{r4, r5, r6, pc}

00005ec6 <bt_gatt_attr_read_ccc>:
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    5ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ec8:	0006      	movs	r6, r0
    5eca:	000f      	movs	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    5ecc:	2400      	movs	r4, #0
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    5ece:	b08b      	sub	sp, #44	; 0x2c
    5ed0:	9306      	str	r3, [sp, #24]
    5ed2:	ab10      	add	r3, sp, #64	; 0x40
    5ed4:	881b      	ldrh	r3, [r3, #0]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    5ed6:	68cd      	ldr	r5, [r1, #12]
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    5ed8:	9205      	str	r2, [sp, #20]
    5eda:	9307      	str	r3, [sp, #28]
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    5edc:	686b      	ldr	r3, [r5, #4]
    5ede:	429c      	cmp	r4, r3
    5ee0:	d216      	bcs.n	5f10 <bt_gatt_attr_read_ccc+0x4a>
    5ee2:	230a      	movs	r3, #10
    5ee4:	4363      	muls	r3, r4
    5ee6:	9304      	str	r3, [sp, #16]
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5ee8:	9a04      	ldr	r2, [sp, #16]
    5eea:	682b      	ldr	r3, [r5, #0]
    5eec:	0030      	movs	r0, r6
    5eee:	1899      	adds	r1, r3, r2
    5ef0:	3101      	adds	r1, #1
    5ef2:	f7fd fec1 	bl	3c78 <bt_conn_addr_le_cmp>
    5ef6:	2800      	cmp	r0, #0
    5ef8:	d001      	beq.n	5efe <bt_gatt_attr_read_ccc+0x38>
{
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    5efa:	3401      	adds	r4, #1
    5efc:	e7ee      	b.n	5edc <bt_gatt_attr_read_ccc+0x16>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
			continue;
		}

		value = sys_cpu_to_le16(ccc->cfg[i].value);
    5efe:	682a      	ldr	r2, [r5, #0]
    5f00:	9b04      	ldr	r3, [sp, #16]
    5f02:	4694      	mov	ip, r2
    5f04:	4463      	add	r3, ip
    5f06:	891a      	ldrh	r2, [r3, #8]
    5f08:	2316      	movs	r3, #22
    5f0a:	a904      	add	r1, sp, #16
    5f0c:	185b      	adds	r3, r3, r1
    5f0e:	801a      	strh	r2, [r3, #0]
    5f10:	2316      	movs	r3, #22
		break;
	}

	/* Default to disable if there is no cfg for the peer */
	if (i == ccc->cfg_len) {
    5f12:	686a      	ldr	r2, [r5, #4]
    5f14:	a904      	add	r1, sp, #16
    5f16:	185b      	adds	r3, r3, r1
    5f18:	4294      	cmp	r4, r2
    5f1a:	d101      	bne.n	5f20 <bt_gatt_attr_read_ccc+0x5a>
		value = 0x0000;
    5f1c:	2200      	movs	r2, #0
    5f1e:	801a      	strh	r2, [r3, #0]
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    5f20:	2202      	movs	r2, #2
    5f22:	9301      	str	r3, [sp, #4]
    5f24:	9b07      	ldr	r3, [sp, #28]
    5f26:	9202      	str	r2, [sp, #8]
    5f28:	9300      	str	r3, [sp, #0]
    5f2a:	9a05      	ldr	r2, [sp, #20]
    5f2c:	9b06      	ldr	r3, [sp, #24]
    5f2e:	0039      	movs	r1, r7
    5f30:	0030      	movs	r0, r6
    5f32:	f7ff ff6b 	bl	5e0c <bt_gatt_attr_read>
				 sizeof(value));
}
    5f36:	b00b      	add	sp, #44	; 0x2c
    5f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00005f3c <bt_gatt_foreach_attr>:
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
}

void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
    5f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f3e:	9301      	str	r3, [sp, #4]
    5f40:	4b12      	ldr	r3, [pc, #72]	; (5f8c <bt_gatt_foreach_attr+0x50>)
    5f42:	0006      	movs	r6, r0
    5f44:	681b      	ldr	r3, [r3, #0]
    5f46:	000f      	movs	r7, r1
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5f48:	001c      	movs	r4, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
}

void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
    5f4a:	9200      	str	r2, [sp, #0]
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5f4c:	3c08      	subs	r4, #8
    5f4e:	2b00      	cmp	r3, #0
    5f50:	d01b      	beq.n	5f8a <bt_gatt_foreach_attr+0x4e>
    5f52:	2c00      	cmp	r4, #0
    5f54:	d019      	beq.n	5f8a <bt_gatt_foreach_attr+0x4e>
    5f56:	2500      	movs	r5, #0
		int i;

		for (i = 0; i < svc->attr_count; i++) {
    5f58:	88a3      	ldrh	r3, [r4, #4]
    5f5a:	429d      	cmp	r5, r3
    5f5c:	da10      	bge.n	5f80 <bt_gatt_foreach_attr+0x44>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    5f5e:	2014      	movs	r0, #20
    5f60:	4368      	muls	r0, r5
    5f62:	6823      	ldr	r3, [r4, #0]
    5f64:	1818      	adds	r0, r3, r0

			/* Check if attribute handle is within range */
			if (attr->handle < start_handle ||
    5f66:	8a03      	ldrh	r3, [r0, #16]
    5f68:	42b3      	cmp	r3, r6
    5f6a:	d201      	bcs.n	5f70 <bt_gatt_foreach_attr+0x34>
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
		int i;

		for (i = 0; i < svc->attr_count; i++) {
    5f6c:	3501      	adds	r5, #1
    5f6e:	e7f3      	b.n	5f58 <bt_gatt_foreach_attr+0x1c>
			struct bt_gatt_attr *attr = &svc->attrs[i];

			/* Check if attribute handle is within range */
			if (attr->handle < start_handle ||
    5f70:	42bb      	cmp	r3, r7
    5f72:	d8fb      	bhi.n	5f6c <bt_gatt_foreach_attr+0x30>
			    attr->handle > end_handle) {
				continue;
			}

			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    5f74:	9901      	ldr	r1, [sp, #4]
    5f76:	9b00      	ldr	r3, [sp, #0]
    5f78:	4798      	blx	r3
    5f7a:	2800      	cmp	r0, #0
    5f7c:	d1f6      	bne.n	5f6c <bt_gatt_foreach_attr+0x30>
    5f7e:	e004      	b.n	5f8a <bt_gatt_foreach_attr+0x4e>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    5f80:	68a4      	ldr	r4, [r4, #8]
void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5f82:	2c00      	cmp	r4, #0
    5f84:	d001      	beq.n	5f8a <bt_gatt_foreach_attr+0x4e>
    5f86:	3c08      	subs	r4, #8
    5f88:	e7e3      	b.n	5f52 <bt_gatt_foreach_attr+0x16>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
				return;
			}
		}
	}
}
    5f8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5f8c:	20000c18 	.word	0x20000c18

00005f90 <bt_gatt_indicate.part.9>:
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);

	return nfy.err;
}

int bt_gatt_indicate(struct bt_conn *conn,
    5f90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if (conn) {
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
    5f92:	2339      	movs	r3, #57	; 0x39
	nfy.type = BT_GATT_CCC_INDICATE;
    5f94:	466a      	mov	r2, sp

	if (conn) {
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
    5f96:	425b      	negs	r3, r3
    5f98:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    5f9a:	333b      	adds	r3, #59	; 0x3b
    5f9c:	8093      	strh	r3, [r2, #4]
	nfy.params = params;

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    5f9e:	6943      	ldr	r3, [r0, #20]
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
	nfy.type = BT_GATT_CCC_INDICATE;
	nfy.params = params;
    5fa0:	9005      	str	r0, [sp, #20]

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    5fa2:	8a18      	ldrh	r0, [r3, #16]
    5fa4:	4a03      	ldr	r2, [pc, #12]	; (5fb4 <bt_gatt_indicate.part.9+0x24>)
    5fa6:	466b      	mov	r3, sp
    5fa8:	4903      	ldr	r1, [pc, #12]	; (5fb8 <bt_gatt_indicate.part.9+0x28>)
    5faa:	f7ff ffc7 	bl	5f3c <bt_gatt_foreach_attr>

	return nfy.err;
}
    5fae:	9800      	ldr	r0, [sp, #0]
    5fb0:	b007      	add	sp, #28
    5fb2:	bd00      	pop	{pc}
    5fb4:	00005c8d 	.word	0x00005c8d
    5fb8:	0000ffff 	.word	0x0000ffff

00005fbc <sc_indicate.isra.10>:
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
}

static void sc_indicate(struct bt_gatt_attr *start, struct bt_gatt_attr *end)
    5fbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
{
	static struct bt_gatt_indicate_params params;
	u16_t sc_range[2];

	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
    5fbe:	4c12      	ldr	r4, [pc, #72]	; (6008 <sc_indicate.isra.10+0x4c>)
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
}

static void sc_indicate(struct bt_gatt_attr *start, struct bt_gatt_attr *end)
    5fc0:	0006      	movs	r6, r0
    5fc2:	000d      	movs	r5, r1
{
	static struct bt_gatt_indicate_params params;
	u16_t sc_range[2];

	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
    5fc4:	0020      	movs	r0, r4
    5fc6:	2100      	movs	r1, #0
    5fc8:	f00b fcc4 	bl	11954 <k_sem_take>
    5fcc:	2800      	cmp	r0, #0
    5fce:	d004      	beq.n	5fda <sc_indicate.isra.10+0x1e>
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
    5fd0:	2101      	movs	r1, #1
    5fd2:	0020      	movs	r0, r4
    5fd4:	4249      	negs	r1, r1
    5fd6:	f00b fcbd 	bl	11954 <k_sem_take>
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
    5fda:	8832      	ldrh	r2, [r6, #0]
    5fdc:	ab01      	add	r3, sp, #4
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    5fde:	480b      	ldr	r0, [pc, #44]	; (600c <sc_indicate.isra.10+0x50>)
	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
    5fe0:	801a      	strh	r2, [r3, #0]
	sc_range[1] = sys_cpu_to_le16(end->handle);
    5fe2:	882a      	ldrh	r2, [r5, #0]

	params.attr = &gatt_attrs[2];
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
    5fe4:	61c3      	str	r3, [r0, #28]
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);
    5fe6:	805a      	strh	r2, [r3, #2]

	params.attr = &gatt_attrs[2];
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);
    5fe8:	2304      	movs	r3, #4
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    5fea:	4a09      	ldr	r2, [pc, #36]	; (6010 <sc_indicate.isra.10+0x54>)
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);
    5fec:	8403      	strh	r3, [r0, #32]
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    5fee:	3228      	adds	r2, #40	; 0x28
    5ff0:	6142      	str	r2, [r0, #20]
	params.func = sc_indicate_rsp;
    5ff2:	4a08      	ldr	r2, [pc, #32]	; (6014 <sc_indicate.isra.10+0x58>)
    5ff4:	6182      	str	r2, [r0, #24]
    5ff6:	f7ff ffcb 	bl	5f90 <bt_gatt_indicate.part.9>
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);

	if (!bt_gatt_indicate(NULL, &params)) {
    5ffa:	2800      	cmp	r0, #0
    5ffc:	d002      	beq.n	6004 <sc_indicate.isra.10+0x48>
		return;
	}

	k_sem_give(&sc_sem);
    5ffe:	0020      	movs	r0, r4
    6000:	f00b fc6c 	bl	118dc <k_sem_give>
}
    6004:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    6006:	46c0      	nop			; (mov r8, r8)
    6008:	200003b8 	.word	0x200003b8
    600c:	20000bf4 	.word	0x20000bf4
    6010:	200002b8 	.word	0x200002b8
    6014:	00005945 	.word	0x00005945

00006018 <bt_gatt_service_register>:

int bt_gatt_service_register(struct bt_gatt_service *svc)
{
    6018:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    601a:	6803      	ldr	r3, [r0, #0]
    601c:	2400      	movs	r4, #0

	k_sem_give(&sc_sem);
}

int bt_gatt_service_register(struct bt_gatt_service *svc)
{
    601e:	0005      	movs	r5, r0
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    6020:	6818      	ldr	r0, [r3, #0]
    6022:	466b      	mov	r3, sp
    6024:	701c      	strb	r4, [r3, #0]
    6026:	23c0      	movs	r3, #192	; 0xc0
    6028:	466a      	mov	r2, sp
    602a:	015b      	lsls	r3, r3, #5
    602c:	4669      	mov	r1, sp
    602e:	8053      	strh	r3, [r2, #2]
    6030:	f7fb fce2 	bl	19f8 <bt_uuid_cmp>
    6034:	42a0      	cmp	r0, r4
    6036:	d102      	bne.n	603e <bt_gatt_service_register+0x26>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
		return -EALREADY;
    6038:	2345      	movs	r3, #69	; 0x45
    603a:	425b      	negs	r3, r3
    603c:	e018      	b.n	6070 <bt_gatt_service_register+0x58>
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    603e:	682b      	ldr	r3, [r5, #0]
    6040:	a901      	add	r1, sp, #4
    6042:	6818      	ldr	r0, [r3, #0]
    6044:	4b0b      	ldr	r3, [pc, #44]	; (6074 <bt_gatt_service_register+0x5c>)
    6046:	700c      	strb	r4, [r1, #0]
    6048:	804b      	strh	r3, [r1, #2]
    604a:	f7fb fcd5 	bl	19f8 <bt_uuid_cmp>
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    604e:	2800      	cmp	r0, #0
    6050:	d0f2      	beq.n	6038 <bt_gatt_service_register+0x20>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
		return -EALREADY;
	}

	err = gatt_register(svc);
    6052:	0028      	movs	r0, r5
    6054:	f7ff fd1e 	bl	5a94 <gatt_register>
    6058:	1e03      	subs	r3, r0, #0
	if (err < 0) {
    605a:	db09      	blt.n	6070 <bt_gatt_service_register+0x58>
    605c:	2314      	movs	r3, #20
    605e:	88a9      	ldrh	r1, [r5, #4]
		return err;
	}

	sc_indicate(&svc->attrs[0], &svc->attrs[svc->attr_count - 1]);
    6060:	6828      	ldr	r0, [r5, #0]
    6062:	4359      	muls	r1, r3
    6064:	1841      	adds	r1, r0, r1
    6066:	3904      	subs	r1, #4
    6068:	3010      	adds	r0, #16
    606a:	f7ff ffa7 	bl	5fbc <sc_indicate.isra.10>

	return 0;
    606e:	0023      	movs	r3, r4
}
    6070:	0018      	movs	r0, r3
    6072:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6074:	00001801 	.word	0x00001801

00006078 <bt_gatt_attr_next>:
	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
	struct bt_gatt_attr *next = NULL;
    6078:	2300      	movs	r3, #0

	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
    607a:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
    607c:	9301      	str	r3, [sp, #4]

	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    607e:	8a00      	ldrh	r0, [r0, #16]
    6080:	ab01      	add	r3, sp, #4
    6082:	3001      	adds	r0, #1
    6084:	b280      	uxth	r0, r0
    6086:	0001      	movs	r1, r0
    6088:	4a02      	ldr	r2, [pc, #8]	; (6094 <bt_gatt_attr_next+0x1c>)
    608a:	f7ff ff57 	bl	5f3c <bt_gatt_foreach_attr>
			     &next);

	return next;
}
    608e:	9801      	ldr	r0, [sp, #4]
    6090:	bd0e      	pop	{r1, r2, r3, pc}
    6092:	46c0      	nop			; (mov r8, r8)
    6094:	000058fb 	.word	0x000058fb

00006098 <bt_gatt_attr_read_chrc>:
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    6098:	b5f0      	push	{r4, r5, r6, r7, lr}
    609a:	b08f      	sub	sp, #60	; 0x3c
    609c:	001f      	movs	r7, r3
    609e:	ab14      	add	r3, sp, #80	; 0x50
    60a0:	881b      	ldrh	r3, [r3, #0]
	struct bt_gatt_chrc *chrc = attr->user_data;
    60a2:	68ce      	ldr	r6, [r1, #12]
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    60a4:	9005      	str	r0, [sp, #20]
    60a6:	9307      	str	r3, [sp, #28]
    60a8:	9206      	str	r2, [sp, #24]
	struct bt_gatt_chrc *chrc = attr->user_data;
	struct gatt_chrc pdu;
	const struct bt_gatt_attr *next;
	u8_t value_len;

	pdu.properties = chrc->properties;
    60aa:	7932      	ldrb	r2, [r6, #4]
    60ac:	ab09      	add	r3, sp, #36	; 0x24
	 * The Characteristic Value declaration contains the value of the
	 * characteristic. It is the first Attribute after the characteristic
	 * declaration. All characteristic definitions shall have a
	 * Characteristic Value declaration.
	 */
	next = bt_gatt_attr_next(attr);
    60ae:	0008      	movs	r0, r1
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    60b0:	000d      	movs	r5, r1
	struct bt_gatt_chrc *chrc = attr->user_data;
	struct gatt_chrc pdu;
	const struct bt_gatt_attr *next;
	u8_t value_len;

	pdu.properties = chrc->properties;
    60b2:	701a      	strb	r2, [r3, #0]
	 * The Characteristic Value declaration contains the value of the
	 * characteristic. It is the first Attribute after the characteristic
	 * declaration. All characteristic definitions shall have a
	 * Characteristic Value declaration.
	 */
	next = bt_gatt_attr_next(attr);
    60b4:	f7ff ffe0 	bl	6078 <bt_gatt_attr_next>
    60b8:	1e04      	subs	r4, r0, #0
	if (!next) {
    60ba:	d111      	bne.n	60e0 <bt_gatt_attr_read_chrc+0x48>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    60bc:	4b1b      	ldr	r3, [pc, #108]	; (612c <bt_gatt_attr_read_chrc+0x94>)
    60be:	4a1c      	ldr	r2, [pc, #112]	; (6130 <bt_gatt_attr_read_chrc+0x98>)
    60c0:	9302      	str	r3, [sp, #8]
    60c2:	8a2b      	ldrh	r3, [r5, #16]
    60c4:	491b      	ldr	r1, [pc, #108]	; (6134 <bt_gatt_attr_read_chrc+0x9c>)
    60c6:	9301      	str	r3, [sp, #4]
    60c8:	4b1b      	ldr	r3, [pc, #108]	; (6138 <bt_gatt_attr_read_chrc+0xa0>)
    60ca:	481c      	ldr	r0, [pc, #112]	; (613c <bt_gatt_attr_read_chrc+0xa4>)
    60cc:	9300      	str	r3, [sp, #0]
    60ce:	4b1c      	ldr	r3, [pc, #112]	; (6140 <bt_gatt_attr_read_chrc+0xa8>)
    60d0:	f7fb fbe0 	bl	1894 <printk>
		pdu.value_handle = 0x0000;
    60d4:	2315      	movs	r3, #21
    60d6:	aa04      	add	r2, sp, #16
    60d8:	189b      	adds	r3, r3, r2
    60da:	701c      	strb	r4, [r3, #0]
    60dc:	705c      	strb	r4, [r3, #1]
    60de:	e006      	b.n	60ee <bt_gatt_attr_read_chrc+0x56>
	} else {
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    60e0:	2315      	movs	r3, #21
    60e2:	aa04      	add	r2, sp, #16
    60e4:	189b      	adds	r3, r3, r2
    60e6:	7c02      	ldrb	r2, [r0, #16]
    60e8:	701a      	strb	r2, [r3, #0]
    60ea:	7c42      	ldrb	r2, [r0, #17]
    60ec:	705a      	strb	r2, [r3, #1]
    60ee:	2017      	movs	r0, #23
	}
	value_len = sizeof(pdu.properties) + sizeof(pdu.value_handle);

	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    60f0:	6831      	ldr	r1, [r6, #0]
    60f2:	aa04      	add	r2, sp, #16
    60f4:	780b      	ldrb	r3, [r1, #0]
    60f6:	1880      	adds	r0, r0, r2
    60f8:	2b00      	cmp	r3, #0
    60fa:	d105      	bne.n	6108 <bt_gatt_attr_read_chrc+0x70>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    60fc:	884b      	ldrh	r3, [r1, #2]
    60fe:	7003      	strb	r3, [r0, #0]
    6100:	0a1b      	lsrs	r3, r3, #8
    6102:	7043      	strb	r3, [r0, #1]
		value_len += 2;
    6104:	2305      	movs	r3, #5
    6106:	e004      	b.n	6112 <bt_gatt_attr_read_chrc+0x7a>
	} else {
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    6108:	3101      	adds	r1, #1
    610a:	2210      	movs	r2, #16
    610c:	f7fa fd9f 	bl	c4e <memcpy>
		value_len += 16;
    6110:	2313      	movs	r3, #19
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6112:	9302      	str	r3, [sp, #8]
    6114:	ab09      	add	r3, sp, #36	; 0x24
    6116:	9301      	str	r3, [sp, #4]
    6118:	9b07      	ldr	r3, [sp, #28]
    611a:	9a06      	ldr	r2, [sp, #24]
    611c:	9300      	str	r3, [sp, #0]
    611e:	0029      	movs	r1, r5
    6120:	003b      	movs	r3, r7
    6122:	9805      	ldr	r0, [sp, #20]
    6124:	f7ff fe72 	bl	5e0c <bt_gatt_attr_read>
}
    6128:	b00f      	add	sp, #60	; 0x3c
    612a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    612c:	0001241d 	.word	0x0001241d
    6130:	000123dc 	.word	0x000123dc
    6134:	000123e3 	.word	0x000123e3
    6138:	00012422 	.word	0x00012422
    613c:	00013199 	.word	0x00013199
    6140:	00014694 	.word	0x00014694

00006144 <bt_gatt_connected>:
}

#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    6144:	b510      	push	{r4, lr}
    6146:	0003      	movs	r3, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6148:	4a02      	ldr	r2, [pc, #8]	; (6154 <bt_gatt_connected+0x10>)
    614a:	4903      	ldr	r1, [pc, #12]	; (6158 <bt_gatt_connected+0x14>)
    614c:	2001      	movs	r0, #1
    614e:	f7ff fef5 	bl	5f3c <bt_gatt_foreach_attr>
#if defined(CONFIG_BLUETOOTH_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */
}
    6152:	bd10      	pop	{r4, pc}
    6154:	00005a45 	.word	0x00005a45
    6158:	0000ffff 	.word	0x0000ffff

0000615c <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    615c:	b510      	push	{r4, lr}
    615e:	0003      	movs	r3, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6160:	4a02      	ldr	r2, [pc, #8]	; (616c <bt_gatt_disconnected+0x10>)
    6162:	4903      	ldr	r1, [pc, #12]	; (6170 <bt_gatt_disconnected+0x14>)
    6164:	2001      	movs	r0, #1
    6166:	f7ff fee9 	bl	5f3c <bt_gatt_foreach_attr>

#if defined(CONFIG_BLUETOOTH_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */
}
    616a:	bd10      	pop	{r4, pc}
    616c:	00005d45 	.word	0x00005d45
    6170:	0000ffff 	.word	0x0000ffff

00006174 <bt_smp_accept>:

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    6176:	4a0c      	ldr	r2, [pc, #48]	; (61a8 <bt_smp_accept+0x34>)
    6178:	6813      	ldr	r3, [r2, #0]
    617a:	2b00      	cmp	r3, #0
    617c:	d104      	bne.n	6188 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.ops = &ops;
    617e:	480b      	ldr	r0, [pc, #44]	; (61ac <bt_smp_accept+0x38>)
    6180:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan;
    6182:	600a      	str	r2, [r1, #0]

		return 0;
    6184:	0018      	movs	r0, r3
    6186:	e00c      	b.n	61a2 <bt_smp_accept+0x2e>
	}

	BT_ERR("No available SMP context for conn %p", conn);
    6188:	4b09      	ldr	r3, [pc, #36]	; (61b0 <bt_smp_accept+0x3c>)
    618a:	9001      	str	r0, [sp, #4]
    618c:	9302      	str	r3, [sp, #8]
    618e:	4b09      	ldr	r3, [pc, #36]	; (61b4 <bt_smp_accept+0x40>)
    6190:	4a09      	ldr	r2, [pc, #36]	; (61b8 <bt_smp_accept+0x44>)
    6192:	9300      	str	r3, [sp, #0]
    6194:	4909      	ldr	r1, [pc, #36]	; (61bc <bt_smp_accept+0x48>)
    6196:	4b0a      	ldr	r3, [pc, #40]	; (61c0 <bt_smp_accept+0x4c>)
    6198:	480a      	ldr	r0, [pc, #40]	; (61c4 <bt_smp_accept+0x50>)
    619a:	f7fb fb7b 	bl	1894 <printk>

	return -ENOMEM;
    619e:	200c      	movs	r0, #12
    61a0:	4240      	negs	r0, r0
}
    61a2:	b005      	add	sp, #20
    61a4:	bd00      	pop	{pc}
    61a6:	46c0      	nop			; (mov r8, r8)
    61a8:	20000c2c 	.word	0x20000c2c
    61ac:	20000404 	.word	0x20000404
    61b0:	0001241d 	.word	0x0001241d
    61b4:	000124a8 	.word	0x000124a8
    61b8:	0001246d 	.word	0x0001246d
    61bc:	000123e3 	.word	0x000123e3
    61c0:	000146f4 	.word	0x000146f4
    61c4:	000131cf 	.word	0x000131cf

000061c8 <bt_smp_recv>:
	 * a Pairing Failed command with the reason set to "Pairing Not
	 * Supported" when any command is received.
	 * Core Specification Vol. 3, Part H, 3.3
	 */

	buf = bt_l2cap_create_pdu(NULL, 0);
    61c8:	2100      	movs	r1, #0
{
	return -ENOTSUP;
}

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    61ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
    61cc:	6807      	ldr	r7, [r0, #0]
	 * a Pairing Failed command with the reason set to "Pairing Not
	 * Supported" when any command is received.
	 * Core Specification Vol. 3, Part H, 3.3
	 */

	buf = bt_l2cap_create_pdu(NULL, 0);
    61ce:	0008      	movs	r0, r1
    61d0:	f7fd ffeb 	bl	41aa <bt_l2cap_create_pdu>
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
    61d4:	0006      	movs	r6, r0
    61d6:	3608      	adds	r6, #8
	 * a Pairing Failed command with the reason set to "Pairing Not
	 * Supported" when any command is received.
	 * Core Specification Vol. 3, Part H, 3.3
	 */

	buf = bt_l2cap_create_pdu(NULL, 0);
    61d8:	0004      	movs	r4, r0
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
    61da:	2101      	movs	r1, #1
    61dc:	0030      	movs	r0, r6
    61de:	f00a f9f1 	bl	105c4 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    61e2:	2505      	movs	r5, #5

	rsp = net_buf_add(buf, sizeof(*rsp));
    61e4:	2101      	movs	r1, #1

	buf = bt_l2cap_create_pdu(NULL, 0);
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    61e6:	7005      	strb	r5, [r0, #0]

	rsp = net_buf_add(buf, sizeof(*rsp));
    61e8:	0030      	movs	r0, r6
    61ea:	f00a f9eb 	bl	105c4 <net_buf_simple_add>
    61ee:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    61f0:	7005      	strb	r5, [r0, #0]
    61f2:	0022      	movs	r2, r4
    61f4:	0038      	movs	r0, r7
    61f6:	2106      	movs	r1, #6
    61f8:	f7fd ffdc 	bl	41b4 <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}
    61fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000061fe <bt_smp_sign_verify>:
    61fe:	2023      	movs	r0, #35	; 0x23
    6200:	4240      	negs	r0, r0
    6202:	4770      	bx	lr

00006204 <bt_smp_init>:

	return -ENOMEM;
}

int bt_smp_init(void)
{
    6204:	b510      	push	{r4, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6206:	4802      	ldr	r0, [pc, #8]	; (6210 <bt_smp_init+0xc>)
    6208:	f7fd ff10 	bl	402c <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    620c:	2000      	movs	r0, #0
    620e:	bd10      	pop	{r4, pc}
    6210:	200003f8 	.word	0x200003f8

00006214 <evt_create>:
static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    6214:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    6216:	3008      	adds	r0, #8
static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    6218:	000d      	movs	r5, r1
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    621a:	2102      	movs	r1, #2
static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    621c:	0014      	movs	r4, r2
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    621e:	f00a f9d1 	bl	105c4 <net_buf_simple_add>
	hdr->evt = evt;
    6222:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    6224:	7044      	strb	r4, [r0, #1]
}
    6226:	bd70      	pop	{r4, r5, r6, pc}

00006228 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BLUETOOTH_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    6228:	b570      	push	{r4, r5, r6, lr}
    622a:	0005      	movs	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    622c:	2001      	movs	r0, #1
    622e:	4240      	negs	r0, r0
    6230:	f7fd f998 	bl	3564 <bt_buf_get_cmd_complete>
    6234:	0004      	movs	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    6236:	2204      	movs	r2, #4
    6238:	210f      	movs	r1, #15
    623a:	f7ff ffeb 	bl	6214 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    623e:	0020      	movs	r0, r4
    6240:	2104      	movs	r1, #4
    6242:	3008      	adds	r0, #8
    6244:	f00a f9be 	bl	105c4 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    6248:	2301      	movs	r3, #1
    624a:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    624c:	4b03      	ldr	r3, [pc, #12]	; (625c <cmd_status+0x34>)

	buf = bt_buf_get_cmd_complete(K_FOREVER);
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
    624e:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
	cs->opcode = sys_cpu_to_le16(_opcode);
    6250:	781a      	ldrb	r2, [r3, #0]
    6252:	785b      	ldrb	r3, [r3, #1]
    6254:	7082      	strb	r2, [r0, #2]
    6256:	70c3      	strb	r3, [r0, #3]

	return buf;
}
    6258:	0020      	movs	r0, r4
    625a:	bd70      	pop	{r4, r5, r6, pc}
    625c:	20000cc8 	.word	0x20000cc8

00006260 <cmd_complete>:
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    6260:	b570      	push	{r4, r5, r6, lr}
    6262:	0004      	movs	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    6264:	2001      	movs	r0, #1
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    6266:	000d      	movs	r5, r1
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    6268:	4240      	negs	r0, r0
    626a:	f7fd f97b 	bl	3564 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    626e:	1cea      	adds	r2, r5, #3

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    6270:	6020      	str	r0, [r4, #0]

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    6272:	b2d2      	uxtb	r2, r2
    6274:	210e      	movs	r1, #14
    6276:	f7ff ffcd 	bl	6214 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    627a:	6820      	ldr	r0, [r4, #0]
    627c:	2103      	movs	r1, #3
    627e:	3008      	adds	r0, #8
    6280:	f00a f9a0 	bl	105c4 <net_buf_simple_add>
	cc->ncmd = 1;
    6284:	2301      	movs	r3, #1
    6286:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    6288:	4b05      	ldr	r3, [pc, #20]	; (62a0 <cmd_complete+0x40>)

	return net_buf_add(*buf, plen);
    628a:	0029      	movs	r1, r5

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);

	cc = net_buf_add(*buf, sizeof(*cc));
	cc->ncmd = 1;
	cc->opcode = sys_cpu_to_le16(_opcode);
    628c:	781a      	ldrb	r2, [r3, #0]
    628e:	785b      	ldrb	r3, [r3, #1]
    6290:	7042      	strb	r2, [r0, #1]
    6292:	7083      	strb	r3, [r0, #2]

	return net_buf_add(*buf, plen);
    6294:	6820      	ldr	r0, [r4, #0]
    6296:	3008      	adds	r0, #8
    6298:	f00a f994 	bl	105c4 <net_buf_simple_add>
}
    629c:	bd70      	pop	{r4, r5, r6, pc}
    629e:	46c0      	nop			; (mov r8, r8)
    62a0:	20000cc8 	.word	0x20000cc8

000062a4 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    62a4:	b570      	push	{r4, r5, r6, lr}
    62a6:	0004      	movs	r4, r0
    62a8:	0015      	movs	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    62aa:	3201      	adds	r2, #1
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    62ac:	000e      	movs	r6, r1
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    62ae:	b2d2      	uxtb	r2, r2
	me = net_buf_add(buf, sizeof(*me));
    62b0:	3408      	adds	r4, #8

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    62b2:	213e      	movs	r1, #62	; 0x3e
    62b4:	f7ff ffae 	bl	6214 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    62b8:	2101      	movs	r1, #1
    62ba:	0020      	movs	r0, r4
    62bc:	f00a f982 	bl	105c4 <net_buf_simple_add>
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    62c0:	0029      	movs	r1, r5
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    62c2:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    62c4:	0020      	movs	r0, r4
    62c6:	f00a f97d 	bl	105c4 <net_buf_simple_add>
}
    62ca:	bd70      	pop	{r4, r5, r6, pc}

000062cc <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    62cc:	4b0c      	ldr	r3, [pc, #48]	; (6300 <encrypt_change+0x34>)
	       sizeof(u16_t));
}

static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
    62ce:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    62d0:	681b      	ldr	r3, [r3, #0]
	       sizeof(u16_t));
}

static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
    62d2:	0004      	movs	r4, r0
    62d4:	000d      	movs	r5, r1
    62d6:	0016      	movs	r6, r2
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    62d8:	061b      	lsls	r3, r3, #24
    62da:	d510      	bpl.n	62fe <encrypt_change+0x32>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    62dc:	2204      	movs	r2, #4
    62de:	2108      	movs	r1, #8
    62e0:	0030      	movs	r0, r6
    62e2:	f7ff ff97 	bl	6214 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    62e6:	0030      	movs	r0, r6
    62e8:	2104      	movs	r1, #4
    62ea:	3008      	adds	r0, #8
    62ec:	f00a f96a 	bl	105c4 <net_buf_simple_add>

	ep->status = err;
    62f0:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    62f2:	4263      	negs	r3, r4
    62f4:	4163      	adcs	r3, r4

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
    62f6:	7045      	strb	r5, [r0, #1]
    62f8:	0a2d      	lsrs	r5, r5, #8
    62fa:	7085      	strb	r5, [r0, #2]
	ep->encrypt = !err ? 1 : 0;
    62fc:	70c3      	strb	r3, [r0, #3]
}
    62fe:	bd70      	pop	{r4, r5, r6, pc}
    6300:	20000418 	.word	0x20000418

00006304 <le_remote_feat_complete>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    6304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6306:	0014      	movs	r4, r2
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6308:	4a10      	ldr	r2, [pc, #64]	; (634c <le_remote_feat_complete+0x48>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    630a:	0007      	movs	r7, r0
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    630c:	6852      	ldr	r2, [r2, #4]
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    630e:	000e      	movs	r6, r1
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6310:	0092      	lsls	r2, r2, #2
    6312:	d519      	bpl.n	6348 <le_remote_feat_complete+0x44>
    6314:	2508      	movs	r5, #8
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    6316:	4a0e      	ldr	r2, [pc, #56]	; (6350 <le_remote_feat_complete+0x4c>)
static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6318:	6812      	ldr	r2, [r2, #0]
    631a:	422a      	tst	r2, r5
    631c:	d014      	beq.n	6348 <le_remote_feat_complete+0x44>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    631e:	220b      	movs	r2, #11
    6320:	2104      	movs	r1, #4
    6322:	0018      	movs	r0, r3
    6324:	f7ff ffbe 	bl	62a4 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
    6328:	7044      	strb	r4, [r0, #1]
    632a:	40ec      	lsrs	r4, r5
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
    632c:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    632e:	7084      	strb	r4, [r0, #2]
    6330:	3003      	adds	r0, #3
	if (!status) {
    6332:	2f00      	cmp	r7, #0
    6334:	d104      	bne.n	6340 <le_remote_feat_complete+0x3c>
		memcpy(&sep->features[0],
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
    6336:	1d31      	adds	r1, r6, #4
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    6338:	002a      	movs	r2, r5
    633a:	f7fa fc88 	bl	c4e <memcpy>
    633e:	e003      	b.n	6348 <le_remote_feat_complete+0x44>
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    6340:	002a      	movs	r2, r5
    6342:	2100      	movs	r1, #0
    6344:	f7fa fcad 	bl	ca2 <memset>
	}
}
    6348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    634a:	46c0      	nop			; (mov r8, r8)
    634c:	20000418 	.word	0x20000418
    6350:	20000420 	.word	0x20000420

00006354 <bt_addr_le_to_str.constprop.57>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    6354:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    6356:	7803      	ldrb	r3, [r0, #0]
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    6358:	b088      	sub	sp, #32
    635a:	0004      	movs	r4, r0
    635c:	000e      	movs	r6, r1
    635e:	ad06      	add	r5, sp, #24
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    6360:	2b00      	cmp	r3, #0
    6362:	d003      	beq.n	636c <bt_addr_le_to_str.constprop.57+0x18>
    6364:	2b01      	cmp	r3, #1
    6366:	d106      	bne.n	6376 <bt_addr_le_to_str.constprop.57+0x22>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    6368:	490f      	ldr	r1, [pc, #60]	; (63a8 <bt_addr_le_to_str.constprop.57+0x54>)
    636a:	e000      	b.n	636e <bt_addr_le_to_str.constprop.57+0x1a>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    636c:	490f      	ldr	r1, [pc, #60]	; (63ac <bt_addr_le_to_str.constprop.57+0x58>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    636e:	0028      	movs	r0, r5
    6370:	f7fa fc3a 	bl	be8 <strcpy>
    6374:	e004      	b.n	6380 <bt_addr_le_to_str.constprop.57+0x2c>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    6376:	4a0e      	ldr	r2, [pc, #56]	; (63b0 <bt_addr_le_to_str.constprop.57+0x5c>)
    6378:	2107      	movs	r1, #7
    637a:	0028      	movs	r0, r5
    637c:	f7fb fa96 	bl	18ac <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    6380:	7862      	ldrb	r2, [r4, #1]
    6382:	79a3      	ldrb	r3, [r4, #6]
    6384:	9204      	str	r2, [sp, #16]
    6386:	78a2      	ldrb	r2, [r4, #2]
    6388:	9505      	str	r5, [sp, #20]
    638a:	9203      	str	r2, [sp, #12]
    638c:	78e2      	ldrb	r2, [r4, #3]
    638e:	211b      	movs	r1, #27
    6390:	9202      	str	r2, [sp, #8]
    6392:	7922      	ldrb	r2, [r4, #4]
    6394:	0030      	movs	r0, r6
    6396:	9201      	str	r2, [sp, #4]
    6398:	7962      	ldrb	r2, [r4, #5]
    639a:	9200      	str	r2, [sp, #0]
    639c:	4a05      	ldr	r2, [pc, #20]	; (63b4 <bt_addr_le_to_str.constprop.57+0x60>)
    639e:	f7fb fa85 	bl	18ac <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    63a2:	b008      	add	sp, #32
    63a4:	bd70      	pop	{r4, r5, r6, pc}
    63a6:	46c0      	nop			; (mov r8, r8)
    63a8:	00012386 	.word	0x00012386
    63ac:	0001237f 	.word	0x0001237f
    63b0:	0001238d 	.word	0x0001238d
    63b4:	00012394 	.word	0x00012394

000063b8 <le_adv_ext_report.isra.53>:
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    63b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63ba:	0004      	movs	r4, r0
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
    63bc:	4b35      	ldr	r3, [pc, #212]	; (6494 <le_adv_ext_report.isra.53+0xdc>)
{
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
		 offsetof(struct pdu_adv, payload) + adv->len];
    63be:	7840      	ldrb	r0, [r0, #1]
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    63c0:	b093      	sub	sp, #76	; 0x4c
			      struct net_buf *buf, u8_t phy)
{
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    63c2:	1809      	adds	r1, r1, r0
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
    63c4:	9307      	str	r3, [sp, #28]
    63c6:	7a8b      	ldrb	r3, [r1, #10]
    63c8:	4f33      	ldr	r7, [pc, #204]	; (6498 <le_adv_ext_report.isra.53+0xe0>)
    63ca:	9306      	str	r3, [sp, #24]
    63cc:	7823      	ldrb	r3, [r4, #0]
    63ce:	4e33      	ldr	r6, [pc, #204]	; (649c <le_adv_ext_report.isra.53+0xe4>)
    63d0:	09d9      	lsrs	r1, r3, #7
    63d2:	9105      	str	r1, [sp, #20]
    63d4:	0659      	lsls	r1, r3, #25
    63d6:	071b      	lsls	r3, r3, #28
    63d8:	0f1b      	lsrs	r3, r3, #28
    63da:	9302      	str	r3, [sp, #8]
    63dc:	4b30      	ldr	r3, [pc, #192]	; (64a0 <le_adv_ext_report.isra.53+0xe8>)
    63de:	0fc9      	lsrs	r1, r1, #31
    63e0:	9104      	str	r1, [sp, #16]
    63e2:	9003      	str	r0, [sp, #12]
    63e4:	9201      	str	r2, [sp, #4]
    63e6:	9300      	str	r3, [sp, #0]
    63e8:	003a      	movs	r2, r7
    63ea:	4b2e      	ldr	r3, [pc, #184]	; (64a4 <le_adv_ext_report.isra.53+0xec>)
    63ec:	0031      	movs	r1, r6
    63ee:	482e      	ldr	r0, [pc, #184]	; (64a8 <le_adv_ext_report.isra.53+0xf0>)
    63f0:	f7fb fa50 	bl	1894 <printk>
		phy, adv->type, adv->len, adv->tx_addr, adv->rx_addr, rssi);

	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    63f4:	230f      	movs	r3, #15
    63f6:	7822      	ldrb	r2, [r4, #0]
    63f8:	4013      	ands	r3, r2
    63fa:	2b07      	cmp	r3, #7
    63fc:	d147      	bne.n	648e <le_adv_ext_report.isra.53+0xd6>
    63fe:	7863      	ldrb	r3, [r4, #1]
    6400:	2b00      	cmp	r3, #0
    6402:	d044      	beq.n	648e <le_adv_ext_report.isra.53+0xd6>

		p = (void *)&adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    6404:	4b23      	ldr	r3, [pc, #140]	; (6494 <le_adv_ext_report.isra.53+0xdc>)
    6406:	0031      	movs	r1, r6
    6408:	9303      	str	r3, [sp, #12]
    640a:	78a3      	ldrb	r3, [r4, #2]
    640c:	4827      	ldr	r0, [pc, #156]	; (64ac <le_adv_ext_report.isra.53+0xf4>)
    640e:	069a      	lsls	r2, r3, #26
    6410:	099b      	lsrs	r3, r3, #6
    6412:	9301      	str	r3, [sp, #4]
    6414:	4b22      	ldr	r3, [pc, #136]	; (64a0 <le_adv_ext_report.isra.53+0xe8>)
    6416:	0e92      	lsrs	r2, r2, #26
    6418:	9202      	str	r2, [sp, #8]
    641a:	9300      	str	r3, [sp, #0]
    641c:	003a      	movs	r2, r7
    641e:	4b21      	ldr	r3, [pc, #132]	; (64a4 <le_adv_ext_report.isra.53+0xec>)
    6420:	f7fb fa38 	bl	1894 <printk>
			p->ext_hdr_len);

		if (!p->ext_hdr_len) {
    6424:	78a3      	ldrb	r3, [r4, #2]
    6426:	069b      	lsls	r3, r3, #26
    6428:	d031      	beq.n	648e <le_adv_ext_report.isra.53+0xd6>
			goto no_ext_hdr;
		}

		if (h->adv_addr) {
    642a:	78e3      	ldrb	r3, [r4, #3]
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
    642c:	1d25      	adds	r5, r4, #4

		if (!p->ext_hdr_len) {
			goto no_ext_hdr;
		}

		if (h->adv_addr) {
    642e:	07db      	lsls	r3, r3, #31
    6430:	d51d      	bpl.n	646e <le_adv_ext_report.isra.53+0xb6>
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
    6432:	2124      	movs	r1, #36	; 0x24
    6434:	466a      	mov	r2, sp
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    6436:	2025      	movs	r0, #37	; 0x25

		if (h->adv_addr) {
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
    6438:	7823      	ldrb	r3, [r4, #0]
    643a:	1852      	adds	r2, r2, r1
    643c:	065b      	lsls	r3, r3, #25
    643e:	0fdb      	lsrs	r3, r3, #31
    6440:	7013      	strb	r3, [r2, #0]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    6442:	0029      	movs	r1, r5
    6444:	2206      	movs	r2, #6
    6446:	4468      	add	r0, sp
    6448:	f7fa fc01 	bl	c4e <memcpy>
			ptr += BDADDR_SIZE;

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    644c:	a90b      	add	r1, sp, #44	; 0x2c
    644e:	a809      	add	r0, sp, #36	; 0x24
    6450:	f7ff ff80 	bl	6354 <bt_addr_le_to_str.constprop.57>

			BT_WARN("AdvA: %s", addr_str);
    6454:	4b0f      	ldr	r3, [pc, #60]	; (6494 <le_adv_ext_report.isra.53+0xdc>)
    6456:	003a      	movs	r2, r7
    6458:	9302      	str	r3, [sp, #8]
    645a:	ab0b      	add	r3, sp, #44	; 0x2c
    645c:	9301      	str	r3, [sp, #4]
    645e:	4b10      	ldr	r3, [pc, #64]	; (64a0 <le_adv_ext_report.isra.53+0xe8>)
    6460:	0031      	movs	r1, r6
    6462:	9300      	str	r3, [sp, #0]
    6464:	4812      	ldr	r0, [pc, #72]	; (64b0 <le_adv_ext_report.isra.53+0xf8>)
    6466:	4b0f      	ldr	r3, [pc, #60]	; (64a4 <le_adv_ext_report.isra.53+0xec>)
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
			ptr += BDADDR_SIZE;
    6468:	3506      	adds	r5, #6

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));

			BT_WARN("AdvA: %s", addr_str);
    646a:	f7fb fa13 	bl	1894 <printk>

		}

		if (h->tx_pwr) {
    646e:	78e3      	ldrb	r3, [r4, #3]
    6470:	065b      	lsls	r3, r3, #25
    6472:	d50c      	bpl.n	648e <le_adv_ext_report.isra.53+0xd6>
			s8_t tx_pwr;

			tx_pwr = *(s8_t *)ptr;
			ptr++;

			BT_WARN("Tx pwr= %d dB", tx_pwr);
    6474:	4b07      	ldr	r3, [pc, #28]	; (6494 <le_adv_ext_report.isra.53+0xdc>)
    6476:	4a08      	ldr	r2, [pc, #32]	; (6498 <le_adv_ext_report.isra.53+0xe0>)
    6478:	9302      	str	r3, [sp, #8]
    647a:	2300      	movs	r3, #0
    647c:	56eb      	ldrsb	r3, [r5, r3]
    647e:	4907      	ldr	r1, [pc, #28]	; (649c <le_adv_ext_report.isra.53+0xe4>)
    6480:	9301      	str	r3, [sp, #4]
    6482:	4b07      	ldr	r3, [pc, #28]	; (64a0 <le_adv_ext_report.isra.53+0xe8>)
    6484:	480b      	ldr	r0, [pc, #44]	; (64b4 <le_adv_ext_report.isra.53+0xfc>)
    6486:	9300      	str	r3, [sp, #0]
    6488:	4b06      	ldr	r3, [pc, #24]	; (64a4 <le_adv_ext_report.isra.53+0xec>)
    648a:	f7fb fa03 	bl	1894 <printk>
		/* TODO: length check? */
	}

no_ext_hdr:
	return;
}
    648e:	b013      	add	sp, #76	; 0x4c
    6490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6492:	46c0      	nop			; (mov r8, r8)
    6494:	0001241d 	.word	0x0001241d
    6498:	000123dc 	.word	0x000123dc
    649c:	000123e3 	.word	0x000123e3
    64a0:	00012422 	.word	0x00012422
    64a4:	00014792 	.word	0x00014792
    64a8:	00013204 	.word	0x00013204
    64ac:	00013252 	.word	0x00013252
    64b0:	00013283 	.word	0x00013283
    64b4:	0001329c 	.word	0x0001329c

000064b8 <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    64b8:	b530      	push	{r4, r5, lr}
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    64ba:	7842      	ldrb	r2, [r0, #1]
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    64bc:	0003      	movs	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    64be:	7804      	ldrb	r4, [r0, #0]
    64c0:	7880      	ldrb	r0, [r0, #2]
    64c2:	0212      	lsls	r2, r2, #8
    64c4:	4322      	orrs	r2, r4
    64c6:	0400      	lsls	r0, r0, #16
    64c8:	0011      	movs	r1, r2
    64ca:	0002      	movs	r2, r0
    64cc:	78d8      	ldrb	r0, [r3, #3]
    64ce:	430a      	orrs	r2, r1
    64d0:	0600      	lsls	r0, r0, #24
    64d2:	4310      	orrs	r0, r2
    64d4:	795a      	ldrb	r2, [r3, #5]
    64d6:	791d      	ldrb	r5, [r3, #4]
    64d8:	7999      	ldrb	r1, [r3, #6]
    64da:	0212      	lsls	r2, r2, #8
    64dc:	432a      	orrs	r2, r5
    64de:	0409      	lsls	r1, r1, #16
    64e0:	0014      	movs	r4, r2
    64e2:	000a      	movs	r2, r1
    64e4:	79d9      	ldrb	r1, [r3, #7]
    64e6:	4322      	orrs	r2, r4
    64e8:	0609      	lsls	r1, r1, #24
    64ea:	4311      	orrs	r1, r2
}
    64ec:	bd30      	pop	{r4, r5, pc}
	...

000064f0 <hci_cmd_handle>:

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    64f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    64f2:	2500      	movs	r5, #0

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    64f4:	b095      	sub	sp, #84	; 0x54
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    64f6:	950f      	str	r5, [sp, #60]	; 0x3c

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    64f8:	0004      	movs	r4, r0
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
	u16_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    64fa:	8980      	ldrh	r0, [r0, #12]
    64fc:	2802      	cmp	r0, #2
    64fe:	d808      	bhi.n	6512 <hci_cmd_handle+0x22>
		BT_ERR("No HCI Command header");
    6500:	4bb9      	ldr	r3, [pc, #740]	; (67e8 <hci_cmd_handle+0x2f8>)
    6502:	4aba      	ldr	r2, [pc, #744]	; (67ec <hci_cmd_handle+0x2fc>)
    6504:	9301      	str	r3, [sp, #4]
    6506:	4bba      	ldr	r3, [pc, #744]	; (67f0 <hci_cmd_handle+0x300>)
    6508:	49ba      	ldr	r1, [pc, #744]	; (67f4 <hci_cmd_handle+0x304>)
    650a:	9300      	str	r3, [sp, #0]
    650c:	48ba      	ldr	r0, [pc, #744]	; (67f8 <hci_cmd_handle+0x308>)
    650e:	4bbb      	ldr	r3, [pc, #748]	; (67fc <hci_cmd_handle+0x30c>)
    6510:	e011      	b.n	6536 <hci_cmd_handle+0x46>
		return NULL;
	}

	chdr = (void *)cmd->data;
    6512:	68a3      	ldr	r3, [r4, #8]
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    6514:	4eba      	ldr	r6, [pc, #744]	; (6800 <hci_cmd_handle+0x310>)
    6516:	785a      	ldrb	r2, [r3, #1]
    6518:	7819      	ldrb	r1, [r3, #0]
    651a:	0212      	lsls	r2, r2, #8
    651c:	430a      	orrs	r2, r1
    651e:	8032      	strh	r2, [r6, #0]

	if (cmd->len < chdr->param_len) {
    6520:	789b      	ldrb	r3, [r3, #2]
    6522:	4283      	cmp	r3, r0
    6524:	d90b      	bls.n	653e <hci_cmd_handle+0x4e>
		BT_ERR("Invalid HCI CMD packet length");
    6526:	4bb0      	ldr	r3, [pc, #704]	; (67e8 <hci_cmd_handle+0x2f8>)
    6528:	4ab0      	ldr	r2, [pc, #704]	; (67ec <hci_cmd_handle+0x2fc>)
    652a:	9301      	str	r3, [sp, #4]
    652c:	4bb0      	ldr	r3, [pc, #704]	; (67f0 <hci_cmd_handle+0x300>)
    652e:	49b1      	ldr	r1, [pc, #708]	; (67f4 <hci_cmd_handle+0x304>)
    6530:	9300      	str	r3, [sp, #0]
    6532:	48b4      	ldr	r0, [pc, #720]	; (6804 <hci_cmd_handle+0x314>)
    6534:	4bb1      	ldr	r3, [pc, #708]	; (67fc <hci_cmd_handle+0x30c>)
    6536:	f7fb f9ad 	bl	1894 <printk>
		return NULL;
    653a:	0028      	movs	r0, r5
    653c:	e362      	b.n	6c04 <hci_cmd_handle+0x714>
	}

	net_buf_pull(cmd, sizeof(*chdr));
    653e:	0020      	movs	r0, r4
    6540:	2103      	movs	r1, #3
    6542:	3008      	adds	r0, #8
    6544:	f00a f85f 	bl	10606 <net_buf_simple_pull>

	ocf = BT_OCF(_opcode);
    6548:	8833      	ldrh	r3, [r6, #0]

	switch (BT_OGF(_opcode)) {
    654a:	0a98      	lsrs	r0, r3, #10
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));

	ocf = BT_OCF(_opcode);
    654c:	059d      	lsls	r5, r3, #22

	switch (BT_OGF(_opcode)) {
    654e:	3801      	subs	r0, #1
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));

	ocf = BT_OCF(_opcode);
    6550:	0dad      	lsrs	r5, r5, #22

	switch (BT_OGF(_opcode)) {
    6552:	2807      	cmp	r0, #7
    6554:	d900      	bls.n	6558 <hci_cmd_handle+0x68>
    6556:	e34e      	b.n	6bf6 <hci_cmd_handle+0x706>
    6558:	f7f9 fe22 	bl	1a0 <__gnu_thumb1_case_uhi>
    655c:	034d0008 	.word	0x034d0008
    6560:	0045001e 	.word	0x0045001e
    6564:	034d034d 	.word	0x034d034d
    6568:	00c7034d 	.word	0x00c7034d
#endif /* CONFIG_BLUETOOTH_CONN */

static int link_control_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				   struct net_buf **evt)
{
	switch (ocf) {
    656c:	2d06      	cmp	r5, #6
    656e:	d00a      	beq.n	6586 <hci_cmd_handle+0x96>
    6570:	2d1d      	cmp	r5, #29
    6572:	d000      	beq.n	6576 <hci_cmd_handle+0x86>
    6574:	e33f      	b.n	6bf6 <hci_cmd_handle+0x706>
{
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    6576:	68a2      	ldr	r2, [r4, #8]
    6578:	7850      	ldrb	r0, [r2, #1]
    657a:	7813      	ldrb	r3, [r2, #0]
    657c:	0200      	lsls	r0, r0, #8
	status = ll_version_ind_send(handle);
    657e:	4318      	orrs	r0, r3
    6580:	f008 f955 	bl	e82e <ll_version_ind_send>
    6584:	e2cd      	b.n	6b22 <hci_cmd_handle+0x632>
    6586:	68a2      	ldr	r2, [r4, #8]
{
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    6588:	7850      	ldrb	r0, [r2, #1]
    658a:	7813      	ldrb	r3, [r2, #0]
    658c:	0200      	lsls	r0, r0, #8
	status = ll_terminate_ind_send(handle, cmd->reason);
    658e:	7891      	ldrb	r1, [r2, #2]
    6590:	4318      	orrs	r0, r3
    6592:	f008 f962 	bl	e85a <ll_terminate_ind_send>
    6596:	e2c4      	b.n	6b22 <hci_cmd_handle+0x632>
#endif

static int ctrl_bb_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			      struct net_buf **evt)
{
	switch (ocf) {
    6598:	2d03      	cmp	r5, #3
    659a:	d00c      	beq.n	65b6 <hci_cmd_handle+0xc6>
    659c:	2d63      	cmp	r5, #99	; 0x63
    659e:	d01d      	beq.n	65dc <hci_cmd_handle+0xec>
    65a0:	2d01      	cmp	r5, #1
    65a2:	d000      	beq.n	65a6 <hci_cmd_handle+0xb6>
    65a4:	e327      	b.n	6bf6 <hci_cmd_handle+0x706>
static void set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	event_mask = sys_get_le64(cmd->events);
    65a6:	68a0      	ldr	r0, [r4, #8]
    65a8:	f7ff ff86 	bl	64b8 <sys_get_le64>
    65ac:	4b96      	ldr	r3, [pc, #600]	; (6808 <hci_cmd_handle+0x318>)
    65ae:	6018      	str	r0, [r3, #0]
    65b0:	6059      	str	r1, [r3, #4]

	ccst = cmd_complete(evt, sizeof(*ccst));
    65b2:	0029      	movs	r1, r5
    65b4:	e30e      	b.n	6bd4 <hci_cmd_handle+0x6e4>

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    65b6:	2001      	movs	r0, #1
    65b8:	4994      	ldr	r1, [pc, #592]	; (680c <hci_cmd_handle+0x31c>)
    65ba:	4b93      	ldr	r3, [pc, #588]	; (6808 <hci_cmd_handle+0x318>)
    65bc:	4240      	negs	r0, r0
    65be:	6018      	str	r0, [r3, #0]
    65c0:	6059      	str	r1, [r3, #4]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    65c2:	2000      	movs	r0, #0
    65c4:	2100      	movs	r1, #0
    65c6:	4b92      	ldr	r3, [pc, #584]	; (6810 <hci_cmd_handle+0x320>)
    65c8:	6018      	str	r0, [r3, #0]
    65ca:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    65cc:	201f      	movs	r0, #31
    65ce:	2100      	movs	r1, #0
    65d0:	4b90      	ldr	r3, [pc, #576]	; (6814 <hci_cmd_handle+0x324>)
    65d2:	6018      	str	r0, [r3, #0]
    65d4:	6059      	str	r1, [r3, #4]

	if (buf) {
		ll_reset();
    65d6:	f007 fff9 	bl	e5cc <ll_reset>
    65da:	e2fa      	b.n	6bd2 <hci_cmd_handle+0x6e2>
static void set_event_mask_page_2(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    65dc:	68a0      	ldr	r0, [r4, #8]
    65de:	f7ff ff6b 	bl	64b8 <sys_get_le64>
    65e2:	4b8b      	ldr	r3, [pc, #556]	; (6810 <hci_cmd_handle+0x320>)
    65e4:	e0d9      	b.n	679a <hci_cmd_handle+0x2aa>
}

static int info_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			   struct net_buf **evt)
{
	switch (ocf) {
    65e6:	1e68      	subs	r0, r5, #1
    65e8:	2808      	cmp	r0, #8
    65ea:	d900      	bls.n	65ee <hci_cmd_handle+0xfe>
    65ec:	e303      	b.n	6bf6 <hci_cmd_handle+0x706>
    65ee:	f7f9 fdd7 	bl	1a0 <__gnu_thumb1_case_uhi>
    65f2:	0009      	.short	0x0009
    65f4:	00630018 	.word	0x00630018
    65f8:	03020302 	.word	0x03020302
    65fc:	03020302 	.word	0x03020302
    6600:	00710302 	.word	0x00710302

static void read_local_version_info(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    6604:	2109      	movs	r1, #9
    6606:	a80f      	add	r0, sp, #60	; 0x3c
    6608:	f7ff fe2a 	bl	6260 <cmd_complete>

	rp->status = 0x00;
    660c:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
    660e:	2209      	movs	r2, #9
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    6610:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
	rp->hci_revision = sys_cpu_to_le16(0);
    6612:	7083      	strb	r3, [r0, #2]
    6614:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    6616:	3b01      	subs	r3, #1
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
	rp->hci_version = BT_HCI_VERSION_5_0;
    6618:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    661a:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    661c:	7143      	strb	r3, [r0, #5]
    661e:	7183      	strb	r3, [r0, #6]
    6620:	e145      	b.n	68ae <hci_cmd_handle+0x3be>

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    6622:	2141      	movs	r1, #65	; 0x41
    6624:	a80f      	add	r0, sp, #60	; 0x3c
    6626:	f7ff fe1b 	bl	6260 <cmd_complete>

	rp->status = 0x00;
    662a:	2100      	movs	r1, #0

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    662c:	0004      	movs	r4, r0
	rp->commands[27] |= BIT(6) | BIT(7);
	/* LE Read Supported States */
	rp->commands[28] |= BIT(3);
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
	/* LE Set Adv Params, LE Read Adv Channel TX Power, LE Set Adv Data */
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    662e:	2609      	movs	r6, #9
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    6630:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    6632:	2240      	movs	r2, #64	; 0x40
    6634:	3001      	adds	r0, #1
    6636:	f7fa fb34 	bl	ca2 <memset>
	rp->commands[27] |= BIT(6) | BIT(7);
	/* LE Read Supported States */
	rp->commands[28] |= BIT(3);
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
	/* LE Set Adv Params, LE Read Adv Channel TX Power, LE Set Adv Data */
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    663a:	7ea5      	ldrb	r5, [r4, #26]
    663c:	4276      	negs	r6, r6
    663e:	4335      	orrs	r5, r6
    6640:	76a5      	strb	r5, [r4, #26]
	/* LE Set Scan Response Data, LE Set Adv Enable */
	rp->commands[26] |= BIT(0) | BIT(1);
    6642:	253d      	movs	r5, #61	; 0x3d

	rp->status = 0x00;
	memset(&rp->commands[0], 0, sizeof(rp->commands));

	/* Set Event Mask, and Reset. */
	rp->commands[5] |= BIT(6) | BIT(7);
    6644:	2240      	movs	r2, #64	; 0x40
	/* LE Set Event Mask, LE Read Buffer Size, LE Read Local Supp Feats,
	 * Set Random Addr
	 */
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
	/* LE Read WL Size, LE Clear WL */
	rp->commands[26] |= BIT(6) | BIT(7);
    6646:	7ee1      	ldrb	r1, [r4, #27]
	rp->commands[28] |= BIT(3);
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
	/* LE Set Adv Params, LE Read Adv Channel TX Power, LE Set Adv Data */
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
	/* LE Set Scan Response Data, LE Set Adv Enable */
	rp->commands[26] |= BIT(0) | BIT(1);
    6648:	426d      	negs	r5, r5
    664a:	4329      	orrs	r1, r5
    664c:	76e1      	strb	r1, [r4, #27]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */
#endif /* CONFIG_BLUETOOTH_CENTRAL */
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	/* LE LTK Request Reply, LE LTK Request Negative Reply */
	rp->commands[28] |= BIT(1) | BIT(2);
    664e:	210e      	movs	r1, #14

	rp->status = 0x00;
	memset(&rp->commands[0], 0, sizeof(rp->commands));

	/* Set Event Mask, and Reset. */
	rp->commands[5] |= BIT(6) | BIT(7);
    6650:	79a3      	ldrb	r3, [r4, #6]
    6652:	4252      	negs	r2, r2
    6654:	4313      	orrs	r3, r2
    6656:	71a3      	strb	r3, [r4, #6]
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	/* Set FC, Host Buffer Size and Host Num Completed */
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
#endif
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
    6658:	7be3      	ldrb	r3, [r4, #15]
    665a:	3268      	adds	r2, #104	; 0x68
    665c:	4313      	orrs	r3, r2
    665e:	73e3      	strb	r3, [r4, #15]
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
    6660:	7c23      	ldrb	r3, [r4, #16]
    6662:	3a26      	subs	r2, #38	; 0x26
    6664:	4313      	orrs	r3, r2
	/* LE Add Dev to WL, LE Remove Dev from WL */
	rp->commands[27] |= BIT(0) | BIT(1);
	/* LE Encrypt, LE Rand */
	rp->commands[27] |= BIT(6) | BIT(7);
	/* LE Read Supported States */
	rp->commands[28] |= BIT(3);
    6666:	7f62      	ldrb	r2, [r4, #29]
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
	/* Set Event Mask Page 2 */
	rp->commands[22] |= BIT(2);
    6668:	2004      	movs	r0, #4
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */
#endif /* CONFIG_BLUETOOTH_CENTRAL */
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	/* LE LTK Request Reply, LE LTK Request Negative Reply */
	rp->commands[28] |= BIT(1) | BIT(2);
    666a:	430a      	orrs	r2, r1
    666c:	7762      	strb	r2, [r4, #29]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */
#endif
#if defined(CONFIG_BLUETOOTH_CONN)
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
    666e:	7862      	ldrb	r2, [r4, #1]
    6670:	3112      	adds	r1, #18
    6672:	430a      	orrs	r2, r1
    6674:	7062      	strb	r2, [r4, #1]
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
    6676:	2219      	movs	r2, #25
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
#endif
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
    6678:	7423      	strb	r3, [r4, #16]
	/* Set Event Mask Page 2 */
	rp->commands[22] |= BIT(2);
    667a:	7de3      	ldrb	r3, [r4, #23]
#endif
#if defined(CONFIG_BLUETOOTH_CONN)
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
    667c:	4252      	negs	r2, r2
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
	/* Set Event Mask Page 2 */
	rp->commands[22] |= BIT(2);
    667e:	4303      	orrs	r3, r0
    6680:	75e3      	strb	r3, [r4, #23]
	 */
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
	/* LE Read WL Size, LE Clear WL */
	rp->commands[26] |= BIT(6) | BIT(7);
	/* LE Add Dev to WL, LE Remove Dev from WL */
	rp->commands[27] |= BIT(0) | BIT(1);
    6682:	7f23      	ldrb	r3, [r4, #28]
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    6684:	1d65      	adds	r5, r4, #5
#endif
#if defined(CONFIG_BLUETOOTH_CONN)
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
    6686:	4313      	orrs	r3, r2
    6688:	7723      	strb	r3, [r4, #28]
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    668a:	7feb      	ldrb	r3, [r5, #31]
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] |= BIT(4) | BIT(5);
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    668c:	1826      	adds	r6, r4, r0
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] |= BIT(4) | BIT(5);
    668e:	1ce7      	adds	r7, r4, #3
    6690:	7ff9      	ldrb	r1, [r7, #31]
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    6692:	7ff2      	ldrb	r2, [r6, #31]
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
	/* LE Set Privacy Mode */
	rp->commands[39] |= BIT(2);
    6694:	3428      	adds	r4, #40	; 0x28
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    6696:	930d      	str	r3, [sp, #52]	; 0x34
	/* LE Set Privacy Mode */
	rp->commands[39] |= BIT(2);
    6698:	7823      	ldrb	r3, [r4, #0]
    669a:	4318      	orrs	r0, r3
    669c:	7020      	strb	r0, [r4, #0]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Set Data Length, and LE Read Suggested Data Length. */
	rp->commands[33] |= BIT(6) | BIT(7);
    669e:	2010      	movs	r0, #16
    66a0:	4240      	negs	r0, r0
    66a2:	4301      	orrs	r1, r0
    66a4:	77f9      	strb	r1, [r7, #31]
	/* LE Write Suggested Data Length. */
	rp->commands[34] |= BIT(0);
    66a6:	2107      	movs	r1, #7
    66a8:	4249      	negs	r1, r1
    66aa:	430a      	orrs	r2, r1
    66ac:	77f2      	strb	r2, [r6, #31]
	/* LE Read Maximum Data Length. */
	rp->commands[35] |= BIT(3);
    66ae:	220f      	movs	r2, #15
    66b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    66b2:	4313      	orrs	r3, r2
    66b4:	77eb      	strb	r3, [r5, #31]
    66b6:	e29c      	b.n	6bf2 <hci_cmd_handle+0x702>

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    66b8:	2109      	movs	r1, #9
    66ba:	a80f      	add	r0, sp, #60	; 0x3c
    66bc:	f7ff fdd0 	bl	6260 <cmd_complete>

	rp->status = 0x00;
    66c0:	2100      	movs	r1, #0

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    66c2:	0004      	movs	r4, r0

	rp->status = 0x00;
    66c4:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    66c6:	2208      	movs	r2, #8
    66c8:	3001      	adds	r0, #1
    66ca:	f7fa faea 	bl	ca2 <memset>
	/* BR/EDR not supported and LE supported */
	rp->features[4] = (1 << 5) | (1 << 6);
    66ce:	2360      	movs	r3, #96	; 0x60
    66d0:	7163      	strb	r3, [r4, #5]
    66d2:	e28e      	b.n	6bf2 <hci_cmd_handle+0x702>

static void read_bd_addr(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_bd_addr *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    66d4:	2107      	movs	r1, #7
    66d6:	a80f      	add	r0, sp, #60	; 0x3c
    66d8:	f7ff fdc2 	bl	6260 <cmd_complete>
    66dc:	0001      	movs	r1, r0

	rp->status = 0x00;
    66de:	2000      	movs	r0, #0
    66e0:	7008      	strb	r0, [r1, #0]
	ll_addr_get(0, &rp->bdaddr.val[0]);
    66e2:	3101      	adds	r1, #1
    66e4:	f008 fec8 	bl	f478 <ll_addr_get>
    66e8:	e283      	b.n	6bf2 <hci_cmd_handle+0x702>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static int controller_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	switch (ocf) {
    66ea:	1e68      	subs	r0, r5, #1
    66ec:	284d      	cmp	r0, #77	; 0x4d
    66ee:	d900      	bls.n	66f2 <hci_cmd_handle+0x202>
    66f0:	e281      	b.n	6bf6 <hci_cmd_handle+0x706>
    66f2:	f7f9 fd55 	bl	1a0 <__gnu_thumb1_case_uhi>
    66f6:	004e      	.short	0x004e
    66f8:	00610055 	.word	0x00610055
    66fc:	00730280 	.word	0x00730280
    6700:	00fa00df 	.word	0x00fa00df
    6704:	01080102 	.word	0x01080102
    6708:	0280010e 	.word	0x0280010e
    670c:	02800280 	.word	0x02800280
    6710:	00910280 	.word	0x00910280
    6714:	00a4009c 	.word	0x00a4009c
    6718:	013800a8 	.word	0x013800a8
    671c:	02800280 	.word	0x02800280
    6720:	00ac0130 	.word	0x00ac0130
    6724:	028000bf 	.word	0x028000bf
    6728:	0125011d 	.word	0x0125011d
    672c:	028000ca 	.word	0x028000ca
    6730:	02800280 	.word	0x02800280
    6734:	01690150 	.word	0x01690150
    6738:	019e0184 	.word	0x019e0184
    673c:	028001a8 	.word	0x028001a8
    6740:	021f0280 	.word	0x021f0280
    6744:	022a0226 	.word	0x022a0226
    6748:	023d0232 	.word	0x023d0232
    674c:	025b024c 	.word	0x025b024c
    6750:	01b40267 	.word	0x01b40267
    6754:	01e001c0 	.word	0x01e001c0
    6758:	028001f9 	.word	0x028001f9
    675c:	02800280 	.word	0x02800280
    6760:	02800280 	.word	0x02800280
    6764:	02800280 	.word	0x02800280
    6768:	02800280 	.word	0x02800280
    676c:	02800280 	.word	0x02800280
    6770:	02800280 	.word	0x02800280
    6774:	02800280 	.word	0x02800280
    6778:	02800280 	.word	0x02800280
    677c:	02800280 	.word	0x02800280
    6780:	02800280 	.word	0x02800280
    6784:	02800280 	.word	0x02800280
    6788:	02800280 	.word	0x02800280
    678c:	02800280 	.word	0x02800280
    6790:	0274      	.short	0x0274
static void le_set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	le_event_mask = sys_get_le64(cmd->events);
    6792:	68a0      	ldr	r0, [r4, #8]
    6794:	f7ff fe90 	bl	64b8 <sys_get_le64>
    6798:	4b1e      	ldr	r3, [pc, #120]	; (6814 <hci_cmd_handle+0x324>)
    679a:	6018      	str	r0, [r3, #0]
    679c:	6059      	str	r1, [r3, #4]
    679e:	e218      	b.n	6bd2 <hci_cmd_handle+0x6e2>

static void le_read_buffer_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    67a0:	2104      	movs	r1, #4
    67a2:	a80f      	add	r0, sp, #60	; 0x3c
    67a4:	f7ff fd5c 	bl	6260 <cmd_complete>

	rp->status = 0x00;
    67a8:	2300      	movs	r3, #0

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    67aa:	211b      	movs	r1, #27
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    67ac:	7003      	strb	r3, [r0, #0]

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    67ae:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    67b0:	3302      	adds	r3, #2

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    67b2:	7041      	strb	r1, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    67b4:	70c3      	strb	r3, [r0, #3]
    67b6:	e21c      	b.n	6bf2 <hci_cmd_handle+0x702>

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    67b8:	2109      	movs	r1, #9
    67ba:	a80f      	add	r0, sp, #60	; 0x3c
    67bc:	f7ff fd50 	bl	6260 <cmd_complete>

	rp->status = 0x00;
    67c0:	2500      	movs	r5, #0

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    67c2:	0004      	movs	r4, r0

	rp->status = 0x00;
    67c4:	7005      	strb	r5, [r0, #0]

	memset(&rp->features[0], 0x00, sizeof(rp->features));
    67c6:	2208      	movs	r2, #8
    67c8:	3001      	adds	r0, #1
    67ca:	0029      	movs	r1, r5
    67cc:	f7fa fa69 	bl	ca2 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    67d0:	237f      	movs	r3, #127	; 0x7f
    67d2:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    67d4:	3b3f      	subs	r3, #63	; 0x3f
    67d6:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    67d8:	70e5      	strb	r5, [r4, #3]
    67da:	e20a      	b.n	6bf2 <hci_cmd_handle+0x702>
static void le_set_random_address(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_random_address *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_addr_set(1, &cmd->bdaddr.val[0]);
    67dc:	68a1      	ldr	r1, [r4, #8]
    67de:	2001      	movs	r0, #1
    67e0:	f008 fe64 	bl	f4ac <ll_addr_set>
    67e4:	e1f5      	b.n	6bd2 <hci_cmd_handle+0x6e2>
    67e6:	46c0      	nop			; (mov r8, r8)
    67e8:	0001241d 	.word	0x0001241d
    67ec:	0001246d 	.word	0x0001246d
    67f0:	000124a8 	.word	0x000124a8
    67f4:	000123e3 	.word	0x000123e3
    67f8:	000132ba 	.word	0x000132ba
    67fc:	00014726 	.word	0x00014726
    6800:	20000cc8 	.word	0x20000cc8
    6804:	000132e0 	.word	0x000132e0
    6808:	20000418 	.word	0x20000418
    680c:	00001fff 	.word	0x00001fff
    6810:	20000cc0 	.word	0x20000cc0
    6814:	20000420 	.word	0x20000420

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    6818:	2102      	movs	r1, #2
    681a:	a80f      	add	r0, sp, #60	; 0x3c
    681c:	f7ff fd20 	bl	6260 <cmd_complete>
	rp->status = 0x00;
    6820:	2300      	movs	r3, #0
    6822:	7003      	strb	r3, [r0, #0]

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    6824:	0004      	movs	r4, r0
	rp->status = 0x00;

	rp->wl_size = ll_wl_size_get();
    6826:	f008 ff81 	bl	f72c <ll_wl_size_get>
    682a:	7060      	strb	r0, [r4, #1]
    682c:	e1e1      	b.n	6bf2 <hci_cmd_handle+0x702>

static void le_clear_wl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;

	ccst = cmd_complete(evt, sizeof(*ccst));
    682e:	2101      	movs	r1, #1
    6830:	a80f      	add	r0, sp, #60	; 0x3c
    6832:	f7ff fd15 	bl	6260 <cmd_complete>
    6836:	0004      	movs	r4, r0
	ccst->status = ll_wl_clear();
    6838:	f008 ff7a 	bl	f730 <ll_wl_clear>
    683c:	e1c0      	b.n	6bc0 <hci_cmd_handle+0x6d0>
{
	struct bt_hci_cp_le_add_dev_to_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_add(&cmd->addr);
    683e:	68a0      	ldr	r0, [r4, #8]
    6840:	f009 f816 	bl	f870 <ll_wl_add>
    6844:	e1cf      	b.n	6be6 <hci_cmd_handle+0x6f6>
{
	struct bt_hci_cp_le_rem_dev_from_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_remove(&cmd->addr);
    6846:	68a0      	ldr	r0, [r4, #8]
    6848:	f008 ff92 	bl	f770 <ll_wl_remove>
    684c:	e1cb      	b.n	6be6 <hci_cmd_handle+0x6f6>
    684e:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
	struct bt_hci_rp_le_encrypt *rp;
	u8_t enc_data[16];

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    6850:	aa10      	add	r2, sp, #64	; 0x40
    6852:	0001      	movs	r1, r0
    6854:	2300      	movs	r3, #0
    6856:	3110      	adds	r1, #16
    6858:	f001 f920 	bl	7a9c <ecb_encrypt>

	rp = cmd_complete(evt, sizeof(*rp));
    685c:	2111      	movs	r1, #17
    685e:	a80f      	add	r0, sp, #60	; 0x3c
    6860:	f7ff fcfe 	bl	6260 <cmd_complete>

	rp->status = 0x00;
    6864:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    6866:	2210      	movs	r2, #16

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    6868:	7003      	strb	r3, [r0, #0]
	memcpy(rp->enc_data, enc_data, 16);
    686a:	a910      	add	r1, sp, #64	; 0x40
    686c:	3001      	adds	r0, #1
    686e:	f7fa f9ee 	bl	c4e <memcpy>
    6872:	e1be      	b.n	6bf2 <hci_cmd_handle+0x702>
static void le_rand(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
    6874:	2109      	movs	r1, #9
    6876:	a80f      	add	r0, sp, #60	; 0x3c
    6878:	f7ff fcf2 	bl	6260 <cmd_complete>
	rp->status = 0x00;
    687c:	2300      	movs	r3, #0

	bt_rand(rp->rand, count);
    687e:	2108      	movs	r1, #8
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = 0x00;
    6880:	7003      	strb	r3, [r0, #0]

	bt_rand(rp->rand, count);
    6882:	3001      	adds	r0, #1
    6884:	f002 fc1a 	bl	90bc <bt_rand>
    6888:	e1b3      	b.n	6bf2 <hci_cmd_handle+0x702>
static void le_read_supp_states(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_supp_states *rp;
	u64_t states = 0;

	rp = cmd_complete(evt, sizeof(*rp));
    688a:	2109      	movs	r1, #9
    688c:	a80f      	add	r0, sp, #60	; 0x3c
    688e:	f7ff fce7 	bl	6260 <cmd_complete>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    6892:	228f      	movs	r2, #143	; 0x8f
	rp->status = 0x00;
    6894:	2300      	movs	r3, #0
    6896:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
    6898:	323d      	adds	r2, #61	; 0x3d
    689a:	7082      	strb	r2, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    689c:	3a9c      	subs	r2, #156	; 0x9c
    689e:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    68a0:	32bc      	adds	r2, #188	; 0xbc
    68a2:	7102      	strb	r2, [r0, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    68a4:	3a2c      	subs	r2, #44	; 0x2c
    68a6:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
    68a8:	3abf      	subs	r2, #191	; 0xbf
    68aa:	7003      	strb	r3, [r0, #0]
    68ac:	7182      	strb	r2, [r0, #6]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    68ae:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    68b0:	7203      	strb	r3, [r0, #8]
    68b2:	e19e      	b.n	6bf2 <hci_cmd_handle+0x702>
    68b4:	68a1      	ldr	r1, [r4, #8]
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u16_t min_interval;
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);
    68b6:	784a      	ldrb	r2, [r1, #1]
    68b8:	7808      	ldrb	r0, [r1, #0]
    68ba:	0212      	lsls	r2, r2, #8

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    68bc:	4302      	orrs	r2, r0
    68be:	2000      	movs	r0, #0
    68c0:	790b      	ldrb	r3, [r1, #4]
    68c2:	900a      	str	r0, [sp, #40]	; 0x28
    68c4:	9009      	str	r0, [sp, #36]	; 0x24
    68c6:	9008      	str	r0, [sp, #32]
    68c8:	9007      	str	r0, [sp, #28]
    68ca:	9006      	str	r0, [sp, #24]
    68cc:	9005      	str	r0, [sp, #20]
    68ce:	7b8c      	ldrb	r4, [r1, #14]
    68d0:	9404      	str	r4, [sp, #16]
    68d2:	7b4c      	ldrb	r4, [r1, #13]
    68d4:	9403      	str	r4, [sp, #12]
				   cmd->own_addr_type, cmd->direct_addr.type,
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    68d6:	1dcc      	adds	r4, r1, #7
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    68d8:	9402      	str	r4, [sp, #8]
    68da:	798c      	ldrb	r4, [r1, #6]
    68dc:	9401      	str	r4, [sp, #4]
    68de:	7949      	ldrb	r1, [r1, #5]
    68e0:	9100      	str	r1, [sp, #0]
    68e2:	0001      	movs	r1, r0
    68e4:	f009 fbb6 	bl	10054 <ll_adv_params_set>
    68e8:	e17d      	b.n	6be6 <hci_cmd_handle+0x6f6>

static void le_read_adv_chan_tx_power(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_chan_tx_power *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    68ea:	2102      	movs	r1, #2
    68ec:	a80f      	add	r0, sp, #60	; 0x3c
    68ee:	f7ff fcb7 	bl	6260 <cmd_complete>

	rp->status = 0x00;
    68f2:	2300      	movs	r3, #0
    68f4:	7003      	strb	r3, [r0, #0]

	rp->tx_power_level = 0;
    68f6:	7043      	strb	r3, [r0, #1]
    68f8:	e17b      	b.n	6bf2 <hci_cmd_handle+0x702>
    68fa:	68a3      	ldr	r3, [r4, #8]
static void le_set_adv_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_adv_data_set(cmd->len, &cmd->data[0]);
    68fc:	1c59      	adds	r1, r3, #1
    68fe:	7818      	ldrb	r0, [r3, #0]
    6900:	f009 fcb8 	bl	10274 <ll_adv_data_set>
    6904:	e165      	b.n	6bd2 <hci_cmd_handle+0x6e2>
    6906:	68a3      	ldr	r3, [r4, #8]
static void le_set_scan_rsp_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_scan_data_set(cmd->len, &cmd->data[0]);
    6908:	1c59      	adds	r1, r3, #1
    690a:	7818      	ldrb	r0, [r3, #0]
    690c:	f009 fd08 	bl	10320 <ll_scan_data_set>
    6910:	e15f      	b.n	6bd2 <hci_cmd_handle+0x6e2>
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    6912:	68a3      	ldr	r3, [r4, #8]
    6914:	7818      	ldrb	r0, [r3, #0]
    6916:	f009 fd3f 	bl	10398 <ll_adv_enable>

	ccst = cmd_complete(evt, sizeof(*ccst));
    691a:	2101      	movs	r1, #1
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    691c:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    691e:	a80f      	add	r0, sp, #60	; 0x3c
    6920:	f7ff fc9e 	bl	6260 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    6924:	2300      	movs	r3, #0
    6926:	429c      	cmp	r4, r3
    6928:	d100      	bne.n	692c <hci_cmd_handle+0x43c>
    692a:	e169      	b.n	6c00 <hci_cmd_handle+0x710>
    692c:	330c      	adds	r3, #12
    692e:	e167      	b.n	6c00 <hci_cmd_handle+0x710>
    6930:	68a2      	ldr	r2, [r4, #8]
	struct bt_hci_rp_le_ltk_req_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    6932:	2100      	movs	r1, #0
	struct bt_hci_cp_le_ltk_req_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    6934:	7854      	ldrb	r4, [r2, #1]
    6936:	7813      	ldrb	r3, [r2, #0]
    6938:	0224      	lsls	r4, r4, #8
    693a:	431c      	orrs	r4, r3
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    693c:	3202      	adds	r2, #2
    693e:	e006      	b.n	694e <hci_cmd_handle+0x45e>
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    6940:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    6942:	2106      	movs	r1, #6
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    6944:	7813      	ldrb	r3, [r2, #0]
    6946:	7854      	ldrb	r4, [r2, #1]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    6948:	2200      	movs	r2, #0
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    694a:	0224      	lsls	r4, r4, #8
    694c:	431c      	orrs	r4, r3
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    694e:	0020      	movs	r0, r4
    6950:	f007 ff10 	bl	e774 <ll_start_enc_req_send>
    6954:	e05f      	b.n	6a16 <hci_cmd_handle+0x526>
{
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    6956:	68a2      	ldr	r2, [r4, #8]
    6958:	7850      	ldrb	r0, [r2, #1]
    695a:	7813      	ldrb	r3, [r2, #0]
    695c:	0200      	lsls	r0, r0, #8
	status = ll_feature_req_send(handle);
    695e:	4318      	orrs	r0, r3
    6960:	f007 ff4f 	bl	e802 <ll_feature_req_send>
    6964:	e0dd      	b.n	6b22 <hci_cmd_handle+0x632>
    6966:	68a2      	ldr	r2, [r4, #8]
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    6968:	7953      	ldrb	r3, [r2, #5]
    696a:	7911      	ldrb	r1, [r2, #4]
	u16_t conn_interval_max;
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    696c:	7850      	ldrb	r0, [r2, #1]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    696e:	021b      	lsls	r3, r3, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    6970:	430b      	orrs	r3, r1
	u16_t conn_interval_max;
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    6972:	7811      	ldrb	r1, [r2, #0]
    6974:	0200      	lsls	r0, r0, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    6976:	4308      	orrs	r0, r1
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    6978:	7a51      	ldrb	r1, [r2, #9]
    697a:	7a14      	ldrb	r4, [r2, #8]
    697c:	0209      	lsls	r1, r1, #8

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    697e:	4321      	orrs	r1, r4
    6980:	9101      	str	r1, [sp, #4]
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    6982:	7991      	ldrb	r1, [r2, #6]
    6984:	79d2      	ldrb	r2, [r2, #7]
    6986:	0212      	lsls	r2, r2, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    6988:	430a      	orrs	r2, r1
    698a:	9200      	str	r2, [sp, #0]
    698c:	2200      	movs	r2, #0
    698e:	0011      	movs	r1, r2
    6990:	f007 fea6 	bl	e6e0 <ll_conn_update>
    6994:	e0c5      	b.n	6b22 <hci_cmd_handle+0x632>
    6996:	68a2      	ldr	r2, [r4, #8]
	u16_t latency;
	u16_t timeout;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    6998:	7854      	ldrb	r4, [r2, #1]
    699a:	7813      	ldrb	r3, [r2, #0]
    699c:	0224      	lsls	r4, r4, #8
    699e:	431c      	orrs	r4, r3
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    69a0:	7953      	ldrb	r3, [r2, #5]
    69a2:	7911      	ldrb	r1, [r2, #4]
    69a4:	021b      	lsls	r3, r3, #8
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    69a6:	430b      	orrs	r3, r1
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);
    69a8:	7a51      	ldrb	r1, [r2, #9]
    69aa:	7a10      	ldrb	r0, [r2, #8]
    69ac:	0209      	lsls	r1, r1, #8

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    69ae:	4301      	orrs	r1, r0
    69b0:	9101      	str	r1, [sp, #4]
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
    69b2:	7991      	ldrb	r1, [r2, #6]
    69b4:	79d2      	ldrb	r2, [r2, #7]
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    69b6:	0020      	movs	r0, r4
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
    69b8:	0212      	lsls	r2, r2, #8
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    69ba:	430a      	orrs	r2, r1
    69bc:	9200      	str	r2, [sp, #0]
    69be:	2102      	movs	r1, #2
    69c0:	2200      	movs	r2, #0
    69c2:	f007 fe8d 	bl	e6e0 <ll_conn_update>
    69c6:	e026      	b.n	6a16 <hci_cmd_handle+0x526>
    69c8:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    69ca:	2400      	movs	r4, #0
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    69cc:	785d      	ldrb	r5, [r3, #1]
    69ce:	781a      	ldrb	r2, [r3, #0]
    69d0:	022d      	lsls	r5, r5, #8
    69d2:	4315      	orrs	r5, r2
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    69d4:	2102      	movs	r1, #2
    69d6:	789a      	ldrb	r2, [r3, #2]
    69d8:	0028      	movs	r0, r5
    69da:	9401      	str	r4, [sp, #4]
    69dc:	9400      	str	r4, [sp, #0]
    69de:	0023      	movs	r3, r4
    69e0:	f007 fe7e 	bl	e6e0 <ll_conn_update>

	rp = cmd_complete(evt, sizeof(*rp));
    69e4:	2103      	movs	r1, #3
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    69e6:	0006      	movs	r6, r0

	rp = cmd_complete(evt, sizeof(*rp));
    69e8:	a80f      	add	r0, sp, #60	; 0x3c
    69ea:	f7ff fc39 	bl	6260 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    69ee:	42a6      	cmp	r6, r4
    69f0:	d000      	beq.n	69f4 <hci_cmd_handle+0x504>
    69f2:	340c      	adds	r4, #12
	rp->handle = sys_cpu_to_le16(handle);
    69f4:	7045      	strb	r5, [r0, #1]
    69f6:	0a2d      	lsrs	r5, r5, #8

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    69f8:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    69fa:	7085      	strb	r5, [r0, #2]
    69fc:	e0f9      	b.n	6bf2 <hci_cmd_handle+0x702>
    69fe:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_rp_le_set_data_len *rp;
	u32_t status;
	u16_t tx_octets;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    6a00:	785c      	ldrb	r4, [r3, #1]
    6a02:	781a      	ldrb	r2, [r3, #0]
    6a04:	0224      	lsls	r4, r4, #8
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
    6a06:	78d9      	ldrb	r1, [r3, #3]
	struct bt_hci_rp_le_set_data_len *rp;
	u32_t status;
	u16_t tx_octets;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    6a08:	4314      	orrs	r4, r2
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
    6a0a:	789a      	ldrb	r2, [r3, #2]
    6a0c:	0209      	lsls	r1, r1, #8
	/** @todo add reject_ext_ind support in ctrl.c */
	status = ll_length_req_send(handle, tx_octets);
    6a0e:	4311      	orrs	r1, r2
    6a10:	0020      	movs	r0, r4
    6a12:	f007 ff38 	bl	e886 <ll_length_req_send>
    6a16:	0005      	movs	r5, r0

	rp = cmd_complete(evt, sizeof(*rp));
    6a18:	2103      	movs	r1, #3
    6a1a:	a80f      	add	r0, sp, #60	; 0x3c
    6a1c:	f7ff fc20 	bl	6260 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    6a20:	2300      	movs	r3, #0
    6a22:	429d      	cmp	r5, r3
    6a24:	d000      	beq.n	6a28 <hci_cmd_handle+0x538>
    6a26:	330c      	adds	r3, #12
	rp->handle = sys_cpu_to_le16(handle);
    6a28:	7044      	strb	r4, [r0, #1]
    6a2a:	0a24      	lsrs	r4, r4, #8
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
	/** @todo add reject_ext_ind support in ctrl.c */
	status = ll_length_req_send(handle, tx_octets);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    6a2c:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    6a2e:	7084      	strb	r4, [r0, #2]
    6a30:	e0df      	b.n	6bf2 <hci_cmd_handle+0x702>

static void le_read_default_data_len(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_default_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    6a32:	2105      	movs	r1, #5
    6a34:	a80f      	add	r0, sp, #60	; 0x3c
    6a36:	f7ff fc13 	bl	6260 <cmd_complete>
    6a3a:	0004      	movs	r4, r0

	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    6a3c:	1cc1      	adds	r1, r0, #3
    6a3e:	3001      	adds	r0, #1
    6a40:	f007 ff44 	bl	e8cc <ll_length_default_get>
    6a44:	e091      	b.n	6b6a <hci_cmd_handle+0x67a>
    6a46:	68a3      	ldr	r3, [r4, #8]
{
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    6a48:	78d9      	ldrb	r1, [r3, #3]
    6a4a:	789a      	ldrb	r2, [r3, #2]
    6a4c:	7858      	ldrb	r0, [r3, #1]
    6a4e:	0209      	lsls	r1, r1, #8
    6a50:	4311      	orrs	r1, r2
    6a52:	781a      	ldrb	r2, [r3, #0]
    6a54:	0200      	lsls	r0, r0, #8
    6a56:	4310      	orrs	r0, r2
    6a58:	f007 ff42 	bl	e8e0 <ll_length_default_set>
    6a5c:	e039      	b.n	6ad2 <hci_cmd_handle+0x5e2>

static void le_read_max_data_len(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_max_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    6a5e:	2109      	movs	r1, #9
    6a60:	a80f      	add	r0, sp, #60	; 0x3c
    6a62:	f7ff fbfd 	bl	6260 <cmd_complete>
    6a66:	0004      	movs	r4, r0

	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    6a68:	1dc3      	adds	r3, r0, #7
    6a6a:	1d42      	adds	r2, r0, #5
    6a6c:	1cc1      	adds	r1, r0, #3
    6a6e:	3001      	adds	r0, #1
    6a70:	f007 ff3e 	bl	e8f0 <ll_length_max_get>
    6a74:	e079      	b.n	6b6a <hci_cmd_handle+0x67a>
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    6a76:	68a3      	ldr	r3, [r4, #8]

	rp = cmd_complete(evt, sizeof(*rp));
    6a78:	2105      	movs	r1, #5
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    6a7a:	785d      	ldrb	r5, [r3, #1]
    6a7c:	781a      	ldrb	r2, [r3, #0]
    6a7e:	022d      	lsls	r5, r5, #8

	rp = cmd_complete(evt, sizeof(*rp));
    6a80:	a80f      	add	r0, sp, #60	; 0x3c
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    6a82:	4315      	orrs	r5, r2

	rp = cmd_complete(evt, sizeof(*rp));
    6a84:	f7ff fbec 	bl	6260 <cmd_complete>

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    6a88:	1d02      	adds	r2, r0, #4
    6a8a:	1cc1      	adds	r1, r0, #3
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);

	rp = cmd_complete(evt, sizeof(*rp));
    6a8c:	0004      	movs	r4, r0

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    6a8e:	0028      	movs	r0, r5
    6a90:	f007 ff37 	bl	e902 <ll_phy_get>

	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    6a94:	2300      	movs	r3, #0
    6a96:	4298      	cmp	r0, r3
    6a98:	d000      	beq.n	6a9c <hci_cmd_handle+0x5ac>
    6a9a:	330c      	adds	r3, #12
	rp->handle = sys_cpu_to_le16(handle);
    6a9c:	7065      	strb	r5, [r4, #1]
    6a9e:	0a2d      	lsrs	r5, r5, #8

	rp = cmd_complete(evt, sizeof(*rp));

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);

	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    6aa0:	7023      	strb	r3, [r4, #0]
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    6aa2:	78e0      	ldrb	r0, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    6aa4:	70a5      	strb	r5, [r4, #2]
    6aa6:	f7f9 fd47 	bl	538 <__ffssi2>
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    6aaa:	70e0      	strb	r0, [r4, #3]
    6aac:	7920      	ldrb	r0, [r4, #4]
    6aae:	f7f9 fd43 	bl	538 <__ffssi2>
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    6ab2:	7120      	strb	r0, [r4, #4]
    6ab4:	e09d      	b.n	6bf2 <hci_cmd_handle+0x702>
    6ab6:	68a3      	ldr	r3, [r4, #8]
{
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    6ab8:	781a      	ldrb	r2, [r3, #0]
    6aba:	07d1      	lsls	r1, r2, #31
    6abc:	d501      	bpl.n	6ac2 <hci_cmd_handle+0x5d2>
		cmd->tx_phys = 0x07;
    6abe:	2107      	movs	r1, #7
    6ac0:	7059      	strb	r1, [r3, #1]
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    6ac2:	0792      	lsls	r2, r2, #30
    6ac4:	d501      	bpl.n	6aca <hci_cmd_handle+0x5da>
		cmd->rx_phys = 0x07;
    6ac6:	2207      	movs	r2, #7
    6ac8:	709a      	strb	r2, [r3, #2]
	}

	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    6aca:	7899      	ldrb	r1, [r3, #2]
    6acc:	7858      	ldrb	r0, [r3, #1]
    6ace:	f007 ff2f 	bl	e930 <ll_phy_default_set>
    6ad2:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    6ad4:	2101      	movs	r1, #1
    6ad6:	a80f      	add	r0, sp, #60	; 0x3c
    6ad8:	f7ff fbc2 	bl	6260 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    6adc:	2300      	movs	r3, #0
    6ade:	429c      	cmp	r4, r3
    6ae0:	d100      	bne.n	6ae4 <hci_cmd_handle+0x5f4>
    6ae2:	e08d      	b.n	6c00 <hci_cmd_handle+0x710>
    6ae4:	331e      	adds	r3, #30
    6ae6:	e08b      	b.n	6c00 <hci_cmd_handle+0x710>
    6ae8:	68a1      	ldr	r1, [r4, #8]
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
	u32_t status;
	u16_t handle;
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
    6aea:	7848      	ldrb	r0, [r1, #1]
    6aec:	780b      	ldrb	r3, [r1, #0]
    6aee:	0200      	lsls	r0, r0, #8
    6af0:	4318      	orrs	r0, r3
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    6af2:	798b      	ldrb	r3, [r1, #6]
    6af4:	794c      	ldrb	r4, [r1, #5]

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    6af6:	788a      	ldrb	r2, [r1, #2]
	u32_t status;
	u16_t handle;
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    6af8:	021b      	lsls	r3, r3, #8
    6afa:	4323      	orrs	r3, r4

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    6afc:	07d4      	lsls	r4, r2, #31
    6afe:	d501      	bpl.n	6b04 <hci_cmd_handle+0x614>
		cmd->tx_phys = 0x07;
    6b00:	2407      	movs	r4, #7
    6b02:	70cc      	strb	r4, [r1, #3]
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    6b04:	0792      	lsls	r2, r2, #30
    6b06:	d501      	bpl.n	6b0c <hci_cmd_handle+0x61c>
		cmd->rx_phys = 0x07;
    6b08:	2207      	movs	r2, #7
    6b0a:	710a      	strb	r2, [r1, #4]
	}
	if (phy_opts & 0x03) {
		phy_opts -= 1;
		phy_opts &= 1;
	} else {
		phy_opts = 0;
    6b0c:	2200      	movs	r2, #0
		cmd->tx_phys = 0x07;
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
		cmd->rx_phys = 0x07;
	}
	if (phy_opts & 0x03) {
    6b0e:	079c      	lsls	r4, r3, #30
    6b10:	d002      	beq.n	6b18 <hci_cmd_handle+0x628>
		phy_opts -= 1;
    6b12:	1e5a      	subs	r2, r3, #1
		phy_opts &= 1;
    6b14:	2301      	movs	r3, #1
    6b16:	401a      	ands	r2, r3
	} else {
		phy_opts = 0;
	}

	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    6b18:	790b      	ldrb	r3, [r1, #4]
    6b1a:	b2d2      	uxtb	r2, r2
    6b1c:	78c9      	ldrb	r1, [r1, #3]
    6b1e:	f007 ff0f 	bl	e940 <ll_phy_req_send>
				 cmd->rx_phys);

	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    6b22:	2300      	movs	r3, #0
    6b24:	4298      	cmp	r0, r3
    6b26:	d000      	beq.n	6b2a <hci_cmd_handle+0x63a>
    6b28:	330c      	adds	r3, #12
    6b2a:	0018      	movs	r0, r3
    6b2c:	f7ff fb7c 	bl	6228 <cmd_status>
    6b30:	900f      	str	r0, [sp, #60]	; 0x3c
    6b32:	e05e      	b.n	6bf2 <hci_cmd_handle+0x702>
    6b34:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    6b36:	0002      	movs	r2, r0
    6b38:	1dc1      	adds	r1, r0, #7
    6b3a:	3217      	adds	r2, #23
    6b3c:	f009 f8b8 	bl	fcb0 <ll_rl_add>
    6b40:	e051      	b.n	6be6 <hci_cmd_handle+0x6f6>
{
	struct bt_hci_cp_le_rem_dev_from_rl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_rl_remove(&cmd->peer_id_addr);
    6b42:	68a0      	ldr	r0, [r4, #8]
    6b44:	f009 f952 	bl	fdec <ll_rl_remove>
    6b48:	e04d      	b.n	6be6 <hci_cmd_handle+0x6f6>
}

static void le_clear_rl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;
	ccst = cmd_complete(evt, sizeof(*ccst));
    6b4a:	2101      	movs	r1, #1
    6b4c:	a80f      	add	r0, sp, #60	; 0x3c
    6b4e:	f7ff fb87 	bl	6260 <cmd_complete>
    6b52:	0004      	movs	r4, r0

	ccst->status = ll_rl_clear();
    6b54:	f009 f890 	bl	fc78 <ll_rl_clear>
    6b58:	e032      	b.n	6bc0 <hci_cmd_handle+0x6d0>

static void le_read_rl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_rl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    6b5a:	2102      	movs	r1, #2
    6b5c:	a80f      	add	r0, sp, #60	; 0x3c
    6b5e:	f7ff fb7f 	bl	6260 <cmd_complete>
    6b62:	0004      	movs	r4, r0

	rp->rl_size = ll_rl_size_get();
    6b64:	f009 f886 	bl	fc74 <ll_rl_size_get>
    6b68:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    6b6a:	2300      	movs	r3, #0
    6b6c:	7023      	strb	r3, [r4, #0]
    6b6e:	e040      	b.n	6bf2 <hci_cmd_handle+0x702>
    6b70:	2207      	movs	r2, #7
    6b72:	68a1      	ldr	r1, [r4, #8]
    6b74:	a810      	add	r0, sp, #64	; 0x40
    6b76:	f7fa f86a 	bl	c4e <memcpy>
	struct bt_hci_cp_le_read_peer_rpa *cmd = (void *)buf->data;
	struct bt_hci_rp_le_read_peer_rpa *rp;
	bt_addr_le_t peer_id_addr;

	bt_addr_le_copy(&peer_id_addr, &cmd->peer_id_addr);
	rp = cmd_complete(evt, sizeof(*rp));
    6b7a:	2107      	movs	r1, #7
    6b7c:	a80f      	add	r0, sp, #60	; 0x3c
    6b7e:	f7ff fb6f 	bl	6260 <cmd_complete>
    6b82:	0004      	movs	r4, r0

	rp->status = ll_rl_prpa_get(&peer_id_addr, &rp->peer_rpa);
    6b84:	1c41      	adds	r1, r0, #1
    6b86:	a810      	add	r0, sp, #64	; 0x40
    6b88:	f009 f99e 	bl	fec8 <ll_rl_prpa_get>
    6b8c:	e018      	b.n	6bc0 <hci_cmd_handle+0x6d0>
    6b8e:	2207      	movs	r2, #7
    6b90:	68a1      	ldr	r1, [r4, #8]
    6b92:	a810      	add	r0, sp, #64	; 0x40
    6b94:	f7fa f85b 	bl	c4e <memcpy>
	struct bt_hci_cp_le_read_local_rpa *cmd = (void *)buf->data;
	struct bt_hci_rp_le_read_local_rpa *rp;
	bt_addr_le_t peer_id_addr;

	bt_addr_le_copy(&peer_id_addr, &cmd->peer_id_addr);
	rp = cmd_complete(evt, sizeof(*rp));
    6b98:	2107      	movs	r1, #7
    6b9a:	a80f      	add	r0, sp, #60	; 0x3c
    6b9c:	f7ff fb60 	bl	6260 <cmd_complete>
    6ba0:	0004      	movs	r4, r0

	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    6ba2:	1c41      	adds	r1, r0, #1
    6ba4:	a810      	add	r0, sp, #64	; 0x40
    6ba6:	f009 f9a7 	bl	fef8 <ll_rl_lrpa_get>
    6baa:	e009      	b.n	6bc0 <hci_cmd_handle+0x6d0>

static void le_set_addr_res_enable(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u8_t enable = cmd->enable;
    6bac:	68a3      	ldr	r3, [r4, #8]

	ccst = cmd_complete(evt, sizeof(*ccst));
    6bae:	2101      	movs	r1, #1
    6bb0:	a80f      	add	r0, sp, #60	; 0x3c

static void le_set_addr_res_enable(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u8_t enable = cmd->enable;
    6bb2:	781d      	ldrb	r5, [r3, #0]

	ccst = cmd_complete(evt, sizeof(*ccst));
    6bb4:	f7ff fb54 	bl	6260 <cmd_complete>
    6bb8:	0004      	movs	r4, r0
	ccst->status = ll_rl_enable(enable);
    6bba:	0028      	movs	r0, r5
    6bbc:	f009 f9b4 	bl	ff28 <ll_rl_enable>
    6bc0:	7020      	strb	r0, [r4, #0]
    6bc2:	e016      	b.n	6bf2 <hci_cmd_handle+0x702>

static void le_set_rpa_timeout(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    6bc4:	68a2      	ldr	r2, [r4, #8]
    6bc6:	7850      	ldrb	r0, [r2, #1]
    6bc8:	7813      	ldrb	r3, [r2, #0]
    6bca:	0200      	lsls	r0, r0, #8

	ll_rl_timeout_set(timeout);
    6bcc:	4318      	orrs	r0, r3
    6bce:	f009 f9c3 	bl	ff58 <ll_rl_timeout_set>

	ccst = cmd_complete(evt, sizeof(*ccst));
    6bd2:	2101      	movs	r1, #1
    6bd4:	a80f      	add	r0, sp, #60	; 0x3c
    6bd6:	f7ff fb43 	bl	6260 <cmd_complete>
	ccst->status = 0x00;
    6bda:	2300      	movs	r3, #0
    6bdc:	e010      	b.n	6c00 <hci_cmd_handle+0x710>
    6bde:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    6be0:	79c1      	ldrb	r1, [r0, #7]
    6be2:	f009 f9c1 	bl	ff68 <ll_priv_mode_set>
    6be6:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    6be8:	2101      	movs	r1, #1
    6bea:	a80f      	add	r0, sp, #60	; 0x3c
    6bec:	f7ff fb38 	bl	6260 <cmd_complete>
	ccst->status = status;
    6bf0:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
	}

	return evt;
    6bf2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6bf4:	e006      	b.n	6c04 <hci_cmd_handle+0x714>
		err = -EINVAL;
		break;
	}

	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
    6bf6:	2101      	movs	r1, #1
    6bf8:	a80f      	add	r0, sp, #60	; 0x3c
    6bfa:	f7ff fb31 	bl	6260 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    6bfe:	2301      	movs	r3, #1
    6c00:	7003      	strb	r3, [r0, #0]
    6c02:	e7f6      	b.n	6bf2 <hci_cmd_handle+0x702>
	}

	return evt;
}
    6c04:	b015      	add	sp, #84	; 0x54
    6c06:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006c08 <hci_acl_handle>:

int hci_acl_handle(struct net_buf *buf)
{
    6c08:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data;
	u16_t handle;
	u8_t flags;
	u16_t len;

	if (buf->len < sizeof(*acl)) {
    6c0a:	8983      	ldrh	r3, [r0, #12]

	return evt;
}

int hci_acl_handle(struct net_buf *buf)
{
    6c0c:	b085      	sub	sp, #20
    6c0e:	0005      	movs	r5, r0
	struct pdu_data *pdu_data;
	u16_t handle;
	u8_t flags;
	u16_t len;

	if (buf->len < sizeof(*acl)) {
    6c10:	2b03      	cmp	r3, #3
    6c12:	d808      	bhi.n	6c26 <hci_acl_handle+0x1e>
		BT_ERR("No HCI ACL header");
    6c14:	4b30      	ldr	r3, [pc, #192]	; (6cd8 <hci_acl_handle+0xd0>)
    6c16:	4a31      	ldr	r2, [pc, #196]	; (6cdc <hci_acl_handle+0xd4>)
    6c18:	9301      	str	r3, [sp, #4]
    6c1a:	4b31      	ldr	r3, [pc, #196]	; (6ce0 <hci_acl_handle+0xd8>)
    6c1c:	4931      	ldr	r1, [pc, #196]	; (6ce4 <hci_acl_handle+0xdc>)
    6c1e:	9300      	str	r3, [sp, #0]
    6c20:	4831      	ldr	r0, [pc, #196]	; (6ce8 <hci_acl_handle+0xe0>)
    6c22:	4b32      	ldr	r3, [pc, #200]	; (6cec <hci_acl_handle+0xe4>)
    6c24:	e017      	b.n	6c56 <hci_acl_handle+0x4e>
		return -EINVAL;
	}

	acl = (void *)buf->data;
    6c26:	6883      	ldr	r3, [r0, #8]
	len = sys_le16_to_cpu(acl->len);
	handle = sys_le16_to_cpu(acl->handle);
	net_buf_pull(buf, sizeof(*acl));
    6c28:	2104      	movs	r1, #4
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
    6c2a:	78de      	ldrb	r6, [r3, #3]
    6c2c:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    6c2e:	785c      	ldrb	r4, [r3, #1]
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
    6c30:	0236      	lsls	r6, r6, #8
    6c32:	4316      	orrs	r6, r2
	handle = sys_le16_to_cpu(acl->handle);
    6c34:	781a      	ldrb	r2, [r3, #0]
    6c36:	0224      	lsls	r4, r4, #8
	net_buf_pull(buf, sizeof(*acl));
    6c38:	3008      	adds	r0, #8
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
	handle = sys_le16_to_cpu(acl->handle);
    6c3a:	4314      	orrs	r4, r2
	net_buf_pull(buf, sizeof(*acl));
    6c3c:	f009 fce3 	bl	10606 <net_buf_simple_pull>

	if (buf->len < len) {
    6c40:	89ab      	ldrh	r3, [r5, #12]
    6c42:	42b3      	cmp	r3, r6
    6c44:	d20a      	bcs.n	6c5c <hci_acl_handle+0x54>
		BT_ERR("Invalid HCI ACL packet length");
    6c46:	4b24      	ldr	r3, [pc, #144]	; (6cd8 <hci_acl_handle+0xd0>)
    6c48:	4a24      	ldr	r2, [pc, #144]	; (6cdc <hci_acl_handle+0xd4>)
    6c4a:	9301      	str	r3, [sp, #4]
    6c4c:	4b24      	ldr	r3, [pc, #144]	; (6ce0 <hci_acl_handle+0xd8>)
    6c4e:	4925      	ldr	r1, [pc, #148]	; (6ce4 <hci_acl_handle+0xdc>)
    6c50:	9300      	str	r3, [sp, #0]
    6c52:	4827      	ldr	r0, [pc, #156]	; (6cf0 <hci_acl_handle+0xe8>)
    6c54:	4b25      	ldr	r3, [pc, #148]	; (6cec <hci_acl_handle+0xe4>)
    6c56:	f7fa fe1d 	bl	1894 <printk>
    6c5a:	e038      	b.n	6cce <hci_acl_handle+0xc6>
		return -EINVAL;
	}

	/* assigning flags first because handle will be overwritten */
	flags = bt_acl_flags(handle);
    6c5c:	0b27      	lsrs	r7, r4, #12
	handle = bt_acl_handle(handle);
    6c5e:	0524      	lsls	r4, r4, #20
    6c60:	0d23      	lsrs	r3, r4, #20
    6c62:	9303      	str	r3, [sp, #12]

	radio_pdu_node_tx = radio_tx_mem_acquire();
    6c64:	f007 ff86 	bl	eb74 <radio_tx_mem_acquire>
    6c68:	1e04      	subs	r4, r0, #0
	if (!radio_pdu_node_tx) {
    6c6a:	d10b      	bne.n	6c84 <hci_acl_handle+0x7c>
		BT_ERR("Tx Buffer Overflow");
    6c6c:	4b1a      	ldr	r3, [pc, #104]	; (6cd8 <hci_acl_handle+0xd0>)
    6c6e:	4a1b      	ldr	r2, [pc, #108]	; (6cdc <hci_acl_handle+0xd4>)
    6c70:	9301      	str	r3, [sp, #4]
    6c72:	4b1b      	ldr	r3, [pc, #108]	; (6ce0 <hci_acl_handle+0xd8>)
    6c74:	491b      	ldr	r1, [pc, #108]	; (6ce4 <hci_acl_handle+0xdc>)
    6c76:	9300      	str	r3, [sp, #0]
    6c78:	481e      	ldr	r0, [pc, #120]	; (6cf4 <hci_acl_handle+0xec>)
    6c7a:	4b1c      	ldr	r3, [pc, #112]	; (6cec <hci_acl_handle+0xe4>)
    6c7c:	f7fa fe0a 	bl	1894 <printk>
		return -ENOBUFS;
    6c80:	2337      	movs	r3, #55	; 0x37
    6c82:	e025      	b.n	6cd0 <hci_acl_handle+0xc8>
    6c84:	2203      	movs	r2, #3
    6c86:	7903      	ldrb	r3, [r0, #4]
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    6c88:	4393      	bics	r3, r2
		BT_ERR("Tx Buffer Overflow");
		return -ENOBUFS;
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    6c8a:	2f00      	cmp	r7, #0
    6c8c:	d002      	beq.n	6c94 <hci_acl_handle+0x8c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
	} else {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6c8e:	2201      	movs	r2, #1
		BT_ERR("Tx Buffer Overflow");
		return -ENOBUFS;
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    6c90:	2f02      	cmp	r7, #2
    6c92:	d100      	bne.n	6c96 <hci_acl_handle+0x8e>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    6c94:	2202      	movs	r2, #2
	} else {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6c96:	4313      	orrs	r3, r2
    6c98:	7123      	strb	r3, [r4, #4]
	}
	pdu_data->len = len;
    6c9a:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    6c9c:	0032      	movs	r2, r6
    6c9e:	68a9      	ldr	r1, [r5, #8]
    6ca0:	1de0      	adds	r0, r4, #7
    6ca2:	f7f9 ffd4 	bl	c4e <memcpy>

	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    6ca6:	0021      	movs	r1, r4
    6ca8:	9803      	ldr	r0, [sp, #12]
    6caa:	f007 ff77 	bl	eb9c <radio_tx_mem_enqueue>
		BT_ERR("Invalid Tx Enqueue");
		radio_tx_mem_release(radio_pdu_node_tx);
		return -EINVAL;
	}

	return 0;
    6cae:	2300      	movs	r3, #0
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
	}
	pdu_data->len = len;
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);

	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    6cb0:	4298      	cmp	r0, r3
    6cb2:	d00e      	beq.n	6cd2 <hci_acl_handle+0xca>
		BT_ERR("Invalid Tx Enqueue");
    6cb4:	4b08      	ldr	r3, [pc, #32]	; (6cd8 <hci_acl_handle+0xd0>)
    6cb6:	4a09      	ldr	r2, [pc, #36]	; (6cdc <hci_acl_handle+0xd4>)
    6cb8:	9301      	str	r3, [sp, #4]
    6cba:	4b09      	ldr	r3, [pc, #36]	; (6ce0 <hci_acl_handle+0xd8>)
    6cbc:	4909      	ldr	r1, [pc, #36]	; (6ce4 <hci_acl_handle+0xdc>)
    6cbe:	9300      	str	r3, [sp, #0]
    6cc0:	480d      	ldr	r0, [pc, #52]	; (6cf8 <hci_acl_handle+0xf0>)
    6cc2:	4b0a      	ldr	r3, [pc, #40]	; (6cec <hci_acl_handle+0xe4>)
    6cc4:	f7fa fde6 	bl	1894 <printk>
		radio_tx_mem_release(radio_pdu_node_tx);
    6cc8:	0020      	movs	r0, r4
    6cca:	f007 ff5d 	bl	eb88 <radio_tx_mem_release>
		return -EINVAL;
    6cce:	2316      	movs	r3, #22
    6cd0:	425b      	negs	r3, r3
	}

	return 0;
}
    6cd2:	0018      	movs	r0, r3
    6cd4:	b005      	add	sp, #20
    6cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cd8:	0001241d 	.word	0x0001241d
    6cdc:	0001246d 	.word	0x0001246d
    6ce0:	000124a8 	.word	0x000124a8
    6ce4:	000123e3 	.word	0x000123e3
    6ce8:	0001330e 	.word	0x0001330e
    6cec:	00014744 	.word	0x00014744
    6cf0:	00013330 	.word	0x00013330
    6cf4:	0001335e 	.word	0x0001335e
    6cf8:	00013381 	.word	0x00013381

00006cfc <hci_acl_encode>:
	}
}

#if defined(CONFIG_BLUETOOTH_CONN)
void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    6cfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    6cfe:	7a03      	ldrb	r3, [r0, #8]
	}
}

#if defined(CONFIG_BLUETOOTH_CONN)
void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    6d00:	0004      	movs	r4, r0
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    6d02:	079b      	lsls	r3, r3, #30
    6d04:	0f9b      	lsrs	r3, r3, #30
    6d06:	3b01      	subs	r3, #1
    6d08:	b2db      	uxtb	r3, r3
	u16_t handle_flags;
	u16_t handle;
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;
    6d0a:	88c5      	ldrh	r5, [r0, #6]

	switch (pdu_data->ll_id) {
    6d0c:	2b01      	cmp	r3, #1
    6d0e:	d821      	bhi.n	6d54 <hci_acl_encode+0x58>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    6d10:	3108      	adds	r1, #8
    6d12:	000e      	movs	r6, r1
    6d14:	2104      	movs	r1, #4
    6d16:	0030      	movs	r0, r6
    6d18:	f009 fc54 	bl	105c4 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    6d1c:	2303      	movs	r3, #3
    6d1e:	7a22      	ldrb	r2, [r4, #8]
    6d20:	4013      	ands	r3, r2
    6d22:	2b02      	cmp	r3, #2
    6d24:	d102      	bne.n	6d2c <hci_acl_encode+0x30>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    6d26:	2380      	movs	r3, #128	; 0x80
    6d28:	019b      	lsls	r3, r3, #6
    6d2a:	e001      	b.n	6d30 <hci_acl_encode+0x34>
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    6d2c:	2380      	movs	r3, #128	; 0x80
    6d2e:	015b      	lsls	r3, r3, #5
    6d30:	431d      	orrs	r5, r3
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    6d32:	7005      	strb	r5, [r0, #0]
    6d34:	0a2d      	lsrs	r5, r5, #8
    6d36:	7045      	strb	r5, [r0, #1]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    6d38:	7a63      	ldrb	r3, [r4, #9]
    6d3a:	7083      	strb	r3, [r0, #2]
    6d3c:	2300      	movs	r3, #0
    6d3e:	70c3      	strb	r3, [r0, #3]
		data = (void *)net_buf_add(buf, pdu_data->len);
    6d40:	7a61      	ldrb	r1, [r4, #9]
    6d42:	0030      	movs	r0, r6
    6d44:	f009 fc3e 	bl	105c4 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    6d48:	0021      	movs	r1, r4
    6d4a:	7a62      	ldrb	r2, [r4, #9]
    6d4c:	310b      	adds	r1, #11
    6d4e:	f7f9 ff7e 	bl	c4e <memcpy>
	default:
		LL_ASSERT(0);
		break;
	}

}
    6d52:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    6d54:	4b06      	ldr	r3, [pc, #24]	; (6d70 <hci_acl_encode+0x74>)
    6d56:	4a07      	ldr	r2, [pc, #28]	; (6d74 <hci_acl_encode+0x78>)
    6d58:	9301      	str	r3, [sp, #4]
    6d5a:	4b07      	ldr	r3, [pc, #28]	; (6d78 <hci_acl_encode+0x7c>)
    6d5c:	4907      	ldr	r1, [pc, #28]	; (6d7c <hci_acl_encode+0x80>)
    6d5e:	9300      	str	r3, [sp, #0]
    6d60:	4807      	ldr	r0, [pc, #28]	; (6d80 <hci_acl_encode+0x84>)
    6d62:	4b08      	ldr	r3, [pc, #32]	; (6d84 <hci_acl_encode+0x88>)
    6d64:	f7fa fd96 	bl	1894 <printk>
    6d68:	b662      	cpsie	i
    6d6a:	2004      	movs	r0, #4
    6d6c:	df02      	svc	2
    6d6e:	46c0      	nop			; (mov r8, r8)
    6d70:	0001241d 	.word	0x0001241d
    6d74:	0001246d 	.word	0x0001246d
    6d78:	000124a8 	.word	0x000124a8
    6d7c:	000123e3 	.word	0x000123e3
    6d80:	000129d4 	.word	0x000129d4
    6d84:	00014702 	.word	0x00014702

00006d88 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    6d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d8a:	0004      	movs	r4, r0
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    6d8c:	0007      	movs	r7, r0

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    6d8e:	7900      	ldrb	r0, [r0, #4]

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    6d90:	b091      	sub	sp, #68	; 0x44
    6d92:	000e      	movs	r6, r1
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    6d94:	3708      	adds	r7, #8
			   struct pdu_data *pdu_data, struct net_buf *buf)
{
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;
    6d96:	88e5      	ldrh	r5, [r4, #6]
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    6d98:	2801      	cmp	r0, #1
    6d9a:	d100      	bne.n	6d9e <hci_evt_encode+0x16>
    6d9c:	e18d      	b.n	70ba <hci_evt_encode+0x332>
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;

	switch (node_rx->hdr.type) {
    6d9e:	3802      	subs	r0, #2
    6da0:	280a      	cmp	r0, #10
    6da2:	d900      	bls.n	6da6 <hci_evt_encode+0x1e>
    6da4:	e183      	b.n	70ae <hci_evt_encode+0x326>
    6da6:	f7f9 f9fb 	bl	1a0 <__gnu_thumb1_case_uhi>
    6daa:	000b      	.short	0x000b
    6dac:	004c004a 	.word	0x004c004a
    6db0:	008d0052 	.word	0x008d0052
    6db4:	00e400c9 	.word	0x00e400c9
    6db8:	01250110 	.word	0x01250110
    6dbc:	014d0138 	.word	0x014d0138
}

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    6dc0:	2207      	movs	r2, #7
    6dc2:	49d9      	ldr	r1, [pc, #868]	; (7128 <hci_evt_encode+0x3a0>)
    6dc4:	a809      	add	r0, sp, #36	; 0x24
    6dc6:	f7f9 ff42 	bl	c4e <memcpy>
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6dca:	4bd8      	ldr	r3, [pc, #864]	; (712c <hci_evt_encode+0x3a4>)
    6dcc:	685b      	ldr	r3, [r3, #4]
    6dce:	009b      	lsls	r3, r3, #2
    6dd0:	d400      	bmi.n	6dd4 <hci_evt_encode+0x4c>
    6dd2:	e26f      	b.n	72b4 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    6dd4:	4bd6      	ldr	r3, [pc, #856]	; (7130 <hci_evt_encode+0x3a8>)
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6dd6:	681b      	ldr	r3, [r3, #0]
    6dd8:	079b      	lsls	r3, r3, #30
    6dda:	d400      	bmi.n	6dde <hci_evt_encode+0x56>
    6ddc:	e26a      	b.n	72b4 <hci_evt_encode+0x52c>
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    6dde:	230f      	movs	r3, #15
    6de0:	7a22      	ldrb	r2, [r4, #8]
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    6de2:	2500      	movs	r5, #0
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    6de4:	4013      	ands	r3, r2
    6de6:	2b01      	cmp	r3, #1
    6de8:	d002      	beq.n	6df0 <hci_evt_encode+0x68>
		data_len = (adv->len - BDADDR_SIZE);
    6dea:	7a65      	ldrb	r5, [r4, #9]
    6dec:	3d06      	subs	r5, #6
    6dee:	b2ed      	uxtb	r5, r5
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    6df0:	002a      	movs	r2, r5
    6df2:	320b      	adds	r2, #11
    6df4:	b2d2      	uxtb	r2, r2
    6df6:	2102      	movs	r1, #2
    6df8:	0030      	movs	r0, r6
    6dfa:	f7ff fa53 	bl	62a4 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    6dfe:	2301      	movs	r3, #1
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    6e00:	0021      	movs	r1, r4
	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    6e02:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    6e04:	7a23      	ldrb	r3, [r4, #8]
    6e06:	aa09      	add	r2, sp, #36	; 0x24
    6e08:	071b      	lsls	r3, r3, #28
    6e0a:	0f1b      	lsrs	r3, r3, #28
    6e0c:	5cd3      	ldrb	r3, [r2, r3]
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    6e0e:	0006      	movs	r6, r0
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    6e10:	7043      	strb	r3, [r0, #1]
	adv_info->addr.type = adv->tx_addr;
    6e12:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    6e14:	310a      	adds	r1, #10

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
    6e16:	065b      	lsls	r3, r3, #25
    6e18:	0fdb      	lsrs	r3, r3, #31
    6e1a:	7083      	strb	r3, [r0, #2]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    6e1c:	2206      	movs	r2, #6
    6e1e:	3003      	adds	r0, #3
    6e20:	f7f9 ff15 	bl	c4e <memcpy>
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    6e24:	0039      	movs	r1, r7
	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
    6e26:	7275      	strb	r5, [r6, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    6e28:	360a      	adds	r6, #10
    6e2a:	3108      	adds	r1, #8
    6e2c:	002a      	movs	r2, r5
    6e2e:	0030      	movs	r0, r6
    6e30:	f7f9 ff0d 	bl	c4e <memcpy>
	/* RSSI */
	rssi = &adv_info->data[0] + data_len;
	*rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    6e34:	7a61      	ldrb	r1, [r4, #9]
    6e36:	1864      	adds	r4, r4, r1
    6e38:	7aa3      	ldrb	r3, [r4, #10]
    6e3a:	5573      	strb	r3, [r6, r5]
    6e3c:	e23a      	b.n	72b4 <hci_evt_encode+0x52c>
}

static void le_adv_ext_1M_report(struct pdu_data *pdu_data, u8_t *b,
				 struct net_buf *buf)
{
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    6e3e:	2201      	movs	r2, #1
    6e40:	e000      	b.n	6e44 <hci_evt_encode+0xbc>
}

static void le_adv_ext_coded_report(struct pdu_data *pdu_data, u8_t *b,
				    struct net_buf *buf)
{
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    6e42:	2204      	movs	r2, #4
    6e44:	0021      	movs	r1, r4
    6e46:	0038      	movs	r0, r7
    6e48:	f7ff fab6 	bl	63b8 <le_adv_ext_report.isra.53>
    6e4c:	e232      	b.n	72b4 <hci_evt_encode+0x52c>
    6e4e:	0025      	movs	r5, r4
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6e50:	4bb6      	ldr	r3, [pc, #728]	; (712c <hci_evt_encode+0x3a4>)
    6e52:	350a      	adds	r5, #10
    6e54:	685b      	ldr	r3, [r3, #4]
    6e56:	009b      	lsls	r3, r3, #2
    6e58:	d503      	bpl.n	6e62 <hci_evt_encode+0xda>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    6e5a:	4bb5      	ldr	r3, [pc, #724]	; (7130 <hci_evt_encode+0x3a8>)
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6e5c:	681b      	ldr	r3, [r3, #0]
    6e5e:	035b      	lsls	r3, r3, #13
    6e60:	d421      	bmi.n	6ea6 <hci_evt_encode+0x11e>
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    6e62:	201d      	movs	r0, #29
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    6e64:	7a23      	ldrb	r3, [r4, #8]
    6e66:	ae07      	add	r6, sp, #28
    6e68:	065b      	lsls	r3, r3, #25
    6e6a:	0fdb      	lsrs	r3, r3, #31
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    6e6c:	2206      	movs	r2, #6
    6e6e:	0029      	movs	r1, r5
    6e70:	4468      	add	r0, sp
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    6e72:	7033      	strb	r3, [r6, #0]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    6e74:	f7f9 feeb 	bl	c4e <memcpy>
		       sizeof(bt_addr_t));
		rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    6e78:	7a61      	ldrb	r1, [r4, #9]
			 offsetof(struct pdu_adv, payload) + adv->len];

		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    6e7a:	0030      	movs	r0, r6

		handle = 0;
		addr.type = adv->tx_addr;
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
		       sizeof(bt_addr_t));
		rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    6e7c:	1864      	adds	r4, r4, r1
    6e7e:	7aa5      	ldrb	r5, [r4, #10]
			 offsetof(struct pdu_adv, payload) + adv->len];

		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    6e80:	ac09      	add	r4, sp, #36	; 0x24
    6e82:	0021      	movs	r1, r4
    6e84:	f7ff fa66 	bl	6354 <bt_addr_le_to_str.constprop.57>

		BT_WARN("handle: %d, addr: %s, rssi: -%d dB.",
    6e88:	4baa      	ldr	r3, [pc, #680]	; (7134 <hci_evt_encode+0x3ac>)
    6e8a:	9503      	str	r5, [sp, #12]
    6e8c:	9304      	str	r3, [sp, #16]
    6e8e:	2300      	movs	r3, #0
    6e90:	9301      	str	r3, [sp, #4]
    6e92:	4ba9      	ldr	r3, [pc, #676]	; (7138 <hci_evt_encode+0x3b0>)
    6e94:	9402      	str	r4, [sp, #8]
    6e96:	9300      	str	r3, [sp, #0]
    6e98:	4aa8      	ldr	r2, [pc, #672]	; (713c <hci_evt_encode+0x3b4>)
    6e9a:	4ba9      	ldr	r3, [pc, #676]	; (7140 <hci_evt_encode+0x3b8>)
    6e9c:	49a9      	ldr	r1, [pc, #676]	; (7144 <hci_evt_encode+0x3bc>)
    6e9e:	48aa      	ldr	r0, [pc, #680]	; (7148 <hci_evt_encode+0x3c0>)
    6ea0:	f7fa fcf8 	bl	1894 <printk>
    6ea4:	e206      	b.n	72b4 <hci_evt_encode+0x52c>
			handle, addr_str, rssi);

		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    6ea6:	2208      	movs	r2, #8
    6ea8:	2113      	movs	r1, #19
    6eaa:	0030      	movs	r0, r6
    6eac:	f7ff f9fa 	bl	62a4 <meta_evt>
	sep->handle = 0;
    6eb0:	2300      	movs	r3, #0
    6eb2:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    6eb4:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    6eb6:	2206      	movs	r2, #6
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
	sep->handle = 0;
	sep->addr.type = adv->tx_addr;
    6eb8:	065b      	lsls	r3, r3, #25
    6eba:	0fdb      	lsrs	r3, r3, #31
    6ebc:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    6ebe:	0029      	movs	r1, r5
    6ec0:	3002      	adds	r0, #2
    6ec2:	e129      	b.n	7118 <hci_evt_encode+0x390>
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6ec4:	4b99      	ldr	r3, [pc, #612]	; (712c <hci_evt_encode+0x3a4>)
    6ec6:	685b      	ldr	r3, [r3, #4]
    6ec8:	009b      	lsls	r3, r3, #2
    6eca:	d400      	bmi.n	6ece <hci_evt_encode+0x146>
    6ecc:	e1f2      	b.n	72b4 <hci_evt_encode+0x52c>
    6ece:	2101      	movs	r1, #1
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE)) {
    6ed0:	4b97      	ldr	r3, [pc, #604]	; (7130 <hci_evt_encode+0x3a8>)
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6ed2:	681b      	ldr	r3, [r3, #0]
    6ed4:	420b      	tst	r3, r1
    6ed6:	d100      	bne.n	6eda <hci_evt_encode+0x152>
    6ed8:	e1ec      	b.n	72b4 <hci_evt_encode+0x52c>
		return;
	}

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    6eda:	2212      	movs	r2, #18
    6edc:	0030      	movs	r0, r6
    6ede:	f7ff f9e1 	bl	62a4 <meta_evt>

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    6ee2:	0021      	movs	r1, r4
		return;
	}

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    6ee4:	0006      	movs	r6, r0

	sep->status = radio_cc->status;
    6ee6:	0027      	movs	r7, r4
    6ee8:	7ae3      	ldrb	r3, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    6eea:	7045      	strb	r5, [r0, #1]
    6eec:	0a2d      	lsrs	r5, r5, #8

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
    6eee:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    6ef0:	7085      	strb	r5, [r0, #2]
	sep->role = radio_cc->role;
    6ef2:	7b23      	ldrb	r3, [r4, #12]
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    6ef4:	2206      	movs	r2, #6

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
    6ef6:	70c3      	strb	r3, [r0, #3]
	sep->peer_addr.type = radio_cc->peer_addr_type;
    6ef8:	7b63      	ldrb	r3, [r4, #13]
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    6efa:	310e      	adds	r1, #14
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
    6efc:	7103      	strb	r3, [r0, #4]
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    6efe:	3005      	adds	r0, #5
    6f00:	f7f9 fea5 	bl	c4e <memcpy>
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
    6f04:	7f63      	ldrb	r3, [r4, #29]
    6f06:	7f22      	ldrb	r2, [r4, #28]
    6f08:	021b      	lsls	r3, r3, #8
    6f0a:	4313      	orrs	r3, r2
    6f0c:	72f3      	strb	r3, [r6, #11]
    6f0e:	0a1b      	lsrs	r3, r3, #8
    6f10:	7333      	strb	r3, [r6, #12]
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
    6f12:	7fe3      	ldrb	r3, [r4, #31]
    6f14:	7fa2      	ldrb	r2, [r4, #30]
    6f16:	021b      	lsls	r3, r3, #8
    6f18:	4313      	orrs	r3, r2
    6f1a:	7373      	strb	r3, [r6, #13]
    6f1c:	0a1b      	lsrs	r3, r3, #8

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
    6f1e:	370b      	adds	r7, #11
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
    6f20:	73b3      	strb	r3, [r6, #14]
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    6f22:	7dbb      	ldrb	r3, [r7, #22]
    6f24:	7d7a      	ldrb	r2, [r7, #21]
    6f26:	021b      	lsls	r3, r3, #8
    6f28:	4313      	orrs	r3, r2
    6f2a:	73f3      	strb	r3, [r6, #15]
    6f2c:	0a1b      	lsrs	r3, r3, #8
    6f2e:	7433      	strb	r3, [r6, #16]
	sep->clock_accuracy = radio_cc->mca;
    6f30:	7dfb      	ldrb	r3, [r7, #23]

	conn_count++;
    6f32:	4a86      	ldr	r2, [pc, #536]	; (714c <hci_evt_encode+0x3c4>)
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
	sep->clock_accuracy = radio_cc->mca;
    6f34:	7473      	strb	r3, [r6, #17]

	conn_count++;
    6f36:	6813      	ldr	r3, [r2, #0]
    6f38:	3301      	adds	r3, #1
    6f3a:	e018      	b.n	6f6e <hci_evt_encode+0x1e6>
static void disconn_complete(struct pdu_data *pdu_data, u16_t handle,
			     struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *ep;

	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    6f3c:	4b7b      	ldr	r3, [pc, #492]	; (712c <hci_evt_encode+0x3a4>)
    6f3e:	681b      	ldr	r3, [r3, #0]
    6f40:	06db      	lsls	r3, r3, #27
    6f42:	d400      	bmi.n	6f46 <hci_evt_encode+0x1be>
    6f44:	e1b6      	b.n	72b4 <hci_evt_encode+0x52c>
		return;
	}

	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    6f46:	2204      	movs	r2, #4
    6f48:	2105      	movs	r1, #5
    6f4a:	0030      	movs	r0, r6
    6f4c:	f7ff f962 	bl	6214 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    6f50:	0030      	movs	r0, r6
    6f52:	2104      	movs	r1, #4
    6f54:	3008      	adds	r0, #8
    6f56:	f009 fb35 	bl	105c4 <net_buf_simple_add>

	ep->status = 0x00;
    6f5a:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    6f5c:	7045      	strb	r5, [r0, #1]
    6f5e:	0a2d      	lsrs	r5, r5, #8
	}

	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
    6f60:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    6f62:	7085      	strb	r5, [r0, #2]
	ep->reason = *((u8_t *)pdu_data);
    6f64:	7a23      	ldrb	r3, [r4, #8]

	conn_count--;
    6f66:	4a79      	ldr	r2, [pc, #484]	; (714c <hci_evt_encode+0x3c4>)
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->reason = *((u8_t *)pdu_data);
    6f68:	70c3      	strb	r3, [r0, #3]

	conn_count--;
    6f6a:	6813      	ldr	r3, [r2, #0]
    6f6c:	3b01      	subs	r3, #1
    6f6e:	6013      	str	r3, [r2, #0]
    6f70:	e1a0      	b.n	72b4 <hci_evt_encode+0x52c>
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_update_complete *sep;
	struct radio_le_conn_update_cmplt *radio_cu;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6f72:	4b6e      	ldr	r3, [pc, #440]	; (712c <hci_evt_encode+0x3a4>)
    6f74:	685b      	ldr	r3, [r3, #4]
    6f76:	009b      	lsls	r3, r3, #2
    6f78:	d400      	bmi.n	6f7c <hci_evt_encode+0x1f4>
    6f7a:	e19b      	b.n	72b4 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    6f7c:	4b6c      	ldr	r3, [pc, #432]	; (7130 <hci_evt_encode+0x3a8>)
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_update_complete *sep;
	struct radio_le_conn_update_cmplt *radio_cu;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6f7e:	681b      	ldr	r3, [r3, #0]
    6f80:	075b      	lsls	r3, r3, #29
    6f82:	d400      	bmi.n	6f86 <hci_evt_encode+0x1fe>
    6f84:	e196      	b.n	72b4 <hci_evt_encode+0x52c>
	}

	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    6f86:	2209      	movs	r2, #9
    6f88:	2103      	movs	r1, #3
    6f8a:	0030      	movs	r0, r6
    6f8c:	f7ff f98a 	bl	62a4 <meta_evt>

	sep->status = radio_cu->status;
    6f90:	0023      	movs	r3, r4
    6f92:	7ae2      	ldrb	r2, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    6f94:	7045      	strb	r5, [r0, #1]
    6f96:	0a2d      	lsrs	r5, r5, #8
	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_cu->status;
    6f98:	7002      	strb	r2, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    6f9a:	7085      	strb	r5, [r0, #2]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    6f9c:	7b62      	ldrb	r2, [r4, #13]
    6f9e:	7b21      	ldrb	r1, [r4, #12]
    6fa0:	0212      	lsls	r2, r2, #8
    6fa2:	430a      	orrs	r2, r1
    6fa4:	70c2      	strb	r2, [r0, #3]
    6fa6:	0a12      	lsrs	r2, r2, #8
    6fa8:	7102      	strb	r2, [r0, #4]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    6faa:	7be2      	ldrb	r2, [r4, #15]
    6fac:	7ba1      	ldrb	r1, [r4, #14]
    6fae:	0212      	lsls	r2, r2, #8
    6fb0:	430a      	orrs	r2, r1
    6fb2:	7142      	strb	r2, [r0, #5]
    6fb4:	0a12      	lsrs	r2, r2, #8
    6fb6:	7182      	strb	r2, [r0, #6]
	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_cu->status;
    6fb8:	330b      	adds	r3, #11
	sep->handle = sys_cpu_to_le16(handle);
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    6fba:	799b      	ldrb	r3, [r3, #6]
    6fbc:	7c22      	ldrb	r2, [r4, #16]
    6fbe:	021b      	lsls	r3, r3, #8
    6fc0:	4313      	orrs	r3, r2
    6fc2:	71c3      	strb	r3, [r0, #7]
    6fc4:	0a1b      	lsrs	r3, r3, #8
    6fc6:	7203      	strb	r3, [r0, #8]
    6fc8:	e174      	b.n	72b4 <hci_evt_encode+0x52c>
static void enc_refresh_complete(struct pdu_data *pdu_data, u16_t handle,
				 struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_key_refresh_complete *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    6fca:	4b58      	ldr	r3, [pc, #352]	; (712c <hci_evt_encode+0x3a4>)
    6fcc:	685b      	ldr	r3, [r3, #4]
    6fce:	041b      	lsls	r3, r3, #16
    6fd0:	d400      	bmi.n	6fd4 <hci_evt_encode+0x24c>
    6fd2:	e16f      	b.n	72b4 <hci_evt_encode+0x52c>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    6fd4:	2203      	movs	r2, #3
    6fd6:	2130      	movs	r1, #48	; 0x30
    6fd8:	0030      	movs	r0, r6
    6fda:	f7ff f91b 	bl	6214 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    6fde:	0030      	movs	r0, r6
    6fe0:	2103      	movs	r1, #3
    6fe2:	3008      	adds	r0, #8
    6fe4:	f009 faee 	bl	105c4 <net_buf_simple_add>

	ep->status = 0x00;
    6fe8:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    6fea:	7045      	strb	r5, [r0, #1]
    6fec:	0a2d      	lsrs	r5, r5, #8
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
    6fee:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    6ff0:	7085      	strb	r5, [r0, #2]
    6ff2:	e15f      	b.n	72b4 <hci_evt_encode+0x52c>
static void auth_payload_timeout_exp(struct pdu_data *pdu_data, u16_t handle,
				     struct net_buf *buf)
{
	struct bt_hci_evt_auth_payload_timeout_exp *ep;

	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    6ff4:	4b56      	ldr	r3, [pc, #344]	; (7150 <hci_evt_encode+0x3c8>)
    6ff6:	681b      	ldr	r3, [r3, #0]
    6ff8:	021b      	lsls	r3, r3, #8
    6ffa:	d400      	bmi.n	6ffe <hci_evt_encode+0x276>
    6ffc:	e15a      	b.n	72b4 <hci_evt_encode+0x52c>
		return;
	}

	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    6ffe:	2202      	movs	r2, #2
    7000:	2157      	movs	r1, #87	; 0x57
    7002:	0030      	movs	r0, r6
    7004:	f7ff f906 	bl	6214 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    7008:	0030      	movs	r0, r6
    700a:	2102      	movs	r1, #2
    700c:	3008      	adds	r0, #8
    700e:	f009 fad9 	bl	105c4 <net_buf_simple_add>

	ep->handle = sys_cpu_to_le16(handle);
    7012:	7005      	strb	r5, [r0, #0]
    7014:	0a2d      	lsrs	r5, r5, #8
    7016:	7045      	strb	r5, [r0, #1]
    7018:	e14c      	b.n	72b4 <hci_evt_encode+0x52c>
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_chan_sel_algo *sep;
	struct radio_le_chan_sel_algo *radio_le_chan_sel_algo;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    701a:	4b44      	ldr	r3, [pc, #272]	; (712c <hci_evt_encode+0x3a4>)
    701c:	685b      	ldr	r3, [r3, #4]
    701e:	009b      	lsls	r3, r3, #2
    7020:	d400      	bmi.n	7024 <hci_evt_encode+0x29c>
    7022:	e147      	b.n	72b4 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    7024:	4b42      	ldr	r3, [pc, #264]	; (7130 <hci_evt_encode+0x3a8>)
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_chan_sel_algo *sep;
	struct radio_le_chan_sel_algo *radio_le_chan_sel_algo;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7026:	681b      	ldr	r3, [r3, #0]
    7028:	031b      	lsls	r3, r3, #12
    702a:	d400      	bmi.n	702e <hci_evt_encode+0x2a6>
    702c:	e142      	b.n	72b4 <hci_evt_encode+0x52c>
	}

	radio_le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
					pdu_data->payload.lldata;

	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    702e:	2203      	movs	r2, #3
    7030:	2114      	movs	r1, #20
    7032:	0030      	movs	r0, r6
    7034:	f7ff f936 	bl	62a4 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    7038:	7005      	strb	r5, [r0, #0]
    703a:	0a2d      	lsrs	r5, r5, #8
    703c:	7045      	strb	r5, [r0, #1]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    703e:	7ae3      	ldrb	r3, [r4, #11]
    7040:	7083      	strb	r3, [r0, #2]
    7042:	e137      	b.n	72b4 <hci_evt_encode+0x52c>
    7044:	0027      	movs	r7, r4
	struct radio_le_phy_upd_cmplt *radio_le_phy_upd_cmplt;

	radio_le_phy_upd_cmplt = (struct radio_le_phy_upd_cmplt *)
				 pdu_data->payload.lldata;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7046:	4b39      	ldr	r3, [pc, #228]	; (712c <hci_evt_encode+0x3a4>)
    7048:	370b      	adds	r7, #11
    704a:	685b      	ldr	r3, [r3, #4]
    704c:	009b      	lsls	r3, r3, #2
    704e:	d503      	bpl.n	7058 <hci_evt_encode+0x2d0>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    7050:	4b37      	ldr	r3, [pc, #220]	; (7130 <hci_evt_encode+0x3a8>)
	struct radio_le_phy_upd_cmplt *radio_le_phy_upd_cmplt;

	radio_le_phy_upd_cmplt = (struct radio_le_phy_upd_cmplt *)
				 pdu_data->payload.lldata;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7052:	681b      	ldr	r3, [r3, #0]
    7054:	051b      	lsls	r3, r3, #20
    7056:	d416      	bmi.n	7086 <hci_evt_encode+0x2fe>
    7058:	7878      	ldrb	r0, [r7, #1]
    705a:	f7f9 fa6d 	bl	538 <__ffssi2>
    705e:	0006      	movs	r6, r0
    7060:	78b8      	ldrb	r0, [r7, #2]
    7062:	f7f9 fa69 	bl	538 <__ffssi2>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    7066:	4b33      	ldr	r3, [pc, #204]	; (7134 <hci_evt_encode+0x3ac>)
    7068:	9004      	str	r0, [sp, #16]
    706a:	9305      	str	r3, [sp, #20]
    706c:	9603      	str	r6, [sp, #12]
    706e:	7ae3      	ldrb	r3, [r4, #11]
    7070:	4a32      	ldr	r2, [pc, #200]	; (713c <hci_evt_encode+0x3b4>)
    7072:	9302      	str	r3, [sp, #8]
    7074:	4b30      	ldr	r3, [pc, #192]	; (7138 <hci_evt_encode+0x3b0>)
    7076:	9501      	str	r5, [sp, #4]
    7078:	9300      	str	r3, [sp, #0]
    707a:	4932      	ldr	r1, [pc, #200]	; (7144 <hci_evt_encode+0x3bc>)
    707c:	4b35      	ldr	r3, [pc, #212]	; (7154 <hci_evt_encode+0x3cc>)
    707e:	4836      	ldr	r0, [pc, #216]	; (7158 <hci_evt_encode+0x3d0>)
    7080:	f7fa fc08 	bl	1894 <printk>
    7084:	e116      	b.n	72b4 <hci_evt_encode+0x52c>
			find_lsb_set(radio_le_phy_upd_cmplt->tx),
			find_lsb_set(radio_le_phy_upd_cmplt->rx));
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    7086:	2205      	movs	r2, #5
    7088:	210c      	movs	r1, #12
    708a:	0030      	movs	r0, r6
    708c:	f7ff f90a 	bl	62a4 <meta_evt>

	sep->status = radio_le_phy_upd_cmplt->status;
    7090:	7ae3      	ldrb	r3, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    7092:	7045      	strb	r5, [r0, #1]
    7094:	0a2d      	lsrs	r5, r5, #8
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_le_phy_upd_cmplt->status;
    7096:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    7098:	7085      	strb	r5, [r0, #2]
			find_lsb_set(radio_le_phy_upd_cmplt->tx),
			find_lsb_set(radio_le_phy_upd_cmplt->rx));
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    709a:	0006      	movs	r6, r0
    709c:	7878      	ldrb	r0, [r7, #1]
    709e:	f7f9 fa4b 	bl	538 <__ffssi2>

	sep->status = radio_le_phy_upd_cmplt->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    70a2:	70f0      	strb	r0, [r6, #3]
    70a4:	78b8      	ldrb	r0, [r7, #2]
    70a6:	f7f9 fa47 	bl	538 <__ffssi2>
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    70aa:	7130      	strb	r0, [r6, #4]
    70ac:	e102      	b.n	72b4 <hci_evt_encode+0x52c>
			pdu_data->payload.profile.max);
		return;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	default:
		LL_ASSERT(0);
    70ae:	4b21      	ldr	r3, [pc, #132]	; (7134 <hci_evt_encode+0x3ac>)
    70b0:	9301      	str	r3, [sp, #4]
    70b2:	4b2a      	ldr	r3, [pc, #168]	; (715c <hci_evt_encode+0x3d4>)
    70b4:	9300      	str	r3, [sp, #0]
    70b6:	4b2a      	ldr	r3, [pc, #168]	; (7160 <hci_evt_encode+0x3d8>)
    70b8:	e0f4      	b.n	72a4 <hci_evt_encode+0x51c>
static void encode_data_ctrl(struct radio_pdu_node_rx *node_rx,
			     struct pdu_data *pdu_data, struct net_buf *buf)
{
	u16_t handle = node_rx->hdr.handle;

	switch (pdu_data->payload.llctrl.opcode) {
    70ba:	7ae0      	ldrb	r0, [r4, #11]
    70bc:	3803      	subs	r0, #3
    70be:	2812      	cmp	r0, #18
    70c0:	d900      	bls.n	70c4 <hci_evt_encode+0x33c>
    70c2:	e0ea      	b.n	729a <hci_evt_encode+0x512>
    70c4:	f7f9 f858 	bl	178 <__gnu_thumb1_case_uqi>
    70c8:	2be9e90a 	.word	0x2be9e90a
    70cc:	e94ee9d3 	.word	0xe94ee9d3
    70d0:	e97853e9 	.word	0xe97853e9
    70d4:	e9e9e97e 	.word	0xe9e9e97e
    70d8:	a6e9      	.short	0xa6e9
    70da:	a6          	.byte	0xa6
    70db:	00          	.byte	0x00
static void le_ltk_request(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    70dc:	4b13      	ldr	r3, [pc, #76]	; (712c <hci_evt_encode+0x3a4>)
    70de:	685b      	ldr	r3, [r3, #4]
    70e0:	009b      	lsls	r3, r3, #2
    70e2:	d400      	bmi.n	70e6 <hci_evt_encode+0x35e>
    70e4:	e0e6      	b.n	72b4 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    70e6:	4b12      	ldr	r3, [pc, #72]	; (7130 <hci_evt_encode+0x3a8>)
static void le_ltk_request(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    70e8:	681b      	ldr	r3, [r3, #0]
    70ea:	06db      	lsls	r3, r3, #27
    70ec:	d400      	bmi.n	70f0 <hci_evt_encode+0x368>
    70ee:	e0e1      	b.n	72b4 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    70f0:	220c      	movs	r2, #12
    70f2:	2105      	movs	r1, #5
    70f4:	0030      	movs	r0, r6
    70f6:	f7ff f8d5 	bl	62a4 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    70fa:	0021      	movs	r1, r4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    70fc:	0006      	movs	r6, r0

	sep->handle = sys_cpu_to_le16(handle);
    70fe:	7005      	strb	r5, [r0, #0]
    7100:	0a2d      	lsrs	r5, r5, #8
    7102:	7045      	strb	r5, [r0, #1]
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    7104:	310c      	adds	r1, #12
    7106:	2208      	movs	r2, #8
    7108:	3002      	adds	r0, #2
    710a:	f7f9 fda0 	bl	c4e <memcpy>
	       sizeof(u64_t));
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    710e:	0021      	movs	r1, r4
    7110:	0030      	movs	r0, r6
    7112:	2202      	movs	r2, #2
    7114:	3114      	adds	r1, #20
    7116:	300a      	adds	r0, #10
    7118:	f7f9 fd99 	bl	c4e <memcpy>
    711c:	e0ca      	b.n	72b4 <hci_evt_encode+0x52c>
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		le_ltk_request(pdu_data, handle, buf);
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		encrypt_change(0x00, handle, buf);
    711e:	000a      	movs	r2, r1
    7120:	2000      	movs	r0, #0
    7122:	0029      	movs	r1, r5
    7124:	e04b      	b.n	71be <hci_evt_encode+0x436>
    7126:	46c0      	nop			; (mov r8, r8)
    7128:	0001206f 	.word	0x0001206f
    712c:	20000418 	.word	0x20000418
    7130:	20000420 	.word	0x20000420
    7134:	0001241d 	.word	0x0001241d
    7138:	00012422 	.word	0x00012422
    713c:	000123dc 	.word	0x000123dc
    7140:	00014711 	.word	0x00014711
    7144:	000123e3 	.word	0x000123e3
    7148:	000133a4 	.word	0x000133a4
    714c:	20000ccc 	.word	0x20000ccc
    7150:	20000cc0 	.word	0x20000cc0
    7154:	00014753 	.word	0x00014753
    7158:	000133d8 	.word	0x000133d8
    715c:	000124a8 	.word	0x000124a8
    7160:	00014767 	.word	0x00014767
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_FEATURE_RSP:
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    7164:	000b      	movs	r3, r1
    7166:	002a      	movs	r2, r5
    7168:	0039      	movs	r1, r7
    716a:	2000      	movs	r0, #0
    716c:	e086      	b.n	727c <hci_evt_encode+0x4f4>
				struct net_buf *buf)
{
	struct pdu_data_llctrl_version_ind *ver_ind;
	struct bt_hci_evt_remote_version_info *ep;

	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    716e:	4b52      	ldr	r3, [pc, #328]	; (72b8 <hci_evt_encode+0x530>)
    7170:	681b      	ldr	r3, [r3, #0]
    7172:	051b      	lsls	r3, r3, #20
    7174:	d400      	bmi.n	7178 <hci_evt_encode+0x3f0>
    7176:	e09d      	b.n	72b4 <hci_evt_encode+0x52c>
		return;
	}

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    7178:	2208      	movs	r2, #8
    717a:	210c      	movs	r1, #12
    717c:	0030      	movs	r0, r6
    717e:	f7ff f849 	bl	6214 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    7182:	0030      	movs	r0, r6
    7184:	2108      	movs	r1, #8
    7186:	3008      	adds	r0, #8
    7188:	f009 fa1c 	bl	105c4 <net_buf_simple_add>

	ver_ind = &pdu_data->payload.llctrl.ctrldata.version_ind;
	ep->status = 0x00;
    718c:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    718e:	7045      	strb	r5, [r0, #1]
    7190:	0a2d      	lsrs	r5, r5, #8

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ver_ind = &pdu_data->payload.llctrl.ctrldata.version_ind;
	ep->status = 0x00;
    7192:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    7194:	7085      	strb	r5, [r0, #2]
	ep->version = ver_ind->version_number;
    7196:	7b23      	ldrb	r3, [r4, #12]
    7198:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    719a:	7ba3      	ldrb	r3, [r4, #14]
    719c:	7b62      	ldrb	r2, [r4, #13]
    719e:	021b      	lsls	r3, r3, #8
    71a0:	4313      	orrs	r3, r2
    71a2:	7103      	strb	r3, [r0, #4]
    71a4:	0a1b      	lsrs	r3, r3, #8
    71a6:	7143      	strb	r3, [r0, #5]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    71a8:	7c23      	ldrb	r3, [r4, #16]
    71aa:	7be2      	ldrb	r2, [r4, #15]
    71ac:	021b      	lsls	r3, r3, #8
    71ae:	4313      	orrs	r3, r2
    71b0:	7183      	strb	r3, [r0, #6]
    71b2:	0a1b      	lsrs	r3, r3, #8
    71b4:	71c3      	strb	r3, [r0, #7]
    71b6:	e07d      	b.n	72b4 <hci_evt_encode+0x52c>
		remote_version_info(pdu_data, handle, buf);
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    71b8:	000a      	movs	r2, r1
    71ba:	0029      	movs	r1, r5
    71bc:	7b20      	ldrb	r0, [r4, #12]
    71be:	f7ff f885 	bl	62cc <encrypt_change>
    71c2:	e077      	b.n	72b4 <hci_evt_encode+0x52c>
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    71c4:	4b3c      	ldr	r3, [pc, #240]	; (72b8 <hci_evt_encode+0x530>)
    71c6:	685b      	ldr	r3, [r3, #4]
    71c8:	009b      	lsls	r3, r3, #2
    71ca:	d573      	bpl.n	72b4 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    71cc:	4b3b      	ldr	r3, [pc, #236]	; (72bc <hci_evt_encode+0x534>)
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    71ce:	681b      	ldr	r3, [r3, #0]
    71d0:	069b      	lsls	r3, r3, #26
    71d2:	d56f      	bpl.n	72b4 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    71d4:	220a      	movs	r2, #10
    71d6:	2106      	movs	r1, #6
    71d8:	0030      	movs	r0, r6
    71da:	f7ff f863 	bl	62a4 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    71de:	7005      	strb	r5, [r0, #0]
    71e0:	0a2d      	lsrs	r5, r5, #8
    71e2:	7045      	strb	r5, [r0, #1]
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    71e4:	7b63      	ldrb	r3, [r4, #13]
    71e6:	7b22      	ldrb	r2, [r4, #12]
    71e8:	021b      	lsls	r3, r3, #8
    71ea:	4313      	orrs	r3, r2
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
    71ec:	7083      	strb	r3, [r0, #2]
    71ee:	0a1b      	lsrs	r3, r3, #8
    71f0:	70c3      	strb	r3, [r0, #3]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    71f2:	7be3      	ldrb	r3, [r4, #15]
    71f4:	7ba2      	ldrb	r2, [r4, #14]
    71f6:	021b      	lsls	r3, r3, #8
    71f8:	4313      	orrs	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
    71fa:	7103      	strb	r3, [r0, #4]
    71fc:	0a1b      	lsrs	r3, r3, #8
    71fe:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    7200:	7c63      	ldrb	r3, [r4, #17]
    7202:	7c22      	ldrb	r2, [r4, #16]
    7204:	021b      	lsls	r3, r3, #8
    7206:	4313      	orrs	r3, r2
    7208:	7183      	strb	r3, [r0, #6]
    720a:	0a1b      	lsrs	r3, r3, #8
    720c:	71c3      	strb	r3, [r0, #7]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    720e:	7ca2      	ldrb	r2, [r4, #18]
    7210:	7ce3      	ldrb	r3, [r4, #19]
    7212:	e026      	b.n	7262 <hci_evt_encode+0x4da>
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7214:	4b28      	ldr	r3, [pc, #160]	; (72b8 <hci_evt_encode+0x530>)
    7216:	685b      	ldr	r3, [r3, #4]
    7218:	009b      	lsls	r3, r3, #2
    721a:	d54b      	bpl.n	72b4 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    721c:	4b27      	ldr	r3, [pc, #156]	; (72bc <hci_evt_encode+0x534>)
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    721e:	681b      	ldr	r3, [r3, #0]
    7220:	065b      	lsls	r3, r3, #25
    7222:	d547      	bpl.n	72b4 <hci_evt_encode+0x52c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    7224:	220a      	movs	r2, #10
    7226:	2107      	movs	r1, #7
    7228:	0030      	movs	r0, r6
    722a:	f7ff f83b 	bl	62a4 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    722e:	7005      	strb	r5, [r0, #0]
    7230:	0a2d      	lsrs	r5, r5, #8
    7232:	7045      	strb	r5, [r0, #1]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    7234:	7c63      	ldrb	r3, [r4, #17]
    7236:	7c22      	ldrb	r2, [r4, #16]
    7238:	021b      	lsls	r3, r3, #8
    723a:	4313      	orrs	r3, r2
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
    723c:	7083      	strb	r3, [r0, #2]
    723e:	0a1b      	lsrs	r3, r3, #8
    7240:	70c3      	strb	r3, [r0, #3]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    7242:	7ce3      	ldrb	r3, [r4, #19]
    7244:	7ca2      	ldrb	r2, [r4, #18]
    7246:	021b      	lsls	r3, r3, #8
    7248:	4313      	orrs	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
    724a:	7103      	strb	r3, [r0, #4]
    724c:	0a1b      	lsrs	r3, r3, #8
    724e:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    7250:	7b63      	ldrb	r3, [r4, #13]
    7252:	7b22      	ldrb	r2, [r4, #12]
    7254:	021b      	lsls	r3, r3, #8
    7256:	4313      	orrs	r3, r2
	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
    7258:	7183      	strb	r3, [r0, #6]
    725a:	0a1b      	lsrs	r3, r3, #8
    725c:	71c3      	strb	r3, [r0, #7]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    725e:	7ba2      	ldrb	r2, [r4, #14]
    7260:	7be3      	ldrb	r3, [r4, #15]
    7262:	021b      	lsls	r3, r3, #8
    7264:	4313      	orrs	r3, r2
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
    7266:	7203      	strb	r3, [r0, #8]
    7268:	0a1b      	lsrs	r3, r3, #8
    726a:	7243      	strb	r3, [r0, #9]
    726c:	e022      	b.n	72b4 <hci_evt_encode+0x52c>
    726e:	7b23      	ldrb	r3, [r4, #12]

static void le_unknown_rsp(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{

	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    7270:	2b0e      	cmp	r3, #14
    7272:	d106      	bne.n	7282 <hci_evt_encode+0x4fa>
	case PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ:
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    7274:	000b      	movs	r3, r1
    7276:	002a      	movs	r2, r5
    7278:	2100      	movs	r1, #0
    727a:	201a      	movs	r0, #26
    727c:	f7ff f842 	bl	6304 <le_remote_feat_complete>
    7280:	e018      	b.n	72b4 <hci_evt_encode+0x52c>
					    NULL, handle, buf);
		break;

	default:
		BT_WARN("type: 0x%02x",
    7282:	4a0f      	ldr	r2, [pc, #60]	; (72c0 <hci_evt_encode+0x538>)
    7284:	9301      	str	r3, [sp, #4]
    7286:	4b0f      	ldr	r3, [pc, #60]	; (72c4 <hci_evt_encode+0x53c>)
    7288:	9202      	str	r2, [sp, #8]
    728a:	9300      	str	r3, [sp, #0]
    728c:	4a0e      	ldr	r2, [pc, #56]	; (72c8 <hci_evt_encode+0x540>)
    728e:	4b0f      	ldr	r3, [pc, #60]	; (72cc <hci_evt_encode+0x544>)
    7290:	490f      	ldr	r1, [pc, #60]	; (72d0 <hci_evt_encode+0x548>)
    7292:	4810      	ldr	r0, [pc, #64]	; (72d4 <hci_evt_encode+0x54c>)
    7294:	f7fa fafe 	bl	1894 <printk>
    7298:	e00c      	b.n	72b4 <hci_evt_encode+0x52c>
	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		le_unknown_rsp(pdu_data, handle, buf);
		break;

	default:
		LL_ASSERT(0);
    729a:	4b09      	ldr	r3, [pc, #36]	; (72c0 <hci_evt_encode+0x538>)
    729c:	9301      	str	r3, [sp, #4]
    729e:	4b0e      	ldr	r3, [pc, #56]	; (72d8 <hci_evt_encode+0x550>)
    72a0:	9300      	str	r3, [sp, #0]
    72a2:	4b0e      	ldr	r3, [pc, #56]	; (72dc <hci_evt_encode+0x554>)
    72a4:	4a0e      	ldr	r2, [pc, #56]	; (72e0 <hci_evt_encode+0x558>)
    72a6:	490a      	ldr	r1, [pc, #40]	; (72d0 <hci_evt_encode+0x548>)
    72a8:	480e      	ldr	r0, [pc, #56]	; (72e4 <hci_evt_encode+0x55c>)
    72aa:	f7fa faf3 	bl	1894 <printk>
    72ae:	b662      	cpsie	i
    72b0:	2004      	movs	r0, #4
    72b2:	df02      	svc	2
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    72b4:	b011      	add	sp, #68	; 0x44
    72b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72b8:	20000418 	.word	0x20000418
    72bc:	20000420 	.word	0x20000420
    72c0:	0001241d 	.word	0x0001241d
    72c4:	00012422 	.word	0x00012422
    72c8:	000123dc 	.word	0x000123dc
    72cc:	00014735 	.word	0x00014735
    72d0:	000123e3 	.word	0x000123e3
    72d4:	00013414 	.word	0x00013414
    72d8:	000124a8 	.word	0x000124a8
    72dc:	00014776 	.word	0x00014776
    72e0:	0001246d 	.word	0x0001246d
    72e4:	000129d4 	.word	0x000129d4

000072e8 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    72e8:	b570      	push	{r4, r5, r6, lr}
    72ea:	0005      	movs	r5, r0
    72ec:	000c      	movs	r4, r1
    72ee:	0016      	movs	r6, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    72f0:	2113      	movs	r1, #19
    72f2:	2205      	movs	r2, #5
    72f4:	f7fe ff8e 	bl	6214 <evt_create>

	ep = net_buf_add(buf, len);
    72f8:	0028      	movs	r0, r5
    72fa:	2105      	movs	r1, #5
    72fc:	3008      	adds	r0, #8
    72fe:	f009 f961 	bl	105c4 <net_buf_simple_add>
	ep->num_handles = num_handles;
    7302:	2301      	movs	r3, #1
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
	hc->count = sys_cpu_to_le16(num);
    7304:	2200      	movs	r2, #0

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    7306:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    7308:	7044      	strb	r4, [r0, #1]
    730a:	18c3      	adds	r3, r0, r3
	hc->count = sys_cpu_to_le16(num);
    730c:	b2b6      	uxth	r6, r6
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    730e:	0a24      	lsrs	r4, r4, #8
	hc->count = sys_cpu_to_le16(num);
    7310:	709e      	strb	r6, [r3, #2]
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    7312:	705c      	strb	r4, [r3, #1]
	hc->count = sys_cpu_to_le16(num);
    7314:	70da      	strb	r2, [r3, #3]
}
    7316:	bd70      	pop	{r4, r5, r6, pc}

00007318 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    7318:	7903      	ldrb	r3, [r0, #4]
    731a:	2b01      	cmp	r3, #1
    731c:	d006      	beq.n	732c <hci_get_class+0x14>
    731e:	3b02      	subs	r3, #2
    7320:	b2db      	uxtb	r3, r3
    7322:	2b0a      	cmp	r3, #10
    7324:	d80a      	bhi.n	733c <hci_get_class+0x24>
    7326:	4a07      	ldr	r2, [pc, #28]	; (7344 <hci_get_class+0x2c>)
    7328:	56d0      	ldrsb	r0, [r2, r3]
    732a:	e009      	b.n	7340 <hci_get_class+0x28>
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    732c:	7a03      	ldrb	r3, [r0, #8]
    732e:	2003      	movs	r0, #3
    7330:	4003      	ands	r3, r0
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    7332:	3b03      	subs	r3, #3
    7334:	425a      	negs	r2, r3
    7336:	4153      	adcs	r3, r2
    7338:	1ac0      	subs	r0, r0, r3
    733a:	e001      	b.n	7340 <hci_get_class+0x28>
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    733c:	2001      	movs	r0, #1
    733e:	4240      	negs	r0, r0
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
	}
}
    7340:	4770      	bx	lr
    7342:	46c0      	nop			; (mov r8, r8)
    7344:	00014787 	.word	0x00014787

00007348 <hci_init>:

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    7348:	2001      	movs	r0, #1
    734a:	4b08      	ldr	r3, [pc, #32]	; (736c <hci_init+0x24>)
    734c:	4908      	ldr	r1, [pc, #32]	; (7370 <hci_init+0x28>)
    734e:	4240      	negs	r0, r0
    7350:	6018      	str	r0, [r3, #0]
    7352:	6059      	str	r1, [r3, #4]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    7354:	2000      	movs	r0, #0
    7356:	2100      	movs	r1, #0
    7358:	4b06      	ldr	r3, [pc, #24]	; (7374 <hci_init+0x2c>)
    735a:	6018      	str	r0, [r3, #0]
    735c:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    735e:	201f      	movs	r0, #31
    7360:	2100      	movs	r1, #0
    7362:	4b05      	ldr	r3, [pc, #20]	; (7378 <hci_init+0x30>)
    7364:	6018      	str	r0, [r3, #0]
    7366:	6059      	str	r1, [r3, #4]
{
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    7368:	4770      	bx	lr
    736a:	46c0      	nop			; (mov r8, r8)
    736c:	20000418 	.word	0x20000418
    7370:	00001fff 	.word	0x00001fff
    7374:	20000cc0 	.word	0x20000cc0
    7378:	20000420 	.word	0x20000420

0000737c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    737c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    737e:	4802      	ldr	r0, [pc, #8]	; (7388 <_hci_driver_init+0xc>)
    7380:	f7fb ffa6 	bl	32d0 <bt_hci_driver_register>

	return 0;
}
    7384:	2000      	movs	r0, #0
    7386:	bd10      	pop	{r4, pc}
    7388:	000147b4 	.word	0x000147b4

0000738c <recv_thread>:
	return buf;
}
#endif

static void recv_thread(void *p1, void *p2, void *p3)
{
    738c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

		/* process host buffers first if any */
		buf = process_hbuf();

#else
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    738e:	2101      	movs	r1, #1
    7390:	4826      	ldr	r0, [pc, #152]	; (742c <recv_thread+0xa0>)
    7392:	4249      	negs	r1, r1
    7394:	f00a f884 	bl	114a0 <k_queue_get>
    7398:	1e04      	subs	r4, r0, #0
#endif
		BT_DBG("unblocked");

		if (node_rx && !buf) {
    739a:	d044      	beq.n	7426 <recv_thread+0x9a>
	return buf;
}

static inline struct net_buf *process_node(struct radio_pdu_node_rx *node_rx)
{
	s8_t class = hci_get_class(node_rx);
    739c:	f7ff ffbc 	bl	7318 <hci_get_class>
    73a0:	9403      	str	r4, [sp, #12]
					  s8_t class)
{
	struct net_buf *buf = NULL;

	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
    73a2:	2800      	cmp	r0, #0
    73a4:	db1c      	blt.n	73e0 <recv_thread+0x54>
    73a6:	2802      	cmp	r0, #2
    73a8:	dd0b      	ble.n	73c2 <recv_thread+0x36>
    73aa:	2803      	cmp	r0, #3
    73ac:	d118      	bne.n	73e0 <recv_thread+0x54>
		}
		break;
#if defined(CONFIG_BLUETOOTH_CONN)
	case HCI_CLASS_ACL_DATA:
		/* generate ACL data */
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    73ae:	2101      	movs	r1, #1
    73b0:	4249      	negs	r1, r1
    73b2:	f7fc f8c5 	bl	3540 <bt_buf_get_rx>
    73b6:	0004      	movs	r4, r0
		hci_acl_encode(node_rx, buf);
    73b8:	0001      	movs	r1, r0
    73ba:	9803      	ldr	r0, [sp, #12]
    73bc:	f7ff fc9e 	bl	6cfc <hci_acl_encode>
    73c0:	e01b      	b.n	73fa <recv_thread+0x6e>
	switch (class) {
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    73c2:	2100      	movs	r1, #0
	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    73c4:	2801      	cmp	r0, #1
    73c6:	d002      	beq.n	73ce <recv_thread+0x42>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
		} else {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    73c8:	2101      	movs	r1, #1
    73ca:	2001      	movs	r0, #1
    73cc:	4249      	negs	r1, r1
    73ce:	f7fc f8b7 	bl	3540 <bt_buf_get_rx>
    73d2:	1e04      	subs	r4, r0, #0
		}
		if (buf) {
    73d4:	d011      	beq.n	73fa <recv_thread+0x6e>
			hci_evt_encode(node_rx, buf);
    73d6:	0001      	movs	r1, r0
    73d8:	9803      	ldr	r0, [sp, #12]
    73da:	f7ff fcd5 	bl	6d88 <hci_evt_encode>
    73de:	e00c      	b.n	73fa <recv_thread+0x6e>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
		hci_acl_encode(node_rx, buf);
		break;
#endif
	default:
		LL_ASSERT(0);
    73e0:	4b13      	ldr	r3, [pc, #76]	; (7430 <recv_thread+0xa4>)
    73e2:	4a14      	ldr	r2, [pc, #80]	; (7434 <recv_thread+0xa8>)
    73e4:	9301      	str	r3, [sp, #4]
    73e6:	4b14      	ldr	r3, [pc, #80]	; (7438 <recv_thread+0xac>)
    73e8:	4914      	ldr	r1, [pc, #80]	; (743c <recv_thread+0xb0>)
    73ea:	9300      	str	r3, [sp, #0]
    73ec:	4814      	ldr	r0, [pc, #80]	; (7440 <recv_thread+0xb4>)
    73ee:	4b15      	ldr	r3, [pc, #84]	; (7444 <recv_thread+0xb8>)
    73f0:	f7fa fa50 	bl	1894 <printk>
    73f4:	b662      	cpsie	i
    73f6:	2004      	movs	r0, #4
    73f8:	df02      	svc	2
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
    73fa:	9b03      	ldr	r3, [sp, #12]
    73fc:	2100      	movs	r1, #0
    73fe:	88d8      	ldrh	r0, [r3, #6]
    7400:	f007 fb86 	bl	eb10 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    7404:	2200      	movs	r2, #0
    7406:	9b03      	ldr	r3, [sp, #12]
	radio_rx_mem_release(&node_rx);
    7408:	a803      	add	r0, sp, #12
		LL_ASSERT(0);
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
	node_rx->hdr.onion.next = 0;
    740a:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    740c:	f007 fb04 	bl	ea18 <radio_rx_mem_release>
		if (node_rx && !buf) {
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
    7410:	2c00      	cmp	r4, #0
    7412:	d008      	beq.n	7426 <recv_thread+0x9a>
			if (buf->len) {
    7414:	89a3      	ldrh	r3, [r4, #12]
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    7416:	0020      	movs	r0, r4
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
			if (buf->len) {
    7418:	2b00      	cmp	r3, #0
    741a:	d002      	beq.n	7422 <recv_thread+0x96>
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    741c:	f7fb f9f4 	bl	2808 <bt_recv>
    7420:	e001      	b.n	7426 <recv_thread+0x9a>
			} else {
				net_buf_unref(buf);
    7422:	f009 f8ad 	bl	10580 <net_buf_unref>
			}
		}

		k_yield();
    7426:	f00a f985 	bl	11734 <k_yield>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
			rx_ts = k_uptime_get_32();
		}
#endif
	}
    742a:	e7b0      	b.n	738e <recv_thread+0x2>
    742c:	20000614 	.word	0x20000614
    7430:	0001241d 	.word	0x0001241d
    7434:	0001246d 	.word	0x0001246d
    7438:	000124a8 	.word	0x000124a8
    743c:	000123e3 	.word	0x000123e3
    7440:	000129d4 	.word	0x000129d4
    7444:	000147d4 	.word	0x000147d4

00007448 <prio_recv_thread>:
static sys_slist_t hbuf_pend;
static s32_t hbuf_count;
#endif

static void prio_recv_thread(void *p1, void *p2, void *p3)
{
    7448:	b573      	push	{r0, r1, r4, r5, r6, lr}
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    744a:	466b      	mov	r3, sp
    744c:	1c9d      	adds	r5, r3, #2
    744e:	0029      	movs	r1, r5
    7450:	a801      	add	r0, sp, #4
    7452:	f007 faa5 	bl	e9a0 <radio_rx_get>
    7456:	1e04      	subs	r4, r0, #0
    7458:	d00f      	beq.n	747a <prio_recv_thread+0x32>
#if defined(CONFIG_BLUETOOTH_CONN)
			struct net_buf *buf;

			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    745a:	2101      	movs	r1, #1
    745c:	2001      	movs	r0, #1
    745e:	4249      	negs	r1, r1
    7460:	f7fc f86e 	bl	3540 <bt_buf_get_rx>
    7464:	0006      	movs	r6, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7466:	8829      	ldrh	r1, [r5, #0]
    7468:	0022      	movs	r2, r4
    746a:	f7ff ff3d 	bl	72e8 <hci_num_cmplt_encode>
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
			bt_recv_prio(buf);
    746e:	0030      	movs	r0, r6
    7470:	f7fb fe30 	bl	30d4 <bt_recv_prio>
			k_yield();
    7474:	f00a f95e 	bl	11734 <k_yield>
    7478:	e7e7      	b.n	744a <prio_recv_thread+0x2>
#endif
		}

		if (node_rx) {
    747a:	9b01      	ldr	r3, [sp, #4]
    747c:	2b00      	cmp	r3, #0
    747e:	d006      	beq.n	748e <prio_recv_thread+0x46>

			radio_rx_dequeue();
    7480:	f007 fdfa 	bl	f078 <radio_rx_dequeue>

			BT_DBG("RX node enqueue");
			k_fifo_put(&recv_fifo, node_rx);
    7484:	9901      	ldr	r1, [sp, #4]
    7486:	4805      	ldr	r0, [pc, #20]	; (749c <prio_recv_thread+0x54>)
    7488:	f009 ffba 	bl	11400 <k_queue_append>
    748c:	e7dd      	b.n	744a <prio_recv_thread+0x2>

			continue;
		}

		BT_DBG("sem take...");
		k_sem_take(&sem_prio_recv, K_FOREVER);
    748e:	2101      	movs	r1, #1
    7490:	4803      	ldr	r0, [pc, #12]	; (74a0 <prio_recv_thread+0x58>)
    7492:	4249      	negs	r1, r1
    7494:	f00a fa5e 	bl	11954 <k_sem_take>
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    7498:	e7d7      	b.n	744a <prio_recv_thread+0x2>
    749a:	46c0      	nop			; (mov r8, r8)
    749c:	20000614 	.word	0x20000614
    74a0:	200005ec 	.word	0x200005ec

000074a4 <hci_driver_send>:

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    74a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    74a6:	8983      	ldrh	r3, [r0, #12]

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    74a8:	0004      	movs	r4, r0
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    74aa:	2b00      	cmp	r3, #0
    74ac:	d10a      	bne.n	74c4 <hci_driver_send+0x20>
		BT_ERR("Empty HCI packet");
    74ae:	4b1a      	ldr	r3, [pc, #104]	; (7518 <hci_driver_send+0x74>)
    74b0:	4a1a      	ldr	r2, [pc, #104]	; (751c <hci_driver_send+0x78>)
    74b2:	9301      	str	r3, [sp, #4]
    74b4:	4b1a      	ldr	r3, [pc, #104]	; (7520 <hci_driver_send+0x7c>)
    74b6:	491b      	ldr	r1, [pc, #108]	; (7524 <hci_driver_send+0x80>)
    74b8:	9300      	str	r3, [sp, #0]
    74ba:	481b      	ldr	r0, [pc, #108]	; (7528 <hci_driver_send+0x84>)
    74bc:	4b1b      	ldr	r3, [pc, #108]	; (752c <hci_driver_send+0x88>)
    74be:	f7fa f9e9 	bl	1894 <printk>
    74c2:	e020      	b.n	7506 <hci_driver_send+0x62>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    74c4:	2203      	movs	r2, #3
    74c6:	89c3      	ldrh	r3, [r0, #14]
    74c8:	18c3      	adds	r3, r0, r3
    74ca:	3313      	adds	r3, #19
    74cc:	4393      	bics	r3, r2
    74ce:	781b      	ldrb	r3, [r3, #0]
		return -EINVAL;
	}

	type = bt_buf_get_type(buf);
	switch (type) {
    74d0:	2b00      	cmp	r3, #0
    74d2:	d006      	beq.n	74e2 <hci_driver_send+0x3e>
    74d4:	2b02      	cmp	r3, #2
    74d6:	d10b      	bne.n	74f0 <hci_driver_send+0x4c>
#if defined(CONFIG_BLUETOOTH_CONN)
	case BT_BUF_ACL_OUT:
		err = hci_acl_handle(buf);
    74d8:	f7ff fb96 	bl	6c08 <hci_acl_handle>
	default:
		BT_ERR("Unknown HCI type %u", type);
		return -EINVAL;
	}

	if (!err) {
    74dc:	2800      	cmp	r0, #0
    74de:	d119      	bne.n	7514 <hci_driver_send+0x70>
    74e0:	e014      	b.n	750c <hci_driver_send+0x68>

static int cmd_handle(struct net_buf *buf)
{
	struct net_buf *evt;

	evt = hci_cmd_handle(buf);
    74e2:	f7ff f805 	bl	64f0 <hci_cmd_handle>
	if (evt) {
    74e6:	2800      	cmp	r0, #0
    74e8:	d010      	beq.n	750c <hci_driver_send+0x68>
		BT_DBG("Replying with event of %u bytes", evt->len);
		bt_recv_prio(evt);
    74ea:	f7fb fdf3 	bl	30d4 <bt_recv_prio>
    74ee:	e00d      	b.n	750c <hci_driver_send+0x68>
#endif
	case BT_BUF_CMD:
		err = cmd_handle(buf);
		break;
	default:
		BT_ERR("Unknown HCI type %u", type);
    74f0:	4a09      	ldr	r2, [pc, #36]	; (7518 <hci_driver_send+0x74>)
    74f2:	9301      	str	r3, [sp, #4]
    74f4:	4b0a      	ldr	r3, [pc, #40]	; (7520 <hci_driver_send+0x7c>)
    74f6:	9202      	str	r2, [sp, #8]
    74f8:	9300      	str	r3, [sp, #0]
    74fa:	4a08      	ldr	r2, [pc, #32]	; (751c <hci_driver_send+0x78>)
    74fc:	4b0b      	ldr	r3, [pc, #44]	; (752c <hci_driver_send+0x88>)
    74fe:	4909      	ldr	r1, [pc, #36]	; (7524 <hci_driver_send+0x80>)
    7500:	480b      	ldr	r0, [pc, #44]	; (7530 <hci_driver_send+0x8c>)
    7502:	f7fa f9c7 	bl	1894 <printk>
		return -EINVAL;
    7506:	2016      	movs	r0, #22
    7508:	4240      	negs	r0, r0
    750a:	e003      	b.n	7514 <hci_driver_send+0x70>
	}

	if (!err) {
		net_buf_unref(buf);
    750c:	0020      	movs	r0, r4
    750e:	f009 f837 	bl	10580 <net_buf_unref>
    7512:	2000      	movs	r0, #0
	}

	BT_DBG("exit: %d", err);

	return err;
}
    7514:	b004      	add	sp, #16
    7516:	bd10      	pop	{r4, pc}
    7518:	0001241d 	.word	0x0001241d
    751c:	0001246d 	.word	0x0001246d
    7520:	000124a8 	.word	0x000124a8
    7524:	000123e3 	.word	0x000123e3
    7528:	00013431 	.word	0x00013431
    752c:	000147a4 	.word	0x000147a4
    7530:	00013452 	.word	0x00013452

00007534 <hci_driver_open>:

static int hci_driver_open(void)
{
    7534:	b510      	push	{r4, lr}
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    7536:	481a      	ldr	r0, [pc, #104]	; (75a0 <hci_driver_open+0x6c>)

	return err;
}

static int hci_driver_open(void)
{
    7538:	b086      	sub	sp, #24
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    753a:	f007 ff0d 	bl	f358 <ll_init>
    753e:	1e04      	subs	r4, r0, #0
	if (err) {
    7540:	d00b      	beq.n	755a <hci_driver_open+0x26>
		BT_ERR("LL initialization failed: %u", err);
    7542:	4b18      	ldr	r3, [pc, #96]	; (75a4 <hci_driver_open+0x70>)
    7544:	9001      	str	r0, [sp, #4]
    7546:	9302      	str	r3, [sp, #8]
    7548:	4b17      	ldr	r3, [pc, #92]	; (75a8 <hci_driver_open+0x74>)
    754a:	4a18      	ldr	r2, [pc, #96]	; (75ac <hci_driver_open+0x78>)
    754c:	9300      	str	r3, [sp, #0]
    754e:	4918      	ldr	r1, [pc, #96]	; (75b0 <hci_driver_open+0x7c>)
    7550:	4b18      	ldr	r3, [pc, #96]	; (75b4 <hci_driver_open+0x80>)
    7552:	4819      	ldr	r0, [pc, #100]	; (75b8 <hci_driver_open+0x84>)
    7554:	f7fa f99e 	bl	1894 <printk>
		return err;
    7558:	e01e      	b.n	7598 <hci_driver_open+0x64>
	}

#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hci_init(&hbuf_signal);
#else
	hci_init(NULL);
    755a:	f7ff fef5 	bl	7348 <hci_init>
#endif

	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    755e:	230a      	movs	r3, #10
    7560:	22bb      	movs	r2, #187	; 0xbb
    7562:	425b      	negs	r3, r3
    7564:	9303      	str	r3, [sp, #12]
    7566:	0092      	lsls	r2, r2, #2
    7568:	4b14      	ldr	r3, [pc, #80]	; (75bc <hci_driver_open+0x88>)
    756a:	4915      	ldr	r1, [pc, #84]	; (75c0 <hci_driver_open+0x8c>)
    756c:	9405      	str	r4, [sp, #20]
    756e:	9404      	str	r4, [sp, #16]
    7570:	9402      	str	r4, [sp, #8]
    7572:	9401      	str	r4, [sp, #4]
    7574:	9400      	str	r4, [sp, #0]
    7576:	4813      	ldr	r0, [pc, #76]	; (75c4 <hci_driver_open+0x90>)
    7578:	f00a fba2 	bl	11cc0 <k_thread_create>
			K_THREAD_STACK_SIZEOF(prio_recv_thread_stack),
			prio_recv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(6), 0, K_NO_WAIT);

	k_thread_create(&recv_thread_data, recv_thread_stack,
    757c:	2309      	movs	r3, #9
    757e:	425b      	negs	r3, r3
    7580:	9303      	str	r3, [sp, #12]
    7582:	9405      	str	r4, [sp, #20]
    7584:	9404      	str	r4, [sp, #16]
    7586:	9402      	str	r4, [sp, #8]
    7588:	9401      	str	r4, [sp, #4]
    758a:	9400      	str	r4, [sp, #0]
    758c:	4b0e      	ldr	r3, [pc, #56]	; (75c8 <hci_driver_open+0x94>)
    758e:	4a0f      	ldr	r2, [pc, #60]	; (75cc <hci_driver_open+0x98>)
    7590:	490f      	ldr	r1, [pc, #60]	; (75d0 <hci_driver_open+0x9c>)
    7592:	4810      	ldr	r0, [pc, #64]	; (75d4 <hci_driver_open+0xa0>)
    7594:	f00a fb94 	bl	11cc0 <k_thread_create>
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	BT_DBG("Success.");

	return 0;
}
    7598:	0020      	movs	r0, r4
    759a:	b006      	add	sp, #24
    759c:	bd10      	pop	{r4, pc}
    759e:	46c0      	nop			; (mov r8, r8)
    75a0:	200005ec 	.word	0x200005ec
    75a4:	0001241d 	.word	0x0001241d
    75a8:	000124a8 	.word	0x000124a8
    75ac:	0001246d 	.word	0x0001246d
    75b0:	000123e3 	.word	0x000123e3
    75b4:	000147c4 	.word	0x000147c4
    75b8:	00013476 	.word	0x00013476
    75bc:	00007449 	.word	0x00007449
    75c0:	2000220c 	.word	0x2000220c
    75c4:	20001c80 	.word	0x20001c80
    75c8:	0000738d 	.word	0x0000738d
    75cc:	0000052c 	.word	0x0000052c
    75d0:	200025c0 	.word	0x200025c0
    75d4:	20001bf8 	.word	0x20001bf8

000075d8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    75d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    75da:	2504      	movs	r5, #4
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    75dc:	270c      	movs	r7, #12
void mayfly_init(void)
{
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
    75de:	3d01      	subs	r5, #1
    75e0:	b2ed      	uxtb	r5, r5
    75e2:	2dff      	cmp	r5, #255	; 0xff
    75e4:	d015      	beq.n	7612 <mayfly_init+0x3a>
    75e6:	2404      	movs	r4, #4
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    75e8:	2630      	movs	r6, #48	; 0x30
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    75ea:	3c01      	subs	r4, #1
    75ec:	b2e4      	uxtb	r4, r4
    75ee:	2cff      	cmp	r4, #255	; 0xff
    75f0:	d0f5      	beq.n	75de <mayfly_init+0x6>
			memq_init(mfl[callee_id][caller_id],
    75f2:	0033      	movs	r3, r6
    75f4:	0039      	movs	r1, r7
    75f6:	436b      	muls	r3, r5
    75f8:	4361      	muls	r1, r4
    75fa:	18c9      	adds	r1, r1, r3
    75fc:	4b05      	ldr	r3, [pc, #20]	; (7614 <mayfly_init+0x3c>)
    75fe:	00a8      	lsls	r0, r5, #2
    7600:	1859      	adds	r1, r3, r1
    7602:	1900      	adds	r0, r0, r4
    7604:	4b04      	ldr	r3, [pc, #16]	; (7618 <mayfly_init+0x40>)
    7606:	00c0      	lsls	r0, r0, #3
    7608:	1d0a      	adds	r2, r1, #4
    760a:	1818      	adds	r0, r3, r0
    760c:	f000 f98c 	bl	7928 <memq_init>
    7610:	e7eb      	b.n	75ea <mayfly_init+0x12>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    7612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7614:	20000d50 	.word	0x20000d50
    7618:	20000cd0 	.word	0x20000cd0

0000761c <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    761c:	b570      	push	{r4, r5, r6, lr}
    761e:	250c      	movs	r5, #12
    7620:	2430      	movs	r4, #48	; 0x30
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    7622:	002b      	movs	r3, r5
    7624:	434c      	muls	r4, r1
    7626:	4343      	muls	r3, r0
    7628:	4e0b      	ldr	r6, [pc, #44]	; (7658 <mayfly_enable+0x3c>)
    762a:	191c      	adds	r4, r3, r4
    762c:	1933      	adds	r3, r6, r4
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	if (enable) {
    762e:	2a00      	cmp	r2, #0
    7630:	d008      	beq.n	7644 <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
    7632:	7a1d      	ldrb	r5, [r3, #8]
    7634:	7a5c      	ldrb	r4, [r3, #9]
    7636:	42ac      	cmp	r4, r5
    7638:	d101      	bne.n	763e <mayfly_enable+0x22>
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    763a:	3401      	adds	r4, #1
    763c:	721c      	strb	r4, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    763e:	f007 fe01 	bl	f244 <mayfly_enable_cb>
    7642:	e007      	b.n	7654 <mayfly_enable+0x38>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    7644:	7a9c      	ldrb	r4, [r3, #10]
    7646:	7ada      	ldrb	r2, [r3, #11]
    7648:	42a2      	cmp	r2, r4
    764a:	d103      	bne.n	7654 <mayfly_enable+0x38>
		    mft[callee_id][caller_id].disable_ack) {
			mft[callee_id][caller_id].disable_req++;
    764c:	3201      	adds	r2, #1
    764e:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    7650:	f007 fe50 	bl	f2f4 <mayfly_pend>
		}
	}
}
    7654:	bd70      	pop	{r4, r5, r6, pc}
    7656:	46c0      	nop			; (mov r8, r8)
    7658:	20000d50 	.word	0x20000d50

0000765c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    765e:	0005      	movs	r5, r0
    7660:	000e      	movs	r6, r1
    7662:	001c      	movs	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7664:	2a00      	cmp	r2, #0
    7666:	d001      	beq.n	766c <mayfly_enqueue+0x10>
    7668:	2101      	movs	r1, #1
    766a:	e017      	b.n	769c <mayfly_enqueue+0x40>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    766c:	f007 fe34 	bl	f2d8 <mayfly_prio_is_equal>
    7670:	2800      	cmp	r0, #0
    7672:	d0f9      	beq.n	7668 <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
    7674:	0031      	movs	r1, r6
    7676:	0028      	movs	r0, r5
    7678:	f007 fe0a 	bl	f290 <mayfly_is_enabled>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    767c:	2800      	cmp	r0, #0
    767e:	d0f3      	beq.n	7668 <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
    7680:	230c      	movs	r3, #12
    7682:	436b      	muls	r3, r5
    7684:	001a      	movs	r2, r3
    7686:	2330      	movs	r3, #48	; 0x30
    7688:	4373      	muls	r3, r6
    768a:	18d3      	adds	r3, r2, r3
    768c:	4a1d      	ldr	r2, [pc, #116]	; (7704 <mayfly_enqueue+0xa8>)
    768e:	18d3      	adds	r3, r2, r3
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7690:	7a9a      	ldrb	r2, [r3, #10]
    7692:	7adb      	ldrb	r3, [r3, #11]
    7694:	1ad3      	subs	r3, r2, r3
    7696:	1e5a      	subs	r2, r3, #1
    7698:	4193      	sbcs	r3, r2
    769a:	0019      	movs	r1, r3

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    769c:	2203      	movs	r2, #3
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    769e:	7863      	ldrb	r3, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    76a0:	7827      	ldrb	r7, [r4, #0]
    76a2:	1aff      	subs	r7, r7, r3
    76a4:	4017      	ands	r7, r2
	if (state != 0) {
    76a6:	d010      	beq.n	76ca <mayfly_enqueue+0x6e>
		if (chain) {
    76a8:	2900      	cmp	r1, #0
    76aa:	d00a      	beq.n	76c2 <mayfly_enqueue+0x66>

				return 0;
			}

			/* already ready */
			return 1;
    76ac:	2001      	movs	r0, #1

	/* already in queue */
	state = (m->_req - ack) & 0x03;
	if (state != 0) {
		if (chain) {
			if (state != 1) {
    76ae:	4287      	cmp	r7, r0
    76b0:	d026      	beq.n	7700 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    76b2:	181b      	adds	r3, r3, r0
    76b4:	b2db      	uxtb	r3, r3
    76b6:	7023      	strb	r3, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    76b8:	0031      	movs	r1, r6
    76ba:	0028      	movs	r0, r5
    76bc:	f007 fe1a 	bl	f2f4 <mayfly_pend>
    76c0:	e008      	b.n	76d4 <mayfly_enqueue+0x78>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    76c2:	3302      	adds	r3, #2
    76c4:	b2db      	uxtb	r3, r3
    76c6:	7023      	strb	r3, [r4, #0]
    76c8:	e001      	b.n	76ce <mayfly_enqueue+0x72>
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    76ca:	2900      	cmp	r1, #0
    76cc:	d104      	bne.n	76d8 <mayfly_enqueue+0x7c>
		/* call fp */
		m->fp(m->param);
    76ce:	68e3      	ldr	r3, [r4, #12]
    76d0:	68a0      	ldr	r0, [r4, #8]
    76d2:	4798      	blx	r3

		return 0;
    76d4:	2000      	movs	r0, #0
    76d6:	e013      	b.n	7700 <mayfly_enqueue+0xa4>
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    76d8:	3301      	adds	r3, #1
    76da:	b2db      	uxtb	r3, r3
    76dc:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    76de:	220c      	movs	r2, #12
    76e0:	2330      	movs	r3, #48	; 0x30
    76e2:	436a      	muls	r2, r5
    76e4:	4373      	muls	r3, r6
    76e6:	18d2      	adds	r2, r2, r3
    76e8:	4b06      	ldr	r3, [pc, #24]	; (7704 <mayfly_enqueue+0xa8>)
    76ea:	6861      	ldr	r1, [r4, #4]
    76ec:	189a      	adds	r2, r3, r2
    76ee:	3204      	adds	r2, #4
    76f0:	0020      	movs	r0, r4
    76f2:	f000 f91c 	bl	792e <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    76f6:	0028      	movs	r0, r5
    76f8:	0031      	movs	r1, r6
    76fa:	f007 fdfb 	bl	f2f4 <mayfly_pend>

	return 0;
    76fe:	0038      	movs	r0, r7
}
    7700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7702:	46c0      	nop			; (mov r8, r8)
    7704:	20000d50 	.word	0x20000d50

00007708 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
	u8_t enable = 0;
    7708:	2300      	movs	r3, #0

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    770a:	b5f0      	push	{r4, r5, r6, r7, lr}
    770c:	0005      	movs	r5, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    770e:	2404      	movs	r4, #4
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    7710:	2730      	movs	r7, #48	; 0x30

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    7712:	b087      	sub	sp, #28
	u8_t disable = 0;
	u8_t enable = 0;
    7714:	9300      	str	r3, [sp, #0]
	return 0;
}

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
    7716:	9301      	str	r3, [sp, #4]
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    7718:	3c01      	subs	r4, #1
    771a:	b2e4      	uxtb	r4, r4
    771c:	2cff      	cmp	r4, #255	; 0xff
    771e:	d070      	beq.n	7802 <mayfly_run+0xfa>
		void *link;
		struct mayfly *m = 0;
    7720:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    7722:	220c      	movs	r2, #12

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;
    7724:	9305      	str	r3, [sp, #20]

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    7726:	003b      	movs	r3, r7
    7728:	4362      	muls	r2, r4
    772a:	436b      	muls	r3, r5
    772c:	493b      	ldr	r1, [pc, #236]	; (781c <mayfly_run+0x114>)
    772e:	18d3      	adds	r3, r2, r3
    7730:	18c8      	adds	r0, r1, r3
    7732:	aa05      	add	r2, sp, #20
    7734:	5859      	ldr	r1, [r3, r1]
    7736:	6840      	ldr	r0, [r0, #4]
    7738:	f000 f900 	bl	793c <memq_peek>
    773c:	0006      	movs	r6, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    773e:	2e00      	cmp	r6, #0
    7740:	d042      	beq.n	77c8 <mayfly_run+0xc0>
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
    7742:	2003      	movs	r0, #3
		while (link) {
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    7744:	9b05      	ldr	r3, [sp, #20]
			state = (req - m->_ack) & 0x03;
    7746:	785a      	ldrb	r2, [r3, #1]
		while (link) {
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    7748:	7819      	ldrb	r1, [r3, #0]
			state = (req - m->_ack) & 0x03;
    774a:	1a89      	subs	r1, r1, r2
    774c:	4008      	ands	r0, r1
    774e:	9002      	str	r0, [sp, #8]
			if (state == 1) {
    7750:	2801      	cmp	r0, #1
    7752:	d104      	bne.n	775e <mayfly_run+0x56>
				/* mark mayfly as ran */
				m->_ack--;
    7754:	3a01      	subs	r2, #1
    7756:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    7758:	6898      	ldr	r0, [r3, #8]
    775a:	68da      	ldr	r2, [r3, #12]
    775c:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			req = m->_req;
    775e:	9a05      	ldr	r2, [sp, #20]
    7760:	7813      	ldrb	r3, [r2, #0]
    7762:	b2db      	uxtb	r3, r3
    7764:	9303      	str	r3, [sp, #12]
			if (((req - m->_ack) & 0x03) != 1) {
    7766:	7853      	ldrb	r3, [r2, #1]
    7768:	9a03      	ldr	r2, [sp, #12]
    776a:	1ad3      	subs	r3, r2, r3
    776c:	2203      	movs	r2, #3
    776e:	4013      	ands	r3, r2
    7770:	2b01      	cmp	r3, #1
    7772:	d010      	beq.n	7796 <mayfly_run+0x8e>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7774:	003b      	movs	r3, r7
    7776:	3209      	adds	r2, #9
    7778:	4362      	muls	r2, r4
    777a:	436b      	muls	r3, r5
    777c:	18d3      	adds	r3, r2, r3
    777e:	4a27      	ldr	r2, [pc, #156]	; (781c <mayfly_run+0x114>)
    7780:	18d3      	adds	r3, r2, r3
    7782:	0019      	movs	r1, r3
    7784:	2200      	movs	r2, #0
    7786:	6858      	ldr	r0, [r3, #4]
    7788:	f000 f8e3 	bl	7952 <memq_dequeue>

				/* release link into dequeued mayfly struct */
				m->_link = link;

				/* reset mayfly state to idle */
				m->_ack = req;
    778c:	466a      	mov	r2, sp
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    778e:	9b05      	ldr	r3, [sp, #20]

				/* reset mayfly state to idle */
				m->_ack = req;
    7790:	7b12      	ldrb	r2, [r2, #12]
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    7792:	605e      	str	r6, [r3, #4]

				/* reset mayfly state to idle */
				m->_ack = req;
    7794:	705a      	strb	r2, [r3, #1]
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    7796:	003b      	movs	r3, r7
    7798:	220c      	movs	r2, #12
    779a:	436b      	muls	r3, r5
    779c:	4362      	muls	r2, r4
    779e:	491f      	ldr	r1, [pc, #124]	; (781c <mayfly_run+0x114>)
    77a0:	18d3      	adds	r3, r2, r3
    77a2:	18c8      	adds	r0, r1, r3
    77a4:	aa05      	add	r2, sp, #20
    77a6:	5859      	ldr	r1, [r3, r1]
    77a8:	6840      	ldr	r0, [r0, #4]
    77aa:	f000 f8c7 	bl	793c <memq_peek>
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    77ae:	9b02      	ldr	r3, [sp, #8]
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    77b0:	0006      	movs	r6, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    77b2:	2b01      	cmp	r3, #1
    77b4:	d1c3      	bne.n	773e <mayfly_run+0x36>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    77b6:	2c00      	cmp	r4, #0
    77b8:	d101      	bne.n	77be <mayfly_run+0xb6>
    77ba:	2800      	cmp	r0, #0
    77bc:	d004      	beq.n	77c8 <mayfly_run+0xc0>
					mayfly_pend(callee_id, callee_id);
    77be:	0029      	movs	r1, r5
    77c0:	0028      	movs	r0, r5
    77c2:	f007 fd97 	bl	f2f4 <mayfly_pend>
    77c6:	e027      	b.n	7818 <mayfly_run+0x110>
					return;
				}
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
    77c8:	003a      	movs	r2, r7
    77ca:	200c      	movs	r0, #12
    77cc:	436a      	muls	r2, r5
    77ce:	4360      	muls	r0, r4
    77d0:	4b12      	ldr	r3, [pc, #72]	; (781c <mayfly_run+0x114>)
    77d2:	1882      	adds	r2, r0, r2
    77d4:	189a      	adds	r2, r3, r2
    77d6:	7a90      	ldrb	r0, [r2, #10]
    77d8:	7ad6      	ldrb	r6, [r2, #11]
    77da:	0019      	movs	r1, r3
    77dc:	4286      	cmp	r6, r0
    77de:	d002      	beq.n	77e6 <mayfly_run+0xde>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    77e0:	2301      	movs	r3, #1

			mft[callee_id][caller_id].disable_ack =
    77e2:	72d0      	strb	r0, [r2, #11]
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    77e4:	9301      	str	r3, [sp, #4]

			mft[callee_id][caller_id].disable_ack =
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    77e6:	230c      	movs	r3, #12
    77e8:	003a      	movs	r2, r7
    77ea:	4363      	muls	r3, r4
    77ec:	436a      	muls	r2, r5
    77ee:	189b      	adds	r3, r3, r2
    77f0:	18cb      	adds	r3, r1, r3
    77f2:	7a1a      	ldrb	r2, [r3, #8]
    77f4:	7a59      	ldrb	r1, [r3, #9]
    77f6:	4291      	cmp	r1, r2
    77f8:	d08e      	beq.n	7718 <mayfly_run+0x10>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;

			mft[callee_id][caller_id].enable_ack =
    77fa:	725a      	strb	r2, [r3, #9]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;
    77fc:	2301      	movs	r3, #1
    77fe:	9300      	str	r3, [sp, #0]
    7800:	e78a      	b.n	7718 <mayfly_run+0x10>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    7802:	9b01      	ldr	r3, [sp, #4]
    7804:	2b00      	cmp	r3, #0
    7806:	d007      	beq.n	7818 <mayfly_run+0x110>
    7808:	9b00      	ldr	r3, [sp, #0]
    780a:	2b00      	cmp	r3, #0
    780c:	d104      	bne.n	7818 <mayfly_run+0x110>
		mayfly_enable_cb(callee_id, callee_id, 0);
    780e:	001a      	movs	r2, r3
    7810:	0029      	movs	r1, r5
    7812:	0028      	movs	r0, r5
    7814:	f007 fd16 	bl	f244 <mayfly_enable_cb>
	}
}
    7818:	b007      	add	sp, #28
    781a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    781c:	20000d50 	.word	0x20000d50

00007820 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    7820:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7822:	0014      	movs	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7824:	2203      	movs	r2, #3

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    7826:	0005      	movs	r5, r0
	*mem_head = mem_pool;
    7828:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    782a:	1dc3      	adds	r3, r0, #7

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    782c:	1e60      	subs	r0, r4, #1
    782e:	b280      	uxth	r0, r0
    7830:	4348      	muls	r0, r1
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7832:	4393      	bics	r3, r2
    7834:	801c      	strh	r4, [r3, #0]

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    7836:	000e      	movs	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7838:	1828      	adds	r0, r5, r0
    783a:	3201      	adds	r2, #1
    783c:	2100      	movs	r1, #0
    783e:	f7f9 fa30 	bl	ca2 <memset>
    7842:	3c02      	subs	r4, #2
	       sizeof(mem_pool));
	while (mem_count--) {
    7844:	4b08      	ldr	r3, [pc, #32]	; (7868 <mem_init+0x48>)
    7846:	b2a4      	uxth	r4, r4
    7848:	429c      	cmp	r4, r3
    784a:	d00b      	beq.n	7864 <mem_init+0x44>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    784c:	1c60      	adds	r0, r4, #1
    784e:	4370      	muls	r0, r6
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    7850:	182b      	adds	r3, r5, r0
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7852:	1b80      	subs	r0, r0, r6
    7854:	1828      	adds	r0, r5, r0
    7856:	2204      	movs	r2, #4
    7858:	a901      	add	r1, sp, #4
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    785a:	9301      	str	r3, [sp, #4]
    785c:	3c01      	subs	r4, #1
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    785e:	f7f9 f9f6 	bl	c4e <memcpy>
    7862:	e7ef      	b.n	7844 <mem_init+0x24>
		       (void *)&next, sizeof(next));
	}
}
    7864:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    7866:	46c0      	nop			; (mov r8, r8)
    7868:	0000ffff 	.word	0x0000ffff

0000786c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    786c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (*mem_head) {
    786e:	6805      	ldr	r5, [r0, #0]
		       (void *)&next, sizeof(next));
	}
}

void *mem_acquire(void **mem_head)
{
    7870:	0006      	movs	r6, r0
	if (*mem_head) {
    7872:	2d00      	cmp	r5, #0
    7874:	d011      	beq.n	789a <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7876:	2703      	movs	r7, #3
    7878:	1deb      	adds	r3, r5, #7
    787a:	43bb      	bics	r3, r7
    787c:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    787e:	2204      	movs	r2, #4
    7880:	0029      	movs	r1, r5
    7882:	a801      	add	r0, sp, #4
    7884:	f7f9 f9e3 	bl	c4e <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    7888:	9b01      	ldr	r3, [sp, #4]
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;
    788a:	3c01      	subs	r4, #1
    788c:	b2a4      	uxth	r4, r4

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));

		/* Store free mem_count after the list's next pointer */
		if (head) {
    788e:	2b00      	cmp	r3, #0
    7890:	d002      	beq.n	7898 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    7892:	1dda      	adds	r2, r3, #7
    7894:	43ba      	bics	r2, r7
    7896:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    7898:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    789a:	0028      	movs	r0, r5
    789c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000789e <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    789e:	680b      	ldr	r3, [r1, #0]

	return NULL;
}

void mem_release(void *mem, void **mem_head)
{
    78a0:	b570      	push	{r4, r5, r6, lr}
    78a2:	0005      	movs	r5, r0
    78a4:	000c      	movs	r4, r1
	u16_t free_count = 0;
    78a6:	1e1e      	subs	r6, r3, #0

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    78a8:	d003      	beq.n	78b2 <mem_release+0x14>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    78aa:	2203      	movs	r2, #3
    78ac:	3307      	adds	r3, #7
    78ae:	4393      	bics	r3, r2
    78b0:	881e      	ldrh	r6, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    78b2:	0028      	movs	r0, r5
    78b4:	2204      	movs	r2, #4
    78b6:	0021      	movs	r1, r4
    78b8:	f7f9 f9c9 	bl	c4e <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    78bc:	2203      	movs	r2, #3
    78be:	1deb      	adds	r3, r5, #7
    78c0:	3601      	adds	r6, #1
    78c2:	4393      	bics	r3, r2
    78c4:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    78c6:	6025      	str	r5, [r4, #0]
}
    78c8:	bd70      	pop	{r4, r5, r6, pc}

000078ca <mem_free_count_get>:

u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;
    78ca:	1e03      	subs	r3, r0, #0

	/* Get the free count from the list */
	if (mem_head) {
    78cc:	d003      	beq.n	78d6 <mem_free_count_get+0xc>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    78ce:	2303      	movs	r3, #3
    78d0:	3007      	adds	r0, #7
    78d2:	4398      	bics	r0, r3
    78d4:	8803      	ldrh	r3, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    78d6:	0018      	movs	r0, r3
    78d8:	4770      	bx	lr

000078da <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
    78da:	434a      	muls	r2, r1
    78dc:	1880      	adds	r0, r0, r2
}
    78de:	4770      	bx	lr

000078e0 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    78e0:	1a40      	subs	r0, r0, r1
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
    78e2:	b510      	push	{r4, lr}
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    78e4:	b280      	uxth	r0, r0
    78e6:	0011      	movs	r1, r2
    78e8:	f7f8 fc64 	bl	1b4 <__aeabi_uidiv>
    78ec:	b280      	uxth	r0, r0
}
    78ee:	bd10      	pop	{r4, pc}

000078f0 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    78f0:	b510      	push	{r4, lr}
	src += len;
	while (len--) {
    78f2:	4b06      	ldr	r3, [pc, #24]	; (790c <mem_rcopy+0x1c>)
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
}

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    78f4:	1889      	adds	r1, r1, r2
	while (len--) {
    78f6:	3a01      	subs	r2, #1
    78f8:	b292      	uxth	r2, r2
    78fa:	429a      	cmp	r2, r3
    78fc:	d004      	beq.n	7908 <mem_rcopy+0x18>
		*dst++ = *--src;
    78fe:	3901      	subs	r1, #1
    7900:	780c      	ldrb	r4, [r1, #0]
    7902:	7004      	strb	r4, [r0, #0]
    7904:	3001      	adds	r0, #1
    7906:	e7f6      	b.n	78f6 <mem_rcopy+0x6>
	}
}
    7908:	bd10      	pop	{r4, pc}
    790a:	46c0      	nop			; (mov r8, r8)
    790c:	0000ffff 	.word	0x0000ffff

00007910 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    7910:	1841      	adds	r1, r0, r1
	while (len--) {
    7912:	4288      	cmp	r0, r1
    7914:	d006      	beq.n	7924 <mem_nz+0x14>
    7916:	3001      	adds	r0, #1
		if (*src++) {
    7918:	1e43      	subs	r3, r0, #1
    791a:	781b      	ldrb	r3, [r3, #0]
    791c:	2b00      	cmp	r3, #0
    791e:	d0f8      	beq.n	7912 <mem_nz+0x2>
			return 1;
    7920:	2001      	movs	r0, #1
    7922:	e000      	b.n	7926 <mem_nz+0x16>
		}
	}

	return 0;
    7924:	2000      	movs	r0, #0
}
    7926:	4770      	bx	lr

00007928 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    7928:	6010      	str	r0, [r2, #0]
    792a:	6008      	str	r0, [r1, #0]

	return link;
}
    792c:	4770      	bx	lr

0000792e <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    792e:	6813      	ldr	r3, [r2, #0]
    7930:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    7932:	6813      	ldr	r3, [r2, #0]
    7934:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;

	return link;
}
    7936:	0008      	movs	r0, r1

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;

	/* increment the tail! */
	*tail = link;
    7938:	6011      	str	r1, [r2, #0]

	return link;
}
    793a:	4770      	bx	lr

0000793c <memq_peek>:
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
		return 0;
    793c:	2300      	movs	r3, #0
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    793e:	4281      	cmp	r1, r0
    7940:	d005      	beq.n	794e <memq_peek+0x12>
    7942:	000b      	movs	r3, r1

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    7944:	2a00      	cmp	r2, #0
    7946:	d002      	beq.n	794e <memq_peek+0x12>
		*mem = *((void **)link + 1);
    7948:	684b      	ldr	r3, [r1, #4]
    794a:	6013      	str	r3, [r2, #0]
    794c:	000b      	movs	r3, r1
	}

	return link;
}
    794e:	0018      	movs	r0, r3
    7950:	4770      	bx	lr

00007952 <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    7952:	680b      	ldr	r3, [r1, #0]
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    7954:	4283      	cmp	r3, r0
    7956:	d004      	beq.n	7962 <memq_dequeue+0x10>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    7958:	2a00      	cmp	r2, #0
    795a:	d005      	beq.n	7968 <memq_dequeue+0x16>
		*mem = *((void **)link + 1);
    795c:	6858      	ldr	r0, [r3, #4]
    795e:	6010      	str	r0, [r2, #0]
    7960:	e002      	b.n	7968 <memq_dequeue+0x16>

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    7962:	2300      	movs	r3, #0
    7964:	681b      	ldr	r3, [r3, #0]
    7966:	deff      	udf	#255	; 0xff
    7968:	681a      	ldr	r2, [r3, #0]

	return link;
}
    796a:	0018      	movs	r0, r3

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    796c:	600a      	str	r2, [r1, #0]

	return link;
}
    796e:	4770      	bx	lr

00007970 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    7970:	0002      	movs	r2, r0
    7972:	1841      	adds	r1, r0, r1
	u8_t one_count = 0;
    7974:	2000      	movs	r0, #0

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    7976:	b510      	push	{r4, lr}
	u8_t one_count = 0;

	while (octets_len--) {
    7978:	428a      	cmp	r2, r1
    797a:	d009      	beq.n	7990 <util_ones_count_get+0x20>
		u8_t bite;

		bite = *octets;
    797c:	7814      	ldrb	r4, [r2, #0]
		while (bite) {
    797e:	2c00      	cmp	r4, #0
    7980:	d004      	beq.n	798c <util_ones_count_get+0x1c>
			bite &= (bite - 1);
    7982:	1e63      	subs	r3, r4, #1
    7984:	401c      	ands	r4, r3
			one_count++;
    7986:	1c43      	adds	r3, r0, #1
    7988:	b2d8      	uxtb	r0, r3
    798a:	e7f8      	b.n	797e <util_ones_count_get+0xe>
		}
		octets++;
    798c:	3201      	adds	r2, #1
    798e:	e7f3      	b.n	7978 <util_ones_count_get+0x8>
	}

	return one_count;
}
    7990:	bd10      	pop	{r4, pc}
	...

00007994 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    7994:	22a1      	movs	r2, #161	; 0xa1
    7996:	2100      	movs	r1, #0
    7998:	4b05      	ldr	r3, [pc, #20]	; (79b0 <cntr_init+0x1c>)
    799a:	00d2      	lsls	r2, r2, #3
    799c:	5099      	str	r1, [r3, r2]
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    799e:	22c0      	movs	r2, #192	; 0xc0
    79a0:	21d1      	movs	r1, #209	; 0xd1
    79a2:	0292      	lsls	r2, r2, #10
    79a4:	0089      	lsls	r1, r1, #2
    79a6:	505a      	str	r2, [r3, r1]
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    79a8:	3940      	subs	r1, #64	; 0x40
    79aa:	505a      	str	r2, [r3, r1]
			     RTC_INTENSET_COMPARE1_Msk);
}
    79ac:	4770      	bx	lr
    79ae:	46c0      	nop			; (mov r8, r8)
    79b0:	4000b000 	.word	0x4000b000

000079b4 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    79b4:	4a05      	ldr	r2, [pc, #20]	; (79cc <cntr_start+0x18>)
    79b6:	2001      	movs	r0, #1
    79b8:	7813      	ldrb	r3, [r2, #0]
    79ba:	1c59      	adds	r1, r3, #1
    79bc:	7011      	strb	r1, [r2, #0]
    79be:	2b00      	cmp	r3, #0
    79c0:	d102      	bne.n	79c8 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    79c2:	4a03      	ldr	r2, [pc, #12]	; (79d0 <cntr_start+0x1c>)
    79c4:	6010      	str	r0, [r2, #0]

	return 0;
    79c6:	0018      	movs	r0, r3
}
    79c8:	4770      	bx	lr
    79ca:	46c0      	nop			; (mov r8, r8)
    79cc:	20000e10 	.word	0x20000e10
    79d0:	4000b000 	.word	0x4000b000

000079d4 <cntr_stop>:

u32_t cntr_stop(void)
{
    79d4:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
    79d6:	4a0d      	ldr	r2, [pc, #52]	; (7a0c <cntr_stop+0x38>)
    79d8:	7813      	ldrb	r3, [r2, #0]
    79da:	2b00      	cmp	r3, #0
    79dc:	d10c      	bne.n	79f8 <cntr_stop+0x24>
    79de:	4b0c      	ldr	r3, [pc, #48]	; (7a10 <cntr_stop+0x3c>)
    79e0:	4a0c      	ldr	r2, [pc, #48]	; (7a14 <cntr_stop+0x40>)
    79e2:	9301      	str	r3, [sp, #4]
    79e4:	4b0c      	ldr	r3, [pc, #48]	; (7a18 <cntr_stop+0x44>)
    79e6:	490d      	ldr	r1, [pc, #52]	; (7a1c <cntr_stop+0x48>)
    79e8:	9300      	str	r3, [sp, #0]
    79ea:	480d      	ldr	r0, [pc, #52]	; (7a20 <cntr_stop+0x4c>)
    79ec:	4b0d      	ldr	r3, [pc, #52]	; (7a24 <cntr_stop+0x50>)
    79ee:	f7f9 ff51 	bl	1894 <printk>
    79f2:	b662      	cpsie	i
    79f4:	2004      	movs	r0, #4
    79f6:	df02      	svc	2

	if (--_refcount) {
    79f8:	3b01      	subs	r3, #1
    79fa:	b2db      	uxtb	r3, r3
    79fc:	7013      	strb	r3, [r2, #0]
    79fe:	2001      	movs	r0, #1
    7a00:	2b00      	cmp	r3, #0
    7a02:	d102      	bne.n	7a0a <cntr_stop+0x36>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    7a04:	4a08      	ldr	r2, [pc, #32]	; (7a28 <cntr_stop+0x54>)
    7a06:	6050      	str	r0, [r2, #4]

	return 0;
    7a08:	0018      	movs	r0, r3
}
    7a0a:	bd0e      	pop	{r1, r2, r3, pc}
    7a0c:	20000e10 	.word	0x20000e10
    7a10:	0001241d 	.word	0x0001241d
    7a14:	0001246d 	.word	0x0001246d
    7a18:	000124a8 	.word	0x000124a8
    7a1c:	000123e3 	.word	0x000123e3
    7a20:	000134ae 	.word	0x000134ae
    7a24:	000147e0 	.word	0x000147e0
    7a28:	4000b000 	.word	0x4000b000

00007a2c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    7a2c:	4b01      	ldr	r3, [pc, #4]	; (7a34 <cntr_cnt_get+0x8>)
    7a2e:	4a02      	ldr	r2, [pc, #8]	; (7a38 <cntr_cnt_get+0xc>)
    7a30:	58d0      	ldr	r0, [r2, r3]
}
    7a32:	4770      	bx	lr
    7a34:	00000504 	.word	0x00000504
    7a38:	4000b000 	.word	0x4000b000

00007a3c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    7a3c:	3051      	adds	r0, #81	; 0x51
    7a3e:	4b02      	ldr	r3, [pc, #8]	; (7a48 <cntr_cmp_set+0xc>)
    7a40:	30ff      	adds	r0, #255	; 0xff
    7a42:	0080      	lsls	r0, r0, #2
    7a44:	50c1      	str	r1, [r0, r3]
}
    7a46:	4770      	bx	lr
    7a48:	4000b000 	.word	0x4000b000

00007a4c <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    7a4c:	2101      	movs	r1, #1
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    7a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    7a50:	4b0f      	ldr	r3, [pc, #60]	; (7a90 <do_ecb+0x44>)
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    7a52:	4c10      	ldr	r4, [pc, #64]	; (7a94 <do_ecb+0x48>)
    7a54:	2500      	movs	r5, #0

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    7a56:	4a10      	ldr	r2, [pc, #64]	; (7a98 <do_ecb+0x4c>)
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    7a58:	6059      	str	r1, [r3, #4]
    7a5a:	0017      	movs	r7, r2
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    7a5c:	5098      	str	r0, [r3, r2]
		NRF_ECB->EVENTS_ENDECB = 0;
    7a5e:	6065      	str	r5, [r4, #4]
		NRF_ECB->EVENTS_ERRORECB = 0;
    7a60:	60a5      	str	r5, [r4, #8]
    7a62:	4d0c      	ldr	r5, [pc, #48]	; (7a94 <do_ecb+0x48>)
		NRF_ECB->TASKS_STARTECB = 1;
    7a64:	6019      	str	r1, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    7a66:	686e      	ldr	r6, [r5, #4]
    7a68:	2e00      	cmp	r6, #0
    7a6a:	d105      	bne.n	7a78 <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    7a6c:	68a6      	ldr	r6, [r4, #8]
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    7a6e:	2e00      	cmp	r6, #0
    7a70:	d102      	bne.n	7a78 <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
    7a72:	59de      	ldr	r6, [r3, r7]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    7a74:	2e00      	cmp	r6, #0
    7a76:	d1f6      	bne.n	7a66 <do_ecb+0x1a>
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    7a78:	4e05      	ldr	r6, [pc, #20]	; (7a90 <do_ecb+0x44>)
    7a7a:	6071      	str	r1, [r6, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    7a7c:	68ad      	ldr	r5, [r5, #8]
    7a7e:	2d00      	cmp	r5, #0
    7a80:	d1e8      	bne.n	7a54 <do_ecb+0x8>
    7a82:	589a      	ldr	r2, [r3, r2]
    7a84:	2a00      	cmp	r2, #0
    7a86:	d0e5      	beq.n	7a54 <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
    7a88:	4b03      	ldr	r3, [pc, #12]	; (7a98 <do_ecb+0x4c>)
    7a8a:	50f5      	str	r5, [r6, r3]
}
    7a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a8e:	46c0      	nop			; (mov r8, r8)
    7a90:	4000e000 	.word	0x4000e000
    7a94:	4000e0fc 	.word	0x4000e0fc
    7a98:	00000504 	.word	0x00000504

00007a9c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    7a9c:	b570      	push	{r4, r5, r6, lr}
    7a9e:	000e      	movs	r6, r1
    7aa0:	b08c      	sub	sp, #48	; 0x30
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    7aa2:	0001      	movs	r1, r0
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    7aa4:	0015      	movs	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    7aa6:	4668      	mov	r0, sp
    7aa8:	2210      	movs	r2, #16
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    7aaa:	001c      	movs	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    7aac:	f7ff ff20 	bl	78f0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    7ab0:	a804      	add	r0, sp, #16
    7ab2:	2210      	movs	r2, #16
    7ab4:	0031      	movs	r1, r6
    7ab6:	f7ff ff1b 	bl	78f0 <mem_rcopy>

	do_ecb(&ecb);
    7aba:	4668      	mov	r0, sp
    7abc:	f7ff ffc6 	bl	7a4c <do_ecb>

	if (cipher_text_le) {
    7ac0:	2d00      	cmp	r5, #0
    7ac2:	d004      	beq.n	7ace <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    7ac4:	2210      	movs	r2, #16
    7ac6:	a908      	add	r1, sp, #32
    7ac8:	0028      	movs	r0, r5
    7aca:	f7ff ff11 	bl	78f0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    7ace:	2c00      	cmp	r4, #0
    7ad0:	d004      	beq.n	7adc <ecb_encrypt+0x40>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    7ad2:	2210      	movs	r2, #16
    7ad4:	a908      	add	r1, sp, #32
    7ad6:	0020      	movs	r0, r4
    7ad8:	f7f9 f8b9 	bl	c4e <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    7adc:	b00c      	add	sp, #48	; 0x30
    7ade:	bd70      	pop	{r4, r5, r6, pc}

00007ae0 <isr_radio>:

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
	if (sfp_radio_isr) {
    7ae0:	4b03      	ldr	r3, [pc, #12]	; (7af0 <isr_radio+0x10>)
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    7ae2:	b510      	push	{r4, lr}
	if (sfp_radio_isr) {
    7ae4:	681b      	ldr	r3, [r3, #0]
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	d000      	beq.n	7aec <isr_radio+0xc>
		sfp_radio_isr();
    7aea:	4798      	blx	r3
	}
}
    7aec:	bd10      	pop	{r4, pc}
    7aee:	46c0      	nop			; (mov r8, r8)
    7af0:	20000e6c 	.word	0x20000e6c

00007af4 <radio_isr_set>:

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    7af4:	4b08      	ldr	r3, [pc, #32]	; (7b18 <radio_isr_set+0x24>)
		sfp_radio_isr();
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    7af6:	b510      	push	{r4, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    7af8:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    7afa:	23c1      	movs	r3, #193	; 0xc1
    7afc:	2110      	movs	r1, #16
    7afe:	4a07      	ldr	r2, [pc, #28]	; (7b1c <radio_isr_set+0x28>)
    7b00:	009b      	lsls	r3, r3, #2
    7b02:	50d1      	str	r1, [r2, r3]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    7b04:	4a06      	ldr	r2, [pc, #24]	; (7b20 <radio_isr_set+0x2c>)
    7b06:	3b85      	subs	r3, #133	; 0x85
    7b08:	390e      	subs	r1, #14
    7b0a:	3bff      	subs	r3, #255	; 0xff
    7b0c:	50d1      	str	r1, [r2, r3]
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    7b0e:	2001      	movs	r0, #1
    7b10:	f008 fea4 	bl	1085c <_arch_irq_enable>
}
    7b14:	bd10      	pop	{r4, pc}
    7b16:	46c0      	nop			; (mov r8, r8)
    7b18:	20000e6c 	.word	0x20000e6c
    7b1c:	40001000 	.word	0x40001000
    7b20:	e000e100 	.word	0xe000e100

00007b24 <radio_reset>:

void radio_reset(void)
{
    7b24:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
    7b26:	2001      	movs	r0, #1
    7b28:	f008 fea2 	bl	10870 <_arch_irq_disable>

	NRF_RADIO->POWER =
    7b2c:	2100      	movs	r1, #0
    7b2e:	4a03      	ldr	r2, [pc, #12]	; (7b3c <radio_reset+0x18>)
    7b30:	4b03      	ldr	r3, [pc, #12]	; (7b40 <radio_reset+0x1c>)
    7b32:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    7b34:	3101      	adds	r1, #1
    7b36:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Enabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
}
    7b38:	bd10      	pop	{r4, pc}
    7b3a:	46c0      	nop			; (mov r8, r8)
    7b3c:	40001000 	.word	0x40001000
    7b40:	00000ffc 	.word	0x00000ffc

00007b44 <radio_phy_set>:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

#if defined(CONFIG_SOC_SERIES_NRF51X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
    7b44:	2301      	movs	r3, #1

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    7b46:	2802      	cmp	r0, #2
    7b48:	d000      	beq.n	7b4c <radio_phy_set+0x8>
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    7b4a:	3302      	adds	r3, #2
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    7b4c:	22a2      	movs	r2, #162	; 0xa2
    7b4e:	4902      	ldr	r1, [pc, #8]	; (7b58 <radio_phy_set+0x14>)
    7b50:	00d2      	lsls	r2, r2, #3
    7b52:	508b      	str	r3, [r1, r2]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_RADIO_ENABLE_FAST)
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
				RADIO_MODECNF0_RU_Pos) &
			       RADIO_MODECNF0_RU_Msk;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_RADIO_ENABLE_FAST */
}
    7b54:	4770      	bx	lr
    7b56:	46c0      	nop			; (mov r8, r8)
    7b58:	40001000 	.word	0x40001000

00007b5c <radio_tx_power_set>:

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    7b5c:	4b01      	ldr	r3, [pc, #4]	; (7b64 <radio_tx_power_set+0x8>)
    7b5e:	4a02      	ldr	r2, [pc, #8]	; (7b68 <radio_tx_power_set+0xc>)
    7b60:	50d0      	str	r0, [r2, r3]
}
    7b62:	4770      	bx	lr
    7b64:	0000050c 	.word	0x0000050c
    7b68:	40001000 	.word	0x40001000

00007b6c <radio_freq_chan_set>:

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    7b6c:	23a1      	movs	r3, #161	; 0xa1
    7b6e:	4a02      	ldr	r2, [pc, #8]	; (7b78 <radio_freq_chan_set+0xc>)
    7b70:	00db      	lsls	r3, r3, #3
    7b72:	50d0      	str	r0, [r2, r3]
}
    7b74:	4770      	bx	lr
    7b76:	46c0      	nop			; (mov r8, r8)
    7b78:	40001000 	.word	0x40001000

00007b7c <radio_whiten_iv_set>:

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    7b7c:	4b01      	ldr	r3, [pc, #4]	; (7b84 <radio_whiten_iv_set+0x8>)
    7b7e:	4a02      	ldr	r2, [pc, #8]	; (7b88 <radio_whiten_iv_set+0xc>)
    7b80:	50d0      	str	r0, [r2, r3]
}
    7b82:	4770      	bx	lr
    7b84:	00000554 	.word	0x00000554
    7b88:	40001000 	.word	0x40001000

00007b8c <radio_aa_set>:

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    7b8c:	2200      	movs	r2, #0
    7b8e:	490a      	ldr	r1, [pc, #40]	; (7bb8 <radio_aa_set+0x2c>)
    7b90:	4b0a      	ldr	r3, [pc, #40]	; (7bbc <radio_aa_set+0x30>)
    7b92:	50ca      	str	r2, [r1, r3]
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    7b94:	3201      	adds	r2, #1
    7b96:	3304      	adds	r3, #4
    7b98:	50ca      	str	r2, [r1, r3]
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    7b9a:	78c2      	ldrb	r2, [r0, #3]
    7b9c:	4b08      	ldr	r3, [pc, #32]	; (7bc0 <radio_aa_set+0x34>)
    7b9e:	50ca      	str	r2, [r1, r3]
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    7ba0:	7883      	ldrb	r3, [r0, #2]
    7ba2:	061a      	lsls	r2, r3, #24
    7ba4:	7843      	ldrb	r3, [r0, #1]
    7ba6:	041b      	lsls	r3, r3, #16
    7ba8:	4313      	orrs	r3, r2
    7baa:	7802      	ldrb	r2, [r0, #0]
    7bac:	0212      	lsls	r2, r2, #8
    7bae:	4313      	orrs	r3, r2
    7bb0:	4a04      	ldr	r2, [pc, #16]	; (7bc4 <radio_aa_set+0x38>)
    7bb2:	508b      	str	r3, [r1, r2]
}
    7bb4:	4770      	bx	lr
    7bb6:	46c0      	nop			; (mov r8, r8)
    7bb8:	40001000 	.word	0x40001000
    7bbc:	0000052c 	.word	0x0000052c
    7bc0:	00000524 	.word	0x00000524
    7bc4:	0000051c 	.word	0x0000051c

00007bc8 <radio_pkt_configure>:
	ARG_UNUSED(phy);

	extra = 0;

	/* nRF51 supports only 27 byte PDU when using h/w CCM for encryption. */
	if (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR) && dc) {
    7bc8:	07d3      	lsls	r3, r2, #31
    7bca:	d500      	bpl.n	7bce <radio_pkt_configure+0x6>
		bits_len = 5;
    7bcc:	2005      	movs	r0, #5
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
    7bce:	2208      	movs	r2, #8
    7bd0:	23f0      	movs	r3, #240	; 0xf0
    7bd2:	1a12      	subs	r2, r2, r0
    7bd4:	031b      	lsls	r3, r3, #12
    7bd6:	0412      	lsls	r2, r2, #16
    7bd8:	401a      	ands	r2, r3
    7bda:	230f      	movs	r3, #15
    7bdc:	4003      	ands	r3, r0
    7bde:	2080      	movs	r0, #128	; 0x80
    7be0:	0040      	lsls	r0, r0, #1
    7be2:	4318      	orrs	r0, r3
    7be4:	4310      	orrs	r0, r2
		extra |= (RADIO_PCNF0_S1INCL_Include <<
			  RADIO_PCNF0_S1INCL_Pos) & RADIO_PCNF0_S1INCL_Msk;
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    7be6:	4b04      	ldr	r3, [pc, #16]	; (7bf8 <radio_pkt_configure+0x30>)
    7be8:	4a04      	ldr	r2, [pc, #16]	; (7bfc <radio_pkt_configure+0x34>)
    7bea:	5098      	str	r0, [r3, r2]
			       RADIO_PCNF1_STATLEN_Msk) |
			     (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			       RADIO_PCNF1_BALEN_Msk) |
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
    7bec:	4a04      	ldr	r2, [pc, #16]	; (7c00 <radio_pkt_configure+0x38>)
    7bee:	4311      	orrs	r1, r2
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
			   extra;

	NRF_RADIO->PCNF1 = (((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    7bf0:	22a3      	movs	r2, #163	; 0xa3
    7bf2:	00d2      	lsls	r2, r2, #3
    7bf4:	5099      	str	r1, [r3, r2]
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
			     (((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
			       RADIO_PCNF1_WHITEEN_Msk));
}
    7bf6:	4770      	bx	lr
    7bf8:	40001000 	.word	0x40001000
    7bfc:	00000514 	.word	0x00000514
    7c00:	02030000 	.word	0x02030000

00007c04 <radio_pkt_rx_set>:
    7c04:	4b01      	ldr	r3, [pc, #4]	; (7c0c <radio_pkt_rx_set+0x8>)
    7c06:	4a02      	ldr	r2, [pc, #8]	; (7c10 <radio_pkt_rx_set+0xc>)
    7c08:	50d0      	str	r0, [r2, r3]
    7c0a:	4770      	bx	lr
    7c0c:	00000504 	.word	0x00000504
    7c10:	40001000 	.word	0x40001000

00007c14 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    7c14:	4b01      	ldr	r3, [pc, #4]	; (7c1c <radio_pkt_tx_set+0x8>)
    7c16:	4a02      	ldr	r2, [pc, #8]	; (7c20 <radio_pkt_tx_set+0xc>)
    7c18:	50d0      	str	r0, [r2, r3]
}
    7c1a:	4770      	bx	lr
    7c1c:	00000504 	.word	0x00000504
    7c20:	40001000 	.word	0x40001000

00007c24 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    7c24:	208c      	movs	r0, #140	; 0x8c
    7c26:	4770      	bx	lr

00007c28 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    7c28:	2001      	movs	r0, #1
    7c2a:	4770      	bx	lr

00007c2c <radio_rx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    7c2c:	208a      	movs	r0, #138	; 0x8a
    7c2e:	4770      	bx	lr

00007c30 <radio_rx_chain_delay_get>:
	case BIT(1):
		return 5; /* ceil(5) */
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    7c30:	2003      	movs	r0, #3
    7c32:	4770      	bx	lr

00007c34 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    7c34:	2201      	movs	r2, #1
    7c36:	4b01      	ldr	r3, [pc, #4]	; (7c3c <radio_rx_enable+0x8>)
    7c38:	605a      	str	r2, [r3, #4]
}
    7c3a:	4770      	bx	lr
    7c3c:	40001000 	.word	0x40001000

00007c40 <radio_tx_enable>:

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    7c40:	2201      	movs	r2, #1
    7c42:	4b01      	ldr	r3, [pc, #4]	; (7c48 <radio_tx_enable+0x8>)
    7c44:	601a      	str	r2, [r3, #0]
}
    7c46:	4770      	bx	lr
    7c48:	40001000 	.word	0x40001000

00007c4c <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    7c4c:	2280      	movs	r2, #128	; 0x80
    7c4e:	2100      	movs	r1, #0
    7c50:	4b02      	ldr	r3, [pc, #8]	; (7c5c <radio_disable+0x10>)
    7c52:	0092      	lsls	r2, r2, #2
    7c54:	5099      	str	r1, [r3, r2]
	NRF_RADIO->TASKS_DISABLE = 1;
    7c56:	2201      	movs	r2, #1
    7c58:	611a      	str	r2, [r3, #16]
}
    7c5a:	4770      	bx	lr
    7c5c:	40001000 	.word	0x40001000

00007c60 <radio_status_reset>:

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    7c60:	2200      	movs	r2, #0
    7c62:	4b03      	ldr	r3, [pc, #12]	; (7c70 <radio_status_reset+0x10>)
    7c64:	605a      	str	r2, [r3, #4]
	NRF_RADIO->EVENTS_ADDRESS = 0;
    7c66:	609a      	str	r2, [r3, #8]
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    7c68:	60da      	str	r2, [r3, #12]
	NRF_RADIO->EVENTS_END = 0;
    7c6a:	611a      	str	r2, [r3, #16]
	NRF_RADIO->EVENTS_DISABLED = 0;
    7c6c:	615a      	str	r2, [r3, #20]
}
    7c6e:	4770      	bx	lr
    7c70:	400010fc 	.word	0x400010fc

00007c74 <radio_is_ready>:

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    7c74:	4b02      	ldr	r3, [pc, #8]	; (7c80 <radio_is_ready+0xc>)
    7c76:	6858      	ldr	r0, [r3, #4]
    7c78:	1e43      	subs	r3, r0, #1
    7c7a:	4198      	sbcs	r0, r3
}
    7c7c:	4770      	bx	lr
    7c7e:	46c0      	nop			; (mov r8, r8)
    7c80:	400010fc 	.word	0x400010fc

00007c84 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    7c84:	4b02      	ldr	r3, [pc, #8]	; (7c90 <radio_is_done+0xc>)
    7c86:	6918      	ldr	r0, [r3, #16]
    7c88:	1e43      	subs	r3, r0, #1
    7c8a:	4198      	sbcs	r0, r3
}
    7c8c:	4770      	bx	lr
    7c8e:	46c0      	nop			; (mov r8, r8)
    7c90:	400010fc 	.word	0x400010fc

00007c94 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    7c94:	23aa      	movs	r3, #170	; 0xaa
    7c96:	4a03      	ldr	r2, [pc, #12]	; (7ca4 <radio_is_idle+0x10>)
    7c98:	00db      	lsls	r3, r3, #3
    7c9a:	58d0      	ldr	r0, [r2, r3]
    7c9c:	4243      	negs	r3, r0
    7c9e:	4158      	adcs	r0, r3
}
    7ca0:	4770      	bx	lr
    7ca2:	46c0      	nop			; (mov r8, r8)
    7ca4:	40001000 	.word	0x40001000

00007ca8 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
    7ca8:	b510      	push	{r4, lr}
	NRF_RADIO->CRCCNF =
    7caa:	2404      	movs	r4, #4
    7cac:	4b04      	ldr	r3, [pc, #16]	; (7cc0 <radio_crc_configure+0x18>)
    7cae:	4a05      	ldr	r2, [pc, #20]	; (7cc4 <radio_crc_configure+0x1c>)
    7cb0:	34ff      	adds	r4, #255	; 0xff
    7cb2:	509c      	str	r4, [r3, r2]
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    7cb4:	3204      	adds	r2, #4
    7cb6:	5098      	str	r0, [r3, r2]
	NRF_RADIO->CRCINIT = iv;
    7cb8:	4a03      	ldr	r2, [pc, #12]	; (7cc8 <radio_crc_configure+0x20>)
    7cba:	5099      	str	r1, [r3, r2]
}
    7cbc:	bd10      	pop	{r4, pc}
    7cbe:	46c0      	nop			; (mov r8, r8)
    7cc0:	40001000 	.word	0x40001000
    7cc4:	00000534 	.word	0x00000534
    7cc8:	0000053c 	.word	0x0000053c

00007ccc <radio_crc_is_valid>:

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    7ccc:	2380      	movs	r3, #128	; 0x80
    7cce:	4a03      	ldr	r2, [pc, #12]	; (7cdc <radio_crc_is_valid+0x10>)
    7cd0:	00db      	lsls	r3, r3, #3
    7cd2:	58d0      	ldr	r0, [r2, r3]
    7cd4:	1e43      	subs	r3, r0, #1
    7cd6:	4198      	sbcs	r0, r3
}
    7cd8:	4770      	bx	lr
    7cda:	46c0      	nop			; (mov r8, r8)
    7cdc:	40001000 	.word	0x40001000

00007ce0 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    7ce0:	4800      	ldr	r0, [pc, #0]	; (7ce4 <radio_pkt_empty_get+0x4>)
    7ce2:	4770      	bx	lr
    7ce4:	20000e3c 	.word	0x20000e3c

00007ce8 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    7ce8:	4800      	ldr	r0, [pc, #0]	; (7cec <radio_pkt_scratch_get+0x4>)
    7cea:	4770      	bx	lr
    7cec:	20000e14 	.word	0x20000e14

00007cf0 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    7cf0:	2380      	movs	r3, #128	; 0x80
    7cf2:	210b      	movs	r1, #11
    7cf4:	4a01      	ldr	r2, [pc, #4]	; (7cfc <radio_switch_complete_and_rx+0xc>)
    7cf6:	009b      	lsls	r3, r3, #2
    7cf8:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, phy, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    7cfa:	4770      	bx	lr
    7cfc:	40001000 	.word	0x40001000

00007d00 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy, u8_t flags)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    7d00:	2380      	movs	r3, #128	; 0x80
    7d02:	2107      	movs	r1, #7
    7d04:	4a01      	ldr	r2, [pc, #4]	; (7d0c <radio_switch_complete_and_tx+0xc>)
    7d06:	009b      	lsls	r3, r3, #2
    7d08:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy, flags);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    7d0a:	4770      	bx	lr
    7d0c:	40001000 	.word	0x40001000

00007d10 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    7d10:	2380      	movs	r3, #128	; 0x80
    7d12:	2103      	movs	r1, #3
    7d14:	4a01      	ldr	r2, [pc, #4]	; (7d1c <radio_switch_complete_and_disable+0xc>)
    7d16:	009b      	lsls	r3, r3, #2
    7d18:	50d1      	str	r1, [r2, r3]
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    7d1a:	4770      	bx	lr
    7d1c:	40001000 	.word	0x40001000

00007d20 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    7d20:	2280      	movs	r2, #128	; 0x80
    7d22:	2088      	movs	r0, #136	; 0x88
    7d24:	4903      	ldr	r1, [pc, #12]	; (7d34 <radio_rssi_measure+0x14>)
    7d26:	0092      	lsls	r2, r2, #2
    7d28:	588b      	ldr	r3, [r1, r2]
    7d2a:	0040      	lsls	r0, r0, #1
    7d2c:	4303      	orrs	r3, r0
    7d2e:	508b      	str	r3, [r1, r2]
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    7d30:	4770      	bx	lr
    7d32:	46c0      	nop			; (mov r8, r8)
    7d34:	40001000 	.word	0x40001000

00007d38 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    7d38:	23a9      	movs	r3, #169	; 0xa9
    7d3a:	4a02      	ldr	r2, [pc, #8]	; (7d44 <radio_rssi_get+0xc>)
    7d3c:	00db      	lsls	r3, r3, #3
    7d3e:	58d0      	ldr	r0, [r2, r3]
}
    7d40:	4770      	bx	lr
    7d42:	46c0      	nop			; (mov r8, r8)
    7d44:	40001000 	.word	0x40001000

00007d48 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    7d48:	2200      	movs	r2, #0
    7d4a:	4b01      	ldr	r3, [pc, #4]	; (7d50 <radio_rssi_status_reset+0x8>)
    7d4c:	621a      	str	r2, [r3, #32]
}
    7d4e:	4770      	bx	lr
    7d50:	400010fc 	.word	0x400010fc

00007d54 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    7d54:	4b02      	ldr	r3, [pc, #8]	; (7d60 <radio_rssi_is_ready+0xc>)
    7d56:	6a18      	ldr	r0, [r3, #32]
    7d58:	1e43      	subs	r3, r0, #1
    7d5a:	4198      	sbcs	r0, r3
}
    7d5c:	4770      	bx	lr
    7d5e:	46c0      	nop			; (mov r8, r8)
    7d60:	400010fc 	.word	0x400010fc

00007d64 <radio_filter_configure>:
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    7d64:	23c0      	movs	r3, #192	; 0xc0
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
}

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    7d66:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    7d68:	00db      	lsls	r3, r3, #3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    7d6a:	27c4      	movs	r7, #196	; 0xc4
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
}

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    7d6c:	2600      	movs	r6, #0
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    7d6e:	469c      	mov	ip, r3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    7d70:	00ff      	lsls	r7, r7, #3
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    7d72:	7854      	ldrb	r4, [r2, #1]
    7d74:	7813      	ldrb	r3, [r2, #0]
    7d76:	0224      	lsls	r4, r4, #8
    7d78:	431c      	orrs	r4, r3
    7d7a:	7893      	ldrb	r3, [r2, #2]
    7d7c:	4d0d      	ldr	r5, [pc, #52]	; (7db4 <radio_filter_configure+0x50>)
    7d7e:	041b      	lsls	r3, r3, #16
    7d80:	4323      	orrs	r3, r4
    7d82:	001c      	movs	r4, r3
    7d84:	78d3      	ldrb	r3, [r2, #3]
    7d86:	061b      	lsls	r3, r3, #24
    7d88:	4323      	orrs	r3, r4
    7d8a:	00b4      	lsls	r4, r6, #2
    7d8c:	1964      	adds	r4, r4, r5
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    7d8e:	4665      	mov	r5, ip
    7d90:	5163      	str	r3, [r4, r5]
    7d92:	7953      	ldrb	r3, [r2, #5]
    7d94:	7915      	ldrb	r5, [r2, #4]
    7d96:	021b      	lsls	r3, r3, #8
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    7d98:	432b      	orrs	r3, r5
    7d9a:	3601      	adds	r6, #1
    7d9c:	51e3      	str	r3, [r4, r7]
		bdaddr += 6;
    7d9e:	3206      	adds	r2, #6
void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
    7da0:	2e08      	cmp	r6, #8
    7da2:	d1e6      	bne.n	7d72 <radio_filter_configure+0xe>
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    7da4:	23c8      	movs	r3, #200	; 0xc8
    7da6:	0209      	lsls	r1, r1, #8
    7da8:	4a02      	ldr	r2, [pc, #8]	; (7db4 <radio_filter_configure+0x50>)
    7daa:	4308      	orrs	r0, r1
    7dac:	00db      	lsls	r3, r3, #3
    7dae:	50d0      	str	r0, [r2, r3]
}
    7db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7db2:	46c0      	nop			; (mov r8, r8)
    7db4:	40001000 	.word	0x40001000

00007db8 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    7db8:	22c8      	movs	r2, #200	; 0xc8
    7dba:	20ff      	movs	r0, #255	; 0xff
    7dbc:	4902      	ldr	r1, [pc, #8]	; (7dc8 <radio_filter_disable+0x10>)
    7dbe:	00d2      	lsls	r2, r2, #3
    7dc0:	588b      	ldr	r3, [r1, r2]
    7dc2:	4383      	bics	r3, r0
    7dc4:	508b      	str	r3, [r1, r2]
}
    7dc6:	4770      	bx	lr
    7dc8:	40001000 	.word	0x40001000

00007dcc <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    7dcc:	2200      	movs	r2, #0
    7dce:	4b02      	ldr	r3, [pc, #8]	; (7dd8 <radio_filter_status_reset+0xc>)
    7dd0:	619a      	str	r2, [r3, #24]
	NRF_RADIO->EVENTS_DEVMISS = 0;
    7dd2:	61da      	str	r2, [r3, #28]
}
    7dd4:	4770      	bx	lr
    7dd6:	46c0      	nop			; (mov r8, r8)
    7dd8:	400010fc 	.word	0x400010fc

00007ddc <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    7ddc:	4b02      	ldr	r3, [pc, #8]	; (7de8 <radio_filter_has_match+0xc>)
    7dde:	6998      	ldr	r0, [r3, #24]
    7de0:	1e43      	subs	r3, r0, #1
    7de2:	4198      	sbcs	r0, r3
}
    7de4:	4770      	bx	lr
    7de6:	46c0      	nop			; (mov r8, r8)
    7de8:	400010fc 	.word	0x400010fc

00007dec <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    7dec:	2382      	movs	r3, #130	; 0x82
    7dee:	4a02      	ldr	r2, [pc, #8]	; (7df8 <radio_filter_match_get+0xc>)
    7df0:	00db      	lsls	r3, r3, #3
    7df2:	58d0      	ldr	r0, [r2, r3]
}
    7df4:	4770      	bx	lr
    7df6:	46c0      	nop			; (mov r8, r8)
    7df8:	40001000 	.word	0x40001000

00007dfc <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    7dfc:	22ac      	movs	r2, #172	; 0xac
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    7dfe:	2180      	movs	r1, #128	; 0x80
	return NRF_RADIO->DAI;
}

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    7e00:	4b04      	ldr	r3, [pc, #16]	; (7e14 <radio_bc_configure+0x18>)
    7e02:	00d2      	lsls	r2, r2, #3
    7e04:	5098      	str	r0, [r3, r2]
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    7e06:	2040      	movs	r0, #64	; 0x40
    7e08:	0089      	lsls	r1, r1, #2
    7e0a:	585a      	ldr	r2, [r3, r1]
    7e0c:	4302      	orrs	r2, r0
    7e0e:	505a      	str	r2, [r3, r1]
}
    7e10:	4770      	bx	lr
    7e12:	46c0      	nop			; (mov r8, r8)
    7e14:	40001000 	.word	0x40001000

00007e18 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    7e18:	2180      	movs	r1, #128	; 0x80
    7e1a:	23d2      	movs	r3, #210	; 0xd2
    7e1c:	4a04      	ldr	r2, [pc, #16]	; (7e30 <radio_tmr_status_reset+0x18>)
    7e1e:	02c9      	lsls	r1, r1, #11
    7e20:	009b      	lsls	r3, r3, #2
    7e22:	50d1      	str	r1, [r2, r3]
	NRF_PPI->CHENCLR =
    7e24:	21ff      	movs	r1, #255	; 0xff
    7e26:	4a03      	ldr	r2, [pc, #12]	; (7e34 <radio_tmr_status_reset+0x1c>)
    7e28:	33c1      	adds	r3, #193	; 0xc1
    7e2a:	33ff      	adds	r3, #255	; 0xff
    7e2c:	50d1      	str	r1, [r2, r3]
	    (PPI_CHEN_CH0_Msk | PPI_CHEN_CH1_Msk | PPI_CHEN_CH2_Msk |
	     PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
	     PPI_CHEN_CH6_Msk | PPI_CHEN_CH7_Msk);
}
    7e2e:	4770      	bx	lr
    7e30:	4000b000 	.word	0x4000b000
    7e34:	4001f000 	.word	0x4001f000

00007e38 <radio_tmr_tifs_set>:

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    7e38:	4b01      	ldr	r3, [pc, #4]	; (7e40 <radio_tmr_tifs_set+0x8>)
    7e3a:	4a02      	ldr	r2, [pc, #8]	; (7e44 <radio_tmr_tifs_set+0xc>)
    7e3c:	50d0      	str	r0, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    7e3e:	4770      	bx	lr
    7e40:	00000544 	.word	0x00000544
    7e44:	40001000 	.word	0x40001000

00007e48 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    7e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    7e4a:	4b20      	ldr	r3, [pc, #128]	; (7ecc <radio_tmr_start+0x84>)
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    7e4c:	000c      	movs	r4, r1
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    7e4e:	18d1      	adds	r1, r2, r3
    7e50:	4b1f      	ldr	r3, [pc, #124]	; (7ed0 <radio_tmr_start+0x88>)
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    7e52:	9001      	str	r0, [sp, #4]
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    7e54:	4299      	cmp	r1, r3
    7e56:	d902      	bls.n	7e5e <radio_tmr_start+0x16>
		ticks_start--;
		remainder += 30517578UL;
    7e58:	4b1e      	ldr	r3, [pc, #120]	; (7ed4 <radio_tmr_start+0x8c>)
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
    7e5a:	3c01      	subs	r4, #1
		remainder += 30517578UL;
    7e5c:	18d2      	adds	r2, r2, r3
	}
	remainder /= 1000000UL;
    7e5e:	491e      	ldr	r1, [pc, #120]	; (7ed8 <radio_tmr_start+0x90>)
    7e60:	0010      	movs	r0, r2
    7e62:	f7f8 f9a7 	bl	1b4 <__aeabi_uidiv>

	NRF_TIMER0->TASKS_CLEAR = 1;
    7e66:	2201      	movs	r2, #1
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    7e68:	25a2      	movs	r5, #162	; 0xa2
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    7e6a:	2600      	movs	r6, #0
	NRF_TIMER0->PRESCALER = 4;
    7e6c:	2704      	movs	r7, #4
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    7e6e:	4b1b      	ldr	r3, [pc, #108]	; (7edc <radio_tmr_start+0x94>)
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    7e70:	00ed      	lsls	r5, r5, #3
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    7e72:	60da      	str	r2, [r3, #12]
	NRF_TIMER0->MODE = 0;
    7e74:	4a1a      	ldr	r2, [pc, #104]	; (7ee0 <radio_tmr_start+0x98>)
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    7e76:	2102      	movs	r1, #2
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    7e78:	509e      	str	r6, [r3, r2]
	NRF_TIMER0->PRESCALER = 4;
    7e7a:	515f      	str	r7, [r3, r5]
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    7e7c:	27a1      	movs	r7, #161	; 0xa1
    7e7e:	00ff      	lsls	r7, r7, #3
    7e80:	51d9      	str	r1, [r3, r7]

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
    7e82:	21a9      	movs	r1, #169	; 0xa9
	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
    7e84:	3738      	adds	r7, #56	; 0x38
    7e86:	51d8      	str	r0, [r3, r7]
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    7e88:	4f16      	ldr	r7, [pc, #88]	; (7ee4 <radio_tmr_start+0x9c>)

	NRF_RTC0->CC[2] = ticks_start;
    7e8a:	00c9      	lsls	r1, r1, #3
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    7e8c:	647e      	str	r6, [r7, #68]	; 0x44

	NRF_RTC0->CC[2] = ticks_start;
    7e8e:	4f16      	ldr	r7, [pc, #88]	; (7ee8 <radio_tmr_start+0xa0>)
    7e90:	507c      	str	r4, [r7, r1]
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    7e92:	2180      	movs	r1, #128	; 0x80
    7e94:	24d1      	movs	r4, #209	; 0xd1
    7e96:	02c9      	lsls	r1, r1, #11
    7e98:	00a4      	lsls	r4, r4, #2
    7e9a:	5139      	str	r1, [r7, r4]
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    7e9c:	4c13      	ldr	r4, [pc, #76]	; (7eec <radio_tmr_start+0xa4>)

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    7e9e:	4f14      	ldr	r7, [pc, #80]	; (7ef0 <radio_tmr_start+0xa8>)
	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    7ea0:	64e6      	str	r6, [r4, #76]	; 0x4c

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    7ea2:	26a3      	movs	r6, #163	; 0xa3
    7ea4:	4c13      	ldr	r4, [pc, #76]	; (7ef4 <radio_tmr_start+0xac>)
    7ea6:	00f6      	lsls	r6, r6, #3
    7ea8:	51a7      	str	r7, [r4, r6]
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    7eaa:	4e13      	ldr	r6, [pc, #76]	; (7ef8 <radio_tmr_start+0xb0>)
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    7eac:	9901      	ldr	r1, [sp, #4]
	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    7eae:	51a3      	str	r3, [r4, r6]
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    7eb0:	2302      	movs	r3, #2
    7eb2:	4e12      	ldr	r6, [pc, #72]	; (7efc <radio_tmr_start+0xb4>)
    7eb4:	50a3      	str	r3, [r4, r2]
    7eb6:	4b12      	ldr	r3, [pc, #72]	; (7f00 <radio_tmr_start+0xb8>)

	if (trx) {
		NRF_PPI->CH[0].EEP =
    7eb8:	5166      	str	r6, [r4, r5]

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    7eba:	2900      	cmp	r1, #0
    7ebc:	d001      	beq.n	7ec2 <radio_tmr_start+0x7a>
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    7ebe:	4d11      	ldr	r5, [pc, #68]	; (7f04 <radio_tmr_start+0xbc>)
    7ec0:	e000      	b.n	7ec4 <radio_tmr_start+0x7c>
			(u32_t)&(NRF_RADIO->TASKS_TXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
	} else {
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    7ec2:	4d11      	ldr	r5, [pc, #68]	; (7f08 <radio_tmr_start+0xc0>)
    7ec4:	50e5      	str	r5, [r4, r3]
			(u32_t)&(NRF_RADIO->TASKS_RXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    7ec6:	2301      	movs	r3, #1
    7ec8:	50a3      	str	r3, [r4, r2]
	NRF_PPI->CHG[0] = PPI_CHG_CH9_Msk | PPI_CHG_CH12_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	return remainder;
}
    7eca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7ecc:	fff0bdc0 	.word	0xfff0bdc0
    7ed0:	7ff0bdbf 	.word	0x7ff0bdbf
    7ed4:	01d1a94a 	.word	0x01d1a94a
    7ed8:	000f4240 	.word	0x000f4240
    7edc:	40008000 	.word	0x40008000
    7ee0:	00000504 	.word	0x00000504
    7ee4:	400080fc 	.word	0x400080fc
    7ee8:	4000b000 	.word	0x4000b000
    7eec:	4000b0fc 	.word	0x4000b0fc
    7ef0:	4000b148 	.word	0x4000b148
    7ef4:	4001f000 	.word	0x4001f000
    7ef8:	0000051c 	.word	0x0000051c
    7efc:	40008140 	.word	0x40008140
    7f00:	00000514 	.word	0x00000514
    7f04:	40001000 	.word	0x40001000
    7f08:	40001004 	.word	0x40001004

00007f0c <radio_tmr_stop>:

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    7f0c:	2201      	movs	r2, #1
    7f0e:	4b02      	ldr	r3, [pc, #8]	; (7f18 <radio_tmr_stop+0xc>)
    7f10:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    7f12:	611a      	str	r2, [r3, #16]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_TIMER1->TASKS_STOP = 1;
	NRF_TIMER1->TASKS_SHUTDOWN = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    7f14:	4770      	bx	lr
    7f16:	46c0      	nop			; (mov r8, r8)
    7f18:	40008000 	.word	0x40008000

00007f1c <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[2] = hcto;
    7f1c:	22a9      	movs	r2, #169	; 0xa9
    7f1e:	4b0c      	ldr	r3, [pc, #48]	; (7f50 <radio_tmr_hcto_configure+0x34>)
    7f20:	00d2      	lsls	r2, r2, #3
    7f22:	5098      	str	r0, [r3, r2]
	NRF_TIMER0->EVENTS_COMPARE[2] = 0;
    7f24:	2200      	movs	r2, #0
    7f26:	33fc      	adds	r3, #252	; 0xfc
    7f28:	64da      	str	r2, [r3, #76]	; 0x4c

	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    7f2a:	22a6      	movs	r2, #166	; 0xa6
    7f2c:	4b09      	ldr	r3, [pc, #36]	; (7f54 <radio_tmr_hcto_configure+0x38>)
    7f2e:	490a      	ldr	r1, [pc, #40]	; (7f58 <radio_tmr_hcto_configure+0x3c>)
    7f30:	00d2      	lsls	r2, r2, #3
    7f32:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    7f34:	4909      	ldr	r1, [pc, #36]	; (7f5c <radio_tmr_hcto_configure+0x40>)
    7f36:	4a0a      	ldr	r2, [pc, #40]	; (7f60 <radio_tmr_hcto_configure+0x44>)
    7f38:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[2]);
    7f3a:	490a      	ldr	r1, [pc, #40]	; (7f64 <radio_tmr_hcto_configure+0x48>)
    7f3c:	3204      	adds	r2, #4
    7f3e:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    7f40:	4909      	ldr	r1, [pc, #36]	; (7f68 <radio_tmr_hcto_configure+0x4c>)
    7f42:	4a0a      	ldr	r2, [pc, #40]	; (7f6c <radio_tmr_hcto_configure+0x50>)
    7f44:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
    7f46:	2130      	movs	r1, #48	; 0x30
    7f48:	4a09      	ldr	r2, [pc, #36]	; (7f70 <radio_tmr_hcto_configure+0x54>)
    7f4a:	5099      	str	r1, [r3, r2]
}
    7f4c:	4770      	bx	lr
    7f4e:	46c0      	nop			; (mov r8, r8)
    7f50:	40008000 	.word	0x40008000
    7f54:	4001f000 	.word	0x4001f000
    7f58:	40001104 	.word	0x40001104
    7f5c:	40008048 	.word	0x40008048
    7f60:	00000534 	.word	0x00000534
    7f64:	40008148 	.word	0x40008148
    7f68:	40001010 	.word	0x40001010
    7f6c:	0000053c 	.word	0x0000053c
    7f70:	00000504 	.word	0x00000504

00007f74 <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    7f74:	22a4      	movs	r2, #164	; 0xa4
    7f76:	4b08      	ldr	r3, [pc, #32]	; (7f98 <radio_tmr_aa_capture+0x24>)
    7f78:	4908      	ldr	r1, [pc, #32]	; (7f9c <radio_tmr_aa_capture+0x28>)
    7f7a:	00d2      	lsls	r2, r2, #3
    7f7c:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    7f7e:	4908      	ldr	r1, [pc, #32]	; (7fa0 <radio_tmr_aa_capture+0x2c>)
    7f80:	4a08      	ldr	r2, [pc, #32]	; (7fa4 <radio_tmr_aa_capture+0x30>)
    7f82:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    7f84:	4908      	ldr	r1, [pc, #32]	; (7fa8 <radio_tmr_aa_capture+0x34>)
    7f86:	3204      	adds	r2, #4
    7f88:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    7f8a:	4908      	ldr	r1, [pc, #32]	; (7fac <radio_tmr_aa_capture+0x38>)
    7f8c:	4a08      	ldr	r2, [pc, #32]	; (7fb0 <radio_tmr_aa_capture+0x3c>)
    7f8e:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    7f90:	210c      	movs	r1, #12
    7f92:	4a08      	ldr	r2, [pc, #32]	; (7fb4 <radio_tmr_aa_capture+0x40>)
    7f94:	5099      	str	r1, [r3, r2]
}
    7f96:	4770      	bx	lr
    7f98:	4001f000 	.word	0x4001f000
    7f9c:	40001100 	.word	0x40001100
    7fa0:	40008040 	.word	0x40008040
    7fa4:	00000524 	.word	0x00000524
    7fa8:	40001104 	.word	0x40001104
    7fac:	40008044 	.word	0x40008044
    7fb0:	0000052c 	.word	0x0000052c
    7fb4:	00000504 	.word	0x00000504

00007fb8 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return (NRF_TIMER0->CC[1] - NRF_TIMER0->CC[0]);
    7fb8:	21a8      	movs	r1, #168	; 0xa8
    7fba:	4a03      	ldr	r2, [pc, #12]	; (7fc8 <radio_tmr_aa_get+0x10>)
    7fbc:	4b03      	ldr	r3, [pc, #12]	; (7fcc <radio_tmr_aa_get+0x14>)
    7fbe:	00c9      	lsls	r1, r1, #3
    7fc0:	58d3      	ldr	r3, [r2, r3]
    7fc2:	5850      	ldr	r0, [r2, r1]
    7fc4:	1a18      	subs	r0, r3, r0
}
    7fc6:	4770      	bx	lr
    7fc8:	40008000 	.word	0x40008000
    7fcc:	00000544 	.word	0x00000544

00007fd0 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[7].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    7fd0:	22a9      	movs	r2, #169	; 0xa9
    7fd2:	4b05      	ldr	r3, [pc, #20]	; (7fe8 <radio_tmr_end_capture+0x18>)
    7fd4:	4905      	ldr	r1, [pc, #20]	; (7fec <radio_tmr_end_capture+0x1c>)
    7fd6:	00d2      	lsls	r2, r2, #3
    7fd8:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[7].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    7fda:	4905      	ldr	r1, [pc, #20]	; (7ff0 <radio_tmr_end_capture+0x20>)
    7fdc:	4a05      	ldr	r2, [pc, #20]	; (7ff4 <radio_tmr_end_capture+0x24>)
    7fde:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = PPI_CHEN_CH7_Msk;
    7fe0:	2180      	movs	r1, #128	; 0x80
    7fe2:	4a05      	ldr	r2, [pc, #20]	; (7ff8 <radio_tmr_end_capture+0x28>)
    7fe4:	5099      	str	r1, [r3, r2]
}
    7fe6:	4770      	bx	lr
    7fe8:	4001f000 	.word	0x4001f000
    7fec:	4000110c 	.word	0x4000110c
    7ff0:	40008048 	.word	0x40008048
    7ff4:	0000054c 	.word	0x0000054c
    7ff8:	00000504 	.word	0x00000504

00007ffc <radio_tmr_end_get>:

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    7ffc:	23a9      	movs	r3, #169	; 0xa9
    7ffe:	4a02      	ldr	r2, [pc, #8]	; (8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>)
    8000:	00db      	lsls	r3, r3, #3
    8002:	58d0      	ldr	r0, [r2, r3]
}
    8004:	4770      	bx	lr
    8006:	46c0      	nop			; (mov r8, r8)
    8008:	40008000 	.word	0x40008000

0000800c <radio_ccm_rx_pkt_set>:
}

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
    800c:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    800e:	24a0      	movs	r4, #160	; 0xa0
    8010:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    8012:	2502      	movs	r5, #2

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8014:	4b12      	ldr	r3, [pc, #72]	; (8060 <radio_ccm_rx_pkt_set+0x54>)
    8016:	00e4      	lsls	r4, r4, #3
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    8018:	26a1      	movs	r6, #161	; 0xa1

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    801a:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    801c:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE =
    801e:	2401      	movs	r4, #1
    8020:	4d10      	ldr	r5, [pc, #64]	; (8064 <radio_ccm_rx_pkt_set+0x58>)
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    8022:	00f6      	lsls	r6, r6, #3

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
	NRF_CCM->MODE =
    8024:	515c      	str	r4, [r3, r5]
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    8026:	5198      	str	r0, [r3, r6]
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    8028:	480f      	ldr	r0, [pc, #60]	; (8068 <radio_ccm_rx_pkt_set+0x5c>)
    802a:	4e10      	ldr	r6, [pc, #64]	; (806c <radio_ccm_rx_pkt_set+0x60>)
    802c:	5198      	str	r0, [r3, r6]
	NRF_CCM->OUTPTR = (u32_t)pkt;
    802e:	3604      	adds	r6, #4
    8030:	5199      	str	r1, [r3, r6]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    8032:	4e0f      	ldr	r6, [pc, #60]	; (8070 <radio_ccm_rx_pkt_set+0x64>)
    8034:	490f      	ldr	r1, [pc, #60]	; (8074 <radio_ccm_rx_pkt_set+0x68>)
    8036:	505e      	str	r6, [r3, r1]
	NRF_CCM->SHORTS = 0;
    8038:	2180      	movs	r1, #128	; 0x80
    803a:	0089      	lsls	r1, r1, #2
    803c:	505a      	str	r2, [r3, r1]
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    803e:	0019      	movs	r1, r3
    8040:	31fc      	adds	r1, #252	; 0xfc
    8042:	604a      	str	r2, [r1, #4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    8044:	608a      	str	r2, [r1, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    8046:	60ca      	str	r2, [r1, #12]

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    8048:	21a8      	movs	r1, #168	; 0xa8
    804a:	4a0b      	ldr	r2, [pc, #44]	; (8078 <radio_ccm_rx_pkt_set+0x6c>)
    804c:	4e0b      	ldr	r6, [pc, #44]	; (807c <radio_ccm_rx_pkt_set+0x70>)
    804e:	00c9      	lsls	r1, r1, #3
    8050:	5056      	str	r6, [r2, r1]
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    8052:	4e0b      	ldr	r6, [pc, #44]	; (8080 <radio_ccm_rx_pkt_set+0x74>)
    8054:	490b      	ldr	r1, [pc, #44]	; (8084 <radio_ccm_rx_pkt_set+0x78>)
    8056:	5056      	str	r6, [r2, r1]
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    8058:	2140      	movs	r1, #64	; 0x40
    805a:	5151      	str	r1, [r2, r5]

	NRF_CCM->TASKS_KSGEN = 1;
    805c:	601c      	str	r4, [r3, #0]

	return _pkt_scratch;
}
    805e:	bd70      	pop	{r4, r5, r6, pc}
    8060:	4000f000 	.word	0x4000f000
    8064:	00000504 	.word	0x00000504
    8068:	20000e14 	.word	0x20000e14
    806c:	0000050c 	.word	0x0000050c
    8070:	20000e40 	.word	0x20000e40
    8074:	00000514 	.word	0x00000514
    8078:	4001f000 	.word	0x4001f000
    807c:	40001104 	.word	0x40001104
    8080:	4000f004 	.word	0x4000f004
    8084:	00000544 	.word	0x00000544

00008088 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    8088:	b530      	push	{r4, r5, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    808a:	24a0      	movs	r4, #160	; 0xa0
    808c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    808e:	2502      	movs	r5, #2
	return _pkt_scratch;
}

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    8090:	4b0d      	ldr	r3, [pc, #52]	; (80c8 <radio_ccm_tx_pkt_set+0x40>)
    8092:	00e4      	lsls	r4, r4, #3
    8094:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    8096:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE =
    8098:	4c0c      	ldr	r4, [pc, #48]	; (80cc <radio_ccm_tx_pkt_set+0x44>)
    809a:	511a      	str	r2, [r3, r4]
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    809c:	3404      	adds	r4, #4
    809e:	5118      	str	r0, [r3, r4]
	NRF_CCM->INPTR = (u32_t)pkt;
    80a0:	480b      	ldr	r0, [pc, #44]	; (80d0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    80a2:	4c0c      	ldr	r4, [pc, #48]	; (80d4 <radio_ccm_tx_pkt_set+0x4c>)
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)pkt;
    80a4:	5019      	str	r1, [r3, r0]
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    80a6:	21a2      	movs	r1, #162	; 0xa2
    80a8:	480b      	ldr	r0, [pc, #44]	; (80d8 <radio_ccm_tx_pkt_set+0x50>)
    80aa:	00c9      	lsls	r1, r1, #3
    80ac:	5058      	str	r0, [r3, r1]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    80ae:	490b      	ldr	r1, [pc, #44]	; (80dc <radio_ccm_tx_pkt_set+0x54>)
    80b0:	505c      	str	r4, [r3, r1]
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    80b2:	2180      	movs	r1, #128	; 0x80
    80b4:	2401      	movs	r4, #1
    80b6:	0089      	lsls	r1, r1, #2
    80b8:	505c      	str	r4, [r3, r1]
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    80ba:	0019      	movs	r1, r3
    80bc:	31fc      	adds	r1, #252	; 0xfc
    80be:	604a      	str	r2, [r1, #4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    80c0:	608a      	str	r2, [r1, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    80c2:	60ca      	str	r2, [r1, #12]

	NRF_CCM->TASKS_KSGEN = 1;
    80c4:	601c      	str	r4, [r3, #0]

	return _pkt_scratch;
}
    80c6:	bd30      	pop	{r4, r5, pc}
    80c8:	4000f000 	.word	0x4000f000
    80cc:	00000504 	.word	0x00000504
    80d0:	0000050c 	.word	0x0000050c
    80d4:	20000e40 	.word	0x20000e40
    80d8:	20000e14 	.word	0x20000e14
    80dc:	00000514 	.word	0x00000514

000080e0 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    80e0:	23c1      	movs	r3, #193	; 0xc1
    80e2:	2102      	movs	r1, #2
    80e4:	4a0d      	ldr	r2, [pc, #52]	; (811c <radio_ccm_is_done+0x3c>)
    80e6:	009b      	lsls	r3, r3, #2
    80e8:	50d1      	str	r1, [r2, r3]
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    80ea:	4a0d      	ldr	r2, [pc, #52]	; (8120 <radio_ccm_is_done+0x40>)
    80ec:	6893      	ldr	r3, [r2, #8]
    80ee:	2b00      	cmp	r3, #0
    80f0:	d103      	bne.n	80fa <radio_ccm_is_done+0x1a>
    80f2:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    80f4:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    80f6:	bf20      	wfe
    80f8:	e7f8      	b.n	80ec <radio_ccm_is_done+0xc>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    80fa:	23c2      	movs	r3, #194	; 0xc2
    80fc:	2102      	movs	r1, #2
    80fe:	4a07      	ldr	r2, [pc, #28]	; (811c <radio_ccm_is_done+0x3c>)
    8100:	009b      	lsls	r3, r3, #2
    8102:	50d1      	str	r1, [r2, r3]
    8104:	2180      	movs	r1, #128	; 0x80
    8106:	4a07      	ldr	r2, [pc, #28]	; (8124 <radio_ccm_is_done+0x44>)
    8108:	3b89      	subs	r3, #137	; 0x89
    810a:	0209      	lsls	r1, r1, #8
    810c:	3bff      	subs	r3, #255	; 0xff
    810e:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    8110:	4b03      	ldr	r3, [pc, #12]	; (8120 <radio_ccm_is_done+0x40>)
    8112:	68d8      	ldr	r0, [r3, #12]
    8114:	4243      	negs	r3, r0
    8116:	4158      	adcs	r0, r3
}
    8118:	4770      	bx	lr
    811a:	46c0      	nop			; (mov r8, r8)
    811c:	4000f000 	.word	0x4000f000
    8120:	4000f0fc 	.word	0x4000f0fc
    8124:	e000e100 	.word	0xe000e100

00008128 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    8128:	2380      	movs	r3, #128	; 0x80
    812a:	4a03      	ldr	r2, [pc, #12]	; (8138 <radio_ccm_mic_is_valid+0x10>)
    812c:	00db      	lsls	r3, r3, #3
    812e:	58d0      	ldr	r0, [r2, r3]
    8130:	1e43      	subs	r3, r0, #1
    8132:	4198      	sbcs	r0, r3
}
    8134:	4770      	bx	lr
    8136:	46c0      	nop			; (mov r8, r8)
    8138:	4000f000 	.word	0x4000f000

0000813c <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
    813c:	23a0      	movs	r3, #160	; 0xa0
    813e:	2201      	movs	r2, #1
}

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    8140:	b570      	push	{r4, r5, r6, lr}
	NRF_AAR->ENABLE = 1;
    8142:	4c0e      	ldr	r4, [pc, #56]	; (817c <radio_ar_configure+0x40>)
	NRF_AAR->NIRK = nirk;
    8144:	4d0e      	ldr	r5, [pc, #56]	; (8180 <radio_ar_configure+0x44>)

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
    8146:	00db      	lsls	r3, r3, #3
    8148:	50e2      	str	r2, [r4, r3]
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
    814a:	3308      	adds	r3, #8
static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
    814c:	5160      	str	r0, [r4, r5]
	NRF_AAR->IRKPTR = (u32_t)irk;
    814e:	50e1      	str	r1, [r4, r3]
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    8150:	4b0c      	ldr	r3, [pc, #48]	; (8184 <radio_ar_configure+0x48>)
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];

	radio_bc_configure(64);
    8152:	2040      	movs	r0, #64	; 0x40
void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    8154:	595a      	ldr	r2, [r3, r5]
    8156:	23a2      	movs	r3, #162	; 0xa2
    8158:	00db      	lsls	r3, r3, #3
    815a:	50e2      	str	r2, [r4, r3]
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];
    815c:	2200      	movs	r2, #0
    815e:	4b0a      	ldr	r3, [pc, #40]	; (8188 <radio_ar_configure+0x4c>)
    8160:	50e2      	str	r2, [r4, r3]

	radio_bc_configure(64);
    8162:	f7ff fe4b 	bl	7dfc <radio_bc_configure>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    8166:	22a8      	movs	r2, #168	; 0xa8
    8168:	4b08      	ldr	r3, [pc, #32]	; (818c <radio_ar_configure+0x50>)
    816a:	4909      	ldr	r1, [pc, #36]	; (8190 <radio_ar_configure+0x54>)
    816c:	00d2      	lsls	r2, r2, #3
    816e:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    8170:	4a08      	ldr	r2, [pc, #32]	; (8194 <radio_ar_configure+0x58>)
    8172:	509c      	str	r4, [r3, r2]
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    8174:	2240      	movs	r2, #64	; 0x40
    8176:	515a      	str	r2, [r3, r5]
}
    8178:	bd70      	pop	{r4, r5, r6, pc}
    817a:	46c0      	nop			; (mov r8, r8)
    817c:	4000f000 	.word	0x4000f000
    8180:	00000504 	.word	0x00000504
    8184:	40001000 	.word	0x40001000
    8188:	00000514 	.word	0x00000514
    818c:	4001f000 	.word	0x4001f000
    8190:	40001128 	.word	0x40001128
    8194:	00000544 	.word	0x00000544

00008198 <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    8198:	2380      	movs	r3, #128	; 0x80
    819a:	4a02      	ldr	r2, [pc, #8]	; (81a4 <radio_ar_match_get+0xc>)
    819c:	00db      	lsls	r3, r3, #3
    819e:	58d0      	ldr	r0, [r2, r3]
}
    81a0:	4770      	bx	lr
    81a2:	46c0      	nop			; (mov r8, r8)
    81a4:	4000f000 	.word	0x4000f000

000081a8 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    81a8:	4b05      	ldr	r3, [pc, #20]	; (81c0 <radio_ar_status_reset+0x18>)
    81aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	return NRF_AAR->STATUS;
}

void radio_ar_status_reset(void)
{
	if (radio_bc_has_match()) {
    81ac:	2a00      	cmp	r2, #0
    81ae:	d004      	beq.n	81ba <radio_ar_status_reset+0x12>
		NRF_AAR->EVENTS_END = 0;
    81b0:	2100      	movs	r1, #0
    81b2:	4a04      	ldr	r2, [pc, #16]	; (81c4 <radio_ar_status_reset+0x1c>)
    81b4:	6051      	str	r1, [r2, #4]
		NRF_AAR->EVENTS_RESOLVED = 0;
    81b6:	6091      	str	r1, [r2, #8]
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
    81b8:	60d1      	str	r1, [r2, #12]
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    81ba:	2200      	movs	r2, #0
    81bc:	62da      	str	r2, [r3, #44]	; 0x2c
		NRF_AAR->EVENTS_RESOLVED = 0;
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
	}

	radio_bc_status_reset();
}
    81be:	4770      	bx	lr
    81c0:	400010fc 	.word	0x400010fc
    81c4:	4000f0fc 	.word	0x4000f0fc

000081c8 <radio_ar_has_match>:

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    81c8:	2000      	movs	r0, #0
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    81ca:	4b06      	ldr	r3, [pc, #24]	; (81e4 <radio_ar_has_match+0x1c>)
    81cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    81ce:	4283      	cmp	r3, r0
    81d0:	d006      	beq.n	81e0 <radio_ar_has_match+0x18>
    81d2:	4b05      	ldr	r3, [pc, #20]	; (81e8 <radio_ar_has_match+0x20>)
    81d4:	685a      	ldr	r2, [r3, #4]
	radio_bc_status_reset();
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
    81d6:	4282      	cmp	r2, r0
    81d8:	d002      	beq.n	81e0 <radio_ar_has_match+0x18>
			(NRF_AAR->EVENTS_END) &&
			(NRF_AAR->EVENTS_RESOLVED));
    81da:	6898      	ldr	r0, [r3, #8]
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    81dc:	1e43      	subs	r3, r0, #1
    81de:	4198      	sbcs	r0, r3
			(NRF_AAR->EVENTS_RESOLVED));
}
    81e0:	4770      	bx	lr
    81e2:	46c0      	nop			; (mov r8, r8)
    81e4:	400010fc 	.word	0x400010fc
    81e8:	4000f0fc 	.word	0x4000f0fc

000081ec <rand_init>:
};

static struct rand *rng;

void rand_init(u8_t *context, u8_t context_len)
{
    81ec:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(context_len > sizeof(struct rand));
    81ee:	2904      	cmp	r1, #4
    81f0:	d80c      	bhi.n	820c <rand_init+0x20>
    81f2:	4b0f      	ldr	r3, [pc, #60]	; (8230 <rand_init+0x44>)
    81f4:	4a0f      	ldr	r2, [pc, #60]	; (8234 <rand_init+0x48>)
    81f6:	9301      	str	r3, [sp, #4]
    81f8:	4b0f      	ldr	r3, [pc, #60]	; (8238 <rand_init+0x4c>)
    81fa:	4910      	ldr	r1, [pc, #64]	; (823c <rand_init+0x50>)
    81fc:	9300      	str	r3, [sp, #0]
    81fe:	4810      	ldr	r0, [pc, #64]	; (8240 <rand_init+0x54>)
    8200:	4b10      	ldr	r3, [pc, #64]	; (8244 <rand_init+0x58>)
    8202:	f7f9 fb47 	bl	1894 <printk>
    8206:	b662      	cpsie	i
    8208:	2004      	movs	r0, #4
    820a:	df02      	svc	2

	rng = (struct rand *)context;
	rng->count = context_len - sizeof(struct rand) + 1;
    820c:	3903      	subs	r1, #3
    820e:	7001      	strb	r1, [r0, #0]
	rng->first = rng->last = 0;
    8210:	2100      	movs	r1, #0

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    8212:	2201      	movs	r2, #1

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    8214:	4b0c      	ldr	r3, [pc, #48]	; (8248 <rand_init+0x5c>)
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    8216:	7081      	strb	r1, [r0, #2]

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    8218:	6018      	str	r0, [r3, #0]
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    821a:	7041      	strb	r1, [r0, #1]

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    821c:	4b0b      	ldr	r3, [pc, #44]	; (824c <rand_init+0x60>)
    821e:	480c      	ldr	r0, [pc, #48]	; (8250 <rand_init+0x64>)
    8220:	501a      	str	r2, [r3, r0]
	NRF_RNG->EVENTS_VALRDY = 0;
    8222:	480c      	ldr	r0, [pc, #48]	; (8254 <rand_init+0x68>)
    8224:	6041      	str	r1, [r0, #4]
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    8226:	21c1      	movs	r1, #193	; 0xc1
    8228:	0089      	lsls	r1, r1, #2
    822a:	505a      	str	r2, [r3, r1]

	NRF_RNG->TASKS_START = 1;
    822c:	601a      	str	r2, [r3, #0]
}
    822e:	bd07      	pop	{r0, r1, r2, pc}
    8230:	0001241d 	.word	0x0001241d
    8234:	0001246d 	.word	0x0001246d
    8238:	000124a8 	.word	0x000124a8
    823c:	000123e3 	.word	0x000123e3
    8240:	000134d9 	.word	0x000134d9
    8244:	000147ea 	.word	0x000147ea
    8248:	20000e70 	.word	0x20000e70
    824c:	4000d000 	.word	0x4000d000
    8250:	00000504 	.word	0x00000504
    8254:	4000d0fc 	.word	0x4000d0fc

00008258 <rand_get>:

size_t rand_get(size_t octets, u8_t *rand)
{
    8258:	b510      	push	{r4, lr}
	u8_t reserved;
	u8_t first;

	while (octets) {
		if (rng->first == rng->last) {
    825a:	4b14      	ldr	r3, [pc, #80]	; (82ac <rand_get+0x54>)
    825c:	681a      	ldr	r2, [r3, #0]
    825e:	7853      	ldrb	r3, [r2, #1]
size_t rand_get(size_t octets, u8_t *rand)
{
	u8_t reserved;
	u8_t first;

	while (octets) {
    8260:	2800      	cmp	r0, #0
    8262:	d00f      	beq.n	8284 <rand_get+0x2c>
		if (rng->first == rng->last) {
    8264:	7894      	ldrb	r4, [r2, #2]
    8266:	429c      	cmp	r4, r3
    8268:	d00c      	beq.n	8284 <rand_get+0x2c>
			break;
		}

		rand[--octets] = rng->rand[rng->first];
    826a:	18d3      	adds	r3, r2, r3
    826c:	78db      	ldrb	r3, [r3, #3]
    826e:	3801      	subs	r0, #1
    8270:	540b      	strb	r3, [r1, r0]

		first = rng->first + 1;
    8272:	7853      	ldrb	r3, [r2, #1]
		if (first == rng->count) {
    8274:	7814      	ldrb	r4, [r2, #0]
			break;
		}

		rand[--octets] = rng->rand[rng->first];

		first = rng->first + 1;
    8276:	3301      	adds	r3, #1
    8278:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
    827a:	429c      	cmp	r4, r3
    827c:	d100      	bne.n	8280 <rand_get+0x28>
			first = 0;
    827e:	2300      	movs	r3, #0
		}
		rng->first = first;
    8280:	7053      	strb	r3, [r2, #1]
    8282:	e7ec      	b.n	825e <rand_get+0x6>
	}

	reserved = RAND_RESERVED;
	first = rng->first;
	while (reserved--) {
    8284:	2105      	movs	r1, #5
    8286:	3901      	subs	r1, #1
    8288:	b2c9      	uxtb	r1, r1
    828a:	2900      	cmp	r1, #0
    828c:	d00d      	beq.n	82aa <rand_get+0x52>
		if (first == rng->last) {
    828e:	7894      	ldrb	r4, [r2, #2]
    8290:	429c      	cmp	r4, r3
    8292:	d103      	bne.n	829c <rand_get+0x44>
			NRF_RNG->TASKS_START = 1;
    8294:	2201      	movs	r2, #1
    8296:	4b06      	ldr	r3, [pc, #24]	; (82b0 <rand_get+0x58>)
    8298:	601a      	str	r2, [r3, #0]

			break;
    829a:	e006      	b.n	82aa <rand_get+0x52>
		}

		first++;
    829c:	3301      	adds	r3, #1
		if (first == rng->count) {
    829e:	7814      	ldrb	r4, [r2, #0]
			NRF_RNG->TASKS_START = 1;

			break;
		}

		first++;
    82a0:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
    82a2:	429c      	cmp	r4, r3
    82a4:	d1ef      	bne.n	8286 <rand_get+0x2e>
			first = 0;
    82a6:	2300      	movs	r3, #0
    82a8:	e7ed      	b.n	8286 <rand_get+0x2e>
		}
	}

	return octets;
}
    82aa:	bd10      	pop	{r4, pc}
    82ac:	20000e70 	.word	0x20000e70
    82b0:	4000d000 	.word	0x4000d000

000082b4 <isr_rand>:

void isr_rand(void *param)
{
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    82b4:	4915      	ldr	r1, [pc, #84]	; (830c <isr_rand+0x58>)

	return octets;
}

void isr_rand(void *param)
{
    82b6:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    82b8:	684b      	ldr	r3, [r1, #4]
    82ba:	2b00      	cmp	r3, #0
    82bc:	d024      	beq.n	8308 <isr_rand+0x54>
		u8_t last;

		last = rng->last + 1;
    82be:	4b14      	ldr	r3, [pc, #80]	; (8310 <isr_rand+0x5c>)
    82c0:	681a      	ldr	r2, [r3, #0]
    82c2:	7890      	ldrb	r0, [r2, #2]
		if (last == rng->count) {
    82c4:	7814      	ldrb	r4, [r2, #0]
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
		u8_t last;

		last = rng->last + 1;
    82c6:	1c43      	adds	r3, r0, #1
    82c8:	b2db      	uxtb	r3, r3
		if (last == rng->count) {
    82ca:	42a3      	cmp	r3, r4
    82cc:	d100      	bne.n	82d0 <isr_rand+0x1c>
			last = 0;
    82ce:	2300      	movs	r3, #0
		}

		if (last == rng->first) {
    82d0:	7856      	ldrb	r6, [r2, #1]
    82d2:	4d10      	ldr	r5, [pc, #64]	; (8314 <isr_rand+0x60>)
    82d4:	429e      	cmp	r6, r3
    82d6:	d104      	bne.n	82e2 <isr_rand+0x2e>
			/* this condition should not happen
			 * , but due to probable bug in HW
			 * , new value could be generated
			 * before task is stopped.
			 */
			NRF_RNG->TASKS_STOP = 1;
    82d8:	2301      	movs	r3, #1
    82da:	606b      	str	r3, [r5, #4]
			NRF_RNG->EVENTS_VALRDY = 0;
    82dc:	2300      	movs	r3, #0
    82de:	604b      	str	r3, [r1, #4]

			return;
    82e0:	e012      	b.n	8308 <isr_rand+0x54>
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
    82e2:	26a1      	movs	r6, #161	; 0xa1
    82e4:	00f6      	lsls	r6, r6, #3
    82e6:	59ad      	ldr	r5, [r5, r6]
    82e8:	1810      	adds	r0, r2, r0
    82ea:	70c5      	strb	r5, [r0, #3]
		rng->last = last;
    82ec:	7093      	strb	r3, [r2, #2]

		last = rng->last + 1;
    82ee:	3301      	adds	r3, #1
    82f0:	b2db      	uxtb	r3, r3
    82f2:	2000      	movs	r0, #0
		if (last == rng->count) {
    82f4:	429c      	cmp	r4, r3
    82f6:	d100      	bne.n	82fa <isr_rand+0x46>
			last = 0;
    82f8:	0003      	movs	r3, r0
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    82fa:	6048      	str	r0, [r1, #4]

		if (last == rng->first) {
    82fc:	7852      	ldrb	r2, [r2, #1]
    82fe:	429a      	cmp	r2, r3
    8300:	d102      	bne.n	8308 <isr_rand+0x54>
			NRF_RNG->TASKS_STOP = 1;
    8302:	2201      	movs	r2, #1
    8304:	4b03      	ldr	r3, [pc, #12]	; (8314 <isr_rand+0x60>)
    8306:	605a      	str	r2, [r3, #4]
		}
	}
}
    8308:	bd70      	pop	{r4, r5, r6, pc}
    830a:	46c0      	nop			; (mov r8, r8)
    830c:	4000d0fc 	.word	0x4000d0fc
    8310:	20000e70 	.word	0x20000e70
    8314:	4000d000 	.word	0x4000d000

00008318 <ticker_dequeue>:
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    8318:	2324      	movs	r3, #36	; 0x24

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    831a:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    831c:	7e04      	ldrb	r4, [r0, #24]
	current = previous;
	total = 0;
    831e:	2500      	movs	r5, #0
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
	current = previous;
    8320:	0022      	movs	r2, r4
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    8322:	469c      	mov	ip, r3
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
    8324:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    8326:	2aff      	cmp	r2, #255	; 0xff
    8328:	d00a      	beq.n	8340 <ticker_dequeue+0x28>

		ticker_current = &node[current];
    832a:	4663      	mov	r3, ip
    832c:	4353      	muls	r3, r2
    832e:	18f3      	adds	r3, r6, r3
    8330:	781f      	ldrb	r7, [r3, #0]

		if (current == id) {
    8332:	428a      	cmp	r2, r1
    8334:	d006      	beq.n	8344 <ticker_dequeue+0x2c>
			break;
		}

		total += ticker_current->ticks_to_expire;
    8336:	689b      	ldr	r3, [r3, #8]
		previous = current;
		current = ticker_current->next;
    8338:	0014      	movs	r4, r2

		if (current == id) {
			break;
		}

		total += ticker_current->ticks_to_expire;
    833a:	18ed      	adds	r5, r5, r3
		previous = current;
		current = ticker_current->next;
    833c:	003a      	movs	r2, r7
    833e:	e7f2      	b.n	8326 <ticker_dequeue+0xe>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    8340:	2000      	movs	r0, #0
    8342:	e010      	b.n	8366 <ticker_dequeue+0x4e>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    8344:	4294      	cmp	r4, r2
    8346:	d100      	bne.n	834a <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    8348:	7607      	strb	r7, [r0, #24]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    834a:	2224      	movs	r2, #36	; 0x24
    834c:	4354      	muls	r4, r2
    834e:	7818      	ldrb	r0, [r3, #0]
	if (previous == current) {
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
    8350:	6899      	ldr	r1, [r3, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    8352:	55a0      	strb	r0, [r4, r6]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    8354:	781b      	ldrb	r3, [r3, #0]
    8356:	2bff      	cmp	r3, #255	; 0xff
    8358:	d004      	beq.n	8364 <ticker_dequeue+0x4c>
		node[ticker_current->next].ticks_to_expire += timeout;
    835a:	435a      	muls	r2, r3
    835c:	18b3      	adds	r3, r6, r2
    835e:	689a      	ldr	r2, [r3, #8]
    8360:	1852      	adds	r2, r2, r1
    8362:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    8364:	1868      	adds	r0, r5, r1
}
    8366:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008368 <ticks_to_expire_prep>:
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    8368:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    836a:	6883      	ldr	r3, [r0, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    836c:	8a84      	ldrh	r4, [r0, #20]

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & BIT(31)) == 0) {
    836e:	1a55      	subs	r5, r2, r1
    8370:	d403      	bmi.n	837a <ticks_to_expire_prep+0x12>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    8372:	022a      	lsls	r2, r5, #8
    8374:	0a12      	lsrs	r2, r2, #8
    8376:	18d2      	adds	r2, r2, r3
    8378:	e00a      	b.n	8390 <ticks_to_expire_prep+0x28>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    837a:	1a89      	subs	r1, r1, r2
    837c:	0209      	lsls	r1, r1, #8
    837e:	0a09      	lsrs	r1, r1, #8
		u32_t delta_current_start;

		delta_current_start = ticker_ticks_diff_get(ticks_current,
							    ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
			ticks_to_expire -= delta_current_start;
    8380:	1a5a      	subs	r2, r3, r1
	} else {
		u32_t delta_current_start;

		delta_current_start = ticker_ticks_diff_get(ticks_current,
							    ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
    8382:	428b      	cmp	r3, r1
    8384:	d804      	bhi.n	8390 <ticks_to_expire_prep+0x28>
    8386:	1ae3      	subs	r3, r4, r3
			ticks_to_expire -= delta_current_start;
		} else {
			ticks_to_expire_minus +=
    8388:	185b      	adds	r3, r3, r1
    838a:	b29c      	uxth	r4, r3
			    (delta_current_start - ticks_to_expire);
			ticks_to_expire = 0;
    838c:	2200      	movs	r2, #0
    838e:	e004      	b.n	839a <ticks_to_expire_prep+0x32>
		}
	}

	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
    8390:	42a2      	cmp	r2, r4
    8392:	d902      	bls.n	839a <ticks_to_expire_prep+0x32>
		ticks_to_expire -= ticks_to_expire_minus;
    8394:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    8396:	2300      	movs	r3, #0
    8398:	e002      	b.n	83a0 <ticks_to_expire_prep+0x38>
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    839a:	1aa3      	subs	r3, r4, r2
		ticks_to_expire = 0;
    839c:	2200      	movs	r2, #0
	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
		ticks_to_expire -= ticks_to_expire_minus;
		ticks_to_expire_minus = 0;
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    839e:	b29b      	uxth	r3, r3
		ticks_to_expire = 0;
	}

	ticker->ticks_to_expire = ticks_to_expire;
    83a0:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    83a2:	8283      	strh	r3, [r0, #20]
}
    83a4:	bd30      	pop	{r4, r5, pc}

000083a6 <ticker_job_op_cb>:

	return decrement;
}

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
    83a6:	0003      	movs	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    83a8:	2200      	movs	r2, #0
    83aa:	701a      	strb	r2, [r3, #0]
	user_op->status = status;
	if (user_op->fp_op_func) {
    83ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	return decrement;
}

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
    83ae:	b510      	push	{r4, lr}
    83b0:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
	user_op->status = status;
    83b2:	6219      	str	r1, [r3, #32]
	if (user_op->fp_op_func) {
    83b4:	2a00      	cmp	r2, #0
    83b6:	d001      	beq.n	83bc <ticker_job_op_cb+0x16>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    83b8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    83ba:	4790      	blx	r2
	}
}
    83bc:	bd10      	pop	{r4, pc}

000083be <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
    83be:	b510      	push	{r4, lr}
    83c0:	0001      	movs	r1, r0
	cntr_cmp_set(1, value);
    83c2:	2001      	movs	r0, #1
    83c4:	f7ff fb3a 	bl	7a3c <cntr_cmp_set>
}
    83c8:	bd10      	pop	{r4, pc}

000083ca <ticker_instance0_cmp_set>:
		break;
	}
}

static void ticker_instance0_cmp_set(u32_t value)
{
    83ca:	b510      	push	{r4, lr}
    83cc:	0001      	movs	r1, r0
	cntr_cmp_set(0, value);
    83ce:	2000      	movs	r0, #0
    83d0:	f7ff fb34 	bl	7a3c <cntr_cmp_set>
}
    83d4:	bd10      	pop	{r4, pc}
	...

000083d8 <ticker_instance1_sched>:
		break;
	}
}

static void ticker_instance1_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    83d8:	b513      	push	{r0, r1, r4, lr}
    83da:	000c      	movs	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    83dc:	2803      	cmp	r0, #3
    83de:	d821      	bhi.n	8424 <ticker_instance1_sched+0x4c>
    83e0:	f7f7 feca 	bl	178 <__gnu_thumb1_case_uqi>
    83e4:	190c0802 	.word	0x190c0802
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    83e8:	2901      	cmp	r1, #1
    83ea:	d11b      	bne.n	8424 <ticker_instance1_sched+0x4c>
				0, 0, link,
				&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    83ec:	4b14      	ldr	r3, [pc, #80]	; (8440 <ticker_instance1_sched+0x68>)
    83ee:	2102      	movs	r1, #2
    83f0:	2000      	movs	r0, #0
    83f2:	e014      	b.n	841e <ticker_instance1_sched+0x46>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    83f4:	4b13      	ldr	r3, [pc, #76]	; (8444 <ticker_instance1_sched+0x6c>)
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    83f6:	2902      	cmp	r1, #2
    83f8:	d00a      	beq.n	8410 <ticker_instance1_sched+0x38>
    83fa:	e013      	b.n	8424 <ticker_instance1_sched+0x4c>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    83fc:	2901      	cmp	r1, #1
    83fe:	d003      	beq.n	8408 <ticker_instance1_sched+0x30>
    8400:	2902      	cmp	r1, #2
    8402:	d10f      	bne.n	8424 <ticker_instance1_sched+0x4c>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    8404:	4b10      	ldr	r3, [pc, #64]	; (8448 <ticker_instance1_sched+0x70>)
    8406:	e003      	b.n	8410 <ticker_instance1_sched+0x38>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    8408:	2102      	movs	r1, #2
    840a:	4b10      	ldr	r3, [pc, #64]	; (844c <ticker_instance1_sched+0x74>)
    840c:	0008      	movs	r0, r1
    840e:	e006      	b.n	841e <ticker_instance1_sched+0x46>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    8410:	0021      	movs	r1, r4
    8412:	0020      	movs	r0, r4
    8414:	e003      	b.n	841e <ticker_instance1_sched+0x46>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    8416:	2902      	cmp	r1, #2
    8418:	d104      	bne.n	8424 <ticker_instance1_sched+0x4c>
				(void *)&_instance[1],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    841a:	2003      	movs	r0, #3
    841c:	4b0c      	ldr	r3, [pc, #48]	; (8450 <ticker_instance1_sched+0x78>)
    841e:	f7ff f91d 	bl	765c <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    8422:	bd13      	pop	{r0, r1, r4, pc}
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    8424:	4b0b      	ldr	r3, [pc, #44]	; (8454 <ticker_instance1_sched+0x7c>)
    8426:	4a0c      	ldr	r2, [pc, #48]	; (8458 <ticker_instance1_sched+0x80>)
    8428:	9301      	str	r3, [sp, #4]
    842a:	4b0c      	ldr	r3, [pc, #48]	; (845c <ticker_instance1_sched+0x84>)
    842c:	490c      	ldr	r1, [pc, #48]	; (8460 <ticker_instance1_sched+0x88>)
    842e:	9300      	str	r3, [sp, #0]
    8430:	480c      	ldr	r0, [pc, #48]	; (8464 <ticker_instance1_sched+0x8c>)
    8432:	4b0d      	ldr	r3, [pc, #52]	; (8468 <ticker_instance1_sched+0x90>)
    8434:	f7f9 fa2e 	bl	1894 <printk>
    8438:	b662      	cpsie	i
    843a:	2004      	movs	r0, #4
    843c:	df02      	svc	2
    843e:	46c0      	nop			; (mov r8, r8)
    8440:	20000478 	.word	0x20000478
    8444:	200004b8 	.word	0x200004b8
    8448:	20000448 	.word	0x20000448
    844c:	20000438 	.word	0x20000438
    8450:	20000488 	.word	0x20000488
    8454:	0001241d 	.word	0x0001241d
    8458:	0001246d 	.word	0x0001246d
    845c:	000124a8 	.word	0x000124a8
    8460:	000123e3 	.word	0x000123e3
    8464:	000129d4 	.word	0x000129d4
    8468:	00014849 	.word	0x00014849

0000846c <ticker_instance0_sched>:

	return 0;
}

static void ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    846c:	b513      	push	{r0, r1, r4, lr}
    846e:	000c      	movs	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    8470:	2803      	cmp	r0, #3
    8472:	d823      	bhi.n	84bc <ticker_instance0_sched+0x50>
    8474:	f7f7 fe80 	bl	178 <__gnu_thumb1_case_uqi>
    8478:	1a0d0702 	.word	0x1a0d0702
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    847c:	2901      	cmp	r1, #1
    847e:	d11d      	bne.n	84bc <ticker_instance0_sched+0x50>
				0, 0, link,
				&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    8480:	4b15      	ldr	r3, [pc, #84]	; (84d8 <ticker_instance0_sched+0x6c>)
    8482:	2100      	movs	r1, #0
    8484:	e010      	b.n	84a8 <ticker_instance0_sched+0x3c>
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    8486:	2902      	cmp	r1, #2
    8488:	d118      	bne.n	84bc <ticker_instance0_sched+0x50>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    848a:	4b14      	ldr	r3, [pc, #80]	; (84dc <ticker_instance0_sched+0x70>)
    848c:	2101      	movs	r1, #1
    848e:	2000      	movs	r0, #0
    8490:	e011      	b.n	84b6 <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    8492:	2901      	cmp	r1, #1
    8494:	d004      	beq.n	84a0 <ticker_instance0_sched+0x34>
    8496:	2902      	cmp	r1, #2
    8498:	d110      	bne.n	84bc <ticker_instance0_sched+0x50>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    849a:	4b11      	ldr	r3, [pc, #68]	; (84e0 <ticker_instance0_sched+0x74>)
    849c:	2101      	movs	r1, #1
    849e:	e003      	b.n	84a8 <ticker_instance0_sched+0x3c>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    84a0:	4b10      	ldr	r3, [pc, #64]	; (84e4 <ticker_instance0_sched+0x78>)
    84a2:	2100      	movs	r1, #0
    84a4:	0020      	movs	r0, r4
    84a6:	e006      	b.n	84b6 <ticker_instance0_sched+0x4a>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    84a8:	0008      	movs	r0, r1
    84aa:	e004      	b.n	84b6 <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    84ac:	2902      	cmp	r1, #2
    84ae:	d105      	bne.n	84bc <ticker_instance0_sched+0x50>
				(void *)&_instance[0],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    84b0:	2101      	movs	r1, #1
    84b2:	2003      	movs	r0, #3
    84b4:	4b0c      	ldr	r3, [pc, #48]	; (84e8 <ticker_instance0_sched+0x7c>)
    84b6:	f7ff f8d1 	bl	765c <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    84ba:	bd13      	pop	{r0, r1, r4, pc}
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    84bc:	4b0b      	ldr	r3, [pc, #44]	; (84ec <ticker_instance0_sched+0x80>)
    84be:	4a0c      	ldr	r2, [pc, #48]	; (84f0 <ticker_instance0_sched+0x84>)
    84c0:	9301      	str	r3, [sp, #4]
    84c2:	4b0c      	ldr	r3, [pc, #48]	; (84f4 <ticker_instance0_sched+0x88>)
    84c4:	490c      	ldr	r1, [pc, #48]	; (84f8 <ticker_instance0_sched+0x8c>)
    84c6:	9300      	str	r3, [sp, #0]
    84c8:	480c      	ldr	r0, [pc, #48]	; (84fc <ticker_instance0_sched+0x90>)
    84ca:	4b0d      	ldr	r3, [pc, #52]	; (8500 <ticker_instance0_sched+0x94>)
    84cc:	f7f9 f9e2 	bl	1894 <printk>
    84d0:	b662      	cpsie	i
    84d2:	2004      	movs	r0, #4
    84d4:	df02      	svc	2
    84d6:	46c0      	nop			; (mov r8, r8)
    84d8:	200004a8 	.word	0x200004a8
    84dc:	20000498 	.word	0x20000498
    84e0:	20000458 	.word	0x20000458
    84e4:	20000428 	.word	0x20000428
    84e8:	20000468 	.word	0x20000468
    84ec:	0001241d 	.word	0x0001241d
    84f0:	0001246d 	.word	0x0001246d
    84f4:	000124a8 	.word	0x000124a8
    84f8:	000123e3 	.word	0x000123e3
    84fc:	000129d4 	.word	0x000129d4
    8500:	000147f4 	.word	0x000147f4

00008504 <ticker_instance1_caller_id_get>:

	return 0;
}

static u8_t ticker_instance1_caller_id_get(u8_t user_id)
{
    8504:	b507      	push	{r0, r1, r2, lr}
	switch (user_id) {
    8506:	2802      	cmp	r0, #2
    8508:	d00e      	beq.n	8528 <ticker_instance1_caller_id_get+0x24>
    850a:	2803      	cmp	r0, #3
    850c:	d00c      	beq.n	8528 <ticker_instance1_caller_id_get+0x24>
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_0:
	case MAYFLY_CALL_ID_1:
	default:
		LL_ASSERT(0);
    850e:	4b07      	ldr	r3, [pc, #28]	; (852c <ticker_instance1_caller_id_get+0x28>)
    8510:	4a07      	ldr	r2, [pc, #28]	; (8530 <ticker_instance1_caller_id_get+0x2c>)
    8512:	9301      	str	r3, [sp, #4]
    8514:	4b07      	ldr	r3, [pc, #28]	; (8534 <ticker_instance1_caller_id_get+0x30>)
    8516:	4908      	ldr	r1, [pc, #32]	; (8538 <ticker_instance1_caller_id_get+0x34>)
    8518:	9300      	str	r3, [sp, #0]
    851a:	4808      	ldr	r0, [pc, #32]	; (853c <ticker_instance1_caller_id_get+0x38>)
    851c:	4b08      	ldr	r3, [pc, #32]	; (8540 <ticker_instance1_caller_id_get+0x3c>)
    851e:	f7f9 f9b9 	bl	1894 <printk>
    8522:	b662      	cpsie	i
    8524:	2004      	movs	r0, #4
    8526:	df02      	svc	2
		break;
	}

	return 0;
}
    8528:	bd0e      	pop	{r1, r2, r3, pc}
    852a:	46c0      	nop			; (mov r8, r8)
    852c:	0001241d 	.word	0x0001241d
    8530:	0001246d 	.word	0x0001246d
    8534:	000124a8 	.word	0x000124a8
    8538:	000123e3 	.word	0x000123e3
    853c:	000129d4 	.word	0x000129d4
    8540:	0001482a 	.word	0x0001482a

00008544 <ticker_instance0_caller_id_get>:
 *       import it.
 ****************************************************************************/
#include "util/mayfly.h"

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
    8544:	b507      	push	{r0, r1, r2, lr}
	switch (user_id) {
    8546:	2801      	cmp	r0, #1
    8548:	d010      	beq.n	856c <ticker_instance0_caller_id_get+0x28>
    854a:	2800      	cmp	r0, #0
    854c:	d010      	beq.n	8570 <ticker_instance0_caller_id_get+0x2c>
    854e:	2803      	cmp	r0, #3
    8550:	d00f      	beq.n	8572 <ticker_instance0_caller_id_get+0x2e>
	case MAYFLY_CALL_ID_PROGRAM:
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_2:
	default:
		LL_ASSERT(0);
    8552:	4b08      	ldr	r3, [pc, #32]	; (8574 <ticker_instance0_caller_id_get+0x30>)
    8554:	4a08      	ldr	r2, [pc, #32]	; (8578 <ticker_instance0_caller_id_get+0x34>)
    8556:	9301      	str	r3, [sp, #4]
    8558:	4b08      	ldr	r3, [pc, #32]	; (857c <ticker_instance0_caller_id_get+0x38>)
    855a:	4909      	ldr	r1, [pc, #36]	; (8580 <ticker_instance0_caller_id_get+0x3c>)
    855c:	9300      	str	r3, [sp, #0]
    855e:	4809      	ldr	r0, [pc, #36]	; (8584 <ticker_instance0_caller_id_get+0x40>)
    8560:	4b09      	ldr	r3, [pc, #36]	; (8588 <ticker_instance0_caller_id_get+0x44>)
    8562:	f7f9 f997 	bl	1894 <printk>
    8566:	b662      	cpsie	i
    8568:	2004      	movs	r0, #4
    856a:	df02      	svc	2
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;

	case MAYFLY_CALL_ID_1:
		return CALL_ID_JOB;
    856c:	2002      	movs	r0, #2
    856e:	e000      	b.n	8572 <ticker_instance0_caller_id_get+0x2e>

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;
    8570:	2001      	movs	r0, #1
		LL_ASSERT(0);
		break;
	}

	return 0;
}
    8572:	bd0e      	pop	{r1, r2, r3, pc}
    8574:	0001241d 	.word	0x0001241d
    8578:	0001246d 	.word	0x0001246d
    857c:	000124a8 	.word	0x000124a8
    8580:	000123e3 	.word	0x000123e3
    8584:	000129d4 	.word	0x000129d4
    8588:	0001480b 	.word	0x0001480b

0000858c <ticker_worker>:
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    858c:	2301      	movs	r3, #1

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    858e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
	if (instance->job_guard) {
    8590:	7f06      	ldrb	r6, [r0, #28]

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    8592:	0004      	movs	r4, r0
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    8594:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
    8596:	2e00      	cmp	r6, #0
    8598:	d14b      	bne.n	8632 <ticker_worker+0xa6>
		return;
	}

	/* If no tickers to expire, do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    859a:	7e03      	ldrb	r3, [r0, #24]
    859c:	2bff      	cmp	r3, #255	; 0xff
    859e:	d101      	bne.n	85a4 <ticker_worker+0x18>
		instance->worker_trigger = 0;
    85a0:	7746      	strb	r6, [r0, #29]

		return;
    85a2:	e046      	b.n	8632 <ticker_worker+0xa6>
	}

	/* ticks_elapsed is collected here, job will use it */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    85a4:	f7ff fa42 	bl	7a2c <cntr_cnt_get>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    85a8:	6963      	ldr	r3, [r4, #20]

	/* initialise actual elapsed ticks being consumed */
	ticks_expired = 0;

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;
    85aa:	7e27      	ldrb	r7, [r4, #24]
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    85ac:	1ac5      	subs	r5, r0, r3
    85ae:	022d      	lsls	r5, r5, #8
    85b0:	0a2b      	lsrs	r3, r5, #8
    85b2:	9300      	str	r3, [sp, #0]

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;

	/* expire all tickers within ticks_elapsed and collect ticks_expired */
	node = &instance->node[0];
    85b4:	6823      	ldr	r3, [r4, #0]
    85b6:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    85b8:	2fff      	cmp	r7, #255	; 0xff
    85ba:	d007      	beq.n	85cc <ticker_worker+0x40>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    85bc:	2324      	movs	r3, #36	; 0x24
    85be:	435f      	muls	r7, r3
    85c0:	9b01      	ldr	r3, [sp, #4]

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
		if (ticks_elapsed < ticks_to_expire) {
    85c2:	9a00      	ldr	r2, [sp, #0]
	while (ticker_id_head != TICKER_NULL) {
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    85c4:	19d9      	adds	r1, r3, r7

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    85c6:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    85c8:	4293      	cmp	r3, r2
    85ca:	d904      	bls.n	85d6 <ticker_worker+0x4a>
			DEBUG_TICKER_TASK(0);
		}
	}

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    85cc:	7aa2      	ldrb	r2, [r4, #10]
    85ce:	7ae3      	ldrb	r3, [r4, #11]
    85d0:	4293      	cmp	r3, r2
    85d2:	d122      	bne.n	861a <ticker_worker+0x8e>
    85d4:	e01b      	b.n	860e <ticker_worker+0x82>

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    85d6:	20ff      	movs	r0, #255	; 0xff
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    85d8:	9a00      	ldr	r2, [sp, #0]
		ticks_expired += ticks_to_expire;
    85da:	18f6      	adds	r6, r6, r3
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    85dc:	1ad2      	subs	r2, r2, r3
    85de:	9200      	str	r2, [sp, #0]

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    85e0:	788a      	ldrb	r2, [r1, #2]
    85e2:	784b      	ldrb	r3, [r1, #1]
		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;

		/* move to next ticker */
		ticker_id_head = ticker->next;
    85e4:	780f      	ldrb	r7, [r1, #0]

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    85e6:	1a9b      	subs	r3, r3, r2
    85e8:	4003      	ands	r3, r0
    85ea:	2b01      	cmp	r3, #1
    85ec:	d1e4      	bne.n	85b8 <ticker_worker+0x2c>
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;

		if (ticker->timeout_func) {
    85ee:	68cb      	ldr	r3, [r1, #12]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
			continue;
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;
    85f0:	3a01      	subs	r2, #1
    85f2:	708a      	strb	r2, [r1, #2]

		if (ticker->timeout_func) {
    85f4:	1e1d      	subs	r5, r3, #0
    85f6:	d0df      	beq.n	85b8 <ticker_worker+0x2c>
					   ticks_expired -
					   ticker->ticks_to_expire_minus) &
					  0x00FFFFFF;

			DEBUG_TICKER_TASK(1);
			ticker->timeout_func(ticks_at_expire,
    85f8:	6963      	ldr	r3, [r4, #20]
    85fa:	8a88      	ldrh	r0, [r1, #20]
    85fc:	8b4a      	ldrh	r2, [r1, #26]
    85fe:	1a18      	subs	r0, r3, r0
    8600:	1980      	adds	r0, r0, r6
    8602:	0200      	lsls	r0, r0, #8
    8604:	690b      	ldr	r3, [r1, #16]
    8606:	0a00      	lsrs	r0, r0, #8
    8608:	6a09      	ldr	r1, [r1, #32]
    860a:	47a8      	blx	r5
    860c:	e7d4      	b.n	85b8 <ticker_worker+0x2c>

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
		u8_t last;

		last = instance->ticks_elapsed_last + 1;
    860e:	3301      	adds	r3, #1
    8610:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
    8612:	2b02      	cmp	r3, #2
    8614:	d100      	bne.n	8618 <ticker_worker+0x8c>
			last = 0;
    8616:	2300      	movs	r3, #0
		}
		instance->ticks_elapsed_last = last;
    8618:	72e3      	strb	r3, [r4, #11]
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    861a:	7ae3      	ldrb	r3, [r4, #11]

	instance->worker_trigger = 0;

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    861c:	2201      	movs	r2, #1
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    861e:	3302      	adds	r3, #2
    8620:	009b      	lsls	r3, r3, #2
    8622:	18e3      	adds	r3, r4, r3
    8624:	605e      	str	r6, [r3, #4]

	instance->worker_trigger = 0;
    8626:	2300      	movs	r3, #0

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    8628:	2102      	movs	r1, #2
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;

	instance->worker_trigger = 0;
    862a:	7763      	strb	r3, [r4, #29]

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    862c:	0010      	movs	r0, r2
    862e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8630:	4798      	blx	r3
}
    8632:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00008634 <ticker_job>:
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    8634:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    8636:	7f42      	ldrb	r2, [r0, #29]
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    8638:	b099      	sub	sp, #100	; 0x64
    863a:	0007      	movs	r7, r0
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    863c:	2a00      	cmp	r2, #0
    863e:	d000      	beq.n	8642 <ticker_job+0xe>
    8640:	e387      	b.n	8d52 <ticker_job+0x71e>
		DEBUG_TICKER_JOB(0);

		return;
	}
	instance->job_guard = 1;
    8642:	2301      	movs	r3, #1
    8644:	7703      	strb	r3, [r0, #28]

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    8646:	6943      	ldr	r3, [r0, #20]
    8648:	9308      	str	r3, [sp, #32]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    864a:	7a83      	ldrb	r3, [r0, #10]
    864c:	7ac1      	ldrb	r1, [r0, #11]
    864e:	4299      	cmp	r1, r3
    8650:	d013      	beq.n	867a <ticker_job+0x46>
		u8_t first;

		first = instance->ticks_elapsed_first + 1;
    8652:	3301      	adds	r3, #1
    8654:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    8656:	2b02      	cmp	r3, #2
    8658:	d100      	bne.n	865c <ticker_job+0x28>
			first = 0;
    865a:	0013      	movs	r3, r2
		}
		instance->ticks_elapsed_first = first;
    865c:	72bb      	strb	r3, [r7, #10]

		ticks_elapsed =
    865e:	3302      	adds	r3, #2
    8660:	009b      	lsls	r3, r3, #2
    8662:	18fb      	adds	r3, r7, r3
    8664:	685b      	ldr	r3, [r3, #4]
    8666:	9304      	str	r3, [sp, #16]
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= 0x00FFFFFF;
    8668:	9a04      	ldr	r2, [sp, #16]
    866a:	9b08      	ldr	r3, [sp, #32]
    866c:	189b      	adds	r3, r3, r2
    866e:	021b      	lsls	r3, r3, #8
    8670:	0a1b      	lsrs	r3, r3, #8
    8672:	617b      	str	r3, [r7, #20]

		flag_elapsed = 1;
    8674:	2301      	movs	r3, #1
    8676:	9307      	str	r3, [sp, #28]
    8678:	e001      	b.n	867e <ticker_job+0x4a>
	} else {
		/* No elapsed value in queue */
		flag_elapsed = 0;
    867a:	9207      	str	r2, [sp, #28]
		ticks_elapsed = 0;
    867c:	9204      	str	r2, [sp, #16]
	flag_compare_update = 0;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    867e:	7e3b      	ldrb	r3, [r7, #24]
    8680:	930a      	str	r3, [sp, #40]	; 0x28
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
	node = &instance->node[0];
    8682:	683b      	ldr	r3, [r7, #0]
    8684:	930d      	str	r3, [sp, #52]	; 0x34
	users = &instance->user[0];
    8686:	687b      	ldr	r3, [r7, #4]
    8688:	930f      	str	r3, [sp, #60]	; 0x3c
    868a:	7a7b      	ldrb	r3, [r7, #9]
    868c:	3b01      	subs	r3, #1
    868e:	b2db      	uxtb	r3, r3
    8690:	9306      	str	r3, [sp, #24]
		flag_elapsed = 0;
		ticks_elapsed = 0;
	}

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;
    8692:	23ff      	movs	r3, #255	; 0xff
    8694:	9303      	str	r3, [sp, #12]
	u8_t pending;
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
    8696:	2300      	movs	r3, #0
    8698:	930e      	str	r3, [sp, #56]	; 0x38
	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    869a:	9b06      	ldr	r3, [sp, #24]
    869c:	2bff      	cmp	r3, #255	; 0xff
    869e:	d100      	bne.n	86a2 <ticker_job+0x6e>
    86a0:	e0d9      	b.n	8856 <ticker_job+0x222>
		struct ticker_user *user;
		struct ticker_user_op *user_ops;

		user = &users[count_user];
    86a2:	9b06      	ldr	r3, [sp, #24]
    86a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    86a6:	00db      	lsls	r3, r3, #3
    86a8:	18d3      	adds	r3, r2, r3
    86aa:	9305      	str	r3, [sp, #20]
		user_ops = &user->user_op[0];
    86ac:	685b      	ldr	r3, [r3, #4]
    86ae:	9310      	str	r3, [sp, #64]	; 0x40
		while (user->middle != user->last) {
    86b0:	9b05      	ldr	r3, [sp, #20]
    86b2:	78d9      	ldrb	r1, [r3, #3]
    86b4:	9b05      	ldr	r3, [sp, #20]
    86b6:	789e      	ldrb	r6, [r3, #2]
    86b8:	428e      	cmp	r6, r1
    86ba:	d100      	bne.n	86be <ticker_job+0x8a>
    86bc:	e0c6      	b.n	884c <ticker_job+0x218>
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    86be:	252c      	movs	r5, #44	; 0x2c
    86c0:	4375      	muls	r5, r6
    86c2:	9b10      	ldr	r3, [sp, #64]	; 0x40

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    86c4:	9a05      	ldr	r2, [sp, #20]
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    86c6:	195d      	adds	r5, r3, r5

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    86c8:	7812      	ldrb	r2, [r2, #0]

			user_op = &user_ops[user->middle];

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
    86ca:	1c73      	adds	r3, r6, #1
    86cc:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
    86ce:	429a      	cmp	r2, r3
    86d0:	d100      	bne.n	86d4 <ticker_job+0xa0>
				middle = 0;
    86d2:	2300      	movs	r3, #0
			}
			user->middle = middle;
    86d4:	9a05      	ldr	r2, [sp, #20]
    86d6:	7093      	strb	r3, [r2, #2]

			ticker = &node[user_op->id];

			/* if op is start, then skip update and stop ops */
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    86d8:	782a      	ldrb	r2, [r5, #0]
    86da:	2a03      	cmp	r2, #3
    86dc:	d9ea      	bls.n	86b4 <ticker_job+0x80>
			state = (ticker->req - ticker->ack) & 0xff;

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    86de:	2a05      	cmp	r2, #5
    86e0:	d815      	bhi.n	870e <ticker_job+0xda>
			if (middle == user->count_user_op) {
				middle = 0;
			}
			user->middle = middle;

			ticker = &node[user_op->id];
    86e2:	2424      	movs	r4, #36	; 0x24
    86e4:	7869      	ldrb	r1, [r5, #1]
    86e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    86e8:	434c      	muls	r4, r1
    86ea:	191c      	adds	r4, r3, r4
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
				continue;
			}

			/* determine the ticker state */
			state = (ticker->req - ticker->ack) & 0xff;
    86ec:	7863      	ldrb	r3, [r4, #1]
    86ee:	78a0      	ldrb	r0, [r4, #2]
    86f0:	1a1b      	subs	r3, r3, r0
    86f2:	b2db      	uxtb	r3, r3

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    86f4:	2b00      	cmp	r3, #0
    86f6:	d00a      	beq.n	870e <ticker_job+0xda>
			    (state == 0) ||
    86f8:	2a04      	cmp	r2, #4
    86fa:	d10a      	bne.n	8712 <ticker_job+0xde>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
			     (user_op->params.update.ticks_drift_plus == 0) &&
    86fc:	686a      	ldr	r2, [r5, #4]
    86fe:	2a00      	cmp	r2, #0
    8700:	d107      	bne.n	8712 <ticker_job+0xde>
			     (user_op->params.update.ticks_drift_minus == 0) &&
			     (user_op->params.update.ticks_slot_plus == 0) &&
    8702:	68aa      	ldr	r2, [r5, #8]
    8704:	2a00      	cmp	r2, #0
    8706:	d104      	bne.n	8712 <ticker_job+0xde>
			     (user_op->params.update.ticks_slot_minus == 0) &&
			     (user_op->params.update.lazy == 0) &&
    8708:	68ea      	ldr	r2, [r5, #12]
    870a:	0212      	lsls	r2, r2, #8
    870c:	d101      	bne.n	8712 <ticker_job+0xde>
			     (user_op->params.update.force == 0))) {
				ticker_job_op_cb(user_op,
    870e:	2101      	movs	r1, #1
    8710:	e08f      	b.n	8832 <ticker_job+0x1fe>
						 TICKER_STATUS_FAILURE);
				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
    8712:	2b01      	cmp	r3, #1
    8714:	d000      	beq.n	8718 <ticker_job+0xe4>
    8716:	e090      	b.n	883a <ticker_job+0x206>
					  struct ticker_user_op *user_op,
					  u32_t ticks_elapsed,
					  u8_t *insert_head)
{
	/* Remove ticker node from list */
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8718:	0038      	movs	r0, r7
    871a:	f7ff fdfd 	bl	8318 <ticker_dequeue>
    871e:	60a0      	str	r0, [r4, #8]

	/* Handle update of ticker by re-inserting it back. */
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8720:	782b      	ldrb	r3, [r5, #0]
					  struct ticker_user_op *user_op,
					  u32_t ticks_elapsed,
					  u8_t *insert_head)
{
	/* Remove ticker node from list */
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    8722:	0006      	movs	r6, r0

	/* Handle update of ticker by re-inserting it back. */
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    8724:	2b04      	cmp	r3, #4
    8726:	d000      	beq.n	872a <ticker_job+0xf6>
    8728:	e078      	b.n	881c <ticker_job+0x1e8>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    872a:	697b      	ldr	r3, [r7, #20]
    872c:	9309      	str	r3, [sp, #36]	; 0x24
					  u8_t *insert_head)
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_now;

	ticks_now = cntr_cnt_get();
    872e:	f7ff f97d 	bl	7a2c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    8732:	9a09      	ldr	r2, [sp, #36]	; 0x24
					  u8_t *insert_head)
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_now;

	ticks_now = cntr_cnt_get();
    8734:	900b      	str	r0, [sp, #44]	; 0x2c
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    8736:	1a80      	subs	r0, r0, r2
    8738:	0200      	lsls	r0, r0, #8
    873a:	9b04      	ldr	r3, [sp, #16]
    873c:	0a00      	lsrs	r0, r0, #8
    873e:	18c3      	adds	r3, r0, r3
	if (ticks_to_expire > ticks_elapsed) {
		ticks_to_expire -= ticks_elapsed;
    8740:	1af0      	subs	r0, r6, r3
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_now;

	ticks_now = cntr_cnt_get();
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
	if (ticks_to_expire > ticks_elapsed) {
    8742:	429e      	cmp	r6, r3
    8744:	d804      	bhi.n	8750 <ticker_job+0x11c>
		ticks_to_expire -= ticks_elapsed;
	} else {
		ticker->ticks_to_expire_minus += ticks_elapsed -
    8746:	8aa0      	ldrh	r0, [r4, #20]
    8748:	1b80      	subs	r0, r0, r6
    874a:	18c0      	adds	r0, r0, r3
    874c:	82a0      	strh	r0, [r4, #20]
						 ticks_to_expire;
		ticks_to_expire = 0;
    874e:	2000      	movs	r0, #0
	}

	if ((ticker->ticks_periodic != 0) &&
    8750:	6863      	ldr	r3, [r4, #4]
    8752:	2b00      	cmp	r3, #0
    8754:	d03d      	beq.n	87d2 <ticker_job+0x19e>
	    (user_op->params.update.lazy != 0)) {
    8756:	89ab      	ldrh	r3, [r5, #12]
		ticker->ticks_to_expire_minus += ticks_elapsed -
						 ticks_to_expire;
		ticks_to_expire = 0;
	}

	if ((ticker->ticks_periodic != 0) &&
    8758:	2b00      	cmp	r3, #0
    875a:	d03a      	beq.n	87d2 <ticker_job+0x19e>
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;
    875c:	3b01      	subs	r3, #1
    875e:	81ab      	strh	r3, [r5, #12]

		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8760:	6863      	ldr	r3, [r4, #4]
    8762:	469c      	mov	ip, r3
    8764:	4584      	cmp	ip, r0
    8766:	d301      	bcc.n	876c <ticker_job+0x138>
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
    8768:	49c7      	ldr	r1, [pc, #796]	; (8a88 <ticker_job+0x454>)
    876a:	e027      	b.n	87bc <ticker_job+0x188>
	if ((ticker->ticks_periodic != 0) &&
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    876c:	8b63      	ldrh	r3, [r4, #26]
    876e:	930c      	str	r3, [sp, #48]	; 0x30

	if ((ticker->ticks_periodic != 0) &&
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
    8770:	89aa      	ldrh	r2, [r5, #12]
    8772:	429a      	cmp	r2, r3
    8774:	d2f8      	bcs.n	8768 <ticker_job+0x134>

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
    8776:	6a21      	ldr	r1, [r4, #32]
    8778:	4ac4      	ldr	r2, [pc, #784]	; (8a8c <ticker_job+0x458>)
    877a:	4bc3      	ldr	r3, [pc, #780]	; (8a88 <ticker_job+0x454>)
    877c:	188a      	adds	r2, r1, r2
    877e:	0016      	movs	r6, r2
	return 0;
}

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
	u8_t decrement = 0;
    8780:	2200      	movs	r2, #0

	if ((ticker->remainder_current >= BIT(31)) ||
    8782:	429e      	cmp	r6, r3
    8784:	d903      	bls.n	878e <ticker_job+0x15a>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
    8786:	4ac2      	ldr	r2, [pc, #776]	; (8a90 <ticker_job+0x45c>)
    8788:	1889      	adds	r1, r1, r2
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
    878a:	2201      	movs	r2, #1
		ticker->remainder_current += 30517578UL;
    878c:	6221      	str	r1, [r4, #32]
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    878e:	6a21      	ldr	r1, [r4, #32]
    8790:	69e6      	ldr	r6, [r4, #28]

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
			ticks_to_expire -= ticker->ticks_periodic +
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
    8792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if ((ticker->remainder_current >= BIT(31)) ||
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    8794:	1b89      	subs	r1, r1, r6
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
			ticks_to_expire -= ticker->ticks_periodic +
    8796:	4462      	add	r2, ip
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
    8798:	3b01      	subs	r3, #1
	if ((ticker->remainder_current >= BIT(31)) ||
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    879a:	6221      	str	r1, [r4, #32]
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
			ticks_to_expire -= ticker->ticks_periodic +
    879c:	1a80      	subs	r0, r0, r2
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
    879e:	8363      	strh	r3, [r4, #26]
    87a0:	e7e0      	b.n	8764 <ticker_job+0x130>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    87a2:	69e6      	ldr	r6, [r4, #28]
    87a4:	6a23      	ldr	r3, [r4, #32]
    87a6:	199b      	adds	r3, r3, r6
	if ((ticker->remainder_current < BIT(31)) &&
    87a8:	4eb8      	ldr	r6, [pc, #736]	; (8a8c <ticker_job+0x458>)
    87aa:	199e      	adds	r6, r3, r6
    87ac:	428e      	cmp	r6, r1
    87ae:	d90a      	bls.n	87c6 <ticker_job+0x192>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    87b0:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    87b2:	2300      	movs	r3, #0
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire += ticker->ticks_periodic +
    87b4:	4463      	add	r3, ip
					   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
    87b6:	3201      	adds	r2, #1
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire += ticker->ticks_periodic +
    87b8:	18c0      	adds	r0, r0, r3
					   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
    87ba:	8362      	strh	r2, [r4, #26]
			ticks_to_expire -= ticker->ticks_periodic +
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
    87bc:	8b62      	ldrh	r2, [r4, #26]
    87be:	89ab      	ldrh	r3, [r5, #12]
    87c0:	429a      	cmp	r2, r3
    87c2:	d3ee      	bcc.n	87a2 <ticker_job+0x16e>
    87c4:	e004      	b.n	87d0 <ticker_job+0x19c>
static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    87c6:	4eb3      	ldr	r6, [pc, #716]	; (8a94 <ticker_job+0x460>)
    87c8:	199b      	adds	r3, r3, r6
    87ca:	6223      	str	r3, [r4, #32]
		return 1;
    87cc:	2301      	movs	r3, #1
    87ce:	e7f1      	b.n	87b4 <ticker_job+0x180>
			ticks_to_expire += ticker->ticks_periodic +
					   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
    87d0:	8323      	strh	r3, [r4, #24]
	}

	ticker->ticks_to_expire = ticks_to_expire +
    87d2:	88ab      	ldrh	r3, [r5, #4]
				  user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    87d4:	8aa2      	ldrh	r2, [r4, #20]
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire = ticks_to_expire +
    87d6:	1818      	adds	r0, r3, r0
    87d8:	60a0      	str	r0, [r4, #8]
				  user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    87da:	88eb      	ldrh	r3, [r5, #6]
				user_op->params.update.ticks_drift_minus;

	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    87dc:	9909      	ldr	r1, [sp, #36]	; 0x24
		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire = ticks_to_expire +
				  user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    87de:	18d3      	adds	r3, r2, r3
    87e0:	82a3      	strh	r3, [r4, #20]
				user_op->params.update.ticks_drift_minus;

	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    87e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    87e4:	0020      	movs	r0, r4
    87e6:	f7ff fdbf 	bl	8368 <ticks_to_expire_prep>

	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    87ea:	8ae2      	ldrh	r2, [r4, #22]
    87ec:	892b      	ldrh	r3, [r5, #8]
    87ee:	18d3      	adds	r3, r2, r3
    87f0:	b29b      	uxth	r3, r3
    87f2:	82e3      	strh	r3, [r4, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    87f4:	896a      	ldrh	r2, [r5, #10]
    87f6:	4293      	cmp	r3, r2
    87f8:	d901      	bls.n	87fe <ticker_job+0x1ca>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    87fa:	1a9b      	subs	r3, r3, r2
    87fc:	e000      	b.n	8800 <ticker_job+0x1cc>
	} else {
		ticker->ticks_slot = 0;
    87fe:	2300      	movs	r3, #0
    8800:	82e3      	strh	r3, [r4, #22]
	}

	if (user_op->params.update.force != 0) {
    8802:	7bab      	ldrb	r3, [r5, #14]
    8804:	2b00      	cmp	r3, #0
    8806:	d000      	beq.n	880a <ticker_job+0x1d6>
		ticker->force = user_op->params.update.force;
    8808:	70e3      	strb	r3, [r4, #3]
	}

	ticker->next = *insert_head;
    880a:	466b      	mov	r3, sp
    880c:	7b1b      	ldrb	r3, [r3, #12]
    880e:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
    8810:	786b      	ldrb	r3, [r5, #1]
    8812:	9303      	str	r3, [sp, #12]
				       ticks_elapsed, insert_head);

		/* set schedule status of node
		 * as updating.
		 */
		ticker->req++;
    8814:	7863      	ldrb	r3, [r4, #1]
    8816:	3301      	adds	r3, #1
    8818:	7063      	strb	r3, [r4, #1]
    881a:	e009      	b.n	8830 <ticker_job+0x1fc>
	} else {
		/* reset schedule status of node */
		ticker->req = ticker->ack;
    881c:	78a3      	ldrb	r3, [r4, #2]
    881e:	7063      	strb	r3, [r4, #1]

		if (instance->ticker_id_slot_previous == user_op->id) {
    8820:	7e7a      	ldrb	r2, [r7, #25]
    8822:	786b      	ldrb	r3, [r5, #1]
    8824:	429a      	cmp	r2, r3
    8826:	d103      	bne.n	8830 <ticker_job+0x1fc>
			instance->ticker_id_slot_previous = TICKER_NULL;
    8828:	23ff      	movs	r3, #255	; 0xff
    882a:	767b      	strb	r3, [r7, #25]
			instance->ticks_slot_previous = 0;
    882c:	2300      	movs	r3, #0
    882e:	837b      	strh	r3, [r7, #26]
	}

	/* op success, @todo update may fail during
	 * actual insert! need to design that yet.
	 */
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    8830:	2100      	movs	r1, #0
    8832:	0028      	movs	r0, r5
    8834:	f7ff fdb7 	bl	83a6 <ticker_job_op_cb>
    8838:	e73a      	b.n	86b0 <ticker_job+0x7c>
				/* update on expired node requested, deferi
				 * update until bottom half finishes.
				 */
				/* sched job to run after worker bottom half.
				 */
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
    883a:	2102      	movs	r1, #2
    883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    883e:	2201      	movs	r2, #1
    8840:	0008      	movs	r0, r1
    8842:	4798      	blx	r3

				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;
    8844:	9b05      	ldr	r3, [sp, #20]
    8846:	709e      	strb	r6, [r3, #2]

				pending = 1;
    8848:	2301      	movs	r3, #1
    884a:	930e      	str	r3, [sp, #56]	; 0x38
    884c:	9b06      	ldr	r3, [sp, #24]
    884e:	3b01      	subs	r3, #1
    8850:	b2db      	uxtb	r3, r3
    8852:	9306      	str	r3, [sp, #24]
    8854:	e721      	b.n	869a <ticker_job+0x66>

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;

	/* Initialise flag used to update next compare value */
	flag_compare_update = 0;
    8856:	7e3b      	ldrb	r3, [r7, #24]
    8858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    885a:	1a9b      	subs	r3, r3, r2
    885c:	1e5a      	subs	r2, r3, #1
    885e:	4193      	sbcs	r3, r2
    8860:	b2db      	uxtb	r3, r3
    8862:	930d      	str	r3, [sp, #52]	; 0x34
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    8864:	9b07      	ldr	r3, [sp, #28]
    8866:	2b00      	cmp	r3, #0
    8868:	d068      	beq.n	893c <ticker_job+0x308>
					u8_t *insert_head)
{
	struct ticker_node *node;
	u32_t ticks_expired;

	node = &instance->node[0];
    886a:	683b      	ldr	r3, [r7, #0]
    886c:	9307      	str	r3, [sp, #28]
	ticks_expired = 0;
    886e:	2300      	movs	r3, #0
    8870:	9305      	str	r3, [sp, #20]

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
			instance->ticks_slot_previous -= ticks_to_expire;
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    8872:	9b06      	ldr	r3, [sp, #24]
    8874:	9309      	str	r3, [sp, #36]	; 0x24
	struct ticker_node *node;
	u32_t ticks_expired;

	node = &instance->node[0];
	ticks_expired = 0;
	while (instance->ticker_id_head != TICKER_NULL) {
    8876:	7e3e      	ldrb	r6, [r7, #24]
    8878:	2eff      	cmp	r6, #255	; 0xff
    887a:	d059      	beq.n	8930 <ticker_job+0x2fc>
		u32_t ticks_to_expire;
		u8_t id_expired;

		/* auto variable for current ticker node */
		id_expired = instance->ticker_id_head;
		ticker = &node[id_expired];
    887c:	2424      	movs	r4, #36	; 0x24
    887e:	4374      	muls	r4, r6
    8880:	9b07      	ldr	r3, [sp, #28]
    8882:	191c      	adds	r4, r3, r4

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    8884:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    8886:	9b04      	ldr	r3, [sp, #16]
    8888:	429d      	cmp	r5, r3
    888a:	d902      	bls.n	8892 <ticker_job+0x25e>
			ticker->ticks_to_expire -= ticks_elapsed;
    888c:	1aed      	subs	r5, r5, r3
    888e:	60a5      	str	r5, [r4, #8]
    8890:	e04e      	b.n	8930 <ticker_job+0x2fc>
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;
    8892:	9b05      	ldr	r3, [sp, #20]
    8894:	195b      	adds	r3, r3, r5
    8896:	9305      	str	r3, [sp, #20]

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
    8898:	8b7b      	ldrh	r3, [r7, #26]
    889a:	429d      	cmp	r5, r3
    889c:	d201      	bcs.n	88a2 <ticker_job+0x26e>
			instance->ticks_slot_previous -= ticks_to_expire;
    889e:	1b5b      	subs	r3, r3, r5
    88a0:	e005      	b.n	88ae <ticker_job+0x27a>
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    88a2:	466b      	mov	r3, sp
    88a4:	2224      	movs	r2, #36	; 0x24
    88a6:	189b      	adds	r3, r3, r2
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	767b      	strb	r3, [r7, #25]
			instance->ticks_slot_previous = 0;
    88ac:	2300      	movs	r3, #0
    88ae:	837b      	strh	r3, [r7, #26]
		}

		/* save current ticks_slot_previous */
		if (ticker->ticks_slot != 0) {
    88b0:	8ae3      	ldrh	r3, [r4, #22]
    88b2:	2b00      	cmp	r3, #0
    88b4:	d002      	beq.n	88bc <ticker_job+0x288>
			instance->ticker_id_slot_previous = id_expired;
    88b6:	767e      	strb	r6, [r7, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
    88b8:	8ae3      	ldrh	r3, [r4, #22]
    88ba:	837b      	strh	r3, [r7, #26]
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    88bc:	2200      	movs	r2, #0

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    88be:	7823      	ldrb	r3, [r4, #0]
			instance->ticker_id_slot_previous = id_expired;
			instance->ticks_slot_previous = ticker->ticks_slot;
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    88c0:	60a2      	str	r2, [r4, #8]

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    88c2:	763b      	strb	r3, [r7, #24]

		/* ticker will be restarted if periodic */
		if (ticker->ticks_periodic != 0) {
    88c4:	6860      	ldr	r0, [r4, #4]
    88c6:	4290      	cmp	r0, r2
    88c8:	d02a      	beq.n	8920 <ticker_job+0x2ec>
    88ca:	8b23      	ldrh	r3, [r4, #24]
    88cc:	9306      	str	r3, [sp, #24]
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
    88ce:	4b6e      	ldr	r3, [pc, #440]	; (8a88 <ticker_job+0x454>)
    88d0:	469c      	mov	ip, r3
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    88d2:	69e1      	ldr	r1, [r4, #28]
    88d4:	6a23      	ldr	r3, [r4, #32]
    88d6:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    88d8:	496c      	ldr	r1, [pc, #432]	; (8a8c <ticker_job+0x458>)
    88da:	1859      	adds	r1, r3, r1
    88dc:	4561      	cmp	r1, ip
    88de:	d902      	bls.n	88e6 <ticker_job+0x2b2>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    88e0:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    88e2:	2300      	movs	r3, #0
    88e4:	e003      	b.n	88ee <ticker_job+0x2ba>
static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    88e6:	496b      	ldr	r1, [pc, #428]	; (8a94 <ticker_job+0x460>)
    88e8:	185b      	adds	r3, r3, r1
    88ea:	6223      	str	r3, [r4, #32]
		return 1;
    88ec:	2301      	movs	r3, #1
			/* Prepare for next interval */
			ticks_to_expire = 0;
			count = 1 + ticker->lazy_periodic;
			while (count--) {
				ticks_to_expire += ticker->ticks_periodic;
				ticks_to_expire += ticker_remainder_inc(ticker);
    88ee:	181b      	adds	r3, r3, r0
    88f0:	18d2      	adds	r2, r2, r3
			u32_t count;

			/* Prepare for next interval */
			ticks_to_expire = 0;
			count = 1 + ticker->lazy_periodic;
			while (count--) {
    88f2:	9b06      	ldr	r3, [sp, #24]
    88f4:	3b01      	subs	r3, #1
    88f6:	9306      	str	r3, [sp, #24]
    88f8:	d2eb      	bcs.n	88d2 <ticker_job+0x29e>
				ticks_to_expire += ticker->ticks_periodic;
				ticks_to_expire += ticker_remainder_inc(ticker);
			}
			ticker->ticks_to_expire = ticks_to_expire;
			ticks_to_expire_prep(ticker, instance->ticks_current,
    88fa:	9b08      	ldr	r3, [sp, #32]
			count = 1 + ticker->lazy_periodic;
			while (count--) {
				ticks_to_expire += ticker->ticks_periodic;
				ticks_to_expire += ticker_remainder_inc(ticker);
			}
			ticker->ticks_to_expire = ticks_to_expire;
    88fc:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    88fe:	9a05      	ldr	r2, [sp, #20]
    8900:	6979      	ldr	r1, [r7, #20]
    8902:	189a      	adds	r2, r3, r2
    8904:	0020      	movs	r0, r4
    8906:	f7ff fd2f 	bl	8368 <ticks_to_expire_prep>
					     (ticks_previous + ticks_expired));
			ticker->lazy_current = ticker->lazy_periodic;
    890a:	8b23      	ldrh	r3, [r4, #24]
    890c:	8363      	strh	r3, [r4, #26]
			ticker->force = 0;
    890e:	2300      	movs	r3, #0
    8910:	70e3      	strb	r3, [r4, #3]

			/* Add to insert list */
			ticker->next = *insert_head;
    8912:	466b      	mov	r3, sp
    8914:	7b1b      	ldrb	r3, [r3, #12]
    8916:	7023      	strb	r3, [r4, #0]
			*insert_head = id_expired;

			/* set schedule status of node as restarting. */
			ticker->req++;
    8918:	7863      	ldrb	r3, [r4, #1]
    891a:	3301      	adds	r3, #1
    891c:	7063      	strb	r3, [r4, #1]
    891e:	e002      	b.n	8926 <ticker_job+0x2f2>
		} else {
			/* reset schedule status of node */
			ticker->req = ticker->ack;
    8920:	78a3      	ldrb	r3, [r4, #2]
    8922:	9e03      	ldr	r6, [sp, #12]
    8924:	7063      	strb	r3, [r4, #1]
			ticker->ticks_to_expire -= ticks_elapsed;
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    8926:	9b04      	ldr	r3, [sp, #16]
    8928:	9603      	str	r6, [sp, #12]
    892a:	1b5b      	subs	r3, r3, r5
    892c:	9304      	str	r3, [sp, #16]
    892e:	e7a2      	b.n	8876 <ticker_job+0x242>
	if (flag_elapsed) {
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
    8930:	7e3b      	ldrb	r3, [r7, #24]
    8932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8934:	4293      	cmp	r3, r2
    8936:	d001      	beq.n	893c <ticker_job+0x308>
			flag_compare_update = 1;
    8938:	2301      	movs	r3, #1
    893a:	930d      	str	r3, [sp, #52]	; 0x34
{
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	node = &instance->node[0];
    893c:	683b      	ldr	r3, [r7, #0]
    893e:	9310      	str	r3, [sp, #64]	; 0x40
	users = &instance->user[0];
    8940:	687b      	ldr	r3, [r7, #4]
    8942:	9314      	str	r3, [sp, #80]	; 0x50
    8944:	7a7b      	ldrb	r3, [r7, #9]
    8946:	3b01      	subs	r3, #1
    8948:	b2db      	uxtb	r3, r3
    894a:	930c      	str	r3, [sp, #48]	; 0x30
	count_user = instance->count_user;
	while (count_user--) {
    894c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    894e:	2bff      	cmp	r3, #255	; 0xff
    8950:	d100      	bne.n	8954 <ticker_job+0x320>
    8952:	e134      	b.n	8bbe <ticker_job+0x58a>
		struct ticker_user_op *user_ops;
		struct ticker_user *user;
		u8_t user_ops_first;

		user = &users[count_user];
    8954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8956:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8958:	00db      	lsls	r3, r3, #3
    895a:	18d3      	adds	r3, r2, r3
    895c:	930b      	str	r3, [sp, #44]	; 0x2c
		user_ops = (void *)&user->user_op[0];
    895e:	685b      	ldr	r3, [r3, #4]
    8960:	9315      	str	r3, [sp, #84]	; 0x54
		user_ops_first = user->first;
    8962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8964:	785b      	ldrb	r3, [r3, #1]
    8966:	9307      	str	r3, [sp, #28]
		while ((insert_head != TICKER_NULL) ||
    8968:	9b03      	ldr	r3, [sp, #12]
    896a:	2bff      	cmp	r3, #255	; 0xff
    896c:	d100      	bne.n	8970 <ticker_job+0x33c>
    896e:	e10c      	b.n	8b8a <ticker_job+0x556>
			u8_t id_insert;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    8970:	2424      	movs	r4, #36	; 0x24
    8972:	9b03      	ldr	r3, [sp, #12]
				insert_head = ticker->next;

				user_op = NULL;
    8974:	2500      	movs	r5, #0
			u8_t id_insert;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    8976:	435c      	muls	r4, r3
    8978:	9b10      	ldr	r3, [sp, #64]	; 0x40
    897a:	191c      	adds	r4, r3, r4
				insert_head = ticker->next;
    897c:	9b03      	ldr	r3, [sp, #12]
    897e:	9304      	str	r3, [sp, #16]
    8980:	7823      	ldrb	r3, [r4, #0]
    8982:	9303      	str	r3, [sp, #12]
    8984:	e017      	b.n	89b6 <ticker_job+0x382>
				       struct ticker_user_op *user_op,
				       u32_t ticks_current)
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
    8986:	68eb      	ldr	r3, [r5, #12]
					ticker_job_op_cb(user_op,
							 TICKER_STATUS_FAILURE);
					continue;
				}

				ticker_job_op_start(ticker, user_op,
    8988:	6979      	ldr	r1, [r7, #20]
				       struct ticker_user_op *user_op,
				       u32_t ticks_current)
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
    898a:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    898c:	692b      	ldr	r3, [r5, #16]
	ticker->ticks_slot = start->ticks_slot;
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    898e:	686a      	ldr	r2, [r5, #4]
				       u32_t ticks_current)
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
	ticker->remainder_periodic = start->remainder_periodic;
    8990:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
    8992:	8aab      	ldrh	r3, [r5, #20]
	ticker->ticks_slot = start->ticks_slot;
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    8994:	0020      	movs	r0, r4
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
	ticker->remainder_periodic = start->remainder_periodic;
	ticker->lazy_periodic = start->lazy;
    8996:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
    8998:	8aeb      	ldrh	r3, [r5, #22]
    899a:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
    899c:	69ab      	ldr	r3, [r5, #24]
    899e:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    89a0:	69eb      	ldr	r3, [r5, #28]
    89a2:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    89a4:	68ab      	ldr	r3, [r5, #8]
	ticker->ticks_to_expire_minus = 0;
    89a6:	82a6      	strh	r6, [r4, #20]
	ticker->remainder_periodic = start->remainder_periodic;
	ticker->lazy_periodic = start->lazy;
	ticker->ticks_slot = start->ticks_slot;
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
    89a8:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    89aa:	f7ff fcdd 	bl	8368 <ticks_to_expire_prep>
	ticker->remainder_current = 0;
	ticker->lazy_current = 0;
	ticker->force = 1;
    89ae:	2301      	movs	r3, #1
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
	ticker->remainder_current = 0;
    89b0:	6226      	str	r6, [r4, #32]
	ticker->lazy_current = 0;
    89b2:	8366      	strh	r6, [r4, #26]
	ticker->force = 1;
    89b4:	70e3      	strb	r3, [r4, #3]
static inline u32_t ticker_job_insert(struct ticker_instance *instance,
				      u8_t id_insert,
				      struct ticker_node *ticker,
				      u8_t *insert_head)
{
	struct ticker_node *node = &instance->node[0];
    89b6:	683b      	ldr	r3, [r7, #0]
	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
		skip = ticker->lazy_current -
		       ticker->lazy_periodic;
	} else {
		skip = 0;
    89b8:	2100      	movs	r1, #0
static inline u32_t ticker_job_insert(struct ticker_instance *instance,
				      u8_t id_insert,
				      struct ticker_node *ticker,
				      u8_t *insert_head)
{
	struct ticker_node *node = &instance->node[0];
    89ba:	9316      	str	r3, [sp, #88]	; 0x58
	u8_t id_collide;
	u16_t skip;

	/* Prepare to insert */
	ticker->next = TICKER_NULL;
    89bc:	23ff      	movs	r3, #255	; 0xff

	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
    89be:	8b22      	ldrh	r2, [r4, #24]
	struct ticker_node *node = &instance->node[0];
	u8_t id_collide;
	u16_t skip;

	/* Prepare to insert */
	ticker->next = TICKER_NULL;
    89c0:	7023      	strb	r3, [r4, #0]

	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
    89c2:	8b63      	ldrh	r3, [r4, #26]
		skip = ticker->lazy_current -
		       ticker->lazy_periodic;
	} else {
		skip = 0;
    89c4:	9111      	str	r1, [sp, #68]	; 0x44

	/* Prepare to insert */
	ticker->next = TICKER_NULL;

	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
    89c6:	4293      	cmp	r3, r2
    89c8:	d902      	bls.n	89d0 <ticker_job+0x39c>
		skip = ticker->lazy_current -
    89ca:	1a9b      	subs	r3, r3, r2
    89cc:	b29b      	uxth	r3, r3
    89ce:	9311      	str	r3, [sp, #68]	; 0x44
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
	ticker_new = &node[id];
    89d0:	2324      	movs	r3, #36	; 0x24
    89d2:	9a04      	ldr	r2, [sp, #16]
    89d4:	4353      	muls	r3, r2
    89d6:	9317      	str	r3, [sp, #92]	; 0x5c
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
    89d8:	683b      	ldr	r3, [r7, #0]
    89da:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_new = &node[id];
    89dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    89de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    89e0:	4694      	mov	ip, r2
    89e2:	4463      	add	r3, ip
    89e4:	469c      	mov	ip, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
    89e6:	689b      	ldr	r3, [r3, #8]
    89e8:	9305      	str	r3, [sp, #20]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    89ea:	8b7a      	ldrh	r2, [r7, #26]
	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    89ec:	7e3b      	ldrb	r3, [r7, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    89ee:	9208      	str	r2, [sp, #32]

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    89f0:	22ff      	movs	r2, #255	; 0xff
	current = instance->ticker_id_head;
	previous = current;
    89f2:	930f      	str	r3, [sp, #60]	; 0x3c

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    89f4:	9206      	str	r2, [sp, #24]
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
    89f6:	2bff      	cmp	r3, #255	; 0xff
    89f8:	d01a      	beq.n	8a30 <ticker_job+0x3fc>
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))) {
    89fa:	2224      	movs	r2, #36	; 0x24
    89fc:	435a      	muls	r2, r3
    89fe:	9909      	ldr	r1, [sp, #36]	; 0x24

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
    8a00:	9805      	ldr	r0, [sp, #20]
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))) {
    8a02:	188a      	adds	r2, r1, r2
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
    8a04:	6891      	ldr	r1, [r2, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
    8a06:	4288      	cmp	r0, r1
    8a08:	d912      	bls.n	8a30 <ticker_job+0x3fc>
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))) {
		ticks_to_expire -= ticks_to_expire_current;
    8a0a:	9805      	ldr	r0, [sp, #20]
    8a0c:	1a40      	subs	r0, r0, r1
    8a0e:	9005      	str	r0, [sp, #20]

		if (ticker_current->ticks_slot != 0) {
    8a10:	8ad0      	ldrh	r0, [r2, #22]
    8a12:	2800      	cmp	r0, #0
    8a14:	d002      	beq.n	8a1c <ticker_job+0x3e8>
			ticks_slot_previous = ticker_current->ticks_slot;
    8a16:	9008      	str	r0, [sp, #32]
    8a18:	9306      	str	r3, [sp, #24]
    8a1a:	e006      	b.n	8a2a <ticker_job+0x3f6>
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    8a1c:	9e08      	ldr	r6, [sp, #32]
    8a1e:	42b1      	cmp	r1, r6
    8a20:	d202      	bcs.n	8a28 <ticker_job+0x3f4>
				ticks_slot_previous -= ticks_to_expire_current;
    8a22:	1a71      	subs	r1, r6, r1
    8a24:	9108      	str	r1, [sp, #32]
    8a26:	e000      	b.n	8a2a <ticker_job+0x3f6>
			} else {
				ticks_slot_previous = 0;
    8a28:	9008      	str	r0, [sp, #32]
			}
		}
		previous = current;
		current = ticker_current->next;
    8a2a:	930f      	str	r3, [sp, #60]	; 0x3c
    8a2c:	7813      	ldrb	r3, [r2, #0]
    8a2e:	e7e2      	b.n	89f6 <ticker_job+0x3c2>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
    8a30:	4662      	mov	r2, ip
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current,
    8a32:	9905      	ldr	r1, [sp, #20]
				     ticks_to_expire + ticker_new->ticks_slot);
    8a34:	8ad2      	ldrh	r2, [r2, #22]
    8a36:	9212      	str	r2, [sp, #72]	; 0x48
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current,
    8a38:	1850      	adds	r0, r2, r1
    8a3a:	001a      	movs	r2, r3
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    8a3c:	2aff      	cmp	r2, #255	; 0xff
    8a3e:	d00f      	beq.n	8a60 <ticker_job+0x42c>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    8a40:	2124      	movs	r1, #36	; 0x24
    8a42:	4351      	muls	r1, r2
    8a44:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8a46:	1871      	adds	r1, r6, r1
		ticks_to_expire = ticker->ticks_to_expire;
    8a48:	688e      	ldr	r6, [r1, #8]
    8a4a:	9613      	str	r6, [sp, #76]	; 0x4c

		if (ticks_slot <= ticks_to_expire) {
    8a4c:	4286      	cmp	r6, r0
    8a4e:	d206      	bcs.n	8a5e <ticker_job+0x42a>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    8a50:	8ace      	ldrh	r6, [r1, #22]
    8a52:	2e00      	cmp	r6, #0
    8a54:	d104      	bne.n	8a60 <ticker_job+0x42c>
			break;
		}

		ticks_slot -= ticks_to_expire;
    8a56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8a58:	1a80      	subs	r0, r0, r2
		ticker_id_head = ticker->next;
    8a5a:	780a      	ldrb	r2, [r1, #0]
    8a5c:	e7ee      	b.n	8a3c <ticker_job+0x408>

		ticker = &node[ticker_id_head];
		ticks_to_expire = ticker->ticks_to_expire;

		if (ticks_slot <= ticks_to_expire) {
			return TICKER_NULL;
    8a5e:	22ff      	movs	r2, #255	; 0xff
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);

	if ((ticker_new->ticks_slot == 0) ||
    8a60:	9912      	ldr	r1, [sp, #72]	; 0x48
    8a62:	2900      	cmp	r1, #0
    8a64:	d005      	beq.n	8a72 <ticker_job+0x43e>
    8a66:	9908      	ldr	r1, [sp, #32]
    8a68:	9805      	ldr	r0, [sp, #20]
    8a6a:	4288      	cmp	r0, r1
    8a6c:	d327      	bcc.n	8abe <ticker_job+0x48a>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    8a6e:	2aff      	cmp	r2, #255	; 0xff
    8a70:	d12e      	bne.n	8ad0 <ticker_job+0x49c>
	     (collide == TICKER_NULL))) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    8a72:	4662      	mov	r2, ip
    8a74:	9905      	ldr	r1, [sp, #20]
		ticker_new->next = current;
    8a76:	7013      	strb	r3, [r2, #0]
				     ticks_to_expire + ticker_new->ticks_slot);

	if ((ticker_new->ticks_slot == 0) ||
	    ((ticks_slot_previous <= ticks_to_expire) &&
	     (collide == TICKER_NULL))) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    8a78:	6091      	str	r1, [r2, #8]
		ticker_new->next = current;

		if (previous == current) {
    8a7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8a7c:	429a      	cmp	r2, r3
    8a7e:	d10b      	bne.n	8a98 <ticker_job+0x464>
			instance->ticker_id_head = id;
    8a80:	466a      	mov	r2, sp
    8a82:	7c12      	ldrb	r2, [r2, #16]
    8a84:	763a      	strb	r2, [r7, #24]
    8a86:	e00e      	b.n	8aa6 <ticker_job+0x472>
    8a88:	7f172b59 	.word	0x7f172b59
    8a8c:	ff172b5a 	.word	0xff172b5a
    8a90:	01d1a94a 	.word	0x01d1a94a
    8a94:	fe2e56b6 	.word	0xfe2e56b6
		} else {
			node[previous].next = id;
    8a98:	2124      	movs	r1, #36	; 0x24
    8a9a:	4668      	mov	r0, sp
    8a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8a9e:	7c00      	ldrb	r0, [r0, #16]
    8aa0:	434a      	muls	r2, r1
    8aa2:	9909      	ldr	r1, [sp, #36]	; 0x24
    8aa4:	5450      	strb	r0, [r2, r1]
		}

		if (current != TICKER_NULL) {
    8aa6:	2bff      	cmp	r3, #255	; 0xff
    8aa8:	d100      	bne.n	8aac <ticker_job+0x478>
    8aaa:	e14a      	b.n	8d42 <ticker_job+0x70e>
			node[current].ticks_to_expire -= ticks_to_expire;
    8aac:	2224      	movs	r2, #36	; 0x24
    8aae:	4353      	muls	r3, r2
    8ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8ab2:	9905      	ldr	r1, [sp, #20]
    8ab4:	18d3      	adds	r3, r2, r3
    8ab6:	689a      	ldr	r2, [r3, #8]
    8ab8:	1a52      	subs	r2, r2, r1
    8aba:	609a      	str	r2, [r3, #8]
    8abc:	e141      	b.n	8d42 <ticker_job+0x70e>
	} else {
		skip = 0;
	}

	/* If insert collides, remove colliding or advance to next interval */
	while (id_insert !=
    8abe:	9b04      	ldr	r3, [sp, #16]
    8ac0:	9a06      	ldr	r2, [sp, #24]
    8ac2:	4293      	cmp	r3, r2
    8ac4:	d100      	bne.n	8ac8 <ticker_job+0x494>
    8ac6:	e13c      	b.n	8d42 <ticker_job+0x70e>
	       (id_collide = ticker_enqueue(instance, id_insert))) {
		/* check for collision */
		if (id_collide != TICKER_NULL) {
    8ac8:	9b06      	ldr	r3, [sp, #24]
    8aca:	2bff      	cmp	r3, #255	; 0xff
    8acc:	d105      	bne.n	8ada <ticker_job+0x4a6>
    8ace:	e027      	b.n	8b20 <ticker_job+0x4ec>
	} else {
		skip = 0;
	}

	/* If insert collides, remove colliding or advance to next interval */
	while (id_insert !=
    8ad0:	9b04      	ldr	r3, [sp, #16]
    8ad2:	4293      	cmp	r3, r2
    8ad4:	d100      	bne.n	8ad8 <ticker_job+0x4a4>
    8ad6:	e134      	b.n	8d42 <ticker_job+0x70e>
    8ad8:	9206      	str	r2, [sp, #24]
	       (id_collide = ticker_enqueue(instance, id_insert))) {
		/* check for collision */
		if (id_collide != TICKER_NULL) {
			struct ticker_node *ticker_collide = &node[id_collide];
    8ada:	2624      	movs	r6, #36	; 0x24
    8adc:	9b06      	ldr	r3, [sp, #24]
			if (ticker_collide->lazy_current >
			    ticker_collide->lazy_periodic) {
				skip_collide = ticker_collide->lazy_current -
					       ticker_collide->lazy_periodic;
			} else {
				skip_collide = 0;
    8ade:	2200      	movs	r2, #0
	/* If insert collides, remove colliding or advance to next interval */
	while (id_insert !=
	       (id_collide = ticker_enqueue(instance, id_insert))) {
		/* check for collision */
		if (id_collide != TICKER_NULL) {
			struct ticker_node *ticker_collide = &node[id_collide];
    8ae0:	435e      	muls	r6, r3
    8ae2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8ae4:	199e      	adds	r6, r3, r6
			u16_t skip_collide;

			/* No. of times ticker colliding has skipped its
			 * interval.
			 */
			if (ticker_collide->lazy_current >
    8ae6:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
    8ae8:	8b31      	ldrh	r1, [r6, #24]
			u16_t skip_collide;

			/* No. of times ticker colliding has skipped its
			 * interval.
			 */
			if (ticker_collide->lazy_current >
    8aea:	428b      	cmp	r3, r1
    8aec:	d901      	bls.n	8af2 <ticker_job+0x4be>
			    ticker_collide->lazy_periodic) {
				skip_collide = ticker_collide->lazy_current -
    8aee:	1a5b      	subs	r3, r3, r1
    8af0:	b29a      	uxth	r2, r3
					       ticker_collide->lazy_periodic;
			} else {
				skip_collide = 0;
			}

			if (ticker_collide->ticks_periodic &&
    8af2:	6873      	ldr	r3, [r6, #4]
    8af4:	2b00      	cmp	r3, #0
    8af6:	d013      	beq.n	8b20 <ticker_job+0x4ec>
			    ticker_collide->ticks_periodic &&
    8af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8afa:	429a      	cmp	r2, r3
    8afc:	d810      	bhi.n	8b20 <ticker_job+0x4ec>
			    skip_collide <= skip &&
    8afe:	78f2      	ldrb	r2, [r6, #3]
    8b00:	78e3      	ldrb	r3, [r4, #3]
    8b02:	429a      	cmp	r2, r3
    8b04:	d20c      	bcs.n	8b20 <ticker_job+0x4ec>
			    ticker_collide->force < ticker->force) {
				/* dequeue and get the reminder of ticks
				 * to expire.
				 */
				ticker_collide->ticks_to_expire =
					ticker_dequeue(instance, id_collide);
    8b06:	9906      	ldr	r1, [sp, #24]
    8b08:	0038      	movs	r0, r7
    8b0a:	f7ff fc05 	bl	8318 <ticker_dequeue>

				/* unschedule node */
				ticker_collide->req = ticker_collide->ack;
    8b0e:	78b3      	ldrb	r3, [r6, #2]
			    skip_collide <= skip &&
			    ticker_collide->force < ticker->force) {
				/* dequeue and get the reminder of ticks
				 * to expire.
				 */
				ticker_collide->ticks_to_expire =
    8b10:	60b0      	str	r0, [r6, #8]
					ticker_dequeue(instance, id_collide);

				/* unschedule node */
				ticker_collide->req = ticker_collide->ack;
    8b12:	7073      	strb	r3, [r6, #1]

				/* enqueue for re-insertion */
				ticker_collide->next = *insert_head;
    8b14:	466b      	mov	r3, sp
    8b16:	7b1b      	ldrb	r3, [r3, #12]
    8b18:	7033      	strb	r3, [r6, #0]
    8b1a:	9b06      	ldr	r3, [sp, #24]
    8b1c:	9303      	str	r3, [sp, #12]
    8b1e:	e75b      	b.n	89d8 <ticker_job+0x3a4>
				continue;
			}
		}

		/* occupied, try next interval */
		if (ticker->ticks_periodic != 0) {
    8b20:	6862      	ldr	r2, [r4, #4]
    8b22:	2a00      	cmp	r2, #0
    8b24:	d016      	beq.n	8b54 <ticker_job+0x520>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    8b26:	69e1      	ldr	r1, [r4, #28]
    8b28:	6a23      	ldr	r3, [r4, #32]
    8b2a:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    8b2c:	498a      	ldr	r1, [pc, #552]	; (8d58 <ticker_job+0x724>)
    8b2e:	1858      	adds	r0, r3, r1
    8b30:	498a      	ldr	r1, [pc, #552]	; (8d5c <ticker_job+0x728>)
    8b32:	4288      	cmp	r0, r1
    8b34:	d902      	bls.n	8b3c <ticker_job+0x508>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    8b36:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    8b38:	2300      	movs	r3, #0
    8b3a:	e003      	b.n	8b44 <ticker_job+0x510>
static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    8b3c:	4988      	ldr	r1, [pc, #544]	; (8d60 <ticker_job+0x72c>)
    8b3e:	185b      	adds	r3, r3, r1
    8b40:	6223      	str	r3, [r4, #32]
		return 1;
    8b42:	2301      	movs	r3, #1
			}
		}

		/* occupied, try next interval */
		if (ticker->ticks_periodic != 0) {
			ticker->ticks_to_expire += ticker->ticks_periodic +
    8b44:	68a1      	ldr	r1, [r4, #8]
    8b46:	1852      	adds	r2, r2, r1
    8b48:	18d3      	adds	r3, r2, r3
    8b4a:	60a3      	str	r3, [r4, #8]
						   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
    8b4c:	8b63      	ldrh	r3, [r4, #26]
    8b4e:	3301      	adds	r3, #1
    8b50:	8363      	strh	r3, [r4, #26]
    8b52:	e741      	b.n	89d8 <ticker_job+0x3a4>
		} else {
			return TICKER_STATUS_FAILURE;
    8b54:	2101      	movs	r1, #1
			}

			status = ticker_job_insert(instance, id_insert, ticker,
						   &insert_head);

			if (user_op) {
    8b56:	2d00      	cmp	r5, #0
    8b58:	d100      	bne.n	8b5c <ticker_job+0x528>
    8b5a:	e705      	b.n	8968 <ticker_job+0x334>
				ticker_job_op_cb(user_op, status);
    8b5c:	0028      	movs	r0, r5
    8b5e:	f7ff fc22 	bl	83a6 <ticker_job_op_cb>
    8b62:	e701      	b.n	8968 <ticker_job+0x334>

				user_op = NULL;
			} else {
				u8_t first;

				user_op = &user_ops[user_ops_first];
    8b64:	252c      	movs	r5, #44	; 0x2c
    8b66:	9b07      	ldr	r3, [sp, #28]
    8b68:	435d      	muls	r5, r3
    8b6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8b6c:	195d      	adds	r5, r3, r5
				first = user_ops_first + 1;
    8b6e:	9b07      	ldr	r3, [sp, #28]
    8b70:	3301      	adds	r3, #1
    8b72:	b2db      	uxtb	r3, r3
    8b74:	9307      	str	r3, [sp, #28]
				if (first == user->count_user_op) {
    8b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b78:	9a07      	ldr	r2, [sp, #28]
    8b7a:	781b      	ldrb	r3, [r3, #0]
    8b7c:	4293      	cmp	r3, r2
    8b7e:	d101      	bne.n	8b84 <ticker_job+0x550>
					first = 0;
    8b80:	2300      	movs	r3, #0
    8b82:	9307      	str	r3, [sp, #28]
				}
				user_ops_first = first;

				id_insert = user_op->id;
				ticker = &node[id_insert];
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    8b84:	782b      	ldrb	r3, [r5, #0]
    8b86:	2b03      	cmp	r3, #3
    8b88:	d005      	beq.n	8b96 <ticker_job+0x562>
		u8_t user_ops_first;

		user = &users[count_user];
		user_ops = (void *)&user->user_op[0];
		user_ops_first = user->first;
		while ((insert_head != TICKER_NULL) ||
    8b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b8c:	9a07      	ldr	r2, [sp, #28]
    8b8e:	789b      	ldrb	r3, [r3, #2]
    8b90:	4293      	cmp	r3, r2
    8b92:	d1e7      	bne.n	8b64 <ticker_job+0x530>
    8b94:	e011      	b.n	8bba <ticker_job+0x586>
					first = 0;
				}
				user_ops_first = first;

				id_insert = user_op->id;
				ticker = &node[id_insert];
    8b96:	2424      	movs	r4, #36	; 0x24
				if (first == user->count_user_op) {
					first = 0;
				}
				user_ops_first = first;

				id_insert = user_op->id;
    8b98:	786b      	ldrb	r3, [r5, #1]
				ticker = &node[id_insert];
    8b9a:	435c      	muls	r4, r3
				if (first == user->count_user_op) {
					first = 0;
				}
				user_ops_first = first;

				id_insert = user_op->id;
    8b9c:	9304      	str	r3, [sp, #16]
				ticker = &node[id_insert];
    8b9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8ba0:	191c      	adds	r4, r3, r4
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    8ba2:	7863      	ldrb	r3, [r4, #1]
    8ba4:	78a6      	ldrb	r6, [r4, #2]
    8ba6:	1b9e      	subs	r6, r3, r6
    8ba8:	b2f6      	uxtb	r6, r6
    8baa:	2e00      	cmp	r6, #0
    8bac:	d100      	bne.n	8bb0 <ticker_job+0x57c>
    8bae:	e6ea      	b.n	8986 <ticker_job+0x352>
					ticker_job_op_cb(user_op,
    8bb0:	2101      	movs	r1, #1
    8bb2:	0028      	movs	r0, r5
    8bb4:	f7ff fbf7 	bl	83a6 <ticker_job_op_cb>
    8bb8:	e7e7      	b.n	8b8a <ticker_job+0x556>
    8bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8bbc:	e6c3      	b.n	8946 <ticker_job+0x312>

	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    8bbe:	7e3b      	ldrb	r3, [r7, #24]
    8bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8bc2:	4293      	cmp	r3, r2
    8bc4:	d103      	bne.n	8bce <ticker_job+0x59a>
		flag_compare_update = 1;
	}

	/* Processing any list inquiries */
	if (!pending) {
    8bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bc8:	2b00      	cmp	r3, #0
    8bca:	d163      	bne.n	8c94 <ticker_job+0x660>
    8bcc:	e005      	b.n	8bda <ticker_job+0x5a6>
    8bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8bd0:	2b00      	cmp	r3, #0
    8bd2:	d000      	beq.n	8bd6 <ticker_job+0x5a2>
    8bd4:	e0ba      	b.n	8d4c <ticker_job+0x718>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
    8bd6:	2301      	movs	r3, #1
    8bd8:	930d      	str	r3, [sp, #52]	; 0x34
static inline void ticker_job_list_inquire(struct ticker_instance *instance)
{
	struct ticker_user *users;
	u8_t count_user;

	users = &instance->user[0];
    8bda:	687b      	ldr	r3, [r7, #4]
    8bdc:	9306      	str	r3, [sp, #24]
    8bde:	7a7b      	ldrb	r3, [r7, #9]
    8be0:	3b01      	subs	r3, #1
    8be2:	b2dd      	uxtb	r5, r3
	count_user = instance->count_user;
	while (count_user--) {
    8be4:	2dff      	cmp	r5, #255	; 0xff
    8be6:	d055      	beq.n	8c94 <ticker_job+0x660>
		struct ticker_user_op *user_op;
		struct ticker_user *user;

		user = &users[count_user];
    8be8:	9b06      	ldr	r3, [sp, #24]
    8bea:	00ec      	lsls	r4, r5, #3
    8bec:	191c      	adds	r4, r3, r4
		user_op = &user->user_op[0];
    8bee:	6863      	ldr	r3, [r4, #4]
    8bf0:	9307      	str	r3, [sp, #28]
		while (user->first != user->last) {
    8bf2:	7863      	ldrb	r3, [r4, #1]
    8bf4:	78e2      	ldrb	r2, [r4, #3]
    8bf6:	429a      	cmp	r2, r3
    8bf8:	d04a      	beq.n	8c90 <ticker_job+0x65c>
			u8_t first;

			ticker_job_op_inquire(instance, &user_op[user->first]);
    8bfa:	222c      	movs	r2, #44	; 0x2c
    8bfc:	4353      	muls	r3, r2
    8bfe:	9a07      	ldr	r2, [sp, #28]
    8c00:	18d3      	adds	r3, r2, r3
					 struct ticker_user_op *uop)
{
	ticker_op_func fp_op_func;

	fp_op_func = NULL;
	switch (uop->op) {
    8c02:	781a      	ldrb	r2, [r3, #0]
    8c04:	2a01      	cmp	r2, #1
    8c06:	d033      	beq.n	8c70 <ticker_job+0x63c>
    8c08:	2a02      	cmp	r2, #2
    8c0a:	d138      	bne.n	8c7e <ticker_job+0x64a>
	case TICKER_USER_OP_TYPE_SLOT_GET:
		ticker_by_next_slot_get(instance,
    8c0c:	68d9      	ldr	r1, [r3, #12]
    8c0e:	685a      	ldr	r2, [r3, #4]
    8c10:	9104      	str	r1, [sp, #16]
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
    8c12:	6839      	ldr	r1, [r7, #0]
	ticker_op_func fp_op_func;

	fp_op_func = NULL;
	switch (uop->op) {
	case TICKER_USER_OP_TYPE_SLOT_GET:
		ticker_by_next_slot_get(instance,
    8c14:	9203      	str	r2, [sp, #12]
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
    8c16:	468c      	mov	ip, r1

	_ticker_id_head = *ticker_id_head;
    8c18:	9903      	ldr	r1, [sp, #12]
	ticker_op_func fp_op_func;

	fp_op_func = NULL;
	switch (uop->op) {
	case TICKER_USER_OP_TYPE_SLOT_GET:
		ticker_by_next_slot_get(instance,
    8c1a:	689a      	ldr	r2, [r3, #8]
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
    8c1c:	7809      	ldrb	r1, [r1, #0]
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL) ||
    8c1e:	29ff      	cmp	r1, #255	; 0xff
    8c20:	d004      	beq.n	8c2c <ticker_job+0x5f8>
    8c22:	6810      	ldr	r0, [r2, #0]
    8c24:	0006      	movs	r6, r0
    8c26:	6978      	ldr	r0, [r7, #20]
    8c28:	4286      	cmp	r6, r0
    8c2a:	d004      	beq.n	8c36 <ticker_job+0x602>
	    (*ticks_current != instance->ticks_current)) {
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
    8c2c:	6978      	ldr	r0, [r7, #20]

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL) ||
	    (*ticks_current != instance->ticks_current)) {
		_ticker_id_head = instance->ticker_id_head;
    8c2e:	7e39      	ldrb	r1, [r7, #24]
		*ticks_current = instance->ticks_current;
    8c30:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0;
    8c32:	2200      	movs	r2, #0
    8c34:	e013      	b.n	8c5e <ticker_job+0x62a>
	} else {
		ticker = &node[_ticker_id_head];
    8c36:	2024      	movs	r0, #36	; 0x24
    8c38:	4341      	muls	r1, r0
		_ticker_id_head = ticker->next;
    8c3a:	4660      	mov	r0, ip
	u8_t _ticker_id_head;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    8c3c:	9a04      	ldr	r2, [sp, #16]
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
		_ticks_to_expire = 0;
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
    8c3e:	5c41      	ldrb	r1, [r0, r1]
	u8_t _ticker_id_head;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    8c40:	6812      	ldr	r2, [r2, #0]
    8c42:	e00c      	b.n	8c5e <ticker_job+0x62a>
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    8c44:	2024      	movs	r0, #36	; 0x24
    8c46:	4348      	muls	r0, r1
    8c48:	4460      	add	r0, ip
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL) &&
    8c4a:	8ac6      	ldrh	r6, [r0, #22]
    8c4c:	9608      	str	r6, [sp, #32]
    8c4e:	6886      	ldr	r6, [r0, #8]
    8c50:	9605      	str	r6, [sp, #20]
    8c52:	9e08      	ldr	r6, [sp, #32]
    8c54:	2e00      	cmp	r6, #0
    8c56:	d105      	bne.n	8c64 <ticker_job+0x630>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
    8c58:	9905      	ldr	r1, [sp, #20]
    8c5a:	1852      	adds	r2, r2, r1
		_ticker_id_head = ticker->next;
    8c5c:	7801      	ldrb	r1, [r0, #0]
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL) &&
    8c5e:	29ff      	cmp	r1, #255	; 0xff
    8c60:	d1f0      	bne.n	8c44 <ticker_job+0x610>
    8c62:	e001      	b.n	8c68 <ticker_job+0x634>
		_ticks_to_expire += ticker->ticks_to_expire;
		_ticker_id_head = ticker->next;
	}

	if (_ticker_id_head != TICKER_NULL) {
		_ticks_to_expire += ticker->ticks_to_expire;
    8c64:	9805      	ldr	r0, [sp, #20]
    8c66:	1812      	adds	r2, r2, r0
	}

	*ticker_id_head = _ticker_id_head;
    8c68:	9803      	ldr	r0, [sp, #12]
    8c6a:	7001      	strb	r1, [r0, #0]
	*ticks_to_expire = _ticks_to_expire;
    8c6c:	9904      	ldr	r1, [sp, #16]
    8c6e:	600a      	str	r2, [r1, #0]
					uop->params.slot_get.ticks_current,
					uop->params.slot_get.ticks_to_expire);
		/* Fall-through */

	case TICKER_USER_OP_TYPE_IDLE_GET:
		uop->status = TICKER_STATUS_SUCCESS;
    8c70:	2000      	movs	r0, #0
		fp_op_func = uop->fp_op_func;
    8c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
					uop->params.slot_get.ticks_current,
					uop->params.slot_get.ticks_to_expire);
		/* Fall-through */

	case TICKER_USER_OP_TYPE_IDLE_GET:
		uop->status = TICKER_STATUS_SUCCESS;
    8c74:	6218      	str	r0, [r3, #32]
	default:
		/* do nothing for other ops */
		break;
	}

	if (fp_op_func) {
    8c76:	4282      	cmp	r2, r0
    8c78:	d001      	beq.n	8c7e <ticker_job+0x64a>
		fp_op_func(uop->status, uop->op_context);
    8c7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    8c7c:	4790      	blx	r2
		while (user->first != user->last) {
			u8_t first;

			ticker_job_op_inquire(instance, &user_op[user->first]);

			first = user->first + 1;
    8c7e:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    8c80:	7822      	ldrb	r2, [r4, #0]
		while (user->first != user->last) {
			u8_t first;

			ticker_job_op_inquire(instance, &user_op[user->first]);

			first = user->first + 1;
    8c82:	3301      	adds	r3, #1
    8c84:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
    8c86:	429a      	cmp	r2, r3
    8c88:	d100      	bne.n	8c8c <ticker_job+0x658>
				first = 0;
    8c8a:	2300      	movs	r3, #0
			}
			user->first = first;
    8c8c:	7063      	strb	r3, [r4, #1]
    8c8e:	e7b0      	b.n	8bf2 <ticker_job+0x5be>
    8c90:	1e6b      	subs	r3, r5, #1
    8c92:	e7a6      	b.n	8be2 <ticker_job+0x5ae>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    8c94:	2300      	movs	r3, #0
    8c96:	773b      	strb	r3, [r7, #28]

	/* update compare if head changed */
	if (flag_compare_update) {
    8c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c9a:	2b00      	cmp	r3, #0
    8c9c:	d048      	beq.n	8d30 <ticker_job+0x6fc>
	u32_t ctr_post;
	u32_t ctr;
	u32_t cc;
	u32_t i;

	if (instance->ticker_id_head == TICKER_NULL) {
    8c9e:	7e3b      	ldrb	r3, [r7, #24]
    8ca0:	2bff      	cmp	r3, #255	; 0xff
    8ca2:	d105      	bne.n	8cb0 <ticker_job+0x67c>
		if (cntr_stop() == 0) {
    8ca4:	f7fe fe96 	bl	79d4 <cntr_stop>
    8ca8:	2800      	cmp	r0, #0
    8caa:	d141      	bne.n	8d30 <ticker_job+0x6fc>
			instance->ticks_slot_previous = 0;
    8cac:	8378      	strh	r0, [r7, #26]
    8cae:	e03f      	b.n	8d30 <ticker_job+0x6fc>
		}

		return;
	}

	if (ticker_id_old_head == TICKER_NULL) {
    8cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cb2:	2bff      	cmp	r3, #255	; 0xff
    8cb4:	d107      	bne.n	8cc6 <ticker_job+0x692>
		u32_t ticks_current;

		ticks_current = cntr_cnt_get();
    8cb6:	f7fe feb9 	bl	7a2c <cntr_cnt_get>
    8cba:	0004      	movs	r4, r0

		if (cntr_start() == 0) {
    8cbc:	f7fe fe7a 	bl	79b4 <cntr_start>
    8cc0:	2800      	cmp	r0, #0
    8cc2:	d100      	bne.n	8cc6 <ticker_job+0x692>
			instance->ticks_current = ticks_current;
    8cc4:	617c      	str	r4, [r7, #20]
		}
	}

	ticker = &instance->node[instance->ticker_id_head];
	ticks_to_expire = ticker->ticks_to_expire;
    8cc6:	2324      	movs	r3, #36	; 0x24
    8cc8:	260a      	movs	r6, #10
    8cca:	7e3a      	ldrb	r2, [r7, #24]
    8ccc:	4353      	muls	r3, r2
    8cce:	683a      	ldr	r2, [r7, #0]
    8cd0:	18d3      	adds	r3, r2, r3
    8cd2:	689b      	ldr	r3, [r3, #8]
    8cd4:	9303      	str	r3, [sp, #12]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    8cd6:	f7fe fea9 	bl	7a2c <cntr_cnt_get>
		cc = instance->ticks_current;
    8cda:	697a      	ldr	r2, [r7, #20]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    8cdc:	0005      	movs	r5, r0
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
		       ticks_to_expire : ticks_elapsed);
    8cde:	1a83      	subs	r3, r0, r2
    8ce0:	021b      	lsls	r3, r3, #8
    8ce2:	0a1b      	lsrs	r3, r3, #8
    8ce4:	1cdc      	adds	r4, r3, #3
    8ce6:	9b03      	ldr	r3, [sp, #12]
    8ce8:	429c      	cmp	r4, r3
    8cea:	d200      	bcs.n	8cee <ticker_job+0x6ba>
    8cec:	001c      	movs	r4, r3

		ctr = cntr_cnt_get();
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
    8cee:	1914      	adds	r4, r2, r4
		       ticks_to_expire : ticks_elapsed);
		cc &= 0x00FFFFFF;
    8cf0:	0224      	lsls	r4, r4, #8
    8cf2:	0a24      	lsrs	r4, r4, #8

		instance->fp_cmp_set(cc);
    8cf4:	0020      	movs	r0, r4
    8cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8cf8:	4798      	blx	r3

		ctr_post = cntr_cnt_get();
    8cfa:	f7fe fe97 	bl	7a2c <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    8cfe:	1b40      	subs	r0, r0, r5
    8d00:	0200      	lsls	r0, r0, #8
    8d02:	0a00      	lsrs	r0, r0, #8
    8d04:	1b64      	subs	r4, r4, r5
    8d06:	0224      	lsls	r4, r4, #8
    8d08:	3003      	adds	r0, #3
    8d0a:	0a24      	lsrs	r4, r4, #8
    8d0c:	42a0      	cmp	r0, r4
    8d0e:	d90f      	bls.n	8d30 <ticker_job+0x6fc>
    8d10:	3e01      	subs	r6, #1
	 */
	i = 10;
	do {
		u32_t ticks_elapsed;

		LL_ASSERT(i);
    8d12:	2e00      	cmp	r6, #0
    8d14:	d1df      	bne.n	8cd6 <ticker_job+0x6a2>
    8d16:	4b13      	ldr	r3, [pc, #76]	; (8d64 <ticker_job+0x730>)
    8d18:	4a13      	ldr	r2, [pc, #76]	; (8d68 <ticker_job+0x734>)
    8d1a:	9301      	str	r3, [sp, #4]
    8d1c:	4b13      	ldr	r3, [pc, #76]	; (8d6c <ticker_job+0x738>)
    8d1e:	4914      	ldr	r1, [pc, #80]	; (8d70 <ticker_job+0x73c>)
    8d20:	9300      	str	r3, [sp, #0]
    8d22:	4814      	ldr	r0, [pc, #80]	; (8d74 <ticker_job+0x740>)
    8d24:	4b14      	ldr	r3, [pc, #80]	; (8d78 <ticker_job+0x744>)
    8d26:	f7f8 fdb5 	bl	1894 <printk>
    8d2a:	b662      	cpsie	i
    8d2c:	2004      	movs	r0, #4
    8d2e:	df02      	svc	2
	if (flag_compare_update) {
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    8d30:	7f7b      	ldrb	r3, [r7, #29]
    8d32:	2b00      	cmp	r3, #0
    8d34:	d00d      	beq.n	8d52 <ticker_job+0x71e>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
    8d36:	2201      	movs	r2, #1
    8d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d3a:	0011      	movs	r1, r2
    8d3c:	2002      	movs	r0, #2
    8d3e:	4798      	blx	r3
    8d40:	e007      	b.n	8d52 <ticker_job+0x71e>
			return TICKER_STATUS_FAILURE;
		}
	}

	/* Inserted/Scheduled */
	ticker->req = ticker->ack + 1;
    8d42:	78a3      	ldrb	r3, [r4, #2]

	return TICKER_STATUS_SUCCESS;
    8d44:	2100      	movs	r1, #0
			return TICKER_STATUS_FAILURE;
		}
	}

	/* Inserted/Scheduled */
	ticker->req = ticker->ack + 1;
    8d46:	3301      	adds	r3, #1
    8d48:	7063      	strb	r3, [r4, #1]
    8d4a:	e704      	b.n	8b56 <ticker_job+0x522>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    8d4c:	2300      	movs	r3, #0
    8d4e:	773b      	strb	r3, [r7, #28]
    8d50:	e7a5      	b.n	8c9e <ticker_job+0x66a>
	if (instance->worker_trigger) {
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_JOB(0);
}
    8d52:	b019      	add	sp, #100	; 0x64
    8d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d56:	46c0      	nop			; (mov r8, r8)
    8d58:	ff172b5a 	.word	0xff172b5a
    8d5c:	7f172b59 	.word	0x7f172b59
    8d60:	fe2e56b6 	.word	0xfe2e56b6
    8d64:	0001241d 	.word	0x0001241d
    8d68:	0001246d 	.word	0x0001246d
    8d6c:	000124a8 	.word	0x000124a8
    8d70:	000123e3 	.word	0x000123e3
    8d74:	0001351c 	.word	0x0001351c
    8d78:	00014860 	.word	0x00014860

00008d7c <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
    8d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d7e:	0006      	movs	r6, r0
    8d80:	a805      	add	r0, sp, #20
    8d82:	c880      	ldmia	r0!, {r7}
    8d84:	7804      	ldrb	r4, [r0, #0]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
    8d86:	2e00      	cmp	r6, #0
    8d88:	d009      	beq.n	8d9e <ticker_init+0x22>
    8d8a:	2e01      	cmp	r6, #1
    8d8c:	d139      	bne.n	8e02 <ticker_init+0x86>
		instance->fp_sched = ticker_instance0_sched;
		instance->fp_cmp_set = ticker_instance0_cmp_set;
		break;

	case 1:
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
    8d8e:	481e      	ldr	r0, [pc, #120]	; (8e08 <ticker_init+0x8c>)
    8d90:	4d1e      	ldr	r5, [pc, #120]	; (8e0c <ticker_init+0x90>)
    8d92:	64c5      	str	r5, [r0, #76]	; 0x4c
		instance->fp_sched = ticker_instance1_sched;
    8d94:	4d1e      	ldr	r5, [pc, #120]	; (8e10 <ticker_init+0x94>)
    8d96:	6505      	str	r5, [r0, #80]	; 0x50
		instance->fp_cmp_set = ticker_instance1_cmp_set;
    8d98:	4d1e      	ldr	r5, [pc, #120]	; (8e14 <ticker_init+0x98>)
    8d9a:	6545      	str	r5, [r0, #84]	; 0x54
		break;
    8d9c:	e006      	b.n	8dac <ticker_init+0x30>
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
	case 0:
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
    8d9e:	481a      	ldr	r0, [pc, #104]	; (8e08 <ticker_init+0x8c>)
    8da0:	4d1d      	ldr	r5, [pc, #116]	; (8e18 <ticker_init+0x9c>)
    8da2:	6205      	str	r5, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
    8da4:	4d1d      	ldr	r5, [pc, #116]	; (8e1c <ticker_init+0xa0>)
    8da6:	6245      	str	r5, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
    8da8:	4d1d      	ldr	r5, [pc, #116]	; (8e20 <ticker_init+0xa4>)
    8daa:	6285      	str	r5, [r0, #40]	; 0x28

	default:
		return TICKER_STATUS_FAILURE;
	}

	instance->count_node = count_node;
    8dac:	202c      	movs	r0, #44	; 0x2c
    8dae:	4370      	muls	r0, r6
    8db0:	4684      	mov	ip, r0
    8db2:	4d15      	ldr	r5, [pc, #84]	; (8e08 <ticker_init+0x8c>)
    8db4:	1828      	adds	r0, r5, r0
    8db6:	7201      	strb	r1, [r0, #8]
	instance->node = node;
    8db8:	4661      	mov	r1, ip
    8dba:	514a      	str	r2, [r1, r5]
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    8dbc:	222c      	movs	r2, #44	; 0x2c
    8dbe:	4694      	mov	ip, r2
	}

	instance->count_node = count_node;
	instance->node = node;

	instance->count_user = count_user;
    8dc0:	7243      	strb	r3, [r0, #9]
	instance->user = user;
    8dc2:	6047      	str	r7, [r0, #4]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
    8dc4:	3b01      	subs	r3, #1
    8dc6:	b2db      	uxtb	r3, r3
    8dc8:	2bff      	cmp	r3, #255	; 0xff
    8dca:	d00c      	beq.n	8de6 <ticker_init+0x6a>
		users[count_user].user_op = user_op_;
    8dcc:	9807      	ldr	r0, [sp, #28]
    8dce:	00da      	lsls	r2, r3, #3
    8dd0:	18ba      	adds	r2, r7, r2
    8dd2:	6050      	str	r0, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    8dd4:	4660      	mov	r0, ip
    8dd6:	7812      	ldrb	r2, [r2, #0]
    8dd8:	9907      	ldr	r1, [sp, #28]
    8dda:	4350      	muls	r0, r2
		count_op -= users[count_user].count_user_op;
    8ddc:	1aa4      	subs	r4, r4, r2
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    8dde:	1808      	adds	r0, r1, r0
    8de0:	9007      	str	r0, [sp, #28]
		count_op -= users[count_user].count_user_op;
    8de2:	b2e4      	uxtb	r4, r4
    8de4:	e7ee      	b.n	8dc4 <ticker_init+0x48>
	}

	if (count_op) {
		return TICKER_STATUS_FAILURE;
    8de6:	2001      	movs	r0, #1
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
		count_op -= users[count_user].count_user_op;
	}

	if (count_op) {
    8de8:	2c00      	cmp	r4, #0
    8dea:	d10b      	bne.n	8e04 <ticker_init+0x88>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
    8dec:	302b      	adds	r0, #43	; 0x2b
    8dee:	4346      	muls	r6, r0
    8df0:	19ae      	adds	r6, r5, r6
    8df2:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
    8df4:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
    8df6:	8374      	strh	r4, [r6, #26]
	instance->ticks_current = 0;
    8df8:	6174      	str	r4, [r6, #20]
	instance->ticks_elapsed_first = 0;
    8dfa:	72b4      	strb	r4, [r6, #10]
	instance->ticks_elapsed_last = 0;
    8dfc:	72f4      	strb	r4, [r6, #11]

	return TICKER_STATUS_SUCCESS;
    8dfe:	0020      	movs	r0, r4
    8e00:	e000      	b.n	8e04 <ticker_init+0x88>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
    8e02:	2001      	movs	r0, #1
	instance->ticks_current = 0;
	instance->ticks_elapsed_first = 0;
	instance->ticks_elapsed_last = 0;

	return TICKER_STATUS_SUCCESS;
}
    8e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e06:	46c0      	nop			; (mov r8, r8)
    8e08:	20000eac 	.word	0x20000eac
    8e0c:	00008505 	.word	0x00008505
    8e10:	000083d9 	.word	0x000083d9
    8e14:	000083bf 	.word	0x000083bf
    8e18:	00008545 	.word	0x00008545
    8e1c:	0000846d 	.word	0x0000846d
    8e20:	000083cb 	.word	0x000083cb

00008e24 <ticker_trigger>:

void ticker_trigger(u8_t instance_index)
{
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    8e24:	232c      	movs	r3, #44	; 0x2c
    8e26:	4358      	muls	r0, r3
    8e28:	4b05      	ldr	r3, [pc, #20]	; (8e40 <ticker_trigger+0x1c>)
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
    8e2a:	b510      	push	{r4, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    8e2c:	1818      	adds	r0, r3, r0
    8e2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    8e30:	2b00      	cmp	r3, #0
    8e32:	d003      	beq.n	8e3c <ticker_trigger+0x18>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
    8e34:	2201      	movs	r2, #1
    8e36:	2000      	movs	r0, #0
    8e38:	0011      	movs	r1, r2
    8e3a:	4798      	blx	r3
						   CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_ISR(0);
}
    8e3c:	bd10      	pop	{r4, pc}
    8e3e:	46c0      	nop			; (mov r8, r8)
    8e40:	20000eac 	.word	0x20000eac

00008e44 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    8e44:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8e46:	242c      	movs	r4, #44	; 0x2c
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    8e48:	b085      	sub	sp, #20
    8e4a:	9301      	str	r3, [sp, #4]
    8e4c:	ab0d      	add	r3, sp, #52	; 0x34
    8e4e:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8e50:	4360      	muls	r0, r4
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    8e52:	9302      	str	r3, [sp, #8]
    8e54:	ab0e      	add	r3, sp, #56	; 0x38
    8e56:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8e58:	00cd      	lsls	r5, r1, #3
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    8e5a:	9303      	str	r3, [sp, #12]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8e5c:	4b1c      	ldr	r3, [pc, #112]	; (8ed0 <ticker_start+0x8c>)
    8e5e:	181b      	adds	r3, r3, r0
    8e60:	6858      	ldr	r0, [r3, #4]
    8e62:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    8e64:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    8e66:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    8e68:	1c77      	adds	r7, r6, #1
    8e6a:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    8e6c:	4287      	cmp	r7, r0
    8e6e:	4180      	sbcs	r0, r0
    8e70:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    8e72:	7868      	ldrb	r0, [r5, #1]
    8e74:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    8e76:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    8e78:	45bc      	cmp	ip, r7
    8e7a:	d026      	beq.n	8eca <ticker_start+0x86>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    8e7c:	4374      	muls	r4, r6
    8e7e:	6868      	ldr	r0, [r5, #4]
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    8e80:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    8e82:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = ticker_id;
    8e84:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
    8e86:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
    8e88:	2003      	movs	r0, #3
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
    8e8a:	6062      	str	r2, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    8e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
    8e8e:	7020      	strb	r0, [r4, #0]
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
    8e90:	60a2      	str	r2, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    8e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    8e94:	6226      	str	r6, [r4, #32]
	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
	user_op->params.start.ticks_periodic = ticks_periodic;
    8e96:	60e2      	str	r2, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    8e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    8e9a:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
	user_op->params.start.ticks_periodic = ticks_periodic;
	user_op->params.start.remainder_periodic = remainder_periodic;
    8e9c:	6122      	str	r2, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    8e9e:	466a      	mov	r2, sp
    8ea0:	8992      	ldrh	r2, [r2, #12]
    8ea2:	82e2      	strh	r2, [r4, #22]
	user_op->params.start.lazy = lazy;
    8ea4:	466a      	mov	r2, sp
    8ea6:	8912      	ldrh	r2, [r2, #8]
    8ea8:	82a2      	strh	r2, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
    8eaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8eac:	61a2      	str	r2, [r4, #24]
	user_op->params.start.context = context;
    8eae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8eb0:	61e2      	str	r2, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    8eb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8eb4:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    8eb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8eb8:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    8eba:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    8ebc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    8ebe:	6a1b      	ldr	r3, [r3, #32]
    8ec0:	4798      	blx	r3
    8ec2:	2200      	movs	r2, #0
    8ec4:	0031      	movs	r1, r6
    8ec6:	47a8      	blx	r5

	return user_op->status;
    8ec8:	6a20      	ldr	r0, [r4, #32]
}
    8eca:	b005      	add	sp, #20
    8ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ece:	46c0      	nop			; (mov r8, r8)
    8ed0:	20000eac 	.word	0x20000eac

00008ed4 <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    8ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8ed6:	242c      	movs	r4, #44	; 0x2c

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    8ed8:	b087      	sub	sp, #28
    8eda:	9300      	str	r3, [sp, #0]
    8edc:	ab0c      	add	r3, sp, #48	; 0x30
    8ede:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8ee0:	4360      	muls	r0, r4

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    8ee2:	9301      	str	r3, [sp, #4]
    8ee4:	ab0d      	add	r3, sp, #52	; 0x34
    8ee6:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8ee8:	00cd      	lsls	r5, r1, #3

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    8eea:	9302      	str	r3, [sp, #8]
    8eec:	ab0e      	add	r3, sp, #56	; 0x38
    8eee:	881b      	ldrh	r3, [r3, #0]
    8ef0:	9303      	str	r3, [sp, #12]
    8ef2:	ab0f      	add	r3, sp, #60	; 0x3c
    8ef4:	881b      	ldrh	r3, [r3, #0]
    8ef6:	9304      	str	r3, [sp, #16]
    8ef8:	ab10      	add	r3, sp, #64	; 0x40
    8efa:	781b      	ldrb	r3, [r3, #0]
    8efc:	9305      	str	r3, [sp, #20]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8efe:	4b1c      	ldr	r3, [pc, #112]	; (8f70 <ticker_update+0x9c>)
    8f00:	181b      	adds	r3, r3, r0
    8f02:	6858      	ldr	r0, [r3, #4]
    8f04:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    8f06:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    8f08:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    8f0a:	1c77      	adds	r7, r6, #1
    8f0c:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    8f0e:	4287      	cmp	r7, r0
    8f10:	4180      	sbcs	r0, r0
    8f12:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    8f14:	7868      	ldrb	r0, [r5, #1]
    8f16:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    8f18:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    8f1a:	45bc      	cmp	ip, r7
    8f1c:	d026      	beq.n	8f6c <ticker_update+0x98>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    8f1e:	4374      	muls	r4, r6
    8f20:	6868      	ldr	r0, [r5, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    8f22:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    8f24:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = ticker_id;
    8f26:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    8f28:	466a      	mov	r2, sp
    8f2a:	8812      	ldrh	r2, [r2, #0]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    8f2c:	2004      	movs	r0, #4
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    8f2e:	80a2      	strh	r2, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    8f30:	466a      	mov	r2, sp
    8f32:	8892      	ldrh	r2, [r2, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    8f34:	7020      	strb	r0, [r4, #0]
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    8f36:	80e2      	strh	r2, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    8f38:	466a      	mov	r2, sp
    8f3a:	8912      	ldrh	r2, [r2, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    8f3c:	6226      	str	r6, [r4, #32]
	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    8f3e:	8122      	strh	r2, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    8f40:	466a      	mov	r2, sp
    8f42:	8992      	ldrh	r2, [r2, #12]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    8f44:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    8f46:	8162      	strh	r2, [r4, #10]
	user_op->params.update.lazy = lazy;
    8f48:	466a      	mov	r2, sp
    8f4a:	8a12      	ldrh	r2, [r2, #16]
    8f4c:	81a2      	strh	r2, [r4, #12]
	user_op->params.update.force = force;
    8f4e:	466a      	mov	r2, sp
    8f50:	7d12      	ldrb	r2, [r2, #20]
    8f52:	73a2      	strb	r2, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    8f54:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8f56:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    8f58:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8f5a:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    8f5c:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    8f5e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    8f60:	6a1b      	ldr	r3, [r3, #32]
    8f62:	4798      	blx	r3
    8f64:	2200      	movs	r2, #0
    8f66:	0031      	movs	r1, r6
    8f68:	47a8      	blx	r5

	return user_op->status;
    8f6a:	6a20      	ldr	r0, [r4, #32]
}
    8f6c:	b007      	add	sp, #28
    8f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f70:	20000eac 	.word	0x20000eac

00008f74 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    8f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8f76:	242c      	movs	r4, #44	; 0x2c
    8f78:	4360      	muls	r0, r4
	return user_op->status;
}

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    8f7a:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8f7c:	4b13      	ldr	r3, [pc, #76]	; (8fcc <ticker_stop+0x58>)
    8f7e:	00cd      	lsls	r5, r1, #3
    8f80:	181b      	adds	r3, r3, r0
    8f82:	6858      	ldr	r0, [r3, #4]
    8f84:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    8f86:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    8f88:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    8f8a:	1c77      	adds	r7, r6, #1
    8f8c:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    8f8e:	4287      	cmp	r7, r0
    8f90:	4180      	sbcs	r0, r0
    8f92:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    8f94:	7868      	ldrb	r0, [r5, #1]
    8f96:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    8f98:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    8f9a:	45bc      	cmp	ip, r7
    8f9c:	d014      	beq.n	8fc8 <ticker_stop+0x54>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    8f9e:	4374      	muls	r4, r6
    8fa0:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    8fa2:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    8fa4:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    8fa6:	2005      	movs	r0, #5
	user_op->id = ticker_id;
    8fa8:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    8faa:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    8fac:	7020      	strb	r0, [r4, #0]
	user_op->id = ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    8fae:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    8fb0:	9a08      	ldr	r2, [sp, #32]
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    8fb2:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    8fb4:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    8fb6:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    8fb8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    8fba:	0008      	movs	r0, r1
    8fbc:	6a1b      	ldr	r3, [r3, #32]
    8fbe:	4798      	blx	r3
    8fc0:	2200      	movs	r2, #0
    8fc2:	0031      	movs	r1, r6
    8fc4:	47a8      	blx	r5

	return user_op->status;
    8fc6:	6a20      	ldr	r0, [r4, #32]
}
    8fc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8fca:	46c0      	nop			; (mov r8, r8)
    8fcc:	20000eac 	.word	0x20000eac

00008fd0 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    8fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8fd2:	242c      	movs	r4, #44	; 0x2c
    8fd4:	4360      	muls	r0, r4
}

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    8fd6:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    8fd8:	4b15      	ldr	r3, [pc, #84]	; (9030 <ticker_next_slot_get+0x60>)
    8fda:	00cd      	lsls	r5, r1, #3
    8fdc:	181b      	adds	r3, r3, r0
    8fde:	6858      	ldr	r0, [r3, #4]
    8fe0:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    8fe2:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    8fe4:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    8fe6:	1c77      	adds	r7, r6, #1
    8fe8:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    8fea:	4287      	cmp	r7, r0
    8fec:	4180      	sbcs	r0, r0
    8fee:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    8ff0:	7868      	ldrb	r0, [r5, #1]
    8ff2:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    8ff4:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    8ff6:	45bc      	cmp	ip, r7
    8ff8:	d019      	beq.n	902e <ticker_next_slot_get+0x5e>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    8ffa:	4374      	muls	r4, r6
    8ffc:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    8ffe:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    9000:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    9002:	20ff      	movs	r0, #255	; 0xff
	user_op->params.slot_get.ticker_id = ticker_id;
    9004:	6062      	str	r2, [r4, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
    9006:	9a01      	ldr	r2, [sp, #4]
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    9008:	7060      	strb	r0, [r4, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
    900a:	60a2      	str	r2, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    900c:	9a08      	ldr	r2, [sp, #32]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    900e:	7026      	strb	r6, [r4, #0]
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    9010:	60e2      	str	r2, [r4, #12]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    9012:	9a09      	ldr	r2, [sp, #36]	; 0x24
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
    9014:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    9016:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    9018:	9a0a      	ldr	r2, [sp, #40]	; 0x28

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    901a:	0008      	movs	r0, r1
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    901c:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    901e:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    9020:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    9022:	6a1b      	ldr	r3, [r3, #32]
    9024:	4798      	blx	r3
    9026:	2200      	movs	r2, #0
    9028:	0031      	movs	r1, r6
    902a:	47a8      	blx	r5

	return user_op->status;
    902c:	6a20      	ldr	r0, [r4, #32]
}
    902e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9030:	20000eac 	.word	0x20000eac

00009034 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    9034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    9036:	242c      	movs	r4, #44	; 0x2c
    9038:	4360      	muls	r0, r4
	return user_op->status;
}

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    903a:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    903c:	4b12      	ldr	r3, [pc, #72]	; (9088 <ticker_job_idle_get+0x54>)
    903e:	00cd      	lsls	r5, r1, #3
    9040:	181b      	adds	r3, r3, r0
    9042:	6858      	ldr	r0, [r3, #4]
    9044:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    9046:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    9048:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    904a:	1c77      	adds	r7, r6, #1
    904c:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    904e:	4287      	cmp	r7, r0
    9050:	4180      	sbcs	r0, r0
    9052:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    9054:	7868      	ldrb	r0, [r5, #1]
    9056:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    9058:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    905a:	45bc      	cmp	ip, r7
    905c:	d013      	beq.n	9086 <ticker_job_idle_get+0x52>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    905e:	4374      	muls	r4, r6
    9060:	686e      	ldr	r6, [r5, #4]
    9062:	1934      	adds	r4, r6, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    9064:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
    9066:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    9068:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    906a:	7020      	strb	r0, [r4, #0]
	user_op->id = TICKER_NULL;
    906c:	30fe      	adds	r0, #254	; 0xfe
    906e:	7060      	strb	r0, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    9070:	62a2      	str	r2, [r4, #40]	; 0x28
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    9072:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;
    9074:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    9076:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    9078:	0008      	movs	r0, r1
    907a:	6a1b      	ldr	r3, [r3, #32]
    907c:	4798      	blx	r3
    907e:	2200      	movs	r2, #0
    9080:	0031      	movs	r1, r6
    9082:	47a8      	blx	r5

	return user_op->status;
    9084:	6a20      	ldr	r0, [r4, #32]
}
    9086:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9088:	20000eac 	.word	0x20000eac

0000908c <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    908c:	232c      	movs	r3, #44	; 0x2c

	return user_op->status;
}

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
    908e:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    9090:	4343      	muls	r3, r0
    9092:	4805      	ldr	r0, [pc, #20]	; (90a8 <ticker_job_sched+0x1c>)
    9094:	18c3      	adds	r3, r0, r3
    9096:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    9098:	0008      	movs	r0, r1
    909a:	6a1b      	ldr	r3, [r3, #32]
    909c:	4798      	blx	r3
    909e:	2200      	movs	r2, #0
    90a0:	2102      	movs	r1, #2
    90a2:	47a0      	blx	r4
}
    90a4:	bd10      	pop	{r4, pc}
    90a6:	46c0      	nop			; (mov r8, r8)
    90a8:	20000eac 	.word	0x20000eac

000090ac <ticker_ticks_now_get>:

u32_t ticker_ticks_now_get(void)
{
    90ac:	b510      	push	{r4, lr}
	return cntr_cnt_get();
    90ae:	f7fe fcbd 	bl	7a2c <cntr_cnt_get>
}
    90b2:	bd10      	pop	{r4, pc}

000090b4 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    90b4:	1a40      	subs	r0, r0, r1
    90b6:	0200      	lsls	r0, r0, #8
    90b8:	0a00      	lsrs	r0, r0, #8
}
    90ba:	4770      	bx	lr

000090bc <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
    90bc:	b570      	push	{r4, r5, r6, lr}
    90be:	0006      	movs	r6, r0
    90c0:	000c      	movs	r4, r1
	while (len) {
    90c2:	2c00      	cmp	r4, #0
    90c4:	d013      	beq.n	90ee <bt_rand+0x32>
		k_mutex_lock(&mutex_rand, K_FOREVER);
    90c6:	2101      	movs	r1, #1
    90c8:	4d0a      	ldr	r5, [pc, #40]	; (90f4 <bt_rand+0x38>)
    90ca:	4249      	negs	r1, r1
    90cc:	0028      	movs	r0, r5
    90ce:	f007 fe81 	bl	10dd4 <k_mutex_lock>
		len = rand_get(len, buf);
    90d2:	0020      	movs	r0, r4
    90d4:	0031      	movs	r1, r6
    90d6:	f7ff f8bf 	bl	8258 <rand_get>
    90da:	0004      	movs	r4, r0
		k_mutex_unlock(&mutex_rand);
    90dc:	0028      	movs	r0, r5
    90de:	f007 fedb 	bl	10e98 <k_mutex_unlock>
		if (len) {
    90e2:	2c00      	cmp	r4, #0
    90e4:	d003      	beq.n	90ee <bt_rand+0x32>
    90e6:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    90e8:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    90ea:	bf20      	wfe
    90ec:	e7e9      	b.n	90c2 <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
    90ee:	2000      	movs	r0, #0
    90f0:	bd70      	pop	{r4, r5, r6, pc}
    90f2:	46c0      	nop			; (mov r8, r8)
    90f4:	20000600 	.word	0x20000600

000090f8 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    90f8:	b510      	push	{r4, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    90fa:	2300      	movs	r3, #0
    90fc:	f7fe fcce 	bl	7a9c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    9100:	2000      	movs	r0, #0
    9102:	bd10      	pop	{r4, pc}

00009104 <cpu_sleep>:
    9104:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    9106:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    9108:	bf20      	wfe
static inline void cpu_sleep(void)
{
	__WFE();
	__SEV();
	__WFE();
}
    910a:	4770      	bx	lr

0000910c <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    910c:	6008      	str	r0, [r1, #0]
}
    910e:	4770      	bx	lr

00009110 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9110:	2800      	cmp	r0, #0
    9112:	d104      	bne.n	911e <prepare_reduced+0xe>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
    9114:	2380      	movs	r3, #128	; 0x80
    9116:	680a      	ldr	r2, [r1, #0]
    9118:	061b      	lsls	r3, r3, #24
    911a:	4313      	orrs	r3, r2
    911c:	600b      	str	r3, [r1, #0]
	}
}
    911e:	4770      	bx	lr

00009120 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9120:	2800      	cmp	r0, #0
    9122:	d103      	bne.n	912c <prepare_normal+0xc>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
    9124:	680b      	ldr	r3, [r1, #0]
    9126:	005b      	lsls	r3, r3, #1
    9128:	085b      	lsrs	r3, r3, #1
    912a:	600b      	str	r3, [r1, #0]
	}
}
    912c:	4770      	bx	lr

0000912e <chan_sel_remap>:

	return 0;
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    912e:	b5f0      	push	{r4, r5, r6, r7, lr}
    9130:	0002      	movs	r2, r0
    9132:	1d46      	adds	r6, r0, #5
		u8_t bit_count;

		bite = *chan_map;
		bit_count = 8;
		while (bit_count--) {
			if (bite & 0x01) {
    9134:	2701      	movs	r7, #1
static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    9136:	2000      	movs	r0, #0
	byte_count = 5;
	while (byte_count--) {
    9138:	42b2      	cmp	r2, r6
    913a:	d011      	beq.n	9160 <chan_sel_remap+0x32>
    913c:	0004      	movs	r4, r0
		u8_t bite;
		u8_t bit_count;

		bite = *chan_map;
    913e:	7815      	ldrb	r5, [r2, #0]
    9140:	3408      	adds	r4, #8
    9142:	b2e4      	uxtb	r4, r4
		bit_count = 8;
		while (bit_count--) {
    9144:	42a0      	cmp	r0, r4
    9146:	d009      	beq.n	915c <chan_sel_remap+0x2e>
			if (bite & 0x01) {
    9148:	423d      	tst	r5, r7
    914a:	d003      	beq.n	9154 <chan_sel_remap+0x26>
				if (chan_index == 0) {
    914c:	2900      	cmp	r1, #0
    914e:	d007      	beq.n	9160 <chan_sel_remap+0x32>
					break;
				}
				chan_index--;
    9150:	3901      	subs	r1, #1
    9152:	b2c9      	uxtb	r1, r1
			}
			chan_next++;
    9154:	1c43      	adds	r3, r0, #1
    9156:	b2d8      	uxtb	r0, r3
			bite >>= 1;
    9158:	086d      	lsrs	r5, r5, #1
    915a:	e7f3      	b.n	9144 <chan_sel_remap+0x16>

		if (bit_count < 8) {
			break;
		}

		chan_map++;
    915c:	3201      	adds	r2, #1
    915e:	e7eb      	b.n	9138 <chan_sel_remap+0xa>
	}

	return chan_next;
}
    9160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00009164 <packet_rx_acquired_count_get>:
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    9164:	229f      	movs	r2, #159	; 0x9f
    9166:	4b09      	ldr	r3, [pc, #36]	; (918c <packet_rx_acquired_count_get+0x28>)
    9168:	0052      	lsls	r2, r2, #1
    916a:	5c98      	ldrb	r0, [r3, r2]
	    _radio.packet_rx_last) {
    916c:	223e      	movs	r2, #62	; 0x3e
    916e:	32ff      	adds	r2, #255	; 0xff
    9170:	5c99      	ldrb	r1, [r3, r2]
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    9172:	4288      	cmp	r0, r1
    9174:	d302      	bcc.n	917c <packet_rx_acquired_count_get+0x18>
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    9176:	5c9b      	ldrb	r3, [r3, r2]

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
    9178:	1ac0      	subs	r0, r0, r3
    917a:	e005      	b.n	9188 <packet_rx_acquired_count_get+0x24>
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    917c:	219e      	movs	r1, #158	; 0x9e
    917e:	0049      	lsls	r1, r1, #1
			_radio.packet_rx_last +
    9180:	5c9a      	ldrb	r2, [r3, r2]
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    9182:	5c5b      	ldrb	r3, [r3, r1]
    9184:	18c0      	adds	r0, r0, r3
    9186:	1a80      	subs	r0, r0, r2
    9188:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_last +
			_radio.packet_rx_acquire);
	}
}
    918a:	4770      	bx	lr
    918c:	20000f68 	.word	0x20000f68

00009190 <packet_rx_reserve_get>:

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    9190:	b510      	push	{r4, lr}
    9192:	0004      	movs	r4, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
    9194:	f7ff ffe6 	bl	9164 <packet_rx_acquired_count_get>
    9198:	0003      	movs	r3, r0
		return 0;
    919a:	2000      	movs	r0, #0

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
    919c:	42a3      	cmp	r3, r4
    919e:	d309      	bcc.n	91b4 <packet_rx_reserve_get+0x24>
		return 0;
	}

	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    91a0:	223e      	movs	r2, #62	; 0x3e
    91a2:	4b05      	ldr	r3, [pc, #20]	; (91b8 <packet_rx_reserve_get+0x28>)
    91a4:	32ff      	adds	r2, #255	; 0xff
    91a6:	5c9a      	ldrb	r2, [r3, r2]
    91a8:	33fc      	adds	r3, #252	; 0xfc
    91aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    91ac:	0093      	lsls	r3, r2, #2
    91ae:	5858      	ldr	r0, [r3, r1]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    91b0:	2301      	movs	r3, #1
    91b2:	7103      	strb	r3, [r0, #4]

	return radio_pdu_node_rx;
}
    91b4:	bd10      	pop	{r4, pc}
    91b6:	46c0      	nop			; (mov r8, r8)
    91b8:	20000f68 	.word	0x20000f68

000091bc <packet_rx_allocate>:

	*pdu_data_tx = _pdu_data_tx;
}

static void packet_rx_allocate(u8_t max)
{
    91bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    91be:	23a8      	movs	r3, #168	; 0xa8
    91c0:	4d22      	ldr	r5, [pc, #136]	; (924c <packet_rx_allocate+0x90>)
    91c2:	005b      	lsls	r3, r3, #1
    91c4:	5ceb      	ldrb	r3, [r5, r3]
    91c6:	1c1e      	adds	r6, r3, #0
    91c8:	4283      	cmp	r3, r0
    91ca:	d900      	bls.n	91ce <packet_rx_allocate+0x12>
    91cc:	1c06      	adds	r6, r0, #0
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    91ce:	239f      	movs	r3, #159	; 0x9f
    91d0:	005b      	lsls	r3, r3, #1
    91d2:	5cec      	ldrb	r4, [r5, r3]
	if (acquire == _radio.packet_rx_count) {
    91d4:	3b02      	subs	r3, #2

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    91d6:	3401      	adds	r4, #1
	if (acquire == _radio.packet_rx_count) {
    91d8:	5ceb      	ldrb	r3, [r5, r3]

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    91da:	b2e4      	uxtb	r4, r4
    91dc:	b2f6      	uxtb	r6, r6
	if (acquire == _radio.packet_rx_count) {
    91de:	42a3      	cmp	r3, r4
    91e0:	d11b      	bne.n	921a <packet_rx_allocate+0x5e>
		acquire = 0;
    91e2:	2400      	movs	r4, #0
    91e4:	e019      	b.n	921a <packet_rx_allocate+0x5e>
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    91e6:	239f      	movs	r3, #159	; 0x9f
    91e8:	002a      	movs	r2, r5
		if (!radio_pdu_node_rx) {
			mem_release(link, &_radio.link_rx_free);
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;
    91ea:	6007      	str	r7, [r0, #0]

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    91ec:	005b      	lsls	r3, r3, #1
    91ee:	5ceb      	ldrb	r3, [r5, r3]
    91f0:	32fc      	adds	r2, #252	; 0xfc
    91f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    91f4:	009b      	lsls	r3, r3, #2
    91f6:	5098      	str	r0, [r3, r2]
		_radio.packet_rx_acquire = acquire;
    91f8:	239f      	movs	r3, #159	; 0x9f
    91fa:	005b      	lsls	r3, r3, #1
    91fc:	54ec      	strb	r4, [r5, r3]

		acquire = _radio.packet_rx_acquire + 1;
		if (acquire == _radio.packet_rx_count) {
    91fe:	3b02      	subs	r3, #2
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    9200:	3401      	adds	r4, #1
		if (acquire == _radio.packet_rx_count) {
    9202:	5ceb      	ldrb	r3, [r5, r3]
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    9204:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
    9206:	42a3      	cmp	r3, r4
    9208:	d100      	bne.n	920c <packet_rx_allocate+0x50>
			acquire = 0;
    920a:	2400      	movs	r4, #0
		}

		_radio.link_rx_data_quota--;
    920c:	22a8      	movs	r2, #168	; 0xa8
    920e:	0052      	lsls	r2, r2, #1
    9210:	5cab      	ldrb	r3, [r5, r2]
    9212:	3e01      	subs	r6, #1
    9214:	3b01      	subs	r3, #1
    9216:	54ab      	strb	r3, [r5, r2]
    9218:	b2f6      	uxtb	r6, r6
	acquire = _radio.packet_rx_acquire + 1;
	if (acquire == _radio.packet_rx_count) {
		acquire = 0;
	}

	while ((max--) && (acquire != _radio.packet_rx_last)) {
    921a:	2e00      	cmp	r6, #0
    921c:	d014      	beq.n	9248 <packet_rx_allocate+0x8c>
    921e:	233e      	movs	r3, #62	; 0x3e
    9220:	33ff      	adds	r3, #255	; 0xff
    9222:	5ceb      	ldrb	r3, [r5, r3]
    9224:	429c      	cmp	r4, r3
    9226:	d00f      	beq.n	9248 <packet_rx_allocate+0x8c>
		void *link;
		struct radio_pdu_node_rx *radio_pdu_node_rx;

		link = mem_acquire(&_radio.link_rx_free);
    9228:	4809      	ldr	r0, [pc, #36]	; (9250 <packet_rx_allocate+0x94>)
    922a:	f7fe fb1f 	bl	786c <mem_acquire>
    922e:	1e07      	subs	r7, r0, #0
		if (!link) {
    9230:	d00a      	beq.n	9248 <packet_rx_allocate+0x8c>
			break;
		}

		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    9232:	0028      	movs	r0, r5
    9234:	302d      	adds	r0, #45	; 0x2d
    9236:	30ff      	adds	r0, #255	; 0xff
    9238:	f7fe fb18 	bl	786c <mem_acquire>
		if (!radio_pdu_node_rx) {
    923c:	2800      	cmp	r0, #0
    923e:	d1d2      	bne.n	91e6 <packet_rx_allocate+0x2a>
			mem_release(link, &_radio.link_rx_free);
    9240:	4903      	ldr	r1, [pc, #12]	; (9250 <packet_rx_allocate+0x94>)
    9242:	0038      	movs	r0, r7
    9244:	f7fe fb2b 	bl	789e <mem_release>
			acquire = 0;
		}

		_radio.link_rx_data_quota--;
	}
}
    9248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    924a:	46c0      	nop			; (mov r8, r8)
    924c:	20000f68 	.word	0x20000f68
    9250:	200010ac 	.word	0x200010ac

00009254 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    9254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    9256:	4c3b      	ldr	r4, [pc, #236]	; (9344 <common_init+0xf0>)
    9258:	0023      	movs	r3, r4
    925a:	0020      	movs	r0, r4
    925c:	33ff      	adds	r3, #255	; 0xff
    925e:	7b5a      	ldrb	r2, [r3, #13]
    9260:	30fc      	adds	r0, #252	; 0xfc
    9262:	2a00      	cmp	r2, #0
    9264:	d009      	beq.n	927a <common_init+0x26>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    9266:	0023      	movs	r3, r4
    9268:	218c      	movs	r1, #140	; 0x8c
    926a:	3309      	adds	r3, #9
    926c:	33ff      	adds	r3, #255	; 0xff
    926e:	b292      	uxth	r2, r2
    9270:	0049      	lsls	r1, r1, #1
    9272:	6880      	ldr	r0, [r0, #8]
    9274:	f7fe fad4 	bl	7820 <mem_init>
    9278:	e000      	b.n	927c <common_init+0x28>
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    927a:	60c2      	str	r2, [r0, #12]
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
    927c:	0023      	movs	r3, r4
    927e:	229b      	movs	r2, #155	; 0x9b
    9280:	0026      	movs	r6, r4
    9282:	0027      	movs	r7, r4
    9284:	332d      	adds	r3, #45	; 0x2d
    9286:	37fc      	adds	r7, #252	; 0xfc
    9288:	0052      	lsls	r2, r2, #1
    928a:	36fe      	adds	r6, #254	; 0xfe
    928c:	33ff      	adds	r3, #255	; 0xff
    928e:	5ca2      	ldrb	r2, [r4, r2]
    9290:	8ef1      	ldrh	r1, [r6, #54]	; 0x36
    9292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9294:	f7fe fac4 	bl	7820 <mem_init>
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    9298:	0025      	movs	r5, r4
    929a:	239e      	movs	r3, #158	; 0x9e
    929c:	35ff      	adds	r5, #255	; 0xff
    929e:	005b      	lsls	r3, r3, #1
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    92a0:	5ce2      	ldrb	r2, [r4, r3]
    92a2:	7b6b      	ldrb	r3, [r5, #13]
    92a4:	2108      	movs	r1, #8
    92a6:	18d2      	adds	r2, r2, r3
    92a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
    92aa:	4b27      	ldr	r3, [pc, #156]	; (9348 <common_init+0xf4>)
    92ac:	f7fe fab8 	bl	7820 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    92b0:	0023      	movs	r3, r4
    92b2:	3359      	adds	r3, #89	; 0x59
    92b4:	33ff      	adds	r3, #255	; 0xff
    92b6:	2202      	movs	r2, #2
    92b8:	2124      	movs	r1, #36	; 0x24
    92ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
    92bc:	f7fe fab0 	bl	7820 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    92c0:	22b8      	movs	r2, #184	; 0xb8
	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    92c2:	0023      	movs	r3, r4
    92c4:	21b2      	movs	r1, #178	; 0xb2
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    92c6:	0052      	lsls	r2, r2, #1
	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    92c8:	5ca2      	ldrb	r2, [r4, r2]
    92ca:	3361      	adds	r3, #97	; 0x61
    92cc:	3a01      	subs	r2, #1
    92ce:	0049      	lsls	r1, r1, #1
    92d0:	6e38      	ldr	r0, [r7, #96]	; 0x60
    92d2:	33ff      	adds	r3, #255	; 0xff
    92d4:	b292      	uxth	r2, r2
    92d6:	5a61      	ldrh	r1, [r4, r1]
    92d8:	f7fe faa2 	bl	7820 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    92dc:	481a      	ldr	r0, [pc, #104]	; (9348 <common_init+0xf4>)
    92de:	f7fe fac5 	bl	786c <mem_acquire>
	LL_ASSERT(link);
    92e2:	2800      	cmp	r0, #0
    92e4:	d10c      	bne.n	9300 <common_init+0xac>
    92e6:	4b19      	ldr	r3, [pc, #100]	; (934c <common_init+0xf8>)
    92e8:	4a19      	ldr	r2, [pc, #100]	; (9350 <common_init+0xfc>)
    92ea:	9301      	str	r3, [sp, #4]
    92ec:	4b19      	ldr	r3, [pc, #100]	; (9354 <common_init+0x100>)
    92ee:	491a      	ldr	r1, [pc, #104]	; (9358 <common_init+0x104>)
    92f0:	9300      	str	r3, [sp, #0]
    92f2:	481a      	ldr	r0, [pc, #104]	; (935c <common_init+0x108>)
    92f4:	4b1a      	ldr	r3, [pc, #104]	; (9360 <common_init+0x10c>)
    92f6:	f7f8 facd 	bl	1894 <printk>
    92fa:	b662      	cpsie	i
    92fc:	2004      	movs	r0, #4
    92fe:	df02      	svc	2
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    9300:	0022      	movs	r2, r4
    9302:	0021      	movs	r1, r4
    9304:	324d      	adds	r2, #77	; 0x4d
    9306:	3149      	adds	r1, #73	; 0x49
    9308:	31ff      	adds	r1, #255	; 0xff
    930a:	32ff      	adds	r2, #255	; 0xff
    930c:	f7fe fb0c 	bl	7928 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    9310:	2238      	movs	r2, #56	; 0x38
    9312:	3406      	adds	r4, #6
    9314:	7fe3      	ldrb	r3, [r4, #31]

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    9316:	20ff      	movs	r0, #255	; 0xff
	link = mem_acquire(&_radio.link_rx_free);
	LL_ASSERT(link);
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    9318:	4313      	orrs	r3, r2
    931a:	77e3      	strb	r3, [r4, #31]
	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
	_radio.data_chan_map[1] = 0xFF;
	_radio.data_chan_map[2] = 0xFF;
	_radio.data_chan_map[3] = 0xFF;
	_radio.data_chan_map[4] = 0x1F;
    931c:	231f      	movs	r3, #31
    931e:	76eb      	strb	r3, [r5, #27]
	_radio.data_chan_count = 37;
    9320:	3306      	adds	r3, #6
    9322:	772b      	strb	r3, [r5, #28]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9324:	3b0a      	subs	r3, #10
    9326:	8433      	strh	r3, [r6, #32]
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
    9328:	332e      	adds	r3, #46	; 0x2e
    932a:	33ff      	adds	r3, #255	; 0xff
    932c:	8473      	strh	r3, [r6, #34]	; 0x22
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* Initialize the DLE defaults */
	_radio.default_phy_tx = BIT(0);
    932e:	3b48      	subs	r3, #72	; 0x48
    9330:	3bff      	subs	r3, #255	; 0xff

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    9332:	75e8      	strb	r0, [r5, #23]
	_radio.data_chan_map[1] = 0xFF;
    9334:	7628      	strb	r0, [r5, #24]
	_radio.data_chan_map[2] = 0xFF;
    9336:	7668      	strb	r0, [r5, #25]
	_radio.data_chan_map[3] = 0xFF;
    9338:	76a8      	strb	r0, [r5, #26]
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* Initialize the DLE defaults */
	_radio.default_phy_tx = BIT(0);
    933a:	84b3      	strh	r3, [r6, #36]	; 0x24
	_radio.default_phy_rx = BIT(0);
    933c:	84f3      	strh	r3, [r6, #38]	; 0x26
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY_CODED */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    933e:	f7ff ff3d 	bl	91bc <packet_rx_allocate>
}
    9342:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    9344:	20000f68 	.word	0x20000f68
    9348:	200010ac 	.word	0x200010ac
    934c:	0001241d 	.word	0x0001241d
    9350:	0001246d 	.word	0x0001246d
    9354:	000124a8 	.word	0x000124a8
    9358:	000123e3 	.word	0x000123e3
    935c:	0001353f 	.word	0x0001353f
    9360:	00014d11 	.word	0x00014d11

00009364 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    9364:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    9366:	780c      	ldrb	r4, [r1, #0]
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    9368:	b085      	sub	sp, #20
    936a:	9001      	str	r0, [sp, #4]
    936c:	9102      	str	r1, [sp, #8]
    936e:	9203      	str	r2, [sp, #12]
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
		return 0;
    9370:	2000      	movs	r0, #0
{
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
    9372:	4294      	cmp	r4, r2
    9374:	d03f      	beq.n	93f6 <tx_cmplt_get+0x92>
		return 0;
	}

	cmplt = 0;
    9376:	0006      	movs	r6, r0
	*handle = _radio.pkt_release[_first].handle;
    9378:	4d20      	ldr	r5, [pc, #128]	; (93fc <tx_cmplt_get+0x98>)
    937a:	00e3      	lsls	r3, r4, #3
    937c:	35fc      	adds	r5, #252	; 0xfc
    937e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    9380:	5a9b      	ldrh	r3, [r3, r2]
    9382:	9a01      	ldr	r2, [sp, #4]
    9384:	8013      	strh	r3, [r2, #0]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    9386:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    9388:	00e3      	lsls	r3, r4, #3
    938a:	18d3      	adds	r3, r2, r3
    938c:	9a01      	ldr	r2, [sp, #4]
    938e:	8811      	ldrh	r1, [r2, #0]
    9390:	881a      	ldrh	r2, [r3, #0]
    9392:	4291      	cmp	r1, r2
    9394:	d12c      	bne.n	93f0 <tx_cmplt_get+0x8c>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    9396:	6858      	ldr	r0, [r3, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
    9398:	2801      	cmp	r0, #1
    939a:	d90d      	bls.n	93b8 <tx_cmplt_get+0x54>
    939c:	2203      	movs	r2, #3
    939e:	0001      	movs	r1, r0
    93a0:	4391      	bics	r1, r2
    93a2:	d00e      	beq.n	93c2 <tx_cmplt_get+0x5e>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    93a4:	1d01      	adds	r1, r0, #4
    93a6:	d00c      	beq.n	93c2 <tx_cmplt_get+0x5e>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    93a8:	7941      	ldrb	r1, [r0, #5]
    93aa:	2900      	cmp	r1, #0
    93ac:	d009      	beq.n	93c2 <tx_cmplt_get+0x5e>
    93ae:	7901      	ldrb	r1, [r0, #4]
    93b0:	400a      	ands	r2, r1
    93b2:	3a01      	subs	r2, #1
    93b4:	2a01      	cmp	r2, #1
    93b6:	d804      	bhi.n	93c2 <tx_cmplt_get+0x5e>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
    93b8:	2201      	movs	r2, #1
    93ba:	605a      	str	r2, [r3, #4]
				(struct radio_pdu_node_tx *)1;

			cmplt++;
    93bc:	18b3      	adds	r3, r6, r2
    93be:	b2de      	uxtb	r6, r3
    93c0:	e001      	b.n	93c6 <tx_cmplt_get+0x62>
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx =
    93c2:	2202      	movs	r2, #2
    93c4:	605a      	str	r2, [r3, #4]
				(struct radio_pdu_node_tx *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    93c6:	2303      	movs	r3, #3
    93c8:	0002      	movs	r2, r0
    93ca:	4f0c      	ldr	r7, [pc, #48]	; (93fc <tx_cmplt_get+0x98>)
    93cc:	439a      	bics	r2, r3
    93ce:	d004      	beq.n	93da <tx_cmplt_get+0x76>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    93d0:	0039      	movs	r1, r7
    93d2:	3161      	adds	r1, #97	; 0x61
    93d4:	31ff      	adds	r1, #255	; 0xff
    93d6:	f7fe fa62 	bl	789e <mem_release>
		}

		_first = _first + 1;
		if (_first == _radio.packet_tx_count) {
    93da:	23b8      	movs	r3, #184	; 0xb8
    93dc:	005b      	lsls	r3, r3, #1

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    93de:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    93e0:	5cfb      	ldrb	r3, [r7, r3]

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    93e2:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
    93e4:	42a3      	cmp	r3, r4
    93e6:	d100      	bne.n	93ea <tx_cmplt_get+0x86>
			_first = 0;
    93e8:	2400      	movs	r4, #0
		}

	} while (_first != last);
    93ea:	9b03      	ldr	r3, [sp, #12]
    93ec:	429c      	cmp	r4, r3
    93ee:	d1ca      	bne.n	9386 <tx_cmplt_get+0x22>

	*first = _first;

	return cmplt;
    93f0:	0030      	movs	r0, r6
			_first = 0;
		}

	} while (_first != last);

	*first = _first;
    93f2:	9b02      	ldr	r3, [sp, #8]
    93f4:	701c      	strb	r4, [r3, #0]

	return cmplt;
}
    93f6:	b005      	add	sp, #20
    93f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93fa:	46c0      	nop			; (mov r8, r8)
    93fc:	20000f68 	.word	0x20000f68

00009400 <connection_get>:

static struct connection *connection_get(u16_t handle)
{
	struct connection *conn;

	if (handle < _radio.connection_count) {
    9400:	4b0a      	ldr	r3, [pc, #40]	; (942c <connection_get+0x2c>)
{
	return &_radio.advertiser.scan_data;
}

static struct connection *connection_get(u16_t handle)
{
    9402:	b510      	push	{r4, lr}
	struct connection *conn;

	if (handle < _radio.connection_count) {
    9404:	001a      	movs	r2, r3
    9406:	32ff      	adds	r2, #255	; 0xff
    9408:	7b52      	ldrb	r2, [r2, #13]
{
	return &_radio.advertiser.scan_data;
}

static struct connection *connection_get(u16_t handle)
{
    940a:	0004      	movs	r4, r0
	struct connection *conn;

	if (handle < _radio.connection_count) {
    940c:	4282      	cmp	r2, r0
    940e:	d90b      	bls.n	9428 <connection_get+0x28>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    9410:	218c      	movs	r1, #140	; 0x8c
    9412:	33fc      	adds	r3, #252	; 0xfc
    9414:	0002      	movs	r2, r0
    9416:	0049      	lsls	r1, r1, #1
    9418:	6898      	ldr	r0, [r3, #8]
    941a:	f7fe fa5e 	bl	78da <mem_get>
		if ((conn) && (conn->handle == handle)) {
    941e:	2800      	cmp	r0, #0
    9420:	d002      	beq.n	9428 <connection_get+0x28>
    9422:	8c03      	ldrh	r3, [r0, #32]
    9424:	42a3      	cmp	r3, r4
    9426:	d000      	beq.n	942a <connection_get+0x2a>
			return conn;
		}
	}

	return 0;
    9428:	2000      	movs	r0, #0
}
    942a:	bd10      	pop	{r4, pc}
    942c:	20000f68 	.word	0x20000f68

00009430 <role_disable>:
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9430:	2302      	movs	r3, #2
		LL_ASSERT(0);
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
    9432:	b5f0      	push	{r4, r5, r6, r7, lr}
    9434:	b089      	sub	sp, #36	; 0x24
    9436:	0004      	movs	r4, r0
    9438:	9103      	str	r1, [sp, #12]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    943a:	9304      	str	r3, [sp, #16]
	u32_t ret;

	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
    943c:	2805      	cmp	r0, #5
    943e:	d008      	beq.n	9452 <role_disable+0x22>
    9440:	2806      	cmp	r0, #6
    9442:	d127      	bne.n	9494 <role_disable+0x64>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
			  (ret_cb == TICKER_STATUS_FAILURE));
		break;

	case RADIO_TICKER_ID_SCAN:
		ticks_xtal_to_start =
    9444:	4b92      	ldr	r3, [pc, #584]	; (9690 <role_disable+0x260>)
    9446:	001a      	movs	r2, r3
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    9448:	33d0      	adds	r3, #208	; 0xd0
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
			  (ret_cb == TICKER_STATUS_FAILURE));
		break;

	case RADIO_TICKER_ID_SCAN:
		ticks_xtal_to_start =
    944a:	32cc      	adds	r2, #204	; 0xcc
    944c:	6817      	ldr	r7, [r2, #0]
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    944e:	681b      	ldr	r3, [r3, #0]
    9450:	e02b      	b.n	94aa <role_disable+0x7a>
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    9452:	4b8f      	ldr	r3, [pc, #572]	; (9690 <role_disable+0x260>)
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9454:	9a03      	ldr	r2, [sp, #12]
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    9456:	695f      	ldr	r7, [r3, #20]
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    9458:	699b      	ldr	r3, [r3, #24]
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    945a:	2103      	movs	r1, #3
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    945c:	9302      	str	r3, [sp, #8]
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    945e:	ab04      	add	r3, sp, #16
    9460:	9300      	str	r3, [sp, #0]
    9462:	2000      	movs	r0, #0
    9464:	4b8b      	ldr	r3, [pc, #556]	; (9694 <role_disable+0x264>)
    9466:	f7ff fd85 	bl	8f74 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
    946a:	2802      	cmp	r0, #2
    946c:	d003      	beq.n	9476 <role_disable+0x46>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    946e:	9b04      	ldr	r3, [sp, #16]
    9470:	2b00      	cmp	r3, #0
    9472:	d106      	bne.n	9482 <role_disable+0x52>
    9474:	e028      	b.n	94c8 <role_disable+0x98>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
			/* wait for ticker to be stopped */
			while (ret_cb == TICKER_STATUS_BUSY) {
    9476:	9b04      	ldr	r3, [sp, #16]
    9478:	2b02      	cmp	r3, #2
    947a:	d1f8      	bne.n	946e <role_disable+0x3e>
				cpu_sleep();
    947c:	f7ff fe42 	bl	9104 <cpu_sleep>
    9480:	e7f9      	b.n	9476 <role_disable+0x46>
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9482:	9b04      	ldr	r3, [sp, #16]
    9484:	2b01      	cmp	r3, #1
    9486:	d01f      	beq.n	94c8 <role_disable+0x98>
    9488:	4b83      	ldr	r3, [pc, #524]	; (9698 <role_disable+0x268>)
    948a:	9301      	str	r3, [sp, #4]
    948c:	4b83      	ldr	r3, [pc, #524]	; (969c <role_disable+0x26c>)
    948e:	9300      	str	r3, [sp, #0]
    9490:	4b83      	ldr	r3, [pc, #524]	; (96a0 <role_disable+0x270>)
    9492:	e0cb      	b.n	962c <role_disable+0x1fc>
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
			_radio.scanner.hdr.ticks_active_to_start;
		break;
	default:
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    9494:	2806      	cmp	r0, #6
    9496:	d90a      	bls.n	94ae <role_disable+0x7e>
			struct connection *conn;
			u16_t conn_handle;

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
    9498:	3807      	subs	r0, #7
    949a:	b280      	uxth	r0, r0
    949c:	f7ff ffb0 	bl	9400 <connection_get>
			if (!conn) {
    94a0:	2800      	cmp	r0, #0
    94a2:	d100      	bne.n	94a6 <role_disable+0x76>
    94a4:	e0f1      	b.n	968a <role_disable+0x25a>
				return 1;
			}

			ticks_xtal_to_start =
    94a6:	6807      	ldr	r7, [r0, #0]
				conn->hdr.ticks_xtal_to_start;
			ticks_active_to_start =
    94a8:	6843      	ldr	r3, [r0, #4]
    94aa:	9302      	str	r3, [sp, #8]
    94ac:	e00c      	b.n	94c8 <role_disable+0x98>
				conn->hdr.ticks_active_to_start;
		} else {
			LL_ASSERT(0);
    94ae:	4b7a      	ldr	r3, [pc, #488]	; (9698 <role_disable+0x268>)
    94b0:	9301      	str	r3, [sp, #4]
    94b2:	4b7a      	ldr	r3, [pc, #488]	; (969c <role_disable+0x26c>)
    94b4:	9300      	str	r3, [sp, #0]
    94b6:	4b7a      	ldr	r3, [pc, #488]	; (96a0 <role_disable+0x270>)
    94b8:	4a7a      	ldr	r2, [pc, #488]	; (96a4 <role_disable+0x274>)
    94ba:	497b      	ldr	r1, [pc, #492]	; (96a8 <role_disable+0x278>)
    94bc:	487b      	ldr	r0, [pc, #492]	; (96ac <role_disable+0x27c>)
    94be:	f7f8 f9e9 	bl	1894 <printk>
    94c2:	b662      	cpsie	i
    94c4:	2004      	movs	r0, #4
    94c6:	df02      	svc	2
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
    94c8:	4d71      	ldr	r5, [pc, #452]	; (9690 <role_disable+0x260>)
    94ca:	7ba8      	ldrb	r0, [r5, #14]
    94cc:	b2c0      	uxtb	r0, r0
    94ce:	2800      	cmp	r0, #0
    94d0:	d008      	beq.n	94e4 <role_disable+0xb4>
    94d2:	4b71      	ldr	r3, [pc, #452]	; (9698 <role_disable+0x268>)
    94d4:	4a73      	ldr	r2, [pc, #460]	; (96a4 <role_disable+0x274>)
    94d6:	9301      	str	r3, [sp, #4]
    94d8:	4b70      	ldr	r3, [pc, #448]	; (969c <role_disable+0x26c>)
    94da:	4973      	ldr	r1, [pc, #460]	; (96a8 <role_disable+0x278>)
    94dc:	9300      	str	r3, [sp, #0]
    94de:	4874      	ldr	r0, [pc, #464]	; (96b0 <role_disable+0x280>)
    94e0:	4b6f      	ldr	r3, [pc, #444]	; (96a0 <role_disable+0x270>)
    94e2:	e7ec      	b.n	94be <role_disable+0x8e>
	_radio.ticker_id_stop = ticker_id_primary;

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret_cb = TICKER_STATUS_BUSY;
    94e4:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    94e6:	4e6b      	ldr	r6, [pc, #428]	; (9694 <role_disable+0x264>)
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
	_radio.ticker_id_stop = ticker_id_primary;
    94e8:	73ac      	strb	r4, [r5, #14]

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret_cb = TICKER_STATUS_BUSY;
    94ea:	9304      	str	r3, [sp, #16]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    94ec:	ab04      	add	r3, sp, #16
    94ee:	9300      	str	r3, [sp, #0]
    94f0:	0022      	movs	r2, r4
    94f2:	0033      	movs	r3, r6
    94f4:	2103      	movs	r1, #3
    94f6:	f7ff fd3d 	bl	8f74 <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    94fa:	2802      	cmp	r0, #2
    94fc:	d005      	beq.n	950a <role_disable+0xda>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb != TICKER_STATUS_SUCCESS) {
    94fe:	9b04      	ldr	r3, [sp, #16]
    9500:	4d63      	ldr	r5, [pc, #396]	; (9690 <role_disable+0x260>)
    9502:	2b00      	cmp	r3, #0
    9504:	d000      	beq.n	9508 <role_disable+0xd8>
    9506:	e0bc      	b.n	9682 <role_disable+0x252>
    9508:	e00d      	b.n	9526 <role_disable+0xf6>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
		/* if inside our event, enable Job. */
		if (_radio.ticker_id_event == ticker_id_primary) {
    950a:	7b6b      	ldrb	r3, [r5, #13]
    950c:	429c      	cmp	r4, r3
    950e:	d104      	bne.n	951a <role_disable+0xea>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9510:	2201      	movs	r2, #1
    9512:	2003      	movs	r0, #3
    9514:	0011      	movs	r1, r2
    9516:	f7fe f881 	bl	761c <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);
		}

		/* wait for ticker to be stopped */
		while (ret_cb == TICKER_STATUS_BUSY) {
    951a:	9b04      	ldr	r3, [sp, #16]
    951c:	2b02      	cmp	r3, #2
    951e:	d1ee      	bne.n	94fe <role_disable+0xce>
			cpu_sleep();
    9520:	f7ff fdf0 	bl	9104 <cpu_sleep>
    9524:	e7f9      	b.n	951a <role_disable+0xea>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
		goto role_disable_cleanup;
	}

	/* Inside our event, gracefully handle XTAL and Radio actives */
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    9526:	7b2b      	ldrb	r3, [r5, #12]
    9528:	429c      	cmp	r4, r3
    952a:	d003      	beq.n	9534 <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    952c:	7b6b      	ldrb	r3, [r5, #13]
    952e:	429c      	cmp	r4, r3
    9530:	d000      	beq.n	9534 <role_disable+0x104>
    9532:	e0a1      	b.n	9678 <role_disable+0x248>
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9534:	2302      	movs	r3, #2
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9536:	2200      	movs	r2, #0
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9538:	9305      	str	r3, [sp, #20]
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    953a:	ab05      	add	r3, sp, #20
    953c:	9300      	str	r3, [sp, #0]
    953e:	2103      	movs	r1, #3
    9540:	0033      	movs	r3, r6
    9542:	0010      	movs	r0, r2
    9544:	f7ff fd16 	bl	8f74 <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, RADIO_TICKER_ID_EVENT,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    9548:	2802      	cmp	r0, #2
    954a:	d107      	bne.n	955c <role_disable+0x12c>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    954c:	2201      	movs	r2, #1
    954e:	0011      	movs	r1, r2
    9550:	1880      	adds	r0, r0, r2
    9552:	f7fe f863 	bl	761c <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 1);

		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    9556:	9b05      	ldr	r3, [sp, #20]
    9558:	2b02      	cmp	r3, #2
    955a:	d053      	beq.n	9604 <role_disable+0x1d4>
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
    955c:	9805      	ldr	r0, [sp, #20]
    955e:	2302      	movs	r3, #2
    9560:	2800      	cmp	r0, #0
    9562:	d139      	bne.n	95d8 <role_disable+0x1a8>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop = {0, 0, s_link, NULL,
			mayfly_xtal_stop};
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9564:	9306      	str	r3, [sp, #24]
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
    9566:	7b2b      	ldrb	r3, [r5, #12]
    9568:	2b00      	cmp	r3, #0
    956a:	d108      	bne.n	957e <role_disable+0x14e>
    956c:	4b4a      	ldr	r3, [pc, #296]	; (9698 <role_disable+0x268>)
    956e:	4a4d      	ldr	r2, [pc, #308]	; (96a4 <role_disable+0x274>)
    9570:	9301      	str	r3, [sp, #4]
    9572:	4b4a      	ldr	r3, [pc, #296]	; (969c <role_disable+0x26c>)
    9574:	494c      	ldr	r1, [pc, #304]	; (96a8 <role_disable+0x278>)
    9576:	9300      	str	r3, [sp, #0]
    9578:	484e      	ldr	r0, [pc, #312]	; (96b4 <role_disable+0x284>)
    957a:	4b4f      	ldr	r3, [pc, #316]	; (96b8 <role_disable+0x288>)
    957c:	e79f      	b.n	94be <role_disable+0x8e>
		_radio.ticker_id_prepare = 0;

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    957e:	ab06      	add	r3, sp, #24
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
		_radio.ticker_id_prepare = 0;
    9580:	7328      	strb	r0, [r5, #12]

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9582:	2201      	movs	r2, #1
    9584:	9300      	str	r3, [sp, #0]
    9586:	2103      	movs	r1, #3
    9588:	0033      	movs	r3, r6
    958a:	f7ff fcf3 	bl	8f74 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP,
				  RADIO_TICKER_ID_MARKER_0,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    958e:	2802      	cmp	r0, #2
    9590:	d107      	bne.n	95a2 <role_disable+0x172>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    9592:	2201      	movs	r2, #1
    9594:	0011      	movs	r1, r2
    9596:	1880      	adds	r0, r0, r2
    9598:	f7fe f840 	bl	761c <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    959c:	9b06      	ldr	r3, [sp, #24]
    959e:	2b02      	cmp	r3, #2
    95a0:	d030      	beq.n	9604 <role_disable+0x1d4>
		}

		if (ret_cb == TICKER_STATUS_SUCCESS) {
    95a2:	9906      	ldr	r1, [sp, #24]
    95a4:	2900      	cmp	r1, #0
    95a6:	d104      	bne.n	95b2 <role_disable+0x182>
			/* Step 2.1.1: Check and deassert Radio Active or XTAL
			 * start
			 */
			if (ticks_active_to_start > ticks_xtal_to_start) {
    95a8:	9b02      	ldr	r3, [sp, #8]
    95aa:	42bb      	cmp	r3, r7
    95ac:	d90c      	bls.n	95c8 <role_disable+0x198>
				u32_t retval;

				/* radio active asserted, handle deasserting
				 * here
				 */
				retval = mayfly_enqueue(
    95ae:	4b43      	ldr	r3, [pc, #268]	; (96bc <role_disable+0x28c>)
    95b0:	e00b      	b.n	95ca <role_disable+0x19a>
						RADIO_TICKER_USER_ID_APP,
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
				LL_ASSERT(!retval);
			}
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
    95b2:	9b06      	ldr	r3, [sp, #24]
    95b4:	2b01      	cmp	r3, #1
    95b6:	d159      	bne.n	966c <role_disable+0x23c>
			u32_t retval;

			/* Step 2.1.2: Deassert Radio Active and XTAL start */

			/* radio active asserted, handle deasserting here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    95b8:	2200      	movs	r2, #0
    95ba:	4b40      	ldr	r3, [pc, #256]	; (96bc <role_disable+0x28c>)
    95bc:	0011      	movs	r1, r2
    95be:	2003      	movs	r0, #3
    95c0:	f7fe f84c 	bl	765c <mayfly_enqueue>
    95c4:	1e01      	subs	r1, r0, #0
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_inactive);
			LL_ASSERT(!retval);
    95c6:	d142      	bne.n	964e <role_disable+0x21e>

			/* XTAL started, handle XTAL stop here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    95c8:	4b3d      	ldr	r3, [pc, #244]	; (96c0 <role_disable+0x290>)
    95ca:	000a      	movs	r2, r1
    95cc:	2003      	movs	r0, #3
    95ce:	f7fe f845 	bl	765c <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
			LL_ASSERT(!retval);
    95d2:	2800      	cmp	r0, #0
    95d4:	d050      	beq.n	9678 <role_disable+0x248>
    95d6:	e03a      	b.n	964e <role_disable+0x21e>
		} else {
			LL_ASSERT(0);
		}
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
    95d8:	9c05      	ldr	r4, [sp, #20]
    95da:	2c01      	cmp	r4, #1
    95dc:	d146      	bne.n	966c <role_disable+0x23c>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    95de:	9307      	str	r3, [sp, #28]
		 * (role dependent)
		 */
		/* Stop ticker "may" be in use for direct adv or scanner,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    95e0:	ab07      	add	r3, sp, #28
    95e2:	9300      	str	r3, [sp, #0]
    95e4:	9a03      	ldr	r2, [sp, #12]
    95e6:	0033      	movs	r3, r6
    95e8:	2103      	movs	r1, #3
    95ea:	2000      	movs	r0, #0
    95ec:	f7ff fcc2 	bl	8f74 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    95f0:	2802      	cmp	r0, #2
    95f2:	d110      	bne.n	9616 <role_disable+0x1e6>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    95f4:	0022      	movs	r2, r4
    95f6:	0021      	movs	r1, r4
    95f8:	3001      	adds	r0, #1
    95fa:	f7fe f80f 	bl	761c <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    95fe:	9b07      	ldr	r3, [sp, #28]
    9600:	2b02      	cmp	r3, #2
    9602:	d108      	bne.n	9616 <role_disable+0x1e6>
    9604:	4b24      	ldr	r3, [pc, #144]	; (9698 <role_disable+0x268>)
    9606:	4a27      	ldr	r2, [pc, #156]	; (96a4 <role_disable+0x274>)
    9608:	9301      	str	r3, [sp, #4]
    960a:	4b24      	ldr	r3, [pc, #144]	; (969c <role_disable+0x26c>)
    960c:	4926      	ldr	r1, [pc, #152]	; (96a8 <role_disable+0x278>)
    960e:	9300      	str	r3, [sp, #0]
    9610:	482c      	ldr	r0, [pc, #176]	; (96c4 <role_disable+0x294>)
    9612:	4b29      	ldr	r3, [pc, #164]	; (96b8 <role_disable+0x288>)
    9614:	e753      	b.n	94be <role_disable+0x8e>
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    9616:	9b07      	ldr	r3, [sp, #28]
    9618:	2b00      	cmp	r3, #0
    961a:	d00b      	beq.n	9634 <role_disable+0x204>
    961c:	9b07      	ldr	r3, [sp, #28]
    961e:	2b01      	cmp	r3, #1
    9620:	d008      	beq.n	9634 <role_disable+0x204>
    9622:	4b1d      	ldr	r3, [pc, #116]	; (9698 <role_disable+0x268>)
    9624:	9301      	str	r3, [sp, #4]
    9626:	4b1d      	ldr	r3, [pc, #116]	; (969c <role_disable+0x26c>)
    9628:	9300      	str	r3, [sp, #0]
    962a:	4b23      	ldr	r3, [pc, #140]	; (96b8 <role_disable+0x288>)
    962c:	4a1d      	ldr	r2, [pc, #116]	; (96a4 <role_disable+0x274>)
    962e:	491e      	ldr	r1, [pc, #120]	; (96a8 <role_disable+0x278>)
    9630:	4825      	ldr	r0, [pc, #148]	; (96c8 <role_disable+0x298>)
    9632:	e744      	b.n	94be <role_disable+0x8e>
			  (ret_cb == TICKER_STATUS_FAILURE));

		if (_radio.role != ROLE_NONE) {
    9634:	7beb      	ldrb	r3, [r5, #15]
    9636:	2b00      	cmp	r3, #0
    9638:	d01e      	beq.n	9678 <role_disable+0x248>
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    963a:	2204      	movs	r2, #4
    963c:	4b23      	ldr	r3, [pc, #140]	; (96cc <role_disable+0x29c>)

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    963e:	2003      	movs	r0, #3
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    9640:	609a      	str	r2, [r3, #8]

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    9642:	2200      	movs	r2, #0
    9644:	0011      	movs	r1, r2
    9646:	f7fe f809 	bl	765c <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_stop);
			LL_ASSERT(!retval);
    964a:	2800      	cmp	r0, #0
    964c:	d008      	beq.n	9660 <role_disable+0x230>
    964e:	4b12      	ldr	r3, [pc, #72]	; (9698 <role_disable+0x268>)
    9650:	4a14      	ldr	r2, [pc, #80]	; (96a4 <role_disable+0x274>)
    9652:	9301      	str	r3, [sp, #4]
    9654:	4b11      	ldr	r3, [pc, #68]	; (969c <role_disable+0x26c>)
    9656:	4914      	ldr	r1, [pc, #80]	; (96a8 <role_disable+0x278>)
    9658:	9300      	str	r3, [sp, #0]
    965a:	481d      	ldr	r0, [pc, #116]	; (96d0 <role_disable+0x2a0>)
    965c:	4b16      	ldr	r3, [pc, #88]	; (96b8 <role_disable+0x288>)
    965e:	e72e      	b.n	94be <role_disable+0x8e>

			/* wait for radio ISR to exit */
			while (_radio.role != ROLE_NONE) {
    9660:	7beb      	ldrb	r3, [r5, #15]
    9662:	2b00      	cmp	r3, #0
    9664:	d008      	beq.n	9678 <role_disable+0x248>
				cpu_sleep();
    9666:	f7ff fd4d 	bl	9104 <cpu_sleep>
    966a:	e7f9      	b.n	9660 <role_disable+0x230>
			}
		}
	} else {
		LL_ASSERT(0);
    966c:	4b0a      	ldr	r3, [pc, #40]	; (9698 <role_disable+0x268>)
    966e:	9301      	str	r3, [sp, #4]
    9670:	4b0a      	ldr	r3, [pc, #40]	; (969c <role_disable+0x26c>)
    9672:	9300      	str	r3, [sp, #0]
    9674:	4b10      	ldr	r3, [pc, #64]	; (96b8 <role_disable+0x288>)
    9676:	e71f      	b.n	94b8 <role_disable+0x88>

		role_active_disable(ticker_id_stop,
				    ticks_xtal_to_start, ticks_active_to_start);
	}

	if (!_radio.ticker_id_stop) {
    9678:	7bab      	ldrb	r3, [r5, #14]
    967a:	2b00      	cmp	r3, #0
    967c:	d101      	bne.n	9682 <role_disable+0x252>
		ret_cb = TICKER_STATUS_FAILURE;
    967e:	3301      	adds	r3, #1
    9680:	9304      	str	r3, [sp, #16]
	}

role_disable_cleanup:
	_radio.ticker_id_stop = 0;
    9682:	2300      	movs	r3, #0
    9684:	73ab      	strb	r3, [r5, #14]

	return ret_cb;
    9686:	9804      	ldr	r0, [sp, #16]
    9688:	e000      	b.n	968c <role_disable+0x25c>

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
			if (!conn) {
				return 1;
    968a:	2001      	movs	r0, #1

role_disable_cleanup:
	_radio.ticker_id_stop = 0;

	return ret_cb;
}
    968c:	b009      	add	sp, #36	; 0x24
    968e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9690:	20000f68 	.word	0x20000f68
    9694:	0000910d 	.word	0x0000910d
    9698:	0001241d 	.word	0x0001241d
    969c:	000124a8 	.word	0x000124a8
    96a0:	00014cdd 	.word	0x00014cdd
    96a4:	0001246d 	.word	0x0001246d
    96a8:	000123e3 	.word	0x000123e3
    96ac:	000129d4 	.word	0x000129d4
    96b0:	000135a5 	.word	0x000135a5
    96b4:	0001360a 	.word	0x0001360a
    96b8:	00014a0d 	.word	0x00014a0d
    96bc:	20000528 	.word	0x20000528
    96c0:	200004e8 	.word	0x200004e8
    96c4:	000135dd 	.word	0x000135dd
    96c8:	00013565 	.word	0x00013565
    96cc:	20000548 	.word	0x20000548
    96d0:	00013644 	.word	0x00013644

000096d4 <mayfly_xtal_retain>:
	DEBUG_RADIO_CLOSE(0);
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
{
    96d4:	b507      	push	{r0, r1, r2, lr}
    96d6:	4b1e      	ldr	r3, [pc, #120]	; (9750 <mayfly_xtal_retain+0x7c>)
	static u8_t s_xtal_retained;

	if (retain) {
    96d8:	2900      	cmp	r1, #0
    96da:	d021      	beq.n	9720 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    96dc:	7819      	ldrb	r1, [r3, #0]
    96de:	2900      	cmp	r1, #0
    96e0:	d134      	bne.n	974c <mayfly_xtal_retain+0x78>
			static struct mayfly s_mfy_xtal_start = {0, 0, s_link,
				NULL, mayfly_xtal_start};
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    96e2:	2801      	cmp	r0, #1
    96e4:	d008      	beq.n	96f8 <mayfly_xtal_retain+0x24>
    96e6:	4b1b      	ldr	r3, [pc, #108]	; (9754 <mayfly_xtal_retain+0x80>)
    96e8:	4a1b      	ldr	r2, [pc, #108]	; (9758 <mayfly_xtal_retain+0x84>)
    96ea:	9301      	str	r3, [sp, #4]
    96ec:	4b1b      	ldr	r3, [pc, #108]	; (975c <mayfly_xtal_retain+0x88>)
    96ee:	491c      	ldr	r1, [pc, #112]	; (9760 <mayfly_xtal_retain+0x8c>)
    96f0:	9300      	str	r3, [sp, #0]
    96f2:	481c      	ldr	r0, [pc, #112]	; (9764 <mayfly_xtal_retain+0x90>)
    96f4:	4b1c      	ldr	r3, [pc, #112]	; (9768 <mayfly_xtal_retain+0x94>)
    96f6:	e00e      	b.n	9716 <mayfly_xtal_retain+0x42>

			s_xtal_retained = 1;

			retval = mayfly_enqueue(caller_id,
    96f8:	000a      	movs	r2, r1
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);

			s_xtal_retained = 1;
    96fa:	7018      	strb	r0, [r3, #0]

			retval = mayfly_enqueue(caller_id,
    96fc:	4b1b      	ldr	r3, [pc, #108]	; (976c <mayfly_xtal_retain+0x98>)
    96fe:	f7fd ffad 	bl	765c <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
    9702:	2800      	cmp	r0, #0
    9704:	d022      	beq.n	974c <mayfly_xtal_retain+0x78>
    9706:	4b13      	ldr	r3, [pc, #76]	; (9754 <mayfly_xtal_retain+0x80>)
    9708:	4a13      	ldr	r2, [pc, #76]	; (9758 <mayfly_xtal_retain+0x84>)
    970a:	9301      	str	r3, [sp, #4]
    970c:	4b13      	ldr	r3, [pc, #76]	; (975c <mayfly_xtal_retain+0x88>)
    970e:	4914      	ldr	r1, [pc, #80]	; (9760 <mayfly_xtal_retain+0x8c>)
    9710:	9300      	str	r3, [sp, #0]
    9712:	4817      	ldr	r0, [pc, #92]	; (9770 <mayfly_xtal_retain+0x9c>)
    9714:	4b14      	ldr	r3, [pc, #80]	; (9768 <mayfly_xtal_retain+0x94>)
    9716:	f7f8 f8bd 	bl	1894 <printk>
    971a:	b662      	cpsie	i
    971c:	2004      	movs	r0, #4
    971e:	df02      	svc	2
		}
	} else {
		if (s_xtal_retained) {
    9720:	781a      	ldrb	r2, [r3, #0]
    9722:	2a00      	cmp	r2, #0
    9724:	d012      	beq.n	974c <mayfly_xtal_retain+0x78>
				{0, 0, s_link[1], NULL, mayfly_xtal_stop}
			};
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;
    9726:	7019      	strb	r1, [r3, #0]
    9728:	4b12      	ldr	r3, [pc, #72]	; (9774 <mayfly_xtal_retain+0xa0>)

			switch (caller_id) {
    972a:	2800      	cmp	r0, #0
    972c:	d00b      	beq.n	9746 <mayfly_xtal_retain+0x72>
			case RADIO_TICKER_USER_ID_WORKER:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
				break;

			case RADIO_TICKER_USER_ID_JOB:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    972e:	3310      	adds	r3, #16
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;

			switch (caller_id) {
    9730:	2801      	cmp	r0, #1
    9732:	d008      	beq.n	9746 <mayfly_xtal_retain+0x72>
			case RADIO_TICKER_USER_ID_JOB:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
				break;

			default:
				LL_ASSERT(0);
    9734:	4b07      	ldr	r3, [pc, #28]	; (9754 <mayfly_xtal_retain+0x80>)
    9736:	4a08      	ldr	r2, [pc, #32]	; (9758 <mayfly_xtal_retain+0x84>)
    9738:	9301      	str	r3, [sp, #4]
    973a:	4b08      	ldr	r3, [pc, #32]	; (975c <mayfly_xtal_retain+0x88>)
    973c:	4908      	ldr	r1, [pc, #32]	; (9760 <mayfly_xtal_retain+0x8c>)
    973e:	9300      	str	r3, [sp, #0]
    9740:	480d      	ldr	r0, [pc, #52]	; (9778 <mayfly_xtal_retain+0xa4>)
    9742:	4b09      	ldr	r3, [pc, #36]	; (9768 <mayfly_xtal_retain+0x94>)
    9744:	e7e7      	b.n	9716 <mayfly_xtal_retain+0x42>
				break;
			}

			retval = mayfly_enqueue(caller_id,
    9746:	2200      	movs	r2, #0
    9748:	0011      	movs	r1, r2
    974a:	e7d8      	b.n	96fe <mayfly_xtal_retain+0x2a>
						RADIO_TICKER_USER_ID_WORKER, 0,
						p_mfy_xtal_stop);
			LL_ASSERT(!retval);
		}
	}
}
    974c:	bd07      	pop	{r0, r1, r2, pc}
    974e:	46c0      	nop			; (mov r8, r8)
    9750:	20000f4d 	.word	0x20000f4d
    9754:	0001241d 	.word	0x0001241d
    9758:	0001246d 	.word	0x0001246d
    975c:	000124a8 	.word	0x000124a8
    9760:	000123e3 	.word	0x000123e3
    9764:	0001366d 	.word	0x0001366d
    9768:	00014ace 	.word	0x00014ace
    976c:	200004c8 	.word	0x200004c8
    9770:	00013644 	.word	0x00013644
    9774:	20000558 	.word	0x20000558
    9778:	000129d4 	.word	0x000129d4

0000977c <rx_packet_set>:

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    977e:	0003      	movs	r3, r0

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    9780:	0006      	movs	r6, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    9782:	3333      	adds	r3, #51	; 0x33
    9784:	781c      	ldrb	r4, [r3, #0]
{
	u16_t max_rx_octets;
	u8_t phy;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_rx_octets = conn->max_rx_octets;
    9786:	8e05      	ldrh	r5, [r0, #48]	; 0x30
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    9788:	06a4      	lsls	r4, r4, #26
    978a:	0f64      	lsrs	r4, r4, #29
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    978c:	0020      	movs	r0, r4

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    978e:	000f      	movs	r7, r1
	phy = conn->phy_rx;
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    9790:	2100      	movs	r1, #0
    9792:	f7fe f9d7 	bl	7b44 <radio_phy_set>

	if (conn->enc_rx) {
    9796:	0033      	movs	r3, r6
    9798:	2201      	movs	r2, #1
    979a:	33c0      	adds	r3, #192	; 0xc0
    979c:	781b      	ldrb	r3, [r3, #0]
    979e:	0064      	lsls	r4, r4, #1
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    97a0:	4322      	orrs	r2, r4
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);

	if (conn->enc_rx) {
    97a2:	06db      	lsls	r3, r3, #27
    97a4:	d50a      	bpl.n	97bc <rx_packet_set+0x40>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    97a6:	1d29      	adds	r1, r5, #4
    97a8:	b2c9      	uxtb	r1, r1
    97aa:	2008      	movs	r0, #8
    97ac:	f7fe fa0c 	bl	7bc8 <radio_pkt_configure>

		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx,
    97b0:	0030      	movs	r0, r6
    97b2:	0039      	movs	r1, r7
    97b4:	30c1      	adds	r0, #193	; 0xc1
    97b6:	f7fe fc29 	bl	800c <radio_ccm_rx_pkt_set>
    97ba:	e004      	b.n	97c6 <rx_packet_set+0x4a>
						      pdu_data_rx));
	} else {
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    97bc:	2008      	movs	r0, #8
    97be:	b2e9      	uxtb	r1, r5
    97c0:	f7fe fa02 	bl	7bc8 <radio_pkt_configure>

		radio_pkt_rx_set(pdu_data_rx);
    97c4:	0038      	movs	r0, r7
    97c6:	f7fe fa1d 	bl	7c04 <radio_pkt_rx_set>
	}
}
    97ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000097cc <prepare_pdu_data_tx>:
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    97cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    97ce:	0006      	movs	r6, r0
    97d0:	0004      	movs	r4, r0
    97d2:	36c0      	adds	r6, #192	; 0xc0
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    97d4:	000d      	movs	r5, r1
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    97d6:	7831      	ldrb	r1, [r6, #0]
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    97d8:	0002      	movs	r2, r0
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    97da:	09cb      	lsrs	r3, r1, #7
    97dc:	34fc      	adds	r4, #252	; 0xfc
    97de:	2b00      	cmp	r3, #0
    97e0:	d133      	bne.n	984a <prepare_pdu_data_tx+0x7e>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    97e2:	68a3      	ldr	r3, [r4, #8]

	if ((conn->empty != 0) || /* empty packet */
    97e4:	2b00      	cmp	r3, #0
    97e6:	d030      	beq.n	984a <prepare_pdu_data_tx+0x7e>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    97e8:	1d18      	adds	r0, r3, #4
    97ea:	9001      	str	r0, [sp, #4]

	if ((conn->empty != 0) || /* empty packet */
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
    97ec:	0708      	lsls	r0, r1, #28
    97ee:	d542      	bpl.n	9876 <prepare_pdu_data_tx+0xaa>
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
    97f0:	795f      	ldrb	r7, [r3, #5]
    97f2:	2f00      	cmp	r7, #0
    97f4:	d03f      	beq.n	9876 <prepare_pdu_data_tx+0xaa>
	    (_pdu_data_tx->len != 0) &&
    97f6:	791f      	ldrb	r7, [r3, #4]
    97f8:	43ff      	mvns	r7, r7
    97fa:	07b8      	lsls	r0, r7, #30
    97fc:	d125      	bne.n	984a <prepare_pdu_data_tx+0x7e>
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
	     ((conn->role.master.role == 0) &&
    97fe:	0017      	movs	r7, r2
    9800:	3744      	adds	r7, #68	; 0x44
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
	    (_pdu_data_tx->len != 0) &&
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    9802:	783f      	ldrb	r7, [r7, #0]
    9804:	79db      	ldrb	r3, [r3, #7]
    9806:	46bc      	mov	ip, r7
    9808:	4660      	mov	r0, ip
    980a:	2740      	movs	r7, #64	; 0x40
    980c:	07c0      	lsls	r0, r0, #31
    980e:	d40c      	bmi.n	982a <prepare_pdu_data_tx+0x5e>
	     ((conn->role.master.role == 0) &&
    9810:	4239      	tst	r1, r7
    9812:	d102      	bne.n	981a <prepare_pdu_data_tx+0x4e>
	      (((conn->refresh == 0) &&
    9814:	2b02      	cmp	r3, #2
    9816:	d105      	bne.n	9824 <prepare_pdu_data_tx+0x58>
    9818:	e02d      	b.n	9876 <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    981a:	1e99      	subs	r1, r3, #2
    981c:	2901      	cmp	r1, #1
    981e:	d92a      	bls.n	9876 <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    9820:	2b0b      	cmp	r3, #11
    9822:	d028      	beq.n	9876 <prepare_pdu_data_tx+0xaa>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    9824:	2b06      	cmp	r3, #6
    9826:	d10c      	bne.n	9842 <prepare_pdu_data_tx+0x76>
    9828:	e025      	b.n	9876 <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
	     ((conn->role.slave.role != 0) &&
    982a:	4239      	tst	r1, r7
    982c:	d102      	bne.n	9834 <prepare_pdu_data_tx+0x68>
	      (((conn->refresh == 0) &&
    982e:	2b02      	cmp	r3, #2
    9830:	d104      	bne.n	983c <prepare_pdu_data_tx+0x70>
    9832:	e020      	b.n	9876 <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    9834:	27fd      	movs	r7, #253	; 0xfd
    9836:	1e99      	subs	r1, r3, #2
    9838:	4239      	tst	r1, r7
    983a:	d01c      	beq.n	9876 <prepare_pdu_data_tx+0xaa>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    983c:	1f59      	subs	r1, r3, #5
    983e:	2901      	cmp	r1, #1
    9840:	d919      	bls.n	9876 <prepare_pdu_data_tx+0xaa>
    9842:	21fb      	movs	r1, #251	; 0xfb
    9844:	3b0d      	subs	r3, #13
    9846:	420b      	tst	r3, r1
    9848:	d015      	beq.n	9876 <prepare_pdu_data_tx+0xaa>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    984a:	2280      	movs	r2, #128	; 0x80
    984c:	7833      	ldrb	r3, [r6, #0]
    984e:	4252      	negs	r2, r2
    9850:	4313      	orrs	r3, r2
    9852:	7033      	strb	r3, [r6, #0]

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    9854:	f7fe fa44 	bl	7ce0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9858:	2203      	movs	r2, #3
    985a:	7803      	ldrb	r3, [r0, #0]
    985c:	4393      	bics	r3, r2
    985e:	3a02      	subs	r2, #2
    9860:	4313      	orrs	r3, r2
    9862:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    9864:	2300      	movs	r3, #0
    9866:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    9868:	68a1      	ldr	r1, [r4, #8]
    986a:	7803      	ldrb	r3, [r0, #0]
    986c:	320f      	adds	r2, #15
    986e:	2900      	cmp	r1, #0
    9870:	d129      	bne.n	98c6 <prepare_pdu_data_tx+0xfa>
		pdu_data_tx->md = 1;
	} else {
		pdu_data_tx->md = 0;
    9872:	4393      	bics	r3, r2
    9874:	e028      	b.n	98c8 <prepare_pdu_data_tx+0xfc>
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);
    9876:	0011      	movs	r1, r2
    9878:	31ff      	adds	r1, #255	; 0xff
    987a:	7d8b      	ldrb	r3, [r1, #22]
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    987c:	9801      	ldr	r0, [sp, #4]
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    987e:	7d4e      	ldrb	r6, [r1, #21]
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    9880:	18c0      	adds	r0, r0, r3
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    9882:	2e00      	cmp	r6, #0
    9884:	d101      	bne.n	988a <prepare_pdu_data_tx+0xbe>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    9886:	7846      	ldrb	r6, [r0, #1]
    9888:	754e      	strb	r6, [r1, #21]
		}

		if (conn->packet_tx_head_offset) {
    988a:	2b00      	cmp	r3, #0
    988c:	d005      	beq.n	989a <prepare_pdu_data_tx+0xce>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    988e:	2603      	movs	r6, #3
    9890:	7803      	ldrb	r3, [r0, #0]
    9892:	43b3      	bics	r3, r6
    9894:	3e02      	subs	r6, #2
    9896:	4333      	orrs	r3, r6
    9898:	7003      	strb	r3, [r0, #0]
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    989a:	2610      	movs	r6, #16

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    989c:	7d4b      	ldrb	r3, [r1, #21]
    989e:	7d89      	ldrb	r1, [r1, #22]
    98a0:	1a5b      	subs	r3, r3, r1
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    98a2:	7801      	ldrb	r1, [r0, #0]

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    98a4:	b2db      	uxtb	r3, r3
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    98a6:	43b1      	bics	r1, r6

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    98a8:	7043      	strb	r3, [r0, #1]
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    98aa:	7001      	strb	r1, [r0, #0]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		max_tx_octets = conn->max_tx_octets;
    98ac:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
    98ae:	429a      	cmp	r2, r3
    98b0:	d203      	bcs.n	98ba <prepare_pdu_data_tx+0xee>
			_pdu_data_tx->len = max_tx_octets;
			_pdu_data_tx->md = 1;
    98b2:	b2cb      	uxtb	r3, r1
    98b4:	4333      	orrs	r3, r6
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
			_pdu_data_tx->len = max_tx_octets;
    98b6:	7042      	strb	r2, [r0, #1]
			_pdu_data_tx->md = 1;
    98b8:	7003      	strb	r3, [r0, #0]
		}

		if (conn->pkt_tx_head->next) {
    98ba:	68a3      	ldr	r3, [r4, #8]
    98bc:	681b      	ldr	r3, [r3, #0]
    98be:	2b00      	cmp	r3, #0
    98c0:	d003      	beq.n	98ca <prepare_pdu_data_tx+0xfe>
			_pdu_data_tx->md = 1;
    98c2:	2210      	movs	r2, #16
    98c4:	7803      	ldrb	r3, [r0, #0]
    98c6:	4313      	orrs	r3, r2
    98c8:	7003      	strb	r3, [r0, #0]
		}
	}

	_pdu_data_tx->rfu = 0;
    98ca:	231f      	movs	r3, #31
    98cc:	7802      	ldrb	r2, [r0, #0]
    98ce:	4013      	ands	r3, r2
    98d0:	7003      	strb	r3, [r0, #0]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR)
	_pdu_data_tx->resv = 0;
    98d2:	2300      	movs	r3, #0
    98d4:	7083      	strb	r3, [r0, #2]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR */

	*pdu_data_tx = _pdu_data_tx;
    98d6:	6028      	str	r0, [r5, #0]
}
    98d8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000098da <tx_packet_set>:
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    98da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    98dc:	0003      	movs	r3, r0
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    98de:	0006      	movs	r6, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    98e0:	3332      	adds	r3, #50	; 0x32
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    98e2:	000f      	movs	r7, r1
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    98e4:	7819      	ldrb	r1, [r3, #0]
{
	u16_t max_tx_octets;
	u8_t phy, flags;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_tx_octets = conn->max_tx_octets;
    98e6:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    98e8:	068c      	lsls	r4, r1, #26
    98ea:	0f64      	lsrs	r4, r4, #29
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);
    98ec:	0020      	movs	r0, r4
    98ee:	09c9      	lsrs	r1, r1, #7
    98f0:	f7fe f928 	bl	7b44 <radio_phy_set>

	if (conn->enc_tx) {
    98f4:	0033      	movs	r3, r6
    98f6:	2201      	movs	r2, #1
    98f8:	33c0      	adds	r3, #192	; 0xc0
    98fa:	781b      	ldrb	r3, [r3, #0]
    98fc:	0064      	lsls	r4, r4, #1
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    98fe:	4322      	orrs	r2, r4
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);

	if (conn->enc_tx) {
    9900:	069b      	lsls	r3, r3, #26
    9902:	d50a      	bpl.n	991a <tx_packet_set+0x40>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    9904:	1d29      	adds	r1, r5, #4
    9906:	b2c9      	uxtb	r1, r1
    9908:	2008      	movs	r0, #8
    990a:	f7fe f95d 	bl	7bc8 <radio_pkt_configure>

		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    990e:	0030      	movs	r0, r6
    9910:	0039      	movs	r1, r7
    9912:	30e2      	adds	r0, #226	; 0xe2
    9914:	f7fe fbb8 	bl	8088 <radio_ccm_tx_pkt_set>
    9918:	e004      	b.n	9924 <tx_packet_set+0x4a>
						      pdu_data_tx));
	} else {
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    991a:	2008      	movs	r0, #8
    991c:	b2e9      	uxtb	r1, r5
    991e:	f7fe f953 	bl	7bc8 <radio_pkt_configure>

		radio_pkt_tx_set(pdu_data_tx);
    9922:	0038      	movs	r0, r7
    9924:	f7fe f976 	bl	7c14 <radio_pkt_tx_set>
	}
}
    9928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000992c <packet_rx_enqueue>:
		       &s_mfy_callback);
#endif
}

static void packet_rx_enqueue(void)
{
    992c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *link;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	u8_t last;

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    992e:	243e      	movs	r4, #62	; 0x3e
    9930:	219f      	movs	r1, #159	; 0x9f
    9932:	4a1d      	ldr	r2, [pc, #116]	; (99a8 <packet_rx_enqueue+0x7c>)
    9934:	34ff      	adds	r4, #255	; 0xff
    9936:	0049      	lsls	r1, r1, #1
    9938:	5d13      	ldrb	r3, [r2, r4]
    993a:	5c51      	ldrb	r1, [r2, r1]
    993c:	4299      	cmp	r1, r3
    993e:	d108      	bne.n	9952 <packet_rx_enqueue+0x26>
    9940:	4b1a      	ldr	r3, [pc, #104]	; (99ac <packet_rx_enqueue+0x80>)
    9942:	4a1b      	ldr	r2, [pc, #108]	; (99b0 <packet_rx_enqueue+0x84>)
    9944:	9301      	str	r3, [sp, #4]
    9946:	4b1b      	ldr	r3, [pc, #108]	; (99b4 <packet_rx_enqueue+0x88>)
    9948:	491b      	ldr	r1, [pc, #108]	; (99b8 <packet_rx_enqueue+0x8c>)
    994a:	9300      	str	r3, [sp, #0]
    994c:	481b      	ldr	r0, [pc, #108]	; (99bc <packet_rx_enqueue+0x90>)
    994e:	4b1c      	ldr	r3, [pc, #112]	; (99c0 <packet_rx_enqueue+0x94>)
    9950:	e022      	b.n	9998 <packet_rx_enqueue+0x6c>

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    9952:	0011      	movs	r1, r2
    9954:	5d13      	ldrb	r3, [r2, r4]
    9956:	31fc      	adds	r1, #252	; 0xfc
    9958:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    995a:	009b      	lsls	r3, r3, #2
    995c:	5858      	ldr	r0, [r3, r1]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    995e:	23ba      	movs	r3, #186	; 0xba

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
	if (last == _radio.packet_rx_count) {
    9960:	259e      	movs	r5, #158	; 0x9e

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    9962:	005b      	lsls	r3, r3, #1
    9964:	5cd3      	ldrb	r3, [r2, r3]

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	link = radio_pdu_node_rx->hdr.onion.link;
    9966:	6801      	ldr	r1, [r0, #0]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    9968:	7003      	strb	r3, [r0, #0]
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    996a:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_rx_count) {
    996c:	006d      	lsls	r5, r5, #1
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    996e:	3301      	adds	r3, #1
	if (last == _radio.packet_rx_count) {
    9970:	5d55      	ldrb	r5, [r2, r5]
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    9972:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
    9974:	429d      	cmp	r5, r3
    9976:	d100      	bne.n	997a <packet_rx_enqueue+0x4e>
		last = 0;
    9978:	2300      	movs	r3, #0
	}
	_radio.packet_rx_last = last;
    997a:	5513      	strb	r3, [r2, r4]

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    997c:	324d      	adds	r2, #77	; 0x4d
    997e:	32ff      	adds	r2, #255	; 0xff
    9980:	f7fd ffd5 	bl	792e <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    9984:	2800      	cmp	r0, #0
    9986:	d10c      	bne.n	99a2 <packet_rx_enqueue+0x76>
    9988:	4b08      	ldr	r3, [pc, #32]	; (99ac <packet_rx_enqueue+0x80>)
    998a:	4a09      	ldr	r2, [pc, #36]	; (99b0 <packet_rx_enqueue+0x84>)
    998c:	9301      	str	r3, [sp, #4]
    998e:	4b09      	ldr	r3, [pc, #36]	; (99b4 <packet_rx_enqueue+0x88>)
    9990:	4909      	ldr	r1, [pc, #36]	; (99b8 <packet_rx_enqueue+0x8c>)
    9992:	9300      	str	r3, [sp, #0]
    9994:	480b      	ldr	r0, [pc, #44]	; (99c4 <packet_rx_enqueue+0x98>)
    9996:	4b0a      	ldr	r3, [pc, #40]	; (99c0 <packet_rx_enqueue+0x94>)
    9998:	f7f7 ff7c 	bl	1894 <printk>
    999c:	b662      	cpsie	i
    999e:	2004      	movs	r0, #4
    99a0:	df02      	svc	2
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    99a2:	f005 fcd1 	bl	f348 <radio_event_callback>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);

	/* callback to trigger application action */
	packet_rx_callback();
}
    99a6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    99a8:	20000f68 	.word	0x20000f68
    99ac:	0001241d 	.word	0x0001241d
    99b0:	0001246d 	.word	0x0001246d
    99b4:	000124a8 	.word	0x000124a8
    99b8:	000123e3 	.word	0x000123e3
    99bc:	0001369d 	.word	0x0001369d
    99c0:	00014b80 	.word	0x00014b80
    99c4:	0001353f 	.word	0x0001353f

000099c8 <rx_fc_lock>:

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
    99c8:	b510      	push	{r4, lr}
	if (_radio.fc_req == _radio.fc_ack) {
    99ca:	21be      	movs	r1, #190	; 0xbe
    99cc:	247e      	movs	r4, #126	; 0x7e
    99ce:	4b0b      	ldr	r3, [pc, #44]	; (99fc <rx_fc_lock+0x34>)
    99d0:	0049      	lsls	r1, r1, #1
    99d2:	34ff      	adds	r4, #255	; 0xff
    99d4:	5c5a      	ldrb	r2, [r3, r1]
    99d6:	5d1c      	ldrb	r4, [r3, r4]
    99d8:	4294      	cmp	r4, r2
    99da:	d10d      	bne.n	99f8 <rx_fc_lock+0x30>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    99dc:	5c5a      	ldrb	r2, [r3, r1]
    99de:	32b8      	adds	r2, #184	; 0xb8
    99e0:	0052      	lsls	r2, r2, #1
    99e2:	189a      	adds	r2, r3, r2
    99e4:	80d0      	strh	r0, [r2, #6]
		req = _radio.fc_req + 1;
    99e6:	5c5a      	ldrb	r2, [r3, r1]
    99e8:	3201      	adds	r2, #1
    99ea:	b2d2      	uxtb	r2, r2
		if (req == TRIPLE_BUFFER_SIZE) {
    99ec:	2a03      	cmp	r2, #3
    99ee:	d100      	bne.n	99f2 <rx_fc_lock+0x2a>
			req = 0;
    99f0:	2200      	movs	r2, #0
		}
		_radio.fc_req = req;
    99f2:	21be      	movs	r1, #190	; 0xbe
    99f4:	0049      	lsls	r1, r1, #1
    99f6:	545a      	strb	r2, [r3, r1]
	}
}
    99f8:	bd10      	pop	{r4, pc}
    99fa:	46c0      	nop			; (mov r8, r8)
    99fc:	20000f68 	.word	0x20000f68

00009a00 <ticker_success_assert>:
{
	*((u32_t volatile *)ops_context) = status;
}

static void ticker_success_assert(u32_t status, void *params)
{
    9a00:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    9a02:	2800      	cmp	r0, #0
    9a04:	d00c      	beq.n	9a20 <ticker_success_assert+0x20>
    9a06:	4b07      	ldr	r3, [pc, #28]	; (9a24 <ticker_success_assert+0x24>)
    9a08:	4a07      	ldr	r2, [pc, #28]	; (9a28 <ticker_success_assert+0x28>)
    9a0a:	9301      	str	r3, [sp, #4]
    9a0c:	4b07      	ldr	r3, [pc, #28]	; (9a2c <ticker_success_assert+0x2c>)
    9a0e:	4908      	ldr	r1, [pc, #32]	; (9a30 <ticker_success_assert+0x30>)
    9a10:	9300      	str	r3, [sp, #0]
    9a12:	4808      	ldr	r0, [pc, #32]	; (9a34 <ticker_success_assert+0x34>)
    9a14:	4b08      	ldr	r3, [pc, #32]	; (9a38 <ticker_success_assert+0x38>)
    9a16:	f7f7 ff3d 	bl	1894 <printk>
    9a1a:	b662      	cpsie	i
    9a1c:	2004      	movs	r0, #4
    9a1e:	df02      	svc	2
}
    9a20:	bd07      	pop	{r0, r1, r2, pc}
    9a22:	46c0      	nop			; (mov r8, r8)
    9a24:	0001241d 	.word	0x0001241d
    9a28:	0001246d 	.word	0x0001246d
    9a2c:	000124a8 	.word	0x000124a8
    9a30:	000123e3 	.word	0x000123e3
    9a34:	000136f0 	.word	0x000136f0
    9a38:	00014bc6 	.word	0x00014bc6

00009a3c <ticker_stop_adv_assert>:

static void ticker_stop_adv_assert(u32_t status, void *params)
{
    9a3c:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    9a3e:	2801      	cmp	r0, #1
    9a40:	d113      	bne.n	9a6a <ticker_stop_adv_assert+0x2e>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    9a42:	4b0a      	ldr	r3, [pc, #40]	; (9a6c <ticker_stop_adv_assert+0x30>)
    9a44:	7b9a      	ldrb	r2, [r3, #14]
    9a46:	2a05      	cmp	r2, #5
    9a48:	d102      	bne.n	9a50 <ticker_stop_adv_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Adv role as it is now transitioned
			 * to Slave role).
			 */
			_radio.ticker_id_stop = 0;
    9a4a:	2200      	movs	r2, #0
    9a4c:	739a      	strb	r2, [r3, #14]
    9a4e:	e00c      	b.n	9a6a <ticker_stop_adv_assert+0x2e>
		} else {
			LL_ASSERT(0);
    9a50:	4b07      	ldr	r3, [pc, #28]	; (9a70 <ticker_stop_adv_assert+0x34>)
    9a52:	4a08      	ldr	r2, [pc, #32]	; (9a74 <ticker_stop_adv_assert+0x38>)
    9a54:	9301      	str	r3, [sp, #4]
    9a56:	4b08      	ldr	r3, [pc, #32]	; (9a78 <ticker_stop_adv_assert+0x3c>)
    9a58:	4908      	ldr	r1, [pc, #32]	; (9a7c <ticker_stop_adv_assert+0x40>)
    9a5a:	9300      	str	r3, [sp, #0]
    9a5c:	4808      	ldr	r0, [pc, #32]	; (9a80 <ticker_stop_adv_assert+0x44>)
    9a5e:	4b09      	ldr	r3, [pc, #36]	; (9a84 <ticker_stop_adv_assert+0x48>)
    9a60:	f7f7 ff18 	bl	1894 <printk>
    9a64:	b662      	cpsie	i
    9a66:	2004      	movs	r0, #4
    9a68:	df02      	svc	2
		}
	}
}
    9a6a:	bd07      	pop	{r0, r1, r2, pc}
    9a6c:	20000f68 	.word	0x20000f68
    9a70:	0001241d 	.word	0x0001241d
    9a74:	0001246d 	.word	0x0001246d
    9a78:	000124a8 	.word	0x000124a8
    9a7c:	000123e3 	.word	0x000123e3
    9a80:	000129d4 	.word	0x000129d4
    9a84:	00014cb3 	.word	0x00014cb3

00009a88 <ticker_stop_scan_assert>:

static void ticker_stop_scan_assert(u32_t status, void *params)
{
    9a88:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    9a8a:	2801      	cmp	r0, #1
    9a8c:	d113      	bne.n	9ab6 <ticker_stop_scan_assert+0x2e>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    9a8e:	4b0a      	ldr	r3, [pc, #40]	; (9ab8 <ticker_stop_scan_assert+0x30>)
    9a90:	7b9a      	ldrb	r2, [r3, #14]
    9a92:	2a06      	cmp	r2, #6
    9a94:	d102      	bne.n	9a9c <ticker_stop_scan_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Scan role as it is now transitioned
			 * to Master role).
			 */
			_radio.ticker_id_stop = 0;
    9a96:	2200      	movs	r2, #0
    9a98:	739a      	strb	r2, [r3, #14]
    9a9a:	e00c      	b.n	9ab6 <ticker_stop_scan_assert+0x2e>
		} else {
			LL_ASSERT(0);
    9a9c:	4b07      	ldr	r3, [pc, #28]	; (9abc <ticker_stop_scan_assert+0x34>)
    9a9e:	4a08      	ldr	r2, [pc, #32]	; (9ac0 <ticker_stop_scan_assert+0x38>)
    9aa0:	9301      	str	r3, [sp, #4]
    9aa2:	4b08      	ldr	r3, [pc, #32]	; (9ac4 <ticker_stop_scan_assert+0x3c>)
    9aa4:	4908      	ldr	r1, [pc, #32]	; (9ac8 <ticker_stop_scan_assert+0x40>)
    9aa6:	9300      	str	r3, [sp, #0]
    9aa8:	4808      	ldr	r0, [pc, #32]	; (9acc <ticker_stop_scan_assert+0x44>)
    9aaa:	4b09      	ldr	r3, [pc, #36]	; (9ad0 <ticker_stop_scan_assert+0x48>)
    9aac:	f7f7 fef2 	bl	1894 <printk>
    9ab0:	b662      	cpsie	i
    9ab2:	2004      	movs	r0, #4
    9ab4:	df02      	svc	2
		}
	}
}
    9ab6:	bd07      	pop	{r0, r1, r2, pc}
    9ab8:	20000f68 	.word	0x20000f68
    9abc:	0001241d 	.word	0x0001241d
    9ac0:	0001246d 	.word	0x0001246d
    9ac4:	000124a8 	.word	0x000124a8
    9ac8:	000123e3 	.word	0x000123e3
    9acc:	000129d4 	.word	0x000129d4
    9ad0:	00014c72 	.word	0x00014c72

00009ad4 <ticker_update_adv_assert>:

static void ticker_update_adv_assert(u32_t status, void *params)
{
    9ad4:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    9ad6:	2800      	cmp	r0, #0
    9ad8:	d010      	beq.n	9afc <ticker_update_adv_assert+0x28>
    9ada:	4b09      	ldr	r3, [pc, #36]	; (9b00 <ticker_update_adv_assert+0x2c>)
    9adc:	7b9b      	ldrb	r3, [r3, #14]
    9ade:	2b05      	cmp	r3, #5
    9ae0:	d00c      	beq.n	9afc <ticker_update_adv_assert+0x28>
    9ae2:	4b08      	ldr	r3, [pc, #32]	; (9b04 <ticker_update_adv_assert+0x30>)
    9ae4:	4a08      	ldr	r2, [pc, #32]	; (9b08 <ticker_update_adv_assert+0x34>)
    9ae6:	9301      	str	r3, [sp, #4]
    9ae8:	4b08      	ldr	r3, [pc, #32]	; (9b0c <ticker_update_adv_assert+0x38>)
    9aea:	4909      	ldr	r1, [pc, #36]	; (9b10 <ticker_update_adv_assert+0x3c>)
    9aec:	9300      	str	r3, [sp, #0]
    9aee:	4809      	ldr	r0, [pc, #36]	; (9b14 <ticker_update_adv_assert+0x40>)
    9af0:	4b09      	ldr	r3, [pc, #36]	; (9b18 <ticker_update_adv_assert+0x44>)
    9af2:	f7f7 fecf 	bl	1894 <printk>
    9af6:	b662      	cpsie	i
    9af8:	2004      	movs	r0, #4
    9afa:	df02      	svc	2
		  (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV));
}
    9afc:	bd07      	pop	{r0, r1, r2, pc}
    9afe:	46c0      	nop			; (mov r8, r8)
    9b00:	20000f68 	.word	0x20000f68
    9b04:	0001241d 	.word	0x0001241d
    9b08:	0001246d 	.word	0x0001246d
    9b0c:	000124a8 	.word	0x000124a8
    9b10:	000123e3 	.word	0x000123e3
    9b14:	0001371d 	.word	0x0001371d
    9b18:	000149af 	.word	0x000149af

00009b1c <ticker_update_slave_assert>:

static void ticker_update_slave_assert(u32_t status, void *params)
{
    9b1c:	b507      	push	{r0, r1, r2, lr}
	u8_t ticker_id = (u32_t)params & 0xFF;

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    9b1e:	2800      	cmp	r0, #0
    9b20:	d011      	beq.n	9b46 <ticker_update_slave_assert+0x2a>
    9b22:	4b09      	ldr	r3, [pc, #36]	; (9b48 <ticker_update_slave_assert+0x2c>)
    9b24:	b2c9      	uxtb	r1, r1
    9b26:	7b9b      	ldrb	r3, [r3, #14]
    9b28:	4299      	cmp	r1, r3
    9b2a:	d00c      	beq.n	9b46 <ticker_update_slave_assert+0x2a>
    9b2c:	4b07      	ldr	r3, [pc, #28]	; (9b4c <ticker_update_slave_assert+0x30>)
    9b2e:	4a08      	ldr	r2, [pc, #32]	; (9b50 <ticker_update_slave_assert+0x34>)
    9b30:	9301      	str	r3, [sp, #4]
    9b32:	4b08      	ldr	r3, [pc, #32]	; (9b54 <ticker_update_slave_assert+0x38>)
    9b34:	4908      	ldr	r1, [pc, #32]	; (9b58 <ticker_update_slave_assert+0x3c>)
    9b36:	9300      	str	r3, [sp, #0]
    9b38:	4808      	ldr	r0, [pc, #32]	; (9b5c <ticker_update_slave_assert+0x40>)
    9b3a:	4b09      	ldr	r3, [pc, #36]	; (9b60 <ticker_update_slave_assert+0x44>)
    9b3c:	f7f7 feaa 	bl	1894 <printk>
    9b40:	b662      	cpsie	i
    9b42:	2004      	movs	r0, #4
    9b44:	df02      	svc	2
		  (_radio.ticker_id_stop == ticker_id));
}
    9b46:	bd07      	pop	{r0, r1, r2, pc}
    9b48:	20000f68 	.word	0x20000f68
    9b4c:	0001241d 	.word	0x0001241d
    9b50:	0001246d 	.word	0x0001246d
    9b54:	000124a8 	.word	0x000124a8
    9b58:	000123e3 	.word	0x000123e3
    9b5c:	0001376c 	.word	0x0001376c
    9b60:	00014c26 	.word	0x00014c26

00009b64 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    9b64:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    9b66:	2800      	cmp	r0, #0
    9b68:	d00c      	beq.n	9b84 <ticker_op_latency_cancelled+0x20>
    9b6a:	4b09      	ldr	r3, [pc, #36]	; (9b90 <ticker_op_latency_cancelled+0x2c>)
    9b6c:	4a09      	ldr	r2, [pc, #36]	; (9b94 <ticker_op_latency_cancelled+0x30>)
    9b6e:	9301      	str	r3, [sp, #4]
    9b70:	4b09      	ldr	r3, [pc, #36]	; (9b98 <ticker_op_latency_cancelled+0x34>)
    9b72:	490a      	ldr	r1, [pc, #40]	; (9b9c <ticker_op_latency_cancelled+0x38>)
    9b74:	9300      	str	r3, [sp, #0]
    9b76:	480a      	ldr	r0, [pc, #40]	; (9ba0 <ticker_op_latency_cancelled+0x3c>)
    9b78:	4b0a      	ldr	r3, [pc, #40]	; (9ba4 <ticker_op_latency_cancelled+0x40>)
    9b7a:	f7f7 fe8b 	bl	1894 <printk>
    9b7e:	b662      	cpsie	i
    9b80:	2004      	movs	r0, #4
    9b82:	df02      	svc	2

	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
    9b84:	2210      	movs	r2, #16
    9b86:	3144      	adds	r1, #68	; 0x44
    9b88:	780b      	ldrb	r3, [r1, #0]
    9b8a:	4393      	bics	r3, r2
    9b8c:	700b      	strb	r3, [r1, #0]
}
    9b8e:	bd07      	pop	{r0, r1, r2, pc}
    9b90:	0001241d 	.word	0x0001241d
    9b94:	0001246d 	.word	0x0001246d
    9b98:	000124a8 	.word	0x000124a8
    9b9c:	000123e3 	.word	0x000123e3
    9ba0:	000137c3 	.word	0x000137c3
    9ba4:	00014b14 	.word	0x00014b14

00009ba8 <ticker_job_disable>:
	DEBUG_RADIO_ISR(0);
}

#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
static void ticker_job_disable(u32_t status, void *op_context)
{
    9ba8:	b510      	push	{r4, lr}
	ARG_UNUSED(status);
	ARG_UNUSED(op_context);

	if (_radio.state != STATE_NONE) {
    9baa:	4b05      	ldr	r3, [pc, #20]	; (9bc0 <ticker_job_disable+0x18>)
    9bac:	7c1b      	ldrb	r3, [r3, #16]
    9bae:	2b00      	cmp	r3, #0
    9bb0:	d004      	beq.n	9bbc <ticker_job_disable+0x14>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    9bb2:	2101      	movs	r1, #1
    9bb4:	2200      	movs	r2, #0
    9bb6:	0008      	movs	r0, r1
    9bb8:	f7fd fd30 	bl	761c <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);
	}
}
    9bbc:	bd10      	pop	{r4, pc}
    9bbe:	46c0      	nop			; (mov r8, r8)
    9bc0:	20000f68 	.word	0x20000f68

00009bc4 <event_stop>:
	}
}

static void event_stop(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    9bc4:	b507      	push	{r0, r1, r2, lr}
    9bc6:	001a      	movs	r2, r3
	ARG_UNUSED(lazy);

	/* Radio state requested (stop or abort) stored in context is supplied
	 * in params.
	 */
	s_mfy_radio_stop.param = context;
    9bc8:	4b0b      	ldr	r3, [pc, #44]	; (9bf8 <event_stop+0x34>)
    9bca:	609a      	str	r2, [r3, #8]

	/* Stop Radio Tx/Rx */
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9bcc:	2200      	movs	r2, #0
    9bce:	0011      	movs	r1, r2
    9bd0:	0010      	movs	r0, r2
    9bd2:	f7fd fd43 	bl	765c <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_stop);
	LL_ASSERT(!retval);
    9bd6:	2800      	cmp	r0, #0
    9bd8:	d00c      	beq.n	9bf4 <event_stop+0x30>
    9bda:	4b08      	ldr	r3, [pc, #32]	; (9bfc <event_stop+0x38>)
    9bdc:	4a08      	ldr	r2, [pc, #32]	; (9c00 <event_stop+0x3c>)
    9bde:	9301      	str	r3, [sp, #4]
    9be0:	4b08      	ldr	r3, [pc, #32]	; (9c04 <event_stop+0x40>)
    9be2:	4909      	ldr	r1, [pc, #36]	; (9c08 <event_stop+0x44>)
    9be4:	9300      	str	r3, [sp, #0]
    9be6:	4809      	ldr	r0, [pc, #36]	; (9c0c <event_stop+0x48>)
    9be8:	4b09      	ldr	r3, [pc, #36]	; (9c10 <event_stop+0x4c>)
    9bea:	f7f7 fe53 	bl	1894 <printk>
    9bee:	b662      	cpsie	i
    9bf0:	2004      	movs	r0, #4
    9bf2:	df02      	svc	2
}
    9bf4:	bd07      	pop	{r0, r1, r2, pc}
    9bf6:	46c0      	nop			; (mov r8, r8)
    9bf8:	20000538 	.word	0x20000538
    9bfc:	0001241d 	.word	0x0001241d
    9c00:	0001246d 	.word	0x0001246d
    9c04:	000124a8 	.word	0x000124a8
    9c08:	000123e3 	.word	0x000123e3
    9c0c:	00013644 	.word	0x00013644
    9c10:	000149a4 	.word	0x000149a4

00009c14 <event_adv_stop>:
	DEBUG_RADIO_START_A(0);
}

void event_adv_stop(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
		    void *context)
{
    9c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(context);

	/* Abort an event, if any, to avoid Rx queue corruption used by Radio
	 * ISR.
	 */
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    9c16:	2200      	movs	r2, #0
    9c18:	2305      	movs	r3, #5
    9c1a:	0011      	movs	r1, r2
    9c1c:	0010      	movs	r0, r2
    9c1e:	f7ff ffd1 	bl	9bc4 <event_stop>

	/* Stop Direct Adv */
	ticker_status =
    9c22:	2100      	movs	r1, #0
    9c24:	4b1a      	ldr	r3, [pc, #104]	; (9c90 <event_adv_stop+0x7c>)
    9c26:	2205      	movs	r2, #5
    9c28:	9300      	str	r3, [sp, #0]
    9c2a:	0008      	movs	r0, r1
    9c2c:	4b19      	ldr	r3, [pc, #100]	; (9c94 <event_adv_stop+0x80>)
    9c2e:	f7ff f9a1 	bl	8f74 <ticker_stop>
	    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_ID_ADV,
			ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9c32:	2302      	movs	r3, #2
    9c34:	4398      	bics	r0, r3
    9c36:	1e05      	subs	r5, r0, #0
    9c38:	d008      	beq.n	9c4c <event_adv_stop+0x38>
    9c3a:	4b17      	ldr	r3, [pc, #92]	; (9c98 <event_adv_stop+0x84>)
    9c3c:	4a17      	ldr	r2, [pc, #92]	; (9c9c <event_adv_stop+0x88>)
    9c3e:	9301      	str	r3, [sp, #4]
    9c40:	4b17      	ldr	r3, [pc, #92]	; (9ca0 <event_adv_stop+0x8c>)
    9c42:	4918      	ldr	r1, [pc, #96]	; (9ca4 <event_adv_stop+0x90>)
    9c44:	9300      	str	r3, [sp, #0]
    9c46:	4818      	ldr	r0, [pc, #96]	; (9ca8 <event_adv_stop+0x94>)
    9c48:	4b18      	ldr	r3, [pc, #96]	; (9cac <event_adv_stop+0x98>)
    9c4a:	e00c      	b.n	9c66 <event_adv_stop+0x52>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Prepare the rx packet structure */
	radio_pdu_node_rx = packet_rx_reserve_get(1);
    9c4c:	2001      	movs	r0, #1
    9c4e:	f7ff fa9f 	bl	9190 <packet_rx_reserve_get>
    9c52:	1e04      	subs	r4, r0, #0
	LL_ASSERT(radio_pdu_node_rx);
    9c54:	d10c      	bne.n	9c70 <event_adv_stop+0x5c>
    9c56:	4b10      	ldr	r3, [pc, #64]	; (9c98 <event_adv_stop+0x84>)
    9c58:	4a10      	ldr	r2, [pc, #64]	; (9c9c <event_adv_stop+0x88>)
    9c5a:	9301      	str	r3, [sp, #4]
    9c5c:	4b10      	ldr	r3, [pc, #64]	; (9ca0 <event_adv_stop+0x8c>)
    9c5e:	4911      	ldr	r1, [pc, #68]	; (9ca4 <event_adv_stop+0x90>)
    9c60:	9300      	str	r3, [sp, #0]
    9c62:	4813      	ldr	r0, [pc, #76]	; (9cb0 <event_adv_stop+0x9c>)
    9c64:	4b11      	ldr	r3, [pc, #68]	; (9cac <event_adv_stop+0x98>)
    9c66:	f7f7 fe15 	bl	1894 <printk>
    9c6a:	b662      	cpsie	i
    9c6c:	2004      	movs	r0, #4
    9c6e:	df02      	svc	2

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    9c70:	2301      	movs	r3, #1
    9c72:	425b      	negs	r3, r3
    9c74:	80c3      	strh	r3, [r0, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    9c76:	3307      	adds	r3, #7

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    9c78:	0029      	movs	r1, r5
	radio_pdu_node_rx = packet_rx_reserve_get(1);
	LL_ASSERT(radio_pdu_node_rx);

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    9c7a:	7103      	strb	r3, [r0, #4]

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    9c7c:	2218      	movs	r2, #24
	radio_pdu_node_rx->hdr.handle = 0xffff;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
    9c7e:	300b      	adds	r0, #11
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    9c80:	f7f7 f80f 	bl	ca2 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    9c84:	233c      	movs	r3, #60	; 0x3c
    9c86:	72e3      	strb	r3, [r4, #11]

	/* enqueue connection complete structure into queue */
	packet_rx_enqueue();
    9c88:	f7ff fe50 	bl	992c <packet_rx_enqueue>
}
    9c8c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    9c8e:	46c0      	nop			; (mov r8, r8)
    9c90:	000013bd 	.word	0x000013bd
    9c94:	00009a01 	.word	0x00009a01
    9c98:	0001241d 	.word	0x0001241d
    9c9c:	0001246d 	.word	0x0001246d
    9ca0:	000124a8 	.word	0x000124a8
    9ca4:	000123e3 	.word	0x000123e3
    9ca8:	000137f7 	.word	0x000137f7
    9cac:	00014980 	.word	0x00014980
    9cb0:	00013845 	.word	0x00013845

00009cb4 <event_active>:
	}
}

static void event_active(u32_t ticks_at_expire, u32_t remainder,
			 u16_t lazy, void *context)
{
    9cb4:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9cb6:	2200      	movs	r2, #0
    9cb8:	4b0a      	ldr	r3, [pc, #40]	; (9ce4 <event_active+0x30>)
    9cba:	0011      	movs	r1, r2
    9cbc:	0010      	movs	r0, r2
    9cbe:	f7fd fccd 	bl	765c <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
    9cc2:	2800      	cmp	r0, #0
    9cc4:	d00c      	beq.n	9ce0 <event_active+0x2c>
    9cc6:	4b08      	ldr	r3, [pc, #32]	; (9ce8 <event_active+0x34>)
    9cc8:	4a08      	ldr	r2, [pc, #32]	; (9cec <event_active+0x38>)
    9cca:	9301      	str	r3, [sp, #4]
    9ccc:	4b08      	ldr	r3, [pc, #32]	; (9cf0 <event_active+0x3c>)
    9cce:	4909      	ldr	r1, [pc, #36]	; (9cf4 <event_active+0x40>)
    9cd0:	9300      	str	r3, [sp, #0]
    9cd2:	4809      	ldr	r0, [pc, #36]	; (9cf8 <event_active+0x44>)
    9cd4:	4b09      	ldr	r3, [pc, #36]	; (9cfc <event_active+0x48>)
    9cd6:	f7f7 fddd 	bl	1894 <printk>
    9cda:	b662      	cpsie	i
    9cdc:	2004      	movs	r0, #4
    9cde:	df02      	svc	2
}
    9ce0:	bd07      	pop	{r0, r1, r2, pc}
    9ce2:	46c0      	nop			; (mov r8, r8)
    9ce4:	20000508 	.word	0x20000508
    9ce8:	0001241d 	.word	0x0001241d
    9cec:	0001246d 	.word	0x0001246d
    9cf0:	000124a8 	.word	0x000124a8
    9cf4:	000123e3 	.word	0x000123e3
    9cf8:	00013644 	.word	0x00013644
    9cfc:	00014a61 	.word	0x00014a61

00009d00 <event_xtal>:
	clock_control_on(_radio.hf_clock, NULL);
}

static void event_xtal(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    9d00:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9d02:	2200      	movs	r2, #0
    9d04:	4b0a      	ldr	r3, [pc, #40]	; (9d30 <event_xtal+0x30>)
    9d06:	0011      	movs	r1, r2
    9d08:	0010      	movs	r0, r2
    9d0a:	f7fd fca7 	bl	765c <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
    9d0e:	2800      	cmp	r0, #0
    9d10:	d00c      	beq.n	9d2c <event_xtal+0x2c>
    9d12:	4b08      	ldr	r3, [pc, #32]	; (9d34 <event_xtal+0x34>)
    9d14:	4a08      	ldr	r2, [pc, #32]	; (9d38 <event_xtal+0x38>)
    9d16:	9301      	str	r3, [sp, #4]
    9d18:	4b08      	ldr	r3, [pc, #32]	; (9d3c <event_xtal+0x3c>)
    9d1a:	4909      	ldr	r1, [pc, #36]	; (9d40 <event_xtal+0x40>)
    9d1c:	9300      	str	r3, [sp, #0]
    9d1e:	4809      	ldr	r0, [pc, #36]	; (9d44 <event_xtal+0x44>)
    9d20:	4b09      	ldr	r3, [pc, #36]	; (9d48 <event_xtal+0x48>)
    9d22:	f7f7 fdb7 	bl	1894 <printk>
    9d26:	b662      	cpsie	i
    9d28:	2004      	movs	r0, #4
    9d2a:	df02      	svc	2
}
    9d2c:	bd07      	pop	{r0, r1, r2, pc}
    9d2e:	46c0      	nop			; (mov r8, r8)
    9d30:	200004f8 	.word	0x200004f8
    9d34:	0001241d 	.word	0x0001241d
    9d38:	0001246d 	.word	0x0001246d
    9d3c:	000124a8 	.word	0x000124a8
    9d40:	000123e3 	.word	0x000123e3
    9d44:	00013644 	.word	0x00013644
    9d48:	000149dd 	.word	0x000149dd

00009d4c <mayfly_radio_active>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
		  (_radio.ticker_id_stop == ticker_id));
}

static void mayfly_radio_active(void *params)
{
    9d4c:	b507      	push	{r0, r1, r2, lr}
    9d4e:	4b11      	ldr	r3, [pc, #68]	; (9d94 <mayfly_radio_active+0x48>)
	static u8_t s_active;

	if ((u32_t)params) {
    9d50:	2800      	cmp	r0, #0
    9d52:	d006      	beq.n	9d62 <mayfly_radio_active+0x16>
		if (s_active++) {
    9d54:	781a      	ldrb	r2, [r3, #0]
			return;
		}

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
    9d56:	2001      	movs	r0, #1
static void mayfly_radio_active(void *params)
{
	static u8_t s_active;

	if ((u32_t)params) {
		if (s_active++) {
    9d58:	1c51      	adds	r1, r2, #1
    9d5a:	7019      	strb	r1, [r3, #0]
    9d5c:	2a00      	cmp	r2, #0
    9d5e:	d117      	bne.n	9d90 <mayfly_radio_active+0x44>
    9d60:	e014      	b.n	9d8c <mayfly_radio_active+0x40>

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
	} else {
		LL_ASSERT(s_active);
    9d62:	7818      	ldrb	r0, [r3, #0]
    9d64:	2800      	cmp	r0, #0
    9d66:	d10c      	bne.n	9d82 <mayfly_radio_active+0x36>
    9d68:	4b0b      	ldr	r3, [pc, #44]	; (9d98 <mayfly_radio_active+0x4c>)
    9d6a:	4a0c      	ldr	r2, [pc, #48]	; (9d9c <mayfly_radio_active+0x50>)
    9d6c:	9301      	str	r3, [sp, #4]
    9d6e:	4b0c      	ldr	r3, [pc, #48]	; (9da0 <mayfly_radio_active+0x54>)
    9d70:	490c      	ldr	r1, [pc, #48]	; (9da4 <mayfly_radio_active+0x58>)
    9d72:	9300      	str	r3, [sp, #0]
    9d74:	480c      	ldr	r0, [pc, #48]	; (9da8 <mayfly_radio_active+0x5c>)
    9d76:	4b0d      	ldr	r3, [pc, #52]	; (9dac <mayfly_radio_active+0x60>)
    9d78:	f7f7 fd8c 	bl	1894 <printk>
    9d7c:	b662      	cpsie	i
    9d7e:	2004      	movs	r0, #4
    9d80:	df02      	svc	2

		if (--s_active) {
    9d82:	3801      	subs	r0, #1
    9d84:	b2c0      	uxtb	r0, r0
    9d86:	7018      	strb	r0, [r3, #0]
    9d88:	2800      	cmp	r0, #0
    9d8a:	d101      	bne.n	9d90 <mayfly_radio_active+0x44>
			return;
		}

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
    9d8c:	f005 fada 	bl	f344 <radio_active_callback>
	}
}
    9d90:	bd07      	pop	{r0, r1, r2, pc}
    9d92:	46c0      	nop			; (mov r8, r8)
    9d94:	20000f4c 	.word	0x20000f4c
    9d98:	0001241d 	.word	0x0001241d
    9d9c:	0001246d 	.word	0x0001246d
    9da0:	000124a8 	.word	0x000124a8
    9da4:	000123e3 	.word	0x000123e3
    9da8:	00013878 	.word	0x00013878
    9dac:	00014c45 	.word	0x00014c45

00009db0 <mayfly_radio_inactive>:
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
}

static void mayfly_radio_inactive(void *params)
{
    9db0:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	mayfly_radio_active(0);
    9db2:	2000      	movs	r0, #0
    9db4:	f7ff ffca 	bl	9d4c <mayfly_radio_active>

	DEBUG_RADIO_CLOSE(0);
}
    9db8:	bd10      	pop	{r4, pc}
	...

00009dbc <mayfly_radio_stop>:
	}
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
    9dbc:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    9dbe:	b2c0      	uxtb	r0, r0
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    9dc0:	1f03      	subs	r3, r0, #4
    9dc2:	2b01      	cmp	r3, #1
    9dc4:	d90c      	bls.n	9de0 <mayfly_radio_stop+0x24>
    9dc6:	4b0e      	ldr	r3, [pc, #56]	; (9e00 <mayfly_radio_stop+0x44>)
    9dc8:	4a0e      	ldr	r2, [pc, #56]	; (9e04 <mayfly_radio_stop+0x48>)
    9dca:	9301      	str	r3, [sp, #4]
    9dcc:	4b0e      	ldr	r3, [pc, #56]	; (9e08 <mayfly_radio_stop+0x4c>)
    9dce:	490f      	ldr	r1, [pc, #60]	; (9e0c <mayfly_radio_stop+0x50>)
    9dd0:	9300      	str	r3, [sp, #0]
    9dd2:	480f      	ldr	r0, [pc, #60]	; (9e10 <mayfly_radio_stop+0x54>)
    9dd4:	4b0f      	ldr	r3, [pc, #60]	; (9e14 <mayfly_radio_stop+0x58>)
    9dd6:	f7f7 fd5d 	bl	1894 <printk>
    9dda:	b662      	cpsie	i
    9ddc:	2004      	movs	r0, #4
    9dde:	df02      	svc	2

	radio_used = ((_radio.state != STATE_NONE) &&
    9de0:	4a0d      	ldr	r2, [pc, #52]	; (9e18 <mayfly_radio_stop+0x5c>)
    9de2:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
    9de4:	2b00      	cmp	r3, #0
    9de6:	d006      	beq.n	9df6 <mayfly_radio_stop+0x3a>
	enum state state = (enum state)((u32_t)params & 0xff);
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
    9de8:	3b04      	subs	r3, #4
    9dea:	2b01      	cmp	r3, #1
    9dec:	d903      	bls.n	9df6 <mayfly_radio_stop+0x3a>
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
		if (radio_used) {
			_radio.state = state;
    9dee:	7410      	strb	r0, [r2, #16]
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
    9df0:	f7fd ff2c 	bl	7c4c <radio_disable>
	}
}
    9df4:	e003      	b.n	9dfe <mayfly_radio_stop+0x42>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
    9df6:	f7fd ff4d 	bl	7c94 <radio_is_idle>
    9dfa:	2800      	cmp	r0, #0
    9dfc:	d0f8      	beq.n	9df0 <mayfly_radio_stop+0x34>
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
	}
}
    9dfe:	bd07      	pop	{r0, r1, r2, pc}
    9e00:	0001241d 	.word	0x0001241d
    9e04:	0001246d 	.word	0x0001246d
    9e08:	000124a8 	.word	0x000124a8
    9e0c:	000123e3 	.word	0x000123e3
    9e10:	000138a2 	.word	0x000138a2
    9e14:	00014bf0 	.word	0x00014bf0
    9e18:	20000f68 	.word	0x20000f68

00009e1c <pdu_node_tx_release>:
	}
}

static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
    9e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u8_t last;

	last = _radio.packet_release_last + 1;
    9e1e:	24ba      	movs	r4, #186	; 0xba
	if (last == _radio.packet_tx_count) {
    9e20:	25b8      	movs	r5, #184	; 0xb8
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    9e22:	4b15      	ldr	r3, [pc, #84]	; (9e78 <pdu_node_tx_release+0x5c>)
    9e24:	0064      	lsls	r4, r4, #1
    9e26:	5d1a      	ldrb	r2, [r3, r4]
	if (last == _radio.packet_tx_count) {
    9e28:	006d      	lsls	r5, r5, #1
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    9e2a:	3201      	adds	r2, #1
	if (last == _radio.packet_tx_count) {
    9e2c:	5d5d      	ldrb	r5, [r3, r5]
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    9e2e:	b2d2      	uxtb	r2, r2
	if (last == _radio.packet_tx_count) {
    9e30:	4295      	cmp	r5, r2
    9e32:	d100      	bne.n	9e36 <pdu_node_tx_release+0x1a>
		last = 0;
    9e34:	2200      	movs	r2, #0
	}

	LL_ASSERT(last != _radio.packet_release_first);
    9e36:	2574      	movs	r5, #116	; 0x74
    9e38:	35ff      	adds	r5, #255	; 0xff
    9e3a:	5d5d      	ldrb	r5, [r3, r5]
    9e3c:	4295      	cmp	r5, r2
    9e3e:	d10c      	bne.n	9e5a <pdu_node_tx_release+0x3e>
    9e40:	4b0e      	ldr	r3, [pc, #56]	; (9e7c <pdu_node_tx_release+0x60>)
    9e42:	4a0f      	ldr	r2, [pc, #60]	; (9e80 <pdu_node_tx_release+0x64>)
    9e44:	9301      	str	r3, [sp, #4]
    9e46:	4b0f      	ldr	r3, [pc, #60]	; (9e84 <pdu_node_tx_release+0x68>)
    9e48:	490f      	ldr	r1, [pc, #60]	; (9e88 <pdu_node_tx_release+0x6c>)
    9e4a:	9300      	str	r3, [sp, #0]
    9e4c:	480f      	ldr	r0, [pc, #60]	; (9e8c <pdu_node_tx_release+0x70>)
    9e4e:	4b10      	ldr	r3, [pc, #64]	; (9e90 <pdu_node_tx_release+0x74>)
    9e50:	f7f7 fd20 	bl	1894 <printk>
    9e54:	b662      	cpsie	i
    9e56:	2004      	movs	r0, #4
    9e58:	df02      	svc	2

	/* Enqueue app mem for release */
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    9e5a:	001d      	movs	r5, r3
    9e5c:	35fc      	adds	r5, #252	; 0xfc
    9e5e:	6f2e      	ldr	r6, [r5, #112]	; 0x70
    9e60:	5d1d      	ldrb	r5, [r3, r4]
    9e62:	00ed      	lsls	r5, r5, #3
    9e64:	53a8      	strh	r0, [r5, r6]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    9e66:	5d18      	ldrb	r0, [r3, r4]
    9e68:	00c0      	lsls	r0, r0, #3
    9e6a:	1830      	adds	r0, r6, r0
    9e6c:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
    9e6e:	551a      	strb	r2, [r3, r4]
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    9e70:	f005 fa6a 	bl	f348 <radio_event_callback>
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
	_radio.packet_release_last = last;

	/* callback to trigger application action */
	packet_rx_callback();
}
    9e74:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    9e76:	46c0      	nop			; (mov r8, r8)
    9e78:	20000f68 	.word	0x20000f68
    9e7c:	0001241d 	.word	0x0001241d
    9e80:	0001246d 	.word	0x0001246d
    9e84:	000124a8 	.word	0x000124a8
    9e88:	000123e3 	.word	0x000123e3
    9e8c:	000138f3 	.word	0x000138f3
    9e90:	00014bdc 	.word	0x00014bdc

00009e94 <packet_tx_enqueue>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void packet_tx_enqueue(u8_t max)
{
    9e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9e96:	9001      	str	r0, [sp, #4]
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    9e98:	9b01      	ldr	r3, [sp, #4]
    9e9a:	2b00      	cmp	r3, #0
    9e9c:	d042      	beq.n	9f24 <packet_tx_enqueue+0x90>
    9e9e:	2772      	movs	r7, #114	; 0x72
    9ea0:	23b9      	movs	r3, #185	; 0xb9
    9ea2:	4e21      	ldr	r6, [pc, #132]	; (9f28 <packet_tx_enqueue+0x94>)
    9ea4:	005b      	lsls	r3, r3, #1
    9ea6:	37ff      	adds	r7, #255	; 0xff
    9ea8:	5cf1      	ldrb	r1, [r6, r3]
    9eaa:	5df2      	ldrb	r2, [r6, r7]
    9eac:	0033      	movs	r3, r6
    9eae:	4291      	cmp	r1, r2
    9eb0:	d038      	beq.n	9f24 <packet_tx_enqueue+0x90>
		struct pdu_data_q_tx *pdu_data_q_tx;
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    9eb2:	33fc      	adds	r3, #252	; 0xfc
    9eb4:	5df5      	ldrb	r5, [r6, r7]
    9eb6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    9eb8:	00ed      	lsls	r5, r5, #3
    9eba:	1955      	adds	r5, r2, r5
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9ebc:	218c      	movs	r1, #140	; 0x8c
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    9ebe:	2200      	movs	r2, #0
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
    9ec0:	686c      	ldr	r4, [r5, #4]
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9ec2:	6898      	ldr	r0, [r3, #8]
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    9ec4:	6022      	str	r2, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9ec6:	0049      	lsls	r1, r1, #1
    9ec8:	882a      	ldrh	r2, [r5, #0]
    9eca:	f7fd fd06 	bl	78da <mem_get>
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
    9ece:	882b      	ldrh	r3, [r5, #0]
    9ed0:	8c02      	ldrh	r2, [r0, #32]
    9ed2:	429a      	cmp	r2, r3
    9ed4:	d10f      	bne.n	9ef6 <packet_tx_enqueue+0x62>
			if (conn->pkt_tx_data == 0) {
    9ed6:	30fc      	adds	r0, #252	; 0xfc
    9ed8:	6903      	ldr	r3, [r0, #16]
    9eda:	2b00      	cmp	r3, #0
    9edc:	d105      	bne.n	9eea <packet_tx_enqueue+0x56>
				conn->pkt_tx_data = node_tx_new;

				if (conn->pkt_tx_head == 0) {
    9ede:	6883      	ldr	r3, [r0, #8]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
			if (conn->pkt_tx_data == 0) {
				conn->pkt_tx_data = node_tx_new;
    9ee0:	6104      	str	r4, [r0, #16]

				if (conn->pkt_tx_head == 0) {
    9ee2:	2b00      	cmp	r3, #0
    9ee4:	d101      	bne.n	9eea <packet_tx_enqueue+0x56>
					conn->pkt_tx_head = node_tx_new;
    9ee6:	6084      	str	r4, [r0, #8]
					conn->pkt_tx_last = NULL;
    9ee8:	6143      	str	r3, [r0, #20]
				}
			}

			if (conn->pkt_tx_last) {
    9eea:	6943      	ldr	r3, [r0, #20]
    9eec:	2b00      	cmp	r3, #0
    9eee:	d000      	beq.n	9ef2 <packet_tx_enqueue+0x5e>
				conn->pkt_tx_last->next = node_tx_new;
    9ef0:	601c      	str	r4, [r3, #0]
			}

			conn->pkt_tx_last = node_tx_new;
    9ef2:	6144      	str	r4, [r0, #20]
    9ef4:	e007      	b.n	9f06 <packet_tx_enqueue+0x72>
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    9ef6:	2203      	movs	r2, #3
    9ef8:	7923      	ldrb	r3, [r4, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    9efa:	0021      	movs	r1, r4
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    9efc:	4393      	bics	r3, r2
    9efe:	7123      	strb	r3, [r4, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    9f00:	8828      	ldrh	r0, [r5, #0]
    9f02:	f7ff ff8b 	bl	9e1c <pdu_node_tx_release>
		}

		first = _radio.packet_tx_first + 1;
		if (first == _radio.packet_tx_count) {
    9f06:	22b8      	movs	r2, #184	; 0xb8
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    9f08:	5df3      	ldrb	r3, [r6, r7]
		if (first == _radio.packet_tx_count) {
    9f0a:	0052      	lsls	r2, r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    9f0c:	3301      	adds	r3, #1
		if (first == _radio.packet_tx_count) {
    9f0e:	5cb2      	ldrb	r2, [r6, r2]
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    9f10:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
    9f12:	429a      	cmp	r2, r3
    9f14:	d100      	bne.n	9f18 <packet_tx_enqueue+0x84>
			first = 0;
    9f16:	2300      	movs	r3, #0
		}
		_radio.packet_tx_first = first;
    9f18:	55f3      	strb	r3, [r6, r7]
    9f1a:	9f01      	ldr	r7, [sp, #4]
    9f1c:	3f01      	subs	r7, #1
    9f1e:	b2fb      	uxtb	r3, r7
    9f20:	9301      	str	r3, [sp, #4]
    9f22:	e7b9      	b.n	9e98 <packet_tx_enqueue+0x4>
	}
}
    9f24:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    9f26:	46c0      	nop			; (mov r8, r8)
    9f28:	20000f68 	.word	0x20000f68

00009f2c <event_common_prepare>:
				  u32_t *ticks_active_to_start,
				  u32_t ticks_preempt_to_start,
				  u8_t ticker_id,
				  ticker_timeout_func ticker_timeout_fp,
				  void *context)
{
    9f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f2e:	0005      	movs	r5, r0
    9f30:	0017      	movs	r7, r2
    9f32:	b08f      	sub	sp, #60	; 0x3c
    9f34:	930a      	str	r3, [sp, #40]	; 0x28
    9f36:	ab14      	add	r3, sp, #80	; 0x50
    9f38:	cb04      	ldmia	r3!, {r2}
    9f3a:	910d      	str	r1, [sp, #52]	; 0x34
    9f3c:	781b      	ldrb	r3, [r3, #0]
    9f3e:	920b      	str	r2, [sp, #44]	; 0x2c
    9f40:	930c      	str	r3, [sp, #48]	; 0x30
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    9f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				  u8_t ticker_id,
				  ticker_timeout_func ticker_timeout_fp,
				  void *context)
{
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    9f44:	683c      	ldr	r4, [r7, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    9f46:	681e      	ldr	r6, [r3, #0]
	u32_t ticks_to_start;

	/* Check for stale ticks_at_expire */
	if (ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire) >
    9f48:	f7ff f8b0 	bl	90ac <ticker_ticks_now_get>
    9f4c:	0029      	movs	r1, r5
    9f4e:	f7ff f8b1 	bl	90b4 <ticker_ticks_diff_get>
    9f52:	2809      	cmp	r0, #9
    9f54:	d907      	bls.n	9f66 <event_common_prepare+0x3a>
	    TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
		/* Abort any running role, as it probably is the cause for
		 * stale ticks_at_expire.
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    9f56:	2200      	movs	r2, #0
    9f58:	2305      	movs	r3, #5
    9f5a:	0011      	movs	r1, r2
    9f5c:	0010      	movs	r0, r2
    9f5e:	f7ff fe31 	bl	9bc4 <event_stop>

		/* TODO: How much consecutive skips is tolerable? */
		return 1;
    9f62:	2501      	movs	r5, #1
    9f64:	e0b9      	b.n	a0da <event_common_prepare+0x1ae>
	}

	/* in case this event is short prepare, xtal to start duration will be
	 * active to start duration.
	 */
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
    9f66:	2c00      	cmp	r4, #0
    9f68:	da04      	bge.n	9f74 <event_common_prepare+0x48>
		_ticks_xtal_to_start =
    9f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9f6c:	0034      	movs	r4, r6
    9f6e:	429e      	cmp	r6, r3
    9f70:	d200      	bcs.n	9f74 <event_common_prepare+0x48>
    9f72:	001c      	movs	r4, r3

	/* decide whether its XTAL start or active event that is the current
	 * execution context and accordingly setup the ticker for the other
	 * event (XTAL or active event). These are oneshot ticker.
	 */
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    9f74:	42b4      	cmp	r4, r6
    9f76:	d919      	bls.n	9fac <event_common_prepare+0x80>

		/* XTAL is before Active */
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
		ticks_to_start = _ticks_xtal_to_start;

		ticker_status =
    9f78:	2000      	movs	r0, #0
    9f7a:	4b59      	ldr	r3, [pc, #356]	; (a0e0 <event_common_prepare+0x1b4>)
    9f7c:	9006      	str	r0, [sp, #24]
    9f7e:	9308      	str	r3, [sp, #32]
    9f80:	4b58      	ldr	r3, [pc, #352]	; (a0e4 <event_common_prepare+0x1b8>)
    9f82:	9004      	str	r0, [sp, #16]
    9f84:	9307      	str	r3, [sp, #28]
    9f86:	4b58      	ldr	r3, [pc, #352]	; (a0e8 <event_common_prepare+0x1bc>)
    9f88:	9003      	str	r0, [sp, #12]
    9f8a:	9305      	str	r3, [sp, #20]
    9f8c:	1ba3      	subs	r3, r4, r6
    9f8e:	9300      	str	r3, [sp, #0]
    9f90:	9002      	str	r0, [sp, #8]
    9f92:	002b      	movs	r3, r5
    9f94:	9001      	str	r0, [sp, #4]
    9f96:	2201      	movs	r2, #1
    9f98:	0001      	movs	r1, r0
    9f9a:	f7fe ff53 	bl	8e44 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_active, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_active, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9f9e:	2302      	movs	r3, #2
    9fa0:	4398      	bics	r0, r3
    9fa2:	d177      	bne.n	a094 <event_common_prepare+0x168>
			  (ticker_status == TICKER_STATUS_BUSY));

		event_xtal(0, 0, 0, NULL);
    9fa4:	0003      	movs	r3, r0
    9fa6:	0002      	movs	r2, r0
    9fa8:	0001      	movs	r1, r0
    9faa:	e029      	b.n	a000 <event_common_prepare+0xd4>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    9fac:	42b4      	cmp	r4, r6
    9fae:	d21d      	bcs.n	9fec <event_common_prepare+0xc0>

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);
    9fb0:	2300      	movs	r3, #0
    9fb2:	001a      	movs	r2, r3
    9fb4:	0019      	movs	r1, r3
    9fb6:	0018      	movs	r0, r3
    9fb8:	f7ff fe7c 	bl	9cb4 <event_active>

		ticker_status =
    9fbc:	2000      	movs	r0, #0
    9fbe:	4b4b      	ldr	r3, [pc, #300]	; (a0ec <event_common_prepare+0x1c0>)
		event_xtal(0, 0, 0, NULL);
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
		u32_t ticks_to_xtal;

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    9fc0:	1b34      	subs	r4, r6, r4
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);

		ticker_status =
    9fc2:	9308      	str	r3, [sp, #32]
    9fc4:	4b47      	ldr	r3, [pc, #284]	; (a0e4 <event_common_prepare+0x1b8>)
    9fc6:	9006      	str	r0, [sp, #24]
    9fc8:	9307      	str	r3, [sp, #28]
    9fca:	4b49      	ldr	r3, [pc, #292]	; (a0f0 <event_common_prepare+0x1c4>)
    9fcc:	9004      	str	r0, [sp, #16]
    9fce:	9305      	str	r3, [sp, #20]
    9fd0:	9003      	str	r0, [sp, #12]
    9fd2:	002b      	movs	r3, r5
    9fd4:	9002      	str	r0, [sp, #8]
    9fd6:	9001      	str	r0, [sp, #4]
    9fd8:	9400      	str	r4, [sp, #0]
    9fda:	2201      	movs	r2, #1
    9fdc:	0001      	movs	r1, r0
    9fde:	f7fe ff31 	bl	8e44 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_xtal, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_xtal, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9fe2:	2302      	movs	r3, #2
    9fe4:	4398      	bics	r0, r3
    9fe6:	d155      	bne.n	a094 <event_common_prepare+0x168>
    9fe8:	0034      	movs	r4, r6
    9fea:	e00b      	b.n	a004 <event_common_prepare+0xd8>
		/* Active and XTAL are at the same time,
		 * no ticker required to be setup.
		 */
		ticks_to_start = _ticks_xtal_to_start;

		event_active(0, 0, 0, NULL);
    9fec:	2300      	movs	r3, #0
    9fee:	001a      	movs	r2, r3
    9ff0:	0019      	movs	r1, r3
    9ff2:	0018      	movs	r0, r3
    9ff4:	f7ff fe5e 	bl	9cb4 <event_active>
		event_xtal(0, 0, 0, NULL);
    9ff8:	2300      	movs	r3, #0
    9ffa:	001a      	movs	r2, r3
    9ffc:	0019      	movs	r1, r3
    9ffe:	0018      	movs	r0, r3
    a000:	f7ff fe7e 	bl	9d00 <event_xtal>

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;

	/* setup the start ticker */
	ticker_status =
    a004:	2000      	movs	r0, #0
		event_active(0, 0, 0, NULL);
		event_xtal(0, 0, 0, NULL);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    a006:	4b3b      	ldr	r3, [pc, #236]	; (a0f4 <event_common_prepare+0x1c8>)
    a008:	9a0d      	ldr	r2, [sp, #52]	; 0x34

	/* setup the start ticker */
	ticker_status =
    a00a:	0001      	movs	r1, r0
		event_active(0, 0, 0, NULL);
		event_xtal(0, 0, 0, NULL);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    a00c:	609a      	str	r2, [r3, #8]

	/* setup the start ticker */
	ticker_status =
    a00e:	4b3a      	ldr	r3, [pc, #232]	; (a0f8 <event_common_prepare+0x1cc>)
    a010:	9004      	str	r0, [sp, #16]
    a012:	9308      	str	r3, [sp, #32]
    a014:	4b33      	ldr	r3, [pc, #204]	; (a0e4 <event_common_prepare+0x1b8>)
    a016:	9003      	str	r0, [sp, #12]
    a018:	9307      	str	r3, [sp, #28]
    a01a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a01c:	9002      	str	r0, [sp, #8]
    a01e:	9306      	str	r3, [sp, #24]
    a020:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a022:	9001      	str	r0, [sp, #4]
    a024:	9305      	str	r3, [sp, #20]
    a026:	9400      	str	r4, [sp, #0]
    a028:	002b      	movs	r3, r5
    a02a:	0002      	movs	r2, r0
    a02c:	f7fe ff0a 	bl	8e44 <ticker_start>
			     ticks_at_expire, ticks_to_start,
			     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
			     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
			     ticker_timeout_fp, context, ticker_success_assert,
			     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a030:	2302      	movs	r3, #2
    a032:	4398      	bics	r0, r3
    a034:	4b2b      	ldr	r3, [pc, #172]	; (a0e4 <event_common_prepare+0x1b8>)
    a036:	1e05      	subs	r5, r0, #0
    a038:	930b      	str	r3, [sp, #44]	; 0x2c
    a03a:	d12b      	bne.n	a094 <event_common_prepare+0x168>
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#else
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    a03c:	2305      	movs	r3, #5
    a03e:	0002      	movs	r2, r0
    a040:	0001      	movs	r1, r0
    a042:	f7ff fdbf 	bl	9bc4 <event_stop>
#endif
#undef RADIO_DEFERRED_PREEMPT

	/** Handle change in _ticks_active_to_start */
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    a046:	23c0      	movs	r3, #192	; 0xc0
    a048:	4a2a      	ldr	r2, [pc, #168]	; (a0f4 <event_common_prepare+0x1c8>)
    a04a:	005b      	lsls	r3, r3, #1
    a04c:	58d2      	ldr	r2, [r2, r3]
    a04e:	4296      	cmp	r6, r2
    a050:	d029      	beq.n	a0a6 <event_common_prepare+0x17a>
		u32_t ticks_to_start_new =
    a052:	683b      	ldr	r3, [r7, #0]
    a054:	005b      	lsls	r3, r3, #1
    a056:	085b      	lsrs	r3, r3, #1
    a058:	4293      	cmp	r3, r2
    a05a:	d200      	bcs.n	a05e <event_common_prepare+0x132>
    a05c:	0013      	movs	r3, r2
			((_radio.ticks_active_to_start <
			  (*ticks_xtal_to_start & ~(((u32_t)1 << 31)))) ?
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;
    a05e:	990a      	ldr	r1, [sp, #40]	; 0x28
    a060:	600a      	str	r2, [r1, #0]

		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
    a062:	683a      	ldr	r2, [r7, #0]
    a064:	2a00      	cmp	r2, #0
    a066:	da02      	bge.n	a06e <event_common_prepare+0x142>
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
    a068:	0052      	lsls	r2, r2, #1
    a06a:	0852      	lsrs	r2, r2, #1
    a06c:	603a      	str	r2, [r7, #0]
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    a06e:	2000      	movs	r0, #0
    a070:	4922      	ldr	r1, [pc, #136]	; (a0fc <event_common_prepare+0x1d0>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    a072:	b29a      	uxth	r2, r3
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    a074:	9106      	str	r1, [sp, #24]
    a076:	990b      	ldr	r1, [sp, #44]	; 0x2c
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    a078:	b2a3      	uxth	r3, r4
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    a07a:	9105      	str	r1, [sp, #20]
    a07c:	9302      	str	r3, [sp, #8]
    a07e:	9201      	str	r2, [sp, #4]
    a080:	9200      	str	r2, [sp, #0]
    a082:	9004      	str	r0, [sp, #16]
    a084:	9003      	str	r0, [sp, #12]
    a086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a088:	0001      	movs	r1, r0
    a08a:	f7fe ff23 	bl	8ed4 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      RADIO_TICKER_USER_ID_WORKER, ticker_id,
				      ticks_to_start, ticks_to_start_new,
				      ticks_to_start_new, ticks_to_start, 0, 0,
				      ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a08e:	2302      	movs	r3, #2
    a090:	4398      	bics	r0, r3
    a092:	d008      	beq.n	a0a6 <event_common_prepare+0x17a>
    a094:	4b1a      	ldr	r3, [pc, #104]	; (a100 <event_common_prepare+0x1d4>)
    a096:	4a1b      	ldr	r2, [pc, #108]	; (a104 <event_common_prepare+0x1d8>)
    a098:	9301      	str	r3, [sp, #4]
    a09a:	4b1b      	ldr	r3, [pc, #108]	; (a108 <event_common_prepare+0x1dc>)
    a09c:	491b      	ldr	r1, [pc, #108]	; (a10c <event_common_prepare+0x1e0>)
    a09e:	9300      	str	r3, [sp, #0]
    a0a0:	481b      	ldr	r0, [pc, #108]	; (a110 <event_common_prepare+0x1e4>)
    a0a2:	4b1c      	ldr	r3, [pc, #112]	; (a114 <event_common_prepare+0x1e8>)
    a0a4:	e014      	b.n	a0d0 <event_common_prepare+0x1a4>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* route all packets queued for connections */
	packet_tx_enqueue(0xFF);
    a0a6:	20ff      	movs	r0, #255	; 0xff
    a0a8:	f7ff fef4 	bl	9e94 <packet_tx_enqueue>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    a0ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a0ae:	4b1a      	ldr	r3, [pc, #104]	; (a118 <event_common_prepare+0x1ec>)

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a0b0:	2000      	movs	r0, #0
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    a0b2:	609a      	str	r2, [r3, #8]

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    a0b4:	2201      	movs	r2, #1
    a0b6:	0011      	movs	r1, r2
    a0b8:	f7fd fad0 	bl	765c <mayfly_enqueue>
					RADIO_TICKER_USER_ID_JOB, 1,
					&s_mfy_xtal_stop_calc);
		LL_ASSERT(!retval);
    a0bc:	2800      	cmp	r0, #0
    a0be:	d00c      	beq.n	a0da <event_common_prepare+0x1ae>
    a0c0:	4b0f      	ldr	r3, [pc, #60]	; (a100 <event_common_prepare+0x1d4>)
    a0c2:	4a10      	ldr	r2, [pc, #64]	; (a104 <event_common_prepare+0x1d8>)
    a0c4:	9301      	str	r3, [sp, #4]
    a0c6:	4b10      	ldr	r3, [pc, #64]	; (a108 <event_common_prepare+0x1dc>)
    a0c8:	4910      	ldr	r1, [pc, #64]	; (a10c <event_common_prepare+0x1e0>)
    a0ca:	9300      	str	r3, [sp, #0]
    a0cc:	4813      	ldr	r0, [pc, #76]	; (a11c <event_common_prepare+0x1f0>)
    a0ce:	4b11      	ldr	r3, [pc, #68]	; (a114 <event_common_prepare+0x1e8>)
    a0d0:	f7f7 fbe0 	bl	1894 <printk>
    a0d4:	b662      	cpsie	i
    a0d6:	2004      	movs	r0, #4
    a0d8:	df02      	svc	2
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED */

	return 0;
}
    a0da:	0028      	movs	r0, r5
    a0dc:	b00f      	add	sp, #60	; 0x3c
    a0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0e0:	00001168 	.word	0x00001168
    a0e4:	00009a01 	.word	0x00009a01
    a0e8:	00009cb5 	.word	0x00009cb5
    a0ec:	0000117d 	.word	0x0000117d
    a0f0:	00009d01 	.word	0x00009d01
    a0f4:	20000f68 	.word	0x20000f68
    a0f8:	00001195 	.word	0x00001195
    a0fc:	000011c2 	.word	0x000011c2
    a100:	0001241d 	.word	0x0001241d
    a104:	0001246d 	.word	0x0001246d
    a108:	000124a8 	.word	0x000124a8
    a10c:	000123e3 	.word	0x000123e3
    a110:	000137f7 	.word	0x000137f7
    a114:	000149c8 	.word	0x000149c8
    a118:	200004d8 	.word	0x200004d8
    a11c:	00013644 	.word	0x00013644

0000a120 <connection_release>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    a120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    a122:	2201      	movs	r2, #1
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    a124:	0005      	movs	r5, r0
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    a126:	0011      	movs	r1, r2
    a128:	2000      	movs	r0, #0
    a12a:	f7fd fa77 	bl	761c <mayfly_enable>
	/** @todo correctly stop tickers ensuring crystal and radio active are
	 * placed in right states
	 */

	/* Stop Master/Slave role ticker */
	ticker_status =
    a12e:	2100      	movs	r1, #0
    a130:	8c2a      	ldrh	r2, [r5, #32]
    a132:	4f39      	ldr	r7, [pc, #228]	; (a218 <connection_release+0xf8>)
    a134:	4b39      	ldr	r3, [pc, #228]	; (a21c <connection_release+0xfc>)
    a136:	3207      	adds	r2, #7
    a138:	9300      	str	r3, [sp, #0]
    a13a:	b2d2      	uxtb	r2, r2
    a13c:	003b      	movs	r3, r7
    a13e:	0008      	movs	r0, r1
    a140:	f7fe ff18 	bl	8f74 <ticker_stop>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a144:	2402      	movs	r4, #2
    a146:	43a0      	bics	r0, r4
    a148:	d11d      	bne.n	a186 <connection_release+0x66>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    a14a:	4b35      	ldr	r3, [pc, #212]	; (a220 <connection_release+0x100>)
    a14c:	7c1a      	ldrb	r2, [r3, #16]
    a14e:	001e      	movs	r6, r3
    a150:	2a05      	cmp	r2, #5
    a152:	d001      	beq.n	a158 <connection_release+0x38>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    a154:	2703      	movs	r7, #3
    a156:	e02f      	b.n	a1b8 <connection_release+0x98>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    a158:	7b1a      	ldrb	r2, [r3, #12]
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    a15a:	8c2b      	ldrh	r3, [r5, #32]
    a15c:	3307      	adds	r3, #7
    a15e:	429a      	cmp	r2, r3
    a160:	d1f8      	bne.n	a154 <connection_release+0x34>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
					  conn->handle))) {
		ticker_status =
    a162:	4b30      	ldr	r3, [pc, #192]	; (a224 <connection_release+0x104>)
    a164:	2201      	movs	r2, #1
    a166:	9300      	str	r3, [sp, #0]
    a168:	0001      	movs	r1, r0
    a16a:	003b      	movs	r3, r7
    a16c:	f7fe ff02 	bl	8f74 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_MARKER_0,
				    ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a170:	43a0      	bics	r0, r4
    a172:	d108      	bne.n	a186 <connection_release+0x66>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    a174:	4b2c      	ldr	r3, [pc, #176]	; (a228 <connection_release+0x108>)
    a176:	0002      	movs	r2, r0
    a178:	9300      	str	r3, [sp, #0]
    a17a:	0001      	movs	r1, r0
    a17c:	003b      	movs	r3, r7
    a17e:	f7fe fef9 	bl	8f74 <ticker_stop>
		    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_ID_EVENT,
				ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a182:	43a0      	bics	r0, r4
    a184:	d0e6      	beq.n	a154 <connection_release+0x34>
    a186:	4b29      	ldr	r3, [pc, #164]	; (a22c <connection_release+0x10c>)
    a188:	4a29      	ldr	r2, [pc, #164]	; (a230 <connection_release+0x110>)
    a18a:	9301      	str	r3, [sp, #4]
    a18c:	4b29      	ldr	r3, [pc, #164]	; (a234 <connection_release+0x114>)
    a18e:	492a      	ldr	r1, [pc, #168]	; (a238 <connection_release+0x118>)
    a190:	9300      	str	r3, [sp, #0]
    a192:	482a      	ldr	r0, [pc, #168]	; (a23c <connection_release+0x11c>)
    a194:	4b2a      	ldr	r3, [pc, #168]	; (a240 <connection_release+0x120>)
    a196:	f7f7 fb7d 	bl	1894 <printk>
    a19a:	b662      	cpsie	i
    a19c:	2004      	movs	r0, #4
    a19e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    a1a0:	6923      	ldr	r3, [r4, #16]
    a1a2:	4299      	cmp	r1, r3
    a1a4:	d01a      	beq.n	a1dc <connection_release+0xbc>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    a1a6:	790b      	ldrb	r3, [r1, #4]
    a1a8:	43bb      	bics	r3, r7
    a1aa:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    a1ac:	68a3      	ldr	r3, [r4, #8]
    a1ae:	681b      	ldr	r3, [r3, #0]
    a1b0:	60a3      	str	r3, [r4, #8]

		pdu_node_tx_release(conn->handle, node_tx);
    a1b2:	8c28      	ldrh	r0, [r5, #32]
    a1b4:	f7ff fe32 	bl	9e1c <pdu_node_tx_release>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    a1b8:	002c      	movs	r4, r5
    a1ba:	34fc      	adds	r4, #252	; 0xfc
    a1bc:	68a1      	ldr	r1, [r4, #8]
    a1be:	68e3      	ldr	r3, [r4, #12]
    a1c0:	4299      	cmp	r1, r3
    a1c2:	d1ed      	bne.n	a1a0 <connection_release+0x80>
    a1c4:	e00a      	b.n	a1dc <connection_release+0xbc>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    a1c6:	6923      	ldr	r3, [r4, #16]
    a1c8:	4298      	cmp	r0, r3
    a1ca:	d00a      	beq.n	a1e2 <connection_release+0xc2>

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    a1cc:	0031      	movs	r1, r6
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    a1ce:	6803      	ldr	r3, [r0, #0]
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    a1d0:	3159      	adds	r1, #89	; 0x59
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    a1d2:	60a3      	str	r3, [r4, #8]
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    a1d4:	60e3      	str	r3, [r4, #12]

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    a1d6:	31ff      	adds	r1, #255	; 0xff
    a1d8:	f7fd fb61 	bl	789e <mem_release>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    a1dc:	68a0      	ldr	r0, [r4, #8]
    a1de:	2800      	cmp	r0, #0
    a1e0:	d1f1      	bne.n	a1c6 <connection_release+0xa6>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    a1e2:	2300      	movs	r3, #0
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    a1e4:	2703      	movs	r7, #3
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    a1e6:	60e3      	str	r3, [r4, #12]

	/* flush and release, rest of data */
	while (conn->pkt_tx_head) {
    a1e8:	68a1      	ldr	r1, [r4, #8]
    a1ea:	2900      	cmp	r1, #0
    a1ec:	d00a      	beq.n	a204 <connection_release+0xe4>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    a1ee:	790b      	ldrb	r3, [r1, #4]
    a1f0:	43bb      	bics	r3, r7
    a1f2:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    a1f4:	68a3      	ldr	r3, [r4, #8]
    a1f6:	681b      	ldr	r3, [r3, #0]
    a1f8:	60a3      	str	r3, [r4, #8]
		conn->pkt_tx_data = conn->pkt_tx_head;
    a1fa:	6123      	str	r3, [r4, #16]

		pdu_node_tx_release(conn->handle, node_tx);
    a1fc:	8c28      	ldrh	r0, [r5, #32]
    a1fe:	f7ff fe0d 	bl	9e1c <pdu_node_tx_release>
    a202:	e7f1      	b.n	a1e8 <connection_release+0xc8>
	}

	conn->handle = 0xffff;
    a204:	2301      	movs	r3, #1
    a206:	425b      	negs	r3, r3
    a208:	842b      	strh	r3, [r5, #32]

	/* reset mutex */
	if (_radio.conn_upd == conn) {
    a20a:	3386      	adds	r3, #134	; 0x86
    a20c:	33ff      	adds	r3, #255	; 0xff
    a20e:	58f2      	ldr	r2, [r6, r3]
    a210:	4295      	cmp	r5, r2
    a212:	d100      	bne.n	a216 <connection_release+0xf6>
		_radio.conn_upd = NULL;
    a214:	50f1      	str	r1, [r6, r3]
	}
}
    a216:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    a218:	00009a01 	.word	0x00009a01
    a21c:	00001cf6 	.word	0x00001cf6
    a220:	20000f68 	.word	0x20000f68
    a224:	00001d02 	.word	0x00001d02
    a228:	00001d09 	.word	0x00001d09
    a22c:	0001241d 	.word	0x0001241d
    a230:	0001246d 	.word	0x0001246d
    a234:	000124a8 	.word	0x000124a8
    a238:	000123e3 	.word	0x000123e3
    a23c:	000137f7 	.word	0x000137f7
    a240:	00014c02 	.word	0x00014c02

0000a244 <chan_set>:
}
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
    a244:	b513      	push	{r0, r1, r4, lr}
    a246:	0004      	movs	r4, r0
	switch (chan) {
    a248:	2826      	cmp	r0, #38	; 0x26
    a24a:	d005      	beq.n	a258 <chan_set+0x14>
    a24c:	2827      	cmp	r0, #39	; 0x27
    a24e:	d005      	beq.n	a25c <chan_set+0x18>
	case 37:
		radio_freq_chan_set(2);
    a250:	2002      	movs	r0, #2
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
	switch (chan) {
    a252:	2c25      	cmp	r4, #37	; 0x25
    a254:	d104      	bne.n	a260 <chan_set+0x1c>
    a256:	e007      	b.n	a268 <chan_set+0x24>
	case 37:
		radio_freq_chan_set(2);
		break;

	case 38:
		radio_freq_chan_set(26);
    a258:	201a      	movs	r0, #26
    a25a:	e005      	b.n	a268 <chan_set+0x24>
		break;

	case 39:
		radio_freq_chan_set(80);
    a25c:	2050      	movs	r0, #80	; 0x50
    a25e:	e003      	b.n	a268 <chan_set+0x24>
		break;

	default:
		if (chan < 11) {
    a260:	2c0a      	cmp	r4, #10
    a262:	d807      	bhi.n	a274 <chan_set+0x30>
			radio_freq_chan_set(4 + (2 * chan));
    a264:	1ca0      	adds	r0, r4, #2
    a266:	0040      	lsls	r0, r0, #1
    a268:	f7fd fc80 	bl	7b6c <radio_freq_chan_set>
			LL_ASSERT(0);
		}
		break;
	}

	radio_whiten_iv_set(chan);
    a26c:	0020      	movs	r0, r4
    a26e:	f7fd fc85 	bl	7b7c <radio_whiten_iv_set>
}
    a272:	bd13      	pop	{r0, r1, r4, pc}

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    a274:	1ce0      	adds	r0, r4, #3
		break;

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
    a276:	2c27      	cmp	r4, #39	; 0x27
    a278:	d9f5      	bls.n	a266 <chan_set+0x22>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
		} else {
			LL_ASSERT(0);
    a27a:	4b06      	ldr	r3, [pc, #24]	; (a294 <chan_set+0x50>)
    a27c:	4a06      	ldr	r2, [pc, #24]	; (a298 <chan_set+0x54>)
    a27e:	9301      	str	r3, [sp, #4]
    a280:	4b06      	ldr	r3, [pc, #24]	; (a29c <chan_set+0x58>)
    a282:	4907      	ldr	r1, [pc, #28]	; (a2a0 <chan_set+0x5c>)
    a284:	9300      	str	r3, [sp, #0]
    a286:	4807      	ldr	r0, [pc, #28]	; (a2a4 <chan_set+0x60>)
    a288:	4b07      	ldr	r3, [pc, #28]	; (a2a8 <chan_set+0x64>)
    a28a:	f7f7 fb03 	bl	1894 <printk>
    a28e:	b662      	cpsie	i
    a290:	2004      	movs	r0, #4
    a292:	df02      	svc	2
    a294:	0001241d 	.word	0x0001241d
    a298:	0001246d 	.word	0x0001246d
    a29c:	000124a8 	.word	0x000124a8
    a2a0:	000123e3 	.word	0x000123e3
    a2a4:	000129d4 	.word	0x000129d4
    a2a8:	0001489b 	.word	0x0001489b

0000a2ac <adv_setup>:

	DEBUG_RADIO_PREPARE_A(0);
}

static void adv_setup(void)
{
    a2ac:	b570      	push	{r4, r5, r6, lr}
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    a2ae:	4c35      	ldr	r4, [pc, #212]	; (a384 <adv_setup+0xd8>)
    a2b0:	0023      	movs	r3, r4
	    _radio.advertiser.adv_data.last) {
    a2b2:	0022      	movs	r2, r4
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    a2b4:	3375      	adds	r3, #117	; 0x75
	    _radio.advertiser.adv_data.last) {
    a2b6:	3276      	adds	r2, #118	; 0x76
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    a2b8:	7811      	ldrb	r1, [r2, #0]
    a2ba:	781b      	ldrb	r3, [r3, #0]
static void adv_setup(void)
{
	struct pdu_adv *pdu;
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;
    a2bc:	2200      	movs	r2, #0

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    a2be:	4299      	cmp	r1, r3
    a2c0:	d008      	beq.n	a2d4 <adv_setup+0x28>
	    _radio.advertiser.adv_data.last) {
		u8_t first;

		first = _radio.advertiser.adv_data.first + 1;
    a2c2:	3301      	adds	r3, #1
    a2c4:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    a2c6:	2b02      	cmp	r3, #2
    a2c8:	d100      	bne.n	a2cc <adv_setup+0x20>
			first = 0;
    a2ca:	0013      	movs	r3, r2
		}
		_radio.advertiser.adv_data.first = first;
    a2cc:	0022      	movs	r2, r4
    a2ce:	3275      	adds	r2, #117	; 0x75
    a2d0:	7013      	strb	r3, [r2, #0]
		upd = 1;
    a2d2:	2201      	movs	r2, #1
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    a2d4:	0023      	movs	r3, r4
	    advertiser.scan_data.last) {
    a2d6:	0021      	movs	r1, r4
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    a2d8:	33c5      	adds	r3, #197	; 0xc5
	    advertiser.scan_data.last) {
    a2da:	31c6      	adds	r1, #198	; 0xc6
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	7809      	ldrb	r1, [r1, #0]
    a2e0:	4299      	cmp	r1, r3
    a2e2:	d008      	beq.n	a2f6 <adv_setup+0x4a>
	    advertiser.scan_data.last) {
		u8_t first;

		first = _radio.advertiser.scan_data.first + 1;
    a2e4:	3301      	adds	r3, #1
    a2e6:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    a2e8:	2b02      	cmp	r3, #2
    a2ea:	d100      	bne.n	a2ee <adv_setup+0x42>
			first = 0;
    a2ec:	2300      	movs	r3, #0
		}
		_radio.advertiser.scan_data.first = first;
    a2ee:	0022      	movs	r2, r4
    a2f0:	32c5      	adds	r2, #197	; 0xc5
    a2f2:	7013      	strb	r3, [r2, #0]
		upd = 1;
    a2f4:	2201      	movs	r2, #1
	}

	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
    a2f6:	0023      	movs	r3, r4
    a2f8:	3375      	adds	r3, #117	; 0x75
		}
		_radio.advertiser.scan_data.first = first;
		upd = 1;
	}

	pdu = (struct pdu_adv *)
    a2fa:	781d      	ldrb	r5, [r3, #0]
    a2fc:	2327      	movs	r3, #39	; 0x27
    a2fe:	435d      	muls	r5, r3
    a300:	3520      	adds	r5, #32
    a302:	1965      	adds	r5, r4, r5
    a304:	1dee      	adds	r6, r5, #7
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
    a306:	2a00      	cmp	r2, #0
    a308:	d00a      	beq.n	a320 <adv_setup+0x74>
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
		_radio.advertiser.scan_data.data[
			_radio.advertiser.scan_data.first];
    a30a:	0022      	movs	r2, r4

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    a30c:	0029      	movs	r1, r5
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
		_radio.advertiser.scan_data.data[
			_radio.advertiser.scan_data.first];
    a30e:	32c5      	adds	r2, #197	; 0xc5
	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
    a310:	7810      	ldrb	r0, [r2, #0]
			_radio.advertiser.scan_data.first];

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    a312:	3109      	adds	r1, #9
	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
    a314:	4358      	muls	r0, r3
    a316:	1820      	adds	r0, r4, r0
			_radio.advertiser.scan_data.first];

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    a318:	3079      	adds	r0, #121	; 0x79
    a31a:	2206      	movs	r2, #6
    a31c:	f7f6 fc97 	bl	c4e <memcpy>
		       &pdu->payload.adv_ind.addr[0], BDADDR_SIZE);
	}
#else
	ARG_UNUSED(upd);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
    a320:	0030      	movs	r0, r6
    a322:	f7fd fc77 	bl	7c14 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    a326:	230f      	movs	r3, #15
    a328:	79ea      	ldrb	r2, [r5, #7]
    a32a:	4013      	ands	r3, r2
    a32c:	2b02      	cmp	r3, #2
    a32e:	d00a      	beq.n	a346 <adv_setup+0x9a>
    a330:	2b07      	cmp	r3, #7
    a332:	d008      	beq.n	a346 <adv_setup+0x9a>
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    a334:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    a336:	2096      	movs	r0, #150	; 0x96
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    a338:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    a33a:	f7fd fd7d 	bl	7e38 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    a33e:	2000      	movs	r0, #0
    a340:	f7fd fcd6 	bl	7cf0 <radio_switch_complete_and_rx>
    a344:	e003      	b.n	a34e <adv_setup+0xa2>
	} else {
		_radio.state = STATE_CLOSE;
    a346:	2303      	movs	r3, #3
    a348:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    a34a:	f7fd fce1 	bl	7d10 <radio_switch_complete_and_disable>
	}

	bitmap = _radio.advertiser.chan_map_current;
    a34e:	1d63      	adds	r3, r4, #5
    a350:	7fdb      	ldrb	r3, [r3, #31]
	chan = 0;
    a352:	2000      	movs	r0, #0
	} else {
		_radio.state = STATE_CLOSE;
		radio_switch_complete_and_disable();
	}

	bitmap = _radio.advertiser.chan_map_current;
    a354:	071b      	lsls	r3, r3, #28
    a356:	0f5b      	lsrs	r3, r3, #29
    a358:	b2da      	uxtb	r2, r3
    a35a:	0011      	movs	r1, r2
	chan = 0;
	while ((bitmap & 0x01) == 0) {
    a35c:	2501      	movs	r5, #1
    a35e:	4229      	tst	r1, r5
    a360:	d103      	bne.n	a36a <adv_setup+0xbe>
		chan++;
    a362:	3001      	adds	r0, #1
    a364:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
    a366:	0849      	lsrs	r1, r1, #1
    a368:	e7f9      	b.n	a35e <adv_setup+0xb2>
	}
	_radio.advertiser.chan_map_current &=
    a36a:	210e      	movs	r1, #14
    a36c:	3207      	adds	r2, #7
    a36e:	3405      	adds	r4, #5
    a370:	4013      	ands	r3, r2
    a372:	005a      	lsls	r2, r3, #1
    a374:	7fe3      	ldrb	r3, [r4, #31]
		(_radio.advertiser.chan_map_current - 1);

	chan_set(37 + chan);
    a376:	3025      	adds	r0, #37	; 0x25
	chan = 0;
	while ((bitmap & 0x01) == 0) {
		chan++;
		bitmap >>= 1;
	}
	_radio.advertiser.chan_map_current &=
    a378:	438b      	bics	r3, r1
    a37a:	4313      	orrs	r3, r2
    a37c:	77e3      	strb	r3, [r4, #31]
		(_radio.advertiser.chan_map_current - 1);

	chan_set(37 + chan);
    a37e:	f7ff ff61 	bl	a244 <chan_set>
}
    a382:	bd70      	pop	{r4, r5, r6, pc}
    a384:	20000f68 	.word	0x20000f68

0000a388 <terminate_ind_rx_enqueue>:
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    a388:	0003      	movs	r3, r0
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    a38a:	b507      	push	{r0, r1, r2, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    a38c:	33a8      	adds	r3, #168	; 0xa8
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    a38e:	000a      	movs	r2, r1
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
    a390:	6819      	ldr	r1, [r3, #0]
    a392:	2900      	cmp	r1, #0
    a394:	d108      	bne.n	a3a8 <terminate_ind_rx_enqueue+0x20>
    a396:	4b15      	ldr	r3, [pc, #84]	; (a3ec <terminate_ind_rx_enqueue+0x64>)
    a398:	4a15      	ldr	r2, [pc, #84]	; (a3f0 <terminate_ind_rx_enqueue+0x68>)
    a39a:	9301      	str	r3, [sp, #4]
    a39c:	4b15      	ldr	r3, [pc, #84]	; (a3f4 <terminate_ind_rx_enqueue+0x6c>)
    a39e:	4916      	ldr	r1, [pc, #88]	; (a3f8 <terminate_ind_rx_enqueue+0x70>)
    a3a0:	9300      	str	r3, [sp, #0]
    a3a2:	4816      	ldr	r0, [pc, #88]	; (a3fc <terminate_ind_rx_enqueue+0x74>)
    a3a4:	4b16      	ldr	r3, [pc, #88]	; (a400 <terminate_ind_rx_enqueue+0x78>)
    a3a6:	e018      	b.n	a3da <terminate_ind_rx_enqueue+0x52>

	radio_pdu_node_rx->hdr.handle = conn->handle;
    a3a8:	8c00      	ldrh	r0, [r0, #32]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
    a3aa:	721a      	strb	r2, [r3, #8]
	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
    a3ac:	80d8      	strh	r0, [r3, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    a3ae:	2007      	movs	r0, #7

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    a3b0:	4a14      	ldr	r2, [pc, #80]	; (a404 <terminate_ind_rx_enqueue+0x7c>)
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    a3b2:	7118      	strb	r0, [r3, #4]

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    a3b4:	306e      	adds	r0, #110	; 0x6e
    a3b6:	30ff      	adds	r0, #255	; 0xff
    a3b8:	5c10      	ldrb	r0, [r2, r0]

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    a3ba:	324d      	adds	r2, #77	; 0x4d
	link = radio_pdu_node_rx->hdr.onion.link;

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    a3bc:	7018      	strb	r0, [r3, #0]
	    _radio.packet_release_last;

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    a3be:	32ff      	adds	r2, #255	; 0xff
    a3c0:	0018      	movs	r0, r3
    a3c2:	f7fd fab4 	bl	792e <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    a3c6:	2800      	cmp	r0, #0
    a3c8:	d10c      	bne.n	a3e4 <terminate_ind_rx_enqueue+0x5c>
    a3ca:	4b08      	ldr	r3, [pc, #32]	; (a3ec <terminate_ind_rx_enqueue+0x64>)
    a3cc:	4a08      	ldr	r2, [pc, #32]	; (a3f0 <terminate_ind_rx_enqueue+0x68>)
    a3ce:	9301      	str	r3, [sp, #4]
    a3d0:	4b08      	ldr	r3, [pc, #32]	; (a3f4 <terminate_ind_rx_enqueue+0x6c>)
    a3d2:	4909      	ldr	r1, [pc, #36]	; (a3f8 <terminate_ind_rx_enqueue+0x70>)
    a3d4:	9300      	str	r3, [sp, #0]
    a3d6:	480c      	ldr	r0, [pc, #48]	; (a408 <terminate_ind_rx_enqueue+0x80>)
    a3d8:	4b09      	ldr	r3, [pc, #36]	; (a400 <terminate_ind_rx_enqueue+0x78>)
    a3da:	f7f7 fa5b 	bl	1894 <printk>
    a3de:	b662      	cpsie	i
    a3e0:	2004      	movs	r0, #4
    a3e2:	df02      	svc	2
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    a3e4:	f004 ffb0 	bl	f348 <radio_event_callback>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);

	/* callback to trigger application action */
	packet_rx_callback();
}
    a3e8:	bd07      	pop	{r0, r1, r2, pc}
    a3ea:	46c0      	nop			; (mov r8, r8)
    a3ec:	0001241d 	.word	0x0001241d
    a3f0:	0001246d 	.word	0x0001246d
    a3f4:	000124a8 	.word	0x000124a8
    a3f8:	000123e3 	.word	0x000123e3
    a3fc:	00013938 	.word	0x00013938
    a400:	00014c59 	.word	0x00014c59
    a404:	20000f68 	.word	0x20000f68
    a408:	0001353f 	.word	0x0001353f

0000a40c <isr_rx_scan_report>:

	return 1;
}

static u32_t isr_rx_scan_report(u8_t rssi_ready)
{
    a40c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a40e:	0004      	movs	r4, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
    a410:	2003      	movs	r0, #3
    a412:	f7fe febd 	bl	9190 <packet_rx_reserve_get>
	if (radio_pdu_node_rx == 0) {
    a416:	2800      	cmp	r0, #0
    a418:	d02e      	beq.n	a478 <isr_rx_scan_report+0x6c>
		return 1;
	}

	/* Prepare the report (adv or scan resp) */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    a41a:	2301      	movs	r3, #1
    a41c:	425b      	negs	r3, r3
    a41e:	80c3      	strh	r3, [r0, #6]
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
    a420:	4b16      	ldr	r3, [pc, #88]	; (a47c <isr_rx_scan_report+0x70>)
    a422:	33dd      	adds	r3, #221	; 0xdd
    a424:	781b      	ldrb	r3, [r3, #0]
    a426:	075a      	lsls	r2, r3, #29
    a428:	d015      	beq.n	a456 <isr_rx_scan_report+0x4a>
		switch (_radio.scanner.phy) {
    a42a:	075b      	lsls	r3, r3, #29
    a42c:	0f5b      	lsrs	r3, r3, #29
    a42e:	b2da      	uxtb	r2, r3
    a430:	2a01      	cmp	r2, #1
    a432:	d00e      	beq.n	a452 <isr_rx_scan_report+0x46>
    a434:	2a04      	cmp	r2, #4
    a436:	d00f      	beq.n	a458 <isr_rx_scan_report+0x4c>
			radio_pdu_node_rx->hdr.type =
				NODE_RX_TYPE_EXT_CODED_REPORT;
			break;

		default:
			LL_ASSERT(0);
    a438:	4b11      	ldr	r3, [pc, #68]	; (a480 <isr_rx_scan_report+0x74>)
    a43a:	4a12      	ldr	r2, [pc, #72]	; (a484 <isr_rx_scan_report+0x78>)
    a43c:	9301      	str	r3, [sp, #4]
    a43e:	4b12      	ldr	r3, [pc, #72]	; (a488 <isr_rx_scan_report+0x7c>)
    a440:	4912      	ldr	r1, [pc, #72]	; (a48c <isr_rx_scan_report+0x80>)
    a442:	9300      	str	r3, [sp, #0]
    a444:	4812      	ldr	r0, [pc, #72]	; (a490 <isr_rx_scan_report+0x84>)
    a446:	4b13      	ldr	r3, [pc, #76]	; (a494 <isr_rx_scan_report+0x88>)
    a448:	f7f7 fa24 	bl	1894 <printk>
    a44c:	b662      	cpsie	i
    a44e:	2004      	movs	r0, #4
    a450:	df02      	svc	2
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
		switch (_radio.scanner.phy) {
		case BIT(0):
			radio_pdu_node_rx->hdr.type =
    a452:	2303      	movs	r3, #3
    a454:	e000      	b.n	a458 <isr_rx_scan_report+0x4c>
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a456:	2302      	movs	r3, #2
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a458:	7a45      	ldrb	r5, [r0, #9]
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    a45a:	7103      	strb	r3, [r0, #4]
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    a45c:	1940      	adds	r0, r0, r5
    a45e:	300a      	adds	r0, #10
    a460:	0005      	movs	r5, r0
    a462:	267f      	movs	r6, #127	; 0x7f
			     pdu_adv_rx->len] =
    a464:	2c00      	cmp	r4, #0
    a466:	d002      	beq.n	a46e <isr_rx_scan_report+0x62>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    a468:	f7fd fc66 	bl	7d38 <radio_rssi_get>
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			     pdu_adv_rx->len] =
    a46c:	4006      	ands	r6, r0
    a46e:	702e      	strb	r6, [r5, #0]
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();
    a470:	f7ff fa5c 	bl	992c <packet_rx_enqueue>

	return 0;
    a474:	2000      	movs	r0, #0
    a476:	e000      	b.n	a47a <isr_rx_scan_report+0x6e>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
	if (radio_pdu_node_rx == 0) {
		return 1;
    a478:	2001      	movs	r0, #1
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();

	return 0;
}
    a47a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    a47c:	20000f68 	.word	0x20000f68
    a480:	0001241d 	.word	0x0001241d
    a484:	0001246d 	.word	0x0001246d
    a488:	000124a8 	.word	0x000124a8
    a48c:	000123e3 	.word	0x000123e3
    a490:	000129d4 	.word	0x000129d4
    a494:	00014b57 	.word	0x00014b57

0000a498 <isr_rx_scan>:

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    a498:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    a49a:	4dcd      	ldr	r5, [pc, #820]	; (a7d0 <isr_rx_scan+0x338>)
    a49c:	233e      	movs	r3, #62	; 0x3e
    a49e:	002a      	movs	r2, r5

	return 0;
}

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    a4a0:	b095      	sub	sp, #84	; 0x54
    a4a2:	9012      	str	r0, [sp, #72]	; 0x48
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    a4a4:	33ff      	adds	r3, #255	; 0xff
    a4a6:	32fc      	adds	r2, #252	; 0xfc
    a4a8:	5ceb      	ldrb	r3, [r5, r3]

	return 0;
}

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    a4aa:	000c      	movs	r4, r1
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    a4ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    a4ae:	009b      	lsls	r3, r3, #2
    a4b0:	585e      	ldr	r6, [r3, r1]

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    a4b2:	6813      	ldr	r3, [r2, #0]
    a4b4:	2b00      	cmp	r3, #0
    a4b6:	d100      	bne.n	a4ba <isr_rx_scan+0x22>
    a4b8:	e23a      	b.n	a930 <isr_rx_scan+0x498>
    a4ba:	23bf      	movs	r3, #191	; 0xbf
    a4bc:	005b      	lsls	r3, r3, #1
    a4be:	5ceb      	ldrb	r3, [r5, r3]
    a4c0:	2b00      	cmp	r3, #0
    a4c2:	d008      	beq.n	a4d6 <isr_rx_scan+0x3e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    a4c4:	23be      	movs	r3, #190	; 0xbe
    a4c6:	227e      	movs	r2, #126	; 0x7e
    a4c8:	005b      	lsls	r3, r3, #1
    a4ca:	32ff      	adds	r2, #255	; 0xff
    a4cc:	5ceb      	ldrb	r3, [r5, r3]

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    a4ce:	5caa      	ldrb	r2, [r5, r2]
    a4d0:	429a      	cmp	r2, r3
    a4d2:	d000      	beq.n	a4d6 <isr_rx_scan+0x3e>
    a4d4:	e22c      	b.n	a930 <isr_rx_scan+0x498>
				      (_radio.fc_req == _radio.fc_ack)) &&
    a4d6:	7a33      	ldrb	r3, [r6, #8]
    a4d8:	071a      	lsls	r2, r3, #28
    a4da:	d006      	beq.n	a4ea <isr_rx_scan+0x52>
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
    a4dc:	220f      	movs	r2, #15
    a4de:	7a33      	ldrb	r3, [r6, #8]
    a4e0:	401a      	ands	r2, r3
    a4e2:	2a01      	cmp	r2, #1
    a4e4:	d000      	beq.n	a4e8 <isr_rx_scan+0x50>
    a4e6:	e223      	b.n	a930 <isr_rx_scan+0x498>
    a4e8:	e029      	b.n	a53e <isr_rx_scan+0xa6>

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
    a4ea:	002a      	movs	r2, r5
    a4ec:	32dd      	adds	r2, #221	; 0xdd
    a4ee:	7812      	ldrb	r2, [r2, #0]
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
    a4f0:	06d1      	lsls	r1, r2, #27
    a4f2:	d514      	bpl.n	a51e <isr_rx_scan+0x86>
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
	    ((radio_tmr_end_get() + 502) <
    a4f4:	f7fd fd82 	bl	7ffc <radio_tmr_end_get>
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    a4f8:	002b      	movs	r3, r5
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    a4fa:	30f7      	adds	r0, #247	; 0xf7
    a4fc:	30ff      	adds	r0, #255	; 0xff
	    ((radio_tmr_end_get() + 502) <
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    a4fe:	33d8      	adds	r3, #216	; 0xd8
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    a500:	0007      	movs	r7, r0
    a502:	4ab4      	ldr	r2, [pc, #720]	; (a7d4 <isr_rx_scan+0x33c>)
    a504:	6818      	ldr	r0, [r3, #0]
    a506:	2100      	movs	r1, #0
    a508:	2307      	movs	r3, #7
    a50a:	f7f5 ffe9 	bl	4e0 <__aeabi_lmul>
    a50e:	4ab2      	ldr	r2, [pc, #712]	; (a7d8 <isr_rx_scan+0x340>)
    a510:	2300      	movs	r3, #0
    a512:	f7f5 ffc5 	bl	4a0 <__aeabi_uldivmod>
    a516:	4287      	cmp	r7, r0
    a518:	d300      	bcc.n	a51c <isr_rx_scan+0x84>
    a51a:	e209      	b.n	a930 <isr_rx_scan+0x498>
    a51c:	e031      	b.n	a582 <isr_rx_scan+0xea>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    a51e:	0652      	lsls	r2, r2, #25
    a520:	065b      	lsls	r3, r3, #25

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
    a522:	0fd2      	lsrs	r2, r2, #31
    a524:	0fdb      	lsrs	r3, r3, #31
    a526:	429a      	cmp	r2, r3
    a528:	d1d8      	bne.n	a4dc <isr_rx_scan+0x44>
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
    a52a:	0028      	movs	r0, r5
    a52c:	0031      	movs	r1, r6
    a52e:	30de      	adds	r0, #222	; 0xde
    a530:	2206      	movs	r2, #6
    a532:	310a      	adds	r1, #10
    a534:	f7f6 fb76 	bl	c24 <memcmp>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    a538:	2800      	cmp	r0, #0
    a53a:	d0db      	beq.n	a4f4 <isr_rx_scan+0x5c>
    a53c:	e7ce      	b.n	a4dc <isr_rx_scan+0x44>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    a53e:	002a      	movs	r2, r5
    a540:	32dd      	adds	r2, #221	; 0xdd
    a542:	7812      	ldrb	r2, [r2, #0]
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a544:	09db      	lsrs	r3, r3, #7
    a546:	09d2      	lsrs	r2, r2, #7
    a548:	429a      	cmp	r2, r3
    a54a:	d005      	beq.n	a558 <isr_rx_scan+0xc0>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a54c:	002b      	movs	r3, r5
    a54e:	33dd      	adds	r3, #221	; 0xdd
    a550:	781b      	ldrb	r3, [r3, #0]
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
    a552:	069b      	lsls	r3, r3, #26
    a554:	d40a      	bmi.n	a56c <isr_rx_scan+0xd4>
    a556:	e1eb      	b.n	a930 <isr_rx_scan+0x498>
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
    a558:	0028      	movs	r0, r5
    a55a:	0031      	movs	r1, r6
    a55c:	30e4      	adds	r0, #228	; 0xe4
    a55e:	2206      	movs	r2, #6
    a560:	3110      	adds	r1, #16
    a562:	f7f6 fb5f 	bl	c24 <memcmp>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    a566:	2800      	cmp	r0, #0
    a568:	d0c4      	beq.n	a4f4 <isr_rx_scan+0x5c>
    a56a:	e7ef      	b.n	a54c <isr_rx_scan+0xb4>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    a56c:	7a33      	ldrb	r3, [r6, #8]
    a56e:	09db      	lsrs	r3, r3, #7
    a570:	d100      	bne.n	a574 <isr_rx_scan+0xdc>
    a572:	e1dd      	b.n	a930 <isr_rx_scan+0x498>
		(pdu_adv_rx->rx_addr != 0) &&
    a574:	223f      	movs	r2, #63	; 0x3f
    a576:	7d73      	ldrb	r3, [r6, #21]
    a578:	4393      	bics	r3, r2
    a57a:	2b40      	cmp	r3, #64	; 0x40
    a57c:	d000      	beq.n	a580 <isr_rx_scan+0xe8>
    a57e:	e1d7      	b.n	a930 <isr_rx_scan+0x498>
    a580:	e7b8      	b.n	a4f4 <isr_rx_scan+0x5c>
		u32_t conn_offset_us;
		u32_t ticker_status;
		u32_t conn_space_us;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    a582:	2004      	movs	r0, #4
    a584:	f7fe fe04 	bl	9190 <packet_rx_reserve_get>
    a588:	900a      	str	r0, [sp, #40]	; 0x28
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    a58a:	2800      	cmp	r0, #0
    a58c:	d100      	bne.n	a590 <isr_rx_scan+0xf8>
    a58e:	e26c      	b.n	aa6a <isr_rx_scan+0x5d2>
			return 1;
		}

		_radio.state = STATE_STOP;
    a590:	2304      	movs	r3, #4

		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;
    a592:	2200      	movs	r2, #0

		if (radio_pdu_node_rx == 0) {
			return 1;
		}

		_radio.state = STATE_STOP;
    a594:	742b      	strb	r3, [r5, #16]

		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
    a596:	4b91      	ldr	r3, [pc, #580]	; (a7dc <isr_rx_scan+0x344>)
    a598:	681f      	ldr	r7, [r3, #0]
		_radio.scanner.conn = NULL;
    a59a:	601a      	str	r2, [r3, #0]

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    a59c:	f7fd fba4 	bl	7ce8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    a5a0:	220f      	movs	r2, #15
    a5a2:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    a5a4:	2140      	movs	r1, #64	; 0x40
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    a5a6:	4393      	bics	r3, r2

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			pdu_adv_tx->chan_sel = 1;
    a5a8:	3216      	adds	r2, #22
    a5aa:	4313      	orrs	r3, r2
    a5ac:	7003      	strb	r3, [r0, #0]
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    a5ae:	002b      	movs	r3, r5
    a5b0:	33dd      	adds	r3, #221	; 0xdd
    a5b2:	781b      	ldrb	r3, [r3, #0]
		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    a5b4:	0004      	movs	r4, r0
			pdu_adv_tx->chan_sel = 1;
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    a5b6:	09db      	lsrs	r3, r3, #7
    a5b8:	019a      	lsls	r2, r3, #6
    a5ba:	7803      	ldrb	r3, [r0, #0]
    a5bc:	438b      	bics	r3, r1
    a5be:	4313      	orrs	r3, r2
    a5c0:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    a5c2:	7a33      	ldrb	r3, [r6, #8]
    a5c4:	7801      	ldrb	r1, [r0, #0]
    a5c6:	065b      	lsls	r3, r3, #25
    a5c8:	0fdb      	lsrs	r3, r3, #31
    a5ca:	01da      	lsls	r2, r3, #7
    a5cc:	237f      	movs	r3, #127	; 0x7f
    a5ce:	400b      	ands	r3, r1
    a5d0:	4313      	orrs	r3, r2
    a5d2:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    a5d4:	2322      	movs	r3, #34	; 0x22
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    a5d6:	0029      	movs	r1, r5
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    a5d8:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    a5da:	1c83      	adds	r3, r0, #2
    a5dc:	31e4      	adds	r1, #228	; 0xe4
    a5de:	2206      	movs	r2, #6
    a5e0:	0018      	movs	r0, r3
    a5e2:	9311      	str	r3, [sp, #68]	; 0x44
    a5e4:	f7f6 fb33 	bl	c4e <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
    a5e8:	0023      	movs	r3, r4
    a5ea:	0031      	movs	r1, r6
    a5ec:	3308      	adds	r3, #8
    a5ee:	0018      	movs	r0, r3
    a5f0:	2206      	movs	r2, #6
    a5f2:	310a      	adds	r1, #10
    a5f4:	930f      	str	r3, [sp, #60]	; 0x3c
    a5f6:	f7f6 fb2a 	bl	c4e <memcpy>
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
    a5fa:	0039      	movs	r1, r7
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    a5fc:	0020      	movs	r0, r4
		       access_addr[0], &conn->access_addr[0], 4);
    a5fe:	3110      	adds	r1, #16
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    a600:	2204      	movs	r2, #4
    a602:	300e      	adds	r0, #14
    a604:	f7f6 fb23 	bl	c4e <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
    a608:	0039      	movs	r1, r7
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    a60a:	0020      	movs	r0, r4
		       &conn->crc_init[0], 3);
    a60c:	3114      	adds	r1, #20
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    a60e:	2203      	movs	r2, #3
    a610:	3012      	adds	r0, #18
    a612:	f7f6 fb1c 	bl	c4e <memcpy>
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;
    a616:	2301      	movs	r3, #1

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;
    a618:	35f0      	adds	r5, #240	; 0xf0
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;
    a61a:	7563      	strb	r3, [r4, #21]

		conn_interval_us =
    a61c:	882b      	ldrh	r3, [r5, #0]
    a61e:	4a70      	ldr	r2, [pc, #448]	; (a7e0 <isr_rx_scan+0x348>)
    a620:	435a      	muls	r2, r3
    a622:	9210      	str	r2, [sp, #64]	; 0x40
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    a624:	f7fd fcea 	bl	7ffc <radio_tmr_end_get>
    a628:	23db      	movs	r3, #219	; 0xdb
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    a62a:	2100      	movs	r1, #0
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    a62c:	00db      	lsls	r3, r3, #3
    a62e:	18c5      	adds	r5, r0, r3
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    a630:	0008      	movs	r0, r1
    a632:	f7fd faf9 	bl	7c28 <radio_tx_chain_delay_get>
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    a636:	2100      	movs	r1, #0

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    a638:	1a2d      	subs	r5, r5, r0
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    a63a:	0008      	movs	r0, r1
    a63c:	f7fd faf2 	bl	7c24 <radio_tx_ready_delay_get>

		if (_radio.scanner.win_offset_us == 0) {
    a640:	4b66      	ldr	r3, [pc, #408]	; (a7dc <isr_rx_scan+0x344>)
		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    a642:	1a28      	subs	r0, r5, r0

		if (_radio.scanner.win_offset_us == 0) {
    a644:	685b      	ldr	r3, [r3, #4]
    a646:	930d      	str	r3, [sp, #52]	; 0x34
    a648:	2b00      	cmp	r3, #0
    a64a:	d10f      	bne.n	a66c <isr_rx_scan+0x1d4>
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
    a64c:	2234      	movs	r2, #52	; 0x34
    a64e:	466b      	mov	r3, sp
    a650:	189b      	adds	r3, r3, r2
    a652:	781b      	ldrb	r3, [r3, #0]
    a654:	75a3      	strb	r3, [r4, #22]
    a656:	466b      	mov	r3, sp
    a658:	189b      	adds	r3, r3, r2
    a65a:	781b      	ldrb	r3, [r3, #0]
		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    a65c:	900d      	str	r0, [sp, #52]	; 0x34

		if (_radio.scanner.win_offset_us == 0) {
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
    a65e:	75e3      	strb	r3, [r4, #23]
    a660:	e011      	b.n	a686 <isr_rx_scan+0x1ee>
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
    a662:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a666:	4694      	mov	ip, r2
    a668:	4463      	add	r3, ip
    a66a:	930d      	str	r3, [sp, #52]	; 0x34
		if (_radio.scanner.win_offset_us == 0) {
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    a66c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a66e:	2b00      	cmp	r3, #0
    a670:	dbf7      	blt.n	a662 <isr_rx_scan+0x1ca>
    a672:	4283      	cmp	r3, r0
    a674:	d3f5      	bcc.n	a662 <isr_rx_scan+0x1ca>
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
    a676:	1a18      	subs	r0, r3, r0
    a678:	4959      	ldr	r1, [pc, #356]	; (a7e0 <isr_rx_scan+0x348>)
    a67a:	f7f5 fd9b 	bl	1b4 <__aeabi_uidiv>
    a67e:	b280      	uxth	r0, r0
    a680:	75a0      	strb	r0, [r4, #22]
    a682:	0a00      	lsrs	r0, r0, #8
    a684:	75e0      	strb	r0, [r4, #23]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    a686:	0039      	movs	r1, r7
    a688:	0020      	movs	r0, r4
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    a68a:	4b56      	ldr	r3, [pc, #344]	; (a7e4 <isr_rx_scan+0x34c>)
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    a68c:	2205      	movs	r2, #5
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    a68e:	781b      	ldrb	r3, [r3, #0]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    a690:	3117      	adds	r1, #23
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    a692:	7623      	strb	r3, [r4, #24]
    a694:	4b53      	ldr	r3, [pc, #332]	; (a7e4 <isr_rx_scan+0x34c>)
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    a696:	301e      	adds	r0, #30
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    a698:	785b      	ldrb	r3, [r3, #1]
			_radio.scanner.conn_interval;
    a69a:	4d4d      	ldr	r5, [pc, #308]	; (a7d0 <isr_rx_scan+0x338>)
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    a69c:	7663      	strb	r3, [r4, #25]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    a69e:	4b52      	ldr	r3, [pc, #328]	; (a7e8 <isr_rx_scan+0x350>)
    a6a0:	781b      	ldrb	r3, [r3, #0]
    a6a2:	76a3      	strb	r3, [r4, #26]
    a6a4:	4b50      	ldr	r3, [pc, #320]	; (a7e8 <isr_rx_scan+0x350>)
    a6a6:	785b      	ldrb	r3, [r3, #1]
    a6a8:	76e3      	strb	r3, [r4, #27]
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
    a6aa:	4b50      	ldr	r3, [pc, #320]	; (a7ec <isr_rx_scan+0x354>)
    a6ac:	781b      	ldrb	r3, [r3, #0]
    a6ae:	7723      	strb	r3, [r4, #28]
    a6b0:	4b4e      	ldr	r3, [pc, #312]	; (a7ec <isr_rx_scan+0x354>)
    a6b2:	785b      	ldrb	r3, [r3, #1]
    a6b4:	7763      	strb	r3, [r4, #29]
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    a6b6:	f7f6 faca 	bl	c4e <memcpy>
		       &conn->data_chan_map[0],
		       sizeof(pdu_adv_tx->payload.connect_ind.lldata.chan_map));
		pdu_adv_tx->payload.connect_ind.lldata.hop =
    a6ba:	1d23      	adds	r3, r4, #4
    a6bc:	9313      	str	r3, [sp, #76]	; 0x4c
    a6be:	231f      	movs	r3, #31
    a6c0:	7fba      	ldrb	r2, [r7, #30]
    a6c2:	401a      	ands	r2, r3
    a6c4:	0011      	movs	r1, r2
    a6c6:	1d22      	adds	r2, r4, #4
    a6c8:	7fd2      	ldrb	r2, [r2, #31]
    a6ca:	439a      	bics	r2, r3
    a6cc:	430a      	orrs	r2, r1
    a6ce:	1d21      	adds	r1, r4, #4
    a6d0:	77ca      	strb	r2, [r1, #31]
			conn->data_chan_hop;
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
    a6d2:	002a      	movs	r2, r5
    a6d4:	32ff      	adds	r2, #255	; 0xff
    a6d6:	7fc9      	ldrb	r1, [r1, #31]
    a6d8:	7f52      	ldrb	r2, [r2, #29]
    a6da:	400b      	ands	r3, r1
    a6dc:	0152      	lsls	r2, r2, #5
    a6de:	4313      	orrs	r3, r2
    a6e0:	1d22      	adds	r2, r4, #4
    a6e2:	77d3      	strb	r3, [r2, #31]

		radio_switch_complete_and_disable();
    a6e4:	f7fd fb14 	bl	7d10 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(pdu_adv_tx);
    a6e8:	0020      	movs	r0, r4
    a6ea:	f7fd fa93 	bl	7c14 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    a6ee:	f7fd fac1 	bl	7c74 <radio_is_ready>
    a6f2:	900e      	str	r0, [sp, #56]	; 0x38
    a6f4:	2800      	cmp	r0, #0
    a6f6:	d008      	beq.n	a70a <isr_rx_scan+0x272>
    a6f8:	4b3d      	ldr	r3, [pc, #244]	; (a7f0 <isr_rx_scan+0x358>)
    a6fa:	4a3e      	ldr	r2, [pc, #248]	; (a7f4 <isr_rx_scan+0x35c>)
    a6fc:	9301      	str	r3, [sp, #4]
    a6fe:	4b3e      	ldr	r3, [pc, #248]	; (a7f8 <isr_rx_scan+0x360>)
    a700:	493e      	ldr	r1, [pc, #248]	; (a7fc <isr_rx_scan+0x364>)
    a702:	9300      	str	r3, [sp, #0]
    a704:	483e      	ldr	r0, [pc, #248]	; (a800 <isr_rx_scan+0x368>)
    a706:	4b3f      	ldr	r3, [pc, #252]	; (a804 <isr_rx_scan+0x36c>)
    a708:	e05c      	b.n	a7c4 <isr_rx_scan+0x32c>

		radio_tmr_end_capture();
    a70a:	f7fd fc61 	bl	7fd0 <radio_tmr_end_capture>
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    a70e:	228c      	movs	r2, #140	; 0x8c
    a710:	35fc      	adds	r5, #252	; 0xfc
    a712:	68a9      	ldr	r1, [r5, #8]
    a714:	0052      	lsls	r2, r2, #1
    a716:	0038      	movs	r0, r7
    a718:	f7fd f8e2 	bl	78e0 <mem_index_get>
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    a71c:	2206      	movs	r2, #6
		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    a71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    a720:	8438      	strh	r0, [r7, #32]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    a722:	2138      	movs	r1, #56	; 0x38
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    a724:	711a      	strb	r2, [r3, #4]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    a726:	466a      	mov	r2, sp
    a728:	001d      	movs	r5, r3
    a72a:	1852      	adds	r2, r2, r1
    a72c:	7812      	ldrb	r2, [r2, #0]
		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    a72e:	80d8      	strh	r0, [r3, #6]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    a730:	72da      	strb	r2, [r3, #11]
		radio_le_conn_cmplt->role = 0x00;
    a732:	466b      	mov	r3, sp
    a734:	000a      	movs	r2, r1
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a736:	0028      	movs	r0, r5
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
    a738:	185b      	adds	r3, r3, r1
    a73a:	781b      	ldrb	r3, [r3, #0]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a73c:	3a32      	subs	r2, #50	; 0x32
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
    a73e:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    a740:	7823      	ldrb	r3, [r4, #0]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a742:	990f      	ldr	r1, [sp, #60]	; 0x3c
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    a744:	09db      	lsrs	r3, r3, #7
    a746:	736b      	strb	r3, [r5, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a748:	300e      	adds	r0, #14
    a74a:	f7f6 fa80 	bl	c4e <memcpy>
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    a74e:	7823      	ldrb	r3, [r4, #0]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    a750:	980a      	ldr	r0, [sp, #40]	; 0x28
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    a752:	065b      	lsls	r3, r3, #25
    a754:	0fdb      	lsrs	r3, r3, #31
    a756:	752b      	strb	r3, [r5, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    a758:	9911      	ldr	r1, [sp, #68]	; 0x44
    a75a:	2206      	movs	r2, #6
    a75c:	3015      	adds	r0, #21
    a75e:	f7f6 fa76 	bl	c4e <memcpy>
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    a762:	2248      	movs	r2, #72	; 0x48
    a764:	466b      	mov	r3, sp
    a766:	189b      	adds	r3, r3, r2
    a768:	781b      	ldrb	r3, [r3, #0]
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    a76a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    a76c:	76eb      	strb	r3, [r5, #27]
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    a76e:	4b1d      	ldr	r3, [pc, #116]	; (a7e4 <isr_rx_scan+0x34c>)

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    a770:	350b      	adds	r5, #11
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    a772:	781b      	ldrb	r3, [r3, #0]
    a774:	7713      	strb	r3, [r2, #28]
    a776:	4b1b      	ldr	r3, [pc, #108]	; (a7e4 <isr_rx_scan+0x34c>)
    a778:	785b      	ldrb	r3, [r3, #1]
    a77a:	7753      	strb	r3, [r2, #29]
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
    a77c:	4b1a      	ldr	r3, [pc, #104]	; (a7e8 <isr_rx_scan+0x350>)
    a77e:	781b      	ldrb	r3, [r3, #0]
    a780:	7793      	strb	r3, [r2, #30]
    a782:	4b19      	ldr	r3, [pc, #100]	; (a7e8 <isr_rx_scan+0x350>)
    a784:	785b      	ldrb	r3, [r3, #1]
    a786:	77d3      	strb	r3, [r2, #31]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    a788:	0013      	movs	r3, r2
    a78a:	4a18      	ldr	r2, [pc, #96]	; (a7ec <isr_rx_scan+0x354>)
    a78c:	3320      	adds	r3, #32
    a78e:	7812      	ldrb	r2, [r2, #0]
    a790:	701a      	strb	r2, [r3, #0]
    a792:	4a16      	ldr	r2, [pc, #88]	; (a7ec <isr_rx_scan+0x354>)
    a794:	7852      	ldrb	r2, [r2, #1]
    a796:	705a      	strb	r2, [r3, #1]
		radio_le_conn_cmplt->mca =
			pdu_adv_tx->payload.connect_ind.lldata.sca;
    a798:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a79a:	7fdb      	ldrb	r3, [r3, #31]
    a79c:	095b      	lsrs	r3, r3, #5
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
		radio_le_conn_cmplt->mca =
    a79e:	75eb      	strb	r3, [r5, #23]
			pdu_adv_tx->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    a7a0:	8c38      	ldrh	r0, [r7, #32]
    a7a2:	f7ff f911 	bl	99c8 <rx_fc_lock>
		packet_rx_enqueue();
    a7a6:	f7ff f8c1 	bl	992c <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    a7aa:	2003      	movs	r0, #3
    a7ac:	f7fe fcf0 	bl	9190 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    a7b0:	2800      	cmp	r0, #0
    a7b2:	d12b      	bne.n	a80c <isr_rx_scan+0x374>
    a7b4:	4b0e      	ldr	r3, [pc, #56]	; (a7f0 <isr_rx_scan+0x358>)
    a7b6:	4a0f      	ldr	r2, [pc, #60]	; (a7f4 <isr_rx_scan+0x35c>)
    a7b8:	9301      	str	r3, [sp, #4]
    a7ba:	4b0f      	ldr	r3, [pc, #60]	; (a7f8 <isr_rx_scan+0x360>)
    a7bc:	490f      	ldr	r1, [pc, #60]	; (a7fc <isr_rx_scan+0x364>)
    a7be:	9300      	str	r3, [sp, #0]
    a7c0:	4811      	ldr	r0, [pc, #68]	; (a808 <isr_rx_scan+0x370>)
    a7c2:	4b10      	ldr	r3, [pc, #64]	; (a804 <isr_rx_scan+0x36c>)
    a7c4:	f7f7 f866 	bl	1894 <printk>
    a7c8:	b662      	cpsie	i
    a7ca:	2004      	movs	r0, #4
    a7cc:	df02      	svc	2
    a7ce:	46c0      	nop			; (mov r8, r8)
    a7d0:	20000f68 	.word	0x20000f68
    a7d4:	1afd498d 	.word	0x1afd498d
    a7d8:	3b9aca00 	.word	0x3b9aca00
    a7dc:	20001064 	.word	0x20001064
    a7e0:	000004e2 	.word	0x000004e2
    a7e4:	20001058 	.word	0x20001058
    a7e8:	2000105a 	.word	0x2000105a
    a7ec:	2000105c 	.word	0x2000105c
    a7f0:	0001241d 	.word	0x0001241d
    a7f4:	0001246d 	.word	0x0001246d
    a7f8:	000124a8 	.word	0x000124a8
    a7fc:	000123e3 	.word	0x000123e3
    a800:	0001397b 	.word	0x0001397b
    a804:	00014b92 	.word	0x00014b92
    a808:	00013845 	.word	0x00013845

			radio_pdu_node_rx->hdr.handle = conn->handle;
    a80c:	8c3b      	ldrh	r3, [r7, #32]
    a80e:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    a810:	230b      	movs	r3, #11
    a812:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
    a814:	7a32      	ldrb	r2, [r6, #8]
    a816:	3315      	adds	r3, #21
    a818:	4013      	ands	r3, r2
    a81a:	d00e      	beq.n	a83a <isr_rx_scan+0x3a2>
				u16_t aa_ls =
    a81c:	7c7b      	ldrb	r3, [r7, #17]
    a81e:	7c39      	ldrb	r1, [r7, #16]
    a820:	021b      	lsls	r3, r3, #8
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    a822:	7cfa      	ldrb	r2, [r7, #19]
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
				u16_t aa_ls =
    a824:	4319      	orrs	r1, r3
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    a826:	7cbb      	ldrb	r3, [r7, #18]
    a828:	0212      	lsls	r2, r2, #8
    a82a:	4313      	orrs	r3, r2
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    a82c:	2440      	movs	r4, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    a82e:	404b      	eors	r3, r1
    a830:	83fb      	strh	r3, [r7, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    a832:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    a834:	7f3a      	ldrb	r2, [r7, #28]
    a836:	4322      	orrs	r2, r4
    a838:	773a      	strb	r2, [r7, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    a83a:	72c3      	strb	r3, [r0, #11]
			}

			packet_rx_enqueue();
    a83c:	f7ff f876 	bl	992c <packet_rx_enqueue>
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    a840:	4b8c      	ldr	r3, [pc, #560]	; (aa74 <isr_rx_scan+0x5dc>)
    a842:	001a      	movs	r2, r3
    a844:	32f8      	adds	r2, #248	; 0xf8
    a846:	6812      	ldr	r2, [r2, #0]
    a848:	60fa      	str	r2, [r7, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    a84a:	22c0      	movs	r2, #192	; 0xc0
    a84c:	0052      	lsls	r2, r2, #1
    a84e:	589c      	ldr	r4, [r3, r2]
		conn->hdr.ticks_xtal_to_start =
    a850:	2327      	movs	r3, #39	; 0x27
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    a852:	2200      	movs	r2, #0
			packet_rx_enqueue();
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    a854:	607c      	str	r4, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    a856:	603b      	str	r3, [r7, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    a858:	60ba      	str	r2, [r7, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    a85a:	429c      	cmp	r4, r3
    a85c:	d200      	bcs.n	a860 <isr_rx_scan+0x3c8>
    a85e:	001c      	movs	r4, r3
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;

		/* Stop Scanner */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a860:	2100      	movs	r1, #0
    a862:	4b85      	ldr	r3, [pc, #532]	; (aa78 <isr_rx_scan+0x5e0>)
    a864:	2206      	movs	r2, #6
    a866:	9300      	str	r3, [sp, #0]
    a868:	0008      	movs	r0, r1
    a86a:	4b84      	ldr	r3, [pc, #528]	; (aa7c <isr_rx_scan+0x5e4>)
    a86c:	f7fe fb82 	bl	8f74 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    a870:	21a2      	movs	r1, #162	; 0xa2

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a872:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    a874:	00c9      	lsls	r1, r1, #3
    a876:	f7ff f907 	bl	9a88 <ticker_stop_scan_assert>

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a87a:	002b      	movs	r3, r5
    a87c:	2204      	movs	r2, #4
    a87e:	0029      	movs	r1, r5
    a880:	9500      	str	r5, [sp, #0]
    a882:	0028      	movs	r0, r5
    a884:	f7fe fb76 	bl	8f74 <ticker_stop>
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    a888:	4a7d      	ldr	r2, [pc, #500]	; (aa80 <isr_rx_scan+0x5e8>)
    a88a:	2300      	movs	r3, #0
    a88c:	9810      	ldr	r0, [sp, #64]	; 0x40
    a88e:	0029      	movs	r1, r5
    a890:	f7f5 fe26 	bl	4e0 <__aeabi_lmul>
    a894:	4a7b      	ldr	r2, [pc, #492]	; (aa84 <isr_rx_scan+0x5ec>)
    a896:	2307      	movs	r3, #7
    a898:	900a      	str	r0, [sp, #40]	; 0x28
    a89a:	910b      	str	r1, [sp, #44]	; 0x2c
    a89c:	f7f5 fe00 	bl	4a0 <__aeabi_uldivmod>
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
    a8a0:	4b74      	ldr	r3, [pc, #464]	; (aa74 <isr_rx_scan+0x5dc>)
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    a8a2:	900e      	str	r0, [sp, #56]	; 0x38
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    RADIO_TICKER_ID_SCAN_STOP, NULL, NULL);

		/* Start master */
		ticker_status =
    a8a4:	685b      	ldr	r3, [r3, #4]
    a8a6:	4a77      	ldr	r2, [pc, #476]	; (aa84 <isr_rx_scan+0x5ec>)
    a8a8:	1b1b      	subs	r3, r3, r4
    a8aa:	930f      	str	r3, [sp, #60]	; 0x3c
    a8ac:	4b76      	ldr	r3, [pc, #472]	; (aa88 <isr_rx_scan+0x5f0>)
    a8ae:	8c3e      	ldrh	r6, [r7, #32]
    a8b0:	9308      	str	r3, [sp, #32]
    a8b2:	4b76      	ldr	r3, [pc, #472]	; (aa8c <isr_rx_scan+0x5f4>)
    a8b4:	9706      	str	r7, [sp, #24]
    a8b6:	9307      	str	r3, [sp, #28]
    a8b8:	4b75      	ldr	r3, [pc, #468]	; (aa90 <isr_rx_scan+0x5f8>)
    a8ba:	3607      	adds	r6, #7
    a8bc:	9305      	str	r3, [sp, #20]
    a8be:	68fb      	ldr	r3, [r7, #12]
    a8c0:	9503      	str	r5, [sp, #12]
    a8c2:	191c      	adds	r4, r3, r4
    a8c4:	b2a4      	uxth	r4, r4
    a8c6:	2307      	movs	r3, #7
    a8c8:	9404      	str	r4, [sp, #16]
    a8ca:	f7f5 fe09 	bl	4e0 <__aeabi_lmul>
    a8ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a8d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a8d2:	22fa      	movs	r2, #250	; 0xfa
    a8d4:	1a1b      	subs	r3, r3, r0
    a8d6:	418c      	sbcs	r4, r1
    a8d8:	0092      	lsls	r2, r2, #2
    a8da:	0018      	movs	r0, r3
    a8dc:	0021      	movs	r1, r4
    a8de:	2300      	movs	r3, #0
    a8e0:	f7f5 fdde 	bl	4a0 <__aeabi_uldivmod>
    a8e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a8e6:	9002      	str	r0, [sp, #8]
    a8e8:	9301      	str	r3, [sp, #4]
    a8ea:	4a65      	ldr	r2, [pc, #404]	; (aa80 <isr_rx_scan+0x5e8>)
    a8ec:	2300      	movs	r3, #0
    a8ee:	980d      	ldr	r0, [sp, #52]	; 0x34
    a8f0:	0029      	movs	r1, r5
    a8f2:	f7f5 fdf5 	bl	4e0 <__aeabi_lmul>
    a8f6:	4a63      	ldr	r2, [pc, #396]	; (aa84 <isr_rx_scan+0x5ec>)
    a8f8:	2307      	movs	r3, #7
    a8fa:	f7f5 fdd1 	bl	4a0 <__aeabi_uldivmod>
    a8fe:	0200      	lsls	r0, r0, #8
    a900:	0a00      	lsrs	r0, r0, #8
    a902:	b2f6      	uxtb	r6, r6
    a904:	9000      	str	r0, [sp, #0]
    a906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a908:	0032      	movs	r2, r6
    a90a:	0029      	movs	r1, r5
    a90c:	0028      	movs	r0, r5
    a90e:	f7fe fa99 	bl	8e44 <ticker_start>
				     TICKER_REMAINDER(conn_interval_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     event_master_prepare, conn,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a912:	2302      	movs	r3, #2
    a914:	4398      	bics	r0, r3
    a916:	0004      	movs	r4, r0
    a918:	42a8      	cmp	r0, r5
    a91a:	d100      	bne.n	a91e <isr_rx_scan+0x486>
    a91c:	e0a6      	b.n	aa6c <isr_rx_scan+0x5d4>
    a91e:	4b5d      	ldr	r3, [pc, #372]	; (aa94 <isr_rx_scan+0x5fc>)
    a920:	4a5d      	ldr	r2, [pc, #372]	; (aa98 <isr_rx_scan+0x600>)
    a922:	9301      	str	r3, [sp, #4]
    a924:	4b5d      	ldr	r3, [pc, #372]	; (aa9c <isr_rx_scan+0x604>)
    a926:	495e      	ldr	r1, [pc, #376]	; (aaa0 <isr_rx_scan+0x608>)
    a928:	9300      	str	r3, [sp, #0]
    a92a:	485e      	ldr	r0, [pc, #376]	; (aaa4 <isr_rx_scan+0x60c>)
    a92c:	4b5e      	ldr	r3, [pc, #376]	; (aaa8 <isr_rx_scan+0x610>)
    a92e:	e749      	b.n	a7c4 <isr_rx_scan+0x32c>

		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    a930:	230f      	movs	r3, #15
    a932:	7a32      	ldrb	r2, [r6, #8]
    a934:	4013      	ands	r3, r2
    a936:	d001      	beq.n	a93c <isr_rx_scan+0x4a4>
    a938:	2b06      	cmp	r3, #6
    a93a:	d152      	bne.n	a9e2 <isr_rx_scan+0x54a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    a93c:	495b      	ldr	r1, [pc, #364]	; (aaac <isr_rx_scan+0x614>)
		 (_radio.scanner.type != 0) &&
    a93e:	4d4d      	ldr	r5, [pc, #308]	; (aa74 <isr_rx_scan+0x5dc>)
		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    a940:	7809      	ldrb	r1, [r1, #0]
    a942:	0709      	lsls	r1, r1, #28
    a944:	d547      	bpl.n	a9d6 <isr_rx_scan+0x53e>
		 (_radio.scanner.type != 0) &&
		 (_radio.scanner.conn == 0)) {
    a946:	0029      	movs	r1, r5
    a948:	31fc      	adds	r1, #252	; 0xfc
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
		 (_radio.scanner.type != 0) &&
    a94a:	6809      	ldr	r1, [r1, #0]
    a94c:	2900      	cmp	r1, #0
    a94e:	d142      	bne.n	a9d6 <isr_rx_scan+0x53e>
		 (_radio.scanner.conn == 0)) {
		struct pdu_adv *pdu_adv_tx;
		u32_t err;

		/* save the adv packet */
		err = isr_rx_scan_report(rssi_ready);
    a950:	0020      	movs	r0, r4
    a952:	f7ff fd5b 	bl	a40c <isr_rx_scan_report>
    a956:	1e04      	subs	r4, r0, #0
		if (err) {
    a958:	d000      	beq.n	a95c <isr_rx_scan+0x4c4>
    a95a:	e087      	b.n	aa6c <isr_rx_scan+0x5d4>
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    a95c:	f7fd f9c4 	bl	7ce8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    a960:	220f      	movs	r2, #15
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    a962:	2140      	movs	r1, #64	; 0x40
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    a964:	7803      	ldrb	r3, [r0, #0]
		if (err) {
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    a966:	0007      	movs	r7, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    a968:	4393      	bics	r3, r2
    a96a:	3a0c      	subs	r2, #12
    a96c:	4313      	orrs	r3, r2
    a96e:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    a970:	4b4e      	ldr	r3, [pc, #312]	; (aaac <isr_rx_scan+0x614>)
    a972:	781b      	ldrb	r3, [r3, #0]
    a974:	09db      	lsrs	r3, r3, #7
    a976:	019a      	lsls	r2, r3, #6
    a978:	7803      	ldrb	r3, [r0, #0]
    a97a:	438b      	bics	r3, r1
    a97c:	4313      	orrs	r3, r2
    a97e:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    a980:	7a33      	ldrb	r3, [r6, #8]
    a982:	7801      	ldrb	r1, [r0, #0]
    a984:	065b      	lsls	r3, r3, #25
    a986:	0fdb      	lsrs	r3, r3, #31
    a988:	01da      	lsls	r2, r3, #7
    a98a:	237f      	movs	r3, #127	; 0x7f
    a98c:	400b      	ands	r3, r1
    a98e:	4313      	orrs	r3, r2
    a990:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    a992:	0029      	movs	r1, r5
		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    a994:	230c      	movs	r3, #12
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    a996:	31e4      	adds	r1, #228	; 0xe4
		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    a998:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    a99a:	2206      	movs	r2, #6
    a99c:	3002      	adds	r0, #2
    a99e:	f7f6 f956 	bl	c4e <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
    a9a2:	0031      	movs	r1, r6
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    a9a4:	0038      	movs	r0, r7
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
    a9a6:	310a      	adds	r1, #10
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    a9a8:	2206      	movs	r2, #6
    a9aa:	3008      	adds	r0, #8
    a9ac:	f7f6 f94f 	bl	c4e <memcpy>
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    a9b0:	0029      	movs	r1, r5
    a9b2:	2202      	movs	r2, #2
    a9b4:	31dc      	adds	r1, #220	; 0xdc
    a9b6:	780b      	ldrb	r3, [r1, #0]
		_radio.state = STATE_TX;

		radio_tmr_tifs_set(RADIO_TIFS);
    a9b8:	2096      	movs	r0, #150	; 0x96
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    a9ba:	4313      	orrs	r3, r2
    a9bc:	700b      	strb	r3, [r1, #0]
		_radio.state = STATE_TX;
    a9be:	742a      	strb	r2, [r5, #16]

		radio_tmr_tifs_set(RADIO_TIFS);
    a9c0:	f7fd fa3a 	bl	7e38 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    a9c4:	0020      	movs	r0, r4
    a9c6:	f7fd f993 	bl	7cf0 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    a9ca:	0038      	movs	r0, r7
    a9cc:	f7fd f922 	bl	7c14 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    a9d0:	f7fd fafe 	bl	7fd0 <radio_tmr_end_capture>

		return 0;
    a9d4:	e04a      	b.n	aa6c <isr_rx_scan+0x5d4>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	d103      	bne.n	a9e2 <isr_rx_scan+0x54a>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    a9da:	7a73      	ldrb	r3, [r6, #9]
    a9dc:	2b00      	cmp	r3, #0
    a9de:	d13a      	bne.n	aa56 <isr_rx_scan+0x5be>
    a9e0:	e043      	b.n	aa6a <isr_rx_scan+0x5d2>
		radio_tmr_end_capture();

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    a9e2:	2b01      	cmp	r3, #1
    a9e4:	d005      	beq.n	a9f2 <isr_rx_scan+0x55a>
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    a9e6:	220b      	movs	r2, #11
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    a9e8:	7a31      	ldrb	r1, [r6, #8]
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    a9ea:	400a      	ands	r2, r1
    a9ec:	2a02      	cmp	r2, #2
    a9ee:	d120      	bne.n	aa32 <isr_rx_scan+0x59a>
    a9f0:	e7f3      	b.n	a9da <isr_rx_scan+0x542>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    a9f2:	4d20      	ldr	r5, [pc, #128]	; (aa74 <isr_rx_scan+0x5dc>)

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a9f4:	09d2      	lsrs	r2, r2, #7
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    a9f6:	002b      	movs	r3, r5
    a9f8:	33dd      	adds	r3, #221	; 0xdd
    a9fa:	781b      	ldrb	r3, [r3, #0]

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a9fc:	09db      	lsrs	r3, r3, #7
    a9fe:	4293      	cmp	r3, r2
    aa00:	d004      	beq.n	aa0c <isr_rx_scan+0x574>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    aa02:	35dd      	adds	r5, #221	; 0xdd
    aa04:	782b      	ldrb	r3, [r5, #0]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
    aa06:	069b      	lsls	r3, r3, #26
    aa08:	d40a      	bmi.n	aa20 <isr_rx_scan+0x588>
    aa0a:	e7ec      	b.n	a9e6 <isr_rx_scan+0x54e>
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
    aa0c:	0028      	movs	r0, r5
    aa0e:	0031      	movs	r1, r6
    aa10:	30e4      	adds	r0, #228	; 0xe4
    aa12:	2206      	movs	r2, #6
    aa14:	3110      	adds	r1, #16
    aa16:	f7f6 f905 	bl	c24 <memcmp>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    aa1a:	2800      	cmp	r0, #0
    aa1c:	d0dd      	beq.n	a9da <isr_rx_scan+0x542>
    aa1e:	e7f0      	b.n	aa02 <isr_rx_scan+0x56a>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    aa20:	7a33      	ldrb	r3, [r6, #8]
    aa22:	09db      	lsrs	r3, r3, #7
    aa24:	d0df      	beq.n	a9e6 <isr_rx_scan+0x54e>
		     (pdu_adv_rx->rx_addr != 0) &&
    aa26:	223f      	movs	r2, #63	; 0x3f
    aa28:	7d73      	ldrb	r3, [r6, #21]
    aa2a:	4393      	bics	r3, r2
    aa2c:	2b40      	cmp	r3, #64	; 0x40
    aa2e:	d1da      	bne.n	a9e6 <isr_rx_scan+0x54e>
    aa30:	e7d3      	b.n	a9da <isr_rx_scan+0x542>
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    aa32:	230f      	movs	r3, #15
    aa34:	400b      	ands	r3, r1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    aa36:	2b07      	cmp	r3, #7
    aa38:	d105      	bne.n	aa46 <isr_rx_scan+0x5ae>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    aa3a:	4a0e      	ldr	r2, [pc, #56]	; (aa74 <isr_rx_scan+0x5dc>)
    aa3c:	32dd      	adds	r2, #221	; 0xdd
    aa3e:	7812      	ldrb	r2, [r2, #0]
    aa40:	421a      	tst	r2, r3
    aa42:	d1ca      	bne.n	a9da <isr_rx_scan+0x542>
    aa44:	e011      	b.n	aa6a <isr_rx_scan+0x5d2>
		   (_radio.scanner.phy)) ||
    aa46:	2b04      	cmp	r3, #4
    aa48:	d10f      	bne.n	aa6a <isr_rx_scan+0x5d2>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    aa4a:	4b0a      	ldr	r3, [pc, #40]	; (aa74 <isr_rx_scan+0x5dc>)
    aa4c:	33dc      	adds	r3, #220	; 0xdc
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    aa4e:	781b      	ldrb	r3, [r3, #0]
    aa50:	079b      	lsls	r3, r3, #30
    aa52:	d4c2      	bmi.n	a9da <isr_rx_scan+0x542>
    aa54:	e009      	b.n	aa6a <isr_rx_scan+0x5d2>
		   (_radio.scanner.state != 0))) &&
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    aa56:	4b07      	ldr	r3, [pc, #28]	; (aa74 <isr_rx_scan+0x5dc>)
    aa58:	33fc      	adds	r3, #252	; 0xfc
    aa5a:	681b      	ldr	r3, [r3, #0]
    aa5c:	2b00      	cmp	r3, #0
    aa5e:	d104      	bne.n	aa6a <isr_rx_scan+0x5d2>
		u32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(rssi_ready);
    aa60:	0020      	movs	r0, r4
    aa62:	f7ff fcd3 	bl	a40c <isr_rx_scan_report>
    aa66:	1e04      	subs	r4, r0, #0
		if (err) {
    aa68:	d100      	bne.n	aa6c <isr_rx_scan+0x5d4>
	else {
		/* ignore and close this rx/tx chain ( code below ) */
		return 1;
	}

	return 1;
    aa6a:	2401      	movs	r4, #1
}
    aa6c:	0020      	movs	r0, r4
    aa6e:	b015      	add	sp, #84	; 0x54
    aa70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa72:	46c0      	nop			; (mov r8, r8)
    aa74:	20000f68 	.word	0x20000f68
    aa78:	0000050f 	.word	0x0000050f
    aa7c:	00009a89 	.word	0x00009a89
    aa80:	3b9aca00 	.word	0x3b9aca00
    aa84:	1afd498d 	.word	0x1afd498d
    aa88:	00000527 	.word	0x00000527
    aa8c:	00009a01 	.word	0x00009a01
    aa90:	0000c439 	.word	0x0000c439
    aa94:	0001241d 	.word	0x0001241d
    aa98:	0001246d 	.word	0x0001246d
    aa9c:	000124a8 	.word	0x000124a8
    aaa0:	000123e3 	.word	0x000123e3
    aaa4:	000137f7 	.word	0x000137f7
    aaa8:	00014b92 	.word	0x00014b92
    aaac:	20001045 	.word	0x20001045

0000aab0 <prepare_normal_set>:
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    aab0:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    aab2:	6803      	ldr	r3, [r0, #0]
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    aab4:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    aab6:	2b00      	cmp	r3, #0
    aab8:	da24      	bge.n	ab04 <prepare_normal_set+0x54>
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    aaba:	6845      	ldr	r5, [r0, #4]
    aabc:	6884      	ldr	r4, [r0, #8]
    aabe:	005b      	lsls	r3, r3, #1
    aac0:	085b      	lsrs	r3, r3, #1
    aac2:	42ac      	cmp	r4, r5
    aac4:	d200      	bcs.n	aac8 <prepare_normal_set+0x18>
    aac6:	002c      	movs	r4, r5
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    aac8:	9006      	str	r0, [sp, #24]
    aaca:	480f      	ldr	r0, [pc, #60]	; (ab08 <prepare_normal_set+0x58>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    aacc:	1b1b      	subs	r3, r3, r4
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    aace:	9005      	str	r0, [sp, #20]
    aad0:	2000      	movs	r0, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    aad2:	b29b      	uxth	r3, r3
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    aad4:	9301      	str	r3, [sp, #4]
    aad6:	9300      	str	r3, [sp, #0]
    aad8:	9004      	str	r0, [sp, #16]
    aada:	0003      	movs	r3, r0
    aadc:	9003      	str	r0, [sp, #12]
    aade:	9002      	str	r0, [sp, #8]
    aae0:	f7fe f9f8 	bl	8ed4 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      ticker_user_id,
				      ticker_id, 0, ticks_drift_minus,
				      ticks_drift_minus, 0, 0, 0,
				      prepare_normal, hdr);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    aae4:	2302      	movs	r3, #2
    aae6:	4398      	bics	r0, r3
    aae8:	d00c      	beq.n	ab04 <prepare_normal_set+0x54>
    aaea:	4b08      	ldr	r3, [pc, #32]	; (ab0c <prepare_normal_set+0x5c>)
    aaec:	4a08      	ldr	r2, [pc, #32]	; (ab10 <prepare_normal_set+0x60>)
    aaee:	9301      	str	r3, [sp, #4]
    aaf0:	4b08      	ldr	r3, [pc, #32]	; (ab14 <prepare_normal_set+0x64>)
    aaf2:	4909      	ldr	r1, [pc, #36]	; (ab18 <prepare_normal_set+0x68>)
    aaf4:	9300      	str	r3, [sp, #0]
    aaf6:	4809      	ldr	r0, [pc, #36]	; (ab1c <prepare_normal_set+0x6c>)
    aaf8:	4b09      	ldr	r3, [pc, #36]	; (ab20 <prepare_normal_set+0x70>)
    aafa:	f7f6 fecb 	bl	1894 <printk>
    aafe:	b662      	cpsie	i
    ab00:	2004      	movs	r0, #4
    ab02:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
	}
}
    ab04:	b009      	add	sp, #36	; 0x24
    ab06:	bd30      	pop	{r4, r5, pc}
    ab08:	00009121 	.word	0x00009121
    ab0c:	0001241d 	.word	0x0001241d
    ab10:	0001246d 	.word	0x0001246d
    ab14:	000124a8 	.word	0x000124a8
    ab18:	000123e3 	.word	0x000123e3
    ab1c:	000137f7 	.word	0x000137f7
    ab20:	000148a4 	.word	0x000148a4

0000ab24 <preempt_calc>:

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
    ab24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab26:	0014      	movs	r4, r2
    ab28:	000f      	movs	r7, r1
    ab2a:	0006      	movs	r6, r0
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    ab2c:	f7fe fabe 	bl	90ac <ticker_ticks_now_get>

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
	u32_t diff =
    ab30:	0021      	movs	r1, r4
    ab32:	f7fe fabf 	bl	90b4 <ticker_ticks_diff_get>
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
    ab36:	1cc5      	adds	r5, r0, #3
		}

		return 1;
	}

	return 0;
    ab38:	2400      	movs	r4, #0
{
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    ab3a:	2d09      	cmp	r5, #9
    ab3c:	d90e      	bls.n	ab5c <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    ab3e:	0021      	movs	r1, r4
    ab40:	0020      	movs	r0, r4
    ab42:	f7fe fdc7 	bl	96d4 <mayfly_xtal_retain>

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    ab46:	0021      	movs	r1, r4
    ab48:	0030      	movs	r0, r6
    ab4a:	003a      	movs	r2, r7
    ab4c:	f7ff ffb0 	bl	aab0 <prepare_normal_set>

		diff += hdr->ticks_preempt_to_start;
    ab50:	68b3      	ldr	r3, [r6, #8]
		if (diff <
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
		}

		return 1;
    ab52:	3401      	adds	r4, #1
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);

		diff += hdr->ticks_preempt_to_start;
    ab54:	18e8      	adds	r0, r5, r3
		if (diff <
    ab56:	2826      	cmp	r0, #38	; 0x26
    ab58:	d800      	bhi.n	ab5c <preempt_calc+0x38>
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
    ab5a:	60b0      	str	r0, [r6, #8]

		return 1;
	}

	return 0;
}
    ab5c:	0020      	movs	r0, r4
    ab5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ab60 <mayfly_xtal_stop_calc>:
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    ab60:	b530      	push	{r4, r5, lr}
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ab62:	2302      	movs	r3, #2
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    ab64:	2423      	movs	r4, #35	; 0x23
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    ab66:	b08d      	sub	sp, #52	; 0x34
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ab68:	9309      	str	r3, [sp, #36]	; 0x24
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    ab6a:	446c      	add	r4, sp
    ab6c:	33fd      	adds	r3, #253	; 0xfd
    ab6e:	7023      	strb	r3, [r4, #0]
	ticks_to_expire = 0;
    ab70:	2300      	movs	r3, #0
    ab72:	930a      	str	r3, [sp, #40]	; 0x28
	do {
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    ab74:	ab09      	add	r3, sp, #36	; 0x24
    ab76:	9302      	str	r3, [sp, #8]
    ab78:	4b47      	ldr	r3, [pc, #284]	; (ac98 <mayfly_xtal_stop_calc+0x138>)
    ab7a:	0022      	movs	r2, r4
    ab7c:	9301      	str	r3, [sp, #4]
    ab7e:	ab0a      	add	r3, sp, #40	; 0x28
    ab80:	9300      	str	r3, [sp, #0]
    ab82:	2101      	movs	r1, #1
    ab84:	ab0b      	add	r3, sp, #44	; 0x2c
    ab86:	2000      	movs	r0, #0
    ab88:	f7fe fa22 	bl	8fd0 <ticker_next_slot_get>
					   RADIO_TICKER_USER_ID_JOB, &ticker_id,
					   &ticks_current, &ticks_to_expire,
					   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    ab8c:	2802      	cmp	r0, #2
    ab8e:	d00b      	beq.n	aba8 <mayfly_xtal_stop_calc+0x48>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
						 RADIO_TICKER_USER_ID_JOB);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    ab90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab92:	2b00      	cmp	r3, #0
    ab94:	d010      	beq.n	abb8 <mayfly_xtal_stop_calc+0x58>
    ab96:	4b41      	ldr	r3, [pc, #260]	; (ac9c <mayfly_xtal_stop_calc+0x13c>)
    ab98:	4a41      	ldr	r2, [pc, #260]	; (aca0 <mayfly_xtal_stop_calc+0x140>)
    ab9a:	9301      	str	r3, [sp, #4]
    ab9c:	4b41      	ldr	r3, [pc, #260]	; (aca4 <mayfly_xtal_stop_calc+0x144>)
    ab9e:	4942      	ldr	r1, [pc, #264]	; (aca8 <mayfly_xtal_stop_calc+0x148>)
    aba0:	9300      	str	r3, [sp, #0]
    aba2:	4842      	ldr	r0, [pc, #264]	; (acac <mayfly_xtal_stop_calc+0x14c>)
    aba4:	4b42      	ldr	r3, [pc, #264]	; (acb0 <mayfly_xtal_stop_calc+0x150>)
    aba6:	e049      	b.n	ac3c <mayfly_xtal_stop_calc+0xdc>
					   RADIO_TICKER_USER_ID_JOB, &ticker_id,
					   &ticks_current, &ticks_to_expire,
					   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
    aba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    abaa:	2b02      	cmp	r3, #2
    abac:	d1f0      	bne.n	ab90 <mayfly_xtal_stop_calc+0x30>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    abae:	2101      	movs	r1, #1
    abb0:	2000      	movs	r0, #0
    abb2:	f7fe fa6b 	bl	908c <ticker_job_sched>
    abb6:	e7f7      	b.n	aba8 <mayfly_xtal_stop_calc+0x48>
						 RADIO_TICKER_USER_ID_JOB);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
	} while (ticker_id != 0xff &&
    abb8:	7822      	ldrb	r2, [r4, #0]
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
			       _radio.connection_count));
    abba:	2aff      	cmp	r2, #255	; 0xff
    abbc:	d043      	beq.n	ac46 <mayfly_xtal_stop_calc+0xe6>
    abbe:	4d3d      	ldr	r5, [pc, #244]	; (acb4 <mayfly_xtal_stop_calc+0x154>)
    abc0:	002b      	movs	r3, r5
    abc2:	33ff      	adds	r3, #255	; 0xff
						 RADIO_TICKER_USER_ID_JOB);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
	} while (ticker_id != 0xff &&
    abc4:	7b5b      	ldrb	r3, [r3, #13]
    abc6:	3307      	adds	r3, #7
    abc8:	429a      	cmp	r2, r3
    abca:	dad3      	bge.n	ab74 <mayfly_xtal_stop_calc+0x14>
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
			       _radio.connection_count));

	if ((ticker_id != 0xff) &&
    abcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    abce:	2ba8      	cmp	r3, #168	; 0xa8
    abd0:	d839      	bhi.n	ac46 <mayfly_xtal_stop_calc+0xe6>
	    (ticks_to_expire <
	     TICKER_US_TO_TICKS(CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD))) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    abd2:	2101      	movs	r1, #1
    abd4:	0008      	movs	r0, r1
    abd6:	f7fe fd7d 	bl	96d4 <mayfly_xtal_retain>

		if (ticker_id >= RADIO_TICKER_ID_ADV) {
    abda:	7822      	ldrb	r2, [r4, #0]
    abdc:	2a04      	cmp	r2, #4
    abde:	d958      	bls.n	ac92 <mayfly_xtal_stop_calc+0x132>
			u32_t ticks_prepare_to_start;
			struct connection *conn = NULL;
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    abe0:	2a06      	cmp	r2, #6
    abe2:	d950      	bls.n	ac86 <mayfly_xtal_stop_calc+0x126>
				conn = mem_get(_radio.conn_pool,
    abe4:	218c      	movs	r1, #140	; 0x8c
    abe6:	3a07      	subs	r2, #7
    abe8:	35fc      	adds	r5, #252	; 0xfc
    abea:	b292      	uxth	r2, r2
    abec:	0049      	lsls	r1, r1, #1
    abee:	68a8      	ldr	r0, [r5, #8]
    abf0:	f7fc fe73 	bl	78da <mem_get>
			}

			/* compensate for reduced next ticker's prepare or
			 * reduce next ticker's prepare.
			 */
			ticks_prepare_to_start =
    abf4:	6843      	ldr	r3, [r0, #4]
    abf6:	6882      	ldr	r2, [r0, #8]
    abf8:	429a      	cmp	r2, r3
    abfa:	d200      	bcs.n	abfe <mayfly_xtal_stop_calc+0x9e>
    abfc:	001a      	movs	r2, r3
				(hdr->ticks_active_to_start >
				 hdr->ticks_preempt_to_start) ?
				hdr->ticks_active_to_start :
				hdr->ticks_preempt_to_start;
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
    abfe:	6803      	ldr	r3, [r0, #0]
    ac00:	2b00      	cmp	r3, #0
    ac02:	db46      	blt.n	ac92 <mayfly_xtal_stop_calc+0x132>
						    ticks_prepare_to_start);
			} else {
				/* Postpone the primary because we dont have
				 * to start xtal.
				 */
				if (hdr->ticks_xtal_to_start >
    ac04:	429a      	cmp	r2, r3
    ac06:	d244      	bcs.n	ac92 <mayfly_xtal_stop_calc+0x132>
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
						ticker_update(
    ac08:	1a9b      	subs	r3, r3, r2
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    ac0a:	7822      	ldrb	r2, [r4, #0]
    ac0c:	9006      	str	r0, [sp, #24]
    ac0e:	2000      	movs	r0, #0
    ac10:	4929      	ldr	r1, [pc, #164]	; (acb8 <mayfly_xtal_stop_calc+0x158>)
						ticker_update(
    ac12:	b29b      	uxth	r3, r3
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    ac14:	9105      	str	r1, [sp, #20]
    ac16:	9302      	str	r3, [sp, #8]
    ac18:	9004      	str	r0, [sp, #16]
    ac1a:	9003      	str	r0, [sp, #12]
    ac1c:	9001      	str	r0, [sp, #4]
    ac1e:	9000      	str	r0, [sp, #0]
    ac20:	2101      	movs	r1, #1
    ac22:	f7fe f957 	bl	8ed4 <ticker_update>
							      ticks_drift_plus, 0,
							      0, ticks_drift_plus,
							      0, 0,
							      prepare_reduced,
							      hdr);
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
    ac26:	2302      	movs	r3, #2
    ac28:	4398      	bics	r0, r3
    ac2a:	d032      	beq.n	ac92 <mayfly_xtal_stop_calc+0x132>
    ac2c:	4b1b      	ldr	r3, [pc, #108]	; (ac9c <mayfly_xtal_stop_calc+0x13c>)
    ac2e:	4a1c      	ldr	r2, [pc, #112]	; (aca0 <mayfly_xtal_stop_calc+0x140>)
    ac30:	9301      	str	r3, [sp, #4]
    ac32:	4b1c      	ldr	r3, [pc, #112]	; (aca4 <mayfly_xtal_stop_calc+0x144>)
    ac34:	491c      	ldr	r1, [pc, #112]	; (aca8 <mayfly_xtal_stop_calc+0x148>)
    ac36:	9300      	str	r3, [sp, #0]
    ac38:	4820      	ldr	r0, [pc, #128]	; (acbc <mayfly_xtal_stop_calc+0x15c>)
    ac3a:	4b1d      	ldr	r3, [pc, #116]	; (acb0 <mayfly_xtal_stop_calc+0x150>)
    ac3c:	f7f6 fe2a 	bl	1894 <printk>
    ac40:	b662      	cpsie	i
    ac42:	2004      	movs	r0, #4
    ac44:	df02      	svc	2
				}
			}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
		}
	} else {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    ac46:	2100      	movs	r1, #0
    ac48:	2001      	movs	r0, #1
    ac4a:	f7fe fd43 	bl	96d4 <mayfly_xtal_retain>

		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
    ac4e:	7822      	ldrb	r2, [r4, #0]
    ac50:	1f53      	subs	r3, r2, #5
    ac52:	b2db      	uxtb	r3, r3
    ac54:	2bf9      	cmp	r3, #249	; 0xf9
    ac56:	d81c      	bhi.n	ac92 <mayfly_xtal_stop_calc+0x132>
    ac58:	4b16      	ldr	r3, [pc, #88]	; (acb4 <mayfly_xtal_stop_calc+0x154>)
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ac5a:	2a06      	cmp	r2, #6
    ac5c:	d908      	bls.n	ac70 <mayfly_xtal_stop_calc+0x110>
				struct connection *conn;

				conn = mem_get(_radio.conn_pool,
    ac5e:	218c      	movs	r1, #140	; 0x8c
    ac60:	33fc      	adds	r3, #252	; 0xfc
    ac62:	3a07      	subs	r2, #7
    ac64:	b292      	uxth	r2, r2
    ac66:	0049      	lsls	r1, r1, #1
    ac68:	6898      	ldr	r0, [r3, #8]
    ac6a:	f7fc fe36 	bl	78da <mem_get>
    ac6e:	e005      	b.n	ac7c <mayfly_xtal_stop_calc+0x11c>
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    ac70:	0018      	movs	r0, r3
    ac72:	3014      	adds	r0, #20
				conn = mem_get(_radio.conn_pool,
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    ac74:	2a05      	cmp	r2, #5
    ac76:	d001      	beq.n	ac7c <mayfly_xtal_stop_calc+0x11c>
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    ac78:	33cc      	adds	r3, #204	; 0xcc
    ac7a:	0018      	movs	r0, r3
			} else {
				LL_ASSERT(0);
			}

			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
    ac7c:	7822      	ldrb	r2, [r4, #0]
    ac7e:	2101      	movs	r1, #1
    ac80:	f7ff ff16 	bl	aab0 <prepare_normal_set>
					   ticker_id);
		}
	}
}
    ac84:	e005      	b.n	ac92 <mayfly_xtal_stop_calc+0x132>
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    ac86:	0028      	movs	r0, r5
    ac88:	3014      	adds	r0, #20
				conn = mem_get(_radio.conn_pool,
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    ac8a:	2a05      	cmp	r2, #5
    ac8c:	d0b2      	beq.n	abf4 <mayfly_xtal_stop_calc+0x94>
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    ac8e:	30b8      	adds	r0, #184	; 0xb8
    ac90:	e7b0      	b.n	abf4 <mayfly_xtal_stop_calc+0x94>
			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
					   ticker_id);
		}
	}
}
    ac92:	b00d      	add	sp, #52	; 0x34
    ac94:	bd30      	pop	{r4, r5, pc}
    ac96:	46c0      	nop			; (mov r8, r8)
    ac98:	0000910d 	.word	0x0000910d
    ac9c:	0001241d 	.word	0x0001241d
    aca0:	0001246d 	.word	0x0001246d
    aca4:	000124a8 	.word	0x000124a8
    aca8:	000123e3 	.word	0x000123e3
    acac:	000139ae 	.word	0x000139ae
    acb0:	000148d7 	.word	0x000148d7
    acb4:	20000f68 	.word	0x20000f68
    acb8:	00009111 	.word	0x00009111
    acbc:	000139db 	.word	0x000139db

0000acc0 <radio_event_adv_prepare>:
			    0x555555);
}

void radio_event_adv_prepare(u32_t ticks_at_expire, u32_t remainder,
			     u16_t lazy, void *context)
{
    acc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	LL_ASSERT(!_radio.ticker_id_prepare);
    acc2:	4c11      	ldr	r4, [pc, #68]	; (ad08 <radio_event_adv_prepare+0x48>)
    acc4:	7b25      	ldrb	r5, [r4, #12]
    acc6:	b2ed      	uxtb	r5, r5
    acc8:	2d00      	cmp	r5, #0
    acca:	d00c      	beq.n	ace6 <radio_event_adv_prepare+0x26>
    accc:	4b0f      	ldr	r3, [pc, #60]	; (ad0c <radio_event_adv_prepare+0x4c>)
    acce:	4a10      	ldr	r2, [pc, #64]	; (ad10 <radio_event_adv_prepare+0x50>)
    acd0:	9301      	str	r3, [sp, #4]
    acd2:	4b10      	ldr	r3, [pc, #64]	; (ad14 <radio_event_adv_prepare+0x54>)
    acd4:	4910      	ldr	r1, [pc, #64]	; (ad18 <radio_event_adv_prepare+0x58>)
    acd6:	9300      	str	r3, [sp, #0]
    acd8:	4810      	ldr	r0, [pc, #64]	; (ad1c <radio_event_adv_prepare+0x5c>)
    acda:	4b11      	ldr	r3, [pc, #68]	; (ad20 <radio_event_adv_prepare+0x60>)
    acdc:	f7f6 fdda 	bl	1894 <printk>
    ace0:	b662      	cpsie	i
    ace2:	2004      	movs	r0, #4
    ace4:	df02      	svc	2

	err = event_common_prepare(ticks_at_expire, remainder,
    ace6:	9503      	str	r5, [sp, #12]
    ace8:	4d0e      	ldr	r5, [pc, #56]	; (ad24 <radio_event_adv_prepare+0x64>)
    acea:	0023      	movs	r3, r4
    acec:	9502      	str	r5, [sp, #8]
    acee:	2505      	movs	r5, #5
    acf0:	0022      	movs	r2, r4
    acf2:	9501      	str	r5, [sp, #4]
    acf4:	69e6      	ldr	r6, [r4, #28]
    acf6:	3318      	adds	r3, #24
    acf8:	3214      	adds	r2, #20
    acfa:	9600      	str	r6, [sp, #0]
    acfc:	f7ff f916 	bl	9f2c <event_common_prepare>
				   &_radio.advertiser.hdr.ticks_xtal_to_start,
				   &_radio.advertiser.hdr.ticks_active_to_start,
				   _radio.advertiser.hdr.ticks_preempt_to_start,
				   RADIO_TICKER_ID_ADV, event_adv, NULL);
	if (!err) {
    ad00:	2800      	cmp	r0, #0
    ad02:	d100      	bne.n	ad06 <radio_event_adv_prepare+0x46>
		_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    ad04:	7325      	strb	r5, [r4, #12]
	}

	DEBUG_RADIO_PREPARE_A(0);
}
    ad06:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    ad08:	20000f68 	.word	0x20000f68
    ad0c:	0001241d 	.word	0x0001241d
    ad10:	0001246d 	.word	0x0001246d
    ad14:	000124a8 	.word	0x000124a8
    ad18:	000123e3 	.word	0x000123e3
    ad1c:	00013a29 	.word	0x00013a29
    ad20:	00014b3f 	.word	0x00014b3f
    ad24:	0000ad75 	.word	0x0000ad75

0000ad28 <adv_scan_configure.constprop.30>:
	radio_reset();
	radio_tx_power_set(0);
	radio_isr_set(isr);
}

static void adv_scan_configure(u8_t phy, u8_t flags)
    ad28:	b513      	push	{r0, r1, r4, lr}
    ad2a:	0004      	movs	r4, r0
{
	u32_t aa = 0x8e89bed6;
    ad2c:	4b0d      	ldr	r3, [pc, #52]	; (ad64 <adv_scan_configure.constprop.30+0x3c>)
    ad2e:	9301      	str	r3, [sp, #4]
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    ad30:	f7fc fef8 	bl	7b24 <radio_reset>
	radio_tx_power_set(0);
    ad34:	2000      	movs	r0, #0
    ad36:	f7fc ff11 	bl	7b5c <radio_tx_power_set>
	radio_isr_set(isr);
    ad3a:	480b      	ldr	r0, [pc, #44]	; (ad68 <adv_scan_configure.constprop.30+0x40>)
    ad3c:	f7fc feda 	bl	7af4 <radio_isr_set>
static void adv_scan_configure(u8_t phy, u8_t flags)
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
    ad40:	2101      	movs	r1, #1
    ad42:	0020      	movs	r0, r4
    ad44:	f7fc fefe 	bl	7b44 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    ad48:	0064      	lsls	r4, r4, #1
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
	radio_aa_set((u8_t *)&aa);
    ad4a:	a801      	add	r0, sp, #4
    ad4c:	f7fc ff1e 	bl	7b8c <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    ad50:	b2e2      	uxtb	r2, r4
    ad52:	2125      	movs	r1, #37	; 0x25
    ad54:	2008      	movs	r0, #8
    ad56:	f7fc ff37 	bl	7bc8 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    ad5a:	4904      	ldr	r1, [pc, #16]	; (ad6c <adv_scan_configure.constprop.30+0x44>)
    ad5c:	4804      	ldr	r0, [pc, #16]	; (ad70 <adv_scan_configure.constprop.30+0x48>)
    ad5e:	f7fc ffa3 	bl	7ca8 <radio_crc_configure>
			    0x555555);
}
    ad62:	bd13      	pop	{r0, r1, r4, pc}
    ad64:	8e89bed6 	.word	0x8e89bed6
    ad68:	0000c5e5 	.word	0x0000c5e5
    ad6c:	00555555 	.word	0x00555555
    ad70:	0000065b 	.word	0x0000065b

0000ad74 <event_adv>:
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    ad74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    ad76:	4b3a      	ldr	r3, [pc, #232]	; (ae60 <event_adv+0xec>)
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    ad78:	0005      	movs	r5, r0
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    ad7a:	7bda      	ldrb	r2, [r3, #15]
    ad7c:	001c      	movs	r4, r3
    ad7e:	b2d2      	uxtb	r2, r2
    ad80:	2a00      	cmp	r2, #0
    ad82:	d008      	beq.n	ad96 <event_adv+0x22>
    ad84:	4b37      	ldr	r3, [pc, #220]	; (ae64 <event_adv+0xf0>)
    ad86:	4a38      	ldr	r2, [pc, #224]	; (ae68 <event_adv+0xf4>)
    ad88:	9301      	str	r3, [sp, #4]
    ad8a:	4b38      	ldr	r3, [pc, #224]	; (ae6c <event_adv+0xf8>)
    ad8c:	4938      	ldr	r1, [pc, #224]	; (ae70 <event_adv+0xfc>)
    ad8e:	9300      	str	r3, [sp, #0]
    ad90:	4838      	ldr	r0, [pc, #224]	; (ae74 <event_adv+0x100>)
    ad92:	4b39      	ldr	r3, [pc, #228]	; (ae78 <event_adv+0x104>)
    ad94:	e00b      	b.n	adae <event_adv+0x3a>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    ad96:	7b1b      	ldrb	r3, [r3, #12]
    ad98:	b2db      	uxtb	r3, r3
    ad9a:	2b05      	cmp	r3, #5
    ad9c:	d00c      	beq.n	adb8 <event_adv+0x44>
    ad9e:	4b31      	ldr	r3, [pc, #196]	; (ae64 <event_adv+0xf0>)
    ada0:	4a31      	ldr	r2, [pc, #196]	; (ae68 <event_adv+0xf4>)
    ada2:	9301      	str	r3, [sp, #4]
    ada4:	4b31      	ldr	r3, [pc, #196]	; (ae6c <event_adv+0xf8>)
    ada6:	4932      	ldr	r1, [pc, #200]	; (ae70 <event_adv+0xfc>)
    ada8:	9300      	str	r3, [sp, #0]
    adaa:	4834      	ldr	r0, [pc, #208]	; (ae7c <event_adv+0x108>)
    adac:	4b32      	ldr	r3, [pc, #200]	; (ae78 <event_adv+0x104>)
    adae:	f7f6 fd71 	bl	1894 <printk>
    adb2:	b662      	cpsie	i
    adb4:	2004      	movs	r0, #4
    adb6:	df02      	svc	2
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    adb8:	2601      	movs	r6, #1
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    adba:	1da7      	adds	r7, r4, #6
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;
    adbc:	6060      	str	r0, [r4, #4]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    adbe:	7ff8      	ldrb	r0, [r7, #31]
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    adc0:	73e6      	strb	r6, [r4, #15]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    adc2:	0740      	lsls	r0, r0, #29
    adc4:	0f40      	lsrs	r0, r0, #29
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
    adc6:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    adc8:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    adca:	f7ff ffad 	bl	ad28 <adv_scan_configure.constprop.30>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	adv_scan_configure(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    adce:	200e      	movs	r0, #14
    add0:	7ffb      	ldrb	r3, [r7, #31]
    add2:	1d61      	adds	r1, r4, #5
    add4:	069b      	lsls	r3, r3, #26
    add6:	0f5b      	lsrs	r3, r3, #29
    add8:	005a      	lsls	r2, r3, #1
    adda:	7fcb      	ldrb	r3, [r1, #31]
    addc:	4383      	bics	r3, r0
    adde:	4313      	orrs	r3, r2
    ade0:	77cb      	strb	r3, [r1, #31]
	adv_setup();
    ade2:	f7ff fa63 	bl	a2ac <adv_setup>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (ctrl_rl_enabled()) {
    ade6:	f004 fde1 	bl	f9ac <ctrl_rl_enabled>
    adea:	223f      	movs	r2, #63	; 0x3f
    adec:	7ffb      	ldrb	r3, [r7, #31]
		struct ll_filter *filter =
    adee:	4393      	bics	r3, r2

	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
	adv_setup();

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (ctrl_rl_enabled()) {
    adf0:	2800      	cmp	r0, #0
    adf2:	d003      	beq.n	adfc <event_adv+0x88>
		struct ll_filter *filter =
    adf4:	1e58      	subs	r0, r3, #1
    adf6:	4183      	sbcs	r3, r0
    adf8:	b2d8      	uxtb	r0, r3
    adfa:	e002      	b.n	ae02 <event_adv+0x8e>
				       filter->addr_type_bitmask,
				       (u8_t *)filter->bdaddr);
	} else
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {
    adfc:	2b00      	cmp	r3, #0
    adfe:	d007      	beq.n	ae10 <event_adv+0x9c>

		struct ll_filter *wl = ctrl_filter_get(true);
    ae00:	0030      	movs	r0, r6
    ae02:	f004 fc89 	bl	f718 <ctrl_filter_get>

		radio_filter_configure(wl->enable_bitmask,
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
    ae06:	1c82      	adds	r2, r0, #2
	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {

		struct ll_filter *wl = ctrl_filter_get(true);

		radio_filter_configure(wl->enable_bitmask,
    ae08:	7841      	ldrb	r1, [r0, #1]
    ae0a:	7800      	ldrb	r0, [r0, #0]
    ae0c:	f7fc ffaa 	bl	7d64 <radio_filter_configure>
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
	}

	radio_tmr_start(1,
    ae10:	0029      	movs	r1, r5
    ae12:	68a2      	ldr	r2, [r4, #8]
    ae14:	3109      	adds	r1, #9
    ae16:	2001      	movs	r0, #1
    ae18:	f7fd f816 	bl	7e48 <radio_tmr_start>
			ticks_at_expire +
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
			_radio.remainder_anchor);
	radio_tmr_end_capture();
    ae1c:	f7fd f8d8 	bl	7fd0 <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    ae20:	0020      	movs	r0, r4
    ae22:	002a      	movs	r2, r5
    ae24:	3014      	adds	r0, #20
    ae26:	2105      	movs	r1, #5
    ae28:	f7ff fe7c 	bl	ab24 <preempt_calc>
    ae2c:	2800      	cmp	r0, #0
    ae2e:	d004      	beq.n	ae3a <event_adv+0xc6>
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    ae30:	2304      	movs	r3, #4
    ae32:	7423      	strb	r3, [r4, #16]
		radio_disable();
    ae34:	f7fc ff0a 	bl	7c4c <radio_disable>
    ae38:	e010      	b.n	ae5c <event_adv+0xe8>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    ae3a:	0003      	movs	r3, r0
    ae3c:	4a10      	ldr	r2, [pc, #64]	; (ae80 <event_adv+0x10c>)
    ae3e:	0001      	movs	r1, r0
    ae40:	f7fe f8f8 	bl	9034 <ticker_job_idle_get>
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					RADIO_TICKER_USER_ID_WORKER,
					ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ae44:	2302      	movs	r3, #2
    ae46:	4398      	bics	r0, r3
    ae48:	d008      	beq.n	ae5c <event_adv+0xe8>
    ae4a:	4b06      	ldr	r3, [pc, #24]	; (ae64 <event_adv+0xf0>)
    ae4c:	4a06      	ldr	r2, [pc, #24]	; (ae68 <event_adv+0xf4>)
    ae4e:	9301      	str	r3, [sp, #4]
    ae50:	4b06      	ldr	r3, [pc, #24]	; (ae6c <event_adv+0xf8>)
    ae52:	4907      	ldr	r1, [pc, #28]	; (ae70 <event_adv+0xfc>)
    ae54:	9300      	str	r3, [sp, #0]
    ae56:	480b      	ldr	r0, [pc, #44]	; (ae84 <event_adv+0x110>)
    ae58:	4b07      	ldr	r3, [pc, #28]	; (ae78 <event_adv+0x104>)
    ae5a:	e7a8      	b.n	adae <event_adv+0x3a>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_A(0);
}
    ae5c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ae5e:	46c0      	nop			; (mov r8, r8)
    ae60:	20000f68 	.word	0x20000f68
    ae64:	0001241d 	.word	0x0001241d
    ae68:	0001246d 	.word	0x0001246d
    ae6c:	000124a8 	.word	0x000124a8
    ae70:	000123e3 	.word	0x000123e3
    ae74:	00013a64 	.word	0x00013a64
    ae78:	00014a3a 	.word	0x00014a3a
    ae7c:	00013add 	.word	0x00013add
    ae80:	00009ba9 	.word	0x00009ba9
    ae84:	000137f7 	.word	0x000137f7

0000ae88 <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    ae88:	4b03      	ldr	r3, [pc, #12]	; (ae98 <mayfly_xtal_start+0x10>)
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_start(void *params)
{
    ae8a:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    ae8c:	6818      	ldr	r0, [r3, #0]
    ae8e:	2100      	movs	r1, #0
    ae90:	6843      	ldr	r3, [r0, #4]
    ae92:	681b      	ldr	r3, [r3, #0]
    ae94:	4798      	blx	r3
}
    ae96:	bd10      	pop	{r4, pc}
    ae98:	20000f68 	.word	0x20000f68

0000ae9c <mayfly_xtal_stop>:

static void mayfly_xtal_stop(void *params)
{
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    ae9c:	4b03      	ldr	r3, [pc, #12]	; (aeac <mayfly_xtal_stop+0x10>)
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_stop(void *params)
{
    ae9e:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    aea0:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    aea2:	2100      	movs	r1, #0
    aea4:	6843      	ldr	r3, [r0, #4]
    aea6:	685b      	ldr	r3, [r3, #4]
    aea8:	4798      	blx	r3

	DEBUG_RADIO_CLOSE(0);
}
    aeaa:	bd10      	pop	{r4, pc}
    aeac:	20000f68 	.word	0x20000f68

0000aeb0 <chan_sel_2>:
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    aeb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aeb2:	9301      	str	r3, [sp, #4]
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    aeb4:	2301      	movs	r3, #1
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    aeb6:	0014      	movs	r4, r2
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    aeb8:	2603      	movs	r6, #3
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    aeba:	469c      	mov	ip, r3
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    aebc:	4048      	eors	r0, r1
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    aebe:	2308      	movs	r3, #8
static u8_t chan_rev_8(u8_t i)
{
	u8_t iterate;
	u8_t o;

	o = 0;
    aec0:	2200      	movs	r2, #0
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    aec2:	0a05      	lsrs	r5, r0, #8
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    aec4:	4667      	mov	r7, ip
    aec6:	0052      	lsls	r2, r2, #1
    aec8:	402f      	ands	r7, r5
    aeca:	3b01      	subs	r3, #1
    aecc:	433a      	orrs	r2, r7
    aece:	b2db      	uxtb	r3, r3
    aed0:	b2d2      	uxtb	r2, r2
		i >>= 1;
    aed2:	086d      	lsrs	r5, r5, #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    aed4:	2b00      	cmp	r3, #0
    aed6:	d1f5      	bne.n	aec4 <chan_sel_2+0x14>
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    aed8:	2708      	movs	r7, #8
    aeda:	0212      	lsls	r2, r2, #8
    aedc:	b212      	sxth	r2, r2
    aede:	b2c0      	uxtb	r0, r0
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    aee0:	4665      	mov	r5, ip
    aee2:	005b      	lsls	r3, r3, #1
    aee4:	4005      	ands	r5, r0
    aee6:	3f01      	subs	r7, #1
    aee8:	432b      	orrs	r3, r5
    aeea:	b2ff      	uxtb	r7, r7
    aeec:	b2db      	uxtb	r3, r3
		i >>= 1;
    aeee:	0840      	lsrs	r0, r0, #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    aef0:	2f00      	cmp	r7, #0
    aef2:	d1f5      	bne.n	aee0 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
}

static u16_t chan_mam(u16_t a, u16_t b)
{
	return ((u32_t)a * 17 + b) & 0xFFFF;
    aef4:	431a      	orrs	r2, r3
    aef6:	0010      	movs	r0, r2
    aef8:	2311      	movs	r3, #17
    aefa:	4358      	muls	r0, r3
    aefc:	3e01      	subs	r6, #1
    aefe:	1808      	adds	r0, r1, r0
    af00:	b2f6      	uxtb	r6, r6
    af02:	b280      	uxth	r0, r0
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;

	for (iterate = 0; iterate < 3; iterate++) {
    af04:	2e00      	cmp	r6, #0
    af06:	d1da      	bne.n	aebe <chan_sel_2+0xe>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
    af08:	4041      	eors	r1, r0
    af0a:	000e      	movs	r6, r1
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    af0c:	2125      	movs	r1, #37	; 0x25
    af0e:	0030      	movs	r0, r6
    af10:	f7f5 f9d6 	bl	2c0 <__aeabi_uidivmod>

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    af14:	2207      	movs	r2, #7
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    af16:	b2c8      	uxtb	r0, r1

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    af18:	08c3      	lsrs	r3, r0, #3
    af1a:	5ce3      	ldrb	r3, [r4, r3]
    af1c:	4002      	ands	r2, r0
    af1e:	4113      	asrs	r3, r2
    af20:	2201      	movs	r2, #1
    af22:	4213      	tst	r3, r2
    af24:	d105      	bne.n	af32 <chan_sel_2+0x82>
		u8_t chan_index;

		chan_index = ((u32_t)chan_count * prn_e) >> 16;
		chan_next = chan_sel_remap(chan_map, chan_index);
    af26:	9901      	ldr	r1, [sp, #4]
    af28:	0020      	movs	r0, r4
    af2a:	4371      	muls	r1, r6
    af2c:	0c09      	lsrs	r1, r1, #16
    af2e:	f7fe f8fe 	bl	912e <chan_sel_remap>
	} else {
		/* channel can be used, return it */
	}

	return chan_next;
}
    af32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000af34 <connection_configure>:
					   conn->handle;
	}
}

static void connection_configure(struct connection *conn)
{
    af34:	b510      	push	{r4, lr}
    af36:	0004      	movs	r4, r0
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    af38:	f7fc fdf4 	bl	7b24 <radio_reset>
	radio_tx_power_set(0);
    af3c:	2000      	movs	r0, #0
    af3e:	f7fc fe0d 	bl	7b5c <radio_tx_power_set>
	radio_isr_set(isr);
    af42:	4809      	ldr	r0, [pc, #36]	; (af68 <connection_configure+0x34>)
    af44:	f7fc fdd6 	bl	7af4 <radio_isr_set>
}

static void connection_configure(struct connection *conn)
{
	adv_scan_conn_configure();
	radio_aa_set(conn->access_addr);
    af48:	0020      	movs	r0, r4
    af4a:	3010      	adds	r0, #16
    af4c:	f7fc fe1e 	bl	7b8c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    af50:	7da1      	ldrb	r1, [r4, #22]
    af52:	7d63      	ldrb	r3, [r4, #21]
    af54:	0409      	lsls	r1, r1, #16
    af56:	021b      	lsls	r3, r3, #8
    af58:	4319      	orrs	r1, r3
    af5a:	7d23      	ldrb	r3, [r4, #20]
    af5c:	4803      	ldr	r0, [pc, #12]	; (af6c <connection_configure+0x38>)
    af5e:	4319      	orrs	r1, r3
    af60:	f7fc fea2 	bl	7ca8 <radio_crc_configure>
			    (((u32_t)conn->crc_init[2] << 16) |
			     ((u32_t)conn->crc_init[1] << 8) |
			     ((u32_t)conn->crc_init[0])));
}
    af64:	bd10      	pop	{r4, pc}
    af66:	46c0      	nop			; (mov r8, r8)
    af68:	0000c5e5 	.word	0x0000c5e5
    af6c:	0000065b 	.word	0x0000065b

0000af70 <event_slave>:
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    af70:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    af72:	4a6b      	ldr	r2, [pc, #428]	; (b120 <event_slave+0x1b0>)
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    af74:	001c      	movs	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    af76:	7bd3      	ldrb	r3, [r2, #15]
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    af78:	b085      	sub	sp, #20
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    af7a:	b2db      	uxtb	r3, r3
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    af7c:	0006      	movs	r6, r0
    af7e:	0015      	movs	r5, r2
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    af80:	2b00      	cmp	r3, #0
    af82:	d008      	beq.n	af96 <event_slave+0x26>
    af84:	4b67      	ldr	r3, [pc, #412]	; (b124 <event_slave+0x1b4>)
    af86:	4a68      	ldr	r2, [pc, #416]	; (b128 <event_slave+0x1b8>)
    af88:	9301      	str	r3, [sp, #4]
    af8a:	4b68      	ldr	r3, [pc, #416]	; (b12c <event_slave+0x1bc>)
    af8c:	4968      	ldr	r1, [pc, #416]	; (b130 <event_slave+0x1c0>)
    af8e:	9300      	str	r3, [sp, #0]
    af90:	4868      	ldr	r0, [pc, #416]	; (b134 <event_slave+0x1c4>)
    af92:	4b69      	ldr	r3, [pc, #420]	; (b138 <event_slave+0x1c8>)
    af94:	e00d      	b.n	afb2 <event_slave+0x42>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    af96:	7b12      	ldrb	r2, [r2, #12]
    af98:	8c21      	ldrh	r1, [r4, #32]
    af9a:	b2d2      	uxtb	r2, r2
    af9c:	3107      	adds	r1, #7
    af9e:	428a      	cmp	r2, r1
    afa0:	d00c      	beq.n	afbc <event_slave+0x4c>
    afa2:	4b60      	ldr	r3, [pc, #384]	; (b124 <event_slave+0x1b4>)
    afa4:	4a60      	ldr	r2, [pc, #384]	; (b128 <event_slave+0x1b8>)
    afa6:	9301      	str	r3, [sp, #4]
    afa8:	4b60      	ldr	r3, [pc, #384]	; (b12c <event_slave+0x1bc>)
    afaa:	4961      	ldr	r1, [pc, #388]	; (b130 <event_slave+0x1c0>)
    afac:	9300      	str	r3, [sp, #0]
    afae:	4863      	ldr	r0, [pc, #396]	; (b13c <event_slave+0x1cc>)
    afb0:	4b61      	ldr	r3, [pc, #388]	; (b138 <event_slave+0x1c8>)
    afb2:	f7f6 fc6f 	bl	1894 <printk>
    afb6:	b662      	cpsie	i
    afb8:	2004      	movs	r0, #4
    afba:	df02      	svc	2
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    afbc:	2103      	movs	r1, #3
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    afbe:	b2d2      	uxtb	r2, r2

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    afc0:	73e9      	strb	r1, [r5, #15]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    afc2:	002f      	movs	r7, r5
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
    afc4:	732b      	strb	r3, [r5, #12]
	_radio.ticker_id_event =
    afc6:	736a      	strb	r2, [r5, #13]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    afc8:	002a      	movs	r2, r5
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    afca:	3902      	subs	r1, #2
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    afcc:	32ff      	adds	r2, #255	; 0xff
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    afce:	37fc      	adds	r7, #252	; 0xfc
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    afd0:	7553      	strb	r3, [r2, #21]
	_radio.crc_expire = 0;
    afd2:	7593      	strb	r3, [r2, #22]

	_radio.conn_curr = conn;
    afd4:	617c      	str	r4, [r7, #20]
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    afd6:	7429      	strb	r1, [r5, #16]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    afd8:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    afda:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	conn->latency_prepare = 0;

	connection_configure(conn);
    afdc:	0020      	movs	r0, r4
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    afde:	8562      	strh	r2, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    afe0:	8523      	strh	r3, [r4, #40]	; 0x28

	connection_configure(conn);
    afe2:	f7ff ffa7 	bl	af34 <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    afe6:	2096      	movs	r0, #150	; 0x96
    afe8:	f7fc ff26 	bl	7e38 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
    afec:	0023      	movs	r3, r4
    afee:	3332      	adds	r3, #50	; 0x32
    aff0:	7818      	ldrb	r0, [r3, #0]
    aff2:	09c1      	lsrs	r1, r0, #7
    aff4:	0680      	lsls	r0, r0, #26
    aff6:	0f40      	lsrs	r0, r0, #29
    aff8:	f7fc fe82 	bl	7d00 <radio_switch_complete_and_tx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    affc:	233e      	movs	r3, #62	; 0x3e
    affe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    b000:	0027      	movs	r7, r4
    b002:	33ff      	adds	r3, #255	; 0xff
    b004:	5ceb      	ldrb	r3, [r5, r3]
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    b006:	0020      	movs	r0, r4
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    b008:	009b      	lsls	r3, r3, #2
    b00a:	5899      	ldr	r1, [r3, r2]
    b00c:	3717      	adds	r7, #23
    b00e:	3108      	adds	r1, #8
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    b010:	f7fe fbb4 	bl	977c <rx_packet_set>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    b014:	7f22      	ldrb	r2, [r4, #28]
    b016:	0693      	lsls	r3, r2, #26
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    b018:	0e9b      	lsrs	r3, r3, #26

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    b01a:	0652      	lsls	r2, r2, #25
    b01c:	d507      	bpl.n	b02e <event_slave+0xbe>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    b01e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    b020:	8be1      	ldrh	r1, [r4, #30]
    b022:	3801      	subs	r0, #1
    b024:	003a      	movs	r2, r7
    b026:	b280      	uxth	r0, r0
    b028:	f7ff ff42 	bl	aeb0 <chan_sel_2>
    b02c:	e01a      	b.n	b064 <event_slave+0xf4>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    b02e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    b030:	9303      	str	r3, [sp, #12]
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    b032:	7fa3      	ldrb	r3, [r4, #30]
    b034:	3001      	adds	r0, #1
    b036:	4358      	muls	r0, r3
    b038:	7fe3      	ldrb	r3, [r4, #31]
    b03a:	2125      	movs	r1, #37	; 0x25
    b03c:	18c0      	adds	r0, r0, r3
    b03e:	f7f5 fa29 	bl	494 <__aeabi_idivmod>
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b042:	2207      	movs	r2, #7
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    b044:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    b046:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b048:	08c3      	lsrs	r3, r0, #3
    b04a:	5cfb      	ldrb	r3, [r7, r3]
    b04c:	4011      	ands	r1, r2
    b04e:	410b      	asrs	r3, r1
    b050:	3a06      	subs	r2, #6
    b052:	4213      	tst	r3, r2
    b054:	d106      	bne.n	b064 <event_slave+0xf4>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    b056:	9903      	ldr	r1, [sp, #12]
    b058:	f7f5 f932 	bl	2c0 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    b05c:	0038      	movs	r0, r7
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    b05e:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    b060:	f7fe f865 	bl	912e <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    b064:	f7ff f8ee 	bl	a244 <chan_set>

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    b068:	6d22      	ldr	r2, [r4, #80]	; 0x50
    b06a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b06c:	189b      	adds	r3, r3, r2
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
    b06e:	2200      	movs	r2, #0
    b070:	6522      	str	r2, [r4, #80]	; 0x50
	if (conn->role.slave.window_widening_event_us >
	    conn->role.slave.window_widening_max_us) {
    b072:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    b074:	6563      	str	r3, [r4, #84]	; 0x54
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
	if (conn->role.slave.window_widening_event_us >
    b076:	4293      	cmp	r3, r2
    b078:	d900      	bls.n	b07c <event_slave+0x10c>
	    conn->role.slave.window_widening_max_us) {
		conn->role.slave.window_widening_event_us =
    b07a:	6562      	str	r2, [r4, #84]	; 0x54
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    b07c:	2000      	movs	r0, #0

	remainder_us =
    b07e:	0031      	movs	r1, r6
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    b080:	6da2      	ldr	r2, [r4, #88]	; 0x58
    b082:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    b084:	3109      	adds	r1, #9
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    b086:	189b      	adds	r3, r3, r2
    b088:	65e3      	str	r3, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    b08a:	68aa      	ldr	r2, [r5, #8]
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    b08c:	65a0      	str	r0, [r4, #88]	; 0x58

	remainder_us =
    b08e:	f7fc fedb 	bl	7e48 <radio_tmr_start>
    b092:	0005      	movs	r5, r0
		radio_tmr_start(0, ticks_at_expire +
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
	radio_tmr_aa_capture();
    b094:	f7fc ff6e 	bl	7f74 <radio_tmr_aa_capture>
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
    b098:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b09a:	0058      	lsls	r0, r3, #1
    b09c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    b09e:	3340      	adds	r3, #64	; 0x40
    b0a0:	18c0      	adds	r0, r0, r3
    b0a2:	1947      	adds	r7, r0, r5
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    b0a4:	0025      	movs	r5, r4
    b0a6:	3533      	adds	r5, #51	; 0x33
    b0a8:	7828      	ldrb	r0, [r5, #0]
    b0aa:	0680      	lsls	r0, r0, #26
    b0ac:	0f40      	lsrs	r0, r0, #29
    b0ae:	f7fc fdbd 	bl	7c2c <radio_rx_ready_delay_get>
	hcto += addr_us_get(conn->phy_rx);
    b0b2:	782b      	ldrb	r3, [r5, #0]
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    b0b4:	1838      	adds	r0, r7, r0
	hcto += addr_us_get(conn->phy_rx);
    b0b6:	069b      	lsls	r3, r3, #26
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    b0b8:	0f5b      	lsrs	r3, r3, #29
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
    b0ba:	2218      	movs	r2, #24
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    b0bc:	2b02      	cmp	r3, #2
    b0be:	d005      	beq.n	b0cc <event_slave+0x15c>
    b0c0:	2b04      	cmp	r3, #4
    b0c2:	d102      	bne.n	b0ca <event_slave+0x15a>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    b0c4:	3261      	adds	r2, #97	; 0x61
    b0c6:	32ff      	adds	r2, #255	; 0xff
    b0c8:	e000      	b.n	b0cc <event_slave+0x15c>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
    b0ca:	2228      	movs	r2, #40	; 0x28
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	hcto += radio_rx_ready_delay_get(0);
	hcto += addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_tmr_hcto_configure(hcto);
    b0cc:	1810      	adds	r0, r2, r0
    b0ce:	f7fc ff25 	bl	7f1c <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
    b0d2:	f7fc ff7d 	bl	7fd0 <radio_tmr_end_capture>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    b0d6:	8c21      	ldrh	r1, [r4, #32]
    b0d8:	0032      	movs	r2, r6
    b0da:	3107      	adds	r1, #7
    b0dc:	b2c9      	uxtb	r1, r1
    b0de:	0020      	movs	r0, r4
    b0e0:	f7ff fd20 	bl	ab24 <preempt_calc>
    b0e4:	2800      	cmp	r0, #0
    b0e6:	d005      	beq.n	b0f4 <event_slave+0x184>
				      conn->handle), ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    b0e8:	2204      	movs	r2, #4
    b0ea:	4b0d      	ldr	r3, [pc, #52]	; (b120 <event_slave+0x1b0>)
    b0ec:	741a      	strb	r2, [r3, #16]
		radio_disable();
    b0ee:	f7fc fdad 	bl	7c4c <radio_disable>
    b0f2:	e010      	b.n	b116 <event_slave+0x1a6>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    b0f4:	0003      	movs	r3, r0
    b0f6:	4a12      	ldr	r2, [pc, #72]	; (b140 <event_slave+0x1d0>)
    b0f8:	0001      	movs	r1, r0
    b0fa:	f7fd ff9b 	bl	9034 <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b0fe:	2302      	movs	r3, #2
    b100:	4398      	bics	r0, r3
    b102:	d008      	beq.n	b116 <event_slave+0x1a6>
    b104:	4b07      	ldr	r3, [pc, #28]	; (b124 <event_slave+0x1b4>)
    b106:	4a08      	ldr	r2, [pc, #32]	; (b128 <event_slave+0x1b8>)
    b108:	9301      	str	r3, [sp, #4]
    b10a:	4b08      	ldr	r3, [pc, #32]	; (b12c <event_slave+0x1bc>)
    b10c:	4908      	ldr	r1, [pc, #32]	; (b130 <event_slave+0x1c0>)
    b10e:	9300      	str	r3, [sp, #0]
    b110:	480c      	ldr	r0, [pc, #48]	; (b144 <event_slave+0x1d4>)
    b112:	4b09      	ldr	r3, [pc, #36]	; (b138 <event_slave+0x1c8>)
    b114:	e74d      	b.n	afb2 <event_slave+0x42>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    b116:	2002      	movs	r0, #2
    b118:	f7fe febc 	bl	9e94 <packet_tx_enqueue>

	DEBUG_RADIO_START_S(0);
}
    b11c:	b005      	add	sp, #20
    b11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b120:	20000f68 	.word	0x20000f68
    b124:	0001241d 	.word	0x0001241d
    b128:	0001246d 	.word	0x0001246d
    b12c:	000124a8 	.word	0x000124a8
    b130:	000123e3 	.word	0x000123e3
    b134:	00013a64 	.word	0x00013a64
    b138:	00014a55 	.word	0x00014a55
    b13c:	00013b1c 	.word	0x00013b1c
    b140:	00009ba9 	.word	0x00009ba9
    b144:	000137f7 	.word	0x000137f7

0000b148 <ctrl_tx_enqueue>:
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    b148:	0003      	movs	r3, r0
	p->next = node_tx;
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
    b14a:	b510      	push	{r4, lr}
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    b14c:	33c0      	adds	r3, #192	; 0xc0
    b14e:	781a      	ldrb	r2, [r3, #0]
    b150:	30fc      	adds	r0, #252	; 0xfc

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
    b152:	09d3      	lsrs	r3, r2, #7
    b154:	d11c      	bne.n	b190 <ctrl_tx_enqueue+0x48>
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    b156:	6883      	ldr	r3, [r0, #8]
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    b158:	2b00      	cmp	r3, #0
    b15a:	d019      	beq.n	b190 <ctrl_tx_enqueue+0x48>
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    b15c:	0712      	lsls	r2, r2, #28
    b15e:	d502      	bpl.n	b166 <ctrl_tx_enqueue+0x1e>
				    /* data PDU tx is not paused */
				    (conn->pause_tx == 0) ||
    b160:	68c2      	ldr	r2, [r0, #12]
    b162:	4293      	cmp	r3, r2
    b164:	d114      	bne.n	b190 <ctrl_tx_enqueue+0x48>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    b166:	6902      	ldr	r2, [r0, #16]
    b168:	4293      	cmp	r3, r2
    b16a:	d101      	bne.n	b170 <ctrl_tx_enqueue+0x28>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    b16c:	681a      	ldr	r2, [r3, #0]
    b16e:	6102      	str	r2, [r0, #16]
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
    b170:	68c2      	ldr	r2, [r0, #12]
    b172:	2a00      	cmp	r2, #0
    b174:	d103      	bne.n	b17e <ctrl_tx_enqueue+0x36>
			node_tx->next = conn->pkt_tx_head->next;
    b176:	681a      	ldr	r2, [r3, #0]
    b178:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    b17a:	6019      	str	r1, [r3, #0]
    b17c:	e00e      	b.n	b19c <ctrl_tx_enqueue+0x54>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    b17e:	6903      	ldr	r3, [r0, #16]
    b180:	6814      	ldr	r4, [r2, #0]
    b182:	429c      	cmp	r4, r3
    b184:	d001      	beq.n	b18a <ctrl_tx_enqueue+0x42>
    b186:	0022      	movs	r2, r4
    b188:	e7fa      	b.n	b180 <ctrl_tx_enqueue+0x38>
		p = p->next;
	}

	node_tx->next = p->next;
    b18a:	600b      	str	r3, [r1, #0]
	p->next = node_tx;
    b18c:	6011      	str	r1, [r2, #0]
    b18e:	e00f      	b.n	b1b0 <ctrl_tx_enqueue+0x68>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
    b190:	68c3      	ldr	r3, [r0, #12]
    b192:	2b00      	cmp	r3, #0
    b194:	d104      	bne.n	b1a0 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    b196:	6883      	ldr	r3, [r0, #8]
    b198:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    b19a:	6081      	str	r1, [r0, #8]
			conn->pkt_tx_ctrl = node_tx;
    b19c:	60c1      	str	r1, [r0, #12]
    b19e:	e007      	b.n	b1b0 <ctrl_tx_enqueue+0x68>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    b1a0:	6902      	ldr	r2, [r0, #16]
    b1a2:	681c      	ldr	r4, [r3, #0]
    b1a4:	4294      	cmp	r4, r2
    b1a6:	d001      	beq.n	b1ac <ctrl_tx_enqueue+0x64>
    b1a8:	0023      	movs	r3, r4
    b1aa:	e7fa      	b.n	b1a2 <ctrl_tx_enqueue+0x5a>
		p = p->next;
	}

	node_tx->next = p->next;
    b1ac:	600a      	str	r2, [r1, #0]
	p->next = node_tx;
    b1ae:	6019      	str	r1, [r3, #0]
			ctrl_tx_enqueue_tail(conn, node_tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
    b1b0:	680b      	ldr	r3, [r1, #0]
    b1b2:	2b00      	cmp	r3, #0
    b1b4:	d100      	bne.n	b1b8 <ctrl_tx_enqueue+0x70>
		conn->pkt_tx_last = node_tx;
    b1b6:	6141      	str	r1, [r0, #20]
	}
}
    b1b8:	bd10      	pop	{r4, pc}
	...

0000b1bc <start_enc_rsp_send>:
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    b1bc:	b513      	push	{r0, r1, r4, lr}
    b1be:	000b      	movs	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
    b1c0:	2100      	movs	r1, #0
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    b1c2:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
    b1c4:	428b      	cmp	r3, r1
    b1c6:	d115      	bne.n	b1f4 <start_enc_rsp_send+0x38>
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b1c8:	4811      	ldr	r0, [pc, #68]	; (b210 <start_enc_rsp_send+0x54>)
    b1ca:	3059      	adds	r0, #89	; 0x59
    b1cc:	30ff      	adds	r0, #255	; 0xff
    b1ce:	f7fc fb4d 	bl	786c <mem_acquire>
    b1d2:	0001      	movs	r1, r0
		LL_ASSERT(node_tx);

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
    b1d4:	1d03      	adds	r3, r0, #4
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		LL_ASSERT(node_tx);
    b1d6:	2800      	cmp	r0, #0
    b1d8:	d10c      	bne.n	b1f4 <start_enc_rsp_send+0x38>
    b1da:	4b0e      	ldr	r3, [pc, #56]	; (b214 <start_enc_rsp_send+0x58>)
    b1dc:	4a0e      	ldr	r2, [pc, #56]	; (b218 <start_enc_rsp_send+0x5c>)
    b1de:	9301      	str	r3, [sp, #4]
    b1e0:	4b0e      	ldr	r3, [pc, #56]	; (b21c <start_enc_rsp_send+0x60>)
    b1e2:	490f      	ldr	r1, [pc, #60]	; (b220 <start_enc_rsp_send+0x64>)
    b1e4:	9300      	str	r3, [sp, #0]
    b1e6:	480f      	ldr	r0, [pc, #60]	; (b224 <start_enc_rsp_send+0x68>)
    b1e8:	4b0f      	ldr	r3, [pc, #60]	; (b228 <start_enc_rsp_send+0x6c>)
    b1ea:	f7f6 fb53 	bl	1894 <printk>
    b1ee:	b662      	cpsie	i
    b1f0:	2004      	movs	r0, #4
    b1f2:	df02      	svc	2

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	}

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b1f4:	2003      	movs	r0, #3
    b1f6:	781a      	ldrb	r2, [r3, #0]
    b1f8:	4302      	orrs	r2, r0
    b1fa:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    b1fc:	2201      	movs	r2, #1
    b1fe:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
    b200:	3205      	adds	r2, #5
    b202:	70da      	strb	r2, [r3, #3]
		PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;

	if (node_tx) {
    b204:	2900      	cmp	r1, #0
    b206:	d002      	beq.n	b20e <start_enc_rsp_send+0x52>
		ctrl_tx_enqueue(conn, node_tx);
    b208:	0020      	movs	r0, r4
    b20a:	f7ff ff9d 	bl	b148 <ctrl_tx_enqueue>
	}
}
    b20e:	bd13      	pop	{r0, r1, r4, pc}
    b210:	20000f68 	.word	0x20000f68
    b214:	0001241d 	.word	0x0001241d
    b218:	0001246d 	.word	0x0001246d
    b21c:	000124a8 	.word	0x000124a8
    b220:	000123e3 	.word	0x000123e3
    b224:	00013b6c 	.word	0x00013b6c
    b228:	0001487a 	.word	0x0001487a

0000b22c <pause_enc_rsp_send>:

static void pause_enc_rsp_send(struct connection *conn)
{
    b22c:	b513      	push	{r0, r1, r4, lr}
    b22e:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b230:	480f      	ldr	r0, [pc, #60]	; (b270 <pause_enc_rsp_send+0x44>)
    b232:	3059      	adds	r0, #89	; 0x59
    b234:	30ff      	adds	r0, #255	; 0xff
    b236:	f7fc fb19 	bl	786c <mem_acquire>
    b23a:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    b23c:	d10c      	bne.n	b258 <pause_enc_rsp_send+0x2c>
    b23e:	4b0d      	ldr	r3, [pc, #52]	; (b274 <pause_enc_rsp_send+0x48>)
    b240:	4a0d      	ldr	r2, [pc, #52]	; (b278 <pause_enc_rsp_send+0x4c>)
    b242:	9301      	str	r3, [sp, #4]
    b244:	4b0d      	ldr	r3, [pc, #52]	; (b27c <pause_enc_rsp_send+0x50>)
    b246:	490e      	ldr	r1, [pc, #56]	; (b280 <pause_enc_rsp_send+0x54>)
    b248:	9300      	str	r3, [sp, #0]
    b24a:	480e      	ldr	r0, [pc, #56]	; (b284 <pause_enc_rsp_send+0x58>)
    b24c:	4b0e      	ldr	r3, [pc, #56]	; (b288 <pause_enc_rsp_send+0x5c>)
    b24e:	f7f6 fb21 	bl	1894 <printk>
    b252:	b662      	cpsie	i
    b254:	2004      	movs	r0, #4
    b256:	df02      	svc	2

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b258:	2203      	movs	r2, #3
    b25a:	7903      	ldrb	r3, [r0, #4]
    b25c:	4313      	orrs	r3, r2
    b25e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    b260:	2301      	movs	r3, #1
    b262:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
    b264:	330a      	adds	r3, #10
    b266:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;

	ctrl_tx_enqueue(conn, node_tx);
    b268:	0020      	movs	r0, r4
    b26a:	f7ff ff6d 	bl	b148 <ctrl_tx_enqueue>
}
    b26e:	bd13      	pop	{r0, r1, r4, pc}
    b270:	20000f68 	.word	0x20000f68
    b274:	0001241d 	.word	0x0001241d
    b278:	0001246d 	.word	0x0001246d
    b27c:	000124a8 	.word	0x000124a8
    b280:	000123e3 	.word	0x000123e3
    b284:	00013b6c 	.word	0x00013b6c
    b288:	00014ae1 	.word	0x00014ae1

0000b28c <reject_ind_ext_send>:
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    b28c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b28e:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b290:	4811      	ldr	r0, [pc, #68]	; (b2d8 <reject_ind_ext_send+0x4c>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    b292:	000e      	movs	r6, r1
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b294:	3059      	adds	r0, #89	; 0x59
    b296:	30ff      	adds	r0, #255	; 0xff
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    b298:	0015      	movs	r5, r2
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b29a:	f7fc fae7 	bl	786c <mem_acquire>
    b29e:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    b2a0:	d10c      	bne.n	b2bc <reject_ind_ext_send+0x30>
    b2a2:	4b0e      	ldr	r3, [pc, #56]	; (b2dc <reject_ind_ext_send+0x50>)
    b2a4:	4a0e      	ldr	r2, [pc, #56]	; (b2e0 <reject_ind_ext_send+0x54>)
    b2a6:	9301      	str	r3, [sp, #4]
    b2a8:	4b0e      	ldr	r3, [pc, #56]	; (b2e4 <reject_ind_ext_send+0x58>)
    b2aa:	490f      	ldr	r1, [pc, #60]	; (b2e8 <reject_ind_ext_send+0x5c>)
    b2ac:	9300      	str	r3, [sp, #0]
    b2ae:	480f      	ldr	r0, [pc, #60]	; (b2ec <reject_ind_ext_send+0x60>)
    b2b0:	4b0f      	ldr	r3, [pc, #60]	; (b2f0 <reject_ind_ext_send+0x64>)
    b2b2:	f7f6 faef 	bl	1894 <printk>
    b2b6:	b662      	cpsie	i
    b2b8:	2004      	movs	r0, #4
    b2ba:	df02      	svc	2

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b2bc:	2203      	movs	r2, #3
    b2be:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
    b2c0:	7206      	strb	r6, [r0, #8]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b2c2:	4313      	orrs	r3, r2
    b2c4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    b2c6:	2311      	movs	r3, #17
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
    b2c8:	7245      	strb	r5, [r0, #9]
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    b2ca:	7142      	strb	r2, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    b2cc:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
		error_code;

	ctrl_tx_enqueue(conn, node_tx);
    b2ce:	0020      	movs	r0, r4
    b2d0:	f7ff ff3a 	bl	b148 <ctrl_tx_enqueue>
}
    b2d4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    b2d6:	46c0      	nop			; (mov r8, r8)
    b2d8:	20000f68 	.word	0x20000f68
    b2dc:	0001241d 	.word	0x0001241d
    b2e0:	0001246d 	.word	0x0001246d
    b2e4:	000124a8 	.word	0x000124a8
    b2e8:	000123e3 	.word	0x000123e3
    b2ec:	00013b6c 	.word	0x00013b6c
    b2f0:	000148f9 	.word	0x000148f9

0000b2f4 <event_connection_prepare>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    b2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16_t event_counter;
	u32_t err;

	LL_ASSERT(!_radio.ticker_id_prepare);
    b2f6:	4dbb      	ldr	r5, [pc, #748]	; (b5e4 <event_connection_prepare+0x2f0>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    b2f8:	b093      	sub	sp, #76	; 0x4c
    b2fa:	900d      	str	r0, [sp, #52]	; 0x34
    b2fc:	9111      	str	r1, [sp, #68]	; 0x44
    b2fe:	001f      	movs	r7, r3
	u16_t event_counter;
	u32_t err;

	LL_ASSERT(!_radio.ticker_id_prepare);
    b300:	7b2b      	ldrb	r3, [r5, #12]
    b302:	2b00      	cmp	r3, #0
    b304:	d008      	beq.n	b318 <event_connection_prepare+0x24>
    b306:	4bb8      	ldr	r3, [pc, #736]	; (b5e8 <event_connection_prepare+0x2f4>)
    b308:	4ab8      	ldr	r2, [pc, #736]	; (b5ec <event_connection_prepare+0x2f8>)
    b30a:	9301      	str	r3, [sp, #4]
    b30c:	4bb8      	ldr	r3, [pc, #736]	; (b5f0 <event_connection_prepare+0x2fc>)
    b30e:	49b9      	ldr	r1, [pc, #740]	; (b5f4 <event_connection_prepare+0x300>)
    b310:	9300      	str	r3, [sp, #0]
    b312:	48b9      	ldr	r0, [pc, #740]	; (b5f8 <event_connection_prepare+0x304>)
    b314:	4bb9      	ldr	r3, [pc, #740]	; (b5fc <event_connection_prepare+0x308>)
    b316:	e212      	b.n	b73e <event_connection_prepare+0x44a>

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    b318:	003b      	movs	r3, r7
    b31a:	3344      	adds	r3, #68	; 0x44
    b31c:	781b      	ldrb	r3, [r3, #0]
    b31e:	07db      	lsls	r3, r3, #31
    b320:	d509      	bpl.n	b336 <event_connection_prepare+0x42>
		conn->role.slave.window_widening_prepare_us +=
    b322:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    b324:	1c53      	adds	r3, r2, #1
    b326:	434b      	muls	r3, r1
    b328:	6d39      	ldr	r1, [r7, #80]	; 0x50
    b32a:	185b      	adds	r3, r3, r1
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
		    conn->role.slave.window_widening_max_us) {
    b32c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c

	LL_ASSERT(!_radio.ticker_id_prepare);

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
		conn->role.slave.window_widening_prepare_us +=
    b32e:	653b      	str	r3, [r7, #80]	; 0x50
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
    b330:	428b      	cmp	r3, r1
    b332:	d900      	bls.n	b336 <event_connection_prepare+0x42>
		    conn->role.slave.window_widening_max_us) {
			conn->role.slave.window_widening_prepare_us =
    b334:	6539      	str	r1, [r7, #80]	; 0x50
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    b336:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    b338:	18d2      	adds	r2, r2, r3

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    b33a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    b33c:	b292      	uxth	r2, r2
    b33e:	853a      	strh	r2, [r7, #40]	; 0x28

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    b340:	18d2      	adds	r2, r2, r3
    b342:	b293      	uxth	r3, r2
    b344:	930a      	str	r3, [sp, #40]	; 0x28

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    b346:	003b      	movs	r3, r7
    b348:	3369      	adds	r3, #105	; 0x69
    b34a:	781a      	ldrb	r2, [r3, #0]
    b34c:	3b01      	subs	r3, #1
    b34e:	781b      	ldrb	r3, [r3, #0]
    b350:	429a      	cmp	r2, r3
    b352:	d000      	beq.n	b356 <event_connection_prepare+0x62>
    b354:	e0bd      	b.n	b4d2 <event_connection_prepare+0x1de>
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
    b356:	003e      	movs	r6, r7

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    b358:	003b      	movs	r3, r7
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
    b35a:	36bd      	adds	r6, #189	; 0xbd

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    b35c:	33bc      	adds	r3, #188	; 0xbc
    b35e:	7832      	ldrb	r2, [r6, #0]
    b360:	781b      	ldrb	r3, [r3, #0]
    b362:	429a      	cmp	r2, r3
    b364:	d101      	bne.n	b36a <event_connection_prepare+0x76>
    b366:	f000 fe7c 	bl	c062 <event_connection_prepare+0xd6e>
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    b36a:	2200      	movs	r2, #0
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    b36c:	003c      	movs	r4, r7
	if ((conn->llcp_ack == conn->llcp_req) &&
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    b36e:	0010      	movs	r0, r2
    b370:	2305      	movs	r3, #5
    b372:	0011      	movs	r1, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    b374:	34be      	adds	r4, #190	; 0xbe
	if ((conn->llcp_ack == conn->llcp_req) &&
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    b376:	f7fe fc25 	bl	9bc4 <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    b37a:	7820      	ldrb	r0, [r4, #0]
    b37c:	0780      	lsls	r0, r0, #30
    b37e:	0f80      	lsrs	r0, r0, #30
    b380:	f7f4 fefa 	bl	178 <__gnu_thumb1_case_uqi>
    b384:	409e9e02 	.word	0x409e9e02
	{
		struct pdu_data_llctrl_phy_req_rsp *pr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b388:	0028      	movs	r0, r5
    b38a:	3059      	adds	r0, #89	; 0x59
    b38c:	30ff      	adds	r0, #255	; 0xff
    b38e:	f7fc fa6d 	bl	786c <mem_acquire>
    b392:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    b394:	d100      	bne.n	b398 <event_connection_prepare+0xa4>
    b396:	e093      	b.n	b4c0 <event_connection_prepare+0x1cc>
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    b398:	2603      	movs	r6, #3
    b39a:	2201      	movs	r2, #1
    b39c:	7823      	ldrb	r3, [r4, #0]

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    b39e:	2507      	movs	r5, #7
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		if (!node_tx) {
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    b3a0:	43b3      	bics	r3, r6
    b3a2:	4313      	orrs	r3, r2

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    b3a4:	003a      	movs	r2, r7
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		if (!node_tx) {
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    b3a6:	7023      	strb	r3, [r4, #0]

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    b3a8:	3232      	adds	r2, #50	; 0x32
    b3aa:	7810      	ldrb	r0, [r2, #0]
    b3ac:	089b      	lsrs	r3, r3, #2
    b3ae:	43a8      	bics	r0, r5
    b3b0:	402b      	ands	r3, r5
    b3b2:	4303      	orrs	r3, r0
    b3b4:	7013      	strb	r3, [r2, #0]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    b3b6:	7823      	ldrb	r3, [r4, #0]
    b3b8:	7850      	ldrb	r0, [r2, #1]
    b3ba:	095b      	lsrs	r3, r3, #5
    b3bc:	43a8      	bics	r0, r5
    b3be:	402b      	ands	r3, r5
    b3c0:	4303      	orrs	r3, r0
    b3c2:	7053      	strb	r3, [r2, #1]
		conn->phy_pref_flags = conn->llcp_phy.flags;
    b3c4:	003b      	movs	r3, r7
    b3c6:	2001      	movs	r0, #1
    b3c8:	2540      	movs	r5, #64	; 0x40
    b3ca:	33bf      	adds	r3, #191	; 0xbf
    b3cc:	781b      	ldrb	r3, [r3, #0]
    b3ce:	07db      	lsls	r3, r3, #31
    b3d0:	0fdb      	lsrs	r3, r3, #31
    b3d2:	4018      	ands	r0, r3
    b3d4:	7813      	ldrb	r3, [r2, #0]
    b3d6:	0180      	lsls	r0, r0, #6
    b3d8:	43ab      	bics	r3, r5
    b3da:	4318      	orrs	r0, r3
    b3dc:	7010      	strb	r0, [r2, #0]

		/* place the phy req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b3de:	790b      	ldrb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    b3e0:	714e      	strb	r6, [r1, #5]
		conn->phy_pref_rx = conn->llcp_phy.rx;
		conn->phy_pref_flags = conn->llcp_phy.flags;

		/* place the phy req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b3e2:	4333      	orrs	r3, r6
    b3e4:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
				   sizeof(struct pdu_data_llctrl_phy_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    b3e6:	2316      	movs	r3, #22
    b3e8:	71cb      	strb	r3, [r1, #7]
			PDU_DATA_LLCTRL_TYPE_PHY_REQ;

		pr = (struct pdu_data_llctrl_phy_req_rsp *)
		     &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
    b3ea:	7823      	ldrb	r3, [r4, #0]
		pr->rx_phys = conn->llcp_phy.rx;

		ctrl_tx_enqueue(conn, node_tx);
    b3ec:	0038      	movs	r0, r7
		pdu_ctrl_tx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_PHY_REQ;

		pr = (struct pdu_data_llctrl_phy_req_rsp *)
		     &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
    b3ee:	06db      	lsls	r3, r3, #27
    b3f0:	0f5b      	lsrs	r3, r3, #29
    b3f2:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    b3f4:	7823      	ldrb	r3, [r4, #0]
    b3f6:	095b      	lsrs	r3, r3, #5
    b3f8:	724b      	strb	r3, [r1, #9]

		ctrl_tx_enqueue(conn, node_tx);
    b3fa:	f7ff fea5 	bl	b148 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    b3fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    b400:	877b      	strh	r3, [r7, #58]	; 0x3a
    b402:	e05d      	b.n	b4c0 <event_connection_prepare+0x1cc>
	break;

	case LLCP_PHY_STATE_UPD:
	{
		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
    b404:	003b      	movs	r3, r7
    b406:	33bc      	adds	r3, #188	; 0xbc
    b408:	781b      	ldrb	r3, [r3, #0]
    b40a:	7033      	strb	r3, [r6, #0]

		/* select only one tx phy, prefer 2M */
		if (conn->llcp_phy.tx & BIT(1)) {
    b40c:	003b      	movs	r3, r7
    b40e:	33be      	adds	r3, #190	; 0xbe
    b410:	781a      	ldrb	r2, [r3, #0]
    b412:	06d1      	lsls	r1, r2, #27
    b414:	0f49      	lsrs	r1, r1, #29
    b416:	0788      	lsls	r0, r1, #30
    b418:	d503      	bpl.n	b422 <event_connection_prepare+0x12e>
			conn->llcp_phy.tx = BIT(1);
    b41a:	211c      	movs	r1, #28
    b41c:	438a      	bics	r2, r1
    b41e:	3914      	subs	r1, #20
    b420:	e00b      	b.n	b43a <event_connection_prepare+0x146>
    b422:	2004      	movs	r0, #4
		} else if (conn->llcp_phy.tx & BIT(0)) {
    b424:	07cc      	lsls	r4, r1, #31
    b426:	d503      	bpl.n	b430 <event_connection_prepare+0x13c>
			conn->llcp_phy.tx = BIT(0);
    b428:	211c      	movs	r1, #28
    b42a:	438a      	bics	r2, r1
    b42c:	4302      	orrs	r2, r0
    b42e:	e005      	b.n	b43c <event_connection_prepare+0x148>
    b430:	241c      	movs	r4, #28
		} else if (conn->llcp_phy.tx & BIT(2)) {
			conn->llcp_phy.tx = BIT(2);
    b432:	43a2      	bics	r2, r4
		/* select only one tx phy, prefer 2M */
		if (conn->llcp_phy.tx & BIT(1)) {
			conn->llcp_phy.tx = BIT(1);
		} else if (conn->llcp_phy.tx & BIT(0)) {
			conn->llcp_phy.tx = BIT(0);
		} else if (conn->llcp_phy.tx & BIT(2)) {
    b434:	4201      	tst	r1, r0
    b436:	d001      	beq.n	b43c <event_connection_prepare+0x148>
			conn->llcp_phy.tx = BIT(2);
    b438:	2110      	movs	r1, #16
    b43a:	430a      	orrs	r2, r1
		} else {
			conn->llcp_phy.tx = 0;
    b43c:	701a      	strb	r2, [r3, #0]
		}

		/* select only one rx phy, prefer 2M */
		if (conn->llcp_phy.rx & BIT(1)) {
    b43e:	7818      	ldrb	r0, [r3, #0]
    b440:	0941      	lsrs	r1, r0, #5
    b442:	078a      	lsls	r2, r1, #30
    b444:	d504      	bpl.n	b450 <event_connection_prepare+0x15c>
			conn->llcp_phy.rx = BIT(1);
    b446:	211f      	movs	r1, #31
    b448:	0002      	movs	r2, r0
    b44a:	400a      	ands	r2, r1
    b44c:	3121      	adds	r1, #33	; 0x21
    b44e:	e00d      	b.n	b46c <event_connection_prepare+0x178>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    b450:	07ca      	lsls	r2, r1, #31
    b452:	d504      	bpl.n	b45e <event_connection_prepare+0x16a>
			conn->llcp_phy.rx = BIT(0);
    b454:	211f      	movs	r1, #31
    b456:	0002      	movs	r2, r0
    b458:	400a      	ands	r2, r1
    b45a:	3101      	adds	r1, #1
    b45c:	e006      	b.n	b46c <event_connection_prepare+0x178>
    b45e:	221f      	movs	r2, #31
		} else if (conn->llcp_phy.rx & BIT(2)) {
    b460:	2404      	movs	r4, #4
			conn->llcp_phy.rx = BIT(2);
    b462:	4002      	ands	r2, r0
		/* select only one rx phy, prefer 2M */
		if (conn->llcp_phy.rx & BIT(1)) {
			conn->llcp_phy.rx = BIT(1);
		} else if (conn->llcp_phy.rx & BIT(0)) {
			conn->llcp_phy.rx = BIT(0);
		} else if (conn->llcp_phy.rx & BIT(2)) {
    b464:	4221      	tst	r1, r4
    b466:	d002      	beq.n	b46e <event_connection_prepare+0x17a>
			conn->llcp_phy.rx = BIT(2);
    b468:	2180      	movs	r1, #128	; 0x80
    b46a:	4249      	negs	r1, r1
    b46c:	430a      	orrs	r2, r1
		} else {
			conn->llcp_phy.rx = 0;
		}

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    b46e:	0039      	movs	r1, r7
    b470:	2407      	movs	r4, #7
    b472:	251c      	movs	r5, #28
		} else if (conn->llcp_phy.rx & BIT(0)) {
			conn->llcp_phy.rx = BIT(0);
		} else if (conn->llcp_phy.rx & BIT(2)) {
			conn->llcp_phy.rx = BIT(2);
		} else {
			conn->llcp_phy.rx = 0;
    b474:	701a      	strb	r2, [r3, #0]
		}

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    b476:	781a      	ldrb	r2, [r3, #0]
    b478:	316c      	adds	r1, #108	; 0x6c
    b47a:	7808      	ldrb	r0, [r1, #0]
    b47c:	0892      	lsrs	r2, r2, #2
    b47e:	4022      	ands	r2, r4
    b480:	43a8      	bics	r0, r5
    b482:	0092      	lsls	r2, r2, #2
    b484:	4302      	orrs	r2, r0
    b486:	700a      	strb	r2, [r1, #0]
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    b488:	781b      	ldrb	r3, [r3, #0]
    b48a:	7808      	ldrb	r0, [r1, #0]
    b48c:	095b      	lsrs	r3, r3, #5
    b48e:	015a      	lsls	r2, r3, #5
    b490:	231f      	movs	r3, #31
    b492:	4003      	ands	r3, r0
    b494:	4313      	orrs	r3, r2
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    b496:	003a      	movs	r2, r7

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
    b498:	b2d8      	uxtb	r0, r3
    b49a:	2301      	movs	r3, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    b49c:	32bf      	adds	r2, #191	; 0xbf
    b49e:	7812      	ldrb	r2, [r2, #0]
    b4a0:	40da      	lsrs	r2, r3
    b4a2:	401a      	ands	r2, r3
    b4a4:	409a      	lsls	r2, r3
    b4a6:	4303      	orrs	r3, r0
    b4a8:	2002      	movs	r0, #2
    b4aa:	4383      	bics	r3, r0
    b4ac:	4313      	orrs	r3, r2
    b4ae:	700b      	strb	r3, [r1, #0]

		conn->llcp_type = LLCP_PHY_UPD;
    b4b0:	003b      	movs	r3, r7
		conn->llcp_ack--;
    b4b2:	003a      	movs	r2, r7
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;

		conn->llcp_type = LLCP_PHY_UPD;
    b4b4:	336a      	adds	r3, #106	; 0x6a
    b4b6:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack--;
    b4b8:	3269      	adds	r2, #105	; 0x69
    b4ba:	7813      	ldrb	r3, [r2, #0]
    b4bc:	3b01      	subs	r3, #1
    b4be:	7013      	strb	r3, [r2, #0]
		event_phy_req_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* check if procedure is requested */
	if (conn->llcp_ack != conn->llcp_req) {
    b4c0:	003b      	movs	r3, r7
    b4c2:	3369      	adds	r3, #105	; 0x69
    b4c4:	781a      	ldrb	r2, [r3, #0]
    b4c6:	3b01      	subs	r3, #1
    b4c8:	781b      	ldrb	r3, [r3, #0]
    b4ca:	429a      	cmp	r2, r3
    b4cc:	d101      	bne.n	b4d2 <event_connection_prepare+0x1de>
    b4ce:	f000 fdc8 	bl	c062 <event_connection_prepare+0xd6e>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    b4d2:	2200      	movs	r2, #0
    b4d4:	2305      	movs	r3, #5
    b4d6:	0010      	movs	r0, r2
    b4d8:	0011      	movs	r1, r2
    b4da:	f7fe fb73 	bl	9bc4 <event_stop>

		switch (conn->llcp_type) {
    b4de:	003b      	movs	r3, r7
    b4e0:	336a      	adds	r3, #106	; 0x6a
    b4e2:	7818      	ldrb	r0, [r3, #0]
    b4e4:	3801      	subs	r0, #1
    b4e6:	2806      	cmp	r0, #6
    b4e8:	d901      	bls.n	b4ee <event_connection_prepare+0x1fa>
    b4ea:	f000 fdb3 	bl	c054 <event_connection_prepare+0xd60>
    b4ee:	f7f4 fe57 	bl	1a0 <__gnu_thumb1_case_uhi>
    b4f2:	0007      	.short	0x0007
    b4f4:	03520309 	.word	0x03520309
    b4f8:	049e0470 	.word	0x049e0470
    b4fc:	051404fa 	.word	0x051404fa
					   u32_t ticks_at_expire)
{
	struct connection *conn_upd;
	u16_t instant_latency;

	conn_upd = _radio.conn_upd;
    b500:	23c2      	movs	r3, #194	; 0xc2
    b502:	4838      	ldr	r0, [pc, #224]	; (b5e4 <event_connection_prepare+0x2f0>)
    b504:	005b      	lsls	r3, r3, #1
    b506:	58c2      	ldr	r2, [r0, r3]

	/* set mutex */
	if (!conn_upd) {
    b508:	2a00      	cmp	r2, #0
    b50a:	d100      	bne.n	b50e <event_connection_prepare+0x21a>
		_radio.conn_upd = conn;
    b50c:	50c7      	str	r7, [r0, r3]
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
		 0xffff);
	if (conn->llcp.connection_update.state) {
    b50e:	003d      	movs	r5, r7
    b510:	2307      	movs	r3, #7
    b512:	3595      	adds	r5, #149	; 0x95
    b514:	7829      	ldrb	r1, [r5, #0]
    b516:	400b      	ands	r3, r1
    b518:	d100      	bne.n	b51c <event_connection_prepare+0x228>
    b51a:	e115      	b.n	b748 <event_connection_prepare+0x454>
		if (((conn_upd == 0) || (conn_upd == conn)) &&
    b51c:	2a00      	cmp	r2, #0
    b51e:	d003      	beq.n	b528 <event_connection_prepare+0x234>
    b520:	4297      	cmp	r7, r2
    b522:	d001      	beq.n	b528 <event_connection_prepare+0x234>
    b524:	f000 fd9d 	bl	c062 <event_connection_prepare+0xd6e>
    b528:	3b04      	subs	r3, #4
    b52a:	2b01      	cmp	r3, #1
    b52c:	d801      	bhi.n	b532 <event_connection_prepare+0x23e>
    b52e:	f000 fd98 	bl	c062 <event_connection_prepare+0xd6e>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			struct radio_pdu_node_tx *node_tx;
			struct pdu_data *pdu_ctrl_tx;
			u8_t state;

			node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b532:	3059      	adds	r0, #89	; 0x59
    b534:	30ff      	adds	r0, #255	; 0xff
    b536:	f7fc f999 	bl	786c <mem_acquire>
    b53a:	1e04      	subs	r4, r0, #0
			if (!node_tx) {
    b53c:	d101      	bne.n	b542 <event_connection_prepare+0x24e>
    b53e:	f000 fd90 	bl	c062 <event_connection_prepare+0xd6e>
			pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			state = conn->llcp.connection_update.state;
    b542:	782b      	ldrb	r3, [r5, #0]
    b544:	075b      	lsls	r3, r3, #29
    b546:	0f5b      	lsrs	r3, r3, #29
			if ((state == LLCP_CONN_STATE_RSP) &&
    b548:	2b03      	cmp	r3, #3
    b54a:	d105      	bne.n	b558 <event_connection_prepare+0x264>
			    (conn->role.master.role == 0)) {
    b54c:	003b      	movs	r3, r7
    b54e:	3344      	adds	r3, #68	; 0x44

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			state = conn->llcp.connection_update.state;
			if ((state == LLCP_CONN_STATE_RSP) &&
    b550:	781b      	ldrb	r3, [r3, #0]
    b552:	07db      	lsls	r3, r3, #31
    b554:	d508      	bpl.n	b568 <event_connection_prepare+0x274>
    b556:	e094      	b.n	b682 <event_connection_prepare+0x38e>
				fp_mayfly_select_or_use =
					mayfly_sched_win_offset_select;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			}

			switch (state) {
    b558:	2b02      	cmp	r3, #2
    b55a:	d053      	beq.n	b604 <event_connection_prepare+0x310>
    b55c:	2b03      	cmp	r3, #3
    b55e:	d100      	bne.n	b562 <event_connection_prepare+0x26e>
    b560:	e08f      	b.n	b682 <event_connection_prepare+0x38e>
    b562:	2b01      	cmp	r3, #1
    b564:	d000      	beq.n	b568 <event_connection_prepare+0x274>
    b566:	e0e2      	b.n	b72e <event_connection_prepare+0x43a>
			case LLCP_CONN_STATE_INITIATE:
				if (conn->role.master.role == 0) {
    b568:	003b      	movs	r3, r7
    b56a:	3344      	adds	r3, #68	; 0x44
    b56c:	781a      	ldrb	r2, [r3, #0]
    b56e:	2301      	movs	r3, #1
    b570:	401a      	ands	r2, r3
    b572:	d147      	bne.n	b604 <event_connection_prepare+0x310>
			  u32_t ticks_at_expire,
			  struct mayfly *mayfly_sched_offset,
			  void (*fp_mayfly_select_or_use)(void *))
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    b574:	2107      	movs	r1, #7
    b576:	782b      	ldrb	r3, [r5, #0]
    b578:	438b      	bics	r3, r1
    b57a:	702b      	strb	r3, [r5, #0]

	/* set instant */
	conn->llcp.connection_update.instant =
    b57c:	003d      	movs	r5, r7
    b57e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    b580:	990a      	ldr	r1, [sp, #40]	; 0x28
    b582:	3306      	adds	r3, #6
    b584:	18cb      	adds	r3, r1, r3
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b586:	2103      	movs	r1, #3
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;

	/* set instant */
	conn->llcp.connection_update.instant =
    b588:	3574      	adds	r5, #116	; 0x74
    b58a:	802b      	strh	r3, [r5, #0]
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b58c:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    b58e:	71e2      	strb	r2, [r4, #7]
	/* set instant */
	conn->llcp.connection_update.instant =
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b590:	430b      	orrs	r3, r1
    b592:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    b594:	230c      	movs	r3, #12
    b596:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
    b598:	003b      	movs	r3, r7
    b59a:	3394      	adds	r3, #148	; 0x94
    b59c:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    b59e:	4918      	ldr	r1, [pc, #96]	; (b600 <event_connection_prepare+0x30c>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
    b5a0:	7223      	strb	r3, [r4, #8]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    b5a2:	003b      	movs	r3, r7
    b5a4:	338c      	adds	r3, #140	; 0x8c
    b5a6:	6818      	ldr	r0, [r3, #0]
    b5a8:	f7f4 fe04 	bl	1b4 <__aeabi_uidiv>
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
    b5ac:	003b      	movs	r3, r7
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    b5ae:	b280      	uxth	r0, r0
    b5b0:	7260      	strb	r0, [r4, #9]
    b5b2:	0a00      	lsrs	r0, r0, #8
    b5b4:	72a0      	strb	r0, [r4, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
    b5b6:	336c      	adds	r3, #108	; 0x6c
    b5b8:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
    b5ba:	72e3      	strb	r3, [r4, #11]
    b5bc:	0a1b      	lsrs	r3, r3, #8
    b5be:	7323      	strb	r3, [r4, #12]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
    b5c0:	003b      	movs	r3, r7
    b5c2:	336e      	adds	r3, #110	; 0x6e
    b5c4:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
    b5c6:	7363      	strb	r3, [r4, #13]
    b5c8:	0a1b      	lsrs	r3, r3, #8
    b5ca:	73a3      	strb	r3, [r4, #14]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
		conn->llcp.connection_update.timeout;
    b5cc:	003b      	movs	r3, r7
    b5ce:	3370      	adds	r3, #112	; 0x70
    b5d0:	881b      	ldrh	r3, [r3, #0]
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
    b5d2:	73e3      	strb	r3, [r4, #15]
    b5d4:	0a1b      	lsrs	r3, r3, #8
    b5d6:	7423      	strb	r3, [r4, #16]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
		conn->llcp.connection_update.instant;
    b5d8:	882b      	ldrh	r3, [r5, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
    b5da:	7463      	strb	r3, [r4, #17]
    b5dc:	0a1b      	lsrs	r3, r3, #8
    b5de:	74a3      	strb	r3, [r4, #18]
    b5e0:	e2b6      	b.n	bb50 <event_connection_prepare+0x85c>
    b5e2:	46c0      	nop			; (mov r8, r8)
    b5e4:	20000f68 	.word	0x20000f68
    b5e8:	0001241d 	.word	0x0001241d
    b5ec:	0001246d 	.word	0x0001246d
    b5f0:	000124a8 	.word	0x000124a8
    b5f4:	000123e3 	.word	0x000123e3
    b5f8:	00013a29 	.word	0x00013a29
    b5fc:	00014b9e 	.word	0x00014b9e
    b600:	000004e2 	.word	0x000004e2
					    struct pdu_data *pdu_ctrl_tx,
					    u32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    b604:	2207      	movs	r2, #7
    b606:	782b      	ldrb	r3, [r5, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    b608:	0039      	movs	r1, r7
					    struct pdu_data *pdu_ctrl_tx,
					    u32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    b60a:	4393      	bics	r3, r2
    b60c:	3a02      	subs	r2, #2
    b60e:	4313      	orrs	r3, r2
    b610:	702b      	strb	r3, [r5, #0]

	/* place the conn param req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b612:	7923      	ldrb	r3, [r4, #4]
    b614:	3a02      	subs	r2, #2
    b616:	4313      	orrs	r3, r2
    b618:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    b61a:	2318      	movs	r3, #24
    b61c:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
    b61e:	3b09      	subs	r3, #9
    b620:	71e3      	strb	r3, [r4, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    b622:	316c      	adds	r1, #108	; 0x6c
    b624:	880b      	ldrh	r3, [r1, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    b626:	2200      	movs	r2, #0
    b628:	7223      	strb	r3, [r4, #8]
    b62a:	0a1b      	lsrs	r3, r3, #8
    b62c:	7263      	strb	r3, [r4, #9]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
    b62e:	880b      	ldrh	r3, [r1, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    b630:	2128      	movs	r1, #40	; 0x28
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    b632:	72a3      	strb	r3, [r4, #10]
    b634:	0a1b      	lsrs	r3, r3, #8
    b636:	72e3      	strb	r3, [r4, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
    b638:	003b      	movs	r3, r7
    b63a:	336e      	adds	r3, #110	; 0x6e
    b63c:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    b63e:	7323      	strb	r3, [r4, #12]
    b640:	0a1b      	lsrs	r3, r3, #8
    b642:	7363      	strb	r3, [r4, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
    b644:	003b      	movs	r3, r7
    b646:	3370      	adds	r3, #112	; 0x70
    b648:	881b      	ldrh	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
    b64a:	7422      	strb	r2, [r4, #16]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    b64c:	73a3      	strb	r3, [r4, #14]
    b64e:	0a1b      	lsrs	r3, r3, #8
    b650:	73e3      	strb	r3, [r4, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    b652:	466b      	mov	r3, sp
    b654:	185b      	adds	r3, r3, r1
    b656:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    b658:	74e2      	strb	r2, [r4, #19]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    b65a:	7463      	strb	r3, [r4, #17]
    b65c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    b65e:	7522      	strb	r2, [r4, #20]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    b660:	0a1b      	lsrs	r3, r3, #8
    b662:	74a3      	strb	r3, [r4, #18]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 = 0xffff;
    b664:	2301      	movs	r3, #1
    b666:	425b      	negs	r3, r3
    b668:	7563      	strb	r3, [r4, #21]
    b66a:	75a3      	strb	r3, [r4, #22]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 = 0xffff;
    b66c:	75e3      	strb	r3, [r4, #23]
    b66e:	7623      	strb	r3, [r4, #24]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 = 0xffff;
    b670:	7663      	strb	r3, [r4, #25]
    b672:	76a3      	strb	r3, [r4, #26]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 = 0xffff;
    b674:	76e3      	strb	r3, [r4, #27]
    b676:	7723      	strb	r3, [r4, #28]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 = 0xffff;
    b678:	7763      	strb	r3, [r4, #29]
    b67a:	77a3      	strb	r3, [r4, #30]

	/* Start Procedure Timeout */
	conn->procedure_expire = conn->procedure_reload;
    b67c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    b67e:	877b      	strh	r3, [r7, #58]	; 0x3a
    b680:	e266      	b.n	bb50 <event_connection_prepare+0x85c>

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    b682:	003b      	movs	r3, r7
    b684:	3368      	adds	r3, #104	; 0x68
    b686:	781a      	ldrb	r2, [r3, #0]

	/* reset mutex */
	_radio.conn_upd = NULL;
    b688:	2100      	movs	r1, #0

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    b68a:	705a      	strb	r2, [r3, #1]

	/* reset mutex */
	_radio.conn_upd = NULL;
    b68c:	23c2      	movs	r3, #194	; 0xc2
    b68e:	4aba      	ldr	r2, [pc, #744]	; (b978 <event_connection_prepare+0x684>)
    b690:	005b      	lsls	r3, r3, #1
    b692:	50d1      	str	r1, [r2, r3]

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b694:	2203      	movs	r2, #3
    b696:	7923      	ldrb	r3, [r4, #4]
    b698:	4313      	orrs	r3, r2
    b69a:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    b69c:	2318      	movs	r3, #24
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    b69e:	003a      	movs	r2, r7

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    b6a0:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    b6a2:	3b08      	subs	r3, #8
    b6a4:	71e3      	strb	r3, [r4, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    b6a6:	326c      	adds	r2, #108	; 0x6c
    b6a8:	8813      	ldrh	r3, [r2, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    b6aa:	7223      	strb	r3, [r4, #8]
    b6ac:	0a1b      	lsrs	r3, r3, #8
    b6ae:	7263      	strb	r3, [r4, #9]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
    b6b0:	8813      	ldrh	r3, [r2, #0]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    b6b2:	72a3      	strb	r3, [r4, #10]
    b6b4:	0a1b      	lsrs	r3, r3, #8
    b6b6:	72e3      	strb	r3, [r4, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
    b6b8:	003b      	movs	r3, r7
    b6ba:	336e      	adds	r3, #110	; 0x6e
    b6bc:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    b6be:	7323      	strb	r3, [r4, #12]
    b6c0:	0a1b      	lsrs	r3, r3, #8
    b6c2:	7363      	strb	r3, [r4, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
    b6c4:	003b      	movs	r3, r7
    b6c6:	3370      	adds	r3, #112	; 0x70
    b6c8:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    b6ca:	73a3      	strb	r3, [r4, #14]
    b6cc:	0a1b      	lsrs	r3, r3, #8
    b6ce:	73e3      	strb	r3, [r4, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
    b6d0:	003b      	movs	r3, r7
    b6d2:	3372      	adds	r3, #114	; 0x72
    b6d4:	781b      	ldrb	r3, [r3, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
    b6d6:	7423      	strb	r3, [r4, #16]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
    b6d8:	003b      	movs	r3, r7
    b6da:	3374      	adds	r3, #116	; 0x74
    b6dc:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
    b6de:	7463      	strb	r3, [r4, #17]
    b6e0:	0a1b      	lsrs	r3, r3, #8
    b6e2:	74a3      	strb	r3, [r4, #18]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
    b6e4:	003b      	movs	r3, r7
    b6e6:	3376      	adds	r3, #118	; 0x76
    b6e8:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
    b6ea:	74e3      	strb	r3, [r4, #19]
    b6ec:	0a1b      	lsrs	r3, r3, #8
    b6ee:	7523      	strb	r3, [r4, #20]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
    b6f0:	003b      	movs	r3, r7
    b6f2:	3378      	adds	r3, #120	; 0x78
    b6f4:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
    b6f6:	7563      	strb	r3, [r4, #21]
    b6f8:	0a1b      	lsrs	r3, r3, #8
    b6fa:	75a3      	strb	r3, [r4, #22]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
    b6fc:	003b      	movs	r3, r7
    b6fe:	337a      	adds	r3, #122	; 0x7a
    b700:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
    b702:	75e3      	strb	r3, [r4, #23]
    b704:	0a1b      	lsrs	r3, r3, #8
    b706:	7623      	strb	r3, [r4, #24]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
    b708:	003b      	movs	r3, r7
    b70a:	337c      	adds	r3, #124	; 0x7c
    b70c:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
    b70e:	7663      	strb	r3, [r4, #25]
    b710:	0a1b      	lsrs	r3, r3, #8
    b712:	76a3      	strb	r3, [r4, #26]
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
		conn->llcp.connection_update.offset4;
    b714:	003b      	movs	r3, r7
    b716:	337e      	adds	r3, #126	; 0x7e
    b718:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
    b71a:	76e3      	strb	r3, [r4, #27]
    b71c:	0a1b      	lsrs	r3, r3, #8
    b71e:	7723      	strb	r3, [r4, #28]
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
		conn->llcp.connection_update.offset5;
    b720:	003b      	movs	r3, r7
    b722:	3380      	adds	r3, #128	; 0x80
    b724:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
    b726:	7763      	strb	r3, [r4, #29]
    b728:	0a1b      	lsrs	r3, r3, #8
    b72a:	77a3      	strb	r3, [r4, #30]
    b72c:	e210      	b.n	bb50 <event_connection_prepare+0x85c>
			case LLCP_CONN_STATE_RSP:
				event_conn_update_st_rsp(conn, pdu_ctrl_tx);
				break;

			default:
				LL_ASSERT(0);
    b72e:	4b93      	ldr	r3, [pc, #588]	; (b97c <event_connection_prepare+0x688>)
    b730:	9301      	str	r3, [sp, #4]
    b732:	4b93      	ldr	r3, [pc, #588]	; (b980 <event_connection_prepare+0x68c>)
    b734:	9300      	str	r3, [sp, #0]
    b736:	4b93      	ldr	r3, [pc, #588]	; (b984 <event_connection_prepare+0x690>)
    b738:	4a93      	ldr	r2, [pc, #588]	; (b988 <event_connection_prepare+0x694>)
    b73a:	4994      	ldr	r1, [pc, #592]	; (b98c <event_connection_prepare+0x698>)
    b73c:	4894      	ldr	r0, [pc, #592]	; (b990 <event_connection_prepare+0x69c>)
    b73e:	f7f6 f8a9 	bl	1894 <printk>
    b742:	b662      	cpsie	i
    b744:	2004      	movs	r0, #4
    b746:	df02      	svc	2
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
    b748:	003a      	movs	r2, r7
    b74a:	3274      	adds	r2, #116	; 0x74
	/* set mutex */
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
    b74c:	8812      	ldrh	r2, [r2, #0]
    b74e:	990a      	ldr	r1, [sp, #40]	; 0x28
    b750:	1a8a      	subs	r2, r1, r2
				break;
			}

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (instant_latency <= 0x7FFF) {
    b752:	b295      	uxth	r5, r2
    b754:	0412      	lsls	r2, r2, #16
    b756:	d501      	bpl.n	b75c <event_connection_prepare+0x468>
    b758:	f000 fc83 	bl	c062 <event_connection_prepare+0xd6e>
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    b75c:	003a      	movs	r2, r7
    b75e:	3268      	adds	r2, #104	; 0x68
    b760:	7811      	ldrb	r1, [r2, #0]

		/* Reset ticker_id_prepare as role is not continued further
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;
    b762:	7303      	strb	r3, [r0, #12]
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    b764:	7051      	strb	r1, [r2, #1]
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;

		/* reset mutex */
		if (_radio.conn_upd == conn) {
    b766:	22c2      	movs	r2, #194	; 0xc2
    b768:	0052      	lsls	r2, r2, #1
    b76a:	5881      	ldr	r1, [r0, r2]
    b76c:	428f      	cmp	r7, r1
    b76e:	d100      	bne.n	b772 <event_connection_prepare+0x47e>
			_radio.conn_upd = NULL;
    b770:	5083      	str	r3, [r0, r2]
    b772:	003e      	movs	r6, r7
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
    b774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    b776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b778:	366c      	adds	r6, #108	; 0x6c
    b77a:	4293      	cmp	r3, r2
    b77c:	d10d      	bne.n	b79a <event_connection_prepare+0x4a6>
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
		    (conn->llcp.connection_update.timeout !=
    b77e:	003b      	movs	r3, r7
    b780:	3370      	adds	r3, #112	; 0x70
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
    b782:	881c      	ldrh	r4, [r3, #0]
    b784:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
    b786:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    b788:	21fa      	movs	r1, #250	; 0xfa
    b78a:	4358      	muls	r0, r3
    b78c:	237d      	movs	r3, #125	; 0x7d
    b78e:	0089      	lsls	r1, r1, #2
    b790:	4358      	muls	r0, r3
    b792:	f7f4 fd99 	bl	2c8 <__aeabi_idiv>
    b796:	4284      	cmp	r4, r0
    b798:	d022      	beq.n	b7e0 <event_connection_prepare+0x4ec>
		    (conn->llcp.connection_update.timeout !=
		     (conn->conn_interval * conn->supervision_reload * 125 / 1000))) {
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    b79a:	2002      	movs	r0, #2
    b79c:	f7fd fcf8 	bl	9190 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    b7a0:	2800      	cmp	r0, #0
    b7a2:	d105      	bne.n	b7b0 <event_connection_prepare+0x4bc>
    b7a4:	4b75      	ldr	r3, [pc, #468]	; (b97c <event_connection_prepare+0x688>)
    b7a6:	9301      	str	r3, [sp, #4]
    b7a8:	4b75      	ldr	r3, [pc, #468]	; (b980 <event_connection_prepare+0x68c>)
    b7aa:	9300      	str	r3, [sp, #0]
    b7ac:	4b75      	ldr	r3, [pc, #468]	; (b984 <event_connection_prepare+0x690>)
    b7ae:	e373      	b.n	be98 <event_connection_prepare+0xba4>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    b7b0:	8c3b      	ldrh	r3, [r7, #32]
    b7b2:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    b7b4:	2308      	movs	r3, #8
    b7b6:	7103      	strb	r3, [r0, #4]
			pdu_data_rx =
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
    b7b8:	2300      	movs	r3, #0
    b7ba:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
    b7bc:	8833      	ldrh	r3, [r6, #0]
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
    b7be:	7303      	strb	r3, [r0, #12]
    b7c0:	0a1b      	lsrs	r3, r3, #8
    b7c2:	7343      	strb	r3, [r0, #13]
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
				conn->llcp.connection_update.latency;
    b7c4:	003b      	movs	r3, r7
    b7c6:	336e      	adds	r3, #110	; 0x6e
    b7c8:	881b      	ldrh	r3, [r3, #0]
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
    b7ca:	7383      	strb	r3, [r0, #14]
    b7cc:	0a1b      	lsrs	r3, r3, #8
    b7ce:	73c3      	strb	r3, [r0, #15]
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
				conn->llcp.connection_update.timeout;
    b7d0:	003b      	movs	r3, r7
    b7d2:	3370      	adds	r3, #112	; 0x70
    b7d4:	881b      	ldrh	r3, [r3, #0]
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
    b7d6:	7403      	strb	r3, [r0, #16]
    b7d8:	0a1b      	lsrs	r3, r3, #8
    b7da:	7443      	strb	r3, [r0, #17]
				conn->llcp.connection_update.timeout;

			/* enqueue connection update complete structure
			 * into queue.
			 */
			packet_rx_enqueue();
    b7dc:	f7fe f8a6 	bl	992c <packet_rx_enqueue>
		}

		/* restore to normal prepare */
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    b7e0:	683b      	ldr	r3, [r7, #0]
    b7e2:	2b00      	cmp	r3, #0
    b7e4:	da0b      	bge.n	b7fe <event_connection_prepare+0x50a>
			u32_t ticks_prepare_to_start =
    b7e6:	6879      	ldr	r1, [r7, #4]
    b7e8:	68ba      	ldr	r2, [r7, #8]
    b7ea:	428a      	cmp	r2, r1
    b7ec:	d200      	bcs.n	b7f0 <event_connection_prepare+0x4fc>
    b7ee:	000a      	movs	r2, r1
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
    b7f0:	005b      	lsls	r3, r3, #1
    b7f2:	085b      	lsrs	r3, r3, #1
    b7f4:	603b      	str	r3, [r7, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    b7f6:	1ad3      	subs	r3, r2, r3
    b7f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b7fa:	18d3      	adds	r3, r2, r3
    b7fc:	930d      	str	r3, [sp, #52]	; 0x34
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    b7fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    b800:	001c      	movs	r4, r3
    b802:	436c      	muls	r4, r5
    b804:	930a      	str	r3, [sp, #40]	; 0x28
		latency = conn_interval_old /
			conn->llcp.connection_update.interval;
    b806:	8836      	ldrh	r6, [r6, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    b808:	b2a4      	uxth	r4, r4
		latency = conn_interval_old /
    b80a:	0031      	movs	r1, r6
    b80c:	0020      	movs	r0, r4
    b80e:	f7f4 fcd1 	bl	1b4 <__aeabi_uidiv>
    b812:	b283      	uxth	r3, r0
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
    b814:	0018      	movs	r0, r3
    b816:	4370      	muls	r0, r6
    b818:	b280      	uxth	r0, r0
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
		latency = conn_interval_old /
    b81a:	930e      	str	r3, [sp, #56]	; 0x38
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
			conn->llcp.connection_update.interval;
		if (conn_interval_new > conn_interval_old) {
    b81c:	4284      	cmp	r4, r0
    b81e:	d20f      	bcs.n	b840 <event_connection_prepare+0x54c>
			ticks_at_expire +=
    b820:	2324      	movs	r3, #36	; 0x24
    b822:	1b00      	subs	r0, r0, r4
    b824:	4a5b      	ldr	r2, [pc, #364]	; (b994 <event_connection_prepare+0x6a0>)
    b826:	33ff      	adds	r3, #255	; 0xff
    b828:	17c1      	asrs	r1, r0, #31
    b82a:	f7f4 fe59 	bl	4e0 <__aeabi_lmul>
    b82e:	2307      	movs	r3, #7
    b830:	4a59      	ldr	r2, [pc, #356]	; (b998 <event_connection_prepare+0x6a4>)
    b832:	f7f4 fe35 	bl	4a0 <__aeabi_uldivmod>
    b836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b838:	0200      	lsls	r0, r0, #8
    b83a:	0a00      	lsrs	r0, r0, #8
    b83c:	18c3      	adds	r3, r0, r3
    b83e:	e00e      	b.n	b85e <event_connection_prepare+0x56a>
				TICKER_US_TO_TICKS((conn_interval_new -
						    conn_interval_old) * 1250);
		} else {
			ticks_at_expire -=
    b840:	2324      	movs	r3, #36	; 0x24
    b842:	1a20      	subs	r0, r4, r0
    b844:	4a53      	ldr	r2, [pc, #332]	; (b994 <event_connection_prepare+0x6a0>)
    b846:	33ff      	adds	r3, #255	; 0xff
    b848:	17c1      	asrs	r1, r0, #31
    b84a:	f7f4 fe49 	bl	4e0 <__aeabi_lmul>
    b84e:	2307      	movs	r3, #7
    b850:	4a51      	ldr	r2, [pc, #324]	; (b998 <event_connection_prepare+0x6a4>)
    b852:	f7f4 fe25 	bl	4a0 <__aeabi_uldivmod>
    b856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b858:	0200      	lsls	r0, r0, #8
    b85a:	0a00      	lsrs	r0, r0, #8
    b85c:	1a1b      	subs	r3, r3, r0
    b85e:	930c      	str	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS((conn_interval_old -
						    conn_interval_new) * 1250);
		}
		conn->latency_prepare -= (instant_latency - latency);
    b860:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    b862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b864:	1b5b      	subs	r3, r3, r5
    b866:	18d3      	adds	r3, r2, r3
    b868:	853b      	strh	r3, [r7, #40]	; 0x28

		/* calculate the offset, window widening and interval */
		ticks_slot_offset =
    b86a:	687a      	ldr	r2, [r7, #4]
    b86c:	683b      	ldr	r3, [r7, #0]
    b86e:	920d      	str	r2, [sp, #52]	; 0x34
    b870:	429a      	cmp	r2, r3
    b872:	d200      	bcs.n	b876 <event_connection_prepare+0x582>
    b874:	930d      	str	r3, [sp, #52]	; 0x34
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    b876:	003c      	movs	r4, r7
    b878:	2301      	movs	r3, #1
    b87a:	3444      	adds	r4, #68	; 0x44
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    b87c:	4847      	ldr	r0, [pc, #284]	; (b99c <event_connection_prepare+0x6a8>)
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    b87e:	7821      	ldrb	r1, [r4, #0]
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    b880:	4346      	muls	r6, r0
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    b882:	4019      	ands	r1, r3
    b884:	900f      	str	r0, [sp, #60]	; 0x3c
    b886:	d100      	bne.n	b88a <event_connection_prepare+0x596>
    b888:	e094      	b.n	b9b4 <event_connection_prepare+0x6c0>
			conn->role.slave.window_widening_prepare_us -=
    b88a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    b88c:	4a44      	ldr	r2, [pc, #272]	; (b9a0 <event_connection_prepare+0x6ac>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    b88e:	435d      	muls	r5, r3
    b890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    b892:	1b5d      	subs	r5, r3, r5
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    b894:	4b38      	ldr	r3, [pc, #224]	; (b978 <event_connection_prepare+0x684>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    b896:	653d      	str	r5, [r7, #80]	; 0x50
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    b898:	33ff      	adds	r3, #255	; 0xff
    b89a:	7f5b      	ldrb	r3, [r3, #29]
				   gc_lookup_ppm[conn->role.slave.sca]) *
    b89c:	7821      	ldrb	r1, [r4, #0]
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    b89e:	005b      	lsls	r3, r3, #1
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    b8a0:	5a98      	ldrh	r0, [r3, r2]
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
    b8a2:	230e      	movs	r3, #14
    b8a4:	400b      	ands	r3, r1
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    b8a6:	5a9b      	ldrh	r3, [r3, r2]
    b8a8:	493e      	ldr	r1, [pc, #248]	; (b9a4 <event_connection_prepare+0x6b0>)
    b8aa:	18c0      	adds	r0, r0, r3
    b8ac:	4370      	muls	r0, r6
    b8ae:	4b3e      	ldr	r3, [pc, #248]	; (b9a8 <event_connection_prepare+0x6b4>)
    b8b0:	18c0      	adds	r0, r0, r3
    b8b2:	f7f4 fc7f 	bl	1b4 <__aeabi_uidiv>
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
    b8b6:	003b      	movs	r3, r7
			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
    b8b8:	0872      	lsrs	r2, r6, #1
    b8ba:	3a96      	subs	r2, #150	; 0x96
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
    b8bc:	64b8      	str	r0, [r7, #72]	; 0x48
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
    b8be:	64fa      	str	r2, [r7, #76]	; 0x4c
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
    b8c0:	3394      	adds	r3, #148	; 0x94
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    b8c2:	781b      	ldrb	r3, [r3, #0]
    b8c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    b8c6:	0004      	movs	r4, r0
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    b8c8:	434b      	muls	r3, r1
    b8ca:	65bb      	str	r3, [r7, #88]	; 0x58
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    b8cc:	2300      	movs	r3, #0

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    b8ce:	980e      	ldr	r0, [sp, #56]	; 0x38
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    b8d0:	667b      	str	r3, [r7, #100]	; 0x64

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    b8d2:	4360      	muls	r0, r4
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    b8d4:	182d      	adds	r5, r5, r0
				conn->role.slave.window_widening_periodic_us *
				latency;
			if (conn->role.slave.window_widening_prepare_us >
    b8d6:	42aa      	cmp	r2, r5
    b8d8:	d301      	bcc.n	b8de <event_connection_prepare+0x5ea>
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    b8da:	653d      	str	r5, [r7, #80]	; 0x50
    b8dc:	e000      	b.n	b8e0 <event_connection_prepare+0x5ec>
				conn->role.slave.window_widening_periodic_us *
				latency;
			if (conn->role.slave.window_widening_prepare_us >
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
    b8de:	653a      	str	r2, [r7, #80]	; 0x50
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    b8e0:	4a32      	ldr	r2, [pc, #200]	; (b9ac <event_connection_prepare+0x6b8>)
    b8e2:	2300      	movs	r3, #0
    b8e4:	2100      	movs	r1, #0
    b8e6:	f7f4 fdfb 	bl	4e0 <__aeabi_lmul>
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    b8ea:	003d      	movs	r5, r7
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    b8ec:	4a2a      	ldr	r2, [pc, #168]	; (b998 <event_connection_prepare+0x6a4>)
    b8ee:	2307      	movs	r3, #7
    b8f0:	f7f4 fdd6 	bl	4a0 <__aeabi_uldivmod>
    b8f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    b8f6:	358c      	adds	r5, #140	; 0x8c
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    b8f8:	1a1b      	subs	r3, r3, r0
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    b8fa:	4928      	ldr	r1, [pc, #160]	; (b99c <event_connection_prepare+0x6a8>)
    b8fc:	6828      	ldr	r0, [r5, #0]
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    b8fe:	930c      	str	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    b900:	f7f4 fc58 	bl	1b4 <__aeabi_uidiv>
    b904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b906:	4a29      	ldr	r2, [pc, #164]	; (b9ac <event_connection_prepare+0x6b8>)
    b908:	4343      	muls	r3, r0
    b90a:	2100      	movs	r1, #0
    b90c:	0018      	movs	r0, r3
    b90e:	2300      	movs	r3, #0
    b910:	f7f4 fde6 	bl	4e0 <__aeabi_lmul>
    b914:	4a20      	ldr	r2, [pc, #128]	; (b998 <event_connection_prepare+0x6a4>)
    b916:	2307      	movs	r3, #7
    b918:	f7f4 fdc2 	bl	4a0 <__aeabi_uldivmod>
    b91c:	0200      	lsls	r0, r0, #8
    b91e:	0a03      	lsrs	r3, r0, #8
    b920:	930e      	str	r3, [sp, #56]	; 0x38
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    b922:	1b33      	subs	r3, r6, r4
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    b924:	003c      	movs	r4, r7
    b926:	2218      	movs	r2, #24
    b928:	3495      	adds	r4, #149	; 0x95
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    b92a:	930f      	str	r3, [sp, #60]	; 0x3c
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    b92c:	7823      	ldrb	r3, [r4, #0]
    b92e:	4013      	ands	r3, r2
    b930:	2b10      	cmp	r3, #16
    b932:	d14e      	bne.n	b9d2 <event_connection_prepare+0x6de>
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
}

static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
    b934:	003b      	movs	r3, r7
    b936:	003a      	movs	r2, r7
    b938:	3368      	adds	r3, #104	; 0x68
    b93a:	3269      	adds	r2, #105	; 0x69
    b93c:	781b      	ldrb	r3, [r3, #0]
    b93e:	9210      	str	r2, [sp, #64]	; 0x40
    b940:	7812      	ldrb	r2, [r2, #0]
    b942:	9211      	str	r2, [sp, #68]	; 0x44
    b944:	429a      	cmp	r2, r3
    b946:	d144      	bne.n	b9d2 <event_connection_prepare+0x6de>
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    b948:	003b      	movs	r3, r7
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    b94a:	2202      	movs	r2, #2
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    b94c:	339c      	adds	r3, #156	; 0x9c
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    b94e:	781b      	ldrb	r3, [r3, #0]
    b950:	4213      	tst	r3, r2
    b952:	d03e      	beq.n	b9d2 <event_connection_prepare+0x6de>
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    b954:	003b      	movs	r3, r7
    b956:	339d      	adds	r3, #157	; 0x9d
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    b958:	781b      	ldrb	r3, [r3, #0]
    b95a:	2b08      	cmp	r3, #8
    b95c:	d939      	bls.n	b9d2 <event_connection_prepare+0x6de>
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    b95e:	003b      	movs	r3, r7
    b960:	339e      	adds	r3, #158	; 0x9e
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    b962:	881b      	ldrh	r3, [r3, #0]
    b964:	4a12      	ldr	r2, [pc, #72]	; (b9b0 <event_connection_prepare+0x6bc>)
    b966:	4293      	cmp	r3, r2
    b968:	d133      	bne.n	b9d2 <event_connection_prepare+0x6de>
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
    b96a:	003a      	movs	r2, r7
    b96c:	32a0      	adds	r2, #160	; 0xa0

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    b96e:	8812      	ldrh	r2, [r2, #0]
    b970:	429a      	cmp	r2, r3
    b972:	d12e      	bne.n	b9d2 <event_connection_prepare+0x6de>
    b974:	f000 fd18 	bl	c3a8 <event_connection_prepare+0x10b4>
    b978:	20000f68 	.word	0x20000f68
    b97c:	0001241d 	.word	0x0001241d
    b980:	000124a8 	.word	0x000124a8
    b984:	00014a9b 	.word	0x00014a9b
    b988:	0001246d 	.word	0x0001246d
    b98c:	000123e3 	.word	0x000123e3
    b990:	000129d4 	.word	0x000129d4
    b994:	09ce5400 	.word	0x09ce5400
    b998:	1afd498d 	.word	0x1afd498d
    b99c:	000004e2 	.word	0x000004e2
    b9a0:	00014924 	.word	0x00014924
    b9a4:	000f4240 	.word	0x000f4240
    b9a8:	000f423f 	.word	0x000f423f
    b9ac:	3b9aca00 	.word	0x3b9aca00
    b9b0:	0000ffff 	.word	0x0000ffff
			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
    b9b4:	003b      	movs	r3, r7
    b9b6:	338c      	adds	r3, #140	; 0x8c

			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
    b9b8:	6818      	ldr	r0, [r3, #0]
    b9ba:	4ae6      	ldr	r2, [pc, #920]	; (bd54 <event_connection_prepare+0xa60>)
    b9bc:	2300      	movs	r3, #0
    b9be:	f7f4 fd8f 	bl	4e0 <__aeabi_lmul>
    b9c2:	2307      	movs	r3, #7
    b9c4:	4ae4      	ldr	r2, [pc, #912]	; (bd58 <event_connection_prepare+0xa64>)
    b9c6:	f7f4 fd6b 	bl	4a0 <__aeabi_uldivmod>
    b9ca:	0200      	lsls	r0, r0, #8
    b9cc:	0a03      	lsrs	r3, r0, #8
    b9ce:	930e      	str	r3, [sp, #56]	; 0x38
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
    b9d0:	960f      	str	r6, [sp, #60]	; 0x3c
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    b9d2:	003b      	movs	r3, r7
    b9d4:	336c      	adds	r3, #108	; 0x6c
    b9d6:	881b      	ldrh	r3, [r3, #0]
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    b9d8:	0031      	movs	r1, r6
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    b9da:	84bb      	strh	r3, [r7, #36]	; 0x24
		conn->latency = conn->llcp.connection_update.latency;
    b9dc:	003b      	movs	r3, r7
    b9de:	336e      	adds	r3, #110	; 0x6e
    b9e0:	881c      	ldrh	r4, [r3, #0]
    b9e2:	84fc      	strh	r4, [r7, #38]	; 0x26
		conn->supervision_reload =
    b9e4:	8858      	ldrh	r0, [r3, #2]
    b9e6:	4bdd      	ldr	r3, [pc, #884]	; (bd5c <event_connection_prepare+0xa68>)
    b9e8:	4358      	muls	r0, r3
    b9ea:	f7f4 fbe3 	bl	1b4 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    b9ee:	0031      	movs	r1, r6
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    b9f0:	86b8      	strh	r0, [r7, #52]	; 0x34
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    b9f2:	48db      	ldr	r0, [pc, #876]	; (bd60 <event_connection_prepare+0xa6c>)
    b9f4:	f7f4 fbde 	bl	1b4 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    b9f8:	0031      	movs	r1, r6
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    b9fa:	8738      	strh	r0, [r7, #56]	; 0x38
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    b9fc:	48d9      	ldr	r0, [pc, #868]	; (bd64 <event_connection_prepare+0xa70>)
    b9fe:	f7f4 fbd9 	bl	1b4 <__aeabi_uidiv>
    ba02:	1cba      	adds	r2, r7, #2
    ba04:	b283      	uxth	r3, r0
    ba06:	87d3      	strh	r3, [r2, #62]	; 0x3e
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    ba08:	1da2      	adds	r2, r4, #6
    ba0a:	4293      	cmp	r3, r2
    ba0c:	dd02      	ble.n	ba14 <event_connection_prepare+0x720>
    ba0e:	1b1b      	subs	r3, r3, r4
    ba10:	3b06      	subs	r3, #6
    ba12:	b29b      	uxth	r3, r3
    ba14:	87bb      	strh	r3, [r7, #60]	; 0x3c
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		if (!conn->llcp.connection_update.is_internal) {
    ba16:	003b      	movs	r3, r7
    ba18:	3395      	adds	r3, #149	; 0x95
    ba1a:	781a      	ldrb	r2, [r3, #0]
    ba1c:	2318      	movs	r3, #24
    ba1e:	4013      	ands	r3, r2
    ba20:	d100      	bne.n	ba24 <event_connection_prepare+0x730>
			conn->supervision_expire = 0;
    ba22:	86fb      	strh	r3, [r7, #54]	; 0x36
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    ba24:	2101      	movs	r1, #1
    ba26:	2000      	movs	r0, #0
    ba28:	f003 fc32 	bl	f290 <mayfly_is_enabled>
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    ba2c:	2200      	movs	r2, #0
    ba2e:	2101      	movs	r1, #1
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    ba30:	0006      	movs	r6, r0
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    ba32:	0010      	movs	r0, r2
    ba34:	f7fb fdf2 	bl	761c <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);

		/* start slave/master with new timings */
		ticker_status =
    ba38:	2100      	movs	r1, #0
    ba3a:	8c3a      	ldrh	r2, [r7, #32]
    ba3c:	4bca      	ldr	r3, [pc, #808]	; (bd68 <event_connection_prepare+0xa74>)
    ba3e:	3207      	adds	r2, #7
    ba40:	9300      	str	r3, [sp, #0]
    ba42:	b2d2      	uxtb	r2, r2
    ba44:	4bc9      	ldr	r3, [pc, #804]	; (bd6c <event_connection_prepare+0xa78>)
    ba46:	0008      	movs	r0, r1
    ba48:	f7fd fa94 	bl	8f74 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ba4c:	2302      	movs	r3, #2
    ba4e:	4398      	bics	r0, r3
    ba50:	1e05      	subs	r5, r0, #0
    ba52:	d144      	bne.n	bade <event_connection_prepare+0x7ea>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ba54:	8c3b      	ldrh	r3, [r7, #32]
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
    ba56:	4abf      	ldr	r2, [pc, #764]	; (bd54 <event_connection_prepare+0xa60>)
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ba58:	3307      	adds	r3, #7
    ba5a:	b2db      	uxtb	r3, r3
    ba5c:	9310      	str	r3, [sp, #64]	; 0x40
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
    ba5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ba60:	2300      	movs	r3, #0
    ba62:	0029      	movs	r1, r5
    ba64:	f7f4 fd3c 	bl	4e0 <__aeabi_lmul>
    ba68:	4abb      	ldr	r2, [pc, #748]	; (bd58 <event_connection_prepare+0xa64>)
    ba6a:	2307      	movs	r3, #7
    ba6c:	900a      	str	r0, [sp, #40]	; 0x28
    ba6e:	910b      	str	r1, [sp, #44]	; 0x2c
    ba70:	f7f4 fd16 	bl	4a0 <__aeabi_uldivmod>
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ba74:	0204      	lsls	r4, r0, #8
    ba76:	0a24      	lsrs	r4, r4, #8
    ba78:	4ab7      	ldr	r2, [pc, #732]	; (bd58 <event_connection_prepare+0xa64>)
    ba7a:	2307      	movs	r3, #7
    ba7c:	0020      	movs	r0, r4
    ba7e:	0029      	movs	r1, r5
    ba80:	f7f4 fd2e 	bl	4e0 <__aeabi_lmul>
    ba84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ba86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ba88:	1a12      	subs	r2, r2, r0
    ba8a:	418b      	sbcs	r3, r1
    ba8c:	0010      	movs	r0, r2
    ba8e:	22fa      	movs	r2, #250	; 0xfa
    ba90:	0019      	movs	r1, r3
    ba92:	0092      	lsls	r2, r2, #2
    ba94:	2300      	movs	r3, #0
    ba96:	f7f4 fd03 	bl	4a0 <__aeabi_uldivmod>
    ba9a:	68fa      	ldr	r2, [r7, #12]
    ba9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ba9e:	4694      	mov	ip, r2
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
				     TICKER_REMAINDER(periodic_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
    baa0:	003a      	movs	r2, r7
    baa2:	3244      	adds	r2, #68	; 0x44
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    baa4:	0001      	movs	r1, r0
    baa6:	7810      	ldrb	r0, [r2, #0]
    baa8:	4463      	add	r3, ip
    baaa:	b29b      	uxth	r3, r3
    baac:	4ab0      	ldr	r2, [pc, #704]	; (bd70 <event_connection_prepare+0xa7c>)
    baae:	07c0      	lsls	r0, r0, #31
    bab0:	d400      	bmi.n	bab4 <event_connection_prepare+0x7c0>
    bab2:	4ab0      	ldr	r2, [pc, #704]	; (bd74 <event_connection_prepare+0xa80>)
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    bab4:	48b0      	ldr	r0, [pc, #704]	; (bd78 <event_connection_prepare+0xa84>)
    bab6:	9304      	str	r3, [sp, #16]
    bab8:	9008      	str	r0, [sp, #32]
    baba:	48ac      	ldr	r0, [pc, #688]	; (bd6c <event_connection_prepare+0xa78>)
    babc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    babe:	9007      	str	r0, [sp, #28]
    bac0:	2000      	movs	r0, #0
    bac2:	9205      	str	r2, [sp, #20]
    bac4:	9102      	str	r1, [sp, #8]
    bac6:	9300      	str	r3, [sp, #0]
    bac8:	9706      	str	r7, [sp, #24]
    baca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bacc:	9003      	str	r0, [sp, #12]
    bace:	9401      	str	r4, [sp, #4]
    bad0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    bad2:	0001      	movs	r1, r0
    bad4:	f7fd f9b6 	bl	8e44 <ticker_start>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
				     event_slave_prepare : event_master_prepare,
				     conn, ticker_success_assert,
				     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    bad8:	2302      	movs	r3, #2
    bada:	4398      	bics	r0, r3
    badc:	d008      	beq.n	baf0 <event_connection_prepare+0x7fc>
    bade:	4ba7      	ldr	r3, [pc, #668]	; (bd7c <event_connection_prepare+0xa88>)
    bae0:	4aa7      	ldr	r2, [pc, #668]	; (bd80 <event_connection_prepare+0xa8c>)
    bae2:	9301      	str	r3, [sp, #4]
    bae4:	4ba7      	ldr	r3, [pc, #668]	; (bd84 <event_connection_prepare+0xa90>)
    bae6:	49a8      	ldr	r1, [pc, #672]	; (bd88 <event_connection_prepare+0xa94>)
    bae8:	9300      	str	r3, [sp, #0]
    baea:	48a8      	ldr	r0, [pc, #672]	; (bd8c <event_connection_prepare+0xa98>)
    baec:	4ba8      	ldr	r3, [pc, #672]	; (bd90 <event_connection_prepare+0xa9c>)
    baee:	e626      	b.n	b73e <event_connection_prepare+0x44a>
			  (ticker_status == TICKER_STATUS_BUSY));

		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    baf0:	2e00      	cmp	r6, #0
    baf2:	d101      	bne.n	baf8 <event_connection_prepare+0x804>
    baf4:	f000 fc86 	bl	c404 <event_connection_prepare+0x1110>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    baf8:	2201      	movs	r2, #1
    bafa:	0011      	movs	r1, r2
    bafc:	f7fb fd8e 	bl	761c <mayfly_enable>
    bb00:	f000 fc80 	bl	c404 <event_connection_prepare+0x1110>
}

static inline void event_ch_map_prep(struct connection *conn,
				     u16_t event_counter)
{
	if (conn->llcp.chan_map.initiate) {
    bb04:	003d      	movs	r5, r7
    bb06:	356c      	adds	r5, #108	; 0x6c
    bb08:	782b      	ldrb	r3, [r5, #0]
    bb0a:	2b00      	cmp	r3, #0
    bb0c:	d022      	beq.n	bb54 <event_connection_prepare+0x860>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bb0e:	48a1      	ldr	r0, [pc, #644]	; (bd94 <event_connection_prepare+0xaa0>)
    bb10:	3059      	adds	r0, #89	; 0x59
    bb12:	30ff      	adds	r0, #255	; 0xff
    bb14:	f7fb feaa 	bl	786c <mem_acquire>
    bb18:	1e04      	subs	r4, r0, #0
		if (node_tx) {
    bb1a:	d100      	bne.n	bb1e <event_connection_prepare+0x82a>
    bb1c:	e2a1      	b.n	c062 <event_connection_prepare+0xd6e>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;
    bb1e:	2300      	movs	r3, #0
    bb20:	702b      	strb	r3, [r5, #0]

			/* set instant */
			conn->llcp.chan_map.instant =
    bb22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    bb24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bb26:	3306      	adds	r3, #6
    bb28:	18d3      	adds	r3, r2, r3
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bb2a:	2203      	movs	r2, #3

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;

			/* set instant */
			conn->llcp.chan_map.instant =
    bb2c:	80eb      	strh	r3, [r5, #6]
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bb2e:	7903      	ldrb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    bb30:	0039      	movs	r1, r7
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bb32:	4313      	orrs	r3, r2
    bb34:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    bb36:	2308      	movs	r3, #8
    bb38:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    bb3a:	3b07      	subs	r3, #7
    bb3c:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    bb3e:	3202      	adds	r2, #2
    bb40:	3008      	adds	r0, #8
    bb42:	316d      	adds	r1, #109	; 0x6d
    bb44:	f7f5 f883 	bl	c4e <memcpy>
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
				conn->llcp.chan_map.instant;
    bb48:	88eb      	ldrh	r3, [r5, #6]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
    bb4a:	7363      	strb	r3, [r4, #13]
    bb4c:	0a1b      	lsrs	r3, r3, #8
    bb4e:	73a3      	strb	r3, [r4, #14]
				conn->llcp.chan_map.instant;

			ctrl_tx_enqueue(conn, node_tx);
    bb50:	0021      	movs	r1, r4
    bb52:	e13a      	b.n	bdca <event_connection_prepare+0xad6>
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    bb54:	003b      	movs	r3, r7
    bb56:	3372      	adds	r3, #114	; 0x72
    bb58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bb5a:	881b      	ldrh	r3, [r3, #0]
    bb5c:	1ad3      	subs	r3, r2, r3
    bb5e:	4a8e      	ldr	r2, [pc, #568]	; (bd98 <event_connection_prepare+0xaa4>)
    bb60:	b29b      	uxth	r3, r3
    bb62:	4293      	cmp	r3, r2
    bb64:	dd00      	ble.n	bb68 <event_connection_prepare+0x874>
    bb66:	e27c      	b.n	c062 <event_connection_prepare+0xd6e>
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bb68:	003b      	movs	r3, r7

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    bb6a:	003c      	movs	r4, r7
    bb6c:	0039      	movs	r1, r7
			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bb6e:	3368      	adds	r3, #104	; 0x68
    bb70:	781a      	ldrb	r2, [r3, #0]

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    bb72:	3417      	adds	r4, #23
			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bb74:	705a      	strb	r2, [r3, #1]

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    bb76:	316d      	adds	r1, #109	; 0x6d
    bb78:	2205      	movs	r2, #5
    bb7a:	0020      	movs	r0, r4
    bb7c:	f7f5 f867 	bl	c4e <memcpy>
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    bb80:	2105      	movs	r1, #5
    bb82:	0020      	movs	r0, r4
    bb84:	f7fb fef4 	bl	7970 <util_ones_count_get>

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    bb88:	223f      	movs	r2, #63	; 0x3f
    bb8a:	7f3b      	ldrb	r3, [r7, #28]
    bb8c:	4010      	ands	r0, r2
    bb8e:	4393      	bics	r3, r2
    bb90:	4318      	orrs	r0, r3
    bb92:	7738      	strb	r0, [r7, #28]
    bb94:	e265      	b.n	c062 <event_connection_prepare+0xd6e>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
static inline void event_enc_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bb96:	4e7f      	ldr	r6, [pc, #508]	; (bd94 <event_connection_prepare+0xaa0>)
    bb98:	0035      	movs	r5, r6
    bb9a:	3559      	adds	r5, #89	; 0x59
    bb9c:	35ff      	adds	r5, #255	; 0xff
    bb9e:	0028      	movs	r0, r5
    bba0:	f7fb fe64 	bl	786c <mem_acquire>
    bba4:	900c      	str	r0, [sp, #48]	; 0x30
	if (node_tx) {
    bba6:	2800      	cmp	r0, #0
    bba8:	d100      	bne.n	bbac <event_connection_prepare+0x8b8>
    bbaa:	e25a      	b.n	c062 <event_connection_prepare+0xd6e>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bbac:	003b      	movs	r3, r7
    bbae:	3368      	adds	r3, #104	; 0x68
    bbb0:	781a      	ldrb	r2, [r3, #0]
    bbb2:	705a      	strb	r2, [r3, #1]

		/* master sends encrypted enc start rsp in control priority */
		if (conn->role.master.role == 0) {
    bbb4:	3b24      	subs	r3, #36	; 0x24
    bbb6:	781c      	ldrb	r4, [r3, #0]
    bbb8:	2301      	movs	r3, #1
    bbba:	401c      	ands	r4, r3
    bbbc:	d13a      	bne.n	bc34 <event_connection_prepare+0x940>
			/* calc the Session Key */
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    bbbe:	003d      	movs	r5, r7
    bbc0:	0039      	movs	r1, r7
    bbc2:	0038      	movs	r0, r7
    bbc4:	35c1      	adds	r5, #193	; 0xc1
    bbc6:	002b      	movs	r3, r5
    bbc8:	0022      	movs	r2, r4
    bbca:	3187      	adds	r1, #135	; 0x87
    bbcc:	3077      	adds	r0, #119	; 0x77
    bbce:	f7fb ff65 	bl	7a9c <ecb_encrypt>
				    &conn->llcp.encryption.skd[0],
				    NULL, &conn->ccm_rx.key[0]);

			/* copy the Session Key */
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    bbd2:	0038      	movs	r0, r7
    bbd4:	0029      	movs	r1, r5
    bbd6:	2210      	movs	r2, #16
    bbd8:	30e2      	adds	r0, #226	; 0xe2
    bbda:	f7f5 f838 	bl	c4e <memcpy>
			       sizeof(conn->ccm_tx.key));

			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    bbde:	0039      	movs	r1, r7
    bbe0:	0038      	movs	r0, r7
    bbe2:	2208      	movs	r2, #8
    bbe4:	31da      	adds	r1, #218	; 0xda
    bbe6:	30fb      	adds	r0, #251	; 0xfb
    bbe8:	f7f5 f831 	bl	c4e <memcpy>
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    bbec:	003b      	movs	r3, r7
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    bbee:	003a      	movs	r2, r7
    bbf0:	2101      	movs	r1, #1
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    bbf2:	33d1      	adds	r3, #209	; 0xd1
    bbf4:	701c      	strb	r4, [r3, #0]
    bbf6:	705c      	strb	r4, [r3, #1]
    bbf8:	709c      	strb	r4, [r3, #2]
    bbfa:	70dc      	strb	r4, [r3, #3]
    bbfc:	711c      	strb	r4, [r3, #4]
    bbfe:	715c      	strb	r4, [r3, #5]
    bc00:	719c      	strb	r4, [r3, #6]
    bc02:	71dc      	strb	r4, [r3, #7]
			conn->ccm_tx.counter = 0;
    bc04:	3321      	adds	r3, #33	; 0x21
    bc06:	801c      	strh	r4, [r3, #0]
    bc08:	805c      	strh	r4, [r3, #2]
    bc0a:	809c      	strh	r4, [r3, #4]
    bc0c:	80dc      	strh	r4, [r3, #6]

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    bc0e:	32d9      	adds	r2, #217	; 0xd9
    bc10:	7813      	ldrb	r3, [r2, #0]
			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;

			/* send enc start resp */
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    bc12:	0038      	movs	r0, r7
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    bc14:	438b      	bics	r3, r1
    bc16:	7013      	strb	r3, [r2, #0]
			conn->ccm_tx.direction = 1;
    bc18:	3221      	adds	r2, #33	; 0x21
    bc1a:	7813      	ldrb	r3, [r2, #0]
    bc1c:	430b      	orrs	r3, r1
    bc1e:	7013      	strb	r3, [r2, #0]

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;
    bc20:	2330      	movs	r3, #48	; 0x30
			 */
			conn->ccm_rx.direction = 0;
			conn->ccm_tx.direction = 1;

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
    bc22:	3a3a      	subs	r2, #58	; 0x3a
    bc24:	7811      	ldrb	r1, [r2, #0]
			conn->enc_tx = 1;
    bc26:	430b      	orrs	r3, r1
    bc28:	7013      	strb	r3, [r2, #0]
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
    bc2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bc2c:	1d19      	adds	r1, r3, #4
			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;

			/* send enc start resp */
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    bc2e:	f7ff fac5 	bl	b1bc <start_enc_rsp_send>
    bc32:	e0c9      	b.n	bdc8 <event_connection_prepare+0xad4>
		/* slave send reject ind or start enc req at control priority */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
		else {
#else /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */
		else if (!conn->pause_tx || conn->refresh) {
    bc34:	003b      	movs	r3, r7
    bc36:	33c0      	adds	r3, #192	; 0xc0
    bc38:	781c      	ldrb	r4, [r3, #0]
    bc3a:	930e      	str	r3, [sp, #56]	; 0x38
    bc3c:	2348      	movs	r3, #72	; 0x48
    bc3e:	401c      	ands	r4, r3
    bc40:	2c08      	cmp	r4, #8
    bc42:	d100      	bne.n	bc46 <event_connection_prepare+0x952>
    bc44:	e0ae      	b.n	bda4 <event_connection_prepare+0xab0>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

			/* ll ctrl packet */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc46:	2603      	movs	r6, #3
    bc48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bc4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bc4c:	791b      	ldrb	r3, [r3, #4]
    bc4e:	4333      	orrs	r3, r6
    bc50:	7113      	strb	r3, [r2, #4]

			/* place the reject ind packet as next in tx queue */
			if (conn->llcp.encryption.error_code) {
    bc52:	003b      	movs	r3, r7
    bc54:	336c      	adds	r3, #108	; 0x6c
    bc56:	781c      	ldrb	r4, [r3, #0]
    bc58:	2c00      	cmp	r4, #0
    bc5a:	d009      	beq.n	bc70 <event_connection_prepare+0x97c>
				pdu_ctrl_tx->len =
    bc5c:	2202      	movs	r2, #2
    bc5e:	990c      	ldr	r1, [sp, #48]	; 0x30
    bc60:	714a      	strb	r2, [r1, #5]
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
    bc62:	320b      	adds	r2, #11
    bc64:	71ca      	strb	r2, [r1, #7]
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
					conn->llcp.encryption.error_code;
    bc66:	781a      	ldrb	r2, [r3, #0]
				pdu_ctrl_tx->len =
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
    bc68:	720a      	strb	r2, [r1, #8]
					conn->llcp.encryption.error_code;

				conn->llcp.encryption.error_code = 0;
    bc6a:	2200      	movs	r2, #0
    bc6c:	701a      	strb	r2, [r3, #0]
    bc6e:	e0ab      	b.n	bdc8 <event_connection_prepare+0xad4>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bc70:	0028      	movs	r0, r5
    bc72:	f7fb fdfb 	bl	786c <mem_acquire>
    bc76:	1e05      	subs	r5, r0, #0
	LL_ASSERT(node_tx);
    bc78:	d108      	bne.n	bc8c <event_connection_prepare+0x998>
    bc7a:	4b40      	ldr	r3, [pc, #256]	; (bd7c <event_connection_prepare+0xa88>)
    bc7c:	4a40      	ldr	r2, [pc, #256]	; (bd80 <event_connection_prepare+0xa8c>)
    bc7e:	9301      	str	r3, [sp, #4]
    bc80:	4b40      	ldr	r3, [pc, #256]	; (bd84 <event_connection_prepare+0xa90>)
    bc82:	4941      	ldr	r1, [pc, #260]	; (bd88 <event_connection_prepare+0xa94>)
    bc84:	9300      	str	r3, [sp, #0]
    bc86:	4845      	ldr	r0, [pc, #276]	; (bd9c <event_connection_prepare+0xaa8>)
    bc88:	4b45      	ldr	r3, [pc, #276]	; (bda0 <event_connection_prepare+0xaac>)
    bc8a:	e558      	b.n	b73e <event_connection_prepare+0x44a>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc8c:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    bc8e:	2208      	movs	r2, #8
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc90:	431e      	orrs	r6, r3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    bc92:	230d      	movs	r3, #13
    bc94:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    bc96:	0003      	movs	r3, r0
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc98:	7106      	strb	r6, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    bc9a:	2604      	movs	r6, #4
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    bc9c:	3308      	adds	r3, #8

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    bc9e:	71c6      	strb	r6, [r0, #7]
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    bca0:	21aa      	movs	r1, #170	; 0xaa
    bca2:	0018      	movs	r0, r3
    bca4:	930f      	str	r3, [sp, #60]	; 0x3c
    bca6:	f7f4 fffc 	bl	ca2 <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 0xbb,
    bcaa:	002b      	movs	r3, r5
    bcac:	3310      	adds	r3, #16
    bcae:	0018      	movs	r0, r3
    bcb0:	0032      	movs	r2, r6
    bcb2:	21bb      	movs	r1, #187	; 0xbb
    bcb4:	9310      	str	r3, [sp, #64]	; 0x40
    bcb6:	f7f4 fff4 	bl	ca2 <memset>
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    bcba:	0038      	movs	r0, r7
    bcbc:	2208      	movs	r2, #8
    bcbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bcc0:	308f      	adds	r0, #143	; 0x8f
    bcc2:	f7f4 ffc4 	bl	c4e <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
    bcc6:	0038      	movs	r0, r7
    bcc8:	0032      	movs	r2, r6
    bcca:	9910      	ldr	r1, [sp, #64]	; 0x40
    bccc:	30de      	adds	r0, #222	; 0xde
    bcce:	f7f4 ffbe 	bl	c4e <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    bcd2:	0029      	movs	r1, r5
    bcd4:	0038      	movs	r0, r7
				 */
				enc_rsp_send(conn);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    bcd6:	003d      	movs	r5, r7
	memcpy(&conn->llcp.encryption.skd[8],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    bcd8:	f7ff fa36 	bl	b148 <ctrl_tx_enqueue>
				 */
				enc_rsp_send(conn);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    bcdc:	0039      	movs	r1, r7
    bcde:	0038      	movs	r0, r7
    bce0:	35c1      	adds	r5, #193	; 0xc1
    bce2:	002b      	movs	r3, r5
    bce4:	0022      	movs	r2, r4
    bce6:	3187      	adds	r1, #135	; 0x87
    bce8:	3077      	adds	r0, #119	; 0x77
    bcea:	f7fb fed7 	bl	7a9c <ecb_encrypt>
					    &conn->llcp.encryption.skd[0], NULL,
					    &conn->ccm_rx.key[0]);

				/* copy the Session Key */
				memcpy(&conn->ccm_tx.key[0],
    bcee:	0038      	movs	r0, r7
    bcf0:	2210      	movs	r2, #16
    bcf2:	0029      	movs	r1, r5
    bcf4:	30e2      	adds	r0, #226	; 0xe2
    bcf6:	f7f4 ffaa 	bl	c4e <memcpy>
				       &conn->ccm_rx.key[0],
				       sizeof(conn->ccm_tx.key));

				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    bcfa:	0039      	movs	r1, r7
    bcfc:	0038      	movs	r0, r7
    bcfe:	2208      	movs	r2, #8
    bd00:	31da      	adds	r1, #218	; 0xda
    bd02:	30fb      	adds	r0, #251	; 0xfb
    bd04:	f7f4 ffa3 	bl	c4e <memcpy>
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    bd08:	003b      	movs	r3, r7
				conn->ccm_tx.counter = 0;

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    bd0a:	003a      	movs	r2, r7
    bd0c:	2101      	movs	r1, #1
				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    bd0e:	33d1      	adds	r3, #209	; 0xd1
    bd10:	701c      	strb	r4, [r3, #0]
    bd12:	715c      	strb	r4, [r3, #5]
    bd14:	705c      	strb	r4, [r3, #1]
    bd16:	709c      	strb	r4, [r3, #2]
    bd18:	70dc      	strb	r4, [r3, #3]
    bd1a:	711c      	strb	r4, [r3, #4]
    bd1c:	719c      	strb	r4, [r3, #6]
    bd1e:	71dc      	strb	r4, [r3, #7]
				conn->ccm_tx.counter = 0;
    bd20:	3321      	adds	r3, #33	; 0x21
    bd22:	801c      	strh	r4, [r3, #0]
    bd24:	809c      	strh	r4, [r3, #4]
    bd26:	805c      	strh	r4, [r3, #2]
    bd28:	80dc      	strh	r4, [r3, #6]

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    bd2a:	32d9      	adds	r2, #217	; 0xd9
    bd2c:	7813      	ldrb	r3, [r2, #0]
    bd2e:	430b      	orrs	r3, r1
    bd30:	7013      	strb	r3, [r2, #0]
				conn->ccm_tx.direction = 0;
    bd32:	3221      	adds	r2, #33	; 0x21
    bd34:	7813      	ldrb	r3, [r2, #0]
    bd36:	438b      	bics	r3, r1
    bd38:	7013      	strb	r3, [r2, #0]

				/* enable receive encryption (transmit turned
				 * on when start enc resp from master is
				 * received)
				 */
				conn->enc_rx = 1;
    bd3a:	2210      	movs	r2, #16
    bd3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bd3e:	781b      	ldrb	r3, [r3, #0]
    bd40:	4313      	orrs	r3, r2
    bd42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bd44:	7013      	strb	r3, [r2, #0]

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    bd46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					offsetof(struct pdu_data_llctrl,
						 ctrldata);
				pdu_ctrl_tx->payload.llctrl.opcode =
    bd48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				 * received)
				 */
				conn->enc_rx = 1;

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    bd4a:	7159      	strb	r1, [r3, #5]
					offsetof(struct pdu_data_llctrl,
						 ctrldata);
				pdu_ctrl_tx->payload.llctrl.opcode =
    bd4c:	2305      	movs	r3, #5
    bd4e:	71d3      	strb	r3, [r2, #7]
    bd50:	e03a      	b.n	bdc8 <event_connection_prepare+0xad4>
    bd52:	46c0      	nop			; (mov r8, r8)
    bd54:	3b9aca00 	.word	0x3b9aca00
    bd58:	1afd498d 	.word	0x1afd498d
    bd5c:	00002710 	.word	0x00002710
    bd60:	02625a00 	.word	0x02625a00
    bd64:	01c9c380 	.word	0x01c9c380
    bd68:	00001654 	.word	0x00001654
    bd6c:	00009a01 	.word	0x00009a01
    bd70:	0000c441 	.word	0x0000c441
    bd74:	0000c439 	.word	0x0000c439
    bd78:	00001664 	.word	0x00001664
    bd7c:	0001241d 	.word	0x0001241d
    bd80:	0001246d 	.word	0x0001246d
    bd84:	000124a8 	.word	0x000124a8
    bd88:	000123e3 	.word	0x000123e3
    bd8c:	000137f7 	.word	0x000137f7
    bd90:	00014a9b 	.word	0x00014a9b
    bd94:	20000f68 	.word	0x20000f68
    bd98:	00007fff 	.word	0x00007fff
    bd9c:	00013b6c 	.word	0x00013b6c
    bda0:	00014d04 	.word	0x00014d04
			}

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
		} else {
			/* enable transmit encryption */
			_radio.conn_curr->enc_tx = 1;
    bda4:	36fc      	adds	r6, #252	; 0xfc
    bda6:	6970      	ldr	r0, [r6, #20]
    bda8:	2120      	movs	r1, #32
    bdaa:	0002      	movs	r2, r0
    bdac:	32c0      	adds	r2, #192	; 0xc0
    bdae:	7813      	ldrb	r3, [r2, #0]
    bdb0:	430b      	orrs	r3, r1
    bdb2:	7013      	strb	r3, [r2, #0]

			start_enc_rsp_send(_radio.conn_curr, NULL);
    bdb4:	2100      	movs	r1, #0
    bdb6:	f7ff fa01 	bl	b1bc <start_enc_rsp_send>

			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
			_radio.conn_curr->pause_tx = 0;
    bdba:	2104      	movs	r1, #4
			_radio.conn_curr->enc_tx = 1;

			start_enc_rsp_send(_radio.conn_curr, NULL);

			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    bdbc:	6972      	ldr	r2, [r6, #20]
    bdbe:	32c0      	adds	r2, #192	; 0xc0
    bdc0:	7813      	ldrb	r3, [r2, #0]
			_radio.conn_curr->pause_tx = 0;
    bdc2:	438b      	bics	r3, r1
    bdc4:	43a3      	bics	r3, r4
    bdc6:	7013      	strb	r3, [r2, #0]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		}

		ctrl_tx_enqueue(conn, node_tx);
    bdc8:	990c      	ldr	r1, [sp, #48]	; 0x30
    bdca:	0038      	movs	r0, r7
    bdcc:	f7ff f9bc 	bl	b148 <ctrl_tx_enqueue>
    bdd0:	e147      	b.n	c062 <event_connection_prepare+0xd6e>

static inline void event_fex_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bdd2:	48c4      	ldr	r0, [pc, #784]	; (c0e4 <event_connection_prepare+0xdf0>)
    bdd4:	3059      	adds	r0, #89	; 0x59
    bdd6:	30ff      	adds	r0, #255	; 0xff
    bdd8:	f7fb fd48 	bl	786c <mem_acquire>
    bddc:	1e04      	subs	r4, r0, #0
	if (node_tx) {
    bdde:	d100      	bne.n	bde2 <event_connection_prepare+0xaee>
    bde0:	e13f      	b.n	c062 <event_connection_prepare+0xd6e>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bde2:	003b      	movs	r3, r7

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    bde4:	003d      	movs	r5, r7
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bde6:	3368      	adds	r3, #104	; 0x68
    bde8:	781a      	ldrb	r2, [r3, #0]

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    bdea:	3598      	adds	r5, #152	; 0x98
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bdec:	705a      	strb	r2, [r3, #1]

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bdee:	2203      	movs	r2, #3

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    bdf0:	4bbd      	ldr	r3, [pc, #756]	; (c0e8 <event_connection_prepare+0xdf4>)
    bdf2:	602b      	str	r3, [r5, #0]

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bdf4:	7903      	ldrb	r3, [r0, #4]
    bdf6:	4313      	orrs	r3, r2
    bdf8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    bdfa:	2309      	movs	r3, #9
    bdfc:	7143      	strb	r3, [r0, #5]
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
			(conn->role.master.role == 0) ?
    bdfe:	003b      	movs	r3, r7
    be00:	3344      	adds	r3, #68	; 0x44

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    be02:	781a      	ldrb	r2, [r3, #0]
    be04:	2308      	movs	r3, #8
    be06:	07d2      	lsls	r2, r2, #31
    be08:	d500      	bpl.n	be0c <event_connection_prepare+0xb18>
    be0a:	3306      	adds	r3, #6
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    be0c:	0020      	movs	r0, r4

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    be0e:	71e3      	strb	r3, [r4, #7]
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    be10:	2100      	movs	r1, #0
    be12:	3008      	adds	r0, #8
    be14:	2208      	movs	r2, #8
    be16:	f7f4 ff44 	bl	ca2 <memset>
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    be1a:	782b      	ldrb	r3, [r5, #0]
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
			(conn->llcp_features >> 16) & 0xFF;

		ctrl_tx_enqueue(conn, node_tx);
    be1c:	0021      	movs	r1, r4
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    be1e:	7223      	strb	r3, [r4, #8]
			conn->llcp_features & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    be20:	682b      	ldr	r3, [r5, #0]
    be22:	0a1b      	lsrs	r3, r3, #8
    be24:	7263      	strb	r3, [r4, #9]
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    be26:	682b      	ldr	r3, [r5, #0]
    be28:	0c1b      	lsrs	r3, r3, #16
    be2a:	72a3      	strb	r3, [r4, #10]
    be2c:	e06f      	b.n	bf0e <event_connection_prepare+0xc1a>
}

static inline void event_vex_prep(struct connection *conn)
{

	if (conn->llcp_version.tx == 0) {
    be2e:	003d      	movs	r5, r7
    be30:	2401      	movs	r4, #1
    be32:	359c      	adds	r5, #156	; 0x9c
    be34:	782b      	ldrb	r3, [r5, #0]
    be36:	4223      	tst	r3, r4
    be38:	d11e      	bne.n	be78 <event_connection_prepare+0xb84>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    be3a:	48aa      	ldr	r0, [pc, #680]	; (c0e4 <event_connection_prepare+0xdf0>)
    be3c:	3059      	adds	r0, #89	; 0x59
    be3e:	30ff      	adds	r0, #255	; 0xff
    be40:	f7fb fd14 	bl	786c <mem_acquire>
    be44:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    be46:	d100      	bne.n	be4a <event_connection_prepare+0xb56>
    be48:	e10b      	b.n	c062 <event_connection_prepare+0xd6e>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    be4a:	003b      	movs	r3, r7
    be4c:	3368      	adds	r3, #104	; 0x68
    be4e:	781a      	ldrb	r2, [r3, #0]
    be50:	705a      	strb	r2, [r3, #1]

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    be52:	2203      	movs	r2, #3

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;
    be54:	782b      	ldrb	r3, [r5, #0]
    be56:	431c      	orrs	r4, r3
    be58:	702c      	strb	r4, [r5, #0]

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    be5a:	7903      	ldrb	r3, [r0, #4]
    be5c:	4313      	orrs	r3, r2
    be5e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    be60:	2306      	movs	r3, #6
    be62:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_version_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    be64:	18db      	adds	r3, r3, r3
    be66:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_VERSION_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    be68:	3b03      	subs	r3, #3
    be6a:	7203      	strb	r3, [r0, #8]
				RADIO_BLE_VERSION_NUMBER;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    be6c:	3b0a      	subs	r3, #10
    be6e:	7243      	strb	r3, [r0, #9]
    be70:	7283      	strb	r3, [r0, #10]
				RADIO_BLE_COMPANY_ID;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    be72:	72c3      	strb	r3, [r0, #11]
    be74:	7303      	strb	r3, [r0, #12]
    be76:	e04a      	b.n	bf0e <event_connection_prepare+0xc1a>
			/* Start Procedure Timeout (@todo this shall not
			 * replace terminate procedure)
			 */
			conn->procedure_expire = conn->procedure_reload;
		}
	} else if (conn->llcp_version.rx != 0) {
    be78:	2002      	movs	r0, #2
    be7a:	4203      	tst	r3, r0
    be7c:	d02c      	beq.n	bed8 <event_connection_prepare+0xbe4>
		struct radio_pdu_node_rx *radio_pdu_node_rx;
		struct pdu_data *pdu_ctrl_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    be7e:	003b      	movs	r3, r7
    be80:	3368      	adds	r3, #104	; 0x68
    be82:	781a      	ldrb	r2, [r3, #0]
    be84:	705a      	strb	r2, [r3, #1]

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
    be86:	f7fd f983 	bl	9190 <packet_rx_reserve_get>
		LL_ASSERT(radio_pdu_node_rx);
    be8a:	2800      	cmp	r0, #0
    be8c:	d108      	bne.n	bea0 <event_connection_prepare+0xbac>
    be8e:	4b97      	ldr	r3, [pc, #604]	; (c0ec <event_connection_prepare+0xdf8>)
    be90:	9301      	str	r3, [sp, #4]
    be92:	4b97      	ldr	r3, [pc, #604]	; (c0f0 <event_connection_prepare+0xdfc>)
    be94:	9300      	str	r3, [sp, #0]
    be96:	4b97      	ldr	r3, [pc, #604]	; (c0f4 <event_connection_prepare+0xe00>)
    be98:	4a97      	ldr	r2, [pc, #604]	; (c0f8 <event_connection_prepare+0xe04>)
    be9a:	4998      	ldr	r1, [pc, #608]	; (c0fc <event_connection_prepare+0xe08>)
    be9c:	4898      	ldr	r0, [pc, #608]	; (c100 <event_connection_prepare+0xe0c>)
    be9e:	e44e      	b.n	b73e <event_connection_prepare+0x44a>
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    bea0:	2203      	movs	r2, #3

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(radio_pdu_node_rx);

		radio_pdu_node_rx->hdr.handle = conn->handle;
    bea2:	8c3b      	ldrh	r3, [r7, #32]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    bea4:	7104      	strb	r4, [r0, #4]

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(radio_pdu_node_rx);

		radio_pdu_node_rx->hdr.handle = conn->handle;
    bea6:	80c3      	strh	r3, [r0, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    bea8:	7a03      	ldrb	r3, [r0, #8]
    beaa:	4313      	orrs	r3, r2
    beac:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    beae:	2306      	movs	r3, #6
    beb0:	7243      	strb	r3, [r0, #9]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
    beb2:	18db      	adds	r3, r3, r3
    beb4:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
    beb6:	003b      	movs	r3, r7
    beb8:	339d      	adds	r3, #157	; 0x9d
    beba:	781b      	ldrb	r3, [r3, #0]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
    bebc:	7303      	strb	r3, [r0, #12]
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
			conn->llcp_version.company_id;
    bebe:	003b      	movs	r3, r7
    bec0:	339e      	adds	r3, #158	; 0x9e
    bec2:	881b      	ldrh	r3, [r3, #0]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
    bec4:	7343      	strb	r3, [r0, #13]
    bec6:	0a1b      	lsrs	r3, r3, #8
    bec8:	7383      	strb	r3, [r0, #14]
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
			conn->llcp_version.sub_version_number;
    beca:	003b      	movs	r3, r7
    becc:	33a0      	adds	r3, #160	; 0xa0
    bece:	881b      	ldrh	r3, [r3, #0]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    bed0:	73c3      	strb	r3, [r0, #15]
    bed2:	0a1b      	lsrs	r3, r3, #8
    bed4:	7403      	strb	r3, [r0, #16]
    bed6:	e0ba      	b.n	c04e <event_connection_prepare+0xd5a>

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
    bed8:	4b84      	ldr	r3, [pc, #528]	; (c0ec <event_connection_prepare+0xdf8>)
    beda:	9301      	str	r3, [sp, #4]
    bedc:	4b84      	ldr	r3, [pc, #528]	; (c0f0 <event_connection_prepare+0xdfc>)
    bede:	9300      	str	r3, [sp, #0]
    bee0:	4b84      	ldr	r3, [pc, #528]	; (c0f4 <event_connection_prepare+0xe00>)
    bee2:	f7ff fc29 	bl	b738 <event_connection_prepare+0x444>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
static inline void event_ping_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bee6:	487f      	ldr	r0, [pc, #508]	; (c0e4 <event_connection_prepare+0xdf0>)
    bee8:	3059      	adds	r0, #89	; 0x59
    beea:	30ff      	adds	r0, #255	; 0xff
    beec:	f7fb fcbe 	bl	786c <mem_acquire>
    bef0:	1e01      	subs	r1, r0, #0
	if (node_tx) {
    bef2:	d100      	bne.n	bef6 <event_connection_prepare+0xc02>
    bef4:	e0b5      	b.n	c062 <event_connection_prepare+0xd6e>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bef6:	003b      	movs	r3, r7
    bef8:	3368      	adds	r3, #104	; 0x68
    befa:	781a      	ldrb	r2, [r3, #0]
    befc:	705a      	strb	r2, [r3, #1]

		/* place the ping req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    befe:	2203      	movs	r2, #3
    bf00:	7903      	ldrb	r3, [r0, #4]
    bf02:	4313      	orrs	r3, r2
    bf04:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    bf06:	2301      	movs	r3, #1
    bf08:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
    bf0a:	3311      	adds	r3, #17
    bf0c:	71c3      	strb	r3, [r0, #7]
			PDU_DATA_LLCTRL_TYPE_PING_REQ;

		ctrl_tx_enqueue(conn, node_tx);
    bf0e:	0038      	movs	r0, r7
    bf10:	f7ff f91a 	bl	b148 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure)
		 */
		conn->procedure_expire = conn->procedure_reload;
    bf14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    bf16:	877b      	strh	r3, [r7, #58]	; 0x3a
    bf18:	e0a3      	b.n	c062 <event_connection_prepare+0xd6e>
}

static inline void event_phy_upd_ind_prep(struct connection *conn,
					  u16_t event_counter)
{
	if (conn->llcp.phy_upd_ind.initiate) {
    bf1a:	003c      	movs	r4, r7
    bf1c:	2501      	movs	r5, #1
    bf1e:	346c      	adds	r4, #108	; 0x6c
    bf20:	7821      	ldrb	r1, [r4, #0]
    bf22:	4229      	tst	r1, r5
    bf24:	d031      	beq.n	bf8a <event_connection_prepare+0xc96>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bf26:	486f      	ldr	r0, [pc, #444]	; (c0e4 <event_connection_prepare+0xdf0>)
    bf28:	3059      	adds	r0, #89	; 0x59
    bf2a:	30ff      	adds	r0, #255	; 0xff
    bf2c:	f7fb fc9e 	bl	786c <mem_acquire>
    bf30:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    bf32:	d100      	bne.n	bf36 <event_connection_prepare+0xc42>
    bf34:	e095      	b.n	c062 <event_connection_prepare+0xd6e>
			struct pdu_data *pdu_ctrl_tx = (struct pdu_data *)
						       node_tx->pdu_data;
			struct pdu_data_llctrl_phy_upd_ind *p;

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;
    bf36:	7822      	ldrb	r2, [r4, #0]
    bf38:	43aa      	bics	r2, r5

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
    bf3a:	06d3      	lsls	r3, r2, #27
    bf3c:	0f5b      	lsrs	r3, r3, #29
			struct pdu_data *pdu_ctrl_tx = (struct pdu_data *)
						       node_tx->pdu_data;
			struct pdu_data_llctrl_phy_upd_ind *p;

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;
    bf3e:	7022      	strb	r2, [r4, #0]

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
			       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    bf40:	0952      	lsrs	r2, r2, #5

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
    bf42:	431a      	orrs	r2, r3
    bf44:	b2d3      	uxtb	r3, r2
    bf46:	003a      	movs	r2, r7
    bf48:	326e      	adds	r2, #110	; 0x6e
    bf4a:	2b00      	cmp	r3, #0
    bf4c:	d104      	bne.n	bf58 <event_connection_prepare+0xc64>
			       conn->llcp.phy_upd_ind.rx) & 0x07)) {
				/* Procedure complete */
				conn->llcp_ack = conn->llcp_req;
    bf4e:	0038      	movs	r0, r7
    bf50:	3068      	adds	r0, #104	; 0x68
    bf52:	7805      	ldrb	r5, [r0, #0]
    bf54:	7045      	strb	r5, [r0, #1]
    bf56:	e003      	b.n	bf60 <event_connection_prepare+0xc6c>

				/* 0 instant */
				conn->llcp.phy_upd_ind.instant = 0;
			} else {
				/* set instant */
				conn->llcp.phy_upd_ind.instant = event_counter +
    bf58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    bf5a:	980a      	ldr	r0, [sp, #40]	; 0x28
    bf5c:	3306      	adds	r3, #6
    bf5e:	18c3      	adds	r3, r0, r3
			}

			/* place the phy update ind packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bf60:	2003      	movs	r0, #3

				/* 0 instant */
				conn->llcp.phy_upd_ind.instant = 0;
			} else {
				/* set instant */
				conn->llcp.phy_upd_ind.instant = event_counter +
    bf62:	8013      	strh	r3, [r2, #0]
			}

			/* place the phy update ind packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bf64:	790b      	ldrb	r3, [r1, #4]
    bf66:	4303      	orrs	r3, r0
    bf68:	710b      	strb	r3, [r1, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    bf6a:	2305      	movs	r3, #5
    bf6c:	714b      	strb	r3, [r1, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_phy_upd_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    bf6e:	3313      	adds	r3, #19
    bf70:	71cb      	strb	r3, [r1, #7]
				PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
			p = &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_upd_ind;
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    bf72:	7823      	ldrb	r3, [r4, #0]
    bf74:	06db      	lsls	r3, r3, #27
    bf76:	0f5b      	lsrs	r3, r3, #29
    bf78:	720b      	strb	r3, [r1, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    bf7a:	7823      	ldrb	r3, [r4, #0]
    bf7c:	095b      	lsrs	r3, r3, #5
    bf7e:	724b      	strb	r3, [r1, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
    bf80:	8813      	ldrh	r3, [r2, #0]
    bf82:	728b      	strb	r3, [r1, #10]
    bf84:	0a1b      	lsrs	r3, r3, #8
    bf86:	72cb      	strb	r3, [r1, #11]
    bf88:	e71f      	b.n	bdca <event_connection_prepare+0xad6>

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    bf8a:	003b      	movs	r3, r7
    bf8c:	336e      	adds	r3, #110	; 0x6e
    bf8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bf90:	881b      	ldrh	r3, [r3, #0]
    bf92:	1ad3      	subs	r3, r2, r3
    bf94:	4a5b      	ldr	r2, [pc, #364]	; (c104 <event_connection_prepare+0xe10>)
    bf96:	b29b      	uxth	r3, r3
    bf98:	4293      	cmp	r3, r2
    bf9a:	dc62      	bgt.n	c062 <event_connection_prepare+0xd6e>
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bf9c:	003b      	movs	r3, r7

		/* apply new phy */
		old_tx = conn->phy_tx;
    bf9e:	003e      	movs	r6, r7
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bfa0:	3368      	adds	r3, #104	; 0x68
    bfa2:	781a      	ldrb	r2, [r3, #0]

		/* apply new phy */
		old_tx = conn->phy_tx;
    bfa4:	3632      	adds	r6, #50	; 0x32
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    bfa6:	705a      	strb	r2, [r3, #1]

		/* apply new phy */
		old_tx = conn->phy_tx;
		old_rx = conn->phy_rx;
    bfa8:	3b35      	subs	r3, #53	; 0x35
    bfaa:	781a      	ldrb	r2, [r3, #0]
		if (conn->llcp.phy_upd_ind.tx) {
    bfac:	231c      	movs	r3, #28

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
    bfae:	7835      	ldrb	r5, [r6, #0]
		old_rx = conn->phy_rx;
    bfb0:	0692      	lsls	r2, r2, #26

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
    bfb2:	06a8      	lsls	r0, r5, #26
    bfb4:	0f40      	lsrs	r0, r0, #29
		old_rx = conn->phy_rx;
    bfb6:	0f52      	lsrs	r2, r2, #29
		if (conn->llcp.phy_upd_ind.tx) {
    bfb8:	4219      	tst	r1, r3
    bfba:	d007      	beq.n	bfcc <event_connection_prepare+0xcd8>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    bfbc:	7823      	ldrb	r3, [r4, #0]
    bfbe:	2438      	movs	r4, #56	; 0x38
    bfc0:	06db      	lsls	r3, r3, #27
    bfc2:	0f5b      	lsrs	r3, r3, #29
    bfc4:	00db      	lsls	r3, r3, #3
    bfc6:	43a5      	bics	r5, r4
    bfc8:	431d      	orrs	r5, r3
    bfca:	7035      	strb	r5, [r6, #0]
		}
		if (conn->llcp.phy_upd_ind.rx) {
    bfcc:	231f      	movs	r3, #31
    bfce:	000c      	movs	r4, r1
    bfd0:	439c      	bics	r4, r3
    bfd2:	d00b      	beq.n	bfec <event_connection_prepare+0xcf8>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    bfd4:	003b      	movs	r3, r7
    bfd6:	003c      	movs	r4, r7
    bfd8:	2638      	movs	r6, #56	; 0x38
    bfda:	336c      	adds	r3, #108	; 0x6c
    bfdc:	781b      	ldrb	r3, [r3, #0]
    bfde:	3432      	adds	r4, #50	; 0x32
    bfe0:	7865      	ldrb	r5, [r4, #1]
    bfe2:	095b      	lsrs	r3, r3, #5
    bfe4:	00db      	lsls	r3, r3, #3
    bfe6:	43b5      	bics	r5, r6
    bfe8:	431d      	orrs	r5, r3
    bfea:	7065      	strb	r5, [r4, #1]
		}
		conn->phy_flags = conn->phy_pref_flags;
    bfec:	003c      	movs	r4, r7
    bfee:	257f      	movs	r5, #127	; 0x7f
    bff0:	3432      	adds	r4, #50	; 0x32
    bff2:	7826      	ldrb	r6, [r4, #0]
    bff4:	0673      	lsls	r3, r6, #25
    bff6:	0fdb      	lsrs	r3, r3, #31
    bff8:	4035      	ands	r5, r6
    bffa:	01db      	lsls	r3, r3, #7
    bffc:	432b      	orrs	r3, r5
    bffe:	003d      	movs	r5, r7
    c000:	7023      	strb	r3, [r4, #0]
    c002:	3533      	adds	r5, #51	; 0x33

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c004:	078b      	lsls	r3, r1, #30
    c006:	d409      	bmi.n	c01c <event_connection_prepare+0xd28>
    c008:	7823      	ldrb	r3, [r4, #0]
    c00a:	069b      	lsls	r3, r3, #26
    c00c:	0f5b      	lsrs	r3, r3, #29
    c00e:	4283      	cmp	r3, r0
    c010:	d104      	bne.n	c01c <event_connection_prepare+0xd28>
		    (conn->phy_rx == old_rx)) {
    c012:	782b      	ldrb	r3, [r5, #0]
    c014:	069b      	lsls	r3, r3, #26
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
		}
		conn->phy_flags = conn->phy_pref_flags;

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c016:	0f5b      	lsrs	r3, r3, #29
    c018:	4293      	cmp	r3, r2
    c01a:	d022      	beq.n	c062 <event_connection_prepare+0xd6e>
		    (conn->phy_rx == old_rx)) {
			return;
		}

		node_rx = packet_rx_reserve_get(2);
    c01c:	2002      	movs	r0, #2
    c01e:	f7fd f8b7 	bl	9190 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c022:	2800      	cmp	r0, #0
    c024:	d105      	bne.n	c032 <event_connection_prepare+0xd3e>
    c026:	4b31      	ldr	r3, [pc, #196]	; (c0ec <event_connection_prepare+0xdf8>)
    c028:	9301      	str	r3, [sp, #4]
    c02a:	4b31      	ldr	r3, [pc, #196]	; (c0f0 <event_connection_prepare+0xdfc>)
    c02c:	9300      	str	r3, [sp, #0]
    c02e:	4b36      	ldr	r3, [pc, #216]	; (c108 <event_connection_prepare+0xe14>)
    c030:	e173      	b.n	c31a <event_connection_prepare+0x1026>

		node_rx->hdr.handle = conn->handle;
    c032:	8c3b      	ldrh	r3, [r7, #32]
    c034:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c036:	230c      	movs	r3, #12
    c038:	7103      	strb	r3, [r0, #4]

		pdu_data = (struct pdu_data *)&node_rx->pdu_data;
		p = (struct radio_le_phy_upd_cmplt *)&pdu_data->payload;
		p->status = 0;
    c03a:	2300      	movs	r3, #0
    c03c:	72c3      	strb	r3, [r0, #11]
		p->tx = conn->phy_tx;
    c03e:	7823      	ldrb	r3, [r4, #0]
    c040:	069b      	lsls	r3, r3, #26
    c042:	0f5b      	lsrs	r3, r3, #29
    c044:	7303      	strb	r3, [r0, #12]
		p->rx = conn->phy_rx;
    c046:	782b      	ldrb	r3, [r5, #0]
    c048:	069b      	lsls	r3, r3, #26
    c04a:	0f5b      	lsrs	r3, r3, #29
    c04c:	7343      	strb	r3, [r0, #13]

		packet_rx_enqueue();
    c04e:	f7fd fc6d 	bl	992c <packet_rx_enqueue>
    c052:	e006      	b.n	c062 <event_connection_prepare+0xd6e>
			event_phy_upd_ind_prep(conn, event_counter);
			break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		default:
			LL_ASSERT(0);
    c054:	4b25      	ldr	r3, [pc, #148]	; (c0ec <event_connection_prepare+0xdf8>)
    c056:	9301      	str	r3, [sp, #4]
    c058:	4b25      	ldr	r3, [pc, #148]	; (c0f0 <event_connection_prepare+0xdfc>)
    c05a:	9300      	str	r3, [sp, #0]
    c05c:	4b2b      	ldr	r3, [pc, #172]	; (c10c <event_connection_prepare+0xe18>)
    c05e:	f7ff fb6b 	bl	b738 <event_connection_prepare+0x444>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    c062:	003c      	movs	r4, r7
    c064:	003d      	movs	r5, r7
    c066:	34a5      	adds	r4, #165	; 0xa5
    c068:	35a4      	adds	r5, #164	; 0xa4
    c06a:	7822      	ldrb	r2, [r4, #0]
    c06c:	782b      	ldrb	r3, [r5, #0]
    c06e:	429a      	cmp	r2, r3
    c070:	d01e      	beq.n	c0b0 <event_connection_prepare+0xdbc>
		struct radio_pdu_node_tx *node_tx;

		/* Stop previous event, to avoid Radio DMA corrupting the rx
		 * queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c072:	2200      	movs	r2, #0
    c074:	2305      	movs	r3, #5
    c076:	0011      	movs	r1, r2
    c078:	0010      	movs	r0, r2
    c07a:	f7fd fda3 	bl	9bc4 <event_stop>

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c07e:	4819      	ldr	r0, [pc, #100]	; (c0e4 <event_connection_prepare+0xdf0>)
    c080:	3059      	adds	r0, #89	; 0x59
    c082:	30ff      	adds	r0, #255	; 0xff
    c084:	f7fb fbf2 	bl	786c <mem_acquire>
    c088:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    c08a:	d011      	beq.n	c0b0 <event_connection_prepare+0xdbc>

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c08c:	2203      	movs	r2, #3
		if (node_tx) {
			struct pdu_data *pdu_ctrl_tx =
			    (struct pdu_data *)node_tx->pdu_data;

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    c08e:	782b      	ldrb	r3, [r5, #0]
    c090:	7023      	strb	r3, [r4, #0]

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c092:	7903      	ldrb	r3, [r0, #4]
    c094:	4313      	orrs	r3, r2
    c096:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    c098:	2302      	movs	r3, #2
    c09a:	7143      	strb	r3, [r0, #5]
				offsetof(struct pdu_data_llctrl, ctrldata) +
				sizeof(struct pdu_data_llctrl_terminate_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    c09c:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.terminate_ind.
				error_code = conn->llcp_terminate.reason_own;
    c09e:	003b      	movs	r3, r7
    c0a0:	33a6      	adds	r3, #166	; 0xa6
    c0a2:	781b      	ldrb	r3, [r3, #0]
    c0a4:	7203      	strb	r3, [r0, #8]

			ctrl_tx_enqueue(conn, node_tx);
    c0a6:	0038      	movs	r0, r7
    c0a8:	f7ff f84e 	bl	b148 <ctrl_tx_enqueue>

			/* Terminate Procedure timeout is started, will
			 * replace any other timeout running
			 */
			conn->procedure_expire = conn->procedure_reload;
    c0ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    c0ae:	877b      	strh	r3, [r7, #58]	; 0x3a
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    c0b0:	003b      	movs	r3, r7
    c0b2:	33b5      	adds	r3, #181	; 0xb5
    c0b4:	930c      	str	r3, [sp, #48]	; 0x30
    c0b6:	781a      	ldrb	r2, [r3, #0]
    c0b8:	3b01      	subs	r3, #1
    c0ba:	781b      	ldrb	r3, [r3, #0]
    c0bc:	429a      	cmp	r2, r3
    c0be:	d100      	bne.n	c0c2 <event_connection_prepare+0xdce>
    c0c0:	e152      	b.n	c368 <event_connection_prepare+0x1074>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c0c2:	2200      	movs	r2, #0
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    c0c4:	003d      	movs	r5, r7
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c0c6:	0010      	movs	r0, r2
    c0c8:	2305      	movs	r3, #5
    c0ca:	0011      	movs	r1, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    c0cc:	35b6      	adds	r5, #182	; 0xb6
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    c0ce:	f7fd fd79 	bl	9bc4 <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    c0d2:	7828      	ldrb	r0, [r5, #0]
    c0d4:	0780      	lsls	r0, r0, #30
    c0d6:	0f80      	lsrs	r0, r0, #30
    c0d8:	f7f4 f862 	bl	1a0 <__gnu_thumb1_case_uhi>
    c0dc:	0146001a 	.word	0x0146001a
    c0e0:	005d0146 	.word	0x005d0146
    c0e4:	20000f68 	.word	0x20000f68
    c0e8:	0000407f 	.word	0x0000407f
    c0ec:	0001241d 	.word	0x0001241d
    c0f0:	000124a8 	.word	0x000124a8
    c0f4:	000148c8 	.word	0x000148c8
    c0f8:	0001246d 	.word	0x0001246d
    c0fc:	000123e3 	.word	0x000123e3
    c100:	00013845 	.word	0x00013845
    c104:	00007fff 	.word	0x00007fff
    c108:	0001490d 	.word	0x0001490d
    c10c:	00014b9e 	.word	0x00014b9e
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    c110:	f7fd f828 	bl	9164 <packet_rx_acquired_count_get>
			mem_free_count_get(_radio.pkt_rx_data_free);
    c114:	4ebc      	ldr	r6, [pc, #752]	; (c408 <event_connection_prepare+0x1114>)
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    c116:	0004      	movs	r4, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    c118:	0033      	movs	r3, r6
    c11a:	33fc      	adds	r3, #252	; 0xfc
    c11c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    c11e:	f7fb fbd4 	bl	78ca <mem_free_count_get>
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    c122:	1904      	adds	r4, r0, r4
    c124:	b2a0      	uxth	r0, r4
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    c126:	28ff      	cmp	r0, #255	; 0xff
    c128:	d842      	bhi.n	c1b0 <event_connection_prepare+0xebc>

		if (_radio.packet_rx_data_count != free_count_rx) {
    c12a:	239b      	movs	r3, #155	; 0x9b
    c12c:	005b      	lsls	r3, r3, #1
    c12e:	5cf3      	ldrb	r3, [r6, r3]
    c130:	4283      	cmp	r3, r0
    c132:	d000      	beq.n	c136 <event_connection_prepare+0xe42>
    c134:	e118      	b.n	c368 <event_connection_prepare+0x1074>
			break;
		}

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c136:	0030      	movs	r0, r6
    c138:	3059      	adds	r0, #89	; 0x59
    c13a:	30ff      	adds	r0, #255	; 0xff
    c13c:	f7fb fb96 	bl	786c <mem_acquire>
    c140:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    c142:	d100      	bne.n	c146 <event_connection_prepare+0xe52>
    c144:	e110      	b.n	c368 <event_connection_prepare+0x1074>
			break;
		}

		/* wait for resp before completing the procedure */
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c146:	2203      	movs	r2, #3
    c148:	2001      	movs	r0, #1
    c14a:	782b      	ldrb	r3, [r5, #0]
    c14c:	4393      	bics	r3, r2
    c14e:	4303      	orrs	r3, r0
    c150:	702b      	strb	r3, [r5, #0]

		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    c152:	003b      	movs	r3, r7
    c154:	33ba      	adds	r3, #186	; 0xba
    c156:	881b      	ldrh	r3, [r3, #0]
    c158:	85bb      	strh	r3, [r7, #44]	; 0x2c

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c15a:	790b      	ldrb	r3, [r1, #4]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    c15c:	72c8      	strb	r0, [r1, #11]
		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c15e:	431a      	orrs	r2, r3
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    c160:	2309      	movs	r3, #9
    c162:	714b      	strb	r3, [r1, #5]
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    c164:	330b      	adds	r3, #11
    c166:	71cb      	strb	r3, [r1, #7]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    c168:	3307      	adds	r3, #7
    c16a:	720b      	strb	r3, [r1, #8]
    c16c:	2300      	movs	r3, #0
    c16e:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    c170:	3348      	adds	r3, #72	; 0x48
		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c172:	710a      	strb	r2, [r1, #4]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    c174:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    c176:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);

		ctrl_tx_enqueue(conn, node_tx);
    c178:	0038      	movs	r0, r7

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
		lr->max_tx_octets = conn->default_tx_octets;
    c17a:	0a1a      	lsrs	r2, r3, #8
    c17c:	730b      	strb	r3, [r1, #12]
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);
    c17e:	330e      	adds	r3, #14
    c180:	00db      	lsls	r3, r3, #3
    c182:	b29b      	uxth	r3, r3
    c184:	738b      	strb	r3, [r1, #14]
    c186:	0a1b      	lsrs	r3, r3, #8
    c188:	73cb      	strb	r3, [r1, #15]

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
		lr->max_tx_octets = conn->default_tx_octets;
    c18a:	734a      	strb	r2, [r1, #13]
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);

		ctrl_tx_enqueue(conn, node_tx);
    c18c:	f7fe ffdc 	bl	b148 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    c190:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    c192:	877b      	strh	r3, [r7, #58]	; 0x3a
    c194:	e0e8      	b.n	c368 <event_connection_prepare+0x1074>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    c196:	f7fc ffe5 	bl	9164 <packet_rx_acquired_count_get>
			mem_free_count_get(_radio.pkt_rx_data_free);
    c19a:	4d9b      	ldr	r5, [pc, #620]	; (c408 <event_connection_prepare+0x1114>)
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    c19c:	0004      	movs	r4, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    c19e:	002e      	movs	r6, r5
    c1a0:	36fc      	adds	r6, #252	; 0xfc
    c1a2:	6b30      	ldr	r0, [r6, #48]	; 0x30
    c1a4:	f7fb fb91 	bl	78ca <mem_free_count_get>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    c1a8:	1904      	adds	r4, r0, r4
    c1aa:	b2a0      	uxth	r0, r4
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    c1ac:	28ff      	cmp	r0, #255	; 0xff
    c1ae:	d909      	bls.n	c1c4 <event_connection_prepare+0xed0>
    c1b0:	4b96      	ldr	r3, [pc, #600]	; (c40c <event_connection_prepare+0x1118>)
    c1b2:	4a97      	ldr	r2, [pc, #604]	; (c410 <event_connection_prepare+0x111c>)
    c1b4:	9301      	str	r3, [sp, #4]
    c1b6:	4b97      	ldr	r3, [pc, #604]	; (c414 <event_connection_prepare+0x1120>)
    c1b8:	4997      	ldr	r1, [pc, #604]	; (c418 <event_connection_prepare+0x1124>)
    c1ba:	9300      	str	r3, [sp, #0]
    c1bc:	4897      	ldr	r0, [pc, #604]	; (c41c <event_connection_prepare+0x1128>)
    c1be:	4b98      	ldr	r3, [pc, #608]	; (c420 <event_connection_prepare+0x112c>)
    c1c0:	f7ff fabd 	bl	b73e <event_connection_prepare+0x44a>

		if (_radio.packet_rx_data_count != free_count_rx) {
    c1c4:	239b      	movs	r3, #155	; 0x9b
    c1c6:	005b      	lsls	r3, r3, #1
    c1c8:	5ceb      	ldrb	r3, [r5, r3]
    c1ca:	4283      	cmp	r3, r0
    c1cc:	d006      	beq.n	c1dc <event_connection_prepare+0xee8>
			/** TODO another role instance has obtained
			 * memory from rx pool.
			 */
			LL_ASSERT(0);
    c1ce:	4b8f      	ldr	r3, [pc, #572]	; (c40c <event_connection_prepare+0x1118>)
    c1d0:	9301      	str	r3, [sp, #4]
    c1d2:	4b90      	ldr	r3, [pc, #576]	; (c414 <event_connection_prepare+0x1120>)
    c1d4:	9300      	str	r3, [sp, #0]
    c1d6:	4b92      	ldr	r3, [pc, #584]	; (c420 <event_connection_prepare+0x112c>)
    c1d8:	f7ff faae 	bl	b738 <event_connection_prepare+0x444>
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
    c1dc:	003b      	movs	r3, r7
    c1de:	33b4      	adds	r3, #180	; 0xb4
    c1e0:	781b      	ldrb	r3, [r3, #0]
    c1e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		conn->procedure_expire = 0;

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    c1e4:	2108      	movs	r1, #8
			 */
			LL_ASSERT(0);
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
    c1e6:	7013      	strb	r3, [r2, #0]
		conn->procedure_expire = 0;
    c1e8:	2300      	movs	r3, #0
    c1ea:	877b      	strh	r3, [r7, #58]	; 0x3a

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    c1ec:	6973      	ldr	r3, [r6, #20]
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
		if (_radio.advertiser.conn) {
    c1ee:	35c8      	adds	r5, #200	; 0xc8
		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
		conn->procedure_expire = 0;

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    c1f0:	33c0      	adds	r3, #192	; 0xc0
    c1f2:	781a      	ldrb	r2, [r3, #0]
    c1f4:	438a      	bics	r2, r1
    c1f6:	701a      	strb	r2, [r3, #0]

		/* Use the new rx octets in the connection */
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    c1f8:	003b      	movs	r3, r7
    c1fa:	33b8      	adds	r3, #184	; 0xb8
    c1fc:	881b      	ldrh	r3, [r3, #0]
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    c1fe:	68f0      	ldr	r0, [r6, #12]

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;

		/* Use the new rx octets in the connection */
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    c200:	863b      	strh	r3, [r7, #48]	; 0x30
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    c202:	f7fb fb62 	bl	78ca <mem_free_count_get>
		if (_radio.advertiser.conn) {
    c206:	682b      	ldr	r3, [r5, #0]
    c208:	2b00      	cmp	r3, #0
    c20a:	d001      	beq.n	c210 <event_connection_prepare+0xf1c>
			free_count_conn++;
    c20c:	3001      	adds	r0, #1
    c20e:	b280      	uxth	r0, r0
		}
		if (_radio.scanner.conn) {
    c210:	4b7d      	ldr	r3, [pc, #500]	; (c408 <event_connection_prepare+0x1114>)
    c212:	001a      	movs	r2, r3
    c214:	32fc      	adds	r2, #252	; 0xfc
    c216:	6812      	ldr	r2, [r2, #0]
    c218:	2a00      	cmp	r2, #0
    c21a:	d001      	beq.n	c220 <event_connection_prepare+0xf2c>
			free_count_conn++;
    c21c:	3001      	adds	r0, #1
    c21e:	b280      	uxth	r0, r0
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    c220:	2103      	movs	r1, #3
    c222:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c224:	3001      	adds	r0, #1
			free_count_conn++;
		}
		if (_radio.scanner.conn) {
			free_count_conn++;
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    c226:	320e      	adds	r2, #14
    c228:	438a      	bics	r2, r1
    c22a:	b292      	uxth	r2, r2
    c22c:	920c      	str	r2, [sp, #48]	; 0x30
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c22e:	001a      	movs	r2, r3
    c230:	32ff      	adds	r2, #255	; 0xff
    c232:	7b52      	ldrb	r2, [r2, #13]
    c234:	4290      	cmp	r0, r2
    c236:	d004      	beq.n	c242 <event_connection_prepare+0xf4e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
    c238:	33fe      	adds	r3, #254	; 0xfe
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c23a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    c23c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c23e:	4293      	cmp	r3, r2
    c240:	d261      	bcs.n	c306 <event_connection_prepare+0x1012>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    c242:	269f      	movs	r6, #159	; 0x9f
    c244:	0076      	lsls	r6, r6, #1
				_radio.packet_rx_last) {
    c246:	223e      	movs	r2, #62	; 0x3e
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    c248:	4d6f      	ldr	r5, [pc, #444]	; (c408 <event_connection_prepare+0x1114>)
				_radio.packet_rx_last) {
    c24a:	32ff      	adds	r2, #255	; 0xff
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    c24c:	5dab      	ldrb	r3, [r5, r6]
				_radio.packet_rx_last) {
    c24e:	5caa      	ldrb	r2, [r5, r2]
    c250:	002c      	movs	r4, r5
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    c252:	4293      	cmp	r3, r2
    c254:	d029      	beq.n	c2aa <event_connection_prepare+0xfb6>
				_radio.packet_rx_last) {

				struct radio_pdu_node_rx *node_rx;

				if (_radio.packet_rx_acquire == 0) {
    c256:	2b00      	cmp	r3, #0
    c258:	d102      	bne.n	c260 <event_connection_prepare+0xf6c>
					_radio.packet_rx_acquire =
    c25a:	333d      	adds	r3, #61	; 0x3d
    c25c:	33ff      	adds	r3, #255	; 0xff
    c25e:	5ceb      	ldrb	r3, [r5, r3]
						_radio.packet_rx_count - 1;
				} else {
					_radio.packet_rx_acquire -= 1;
    c260:	3b01      	subs	r3, #1
    c262:	55ab      	strb	r3, [r5, r6]
				}

				node_rx = _radio.packet_rx[
    c264:	239f      	movs	r3, #159	; 0x9f
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    c266:	0021      	movs	r1, r4
						_radio.packet_rx_count - 1;
				} else {
					_radio.packet_rx_acquire -= 1;
				}

				node_rx = _radio.packet_rx[
    c268:	005b      	lsls	r3, r3, #1
    c26a:	5ceb      	ldrb	r3, [r5, r3]
    c26c:	34fc      	adds	r4, #252	; 0xfc
    c26e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    c270:	009b      	lsls	r3, r3, #2
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    c272:	589b      	ldr	r3, [r3, r2]
    c274:	3145      	adds	r1, #69	; 0x45
    c276:	31ff      	adds	r1, #255	; 0xff
    c278:	6818      	ldr	r0, [r3, #0]
    c27a:	f7fb fb10 	bl	789e <mem_release>
					&_radio.link_rx_free);

				LL_ASSERT(_radio.link_rx_data_quota <
    c27e:	229e      	movs	r2, #158	; 0x9e
    c280:	21a8      	movs	r1, #168	; 0xa8
    c282:	0052      	lsls	r2, r2, #1
    c284:	0049      	lsls	r1, r1, #1
    c286:	5caa      	ldrb	r2, [r5, r2]
    c288:	5c6b      	ldrb	r3, [r5, r1]
    c28a:	3a01      	subs	r2, #1
    c28c:	4293      	cmp	r3, r2
    c28e:	db09      	blt.n	c2a4 <event_connection_prepare+0xfb0>
    c290:	4b5e      	ldr	r3, [pc, #376]	; (c40c <event_connection_prepare+0x1118>)
    c292:	4a5f      	ldr	r2, [pc, #380]	; (c410 <event_connection_prepare+0x111c>)
    c294:	9301      	str	r3, [sp, #4]
    c296:	4b5f      	ldr	r3, [pc, #380]	; (c414 <event_connection_prepare+0x1120>)
    c298:	495f      	ldr	r1, [pc, #380]	; (c418 <event_connection_prepare+0x1124>)
    c29a:	9300      	str	r3, [sp, #0]
    c29c:	4861      	ldr	r0, [pc, #388]	; (c424 <event_connection_prepare+0x1130>)
    c29e:	4b60      	ldr	r3, [pc, #384]	; (c420 <event_connection_prepare+0x112c>)
    c2a0:	f7ff fa4d 	bl	b73e <event_connection_prepare+0x44a>
					  (_radio.packet_rx_count - 1));
				_radio.link_rx_data_quota++;
    c2a4:	3301      	adds	r3, #1
    c2a6:	546b      	strb	r3, [r5, r1]
    c2a8:	e7cd      	b.n	c246 <event_connection_prepare+0xf52>
    c2aa:	002b      	movs	r3, r5
				 * later down in code.
				 */
			}

			/* calculate the new rx node size and new count */
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX + 1)) {
    c2ac:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    c2ae:	33fe      	adds	r3, #254	; 0xfe
    c2b0:	2a27      	cmp	r2, #39	; 0x27
    c2b2:	d801      	bhi.n	c2b8 <event_connection_prepare+0xfc4>
				_radio.packet_rx_data_size =
    c2b4:	2230      	movs	r2, #48	; 0x30
    c2b6:	e001      	b.n	c2bc <event_connection_prepare+0xfc8>
				    MROUND(offsetof(struct radio_pdu_node_rx,
						    pdu_data) +
					   (PDU_AC_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
    c2b8:	466a      	mov	r2, sp
    c2ba:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    c2bc:	86da      	strh	r2, [r3, #54]	; 0x36
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
    c2be:	0023      	movs	r3, r4
    c2c0:	33fe      	adds	r3, #254	; 0xfe
    c2c2:	8edd      	ldrh	r5, [r3, #54]	; 0x36
					   (PDU_AC_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
    c2c4:	8e98      	ldrh	r0, [r3, #52]	; 0x34
    c2c6:	0029      	movs	r1, r5
    c2c8:	f7f3 ff74 	bl	1b4 <__aeabi_uidiv>
    c2cc:	219b      	movs	r1, #155	; 0x9b
    c2ce:	b282      	uxth	r2, r0
    c2d0:	b2d3      	uxtb	r3, r2
    c2d2:	0049      	lsls	r1, r1, #1
    c2d4:	5463      	strb	r3, [r4, r1]
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
			LL_ASSERT(_radio.packet_rx_data_count);
    c2d6:	2b00      	cmp	r3, #0
    c2d8:	d109      	bne.n	c2ee <event_connection_prepare+0xffa>
    c2da:	4b4c      	ldr	r3, [pc, #304]	; (c40c <event_connection_prepare+0x1118>)
    c2dc:	4a4c      	ldr	r2, [pc, #304]	; (c410 <event_connection_prepare+0x111c>)
    c2de:	9301      	str	r3, [sp, #4]
    c2e0:	4b4c      	ldr	r3, [pc, #304]	; (c414 <event_connection_prepare+0x1120>)
    c2e2:	494d      	ldr	r1, [pc, #308]	; (c418 <event_connection_prepare+0x1124>)
    c2e4:	9300      	str	r3, [sp, #0]
    c2e6:	4850      	ldr	r0, [pc, #320]	; (c428 <event_connection_prepare+0x1134>)
    c2e8:	4b4d      	ldr	r3, [pc, #308]	; (c420 <event_connection_prepare+0x112c>)
    c2ea:	f7ff fa28 	bl	b73e <event_connection_prepare+0x44a>

			/* re-size (re-init) the free rx pool */
			mem_init(_radio.pkt_rx_data_pool,
    c2ee:	0023      	movs	r3, r4
    c2f0:	34fc      	adds	r4, #252	; 0xfc
    c2f2:	332d      	adds	r3, #45	; 0x2d
    c2f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    c2f6:	33ff      	adds	r3, #255	; 0xff
    c2f8:	b2d2      	uxtb	r2, r2
    c2fa:	0029      	movs	r1, r5
    c2fc:	f7fb fa90 	bl	7820 <mem_init>
				 &_radio.pkt_rx_data_free);

			/* allocate the rx queue include one extra for
			 * generating event in following lines.
			 */
			packet_rx_allocate(4);
    c300:	2004      	movs	r0, #4
    c302:	f7fc ff5b 	bl	91bc <packet_rx_allocate>
		}

		/* Prepare the rx packet structure */
		node_rx = packet_rx_reserve_get(2);
    c306:	2002      	movs	r0, #2
    c308:	f7fc ff42 	bl	9190 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c30c:	2800      	cmp	r0, #0
    c30e:	d109      	bne.n	c324 <event_connection_prepare+0x1030>
    c310:	4b3e      	ldr	r3, [pc, #248]	; (c40c <event_connection_prepare+0x1118>)
    c312:	9301      	str	r3, [sp, #4]
    c314:	4b3f      	ldr	r3, [pc, #252]	; (c414 <event_connection_prepare+0x1120>)
    c316:	9300      	str	r3, [sp, #0]
    c318:	4b41      	ldr	r3, [pc, #260]	; (c420 <event_connection_prepare+0x112c>)
    c31a:	4a3d      	ldr	r2, [pc, #244]	; (c410 <event_connection_prepare+0x111c>)
    c31c:	493e      	ldr	r1, [pc, #248]	; (c418 <event_connection_prepare+0x1124>)
    c31e:	4843      	ldr	r0, [pc, #268]	; (c42c <event_connection_prepare+0x1138>)
    c320:	f7ff fa0d 	bl	b73e <event_connection_prepare+0x44a>
		node_rx->hdr.handle = conn->handle;
    c324:	8c3b      	ldrh	r3, [r7, #32]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare length rsp structure */
		pdu_ctrl_rx = (struct pdu_data *) node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    c326:	2203      	movs	r2, #3
		}

		/* Prepare the rx packet structure */
		node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(node_rx);
		node_rx->hdr.handle = conn->handle;
    c328:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c32a:	2301      	movs	r3, #1
    c32c:	7103      	strb	r3, [r0, #4]

		/* prepare length rsp structure */
		pdu_ctrl_rx = (struct pdu_data *) node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    c32e:	7a03      	ldrb	r3, [r0, #8]
    c330:	4313      	orrs	r3, r2
    c332:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
    c334:	2309      	movs	r3, #9
    c336:	7243      	strb	r3, [r0, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_rx->payload.llctrl.opcode =
    c338:	330c      	adds	r3, #12
    c33a:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
    c33c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    c33e:	0a1a      	lsrs	r2, r3, #8
    c340:	7303      	strb	r3, [r0, #12]
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
    c342:	330e      	adds	r3, #14
    c344:	00db      	lsls	r3, r3, #3
    c346:	b29b      	uxth	r3, r3
    c348:	7383      	strb	r3, [r0, #14]
    c34a:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
    c34c:	7342      	strb	r2, [r0, #13]
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
    c34e:	73c3      	strb	r3, [r0, #15]
		lr->max_tx_octets = conn->max_tx_octets;
    c350:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    c352:	0a1a      	lsrs	r2, r3, #8
    c354:	7403      	strb	r3, [r0, #16]
		lr->max_tx_time = ((conn->max_tx_octets + 14) << 3);
    c356:	330e      	adds	r3, #14
    c358:	00db      	lsls	r3, r3, #3
    c35a:	b29b      	uxth	r3, r3
    c35c:	7483      	strb	r3, [r0, #18]
    c35e:	0a1b      	lsrs	r3, r3, #8

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
		lr->max_tx_octets = conn->max_tx_octets;
    c360:	7442      	strb	r2, [r0, #17]
		lr->max_tx_time = ((conn->max_tx_octets + 14) << 3);
    c362:	74c3      	strb	r3, [r0, #19]

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
    c364:	f7fd fae2 	bl	992c <packet_rx_enqueue>
				   &conn->hdr.ticks_xtal_to_start,
				   &conn->hdr.ticks_active_to_start,
				   conn->hdr.ticks_preempt_to_start,
				   (RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle),
				   (conn->role.slave.role != 0) ? event_slave :
    c368:	0039      	movs	r1, r7
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    c36a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				   &conn->hdr.ticks_xtal_to_start,
				   &conn->hdr.ticks_active_to_start,
				   conn->hdr.ticks_preempt_to_start,
				   (RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle),
				   (conn->role.slave.role != 0) ? event_slave :
    c36c:	3144      	adds	r1, #68	; 0x44
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    c36e:	3201      	adds	r2, #1
    c370:	847a      	strh	r2, [r7, #34]	; 0x22

	/* Setup XTAL startup and radio active events */
	err = event_common_prepare(ticks_at_expire, remainder,
    c372:	8c3a      	ldrh	r2, [r7, #32]
    c374:	780c      	ldrb	r4, [r1, #0]
    c376:	3207      	adds	r2, #7
    c378:	1d3b      	adds	r3, r7, #4
    c37a:	68b8      	ldr	r0, [r7, #8]
    c37c:	b2d2      	uxtb	r2, r2
    c37e:	492c      	ldr	r1, [pc, #176]	; (c430 <event_connection_prepare+0x113c>)
    c380:	07e4      	lsls	r4, r4, #31
    c382:	d400      	bmi.n	c386 <event_connection_prepare+0x1092>
    c384:	492b      	ldr	r1, [pc, #172]	; (c434 <event_connection_prepare+0x1140>)
    c386:	9102      	str	r1, [sp, #8]
    c388:	9201      	str	r2, [sp, #4]
    c38a:	9000      	str	r0, [sp, #0]
    c38c:	9703      	str	r7, [sp, #12]
    c38e:	003a      	movs	r2, r7
    c390:	9911      	ldr	r1, [sp, #68]	; 0x44
    c392:	980d      	ldr	r0, [sp, #52]	; 0x34
    c394:	f7fd fdca 	bl	9f2c <event_common_prepare>
				   (RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle),
				   (conn->role.slave.role != 0) ? event_slave :
								  event_master,
				   conn);
	if (!err) {
    c398:	2800      	cmp	r0, #0
    c39a:	d133      	bne.n	c404 <event_connection_prepare+0x1110>
		_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    c39c:	8c3b      	ldrh	r3, [r7, #32]
    c39e:	4a1a      	ldr	r2, [pc, #104]	; (c408 <event_connection_prepare+0x1114>)
    c3a0:	3307      	adds	r3, #7
    c3a2:	b2db      	uxtb	r3, r3
    c3a4:	7313      	strb	r3, [r2, #12]
    c3a6:	e02d      	b.n	c404 <event_connection_prepare+0x1110>
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
    c3a8:	003b      	movs	r3, r7
    c3aa:	2201      	movs	r2, #1
    c3ac:	3394      	adds	r3, #148	; 0x94
    c3ae:	701a      	strb	r2, [r3, #0]
		conn->llcp.connection_update.win_offset_us = 0;
    c3b0:	2300      	movs	r3, #0
		conn->llcp.connection_update.interval = conn->conn_interval;
    c3b2:	466a      	mov	r2, sp
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
    c3b4:	602b      	str	r3, [r5, #0]
		conn->llcp.connection_update.interval = conn->conn_interval;
    c3b6:	003b      	movs	r3, r7
    c3b8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    c3ba:	336c      	adds	r3, #108	; 0x6c
    c3bc:	801a      	strh	r2, [r3, #0]
		conn->llcp.connection_update.latency = conn->latency;
    c3be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
		conn->llcp.connection_update.timeout = conn->conn_interval *
    c3c0:	21fa      	movs	r1, #250	; 0xfa
	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
    c3c2:	805a      	strh	r2, [r3, #2]
		conn->llcp.connection_update.timeout = conn->conn_interval *
    c3c4:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
    c3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3c8:	0089      	lsls	r1, r1, #2
    c3ca:	4343      	muls	r3, r0
    c3cc:	0018      	movs	r0, r3
    c3ce:	237d      	movs	r3, #125	; 0x7d
    c3d0:	4358      	muls	r0, r3
    c3d2:	f7f3 ff79 	bl	2c8 <__aeabi_idiv>
    c3d6:	003b      	movs	r3, r7
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    c3d8:	2207      	movs	r2, #7
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
    c3da:	3370      	adds	r3, #112	; 0x70
    c3dc:	8018      	strh	r0, [r3, #0]
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    c3de:	7823      	ldrb	r3, [r4, #0]
    c3e0:	4393      	bics	r3, r2
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    c3e2:	3a05      	subs	r2, #5
    c3e4:	4313      	orrs	r3, r2
    c3e6:	3216      	adds	r2, #22
    c3e8:	4393      	bics	r3, r2
    c3ea:	3a10      	subs	r2, #16
    c3ec:	4313      	orrs	r3, r2
    c3ee:	7023      	strb	r3, [r4, #0]

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
    c3f0:	003b      	movs	r3, r7
    c3f2:	3a07      	subs	r2, #7
    c3f4:	336a      	adds	r3, #106	; 0x6a
    c3f6:	701a      	strb	r2, [r3, #0]
		conn->llcp_ack--;
    c3f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c3fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c3fc:	3b01      	subs	r3, #1
    c3fe:	7013      	strb	r3, [r2, #0]
    c400:	f7ff fae7 	bl	b9d2 <event_connection_prepare+0x6de>
				   conn);
	if (!err) {
		_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
					   conn->handle;
	}
}
    c404:	b013      	add	sp, #76	; 0x4c
    c406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c408:	20000f68 	.word	0x20000f68
    c40c:	0001241d 	.word	0x0001241d
    c410:	0001246d 	.word	0x0001246d
    c414:	000124a8 	.word	0x000124a8
    c418:	000123e3 	.word	0x000123e3
    c41c:	00013bbe 	.word	0x00013bbe
    c420:	00014af4 	.word	0x00014af4
    c424:	00013bf5 	.word	0x00013bf5
    c428:	00013c4f 	.word	0x00013c4f
    c42c:	00013b95 	.word	0x00013b95
    c430:	0000af71 	.word	0x0000af71
    c434:	0000c449 	.word	0x0000c449

0000c438 <event_master_prepare>:
	DEBUG_RADIO_START_S(0);
}

static void event_master_prepare(u32_t ticks_at_expire, u32_t remainder,
				 u16_t lazy, void *context)
{
    c438:	b510      	push	{r4, lr}
	DEBUG_RADIO_PREPARE_M(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    c43a:	f7fe ff5b 	bl	b2f4 <event_connection_prepare>

	DEBUG_RADIO_PREPARE_M(0);
}
    c43e:	bd10      	pop	{r4, pc}

0000c440 <event_slave_prepare>:
    c440:	b510      	push	{r4, lr}
    c442:	f7fe ff57 	bl	b2f4 <event_connection_prepare>
    c446:	bd10      	pop	{r4, pc}

0000c448 <event_master>:

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    c448:	b5f0      	push	{r4, r5, r6, r7, lr}
    c44a:	001c      	movs	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    c44c:	4b5b      	ldr	r3, [pc, #364]	; (c5bc <event_master+0x174>)
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    c44e:	b087      	sub	sp, #28
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    c450:	7bd9      	ldrb	r1, [r3, #15]
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    c452:	0005      	movs	r5, r0
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    c454:	b2c9      	uxtb	r1, r1
    c456:	2900      	cmp	r1, #0
    c458:	d008      	beq.n	c46c <event_master+0x24>
    c45a:	4b59      	ldr	r3, [pc, #356]	; (c5c0 <event_master+0x178>)
    c45c:	4a59      	ldr	r2, [pc, #356]	; (c5c4 <event_master+0x17c>)
    c45e:	9301      	str	r3, [sp, #4]
    c460:	4b59      	ldr	r3, [pc, #356]	; (c5c8 <event_master+0x180>)
    c462:	495a      	ldr	r1, [pc, #360]	; (c5cc <event_master+0x184>)
    c464:	9300      	str	r3, [sp, #0]
    c466:	485a      	ldr	r0, [pc, #360]	; (c5d0 <event_master+0x188>)
    c468:	4b5a      	ldr	r3, [pc, #360]	; (c5d4 <event_master+0x18c>)
    c46a:	e00d      	b.n	c488 <event_master+0x40>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    c46c:	7b1a      	ldrb	r2, [r3, #12]
    c46e:	8c20      	ldrh	r0, [r4, #32]
    c470:	b2d2      	uxtb	r2, r2
    c472:	3007      	adds	r0, #7
    c474:	4282      	cmp	r2, r0
    c476:	d00c      	beq.n	c492 <event_master+0x4a>
    c478:	4b51      	ldr	r3, [pc, #324]	; (c5c0 <event_master+0x178>)
    c47a:	4a52      	ldr	r2, [pc, #328]	; (c5c4 <event_master+0x17c>)
    c47c:	9301      	str	r3, [sp, #4]
    c47e:	4b52      	ldr	r3, [pc, #328]	; (c5c8 <event_master+0x180>)
    c480:	4952      	ldr	r1, [pc, #328]	; (c5cc <event_master+0x184>)
    c482:	9300      	str	r3, [sp, #0]
    c484:	4854      	ldr	r0, [pc, #336]	; (c5d8 <event_master+0x190>)
    c486:	4b53      	ldr	r3, [pc, #332]	; (c5d4 <event_master+0x18c>)
    c488:	f7f5 fa04 	bl	1894 <printk>
    c48c:	b662      	cpsie	i
    c48e:	2004      	movs	r0, #4
    c490:	df02      	svc	2
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    c492:	2604      	movs	r6, #4
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    c494:	b2d2      	uxtb	r2, r2

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    c496:	73de      	strb	r6, [r3, #15]
	_radio.state = STATE_TX;
    c498:	2002      	movs	r0, #2
	_radio.ticker_id_prepare = 0;
    c49a:	7319      	strb	r1, [r3, #12]
	_radio.ticker_id_event =
    c49c:	735a      	strb	r2, [r3, #13]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    c49e:	001a      	movs	r2, r3
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
    c4a0:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    c4a2:	32ff      	adds	r2, #255	; 0xff
	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    c4a4:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    c4a6:	33fc      	adds	r3, #252	; 0xfc
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    c4a8:	7551      	strb	r1, [r2, #21]
	_radio.crc_expire = 0;
    c4aa:	7591      	strb	r1, [r2, #22]

	_radio.conn_curr = conn;
    c4ac:	615c      	str	r4, [r3, #20]

	conn->latency_event = conn->latency_prepare;
    c4ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	conn->latency_prepare = 0;
    c4b0:	8521      	strh	r1, [r4, #40]	; 0x28
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    c4b2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    c4b4:	f7fd fcee 	bl	9e94 <packet_tx_enqueue>

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    c4b8:	a905      	add	r1, sp, #20
    c4ba:	0020      	movs	r0, r4
    c4bc:	f7fd f986 	bl	97cc <prepare_pdu_data_tx>

	pdu_data_tx->sn = conn->sn;
    c4c0:	0020      	movs	r0, r4
    c4c2:	2701      	movs	r7, #1
    c4c4:	30c0      	adds	r0, #192	; 0xc0
    c4c6:	7803      	ldrb	r3, [r0, #0]
    c4c8:	9905      	ldr	r1, [sp, #20]
    c4ca:	403b      	ands	r3, r7
    c4cc:	00db      	lsls	r3, r3, #3
    c4ce:	9303      	str	r3, [sp, #12]
    c4d0:	780b      	ldrb	r3, [r1, #0]
    c4d2:	001a      	movs	r2, r3
    c4d4:	2308      	movs	r3, #8
    c4d6:	439a      	bics	r2, r3
    c4d8:	0013      	movs	r3, r2
    c4da:	9a03      	ldr	r2, [sp, #12]
    c4dc:	4313      	orrs	r3, r2
    c4de:	700b      	strb	r3, [r1, #0]
	pdu_data_tx->nesn = conn->nesn;
    c4e0:	7803      	ldrb	r3, [r0, #0]

	connection_configure(conn);
    c4e2:	0020      	movs	r0, r4

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);

	pdu_data_tx->sn = conn->sn;
	pdu_data_tx->nesn = conn->nesn;
    c4e4:	40fb      	lsrs	r3, r7
    c4e6:	403b      	ands	r3, r7
    c4e8:	009a      	lsls	r2, r3, #2
    c4ea:	780b      	ldrb	r3, [r1, #0]
    c4ec:	43b3      	bics	r3, r6
    c4ee:	4313      	orrs	r3, r2
    c4f0:	700b      	strb	r3, [r1, #0]

	connection_configure(conn);
    c4f2:	f7fe fd1f 	bl	af34 <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    c4f6:	2096      	movs	r0, #150	; 0x96
    c4f8:	f7fb fc9e 	bl	7e38 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_rx(conn->phy_rx);
    c4fc:	0023      	movs	r3, r4
    c4fe:	0026      	movs	r6, r4
    c500:	3333      	adds	r3, #51	; 0x33
    c502:	7818      	ldrb	r0, [r3, #0]
    c504:	3617      	adds	r6, #23
    c506:	0680      	lsls	r0, r0, #26
    c508:	0f40      	lsrs	r0, r0, #29
    c50a:	f7fb fbf1 	bl	7cf0 <radio_switch_complete_and_rx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	tx_packet_set(conn, pdu_data_tx);
    c50e:	9905      	ldr	r1, [sp, #20]
    c510:	0020      	movs	r0, r4
    c512:	f7fd f9e2 	bl	98da <tx_packet_set>

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    c516:	7f22      	ldrb	r2, [r4, #28]
    c518:	0693      	lsls	r3, r2, #26
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    c51a:	0e9b      	lsrs	r3, r3, #26
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	tx_packet_set(conn, pdu_data_tx);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    c51c:	0652      	lsls	r2, r2, #25
    c51e:	d507      	bpl.n	c530 <event_master+0xe8>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    c520:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    c522:	8be1      	ldrh	r1, [r4, #30]
    c524:	3801      	subs	r0, #1
    c526:	0032      	movs	r2, r6
    c528:	b280      	uxth	r0, r0
    c52a:	f7fe fcc1 	bl	aeb0 <chan_sel_2>
    c52e:	e019      	b.n	c564 <event_master+0x11c>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    c530:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    c532:	9303      	str	r3, [sp, #12]
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    c534:	7fa3      	ldrb	r3, [r4, #30]
    c536:	3001      	adds	r0, #1
    c538:	4358      	muls	r0, r3
    c53a:	7fe3      	ldrb	r3, [r4, #31]
    c53c:	2125      	movs	r1, #37	; 0x25
    c53e:	18c0      	adds	r0, r0, r3
    c540:	f7f3 ffa8 	bl	494 <__aeabi_idivmod>
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    c544:	2207      	movs	r2, #7
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    c546:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    c548:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    c54a:	08c3      	lsrs	r3, r0, #3
    c54c:	5cf3      	ldrb	r3, [r6, r3]
    c54e:	4011      	ands	r1, r2
    c550:	410b      	asrs	r3, r1
    c552:	423b      	tst	r3, r7
    c554:	d106      	bne.n	c564 <event_master+0x11c>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    c556:	9903      	ldr	r1, [sp, #12]
    c558:	f7f3 feb2 	bl	2c0 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    c55c:	0030      	movs	r0, r6
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    c55e:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    c560:	f7fc fde5 	bl	912e <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    c564:	f7fd fe6e 	bl	a244 <chan_set>
	     (conn->supervision_expire <= 6)) ||
	    ((conn->role.master.connect_expire != 0) &&
	     (conn->role.master.connect_expire <= 6)))
#endif
	{
		radio_tmr_start(1, ticks_at_expire +
    c568:	0029      	movs	r1, r5
    c56a:	4e14      	ldr	r6, [pc, #80]	; (c5bc <event_master+0x174>)
    c56c:	3109      	adds	r1, #9
    c56e:	68b2      	ldr	r2, [r6, #8]
    c570:	2001      	movs	r0, #1
    c572:	f7fb fc69 	bl	7e48 <radio_tmr_start>
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
		radio_tmr_end_capture();
    c576:	f7fb fd2b 	bl	7fd0 <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    c57a:	8c21      	ldrh	r1, [r4, #32]
    c57c:	002a      	movs	r2, r5
    c57e:	3107      	adds	r1, #7
    c580:	b2c9      	uxtb	r1, r1
    c582:	0020      	movs	r0, r4
    c584:	f7fe face 	bl	ab24 <preempt_calc>
#endif

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
    c588:	2800      	cmp	r0, #0
    c58a:	d004      	beq.n	c596 <event_master+0x14e>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
				      conn->handle), ticks_at_expire)) {
		_radio.state = STATE_STOP;
    c58c:	2304      	movs	r3, #4
    c58e:	7433      	strb	r3, [r6, #16]
		radio_disable();
    c590:	f7fb fb5c 	bl	7c4c <radio_disable>
    c594:	e010      	b.n	c5b8 <event_master+0x170>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    c596:	0003      	movs	r3, r0
    c598:	4a10      	ldr	r2, [pc, #64]	; (c5dc <event_master+0x194>)
    c59a:	0001      	movs	r1, r0
    c59c:	f7fc fd4a 	bl	9034 <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c5a0:	2302      	movs	r3, #2
    c5a2:	4398      	bics	r0, r3
    c5a4:	d008      	beq.n	c5b8 <event_master+0x170>
    c5a6:	4b06      	ldr	r3, [pc, #24]	; (c5c0 <event_master+0x178>)
    c5a8:	4a06      	ldr	r2, [pc, #24]	; (c5c4 <event_master+0x17c>)
    c5aa:	9301      	str	r3, [sp, #4]
    c5ac:	4b06      	ldr	r3, [pc, #24]	; (c5c8 <event_master+0x180>)
    c5ae:	4907      	ldr	r1, [pc, #28]	; (c5cc <event_master+0x184>)
    c5b0:	9300      	str	r3, [sp, #0]
    c5b2:	480b      	ldr	r0, [pc, #44]	; (c5e0 <event_master+0x198>)
    c5b4:	4b07      	ldr	r3, [pc, #28]	; (c5d4 <event_master+0x18c>)
    c5b6:	e767      	b.n	c488 <event_master+0x40>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_M(0);
}
    c5b8:	b007      	add	sp, #28
    c5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5bc:	20000f68 	.word	0x20000f68
    c5c0:	0001241d 	.word	0x0001241d
    c5c4:	0001246d 	.word	0x0001246d
    c5c8:	000124a8 	.word	0x000124a8
    c5cc:	000123e3 	.word	0x000123e3
    c5d0:	00013a64 	.word	0x00013a64
    c5d4:	00014a7b 	.word	0x00014a7b
    c5d8:	00013b1c 	.word	0x00013b1c
    c5dc:	00009ba9 	.word	0x00009ba9
    c5e0:	000137f7 	.word	0x000137f7

0000c5e4 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    c5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5e6:	b097      	sub	sp, #92	; 0x5c
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    c5e8:	f7fb fb4c 	bl	7c84 <radio_is_done>
    c5ec:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    c5ee:	2c00      	cmp	r4, #0
    c5f0:	d014      	beq.n	c61c <isr+0x38>
		 * and generate the profiling event at the end of the ISR.
		 */
		radio_tmr_sample();
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

		crc_ok = radio_crc_is_valid();
    c5f2:	f7fb fb6b 	bl	7ccc <radio_crc_is_valid>
    c5f6:	b2c3      	uxtb	r3, r0
    c5f8:	9311      	str	r3, [sp, #68]	; 0x44
		devmatch_ok = radio_filter_has_match();
    c5fa:	f7fb fbef 	bl	7ddc <radio_filter_has_match>
    c5fe:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    c600:	f7fb fbf4 	bl	7dec <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    c604:	f7fb fde0 	bl	81c8 <radio_ar_has_match>
    c608:	b2c6      	uxtb	r6, r0
		irkmatch_id = radio_ar_match_get();
    c60a:	f7fb fdc5 	bl	8198 <radio_ar_match_get>
    c60e:	b2c3      	uxtb	r3, r0
    c610:	930e      	str	r3, [sp, #56]	; 0x38
		rssi_ready = radio_rssi_is_ready();
    c612:	f7fb fb9f 	bl	7d54 <radio_rssi_is_ready>
    c616:	b2c3      	uxtb	r3, r0
    c618:	930a      	str	r3, [sp, #40]	; 0x28
    c61a:	e005      	b.n	c628 <isr+0x44>
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
		devmatch_id = irkmatch_id = 0xFF;
    c61c:	23ff      	movs	r3, #255	; 0xff
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    c61e:	0026      	movs	r6, r4
    c620:	0027      	movs	r7, r4
    c622:	940a      	str	r4, [sp, #40]	; 0x28
		devmatch_id = irkmatch_id = 0xFF;
    c624:	930e      	str	r3, [sp, #56]	; 0x38
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    c626:	9411      	str	r4, [sp, #68]	; 0x44
		devmatch_id = irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	radio_status_reset();
    c628:	f7fb fb1a 	bl	7c60 <radio_status_reset>
	radio_tmr_status_reset();
    c62c:	f7fb fbf4 	bl	7e18 <radio_tmr_status_reset>
	radio_filter_status_reset();
    c630:	f7fb fbcc 	bl	7dcc <radio_filter_status_reset>
	radio_ar_status_reset();
    c634:	f7fb fdb8 	bl	81a8 <radio_ar_status_reset>
	radio_rssi_status_reset();
    c638:	f7fb fb86 	bl	7d48 <radio_rssi_status_reset>

	switch (_radio.state) {
    c63c:	4da3      	ldr	r5, [pc, #652]	; (c8cc <isr+0x2e8>)
    c63e:	7c2b      	ldrb	r3, [r5, #16]
    c640:	2b05      	cmp	r3, #5
    c642:	d901      	bls.n	c648 <isr+0x64>
    c644:	f001 febe 	bl	e3c4 <isr+0x1de0>
    c648:	0018      	movs	r0, r3
    c64a:	f7f3 fda9 	bl	1a0 <__gnu_thumb1_case_uhi>
    c64e:	0f1e      	.short	0x0f1e
    c650:	000600af 	.word	0x000600af
    c654:	0ca40ca4 	.word	0x0ca40ca4
    c658:	0ca4      	.short	0x0ca4

static inline void isr_radio_state_tx(void)
{
	u32_t hcto;

	_radio.state = STATE_RX;
    c65a:	2301      	movs	r3, #1
    c65c:	742b      	strb	r3, [r5, #16]

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    c65e:	f7fb fccd 	bl	7ffc <radio_tmr_end_get>
    c662:	0004      	movs	r4, r0

	radio_tmr_tifs_set(RADIO_TIFS);
    c664:	2096      	movs	r0, #150	; 0x96
    c666:	f7fb fbe7 	bl	7e38 <radio_tmr_tifs_set>

	switch (_radio.role) {
    c66a:	7be8      	ldrb	r0, [r5, #15]
    c66c:	3801      	subs	r0, #1
    c66e:	2803      	cmp	r0, #3
    c670:	d900      	bls.n	c674 <isr+0x90>
    c672:	e094      	b.n	c79e <isr+0x1ba>
    c674:	f7f3 fd80 	bl	178 <__gnu_thumb1_case_uqi>
    c678:	4b4b2902 	.word	0x4b4b2902
	case ROLE_ADV:
		radio_switch_complete_and_tx(0, 0);
    c67c:	2100      	movs	r1, #0
    c67e:	0008      	movs	r0, r1
    c680:	f7fb fb3e 	bl	7d00 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    c684:	f7fb fb30 	bl	7ce8 <radio_pkt_scratch_get>
    c688:	f7fb fabc 	bl	7c04 <radio_pkt_rx_set>

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    c68c:	f7fb faf2 	bl	7c74 <radio_is_ready>
    c690:	2800      	cmp	r0, #0
    c692:	d154      	bne.n	c73e <isr+0x15a>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		if (ctrl_rl_enabled()) {
    c694:	f003 f98a 	bl	f9ac <ctrl_rl_enabled>
    c698:	2800      	cmp	r0, #0
    c69a:	d007      	beq.n	c6ac <isr+0xc8>
			u8_t count, *irks = ctrl_irks_get(&count);
    c69c:	ad15      	add	r5, sp, #84	; 0x54
    c69e:	0028      	movs	r0, r5
    c6a0:	f002 ffb0 	bl	f604 <ctrl_irks_get>
    c6a4:	0001      	movs	r1, r0

			radio_ar_configure(count, irks);
    c6a6:	7828      	ldrb	r0, [r5, #0]
    c6a8:	f7fb fd48 	bl	813c <radio_ar_configure>
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

		hcto += radio_rx_chain_delay_get(0, 0);
    c6ac:	2100      	movs	r1, #0
    c6ae:	0008      	movs	r0, r1
    c6b0:	f7fb fabe 	bl	7c30 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
    c6b4:	2100      	movs	r1, #0
			radio_ar_configure(count, irks);
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
    c6b6:	34c3      	adds	r4, #195	; 0xc3
    c6b8:	1824      	adds	r4, r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    c6ba:	0008      	movs	r0, r1
    c6bc:	f7fb fab4 	bl	7c28 <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    c6c0:	1a20      	subs	r0, r4, r0
    c6c2:	f7fb fc2b 	bl	7f1c <radio_tmr_hcto_configure>
    c6c6:	f001 fc7d 	bl	dfc4 <isr+0x19e0>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_RSSI */

		break;

	case ROLE_SCAN:
		radio_switch_complete_and_tx(0, 0);
    c6ca:	2100      	movs	r1, #0
    c6cc:	0008      	movs	r0, r1
    c6ce:	f7fb fb17 	bl	7d00 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    c6d2:	233e      	movs	r3, #62	; 0x3e
    c6d4:	33ff      	adds	r3, #255	; 0xff
    c6d6:	5ceb      	ldrb	r3, [r5, r3]
    c6d8:	35fc      	adds	r5, #252	; 0xfc
    c6da:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    c6dc:	009b      	lsls	r3, r3, #2
    c6de:	5898      	ldr	r0, [r3, r2]
    c6e0:	3008      	adds	r0, #8
    c6e2:	f7fb fa8f 	bl	7c04 <radio_pkt_rx_set>
				    pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    c6e6:	f7fb fac5 	bl	7c74 <radio_is_ready>
    c6ea:	1e05      	subs	r5, r0, #0
    c6ec:	d127      	bne.n	c73e <isr+0x15a>

		hcto += radio_rx_chain_delay_get(0, 0);
    c6ee:	0001      	movs	r1, r0
    c6f0:	f7fb fa9e 	bl	7c30 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    c6f4:	34c3      	adds	r4, #195	; 0xc3
    c6f6:	1824      	adds	r4, r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    c6f8:	0029      	movs	r1, r5
    c6fa:	0028      	movs	r0, r5
    c6fc:	f7fb fa94 	bl	7c28 <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    c700:	1a20      	subs	r0, r4, r0
    c702:	f7fb fc0b 	bl	7f1c <radio_tmr_hcto_configure>
		radio_rssi_measure();
    c706:	f7fb fb0b 	bl	7d20 <radio_rssi_measure>
    c70a:	f001 febe 	bl	e48a <isr+0x1ea6>
		/* fall thru */

	case ROLE_SLAVE:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
    c70e:	002e      	movs	r6, r5
    c710:	36fc      	adds	r6, #252	; 0xfc
					     _radio.conn_curr->phy_flags);
    c712:	6973      	ldr	r3, [r6, #20]
    c714:	3332      	adds	r3, #50	; 0x32
    c716:	7818      	ldrb	r0, [r3, #0]
		/* fall thru */

	case ROLE_SLAVE:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
    c718:	09c1      	lsrs	r1, r0, #7
    c71a:	0680      	lsls	r0, r0, #26
    c71c:	0f40      	lsrs	r0, r0, #29
    c71e:	f7fb faef 	bl	7d00 <radio_switch_complete_and_tx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    c722:	233e      	movs	r3, #62	; 0x3e
    c724:	33ff      	adds	r3, #255	; 0xff
    c726:	5ceb      	ldrb	r3, [r5, r3]
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    c728:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    c72a:	009b      	lsls	r3, r3, #2
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    c72c:	5899      	ldr	r1, [r3, r2]
    c72e:	6970      	ldr	r0, [r6, #20]
    c730:	3108      	adds	r1, #8
    c732:	f7fd f823 	bl	977c <rx_packet_set>
			      packet_rx[_radio.packet_rx_last]->pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    c736:	f7fb fa9d 	bl	7c74 <radio_is_ready>
    c73a:	2800      	cmp	r0, #0
    c73c:	d006      	beq.n	c74c <isr+0x168>
    c73e:	4b64      	ldr	r3, [pc, #400]	; (c8d0 <isr+0x2ec>)
    c740:	9301      	str	r3, [sp, #4]
    c742:	4b64      	ldr	r3, [pc, #400]	; (c8d4 <isr+0x2f0>)
    c744:	9300      	str	r3, [sp, #0]
    c746:	4b64      	ldr	r3, [pc, #400]	; (c8d8 <isr+0x2f4>)
    c748:	f000 fcce 	bl	d0e8 <isr+0xb04>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
    c74c:	6973      	ldr	r3, [r6, #20]
{
	u32_t hcto;

	_radio.state = STATE_RX;

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    c74e:	349b      	adds	r4, #155	; 0x9b
		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
    c750:	3332      	adds	r3, #50	; 0x32
    c752:	7818      	ldrb	r0, [r3, #0]

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    c754:	09c1      	lsrs	r1, r0, #7
    c756:	0680      	lsls	r0, r0, #26
    c758:	0f40      	lsrs	r0, r0, #29
    c75a:	f7fb fa69 	bl	7c30 <radio_rx_chain_delay_get>
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    c75e:	6973      	ldr	r3, [r6, #20]

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    c760:	1824      	adds	r4, r4, r0
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    c762:	001a      	movs	r2, r3
    c764:	3233      	adds	r2, #51	; 0x33
    c766:	7810      	ldrb	r0, [r2, #0]
	switch (phy) {
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
    c768:	2218      	movs	r2, #24
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    c76a:	0680      	lsls	r0, r0, #26
    c76c:	0f40      	lsrs	r0, r0, #29
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    c76e:	2802      	cmp	r0, #2
    c770:	d005      	beq.n	c77e <isr+0x19a>
    c772:	2804      	cmp	r0, #4
    c774:	d102      	bne.n	c77c <isr+0x198>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    c776:	3261      	adds	r2, #97	; 0x61
    c778:	32ff      	adds	r2, #255	; 0xff
    c77a:	e000      	b.n	c77e <isr+0x19a>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
    c77c:	2228      	movs	r2, #40	; 0x28
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
						 _radio.conn_curr->phy_flags);
    c77e:	3332      	adds	r3, #50	; 0x32
    c780:	7819      	ldrb	r1, [r3, #0]
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    c782:	1914      	adds	r4, r2, r4
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
    c784:	09c9      	lsrs	r1, r1, #7
    c786:	f7fb fa4f 	bl	7c28 <radio_tx_chain_delay_get>
		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_hcto_configure(hcto);
    c78a:	1a20      	subs	r0, r4, r0
    c78c:	f7fb fbc6 	bl	7f1c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    c790:	f7fb fc1e 	bl	7fd0 <radio_tmr_end_capture>
		/* TODO: use timebox for tx enqueue (instead of 1 packet
		 * that is routed, which may not be for the current connection)
		 * try to route as much tx packet in queue into corresponding
		 * connection's tx list.
		 */
		packet_tx_enqueue(1);
    c794:	2001      	movs	r0, #1
    c796:	f7fd fb7d 	bl	9e94 <packet_tx_enqueue>
    c79a:	f001 fe76 	bl	e48a <isr+0x1ea6>

		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
    c79e:	4b4c      	ldr	r3, [pc, #304]	; (c8d0 <isr+0x2ec>)
    c7a0:	9301      	str	r3, [sp, #4]
    c7a2:	4b4c      	ldr	r3, [pc, #304]	; (c8d4 <isr+0x2f0>)
    c7a4:	9300      	str	r3, [sp, #0]
    c7a6:	4b4c      	ldr	r3, [pc, #304]	; (c8d8 <isr+0x2f4>)
    c7a8:	f001 fe11 	bl	e3ce <isr+0x1dea>
				      u8_t irkmatch_ok, u8_t irkmatch_id,
				      u8_t rssi_ready)
{
	u32_t err;

	if (!((trx_done) || ((SILENT_CONNECTION) &&
    c7ac:	2c00      	cmp	r4, #0
    c7ae:	d106      	bne.n	c7be <isr+0x1da>
			     (_radio.role == ROLE_SLAVE)))) {
		_radio.state = STATE_CLOSE;
    c7b0:	2203      	movs	r2, #3
    c7b2:	4b46      	ldr	r3, [pc, #280]	; (c8cc <isr+0x2e8>)
    c7b4:	741a      	strb	r2, [r3, #16]
		radio_disable();
    c7b6:	f7fb fa49 	bl	7c4c <radio_disable>
    c7ba:	f001 fe66 	bl	e48a <isr+0x1ea6>

		return;
	}

	switch (_radio.role) {
    c7be:	7be8      	ldrb	r0, [r5, #15]
    c7c0:	3801      	subs	r0, #1
    c7c2:	2803      	cmp	r0, #3
    c7c4:	d901      	bls.n	c7ca <isr+0x1e6>
    c7c6:	f001 fbe0 	bl	df8a <isr+0x19a6>
    c7ca:	f7f3 fce9 	bl	1a0 <__gnu_thumb1_case_uhi>
    c7ce:	0004      	.short	0x0004
    c7d0:	02a50258 	.word	0x02a50258
    c7d4:	02a5      	.short	0x02a5
	case ROLE_ADV:
		if (crc_ok) {
    c7d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c7d8:	2b00      	cmp	r3, #0
    c7da:	d0e9      	beq.n	c7b0 <isr+0x1cc>
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
    c7dc:	240f      	movs	r4, #15
    c7de:	2e00      	cmp	r6, #0
    c7e0:	d003      	beq.n	c7ea <isr+0x206>
    c7e2:	980e      	ldr	r0, [sp, #56]	; 0x38
    c7e4:	f002 ff18 	bl	f618 <ctrl_rl_idx>
    c7e8:	0004      	movs	r4, r0
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    c7ea:	f7fb fa7d 	bl	7ce8 <radio_pkt_scratch_get>
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];
    c7ee:	002b      	movs	r3, r5
    c7f0:	3375      	adds	r3, #117	; 0x75
    c7f2:	781b      	ldrb	r3, [r3, #0]
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    c7f4:	0006      	movs	r6, r0
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];
    c7f6:	930a      	str	r3, [sp, #40]	; 0x28

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    c7f8:	230f      	movs	r3, #15
    c7fa:	7800      	ldrb	r0, [r0, #0]
    c7fc:	4003      	ands	r3, r0
    c7fe:	2b03      	cmp	r3, #3
    c800:	d11b      	bne.n	c83a <isr+0x256>
    c802:	7873      	ldrb	r3, [r6, #1]
    c804:	2b0c      	cmp	r3, #12
    c806:	d118      	bne.n	c83a <isr+0x256>

static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    c808:	1dab      	adds	r3, r5, #6
    c80a:	7fdb      	ldrb	r3, [r3, #31]
		 ctrl_rl_allowed(pdu->tx_addr,
				 pdu->payload.scan_req.scan_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    c80c:	065b      	lsls	r3, r3, #25
    c80e:	d504      	bpl.n	c81a <isr+0x236>
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
		 ctrl_rl_allowed(pdu->tx_addr,
				 pdu->payload.scan_req.scan_addr)) ||
    c810:	2f00      	cmp	r7, #0
    c812:	d001      	beq.n	c818 <isr+0x234>
    c814:	f001 fe2c 	bl	e470 <isr+0x1e8c>
    c818:	e008      	b.n	c82c <isr+0x248>
static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
		 ctrl_rl_allowed(pdu->tx_addr,
    c81a:	0640      	lsls	r0, r0, #25
				 pdu->payload.scan_req.scan_addr)) ||
    c81c:	1cb1      	adds	r1, r6, #2
static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
		 ctrl_rl_allowed(pdu->tx_addr,
    c81e:	0fc0      	lsrs	r0, r0, #31
    c820:	f003 f88c 	bl	f93c <ctrl_rl_allowed>

static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    c824:	2800      	cmp	r0, #0
    c826:	d0f3      	beq.n	c810 <isr+0x22c>
    c828:	f001 fe22 	bl	e470 <isr+0x1e8c>
		 ctrl_rl_allowed(pdu->tx_addr,
				 pdu->payload.scan_req.scan_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    c82c:	0020      	movs	r0, r4
    c82e:	f002 ff39 	bl	f6a4 <ctrl_irk_whitelisted>
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
    c832:	2800      	cmp	r0, #0
    c834:	d001      	beq.n	c83a <isr+0x256>
    c836:	f001 fe1b 	bl	e470 <isr+0x1e8c>

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    c83a:	230f      	movs	r3, #15
    c83c:	7830      	ldrb	r0, [r6, #0]
    c83e:	4003      	ands	r3, r0
    c840:	2b05      	cmp	r3, #5
    c842:	d1b5      	bne.n	c7b0 <isr+0x1cc>
    c844:	7873      	ldrb	r3, [r6, #1]
    c846:	2b22      	cmp	r3, #34	; 0x22
    c848:	d1b2      	bne.n	c7b0 <isr+0x1cc>

static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    c84a:	1dab      	adds	r3, r5, #6
    c84c:	7fdb      	ldrb	r3, [r3, #31]
    c84e:	099b      	lsrs	r3, r3, #6
		 ctrl_rl_allowed(ci->tx_addr,
				 ci->payload.connect_ind.init_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    c850:	079b      	lsls	r3, r3, #30
    c852:	d502      	bpl.n	c85a <isr+0x276>
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
				 ci->payload.connect_ind.init_addr)) ||
    c854:	2f00      	cmp	r7, #0
    c856:	d107      	bne.n	c868 <isr+0x284>
    c858:	e012      	b.n	c880 <isr+0x29c>
static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
    c85a:	0640      	lsls	r0, r0, #25
				 ci->payload.connect_ind.init_addr)) ||
    c85c:	1cb1      	adds	r1, r6, #2
static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
    c85e:	0fc0      	lsrs	r0, r0, #31
    c860:	f003 f86c 	bl	f93c <ctrl_rl_allowed>

static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    c864:	2800      	cmp	r0, #0
    c866:	d0f5      	beq.n	c854 <isr+0x270>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    c868:	2327      	movs	r3, #39	; 0x27
    c86a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c86c:	4353      	muls	r3, r2
    c86e:	3320      	adds	r3, #32
    c870:	18eb      	adds	r3, r5, r3

static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    c872:	79da      	ldrb	r2, [r3, #7]
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    c874:	9311      	str	r3, [sp, #68]	; 0x44

static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    c876:	230f      	movs	r3, #15
    c878:	4013      	ands	r3, r2
    c87a:	2b01      	cmp	r3, #1
    c87c:	d13b      	bne.n	c8f6 <isr+0x312>
    c87e:	e005      	b.n	c88c <isr+0x2a8>
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
				 ci->payload.connect_ind.init_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    c880:	0020      	movs	r0, r4
    c882:	f002 ff0f 	bl	f6a4 <ctrl_irk_whitelisted>
    c886:	2800      	cmp	r0, #0
    c888:	d1ee      	bne.n	c868 <isr+0x284>
    c88a:	e791      	b.n	c7b0 <isr+0x1cc>
static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		((adv->tx_addr == ci->rx_addr) &&
    c88c:	7833      	ldrb	r3, [r6, #0]
    c88e:	0651      	lsls	r1, r2, #25

static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    c890:	0fc9      	lsrs	r1, r1, #31
    c892:	09d8      	lsrs	r0, r3, #7
    c894:	4281      	cmp	r1, r0
    c896:	d18b      	bne.n	c7b0 <isr+0x1cc>
		((adv->tx_addr == ci->rx_addr) &&
		 (adv->rx_addr == ci->tx_addr) &&
    c898:	065b      	lsls	r3, r3, #25
static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		((adv->tx_addr == ci->rx_addr) &&
    c89a:	09d2      	lsrs	r2, r2, #7
    c89c:	0fdb      	lsrs	r3, r3, #31
    c89e:	429a      	cmp	r2, r3
    c8a0:	d186      	bne.n	c7b0 <isr+0x1cc>
		 (adv->rx_addr == ci->tx_addr) &&
		 !memcmp(adv->payload.direct_ind.adv_addr,
    c8a2:	0031      	movs	r1, r6
    c8a4:	9811      	ldr	r0, [sp, #68]	; 0x44
    c8a6:	2206      	movs	r2, #6
    c8a8:	3108      	adds	r1, #8
    c8aa:	3009      	adds	r0, #9
    c8ac:	f7f4 f9ba 	bl	c24 <memcmp>
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		((adv->tx_addr == ci->rx_addr) &&
		 (adv->rx_addr == ci->tx_addr) &&
    c8b0:	2800      	cmp	r0, #0
    c8b2:	d000      	beq.n	c8b6 <isr+0x2d2>
    c8b4:	e77c      	b.n	c7b0 <isr+0x1cc>

static inline bool isr_adv_tgta_check(struct pdu_adv *adv, struct pdu_adv *ci,
				      u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (rl_idx != RL_IDX_NONE) {
    c8b6:	2c0f      	cmp	r4, #15
    c8b8:	d010      	beq.n	c8dc <isr+0x2f8>
		return rl_idx == _radio.advertiser.rl_idx;
    c8ba:	3507      	adds	r5, #7
    c8bc:	7fe8      	ldrb	r0, [r5, #31]
    c8be:	0700      	lsls	r0, r0, #28
    c8c0:	0f00      	lsrs	r0, r0, #28
    c8c2:	1b00      	subs	r0, r0, r4
    c8c4:	4243      	negs	r3, r0
    c8c6:	4143      	adcs	r3, r0
    c8c8:	b2d8      	uxtb	r0, r3
    c8ca:	e011      	b.n	c8f0 <isr+0x30c>
    c8cc:	20000f68 	.word	0x20000f68
    c8d0:	0001241d 	.word	0x0001241d
    c8d4:	000124a8 	.word	0x000124a8
    c8d8:	00014cca 	.word	0x00014cca
	}
#endif
	return !memcmp(adv->payload.direct_ind.tgt_addr,
    c8dc:	9811      	ldr	r0, [sp, #68]	; 0x44
		       ci->payload.connect_ind.init_addr, BDADDR_SIZE);
    c8de:	1cb1      	adds	r1, r6, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (rl_idx != RL_IDX_NONE) {
		return rl_idx == _radio.advertiser.rl_idx;
	}
#endif
	return !memcmp(adv->payload.direct_ind.tgt_addr,
    c8e0:	2206      	movs	r2, #6
    c8e2:	300f      	adds	r0, #15
    c8e4:	f7f4 f99e 	bl	c24 <memcmp>
    c8e8:	0003      	movs	r3, r0
    c8ea:	4258      	negs	r0, r3
    c8ec:	4158      	adcs	r0, r3
    c8ee:	b2c0      	uxtb	r0, r0
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
    c8f0:	2800      	cmp	r0, #0
    c8f2:	d100      	bne.n	c8f6 <isr+0x312>
    c8f4:	e75c      	b.n	c7b0 <isr+0x1cc>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, rl_idx) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    c8f6:	23bf      	movs	r3, #191	; 0xbf
    c8f8:	4ce8      	ldr	r4, [pc, #928]	; (cc9c <isr+0x6b8>)
    c8fa:	005b      	lsls	r3, r3, #1
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, rl_idx) &&
    c8fc:	5ce3      	ldrb	r3, [r4, r3]
    c8fe:	2b00      	cmp	r3, #0
    c900:	d008      	beq.n	c914 <isr+0x330>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    c902:	23be      	movs	r3, #190	; 0xbe
    c904:	227e      	movs	r2, #126	; 0x7e
    c906:	005b      	lsls	r3, r3, #1
    c908:	32ff      	adds	r2, #255	; 0xff
    c90a:	5ce3      	ldrb	r3, [r4, r3]
    c90c:	5ca2      	ldrb	r2, [r4, r2]
    c90e:	429a      	cmp	r2, r3
    c910:	d000      	beq.n	c914 <isr+0x330>
    c912:	e74d      	b.n	c7b0 <isr+0x1cc>
		   (_radio.advertiser.conn)) {
    c914:	0025      	movs	r5, r4
    c916:	35c8      	adds	r5, #200	; 0xc8

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, rl_idx) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    c918:	682b      	ldr	r3, [r5, #0]
    c91a:	2b00      	cmp	r3, #0
    c91c:	d100      	bne.n	c920 <isr+0x33c>
    c91e:	e747      	b.n	c7b0 <isr+0x1cc>
		u32_t conn_offset_us;
		u32_t rx_ready_delay;
		u32_t ticker_status;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    c920:	2004      	movs	r0, #4
    c922:	f7fc fc35 	bl	9190 <packet_rx_reserve_get>
    c926:	900a      	str	r0, [sp, #40]	; 0x28
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    c928:	2800      	cmp	r0, #0
    c92a:	d100      	bne.n	c92e <isr+0x34a>
    c92c:	e740      	b.n	c7b0 <isr+0x1cc>
			return 1;
		}

		_radio.state = STATE_STOP;
    c92e:	2304      	movs	r3, #4
    c930:	7423      	strb	r3, [r4, #16]
		radio_disable();
    c932:	f7fb f98b 	bl	7c4c <radio_disable>
		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c936:	228c      	movs	r2, #140	; 0x8c
		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    c938:	2300      	movs	r3, #0

		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
    c93a:	682f      	ldr	r7, [r5, #0]
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c93c:	34fc      	adds	r4, #252	; 0xfc
    c93e:	68a1      	ldr	r1, [r4, #8]
    c940:	0052      	lsls	r2, r2, #1
    c942:	0038      	movs	r0, r7
		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    c944:	602b      	str	r3, [r5, #0]

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c946:	f7fa ffcb 	bl	78e0 <mem_index_get>
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    c94a:	0031      	movs	r1, r6
		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    c94c:	8438      	strh	r0, [r7, #32]
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    c94e:	0038      	movs	r0, r7
    c950:	2203      	movs	r2, #3
    c952:	3112      	adds	r1, #18
    c954:	3014      	adds	r0, #20
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    c956:	003d      	movs	r5, r7
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    c958:	f7f4 f979 	bl	c4e <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    c95c:	0031      	movs	r1, r6
    c95e:	3510      	adds	r5, #16
    c960:	2204      	movs	r2, #4
    c962:	310e      	adds	r1, #14
    c964:	0028      	movs	r0, r5
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    c966:	003c      	movs	r4, r7
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    c968:	f7f4 f971 	bl	c4e <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    c96c:	0031      	movs	r1, r6
    c96e:	3417      	adds	r4, #23
    c970:	2205      	movs	r2, #5
    c972:	311e      	adds	r1, #30
    c974:	0020      	movs	r0, r4
    c976:	f7f4 f96a 	bl	c4e <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    c97a:	2105      	movs	r1, #5
    c97c:	0020      	movs	r0, r4
    c97e:	f7fa fff7 	bl	7970 <util_ones_count_get>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    c982:	223f      	movs	r2, #63	; 0x3f
    c984:	7f3b      	ldrb	r3, [r7, #28]
    c986:	4010      	ands	r0, r2
    c988:	4393      	bics	r3, r2
    c98a:	4318      	orrs	r0, r3
    c98c:	7738      	strb	r0, [r7, #28]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    c98e:	0038      	movs	r0, r7
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    c990:	1d33      	adds	r3, r6, #4
    c992:	7fdb      	ldrb	r3, [r3, #31]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    c994:	4cc2      	ldr	r4, [pc, #776]	; (cca0 <isr+0x6bc>)
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    c996:	06db      	lsls	r3, r3, #27
    c998:	0edb      	lsrs	r3, r3, #27
    c99a:	77bb      	strb	r3, [r7, #30]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    c99c:	7e73      	ldrb	r3, [r6, #25]
    c99e:	7e32      	ldrb	r2, [r6, #24]
    c9a0:	021b      	lsls	r3, r3, #8
    c9a2:	4313      	orrs	r3, r2
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
    c9a4:	84bb      	strh	r3, [r7, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
    c9a6:	7e73      	ldrb	r3, [r6, #25]
    c9a8:	7e32      	ldrb	r2, [r6, #24]
    c9aa:	021b      	lsls	r3, r3, #8
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    c9ac:	4313      	orrs	r3, r2
    c9ae:	4363      	muls	r3, r4
    c9b0:	930c      	str	r3, [sp, #48]	; 0x30
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
    c9b2:	7ef3      	ldrb	r3, [r6, #27]
    c9b4:	7eb2      	ldrb	r2, [r6, #26]
    c9b6:	021b      	lsls	r3, r3, #8
    c9b8:	4313      	orrs	r3, r2
    c9ba:	84fb      	strh	r3, [r7, #38]	; 0x26
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    c9bc:	2204      	movs	r2, #4
    c9be:	0029      	movs	r1, r5
    c9c0:	3060      	adds	r0, #96	; 0x60
    c9c2:	f7f4 f944 	bl	c4e <memcpy>
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
    c9c6:	7f70      	ldrb	r0, [r6, #29]
    c9c8:	7f33      	ldrb	r3, [r6, #28]
    c9ca:	0200      	lsls	r0, r0, #8
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    c9cc:	4318      	orrs	r0, r3
    c9ce:	4bb5      	ldr	r3, [pc, #724]	; (cca4 <isr+0x6c0>)
    c9d0:	990c      	ldr	r1, [sp, #48]	; 0x30
    c9d2:	4358      	muls	r0, r3
    c9d4:	f7f3 fbee 	bl	1b4 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    c9d8:	990c      	ldr	r1, [sp, #48]	; 0x30
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    c9da:	86b8      	strh	r0, [r7, #52]	; 0x34
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    c9dc:	48b2      	ldr	r0, [pc, #712]	; (cca8 <isr+0x6c4>)
    c9de:	f7f3 fbe9 	bl	1b4 <__aeabi_uidiv>
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c9e2:	990c      	ldr	r1, [sp, #48]	; 0x30
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    c9e4:	8738      	strh	r0, [r7, #56]	; 0x38
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c9e6:	48b1      	ldr	r0, [pc, #708]	; (ccac <isr+0x6c8>)
    c9e8:	f7f3 fbe4 	bl	1b4 <__aeabi_uidiv>
    c9ec:	1cbb      	adds	r3, r7, #2
    c9ee:	b282      	uxth	r2, r0
    c9f0:	87da      	strh	r2, [r3, #62]	; 0x3e
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c9f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    c9f4:	9412      	str	r4, [sp, #72]	; 0x48
    c9f6:	1d99      	adds	r1, r3, #6
    c9f8:	428a      	cmp	r2, r1
    c9fa:	dd02      	ble.n	ca02 <isr+0x41e>
    c9fc:	1ad3      	subs	r3, r2, r3
    c9fe:	3b06      	subs	r3, #6
    ca00:	b29a      	uxth	r2, r3
    ca02:	87ba      	strh	r2, [r7, #60]	; 0x3c
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    ca04:	8c3b      	ldrh	r3, [r7, #32]
    ca06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ca08:	2406      	movs	r4, #6
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    ca0a:	80d3      	strh	r3, [r2, #6]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    ca0c:	2300      	movs	r3, #0
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ca0e:	0010      	movs	r0, r2

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    ca10:	72d3      	strb	r3, [r2, #11]
		radio_le_conn_cmplt->role = 0x01;
    ca12:	3301      	adds	r3, #1
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ca14:	7114      	strb	r4, [r2, #4]
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
    ca16:	7313      	strb	r3, [r2, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    ca18:	7833      	ldrb	r3, [r6, #0]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    ca1a:	0015      	movs	r5, r2
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    ca1c:	065b      	lsls	r3, r3, #25
    ca1e:	0fdb      	lsrs	r3, r3, #31
    ca20:	7353      	strb	r3, [r2, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
    ca22:	1cb1      	adds	r1, r6, #2
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ca24:	0022      	movs	r2, r4
    ca26:	300e      	adds	r0, #14
    ca28:	f7f4 f911 	bl	c4e <memcpy>
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ca2c:	0031      	movs	r1, r6
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ca2e:	7833      	ldrb	r3, [r6, #0]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ca30:	980a      	ldr	r0, [sp, #40]	; 0x28
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    ca32:	09db      	lsrs	r3, r3, #7
    ca34:	752b      	strb	r3, [r5, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ca36:	3108      	adds	r1, #8
    ca38:	0022      	movs	r2, r4
    ca3a:	3015      	adds	r0, #21
    ca3c:	f7f4 f907 	bl	c4e <memcpy>
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    ca40:	2238      	movs	r2, #56	; 0x38
    ca42:	466b      	mov	r3, sp
    ca44:	189b      	adds	r3, r3, r2
    ca46:	781b      	ldrb	r3, [r3, #0]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    ca48:	350b      	adds	r5, #11
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    ca4a:	742b      	strb	r3, [r5, #16]
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    ca4c:	7e73      	ldrb	r3, [r6, #25]
    ca4e:	7e32      	ldrb	r2, [r6, #24]
    ca50:	021b      	lsls	r3, r3, #8
    ca52:	4313      	orrs	r3, r2
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
    ca54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ca56:	7713      	strb	r3, [r2, #28]
    ca58:	0a1b      	lsrs	r3, r3, #8
    ca5a:	7753      	strb	r3, [r2, #29]
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
    ca5c:	7ef3      	ldrb	r3, [r6, #27]
    ca5e:	7eb2      	ldrb	r2, [r6, #26]
    ca60:	021b      	lsls	r3, r3, #8
    ca62:	4313      	orrs	r3, r2
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
    ca64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ca66:	7793      	strb	r3, [r2, #30]
    ca68:	0a1b      	lsrs	r3, r3, #8
    ca6a:	77d3      	strb	r3, [r2, #31]
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
    ca6c:	7f73      	ldrb	r3, [r6, #29]
    ca6e:	7f32      	ldrb	r2, [r6, #28]
    ca70:	021b      	lsls	r3, r3, #8
    ca72:	4313      	orrs	r3, r2
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
    ca74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ca76:	3220      	adds	r2, #32
    ca78:	7013      	strb	r3, [r2, #0]
    ca7a:	0a1b      	lsrs	r3, r3, #8
    ca7c:	7053      	strb	r3, [r2, #1]
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
			pdu_adv->payload.connect_ind.lldata.sca;
    ca7e:	1d33      	adds	r3, r6, #4
    ca80:	7fdb      	ldrb	r3, [r3, #31]
    ca82:	095b      	lsrs	r3, r3, #5
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
    ca84:	75eb      	strb	r3, [r5, #23]
			pdu_adv->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    ca86:	8c38      	ldrh	r0, [r7, #32]
    ca88:	f7fc ff9e 	bl	99c8 <rx_fc_lock>
		packet_rx_enqueue();
    ca8c:	f7fc ff4e 	bl	992c <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    ca90:	2003      	movs	r0, #3
    ca92:	f7fc fb7d 	bl	9190 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    ca96:	2800      	cmp	r0, #0
    ca98:	d106      	bne.n	caa8 <isr+0x4c4>
    ca9a:	4b85      	ldr	r3, [pc, #532]	; (ccb0 <isr+0x6cc>)
    ca9c:	9301      	str	r3, [sp, #4]
    ca9e:	4b85      	ldr	r3, [pc, #532]	; (ccb4 <isr+0x6d0>)
    caa0:	9300      	str	r3, [sp, #0]
    caa2:	4b85      	ldr	r3, [pc, #532]	; (ccb8 <isr+0x6d4>)
    caa4:	f001 fc0e 	bl	e2c4 <isr+0x1ce0>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    caa8:	8c3b      	ldrh	r3, [r7, #32]
    caaa:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    caac:	230b      	movs	r3, #11
    caae:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv->chan_sel) {
    cab0:	7832      	ldrb	r2, [r6, #0]
    cab2:	3315      	adds	r3, #21
    cab4:	4013      	ands	r3, r2
    cab6:	d00e      	beq.n	cad6 <isr+0x4f2>
				u16_t aa_ls =
    cab8:	7c7b      	ldrb	r3, [r7, #17]
    caba:	7c3a      	ldrb	r2, [r7, #16]
    cabc:	021b      	lsls	r3, r3, #8
    cabe:	431a      	orrs	r2, r3
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    cac0:	7cfb      	ldrb	r3, [r7, #19]
    cac2:	7cb9      	ldrb	r1, [r7, #18]
    cac4:	021b      	lsls	r3, r3, #8
    cac6:	430b      	orrs	r3, r1
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    cac8:	2440      	movs	r4, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    caca:	4053      	eors	r3, r2
    cacc:	83fb      	strh	r3, [r7, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    cace:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    cad0:	7f39      	ldrb	r1, [r7, #28]
    cad2:	4321      	orrs	r1, r4
    cad4:	7739      	strb	r1, [r7, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    cad6:	72c3      	strb	r3, [r0, #11]
			}

			packet_rx_enqueue();
    cad8:	f7fc ff28 	bl	992c <packet_rx_enqueue>
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
    cadc:	0039      	movs	r1, r7
    cade:	240e      	movs	r4, #14
    cae0:	1d33      	adds	r3, r6, #4
    cae2:	7fdb      	ldrb	r3, [r3, #31]
    cae4:	3144      	adds	r1, #68	; 0x44
    cae6:	780a      	ldrb	r2, [r1, #0]
    cae8:	095b      	lsrs	r3, r3, #5
    caea:	0058      	lsls	r0, r3, #1
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    caec:	4d6b      	ldr	r5, [pc, #428]	; (cc9c <isr+0x6b8>)

			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
    caee:	43a2      	bics	r2, r4
    caf0:	4302      	orrs	r2, r0
    caf2:	700a      	strb	r2, [r1, #0]
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    caf4:	002a      	movs	r2, r5
    caf6:	32ff      	adds	r2, #255	; 0xff
    caf8:	7f52      	ldrb	r2, [r2, #29]
    cafa:	4970      	ldr	r1, [pc, #448]	; (ccbc <isr+0x6d8>)
    cafc:	0052      	lsls	r2, r2, #1
			   gc_lookup_ppm[conn->role.slave.sca]) *
    cafe:	005b      	lsls	r3, r3, #1
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    cb00:	5a50      	ldrh	r0, [r2, r1]
    cb02:	5a5b      	ldrh	r3, [r3, r1]
    cb04:	496e      	ldr	r1, [pc, #440]	; (ccc0 <isr+0x6dc>)
    cb06:	18c0      	adds	r0, r0, r3
    cb08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    cb0a:	2400      	movs	r4, #0
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    cb0c:	4358      	muls	r0, r3
    cb0e:	4b6d      	ldr	r3, [pc, #436]	; (ccc4 <isr+0x6e0>)
    cb10:	18c0      	adds	r0, r0, r3
    cb12:	f7f3 fb4f 	bl	1b4 <__aeabi_uidiv>
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    cb16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    cb18:	64b8      	str	r0, [r7, #72]	; 0x48
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    cb1a:	085b      	lsrs	r3, r3, #1
    cb1c:	3b96      	subs	r3, #150	; 0x96
    cb1e:	64fb      	str	r3, [r7, #76]	; 0x4c
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    cb20:	7d73      	ldrb	r3, [r6, #21]
    cb22:	9a12      	ldr	r2, [sp, #72]	; 0x48
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    cb24:	65bc      	str	r4, [r7, #88]	; 0x58
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    cb26:	4353      	muls	r3, r2
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    cb28:	0020      	movs	r0, r4
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    cb2a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    cb2c:	f7fb f87e 	bl	7c2c <radio_rx_ready_delay_get>

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    cb30:	4a65      	ldr	r2, [pc, #404]	; (ccc8 <isr+0x6e4>)
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    cb32:	900e      	str	r0, [sp, #56]	; 0x38

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    cb34:	2300      	movs	r3, #0
    cb36:	1880      	adds	r0, r0, r2
    cb38:	0021      	movs	r1, r4
    cb3a:	4a64      	ldr	r2, [pc, #400]	; (cccc <isr+0x6e8>)
    cb3c:	f7f3 fcd0 	bl	4e0 <__aeabi_lmul>
    cb40:	4a63      	ldr	r2, [pc, #396]	; (ccd0 <isr+0x6ec>)
    cb42:	2307      	movs	r3, #7
    cb44:	f7f3 fcac 	bl	4a0 <__aeabi_uldivmod>
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    cb48:	23c0      	movs	r3, #192	; 0xc0
    cb4a:	005b      	lsls	r3, r3, #1
    cb4c:	58ea      	ldr	r2, [r5, r3]
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    cb4e:	0200      	lsls	r0, r0, #8
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    cb50:	3b5a      	subs	r3, #90	; 0x5a
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    cb52:	0a00      	lsrs	r0, r0, #8
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    cb54:	3bff      	subs	r3, #255	; 0xff
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    cb56:	60f8      	str	r0, [r7, #12]
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    cb58:	607a      	str	r2, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    cb5a:	603b      	str	r3, [r7, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    cb5c:	60bc      	str	r4, [r7, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    cb5e:	920a      	str	r2, [sp, #40]	; 0x28
    cb60:	429a      	cmp	r2, r3
    cb62:	d200      	bcs.n	cb66 <isr+0x582>
    cb64:	930a      	str	r3, [sp, #40]	; 0x28
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us -=
    cb66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb68:	6cba      	ldr	r2, [r7, #72]	; 0x48
    cb6a:	2500      	movs	r5, #0
    cb6c:	1a9b      	subs	r3, r3, r2
    cb6e:	930c      	str	r3, [sp, #48]	; 0x30
			conn->role.slave.window_widening_periodic_us;

		conn_offset_us = radio_tmr_end_get();
    cb70:	f7fb fa44 	bl	7ffc <radio_tmr_end_get>
    cb74:	9013      	str	r0, [sp, #76]	; 0x4c
		conn_offset_us +=
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
    cb76:	7df3      	ldrb	r3, [r6, #23]
    cb78:	7db2      	ldrb	r2, [r6, #22]
    cb7a:	021b      	lsls	r3, r3, #8
    cb7c:	4313      	orrs	r3, r2
    cb7e:	001c      	movs	r4, r3
    cb80:	9b12      	ldr	r3, [sp, #72]	; 0x48
			 1) * 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    cb82:	0029      	movs	r1, r5
    cb84:	3401      	adds	r4, #1
    cb86:	0028      	movs	r0, r5
    cb88:	435c      	muls	r4, r3
    cb8a:	f7fb f84d 	bl	7c28 <radio_tx_chain_delay_get>
    cb8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cb90:	3c20      	subs	r4, #32
    cb92:	191c      	adds	r4, r3, r4
		conn_offset_us -= rx_ready_delay;
		conn_offset_us -= RADIO_TICKER_JITTER_US << 1;
    cb94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb96:	1a20      	subs	r0, r4, r0
    cb98:	1ac3      	subs	r3, r0, r3
    cb9a:	930e      	str	r3, [sp, #56]	; 0x38

		/* Stop Advertiser */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cb9c:	4b4d      	ldr	r3, [pc, #308]	; (ccd4 <isr+0x6f0>)
    cb9e:	2205      	movs	r2, #5
    cba0:	9300      	str	r3, [sp, #0]
    cba2:	0029      	movs	r1, r5
    cba4:	4b4c      	ldr	r3, [pc, #304]	; (ccd8 <isr+0x6f4>)
    cba6:	0028      	movs	r0, r5
    cba8:	f7fc f9e4 	bl	8f74 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_ADV,
					    ticker_stop_adv_assert,
					    (void *)__LINE__);
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    cbac:	494b      	ldr	r1, [pc, #300]	; (ccdc <isr+0x6f8>)
    cbae:	f7fc ff45 	bl	9a3c <ticker_stop_adv_assert>

		/* Stop Direct Adv Stopper */
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    cbb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cbb4:	79da      	ldrb	r2, [r3, #7]
    cbb6:	230f      	movs	r3, #15
    cbb8:	4013      	ands	r3, r2
    cbba:	2b01      	cmp	r3, #1
    cbbc:	d106      	bne.n	cbcc <isr+0x5e8>
			/* Advertiser stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cbbe:	9500      	str	r5, [sp, #0]
    cbc0:	002b      	movs	r3, r5
    cbc2:	2203      	movs	r2, #3
    cbc4:	0029      	movs	r1, r5
    cbc6:	0028      	movs	r0, r5
    cbc8:	f7fc f9d4 	bl	8f74 <ticker_stop>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(conn_offset_us),
		     TICKER_US_TO_TICKS(conn_interval_us),
    cbcc:	2400      	movs	r4, #0
    cbce:	980c      	ldr	r0, [sp, #48]	; 0x30
    cbd0:	4a3e      	ldr	r2, [pc, #248]	; (cccc <isr+0x6e8>)
    cbd2:	2300      	movs	r3, #0
    cbd4:	0021      	movs	r1, r4
    cbd6:	f7f3 fc83 	bl	4e0 <__aeabi_lmul>
    cbda:	4a3d      	ldr	r2, [pc, #244]	; (ccd0 <isr+0x6ec>)
    cbdc:	2307      	movs	r3, #7
    cbde:	900c      	str	r0, [sp, #48]	; 0x30
    cbe0:	910d      	str	r1, [sp, #52]	; 0x34
    cbe2:	f7f3 fc5d 	bl	4a0 <__aeabi_uldivmod>

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
    cbe6:	4b2d      	ldr	r3, [pc, #180]	; (cc9c <isr+0x6b8>)
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_ADV_STOP, NULL, NULL);
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    cbe8:	8c3e      	ldrh	r6, [r7, #32]
    cbea:	685d      	ldr	r5, [r3, #4]
    cbec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbee:	9706      	str	r7, [sp, #24]
    cbf0:	1aed      	subs	r5, r5, r3
    cbf2:	4b3b      	ldr	r3, [pc, #236]	; (cce0 <isr+0x6fc>)
    cbf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cbf6:	9308      	str	r3, [sp, #32]
    cbf8:	4b3a      	ldr	r3, [pc, #232]	; (cce4 <isr+0x700>)
    cbfa:	0021      	movs	r1, r4
    cbfc:	9307      	str	r3, [sp, #28]
    cbfe:	4b3a      	ldr	r3, [pc, #232]	; (cce8 <isr+0x704>)
    cc00:	3607      	adds	r6, #7
    cc02:	9305      	str	r3, [sp, #20]
    cc04:	68fb      	ldr	r3, [r7, #12]
    cc06:	0207      	lsls	r7, r0, #8
    cc08:	189b      	adds	r3, r3, r2
    cc0a:	b29b      	uxth	r3, r3
    cc0c:	0a3f      	lsrs	r7, r7, #8
    cc0e:	9304      	str	r3, [sp, #16]
    cc10:	4a2f      	ldr	r2, [pc, #188]	; (ccd0 <isr+0x6ec>)
    cc12:	2307      	movs	r3, #7
    cc14:	0038      	movs	r0, r7
    cc16:	9403      	str	r4, [sp, #12]
    cc18:	f7f3 fc62 	bl	4e0 <__aeabi_lmul>
    cc1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cc20:	1a12      	subs	r2, r2, r0
    cc22:	418b      	sbcs	r3, r1
    cc24:	0010      	movs	r0, r2
    cc26:	22fa      	movs	r2, #250	; 0xfa
    cc28:	0019      	movs	r1, r3
    cc2a:	0092      	lsls	r2, r2, #2
    cc2c:	2300      	movs	r3, #0
    cc2e:	f7f3 fc37 	bl	4a0 <__aeabi_uldivmod>
    cc32:	4a26      	ldr	r2, [pc, #152]	; (cccc <isr+0x6e8>)
    cc34:	9002      	str	r0, [sp, #8]
    cc36:	2300      	movs	r3, #0
    cc38:	980e      	ldr	r0, [sp, #56]	; 0x38
    cc3a:	0021      	movs	r1, r4
    cc3c:	9701      	str	r7, [sp, #4]
    cc3e:	f7f3 fc4f 	bl	4e0 <__aeabi_lmul>
    cc42:	4a23      	ldr	r2, [pc, #140]	; (ccd0 <isr+0x6ec>)
    cc44:	2307      	movs	r3, #7
    cc46:	f7f3 fc2b 	bl	4a0 <__aeabi_uldivmod>
    cc4a:	0200      	lsls	r0, r0, #8
    cc4c:	0a00      	lsrs	r0, r0, #8
    cc4e:	b2f6      	uxtb	r6, r6
    cc50:	9000      	str	r0, [sp, #0]
    cc52:	002b      	movs	r3, r5
    cc54:	0032      	movs	r2, r6
    cc56:	0021      	movs	r1, r4
    cc58:	0020      	movs	r0, r4
    cc5a:	f7fc f8f3 	bl	8e44 <ticker_start>
		     TICKER_US_TO_TICKS(conn_interval_us),
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
		     (ticks_slot_offset + conn->hdr.ticks_slot),
		     event_slave_prepare, conn, ticker_success_assert,
		     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cc5e:	2302      	movs	r3, #2
    cc60:	4398      	bics	r0, r3
    cc62:	42a0      	cmp	r0, r4
    cc64:	d101      	bne.n	cc6a <isr+0x686>
    cc66:	f001 fc10 	bl	e48a <isr+0x1ea6>
    cc6a:	4b11      	ldr	r3, [pc, #68]	; (ccb0 <isr+0x6cc>)
    cc6c:	4a1f      	ldr	r2, [pc, #124]	; (ccec <isr+0x708>)
    cc6e:	9301      	str	r3, [sp, #4]
    cc70:	4b10      	ldr	r3, [pc, #64]	; (ccb4 <isr+0x6d0>)
    cc72:	491f      	ldr	r1, [pc, #124]	; (ccf0 <isr+0x70c>)
    cc74:	9300      	str	r3, [sp, #0]
    cc76:	481f      	ldr	r0, [pc, #124]	; (ccf4 <isr+0x710>)
    cc78:	4b0f      	ldr	r3, [pc, #60]	; (ccb8 <isr+0x6d4>)
    cc7a:	f001 fbab 	bl	e3d4 <isr+0x1df0>
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    cc7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc80:	2b00      	cmp	r3, #0
    cc82:	d139      	bne.n	ccf8 <isr+0x714>
			err = isr_rx_scan(irkmatch_id, rssi_ready);
		} else {
			err = 1;
		}
		if (err) {
			_radio.state = STATE_CLOSE;
    cc84:	2303      	movs	r3, #3
    cc86:	742b      	strb	r3, [r5, #16]
			radio_disable();
    cc88:	f7fa ffe0 	bl	7c4c <radio_disable>
			/* switch scanner state to idle */
			_radio.scanner.state = 0;
    cc8c:	2202      	movs	r2, #2
    cc8e:	35dc      	adds	r5, #220	; 0xdc
    cc90:	782b      	ldrb	r3, [r5, #0]
    cc92:	4393      	bics	r3, r2
    cc94:	702b      	strb	r3, [r5, #0]
    cc96:	f001 fbf8 	bl	e48a <isr+0x1ea6>
    cc9a:	46c0      	nop			; (mov r8, r8)
    cc9c:	20000f68 	.word	0x20000f68
    cca0:	000004e2 	.word	0x000004e2
    cca4:	00002710 	.word	0x00002710
    cca8:	02625a00 	.word	0x02625a00
    ccac:	01c9c380 	.word	0x01c9c380
    ccb0:	0001241d 	.word	0x0001241d
    ccb4:	000124a8 	.word	0x000124a8
    ccb8:	00014cea 	.word	0x00014cea
    ccbc:	00014924 	.word	0x00014924
    ccc0:	000f4240 	.word	0x000f4240
    ccc4:	000f423f 	.word	0x000f423f
    ccc8:	00000452 	.word	0x00000452
    cccc:	3b9aca00 	.word	0x3b9aca00
    ccd0:	1afd498d 	.word	0x1afd498d
    ccd4:	000003e6 	.word	0x000003e6
    ccd8:	00009a3d 	.word	0x00009a3d
    ccdc:	000003e7 	.word	0x000003e7
    cce0:	000003fe 	.word	0x000003fe
    cce4:	00009a01 	.word	0x00009a01
    cce8:	0000c441 	.word	0x0000c441
    ccec:	0001246d 	.word	0x0001246d
    ccf0:	000123e3 	.word	0x000123e3
    ccf4:	000137f7 	.word	0x000137f7
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
    ccf8:	002b      	movs	r3, r5
    ccfa:	33dd      	adds	r3, #221	; 0xdd
    ccfc:	781b      	ldrb	r3, [r3, #0]
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    ccfe:	06db      	lsls	r3, r3, #27
    cd00:	d501      	bpl.n	cd06 <isr+0x722>
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
		     (devmatch_ok) || (irkmatch_ok))) {
    cd02:	433e      	orrs	r6, r7
    cd04:	d0be      	beq.n	cc84 <isr+0x6a0>
			err = isr_rx_scan(irkmatch_id, rssi_ready);
    cd06:	990a      	ldr	r1, [sp, #40]	; 0x28
    cd08:	980e      	ldr	r0, [sp, #56]	; 0x38
    cd0a:	f7fd fbc5 	bl	a498 <isr_rx_scan>
		} else {
			err = 1;
		}
		if (err) {
    cd0e:	2800      	cmp	r0, #0
    cd10:	d101      	bne.n	cd16 <isr+0x732>
    cd12:	f001 fbba 	bl	e48a <isr+0x1ea6>
    cd16:	e7b5      	b.n	cc84 <isr+0x6a0>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    cd18:	002a      	movs	r2, r5
    cd1a:	32ff      	adds	r2, #255	; 0xff
    cd1c:	7d53      	ldrb	r3, [r2, #21]

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    cd1e:	0029      	movs	r1, r5
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    cd20:	3301      	adds	r3, #1
    cd22:	7553      	strb	r3, [r2, #21]

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    cd24:	233e      	movs	r3, #62	; 0x3e
    cd26:	33ff      	adds	r3, #255	; 0xff
    cd28:	5ceb      	ldrb	r3, [r5, r3]
    cd2a:	31fc      	adds	r1, #252	; 0xfc
    cd2c:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    cd2e:	009b      	lsls	r3, r3, #2
    cd30:	581f      	ldr	r7, [r3, r0]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cd32:	2001      	movs	r0, #1

	if (crc_ok) {
    cd34:	9b11      	ldr	r3, [sp, #68]	; 0x44
	/* Increment packet counter for this connection event */
	_radio.packet_counter++;

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    cd36:	7138      	strb	r0, [r7, #4]

	if (crc_ok) {
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d101      	bne.n	cd40 <isr+0x75c>
    cd3c:	f001 f87e 	bl	de3c <isr+0x1858>
	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    cd40:	694c      	ldr	r4, [r1, #20]
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
	u8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    cd42:	2300      	movs	r3, #0

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    cd44:	0021      	movs	r1, r4
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
	u8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    cd46:	7593      	strb	r3, [r2, #22]

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    cd48:	31c0      	adds	r1, #192	; 0xc0
    cd4a:	780b      	ldrb	r3, [r1, #0]
    cd4c:	7a3d      	ldrb	r5, [r7, #8]
    cd4e:	07da      	lsls	r2, r3, #31
    cd50:	0fd2      	lsrs	r2, r2, #31
    cd52:	076d      	lsls	r5, r5, #29
    cd54:	b2d2      	uxtb	r2, r2
    cd56:	0fed      	lsrs	r5, r5, #31
    cd58:	4295      	cmp	r5, r2
    cd5a:	d100      	bne.n	cd5e <isr+0x77a>
    cd5c:	e126      	b.n	cfac <isr+0x9c8>

		/* Increment serial number */
		_radio.conn_curr->sn++;
    cd5e:	1812      	adds	r2, r2, r0
    cd60:	4002      	ands	r2, r0
    cd62:	4383      	bics	r3, r0
    cd64:	4313      	orrs	r3, r2

		if (_radio.conn_curr->empty == 0) {
    cd66:	0018      	movs	r0, r3
    cd68:	227f      	movs	r2, #127	; 0x7f
	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {

		/* Increment serial number */
		_radio.conn_curr->sn++;
    cd6a:	700b      	strb	r3, [r1, #0]

		if (_radio.conn_curr->empty == 0) {
    cd6c:	4390      	bics	r0, r2
    cd6e:	d000      	beq.n	cd72 <isr+0x78e>
    cd70:	e10d      	b.n	cf8e <isr+0x9aa>
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
    cd72:	0022      	movs	r2, r4
    cd74:	32fc      	adds	r2, #252	; 0xfc
    cd76:	6895      	ldr	r5, [r2, #8]
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);
    cd78:	3203      	adds	r2, #3
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    cd7a:	7d92      	ldrb	r2, [r2, #22]
				(node_tx->pdu_data +
    cd7c:	1d29      	adds	r1, r5, #4
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    cd7e:	188a      	adds	r2, r1, r2
    cd80:	920a      	str	r2, [sp, #40]	; 0x28
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
    cd82:	7852      	ldrb	r2, [r2, #1]
    cd84:	920c      	str	r2, [sp, #48]	; 0x30
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;

			if (pdu_data_tx_len != 0) {
    cd86:	2a00      	cmp	r2, #0
    cd88:	d100      	bne.n	cd8c <isr+0x7a8>
    cd8a:	e0cf      	b.n	cf2c <isr+0x948>
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;
    cd8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cd8e:	7810      	ldrb	r0, [r2, #0]
    cd90:	0780      	lsls	r0, r0, #30
    cd92:	0f82      	lsrs	r2, r0, #30
    cd94:	4694      	mov	ip, r2

			if (pdu_data_tx_len != 0) {
				/* if encrypted increment tx counter */
				if (_radio.conn_curr->enc_tx) {
    cd96:	069b      	lsls	r3, r3, #26
    cd98:	d51d      	bpl.n	cdd6 <isr+0x7f2>
					_radio.conn_curr->ccm_tx.counter++;
    cd9a:	0023      	movs	r3, r4
    cd9c:	0021      	movs	r1, r4
    cd9e:	33f4      	adds	r3, #244	; 0xf4
    cda0:	881b      	ldrh	r3, [r3, #0]
    cda2:	31f2      	adds	r1, #242	; 0xf2
    cda4:	880a      	ldrh	r2, [r1, #0]
    cda6:	041b      	lsls	r3, r3, #16
    cda8:	4313      	orrs	r3, r2
    cdaa:	930e      	str	r3, [sp, #56]	; 0x38
    cdac:	0023      	movs	r3, r4
    cdae:	33f6      	adds	r3, #246	; 0xf6
    cdb0:	881a      	ldrh	r2, [r3, #0]
    cdb2:	3302      	adds	r3, #2
    cdb4:	881b      	ldrh	r3, [r3, #0]
    cdb6:	000e      	movs	r6, r1
    cdb8:	041b      	lsls	r3, r3, #16
    cdba:	4313      	orrs	r3, r2
    cdbc:	930f      	str	r3, [sp, #60]	; 0x3c
    cdbe:	2201      	movs	r2, #1
    cdc0:	980e      	ldr	r0, [sp, #56]	; 0x38
    cdc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cdc4:	2300      	movs	r3, #0
    cdc6:	1880      	adds	r0, r0, r2
    cdc8:	4159      	adcs	r1, r3
    cdca:	0c02      	lsrs	r2, r0, #16
    cdcc:	0c0b      	lsrs	r3, r1, #16
    cdce:	8030      	strh	r0, [r6, #0]
    cdd0:	8072      	strh	r2, [r6, #2]
    cdd2:	80b1      	strh	r1, [r6, #4]
    cdd4:	80f3      	strh	r3, [r6, #6]
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    cdd6:	4663      	mov	r3, ip
isr_rx_conn_pkt(struct radio_pdu_node_rx *radio_pdu_node_rx,
		struct radio_pdu_node_tx **tx_release, u8_t *rx_enqueue)
{
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
    cdd8:	2600      	movs	r6, #0
				if (_radio.conn_curr->enc_tx) {
					_radio.conn_curr->ccm_tx.counter++;
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    cdda:	2b03      	cmp	r3, #3
    cddc:	d000      	beq.n	cde0 <isr+0x7fc>
    cdde:	e0a8      	b.n	cf32 <isr+0x94e>
static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;

	switch (pdu_data_tx->payload.llctrl.opcode) {
    cde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cde2:	78d8      	ldrb	r0, [r3, #3]
    cde4:	3802      	subs	r0, #2
    cde6:	2814      	cmp	r0, #20
    cde8:	d900      	bls.n	cdec <isr+0x808>
    cdea:	e0a1      	b.n	cf30 <isr+0x94c>
    cdec:	4ec6      	ldr	r6, [pc, #792]	; (d108 <isr+0xb24>)
    cdee:	f7f3 f9c3 	bl	178 <__gnu_thumb1_case_uqi>
    cdf2:	240b      	.short	0x240b
    cdf4:	9f9f9f6e 	.word	0x9f9f9f6e
    cdf8:	463d9f9f 	.word	0x463d9f9f
    cdfc:	9f9f729f 	.word	0x9f9f729f
    ce00:	9f9f9f9f 	.word	0x9f9f9f9f
    ce04:	9f7b      	.short	0x9f7b
    ce06:	95          	.byte	0x95
    ce07:	00          	.byte	0x00
	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		_radio.state = STATE_CLOSE;
    ce08:	2303      	movs	r3, #3
    ce0a:	7433      	strb	r3, [r6, #16]
		radio_disable();
    ce0c:	f7fa ff1e 	bl	7c4c <radio_disable>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    ce10:	f7fa ff30 	bl	7c74 <radio_is_ready>
    ce14:	2800      	cmp	r0, #0
    ce16:	d005      	beq.n	ce24 <isr+0x840>
    ce18:	4bbc      	ldr	r3, [pc, #752]	; (d10c <isr+0xb28>)
    ce1a:	9301      	str	r3, [sp, #4]
    ce1c:	4bbc      	ldr	r3, [pc, #752]	; (d110 <isr+0xb2c>)
    ce1e:	9300      	str	r3, [sp, #0]
    ce20:	4bbc      	ldr	r3, [pc, #752]	; (d114 <isr+0xb30>)
    ce22:	e161      	b.n	d0e8 <isr+0xb04>

		terminate_ind_rx_enqueue(_radio.conn_curr,
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
    ce24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		radio_disable();

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());

		terminate_ind_rx_enqueue(_radio.conn_curr,
    ce26:	36fc      	adds	r6, #252	; 0xfc
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
    ce28:	7919      	ldrb	r1, [r3, #4]
		radio_disable();

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());

		terminate_ind_rx_enqueue(_radio.conn_curr,
    ce2a:	6970      	ldr	r0, [r6, #20]
    ce2c:	2913      	cmp	r1, #19
    ce2e:	d100      	bne.n	ce32 <isr+0x84e>
    ce30:	3103      	adds	r1, #3
    ce32:	f7fd faa9 	bl	a388 <terminate_ind_rx_enqueue>
		      error_code == 0x13) ?  0x16 :
		     pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
		     error_code);

		/* Ack received, hence terminate */
		terminate = 1;
    ce36:	2601      	movs	r6, #1
    ce38:	e07b      	b.n	cf32 <isr+0x94e>
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    ce3a:	0020      	movs	r0, r4
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
    ce3c:	990a      	ldr	r1, [sp, #40]	; 0x28
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    ce3e:	2208      	movs	r2, #8
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
    ce40:	310e      	adds	r1, #14
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    ce42:	36fc      	adds	r6, #252	; 0xfc
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    ce44:	3087      	adds	r0, #135	; 0x87
    ce46:	f7f3 ff02 	bl	c4e <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
    ce4a:	990a      	ldr	r1, [sp, #40]	; 0x28
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    ce4c:	6970      	ldr	r0, [r6, #20]
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
    ce4e:	3116      	adds	r1, #22
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    ce50:	2204      	movs	r2, #4
    ce52:	30da      	adds	r0, #218	; 0xda
    ce54:	f7f3 fefb 	bl	c4e <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
		       4);

		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    ce58:	6972      	ldr	r2, [r6, #20]
    ce5a:	2008      	movs	r0, #8
    ce5c:	0011      	movs	r1, r2
    ce5e:	31c0      	adds	r1, #192	; 0xc0
    ce60:	780b      	ldrb	r3, [r1, #0]
    ce62:	4303      	orrs	r3, r0
    ce64:	700b      	strb	r3, [r1, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    ce66:	8f13      	ldrh	r3, [r2, #56]	; 0x38
    ce68:	8753      	strh	r3, [r2, #58]	; 0x3a
    ce6a:	e061      	b.n	cf30 <isr+0x94c>
		 */
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    ce6c:	0022      	movs	r2, r4

		/* key refresh */
		_radio.conn_curr->refresh = 1;
    ce6e:	2348      	movs	r3, #72	; 0x48
		 */
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    ce70:	32c0      	adds	r2, #192	; 0xc0
    ce72:	7811      	ldrb	r1, [r2, #0]

		/* key refresh */
		_radio.conn_curr->refresh = 1;
    ce74:	430b      	orrs	r3, r1
    ce76:	7013      	strb	r3, [r2, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    ce78:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    ce7a:	8763      	strh	r3, [r4, #58]	; 0x3a
    ce7c:	e058      	b.n	cf30 <isr+0x94c>
			_radio.conn_curr->procedure_reload;
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    ce7e:	7bf6      	ldrb	r6, [r6, #15]
    ce80:	b2f6      	uxtb	r6, r6
    ce82:	2e04      	cmp	r6, #4
    ce84:	d123      	bne.n	cece <isr+0x8ea>
				struct radio_pdu_node_tx *node_tx)
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce86:	2203      	movs	r2, #3
    ce88:	792b      	ldrb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
    ce8a:	0021      	movs	r1, r4
				struct radio_pdu_node_tx *node_tx)
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ce8c:	4313      	orrs	r3, r2
    ce8e:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
    ce90:	0028      	movs	r0, r5
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    ce92:	2317      	movs	r3, #23
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ce94:	71ea      	strb	r2, [r5, #7]
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    ce96:	716b      	strb	r3, [r5, #5]
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
    ce98:	316d      	adds	r1, #109	; 0x6d
	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
    ce9a:	3205      	adds	r2, #5
    ce9c:	3008      	adds	r0, #8
    ce9e:	f7f3 fed6 	bl	c4e <memcpy>
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
    cea2:	0023      	movs	r3, r4
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    cea4:	0028      	movs	r0, r5
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
    cea6:	3375      	adds	r3, #117	; 0x75
    cea8:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
    ceaa:	3476      	adds	r4, #118	; 0x76
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
    ceac:	742b      	strb	r3, [r5, #16]
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
    ceae:	7823      	ldrb	r3, [r4, #0]
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    ceb0:	2208      	movs	r2, #8
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
    ceb2:	746b      	strb	r3, [r5, #17]
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    ceb4:	21cc      	movs	r1, #204	; 0xcc
    ceb6:	3012      	adds	r0, #18
    ceb8:	f7f3 fef3 	bl	ca2 <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    cebc:	0028      	movs	r0, r5
		if (_radio.role == ROLE_MASTER) {
			/* reused tx-ed PDU and send enc req */
			enc_req_reused_send(_radio.conn_curr, *node_tx);

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
    cebe:	2500      	movs	r5, #0
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    cec0:	0032      	movs	r2, r6
    cec2:	301a      	adds	r0, #26
    cec4:	21dd      	movs	r1, #221	; 0xdd
    cec6:	f7f3 feec 	bl	ca2 <memset>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    ceca:	002e      	movs	r6, r5
    cecc:	e031      	b.n	cf32 <isr+0x94e>

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
		} else {
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    cece:	34c0      	adds	r4, #192	; 0xc0
    ced0:	7823      	ldrb	r3, [r4, #0]
    ced2:	2208      	movs	r2, #8
    ced4:	e027      	b.n	cf26 <isr+0x942>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    ced6:	0022      	movs	r2, r4
		_radio.conn_curr->pause_tx = 0;
    ced8:	23f3      	movs	r3, #243	; 0xf3

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    ceda:	2600      	movs	r6, #0
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    cedc:	32c0      	adds	r2, #192	; 0xc0
    cede:	7811      	ldrb	r1, [r2, #0]
		_radio.conn_curr->pause_tx = 0;
    cee0:	400b      	ands	r3, r1
    cee2:	7013      	strb	r3, [r2, #0]

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    cee4:	8766      	strh	r6, [r4, #58]	; 0x3a
    cee6:	e024      	b.n	cf32 <isr+0x94e>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
    cee8:	0023      	movs	r3, r4
    ceea:	33b4      	adds	r3, #180	; 0xb4
    ceec:	781a      	ldrb	r2, [r3, #0]
    ceee:	3301      	adds	r3, #1
    cef0:	781b      	ldrb	r3, [r3, #0]
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    cef2:	2600      	movs	r6, #0
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
    cef4:	429a      	cmp	r2, r3
    cef6:	d01c      	beq.n	cf32 <isr+0x94e>
		     _radio.conn_curr->llcp_length.ack) &&
		    (_radio.conn_curr->llcp_length.state ==
    cef8:	0022      	movs	r2, r4
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
		     _radio.conn_curr->llcp_length.ack) &&
    cefa:	2103      	movs	r1, #3
		    (_radio.conn_curr->llcp_length.state ==
    cefc:	32b6      	adds	r2, #182	; 0xb6
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
		     _radio.conn_curr->llcp_length.ack) &&
    cefe:	7813      	ldrb	r3, [r2, #0]
    cf00:	400b      	ands	r3, r1
    cf02:	2b01      	cmp	r3, #1
    cf04:	d115      	bne.n	cf32 <isr+0x94e>
		    (_radio.conn_curr->llcp_length.state ==
		     LLCP_LENGTH_STATE_ACK_WAIT)){
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    cf06:	2008      	movs	r0, #8
    cf08:	34c0      	adds	r4, #192	; 0xc0
    cf0a:	7823      	ldrb	r3, [r4, #0]
    cf0c:	4303      	orrs	r3, r0
    cf0e:	7023      	strb	r3, [r4, #0]

			/* wait for response */
			_radio.conn_curr->llcp_length.state =
    cf10:	7813      	ldrb	r3, [r2, #0]
    cf12:	438b      	bics	r3, r1
    cf14:	3901      	subs	r1, #1
    cf16:	430b      	orrs	r3, r1
    cf18:	7013      	strb	r3, [r2, #0]
    cf1a:	e00a      	b.n	cf32 <isr+0x94e>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    cf1c:	2203      	movs	r2, #3
    cf1e:	34be      	adds	r4, #190	; 0xbe
    cf20:	7823      	ldrb	r3, [r4, #0]
    cf22:	4393      	bics	r3, r2
    cf24:	3a01      	subs	r2, #1
    cf26:	4313      	orrs	r3, r2
    cf28:	7023      	strb	r3, [r4, #0]
    cf2a:	e001      	b.n	cf30 <isr+0x94c>
isr_rx_conn_pkt(struct radio_pdu_node_rx *radio_pdu_node_rx,
		struct radio_pdu_node_tx **tx_release, u8_t *rx_enqueue)
{
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
    cf2c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    cf2e:	e000      	b.n	cf32 <isr+0x94e>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    cf30:	2600      	movs	r6, #0
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    cf32:	4c75      	ldr	r4, [pc, #468]	; (d108 <isr+0xb24>)
    cf34:	980c      	ldr	r0, [sp, #48]	; 0x30
    cf36:	0023      	movs	r3, r4
    cf38:	33fc      	adds	r3, #252	; 0xfc
    cf3a:	695b      	ldr	r3, [r3, #20]
    cf3c:	0019      	movs	r1, r3
    cf3e:	31ff      	adds	r1, #255	; 0xff
    cf40:	7d8a      	ldrb	r2, [r1, #22]
    cf42:	1882      	adds	r2, r0, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    cf44:	7d48      	ldrb	r0, [r1, #21]
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    cf46:	b2d2      	uxtb	r2, r2
    cf48:	758a      	strb	r2, [r1, #22]
			if (_radio.conn_curr->packet_tx_head_offset ==
    cf4a:	4290      	cmp	r0, r2
    cf4c:	d122      	bne.n	cf94 <isr+0x9b0>
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    cf4e:	2000      	movs	r0, #0
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    cf50:	33fc      	adds	r3, #252	; 0xfc
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    cf52:	7548      	strb	r0, [r1, #21]
	_radio.conn_curr->packet_tx_head_offset = 0;
    cf54:	7588      	strb	r0, [r1, #22]

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    cf56:	689a      	ldr	r2, [r3, #8]
    cf58:	68d9      	ldr	r1, [r3, #12]
    cf5a:	428a      	cmp	r2, r1
    cf5c:	d10f      	bne.n	cf7e <isr+0x99a>
		if (node_tx) {
    cf5e:	4285      	cmp	r5, r0
    cf60:	d018      	beq.n	cf94 <isr+0x9b0>
			_radio.conn_curr->pkt_tx_ctrl =
			    _radio.conn_curr->pkt_tx_ctrl->next;
    cf62:	6812      	ldr	r2, [r2, #0]
			_radio.conn_curr->pkt_tx_head =
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    cf64:	6919      	ldr	r1, [r3, #16]
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
		if (node_tx) {
			_radio.conn_curr->pkt_tx_ctrl =
    cf66:	60da      	str	r2, [r3, #12]
			    _radio.conn_curr->pkt_tx_ctrl->next;
			_radio.conn_curr->pkt_tx_head =
    cf68:	609a      	str	r2, [r3, #8]
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    cf6a:	428a      	cmp	r2, r1
    cf6c:	d100      	bne.n	cf70 <isr+0x98c>
			    _radio.conn_curr->pkt_tx_data) {
				_radio.conn_curr->pkt_tx_ctrl = NULL;
    cf6e:	60d8      	str	r0, [r3, #12]
			}

			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
    cf70:	0021      	movs	r1, r4
    cf72:	3159      	adds	r1, #89	; 0x59
    cf74:	31ff      	adds	r1, #255	; 0xff
    cf76:	0028      	movs	r0, r5
    cf78:	f7fa fc91 	bl	789e <mem_release>
    cf7c:	e00a      	b.n	cf94 <isr+0x9b0>
		}
	} else {
		if (_radio.conn_curr->pkt_tx_head ==
    cf7e:	6918      	ldr	r0, [r3, #16]
    cf80:	6811      	ldr	r1, [r2, #0]
    cf82:	4282      	cmp	r2, r0
    cf84:	d100      	bne.n	cf88 <isr+0x9a4>
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
    cf86:	6119      	str	r1, [r3, #16]
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    cf88:	6099      	str	r1, [r3, #8]
    cf8a:	950c      	str	r5, [sp, #48]	; 0x30
    cf8c:	e004      	b.n	cf98 <isr+0x9b4>
			if (_radio.conn_curr->packet_tx_head_offset ==
			    _radio.conn_curr->packet_tx_head_len) {
				*tx_release = isr_rx_conn_pkt_release(node_tx);
			}
		} else {
			_radio.conn_curr->empty = 0;
    cf8e:	4013      	ands	r3, r2
    cf90:	700b      	strb	r3, [r1, #0]
    cf92:	e00b      	b.n	cfac <isr+0x9c8>

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    cf94:	2300      	movs	r3, #0
    cf96:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.conn_curr->empty = 0;
		}
	}

	/* local initiated disconnect procedure completed */
	if (terminate) {
    cf98:	2e00      	cmp	r6, #0
    cf9a:	d009      	beq.n	cfb0 <isr+0x9cc>
		connection_release(_radio.conn_curr);
    cf9c:	34fc      	adds	r4, #252	; 0xfc
    cf9e:	6960      	ldr	r0, [r4, #20]
    cfa0:	f7fd f8be 	bl	a120 <connection_release>
		_radio.conn_curr = NULL;
    cfa4:	2300      	movs	r3, #0
    cfa6:	6163      	str	r3, [r4, #20]
    cfa8:	f001 fa35 	bl	e416 <isr+0x1e32>
		if (_radio.conn_curr->pkt_tx_head ==
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    cfac:	2300      	movs	r3, #0
    cfae:	930c      	str	r3, [sp, #48]	; 0x30

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    cfb0:	4855      	ldr	r0, [pc, #340]	; (d108 <isr+0xb24>)
    cfb2:	7a3a      	ldrb	r2, [r7, #8]
    cfb4:	0004      	movs	r4, r0
    cfb6:	34fc      	adds	r4, #252	; 0xfc
    cfb8:	6963      	ldr	r3, [r4, #20]
    cfba:	0712      	lsls	r2, r2, #28
    cfbc:	33c0      	adds	r3, #192	; 0xc0
    cfbe:	781b      	ldrb	r3, [r3, #0]
    cfc0:	0fd2      	lsrs	r2, r2, #31
    cfc2:	079b      	lsls	r3, r3, #30
    cfc4:	0fdb      	lsrs	r3, r3, #31
    cfc6:	0006      	movs	r6, r0
    cfc8:	429a      	cmp	r2, r3
    cfca:	d001      	beq.n	cfd0 <isr+0x9ec>
    cfcc:	f001 fa29 	bl	e422 <isr+0x1e3e>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    cfd0:	2003      	movs	r0, #3
    cfd2:	f7fc f8dd 	bl	9190 <packet_rx_reserve_get>

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    cfd6:	2800      	cmp	r0, #0
    cfd8:	d101      	bne.n	cfde <isr+0x9fa>
    cfda:	f001 fa22 	bl	e422 <isr+0x1e3e>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
    cfde:	23bf      	movs	r3, #191	; 0xbf
    cfe0:	005b      	lsls	r3, r3, #1
	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    cfe2:	5cf3      	ldrb	r3, [r6, r3]
    cfe4:	2b00      	cmp	r3, #0
    cfe6:	d03a      	beq.n	d05e <isr+0xa7a>
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    cfe8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    cfea:	6d23      	ldr	r3, [r4, #80]	; 0x50
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
    cfec:	429a      	cmp	r2, r3
    cfee:	d107      	bne.n	d000 <isr+0xa1c>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    cff0:	23be      	movs	r3, #190	; 0xbe
    cff2:	217e      	movs	r1, #126	; 0x7e
    cff4:	005b      	lsls	r3, r3, #1
    cff6:	31ff      	adds	r1, #255	; 0xff
    cff8:	5cf3      	ldrb	r3, [r6, r3]
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    cffa:	5c71      	ldrb	r1, [r6, r1]
    cffc:	4299      	cmp	r1, r3
    cffe:	d02e      	beq.n	d05e <isr+0xa7a>
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    d000:	0033      	movs	r3, r6
    d002:	33fc      	adds	r3, #252	; 0xfc
    d004:	6d19      	ldr	r1, [r3, #80]	; 0x50
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    d006:	428a      	cmp	r2, r1
    d008:	d101      	bne.n	d00e <isr+0xa2a>
    d00a:	f001 fa0a 	bl	e422 <isr+0x1e3e>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    d00e:	22be      	movs	r2, #190	; 0xbe
    d010:	207e      	movs	r0, #126	; 0x7e
    d012:	0052      	lsls	r2, r2, #1
    d014:	30ff      	adds	r0, #255	; 0xff
    d016:	5cb1      	ldrb	r1, [r6, r2]
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    d018:	5c30      	ldrb	r0, [r6, r0]
    d01a:	4288      	cmp	r0, r1
    d01c:	d101      	bne.n	d022 <isr+0xa3e>
    d01e:	f001 fa00 	bl	e422 <isr+0x1e3e>
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    d022:	5cb2      	ldrb	r2, [r6, r2]
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    d024:	2a00      	cmp	r2, #0
    d026:	d106      	bne.n	d036 <isr+0xa52>
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    d028:	695b      	ldr	r3, [r3, #20]
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    d02a:	327b      	adds	r2, #123	; 0x7b
    d02c:	32ff      	adds	r2, #255	; 0xff
    d02e:	5ab2      	ldrh	r2, [r6, r2]
    d030:	8c1b      	ldrh	r3, [r3, #32]
    d032:	429a      	cmp	r2, r3
    d034:	d013      	beq.n	d05e <isr+0xa7a>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    d036:	23be      	movs	r3, #190	; 0xbe
    d038:	005b      	lsls	r3, r3, #1
    d03a:	5cf2      	ldrb	r2, [r6, r3]
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    d03c:	2a00      	cmp	r2, #0
    d03e:	d101      	bne.n	d044 <isr+0xa60>
    d040:	f001 f9ef 	bl	e422 <isr+0x1e3e>
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
    d044:	0032      	movs	r2, r6
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    d046:	5cf3      	ldrb	r3, [r6, r3]
		   _radio.conn_curr->handle)))))) {
    d048:	32fc      	adds	r2, #252	; 0xfc
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    d04a:	33b7      	adds	r3, #183	; 0xb7
		   _radio.conn_curr->handle)))))) {
    d04c:	6951      	ldr	r1, [r2, #20]
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    d04e:	005b      	lsls	r3, r3, #1
    d050:	18f3      	adds	r3, r6, r3
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    d052:	88da      	ldrh	r2, [r3, #6]
    d054:	8c0b      	ldrh	r3, [r1, #32]
    d056:	429a      	cmp	r2, r3
    d058:	d001      	beq.n	d05e <isr+0xa7a>
    d05a:	f001 f9e2 	bl	e422 <isr+0x1e3e>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;

		if (pdu_data_rx->len != 0) {
    d05e:	7a79      	ldrb	r1, [r7, #9]
    d060:	2900      	cmp	r1, #0
    d062:	d101      	bne.n	d068 <isr+0xa84>
    d064:	f000 fe93 	bl	dd8e <isr+0x17aa>
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    d068:	0033      	movs	r3, r6
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    d06a:	2200      	movs	r2, #0

		if (pdu_data_rx->len != 0) {
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    d06c:	33fc      	adds	r3, #252	; 0xfc
    d06e:	695b      	ldr	r3, [r3, #20]
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    d070:	9212      	str	r2, [sp, #72]	; 0x48

		if (pdu_data_rx->len != 0) {
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    d072:	33c0      	adds	r3, #192	; 0xc0
    d074:	781b      	ldrb	r3, [r3, #0]
    d076:	06db      	lsls	r3, r3, #27
    d078:	d50f      	bpl.n	d09a <isr+0xab6>
				u32_t done;

				done = radio_ccm_is_done();
    d07a:	f7fb f831 	bl	80e0 <radio_ccm_is_done>
				LL_ASSERT(done);

				ccm_rx_increment = 1;
    d07e:	2301      	movs	r3, #1
    d080:	9312      	str	r3, [sp, #72]	; 0x48
			 */
			if (_radio.conn_curr->enc_rx) {
				u32_t done;

				done = radio_ccm_is_done();
				LL_ASSERT(done);
    d082:	2800      	cmp	r0, #0
    d084:	d109      	bne.n	d09a <isr+0xab6>
    d086:	4b21      	ldr	r3, [pc, #132]	; (d10c <isr+0xb28>)
    d088:	4a23      	ldr	r2, [pc, #140]	; (d118 <isr+0xb34>)
    d08a:	9301      	str	r3, [sp, #4]
    d08c:	4b20      	ldr	r3, [pc, #128]	; (d110 <isr+0xb2c>)
    d08e:	4923      	ldr	r1, [pc, #140]	; (d11c <isr+0xb38>)
    d090:	9300      	str	r3, [sp, #0]
    d092:	4823      	ldr	r0, [pc, #140]	; (d120 <isr+0xb3c>)
    d094:	4b23      	ldr	r3, [pc, #140]	; (d124 <isr+0xb40>)
    d096:	f001 f99d 	bl	e3d4 <isr+0x1df0>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    d09a:	0033      	movs	r3, r6
    d09c:	33fc      	adds	r3, #252	; 0xfc
    d09e:	695b      	ldr	r3, [r3, #20]
    d0a0:	33c0      	adds	r3, #192	; 0xc0
    d0a2:	781b      	ldrb	r3, [r3, #0]
    d0a4:	06db      	lsls	r3, r3, #27
    d0a6:	d408      	bmi.n	d0ba <isr+0xad6>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    d0a8:	0033      	movs	r3, r6
    d0aa:	33fc      	adds	r3, #252	; 0xfc
    d0ac:	695d      	ldr	r5, [r3, #20]
    d0ae:	002b      	movs	r3, r5
    d0b0:	33c0      	adds	r3, #192	; 0xc0
				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
    d0b2:	781a      	ldrb	r2, [r3, #0]
    d0b4:	0752      	lsls	r2, r2, #29
    d0b6:	d412      	bmi.n	d0de <isr+0xafa>
    d0b8:	e038      	b.n	d12c <isr+0xb48>
    d0ba:	f7fb f835 	bl	8128 <radio_ccm_mic_is_valid>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    d0be:	2800      	cmp	r0, #0
    d0c0:	d1f2      	bne.n	d0a8 <isr+0xac4>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
			     (pdu_data_rx->ll_id != PDU_DATA_LLID_CTRL))) {
				_radio.state = STATE_CLOSE;
    d0c2:	2303      	movs	r3, #3
    d0c4:	7433      	strb	r3, [r6, #16]
				radio_disable();
    d0c6:	f7fa fdc1 	bl	7c4c <radio_disable>

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
    d0ca:	f7fa fdd3 	bl	7c74 <radio_is_ready>
    d0ce:	1e04      	subs	r4, r0, #0
    d0d0:	d00f      	beq.n	d0f2 <isr+0xb0e>
    d0d2:	4b0e      	ldr	r3, [pc, #56]	; (d10c <isr+0xb28>)
    d0d4:	9301      	str	r3, [sp, #4]
    d0d6:	4b0e      	ldr	r3, [pc, #56]	; (d110 <isr+0xb2c>)
    d0d8:	9300      	str	r3, [sp, #0]
    d0da:	4b12      	ldr	r3, [pc, #72]	; (d124 <isr+0xb40>)
    d0dc:	e004      	b.n	d0e8 <isr+0xb04>
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    d0de:	7a3a      	ldrb	r2, [r7, #8]
    d0e0:	43d2      	mvns	r2, r2
    d0e2:	0792      	lsls	r2, r2, #30
    d0e4:	d1ed      	bne.n	d0c2 <isr+0xade>
    d0e6:	e021      	b.n	d12c <isr+0xb48>
				_radio.state = STATE_CLOSE;
				radio_disable();

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
    d0e8:	4a0b      	ldr	r2, [pc, #44]	; (d118 <isr+0xb34>)
    d0ea:	490c      	ldr	r1, [pc, #48]	; (d11c <isr+0xb38>)
    d0ec:	480e      	ldr	r0, [pc, #56]	; (d128 <isr+0xb44>)
    d0ee:	f001 f971 	bl	e3d4 <isr+0x1df0>

				terminate_ind_rx_enqueue(_radio.conn_curr,
    d0f2:	36fc      	adds	r6, #252	; 0xfc
    d0f4:	213d      	movs	r1, #61	; 0x3d
    d0f6:	6970      	ldr	r0, [r6, #20]
    d0f8:	f7fd f946 	bl	a388 <terminate_ind_rx_enqueue>
							 0x3d);

				connection_release(_radio.conn_curr);
    d0fc:	6970      	ldr	r0, [r6, #20]
    d0fe:	f7fd f80f 	bl	a120 <connection_release>
				_radio.conn_curr = NULL;
    d102:	6174      	str	r4, [r6, #20]
    d104:	f001 f987 	bl	e416 <isr+0x1e32>
    d108:	20000f68 	.word	0x20000f68
    d10c:	0001241d 	.word	0x0001241d
    d110:	000124a8 	.word	0x000124a8
    d114:	000149e8 	.word	0x000149e8
    d118:	0001246d 	.word	0x0001246d
    d11c:	000123e3 	.word	0x000123e3
    d120:	00013c8c 	.word	0x00013c8c
    d124:	00014ab2 	.word	0x00014ab2
    d128:	0001397b 	.word	0x0001397b
				return 1; /* terminated */
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
    d12c:	2400      	movs	r4, #0
			_radio.conn_curr->apto_expire = 0;
    d12e:	1d2a      	adds	r2, r5, #4
				return 1; /* terminated */
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
    d130:	87ec      	strh	r4, [r5, #62]	; 0x3e
			_radio.conn_curr->apto_expire = 0;
    d132:	87d4      	strh	r4, [r2, #62]	; 0x3e
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			switch (pdu_data_rx->ll_id) {
    d134:	7a3a      	ldrb	r2, [r7, #8]
    d136:	0792      	lsls	r2, r2, #30
    d138:	0f92      	lsrs	r2, r2, #30
    d13a:	42a2      	cmp	r2, r4
    d13c:	d101      	bne.n	d142 <isr+0xb5e>
    d13e:	f000 fe20 	bl	dd82 <isr+0x179e>
    d142:	2a02      	cmp	r2, #2
    d144:	d800      	bhi.n	d148 <isr+0xb64>
    d146:	e13c      	b.n	d3c2 <isr+0xdde>
{
	struct pdu_data *pdu_data_rx;
	u8_t nack = 0;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
    d148:	7afa      	ldrb	r2, [r7, #11]
    d14a:	920e      	str	r2, [sp, #56]	; 0x38
    d14c:	2a18      	cmp	r2, #24
    d14e:	d901      	bls.n	d154 <isr+0xb70>
    d150:	f000 fdf6 	bl	dd40 <isr+0x175c>
    d154:	0010      	movs	r0, r2
    d156:	f7f3 f823 	bl	1a0 <__gnu_thumb1_case_uhi>
    d15a:	0019      	.short	0x0019
    d15c:	00c50090 	.word	0x00c50090
    d160:	00e100c9 	.word	0x00e100c9
    d164:	010600f9 	.word	0x010600f9
    d168:	013703a4 	.word	0x013703a4
    d16c:	017e016c 	.word	0x017e016c
    d170:	01a3018c 	.word	0x01a3018c
    d174:	0137022a 	.word	0x0137022a
    d178:	00f60231 	.word	0x00f60231
    d17c:	038c02f2 	.word	0x038c02f2
    d180:	03e603a2 	.word	0x03e603a2
    d184:	04cb03e6 	.word	0x04cb03e6
    d188:	056d0541 	.word	0x056d0541
	packet_rx_callback();
}

static u32_t conn_update(struct connection *conn, struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
    d18c:	7dbb      	ldrb	r3, [r7, #22]
    d18e:	7d7a      	ldrb	r2, [r7, #21]
    d190:	021b      	lsls	r3, r3, #8
    d192:	4313      	orrs	r3, r2
    d194:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d196:	1a9b      	subs	r3, r3, r2
    d198:	4adc      	ldr	r2, [pc, #880]	; (d50c <isr+0xf28>)
    d19a:	b29b      	uxth	r3, r3
    d19c:	4293      	cmp	r3, r2
    d19e:	dd01      	ble.n	d1a4 <isr+0xbc0>
    d1a0:	f001 f931 	bl	e406 <isr+0x1e22>
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
		return 1;
	}

	LL_ASSERT((conn->llcp_req == conn->llcp_ack) ||
    d1a4:	002b      	movs	r3, r5
    d1a6:	002a      	movs	r2, r5
    d1a8:	3369      	adds	r3, #105	; 0x69
    d1aa:	3268      	adds	r2, #104	; 0x68
    d1ac:	781b      	ldrb	r3, [r3, #0]
    d1ae:	7812      	ldrb	r2, [r2, #0]
    d1b0:	429a      	cmp	r2, r3
    d1b2:	d015      	beq.n	d1e0 <isr+0xbfc>
    d1b4:	002a      	movs	r2, r5
    d1b6:	326a      	adds	r2, #106	; 0x6a
    d1b8:	7812      	ldrb	r2, [r2, #0]
    d1ba:	2a01      	cmp	r2, #1
    d1bc:	d106      	bne.n	d1cc <isr+0xbe8>
    d1be:	002a      	movs	r2, r5
    d1c0:	3295      	adds	r2, #149	; 0x95
    d1c2:	7811      	ldrb	r1, [r2, #0]
    d1c4:	2207      	movs	r2, #7
    d1c6:	400a      	ands	r2, r1
    d1c8:	2a05      	cmp	r2, #5
    d1ca:	d009      	beq.n	d1e0 <isr+0xbfc>
    d1cc:	4bd0      	ldr	r3, [pc, #832]	; (d510 <isr+0xf2c>)
    d1ce:	4ad1      	ldr	r2, [pc, #836]	; (d514 <isr+0xf30>)
    d1d0:	9301      	str	r3, [sp, #4]
    d1d2:	4bd1      	ldr	r3, [pc, #836]	; (d518 <isr+0xf34>)
    d1d4:	49d1      	ldr	r1, [pc, #836]	; (d51c <isr+0xf38>)
    d1d6:	9300      	str	r3, [sp, #0]
    d1d8:	48d1      	ldr	r0, [pc, #836]	; (d520 <isr+0xf3c>)
    d1da:	4bd2      	ldr	r3, [pc, #840]	; (d524 <isr+0xf40>)
    d1dc:	f001 f8fa 	bl	e3d4 <isr+0x1df0>
		    LLCP_CONN_STATE_RSP_WAIT)));

	/* set mutex, if only not already set. As a master the mutex shall
	 * be set, but a slave we accept it as new 'set' of mutex.
	 */
	if (_radio.conn_upd == 0) {
    d1e0:	22c2      	movs	r2, #194	; 0xc2
    d1e2:	0052      	lsls	r2, r2, #1
    d1e4:	58b1      	ldr	r1, [r6, r2]
    d1e6:	2900      	cmp	r1, #0
    d1e8:	d10f      	bne.n	d20a <isr+0xc26>
		LL_ASSERT(conn->role.slave.role != 0);
    d1ea:	0029      	movs	r1, r5
    d1ec:	3144      	adds	r1, #68	; 0x44
    d1ee:	7809      	ldrb	r1, [r1, #0]
    d1f0:	07c9      	lsls	r1, r1, #31
    d1f2:	d409      	bmi.n	d208 <isr+0xc24>
    d1f4:	4bc6      	ldr	r3, [pc, #792]	; (d510 <isr+0xf2c>)
    d1f6:	4ac7      	ldr	r2, [pc, #796]	; (d514 <isr+0xf30>)
    d1f8:	9301      	str	r3, [sp, #4]
    d1fa:	4bc7      	ldr	r3, [pc, #796]	; (d518 <isr+0xf34>)
    d1fc:	49c7      	ldr	r1, [pc, #796]	; (d51c <isr+0xf38>)
    d1fe:	9300      	str	r3, [sp, #0]
    d200:	48c9      	ldr	r0, [pc, #804]	; (d528 <isr+0xf44>)
    d202:	4bc8      	ldr	r3, [pc, #800]	; (d524 <isr+0xf40>)
    d204:	f001 f8e6 	bl	e3d4 <isr+0x1df0>

		_radio.conn_upd = conn;
    d208:	50b5      	str	r5, [r6, r2]
	}

	conn->llcp.connection_update.win_size =
    d20a:	002a      	movs	r2, r5
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
    d20c:	0028      	movs	r0, r5

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
    d20e:	7b39      	ldrb	r1, [r7, #12]
		LL_ASSERT(conn->role.slave.role != 0);

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
    d210:	3294      	adds	r2, #148	; 0x94
    d212:	7011      	strb	r1, [r2, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
    d214:	7bba      	ldrb	r2, [r7, #14]
    d216:	7b79      	ldrb	r1, [r7, #13]
    d218:	0212      	lsls	r2, r2, #8
		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
    d21a:	430a      	orrs	r2, r1
    d21c:	49c3      	ldr	r1, [pc, #780]	; (d52c <isr+0xf48>)
    d21e:	308c      	adds	r0, #140	; 0x8c
    d220:	434a      	muls	r2, r1
    d222:	6002      	str	r2, [r0, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
    d224:	7c3a      	ldrb	r2, [r7, #16]
    d226:	7bf9      	ldrb	r1, [r7, #15]
    d228:	0212      	lsls	r2, r2, #8
    d22a:	430a      	orrs	r2, r1
	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
    d22c:	0029      	movs	r1, r5
    d22e:	316c      	adds	r1, #108	; 0x6c
    d230:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
    d232:	7cba      	ldrb	r2, [r7, #18]
    d234:	7c79      	ldrb	r1, [r7, #17]
    d236:	0212      	lsls	r2, r2, #8
    d238:	430a      	orrs	r2, r1
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
    d23a:	0029      	movs	r1, r5
    d23c:	316e      	adds	r1, #110	; 0x6e
    d23e:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
    d240:	7d3a      	ldrb	r2, [r7, #20]
    d242:	7cf9      	ldrb	r1, [r7, #19]
    d244:	0212      	lsls	r2, r2, #8
    d246:	430a      	orrs	r2, r1
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
    d248:	0029      	movs	r1, r5
    d24a:	3170      	adds	r1, #112	; 0x70
    d24c:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
    d24e:	7dba      	ldrb	r2, [r7, #22]
    d250:	7d79      	ldrb	r1, [r7, #21]
    d252:	0212      	lsls	r2, r2, #8
    d254:	430a      	orrs	r2, r1
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
    d256:	0029      	movs	r1, r5
    d258:	3174      	adds	r1, #116	; 0x74
    d25a:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;
    d25c:	22e0      	movs	r2, #224	; 0xe0
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    d25e:	3121      	adds	r1, #33	; 0x21
    d260:	7808      	ldrb	r0, [r1, #0]
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_ack--;
    d262:	3b01      	subs	r3, #1
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;
    d264:	4002      	ands	r2, r0
    d266:	700a      	strb	r2, [r1, #0]

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    d268:	002a      	movs	r2, r5
    d26a:	2101      	movs	r1, #1
    d26c:	326a      	adds	r2, #106	; 0x6a
    d26e:	7011      	strb	r1, [r2, #0]
	conn->llcp_ack--;
    d270:	3a01      	subs	r2, #1
    d272:	7013      	strb	r3, [r2, #0]
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
			/* conn param req procedure, if any, is complete */
			_radio.conn_curr->procedure_expire = 0;
    d274:	2400      	movs	r4, #0
    d276:	f000 fcdb 	bl	dc30 <isr+0x164c>
}

static u32_t chan_map_update(struct connection *conn,
			     struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
    d27a:	7cbb      	ldrb	r3, [r7, #18]
    d27c:	7c7a      	ldrb	r2, [r7, #17]
    d27e:	021b      	lsls	r3, r3, #8
    d280:	4313      	orrs	r3, r2
    d282:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d284:	1a9b      	subs	r3, r3, r2
    d286:	4aa1      	ldr	r2, [pc, #644]	; (d50c <isr+0xf28>)
    d288:	b29b      	uxth	r3, r3
    d28a:	4293      	cmp	r3, r2
    d28c:	dd01      	ble.n	d292 <isr+0xcae>
    d28e:	f001 f8ba 	bl	e406 <isr+0x1e22>
	      conn->event_counter) & 0xffff) > 0x7fff) {
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d292:	002e      	movs	r6, r5
    d294:	002b      	movs	r3, r5
    d296:	3669      	adds	r6, #105	; 0x69
    d298:	3368      	adds	r3, #104	; 0x68
    d29a:	781a      	ldrb	r2, [r3, #0]
    d29c:	7833      	ldrb	r3, [r6, #0]
    d29e:	429a      	cmp	r2, r3
    d2a0:	d006      	beq.n	d2b0 <isr+0xccc>
    d2a2:	4b9b      	ldr	r3, [pc, #620]	; (d510 <isr+0xf2c>)
    d2a4:	9301      	str	r3, [sp, #4]
    d2a6:	4b9c      	ldr	r3, [pc, #624]	; (d518 <isr+0xf34>)
    d2a8:	9300      	str	r3, [sp, #0]
    d2aa:	4ba1      	ldr	r3, [pc, #644]	; (d530 <isr+0xf4c>)
    d2ac:	f000 fd05 	bl	dcba <isr+0x16d6>

	memcpy(&conn->llcp.chan_map.chm[0],
    d2b0:	0028      	movs	r0, r5
    d2b2:	0039      	movs	r1, r7
    d2b4:	2205      	movs	r2, #5
    d2b6:	306d      	adds	r0, #109	; 0x6d
    d2b8:	310c      	adds	r1, #12
    d2ba:	f7f3 fcc8 	bl	c4e <memcpy>
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
    d2be:	7cbb      	ldrb	r3, [r7, #18]
    d2c0:	7c7a      	ldrb	r2, [r7, #17]
    d2c2:	021b      	lsls	r3, r3, #8
    d2c4:	4313      	orrs	r3, r2
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	memcpy(&conn->llcp.chan_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
    d2c6:	002a      	movs	r2, r5
    d2c8:	3272      	adds	r2, #114	; 0x72
    d2ca:	8013      	strh	r3, [r2, #0]
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
	conn->llcp.chan_map.initiate = 0;
    d2cc:	002b      	movs	r3, r5
    d2ce:	2400      	movs	r4, #0
    d2d0:	336c      	adds	r3, #108	; 0x6c
    d2d2:	701c      	strb	r4, [r3, #0]

	conn->llcp_type = LLCP_CHAN_MAP;
    d2d4:	2302      	movs	r3, #2
    d2d6:	356a      	adds	r5, #106	; 0x6a
    d2d8:	702b      	strb	r3, [r5, #0]
	conn->llcp_ack--;
    d2da:	7833      	ldrb	r3, [r6, #0]
    d2dc:	3b01      	subs	r3, #1
    d2de:	7033      	strb	r3, [r6, #0]
    d2e0:	f000 fd6d 	bl	ddbe <isr+0x17da>
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
    d2e4:	7b3b      	ldrb	r3, [r7, #12]
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
    d2e6:	35a7      	adds	r5, #167	; 0xa7
    d2e8:	f001 f88f 	bl	e40a <isr+0x1e26>
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d2ec:	0028      	movs	r0, r5
    d2ee:	0039      	movs	r1, r7
    d2f0:	2208      	movs	r2, #8
    d2f2:	3116      	adds	r1, #22
    d2f4:	3087      	adds	r0, #135	; 0x87
    d2f6:	f7f3 fcaa 	bl	c4e <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d2fa:	0039      	movs	r1, r7
    d2fc:	36fc      	adds	r6, #252	; 0xfc
    d2fe:	6970      	ldr	r0, [r6, #20]
    d300:	2204      	movs	r2, #4
    d302:	311e      	adds	r1, #30
    d304:	30da      	adds	r0, #218	; 0xda
    d306:	f7f3 fca2 	bl	c4e <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.ivm[0], 4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    d30a:	6972      	ldr	r2, [r6, #20]
    d30c:	2004      	movs	r0, #4
    d30e:	0011      	movs	r1, r2
    d310:	31c0      	adds	r1, #192	; 0xc0
    d312:	780b      	ldrb	r3, [r1, #0]
    d314:	4303      	orrs	r3, r0
    d316:	700b      	strb	r3, [r1, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design)
		 */
		_radio.conn_curr->procedure_expire =
    d318:	8f13      	ldrh	r3, [r2, #56]	; 0x38
    d31a:	e051      	b.n	d3c0 <isr+0xddc>
		*rx_enqueue = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		/* things sent by slave stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    d31c:	0028      	movs	r0, r5
    d31e:	0039      	movs	r1, r7
    d320:	2208      	movs	r2, #8
    d322:	310c      	adds	r1, #12
    d324:	308f      	adds	r0, #143	; 0x8f
    d326:	f7f3 fc92 	bl	c4e <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.skds[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    d32a:	0039      	movs	r1, r7
    d32c:	36fc      	adds	r6, #252	; 0xfc
    d32e:	6970      	ldr	r0, [r6, #20]
    d330:	2204      	movs	r2, #4
    d332:	3114      	adds	r1, #20
    d334:	30de      	adds	r0, #222	; 0xde
    d336:	f7f3 fc8a 	bl	c4e <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.ivs[0],
		       4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    d33a:	2104      	movs	r1, #4
    d33c:	6973      	ldr	r3, [r6, #20]
    d33e:	33c0      	adds	r3, #192	; 0xc0
    d340:	781a      	ldrb	r2, [r3, #0]
    d342:	430a      	orrs	r2, r1
    d344:	701a      	strb	r2, [r3, #0]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    d346:	2400      	movs	r4, #0
    d348:	f000 fd39 	bl	ddbe <isr+0x17da>
		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_REQ:
		LL_ASSERT(_radio.conn_curr->llcp_req ==
    d34c:	002b      	movs	r3, r5
    d34e:	002a      	movs	r2, r5
    d350:	3368      	adds	r3, #104	; 0x68
    d352:	3269      	adds	r2, #105	; 0x69
    d354:	7819      	ldrb	r1, [r3, #0]
    d356:	7813      	ldrb	r3, [r2, #0]
    d358:	428b      	cmp	r3, r1
    d35a:	d110      	bne.n	d37e <isr+0xd9a>
			  _radio.conn_curr->llcp_ack);

		/* start enc rsp to be scheduled in master prepare */
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d35c:	2103      	movs	r1, #3
    d35e:	356a      	adds	r5, #106	; 0x6a
    d360:	7029      	strb	r1, [r5, #0]
		_radio.conn_curr->llcp_ack--;
    d362:	3b01      	subs	r3, #1
    d364:	e083      	b.n	d46e <isr+0xe8a>
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (_radio.role == ROLE_SLAVE) {
    d366:	7bf2      	ldrb	r2, [r6, #15]
    d368:	b2d2      	uxtb	r2, r2
    d36a:	2a03      	cmp	r2, #3
    d36c:	d116      	bne.n	d39c <isr+0xdb8>

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
    d36e:	002b      	movs	r3, r5
    d370:	0029      	movs	r1, r5
    d372:	3368      	adds	r3, #104	; 0x68
    d374:	3169      	adds	r1, #105	; 0x69
    d376:	7818      	ldrb	r0, [r3, #0]
    d378:	780b      	ldrb	r3, [r1, #0]
    d37a:	4283      	cmp	r3, r0
    d37c:	d009      	beq.n	d392 <isr+0xdae>
    d37e:	4b64      	ldr	r3, [pc, #400]	; (d510 <isr+0xf2c>)
    d380:	4a64      	ldr	r2, [pc, #400]	; (d514 <isr+0xf30>)
    d382:	9301      	str	r3, [sp, #4]
    d384:	4b64      	ldr	r3, [pc, #400]	; (d518 <isr+0xf34>)
    d386:	4965      	ldr	r1, [pc, #404]	; (d51c <isr+0xf38>)
    d388:	9300      	str	r3, [sp, #0]
    d38a:	486a      	ldr	r0, [pc, #424]	; (d534 <isr+0xf50>)
    d38c:	4b6a      	ldr	r3, [pc, #424]	; (d538 <isr+0xf54>)
    d38e:	f001 f821 	bl	e3d4 <isr+0x1df0>
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d392:	356a      	adds	r5, #106	; 0x6a
			_radio.conn_curr->llcp_ack--;
    d394:	3b01      	subs	r3, #1
#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d396:	702a      	strb	r2, [r5, #0]
			_radio.conn_curr->llcp_ack--;
    d398:	700b      	strb	r3, [r1, #0]
    d39a:	e003      	b.n	d3a4 <isr+0xdc0>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		} else {
			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
			_radio.conn_curr->pause_tx = 0;
    d39c:	22f3      	movs	r2, #243	; 0xf3
			_radio.conn_curr->pause_tx = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		} else {
			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    d39e:	7819      	ldrb	r1, [r3, #0]
			_radio.conn_curr->pause_tx = 0;
    d3a0:	400a      	ands	r2, r1
    d3a2:	701a      	strb	r2, [r3, #0]
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (_radio.conn_curr->refresh) {
    d3a4:	4b65      	ldr	r3, [pc, #404]	; (d53c <isr+0xf58>)
    d3a6:	2040      	movs	r0, #64	; 0x40
    d3a8:	33fc      	adds	r3, #252	; 0xfc
    d3aa:	695a      	ldr	r2, [r3, #20]
    d3ac:	0011      	movs	r1, r2
    d3ae:	31c0      	adds	r1, #192	; 0xc0
    d3b0:	780b      	ldrb	r3, [r1, #0]
    d3b2:	4203      	tst	r3, r0
    d3b4:	d003      	beq.n	d3be <isr+0xdda>
			_radio.conn_curr->refresh = 0;
    d3b6:	4383      	bics	r3, r0
    d3b8:	700b      	strb	r3, [r1, #0]

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d3ba:	2309      	movs	r3, #9
    d3bc:	713b      	strb	r3, [r7, #4]
		}
		*rx_enqueue = 1;

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    d3be:	2300      	movs	r3, #0
    d3c0:	8753      	strh	r3, [r2, #58]	; 0x3a
			_radio.conn_curr->refresh = 0;

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
		}
		*rx_enqueue = 1;
    d3c2:	2401      	movs	r4, #1
    d3c4:	f000 fcfb 	bl	ddbe <isr+0x17da>
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    d3c8:	7b3b      	ldrb	r3, [r7, #12]
    d3ca:	7b79      	ldrb	r1, [r7, #13]
    d3cc:	4a5c      	ldr	r2, [pc, #368]	; (d540 <isr+0xf5c>)
    d3ce:	0209      	lsls	r1, r1, #8
    d3d0:	4313      	orrs	r3, r2
    d3d2:	002c      	movs	r4, r5
    d3d4:	430b      	orrs	r3, r1
    d3d6:	7bb9      	ldrb	r1, [r7, #14]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d3d8:	0030      	movs	r0, r6
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    d3da:	0409      	lsls	r1, r1, #16
    d3dc:	430b      	orrs	r3, r1
    d3de:	001a      	movs	r2, r3
    d3e0:	3498      	adds	r4, #152	; 0x98
    d3e2:	6823      	ldr	r3, [r4, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d3e4:	3059      	adds	r0, #89	; 0x59
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    d3e6:	03db      	lsls	r3, r3, #15
    d3e8:	0bdb      	lsrs	r3, r3, #15
    d3ea:	4013      	ands	r3, r2
    d3ec:	6023      	str	r3, [r4, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d3ee:	30ff      	adds	r0, #255	; 0xff
    d3f0:	f7fa fa3c 	bl	786c <mem_acquire>
    d3f4:	1e06      	subs	r6, r0, #0
	LL_ASSERT(node_tx);
    d3f6:	d106      	bne.n	d406 <isr+0xe22>
    d3f8:	4b45      	ldr	r3, [pc, #276]	; (d510 <isr+0xf2c>)
    d3fa:	9301      	str	r3, [sp, #4]
    d3fc:	4b46      	ldr	r3, [pc, #280]	; (d518 <isr+0xf34>)
    d3fe:	9300      	str	r3, [sp, #0]
    d400:	4b50      	ldr	r3, [pc, #320]	; (d544 <isr+0xf60>)
    d402:	f000 fca9 	bl	dd58 <isr+0x1774>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d406:	2203      	movs	r2, #3
    d408:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    d40a:	2100      	movs	r1, #0
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d40c:	4313      	orrs	r3, r2
    d40e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    d410:	2309      	movs	r3, #9
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    d412:	3205      	adds	r2, #5
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    d414:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    d416:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    d418:	3008      	adds	r0, #8
    d41a:	f7f3 fc42 	bl	ca2 <memset>
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    d41e:	7823      	ldrb	r3, [r4, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
		(conn->llcp_features >> 16) & 0xFF;

	ctrl_tx_enqueue(conn, node_tx);
    d420:	0031      	movs	r1, r6
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    d422:	7233      	strb	r3, [r6, #8]
		conn->llcp_features & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    d424:	6823      	ldr	r3, [r4, #0]
    d426:	0a1b      	lsrs	r3, r3, #8
    d428:	7273      	strb	r3, [r6, #9]
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    d42a:	6823      	ldr	r3, [r4, #0]
    d42c:	0c1b      	lsrs	r3, r3, #16
    d42e:	72b3      	strb	r3, [r6, #10]
    d430:	e3cf      	b.n	dbd2 <isr+0x15ee>
		struct pdu_data_llctrl_feature_rsp *rsp;

		rsp = &pdu_data_rx->payload.llctrl.ctrldata.feature_rsp;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d432:	7b3b      	ldrb	r3, [r7, #12]
    d434:	4a42      	ldr	r2, [pc, #264]	; (d540 <isr+0xf5c>)
    d436:	7b79      	ldrb	r1, [r7, #13]
    d438:	4313      	orrs	r3, r2
    d43a:	0209      	lsls	r1, r1, #8
    d43c:	0028      	movs	r0, r5
    d43e:	430b      	orrs	r3, r1
    d440:	7bb9      	ldrb	r1, [r7, #14]
    d442:	3098      	adds	r0, #152	; 0x98
    d444:	0409      	lsls	r1, r1, #16
    d446:	430b      	orrs	r3, r1
    d448:	001a      	movs	r2, r3
    d44a:	6803      	ldr	r3, [r0, #0]
    d44c:	03db      	lsls	r3, r3, #15
    d44e:	0bdb      	lsrs	r3, r3, #15
    d450:	4013      	ands	r3, r2
    d452:	6003      	str	r3, [r0, #0]
    d454:	e0af      	b.n	d5b6 <isr+0xfd2>
	}
	break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		pause_enc_rsp_send(_radio.conn_curr);
    d456:	0028      	movs	r0, r5
    d458:	f7fd fee8 	bl	b22c <pause_enc_rsp_send>

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    d45c:	0030      	movs	r0, r6

		/* key refresh */
		_radio.conn_curr->refresh = 1;

		/* disable receive encryption */
		_radio.conn_curr->enc_rx = 0;
    d45e:	2344      	movs	r3, #68	; 0x44
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		pause_enc_rsp_send(_radio.conn_curr);

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    d460:	30fc      	adds	r0, #252	; 0xfc
    d462:	6942      	ldr	r2, [r0, #20]
    d464:	32c0      	adds	r2, #192	; 0xc0
    d466:	7811      	ldrb	r1, [r2, #0]

		/* key refresh */
		_radio.conn_curr->refresh = 1;

		/* disable receive encryption */
		_radio.conn_curr->enc_rx = 0;
    d468:	430b      	orrs	r3, r1
    d46a:	2110      	movs	r1, #16
    d46c:	438b      	bics	r3, r1
    d46e:	7013      	strb	r3, [r2, #0]
    d470:	e769      	b.n	d346 <isr+0xd62>
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    d472:	7bf3      	ldrb	r3, [r6, #15]
    d474:	2b04      	cmp	r3, #4
    d476:	d10a      	bne.n	d48e <isr+0xeaa>
			/* reply with pause enc rsp */
			pause_enc_rsp_send(_radio.conn_curr);
    d478:	0028      	movs	r0, r5
    d47a:	f7fd fed7 	bl	b22c <pause_enc_rsp_send>

			/* disable receive encryption */
			_radio.conn_curr->enc_rx = 0;
    d47e:	0033      	movs	r3, r6
    d480:	2110      	movs	r1, #16
    d482:	33fc      	adds	r3, #252	; 0xfc
    d484:	695b      	ldr	r3, [r3, #20]
    d486:	33c0      	adds	r3, #192	; 0xc0
    d488:	781a      	ldrb	r2, [r3, #0]
    d48a:	438a      	bics	r2, r1
    d48c:	701a      	strb	r2, [r3, #0]
		}

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    d48e:	0030      	movs	r0, r6

		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
    d490:	2104      	movs	r1, #4
			/* disable receive encryption */
			_radio.conn_curr->enc_rx = 0;
		}

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    d492:	30fc      	adds	r0, #252	; 0xfc
    d494:	6942      	ldr	r2, [r0, #20]
    d496:	32c0      	adds	r2, #192	; 0xc0
    d498:	7813      	ldrb	r3, [r2, #0]

		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
    d49a:	430b      	orrs	r3, r1
    d49c:	311c      	adds	r1, #28
    d49e:	e7e5      	b.n	d46c <isr+0xe88>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
    d4a0:	002b      	movs	r3, r5
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
    d4a2:	7b3a      	ldrb	r2, [r7, #12]
		_radio.conn_curr->enc_tx = 0;
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
    d4a4:	339d      	adds	r3, #157	; 0x9d
    d4a6:	701a      	strb	r2, [r3, #0]
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
    d4a8:	7bbb      	ldrb	r3, [r7, #14]
    d4aa:	7b7a      	ldrb	r2, [r7, #13]
    d4ac:	021b      	lsls	r3, r3, #8
    d4ae:	4313      	orrs	r3, r2

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
    d4b0:	002a      	movs	r2, r5
    d4b2:	329e      	adds	r2, #158	; 0x9e
    d4b4:	8013      	strh	r3, [r2, #0]
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
    d4b6:	7c3b      	ldrb	r3, [r7, #16]
    d4b8:	7bfa      	ldrb	r2, [r7, #15]
    d4ba:	021b      	lsls	r3, r3, #8
    d4bc:	4313      	orrs	r3, r2
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
    d4be:	002a      	movs	r2, r5
    d4c0:	32a0      	adds	r2, #160	; 0xa0
    d4c2:	8013      	strh	r3, [r2, #0]
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
    d4c4:	2303      	movs	r3, #3
    d4c6:	3a04      	subs	r2, #4
    d4c8:	7811      	ldrb	r1, [r2, #0]
    d4ca:	2400      	movs	r4, #0
    d4cc:	400b      	ands	r3, r1
    d4ce:	2b01      	cmp	r3, #1
    d4d0:	d101      	bne.n	d4d6 <isr+0xef2>
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
    d4d2:	876c      	strh	r4, [r5, #58]	; 0x3a
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;
    d4d4:	001c      	movs	r4, r3

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    d4d6:	2102      	movs	r1, #2
    d4d8:	7813      	ldrb	r3, [r2, #0]

		if (_radio.conn_curr->llcp_version.tx == 0) {
    d4da:	2601      	movs	r6, #1

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    d4dc:	430b      	orrs	r3, r1

		if (_radio.conn_curr->llcp_version.tx == 0) {
    d4de:	0019      	movs	r1, r3
    d4e0:	4031      	ands	r1, r6

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    d4e2:	7013      	strb	r3, [r2, #0]

		if (_radio.conn_curr->llcp_version.tx == 0) {
    d4e4:	910a      	str	r1, [sp, #40]	; 0x28
    d4e6:	d001      	beq.n	d4ec <isr+0xf08>
    d4e8:	f000 fc69 	bl	ddbe <isr+0x17da>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d4ec:	4813      	ldr	r0, [pc, #76]	; (d53c <isr+0xf58>)
		}

		_radio.conn_curr->llcp_version.rx = 1;

		if (_radio.conn_curr->llcp_version.tx == 0) {
			_radio.conn_curr->llcp_version.tx = 1;
    d4ee:	4333      	orrs	r3, r6
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d4f0:	3059      	adds	r0, #89	; 0x59
		}

		_radio.conn_curr->llcp_version.rx = 1;

		if (_radio.conn_curr->llcp_version.tx == 0) {
			_radio.conn_curr->llcp_version.tx = 1;
    d4f2:	7013      	strb	r3, [r2, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d4f4:	30ff      	adds	r0, #255	; 0xff
    d4f6:	f7fa f9b9 	bl	786c <mem_acquire>
    d4fa:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    d4fc:	d126      	bne.n	d54c <isr+0xf68>
    d4fe:	4b04      	ldr	r3, [pc, #16]	; (d510 <isr+0xf2c>)
    d500:	9301      	str	r3, [sp, #4]
    d502:	4b05      	ldr	r3, [pc, #20]	; (d518 <isr+0xf34>)
    d504:	9300      	str	r3, [sp, #0]
    d506:	4b10      	ldr	r3, [pc, #64]	; (d548 <isr+0xf64>)
    d508:	f000 fc26 	bl	dd58 <isr+0x1774>
    d50c:	00007fff 	.word	0x00007fff
    d510:	0001241d 	.word	0x0001241d
    d514:	0001246d 	.word	0x0001246d
    d518:	000124a8 	.word	0x000124a8
    d51c:	000123e3 	.word	0x000123e3
    d520:	00013cb2 	.word	0x00013cb2
    d524:	00014ac2 	.word	0x00014ac2
    d528:	00013d54 	.word	0x00013d54
    d52c:	000004e2 	.word	0x000004e2
    d530:	00014ca3 	.word	0x00014ca3
    d534:	00013dd2 	.word	0x00013dd2
    d538:	0001496b 	.word	0x0001496b
    d53c:	20000f68 	.word	0x20000f68
    d540:	fffe30d0 	.word	0xfffe30d0
    d544:	000148b7 	.word	0x000148b7
    d548:	00014b03 	.word	0x00014b03

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d54c:	2203      	movs	r2, #3
    d54e:	7903      	ldrb	r3, [r0, #4]
    d550:	4313      	orrs	r3, r2
    d552:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    d554:	2306      	movs	r3, #6
    d556:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_version_ind);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d558:	18db      	adds	r3, r3, r3
    d55a:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    d55c:	3b03      	subs	r3, #3
    d55e:	7203      	strb	r3, [r0, #8]
		RADIO_BLE_VERSION_NUMBER;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    d560:	3b0a      	subs	r3, #10
    d562:	7243      	strb	r3, [r0, #9]
    d564:	7283      	strb	r3, [r0, #10]
		RADIO_BLE_COMPANY_ID;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    d566:	72c3      	strb	r3, [r0, #11]
    d568:	7303      	strb	r3, [r0, #12]
		RADIO_BLE_SUB_VERSION_NUMBER;

	ctrl_tx_enqueue(conn, node_tx);
    d56a:	0028      	movs	r0, r5
    d56c:	f7fd fdec 	bl	b148 <ctrl_tx_enqueue>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    d570:	002a      	movs	r2, r5
    d572:	2180      	movs	r1, #128	; 0x80
    d574:	32c0      	adds	r2, #192	; 0xc0
    d576:	7813      	ldrb	r3, [r2, #0]
    d578:	4249      	negs	r1, r1
    d57a:	430b      	orrs	r3, r1
    d57c:	7013      	strb	r3, [r2, #0]

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    d57e:	f7fa fbaf 	bl	7ce0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d582:	2203      	movs	r2, #3
    d584:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
	if (conn->pkt_tx_head) {
    d586:	35fc      	adds	r5, #252	; 0xfc
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d588:	4393      	bics	r3, r2
    d58a:	431e      	orrs	r6, r3
	pdu_data_tx->len = 0;
    d58c:	466b      	mov	r3, sp
    d58e:	3225      	adds	r2, #37	; 0x25
    d590:	189b      	adds	r3, r3, r2
    d592:	781b      	ldrb	r3, [r3, #0]
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d594:	7006      	strb	r6, [r0, #0]
	pdu_data_tx->len = 0;
    d596:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    d598:	68a9      	ldr	r1, [r5, #8]
    d59a:	3a18      	subs	r2, #24
    d59c:	b2f3      	uxtb	r3, r6
    d59e:	2900      	cmp	r1, #0
    d5a0:	d001      	beq.n	d5a6 <isr+0xfc2>
		pdu_data_tx->md = 1;
    d5a2:	4313      	orrs	r3, r2
    d5a4:	e000      	b.n	d5a8 <isr+0xfc4>
	} else {
		pdu_data_tx->md = 0;
    d5a6:	4393      	bics	r3, r2
    d5a8:	7003      	strb	r3, [r0, #0]
    d5aa:	f000 fc08 	bl	ddbe <isr+0x17da>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
		_radio.conn_curr->pause_tx = 0;
    d5ae:	22f3      	movs	r2, #243	; 0xf3
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    d5b0:	7819      	ldrb	r1, [r3, #0]
		_radio.conn_curr->pause_tx = 0;
    d5b2:	400a      	ands	r2, r1
    d5b4:	701a      	strb	r2, [r3, #0]

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    d5b6:	2300      	movs	r3, #0
    d5b8:	876b      	strh	r3, [r5, #58]	; 0x3a
    d5ba:	e702      	b.n	d3c2 <isr+0xdde>
		 */

		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
    d5bc:	002b      	movs	r3, r5
    d5be:	3369      	adds	r3, #105	; 0x69
    d5c0:	781b      	ldrb	r3, [r3, #0]
    d5c2:	22c2      	movs	r2, #194	; 0xc2
    d5c4:	930a      	str	r3, [sp, #40]	; 0x28
    d5c6:	002b      	movs	r3, r5
    d5c8:	3368      	adds	r3, #104	; 0x68
    d5ca:	781b      	ldrb	r3, [r3, #0]
    d5cc:	990a      	ldr	r1, [sp, #40]	; 0x28
    d5ce:	0052      	lsls	r2, r2, #1
    d5d0:	428b      	cmp	r3, r1
    d5d2:	d104      	bne.n	d5de <isr+0xffa>
    d5d4:	58b3      	ldr	r3, [r6, r2]
    d5d6:	2b00      	cmp	r3, #0
    d5d8:	d000      	beq.n	d5dc <isr+0xff8>
    d5da:	e0ad      	b.n	d738 <isr+0x1154>
    d5dc:	e01c      	b.n	d618 <isr+0x1034>
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
    d5de:	002b      	movs	r3, r5
    d5e0:	3344      	adds	r3, #68	; 0x44
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    d5e2:	781c      	ldrb	r4, [r3, #0]
    d5e4:	2301      	movs	r3, #1
    d5e6:	401c      	ands	r4, r3
    d5e8:	002b      	movs	r3, r5
		     (_radio.conn_curr->role.slave.role != 0) &&
    d5ea:	58b2      	ldr	r2, [r6, r2]
    d5ec:	336a      	adds	r3, #106	; 0x6a
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    d5ee:	2c00      	cmp	r4, #0
    d5f0:	d100      	bne.n	d5f4 <isr+0x1010>
    d5f2:	e099      	b.n	d728 <isr+0x1144>
		     (_radio.conn_curr->role.slave.role != 0) &&
    d5f4:	4295      	cmp	r5, r2
    d5f6:	d000      	beq.n	d5fa <isr+0x1016>
    d5f8:	e15b      	b.n	d8b2 <isr+0x12ce>
		     (_radio.conn_curr == _radio.conn_upd) &&
    d5fa:	781b      	ldrb	r3, [r3, #0]
    d5fc:	2b01      	cmp	r3, #1
    d5fe:	d000      	beq.n	d602 <isr+0x101e>
    d600:	e157      	b.n	d8b2 <isr+0x12ce>
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
		     ((_radio.conn_curr->llcp.connection_update.state ==
    d602:	002b      	movs	r3, r5
    d604:	3395      	adds	r3, #149	; 0x95
		       LLCP_CONN_STATE_INITIATE) ||
    d606:	781a      	ldrb	r2, [r3, #0]
    d608:	2307      	movs	r3, #7
    d60a:	4013      	ands	r3, r2
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
		     (_radio.conn_curr == _radio.conn_upd) &&
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
    d60c:	1e5a      	subs	r2, r3, #1
    d60e:	2a01      	cmp	r2, #1
    d610:	d902      	bls.n	d618 <isr+0x1034>
		     ((_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_INITIATE) ||
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_REQ) ||
    d612:	2b05      	cmp	r3, #5
    d614:	d000      	beq.n	d618 <isr+0x1034>
    d616:	e14c      	b.n	d8b2 <isr+0x12ce>
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_RSP_WAIT)))) {
			/* set mutex */
			if (_radio.conn_upd == 0) {
    d618:	23c2      	movs	r3, #194	; 0xc2
    d61a:	005b      	lsls	r3, r3, #1
    d61c:	58f2      	ldr	r2, [r6, r3]
    d61e:	2a00      	cmp	r2, #0
    d620:	d100      	bne.n	d624 <isr+0x1040>
				_radio.conn_upd = _radio.conn_curr;
    d622:	50f5      	str	r5, [r6, r3]

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
    d624:	7b7b      	ldrb	r3, [r7, #13]
    d626:	7b3a      	ldrb	r2, [r7, #12]
    d628:	021b      	lsls	r3, r3, #8
    d62a:	4313      	orrs	r3, r2
			}

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
    d62c:	002a      	movs	r2, r5
    d62e:	326c      	adds	r2, #108	; 0x6c
    d630:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
    d632:	7c7b      	ldrb	r3, [r7, #17]
    d634:	7c3a      	ldrb	r2, [r7, #16]
    d636:	021b      	lsls	r3, r3, #8
    d638:	4313      	orrs	r3, r2
			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
    d63a:	002a      	movs	r2, r5
    d63c:	326e      	adds	r2, #110	; 0x6e
    d63e:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
    d640:	7cfc      	ldrb	r4, [r7, #19]
    d642:	7cbb      	ldrb	r3, [r7, #18]
    d644:	0224      	lsls	r4, r4, #8
    d646:	431c      	orrs	r4, r3
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
    d648:	002b      	movs	r3, r5
    d64a:	3370      	adds	r3, #112	; 0x70
    d64c:	801c      	strh	r4, [r3, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
    d64e:	7d3a      	ldrb	r2, [r7, #20]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
    d650:	709a      	strb	r2, [r3, #2]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
    d652:	7dbb      	ldrb	r3, [r7, #22]
    d654:	7d7a      	ldrb	r2, [r7, #21]
    d656:	021b      	lsls	r3, r3, #8
    d658:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
    d65a:	002a      	movs	r2, r5
    d65c:	3274      	adds	r2, #116	; 0x74
    d65e:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
    d660:	7e3b      	ldrb	r3, [r7, #24]
    d662:	7dfa      	ldrb	r2, [r7, #23]
    d664:	021b      	lsls	r3, r3, #8
    d666:	4313      	orrs	r3, r2
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
    d668:	002a      	movs	r2, r5
    d66a:	3276      	adds	r2, #118	; 0x76
    d66c:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
    d66e:	7ebb      	ldrb	r3, [r7, #26]
    d670:	7e7a      	ldrb	r2, [r7, #25]
    d672:	021b      	lsls	r3, r3, #8
    d674:	4313      	orrs	r3, r2
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
    d676:	002a      	movs	r2, r5
    d678:	3278      	adds	r2, #120	; 0x78
    d67a:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
    d67c:	7f3b      	ldrb	r3, [r7, #28]
    d67e:	7efa      	ldrb	r2, [r7, #27]
    d680:	021b      	lsls	r3, r3, #8
    d682:	4313      	orrs	r3, r2
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
    d684:	002a      	movs	r2, r5
    d686:	327a      	adds	r2, #122	; 0x7a
    d688:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
    d68a:	7fbb      	ldrb	r3, [r7, #30]
    d68c:	7f7a      	ldrb	r2, [r7, #29]
    d68e:	021b      	lsls	r3, r3, #8
    d690:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
    d692:	002a      	movs	r2, r5
    d694:	327c      	adds	r2, #124	; 0x7c
    d696:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
    d698:	1c7b      	adds	r3, r7, #1
    d69a:	7fdb      	ldrb	r3, [r3, #31]
    d69c:	7ffa      	ldrb	r2, [r7, #31]
    d69e:	021b      	lsls	r3, r3, #8
    d6a0:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
    d6a2:	002a      	movs	r2, r5
    d6a4:	327e      	adds	r2, #126	; 0x7e
    d6a6:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;
    d6a8:	1cbb      	adds	r3, r7, #2
    d6aa:	7fda      	ldrb	r2, [r3, #31]
    d6ac:	1cfb      	adds	r3, r7, #3
    d6ae:	7fdb      	ldrb	r3, [r3, #31]
    d6b0:	021b      	lsls	r3, r3, #8
    d6b2:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
    d6b4:	002a      	movs	r2, r5
    d6b6:	3280      	adds	r2, #128	; 0x80
    d6b8:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;

			/* enqueue the conn param req, if parameters changed,
			 * else respond
			 */
			if ((_radio.conn_curr->llcp.connection_update.interval !=
    d6ba:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    d6bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    d6be:	4293      	cmp	r3, r2
    d6c0:	d10a      	bne.n	d6d8 <isr+0x10f4>
			     _radio.conn_curr->conn_interval) ||
			    (_radio.conn_curr->llcp.connection_update.latency
			     != _radio.conn_curr->latency) ||
    d6c2:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    d6c4:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    d6c6:	21fa      	movs	r1, #250	; 0xfa
    d6c8:	4358      	muls	r0, r3
    d6ca:	237d      	movs	r3, #125	; 0x7d
    d6cc:	0089      	lsls	r1, r1, #2
    d6ce:	4358      	muls	r0, r3
    d6d0:	f7f2 fdfa 	bl	2c8 <__aeabi_idiv>
    d6d4:	4284      	cmp	r4, r0
    d6d6:	d00e      	beq.n	d6f6 <isr+0x1112>
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
    d6d8:	002a      	movs	r2, r5
    d6da:	2107      	movs	r1, #7
    d6dc:	3295      	adds	r2, #149	; 0x95
    d6de:	7813      	ldrb	r3, [r2, #0]
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    d6e0:	2401      	movs	r4, #1
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
    d6e2:	438b      	bics	r3, r1
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    d6e4:	3903      	subs	r1, #3
    d6e6:	430b      	orrs	r3, r1
    d6e8:	3114      	adds	r1, #20
    d6ea:	438b      	bics	r3, r1
    d6ec:	7013      	strb	r3, [r2, #0]
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    d6ee:	002b      	movs	r3, r5
    d6f0:	336a      	adds	r3, #106	; 0x6a
    d6f2:	701c      	strb	r4, [r3, #0]
    d6f4:	e013      	b.n	d71e <isr+0x113a>
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    d6f6:	002b      	movs	r3, r5
    d6f8:	2201      	movs	r2, #1
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    d6fa:	2400      	movs	r4, #0
				_radio.conn_curr->llcp.connection_update.state =
    d6fc:	0029      	movs	r1, r5
    d6fe:	2007      	movs	r0, #7
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    d700:	3394      	adds	r3, #148	; 0x94
    d702:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    d704:	3b08      	subs	r3, #8
    d706:	601c      	str	r4, [r3, #0]
				_radio.conn_curr->llcp.connection_update.state =
    d708:	3195      	adds	r1, #149	; 0x95
    d70a:	780b      	ldrb	r3, [r1, #0]
    d70c:	4383      	bics	r3, r0
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    d70e:	3804      	subs	r0, #4
    d710:	4303      	orrs	r3, r0
    d712:	3015      	adds	r0, #21
    d714:	4383      	bics	r3, r0
    d716:	700b      	strb	r3, [r1, #0]

				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    d718:	002b      	movs	r3, r5
    d71a:	336a      	adds	r3, #106	; 0x6a
    d71c:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_ack--;
    d71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d720:	3569      	adds	r5, #105	; 0x69
    d722:	3b01      	subs	r3, #1
    d724:	702b      	strb	r3, [r5, #0]
    d726:	e34a      	b.n	ddbe <isr+0x17da>
		/* master in conn update procedure, master in any state we
		 * ignore this req
		 */
		else if ((_radio.conn_curr->llcp_req !=
			  _radio.conn_curr->llcp_ack) &&
			 (_radio.conn_curr->role.master.role == 0) &&
    d728:	4295      	cmp	r5, r2
    d72a:	d000      	beq.n	d72e <isr+0x114a>
    d72c:	e0c1      	b.n	d8b2 <isr+0x12ce>
			 (_radio.conn_curr == _radio.conn_upd) &&
    d72e:	781b      	ldrb	r3, [r3, #0]
    d730:	2b01      	cmp	r3, #1
    d732:	d000      	beq.n	d736 <isr+0x1152>
    d734:	e0bd      	b.n	d8b2 <isr+0x12ce>
    d736:	e342      	b.n	ddbe <isr+0x17da>
		 * set (another connection update in progress), hence reject
		 * this req.
		 */
		else if (_radio.conn_curr->llcp_req ==
			 _radio.conn_curr->llcp_ack) {
			reject_ind_ext_send(_radio.conn_curr,
    d738:	2220      	movs	r2, #32
    d73a:	210f      	movs	r1, #15
    d73c:	e1ea      	b.n	db14 <isr+0x1530>

static inline void
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
    d73e:	002a      	movs	r2, r5
    d740:	3268      	adds	r2, #104	; 0x68
    d742:	7811      	ldrb	r1, [r2, #0]
    d744:	7850      	ldrb	r0, [r2, #1]
    d746:	3201      	adds	r2, #1
    d748:	4288      	cmp	r0, r1
    d74a:	d04a      	beq.n	d7e2 <isr+0x11fe>
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;

		switch (_radio.conn_curr->llcp_type) {
    d74c:	002b      	movs	r3, r5
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    d74e:	7011      	strb	r1, [r2, #0]

		switch (_radio.conn_curr->llcp_type) {
    d750:	336a      	adds	r3, #106	; 0x6a
    d752:	781a      	ldrb	r2, [r3, #0]
    d754:	2a01      	cmp	r2, #1
    d756:	d13d      	bne.n	d7d4 <isr+0x11f0>

static inline void
isr_rx_conn_pkt_ctrl_rej_conn_upd(struct radio_pdu_node_rx *radio_pdu_node_rx,
				  u8_t *rx_enqueue)
{
	LL_ASSERT(_radio.conn_upd == _radio.conn_curr);
    d758:	21c2      	movs	r1, #194	; 0xc2
    d75a:	0049      	lsls	r1, r1, #1
    d75c:	5873      	ldr	r3, [r6, r1]
    d75e:	429d      	cmp	r5, r3
    d760:	d009      	beq.n	d776 <isr+0x1192>
    d762:	4bd6      	ldr	r3, [pc, #856]	; (dabc <isr+0x14d8>)
    d764:	4ad6      	ldr	r2, [pc, #856]	; (dac0 <isr+0x14dc>)
    d766:	9301      	str	r3, [sp, #4]
    d768:	4bd6      	ldr	r3, [pc, #856]	; (dac4 <isr+0x14e0>)
    d76a:	49d7      	ldr	r1, [pc, #860]	; (dac8 <isr+0x14e4>)
    d76c:	9300      	str	r3, [sp, #0]
    d76e:	48d7      	ldr	r0, [pc, #860]	; (dacc <isr+0x14e8>)
    d770:	4bd7      	ldr	r3, [pc, #860]	; (dad0 <isr+0x14ec>)
    d772:	f000 fe2f 	bl	e3d4 <isr+0x1df0>

	/* reset mutex */
	_radio.conn_upd = NULL;
    d776:	2300      	movs	r3, #0
    d778:	5073      	str	r3, [r6, r1]

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
    d77a:	0029      	movs	r1, r5
    d77c:	3144      	adds	r1, #68	; 0x44
    d77e:	7809      	ldrb	r1, [r1, #0]
    d780:	4211      	tst	r1, r2
    d782:	d003      	beq.n	d78c <isr+0x11a8>
		_radio.conn_curr->role.slave.ticks_to_offset =
		    _radio.conn_curr->llcp.connection_update.
    d784:	002a      	movs	r2, r5
    d786:	3288      	adds	r2, #136	; 0x88
	/* reset mutex */
	_radio.conn_upd = NULL;

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
		_radio.conn_curr->role.slave.ticks_to_offset =
    d788:	6812      	ldr	r2, [r2, #0]
    d78a:	666a      	str	r2, [r5, #100]	; 0x64
		    _radio.conn_curr->llcp.connection_update.
			ticks_to_offset_next;
	}

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;
    d78c:	876b      	strh	r3, [r5, #58]	; 0x3a

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    d78e:	002b      	movs	r3, r5
    d790:	3395      	adds	r3, #149	; 0x95
    d792:	781a      	ldrb	r2, [r3, #0]
    d794:	2318      	movs	r3, #24
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    d796:	2400      	movs	r4, #0

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    d798:	421a      	tst	r2, r3
    d79a:	d000      	beq.n	d79e <isr+0x11ba>
    d79c:	e30f      	b.n	ddbe <isr+0x17da>
		struct radio_le_conn_update_cmplt
			*radio_le_conn_update_cmplt;
		struct pdu_data *pdu_data_rx;

		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d79e:	3b10      	subs	r3, #16
    d7a0:	713b      	strb	r3, [r7, #4]
		/* prepare connection update complete structure */
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
    d7a2:	72fc      	strb	r4, [r7, #11]
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
    d7a4:	8cab      	ldrh	r3, [r5, #36]	; 0x24
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
		radio_le_conn_update_cmplt->timeout =
    d7a6:	21fa      	movs	r1, #250	; 0xfa
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
    d7a8:	0a1a      	lsrs	r2, r3, #8
    d7aa:	733b      	strb	r3, [r7, #12]
    d7ac:	737a      	strb	r2, [r7, #13]
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    d7ae:	1dea      	adds	r2, r5, #7
    d7b0:	7fd2      	ldrb	r2, [r2, #31]
		radio_le_conn_update_cmplt->timeout =
    d7b2:	0089      	lsls	r1, r1, #2
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    d7b4:	73ba      	strb	r2, [r7, #14]
    d7b6:	002a      	movs	r2, r5
    d7b8:	3208      	adds	r2, #8
    d7ba:	7fd2      	ldrb	r2, [r2, #31]
    d7bc:	73fa      	strb	r2, [r7, #15]
		radio_le_conn_update_cmplt->timeout =
    d7be:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    d7c0:	4358      	muls	r0, r3
    d7c2:	237d      	movs	r3, #125	; 0x7d
    d7c4:	4358      	muls	r0, r3
    d7c6:	f7f2 fd7f 	bl	2c8 <__aeabi_idiv>
    d7ca:	b280      	uxth	r0, r0
    d7cc:	7438      	strb	r0, [r7, #16]
    d7ce:	0a00      	lsrs	r0, r0, #8
    d7d0:	7478      	strb	r0, [r7, #17]
    d7d2:	e259      	b.n	dc88 <isr+0x16a4>
			isr_rx_conn_pkt_ctrl_rej_conn_upd(radio_pdu_node_rx,
							  rx_enqueue);
			break;

		default:
			LL_ASSERT(0);
    d7d4:	4bb9      	ldr	r3, [pc, #740]	; (dabc <isr+0x14d8>)
    d7d6:	9301      	str	r3, [sp, #4]
    d7d8:	4bba      	ldr	r3, [pc, #744]	; (dac4 <isr+0x14e0>)
    d7da:	9300      	str	r3, [sp, #0]
    d7dc:	4bbd      	ldr	r3, [pc, #756]	; (dad4 <isr+0x14f0>)
    d7de:	f000 fdf6 	bl	e3ce <isr+0x1dea>
			break;
		}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	} else if (_radio.conn_curr->llcp_length.ack !=
		   _radio.conn_curr->llcp_length.req) {
    d7e2:	002a      	movs	r2, r5
    d7e4:	32b4      	adds	r2, #180	; 0xb4
    d7e6:	7811      	ldrb	r1, [r2, #0]
			LL_ASSERT(0);
			break;
		}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	} else if (_radio.conn_curr->llcp_length.ack !=
    d7e8:	7850      	ldrb	r0, [r2, #1]
    d7ea:	3201      	adds	r2, #1
    d7ec:	4288      	cmp	r0, r1
    d7ee:	d023      	beq.n	d838 <isr+0x1254>
	struct pdu_data *pdu_data_rx;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	rej_ext_ind = (struct pdu_data_llctrl_reject_ext_ind *)
		      &pdu_data_rx->payload.llctrl.ctrldata.reject_ext_ind;
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    d7f0:	7b38      	ldrb	r0, [r7, #12]
    d7f2:	2400      	movs	r4, #0
    d7f4:	2814      	cmp	r0, #20
    d7f6:	d000      	beq.n	d7fa <isr+0x1216>
    d7f8:	e2e1      	b.n	ddbe <isr+0x17da>
		struct pdu_data_llctrl_length_req_rsp *lr;

		/* Procedure complete */
		_radio.conn_curr->llcp_length.ack =
    d7fa:	7011      	strb	r1, [r2, #0]
			_radio.conn_curr->llcp_length.req;
		_radio.conn_curr->procedure_expire = 0;

		/* Resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    d7fc:	2108      	movs	r1, #8
		struct pdu_data_llctrl_length_req_rsp *lr;

		/* Procedure complete */
		_radio.conn_curr->llcp_length.ack =
			_radio.conn_curr->llcp_length.req;
		_radio.conn_curr->procedure_expire = 0;
    d7fe:	876c      	strh	r4, [r5, #58]	; 0x3a

		/* Resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    d800:	781a      	ldrb	r2, [r3, #0]
    d802:	438a      	bics	r2, r1
    d804:	701a      	strb	r2, [r3, #0]

		/* prepare length rsp structure */
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    d806:	2309      	movs	r3, #9
    d808:	727b      	strb	r3, [r7, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_data_rx->payload.llctrl.opcode =
    d80a:	330c      	adds	r3, #12
    d80c:	72fb      	strb	r3, [r7, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
    d80e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    d810:	0a1a      	lsrs	r2, r3, #8
    d812:	733b      	strb	r3, [r7, #12]
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
    d814:	330e      	adds	r3, #14
    d816:	00db      	lsls	r3, r3, #3
    d818:	b29b      	uxth	r3, r3
    d81a:	73bb      	strb	r3, [r7, #14]
    d81c:	40cb      	lsrs	r3, r1
		pdu_data_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
    d81e:	737a      	strb	r2, [r7, #13]
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
    d820:	73fb      	strb	r3, [r7, #15]
		lr->max_tx_octets = _radio.conn_curr->max_tx_octets;
    d822:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    d824:	0a1a      	lsrs	r2, r3, #8
    d826:	743b      	strb	r3, [r7, #16]
		lr->max_tx_time = ((_radio.conn_curr->max_tx_octets + 14) << 3);
    d828:	330e      	adds	r3, #14
    d82a:	00db      	lsls	r3, r3, #3
    d82c:	b29b      	uxth	r3, r3
    d82e:	74bb      	strb	r3, [r7, #18]
    d830:	40cb      	lsrs	r3, r1

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
		lr->max_tx_octets = _radio.conn_curr->max_tx_octets;
    d832:	747a      	strb	r2, [r7, #17]
		lr->max_tx_time = ((_radio.conn_curr->max_tx_octets + 14) << 3);
    d834:	74fb      	strb	r3, [r7, #19]
    d836:	e227      	b.n	dc88 <isr+0x16a4>
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
		   _radio.conn_curr->llcp_phy.req) {
    d838:	002b      	movs	r3, r5
    d83a:	33bc      	adds	r3, #188	; 0xbc
    d83c:	781a      	ldrb	r2, [r3, #0]
		isr_rx_conn_pkt_ctrl_rej_dle(radio_pdu_node_rx,
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
    d83e:	7859      	ldrb	r1, [r3, #1]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    d840:	2400      	movs	r4, #0
		isr_rx_conn_pkt_ctrl_rej_dle(radio_pdu_node_rx,
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
    d842:	3301      	adds	r3, #1
    d844:	4291      	cmp	r1, r2
    d846:	d100      	bne.n	d84a <isr+0x1266>
    d848:	e2b9      	b.n	ddbe <isr+0x17da>
	struct pdu_data *pdu_data_rx;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	rej_ext_ind = (struct pdu_data_llctrl_reject_ext_ind *)
		      &pdu_data_rx->payload.llctrl.ctrldata.reject_ext_ind;
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    d84a:	7b39      	ldrb	r1, [r7, #12]
    d84c:	2916      	cmp	r1, #22
    d84e:	d000      	beq.n	d852 <isr+0x126e>
    d850:	e2b5      	b.n	ddbe <isr+0x17da>
		if (rej_ext_ind->error_code == 0x23) {
    d852:	7b79      	ldrb	r1, [r7, #13]
    d854:	2923      	cmp	r1, #35	; 0x23
    d856:	d100      	bne.n	d85a <isr+0x1276>
    d858:	e2b1      	b.n	ddbe <isr+0x17da>
		} else {
			/* Different Transaction Collision */
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
    d85a:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_phy.req;
			_radio.conn_curr->procedure_expire = 0;

			/* skip event generation is not cmd initiated */
			if (!_radio.conn_curr->llcp_phy.cmd) {
    d85c:	3302      	adds	r3, #2
    d85e:	781b      	ldrb	r3, [r3, #0]
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
				_radio.conn_curr->llcp_phy.req;
			_radio.conn_curr->procedure_expire = 0;
    d860:	876c      	strh	r4, [r5, #58]	; 0x3a

			/* skip event generation is not cmd initiated */
			if (!_radio.conn_curr->llcp_phy.cmd) {
    d862:	079b      	lsls	r3, r3, #30
    d864:	d400      	bmi.n	d868 <isr+0x1284>
    d866:	e2aa      	b.n	ddbe <isr+0x17da>
				return;
			}

			/* generate phy update complete event with error code */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d868:	230c      	movs	r3, #12
    d86a:	713b      	strb	r3, [r7, #4]

			p = (struct radio_le_phy_upd_cmplt *)
			    &pdu_data_rx->payload;
			p->status = rej_ext_ind->error_code;
    d86c:	7b7b      	ldrb	r3, [r7, #13]
    d86e:	72fb      	strb	r3, [r7, #11]
    d870:	e1ff      	b.n	dc72 <isr+0x168e>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d872:	0030      	movs	r0, r6
    d874:	3059      	adds	r0, #89	; 0x59
    d876:	30ff      	adds	r0, #255	; 0xff
    d878:	f7f9 fff8 	bl	786c <mem_acquire>
    d87c:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    d87e:	d105      	bne.n	d88c <isr+0x12a8>
    d880:	4b8e      	ldr	r3, [pc, #568]	; (dabc <isr+0x14d8>)
    d882:	9301      	str	r3, [sp, #4]
    d884:	4b8f      	ldr	r3, [pc, #572]	; (dac4 <isr+0x14e0>)
    d886:	9300      	str	r3, [sp, #0]
    d888:	4b93      	ldr	r3, [pc, #588]	; (dad8 <isr+0x14f4>)
    d88a:	e265      	b.n	dd58 <isr+0x1774>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d88c:	2203      	movs	r2, #3
    d88e:	7903      	ldrb	r3, [r0, #4]
    d890:	4313      	orrs	r3, r2
    d892:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    d894:	2301      	movs	r3, #1
    d896:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d898:	3312      	adds	r3, #18
    d89a:	71c3      	strb	r3, [r0, #7]
    d89c:	e199      	b.n	dbd2 <isr+0x15ee>
		ping_resp_send(_radio.conn_curr);
		break;

	case PDU_DATA_LLCTRL_TYPE_PING_RSP:
		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    d89e:	876c      	strh	r4, [r5, #58]	; 0x3a
    d8a0:	e551      	b.n	d346 <isr+0xd62>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		if (_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) {
    d8a2:	002a      	movs	r2, r5
    d8a4:	3268      	adds	r2, #104	; 0x68
    d8a6:	7811      	ldrb	r1, [r2, #0]
    d8a8:	7850      	ldrb	r0, [r2, #1]
    d8aa:	3201      	adds	r2, #1
    d8ac:	4288      	cmp	r0, r1
    d8ae:	d007      	beq.n	d8c0 <isr+0x12dc>
			/* reset ctrl procedure */
			_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    d8b0:	7011      	strb	r1, [r2, #0]

			switch (_radio.conn_curr->llcp_type) {
			default:
				LL_ASSERT(0);
    d8b2:	4b82      	ldr	r3, [pc, #520]	; (dabc <isr+0x14d8>)
    d8b4:	9301      	str	r3, [sp, #4]
    d8b6:	4b83      	ldr	r3, [pc, #524]	; (dac4 <isr+0x14e0>)
    d8b8:	9300      	str	r3, [sp, #0]
    d8ba:	4b88      	ldr	r3, [pc, #544]	; (dadc <isr+0x14f8>)
    d8bc:	f000 fd87 	bl	e3ce <isr+0x1dea>
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
    d8c0:	002a      	movs	r2, r5
    d8c2:	32b4      	adds	r2, #180	; 0xb4
    d8c4:	7811      	ldrb	r1, [r2, #0]
    d8c6:	7850      	ldrb	r0, [r2, #1]
			   _radio.conn_curr->llcp_length.ack) {
    d8c8:	3201      	adds	r2, #1
				LL_ASSERT(0);
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
    d8ca:	4288      	cmp	r0, r1
    d8cc:	d006      	beq.n	d8dc <isr+0x12f8>
			   _radio.conn_curr->llcp_length.ack) {
			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
    d8ce:	7011      	strb	r1, [r2, #0]
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    d8d0:	2108      	movs	r1, #8
    d8d2:	781a      	ldrb	r2, [r3, #0]

			/* propagate the data length procedure to
			 * host
			 */
			*rx_enqueue = 1;
    d8d4:	2401      	movs	r4, #1
			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    d8d6:	438a      	bics	r2, r1
    d8d8:	701a      	strb	r2, [r3, #0]
    d8da:	e021      	b.n	d920 <isr+0x133c>
			 */
			*rx_enqueue = 1;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		} else if (_radio.conn_curr->llcp_phy.req !=
    d8dc:	002b      	movs	r3, r5
    d8de:	33bc      	adds	r3, #188	; 0xbc
    d8e0:	781a      	ldrb	r2, [r3, #0]
    d8e2:	7859      	ldrb	r1, [r3, #1]
			   _radio.conn_curr->llcp_phy.ack) {
    d8e4:	3301      	adds	r3, #1
			 */
			*rx_enqueue = 1;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		} else if (_radio.conn_curr->llcp_phy.req !=
    d8e6:	4291      	cmp	r1, r2
    d8e8:	d016      	beq.n	d918 <isr+0x1334>
			   _radio.conn_curr->llcp_phy.ack) {
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
    d8ea:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_phy.req;

			/* skip event generation is not cmd initiated */
			if (_radio.conn_curr->llcp_phy.cmd) {
    d8ec:	3302      	adds	r3, #2
    d8ee:	781b      	ldrb	r3, [r3, #0]
    d8f0:	2400      	movs	r4, #0
    d8f2:	079b      	lsls	r3, r3, #30
    d8f4:	d514      	bpl.n	d920 <isr+0x133c>
				/* generate phy update complete event */
				radio_pdu_node_rx->hdr.type =
    d8f6:	230c      	movs	r3, #12
    d8f8:	713b      	strb	r3, [r7, #4]
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
				p->tx = _radio.conn_curr->phy_tx;
    d8fa:	002b      	movs	r3, r5
				radio_pdu_node_rx->hdr.type =
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
    d8fc:	72fc      	strb	r4, [r7, #11]
				p->tx = _radio.conn_curr->phy_tx;
    d8fe:	3332      	adds	r3, #50	; 0x32
    d900:	781b      	ldrb	r3, [r3, #0]
				p->rx = _radio.conn_curr->phy_rx;

				/* enqueue the phy update complete */
				*rx_enqueue = 1;
    d902:	3401      	adds	r4, #1
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
				p->tx = _radio.conn_curr->phy_tx;
    d904:	069b      	lsls	r3, r3, #26
    d906:	0f5b      	lsrs	r3, r3, #29
    d908:	733b      	strb	r3, [r7, #12]
				p->rx = _radio.conn_curr->phy_rx;
    d90a:	002b      	movs	r3, r5
    d90c:	3333      	adds	r3, #51	; 0x33
    d90e:	781b      	ldrb	r3, [r3, #0]
    d910:	069b      	lsls	r3, r3, #26
    d912:	0f5b      	lsrs	r3, r3, #29
    d914:	737b      	strb	r3, [r7, #13]
    d916:	e003      	b.n	d920 <isr+0x133c>
		} else {
			struct pdu_data_llctrl *llctrl;

			llctrl = (struct pdu_data_llctrl *)
				&pdu_data_rx->payload.llctrl;
			switch (llctrl->ctrldata.unknown_rsp.type) {
    d918:	7b3c      	ldrb	r4, [r7, #12]
				break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			default:
				/* enqueue the error and let HCI handle it */
				*rx_enqueue = 1;
    d91a:	3c12      	subs	r4, #18
    d91c:	1e63      	subs	r3, r4, #1
    d91e:	419c      	sbcs	r4, r3
				break;
			}
		}

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    d920:	2300      	movs	r3, #0
    d922:	876b      	strh	r3, [r5, #58]	; 0x3a
    d924:	e24b      	b.n	ddbe <isr+0x17da>
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    d926:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    d928:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    d92a:	930a      	str	r3, [sp, #40]	; 0x28

	if (/* Local idle, and Peer request then complete the Peer procedure
	     * with response.
	     */
	    ((_radio.conn_curr->llcp_length.req ==
    d92c:	002b      	movs	r3, r5
    d92e:	33b4      	adds	r3, #180	; 0xb4
    d930:	7819      	ldrb	r1, [r3, #0]
	      _radio.conn_curr->llcp_length.ack) &&
    d932:	3301      	adds	r3, #1
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
	eff_tx_octets = _radio.conn_curr->max_tx_octets;

	if (/* Local idle, and Peer request then complete the Peer procedure
    d934:	781b      	ldrb	r3, [r3, #0]
    d936:	428b      	cmp	r3, r1
    d938:	d008      	beq.n	d94c <isr+0x1368>
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
	     /* with Local requested and Peer request then complete the
	      * Peer procedure with response.
	      */
	     ((((_radio.conn_curr->llcp_length.state ==
    d93a:	002b      	movs	r3, r5
    d93c:	33b6      	adds	r3, #182	; 0xb6
		 LLCP_LENGTH_STATE_REQ) ||
    d93e:	781a      	ldrb	r2, [r3, #0]
    d940:	2303      	movs	r3, #3
    d942:	4013      	ands	r3, r2
	      _radio.conn_curr->llcp_length.ack) &&
	     (pdu_data_rx->payload.llctrl.opcode ==
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
	    /* or Local has active... */
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
    d944:	2b01      	cmp	r3, #1
    d946:	d901      	bls.n	d94c <isr+0x1368>
    d948:	f000 fd49 	bl	e3de <isr+0x1dfa>
	      * Peer procedure with response.
	      */
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
		(_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
    d94c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d94e:	2b14      	cmp	r3, #20
    d950:	d173      	bne.n	da3a <isr+0x1456>
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;

		/* use the minimal of our default_tx_octets and
		 * peer max_rx_octets
		 */
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    d952:	7b7b      	ldrb	r3, [r7, #13]
    d954:	7b3a      	ldrb	r2, [r7, #12]
    d956:	021b      	lsls	r3, r3, #8
    d958:	4313      	orrs	r3, r2
    d95a:	2b1a      	cmp	r3, #26
    d95c:	d906      	bls.n	d96c <isr+0x1388>
			eff_tx_octets = min(lr->max_rx_octets,
    d95e:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
    d960:	1c02      	adds	r2, r0, #0
    d962:	4298      	cmp	r0, r3
    d964:	d900      	bls.n	d968 <isr+0x1384>
    d966:	1c1a      	adds	r2, r3, #0
    d968:	b293      	uxth	r3, r2
    d96a:	930a      	str	r3, [sp, #40]	; 0x28
		}

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    d96c:	7c7b      	ldrb	r3, [r7, #17]
    d96e:	7c3a      	ldrb	r2, [r7, #16]
    d970:	021b      	lsls	r3, r3, #8
    d972:	4313      	orrs	r3, r2
    d974:	2b1a      	cmp	r3, #26
    d976:	d937      	bls.n	d9e8 <isr+0x1404>
			eff_rx_octets = min(lr->max_tx_octets,
					    RADIO_LL_LENGTH_OCTETS_RX_MAX);
		}

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    d978:	2e1b      	cmp	r6, #27
    d97a:	d035      	beq.n	d9e8 <isr+0x1404>
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    d97c:	f7fb fbf2 	bl	9164 <packet_rx_acquired_count_get>
				+ mem_free_count_get(_radio.pkt_rx_data_free);
    d980:	4d57      	ldr	r5, [pc, #348]	; (dae0 <isr+0x14fc>)

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    d982:	0004      	movs	r4, r0
				+ mem_free_count_get(_radio.pkt_rx_data_free);
    d984:	002e      	movs	r6, r5
    d986:	36fc      	adds	r6, #252	; 0xfc
    d988:	6b30      	ldr	r0, [r6, #48]	; 0x30
    d98a:	f7f9 ff9e 	bl	78ca <mem_free_count_get>

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    d98e:	1904      	adds	r4, r0, r4
    d990:	b2a0      	uxth	r0, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
			LL_ASSERT(free_count_rx <= 0xFF);
    d992:	28ff      	cmp	r0, #255	; 0xff
    d994:	d909      	bls.n	d9aa <isr+0x13c6>
    d996:	4b49      	ldr	r3, [pc, #292]	; (dabc <isr+0x14d8>)
    d998:	4a49      	ldr	r2, [pc, #292]	; (dac0 <isr+0x14dc>)
    d99a:	9301      	str	r3, [sp, #4]
    d99c:	4b49      	ldr	r3, [pc, #292]	; (dac4 <isr+0x14e0>)
    d99e:	494a      	ldr	r1, [pc, #296]	; (dac8 <isr+0x14e4>)
    d9a0:	9300      	str	r3, [sp, #0]
    d9a2:	4850      	ldr	r0, [pc, #320]	; (dae4 <isr+0x1500>)
    d9a4:	4b50      	ldr	r3, [pc, #320]	; (dae8 <isr+0x1504>)
    d9a6:	f000 fd15 	bl	e3d4 <isr+0x1df0>

			if (_radio.packet_rx_data_count == free_count_rx) {
    d9aa:	239b      	movs	r3, #155	; 0x9b
    d9ac:	005b      	lsls	r3, r3, #1
    d9ae:	5ceb      	ldrb	r3, [r5, r3]
    d9b0:	221b      	movs	r2, #27
    d9b2:	4283      	cmp	r3, r0
    d9b4:	d144      	bne.n	da40 <isr+0x145c>

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    d9b6:	4669      	mov	r1, sp
    d9b8:	6973      	ldr	r3, [r6, #20]
    d9ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
    d9bc:	4668      	mov	r0, sp
			LL_ASSERT(free_count_rx <= 0xFF);

			if (_radio.packet_rx_data_count == free_count_rx) {

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    d9be:	85d9      	strh	r1, [r3, #46]	; 0x2e

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    d9c0:	0019      	movs	r1, r3
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
    d9c2:	8d00      	ldrh	r0, [r0, #40]	; 0x28
				_radio.conn_curr->max_tx_octets = eff_tx_octets;

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    d9c4:	31b8      	adds	r1, #184	; 0xb8
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
    d9c6:	8048      	strh	r0, [r1, #2]
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
    d9c8:	0018      	movs	r0, r3
				_radio.conn_curr->max_tx_octets = eff_tx_octets;

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    d9ca:	800a      	strh	r2, [r1, #0]
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
    d9cc:	3904      	subs	r1, #4
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
    d9ce:	7809      	ldrb	r1, [r1, #0]
    d9d0:	30b5      	adds	r0, #181	; 0xb5
    d9d2:	3901      	subs	r1, #1
    d9d4:	7001      	strb	r1, [r0, #0]
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    d9d6:	2003      	movs	r0, #3
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    d9d8:	2400      	movs	r4, #0
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    d9da:	33b6      	adds	r3, #182	; 0xb6
    d9dc:	7819      	ldrb	r1, [r3, #0]
					LLCP_LENGTH_STATE_RESIZE;

				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
    d9de:	7428      	strb	r0, [r5, #16]
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    d9e0:	4301      	orrs	r1, r0
    d9e2:	7019      	strb	r1, [r3, #0]
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
    d9e4:	0023      	movs	r3, r4
    d9e6:	e02d      	b.n	da44 <isr+0x1460>
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    d9e8:	002a      	movs	r2, r5
    d9ea:	2008      	movs	r0, #8
    d9ec:	32c0      	adds	r2, #192	; 0xc0
    d9ee:	7813      	ldrb	r3, [r2, #0]
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);

			/* Enqueue data length change event (with no change in
			 * rx length happened), safe to enqueue rx.
			 */
			*rx_enqueue = 1;
    d9f0:	2401      	movs	r4, #1
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    d9f2:	4383      	bics	r3, r0
    d9f4:	7013      	strb	r3, [r2, #0]

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    d9f6:	466b      	mov	r3, sp
    d9f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
    d9fa:	0a32      	lsrs	r2, r6, #8
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    d9fc:	85eb      	strh	r3, [r5, #46]	; 0x2e

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
    d9fe:	002b      	movs	r3, r5
    da00:	33b5      	adds	r3, #181	; 0xb5
    da02:	7019      	strb	r1, [r3, #0]
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;
    da04:	2300      	movs	r3, #0
    da06:	876b      	strh	r3, [r5, #58]	; 0x3a

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
    da08:	737a      	strb	r2, [r7, #13]
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
    da0a:	0032      	movs	r2, r6
    da0c:	320e      	adds	r2, #14
    da0e:	00d2      	lsls	r2, r2, #3
    da10:	b292      	uxth	r2, r2
    da12:	73ba      	strb	r2, [r7, #14]
    da14:	40c2      	lsrs	r2, r0
			lr->max_tx_octets = eff_tx_octets;
    da16:	2128      	movs	r1, #40	; 0x28
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
    da18:	73fa      	strb	r2, [r7, #15]
			lr->max_tx_octets = eff_tx_octets;
    da1a:	466a      	mov	r2, sp
    da1c:	1852      	adds	r2, r2, r1
    da1e:	7812      	ldrb	r2, [r2, #0]
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
    da20:	733e      	strb	r6, [r7, #12]
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
			lr->max_tx_octets = eff_tx_octets;
    da22:	743a      	strb	r2, [r7, #16]
    da24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    da26:	40c2      	lsrs	r2, r0
    da28:	747a      	strb	r2, [r7, #17]
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);
    da2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    da2c:	320e      	adds	r2, #14
    da2e:	00d2      	lsls	r2, r2, #3
    da30:	b292      	uxth	r2, r2
    da32:	74ba      	strb	r2, [r7, #18]
    da34:	40c2      	lsrs	r2, r0
    da36:	74fa      	strb	r2, [r7, #19]
    da38:	e005      	b.n	da46 <isr+0x1462>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    da3a:	2400      	movs	r4, #0
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
    da3c:	0023      	movs	r3, r4
    da3e:	e002      	b.n	da46 <isr+0x1462>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    da40:	2400      	movs	r4, #0
				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
			} else {
				nack = 1;
    da42:	2301      	movs	r3, #1

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
			eff_rx_octets = min(lr->max_tx_octets,
    da44:	0016      	movs	r6, r2
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
    da46:	7afa      	ldrb	r2, [r7, #11]
    da48:	2a14      	cmp	r2, #20
    da4a:	d000      	beq.n	da4e <isr+0x146a>
    da4c:	e1b4      	b.n	ddb8 <isr+0x17d4>
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
	u8_t crc_close = 0;
    da4e:	2200      	movs	r2, #0
    da50:	920e      	str	r2, [sp, #56]	; 0x38
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
    da52:	4293      	cmp	r3, r2
    da54:	d000      	beq.n	da58 <isr+0x1474>
    da56:	e201      	b.n	de5c <isr+0x1878>
		length_resp_send(_radio.conn_curr, eff_rx_octets,
    da58:	4821      	ldr	r0, [pc, #132]	; (dae0 <isr+0x14fc>)
    da5a:	0003      	movs	r3, r0
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    da5c:	3059      	adds	r0, #89	; 0x59
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
		length_resp_send(_radio.conn_curr, eff_rx_octets,
    da5e:	33fc      	adds	r3, #252	; 0xfc
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    da60:	30ff      	adds	r0, #255	; 0xff
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
		length_resp_send(_radio.conn_curr, eff_rx_octets,
    da62:	695d      	ldr	r5, [r3, #20]
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    da64:	f7f9 ff02 	bl	786c <mem_acquire>
    da68:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    da6a:	d105      	bne.n	da78 <isr+0x1494>
    da6c:	4b13      	ldr	r3, [pc, #76]	; (dabc <isr+0x14d8>)
    da6e:	9301      	str	r3, [sp, #4]
    da70:	4b14      	ldr	r3, [pc, #80]	; (dac4 <isr+0x14e0>)
    da72:	9300      	str	r3, [sp, #0]
    da74:	4b1d      	ldr	r3, [pc, #116]	; (daec <isr+0x1508>)
    da76:	e16f      	b.n	dd58 <isr+0x1774>

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    da78:	2203      	movs	r2, #3
    da7a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
    da7c:	7206      	strb	r6, [r0, #8]

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    da7e:	4313      	orrs	r3, r2
    da80:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    da82:	2309      	movs	r3, #9
    da84:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    da86:	330c      	adds	r3, #12
    da88:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
    da8a:	0a33      	lsrs	r3, r6, #8
    da8c:	7243      	strb	r3, [r0, #9]
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
    da8e:	0033      	movs	r3, r6
    da90:	330e      	adds	r3, #14
    da92:	4093      	lsls	r3, r2
    da94:	b29b      	uxth	r3, r3
    da96:	7283      	strb	r3, [r0, #10]
    da98:	0a1b      	lsrs	r3, r3, #8
    da9a:	72c3      	strb	r3, [r0, #11]
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
    da9c:	466b      	mov	r3, sp
    da9e:	3225      	adds	r2, #37	; 0x25
    daa0:	189b      	adds	r3, r3, r2
    daa2:	781b      	ldrb	r3, [r3, #0]
    daa4:	7303      	strb	r3, [r0, #12]
    daa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    daa8:	0a1b      	lsrs	r3, r3, #8
    daaa:	7343      	strb	r3, [r0, #13]
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
    daac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    daae:	330e      	adds	r3, #14
    dab0:	00db      	lsls	r3, r3, #3
    dab2:	b29b      	uxth	r3, r3
    dab4:	7383      	strb	r3, [r0, #14]
    dab6:	0a1b      	lsrs	r3, r3, #8
    dab8:	73c3      	strb	r3, [r0, #15]
    daba:	e15e      	b.n	dd7a <isr+0x1796>
    dabc:	0001241d 	.word	0x0001241d
    dac0:	0001246d 	.word	0x0001246d
    dac4:	000124a8 	.word	0x000124a8
    dac8:	000123e3 	.word	0x000123e3
    dacc:	00013e2c 	.word	0x00013e2c
    dad0:	00014949 	.word	0x00014949
    dad4:	00014c8a 	.word	0x00014c8a
    dad8:	00014b30 	.word	0x00014b30
    dadc:	0001496b 	.word	0x0001496b
    dae0:	20000f68 	.word	0x20000f68
    dae4:	00013bbe 	.word	0x00013bbe
    dae8:	00014a21 	.word	0x00014a21
    daec:	00014a44 	.word	0x00014a44
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (_radio.role == ROLE_MASTER) {
    daf0:	7bf3      	ldrb	r3, [r6, #15]
    daf2:	2b04      	cmp	r3, #4
    daf4:	d14d      	bne.n	db92 <isr+0x15ae>
			if ((_radio.conn_curr->llcp_phy.ack !=
    daf6:	002b      	movs	r3, r5
    daf8:	33bd      	adds	r3, #189	; 0xbd
    dafa:	781a      	ldrb	r2, [r3, #0]
			     _radio.conn_curr->llcp_phy.req) &&
    dafc:	3b01      	subs	r3, #1
    dafe:	7819      	ldrb	r1, [r3, #0]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (_radio.role == ROLE_MASTER) {
			if ((_radio.conn_curr->llcp_phy.ack !=
    db00:	428a      	cmp	r2, r1
    db02:	d00c      	beq.n	db1e <isr+0x153a>
			     _radio.conn_curr->llcp_phy.req) &&
    db04:	7898      	ldrb	r0, [r3, #2]
    db06:	2303      	movs	r3, #3
    db08:	4003      	ands	r3, r0
    db0a:	3b01      	subs	r3, #1
    db0c:	2b02      	cmp	r3, #2
    db0e:	d806      	bhi.n	db1e <isr+0x153a>
			     (_radio.conn_curr->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
			     (_radio.conn_curr->llcp_phy.state ==
			      LLCP_PHY_STATE_UPD))) {
				/* cross-over */
				reject_ind_ext_send(_radio.conn_curr,
    db10:	2223      	movs	r2, #35	; 0x23
    db12:	2116      	movs	r1, #22
    db14:	0028      	movs	r0, r5
    db16:	f7fd fbb9 	bl	b28c <reject_ind_ext_send>
    db1a:	f7ff fc14 	bl	d346 <isr+0xd62>
				struct pdu_data_llctrl *c =
					&pdu_data_rx->payload.llctrl;
				struct pdu_data_llctrl_phy_req_rsp *p =
					&c->ctrldata.phy_req;

				_radio.conn_curr->llcp_phy.state =
    db1e:	002b      	movs	r3, r5
    db20:	2403      	movs	r4, #3
    db22:	33be      	adds	r3, #190	; 0xbe
    db24:	7818      	ldrb	r0, [r3, #0]
    db26:	4320      	orrs	r0, r4
    db28:	7018      	strb	r0, [r3, #0]
					LLCP_PHY_STATE_UPD;

				if (_radio.conn_curr->llcp_phy.ack ==
    db2a:	428a      	cmp	r2, r1
    db2c:	d11c      	bne.n	db68 <isr+0x1584>
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;
    db2e:	0029      	movs	r1, r5
    db30:	3a01      	subs	r2, #1
    db32:	31bd      	adds	r1, #189	; 0xbd
    db34:	700a      	strb	r2, [r1, #0]

					_radio.conn_curr->llcp_phy.cmd = 0;
    db36:	2102      	movs	r1, #2
    db38:	785a      	ldrb	r2, [r3, #1]

					_radio.conn_curr->llcp_phy.tx =
    db3a:	201c      	movs	r0, #28

				if (_radio.conn_curr->llcp_phy.ack ==
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;

					_radio.conn_curr->llcp_phy.cmd = 0;
    db3c:	438a      	bics	r2, r1
    db3e:	705a      	strb	r2, [r3, #1]

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
    db40:	002a      	movs	r2, r5
    db42:	3232      	adds	r2, #50	; 0x32
    db44:	7811      	ldrb	r1, [r2, #0]
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
    db46:	2207      	movs	r2, #7
    db48:	400a      	ands	r2, r1
    db4a:	0091      	lsls	r1, r2, #2
    db4c:	781a      	ldrb	r2, [r3, #0]
    db4e:	4382      	bics	r2, r0
    db50:	430a      	orrs	r2, r1
    db52:	701a      	strb	r2, [r3, #0]
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
						_radio.conn_curr->phy_pref_rx;
    db54:	002a      	movs	r2, r5
    db56:	3233      	adds	r2, #51	; 0x33
    db58:	7812      	ldrb	r2, [r2, #0]

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
    db5a:	7818      	ldrb	r0, [r3, #0]
						_radio.conn_curr->phy_pref_rx;
    db5c:	0752      	lsls	r2, r2, #29

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
    db5e:	0e11      	lsrs	r1, r2, #24
    db60:	221f      	movs	r2, #31
    db62:	4002      	ands	r2, r0
    db64:	430a      	orrs	r2, r1
    db66:	701a      	strb	r2, [r3, #0]
						_radio.conn_curr->phy_pref_rx;
				}

				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    db68:	35be      	adds	r5, #190	; 0xbe
    db6a:	7829      	ldrb	r1, [r5, #0]
    db6c:	7b7b      	ldrb	r3, [r7, #13]
    db6e:	06ca      	lsls	r2, r1, #27
    db70:	0f52      	lsrs	r2, r2, #29
    db72:	4013      	ands	r3, r2
    db74:	009a      	lsls	r2, r3, #2
    db76:	231c      	movs	r3, #28
    db78:	4399      	bics	r1, r3
    db7a:	000b      	movs	r3, r1
    db7c:	4313      	orrs	r3, r2
    db7e:	702b      	strb	r3, [r5, #0]
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    db80:	7b39      	ldrb	r1, [r7, #12]
    db82:	095a      	lsrs	r2, r3, #5
    db84:	400a      	ands	r2, r1
    db86:	211f      	movs	r1, #31
    db88:	0152      	lsls	r2, r2, #5
    db8a:	400b      	ands	r3, r1
    db8c:	4313      	orrs	r3, r2
    db8e:	f000 fc3c 	bl	e40a <isr+0x1e26>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    db92:	0030      	movs	r0, r6
    db94:	3059      	adds	r0, #89	; 0x59
    db96:	30ff      	adds	r0, #255	; 0xff
    db98:	f7f9 fe68 	bl	786c <mem_acquire>
    db9c:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    db9e:	d105      	bne.n	dbac <isr+0x15c8>
    dba0:	4bcb      	ldr	r3, [pc, #812]	; (ded0 <isr+0x18ec>)
    dba2:	9301      	str	r3, [sp, #4]
    dba4:	4bcb      	ldr	r3, [pc, #812]	; (ded4 <isr+0x18f0>)
    dba6:	9300      	str	r3, [sp, #0]
    dba8:	4bcb      	ldr	r3, [pc, #812]	; (ded8 <isr+0x18f4>)
    dbaa:	e0d5      	b.n	dd58 <isr+0x1774>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dbac:	2203      	movs	r2, #3
    dbae:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    dbb0:	7142      	strb	r2, [r0, #5]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dbb2:	4313      	orrs	r3, r2
    dbb4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    dbb6:	2317      	movs	r3, #23
    dbb8:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
		conn->phy_pref_tx;
    dbba:	002b      	movs	r3, r5
    dbbc:	3332      	adds	r3, #50	; 0x32
    dbbe:	781b      	ldrb	r3, [r3, #0]
    dbc0:	075b      	lsls	r3, r3, #29
    dbc2:	0f5b      	lsrs	r3, r3, #29
	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
    dbc4:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_tx;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
		conn->phy_pref_rx;
    dbc6:	002b      	movs	r3, r5
    dbc8:	3333      	adds	r3, #51	; 0x33
    dbca:	781b      	ldrb	r3, [r3, #0]
    dbcc:	075b      	lsls	r3, r3, #29
    dbce:	0f5b      	lsrs	r3, r3, #29
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
		conn->phy_pref_tx;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
    dbd0:	7243      	strb	r3, [r0, #9]
		conn->phy_pref_rx;

	ctrl_tx_enqueue(conn, node_tx);
    dbd2:	0028      	movs	r0, r5
    dbd4:	f7fd fab8 	bl	b148 <ctrl_tx_enqueue>
    dbd8:	f7ff fbb5 	bl	d346 <isr+0xd62>
			phy_rsp_send(_radio.conn_curr);
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
    dbdc:	7bf3      	ldrb	r3, [r6, #15]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    dbde:	2400      	movs	r4, #0
			phy_rsp_send(_radio.conn_curr);
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
    dbe0:	2b04      	cmp	r3, #4
    dbe2:	d000      	beq.n	dbe6 <isr+0x1602>
    dbe4:	e0eb      	b.n	ddbe <isr+0x17da>
    dbe6:	002b      	movs	r3, r5
    dbe8:	33bd      	adds	r3, #189	; 0xbd
    dbea:	781a      	ldrb	r2, [r3, #0]
    dbec:	3b01      	subs	r3, #1
    dbee:	781b      	ldrb	r3, [r3, #0]
    dbf0:	429a      	cmp	r2, r3
    dbf2:	d100      	bne.n	dbf6 <isr+0x1612>
    dbf4:	e0e3      	b.n	ddbe <isr+0x17da>
		    (_radio.conn_curr->llcp_phy.ack !=
		     _radio.conn_curr->llcp_phy.req) &&
		    (_radio.conn_curr->llcp_phy.state ==
    dbf6:	0029      	movs	r1, r5
    dbf8:	31be      	adds	r1, #190	; 0xbe
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
		    (_radio.conn_curr->llcp_phy.ack !=
		     _radio.conn_curr->llcp_phy.req) &&
    dbfa:	780b      	ldrb	r3, [r1, #0]
    dbfc:	2003      	movs	r0, #3
    dbfe:	001a      	movs	r2, r3
    dc00:	4002      	ands	r2, r0
    dc02:	2a02      	cmp	r2, #2
    dc04:	d000      	beq.n	dc08 <isr+0x1624>
    dc06:	e0da      	b.n	ddbe <isr+0x17da>
		    (_radio.conn_curr->llcp_phy.state ==
		     LLCP_PHY_STATE_RSP_WAIT)) {
			struct pdu_data_llctrl_phy_req_rsp *p =
				&pdu_data_rx->payload.llctrl.ctrldata.phy_rsp;

			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    dc08:	4318      	orrs	r0, r3
    dc0a:	7008      	strb	r0, [r1, #0]

			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    dc0c:	7b7b      	ldrb	r3, [r7, #13]
    dc0e:	06c2      	lsls	r2, r0, #27
    dc10:	0f52      	lsrs	r2, r2, #29
    dc12:	401a      	ands	r2, r3
    dc14:	231c      	movs	r3, #28
    dc16:	4398      	bics	r0, r3
    dc18:	0003      	movs	r3, r0
    dc1a:	0092      	lsls	r2, r2, #2
    dc1c:	4313      	orrs	r3, r2
    dc1e:	700b      	strb	r3, [r1, #0]
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    dc20:	7b38      	ldrb	r0, [r7, #12]
    dc22:	095a      	lsrs	r2, r3, #5
    dc24:	4002      	ands	r2, r0
    dc26:	201f      	movs	r0, #31
    dc28:	0152      	lsls	r2, r2, #5
    dc2a:	4003      	ands	r3, r0
    dc2c:	4313      	orrs	r3, r2
    dc2e:	700b      	strb	r3, [r1, #0]

			/* Procedure timeout is stopped */
			_radio.conn_curr->procedure_expire = 0;
    dc30:	876c      	strh	r4, [r5, #58]	; 0x3a
    dc32:	e0c4      	b.n	ddbe <isr+0x17da>

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	p = &pdu_data_rx->payload.llctrl.ctrldata.phy_upd_ind;

	/* Both tx and rx PHY unchanged */
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
    dc34:	7b3a      	ldrb	r2, [r7, #12]
    dc36:	7b7b      	ldrb	r3, [r7, #13]
    dc38:	4313      	orrs	r3, r2
    dc3a:	2207      	movs	r2, #7
    dc3c:	4013      	ands	r3, r2
    dc3e:	d125      	bne.n	dc8c <isr+0x16a8>
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    dc40:	002a      	movs	r2, r5
    dc42:	0029      	movs	r1, r5
    dc44:	32bc      	adds	r2, #188	; 0xbc
    dc46:	31bd      	adds	r1, #189	; 0xbd
    dc48:	7810      	ldrb	r0, [r2, #0]
    dc4a:	780a      	ldrb	r2, [r1, #0]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    dc4c:	001c      	movs	r4, r3
	/* Both tx and rx PHY unchanged */
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    dc4e:	4282      	cmp	r2, r0
    dc50:	d100      	bne.n	dc54 <isr+0x1670>
    dc52:	e0b4      	b.n	ddbe <isr+0x17da>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT) ||
    dc54:	002a      	movs	r2, r5
    dc56:	32be      	adds	r2, #190	; 0xbe
    dc58:	8814      	ldrh	r4, [r2, #0]
    dc5a:	4ea0      	ldr	r6, [pc, #640]	; (dedc <isr+0x18f8>)
    dc5c:	4aa0      	ldr	r2, [pc, #640]	; (dee0 <isr+0x18fc>)
    dc5e:	4022      	ands	r2, r4
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    dc60:	001c      	movs	r4, r3
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT) ||
    dc62:	42b2      	cmp	r2, r6
    dc64:	d000      	beq.n	dc68 <isr+0x1684>
    dc66:	e0aa      	b.n	ddbe <isr+0x17da>
		    (!conn->llcp_phy.cmd)) {
			return 0;
		}

		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
    dc68:	7008      	strb	r0, [r1, #0]
		conn->procedure_expire = 0;
    dc6a:	876b      	strh	r3, [r5, #58]	; 0x3a

		/* generate phy update complete event */
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    dc6c:	330c      	adds	r3, #12
    dc6e:	713b      	strb	r3, [r7, #4]

		p = (struct radio_le_phy_upd_cmplt *)&pdu_data_rx->payload;
		p->status = 0;
    dc70:	72fc      	strb	r4, [r7, #11]
		p->tx = conn->phy_tx;
    dc72:	002b      	movs	r3, r5
    dc74:	3332      	adds	r3, #50	; 0x32
    dc76:	781b      	ldrb	r3, [r3, #0]
		p->rx = conn->phy_rx;
    dc78:	3533      	adds	r5, #51	; 0x33
		/* generate phy update complete event */
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;

		p = (struct radio_le_phy_upd_cmplt *)&pdu_data_rx->payload;
		p->status = 0;
		p->tx = conn->phy_tx;
    dc7a:	069b      	lsls	r3, r3, #26
    dc7c:	0f5b      	lsrs	r3, r3, #29
    dc7e:	733b      	strb	r3, [r7, #12]
		p->rx = conn->phy_rx;
    dc80:	782b      	ldrb	r3, [r5, #0]
    dc82:	069b      	lsls	r3, r3, #26
    dc84:	0f5b      	lsrs	r3, r3, #29
    dc86:	737b      	strb	r3, [r7, #13]

		/* enqueue the phy update complete */
		*rx_enqueue = 1;
    dc88:	3401      	adds	r4, #1
    dc8a:	e098      	b.n	ddbe <isr+0x17da>

		return 0;
	}

	/* instant passed */
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    dc8c:	7bfb      	ldrb	r3, [r7, #15]
    dc8e:	7bba      	ldrb	r2, [r7, #14]
    dc90:	021b      	lsls	r3, r3, #8
    dc92:	4313      	orrs	r3, r2
    dc94:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    dc96:	1a9b      	subs	r3, r3, r2
    dc98:	4a92      	ldr	r2, [pc, #584]	; (dee4 <isr+0x1900>)
    dc9a:	b29b      	uxth	r3, r3
    dc9c:	4293      	cmp	r3, r2
    dc9e:	dd00      	ble.n	dca2 <isr+0x16be>
    dca0:	e3b1      	b.n	e406 <isr+0x1e22>
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    dca2:	002b      	movs	r3, r5
    dca4:	3368      	adds	r3, #104	; 0x68
    dca6:	7819      	ldrb	r1, [r3, #0]
    dca8:	3301      	adds	r3, #1
    dcaa:	781b      	ldrb	r3, [r3, #0]
    dcac:	428b      	cmp	r3, r1
    dcae:	d008      	beq.n	dcc2 <isr+0x16de>
    dcb0:	4b87      	ldr	r3, [pc, #540]	; (ded0 <isr+0x18ec>)
    dcb2:	9301      	str	r3, [sp, #4]
    dcb4:	4b87      	ldr	r3, [pc, #540]	; (ded4 <isr+0x18f0>)
    dcb6:	9300      	str	r3, [sp, #0]
    dcb8:	4b8b      	ldr	r3, [pc, #556]	; (dee8 <isr+0x1904>)
    dcba:	4a8c      	ldr	r2, [pc, #560]	; (deec <isr+0x1908>)
    dcbc:	498c      	ldr	r1, [pc, #560]	; (def0 <isr+0x190c>)
    dcbe:	488d      	ldr	r0, [pc, #564]	; (def4 <isr+0x1910>)
    dcc0:	e388      	b.n	e3d4 <isr+0x1df0>

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    dcc2:	002b      	movs	r3, r5
    dcc4:	33bc      	adds	r3, #188	; 0xbc
    dcc6:	781a      	ldrb	r2, [r3, #0]
    dcc8:	7858      	ldrb	r0, [r3, #1]
    dcca:	3301      	adds	r3, #1
    dccc:	4290      	cmp	r0, r2
    dcce:	d012      	beq.n	dcf6 <isr+0x1712>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    dcd0:	0028      	movs	r0, r5
    dcd2:	30be      	adds	r0, #190	; 0xbe
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    dcd4:	7804      	ldrb	r4, [r0, #0]
    dcd6:	2003      	movs	r0, #3
    dcd8:	4004      	ands	r4, r0
    dcda:	2c02      	cmp	r4, #2
    dcdc:	d10b      	bne.n	dcf6 <isr+0x1712>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
		conn->llcp_phy.ack = conn->llcp_phy.req;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    dcde:	0028      	movs	r0, r5

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
		conn->llcp_phy.ack = conn->llcp_phy.req;
    dce0:	701a      	strb	r2, [r3, #0]
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    dce2:	789a      	ldrb	r2, [r3, #2]
    dce4:	2302      	movs	r3, #2
    dce6:	306c      	adds	r0, #108	; 0x6c
    dce8:	4013      	ands	r3, r2
    dcea:	7802      	ldrb	r2, [r0, #0]
    dcec:	43a2      	bics	r2, r4
    dcee:	4313      	orrs	r3, r2
    dcf0:	7003      	strb	r3, [r0, #0]

		/* Procedure complete, just wait for instant */
		conn->procedure_expire = 0;
    dcf2:	2300      	movs	r3, #0
    dcf4:	876b      	strh	r3, [r5, #58]	; 0x3a
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
    dcf6:	002a      	movs	r2, r5
    dcf8:	2407      	movs	r4, #7
    dcfa:	261c      	movs	r6, #28
    dcfc:	7b7b      	ldrb	r3, [r7, #13]
    dcfe:	326c      	adds	r2, #108	; 0x6c
    dd00:	7810      	ldrb	r0, [r2, #0]
    dd02:	4023      	ands	r3, r4
    dd04:	43b0      	bics	r0, r6
    dd06:	009b      	lsls	r3, r3, #2
    dd08:	4303      	orrs	r3, r0
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
    dd0a:	201f      	movs	r0, #31

		/* Procedure complete, just wait for instant */
		conn->procedure_expire = 0;
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
    dd0c:	7013      	strb	r3, [r2, #0]
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
    dd0e:	7b3b      	ldrb	r3, [r7, #12]
    dd10:	7816      	ldrb	r6, [r2, #0]
    dd12:	015b      	lsls	r3, r3, #5
    dd14:	4030      	ands	r0, r6
    dd16:	4303      	orrs	r3, r0
    dd18:	7013      	strb	r3, [r2, #0]
	conn->llcp.phy_upd_ind.instant = p->instant;
    dd1a:	7bfb      	ldrb	r3, [r7, #15]
    dd1c:	7bb8      	ldrb	r0, [r7, #14]
    dd1e:	021b      	lsls	r3, r3, #8
    dd20:	4303      	orrs	r3, r0
    dd22:	0028      	movs	r0, r5
    dd24:	306e      	adds	r0, #110	; 0x6e
    dd26:	8003      	strh	r3, [r0, #0]
	conn->llcp.phy_upd_ind.initiate = 0;
    dd28:	2001      	movs	r0, #1
    dd2a:	7813      	ldrb	r3, [r2, #0]

	conn->llcp_type = LLCP_PHY_UPD;
	conn->llcp_ack--;
    dd2c:	3901      	subs	r1, #1
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
	conn->llcp.phy_upd_ind.instant = p->instant;
	conn->llcp.phy_upd_ind.initiate = 0;
    dd2e:	4383      	bics	r3, r0
    dd30:	7013      	strb	r3, [r2, #0]

	conn->llcp_type = LLCP_PHY_UPD;
    dd32:	002b      	movs	r3, r5
	conn->llcp_ack--;
    dd34:	3569      	adds	r5, #105	; 0x69
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
	conn->llcp.phy_upd_ind.instant = p->instant;
	conn->llcp.phy_upd_ind.initiate = 0;

	conn->llcp_type = LLCP_PHY_UPD;
    dd36:	336a      	adds	r3, #106	; 0x6a
    dd38:	701c      	strb	r4, [r3, #0]
	conn->llcp_ack--;
    dd3a:	7029      	strb	r1, [r5, #0]
    dd3c:	f7ff fb03 	bl	d346 <isr+0xd62>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    dd40:	0030      	movs	r0, r6
    dd42:	3059      	adds	r0, #89	; 0x59
    dd44:	30ff      	adds	r0, #255	; 0xff
    dd46:	f7f9 fd91 	bl	786c <mem_acquire>
    dd4a:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    dd4c:	d108      	bne.n	dd60 <isr+0x177c>
    dd4e:	4b60      	ldr	r3, [pc, #384]	; (ded0 <isr+0x18ec>)
    dd50:	9301      	str	r3, [sp, #4]
    dd52:	4b60      	ldr	r3, [pc, #384]	; (ded4 <isr+0x18f0>)
    dd54:	9300      	str	r3, [sp, #0]
    dd56:	4b68      	ldr	r3, [pc, #416]	; (def8 <isr+0x1914>)
    dd58:	4a64      	ldr	r2, [pc, #400]	; (deec <isr+0x1908>)
    dd5a:	4965      	ldr	r1, [pc, #404]	; (def0 <isr+0x190c>)
    dd5c:	4867      	ldr	r0, [pc, #412]	; (defc <isr+0x1918>)
    dd5e:	e339      	b.n	e3d4 <isr+0x1df0>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dd60:	2203      	movs	r2, #3
    dd62:	7903      	ldrb	r3, [r0, #4]
    dd64:	4313      	orrs	r3, r2
    dd66:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    dd68:	2302      	movs	r3, #2
    dd6a:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_unknown_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    dd6c:	3305      	adds	r3, #5
    dd6e:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
    dd70:	466b      	mov	r3, sp
    dd72:	3235      	adds	r2, #53	; 0x35
    dd74:	189b      	adds	r3, r3, r2
    dd76:	781b      	ldrb	r3, [r3, #0]
    dd78:	7203      	strb	r3, [r0, #8]

	ctrl_tx_enqueue(conn, node_tx);
    dd7a:	0028      	movs	r0, r5
    dd7c:	f7fd f9e4 	bl	b148 <ctrl_tx_enqueue>
    dd80:	e01d      	b.n	ddbe <isr+0x17da>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
							    rx_enqueue);
				break;
			case PDU_DATA_LLID_RESV:
			default:
				LL_ASSERT(0);
    dd82:	4b53      	ldr	r3, [pc, #332]	; (ded0 <isr+0x18ec>)
    dd84:	9301      	str	r3, [sp, #4]
    dd86:	4b53      	ldr	r3, [pc, #332]	; (ded4 <isr+0x18f0>)
    dd88:	9300      	str	r3, [sp, #0]
    dd8a:	4b5d      	ldr	r3, [pc, #372]	; (df00 <isr+0x191c>)
    dd8c:	e31f      	b.n	e3ce <isr+0x1dea>
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		} else if ((_radio.conn_curr->enc_rx) ||
    dd8e:	0030      	movs	r0, r6
    dd90:	30fc      	adds	r0, #252	; 0xfc
    dd92:	6943      	ldr	r3, [r0, #20]
    dd94:	001a      	movs	r2, r3
    dd96:	32c0      	adds	r2, #192	; 0xc0
    dd98:	7814      	ldrb	r4, [r2, #0]
    dd9a:	2214      	movs	r2, #20
    dd9c:	4014      	ands	r4, r2
    dd9e:	d100      	bne.n	dda2 <isr+0x17be>
    dda0:	e337      	b.n	e412 <isr+0x1e2e>
			   (_radio.conn_curr->pause_rx)) {
			/* start authenticated payload (pre) timeout */
			if (_radio.conn_curr->apto_expire == 0) {
    dda2:	1d1a      	adds	r2, r3, #4
    dda4:	8fd4      	ldrh	r4, [r2, #62]	; 0x3e
    dda6:	2c00      	cmp	r4, #0
    dda8:	d000      	beq.n	ddac <isr+0x17c8>
    ddaa:	e331      	b.n	e410 <isr+0x1e2c>
				_radio.conn_curr->appto_expire =
    ddac:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
					_radio.conn_curr->appto_reload;
				_radio.conn_curr->apto_expire =
					_radio.conn_curr->apto_reload;
    ddae:	3302      	adds	r3, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		} else if ((_radio.conn_curr->enc_rx) ||
			   (_radio.conn_curr->pause_rx)) {
			/* start authenticated payload (pre) timeout */
			if (_radio.conn_curr->apto_expire == 0) {
				_radio.conn_curr->appto_expire =
    ddb0:	8799      	strh	r1, [r3, #60]	; 0x3c
					_radio.conn_curr->appto_reload;
				_radio.conn_curr->apto_expire =
    ddb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    ddb4:	87d3      	strh	r3, [r2, #62]	; 0x3e
    ddb6:	e32c      	b.n	e412 <isr+0x1e2e>
			}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		}

		if (!nack) {
    ddb8:	2b00      	cmp	r3, #0
    ddba:	d000      	beq.n	ddbe <isr+0x17da>
    ddbc:	e332      	b.n	e424 <isr+0x1e40>
			_radio.conn_curr->nesn++;
    ddbe:	4b51      	ldr	r3, [pc, #324]	; (df04 <isr+0x1920>)
    ddc0:	33fc      	adds	r3, #252	; 0xfc
    ddc2:	695d      	ldr	r5, [r3, #20]
    ddc4:	2302      	movs	r3, #2
    ddc6:	002a      	movs	r2, r5
    ddc8:	32c0      	adds	r2, #192	; 0xc0
    ddca:	7811      	ldrb	r1, [r2, #0]
    ddcc:	404b      	eors	r3, r1
    ddce:	7013      	strb	r3, [r2, #0]

			if (ccm_rx_increment) {
    ddd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	d100      	bne.n	ddd8 <isr+0x17f4>
    ddd6:	e325      	b.n	e424 <isr+0x1e40>
				_radio.conn_curr->ccm_rx.counter++;
    ddd8:	002b      	movs	r3, r5
    ddda:	002e      	movs	r6, r5
    dddc:	33d0      	adds	r3, #208	; 0xd0
    ddde:	36d4      	adds	r6, #212	; 0xd4
    dde0:	681b      	ldr	r3, [r3, #0]
    dde2:	7832      	ldrb	r2, [r6, #0]
    dde4:	0a1b      	lsrs	r3, r3, #8
    dde6:	0612      	lsls	r2, r2, #24
    dde8:	431a      	orrs	r2, r3
    ddea:	0010      	movs	r0, r2
    ddec:	002a      	movs	r2, r5
    ddee:	32d8      	adds	r2, #216	; 0xd8
    ddf0:	6833      	ldr	r3, [r6, #0]
    ddf2:	7812      	ldrb	r2, [r2, #0]
    ddf4:	0a1b      	lsrs	r3, r3, #8
    ddf6:	0612      	lsls	r2, r2, #24
    ddf8:	431a      	orrs	r2, r3
    ddfa:	0011      	movs	r1, r2
    ddfc:	2300      	movs	r3, #0
    ddfe:	2201      	movs	r2, #1
    de00:	1812      	adds	r2, r2, r0
    de02:	414b      	adcs	r3, r1
    de04:	920a      	str	r2, [sp, #40]	; 0x28
    de06:	930b      	str	r3, [sp, #44]	; 0x2c
    de08:	2228      	movs	r2, #40	; 0x28
    de0a:	466b      	mov	r3, sp
    de0c:	189b      	adds	r3, r3, r2
    de0e:	781b      	ldrb	r3, [r3, #0]
    de10:	35d1      	adds	r5, #209	; 0xd1
    de12:	702b      	strb	r3, [r5, #0]
    de14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    de16:	0a19      	lsrs	r1, r3, #8
    de18:	0e1a      	lsrs	r2, r3, #24
    de1a:	7069      	strb	r1, [r5, #1]
    de1c:	70ea      	strb	r2, [r5, #3]
    de1e:	0c19      	lsrs	r1, r3, #16
    de20:	222c      	movs	r2, #44	; 0x2c
    de22:	466b      	mov	r3, sp
    de24:	189b      	adds	r3, r3, r2
    de26:	781b      	ldrb	r3, [r3, #0]
    de28:	70a9      	strb	r1, [r5, #2]
    de2a:	712b      	strb	r3, [r5, #4]
    de2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de2e:	0a1a      	lsrs	r2, r3, #8
    de30:	716a      	strb	r2, [r5, #5]
    de32:	0c1a      	lsrs	r2, r3, #16
    de34:	0e1b      	lsrs	r3, r3, #24
    de36:	71aa      	strb	r2, [r5, #6]
    de38:	71eb      	strb	r3, [r5, #7]
    de3a:	e2f3      	b.n	e424 <isr+0x1e40>
		if (terminate) {
			goto isr_rx_conn_exit;
		}
	} else {
		/* Start CRC error countdown, if not already started */
		if (_radio.crc_expire == 0) {
    de3c:	7d93      	ldrb	r3, [r2, #22]
    de3e:	2b00      	cmp	r3, #0
    de40:	d101      	bne.n	de46 <isr+0x1862>
			_radio.crc_expire = 2;
    de42:	3302      	adds	r3, #2
    de44:	7593      	strb	r3, [r2, #22]
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
    de46:	35ff      	adds	r5, #255	; 0xff
    de48:	7dae      	ldrb	r6, [r5, #22]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    de4a:	2400      	movs	r4, #0
		if (_radio.crc_expire == 0) {
			_radio.crc_expire = 2;
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
    de4c:	3e01      	subs	r6, #1
    de4e:	b2f3      	uxtb	r3, r6
    de50:	75ab      	strb	r3, [r5, #22]
		crc_close = (_radio.crc_expire == 0);
    de52:	425e      	negs	r6, r3
    de54:	415e      	adcs	r6, r3
    de56:	b2f3      	uxtb	r3, r6
    de58:	930e      	str	r3, [sp, #56]	; 0x38

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    de5a:	940c      	str	r4, [sp, #48]	; 0x30
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    de5c:	4d29      	ldr	r5, [pc, #164]	; (df04 <isr+0x1920>)
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    de5e:	a915      	add	r1, sp, #84	; 0x54
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    de60:	002b      	movs	r3, r5
    de62:	33fc      	adds	r3, #252	; 0xfc
    de64:	6958      	ldr	r0, [r3, #20]
    de66:	0003      	movs	r3, r0
    de68:	33c0      	adds	r3, #192	; 0xc0
    de6a:	781b      	ldrb	r3, [r3, #0]
    de6c:	09de      	lsrs	r6, r3, #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    de6e:	f7fb fcad 	bl	97cc <prepare_pdu_data_tx>
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    de72:	7c2b      	ldrb	r3, [r5, #16]
    de74:	2b03      	cmp	r3, #3
    de76:	d015      	beq.n	dea4 <isr+0x18c0>
    de78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    de7a:	2303      	movs	r3, #3
    de7c:	2a00      	cmp	r2, #0
    de7e:	d111      	bne.n	dea4 <isr+0x18c0>
    de80:	9a11      	ldr	r2, [sp, #68]	; 0x44
    de82:	2a00      	cmp	r2, #0
    de84:	d006      	beq.n	de94 <isr+0x18b0>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    de86:	7a3a      	ldrb	r2, [r7, #8]
    de88:	06d2      	lsls	r2, r2, #27
    de8a:	d403      	bmi.n	de94 <isr+0x18b0>
    de8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    de8e:	7852      	ldrb	r2, [r2, #1]
    de90:	2a00      	cmp	r2, #0
    de92:	d007      	beq.n	dea4 <isr+0x18c0>
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
    de94:	002b      	movs	r3, r5
    de96:	33fc      	adds	r3, #252	; 0xfc
    de98:	695b      	ldr	r3, [r3, #20]
    de9a:	33a7      	adds	r3, #167	; 0xa7

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
    de9c:	781b      	ldrb	r3, [r3, #0]
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    de9e:	1e5a      	subs	r2, r3, #1
    dea0:	4193      	sbcs	r3, r2
    dea2:	3302      	adds	r3, #2
    dea4:	742b      	strb	r3, [r5, #16]
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
			STATE_CLOSE : STATE_TX;

	if (_radio.state == STATE_CLOSE) {
    dea6:	2b03      	cmp	r3, #3
    dea8:	d12e      	bne.n	df08 <isr+0x1924>
		/* Event close for master */
		if (_radio.role == ROLE_MASTER) {
    deaa:	7beb      	ldrb	r3, [r5, #15]
    deac:	2b04      	cmp	r3, #4
    deae:	d10b      	bne.n	dec8 <isr+0x18e4>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    deb0:	227f      	movs	r2, #127	; 0x7f
    deb2:	35fc      	adds	r5, #252	; 0xfc
    deb4:	6969      	ldr	r1, [r5, #20]
    deb6:	01f3      	lsls	r3, r6, #7
    deb8:	31c0      	adds	r1, #192	; 0xc0
    deba:	7808      	ldrb	r0, [r1, #0]
    debc:	4002      	ands	r2, r0
    debe:	4313      	orrs	r3, r2
    dec0:	700b      	strb	r3, [r1, #0]

			radio_disable();
    dec2:	f7f9 fec3 	bl	7c4c <radio_disable>
    dec6:	e047      	b.n	df58 <isr+0x1974>

			goto isr_rx_conn_exit;
		}
		/* Event close for slave */
		else {
			radio_switch_complete_and_disable();
    dec8:	f7f9 ff22 	bl	7d10 <radio_switch_complete_and_disable>
    decc:	e02a      	b.n	df24 <isr+0x1940>
    dece:	46c0      	nop			; (mov r8, r8)
    ded0:	0001241d 	.word	0x0001241d
    ded4:	000124a8 	.word	0x000124a8
    ded8:	00014a6e 	.word	0x00014a6e
    dedc:	00000202 	.word	0x00000202
    dee0:	00000203 	.word	0x00000203
    dee4:	00007fff 	.word	0x00007fff
    dee8:	000148ed 	.word	0x000148ed
    deec:	0001246d 	.word	0x0001246d
    def0:	000123e3 	.word	0x000123e3
    def4:	00013d90 	.word	0x00013d90
    def8:	00014c15 	.word	0x00014c15
    defc:	00013b6c 	.word	0x00013b6c
    df00:	00014ab2 	.word	0x00014ab2
    df04:	20000f68 	.word	0x20000f68
		}
	} else {	/* if (_radio.state == STATE_TX) */
		radio_tmr_tifs_set(RADIO_TIFS);
    df08:	2096      	movs	r0, #150	; 0x96
    df0a:	f7f9 ff95 	bl	7e38 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    df0e:	002b      	movs	r3, r5
    df10:	33fc      	adds	r3, #252	; 0xfc
    df12:	695b      	ldr	r3, [r3, #20]
    df14:	3333      	adds	r3, #51	; 0x33
    df16:	7818      	ldrb	r0, [r3, #0]
    df18:	0680      	lsls	r0, r0, #26
    df1a:	0f40      	lsrs	r0, r0, #29
    df1c:	f7f9 fee8 	bl	7cf0 <radio_switch_complete_and_rx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_end_capture();
    df20:	f7fa f856 	bl	7fd0 <radio_tmr_end_capture>
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
    df24:	35fc      	adds	r5, #252	; 0xfc
    df26:	6968      	ldr	r0, [r5, #20]
    df28:	2301      	movs	r3, #1
    df2a:	0006      	movs	r6, r0
    df2c:	9915      	ldr	r1, [sp, #84]	; 0x54
    df2e:	36c0      	adds	r6, #192	; 0xc0
    df30:	7832      	ldrb	r2, [r6, #0]
    df32:	780d      	ldrb	r5, [r1, #0]
    df34:	401a      	ands	r2, r3
    df36:	3307      	adds	r3, #7
    df38:	439d      	bics	r5, r3
    df3a:	00d2      	lsls	r2, r2, #3
    df3c:	432a      	orrs	r2, r5
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    df3e:	2504      	movs	r5, #4

		radio_tmr_end_capture();
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
    df40:	700a      	strb	r2, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    df42:	7832      	ldrb	r2, [r6, #0]
    df44:	3b07      	subs	r3, #7
    df46:	0852      	lsrs	r2, r2, #1
    df48:	4013      	ands	r3, r2
    df4a:	009a      	lsls	r2, r3, #2
    df4c:	780b      	ldrb	r3, [r1, #0]
    df4e:	43ab      	bics	r3, r5
    df50:	4313      	orrs	r3, r2
    df52:	700b      	strb	r3, [r1, #0]

	/* setup the radio tx packet buffer */
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    df54:	f7fb fcc1 	bl	98da <tx_packet_set>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
    df58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df5a:	2b00      	cmp	r3, #0
    df5c:	d006      	beq.n	df6c <isr+0x1988>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    df5e:	4bc7      	ldr	r3, [pc, #796]	; (e27c <isr+0x1c98>)
    df60:	990c      	ldr	r1, [sp, #48]	; 0x30
    df62:	33fc      	adds	r3, #252	; 0xfc
    df64:	695b      	ldr	r3, [r3, #20]
    df66:	8c18      	ldrh	r0, [r3, #32]
    df68:	f7fb ff58 	bl	9e1c <pdu_node_tx_release>
	}

	/* enqueue any rx packet/event towards application */
	if (rx_enqueue) {
    df6c:	2c00      	cmp	r4, #0
    df6e:	d100      	bne.n	df72 <isr+0x198e>
    df70:	e28b      	b.n	e48a <isr+0x1ea6>
		/* set data flow control lock on currently rx-ed connection */
		rx_fc_lock(_radio.conn_curr->handle);
    df72:	4cc2      	ldr	r4, [pc, #776]	; (e27c <isr+0x1c98>)
    df74:	34fc      	adds	r4, #252	; 0xfc
    df76:	6963      	ldr	r3, [r4, #20]
    df78:	8c18      	ldrh	r0, [r3, #32]
    df7a:	f7fb fd25 	bl	99c8 <rx_fc_lock>

		/* set the connection handle and enqueue */
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    df7e:	6963      	ldr	r3, [r4, #20]
    df80:	8c1b      	ldrh	r3, [r3, #32]
    df82:	80fb      	strh	r3, [r7, #6]
		packet_rx_enqueue();
    df84:	f7fb fcd2 	bl	992c <packet_rx_enqueue>
    df88:	e27f      	b.n	e48a <isr+0x1ea6>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
    df8a:	4bbd      	ldr	r3, [pc, #756]	; (e280 <isr+0x1c9c>)
    df8c:	9301      	str	r3, [sp, #4]
    df8e:	4bbd      	ldr	r3, [pc, #756]	; (e284 <isr+0x1ca0>)
    df90:	9300      	str	r3, [sp, #0]
    df92:	4bbd      	ldr	r3, [pc, #756]	; (e288 <isr+0x1ca4>)
    df94:	e21b      	b.n	e3ce <isr+0x1dea>

static inline void isr_radio_state_close(void)
{
	u32_t dont_close = 0;

	switch (_radio.role) {
    df96:	7be8      	ldrb	r0, [r5, #15]
    df98:	b2c0      	uxtb	r0, r0
    df9a:	2804      	cmp	r0, #4
    df9c:	d900      	bls.n	dfa0 <isr+0x19bc>
    df9e:	e20b      	b.n	e3b8 <isr+0x1dd4>
    dfa0:	f7f2 f8fe 	bl	1a0 <__gnu_thumb1_case_uhi>
    dfa4:	000501fb 	.word	0x000501fb
    dfa8:	007c0047 	.word	0x007c0047
    dfac:	007c      	.short	0x007c

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
    dfae:	2b03      	cmp	r3, #3
    dfb0:	d10b      	bne.n	dfca <isr+0x19e6>
	    (_radio.advertiser.chan_map_current != 0)) {
    dfb2:	1d6b      	adds	r3, r5, #5

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
    dfb4:	7fda      	ldrb	r2, [r3, #31]
    dfb6:	230e      	movs	r3, #14
    dfb8:	421a      	tst	r2, r3
    dfba:	d006      	beq.n	dfca <isr+0x19e6>
	    (_radio.advertiser.chan_map_current != 0)) {
		dont_close = 1;

		adv_setup();
    dfbc:	f7fc f976 	bl	a2ac <adv_setup>

		radio_tx_enable();
    dfc0:	f7f9 fe3e 	bl	7c40 <radio_tx_enable>

		radio_tmr_end_capture();
    dfc4:	f7fa f804 	bl	7fd0 <radio_tmr_end_capture>
    dfc8:	e25f      	b.n	e48a <isr+0x1ea6>
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();
    dfca:	f7f9 fef5 	bl	7db8 <radio_filter_disable>

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
    dfce:	7c2b      	ldrb	r3, [r5, #16]
    dfd0:	2b03      	cmp	r3, #3
    dfd2:	d000      	beq.n	dfd6 <isr+0x19f2>
    dfd4:	e229      	b.n	e42a <isr+0x1e46>
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
    dfd6:	002b      	movs	r3, r5
    dfd8:	3375      	adds	r3, #117	; 0x75
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
    dfda:	781a      	ldrb	r2, [r3, #0]
    dfdc:	2327      	movs	r3, #39	; 0x27
    dfde:	4353      	muls	r3, r2
    dfe0:	3320      	adds	r3, #32
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
    dfe2:	18eb      	adds	r3, r5, r3

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
    dfe4:	79da      	ldrb	r2, [r3, #7]
    dfe6:	230f      	movs	r3, #15
    dfe8:	4013      	ands	r3, r2
    dfea:	2b01      	cmp	r3, #1
    dfec:	d100      	bne.n	dff0 <isr+0x1a0c>
    dfee:	e21c      	b.n	e42a <isr+0x1e46>
			 * condition where in the Adv role is being stopped but
			 * at the same time it is preempted by Adv event that
			 * gets into close state. Accept failure when Adv role
			 * is being stopped.
			 */
			ticker_status =
    dff0:	4ba6      	ldr	r3, [pc, #664]	; (e28c <isr+0x1ca8>)
    dff2:	2000      	movs	r0, #0
    dff4:	9306      	str	r3, [sp, #24]
    dff6:	4ba6      	ldr	r3, [pc, #664]	; (e290 <isr+0x1cac>)
    dff8:	9004      	str	r0, [sp, #16]
    dffa:	9305      	str	r3, [sp, #20]
    dffc:	2348      	movs	r3, #72	; 0x48
    dffe:	9003      	str	r0, [sp, #12]
    e000:	33ff      	adds	r3, #255	; 0xff
    e002:	9002      	str	r0, [sp, #8]
    e004:	9001      	str	r0, [sp, #4]
    e006:	9000      	str	r0, [sp, #0]
    e008:	2205      	movs	r2, #5
    e00a:	0001      	movs	r1, r0
    e00c:	f7fa ff62 	bl	8ed4 <ticker_update>
					      TICKER_US_TO_TICKS(random_delay *
								 1000),
					      0, 0, 0, 0, 0,
					      ticker_update_adv_assert,
					      (void *)__LINE__);
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e010:	2302      	movs	r3, #2
    e012:	4398      	bics	r0, r3
    e014:	d100      	bne.n	e018 <isr+0x1a34>
    e016:	e208      	b.n	e42a <isr+0x1e46>
    e018:	7bab      	ldrb	r3, [r5, #14]
    e01a:	2b05      	cmp	r3, #5
    e01c:	d100      	bne.n	e020 <isr+0x1a3c>
    e01e:	e204      	b.n	e42a <isr+0x1e46>
    e020:	4b97      	ldr	r3, [pc, #604]	; (e280 <isr+0x1c9c>)
    e022:	4a9c      	ldr	r2, [pc, #624]	; (e294 <isr+0x1cb0>)
    e024:	9301      	str	r3, [sp, #4]
    e026:	4b97      	ldr	r3, [pc, #604]	; (e284 <isr+0x1ca0>)
    e028:	499b      	ldr	r1, [pc, #620]	; (e298 <isr+0x1cb4>)
    e02a:	9300      	str	r3, [sp, #0]
    e02c:	489b      	ldr	r0, [pc, #620]	; (e29c <isr+0x1cb8>)
    e02e:	4b9c      	ldr	r3, [pc, #624]	; (e2a0 <isr+0x1cbc>)
    e030:	e1d0      	b.n	e3d4 <isr+0x1df0>

static inline u32_t isr_close_scan(void)
{
	u32_t dont_close = 0;

	if (_radio.state == STATE_CLOSE) {
    e032:	2b03      	cmp	r3, #3
    e034:	d124      	bne.n	e080 <isr+0x1a9c>
		dont_close = 1;

		radio_tmr_tifs_set(RADIO_TIFS);
    e036:	2096      	movs	r0, #150	; 0x96
    e038:	f7f9 fefe 	bl	7e38 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0);
    e03c:	2100      	movs	r1, #0
    e03e:	0008      	movs	r0, r1
    e040:	f7f9 fe5e 	bl	7d00 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    e044:	233e      	movs	r3, #62	; 0x3e
    e046:	002a      	movs	r2, r5
    e048:	33ff      	adds	r3, #255	; 0xff
    e04a:	5ceb      	ldrb	r3, [r5, r3]
    e04c:	32fc      	adds	r2, #252	; 0xfc
    e04e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    e050:	009b      	lsls	r3, r3, #2
    e052:	5898      	ldr	r0, [r3, r2]
    e054:	3008      	adds	r0, #8
    e056:	f7f9 fdd5 	bl	7c04 <radio_pkt_rx_set>
					pdu_data);
		radio_rssi_measure();
    e05a:	f7f9 fe61 	bl	7d20 <radio_rssi_measure>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		if (ctrl_rl_enabled()) {
    e05e:	f001 fca5 	bl	f9ac <ctrl_rl_enabled>
    e062:	2800      	cmp	r0, #0
    e064:	d007      	beq.n	e076 <isr+0x1a92>
			u8_t count, *irks = ctrl_irks_get(&count);
    e066:	ac15      	add	r4, sp, #84	; 0x54
    e068:	0020      	movs	r0, r4
    e06a:	f001 facb 	bl	f604 <ctrl_irks_get>
    e06e:	0001      	movs	r1, r0

			radio_ar_configure(count, irks);
    e070:	7820      	ldrb	r0, [r4, #0]
    e072:	f7fa f863 	bl	813c <radio_ar_configure>
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		_radio.state = STATE_RX;
    e076:	2301      	movs	r3, #1
    e078:	742b      	strb	r3, [r5, #16]

		radio_rx_enable();
    e07a:	f7f9 fddb 	bl	7c34 <radio_rx_enable>
    e07e:	e7a1      	b.n	dfc4 <isr+0x19e0>

		radio_tmr_end_capture();
	} else {
		radio_filter_disable();
    e080:	f7f9 fe9a 	bl	7db8 <radio_filter_disable>

		if (_radio.state == STATE_ABORT) {
    e084:	7c2b      	ldrb	r3, [r5, #16]
    e086:	2b05      	cmp	r3, #5
    e088:	d000      	beq.n	e08c <isr+0x1aa8>
    e08a:	e1ce      	b.n	e42a <isr+0x1e46>
			/* Scanner stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e08c:	2000      	movs	r0, #0
    e08e:	2204      	movs	r2, #4
    e090:	9000      	str	r0, [sp, #0]
    e092:	0003      	movs	r3, r0
    e094:	0001      	movs	r1, r0
    e096:	f7fa ff6d 	bl	8f74 <ticker_stop>
    e09a:	e1c6      	b.n	e42a <isr+0x1e46>
	u16_t elapsed_event;
	u16_t lazy;
	u8_t force;

	/* Local initiated terminate happened */
	if (_radio.conn_curr == 0) {
    e09c:	002c      	movs	r4, r5
    e09e:	34fc      	adds	r4, #252	; 0xfc
    e0a0:	6960      	ldr	r0, [r4, #20]
    e0a2:	2800      	cmp	r0, #0
    e0a4:	d100      	bne.n	e0a8 <isr+0x1ac4>
    e0a6:	e1c0      	b.n	e42a <isr+0x1e46>
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
    e0a8:	7beb      	ldrb	r3, [r5, #15]
    e0aa:	2b03      	cmp	r3, #3
    e0ac:	d10c      	bne.n	e0c8 <isr+0x1ae4>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
    e0ae:	0003      	movs	r3, r0
    e0b0:	33a7      	adds	r3, #167	; 0xa7
    e0b2:	7819      	ldrb	r1, [r3, #0]
	if (_radio.conn_curr == 0) {
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
    e0b4:	2900      	cmp	r1, #0
    e0b6:	d007      	beq.n	e0c8 <isr+0x1ae4>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
    e0b8:	f7fc f966 	bl	a388 <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    e0bc:	6960      	ldr	r0, [r4, #20]
    e0be:	f7fc f82f 	bl	a120 <connection_release>
		_radio.conn_curr = NULL;
    e0c2:	2300      	movs	r3, #0
    e0c4:	6163      	str	r3, [r4, #20]
    e0c6:	e1b0      	b.n	e42a <isr+0x1e46>
		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
    e0c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    e0ca:	930c      	str	r3, [sp, #48]	; 0x30
	elapsed_event = latency_event + 1;
    e0cc:	1c5c      	adds	r4, r3, #1

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
    e0ce:	002b      	movs	r3, r5
    e0d0:	33ff      	adds	r3, #255	; 0xff
    e0d2:	7d5e      	ldrb	r6, [r3, #21]
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;
    e0d4:	b2a4      	uxth	r4, r4

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
    e0d6:	7beb      	ldrb	r3, [r5, #15]
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
    e0d8:	2e00      	cmp	r6, #0
    e0da:	d05f      	beq.n	e19c <isr+0x1bb8>
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
    e0dc:	2b03      	cmp	r3, #3
    e0de:	d153      	bne.n	e188 <isr+0x1ba4>
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
    e0e0:	35fc      	adds	r5, #252	; 0xfc
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
    e0e2:	f7f9 ff69 	bl	7fb8 <radio_tmr_aa_get>
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
    e0e6:	696d      	ldr	r5, [r5, #20]
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
    e0e8:	0007      	movs	r7, r0
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
    e0ea:	002b      	movs	r3, r5
    e0ec:	3333      	adds	r3, #51	; 0x33
    e0ee:	781b      	ldrb	r3, [r3, #0]
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
			window_widening_event_us =
    e0f0:	6d68      	ldr	r0, [r5, #84]	; 0x54
				_radio.conn_curr->role.slave.window_widening_event_us;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
    e0f2:	069b      	lsls	r3, r3, #26
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    e0f4:	0f5b      	lsrs	r3, r3, #29
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
    e0f6:	2618      	movs	r6, #24
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    e0f8:	2b02      	cmp	r3, #2
    e0fa:	d005      	beq.n	e108 <isr+0x1b24>
    e0fc:	2b04      	cmp	r3, #4
    e0fe:	d102      	bne.n	e106 <isr+0x1b22>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    e100:	3661      	adds	r6, #97	; 0x61
    e102:	36ff      	adds	r6, #255	; 0xff
    e104:	e000      	b.n	e108 <isr+0x1b24>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
    e106:	2628      	movs	r6, #40	; 0x28
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			preamble_to_addr_us = addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
    e108:	0003      	movs	r3, r0
    e10a:	3320      	adds	r3, #32
    e10c:	199b      	adds	r3, r3, r6
    e10e:	930e      	str	r3, [sp, #56]	; 0x38
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
    e110:	4a64      	ldr	r2, [pc, #400]	; (e2a4 <isr+0x1cc0>)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
    e112:	429f      	cmp	r7, r3
    e114:	d80c      	bhi.n	e130 <isr+0x1b4c>
			    start_to_address_expected_us) {
				ticks_drift_plus =
    e116:	2300      	movs	r3, #0
    e118:	2100      	movs	r1, #0
    e11a:	f7f2 f9e1 	bl	4e0 <__aeabi_lmul>
    e11e:	2307      	movs	r3, #7
    e120:	4a61      	ldr	r2, [pc, #388]	; (e2a8 <isr+0x1cc4>)
    e122:	f7f2 f9bd 	bl	4a0 <__aeabi_uldivmod>
    e126:	b283      	uxth	r3, r0
    e128:	930a      	str	r3, [sp, #40]	; 0x28
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
    e12a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e12c:	1bd8      	subs	r0, r3, r7
    e12e:	e00c      	b.n	e14a <isr+0x1b66>
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
    e130:	2300      	movs	r3, #0
    e132:	0038      	movs	r0, r7
    e134:	2100      	movs	r1, #0
    e136:	f7f2 f9d3 	bl	4e0 <__aeabi_lmul>
    e13a:	2307      	movs	r3, #7
    e13c:	4a5a      	ldr	r2, [pc, #360]	; (e2a8 <isr+0x1cc4>)
    e13e:	f7f2 f9af 	bl	4a0 <__aeabi_uldivmod>
    e142:	b283      	uxth	r3, r0
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
    e144:	0030      	movs	r0, r6
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
    e146:	930a      	str	r3, [sp, #40]	; 0x28
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
    e148:	3020      	adds	r0, #32
    e14a:	4a56      	ldr	r2, [pc, #344]	; (e2a4 <isr+0x1cc0>)
    e14c:	2300      	movs	r3, #0
    e14e:	2100      	movs	r1, #0
    e150:	f7f2 f9c6 	bl	4e0 <__aeabi_lmul>
    e154:	2307      	movs	r3, #7
    e156:	4a54      	ldr	r2, [pc, #336]	; (e2a8 <isr+0x1cc4>)
    e158:	f7f2 f9a2 	bl	4a0 <__aeabi_uldivmod>
							   preamble_to_addr_us);
			}


			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
    e15c:	2300      	movs	r3, #0
    e15e:	656b      	str	r3, [r5, #84]	; 0x54
			_radio.conn_curr->role.slave.window_size_event_us = 0;
    e160:	65eb      	str	r3, [r5, #92]	; 0x5c

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
    e162:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
    e164:	b286      	uxth	r6, r0
			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
			_radio.conn_curr->role.slave.window_size_event_us = 0;

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
    e166:	856b      	strh	r3, [r5, #42]	; 0x2a
			if (_radio.conn_curr->pkt_tx_head) {
    e168:	002b      	movs	r3, r5
    e16a:	33fc      	adds	r3, #252	; 0xfc
    e16c:	689b      	ldr	r3, [r3, #8]
    e16e:	2b00      	cmp	r3, #0
    e170:	d00e      	beq.n	e190 <isr+0x1bac>
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
    e172:	795b      	ldrb	r3, [r3, #5]
    e174:	2b00      	cmp	r3, #0
    e176:	d104      	bne.n	e182 <isr+0x1b9e>
				    _radio.conn_curr->packet_tx_head_offset) {
    e178:	002b      	movs	r3, r5
    e17a:	33ff      	adds	r3, #255	; 0xff
			if (_radio.conn_curr->pkt_tx_head) {
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
    e17c:	7d9b      	ldrb	r3, [r3, #22]
    e17e:	2b00      	cmp	r3, #0
    e180:	d006      	beq.n	e190 <isr+0x1bac>
				    _radio.conn_curr->packet_tx_head_offset) {
					_radio.conn_curr->latency_event = 0;
    e182:	2300      	movs	r3, #0
    e184:	856b      	strh	r3, [r5, #42]	; 0x2a
    e186:	e003      	b.n	e190 <isr+0x1bac>
				}
			}
		} else {
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
    e188:	2600      	movs	r6, #0
    e18a:	3045      	adds	r0, #69	; 0x45
    e18c:	7006      	strb	r6, [r0, #0]
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
    e18e:	960a      	str	r6, [sp, #40]	; 0x28
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
		}

		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
    e190:	2200      	movs	r2, #0
    e192:	4b3a      	ldr	r3, [pc, #232]	; (e27c <isr+0x1c98>)
    e194:	33fc      	adds	r3, #252	; 0xfc
    e196:	695b      	ldr	r3, [r3, #20]
    e198:	86da      	strh	r2, [r3, #54]	; 0x36
    e19a:	e028      	b.n	e1ee <isr+0x1c0a>
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
    e19c:	2b04      	cmp	r3, #4
    e19e:	d10c      	bne.n	e1ba <isr+0x1bd6>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
    e1a0:	0003      	movs	r3, r0
    e1a2:	33a7      	adds	r3, #167	; 0xa7
    e1a4:	7819      	ldrb	r1, [r3, #0]
		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
    e1a6:	2900      	cmp	r1, #0
    e1a8:	d007      	beq.n	e1ba <isr+0x1bd6>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    e1aa:	35fc      	adds	r5, #252	; 0xfc
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
    e1ac:	f7fc f8ec 	bl	a388 <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    e1b0:	6968      	ldr	r0, [r5, #20]
    e1b2:	f7fb ffb5 	bl	a120 <connection_release>
		_radio.conn_curr = NULL;
    e1b6:	616e      	str	r6, [r5, #20]
    e1b8:	e137      	b.n	e42a <isr+0x1e46>

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
    e1ba:	7beb      	ldrb	r3, [r5, #15]
    e1bc:	2b04      	cmp	r3, #4
    e1be:	d10e      	bne.n	e1de <isr+0x1bfa>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
    e1c0:	0002      	movs	r2, r0
    e1c2:	3245      	adds	r2, #69	; 0x45
    e1c4:	7813      	ldrb	r3, [r2, #0]

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
    e1c6:	2b00      	cmp	r3, #0
    e1c8:	d009      	beq.n	e1de <isr+0x1bfa>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
		if (_radio.conn_curr->role.master.connect_expire >
    e1ca:	429c      	cmp	r4, r3
    e1cc:	d202      	bcs.n	e1d4 <isr+0x1bf0>
		    elapsed_event) {
			_radio.conn_curr->role.master.connect_expire -= elapsed_event;
    e1ce:	1b1b      	subs	r3, r3, r4
    e1d0:	7013      	strb	r3, [r2, #0]
    e1d2:	e00a      	b.n	e1ea <isr+0x1c06>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    e1d4:	213e      	movs	r1, #62	; 0x3e
    e1d6:	f7fc f8d7 	bl	a388 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    e1da:	35fc      	adds	r5, #252	; 0xfc
    e1dc:	e02c      	b.n	e238 <isr+0x1c54>
	/* if anchor point not sync-ed, start supervision timeout, and break
	 * latency if any.
	 */
	else {
		/* Start supervision timeout, if not started already */
		if (_radio.conn_curr->supervision_expire == 0) {
    e1de:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
    e1e0:	2e00      	cmp	r6, #0
    e1e2:	d102      	bne.n	e1ea <isr+0x1c06>
			_radio.conn_curr->supervision_expire =
    e1e4:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    e1e6:	86c3      	strh	r3, [r0, #54]	; 0x36
    e1e8:	e000      	b.n	e1ec <isr+0x1c08>

		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
    e1ea:	2600      	movs	r6, #0
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
    e1ec:	960a      	str	r6, [sp, #40]	; 0x28
		}
	}

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
    e1ee:	4f23      	ldr	r7, [pc, #140]	; (e27c <isr+0x1c98>)
    e1f0:	003d      	movs	r5, r7
    e1f2:	35fc      	adds	r5, #252	; 0xfc
    e1f4:	6968      	ldr	r0, [r5, #20]
    e1f6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    e1f8:	2b00      	cmp	r3, #0
    e1fa:	d023      	beq.n	e244 <isr+0x1c60>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    e1fc:	429c      	cmp	r4, r3
    e1fe:	d218      	bcs.n	e232 <isr+0x1c4e>
			_radio.conn_curr->supervision_expire -= elapsed_event;

			/* break latency */
			_radio.conn_curr->latency_event = 0;
    e200:	2200      	movs	r2, #0

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
			_radio.conn_curr->supervision_expire -= elapsed_event;
    e202:	1b1b      	subs	r3, r3, r4
    e204:	b29b      	uxth	r3, r3
    e206:	86c3      	strh	r3, [r0, #54]	; 0x36

			/* break latency */
			_radio.conn_curr->latency_event = 0;
    e208:	8542      	strh	r2, [r0, #42]	; 0x2a

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
				force = 1;
    e20a:	2501      	movs	r5, #1
			_radio.conn_curr->latency_event = 0;

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
    e20c:	2b06      	cmp	r3, #6
    e20e:	d91a      	bls.n	e246 <isr+0x1c62>
				force = 1;
			}
			/* use randomness to force slave role when anchor
			 * points are being missed.
			 */
			else if (_radio.role == ROLE_SLAVE) {
    e210:	7bfb      	ldrb	r3, [r7, #15]
    e212:	2b03      	cmp	r3, #3
    e214:	d116      	bne.n	e244 <isr+0x1c60>
				if (latency_event != 0) {
    e216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e218:	4293      	cmp	r3, r2
    e21a:	d114      	bne.n	e246 <isr+0x1c62>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;
    e21c:	6e02      	ldr	r2, [r0, #96]	; 0x60

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
    e21e:	0853      	lsrs	r3, r2, #1
					if (force) {
    e220:	422a      	tst	r2, r5
    e222:	d101      	bne.n	e228 <isr+0x1c44>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
    e224:	6603      	str	r3, [r0, #96]	; 0x60
    e226:	e00d      	b.n	e244 <isr+0x1c60>
					if (force) {
						_radio.conn_curr->role.slave.force |=
    e228:	2280      	movs	r2, #128	; 0x80
    e22a:	0612      	lsls	r2, r2, #24
    e22c:	4313      	orrs	r3, r2
    e22e:	6603      	str	r3, [r0, #96]	; 0x60
    e230:	e009      	b.n	e246 <isr+0x1c62>
							((u32_t)1 << 31);
					}
				}
			}
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    e232:	2108      	movs	r1, #8
    e234:	f7fc f8a8 	bl	a388 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    e238:	6968      	ldr	r0, [r5, #20]
    e23a:	f7fb ff71 	bl	a120 <connection_release>
			_radio.conn_curr = NULL;
    e23e:	2300      	movs	r3, #0
    e240:	616b      	str	r3, [r5, #20]
    e242:	e0f2      	b.n	e42a <isr+0x1e46>
				_radio.conn_curr->supervision_reload;
		}
	}

	/* check supervision timeout */
	force = 0;
    e244:	2500      	movs	r5, #0
			return;
		}
	}

	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
    e246:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    e248:	2b00      	cmp	r3, #0
    e24a:	d00e      	beq.n	e26a <isr+0x1c86>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    e24c:	429c      	cmp	r4, r3
    e24e:	d202      	bcs.n	e256 <isr+0x1c72>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    e250:	1b1b      	subs	r3, r3, r4
    e252:	8743      	strh	r3, [r0, #58]	; 0x3a
    e254:	e009      	b.n	e26a <isr+0x1c86>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    e256:	2122      	movs	r1, #34	; 0x22

			connection_release(_radio.conn_curr);
    e258:	37fc      	adds	r7, #252	; 0xfc
	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
			_radio.conn_curr->procedure_expire -= elapsed_event;
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    e25a:	f7fc f895 	bl	a388 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    e25e:	6978      	ldr	r0, [r7, #20]
    e260:	f7fb ff5e 	bl	a120 <connection_release>
			_radio.conn_curr = NULL;
    e264:	2300      	movs	r3, #0
    e266:	617b      	str	r3, [r7, #20]
    e268:	e0df      	b.n	e42a <isr+0x1e46>
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
	/* check apto */
	if (_radio.conn_curr->apto_expire != 0) {
    e26a:	3004      	adds	r0, #4
    e26c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    e26e:	2b00      	cmp	r3, #0
    e270:	d035      	beq.n	e2de <isr+0x1cfa>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    e272:	429c      	cmp	r4, r3
    e274:	d21a      	bcs.n	e2ac <isr+0x1cc8>
			_radio.conn_curr->apto_expire -= elapsed_event;
    e276:	1b1b      	subs	r3, r3, r4
    e278:	87c3      	strh	r3, [r0, #62]	; 0x3e
    e27a:	e030      	b.n	e2de <isr+0x1cfa>
    e27c:	20000f68 	.word	0x20000f68
    e280:	0001241d 	.word	0x0001241d
    e284:	000124a8 	.word	0x000124a8
    e288:	00014a88 	.word	0x00014a88
    e28c:	00000b62 	.word	0x00000b62
    e290:	00009ad5 	.word	0x00009ad5
    e294:	0001246d 	.word	0x0001246d
    e298:	000123e3 	.word	0x000123e3
    e29c:	00013ed8 	.word	0x00013ed8
    e2a0:	0001488d 	.word	0x0001488d
    e2a4:	3b9aca00 	.word	0x3b9aca00
    e2a8:	1afd498d 	.word	0x1afd498d
		} else {
			struct radio_pdu_node_rx *radio_pdu_node_rx;

			_radio.conn_curr->apto_expire = 0;
    e2ac:	2300      	movs	r3, #0
    e2ae:	87c3      	strh	r3, [r0, #62]	; 0x3e

			/* Prepare the rx packet structure */
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    e2b0:	2002      	movs	r0, #2
    e2b2:	f7fa ff6d 	bl	9190 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    e2b6:	2800      	cmp	r0, #0
    e2b8:	d108      	bne.n	e2cc <isr+0x1ce8>
    e2ba:	4b75      	ldr	r3, [pc, #468]	; (e490 <isr+0x1eac>)
    e2bc:	9301      	str	r3, [sp, #4]
    e2be:	4b75      	ldr	r3, [pc, #468]	; (e494 <isr+0x1eb0>)
    e2c0:	9300      	str	r3, [sp, #0]
    e2c2:	4b75      	ldr	r3, [pc, #468]	; (e498 <isr+0x1eb4>)
    e2c4:	4a75      	ldr	r2, [pc, #468]	; (e49c <isr+0x1eb8>)
    e2c6:	4976      	ldr	r1, [pc, #472]	; (e4a0 <isr+0x1ebc>)
    e2c8:	4876      	ldr	r0, [pc, #472]	; (e4a4 <isr+0x1ec0>)
    e2ca:	e083      	b.n	e3d4 <isr+0x1df0>

			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    e2cc:	003b      	movs	r3, r7
    e2ce:	33fc      	adds	r3, #252	; 0xfc
    e2d0:	695b      	ldr	r3, [r3, #20]
    e2d2:	8c1b      	ldrh	r3, [r3, #32]
    e2d4:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
    e2d6:	230a      	movs	r3, #10
    e2d8:	7103      	strb	r3, [r0, #4]

			/* enqueue apto event into rx queue */
			packet_rx_enqueue();
    e2da:	f7fb fb27 	bl	992c <packet_rx_enqueue>
		}
	}

	/* check appto */
	if (_radio.conn_curr->appto_expire != 0) {
    e2de:	003b      	movs	r3, r7
    e2e0:	33fc      	adds	r3, #252	; 0xfc
    e2e2:	695b      	ldr	r3, [r3, #20]
    e2e4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    e2e6:	2a00      	cmp	r2, #0
    e2e8:	d017      	beq.n	e31a <isr+0x1d36>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    e2ea:	4294      	cmp	r4, r2
    e2ec:	d202      	bcs.n	e2f4 <isr+0x1d10>
			_radio.conn_curr->appto_expire -= elapsed_event;
    e2ee:	1b14      	subs	r4, r2, r4
    e2f0:	87dc      	strh	r4, [r3, #62]	; 0x3e
    e2f2:	e012      	b.n	e31a <isr+0x1d36>
		} else {
			_radio.conn_curr->appto_expire = 0;
    e2f4:	2200      	movs	r2, #0
    e2f6:	87da      	strh	r2, [r3, #62]	; 0x3e

			if ((_radio.conn_curr->procedure_expire == 0) &&
    e2f8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
    e2fa:	2a00      	cmp	r2, #0
    e2fc:	d10d      	bne.n	e31a <isr+0x1d36>
			    (_radio.conn_curr->llcp_req ==
    e2fe:	001a      	movs	r2, r3
			     _radio.conn_curr->llcp_ack)) {
    e300:	0018      	movs	r0, r3
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
    e302:	3268      	adds	r2, #104	; 0x68
			     _radio.conn_curr->llcp_ack)) {
    e304:	3069      	adds	r0, #105	; 0x69
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
    e306:	7811      	ldrb	r1, [r2, #0]
		if (_radio.conn_curr->appto_expire > elapsed_event) {
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
    e308:	7802      	ldrb	r2, [r0, #0]
    e30a:	428a      	cmp	r2, r1
    e30c:	d10c      	bne.n	e328 <isr+0x1d44>
			    (_radio.conn_curr->llcp_req ==
			     _radio.conn_curr->llcp_ack)) {
				_radio.conn_curr->llcp_type = LLCP_PING;
    e30e:	0019      	movs	r1, r3
    e310:	2406      	movs	r4, #6
    e312:	316a      	adds	r1, #106	; 0x6a
				_radio.conn_curr->llcp_ack--;
    e314:	3a01      	subs	r2, #1
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
			     _radio.conn_curr->llcp_ack)) {
				_radio.conn_curr->llcp_type = LLCP_PING;
    e316:	700c      	strb	r4, [r1, #0]
				_radio.conn_curr->llcp_ack--;
    e318:	7002      	strb	r2, [r0, #0]
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    e31a:	001a      	movs	r2, r3
    e31c:	3269      	adds	r2, #105	; 0x69
    e31e:	7811      	ldrb	r1, [r2, #0]
    e320:	3a01      	subs	r2, #1
    e322:	7812      	ldrb	r2, [r2, #0]
    e324:	4291      	cmp	r1, r2
    e326:	d007      	beq.n	e338 <isr+0x1d54>
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
    e328:	001a      	movs	r2, r3
    e32a:	326a      	adds	r2, #106	; 0x6a
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    e32c:	7812      	ldrb	r2, [r2, #0]
    e32e:	3a01      	subs	r2, #1
    e330:	2a01      	cmp	r2, #1
    e332:	d801      	bhi.n	e338 <isr+0x1d54>
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
    e334:	2200      	movs	r2, #0
    e336:	855a      	strh	r2, [r3, #42]	; 0x2a
    e338:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	}

	/* check if latency needs update */
	lazy = 0;
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    e33a:	2d00      	cmp	r5, #0
    e33c:	d103      	bne.n	e346 <isr+0x1d62>
    e33e:	980c      	ldr	r0, [sp, #48]	; 0x30
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
	}

	/* check if latency needs update */
	lazy = 0;
    e340:	0029      	movs	r1, r5
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    e342:	4282      	cmp	r2, r0
    e344:	d001      	beq.n	e34a <isr+0x1d66>
		lazy = _radio.conn_curr->latency_event + 1;
    e346:	3201      	adds	r2, #1
    e348:	b291      	uxth	r1, r2
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    e34a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e34c:	4332      	orrs	r2, r6
    e34e:	430a      	orrs	r2, r1
    e350:	b292      	uxth	r2, r2
    e352:	2a00      	cmp	r2, #0
    e354:	d101      	bne.n	e35a <isr+0x1d76>
	    (lazy != 0) || (force != 0)) {
    e356:	2d00      	cmp	r5, #0
    e358:	d067      	beq.n	e42a <isr+0x1e46>
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    e35a:	2000      	movs	r0, #0
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    e35c:	8c1c      	ldrh	r4, [r3, #32]
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    e35e:	4b52      	ldr	r3, [pc, #328]	; (e4a8 <isr+0x1ec4>)
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    e360:	3407      	adds	r4, #7
    e362:	b2e4      	uxtb	r4, r4
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    e364:	9305      	str	r3, [sp, #20]
    e366:	9103      	str	r1, [sp, #12]
    e368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e36a:	9406      	str	r4, [sp, #24]
    e36c:	9504      	str	r5, [sp, #16]
    e36e:	9002      	str	r0, [sp, #8]
    e370:	9001      	str	r0, [sp, #4]
    e372:	9600      	str	r6, [sp, #0]
    e374:	0022      	movs	r2, r4
    e376:	0001      	movs	r1, r0
    e378:	f7fa fdac 	bl	8ed4 <ticker_update>
				      RADIO_TICKER_USER_ID_WORKER,
				      ticker_id,
				      ticks_drift_plus, ticks_drift_minus, 0, 0,
				      lazy, force, ticker_update_slave_assert,
				      (void *)(u32_t)ticker_id);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e37c:	2302      	movs	r3, #2
    e37e:	4398      	bics	r0, r3
    e380:	d053      	beq.n	e42a <isr+0x1e46>
    e382:	7bbb      	ldrb	r3, [r7, #14]
    e384:	429c      	cmp	r4, r3
    e386:	d050      	beq.n	e42a <isr+0x1e46>
    e388:	4b41      	ldr	r3, [pc, #260]	; (e490 <isr+0x1eac>)
    e38a:	4a44      	ldr	r2, [pc, #272]	; (e49c <isr+0x1eb8>)
    e38c:	9301      	str	r3, [sp, #4]
    e38e:	4b41      	ldr	r3, [pc, #260]	; (e494 <isr+0x1eb0>)
    e390:	4943      	ldr	r1, [pc, #268]	; (e4a0 <isr+0x1ebc>)
    e392:	9300      	str	r3, [sp, #0]
    e394:	4845      	ldr	r0, [pc, #276]	; (e4ac <isr+0x1ec8>)
    e396:	4b40      	ldr	r3, [pc, #256]	; (e498 <isr+0x1eb4>)
    e398:	e01c      	b.n	e3d4 <isr+0x1df0>
		 * no active role at that instance in time.
		 * Just reset the state to none. The role has gracefully closed
		 * before this ISR run.
		 * The above applies to aborting a role event too.
		 */
		LL_ASSERT((_radio.state == STATE_STOP) ||
    e39a:	3b04      	subs	r3, #4
    e39c:	2b01      	cmp	r3, #1
    e39e:	d908      	bls.n	e3b2 <isr+0x1dce>
    e3a0:	4b3b      	ldr	r3, [pc, #236]	; (e490 <isr+0x1eac>)
    e3a2:	4a3e      	ldr	r2, [pc, #248]	; (e49c <isr+0x1eb8>)
    e3a4:	9301      	str	r3, [sp, #4]
    e3a6:	4b3b      	ldr	r3, [pc, #236]	; (e494 <isr+0x1eb0>)
    e3a8:	493d      	ldr	r1, [pc, #244]	; (e4a0 <isr+0x1ebc>)
    e3aa:	9300      	str	r3, [sp, #0]
    e3ac:	4840      	ldr	r0, [pc, #256]	; (e4b0 <isr+0x1ecc>)
    e3ae:	4b41      	ldr	r3, [pc, #260]	; (e4b4 <isr+0x1ed0>)
    e3b0:	e010      	b.n	e3d4 <isr+0x1df0>
			  (_radio.state == STATE_ABORT));

		_radio.state = STATE_NONE;
    e3b2:	2300      	movs	r3, #0
    e3b4:	742b      	strb	r3, [r5, #16]
    e3b6:	e068      	b.n	e48a <isr+0x1ea6>

		return;

	default:
		LL_ASSERT(0);
    e3b8:	4b35      	ldr	r3, [pc, #212]	; (e490 <isr+0x1eac>)
    e3ba:	9301      	str	r3, [sp, #4]
    e3bc:	4b35      	ldr	r3, [pc, #212]	; (e494 <isr+0x1eb0>)
    e3be:	9300      	str	r3, [sp, #0]
    e3c0:	4b3c      	ldr	r3, [pc, #240]	; (e4b4 <isr+0x1ed0>)
    e3c2:	e004      	b.n	e3ce <isr+0x1dea>
		 * using Radio Disable task.
		 */
		break;

	default:
		LL_ASSERT(0);
    e3c4:	4b32      	ldr	r3, [pc, #200]	; (e490 <isr+0x1eac>)
    e3c6:	9301      	str	r3, [sp, #4]
    e3c8:	4b32      	ldr	r3, [pc, #200]	; (e494 <isr+0x1eb0>)
    e3ca:	9300      	str	r3, [sp, #0]
    e3cc:	4b3a      	ldr	r3, [pc, #232]	; (e4b8 <isr+0x1ed4>)
    e3ce:	4a33      	ldr	r2, [pc, #204]	; (e49c <isr+0x1eb8>)
    e3d0:	4933      	ldr	r1, [pc, #204]	; (e4a0 <isr+0x1ebc>)
    e3d2:	483a      	ldr	r0, [pc, #232]	; (e4bc <isr+0x1ed8>)
    e3d4:	f7f3 fa5e 	bl	1894 <printk>
    e3d8:	b662      	cpsie	i
    e3da:	2004      	movs	r0, #4
    e3dc:	df02      	svc	2
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
		(_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
	       (pdu_data_rx->payload.llctrl.opcode ==
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    e3de:	2b02      	cmp	r3, #2
    e3e0:	d101      	bne.n	e3e6 <isr+0x1e02>
    e3e2:	f7ff fab6 	bl	d952 <isr+0x136e>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    e3e6:	2400      	movs	r4, #0
			 */
			*rx_enqueue = 1;
		}
	} else {
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
    e3e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
    e3ea:	0023      	movs	r3, r4
			 */
			*rx_enqueue = 1;
		}
	} else {
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
    e3ec:	2a15      	cmp	r2, #21
    e3ee:	d101      	bne.n	e3f4 <isr+0x1e10>
    e3f0:	f7ff fb29 	bl	da46 <isr+0x1462>
    e3f4:	4b26      	ldr	r3, [pc, #152]	; (e490 <isr+0x1eac>)
    e3f6:	4a29      	ldr	r2, [pc, #164]	; (e49c <isr+0x1eb8>)
    e3f8:	9301      	str	r3, [sp, #4]
    e3fa:	4b26      	ldr	r3, [pc, #152]	; (e494 <isr+0x1eb0>)
    e3fc:	4928      	ldr	r1, [pc, #160]	; (e4a0 <isr+0x1ebc>)
    e3fe:	9300      	str	r3, [sp, #0]
    e400:	482f      	ldr	r0, [pc, #188]	; (e4c0 <isr+0x1edc>)
    e402:	4b30      	ldr	r3, [pc, #192]	; (e4c4 <isr+0x1ee0>)
    e404:	e7e6      	b.n	e3d4 <isr+0x1df0>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e406:	2328      	movs	r3, #40	; 0x28
    e408:	35a7      	adds	r5, #167	; 0xa7
    e40a:	702b      	strb	r3, [r5, #0]
    e40c:	f7fe ff9b 	bl	d346 <isr+0xd62>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    e410:	000c      	movs	r4, r1
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    e412:	9412      	str	r4, [sp, #72]	; 0x48
    e414:	e4d3      	b.n	ddbe <isr+0x17da>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
    e416:	2400      	movs	r4, #0
    e418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e41a:	42a3      	cmp	r3, r4
    e41c:	d000      	beq.n	e420 <isr+0x1e3c>
    e41e:	e59e      	b.n	df5e <isr+0x197a>
    e420:	e033      	b.n	e48a <isr+0x1ea6>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    e422:	2400      	movs	r4, #0
	u8_t crc_close = 0;
    e424:	2300      	movs	r3, #0
    e426:	930e      	str	r3, [sp, #56]	; 0x38
    e428:	e518      	b.n	de5c <isr+0x1878>

	if (dont_close) {
		return;
	}

	_radio.role = ROLE_NONE;
    e42a:	2400      	movs	r4, #0
    e42c:	4d26      	ldr	r5, [pc, #152]	; (e4c8 <isr+0x1ee4>)
    e42e:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    e430:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    e432:	736c      	strb	r4, [r5, #13]

	radio_tmr_stop();
    e434:	f7f9 fd6a 	bl	7f0c <radio_tmr_stop>
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    e438:	0022      	movs	r2, r4
    e43a:	0021      	movs	r1, r4
    e43c:	0020      	movs	r0, r4
    e43e:	4b23      	ldr	r3, [pc, #140]	; (e4cc <isr+0x1ee8>)
    e440:	f7f9 f90c 	bl	765c <mayfly_enqueue>
    e444:	1e04      	subs	r4, r0, #0
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
    e446:	d008      	beq.n	e45a <isr+0x1e76>
    e448:	4b11      	ldr	r3, [pc, #68]	; (e490 <isr+0x1eac>)
    e44a:	4a14      	ldr	r2, [pc, #80]	; (e49c <isr+0x1eb8>)
    e44c:	9301      	str	r3, [sp, #4]
    e44e:	4b11      	ldr	r3, [pc, #68]	; (e494 <isr+0x1eb0>)
    e450:	4913      	ldr	r1, [pc, #76]	; (e4a0 <isr+0x1ebc>)
    e452:	9300      	str	r3, [sp, #0]
    e454:	481e      	ldr	r0, [pc, #120]	; (e4d0 <isr+0x1eec>)
    e456:	4b1f      	ldr	r3, [pc, #124]	; (e4d4 <isr+0x1ef0>)
    e458:	e7bc      	b.n	e3d4 <isr+0x1df0>

	radio_tmr_stop();

	event_inactive(0, 0, 0, NULL);

	clock_control_off(_radio.hf_clock, NULL);
    e45a:	6828      	ldr	r0, [r5, #0]
    e45c:	0021      	movs	r1, r4
    e45e:	6843      	ldr	r3, [r0, #4]
    e460:	685b      	ldr	r3, [r3, #4]
    e462:	4798      	blx	r3

	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    e464:	2201      	movs	r2, #1
    e466:	0020      	movs	r0, r4
    e468:	0011      	movs	r1, r2
    e46a:	f7f9 f8d7 	bl	761c <mayfly_enable>
    e46e:	e00c      	b.n	e48a <isr+0x1ea6>
				return err;
			}
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_NOTIFY */

		_radio.state = STATE_CLOSE;
    e470:	2303      	movs	r3, #3
    e472:	742b      	strb	r3, [r5, #16]

		radio_switch_complete_and_disable();
    e474:	f7f9 fc4c 	bl	7d10 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);
    e478:	002b      	movs	r3, r5
    e47a:	33c5      	adds	r3, #197	; 0xc5

		_radio.state = STATE_CLOSE;

		radio_switch_complete_and_disable();

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
    e47c:	7818      	ldrb	r0, [r3, #0]
    e47e:	2327      	movs	r3, #39	; 0x27
    e480:	4358      	muls	r0, r3
    e482:	1828      	adds	r0, r5, r0
    e484:	3077      	adds	r0, #119	; 0x77
    e486:	f7f9 fbc5 	bl	7c14 <radio_pkt_tx_set>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
    e48a:	b017      	add	sp, #92	; 0x5c
    e48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e48e:	46c0      	nop			; (mov r8, r8)
    e490:	0001241d 	.word	0x0001241d
    e494:	000124a8 	.word	0x000124a8
    e498:	00014cf5 	.word	0x00014cf5
    e49c:	0001246d 	.word	0x0001246d
    e4a0:	000123e3 	.word	0x000123e3
    e4a4:	00013845 	.word	0x00013845
    e4a8:	00009b1d 	.word	0x00009b1d
    e4ac:	00013f46 	.word	0x00013f46
    e4b0:	00013fbc 	.word	0x00013fbc
    e4b4:	00014b6a 	.word	0x00014b6a
    e4b8:	00014c41 	.word	0x00014c41
    e4bc:	000129d4 	.word	0x000129d4
    e4c0:	00013e71 	.word	0x00013e71
    e4c4:	00014a21 	.word	0x00014a21
    e4c8:	20000f68 	.word	0x20000f68
    e4cc:	20000518 	.word	0x20000518
    e4d0:	00013644 	.word	0x00013644
    e4d4:	00014bb7 	.word	0x00014bb7

0000e4d8 <radio_init>:
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
    e4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4da:	b087      	sub	sp, #28
    e4dc:	9201      	str	r2, [sp, #4]
    e4de:	aa0c      	add	r2, sp, #48	; 0x30
    e4e0:	7816      	ldrb	r6, [r2, #0]
    e4e2:	aa0d      	add	r2, sp, #52	; 0x34
    e4e4:	8817      	ldrh	r7, [r2, #0]
    e4e6:	aa0e      	add	r2, sp, #56	; 0x38
    e4e8:	8812      	ldrh	r2, [r2, #0]
    e4ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    e4ec:	9205      	str	r2, [sp, #20]
    e4ee:	aa10      	add	r2, sp, #64	; 0x40
    e4f0:	8812      	ldrh	r2, [r2, #0]
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    e4f2:	248c      	movs	r4, #140	; 0x8c
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
    e4f4:	9202      	str	r2, [sp, #8]
	u32_t retcode;
	u8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
    e4f6:	4a34      	ldr	r2, [pc, #208]	; (e5c8 <radio_init+0xf0>)
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    e4f8:	0064      	lsls	r4, r4, #1
{
	u32_t retcode;
	u8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
    e4fa:	6010      	str	r0, [r2, #0]

	/* initialise SCA */
	_radio.sca = sca;
    e4fc:	0010      	movs	r0, r2
    e4fe:	30ff      	adds	r0, #255	; 0xff
    e500:	7741      	strb	r1, [r0, #29]

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;
    e502:	9902      	ldr	r1, [sp, #8]
    e504:	1869      	adds	r1, r5, r1
    e506:	9103      	str	r1, [sp, #12]

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
    e508:	4669      	mov	r1, sp
    e50a:	7909      	ldrb	r1, [r1, #4]
    e50c:	7341      	strb	r1, [r0, #13]
	_radio.conn_pool = mem_radio;
    e50e:	0010      	movs	r0, r2
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    e510:	9901      	ldr	r1, [sp, #4]
	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
    e512:	30fc      	adds	r0, #252	; 0xfc
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    e514:	434c      	muls	r4, r1
	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
    e516:	6085      	str	r5, [r0, #8]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    e518:	192c      	adds	r4, r5, r4
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    e51a:	1c75      	adds	r5, r6, #1
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
    e51c:	1cd9      	adds	r1, r3, #3
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    e51e:	b2ed      	uxtb	r5, r5
	_radio.packet_rx_count = (rx_count_max + 1);
    e520:	3304      	adds	r3, #4
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    e522:	9504      	str	r5, [sp, #16]
	_radio.packet_rx_count = (rx_count_max + 1);
    e524:	b2dd      	uxtb	r5, r3
    e526:	239e      	movs	r3, #158	; 0x9e
	_radio.packet_tx_count = (tx_count_max + 1);
    e528:	3602      	adds	r6, #2
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
    e52a:	005b      	lsls	r3, r3, #1
    e52c:	54d5      	strb	r5, [r2, r3]
	_radio.packet_tx_count = (tx_count_max + 1);
    e52e:	b2f6      	uxtb	r6, r6
    e530:	3334      	adds	r3, #52	; 0x34
    e532:	54d6      	strb	r6, [r2, r3]
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
    e534:	b2c9      	uxtb	r1, r1
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;
    e536:	3b20      	subs	r3, #32
    e538:	54d1      	strb	r1, [r2, r3]

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
	mem_radio +=
    e53a:	00ab      	lsls	r3, r5, #2
    e53c:	18e3      	adds	r3, r4, r3
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    e53e:	00f6      	lsls	r6, r6, #3
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
    e540:	63c4      	str	r4, [r0, #60]	; 0x3c
	mem_radio +=
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
    e542:	66c3      	str	r3, [r0, #108]	; 0x6c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    e544:	199c      	adds	r4, r3, r6
	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
    e546:	32fe      	adds	r2, #254	; 0xfe
	if ((PDU_AC_SIZE_MAX + 1) <
    e548:	1cfb      	adds	r3, r7, #3
	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
    e54a:	6704      	str	r4, [r0, #112]	; 0x70
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
    e54c:	8657      	strh	r7, [r2, #50]	; 0x32
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    e54e:	19a4      	adds	r4, r4, r6

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((PDU_AC_SIZE_MAX + 1) <
    e550:	2b28      	cmp	r3, #40	; 0x28
    e552:	d903      	bls.n	e55c <radio_init+0x84>
	    (offsetof(struct pdu_data, payload) +
			_radio.packet_data_octets_max)) {
		_radio.packet_rx_data_pool_size =
    e554:	2303      	movs	r3, #3
    e556:	370e      	adds	r7, #14
    e558:	439f      	bics	r7, r3
    e55a:	e000      	b.n	e55e <radio_init+0x86>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
    e55c:	2730      	movs	r7, #48	; 0x30
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    e55e:	4e1a      	ldr	r6, [pc, #104]	; (e5c8 <radio_init+0xf0>)
		_radio.packet_rx_data_pool_size =
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
    e560:	4379      	muls	r1, r7
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    e562:	0033      	movs	r3, r6
		_radio.packet_rx_data_pool_size =
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
    e564:	8691      	strh	r1, [r2, #52]	; 0x34
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    e566:	2130      	movs	r1, #48	; 0x30
    e568:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    e56a:	8e9f      	ldrh	r7, [r3, #52]	; 0x34
	} else {
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    e56c:	86d9      	strh	r1, [r3, #54]	; 0x36
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    e56e:	0038      	movs	r0, r7
    e570:	f7f1 fe20 	bl	1b4 <__aeabi_uidiv>
    e574:	239b      	movs	r3, #155	; 0x9b
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
    e576:	0032      	movs	r2, r6
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    e578:	005b      	lsls	r3, r3, #1
    e57a:	54f0      	strb	r0, [r6, r3]
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    e57c:	9b01      	ldr	r3, [sp, #4]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
    e57e:	32fc      	adds	r2, #252	; 0xfc
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    e580:	18ed      	adds	r5, r5, r3
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    e582:	2303      	movs	r3, #3
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    e584:	00ed      	lsls	r5, r5, #3
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
    e586:	62d4      	str	r4, [r2, #44]	; 0x2c
	mem_radio += _radio.packet_rx_data_pool_size;
    e588:	19e4      	adds	r4, r4, r7

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
    e58a:	6454      	str	r4, [r2, #68]	; 0x44
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    e58c:	1964      	adds	r4, r4, r5
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    e58e:	9d05      	ldr	r5, [sp, #20]
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
    e590:	6594      	str	r4, [r2, #88]	; 0x58
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    e592:	350a      	adds	r5, #10
    e594:	439d      	bics	r5, r3
    e596:	3362      	adds	r3, #98	; 0x62
    e598:	b2ad      	uxth	r5, r5
    e59a:	33ff      	adds	r3, #255	; 0xff
    e59c:	52f5      	strh	r5, [r6, r3]
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
    e59e:	9b04      	ldr	r3, [sp, #16]
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    e5a0:	3448      	adds	r4, #72	; 0x48
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
    e5a2:	436b      	muls	r3, r5
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
		       offsetof(struct pdu_data, payload) +
		       packet_tx_data_size);

	/* initialise tx data pool memory */
	_radio.pkt_tx_data_pool = mem_radio;
    e5a4:	6614      	str	r4, [r2, #96]	; 0x60
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
    e5a6:	18e4      	adds	r4, r4, r3
    e5a8:	9b03      	ldr	r3, [sp, #12]
    e5aa:	1ae4      	subs	r4, r4, r3
	if (retcode) {
    e5ac:	d002      	beq.n	e5b4 <radio_init+0xdc>
		return (retcode + mem_size);
    e5ae:	9b02      	ldr	r3, [sp, #8]
    e5b0:	1918      	adds	r0, r3, r4
    e5b2:	e006      	b.n	e5c2 <radio_init+0xea>
	 * This is a simple flow control to rx data only on one selected
	 * connection handle.
	 * TODO: replace this feature with host-to-controller flowcontrol
	 * implementation/design.
	 */
	_radio.fc_ena = 1;
    e5b4:	23bf      	movs	r3, #191	; 0xbf
    e5b6:	2201      	movs	r2, #1
    e5b8:	005b      	lsls	r3, r3, #1
    e5ba:	54f2      	strb	r2, [r6, r3]

	/* memory allocations */
	common_init();
    e5bc:	f7fa fe4a 	bl	9254 <common_init>
#if defined(RADIO_UNIT_TEST) && \
	defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
	chan_sel_2_ut();
#endif /* RADIO_UNIT_TEST && CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

	return retcode;
    e5c0:	0020      	movs	r0, r4
}
    e5c2:	b007      	add	sp, #28
    e5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5c6:	46c0      	nop			; (mov r8, r8)
    e5c8:	20000f68 	.word	0x20000f68

0000e5cc <ll_reset>:

void ll_reset(void)
{
    e5cc:	b570      	push	{r4, r5, r6, lr}
	u16_t conn_handle;

	/* disable advertiser events */
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    e5ce:	2103      	movs	r1, #3
    e5d0:	2005      	movs	r0, #5
    e5d2:	f7fa ff2d 	bl	9430 <role_disable>

	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    e5d6:	2104      	movs	r1, #4
    e5d8:	2006      	movs	r0, #6
    e5da:	f7fa ff29 	bl	9430 <role_disable>

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    e5de:	4c22      	ldr	r4, [pc, #136]	; (e668 <ll_reset+0x9c>)
    e5e0:	2500      	movs	r5, #0
    e5e2:	0026      	movs	r6, r4
    e5e4:	36ff      	adds	r6, #255	; 0xff
    e5e6:	7b73      	ldrb	r3, [r6, #13]
    e5e8:	42ab      	cmp	r3, r5
    e5ea:	d907      	bls.n	e5fc <ll_reset+0x30>
	     conn_handle++) {
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    e5ec:	1de8      	adds	r0, r5, #7
    e5ee:	b2c0      	uxtb	r0, r0
    e5f0:	21ff      	movs	r1, #255	; 0xff
	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
	     conn_handle++) {
    e5f2:	3501      	adds	r5, #1
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    e5f4:	f7fa ff1c 	bl	9430 <role_disable>
	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
	     conn_handle++) {
    e5f8:	b2ad      	uxth	r5, r5
    e5fa:	e7f4      	b.n	e5e6 <ll_reset+0x1a>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
    e5fc:	2101      	movs	r1, #1
    e5fe:	1d62      	adds	r2, r4, #5
    e600:	7fd3      	ldrb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    e602:	2500      	movs	r5, #0
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
    e604:	438b      	bics	r3, r1
    e606:	77d3      	strb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    e608:	0023      	movs	r3, r4
	_radio.scanner.is_enabled = 0;
    e60a:	0022      	movs	r2, r4
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
    e60c:	33c8      	adds	r3, #200	; 0xc8
	_radio.scanner.is_enabled = 0;
    e60e:	32dc      	adds	r2, #220	; 0xdc
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
    e610:	601d      	str	r5, [r3, #0]
	_radio.scanner.is_enabled = 0;
    e612:	7813      	ldrb	r3, [r2, #0]
    e614:	438b      	bics	r3, r1
    e616:	7013      	strb	r3, [r2, #0]
	_radio.scanner.conn = NULL;
    e618:	0023      	movs	r3, r4
    e61a:	33fc      	adds	r3, #252	; 0xfc
    e61c:	601d      	str	r5, [r3, #0]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    e61e:	0023      	movs	r3, r4
    e620:	312f      	adds	r1, #47	; 0x2f
    e622:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    e624:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
	_radio.scanner.is_enabled = 0;
	_radio.scanner.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    e626:	86d9      	strh	r1, [r3, #54]	; 0x36
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    e628:	f7f1 fdc4 	bl	1b4 <__aeabi_uidiv>
    e62c:	239b      	movs	r3, #155	; 0x9b
    e62e:	005b      	lsls	r3, r3, #1
    e630:	54e0      	strb	r0, [r4, r3]
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
    e632:	233e      	movs	r3, #62	; 0x3e
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    e634:	22a8      	movs	r2, #168	; 0xa8
	_radio.scanner.is_enabled = 0;
	_radio.scanner.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
    e636:	33ff      	adds	r3, #255	; 0xff
    e638:	54e5      	strb	r5, [r4, r3]
	_radio.packet_rx_acquire = 0;
    e63a:	3301      	adds	r3, #1
    e63c:	54e5      	strb	r5, [r4, r3]
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    e63e:	3b02      	subs	r3, #2
    e640:	5ce3      	ldrb	r3, [r4, r3]
    e642:	0052      	lsls	r2, r2, #1
    e644:	3b01      	subs	r3, #1
    e646:	54a3      	strb	r3, [r4, r2]
	_radio.packet_tx_first = 0;
    e648:	2372      	movs	r3, #114	; 0x72
    e64a:	33ff      	adds	r3, #255	; 0xff
    e64c:	54e5      	strb	r5, [r4, r3]
	_radio.packet_tx_last = 0;
    e64e:	3301      	adds	r3, #1
    e650:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_first = 0;
    e652:	2374      	movs	r3, #116	; 0x74
    e654:	33ff      	adds	r3, #255	; 0xff
    e656:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_last = 0;

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
    e658:	0028      	movs	r0, r5
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
	_radio.packet_tx_first = 0;
	_radio.packet_tx_last = 0;
	_radio.packet_release_first = 0;
	_radio.packet_release_last = 0;
    e65a:	3301      	adds	r3, #1
    e65c:	54e5      	strb	r5, [r4, r3]

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
    e65e:	f001 fcad 	bl	ffbc <ll_filter_reset>
	/* memory allocations */
	common_init();
    e662:	f7fa fdf7 	bl	9254 <common_init>
}
    e666:	bd70      	pop	{r4, r5, r6, pc}
    e668:	20000f68 	.word	0x20000f68

0000e66c <radio_adv_data_get>:
	_radio.ticks_active_to_start = ticks_active_to_start;
}

struct radio_adv_data *radio_adv_data_get(void)
{
	return &_radio.advertiser.adv_data;
    e66c:	4801      	ldr	r0, [pc, #4]	; (e674 <radio_adv_data_get+0x8>)
}
    e66e:	3027      	adds	r0, #39	; 0x27
    e670:	4770      	bx	lr
    e672:	46c0      	nop			; (mov r8, r8)
    e674:	20000f68 	.word	0x20000f68

0000e678 <radio_scan_data_get>:

struct radio_adv_data *radio_scan_data_get(void)
{
	return &_radio.advertiser.scan_data;
    e678:	4801      	ldr	r0, [pc, #4]	; (e680 <radio_scan_data_get+0x8>)
}
    e67a:	3077      	adds	r0, #119	; 0x77
    e67c:	4770      	bx	lr
    e67e:	46c0      	nop			; (mov r8, r8)
    e680:	20000f68 	.word	0x20000f68

0000e684 <radio_adv_is_enabled>:
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
}

u32_t radio_adv_is_enabled(void)
{
	return _radio.advertiser.is_enabled;
    e684:	4b03      	ldr	r3, [pc, #12]	; (e694 <radio_adv_is_enabled+0x10>)
    e686:	3305      	adds	r3, #5
    e688:	7fd8      	ldrb	r0, [r3, #31]
    e68a:	07c0      	lsls	r0, r0, #31
    e68c:	0fc0      	lsrs	r0, r0, #31
    e68e:	b2c0      	uxtb	r0, r0
}
    e690:	4770      	bx	lr
    e692:	46c0      	nop			; (mov r8, r8)
    e694:	20000f68 	.word	0x20000f68

0000e698 <radio_adv_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
    e698:	4b04      	ldr	r3, [pc, #16]	; (e6ac <radio_adv_filter_pol_get+0x14>)
		return _radio.advertiser.filter_policy;
	}

	return 0;
    e69a:	2000      	movs	r0, #0
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
    e69c:	1d5a      	adds	r2, r3, #5
    e69e:	7fd2      	ldrb	r2, [r2, #31]
    e6a0:	07d2      	lsls	r2, r2, #31
    e6a2:	d502      	bpl.n	e6aa <radio_adv_filter_pol_get+0x12>
		return _radio.advertiser.filter_policy;
    e6a4:	3306      	adds	r3, #6
    e6a6:	7fd8      	ldrb	r0, [r3, #31]
    e6a8:	0980      	lsrs	r0, r0, #6
	}

	return 0;
}
    e6aa:	4770      	bx	lr
    e6ac:	20000f68 	.word	0x20000f68

0000e6b0 <radio_scan_is_enabled>:
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
}

u32_t radio_scan_is_enabled(void)
{
	return _radio.scanner.is_enabled;
    e6b0:	4b03      	ldr	r3, [pc, #12]	; (e6c0 <radio_scan_is_enabled+0x10>)
    e6b2:	33dc      	adds	r3, #220	; 0xdc
    e6b4:	7818      	ldrb	r0, [r3, #0]
    e6b6:	07c0      	lsls	r0, r0, #31
    e6b8:	0fc0      	lsrs	r0, r0, #31
    e6ba:	b2c0      	uxtb	r0, r0
}
    e6bc:	4770      	bx	lr
    e6be:	46c0      	nop			; (mov r8, r8)
    e6c0:	20000f68 	.word	0x20000f68

0000e6c4 <radio_scan_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
    e6c4:	4b05      	ldr	r3, [pc, #20]	; (e6dc <radio_scan_filter_pol_get+0x18>)
		return _radio.scanner.filter_policy;
	}

	return 0;
    e6c6:	2000      	movs	r0, #0
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
    e6c8:	001a      	movs	r2, r3
    e6ca:	32dc      	adds	r2, #220	; 0xdc
    e6cc:	7812      	ldrb	r2, [r2, #0]
    e6ce:	07d2      	lsls	r2, r2, #31
    e6d0:	d503      	bpl.n	e6da <radio_scan_filter_pol_get+0x16>
		return _radio.scanner.filter_policy;
    e6d2:	33dd      	adds	r3, #221	; 0xdd
    e6d4:	7818      	ldrb	r0, [r3, #0]
    e6d6:	0680      	lsls	r0, r0, #26
    e6d8:	0f80      	lsrs	r0, r0, #30
	}

	return 0;
}
    e6da:	4770      	bx	lr
    e6dc:	20000f68 	.word	0x20000f68

0000e6e0 <ll_conn_update>:
	return status;
}

u32_t ll_conn_update(u16_t handle, u8_t cmd, u8_t status, u16_t interval,
		     u16_t latency, u16_t timeout)
{
    e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6e2:	001f      	movs	r7, r3
    e6e4:	ab06      	add	r3, sp, #24
    e6e6:	881e      	ldrh	r6, [r3, #0]
    e6e8:	ab07      	add	r3, sp, #28
    e6ea:	881d      	ldrh	r5, [r3, #0]
    e6ec:	000c      	movs	r4, r1
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
    e6ee:	f7fa fe87 	bl	9400 <connection_get>
    e6f2:	0003      	movs	r3, r0
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
		}

		return 1;
    e6f4:	2001      	movs	r0, #1
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	d03b      	beq.n	e772 <ll_conn_update+0x92>
	    ((conn->llcp_req != conn->llcp_ack) &&
    e6fa:	001a      	movs	r2, r3
    e6fc:	0019      	movs	r1, r3
    e6fe:	3268      	adds	r2, #104	; 0x68
    e700:	3169      	adds	r1, #105	; 0x69
    e702:	7812      	ldrb	r2, [r2, #0]
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
    e704:	7809      	ldrb	r1, [r1, #0]
    e706:	4291      	cmp	r1, r2
    e708:	d00c      	beq.n	e724 <ll_conn_update+0x44>
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
    e70a:	0019      	movs	r1, r3
    e70c:	316a      	adds	r1, #106	; 0x6a

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
    e70e:	7809      	ldrb	r1, [r1, #0]
    e710:	4281      	cmp	r1, r0
    e712:	d12e      	bne.n	e772 <ll_conn_update+0x92>
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
	      (conn->llcp.connection_update.state !=
    e714:	0019      	movs	r1, r3
    e716:	3195      	adds	r1, #149	; 0x95
	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
    e718:	7808      	ldrb	r0, [r1, #0]
    e71a:	2107      	movs	r1, #7
    e71c:	4001      	ands	r1, r0
	      (conn->llcp.connection_update.state !=
	       LLCP_CONN_STATE_APP_WAIT)))) {
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
    e71e:	2002      	movs	r0, #2
	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
    e720:	2904      	cmp	r1, #4
    e722:	d126      	bne.n	e772 <ll_conn_update+0x92>
		}

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
    e724:	0018      	movs	r0, r3
    e726:	2101      	movs	r1, #1
    e728:	3094      	adds	r0, #148	; 0x94
    e72a:	7001      	strb	r1, [r0, #0]
	conn->llcp.connection_update.win_offset_us = 0;
    e72c:	208c      	movs	r0, #140	; 0x8c
    e72e:	4684      	mov	ip, r0
    e730:	449c      	add	ip, r3
    e732:	4661      	mov	r1, ip
    e734:	2000      	movs	r0, #0
    e736:	6008      	str	r0, [r1, #0]
	conn->llcp.connection_update.interval = interval;
    e738:	216c      	movs	r1, #108	; 0x6c
    e73a:	468c      	mov	ip, r1
    e73c:	449c      	add	ip, r3
    e73e:	4661      	mov	r1, ip
    e740:	800f      	strh	r7, [r1, #0]
	conn->llcp.connection_update.latency = latency;
    e742:	001f      	movs	r7, r3
    e744:	376e      	adds	r7, #110	; 0x6e
    e746:	803e      	strh	r6, [r7, #0]
	conn->llcp.connection_update.timeout = timeout;
    e748:	001e      	movs	r6, r3
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    e74a:	2707      	movs	r7, #7
    e74c:	3401      	adds	r4, #1

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
    e74e:	3670      	adds	r6, #112	; 0x70
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    e750:	403c      	ands	r4, r7

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
    e752:	8035      	strh	r5, [r6, #0]
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    e754:	0025      	movs	r5, r4
    e756:	3625      	adds	r6, #37	; 0x25
    e758:	7834      	ldrb	r4, [r6, #0]
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    e75a:	2101      	movs	r1, #1
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    e75c:	43bc      	bics	r4, r7
	conn->llcp.connection_update.is_internal = 0;
    e75e:	432c      	orrs	r4, r5
    e760:	2518      	movs	r5, #24
    e762:	43ac      	bics	r4, r5
    e764:	7034      	strb	r4, [r6, #0]

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    e766:	001c      	movs	r4, r3
	conn->llcp_req++;
    e768:	3201      	adds	r2, #1
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    e76a:	346a      	adds	r4, #106	; 0x6a
	conn->llcp_req++;
    e76c:	3368      	adds	r3, #104	; 0x68
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    e76e:	7021      	strb	r1, [r4, #0]
	conn->llcp_req++;
    e770:	701a      	strb	r2, [r3, #0]

	return 0;
}
    e772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e774 <ll_start_enc_req_send>:
	return 1;
}

u32_t ll_start_enc_req_send(u16_t handle, u8_t error_code,
			    u8_t const *const ltk)
{
    e774:	b570      	push	{r4, r5, r6, lr}
    e776:	000d      	movs	r5, r1
    e778:	0016      	movs	r6, r2
	struct connection *conn;

	conn = connection_get(handle);
    e77a:	f7fa fe41 	bl	9400 <connection_get>
    e77e:	1e04      	subs	r4, r0, #0
	if (!conn) {
    e780:	d101      	bne.n	e786 <ll_start_enc_req_send+0x12>
		return 1;
    e782:	2001      	movs	r0, #1
    e784:	e03c      	b.n	e800 <ll_start_enc_req_send+0x8c>
	}

	if (error_code) {
    e786:	2d00      	cmp	r5, #0
    e788:	d024      	beq.n	e7d4 <ll_start_enc_req_send+0x60>
		if (conn->refresh == 0) {
    e78a:	0003      	movs	r3, r0
    e78c:	33c0      	adds	r3, #192	; 0xc0
    e78e:	7818      	ldrb	r0, [r3, #0]
    e790:	2340      	movs	r3, #64	; 0x40
    e792:	4018      	ands	r0, r3
    e794:	d110      	bne.n	e7b8 <ll_start_enc_req_send+0x44>
			if (conn->llcp_req != conn->llcp_ack) {
    e796:	0022      	movs	r2, r4
    e798:	0023      	movs	r3, r4
    e79a:	3268      	adds	r2, #104	; 0x68
    e79c:	3369      	adds	r3, #105	; 0x69
    e79e:	7811      	ldrb	r1, [r2, #0]
    e7a0:	781b      	ldrb	r3, [r3, #0]
    e7a2:	428b      	cmp	r3, r1
    e7a4:	d1ed      	bne.n	e782 <ll_start_enc_req_send+0xe>
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;
    e7a6:	0021      	movs	r1, r4
    e7a8:	316c      	adds	r1, #108	; 0x6c
    e7aa:	700d      	strb	r5, [r1, #0]

			conn->llcp_type = LLCP_ENCRYPTION;
    e7ac:	2103      	movs	r1, #3
    e7ae:	346a      	adds	r4, #106	; 0x6a
			conn->llcp_req++;
    e7b0:	3301      	adds	r3, #1
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
    e7b2:	7021      	strb	r1, [r4, #0]
			conn->llcp_req++;
    e7b4:	7013      	strb	r3, [r2, #0]
    e7b6:	e023      	b.n	e800 <ll_start_enc_req_send+0x8c>
		} else {
			if (conn->llcp_terminate.ack !=
    e7b8:	0023      	movs	r3, r4
			    conn->llcp_terminate.req) {
    e7ba:	0022      	movs	r2, r4
			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
		} else {
			if (conn->llcp_terminate.ack !=
    e7bc:	33a5      	adds	r3, #165	; 0xa5
			    conn->llcp_terminate.req) {
    e7be:	32a4      	adds	r2, #164	; 0xa4
			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
		} else {
			if (conn->llcp_terminate.ack !=
    e7c0:	7819      	ldrb	r1, [r3, #0]
    e7c2:	7813      	ldrb	r3, [r2, #0]
    e7c4:	428b      	cmp	r3, r1
    e7c6:	d1dc      	bne.n	e782 <ll_start_enc_req_send+0xe>
			    conn->llcp_terminate.req) {
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;
    e7c8:	34a6      	adds	r4, #166	; 0xa6

			conn->llcp_terminate.req++;
    e7ca:	3301      	adds	r3, #1
			if (conn->llcp_terminate.ack !=
			    conn->llcp_terminate.req) {
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;
    e7cc:	7025      	strb	r5, [r4, #0]

		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_req++;
	}

	return 0;
    e7ce:	2000      	movs	r0, #0
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;

			conn->llcp_terminate.req++;
    e7d0:	7013      	strb	r3, [r2, #0]
    e7d2:	e015      	b.n	e800 <ll_start_enc_req_send+0x8c>
		}
	} else {
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
    e7d4:	2210      	movs	r2, #16
    e7d6:	0031      	movs	r1, r6
    e7d8:	3077      	adds	r0, #119	; 0x77
    e7da:	f7f2 fa38 	bl	c4e <memcpy>
		       sizeof(conn->llcp.encryption.ltk));

		if (conn->llcp_req != conn->llcp_ack) {
    e7de:	0022      	movs	r2, r4
    e7e0:	0023      	movs	r3, r4
    e7e2:	3268      	adds	r2, #104	; 0x68
    e7e4:	3369      	adds	r3, #105	; 0x69
    e7e6:	7811      	ldrb	r1, [r2, #0]
    e7e8:	781b      	ldrb	r3, [r3, #0]
    e7ea:	428b      	cmp	r3, r1
    e7ec:	d1c9      	bne.n	e782 <ll_start_enc_req_send+0xe>
			return 1;
		}

		conn->llcp.encryption.error_code = 0;
    e7ee:	0021      	movs	r1, r4
    e7f0:	316c      	adds	r1, #108	; 0x6c
    e7f2:	700d      	strb	r5, [r1, #0]

		conn->llcp_type = LLCP_ENCRYPTION;
    e7f4:	2103      	movs	r1, #3
		conn->llcp_req++;
	}

	return 0;
    e7f6:	0028      	movs	r0, r5
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
    e7f8:	346a      	adds	r4, #106	; 0x6a
		conn->llcp_req++;
    e7fa:	3301      	adds	r3, #1
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
    e7fc:	7021      	strb	r1, [r4, #0]
		conn->llcp_req++;
    e7fe:	7013      	strb	r3, [r2, #0]
	}

	return 0;
}
    e800:	bd70      	pop	{r4, r5, r6, pc}

0000e802 <ll_feature_req_send>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

u32_t ll_feature_req_send(u16_t handle)
{
    e802:	b510      	push	{r4, lr}
	struct connection *conn;

	conn = connection_get(handle);
    e804:	f7fa fdfc 	bl	9400 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
    e808:	2201      	movs	r2, #1
u32_t ll_feature_req_send(u16_t handle)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e80a:	2800      	cmp	r0, #0
    e80c:	d00d      	beq.n	e82a <ll_feature_req_send+0x28>
    e80e:	0001      	movs	r1, r0
    e810:	0003      	movs	r3, r0
    e812:	3168      	adds	r1, #104	; 0x68
    e814:	3369      	adds	r3, #105	; 0x69
    e816:	780c      	ldrb	r4, [r1, #0]
    e818:	781b      	ldrb	r3, [r3, #0]
    e81a:	42a3      	cmp	r3, r4
    e81c:	d105      	bne.n	e82a <ll_feature_req_send+0x28>
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    e81e:	3203      	adds	r2, #3
    e820:	306a      	adds	r0, #106	; 0x6a
    e822:	7002      	strb	r2, [r0, #0]
	conn->llcp_req++;

	return 0;
    e824:	2200      	movs	r2, #0
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
	conn->llcp_req++;
    e826:	3301      	adds	r3, #1
    e828:	700b      	strb	r3, [r1, #0]

	return 0;
}
    e82a:	0010      	movs	r0, r2
    e82c:	bd10      	pop	{r4, pc}

0000e82e <ll_version_ind_send>:

u32_t ll_version_ind_send(u16_t handle)
{
    e82e:	b510      	push	{r4, lr}
	struct connection *conn;

	conn = connection_get(handle);
    e830:	f7fa fde6 	bl	9400 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
    e834:	2201      	movs	r2, #1
u32_t ll_version_ind_send(u16_t handle)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    e836:	2800      	cmp	r0, #0
    e838:	d00d      	beq.n	e856 <ll_version_ind_send+0x28>
    e83a:	0001      	movs	r1, r0
    e83c:	0003      	movs	r3, r0
    e83e:	3168      	adds	r1, #104	; 0x68
    e840:	3369      	adds	r3, #105	; 0x69
    e842:	780c      	ldrb	r4, [r1, #0]
    e844:	781b      	ldrb	r3, [r3, #0]
    e846:	42a3      	cmp	r3, r4
    e848:	d105      	bne.n	e856 <ll_version_ind_send+0x28>
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    e84a:	3204      	adds	r2, #4
    e84c:	306a      	adds	r0, #106	; 0x6a
    e84e:	7002      	strb	r2, [r0, #0]
	conn->llcp_req++;

	return 0;
    e850:	2200      	movs	r2, #0
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
	conn->llcp_req++;
    e852:	3301      	adds	r3, #1
    e854:	700b      	strb	r3, [r1, #0]

	return 0;
}
    e856:	0010      	movs	r0, r2
    e858:	bd10      	pop	{r4, pc}

0000e85a <ll_terminate_ind_send>:

u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
    e85a:	b570      	push	{r4, r5, r6, lr}
    e85c:	000c      	movs	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
    e85e:	f7fa fdcf 	bl	9400 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
    e862:	2201      	movs	r2, #1
u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
    e864:	2800      	cmp	r0, #0
    e866:	d00c      	beq.n	e882 <ll_terminate_ind_send+0x28>
    e868:	0003      	movs	r3, r0
    e86a:	0001      	movs	r1, r0
    e86c:	33a5      	adds	r3, #165	; 0xa5
    e86e:	31a4      	adds	r1, #164	; 0xa4
    e870:	781d      	ldrb	r5, [r3, #0]
    e872:	780b      	ldrb	r3, [r1, #0]
    e874:	42ab      	cmp	r3, r5
    e876:	d104      	bne.n	e882 <ll_terminate_ind_send+0x28>
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;

	conn->llcp_terminate.req++;
    e878:	189b      	adds	r3, r3, r2

	return 0;
    e87a:	2200      	movs	r2, #0
	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;
    e87c:	30a6      	adds	r0, #166	; 0xa6
    e87e:	7004      	strb	r4, [r0, #0]

	conn->llcp_terminate.req++;
    e880:	700b      	strb	r3, [r1, #0]

	return 0;
}
    e882:	0010      	movs	r0, r2
    e884:	bd70      	pop	{r4, r5, r6, pc}

0000e886 <ll_length_req_send>:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
    e886:	b570      	push	{r4, r5, r6, lr}
    e888:	000c      	movs	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
    e88a:	f7fa fdb9 	bl	9400 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
		return 1;
    e88e:	2201      	movs	r2, #1
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e890:	2800      	cmp	r0, #0
    e892:	d019      	beq.n	e8c8 <ll_length_req_send+0x42>
    e894:	0003      	movs	r3, r0
    e896:	3368      	adds	r3, #104	; 0x68
    e898:	7819      	ldrb	r1, [r3, #0]
    e89a:	189b      	adds	r3, r3, r2
    e89c:	781b      	ldrb	r3, [r3, #0]
    e89e:	4299      	cmp	r1, r3
    e8a0:	d112      	bne.n	e8c8 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
    e8a2:	0001      	movs	r1, r0
    e8a4:	0003      	movs	r3, r0
    e8a6:	31b4      	adds	r1, #180	; 0xb4
    e8a8:	33b5      	adds	r3, #181	; 0xb5
    e8aa:	780d      	ldrb	r5, [r1, #0]
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e8ac:	781b      	ldrb	r3, [r3, #0]
    e8ae:	42ab      	cmp	r3, r5
    e8b0:	d10a      	bne.n	e8c8 <ll_length_req_send+0x42>
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e8b2:	0005      	movs	r5, r0
    e8b4:	2603      	movs	r6, #3
    e8b6:	35b6      	adds	r5, #182	; 0xb6
    e8b8:	782a      	ldrb	r2, [r5, #0]
	conn->llcp_length.tx_octets = tx_octets;
    e8ba:	30ba      	adds	r0, #186	; 0xba
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    e8bc:	43b2      	bics	r2, r6
    e8be:	702a      	strb	r2, [r5, #0]
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;

	return 0;
    e8c0:	2200      	movs	r2, #0

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;
    e8c2:	3301      	adds	r3, #1
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
	conn->llcp_length.tx_octets = tx_octets;
    e8c4:	8004      	strh	r4, [r0, #0]
	conn->llcp_length.req++;
    e8c6:	700b      	strb	r3, [r1, #0]

	return 0;
}
    e8c8:	0010      	movs	r0, r2
    e8ca:	bd70      	pop	{r4, r5, r6, pc}

0000e8cc <ll_length_default_get>:

void ll_length_default_get(u16_t *max_tx_octets, u16_t *max_tx_time)
{
	*max_tx_octets = _radio.default_tx_octets;
    e8cc:	4b03      	ldr	r3, [pc, #12]	; (e8dc <ll_length_default_get+0x10>)
    e8ce:	33fe      	adds	r3, #254	; 0xfe
    e8d0:	8c1a      	ldrh	r2, [r3, #32]
    e8d2:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
    e8d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    e8d6:	800b      	strh	r3, [r1, #0]
}
    e8d8:	4770      	bx	lr
    e8da:	46c0      	nop			; (mov r8, r8)
    e8dc:	20000f68 	.word	0x20000f68

0000e8e0 <ll_length_default_set>:

u32_t ll_length_default_set(u16_t max_tx_octets, u16_t max_tx_time)
{
	/* TODO: parameter check (for BT 5.0 compliance) */

	_radio.default_tx_octets = max_tx_octets;
    e8e0:	4b02      	ldr	r3, [pc, #8]	; (e8ec <ll_length_default_set+0xc>)
    e8e2:	33fe      	adds	r3, #254	; 0xfe
    e8e4:	8418      	strh	r0, [r3, #32]
	_radio.default_tx_time = max_tx_time;
    e8e6:	8459      	strh	r1, [r3, #34]	; 0x22

	return 0;
}
    e8e8:	2000      	movs	r0, #0
    e8ea:	4770      	bx	lr
    e8ec:	20000f68 	.word	0x20000f68

0000e8f0 <ll_length_max_get>:

void ll_length_max_get(u16_t *max_tx_octets, u16_t *max_tx_time,
		       u16_t *max_rx_octets, u16_t *max_rx_time)
{
    e8f0:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e8f2:	241b      	movs	r4, #27
    e8f4:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
    e8f6:	20a4      	movs	r0, #164	; 0xa4
    e8f8:	0040      	lsls	r0, r0, #1
    e8fa:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e8fc:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
    e8fe:	8018      	strh	r0, [r3, #0]
}
    e900:	bd10      	pop	{r4, pc}

0000e902 <ll_phy_get>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
u32_t ll_phy_get(u16_t handle, u8_t *tx, u8_t *rx)
{
    e902:	b570      	push	{r4, r5, r6, lr}
    e904:	000d      	movs	r5, r1
    e906:	0014      	movs	r4, r2
	struct connection *conn;

	conn = connection_get(handle);
    e908:	f7fa fd7a 	bl	9400 <connection_get>
	if (!conn) {
		return 1;
    e90c:	2301      	movs	r3, #1
u32_t ll_phy_get(u16_t handle, u8_t *tx, u8_t *rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn) {
    e90e:	2800      	cmp	r0, #0
    e910:	d00b      	beq.n	e92a <ll_phy_get+0x28>
		return 1;
	}

	/* TODO: context safe read */
	*tx = conn->phy_tx;
    e912:	0003      	movs	r3, r0
    e914:	3332      	adds	r3, #50	; 0x32
    e916:	781b      	ldrb	r3, [r3, #0]
	*rx = conn->phy_rx;
    e918:	3033      	adds	r0, #51	; 0x33
	if (!conn) {
		return 1;
	}

	/* TODO: context safe read */
	*tx = conn->phy_tx;
    e91a:	069b      	lsls	r3, r3, #26
    e91c:	0f5b      	lsrs	r3, r3, #29
    e91e:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
    e920:	7803      	ldrb	r3, [r0, #0]
    e922:	069b      	lsls	r3, r3, #26
    e924:	0f5b      	lsrs	r3, r3, #29
    e926:	7023      	strb	r3, [r4, #0]

	return 0;
    e928:	2300      	movs	r3, #0
}
    e92a:	0018      	movs	r0, r3
    e92c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e930 <ll_phy_default_set>:

u32_t ll_phy_default_set(u8_t tx, u8_t rx)
{
	/* TODO: validate against supported phy */

	_radio.default_phy_tx = tx;
    e930:	4b02      	ldr	r3, [pc, #8]	; (e93c <ll_phy_default_set+0xc>)
    e932:	33fe      	adds	r3, #254	; 0xfe
    e934:	8498      	strh	r0, [r3, #36]	; 0x24
	_radio.default_phy_rx = rx;
    e936:	84d9      	strh	r1, [r3, #38]	; 0x26

	return 0;
}
    e938:	2000      	movs	r0, #0
    e93a:	4770      	bx	lr
    e93c:	20000f68 	.word	0x20000f68

0000e940 <ll_phy_req_send>:

u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
    e940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e942:	0015      	movs	r5, r2
    e944:	000e      	movs	r6, r1
    e946:	9301      	str	r3, [sp, #4]
	struct connection *conn;

	conn = connection_get(handle);
    e948:	f7fa fd5a 	bl	9400 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
    e94c:	2201      	movs	r2, #1
u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e94e:	2800      	cmp	r0, #0
    e950:	d023      	beq.n	e99a <ll_phy_req_send+0x5a>
    e952:	0003      	movs	r3, r0
    e954:	3368      	adds	r3, #104	; 0x68
    e956:	7819      	ldrb	r1, [r3, #0]
    e958:	189b      	adds	r3, r3, r2
    e95a:	781b      	ldrb	r3, [r3, #0]
    e95c:	4299      	cmp	r1, r3
    e95e:	d11c      	bne.n	e99a <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
    e960:	0007      	movs	r7, r0
    e962:	0001      	movs	r1, r0
    e964:	37bc      	adds	r7, #188	; 0xbc
    e966:	31bd      	adds	r1, #189	; 0xbd
    e968:	783b      	ldrb	r3, [r7, #0]
u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    e96a:	7809      	ldrb	r1, [r1, #0]
    e96c:	4299      	cmp	r1, r3
    e96e:	d114      	bne.n	e99a <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    e970:	0003      	movs	r3, r0
    e972:	33be      	adds	r3, #190	; 0xbe
	conn->llcp_phy.cmd = 1;
    e974:	7858      	ldrb	r0, [r3, #1]
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
    e976:	4015      	ands	r5, r2
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
    e978:	0004      	movs	r4, r0
	conn->llcp_phy.tx = tx;
    e97a:	2007      	movs	r0, #7
    e97c:	4006      	ands	r6, r0
	conn->llcp_phy.flags = flags;
    e97e:	3805      	subs	r0, #5
    e980:	4304      	orrs	r4, r0
    e982:	0020      	movs	r0, r4
    e984:	4390      	bics	r0, r2
    e986:	4305      	orrs	r5, r0
    e988:	705d      	strb	r5, [r3, #1]
	conn->llcp_phy.rx = rx;
    e98a:	9a01      	ldr	r2, [sp, #4]
    e98c:	00b6      	lsls	r6, r6, #2
    e98e:	0154      	lsls	r4, r2, #5
	conn->llcp_phy.req++;

	return 0;
    e990:	2200      	movs	r2, #0

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
	conn->llcp_phy.rx = rx;
    e992:	4334      	orrs	r4, r6
	conn->llcp_phy.req++;
    e994:	3101      	adds	r1, #1

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
	conn->llcp_phy.rx = rx;
    e996:	701c      	strb	r4, [r3, #0]
	conn->llcp_phy.req++;
    e998:	7039      	strb	r1, [r7, #0]

	return 0;
}
    e99a:	0010      	movs	r0, r2
    e99c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000e9a0 <radio_rx_get>:
u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    e9a0:	4b1c      	ldr	r3, [pc, #112]	; (ea14 <radio_rx_get+0x74>)

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
    e9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9a4:	0005      	movs	r5, r0
    e9a6:	0008      	movs	r0, r1
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    e9a8:	0019      	movs	r1, r3
    e9aa:	31fc      	adds	r1, #252	; 0xfc
    e9ac:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    e9ae:	6d0c      	ldr	r4, [r1, #80]	; 0x50
    e9b0:	0019      	movs	r1, r3
    e9b2:	3174      	adds	r1, #116	; 0x74

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
    e9b4:	b085      	sub	sp, #20
    e9b6:	001e      	movs	r6, r3
    e9b8:	31ff      	adds	r1, #255	; 0xff
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    e9ba:	42a2      	cmp	r2, r4
    e9bc:	d01d      	beq.n	e9fa <radio_rx_get+0x5a>
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
    e9be:	6853      	ldr	r3, [r2, #4]

		cmplt = tx_cmplt_get(handle,
    e9c0:	781a      	ldrb	r2, [r3, #0]

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
    e9c2:	9301      	str	r3, [sp, #4]

		cmplt = tx_cmplt_get(handle,
    e9c4:	f7fa fcce 	bl	9364 <tx_cmplt_get>
    e9c8:	1e04      	subs	r4, r0, #0
				&_radio.packet_release_first,
				_radio_pdu_node_rx->hdr.onion.
				packet_release_last);
		if (!cmplt) {
    e9ca:	d11d      	bne.n	ea08 <radio_rx_get+0x68>
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
    e9cc:	2374      	movs	r3, #116	; 0x74
			cmplt_curr = 0;
    e9ce:	0007      	movs	r7, r0
				packet_release_last);
		if (!cmplt) {
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
    e9d0:	33ff      	adds	r3, #255	; 0xff
    e9d2:	5cf3      	ldrb	r3, [r6, r3]
    e9d4:	aa02      	add	r2, sp, #8
    e9d6:	7153      	strb	r3, [r2, #5]
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
    e9d8:	23ba      	movs	r3, #186	; 0xba
    e9da:	005b      	lsls	r3, r3, #1
    e9dc:	5cf2      	ldrb	r2, [r6, r3]
    e9de:	ab02      	add	r3, sp, #8
    e9e0:	b2d2      	uxtb	r2, r2
    e9e2:	1d59      	adds	r1, r3, #5
    e9e4:	1d98      	adds	r0, r3, #6
    e9e6:	f7fa fcbd 	bl	9364 <tx_cmplt_get>
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
				 (cmplt_prev != cmplt_curr));
    e9ea:	2f00      	cmp	r7, #0
    e9ec:	d001      	beq.n	e9f2 <radio_rx_get+0x52>

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
    e9ee:	0007      	movs	r7, r0
    e9f0:	e7f2      	b.n	e9d8 <radio_rx_get+0x38>
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
    e9f2:	2800      	cmp	r0, #0
    e9f4:	d1fb      	bne.n	e9ee <radio_rx_get+0x4e>
				 (cmplt_prev != cmplt_curr));

			*radio_pdu_node_rx = _radio_pdu_node_rx;
    e9f6:	9b01      	ldr	r3, [sp, #4]
    e9f8:	e007      	b.n	ea0a <radio_rx_get+0x6a>
		} else {
			*radio_pdu_node_rx = NULL;
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    e9fa:	22ba      	movs	r2, #186	; 0xba
    e9fc:	0052      	lsls	r2, r2, #1
    e9fe:	5c9a      	ldrb	r2, [r3, r2]
    ea00:	b2d2      	uxtb	r2, r2
    ea02:	f7fa fcaf 	bl	9364 <tx_cmplt_get>
    ea06:	0004      	movs	r4, r0
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
    ea08:	2300      	movs	r3, #0
	}

	return cmplt;
}
    ea0a:	0020      	movs	r0, r4
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
    ea0c:	602b      	str	r3, [r5, #0]
	}

	return cmplt;
}
    ea0e:	b005      	add	sp, #20
    ea10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea12:	46c0      	nop			; (mov r8, r8)
    ea14:	20000f68 	.word	0x20000f68

0000ea18 <radio_rx_mem_release>:
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
    ea18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ea1a:	2680      	movs	r6, #128	; 0x80
    ea1c:	0005      	movs	r5, r0
	struct radio_pdu_node_rx *_radio_pdu_node_rx;
	struct connection *conn;

	_radio_pdu_node_rx = *radio_pdu_node_rx;
    ea1e:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
    ea20:	2800      	cmp	r0, #0
    ea22:	d02b      	beq.n	ea7c <radio_rx_mem_release+0x64>
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;

		switch (_radio_pdu_node_rx_free->hdr.type) {
    ea24:	7903      	ldrb	r3, [r0, #4]
	_radio_pdu_node_rx = *radio_pdu_node_rx;
	while (_radio_pdu_node_rx) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
    ea26:	6807      	ldr	r7, [r0, #0]
    ea28:	2b0c      	cmp	r3, #12
    ea2a:	d81a      	bhi.n	ea62 <radio_rx_mem_release+0x4a>
    ea2c:	2201      	movs	r2, #1
    ea2e:	409a      	lsls	r2, r3
    ea30:	0013      	movs	r3, r2
    ea32:	4a15      	ldr	r2, [pc, #84]	; (ea88 <radio_rx_mem_release+0x70>)
    ea34:	4c15      	ldr	r4, [pc, #84]	; (ea8c <radio_rx_mem_release+0x74>)
    ea36:	4213      	tst	r3, r2
    ea38:	d10c      	bne.n	ea54 <radio_rx_mem_release+0x3c>
    ea3a:	4233      	tst	r3, r6
    ea3c:	d011      	beq.n	ea62 <radio_rx_mem_release+0x4a>
			mem_release(_radio_pdu_node_rx_free,
				    &_radio.pkt_rx_data_free);
			break;

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    ea3e:	0023      	movs	r3, r4
    ea40:	218c      	movs	r1, #140	; 0x8c
    ea42:	33fc      	adds	r3, #252	; 0xfc
    ea44:	88c2      	ldrh	r2, [r0, #6]
    ea46:	0049      	lsls	r1, r1, #1
    ea48:	6898      	ldr	r0, [r3, #8]
    ea4a:	f7f8 ff46 	bl	78da <mem_get>
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
    ea4e:	0021      	movs	r1, r4
    ea50:	3109      	adds	r1, #9
    ea52:	e001      	b.n	ea58 <radio_rx_mem_release+0x40>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
		case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

			mem_release(_radio_pdu_node_rx_free,
    ea54:	0021      	movs	r1, r4
    ea56:	312d      	adds	r1, #45	; 0x2d

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
    ea58:	31ff      	adds	r1, #255	; 0xff
    ea5a:	f7f8 ff20 	bl	789e <mem_release>
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
    ea5e:	0038      	movs	r0, r7
    ea60:	e7de      	b.n	ea20 <radio_rx_mem_release+0x8>

			mem_release(conn, &_radio.conn_free);
			break;

		default:
			LL_ASSERT(0);
    ea62:	4b0b      	ldr	r3, [pc, #44]	; (ea90 <radio_rx_mem_release+0x78>)
    ea64:	4a0b      	ldr	r2, [pc, #44]	; (ea94 <radio_rx_mem_release+0x7c>)
    ea66:	9301      	str	r3, [sp, #4]
    ea68:	4b0b      	ldr	r3, [pc, #44]	; (ea98 <radio_rx_mem_release+0x80>)
    ea6a:	490c      	ldr	r1, [pc, #48]	; (ea9c <radio_rx_mem_release+0x84>)
    ea6c:	9300      	str	r3, [sp, #0]
    ea6e:	480c      	ldr	r0, [pc, #48]	; (eaa0 <radio_rx_mem_release+0x88>)
    ea70:	4b0c      	ldr	r3, [pc, #48]	; (eaa4 <radio_rx_mem_release+0x8c>)
    ea72:	f7f2 ff0f 	bl	1894 <printk>
    ea76:	b662      	cpsie	i
    ea78:	2004      	movs	r0, #4
    ea7a:	df02      	svc	2
			break;
		}
	}

	*radio_pdu_node_rx = _radio_pdu_node_rx;
    ea7c:	6028      	str	r0, [r5, #0]

	packet_rx_allocate(0xff);
    ea7e:	30ff      	adds	r0, #255	; 0xff
    ea80:	f7fa fb9c 	bl	91bc <packet_rx_allocate>
}
    ea84:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ea86:	46c0      	nop			; (mov r8, r8)
    ea88:	00001f7e 	.word	0x00001f7e
    ea8c:	20000f68 	.word	0x20000f68
    ea90:	0001241d 	.word	0x0001241d
    ea94:	0001246d 	.word	0x0001246d
    ea98:	000124a8 	.word	0x000124a8
    ea9c:	000123e3 	.word	0x000123e3
    eaa0:	000129d4 	.word	0x000129d4
    eaa4:	00014934 	.word	0x00014934

0000eaa8 <do_radio_rx_fc_set>:
		_radio.fc_req = req;
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
    eaa8:	b530      	push	{r4, r5, lr}
    eaaa:	4b18      	ldr	r3, [pc, #96]	; (eb0c <do_radio_rx_fc_set+0x64>)
    eaac:	0004      	movs	r4, r0
	if (req == ack) {
    eaae:	4291      	cmp	r1, r2
    eab0:	d11c      	bne.n	eaec <do_radio_rx_fc_set+0x44>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    eab2:	001a      	movs	r2, r3
    eab4:	32fc      	adds	r2, #252	; 0xfc
    eab6:	6d15      	ldr	r5, [r2, #80]	; 0x50
    eab8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
				_radio.fc_ack = ack;

				return 1;
			}
		} else {
			return 1;
    eaba:	2001      	movs	r0, #1
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    eabc:	42aa      	cmp	r2, r5
    eabe:	d123      	bne.n	eb08 <do_radio_rx_fc_set+0x60>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    eac0:	1e0a      	subs	r2, r1, #0
    eac2:	d100      	bne.n	eac6 <do_radio_rx_fc_set+0x1e>
				ack1 = TRIPLE_BUFFER_SIZE;
    eac4:	2203      	movs	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    eac6:	3a01      	subs	r2, #1
    eac8:	b2d2      	uxtb	r2, r2
    eaca:	0010      	movs	r0, r2
    eacc:	30b8      	adds	r0, #184	; 0xb8
    eace:	0040      	lsls	r0, r0, #1
    ead0:	1818      	adds	r0, r3, r0
    ead2:	80c4      	strh	r4, [r0, #6]
			_radio.fc_ack = ack1;
    ead4:	247e      	movs	r4, #126	; 0x7e
    ead6:	34ff      	adds	r4, #255	; 0xff
    ead8:	551a      	strb	r2, [r3, r4]

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    eada:	22be      	movs	r2, #190	; 0xbe
    eadc:	0052      	lsls	r2, r2, #1
    eade:	5c9a      	ldrb	r2, [r3, r2]
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
    eae0:	2000      	movs	r0, #0
			}
			_radio.fc_handle[--ack1] = handle;
			_radio.fc_ack = ack1;

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    eae2:	4291      	cmp	r1, r2
    eae4:	d010      	beq.n	eb08 <do_radio_rx_fc_set+0x60>
				_radio.fc_ack = ack;
    eae6:	5519      	strb	r1, [r3, r4]

				return 1;
    eae8:	3001      	adds	r0, #1
    eaea:	e00d      	b.n	eb08 <do_radio_rx_fc_set+0x60>
			}
		} else {
			return 1;
		}
	} else if (((req == 0) &&
    eaec:	2900      	cmp	r1, #0
    eaee:	d103      	bne.n	eaf8 <do_radio_rx_fc_set+0x50>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
    eaf0:	22bd      	movs	r2, #189	; 0xbd
    eaf2:	0052      	lsls	r2, r2, #1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
    eaf4:	5a9b      	ldrh	r3, [r3, r2]
    eaf6:	e003      	b.n	eb00 <do_radio_rx_fc_set+0x58>
		} else {
			return 1;
		}
	} else if (((req == 0) &&
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    eaf8:	31b7      	adds	r1, #183	; 0xb7
    eafa:	0049      	lsls	r1, r1, #1
    eafc:	1859      	adds	r1, r3, r1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
    eafe:	88cb      	ldrh	r3, [r1, #6]
    eb00:	1b18      	subs	r0, r3, r4
    eb02:	1e43      	subs	r3, r0, #1
    eb04:	4198      	sbcs	r0, r3
    eb06:	b2c0      	uxtb	r0, r0
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
}
    eb08:	bd30      	pop	{r4, r5, pc}
    eb0a:	46c0      	nop			; (mov r8, r8)
    eb0c:	20000f68 	.word	0x20000f68

0000eb10 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
    eb10:	22bf      	movs	r2, #191	; 0xbf

	return 0;
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    eb12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.fc_ena) {
    eb14:	4b15      	ldr	r3, [pc, #84]	; (eb6c <radio_rx_fc_set+0x5c>)
    eb16:	0052      	lsls	r2, r2, #1
    eb18:	5c9a      	ldrb	r2, [r3, r2]
    eb1a:	2a00      	cmp	r2, #0
    eb1c:	d101      	bne.n	eb22 <radio_rx_fc_set+0x12>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    eb1e:	2000      	movs	r0, #0
    eb20:	e022      	b.n	eb68 <radio_rx_fc_set+0x58>
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
    eb22:	22be      	movs	r2, #190	; 0xbe
		u8_t ack = _radio.fc_ack;
    eb24:	257e      	movs	r5, #126	; 0x7e
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
    eb26:	0052      	lsls	r2, r2, #1
    eb28:	5c9c      	ldrb	r4, [r3, r2]
		u8_t ack = _radio.fc_ack;
    eb2a:	35ff      	adds	r5, #255	; 0xff
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
    eb2c:	b2e4      	uxtb	r4, r4
		u8_t ack = _radio.fc_ack;
    eb2e:	5d5a      	ldrb	r2, [r3, r5]

		if (fc) {
    eb30:	2900      	cmp	r1, #0
    eb32:	d006      	beq.n	eb42 <radio_rx_fc_set+0x32>
			if (handle != 0xffff) {
    eb34:	4b0e      	ldr	r3, [pc, #56]	; (eb70 <radio_rx_fc_set+0x60>)
    eb36:	4298      	cmp	r0, r3
    eb38:	d0f1      	beq.n	eb1e <radio_rx_fc_set+0xe>
				return do_radio_rx_fc_set(handle, req, ack);
    eb3a:	0021      	movs	r1, r4
    eb3c:	f7ff ffb4 	bl	eaa8 <do_radio_rx_fc_set>
    eb40:	e012      	b.n	eb68 <radio_rx_fc_set+0x58>
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    eb42:	0018      	movs	r0, r3
    eb44:	30fc      	adds	r0, #252	; 0xfc
    eb46:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
    eb48:	6d06      	ldr	r6, [r0, #80]	; 0x50
    eb4a:	42b7      	cmp	r7, r6
    eb4c:	d1e7      	bne.n	eb1e <radio_rx_fc_set+0xe>
    eb4e:	4294      	cmp	r4, r2
    eb50:	d0e5      	beq.n	eb1e <radio_rx_fc_set+0xe>
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    eb52:	6d00      	ldr	r0, [r0, #80]	; 0x50
				return do_radio_rx_fc_set(handle, req, ack);
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;
    eb54:	555c      	strb	r4, [r3, r5]

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    eb56:	4287      	cmp	r7, r0
    eb58:	d0e1      	beq.n	eb1e <radio_rx_fc_set+0xe>
			    (req == _radio.fc_req)) {
    eb5a:	20be      	movs	r0, #190	; 0xbe
    eb5c:	0040      	lsls	r0, r0, #1
    eb5e:	5c18      	ldrb	r0, [r3, r0]
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    eb60:	4284      	cmp	r4, r0
    eb62:	d1dc      	bne.n	eb1e <radio_rx_fc_set+0xe>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    eb64:	0008      	movs	r0, r1
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
			    (req == _radio.fc_req)) {
				_radio.fc_ack = ack;
    eb66:	555a      	strb	r2, [r3, r5]
			}
		}
	}

	return 0;
}
    eb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb6a:	46c0      	nop			; (mov r8, r8)
    eb6c:	20000f68 	.word	0x20000f68
    eb70:	0000ffff 	.word	0x0000ffff

0000eb74 <radio_tx_mem_acquire>:

	return 0;
}

struct radio_pdu_node_tx *radio_tx_mem_acquire(void)
{
    eb74:	b510      	push	{r4, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
    eb76:	4803      	ldr	r0, [pc, #12]	; (eb84 <radio_tx_mem_acquire+0x10>)
    eb78:	3061      	adds	r0, #97	; 0x61
    eb7a:	30ff      	adds	r0, #255	; 0xff
    eb7c:	f7f8 fe76 	bl	786c <mem_acquire>
}
    eb80:	bd10      	pop	{r4, pc}
    eb82:	46c0      	nop			; (mov r8, r8)
    eb84:	20000f68 	.word	0x20000f68

0000eb88 <radio_tx_mem_release>:

void radio_tx_mem_release(struct radio_pdu_node_tx *node_tx)
{
    eb88:	b510      	push	{r4, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
    eb8a:	4903      	ldr	r1, [pc, #12]	; (eb98 <radio_tx_mem_release+0x10>)
    eb8c:	3161      	adds	r1, #97	; 0x61
    eb8e:	31ff      	adds	r1, #255	; 0xff
    eb90:	f7f8 fe85 	bl	789e <mem_release>
}
    eb94:	bd10      	pop	{r4, pc}
    eb96:	46c0      	nop			; (mov r8, r8)
    eb98:	20000f68 	.word	0x20000f68

0000eb9c <radio_tx_mem_enqueue>:
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    eb9c:	23b9      	movs	r3, #185	; 0xb9
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
    eb9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    eba0:	4c33      	ldr	r4, [pc, #204]	; (ec70 <radio_tx_mem_enqueue+0xd4>)
    eba2:	005b      	lsls	r3, r3, #1
    eba4:	5ce5      	ldrb	r5, [r4, r3]
	if (last == _radio.packet_tx_count) {
    eba6:	3b02      	subs	r3, #2
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    eba8:	3501      	adds	r5, #1
	if (last == _radio.packet_tx_count) {
    ebaa:	5ce3      	ldrb	r3, [r4, r3]
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    ebac:	b2ed      	uxtb	r5, r5
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
    ebae:	b089      	sub	sp, #36	; 0x24
    ebb0:	0007      	movs	r7, r0
    ebb2:	000e      	movs	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
	if (last == _radio.packet_tx_count) {
    ebb4:	42ab      	cmp	r3, r5
    ebb6:	d100      	bne.n	ebba <radio_tx_mem_enqueue+0x1e>
		last = 0;
    ebb8:	2500      	movs	r5, #0
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
    ebba:	0038      	movs	r0, r7
    ebbc:	f7fa fc20 	bl	9400 <connection_get>
    ebc0:	1e03      	subs	r3, r0, #0
	if (!conn || (last == _radio.packet_tx_first)) {
    ebc2:	d052      	beq.n	ec6a <radio_tx_mem_enqueue+0xce>
    ebc4:	2272      	movs	r2, #114	; 0x72
    ebc6:	32ff      	adds	r2, #255	; 0xff
    ebc8:	5ca2      	ldrb	r2, [r4, r2]
    ebca:	4295      	cmp	r5, r2
    ebcc:	d04d      	beq.n	ec6a <radio_tx_mem_enqueue+0xce>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
    ebce:	22b2      	movs	r2, #178	; 0xb2
    ebd0:	0052      	lsls	r2, r2, #1
    ebd2:	5aa2      	ldrh	r2, [r4, r2]
    ebd4:	7971      	ldrb	r1, [r6, #5]
    ebd6:	3a07      	subs	r2, #7
    ebd8:	4291      	cmp	r1, r2
    ebda:	d908      	bls.n	ebee <radio_tx_mem_enqueue+0x52>
    ebdc:	4b25      	ldr	r3, [pc, #148]	; (ec74 <radio_tx_mem_enqueue+0xd8>)
    ebde:	4a26      	ldr	r2, [pc, #152]	; (ec78 <radio_tx_mem_enqueue+0xdc>)
    ebe0:	9301      	str	r3, [sp, #4]
    ebe2:	4b26      	ldr	r3, [pc, #152]	; (ec7c <radio_tx_mem_enqueue+0xe0>)
    ebe4:	4926      	ldr	r1, [pc, #152]	; (ec80 <radio_tx_mem_enqueue+0xe4>)
    ebe6:	9300      	str	r3, [sp, #0]
    ebe8:	4826      	ldr	r0, [pc, #152]	; (ec84 <radio_tx_mem_enqueue+0xe8>)
    ebea:	4b27      	ldr	r3, [pc, #156]	; (ec88 <radio_tx_mem_enqueue+0xec>)
    ebec:	e038      	b.n	ec60 <radio_tx_mem_enqueue+0xc4>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
    ebee:	0022      	movs	r2, r4
    ebf0:	21b9      	movs	r1, #185	; 0xb9
    ebf2:	32fc      	adds	r2, #252	; 0xfc
    ebf4:	0049      	lsls	r1, r1, #1
    ebf6:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    ebf8:	5c62      	ldrb	r2, [r4, r1]
    ebfa:	00d2      	lsls	r2, r2, #3
    ebfc:	5217      	strh	r7, [r2, r0]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
    ebfe:	5c62      	ldrb	r2, [r4, r1]
    ec00:	00d2      	lsls	r2, r2, #3
    ec02:	1882      	adds	r2, r0, r2
    ec04:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
    ec06:	5465      	strb	r5, [r4, r1]

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
    ec08:	001c      	movs	r4, r3
    ec0a:	3444      	adds	r4, #68	; 0x44
    ec0c:	3972      	subs	r1, #114	; 0x72
    ec0e:	7822      	ldrb	r2, [r4, #0]
    ec10:	39ff      	subs	r1, #255	; 0xff
    ec12:	420a      	tst	r2, r1
    ec14:	d101      	bne.n	ec1a <radio_tx_mem_enqueue+0x7e>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
    ec16:	2000      	movs	r0, #0
    ec18:	e028      	b.n	ec6c <radio_tx_mem_enqueue+0xd0>
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
	_radio.packet_tx_last = last;

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
    ec1a:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
    ec1c:	2800      	cmp	r0, #0
    ec1e:	d0fa      	beq.n	ec16 <radio_tx_mem_enqueue+0x7a>
    ec20:	2510      	movs	r5, #16
    ec22:	0010      	movs	r0, r2
    ec24:	4028      	ands	r0, r5
    ec26:	d1f6      	bne.n	ec16 <radio_tx_mem_enqueue+0x7a>
	    (conn->role.slave.latency_cancel == 0)) {
		u32_t ticker_status;

		conn->role.slave.latency_cancel = 1;
    ec28:	432a      	orrs	r2, r5
    ec2a:	7022      	strb	r2, [r4, #0]

		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec2c:	8c1a      	ldrh	r2, [r3, #32]
    ec2e:	9306      	str	r3, [sp, #24]
    ec30:	4b16      	ldr	r3, [pc, #88]	; (ec8c <radio_tx_mem_enqueue+0xf0>)
    ec32:	3207      	adds	r2, #7
    ec34:	9305      	str	r3, [sp, #20]
    ec36:	9103      	str	r1, [sp, #12]
    ec38:	0003      	movs	r3, r0
    ec3a:	b2d2      	uxtb	r2, r2
    ec3c:	9004      	str	r0, [sp, #16]
    ec3e:	9002      	str	r0, [sp, #8]
    ec40:	9001      	str	r0, [sp, #4]
    ec42:	9000      	str	r0, [sp, #0]
    ec44:	2103      	movs	r1, #3
    ec46:	f7fa f945 	bl	8ed4 <ticker_update>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ec4a:	2302      	movs	r3, #2
    ec4c:	4398      	bics	r0, r3
    ec4e:	d0e2      	beq.n	ec16 <radio_tx_mem_enqueue+0x7a>
    ec50:	4b08      	ldr	r3, [pc, #32]	; (ec74 <radio_tx_mem_enqueue+0xd8>)
    ec52:	4a09      	ldr	r2, [pc, #36]	; (ec78 <radio_tx_mem_enqueue+0xdc>)
    ec54:	9301      	str	r3, [sp, #4]
    ec56:	4b09      	ldr	r3, [pc, #36]	; (ec7c <radio_tx_mem_enqueue+0xe0>)
    ec58:	4909      	ldr	r1, [pc, #36]	; (ec80 <radio_tx_mem_enqueue+0xe4>)
    ec5a:	9300      	str	r3, [sp, #0]
    ec5c:	480c      	ldr	r0, [pc, #48]	; (ec90 <radio_tx_mem_enqueue+0xf4>)
    ec5e:	4b0a      	ldr	r3, [pc, #40]	; (ec88 <radio_tx_mem_enqueue+0xec>)
    ec60:	f7f2 fe18 	bl	1894 <printk>
    ec64:	b662      	cpsie	i
    ec66:	2004      	movs	r0, #4
    ec68:	df02      	svc	2
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
	if (!conn || (last == _radio.packet_tx_first)) {
		return 1;
    ec6a:	2001      	movs	r0, #1
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
}
    ec6c:	b009      	add	sp, #36	; 0x24
    ec6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec70:	20000f68 	.word	0x20000f68
    ec74:	0001241d 	.word	0x0001241d
    ec78:	0001246d 	.word	0x0001246d
    ec7c:	000124a8 	.word	0x000124a8
    ec80:	000123e3 	.word	0x000123e3
    ec84:	0001401b 	.word	0x0001401b
    ec88:	0001498f 	.word	0x0001498f
    ec8c:	00009b65 	.word	0x00009b65
    ec90:	000137f7 	.word	0x000137f7

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
    ec94:	4770      	bx	lr
	...

0000ec98 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
    ec98:	b510      	push	{r4, lr}
    ec9a:	4b09      	ldr	r3, [pc, #36]	; (ecc0 <ll_adv_scan_state_cb+0x28>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}

static void rpa_refresh_start(void)
{
	if (!rl_enable) {
    ec9c:	781b      	ldrb	r3, [r3, #0]
	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
	if (bm) {
    ec9e:	2800      	cmp	r0, #0
    eca0:	d008      	beq.n	ecb4 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}

static void rpa_refresh_start(void)
{
	if (!rl_enable) {
    eca2:	2b00      	cmp	r3, #0
    eca4:	d00b      	beq.n	ecbe <ll_adv_scan_state_cb+0x26>
		return;
	}

	BT_DBG("");
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
    eca6:	4b07      	ldr	r3, [pc, #28]	; (ecc4 <ll_adv_scan_state_cb+0x2c>)
    eca8:	4907      	ldr	r1, [pc, #28]	; (ecc8 <ll_adv_scan_state_cb+0x30>)
    ecaa:	681a      	ldr	r2, [r3, #0]
    ecac:	4807      	ldr	r0, [pc, #28]	; (eccc <ll_adv_scan_state_cb+0x34>)
    ecae:	f003 f92f 	bl	11f10 <k_delayed_work_submit_to_queue>
    ecb2:	e004      	b.n	ecbe <ll_adv_scan_state_cb+0x26>
}

static void rpa_refresh_stop(void)
{
	if (!rl_enable) {
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	d002      	beq.n	ecbe <ll_adv_scan_state_cb+0x26>
		return;
	}

	k_delayed_work_cancel(&rpa_work);
    ecb8:	4803      	ldr	r0, [pc, #12]	; (ecc8 <ll_adv_scan_state_cb+0x30>)
    ecba:	f003 f8f1 	bl	11ea0 <k_delayed_work_cancel>
	if (bm) {
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
	}
}
    ecbe:	bd10      	pop	{r4, pc}
    ecc0:	200019e9 	.word	0x200019e9
    ecc4:	20001ce0 	.word	0x20001ce0
    ecc8:	20001c58 	.word	0x20001c58
    eccc:	20001cf8 	.word	0x20001cf8

0000ecd0 <radio_adv_enable>:
		       u8_t filter_policy, u8_t rl_idx)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
    ecd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecd2:	b095      	sub	sp, #84	; 0x54
    ecd4:	930f      	str	r3, [sp, #60]	; 0x3c
    ecd6:	ab1a      	add	r3, sp, #104	; 0x68
    ecd8:	781b      	ldrb	r3, [r3, #0]
    ecda:	910b      	str	r1, [sp, #44]	; 0x2c
    ecdc:	9310      	str	r3, [sp, #64]	; 0x40
    ecde:	232f      	movs	r3, #47	; 0x2f
    ece0:	a906      	add	r1, sp, #24
    ece2:	185b      	adds	r3, r3, r1
    ece4:	701a      	strb	r2, [r3, #0]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ece6:	2302      	movs	r3, #2
	struct pdu_adv *pdu_adv;
	u16_t ticks_slot;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    ece8:	4dbf      	ldr	r5, [pc, #764]	; (efe8 <radio_adv_enable+0x318>)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ecea:	9313      	str	r3, [sp, #76]	; 0x4c
	struct pdu_adv *pdu_adv;
	u16_t ticks_slot;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    ecec:	1d6b      	adds	r3, r5, #5
    ecee:	7fda      	ldrb	r2, [r3, #31]
    ecf0:	2301      	movs	r3, #1
		       u8_t filter_policy, u8_t rl_idx)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
    ecf2:	900e      	str	r0, [sp, #56]	; 0x38
	struct pdu_adv *pdu_adv;
	u16_t ticks_slot;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    ecf4:	401a      	ands	r2, r3
    ecf6:	d000      	beq.n	ecfa <radio_adv_enable+0x2a>
    ecf8:	e171      	b.n	efde <radio_adv_enable+0x30e>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
    ecfa:	002b      	movs	r3, r5
    ecfc:	3376      	adds	r3, #118	; 0x76

	if (_radio.advertiser.is_enabled) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	pdu_adv = (struct pdu_adv *)
    ecfe:	7819      	ldrb	r1, [r3, #0]
    ed00:	2327      	movs	r3, #39	; 0x27
    ed02:	434b      	muls	r3, r1
    ed04:	3320      	adds	r3, #32
    ed06:	18eb      	adds	r3, r5, r3
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    ed08:	79d9      	ldrb	r1, [r3, #7]

	if (_radio.advertiser.is_enabled) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	pdu_adv = (struct pdu_adv *)
    ed0a:	930d      	str	r3, [sp, #52]	; 0x34
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    ed0c:	230f      	movs	r3, #15
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
	} else {
		conn = NULL;
    ed0e:	0016      	movs	r6, r2
	}

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    ed10:	400b      	ands	r3, r1
    ed12:	2b01      	cmp	r3, #1
    ed14:	d900      	bls.n	ed18 <radio_adv_enable+0x48>
    ed16:	e08e      	b.n	ee36 <radio_adv_enable+0x166>
	    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND)) {
		void *link;

		if (_radio.advertiser.conn) {
    ed18:	4bb4      	ldr	r3, [pc, #720]	; (efec <radio_adv_enable+0x31c>)
    ed1a:	681c      	ldr	r4, [r3, #0]
    ed1c:	2c00      	cmp	r4, #0
    ed1e:	d000      	beq.n	ed22 <radio_adv_enable+0x52>
    ed20:	e15d      	b.n	efde <radio_adv_enable+0x30e>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}

		link = mem_acquire(&_radio.link_rx_free);
    ed22:	48b3      	ldr	r0, [pc, #716]	; (eff0 <radio_adv_enable+0x320>)
    ed24:	f7f8 fda2 	bl	786c <mem_acquire>
		if (!link) {
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    ed28:	2707      	movs	r7, #7

		if (_radio.advertiser.conn) {
			return BT_HCI_ERR_CMD_DISALLOWED;
		}

		link = mem_acquire(&_radio.link_rx_free);
    ed2a:	900c      	str	r0, [sp, #48]	; 0x30
		if (!link) {
    ed2c:	2800      	cmp	r0, #0
    ed2e:	d100      	bne.n	ed32 <radio_adv_enable+0x62>
    ed30:	e156      	b.n	efe0 <radio_adv_enable+0x310>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
		}

		conn = mem_acquire(&_radio.conn_free);
    ed32:	0028      	movs	r0, r5
    ed34:	3009      	adds	r0, #9
    ed36:	30ff      	adds	r0, #255	; 0xff
    ed38:	f7f8 fd98 	bl	786c <mem_acquire>
    ed3c:	1e06      	subs	r6, r0, #0
		if (!conn) {
    ed3e:	d104      	bne.n	ed4a <radio_adv_enable+0x7a>
			mem_release(link, &_radio.link_rx_free);
    ed40:	49ab      	ldr	r1, [pc, #684]	; (eff0 <radio_adv_enable+0x320>)
    ed42:	980c      	ldr	r0, [sp, #48]	; 0x30
    ed44:	f7f8 fdab 	bl	789e <mem_release>

			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    ed48:	e14a      	b.n	efe0 <radio_adv_enable+0x310>
		}

		conn->handle = 0xFFFF;
    ed4a:	2301      	movs	r3, #1
    ed4c:	425b      	negs	r3, r3
    ed4e:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    ed50:	0003      	movs	r3, r0
    ed52:	4aa8      	ldr	r2, [pc, #672]	; (eff4 <radio_adv_enable+0x324>)
    ed54:	3398      	adds	r3, #152	; 0x98
    ed56:	601a      	str	r2, [r3, #0]
		conn->data_chan_sel = 0;
    ed58:	2240      	movs	r2, #64	; 0x40
    ed5a:	7f03      	ldrb	r3, [r0, #28]
		conn->data_chan_use = 0;
    ed5c:	77c4      	strb	r4, [r0, #31]
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
    ed5e:	4393      	bics	r3, r2
    ed60:	7703      	strb	r3, [r0, #28]
		conn->data_chan_use = 0;
		conn->event_counter = 0;
    ed62:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
    ed64:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
    ed66:	8544      	strh	r4, [r0, #42]	; 0x2a

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
    ed68:	35fe      	adds	r5, #254	; 0xfe
    ed6a:	8c2b      	ldrh	r3, [r5, #32]
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
    ed6c:	4694      	mov	ip, r2
		conn->event_counter = 0;
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
    ed6e:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    ed70:	231b      	movs	r3, #27
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
    ed72:	0002      	movs	r2, r0
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    ed74:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    ed76:	8603      	strh	r3, [r0, #48]	; 0x30
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
    ed78:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    ed7a:	3232      	adds	r2, #50	; 0x32
    ed7c:	403b      	ands	r3, r7
    ed7e:	0019      	movs	r1, r3
    ed80:	7813      	ldrb	r3, [r2, #0]
		conn->phy_tx = BIT(0);
		conn->phy_pref_flags = 0;
		conn->phy_flags = 0;
    ed82:	4660      	mov	r0, ip
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
    ed84:	43bb      	bics	r3, r7
    ed86:	430b      	orrs	r3, r1
		conn->phy_tx = BIT(0);
    ed88:	2138      	movs	r1, #56	; 0x38
    ed8a:	b2db      	uxtb	r3, r3
    ed8c:	438b      	bics	r3, r1
    ed8e:	3930      	subs	r1, #48	; 0x30
		conn->phy_pref_flags = 0;
    ed90:	430b      	orrs	r3, r1
		conn->phy_flags = 0;
    ed92:	4383      	bics	r3, r0
    ed94:	303f      	adds	r0, #63	; 0x3f
    ed96:	4003      	ands	r3, r0
    ed98:	7013      	strb	r3, [r2, #0]
		conn->phy_pref_rx = _radio.default_phy_rx;
    ed9a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    ed9c:	7855      	ldrb	r5, [r2, #1]
    ed9e:	403b      	ands	r3, r7
    eda0:	43bd      	bics	r5, r7
    eda2:	432b      	orrs	r3, r5
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
    eda4:	0035      	movs	r5, r6
		conn->phy_pref_tx = _radio.default_phy_tx;
		conn->phy_tx = BIT(0);
		conn->phy_pref_flags = 0;
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
		conn->phy_rx = BIT(0);
    eda6:	3847      	subs	r0, #71	; 0x47
    eda8:	b2db      	uxtb	r3, r3
    edaa:	4383      	bics	r3, r0
    edac:	430b      	orrs	r3, r1
    edae:	7053      	strb	r3, [r2, #1]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
    edb0:	3544      	adds	r5, #68	; 0x44
    edb2:	782b      	ldrb	r3, [r5, #0]
		conn->role.slave.latency_cancel = 0;
    edb4:	3837      	subs	r0, #55	; 0x37
    edb6:	4303      	orrs	r3, r0
    edb8:	300f      	adds	r0, #15
    edba:	4383      	bics	r3, r0
    edbc:	702b      	strb	r3, [r5, #0]
		conn->role.slave.window_widening_prepare_us = 0;
		conn->role.slave.window_widening_event_us = 0;
		conn->role.slave.ticks_to_offset = 0;
		conn->supervision_expire = 6;
    edbe:	2306      	movs	r3, #6
    edc0:	86f3      	strh	r3, [r6, #54]	; 0x36
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
    edc2:	0033      	movs	r3, r6
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
    edc4:	2501      	movs	r5, #1
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
    edc6:	3368      	adds	r3, #104	; 0x68
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
    edc8:	1d32      	adds	r2, r6, #4
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
    edca:	6534      	str	r4, [r6, #80]	; 0x50
		conn->role.slave.window_widening_event_us = 0;
    edcc:	6574      	str	r4, [r6, #84]	; 0x54
		conn->role.slave.ticks_to_offset = 0;
    edce:	6674      	str	r4, [r6, #100]	; 0x64
		conn->supervision_expire = 6;
		conn->procedure_expire = 0;
    edd0:	8774      	strh	r4, [r6, #58]	; 0x3a

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
    edd2:	87d4      	strh	r4, [r2, #62]	; 0x3e
		conn->appto_expire = 0;
    edd4:	87f4      	strh	r4, [r6, #62]	; 0x3e
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
    edd6:	3298      	adds	r2, #152	; 0x98
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
    edd8:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack = 0;
    edda:	705c      	strb	r4, [r3, #1]
		conn->llcp_version.tx = 0;
    eddc:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_version.rx = 0;
    edde:	43ab      	bics	r3, r5
    ede0:	196d      	adds	r5, r5, r5
    ede2:	43ab      	bics	r3, r5
    ede4:	7013      	strb	r3, [r2, #0]
		conn->llcp_terminate.req = 0;
    ede6:	0033      	movs	r3, r6
    ede8:	33a4      	adds	r3, #164	; 0xa4
    edea:	701c      	strb	r4, [r3, #0]
		conn->llcp_terminate.ack = 0;
    edec:	705c      	strb	r4, [r3, #1]
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    edee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
		conn->llcp_terminate.req = 0;
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
    edf0:	70dc      	strb	r4, [r3, #3]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    edf2:	3304      	adds	r3, #4
    edf4:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
		conn->llcp_phy.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
    edf6:	0032      	movs	r2, r6
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->llcp_length.req = 0;
    edf8:	731c      	strb	r4, [r3, #12]
		conn->llcp_length.ack = 0;
    edfa:	735c      	strb	r4, [r3, #13]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
    edfc:	751c      	strb	r4, [r3, #20]
		conn->llcp_phy.ack = 0;
    edfe:	755c      	strb	r4, [r3, #21]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
    ee00:	32c0      	adds	r2, #192	; 0xc0
    ee02:	7813      	ldrb	r3, [r2, #0]
		conn->nesn = 0;
    ee04:	3d01      	subs	r5, #1
    ee06:	43ab      	bics	r3, r5
		conn->pause_rx = 0;
    ee08:	3501      	adds	r5, #1
    ee0a:	43ab      	bics	r3, r5
		conn->pause_tx = 0;
    ee0c:	3502      	adds	r5, #2
    ee0e:	43ab      	bics	r3, r5
		conn->enc_rx = 0;
    ee10:	438b      	bics	r3, r1
		conn->enc_tx = 0;
    ee12:	4383      	bics	r3, r0
		conn->refresh = 0;
    ee14:	3118      	adds	r1, #24
    ee16:	438b      	bics	r3, r1
		conn->empty = 0;
    ee18:	4661      	mov	r1, ip
    ee1a:	438b      	bics	r3, r1
    ee1c:	313f      	adds	r1, #63	; 0x3f
    ee1e:	400b      	ands	r3, r1
    ee20:	7013      	strb	r3, [r2, #0]
		conn->pkt_tx_head = NULL;
    ee22:	0033      	movs	r3, r6
    ee24:	33fc      	adds	r3, #252	; 0xfc
    ee26:	609c      	str	r4, [r3, #8]
		conn->pkt_tx_ctrl = NULL;
    ee28:	60dc      	str	r4, [r3, #12]
		conn->pkt_tx_data = NULL;
    ee2a:	611c      	str	r4, [r3, #16]
		conn->pkt_tx_last = NULL;
    ee2c:	615c      	str	r4, [r3, #20]
		conn->packet_tx_head_len = 0;
    ee2e:	761c      	strb	r4, [r3, #24]
		conn->packet_tx_head_offset = 0;
    ee30:	765c      	strb	r4, [r3, #25]
		conn->rssi_latest = 0x7F;
		conn->rssi_reported = 0x7F;
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
    ee32:	4b6e      	ldr	r3, [pc, #440]	; (efec <radio_adv_enable+0x31c>)
    ee34:	601e      	str	r6, [r3, #0]
	} else {
		conn = NULL;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
    ee36:	2307      	movs	r3, #7
    ee38:	4c6b      	ldr	r4, [pc, #428]	; (efe8 <radio_adv_enable+0x318>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chan_map = chan_map;
    ee3a:	202f      	movs	r0, #47	; 0x2f
	} else {
		conn = NULL;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
    ee3c:	1da5      	adds	r5, r4, #6
    ee3e:	7fe9      	ldrb	r1, [r5, #31]
    ee40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ee42:	4399      	bics	r1, r3
    ee44:	401a      	ands	r2, r3
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chan_map = chan_map;
    ee46:	430a      	orrs	r2, r1
    ee48:	2138      	movs	r1, #56	; 0x38
    ee4a:	af06      	add	r7, sp, #24
    ee4c:	19c0      	adds	r0, r0, r7
    ee4e:	7807      	ldrb	r7, [r0, #0]
    ee50:	438a      	bics	r2, r1
    ee52:	403b      	ands	r3, r7
    ee54:	00db      	lsls	r3, r3, #3
	_radio.advertiser.filter_policy = filter_policy;
    ee56:	4313      	orrs	r3, r2
    ee58:	223f      	movs	r2, #63	; 0x3f
    ee5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ee5c:	4013      	ands	r3, r2
    ee5e:	018f      	lsls	r7, r1, #6
    ee60:	433b      	orrs	r3, r7
    ee62:	77eb      	strb	r3, [r5, #31]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	_radio.advertiser.rl_idx = rl_idx;
    ee64:	250f      	movs	r5, #15
    ee66:	1de1      	adds	r1, r4, #7
    ee68:	7fcb      	ldrb	r3, [r1, #31]
    ee6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ee6c:	43ab      	bics	r3, r5
    ee6e:	402a      	ands	r2, r5
    ee70:	4313      	orrs	r3, r2
    ee72:	77cb      	strb	r3, [r1, #31]
#else
	ARG_UNUSED(rl_idx);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
    ee74:	23c0      	movs	r3, #192	; 0xc0
    ee76:	005b      	lsls	r3, r3, #1
	_radio.advertiser.rl_idx = rl_idx;
#else
	ARG_UNUSED(rl_idx);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

	_radio.advertiser.hdr.ticks_active_to_start =
    ee78:	58e3      	ldr	r3, [r4, r3]
	_radio.advertiser.hdr.ticks_xtal_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);

	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    ee7a:	2101      	movs	r1, #1
	_radio.advertiser.rl_idx = rl_idx;
#else
	ARG_UNUSED(rl_idx);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

	_radio.advertiser.hdr.ticks_active_to_start =
    ee7c:	61a3      	str	r3, [r4, #24]
		_radio.ticks_active_to_start;
	_radio.advertiser.hdr.ticks_xtal_to_start =
    ee7e:	2327      	movs	r3, #39	; 0x27
    ee80:	6163      	str	r3, [r4, #20]
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
    ee82:	2300      	movs	r3, #0
    ee84:	61e3      	str	r3, [r4, #28]
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);

	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    ee86:	f7f8 fd73 	bl	7970 <util_ones_count_get>

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    ee8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ee8c:	79df      	ldrb	r7, [r3, #7]
    ee8e:	402f      	ands	r7, r5
    ee90:	2f01      	cmp	r7, #1
    ee92:	d105      	bne.n	eea0 <radio_adv_enable+0x1d0>
		/* Max. chain is DIRECT_IND * channels + CONNECT_IND */
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    ee94:	23a7      	movs	r3, #167	; 0xa7
    ee96:	009b      	lsls	r3, r3, #2
    ee98:	4358      	muls	r0, r3
    ee9a:	3039      	adds	r0, #57	; 0x39
    ee9c:	30ff      	adds	r0, #255	; 0xff
    ee9e:	e006      	b.n	eeae <radio_adv_enable+0x1de>
			      chan_cnt) - 40 + 352;
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    eea0:	2f02      	cmp	r7, #2
    eea2:	d102      	bne.n	eeaa <radio_adv_enable+0x1da>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    eea4:	23a9      	movs	r3, #169	; 0xa9
    eea6:	009b      	lsls	r3, r3, #2
    eea8:	e000      	b.n	eeac <radio_adv_enable+0x1dc>
	} else {
		/* Max. chain is ADV/SCAN_IND + SCAN_REQ + SCAN_RESP */
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
    eeaa:	4b53      	ldr	r3, [pc, #332]	; (eff8 <radio_adv_enable+0x328>)
    eeac:	4358      	muls	r0, r3
			      152 + 376) * chan_cnt;
	}
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
    eeae:	4a53      	ldr	r2, [pc, #332]	; (effc <radio_adv_enable+0x32c>)
    eeb0:	2300      	movs	r3, #0
			      chan_cnt) - 40 + 352;
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
	} else {
		/* Max. chain is ADV/SCAN_IND + SCAN_REQ + SCAN_RESP */
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
    eeb2:	b280      	uxth	r0, r0
			      152 + 376) * chan_cnt;
	}
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
    eeb4:	2100      	movs	r1, #0
    eeb6:	f7f1 fb13 	bl	4e0 <__aeabi_lmul>
    eeba:	2307      	movs	r3, #7
    eebc:	4a50      	ldr	r2, [pc, #320]	; (f000 <radio_adv_enable+0x330>)
    eebe:	f7f1 faef 	bl	4a0 <__aeabi_uldivmod>

	ticks_slot_offset =
    eec2:	6963      	ldr	r3, [r4, #20]
    eec4:	69a5      	ldr	r5, [r4, #24]
	} else {
		/* Max. chain is ADV/SCAN_IND + SCAN_REQ + SCAN_RESP */
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
			      152 + 376) * chan_cnt;
	}
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
    eec6:	6220      	str	r0, [r4, #32]

	ticks_slot_offset =
    eec8:	429d      	cmp	r5, r3
    eeca:	d200      	bcs.n	eece <radio_adv_enable+0x1fe>
    eecc:	001d      	movs	r5, r3
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    eece:	2f01      	cmp	r7, #1
    eed0:	d13a      	bne.n	ef48 <radio_adv_enable+0x278>
    eed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eed4:	2b00      	cmp	r3, #0
    eed6:	d137      	bne.n	ef48 <radio_adv_enable+0x278>
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
    eed8:	f7fa f8e8 	bl	90ac <ticker_ticks_now_get>

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eedc:	ab13      	add	r3, sp, #76	; 0x4c
    eede:	9308      	str	r3, [sp, #32]
    eee0:	4b48      	ldr	r3, [pc, #288]	; (f004 <radio_adv_enable+0x334>)
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
    eee2:	0007      	movs	r7, r0

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eee4:	9307      	str	r3, [sp, #28]
    eee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eee8:	2205      	movs	r2, #5
    eeea:	9306      	str	r3, [sp, #24]
    eeec:	4b46      	ldr	r3, [pc, #280]	; (f008 <radio_adv_enable+0x338>)
    eeee:	2103      	movs	r1, #3
    eef0:	9305      	str	r3, [sp, #20]
    eef2:	6a23      	ldr	r3, [r4, #32]
    eef4:	195d      	adds	r5, r3, r5
    eef6:	b2ab      	uxth	r3, r5
    eef8:	9304      	str	r3, [sp, #16]
    eefa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eefc:	9501      	str	r5, [sp, #4]
    eefe:	9303      	str	r3, [sp, #12]
    ef00:	9302      	str	r3, [sp, #8]
    ef02:	9300      	str	r3, [sp, #0]
    ef04:	0003      	movs	r3, r0
    ef06:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ef08:	f7f9 ff9c 	bl	8e44 <ticker_start>
    ef0c:	4d3d      	ldr	r5, [pc, #244]	; (f004 <radio_adv_enable+0x334>)
				   (ticks_slot_offset +
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    ef0e:	2802      	cmp	r0, #2
    ef10:	d014      	beq.n	ef3c <radio_adv_enable+0x26c>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		if (ret_cb != TICKER_STATUS_SUCCESS) {
    ef12:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ef14:	2800      	cmp	r0, #0
    ef16:	d152      	bne.n	efbe <radio_adv_enable+0x2ee>
			goto failure_cleanup;
		}

		ret_cb = TICKER_STATUS_BUSY;
    ef18:	2302      	movs	r3, #2
		ret =
    ef1a:	2203      	movs	r2, #3

		if (ret_cb != TICKER_STATUS_SUCCESS) {
			goto failure_cleanup;
		}

		ret_cb = TICKER_STATUS_BUSY;
    ef1c:	9313      	str	r3, [sp, #76]	; 0x4c
		ret =
    ef1e:	ab13      	add	r3, sp, #76	; 0x4c
    ef20:	9308      	str	r3, [sp, #32]
    ef22:	4b3a      	ldr	r3, [pc, #232]	; (f00c <radio_adv_enable+0x33c>)
    ef24:	9507      	str	r5, [sp, #28]
    ef26:	9305      	str	r3, [sp, #20]
    ef28:	4b39      	ldr	r3, [pc, #228]	; (f010 <radio_adv_enable+0x340>)
    ef2a:	9006      	str	r0, [sp, #24]
    ef2c:	9300      	str	r3, [sp, #0]
    ef2e:	9004      	str	r0, [sp, #16]
    ef30:	9003      	str	r0, [sp, #12]
    ef32:	9002      	str	r0, [sp, #8]
    ef34:	9001      	str	r0, [sp, #4]
    ef36:	003b      	movs	r3, r7
    ef38:	0011      	movs	r1, r2
    ef3a:	e026      	b.n	ef8a <radio_adv_enable+0x2ba>
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
    ef3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ef3e:	2b02      	cmp	r3, #2
    ef40:	d1e7      	bne.n	ef12 <radio_adv_enable+0x242>
				cpu_sleep();
    ef42:	f7fa f8df 	bl	9104 <cpu_sleep>
    ef46:	e7f9      	b.n	ef3c <radio_adv_enable+0x26c>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
    ef48:	2700      	movs	r7, #0
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef4a:	f7fa f8af 	bl	90ac <ticker_ticks_now_get>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
    ef4e:	ab13      	add	r3, sp, #76	; 0x4c
    ef50:	9308      	str	r3, [sp, #32]
    ef52:	4b2c      	ldr	r3, [pc, #176]	; (f004 <radio_adv_enable+0x334>)
    ef54:	9706      	str	r7, [sp, #24]
    ef56:	9307      	str	r3, [sp, #28]
    ef58:	4b2b      	ldr	r3, [pc, #172]	; (f008 <radio_adv_enable+0x338>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef5a:	900c      	str	r0, [sp, #48]	; 0x30
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
    ef5c:	9305      	str	r3, [sp, #20]
    ef5e:	6a23      	ldr	r3, [r4, #32]
    ef60:	4a2c      	ldr	r2, [pc, #176]	; (f014 <radio_adv_enable+0x344>)
    ef62:	195d      	adds	r5, r3, r5
    ef64:	b2ad      	uxth	r5, r5
    ef66:	2391      	movs	r3, #145	; 0x91
    ef68:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ef6a:	0039      	movs	r1, r7
    ef6c:	9504      	str	r5, [sp, #16]
    ef6e:	9703      	str	r7, [sp, #12]
    ef70:	9702      	str	r7, [sp, #8]
    ef72:	f7f1 fab5 	bl	4e0 <__aeabi_lmul>
    ef76:	4a22      	ldr	r2, [pc, #136]	; (f000 <radio_adv_enable+0x330>)
    ef78:	2307      	movs	r3, #7
    ef7a:	f7f1 fa91 	bl	4a0 <__aeabi_uldivmod>
    ef7e:	2205      	movs	r2, #5
    ef80:	9001      	str	r0, [sp, #4]
    ef82:	2103      	movs	r1, #3
    ef84:	0038      	movs	r0, r7
    ef86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef88:	9700      	str	r7, [sp, #0]
    ef8a:	f7f9 ff5b 	bl	8e44 <ticker_start>
				      _radio.advertiser.hdr.ticks_slot),
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
    ef8e:	2802      	cmp	r0, #2
    ef90:	d003      	beq.n	ef9a <radio_adv_enable+0x2ca>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
    ef92:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    ef94:	2f00      	cmp	r7, #0
    ef96:	d006      	beq.n	efa6 <radio_adv_enable+0x2d6>
    ef98:	e011      	b.n	efbe <radio_adv_enable+0x2ee>
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
		while (ret_cb == TICKER_STATUS_BUSY) {
    ef9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ef9c:	2b02      	cmp	r3, #2
    ef9e:	d1f8      	bne.n	ef92 <radio_adv_enable+0x2c2>
			cpu_sleep();
    efa0:	f7fa f8b0 	bl	9104 <cpu_sleep>
    efa4:	e7f9      	b.n	ef9a <radio_adv_enable+0x2ca>
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
		_radio.advertiser.is_enabled = 1;
    efa6:	2001      	movs	r0, #1
    efa8:	1d62      	adds	r2, r4, #5
    efaa:	7fd3      	ldrb	r3, [r2, #31]

		if (!_radio.scanner.is_enabled) {
    efac:	34dc      	adds	r4, #220	; 0xdc
			cpu_sleep();
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
		_radio.advertiser.is_enabled = 1;
    efae:	4303      	orrs	r3, r0
    efb0:	77d3      	strb	r3, [r2, #31]

		if (!_radio.scanner.is_enabled) {
    efb2:	7823      	ldrb	r3, [r4, #0]
    efb4:	4203      	tst	r3, r0
    efb6:	d113      	bne.n	efe0 <radio_adv_enable+0x310>
			ll_adv_scan_state_cb(BIT(0));
    efb8:	f7ff fe6e 	bl	ec98 <ll_adv_scan_state_cb>
    efbc:	e010      	b.n	efe0 <radio_adv_enable+0x310>
		return 0;
	}

failure_cleanup:

	if (conn) {
    efbe:	2e00      	cmp	r6, #0
    efc0:	d00d      	beq.n	efde <radio_adv_enable+0x30e>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    efc2:	0021      	movs	r1, r4
    efc4:	0033      	movs	r3, r6
    efc6:	3145      	adds	r1, #69	; 0x45
    efc8:	33a8      	adds	r3, #168	; 0xa8
    efca:	31ff      	adds	r1, #255	; 0xff
    efcc:	6818      	ldr	r0, [r3, #0]
    efce:	f7f8 fc66 	bl	789e <mem_release>
			    onion.link, &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
    efd2:	0021      	movs	r1, r4
    efd4:	3109      	adds	r1, #9
    efd6:	31ff      	adds	r1, #255	; 0xff
    efd8:	0030      	movs	r0, r6
    efda:	f7f8 fc60 	bl	789e <mem_release>
	}

	return BT_HCI_ERR_CMD_DISALLOWED;
    efde:	270c      	movs	r7, #12
}
    efe0:	0038      	movs	r0, r7
    efe2:	b015      	add	sp, #84	; 0x54
    efe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efe6:	46c0      	nop			; (mov r8, r8)
    efe8:	20000f68 	.word	0x20000f68
    efec:	20001030 	.word	0x20001030
    eff0:	200010ac 	.word	0x200010ac
    eff4:	0000407f 	.word	0x0000407f
    eff8:	000005fc 	.word	0x000005fc
    effc:	3b9aca00 	.word	0x3b9aca00
    f000:	1afd498d 	.word	0x1afd498d
    f004:	0000910d 	.word	0x0000910d
    f008:	0000acc1 	.word	0x0000acc1
    f00c:	00009c15 	.word	0x00009c15
    f010:	0000a3fe 	.word	0x0000a3fe
    f014:	84e72a00 	.word	0x84e72a00

0000f018 <radio_adv_disable>:

u32_t radio_adv_disable(void)
{
    f018:	b570      	push	{r4, r5, r6, lr}
	u32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
    f01a:	2103      	movs	r1, #3
    f01c:	2005      	movs	r0, #5
    f01e:	f7fa fa07 	bl	9430 <role_disable>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}
	}

	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    f022:	230c      	movs	r3, #12
{
	u32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
			      RADIO_TICKER_ID_ADV_STOP);
	if (!status) {
    f024:	2800      	cmp	r0, #0
    f026:	d122      	bne.n	f06e <radio_adv_disable+0x56>
		struct connection *conn;

		_radio.advertiser.is_enabled = 0;
    f028:	4c12      	ldr	r4, [pc, #72]	; (f074 <radio_adv_disable+0x5c>)
    f02a:	3b0b      	subs	r3, #11
    f02c:	1d61      	adds	r1, r4, #5
    f02e:	7fca      	ldrb	r2, [r1, #31]
    f030:	439a      	bics	r2, r3
    f032:	77ca      	strb	r2, [r1, #31]

		if (!_radio.scanner.is_enabled) {
    f034:	0022      	movs	r2, r4
    f036:	32dc      	adds	r2, #220	; 0xdc
    f038:	7810      	ldrb	r0, [r2, #0]
    f03a:	4018      	ands	r0, r3
    f03c:	d101      	bne.n	f042 <radio_adv_disable+0x2a>
			ll_adv_scan_state_cb(0);
    f03e:	f7ff fe2b 	bl	ec98 <ll_adv_scan_state_cb>
		}

		conn = _radio.advertiser.conn;
    f042:	0023      	movs	r3, r4
    f044:	33c8      	adds	r3, #200	; 0xc8
    f046:	681d      	ldr	r5, [r3, #0]
		if (conn) {
    f048:	2d00      	cmp	r5, #0
    f04a:	d00f      	beq.n	f06c <radio_adv_disable+0x54>
			_radio.advertiser.conn = NULL;
    f04c:	2200      	movs	r2, #0

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    f04e:	0021      	movs	r1, r4
			ll_adv_scan_state_cb(0);
		}

		conn = _radio.advertiser.conn;
		if (conn) {
			_radio.advertiser.conn = NULL;
    f050:	601a      	str	r2, [r3, #0]

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    f052:	002b      	movs	r3, r5
    f054:	3145      	adds	r1, #69	; 0x45
    f056:	33a8      	adds	r3, #168	; 0xa8
    f058:	31ff      	adds	r1, #255	; 0xff
    f05a:	6818      	ldr	r0, [r3, #0]
    f05c:	f7f8 fc1f 	bl	789e <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
    f060:	0021      	movs	r1, r4
    f062:	3109      	adds	r1, #9
    f064:	31ff      	adds	r1, #255	; 0xff
    f066:	0028      	movs	r0, r5
    f068:	f7f8 fc19 	bl	789e <mem_release>
		}
	}

	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    f06c:	2300      	movs	r3, #0
}
    f06e:	0018      	movs	r0, r3
    f070:	bd70      	pop	{r4, r5, r6, pc}
    f072:	46c0      	nop			; (mov r8, r8)
    f074:	20000f68 	.word	0x20000f68

0000f078 <radio_rx_dequeue>:
	return cmplt;
}

void radio_rx_dequeue(void)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
    f078:	2300      	movs	r3, #0

	return cmplt;
}

void radio_rx_dequeue(void)
{
    f07a:	b530      	push	{r4, r5, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    f07c:	4d50      	ldr	r5, [pc, #320]	; (f1c0 <radio_rx_dequeue+0x148>)

	return cmplt;
}

void radio_rx_dequeue(void)
{
    f07e:	b085      	sub	sp, #20
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
    f080:	9303      	str	r3, [sp, #12]
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    f082:	0029      	movs	r1, r5
    f084:	002b      	movs	r3, r5
    f086:	3149      	adds	r1, #73	; 0x49
    f088:	33fc      	adds	r3, #252	; 0xfc
    f08a:	6d18      	ldr	r0, [r3, #80]	; 0x50
    f08c:	31ff      	adds	r1, #255	; 0xff
    f08e:	aa03      	add	r2, sp, #12
    f090:	f7f8 fc5f 	bl	7952 <memq_dequeue>
    f094:	002c      	movs	r4, r5
			    (void **)&radio_pdu_node_rx);
	LL_ASSERT(link);
    f096:	2800      	cmp	r0, #0
    f098:	d108      	bne.n	f0ac <radio_rx_dequeue+0x34>
    f09a:	4b4a      	ldr	r3, [pc, #296]	; (f1c4 <radio_rx_dequeue+0x14c>)
    f09c:	4a4a      	ldr	r2, [pc, #296]	; (f1c8 <radio_rx_dequeue+0x150>)
    f09e:	9301      	str	r3, [sp, #4]
    f0a0:	4b4a      	ldr	r3, [pc, #296]	; (f1cc <radio_rx_dequeue+0x154>)
    f0a2:	494b      	ldr	r1, [pc, #300]	; (f1d0 <radio_rx_dequeue+0x158>)
    f0a4:	9300      	str	r3, [sp, #0]
    f0a6:	484b      	ldr	r0, [pc, #300]	; (f1d4 <radio_rx_dequeue+0x15c>)
    f0a8:	4b4b      	ldr	r3, [pc, #300]	; (f1d8 <radio_rx_dequeue+0x160>)
    f0aa:	e021      	b.n	f0f0 <radio_rx_dequeue+0x78>

	mem_release(link, &_radio.link_rx_free);
    f0ac:	0029      	movs	r1, r5
    f0ae:	3145      	adds	r1, #69	; 0x45
    f0b0:	31ff      	adds	r1, #255	; 0xff
    f0b2:	f7f8 fbf4 	bl	789e <mem_release>

	switch (radio_pdu_node_rx->hdr.type) {
    f0b6:	9b03      	ldr	r3, [sp, #12]
    f0b8:	7919      	ldrb	r1, [r3, #4]
    f0ba:	290c      	cmp	r1, #12
    f0bc:	d820      	bhi.n	f100 <radio_rx_dequeue+0x88>
    f0be:	2201      	movs	r2, #1
    f0c0:	408a      	lsls	r2, r1
    f0c2:	4946      	ldr	r1, [pc, #280]	; (f1dc <radio_rx_dequeue+0x164>)
    f0c4:	420a      	tst	r2, r1
    f0c6:	d102      	bne.n	f0ce <radio_rx_dequeue+0x56>
    f0c8:	0612      	lsls	r2, r2, #24
    f0ca:	d422      	bmi.n	f112 <radio_rx_dequeue+0x9a>
    f0cc:	e018      	b.n	f100 <radio_rx_dequeue+0x88>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
	case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

		/* release data link credit quota */
		LL_ASSERT(_radio.link_rx_data_quota <
    f0ce:	219e      	movs	r1, #158	; 0x9e
    f0d0:	20a8      	movs	r0, #168	; 0xa8
    f0d2:	0049      	lsls	r1, r1, #1
    f0d4:	0040      	lsls	r0, r0, #1
    f0d6:	5c69      	ldrb	r1, [r5, r1]
    f0d8:	5c2a      	ldrb	r2, [r5, r0]
    f0da:	3901      	subs	r1, #1
    f0dc:	428a      	cmp	r2, r1
    f0de:	db0c      	blt.n	f0fa <radio_rx_dequeue+0x82>
    f0e0:	4b38      	ldr	r3, [pc, #224]	; (f1c4 <radio_rx_dequeue+0x14c>)
    f0e2:	4a39      	ldr	r2, [pc, #228]	; (f1c8 <radio_rx_dequeue+0x150>)
    f0e4:	9301      	str	r3, [sp, #4]
    f0e6:	4b39      	ldr	r3, [pc, #228]	; (f1cc <radio_rx_dequeue+0x154>)
    f0e8:	4939      	ldr	r1, [pc, #228]	; (f1d0 <radio_rx_dequeue+0x158>)
    f0ea:	9300      	str	r3, [sp, #0]
    f0ec:	483c      	ldr	r0, [pc, #240]	; (f1e0 <radio_rx_dequeue+0x168>)
    f0ee:	4b3a      	ldr	r3, [pc, #232]	; (f1d8 <radio_rx_dequeue+0x160>)
    f0f0:	f7f2 fbd0 	bl	1894 <printk>
    f0f4:	b662      	cpsie	i
    f0f6:	2004      	movs	r0, #4
    f0f8:	df02      	svc	2
			  (_radio.packet_rx_count - 1));

		_radio.link_rx_data_quota++;
    f0fa:	3201      	adds	r2, #1
    f0fc:	542a      	strb	r2, [r5, r0]
		break;
    f0fe:	e008      	b.n	f112 <radio_rx_dequeue+0x9a>
	case NODE_RX_TYPE_TERMINATE:
		/* did not use data link quota */
		break;

	default:
		LL_ASSERT(0);
    f100:	4b30      	ldr	r3, [pc, #192]	; (f1c4 <radio_rx_dequeue+0x14c>)
    f102:	4a31      	ldr	r2, [pc, #196]	; (f1c8 <radio_rx_dequeue+0x150>)
    f104:	9301      	str	r3, [sp, #4]
    f106:	4b31      	ldr	r3, [pc, #196]	; (f1cc <radio_rx_dequeue+0x154>)
    f108:	4931      	ldr	r1, [pc, #196]	; (f1d0 <radio_rx_dequeue+0x158>)
    f10a:	9300      	str	r3, [sp, #0]
    f10c:	4835      	ldr	r0, [pc, #212]	; (f1e4 <radio_rx_dequeue+0x16c>)
    f10e:	4b32      	ldr	r3, [pc, #200]	; (f1d8 <radio_rx_dequeue+0x160>)
    f110:	e7ee      	b.n	f0f0 <radio_rx_dequeue+0x78>
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    f112:	791a      	ldrb	r2, [r3, #4]
    f114:	2a06      	cmp	r2, #6
    f116:	d151      	bne.n	f1bc <radio_rx_dequeue+0x144>
		struct pdu_data *pdu_data_rx;
		u8_t bm;

		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    f118:	001a      	movs	r2, r3
    f11a:	7adb      	ldrb	r3, [r3, #11]
    f11c:	320b      	adds	r2, #11
    f11e:	2b3c      	cmp	r3, #60	; 0x3c
    f120:	d004      	beq.n	f12c <radio_rx_dequeue+0xb4>
    f122:	7853      	ldrb	r3, [r2, #1]
    f124:	2b00      	cmp	r3, #0
    f126:	d027      	beq.n	f178 <radio_rx_dequeue+0x100>
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
		struct radio_le_conn_cmplt *radio_le_conn_cmplt;
		struct connection *conn = NULL;
    f128:	2500      	movs	r5, #0
    f12a:	e004      	b.n	f136 <radio_rx_dequeue+0xbe>
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
    f12c:	0023      	movs	r3, r4
				_radio.advertiser.conn = NULL;
    f12e:	2200      	movs	r2, #0
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
    f130:	33c8      	adds	r3, #200	; 0xc8
    f132:	681d      	ldr	r5, [r3, #0]
				_radio.advertiser.conn = NULL;
    f134:	601a      	str	r2, [r3, #0]
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
    f136:	2101      	movs	r1, #1
    f138:	1d62      	adds	r2, r4, #5
    f13a:	7fd3      	ldrb	r3, [r2, #31]
    f13c:	420b      	tst	r3, r1
    f13e:	d108      	bne.n	f152 <radio_rx_dequeue+0xda>
    f140:	4b20      	ldr	r3, [pc, #128]	; (f1c4 <radio_rx_dequeue+0x14c>)
    f142:	4a21      	ldr	r2, [pc, #132]	; (f1c8 <radio_rx_dequeue+0x150>)
    f144:	9301      	str	r3, [sp, #4]
    f146:	4b21      	ldr	r3, [pc, #132]	; (f1cc <radio_rx_dequeue+0x154>)
    f148:	4921      	ldr	r1, [pc, #132]	; (f1d0 <radio_rx_dequeue+0x158>)
    f14a:	9300      	str	r3, [sp, #0]
    f14c:	4826      	ldr	r0, [pc, #152]	; (f1e8 <radio_rx_dequeue+0x170>)
    f14e:	4b22      	ldr	r3, [pc, #136]	; (f1d8 <radio_rx_dequeue+0x160>)
    f150:	e7ce      	b.n	f0f0 <radio_rx_dequeue+0x78>
			_radio.advertiser.is_enabled = 0;
    f152:	438b      	bics	r3, r1
    f154:	77d3      	strb	r3, [r2, #31]
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
			_radio.scanner.is_enabled = 0;
		}

		if (conn) {
    f156:	2d00      	cmp	r5, #0
    f158:	d01f      	beq.n	f19a <radio_rx_dequeue+0x122>
			struct radio_pdu_node_rx *node_rx = (void *)
				&conn->llcp_terminate.radio_pdu_node_rx;

			mem_release(node_rx->hdr.onion.link,
    f15a:	0021      	movs	r1, r4
    f15c:	002b      	movs	r3, r5
    f15e:	3145      	adds	r1, #69	; 0x45
    f160:	33a8      	adds	r3, #168	; 0xa8
    f162:	6818      	ldr	r0, [r3, #0]
    f164:	31ff      	adds	r1, #255	; 0xff
    f166:	f7f8 fb9a 	bl	789e <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
    f16a:	0021      	movs	r1, r4
    f16c:	3109      	adds	r1, #9
    f16e:	31ff      	adds	r1, #255	; 0xff
    f170:	0028      	movs	r0, r5
    f172:	f7f8 fb94 	bl	789e <mem_release>
    f176:	e010      	b.n	f19a <radio_rx_dequeue+0x122>
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
			_radio.advertiser.is_enabled = 0;
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
    f178:	0022      	movs	r2, r4
    f17a:	2101      	movs	r1, #1
    f17c:	32dc      	adds	r2, #220	; 0xdc
    f17e:	7813      	ldrb	r3, [r2, #0]
    f180:	420b      	tst	r3, r1
    f182:	d108      	bne.n	f196 <radio_rx_dequeue+0x11e>
    f184:	4b0f      	ldr	r3, [pc, #60]	; (f1c4 <radio_rx_dequeue+0x14c>)
    f186:	4a10      	ldr	r2, [pc, #64]	; (f1c8 <radio_rx_dequeue+0x150>)
    f188:	9301      	str	r3, [sp, #4]
    f18a:	4b10      	ldr	r3, [pc, #64]	; (f1cc <radio_rx_dequeue+0x154>)
    f18c:	4910      	ldr	r1, [pc, #64]	; (f1d0 <radio_rx_dequeue+0x158>)
    f18e:	9300      	str	r3, [sp, #0]
    f190:	4816      	ldr	r0, [pc, #88]	; (f1ec <radio_rx_dequeue+0x174>)
    f192:	4b11      	ldr	r3, [pc, #68]	; (f1d8 <radio_rx_dequeue+0x160>)
    f194:	e7ac      	b.n	f0f0 <radio_rx_dequeue+0x78>
			_radio.scanner.is_enabled = 0;
    f196:	438b      	bics	r3, r1
    f198:	7013      	strb	r3, [r2, #0]
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    f19a:	0023      	movs	r3, r4
    f19c:	33dc      	adds	r3, #220	; 0xdc
    f19e:	7818      	ldrb	r0, [r3, #0]
		     _radio.advertiser.is_enabled;
    f1a0:	3405      	adds	r4, #5
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    f1a2:	07c0      	lsls	r0, r0, #31
    f1a4:	0fc0      	lsrs	r0, r0, #31
		     _radio.advertiser.is_enabled;

		if (!bm) {
    f1a6:	b2c0      	uxtb	r0, r0
    f1a8:	0043      	lsls	r3, r0, #1
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
		     _radio.advertiser.is_enabled;
    f1aa:	7fe0      	ldrb	r0, [r4, #31]
    f1ac:	07c0      	lsls	r0, r0, #31
    f1ae:	0fc0      	lsrs	r0, r0, #31

		if (!bm) {
    f1b0:	4318      	orrs	r0, r3
    f1b2:	b240      	sxtb	r0, r0
    f1b4:	2800      	cmp	r0, #0
    f1b6:	d101      	bne.n	f1bc <radio_rx_dequeue+0x144>
			ll_adv_scan_state_cb(0);
    f1b8:	f7ff fd6e 	bl	ec98 <ll_adv_scan_state_cb>
		}
	}
}
    f1bc:	b005      	add	sp, #20
    f1be:	bd30      	pop	{r4, r5, pc}
    f1c0:	20000f68 	.word	0x20000f68
    f1c4:	0001241d 	.word	0x0001241d
    f1c8:	0001246d 	.word	0x0001246d
    f1cc:	000124a8 	.word	0x000124a8
    f1d0:	000123e3 	.word	0x000123e3
    f1d4:	0001353f 	.word	0x0001353f
    f1d8:	000149fc 	.word	0x000149fc
    f1dc:	00001f7e 	.word	0x00001f7e
    f1e0:	00013bf5 	.word	0x00013bf5
    f1e4:	000129d4 	.word	0x000129d4
    f1e8:	000140d4 	.word	0x000140d4
    f1ec:	00014112 	.word	0x00014112

0000f1f0 <rtc0_nrf5_isr>:
static void rtc0_nrf5_isr(void *arg)
{
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    f1f0:	4b0a      	ldr	r3, [pc, #40]	; (f21c <rtc0_nrf5_isr+0x2c>)
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    f1f2:	b570      	push	{r4, r5, r6, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    f1f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    f1f6:	001c      	movs	r4, r3
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    f1f8:	6c9d      	ldr	r5, [r3, #72]	; 0x48

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    f1fa:	2a00      	cmp	r2, #0
    f1fc:	d003      	beq.n	f206 <rtc0_nrf5_isr+0x16>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    f1fe:	2000      	movs	r0, #0
    f200:	6458      	str	r0, [r3, #68]	; 0x44

		ticker_trigger(0);
    f202:	f7f9 fe0f 	bl	8e24 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    f206:	2d00      	cmp	r5, #0
    f208:	d004      	beq.n	f214 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    f20a:	2300      	movs	r3, #0

		ticker_trigger(1);
    f20c:	2001      	movs	r0, #1
		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    f20e:	64a3      	str	r3, [r4, #72]	; 0x48

		ticker_trigger(1);
    f210:	f7f9 fe08 	bl	8e24 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    f214:	2000      	movs	r0, #0
    f216:	f7f8 fa77 	bl	7708 <mayfly_run>
}
    f21a:	bd70      	pop	{r4, r5, r6, pc}
    f21c:	4000b0fc 	.word	0x4000b0fc

0000f220 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
    f220:	b510      	push	{r4, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
    f222:	2001      	movs	r0, #1
    f224:	f7f8 fa70 	bl	7708 <mayfly_run>
}
    f228:	bd10      	pop	{r4, pc}

0000f22a <rng_nrf5_isr>:

	mayfly_run(MAYFLY_CALL_ID_0);
}

static void rng_nrf5_isr(void *arg)
{
    f22a:	b510      	push	{r4, lr}
	isr_rand(arg);
    f22c:	f7f9 f842 	bl	82b4 <isr_rand>
}
    f230:	bd10      	pop	{r4, pc}

0000f232 <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
    f232:	b510      	push	{r4, lr}
{
	isr_radio();
    f234:	f7f8 fc54 	bl	7ae0 <isr_radio>

	ISR_DIRECT_PM();
    f238:	f001 fb66 	bl	10908 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    f23c:	f001 fa5c 	bl	106f8 <_IntExit>
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
    f240:	bd10      	pop	{r4, pc}
	...

0000f244 <mayfly_enable_cb>:
	u8_t pub_addr[BDADDR_SIZE];
	u8_t rnd_addr[BDADDR_SIZE];
} _ll_context;

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    f244:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
    f246:	2901      	cmp	r1, #1
    f248:	d00c      	beq.n	f264 <mayfly_enable_cb+0x20>
    f24a:	4b0b      	ldr	r3, [pc, #44]	; (f278 <mayfly_enable_cb+0x34>)
    f24c:	4a0b      	ldr	r2, [pc, #44]	; (f27c <mayfly_enable_cb+0x38>)
    f24e:	9301      	str	r3, [sp, #4]
    f250:	4b0b      	ldr	r3, [pc, #44]	; (f280 <mayfly_enable_cb+0x3c>)
    f252:	490c      	ldr	r1, [pc, #48]	; (f284 <mayfly_enable_cb+0x40>)
    f254:	9300      	str	r3, [sp, #0]
    f256:	480c      	ldr	r0, [pc, #48]	; (f288 <mayfly_enable_cb+0x44>)
    f258:	4b0c      	ldr	r3, [pc, #48]	; (f28c <mayfly_enable_cb+0x48>)
    f25a:	f7f2 fb1b 	bl	1894 <printk>
    f25e:	b662      	cpsie	i
    f260:	2004      	movs	r0, #4
    f262:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    f264:	2018      	movs	r0, #24
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
    f266:	2a00      	cmp	r2, #0
    f268:	d002      	beq.n	f270 <mayfly_enable_cb+0x2c>
		irq_enable(SWI4_IRQn);
    f26a:	f001 faf7 	bl	1085c <_arch_irq_enable>
    f26e:	e001      	b.n	f274 <mayfly_enable_cb+0x30>
	} else {
		irq_disable(SWI4_IRQn);
    f270:	f001 fafe 	bl	10870 <_arch_irq_disable>
	}
}
    f274:	bd07      	pop	{r0, r1, r2, pc}
    f276:	46c0      	nop			; (mov r8, r8)
    f278:	0001241d 	.word	0x0001241d
    f27c:	0001246d 	.word	0x0001246d
    f280:	000124a8 	.word	0x000124a8
    f284:	000123e3 	.word	0x000123e3
    f288:	0001414d 	.word	0x0001414d
    f28c:	00014d3b 	.word	0x00014d3b

0000f290 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    f290:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
		return irq_is_enabled(RTC0_IRQn);
    f292:	200b      	movs	r0, #11

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
    f294:	2900      	cmp	r1, #0
    f296:	d002      	beq.n	f29e <mayfly_is_enabled+0xe>
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
    f298:	2901      	cmp	r1, #1
    f29a:	d103      	bne.n	f2a4 <mayfly_is_enabled+0x14>
		return irq_is_enabled(SWI4_IRQn);
    f29c:	2018      	movs	r0, #24
    f29e:	f001 faf1 	bl	10884 <_arch_irq_is_enabled>
	}

	LL_ASSERT(0);

	return 0;
}
    f2a2:	bd0e      	pop	{r1, r2, r3, pc}
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
		return irq_is_enabled(SWI4_IRQn);
	}

	LL_ASSERT(0);
    f2a4:	4b06      	ldr	r3, [pc, #24]	; (f2c0 <mayfly_is_enabled+0x30>)
    f2a6:	4a07      	ldr	r2, [pc, #28]	; (f2c4 <mayfly_is_enabled+0x34>)
    f2a8:	9301      	str	r3, [sp, #4]
    f2aa:	4b07      	ldr	r3, [pc, #28]	; (f2c8 <mayfly_is_enabled+0x38>)
    f2ac:	4907      	ldr	r1, [pc, #28]	; (f2cc <mayfly_is_enabled+0x3c>)
    f2ae:	9300      	str	r3, [sp, #0]
    f2b0:	4807      	ldr	r0, [pc, #28]	; (f2d0 <mayfly_is_enabled+0x40>)
    f2b2:	4b08      	ldr	r3, [pc, #32]	; (f2d4 <mayfly_is_enabled+0x44>)
    f2b4:	f7f2 faee 	bl	1894 <printk>
    f2b8:	b662      	cpsie	i
    f2ba:	2004      	movs	r0, #4
    f2bc:	df02      	svc	2
    f2be:	46c0      	nop			; (mov r8, r8)
    f2c0:	0001241d 	.word	0x0001241d
    f2c4:	0001246d 	.word	0x0001246d
    f2c8:	000124a8 	.word	0x000124a8
    f2cc:	000123e3 	.word	0x000123e3
    f2d0:	000129d4 	.word	0x000129d4
    f2d4:	00014d29 	.word	0x00014d29

0000f2d8 <mayfly_prio_is_equal>:

	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
    f2d8:	0003      	movs	r3, r0
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
    f2da:	2001      	movs	r0, #1
    f2dc:	428b      	cmp	r3, r1
    f2de:	d008      	beq.n	f2f2 <mayfly_prio_is_equal+0x1a>
	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
	return (caller_id == callee_id) ||
    f2e0:	2b00      	cmp	r3, #0
    f2e2:	d101      	bne.n	f2e8 <mayfly_prio_is_equal+0x10>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
    f2e4:	3901      	subs	r1, #1
    f2e6:	e002      	b.n	f2ee <mayfly_prio_is_equal+0x16>
    f2e8:	2000      	movs	r0, #0
    f2ea:	2b01      	cmp	r3, #1
    f2ec:	d101      	bne.n	f2f2 <mayfly_prio_is_equal+0x1a>
    f2ee:	4248      	negs	r0, r1
    f2f0:	4148      	adcs	r0, r1
	       ((caller_id == MAYFLY_CALL_ID_1) &&
		(callee_id == MAYFLY_CALL_ID_0));
}
    f2f2:	4770      	bx	lr

0000f2f4 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    f2f4:	b507      	push	{r0, r1, r2, lr}
    f2f6:	4b0c      	ldr	r3, [pc, #48]	; (f328 <mayfly_pend+0x34>)
	(void)caller_id;

	switch (callee_id) {
    f2f8:	2900      	cmp	r1, #0
    f2fa:	d004      	beq.n	f306 <mayfly_pend+0x12>
    f2fc:	2901      	cmp	r1, #1
    f2fe:	d106      	bne.n	f30e <mayfly_pend+0x1a>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f300:	2280      	movs	r2, #128	; 0x80
    f302:	0452      	lsls	r2, r2, #17
    f304:	e001      	b.n	f30a <mayfly_pend+0x16>
    f306:	2280      	movs	r2, #128	; 0x80
    f308:	0112      	lsls	r2, r2, #4
    f30a:	605a      	str	r2, [r3, #4]
	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
		break;
	}
}
    f30c:	bd07      	pop	{r0, r1, r2, pc}
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
    f30e:	4b07      	ldr	r3, [pc, #28]	; (f32c <mayfly_pend+0x38>)
    f310:	4a07      	ldr	r2, [pc, #28]	; (f330 <mayfly_pend+0x3c>)
    f312:	9301      	str	r3, [sp, #4]
    f314:	4b07      	ldr	r3, [pc, #28]	; (f334 <mayfly_pend+0x40>)
    f316:	4908      	ldr	r1, [pc, #32]	; (f338 <mayfly_pend+0x44>)
    f318:	9300      	str	r3, [sp, #0]
    f31a:	4808      	ldr	r0, [pc, #32]	; (f33c <mayfly_pend+0x48>)
    f31c:	4b08      	ldr	r3, [pc, #32]	; (f340 <mayfly_pend+0x4c>)
    f31e:	f7f2 fab9 	bl	1894 <printk>
    f322:	b662      	cpsie	i
    f324:	2004      	movs	r0, #4
    f326:	df02      	svc	2
    f328:	e000e1fc 	.word	0xe000e1fc
    f32c:	0001241d 	.word	0x0001241d
    f330:	0001246d 	.word	0x0001246d
    f334:	000124a8 	.word	0x000124a8
    f338:	000123e3 	.word	0x000123e3
    f33c:	000129d4 	.word	0x000129d4
    f340:	00014d1d 	.word	0x00014d1d

0000f344 <radio_active_callback>:
	}
}

void radio_active_callback(u8_t active)
{
}
    f344:	4770      	bx	lr
	...

0000f348 <radio_event_callback>:

void radio_event_callback(void)
{
    f348:	b510      	push	{r4, lr}
	k_sem_give(sem_recv);
    f34a:	4b02      	ldr	r3, [pc, #8]	; (f354 <radio_event_callback+0xc>)
    f34c:	6818      	ldr	r0, [r3, #0]
    f34e:	f002 fac5 	bl	118dc <k_sem_give>
}
    f352:	bd10      	pop	{r4, pc}
    f354:	20001430 	.word	0x20001430

0000f358 <ll_init>:
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
    f358:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
    f35a:	4b39      	ldr	r3, [pc, #228]	; (f440 <ll_init+0xe8>)
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
    f35c:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
    f35e:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(_rand_context, sizeof(_rand_context));
    f360:	2108      	movs	r1, #8
    f362:	4838      	ldr	r0, [pc, #224]	; (f444 <ll_init+0xec>)
    f364:	f7f8 ff42 	bl	81ec <rand_init>

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    f368:	4837      	ldr	r0, [pc, #220]	; (f448 <ll_init+0xf0>)
    f36a:	f001 fc25 	bl	10bb8 <device_get_binding>
	if (!clk_k32) {
    f36e:	2800      	cmp	r0, #0
    f370:	d101      	bne.n	f376 <ll_init+0x1e>
		return -ENODEV;
    f372:	2013      	movs	r0, #19
    f374:	e03b      	b.n	f3ee <ll_init+0x96>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    f376:	6843      	ldr	r3, [r0, #4]
    f378:	2101      	movs	r1, #1
    f37a:	681b      	ldr	r3, [r3, #0]
    f37c:	4798      	blx	r3
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
    f37e:	f7f8 fb09 	bl	7994 <cntr_init>

	mayfly_init();
    f382:	f7f8 f929 	bl	75d8 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    f386:	2203      	movs	r2, #3
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    f388:	2108      	movs	r1, #8
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    f38a:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    f38c:	2402      	movs	r4, #2

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
    f38e:	250d      	movs	r5, #13
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    f390:	4b2e      	ldr	r3, [pc, #184]	; (f44c <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    f392:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
    f394:	4a2e      	ldr	r2, [pc, #184]	; (f450 <ll_init+0xf8>)
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    f396:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    f398:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    f39a:	761c      	strb	r4, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
    f39c:	9202      	str	r2, [sp, #8]
    f39e:	9300      	str	r3, [sp, #0]
    f3a0:	9501      	str	r5, [sp, #4]
    f3a2:	2304      	movs	r3, #4
    f3a4:	4a2b      	ldr	r2, [pc, #172]	; (f454 <ll_init+0xfc>)
    f3a6:	f7f9 fce9 	bl	8d7c <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    f3aa:	482b      	ldr	r0, [pc, #172]	; (f458 <ll_init+0x100>)
    f3ac:	f001 fc04 	bl	10bb8 <device_get_binding>
	if (!clk_m16) {
    f3b0:	2800      	cmp	r0, #0
    f3b2:	d0de      	beq.n	f372 <ll_init+0x1a>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
    f3b4:	4b29      	ldr	r3, [pc, #164]	; (f45c <ll_init+0x104>)
    f3b6:	26c4      	movs	r6, #196	; 0xc4
    f3b8:	9303      	str	r3, [sp, #12]
    f3ba:	231b      	movs	r3, #27
    f3bc:	00b6      	lsls	r6, r6, #2
    f3be:	9302      	str	r3, [sp, #8]
    f3c0:	9301      	str	r3, [sp, #4]
    f3c2:	3b1a      	subs	r3, #26
    f3c4:	9400      	str	r4, [sp, #0]
    f3c6:	9604      	str	r6, [sp, #16]
    f3c8:	001a      	movs	r2, r3
    f3ca:	2107      	movs	r1, #7
    f3cc:	f7ff f884 	bl	e4d8 <radio_init>
    f3d0:	1e04      	subs	r4, r0, #0
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
    f3d2:	d00e      	beq.n	f3f2 <ll_init+0x9a>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
    f3d4:	4b22      	ldr	r3, [pc, #136]	; (f460 <ll_init+0x108>)
    f3d6:	9001      	str	r0, [sp, #4]
    f3d8:	9303      	str	r3, [sp, #12]
    f3da:	4b22      	ldr	r3, [pc, #136]	; (f464 <ll_init+0x10c>)
    f3dc:	9602      	str	r6, [sp, #8]
    f3de:	9300      	str	r3, [sp, #0]
    f3e0:	4a21      	ldr	r2, [pc, #132]	; (f468 <ll_init+0x110>)
    f3e2:	4b22      	ldr	r3, [pc, #136]	; (f46c <ll_init+0x114>)
    f3e4:	4922      	ldr	r1, [pc, #136]	; (f470 <ll_init+0x118>)
    f3e6:	4823      	ldr	r0, [pc, #140]	; (f474 <ll_init+0x11c>)
    f3e8:	f7f2 fa54 	bl	1894 <printk>
		       sizeof(_radio));
		return -ENOMEM;
    f3ec:	200c      	movs	r0, #12
    f3ee:	4240      	negs	r0, r0
    f3f0:	e023      	b.n	f43a <ll_init+0xe2>
	}

	ll_filter_reset(true);
    f3f2:	2001      	movs	r0, #1
    f3f4:	f000 fde2 	bl	ffbc <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn,
    f3f8:	0022      	movs	r2, r4
    f3fa:	0021      	movs	r1, r4
    f3fc:	2001      	movs	r0, #1
    f3fe:	f001 fa4d 	bl	1089c <_irq_priority_set>
			   CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
    f402:	0022      	movs	r2, r4
    f404:	0021      	movs	r1, r4
    f406:	200b      	movs	r0, #11
    f408:	f001 fa48 	bl	1089c <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BLUETOOTH_CONTROLLER_JOB_PRIO,
    f40c:	0022      	movs	r2, r4
    f40e:	0021      	movs	r1, r4
    f410:	2018      	movs	r0, #24
    f412:	f001 fa43 	bl	1089c <_irq_priority_set>
		    swi4_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
    f416:	0022      	movs	r2, r4
    f418:	2101      	movs	r1, #1
    f41a:	0028      	movs	r0, r5
    f41c:	f001 fa3e 	bl	1089c <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
    f420:	2001      	movs	r0, #1
    f422:	f001 fa1b 	bl	1085c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    f426:	200b      	movs	r0, #11
    f428:	f001 fa18 	bl	1085c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    f42c:	2018      	movs	r0, #24
    f42e:	f001 fa15 	bl	1085c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
    f432:	0028      	movs	r0, r5
    f434:	f001 fa12 	bl	1085c <_arch_irq_enable>

	return 0;
    f438:	0020      	movs	r0, r4
}
    f43a:	b006      	add	sp, #24
    f43c:	bd70      	pop	{r4, r5, r6, pc}
    f43e:	46c0      	nop			; (mov r8, r8)
    f440:	20001430 	.word	0x20001430
    f444:	2000167c 	.word	0x2000167c
    f448:	00012299 	.word	0x00012299
    f44c:	20001410 	.word	0x20001410
    f450:	20001440 	.word	0x20001440
    f454:	20001684 	.word	0x20001684
    f458:	000122ae 	.word	0x000122ae
    f45c:	200010f0 	.word	0x200010f0
    f460:	0001241d 	.word	0x0001241d
    f464:	000124a8 	.word	0x000124a8
    f468:	0001246d 	.word	0x0001246d
    f46c:	00014d4c 	.word	0x00014d4c
    f470:	000123e3 	.word	0x000123e3
    f474:	0001417d 	.word	0x0001417d

0000f478 <ll_addr_get>:
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES); /* The last index in the total tickers */
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    f478:	0002      	movs	r2, r0
    f47a:	b510      	push	{r4, lr}
    f47c:	0008      	movs	r0, r1
	if (addr_type > 1) {
		return NULL;
    f47e:	2300      	movs	r3, #0
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
    f480:	2a01      	cmp	r2, #1
    f482:	d80f      	bhi.n	f4a4 <ll_addr_get+0x2c>
    f484:	4c08      	ldr	r4, [pc, #32]	; (f4a8 <ll_addr_get+0x30>)
		return NULL;
	}

	if (addr_type) {
    f486:	429a      	cmp	r2, r3
    f488:	d004      	beq.n	f494 <ll_addr_get+0x1c>
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
		}

		return _ll_context.rnd_addr;
    f48a:	1da3      	adds	r3, r4, #6
		return NULL;
	}

	if (addr_type) {
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
    f48c:	001c      	movs	r4, r3
	if (addr_type > 1) {
		return NULL;
	}

	if (addr_type) {
		if (bdaddr) {
    f48e:	2900      	cmp	r1, #0
    f490:	d103      	bne.n	f49a <ll_addr_get+0x22>
    f492:	e007      	b.n	f4a4 <ll_addr_get+0x2c>

	if (bdaddr) {
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
	}

	return _ll_context.pub_addr;
    f494:	0023      	movs	r3, r4
		}

		return _ll_context.rnd_addr;
	}

	if (bdaddr) {
    f496:	2900      	cmp	r1, #0
    f498:	d004      	beq.n	f4a4 <ll_addr_get+0x2c>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
    f49a:	2206      	movs	r2, #6
    f49c:	0021      	movs	r1, r4
    f49e:	f7f1 fbd6 	bl	c4e <memcpy>
	}

	return _ll_context.pub_addr;
    f4a2:	0023      	movs	r3, r4
}
    f4a4:	0018      	movs	r0, r3
    f4a6:	bd10      	pop	{r4, pc}
    f4a8:	20001434 	.word	0x20001434

0000f4ac <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    f4ac:	0003      	movs	r3, r0
    f4ae:	b510      	push	{r4, lr}
    f4b0:	4803      	ldr	r0, [pc, #12]	; (f4c0 <ll_addr_set+0x14>)
	if (addr_type) {
    f4b2:	2b00      	cmp	r3, #0
    f4b4:	d000      	beq.n	f4b8 <ll_addr_set+0xc>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
    f4b6:	3006      	adds	r0, #6
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
    f4b8:	2206      	movs	r2, #6
    f4ba:	f7f1 fbc8 	bl	c4e <memcpy>
	}
}
    f4be:	bd10      	pop	{r4, pc}
    f4c0:	20001434 	.word	0x20001434

0000f4c4 <wl_peers_find>:
		wl_peers[i].taken = 0;
	}
}

static int wl_peers_find(u8_t addr_type, u8_t *addr)
{
    f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4c6:	0006      	movs	r6, r0
    f4c8:	000d      	movs	r5, r1
	int i;

	for (i = 0; i < WL_SIZE; i++) {
    f4ca:	2400      	movs	r4, #0
		if (LIST_MATCH(wl_peers, i, addr_type, addr)) {
    f4cc:	2701      	movs	r7, #1
    f4ce:	2307      	movs	r3, #7
    f4d0:	4363      	muls	r3, r4
    f4d2:	480d      	ldr	r0, [pc, #52]	; (f508 <wl_peers_find+0x44>)
    f4d4:	5c1a      	ldrb	r2, [r3, r0]
    f4d6:	07d1      	lsls	r1, r2, #31
    f4d8:	d405      	bmi.n	f4e6 <wl_peers_find+0x22>

static int wl_peers_find(u8_t addr_type, u8_t *addr)
{
	int i;

	for (i = 0; i < WL_SIZE; i++) {
    f4da:	3401      	adds	r4, #1
    f4dc:	2c08      	cmp	r4, #8
    f4de:	d1f6      	bne.n	f4ce <wl_peers_find+0xa>
		if (LIST_MATCH(wl_peers, i, addr_type, addr)) {
			return i;
		}
	}

	return -1;
    f4e0:	2001      	movs	r0, #1
    f4e2:	4240      	negs	r0, r0
    f4e4:	e00e      	b.n	f504 <wl_peers_find+0x40>
static int wl_peers_find(u8_t addr_type, u8_t *addr)
{
	int i;

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl_peers, i, addr_type, addr)) {
    f4e6:	0031      	movs	r1, r6
    f4e8:	0692      	lsls	r2, r2, #26
    f4ea:	0fd2      	lsrs	r2, r2, #31
    f4ec:	4039      	ands	r1, r7
    f4ee:	428a      	cmp	r2, r1
    f4f0:	d1f3      	bne.n	f4da <wl_peers_find+0x16>
    f4f2:	3301      	adds	r3, #1
    f4f4:	18c0      	adds	r0, r0, r3
    f4f6:	2206      	movs	r2, #6
    f4f8:	0029      	movs	r1, r5
    f4fa:	f7f1 fb93 	bl	c24 <memcmp>
    f4fe:	2800      	cmp	r0, #0
    f500:	d1eb      	bne.n	f4da <wl_peers_find+0x16>
    f502:	0020      	movs	r0, r4
			return i;
		}
	}

	return -1;
}
    f504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f506:	46c0      	nop			; (mov r8, r8)
    f508:	20001891 	.word	0x20001891

0000f50c <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
    f50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
    f50e:	2400      	movs	r4, #0

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
    f510:	2624      	movs	r6, #36	; 0x24

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
    f512:	4d14      	ldr	r5, [pc, #80]	; (f564 <filter_rl_update+0x58>)
    f514:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
    f516:	706c      	strb	r4, [r5, #1]

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
    f518:	0033      	movs	r3, r6
    f51a:	4363      	muls	r3, r4
    f51c:	4812      	ldr	r0, [pc, #72]	; (f568 <filter_rl_update+0x5c>)
    f51e:	5c1b      	ldrb	r3, [r3, r0]
    f520:	075a      	lsls	r2, r3, #29
    f522:	d501      	bpl.n	f528 <filter_rl_update+0x1c>
    f524:	09db      	lsrs	r3, r3, #7
    f526:	d019      	beq.n	f55c <filter_rl_update+0x50>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    f528:	0032      	movs	r2, r6
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    f52a:	7829      	ldrb	r1, [r5, #0]
	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    f52c:	4362      	muls	r2, r4
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    f52e:	468c      	mov	ip, r1
    f530:	2101      	movs	r1, #1
	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    f532:	1883      	adds	r3, r0, r2
    f534:	785b      	ldrb	r3, [r3, #1]
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    f536:	40a1      	lsls	r1, r4
    f538:	4667      	mov	r7, ip
	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    f53a:	079b      	lsls	r3, r3, #30
    f53c:	0fdb      	lsrs	r3, r3, #31

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f53e:	40a3      	lsls	r3, r4
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    f540:	4339      	orrs	r1, r7
    f542:	7029      	strb	r1, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f544:	7869      	ldrb	r1, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f546:	3202      	adds	r2, #2

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f548:	430b      	orrs	r3, r1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f54a:	1881      	adds	r1, r0, r2
    f54c:	2206      	movs	r2, #6
    f54e:	0010      	movs	r0, r2
    f550:	4360      	muls	r0, r4
    f552:	3002      	adds	r0, #2
    f554:	1828      	adds	r0, r5, r0

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f556:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f558:	f7f1 fb79 	bl	c4e <memcpy>
	int i;

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    f55c:	3401      	adds	r4, #1
    f55e:	2c08      	cmp	r4, #8
    f560:	d1da      	bne.n	f518 <filter_rl_update+0xc>
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
				      rl[i].id_addr.val);
		}
	}
}
    f562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f564:	200017a4 	.word	0x200017a4
    f568:	200018c9 	.word	0x200018c9

0000f56c <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
    f56c:	b510      	push	{r4, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
    f56e:	f7ff f889 	bl	e684 <radio_adv_is_enabled>
    f572:	2300      	movs	r3, #0
    f574:	4298      	cmp	r0, r3
    f576:	d103      	bne.n	f580 <rl_access_check.constprop.1+0x14>
    f578:	f7ff f89a 	bl	e6b0 <radio_scan_is_enabled>
    f57c:	4243      	negs	r3, r0
    f57e:	4143      	adcs	r3, r0
}
    f580:	0018      	movs	r0, r3
    f582:	bd10      	pop	{r4, pc}

0000f584 <filter_wl_update>:
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)

static void filter_wl_update(void)
{
    f584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
    f586:	2400      	movs	r4, #0
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
    f588:	2607      	movs	r6, #7

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
    f58a:	4d1a      	ldr	r5, [pc, #104]	; (f5f4 <filter_wl_update+0x70>)
    f58c:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
    f58e:	706c      	strb	r4, [r5, #1]
	filter_clear(&wl);

	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
    f590:	4b19      	ldr	r3, [pc, #100]	; (f5f8 <filter_wl_update+0x74>)
    f592:	4a1a      	ldr	r2, [pc, #104]	; (f5fc <filter_wl_update+0x78>)
    f594:	781b      	ldrb	r3, [r3, #0]
    f596:	2b00      	cmp	r3, #0
    f598:	d00e      	beq.n	f5b8 <filter_wl_update+0x34>

	/* Populate filter from wl peers */
	filter_clear(&wl);

	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;
    f59a:	0033      	movs	r3, r6
    f59c:	4363      	muls	r3, r4
    f59e:	5cd3      	ldrb	r3, [r2, r3]
    f5a0:	06db      	lsls	r3, r3, #27
    f5a2:	0f1b      	lsrs	r3, r3, #28

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
    f5a4:	2b0f      	cmp	r3, #15
    f5a6:	d007      	beq.n	f5b8 <filter_wl_update+0x34>
    f5a8:	2124      	movs	r1, #36	; 0x24
    f5aa:	434b      	muls	r3, r1
    f5ac:	4914      	ldr	r1, [pc, #80]	; (f600 <filter_wl_update+0x7c>)
    f5ae:	5c5b      	ldrb	r3, [r3, r1]
    f5b0:	0759      	lsls	r1, r3, #29
    f5b2:	d501      	bpl.n	f5b8 <filter_wl_update+0x34>
    f5b4:	09db      	lsrs	r3, r3, #7
    f5b6:	d018      	beq.n	f5ea <filter_wl_update+0x66>
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
    f5b8:	0031      	movs	r1, r6
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    f5ba:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
    f5bc:	4361      	muls	r1, r4
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    f5be:	4684      	mov	ip, r0
    f5c0:	2001      	movs	r0, #1
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
    f5c2:	5c53      	ldrb	r3, [r2, r1]
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    f5c4:	40a0      	lsls	r0, r4
    f5c6:	4667      	mov	r7, ip
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
    f5c8:	069b      	lsls	r3, r3, #26
    f5ca:	0fdb      	lsrs	r3, r3, #31
static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f5cc:	3101      	adds	r1, #1

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f5ce:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f5d0:	1851      	adds	r1, r2, r1
    f5d2:	2206      	movs	r2, #6
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    f5d4:	4338      	orrs	r0, r7
    f5d6:	7028      	strb	r0, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f5d8:	7868      	ldrb	r0, [r5, #1]
    f5da:	4303      	orrs	r3, r0
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f5dc:	0010      	movs	r0, r2
    f5de:	4360      	muls	r0, r4
    f5e0:	3002      	adds	r0, #2
    f5e2:	1828      	adds	r0, r5, r0

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f5e4:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f5e6:	f7f1 fb32 	bl	c4e <memcpy>
	int i;

	/* Populate filter from wl peers */
	filter_clear(&wl);

	for (i = 0; i < WL_SIZE; i++) {
    f5ea:	3401      	adds	r4, #1
    f5ec:	2c08      	cmp	r4, #8
    f5ee:	d1cf      	bne.n	f590 <filter_wl_update+0xc>
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
				      wl_peers[i].id_addr.val);
		}
	}
}
    f5f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f5f2:	46c0      	nop			; (mov r8, r8)
    f5f4:	2000185f 	.word	0x2000185f
    f5f8:	200019e9 	.word	0x200019e9
    f5fc:	20001891 	.word	0x20001891
    f600:	200018c9 	.word	0x200018c9

0000f604 <ctrl_irks_get>:
#endif

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
u8_t *ctrl_irks_get(u8_t *count)
{
	*count = peer_irk_count;
    f604:	4b02      	ldr	r3, [pc, #8]	; (f610 <ctrl_irks_get+0xc>)
    f606:	781b      	ldrb	r3, [r3, #0]
    f608:	7003      	strb	r3, [r0, #0]
	return (u8_t *)peer_irks;
}
    f60a:	4802      	ldr	r0, [pc, #8]	; (f614 <ctrl_irks_get+0x10>)
    f60c:	4770      	bx	lr
    f60e:	46c0      	nop			; (mov r8, r8)
    f610:	2000185e 	.word	0x2000185e
    f614:	200017d6 	.word	0x200017d6

0000f618 <ctrl_rl_idx>:

u8_t ctrl_rl_idx(u8_t irkmatch_id)
{
    f618:	b507      	push	{r0, r1, r2, lr}
	u8_t i;

	LL_ASSERT(irkmatch_id < peer_irk_count);
    f61a:	4b17      	ldr	r3, [pc, #92]	; (f678 <ctrl_rl_idx+0x60>)
    f61c:	781b      	ldrb	r3, [r3, #0]
    f61e:	4283      	cmp	r3, r0
    f620:	d808      	bhi.n	f634 <ctrl_rl_idx+0x1c>
    f622:	4b16      	ldr	r3, [pc, #88]	; (f67c <ctrl_rl_idx+0x64>)
    f624:	4a16      	ldr	r2, [pc, #88]	; (f680 <ctrl_rl_idx+0x68>)
    f626:	9301      	str	r3, [sp, #4]
    f628:	4b16      	ldr	r3, [pc, #88]	; (f684 <ctrl_rl_idx+0x6c>)
    f62a:	4917      	ldr	r1, [pc, #92]	; (f688 <ctrl_rl_idx+0x70>)
    f62c:	9300      	str	r3, [sp, #0]
    f62e:	4817      	ldr	r0, [pc, #92]	; (f68c <ctrl_rl_idx+0x74>)
    f630:	4b17      	ldr	r3, [pc, #92]	; (f690 <ctrl_rl_idx+0x78>)
    f632:	e00b      	b.n	f64c <ctrl_rl_idx+0x34>
	i = peer_irk_rl_ids[irkmatch_id];
    f634:	4b17      	ldr	r3, [pc, #92]	; (f694 <ctrl_rl_idx+0x7c>)
    f636:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE);
    f638:	2807      	cmp	r0, #7
    f63a:	d90c      	bls.n	f656 <ctrl_rl_idx+0x3e>
    f63c:	4b0f      	ldr	r3, [pc, #60]	; (f67c <ctrl_rl_idx+0x64>)
    f63e:	4a10      	ldr	r2, [pc, #64]	; (f680 <ctrl_rl_idx+0x68>)
    f640:	9301      	str	r3, [sp, #4]
    f642:	4b10      	ldr	r3, [pc, #64]	; (f684 <ctrl_rl_idx+0x6c>)
    f644:	4910      	ldr	r1, [pc, #64]	; (f688 <ctrl_rl_idx+0x70>)
    f646:	9300      	str	r3, [sp, #0]
    f648:	4813      	ldr	r0, [pc, #76]	; (f698 <ctrl_rl_idx+0x80>)
    f64a:	4b11      	ldr	r3, [pc, #68]	; (f690 <ctrl_rl_idx+0x78>)
    f64c:	f7f2 f922 	bl	1894 <printk>
    f650:	b662      	cpsie	i
    f652:	2004      	movs	r0, #4
    f654:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
    f656:	2324      	movs	r3, #36	; 0x24
    f658:	4343      	muls	r3, r0
    f65a:	4a10      	ldr	r2, [pc, #64]	; (f69c <ctrl_rl_idx+0x84>)
    f65c:	5c9b      	ldrb	r3, [r3, r2]
    f65e:	07db      	lsls	r3, r3, #31
    f660:	d408      	bmi.n	f674 <ctrl_rl_idx+0x5c>
    f662:	4b06      	ldr	r3, [pc, #24]	; (f67c <ctrl_rl_idx+0x64>)
    f664:	4a06      	ldr	r2, [pc, #24]	; (f680 <ctrl_rl_idx+0x68>)
    f666:	9301      	str	r3, [sp, #4]
    f668:	4b06      	ldr	r3, [pc, #24]	; (f684 <ctrl_rl_idx+0x6c>)
    f66a:	4907      	ldr	r1, [pc, #28]	; (f688 <ctrl_rl_idx+0x70>)
    f66c:	9300      	str	r3, [sp, #0]
    f66e:	480c      	ldr	r0, [pc, #48]	; (f6a0 <ctrl_rl_idx+0x88>)
    f670:	4b07      	ldr	r3, [pc, #28]	; (f690 <ctrl_rl_idx+0x78>)
    f672:	e7eb      	b.n	f64c <ctrl_rl_idx+0x34>

	return i;
}
    f674:	bd0e      	pop	{r1, r2, r3, pc}
    f676:	46c0      	nop			; (mov r8, r8)
    f678:	2000185e 	.word	0x2000185e
    f67c:	0001241d 	.word	0x0001241d
    f680:	0001246d 	.word	0x0001246d
    f684:	000124a8 	.word	0x000124a8
    f688:	000123e3 	.word	0x000123e3
    f68c:	000141b2 	.word	0x000141b2
    f690:	00014d75 	.word	0x00014d75
    f694:	20001856 	.word	0x20001856
    f698:	000141f0 	.word	0x000141f0
    f69c:	200018c9 	.word	0x200018c9
    f6a0:	00014217 	.word	0x00014217

0000f6a4 <ctrl_irk_whitelisted>:

bool ctrl_irk_whitelisted(u8_t rl_idx)
{
    f6a4:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx == RL_IDX_NONE) {
    f6a6:	280f      	cmp	r0, #15
    f6a8:	d023      	beq.n	f6f2 <ctrl_irk_whitelisted+0x4e>
		return false;
	}

	LL_ASSERT(rl_idx < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE);
    f6aa:	2807      	cmp	r0, #7
    f6ac:	d908      	bls.n	f6c0 <ctrl_irk_whitelisted+0x1c>
    f6ae:	4b12      	ldr	r3, [pc, #72]	; (f6f8 <ctrl_irk_whitelisted+0x54>)
    f6b0:	4a12      	ldr	r2, [pc, #72]	; (f6fc <ctrl_irk_whitelisted+0x58>)
    f6b2:	9301      	str	r3, [sp, #4]
    f6b4:	4b12      	ldr	r3, [pc, #72]	; (f700 <ctrl_irk_whitelisted+0x5c>)
    f6b6:	4913      	ldr	r1, [pc, #76]	; (f704 <ctrl_irk_whitelisted+0x60>)
    f6b8:	9300      	str	r3, [sp, #0]
    f6ba:	4813      	ldr	r0, [pc, #76]	; (f708 <ctrl_irk_whitelisted+0x64>)
    f6bc:	4b13      	ldr	r3, [pc, #76]	; (f70c <ctrl_irk_whitelisted+0x68>)
    f6be:	e00d      	b.n	f6dc <ctrl_irk_whitelisted+0x38>
	LL_ASSERT(rl[rl_idx].taken);
    f6c0:	2324      	movs	r3, #36	; 0x24
    f6c2:	4358      	muls	r0, r3
    f6c4:	4a12      	ldr	r2, [pc, #72]	; (f710 <ctrl_irk_whitelisted+0x6c>)
    f6c6:	5c83      	ldrb	r3, [r0, r2]
    f6c8:	07db      	lsls	r3, r3, #31
    f6ca:	d40c      	bmi.n	f6e6 <ctrl_irk_whitelisted+0x42>
    f6cc:	4b0a      	ldr	r3, [pc, #40]	; (f6f8 <ctrl_irk_whitelisted+0x54>)
    f6ce:	4a0b      	ldr	r2, [pc, #44]	; (f6fc <ctrl_irk_whitelisted+0x58>)
    f6d0:	9301      	str	r3, [sp, #4]
    f6d2:	4b0b      	ldr	r3, [pc, #44]	; (f700 <ctrl_irk_whitelisted+0x5c>)
    f6d4:	490b      	ldr	r1, [pc, #44]	; (f704 <ctrl_irk_whitelisted+0x60>)
    f6d6:	9300      	str	r3, [sp, #0]
    f6d8:	480e      	ldr	r0, [pc, #56]	; (f714 <ctrl_irk_whitelisted+0x70>)
    f6da:	4b0c      	ldr	r3, [pc, #48]	; (f70c <ctrl_irk_whitelisted+0x68>)
    f6dc:	f7f2 f8da 	bl	1894 <printk>
    f6e0:	b662      	cpsie	i
    f6e2:	2004      	movs	r0, #4
    f6e4:	df02      	svc	2

	return rl[rl_idx].wl;
    f6e6:	1810      	adds	r0, r2, r0
    f6e8:	7840      	ldrb	r0, [r0, #1]
    f6ea:	07c0      	lsls	r0, r0, #31
    f6ec:	0fc0      	lsrs	r0, r0, #31
    f6ee:	b2c0      	uxtb	r0, r0
    f6f0:	e000      	b.n	f6f4 <ctrl_irk_whitelisted+0x50>
}

bool ctrl_irk_whitelisted(u8_t rl_idx)
{
	if (rl_idx == RL_IDX_NONE) {
		return false;
    f6f2:	2000      	movs	r0, #0

	LL_ASSERT(rl_idx < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE);
	LL_ASSERT(rl[rl_idx].taken);

	return rl[rl_idx].wl;
}
    f6f4:	bd0e      	pop	{r1, r2, r3, pc}
    f6f6:	46c0      	nop			; (mov r8, r8)
    f6f8:	0001241d 	.word	0x0001241d
    f6fc:	0001246d 	.word	0x0001246d
    f700:	000124a8 	.word	0x000124a8
    f704:	000123e3 	.word	0x000123e3
    f708:	00014244 	.word	0x00014244
    f70c:	00014d81 	.word	0x00014d81
    f710:	200018c9 	.word	0x200018c9
    f714:	00014270 	.word	0x00014270

0000f718 <ctrl_filter_get>:
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
	if (whitelist) {
		return &wl;
    f718:	4b02      	ldr	r3, [pc, #8]	; (f724 <ctrl_filter_get+0xc>)
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
	if (whitelist) {
    f71a:	2800      	cmp	r0, #0
    f71c:	d100      	bne.n	f720 <ctrl_filter_get+0x8>
		return &wl;
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return &rl_filter;
    f71e:	4b02      	ldr	r3, [pc, #8]	; (f728 <ctrl_filter_get+0x10>)
#else
	LL_ASSERT(0);
#endif
}
    f720:	0018      	movs	r0, r3
    f722:	4770      	bx	lr
    f724:	2000185f 	.word	0x2000185f
    f728:	200017a4 	.word	0x200017a4

0000f72c <ll_wl_size_get>:
    f72c:	2008      	movs	r0, #8
    f72e:	4770      	bx	lr

0000f730 <ll_wl_clear>:
{
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
    f730:	b570      	push	{r4, r5, r6, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f732:	f7fe ffb1 	bl	e698 <radio_adv_filter_pol_get>
    f736:	2800      	cmp	r0, #0
    f738:	d001      	beq.n	f73e <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f73a:	200c      	movs	r0, #12
    f73c:	e012      	b.n	f764 <ll_wl_clear+0x34>
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f73e:	f7fe ffc1 	bl	e6c4 <radio_scan_filter_pol_get>
    f742:	2201      	movs	r2, #1
    f744:	4010      	ands	r0, r2
    f746:	d1f8      	bne.n	f73a <ll_wl_clear+0xa>
    f748:	0003      	movs	r3, r0
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
    f74a:	2607      	movs	r6, #7
    f74c:	4c06      	ldr	r4, [pc, #24]	; (f768 <ll_wl_clear+0x38>)
    f74e:	0035      	movs	r5, r6
    f750:	435d      	muls	r5, r3
    f752:	5d29      	ldrb	r1, [r5, r4]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
    f754:	3301      	adds	r3, #1
		wl_peers[i].taken = 0;
    f756:	4391      	bics	r1, r2
    f758:	5529      	strb	r1, [r5, r4]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
    f75a:	2b08      	cmp	r3, #8
    f75c:	d1f7      	bne.n	f74e <ll_wl_clear+0x1e>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();
#else
	filter_clear(&wl);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	wl_anon = 0;
    f75e:	2200      	movs	r2, #0
    f760:	4b02      	ldr	r3, [pc, #8]	; (f76c <ll_wl_clear+0x3c>)
    f762:	701a      	strb	r2, [r3, #0]

	return 0;
}
    f764:	bd70      	pop	{r4, r5, r6, pc}
    f766:	46c0      	nop			; (mov r8, r8)
    f768:	20001891 	.word	0x20001891
    f76c:	20001bf0 	.word	0x20001bf0

0000f770 <ll_wl_remove>:
	return filter_add(&wl, addr->type, addr->a.val);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    f770:	b570      	push	{r4, r5, r6, lr}
    f772:	0006      	movs	r6, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f774:	f7fe ff90 	bl	e698 <radio_adv_filter_pol_get>
    f778:	2800      	cmp	r0, #0
    f77a:	d001      	beq.n	f780 <ll_wl_remove+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f77c:	240c      	movs	r4, #12
    f77e:	e027      	b.n	f7d0 <ll_wl_remove+0x60>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f780:	f7fe ffa0 	bl	e6c4 <radio_scan_filter_pol_get>
    f784:	2501      	movs	r5, #1
    f786:	4028      	ands	r0, r5
    f788:	1e04      	subs	r4, r0, #0
    f78a:	d1f7      	bne.n	f77c <ll_wl_remove+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
    f78c:	7830      	ldrb	r0, [r6, #0]
    f78e:	28ff      	cmp	r0, #255	; 0xff
    f790:	d102      	bne.n	f798 <ll_wl_remove+0x28>
		wl_anon = 0;
    f792:	4b10      	ldr	r3, [pc, #64]	; (f7d4 <ll_wl_remove+0x64>)
    f794:	701c      	strb	r4, [r3, #0]
		return 0;
    f796:	e01b      	b.n	f7d0 <ll_wl_remove+0x60>
}

static u32_t wl_peers_remove(bt_addr_le_t *id_addr)
{
	/* find the device and mark it as empty */
	int i = wl_peers_find(id_addr->type, id_addr->a.val);
    f798:	1c71      	adds	r1, r6, #1
    f79a:	f7ff fe93 	bl	f4c4 <wl_peers_find>

	if (i >= 0) {
    f79e:	2800      	cmp	r0, #0
    f7a0:	db15      	blt.n	f7ce <ll_wl_remove+0x5e>
		int j = wl_peers[i].rl_idx;
    f7a2:	2307      	movs	r3, #7
    f7a4:	4343      	muls	r3, r0
    f7a6:	490c      	ldr	r1, [pc, #48]	; (f7d8 <ll_wl_remove+0x68>)
    f7a8:	5c5b      	ldrb	r3, [r3, r1]
    f7aa:	06db      	lsls	r3, r3, #27
    f7ac:	0f1b      	lsrs	r3, r3, #28

		if (j != RL_IDX_NONE) {
    f7ae:	2b0f      	cmp	r3, #15
    f7b0:	d006      	beq.n	f7c0 <ll_wl_remove+0x50>
			rl[j].wl = 0;
    f7b2:	2224      	movs	r2, #36	; 0x24
    f7b4:	4353      	muls	r3, r2
    f7b6:	4a09      	ldr	r2, [pc, #36]	; (f7dc <ll_wl_remove+0x6c>)
    f7b8:	18d3      	adds	r3, r2, r3
    f7ba:	785a      	ldrb	r2, [r3, #1]
    f7bc:	43aa      	bics	r2, r5
    f7be:	705a      	strb	r2, [r3, #1]
		}
		wl_peers[i].taken = 0;
    f7c0:	2307      	movs	r3, #7
    f7c2:	2201      	movs	r2, #1
    f7c4:	4358      	muls	r0, r3
    f7c6:	5c0b      	ldrb	r3, [r1, r0]
    f7c8:	4393      	bics	r3, r2
    f7ca:	540b      	strb	r3, [r1, r0]
    f7cc:	e000      	b.n	f7d0 <ll_wl_remove+0x60>
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f7ce:	2402      	movs	r4, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return wl_peers_remove(addr);
#else
	return filter_remove(&wl, addr->type, addr->a.val);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}
    f7d0:	0020      	movs	r0, r4
    f7d2:	bd70      	pop	{r4, r5, r6, pc}
    f7d4:	20001bf0 	.word	0x20001bf0
    f7d8:	20001891 	.word	0x20001891
    f7dc:	200018c9 	.word	0x200018c9

0000f7e0 <ll_filters_adv_update>:
		}
	}
}

void ll_filters_adv_update(u8_t adv_fp)
{
    f7e0:	b510      	push	{r4, lr}
	/* enabling advertising */
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
    f7e2:	2800      	cmp	r0, #0
    f7e4:	d005      	beq.n	f7f2 <ll_filters_adv_update+0x12>
    f7e6:	f7fe ff6d 	bl	e6c4 <radio_scan_filter_pol_get>
    f7ea:	07c3      	lsls	r3, r0, #31
    f7ec:	d401      	bmi.n	f7f2 <ll_filters_adv_update+0x12>
		/* whitelist not in use, update whitelist */
		filter_wl_update();
    f7ee:	f7ff fec9 	bl	f584 <filter_wl_update>
	}

	if (rl_enable && !radio_scan_is_enabled()) {
    f7f2:	4b05      	ldr	r3, [pc, #20]	; (f808 <ll_filters_adv_update+0x28>)
    f7f4:	781b      	ldrb	r3, [r3, #0]
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	d005      	beq.n	f806 <ll_filters_adv_update+0x26>
    f7fa:	f7fe ff59 	bl	e6b0 <radio_scan_is_enabled>
    f7fe:	2800      	cmp	r0, #0
    f800:	d101      	bne.n	f806 <ll_filters_adv_update+0x26>
		/* rl not in use, update resolving list LUT */
		filter_rl_update();
    f802:	f7ff fe83 	bl	f50c <filter_rl_update>
	}
}
    f806:	bd10      	pop	{r4, pc}
    f808:	200019e9 	.word	0x200019e9

0000f80c <ll_rl_find>:
		filter_rl_update();
	}
}

int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
    f80c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int i, free = -RL_IDX_NONE;
    f80e:	260f      	movs	r6, #15

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    f810:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f812:	2724      	movs	r7, #36	; 0x24
		filter_rl_update();
	}
}

int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
    f814:	9000      	str	r0, [sp, #0]
    f816:	9101      	str	r1, [sp, #4]
	int i, free = -RL_IDX_NONE;
    f818:	4276      	negs	r6, r6

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f81a:	0038      	movs	r0, r7
    f81c:	4360      	muls	r0, r4
    f81e:	4d13      	ldr	r5, [pc, #76]	; (f86c <ll_rl_find+0x60>)
    f820:	5d43      	ldrb	r3, [r0, r5]
    f822:	07db      	lsls	r3, r3, #31
    f824:	d405      	bmi.n	f832 <ll_rl_find+0x26>
			return i;
		} else if (!rl[i].taken && free == -RL_IDX_NONE) {
    f826:	003b      	movs	r3, r7
    f828:	4363      	muls	r3, r4
    f82a:	5ceb      	ldrb	r3, [r5, r3]
    f82c:	07db      	lsls	r3, r3, #31
    f82e:	d417      	bmi.n	f860 <ll_rl_find+0x54>
    f830:	e012      	b.n	f858 <ll_rl_find+0x4c>
int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
	int i, free = -RL_IDX_NONE;

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f832:	2101      	movs	r1, #1
    f834:	182b      	adds	r3, r5, r0
    f836:	785b      	ldrb	r3, [r3, #1]
    f838:	9a00      	ldr	r2, [sp, #0]
    f83a:	079b      	lsls	r3, r3, #30
    f83c:	0fdb      	lsrs	r3, r3, #31
    f83e:	400a      	ands	r2, r1
    f840:	4293      	cmp	r3, r2
    f842:	d1f0      	bne.n	f826 <ll_rl_find+0x1a>
    f844:	3002      	adds	r0, #2
    f846:	1828      	adds	r0, r5, r0
    f848:	2206      	movs	r2, #6
    f84a:	9901      	ldr	r1, [sp, #4]
    f84c:	f7f1 f9ea 	bl	c24 <memcmp>
    f850:	2800      	cmp	r0, #0
    f852:	d1e8      	bne.n	f826 <ll_rl_find+0x1a>
    f854:	0020      	movs	r0, r4
    f856:	e007      	b.n	f868 <ll_rl_find+0x5c>
			return i;
		} else if (!rl[i].taken && free == -RL_IDX_NONE) {
    f858:	0033      	movs	r3, r6
    f85a:	330f      	adds	r3, #15
    f85c:	d100      	bne.n	f860 <ll_rl_find+0x54>
    f85e:	4266      	negs	r6, r4

int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
	int i, free = -RL_IDX_NONE;

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    f860:	3401      	adds	r4, #1
    f862:	2c08      	cmp	r4, #8
    f864:	d1d9      	bne.n	f81a <ll_rl_find+0xe>
    f866:	0030      	movs	r0, r6
			free = -i;
		}
	}

	return free;
}
    f868:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f86a:	46c0      	nop			; (mov r8, r8)
    f86c:	200018c9 	.word	0x200018c9

0000f870 <ll_wl_add>:

	return 0;
}

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    f870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f872:	9000      	str	r0, [sp, #0]
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f874:	f7fe ff10 	bl	e698 <radio_adv_filter_pol_get>
    f878:	2800      	cmp	r0, #0
    f87a:	d001      	beq.n	f880 <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f87c:	240c      	movs	r4, #12
    f87e:	e055      	b.n	f92c <ll_wl_add+0xbc>
	return 0;
}

u32_t ll_wl_add(bt_addr_le_t *addr)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    f880:	f7fe ff20 	bl	e6c4 <radio_scan_filter_pol_get>
    f884:	2301      	movs	r3, #1
    f886:	4018      	ands	r0, r3
    f888:	1e04      	subs	r4, r0, #0
    f88a:	d1f7      	bne.n	f87c <ll_wl_add+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
    f88c:	9a00      	ldr	r2, [sp, #0]
    f88e:	7810      	ldrb	r0, [r2, #0]
    f890:	28ff      	cmp	r0, #255	; 0xff
    f892:	d102      	bne.n	f89a <ll_wl_add+0x2a>
		wl_anon = 1;
    f894:	4a26      	ldr	r2, [pc, #152]	; (f930 <ll_wl_add+0xc0>)
    f896:	7013      	strb	r3, [r2, #0]
		return 0;
    f898:	e048      	b.n	f92c <ll_wl_add+0xbc>
	return -1;
}

static u32_t wl_peers_add(bt_addr_le_t *id_addr)
{
	int i = wl_peers_find(id_addr->type, id_addr->a.val);
    f89a:	9b00      	ldr	r3, [sp, #0]
    f89c:	3301      	adds	r3, #1
    f89e:	0019      	movs	r1, r3
    f8a0:	9301      	str	r3, [sp, #4]
    f8a2:	f7ff fe0f 	bl	f4c4 <wl_peers_find>

	if (i >= 0) {
    f8a6:	2800      	cmp	r0, #0
    f8a8:	da3f      	bge.n	f92a <ll_wl_add+0xba>
    f8aa:	0027      	movs	r7, r4
		return BT_HCI_ERR_INVALID_PARAM;
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (!wl_peers[i].taken) {
    f8ac:	2107      	movs	r1, #7
    f8ae:	4d21      	ldr	r5, [pc, #132]	; (f934 <ll_wl_add+0xc4>)
    f8b0:	000e      	movs	r6, r1
    f8b2:	437e      	muls	r6, r7
    f8b4:	5d72      	ldrb	r2, [r6, r5]
    f8b6:	1c13      	adds	r3, r2, #0
    f8b8:	07d2      	lsls	r2, r2, #31
    f8ba:	d431      	bmi.n	f920 <ll_wl_add+0xb0>
			int j;

			wl_peers[i].id_addr_type = id_addr->type & 0x1;
    f8bc:	2101      	movs	r1, #1
    f8be:	9a00      	ldr	r2, [sp, #0]
			bt_addr_copy(&wl_peers[i].id_addr, &id_addr->a);
    f8c0:	19a8      	adds	r0, r5, r6

	for (i = 0; i < WL_SIZE; i++) {
		if (!wl_peers[i].taken) {
			int j;

			wl_peers[i].id_addr_type = id_addr->type & 0x1;
    f8c2:	7812      	ldrb	r2, [r2, #0]
			bt_addr_copy(&wl_peers[i].id_addr, &id_addr->a);
    f8c4:	3001      	adds	r0, #1

	for (i = 0; i < WL_SIZE; i++) {
		if (!wl_peers[i].taken) {
			int j;

			wl_peers[i].id_addr_type = id_addr->type & 0x1;
    f8c6:	400a      	ands	r2, r1
    f8c8:	311f      	adds	r1, #31
    f8ca:	0152      	lsls	r2, r2, #5
    f8cc:	438b      	bics	r3, r1
    f8ce:	4313      	orrs	r3, r2
    f8d0:	5573      	strb	r3, [r6, r5]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    f8d2:	2206      	movs	r2, #6
    f8d4:	9901      	ldr	r1, [sp, #4]
    f8d6:	f7f1 f9ba 	bl	c4e <memcpy>
			bt_addr_copy(&wl_peers[i].id_addr, &id_addr->a);
			/* Get index to Resolving List if applicable */
			j = ll_rl_find(id_addr->type, id_addr->a.val);
    f8da:	9b00      	ldr	r3, [sp, #0]
    f8dc:	9901      	ldr	r1, [sp, #4]
    f8de:	7818      	ldrb	r0, [r3, #0]
    f8e0:	f7ff ff94 	bl	f80c <ll_rl_find>
    f8e4:	5d73      	ldrb	r3, [r6, r5]
			if (j >= 0) {
    f8e6:	2800      	cmp	r0, #0
    f8e8:	db0f      	blt.n	f90a <ll_wl_add+0x9a>
				wl_peers[i].rl_idx = j;
    f8ea:	220f      	movs	r2, #15
    f8ec:	211e      	movs	r1, #30
    f8ee:	4002      	ands	r2, r0
    f8f0:	0052      	lsls	r2, r2, #1
    f8f2:	438b      	bics	r3, r1
    f8f4:	4313      	orrs	r3, r2
    f8f6:	5573      	strb	r3, [r6, r5]
				rl[j].wl = 1;
    f8f8:	2324      	movs	r3, #36	; 0x24
    f8fa:	2201      	movs	r2, #1
    f8fc:	4358      	muls	r0, r3
    f8fe:	4b0e      	ldr	r3, [pc, #56]	; (f938 <ll_wl_add+0xc8>)
    f900:	1818      	adds	r0, r3, r0
    f902:	7843      	ldrb	r3, [r0, #1]
    f904:	4313      	orrs	r3, r2
    f906:	7043      	strb	r3, [r0, #1]
    f908:	e002      	b.n	f910 <ll_wl_add+0xa0>
			} else {
				wl_peers[i].rl_idx = RL_IDX_NONE;
    f90a:	221e      	movs	r2, #30
    f90c:	4313      	orrs	r3, r2
    f90e:	5573      	strb	r3, [r6, r5]
			}
			wl_peers[i].taken = 1;
    f910:	2307      	movs	r3, #7
    f912:	2001      	movs	r0, #1
    f914:	437b      	muls	r3, r7
    f916:	4907      	ldr	r1, [pc, #28]	; (f934 <ll_wl_add+0xc4>)
    f918:	5c5a      	ldrb	r2, [r3, r1]
    f91a:	4302      	orrs	r2, r0
    f91c:	545a      	strb	r2, [r3, r1]
    f91e:	e005      	b.n	f92c <ll_wl_add+0xbc>

	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
	}

	for (i = 0; i < WL_SIZE; i++) {
    f920:	3701      	adds	r7, #1
    f922:	2f08      	cmp	r7, #8
    f924:	d1c4      	bne.n	f8b0 <ll_wl_add+0x40>
			wl_peers[i].taken = 1;
			return 0;
		}
	}

	return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    f926:	2407      	movs	r4, #7
    f928:	e000      	b.n	f92c <ll_wl_add+0xbc>
static u32_t wl_peers_add(bt_addr_le_t *id_addr)
{
	int i = wl_peers_find(id_addr->type, id_addr->a.val);

	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
    f92a:	2412      	movs	r4, #18
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return wl_peers_add(addr);
#else
	return filter_add(&wl, addr->type, addr->a.val);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}
    f92c:	0020      	movs	r0, r4
    f92e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f930:	20001bf0 	.word	0x20001bf0
    f934:	20001891 	.word	0x20001891
    f938:	200018c9 	.word	0x200018c9

0000f93c <ctrl_rl_allowed>:

	return free;
}

bool ctrl_rl_allowed(u8_t id_addr_type, u8_t *id_addr)
{
    f93c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i, j;

	if (!rl_enable) {
    f93e:	4b19      	ldr	r3, [pc, #100]	; (f9a4 <ctrl_rl_allowed+0x68>)

	return free;
}

bool ctrl_rl_allowed(u8_t id_addr_type, u8_t *id_addr)
{
    f940:	0006      	movs	r6, r0
	int i, j;

	if (!rl_enable) {
    f942:	781b      	ldrb	r3, [r3, #0]
		return true;
    f944:	2001      	movs	r0, #1

bool ctrl_rl_allowed(u8_t id_addr_type, u8_t *id_addr)
{
	int i, j;

	if (!rl_enable) {
    f946:	2b00      	cmp	r3, #0
    f948:	d02a      	beq.n	f9a0 <ctrl_rl_allowed+0x64>
    f94a:	2200      	movs	r2, #0
		return true;
	}

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
    f94c:	4d16      	ldr	r5, [pc, #88]	; (f9a8 <ctrl_rl_allowed+0x6c>)
    f94e:	3023      	adds	r0, #35	; 0x23
    f950:	0003      	movs	r3, r0
    f952:	4353      	muls	r3, r2
    f954:	5d5c      	ldrb	r4, [r3, r5]
    f956:	07e4      	lsls	r4, r4, #31
    f958:	d511      	bpl.n	f97e <ctrl_rl_allowed+0x42>
    f95a:	18ec      	adds	r4, r5, r3
    f95c:	7864      	ldrb	r4, [r4, #1]
    f95e:	07a4      	lsls	r4, r4, #30
    f960:	0fe4      	lsrs	r4, r4, #31
    f962:	42b4      	cmp	r4, r6
    f964:	d10b      	bne.n	f97e <ctrl_rl_allowed+0x42>
			u8_t *addr = rl[i].id_addr.val;
			for (j = 0; j < BDADDR_SIZE; j++) {
    f966:	2400      	movs	r4, #0
    f968:	3302      	adds	r3, #2
    f96a:	18eb      	adds	r3, r5, r3
				if (addr[j] != id_addr[j]) {
    f96c:	5d1f      	ldrb	r7, [r3, r4]
    f96e:	46bc      	mov	ip, r7
    f970:	5d0f      	ldrb	r7, [r1, r4]
    f972:	45bc      	cmp	ip, r7
    f974:	d103      	bne.n	f97e <ctrl_rl_allowed+0x42>
	}

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
			u8_t *addr = rl[i].id_addr.val;
			for (j = 0; j < BDADDR_SIZE; j++) {
    f976:	3401      	adds	r4, #1
    f978:	2c06      	cmp	r4, #6
    f97a:	d1f7      	bne.n	f96c <ctrl_rl_allowed+0x30>
    f97c:	e004      	b.n	f988 <ctrl_rl_allowed+0x4c>

	if (!rl_enable) {
		return true;
	}

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    f97e:	3201      	adds	r2, #1
    f980:	2a08      	cmp	r2, #8
    f982:	d1e5      	bne.n	f950 <ctrl_rl_allowed+0x14>
				return !rl[i].pirk || rl[i].dev;
			}
		}
	}

	return false;
    f984:	2000      	movs	r0, #0
    f986:	e00b      	b.n	f9a0 <ctrl_rl_allowed+0x64>
					break;
				}
			}

			if (j == BDADDR_SIZE) {
				return !rl[i].pirk || rl[i].dev;
    f988:	2324      	movs	r3, #36	; 0x24
    f98a:	435a      	muls	r2, r3
    f98c:	4b06      	ldr	r3, [pc, #24]	; (f9a8 <ctrl_rl_allowed+0x6c>)
    f98e:	5c9a      	ldrb	r2, [r3, r2]
    f990:	2301      	movs	r3, #1
    f992:	09d0      	lsrs	r0, r2, #7
    f994:	0752      	lsls	r2, r2, #29
    f996:	d501      	bpl.n	f99c <ctrl_rl_allowed+0x60>
    f998:	4018      	ands	r0, r3
    f99a:	e001      	b.n	f9a0 <ctrl_rl_allowed+0x64>
    f99c:	0018      	movs	r0, r3
    f99e:	e7fb      	b.n	f998 <ctrl_rl_allowed+0x5c>
			}
		}
	}

	return false;
}
    f9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9a2:	46c0      	nop			; (mov r8, r8)
    f9a4:	200019e9 	.word	0x200019e9
    f9a8:	200018c9 	.word	0x200018c9

0000f9ac <ctrl_rl_enabled>:

bool ctrl_rl_enabled(void)
{
	return rl_enable;
    f9ac:	4b02      	ldr	r3, [pc, #8]	; (f9b8 <ctrl_rl_enabled+0xc>)
    f9ae:	7818      	ldrb	r0, [r3, #0]
    f9b0:	1e43      	subs	r3, r0, #1
    f9b2:	4198      	sbcs	r0, r3
    f9b4:	b2c0      	uxtb	r0, r0
}
    f9b6:	4770      	bx	lr
    f9b8:	200019e9 	.word	0x200019e9

0000f9bc <ll_rl_pdu_adv_update>:

#if defined(CONFIG_BLUETOOTH_BROADCASTER)
void ll_rl_pdu_adv_update(int idx, struct pdu_adv *pdu)
{
    f9bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f9be:	0006      	movs	r6, r0
    f9c0:	000c      	movs	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
				  &pdu->payload.scan_rsp.addr[0] :
    f9c2:	1c8f      	adds	r7, r1, #2
				  &pdu->payload.adv_ind.addr[0];

	struct ll_adv_set *ll_adv = ll_adv_set_get();
    f9c4:	f000 fb42 	bl	1004c <ll_adv_set_get>
    f9c8:	0005      	movs	r5, r0

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
    f9ca:	2e00      	cmp	r6, #0
    f9cc:	db1f      	blt.n	fa0e <ll_rl_pdu_adv_update+0x52>
    f9ce:	2124      	movs	r1, #36	; 0x24
    f9d0:	4371      	muls	r1, r6
    f9d2:	4a29      	ldr	r2, [pc, #164]	; (fa78 <ll_rl_pdu_adv_update+0xbc>)
    f9d4:	5c8b      	ldrb	r3, [r1, r2]
    f9d6:	0658      	lsls	r0, r3, #25
    f9d8:	d519      	bpl.n	fa0e <ll_rl_pdu_adv_update+0x52>
		LL_ASSERT(rl[idx].rpas_ready);
    f9da:	079b      	lsls	r3, r3, #30
    f9dc:	d40c      	bmi.n	f9f8 <ll_rl_pdu_adv_update+0x3c>
    f9de:	4b27      	ldr	r3, [pc, #156]	; (fa7c <ll_rl_pdu_adv_update+0xc0>)
    f9e0:	4a27      	ldr	r2, [pc, #156]	; (fa80 <ll_rl_pdu_adv_update+0xc4>)
    f9e2:	9301      	str	r3, [sp, #4]
    f9e4:	4b27      	ldr	r3, [pc, #156]	; (fa84 <ll_rl_pdu_adv_update+0xc8>)
    f9e6:	4928      	ldr	r1, [pc, #160]	; (fa88 <ll_rl_pdu_adv_update+0xcc>)
    f9e8:	9300      	str	r3, [sp, #0]
    f9ea:	4828      	ldr	r0, [pc, #160]	; (fa8c <ll_rl_pdu_adv_update+0xd0>)
    f9ec:	4b28      	ldr	r3, [pc, #160]	; (fa90 <ll_rl_pdu_adv_update+0xd4>)
    f9ee:	f7f1 ff51 	bl	1894 <printk>
    f9f2:	b662      	cpsie	i
    f9f4:	2004      	movs	r0, #4
    f9f6:	df02      	svc	2
		pdu->tx_addr = 1;
    f9f8:	2040      	movs	r0, #64	; 0x40
    f9fa:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa.val, BDADDR_SIZE);
    f9fc:	1851      	adds	r1, r2, r1
	struct ll_adv_set *ll_adv = ll_adv_set_get();

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
		LL_ASSERT(rl[idx].rpas_ready);
		pdu->tx_addr = 1;
    f9fe:	4303      	orrs	r3, r0
    fa00:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa.val, BDADDR_SIZE);
    fa02:	311e      	adds	r1, #30
    fa04:	2206      	movs	r2, #6
    fa06:	0038      	movs	r0, r7
    fa08:	f7f1 f921 	bl	c4e <memcpy>
    fa0c:	e00f      	b.n	fa2e <ll_rl_pdu_adv_update+0x72>
	} else {
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
    fa0e:	2101      	movs	r1, #1
    fa10:	2040      	movs	r0, #64	; 0x40
    fa12:	786b      	ldrb	r3, [r5, #1]
    fa14:	091b      	lsrs	r3, r3, #4
    fa16:	400b      	ands	r3, r1
    fa18:	019a      	lsls	r2, r3, #6
    fa1a:	7823      	ldrb	r3, [r4, #0]
    fa1c:	4383      	bics	r3, r0
    fa1e:	4313      	orrs	r3, r2
    fa20:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
    fa22:	7868      	ldrb	r0, [r5, #1]
    fa24:	0900      	lsrs	r0, r0, #4
    fa26:	4008      	ands	r0, r1
    fa28:	0039      	movs	r1, r7
    fa2a:	f7ff fd25 	bl	f478 <ll_addr_get>
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    fa2e:	230f      	movs	r3, #15
    fa30:	7822      	ldrb	r2, [r4, #0]
    fa32:	4013      	ands	r3, r2
    fa34:	2b01      	cmp	r3, #1
    fa36:	d11d      	bne.n	fa74 <ll_rl_pdu_adv_update+0xb8>
    fa38:	0020      	movs	r0, r4
    fa3a:	3008      	adds	r0, #8
		if (idx >= 0 && rl[idx].pirk) {
    fa3c:	2e00      	cmp	r6, #0
    fa3e:	db0c      	blt.n	fa5a <ll_rl_pdu_adv_update+0x9e>
    fa40:	3323      	adds	r3, #35	; 0x23
    fa42:	435e      	muls	r6, r3
    fa44:	490c      	ldr	r1, [pc, #48]	; (fa78 <ll_rl_pdu_adv_update+0xbc>)
    fa46:	5c73      	ldrb	r3, [r6, r1]
    fa48:	075b      	lsls	r3, r3, #29
    fa4a:	d506      	bpl.n	fa5a <ll_rl_pdu_adv_update+0x9e>
			pdu->rx_addr = 1;
    fa4c:	2380      	movs	r3, #128	; 0x80
    fa4e:	425b      	negs	r3, r3
    fa50:	431a      	orrs	r2, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
    fa52:	3618      	adds	r6, #24
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		if (idx >= 0 && rl[idx].pirk) {
			pdu->rx_addr = 1;
    fa54:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
    fa56:	1989      	adds	r1, r1, r6
    fa58:	e009      	b.n	fa6e <ll_rl_pdu_adv_update+0xb2>
		} else {
			pdu->rx_addr = ll_adv->id_addr_type;
    fa5a:	786b      	ldrb	r3, [r5, #1]
    fa5c:	7821      	ldrb	r1, [r4, #0]
    fa5e:	065b      	lsls	r3, r3, #25
    fa60:	0fdb      	lsrs	r3, r3, #31
    fa62:	01da      	lsls	r2, r3, #7
    fa64:	237f      	movs	r3, #127	; 0x7f
    fa66:	400b      	ands	r3, r1
    fa68:	4313      	orrs	r3, r2
    fa6a:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       ll_adv->id_addr, BDADDR_SIZE);
    fa6c:	1ca9      	adds	r1, r5, #2
			pdu->rx_addr = 1;
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
		} else {
			pdu->rx_addr = ll_adv->id_addr_type;
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
    fa6e:	2206      	movs	r2, #6
    fa70:	f7f1 f8ed 	bl	c4e <memcpy>
			       ll_adv->id_addr, BDADDR_SIZE);
		}
	}
}
    fa74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    fa76:	46c0      	nop			; (mov r8, r8)
    fa78:	200018c9 	.word	0x200018c9
    fa7c:	0001241d 	.word	0x0001241d
    fa80:	0001246d 	.word	0x0001246d
    fa84:	000124a8 	.word	0x000124a8
    fa88:	000123e3 	.word	0x000123e3
    fa8c:	000142a2 	.word	0x000142a2
    fa90:	00014d96 	.word	0x00014d96

0000fa94 <ll_rl_rpa_update>:

	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
}

void ll_rl_rpa_update(bool timeout)
{
    fa94:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa96:	b087      	sub	sp, #28
    fa98:	9005      	str	r0, [sp, #20]
	int i, err;
	s64_t now = k_uptime_get();
    fa9a:	f001 ff87 	bl	119ac <k_uptime_get>
	bool all = timeout || (rpa_last_ms == -1) ||
    fa9e:	2301      	movs	r3, #1
    faa0:	9304      	str	r3, [sp, #16]
    faa2:	9b05      	ldr	r3, [sp, #20]
}

void ll_rl_rpa_update(bool timeout)
{
	int i, err;
	s64_t now = k_uptime_get();
    faa4:	9002      	str	r0, [sp, #8]
    faa6:	9103      	str	r1, [sp, #12]
	bool all = timeout || (rpa_last_ms == -1) ||
    faa8:	2b00      	cmp	r3, #0
    faaa:	d117      	bne.n	fadc <ll_rl_rpa_update+0x48>
    faac:	4b5c      	ldr	r3, [pc, #368]	; (fc20 <ll_rl_rpa_update+0x18c>)
    faae:	681a      	ldr	r2, [r3, #0]
    fab0:	685b      	ldr	r3, [r3, #4]
    fab2:	1c51      	adds	r1, r2, #1
    fab4:	d101      	bne.n	faba <ll_rl_rpa_update+0x26>
    fab6:	1c59      	adds	r1, r3, #1
    fab8:	d010      	beq.n	fadc <ll_rl_rpa_update+0x48>
    faba:	9802      	ldr	r0, [sp, #8]
    fabc:	9903      	ldr	r1, [sp, #12]
    fabe:	1a80      	subs	r0, r0, r2
    fac0:	4199      	sbcs	r1, r3
    fac2:	0002      	movs	r2, r0
    fac4:	2000      	movs	r0, #0
    fac6:	000b      	movs	r3, r1
		   (now - rpa_last_ms >= rpa_timeout_ms);
    fac8:	4956      	ldr	r1, [pc, #344]	; (fc24 <ll_rl_rpa_update+0x190>)

void ll_rl_rpa_update(bool timeout)
{
	int i, err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
    faca:	680c      	ldr	r4, [r1, #0]
    facc:	2101      	movs	r1, #1
    face:	4298      	cmp	r0, r3
    fad0:	dc02      	bgt.n	fad8 <ll_rl_rpa_update+0x44>
    fad2:	d102      	bne.n	fada <ll_rl_rpa_update+0x46>
    fad4:	4294      	cmp	r4, r2
    fad6:	d900      	bls.n	fada <ll_rl_rpa_update+0x46>
    fad8:	2100      	movs	r1, #0
    fada:	9104      	str	r1, [sp, #16]
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    fadc:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    fade:	2624      	movs	r6, #36	; 0x24
    fae0:	4d51      	ldr	r5, [pc, #324]	; (fc28 <ll_rl_rpa_update+0x194>)
    fae2:	3508      	adds	r5, #8
    fae4:	0032      	movs	r2, r6
    fae6:	4362      	muls	r2, r4
    fae8:	4b4f      	ldr	r3, [pc, #316]	; (fc28 <ll_rl_rpa_update+0x194>)
    faea:	5cd2      	ldrb	r2, [r2, r3]
    faec:	07d1      	lsls	r1, r2, #31
    faee:	d530      	bpl.n	fb52 <ll_rl_rpa_update+0xbe>
    faf0:	9904      	ldr	r1, [sp, #16]
    faf2:	2900      	cmp	r1, #0
    faf4:	d101      	bne.n	fafa <ll_rl_rpa_update+0x66>
    faf6:	0792      	lsls	r2, r2, #30
    faf8:	d42b      	bmi.n	fb52 <ll_rl_rpa_update+0xbe>

			if (rl[i].pirk) {
    fafa:	0032      	movs	r2, r6
    fafc:	4362      	muls	r2, r4
    fafe:	5c98      	ldrb	r0, [r3, r2]
    fb00:	0743      	lsls	r3, r0, #29
    fb02:	d50a      	bpl.n	fb1a <ll_rl_rpa_update+0x86>
				err = bt_rpa_create(peer_irks[rl[i].pirk_idx],
    fb04:	0029      	movs	r1, r5
    fb06:	0680      	lsls	r0, r0, #26
    fb08:	0f40      	lsrs	r0, r0, #29
    fb0a:	4b48      	ldr	r3, [pc, #288]	; (fc2c <ll_rl_rpa_update+0x198>)
    fb0c:	0100      	lsls	r0, r0, #4
    fb0e:	1818      	adds	r0, r3, r0
    fb10:	3110      	adds	r1, #16
    fb12:	f7f1 ff1b 	bl	194c <bt_rpa_create>
						    &rl[i].peer_rpa);
				LL_ASSERT(!err);
    fb16:	2800      	cmp	r0, #0
    fb18:	d10c      	bne.n	fb34 <ll_rl_rpa_update+0xa0>
			}
			if (rl[i].lirk) {
    fb1a:	0033      	movs	r3, r6
    fb1c:	4363      	muls	r3, r4
    fb1e:	4f42      	ldr	r7, [pc, #264]	; (fc28 <ll_rl_rpa_update+0x194>)
    fb20:	5ddb      	ldrb	r3, [r3, r7]
    fb22:	065b      	lsls	r3, r3, #25
    fb24:	d50f      	bpl.n	fb46 <ll_rl_rpa_update+0xb2>
				err = bt_rpa_create(rl[i].local_irk,
    fb26:	0029      	movs	r1, r5
    fb28:	0028      	movs	r0, r5
    fb2a:	3116      	adds	r1, #22
    fb2c:	f7f1 ff0e 	bl	194c <bt_rpa_create>
						    &rl[i].local_rpa);
				LL_ASSERT(!err);
    fb30:	2800      	cmp	r0, #0
    fb32:	d008      	beq.n	fb46 <ll_rl_rpa_update+0xb2>
    fb34:	4b3e      	ldr	r3, [pc, #248]	; (fc30 <ll_rl_rpa_update+0x19c>)
    fb36:	4a3f      	ldr	r2, [pc, #252]	; (fc34 <ll_rl_rpa_update+0x1a0>)
    fb38:	9301      	str	r3, [sp, #4]
    fb3a:	4b3f      	ldr	r3, [pc, #252]	; (fc38 <ll_rl_rpa_update+0x1a4>)
    fb3c:	493f      	ldr	r1, [pc, #252]	; (fc3c <ll_rl_rpa_update+0x1a8>)
    fb3e:	9300      	str	r3, [sp, #0]
    fb40:	483f      	ldr	r0, [pc, #252]	; (fc40 <ll_rl_rpa_update+0x1ac>)
    fb42:	4b40      	ldr	r3, [pc, #256]	; (fc44 <ll_rl_rpa_update+0x1b0>)
    fb44:	e056      	b.n	fbf4 <ll_rl_rpa_update+0x160>
			}

			rl[i].rpas_ready = 1;
    fb46:	0032      	movs	r2, r6
    fb48:	2102      	movs	r1, #2
    fb4a:	4362      	muls	r2, r4
    fb4c:	5cbb      	ldrb	r3, [r7, r2]
    fb4e:	430b      	orrs	r3, r1
    fb50:	54bb      	strb	r3, [r7, r2]
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    fb52:	3401      	adds	r4, #1
    fb54:	3524      	adds	r5, #36	; 0x24
    fb56:	2c08      	cmp	r4, #8
    fb58:	d1c4      	bne.n	fae4 <ll_rl_rpa_update+0x50>

			rl[i].rpas_ready = 1;
		}
	}

	if (all) {
    fb5a:	9b04      	ldr	r3, [sp, #16]
    fb5c:	2b00      	cmp	r3, #0
    fb5e:	d004      	beq.n	fb6a <ll_rl_rpa_update+0xd6>
		rpa_last_ms = now;
    fb60:	9902      	ldr	r1, [sp, #8]
    fb62:	9a03      	ldr	r2, [sp, #12]
    fb64:	4b2e      	ldr	r3, [pc, #184]	; (fc20 <ll_rl_rpa_update+0x18c>)
    fb66:	6019      	str	r1, [r3, #0]
    fb68:	605a      	str	r2, [r3, #4]
	}

	if (timeout) {
    fb6a:	9b05      	ldr	r3, [sp, #20]
    fb6c:	2b00      	cmp	r3, #0
    fb6e:	d055      	beq.n	fc1c <ll_rl_rpa_update+0x188>
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
		if (radio_adv_is_enabled()) {
    fb70:	f7fe fd88 	bl	e684 <radio_adv_is_enabled>
    fb74:	2800      	cmp	r0, #0
    fb76:	d051      	beq.n	fc1c <ll_rl_rpa_update+0x188>
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;
	int idx;

	ll_adv = ll_adv_set_get();
    fb78:	f000 fa68 	bl	1004c <ll_adv_set_get>

	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
    fb7c:	7843      	ldrb	r3, [r0, #1]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;
	int idx;

	ll_adv = ll_adv_set_get();
    fb7e:	0007      	movs	r7, r0

	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
    fb80:	069b      	lsls	r3, r3, #26
    fb82:	d54b      	bpl.n	fc1c <ll_rl_rpa_update+0x188>
	    ll_adv->own_addr_type != BT_ADDR_LE_RANDOM_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
    fb84:	f7fe fd72 	bl	e66c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    fb88:	0003      	movs	r3, r0
    fb8a:	334f      	adds	r3, #79	; 0x4f
    fb8c:	9304      	str	r3, [sp, #16]
    fb8e:	781d      	ldrb	r5, [r3, #0]
    fb90:	2327      	movs	r3, #39	; 0x27
    fb92:	001e      	movs	r6, r3
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    fb94:	0002      	movs	r2, r0
	    ll_adv->own_addr_type != BT_ADDR_LE_RANDOM_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    fb96:	436e      	muls	r6, r5
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    fb98:	324e      	adds	r2, #78	; 0x4e
    fb9a:	7812      	ldrb	r2, [r2, #0]
	    ll_adv->own_addr_type != BT_ADDR_LE_RANDOM_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    fb9c:	1986      	adds	r6, r0, r6
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    fb9e:	42aa      	cmp	r2, r5
    fba0:	d104      	bne.n	fbac <ll_rl_rpa_update+0x118>
		last = radio_adv_data->last + 1;
    fba2:	3501      	adds	r5, #1
    fba4:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    fba6:	2d02      	cmp	r5, #2
    fba8:	d100      	bne.n	fbac <ll_rl_rpa_update+0x118>
			last = 0;
    fbaa:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
    fbac:	210f      	movs	r1, #15
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    fbae:	436b      	muls	r3, r5
    fbb0:	18c4      	adds	r4, r0, r3
	pdu->type = prev->type;
    fbb2:	7833      	ldrb	r3, [r6, #0]
    fbb4:	400b      	ands	r3, r1
    fbb6:	001a      	movs	r2, r3
    fbb8:	7823      	ldrb	r3, [r4, #0]
    fbba:	438b      	bics	r3, r1
	pdu->rfu = 0;
    fbbc:	4313      	orrs	r3, r2
    fbbe:	2210      	movs	r2, #16
    fbc0:	4393      	bics	r3, r2
    fbc2:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    fbc4:	2320      	movs	r3, #32
    fbc6:	7832      	ldrb	r2, [r6, #0]
    fbc8:	3111      	adds	r1, #17
    fbca:	401a      	ands	r2, r3
    fbcc:	7823      	ldrb	r3, [r4, #0]
    fbce:	438b      	bics	r3, r1
    fbd0:	4313      	orrs	r3, r2
    fbd2:	7023      	strb	r3, [r4, #0]
	} else {
		pdu->chan_sel = 0;
	}

	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr);
    fbd4:	7878      	ldrb	r0, [r7, #1]
    fbd6:	1cb9      	adds	r1, r7, #2
    fbd8:	0640      	lsls	r0, r0, #25
    fbda:	0fc0      	lsrs	r0, r0, #31
    fbdc:	f7ff fe16 	bl	f80c <ll_rl_find>
	LL_ASSERT(idx >= 0);
    fbe0:	2800      	cmp	r0, #0
    fbe2:	da0c      	bge.n	fbfe <ll_rl_rpa_update+0x16a>
    fbe4:	4b12      	ldr	r3, [pc, #72]	; (fc30 <ll_rl_rpa_update+0x19c>)
    fbe6:	4a13      	ldr	r2, [pc, #76]	; (fc34 <ll_rl_rpa_update+0x1a0>)
    fbe8:	9301      	str	r3, [sp, #4]
    fbea:	4b13      	ldr	r3, [pc, #76]	; (fc38 <ll_rl_rpa_update+0x1a4>)
    fbec:	4913      	ldr	r1, [pc, #76]	; (fc3c <ll_rl_rpa_update+0x1a8>)
    fbee:	9300      	str	r3, [sp, #0]
    fbf0:	4815      	ldr	r0, [pc, #84]	; (fc48 <ll_rl_rpa_update+0x1b4>)
    fbf2:	4b16      	ldr	r3, [pc, #88]	; (fc4c <ll_rl_rpa_update+0x1b8>)
    fbf4:	f7f1 fe4e 	bl	1894 <printk>
    fbf8:	b662      	cpsie	i
    fbfa:	2004      	movs	r0, #4
    fbfc:	df02      	svc	2
	ll_rl_pdu_adv_update(idx, pdu);
    fbfe:	0021      	movs	r1, r4
    fc00:	f7ff fedc 	bl	f9bc <ll_rl_pdu_adv_update>

	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
    fc04:	0031      	movs	r1, r6
    fc06:	0020      	movs	r0, r4
    fc08:	7872      	ldrb	r2, [r6, #1]
    fc0a:	3108      	adds	r1, #8
    fc0c:	3a06      	subs	r2, #6
    fc0e:	3008      	adds	r0, #8
    fc10:	f7f1 f81d 	bl	c4e <memcpy>
	       prev->len - BDADDR_SIZE);
	pdu->len = prev->len;
    fc14:	7873      	ldrb	r3, [r6, #1]
    fc16:	7063      	strb	r3, [r4, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    fc18:	9b04      	ldr	r3, [sp, #16]
    fc1a:	701d      	strb	r5, [r3, #0]
		if (radio_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
    fc1c:	b007      	add	sp, #28
    fc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc20:	20001be8 	.word	0x20001be8
    fc24:	20001ce0 	.word	0x20001ce0
    fc28:	200018c9 	.word	0x200018c9
    fc2c:	200017d6 	.word	0x200017d6
    fc30:	0001241d 	.word	0x0001241d
    fc34:	0001246d 	.word	0x0001246d
    fc38:	000124a8 	.word	0x000124a8
    fc3c:	000123e3 	.word	0x000123e3
    fc40:	000142d6 	.word	0x000142d6
    fc44:	00014d64 	.word	0x00014d64
    fc48:	000142fc 	.word	0x000142fc
    fc4c:	00014d54 	.word	0x00014d54

0000fc50 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
    fc50:	b510      	push	{r4, lr}
	ll_rl_rpa_update(true);
    fc52:	2001      	movs	r0, #1
    fc54:	f7ff ff1e 	bl	fa94 <ll_rl_rpa_update>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
    fc58:	4b03      	ldr	r3, [pc, #12]	; (fc68 <rpa_timeout+0x18>)
    fc5a:	4904      	ldr	r1, [pc, #16]	; (fc6c <rpa_timeout+0x1c>)
    fc5c:	681a      	ldr	r2, [r3, #0]
    fc5e:	4804      	ldr	r0, [pc, #16]	; (fc70 <rpa_timeout+0x20>)
    fc60:	f002 f956 	bl	11f10 <k_delayed_work_submit_to_queue>
}
    fc64:	bd10      	pop	{r4, pc}
    fc66:	46c0      	nop			; (mov r8, r8)
    fc68:	20001ce0 	.word	0x20001ce0
    fc6c:	20001c58 	.word	0x20001c58
    fc70:	20001cf8 	.word	0x20001cf8

0000fc74 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
}
    fc74:	2008      	movs	r0, #8
    fc76:	4770      	bx	lr

0000fc78 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
    fc78:	b570      	push	{r4, r5, r6, lr}
	if (!rl_access_check(false)) {
    fc7a:	f7ff fc77 	bl	f56c <rl_access_check.constprop.1>
    fc7e:	0003      	movs	r3, r0
		return BT_HCI_ERR_CMD_DISALLOWED;
    fc80:	200c      	movs	r0, #12
	return CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
}

u32_t ll_rl_clear(void)
{
	if (!rl_access_check(false)) {
    fc82:	2b00      	cmp	r3, #0
    fc84:	d00e      	beq.n	fca4 <ll_rl_clear+0x2c>
    fc86:	2300      	movs	r3, #0
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
    fc88:	2524      	movs	r5, #36	; 0x24
    fc8a:	2401      	movs	r4, #1
    fc8c:	4906      	ldr	r1, [pc, #24]	; (fca8 <ll_rl_clear+0x30>)
    fc8e:	0028      	movs	r0, r5
    fc90:	4358      	muls	r0, r3
    fc92:	5c42      	ldrb	r2, [r0, r1]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    fc94:	3301      	adds	r3, #1
		rl[i].taken = 0;
    fc96:	43a2      	bics	r2, r4
    fc98:	5442      	strb	r2, [r0, r1]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    fc9a:	2b08      	cmp	r3, #8
    fc9c:	d1f7      	bne.n	fc8e <ll_rl_clear+0x16>
		rl[i].taken = 0;
	}

	peer_irk_count = 0;
    fc9e:	2000      	movs	r0, #0
    fca0:	4b02      	ldr	r3, [pc, #8]	; (fcac <ll_rl_clear+0x34>)
    fca2:	7018      	strb	r0, [r3, #0]
	}

	rl_clear();

	return 0;
}
    fca4:	bd70      	pop	{r4, r5, r6, pc}
    fca6:	46c0      	nop			; (mov r8, r8)
    fca8:	200018c9 	.word	0x200018c9
    fcac:	2000185e 	.word	0x2000185e

0000fcb0 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
    fcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcb2:	b085      	sub	sp, #20
    fcb4:	9000      	str	r0, [sp, #0]
    fcb6:	9102      	str	r1, [sp, #8]
    fcb8:	9203      	str	r2, [sp, #12]
	int i, j;

	if (!rl_access_check(false)) {
    fcba:	f7ff fc57 	bl	f56c <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fcbe:	240c      	movs	r4, #12
u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
	int i, j;

	if (!rl_access_check(false)) {
    fcc0:	2800      	cmp	r0, #0
    fcc2:	d100      	bne.n	fcc6 <ll_rl_add+0x16>
    fcc4:	e085      	b.n	fdd2 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val);
    fcc6:	9b00      	ldr	r3, [sp, #0]
	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
    fcc8:	3406      	adds	r4, #6

	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val);
    fcca:	3301      	adds	r3, #1
    fccc:	9301      	str	r3, [sp, #4]
    fcce:	9b00      	ldr	r3, [sp, #0]
    fcd0:	9901      	ldr	r1, [sp, #4]
    fcd2:	7818      	ldrb	r0, [r3, #0]
    fcd4:	f7ff fd9a 	bl	f80c <ll_rl_find>
	if (i >= 0) {
    fcd8:	2800      	cmp	r0, #0
    fcda:	da7a      	bge.n	fdd2 <ll_rl_add+0x122>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (i == -RL_IDX_NONE) {
    fcdc:	0003      	movs	r3, r0
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    fcde:	3c0b      	subs	r4, #11
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (i == -RL_IDX_NONE) {
    fce0:	330f      	adds	r3, #15
    fce2:	d076      	beq.n	fdd2 <ll_rl_add+0x122>
	}

	/* Device not found but empty slot found */
	i = -i;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    fce4:	2624      	movs	r6, #36	; 0x24
	} else if (i == -RL_IDX_NONE) {
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
	}

	/* Device not found but empty slot found */
	i = -i;
    fce6:	4247      	negs	r7, r0

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    fce8:	437e      	muls	r6, r7
    fcea:	4d3b      	ldr	r5, [pc, #236]	; (fdd8 <ll_rl_add+0x128>)
    fcec:	2206      	movs	r2, #6
    fcee:	19ab      	adds	r3, r5, r6
    fcf0:	1c98      	adds	r0, r3, #2
    fcf2:	9901      	ldr	r1, [sp, #4]
    fcf4:	f7f0 ffab 	bl	c4e <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
    fcf8:	2201      	movs	r2, #1
    fcfa:	2102      	movs	r1, #2
    fcfc:	9b00      	ldr	r3, [sp, #0]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    fcfe:	9802      	ldr	r0, [sp, #8]

	/* Device not found but empty slot found */
	i = -i;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
	rl[i].id_addr_type = id_addr->type & 0x1;
    fd00:	781b      	ldrb	r3, [r3, #0]
    fd02:	4013      	ands	r3, r2
    fd04:	005a      	lsls	r2, r3, #1
    fd06:	19ab      	adds	r3, r5, r6
    fd08:	785b      	ldrb	r3, [r3, #1]
    fd0a:	438b      	bics	r3, r1
    fd0c:	4313      	orrs	r3, r2
    fd0e:	19aa      	adds	r2, r5, r6
    fd10:	7053      	strb	r3, [r2, #1]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    fd12:	310e      	adds	r1, #14
    fd14:	f7f7 fdfc 	bl	7910 <mem_nz>
    fd18:	2301      	movs	r3, #1
    fd1a:	2204      	movs	r2, #4
    fd1c:	4018      	ands	r0, r3
    fd1e:	0083      	lsls	r3, r0, #2
    fd20:	5d70      	ldrb	r0, [r6, r5]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    fd22:	2110      	movs	r1, #16
	/* Device not found but empty slot found */
	i = -i;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
	rl[i].id_addr_type = id_addr->type & 0x1;
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    fd24:	4390      	bics	r0, r2
    fd26:	4318      	orrs	r0, r3
    fd28:	5570      	strb	r0, [r6, r5]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    fd2a:	9803      	ldr	r0, [sp, #12]
    fd2c:	f7f7 fdf0 	bl	7910 <mem_nz>
    fd30:	2301      	movs	r3, #1
    fd32:	2240      	movs	r2, #64	; 0x40
    fd34:	4003      	ands	r3, r0
    fd36:	0198      	lsls	r0, r3, #6
    fd38:	5d73      	ldrb	r3, [r6, r5]
    fd3a:	4393      	bics	r3, r2
    fd3c:	4303      	orrs	r3, r0
    fd3e:	5573      	strb	r3, [r6, r5]
	if (rl[i].pirk) {
    fd40:	075a      	lsls	r2, r3, #29
    fd42:	d512      	bpl.n	fd6a <ll_rl_add+0xba>
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
    fd44:	2138      	movs	r1, #56	; 0x38
    fd46:	4a25      	ldr	r2, [pc, #148]	; (fddc <ll_rl_add+0x12c>)
    fd48:	438b      	bics	r3, r1
    fd4a:	7810      	ldrb	r0, [r2, #0]
		peer_irk_rl_ids[peer_irk_count] = i;
		memcpy(peer_irks[peer_irk_count++], pirk, 16);
    fd4c:	9902      	ldr	r1, [sp, #8]
	rl[i].id_addr_type = id_addr->type & 0x1;
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
	if (rl[i].pirk) {
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
    fd4e:	4004      	ands	r4, r0
    fd50:	00e4      	lsls	r4, r4, #3
    fd52:	4323      	orrs	r3, r4
    fd54:	5573      	strb	r3, [r6, r5]
		peer_irk_rl_ids[peer_irk_count] = i;
    fd56:	4b22      	ldr	r3, [pc, #136]	; (fde0 <ll_rl_add+0x130>)
    fd58:	541f      	strb	r7, [r3, r0]
		memcpy(peer_irks[peer_irk_count++], pirk, 16);
    fd5a:	1c43      	adds	r3, r0, #1
    fd5c:	7013      	strb	r3, [r2, #0]
    fd5e:	4b21      	ldr	r3, [pc, #132]	; (fde4 <ll_rl_add+0x134>)
    fd60:	0100      	lsls	r0, r0, #4
    fd62:	1818      	adds	r0, r3, r0
    fd64:	2210      	movs	r2, #16
    fd66:	f7f0 ff72 	bl	c4e <memcpy>
	}
	if (rl[i].lirk) {
    fd6a:	2024      	movs	r0, #36	; 0x24
    fd6c:	4378      	muls	r0, r7
    fd6e:	4e1a      	ldr	r6, [pc, #104]	; (fdd8 <ll_rl_add+0x128>)
    fd70:	5d83      	ldrb	r3, [r0, r6]
    fd72:	065b      	lsls	r3, r3, #25
    fd74:	d505      	bpl.n	fd82 <ll_rl_add+0xd2>
		memcpy(rl[i].local_irk, lirk, 16);
    fd76:	3008      	adds	r0, #8
    fd78:	1830      	adds	r0, r6, r0
    fd7a:	2210      	movs	r2, #16
    fd7c:	9903      	ldr	r1, [sp, #12]
    fd7e:	f7f0 ff66 	bl	c4e <memcpy>
	}
	rl[i].rpas_ready = 0;
    fd82:	2424      	movs	r4, #36	; 0x24
	/* Default to Network Privacy */
	rl[i].dev = 0;
    fd84:	237d      	movs	r3, #125	; 0x7d
		memcpy(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
		memcpy(rl[i].local_irk, lirk, 16);
	}
	rl[i].rpas_ready = 0;
    fd86:	437c      	muls	r4, r7
    fd88:	5d2a      	ldrb	r2, [r5, r4]
	/* Default to Network Privacy */
	rl[i].dev = 0;
	/* Add reference to  a whitelist entry */
	j = wl_peers_find(id_addr->type, id_addr->a.val);
    fd8a:	9901      	ldr	r1, [sp, #4]
	if (rl[i].lirk) {
		memcpy(rl[i].local_irk, lirk, 16);
	}
	rl[i].rpas_ready = 0;
	/* Default to Network Privacy */
	rl[i].dev = 0;
    fd8c:	4013      	ands	r3, r2
    fd8e:	552b      	strb	r3, [r5, r4]
	/* Add reference to  a whitelist entry */
	j = wl_peers_find(id_addr->type, id_addr->a.val);
    fd90:	9b00      	ldr	r3, [sp, #0]
    fd92:	192d      	adds	r5, r5, r4
    fd94:	7818      	ldrb	r0, [r3, #0]
    fd96:	f7ff fb95 	bl	f4c4 <wl_peers_find>
	if (j >= 0) {
    fd9a:	2800      	cmp	r0, #0
    fd9c:	db0e      	blt.n	fdbc <ll_rl_add+0x10c>
		wl_peers[j].rl_idx = i;
    fd9e:	2307      	movs	r3, #7
    fda0:	241e      	movs	r4, #30
    fda2:	4358      	muls	r0, r3
    fda4:	4910      	ldr	r1, [pc, #64]	; (fde8 <ll_rl_add+0x138>)
    fda6:	3308      	adds	r3, #8
    fda8:	403b      	ands	r3, r7
    fdaa:	005a      	lsls	r2, r3, #1
    fdac:	5c43      	ldrb	r3, [r0, r1]
    fdae:	43a3      	bics	r3, r4
    fdb0:	4313      	orrs	r3, r2
		rl[i].wl = 1;
    fdb2:	2201      	movs	r2, #1
	/* Default to Network Privacy */
	rl[i].dev = 0;
	/* Add reference to  a whitelist entry */
	j = wl_peers_find(id_addr->type, id_addr->a.val);
	if (j >= 0) {
		wl_peers[j].rl_idx = i;
    fdb4:	5443      	strb	r3, [r0, r1]
		rl[i].wl = 1;
    fdb6:	786b      	ldrb	r3, [r5, #1]
    fdb8:	4313      	orrs	r3, r2
    fdba:	e002      	b.n	fdc2 <ll_rl_add+0x112>
	} else {
		rl[i].wl = 0;
    fdbc:	2201      	movs	r2, #1
    fdbe:	786b      	ldrb	r3, [r5, #1]
    fdc0:	4393      	bics	r3, r2
	}
	rl[i].taken = 1;
    fdc2:	2024      	movs	r0, #36	; 0x24
    fdc4:	2201      	movs	r2, #1

	return 0;
    fdc6:	2400      	movs	r4, #0
		wl_peers[j].rl_idx = i;
		rl[i].wl = 1;
	} else {
		rl[i].wl = 0;
	}
	rl[i].taken = 1;
    fdc8:	4378      	muls	r0, r7
	j = wl_peers_find(id_addr->type, id_addr->a.val);
	if (j >= 0) {
		wl_peers[j].rl_idx = i;
		rl[i].wl = 1;
	} else {
		rl[i].wl = 0;
    fdca:	706b      	strb	r3, [r5, #1]
	}
	rl[i].taken = 1;
    fdcc:	5c33      	ldrb	r3, [r6, r0]
    fdce:	4313      	orrs	r3, r2
    fdd0:	5433      	strb	r3, [r6, r0]

	return 0;
}
    fdd2:	0020      	movs	r0, r4
    fdd4:	b005      	add	sp, #20
    fdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdd8:	200018c9 	.word	0x200018c9
    fddc:	2000185e 	.word	0x2000185e
    fde0:	20001856 	.word	0x20001856
    fde4:	200017d6 	.word	0x200017d6
    fde8:	20001891 	.word	0x20001891

0000fdec <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
    fdec:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdee:	b085      	sub	sp, #20
    fdf0:	9002      	str	r0, [sp, #8]
	int i;

	if (!rl_access_check(false)) {
    fdf2:	f7ff fbbb 	bl	f56c <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fdf6:	230c      	movs	r3, #12

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
	int i;

	if (!rl_access_check(false)) {
    fdf8:	2800      	cmp	r0, #0
    fdfa:	d057      	beq.n	feac <ll_rl_remove+0xc0>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
    fdfc:	9b02      	ldr	r3, [sp, #8]
    fdfe:	3301      	adds	r3, #1
    fe00:	9303      	str	r3, [sp, #12]
    fe02:	9b02      	ldr	r3, [sp, #8]
    fe04:	9903      	ldr	r1, [sp, #12]
    fe06:	7818      	ldrb	r0, [r3, #0]
    fe08:	f7ff fd00 	bl	f80c <ll_rl_find>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fe0c:	2302      	movs	r3, #2
	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
    fe0e:	9001      	str	r0, [sp, #4]
	if (i >= 0) {
    fe10:	2800      	cmp	r0, #0
    fe12:	db4b      	blt.n	feac <ll_rl_remove+0xc0>
		int j, k;

		if (rl[i].pirk) {
    fe14:	2724      	movs	r7, #36	; 0x24
    fe16:	0003      	movs	r3, r0
    fe18:	437b      	muls	r3, r7
    fe1a:	4e26      	ldr	r6, [pc, #152]	; (feb4 <ll_rl_remove+0xc8>)
    fe1c:	5d9c      	ldrb	r4, [r3, r6]
    fe1e:	0763      	lsls	r3, r4, #29
    fe20:	d52d      	bpl.n	fe7e <ll_rl_remove+0x92>
			/* Swap with last item */
			int pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    fe22:	4b25      	ldr	r3, [pc, #148]	; (feb8 <ll_rl_remove+0xcc>)
    fe24:	781d      	ldrb	r5, [r3, #0]
    fe26:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
    fe28:	2d00      	cmp	r5, #0
    fe2a:	d024      	beq.n	fe76 <ll_rl_remove+0x8a>
	if (i >= 0) {
		int j, k;

		if (rl[i].pirk) {
			/* Swap with last item */
			int pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    fe2c:	06a4      	lsls	r4, r4, #26
    fe2e:	0f64      	lsrs	r4, r4, #29

			if (pj && pi != pj) {
    fe30:	42ac      	cmp	r4, r5
    fe32:	d020      	beq.n	fe76 <ll_rl_remove+0x8a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
    fe34:	4821      	ldr	r0, [pc, #132]	; (febc <ll_rl_remove+0xd0>)
    fe36:	0123      	lsls	r3, r4, #4
    fe38:	0129      	lsls	r1, r5, #4
    fe3a:	1841      	adds	r1, r0, r1
    fe3c:	2210      	movs	r2, #16
    fe3e:	18c0      	adds	r0, r0, r3
    fe40:	f7f0 ff05 	bl	c4e <memcpy>
				for (k = 0;
    fe44:	2300      	movs	r3, #0
				     k < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
    fe46:	46bc      	mov	ip, r7
    fe48:	4661      	mov	r1, ip
    fe4a:	4359      	muls	r1, r3
    fe4c:	5d8a      	ldrb	r2, [r1, r6]
    fe4e:	1c17      	adds	r7, r2, #0
    fe50:	07d0      	lsls	r0, r2, #31
    fe52:	d50d      	bpl.n	fe70 <ll_rl_remove+0x84>
    fe54:	0750      	lsls	r0, r2, #29
    fe56:	d50b      	bpl.n	fe70 <ll_rl_remove+0x84>
					    rl[k].pirk_idx == pj) {
    fe58:	0692      	lsls	r2, r2, #26
				memcpy(peer_irks[pi], peer_irks[pj], 16);
				for (k = 0;
				     k < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
    fe5a:	0f52      	lsrs	r2, r2, #29
    fe5c:	4295      	cmp	r5, r2
    fe5e:	d107      	bne.n	fe70 <ll_rl_remove+0x84>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
    fe60:	2038      	movs	r0, #56	; 0x38
    fe62:	00e2      	lsls	r2, r4, #3
    fe64:	4387      	bics	r7, r0
    fe66:	433a      	orrs	r2, r7
    fe68:	558a      	strb	r2, [r1, r6]
						peer_irk_rl_ids[pi] = k;
    fe6a:	4a15      	ldr	r2, [pc, #84]	; (fec0 <ll_rl_remove+0xd4>)
    fe6c:	5513      	strb	r3, [r2, r4]
						break;
    fe6e:	e002      	b.n	fe76 <ll_rl_remove+0x8a>

			if (pj && pi != pj) {
				memcpy(peer_irks[pi], peer_irks[pj], 16);
				for (k = 0;
				     k < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
				     k++) {
    fe70:	3301      	adds	r3, #1
			/* Swap with last item */
			int pi = rl[i].pirk_idx, pj = peer_irk_count - 1;

			if (pj && pi != pj) {
				memcpy(peer_irks[pi], peer_irks[pj], 16);
				for (k = 0;
    fe72:	2b08      	cmp	r3, #8
    fe74:	d1e8      	bne.n	fe48 <ll_rl_remove+0x5c>
						peer_irk_rl_ids[pi] = k;
						break;
					}
				}
			}
			peer_irk_count--;
    fe76:	4a10      	ldr	r2, [pc, #64]	; (feb8 <ll_rl_remove+0xcc>)
    fe78:	7813      	ldrb	r3, [r2, #0]
    fe7a:	3b01      	subs	r3, #1
    fe7c:	7013      	strb	r3, [r2, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_peers_find(id_addr->type, id_addr->a.val);
    fe7e:	9b02      	ldr	r3, [sp, #8]
    fe80:	9903      	ldr	r1, [sp, #12]
    fe82:	7818      	ldrb	r0, [r3, #0]
    fe84:	f7ff fb1e 	bl	f4c4 <wl_peers_find>
		if (j >= 0) {
    fe88:	2800      	cmp	r0, #0
    fe8a:	db06      	blt.n	fe9a <ll_rl_remove+0xae>
			wl_peers[j].rl_idx = RL_IDX_NONE;
    fe8c:	2307      	movs	r3, #7
    fe8e:	211e      	movs	r1, #30
    fe90:	4358      	muls	r0, r3
    fe92:	4a0c      	ldr	r2, [pc, #48]	; (fec4 <ll_rl_remove+0xd8>)
    fe94:	5c83      	ldrb	r3, [r0, r2]
    fe96:	430b      	orrs	r3, r1
    fe98:	5483      	strb	r3, [r0, r2]
		}
		rl[i].taken = 0;
    fe9a:	2324      	movs	r3, #36	; 0x24
    fe9c:	2001      	movs	r0, #1
    fe9e:	9a01      	ldr	r2, [sp, #4]
    fea0:	4904      	ldr	r1, [pc, #16]	; (feb4 <ll_rl_remove+0xc8>)
    fea2:	4353      	muls	r3, r2
    fea4:	5c5a      	ldrb	r2, [r3, r1]
    fea6:	4382      	bics	r2, r0
    fea8:	545a      	strb	r2, [r3, r1]
		return 0;
    feaa:	2300      	movs	r3, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
    feac:	0018      	movs	r0, r3
    feae:	b005      	add	sp, #20
    feb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    feb2:	46c0      	nop			; (mov r8, r8)
    feb4:	200018c9 	.word	0x200018c9
    feb8:	2000185e 	.word	0x2000185e
    febc:	200017d6 	.word	0x200017d6
    fec0:	20001856 	.word	0x20001856
    fec4:	20001891 	.word	0x20001891

0000fec8 <ll_rl_prpa_get>:

u32_t ll_rl_prpa_get(bt_addr_le_t *id_addr, bt_addr_t *prpa)
{
    fec8:	b510      	push	{r4, lr}
    feca:	000c      	movs	r4, r1
	int i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
    fecc:	1c41      	adds	r1, r0, #1
    fece:	7800      	ldrb	r0, [r0, #0]
    fed0:	f7ff fc9c 	bl	f80c <ll_rl_find>
	if (i >= 0) {
		bt_addr_copy(prpa, &rl[i].peer_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fed4:	2302      	movs	r3, #2
{
	int i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
    fed6:	2800      	cmp	r0, #0
    fed8:	db09      	blt.n	feee <ll_rl_prpa_get+0x26>
		bt_addr_copy(prpa, &rl[i].peer_rpa);
    feda:	3322      	adds	r3, #34	; 0x22
    fedc:	4358      	muls	r0, r3
    fede:	4905      	ldr	r1, [pc, #20]	; (fef4 <ll_rl_prpa_get+0x2c>)
    fee0:	3018      	adds	r0, #24
    fee2:	1809      	adds	r1, r1, r0
    fee4:	2206      	movs	r2, #6
    fee6:	0020      	movs	r0, r4
    fee8:	f7f0 feb1 	bl	c4e <memcpy>
		return 0;
    feec:	2300      	movs	r3, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;

}
    feee:	0018      	movs	r0, r3
    fef0:	bd10      	pop	{r4, pc}
    fef2:	46c0      	nop			; (mov r8, r8)
    fef4:	200018c9 	.word	0x200018c9

0000fef8 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
    fef8:	b510      	push	{r4, lr}
    fefa:	000c      	movs	r4, r1
	int i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
    fefc:	1c41      	adds	r1, r0, #1
    fefe:	7800      	ldrb	r0, [r0, #0]
    ff00:	f7ff fc84 	bl	f80c <ll_rl_find>
	if (i >= 0) {
		bt_addr_copy(lrpa, &rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ff04:	2302      	movs	r3, #2
{
	int i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
    ff06:	2800      	cmp	r0, #0
    ff08:	db09      	blt.n	ff1e <ll_rl_lrpa_get+0x26>
		bt_addr_copy(lrpa, &rl[i].local_rpa);
    ff0a:	3322      	adds	r3, #34	; 0x22
    ff0c:	4358      	muls	r0, r3
    ff0e:	4905      	ldr	r1, [pc, #20]	; (ff24 <ll_rl_lrpa_get+0x2c>)
    ff10:	2206      	movs	r2, #6
    ff12:	1809      	adds	r1, r1, r0
    ff14:	311e      	adds	r1, #30
    ff16:	0020      	movs	r0, r4
    ff18:	f7f0 fe99 	bl	c4e <memcpy>
		return 0;
    ff1c:	2300      	movs	r3, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
    ff1e:	0018      	movs	r0, r3
    ff20:	bd10      	pop	{r4, pc}
    ff22:	46c0      	nop			; (mov r8, r8)
    ff24:	200018c9 	.word	0x200018c9

0000ff28 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
    ff28:	b510      	push	{r4, lr}
    ff2a:	0004      	movs	r4, r0
	if (!rl_access_check(false)) {
    ff2c:	f7ff fb1e 	bl	f56c <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ff30:	230c      	movs	r3, #12
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

u32_t ll_rl_enable(u8_t enable)
{
	if (!rl_access_check(false)) {
    ff32:	2800      	cmp	r0, #0
    ff34:	d00c      	beq.n	ff50 <ll_rl_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
    ff36:	2c00      	cmp	r4, #0
    ff38:	d005      	beq.n	ff46 <ll_rl_enable+0x1e>
    ff3a:	2c01      	cmp	r4, #1
    ff3c:	d107      	bne.n	ff4e <ll_rl_enable+0x26>
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
    ff3e:	4b05      	ldr	r3, [pc, #20]	; (ff54 <ll_rl_enable+0x2c>)
    ff40:	701c      	strb	r4, [r3, #0]
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return 0;
    ff42:	2300      	movs	r3, #0
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
    ff44:	e004      	b.n	ff50 <ll_rl_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
    ff46:	4b03      	ldr	r3, [pc, #12]	; (ff54 <ll_rl_enable+0x2c>)
    ff48:	701c      	strb	r4, [r3, #0]
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return 0;
    ff4a:	0023      	movs	r3, r4
	}

	switch (enable) {
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
    ff4c:	e000      	b.n	ff50 <ll_rl_enable+0x28>
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
    ff4e:	2312      	movs	r3, #18
	}

	return 0;
}
    ff50:	0018      	movs	r0, r3
    ff52:	bd10      	pop	{r4, pc}
    ff54:	200019e9 	.word	0x200019e9

0000ff58 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
    ff58:	23fa      	movs	r3, #250	; 0xfa
    ff5a:	009b      	lsls	r3, r3, #2
    ff5c:	4358      	muls	r0, r3
    ff5e:	4b01      	ldr	r3, [pc, #4]	; (ff64 <ll_rl_timeout_set+0xc>)
    ff60:	6018      	str	r0, [r3, #0]
}
    ff62:	4770      	bx	lr
    ff64:	20001ce0 	.word	0x20001ce0

0000ff68 <ll_priv_mode_set>:

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
    ff68:	b570      	push	{r4, r5, r6, lr}
    ff6a:	0005      	movs	r5, r0
    ff6c:	000c      	movs	r4, r1
	int i;

	if (!rl_access_check(false)) {
    ff6e:	f7ff fafd 	bl	f56c <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ff72:	230c      	movs	r3, #12

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
	int i;

	if (!rl_access_check(false)) {
    ff74:	2800      	cmp	r0, #0
    ff76:	d01c      	beq.n	ffb2 <ll_priv_mode_set+0x4a>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
    ff78:	1c69      	adds	r1, r5, #1
    ff7a:	7828      	ldrb	r0, [r5, #0]
    ff7c:	f7ff fc46 	bl	f80c <ll_rl_find>
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ff80:	2302      	movs	r3, #2
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
    ff82:	2800      	cmp	r0, #0
    ff84:	db15      	blt.n	ffb2 <ll_priv_mode_set+0x4a>
		switch (mode) {
    ff86:	2c00      	cmp	r4, #0
    ff88:	d009      	beq.n	ff9e <ll_priv_mode_set+0x36>
    ff8a:	2c01      	cmp	r4, #1
    ff8c:	d110      	bne.n	ffb0 <ll_priv_mode_set+0x48>
		case BT_HCI_LE_PRIVACY_MODE_NETWORK:
			rl[i].dev = 0;
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
    ff8e:	2324      	movs	r3, #36	; 0x24
    ff90:	2180      	movs	r1, #128	; 0x80
    ff92:	4358      	muls	r0, r3
    ff94:	4a08      	ldr	r2, [pc, #32]	; (ffb8 <ll_priv_mode_set+0x50>)
    ff96:	4249      	negs	r1, r1
    ff98:	5c83      	ldrb	r3, [r0, r2]
    ff9a:	430b      	orrs	r3, r1
    ff9c:	e005      	b.n	ffaa <ll_priv_mode_set+0x42>
	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		switch (mode) {
		case BT_HCI_LE_PRIVACY_MODE_NETWORK:
			rl[i].dev = 0;
    ff9e:	2324      	movs	r3, #36	; 0x24
    ffa0:	4358      	muls	r0, r3
    ffa2:	4a05      	ldr	r2, [pc, #20]	; (ffb8 <ll_priv_mode_set+0x50>)
    ffa4:	335b      	adds	r3, #91	; 0x5b
    ffa6:	5c81      	ldrb	r1, [r0, r2]
    ffa8:	400b      	ands	r3, r1
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
    ffaa:	5483      	strb	r3, [r0, r2]
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    ffac:	2302      	movs	r3, #2
		case BT_HCI_LE_PRIVACY_MODE_NETWORK:
			rl[i].dev = 0;
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
    ffae:	e000      	b.n	ffb2 <ll_priv_mode_set+0x4a>
		default:
			return BT_HCI_ERR_INVALID_PARAM;
    ffb0:	2312      	movs	r3, #18
		}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
    ffb2:	0018      	movs	r0, r3
    ffb4:	bd70      	pop	{r4, r5, r6, pc}
    ffb6:	46c0      	nop			; (mov r8, r8)
    ffb8:	200018c9 	.word	0x200018c9

0000ffbc <ll_filter_reset>:

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    ffbc:	2300      	movs	r3, #0
}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
    ffbe:	b570      	push	{r4, r5, r6, lr}
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
    ffc0:	2607      	movs	r6, #7
    ffc2:	2501      	movs	r5, #1

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    ffc4:	4a17      	ldr	r2, [pc, #92]	; (10024 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x25>)
}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
    ffc6:	0001      	movs	r1, r0
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
    ffc8:	4817      	ldr	r0, [pc, #92]	; (10028 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x29>)

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    ffca:	7013      	strb	r3, [r2, #0]
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
    ffcc:	0034      	movs	r4, r6
    ffce:	435c      	muls	r4, r3
    ffd0:	5c22      	ldrb	r2, [r4, r0]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
    ffd2:	3301      	adds	r3, #1
		wl_peers[i].taken = 0;
    ffd4:	43aa      	bics	r2, r5
    ffd6:	5422      	strb	r2, [r4, r0]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
    ffd8:	2b08      	cmp	r3, #8
    ffda:	d1f7      	bne.n	ffcc <ll_filter_reset+0x10>
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
    ffdc:	2300      	movs	r3, #0
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
    ffde:	2401      	movs	r4, #1
    ffe0:	4264      	negs	r4, r4
    ffe2:	17e5      	asrs	r5, r4, #31
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
    ffe4:	4a11      	ldr	r2, [pc, #68]	; (1002c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2d>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    ffe6:	4812      	ldr	r0, [pc, #72]	; (10030 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x31>)
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
    ffe8:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    ffea:	4a12      	ldr	r2, [pc, #72]	; (10034 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x35>)
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
    ffec:	2624      	movs	r6, #36	; 0x24

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    ffee:	6010      	str	r0, [r2, #0]
	rpa_last_ms = -1;
    fff0:	4a11      	ldr	r2, [pc, #68]	; (10038 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x39>)
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
    fff2:	4812      	ldr	r0, [pc, #72]	; (1003c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3d>)
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
    fff4:	6014      	str	r4, [r2, #0]
    fff6:	6055      	str	r5, [r2, #4]
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
    fff8:	2501      	movs	r5, #1
    fffa:	0034      	movs	r4, r6
    fffc:	435c      	muls	r4, r3
    fffe:	5c22      	ldrb	r2, [r4, r0]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   10000:	3301      	adds	r3, #1
		rl[i].taken = 0;
   10002:	43aa      	bics	r2, r5
   10004:	5422      	strb	r2, [r4, r0]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   10006:	2b08      	cmp	r3, #8
   10008:	d1f7      	bne.n	fffa <ll_filter_reset+0x3e>
		rl[i].taken = 0;
	}

	peer_irk_count = 0;
   1000a:	2200      	movs	r2, #0
   1000c:	4b0c      	ldr	r3, [pc, #48]	; (10040 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x41>)
   1000e:	480d      	ldr	r0, [pc, #52]	; (10044 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x45>)
   10010:	701a      	strb	r2, [r3, #0]

	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
	rl_clear();
	if (init) {
   10012:	4291      	cmp	r1, r2
   10014:	d003      	beq.n	1001e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1f>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   10016:	490c      	ldr	r1, [pc, #48]	; (10048 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x49>)
   10018:	f001 ff2c 	bl	11e74 <k_delayed_work_init>
   1001c:	e001      	b.n	10022 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x23>
	} else {
		k_delayed_work_cancel(&rpa_work);
   1001e:	f001 ff3f 	bl	11ea0 <k_delayed_work_cancel>
	}
#else
	filter_clear(&wl);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

}
   10022:	bd70      	pop	{r4, r5, r6, pc}
   10024:	20001bf0 	.word	0x20001bf0
   10028:	20001891 	.word	0x20001891
   1002c:	200019e9 	.word	0x200019e9
   10030:	000dbba0 	.word	0x000dbba0
   10034:	20001ce0 	.word	0x20001ce0
   10038:	20001be8 	.word	0x20001be8
   1003c:	200018c9 	.word	0x200018c9
   10040:	2000185e 	.word	0x2000185e
   10044:	20001c58 	.word	0x20001c58
   10048:	0000fc51 	.word	0x0000fc51

0001004c <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1004c:	4800      	ldr	r0, [pc, #0]	; (10050 <ll_adv_set_get+0x4>)
   1004e:	4770      	bx	lr
   10050:	200019ec 	.word	0x200019ec

00010054 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   10054:	b5f0      	push	{r4, r5, r6, r7, lr}
   10056:	b08d      	sub	sp, #52	; 0x34
   10058:	001e      	movs	r6, r3
   1005a:	ab12      	add	r3, sp, #72	; 0x48
   1005c:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1005e:	4c83      	ldr	r4, [pc, #524]	; (1026c <ll_adv_params_set+0x218>)
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   10060:	9302      	str	r3, [sp, #8]
   10062:	ab13      	add	r3, sp, #76	; 0x4c
   10064:	781b      	ldrb	r3, [r3, #0]
   10066:	9205      	str	r2, [sp, #20]
   10068:	9303      	str	r3, [sp, #12]
   1006a:	ab15      	add	r3, sp, #84	; 0x54
   1006c:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1006e:	2206      	movs	r2, #6
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   10070:	9306      	str	r3, [sp, #24]
   10072:	ab16      	add	r3, sp, #88	; 0x58
   10074:	781b      	ldrb	r3, [r3, #0]
   10076:	000f      	movs	r7, r1
   10078:	9307      	str	r3, [sp, #28]
   1007a:	ab18      	add	r3, sp, #96	; 0x60
   1007c:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1007e:	0021      	movs	r1, r4
   10080:	a80a      	add	r0, sp, #40	; 0x28
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   10082:	9304      	str	r3, [sp, #16]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   10084:	f7f0 fde3 	bl	c4e <memcpy>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   10088:	f7fe fafc 	bl	e684 <radio_adv_is_enabled>
   1008c:	9001      	str	r0, [sp, #4]
   1008e:	2800      	cmp	r0, #0
   10090:	d000      	beq.n	10094 <ll_adv_params_set+0x40>
   10092:	e0e3      	b.n	1025c <ll_adv_params_set+0x208>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
   10094:	2107      	movs	r1, #7
   10096:	2501      	movs	r5, #1
   10098:	4a75      	ldr	r2, [pc, #468]	; (10270 <ll_adv_params_set+0x21c>)
   1009a:	7a13      	ldrb	r3, [r2, #8]
   1009c:	438b      	bics	r3, r1
   1009e:	432b      	orrs	r3, r5
   100a0:	7213      	strb	r3, [r2, #8]

	/* extended */
	if (adv_type > 0x04) {
   100a2:	2e04      	cmp	r6, #4
   100a4:	d91f      	bls.n	100e6 <ll_adv_params_set+0x92>
		/* legacy */
		if (evt_prop & BIT(4)) {
   100a6:	06fb      	lsls	r3, r7, #27
   100a8:	d50c      	bpl.n	100c4 <ll_adv_params_set+0x70>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   100aa:	ae09      	add	r6, sp, #36	; 0x24
   100ac:	0030      	movs	r0, r6
   100ae:	1da1      	adds	r1, r4, #6
   100b0:	2204      	movs	r2, #4
   100b2:	f7f0 fdcc 	bl	c4e <memcpy>

			adv_type = leg_adv_type[evt_prop & 0x03];
   100b6:	2303      	movs	r3, #3
   100b8:	403b      	ands	r3, r7
   100ba:	5cf6      	ldrb	r6, [r6, r3]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   100bc:	073b      	lsls	r3, r7, #28
   100be:	d512      	bpl.n	100e6 <ll_adv_params_set+0x92>
				adv_type = 0x01;
   100c0:	002e      	movs	r6, r5
   100c2:	e015      	b.n	100f0 <ll_adv_params_set+0x9c>
			}
		} else {
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
   100c4:	43fb      	mvns	r3, r7
   100c6:	079b      	lsls	r3, r3, #30
   100c8:	d100      	bne.n	100cc <ll_adv_params_set+0x78>
   100ca:	e0c9      	b.n	10260 <ll_adv_params_set+0x20c>
   100cc:	230c      	movs	r3, #12
   100ce:	403b      	ands	r3, r7
   100d0:	2b0c      	cmp	r3, #12
   100d2:	d100      	bne.n	100d6 <ll_adv_params_set+0x82>
   100d4:	e0c4      	b.n	10260 <ll_adv_params_set+0x20c>
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */

			ll_adv.phy_p = phy_p;
   100d6:	7a13      	ldrb	r3, [r2, #8]
   100d8:	9804      	ldr	r0, [sp, #16]
   100da:	438b      	bics	r3, r1
   100dc:	4008      	ands	r0, r1
   100de:	4303      	orrs	r3, r0
   100e0:	7213      	strb	r3, [r2, #8]
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   100e2:	2605      	movs	r6, #5
   100e4:	e001      	b.n	100ea <ll_adv_params_set+0x96>
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
   100e6:	2e01      	cmp	r6, #1
   100e8:	d002      	beq.n	100f0 <ll_adv_params_set+0x9c>
		ll_adv.interval = interval;
   100ea:	4b61      	ldr	r3, [pc, #388]	; (10270 <ll_adv_params_set+0x21c>)
   100ec:	9a05      	ldr	r2, [sp, #20]
   100ee:	e001      	b.n	100f4 <ll_adv_params_set+0xa0>
	} else {
		ll_adv.interval = 0;
   100f0:	2200      	movs	r2, #0
   100f2:	4b5f      	ldr	r3, [pc, #380]	; (10270 <ll_adv_params_set+0x21c>)
   100f4:	60da      	str	r2, [r3, #12]
	}
	ll_adv.chan_map = chan_map;
   100f6:	2207      	movs	r2, #7
   100f8:	4d5d      	ldr	r5, [pc, #372]	; (10270 <ll_adv_params_set+0x21c>)
   100fa:	9b06      	ldr	r3, [sp, #24]
   100fc:	7829      	ldrb	r1, [r5, #0]
   100fe:	4013      	ands	r3, r2
   10100:	4391      	bics	r1, r2
	ll_adv.filter_policy = filter_policy;
   10102:	430b      	orrs	r3, r1
   10104:	2118      	movs	r1, #24
   10106:	9807      	ldr	r0, [sp, #28]
   10108:	3a04      	subs	r2, #4
   1010a:	4010      	ands	r0, r2
   1010c:	00c2      	lsls	r2, r0, #3
   1010e:	438b      	bics	r3, r1
   10110:	4313      	orrs	r3, r2
   10112:	702b      	strb	r3, [r5, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   10114:	f7fe faaa 	bl	e66c <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10118:	0003      	movs	r3, r0
   1011a:	334f      	adds	r3, #79	; 0x4f
   1011c:	781c      	ldrb	r4, [r3, #0]
   1011e:	2327      	movs	r3, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
   10120:	210f      	movs	r1, #15
	ll_adv.chan_map = chan_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10122:	435c      	muls	r4, r3
	pdu->type = pdu_adv_type[adv_type];
   10124:	ab0a      	add	r3, sp, #40	; 0x28
   10126:	5d9b      	ldrb	r3, [r3, r6]
	ll_adv.chan_map = chan_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10128:	1904      	adds	r4, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   1012a:	400b      	ands	r3, r1
   1012c:	001a      	movs	r2, r3
   1012e:	7823      	ldrb	r3, [r4, #0]
   10130:	438b      	bics	r3, r1
	pdu->rfu = 0;
   10132:	4313      	orrs	r3, r2
   10134:	2210      	movs	r2, #16
   10136:	4393      	bics	r3, r2
   10138:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2) &&
   1013a:	4019      	ands	r1, r3
   1013c:	1892      	adds	r2, r2, r2
   1013e:	2901      	cmp	r1, #1
   10140:	d801      	bhi.n	10146 <ll_adv_params_set+0xf2>
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
   10142:	4313      	orrs	r3, r2
   10144:	e000      	b.n	10148 <ll_adv_params_set+0xf4>
	} else {
		pdu->chan_sel = 0;
   10146:	4393      	bics	r3, r2
   10148:	7023      	strb	r3, [r4, #0]
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   1014a:	2303      	movs	r3, #3
   1014c:	2130      	movs	r1, #48	; 0x30
   1014e:	9a02      	ldr	r2, [sp, #8]
   10150:	4013      	ands	r3, r2
   10152:	011a      	lsls	r2, r3, #4
   10154:	786b      	ldrb	r3, [r5, #1]
   10156:	438b      	bics	r3, r1
   10158:	4313      	orrs	r3, r2
   1015a:	706b      	strb	r3, [r5, #1]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1015c:	069a      	lsls	r2, r3, #26
   1015e:	d50c      	bpl.n	1017a <ll_adv_params_set+0x126>
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   10160:	2201      	movs	r2, #1
   10162:	9903      	ldr	r1, [sp, #12]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   10164:	1ca8      	adds	r0, r5, #2

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   10166:	400a      	ands	r2, r1
   10168:	2140      	movs	r1, #64	; 0x40
   1016a:	0192      	lsls	r2, r2, #6
   1016c:	438b      	bics	r3, r1
   1016e:	4313      	orrs	r3, r2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   10170:	9914      	ldr	r1, [sp, #80]	; 0x50
   10172:	2206      	movs	r2, #6

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   10174:	706b      	strb	r3, [r5, #1]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   10176:	f7f0 fd6a 	bl	c4e <memcpy>
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   1017a:	2101      	movs	r1, #1
   1017c:	2040      	movs	r0, #64	; 0x40
   1017e:	9d02      	ldr	r5, [sp, #8]
   10180:	7823      	ldrb	r3, [r4, #0]
   10182:	400d      	ands	r5, r1
   10184:	01aa      	lsls	r2, r5, #6
   10186:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
   10188:	4313      	orrs	r3, r2
   1018a:	227f      	movs	r2, #127	; 0x7f
   1018c:	4013      	ands	r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1018e:	3a70      	subs	r2, #112	; 0x70
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
   10190:	7023      	strb	r3, [r4, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   10192:	401a      	ands	r2, r3
   10194:	428a      	cmp	r2, r1
   10196:	d10b      	bne.n	101b0 <ll_adv_params_set+0x15c>
		pdu->rx_addr = direct_addr_type;
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   10198:	0020      	movs	r0, r4
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		pdu->rx_addr = direct_addr_type;
   1019a:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   1019c:	3008      	adds	r0, #8
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		pdu->rx_addr = direct_addr_type;
   1019e:	01d2      	lsls	r2, r2, #7
   101a0:	4313      	orrs	r3, r2
   101a2:	7023      	strb	r3, [r4, #0]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   101a4:	2206      	movs	r2, #6
   101a6:	9914      	ldr	r1, [sp, #80]	; 0x50
   101a8:	f7f0 fd51 	bl	c4e <memcpy>
		       BDADDR_SIZE);
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   101ac:	230c      	movs	r3, #12
   101ae:	e03a      	b.n	10226 <ll_adv_params_set+0x1d2>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   101b0:	2a07      	cmp	r2, #7
   101b2:	d134      	bne.n	1021e <ll_adv_params_set+0x1ca>
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;
   101b4:	01b8      	lsls	r0, r7, #6
   101b6:	70a0      	strb	r0, [r4, #2]

		/* Zero-init header flags */
		*(u8_t *)h = 0;
   101b8:	2000      	movs	r0, #0
		struct pdu_adv_payload_com_ext_adv *p;
		struct ext_adv_hdr *h;
		u8_t *ptr;
		u8_t len;

		p = (void *)&pdu->payload.adv_ext_ind;
   101ba:	1ca2      	adds	r2, r4, #2
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
   101bc:	1d23      	adds	r3, r4, #4
		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;

		/* Zero-init header flags */
		*(u8_t *)h = 0;
   101be:	70e0      	strb	r0, [r4, #3]

		/* AdvA flag */
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   101c0:	06b8      	lsls	r0, r7, #26
   101c2:	d408      	bmi.n	101d6 <ll_adv_params_set+0x182>
   101c4:	263f      	movs	r6, #63	; 0x3f
   101c6:	78a0      	ldrb	r0, [r4, #2]
   101c8:	43b0      	bics	r0, r6
   101ca:	d104      	bne.n	101d6 <ll_adv_params_set+0x182>
   101cc:	9804      	ldr	r0, [sp, #16]
   101ce:	2804      	cmp	r0, #4
   101d0:	d001      	beq.n	101d6 <ll_adv_params_set+0x182>
			/* TODO: optional on 1M */
			h->adv_addr = 1;
   101d2:	70e1      	strb	r1, [r4, #3]

			/* NOTE: AdvA is filled at enable */
			ptr += BDADDR_SIZE;
   101d4:	3306      	adds	r3, #6
		/* TODO: AuxPtr flag */

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
   101d6:	2040      	movs	r0, #64	; 0x40
   101d8:	4207      	tst	r7, r0
   101da:	d003      	beq.n	101e4 <ll_adv_params_set+0x190>
			h->tx_pwr = 1;
   101dc:	78e1      	ldrb	r1, [r4, #3]
			ptr++;
   101de:	3301      	adds	r3, #1

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
			h->tx_pwr = 1;
   101e0:	4301      	orrs	r1, r0
   101e2:	70e1      	strb	r1, [r4, #3]
			ptr++;
		}

		/* Calc primary PDU len */
		len = ptr - (u8_t *)p;
   101e4:	1a9a      	subs	r2, r3, r2
   101e6:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   101e8:	2a02      	cmp	r2, #2
   101ea:	d908      	bls.n	101fe <ll_adv_params_set+0x1aa>
				    ext_hdr_adi_adv_data) + sizeof(*h))) {
			p->ext_hdr_len = len -
   101ec:	263f      	movs	r6, #63	; 0x3f
   101ee:	1e51      	subs	r1, r2, #1
   101f0:	4031      	ands	r1, r6
   101f2:	0008      	movs	r0, r1
   101f4:	78a1      	ldrb	r1, [r4, #2]
   101f6:	43b1      	bics	r1, r6
   101f8:	4301      	orrs	r1, r0
   101fa:	70a1      	strb	r1, [r4, #2]
   101fc:	e000      	b.n	10200 <ll_adv_params_set+0x1ac>
				offsetof(struct pdu_adv_payload_com_ext_adv,
					 ext_hdr_adi_adv_data);
			pdu->len = len;
		} else {
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   101fe:	2201      	movs	r2, #1
   10200:	7062      	strb	r2, [r4, #1]
		/* TODO: AdvData */

		/* TODO: ACAD */

		/* Tx Power */
		if (h->tx_pwr) {
   10202:	78e2      	ldrb	r2, [r4, #3]
   10204:	0652      	lsls	r2, r2, #25
   10206:	d50f      	bpl.n	10228 <ll_adv_params_set+0x1d4>
			u8_t _tx_pwr;

			_tx_pwr = 0;
   10208:	9a17      	ldr	r2, [sp, #92]	; 0x5c
			if (tx_pwr) {
   1020a:	1e11      	subs	r1, r2, #0
   1020c:	d004      	beq.n	10218 <ll_adv_params_set+0x1c4>
				if (*tx_pwr != 0x7F) {
   1020e:	7812      	ldrb	r2, [r2, #0]
   10210:	2a7f      	cmp	r2, #127	; 0x7f
   10212:	d101      	bne.n	10218 <ll_adv_params_set+0x1c4>
					_tx_pwr = *tx_pwr;
				} else {
					*tx_pwr = _tx_pwr;
   10214:	2200      	movs	r2, #0
   10216:	700a      	strb	r2, [r1, #0]
				}
			}

			ptr--;
			*ptr = _tx_pwr;
   10218:	3b01      	subs	r3, #1
   1021a:	701a      	strb	r2, [r3, #0]
   1021c:	e004      	b.n	10228 <ll_adv_params_set+0x1d4>
		/* NOTE: TargetA, filled at enable and RPA timeout */

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	} else if (pdu->len == 0) {
   1021e:	7863      	ldrb	r3, [r4, #1]
   10220:	2b00      	cmp	r3, #0
   10222:	d101      	bne.n	10228 <ll_adv_params_set+0x1d4>
		pdu->len = BDADDR_SIZE;
   10224:	3306      	adds	r3, #6
   10226:	7063      	strb	r3, [r4, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   10228:	f7fe fa26 	bl	e678 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1022c:	0003      	movs	r3, r0
   1022e:	334f      	adds	r3, #79	; 0x4f
   10230:	781a      	ldrb	r2, [r3, #0]
   10232:	2327      	movs	r3, #39	; 0x27
   10234:	4353      	muls	r3, r2
   10236:	18c0      	adds	r0, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   10238:	230f      	movs	r3, #15
   1023a:	7802      	ldrb	r2, [r0, #0]
   1023c:	439a      	bics	r2, r3
	pdu->rfu = 0;
   1023e:	3b0b      	subs	r3, #11
   10240:	431a      	orrs	r2, r3
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   10242:	01ab      	lsls	r3, r5, #6
   10244:	258f      	movs	r5, #143	; 0x8f
   10246:	4015      	ands	r5, r2
	pdu->rx_addr = 0;
   10248:	431d      	orrs	r5, r3
   1024a:	237f      	movs	r3, #127	; 0x7f
   1024c:	401d      	ands	r5, r3
	if (pdu->len == 0) {
   1024e:	7843      	ldrb	r3, [r0, #1]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
   10250:	7005      	strb	r5, [r0, #0]
	if (pdu->len == 0) {
   10252:	2b00      	cmp	r3, #0
   10254:	d106      	bne.n	10264 <ll_adv_params_set+0x210>
		pdu->len = BDADDR_SIZE;
   10256:	3306      	adds	r3, #6
   10258:	7043      	strb	r3, [r0, #1]
   1025a:	e003      	b.n	10264 <ll_adv_params_set+0x210>

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   1025c:	230c      	movs	r3, #12
   1025e:	e000      	b.n	10262 <ll_adv_params_set+0x20e>
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
   10260:	2312      	movs	r3, #18
   10262:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   10264:	9801      	ldr	r0, [sp, #4]
   10266:	b00d      	add	sp, #52	; 0x34
   10268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1026a:	46c0      	nop			; (mov r8, r8)
   1026c:	00012086 	.word	0x00012086
   10270:	200019ec 	.word	0x200019ec

00010274 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   10274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10276:	0007      	movs	r7, r0
   10278:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1027a:	f7fe f9f7 	bl	e66c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1027e:	0003      	movs	r3, r0
   10280:	2127      	movs	r1, #39	; 0x27
   10282:	334f      	adds	r3, #79	; 0x4f
   10284:	781d      	ldrb	r5, [r3, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   10286:	0006      	movs	r6, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10288:	4369      	muls	r1, r5
   1028a:	1841      	adds	r1, r0, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1028c:	200f      	movs	r0, #15
   1028e:	780b      	ldrb	r3, [r1, #0]
   10290:	4018      	ands	r0, r3
   10292:	2801      	cmp	r0, #1
   10294:	d043      	beq.n	1031e <ll_adv_data_set+0xaa>
   10296:	2807      	cmp	r0, #7
   10298:	d041      	beq.n	1031e <ll_adv_data_set+0xaa>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1029a:	0032      	movs	r2, r6
   1029c:	324e      	adds	r2, #78	; 0x4e
   1029e:	7812      	ldrb	r2, [r2, #0]
   102a0:	42aa      	cmp	r2, r5
   102a2:	d104      	bne.n	102ae <ll_adv_data_set+0x3a>
		last = radio_adv_data->last + 1;
   102a4:	3501      	adds	r5, #1
   102a6:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   102a8:	2d02      	cmp	r5, #2
   102aa:	d100      	bne.n	102ae <ll_adv_data_set+0x3a>
			last = 0;
   102ac:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
   102ae:	200f      	movs	r0, #15
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   102b0:	2427      	movs	r4, #39	; 0x27
	pdu->type = prev->type;
   102b2:	4003      	ands	r3, r0
   102b4:	001a      	movs	r2, r3
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   102b6:	436c      	muls	r4, r5
   102b8:	1934      	adds	r4, r6, r4
	pdu->type = prev->type;
   102ba:	7823      	ldrb	r3, [r4, #0]
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
	pdu->len = BDADDR_SIZE + len;

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   102bc:	364f      	adds	r6, #79	; 0x4f
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
   102be:	4383      	bics	r3, r0
	pdu->rfu = 0;
   102c0:	4313      	orrs	r3, r2
   102c2:	2210      	movs	r2, #16
   102c4:	4393      	bics	r3, r2
   102c6:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   102c8:	2301      	movs	r3, #1
   102ca:	7808      	ldrb	r0, [r1, #0]
   102cc:	0940      	lsrs	r0, r0, #5
   102ce:	4018      	ands	r0, r3
   102d0:	7823      	ldrb	r3, [r4, #0]
   102d2:	0140      	lsls	r0, r0, #5
   102d4:	001a      	movs	r2, r3
   102d6:	2320      	movs	r3, #32
   102d8:	439a      	bics	r2, r3
   102da:	4310      	orrs	r0, r2
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   102dc:	2201      	movs	r2, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   102de:	7020      	strb	r0, [r4, #0]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   102e0:	780b      	ldrb	r3, [r1, #0]
   102e2:	099b      	lsrs	r3, r3, #6
   102e4:	4013      	ands	r3, r2
   102e6:	019a      	lsls	r2, r3, #6
   102e8:	b2c3      	uxtb	r3, r0
   102ea:	2040      	movs	r0, #64	; 0x40
   102ec:	4383      	bics	r3, r0
   102ee:	4313      	orrs	r3, r2
   102f0:	7023      	strb	r3, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
   102f2:	780b      	ldrb	r3, [r1, #0]
   102f4:	7820      	ldrb	r0, [r4, #0]
   102f6:	09db      	lsrs	r3, r3, #7
   102f8:	01da      	lsls	r2, r3, #7
   102fa:	237f      	movs	r3, #127	; 0x7f
   102fc:	4003      	ands	r3, r0
   102fe:	4313      	orrs	r3, r2
   10300:	7023      	strb	r3, [r4, #0]
	memcpy(&pdu->payload.adv_ind.addr[0],
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
   10302:	3102      	adds	r1, #2
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
	pdu->rx_addr = prev->rx_addr;
	memcpy(&pdu->payload.adv_ind.addr[0],
   10304:	2206      	movs	r2, #6
   10306:	1ca0      	adds	r0, r4, #2
   10308:	f7f0 fca1 	bl	c4e <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   1030c:	0020      	movs	r0, r4
   1030e:	003a      	movs	r2, r7
   10310:	3008      	adds	r0, #8
   10312:	9901      	ldr	r1, [sp, #4]
   10314:	f7f0 fc9b 	bl	c4e <memcpy>
	pdu->len = BDADDR_SIZE + len;
   10318:	1dbb      	adds	r3, r7, #6
   1031a:	7063      	strb	r3, [r4, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1031c:	7035      	strb	r5, [r6, #0]
}
   1031e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00010320 <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   10320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10322:	0007      	movs	r7, r0
   10324:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   10326:	f7fe f9a7 	bl	e678 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   1032a:	0003      	movs	r3, r0
   1032c:	0002      	movs	r2, r0
   1032e:	334e      	adds	r3, #78	; 0x4e
   10330:	324f      	adds	r2, #79	; 0x4f
   10332:	7811      	ldrb	r1, [r2, #0]
   10334:	781b      	ldrb	r3, [r3, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   10336:	0005      	movs	r5, r0
   10338:	000e      	movs	r6, r1
	if (radio_scan_data->first == radio_scan_data->last) {
   1033a:	428b      	cmp	r3, r1
   1033c:	d104      	bne.n	10348 <ll_scan_data_set+0x28>
		last = radio_scan_data->last + 1;
   1033e:	1c4e      	adds	r6, r1, #1
   10340:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
   10342:	2e02      	cmp	r6, #2
   10344:	d100      	bne.n	10348 <ll_scan_data_set+0x28>
			last = 0;
   10346:	2600      	movs	r6, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   10348:	2427      	movs	r4, #39	; 0x27
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1034a:	220f      	movs	r2, #15
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1034c:	4361      	muls	r1, r4
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1034e:	4374      	muls	r4, r6
   10350:	192c      	adds	r4, r5, r4
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   10352:	7823      	ldrb	r3, [r4, #0]
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   10354:	2040      	movs	r0, #64	; 0x40

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   10356:	4393      	bics	r3, r2
	pdu->rfu = 0;
   10358:	3a0b      	subs	r2, #11
   1035a:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
   1035c:	32cb      	adds	r2, #203	; 0xcb
   1035e:	4013      	ands	r3, r2
   10360:	7023      	strb	r3, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
   10362:	2340      	movs	r3, #64	; 0x40
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   10364:	1869      	adds	r1, r5, r1
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   10366:	780a      	ldrb	r2, [r1, #0]
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE + len;
	memcpy(&pdu->payload.scan_rsp.addr[0],
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
   10368:	3102      	adds	r1, #2
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   1036a:	401a      	ands	r2, r3
   1036c:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->payload.scan_rsp.addr[0],
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1036e:	354f      	adds	r5, #79	; 0x4f
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   10370:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
   10372:	4313      	orrs	r3, r2
   10374:	227f      	movs	r2, #127	; 0x7f
   10376:	4013      	ands	r3, r2
   10378:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
   1037a:	1dbb      	adds	r3, r7, #6
   1037c:	7063      	strb	r3, [r4, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   1037e:	1ca0      	adds	r0, r4, #2
   10380:	3a79      	subs	r2, #121	; 0x79
   10382:	f7f0 fc64 	bl	c4e <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   10386:	0020      	movs	r0, r4
   10388:	003a      	movs	r2, r7
   1038a:	9901      	ldr	r1, [sp, #4]
   1038c:	3008      	adds	r0, #8
   1038e:	f7f0 fc5e 	bl	c4e <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   10392:	702e      	strb	r6, [r5, #0]
}
   10394:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

00010398 <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
   10398:	b5f0      	push	{r4, r5, r6, r7, lr}
   1039a:	b085      	sub	sp, #20
	int rl_idx = RL_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1039c:	2800      	cmp	r0, #0
   1039e:	d102      	bne.n	103a6 <ll_adv_enable+0xe>
		return radio_adv_disable();
   103a0:	f7fe fe3a 	bl	f018 <radio_adv_disable>
   103a4:	e06b      	b.n	1047e <ll_adv_enable+0xe6>
	} else if (radio_adv_is_enabled()) {
   103a6:	f7fe f96d 	bl	e684 <radio_adv_is_enabled>
   103aa:	0007      	movs	r7, r0
		return 0;
   103ac:	2000      	movs	r0, #0
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   103ae:	4287      	cmp	r7, r0
   103b0:	d165      	bne.n	1047e <ll_adv_enable+0xe6>
	 */

	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
   103b2:	f7fe f95b 	bl	e66c <radio_adv_data_get>
   103b6:	0004      	movs	r4, r0
	radio_scan_data = radio_scan_data_get();
   103b8:	f7fe f95e 	bl	e678 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
   103bc:	0023      	movs	r3, r4
	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   103be:	2227      	movs	r2, #39	; 0x27
			[radio_adv_data->last][0];
   103c0:	334f      	adds	r3, #79	; 0x4f
	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   103c2:	781d      	ldrb	r5, [r3, #0]
   103c4:	4e2f      	ldr	r6, [pc, #188]	; (10484 <ll_adv_enable+0xec>)
   103c6:	4355      	muls	r5, r2
   103c8:	1965      	adds	r5, r4, r5
			[radio_scan_data->last][0];

	if (0) {

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   103ca:	782b      	ldrb	r3, [r5, #0]
   103cc:	240f      	movs	r4, #15
   103ce:	0019      	movs	r1, r3
   103d0:	4021      	ands	r1, r4
   103d2:	2907      	cmp	r1, #7
   103d4:	d10a      	bne.n	103ec <ll_adv_enable+0x54>
		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* AdvA, fill here at enable */
		if (h->adv_addr) {
   103d6:	78ea      	ldrb	r2, [r5, #3]
   103d8:	07d2      	lsls	r2, r2, #31
   103da:	d52a      	bpl.n	10432 <ll_adv_enable+0x9a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   103dc:	0658      	lsls	r0, r3, #25
   103de:	0039      	movs	r1, r7
   103e0:	0fc0      	lsrs	r0, r0, #31
   103e2:	f7ff f849 	bl	f478 <ll_addr_get>
   103e6:	0001      	movs	r1, r0
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
   103e8:	1d28      	adds	r0, r5, #4
   103ea:	e044      	b.n	10476 <ll_adv_enable+0xde>
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
			[radio_scan_data->last][0];
   103ec:	0003      	movs	r3, r0
   103ee:	334f      	adds	r3, #79	; 0x4f
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   103f0:	781b      	ldrb	r3, [r3, #0]
   103f2:	435a      	muls	r2, r3
   103f4:	1883      	adds	r3, r0, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		bool priv = false;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		/* Prepare whitelist and optionally resolving list */
		ll_filters_adv_update(ll_adv.filter_policy);
   103f6:	7830      	ldrb	r0, [r6, #0]
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   103f8:	9303      	str	r3, [sp, #12]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		bool priv = false;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		/* Prepare whitelist and optionally resolving list */
		ll_filters_adv_update(ll_adv.filter_policy);
   103fa:	06c0      	lsls	r0, r0, #27
   103fc:	0f80      	lsrs	r0, r0, #30
   103fe:	f7ff f9ef 	bl	f7e0 <ll_filters_adv_update>

		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10402:	7870      	ldrb	r0, [r6, #1]
   10404:	0683      	lsls	r3, r0, #26
   10406:	d522      	bpl.n	1044e <ll_adv_enable+0xb6>
		    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
			/* Look up the resolving list */
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   10408:	0640      	lsls	r0, r0, #25
   1040a:	1cb1      	adds	r1, r6, #2
   1040c:	0fc0      	lsrs	r0, r0, #31
   1040e:	f7ff f9fd 	bl	f80c <ll_rl_find>
   10412:	1e04      	subs	r4, r0, #0
					    ll_adv.id_addr);

			if (rl_idx >= 0) {
   10414:	db02      	blt.n	1041c <ll_adv_enable+0x84>
				/* Generate RPAs if required */
				ll_rl_rpa_update(false);
   10416:	0038      	movs	r0, r7
   10418:	f7ff fb3c 	bl	fa94 <ll_rl_rpa_update>
			}

			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1041c:	0029      	movs	r1, r5
   1041e:	0020      	movs	r0, r4
   10420:	f7ff facc 	bl	f9bc <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   10424:	9903      	ldr	r1, [sp, #12]
   10426:	0020      	movs	r0, r4
   10428:	f7ff fac8 	bl	f9bc <ll_rl_pdu_adv_update>
			priv = true;
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
   1042c:	2c00      	cmp	r4, #0
   1042e:	da00      	bge.n	10432 <ll_adv_enable+0x9a>
   10430:	240f      	movs	r4, #15
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
				  ll_adv.chan_map, ll_adv.filter_policy,
   10432:	7832      	ldrb	r2, [r6, #0]
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   10434:	7a30      	ldrb	r0, [r6, #8]
				  ll_adv.chan_map, ll_adv.filter_policy,
   10436:	06d3      	lsls	r3, r2, #27
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   10438:	b2e4      	uxtb	r4, r4
				  ll_adv.chan_map, ll_adv.filter_policy,
   1043a:	0752      	lsls	r2, r2, #29
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1043c:	0740      	lsls	r0, r0, #29
   1043e:	89b1      	ldrh	r1, [r6, #12]
   10440:	0f9b      	lsrs	r3, r3, #30
   10442:	0f52      	lsrs	r2, r2, #29
   10444:	9400      	str	r4, [sp, #0]
   10446:	0f40      	lsrs	r0, r0, #29
   10448:	f7fe fc42 	bl	ecd0 <radio_adv_enable>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
   1044c:	e017      	b.n	1047e <ll_adv_enable+0xe6>
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1044e:	7828      	ldrb	r0, [r5, #0]
   10450:	0039      	movs	r1, r7
   10452:	0640      	lsls	r0, r0, #25
   10454:	0fc0      	lsrs	r0, r0, #31
   10456:	f7ff f80f 	bl	f478 <ll_addr_get>
			priv = true;
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1045a:	2206      	movs	r2, #6
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1045c:	0001      	movs	r1, r0
			priv = true;
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1045e:	1ca8      	adds	r0, r5, #2
   10460:	f7f0 fbf5 	bl	c4e <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   10464:	7828      	ldrb	r0, [r5, #0]
   10466:	0039      	movs	r1, r7
   10468:	0640      	lsls	r0, r0, #25
   1046a:	0fc0      	lsrs	r0, r0, #31
   1046c:	f7ff f804 	bl	f478 <ll_addr_get>
   10470:	0001      	movs	r1, r0
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   10472:	9803      	ldr	r0, [sp, #12]
   10474:	3002      	adds	r0, #2
   10476:	2206      	movs	r2, #6
   10478:	f7f0 fbe9 	bl	c4e <memcpy>
   1047c:	e7d9      	b.n	10432 <ll_adv_enable+0x9a>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
}
   1047e:	b005      	add	sp, #20
   10480:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10482:	46c0      	nop			; (mov r8, r8)
   10484:	200019ec 	.word	0x200019ec

00010488 <net_buf_pool_get>:
/* Linker-defined symbol bound to the static pool structs */
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
   10488:	2324      	movs	r3, #36	; 0x24
   1048a:	4358      	muls	r0, r3
   1048c:	4b01      	ldr	r3, [pc, #4]	; (10494 <net_buf_pool_get+0xc>)
   1048e:	18c0      	adds	r0, r0, r3
}
   10490:	4770      	bx	lr
   10492:	46c0      	nop			; (mov r8, r8)
   10494:	20000628 	.word	0x20000628

00010498 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   10498:	b570      	push	{r4, r5, r6, lr}
   1049a:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1049c:	f3ef 8510 	mrs	r5, PRIMASK
   104a0:	b672      	cpsid	i
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   104a2:	8ac3      	ldrh	r3, [r0, #22]
   104a4:	2b00      	cmp	r3, #0
   104a6:	d028      	beq.n	104fa <net_buf_alloc+0x62>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   104a8:	8a82      	ldrh	r2, [r0, #20]
   104aa:	429a      	cmp	r2, r3
   104ac:	d908      	bls.n	104c0 <net_buf_alloc+0x28>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   104ae:	2100      	movs	r1, #0
   104b0:	f000 fff6 	bl	114a0 <k_queue_get>
			if (buf) {
   104b4:	2800      	cmp	r0, #0
   104b6:	d003      	beq.n	104c0 <net_buf_alloc+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   104b8:	2d00      	cmp	r5, #0
   104ba:	d126      	bne.n	1050a <net_buf_alloc+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   104bc:	b662      	cpsie	i
   104be:	e024      	b.n	1050a <net_buf_alloc+0x72>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   104c0:	8ae0      	ldrh	r0, [r4, #22]
   104c2:	1e43      	subs	r3, r0, #1
   104c4:	82e3      	strh	r3, [r4, #22]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   104c6:	2d00      	cmp	r5, #0
   104c8:	d100      	bne.n	104cc <net_buf_alloc+0x34>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   104ca:	b662      	cpsie	i
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   104cc:	2103      	movs	r1, #3
   104ce:	8b23      	ldrh	r3, [r4, #24]
   104d0:	8b62      	ldrh	r2, [r4, #26]
   104d2:	3303      	adds	r3, #3
   104d4:	1852      	adds	r2, r2, r1
   104d6:	438a      	bics	r2, r1
   104d8:	438b      	bics	r3, r1
   104da:	189b      	adds	r3, r3, r2
   104dc:	8aa2      	ldrh	r2, [r4, #20]
   104de:	3310      	adds	r3, #16
   104e0:	1a10      	subs	r0, r2, r0
   104e2:	4358      	muls	r0, r3
   104e4:	6a23      	ldr	r3, [r4, #32]

	buf->pool_id = pool_id(pool);
   104e6:	4a0e      	ldr	r2, [pc, #56]	; (10520 <net_buf_alloc+0x88>)
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   104e8:	1818      	adds	r0, r3, r0

	buf->pool_id = pool_id(pool);
   104ea:	4b0e      	ldr	r3, [pc, #56]	; (10524 <net_buf_alloc+0x8c>)
   104ec:	1ae3      	subs	r3, r4, r3
   104ee:	109b      	asrs	r3, r3, #2
   104f0:	4353      	muls	r3, r2
   104f2:	7183      	strb	r3, [r0, #6]
	buf->size = pool->buf_size;
   104f4:	8b23      	ldrh	r3, [r4, #24]
   104f6:	81c3      	strh	r3, [r0, #14]

		uninit_count = pool->uninit_count--;
		irq_unlock(key);

		buf = pool_get_uninit(pool, uninit_count);
		goto success;
   104f8:	e007      	b.n	1050a <net_buf_alloc+0x72>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   104fa:	2d00      	cmp	r5, #0
   104fc:	d100      	bne.n	10500 <net_buf_alloc+0x68>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   104fe:	b662      	cpsie	i
		}
	} else {
		buf = k_lifo_get(&pool->free, timeout);
	}
#else
	buf = k_lifo_get(&pool->free, timeout);
   10500:	0020      	movs	r0, r4
   10502:	f000 ffcd 	bl	114a0 <k_queue_get>
#endif
	if (!buf) {
   10506:	2800      	cmp	r0, #0
   10508:	d008      	beq.n	1051c <net_buf_alloc+0x84>
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1050a:	2301      	movs	r3, #1
   1050c:	7103      	strb	r3, [r0, #4]
	buf->flags = 0;
   1050e:	2300      	movs	r3, #0
   10510:	7143      	strb	r3, [r0, #5]
	buf->frags = NULL;
   10512:	6003      	str	r3, [r0, #0]
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   10514:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   10516:	0003      	movs	r3, r0
   10518:	3310      	adds	r3, #16
   1051a:	6083      	str	r3, [r0, #8]
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1051c:	bd70      	pop	{r4, r5, r6, pc}
   1051e:	46c0      	nop			; (mov r8, r8)
   10520:	38e38e39 	.word	0x38e38e39
   10524:	20000628 	.word	0x20000628

00010528 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   10528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1052a:	0007      	movs	r7, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1052c:	f000 ffb8 	bl	114a0 <k_queue_get>
   10530:	1e05      	subs	r5, r0, #0
	if (!buf) {
   10532:	d00f      	beq.n	10554 <net_buf_get+0x2c>
   10534:	0004      	movs	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   10536:	2601      	movs	r6, #1
   10538:	7963      	ldrb	r3, [r4, #5]
   1053a:	4033      	ands	r3, r6
   1053c:	d009      	beq.n	10552 <net_buf_get+0x2a>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1053e:	2100      	movs	r1, #0
   10540:	0038      	movs	r0, r7
   10542:	f000 ffad 	bl	114a0 <k_queue_get>
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   10546:	7963      	ldrb	r3, [r4, #5]

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   10548:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1054a:	43b3      	bics	r3, r6
   1054c:	7163      	strb	r3, [r4, #5]
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1054e:	0004      	movs	r4, r0
   10550:	e7f2      	b.n	10538 <net_buf_get+0x10>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   10552:	6023      	str	r3, [r4, #0]

	return buf;
}
   10554:	0028      	movs	r0, r5
   10556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010558 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   10558:	0003      	movs	r3, r0
   1055a:	3310      	adds	r3, #16
   1055c:	1859      	adds	r1, r3, r1
   1055e:	6081      	str	r1, [r0, #8]
}
   10560:	4770      	bx	lr

00010562 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   10562:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   10564:	000a      	movs	r2, r1
		tail->flags |= NET_BUF_FRAGS;
   10566:	2501      	movs	r5, #1
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   10568:	6814      	ldr	r4, [r2, #0]
   1056a:	2c00      	cmp	r4, #0
   1056c:	d004      	beq.n	10578 <net_buf_put+0x16>
		tail->flags |= NET_BUF_FRAGS;
   1056e:	7953      	ldrb	r3, [r2, #5]
   10570:	432b      	orrs	r3, r5
   10572:	7153      	strb	r3, [r2, #5]
   10574:	0022      	movs	r2, r4
   10576:	e7f7      	b.n	10568 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   10578:	f000 ff4e 	bl	11418 <k_queue_append_list>
}
   1057c:	bd70      	pop	{r4, r5, r6, pc}
	...

00010580 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   10580:	b570      	push	{r4, r5, r6, lr}
   10582:	0001      	movs	r1, r0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   10584:	2424      	movs	r4, #36	; 0x24
void net_buf_unref(struct net_buf *buf)
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
   10586:	2900      	cmp	r1, #0
   10588:	d015      	beq.n	105b6 <net_buf_unref+0x36>
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1058a:	790b      	ldrb	r3, [r1, #4]
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
		struct net_buf *frags = buf->frags;
   1058c:	680d      	ldr	r5, [r1, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1058e:	3b01      	subs	r3, #1
   10590:	b2db      	uxtb	r3, r3
   10592:	710b      	strb	r3, [r1, #4]
   10594:	2b00      	cmp	r3, #0
   10596:	d10e      	bne.n	105b6 <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   10598:	7988      	ldrb	r0, [r1, #6]

		if (--buf->ref > 0) {
			return;
		}

		buf->frags = NULL;
   1059a:	600b      	str	r3, [r1, #0]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1059c:	4360      	muls	r0, r4
   1059e:	4b06      	ldr	r3, [pc, #24]	; (105b8 <net_buf_unref+0x38>)
   105a0:	1818      	adds	r0, r3, r0
   105a2:	69c3      	ldr	r3, [r0, #28]
   105a4:	2b00      	cmp	r3, #0
   105a6:	d002      	beq.n	105ae <net_buf_unref+0x2e>
			pool->destroy(buf);
   105a8:	0008      	movs	r0, r1
   105aa:	4798      	blx	r3
   105ac:	e001      	b.n	105b2 <net_buf_unref+0x32>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   105ae:	f000 ff2d 	bl	1140c <k_queue_prepend>
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   105b2:	0029      	movs	r1, r5
   105b4:	e7e7      	b.n	10586 <net_buf_unref+0x6>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   105b6:	bd70      	pop	{r4, r5, r6, pc}
   105b8:	20000628 	.word	0x20000628

000105bc <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   105bc:	7903      	ldrb	r3, [r0, #4]
   105be:	3301      	adds	r3, #1
   105c0:	7103      	strb	r3, [r0, #4]
	return buf;
}
   105c2:	4770      	bx	lr

000105c4 <net_buf_simple_add>:
 *
 *  @return Tail pointer for the buffer.
 */
static inline u8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
   105c4:	8882      	ldrh	r2, [r0, #4]
   105c6:	6803      	ldr	r3, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   105c8:	1851      	adds	r1, r2, r1
   105ca:	189b      	adds	r3, r3, r2
   105cc:	8081      	strh	r1, [r0, #4]
	return tail;
}
   105ce:	0018      	movs	r0, r3
   105d0:	4770      	bx	lr

000105d2 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   105d2:	b510      	push	{r4, lr}
   105d4:	0004      	movs	r4, r0
   105d6:	8883      	ldrh	r3, [r0, #4]
   105d8:	6800      	ldr	r0, [r0, #0]
   105da:	18c0      	adds	r0, r0, r3

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   105dc:	189b      	adds	r3, r3, r2
   105de:	80a3      	strh	r3, [r4, #4]
void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   105e0:	f7f0 fb35 	bl	c4e <memcpy>
}
   105e4:	bd10      	pop	{r4, pc}

000105e6 <net_buf_simple_add_u8>:
   105e6:	8882      	ldrh	r2, [r0, #4]
   105e8:	6803      	ldr	r3, [r0, #0]
   105ea:	189b      	adds	r3, r3, r2

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   105ec:	3201      	adds	r2, #1
   105ee:	8082      	strh	r2, [r0, #4]

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;

	return u8;
}
   105f0:	0018      	movs	r0, r3
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   105f2:	7019      	strb	r1, [r3, #0]

	return u8;
}
   105f4:	4770      	bx	lr

000105f6 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   105f6:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   105f8:	8882      	ldrh	r2, [r0, #4]
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   105fa:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   105fc:	1851      	adds	r1, r2, r1
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   105fe:	6003      	str	r3, [r0, #0]
	buf->len += len;
   10600:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   10602:	0018      	movs	r0, r3
   10604:	4770      	bx	lr

00010606 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   10606:	8883      	ldrh	r3, [r0, #4]
   10608:	1a5b      	subs	r3, r3, r1
   1060a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1060c:	6803      	ldr	r3, [r0, #0]
   1060e:	1859      	adds	r1, r3, r1
   10610:	6001      	str	r1, [r0, #0]
}
   10612:	0008      	movs	r0, r1
   10614:	4770      	bx	lr

00010616 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   10616:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   10618:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1061a:	2101      	movs	r1, #1

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
	u8_t val;

	val = buf->data[0];
   1061c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1061e:	f7ff fff2 	bl	10606 <net_buf_simple_pull>

	return val;
}
   10622:	0020      	movs	r0, r4
   10624:	bd10      	pop	{r4, pc}

00010626 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   10626:	6802      	ldr	r2, [r0, #0]

	return val;
}

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   10628:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1062a:	7854      	ldrb	r4, [r2, #1]
   1062c:	7813      	ldrb	r3, [r2, #0]
   1062e:	0224      	lsls	r4, r4, #8
   10630:	431c      	orrs	r4, r3
	net_buf_simple_pull(buf, sizeof(val));
   10632:	2102      	movs	r1, #2
   10634:	f7ff ffe7 	bl	10606 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   10638:	0020      	movs	r0, r4
   1063a:	bd10      	pop	{r4, pc}

0001063c <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1063c:	0002      	movs	r2, r0
   1063e:	6803      	ldr	r3, [r0, #0]
   10640:	3208      	adds	r2, #8
   10642:	1a98      	subs	r0, r3, r2
}
   10644:	4770      	bx	lr

00010646 <net_buf_simple_tailroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   10646:	0003      	movs	r3, r0
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   10648:	6801      	ldr	r1, [r0, #0]
   1064a:	88c2      	ldrh	r2, [r0, #6]
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1064c:	3308      	adds	r3, #8
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1064e:	1acb      	subs	r3, r1, r3
   10650:	8880      	ldrh	r0, [r0, #4]
   10652:	1ad3      	subs	r3, r2, r3
   10654:	1a18      	subs	r0, r3, r0
}
   10656:	4770      	bx	lr

00010658 <nordicsemi_nrf51_init>:
static bool ftpan_59(void);

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK;

static int nordicsemi_nrf51_init(struct device *arg)
{
   10658:	b530      	push	{r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1065a:	f3ef 8010 	mrs	r0, PRIMASK
   1065e:	b672      	cpsid	i
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   10660:	4a1e      	ldr	r2, [pc, #120]	; (106dc <nordicsemi_nrf51_init+0x84>)
   10662:	7813      	ldrb	r3, [r2, #0]
   10664:	0011      	movs	r1, r2
   10666:	2b01      	cmp	r3, #1
   10668:	d119      	bne.n	1069e <nordicsemi_nrf51_init+0x46>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   1066a:	4b1d      	ldr	r3, [pc, #116]	; (106e0 <nordicsemi_nrf51_init+0x88>)
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   1066c:	681b      	ldr	r3, [r3, #0]
   1066e:	071b      	lsls	r3, r3, #28
   10670:	d115      	bne.n	1069e <nordicsemi_nrf51_init+0x46>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
   10672:	4b1c      	ldr	r3, [pc, #112]	; (106e4 <nordicsemi_nrf51_init+0x8c>)
   10674:	25e0      	movs	r5, #224	; 0xe0
   10676:	681a      	ldr	r2, [r3, #0]
   10678:	23f0      	movs	r3, #240	; 0xf0
   1067a:	0014      	movs	r4, r2
   1067c:	401c      	ands	r4, r3
   1067e:	422a      	tst	r2, r5
   10680:	d10b      	bne.n	1069a <nordicsemi_nrf51_init+0x42>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   10682:	4a19      	ldr	r2, [pc, #100]	; (106e8 <nordicsemi_nrf51_init+0x90>)

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
   10684:	6812      	ldr	r2, [r2, #0]
   10686:	421a      	tst	r2, r3
   10688:	d109      	bne.n	1069e <nordicsemi_nrf51_init+0x46>
	 * instructions in the devices that do not need it is that the new
	 * peripherals in the second generation devices (LPCOMP for example)
	 * will not be available.
	 */
	if (ftpan_26()) {
		*(volatile u32_t *)0x40000504 = 0xC007FFDF;
   1068a:	4a18      	ldr	r2, [pc, #96]	; (106ec <nordicsemi_nrf51_init+0x94>)
   1068c:	4b18      	ldr	r3, [pc, #96]	; (106f0 <nordicsemi_nrf51_init+0x98>)
   1068e:	601a      	str	r2, [r3, #0]
		*(volatile u32_t *)0x40006C18 = 0x00008000;
   10690:	2280      	movs	r2, #128	; 0x80
   10692:	4b18      	ldr	r3, [pc, #96]	; (106f4 <nordicsemi_nrf51_init+0x9c>)
   10694:	0212      	lsls	r2, r2, #8
   10696:	601a      	str	r2, [r3, #0]
   10698:	e001      	b.n	1069e <nordicsemi_nrf51_init+0x46>
		}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x10) &&
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   1069a:	2c30      	cmp	r4, #48	; 0x30
   1069c:	d0f1      	beq.n	10682 <nordicsemi_nrf51_init+0x2a>
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   1069e:	680b      	ldr	r3, [r1, #0]
   106a0:	b2db      	uxtb	r3, r3
   106a2:	2b01      	cmp	r3, #1
   106a4:	d10d      	bne.n	106c2 <nordicsemi_nrf51_init+0x6a>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   106a6:	4a0e      	ldr	r2, [pc, #56]	; (106e0 <nordicsemi_nrf51_init+0x88>)
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   106a8:	6812      	ldr	r2, [r2, #0]
   106aa:	0712      	lsls	r2, r2, #28
   106ac:	d109      	bne.n	106c2 <nordicsemi_nrf51_init+0x6a>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
   106ae:	21f0      	movs	r1, #240	; 0xf0
   106b0:	4a0c      	ldr	r2, [pc, #48]	; (106e4 <nordicsemi_nrf51_init+0x8c>)
   106b2:	6812      	ldr	r2, [r2, #0]
   106b4:	400a      	ands	r2, r1
   106b6:	2a40      	cmp	r2, #64	; 0x40
   106b8:	d103      	bne.n	106c2 <nordicsemi_nrf51_init+0x6a>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   106ba:	4a0b      	ldr	r2, [pc, #44]	; (106e8 <nordicsemi_nrf51_init+0x90>)

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
   106bc:	6812      	ldr	r2, [r2, #0]
   106be:	420a      	tst	r2, r1
   106c0:	d003      	beq.n	106ca <nordicsemi_nrf51_init+0x72>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   106c2:	2800      	cmp	r0, #0
   106c4:	d107      	bne.n	106d6 <nordicsemi_nrf51_init+0x7e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   106c6:	b662      	cpsie	i
	 */
	NMI_INIT();

	irq_unlock(key);

	return 0;
   106c8:	e005      	b.n	106d6 <nordicsemi_nrf51_init+0x7e>
	 * "MPU: Reset value of DISABLEINDEBUG register is incorrect" found
	 * at Product Anomaly document for your device found at
	 * https://www.nordicsemi.com/.
	 */
	if (ftpan_59()) {
		NRF_MPU->DISABLEINDEBUG =
   106ca:	22c1      	movs	r2, #193	; 0xc1
   106cc:	2180      	movs	r1, #128	; 0x80
   106ce:	00d2      	lsls	r2, r2, #3
   106d0:	05c9      	lsls	r1, r1, #23
   106d2:	508b      	str	r3, [r1, r2]
   106d4:	e7f5      	b.n	106c2 <nordicsemi_nrf51_init+0x6a>
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   106d6:	2000      	movs	r0, #0
   106d8:	bd30      	pop	{r4, r5, pc}
   106da:	46c0      	nop			; (mov r8, r8)
   106dc:	f0000fe0 	.word	0xf0000fe0
   106e0:	f0000fe4 	.word	0xf0000fe4
   106e4:	f0000fe8 	.word	0xf0000fe8
   106e8:	f0000fec 	.word	0xf0000fec
   106ec:	c007ffdf 	.word	0xc007ffdf
   106f0:	40000504 	.word	0x40000504
   106f4:	40006c18 	.word	0x40006c18

000106f8 <_IntExit>:
SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _IntExit)

/* _IntExit falls through to _ExcExit (they are aliases of each other) */

#ifdef CONFIG_TIMESLICING
    push {lr}
   106f8:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   106fa:	f001 f88d 	bl	11818 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
   106fe:	bc01      	pop	{r0}
    mov lr, r0
   10700:	4686      	mov	lr, r0
   10702:	46c0      	nop			; (mov r8, r8)

00010704 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   10704:	4805      	ldr	r0, [pc, #20]	; (1071c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   10706:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   10708:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   1070a:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   1070c:	d805      	bhi.n	1071a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   1070e:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   10710:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   10712:	d002      	beq.n	1071a <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   10714:	4902      	ldr	r1, [pc, #8]	; (10720 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   10716:	4a03      	ldr	r2, [pc, #12]	; (10724 <_EXIT_EXC+0xa>)
    str r2, [r1]
   10718:	600a      	str	r2, [r1, #0]

0001071a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   1071a:	4770      	bx	lr
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   1071c:	20001abc 	.word	0x20001abc
    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    cmp r0, r1
    beq _EXIT_EXC

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   10720:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
   10724:	10000000 	.word	0x10000000

00010728 <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
   10728:	b5f0      	push	{r4, r5, r6, r7, lr}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   1072a:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
   1072c:	2200      	movs	r2, #0
   1072e:	2603      	movs	r6, #3
   10730:	25ff      	movs	r5, #255	; 0xff
   10732:	00a4      	lsls	r4, r4, #2
   10734:	0010      	movs	r0, r2
   10736:	002f      	movs	r7, r5
   10738:	4030      	ands	r0, r6
   1073a:	00c0      	lsls	r0, r0, #3
   1073c:	4087      	lsls	r7, r0
   1073e:	0893      	lsrs	r3, r2, #2
   10740:	4904      	ldr	r1, [pc, #16]	; (10754 <_IntLibInit+0x2c>)
   10742:	009b      	lsls	r3, r3, #2
   10744:	185b      	adds	r3, r3, r1
   10746:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   10748:	3201      	adds	r2, #1
   1074a:	43b9      	bics	r1, r7
   1074c:	5119      	str	r1, [r3, r4]
   1074e:	2a1a      	cmp	r2, #26
   10750:	d1f0      	bne.n	10734 <_IntLibInit+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   10752:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10754:	e000e100 	.word	0xe000e100

00010758 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10758:	4913      	ldr	r1, [pc, #76]	; (107a8 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1075a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1075c:	2028      	movs	r0, #40	; 0x28
    add r0, r2
   1075e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   10760:	f3ef 8c09 	mrs	ip, PSP

#if defined(CONFIG_ARMV6_M)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
   10764:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
   10766:	4643      	mov	r3, r8
    mov r4, r9
   10768:	464c      	mov	r4, r9
    mov r5, r10
   1076a:	4655      	mov	r5, sl
    mov r6, r11
   1076c:	465e      	mov	r6, fp
    mov r7, ip
   1076e:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
   10770:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   10772:	4f0e      	ldr	r7, [pc, #56]	; (107ac <_thread_irq_disabled+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10774:	4e0e      	ldr	r6, [pc, #56]	; (107b0 <_thread_irq_disabled+0x26>)

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
   10776:	b672      	cpsid	i
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   10778:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   1077a:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   1077c:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   1077e:	6d90      	ldr	r0, [r2, #88]	; 0x58
    movs.n r3, #0
   10780:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10782:	6593      	str	r3, [r2, #88]	; 0x58
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
   10784:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
   10786:	d100      	bne.n	1078a <_thread_irq_disabled>
    cpsie i
   10788:	b662      	cpsie	i

0001078a <_thread_irq_disabled>:
_thread_irq_disabled:

    ldr r4, =_thread_offset_to_callee_saved
   1078a:	2428      	movs	r4, #40	; 0x28
    adds r0, r2, r4
   1078c:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
   1078e:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
   10790:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
   10792:	4698      	mov	r8, r3
    mov r9, r4
   10794:	46a1      	mov	r9, r4
    mov r10, r5
   10796:	46aa      	mov	sl, r5
    mov r11, r6
   10798:	46b3      	mov	fp, r6
    mov ip, r7
   1079a:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
   1079c:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
   1079e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ldmia r0, {v1-v8, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   107a0:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif
#endif

    /* exc return */
    bx lr
   107a4:	4770      	bx	lr
   107a6:	0000      	.short	0x0000
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   107a8:	20001abc 	.word	0x20001abc
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   107ac:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
   107b0:	08000000 	.word	0x08000000

000107b4 <__svc>:
#if defined(CONFIG_ARMV6_M)
SECTION_FUNC(TEXT, __svc)
    /* Use EXC_RETURN state to find out if stack frame is on the
     * MSP or PSP
     */
    ldr r0, =0x4
   107b4:	2004      	movs	r0, #4
    mov r1, lr
   107b6:	4671      	mov	r1, lr
    tst r1, r0
   107b8:	4201      	tst	r1, r0
    beq _stack_frame_msp
   107ba:	d002      	beq.n	107c2 <_stack_frame_msp>
    mrs r0, PSP
   107bc:	f3ef 8009 	mrs	r0, PSP
    bne _stack_frame_endif
   107c0:	d101      	bne.n	107c6 <_stack_frame_endif>

000107c2 <_stack_frame_msp>:
_stack_frame_msp:
    mrs r0, MSP
   107c2:	f3ef 8008 	mrs	r0, MSP

000107c6 <_stack_frame_endif>:
_stack_frame_endif:

    /* Figure out what SVC call number was invoked */
    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   107c6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    subs r1, r1, #2
   107c8:	3902      	subs	r1, #2
    ldrb r1, [r1, #0]
   107ca:	7809      	ldrb	r1, [r1, #0]
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */

    cmp r1, #2
   107cc:	2902      	cmp	r1, #2
    beq _oops
   107ce:	d000      	beq.n	107d2 <_oops>
    pop {r3}
    mov lr, r3
#endif

    /* exception return is done in _IntExit() */
    b _IntExit
   107d0:	e792      	b.n	106f8 <_IntExit>

000107d2 <_oops>:

_oops:
    push {lr}
   107d2:	b500      	push	{lr}
    blx _do_kernel_oops
   107d4:	f000 f918 	bl	10a08 <_do_kernel_oops>
    pop {pc}
   107d8:	bd00      	pop	{pc}
   107da:	46c0      	nop			; (mov r8, r8)

000107dc <__swap>:
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
   107dc:	4905      	ldr	r1, [pc, #20]	; (107f4 <__swap+0x18>)
    ldr r2, [r1, #_kernel_offset_to_current]
   107de:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   107e0:	6590      	str	r0, [r2, #88]	; 0x58

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   107e2:	4905      	ldr	r1, [pc, #20]	; (107f8 <__swap+0x1c>)
    ldr r1, [r1]
   107e4:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   107e6:	65d1      	str	r1, [r2, #92]	; 0x5c

#if defined(CONFIG_ARMV6_M)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
   107e8:	4904      	ldr	r1, [pc, #16]	; (107fc <__swap+0x20>)
    ldr r3, =_SCS_ICSR_PENDSV
   107ea:	4b05      	ldr	r3, [pc, #20]	; (10800 <__swap+0x24>)
    str r3, [r1, #0]
   107ec:	600b      	str	r3, [r1, #0]
    /* Unlock interrupts to allow PendSV, since it's running at prio 0xff
     *
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
   107ee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   107f0:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    bx lr
   107f2:	4770      	bx	lr
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
   107f4:	20001abc 	.word	0x20001abc

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   107f8:	00015008 	.word	0x00015008

#if defined(CONFIG_ARMV6_M)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
   107fc:	e000ed04 	.word	0xe000ed04
    ldr r3, =_SCS_ICSR_PENDSV
   10800:	10000000 	.word	0x10000000

00010804 <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10804:	4b0e      	ldr	r3, [pc, #56]	; (10840 <_Fault+0x3c>)
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   10806:	b510      	push	{r4, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   10808:	685a      	ldr	r2, [r3, #4]
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   1080a:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1080c:	05d2      	lsls	r2, r2, #23
   1080e:	0dd2      	lsrs	r2, r2, #23
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
	switch (fault) {
   10810:	2a03      	cmp	r2, #3
   10812:	d108      	bne.n	10826 <_Fault+0x22>
 *
 * @return N/A
 */
static void _HardFault(const NANO_ESF *esf)
{
	PR_EXC("***** HARD FAULT *****\n");
   10814:	480b      	ldr	r0, [pc, #44]	; (10844 <_Fault+0x40>)
   10816:	f7f1 f83d 	bl	1894 <printk>
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
{
	PR_EXC("  Executing thread ID (thread): %p\n"
   1081a:	f000 ffcd 	bl	117b8 <k_current_get>
   1081e:	69a2      	ldr	r2, [r4, #24]
   10820:	0001      	movs	r1, r0
   10822:	4809      	ldr	r0, [pc, #36]	; (10848 <_Fault+0x44>)
   10824:	e005      	b.n	10832 <_Fault+0x2e>
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   10826:	4909      	ldr	r1, [pc, #36]	; (1084c <_Fault+0x48>)
   10828:	2a0f      	cmp	r2, #15
   1082a:	dd00      	ble.n	1082e <_Fault+0x2a>
   1082c:	4908      	ldr	r1, [pc, #32]	; (10850 <_Fault+0x4c>)
   1082e:	4809      	ldr	r0, [pc, #36]	; (10854 <_Fault+0x50>)
   10830:	3a10      	subs	r2, #16
   10832:	f7f1 f82f 	bl	1894 <printk>
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   10836:	0021      	movs	r1, r4
   10838:	2000      	movs	r0, #0
   1083a:	f000 f8eb 	bl	10a14 <_SysFatalErrorHandler>
}
   1083e:	bd10      	pop	{r4, pc}
   10840:	e000ed00 	.word	0xe000ed00
   10844:	00014dd9 	.word	0x00014dd9
   10848:	00014df1 	.word	0x00014df1
   1084c:	00014dab 	.word	0x00014dab
   10850:	00014dc0 	.word	0x00014dc0
   10854:	00014e3b 	.word	0x00014e3b

00010858 <_FaultInit>:
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
}
   10858:	4770      	bx	lr
	...

0001085c <_arch_irq_enable>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1085c:	231f      	movs	r3, #31
   1085e:	4018      	ands	r0, r3
   10860:	3b1e      	subs	r3, #30
   10862:	4083      	lsls	r3, r0
   10864:	4a01      	ldr	r2, [pc, #4]	; (1086c <_arch_irq_enable+0x10>)
   10866:	6013      	str	r3, [r2, #0]
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
   10868:	4770      	bx	lr
   1086a:	46c0      	nop			; (mov r8, r8)
   1086c:	e000e100 	.word	0xe000e100

00010870 <_arch_irq_disable>:
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   10870:	231f      	movs	r3, #31
   10872:	4018      	ands	r0, r3
   10874:	3b1e      	subs	r3, #30
   10876:	4083      	lsls	r3, r0
   10878:	4a01      	ldr	r2, [pc, #4]	; (10880 <_arch_irq_disable+0x10>)
   1087a:	67d3      	str	r3, [r2, #124]	; 0x7c
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}
   1087c:	4770      	bx	lr
   1087e:	46c0      	nop			; (mov r8, r8)
   10880:	e000e104 	.word	0xe000e104

00010884 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   10884:	0942      	lsrs	r2, r0, #5
   10886:	4b04      	ldr	r3, [pc, #16]	; (10898 <_arch_irq_is_enabled+0x14>)
   10888:	0092      	lsls	r2, r2, #2
   1088a:	58d2      	ldr	r2, [r2, r3]
   1088c:	231f      	movs	r3, #31
   1088e:	4003      	ands	r3, r0
   10890:	2001      	movs	r0, #1
   10892:	4098      	lsls	r0, r3
   10894:	4010      	ands	r0, r2
}
   10896:	4770      	bx	lr
   10898:	e000e100 	.word	0xe000e100

0001089c <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1089c:	b243      	sxtb	r3, r0
 * and possibly one additional to support zero latency interrupts.
 *
 * @return N/A
 */
void _irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   1089e:	b570      	push	{r4, r5, r6, lr}
   108a0:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
   108a2:	2b00      	cmp	r3, #0
   108a4:	da14      	bge.n	108d0 <_irq_priority_set+0x34>
   108a6:	230f      	movs	r3, #15
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   108a8:	b2c0      	uxtb	r0, r0
   108aa:	4003      	ands	r3, r0
   108ac:	3b08      	subs	r3, #8
   108ae:	4a12      	ldr	r2, [pc, #72]	; (108f8 <_irq_priority_set+0x5c>)
   108b0:	089b      	lsrs	r3, r3, #2
   108b2:	2403      	movs	r4, #3
   108b4:	009b      	lsls	r3, r3, #2
   108b6:	189b      	adds	r3, r3, r2
   108b8:	22ff      	movs	r2, #255	; 0xff
   108ba:	4020      	ands	r0, r4
   108bc:	40a0      	lsls	r0, r4
   108be:	0014      	movs	r4, r2
   108c0:	400a      	ands	r2, r1
   108c2:	4084      	lsls	r4, r0
   108c4:	4082      	lsls	r2, r0
   108c6:	69dd      	ldr	r5, [r3, #28]
   108c8:	43a5      	bics	r5, r4
   108ca:	432a      	orrs	r2, r5
   108cc:	61da      	str	r2, [r3, #28]
   108ce:	e011      	b.n	108f4 <_irq_priority_set+0x58>
   108d0:	4a0a      	ldr	r2, [pc, #40]	; (108fc <_irq_priority_set+0x60>)
   108d2:	089b      	lsrs	r3, r3, #2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   108d4:	2503      	movs	r5, #3
   108d6:	009b      	lsls	r3, r3, #2
   108d8:	189b      	adds	r3, r3, r2
   108da:	22ff      	movs	r2, #255	; 0xff
   108dc:	4028      	ands	r0, r5
   108de:	40a8      	lsls	r0, r5
   108e0:	0015      	movs	r5, r2
   108e2:	24c0      	movs	r4, #192	; 0xc0
   108e4:	4085      	lsls	r5, r0
   108e6:	400a      	ands	r2, r1
   108e8:	4082      	lsls	r2, r0
   108ea:	00a4      	lsls	r4, r4, #2
   108ec:	591e      	ldr	r6, [r3, r4]
   108ee:	43ae      	bics	r6, r5
   108f0:	4332      	orrs	r2, r6
   108f2:	511a      	str	r2, [r3, r4]
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
}
   108f4:	bd70      	pop	{r4, r5, r6, pc}
   108f6:	46c0      	nop			; (mov r8, r8)
   108f8:	e000ed00 	.word	0xe000ed00
   108fc:	e000e100 	.word	0xe000e100

00010900 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   10900:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	__reserved();
   10902:	f000 f841 	bl	10988 <__hard_fault>
}
   10906:	bd10      	pop	{r4, pc}

00010908 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   10908:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1090a:	f3ef 8410 	mrs	r4, PRIMASK
   1090e:	b672      	cpsid	i
	__asm__ volatile("cpsid i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   10910:	4b05      	ldr	r3, [pc, #20]	; (10928 <_arch_isr_direct_pm+0x20>)
   10912:	6958      	ldr	r0, [r3, #20]
   10914:	2800      	cmp	r0, #0
   10916:	d003      	beq.n	10920 <_arch_isr_direct_pm+0x18>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   10918:	2200      	movs	r2, #0
   1091a:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   1091c:	f000 f966 	bl	10bec <_sys_power_save_idle_exit>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   10920:	2c00      	cmp	r4, #0
   10922:	d100      	bne.n	10926 <_arch_isr_direct_pm+0x1e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   10924:	b662      	cpsie	i
	__asm__ volatile("cpsie i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

}
   10926:	bd10      	pop	{r4, pc}
   10928:	20001abc 	.word	0x20001abc

0001092c <_new_thread>:

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   1092c:	b570      	push	{r4, r5, r6, lr}
   1092e:	001e      	movs	r6, r3

	__ASSERT(!((u32_t)pStackMem & (STACK_ALIGN - 1)),
		 "stack is not aligned properly\n"
		 "%d-byte alignment required\n", STACK_ALIGN);

	char *stackEnd = pStackMem + stackSize;
   10930:	188c      	adds	r4, r1, r2
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   10932:	9b08      	ldr	r3, [sp, #32]
   10934:	9907      	ldr	r1, [sp, #28]
   10936:	2204      	movs	r2, #4

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   10938:	0005      	movs	r5, r0
   1093a:	f001 fa47 	bl	11dcc <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
   1093e:	2207      	movs	r2, #7
   10940:	4394      	bics	r4, r2
   10942:	0022      	movs	r2, r4
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   10944:	2001      	movs	r0, #1

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   10946:	2300      	movs	r3, #0
   10948:	4909      	ldr	r1, [pc, #36]	; (10970 <_new_thread+0x44>)

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
   1094a:	3a20      	subs	r2, #32
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   1094c:	4381      	bics	r1, r0
   1094e:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   10950:	652b      	str	r3, [r5, #80]	; 0x50
   10952:	6191      	str	r1, [r2, #24]
	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
   10954:	9904      	ldr	r1, [sp, #16]

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
	pInitCtx->a1 = (u32_t)pEntry;
   10956:	6016      	str	r6, [r2, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   10958:	6051      	str	r1, [r2, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   1095a:	9905      	ldr	r1, [sp, #20]
   1095c:	6091      	str	r1, [r2, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   1095e:	9906      	ldr	r1, [sp, #24]
   10960:	60d1      	str	r1, [r2, #12]
	pInitCtx->xpsr =
   10962:	2180      	movs	r1, #128	; 0x80
   10964:	0449      	lsls	r1, r1, #17
   10966:	61d1      	str	r1, [r2, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   10968:	64aa      	str	r2, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   1096a:	65ab      	str	r3, [r5, #88]	; 0x58
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */

	thread_monitor_init(thread);
}
   1096c:	bd70      	pop	{r4, r5, r6, pc}
   1096e:	46c0      	nop			; (mov r8, r8)
   10970:	00011c99 	.word	0x00011c99

00010974 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   10974:	4901      	ldr	r1, [pc, #4]	; (1097c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   10976:	2210      	movs	r2, #16
	str r2, [r1]
   10978:	600a      	str	r2, [r1, #0]
	bx lr
   1097a:	4770      	bx	lr
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   1097c:	e000ed10 	.word	0xe000ed10

00010980 <k_cpu_idle>:
	pop {r0}
	mov lr, r0
#endif

#if defined(CONFIG_ARMV6_M)
	cpsie i
   10980:	b662      	cpsie	i
	msr BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   10982:	bf30      	wfi

	bx lr
   10984:	4770      	bx	lr
   10986:	46c0      	nop			; (mov r8, r8)

00010988 <__hard_fault>:
#endif /* CONFIG_ARMV6_M */
SECTION_SUBSEC_FUNC(TEXT,__fault,__reserved)

#if defined(CONFIG_ARMV6_M)
	/* force unlock interrupts */
	cpsie i
   10988:	b662      	cpsie	i

	/* Use EXC_RETURN state to find out if stack frame is on the
	 * MSP or PSP
	 */
	ldr r0, =0x4
   1098a:	2004      	movs	r0, #4
	mov r1, lr
   1098c:	4671      	mov	r1, lr
	tst r1, r0
   1098e:	4201      	tst	r1, r0
	beq _stack_frame_msp
   10990:	d002      	beq.n	10998 <_stack_frame_msp>
	mrs r0, PSP
   10992:	f3ef 8009 	mrs	r0, PSP
	bne _stack_frame_endif
   10996:	d101      	bne.n	1099c <_stack_frame_endif>

00010998 <_stack_frame_msp>:
_stack_frame_msp:
	mrs r0, MSP
   10998:	f3ef 8008 	mrs	r0, MSP

0001099c <_stack_frame_endif>:
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   1099c:	b500      	push	{lr}
	bl _Fault
   1099e:	f7ff ff31 	bl	10804 <_Fault>

	pop {pc}
   109a2:	bd00      	pop	{pc}

000109a4 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   109a4:	b570      	push	{r4, r5, r6, lr}
   109a6:	0004      	movs	r4, r0
	switch (reason) {
   109a8:	3801      	subs	r0, #1
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   109aa:	000d      	movs	r5, r1
	switch (reason) {
   109ac:	2804      	cmp	r0, #4
   109ae:	d80e      	bhi.n	109ce <_NanoFatalErrorHandler+0x2a>
   109b0:	f7ef fbe2 	bl	178 <__gnu_thumb1_case_uqi>
   109b4:	09050d03 	.word	0x09050d03
   109b8:	0b          	.byte	0x0b
   109b9:	00          	.byte	0x00
	case _NANO_ERR_INVALID_TASK_EXIT:
		printk("***** Invalid Exit Software Error! *****\n");
   109ba:	480d      	ldr	r0, [pc, #52]	; (109f0 <_NanoFatalErrorHandler+0x4c>)
   109bc:	e000      	b.n	109c0 <_NanoFatalErrorHandler+0x1c>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
   109be:	480d      	ldr	r0, [pc, #52]	; (109f4 <_NanoFatalErrorHandler+0x50>)
   109c0:	f7f0 ff68 	bl	1894 <printk>
		break;
   109c4:	e007      	b.n	109d6 <_NanoFatalErrorHandler+0x32>

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
   109c6:	480c      	ldr	r0, [pc, #48]	; (109f8 <_NanoFatalErrorHandler+0x54>)
   109c8:	e7fa      	b.n	109c0 <_NanoFatalErrorHandler+0x1c>
		break;

	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
   109ca:	480c      	ldr	r0, [pc, #48]	; (109fc <_NanoFatalErrorHandler+0x58>)
   109cc:	e7f8      	b.n	109c0 <_NanoFatalErrorHandler+0x1c>
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   109ce:	0021      	movs	r1, r4
   109d0:	480b      	ldr	r0, [pc, #44]	; (10a00 <_NanoFatalErrorHandler+0x5c>)
   109d2:	f7f0 ff5f 	bl	1894 <printk>
		break;
	}
	printk("Current thread ID = %p\n"
   109d6:	f000 feef 	bl	117b8 <k_current_get>
   109da:	69aa      	ldr	r2, [r5, #24]
   109dc:	0001      	movs	r1, r0
   109de:	4809      	ldr	r0, [pc, #36]	; (10a04 <_NanoFatalErrorHandler+0x60>)
   109e0:	f7f0 ff58 	bl	1894 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   109e4:	0029      	movs	r1, r5
   109e6:	0020      	movs	r0, r4
   109e8:	f000 f814 	bl	10a14 <_SysFatalErrorHandler>
}
   109ec:	bd70      	pop	{r4, r5, r6, pc}
   109ee:	46c0      	nop			; (mov r8, r8)
   109f0:	00014e4f 	.word	0x00014e4f
   109f4:	00014e79 	.word	0x00014e79
   109f8:	00014e9f 	.word	0x00014e9f
   109fc:	00014eb9 	.word	0x00014eb9
   10a00:	00014ed4 	.word	0x00014ed4
   10a04:	00014ef7 	.word	0x00014ef7

00010a08 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
   10a08:	b510      	push	{r4, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   10a0a:	0001      	movs	r1, r0
   10a0c:	6800      	ldr	r0, [r0, #0]
   10a0e:	f7ff ffc9 	bl	109a4 <_NanoFatalErrorHandler>
}
   10a12:	bd10      	pop	{r4, pc}

00010a14 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   10a14:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   10a16:	2805      	cmp	r0, #5
   10a18:	d01a      	beq.n	10a50 <_SysFatalErrorHandler+0x3c>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   10a1a:	f001 f92b 	bl	11c74 <k_is_in_isr>
   10a1e:	2800      	cmp	r0, #0
   10a20:	d006      	beq.n	10a30 <_SysFatalErrorHandler+0x1c>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   10a22:	f001 f927 	bl	11c74 <k_is_in_isr>
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
   10a26:	490c      	ldr	r1, [pc, #48]	; (10a58 <_SysFatalErrorHandler+0x44>)
   10a28:	2800      	cmp	r0, #0
   10a2a:	d10e      	bne.n	10a4a <_SysFatalErrorHandler+0x36>
   10a2c:	490b      	ldr	r1, [pc, #44]	; (10a5c <_SysFatalErrorHandler+0x48>)
   10a2e:	e00c      	b.n	10a4a <_SysFatalErrorHandler+0x36>
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   10a30:	f001 f92a 	bl	11c88 <_is_thread_essential>
   10a34:	2800      	cmp	r0, #0
   10a36:	d1f4      	bne.n	10a22 <_SysFatalErrorHandler+0xe>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
		goto hang_system;
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   10a38:	4c09      	ldr	r4, [pc, #36]	; (10a60 <_SysFatalErrorHandler+0x4c>)
   10a3a:	480a      	ldr	r0, [pc, #40]	; (10a64 <_SysFatalErrorHandler+0x50>)
   10a3c:	68a1      	ldr	r1, [r4, #8]
   10a3e:	f7f0 ff29 	bl	1894 <printk>
	k_thread_abort(_current);
   10a42:	68a0      	ldr	r0, [r4, #8]
   10a44:	f000 f812 	bl	10a6c <k_thread_abort>

	for (;;) {
		k_cpu_idle();
	}
	CODE_UNREACHABLE;
}
   10a48:	bd10      	pop	{r4, pc}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
   10a4a:	4807      	ldr	r0, [pc, #28]	; (10a68 <_SysFatalErrorHandler+0x54>)
   10a4c:	f7f0 ff22 	bl	1894 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   10a50:	f7ff ff96 	bl	10980 <k_cpu_idle>
   10a54:	e7fc      	b.n	10a50 <_SysFatalErrorHandler+0x3c>
   10a56:	46c0      	nop			; (mov r8, r8)
   10a58:	00014f33 	.word	0x00014f33
   10a5c:	00014f37 	.word	0x00014f37
   10a60:	20001abc 	.word	0x20001abc
   10a64:	00014f68 	.word	0x00014f68
   10a68:	00014f48 	.word	0x00014f48

00010a6c <k_thread_abort>:
#include <wait_q.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void k_thread_abort(k_tid_t thread)
{
   10a6c:	b570      	push	{r4, r5, r6, lr}
   10a6e:	0005      	movs	r5, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   10a70:	f3ef 8410 	mrs	r4, PRIMASK
   10a74:	b672      	cpsid	i
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
   10a76:	f001 f941 	bl	11cfc <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   10a7a:	4b0b      	ldr	r3, [pc, #44]	; (10aa8 <k_thread_abort+0x3c>)
   10a7c:	689b      	ldr	r3, [r3, #8]
   10a7e:	429d      	cmp	r5, r3
   10a80:	d10d      	bne.n	10a9e <k_thread_abort+0x32>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   10a82:	4b0a      	ldr	r3, [pc, #40]	; (10aac <k_thread_abort+0x40>)
   10a84:	685a      	ldr	r2, [r3, #4]
   10a86:	05d2      	lsls	r2, r2, #23
   10a88:	d104      	bne.n	10a94 <k_thread_abort+0x28>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   10a8a:	f000 fec5 	bl	11818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   10a8e:	0020      	movs	r0, r4
   10a90:	f7ff fea4 	bl	107dc <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10a94:	2180      	movs	r1, #128	; 0x80
   10a96:	685a      	ldr	r2, [r3, #4]
   10a98:	0549      	lsls	r1, r1, #21
   10a9a:	430a      	orrs	r2, r1
   10a9c:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   10a9e:	0020      	movs	r0, r4
   10aa0:	f000 fdfe 	bl	116a0 <_reschedule_threads>
}
   10aa4:	bd70      	pop	{r4, r5, r6, pc}
   10aa6:	46c0      	nop			; (mov r8, r8)
   10aa8:	20001abc 	.word	0x20001abc
   10aac:	e000ed00 	.word	0xe000ed00

00010ab0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   10ab0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   10ab2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10ab4:	4a0a      	ldr	r2, [pc, #40]	; (10ae0 <_idle_state_cleared+0x1c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10ab6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   10ab8:	2800      	cmp	r0, #0

#if defined(CONFIG_ARMV6_M)
	beq _idle_state_cleared
   10aba:	d003      	beq.n	10ac4 <_idle_state_cleared>
	movs.n r1, #0
   10abc:	2100      	movs	r1, #0
	/* clear kernel idle state */
	str r1, [r2, #_kernel_offset_to_idle]
   10abe:	6151      	str	r1, [r2, #20]
	blx _sys_power_save_idle_exit
   10ac0:	f000 f894 	bl	10bec <_sys_power_save_idle_exit>

00010ac4 <_idle_state_cleared>:
		blxne	_sys_power_save_idle_exit
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10ac4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   10ac6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
   10aca:	2110      	movs	r1, #16
	subs r0, r1	/* get IRQ number */
   10acc:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
   10ace:	00c0      	lsls	r0, r0, #3
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   10ad0:	4904      	ldr	r1, [pc, #16]	; (10ae4 <_idle_state_cleared+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10ad2:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10ad4:	c909      	ldmia	r1!, {r0, r3}
	pop {r3}
#else
	pop {lr}
#endif
#endif
	blx r3		/* call ISR */
   10ad6:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
   10ad8:	bc08      	pop	{r3}
	mov lr, r3
   10ada:	469e      	mov	lr, r3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   10adc:	e60c      	b.n	106f8 <_IntExit>
   10ade:	0000      	.short	0x0000
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10ae0:	20001abc 	.word	0x20001abc
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   10ae4:	000000a8 	.word	0x000000a8

00010ae8 <__reset>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
   10ae8:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   10aea:	4804      	ldr	r0, [pc, #16]	; (10afc <__reset+0x14>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   10aec:	4904      	ldr	r1, [pc, #16]	; (10b00 <__reset+0x18>)
    adds r0, r0, r1
   10aee:	1840      	adds	r0, r0, r1
    msr PSP, r0
   10af0:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   10af4:	2002      	movs	r0, #2
    msr CONTROL, r0
   10af6:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   10afa:	e005      	b.n	10b08 <_PrepC>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   10afc:	2000310c 	.word	0x2000310c
    ldr r1, =CONFIG_ISR_STACK_SIZE
   10b00:	00000800 	.word	0x00000800

00010b04 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   10b04:	bf30      	wfi
    b _SysNmiOnReset
   10b06:	e7fd      	b.n	10b04 <_SysNmiOnReset>

00010b08 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   10b08:	b510      	push	{r4, lr}
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   10b0a:	f000 f89f 	bl	10c4c <_bss_zero>
	_data_copy();
   10b0e:	f000 f8a9 	bl	10c64 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   10b12:	f000 f8c9 	bl	10ca8 <_Cstart>

00010b16 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   10b16:	b510      	push	{r4, lr}
	handler();
   10b18:	f7ff fff4 	bl	10b04 <_SysNmiOnReset>
	_ExcExit();
   10b1c:	f7ff fdf2 	bl	10704 <_ExcExit>
}
   10b20:	bd10      	pop	{r4, pc}

00010b22 <atomic_inc>:
   10b22:	f3ef 8210 	mrs	r2, PRIMASK
   10b26:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   10b28:	6803      	ldr	r3, [r0, #0]
	(*target)++;
   10b2a:	1c59      	adds	r1, r3, #1
   10b2c:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   10b2e:	2a00      	cmp	r2, #0
   10b30:	d100      	bne.n	10b34 <atomic_inc+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   10b32:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   10b34:	0018      	movs	r0, r3
   10b36:	4770      	bx	lr

00010b38 <atomic_dec>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   10b38:	f3ef 8210 	mrs	r2, PRIMASK
   10b3c:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   10b3e:	6803      	ldr	r3, [r0, #0]
	(*target)--;
   10b40:	1e59      	subs	r1, r3, #1
   10b42:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   10b44:	2a00      	cmp	r2, #0
   10b46:	d100      	bne.n	10b4a <atomic_dec+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   10b48:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   10b4a:	0018      	movs	r0, r3
   10b4c:	4770      	bx	lr

00010b4e <atomic_get>:
 *
 * @return The value read from <target>
 */
atomic_val_t atomic_get(const atomic_t *target)
{
	return *target;
   10b4e:	6800      	ldr	r0, [r0, #0]
}
   10b50:	4770      	bx	lr

00010b52 <atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
   10b52:	0003      	movs	r3, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   10b54:	f3ef 8210 	mrs	r2, PRIMASK
   10b58:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   10b5a:	6800      	ldr	r0, [r0, #0]
	*target = value;
   10b5c:	6019      	str	r1, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   10b5e:	2a00      	cmp	r2, #0
   10b60:	d100      	bne.n	10b64 <atomic_set+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   10b62:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   10b64:	4770      	bx	lr

00010b66 <atomic_or>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   10b66:	f3ef 8210 	mrs	r2, PRIMASK
   10b6a:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   10b6c:	6803      	ldr	r3, [r0, #0]
	*target |= value;
   10b6e:	4319      	orrs	r1, r3
   10b70:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   10b72:	2a00      	cmp	r2, #0
   10b74:	d100      	bne.n	10b78 <atomic_or+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   10b76:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   10b78:	0018      	movs	r0, r3
   10b7a:	4770      	bx	lr

00010b7c <atomic_and>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   10b7c:	f3ef 8210 	mrs	r2, PRIMASK
   10b80:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   10b82:	6803      	ldr	r3, [r0, #0]
	*target &= value;
   10b84:	4019      	ands	r1, r3
   10b86:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   10b88:	2a00      	cmp	r2, #0
   10b8a:	d100      	bne.n	10b8e <atomic_and+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   10b8c:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   10b8e:	0018      	movs	r0, r3
   10b90:	4770      	bx	lr
	...

00010b94 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   10b94:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   10b96:	4e07      	ldr	r6, [pc, #28]	; (10bb4 <_sys_device_do_config_level+0x20>)
   10b98:	0083      	lsls	r3, r0, #2
   10b9a:	599d      	ldr	r5, [r3, r6]
   10b9c:	3001      	adds	r0, #1
   10b9e:	0084      	lsls	r4, r0, #2
   10ba0:	5933      	ldr	r3, [r6, r4]
   10ba2:	429d      	cmp	r5, r3
   10ba4:	d205      	bcs.n	10bb2 <_sys_device_do_config_level+0x1e>
								info++) {
		struct device_config *device = info->config;

		device->init(info);
   10ba6:	682b      	ldr	r3, [r5, #0]
   10ba8:	0028      	movs	r0, r5
   10baa:	685b      	ldr	r3, [r3, #4]
   10bac:	4798      	blx	r3
void _sys_device_do_config_level(int level)
{
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
								info++) {
   10bae:	350c      	adds	r5, #12
   10bb0:	e7f6      	b.n	10ba0 <_sys_device_do_config_level+0xc>
		struct device_config *device = info->config;

		device->init(info);
	}
}
   10bb2:	bd70      	pop	{r4, r5, r6, pc}
   10bb4:	00014ff4 	.word	0x00014ff4

00010bb8 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   10bb8:	b570      	push	{r4, r5, r6, lr}
   10bba:	0005      	movs	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   10bbc:	4c09      	ldr	r4, [pc, #36]	; (10be4 <device_get_binding+0x2c>)
   10bbe:	4b0a      	ldr	r3, [pc, #40]	; (10be8 <device_get_binding+0x30>)
   10bc0:	429c      	cmp	r4, r3
   10bc2:	d00d      	beq.n	10be0 <device_get_binding+0x28>
		if (info->driver_api && !strcmp(name, info->config->name)) {
   10bc4:	6863      	ldr	r3, [r4, #4]
   10bc6:	2b00      	cmp	r3, #0
   10bc8:	d101      	bne.n	10bce <device_get_binding+0x16>

struct device *device_get_binding(const char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   10bca:	340c      	adds	r4, #12
   10bcc:	e7f7      	b.n	10bbe <device_get_binding+0x6>
		if (info->driver_api && !strcmp(name, info->config->name)) {
   10bce:	6823      	ldr	r3, [r4, #0]
   10bd0:	0028      	movs	r0, r5
   10bd2:	6819      	ldr	r1, [r3, #0]
   10bd4:	f7f0 f81a 	bl	c0c <strcmp>
   10bd8:	2800      	cmp	r0, #0
   10bda:	d1f6      	bne.n	10bca <device_get_binding+0x12>
   10bdc:	0020      	movs	r0, r4
   10bde:	e000      	b.n	10be2 <device_get_binding+0x2a>
			return info;
		}
	}

	return NULL;
   10be0:	2000      	movs	r0, #0
}
   10be2:	bd70      	pop	{r4, r5, r6, pc}
   10be4:	20000580 	.word	0x20000580
   10be8:	200005ec 	.word	0x200005ec

00010bec <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   10bec:	b510      	push	{r4, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   10bee:	1c43      	adds	r3, r0, #1
   10bf0:	d003      	beq.n	10bfa <_sys_power_save_idle_exit+0xe>
   10bf2:	4b03      	ldr	r3, [pc, #12]	; (10c00 <_sys_power_save_idle_exit+0x14>)
   10bf4:	681b      	ldr	r3, [r3, #0]
   10bf6:	4298      	cmp	r0, r3
   10bf8:	db01      	blt.n	10bfe <_sys_power_save_idle_exit+0x12>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   10bfa:	f7f0 f97f 	bl	efc <_timer_idle_exit>
	}
}
   10bfe:	bd10      	pop	{r4, pc}
   10c00:	20000578 	.word	0x20000578

00010c04 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   10c04:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   10c06:	f3ef 8310 	mrs	r3, PRIMASK
   10c0a:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   10c0c:	4d0b      	ldr	r5, [pc, #44]	; (10c3c <idle+0x38>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10c0e:	4a0c      	ldr	r2, [pc, #48]	; (10c40 <idle+0x3c>)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   10c10:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10c12:	4293      	cmp	r3, r2
   10c14:	d009      	beq.n	10c2a <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   10c16:	2b00      	cmp	r3, #0
   10c18:	d007      	beq.n	10c2a <idle+0x26>
   10c1a:	691c      	ldr	r4, [r3, #16]
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   10c1c:	1c63      	adds	r3, r4, #1
   10c1e:	d006      	beq.n	10c2e <idle+0x2a>
   10c20:	4b08      	ldr	r3, [pc, #32]	; (10c44 <idle+0x40>)
   10c22:	681b      	ldr	r3, [r3, #0]
   10c24:	42a3      	cmp	r3, r4
   10c26:	dd02      	ble.n	10c2e <idle+0x2a>
   10c28:	e004      	b.n	10c34 <idle+0x30>
   10c2a:	2401      	movs	r4, #1
   10c2c:	4264      	negs	r4, r4
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   10c2e:	0020      	movs	r0, r4
   10c30:	f7f0 f94e 	bl	ed0 <_timer_idle_enter>
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   10c34:	616c      	str	r4, [r5, #20]
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   10c36:	f7ff fea3 	bl	10980 <k_cpu_idle>
   10c3a:	e7e4      	b.n	10c06 <idle+0x2>
   10c3c:	20001abc 	.word	0x20001abc
   10c40:	20001ac8 	.word	0x20001ac8
   10c44:	20000578 	.word	0x20000578

00010c48 <k_call_stacks_analyze>:
#endif /* CONFIG_ARC */
	STACK_ANALYZE("interrupt", _interrupt_stack);
	STACK_ANALYZE("workqueue", sys_work_q_stack);

#endif /* CONFIG_INIT_STACKS && CONFIG_PRINTK */
}
   10c48:	4770      	bx	lr
	...

00010c4c <_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
   10c4c:	b510      	push	{r4, lr}
	memset(&__bss_start, 0,
   10c4e:	4803      	ldr	r0, [pc, #12]	; (10c5c <_bss_zero+0x10>)
   10c50:	4a03      	ldr	r2, [pc, #12]	; (10c60 <_bss_zero+0x14>)
   10c52:	2100      	movs	r1, #0
   10c54:	1a12      	subs	r2, r2, r0
   10c56:	f7f0 f824 	bl	ca2 <memset>
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
#ifdef CONFIG_APPLICATION_MEMORY
	memset(&__app_bss_start, 0,
		 ((u32_t) &__app_bss_end - (u32_t) &__app_bss_start));
#endif
}
   10c5a:	bd10      	pop	{r4, pc}
   10c5c:	200006b8 	.word	0x200006b8
   10c60:	20001d6c 	.word	0x20001d6c

00010c64 <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
   10c64:	b510      	push	{r4, lr}
	memcpy(&__data_ram_start, &__data_rom_start,
   10c66:	4803      	ldr	r0, [pc, #12]	; (10c74 <_data_copy+0x10>)
   10c68:	4a03      	ldr	r2, [pc, #12]	; (10c78 <_data_copy+0x14>)
   10c6a:	4904      	ldr	r1, [pc, #16]	; (10c7c <_data_copy+0x18>)
   10c6c:	1a12      	subs	r2, r2, r0
   10c6e:	f7ef ffee 	bl	c4e <memcpy>
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
#ifdef CONFIG_APPLICATION_MEMORY
	memcpy(&__app_data_ram_start, &__app_data_rom_start,
		 ((u32_t) &__app_data_ram_end - (u32_t) &__app_data_ram_start));
#endif
}
   10c72:	bd10      	pop	{r4, pc}
   10c74:	20000000 	.word	0x20000000
   10c78:	200006b8 	.word	0x200006b8
   10c7c:	00015010 	.word	0x00015010

00010c80 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
   10c80:	b510      	push	{r4, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   10c82:	2002      	movs	r0, #2
   10c84:	f7ff ff86 	bl	10b94 <_sys_device_do_config_level>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   10c88:	2003      	movs	r0, #3
   10c8a:	f7ff ff83 	bl	10b94 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   10c8e:	f001 f85d 	bl	11d4c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   10c92:	f7ef ff23 	bl	adc <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   10c96:	2101      	movs	r1, #1
   10c98:	4a02      	ldr	r2, [pc, #8]	; (10ca4 <_main+0x24>)
   10c9a:	7a13      	ldrb	r3, [r2, #8]
   10c9c:	438b      	bics	r3, r1
   10c9e:	7213      	strb	r3, [r2, #8]
}
   10ca0:	bd10      	pop	{r4, pc}
   10ca2:	46c0      	nop			; (mov r8, r8)
   10ca4:	200019fc 	.word	0x200019fc

00010ca8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   10ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10caa:	b087      	sub	sp, #28
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   10cac:	f7ff fd3c 	bl	10728 <_IntLibInit>
   10cb0:	4b2f      	ldr	r3, [pc, #188]	; (10d70 <_Cstart+0xc8>)
   10cb2:	4a30      	ldr	r2, [pc, #192]	; (10d74 <_Cstart+0xcc>)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   10cb4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   10cb6:	605b      	str	r3, [r3, #4]
   10cb8:	3308      	adds	r3, #8

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   10cba:	429a      	cmp	r2, r3
   10cbc:	d1fa      	bne.n	10cb4 <_Cstart+0xc>
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;

	_new_thread(_main_thread, _main_stack,
   10cbe:	2400      	movs	r4, #0
   10cc0:	2301      	movs	r3, #1
   10cc2:	2280      	movs	r2, #128	; 0x80
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
   10cc4:	4d2c      	ldr	r5, [pc, #176]	; (10d78 <_Cstart+0xd0>)
   10cc6:	4e2d      	ldr	r6, [pc, #180]	; (10d7c <_Cstart+0xd4>)

	_new_thread(_main_thread, _main_stack,
   10cc8:	492d      	ldr	r1, [pc, #180]	; (10d80 <_Cstart+0xd8>)
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
   10cca:	61b5      	str	r5, [r6, #24]

	_new_thread(_main_thread, _main_stack,
   10ccc:	0028      	movs	r0, r5
   10cce:	9304      	str	r3, [sp, #16]
   10cd0:	9403      	str	r4, [sp, #12]
   10cd2:	9402      	str	r4, [sp, #8]
   10cd4:	9401      	str	r4, [sp, #4]
   10cd6:	9400      	str	r4, [sp, #0]
   10cd8:	4b2a      	ldr	r3, [pc, #168]	; (10d84 <_Cstart+0xdc>)
   10cda:	00d2      	lsls	r2, r2, #3
   10cdc:	f7ff fe26 	bl	1092c <_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10ce0:	2204      	movs	r2, #4
   10ce2:	7a6b      	ldrb	r3, [r5, #9]
		    MAIN_STACK_SIZE, _main, NULL, NULL, NULL,
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);
   10ce4:	0028      	movs	r0, r5
   10ce6:	4393      	bics	r3, r2
   10ce8:	726b      	strb	r3, [r5, #9]
   10cea:	f000 fc2f 	bl	1154c <_add_thread_to_ready_q>

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_thread, _idle_stack,
   10cee:	2301      	movs	r3, #1
   10cf0:	2280      	movs	r2, #128	; 0x80
   10cf2:	4f25      	ldr	r7, [pc, #148]	; (10d88 <_Cstart+0xe0>)
   10cf4:	9304      	str	r3, [sp, #16]
   10cf6:	330e      	adds	r3, #14
   10cf8:	9303      	str	r3, [sp, #12]
   10cfa:	4924      	ldr	r1, [pc, #144]	; (10d8c <_Cstart+0xe4>)
   10cfc:	0038      	movs	r0, r7
   10cfe:	9402      	str	r4, [sp, #8]
   10d00:	9401      	str	r4, [sp, #4]
   10d02:	9400      	str	r4, [sp, #0]
   10d04:	4b22      	ldr	r3, [pc, #136]	; (10d90 <_Cstart+0xe8>)
   10d06:	0052      	lsls	r2, r2, #1
   10d08:	f7ff fe10 	bl	1092c <_new_thread>
   10d0c:	2204      	movs	r2, #4
   10d0e:	7a7b      	ldrb	r3, [r7, #9]
		    IDLE_STACK_SIZE, idle, NULL, NULL, NULL,
		    K_LOWEST_THREAD_PRIO, K_ESSENTIAL);
	_mark_thread_as_started(_idle_thread);
	_add_thread_to_ready_q(_idle_thread);
   10d10:	0038      	movs	r0, r7
   10d12:	4393      	bics	r3, r2
   10d14:	727b      	strb	r3, [r7, #9]
   10d16:	f000 fc19 	bl	1154c <_add_thread_to_ready_q>
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   10d1a:	2280      	movs	r2, #128	; 0x80
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   10d1c:	4b1d      	ldr	r3, [pc, #116]	; (10d94 <_Cstart+0xec>)
   10d1e:	0112      	lsls	r2, r2, #4
   10d20:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   10d22:	6133      	str	r3, [r6, #16]
   10d24:	4b1c      	ldr	r3, [pc, #112]	; (10d98 <_Cstart+0xf0>)
   10d26:	189b      	adds	r3, r3, r2
   10d28:	f383 8808 	msr	MSP, r3
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   10d2c:	4a1b      	ldr	r2, [pc, #108]	; (10d9c <_Cstart+0xf4>)
   10d2e:	4b1c      	ldr	r3, [pc, #112]	; (10da0 <_Cstart+0xf8>)
   10d30:	6a11      	ldr	r1, [r2, #32]
   10d32:	400b      	ands	r3, r1
   10d34:	21c0      	movs	r1, #192	; 0xc0
   10d36:	0409      	lsls	r1, r1, #16
   10d38:	430b      	orrs	r3, r1
   10d3a:	6213      	str	r3, [r2, #32]
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   10d3c:	f7ff fd8c 	bl	10858 <_FaultInit>
	_CpuIdleInit();
   10d40:	f7ff fe18 	bl	10974 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10d44:	0020      	movs	r0, r4
   10d46:	f7ff ff25 	bl	10b94 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   10d4a:	2001      	movs	r0, #1
   10d4c:	f7ff ff22 	bl	10b94 <_sys_device_do_config_level>

	_current = main_thread;

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   10d50:	2280      	movs	r2, #128	; 0x80
   10d52:	4b0b      	ldr	r3, [pc, #44]	; (10d80 <_Cstart+0xd8>)
   10d54:	00d2      	lsls	r2, r2, #3
   10d56:	189b      	adds	r3, r3, r2
   10d58:	2207      	movs	r2, #7
   10d5a:	490a      	ldr	r1, [pc, #40]	; (10d84 <_Cstart+0xdc>)
   10d5c:	4393      	bics	r3, r2
	char *start_of_main_stack;

	start_of_main_stack = main_stack + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   10d5e:	60b5      	str	r5, [r6, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   10d60:	4a10      	ldr	r2, [pc, #64]	; (10da4 <_Cstart+0xfc>)
   10d62:	000c      	movs	r4, r1
   10d64:	f383 8809 	msr	PSP, r3
   10d68:	b662      	cpsie	i
   10d6a:	1c20      	adds	r0, r4, #0
   10d6c:	4710      	bx	r2
   10d6e:	46c0      	nop			; (mov r8, r8)
   10d70:	20001adc 	.word	0x20001adc
   10d74:	20001bdc 	.word	0x20001bdc
   10d78:	200019fc 	.word	0x200019fc
   10d7c:	20001abc 	.word	0x20001abc
   10d80:	20002c0c 	.word	0x20002c0c
   10d84:	00010c81 	.word	0x00010c81
   10d88:	20001a5c 	.word	0x20001a5c
   10d8c:	2000300c 	.word	0x2000300c
   10d90:	00010c05 	.word	0x00010c05
   10d94:	20001ac8 	.word	0x20001ac8
   10d98:	2000310c 	.word	0x2000310c
   10d9c:	e000ed00 	.word	0xe000ed00
   10da0:	ff00ffff 	.word	0xff00ffff
   10da4:	00011c99 	.word	0x00011c99

00010da8 <adjust_owner_prio.isra.6>:
	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
   10da8:	230a      	movs	r3, #10
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
   10daa:	b570      	push	{r4, r5, r6, lr}
{
	if (mutex->owner->base.prio != new_prio) {
   10dac:	56c3      	ldrsb	r3, [r0, r3]
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
   10dae:	0004      	movs	r4, r0
   10db0:	000d      	movs	r5, r1
{
	if (mutex->owner->base.prio != new_prio) {
   10db2:	428b      	cmp	r3, r1
   10db4:	d00d      	beq.n	10dd2 <adjust_owner_prio.isra.6+0x2a>
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   10db6:	7a43      	ldrb	r3, [r0, #9]
   10db8:	06db      	lsls	r3, r3, #27
   10dba:	d109      	bne.n	10dd0 <adjust_owner_prio.isra.6+0x28>
   10dbc:	6a03      	ldr	r3, [r0, #32]
   10dbe:	3301      	adds	r3, #1
   10dc0:	d106      	bne.n	10dd0 <adjust_owner_prio.isra.6+0x28>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   10dc2:	f000 fbeb 	bl	1159c <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   10dc6:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   10dc8:	0020      	movs	r0, r4
   10dca:	f000 fbbf 	bl	1154c <_add_thread_to_ready_q>
   10dce:	e000      	b.n	10dd2 <adjust_owner_prio.isra.6+0x2a>
	} else {
		thread->base.prio = prio;
   10dd0:	72a5      	strb	r5, [r4, #10]
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
   10dd2:	bd70      	pop	{r4, r5, r6, pc}

00010dd4 <k_mutex_lock>:

int k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   10dd4:	b570      	push	{r4, r5, r6, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   10dd6:	4a2f      	ldr	r2, [pc, #188]	; (10e94 <k_mutex_lock+0xc0>)
   10dd8:	000d      	movs	r5, r1
   10dda:	6891      	ldr	r1, [r2, #8]
   10ddc:	0004      	movs	r4, r0
   10dde:	7acb      	ldrb	r3, [r1, #11]
   10de0:	3b01      	subs	r3, #1
   10de2:	72cb      	strb	r3, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   10de4:	68c3      	ldr	r3, [r0, #12]
   10de6:	0010      	movs	r0, r2
   10de8:	2b00      	cmp	r3, #0
   10dea:	d005      	beq.n	10df8 <k_mutex_lock+0x24>
   10dec:	68a1      	ldr	r1, [r4, #8]
   10dee:	6892      	ldr	r2, [r2, #8]
   10df0:	4291      	cmp	r1, r2
   10df2:	d10d      	bne.n	10e10 <k_mutex_lock+0x3c>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   10df4:	6922      	ldr	r2, [r4, #16]
   10df6:	e002      	b.n	10dfe <k_mutex_lock+0x2a>
   10df8:	6892      	ldr	r2, [r2, #8]
   10dfa:	7a92      	ldrb	r2, [r2, #10]
   10dfc:	b252      	sxtb	r2, r2
					mutex->owner_orig_prio;

		mutex->lock_count++;
   10dfe:	3301      	adds	r3, #1
   10e00:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   10e02:	6883      	ldr	r3, [r0, #8]

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   10e04:	6122      	str	r2, [r4, #16]
					_current->base.prio :
					mutex->owner_orig_prio;

		mutex->lock_count++;
		mutex->owner = _current;
   10e06:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   10e08:	f000 fc64 	bl	116d4 <k_sched_unlock>

		return 0;
   10e0c:	2000      	movs	r0, #0
   10e0e:	e040      	b.n	10e92 <k_mutex_lock+0xbe>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   10e10:	2d00      	cmp	r5, #0
   10e12:	d103      	bne.n	10e1c <k_mutex_lock+0x48>
		k_sched_unlock();
   10e14:	f000 fc5e 	bl	116d4 <k_sched_unlock>
		return -EBUSY;
   10e18:	2010      	movs	r0, #16
   10e1a:	e039      	b.n	10e90 <k_mutex_lock+0xbc>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   10e1c:	230a      	movs	r3, #10
   10e1e:	56cb      	ldrsb	r3, [r1, r3]
   10e20:	210a      	movs	r1, #10
   10e22:	5651      	ldrsb	r1, [r2, r1]
   10e24:	4299      	cmp	r1, r3
   10e26:	dd00      	ble.n	10e2a <k_mutex_lock+0x56>
   10e28:	0019      	movs	r1, r3
   10e2a:	43cb      	mvns	r3, r1
   10e2c:	17db      	asrs	r3, r3, #31
   10e2e:	4019      	ands	r1, r3
   10e30:	f3ef 8610 	mrs	r6, PRIMASK
   10e34:	b672      	cpsid	i

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   10e36:	230a      	movs	r3, #10
   10e38:	68a0      	ldr	r0, [r4, #8]
   10e3a:	56c3      	ldrsb	r3, [r0, r3]
   10e3c:	428b      	cmp	r3, r1
   10e3e:	dd01      	ble.n	10e44 <k_mutex_lock+0x70>
		adjust_owner_prio(mutex, new_prio);
   10e40:	f7ff ffb2 	bl	10da8 <adjust_owner_prio.isra.6>
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   10e44:	0020      	movs	r0, r4
   10e46:	0029      	movs	r1, r5
   10e48:	f000 fc08 	bl	1165c <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   10e4c:	f000 fce4 	bl	11818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   10e50:	0030      	movs	r0, r6
   10e52:	f7ff fcc3 	bl	107dc <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   10e56:	2800      	cmp	r0, #0
   10e58:	d0d6      	beq.n	10e08 <k_mutex_lock+0x34>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   10e5a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10e5c:	42a3      	cmp	r3, r4
   10e5e:	d100      	bne.n	10e62 <k_mutex_lock+0x8e>
   10e60:	2300      	movs	r3, #0
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   10e62:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   10e64:	2b00      	cmp	r3, #0
   10e66:	d007      	beq.n	10e78 <k_mutex_lock+0xa4>

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
   10e68:	7a9b      	ldrb	r3, [r3, #10]
   10e6a:	b25b      	sxtb	r3, r3
   10e6c:	4299      	cmp	r1, r3
   10e6e:	dd00      	ble.n	10e72 <k_mutex_lock+0x9e>
   10e70:	0019      	movs	r1, r3
   10e72:	43cb      	mvns	r3, r1
   10e74:	17db      	asrs	r3, r3, #31
   10e76:	4019      	ands	r1, r3
   10e78:	f3ef 8510 	mrs	r5, PRIMASK
   10e7c:	b672      	cpsid	i
						     new_prio) : new_prio;

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   10e7e:	68a0      	ldr	r0, [r4, #8]
   10e80:	f7ff ff92 	bl	10da8 <adjust_owner_prio.isra.6>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   10e84:	2d00      	cmp	r5, #0
   10e86:	d100      	bne.n	10e8a <k_mutex_lock+0xb6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   10e88:	b662      	cpsie	i
	irq_unlock(key);

	k_sched_unlock();
   10e8a:	f000 fc23 	bl	116d4 <k_sched_unlock>

	return -EAGAIN;
   10e8e:	200b      	movs	r0, #11
   10e90:	4240      	negs	r0, r0
}
   10e92:	bd70      	pop	{r4, r5, r6, pc}
   10e94:	20001abc 	.word	0x20001abc

00010e98 <k_mutex_unlock>:

void k_mutex_unlock(struct k_mutex *mutex)
{
   10e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e9a:	4e34      	ldr	r6, [pc, #208]	; (10f6c <k_mutex_unlock+0xd4>)
   10e9c:	0005      	movs	r5, r0
   10e9e:	68b2      	ldr	r2, [r6, #8]
   10ea0:	7ad3      	ldrb	r3, [r2, #11]
   10ea2:	3b01      	subs	r3, #1
   10ea4:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   10ea6:	68c3      	ldr	r3, [r0, #12]
   10ea8:	3b01      	subs	r3, #1
   10eaa:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   10eac:	2b00      	cmp	r3, #0
   10eae:	d002      	beq.n	10eb6 <k_mutex_unlock+0x1e>
		k_sched_unlock();
   10eb0:	f000 fc10 	bl	116d4 <k_sched_unlock>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
   10eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   10eb6:	f3ef 8710 	mrs	r7, PRIMASK
   10eba:	b672      	cpsid	i
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   10ebc:	6901      	ldr	r1, [r0, #16]
   10ebe:	6880      	ldr	r0, [r0, #8]
   10ec0:	f7ff ff72 	bl	10da8 <adjust_owner_prio.isra.6>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   10ec4:	4b2a      	ldr	r3, [pc, #168]	; (10f70 <k_mutex_unlock+0xd8>)
   10ec6:	682c      	ldr	r4, [r5, #0]
   10ec8:	681b      	ldr	r3, [r3, #0]
   10eca:	2b00      	cmp	r3, #0
   10ecc:	d00b      	beq.n	10ee6 <k_mutex_unlock+0x4e>
   10ece:	42a5      	cmp	r5, r4
   10ed0:	d042      	beq.n	10f58 <k_mutex_unlock+0xc0>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   10ed2:	2c00      	cmp	r4, #0
   10ed4:	d040      	beq.n	10f58 <k_mutex_unlock+0xc0>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   10ed6:	6a23      	ldr	r3, [r4, #32]
   10ed8:	3302      	adds	r3, #2
   10eda:	d108      	bne.n	10eee <k_mutex_unlock+0x56>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   10edc:	686b      	ldr	r3, [r5, #4]
   10ede:	42a3      	cmp	r3, r4
   10ee0:	d03a      	beq.n	10f58 <k_mutex_unlock+0xc0>
   10ee2:	6824      	ldr	r4, [r4, #0]
   10ee4:	e7f5      	b.n	10ed2 <k_mutex_unlock+0x3a>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10ee6:	42a5      	cmp	r5, r4
   10ee8:	d036      	beq.n	10f58 <k_mutex_unlock+0xc0>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   10eea:	2c00      	cmp	r4, #0
   10eec:	d034      	beq.n	10f58 <k_mutex_unlock+0xc0>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   10eee:	6863      	ldr	r3, [r4, #4]
   10ef0:	6822      	ldr	r2, [r4, #0]
   10ef2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   10ef4:	6822      	ldr	r2, [r4, #0]
   10ef6:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   10ef8:	2202      	movs	r2, #2
   10efa:	7a63      	ldrb	r3, [r4, #9]
   10efc:	4393      	bics	r3, r2
   10efe:	7263      	strb	r3, [r4, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   10f00:	6a23      	ldr	r3, [r4, #32]
   10f02:	1c5a      	adds	r2, r3, #1
   10f04:	d010      	beq.n	10f28 <k_mutex_unlock+0x90>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   10f06:	0022      	movs	r2, r4
   10f08:	6931      	ldr	r1, [r6, #16]
   10f0a:	3210      	adds	r2, #16
   10f0c:	4291      	cmp	r1, r2
   10f0e:	d003      	beq.n	10f18 <k_mutex_unlock+0x80>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   10f10:	6922      	ldr	r2, [r4, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   10f12:	6911      	ldr	r1, [r2, #16]
   10f14:	18cb      	adds	r3, r1, r3
   10f16:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   10f18:	6963      	ldr	r3, [r4, #20]
   10f1a:	6922      	ldr	r2, [r4, #16]
   10f1c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   10f1e:	6922      	ldr	r2, [r4, #16]
   10f20:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   10f22:	2301      	movs	r3, #1
   10f24:	425b      	negs	r3, r3
   10f26:	6223      	str	r3, [r4, #32]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10f28:	7a63      	ldrb	r3, [r4, #9]
   10f2a:	2204      	movs	r2, #4
   10f2c:	0019      	movs	r1, r3
   10f2e:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   10f30:	221b      	movs	r2, #27
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10f32:	7261      	strb	r1, [r4, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   10f34:	4213      	tst	r3, r2
   10f36:	d102      	bne.n	10f3e <k_mutex_unlock+0xa6>
   10f38:	6a23      	ldr	r3, [r4, #32]
   10f3a:	3301      	adds	r3, #1
   10f3c:	d012      	beq.n	10f64 <k_mutex_unlock+0xcc>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   10f3e:	2f00      	cmp	r7, #0
   10f40:	d100      	bne.n	10f44 <k_mutex_unlock+0xac>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   10f42:	b662      	cpsie	i
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   10f44:	2300      	movs	r3, #0
   10f46:	65e3      	str	r3, [r4, #92]	; 0x5c
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
		mutex->lock_count++;
   10f48:	68eb      	ldr	r3, [r5, #12]
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   10f4a:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   10f4c:	3301      	adds	r3, #1
   10f4e:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   10f50:	230a      	movs	r3, #10
   10f52:	56e3      	ldrsb	r3, [r4, r3]
   10f54:	612b      	str	r3, [r5, #16]
   10f56:	e7ab      	b.n	10eb0 <k_mutex_unlock+0x18>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   10f58:	2f00      	cmp	r7, #0
   10f5a:	d100      	bne.n	10f5e <k_mutex_unlock+0xc6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   10f5c:	b662      	cpsie	i
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
   10f5e:	2300      	movs	r3, #0
   10f60:	60ab      	str	r3, [r5, #8]
   10f62:	e7a5      	b.n	10eb0 <k_mutex_unlock+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   10f64:	0020      	movs	r0, r4
   10f66:	f000 faf1 	bl	1154c <_add_thread_to_ready_q>
   10f6a:	e7e8      	b.n	10f3e <k_mutex_unlock+0xa6>
   10f6c:	20001abc 	.word	0x20001abc
   10f70:	20001ce8 	.word	0x20001ce8

00010f74 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   10f74:	230c      	movs	r3, #12
   10f76:	b510      	push	{r4, lr}
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;
   10f78:	2400      	movs	r4, #0
   10f7a:	434b      	muls	r3, r1
   10f7c:	18c0      	adds	r0, r0, r3
/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
	for (; last_registered >= 0; last_registered--) {
   10f7e:	2900      	cmp	r1, #0
   10f80:	db17      	blt.n	10fb2 <clear_event_registrations+0x3e>
/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;

	switch (event->type) {
   10f82:	7943      	ldrb	r3, [r0, #5]
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;
   10f84:	6004      	str	r4, [r0, #0]

	switch (event->type) {
   10f86:	071b      	lsls	r3, r3, #28
   10f88:	0f1b      	lsrs	r3, r3, #28
   10f8a:	2b02      	cmp	r3, #2
   10f8c:	d006      	beq.n	10f9c <clear_event_registrations+0x28>
   10f8e:	2b04      	cmp	r3, #4
   10f90:	d004      	beq.n	10f9c <clear_event_registrations+0x28>
   10f92:	2b01      	cmp	r3, #1
   10f94:	d104      	bne.n	10fa0 <clear_event_registrations+0x2c>
		__ASSERT(event->queue, "invalid queue\n");
		event->queue->poll_event = NULL;
		break;
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->signal, "invalid poll signal\n");
		event->signal->poll_event = NULL;
   10f96:	6883      	ldr	r3, [r0, #8]
   10f98:	601c      	str	r4, [r3, #0]
   10f9a:	e001      	b.n	10fa0 <clear_event_registrations+0x2c>
		__ASSERT(event->sem, "invalid semaphore\n");
		event->sem->poll_event = NULL;
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue, "invalid queue\n");
		event->queue->poll_event = NULL;
   10f9c:	6883      	ldr	r3, [r0, #8]
   10f9e:	611c      	str	r4, [r3, #16]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   10fa0:	2a00      	cmp	r2, #0
   10fa2:	d100      	bne.n	10fa6 <clear_event_registrations+0x32>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   10fa4:	b662      	cpsie	i
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   10fa6:	f3ef 8210 	mrs	r2, PRIMASK
   10faa:	b672      	cpsid	i
/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
	for (; last_registered >= 0; last_registered--) {
   10fac:	3901      	subs	r1, #1
   10fae:	380c      	subs	r0, #12
   10fb0:	e7e5      	b.n	10f7e <clear_event_registrations+0xa>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   10fb2:	bd10      	pop	{r4, pc}

00010fb4 <_signal_poll_event>:

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
	*must_reschedule = 0;
   10fb4:	2300      	movs	r3, #0
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   10fb6:	b570      	push	{r4, r5, r6, lr}
	*must_reschedule = 0;
   10fb8:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   10fba:	6803      	ldr	r3, [r0, #0]
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   10fbc:	0004      	movs	r4, r0
   10fbe:	000d      	movs	r5, r1
   10fc0:	0016      	movs	r6, r2
	*must_reschedule = 0;

	if (!event->poller) {
   10fc2:	2b00      	cmp	r3, #0
   10fc4:	d043      	beq.n	1104e <_signal_poll_event+0x9a>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   10fc6:	6818      	ldr	r0, [r3, #0]
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
   10fc8:	2220      	movs	r2, #32
   10fca:	7a43      	ldrb	r3, [r0, #9]
   10fcc:	0019      	movs	r1, r3
   10fce:	4391      	bics	r1, r2

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   10fd0:	2202      	movs	r2, #2
   10fd2:	7241      	strb	r1, [r0, #9]
   10fd4:	4213      	tst	r3, r2
   10fd6:	d03a      	beq.n	1104e <_signal_poll_event+0x9a>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   10fd8:	6a03      	ldr	r3, [r0, #32]
   10fda:	3302      	adds	r3, #2
   10fdc:	d045      	beq.n	1106a <_signal_poll_event+0xb6>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   10fde:	6843      	ldr	r3, [r0, #4]
   10fe0:	6801      	ldr	r1, [r0, #0]
   10fe2:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   10fe4:	6801      	ldr	r1, [r0, #0]
   10fe6:	604b      	str	r3, [r1, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   10fe8:	7a43      	ldrb	r3, [r0, #9]
   10fea:	4393      	bics	r3, r2
   10fec:	7243      	strb	r3, [r0, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   10fee:	6a03      	ldr	r3, [r0, #32]
   10ff0:	1c5a      	adds	r2, r3, #1
   10ff2:	d011      	beq.n	11018 <_signal_poll_event+0x64>
   10ff4:	4a20      	ldr	r2, [pc, #128]	; (11078 <_signal_poll_event+0xc4>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   10ff6:	6911      	ldr	r1, [r2, #16]
   10ff8:	0002      	movs	r2, r0
   10ffa:	3210      	adds	r2, #16
   10ffc:	4291      	cmp	r1, r2
   10ffe:	d003      	beq.n	11008 <_signal_poll_event+0x54>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   11000:	6902      	ldr	r2, [r0, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11002:	6911      	ldr	r1, [r2, #16]
   11004:	18cb      	adds	r3, r1, r3
   11006:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   11008:	6943      	ldr	r3, [r0, #20]
   1100a:	6902      	ldr	r2, [r0, #16]
   1100c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1100e:	6902      	ldr	r2, [r0, #16]
   11010:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   11012:	2301      	movs	r3, #1
   11014:	425b      	negs	r3, r3
   11016:	6203      	str	r3, [r0, #32]
   11018:	2300      	movs	r3, #0
   1101a:	65c3      	str	r3, [r0, #92]	; 0x5c
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   1101c:	7a43      	ldrb	r3, [r0, #9]
   1101e:	06db      	lsls	r3, r3, #27
   11020:	d115      	bne.n	1104e <_signal_poll_event+0x9a>
   11022:	6a03      	ldr	r3, [r0, #32]
   11024:	3301      	adds	r3, #1
   11026:	d112      	bne.n	1104e <_signal_poll_event+0x9a>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   11028:	f000 fa90 	bl	1154c <_add_thread_to_ready_q>
 */
static ALWAYS_INLINE u32_t _IpsrGet(void)
{
	u32_t vector;

	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   1102c:	f3ef 8305 	mrs	r3, IPSR
#endif
#if defined(CONFIG_ARMV6_M)
		/* On ARMv6-M there is no nested execution bit, so we check
		 * exception 3, hard fault, to a detect a nested exception.
		 */
		|| (vector == 3)
   11030:	2b0d      	cmp	r3, #13
   11032:	d81d      	bhi.n	11070 <_signal_poll_event+0xbc>
   11034:	2b03      	cmp	r3, #3
   11036:	d01b      	beq.n	11070 <_signal_poll_event+0xbc>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   11038:	4b0f      	ldr	r3, [pc, #60]	; (11078 <_signal_poll_event+0xc4>)
   1103a:	689b      	ldr	r3, [r3, #8]
   1103c:	895b      	ldrh	r3, [r3, #10]
   1103e:	2b7f      	cmp	r3, #127	; 0x7f
   11040:	d816      	bhi.n	11070 <_signal_poll_event+0xbc>
   11042:	f000 fb1b 	bl	1167c <__must_switch_threads>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   11046:	2301      	movs	r3, #1
   11048:	2800      	cmp	r0, #0
   1104a:	d011      	beq.n	11070 <_signal_poll_event+0xbc>
   1104c:	6033      	str	r3, [r6, #0]
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
	event->state |= state;
   1104e:	221f      	movs	r2, #31
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   11050:	2000      	movs	r0, #0
	event->state |= state;
   11052:	6866      	ldr	r6, [r4, #4]
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   11054:	6020      	str	r0, [r4, #0]
	event->state |= state;
   11056:	03f1      	lsls	r1, r6, #15
   11058:	0ec9      	lsrs	r1, r1, #27
   1105a:	4329      	orrs	r1, r5
   1105c:	4011      	ands	r1, r2
   1105e:	030b      	lsls	r3, r1, #12
   11060:	4906      	ldr	r1, [pc, #24]	; (1107c <_signal_poll_event+0xc8>)
   11062:	4031      	ands	r1, r6
   11064:	4319      	orrs	r1, r3
   11066:	6061      	str	r1, [r4, #4]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   11068:	e004      	b.n	11074 <_signal_poll_event+0xc0>
	if (!_is_thread_pending(thread)) {
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
		return -EAGAIN;
   1106a:	200b      	movs	r0, #11
   1106c:	4240      	negs	r0, r0
   1106e:	e001      	b.n	11074 <_signal_poll_event+0xc0>
	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   11070:	2300      	movs	r3, #0
   11072:	e7eb      	b.n	1104c <_signal_poll_event+0x98>

ready_event:
	set_event_ready(event, state);
	return 0;
}
   11074:	bd70      	pop	{r4, r5, r6, pc}
   11076:	46c0      	nop			; (mov r8, r8)
   11078:	20001abc 	.word	0x20001abc
   1107c:	fffe0fff 	.word	0xfffe0fff

00011080 <k_poll_event_init>:
#include <misc/dlist.h>
#include <misc/__assert.h>

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   11080:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
   11082:	2400      	movs	r4, #0
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   11084:	260f      	movs	r6, #15
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
   11086:	6004      	str	r4, [r0, #0]
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   11088:	7944      	ldrb	r4, [r0, #5]
   1108a:	4031      	ands	r1, r6
   1108c:	43b4      	bics	r4, r6
   1108e:	430c      	orrs	r4, r1
   11090:	7144      	strb	r4, [r0, #5]
	event->state = K_POLL_STATE_NOT_READY;
   11092:	6841      	ldr	r1, [r0, #4]
   11094:	4c08      	ldr	r4, [pc, #32]	; (110b8 <k_poll_event_init+0x38>)
	event->mode = mode;
	event->unused = 0;
	event->obj = obj;
   11096:	6083      	str	r3, [r0, #8]
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
   11098:	400c      	ands	r4, r1
	event->mode = mode;
   1109a:	2101      	movs	r1, #1
   1109c:	400a      	ands	r2, r1
   1109e:	0051      	lsls	r1, r2, #1
   110a0:	22fc      	movs	r2, #252	; 0xfc
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
   110a2:	0c25      	lsrs	r5, r4, #16
	event->mode = mode;
   110a4:	402a      	ands	r2, r5
   110a6:	430a      	orrs	r2, r1
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
   110a8:	6044      	str	r4, [r0, #4]
	event->mode = mode;
   110aa:	7182      	strb	r2, [r0, #6]
	event->unused = 0;
   110ac:	2203      	movs	r2, #3
   110ae:	88c1      	ldrh	r1, [r0, #6]
   110b0:	400a      	ands	r2, r1
   110b2:	80c2      	strh	r2, [r0, #6]
	event->obj = obj;
}
   110b4:	bd70      	pop	{r4, r5, r6, pc}
   110b6:	46c0      	nop			; (mov r8, r8)
   110b8:	fffe0fff 	.word	0xfffe0fff

000110bc <k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   110bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   110be:	b089      	sub	sp, #36	; 0x24
   110c0:	0006      	movs	r6, r0
   110c2:	9102      	str	r1, [sp, #8]
   110c4:	9201      	str	r2, [sp, #4]
   110c6:	f3ef 8410 	mrs	r4, PRIMASK
   110ca:	b672      	cpsid	i
#endif
}

static inline void _set_thread_states(struct k_thread *thread, u32_t states)
{
	thread->base.thread_state |= states;
   110cc:	2520      	movs	r5, #32

	int last_registered = -1, in_use = 0, rc;
	unsigned int key;

	key = irq_lock();
	set_polling_state(_current);
   110ce:	4b56      	ldr	r3, [pc, #344]	; (11228 <k_poll+0x16c>)
   110d0:	6898      	ldr	r0, [r3, #8]
   110d2:	7a42      	ldrb	r2, [r0, #9]
   110d4:	432a      	orrs	r2, r5
   110d6:	7242      	strb	r2, [r0, #9]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   110d8:	2c00      	cmp	r4, #0
   110da:	d100      	bne.n	110de <k_poll+0x22>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   110dc:	b662      	cpsie	i
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   110de:	2200      	movs	r2, #0
	/*
	 * We can get by with one poller structure for all events for now:
	 * if/when we allow multiple threads to poll on the same object, we
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };
   110e0:	689b      	ldr	r3, [r3, #8]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
   110e2:	2501      	movs	r5, #1
	/*
	 * We can get by with one poller structure for all events for now:
	 * if/when we allow multiple threads to poll on the same object, we
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };
   110e4:	9305      	str	r3, [sp, #20]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
   110e6:	0014      	movs	r4, r2
   110e8:	0033      	movs	r3, r6
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   110ea:	9200      	str	r2, [sp, #0]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
   110ec:	426d      	negs	r5, r5
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   110ee:	9a02      	ldr	r2, [sp, #8]
   110f0:	9900      	ldr	r1, [sp, #0]
   110f2:	4291      	cmp	r1, r2
   110f4:	da1d      	bge.n	11132 <k_poll+0x76>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   110f6:	f3ef 8010 	mrs	r0, PRIMASK
   110fa:	b672      	cpsid	i
   110fc:	9003      	str	r0, [sp, #12]
}

/* must be called with interrupts locked */
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
   110fe:	7958      	ldrb	r0, [r3, #5]
   11100:	0700      	lsls	r0, r0, #28
   11102:	0f00      	lsrs	r0, r0, #28
   11104:	2802      	cmp	r0, #2
   11106:	d007      	beq.n	11118 <k_poll+0x5c>
   11108:	2804      	cmp	r0, #4
   1110a:	d00a      	beq.n	11122 <k_poll+0x66>
   1110c:	2801      	cmp	r0, #1
   1110e:	d13e      	bne.n	1118e <k_poll+0xd2>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_SIGNAL:
		if (event->signal->signaled) {
   11110:	689f      	ldr	r7, [r3, #8]
   11112:	687a      	ldr	r2, [r7, #4]
			*state = K_POLL_STATE_SIGNALED;
   11114:	2702      	movs	r7, #2
   11116:	e009      	b.n	1112c <k_poll+0x70>
   11118:	689f      	ldr	r7, [r3, #8]
/* must be called with interrupts locked */
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0) {
   1111a:	68bf      	ldr	r7, [r7, #8]
   1111c:	2f00      	cmp	r7, #0
   1111e:	d16a      	bne.n	111f6 <k_poll+0x13a>
   11120:	e035      	b.n	1118e <k_poll+0xd2>
   11122:	689f      	ldr	r7, [r3, #8]
			*state = K_POLL_STATE_SEM_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		if (!k_queue_is_empty(event->queue)) {
   11124:	68bf      	ldr	r7, [r7, #8]
   11126:	46bc      	mov	ip, r7
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   11128:	2708      	movs	r7, #8
			*state = K_POLL_STATE_SEM_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		if (!k_queue_is_empty(event->queue)) {
   1112a:	4662      	mov	r2, ip
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_SIGNAL:
		if (event->signal->signaled) {
   1112c:	2a00      	cmp	r2, #0
   1112e:	d163      	bne.n	111f8 <k_poll+0x13c>
   11130:	e02d      	b.n	1118e <k_poll+0xd2>
   11132:	f3ef 8710 	mrs	r7, PRIMASK
   11136:	b672      	cpsid	i
	 * success or a -EADDRINUSE error. In the case of a -EADDRINUSE error,
	 * the events that were available are still flagged as such, and it is
	 * valid for the caller to consider them available, as if this function
	 * returned success.
	 */
	if (!is_polling()) {
   11138:	2020      	movs	r0, #32
}

/* must be called with interrupts locked */
static inline int is_polling(void)
{
	return _is_thread_polling(_current);
   1113a:	4b3b      	ldr	r3, [pc, #236]	; (11228 <k_poll+0x16c>)
   1113c:	689a      	ldr	r2, [r3, #8]
   1113e:	7a53      	ldrb	r3, [r2, #9]
	 * success or a -EADDRINUSE error. In the case of a -EADDRINUSE error,
	 * the events that were available are still flagged as such, and it is
	 * valid for the caller to consider them available, as if this function
	 * returned success.
	 */
	if (!is_polling()) {
   11140:	4203      	tst	r3, r0
   11142:	d017      	beq.n	11174 <k_poll+0xb8>
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
   11144:	4383      	bics	r3, r0
   11146:	7253      	strb	r3, [r2, #9]
		return in_use;
	}

	clear_polling_state(_current);

	if (timeout == K_NO_WAIT) {
   11148:	9b01      	ldr	r3, [sp, #4]
   1114a:	2b00      	cmp	r3, #0
   1114c:	d103      	bne.n	11156 <k_poll+0x9a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1114e:	2f00      	cmp	r7, #0
   11150:	d11a      	bne.n	11188 <k_poll+0xcc>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11152:	b662      	cpsie	i
   11154:	e018      	b.n	11188 <k_poll+0xcc>
		irq_unlock(key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   11156:	a806      	add	r0, sp, #24

	_pend_current_thread(&wait_q, timeout);
   11158:	9901      	ldr	r1, [sp, #4]
	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1115a:	9006      	str	r0, [sp, #24]
   1115c:	6040      	str	r0, [r0, #4]

	_pend_current_thread(&wait_q, timeout);
   1115e:	f000 fa7d 	bl	1165c <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   11162:	f000 fb59 	bl	11818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   11166:	0038      	movs	r0, r7
   11168:	f7ff fb38 	bl	107dc <__swap>
   1116c:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1116e:	f3ef 8710 	mrs	r7, PRIMASK
   11172:	b672      	cpsid	i
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = irq_lock();
	clear_event_registrations(events, last_registered, key);
   11174:	0030      	movs	r0, r6
   11176:	003a      	movs	r2, r7
   11178:	0029      	movs	r1, r5
   1117a:	f7ff fefb 	bl	10f74 <clear_event_registrations>
	irq_unlock(key);

	return swap_rc;
   1117e:	0020      	movs	r0, r4
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11180:	2f00      	cmp	r7, #0
   11182:	d14f      	bne.n	11224 <k_poll+0x168>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11184:	b662      	cpsie	i
   11186:	e04d      	b.n	11224 <k_poll+0x168>

	clear_polling_state(_current);

	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EAGAIN;
   11188:	200b      	movs	r0, #11
   1118a:	4240      	negs	r0, r0
   1118c:	e04a      	b.n	11224 <k_poll+0x168>

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
   1118e:	9a01      	ldr	r2, [sp, #4]
   11190:	2a00      	cmp	r2, #0
   11192:	d027      	beq.n	111e4 <k_poll+0x128>
   11194:	2120      	movs	r1, #32
}

/* must be called with interrupts locked */
static inline int is_polling(void)
{
	return _is_thread_polling(_current);
   11196:	4f24      	ldr	r7, [pc, #144]	; (11228 <k_poll+0x16c>)
   11198:	68bf      	ldr	r7, [r7, #8]

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
   1119a:	7a7a      	ldrb	r2, [r7, #9]
   1119c:	420a      	tst	r2, r1
   1119e:	d021      	beq.n	111e4 <k_poll+0x128>
   111a0:	2c00      	cmp	r4, #0
   111a2:	d11f      	bne.n	111e4 <k_poll+0x128>
}

/* must be called with interrupts locked */
static inline int register_event(struct k_poll_event *event)
{
	switch (event->type) {
   111a4:	2802      	cmp	r0, #2
   111a6:	d004      	beq.n	111b2 <k_poll+0xf6>
   111a8:	2804      	cmp	r0, #4
   111aa:	d002      	beq.n	111b2 <k_poll+0xf6>
   111ac:	2801      	cmp	r0, #1
   111ae:	d135      	bne.n	1121c <k_poll+0x160>
   111b0:	e005      	b.n	111be <k_poll+0x102>
		}
		event->sem->poll_event = event;
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue, "invalid queue\n");
		if (event->queue->poll_event) {
   111b2:	6898      	ldr	r0, [r3, #8]
   111b4:	6902      	ldr	r2, [r0, #16]
   111b6:	2a00      	cmp	r2, #0
   111b8:	d107      	bne.n	111ca <k_poll+0x10e>
			return -EADDRINUSE;
		}
		event->queue->poll_event = event;
   111ba:	6103      	str	r3, [r0, #16]
   111bc:	e02e      	b.n	1121c <k_poll+0x160>
		break;
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->queue, "invalid poll signal\n");
		if (event->signal->poll_event) {
   111be:	6898      	ldr	r0, [r3, #8]
   111c0:	6802      	ldr	r2, [r0, #0]
   111c2:	2a00      	cmp	r2, #0
   111c4:	d101      	bne.n	111ca <k_poll+0x10e>
			return -EADDRINUSE;
		}
		event->signal->poll_event = event;
   111c6:	6003      	str	r3, [r0, #0]
   111c8:	e028      	b.n	1121c <k_poll+0x160>
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
				events[ii].state = K_POLL_STATE_EADDRINUSE;
   111ca:	685a      	ldr	r2, [r3, #4]
   111cc:	4817      	ldr	r0, [pc, #92]	; (1122c <k_poll+0x170>)
				++last_registered;
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
   111ce:	2430      	movs	r4, #48	; 0x30
				events[ii].state = K_POLL_STATE_EADDRINUSE;
   111d0:	4010      	ands	r0, r2
   111d2:	2280      	movs	r2, #128	; 0x80
   111d4:	0152      	lsls	r2, r2, #5
   111d6:	4310      	orrs	r0, r2
   111d8:	2220      	movs	r2, #32
   111da:	6058      	str	r0, [r3, #4]
   111dc:	7a78      	ldrb	r0, [r7, #9]
				++last_registered;
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
   111de:	4264      	negs	r4, r4
   111e0:	4390      	bics	r0, r2
   111e2:	7278      	strb	r0, [r7, #9]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   111e4:	9a03      	ldr	r2, [sp, #12]
   111e6:	2a00      	cmp	r2, #0
   111e8:	d100      	bne.n	111ec <k_poll+0x130>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   111ea:	b662      	cpsie	i
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   111ec:	9a00      	ldr	r2, [sp, #0]
   111ee:	330c      	adds	r3, #12
   111f0:	3201      	adds	r2, #1
   111f2:	9200      	str	r2, [sp, #0]
   111f4:	e77b      	b.n	110ee <k_poll+0x32>
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0) {
			*state = K_POLL_STATE_SEM_AVAILABLE;
   111f6:	2704      	movs	r7, #4
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   111f8:	2000      	movs	r0, #0
	event->state |= state;
   111fa:	685a      	ldr	r2, [r3, #4]
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   111fc:	6018      	str	r0, [r3, #0]
	event->state |= state;
   111fe:	03d0      	lsls	r0, r2, #15
   11200:	0ec0      	lsrs	r0, r0, #27
   11202:	4307      	orrs	r7, r0
   11204:	4809      	ldr	r0, [pc, #36]	; (1122c <k_poll+0x170>)
   11206:	033f      	lsls	r7, r7, #12
   11208:	4010      	ands	r0, r2
   1120a:	2220      	movs	r2, #32
   1120c:	4338      	orrs	r0, r7
   1120e:	6058      	str	r0, [r3, #4]
		u32_t state;

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
   11210:	4805      	ldr	r0, [pc, #20]	; (11228 <k_poll+0x16c>)
   11212:	6887      	ldr	r7, [r0, #8]
   11214:	7a78      	ldrb	r0, [r7, #9]
   11216:	4390      	bics	r0, r2
   11218:	7278      	strb	r0, [r7, #9]
   1121a:	e7e3      	b.n	111e4 <k_poll+0x128>
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
			rc = register_event(&events[ii]);
			if (rc == 0) {
				events[ii].poller = &poller;
   1121c:	a805      	add	r0, sp, #20
   1121e:	6018      	str	r0, [r3, #0]
				++last_registered;
   11220:	3501      	adds	r5, #1
   11222:	e7df      	b.n	111e4 <k_poll+0x128>
	key = irq_lock();
	clear_event_registrations(events, last_registered, key);
	irq_unlock(key);

	return swap_rc;
}
   11224:	b009      	add	sp, #36	; 0x24
   11226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11228:	20001abc 	.word	0x20001abc
   1122c:	fffe0fff 	.word	0xfffe0fff

00011230 <_handle_obj_poll_event>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
   11230:	b507      	push	{r0, r1, r2, lr}
   11232:	0003      	movs	r3, r0
	struct k_poll_event *poll_event = *obj_poll_event;
	int must_reschedule;

	*obj_poll_event = NULL;
   11234:	2200      	movs	r2, #0

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
	struct k_poll_event *poll_event = *obj_poll_event;
   11236:	6800      	ldr	r0, [r0, #0]
	int must_reschedule;

	*obj_poll_event = NULL;
   11238:	601a      	str	r2, [r3, #0]
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   1123a:	aa01      	add	r2, sp, #4
   1123c:	f7ff feba 	bl	10fb4 <_signal_poll_event>
	return must_reschedule;
}
   11240:	9801      	ldr	r0, [sp, #4]
   11242:	bd0e      	pop	{r1, r2, r3, pc}

00011244 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   11244:	b537      	push	{r0, r1, r2, r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11246:	f3ef 8510 	mrs	r5, PRIMASK
   1124a:	b672      	cpsid	i
	unsigned int key = irq_lock();
	int must_reschedule;

	signal->result = result;
	signal->signaled = 1;
   1124c:	2301      	movs	r3, #1
int k_poll_signal(struct k_poll_signal *signal, int result)
{
	unsigned int key = irq_lock();
	int must_reschedule;

	signal->result = result;
   1124e:	6081      	str	r1, [r0, #8]
	signal->signaled = 1;
   11250:	6043      	str	r3, [r0, #4]

	if (!signal->poll_event) {
   11252:	6800      	ldr	r0, [r0, #0]
   11254:	2800      	cmp	r0, #0
   11256:	d00e      	beq.n	11276 <k_poll_signal+0x32>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(signal->poll_event, K_POLL_STATE_SIGNALED,
   11258:	aa01      	add	r2, sp, #4
   1125a:	2102      	movs	r1, #2
   1125c:	f7ff feaa 	bl	10fb4 <_signal_poll_event>
				    &must_reschedule);

	if (must_reschedule) {
   11260:	9b01      	ldr	r3, [sp, #4]
	if (!signal->poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(signal->poll_event, K_POLL_STATE_SIGNALED,
   11262:	0004      	movs	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   11264:	2b00      	cmp	r3, #0
   11266:	d006      	beq.n	11276 <k_poll_signal+0x32>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   11268:	f000 fad6 	bl	11818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   1126c:	0028      	movs	r0, r5
   1126e:	f7ff fab5 	bl	107dc <__swap>
		(void)_Swap(key);
	} else {
		irq_unlock(key);
	}

	return rc;
   11272:	0020      	movs	r0, r4
   11274:	e002      	b.n	1127c <k_poll_signal+0x38>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11276:	2d00      	cmp	r5, #0
   11278:	d100      	bne.n	1127c <k_poll_signal+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1127a:	b662      	cpsie	i
}
   1127c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0001127e <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1127e:	7a43      	ldrb	r3, [r0, #9]
   11280:	2204      	movs	r2, #4
   11282:	0019      	movs	r1, r3
   11284:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   11286:	221b      	movs	r2, #27
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
   11288:	b510      	push	{r4, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1128a:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   1128c:	4213      	tst	r3, r2
   1128e:	d104      	bne.n	1129a <_ready_thread+0x1c>
   11290:	6a03      	ldr	r3, [r0, #32]
   11292:	3301      	adds	r3, #1
   11294:	d101      	bne.n	1129a <_ready_thread+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   11296:	f000 f959 	bl	1154c <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
   1129a:	bd10      	pop	{r4, pc}

0001129c <handle_poll_event>:
	_set_thread_return_value_with_data(thread, 0, data);
}

/* returns 1 if a reschedule must take place, 0 otherwise */
static inline int handle_poll_event(struct k_queue *queue)
{
   1129c:	0003      	movs	r3, r0
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
   1129e:	6900      	ldr	r0, [r0, #16]
	_set_thread_return_value_with_data(thread, 0, data);
}

/* returns 1 if a reschedule must take place, 0 otherwise */
static inline int handle_poll_event(struct k_queue *queue)
{
   112a0:	b510      	push	{r4, lr}
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
   112a2:	2800      	cmp	r0, #0
   112a4:	d004      	beq.n	112b0 <handle_poll_event+0x14>
   112a6:	3310      	adds	r3, #16
   112a8:	0018      	movs	r0, r3
   112aa:	2108      	movs	r1, #8
   112ac:	f7ff ffc0 	bl	11230 <_handle_obj_poll_event>
#else
	return 0;
#endif
}
   112b0:	bd10      	pop	{r4, pc}

000112b2 <_Swap>:
#ifdef CONFIG_STACK_SENTINEL
extern void _check_stack_sentinel(void);
#endif

static inline unsigned int _Swap(unsigned int key)
{
   112b2:	b510      	push	{r4, lr}
   112b4:	0004      	movs	r4, r0

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   112b6:	f000 faaf 	bl	11818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   112ba:	0020      	movs	r0, r4
   112bc:	f7ff fa8e 	bl	107dc <__swap>
}
   112c0:	bd10      	pop	{r4, pc}
	...

000112c4 <_must_switch_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   112c4:	4b05      	ldr	r3, [pc, #20]	; (112dc <_must_switch_threads+0x18>)
/*
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
   112c6:	b510      	push	{r4, lr}
   112c8:	689b      	ldr	r3, [r3, #8]
	return _is_preempt(_current) && __must_switch_threads();
   112ca:	2000      	movs	r0, #0
   112cc:	895b      	ldrh	r3, [r3, #10]
   112ce:	2b7f      	cmp	r3, #127	; 0x7f
   112d0:	d803      	bhi.n	112da <_must_switch_threads+0x16>
   112d2:	f000 f9d3 	bl	1167c <__must_switch_threads>
   112d6:	1e43      	subs	r3, r0, #1
   112d8:	4198      	sbcs	r0, r3
}
   112da:	bd10      	pop	{r4, pc}
   112dc:	20001abc 	.word	0x20001abc

000112e0 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   112e0:	4b14      	ldr	r3, [pc, #80]	; (11334 <_unpend_first_thread+0x54>)
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
   112e2:	0001      	movs	r1, r0
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   112e4:	681b      	ldr	r3, [r3, #0]
   112e6:	6802      	ldr	r2, [r0, #0]
   112e8:	2b00      	cmp	r3, #0
   112ea:	d00f      	beq.n	1130c <_unpend_first_thread+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   112ec:	0013      	movs	r3, r2
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   112ee:	2000      	movs	r0, #0
   112f0:	4291      	cmp	r1, r2
   112f2:	d01d      	beq.n	11330 <_unpend_first_thread+0x50>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   112f4:	2b00      	cmp	r3, #0
   112f6:	d007      	beq.n	11308 <_unpend_first_thread+0x28>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   112f8:	6a1a      	ldr	r2, [r3, #32]
   112fa:	3202      	adds	r2, #2
   112fc:	d10c      	bne.n	11318 <_unpend_first_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   112fe:	684a      	ldr	r2, [r1, #4]
   11300:	429a      	cmp	r2, r3
   11302:	d014      	beq.n	1132e <_unpend_first_thread+0x4e>
   11304:	681b      	ldr	r3, [r3, #0]
   11306:	e7f5      	b.n	112f4 <_unpend_first_thread+0x14>
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   11308:	0018      	movs	r0, r3
   1130a:	e011      	b.n	11330 <_unpend_first_thread+0x50>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1130c:	0018      	movs	r0, r3
   1130e:	4291      	cmp	r1, r2
   11310:	d00e      	beq.n	11330 <_unpend_first_thread+0x50>
   11312:	1e10      	subs	r0, r2, #0
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   11314:	d101      	bne.n	1131a <_unpend_first_thread+0x3a>
   11316:	e00b      	b.n	11330 <_unpend_first_thread+0x50>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   11318:	0018      	movs	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1131a:	6843      	ldr	r3, [r0, #4]
   1131c:	6802      	ldr	r2, [r0, #0]
   1131e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11320:	6802      	ldr	r2, [r0, #0]
   11322:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   11324:	2202      	movs	r2, #2
   11326:	7a43      	ldrb	r3, [r0, #9]
   11328:	4393      	bics	r3, r2
   1132a:	7243      	strb	r3, [r0, #9]
   1132c:	e000      	b.n	11330 <_unpend_first_thread+0x50>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1132e:	2000      	movs	r0, #0
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
   11330:	4770      	bx	lr
   11332:	46c0      	nop			; (mov r8, r8)
   11334:	20001ce8 	.word	0x20001ce8

00011338 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   11338:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1133a:	6900      	ldr	r0, [r0, #16]
   1133c:	1c42      	adds	r2, r0, #1
   1133e:	d010      	beq.n	11362 <_abort_timeout+0x2a>
   11340:	4a08      	ldr	r2, [pc, #32]	; (11364 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   11342:	6912      	ldr	r2, [r2, #16]
   11344:	4293      	cmp	r3, r2
   11346:	d003      	beq.n	11350 <_abort_timeout+0x18>
   11348:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1134a:	6911      	ldr	r1, [r2, #16]
   1134c:	1808      	adds	r0, r1, r0
   1134e:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   11350:	685a      	ldr	r2, [r3, #4]
   11352:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
   11354:	2000      	movs	r0, #0
   11356:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   11358:	6819      	ldr	r1, [r3, #0]
   1135a:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   1135c:	2201      	movs	r2, #1
   1135e:	4252      	negs	r2, r2
   11360:	611a      	str	r2, [r3, #16]

	return 0;
}
   11362:	4770      	bx	lr
   11364:	20001abc 	.word	0x20001abc

00011368 <k_queue_init>:
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11368:	2300      	movs	r3, #0
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1136a:	6000      	str	r0, [r0, #0]
   1136c:	6083      	str	r3, [r0, #8]
	list->tail = NULL;
   1136e:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   11370:	6040      	str	r0, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);

	_INIT_OBJ_POLL_EVENT(queue);
   11372:	6103      	str	r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
   11374:	4770      	bx	lr

00011376 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   11376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11378:	0005      	movs	r5, r0
   1137a:	000f      	movs	r7, r1
   1137c:	0014      	movs	r4, r2
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1137e:	f3ef 8310 	mrs	r3, PRIMASK
   11382:	b672      	cpsid	i
   11384:	9301      	str	r3, [sp, #4]
	struct k_thread *first_pending_thread;
	unsigned int key;

	key = irq_lock();

	first_pending_thread = _unpend_first_thread(&queue->wait_q);
   11386:	f7ff ffab 	bl	112e0 <_unpend_first_thread>
   1138a:	1e06      	subs	r6, r0, #0

	if (first_pending_thread) {
   1138c:	d00f      	beq.n	113ae <k_queue_insert+0x38>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   1138e:	3010      	adds	r0, #16
   11390:	f7ff ffd2 	bl	11338 <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
   11394:	0030      	movs	r0, r6
   11396:	f7ff ff72 	bl	1127e <_ready_thread>
   1139a:	2300      	movs	r3, #0
_set_thread_return_value_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	_set_thread_return_value(thread, value);
	thread->base.swap_data = data;
   1139c:	60f4      	str	r4, [r6, #12]
   1139e:	65f3      	str	r3, [r6, #92]	; 0x5c
   113a0:	f3ef 8305 	mrs	r3, IPSR
   113a4:	2b0d      	cmp	r3, #13
   113a6:	d822      	bhi.n	113ee <k_queue_insert+0x78>
   113a8:	2b03      	cmp	r3, #3
   113aa:	d125      	bne.n	113f8 <k_queue_insert+0x82>
   113ac:	e01f      	b.n	113ee <k_queue_insert+0x78>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
   113ae:	2f00      	cmp	r7, #0
   113b0:	d106      	bne.n	113c0 <k_queue_insert+0x4a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
   113b2:	68ab      	ldr	r3, [r5, #8]
   113b4:	6023      	str	r3, [r4, #0]
	list->head = node;

	if (!list->tail) {
   113b6:	68eb      	ldr	r3, [r5, #12]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
   113b8:	60ac      	str	r4, [r5, #8]

	if (!list->tail) {
   113ba:	2b00      	cmp	r3, #0
   113bc:	d10e      	bne.n	113dc <k_queue_insert+0x66>
   113be:	e00a      	b.n	113d6 <k_queue_insert+0x60>
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
   113c0:	683b      	ldr	r3, [r7, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
   113c2:	6023      	str	r3, [r4, #0]
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
   113c4:	2b00      	cmp	r3, #0
   113c6:	d108      	bne.n	113da <k_queue_insert+0x64>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
   113c8:	68eb      	ldr	r3, [r5, #12]
   113ca:	2b00      	cmp	r3, #0
   113cc:	d102      	bne.n	113d4 <k_queue_insert+0x5e>
		list->tail = node;
   113ce:	60ec      	str	r4, [r5, #12]
		list->head = node;
   113d0:	60ac      	str	r4, [r5, #8]
   113d2:	e003      	b.n	113dc <k_queue_insert+0x66>
	} else {
		list->tail->next = node;
   113d4:	601c      	str	r4, [r3, #0]
		list->tail = node;
   113d6:	60ec      	str	r4, [r5, #12]
   113d8:	e000      	b.n	113dc <k_queue_insert+0x66>
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
		sys_slist_append(list, node);
	} else {
		node->next = prev->next;
		prev->next = node;
   113da:	603c      	str	r4, [r7, #0]
			(void)_Swap(key);
			return;
		}
	} else {
		sys_slist_insert(&queue->data_q, prev, data);
		if (handle_poll_event(queue)) {
   113dc:	0028      	movs	r0, r5
   113de:	f7ff ff5d 	bl	1129c <handle_poll_event>
   113e2:	2800      	cmp	r0, #0
   113e4:	d003      	beq.n	113ee <k_queue_insert+0x78>
			(void)_Swap(key);
   113e6:	9801      	ldr	r0, [sp, #4]
   113e8:	f7ff ff63 	bl	112b2 <_Swap>
			return;
   113ec:	e007      	b.n	113fe <k_queue_insert+0x88>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   113ee:	9b01      	ldr	r3, [sp, #4]
   113f0:	2b00      	cmp	r3, #0
   113f2:	d104      	bne.n	113fe <k_queue_insert+0x88>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   113f4:	b662      	cpsie	i
   113f6:	e002      	b.n	113fe <k_queue_insert+0x88>

	first_pending_thread = _unpend_first_thread(&queue->wait_q);

	if (first_pending_thread) {
		prepare_thread_to_run(first_pending_thread, data);
		if (!_is_in_isr() && _must_switch_threads()) {
   113f8:	f7ff ff64 	bl	112c4 <_must_switch_threads>
   113fc:	e7f1      	b.n	113e2 <k_queue_insert+0x6c>
			return;
		}
	}

	irq_unlock(key);
}
   113fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00011400 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
   11400:	b510      	push	{r4, lr}
   11402:	000a      	movs	r2, r1
	return k_queue_insert(queue, queue->data_q.tail, data);
   11404:	68c1      	ldr	r1, [r0, #12]
   11406:	f7ff ffb6 	bl	11376 <k_queue_insert>
}
   1140a:	bd10      	pop	{r4, pc}

0001140c <k_queue_prepend>:

void k_queue_prepend(struct k_queue *queue, void *data)
{
   1140c:	b510      	push	{r4, lr}
   1140e:	000a      	movs	r2, r1
	return k_queue_insert(queue, NULL, data);
   11410:	2100      	movs	r1, #0
   11412:	f7ff ffb0 	bl	11376 <k_queue_insert>
}
   11416:	bd10      	pop	{r4, pc}

00011418 <k_queue_append_list>:

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   11418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1141a:	0004      	movs	r4, r0
   1141c:	000d      	movs	r5, r1
   1141e:	9201      	str	r2, [sp, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11420:	f3ef 8710 	mrs	r7, PRIMASK
   11424:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   11426:	6803      	ldr	r3, [r0, #0]
   11428:	9300      	str	r3, [sp, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1142a:	4298      	cmp	r0, r3
   1142c:	d112      	bne.n	11454 <k_queue_append_list+0x3c>
   1142e:	2300      	movs	r3, #0
   11430:	9300      	str	r3, [sp, #0]
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
   11432:	e00f      	b.n	11454 <k_queue_append_list+0x3c>
   11434:	0020      	movs	r0, r4
   11436:	f7ff ff53 	bl	112e0 <_unpend_first_thread>
   1143a:	1e06      	subs	r6, r0, #0
   1143c:	d00d      	beq.n	1145a <k_queue_append_list+0x42>
   1143e:	0030      	movs	r0, r6
   11440:	3010      	adds	r0, #16
   11442:	f7ff ff79 	bl	11338 <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
   11446:	0030      	movs	r0, r6
   11448:	f7ff ff19 	bl	1127e <_ready_thread>
   1144c:	2300      	movs	r3, #0
   1144e:	60f5      	str	r5, [r6, #12]
	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   11450:	682d      	ldr	r5, [r5, #0]
   11452:	65f3      	str	r3, [r6, #92]	; 0x5c
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
   11454:	2d00      	cmp	r5, #0
   11456:	d1ed      	bne.n	11434 <k_queue_append_list+0x1c>
   11458:	e005      	b.n	11466 <k_queue_append_list+0x4e>
 * @param tail A pointer to the last element of the list to append
 */
static inline void sys_slist_append_list(sys_slist_t *list,
					 void *head, void *tail)
{
	if (!list->tail) {
   1145a:	68e3      	ldr	r3, [r4, #12]
   1145c:	2b00      	cmp	r3, #0
   1145e:	d119      	bne.n	11494 <k_queue_append_list+0x7c>
		list->head = (sys_snode_t *)head;
   11460:	60a5      	str	r5, [r4, #8]
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
   11462:	9b01      	ldr	r3, [sp, #4]
   11464:	60e3      	str	r3, [r4, #12]

	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
   11466:	9b00      	ldr	r3, [sp, #0]
   11468:	2b00      	cmp	r3, #0
   1146a:	d006      	beq.n	1147a <k_queue_append_list+0x62>
   1146c:	f3ef 8305 	mrs	r3, IPSR
   11470:	2b0d      	cmp	r3, #13
   11472:	d80b      	bhi.n	1148c <k_queue_append_list+0x74>
   11474:	2b03      	cmp	r3, #3
   11476:	d10f      	bne.n	11498 <k_queue_append_list+0x80>
   11478:	e008      	b.n	1148c <k_queue_append_list+0x74>
		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
			return;
		}
	} else {
		if (handle_poll_event(queue)) {
   1147a:	0020      	movs	r0, r4
   1147c:	f7ff ff0e 	bl	1129c <handle_poll_event>
   11480:	2800      	cmp	r0, #0
   11482:	d003      	beq.n	1148c <k_queue_append_list+0x74>
			(void)_Swap(key);
   11484:	0038      	movs	r0, r7
   11486:	f7ff ff14 	bl	112b2 <_Swap>
			return;
   1148a:	e008      	b.n	1149e <k_queue_append_list+0x86>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1148c:	2f00      	cmp	r7, #0
   1148e:	d106      	bne.n	1149e <k_queue_append_list+0x86>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11490:	b662      	cpsie	i
   11492:	e004      	b.n	1149e <k_queue_append_list+0x86>
{
	if (!list->tail) {
		list->head = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
   11494:	601d      	str	r5, [r3, #0]
   11496:	e7e4      	b.n	11462 <k_queue_append_list+0x4a>
	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
		if (!_is_in_isr() && _must_switch_threads()) {
   11498:	f7ff ff14 	bl	112c4 <_must_switch_threads>
   1149c:	e7f0      	b.n	11480 <k_queue_append_list+0x68>
			return;
		}
	}

	irq_unlock(key);
}
   1149e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000114a0 <k_queue_get>:
	k_queue_append_list(queue, list->head, list->tail);
	sys_slist_init(list);
}

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   114a0:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   114a2:	f3ef 8410 	mrs	r4, PRIMASK
   114a6:	b672      	cpsid	i
   114a8:	6883      	ldr	r3, [r0, #8]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   114aa:	2b00      	cmp	r3, #0
   114ac:	d00a      	beq.n	114c4 <k_queue_get+0x24>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
   114ae:	681a      	ldr	r2, [r3, #0]
	if (list->tail == node) {
   114b0:	68c1      	ldr	r1, [r0, #12]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
   114b2:	6082      	str	r2, [r0, #8]
	if (list->tail == node) {
   114b4:	428b      	cmp	r3, r1
   114b6:	d100      	bne.n	114ba <k_queue_get+0x1a>
		list->tail = list->head;
   114b8:	60c2      	str	r2, [r0, #12]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   114ba:	0018      	movs	r0, r3
   114bc:	2c00      	cmp	r4, #0
   114be:	d114      	bne.n	114ea <k_queue_get+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   114c0:	b662      	cpsie	i
   114c2:	e012      	b.n	114ea <k_queue_get+0x4a>
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
   114c4:	2900      	cmp	r1, #0
   114c6:	d106      	bne.n	114d6 <k_queue_get+0x36>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   114c8:	2c00      	cmp	r4, #0
   114ca:	d001      	beq.n	114d0 <k_queue_get+0x30>
		irq_unlock(key);
		return NULL;
   114cc:	2000      	movs	r0, #0
   114ce:	e00c      	b.n	114ea <k_queue_get+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   114d0:	b662      	cpsie	i
   114d2:	0020      	movs	r0, r4
   114d4:	e009      	b.n	114ea <k_queue_get+0x4a>
	}

	_pend_current_thread(&queue->wait_q, timeout);
   114d6:	f000 f8c1 	bl	1165c <_pend_current_thread>

	return _Swap(key) ? NULL : _current->base.swap_data;
   114da:	0020      	movs	r0, r4
   114dc:	f7ff fee9 	bl	112b2 <_Swap>
   114e0:	2800      	cmp	r0, #0
   114e2:	d1f3      	bne.n	114cc <k_queue_get+0x2c>
   114e4:	4b01      	ldr	r3, [pc, #4]	; (114ec <k_queue_get+0x4c>)
   114e6:	689b      	ldr	r3, [r3, #8]
   114e8:	68d8      	ldr	r0, [r3, #12]
}
   114ea:	bd10      	pop	{r4, pc}
   114ec:	20001abc 	.word	0x20001abc

000114f0 <_add_timeout>:
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
   114f0:	60ca      	str	r2, [r1, #12]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   114f2:	4a15      	ldr	r2, [pc, #84]	; (11548 <_add_timeout+0x58>)
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
   114f4:	6088      	str	r0, [r1, #8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   114f6:	0010      	movs	r0, r2

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
   114f8:	b530      	push	{r4, r5, lr}
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   114fa:	610b      	str	r3, [r1, #16]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   114fc:	68d3      	ldr	r3, [r2, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   114fe:	300c      	adds	r0, #12
   11500:	4283      	cmp	r3, r0
   11502:	d108      	bne.n	11516 <_add_timeout+0x26>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   11504:	0013      	movs	r3, r2
   11506:	330c      	adds	r3, #12
   11508:	600b      	str	r3, [r1, #0]
	node->prev = list->tail;
   1150a:	6913      	ldr	r3, [r2, #16]
   1150c:	604b      	str	r3, [r1, #4]

	list->tail->next = node;
   1150e:	6913      	ldr	r3, [r2, #16]
   11510:	6019      	str	r1, [r3, #0]
	list->tail = node;
   11512:	6111      	str	r1, [r2, #16]
   11514:	e017      	b.n	11546 <_add_timeout+0x56>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11516:	2b00      	cmp	r3, #0
   11518:	d0f4      	beq.n	11504 <_add_timeout+0x14>
   1151a:	6915      	ldr	r5, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   1151c:	6908      	ldr	r0, [r1, #16]
   1151e:	691c      	ldr	r4, [r3, #16]
   11520:	42a0      	cmp	r0, r4
   11522:	dc08      	bgt.n	11536 <_add_timeout+0x46>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   11524:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   11526:	1a20      	subs	r0, r4, r0
   11528:	6118      	str	r0, [r3, #16]
   1152a:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1152c:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1152e:	685a      	ldr	r2, [r3, #4]
   11530:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   11532:	6059      	str	r1, [r3, #4]
   11534:	e007      	b.n	11546 <_add_timeout+0x56>
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   11536:	1b00      	subs	r0, r0, r4
   11538:	6108      	str	r0, [r1, #16]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1153a:	42ab      	cmp	r3, r5
   1153c:	d0e2      	beq.n	11504 <_add_timeout+0x14>
   1153e:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11540:	2b00      	cmp	r3, #0
   11542:	d1eb      	bne.n	1151c <_add_timeout+0x2c>
   11544:	e7de      	b.n	11504 <_add_timeout+0x14>
#ifdef CONFIG_TICKLESS_KERNEL
	if (!program_time || (adjusted_timeout < program_time)) {
		_set_time(adjusted_timeout);
	}
#endif
}
   11546:	bd30      	pop	{r4, r5, pc}
   11548:	20001abc 	.word	0x20001abc

0001154c <_add_thread_to_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   1154c:	230a      	movs	r3, #10
   1154e:	56c3      	ldrsb	r3, [r0, r3]
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   11550:	b530      	push	{r4, r5, lr}
   11552:	001d      	movs	r5, r3
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   11554:	241f      	movs	r4, #31
   11556:	3510      	adds	r5, #16
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
   11558:	116a      	asrs	r2, r5, #5
   1155a:	4025      	ands	r5, r4
   1155c:	3c1e      	subs	r4, #30
   1155e:	40ac      	lsls	r4, r5
   11560:	490d      	ldr	r1, [pc, #52]	; (11598 <_add_thread_to_ready_q+0x4c>)
   11562:	3206      	adds	r2, #6
   11564:	0092      	lsls	r2, r2, #2
   11566:	188a      	adds	r2, r1, r2
   11568:	6855      	ldr	r5, [r2, #4]

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   1156a:	3314      	adds	r3, #20
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   1156c:	432c      	orrs	r4, r5
   1156e:	6054      	str	r4, [r2, #4]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   11570:	250a      	movs	r5, #10
   11572:	240a      	movs	r4, #10

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   11574:	00db      	lsls	r3, r3, #3
   11576:	18cb      	adds	r3, r1, r3
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   11578:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   1157a:	685a      	ldr	r2, [r3, #4]
   1157c:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
   1157e:	685a      	ldr	r2, [r3, #4]
   11580:	6010      	str	r0, [r2, #0]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   11582:	698a      	ldr	r2, [r1, #24]
	list->tail = node;
   11584:	6058      	str	r0, [r3, #4]
   11586:	5745      	ldrsb	r5, [r0, r5]
   11588:	5714      	ldrsb	r4, [r2, r4]
   1158a:	000b      	movs	r3, r1
   1158c:	42a5      	cmp	r5, r4
   1158e:	da00      	bge.n	11592 <_add_thread_to_ready_q+0x46>
   11590:	0002      	movs	r2, r0
   11592:	619a      	str	r2, [r3, #24]
#else
	sys_dlist_append(&_ready_q.q[0], &thread->base.k_q_node);
	_ready_q.prio_bmap[0] = 1;
	_ready_q.cache = thread;
#endif
}
   11594:	bd30      	pop	{r4, r5, pc}
   11596:	46c0      	nop			; (mov r8, r8)
   11598:	20001abc 	.word	0x20001abc

0001159c <_remove_thread_from_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   1159c:	230a      	movs	r3, #10
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   1159e:	b510      	push	{r4, lr}
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   115a0:	6842      	ldr	r2, [r0, #4]
   115a2:	6801      	ldr	r1, [r0, #0]
   115a4:	56c3      	ldrsb	r3, [r0, r3]
   115a6:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   115a8:	6801      	ldr	r1, [r0, #0]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   115aa:	4c11      	ldr	r4, [pc, #68]	; (115f0 <_remove_thread_from_ready_q+0x54>)
   115ac:	3314      	adds	r3, #20
   115ae:	604a      	str	r2, [r1, #4]
   115b0:	00db      	lsls	r3, r3, #3
   115b2:	18e2      	adds	r2, r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   115b4:	591b      	ldr	r3, [r3, r4]
   115b6:	4293      	cmp	r3, r2
   115b8:	d10e      	bne.n	115d8 <_remove_thread_from_ready_q+0x3c>
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
   115ba:	220a      	movs	r2, #10
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   115bc:	211f      	movs	r1, #31
   115be:	5682      	ldrsb	r2, [r0, r2]
   115c0:	3210      	adds	r2, #16
   115c2:	1153      	asrs	r3, r2, #5
   115c4:	400a      	ands	r2, r1
   115c6:	391e      	subs	r1, #30
   115c8:	4091      	lsls	r1, r2
   115ca:	000a      	movs	r2, r1
   115cc:	3306      	adds	r3, #6
   115ce:	009b      	lsls	r3, r3, #2
   115d0:	18e3      	adds	r3, r4, r3
   115d2:	6859      	ldr	r1, [r3, #4]
   115d4:	4391      	bics	r1, r2
   115d6:	6059      	str	r1, [r3, #4]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   115d8:	69a3      	ldr	r3, [r4, #24]
   115da:	4298      	cmp	r0, r3
   115dc:	d105      	bne.n	115ea <_remove_thread_from_ready_q+0x4e>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
   115de:	69e0      	ldr	r0, [r4, #28]
   115e0:	f7ee ffaa 	bl	538 <__ffssi2>
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
   115e4:	3003      	adds	r0, #3
   115e6:	00c0      	lsls	r0, r0, #3
   115e8:	5823      	ldr	r3, [r4, r0]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   115ea:	61a3      	str	r3, [r4, #24]
#else
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
   115ec:	bd10      	pop	{r4, pc}
   115ee:	46c0      	nop			; (mov r8, r8)
   115f0:	20001abc 	.word	0x20001abc

000115f4 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   115f4:	b570      	push	{r4, r5, r6, lr}
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   115f6:	680b      	ldr	r3, [r1, #0]
   115f8:	0004      	movs	r4, r0
   115fa:	000d      	movs	r5, r1
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   115fc:	4299      	cmp	r1, r3
   115fe:	d013      	beq.n	11628 <_pend_thread+0x34>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(wait_q_list, node) {
   11600:	2b00      	cmp	r3, #0
   11602:	d011      	beq.n	11628 <_pend_thread+0x34>
		struct k_thread *pending = (struct k_thread *)node;

		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   11604:	200a      	movs	r0, #10
   11606:	210a      	movs	r1, #10
   11608:	5620      	ldrsb	r0, [r4, r0]
   1160a:	5659      	ldrsb	r1, [r3, r1]
   1160c:	4288      	cmp	r0, r1
   1160e:	da06      	bge.n	1161e <_pend_thread+0x2a>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   11610:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
   11612:	6023      	str	r3, [r4, #0]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   11614:	6061      	str	r1, [r4, #4]
		node->next = insert_point;
		insert_point->prev->next = node;
   11616:	6859      	ldr	r1, [r3, #4]
   11618:	600c      	str	r4, [r1, #0]
		insert_point->prev = node;
   1161a:	605c      	str	r4, [r3, #4]
   1161c:	e00a      	b.n	11634 <_pend_thread+0x40>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1161e:	6869      	ldr	r1, [r5, #4]
   11620:	428b      	cmp	r3, r1
   11622:	d001      	beq.n	11628 <_pend_thread+0x34>
   11624:	681b      	ldr	r3, [r3, #0]
   11626:	e7eb      	b.n	11600 <_pend_thread+0xc>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   11628:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1162a:	686b      	ldr	r3, [r5, #4]
   1162c:	6063      	str	r3, [r4, #4]

	list->tail->next = node;
   1162e:	686b      	ldr	r3, [r5, #4]
   11630:	601c      	str	r4, [r3, #0]
	list->tail = node;
   11632:	606c      	str	r4, [r5, #4]
}

/* mark a thread as pending in its TCS */
static inline void _mark_thread_as_pending(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_PENDING;
   11634:	2102      	movs	r1, #2
   11636:	7a63      	ldrb	r3, [r4, #9]
   11638:	430b      	orrs	r3, r1
   1163a:	7263      	strb	r3, [r4, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   1163c:	1c53      	adds	r3, r2, #1
   1163e:	d00b      	beq.n	11658 <_pend_thread+0x64>

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       s32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   11640:	3209      	adds	r2, #9
   11642:	0010      	movs	r0, r2
   11644:	3108      	adds	r1, #8
   11646:	f7ee fdb5 	bl	1b4 <__aeabi_uidiv>
   1164a:	0021      	movs	r1, r4
   1164c:	1c43      	adds	r3, r0, #1
   1164e:	3110      	adds	r1, #16
   11650:	002a      	movs	r2, r5
   11652:	0020      	movs	r0, r4
   11654:	f7ff ff4c 	bl	114f0 <_add_timeout>
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   11658:	bd70      	pop	{r4, r5, r6, pc}
	...

0001165c <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   1165c:	b570      	push	{r4, r5, r6, lr}
   1165e:	000e      	movs	r6, r1
   11660:	0005      	movs	r5, r0
	_remove_thread_from_ready_q(_current);
   11662:	4c05      	ldr	r4, [pc, #20]	; (11678 <_pend_current_thread+0x1c>)
   11664:	68a0      	ldr	r0, [r4, #8]
   11666:	f7ff ff99 	bl	1159c <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   1166a:	0032      	movs	r2, r6
   1166c:	0029      	movs	r1, r5
   1166e:	68a0      	ldr	r0, [r4, #8]
   11670:	f7ff ffc0 	bl	115f4 <_pend_thread>
}
   11674:	bd70      	pop	{r4, r5, r6, pc}
   11676:	46c0      	nop			; (mov r8, r8)
   11678:	20001abc 	.word	0x20001abc

0001167c <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
   1167c:	b510      	push	{r4, lr}
{
	int bitmap = 0;
	u32_t ready_range;

#if (K_NUM_PRIORITIES <= 32)
	ready_range = _ready_q.prio_bmap[0];
   1167e:	4c07      	ldr	r4, [pc, #28]	; (1169c <__must_switch_threads+0x20>)
   11680:	69e0      	ldr	r0, [r4, #28]
   11682:	f7ee ff59 	bl	538 <__ffssi2>

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   11686:	220a      	movs	r2, #10
   11688:	68a3      	ldr	r3, [r4, #8]
   1168a:	569a      	ldrsb	r2, [r3, r2]
   1168c:	0003      	movs	r3, r0
   1168e:	3b11      	subs	r3, #17
   11690:	2001      	movs	r0, #1
   11692:	429a      	cmp	r2, r3
   11694:	dc00      	bgt.n	11698 <__must_switch_threads+0x1c>
   11696:	2000      	movs	r0, #0
#else
	return 0;
#endif
}
   11698:	bd10      	pop	{r4, pc}
   1169a:	46c0      	nop			; (mov r8, r8)
   1169c:	20001abc 	.word	0x20001abc

000116a0 <_reschedule_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   116a0:	4b0a      	ldr	r3, [pc, #40]	; (116cc <_reschedule_threads+0x2c>)

/* reschedule threads if the scheduler is not locked */
/* not callable from ISR */
/* must be called with interrupts locked */
void _reschedule_threads(int key)
{
   116a2:	b510      	push	{r4, lr}
   116a4:	689b      	ldr	r3, [r3, #8]
   116a6:	0004      	movs	r4, r0
   116a8:	895b      	ldrh	r3, [r3, #10]
   116aa:	2b7f      	cmp	r3, #127	; 0x7f
   116ac:	d803      	bhi.n	116b6 <_reschedule_threads+0x16>
   116ae:	f7ff ffe5 	bl	1167c <__must_switch_threads>
   116b2:	2800      	cmp	r0, #0
   116b4:	d103      	bne.n	116be <_reschedule_threads+0x1e>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   116b6:	2c00      	cmp	r4, #0
   116b8:	d107      	bne.n	116ca <_reschedule_threads+0x2a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   116ba:	b662      	cpsie	i
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
   116bc:	e005      	b.n	116ca <_reschedule_threads+0x2a>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   116be:	2200      	movs	r2, #0
   116c0:	4b03      	ldr	r3, [pc, #12]	; (116d0 <_reschedule_threads+0x30>)
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
#endif

	return __swap(key);
   116c2:	0020      	movs	r0, r4
   116c4:	601a      	str	r2, [r3, #0]
   116c6:	f7ff f889 	bl	107dc <__swap>
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
   116ca:	bd10      	pop	{r4, pc}
   116cc:	20001abc 	.word	0x20001abc
   116d0:	20001cec 	.word	0x20001cec

000116d4 <k_sched_unlock>:
		_current, _current->base.sched_locked);
#endif
}

void k_sched_unlock(void)
{
   116d4:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   116d6:	f3ef 8010 	mrs	r0, PRIMASK
   116da:	b672      	cpsid	i

	int key = irq_lock();

	/* compiler_barrier() not needed, comes from irq_lock() */

	++_current->base.sched_locked;
   116dc:	4b03      	ldr	r3, [pc, #12]	; (116ec <k_sched_unlock+0x18>)
   116de:	689a      	ldr	r2, [r3, #8]
   116e0:	7ad3      	ldrb	r3, [r2, #11]
   116e2:	3301      	adds	r3, #1
   116e4:	72d3      	strb	r3, [r2, #11]

	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule_threads(key);
   116e6:	f7ff ffdb 	bl	116a0 <_reschedule_threads>
#endif
}
   116ea:	bd10      	pop	{r4, pc}
   116ec:	20001abc 	.word	0x20001abc

000116f0 <_move_thread_to_end_of_prio_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   116f0:	230a      	movs	r3, #10
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
   116f2:	b510      	push	{r4, lr}
   116f4:	56c3      	ldrsb	r3, [r0, r3]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   116f6:	4c0e      	ldr	r4, [pc, #56]	; (11730 <_move_thread_to_end_of_prio_q+0x40>)
   116f8:	3314      	adds	r3, #20
   116fa:	00db      	lsls	r3, r3, #3
   116fc:	18e3      	adds	r3, r4, r3

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   116fe:	685a      	ldr	r2, [r3, #4]
   11700:	4290      	cmp	r0, r2
   11702:	d014      	beq.n	1172e <_move_thread_to_end_of_prio_q+0x3e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   11704:	6842      	ldr	r2, [r0, #4]
   11706:	6801      	ldr	r1, [r0, #0]
   11708:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   1170a:	6801      	ldr	r1, [r0, #0]
   1170c:	604a      	str	r2, [r1, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1170e:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   11710:	685a      	ldr	r2, [r3, #4]
   11712:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
   11714:	685a      	ldr	r2, [r3, #4]
   11716:	6010      	str	r0, [r2, #0]
	list->tail = node;
   11718:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   1171a:	69a3      	ldr	r3, [r4, #24]
   1171c:	4298      	cmp	r0, r3
   1171e:	d105      	bne.n	1172c <_move_thread_to_end_of_prio_q+0x3c>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
   11720:	69e0      	ldr	r0, [r4, #28]
   11722:	f7ee ff09 	bl	538 <__ffssi2>
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
   11726:	3003      	adds	r0, #3
   11728:	00c0      	lsls	r0, r0, #3
   1172a:	5823      	ldr	r3, [r4, r0]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   1172c:	61a3      	str	r3, [r4, #24]
#endif
}
   1172e:	bd10      	pop	{r4, pc}
   11730:	20001abc 	.word	0x20001abc

00011734 <k_yield>:

void k_yield(void)
{
   11734:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11736:	f3ef 8510 	mrs	r5, PRIMASK
   1173a:	b672      	cpsid	i
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	_move_thread_to_end_of_prio_q(_current);
   1173c:	4c09      	ldr	r4, [pc, #36]	; (11764 <k_yield+0x30>)
   1173e:	68a0      	ldr	r0, [r4, #8]
   11740:	f7ff ffd6 	bl	116f0 <_move_thread_to_end_of_prio_q>

	if (_current == _get_next_ready_thread()) {
   11744:	68a2      	ldr	r2, [r4, #8]
   11746:	69a3      	ldr	r3, [r4, #24]
   11748:	429a      	cmp	r2, r3
   1174a:	d103      	bne.n	11754 <k_yield+0x20>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1174c:	2d00      	cmp	r5, #0
   1174e:	d107      	bne.n	11760 <k_yield+0x2c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11750:	b662      	cpsie	i
   11752:	e005      	b.n	11760 <k_yield+0x2c>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   11754:	2200      	movs	r2, #0
   11756:	4b04      	ldr	r3, [pc, #16]	; (11768 <k_yield+0x34>)
   11758:	0028      	movs	r0, r5
   1175a:	601a      	str	r2, [r3, #0]
   1175c:	f7ff f83e 	bl	107dc <__swap>
		_check_stack_sentinel();
#endif
	} else {
		_Swap(key);
	}
}
   11760:	bd70      	pop	{r4, r5, r6, pc}
   11762:	46c0      	nop			; (mov r8, r8)
   11764:	20001abc 	.word	0x20001abc
   11768:	20001cec 	.word	0x20001cec

0001176c <k_sleep>:

void k_sleep(s32_t duration)
{
   1176c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
   1176e:	2800      	cmp	r0, #0
   11770:	d102      	bne.n	11778 <k_sleep+0xc>
		k_yield();
   11772:	f7ff ffdf 	bl	11734 <k_yield>
		return;
   11776:	e019      	b.n	117ac <k_sleep+0x40>
	}

	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   11778:	210a      	movs	r1, #10
   1177a:	3009      	adds	r0, #9
   1177c:	f7ee fd1a 	bl	1b4 <__aeabi_uidiv>
   11780:	3001      	adds	r0, #1
   11782:	9001      	str	r0, [sp, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11784:	f3ef 8510 	mrs	r5, PRIMASK
   11788:	b672      	cpsid	i
	key = irq_lock();

	_remove_thread_from_ready_q(_current);
   1178a:	4c09      	ldr	r4, [pc, #36]	; (117b0 <k_sleep+0x44>)
   1178c:	68a0      	ldr	r0, [r4, #8]
   1178e:	f7ff ff05 	bl	1159c <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   11792:	68a0      	ldr	r0, [r4, #8]
   11794:	9b01      	ldr	r3, [sp, #4]
   11796:	0001      	movs	r1, r0
   11798:	2200      	movs	r2, #0
   1179a:	3110      	adds	r1, #16
   1179c:	f7ff fea8 	bl	114f0 <_add_timeout>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   117a0:	2200      	movs	r2, #0
   117a2:	4b04      	ldr	r3, [pc, #16]	; (117b4 <k_sleep+0x48>)
   117a4:	0028      	movs	r0, r5
   117a6:	601a      	str	r2, [r3, #0]
   117a8:	f7ff f818 	bl	107dc <__swap>
	_remove_thread_from_ready_q(_current);
	_add_thread_timeout(_current, NULL, ticks);

	_Swap(key);
#endif
}
   117ac:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   117ae:	46c0      	nop			; (mov r8, r8)
   117b0:	20001abc 	.word	0x20001abc
   117b4:	20001cec 	.word	0x20001cec

000117b8 <k_current_get>:
	}
}

k_tid_t k_current_get(void)
{
	return _current;
   117b8:	4b01      	ldr	r3, [pc, #4]	; (117c0 <k_current_get+0x8>)
   117ba:	6898      	ldr	r0, [r3, #8]
}
   117bc:	4770      	bx	lr
   117be:	46c0      	nop			; (mov r8, r8)
   117c0:	20001abc 	.word	0x20001abc

000117c4 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   117c4:	4b10      	ldr	r3, [pc, #64]	; (11808 <_is_thread_time_slicing+0x44>)
	_time_slice_elapsed = 0;
	_time_slice_prio_ceiling = prio;
}

int _is_thread_time_slicing(struct k_thread *thread)
{
   117c6:	b082      	sub	sp, #8
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   117c8:	681a      	ldr	r2, [r3, #0]
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
   117ca:	2300      	movs	r3, #0
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   117cc:	429a      	cmp	r2, r3
   117ce:	dd17      	ble.n	11800 <_is_thread_time_slicing+0x3c>
	return entry_point == idle;
}

static inline int _is_idle_thread_ptr(k_tid_t thread)
{
	return thread == _idle_thread;
   117d0:	4b0e      	ldr	r3, [pc, #56]	; (1180c <_is_thread_time_slicing+0x48>)
   117d2:	681b      	ldr	r3, [r3, #0]
   117d4:	9301      	str	r3, [sp, #4]
   117d6:	9a01      	ldr	r2, [sp, #4]
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
   117d8:	2300      	movs	r3, #0
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   117da:	4290      	cmp	r0, r2
   117dc:	d010      	beq.n	11800 <_is_thread_time_slicing+0x3c>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   117de:	220a      	movs	r2, #10
   117e0:	4b0b      	ldr	r3, [pc, #44]	; (11810 <_is_thread_time_slicing+0x4c>)
   117e2:	5682      	ldrsb	r2, [r0, r2]
   117e4:	6819      	ldr	r1, [r3, #0]
		return 0;
   117e6:	2300      	movs	r3, #0
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   117e8:	428a      	cmp	r2, r1
   117ea:	db09      	blt.n	11800 <_is_thread_time_slicing+0x3c>
 * @return 1 if multiple nodes, 0 otherwise
 */

static inline int sys_dlist_has_multiple_nodes(sys_dlist_t *list)
{
	return list->head != list->tail;
   117ec:	0013      	movs	r3, r2
   117ee:	4909      	ldr	r1, [pc, #36]	; (11814 <_is_thread_time_slicing+0x50>)
   117f0:	3314      	adds	r3, #20
   117f2:	00db      	lsls	r3, r3, #3
   117f4:	18ca      	adds	r2, r1, r3
   117f6:	6850      	ldr	r0, [r2, #4]
   117f8:	585b      	ldr	r3, [r3, r1]
   117fa:	1a1b      	subs	r3, r3, r0
   117fc:	1e58      	subs	r0, r3, #1
   117fe:	4183      	sbcs	r3, r0

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
}
   11800:	0018      	movs	r0, r3
   11802:	b002      	add	sp, #8
   11804:	4770      	bx	lr
   11806:	46c0      	nop			; (mov r8, r8)
   11808:	20001be0 	.word	0x20001be0
   1180c:	0001500c 	.word	0x0001500c
   11810:	20001bdc 	.word	0x20001bdc
   11814:	20001abc 	.word	0x20001abc

00011818 <_update_time_slice_before_swap>:
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   11818:	2200      	movs	r2, #0
   1181a:	4b01      	ldr	r3, [pc, #4]	; (11820 <_update_time_slice_before_swap+0x8>)
   1181c:	601a      	str	r2, [r3, #0]
}
   1181e:	4770      	bx	lr
   11820:	20001cec 	.word	0x20001cec

00011824 <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11824:	7a43      	ldrb	r3, [r0, #9]
   11826:	2204      	movs	r2, #4
   11828:	0019      	movs	r1, r3
   1182a:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   1182c:	221b      	movs	r2, #27
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
   1182e:	b510      	push	{r4, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11830:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   11832:	4213      	tst	r3, r2
   11834:	d104      	bne.n	11840 <_ready_thread+0x1c>
   11836:	6a03      	ldr	r3, [r0, #32]
   11838:	3301      	adds	r3, #1
   1183a:	d101      	bne.n	11840 <_ready_thread+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   1183c:	f7ff fe86 	bl	1154c <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
   11840:	bd10      	pop	{r4, pc}
	...

00011844 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   11844:	4b14      	ldr	r3, [pc, #80]	; (11898 <_unpend_first_thread+0x54>)
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
   11846:	0001      	movs	r1, r0
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   11848:	681b      	ldr	r3, [r3, #0]
   1184a:	6802      	ldr	r2, [r0, #0]
   1184c:	2b00      	cmp	r3, #0
   1184e:	d00f      	beq.n	11870 <_unpend_first_thread+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   11850:	0013      	movs	r3, r2
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11852:	2000      	movs	r0, #0
   11854:	4291      	cmp	r1, r2
   11856:	d01d      	beq.n	11894 <_unpend_first_thread+0x50>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   11858:	2b00      	cmp	r3, #0
   1185a:	d007      	beq.n	1186c <_unpend_first_thread+0x28>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   1185c:	6a1a      	ldr	r2, [r3, #32]
   1185e:	3202      	adds	r2, #2
   11860:	d10c      	bne.n	1187c <_unpend_first_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   11862:	684a      	ldr	r2, [r1, #4]
   11864:	429a      	cmp	r2, r3
   11866:	d014      	beq.n	11892 <_unpend_first_thread+0x4e>
   11868:	681b      	ldr	r3, [r3, #0]
   1186a:	e7f5      	b.n	11858 <_unpend_first_thread+0x14>
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   1186c:	0018      	movs	r0, r3
   1186e:	e011      	b.n	11894 <_unpend_first_thread+0x50>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11870:	0018      	movs	r0, r3
   11872:	4291      	cmp	r1, r2
   11874:	d00e      	beq.n	11894 <_unpend_first_thread+0x50>
   11876:	1e10      	subs	r0, r2, #0
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   11878:	d101      	bne.n	1187e <_unpend_first_thread+0x3a>
   1187a:	e00b      	b.n	11894 <_unpend_first_thread+0x50>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   1187c:	0018      	movs	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1187e:	6843      	ldr	r3, [r0, #4]
   11880:	6802      	ldr	r2, [r0, #0]
   11882:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11884:	6802      	ldr	r2, [r0, #0]
   11886:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   11888:	2202      	movs	r2, #2
   1188a:	7a43      	ldrb	r3, [r0, #9]
   1188c:	4393      	bics	r3, r2
   1188e:	7243      	strb	r3, [r0, #9]
   11890:	e000      	b.n	11894 <_unpend_first_thread+0x50>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   11892:	2000      	movs	r0, #0
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
   11894:	4770      	bx	lr
   11896:	46c0      	nop			; (mov r8, r8)
   11898:	20001ce8 	.word	0x20001ce8

0001189c <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   1189c:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1189e:	6900      	ldr	r0, [r0, #16]
   118a0:	1c42      	adds	r2, r0, #1
   118a2:	d010      	beq.n	118c6 <_abort_timeout+0x2a>
   118a4:	4a08      	ldr	r2, [pc, #32]	; (118c8 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   118a6:	6912      	ldr	r2, [r2, #16]
   118a8:	4293      	cmp	r3, r2
   118aa:	d003      	beq.n	118b4 <_abort_timeout+0x18>
   118ac:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   118ae:	6911      	ldr	r1, [r2, #16]
   118b0:	1808      	adds	r0, r1, r0
   118b2:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   118b4:	685a      	ldr	r2, [r3, #4]
   118b6:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
   118b8:	2000      	movs	r0, #0
   118ba:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   118bc:	6819      	ldr	r1, [r3, #0]
   118be:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   118c0:	2201      	movs	r2, #1
   118c2:	4252      	negs	r2, r2
   118c4:	611a      	str	r2, [r3, #16]

	return 0;
}
   118c6:	4770      	bx	lr
   118c8:	20001abc 	.word	0x20001abc

000118cc <k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
   118cc:	2300      	movs	r3, #0
void k_sem_init(struct k_sem *sem, unsigned int initial_count,
		unsigned int limit)
{
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
   118ce:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   118d0:	60c2      	str	r2, [r0, #12]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   118d2:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   118d4:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
   118d6:	6103      	str	r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);
}
   118d8:	4770      	bx	lr
	...

000118dc <k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void k_sem_give(struct k_sem *sem)
{
   118dc:	b570      	push	{r4, r5, r6, lr}
   118de:	0004      	movs	r4, r0
   118e0:	f3ef 8510 	mrs	r5, PRIMASK
   118e4:	b672      	cpsid	i
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   118e6:	f7ff ffad 	bl	11844 <_unpend_first_thread>
   118ea:	1e06      	subs	r6, r0, #0

	if (!thread) {
   118ec:	d116      	bne.n	1191c <k_sem_give+0x40>
#endif
}

static inline void increment_count_up_to_limit(struct k_sem *sem)
{
	sem->count += (sem->count != sem->limit);
   118ee:	68a2      	ldr	r2, [r4, #8]
   118f0:	68e3      	ldr	r3, [r4, #12]
   118f2:	1a9b      	subs	r3, r3, r2
   118f4:	1e59      	subs	r1, r3, #1
   118f6:	418b      	sbcs	r3, r1
   118f8:	189b      	adds	r3, r3, r2
   118fa:	60a3      	str	r3, [r4, #8]
{
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_SEM_AVAILABLE;

	return sem->poll_event ?
	       _handle_obj_poll_event(&sem->poll_event, state) : 0;
   118fc:	6923      	ldr	r3, [r4, #16]
   118fe:	2b00      	cmp	r3, #0
   11900:	d022      	beq.n	11948 <k_sem_give+0x6c>
   11902:	0020      	movs	r0, r4
   11904:	2104      	movs	r1, #4
   11906:	3010      	adds	r0, #16
   11908:	f7ff fc92 	bl	11230 <_handle_obj_poll_event>
{
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   1190c:	2800      	cmp	r0, #0
   1190e:	d01b      	beq.n	11948 <k_sem_give+0x6c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   11910:	f7ff ff82 	bl	11818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   11914:	0028      	movs	r0, r5
   11916:	f7fe ff61 	bl	107dc <__swap>
   1191a:	e018      	b.n	1194e <k_sem_give+0x72>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   1191c:	3010      	adds	r0, #16
   1191e:	f7ff ffbd 	bl	1189c <_abort_timeout>
	if (!thread) {
		increment_count_up_to_limit(sem);
		return handle_poll_event(sem);
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
   11922:	0030      	movs	r0, r6
   11924:	f7ff ff7e 	bl	11824 <_ready_thread>
   11928:	2300      	movs	r3, #0
   1192a:	65f3      	str	r3, [r6, #92]	; 0x5c
   1192c:	f3ef 8305 	mrs	r3, IPSR
   11930:	2b0d      	cmp	r3, #13
   11932:	d809      	bhi.n	11948 <k_sem_give+0x6c>
   11934:	2b03      	cmp	r3, #3
   11936:	d007      	beq.n	11948 <k_sem_give+0x6c>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   11938:	4b05      	ldr	r3, [pc, #20]	; (11950 <k_sem_give+0x74>)
   1193a:	689b      	ldr	r3, [r3, #8]
   1193c:	895b      	ldrh	r3, [r3, #10]
   1193e:	2b7f      	cmp	r3, #127	; 0x7f
   11940:	d802      	bhi.n	11948 <k_sem_give+0x6c>
   11942:	f7ff fe9b 	bl	1167c <__must_switch_threads>
   11946:	e7e1      	b.n	1190c <k_sem_give+0x30>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11948:	2d00      	cmp	r5, #0
   1194a:	d100      	bne.n	1194e <k_sem_give+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1194c:	b662      	cpsie	i
	if (do_sem_give(sem)) {
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   1194e:	bd70      	pop	{r4, r5, r6, pc}
   11950:	20001abc 	.word	0x20001abc

00011954 <k_sem_take>:

int k_sem_take(struct k_sem *sem, s32_t timeout)
{
   11954:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11956:	f3ef 8410 	mrs	r4, PRIMASK
   1195a:	b672      	cpsid	i
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1195c:	6883      	ldr	r3, [r0, #8]
   1195e:	2b00      	cmp	r3, #0
   11960:	d006      	beq.n	11970 <k_sem_take+0x1c>
		sem->count--;
   11962:	3b01      	subs	r3, #1
   11964:	6083      	str	r3, [r0, #8]
		irq_unlock(key);
		return 0;
   11966:	2000      	movs	r0, #0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11968:	4284      	cmp	r4, r0
   1196a:	d111      	bne.n	11990 <k_sem_take+0x3c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1196c:	b662      	cpsie	i
   1196e:	e00f      	b.n	11990 <k_sem_take+0x3c>
	}

	if (timeout == K_NO_WAIT) {
   11970:	2900      	cmp	r1, #0
   11972:	d103      	bne.n	1197c <k_sem_take+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11974:	2c00      	cmp	r4, #0
   11976:	d109      	bne.n	1198c <k_sem_take+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11978:	b662      	cpsie	i
   1197a:	e007      	b.n	1198c <k_sem_take+0x38>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   1197c:	f7ff fe6e 	bl	1165c <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   11980:	f7ff ff4a 	bl	11818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   11984:	0020      	movs	r0, r4
   11986:	f7fe ff29 	bl	107dc <__swap>

	return _Swap(key);
   1198a:	e001      	b.n	11990 <k_sem_take+0x3c>
		return 0;
	}

	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EBUSY;
   1198c:	2010      	movs	r0, #16
   1198e:	4240      	negs	r0, r0
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
   11990:	bd10      	pop	{r4, pc}
	...

00011994 <_tick_get>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11994:	f3ef 8310 	mrs	r3, PRIMASK
   11998:	b672      	cpsid	i
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   1199a:	4a03      	ldr	r2, [pc, #12]	; (119a8 <_tick_get+0x14>)
   1199c:	6810      	ldr	r0, [r2, #0]
   1199e:	6851      	ldr	r1, [r2, #4]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   119a0:	2b00      	cmp	r3, #0
   119a2:	d100      	bne.n	119a6 <_tick_get+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   119a4:	b662      	cpsie	i
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   119a6:	4770      	bx	lr
   119a8:	20001cf0 	.word	0x20001cf0

000119ac <k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t k_uptime_get(void)
{
   119ac:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   119ae:	f7ff fff1 	bl	11994 <_tick_get>
   119b2:	220a      	movs	r2, #10
   119b4:	2300      	movs	r3, #0
   119b6:	f7ee fd93 	bl	4e0 <__aeabi_lmul>
}
   119ba:	bd10      	pop	{r4, pc}

000119bc <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   119bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   119be:	b085      	sub	sp, #20
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   119c0:	f3ef 8410 	mrs	r4, PRIMASK
   119c4:	b672      	cpsid	i

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   119c6:	495a      	ldr	r1, [pc, #360]	; (11b30 <_nano_sys_clock_tick_announce+0x174>)
   119c8:	17c3      	asrs	r3, r0, #31
   119ca:	9301      	str	r3, [sp, #4]
   119cc:	9000      	str	r0, [sp, #0]
   119ce:	680a      	ldr	r2, [r1, #0]
   119d0:	684b      	ldr	r3, [r1, #4]
   119d2:	9d00      	ldr	r5, [sp, #0]
   119d4:	9e01      	ldr	r6, [sp, #4]
   119d6:	1952      	adds	r2, r2, r5
   119d8:	4173      	adcs	r3, r6
   119da:	600a      	str	r2, [r1, #0]
   119dc:	604b      	str	r3, [r1, #4]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   119de:	2c00      	cmp	r4, #0
   119e0:	d100      	bne.n	119e4 <_nano_sys_clock_tick_announce+0x28>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   119e2:	b662      	cpsie	i
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   119e4:	aa02      	add	r2, sp, #8
   119e6:	9202      	str	r2, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   119e8:	6052      	str	r2, [r2, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   119ea:	f3ef 8610 	mrs	r6, PRIMASK
   119ee:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   119f0:	4d50      	ldr	r5, [pc, #320]	; (11b34 <_nano_sys_clock_tick_announce+0x178>)
   119f2:	4c51      	ldr	r4, [pc, #324]	; (11b38 <_nano_sys_clock_tick_announce+0x17c>)
   119f4:	68eb      	ldr	r3, [r5, #12]
   119f6:	0031      	movs	r1, r6
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   119f8:	42a3      	cmp	r3, r4
   119fa:	d001      	beq.n	11a00 <_nano_sys_clock_tick_announce+0x44>
		(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

	K_DEBUG("head: %p, delta: %d\n",
		head, head ? head->delta_ticks_from_prev : -2112);

	if (!head) {
   119fc:	2b00      	cmp	r3, #0
   119fe:	d103      	bne.n	11a08 <_nano_sys_clock_tick_announce+0x4c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11a00:	2e00      	cmp	r6, #0
   11a02:	d171      	bne.n	11ae8 <_nano_sys_clock_tick_announce+0x12c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11a04:	b662      	cpsie	i
   11a06:	e06f      	b.n	11ae8 <_nano_sys_clock_tick_announce+0x12c>
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
   11a08:	691e      	ldr	r6, [r3, #16]
   11a0a:	1a30      	subs	r0, r6, r0
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
   11a0c:	2601      	movs	r6, #1
	if (!head) {
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
   11a0e:	6118      	str	r0, [r3, #16]
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
   11a10:	484a      	ldr	r0, [pc, #296]	; (11b3c <_nano_sys_clock_tick_announce+0x180>)
   11a12:	6006      	str	r6, [r0, #0]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
   11a14:	3e03      	subs	r6, #3
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
   11a16:	6918      	ldr	r0, [r3, #16]
   11a18:	2800      	cmp	r0, #0
   11a1a:	d116      	bne.n	11a4a <_nano_sys_clock_tick_announce+0x8e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   11a1c:	681f      	ldr	r7, [r3, #0]
   11a1e:	6858      	ldr	r0, [r3, #4]
   11a20:	6007      	str	r7, [r0, #0]
	node->next->prev = node->prev;
   11a22:	681f      	ldr	r7, [r3, #0]
   11a24:	6078      	str	r0, [r7, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
   11a26:	6810      	ldr	r0, [r2, #0]
	node->prev = list;
   11a28:	605a      	str	r2, [r3, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
   11a2a:	6018      	str	r0, [r3, #0]
	node->prev = list;

	list->head->prev = node;
   11a2c:	6810      	ldr	r0, [r2, #0]
	list->head = node;
   11a2e:	6013      	str	r3, [r2, #0]
static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
	node->prev = list;

	list->head->prev = node;
   11a30:	6043      	str	r3, [r0, #4]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
   11a32:	611e      	str	r6, [r3, #16]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11a34:	2900      	cmp	r1, #0
   11a36:	d100      	bne.n	11a3a <_nano_sys_clock_tick_announce+0x7e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11a38:	b662      	cpsie	i
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11a3a:	f3ef 8110 	mrs	r1, PRIMASK
   11a3e:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   11a40:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a42:	42a3      	cmp	r3, r4
   11a44:	d001      	beq.n	11a4a <_nano_sys_clock_tick_announce+0x8e>
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
   11a46:	2b00      	cmp	r3, #0
   11a48:	d1e5      	bne.n	11a16 <_nano_sys_clock_tick_announce+0x5a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11a4a:	2900      	cmp	r1, #0
   11a4c:	d100      	bne.n	11a50 <_nano_sys_clock_tick_announce+0x94>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11a4e:	b662      	cpsie	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   11a50:	9b02      	ldr	r3, [sp, #8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a52:	4293      	cmp	r3, r2
   11a54:	d103      	bne.n	11a5e <_nano_sys_clock_tick_announce+0xa2>

	irq_unlock(key);

	_handle_expired_timeouts(&expired);

	_handling_timeouts = 0;
   11a56:	2200      	movs	r2, #0
   11a58:	4b38      	ldr	r3, [pc, #224]	; (11b3c <_nano_sys_clock_tick_announce+0x180>)
   11a5a:	601a      	str	r2, [r3, #0]
   11a5c:	e044      	b.n	11ae8 <_nano_sys_clock_tick_announce+0x12c>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11a5e:	2b00      	cmp	r3, #0
   11a60:	d0f9      	beq.n	11a56 <_nano_sys_clock_tick_announce+0x9a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   11a62:	9a03      	ldr	r2, [sp, #12]
   11a64:	2400      	movs	r4, #0
   11a66:	4293      	cmp	r3, r2
   11a68:	d000      	beq.n	11a6c <_nano_sys_clock_tick_announce+0xb0>
   11a6a:	681c      	ldr	r4, [r3, #0]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11a6c:	2704      	movs	r7, #4
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   11a6e:	6819      	ldr	r1, [r3, #0]
   11a70:	685a      	ldr	r2, [r3, #4]
   11a72:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   11a74:	6819      	ldr	r1, [r3, #0]
   11a76:	604a      	str	r2, [r1, #4]
 * kept as -EAGAIN, set previously in _Swap().
 */

static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
   11a78:	6898      	ldr	r0, [r3, #8]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11a7a:	f3ef 8610 	mrs	r6, PRIMASK
   11a7e:	b672      	cpsid	i
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
   11a80:	2201      	movs	r2, #1
   11a82:	4252      	negs	r2, r2
   11a84:	611a      	str	r2, [r3, #16]

	K_DEBUG("timeout %p\n", timeout);
	if (thread) {
   11a86:	2800      	cmp	r0, #0
   11a88:	d01b      	beq.n	11ac2 <_nano_sys_clock_tick_announce+0x106>
/* remove a thread timing out from kernel object's wait queue */

static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
   11a8a:	68db      	ldr	r3, [r3, #12]
   11a8c:	2b00      	cmp	r3, #0
   11a8e:	d00a      	beq.n	11aa6 <_nano_sys_clock_tick_announce+0xea>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   11a90:	6843      	ldr	r3, [r0, #4]
   11a92:	6802      	ldr	r2, [r0, #0]
   11a94:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11a96:	6802      	ldr	r2, [r0, #0]
   11a98:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   11a9a:	2202      	movs	r2, #2
   11a9c:	7a43      	ldrb	r3, [r0, #9]
   11a9e:	4393      	bics	r3, r2
   11aa0:	7243      	strb	r3, [r0, #9]
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
   11aa2:	2300      	movs	r3, #0
   11aa4:	61c3      	str	r3, [r0, #28]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11aa6:	7a43      	ldrb	r3, [r0, #9]
   11aa8:	001a      	movs	r2, r3
   11aaa:	43ba      	bics	r2, r7
   11aac:	7242      	strb	r2, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   11aae:	221b      	movs	r2, #27
   11ab0:	4213      	tst	r3, r2
   11ab2:	d102      	bne.n	11aba <_nano_sys_clock_tick_announce+0xfe>
   11ab4:	6a03      	ldr	r3, [r0, #32]
   11ab6:	3301      	adds	r3, #1
   11ab8:	d035      	beq.n	11b26 <_nano_sys_clock_tick_announce+0x16a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11aba:	2e00      	cmp	r6, #0
   11abc:	d109      	bne.n	11ad2 <_nano_sys_clock_tick_announce+0x116>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11abe:	b662      	cpsie	i
   11ac0:	e007      	b.n	11ad2 <_nano_sys_clock_tick_announce+0x116>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11ac2:	2e00      	cmp	r6, #0
   11ac4:	d100      	bne.n	11ac8 <_nano_sys_clock_tick_announce+0x10c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11ac6:	b662      	cpsie	i
		_unpend_thread_timing_out(thread, timeout);
		_ready_thread(thread);
		irq_unlock(key);
	} else {
		irq_unlock(key);
		if (timeout->func) {
   11ac8:	695a      	ldr	r2, [r3, #20]
   11aca:	2a00      	cmp	r2, #0
   11acc:	d001      	beq.n	11ad2 <_nano_sys_clock_tick_announce+0x116>
			timeout->func(timeout);
   11ace:	0018      	movs	r0, r3
   11ad0:	4790      	blx	r2
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11ad2:	2c00      	cmp	r4, #0
   11ad4:	d0bf      	beq.n	11a56 <_nano_sys_clock_tick_announce+0x9a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   11ad6:	9b03      	ldr	r3, [sp, #12]
   11ad8:	2200      	movs	r2, #0
   11ada:	429c      	cmp	r4, r3
   11adc:	d102      	bne.n	11ae4 <_nano_sys_clock_tick_announce+0x128>
   11ade:	0023      	movs	r3, r4
   11ae0:	0014      	movs	r4, r2
   11ae2:	e7c4      	b.n	11a6e <_nano_sys_clock_tick_announce+0xb2>
   11ae4:	6822      	ldr	r2, [r4, #0]
   11ae6:	e7fa      	b.n	11ade <_nano_sys_clock_tick_announce+0x122>
static void handle_time_slicing(s32_t ticks)
{
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   11ae8:	68a8      	ldr	r0, [r5, #8]
   11aea:	f7ff fe6b 	bl	117c4 <_is_thread_time_slicing>
   11aee:	2800      	cmp	r0, #0
   11af0:	d01c      	beq.n	11b2c <_nano_sys_clock_tick_announce+0x170>
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   11af2:	9800      	ldr	r0, [sp, #0]
   11af4:	9901      	ldr	r1, [sp, #4]
   11af6:	220a      	movs	r2, #10
   11af8:	2300      	movs	r3, #0
   11afa:	f7ee fcf1 	bl	4e0 <__aeabi_lmul>
   11afe:	4b10      	ldr	r3, [pc, #64]	; (11b40 <_nano_sys_clock_tick_announce+0x184>)
   11b00:	681a      	ldr	r2, [r3, #0]
   11b02:	1810      	adds	r0, r2, r0
	if (_time_slice_elapsed >= _time_slice_duration) {
   11b04:	4a0f      	ldr	r2, [pc, #60]	; (11b44 <_nano_sys_clock_tick_announce+0x188>)
#endif
	if (!_is_thread_time_slicing(_current)) {
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   11b06:	6018      	str	r0, [r3, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   11b08:	6812      	ldr	r2, [r2, #0]
   11b0a:	4290      	cmp	r0, r2
   11b0c:	db0e      	blt.n	11b2c <_nano_sys_clock_tick_announce+0x170>

		unsigned int key;

		_time_slice_elapsed = 0;
   11b0e:	2200      	movs	r2, #0
   11b10:	601a      	str	r2, [r3, #0]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11b12:	f3ef 8410 	mrs	r4, PRIMASK
   11b16:	b672      	cpsid	i

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   11b18:	68a8      	ldr	r0, [r5, #8]
   11b1a:	f7ff fde9 	bl	116f0 <_move_thread_to_end_of_prio_q>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11b1e:	2c00      	cmp	r4, #0
   11b20:	d104      	bne.n	11b2c <_nano_sys_clock_tick_announce+0x170>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11b22:	b662      	cpsie	i
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   11b24:	e002      	b.n	11b2c <_nano_sys_clock_tick_announce+0x170>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   11b26:	f7ff fd11 	bl	1154c <_add_thread_to_ready_q>
   11b2a:	e7c6      	b.n	11aba <_nano_sys_clock_tick_announce+0xfe>
   11b2c:	b005      	add	sp, #20
   11b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b30:	20001cf0 	.word	0x20001cf0
   11b34:	20001abc 	.word	0x20001abc
   11b38:	20001ac8 	.word	0x20001ac8
   11b3c:	20001ce8 	.word	0x20001ce8
   11b40:	20001cec 	.word	0x20001cec
   11b44:	20001be0 	.word	0x20001be0

00011b48 <k_sys_work_q_init>:

static int k_sys_work_q_init(struct device *dev)
{
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   11b48:	2301      	movs	r3, #1
   11b4a:	2280      	movs	r2, #128	; 0x80
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   11b4c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   11b4e:	4804      	ldr	r0, [pc, #16]	; (11b60 <k_sys_work_q_init+0x18>)
   11b50:	425b      	negs	r3, r3
   11b52:	00d2      	lsls	r2, r2, #3
   11b54:	4903      	ldr	r1, [pc, #12]	; (11b64 <k_sys_work_q_init+0x1c>)
   11b56:	f000 f973 	bl	11e40 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   11b5a:	2000      	movs	r0, #0
   11b5c:	bd10      	pop	{r4, pc}
   11b5e:	46c0      	nop			; (mov r8, r8)
   11b60:	20001cf8 	.word	0x20001cf8
   11b64:	2000390c 	.word	0x2000390c

00011b68 <_is_thread_ready>:
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   11b68:	7a42      	ldrb	r2, [r0, #9]
   11b6a:	2300      	movs	r3, #0
   11b6c:	06d2      	lsls	r2, r2, #27
   11b6e:	d103      	bne.n	11b78 <_is_thread_ready+0x10>
   11b70:	6a03      	ldr	r3, [r0, #32]
   11b72:	3301      	adds	r3, #1
   11b74:	4258      	negs	r0, r3
   11b76:	4143      	adcs	r3, r0
		 _is_thread_timeout_active(thread));
}
   11b78:	0018      	movs	r0, r3
   11b7a:	4770      	bx	lr

00011b7c <start_thread>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
static void start_thread(struct k_thread *thread)
{
   11b7c:	b570      	push	{r4, r5, r6, lr}
   11b7e:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11b80:	f3ef 8510 	mrs	r5, PRIMASK
   11b84:	b672      	cpsid	i
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11b86:	2204      	movs	r2, #4
   11b88:	7a43      	ldrb	r3, [r0, #9]
   11b8a:	4393      	bics	r3, r2
   11b8c:	7243      	strb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   11b8e:	f7ff ffeb 	bl	11b68 <_is_thread_ready>
   11b92:	2800      	cmp	r0, #0
   11b94:	d011      	beq.n	11bba <start_thread+0x3e>
		_add_thread_to_ready_q(thread);
   11b96:	0020      	movs	r0, r4
   11b98:	f7ff fcd8 	bl	1154c <_add_thread_to_ready_q>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   11b9c:	4b09      	ldr	r3, [pc, #36]	; (11bc4 <start_thread+0x48>)
   11b9e:	689b      	ldr	r3, [r3, #8]
   11ba0:	895b      	ldrh	r3, [r3, #10]
   11ba2:	2b7f      	cmp	r3, #127	; 0x7f
   11ba4:	d809      	bhi.n	11bba <start_thread+0x3e>
   11ba6:	f7ff fd69 	bl	1167c <__must_switch_threads>
   11baa:	2800      	cmp	r0, #0
   11bac:	d005      	beq.n	11bba <start_thread+0x3e>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   11bae:	f7ff fe33 	bl	11818 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   11bb2:	0028      	movs	r0, r5
   11bb4:	f7fe fe12 	bl	107dc <__swap>
   11bb8:	e002      	b.n	11bc0 <start_thread+0x44>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11bba:	2d00      	cmp	r5, #0
   11bbc:	d100      	bne.n	11bc0 <start_thread+0x44>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11bbe:	b662      	cpsie	i
			return;
		}
	}

	irq_unlock(key);
}
   11bc0:	bd70      	pop	{r4, r5, r6, pc}
   11bc2:	46c0      	nop			; (mov r8, r8)
   11bc4:	20001abc 	.word	0x20001abc

00011bc8 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   11bc8:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11bca:	6900      	ldr	r0, [r0, #16]
   11bcc:	1c42      	adds	r2, r0, #1
   11bce:	d010      	beq.n	11bf2 <_abort_timeout+0x2a>
   11bd0:	4a08      	ldr	r2, [pc, #32]	; (11bf4 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   11bd2:	6912      	ldr	r2, [r2, #16]
   11bd4:	4293      	cmp	r3, r2
   11bd6:	d003      	beq.n	11be0 <_abort_timeout+0x18>
   11bd8:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11bda:	6911      	ldr	r1, [r2, #16]
   11bdc:	1808      	adds	r0, r1, r0
   11bde:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   11be0:	685a      	ldr	r2, [r3, #4]
   11be2:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
   11be4:	2000      	movs	r0, #0
   11be6:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   11be8:	6819      	ldr	r1, [r3, #0]
   11bea:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   11bec:	2201      	movs	r2, #1
   11bee:	4252      	negs	r2, r2
   11bf0:	611a      	str	r2, [r3, #16]

	return 0;
}
   11bf2:	4770      	bx	lr
   11bf4:	20001abc 	.word	0x20001abc

00011bf8 <schedule_new_thread.part.14>:
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   11bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11bfa:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11bfc:	f3ef 8510 	mrs	r5, PRIMASK
   11c00:	b672      	cpsid	i
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   11c02:	3109      	adds	r1, #9
   11c04:	0008      	movs	r0, r1
   11c06:	210a      	movs	r1, #10
   11c08:	f7ee fad4 	bl	1b4 <__aeabi_uidiv>
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
   11c0c:	2300      	movs	r3, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   11c0e:	4a17      	ldr	r2, [pc, #92]	; (11c6c <schedule_new_thread.part.14+0x74>)
   11c10:	61e3      	str	r3, [r4, #28]
   11c12:	4e17      	ldr	r6, [pc, #92]	; (11c70 <schedule_new_thread.part.14+0x78>)
   11c14:	68d3      	ldr	r3, [r2, #12]
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   11c16:	3001      	adds	r0, #1
   11c18:	6220      	str	r0, [r4, #32]
	timeout->thread = thread;
   11c1a:	61a4      	str	r4, [r4, #24]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11c1c:	42b3      	cmp	r3, r6
   11c1e:	d107      	bne.n	11c30 <schedule_new_thread.part.14+0x38>
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
   11c20:	0023      	movs	r3, r4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   11c22:	6126      	str	r6, [r4, #16]
	node->prev = list->tail;
   11c24:	6911      	ldr	r1, [r2, #16]
   11c26:	3310      	adds	r3, #16
   11c28:	6161      	str	r1, [r4, #20]

	list->tail->next = node;
   11c2a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   11c2c:	6113      	str	r3, [r2, #16]
   11c2e:	e019      	b.n	11c64 <schedule_new_thread.part.14+0x6c>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11c30:	2b00      	cmp	r3, #0
   11c32:	d0f5      	beq.n	11c20 <schedule_new_thread.part.14+0x28>
   11c34:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   11c36:	6a21      	ldr	r1, [r4, #32]
   11c38:	6918      	ldr	r0, [r3, #16]
   11c3a:	4281      	cmp	r1, r0
   11c3c:	dc0a      	bgt.n	11c54 <schedule_new_thread.part.14+0x5c>
			in_q->delta_ticks_from_prev -= *delta;
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   11c3e:	0022      	movs	r2, r4
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
		if (*delta <= in_q->delta_ticks_from_prev) {
			in_q->delta_ticks_from_prev -= *delta;
   11c40:	1a41      	subs	r1, r0, r1
   11c42:	6119      	str	r1, [r3, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   11c44:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
   11c46:	6123      	str	r3, [r4, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   11c48:	6161      	str	r1, [r4, #20]
		node->next = insert_point;
		insert_point->prev->next = node;
   11c4a:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   11c4c:	3210      	adds	r2, #16
   11c4e:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
   11c50:	605a      	str	r2, [r3, #4]
   11c52:	e007      	b.n	11c64 <schedule_new_thread.part.14+0x6c>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   11c54:	1a09      	subs	r1, r1, r0
   11c56:	6221      	str	r1, [r4, #32]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   11c58:	42bb      	cmp	r3, r7
   11c5a:	d0e1      	beq.n	11c20 <schedule_new_thread.part.14+0x28>
   11c5c:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11c5e:	2b00      	cmp	r3, #0
   11c60:	d1e9      	bne.n	11c36 <schedule_new_thread.part.14+0x3e>
   11c62:	e7dd      	b.n	11c20 <schedule_new_thread.part.14+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11c64:	2d00      	cmp	r5, #0
   11c66:	d100      	bne.n	11c6a <schedule_new_thread.part.14+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11c68:	b662      	cpsie	i
	}
#else
	ARG_UNUSED(delay);
	start_thread(thread);
#endif
}
   11c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c6c:	20001abc 	.word	0x20001abc
   11c70:	20001ac8 	.word	0x20001ac8

00011c74 <k_is_in_isr>:
   11c74:	f3ef 8305 	mrs	r3, IPSR
   11c78:	2001      	movs	r0, #1
   11c7a:	2b0d      	cmp	r3, #13
   11c7c:	d802      	bhi.n	11c84 <k_is_in_isr+0x10>
   11c7e:	3b03      	subs	r3, #3
   11c80:	4258      	negs	r0, r3
   11c82:	4158      	adcs	r0, r3


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   11c84:	4770      	bx	lr
	...

00011c88 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   11c88:	4b02      	ldr	r3, [pc, #8]	; (11c94 <_is_thread_essential+0xc>)
   11c8a:	689b      	ldr	r3, [r3, #8]
   11c8c:	7a18      	ldrb	r0, [r3, #8]
   11c8e:	2301      	movs	r3, #1
   11c90:	4018      	ands	r0, r3
}
   11c92:	4770      	bx	lr
   11c94:	20001abc 	.word	0x20001abc

00011c98 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
   11c98:	b510      	push	{r4, lr}
   11c9a:	0004      	movs	r4, r0
   11c9c:	0008      	movs	r0, r1
   11c9e:	0011      	movs	r1, r2
	entry(p1, p2, p3);
   11ca0:	001a      	movs	r2, r3
   11ca2:	47a0      	blx	r4

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_MULTITHREADING
	if (_is_thread_essential()) {
   11ca4:	f7ff fff0 	bl	11c88 <_is_thread_essential>
   11ca8:	2800      	cmp	r0, #0
   11caa:	d002      	beq.n	11cb2 <_thread_entry+0x1a>
		_k_except_reason(_NANO_ERR_INVALID_TASK_EXIT);
   11cac:	b662      	cpsie	i
   11cae:	2001      	movs	r0, #1
   11cb0:	df02      	svc	2
	}

	k_thread_abort(_current);
   11cb2:	4b02      	ldr	r3, [pc, #8]	; (11cbc <_thread_entry+0x24>)
   11cb4:	6898      	ldr	r0, [r3, #8]
   11cb6:	f7fe fed9 	bl	10a6c <k_thread_abort>
   11cba:	46c0      	nop			; (mov r8, r8)
   11cbc:	20001abc 	.word	0x20001abc

00011cc0 <k_thread_create>:

k_tid_t k_thread_create(struct k_thread *new_thread, char *stack,
			size_t stack_size, void (*entry)(void *, void *, void*),
			void *p1, void *p2, void *p3,
			int prio, u32_t options, s32_t delay)
{
   11cc0:	b510      	push	{r4, lr}
   11cc2:	0004      	movs	r4, r0
   11cc4:	b086      	sub	sp, #24
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
   11cc6:	980c      	ldr	r0, [sp, #48]	; 0x30
   11cc8:	9004      	str	r0, [sp, #16]
   11cca:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11ccc:	9003      	str	r0, [sp, #12]
   11cce:	980a      	ldr	r0, [sp, #40]	; 0x28
   11cd0:	9002      	str	r0, [sp, #8]
   11cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
   11cd4:	9001      	str	r0, [sp, #4]
   11cd6:	9808      	ldr	r0, [sp, #32]
   11cd8:	9000      	str	r0, [sp, #0]
   11cda:	0020      	movs	r0, r4
   11cdc:	f7fe fe26 	bl	1092c <_new_thread>

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   11ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11ce2:	2b00      	cmp	r3, #0
   11ce4:	d103      	bne.n	11cee <k_thread_create+0x2e>
		start_thread(thread);
   11ce6:	0020      	movs	r0, r4
   11ce8:	f7ff ff48 	bl	11b7c <start_thread>
   11cec:	e003      	b.n	11cf6 <k_thread_create+0x36>
   11cee:	990d      	ldr	r1, [sp, #52]	; 0x34
   11cf0:	0020      	movs	r0, r4
   11cf2:	f7ff ff81 	bl	11bf8 <schedule_new_thread.part.14>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
		    options);

	schedule_new_thread(new_thread, delay);
	return new_thread;
}
   11cf6:	0020      	movs	r0, r4
   11cf8:	b006      	add	sp, #24
   11cfa:	bd10      	pop	{r4, pc}

00011cfc <_k_thread_single_abort>:
	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   11cfc:	6d03      	ldr	r3, [r0, #80]	; 0x50

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
   11cfe:	b510      	push	{r4, lr}
   11d00:	0004      	movs	r4, r0
	if (thread->fn_abort != NULL) {
   11d02:	2b00      	cmp	r3, #0
   11d04:	d000      	beq.n	11d08 <_k_thread_single_abort+0xc>
		thread->fn_abort();
   11d06:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   11d08:	0020      	movs	r0, r4
   11d0a:	f7ff ff2d 	bl	11b68 <_is_thread_ready>
   11d0e:	2800      	cmp	r0, #0
   11d10:	d003      	beq.n	11d1a <_k_thread_single_abort+0x1e>
		_remove_thread_from_ready_q(thread);
   11d12:	0020      	movs	r0, r4
   11d14:	f7ff fc42 	bl	1159c <_remove_thread_from_ready_q>
   11d18:	e012      	b.n	11d40 <_k_thread_single_abort+0x44>
	} else {
		if (_is_thread_pending(thread)) {
   11d1a:	2202      	movs	r2, #2
   11d1c:	7a63      	ldrb	r3, [r4, #9]
   11d1e:	4213      	tst	r3, r2
   11d20:	d007      	beq.n	11d32 <_k_thread_single_abort+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   11d22:	6863      	ldr	r3, [r4, #4]
   11d24:	6821      	ldr	r1, [r4, #0]
   11d26:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   11d28:	6821      	ldr	r1, [r4, #0]
   11d2a:	604b      	str	r3, [r1, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   11d2c:	7a63      	ldrb	r3, [r4, #9]
   11d2e:	4393      	bics	r3, r2
   11d30:	7263      	strb	r3, [r4, #9]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   11d32:	6a23      	ldr	r3, [r4, #32]
   11d34:	3301      	adds	r3, #1
   11d36:	d003      	beq.n	11d40 <_k_thread_single_abort+0x44>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   11d38:	0020      	movs	r0, r4
   11d3a:	3010      	adds	r0, #16
   11d3c:	f7ff ff44 	bl	11bc8 <_abort_timeout>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_DEAD;
   11d40:	2208      	movs	r2, #8
   11d42:	7a63      	ldrb	r3, [r4, #9]
   11d44:	4313      	orrs	r3, r2
   11d46:	7263      	strb	r3, [r4, #9]
			_abort_thread_timeout(thread);
		}
	}
	_mark_thread_as_dead(thread);
}
   11d48:	bd10      	pop	{r4, pc}
	...

00011d4c <_init_static_threads>:

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
   11d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   11d4e:	4c1c      	ldr	r4, [pc, #112]	; (11dc0 <_init_static_threads+0x74>)
	_mark_thread_as_dead(thread);
}

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
   11d50:	b087      	sub	sp, #28
   11d52:	0025      	movs	r5, r4
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   11d54:	4e1b      	ldr	r6, [pc, #108]	; (11dc4 <_init_static_threads+0x78>)
   11d56:	42b4      	cmp	r4, r6
   11d58:	d213      	bcs.n	11d82 <_init_static_threads+0x36>
		_new_thread(
   11d5a:	6a23      	ldr	r3, [r4, #32]
   11d5c:	9304      	str	r3, [sp, #16]
   11d5e:	69e3      	ldr	r3, [r4, #28]
   11d60:	9303      	str	r3, [sp, #12]
   11d62:	69a3      	ldr	r3, [r4, #24]
   11d64:	9302      	str	r3, [sp, #8]
   11d66:	6963      	ldr	r3, [r4, #20]
   11d68:	9301      	str	r3, [sp, #4]
   11d6a:	6923      	ldr	r3, [r4, #16]
   11d6c:	9300      	str	r3, [sp, #0]
   11d6e:	68e3      	ldr	r3, [r4, #12]
   11d70:	68a2      	ldr	r2, [r4, #8]
   11d72:	6861      	ldr	r1, [r4, #4]
   11d74:	6820      	ldr	r0, [r4, #0]
   11d76:	f7fe fdd9 	bl	1092c <_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   11d7a:	6823      	ldr	r3, [r4, #0]
   11d7c:	64dc      	str	r4, [r3, #76]	; 0x4c
#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   11d7e:	3430      	adds	r4, #48	; 0x30
   11d80:	e7e8      	b.n	11d54 <_init_static_threads+0x8>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   11d82:	4b11      	ldr	r3, [pc, #68]	; (11dc8 <_init_static_threads+0x7c>)
   11d84:	689a      	ldr	r2, [r3, #8]
   11d86:	7ad3      	ldrb	r3, [r2, #11]
   11d88:	3b01      	subs	r3, #1
   11d8a:	72d3      	strb	r3, [r2, #11]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11d8c:	f3ef 8710 	mrs	r7, PRIMASK
   11d90:	b672      	cpsid	i
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   11d92:	002c      	movs	r4, r5
   11d94:	42b4      	cmp	r4, r6
   11d96:	d20c      	bcs.n	11db2 <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   11d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11d9a:	1c4b      	adds	r3, r1, #1
   11d9c:	d007      	beq.n	11dae <_init_static_threads+0x62>
			schedule_new_thread(thread_data->init_thread,
   11d9e:	6820      	ldr	r0, [r4, #0]

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   11da0:	2900      	cmp	r1, #0
   11da2:	d102      	bne.n	11daa <_init_static_threads+0x5e>
		start_thread(thread);
   11da4:	f7ff feea 	bl	11b7c <start_thread>
   11da8:	e001      	b.n	11dae <_init_static_threads+0x62>
   11daa:	f7ff ff25 	bl	11bf8 <schedule_new_thread.part.14>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   11dae:	3430      	adds	r4, #48	; 0x30
   11db0:	e7f0      	b.n	11d94 <_init_static_threads+0x48>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11db2:	2f00      	cmp	r7, #0
   11db4:	d100      	bne.n	11db8 <_init_static_threads+0x6c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11db6:	b662      	cpsie	i
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   11db8:	f7ff fc8c 	bl	116d4 <k_sched_unlock>
}
   11dbc:	b007      	add	sp, #28
   11dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11dc0:	200005ec 	.word	0x200005ec
   11dc4:	200005ec 	.word	0x200005ec
   11dc8:	20001abc 	.word	0x20001abc

00011dcc <_init_thread_base>:
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   11dcc:	7242      	strb	r2, [r0, #9]
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
   11dce:	2201      	movs	r2, #1
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   11dd0:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   11dd2:	2300      	movs	r3, #0
   11dd4:	4252      	negs	r2, r2
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   11dd6:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   11dd8:	72c3      	strb	r3, [r0, #11]
   11dda:	6202      	str	r2, [r0, #32]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   11ddc:	61c3      	str	r3, [r0, #28]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
   11dde:	6183      	str	r3, [r0, #24]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   11de0:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
   11de2:	4770      	bx	lr

00011de4 <k_work_submit_to_queue>:
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
   11de4:	b570      	push	{r4, r5, r6, lr}
   11de6:	0005      	movs	r5, r0
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11de8:	0008      	movs	r0, r1
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
   11dea:	000c      	movs	r4, r1
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   11dec:	3008      	adds	r0, #8
   11dee:	2101      	movs	r1, #1
   11df0:	f7fe feb9 	bl	10b66 <atomic_or>
   11df4:	07c3      	lsls	r3, r0, #31
   11df6:	d403      	bmi.n	11e00 <k_work_submit_to_queue+0x1c>
		k_fifo_put(&work_q->fifo, work);
   11df8:	0021      	movs	r1, r4
   11dfa:	0028      	movs	r0, r5
   11dfc:	f7ff fb00 	bl	11400 <k_queue_append>
	}
}
   11e00:	bd70      	pop	{r4, r5, r6, pc}

00011e02 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   11e02:	380c      	subs	r0, #12
			work_q, 0, 0, prio, 0, 0);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   11e04:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   11e06:	0001      	movs	r1, r0
   11e08:	0004      	movs	r4, r0
   11e0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   11e0c:	f7ff ffea 	bl	11de4 <k_work_submit_to_queue>
	/* detach from workqueue, for cancel to return appropriate status */
	w->work_q = NULL;
   11e10:	2300      	movs	r3, #0
   11e12:	6263      	str	r3, [r4, #36]	; 0x24
}
   11e14:	bd10      	pop	{r4, pc}

00011e16 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   11e16:	b570      	push	{r4, r5, r6, lr}
   11e18:	0005      	movs	r5, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_fifo_get(&work_q->fifo, K_FOREVER);
   11e1a:	2101      	movs	r1, #1
   11e1c:	0028      	movs	r0, r5
   11e1e:	4249      	negs	r1, r1
   11e20:	f7ff fb3e 	bl	114a0 <k_queue_get>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11e24:	2102      	movs	r1, #2
   11e26:	0004      	movs	r4, r0

		handler = work->handler;
   11e28:	6846      	ldr	r6, [r0, #4]
   11e2a:	4249      	negs	r1, r1

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   11e2c:	3008      	adds	r0, #8
   11e2e:	f7fe fea5 	bl	10b7c <atomic_and>
   11e32:	07c3      	lsls	r3, r0, #31
   11e34:	d501      	bpl.n	11e3a <work_q_main+0x24>
					       K_WORK_STATE_PENDING)) {
			handler(work);
   11e36:	0020      	movs	r0, r4
   11e38:	47b0      	blx	r6
		}

		/* Make sure we don't hog up the CPU if the FIFO never (or
		 * very rarely) gets empty.
		 */
		k_yield();
   11e3a:	f7ff fc7b 	bl	11734 <k_yield>
	}
   11e3e:	e7ec      	b.n	11e1a <work_q_main+0x4>

00011e40 <k_work_q_start>:
}

void k_work_q_start(struct k_work_q *work_q, char *stack,
		    size_t stack_size, int prio)
{
   11e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e42:	0004      	movs	r4, r0
   11e44:	b087      	sub	sp, #28
   11e46:	001f      	movs	r7, r3
   11e48:	000d      	movs	r5, r1
   11e4a:	0016      	movs	r6, r2
	k_fifo_init(&work_q->fifo);
   11e4c:	f7ff fa8c 	bl	11368 <k_queue_init>

	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
   11e50:	2300      	movs	r3, #0
   11e52:	0020      	movs	r0, r4
   11e54:	9305      	str	r3, [sp, #20]
   11e56:	9304      	str	r3, [sp, #16]
   11e58:	9302      	str	r3, [sp, #8]
   11e5a:	9301      	str	r3, [sp, #4]
   11e5c:	9703      	str	r7, [sp, #12]
   11e5e:	9400      	str	r4, [sp, #0]
   11e60:	4b03      	ldr	r3, [pc, #12]	; (11e70 <k_work_q_start+0x30>)
   11e62:	0032      	movs	r2, r6
   11e64:	0029      	movs	r1, r5
   11e66:	3014      	adds	r0, #20
   11e68:	f7ff ff2a 	bl	11cc0 <k_thread_create>
			work_q, 0, 0, prio, 0, 0);
}
   11e6c:	b007      	add	sp, #28
   11e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e70:	00011e17 	.word	0x00011e17

00011e74 <k_delayed_work_init>:
	/* detach from workqueue, for cancel to return appropriate status */
	w->work_q = NULL;
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   11e74:	b570      	push	{r4, r5, r6, lr}
   11e76:	000d      	movs	r5, r1
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11e78:	2102      	movs	r1, #2
   11e7a:	0004      	movs	r4, r0
   11e7c:	4249      	negs	r1, r1
 *
 * @return N/A
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   11e7e:	3008      	adds	r0, #8
   11e80:	f7fe fe7c 	bl	10b7c <atomic_and>
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
   11e84:	2301      	movs	r3, #1
   11e86:	425b      	negs	r3, r3
   11e88:	61e3      	str	r3, [r4, #28]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   11e8a:	2300      	movs	r3, #0
	t->thread = NULL;

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   11e8c:	4a03      	ldr	r2, [pc, #12]	; (11e9c <k_delayed_work_init+0x28>)
	work->handler = handler;
   11e8e:	6065      	str	r5, [r4, #4]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   11e90:	61a3      	str	r3, [r4, #24]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
   11e92:	6163      	str	r3, [r4, #20]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   11e94:	6222      	str	r2, [r4, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   11e96:	6263      	str	r3, [r4, #36]	; 0x24
}
   11e98:	bd70      	pop	{r4, r5, r6, pc}
   11e9a:	46c0      	nop			; (mov r8, r8)
   11e9c:	00011e03 	.word	0x00011e03

00011ea0 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   11ea0:	b570      	push	{r4, r5, r6, lr}
   11ea2:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11ea4:	f3ef 8510 	mrs	r5, PRIMASK
   11ea8:	b672      	cpsid	i
 *
 * @return 1 if work item is pending, or 0 if it is not pending.
 */
static inline int k_work_pending(struct k_work *work)
{
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   11eaa:	3008      	adds	r0, #8
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11eac:	f7fe fe4f 	bl	10b4e <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
   11eb0:	2301      	movs	r3, #1
   11eb2:	4018      	ands	r0, r3
	int key = irq_lock();

	if (k_work_pending(&work->work)) {
   11eb4:	d003      	beq.n	11ebe <k_delayed_work_cancel+0x1e>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11eb6:	2d00      	cmp	r5, #0
   11eb8:	d123      	bne.n	11f02 <k_delayed_work_cancel+0x62>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11eba:	b662      	cpsie	i
   11ebc:	e021      	b.n	11f02 <k_delayed_work_cancel+0x62>
		irq_unlock(key);
		return -EINPROGRESS;
	}

	if (!work->work_q) {
   11ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11ec0:	2b00      	cmp	r3, #0
   11ec2:	d103      	bne.n	11ecc <k_delayed_work_cancel+0x2c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11ec4:	2d00      	cmp	r5, #0
   11ec6:	d11e      	bne.n	11f06 <k_delayed_work_cancel+0x66>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11ec8:	b662      	cpsie	i
   11eca:	e01c      	b.n	11f06 <k_delayed_work_cancel+0x66>
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   11ecc:	69e3      	ldr	r3, [r4, #28]
   11ece:	1c5a      	adds	r2, r3, #1
   11ed0:	d011      	beq.n	11ef6 <k_delayed_work_cancel+0x56>
   11ed2:	4a0e      	ldr	r2, [pc, #56]	; (11f0c <k_delayed_work_cancel+0x6c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   11ed4:	6911      	ldr	r1, [r2, #16]
   11ed6:	0022      	movs	r2, r4
   11ed8:	320c      	adds	r2, #12
   11eda:	4291      	cmp	r1, r2
   11edc:	d003      	beq.n	11ee6 <k_delayed_work_cancel+0x46>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   11ede:	68e2      	ldr	r2, [r4, #12]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   11ee0:	6911      	ldr	r1, [r2, #16]
   11ee2:	18cb      	adds	r3, r1, r3
   11ee4:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   11ee6:	6923      	ldr	r3, [r4, #16]
   11ee8:	68e2      	ldr	r2, [r4, #12]
   11eea:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   11eec:	68e2      	ldr	r2, [r4, #12]
   11eee:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   11ef0:	2301      	movs	r3, #1
   11ef2:	425b      	negs	r3, r3
   11ef4:	61e3      	str	r3, [r4, #28]

	/* Abort timeout, if it has expired this will do nothing */
	_abort_timeout(&work->timeout);

	/* Detach from workqueue */
	work->work_q = NULL;
   11ef6:	2300      	movs	r3, #0
   11ef8:	6263      	str	r3, [r4, #36]	; 0x24
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11efa:	429d      	cmp	r5, r3
   11efc:	d105      	bne.n	11f0a <k_delayed_work_cancel+0x6a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11efe:	b662      	cpsie	i
   11f00:	e003      	b.n	11f0a <k_delayed_work_cancel+0x6a>
{
	int key = irq_lock();

	if (k_work_pending(&work->work)) {
		irq_unlock(key);
		return -EINPROGRESS;
   11f02:	2044      	movs	r0, #68	; 0x44
   11f04:	e000      	b.n	11f08 <k_delayed_work_cancel+0x68>
	}

	if (!work->work_q) {
		irq_unlock(key);
		return -EINVAL;
   11f06:	2016      	movs	r0, #22
   11f08:	4240      	negs	r0, r0
	work->work_q = NULL;

	irq_unlock(key);

	return 0;
}
   11f0a:	bd70      	pop	{r4, r5, r6, pc}
   11f0c:	20001abc 	.word	0x20001abc

00011f10 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   11f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f12:	0007      	movs	r7, r0
   11f14:	000c      	movs	r4, r1
   11f16:	0016      	movs	r6, r2
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   11f18:	f3ef 8510 	mrs	r5, PRIMASK
   11f1c:	b672      	cpsid	i
	int key = irq_lock();
	int err;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
   11f1e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   11f20:	2b00      	cmp	r3, #0
   11f22:	d002      	beq.n	11f2a <k_delayed_work_submit_to_queue+0x1a>
   11f24:	4283      	cmp	r3, r0
   11f26:	d00b      	beq.n	11f40 <k_delayed_work_submit_to_queue+0x30>
   11f28:	e043      	b.n	11fb2 <k_delayed_work_submit_to_queue+0xa2>
		err = -EADDRINUSE;
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
   11f2a:	2800      	cmp	r0, #0
   11f2c:	d008      	beq.n	11f40 <k_delayed_work_submit_to_queue+0x30>
			goto done;
		}
	}

	/* Attach workqueue so the timeout callback can submit it */
	work->work_q = work_q;
   11f2e:	6267      	str	r7, [r4, #36]	; 0x24

	if (!delay) {
   11f30:	2e00      	cmp	r6, #0
   11f32:	d10b      	bne.n	11f4c <k_delayed_work_submit_to_queue+0x3c>
		/* Submit work if no ticks is 0 */
		k_work_submit_to_queue(work_q, &work->work);
   11f34:	0038      	movs	r0, r7
   11f36:	0021      	movs	r1, r4
   11f38:	f7ff ff54 	bl	11de4 <k_work_submit_to_queue>
		/* Add timeout */
		_add_timeout(NULL, &work->timeout, NULL,
				_TICK_ALIGN + _ms_to_ticks(delay));
	}

	err = 0;
   11f3c:	0030      	movs	r0, r6
   11f3e:	e03a      	b.n	11fb6 <k_delayed_work_submit_to_queue+0xa6>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = k_delayed_work_cancel(work);
   11f40:	0020      	movs	r0, r4
   11f42:	f7ff ffad 	bl	11ea0 <k_delayed_work_cancel>
		if (err < 0) {
   11f46:	2800      	cmp	r0, #0
   11f48:	daf1      	bge.n	11f2e <k_delayed_work_submit_to_queue+0x1e>
   11f4a:	e034      	b.n	11fb6 <k_delayed_work_submit_to_queue+0xa6>
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   11f4c:	0030      	movs	r0, r6
   11f4e:	210a      	movs	r1, #10
   11f50:	3009      	adds	r0, #9
   11f52:	f7ee f92f 	bl	1b4 <__aeabi_uidiv>
	timeout->thread = thread;
   11f56:	2300      	movs	r3, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   11f58:	4a19      	ldr	r2, [pc, #100]	; (11fc0 <k_delayed_work_submit_to_queue+0xb0>)
   11f5a:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   11f5c:	61a3      	str	r3, [r4, #24]
   11f5e:	4e19      	ldr	r6, [pc, #100]	; (11fc4 <k_delayed_work_submit_to_queue+0xb4>)
   11f60:	68d3      	ldr	r3, [r2, #12]
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   11f62:	3001      	adds	r0, #1
   11f64:	61e0      	str	r0, [r4, #28]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11f66:	42b3      	cmp	r3, r6
   11f68:	d108      	bne.n	11f7c <k_delayed_work_submit_to_queue+0x6c>
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
   11f6a:	0023      	movs	r3, r4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   11f6c:	60e6      	str	r6, [r4, #12]
	node->prev = list->tail;
   11f6e:	6911      	ldr	r1, [r2, #16]
   11f70:	330c      	adds	r3, #12
   11f72:	6121      	str	r1, [r4, #16]

	list->tail->next = node;
   11f74:	6911      	ldr	r1, [r2, #16]
   11f76:	600b      	str	r3, [r1, #0]
	list->tail = node;
   11f78:	6113      	str	r3, [r2, #16]
   11f7a:	e010      	b.n	11f9e <k_delayed_work_submit_to_queue+0x8e>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d0f4      	beq.n	11f6a <k_delayed_work_submit_to_queue+0x5a>
   11f80:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   11f82:	69e1      	ldr	r1, [r4, #28]
   11f84:	6918      	ldr	r0, [r3, #16]
   11f86:	4281      	cmp	r1, r0
   11f88:	dc0b      	bgt.n	11fa2 <k_delayed_work_submit_to_queue+0x92>
			in_q->delta_ticks_from_prev -= *delta;
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   11f8a:	0022      	movs	r2, r4
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
		if (*delta <= in_q->delta_ticks_from_prev) {
			in_q->delta_ticks_from_prev -= *delta;
   11f8c:	1a41      	subs	r1, r0, r1
   11f8e:	6119      	str	r1, [r3, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   11f90:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
   11f92:	60e3      	str	r3, [r4, #12]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   11f94:	6121      	str	r1, [r4, #16]
		node->next = insert_point;
		insert_point->prev->next = node;
   11f96:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   11f98:	320c      	adds	r2, #12
   11f9a:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
   11f9c:	605a      	str	r2, [r3, #4]
		/* Add timeout */
		_add_timeout(NULL, &work->timeout, NULL,
				_TICK_ALIGN + _ms_to_ticks(delay));
	}

	err = 0;
   11f9e:	2000      	movs	r0, #0
   11fa0:	e009      	b.n	11fb6 <k_delayed_work_submit_to_queue+0xa6>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   11fa2:	1a09      	subs	r1, r1, r0
   11fa4:	61e1      	str	r1, [r4, #28]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   11fa6:	42bb      	cmp	r3, r7
   11fa8:	d0df      	beq.n	11f6a <k_delayed_work_submit_to_queue+0x5a>
   11faa:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   11fac:	2b00      	cmp	r3, #0
   11fae:	d1e8      	bne.n	11f82 <k_delayed_work_submit_to_queue+0x72>
   11fb0:	e7db      	b.n	11f6a <k_delayed_work_submit_to_queue+0x5a>
	int key = irq_lock();
	int err;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
		err = -EADDRINUSE;
   11fb2:	2030      	movs	r0, #48	; 0x30
   11fb4:	4240      	negs	r0, r0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   11fb6:	2d00      	cmp	r5, #0
   11fb8:	d100      	bne.n	11fbc <k_delayed_work_submit_to_queue+0xac>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   11fba:	b662      	cpsie	i

done:
	irq_unlock(key);

	return err;
}
   11fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11fbe:	46c0      	nop			; (mov r8, r8)
   11fc0:	20001abc 	.word	0x20001abc
   11fc4:	20001ac8 	.word	0x20001ac8

00011fc8 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   11fc8:	4770      	bx	lr
