
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	       u16_t initial_value)
{
       0:	20001f34 	.word	0x20001f34
       4:	00008c19 	.word	0x00008c19
	u16_t crc = initial_value;
	size_t i, b;

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {
       8:	00008c47 	.word	0x00008c47
       c:	00008b31 	.word	0x00008b31
      10:	00008b31 	.word	0x00008b31

		for (b = 0; b < 8; b++) {
			u16_t divide = crc & 0x8000;
      14:	00008b31 	.word	0x00008b31
      18:	00008b31 	.word	0x00008b31

			crc = (crc << 1);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
      1c:	00008b31 	.word	0x00008b31
				crc |= !!(src[i] & (0x80 >> b));
      20:	00008b31 	.word	0x00008b31
      24:	00008b31 	.word	0x00008b31
      28:	00008b31 	.word	0x00008b31
      2c:	0000899d 	.word	0x0000899d
			}

			if (divide) {
      30:	00008b31 	.word	0x00008b31
				crc = crc ^ polynomial;
      34:	00008b31 	.word	0x00008b31
	size_t i, b;

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {

		for (b = 0; b < 8; b++) {
      38:	00008941 	.word	0x00008941
      3c:	00008b31 	.word	0x00008b31

00000040 <_irq_vector_table>:
{
	u16_t crc = initial_value;
	size_t i, b;

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {
      40:	00008be1 00008003 00008be1 00008be1     ................
			 * No further special processing is done for them.
			 */

			if (strchr("hlLz", c) != NULL) {
				i = c;
				c = *format++;
      50:	00008be1 00008be1 00008be1 00008be1     ................
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
      60:	00008be1 00008be1 00008be1 00008be1     ................
				if (precision != -1)
					pad = ' ';
				break;

			case '%':
				if ((*func)('%', dest) == EOF) {
      70:	00008be1 00008be1 00008be1 00008be1     ................
	count = 0;

	while ((c = *format++)) {
		if (c != '%') {
			if ((*func) (c, dest) == EOF) {
				return EOF;
      80:	00008be1 00008be1 00008be1 00008be1     ................
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
      90:	00008be1 00008be1 00008be1 00008be1     ................
      a0:	00008be1 00008be1                       ........

000000a8 <_sw_isr_table>:
				switch (c) {
      a8:	00000000 00000d7d 00000000 00008aa9     ....}...........
      b8:	00000000 00008aa9 00000000 00008aa9     ................
				case '-':
					fminus = true;
					break;

				case '+':
					fplus = true;
      c8:	00000000 00008aa9 00000000 00008aa9     ................
				}
			}

			if (c == '*') {
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
      d8:	20000270 00000ac9 00000000 00008aa9     p.. ............
				if (width < 0) {
					fminus = true;
					width = -width;
				}
				c = *format++;
      e8:	00000000 00008aa9 00000000 00008aa9     ................
			} else if (!isdigit(c))
      f8:	00000000 00008aa9 00000000 00007fc1     ................
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
     108:	00000000 00008aa9 00000000 00007ffb     ................
		i = 10 * i + *p++ - '0';
     118:	00000000 00008aa9 00000000 00008aa9     ................
			 */
			if ((unsigned) width > MAXFLD) {
				width = MAXFLD;
			}

			if (c == '.') {
     128:	00000000 00008aa9 00000000 00000871     ............q...

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
		i = 10 * i + *p++ - '0';
     138:	00000000 00008aa9 00000000 00008aa9     ................
     148:	00000000 00008aa9 00000000 00008aa9     ................
			count++;

		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */
     158:	00000000 00008aa9 00000000 00008aa9     ................
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     168:	00000000 00007ff1 00000000 00008aa9     ................

00000178 <__gnu_thumb1_case_uqi>:
     178:	b402      	push	{r1}
     17a:	4671      	mov	r1, lr
     17c:	0849      	lsrs	r1, r1, #1
     17e:	0049      	lsls	r1, r1, #1
     180:	5c09      	ldrb	r1, [r1, r0]
     182:	0049      	lsls	r1, r1, #1
     184:	448e      	add	lr, r1
     186:	bc02      	pop	{r1}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <__gnu_thumb1_case_uhi>:
     18c:	b403      	push	{r0, r1}
     18e:	4671      	mov	r1, lr
     190:	0849      	lsrs	r1, r1, #1
     192:	0040      	lsls	r0, r0, #1
     194:	0049      	lsls	r1, r1, #1
     196:	5a09      	ldrh	r1, [r1, r0]
     198:	0049      	lsls	r1, r1, #1
     19a:	448e      	add	lr, r1
     19c:	bc03      	pop	{r0, r1}
     19e:	4770      	bx	lr

000001a0 <__aeabi_uidiv>:
				if (precision != -1)
					pad = ' ';
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
     1a0:	2200      	movs	r2, #0
     1a2:	0843      	lsrs	r3, r0, #1
     1a4:	428b      	cmp	r3, r1
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     1a6:	d374      	bcc.n	292 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x12>
     1a8:	0903      	lsrs	r3, r0, #4

			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     1aa:	428b      	cmp	r3, r1
     1ac:	d35f      	bcc.n	26e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xae>
     1ae:	0a03      	lsrs	r3, r0, #8
     1b0:	428b      	cmp	r3, r1
     1b2:	d344      	bcc.n	23e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x7e>
				buf[1] = '\0';
     1b4:	0b03      	lsrs	r3, r0, #12
				need_justifying = true;
				c = 1;
     1b6:	428b      	cmp	r3, r1
			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
				buf[1] = '\0';
     1b8:	d328      	bcc.n	20c <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x4c>
				need_justifying = true;
				c = 1;
				break;
     1ba:	0c03      	lsrs	r3, r0, #16

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     1bc:	428b      	cmp	r3, r1
     1be:	d30d      	bcc.n	1dc <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x1c>
     1c0:	22ff      	movs	r2, #255	; 0xff
     1c2:	0209      	lsls	r1, r1, #8

#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
     1c4:	ba12      	rev	r2, r2
     1c6:	0c03      	lsrs	r3, r0, #16
		*buf++ = '-';
     1c8:	428b      	cmp	r3, r1
     1ca:	d302      	bcc.n	1d2 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x12>
		if (value != 0x80000000)
     1cc:	1212      	asrs	r2, r2, #8
			value = -value;
     1ce:	0209      	lsls	r1, r1, #8
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
		if (value != 0x80000000)
     1d0:	d065      	beq.n	29e <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x1e>
     1d2:	0b03      	lsrs	r3, r0, #12
     1d4:	428b      	cmp	r3, r1
     1d6:	d319      	bcc.n	20c <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x4c>
     1d8:	e000      	b.n	1dc <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x1c>
			value = -value;
	} else if (fplus)
     1da:	0a09      	lsrs	r1, r1, #8
     1dc:	0bc3      	lsrs	r3, r0, #15
     1de:	428b      	cmp	r3, r1
		*buf++ = '+';
     1e0:	d301      	bcc.n	1e6 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x26>
     1e2:	03cb      	lsls	r3, r1, #15
	else if (fspace)
     1e4:	1ac0      	subs	r0, r0, r3
     1e6:	4152      	adcs	r2, r2
     1e8:	0b83      	lsrs	r3, r0, #14
     1ea:	428b      	cmp	r3, r1
		*buf++ = ' ';
     1ec:	d301      	bcc.n	1f2 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x32>
     1ee:	038b      	lsls	r3, r1, #14
     1f0:	1ac0      	subs	r0, r0, r3
     1f2:	4152      	adcs	r2, r2
     1f4:	0b43      	lsrs	r3, r0, #13
     1f6:	428b      	cmp	r3, r1
     1f8:	d301      	bcc.n	1fe <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x3e>
#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
     1fa:	034b      	lsls	r3, r1, #13
     1fc:	1ac0      	subs	r0, r0, r3
     1fe:	4152      	adcs	r2, r2
     200:	0b03      	lsrs	r3, r0, #12
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     202:	428b      	cmp	r3, r1
     204:	d301      	bcc.n	20a <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x4a>
     206:	030b      	lsls	r3, r1, #12
     208:	1ac0      	subs	r0, r0, r3
     20a:	4152      	adcs	r2, r2

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     20c:	0ac3      	lsrs	r3, r0, #11
     20e:	428b      	cmp	r3, r1
	} else if (fplus)
		*buf++ = '+';
	else if (fspace)
		*buf++ = ' ';

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
     210:	d301      	bcc.n	216 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x56>
     212:	02cb      	lsls	r3, r1, #11
     214:	1ac0      	subs	r0, r0, r3

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     216:	4152      	adcs	r2, r2
					prefix = 1;
     218:	0a83      	lsrs	r3, r0, #10

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     21a:	428b      	cmp	r3, r1
     21c:	d301      	bcc.n	222 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x62>
     21e:	028b      	lsls	r3, r1, #10
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     220:	1ac0      	subs	r0, r0, r3
     222:	4152      	adcs	r2, r2
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     224:	0a43      	lsrs	r3, r0, #9
     226:	428b      	cmp	r3, r1
     228:	d301      	bcc.n	22e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x6e>
     22a:	024b      	lsls	r3, r1, #9
				double_temp = u.i;
     22c:	1ac0      	subs	r0, r0, r3
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     22e:	4152      	adcs	r2, r2
     230:	0a03      	lsrs	r3, r0, #8
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     232:	428b      	cmp	r3, r1
     234:	d301      	bcc.n	23a <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x7a>
     236:	020b      	lsls	r3, r1, #8
     238:	1ac0      	subs	r0, r0, r3
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     23a:	4152      	adcs	r2, r2
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     23c:	d2cd      	bcs.n	1da <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x1a>
	fract = (double_temp << 11) & ~HIGHBIT64;
     23e:	09c3      	lsrs	r3, r0, #7
     240:	428b      	cmp	r3, r1
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     242:	d301      	bcc.n	248 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x88>
	fract = (double_temp << 11) & ~HIGHBIT64;
     244:	01cb      	lsls	r3, r1, #7
     246:	1ac0      	subs	r0, r0, r3
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     248:	4152      	adcs	r2, r2
     24a:	0983      	lsrs	r3, r0, #6
		if (!fract) {
     24c:	428b      	cmp	r3, r1
     24e:	d301      	bcc.n	254 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x94>
     250:	018b      	lsls	r3, r1, #6
     252:	1ac0      	subs	r0, r0, r3
			*buf++ = sign ? '-' : '+';
     254:	4152      	adcs	r2, r2
     256:	0943      	lsrs	r3, r0, #5
     258:	428b      	cmp	r3, r1
     25a:	d301      	bcc.n	260 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xa0>
     25c:	014b      	lsls	r3, r1, #5
			*buf++ = 'I';
     25e:	1ac0      	subs	r0, r0, r3
     260:	4152      	adcs	r2, r2
			*buf++ = 'N';
     262:	0903      	lsrs	r3, r0, #4
     264:	428b      	cmp	r3, r1
			*buf++ = 'F';
     266:	d301      	bcc.n	26c <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xac>
     268:	010b      	lsls	r3, r1, #4
     26a:	1ac0      	subs	r0, r0, r3
     26c:	4152      	adcs	r2, r2
		} else {
			*buf++ = 'N';
     26e:	08c3      	lsrs	r3, r0, #3
			*buf++ = 'a';
     270:	428b      	cmp	r3, r1
			*buf++ = sign ? '-' : '+';
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
     272:	d301      	bcc.n	278 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xb8>
			*buf++ = 'a';
			*buf++ = 'N';
     274:	00cb      	lsls	r3, r1, #3
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
     276:	1ac0      	subs	r0, r0, r3
			*buf++ = 'N';
     278:	4152      	adcs	r2, r2
     27a:	0883      	lsrs	r3, r0, #2
     27c:	428b      	cmp	r3, r1
		}
		*buf = 0;
     27e:	d301      	bcc.n	284 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x4>
		return buf - start;
     280:	008b      	lsls	r3, r1, #2
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
			*buf++ = 'N';
		}
		*buf = 0;
     282:	1ac0      	subs	r0, r0, r3
		return buf - start;
     284:	4152      	adcs	r2, r2
     286:	0843      	lsrs	r3, r0, #1
	}

	if ((exp | fract) != 0) {
     288:	428b      	cmp	r3, r1
     28a:	d301      	bcc.n	290 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x10>
     28c:	004b      	lsls	r3, r1, #1
     28e:	1ac0      	subs	r0, r0, r3
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     290:	4152      	adcs	r2, r2
		fract |= HIGHBIT64;
     292:	1a41      	subs	r1, r0, r1
		*buf = 0;
		return buf - start;
	}

	if ((exp | fract) != 0) {
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     294:	d200      	bcs.n	298 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x18>
		fract |= HIGHBIT64;
     296:	4601      	mov	r1, r0
     298:	4152      	adcs	r2, r2
     29a:	4610      	mov	r0, r2
     29c:	4770      	bx	lr
		decexp = true;		/* Wasn't zero */
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
     29e:	e7ff      	b.n	2a0 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x20>
     2a0:	b501      	push	{r0, lr}
		*buf++ = '-';
     2a2:	2000      	movs	r0, #0
     2a4:	f000 f8f0 	bl	488 <__aeabi_idiv0>
	} else if (fplus) {
     2a8:	bd02      	pop	{r1, pc}
     2aa:	46c0      	nop			; (mov r8, r8)

000002ac <__aeabi_uidivmod>:
     2ac:	2900      	cmp	r1, #0
     2ae:	d0f7      	beq.n	2a0 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x20>
		*buf++ = '+';
     2b0:	e776      	b.n	1a0 <__aeabi_uidiv>
     2b2:	4770      	bx	lr

000002b4 <__aeabi_idiv>:
	} else if (fspace) {
     2b4:	4603      	mov	r3, r0
     2b6:	430b      	orrs	r3, r1
     2b8:	d47f      	bmi.n	3ba <__aeabi_idiv+0x106>
     2ba:	2200      	movs	r2, #0
		*buf++ = ' ';
     2bc:	0843      	lsrs	r3, r0, #1
     2be:	428b      	cmp	r3, r1
     2c0:	d374      	bcc.n	3ac <__aeabi_idiv+0xf8>
     2c2:	0903      	lsrs	r3, r0, #4
     2c4:	428b      	cmp	r3, r1
	}

	decexp = 0;
     2c6:	d35f      	bcc.n	388 <__aeabi_idiv+0xd4>
     2c8:	0a03      	lsrs	r3, r0, #8
	while (exp <= -3) {
     2ca:	428b      	cmp	r3, r1
     2cc:	d344      	bcc.n	358 <__aeabi_idiv+0xa4>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     2ce:	0b03      	lsrs	r3, r0, #12
     2d0:	428b      	cmp	r3, r1
     2d2:	d328      	bcc.n	326 <__aeabi_idiv+0x72>
     2d4:	0c03      	lsrs	r3, r0, #16
     2d6:	428b      	cmp	r3, r1
			_rlrshift(&fract);
     2d8:	d30d      	bcc.n	2f6 <__aeabi_idiv+0x42>
     2da:	22ff      	movs	r2, #255	; 0xff
     2dc:	0209      	lsls	r1, r1, #8
			exp++;
     2de:	ba12      	rev	r2, r2
     2e0:	0c03      	lsrs	r3, r0, #16
		}
		fract *= 5;
     2e2:	428b      	cmp	r3, r1
     2e4:	d302      	bcc.n	2ec <__aeabi_idiv+0x38>
     2e6:	1212      	asrs	r2, r2, #8
     2e8:	0209      	lsls	r1, r1, #8
		exp++;
		decexp--;
     2ea:	d065      	beq.n	3b8 <__aeabi_idiv+0x104>
	while (exp <= -3) {
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
     2ec:	0b03      	lsrs	r3, r0, #12
     2ee:	428b      	cmp	r3, r1
		exp++;
		decexp--;
     2f0:	d319      	bcc.n	326 <__aeabi_idiv+0x72>
     2f2:	e000      	b.n	2f6 <__aeabi_idiv+0x42>
     2f4:	0a09      	lsrs	r1, r1, #8

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     2f6:	0bc3      	lsrs	r3, r0, #15
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
		exp++;
     2f8:	428b      	cmp	r3, r1
		decexp--;

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     2fa:	d301      	bcc.n	300 <__aeabi_idiv+0x4c>
     2fc:	03cb      	lsls	r3, r1, #15
			fract <<= 1;
     2fe:	1ac0      	subs	r0, r0, r3
     300:	4152      	adcs	r2, r2
			exp--;
     302:	0b83      	lsrs	r3, r0, #14
     304:	428b      	cmp	r3, r1
     306:	d301      	bcc.n	30c <__aeabi_idiv+0x58>
     308:	038b      	lsls	r3, r1, #14
     30a:	1ac0      	subs	r0, r0, r3
     30c:	4152      	adcs	r2, r2
     30e:	0b43      	lsrs	r3, r0, #13
     310:	428b      	cmp	r3, r1
     312:	d301      	bcc.n	318 <__aeabi_idiv+0x64>
     314:	034b      	lsls	r3, r1, #13
     316:	1ac0      	subs	r0, r0, r3
     318:	4152      	adcs	r2, r2
     31a:	0b03      	lsrs	r3, r0, #12
     31c:	428b      	cmp	r3, r1
     31e:	d301      	bcc.n	324 <__aeabi_idiv+0x70>
     320:	030b      	lsls	r3, r1, #12
     322:	1ac0      	subs	r0, r0, r3
     324:	4152      	adcs	r2, r2
     326:	0ac3      	lsrs	r3, r0, #11
     328:	428b      	cmp	r3, r1
     32a:	d301      	bcc.n	330 <__aeabi_idiv+0x7c>
     32c:	02cb      	lsls	r3, r1, #11
     32e:	1ac0      	subs	r0, r0, r3
     330:	4152      	adcs	r2, r2
     332:	0a83      	lsrs	r3, r0, #10
		}
	}

	while (exp > 0) {
     334:	428b      	cmp	r3, r1
     336:	d301      	bcc.n	33c <__aeabi_idiv+0x88>
		_ldiv5(&fract);
     338:	028b      	lsls	r3, r1, #10
     33a:	1ac0      	subs	r0, r0, r3
     33c:	4152      	adcs	r2, r2
		exp--;
		decexp++;
     33e:	0a43      	lsrs	r3, r0, #9
     340:	428b      	cmp	r3, r1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     342:	d301      	bcc.n	348 <__aeabi_idiv+0x94>
	}

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
     344:	024b      	lsls	r3, r1, #9
		}
	}

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
     346:	1ac0      	subs	r0, r0, r3
		decexp++;
     348:	4152      	adcs	r2, r2
     34a:	0a03      	lsrs	r3, r0, #8
     34c:	428b      	cmp	r3, r1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     34e:	d301      	bcc.n	354 <__aeabi_idiv+0xa0>
     350:	020b      	lsls	r3, r1, #8
			fract <<= 1;
     352:	1ac0      	subs	r0, r0, r3
     354:	4152      	adcs	r2, r2
			exp--;
     356:	d2cd      	bcs.n	2f4 <__aeabi_idiv+0x40>
     358:	09c3      	lsrs	r3, r0, #7
     35a:	428b      	cmp	r3, r1
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     35c:	d301      	bcc.n	362 <__aeabi_idiv+0xae>
		exp++;
     35e:	01cb      	lsls	r3, r1, #7
			exp--;
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     360:	1ac0      	subs	r0, r0, r3
     362:	4152      	adcs	r2, r2
			fract <<= 1;
			exp--;
		}
	}

	while (exp < (0 + 4)) {
     364:	0983      	lsrs	r3, r0, #6
     366:	428b      	cmp	r3, r1
		_rlrshift(&fract);
		exp++;
	}

	if (precision < 0)
     368:	d301      	bcc.n	36e <__aeabi_idiv+0xba>
     36a:	018b      	lsls	r3, r1, #6
		precision = 6;		/* Default precision if none given */
     36c:	1ac0      	subs	r0, r0, r3
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
     36e:	4152      	adcs	r2, r2
     370:	0943      	lsrs	r3, r0, #5
     372:	428b      	cmp	r3, r1
     374:	d301      	bcc.n	37a <__aeabi_idiv+0xc6>
     376:	014b      	lsls	r3, r1, #5
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     378:	1ac0      	subs	r0, r0, r3
     37a:	4152      	adcs	r2, r2
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
     37c:	0903      	lsrs	r3, r0, #4
     37e:	428b      	cmp	r3, r1
     380:	d301      	bcc.n	386 <__aeabi_idiv+0xd2>
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     382:	010b      	lsls	r3, r1, #4
     384:	1ac0      	subs	r0, r0, r3
     386:	4152      	adcs	r2, r2
     388:	08c3      	lsrs	r3, r0, #3
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     38a:	428b      	cmp	r3, r1
     38c:	d301      	bcc.n	392 <__aeabi_idiv+0xde>
     38e:	00cb      	lsls	r3, r1, #3
     390:	1ac0      	subs	r0, r0, r3
     392:	4152      	adcs	r2, r2
     394:	0883      	lsrs	r3, r0, #2
     396:	428b      	cmp	r3, r1
			if (c == 'g')
     398:	d301      	bcc.n	39e <__aeabi_idiv+0xea>
     39a:	008b      	lsls	r3, r1, #2
				c = 'e';
			else
				c = 'E';
     39c:	1ac0      	subs	r0, r0, r3
     39e:	4152      	adcs	r2, r2
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     3a0:	0843      	lsrs	r3, r0, #1
     3a2:	428b      	cmp	r3, r1
				c = 'E';
		} else
			c = 'f';
	}

	if (c == 'f') {
     3a4:	d301      	bcc.n	3aa <__aeabi_idiv+0xf6>
     3a6:	004b      	lsls	r3, r1, #1
		exp = precision + decexp;
     3a8:	1ac0      	subs	r0, r0, r3
     3aa:	4152      	adcs	r2, r2
     3ac:	1a41      	subs	r1, r0, r1
     3ae:	d200      	bcs.n	3b2 <__aeabi_idiv+0xfe>
     3b0:	4601      	mov	r1, r0
     3b2:	4152      	adcs	r2, r2
     3b4:	4610      	mov	r0, r2
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
			if (c == 'g')
				c = 'e';
     3b6:	4770      	bx	lr
	if (c == 'f') {
		exp = precision + decexp;
		if (exp < 0)
			exp = 0;
	} else
		exp = precision + 1;
     3b8:	e05d      	b.n	476 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x76>
	digit_count = 16;
     3ba:	0fca      	lsrs	r2, r1, #31
     3bc:	d000      	beq.n	3c0 <__aeabi_idiv+0x10c>
     3be:	4249      	negs	r1, r1
     3c0:	1003      	asrs	r3, r0, #32
     3c2:	d300      	bcc.n	3c6 <__aeabi_idiv+0x112>
	if (exp > 16)
		exp = 16;

	ltemp = 0x0800000000000000;
     3c4:	4240      	negs	r0, r0
     3c6:	4053      	eors	r3, r2
     3c8:	2200      	movs	r2, #0
     3ca:	469c      	mov	ip, r3
     3cc:	0903      	lsrs	r3, r0, #4
	while (exp--) {
     3ce:	428b      	cmp	r3, r1
     3d0:	d32d      	bcc.n	42e <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2e>
		_ldiv5(&ltemp);
     3d2:	0a03      	lsrs	r3, r0, #8
     3d4:	428b      	cmp	r3, r1
     3d6:	d312      	bcc.n	3fe <__aeabi_idiv+0x14a>
		_rlrshift(&ltemp);
     3d8:	22fc      	movs	r2, #252	; 0xfc
     3da:	0189      	lsls	r1, r1, #6
     3dc:	ba12      	rev	r2, r2
     3de:	0a03      	lsrs	r3, r0, #8
	}

	fract += ltemp;
     3e0:	428b      	cmp	r3, r1
     3e2:	d30c      	bcc.n	3fe <__aeabi_idiv+0x14a>
     3e4:	0189      	lsls	r1, r1, #6
     3e6:	1192      	asrs	r2, r2, #6
     3e8:	428b      	cmp	r3, r1
     3ea:	d308      	bcc.n	3fe <__aeabi_idiv+0x14a>
     3ec:	0189      	lsls	r1, r1, #6
     3ee:	1192      	asrs	r2, r2, #6
	if ((fract >> 32) & 0xF0000000) {
     3f0:	428b      	cmp	r3, r1
     3f2:	d304      	bcc.n	3fe <__aeabi_idiv+0x14a>
		_ldiv5(&fract);
     3f4:	0189      	lsls	r1, r1, #6
     3f6:	d03a      	beq.n	46e <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x6e>
     3f8:	1192      	asrs	r2, r2, #6
		_rlrshift(&fract);
     3fa:	e000      	b.n	3fe <__aeabi_idiv+0x14a>
     3fc:	0989      	lsrs	r1, r1, #6
     3fe:	09c3      	lsrs	r3, r0, #7
		decexp++;
     400:	428b      	cmp	r3, r1
     402:	d301      	bcc.n	408 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x8>
     404:	01cb      	lsls	r3, r1, #7
	}

	if (c == 'f') {
     406:	1ac0      	subs	r0, r0, r3
     408:	4152      	adcs	r2, r2
		if (decexp > 0) {
     40a:	0983      	lsrs	r3, r0, #6
     40c:	428b      	cmp	r3, r1
     40e:	d301      	bcc.n	414 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x14>
     410:	018b      	lsls	r3, r1, #6
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
     412:	1ac0      	subs	r0, r0, r3
     414:	4152      	adcs	r2, r2
     416:	0943      	lsrs	r3, r0, #5
     418:	428b      	cmp	r3, r1
     41a:	d301      	bcc.n	420 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x20>
     41c:	014b      	lsls	r3, r1, #5
		decexp++;
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
     41e:	1ac0      	subs	r0, r0, r3
     420:	4152      	adcs	r2, r2
     422:	0903      	lsrs	r3, r0, #4
     424:	428b      	cmp	r3, r1
     426:	d301      	bcc.n	42c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2c>
				*buf++ = _get_digit(&fract, &digit_count);
				decexp--;
			}
		} else
			*buf++ = '0';
     428:	010b      	lsls	r3, r1, #4
     42a:	1ac0      	subs	r0, r0, r3
     42c:	4152      	adcs	r2, r2
		if (falt || (precision > 0))
     42e:	08c3      	lsrs	r3, r0, #3
     430:	428b      	cmp	r3, r1
     432:	d301      	bcc.n	438 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x38>
     434:	00cb      	lsls	r3, r1, #3
     436:	1ac0      	subs	r0, r0, r3
     438:	4152      	adcs	r2, r2
			*buf++ = '.';
     43a:	0883      	lsrs	r3, r0, #2
     43c:	428b      	cmp	r3, r1
     43e:	d301      	bcc.n	444 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x44>
     440:	008b      	lsls	r3, r1, #2
     442:	1ac0      	subs	r0, r0, r3
		while (precision-- > 0) {
     444:	4152      	adcs	r2, r2
     446:	d2d9      	bcs.n	3fc <__aeabi_idiv+0x148>
     448:	0843      	lsrs	r3, r0, #1
			if (decexp < 0) {
     44a:	428b      	cmp	r3, r1
     44c:	d301      	bcc.n	452 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x52>
     44e:	004b      	lsls	r3, r1, #1
				*buf++ = '0';
     450:	1ac0      	subs	r0, r0, r3
     452:	4152      	adcs	r2, r2
				decexp++;
     454:	1a41      	subs	r1, r0, r1
     456:	d200      	bcs.n	45a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x5a>
     458:	4601      	mov	r1, r0
     45a:	4663      	mov	r3, ip
			} else
				*buf++ = _get_digit(&fract, &digit_count);
     45c:	4152      	adcs	r2, r2
     45e:	105b      	asrs	r3, r3, #1
     460:	4610      	mov	r0, r2
     462:	d301      	bcc.n	468 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x68>
     464:	4240      	negs	r0, r0
     466:	2b00      	cmp	r3, #0
     468:	d500      	bpl.n	46c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x6c>
     46a:	4249      	negs	r1, r1
     46c:	4770      	bx	lr
     46e:	4663      	mov	r3, ip
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
     470:	105b      	asrs	r3, r3, #1
     472:	d300      	bcc.n	476 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x76>
     474:	4240      	negs	r0, r0
     476:	b501      	push	{r0, lr}
     478:	2000      	movs	r0, #0
		if (*buf++ != '0')
			decexp--;
     47a:	f000 f805 	bl	488 <__aeabi_idiv0>
     47e:	bd02      	pop	{r1, pc}

00000480 <__aeabi_idivmod>:
     480:	2900      	cmp	r1, #0
     482:	d0f8      	beq.n	476 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x76>
     484:	e716      	b.n	2b4 <__aeabi_idiv>
		if (falt || (precision > 0))
     486:	4770      	bx	lr

00000488 <__aeabi_idiv0>:
     488:	4770      	bx	lr
     48a:	46c0      	nop			; (mov r8, r8)

0000048c <__aeabi_uldivmod>:
			} else
				*buf++ = _get_digit(&fract, &digit_count);
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
     48c:	2b00      	cmp	r3, #0
			decexp--;
		if (falt || (precision > 0))
     48e:	d111      	bne.n	4b4 <__aeabi_uldivmod+0x28>
     490:	2a00      	cmp	r2, #0
			*buf++ = '.';
     492:	d10f      	bne.n	4b4 <__aeabi_uldivmod+0x28>
     494:	2900      	cmp	r1, #0
     496:	d100      	bne.n	49a <__aeabi_uldivmod+0xe>
     498:	2800      	cmp	r0, #0
		while (precision-- > 0)
     49a:	d002      	beq.n	4a2 <__aeabi_uldivmod+0x16>
     49c:	2100      	movs	r1, #0
			*buf++ = _get_digit(&fract, &digit_count);
     49e:	43c9      	mvns	r1, r1
     4a0:	1c08      	adds	r0, r1, #0
     4a2:	b407      	push	{r0, r1, r2}
     4a4:	4802      	ldr	r0, [pc, #8]	; (4b0 <__aeabi_uldivmod+0x24>)
     4a6:	a102      	add	r1, pc, #8	; (adr r1, 4b0 <__aeabi_uldivmod+0x24>)
     4a8:	1840      	adds	r0, r0, r1
     4aa:	9002      	str	r0, [sp, #8]
	}

	if (prune_zero) {
     4ac:	bd03      	pop	{r0, r1, pc}
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	ffffffd9 	.word	0xffffffd9
		while (*--buf == '0')
     4b4:	b403      	push	{r0, r1}
     4b6:	4668      	mov	r0, sp
     4b8:	b501      	push	{r0, lr}
     4ba:	9802      	ldr	r0, [sp, #8]
			;
		if (*buf != '.')
     4bc:	f000 f856 	bl	56c <__udivmoddi4>
     4c0:	9b01      	ldr	r3, [sp, #4]
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
     4c2:	469e      	mov	lr, r3
     4c4:	b002      	add	sp, #8
     4c6:	bc0c      	pop	{r2, r3}
     4c8:	4770      	bx	lr
     4ca:	46c0      	nop			; (mov r8, r8)

000004cc <__aeabi_lmul>:
		*buf++ = (char) c;
		if (decexp < 0) {
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (*buf != '.')
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
		*buf++ = (char) c;
     4ce:	464f      	mov	r7, r9
     4d0:	4646      	mov	r6, r8
		if (decexp < 0) {
     4d2:	b4c0      	push	{r6, r7}
     4d4:	0416      	lsls	r6, r2, #16
			decexp = -decexp;
     4d6:	0c36      	lsrs	r6, r6, #16
     4d8:	4699      	mov	r9, r3
			*buf++ = '-';
     4da:	0033      	movs	r3, r6
     4dc:	0405      	lsls	r5, r0, #16
		} else
			*buf++ = '+';
     4de:	0c2c      	lsrs	r4, r5, #16
     4e0:	0c07      	lsrs	r7, r0, #16
		*buf++ = (char) ((decexp / 100) + '0');
     4e2:	0c15      	lsrs	r5, r2, #16
     4e4:	4363      	muls	r3, r4
     4e6:	437e      	muls	r6, r7
     4e8:	436f      	muls	r7, r5
     4ea:	4365      	muls	r5, r4
     4ec:	0c1c      	lsrs	r4, r3, #16
		decexp %= 100;
     4ee:	19ad      	adds	r5, r5, r6
     4f0:	1964      	adds	r4, r4, r5
     4f2:	469c      	mov	ip, r3
     4f4:	42a6      	cmp	r6, r4
     4f6:	d903      	bls.n	500 <__aeabi_lmul+0x34>
		*buf++ = (char) ((decexp / 10) + '0');
     4f8:	2380      	movs	r3, #128	; 0x80
     4fa:	025b      	lsls	r3, r3, #9
     4fc:	4698      	mov	r8, r3
     4fe:	4447      	add	r7, r8
     500:	4663      	mov	r3, ip
     502:	0c25      	lsrs	r5, r4, #16
		decexp %= 10;
		*buf++ = (char) (decexp + '0');
     504:	19ef      	adds	r7, r5, r7
     506:	041d      	lsls	r5, r3, #16
     508:	464b      	mov	r3, r9
     50a:	434a      	muls	r2, r1
     50c:	4343      	muls	r3, r0
     50e:	0c2d      	lsrs	r5, r5, #16
     510:	0424      	lsls	r4, r4, #16
	}
	*buf = 0;
     512:	1964      	adds	r4, r4, r5

	return buf - start;
     514:	1899      	adds	r1, r3, r2
		decexp %= 100;
		*buf++ = (char) ((decexp / 10) + '0');
		decexp %= 10;
		*buf++ = (char) (decexp + '0');
	}
	*buf = 0;
     516:	19c9      	adds	r1, r1, r7

	return buf - start;
     518:	0020      	movs	r0, r4
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
     51a:	bc0c      	pop	{r2, r3}
     51c:	4690      	mov	r8, r2
					prefix = 1;
     51e:	4699      	mov	r9, r3
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
     520:	bdf0      	pop	{r4, r5, r6, r7, pc}
     522:	46c0      	nop			; (mov r8, r8)

00000524 <__ffssi2>:
     524:	b510      	push	{r4, lr}
     526:	2300      	movs	r3, #0
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     528:	2800      	cmp	r0, #0
     52a:	d002      	beq.n	532 <__ffssi2+0xe>
     52c:	f000 f8ea 	bl	704 <__ctzsi2>
     530:	1c43      	adds	r3, r0, #1
					prefix = 1;
				need_justifying = true;
				break;

			case 'n':
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
     532:	0018      	movs	r0, r3
     534:	bd10      	pop	{r4, pc}
				*int32ptr_temp = count;
     536:	46c0      	nop			; (mov r8, r8)

00000538 <__popcountsi2>:
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <__popcountsi2+0x28>)
     53a:	0842      	lsrs	r2, r0, #1
				break;
     53c:	401a      	ands	r2, r3

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     53e:	1a82      	subs	r2, r0, r2
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
				*int32ptr_temp = count;
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     540:	0010      	movs	r0, r2
     542:	4b08      	ldr	r3, [pc, #32]	; (564 <__popcountsi2+0x2c>)
     544:	0892      	lsrs	r2, r2, #2
     546:	4018      	ands	r0, r3

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     548:	4013      	ands	r3, r2
     54a:	18c0      	adds	r0, r0, r3
		*buf++ = '0';
     54c:	0903      	lsrs	r3, r0, #4
     54e:	1818      	adds	r0, r3, r0
     550:	4b05      	ldr	r3, [pc, #20]	; (568 <__popcountsi2+0x30>)
     552:	4018      	ands	r0, r3
     554:	0203      	lsls	r3, r0, #8
		if (!value) {
     556:	1818      	adds	r0, r3, r0
     558:	0403      	lsls	r3, r0, #16
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
     55a:	18c0      	adds	r0, r0, r3
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     55c:	0e00      	lsrs	r0, r0, #24

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
				if (precision != -1)
     55e:	4770      	bx	lr
     560:	55555555 	.word	0x55555555
					pad = ' ';
     564:	33333333 	.word	0x33333333

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     568:	0f0f0f0f 	.word	0x0f0f0f0f

0000056c <__udivmoddi4>:
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
			return 1;
		}
	}
	return (buf - buf0) + _to_x(buf, value, 8, precision);
     56c:	b5f0      	push	{r4, r5, r6, r7, lr}
     56e:	464d      	mov	r5, r9
     570:	4656      	mov	r6, sl
     572:	4644      	mov	r4, r8
     574:	465f      	mov	r7, fp
     576:	b4f0      	push	{r4, r5, r6, r7}
     578:	4692      	mov	sl, r2
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
     57a:	b083      	sub	sp, #12
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     57c:	0004      	movs	r4, r0
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     57e:	000d      	movs	r5, r1
     580:	4699      	mov	r9, r3
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
     582:	428b      	cmp	r3, r1
     584:	d82f      	bhi.n	5e6 <__udivmoddi4+0x7a>
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     586:	d02c      	beq.n	5e2 <__udivmoddi4+0x76>
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
     588:	4649      	mov	r1, r9
     58a:	4650      	mov	r0, sl
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     58c:	f000 f8ae 	bl	6ec <__clzdi2>
	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     590:	0029      	movs	r1, r5
     592:	0006      	movs	r6, r0
     594:	0020      	movs	r0, r4
     596:	f000 f8a9 	bl	6ec <__clzdi2>
	if (prefix == 'X') {
		_uc(buf0);
	}

	return len + (buf - buf0);
     59a:	1a33      	subs	r3, r6, r0
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     59c:	4698      	mov	r8, r3
     59e:	3b20      	subs	r3, #32
     5a0:	469b      	mov	fp, r3
					if (cptr_temp[c] == '\0') {
     5a2:	d500      	bpl.n	5a6 <__udivmoddi4+0x3a>
     5a4:	e074      	b.n	690 <__udivmoddi4+0x124>
     5a6:	4653      	mov	r3, sl
						break;
					}
				}
				if ((precision >= 0) && (precision < c))
     5a8:	465a      	mov	r2, fp
     5aa:	4093      	lsls	r3, r2
     5ac:	001f      	movs	r7, r3
     5ae:	4653      	mov	r3, sl
     5b0:	4642      	mov	r2, r8
     5b2:	4093      	lsls	r3, r2
     5b4:	001e      	movs	r6, r3
     5b6:	42af      	cmp	r7, r5
					c = precision;
				if (c > 0) {
     5b8:	d829      	bhi.n	60e <__udivmoddi4+0xa2>
     5ba:	d026      	beq.n	60a <__udivmoddi4+0x9e>
     5bc:	465b      	mov	r3, fp
					memcpy(buf, cptr_temp, (size_t) c);
     5be:	1ba4      	subs	r4, r4, r6
     5c0:	41bd      	sbcs	r5, r7
     5c2:	2b00      	cmp	r3, #0
     5c4:	da00      	bge.n	5c8 <__udivmoddi4+0x5c>
     5c6:	e079      	b.n	6bc <__udivmoddi4+0x150>
					need_justifying = true;
				}
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5c8:	2200      	movs	r2, #0
     5ca:	2300      	movs	r3, #0
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     5cc:	9200      	str	r2, [sp, #0]
     5ce:	9301      	str	r3, [sp, #4]
     5d0:	2301      	movs	r3, #1
     5d2:	465a      	mov	r2, fp
     5d4:	4093      	lsls	r3, r2
     5d6:	9301      	str	r3, [sp, #4]
     5d8:	2301      	movs	r3, #1
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     5da:	4642      	mov	r2, r8
     5dc:	4093      	lsls	r3, r2
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5de:	9300      	str	r3, [sp, #0]
     5e0:	e019      	b.n	616 <__udivmoddi4+0xaa>
		   int alt_form, int precision, int prefix)
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
     5e2:	4282      	cmp	r2, r0
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5e4:	d9d0      	bls.n	588 <__udivmoddi4+0x1c>
     5e6:	2200      	movs	r2, #0
		   int alt_form, int precision, int prefix)
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
     5e8:	2300      	movs	r3, #0
     5ea:	9200      	str	r2, [sp, #0]
		*buf++ = '0';
     5ec:	9301      	str	r3, [sp, #4]
     5ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		*buf++ = 'x';
     5f0:	2b00      	cmp	r3, #0
     5f2:	d001      	beq.n	5f8 <__udivmoddi4+0x8c>
     5f4:	601c      	str	r4, [r3, #0]
     5f6:	605d      	str	r5, [r3, #4]
     5f8:	9800      	ldr	r0, [sp, #0]
	}

	len = _to_x(buf, value, 16, precision);
     5fa:	9901      	ldr	r1, [sp, #4]
     5fc:	b003      	add	sp, #12
     5fe:	bc3c      	pop	{r2, r3, r4, r5}
     600:	4690      	mov	r8, r2
     602:	4699      	mov	r9, r3
	if (prefix == 'X') {
     604:	46a2      	mov	sl, r4
     606:	46ab      	mov	fp, r5
     608:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_uc(buf0);
	}

	return len + (buf - buf0);
     60a:	42a3      	cmp	r3, r4
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     60c:	d9d6      	bls.n	5bc <__udivmoddi4+0x50>
	len = _to_x(buf, value, 16, precision);
	if (prefix == 'X') {
		_uc(buf0);
	}

	return len + (buf - buf0);
     60e:	2200      	movs	r2, #0
     610:	2300      	movs	r3, #0
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     612:	9200      	str	r2, [sp, #0]
				need_justifying = true;
				if (precision != -1)
     614:	9301      	str	r3, [sp, #4]
     616:	4643      	mov	r3, r8
					pad = ' ';
     618:	2b00      	cmp	r3, #0
     61a:	d0e8      	beq.n	5ee <__udivmoddi4+0x82>
     61c:	07fb      	lsls	r3, r7, #31
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
		if (*buf >= 'a' && *buf <= 'z') {
     61e:	0872      	lsrs	r2, r6, #1
     620:	431a      	orrs	r2, r3
     622:	4646      	mov	r6, r8
     624:	087b      	lsrs	r3, r7, #1
			*buf += 'A' - 'a';
     626:	e00e      	b.n	646 <__udivmoddi4+0xda>
     628:	42ab      	cmp	r3, r5
     62a:	d101      	bne.n	630 <__udivmoddi4+0xc4>
#define EOF  -1
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
     62c:	42a2      	cmp	r2, r4
     62e:	d80c      	bhi.n	64a <__udivmoddi4+0xde>
     630:	1aa4      	subs	r4, r4, r2
     632:	419d      	sbcs	r5, r3
     634:	2001      	movs	r0, #1
			case '%':
				if ((*func)('%', dest) == EOF) {
					return EOF;
				}

				count++;
     636:	1924      	adds	r4, r4, r4
     638:	416d      	adcs	r5, r5
     63a:	2100      	movs	r1, #0
     63c:	3e01      	subs	r6, #1
     63e:	1824      	adds	r4, r4, r0
     640:	414d      	adcs	r5, r1
     642:	2e00      	cmp	r6, #0
	if (alt_form) {
		*buf++ = '0';
		if (!value) {
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
			return 1;
     644:	d006      	beq.n	654 <__udivmoddi4+0xe8>

			if (c >= MAXFLD + 1)
				return EOF;

			if (need_justifying) {
				if (c < width) {
     646:	42ab      	cmp	r3, r5
     648:	d9ee      	bls.n	628 <__udivmoddi4+0xbc>
     64a:	3e01      	subs	r6, #1
					if (fminus)	{
     64c:	1924      	adds	r4, r4, r4
     64e:	416d      	adcs	r5, r5
     650:	2e00      	cmp	r6, #0
						/* Left justify? */
						for (i = c; i < width; i++)
							buf[i] = ' ';
     652:	d1f8      	bne.n	646 <__udivmoddi4+0xda>
     654:	465b      	mov	r3, fp
     656:	9800      	ldr	r0, [sp, #0]

			if (need_justifying) {
				if (c < width) {
					if (fminus)	{
						/* Left justify? */
						for (i = c; i < width; i++)
     658:	9901      	ldr	r1, [sp, #4]
     65a:	1900      	adds	r0, r0, r4
     65c:	4169      	adcs	r1, r5
     65e:	2b00      	cmp	r3, #0
     660:	db22      	blt.n	6a8 <__udivmoddi4+0x13c>
     662:	002b      	movs	r3, r5
     664:	465a      	mov	r2, fp
     666:	40d3      	lsrs	r3, r2
     668:	002a      	movs	r2, r5
     66a:	4644      	mov	r4, r8
     66c:	40e2      	lsrs	r2, r4
     66e:	001c      	movs	r4, r3
							buf[i] = ' ';
					} else {
						/* Right justify */
						(void) memmove((buf + (width - c)), buf, (size_t) (c
     670:	465b      	mov	r3, fp
     672:	0015      	movs	r5, r2
     674:	2b00      	cmp	r3, #0
     676:	db2c      	blt.n	6d2 <__udivmoddi4+0x166>
     678:	0026      	movs	r6, r4
     67a:	409e      	lsls	r6, r3
     67c:	0033      	movs	r3, r6
     67e:	0026      	movs	r6, r4
										+ 1));
						if (pad == ' ')
     680:	4647      	mov	r7, r8
     682:	40be      	lsls	r6, r7
     684:	0032      	movs	r2, r6
							prefix = 0;
     686:	1a80      	subs	r0, r0, r2
						c = width - c + prefix;
     688:	4199      	sbcs	r1, r3
						for (i = prefix; i < c; i++)
     68a:	9000      	str	r0, [sp, #0]
     68c:	9101      	str	r1, [sp, #4]
							buf[i] = pad;
     68e:	e7ae      	b.n	5ee <__udivmoddi4+0x82>
     690:	4642      	mov	r2, r8
     692:	2320      	movs	r3, #32
     694:	1a9b      	subs	r3, r3, r2
						(void) memmove((buf + (width - c)), buf, (size_t) (c
										+ 1));
						if (pad == ' ')
							prefix = 0;
						c = width - c + prefix;
						for (i = prefix; i < c; i++)
     696:	4652      	mov	r2, sl
     698:	40da      	lsrs	r2, r3
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
					if ((*func)(*cptr, dest) == EOF)
     69a:	4641      	mov	r1, r8
     69c:	0013      	movs	r3, r2
     69e:	464a      	mov	r2, r9
     6a0:	408a      	lsls	r2, r1
     6a2:	0017      	movs	r7, r2
     6a4:	431f      	orrs	r7, r3
     6a6:	e782      	b.n	5ae <__udivmoddi4+0x42>
     6a8:	4642      	mov	r2, r8
     6aa:	2320      	movs	r3, #32
     6ac:	1a9b      	subs	r3, r3, r2
							buf[i] = pad;
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
     6ae:	002a      	movs	r2, r5
     6b0:	4646      	mov	r6, r8
     6b2:	409a      	lsls	r2, r3
     6b4:	0023      	movs	r3, r4
     6b6:	40f3      	lsrs	r3, r6
     6b8:	4313      	orrs	r3, r2
     6ba:	e7d5      	b.n	668 <__udivmoddi4+0xfc>

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
     6bc:	4642      	mov	r2, r8
     6be:	2320      	movs	r3, #32
     6c0:	2100      	movs	r1, #0
     6c2:	1a9b      	subs	r3, r3, r2
     6c4:	2200      	movs	r2, #0
     6c6:	9100      	str	r1, [sp, #0]
     6c8:	9201      	str	r2, [sp, #4]
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     6ca:	2201      	movs	r2, #1
     6cc:	40da      	lsrs	r2, r3

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
     6ce:	9201      	str	r2, [sp, #4]
     6d0:	e782      	b.n	5d8 <__udivmoddi4+0x6c>
     6d2:	4642      	mov	r2, r8
			*buf++ = '.';
		while (precision-- > 0)
			*buf++ = _get_digit(&fract, &digit_count);
	}

	if (prune_zero) {
     6d4:	2320      	movs	r3, #32
     6d6:	0026      	movs	r6, r4
     6d8:	1a9b      	subs	r3, r3, r2
     6da:	40de      	lsrs	r6, r3
     6dc:	002f      	movs	r7, r5
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     6de:	46b4      	mov	ip, r6
     6e0:	4097      	lsls	r7, r2
				}
			}
		}
	}
	return count;
}
     6e2:	4666      	mov	r6, ip
     6e4:	003b      	movs	r3, r7
     6e6:	4333      	orrs	r3, r6
     6e8:	e7c9      	b.n	67e <__udivmoddi4+0x112>
     6ea:	46c0      	nop			; (mov r8, r8)

000006ec <__clzdi2>:
     6ec:	b510      	push	{r4, lr}
     6ee:	2900      	cmp	r1, #0
     6f0:	d103      	bne.n	6fa <__clzdi2+0xe>
     6f2:	f000 f827 	bl	744 <__clzsi2>
     6f6:	3020      	adds	r0, #32
     6f8:	e002      	b.n	700 <__clzdi2+0x14>
     6fa:	1c08      	adds	r0, r1, #0
     6fc:	f000 f822 	bl	744 <__clzsi2>
     700:	bd10      	pop	{r4, pc}
     702:	46c0      	nop			; (mov r8, r8)

00000704 <__ctzsi2>:
     704:	4241      	negs	r1, r0
     706:	4008      	ands	r0, r1
     708:	211c      	movs	r1, #28
     70a:	2301      	movs	r3, #1
     70c:	041b      	lsls	r3, r3, #16
     70e:	4298      	cmp	r0, r3
     710:	d301      	bcc.n	716 <__ctzsi2+0x12>
     712:	0c00      	lsrs	r0, r0, #16
     714:	3910      	subs	r1, #16
     716:	0a1b      	lsrs	r3, r3, #8
     718:	4298      	cmp	r0, r3
     71a:	d301      	bcc.n	720 <__ctzsi2+0x1c>
     71c:	0a00      	lsrs	r0, r0, #8
     71e:	3908      	subs	r1, #8
     720:	091b      	lsrs	r3, r3, #4
     722:	4298      	cmp	r0, r3
     724:	d301      	bcc.n	72a <__ctzsi2+0x26>
     726:	0900      	lsrs	r0, r0, #4
     728:	3904      	subs	r1, #4
     72a:	a202      	add	r2, pc, #8	; (adr r2, 734 <__ctzsi2+0x30>)
     72c:	5c10      	ldrb	r0, [r2, r0]
     72e:	1a40      	subs	r0, r0, r1
     730:	4770      	bx	lr
     732:	46c0      	nop			; (mov r8, r8)
     734:	1d1d1c1b 	.word	0x1d1d1c1b
     738:	1e1e1e1e 	.word	0x1e1e1e1e
     73c:	1f1f1f1f 	.word	0x1f1f1f1f
     740:	1f1f1f1f 	.word	0x1f1f1f1f

00000744 <__clzsi2>:
     744:	211c      	movs	r1, #28
     746:	2301      	movs	r3, #1
     748:	041b      	lsls	r3, r3, #16
     74a:	4298      	cmp	r0, r3
     74c:	d301      	bcc.n	752 <__clzsi2+0xe>
     74e:	0c00      	lsrs	r0, r0, #16
     750:	3910      	subs	r1, #16
     752:	0a1b      	lsrs	r3, r3, #8
     754:	4298      	cmp	r0, r3
     756:	d301      	bcc.n	75c <__clzsi2+0x18>
     758:	0a00      	lsrs	r0, r0, #8
     75a:	3908      	subs	r1, #8
     75c:	091b      	lsrs	r3, r3, #4
     75e:	4298      	cmp	r0, r3
     760:	d301      	bcc.n	766 <__clzsi2+0x22>
     762:	0900      	lsrs	r0, r0, #4
     764:	3904      	subs	r1, #4
     766:	a202      	add	r2, pc, #8	; (adr r2, 770 <__clzsi2+0x2c>)
     768:	5c10      	ldrb	r0, [r2, r0]
     76a:	1840      	adds	r0, r0, r1
     76c:	4770      	bx	lr
     76e:	46c0      	nop			; (mov r8, r8)
     770:	02020304 	.word	0x02020304
     774:	01010101 	.word	0x01010101
	...

00000780 <main>:

/* 1000 msec = 1 sec */
#define SLEEP_TIME 	1000

void main(void)
{
     780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int cnt = 0;
	struct device *dev;

	dev = device_get_binding(PORT);
     782:	4813      	ldr	r0, [pc, #76]	; (7d0 <main+0x50>)
     784:	f008 fa9a 	bl	8cbc <device_get_binding>
     788:	0004      	movs	r4, r0
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
     78a:	6843      	ldr	r3, [r0, #4]
     78c:	2207      	movs	r2, #7
     78e:	681d      	ldr	r5, [r3, #0]
     790:	2100      	movs	r1, #0
     792:	2301      	movs	r3, #1
     794:	47a8      	blx	r5
static inline int gpio_pin_write(struct device *port, u32_t pin,
				 u32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
     796:	6863      	ldr	r3, [r4, #4]
     798:	2207      	movs	r2, #7
     79a:	685d      	ldr	r5, [r3, #4]
     79c:	2100      	movs	r1, #0
     79e:	2301      	movs	r3, #1
     7a0:	0020      	movs	r0, r4
     7a2:	2702      	movs	r7, #2
     7a4:	47a8      	blx	r5
/* 1000 msec = 1 sec */
#define SLEEP_TIME 	1000

void main(void)
{
	int cnt = 0;
     7a6:	2500      	movs	r5, #0
     7a8:	427f      	negs	r7, r7
     7aa:	4b0a      	ldr	r3, [pc, #40]	; (7d4 <main+0x54>)
     7ac:	402b      	ands	r3, r5
     7ae:	d502      	bpl.n	7b6 <main+0x36>
     7b0:	3b01      	subs	r3, #1
     7b2:	433b      	orrs	r3, r7
     7b4:	3301      	adds	r3, #1
     7b6:	6862      	ldr	r2, [r4, #4]
     7b8:	2100      	movs	r1, #0
     7ba:	6856      	ldr	r6, [r2, #4]
     7bc:	0020      	movs	r0, r4
     7be:	2207      	movs	r2, #7
     7c0:	47b0      	blx	r6

	while (1) {
		/* Set pin to HIGH/LOW every 1 second */
		gpio_pin_write(dev, LED, cnt % 2);
		cnt++;
		k_sleep(SLEEP_TIME);
     7c2:	20fa      	movs	r0, #250	; 0xfa
     7c4:	0080      	lsls	r0, r0, #2
	gpio_pin_write(dev, LED, 1);	

	while (1) {
		/* Set pin to HIGH/LOW every 1 second */
		gpio_pin_write(dev, LED, cnt % 2);
		cnt++;
     7c6:	3501      	adds	r5, #1
		k_sleep(SLEEP_TIME);
     7c8:	f008 ff3a 	bl	9640 <k_sleep>
     7cc:	e7ed      	b.n	7aa <main+0x2a>
     7ce:	46c0      	nop			; (mov r8, r8)
     7d0:	00009d78 	.word	0x00009d78
     7d4:	80000001 	.word	0x80000001

000007d8 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
     7d8:	22a8      	movs	r2, #168	; 0xa8
     7da:	4b08      	ldr	r3, [pc, #32]	; (7fc <rtc_compare_set+0x24>)
     7dc:	00d2      	lsls	r2, r2, #3
     7de:	5098      	str	r0, [r3, r2]
	rtc_now = RTC_COUNTER;
     7e0:	4a07      	ldr	r2, [pc, #28]	; (800 <CONFIG_ISR_STACK_SIZE>)
     7e2:	589b      	ldr	r3, [r3, r2]
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
     7e4:	1ac0      	subs	r0, r0, r3
     7e6:	0200      	lsls	r0, r0, #8
     7e8:	0a00      	lsrs	r0, r0, #8
     7ea:	4b06      	ldr	r3, [pc, #24]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7ec:	3802      	subs	r0, #2
     7ee:	4298      	cmp	r0, r3
     7f0:	d903      	bls.n	7fa <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     7f2:	2280      	movs	r2, #128	; 0x80
     7f4:	4b04      	ldr	r3, [pc, #16]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7f6:	0292      	lsls	r2, r2, #10
     7f8:	605a      	str	r2, [r3, #4]
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
     7fa:	4770      	bx	lr
     7fc:	40011000 	.word	0x40011000
     800:	00000504 	.word	0x00000504
     804:	007ffffd 	.word	0x007ffffd
     808:	e000e1fc 	.word	0xe000e1fc

0000080c <rtc_announce_set_next>:

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     80c:	4b13      	ldr	r3, [pc, #76]	; (85c <rtc_announce_set_next+0x50>)
     80e:	4a14      	ldr	r2, [pc, #80]	; (860 <rtc_announce_set_next+0x54>)
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
     810:	b570      	push	{r4, r5, r6, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     812:	58d0      	ldr	r0, [r2, r3]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     814:	23a3      	movs	r3, #163	; 0xa3
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     816:	4d13      	ldr	r5, [pc, #76]	; (864 <rtc_announce_set_next+0x58>)

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     818:	005b      	lsls	r3, r3, #1
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     81a:	682c      	ldr	r4, [r5, #0]
     81c:	1b00      	subs	r0, r0, r4
     81e:	0200      	lsls	r0, r0, #8
     820:	0a00      	lsrs	r0, r0, #8

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     822:	4298      	cmp	r0, r3
     824:	d913      	bls.n	84e <rtc_announce_set_next+0x42>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
     826:	2148      	movs	r1, #72	; 0x48
     828:	31ff      	adds	r1, #255	; 0xff
     82a:	f7ff fcb9 	bl	1a0 <__aeabi_uidiv>

		if (sys_elapsed > expected_sys_ticks) {
     82e:	4b0e      	ldr	r3, [pc, #56]	; (868 <rtc_announce_set_next+0x5c>)
     830:	681b      	ldr	r3, [r3, #0]
     832:	4298      	cmp	r0, r3
     834:	d900      	bls.n	838 <rtc_announce_set_next+0x2c>
     836:	0018      	movs	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     838:	2348      	movs	r3, #72	; 0x48
     83a:	33ff      	adds	r3, #255	; 0xff
     83c:	4343      	muls	r3, r0
     83e:	191c      	adds	r4, r3, r4
     840:	0224      	lsls	r4, r4, #8
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     842:	4b0a      	ldr	r3, [pc, #40]	; (86c <rtc_announce_set_next+0x60>)

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     844:	0a24      	lsrs	r4, r4, #8
     846:	602c      	str	r4, [r5, #0]
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     848:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
     84a:	f009 f80d 	bl	9868 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
     84e:	6828      	ldr	r0, [r5, #0]
     850:	3048      	adds	r0, #72	; 0x48
     852:	30ff      	adds	r0, #255	; 0xff
     854:	f7ff ffc0 	bl	7d8 <rtc_compare_set>
}
     858:	bd70      	pop	{r4, r5, r6, pc}
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	00000504 	.word	0x00000504
     860:	40011000 	.word	0x40011000
     864:	20000318 	.word	0x20000318
     868:	2000031c 	.word	0x2000031c
     86c:	2000023c 	.word	0x2000023c

00000870 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     870:	2200      	movs	r2, #0
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
     872:	b510      	push	{r4, lr}
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     874:	4b02      	ldr	r3, [pc, #8]	; (880 <rtc1_nrf5_isr+0x10>)
     876:	645a      	str	r2, [r3, #68]	; 0x44
	rtc_announce_set_next();
     878:	f7ff ffc8 	bl	80c <rtc_announce_set_next>
}
     87c:	bd10      	pop	{r4, pc}
     87e:	46c0      	nop			; (mov r8, r8)
     880:	400110fc 	.word	0x400110fc

00000884 <_timer_idle_enter>:
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     884:	4b07      	ldr	r3, [pc, #28]	; (8a4 <_timer_idle_enter+0x20>)
 * c) The RTC is programmed to fire at sys tick 1 + 3 = 4 (RTC tick 400)
 *
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
     886:	b510      	push	{r4, lr}
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     888:	4298      	cmp	r0, r3
     88a:	d900      	bls.n	88e <_timer_idle_enter+0xa>
	    (sys_ticks > (RTC_HALF / RTC_TICKS_PER_SYS_TICK))) {
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
     88c:	0018      	movs	r0, r3
	}

	expected_sys_ticks = sys_ticks;
     88e:	4b06      	ldr	r3, [pc, #24]	; (8a8 <_timer_idle_enter+0x24>)
     890:	6018      	str	r0, [r3, #0]

	/* If ticks is 0, the RTC interrupt handler will be set pending
	 * immediately, meaning that we will not go to sleep.
	 */
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
     892:	2348      	movs	r3, #72	; 0x48
     894:	33ff      	adds	r3, #255	; 0xff
     896:	4358      	muls	r0, r3
     898:	4b04      	ldr	r3, [pc, #16]	; (8ac <_timer_idle_enter+0x28>)
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	18c0      	adds	r0, r0, r3
     89e:	f7ff ff9b 	bl	7d8 <rtc_compare_set>
}
     8a2:	bd10      	pop	{r4, pc}
     8a4:	00006435 	.word	0x00006435
     8a8:	2000031c 	.word	0x2000031c
     8ac:	20000318 	.word	0x20000318

000008b0 <_timer_idle_exit>:
{
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     8b0:	2200      	movs	r2, #0
     8b2:	4b07      	ldr	r3, [pc, #28]	; (8d0 <_timer_idle_exit+0x20>)
 * a) Notify how many sys ticks have passed, i.e., 350 - 150 / 100 = 2.
 * b) Schedule next sys tick at 400.
 *
 */
void _timer_idle_exit(void)
{
     8b4:	b510      	push	{r4, lr}
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     8b6:	2180      	movs	r1, #128	; 0x80
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     8b8:	645a      	str	r2, [r3, #68]	; 0x44
     8ba:	23c0      	movs	r3, #192	; 0xc0
     8bc:	4a05      	ldr	r2, [pc, #20]	; (8d4 <_timer_idle_exit+0x24>)
     8be:	005b      	lsls	r3, r3, #1
     8c0:	0289      	lsls	r1, r1, #10
     8c2:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	rtc_announce_set_next();
     8c4:	f7ff ffa2 	bl	80c <rtc_announce_set_next>

	/* After exiting idle, the kernel no longer expects more than one sys
	 * ticks to have passed when _sys_clock_tick_announce() is called.
	 */
	expected_sys_ticks = 1;
     8c8:	2201      	movs	r2, #1
     8ca:	4b03      	ldr	r3, [pc, #12]	; (8d8 <_timer_idle_exit+0x28>)
     8cc:	601a      	str	r2, [r3, #0]
}
     8ce:	bd10      	pop	{r4, pc}
     8d0:	400110fc 	.word	0x400110fc
     8d4:	e000e100 	.word	0xe000e100
     8d8:	2000031c 	.word	0x2000031c

000008dc <_sys_clock_driver_init>:
	RTC_CC_EVENT = 0;
	rtc_announce_set_next();
}

int _sys_clock_driver_init(struct device *device)
{
     8dc:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
     8de:	481a      	ldr	r0, [pc, #104]	; (948 <_sys_clock_driver_init+0x6c>)
     8e0:	f008 f9ec 	bl	8cbc <device_get_binding>
	if (!clock) {
     8e4:	2800      	cmp	r0, #0
     8e6:	d02c      	beq.n	942 <_sys_clock_driver_init+0x66>
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     8e8:	2400      	movs	r4, #0

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     8ea:	2601      	movs	r6, #1
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
     8ec:	6843      	ldr	r3, [r0, #4]
     8ee:	2101      	movs	r1, #1
     8f0:	681b      	ldr	r3, [r3, #0]
     8f2:	4798      	blx	r3
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     8f4:	4b15      	ldr	r3, [pc, #84]	; (94c <_sys_clock_driver_init+0x70>)
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
     8f6:	2248      	movs	r2, #72	; 0x48
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     8f8:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     8fa:	4b15      	ldr	r3, [pc, #84]	; (950 <_sys_clock_driver_init+0x74>)
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
     8fc:	4d15      	ldr	r5, [pc, #84]	; (954 <_sys_clock_driver_init+0x78>)
	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     8fe:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
     900:	23a1      	movs	r3, #161	; 0xa1
     902:	00db      	lsls	r3, r3, #3
     904:	50ec      	str	r4, [r5, r3]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
     906:	32ff      	adds	r2, #255	; 0xff
     908:	3338      	adds	r3, #56	; 0x38
     90a:	50ea      	str	r2, [r5, r3]
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
     90c:	2380      	movs	r3, #128	; 0x80
     90e:	32fe      	adds	r2, #254	; 0xfe
     910:	025b      	lsls	r3, r3, #9
     912:	32ff      	adds	r2, #255	; 0xff
     914:	50ab      	str	r3, [r5, r2]
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
     916:	3a40      	subs	r2, #64	; 0x40
     918:	50ab      	str	r3, [r5, r2]

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
     91a:	4b0f      	ldr	r3, [pc, #60]	; (958 <_sys_clock_driver_init+0x7c>)
     91c:	2180      	movs	r1, #128	; 0x80
     91e:	645c      	str	r4, [r3, #68]	; 0x44
     920:	23c0      	movs	r3, #192	; 0xc0
     922:	4a0e      	ldr	r2, [pc, #56]	; (95c <_sys_clock_driver_init+0x80>)
     924:	005b      	lsls	r3, r3, #1
     926:	0289      	lsls	r1, r1, #10
     928:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
     92a:	2011      	movs	r0, #17
     92c:	0022      	movs	r2, r4
     92e:	0031      	movs	r1, r6
     930:	f008 f888 	bl	8a44 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
     934:	2011      	movs	r0, #17
     936:	f008 f865 	bl	8a04 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
     93a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
     93c:	0020      	movs	r0, r4

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
	irq_enable(NRF5_IRQ_RTC1_IRQn);

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;
     93e:	602e      	str	r6, [r5, #0]

	return 0;
     940:	e001      	b.n	946 <_sys_clock_driver_init+0x6a>

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
	if (!clock) {
		return -1;
     942:	2001      	movs	r0, #1
     944:	4240      	negs	r0, r0

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
}
     946:	bd70      	pop	{r4, r5, r6, pc}
     948:	00009d7f 	.word	0x00009d7f
     94c:	20000318 	.word	0x20000318
     950:	2000031c 	.word	0x2000031c
     954:	40011000 	.word	0x40011000
     958:	400110fc 	.word	0x400110fc
     95c:	e000e100 	.word	0xe000e100

00000960 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     960:	6803      	ldr	r3, [r0, #0]
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
     962:	b570      	push	{r4, r5, r6, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     964:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     966:	2501      	movs	r5, #1
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     968:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     96a:	261f      	movs	r6, #31
     96c:	6883      	ldr	r3, [r0, #8]
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     96e:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
     970:	68dc      	ldr	r4, [r3, #12]
     972:	0023      	movs	r3, r4
     974:	40c3      	lsrs	r3, r0
     976:	422b      	tst	r3, r5
     978:	d008      	beq.n	98c <gpiote_find_channel+0x2c>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
     97a:	0003      	movs	r3, r0
     97c:	3345      	adds	r3, #69	; 0x45
     97e:	33ff      	adds	r3, #255	; 0xff
     980:	009b      	lsls	r3, r3, #2
     982:	589b      	ldr	r3, [r3, r2]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     984:	0a1b      	lsrs	r3, r3, #8
     986:	4033      	ands	r3, r6
     988:	428b      	cmp	r3, r1
     98a:	d003      	beq.n	994 <gpiote_find_channel+0x34>
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     98c:	3001      	adds	r0, #1
     98e:	2804      	cmp	r0, #4
     990:	d1ef      	bne.n	972 <gpiote_find_channel+0x12>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
			return i;
		}
	}

	return -ENODEV;
     992:	3817      	subs	r0, #23
}
     994:	bd70      	pop	{r4, r5, r6, pc}

00000996 <gpio_nrf5_read>:
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
     996:	b530      	push	{r4, r5, lr}
     998:	0015      	movs	r5, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     99a:	6802      	ldr	r2, [r0, #0]
     99c:	20a2      	movs	r0, #162	; 0xa2
     99e:	6892      	ldr	r2, [r2, #8]
     9a0:	00c0      	lsls	r0, r0, #3
     9a2:	6814      	ldr	r4, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
     9a4:	5822      	ldr	r2, [r4, r0]
static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
     9a6:	2900      	cmp	r1, #0
     9a8:	d102      	bne.n	9b0 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
     9aa:	40ea      	lsrs	r2, r5
     9ac:	3101      	adds	r1, #1
     9ae:	400a      	ands	r2, r1
	} else {
		*value = gpio->IN;
	}
	return 0;
}
     9b0:	2000      	movs	r0, #0
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
     9b2:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
     9b4:	bd30      	pop	{r4, r5, pc}
	...

000009b8 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     9b8:	6800      	ldr	r0, [r0, #0]
     9ba:	6880      	ldr	r0, [r0, #8]
     9bc:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
     9be:	2900      	cmp	r1, #0
     9c0:	d109      	bne.n	9d6 <gpio_nrf5_write+0x1e>
     9c2:	3101      	adds	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
     9c4:	4091      	lsls	r1, r2
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		if (value) { /* 1 */
     9c6:	2b00      	cmp	r3, #0
     9c8:	d002      	beq.n	9d0 <gpio_nrf5_write+0x18>
			gpio->OUTSET = BIT(pin);
     9ca:	23a1      	movs	r3, #161	; 0xa1
     9cc:	00db      	lsls	r3, r3, #3
     9ce:	e000      	b.n	9d2 <gpio_nrf5_write+0x1a>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
     9d0:	4b03      	ldr	r3, [pc, #12]	; (9e0 <gpio_nrf5_write+0x28>)
     9d2:	50c1      	str	r1, [r0, r3]
     9d4:	e001      	b.n	9da <gpio_nrf5_write+0x22>
		}
	} else {
		gpio->OUT = value;
     9d6:	4a03      	ldr	r2, [pc, #12]	; (9e4 <gpio_nrf5_write+0x2c>)
     9d8:	5083      	str	r3, [r0, r2]
	}
	return 0;
}
     9da:	2000      	movs	r0, #0
     9dc:	4770      	bx	lr
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	0000050c 	.word	0x0000050c
     9e4:	00000504 	.word	0x00000504

000009e8 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
     9e8:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     9ea:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
     9ec:	2a00      	cmp	r2, #0
     9ee:	d007      	beq.n	a00 <gpio_nrf5_manage_callback+0x18>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
     9f0:	681a      	ldr	r2, [r3, #0]
     9f2:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
     9f4:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
     9f6:	6019      	str	r1, [r3, #0]

	if (!list->tail) {
     9f8:	2a00      	cmp	r2, #0
     9fa:	d119      	bne.n	a30 <gpio_nrf5_manage_callback+0x48>
		list->tail = list->head;
     9fc:	6059      	str	r1, [r3, #4]
     9fe:	e017      	b.n	a30 <gpio_nrf5_manage_callback+0x48>
     a00:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
     a02:	2800      	cmp	r0, #0
     a04:	d014      	beq.n	a30 <gpio_nrf5_manage_callback+0x48>
		if (test == node) {
     a06:	4281      	cmp	r1, r0
     a08:	d10f      	bne.n	a2a <gpio_nrf5_manage_callback+0x42>
     a0a:	685c      	ldr	r4, [r3, #4]
     a0c:	6808      	ldr	r0, [r1, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
     a0e:	2a00      	cmp	r2, #0
     a10:	d104      	bne.n	a1c <gpio_nrf5_manage_callback+0x34>
		list->head = node->next;
     a12:	6018      	str	r0, [r3, #0]

		/* Was node also the tail? */
		if (list->tail == node) {
     a14:	42a1      	cmp	r1, r4
     a16:	d105      	bne.n	a24 <gpio_nrf5_manage_callback+0x3c>
			list->tail = list->head;
     a18:	6058      	str	r0, [r3, #4]
     a1a:	e003      	b.n	a24 <gpio_nrf5_manage_callback+0x3c>
		}
	} else {
		prev_node->next = node->next;
     a1c:	6010      	str	r0, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
     a1e:	42a1      	cmp	r1, r4
     a20:	d100      	bne.n	a24 <gpio_nrf5_manage_callback+0x3c>
			list->tail = prev_node;
     a22:	605a      	str	r2, [r3, #4]
		}
	}

	node->next = NULL;
     a24:	2300      	movs	r3, #0
     a26:	600b      	str	r3, [r1, #0]
     a28:	e002      	b.n	a30 <gpio_nrf5_manage_callback+0x48>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
     a2a:	0002      	movs	r2, r0
     a2c:	6800      	ldr	r0, [r0, #0]
     a2e:	e7e8      	b.n	a02 <gpio_nrf5_manage_callback+0x1a>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
     a30:	2000      	movs	r0, #0
     a32:	bd10      	pop	{r4, pc}

00000a34 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
     a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     a36:	6803      	ldr	r3, [r0, #0]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
     a38:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     a3a:	689b      	ldr	r3, [r3, #8]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
     a3c:	0017      	movs	r7, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     a3e:	689d      	ldr	r5, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     a40:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
     a42:	2900      	cmp	r1, #0
     a44:	d114      	bne.n	a70 <gpio_nrf5_enable_callback+0x3c>

		i = gpiote_find_channel(dev, pin);
     a46:	0011      	movs	r1, r2
     a48:	f7ff ff8a 	bl	960 <gpiote_find_channel>
     a4c:	1e02      	subs	r2, r0, #0
		if (i < 0) {
     a4e:	db11      	blt.n	a74 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
     a50:	2301      	movs	r3, #1
     a52:	0019      	movs	r1, r3
     a54:	40b9      	lsls	r1, r7
     a56:	68b0      	ldr	r0, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
     a58:	4093      	lsls	r3, r2
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
     a5a:	4301      	orrs	r1, r0
     a5c:	60b1      	str	r1, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
     a5e:	0011      	movs	r1, r2
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
     a60:	22c1      	movs	r2, #193	; 0xc1
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
     a62:	3140      	adds	r1, #64	; 0x40
     a64:	0089      	lsls	r1, r1, #2
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
     a66:	0092      	lsls	r2, r2, #2
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
     a68:	514c      	str	r4, [r1, r5]
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
	}

	return 0;
     a6a:	0020      	movs	r0, r4

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
     a6c:	50ab      	str	r3, [r5, r2]
	} else {
		return -ENOTSUP;
	}

	return 0;
     a6e:	e001      	b.n	a74 <gpio_nrf5_enable_callback+0x40>
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
     a70:	2023      	movs	r0, #35	; 0x23
     a72:	4240      	negs	r0, r0
	}

	return 0;
}
     a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000a76 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
     a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     a78:	6803      	ldr	r3, [r0, #0]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
     a7a:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     a7c:	689b      	ldr	r3, [r3, #8]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
     a7e:	0016      	movs	r6, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     a80:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     a82:	6885      	ldr	r5, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
     a84:	2900      	cmp	r1, #0
     a86:	d110      	bne.n	aaa <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
     a88:	0011      	movs	r1, r2
     a8a:	f7ff ff69 	bl	960 <gpiote_find_channel>
     a8e:	1e03      	subs	r3, r0, #0
		if (i < 0) {
     a90:	db0d      	blt.n	aae <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
     a92:	2301      	movs	r3, #1
     a94:	001a      	movs	r2, r3
     a96:	40b2      	lsls	r2, r6
     a98:	68a9      	ldr	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
     a9a:	4083      	lsls	r3, r0
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
     a9c:	4391      	bics	r1, r2
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
     a9e:	22c2      	movs	r2, #194	; 0xc2
     aa0:	0092      	lsls	r2, r2, #2
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
     aa2:	60a9      	str	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
     aa4:	50bb      	str	r3, [r7, r2]
	} else {
		return -ENOTSUP;
	}

	return 0;
     aa6:	0023      	movs	r3, r4
     aa8:	e001      	b.n	aae <gpio_nrf5_disable_callback+0x38>

		data->pin_callback_enables &= ~(BIT(pin));
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
	} else {
		return -ENOTSUP;
     aaa:	2323      	movs	r3, #35	; 0x23
     aac:	425b      	negs	r3, r3
	}

	return 0;
}
     aae:	0018      	movs	r0, r3
     ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000ab2 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
     ab2:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
     ab4:	2200      	movs	r2, #0
     ab6:	2101      	movs	r1, #1
     ab8:	2006      	movs	r0, #6
     aba:	f007 ffc3 	bl	8a44 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
     abe:	2006      	movs	r0, #6
     ac0:	f007 ffa0 	bl	8a04 <_arch_irq_enable>

	return 0;
}
     ac4:	2000      	movs	r0, #0
     ac6:	bd10      	pop	{r4, pc}

00000ac8 <gpio_nrf5_port_isr>:
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     ac8:	6803      	ldr	r3, [r0, #0]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
     aca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     acc:	689b      	ldr	r3, [r3, #8]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
     ace:	0004      	movs	r4, r0
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     ad0:	689b      	ldr	r3, [r3, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
     ad2:	2701      	movs	r7, #1
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     ad4:	9301      	str	r3, [sp, #4]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     ad6:	2300      	movs	r3, #0
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
     ad8:	001a      	movs	r2, r3
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     ada:	6885      	ldr	r5, [r0, #8]
     adc:	9801      	ldr	r0, [sp, #4]
     ade:	0099      	lsls	r1, r3, #2
     ae0:	1841      	adds	r1, r0, r1
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
     ae2:	0008      	movs	r0, r1
     ae4:	30fc      	adds	r0, #252	; 0xfc
     ae6:	6846      	ldr	r6, [r0, #4]
     ae8:	2e00      	cmp	r6, #0
     aea:	d00a      	beq.n	b02 <gpio_nrf5_port_isr+0x3a>
			gpiote->EVENTS_IN[i] = 0;
     aec:	2600      	movs	r6, #0
     aee:	6046      	str	r6, [r0, #4]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
     af0:	20a2      	movs	r0, #162	; 0xa2
     af2:	00c0      	lsls	r0, r0, #3
     af4:	5809      	ldr	r1, [r1, r0]
     af6:	201f      	movs	r0, #31
     af8:	0a09      	lsrs	r1, r1, #8
     afa:	4001      	ands	r1, r0
     afc:	0038      	movs	r0, r7
     afe:	4088      	lsls	r0, r1
     b00:	4302      	orrs	r2, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     b02:	3301      	adds	r3, #1
     b04:	2b04      	cmp	r3, #4
     b06:	d1e9      	bne.n	adc <gpio_nrf5_port_isr+0x14>
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
     b08:	68ae      	ldr	r6, [r5, #8]

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
     b0a:	2006      	movs	r0, #6
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
     b0c:	4016      	ands	r6, r2

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
     b0e:	f007 ff83 	bl	8a18 <_arch_irq_disable>
     b12:	682d      	ldr	r5, [r5, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
     b14:	2d00      	cmp	r5, #0
     b16:	d103      	bne.n	b20 <gpio_nrf5_port_isr+0x58>

	/* Call the registered callbacks */
	_gpio_fire_callbacks(&data->callbacks, (struct device *)dev,
			     enabled_int);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
     b18:	2006      	movs	r0, #6
     b1a:	f007 ff73 	bl	8a04 <_arch_irq_enable>
}
     b1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (cb->pin_mask & pins) {
     b20:	68ab      	ldr	r3, [r5, #8]
     b22:	4233      	tst	r3, r6
     b24:	d0f5      	beq.n	b12 <gpio_nrf5_port_isr+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
     b26:	0032      	movs	r2, r6
     b28:	0029      	movs	r1, r5
     b2a:	0020      	movs	r0, r4
     b2c:	686b      	ldr	r3, [r5, #4]
     b2e:	4798      	blx	r3
     b30:	e7ef      	b.n	b12 <gpio_nrf5_port_isr+0x4a>
	...

00000b34 <gpio_nrf5_config>:
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
     b34:	b5f0      	push	{r4, r5, r6, r7, lr}
     b36:	0006      	movs	r6, r0
     b38:	0014      	movs	r4, r2
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     b3a:	6802      	ldr	r2, [r0, #0]
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
     b3c:	b085      	sub	sp, #20
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     b3e:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     b40:	68b5      	ldr	r5, [r6, #8]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     b42:	6890      	ldr	r0, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     b44:	6817      	ldr	r7, [r2, #0]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     b46:	9003      	str	r0, [sp, #12]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
     b48:	2900      	cmp	r1, #0
     b4a:	d001      	beq.n	b50 <gpio_nrf5_config+0x1c>
					      pull |
					      GPIO_INPUT_CONNECT |
					      GPIO_DIR_INPUT);
		}
	} else {
		return -ENOTSUP;
     b4c:	2023      	movs	r0, #35	; 0x23
     b4e:	e069      	b.n	c24 <gpio_nrf5_config+0xf0>

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
     b50:	2103      	movs	r1, #3
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
     b52:	1398      	asrs	r0, r3, #14
     b54:	4008      	ands	r0, r1

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
     b56:	131a      	asrs	r2, r3, #12
     b58:	400a      	ands	r2, r1
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
     b5a:	9001      	str	r0, [sp, #4]

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
     b5c:	31fd      	adds	r1, #253	; 0xfd
     b5e:	20c0      	movs	r0, #192	; 0xc0
     b60:	468c      	mov	ip, r1
     b62:	0080      	lsls	r0, r0, #2
     b64:	4018      	ands	r0, r3
			pull = GPIO_PULL_UP;
     b66:	39f4      	subs	r1, #244	; 0xf4
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
     b68:	4560      	cmp	r0, ip
     b6a:	d004      	beq.n	b76 <gpio_nrf5_config+0x42>
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
     b6c:	492f      	ldr	r1, [pc, #188]	; (c2c <gpio_nrf5_config+0xf8>)
     b6e:	1840      	adds	r0, r0, r1
     b70:	4241      	negs	r1, r0
     b72:	4141      	adcs	r1, r0
     b74:	0089      	lsls	r1, r1, #2
			pull = GPIO_PULL_UP;
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
			pull = GPIO_PULL_DOWN;
		}

		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
     b76:	2001      	movs	r0, #1
     b78:	0092      	lsls	r2, r2, #2
     b7a:	9202      	str	r2, [sp, #8]
     b7c:	4203      	tst	r3, r0
     b7e:	d013      	beq.n	ba8 <gpio_nrf5_config+0x74>
			/* Set initial output value */
			if (pull == GPIO_PULL_UP) {
     b80:	290c      	cmp	r1, #12
     b82:	d103      	bne.n	b8c <gpio_nrf5_config+0x58>
				gpio->OUTSET = BIT(pin);
     b84:	22a1      	movs	r2, #161	; 0xa1
     b86:	40a0      	lsls	r0, r4
     b88:	00d2      	lsls	r2, r2, #3
     b8a:	e003      	b.n	b94 <gpio_nrf5_config+0x60>
			} else if (pull == GPIO_PULL_DOWN) {
     b8c:	2904      	cmp	r1, #4
     b8e:	d102      	bne.n	b96 <gpio_nrf5_config+0x62>
				gpio->OUTCLR = BIT(pin);
     b90:	40a0      	lsls	r0, r4
     b92:	4a27      	ldr	r2, [pc, #156]	; (c30 <gpio_nrf5_config+0xfc>)
     b94:	50b8      	str	r0, [r7, r2]
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
     b96:	9802      	ldr	r0, [sp, #8]
     b98:	9a01      	ldr	r2, [sp, #4]
     b9a:	1882      	adds	r2, r0, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
     b9c:	4825      	ldr	r0, [pc, #148]	; (c34 <gpio_nrf5_config+0x100>)
			} else if (pull == GPIO_PULL_DOWN) {
				gpio->OUTCLR = BIT(pin);
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
     b9e:	0092      	lsls	r2, r2, #2
					      pull |
					      GPIO_INPUT_DISCONNECT |
     ba0:	5812      	ldr	r2, [r2, r0]
     ba2:	2003      	movs	r0, #3
     ba4:	4302      	orrs	r2, r0
     ba6:	e005      	b.n	bb4 <gpio_nrf5_config+0x80>
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
     ba8:	9802      	ldr	r0, [sp, #8]
     baa:	9a01      	ldr	r2, [sp, #4]
     bac:	1882      	adds	r2, r0, r2
					      pull |
					      GPIO_INPUT_CONNECT |
     bae:	4821      	ldr	r0, [pc, #132]	; (c34 <gpio_nrf5_config+0x100>)
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
     bb0:	0092      	lsls	r2, r2, #2
					      pull |
					      GPIO_INPUT_CONNECT |
     bb2:	5812      	ldr	r2, [r2, r0]
     bb4:	4311      	orrs	r1, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
     bb6:	0022      	movs	r2, r4
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
     bb8:	2002      	movs	r0, #2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
     bba:	32c1      	adds	r2, #193	; 0xc1
     bbc:	32ff      	adds	r2, #255	; 0xff
     bbe:	0092      	lsls	r2, r2, #2
     bc0:	51d1      	str	r1, [r2, r7]
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
     bc2:	4018      	ands	r0, r3
     bc4:	d02f      	beq.n	c26 <gpio_nrf5_config+0xf2>
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
     bc6:	069a      	lsls	r2, r3, #26
     bc8:	d5c0      	bpl.n	b4c <gpio_nrf5_config+0x18>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
     bca:	065a      	lsls	r2, r3, #25
     bcc:	d403      	bmi.n	bd6 <gpio_nrf5_config+0xa2>
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
     bce:	2780      	movs	r7, #128	; 0x80
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
     bd0:	075b      	lsls	r3, r3, #29
     bd2:	d403      	bmi.n	bdc <gpio_nrf5_config+0xa8>
     bd4:	e000      	b.n	bd8 <gpio_nrf5_config+0xa4>
	if (flags & GPIO_INT) {
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
     bd6:	27c0      	movs	r7, #192	; 0xc0
     bd8:	02bf      	lsls	r7, r7, #10
     bda:	e000      	b.n	bde <gpio_nrf5_config+0xaa>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
     bdc:	027f      	lsls	r7, r7, #9
			}
		} else { /* GPIO_INT_LEVEL */
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
     bde:	68e8      	ldr	r0, [r5, #12]
     be0:	f7ff fcaa 	bl	538 <__popcountsi2>
     be4:	2804      	cmp	r0, #4
     be6:	d01c      	beq.n	c22 <gpio_nrf5_config+0xee>
				GPIOTE_CHAN_COUNT) {
			return -EIO;
		}

		/* check if already allocated to replace */
		int i = gpiote_find_channel(dev, pin);
     be8:	0030      	movs	r0, r6
     bea:	0021      	movs	r1, r4
     bec:	f7ff feb8 	bl	960 <gpiote_find_channel>
     bf0:	68ee      	ldr	r6, [r5, #12]

		if (i < 0) {
     bf2:	2800      	cmp	r0, #0
     bf4:	da03      	bge.n	bfe <gpio_nrf5_config+0xca>
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
     bf6:	43f0      	mvns	r0, r6
     bf8:	f7ff fc94 	bl	524 <__ffssi2>
     bfc:	3801      	subs	r0, #1
		}

		data->gpiote_chan_mask |= BIT(i);
     bfe:	2201      	movs	r2, #1
     c00:	0013      	movs	r3, r2
     c02:	4083      	lsls	r3, r0
     c04:	431e      	orrs	r6, r3

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     c06:	23f8      	movs	r3, #248	; 0xf8
     c08:	0224      	lsls	r4, r4, #8
     c0a:	015b      	lsls	r3, r3, #5
     c0c:	401c      	ands	r4, r3

		gpiote->CONFIG[i] = config;
     c0e:	3045      	adds	r0, #69	; 0x45

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     c10:	4314      	orrs	r4, r2

		gpiote->CONFIG[i] = config;
     c12:	30ff      	adds	r0, #255	; 0xff
     c14:	9b03      	ldr	r3, [sp, #12]
     c16:	0080      	lsls	r0, r0, #2

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     c18:	4327      	orrs	r7, r4
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
     c1a:	60ee      	str	r6, [r5, #12]

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);

		gpiote->CONFIG[i] = config;
     c1c:	50c7      	str	r7, [r0, r3]
	}


	return 0;
     c1e:	2000      	movs	r0, #0
     c20:	e001      	b.n	c26 <gpio_nrf5_config+0xf2>
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
				GPIOTE_CHAN_COUNT) {
			return -EIO;
     c22:	2005      	movs	r0, #5
     c24:	4240      	negs	r0, r0
		gpiote->CONFIG[i] = config;
	}


	return 0;
}
     c26:	b005      	add	sp, #20
     c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	fffffe00 	.word	0xfffffe00
     c30:	0000050c 	.word	0x0000050c
     c34:	00009dc8 	.word	0x00009dc8

00000c38 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
     c38:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
     c3a:	f3ef 8110 	mrs	r1, PRIMASK
     c3e:	b672      	cpsid	i
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
     c40:	4a15      	ldr	r2, [pc, #84]	; (c98 <_m16src_stop+0x60>)
     c42:	7810      	ldrb	r0, [r2, #0]
     c44:	2800      	cmp	r0, #0
     c46:	d104      	bne.n	c52 <_m16src_stop+0x1a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
     c48:	2900      	cmp	r1, #0
     c4a:	d120      	bne.n	c8e <_m16src_stop+0x56>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
     c4c:	b662      	cpsie	i
		irq_unlock(imask);
		return -EALREADY;
     c4e:	3845      	subs	r0, #69	; 0x45
     c50:	e021      	b.n	c96 <_m16src_stop+0x5e>
	}

	if (--m16src_ref) {
     c52:	1e43      	subs	r3, r0, #1
     c54:	b2db      	uxtb	r3, r3
     c56:	7013      	strb	r3, [r2, #0]
     c58:	2b00      	cmp	r3, #0
     c5a:	d004      	beq.n	c66 <_m16src_stop+0x2e>
		irq_unlock(imask);
		return 0;
     c5c:	2000      	movs	r0, #0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
     c5e:	4281      	cmp	r1, r0
     c60:	d119      	bne.n	c96 <_m16src_stop+0x5e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
     c62:	b662      	cpsie	i
     c64:	e017      	b.n	c96 <_m16src_stop+0x5e>
	}

	if (m16src_grd) {
     c66:	4b0d      	ldr	r3, [pc, #52]	; (c9c <_m16src_stop+0x64>)
     c68:	781c      	ldrb	r4, [r3, #0]
     c6a:	2c00      	cmp	r4, #0
     c6c:	d004      	beq.n	c78 <_m16src_stop+0x40>
		m16src_ref++;
     c6e:	7010      	strb	r0, [r2, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
     c70:	2900      	cmp	r1, #0
     c72:	d10e      	bne.n	c92 <_m16src_stop+0x5a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
     c74:	b662      	cpsie	i
     c76:	e00c      	b.n	c92 <_m16src_stop+0x5a>
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
     c78:	2201      	movs	r2, #1
     c7a:	701a      	strb	r2, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
     c7c:	2900      	cmp	r1, #0
     c7e:	d100      	bne.n	c82 <_m16src_stop+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
     c80:	b662      	cpsie	i

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
     c82:	2180      	movs	r1, #128	; 0x80

	/* release resource guard */
	m16src_grd = 0;
     c84:	2000      	movs	r0, #0

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
     c86:	05c9      	lsls	r1, r1, #23
     c88:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
     c8a:	7018      	strb	r0, [r3, #0]

	return 0;
     c8c:	e003      	b.n	c96 <_m16src_stop+0x5e>
	 */
	imask = irq_lock();

	if (!m16src_ref) {
		irq_unlock(imask);
		return -EALREADY;
     c8e:	2045      	movs	r0, #69	; 0x45
     c90:	e000      	b.n	c94 <_m16src_stop+0x5c>
	}

	if (m16src_grd) {
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
     c92:	200b      	movs	r0, #11
     c94:	4240      	negs	r0, r0

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
     c96:	bd10      	pop	{r4, pc}
     c98:	20000330 	.word	0x20000330
     c9c:	20000331 	.word	0x20000331

00000ca0 <_clock_control_init>:
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
     ca0:	2200      	movs	r2, #0
		}
	}
}

static int _clock_control_init(struct device *dev)
{
     ca2:	b510      	push	{r4, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
     ca4:	0010      	movs	r0, r2
     ca6:	2101      	movs	r1, #1
     ca8:	f007 fecc 	bl	8a44 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
     cac:	2000      	movs	r0, #0
     cae:	f007 fea9 	bl	8a04 <_arch_irq_enable>

	return 0;
}
     cb2:	2000      	movs	r0, #0
     cb4:	bd10      	pop	{r4, pc}
	...

00000cb8 <_m16src_start>:

static u8_t m16src_ref;
static u8_t m16src_grd;

static int _m16src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     cb8:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
     cba:	f3ef 8310 	mrs	r3, PRIMASK
     cbe:	b672      	cpsid	i

	/* Test for reference increment from zero and resource guard not taken.
	 */
	imask = irq_lock();

	if (m16src_ref++) {
     cc0:	4a29      	ldr	r2, [pc, #164]	; (d68 <_m16src_start+0xb0>)
     cc2:	7810      	ldrb	r0, [r2, #0]
     cc4:	1c44      	adds	r4, r0, #1
     cc6:	7014      	strb	r4, [r2, #0]
     cc8:	2800      	cmp	r0, #0
     cca:	d003      	beq.n	cd4 <_m16src_start+0x1c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
     ccc:	2b00      	cmp	r3, #0
     cce:	d13f      	bne.n	d50 <_m16src_start+0x98>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
     cd0:	b662      	cpsie	i
     cd2:	e03d      	b.n	d50 <_m16src_start+0x98>
		irq_unlock(imask);
		goto hf_already_started;
	}

	if (m16src_grd) {
     cd4:	4c25      	ldr	r4, [pc, #148]	; (d6c <_m16src_start+0xb4>)
     cd6:	7825      	ldrb	r5, [r4, #0]
     cd8:	2d00      	cmp	r5, #0
     cda:	d004      	beq.n	ce6 <_m16src_start+0x2e>
		m16src_ref--;
     cdc:	7010      	strb	r0, [r2, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
     cde:	2b00      	cmp	r3, #0
     ce0:	d13f      	bne.n	d62 <_m16src_start+0xaa>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
     ce2:	b662      	cpsie	i
     ce4:	e03d      	b.n	d62 <_m16src_start+0xaa>
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
     ce6:	2201      	movs	r2, #1
     ce8:	7022      	strb	r2, [r4, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
     cea:	2b00      	cmp	r3, #0
     cec:	d100      	bne.n	cf0 <_m16src_start+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
     cee:	b662      	cpsie	i
     cf0:	2580      	movs	r5, #128	; 0x80
     cf2:	4e1f      	ldr	r6, [pc, #124]	; (d70 <_m16src_start+0xb8>)
     cf4:	05ed      	lsls	r5, r5, #23

	irq_unlock(imask);

	/* If blocking then spin-wait in CPU sleep until 16MHz clock settles. */
	blocking = POINTER_TO_UINT(sub_system);
	if (blocking) {
     cf6:	2900      	cmp	r1, #0
     cf8:	d025      	beq.n	d46 <_m16src_start+0x8e>
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);
     cfa:	2000      	movs	r0, #0
     cfc:	f007 fe8c 	bl	8a18 <_arch_irq_disable>

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     d00:	2300      	movs	r3, #0

		intenset = NRF_CLOCK->INTENSET;
     d02:	22c1      	movs	r2, #193	; 0xc1
	if (blocking) {
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     d04:	6073      	str	r3, [r6, #4]

		intenset = NRF_CLOCK->INTENSET;
     d06:	0092      	lsls	r2, r2, #2
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     d08:	3301      	adds	r3, #1

		irq_disable(POWER_CLOCK_IRQn);

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		intenset = NRF_CLOCK->INTENSET;
     d0a:	58a9      	ldr	r1, [r5, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     d0c:	50ab      	str	r3, [r5, r2]

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
     d0e:	602b      	str	r3, [r5, #0]

		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
     d10:	6873      	ldr	r3, [r6, #4]
     d12:	2b00      	cmp	r3, #0
     d14:	d103      	bne.n	d1e <_m16src_start+0x66>
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     d16:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
     d18:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     d1a:	bf20      	wfe
     d1c:	e7f8      	b.n	d10 <_m16src_start+0x58>
			__WFE();
			__SEV();
			__WFE();
		}

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     d1e:	2200      	movs	r2, #0
     d20:	4b13      	ldr	r3, [pc, #76]	; (d70 <_m16src_start+0xb8>)
     d22:	605a      	str	r2, [r3, #4]

		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
     d24:	2301      	movs	r3, #1
     d26:	4219      	tst	r1, r3
     d28:	d104      	bne.n	d34 <_m16src_start+0x7c>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
     d2a:	22c2      	movs	r2, #194	; 0xc2
     d2c:	2180      	movs	r1, #128	; 0x80
     d2e:	0092      	lsls	r2, r2, #2
     d30:	05c9      	lsls	r1, r1, #23
     d32:	508b      	str	r3, [r1, r2]
     d34:	23c0      	movs	r3, #192	; 0xc0
     d36:	2101      	movs	r1, #1
     d38:	4a0e      	ldr	r2, [pc, #56]	; (d74 <_m16src_start+0xbc>)
     d3a:	005b      	lsls	r3, r3, #1
     d3c:	50d1      	str	r1, [r2, r3]
		}

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
     d3e:	2000      	movs	r0, #0
     d40:	f007 fe60 	bl	8a04 <_arch_irq_enable>
     d44:	e002      	b.n	d4c <_m16src_start+0x94>
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
     d46:	2301      	movs	r3, #1

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     d48:	6071      	str	r1, [r6, #4]

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
     d4a:	602b      	str	r3, [r5, #0]
	}

	/* release resource guard */
	m16src_grd = 0;
     d4c:	2300      	movs	r3, #0
     d4e:	7023      	strb	r3, [r4, #0]
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
     d50:	2280      	movs	r2, #128	; 0x80
     d52:	4b09      	ldr	r3, [pc, #36]	; (d78 <_m16src_start+0xc0>)
     d54:	05d2      	lsls	r2, r2, #23
     d56:	58d3      	ldr	r3, [r2, r3]
		return 0;
     d58:	2000      	movs	r0, #0
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
     d5a:	03db      	lsls	r3, r3, #15
     d5c:	d403      	bmi.n	d66 <_m16src_start+0xae>
		return 0;
	} else {
		return -EINPROGRESS;
     d5e:	3844      	subs	r0, #68	; 0x44
     d60:	e001      	b.n	d66 <_m16src_start+0xae>
	}

	if (m16src_grd) {
		m16src_ref--;
		irq_unlock(imask);
		return -EAGAIN;
     d62:	200b      	movs	r0, #11
     d64:	4240      	negs	r0, r0
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
     d66:	bd70      	pop	{r4, r5, r6, pc}
     d68:	20000330 	.word	0x20000330
     d6c:	20000331 	.word	0x20000331
     d70:	400000fc 	.word	0x400000fc
     d74:	e000e100 	.word	0xe000e100
     d78:	0000040c 	.word	0x0000040c

00000d7c <_power_clock_isr>:

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
     d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t pof, hf_intenset, hf_stat, hf, lf, done, ctto;
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
     d7e:	4c24      	ldr	r4, [pc, #144]	; (e10 <_power_clock_isr+0x94>)
     d80:	2380      	movs	r3, #128	; 0x80
     d82:	68e2      	ldr	r2, [r4, #12]
     d84:	05db      	lsls	r3, r3, #23
     d86:	4694      	mov	ip, r2

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
     d88:	22c1      	movs	r2, #193	; 0xc1
     d8a:	0092      	lsls	r2, r2, #2
     d8c:	5899      	ldr	r1, [r3, r2]
     d8e:	2201      	movs	r2, #1
     d90:	400a      	ands	r2, r1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
     d92:	4920      	ldr	r1, [pc, #128]	; (e14 <_power_clock_isr+0x98>)

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
     d94:	0005      	movs	r5, r0

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
     d96:	585e      	ldr	r6, [r3, r1]
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
     d98:	9200      	str	r2, [sp, #0]
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
     d9a:	6867      	ldr	r7, [r4, #4]

	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
     d9c:	68a0      	ldr	r0, [r4, #8]

	done = (NRF_CLOCK->EVENTS_DONE != 0);
     d9e:	6921      	ldr	r1, [r4, #16]
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
     da0:	6962      	ldr	r2, [r4, #20]
     da2:	9201      	str	r2, [sp, #4]

	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);

	if (pof) {
     da4:	4662      	mov	r2, ip
     da6:	2a00      	cmp	r2, #0
     da8:	d001      	beq.n	dae <_power_clock_isr+0x32>
		NRF_POWER->EVENTS_POFWARN = 0;
     daa:	2200      	movs	r2, #0
     dac:	60e2      	str	r2, [r4, #12]
	}

	if (hf) {
     dae:	2f00      	cmp	r7, #0
     db0:	d001      	beq.n	db6 <_power_clock_isr+0x3a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     db2:	2700      	movs	r7, #0
     db4:	6067      	str	r7, [r4, #4]
	}

	if (hf_intenset && hf_stat) {
     db6:	9a00      	ldr	r2, [sp, #0]
     db8:	2a00      	cmp	r2, #0
     dba:	d006      	beq.n	dca <_power_clock_isr+0x4e>
     dbc:	03f2      	lsls	r2, r6, #15
     dbe:	d504      	bpl.n	dca <_power_clock_isr+0x4e>
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
     dc0:	26c2      	movs	r6, #194	; 0xc2
     dc2:	2201      	movs	r2, #1
     dc4:	00b6      	lsls	r6, r6, #2
     dc6:	519a      	str	r2, [r3, r6]

		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
     dc8:	611a      	str	r2, [r3, #16]
	}

	if (lf) {
     dca:	2800      	cmp	r0, #0
     dcc:	d001      	beq.n	dd2 <_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     dce:	2300      	movs	r3, #0
     dd0:	60a3      	str	r3, [r4, #8]

		__ASSERT_NO_MSG(0);
	}

	if (done) {
     dd2:	2900      	cmp	r1, #0
     dd4:	d008      	beq.n	de8 <_power_clock_isr+0x6c>
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
     dd6:	2100      	movs	r1, #0

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
     dd8:	0028      	movs	r0, r5
	}

	if (done) {
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
     dda:	6121      	str	r1, [r4, #16]

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
     ddc:	f7ff ff2c 	bl	c38 <_m16src_stop>
		__ASSERT_NO_MSG(!err);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
     de0:	2380      	movs	r3, #128	; 0x80
     de2:	2201      	movs	r2, #1
     de4:	05db      	lsls	r3, r3, #23
     de6:	615a      	str	r2, [r3, #20]
	}

	if (ctto) {
     de8:	9b01      	ldr	r3, [sp, #4]
     dea:	2b00      	cmp	r3, #0
     dec:	d00e      	beq.n	e0c <_power_clock_isr+0x90>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
     dee:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     df0:	23c1      	movs	r3, #193	; 0xc1
     df2:	2280      	movs	r2, #128	; 0x80
	}

	if (ctto) {
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
     df4:	6161      	str	r1, [r4, #20]

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     df6:	2401      	movs	r4, #1
     df8:	009b      	lsls	r3, r3, #2
     dfa:	05d2      	lsls	r2, r2, #23
     dfc:	50d4      	str	r4, [r2, r3]

		err = _m16src_start(dev, false);
     dfe:	0028      	movs	r0, r5
     e00:	f7ff ff5a 	bl	cb8 <_m16src_start>
		if (!err) {
     e04:	2800      	cmp	r0, #0
     e06:	d101      	bne.n	e0c <_power_clock_isr+0x90>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     e08:	4b03      	ldr	r3, [pc, #12]	; (e18 <_power_clock_isr+0x9c>)
     e0a:	605c      	str	r4, [r3, #4]
			NVIC_SetPendingIRQ(POWER_CLOCK_IRQn);
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}
}
     e0c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	400000fc 	.word	0x400000fc
     e14:	0000040c 	.word	0x0000040c
     e18:	e000e1fc 	.word	0xe000e1fc

00000e1c <_k32src_start>:

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
     e1e:	2580      	movs	r5, #128	; 0x80
     e20:	2383      	movs	r3, #131	; 0x83
     e22:	05ed      	lsls	r5, r5, #23
     e24:	00db      	lsls	r3, r3, #3
     e26:	58ec      	ldr	r4, [r5, r3]
     e28:	2380      	movs	r3, #128	; 0x80

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     e2a:	0007      	movs	r7, r0
	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
		return 0;
     e2c:	2000      	movs	r0, #0

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
     e2e:	025b      	lsls	r3, r3, #9

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     e30:	000e      	movs	r6, r1

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
     e32:	401c      	ands	r4, r3
     e34:	4284      	cmp	r4, r0
     e36:	d14d      	bne.n	ed4 <_k32src_start+0xb8>
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);
     e38:	0020      	movs	r0, r4
     e3a:	f007 fded 	bl	8a18 <_arch_irq_disable>

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;

	intenset = NRF_CLOCK->INTENSET;
     e3e:	22c1      	movs	r2, #193	; 0xc1
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
     e40:	2002      	movs	r0, #2
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     e42:	4b25      	ldr	r3, [pc, #148]	; (ed8 <_k32src_start+0xbc>)

	intenset = NRF_CLOCK->INTENSET;
     e44:	0092      	lsls	r2, r2, #2
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     e46:	609c      	str	r4, [r3, #8]

	intenset = NRF_CLOCK->INTENSET;
     e48:	58a9      	ldr	r1, [r5, r2]
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
     e4a:	50a8      	str	r0, [r5, r2]

	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
     e4c:	22a3      	movs	r2, #163	; 0xa3
     e4e:	00d2      	lsls	r2, r2, #3
     e50:	50ae      	str	r6, [r5, r2]

	/* Start and spin-wait until clock settles */
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
     e52:	2201      	movs	r2, #1
     e54:	001c      	movs	r4, r3
     e56:	60aa      	str	r2, [r5, #8]

	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
     e58:	68a3      	ldr	r3, [r4, #8]
     e5a:	2b00      	cmp	r3, #0
     e5c:	d103      	bne.n	e66 <_k32src_start+0x4a>
     e5e:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
     e60:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     e62:	bf20      	wfe
     e64:	e7f8      	b.n	e58 <_k32src_start+0x3c>
		__WFE();
		__SEV();
		__WFE();
	}

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     e66:	2200      	movs	r2, #0
     e68:	4b1b      	ldr	r3, [pc, #108]	; (ed8 <_k32src_start+0xbc>)
     e6a:	609a      	str	r2, [r3, #8]

	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
     e6c:	2302      	movs	r3, #2
     e6e:	4219      	tst	r1, r3
     e70:	d104      	bne.n	e7c <_k32src_start+0x60>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
     e72:	22c2      	movs	r2, #194	; 0xc2
     e74:	2180      	movs	r1, #128	; 0x80
     e76:	0092      	lsls	r2, r2, #2
     e78:	05c9      	lsls	r1, r1, #23
     e7a:	508b      	str	r3, [r1, r2]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     e7c:	23c0      	movs	r3, #192	; 0xc0
     e7e:	2501      	movs	r5, #1
     e80:	4a16      	ldr	r2, [pc, #88]	; (edc <_k32src_start+0xc0>)
     e82:	005b      	lsls	r3, r3, #1
     e84:	50d5      	str	r5, [r2, r3]
	}

	NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

	irq_enable(POWER_CLOCK_IRQn);
     e86:	2000      	movs	r0, #0
     e88:	f007 fdbc 	bl	8a04 <_arch_irq_enable>

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
     e8c:	2380      	movs	r3, #128	; 0x80
     e8e:	22c2      	movs	r2, #194	; 0xc2
     e90:	2018      	movs	r0, #24
     e92:	0092      	lsls	r2, r2, #2
     e94:	05db      	lsls	r3, r3, #23
     e96:	5098      	str	r0, [r3, r2]
	NRF_CLOCK->EVENTS_DONE = 0;
	NRF_CLOCK->EVENTS_CTTO = 0;

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
     e98:	2103      	movs	r1, #3

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
	NRF_CLOCK->EVENTS_DONE = 0;
     e9a:	2200      	movs	r2, #0
	NRF_CLOCK->EVENTS_CTTO = 0;

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
     e9c:	4031      	ands	r1, r6

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
	NRF_CLOCK->EVENTS_DONE = 0;
     e9e:	6122      	str	r2, [r4, #16]
	NRF_CLOCK->EVENTS_CTTO = 0;
     ea0:	6162      	str	r2, [r4, #20]

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
     ea2:	4291      	cmp	r1, r2
     ea4:	d10e      	bne.n	ec4 <_k32src_start+0xa8>
		int err;

		/* Set the Calibration Timer Initial Value */
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
     ea6:	22a7      	movs	r2, #167	; 0xa7
     ea8:	2410      	movs	r4, #16
     eaa:	00d2      	lsls	r2, r2, #3
     eac:	509c      	str	r4, [r3, r2]

		/* Enable DONE and CTTO IRQs */
		NRF_CLOCK->INTENSET =
     eae:	22c1      	movs	r2, #193	; 0xc1
     eb0:	0092      	lsls	r2, r2, #2
     eb2:	5098      	str	r0, [r3, r2]
		/* Start HF clock, if already started then explicitly
		 * assert IRQ.
		 * NOTE: The INTENSET is used as state flag to start
		 * calibration in ISR.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     eb4:	509d      	str	r5, [r3, r2]

		err = _m16src_start(dev, false);
     eb6:	0038      	movs	r0, r7
     eb8:	f7ff fefe 	bl	cb8 <_m16src_start>
		if (!err) {
     ebc:	2800      	cmp	r0, #0
     ebe:	d101      	bne.n	ec4 <_k32src_start+0xa8>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     ec0:	4b07      	ldr	r3, [pc, #28]	; (ee0 <_k32src_start+0xc4>)
     ec2:	605d      	str	r5, [r3, #4]
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
     ec4:	2383      	movs	r3, #131	; 0x83
     ec6:	2280      	movs	r2, #128	; 0x80
     ec8:	2001      	movs	r0, #1
     eca:	00db      	lsls	r3, r3, #3
     ecc:	05d2      	lsls	r2, r2, #23
     ece:	58d3      	ldr	r3, [r2, r3]
     ed0:	0c1b      	lsrs	r3, r3, #16
     ed2:	4398      	bics	r0, r3
}
     ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	400000fc 	.word	0x400000fc
     edc:	e000e100 	.word	0xe000e100
     ee0:	e000e1fc 	.word	0xe000e1fc

00000ee4 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
     ee4:	0003      	movs	r3, r0
     ee6:	780a      	ldrb	r2, [r1, #0]
		*d = *s;
     ee8:	701a      	strb	r2, [r3, #0]

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
     eea:	2a00      	cmp	r2, #0
     eec:	d002      	beq.n	ef4 <strcpy+0x10>
		*d = *s;
		d++;
     eee:	3301      	adds	r3, #1
		s++;
     ef0:	3101      	adds	r1, #1
     ef2:	e7f8      	b.n	ee6 <strcpy+0x2>
	}

	*d = '\0';

	return dest;
}
     ef4:	4770      	bx	lr

00000ef6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
     ef6:	7803      	ldrb	r3, [r0, #0]
     ef8:	780a      	ldrb	r2, [r1, #0]
     efa:	4293      	cmp	r3, r2
     efc:	d105      	bne.n	f0a <strcmp+0x14>
     efe:	2b00      	cmp	r3, #0
     f00:	d002      	beq.n	f08 <strcmp+0x12>
		s1++;
     f02:	3001      	adds	r0, #1
		s2++;
     f04:	3101      	adds	r1, #1
     f06:	e7f6      	b.n	ef6 <strcmp>
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
     f08:	001a      	movs	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
     f0a:	1a98      	subs	r0, r3, r2
}
     f0c:	4770      	bx	lr

00000f0e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     f0e:	0003      	movs	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
     f10:	2000      	movs	r0, #0
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     f12:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     f14:	4282      	cmp	r2, r0
     f16:	d00e      	beq.n	f36 <memcmp+0x28>
     f18:	3a01      	subs	r2, #1
     f1a:	189a      	adds	r2, r3, r2
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     f1c:	4293      	cmp	r3, r2
     f1e:	d103      	bne.n	f28 <memcmp+0x1a>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     f20:	781b      	ldrb	r3, [r3, #0]
     f22:	7808      	ldrb	r0, [r1, #0]
     f24:	1a18      	subs	r0, r3, r0
     f26:	e006      	b.n	f36 <memcmp+0x28>
	const char *c2 = m2;

	if (!n)
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     f28:	781c      	ldrb	r4, [r3, #0]
     f2a:	7808      	ldrb	r0, [r1, #0]
     f2c:	4284      	cmp	r4, r0
     f2e:	d1f7      	bne.n	f20 <memcmp+0x12>
		c1++;
     f30:	3301      	adds	r3, #1
		c2++;
     f32:	3101      	adds	r1, #1
     f34:	e7f2      	b.n	f1c <memcmp+0xe>
	}

	return *c1 - *c2;
}
     f36:	bd10      	pop	{r4, pc}

00000f38 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
     f38:	b530      	push	{r4, r5, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     f3a:	0004      	movs	r4, r0
     f3c:	2303      	movs	r3, #3
     f3e:	404c      	eors	r4, r1
     f40:	421c      	tst	r4, r3
     f42:	d002      	beq.n	f4a <memcpy+0x12>

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
     f44:	0004      	movs	r4, r0
     f46:	2300      	movs	r3, #0
     f48:	e019      	b.n	f7e <memcpy+0x46>
     f4a:	0004      	movs	r4, r0

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
     f4c:	001d      	movs	r5, r3
     f4e:	0023      	movs	r3, r4
     f50:	402b      	ands	r3, r5
     f52:	d007      	beq.n	f64 <memcpy+0x2c>
			if (n == 0) {
     f54:	2a00      	cmp	r2, #0
     f56:	d018      	beq.n	f8a <memcpy+0x52>
				return d;
			}
			*(d_byte++) = *(s_byte++);
     f58:	780b      	ldrb	r3, [r1, #0]
			n--;
     f5a:	3a01      	subs	r2, #1

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
				return d;
			}
			*(d_byte++) = *(s_byte++);
     f5c:	7023      	strb	r3, [r4, #0]
     f5e:	3101      	adds	r1, #1
     f60:	3401      	adds	r4, #1
     f62:	e7f4      	b.n	f4e <memcpy+0x16>
		/* do word-sized copying as long as possible */

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
     f64:	1ad5      	subs	r5, r2, r3
     f66:	2d03      	cmp	r5, #3
     f68:	d903      	bls.n	f72 <memcpy+0x3a>
			*(d_word++) = *(s_word++);
     f6a:	58cd      	ldr	r5, [r1, r3]
     f6c:	50e5      	str	r5, [r4, r3]
     f6e:	3304      	adds	r3, #4
     f70:	e7f8      	b.n	f64 <memcpy+0x2c>
     f72:	0893      	lsrs	r3, r2, #2
     f74:	009b      	lsls	r3, r3, #2
     f76:	1ad2      	subs	r2, r2, r3
     f78:	18e4      	adds	r4, r4, r3
     f7a:	18c9      	adds	r1, r1, r3
     f7c:	e7e3      	b.n	f46 <memcpy+0xe>
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     f7e:	429a      	cmp	r2, r3
     f80:	d003      	beq.n	f8a <memcpy+0x52>
		*(d_byte++) = *(s_byte++);
     f82:	5ccd      	ldrb	r5, [r1, r3]
     f84:	54e5      	strb	r5, [r4, r3]
     f86:	3301      	adds	r3, #1
     f88:	e7f9      	b.n	f7e <memcpy+0x46>
		n--;
	}

	return d;
}
     f8a:	bd30      	pop	{r4, r5, pc}

00000f8c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f8e:	0003      	movs	r3, r0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
     f90:	2603      	movs	r6, #3
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     f92:	b2cc      	uxtb	r4, r1
     f94:	001d      	movs	r5, r3

	while (((unsigned int)d_byte) & 0x3) {
     f96:	4233      	tst	r3, r6
     f98:	d005      	beq.n	fa6 <memset+0x1a>
		if (n == 0) {
     f9a:	2a00      	cmp	r2, #0
     f9c:	d01a      	beq.n	fd4 <memset+0x48>
			return buf;
		}
		*(d_byte++) = c_byte;
     f9e:	701c      	strb	r4, [r3, #0]
		n--;
     fa0:	3a01      	subs	r2, #1
     fa2:	3301      	adds	r3, #1
     fa4:	e7f6      	b.n	f94 <memset+0x8>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     fa6:	27ff      	movs	r7, #255	; 0xff
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
     fa8:	b2ce      	uxtb	r6, r1

	c_word |= c_word << 8;
     faa:	023f      	lsls	r7, r7, #8
     fac:	0209      	lsls	r1, r1, #8
     fae:	4039      	ands	r1, r7
     fb0:	4331      	orrs	r1, r6
	c_word |= c_word << 16;
     fb2:	040e      	lsls	r6, r1, #16
     fb4:	4331      	orrs	r1, r6

	while (n >= sizeof(unsigned int)) {
     fb6:	0016      	movs	r6, r2
     fb8:	2e03      	cmp	r6, #3
     fba:	d902      	bls.n	fc2 <memset+0x36>
		*(d_word++) = c_word;
     fbc:	c302      	stmia	r3!, {r1}
		n -= sizeof(unsigned int);
     fbe:	3e04      	subs	r6, #4
     fc0:	e7fa      	b.n	fb8 <memset+0x2c>
     fc2:	0893      	lsrs	r3, r2, #2
     fc4:	009b      	lsls	r3, r3, #2
     fc6:	18eb      	adds	r3, r5, r3
     fc8:	18aa      	adds	r2, r5, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     fca:	4293      	cmp	r3, r2
     fcc:	d002      	beq.n	fd4 <memset+0x48>
		*(d_byte++) = c_byte;
     fce:	701c      	strb	r4, [r3, #0]
     fd0:	3301      	adds	r3, #1
     fd2:	e7fa      	b.n	fca <memset+0x3e>
		n--;
	}

	return buf;
}
     fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000fd6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_LL_SW, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_IEEE802154_DRIVER_LEVEL, 0);
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE, 448);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);

GEN_ABS_SYM_END
     fd6:	4770      	bx	lr

00000fd8 <net_buf_user_data>:
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
     fd8:	89c3      	ldrh	r3, [r0, #14]
     fda:	18c0      	adds	r0, r0, r3
     fdc:	2303      	movs	r3, #3
     fde:	3013      	adds	r0, #19
     fe0:	4398      	bics	r0, r3
}
     fe2:	4770      	bx	lr

00000fe4 <hci_cmd_done.isra.9>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
     fe4:	b570      	push	{r4, r5, r6, lr}
     fe6:	0005      	movs	r5, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
     fe8:	7988      	ldrb	r0, [r1, #6]

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
     fea:	000c      	movs	r4, r1
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
     fec:	f007 fb7c 	bl	86e8 <net_buf_pool_get>
     ff0:	4b08      	ldr	r3, [pc, #32]	; (1014 <hci_cmd_done.isra.9+0x30>)
     ff2:	4298      	cmp	r0, r3
     ff4:	d10c      	bne.n	1010 <hci_cmd_done.isra.9+0x2c>
			buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
     ff6:	0020      	movs	r0, r4
     ff8:	f7ff ffee 	bl	fd8 <net_buf_user_data>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
     ffc:	6843      	ldr	r3, [r0, #4]
     ffe:	2b00      	cmp	r3, #0
    1000:	d006      	beq.n	1010 <hci_cmd_done.isra.9+0x2c>
		cmd(buf)->status = status;
    1002:	7045      	strb	r5, [r0, #1]
		k_sem_give(cmd(buf)->sync);
    1004:	0020      	movs	r0, r4
    1006:	f7ff ffe7 	bl	fd8 <net_buf_user_data>
    100a:	6840      	ldr	r0, [r0, #4]
    100c:	f008 fbd0 	bl	97b0 <k_sem_give>
	}
}
    1010:	bd70      	pop	{r4, r5, r6, pc}
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	200002d0 	.word	0x200002d0

00001018 <bt_hci_cmd_create>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    1018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    101a:	000e      	movs	r6, r1
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    101c:	2101      	movs	r1, #1
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    101e:	0005      	movs	r5, r0
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1020:	4249      	negs	r1, r1
    1022:	480f      	ldr	r0, [pc, #60]	; (1060 <bt_hci_cmd_create+0x48>)
    1024:	f007 fb68 	bl	86f8 <net_buf_alloc>
    1028:	0004      	movs	r4, r0
	__ASSERT_NO_MSG(buf);

	BT_DBG("buf %p", buf);

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    102a:	2100      	movs	r1, #0
    102c:	f007 fbac 	bl	8788 <net_buf_reserve>

	cmd(buf)->type = BT_BUF_CMD;
    1030:	0020      	movs	r0, r4
    1032:	f7ff ffd1 	bl	fd8 <net_buf_user_data>
    1036:	2700      	movs	r7, #0
    1038:	7007      	strb	r7, [r0, #0]
	cmd(buf)->opcode = opcode;
    103a:	0020      	movs	r0, r4
    103c:	f7ff ffcc 	bl	fd8 <net_buf_user_data>
    1040:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    1042:	0020      	movs	r0, r4
    1044:	f7ff ffc8 	bl	fd8 <net_buf_user_data>
    1048:	6047      	str	r7, [r0, #4]

	hdr = net_buf_add(buf, sizeof(*hdr));
    104a:	0020      	movs	r0, r4
    104c:	2103      	movs	r1, #3
    104e:	3008      	adds	r0, #8
    1050:	f007 fbd0 	bl	87f4 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    1054:	7005      	strb	r5, [r0, #0]
    1056:	0a2d      	lsrs	r5, r5, #8
    1058:	7045      	strb	r5, [r0, #1]
	hdr->param_len = param_len;
    105a:	7086      	strb	r6, [r0, #2]

	return buf;
}
    105c:	0020      	movs	r0, r4
    105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1060:	200002d0 	.word	0x200002d0

00001064 <bt_hci_cmd_send_sync>:
	return 0;
}

int bt_hci_cmd_send_sync(u16_t opcode, struct net_buf *buf,
			 struct net_buf **rsp)
{
    1064:	b570      	push	{r4, r5, r6, lr}
    1066:	000c      	movs	r4, r1
    1068:	b086      	sub	sp, #24
    106a:	0015      	movs	r5, r2
	struct k_sem sync_sem;
	int err;

	if (!buf) {
    106c:	2900      	cmp	r1, #0
    106e:	d103      	bne.n	1078 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    1070:	f7ff ffd2 	bl	1018 <bt_hci_cmd_create>
    1074:	1e04      	subs	r4, r0, #0
		if (!buf) {
    1076:	d029      	beq.n	10cc <bt_hci_cmd_send_sync+0x68>
		}
	}

	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);

	k_sem_init(&sync_sem, 0, 1);
    1078:	ae01      	add	r6, sp, #4
    107a:	2201      	movs	r2, #1
    107c:	2100      	movs	r1, #0
    107e:	0030      	movs	r0, r6
    1080:	f008 fb8e 	bl	97a0 <k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1084:	0020      	movs	r0, r4
    1086:	f7ff ffa7 	bl	fd8 <net_buf_user_data>
    108a:	6046      	str	r6, [r0, #4]

	/* Make sure the buffer stays around until the command completes */
	net_buf_ref(buf);
    108c:	0020      	movs	r0, r4
    108e:	f007 fbad 	bl	87ec <net_buf_ref>

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1092:	4810      	ldr	r0, [pc, #64]	; (10d4 <bt_hci_cmd_send_sync+0x70>)
    1094:	0021      	movs	r1, r4
    1096:	30ac      	adds	r0, #172	; 0xac
    1098:	f007 fb7b 	bl	8792 <net_buf_put>

	err = k_sem_take(&sync_sem, HCI_CMD_TIMEOUT);
    109c:	490e      	ldr	r1, [pc, #56]	; (10d8 <bt_hci_cmd_send_sync+0x74>)
    109e:	0030      	movs	r0, r6
    10a0:	f008 fbc2 	bl	9828 <k_sem_take>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
    10a4:	0020      	movs	r0, r4
    10a6:	f7ff ff97 	bl	fd8 <net_buf_user_data>
    10aa:	7840      	ldrb	r0, [r0, #1]
    10ac:	2800      	cmp	r0, #0
    10ae:	d004      	beq.n	10ba <bt_hci_cmd_send_sync+0x56>
		err = -EIO;
		net_buf_unref(buf);
    10b0:	0020      	movs	r0, r4
    10b2:	f007 fb7d 	bl	87b0 <net_buf_unref>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
		err = -EIO;
    10b6:	2005      	movs	r0, #5
    10b8:	e009      	b.n	10ce <bt_hci_cmd_send_sync+0x6a>
		net_buf_unref(buf);
	} else {
		err = 0;
		if (rsp) {
    10ba:	2d00      	cmp	r5, #0
    10bc:	d001      	beq.n	10c2 <bt_hci_cmd_send_sync+0x5e>
			*rsp = buf;
    10be:	602c      	str	r4, [r5, #0]
    10c0:	e006      	b.n	10d0 <bt_hci_cmd_send_sync+0x6c>
		} else {
			net_buf_unref(buf);
    10c2:	0020      	movs	r0, r4
    10c4:	f007 fb74 	bl	87b0 <net_buf_unref>

	if (cmd(buf)->status) {
		err = -EIO;
		net_buf_unref(buf);
	} else {
		err = 0;
    10c8:	0028      	movs	r0, r5
    10ca:	e001      	b.n	10d0 <bt_hci_cmd_send_sync+0x6c>
	int err;

	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    10cc:	2037      	movs	r0, #55	; 0x37
    10ce:	4240      	negs	r0, r0
			net_buf_unref(buf);
		}
	}

	return err;
}
    10d0:	b006      	add	sp, #24
    10d2:	bd70      	pop	{r4, r5, r6, pc}
    10d4:	20000000 	.word	0x20000000
    10d8:	00002710 	.word	0x00002710

000010dc <set_random_address>:

	return 0;
}

static int set_random_address(const bt_addr_t *addr)
{
    10dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    10de:	4e14      	ldr	r6, [pc, #80]	; (1130 <set_random_address+0x54>)
    10e0:	2206      	movs	r2, #6
    10e2:	0037      	movs	r7, r6
    10e4:	3708      	adds	r7, #8
    10e6:	0039      	movs	r1, r7
    10e8:	0005      	movs	r5, r0
    10ea:	f7ff ff10 	bl	f0e <memcmp>
    10ee:	1e04      	subs	r4, r0, #0
	int err;

	BT_DBG("%s", bt_addr_str(addr));

	/* Do nothing if we already have the right address */
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    10f0:	d01b      	beq.n	112a <set_random_address+0x4e>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    10f2:	2106      	movs	r1, #6
    10f4:	480f      	ldr	r0, [pc, #60]	; (1134 <set_random_address+0x58>)
    10f6:	f7ff ff8f 	bl	1018 <bt_hci_cmd_create>
    10fa:	1e04      	subs	r4, r0, #0
	if (!buf) {
    10fc:	d013      	beq.n	1126 <set_random_address+0x4a>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, addr, sizeof(*addr));
    10fe:	2206      	movs	r2, #6
    1100:	0029      	movs	r1, r5
    1102:	3008      	adds	r0, #8
    1104:	f007 fb7d 	bl	8802 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    1108:	0021      	movs	r1, r4
    110a:	2200      	movs	r2, #0
    110c:	4809      	ldr	r0, [pc, #36]	; (1134 <set_random_address+0x58>)
    110e:	f7ff ffa9 	bl	1064 <bt_hci_cmd_send_sync>
    1112:	1e04      	subs	r4, r0, #0
	if (err) {
    1114:	d109      	bne.n	112a <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1116:	2206      	movs	r2, #6
    1118:	0029      	movs	r1, r5
    111a:	0038      	movs	r0, r7
    111c:	f7ff ff0c 	bl	f38 <memcpy>
		return err;
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    1120:	2301      	movs	r3, #1
    1122:	71f3      	strb	r3, [r6, #7]
    1124:	e001      	b.n	112a <set_random_address+0x4e>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
	if (!buf) {
		return -ENOBUFS;
    1126:	2437      	movs	r4, #55	; 0x37
    1128:	4264      	negs	r4, r4
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
	return 0;
}
    112a:	0020      	movs	r0, r4
    112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	20000000 	.word	0x20000000
    1134:	00002005 	.word	0x00002005

00001138 <bt_hci_stop_scanning>:

	return err;
}

static int bt_hci_stop_scanning(void)
{
    1138:	b573      	push	{r0, r1, r4, r5, r6, lr}
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    113a:	4d1c      	ldr	r5, [pc, #112]	; (11ac <bt_hci_stop_scanning+0x74>)
    113c:	356c      	adds	r5, #108	; 0x6c
    113e:	0028      	movs	r0, r5
    1140:	f007 fd87 	bl	8c52 <atomic_get>
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    1144:	0603      	lsls	r3, r0, #24
    1146:	d52b      	bpl.n	11a0 <bt_hci_stop_scanning+0x68>
		return -EALREADY;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    1148:	2102      	movs	r1, #2
    114a:	4819      	ldr	r0, [pc, #100]	; (11b0 <bt_hci_stop_scanning+0x78>)
    114c:	f7ff ff64 	bl	1018 <bt_hci_cmd_create>
    1150:	1e04      	subs	r4, r0, #0
				sizeof(*scan_enable));
	if (!buf) {
    1152:	d027      	beq.n	11a4 <bt_hci_stop_scanning+0x6c>
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    1154:	2102      	movs	r1, #2
    1156:	3008      	adds	r0, #8
    1158:	f007 fb4c 	bl	87f4 <net_buf_simple_add>
	memset(scan_enable, 0, sizeof(*scan_enable));
    115c:	2202      	movs	r2, #2
    115e:	2100      	movs	r1, #0
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    1160:	0006      	movs	r6, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    1162:	f7ff ff13 	bl	f8c <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1166:	2300      	movs	r3, #0
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    1168:	aa01      	add	r2, sp, #4
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
	memset(scan_enable, 0, sizeof(*scan_enable));
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    116a:	7073      	strb	r3, [r6, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    116c:	7033      	strb	r3, [r6, #0]

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    116e:	0021      	movs	r1, r4
    1170:	480f      	ldr	r0, [pc, #60]	; (11b0 <bt_hci_stop_scanning+0x78>)
    1172:	f7ff ff77 	bl	1064 <bt_hci_cmd_send_sync>
	if (err) {
    1176:	2800      	cmp	r0, #0
    1178:	d116      	bne.n	11a8 <bt_hci_stop_scanning+0x70>
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    117a:	9b01      	ldr	r3, [sp, #4]
    117c:	689b      	ldr	r3, [r3, #8]
    117e:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    1180:	2c00      	cmp	r4, #0
    1182:	d108      	bne.n	1196 <bt_hci_stop_scanning+0x5e>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1184:	2181      	movs	r1, #129	; 0x81
    1186:	0028      	movs	r0, r5
    1188:	4249      	negs	r1, r1
    118a:	f007 fd79 	bl	8c80 <atomic_and>
    118e:	4909      	ldr	r1, [pc, #36]	; (11b4 <bt_hci_stop_scanning+0x7c>)
    1190:	0028      	movs	r0, r5
    1192:	f007 fd75 	bl	8c80 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_SCANNING);
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);
    1196:	9801      	ldr	r0, [sp, #4]
    1198:	f007 fb0a 	bl	87b0 <net_buf_unref>
	if (err) {
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    119c:	0020      	movs	r0, r4
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);

	return err;
    119e:	e003      	b.n	11a8 <bt_hci_stop_scanning+0x70>
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
		return -EALREADY;
    11a0:	2045      	movs	r0, #69	; 0x45
    11a2:	e000      	b.n	11a6 <bt_hci_stop_scanning+0x6e>
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
    11a4:	2037      	movs	r0, #55	; 0x37
    11a6:	4240      	negs	r0, r0
	}

	net_buf_unref(rsp);

	return err;
}
    11a8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	20000000 	.word	0x20000000
    11b0:	0000200c 	.word	0x0000200c
    11b4:	fffffdff 	.word	0xfffffdff

000011b8 <bt_le_scan_update>:

	return err;
}

int bt_le_scan_update(bool fast_scan)
{
    11b8:	b570      	push	{r4, r5, r6, lr}
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    11ba:	4c09      	ldr	r4, [pc, #36]	; (11e0 <bt_le_scan_update+0x28>)
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    11bc:	2501      	movs	r5, #1
    11be:	346c      	adds	r4, #108	; 0x6c
    11c0:	0020      	movs	r0, r4
    11c2:	f007 fd46 	bl	8c52 <atomic_get>
    11c6:	05c3      	lsls	r3, r0, #23
    11c8:	d501      	bpl.n	11ce <bt_le_scan_update+0x16>
		return 0;
    11ca:	2000      	movs	r0, #0
    11cc:	e007      	b.n	11de <bt_le_scan_update+0x26>
    11ce:	0020      	movs	r0, r4
    11d0:	f007 fd3f 	bl	8c52 <atomic_get>
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    11d4:	11c0      	asrs	r0, r0, #7
    11d6:	4228      	tst	r0, r5
    11d8:	d0f7      	beq.n	11ca <bt_le_scan_update+0x12>
		int err;

		err = bt_hci_stop_scanning();
    11da:	f7ff ffad 	bl	1138 <bt_hci_stop_scanning>
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
				     0x01);
	}

	return 0;
}
    11de:	bd70      	pop	{r4, r5, r6, pc}
    11e0:	20000000 	.word	0x20000000

000011e4 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    11e4:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    11e6:	b510      	push	{r4, lr}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;

	return bt_rand(addr->a.val, 6);
    11e8:	2106      	movs	r1, #6

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    11ea:	0004      	movs	r4, r0
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    11ec:	7003      	strb	r3, [r0, #0]

	return bt_rand(addr->a.val, 6);
    11ee:	18c0      	adds	r0, r0, r3
    11f0:	f002 fc14 	bl	3a1c <bt_rand>
int bt_addr_le_create_static(bt_addr_le_t *addr)
{
	int err;

	err = create_random_addr(addr);
	if (err) {
    11f4:	2800      	cmp	r0, #0
    11f6:	d104      	bne.n	1202 <bt_addr_le_create_static+0x1e>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    11f8:	2240      	movs	r2, #64	; 0x40
    11fa:	79a3      	ldrb	r3, [r4, #6]
    11fc:	4252      	negs	r2, r2
    11fe:	4313      	orrs	r3, r2
    1200:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    1202:	bd10      	pop	{r4, pc}

00001204 <hci_init>:
{
}
#endif /* CONFIG_BLUETOOTH_DEBUG */

static int hci_init(void)
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	b085      	sub	sp, #20
{
	struct net_buf *rsp;
	int err;

	/* Send HCI_RESET */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    1208:	aa02      	add	r2, sp, #8
    120a:	2100      	movs	r1, #0
    120c:	48bf      	ldr	r0, [pc, #764]	; (150c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xdc>)
    120e:	f7ff ff29 	bl	1064 <bt_hci_cmd_send_sync>
	if (err) {
    1212:	1e04      	subs	r4, r0, #0
    1214:	d164      	bne.n	12e0 <hci_init+0xdc>
    1216:	9b02      	ldr	r3, [sp, #8]
	}
}

static void hci_reset_complete(struct net_buf *buf)
{
	u8_t status = buf->data[0];
    1218:	689b      	ldr	r3, [r3, #8]

	BT_DBG("status %u", status);

	if (status) {
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	2b00      	cmp	r3, #0
    121e:	d106      	bne.n	122e <hci_init+0x2a>
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    1220:	48bb      	ldr	r0, [pc, #748]	; (1510 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xe0>)

	if (status) {
		return;
	}

	scan_dev_found_cb = NULL;
    1222:	4abc      	ldr	r2, [pc, #752]	; (1514 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xe4>)
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    1224:	2101      	movs	r1, #1
    1226:	306c      	adds	r0, #108	; 0x6c

	if (status) {
		return;
	}

	scan_dev_found_cb = NULL;
    1228:	6013      	str	r3, [r2, #0]
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    122a:	f007 fd14 	bl	8c56 <atomic_set>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
	if (err) {
		return err;
	}
	hci_reset_complete(rsp);
	net_buf_unref(rsp);
    122e:	9802      	ldr	r0, [sp, #8]
    1230:	f007 fabe 	bl	87b0 <net_buf_unref>
		return err;
	}
#endif

	/* Read Local Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    1234:	aa02      	add	r2, sp, #8
    1236:	2100      	movs	r1, #0
    1238:	48b7      	ldr	r0, [pc, #732]	; (1518 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xe8>)
    123a:	f7ff ff13 	bl	1064 <bt_hci_cmd_send_sync>
    123e:	1e04      	subs	r4, r0, #0
	if (err) {
    1240:	d14e      	bne.n	12e0 <hci_init+0xdc>
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    1242:	4db3      	ldr	r5, [pc, #716]	; (1510 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xe0>)
    1244:	9b02      	ldr	r3, [sp, #8]
    1246:	0028      	movs	r0, r5
    1248:	6899      	ldr	r1, [r3, #8]
    124a:	2208      	movs	r2, #8
    124c:	3101      	adds	r1, #1
    124e:	3016      	adds	r0, #22
    1250:	f7ff fe72 	bl	f38 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
	if (err) {
		return err;
	}
	read_local_features_complete(rsp);
	net_buf_unref(rsp);
    1254:	9802      	ldr	r0, [sp, #8]
    1256:	f007 faab 	bl	87b0 <net_buf_unref>

	/* Read Local Version Information */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    125a:	0021      	movs	r1, r4
    125c:	aa02      	add	r2, sp, #8
    125e:	48af      	ldr	r0, [pc, #700]	; (151c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xec>)
    1260:	f7ff ff00 	bl	1064 <bt_hci_cmd_send_sync>
    1264:	1e04      	subs	r4, r0, #0
				   &rsp);
	if (err) {
    1266:	d13b      	bne.n	12e0 <hci_init+0xdc>
		return err;
	}
	read_local_ver_complete(rsp);
    1268:	9802      	ldr	r0, [sp, #8]
    126a:	6883      	ldr	r3, [r0, #8]
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    126c:	785a      	ldrb	r2, [r3, #1]
    126e:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    1270:	78da      	ldrb	r2, [r3, #3]
    1272:	7899      	ldrb	r1, [r3, #2]
    1274:	0212      	lsls	r2, r2, #8
    1276:	430a      	orrs	r2, r1
    1278:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    127a:	791a      	ldrb	r2, [r3, #4]
    127c:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    127e:	7a1a      	ldrb	r2, [r3, #8]
    1280:	79d9      	ldrb	r1, [r3, #7]
    1282:	0212      	lsls	r2, r2, #8
    1284:	430a      	orrs	r2, r1
    1286:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    1288:	795a      	ldrb	r2, [r3, #5]
    128a:	799b      	ldrb	r3, [r3, #6]
    128c:	021b      	lsls	r3, r3, #8
    128e:	4313      	orrs	r3, r2
    1290:	82ab      	strh	r3, [r5, #20]
				   &rsp);
	if (err) {
		return err;
	}
	read_local_ver_complete(rsp);
	net_buf_unref(rsp);
    1292:	f007 fa8d 	bl	87b0 <net_buf_unref>

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    1296:	0021      	movs	r1, r4
    1298:	aa02      	add	r2, sp, #8
    129a:	48a1      	ldr	r0, [pc, #644]	; (1520 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xf0>)
    129c:	f7ff fee2 	bl	1064 <bt_hci_cmd_send_sync>
    12a0:	1e04      	subs	r4, r0, #0
	if (err) {
    12a2:	d11d      	bne.n	12e0 <hci_init+0xdc>
    12a4:	9b02      	ldr	r3, [sp, #8]
    12a6:	2206      	movs	r2, #6
{
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    12a8:	6899      	ldr	r1, [r3, #8]
    12aa:	1c68      	adds	r0, r5, #1
    12ac:	3101      	adds	r1, #1
    12ae:	f7ff fe43 	bl	f38 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    12b2:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    12b4:	702c      	strb	r4, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    12b6:	f007 fa7b 	bl	87b0 <net_buf_unref>

	/* Read Local Supported Commands */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    12ba:	0021      	movs	r1, r4
    12bc:	aa02      	add	r2, sp, #8
    12be:	4899      	ldr	r0, [pc, #612]	; (1524 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xf4>)
    12c0:	f7ff fed0 	bl	1064 <bt_hci_cmd_send_sync>
    12c4:	1e04      	subs	r4, r0, #0
				   &rsp);
	if (err) {
    12c6:	d10b      	bne.n	12e0 <hci_init+0xdc>
{
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
    12c8:	0028      	movs	r0, r5
    12ca:	9b02      	ldr	r3, [sp, #8]
    12cc:	2240      	movs	r2, #64	; 0x40
    12ce:	6899      	ldr	r1, [r3, #8]
    12d0:	301e      	adds	r0, #30
    12d2:	3101      	adds	r1, #1
    12d4:	f7ff fe30 	bl	f38 <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_supported_commands_complete(rsp);
	net_buf_unref(rsp);
    12d8:	9802      	ldr	r0, [sp, #8]
    12da:	f007 fa69 	bl	87b0 <net_buf_unref>
    12de:	e002      	b.n	12e6 <hci_init+0xe2>
static int hci_init(void)
{
	int err;

	err = common_init();
	if (err) {
    12e0:	2c00      	cmp	r4, #0
    12e2:	d000      	beq.n	12e6 <hci_init+0xe2>
    12e4:	e10f      	b.n	1506 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xd6>
	struct net_buf *buf;
	struct net_buf *rsp;
	int err;

	/* For now we only support LE capable controllers */
	if (!BT_FEAT_LE(bt_dev.features)) {
    12e6:	4d8a      	ldr	r5, [pc, #552]	; (1510 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xe0>)
    12e8:	7eab      	ldrb	r3, [r5, #26]
    12ea:	065b      	lsls	r3, r3, #25
    12ec:	d57a      	bpl.n	13e4 <hci_init+0x1e0>
		BT_ERR("Non-LE capable controller detected!");
		return -ENODEV;
	}

	/* Read Low Energy Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    12ee:	aa02      	add	r2, sp, #8
    12f0:	2100      	movs	r1, #0
    12f2:	488d      	ldr	r0, [pc, #564]	; (1528 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xf8>)
    12f4:	f7ff feb6 	bl	1064 <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    12f8:	2800      	cmp	r0, #0
    12fa:	d175      	bne.n	13e8 <hci_init+0x1e4>
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    12fc:	0028      	movs	r0, r5
    12fe:	9b02      	ldr	r3, [sp, #8]
    1300:	2208      	movs	r2, #8
    1302:	6899      	ldr	r1, [r3, #8]
    1304:	3070      	adds	r0, #112	; 0x70
    1306:	3101      	adds	r1, #1
    1308:	f7ff fe16 	bl	f38 <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_le_features_complete(rsp);
	net_buf_unref(rsp);
    130c:	9802      	ldr	r0, [sp, #8]
    130e:	f007 fa4f 	bl	87b0 <net_buf_unref>
	}
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
    1312:	2320      	movs	r3, #32
    1314:	7eae      	ldrb	r6, [r5, #26]
    1316:	401e      	ands	r6, r3
    1318:	d005      	beq.n	1326 <hci_init+0x122>
			return err;
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    131a:	002b      	movs	r3, r5
    131c:	333a      	adds	r3, #58	; 0x3a
    131e:	781b      	ldrb	r3, [r3, #0]
    1320:	071b      	lsls	r3, r3, #28
    1322:	d416      	bmi.n	1352 <hci_init+0x14e>
    1324:	e03a      	b.n	139c <hci_init+0x198>
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    1326:	2102      	movs	r1, #2
    1328:	4880      	ldr	r0, [pc, #512]	; (152c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xfc>)
    132a:	f7ff fe75 	bl	1018 <bt_hci_cmd_create>
    132e:	1e07      	subs	r7, r0, #0
					sizeof(*cp_le));
		if (!buf) {
    1330:	d100      	bne.n	1334 <hci_init+0x130>
    1332:	e0e2      	b.n	14fa <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xca>
			return -ENOBUFS;
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));
    1334:	2102      	movs	r1, #2
    1336:	3008      	adds	r0, #8
    1338:	f007 fa5c 	bl	87f4 <net_buf_simple_add>

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    133c:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    133e:	7044      	strb	r4, [r0, #1]
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    1340:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    1342:	0032      	movs	r2, r6
    1344:	0039      	movs	r1, r7
    1346:	4879      	ldr	r0, [pc, #484]	; (152c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xfc>)
    1348:	f7ff fe8c 	bl	1064 <bt_hci_cmd_send_sync>
					   NULL);
		if (err) {
    134c:	2800      	cmp	r0, #0
    134e:	d0e4      	beq.n	131a <hci_init+0x116>
    1350:	e04a      	b.n	13e8 <hci_init+0x1e4>
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    1352:	aa02      	add	r2, sp, #8
    1354:	2100      	movs	r1, #0
    1356:	4876      	ldr	r0, [pc, #472]	; (1530 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x100>)
    1358:	f7ff fe84 	bl	1064 <bt_hci_cmd_send_sync>
					   &rsp);
		if (err) {
    135c:	1e04      	subs	r4, r0, #0
    135e:	d144      	bne.n	13ea <hci_init+0x1e6>
			return err;
		}
		le_read_supp_states_complete(rsp);
    1360:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    1362:	6883      	ldr	r3, [r0, #8]
    1364:	1c5f      	adds	r7, r3, #1
    1366:	7859      	ldrb	r1, [r3, #1]
    1368:	789b      	ldrb	r3, [r3, #2]
    136a:	78be      	ldrb	r6, [r7, #2]
    136c:	021b      	lsls	r3, r3, #8
    136e:	430b      	orrs	r3, r1
    1370:	0436      	lsls	r6, r6, #16
    1372:	001a      	movs	r2, r3
    1374:	0033      	movs	r3, r6
    1376:	78fe      	ldrb	r6, [r7, #3]
    1378:	4313      	orrs	r3, r2
    137a:	0636      	lsls	r6, r6, #24
    137c:	797a      	ldrb	r2, [r7, #5]
    137e:	793c      	ldrb	r4, [r7, #4]
    1380:	431e      	orrs	r6, r3
    1382:	79bb      	ldrb	r3, [r7, #6]
    1384:	0212      	lsls	r2, r2, #8
    1386:	4322      	orrs	r2, r4
    1388:	041b      	lsls	r3, r3, #16
    138a:	4313      	orrs	r3, r2
    138c:	001a      	movs	r2, r3
    138e:	79fb      	ldrb	r3, [r7, #7]
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    1390:	67ae      	str	r6, [r5, #120]	; 0x78
    1392:	061b      	lsls	r3, r3, #24
    1394:	4313      	orrs	r3, r2
    1396:	67eb      	str	r3, [r5, #124]	; 0x7c
					   &rsp);
		if (err) {
			return err;
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
    1398:	f007 fa0a 	bl	87b0 <net_buf_unref>
	struct bt_hci_cp_le_set_event_mask *cp_mask;
	struct net_buf *buf;
	u64_t mask = 0;

	/* Set LE event mask */
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    139c:	2108      	movs	r1, #8
    139e:	4865      	ldr	r0, [pc, #404]	; (1534 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x104>)
    13a0:	f7ff fe3a 	bl	1018 <bt_hci_cmd_create>
    13a4:	1e04      	subs	r4, r0, #0
	if (!buf) {
    13a6:	d100      	bne.n	13aa <hci_init+0x1a6>
    13a8:	e0a7      	b.n	14fa <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xca>
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    13aa:	2108      	movs	r1, #8
    13ac:	1840      	adds	r0, r0, r1
    13ae:	f007 fa21 	bl	87f4 <net_buf_simple_add>

	/*
	 * If "LE Read Local P-256 Public Key" and "LE Generate DH Key" are
	 * supported we need to enable events generated by those commands.
	 */
	if ((bt_dev.supported_commands[34] & 0x02) &&
    13b2:	002b      	movs	r3, r5
    13b4:	3340      	adds	r3, #64	; 0x40
    13b6:	781a      	ldrb	r2, [r3, #0]
    13b8:	2306      	movs	r3, #6
    13ba:	401a      	ands	r2, r3
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));

	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;
    13bc:	3b04      	subs	r3, #4

	/*
	 * If "LE Read Local P-256 Public Key" and "LE Generate DH Key" are
	 * supported we need to enable events generated by those commands.
	 */
	if ((bt_dev.supported_commands[34] & 0x02) &&
    13be:	2a06      	cmp	r2, #6
    13c0:	d101      	bne.n	13c6 <hci_init+0x1c2>
	    (bt_dev.supported_commands[34] & 0x04)) {
		mask |= BT_EVT_MASK_LE_P256_PUBLIC_KEY_COMPLETE;
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    13c2:	3381      	adds	r3, #129	; 0x81
    13c4:	33ff      	adds	r3, #255	; 0xff
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    13c6:	2200      	movs	r2, #0
    13c8:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    13ca:	0a1b      	lsrs	r3, r3, #8
    13cc:	7043      	strb	r3, [r0, #1]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    13ce:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    13d0:	70c2      	strb	r2, [r0, #3]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    13d2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    13d4:	7142      	strb	r2, [r0, #5]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    13d6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    13d8:	71c2      	strb	r2, [r0, #7]
	}

	sys_put_le64(mask, cp_mask->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    13da:	0021      	movs	r1, r4
    13dc:	4855      	ldr	r0, [pc, #340]	; (1534 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x104>)
    13de:	f7ff fe41 	bl	1064 <bt_hci_cmd_send_sync>
    13e2:	e001      	b.n	13e8 <hci_init+0x1e4>
	int err;

	/* For now we only support LE capable controllers */
	if (!BT_FEAT_LE(bt_dev.features)) {
		BT_ERR("Non-LE capable controller detected!");
		return -ENODEV;
    13e4:	2413      	movs	r4, #19
    13e6:	e08b      	b.n	1500 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xd0>
		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
		cp_le->simul = 0x00;
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
					   NULL);
		if (err) {
    13e8:	0004      	movs	r4, r0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    13ea:	2c00      	cmp	r4, #0
    13ec:	d000      	beq.n	13f0 <hci_init+0x1ec>
    13ee:	e08a      	b.n	1506 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xd6>
{
	struct bt_hci_cp_set_event_mask *ev;
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    13f0:	2108      	movs	r1, #8
    13f2:	4851      	ldr	r0, [pc, #324]	; (1538 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x108>)
    13f4:	f7ff fe10 	bl	1018 <bt_hci_cmd_create>
    13f8:	1e06      	subs	r6, r0, #0
	if (!buf) {
    13fa:	d07e      	beq.n	14fa <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xca>
		return -ENOBUFS;
	}

	ev = net_buf_add(buf, sizeof(*ev));
    13fc:	2108      	movs	r1, #8
    13fe:	3008      	adds	r0, #8
    1400:	f007 f9f8 	bl	87f4 <net_buf_simple_add>
    1404:	2380      	movs	r3, #128	; 0x80
    1406:	7043      	strb	r3, [r0, #1]
    1408:	3b7e      	subs	r3, #126	; 0x7e
    140a:	70c3      	strb	r3, [r0, #3]
    140c:	331e      	adds	r3, #30
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    140e:	7004      	strb	r4, [r0, #0]
    1410:	7084      	strb	r4, [r0, #2]
    1412:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    1414:	7144      	strb	r4, [r0, #5]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1416:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    1418:	71c3      	strb	r3, [r0, #7]
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
	}

	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    141a:	0022      	movs	r2, r4
    141c:	0031      	movs	r1, r6
    141e:	4846      	ldr	r0, [pc, #280]	; (1538 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x108>)
    1420:	f7ff fe20 	bl	1064 <bt_hci_cmd_send_sync>
    1424:	1e04      	subs	r4, r0, #0
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    1426:	d16e      	bne.n	1506 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xd6>
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    1428:	0001      	movs	r1, r0
    142a:	2207      	movs	r2, #7
    142c:	4668      	mov	r0, sp
    142e:	f7ff fdad 	bl	f8c <memset>
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    1432:	2207      	movs	r2, #7
    1434:	4669      	mov	r1, sp
    1436:	0028      	movs	r0, r5
    1438:	f7ff fd69 	bl	f0e <memcmp>
    143c:	2800      	cmp	r0, #0
    143e:	d104      	bne.n	144a <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x1a>

static int set_static_addr(void)
{
	int err;

	if (bt_storage) {
    1440:	4e3e      	ldr	r6, [pc, #248]	; (153c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x10c>)
    1442:	6833      	ldr	r3, [r6, #0]
    1444:	2b00      	cmp	r3, #0
    1446:	d10d      	bne.n	1464 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x34>
    1448:	e014      	b.n	1474 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x44>
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    144a:	2207      	movs	r2, #7
    144c:	493c      	ldr	r1, [pc, #240]	; (1540 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x110>)
    144e:	a802      	add	r0, sp, #8
    1450:	f7ff fd72 	bl	f38 <memcpy>
    1454:	2207      	movs	r2, #7
    1456:	a902      	add	r1, sp, #8
    1458:	0028      	movs	r0, r5
    145a:	f7ff fd58 	bl	f0e <memcmp>
	err = set_event_mask();
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    145e:	2800      	cmp	r0, #0
    1460:	d0ee      	beq.n	1440 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x10>
    1462:	e050      	b.n	1506 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xd6>
	int err;

	if (bt_storage) {
		ssize_t ret;

		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    1464:	2100      	movs	r1, #0
    1466:	681f      	ldr	r7, [r3, #0]
    1468:	002a      	movs	r2, r5
    146a:	2307      	movs	r3, #7
    146c:	0008      	movs	r0, r1
    146e:	47b8      	blx	r7
				       &bt_dev.id_addr, sizeof(bt_dev.id_addr));
		if (ret == sizeof(bt_dev.id_addr)) {
    1470:	2807      	cmp	r0, #7
    1472:	d02f      	beq.n	14d4 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xa4>
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    1474:	4b33      	ldr	r3, [pc, #204]	; (1544 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x114>)
    1476:	6819      	ldr	r1, [r3, #0]
    1478:	001a      	movs	r2, r3
    147a:	1c4b      	adds	r3, r1, #1
    147c:	d105      	bne.n	148a <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x5a>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    147e:	4b32      	ldr	r3, [pc, #200]	; (1548 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x118>)
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    1480:	4932      	ldr	r1, [pc, #200]	; (154c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x11c>)
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    1482:	681b      	ldr	r3, [r3, #0]
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    1484:	b29b      	uxth	r3, r3
    1486:	428b      	cmp	r3, r1
    1488:	d017      	beq.n	14ba <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x8a>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    148a:	4b31      	ldr	r3, [pc, #196]	; (1550 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x120>)
    148c:	6819      	ldr	r1, [r3, #0]
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    148e:	2301      	movs	r3, #1
    1490:	4219      	tst	r1, r3
    1492:	d012      	beq.n	14ba <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x8a>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    1494:	702b      	strb	r3, [r5, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
    1496:	6813      	ldr	r3, [r2, #0]
    1498:	0a1a      	lsrs	r2, r3, #8
    149a:	70aa      	strb	r2, [r5, #2]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    149c:	2240      	movs	r2, #64	; 0x40
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    149e:	706b      	strb	r3, [r5, #1]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    14a0:	0c1b      	lsrs	r3, r3, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    14a2:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    14a4:	0a1b      	lsrs	r3, r3, #8
    14a6:	712b      	strb	r3, [r5, #4]
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    14a8:	4b27      	ldr	r3, [pc, #156]	; (1548 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x118>)
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    14aa:	4252      	negs	r2, r2
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    14ac:	681b      	ldr	r3, [r3, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    14ae:	716b      	strb	r3, [r5, #5]
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    14b0:	b29b      	uxth	r3, r3
    14b2:	0a1b      	lsrs	r3, r3, #8
    14b4:	4313      	orrs	r3, r2
    14b6:	71ab      	strb	r3, [r5, #6]
    14b8:	e00c      	b.n	14d4 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xa4>
	}
#endif /* CONFIG_SOC_FAMILY_NRF5 */

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
    14ba:	0028      	movs	r0, r5
    14bc:	f7ff fe92 	bl	11e4 <bt_addr_le_create_static>
	if (err) {
    14c0:	2800      	cmp	r0, #0
    14c2:	d11f      	bne.n	1504 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xd4>
		return err;
	}

	if (bt_storage) {
    14c4:	6833      	ldr	r3, [r6, #0]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d004      	beq.n	14d4 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xa4>
		ssize_t ret;

		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    14ca:	685e      	ldr	r6, [r3, #4]
    14cc:	002a      	movs	r2, r5
    14ce:	2307      	movs	r3, #7
    14d0:	0001      	movs	r1, r0
    14d2:	47b0      	blx	r6
	} else {
		BT_WARN("Using temporary static random address");
	}

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    14d4:	782b      	ldrb	r3, [r5, #0]
    14d6:	2b01      	cmp	r3, #1
    14d8:	d111      	bne.n	14fe <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xce>
    14da:	223f      	movs	r2, #63	; 0x3f
    14dc:	79ab      	ldrb	r3, [r5, #6]
    14de:	4393      	bics	r3, r2
    14e0:	2bc0      	cmp	r3, #192	; 0xc0
    14e2:	d10c      	bne.n	14fe <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xce>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
	}

	err = set_random_address(&bt_dev.id_addr.a);
    14e4:	1c68      	adds	r0, r5, #1
    14e6:	f7ff fdf9 	bl	10dc <set_random_address>
	if (err) {
    14ea:	2800      	cmp	r0, #0
    14ec:	d10a      	bne.n	1504 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xd4>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    14ee:	0028      	movs	r0, r5
    14f0:	2104      	movs	r1, #4
    14f2:	306c      	adds	r0, #108	; 0x6c
    14f4:	f007 fbb9 	bl	8c6a <atomic_or>
    14f8:	e005      	b.n	1506 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xd6>
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
    14fa:	2437      	movs	r4, #55	; 0x37
    14fc:	e000      	b.n	1500 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xd0>

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
    14fe:	2416      	movs	r4, #22
    1500:	4264      	negs	r4, r4
    1502:	e000      	b.n	1506 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xd6>
	}

	err = set_random_address(&bt_dev.id_addr.a);
	if (err) {
    1504:	0004      	movs	r4, r0
	}

	show_dev_info();

	return 0;
}
    1506:	0020      	movs	r0, r4
    1508:	b005      	add	sp, #20
    150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    150c:	00000c03 	.word	0x00000c03
    1510:	20000000 	.word	0x20000000
    1514:	20000380 	.word	0x20000380
    1518:	00001003 	.word	0x00001003
    151c:	00001001 	.word	0x00001001
    1520:	00001009 	.word	0x00001009
    1524:	00001002 	.word	0x00001002
    1528:	00002003 	.word	0x00002003
    152c:	00000c6d 	.word	0x00000c6d
    1530:	0000201c 	.word	0x0000201c
    1534:	00002001 	.word	0x00002001
    1538:	00000c01 	.word	0x00000c01
    153c:	20000fc0 	.word	0x20000fc0
    1540:	00009d50 	.word	0x00009d50
    1544:	100000a4 	.word	0x100000a4
    1548:	100000a8 	.word	0x100000a8
    154c:	0000ffff 	.word	0x0000ffff
    1550:	100000a0 	.word	0x100000a0

00001554 <hci_init>:

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    1554:	2001      	movs	r0, #1
    1556:	4b05      	ldr	r3, [pc, #20]	; (156c <hci_init+0x18>)
    1558:	4905      	ldr	r1, [pc, #20]	; (1570 <hci_init+0x1c>)
    155a:	4240      	negs	r0, r0
    155c:	6018      	str	r0, [r3, #0]
    155e:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    1560:	201f      	movs	r0, #31
    1562:	2100      	movs	r1, #0
    1564:	4b03      	ldr	r3, [pc, #12]	; (1574 <hci_init+0x20>)
    1566:	6018      	str	r0, [r3, #0]
    1568:	6059      	str	r1, [r3, #4]
{
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    156a:	4770      	bx	lr
    156c:	200000c8 	.word	0x200000c8
    1570:	00001fff 	.word	0x00001fff
    1574:	200000d0 	.word	0x200000d0

00001578 <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    1578:	b510      	push	{r4, lr}

static int bt_init(void)
{
	int err;

	err = hci_init();
    157a:	f7ff fe43 	bl	1204 <hci_init>
    157e:	1e04      	subs	r4, r0, #0
	if (err) {
    1580:	d107      	bne.n	1592 <init_work+0x1a>
    1582:	4807      	ldr	r0, [pc, #28]	; (15a0 <init_work+0x28>)
    1584:	2102      	movs	r1, #2
    1586:	306c      	adds	r0, #108	; 0x6c
    1588:	f007 fb6f 	bl	8c6a <atomic_or>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);
    158c:	0020      	movs	r0, r4
    158e:	f7ff fe13 	bl	11b8 <bt_le_scan_update>
static void init_work(struct k_work *work)
{
	int err;

	err = bt_init();
	if (ready_cb) {
    1592:	4b04      	ldr	r3, [pc, #16]	; (15a4 <init_work+0x2c>)
    1594:	681b      	ldr	r3, [r3, #0]
    1596:	2b00      	cmp	r3, #0
    1598:	d001      	beq.n	159e <init_work+0x26>
		ready_cb(err);
    159a:	0020      	movs	r0, r4
    159c:	4798      	blx	r3
	}
}
    159e:	bd10      	pop	{r4, pc}
    15a0:	20000000 	.word	0x20000000
    15a4:	2000037c 	.word	0x2000037c

000015a8 <bt_recv>:

	return bt_dev.drv->send(buf);
}

int bt_recv(struct net_buf *buf)
{
    15a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15aa:	0004      	movs	r4, r0
    15ac:	b085      	sub	sp, #20

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	pool = net_buf_pool_get(buf->pool_id);
    15ae:	7980      	ldrb	r0, [r0, #6]
    15b0:	f007 f89a 	bl	86e8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    15b4:	8b43      	ldrh	r3, [r0, #26]
		BT_ERR("Too small user data size");
		net_buf_unref(buf);
    15b6:	0020      	movs	r0, r4
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	pool = net_buf_pool_get(buf->pool_id);
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    15b8:	2b03      	cmp	r3, #3
    15ba:	d90d      	bls.n	15d8 <bt_recv+0x30>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    15bc:	f7ff fd0c 	bl	fd8 <net_buf_user_data>
		BT_ERR("Too small user data size");
		net_buf_unref(buf);
		return -EINVAL;
	}

	switch (bt_buf_get_type(buf)) {
    15c0:	7806      	ldrb	r6, [r0, #0]
    15c2:	2e01      	cmp	r6, #1
    15c4:	d107      	bne.n	15d6 <bt_recv+0x2e>
	}
}

static void hci_event(struct net_buf *buf)
{
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    15c6:	68a7      	ldr	r7, [r4, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    15c8:	783b      	ldrb	r3, [r7, #0]
    15ca:	3b0e      	subs	r3, #14
    15cc:	2b01      	cmp	r3, #1
    15ce:	d808      	bhi.n	15e2 <bt_recv+0x3a>

	BT_DBG("event 0x%02x", hdr->evt);

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    15d0:	b662      	cpsie	i
    15d2:	2004      	movs	r0, #4
    15d4:	df02      	svc	2
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    15d6:	0020      	movs	r0, r4
    15d8:	f007 f8ea 	bl	87b0 <net_buf_unref>
		return -EINVAL;
    15dc:	2016      	movs	r0, #22
    15de:	4240      	negs	r0, r0
    15e0:	e07e      	b.n	16e0 <bt_recv+0x138>

	BT_DBG("event 0x%02x", hdr->evt);

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));
    15e2:	0025      	movs	r5, r4
    15e4:	3508      	adds	r5, #8
    15e6:	2102      	movs	r1, #2
    15e8:	0028      	movs	r0, r5
    15ea:	f007 f914 	bl	8816 <net_buf_simple_pull>

	switch (hdr->evt) {
    15ee:	783b      	ldrb	r3, [r7, #0]
    15f0:	2b3e      	cmp	r3, #62	; 0x3e
    15f2:	d171      	bne.n	16d8 <bt_recv+0x130>
	}
}

static void hci_le_meta_event(struct net_buf *buf)
{
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    15f4:	68a7      	ldr	r7, [r4, #8]

	BT_DBG("subevent 0x%02x", evt->subevent);

	net_buf_pull(buf, sizeof(*evt));
    15f6:	0031      	movs	r1, r6
    15f8:	0028      	movs	r0, r5
    15fa:	f007 f90c 	bl	8816 <net_buf_simple_pull>

	switch (evt->subevent) {
    15fe:	783f      	ldrb	r7, [r7, #0]
    1600:	2f08      	cmp	r7, #8
    1602:	d008      	beq.n	1616 <bt_recv+0x6e>
    1604:	2f09      	cmp	r7, #9
    1606:	d027      	beq.n	1658 <bt_recv+0xb0>
    1608:	2f02      	cmp	r7, #2
    160a:	d165      	bne.n	16d8 <bt_recv+0x130>
	return 0;
}

static void le_adv_report(struct net_buf *buf)
{
	u8_t num_reports = net_buf_pull_u8(buf);
    160c:	0028      	movs	r0, r5
    160e:	f007 f90a 	bl	8826 <net_buf_simple_pull_u8>
    1612:	9000      	str	r0, [sp, #0]
    1614:	e05d      	b.n	16d2 <bt_recv+0x12a>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1616:	2111      	movs	r1, #17
    1618:	4d32      	ldr	r5, [pc, #200]	; (16e4 <bt_recv+0x13c>)
    161a:	68a6      	ldr	r6, [r4, #8]
    161c:	356c      	adds	r5, #108	; 0x6c
    161e:	4249      	negs	r1, r1
    1620:	0028      	movs	r0, r5
    1622:	f007 fb2d 	bl	8c80 <atomic_and>

	BT_DBG("status: 0x%x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    1626:	7833      	ldrb	r3, [r6, #0]
    1628:	2b00      	cmp	r3, #0
    162a:	d108      	bne.n	163e <bt_recv+0x96>
		memcpy(pub_key, evt->key, 64);
    162c:	1c71      	adds	r1, r6, #1
    162e:	2240      	movs	r2, #64	; 0x40
    1630:	482d      	ldr	r0, [pc, #180]	; (16e8 <bt_recv+0x140>)
    1632:	f7ff fc81 	bl	f38 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1636:	0039      	movs	r1, r7
    1638:	0028      	movs	r0, r5
    163a:	f007 fb16 	bl	8c6a <atomic_or>
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    163e:	4b2b      	ldr	r3, [pc, #172]	; (16ec <bt_recv+0x144>)
    1640:	681d      	ldr	r5, [r3, #0]
    1642:	2d00      	cmp	r5, #0
    1644:	d048      	beq.n	16d8 <bt_recv+0x130>
		cb->func(evt->status ? NULL : evt->key);
    1646:	2000      	movs	r0, #0
    1648:	7832      	ldrb	r2, [r6, #0]
    164a:	682b      	ldr	r3, [r5, #0]
    164c:	4282      	cmp	r2, r0
    164e:	d100      	bne.n	1652 <bt_recv+0xaa>
    1650:	1c70      	adds	r0, r6, #1
    1652:	4798      	blx	r3
	if (!evt->status) {
		memcpy(pub_key, evt->key, 64);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    1654:	686d      	ldr	r5, [r5, #4]
    1656:	e7f4      	b.n	1642 <bt_recv+0x9a>
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    1658:	4d25      	ldr	r5, [pc, #148]	; (16f0 <bt_recv+0x148>)
    165a:	68a2      	ldr	r2, [r4, #8]
    165c:	682b      	ldr	r3, [r5, #0]
    165e:	2b00      	cmp	r3, #0
    1660:	d03a      	beq.n	16d8 <bt_recv+0x130>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    1662:	2000      	movs	r0, #0
    1664:	7811      	ldrb	r1, [r2, #0]
    1666:	4281      	cmp	r1, r0
    1668:	d100      	bne.n	166c <bt_recv+0xc4>
    166a:	1c50      	adds	r0, r2, #1
    166c:	4798      	blx	r3
		dh_key_cb = NULL;
    166e:	2300      	movs	r3, #0
    1670:	602b      	str	r3, [r5, #0]
    1672:	e031      	b.n	16d8 <bt_recv+0x130>
	while (num_reports--) {
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
		net_buf_pull(buf, sizeof(*info));
    1674:	2109      	movs	r1, #9
    1676:	0028      	movs	r0, r5

	while (num_reports--) {
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
    1678:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    167a:	f007 f8cc 	bl	8816 <net_buf_simple_pull>
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);

		if (scan_dev_found_cb) {
    167e:	4f1d      	ldr	r7, [pc, #116]	; (16f4 <bt_recv+0x14c>)
    1680:	683b      	ldr	r3, [r7, #0]
    1682:	2b00      	cmp	r3, #0
    1684:	d01c      	beq.n	16c0 <bt_recv+0x118>
		s8_t rssi;

		info = (void *)buf->data;
		net_buf_pull(buf, sizeof(*info));

		rssi = info->data[info->length];
    1686:	7a33      	ldrb	r3, [r6, #8]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    1688:	0028      	movs	r0, r5
    168a:	18f3      	adds	r3, r6, r3
    168c:	7a5b      	ldrb	r3, [r3, #9]
    168e:	9301      	str	r3, [sp, #4]
    1690:	f007 f8d1 	bl	8836 <net_buf_simple_headroom>
	state->len = buf->len;
    1694:	89a3      	ldrh	r3, [r4, #12]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    1696:	9002      	str	r0, [sp, #8]
	state->len = buf->len;
    1698:	9303      	str	r3, [sp, #12]
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    169a:	7a33      	ldrb	r3, [r6, #8]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    169c:	2104      	movs	r1, #4
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    169e:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    16a0:	466b      	mov	r3, sp
    16a2:	7832      	ldrb	r2, [r6, #0]
    16a4:	5659      	ldrsb	r1, [r3, r1]

		BT_DBG("%s event %u, len %u, rssi %d dBm",
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);
    16a6:	1c70      	adds	r0, r6, #1
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    16a8:	002b      	movs	r3, r5
    16aa:	683f      	ldr	r7, [r7, #0]
    16ac:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    16ae:	466b      	mov	r3, sp
    16b0:	0022      	movs	r2, r4
    16b2:	891b      	ldrh	r3, [r3, #8]
    16b4:	3210      	adds	r2, #16
    16b6:	18d3      	adds	r3, r2, r3
    16b8:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    16ba:	466b      	mov	r3, sp
    16bc:	899b      	ldrh	r3, [r3, #12]
    16be:	81a3      	strh	r3, [r4, #12]
#endif /* CONFIG_BLUETOOTH_CONN */

		/* Get next report iteration by moving pointer to right offset
		 * in buf according to spec 4.2, Vol 2, Part E, 7.7.65.2.
		 */
		net_buf_pull(buf, info->length + sizeof(rssi));
    16c0:	7a31      	ldrb	r1, [r6, #8]
    16c2:	0028      	movs	r0, r5
    16c4:	3101      	adds	r1, #1
    16c6:	f007 f8a6 	bl	8816 <net_buf_simple_pull>
    16ca:	9b00      	ldr	r3, [sp, #0]
    16cc:	3b01      	subs	r3, #1
    16ce:	b2db      	uxtb	r3, r3
    16d0:	9300      	str	r3, [sp, #0]
	u8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *info;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    16d2:	9b00      	ldr	r3, [sp, #0]
    16d4:	2b00      	cmp	r3, #0
    16d6:	d1cd      	bne.n	1674 <bt_recv+0xcc>
			buf->len, bt_hex(buf->data, buf->len));
		break;

	}

	net_buf_unref(buf);
    16d8:	0020      	movs	r0, r4
    16da:	f007 f869 	bl	87b0 <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_event(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    16de:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    16e0:	b005      	add	sp, #20
    16e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16e4:	20000000 	.word	0x20000000
    16e8:	20000338 	.word	0x20000338
    16ec:	20000378 	.word	0x20000378
    16f0:	20000334 	.word	0x20000334
    16f4:	20000380 	.word	0x20000380

000016f8 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    16f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16fa:	0004      	movs	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    16fc:	6886      	ldr	r6, [r0, #8]
    16fe:	f7ff fc6b 	bl	fd8 <net_buf_user_data>

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    1702:	7803      	ldrb	r3, [r0, #0]
    1704:	2b01      	cmp	r3, #1
    1706:	d114      	bne.n	1732 <bt_recv_prio+0x3a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    1708:	89a3      	ldrh	r3, [r4, #12]
    170a:	2b01      	cmp	r3, #1
    170c:	d911      	bls.n	1732 <bt_recv_prio+0x3a>
    170e:	7833      	ldrb	r3, [r6, #0]
    1710:	3b0e      	subs	r3, #14
    1712:	2b01      	cmp	r3, #1
    1714:	d80d      	bhi.n	1732 <bt_recv_prio+0x3a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));
    1716:	0025      	movs	r5, r4
    1718:	3508      	adds	r5, #8
    171a:	2102      	movs	r1, #2
    171c:	0028      	movs	r0, r5
    171e:	f007 f87a 	bl	8816 <net_buf_simple_pull>

	switch (hdr->evt) {
    1722:	7833      	ldrb	r3, [r6, #0]
    1724:	2b0e      	cmp	r3, #14
    1726:	d007      	beq.n	1738 <bt_recv_prio+0x40>
    1728:	2b0f      	cmp	r3, #15
    172a:	d017      	beq.n	175c <bt_recv_prio+0x64>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		hci_num_completed_packets(buf);
		break;
#endif /* CONFIG_BLUETOOTH_CONN */
	default:
		net_buf_unref(buf);
    172c:	0020      	movs	r0, r4
    172e:	f007 f83f 	bl	87b0 <net_buf_unref>

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    1732:	b662      	cpsie	i
    1734:	2004      	movs	r0, #4
    1736:	df02      	svc	2

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t status, ncmd = evt->ncmd;
    1738:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    173a:	2103      	movs	r1, #3
    173c:	0028      	movs	r0, r5

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t status, ncmd = evt->ncmd;
    173e:	781e      	ldrb	r6, [r3, #0]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    1740:	f007 f869 	bl	8816 <net_buf_simple_pull>
	/* All command return parameters have a 1-byte status in the
	 * beginning, so we can safely make this generalization.
	 */
	status = buf->data[0];

	hci_cmd_done(opcode, status, buf);
    1744:	68a3      	ldr	r3, [r4, #8]
    1746:	0021      	movs	r1, r4
    1748:	7818      	ldrb	r0, [r3, #0]
    174a:	f7ff fc4b 	bl	fe4 <hci_cmd_done.isra.9>

	/* Allow next command to be sent */
	if (ncmd) {
    174e:	2e00      	cmp	r6, #0
    1750:	d010      	beq.n	1774 <bt_recv_prio+0x7c>
		k_sem_give(&bt_dev.ncmd_sem);
    1752:	480b      	ldr	r0, [pc, #44]	; (1780 <bt_recv_prio+0x88>)
    1754:	3080      	adds	r0, #128	; 0x80
    1756:	f008 f82b 	bl	97b0 <k_sem_give>
    175a:	e00b      	b.n	1774 <bt_recv_prio+0x7c>
	}
}

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    175c:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    175e:	2104      	movs	r1, #4

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t ncmd = evt->ncmd;
    1760:	7877      	ldrb	r7, [r6, #1]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    1762:	0028      	movs	r0, r5
    1764:	f007 f857 	bl	8816 <net_buf_simple_pull>

	hci_cmd_done(opcode, evt->status, buf);
    1768:	7830      	ldrb	r0, [r6, #0]
    176a:	0021      	movs	r1, r4
    176c:	f7ff fc3a 	bl	fe4 <hci_cmd_done.isra.9>

	/* Allow next command to be sent */
	if (ncmd) {
    1770:	2f00      	cmp	r7, #0
    1772:	d1ee      	bne.n	1752 <bt_recv_prio+0x5a>
		net_buf_unref(buf);
		BT_ASSERT(0);
		return -EINVAL;
	}

	net_buf_unref(buf);
    1774:	0020      	movs	r0, r4
    1776:	f007 f81b 	bl	87b0 <net_buf_unref>

	return 0;
}
    177a:	2000      	movs	r0, #0
    177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	20000000 	.word	0x20000000

00001784 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    1784:	4a09      	ldr	r2, [pc, #36]	; (17ac <bt_hci_driver_register+0x28>)
    1786:	32c0      	adds	r2, #192	; 0xc0
    1788:	6813      	ldr	r3, [r2, #0]
    178a:	2b00      	cmp	r3, #0
    178c:	d108      	bne.n	17a0 <bt_hci_driver_register+0x1c>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    178e:	6881      	ldr	r1, [r0, #8]
    1790:	2900      	cmp	r1, #0
    1792:	d007      	beq.n	17a4 <bt_hci_driver_register+0x20>
    1794:	68c1      	ldr	r1, [r0, #12]
    1796:	2900      	cmp	r1, #0
    1798:	d004      	beq.n	17a4 <bt_hci_driver_register+0x20>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    179a:	6010      	str	r0, [r2, #0]
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    179c:	0018      	movs	r0, r3
    179e:	e003      	b.n	17a8 <bt_hci_driver_register+0x24>
}

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
		return -EALREADY;
    17a0:	2045      	movs	r0, #69	; 0x45
    17a2:	e000      	b.n	17a6 <bt_hci_driver_register+0x22>
	}

	if (!drv->open || !drv->send) {
		return -EINVAL;
    17a4:	2016      	movs	r0, #22
    17a6:	4240      	negs	r0, r0

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
}
    17a8:	4770      	bx	lr
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	20000000 	.word	0x20000000

000017b0 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    17b0:	b570      	push	{r4, r5, r6, lr}
    17b2:	0005      	movs	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    17b4:	4806      	ldr	r0, [pc, #24]	; (17d0 <bt_buf_get_rx+0x20>)
    17b6:	f006 ff9f 	bl	86f8 <net_buf_alloc>
    17ba:	1e04      	subs	r4, r0, #0
#endif

	if (buf) {
    17bc:	d006      	beq.n	17cc <bt_buf_get_rx+0x1c>
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    17be:	2100      	movs	r1, #0
    17c0:	f006 ffe2 	bl	8788 <net_buf_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    17c4:	0020      	movs	r0, r4
    17c6:	f7ff fc07 	bl	fd8 <net_buf_user_data>
    17ca:	7005      	strb	r5, [r0, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    17cc:	0020      	movs	r0, r4
    17ce:	bd70      	pop	{r4, r5, r6, pc}
    17d0:	200002f4 	.word	0x200002f4

000017d4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    17d4:	b510      	push	{r4, lr}
    17d6:	0001      	movs	r1, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    17d8:	f3ef 8210 	mrs	r2, PRIMASK
    17dc:	b672      	cpsid	i
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    17de:	2000      	movs	r0, #0
{
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    17e0:	4b0c      	ldr	r3, [pc, #48]	; (1814 <bt_buf_get_cmd_complete+0x40>)
    17e2:	3394      	adds	r3, #148	; 0x94
    17e4:	681c      	ldr	r4, [r3, #0]
	bt_dev.sent_cmd = NULL;
    17e6:	6018      	str	r0, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    17e8:	4282      	cmp	r2, r0
    17ea:	d100      	bne.n	17ee <bt_buf_get_cmd_complete+0x1a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    17ec:	b662      	cpsie	i
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    17ee:	2c00      	cmp	r4, #0
    17f0:	d00b      	beq.n	180a <bt_buf_get_cmd_complete+0x36>
    17f2:	0020      	movs	r0, r4
    17f4:	f7ff fbf0 	bl	fd8 <net_buf_user_data>
    17f8:	2301      	movs	r3, #1
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    17fa:	2100      	movs	r1, #0
    17fc:	7003      	strb	r3, [r0, #0]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    17fe:	0020      	movs	r0, r4

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    1800:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    1802:	f006 ffc1 	bl	8788 <net_buf_reserve>

		return buf;
    1806:	0020      	movs	r0, r4
    1808:	e002      	b.n	1810 <bt_buf_get_cmd_complete+0x3c>
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    180a:	2001      	movs	r0, #1
    180c:	f7ff ffd0 	bl	17b0 <bt_buf_get_rx>
}
    1810:	bd10      	pop	{r4, pc}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	20000000 	.word	0x20000000

00001818 <evt_create>:

static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    1818:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    181a:	3008      	adds	r0, #8

static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    181c:	000d      	movs	r5, r1
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    181e:	2102      	movs	r1, #2

static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    1820:	0014      	movs	r4, r2
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    1822:	f006 ffe7 	bl	87f4 <net_buf_simple_add>
	hdr->evt = evt;
    1826:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    1828:	7044      	strb	r4, [r0, #1]
}
    182a:	bd70      	pop	{r4, r5, r6, pc}

0000182c <cmd_status>:

	return net_buf_add(*buf, plen);
}

static struct net_buf *cmd_status(u8_t status)
{
    182c:	b570      	push	{r4, r5, r6, lr}
    182e:	0005      	movs	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    1830:	2001      	movs	r0, #1
    1832:	4240      	negs	r0, r0
    1834:	f7ff ffce 	bl	17d4 <bt_buf_get_cmd_complete>
    1838:	0004      	movs	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    183a:	2204      	movs	r2, #4
    183c:	210f      	movs	r1, #15
    183e:	f7ff ffeb 	bl	1818 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    1842:	0020      	movs	r0, r4
    1844:	2104      	movs	r1, #4
    1846:	3008      	adds	r0, #8
    1848:	f006 ffd4 	bl	87f4 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    184c:	2301      	movs	r3, #1
    184e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    1850:	4b03      	ldr	r3, [pc, #12]	; (1860 <cmd_status+0x34>)

	buf = bt_buf_get_cmd_complete(K_FOREVER);
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
    1852:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
	cs->opcode = sys_cpu_to_le16(_opcode);
    1854:	781a      	ldrb	r2, [r3, #0]
    1856:	785b      	ldrb	r3, [r3, #1]
    1858:	7082      	strb	r2, [r0, #2]
    185a:	70c3      	strb	r3, [r0, #3]

	return buf;
}
    185c:	0020      	movs	r0, r4
    185e:	bd70      	pop	{r4, r5, r6, pc}
    1860:	20000384 	.word	0x20000384

00001864 <cmd_complete>:
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    1864:	b570      	push	{r4, r5, r6, lr}
    1866:	0004      	movs	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    1868:	2001      	movs	r0, #1
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    186a:	000d      	movs	r5, r1
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    186c:	4240      	negs	r0, r0
    186e:	f7ff ffb1 	bl	17d4 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    1872:	1cea      	adds	r2, r5, #3

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    1874:	6020      	str	r0, [r4, #0]

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    1876:	b2d2      	uxtb	r2, r2
    1878:	210e      	movs	r1, #14
    187a:	f7ff ffcd 	bl	1818 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    187e:	6820      	ldr	r0, [r4, #0]
    1880:	2103      	movs	r1, #3
    1882:	3008      	adds	r0, #8
    1884:	f006 ffb6 	bl	87f4 <net_buf_simple_add>
	cc->ncmd = 1;
    1888:	2301      	movs	r3, #1
    188a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    188c:	4b05      	ldr	r3, [pc, #20]	; (18a4 <cmd_complete+0x40>)

	return net_buf_add(*buf, plen);
    188e:	0029      	movs	r1, r5

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);

	cc = net_buf_add(*buf, sizeof(*cc));
	cc->ncmd = 1;
	cc->opcode = sys_cpu_to_le16(_opcode);
    1890:	781a      	ldrb	r2, [r3, #0]
    1892:	785b      	ldrb	r3, [r3, #1]
    1894:	7042      	strb	r2, [r0, #1]
    1896:	7083      	strb	r3, [r0, #2]

	return net_buf_add(*buf, plen);
    1898:	6820      	ldr	r0, [r4, #0]
    189a:	3008      	adds	r0, #8
    189c:	f006 ffaa 	bl	87f4 <net_buf_simple_add>
}
    18a0:	bd70      	pop	{r4, r5, r6, pc}
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	20000384 	.word	0x20000384

000018a8 <meta_evt>:

	return buf;
}

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    18a8:	b570      	push	{r4, r5, r6, lr}
    18aa:	0004      	movs	r4, r0
    18ac:	0015      	movs	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    18ae:	3201      	adds	r2, #1

	return buf;
}

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    18b0:	000e      	movs	r6, r1
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    18b2:	b2d2      	uxtb	r2, r2
	me = net_buf_add(buf, sizeof(*me));
    18b4:	3408      	adds	r4, #8

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    18b6:	213e      	movs	r1, #62	; 0x3e
    18b8:	f7ff ffae 	bl	1818 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    18bc:	2101      	movs	r1, #1
    18be:	0020      	movs	r0, r4
    18c0:	f006 ff98 	bl	87f4 <net_buf_simple_add>
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    18c4:	0029      	movs	r1, r5
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    18c6:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    18c8:	0020      	movs	r0, r4
    18ca:	f006 ff93 	bl	87f4 <net_buf_simple_add>
}
    18ce:	bd70      	pop	{r4, r5, r6, pc}

000018d0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    18d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18d2:	0014      	movs	r4, r2
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    18d4:	4a10      	ldr	r2, [pc, #64]	; (1918 <le_remote_feat_complete+0x48>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    18d6:	0007      	movs	r7, r0
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    18d8:	6852      	ldr	r2, [r2, #4]
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    18da:	000e      	movs	r6, r1
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    18dc:	0092      	lsls	r2, r2, #2
    18de:	d519      	bpl.n	1914 <le_remote_feat_complete+0x44>
    18e0:	2508      	movs	r5, #8
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    18e2:	4a0e      	ldr	r2, [pc, #56]	; (191c <le_remote_feat_complete+0x4c>)
static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    18e4:	6812      	ldr	r2, [r2, #0]
    18e6:	422a      	tst	r2, r5
    18e8:	d014      	beq.n	1914 <le_remote_feat_complete+0x44>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    18ea:	220b      	movs	r2, #11
    18ec:	2104      	movs	r1, #4
    18ee:	0018      	movs	r0, r3
    18f0:	f7ff ffda 	bl	18a8 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
    18f4:	7044      	strb	r4, [r0, #1]
    18f6:	40ec      	lsrs	r4, r5
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
    18f8:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    18fa:	7084      	strb	r4, [r0, #2]
    18fc:	3003      	adds	r0, #3
	if (!status) {
    18fe:	2f00      	cmp	r7, #0
    1900:	d104      	bne.n	190c <le_remote_feat_complete+0x3c>
		memcpy(&sep->features[0],
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
    1902:	1d31      	adds	r1, r6, #4
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    1904:	002a      	movs	r2, r5
    1906:	f7ff fb17 	bl	f38 <memcpy>
    190a:	e003      	b.n	1914 <le_remote_feat_complete+0x44>
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    190c:	002a      	movs	r2, r5
    190e:	2100      	movs	r1, #0
    1910:	f7ff fb3c 	bl	f8c <memset>
	}
}
    1914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	200000c8 	.word	0x200000c8
    191c:	200000d0 	.word	0x200000d0

00001920 <bt_addr_le_to_str.isra.27>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1920:	b507      	push	{r0, r1, r2, lr}
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    1922:	2800      	cmp	r0, #0
    1924:	d003      	beq.n	192e <bt_addr_le_to_str.isra.27+0xe>
    1926:	2801      	cmp	r0, #1
    1928:	d105      	bne.n	1936 <bt_addr_le_to_str.isra.27+0x16>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    192a:	4904      	ldr	r1, [pc, #16]	; (193c <bt_addr_le_to_str.isra.27+0x1c>)
    192c:	e000      	b.n	1930 <bt_addr_le_to_str.isra.27+0x10>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    192e:	4904      	ldr	r1, [pc, #16]	; (1940 <bt_addr_le_to_str.isra.27+0x20>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    1930:	4668      	mov	r0, sp
    1932:	f7ff fad7 	bl	ee4 <strcpy>
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    1936:	2000      	movs	r0, #0
    1938:	bd0e      	pop	{r1, r2, r3, pc}
    193a:	46c0      	nop			; (mov r8, r8)
    193c:	00009e27 	.word	0x00009e27
    1940:	00009e20 	.word	0x00009e20

00001944 <le_adv_ext_report.isra.29.part.30>:
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    1944:	b507      	push	{r0, r1, r2, lr}
		ptr = (u8_t *)h + sizeof(*h);

		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
			p->ext_hdr_len);

		if (!p->ext_hdr_len) {
    1946:	7883      	ldrb	r3, [r0, #2]
    1948:	069b      	lsls	r3, r3, #26
    194a:	d011      	beq.n	1970 <le_adv_ext_report.isra.29.part.30+0x2c>
			goto no_ext_hdr;
		}

		if (h->adv_addr) {
    194c:	78c3      	ldrb	r3, [r0, #3]
    194e:	07db      	lsls	r3, r3, #31
    1950:	d50e      	bpl.n	1970 <le_adv_ext_report.isra.29.part.30+0x2c>
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
    1952:	466a      	mov	r2, sp
    1954:	7803      	ldrb	r3, [r0, #0]
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
    1956:	1d01      	adds	r1, r0, #4

		if (h->adv_addr) {
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
    1958:	065b      	lsls	r3, r3, #25
    195a:	0fdb      	lsrs	r3, r3, #31
    195c:	7013      	strb	r3, [r2, #0]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    195e:	466b      	mov	r3, sp
    1960:	2206      	movs	r2, #6
    1962:	1c58      	adds	r0, r3, #1
    1964:	f7ff fae8 	bl	f38 <memcpy>
			ptr += BDADDR_SIZE;

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    1968:	466b      	mov	r3, sp
    196a:	7818      	ldrb	r0, [r3, #0]
    196c:	f7ff ffd8 	bl	1920 <bt_addr_le_to_str.isra.27>
		/* TODO: length check? */
	}

no_ext_hdr:
	return;
}
    1970:	bd07      	pop	{r0, r1, r2, pc}

00001972 <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    1972:	b530      	push	{r4, r5, lr}
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    1974:	7842      	ldrb	r2, [r0, #1]
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    1976:	0003      	movs	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    1978:	7804      	ldrb	r4, [r0, #0]
    197a:	7880      	ldrb	r0, [r0, #2]
    197c:	0212      	lsls	r2, r2, #8
    197e:	4322      	orrs	r2, r4
    1980:	0400      	lsls	r0, r0, #16
    1982:	0011      	movs	r1, r2
    1984:	0002      	movs	r2, r0
    1986:	78d8      	ldrb	r0, [r3, #3]
    1988:	430a      	orrs	r2, r1
    198a:	0600      	lsls	r0, r0, #24
    198c:	4310      	orrs	r0, r2
    198e:	795a      	ldrb	r2, [r3, #5]
    1990:	791d      	ldrb	r5, [r3, #4]
    1992:	7999      	ldrb	r1, [r3, #6]
    1994:	0212      	lsls	r2, r2, #8
    1996:	432a      	orrs	r2, r5
    1998:	0409      	lsls	r1, r1, #16
    199a:	0014      	movs	r4, r2
    199c:	000a      	movs	r2, r1
    199e:	79d9      	ldrb	r1, [r3, #7]
    19a0:	4322      	orrs	r2, r4
    19a2:	0609      	lsls	r1, r1, #24
    19a4:	4311      	orrs	r1, r2
}
    19a6:	bd30      	pop	{r4, r5, pc}

000019a8 <hci_cmd_handle>:

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    19a8:	2300      	movs	r3, #0

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    19aa:	b530      	push	{r4, r5, lr}
    19ac:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    19ae:	930d      	str	r3, [sp, #52]	; 0x34

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    19b0:	0004      	movs	r4, r0
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
	u16_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    19b2:	8980      	ldrh	r0, [r0, #12]
    19b4:	2802      	cmp	r0, #2
    19b6:	d801      	bhi.n	19bc <hci_cmd_handle+0x14>
		BT_ERR("No HCI Command header");
		return NULL;
    19b8:	2000      	movs	r0, #0
    19ba:	e191      	b.n	1ce0 <hci_cmd_handle+0x338>
	}

	chdr = (void *)cmd->data;
    19bc:	68a3      	ldr	r3, [r4, #8]
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    19be:	4dc4      	ldr	r5, [pc, #784]	; (1cd0 <hci_cmd_handle+0x328>)
    19c0:	785a      	ldrb	r2, [r3, #1]
    19c2:	7819      	ldrb	r1, [r3, #0]
    19c4:	0212      	lsls	r2, r2, #8
    19c6:	430a      	orrs	r2, r1
    19c8:	802a      	strh	r2, [r5, #0]

	if (cmd->len < chdr->param_len) {
    19ca:	789b      	ldrb	r3, [r3, #2]
    19cc:	4283      	cmp	r3, r0
    19ce:	d8f3      	bhi.n	19b8 <hci_cmd_handle+0x10>
		BT_ERR("Invalid HCI CMD packet length");
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));
    19d0:	0020      	movs	r0, r4
    19d2:	2103      	movs	r1, #3
    19d4:	3008      	adds	r0, #8
    19d6:	f006 ff1e 	bl	8816 <net_buf_simple_pull>

	ocf = BT_OCF(_opcode);
    19da:	882b      	ldrh	r3, [r5, #0]

	switch (BT_OGF(_opcode)) {
    19dc:	0a98      	lsrs	r0, r3, #10
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));

	ocf = BT_OCF(_opcode);
    19de:	059d      	lsls	r5, r3, #22

	switch (BT_OGF(_opcode)) {
    19e0:	3801      	subs	r0, #1
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));

	ocf = BT_OCF(_opcode);
    19e2:	0dad      	lsrs	r5, r5, #22

	switch (BT_OGF(_opcode)) {
    19e4:	2807      	cmp	r0, #7
    19e6:	d900      	bls.n	19ea <hci_cmd_handle+0x42>
    19e8:	e16c      	b.n	1cc4 <hci_cmd_handle+0x31c>
    19ea:	f7fe fbcf 	bl	18c <__gnu_thumb1_case_uhi>
    19ee:	0008      	.short	0x0008
    19f0:	0026016b 	.word	0x0026016b
    19f4:	016b0041 	.word	0x016b0041
    19f8:	016b016b 	.word	0x016b016b
    19fc:	0098      	.short	0x0098
}

static int link_control_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				   struct net_buf **evt)
{
	switch (ocf) {
    19fe:	2d06      	cmp	r5, #6
    1a00:	d00a      	beq.n	1a18 <hci_cmd_handle+0x70>
    1a02:	2d1d      	cmp	r5, #29
    1a04:	d000      	beq.n	1a08 <hci_cmd_handle+0x60>
    1a06:	e15d      	b.n	1cc4 <hci_cmd_handle+0x31c>
{
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    1a08:	68a2      	ldr	r2, [r4, #8]
    1a0a:	7850      	ldrb	r0, [r2, #1]
    1a0c:	7813      	ldrb	r3, [r2, #0]
    1a0e:	0200      	lsls	r0, r0, #8
	status = ll_version_ind_send(handle);
    1a10:	4318      	orrs	r0, r3
    1a12:	f005 ffdb 	bl	79cc <ll_version_ind_send>
    1a16:	e007      	b.n	1a28 <hci_cmd_handle+0x80>
    1a18:	68a2      	ldr	r2, [r4, #8]
{
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    1a1a:	7850      	ldrb	r0, [r2, #1]
    1a1c:	7813      	ldrb	r3, [r2, #0]
    1a1e:	0200      	lsls	r0, r0, #8
	status = ll_terminate_ind_send(handle, cmd->reason);
    1a20:	7891      	ldrb	r1, [r2, #2]
    1a22:	4318      	orrs	r0, r3
    1a24:	f005 ffe8 	bl	79f8 <ll_terminate_ind_send>
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_version_ind_send(handle);

	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    1a28:	2300      	movs	r3, #0
    1a2a:	4298      	cmp	r0, r3
    1a2c:	d000      	beq.n	1a30 <hci_cmd_handle+0x88>
    1a2e:	330c      	adds	r3, #12
    1a30:	0018      	movs	r0, r3
    1a32:	f7ff fefb 	bl	182c <cmd_status>
    1a36:	900d      	str	r0, [sp, #52]	; 0x34
    1a38:	e142      	b.n	1cc0 <hci_cmd_handle+0x318>
#endif

static int ctrl_bb_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			      struct net_buf **evt)
{
	switch (ocf) {
    1a3a:	2d01      	cmp	r5, #1
    1a3c:	d010      	beq.n	1a60 <hci_cmd_handle+0xb8>
    1a3e:	2d03      	cmp	r5, #3
    1a40:	d000      	beq.n	1a44 <hci_cmd_handle+0x9c>
    1a42:	e13f      	b.n	1cc4 <hci_cmd_handle+0x31c>

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    1a44:	2001      	movs	r0, #1
    1a46:	49a3      	ldr	r1, [pc, #652]	; (1cd4 <hci_cmd_handle+0x32c>)
    1a48:	4ba3      	ldr	r3, [pc, #652]	; (1cd8 <hci_cmd_handle+0x330>)
    1a4a:	4240      	negs	r0, r0
    1a4c:	6018      	str	r0, [r3, #0]
    1a4e:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    1a50:	201f      	movs	r0, #31
    1a52:	2100      	movs	r1, #0
    1a54:	4ba1      	ldr	r3, [pc, #644]	; (1cdc <hci_cmd_handle+0x334>)
    1a56:	6018      	str	r0, [r3, #0]
    1a58:	6059      	str	r1, [r3, #4]

	if (buf) {
		ll_reset();
    1a5a:	f005 ff31 	bl	78c0 <ll_reset>
    1a5e:	e11b      	b.n	1c98 <hci_cmd_handle+0x2f0>
static void set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	event_mask = sys_get_le64(cmd->events);
    1a60:	68a0      	ldr	r0, [r4, #8]
    1a62:	f7ff ff86 	bl	1972 <sys_get_le64>
    1a66:	4b9c      	ldr	r3, [pc, #624]	; (1cd8 <hci_cmd_handle+0x330>)
    1a68:	6018      	str	r0, [r3, #0]
    1a6a:	6059      	str	r1, [r3, #4]

	ccst = cmd_complete(evt, sizeof(*ccst));
    1a6c:	0029      	movs	r1, r5
    1a6e:	e114      	b.n	1c9a <hci_cmd_handle+0x2f2>
}

static int info_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			   struct net_buf **evt)
{
	switch (ocf) {
    1a70:	1e68      	subs	r0, r5, #1
    1a72:	2808      	cmp	r0, #8
    1a74:	d900      	bls.n	1a78 <hci_cmd_handle+0xd0>
    1a76:	e125      	b.n	1cc4 <hci_cmd_handle+0x31c>
    1a78:	f7fe fb88 	bl	18c <__gnu_thumb1_case_uhi>
    1a7c:	001a0009 	.word	0x001a0009
    1a80:	01240038 	.word	0x01240038
    1a84:	01240124 	.word	0x01240124
    1a88:	01240124 	.word	0x01240124
    1a8c:	0046      	.short	0x0046

static void read_local_version_info(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1a8e:	2109      	movs	r1, #9
    1a90:	a80d      	add	r0, sp, #52	; 0x34
    1a92:	f7ff fee7 	bl	1864 <cmd_complete>

	rp->status = 0x00;
    1a96:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
    1a98:	2209      	movs	r2, #9
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    1a9a:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
	rp->hci_revision = sys_cpu_to_le16(0);
    1a9c:	7083      	strb	r3, [r0, #2]
    1a9e:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    1aa0:	3b01      	subs	r3, #1
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
	rp->hci_version = BT_HCI_VERSION_5_0;
    1aa2:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    1aa4:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    1aa6:	7143      	strb	r3, [r0, #5]
    1aa8:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    1aaa:	71c3      	strb	r3, [r0, #7]
    1aac:	7203      	strb	r3, [r0, #8]
    1aae:	e107      	b.n	1cc0 <hci_cmd_handle+0x318>

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1ab0:	2141      	movs	r1, #65	; 0x41
    1ab2:	a80d      	add	r0, sp, #52	; 0x34
    1ab4:	f7ff fed6 	bl	1864 <cmd_complete>

	rp->status = 0x00;
    1ab8:	2100      	movs	r1, #0

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1aba:	0004      	movs	r4, r0

	rp->status = 0x00;
    1abc:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    1abe:	2240      	movs	r2, #64	; 0x40
    1ac0:	3001      	adds	r0, #1
    1ac2:	f7ff fa63 	bl	f8c <memset>
	/* Disconnect. */
	rp->commands[0] = (1 << 5);
    1ac6:	2320      	movs	r3, #32
    1ac8:	7063      	strb	r3, [r4, #1]
	/* Set Event Mask, and Reset. */
	rp->commands[5] = (1 << 6) | (1 << 7);
    1aca:	33a0      	adds	r3, #160	; 0xa0
    1acc:	71a3      	strb	r3, [r4, #6]
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	/* Set FC, Host Buffer Size and Host Num Completed */
	rp->commands[10] = (1 << 5) | (1 << 6) | (1 << 7);
#endif
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] = (1 << 3) | (1 << 5);
    1ace:	3b98      	subs	r3, #152	; 0x98
    1ad0:	73e3      	strb	r3, [r4, #15]
	/* Read BD ADDR. */
	rp->commands[15] = (1 << 1);
    1ad2:	3b26      	subs	r3, #38	; 0x26
    1ad4:	7423      	strb	r3, [r4, #16]
	/* All LE commands in this octet. */
	rp->commands[25] = 0xF7;
    1ad6:	33f5      	adds	r3, #245	; 0xf5
    1ad8:	76a3      	strb	r3, [r4, #26]
	/* All LE commands in this octet. */
	rp->commands[26] = 0xFF;
    1ada:	3308      	adds	r3, #8
    1adc:	76e3      	strb	r3, [r4, #27]
	/* All LE commands in this octet,
	 */
	rp->commands[27] = 0xFF;
    1ade:	7723      	strb	r3, [r4, #28]
	/* LE Start Encryption, LE Long Term Key Req Reply,
	 * LE Long Term Key Req Neg Reply. and
	 * LE Read Supported States.
	 */
	rp->commands[28] = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
    1ae0:	3bf0      	subs	r3, #240	; 0xf0
    1ae2:	7763      	strb	r3, [r4, #29]
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] = (1 << 4) | (1 << 5);
    1ae4:	3403      	adds	r4, #3
    1ae6:	3321      	adds	r3, #33	; 0x21
    1ae8:	77e3      	strb	r3, [r4, #31]
    1aea:	e0e9      	b.n	1cc0 <hci_cmd_handle+0x318>

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1aec:	2109      	movs	r1, #9
    1aee:	a80d      	add	r0, sp, #52	; 0x34
    1af0:	f7ff feb8 	bl	1864 <cmd_complete>

	rp->status = 0x00;
    1af4:	2100      	movs	r1, #0

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1af6:	0004      	movs	r4, r0

	rp->status = 0x00;
    1af8:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    1afa:	2208      	movs	r2, #8
    1afc:	3001      	adds	r0, #1
    1afe:	f7ff fa45 	bl	f8c <memset>
	/* BR/EDR not supported and LE supported */
	rp->features[4] = (1 << 5) | (1 << 6);
    1b02:	2360      	movs	r3, #96	; 0x60
    1b04:	7163      	strb	r3, [r4, #5]
    1b06:	e0db      	b.n	1cc0 <hci_cmd_handle+0x318>

static void read_bd_addr(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_bd_addr *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1b08:	2107      	movs	r1, #7
    1b0a:	a80d      	add	r0, sp, #52	; 0x34
    1b0c:	f7ff feaa 	bl	1864 <cmd_complete>
    1b10:	0001      	movs	r1, r0

	rp->status = 0x00;
    1b12:	2000      	movs	r0, #0
    1b14:	7008      	strb	r0, [r1, #0]
	ll_addr_get(0, &rp->bdaddr.val[0]);
    1b16:	3101      	adds	r1, #1
    1b18:	f006 fb3c 	bl	8194 <ll_addr_get>
    1b1c:	e0d0      	b.n	1cc0 <hci_cmd_handle+0x318>
#endif /* CONFIG_BLUETOOTH_CONN */

static int controller_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	switch (ocf) {
    1b1e:	1e68      	subs	r0, r5, #1
    1b20:	281b      	cmp	r0, #27
    1b22:	d900      	bls.n	1b26 <hci_cmd_handle+0x17e>
    1b24:	e0ce      	b.n	1cc4 <hci_cmd_handle+0x31c>
    1b26:	f7fe fb27 	bl	178 <__gnu_thumb1_case_uqi>
    1b2a:	150e      	.short	0x150e
    1b2c:	8333cd21 	.word	0x8333cd21
    1b30:	bdb2aca4 	.word	0xbdb2aca4
    1b34:	cdcdcdcd 	.word	0xcdcdcdcd
    1b38:	504c4338 	.word	0x504c4338
    1b3c:	cdcdcdcd 	.word	0xcdcdcdcd
    1b40:	cdcd6754 	.word	0xcdcd6754
    1b44:	72cd      	.short	0x72cd
static void le_set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	le_event_mask = sys_get_le64(cmd->events);
    1b46:	68a0      	ldr	r0, [r4, #8]
    1b48:	f7ff ff13 	bl	1972 <sys_get_le64>
    1b4c:	4b63      	ldr	r3, [pc, #396]	; (1cdc <hci_cmd_handle+0x334>)
    1b4e:	6018      	str	r0, [r3, #0]
    1b50:	6059      	str	r1, [r3, #4]
    1b52:	e0a1      	b.n	1c98 <hci_cmd_handle+0x2f0>

static void le_read_buffer_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1b54:	2104      	movs	r1, #4
    1b56:	a80d      	add	r0, sp, #52	; 0x34
    1b58:	f7ff fe84 	bl	1864 <cmd_complete>

	rp->status = 0x00;
    1b5c:	2300      	movs	r3, #0

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    1b5e:	211b      	movs	r1, #27
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    1b60:	7003      	strb	r3, [r0, #0]

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    1b62:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    1b64:	3302      	adds	r3, #2

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    1b66:	7041      	strb	r1, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    1b68:	70c3      	strb	r3, [r0, #3]
    1b6a:	e0a9      	b.n	1cc0 <hci_cmd_handle+0x318>

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1b6c:	2109      	movs	r1, #9
    1b6e:	a80d      	add	r0, sp, #52	; 0x34
    1b70:	f7ff fe78 	bl	1864 <cmd_complete>

	rp->status = 0x00;
    1b74:	2500      	movs	r5, #0

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1b76:	0004      	movs	r4, r0

	rp->status = 0x00;
    1b78:	7005      	strb	r5, [r0, #0]

	memset(&rp->features[0], 0x00, sizeof(rp->features));
    1b7a:	2208      	movs	r2, #8
    1b7c:	3001      	adds	r0, #1
    1b7e:	0029      	movs	r1, r5
    1b80:	f7ff fa04 	bl	f8c <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    1b84:	230e      	movs	r3, #14
    1b86:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    1b88:	3332      	adds	r3, #50	; 0x32
    1b8a:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    1b8c:	70e5      	strb	r5, [r4, #3]
    1b8e:	e097      	b.n	1cc0 <hci_cmd_handle+0x318>
static void le_set_random_address(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_random_address *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_addr_set(1, &cmd->bdaddr.val[0]);
    1b90:	68a1      	ldr	r1, [r4, #8]
    1b92:	2001      	movs	r0, #1
    1b94:	f006 fb16 	bl	81c4 <ll_addr_set>
    1b98:	e07e      	b.n	1c98 <hci_cmd_handle+0x2f0>

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1b9a:	2102      	movs	r1, #2
    1b9c:	a80d      	add	r0, sp, #52	; 0x34
    1b9e:	f7ff fe61 	bl	1864 <cmd_complete>
	rp->status = 0x00;
    1ba2:	2300      	movs	r3, #0
    1ba4:	7003      	strb	r3, [r0, #0]

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1ba6:	0004      	movs	r4, r0
	rp->status = 0x00;

	rp->wl_size = ll_wl_size_get();
    1ba8:	f006 fb1c 	bl	81e4 <ll_wl_size_get>
    1bac:	7060      	strb	r0, [r4, #1]
    1bae:	e087      	b.n	1cc0 <hci_cmd_handle+0x318>

static void le_clear_wl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;

	ccst = cmd_complete(evt, sizeof(*ccst));
    1bb0:	2101      	movs	r1, #1
    1bb2:	a80d      	add	r0, sp, #52	; 0x34
    1bb4:	f7ff fe56 	bl	1864 <cmd_complete>
    1bb8:	0004      	movs	r4, r0
	ccst->status = ll_wl_clear();
    1bba:	f006 fb15 	bl	81e8 <ll_wl_clear>
    1bbe:	7020      	strb	r0, [r4, #0]
    1bc0:	e07e      	b.n	1cc0 <hci_cmd_handle+0x318>
{
	struct bt_hci_cp_le_add_dev_to_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_add(&cmd->addr);
    1bc2:	68a0      	ldr	r0, [r4, #8]
    1bc4:	f006 fb26 	bl	8214 <ll_wl_add>
    1bc8:	e04c      	b.n	1c64 <hci_cmd_handle+0x2bc>
{
	struct bt_hci_cp_le_rem_dev_from_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_remove(&cmd->addr);
    1bca:	68a0      	ldr	r0, [r4, #8]
    1bcc:	f006 fb5e 	bl	828c <ll_wl_remove>
    1bd0:	e048      	b.n	1c64 <hci_cmd_handle+0x2bc>
    1bd2:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
	struct bt_hci_rp_le_encrypt *rp;
	u8_t enc_data[16];

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    1bd4:	aa0e      	add	r2, sp, #56	; 0x38
    1bd6:	0001      	movs	r1, r0
    1bd8:	2300      	movs	r3, #0
    1bda:	3110      	adds	r1, #16
    1bdc:	f000 fcb4 	bl	2548 <ecb_encrypt>

	rp = cmd_complete(evt, sizeof(*rp));
    1be0:	2111      	movs	r1, #17
    1be2:	a80d      	add	r0, sp, #52	; 0x34
    1be4:	f7ff fe3e 	bl	1864 <cmd_complete>

	rp->status = 0x00;
    1be8:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    1bea:	2210      	movs	r2, #16

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    1bec:	7003      	strb	r3, [r0, #0]
	memcpy(rp->enc_data, enc_data, 16);
    1bee:	a90e      	add	r1, sp, #56	; 0x38
    1bf0:	3001      	adds	r0, #1
    1bf2:	f7ff f9a1 	bl	f38 <memcpy>
    1bf6:	e063      	b.n	1cc0 <hci_cmd_handle+0x318>
static void le_rand(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
    1bf8:	2109      	movs	r1, #9
    1bfa:	a80d      	add	r0, sp, #52	; 0x34
    1bfc:	f7ff fe32 	bl	1864 <cmd_complete>
	rp->status = 0x00;
    1c00:	2300      	movs	r3, #0

	bt_rand(rp->rand, count);
    1c02:	2108      	movs	r1, #8
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = 0x00;
    1c04:	7003      	strb	r3, [r0, #0]

	bt_rand(rp->rand, count);
    1c06:	3001      	adds	r0, #1
    1c08:	f001 ff08 	bl	3a1c <bt_rand>
    1c0c:	e058      	b.n	1cc0 <hci_cmd_handle+0x318>

static void le_read_supp_states(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_supp_states *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1c0e:	2109      	movs	r1, #9
    1c10:	a80d      	add	r0, sp, #52	; 0x34
    1c12:	f7ff fe27 	bl	1864 <cmd_complete>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1c16:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
    1c18:	2200      	movs	r2, #0
    1c1a:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    1c1c:	7083      	strb	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1c1e:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    1c20:	7103      	strb	r3, [r0, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1c22:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    1c24:	3bfc      	subs	r3, #252	; 0xfc
    1c26:	7002      	strb	r2, [r0, #0]
    1c28:	7183      	strb	r3, [r0, #6]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1c2a:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    1c2c:	7202      	strb	r2, [r0, #8]
    1c2e:	e047      	b.n	1cc0 <hci_cmd_handle+0x318>
    1c30:	68a1      	ldr	r1, [r4, #8]
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u16_t min_interval;
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);
    1c32:	784a      	ldrb	r2, [r1, #1]
    1c34:	7808      	ldrb	r0, [r1, #0]
    1c36:	0212      	lsls	r2, r2, #8

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    1c38:	4302      	orrs	r2, r0
    1c3a:	2000      	movs	r0, #0
    1c3c:	790b      	ldrb	r3, [r1, #4]
    1c3e:	900a      	str	r0, [sp, #40]	; 0x28
    1c40:	9009      	str	r0, [sp, #36]	; 0x24
    1c42:	9008      	str	r0, [sp, #32]
    1c44:	9007      	str	r0, [sp, #28]
    1c46:	9006      	str	r0, [sp, #24]
    1c48:	9005      	str	r0, [sp, #20]
    1c4a:	7b8c      	ldrb	r4, [r1, #14]
    1c4c:	9404      	str	r4, [sp, #16]
    1c4e:	7b4c      	ldrb	r4, [r1, #13]
    1c50:	9403      	str	r4, [sp, #12]
				   cmd->own_addr_type, cmd->direct_addr.type,
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    1c52:	1dcc      	adds	r4, r1, #7
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    1c54:	9402      	str	r4, [sp, #8]
    1c56:	798c      	ldrb	r4, [r1, #6]
    1c58:	9401      	str	r4, [sp, #4]
    1c5a:	7949      	ldrb	r1, [r1, #5]
    1c5c:	9100      	str	r1, [sp, #0]
    1c5e:	0001      	movs	r1, r0
    1c60:	f006 fb6a 	bl	8338 <ll_adv_params_set>
    1c64:	0004      	movs	r4, r0
				   cmd->own_addr_type, cmd->direct_addr.type,
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
				   cmd->filter_policy);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	ccst = cmd_complete(evt, sizeof(*ccst));
    1c66:	2101      	movs	r1, #1
    1c68:	a80d      	add	r0, sp, #52	; 0x34
    1c6a:	f7ff fdfb 	bl	1864 <cmd_complete>
	ccst->status = status;
    1c6e:	7004      	strb	r4, [r0, #0]
    1c70:	e026      	b.n	1cc0 <hci_cmd_handle+0x318>

static void le_read_adv_chan_tx_power(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_chan_tx_power *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    1c72:	2102      	movs	r1, #2
    1c74:	a80d      	add	r0, sp, #52	; 0x34
    1c76:	f7ff fdf5 	bl	1864 <cmd_complete>

	rp->status = 0x00;
    1c7a:	2300      	movs	r3, #0
    1c7c:	7003      	strb	r3, [r0, #0]

	rp->tx_power_level = 0;
    1c7e:	7043      	strb	r3, [r0, #1]
    1c80:	e01e      	b.n	1cc0 <hci_cmd_handle+0x318>
    1c82:	68a3      	ldr	r3, [r4, #8]
static void le_set_adv_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_adv_data_set(cmd->len, &cmd->data[0]);
    1c84:	1c59      	adds	r1, r3, #1
    1c86:	7818      	ldrb	r0, [r3, #0]
    1c88:	f006 fc50 	bl	852c <ll_adv_data_set>
    1c8c:	e004      	b.n	1c98 <hci_cmd_handle+0x2f0>
    1c8e:	68a3      	ldr	r3, [r4, #8]
static void le_set_scan_rsp_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_scan_data_set(cmd->len, &cmd->data[0]);
    1c90:	1c59      	adds	r1, r3, #1
    1c92:	7818      	ldrb	r0, [r3, #0]
    1c94:	f006 fca0 	bl	85d8 <ll_scan_data_set>

	ccst = cmd_complete(evt, sizeof(*ccst));
    1c98:	2101      	movs	r1, #1
    1c9a:	a80d      	add	r0, sp, #52	; 0x34
    1c9c:	f7ff fde2 	bl	1864 <cmd_complete>
	ccst->status = 0x00;
    1ca0:	2300      	movs	r3, #0
    1ca2:	e00c      	b.n	1cbe <hci_cmd_handle+0x316>
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    1ca4:	68a3      	ldr	r3, [r4, #8]
    1ca6:	7818      	ldrb	r0, [r3, #0]
    1ca8:	f006 fcd2 	bl	8650 <ll_adv_enable>

	ccst = cmd_complete(evt, sizeof(*ccst));
    1cac:	2101      	movs	r1, #1
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    1cae:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    1cb0:	a80d      	add	r0, sp, #52	; 0x34
    1cb2:	f7ff fdd7 	bl	1864 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    1cb6:	2300      	movs	r3, #0
    1cb8:	429c      	cmp	r4, r3
    1cba:	d000      	beq.n	1cbe <hci_cmd_handle+0x316>
    1cbc:	330c      	adds	r3, #12
    1cbe:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
	}

	return evt;
    1cc0:	980d      	ldr	r0, [sp, #52]	; 0x34
    1cc2:	e00d      	b.n	1ce0 <hci_cmd_handle+0x338>
		err = -EINVAL;
		break;
	}

	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
    1cc4:	2101      	movs	r1, #1
    1cc6:	a80d      	add	r0, sp, #52	; 0x34
    1cc8:	f7ff fdcc 	bl	1864 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    1ccc:	2301      	movs	r3, #1
    1cce:	e7f6      	b.n	1cbe <hci_cmd_handle+0x316>
    1cd0:	20000384 	.word	0x20000384
    1cd4:	00001fff 	.word	0x00001fff
    1cd8:	200000c8 	.word	0x200000c8
    1cdc:	200000d0 	.word	0x200000d0
	}

	return evt;
}
    1ce0:	b013      	add	sp, #76	; 0x4c
    1ce2:	bd30      	pop	{r4, r5, pc}

00001ce4 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    1ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    1ce6:	0007      	movs	r7, r0

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    1ce8:	0004      	movs	r4, r0
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    1cea:	7900      	ldrb	r0, [r0, #4]

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    1cec:	000e      	movs	r6, r1
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    1cee:	3708      	adds	r7, #8

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    1cf0:	2801      	cmp	r0, #1
    1cf2:	d07f      	beq.n	1df4 <hci_evt_encode+0x110>
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;

	switch (node_rx->hdr.type) {
    1cf4:	3802      	subs	r0, #2
    1cf6:	2803      	cmp	r0, #3
    1cf8:	d900      	bls.n	1cfc <hci_evt_encode+0x18>
    1cfa:	e10f      	b.n	1f1c <hci_evt_encode+0x238>
    1cfc:	f7fe fa3c 	bl	178 <__gnu_thumb1_case_uqi>
    1d00:	4f414102 	.word	0x4f414102
}

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    1d04:	2207      	movs	r2, #7
    1d06:	4987      	ldr	r1, [pc, #540]	; (1f24 <hci_evt_encode+0x240>)
    1d08:	4668      	mov	r0, sp
    1d0a:	f7ff f915 	bl	f38 <memcpy>
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    1d0e:	4b86      	ldr	r3, [pc, #536]	; (1f28 <hci_evt_encode+0x244>)
    1d10:	685b      	ldr	r3, [r3, #4]
    1d12:	009b      	lsls	r3, r3, #2
    1d14:	d400      	bmi.n	1d18 <hci_evt_encode+0x34>
    1d16:	e104      	b.n	1f22 <hci_evt_encode+0x23e>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    1d18:	4b84      	ldr	r3, [pc, #528]	; (1f2c <hci_evt_encode+0x248>)
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    1d1a:	681b      	ldr	r3, [r3, #0]
    1d1c:	079b      	lsls	r3, r3, #30
    1d1e:	d400      	bmi.n	1d22 <hci_evt_encode+0x3e>
    1d20:	e0ff      	b.n	1f22 <hci_evt_encode+0x23e>
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    1d22:	230f      	movs	r3, #15
    1d24:	7a22      	ldrb	r2, [r4, #8]
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    1d26:	2500      	movs	r5, #0
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    1d28:	4013      	ands	r3, r2
    1d2a:	2b01      	cmp	r3, #1
    1d2c:	d002      	beq.n	1d34 <hci_evt_encode+0x50>
		data_len = (adv->len - BDADDR_SIZE);
    1d2e:	7a65      	ldrb	r5, [r4, #9]
    1d30:	3d06      	subs	r5, #6
    1d32:	b2ed      	uxtb	r5, r5
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    1d34:	002a      	movs	r2, r5
    1d36:	320b      	adds	r2, #11
    1d38:	b2d2      	uxtb	r2, r2
    1d3a:	2102      	movs	r1, #2
    1d3c:	0030      	movs	r0, r6
    1d3e:	f7ff fdb3 	bl	18a8 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    1d42:	2301      	movs	r3, #1
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    1d44:	466a      	mov	r2, sp
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    1d46:	0021      	movs	r1, r4
	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    1d48:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    1d4a:	7a23      	ldrb	r3, [r4, #8]
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    1d4c:	0006      	movs	r6, r0
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    1d4e:	071b      	lsls	r3, r3, #28
    1d50:	0f1b      	lsrs	r3, r3, #28
    1d52:	5cd3      	ldrb	r3, [r2, r3]
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    1d54:	310a      	adds	r1, #10
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    1d56:	7043      	strb	r3, [r0, #1]
	adv_info->addr.type = adv->tx_addr;
    1d58:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    1d5a:	2206      	movs	r2, #6

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
    1d5c:	065b      	lsls	r3, r3, #25
    1d5e:	0fdb      	lsrs	r3, r3, #31
    1d60:	7083      	strb	r3, [r0, #2]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    1d62:	3003      	adds	r0, #3
    1d64:	f7ff f8e8 	bl	f38 <memcpy>
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    1d68:	0039      	movs	r1, r7
	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
    1d6a:	7275      	strb	r5, [r6, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    1d6c:	360a      	adds	r6, #10
    1d6e:	3108      	adds	r1, #8
    1d70:	002a      	movs	r2, r5
    1d72:	0030      	movs	r0, r6
    1d74:	f7ff f8e0 	bl	f38 <memcpy>
	/* RSSI */
	rssi = &adv_info->data[0] + data_len;
	*rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    1d78:	7a63      	ldrb	r3, [r4, #9]
    1d7a:	18e4      	adds	r4, r4, r3
    1d7c:	7aa3      	ldrb	r3, [r4, #10]
    1d7e:	5573      	strb	r3, [r6, r5]
    1d80:	e0cf      	b.n	1f22 <hci_evt_encode+0x23e>
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
		phy, adv->type, adv->len, adv->tx_addr, adv->rx_addr, rssi);

	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    1d82:	230f      	movs	r3, #15
    1d84:	7a22      	ldrb	r2, [r4, #8]
    1d86:	4013      	ands	r3, r2
    1d88:	2b07      	cmp	r3, #7
    1d8a:	d000      	beq.n	1d8e <hci_evt_encode+0xaa>
    1d8c:	e0c9      	b.n	1f22 <hci_evt_encode+0x23e>
    1d8e:	7a63      	ldrb	r3, [r4, #9]
    1d90:	2b00      	cmp	r3, #0
    1d92:	d100      	bne.n	1d96 <hci_evt_encode+0xb2>
    1d94:	e0c5      	b.n	1f22 <hci_evt_encode+0x23e>
    1d96:	0038      	movs	r0, r7
    1d98:	f7ff fdd4 	bl	1944 <le_adv_ext_report.isra.29.part.30>
    1d9c:	e0c1      	b.n	1f22 <hci_evt_encode+0x23e>
    1d9e:	0025      	movs	r5, r4
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    1da0:	4b61      	ldr	r3, [pc, #388]	; (1f28 <hci_evt_encode+0x244>)
    1da2:	350a      	adds	r5, #10
    1da4:	685b      	ldr	r3, [r3, #4]
    1da6:	009b      	lsls	r3, r3, #2
    1da8:	d503      	bpl.n	1db2 <hci_evt_encode+0xce>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    1daa:	4b60      	ldr	r3, [pc, #384]	; (1f2c <hci_evt_encode+0x248>)
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    1dac:	681b      	ldr	r3, [r3, #0]
    1dae:	035b      	lsls	r3, r3, #13
    1db0:	d40f      	bmi.n	1dd2 <hci_evt_encode+0xee>
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    1db2:	466a      	mov	r2, sp
    1db4:	7a23      	ldrb	r3, [r4, #8]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    1db6:	0029      	movs	r1, r5
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    1db8:	065b      	lsls	r3, r3, #25
    1dba:	0fdb      	lsrs	r3, r3, #31
    1dbc:	7013      	strb	r3, [r2, #0]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    1dbe:	466b      	mov	r3, sp
    1dc0:	2206      	movs	r2, #6
    1dc2:	1c58      	adds	r0, r3, #1
    1dc4:	f7ff f8b8 	bl	f38 <memcpy>
		       sizeof(bt_addr_t));
		rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
			 offsetof(struct pdu_adv, payload) + adv->len];

		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    1dc8:	466b      	mov	r3, sp
    1dca:	7818      	ldrb	r0, [r3, #0]
    1dcc:	f7ff fda8 	bl	1920 <bt_addr_le_to_str.isra.27>
    1dd0:	e0a7      	b.n	1f22 <hci_evt_encode+0x23e>
			handle, addr_str, rssi);

		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    1dd2:	2208      	movs	r2, #8
    1dd4:	2113      	movs	r1, #19
    1dd6:	0030      	movs	r0, r6
    1dd8:	f7ff fd66 	bl	18a8 <meta_evt>
	sep->handle = 0;
    1ddc:	2300      	movs	r3, #0
    1dde:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    1de0:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    1de2:	2206      	movs	r2, #6
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
	sep->handle = 0;
	sep->addr.type = adv->tx_addr;
    1de4:	065b      	lsls	r3, r3, #25
    1de6:	0fdb      	lsrs	r3, r3, #31
    1de8:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    1dea:	0029      	movs	r1, r5
    1dec:	3002      	adds	r0, #2
    1dee:	f7ff f8a3 	bl	f38 <memcpy>
    1df2:	e096      	b.n	1f22 <hci_evt_encode+0x23e>
static void encode_data_ctrl(struct radio_pdu_node_rx *node_rx,
			     struct pdu_data *pdu_data, struct net_buf *buf)
{
	u16_t handle = node_rx->hdr.handle;

	switch (pdu_data->payload.llctrl.opcode) {
    1df4:	7ae0      	ldrb	r0, [r4, #11]
    1df6:	88e5      	ldrh	r5, [r4, #6]
    1df8:	3807      	subs	r0, #7
    1dfa:	280e      	cmp	r0, #14
    1dfc:	d900      	bls.n	1e00 <hci_evt_encode+0x11c>
    1dfe:	e08d      	b.n	1f1c <hci_evt_encode+0x238>
    1e00:	f7fe f9ba 	bl	178 <__gnu_thumb1_case_uqi>
    1e04:	8c088c82 	.word	0x8c088c82
    1e08:	8c8c0d8c 	.word	0x8c8c0d8c
    1e0c:	8c8c8c2d 	.word	0x8c8c8c2d
    1e10:	558c      	.short	0x558c
    1e12:	55          	.byte	0x55
    1e13:	00          	.byte	0x00
		encrypt_change(0x00, handle, buf);
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_FEATURE_RSP:
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    1e14:	000b      	movs	r3, r1
    1e16:	002a      	movs	r2, r5
    1e18:	0039      	movs	r1, r7
    1e1a:	2000      	movs	r0, #0
    1e1c:	e07b      	b.n	1f16 <hci_evt_encode+0x232>
static void remote_version_info(struct pdu_data *pdu_data, u16_t handle,
				struct net_buf *buf)
{
	struct bt_hci_evt_remote_version_info *ep;

	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    1e1e:	4b42      	ldr	r3, [pc, #264]	; (1f28 <hci_evt_encode+0x244>)
    1e20:	681b      	ldr	r3, [r3, #0]
    1e22:	051b      	lsls	r3, r3, #20
    1e24:	d400      	bmi.n	1e28 <hci_evt_encode+0x144>
    1e26:	e07c      	b.n	1f22 <hci_evt_encode+0x23e>
		return;
	}

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    1e28:	2207      	movs	r2, #7
    1e2a:	210c      	movs	r1, #12
    1e2c:	0030      	movs	r0, r6
    1e2e:	f7ff fcf3 	bl	1818 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    1e32:	0030      	movs	r0, r6
    1e34:	2107      	movs	r1, #7
    1e36:	3008      	adds	r0, #8
    1e38:	f006 fcdc 	bl	87f4 <net_buf_simple_add>

	ep->status = 0x00;
    1e3c:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    1e3e:	7045      	strb	r5, [r0, #1]
    1e40:	0a2d      	lsrs	r5, r5, #8
	}

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
    1e42:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    1e44:	7085      	strb	r5, [r0, #2]
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
    1e46:	7b23      	ldrb	r3, [r4, #12]
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
    1e48:	70c3      	strb	r3, [r0, #3]
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
    1e4a:	7ba3      	ldrb	r3, [r4, #14]
    1e4c:	7b62      	ldrb	r2, [r4, #13]
    1e4e:	021b      	lsls	r3, r3, #8
    1e50:	4313      	orrs	r3, r2

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
    1e52:	7103      	strb	r3, [r0, #4]
    1e54:	0a1b      	lsrs	r3, r3, #8
    1e56:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
	ep->subversion =
	      pdu_data->payload.llctrl.ctrldata.version_ind.sub_version_number;
    1e58:	7be3      	ldrb	r3, [r4, #15]
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
	ep->subversion =
    1e5a:	7183      	strb	r3, [r0, #6]
    1e5c:	e061      	b.n	1f22 <hci_evt_encode+0x23e>
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    1e5e:	4b32      	ldr	r3, [pc, #200]	; (1f28 <hci_evt_encode+0x244>)
    1e60:	685b      	ldr	r3, [r3, #4]
    1e62:	009b      	lsls	r3, r3, #2
    1e64:	d55d      	bpl.n	1f22 <hci_evt_encode+0x23e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    1e66:	4b31      	ldr	r3, [pc, #196]	; (1f2c <hci_evt_encode+0x248>)
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    1e68:	681b      	ldr	r3, [r3, #0]
    1e6a:	069b      	lsls	r3, r3, #26
    1e6c:	d559      	bpl.n	1f22 <hci_evt_encode+0x23e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    1e6e:	220a      	movs	r2, #10
    1e70:	2106      	movs	r1, #6
    1e72:	0030      	movs	r0, r6
    1e74:	f7ff fd18 	bl	18a8 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    1e78:	7005      	strb	r5, [r0, #0]
    1e7a:	0a2d      	lsrs	r5, r5, #8
    1e7c:	7045      	strb	r5, [r0, #1]
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    1e7e:	7b63      	ldrb	r3, [r4, #13]
    1e80:	7b22      	ldrb	r2, [r4, #12]
    1e82:	021b      	lsls	r3, r3, #8
    1e84:	4313      	orrs	r3, r2
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
    1e86:	7083      	strb	r3, [r0, #2]
    1e88:	0a1b      	lsrs	r3, r3, #8
    1e8a:	70c3      	strb	r3, [r0, #3]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    1e8c:	7be3      	ldrb	r3, [r4, #15]
    1e8e:	7ba2      	ldrb	r2, [r4, #14]
    1e90:	021b      	lsls	r3, r3, #8
    1e92:	4313      	orrs	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
    1e94:	7103      	strb	r3, [r0, #4]
    1e96:	0a1b      	lsrs	r3, r3, #8
    1e98:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    1e9a:	7c63      	ldrb	r3, [r4, #17]
    1e9c:	7c22      	ldrb	r2, [r4, #16]
    1e9e:	021b      	lsls	r3, r3, #8
    1ea0:	4313      	orrs	r3, r2
    1ea2:	7183      	strb	r3, [r0, #6]
    1ea4:	0a1b      	lsrs	r3, r3, #8
    1ea6:	71c3      	strb	r3, [r0, #7]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    1ea8:	7ca2      	ldrb	r2, [r4, #18]
    1eaa:	7ce3      	ldrb	r3, [r4, #19]
    1eac:	e026      	b.n	1efc <hci_evt_encode+0x218>
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    1eae:	4b1e      	ldr	r3, [pc, #120]	; (1f28 <hci_evt_encode+0x244>)
    1eb0:	685b      	ldr	r3, [r3, #4]
    1eb2:	009b      	lsls	r3, r3, #2
    1eb4:	d535      	bpl.n	1f22 <hci_evt_encode+0x23e>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    1eb6:	4b1d      	ldr	r3, [pc, #116]	; (1f2c <hci_evt_encode+0x248>)
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    1eb8:	681b      	ldr	r3, [r3, #0]
    1eba:	065b      	lsls	r3, r3, #25
    1ebc:	d531      	bpl.n	1f22 <hci_evt_encode+0x23e>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    1ebe:	220a      	movs	r2, #10
    1ec0:	2107      	movs	r1, #7
    1ec2:	0030      	movs	r0, r6
    1ec4:	f7ff fcf0 	bl	18a8 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    1ec8:	7005      	strb	r5, [r0, #0]
    1eca:	0a2d      	lsrs	r5, r5, #8
    1ecc:	7045      	strb	r5, [r0, #1]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    1ece:	7c63      	ldrb	r3, [r4, #17]
    1ed0:	7c22      	ldrb	r2, [r4, #16]
    1ed2:	021b      	lsls	r3, r3, #8
    1ed4:	4313      	orrs	r3, r2
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
    1ed6:	7083      	strb	r3, [r0, #2]
    1ed8:	0a1b      	lsrs	r3, r3, #8
    1eda:	70c3      	strb	r3, [r0, #3]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    1edc:	7ce3      	ldrb	r3, [r4, #19]
    1ede:	7ca2      	ldrb	r2, [r4, #18]
    1ee0:	021b      	lsls	r3, r3, #8
    1ee2:	4313      	orrs	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
    1ee4:	7103      	strb	r3, [r0, #4]
    1ee6:	0a1b      	lsrs	r3, r3, #8
    1ee8:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    1eea:	7b63      	ldrb	r3, [r4, #13]
    1eec:	7b22      	ldrb	r2, [r4, #12]
    1eee:	021b      	lsls	r3, r3, #8
    1ef0:	4313      	orrs	r3, r2
	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
    1ef2:	7183      	strb	r3, [r0, #6]
    1ef4:	0a1b      	lsrs	r3, r3, #8
    1ef6:	71c3      	strb	r3, [r0, #7]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    1ef8:	7ba2      	ldrb	r2, [r4, #14]
    1efa:	7be3      	ldrb	r3, [r4, #15]
    1efc:	021b      	lsls	r3, r3, #8
    1efe:	4313      	orrs	r3, r2
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
    1f00:	7203      	strb	r3, [r0, #8]
    1f02:	0a1b      	lsrs	r3, r3, #8
    1f04:	7243      	strb	r3, [r0, #9]
    1f06:	e00c      	b.n	1f22 <hci_evt_encode+0x23e>

static void le_unknown_rsp(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{

	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    1f08:	7b23      	ldrb	r3, [r4, #12]
    1f0a:	2b0e      	cmp	r3, #14
    1f0c:	d109      	bne.n	1f22 <hci_evt_encode+0x23e>
	case PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ:
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    1f0e:	000b      	movs	r3, r1
    1f10:	002a      	movs	r2, r5
    1f12:	2100      	movs	r1, #0
    1f14:	201a      	movs	r0, #26
    1f16:	f7ff fcdb 	bl	18d0 <le_remote_feat_complete>
    1f1a:	e002      	b.n	1f22 <hci_evt_encode+0x23e>
	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		le_unknown_rsp(pdu_data, handle, buf);
		break;

	default:
		LL_ASSERT(0);
    1f1c:	b662      	cpsie	i
    1f1e:	2004      	movs	r0, #4
    1f20:	df02      	svc	2
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    1f22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1f24:	00009d57 	.word	0x00009d57
    1f28:	200000c8 	.word	0x200000c8
    1f2c:	200000d0 	.word	0x200000d0

00001f30 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    1f30:	7903      	ldrb	r3, [r0, #4]
    1f32:	2b01      	cmp	r3, #1
    1f34:	d011      	beq.n	1f5a <hci_get_class+0x2a>
    1f36:	2b0a      	cmp	r3, #10
    1f38:	d817      	bhi.n	1f6a <hci_get_class+0x3a>
    1f3a:	2201      	movs	r2, #1
    1f3c:	0011      	movs	r1, r2
    1f3e:	4099      	lsls	r1, r3
    1f40:	000b      	movs	r3, r1
    1f42:	21b0      	movs	r1, #176	; 0xb0
    1f44:	00c9      	lsls	r1, r1, #3
		case NODE_RX_TYPE_CHAN_SEL_ALGO:
#endif
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		case NODE_RX_TYPE_PHY_UPDATE:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */
			return HCI_CLASS_EVT_CONNECTION;
    1f46:	2002      	movs	r0, #2
    1f48:	420b      	tst	r3, r1
    1f4a:	d110      	bne.n	1f6e <hci_get_class+0x3e>
    1f4c:	213c      	movs	r1, #60	; 0x3c
		case NODE_RX_TYPE_ADV_INDICATION:
#endif
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR)
		case NODE_RX_TYPE_PROFILE:
#endif
			return HCI_CLASS_EVT_DISCARDABLE;
    1f4e:	0010      	movs	r0, r2
    1f50:	420b      	tst	r3, r1
    1f52:	d10c      	bne.n	1f6e <hci_get_class+0x3e>
    1f54:	099b      	lsrs	r3, r3, #6
    1f56:	4398      	bics	r0, r3
    1f58:	e008      	b.n	1f6c <hci_get_class+0x3c>
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    1f5a:	2303      	movs	r3, #3
    1f5c:	7a00      	ldrb	r0, [r0, #8]
    1f5e:	4018      	ands	r0, r3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    1f60:	3803      	subs	r0, #3
    1f62:	4242      	negs	r2, r0
    1f64:	4150      	adcs	r0, r2
    1f66:	1a18      	subs	r0, r3, r0
    1f68:	e001      	b.n	1f6e <hci_get_class+0x3e>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		case NODE_RX_TYPE_PHY_UPDATE:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
    1f6a:	2001      	movs	r0, #1
    1f6c:	4240      	negs	r0, r0
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
	}
}
    1f6e:	4770      	bx	lr

00001f70 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    1f70:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    1f72:	4802      	ldr	r0, [pc, #8]	; (1f7c <_hci_driver_init+0xc>)
    1f74:	f7ff fc06 	bl	1784 <bt_hci_driver_register>

	return 0;
}
    1f78:	2000      	movs	r0, #0
    1f7a:	bd10      	pop	{r4, pc}
    1f7c:	00009e3c 	.word	0x00009e3c

00001f80 <hci_driver_send>:

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    1f80:	b510      	push	{r4, lr}
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    1f82:	8983      	ldrh	r3, [r0, #12]

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    1f84:	0004      	movs	r4, r0
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    1f86:	2b00      	cmp	r3, #0
    1f88:	d012      	beq.n	1fb0 <hci_driver_send+0x30>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    1f8a:	2203      	movs	r2, #3
    1f8c:	89c3      	ldrh	r3, [r0, #14]
    1f8e:	18c3      	adds	r3, r0, r3
    1f90:	3313      	adds	r3, #19
    1f92:	4393      	bics	r3, r2
		BT_ERR("Empty HCI packet");
		return -EINVAL;
	}

	type = bt_buf_get_type(buf);
	switch (type) {
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	2b00      	cmp	r3, #0
    1f98:	d10a      	bne.n	1fb0 <hci_driver_send+0x30>

static int cmd_handle(struct net_buf *buf)
{
	struct net_buf *evt;

	evt = hci_cmd_handle(buf);
    1f9a:	f7ff fd05 	bl	19a8 <hci_cmd_handle>
	if (evt) {
    1f9e:	2800      	cmp	r0, #0
    1fa0:	d001      	beq.n	1fa6 <hci_driver_send+0x26>
		BT_DBG("Replying with event of %u bytes", evt->len);
		bt_recv_prio(evt);
    1fa2:	f7ff fba9 	bl	16f8 <bt_recv_prio>
		BT_ERR("Unknown HCI type %u", type);
		return -EINVAL;
	}

	if (!err) {
		net_buf_unref(buf);
    1fa6:	0020      	movs	r0, r4
    1fa8:	f006 fc02 	bl	87b0 <net_buf_unref>
	}

	BT_DBG("exit: %d", err);

	return err;
    1fac:	2000      	movs	r0, #0
    1fae:	e001      	b.n	1fb4 <hci_driver_send+0x34>
	case BT_BUF_CMD:
		err = cmd_handle(buf);
		break;
	default:
		BT_ERR("Unknown HCI type %u", type);
		return -EINVAL;
    1fb0:	2016      	movs	r0, #22
    1fb2:	4240      	negs	r0, r0
	}

	BT_DBG("exit: %d", err);

	return err;
}
    1fb4:	bd10      	pop	{r4, pc}
	...

00001fb8 <recv_thread>:
	return buf;
}
#endif

static void recv_thread(void *p1, void *p2, void *p3)
{
    1fb8:	b513      	push	{r0, r1, r4, lr}

		/* process host buffers first if any */
		buf = process_hbuf();

#else
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    1fba:	2101      	movs	r1, #1
    1fbc:	481b      	ldr	r0, [pc, #108]	; (202c <recv_thread+0x74>)
    1fbe:	4249      	negs	r1, r1
    1fc0:	f007 f9d8 	bl	9374 <k_queue_get>
    1fc4:	1e04      	subs	r4, r0, #0
#endif
		BT_DBG("unblocked");

		if (node_rx && !buf) {
    1fc6:	d02d      	beq.n	2024 <recv_thread+0x6c>
	return buf;
}

static inline struct net_buf *process_node(struct radio_pdu_node_rx *node_rx)
{
	s8_t class = hci_get_class(node_rx);
    1fc8:	f7ff ffb2 	bl	1f30 <hci_get_class>
					  s8_t class)
{
	struct net_buf *buf = NULL;

	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
    1fcc:	b2c3      	uxtb	r3, r0
    1fce:	9401      	str	r4, [sp, #4]
    1fd0:	2b02      	cmp	r3, #2
    1fd2:	d80e      	bhi.n	1ff2 <recv_thread+0x3a>
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    1fd4:	2100      	movs	r1, #0
	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    1fd6:	2801      	cmp	r0, #1
    1fd8:	d002      	beq.n	1fe0 <recv_thread+0x28>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
		} else {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    1fda:	2101      	movs	r1, #1
    1fdc:	2001      	movs	r0, #1
    1fde:	4249      	negs	r1, r1
    1fe0:	f7ff fbe6 	bl	17b0 <bt_buf_get_rx>
    1fe4:	1e04      	subs	r4, r0, #0
		}
		if (buf) {
    1fe6:	d007      	beq.n	1ff8 <recv_thread+0x40>
			hci_evt_encode(node_rx, buf);
    1fe8:	0001      	movs	r1, r0
    1fea:	9801      	ldr	r0, [sp, #4]
    1fec:	f7ff fe7a 	bl	1ce4 <hci_evt_encode>
    1ff0:	e002      	b.n	1ff8 <recv_thread+0x40>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
		hci_acl_encode(node_rx, buf);
		break;
#endif
	default:
		LL_ASSERT(0);
    1ff2:	b662      	cpsie	i
    1ff4:	2004      	movs	r0, #4
    1ff6:	df02      	svc	2
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
    1ff8:	9b01      	ldr	r3, [sp, #4]
    1ffa:	2100      	movs	r1, #0
    1ffc:	88d8      	ldrh	r0, [r3, #6]
    1ffe:	f005 fdb5 	bl	7b6c <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    2002:	2200      	movs	r2, #0
    2004:	9b01      	ldr	r3, [sp, #4]
	radio_rx_mem_release(&node_rx);
    2006:	a801      	add	r0, sp, #4
		LL_ASSERT(0);
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
	node_rx->hdr.onion.next = 0;
    2008:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    200a:	f005 fd49 	bl	7aa0 <radio_rx_mem_release>
		if (node_rx && !buf) {
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
    200e:	2c00      	cmp	r4, #0
    2010:	d008      	beq.n	2024 <recv_thread+0x6c>
			if (buf->len) {
    2012:	89a3      	ldrh	r3, [r4, #12]
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    2014:	0020      	movs	r0, r4
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
			if (buf->len) {
    2016:	2b00      	cmp	r3, #0
    2018:	d002      	beq.n	2020 <recv_thread+0x68>
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    201a:	f7ff fac5 	bl	15a8 <bt_recv>
    201e:	e001      	b.n	2024 <recv_thread+0x6c>
			} else {
				net_buf_unref(buf);
    2020:	f006 fbc6 	bl	87b0 <net_buf_unref>
			}
		}

		k_yield();
    2024:	f007 faf0 	bl	9608 <k_yield>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
			rx_ts = k_uptime_get_32();
		}
#endif
	}
    2028:	e7c7      	b.n	1fba <recv_thread+0x2>
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	200002bc 	.word	0x200002bc

00002030 <prio_recv_thread>:
static sys_slist_t hbuf_pend;
static s32_t hbuf_count;
#endif

static void prio_recv_thread(void *p1, void *p2, void *p3)
{
    2030:	b507      	push	{r0, r1, r2, lr}
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    2032:	466b      	mov	r3, sp
    2034:	a801      	add	r0, sp, #4
    2036:	1c99      	adds	r1, r3, #2
    2038:	f005 fcf4 	bl	7a24 <radio_rx_get>
    203c:	2800      	cmp	r0, #0
    203e:	d1f8      	bne.n	2032 <prio_recv_thread+0x2>
			bt_recv_prio(buf);
			k_yield();
#endif
		}

		if (node_rx) {
    2040:	9b01      	ldr	r3, [sp, #4]
    2042:	2b00      	cmp	r3, #0
    2044:	d006      	beq.n	2054 <prio_recv_thread+0x24>

			radio_rx_dequeue();
    2046:	f005 ff43 	bl	7ed0 <radio_rx_dequeue>

			BT_DBG("RX node enqueue");
			k_fifo_put(&recv_fifo, node_rx);
    204a:	9901      	ldr	r1, [sp, #4]
    204c:	4804      	ldr	r0, [pc, #16]	; (2060 <prio_recv_thread+0x30>)
    204e:	f007 f941 	bl	92d4 <k_queue_append>
    2052:	e7ee      	b.n	2032 <prio_recv_thread+0x2>

			continue;
		}

		BT_DBG("sem take...");
		k_sem_take(&sem_prio_recv, K_FOREVER);
    2054:	2101      	movs	r1, #1
    2056:	4803      	ldr	r0, [pc, #12]	; (2064 <prio_recv_thread+0x34>)
    2058:	4249      	negs	r1, r1
    205a:	f007 fbe5 	bl	9828 <k_sem_take>
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    205e:	e7e8      	b.n	2032 <prio_recv_thread+0x2>
    2060:	200002bc 	.word	0x200002bc
    2064:	20000294 	.word	0x20000294

00002068 <hci_driver_open>:

	return err;
}

static int hci_driver_open(void)
{
    2068:	b510      	push	{r4, lr}
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    206a:	4814      	ldr	r0, [pc, #80]	; (20bc <hci_driver_open+0x54>)

	return err;
}

static int hci_driver_open(void)
{
    206c:	b086      	sub	sp, #24
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    206e:	f006 f817 	bl	80a0 <ll_init>
    2072:	1e04      	subs	r4, r0, #0
	if (err) {
    2074:	d11f      	bne.n	20b6 <hci_driver_open+0x4e>
	}

#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hci_init(&hbuf_signal);
#else
	hci_init(NULL);
    2076:	f7ff fa6d 	bl	1554 <hci_init>
#endif

	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    207a:	230a      	movs	r3, #10
    207c:	22e0      	movs	r2, #224	; 0xe0
    207e:	425b      	negs	r3, r3
    2080:	9303      	str	r3, [sp, #12]
    2082:	0052      	lsls	r2, r2, #1
    2084:	4b0e      	ldr	r3, [pc, #56]	; (20c0 <hci_driver_open+0x58>)
    2086:	490f      	ldr	r1, [pc, #60]	; (20c4 <hci_driver_open+0x5c>)
    2088:	9405      	str	r4, [sp, #20]
    208a:	9404      	str	r4, [sp, #16]
    208c:	9402      	str	r4, [sp, #8]
    208e:	9401      	str	r4, [sp, #4]
    2090:	9400      	str	r4, [sp, #0]
    2092:	480d      	ldr	r0, [pc, #52]	; (20c8 <hci_driver_open+0x60>)
    2094:	f007 fd6a 	bl	9b6c <k_thread_create>
			K_THREAD_STACK_SIZEOF(prio_recv_thread_stack),
			prio_recv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(6), 0, K_NO_WAIT);

	k_thread_create(&recv_thread_data, recv_thread_stack,
    2098:	2309      	movs	r3, #9
    209a:	2280      	movs	r2, #128	; 0x80
    209c:	425b      	negs	r3, r3
    209e:	9303      	str	r3, [sp, #12]
    20a0:	9405      	str	r4, [sp, #20]
    20a2:	9404      	str	r4, [sp, #16]
    20a4:	9402      	str	r4, [sp, #8]
    20a6:	9401      	str	r4, [sp, #4]
    20a8:	9400      	str	r4, [sp, #0]
    20aa:	4b08      	ldr	r3, [pc, #32]	; (20cc <hci_driver_open+0x64>)
    20ac:	00d2      	lsls	r2, r2, #3
    20ae:	4908      	ldr	r1, [pc, #32]	; (20d0 <hci_driver_open+0x68>)
    20b0:	4808      	ldr	r0, [pc, #32]	; (20d4 <hci_driver_open+0x6c>)
    20b2:	f007 fd5b 	bl	9b6c <k_thread_create>
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	BT_DBG("Success.");

	return 0;
}
    20b6:	0020      	movs	r0, r4
    20b8:	b006      	add	sp, #24
    20ba:	bd10      	pop	{r4, pc}
    20bc:	20000294 	.word	0x20000294
    20c0:	00002031 	.word	0x00002031
    20c4:	20001854 	.word	0x20001854
    20c8:	20001024 	.word	0x20001024
    20cc:	00001fb9 	.word	0x00001fb9
    20d0:	200011d4 	.word	0x200011d4
    20d4:	20000fc4 	.word	0x20000fc4

000020d8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    20d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    20da:	2504      	movs	r5, #4
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    20dc:	270c      	movs	r7, #12
void mayfly_init(void)
{
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
    20de:	3d01      	subs	r5, #1
    20e0:	b2ed      	uxtb	r5, r5
    20e2:	2dff      	cmp	r5, #255	; 0xff
    20e4:	d015      	beq.n	2112 <mayfly_init+0x3a>
    20e6:	2404      	movs	r4, #4
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    20e8:	2630      	movs	r6, #48	; 0x30
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    20ea:	3c01      	subs	r4, #1
    20ec:	b2e4      	uxtb	r4, r4
    20ee:	2cff      	cmp	r4, #255	; 0xff
    20f0:	d0f5      	beq.n	20de <mayfly_init+0x6>
			memq_init(mfl[callee_id][caller_id],
    20f2:	0033      	movs	r3, r6
    20f4:	0039      	movs	r1, r7
    20f6:	436b      	muls	r3, r5
    20f8:	4361      	muls	r1, r4
    20fa:	18c9      	adds	r1, r1, r3
    20fc:	4b05      	ldr	r3, [pc, #20]	; (2114 <mayfly_init+0x3c>)
    20fe:	00a8      	lsls	r0, r5, #2
    2100:	1859      	adds	r1, r3, r1
    2102:	1900      	adds	r0, r0, r4
    2104:	4b04      	ldr	r3, [pc, #16]	; (2118 <mayfly_init+0x40>)
    2106:	00c0      	lsls	r0, r0, #3
    2108:	1d0a      	adds	r2, r1, #4
    210a:	1818      	adds	r0, r3, r0
    210c:	f000 f978 	bl	2400 <memq_init>
    2110:	e7eb      	b.n	20ea <mayfly_init+0x12>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    2112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2114:	20000408 	.word	0x20000408
    2118:	20000388 	.word	0x20000388

0000211c <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    211c:	b570      	push	{r4, r5, r6, lr}
    211e:	250c      	movs	r5, #12
    2120:	2430      	movs	r4, #48	; 0x30
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    2122:	002b      	movs	r3, r5
    2124:	434c      	muls	r4, r1
    2126:	4343      	muls	r3, r0
    2128:	4e0b      	ldr	r6, [pc, #44]	; (2158 <mayfly_enable+0x3c>)
    212a:	191c      	adds	r4, r3, r4
    212c:	1933      	adds	r3, r6, r4
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	if (enable) {
    212e:	2a00      	cmp	r2, #0
    2130:	d008      	beq.n	2144 <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
    2132:	7a1d      	ldrb	r5, [r3, #8]
    2134:	7a5c      	ldrb	r4, [r3, #9]
    2136:	42ac      	cmp	r4, r5
    2138:	d101      	bne.n	213e <mayfly_enable+0x22>
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    213a:	3401      	adds	r4, #1
    213c:	721c      	strb	r4, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    213e:	f005 ff68 	bl	8012 <mayfly_enable_cb>
    2142:	e007      	b.n	2154 <mayfly_enable+0x38>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    2144:	7a9c      	ldrb	r4, [r3, #10]
    2146:	7ada      	ldrb	r2, [r3, #11]
    2148:	42a2      	cmp	r2, r4
    214a:	d103      	bne.n	2154 <mayfly_enable+0x38>
		    mft[callee_id][caller_id].disable_ack) {
			mft[callee_id][caller_id].disable_req++;
    214c:	3201      	adds	r2, #1
    214e:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    2150:	f005 ff8a 	bl	8068 <mayfly_pend>
		}
	}
}
    2154:	bd70      	pop	{r4, r5, r6, pc}
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	20000408 	.word	0x20000408

0000215c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    215e:	0005      	movs	r5, r0
    2160:	000e      	movs	r6, r1
    2162:	001c      	movs	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    2164:	2a00      	cmp	r2, #0
    2166:	d001      	beq.n	216c <mayfly_enqueue+0x10>
    2168:	2101      	movs	r1, #1
    216a:	e017      	b.n	219c <mayfly_enqueue+0x40>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    216c:	f005 ff6d 	bl	804a <mayfly_prio_is_equal>
    2170:	2800      	cmp	r0, #0
    2172:	d0f9      	beq.n	2168 <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
    2174:	0031      	movs	r1, r6
    2176:	0028      	movs	r0, r5
    2178:	f005 ff5a 	bl	8030 <mayfly_is_enabled>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    217c:	2800      	cmp	r0, #0
    217e:	d0f3      	beq.n	2168 <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
    2180:	230c      	movs	r3, #12
    2182:	436b      	muls	r3, r5
    2184:	001a      	movs	r2, r3
    2186:	2330      	movs	r3, #48	; 0x30
    2188:	4373      	muls	r3, r6
    218a:	18d3      	adds	r3, r2, r3
    218c:	4a1d      	ldr	r2, [pc, #116]	; (2204 <mayfly_enqueue+0xa8>)
    218e:	18d3      	adds	r3, r2, r3
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    2190:	7a9a      	ldrb	r2, [r3, #10]
    2192:	7adb      	ldrb	r3, [r3, #11]
    2194:	1ad3      	subs	r3, r2, r3
    2196:	1e5a      	subs	r2, r3, #1
    2198:	4193      	sbcs	r3, r2
    219a:	0019      	movs	r1, r3

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    219c:	2203      	movs	r2, #3
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    219e:	7863      	ldrb	r3, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    21a0:	7827      	ldrb	r7, [r4, #0]
    21a2:	1aff      	subs	r7, r7, r3
    21a4:	4017      	ands	r7, r2
	if (state != 0) {
    21a6:	d010      	beq.n	21ca <mayfly_enqueue+0x6e>
		if (chain) {
    21a8:	2900      	cmp	r1, #0
    21aa:	d00a      	beq.n	21c2 <mayfly_enqueue+0x66>

				return 0;
			}

			/* already ready */
			return 1;
    21ac:	2001      	movs	r0, #1

	/* already in queue */
	state = (m->_req - ack) & 0x03;
	if (state != 0) {
		if (chain) {
			if (state != 1) {
    21ae:	4287      	cmp	r7, r0
    21b0:	d026      	beq.n	2200 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    21b2:	181b      	adds	r3, r3, r0
    21b4:	b2db      	uxtb	r3, r3
    21b6:	7023      	strb	r3, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    21b8:	0031      	movs	r1, r6
    21ba:	0028      	movs	r0, r5
    21bc:	f005 ff54 	bl	8068 <mayfly_pend>
    21c0:	e008      	b.n	21d4 <mayfly_enqueue+0x78>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    21c2:	3302      	adds	r3, #2
    21c4:	b2db      	uxtb	r3, r3
    21c6:	7023      	strb	r3, [r4, #0]
    21c8:	e001      	b.n	21ce <mayfly_enqueue+0x72>
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    21ca:	2900      	cmp	r1, #0
    21cc:	d104      	bne.n	21d8 <mayfly_enqueue+0x7c>
		/* call fp */
		m->fp(m->param);
    21ce:	68e3      	ldr	r3, [r4, #12]
    21d0:	68a0      	ldr	r0, [r4, #8]
    21d2:	4798      	blx	r3

		return 0;
    21d4:	2000      	movs	r0, #0
    21d6:	e013      	b.n	2200 <mayfly_enqueue+0xa4>
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    21d8:	3301      	adds	r3, #1
    21da:	b2db      	uxtb	r3, r3
    21dc:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    21de:	220c      	movs	r2, #12
    21e0:	2330      	movs	r3, #48	; 0x30
    21e2:	436a      	muls	r2, r5
    21e4:	4373      	muls	r3, r6
    21e6:	18d2      	adds	r2, r2, r3
    21e8:	4b06      	ldr	r3, [pc, #24]	; (2204 <mayfly_enqueue+0xa8>)
    21ea:	6861      	ldr	r1, [r4, #4]
    21ec:	189a      	adds	r2, r3, r2
    21ee:	3204      	adds	r2, #4
    21f0:	0020      	movs	r0, r4
    21f2:	f000 f908 	bl	2406 <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    21f6:	0028      	movs	r0, r5
    21f8:	0031      	movs	r1, r6
    21fa:	f005 ff35 	bl	8068 <mayfly_pend>

	return 0;
    21fe:	0038      	movs	r0, r7
}
    2200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	20000408 	.word	0x20000408

00002208 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
	u8_t enable = 0;
    2208:	2300      	movs	r3, #0

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    220a:	b5f0      	push	{r4, r5, r6, r7, lr}
    220c:	0005      	movs	r5, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    220e:	2404      	movs	r4, #4
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    2210:	2730      	movs	r7, #48	; 0x30

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    2212:	b087      	sub	sp, #28
	u8_t disable = 0;
	u8_t enable = 0;
    2214:	9300      	str	r3, [sp, #0]
	return 0;
}

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
    2216:	9301      	str	r3, [sp, #4]
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    2218:	3c01      	subs	r4, #1
    221a:	b2e4      	uxtb	r4, r4
    221c:	2cff      	cmp	r4, #255	; 0xff
    221e:	d070      	beq.n	2302 <mayfly_run+0xfa>
		void *link;
		struct mayfly *m = 0;
    2220:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    2222:	220c      	movs	r2, #12

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;
    2224:	9305      	str	r3, [sp, #20]

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    2226:	003b      	movs	r3, r7
    2228:	4362      	muls	r2, r4
    222a:	436b      	muls	r3, r5
    222c:	493b      	ldr	r1, [pc, #236]	; (231c <mayfly_run+0x114>)
    222e:	18d3      	adds	r3, r2, r3
    2230:	18c8      	adds	r0, r1, r3
    2232:	aa05      	add	r2, sp, #20
    2234:	5859      	ldr	r1, [r3, r1]
    2236:	6840      	ldr	r0, [r0, #4]
    2238:	f000 f8ec 	bl	2414 <memq_peek>
    223c:	0006      	movs	r6, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    223e:	2e00      	cmp	r6, #0
    2240:	d042      	beq.n	22c8 <mayfly_run+0xc0>
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
    2242:	2003      	movs	r0, #3
		while (link) {
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    2244:	9b05      	ldr	r3, [sp, #20]
			state = (req - m->_ack) & 0x03;
    2246:	785a      	ldrb	r2, [r3, #1]
		while (link) {
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    2248:	7819      	ldrb	r1, [r3, #0]
			state = (req - m->_ack) & 0x03;
    224a:	1a89      	subs	r1, r1, r2
    224c:	4008      	ands	r0, r1
    224e:	9002      	str	r0, [sp, #8]
			if (state == 1) {
    2250:	2801      	cmp	r0, #1
    2252:	d104      	bne.n	225e <mayfly_run+0x56>
				/* mark mayfly as ran */
				m->_ack--;
    2254:	3a01      	subs	r2, #1
    2256:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    2258:	6898      	ldr	r0, [r3, #8]
    225a:	68da      	ldr	r2, [r3, #12]
    225c:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			req = m->_req;
    225e:	9a05      	ldr	r2, [sp, #20]
    2260:	7813      	ldrb	r3, [r2, #0]
    2262:	b2db      	uxtb	r3, r3
    2264:	9303      	str	r3, [sp, #12]
			if (((req - m->_ack) & 0x03) != 1) {
    2266:	7853      	ldrb	r3, [r2, #1]
    2268:	9a03      	ldr	r2, [sp, #12]
    226a:	1ad3      	subs	r3, r2, r3
    226c:	2203      	movs	r2, #3
    226e:	4013      	ands	r3, r2
    2270:	2b01      	cmp	r3, #1
    2272:	d010      	beq.n	2296 <mayfly_run+0x8e>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2274:	003b      	movs	r3, r7
    2276:	3209      	adds	r2, #9
    2278:	4362      	muls	r2, r4
    227a:	436b      	muls	r3, r5
    227c:	18d3      	adds	r3, r2, r3
    227e:	4a27      	ldr	r2, [pc, #156]	; (231c <mayfly_run+0x114>)
    2280:	18d3      	adds	r3, r2, r3
    2282:	0019      	movs	r1, r3
    2284:	2200      	movs	r2, #0
    2286:	6858      	ldr	r0, [r3, #4]
    2288:	f000 f8cf 	bl	242a <memq_dequeue>

				/* release link into dequeued mayfly struct */
				m->_link = link;

				/* reset mayfly state to idle */
				m->_ack = req;
    228c:	466a      	mov	r2, sp
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    228e:	9b05      	ldr	r3, [sp, #20]

				/* reset mayfly state to idle */
				m->_ack = req;
    2290:	7b12      	ldrb	r2, [r2, #12]
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    2292:	605e      	str	r6, [r3, #4]

				/* reset mayfly state to idle */
				m->_ack = req;
    2294:	705a      	strb	r2, [r3, #1]
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    2296:	003b      	movs	r3, r7
    2298:	220c      	movs	r2, #12
    229a:	436b      	muls	r3, r5
    229c:	4362      	muls	r2, r4
    229e:	491f      	ldr	r1, [pc, #124]	; (231c <mayfly_run+0x114>)
    22a0:	18d3      	adds	r3, r2, r3
    22a2:	18c8      	adds	r0, r1, r3
    22a4:	aa05      	add	r2, sp, #20
    22a6:	5859      	ldr	r1, [r3, r1]
    22a8:	6840      	ldr	r0, [r0, #4]
    22aa:	f000 f8b3 	bl	2414 <memq_peek>
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    22ae:	9b02      	ldr	r3, [sp, #8]
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    22b0:	0006      	movs	r6, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    22b2:	2b01      	cmp	r3, #1
    22b4:	d1c3      	bne.n	223e <mayfly_run+0x36>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    22b6:	2c00      	cmp	r4, #0
    22b8:	d101      	bne.n	22be <mayfly_run+0xb6>
    22ba:	2800      	cmp	r0, #0
    22bc:	d004      	beq.n	22c8 <mayfly_run+0xc0>
					mayfly_pend(callee_id, callee_id);
    22be:	0029      	movs	r1, r5
    22c0:	0028      	movs	r0, r5
    22c2:	f005 fed1 	bl	8068 <mayfly_pend>
    22c6:	e027      	b.n	2318 <mayfly_run+0x110>
					return;
				}
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
    22c8:	003a      	movs	r2, r7
    22ca:	200c      	movs	r0, #12
    22cc:	436a      	muls	r2, r5
    22ce:	4360      	muls	r0, r4
    22d0:	4b12      	ldr	r3, [pc, #72]	; (231c <mayfly_run+0x114>)
    22d2:	1882      	adds	r2, r0, r2
    22d4:	189a      	adds	r2, r3, r2
    22d6:	7a90      	ldrb	r0, [r2, #10]
    22d8:	7ad6      	ldrb	r6, [r2, #11]
    22da:	0019      	movs	r1, r3
    22dc:	4286      	cmp	r6, r0
    22de:	d002      	beq.n	22e6 <mayfly_run+0xde>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    22e0:	2301      	movs	r3, #1

			mft[callee_id][caller_id].disable_ack =
    22e2:	72d0      	strb	r0, [r2, #11]
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    22e4:	9301      	str	r3, [sp, #4]

			mft[callee_id][caller_id].disable_ack =
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    22e6:	230c      	movs	r3, #12
    22e8:	003a      	movs	r2, r7
    22ea:	4363      	muls	r3, r4
    22ec:	436a      	muls	r2, r5
    22ee:	189b      	adds	r3, r3, r2
    22f0:	18cb      	adds	r3, r1, r3
    22f2:	7a1a      	ldrb	r2, [r3, #8]
    22f4:	7a59      	ldrb	r1, [r3, #9]
    22f6:	4291      	cmp	r1, r2
    22f8:	d08e      	beq.n	2218 <mayfly_run+0x10>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;

			mft[callee_id][caller_id].enable_ack =
    22fa:	725a      	strb	r2, [r3, #9]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;
    22fc:	2301      	movs	r3, #1
    22fe:	9300      	str	r3, [sp, #0]
    2300:	e78a      	b.n	2218 <mayfly_run+0x10>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    2302:	9b01      	ldr	r3, [sp, #4]
    2304:	2b00      	cmp	r3, #0
    2306:	d007      	beq.n	2318 <mayfly_run+0x110>
    2308:	9b00      	ldr	r3, [sp, #0]
    230a:	2b00      	cmp	r3, #0
    230c:	d104      	bne.n	2318 <mayfly_run+0x110>
		mayfly_enable_cb(callee_id, callee_id, 0);
    230e:	001a      	movs	r2, r3
    2310:	0029      	movs	r1, r5
    2312:	0028      	movs	r0, r5
    2314:	f005 fe7d 	bl	8012 <mayfly_enable_cb>
	}
}
    2318:	b007      	add	sp, #28
    231a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    231c:	20000408 	.word	0x20000408

00002320 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    2320:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2322:	0014      	movs	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2324:	2203      	movs	r2, #3

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    2326:	0005      	movs	r5, r0
	*mem_head = mem_pool;
    2328:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    232a:	1dc3      	adds	r3, r0, #7

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    232c:	1e60      	subs	r0, r4, #1
    232e:	b280      	uxth	r0, r0
    2330:	4348      	muls	r0, r1
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2332:	4393      	bics	r3, r2
    2334:	801c      	strh	r4, [r3, #0]

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    2336:	000e      	movs	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2338:	1828      	adds	r0, r5, r0
    233a:	3201      	adds	r2, #1
    233c:	2100      	movs	r1, #0
    233e:	f7fe fe25 	bl	f8c <memset>
    2342:	3c02      	subs	r4, #2
	       sizeof(mem_pool));
	while (mem_count--) {
    2344:	4b08      	ldr	r3, [pc, #32]	; (2368 <mem_init+0x48>)
    2346:	b2a4      	uxth	r4, r4
    2348:	429c      	cmp	r4, r3
    234a:	d00b      	beq.n	2364 <mem_init+0x44>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    234c:	1c60      	adds	r0, r4, #1
    234e:	4370      	muls	r0, r6
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    2350:	182b      	adds	r3, r5, r0
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2352:	1b80      	subs	r0, r0, r6
    2354:	1828      	adds	r0, r5, r0
    2356:	2204      	movs	r2, #4
    2358:	a901      	add	r1, sp, #4
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    235a:	9301      	str	r3, [sp, #4]
    235c:	3c01      	subs	r4, #1
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    235e:	f7fe fdeb 	bl	f38 <memcpy>
    2362:	e7ef      	b.n	2344 <mem_init+0x24>
		       (void *)&next, sizeof(next));
	}
}
    2364:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	0000ffff 	.word	0x0000ffff

0000236c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    236c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (*mem_head) {
    236e:	6805      	ldr	r5, [r0, #0]
		       (void *)&next, sizeof(next));
	}
}

void *mem_acquire(void **mem_head)
{
    2370:	0006      	movs	r6, r0
	if (*mem_head) {
    2372:	2d00      	cmp	r5, #0
    2374:	d011      	beq.n	239a <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2376:	2703      	movs	r7, #3
    2378:	1deb      	adds	r3, r5, #7
    237a:	43bb      	bics	r3, r7
    237c:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    237e:	2204      	movs	r2, #4
    2380:	0029      	movs	r1, r5
    2382:	a801      	add	r0, sp, #4
    2384:	f7fe fdd8 	bl	f38 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    2388:	9b01      	ldr	r3, [sp, #4]
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;
    238a:	3c01      	subs	r4, #1
    238c:	b2a4      	uxth	r4, r4

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));

		/* Store free mem_count after the list's next pointer */
		if (head) {
    238e:	2b00      	cmp	r3, #0
    2390:	d002      	beq.n	2398 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    2392:	1dda      	adds	r2, r3, #7
    2394:	43ba      	bics	r2, r7
    2396:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    2398:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    239a:	0028      	movs	r0, r5
    239c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000239e <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    239e:	680b      	ldr	r3, [r1, #0]

	return NULL;
}

void mem_release(void *mem, void **mem_head)
{
    23a0:	b570      	push	{r4, r5, r6, lr}
    23a2:	0005      	movs	r5, r0
    23a4:	000c      	movs	r4, r1
	u16_t free_count = 0;
    23a6:	1e1e      	subs	r6, r3, #0

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    23a8:	d003      	beq.n	23b2 <mem_release+0x14>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    23aa:	2203      	movs	r2, #3
    23ac:	3307      	adds	r3, #7
    23ae:	4393      	bics	r3, r2
    23b0:	881e      	ldrh	r6, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    23b2:	0028      	movs	r0, r5
    23b4:	2204      	movs	r2, #4
    23b6:	0021      	movs	r1, r4
    23b8:	f7fe fdbe 	bl	f38 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    23bc:	2203      	movs	r2, #3
    23be:	1deb      	adds	r3, r5, #7
    23c0:	3601      	adds	r6, #1
    23c2:	4393      	bics	r3, r2
    23c4:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    23c6:	6025      	str	r5, [r4, #0]
}
    23c8:	bd70      	pop	{r4, r5, r6, pc}

000023ca <mem_get>:
	return free_count;
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
    23ca:	434a      	muls	r2, r1
    23cc:	1880      	adds	r0, r0, r2
}
    23ce:	4770      	bx	lr

000023d0 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    23d0:	1a40      	subs	r0, r0, r1
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
    23d2:	b510      	push	{r4, lr}
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    23d4:	b280      	uxth	r0, r0
    23d6:	0011      	movs	r1, r2
    23d8:	f7fd fee2 	bl	1a0 <__aeabi_uidiv>
    23dc:	b280      	uxth	r0, r0
}
    23de:	bd10      	pop	{r4, pc}

000023e0 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    23e0:	b510      	push	{r4, lr}
	src += len;
	while (len--) {
    23e2:	4b06      	ldr	r3, [pc, #24]	; (23fc <mem_rcopy+0x1c>)
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
}

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    23e4:	1889      	adds	r1, r1, r2
	while (len--) {
    23e6:	3a01      	subs	r2, #1
    23e8:	b292      	uxth	r2, r2
    23ea:	429a      	cmp	r2, r3
    23ec:	d004      	beq.n	23f8 <mem_rcopy+0x18>
		*dst++ = *--src;
    23ee:	3901      	subs	r1, #1
    23f0:	780c      	ldrb	r4, [r1, #0]
    23f2:	7004      	strb	r4, [r0, #0]
    23f4:	3001      	adds	r0, #1
    23f6:	e7f6      	b.n	23e6 <mem_rcopy+0x6>
	}
}
    23f8:	bd10      	pop	{r4, pc}
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	0000ffff 	.word	0x0000ffff

00002400 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    2400:	6010      	str	r0, [r2, #0]
    2402:	6008      	str	r0, [r1, #0]

	return link;
}
    2404:	4770      	bx	lr

00002406 <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    2406:	6813      	ldr	r3, [r2, #0]
    2408:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    240a:	6813      	ldr	r3, [r2, #0]
    240c:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;

	return link;
}
    240e:	0008      	movs	r0, r1

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;

	/* increment the tail! */
	*tail = link;
    2410:	6011      	str	r1, [r2, #0]

	return link;
}
    2412:	4770      	bx	lr

00002414 <memq_peek>:
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
		return 0;
    2414:	2300      	movs	r3, #0
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2416:	4281      	cmp	r1, r0
    2418:	d005      	beq.n	2426 <memq_peek+0x12>
    241a:	000b      	movs	r3, r1

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    241c:	2a00      	cmp	r2, #0
    241e:	d002      	beq.n	2426 <memq_peek+0x12>
		*mem = *((void **)link + 1);
    2420:	684b      	ldr	r3, [r1, #4]
    2422:	6013      	str	r3, [r2, #0]
    2424:	000b      	movs	r3, r1
	}

	return link;
}
    2426:	0018      	movs	r0, r3
    2428:	4770      	bx	lr

0000242a <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    242a:	680b      	ldr	r3, [r1, #0]
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    242c:	4283      	cmp	r3, r0
    242e:	d004      	beq.n	243a <memq_dequeue+0x10>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    2430:	2a00      	cmp	r2, #0
    2432:	d005      	beq.n	2440 <memq_dequeue+0x16>
		*mem = *((void **)link + 1);
    2434:	6858      	ldr	r0, [r3, #4]
    2436:	6010      	str	r0, [r2, #0]
    2438:	e002      	b.n	2440 <memq_dequeue+0x16>

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    243a:	2300      	movs	r3, #0
    243c:	681b      	ldr	r3, [r3, #0]
    243e:	deff      	udf	#255	; 0xff
    2440:	681a      	ldr	r2, [r3, #0]

	return link;
}
    2442:	0018      	movs	r0, r3

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    2444:	600a      	str	r2, [r1, #0]

	return link;
}
    2446:	4770      	bx	lr

00002448 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    2448:	0002      	movs	r2, r0
    244a:	1841      	adds	r1, r0, r1
	u8_t one_count = 0;
    244c:	2000      	movs	r0, #0

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    244e:	b510      	push	{r4, lr}
	u8_t one_count = 0;

	while (octets_len--) {
    2450:	428a      	cmp	r2, r1
    2452:	d009      	beq.n	2468 <util_ones_count_get+0x20>
		u8_t bite;

		bite = *octets;
    2454:	7814      	ldrb	r4, [r2, #0]
		while (bite) {
    2456:	2c00      	cmp	r4, #0
    2458:	d004      	beq.n	2464 <util_ones_count_get+0x1c>
			bite &= (bite - 1);
    245a:	1e63      	subs	r3, r4, #1
    245c:	401c      	ands	r4, r3
			one_count++;
    245e:	1c43      	adds	r3, r0, #1
    2460:	b2d8      	uxtb	r0, r3
    2462:	e7f8      	b.n	2456 <util_ones_count_get+0xe>
		}
		octets++;
    2464:	3201      	adds	r2, #1
    2466:	e7f3      	b.n	2450 <util_ones_count_get+0x8>
	}

	return one_count;
}
    2468:	bd10      	pop	{r4, pc}
	...

0000246c <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    246c:	22a1      	movs	r2, #161	; 0xa1
    246e:	2100      	movs	r1, #0
    2470:	4b05      	ldr	r3, [pc, #20]	; (2488 <cntr_init+0x1c>)
    2472:	00d2      	lsls	r2, r2, #3
    2474:	5099      	str	r1, [r3, r2]
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    2476:	22c0      	movs	r2, #192	; 0xc0
    2478:	21d1      	movs	r1, #209	; 0xd1
    247a:	0292      	lsls	r2, r2, #10
    247c:	0089      	lsls	r1, r1, #2
    247e:	505a      	str	r2, [r3, r1]
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    2480:	3940      	subs	r1, #64	; 0x40
    2482:	505a      	str	r2, [r3, r1]
			     RTC_INTENSET_COMPARE1_Msk);
}
    2484:	4770      	bx	lr
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	4000b000 	.word	0x4000b000

0000248c <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    248c:	4a05      	ldr	r2, [pc, #20]	; (24a4 <cntr_start+0x18>)
    248e:	2001      	movs	r0, #1
    2490:	7813      	ldrb	r3, [r2, #0]
    2492:	1c59      	adds	r1, r3, #1
    2494:	7011      	strb	r1, [r2, #0]
    2496:	2b00      	cmp	r3, #0
    2498:	d102      	bne.n	24a0 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    249a:	4a03      	ldr	r2, [pc, #12]	; (24a8 <cntr_start+0x1c>)
    249c:	6010      	str	r0, [r2, #0]

	return 0;
    249e:	0018      	movs	r0, r3
}
    24a0:	4770      	bx	lr
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	200004c8 	.word	0x200004c8
    24a8:	4000b000 	.word	0x4000b000

000024ac <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    24ac:	4a08      	ldr	r2, [pc, #32]	; (24d0 <cntr_stop+0x24>)
    24ae:	7813      	ldrb	r3, [r2, #0]
    24b0:	2b00      	cmp	r3, #0
    24b2:	d102      	bne.n	24ba <cntr_stop+0xe>
    24b4:	b662      	cpsie	i
    24b6:	2004      	movs	r0, #4
    24b8:	df02      	svc	2

	if (--_refcount) {
    24ba:	3b01      	subs	r3, #1
    24bc:	b2db      	uxtb	r3, r3
    24be:	7013      	strb	r3, [r2, #0]
    24c0:	2001      	movs	r0, #1
    24c2:	2b00      	cmp	r3, #0
    24c4:	d102      	bne.n	24cc <cntr_stop+0x20>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    24c6:	4a03      	ldr	r2, [pc, #12]	; (24d4 <cntr_stop+0x28>)
    24c8:	6050      	str	r0, [r2, #4]

	return 0;
    24ca:	0018      	movs	r0, r3
}
    24cc:	4770      	bx	lr
    24ce:	46c0      	nop			; (mov r8, r8)
    24d0:	200004c8 	.word	0x200004c8
    24d4:	4000b000 	.word	0x4000b000

000024d8 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    24d8:	4b01      	ldr	r3, [pc, #4]	; (24e0 <cntr_cnt_get+0x8>)
    24da:	4a02      	ldr	r2, [pc, #8]	; (24e4 <cntr_cnt_get+0xc>)
    24dc:	58d0      	ldr	r0, [r2, r3]
}
    24de:	4770      	bx	lr
    24e0:	00000504 	.word	0x00000504
    24e4:	4000b000 	.word	0x4000b000

000024e8 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    24e8:	3051      	adds	r0, #81	; 0x51
    24ea:	4b02      	ldr	r3, [pc, #8]	; (24f4 <cntr_cmp_set+0xc>)
    24ec:	30ff      	adds	r0, #255	; 0xff
    24ee:	0080      	lsls	r0, r0, #2
    24f0:	50c1      	str	r1, [r0, r3]
}
    24f2:	4770      	bx	lr
    24f4:	4000b000 	.word	0x4000b000

000024f8 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    24f8:	2101      	movs	r1, #1
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    24fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    24fc:	4b0f      	ldr	r3, [pc, #60]	; (253c <do_ecb+0x44>)
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    24fe:	4c10      	ldr	r4, [pc, #64]	; (2540 <do_ecb+0x48>)
    2500:	2500      	movs	r5, #0

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    2502:	4a10      	ldr	r2, [pc, #64]	; (2544 <do_ecb+0x4c>)
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    2504:	6059      	str	r1, [r3, #4]
    2506:	0017      	movs	r7, r2
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    2508:	5098      	str	r0, [r3, r2]
		NRF_ECB->EVENTS_ENDECB = 0;
    250a:	6065      	str	r5, [r4, #4]
		NRF_ECB->EVENTS_ERRORECB = 0;
    250c:	60a5      	str	r5, [r4, #8]
    250e:	4d0c      	ldr	r5, [pc, #48]	; (2540 <do_ecb+0x48>)
		NRF_ECB->TASKS_STARTECB = 1;
    2510:	6019      	str	r1, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    2512:	686e      	ldr	r6, [r5, #4]
    2514:	2e00      	cmp	r6, #0
    2516:	d105      	bne.n	2524 <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    2518:	68a6      	ldr	r6, [r4, #8]
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    251a:	2e00      	cmp	r6, #0
    251c:	d102      	bne.n	2524 <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
    251e:	59de      	ldr	r6, [r3, r7]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    2520:	2e00      	cmp	r6, #0
    2522:	d1f6      	bne.n	2512 <do_ecb+0x1a>
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    2524:	4e05      	ldr	r6, [pc, #20]	; (253c <do_ecb+0x44>)
    2526:	6071      	str	r1, [r6, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    2528:	68ad      	ldr	r5, [r5, #8]
    252a:	2d00      	cmp	r5, #0
    252c:	d1e8      	bne.n	2500 <do_ecb+0x8>
    252e:	589a      	ldr	r2, [r3, r2]
    2530:	2a00      	cmp	r2, #0
    2532:	d0e5      	beq.n	2500 <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
    2534:	4b03      	ldr	r3, [pc, #12]	; (2544 <do_ecb+0x4c>)
    2536:	50f5      	str	r5, [r6, r3]
}
    2538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	4000e000 	.word	0x4000e000
    2540:	4000e0fc 	.word	0x4000e0fc
    2544:	00000504 	.word	0x00000504

00002548 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    2548:	b570      	push	{r4, r5, r6, lr}
    254a:	000e      	movs	r6, r1
    254c:	b08c      	sub	sp, #48	; 0x30
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    254e:	0001      	movs	r1, r0
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    2550:	0015      	movs	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    2552:	4668      	mov	r0, sp
    2554:	2210      	movs	r2, #16
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    2556:	001c      	movs	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    2558:	f7ff ff42 	bl	23e0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    255c:	a804      	add	r0, sp, #16
    255e:	2210      	movs	r2, #16
    2560:	0031      	movs	r1, r6
    2562:	f7ff ff3d 	bl	23e0 <mem_rcopy>

	do_ecb(&ecb);
    2566:	4668      	mov	r0, sp
    2568:	f7ff ffc6 	bl	24f8 <do_ecb>

	if (cipher_text_le) {
    256c:	2d00      	cmp	r5, #0
    256e:	d004      	beq.n	257a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    2570:	2210      	movs	r2, #16
    2572:	a908      	add	r1, sp, #32
    2574:	0028      	movs	r0, r5
    2576:	f7ff ff33 	bl	23e0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    257a:	2c00      	cmp	r4, #0
    257c:	d004      	beq.n	2588 <ecb_encrypt+0x40>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    257e:	2210      	movs	r2, #16
    2580:	a908      	add	r1, sp, #32
    2582:	0020      	movs	r0, r4
    2584:	f7fe fcd8 	bl	f38 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    2588:	b00c      	add	sp, #48	; 0x30
    258a:	bd70      	pop	{r4, r5, r6, pc}

0000258c <isr_radio>:

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
	if (sfp_radio_isr) {
    258c:	4b03      	ldr	r3, [pc, #12]	; (259c <isr_radio+0x10>)
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    258e:	b510      	push	{r4, lr}
	if (sfp_radio_isr) {
    2590:	681b      	ldr	r3, [r3, #0]
    2592:	2b00      	cmp	r3, #0
    2594:	d000      	beq.n	2598 <isr_radio+0xc>
		sfp_radio_isr();
    2596:	4798      	blx	r3
	}
}
    2598:	bd10      	pop	{r4, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	20000524 	.word	0x20000524

000025a0 <radio_isr_set>:

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    25a0:	4b08      	ldr	r3, [pc, #32]	; (25c4 <radio_isr_set+0x24>)
		sfp_radio_isr();
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    25a2:	b510      	push	{r4, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    25a4:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    25a6:	23c1      	movs	r3, #193	; 0xc1
    25a8:	2110      	movs	r1, #16
    25aa:	4a07      	ldr	r2, [pc, #28]	; (25c8 <radio_isr_set+0x28>)
    25ac:	009b      	lsls	r3, r3, #2
    25ae:	50d1      	str	r1, [r2, r3]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    25b0:	4a06      	ldr	r2, [pc, #24]	; (25cc <radio_isr_set+0x2c>)
    25b2:	3b85      	subs	r3, #133	; 0x85
    25b4:	390e      	subs	r1, #14
    25b6:	3bff      	subs	r3, #255	; 0xff
    25b8:	50d1      	str	r1, [r2, r3]
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    25ba:	2001      	movs	r0, #1
    25bc:	f006 fa22 	bl	8a04 <_arch_irq_enable>
}
    25c0:	bd10      	pop	{r4, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	20000524 	.word	0x20000524
    25c8:	40001000 	.word	0x40001000
    25cc:	e000e100 	.word	0xe000e100

000025d0 <radio_reset>:

void radio_reset(void)
{
    25d0:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
    25d2:	2001      	movs	r0, #1
    25d4:	f006 fa20 	bl	8a18 <_arch_irq_disable>

	NRF_RADIO->POWER =
    25d8:	2100      	movs	r1, #0
    25da:	4a03      	ldr	r2, [pc, #12]	; (25e8 <radio_reset+0x18>)
    25dc:	4b03      	ldr	r3, [pc, #12]	; (25ec <radio_reset+0x1c>)
    25de:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    25e0:	3101      	adds	r1, #1
    25e2:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Enabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
}
    25e4:	bd10      	pop	{r4, pc}
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	40001000 	.word	0x40001000
    25ec:	00000ffc 	.word	0x00000ffc

000025f0 <radio_phy_set>:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

#if defined(CONFIG_SOC_SERIES_NRF51X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
    25f0:	2301      	movs	r3, #1

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    25f2:	2802      	cmp	r0, #2
    25f4:	d000      	beq.n	25f8 <radio_phy_set+0x8>
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    25f6:	3302      	adds	r3, #2
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    25f8:	22a2      	movs	r2, #162	; 0xa2
    25fa:	4902      	ldr	r1, [pc, #8]	; (2604 <radio_phy_set+0x14>)
    25fc:	00d2      	lsls	r2, r2, #3
    25fe:	508b      	str	r3, [r1, r2]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_RADIO_ENABLE_FAST)
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
				RADIO_MODECNF0_RU_Pos) &
			       RADIO_MODECNF0_RU_Msk;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_RADIO_ENABLE_FAST */
}
    2600:	4770      	bx	lr
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	40001000 	.word	0x40001000

00002608 <radio_tx_power_set>:

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    2608:	4b01      	ldr	r3, [pc, #4]	; (2610 <radio_tx_power_set+0x8>)
    260a:	4a02      	ldr	r2, [pc, #8]	; (2614 <radio_tx_power_set+0xc>)
    260c:	50d0      	str	r0, [r2, r3]
}
    260e:	4770      	bx	lr
    2610:	0000050c 	.word	0x0000050c
    2614:	40001000 	.word	0x40001000

00002618 <radio_freq_chan_set>:

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    2618:	23a1      	movs	r3, #161	; 0xa1
    261a:	4a02      	ldr	r2, [pc, #8]	; (2624 <radio_freq_chan_set+0xc>)
    261c:	00db      	lsls	r3, r3, #3
    261e:	50d0      	str	r0, [r2, r3]
}
    2620:	4770      	bx	lr
    2622:	46c0      	nop			; (mov r8, r8)
    2624:	40001000 	.word	0x40001000

00002628 <radio_whiten_iv_set>:

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    2628:	4b01      	ldr	r3, [pc, #4]	; (2630 <radio_whiten_iv_set+0x8>)
    262a:	4a02      	ldr	r2, [pc, #8]	; (2634 <radio_whiten_iv_set+0xc>)
    262c:	50d0      	str	r0, [r2, r3]
}
    262e:	4770      	bx	lr
    2630:	00000554 	.word	0x00000554
    2634:	40001000 	.word	0x40001000

00002638 <radio_aa_set>:

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    2638:	2200      	movs	r2, #0
    263a:	490a      	ldr	r1, [pc, #40]	; (2664 <radio_aa_set+0x2c>)
    263c:	4b0a      	ldr	r3, [pc, #40]	; (2668 <radio_aa_set+0x30>)
    263e:	50ca      	str	r2, [r1, r3]
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    2640:	3201      	adds	r2, #1
    2642:	3304      	adds	r3, #4
    2644:	50ca      	str	r2, [r1, r3]
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    2646:	78c2      	ldrb	r2, [r0, #3]
    2648:	4b08      	ldr	r3, [pc, #32]	; (266c <radio_aa_set+0x34>)
    264a:	50ca      	str	r2, [r1, r3]
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    264c:	7883      	ldrb	r3, [r0, #2]
    264e:	061a      	lsls	r2, r3, #24
    2650:	7843      	ldrb	r3, [r0, #1]
    2652:	041b      	lsls	r3, r3, #16
    2654:	4313      	orrs	r3, r2
    2656:	7802      	ldrb	r2, [r0, #0]
    2658:	0212      	lsls	r2, r2, #8
    265a:	4313      	orrs	r3, r2
    265c:	4a04      	ldr	r2, [pc, #16]	; (2670 <radio_aa_set+0x38>)
    265e:	508b      	str	r3, [r1, r2]
}
    2660:	4770      	bx	lr
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	40001000 	.word	0x40001000
    2668:	0000052c 	.word	0x0000052c
    266c:	00000524 	.word	0x00000524
    2670:	0000051c 	.word	0x0000051c

00002674 <radio_pkt_configure>:
	ARG_UNUSED(phy);

	extra = 0;

	/* nRF51 supports only 27 byte PDU when using h/w CCM for encryption. */
	if (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR) && dc) {
    2674:	07d3      	lsls	r3, r2, #31
    2676:	d500      	bpl.n	267a <radio_pkt_configure+0x6>
		bits_len = 5;
    2678:	2005      	movs	r0, #5
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
    267a:	2208      	movs	r2, #8
    267c:	23f0      	movs	r3, #240	; 0xf0
    267e:	1a12      	subs	r2, r2, r0
    2680:	031b      	lsls	r3, r3, #12
    2682:	0412      	lsls	r2, r2, #16
    2684:	401a      	ands	r2, r3
    2686:	230f      	movs	r3, #15
    2688:	4003      	ands	r3, r0
    268a:	2080      	movs	r0, #128	; 0x80
    268c:	0040      	lsls	r0, r0, #1
    268e:	4318      	orrs	r0, r3
    2690:	4310      	orrs	r0, r2
		extra |= (RADIO_PCNF0_S1INCL_Include <<
			  RADIO_PCNF0_S1INCL_Pos) & RADIO_PCNF0_S1INCL_Msk;
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    2692:	4b04      	ldr	r3, [pc, #16]	; (26a4 <radio_pkt_configure+0x30>)
    2694:	4a04      	ldr	r2, [pc, #16]	; (26a8 <radio_pkt_configure+0x34>)
    2696:	5098      	str	r0, [r3, r2]
			       RADIO_PCNF1_STATLEN_Msk) |
			     (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			       RADIO_PCNF1_BALEN_Msk) |
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
    2698:	4a04      	ldr	r2, [pc, #16]	; (26ac <radio_pkt_configure+0x38>)
    269a:	4311      	orrs	r1, r2
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
			   extra;

	NRF_RADIO->PCNF1 = (((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    269c:	22a3      	movs	r2, #163	; 0xa3
    269e:	00d2      	lsls	r2, r2, #3
    26a0:	5099      	str	r1, [r3, r2]
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
			     (((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
			       RADIO_PCNF1_WHITEEN_Msk));
}
    26a2:	4770      	bx	lr
    26a4:	40001000 	.word	0x40001000
    26a8:	00000514 	.word	0x00000514
    26ac:	02030000 	.word	0x02030000

000026b0 <radio_pkt_rx_set>:
    26b0:	4b01      	ldr	r3, [pc, #4]	; (26b8 <radio_pkt_rx_set+0x8>)
    26b2:	4a02      	ldr	r2, [pc, #8]	; (26bc <radio_pkt_rx_set+0xc>)
    26b4:	50d0      	str	r0, [r2, r3]
    26b6:	4770      	bx	lr
    26b8:	00000504 	.word	0x00000504
    26bc:	40001000 	.word	0x40001000

000026c0 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    26c0:	4b01      	ldr	r3, [pc, #4]	; (26c8 <radio_pkt_tx_set+0x8>)
    26c2:	4a02      	ldr	r2, [pc, #8]	; (26cc <radio_pkt_tx_set+0xc>)
    26c4:	50d0      	str	r0, [r2, r3]
}
    26c6:	4770      	bx	lr
    26c8:	00000504 	.word	0x00000504
    26cc:	40001000 	.word	0x40001000

000026d0 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    26d0:	208c      	movs	r0, #140	; 0x8c
    26d2:	4770      	bx	lr

000026d4 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    26d4:	2001      	movs	r0, #1
    26d6:	4770      	bx	lr

000026d8 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    26d8:	208a      	movs	r0, #138	; 0x8a
    26da:	4770      	bx	lr

000026dc <radio_rx_chain_delay_get>:
	case BIT(1):
		return 5; /* ceil(5) */
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    26dc:	2003      	movs	r0, #3
    26de:	4770      	bx	lr

000026e0 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    26e0:	2201      	movs	r2, #1
    26e2:	4b01      	ldr	r3, [pc, #4]	; (26e8 <radio_rx_enable+0x8>)
    26e4:	605a      	str	r2, [r3, #4]
}
    26e6:	4770      	bx	lr
    26e8:	40001000 	.word	0x40001000

000026ec <radio_tx_enable>:

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    26ec:	2201      	movs	r2, #1
    26ee:	4b01      	ldr	r3, [pc, #4]	; (26f4 <radio_tx_enable+0x8>)
    26f0:	601a      	str	r2, [r3, #0]
}
    26f2:	4770      	bx	lr
    26f4:	40001000 	.word	0x40001000

000026f8 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    26f8:	2280      	movs	r2, #128	; 0x80
    26fa:	2100      	movs	r1, #0
    26fc:	4b02      	ldr	r3, [pc, #8]	; (2708 <radio_disable+0x10>)
    26fe:	0092      	lsls	r2, r2, #2
    2700:	5099      	str	r1, [r3, r2]
	NRF_RADIO->TASKS_DISABLE = 1;
    2702:	2201      	movs	r2, #1
    2704:	611a      	str	r2, [r3, #16]
}
    2706:	4770      	bx	lr
    2708:	40001000 	.word	0x40001000

0000270c <radio_status_reset>:

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    270c:	2200      	movs	r2, #0
    270e:	4b03      	ldr	r3, [pc, #12]	; (271c <radio_status_reset+0x10>)
    2710:	605a      	str	r2, [r3, #4]
	NRF_RADIO->EVENTS_ADDRESS = 0;
    2712:	609a      	str	r2, [r3, #8]
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    2714:	60da      	str	r2, [r3, #12]
	NRF_RADIO->EVENTS_END = 0;
    2716:	611a      	str	r2, [r3, #16]
	NRF_RADIO->EVENTS_DISABLED = 0;
    2718:	615a      	str	r2, [r3, #20]
}
    271a:	4770      	bx	lr
    271c:	400010fc 	.word	0x400010fc

00002720 <radio_is_ready>:

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    2720:	4b02      	ldr	r3, [pc, #8]	; (272c <radio_is_ready+0xc>)
    2722:	6858      	ldr	r0, [r3, #4]
    2724:	1e43      	subs	r3, r0, #1
    2726:	4198      	sbcs	r0, r3
}
    2728:	4770      	bx	lr
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	400010fc 	.word	0x400010fc

00002730 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    2730:	4b02      	ldr	r3, [pc, #8]	; (273c <radio_is_done+0xc>)
    2732:	6918      	ldr	r0, [r3, #16]
    2734:	1e43      	subs	r3, r0, #1
    2736:	4198      	sbcs	r0, r3
}
    2738:	4770      	bx	lr
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	400010fc 	.word	0x400010fc

00002740 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    2740:	23aa      	movs	r3, #170	; 0xaa
    2742:	4a03      	ldr	r2, [pc, #12]	; (2750 <radio_is_idle+0x10>)
    2744:	00db      	lsls	r3, r3, #3
    2746:	58d0      	ldr	r0, [r2, r3]
    2748:	4243      	negs	r3, r0
    274a:	4158      	adcs	r0, r3
}
    274c:	4770      	bx	lr
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	40001000 	.word	0x40001000

00002754 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
    2754:	b510      	push	{r4, lr}
	NRF_RADIO->CRCCNF =
    2756:	2404      	movs	r4, #4
    2758:	4b04      	ldr	r3, [pc, #16]	; (276c <radio_crc_configure+0x18>)
    275a:	4a05      	ldr	r2, [pc, #20]	; (2770 <radio_crc_configure+0x1c>)
    275c:	34ff      	adds	r4, #255	; 0xff
    275e:	509c      	str	r4, [r3, r2]
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    2760:	3204      	adds	r2, #4
    2762:	5098      	str	r0, [r3, r2]
	NRF_RADIO->CRCINIT = iv;
    2764:	4a03      	ldr	r2, [pc, #12]	; (2774 <radio_crc_configure+0x20>)
    2766:	5099      	str	r1, [r3, r2]
}
    2768:	bd10      	pop	{r4, pc}
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	40001000 	.word	0x40001000
    2770:	00000534 	.word	0x00000534
    2774:	0000053c 	.word	0x0000053c

00002778 <radio_crc_is_valid>:

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    2778:	2380      	movs	r3, #128	; 0x80
    277a:	4a03      	ldr	r2, [pc, #12]	; (2788 <radio_crc_is_valid+0x10>)
    277c:	00db      	lsls	r3, r3, #3
    277e:	58d0      	ldr	r0, [r2, r3]
    2780:	1e43      	subs	r3, r0, #1
    2782:	4198      	sbcs	r0, r3
}
    2784:	4770      	bx	lr
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	40001000 	.word	0x40001000

0000278c <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    278c:	4800      	ldr	r0, [pc, #0]	; (2790 <radio_pkt_empty_get+0x4>)
    278e:	4770      	bx	lr
    2790:	200004f4 	.word	0x200004f4

00002794 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    2794:	4800      	ldr	r0, [pc, #0]	; (2798 <radio_pkt_scratch_get+0x4>)
    2796:	4770      	bx	lr
    2798:	200004cc 	.word	0x200004cc

0000279c <radio_switch_complete_and_rx>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    279c:	2380      	movs	r3, #128	; 0x80
    279e:	210b      	movs	r1, #11
    27a0:	4a01      	ldr	r2, [pc, #4]	; (27a8 <radio_switch_complete_and_rx+0xc>)
    27a2:	009b      	lsls	r3, r3, #2
    27a4:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, phy, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    27a6:	4770      	bx	lr
    27a8:	40001000 	.word	0x40001000

000027ac <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy, u8_t flags)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    27ac:	2380      	movs	r3, #128	; 0x80
    27ae:	2107      	movs	r1, #7
    27b0:	4a01      	ldr	r2, [pc, #4]	; (27b8 <radio_switch_complete_and_tx+0xc>)
    27b2:	009b      	lsls	r3, r3, #2
    27b4:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy, flags);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    27b6:	4770      	bx	lr
    27b8:	40001000 	.word	0x40001000

000027bc <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    27bc:	2380      	movs	r3, #128	; 0x80
    27be:	2103      	movs	r1, #3
    27c0:	4a01      	ldr	r2, [pc, #4]	; (27c8 <radio_switch_complete_and_disable+0xc>)
    27c2:	009b      	lsls	r3, r3, #2
    27c4:	50d1      	str	r1, [r2, r3]
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    27c6:	4770      	bx	lr
    27c8:	40001000 	.word	0x40001000

000027cc <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    27cc:	2280      	movs	r2, #128	; 0x80
    27ce:	2088      	movs	r0, #136	; 0x88
    27d0:	4903      	ldr	r1, [pc, #12]	; (27e0 <radio_rssi_measure+0x14>)
    27d2:	0092      	lsls	r2, r2, #2
    27d4:	588b      	ldr	r3, [r1, r2]
    27d6:	0040      	lsls	r0, r0, #1
    27d8:	4303      	orrs	r3, r0
    27da:	508b      	str	r3, [r1, r2]
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    27dc:	4770      	bx	lr
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	40001000 	.word	0x40001000

000027e4 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    27e4:	23a9      	movs	r3, #169	; 0xa9
    27e6:	4a02      	ldr	r2, [pc, #8]	; (27f0 <radio_rssi_get+0xc>)
    27e8:	00db      	lsls	r3, r3, #3
    27ea:	58d0      	ldr	r0, [r2, r3]
}
    27ec:	4770      	bx	lr
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	40001000 	.word	0x40001000

000027f4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    27f4:	2200      	movs	r2, #0
    27f6:	4b01      	ldr	r3, [pc, #4]	; (27fc <radio_rssi_status_reset+0x8>)
    27f8:	621a      	str	r2, [r3, #32]
}
    27fa:	4770      	bx	lr
    27fc:	400010fc 	.word	0x400010fc

00002800 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    2800:	4b02      	ldr	r3, [pc, #8]	; (280c <radio_rssi_is_ready+0xc>)
    2802:	6a18      	ldr	r0, [r3, #32]
    2804:	1e43      	subs	r3, r0, #1
    2806:	4198      	sbcs	r0, r3
}
    2808:	4770      	bx	lr
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	400010fc 	.word	0x400010fc

00002810 <radio_filter_configure>:
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    2810:	23c0      	movs	r3, #192	; 0xc0
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
}

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    2812:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    2814:	00db      	lsls	r3, r3, #3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    2816:	27c4      	movs	r7, #196	; 0xc4
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
}

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    2818:	2600      	movs	r6, #0
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    281a:	469c      	mov	ip, r3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    281c:	00ff      	lsls	r7, r7, #3
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    281e:	7854      	ldrb	r4, [r2, #1]
    2820:	7813      	ldrb	r3, [r2, #0]
    2822:	0224      	lsls	r4, r4, #8
    2824:	431c      	orrs	r4, r3
    2826:	7893      	ldrb	r3, [r2, #2]
    2828:	4d0d      	ldr	r5, [pc, #52]	; (2860 <radio_filter_configure+0x50>)
    282a:	041b      	lsls	r3, r3, #16
    282c:	4323      	orrs	r3, r4
    282e:	001c      	movs	r4, r3
    2830:	78d3      	ldrb	r3, [r2, #3]
    2832:	061b      	lsls	r3, r3, #24
    2834:	4323      	orrs	r3, r4
    2836:	00b4      	lsls	r4, r6, #2
    2838:	1964      	adds	r4, r4, r5
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    283a:	4665      	mov	r5, ip
    283c:	5163      	str	r3, [r4, r5]
    283e:	7953      	ldrb	r3, [r2, #5]
    2840:	7915      	ldrb	r5, [r2, #4]
    2842:	021b      	lsls	r3, r3, #8
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    2844:	432b      	orrs	r3, r5
    2846:	3601      	adds	r6, #1
    2848:	51e3      	str	r3, [r4, r7]
		bdaddr += 6;
    284a:	3206      	adds	r2, #6
void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
    284c:	2e08      	cmp	r6, #8
    284e:	d1e6      	bne.n	281e <radio_filter_configure+0xe>
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    2850:	23c8      	movs	r3, #200	; 0xc8
    2852:	0209      	lsls	r1, r1, #8
    2854:	4a02      	ldr	r2, [pc, #8]	; (2860 <radio_filter_configure+0x50>)
    2856:	4308      	orrs	r0, r1
    2858:	00db      	lsls	r3, r3, #3
    285a:	50d0      	str	r0, [r2, r3]
}
    285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	40001000 	.word	0x40001000

00002864 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    2864:	22c8      	movs	r2, #200	; 0xc8
    2866:	20ff      	movs	r0, #255	; 0xff
    2868:	4902      	ldr	r1, [pc, #8]	; (2874 <radio_filter_disable+0x10>)
    286a:	00d2      	lsls	r2, r2, #3
    286c:	588b      	ldr	r3, [r1, r2]
    286e:	4383      	bics	r3, r0
    2870:	508b      	str	r3, [r1, r2]
}
    2872:	4770      	bx	lr
    2874:	40001000 	.word	0x40001000

00002878 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    2878:	2200      	movs	r2, #0
    287a:	4b02      	ldr	r3, [pc, #8]	; (2884 <radio_filter_status_reset+0xc>)
    287c:	619a      	str	r2, [r3, #24]
	NRF_RADIO->EVENTS_DEVMISS = 0;
    287e:	61da      	str	r2, [r3, #28]
}
    2880:	4770      	bx	lr
    2882:	46c0      	nop			; (mov r8, r8)
    2884:	400010fc 	.word	0x400010fc

00002888 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    2888:	4b02      	ldr	r3, [pc, #8]	; (2894 <radio_filter_has_match+0xc>)
    288a:	6998      	ldr	r0, [r3, #24]
    288c:	1e43      	subs	r3, r0, #1
    288e:	4198      	sbcs	r0, r3
}
    2890:	4770      	bx	lr
    2892:	46c0      	nop			; (mov r8, r8)
    2894:	400010fc 	.word	0x400010fc

00002898 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    2898:	22ac      	movs	r2, #172	; 0xac
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    289a:	2180      	movs	r1, #128	; 0x80
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
}

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    289c:	4b04      	ldr	r3, [pc, #16]	; (28b0 <radio_bc_configure+0x18>)
    289e:	00d2      	lsls	r2, r2, #3
    28a0:	5098      	str	r0, [r3, r2]
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    28a2:	2040      	movs	r0, #64	; 0x40
    28a4:	0089      	lsls	r1, r1, #2
    28a6:	585a      	ldr	r2, [r3, r1]
    28a8:	4302      	orrs	r2, r0
    28aa:	505a      	str	r2, [r3, r1]
}
    28ac:	4770      	bx	lr
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	40001000 	.word	0x40001000

000028b4 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    28b4:	2180      	movs	r1, #128	; 0x80
    28b6:	23d2      	movs	r3, #210	; 0xd2
    28b8:	4a04      	ldr	r2, [pc, #16]	; (28cc <radio_tmr_status_reset+0x18>)
    28ba:	02c9      	lsls	r1, r1, #11
    28bc:	009b      	lsls	r3, r3, #2
    28be:	50d1      	str	r1, [r2, r3]
	NRF_PPI->CHENCLR =
    28c0:	21ff      	movs	r1, #255	; 0xff
    28c2:	4a03      	ldr	r2, [pc, #12]	; (28d0 <radio_tmr_status_reset+0x1c>)
    28c4:	33c1      	adds	r3, #193	; 0xc1
    28c6:	33ff      	adds	r3, #255	; 0xff
    28c8:	50d1      	str	r1, [r2, r3]
	    (PPI_CHEN_CH0_Msk | PPI_CHEN_CH1_Msk | PPI_CHEN_CH2_Msk |
	     PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
	     PPI_CHEN_CH6_Msk | PPI_CHEN_CH7_Msk);
}
    28ca:	4770      	bx	lr
    28cc:	4000b000 	.word	0x4000b000
    28d0:	4001f000 	.word	0x4001f000

000028d4 <radio_tmr_tifs_set>:

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    28d4:	4b01      	ldr	r3, [pc, #4]	; (28dc <radio_tmr_tifs_set+0x8>)
    28d6:	4a02      	ldr	r2, [pc, #8]	; (28e0 <radio_tmr_tifs_set+0xc>)
    28d8:	50d0      	str	r0, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    28da:	4770      	bx	lr
    28dc:	00000544 	.word	0x00000544
    28e0:	40001000 	.word	0x40001000

000028e4 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    28e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    28e6:	4b20      	ldr	r3, [pc, #128]	; (2968 <radio_tmr_start+0x84>)
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    28e8:	000c      	movs	r4, r1
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    28ea:	18d1      	adds	r1, r2, r3
    28ec:	4b1f      	ldr	r3, [pc, #124]	; (296c <radio_tmr_start+0x88>)
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    28ee:	9001      	str	r0, [sp, #4]
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    28f0:	4299      	cmp	r1, r3
    28f2:	d902      	bls.n	28fa <radio_tmr_start+0x16>
		ticks_start--;
		remainder += 30517578UL;
    28f4:	4b1e      	ldr	r3, [pc, #120]	; (2970 <radio_tmr_start+0x8c>)
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
    28f6:	3c01      	subs	r4, #1
		remainder += 30517578UL;
    28f8:	18d2      	adds	r2, r2, r3
	}
	remainder /= 1000000UL;
    28fa:	491e      	ldr	r1, [pc, #120]	; (2974 <radio_tmr_start+0x90>)
    28fc:	0010      	movs	r0, r2
    28fe:	f7fd fc4f 	bl	1a0 <__aeabi_uidiv>

	NRF_TIMER0->TASKS_CLEAR = 1;
    2902:	2201      	movs	r2, #1
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    2904:	25a2      	movs	r5, #162	; 0xa2
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    2906:	2600      	movs	r6, #0
	NRF_TIMER0->PRESCALER = 4;
    2908:	2704      	movs	r7, #4
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    290a:	4b1b      	ldr	r3, [pc, #108]	; (2978 <radio_tmr_start+0x94>)
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    290c:	00ed      	lsls	r5, r5, #3
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    290e:	60da      	str	r2, [r3, #12]
	NRF_TIMER0->MODE = 0;
    2910:	4a1a      	ldr	r2, [pc, #104]	; (297c <radio_tmr_start+0x98>)
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    2912:	2102      	movs	r1, #2
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    2914:	509e      	str	r6, [r3, r2]
	NRF_TIMER0->PRESCALER = 4;
    2916:	515f      	str	r7, [r3, r5]
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    2918:	27a1      	movs	r7, #161	; 0xa1
    291a:	00ff      	lsls	r7, r7, #3
    291c:	51d9      	str	r1, [r3, r7]

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
    291e:	21a9      	movs	r1, #169	; 0xa9
	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
    2920:	3738      	adds	r7, #56	; 0x38
    2922:	51d8      	str	r0, [r3, r7]
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    2924:	4f16      	ldr	r7, [pc, #88]	; (2980 <radio_tmr_start+0x9c>)

	NRF_RTC0->CC[2] = ticks_start;
    2926:	00c9      	lsls	r1, r1, #3
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    2928:	647e      	str	r6, [r7, #68]	; 0x44

	NRF_RTC0->CC[2] = ticks_start;
    292a:	4f16      	ldr	r7, [pc, #88]	; (2984 <radio_tmr_start+0xa0>)
    292c:	507c      	str	r4, [r7, r1]
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    292e:	2180      	movs	r1, #128	; 0x80
    2930:	24d1      	movs	r4, #209	; 0xd1
    2932:	02c9      	lsls	r1, r1, #11
    2934:	00a4      	lsls	r4, r4, #2
    2936:	5139      	str	r1, [r7, r4]
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    2938:	4c13      	ldr	r4, [pc, #76]	; (2988 <radio_tmr_start+0xa4>)

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    293a:	4f14      	ldr	r7, [pc, #80]	; (298c <radio_tmr_start+0xa8>)
	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    293c:	64e6      	str	r6, [r4, #76]	; 0x4c

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    293e:	26a3      	movs	r6, #163	; 0xa3
    2940:	4c13      	ldr	r4, [pc, #76]	; (2990 <radio_tmr_start+0xac>)
    2942:	00f6      	lsls	r6, r6, #3
    2944:	51a7      	str	r7, [r4, r6]
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    2946:	4e13      	ldr	r6, [pc, #76]	; (2994 <radio_tmr_start+0xb0>)
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    2948:	9901      	ldr	r1, [sp, #4]
	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    294a:	51a3      	str	r3, [r4, r6]
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    294c:	2302      	movs	r3, #2
    294e:	4e12      	ldr	r6, [pc, #72]	; (2998 <radio_tmr_start+0xb4>)
    2950:	50a3      	str	r3, [r4, r2]
    2952:	4b12      	ldr	r3, [pc, #72]	; (299c <radio_tmr_start+0xb8>)

	if (trx) {
		NRF_PPI->CH[0].EEP =
    2954:	5166      	str	r6, [r4, r5]

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    2956:	2900      	cmp	r1, #0
    2958:	d001      	beq.n	295e <radio_tmr_start+0x7a>
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    295a:	4d11      	ldr	r5, [pc, #68]	; (29a0 <radio_tmr_start+0xbc>)
    295c:	e000      	b.n	2960 <radio_tmr_start+0x7c>
			(u32_t)&(NRF_RADIO->TASKS_TXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
	} else {
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    295e:	4d11      	ldr	r5, [pc, #68]	; (29a4 <radio_tmr_start+0xc0>)
    2960:	50e5      	str	r5, [r4, r3]
			(u32_t)&(NRF_RADIO->TASKS_RXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    2962:	2301      	movs	r3, #1
    2964:	50a3      	str	r3, [r4, r2]
	NRF_PPI->CHG[0] = PPI_CHG_CH9_Msk | PPI_CHG_CH12_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	return remainder;
}
    2966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2968:	fff0bdc0 	.word	0xfff0bdc0
    296c:	7ff0bdbf 	.word	0x7ff0bdbf
    2970:	01d1a94a 	.word	0x01d1a94a
    2974:	000f4240 	.word	0x000f4240
    2978:	40008000 	.word	0x40008000
    297c:	00000504 	.word	0x00000504
    2980:	400080fc 	.word	0x400080fc
    2984:	4000b000 	.word	0x4000b000
    2988:	4000b0fc 	.word	0x4000b0fc
    298c:	4000b148 	.word	0x4000b148
    2990:	4001f000 	.word	0x4001f000
    2994:	0000051c 	.word	0x0000051c
    2998:	40008140 	.word	0x40008140
    299c:	00000514 	.word	0x00000514
    29a0:	40001000 	.word	0x40001000
    29a4:	40001004 	.word	0x40001004

000029a8 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    29a8:	2201      	movs	r2, #1
    29aa:	4b02      	ldr	r3, [pc, #8]	; (29b4 <radio_tmr_stop+0xc>)
    29ac:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    29ae:	611a      	str	r2, [r3, #16]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_TIMER1->TASKS_STOP = 1;
	NRF_TIMER1->TASKS_SHUTDOWN = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    29b0:	4770      	bx	lr
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	40008000 	.word	0x40008000

000029b8 <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[2] = hcto;
    29b8:	22a9      	movs	r2, #169	; 0xa9
    29ba:	4b0c      	ldr	r3, [pc, #48]	; (29ec <radio_tmr_hcto_configure+0x34>)
    29bc:	00d2      	lsls	r2, r2, #3
    29be:	5098      	str	r0, [r3, r2]
	NRF_TIMER0->EVENTS_COMPARE[2] = 0;
    29c0:	2200      	movs	r2, #0
    29c2:	33fc      	adds	r3, #252	; 0xfc
    29c4:	64da      	str	r2, [r3, #76]	; 0x4c

	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    29c6:	22a6      	movs	r2, #166	; 0xa6
    29c8:	4b09      	ldr	r3, [pc, #36]	; (29f0 <radio_tmr_hcto_configure+0x38>)
    29ca:	490a      	ldr	r1, [pc, #40]	; (29f4 <radio_tmr_hcto_configure+0x3c>)
    29cc:	00d2      	lsls	r2, r2, #3
    29ce:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    29d0:	4909      	ldr	r1, [pc, #36]	; (29f8 <radio_tmr_hcto_configure+0x40>)
    29d2:	4a0a      	ldr	r2, [pc, #40]	; (29fc <radio_tmr_hcto_configure+0x44>)
    29d4:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[2]);
    29d6:	490a      	ldr	r1, [pc, #40]	; (2a00 <radio_tmr_hcto_configure+0x48>)
    29d8:	3204      	adds	r2, #4
    29da:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    29dc:	4909      	ldr	r1, [pc, #36]	; (2a04 <radio_tmr_hcto_configure+0x4c>)
    29de:	4a0a      	ldr	r2, [pc, #40]	; (2a08 <radio_tmr_hcto_configure+0x50>)
    29e0:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
    29e2:	2130      	movs	r1, #48	; 0x30
    29e4:	4a09      	ldr	r2, [pc, #36]	; (2a0c <radio_tmr_hcto_configure+0x54>)
    29e6:	5099      	str	r1, [r3, r2]
}
    29e8:	4770      	bx	lr
    29ea:	46c0      	nop			; (mov r8, r8)
    29ec:	40008000 	.word	0x40008000
    29f0:	4001f000 	.word	0x4001f000
    29f4:	40001104 	.word	0x40001104
    29f8:	40008048 	.word	0x40008048
    29fc:	00000534 	.word	0x00000534
    2a00:	40008148 	.word	0x40008148
    2a04:	40001010 	.word	0x40001010
    2a08:	0000053c 	.word	0x0000053c
    2a0c:	00000504 	.word	0x00000504

00002a10 <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    2a10:	22a4      	movs	r2, #164	; 0xa4
    2a12:	4b08      	ldr	r3, [pc, #32]	; (2a34 <radio_tmr_aa_capture+0x24>)
    2a14:	4908      	ldr	r1, [pc, #32]	; (2a38 <radio_tmr_aa_capture+0x28>)
    2a16:	00d2      	lsls	r2, r2, #3
    2a18:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    2a1a:	4908      	ldr	r1, [pc, #32]	; (2a3c <radio_tmr_aa_capture+0x2c>)
    2a1c:	4a08      	ldr	r2, [pc, #32]	; (2a40 <radio_tmr_aa_capture+0x30>)
    2a1e:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    2a20:	4908      	ldr	r1, [pc, #32]	; (2a44 <radio_tmr_aa_capture+0x34>)
    2a22:	3204      	adds	r2, #4
    2a24:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    2a26:	4908      	ldr	r1, [pc, #32]	; (2a48 <radio_tmr_aa_capture+0x38>)
    2a28:	4a08      	ldr	r2, [pc, #32]	; (2a4c <radio_tmr_aa_capture+0x3c>)
    2a2a:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    2a2c:	210c      	movs	r1, #12
    2a2e:	4a08      	ldr	r2, [pc, #32]	; (2a50 <radio_tmr_aa_capture+0x40>)
    2a30:	5099      	str	r1, [r3, r2]
}
    2a32:	4770      	bx	lr
    2a34:	4001f000 	.word	0x4001f000
    2a38:	40001100 	.word	0x40001100
    2a3c:	40008040 	.word	0x40008040
    2a40:	00000524 	.word	0x00000524
    2a44:	40001104 	.word	0x40001104
    2a48:	40008044 	.word	0x40008044
    2a4c:	0000052c 	.word	0x0000052c
    2a50:	00000504 	.word	0x00000504

00002a54 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return (NRF_TIMER0->CC[1] - NRF_TIMER0->CC[0]);
    2a54:	21a8      	movs	r1, #168	; 0xa8
    2a56:	4a03      	ldr	r2, [pc, #12]	; (2a64 <radio_tmr_aa_get+0x10>)
    2a58:	4b03      	ldr	r3, [pc, #12]	; (2a68 <radio_tmr_aa_get+0x14>)
    2a5a:	00c9      	lsls	r1, r1, #3
    2a5c:	58d3      	ldr	r3, [r2, r3]
    2a5e:	5850      	ldr	r0, [r2, r1]
    2a60:	1a18      	subs	r0, r3, r0
}
    2a62:	4770      	bx	lr
    2a64:	40008000 	.word	0x40008000
    2a68:	00000544 	.word	0x00000544

00002a6c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[7].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    2a6c:	22a9      	movs	r2, #169	; 0xa9
    2a6e:	4b05      	ldr	r3, [pc, #20]	; (2a84 <radio_tmr_end_capture+0x18>)
    2a70:	4905      	ldr	r1, [pc, #20]	; (2a88 <radio_tmr_end_capture+0x1c>)
    2a72:	00d2      	lsls	r2, r2, #3
    2a74:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[7].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    2a76:	4905      	ldr	r1, [pc, #20]	; (2a8c <radio_tmr_end_capture+0x20>)
    2a78:	4a05      	ldr	r2, [pc, #20]	; (2a90 <radio_tmr_end_capture+0x24>)
    2a7a:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = PPI_CHEN_CH7_Msk;
    2a7c:	2180      	movs	r1, #128	; 0x80
    2a7e:	4a05      	ldr	r2, [pc, #20]	; (2a94 <radio_tmr_end_capture+0x28>)
    2a80:	5099      	str	r1, [r3, r2]
}
    2a82:	4770      	bx	lr
    2a84:	4001f000 	.word	0x4001f000
    2a88:	4000110c 	.word	0x4000110c
    2a8c:	40008048 	.word	0x40008048
    2a90:	0000054c 	.word	0x0000054c
    2a94:	00000504 	.word	0x00000504

00002a98 <radio_tmr_end_get>:

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    2a98:	23a9      	movs	r3, #169	; 0xa9
    2a9a:	4a02      	ldr	r2, [pc, #8]	; (2aa4 <radio_tmr_end_get+0xc>)
    2a9c:	00db      	lsls	r3, r3, #3
    2a9e:	58d0      	ldr	r0, [r2, r3]
}
    2aa0:	4770      	bx	lr
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	40008000 	.word	0x40008000

00002aa8 <radio_ccm_rx_pkt_set>:
}

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
    2aa8:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    2aaa:	24a0      	movs	r4, #160	; 0xa0
    2aac:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    2aae:	2502      	movs	r5, #2

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    2ab0:	4b12      	ldr	r3, [pc, #72]	; (2afc <radio_ccm_rx_pkt_set+0x54>)
    2ab2:	00e4      	lsls	r4, r4, #3
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    2ab4:	26a1      	movs	r6, #161	; 0xa1

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    2ab6:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    2ab8:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE =
    2aba:	2401      	movs	r4, #1
    2abc:	4d10      	ldr	r5, [pc, #64]	; (2b00 <radio_ccm_rx_pkt_set+0x58>)
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    2abe:	00f6      	lsls	r6, r6, #3

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
	NRF_CCM->MODE =
    2ac0:	515c      	str	r4, [r3, r5]
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    2ac2:	5198      	str	r0, [r3, r6]
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    2ac4:	480f      	ldr	r0, [pc, #60]	; (2b04 <radio_ccm_rx_pkt_set+0x5c>)
    2ac6:	4e10      	ldr	r6, [pc, #64]	; (2b08 <radio_ccm_rx_pkt_set+0x60>)
    2ac8:	5198      	str	r0, [r3, r6]
	NRF_CCM->OUTPTR = (u32_t)pkt;
    2aca:	3604      	adds	r6, #4
    2acc:	5199      	str	r1, [r3, r6]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    2ace:	4e0f      	ldr	r6, [pc, #60]	; (2b0c <radio_ccm_rx_pkt_set+0x64>)
    2ad0:	490f      	ldr	r1, [pc, #60]	; (2b10 <radio_ccm_rx_pkt_set+0x68>)
    2ad2:	505e      	str	r6, [r3, r1]
	NRF_CCM->SHORTS = 0;
    2ad4:	2180      	movs	r1, #128	; 0x80
    2ad6:	0089      	lsls	r1, r1, #2
    2ad8:	505a      	str	r2, [r3, r1]
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    2ada:	0019      	movs	r1, r3
    2adc:	31fc      	adds	r1, #252	; 0xfc
    2ade:	604a      	str	r2, [r1, #4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    2ae0:	608a      	str	r2, [r1, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    2ae2:	60ca      	str	r2, [r1, #12]

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    2ae4:	21a8      	movs	r1, #168	; 0xa8
    2ae6:	4a0b      	ldr	r2, [pc, #44]	; (2b14 <radio_ccm_rx_pkt_set+0x6c>)
    2ae8:	4e0b      	ldr	r6, [pc, #44]	; (2b18 <radio_ccm_rx_pkt_set+0x70>)
    2aea:	00c9      	lsls	r1, r1, #3
    2aec:	5056      	str	r6, [r2, r1]
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    2aee:	4e0b      	ldr	r6, [pc, #44]	; (2b1c <radio_ccm_rx_pkt_set+0x74>)
    2af0:	490b      	ldr	r1, [pc, #44]	; (2b20 <radio_ccm_rx_pkt_set+0x78>)
    2af2:	5056      	str	r6, [r2, r1]
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    2af4:	2140      	movs	r1, #64	; 0x40
    2af6:	5151      	str	r1, [r2, r5]

	NRF_CCM->TASKS_KSGEN = 1;
    2af8:	601c      	str	r4, [r3, #0]

	return _pkt_scratch;
}
    2afa:	bd70      	pop	{r4, r5, r6, pc}
    2afc:	4000f000 	.word	0x4000f000
    2b00:	00000504 	.word	0x00000504
    2b04:	200004cc 	.word	0x200004cc
    2b08:	0000050c 	.word	0x0000050c
    2b0c:	200004f8 	.word	0x200004f8
    2b10:	00000514 	.word	0x00000514
    2b14:	4001f000 	.word	0x4001f000
    2b18:	40001104 	.word	0x40001104
    2b1c:	4000f004 	.word	0x4000f004
    2b20:	00000544 	.word	0x00000544

00002b24 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    2b24:	b530      	push	{r4, r5, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    2b26:	24a0      	movs	r4, #160	; 0xa0
    2b28:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    2b2a:	2502      	movs	r5, #2
	return _pkt_scratch;
}

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    2b2c:	4b0d      	ldr	r3, [pc, #52]	; (2b64 <radio_ccm_tx_pkt_set+0x40>)
    2b2e:	00e4      	lsls	r4, r4, #3
    2b30:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    2b32:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE =
    2b34:	4c0c      	ldr	r4, [pc, #48]	; (2b68 <radio_ccm_tx_pkt_set+0x44>)
    2b36:	511a      	str	r2, [r3, r4]
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    2b38:	3404      	adds	r4, #4
    2b3a:	5118      	str	r0, [r3, r4]
	NRF_CCM->INPTR = (u32_t)pkt;
    2b3c:	480b      	ldr	r0, [pc, #44]	; (2b6c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    2b3e:	4c0c      	ldr	r4, [pc, #48]	; (2b70 <radio_ccm_tx_pkt_set+0x4c>)
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)pkt;
    2b40:	5019      	str	r1, [r3, r0]
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    2b42:	21a2      	movs	r1, #162	; 0xa2
    2b44:	480b      	ldr	r0, [pc, #44]	; (2b74 <radio_ccm_tx_pkt_set+0x50>)
    2b46:	00c9      	lsls	r1, r1, #3
    2b48:	5058      	str	r0, [r3, r1]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    2b4a:	490b      	ldr	r1, [pc, #44]	; (2b78 <radio_ccm_tx_pkt_set+0x54>)
    2b4c:	505c      	str	r4, [r3, r1]
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    2b4e:	2180      	movs	r1, #128	; 0x80
    2b50:	2401      	movs	r4, #1
    2b52:	0089      	lsls	r1, r1, #2
    2b54:	505c      	str	r4, [r3, r1]
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    2b56:	0019      	movs	r1, r3
    2b58:	31fc      	adds	r1, #252	; 0xfc
    2b5a:	604a      	str	r2, [r1, #4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    2b5c:	608a      	str	r2, [r1, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    2b5e:	60ca      	str	r2, [r1, #12]

	NRF_CCM->TASKS_KSGEN = 1;
    2b60:	601c      	str	r4, [r3, #0]

	return _pkt_scratch;
}
    2b62:	bd30      	pop	{r4, r5, pc}
    2b64:	4000f000 	.word	0x4000f000
    2b68:	00000504 	.word	0x00000504
    2b6c:	0000050c 	.word	0x0000050c
    2b70:	200004f8 	.word	0x200004f8
    2b74:	200004cc 	.word	0x200004cc
    2b78:	00000514 	.word	0x00000514

00002b7c <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    2b7c:	23c1      	movs	r3, #193	; 0xc1
    2b7e:	2102      	movs	r1, #2
    2b80:	4a0d      	ldr	r2, [pc, #52]	; (2bb8 <radio_ccm_is_done+0x3c>)
    2b82:	009b      	lsls	r3, r3, #2
    2b84:	50d1      	str	r1, [r2, r3]
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    2b86:	4a0d      	ldr	r2, [pc, #52]	; (2bbc <radio_ccm_is_done+0x40>)
    2b88:	6893      	ldr	r3, [r2, #8]
    2b8a:	2b00      	cmp	r3, #0
    2b8c:	d103      	bne.n	2b96 <radio_ccm_is_done+0x1a>
    2b8e:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    2b90:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    2b92:	bf20      	wfe
    2b94:	e7f8      	b.n	2b88 <radio_ccm_is_done+0xc>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    2b96:	23c2      	movs	r3, #194	; 0xc2
    2b98:	2102      	movs	r1, #2
    2b9a:	4a07      	ldr	r2, [pc, #28]	; (2bb8 <radio_ccm_is_done+0x3c>)
    2b9c:	009b      	lsls	r3, r3, #2
    2b9e:	50d1      	str	r1, [r2, r3]
    2ba0:	2180      	movs	r1, #128	; 0x80
    2ba2:	4a07      	ldr	r2, [pc, #28]	; (2bc0 <radio_ccm_is_done+0x44>)
    2ba4:	3b89      	subs	r3, #137	; 0x89
    2ba6:	0209      	lsls	r1, r1, #8
    2ba8:	3bff      	subs	r3, #255	; 0xff
    2baa:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    2bac:	4b03      	ldr	r3, [pc, #12]	; (2bbc <radio_ccm_is_done+0x40>)
    2bae:	68d8      	ldr	r0, [r3, #12]
    2bb0:	4243      	negs	r3, r0
    2bb2:	4158      	adcs	r0, r3
}
    2bb4:	4770      	bx	lr
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	4000f000 	.word	0x4000f000
    2bbc:	4000f0fc 	.word	0x4000f0fc
    2bc0:	e000e100 	.word	0xe000e100

00002bc4 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    2bc4:	2380      	movs	r3, #128	; 0x80
    2bc6:	4a03      	ldr	r2, [pc, #12]	; (2bd4 <radio_ccm_mic_is_valid+0x10>)
    2bc8:	00db      	lsls	r3, r3, #3
    2bca:	58d0      	ldr	r0, [r2, r3]
    2bcc:	1e43      	subs	r3, r0, #1
    2bce:	4198      	sbcs	r0, r3
}
    2bd0:	4770      	bx	lr
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	4000f000 	.word	0x4000f000

00002bd8 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
    2bd8:	23a0      	movs	r3, #160	; 0xa0
    2bda:	2201      	movs	r2, #1
}

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    2bdc:	b570      	push	{r4, r5, r6, lr}
	NRF_AAR->ENABLE = 1;
    2bde:	4c0e      	ldr	r4, [pc, #56]	; (2c18 <radio_ar_configure+0x40>)
	NRF_AAR->NIRK = nirk;
    2be0:	4d0e      	ldr	r5, [pc, #56]	; (2c1c <radio_ar_configure+0x44>)

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
    2be2:	00db      	lsls	r3, r3, #3
    2be4:	50e2      	str	r2, [r4, r3]
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
    2be6:	3308      	adds	r3, #8
static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
    2be8:	5160      	str	r0, [r4, r5]
	NRF_AAR->IRKPTR = (u32_t)irk;
    2bea:	50e1      	str	r1, [r4, r3]
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    2bec:	4b0c      	ldr	r3, [pc, #48]	; (2c20 <radio_ar_configure+0x48>)
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];

	radio_bc_configure(64);
    2bee:	2040      	movs	r0, #64	; 0x40
void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    2bf0:	595a      	ldr	r2, [r3, r5]
    2bf2:	23a2      	movs	r3, #162	; 0xa2
    2bf4:	00db      	lsls	r3, r3, #3
    2bf6:	50e2      	str	r2, [r4, r3]
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];
    2bf8:	2200      	movs	r2, #0
    2bfa:	4b0a      	ldr	r3, [pc, #40]	; (2c24 <radio_ar_configure+0x4c>)
    2bfc:	50e2      	str	r2, [r4, r3]

	radio_bc_configure(64);
    2bfe:	f7ff fe4b 	bl	2898 <radio_bc_configure>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    2c02:	22a8      	movs	r2, #168	; 0xa8
    2c04:	4b08      	ldr	r3, [pc, #32]	; (2c28 <radio_ar_configure+0x50>)
    2c06:	4909      	ldr	r1, [pc, #36]	; (2c2c <radio_ar_configure+0x54>)
    2c08:	00d2      	lsls	r2, r2, #3
    2c0a:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    2c0c:	4a08      	ldr	r2, [pc, #32]	; (2c30 <radio_ar_configure+0x58>)
    2c0e:	509c      	str	r4, [r3, r2]
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    2c10:	2240      	movs	r2, #64	; 0x40
    2c12:	515a      	str	r2, [r3, r5]
}
    2c14:	bd70      	pop	{r4, r5, r6, pc}
    2c16:	46c0      	nop			; (mov r8, r8)
    2c18:	4000f000 	.word	0x4000f000
    2c1c:	00000504 	.word	0x00000504
    2c20:	40001000 	.word	0x40001000
    2c24:	00000514 	.word	0x00000514
    2c28:	4001f000 	.word	0x4001f000
    2c2c:	40001128 	.word	0x40001128
    2c30:	00000544 	.word	0x00000544

00002c34 <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    2c34:	2380      	movs	r3, #128	; 0x80
    2c36:	4a02      	ldr	r2, [pc, #8]	; (2c40 <radio_ar_match_get+0xc>)
    2c38:	00db      	lsls	r3, r3, #3
    2c3a:	58d0      	ldr	r0, [r2, r3]
}
    2c3c:	4770      	bx	lr
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	4000f000 	.word	0x4000f000

00002c44 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    2c44:	4b05      	ldr	r3, [pc, #20]	; (2c5c <radio_ar_status_reset+0x18>)
    2c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	return NRF_AAR->STATUS;
}

void radio_ar_status_reset(void)
{
	if (radio_bc_has_match()) {
    2c48:	2a00      	cmp	r2, #0
    2c4a:	d004      	beq.n	2c56 <radio_ar_status_reset+0x12>
		NRF_AAR->EVENTS_END = 0;
    2c4c:	2100      	movs	r1, #0
    2c4e:	4a04      	ldr	r2, [pc, #16]	; (2c60 <radio_ar_status_reset+0x1c>)
    2c50:	6051      	str	r1, [r2, #4]
		NRF_AAR->EVENTS_RESOLVED = 0;
    2c52:	6091      	str	r1, [r2, #8]
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
    2c54:	60d1      	str	r1, [r2, #12]
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    2c56:	2200      	movs	r2, #0
    2c58:	62da      	str	r2, [r3, #44]	; 0x2c
		NRF_AAR->EVENTS_RESOLVED = 0;
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
	}

	radio_bc_status_reset();
}
    2c5a:	4770      	bx	lr
    2c5c:	400010fc 	.word	0x400010fc
    2c60:	4000f0fc 	.word	0x4000f0fc

00002c64 <radio_ar_has_match>:

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    2c64:	2000      	movs	r0, #0
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    2c66:	4b06      	ldr	r3, [pc, #24]	; (2c80 <radio_ar_has_match+0x1c>)
    2c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    2c6a:	4283      	cmp	r3, r0
    2c6c:	d006      	beq.n	2c7c <radio_ar_has_match+0x18>
    2c6e:	4b05      	ldr	r3, [pc, #20]	; (2c84 <radio_ar_has_match+0x20>)
    2c70:	685a      	ldr	r2, [r3, #4]
	radio_bc_status_reset();
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
    2c72:	4282      	cmp	r2, r0
    2c74:	d002      	beq.n	2c7c <radio_ar_has_match+0x18>
			(NRF_AAR->EVENTS_END) &&
			(NRF_AAR->EVENTS_RESOLVED));
    2c76:	6898      	ldr	r0, [r3, #8]
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    2c78:	1e43      	subs	r3, r0, #1
    2c7a:	4198      	sbcs	r0, r3
			(NRF_AAR->EVENTS_RESOLVED));
}
    2c7c:	4770      	bx	lr
    2c7e:	46c0      	nop			; (mov r8, r8)
    2c80:	400010fc 	.word	0x400010fc
    2c84:	4000f0fc 	.word	0x4000f0fc

00002c88 <rand_init>:

static struct rand *rng;

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));
    2c88:	2904      	cmp	r1, #4
    2c8a:	d802      	bhi.n	2c92 <rand_init+0xa>
    2c8c:	b662      	cpsie	i
    2c8e:	2004      	movs	r0, #4
    2c90:	df02      	svc	2

	rng = (struct rand *)context;
	rng->count = context_len - sizeof(struct rand) + 1;
    2c92:	3903      	subs	r1, #3
    2c94:	7001      	strb	r1, [r0, #0]
	rng->first = rng->last = 0;
    2c96:	2100      	movs	r1, #0

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    2c98:	2201      	movs	r2, #1

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    2c9a:	4b07      	ldr	r3, [pc, #28]	; (2cb8 <rand_init+0x30>)
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    2c9c:	7081      	strb	r1, [r0, #2]

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    2c9e:	6018      	str	r0, [r3, #0]
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    2ca0:	7041      	strb	r1, [r0, #1]

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    2ca2:	4b06      	ldr	r3, [pc, #24]	; (2cbc <rand_init+0x34>)
    2ca4:	4806      	ldr	r0, [pc, #24]	; (2cc0 <rand_init+0x38>)
    2ca6:	501a      	str	r2, [r3, r0]
	NRF_RNG->EVENTS_VALRDY = 0;
    2ca8:	4806      	ldr	r0, [pc, #24]	; (2cc4 <rand_init+0x3c>)
    2caa:	6041      	str	r1, [r0, #4]
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    2cac:	21c1      	movs	r1, #193	; 0xc1
    2cae:	0089      	lsls	r1, r1, #2
    2cb0:	505a      	str	r2, [r3, r1]

	NRF_RNG->TASKS_START = 1;
    2cb2:	601a      	str	r2, [r3, #0]
}
    2cb4:	4770      	bx	lr
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	20000528 	.word	0x20000528
    2cbc:	4000d000 	.word	0x4000d000
    2cc0:	00000504 	.word	0x00000504
    2cc4:	4000d0fc 	.word	0x4000d0fc

00002cc8 <rand_get>:

size_t rand_get(size_t octets, u8_t *rand)
{
    2cc8:	b510      	push	{r4, lr}
	u8_t reserved;
	u8_t first;

	while (octets) {
		if (rng->first == rng->last) {
    2cca:	4b14      	ldr	r3, [pc, #80]	; (2d1c <rand_get+0x54>)
    2ccc:	681a      	ldr	r2, [r3, #0]
    2cce:	7853      	ldrb	r3, [r2, #1]
size_t rand_get(size_t octets, u8_t *rand)
{
	u8_t reserved;
	u8_t first;

	while (octets) {
    2cd0:	2800      	cmp	r0, #0
    2cd2:	d00f      	beq.n	2cf4 <rand_get+0x2c>
		if (rng->first == rng->last) {
    2cd4:	7894      	ldrb	r4, [r2, #2]
    2cd6:	429c      	cmp	r4, r3
    2cd8:	d00c      	beq.n	2cf4 <rand_get+0x2c>
			break;
		}

		rand[--octets] = rng->rand[rng->first];
    2cda:	18d3      	adds	r3, r2, r3
    2cdc:	78db      	ldrb	r3, [r3, #3]
    2cde:	3801      	subs	r0, #1
    2ce0:	540b      	strb	r3, [r1, r0]

		first = rng->first + 1;
    2ce2:	7853      	ldrb	r3, [r2, #1]
		if (first == rng->count) {
    2ce4:	7814      	ldrb	r4, [r2, #0]
			break;
		}

		rand[--octets] = rng->rand[rng->first];

		first = rng->first + 1;
    2ce6:	3301      	adds	r3, #1
    2ce8:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
    2cea:	429c      	cmp	r4, r3
    2cec:	d100      	bne.n	2cf0 <rand_get+0x28>
			first = 0;
    2cee:	2300      	movs	r3, #0
		}
		rng->first = first;
    2cf0:	7053      	strb	r3, [r2, #1]
    2cf2:	e7ec      	b.n	2cce <rand_get+0x6>
	}

	reserved = RAND_RESERVED;
	first = rng->first;
	while (reserved--) {
    2cf4:	2105      	movs	r1, #5
    2cf6:	3901      	subs	r1, #1
    2cf8:	b2c9      	uxtb	r1, r1
    2cfa:	2900      	cmp	r1, #0
    2cfc:	d00d      	beq.n	2d1a <rand_get+0x52>
		if (first == rng->last) {
    2cfe:	7894      	ldrb	r4, [r2, #2]
    2d00:	429c      	cmp	r4, r3
    2d02:	d103      	bne.n	2d0c <rand_get+0x44>
			NRF_RNG->TASKS_START = 1;
    2d04:	2201      	movs	r2, #1
    2d06:	4b06      	ldr	r3, [pc, #24]	; (2d20 <rand_get+0x58>)
    2d08:	601a      	str	r2, [r3, #0]

			break;
    2d0a:	e006      	b.n	2d1a <rand_get+0x52>
		}

		first++;
    2d0c:	3301      	adds	r3, #1
		if (first == rng->count) {
    2d0e:	7814      	ldrb	r4, [r2, #0]
			NRF_RNG->TASKS_START = 1;

			break;
		}

		first++;
    2d10:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
    2d12:	429c      	cmp	r4, r3
    2d14:	d1ef      	bne.n	2cf6 <rand_get+0x2e>
			first = 0;
    2d16:	2300      	movs	r3, #0
    2d18:	e7ed      	b.n	2cf6 <rand_get+0x2e>
		}
	}

	return octets;
}
    2d1a:	bd10      	pop	{r4, pc}
    2d1c:	20000528 	.word	0x20000528
    2d20:	4000d000 	.word	0x4000d000

00002d24 <isr_rand>:

void isr_rand(void *param)
{
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    2d24:	4915      	ldr	r1, [pc, #84]	; (2d7c <isr_rand+0x58>)

	return octets;
}

void isr_rand(void *param)
{
    2d26:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    2d28:	684b      	ldr	r3, [r1, #4]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d024      	beq.n	2d78 <isr_rand+0x54>
		u8_t last;

		last = rng->last + 1;
    2d2e:	4b14      	ldr	r3, [pc, #80]	; (2d80 <isr_rand+0x5c>)
    2d30:	681a      	ldr	r2, [r3, #0]
    2d32:	7890      	ldrb	r0, [r2, #2]
		if (last == rng->count) {
    2d34:	7814      	ldrb	r4, [r2, #0]
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
		u8_t last;

		last = rng->last + 1;
    2d36:	1c43      	adds	r3, r0, #1
    2d38:	b2db      	uxtb	r3, r3
		if (last == rng->count) {
    2d3a:	42a3      	cmp	r3, r4
    2d3c:	d100      	bne.n	2d40 <isr_rand+0x1c>
			last = 0;
    2d3e:	2300      	movs	r3, #0
		}

		if (last == rng->first) {
    2d40:	7856      	ldrb	r6, [r2, #1]
    2d42:	4d10      	ldr	r5, [pc, #64]	; (2d84 <isr_rand+0x60>)
    2d44:	429e      	cmp	r6, r3
    2d46:	d104      	bne.n	2d52 <isr_rand+0x2e>
			/* this condition should not happen
			 * , but due to probable bug in HW
			 * , new value could be generated
			 * before task is stopped.
			 */
			NRF_RNG->TASKS_STOP = 1;
    2d48:	2301      	movs	r3, #1
    2d4a:	606b      	str	r3, [r5, #4]
			NRF_RNG->EVENTS_VALRDY = 0;
    2d4c:	2300      	movs	r3, #0
    2d4e:	604b      	str	r3, [r1, #4]

			return;
    2d50:	e012      	b.n	2d78 <isr_rand+0x54>
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
    2d52:	26a1      	movs	r6, #161	; 0xa1
    2d54:	00f6      	lsls	r6, r6, #3
    2d56:	59ad      	ldr	r5, [r5, r6]
    2d58:	1810      	adds	r0, r2, r0
    2d5a:	70c5      	strb	r5, [r0, #3]
		rng->last = last;
    2d5c:	7093      	strb	r3, [r2, #2]

		last = rng->last + 1;
    2d5e:	3301      	adds	r3, #1
    2d60:	b2db      	uxtb	r3, r3
    2d62:	2000      	movs	r0, #0
		if (last == rng->count) {
    2d64:	429c      	cmp	r4, r3
    2d66:	d100      	bne.n	2d6a <isr_rand+0x46>
			last = 0;
    2d68:	0003      	movs	r3, r0
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    2d6a:	6048      	str	r0, [r1, #4]

		if (last == rng->first) {
    2d6c:	7852      	ldrb	r2, [r2, #1]
    2d6e:	429a      	cmp	r2, r3
    2d70:	d102      	bne.n	2d78 <isr_rand+0x54>
			NRF_RNG->TASKS_STOP = 1;
    2d72:	2201      	movs	r2, #1
    2d74:	4b03      	ldr	r3, [pc, #12]	; (2d84 <isr_rand+0x60>)
    2d76:	605a      	str	r2, [r3, #4]
		}
	}
}
    2d78:	bd70      	pop	{r4, r5, r6, pc}
    2d7a:	46c0      	nop			; (mov r8, r8)
    2d7c:	4000d0fc 	.word	0x4000d0fc
    2d80:	20000528 	.word	0x20000528
    2d84:	4000d000 	.word	0x4000d000

00002d88 <ticker_dequeue>:
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    2d88:	2324      	movs	r3, #36	; 0x24

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    2d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t timeout;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    2d8c:	7e04      	ldrb	r4, [r0, #24]
	current = previous;
	total = 0;
    2d8e:	2500      	movs	r5, #0
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
	current = previous;
    2d90:	0022      	movs	r2, r4
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    2d92:	469c      	mov	ip, r3
	u8_t current;
	u32_t timeout;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
    2d94:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    2d96:	2aff      	cmp	r2, #255	; 0xff
    2d98:	d00a      	beq.n	2db0 <ticker_dequeue+0x28>

		ticker_current = &node[current];
    2d9a:	4663      	mov	r3, ip
    2d9c:	4353      	muls	r3, r2
    2d9e:	18f3      	adds	r3, r6, r3
    2da0:	781f      	ldrb	r7, [r3, #0]

		if (current == id) {
    2da2:	428a      	cmp	r2, r1
    2da4:	d006      	beq.n	2db4 <ticker_dequeue+0x2c>
			break;
		}

		total += ticker_current->ticks_to_expire;
    2da6:	689b      	ldr	r3, [r3, #8]
		previous = current;
		current = ticker_current->next;
    2da8:	0014      	movs	r4, r2

		if (current == id) {
			break;
		}

		total += ticker_current->ticks_to_expire;
    2daa:	18ed      	adds	r5, r5, r3
		previous = current;
		current = ticker_current->next;
    2dac:	003a      	movs	r2, r7
    2dae:	e7f2      	b.n	2d96 <ticker_dequeue+0xe>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    2db0:	2000      	movs	r0, #0
    2db2:	e010      	b.n	2dd6 <ticker_dequeue+0x4e>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    2db4:	4294      	cmp	r4, r2
    2db6:	d100      	bne.n	2dba <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    2db8:	7607      	strb	r7, [r0, #24]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    2dba:	2224      	movs	r2, #36	; 0x24
    2dbc:	4354      	muls	r4, r2
    2dbe:	7818      	ldrb	r0, [r3, #0]
	if (previous == current) {
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
    2dc0:	6899      	ldr	r1, [r3, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    2dc2:	55a0      	strb	r0, [r4, r6]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    2dc4:	781b      	ldrb	r3, [r3, #0]
    2dc6:	2bff      	cmp	r3, #255	; 0xff
    2dc8:	d004      	beq.n	2dd4 <ticker_dequeue+0x4c>
		node[ticker_current->next].ticks_to_expire += timeout;
    2dca:	435a      	muls	r2, r3
    2dcc:	18b3      	adds	r3, r6, r2
    2dce:	689a      	ldr	r2, [r3, #8]
    2dd0:	1852      	adds	r2, r2, r1
    2dd2:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    2dd4:	1868      	adds	r0, r5, r1
}
    2dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002dd8 <prepare_ticks_to_expire>:
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
}

static void prepare_ticks_to_expire(struct ticker_node *ticker,
				    u32_t ticks_current, u32_t ticks_at_start)
{
    2dd8:	b570      	push	{r4, r5, r6, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & 0x00800000) == 0) {
    2dda:	1a55      	subs	r5, r2, r1
}

static void prepare_ticks_to_expire(struct ticker_node *ticker,
				    u32_t ticks_current, u32_t ticks_at_start)
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    2ddc:	6883      	ldr	r3, [r0, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    2dde:	8a84      	ldrh	r4, [r0, #20]

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & 0x00800000) == 0) {
    2de0:	022e      	lsls	r6, r5, #8
    2de2:	d403      	bmi.n	2dec <prepare_ticks_to_expire+0x14>
		ticks_to_expire +=
    2de4:	022a      	lsls	r2, r5, #8
    2de6:	0a12      	lsrs	r2, r2, #8
    2de8:	18d2      	adds	r2, r2, r3
    2dea:	e00a      	b.n	2e02 <prepare_ticks_to_expire+0x2a>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2dec:	1a89      	subs	r1, r1, r2
    2dee:	0209      	lsls	r1, r1, #8
    2df0:	0a09      	lsrs	r1, r1, #8
		u32_t delta_current_start;

		delta_current_start =
		    ticker_ticks_diff_get(ticks_current, ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
			ticks_to_expire -= delta_current_start;
    2df2:	1a5a      	subs	r2, r3, r1
	} else {
		u32_t delta_current_start;

		delta_current_start =
		    ticker_ticks_diff_get(ticks_current, ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
    2df4:	428b      	cmp	r3, r1
    2df6:	d804      	bhi.n	2e02 <prepare_ticks_to_expire+0x2a>
    2df8:	1ae3      	subs	r3, r4, r3
			ticks_to_expire -= delta_current_start;
		} else {
			ticks_to_expire_minus +=
    2dfa:	185b      	adds	r3, r3, r1
    2dfc:	b29c      	uxth	r4, r3
			    (delta_current_start - ticks_to_expire);
			ticks_to_expire = 0;
    2dfe:	2200      	movs	r2, #0
    2e00:	e004      	b.n	2e0c <prepare_ticks_to_expire+0x34>
		}
	}

	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
    2e02:	42a2      	cmp	r2, r4
    2e04:	d902      	bls.n	2e0c <prepare_ticks_to_expire+0x34>
		ticks_to_expire -= ticks_to_expire_minus;
    2e06:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    2e08:	2300      	movs	r3, #0
    2e0a:	e002      	b.n	2e12 <prepare_ticks_to_expire+0x3a>
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    2e0c:	1aa3      	subs	r3, r4, r2
		ticks_to_expire = 0;
    2e0e:	2200      	movs	r2, #0
	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
		ticks_to_expire -= ticks_to_expire_minus;
		ticks_to_expire_minus = 0;
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    2e10:	b29b      	uxth	r3, r3
		ticks_to_expire = 0;
	}

	ticker->ticks_to_expire = ticks_to_expire;
    2e12:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    2e14:	8283      	strh	r3, [r0, #20]
}
    2e16:	bd70      	pop	{r4, r5, r6, pc}

00002e18 <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
    2e18:	b510      	push	{r4, lr}
    2e1a:	0001      	movs	r1, r0
	cntr_cmp_set(1, value);
    2e1c:	2001      	movs	r0, #1
    2e1e:	f7ff fb63 	bl	24e8 <cntr_cmp_set>
}
    2e22:	bd10      	pop	{r4, pc}

00002e24 <ticker_instance0_cmp_set>:
		break;
	}
}

static void ticker_instance0_cmp_set(u32_t value)
{
    2e24:	b510      	push	{r4, lr}
    2e26:	0001      	movs	r1, r0
	cntr_cmp_set(0, value);
    2e28:	2000      	movs	r0, #0
    2e2a:	f7ff fb5d 	bl	24e8 <cntr_cmp_set>
}
    2e2e:	bd10      	pop	{r4, pc}

00002e30 <ticker_instance1_sched>:
		break;
	}
}

static void ticker_instance1_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    2e30:	b510      	push	{r4, lr}
    2e32:	000c      	movs	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    2e34:	2803      	cmp	r0, #3
    2e36:	d821      	bhi.n	2e7c <ticker_instance1_sched+0x4c>
    2e38:	f7fd f99e 	bl	178 <__gnu_thumb1_case_uqi>
    2e3c:	190c0802 	.word	0x190c0802
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    2e40:	2901      	cmp	r1, #1
    2e42:	d11b      	bne.n	2e7c <ticker_instance1_sched+0x4c>
				0, 0, link,
				&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    2e44:	4b0f      	ldr	r3, [pc, #60]	; (2e84 <ticker_instance1_sched+0x54>)
    2e46:	2102      	movs	r1, #2
    2e48:	2000      	movs	r0, #0
    2e4a:	e014      	b.n	2e76 <ticker_instance1_sched+0x46>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    2e4c:	4b0e      	ldr	r3, [pc, #56]	; (2e88 <ticker_instance1_sched+0x58>)
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    2e4e:	2902      	cmp	r1, #2
    2e50:	d00a      	beq.n	2e68 <ticker_instance1_sched+0x38>
    2e52:	e013      	b.n	2e7c <ticker_instance1_sched+0x4c>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    2e54:	2901      	cmp	r1, #1
    2e56:	d003      	beq.n	2e60 <ticker_instance1_sched+0x30>
    2e58:	2902      	cmp	r1, #2
    2e5a:	d10f      	bne.n	2e7c <ticker_instance1_sched+0x4c>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    2e5c:	4b0b      	ldr	r3, [pc, #44]	; (2e8c <ticker_instance1_sched+0x5c>)
    2e5e:	e003      	b.n	2e68 <ticker_instance1_sched+0x38>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    2e60:	2102      	movs	r1, #2
    2e62:	4b0b      	ldr	r3, [pc, #44]	; (2e90 <ticker_instance1_sched+0x60>)
    2e64:	0008      	movs	r0, r1
    2e66:	e006      	b.n	2e76 <ticker_instance1_sched+0x46>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    2e68:	0021      	movs	r1, r4
    2e6a:	0020      	movs	r0, r4
    2e6c:	e003      	b.n	2e76 <ticker_instance1_sched+0x46>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    2e6e:	2902      	cmp	r1, #2
    2e70:	d104      	bne.n	2e7c <ticker_instance1_sched+0x4c>
				(void *)&_instance[1],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    2e72:	2003      	movs	r0, #3
    2e74:	4b07      	ldr	r3, [pc, #28]	; (2e94 <ticker_instance1_sched+0x64>)
    2e76:	f7ff f971 	bl	215c <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    2e7a:	bd10      	pop	{r4, pc}
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    2e7c:	b662      	cpsie	i
    2e7e:	2004      	movs	r0, #4
    2e80:	df02      	svc	2
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	20000138 	.word	0x20000138
    2e88:	20000148 	.word	0x20000148
    2e8c:	200000d8 	.word	0x200000d8
    2e90:	20000158 	.word	0x20000158
    2e94:	200000f8 	.word	0x200000f8

00002e98 <ticker_instance0_sched>:

	return 0;
}

static void ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    2e98:	b510      	push	{r4, lr}
    2e9a:	000c      	movs	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    2e9c:	2803      	cmp	r0, #3
    2e9e:	d823      	bhi.n	2ee8 <ticker_instance0_sched+0x50>
    2ea0:	f7fd f96a 	bl	178 <__gnu_thumb1_case_uqi>
    2ea4:	1a0d0702 	.word	0x1a0d0702
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    2ea8:	2901      	cmp	r1, #1
    2eaa:	d11d      	bne.n	2ee8 <ticker_instance0_sched+0x50>
				0, 0, link,
				&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    2eac:	4b10      	ldr	r3, [pc, #64]	; (2ef0 <ticker_instance0_sched+0x58>)
    2eae:	2100      	movs	r1, #0
    2eb0:	e010      	b.n	2ed4 <ticker_instance0_sched+0x3c>
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    2eb2:	2902      	cmp	r1, #2
    2eb4:	d118      	bne.n	2ee8 <ticker_instance0_sched+0x50>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    2eb6:	4b0f      	ldr	r3, [pc, #60]	; (2ef4 <ticker_instance0_sched+0x5c>)
    2eb8:	2101      	movs	r1, #1
    2eba:	2000      	movs	r0, #0
    2ebc:	e011      	b.n	2ee2 <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    2ebe:	2901      	cmp	r1, #1
    2ec0:	d004      	beq.n	2ecc <ticker_instance0_sched+0x34>
    2ec2:	2902      	cmp	r1, #2
    2ec4:	d110      	bne.n	2ee8 <ticker_instance0_sched+0x50>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    2ec6:	4b0c      	ldr	r3, [pc, #48]	; (2ef8 <ticker_instance0_sched+0x60>)
    2ec8:	2101      	movs	r1, #1
    2eca:	e003      	b.n	2ed4 <ticker_instance0_sched+0x3c>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    2ecc:	4b0b      	ldr	r3, [pc, #44]	; (2efc <ticker_instance0_sched+0x64>)
    2ece:	2100      	movs	r1, #0
    2ed0:	0020      	movs	r0, r4
    2ed2:	e006      	b.n	2ee2 <ticker_instance0_sched+0x4a>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    2ed4:	0008      	movs	r0, r1
    2ed6:	e004      	b.n	2ee2 <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    2ed8:	2902      	cmp	r1, #2
    2eda:	d105      	bne.n	2ee8 <ticker_instance0_sched+0x50>
				(void *)&_instance[0],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    2edc:	2101      	movs	r1, #1
    2ede:	2003      	movs	r0, #3
    2ee0:	4b07      	ldr	r3, [pc, #28]	; (2f00 <ticker_instance0_sched+0x68>)
    2ee2:	f7ff f93b 	bl	215c <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    2ee6:	bd10      	pop	{r4, pc}
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    2ee8:	b662      	cpsie	i
    2eea:	2004      	movs	r0, #4
    2eec:	df02      	svc	2
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	200000e8 	.word	0x200000e8
    2ef4:	20000168 	.word	0x20000168
    2ef8:	20000108 	.word	0x20000108
    2efc:	20000118 	.word	0x20000118
    2f00:	20000128 	.word	0x20000128

00002f04 <ticker_instance0_caller_id_get>:
 ****************************************************************************/
#include "util/mayfly.h"

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
	switch (user_id) {
    2f04:	2801      	cmp	r0, #1
    2f06:	d006      	beq.n	2f16 <ticker_instance0_caller_id_get+0x12>
    2f08:	2800      	cmp	r0, #0
    2f0a:	d006      	beq.n	2f1a <ticker_instance0_caller_id_get+0x16>
    2f0c:	2803      	cmp	r0, #3
    2f0e:	d005      	beq.n	2f1c <ticker_instance0_caller_id_get+0x18>
	case MAYFLY_CALL_ID_PROGRAM:
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_2:
	default:
		LL_ASSERT(0);
    2f10:	b662      	cpsie	i
    2f12:	2004      	movs	r0, #4
    2f14:	df02      	svc	2
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;

	case MAYFLY_CALL_ID_1:
		return CALL_ID_JOB;
    2f16:	2002      	movs	r0, #2
    2f18:	e000      	b.n	2f1c <ticker_instance0_caller_id_get+0x18>

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;
    2f1a:	2001      	movs	r0, #1
		LL_ASSERT(0);
		break;
	}

	return 0;
}
    2f1c:	4770      	bx	lr

00002f1e <ticker_worker>:
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    2f1e:	2301      	movs	r3, #1

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    2f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
	if (instance->job_guard) {
    2f22:	7f06      	ldrb	r6, [r0, #28]

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    2f24:	0004      	movs	r4, r0
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    2f26:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
    2f28:	2e00      	cmp	r6, #0
    2f2a:	d14b      	bne.n	2fc4 <ticker_worker+0xa6>
		return;
	}

	/* If no tickers to expire, do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    2f2c:	7e03      	ldrb	r3, [r0, #24]
    2f2e:	2bff      	cmp	r3, #255	; 0xff
    2f30:	d101      	bne.n	2f36 <ticker_worker+0x18>
		instance->worker_trigger = 0;
    2f32:	7746      	strb	r6, [r0, #29]

		return;
    2f34:	e046      	b.n	2fc4 <ticker_worker+0xa6>
	}

	/* ticks_elapsed is collected here, job will use it */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    2f36:	f7ff facf 	bl	24d8 <cntr_cnt_get>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2f3a:	6963      	ldr	r3, [r4, #20]

	/* initialise actual elapsed ticks being consumed */
	ticks_expired = 0;

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;
    2f3c:	7e27      	ldrb	r7, [r4, #24]
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2f3e:	1ac5      	subs	r5, r0, r3
    2f40:	022d      	lsls	r5, r5, #8
    2f42:	0a2b      	lsrs	r3, r5, #8
    2f44:	9300      	str	r3, [sp, #0]

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;

	/* expire all tickers within ticks_elapsed and collect ticks_expired */
	node = &instance->node[0];
    2f46:	6823      	ldr	r3, [r4, #0]
    2f48:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    2f4a:	2fff      	cmp	r7, #255	; 0xff
    2f4c:	d007      	beq.n	2f5e <ticker_worker+0x40>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    2f4e:	2324      	movs	r3, #36	; 0x24
    2f50:	435f      	muls	r7, r3
    2f52:	9b01      	ldr	r3, [sp, #4]

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
		if (ticks_elapsed < ticks_to_expire) {
    2f54:	9a00      	ldr	r2, [sp, #0]
	while (ticker_id_head != TICKER_NULL) {
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    2f56:	19d9      	adds	r1, r3, r7

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    2f58:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2f5a:	4293      	cmp	r3, r2
    2f5c:	d904      	bls.n	2f68 <ticker_worker+0x4a>
			DEBUG_TICKER_TASK(0);
		}
	}

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    2f5e:	7aa2      	ldrb	r2, [r4, #10]
    2f60:	7ae3      	ldrb	r3, [r4, #11]
    2f62:	4293      	cmp	r3, r2
    2f64:	d122      	bne.n	2fac <ticker_worker+0x8e>
    2f66:	e01b      	b.n	2fa0 <ticker_worker+0x82>

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2f68:	20ff      	movs	r0, #255	; 0xff
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    2f6a:	9a00      	ldr	r2, [sp, #0]
		ticks_expired += ticks_to_expire;
    2f6c:	18f6      	adds	r6, r6, r3
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    2f6e:	1ad2      	subs	r2, r2, r3
    2f70:	9200      	str	r2, [sp, #0]

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2f72:	788a      	ldrb	r2, [r1, #2]
    2f74:	784b      	ldrb	r3, [r1, #1]
		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;

		/* move to next ticker */
		ticker_id_head = ticker->next;
    2f76:	780f      	ldrb	r7, [r1, #0]

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2f78:	1a9b      	subs	r3, r3, r2
    2f7a:	4003      	ands	r3, r0
    2f7c:	2b01      	cmp	r3, #1
    2f7e:	d1e4      	bne.n	2f4a <ticker_worker+0x2c>
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;

		if (ticker->timeout_func) {
    2f80:	68cb      	ldr	r3, [r1, #12]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
			continue;
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;
    2f82:	3a01      	subs	r2, #1
    2f84:	708a      	strb	r2, [r1, #2]

		if (ticker->timeout_func) {
    2f86:	1e1d      	subs	r5, r3, #0
    2f88:	d0df      	beq.n	2f4a <ticker_worker+0x2c>
			DEBUG_TICKER_TASK(1);
			ticker->timeout_func(((instance->ticks_current +
    2f8a:	6963      	ldr	r3, [r4, #20]
    2f8c:	8a88      	ldrh	r0, [r1, #20]
    2f8e:	8b4a      	ldrh	r2, [r1, #26]
    2f90:	1a18      	subs	r0, r3, r0
    2f92:	1980      	adds	r0, r0, r6
    2f94:	0200      	lsls	r0, r0, #8
    2f96:	690b      	ldr	r3, [r1, #16]
    2f98:	0a00      	lsrs	r0, r0, #8
    2f9a:	6a09      	ldr	r1, [r1, #32]
    2f9c:	47a8      	blx	r5
    2f9e:	e7d4      	b.n	2f4a <ticker_worker+0x2c>

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
		u8_t last;

		last = instance->ticks_elapsed_last + 1;
    2fa0:	3301      	adds	r3, #1
    2fa2:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
    2fa4:	2b02      	cmp	r3, #2
    2fa6:	d100      	bne.n	2faa <ticker_worker+0x8c>
			last = 0;
    2fa8:	2300      	movs	r3, #0
		}
		instance->ticks_elapsed_last = last;
    2faa:	72e3      	strb	r3, [r4, #11]
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
    2fac:	7ae3      	ldrb	r3, [r4, #11]
	    ticks_expired;

	instance->worker_trigger = 0;

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    2fae:	2201      	movs	r2, #1
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
    2fb0:	3302      	adds	r3, #2
    2fb2:	009b      	lsls	r3, r3, #2
    2fb4:	18e3      	adds	r3, r4, r3
    2fb6:	605e      	str	r6, [r3, #4]
	    ticks_expired;

	instance->worker_trigger = 0;
    2fb8:	2300      	movs	r3, #0

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    2fba:	2102      	movs	r1, #2
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
	    ticks_expired;

	instance->worker_trigger = 0;
    2fbc:	7763      	strb	r3, [r4, #29]

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    2fbe:	0010      	movs	r0, r2
    2fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2fc2:	4798      	blx	r3
}
    2fc4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

00002fc8 <ticker_job>:
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    2fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    2fca:	7f42      	ldrb	r2, [r0, #29]
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    2fcc:	b093      	sub	sp, #76	; 0x4c
    2fce:	0007      	movs	r7, r0
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    2fd0:	2a00      	cmp	r2, #0
    2fd2:	d000      	beq.n	2fd6 <ticker_job+0xe>
    2fd4:	e372      	b.n	36bc <ticker_job+0x6f4>
		DEBUG_TICKER_JOB(0);

		return;
	}
	instance->job_guard = 1;
    2fd6:	2301      	movs	r3, #1
    2fd8:	7703      	strb	r3, [r0, #28]

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    2fda:	6943      	ldr	r3, [r0, #20]
    2fdc:	9305      	str	r3, [sp, #20]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2fde:	7a83      	ldrb	r3, [r0, #10]
    2fe0:	7ac1      	ldrb	r1, [r0, #11]
    2fe2:	4299      	cmp	r1, r3
    2fe4:	d013      	beq.n	300e <ticker_job+0x46>
		u8_t first;

		first = instance->ticks_elapsed_first + 1;
    2fe6:	3301      	adds	r3, #1
    2fe8:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    2fea:	2b02      	cmp	r3, #2
    2fec:	d100      	bne.n	2ff0 <ticker_job+0x28>
			first = 0;
    2fee:	0013      	movs	r3, r2
		}
		instance->ticks_elapsed_first = first;
    2ff0:	72bb      	strb	r3, [r7, #10]

		ticks_elapsed =
    2ff2:	3302      	adds	r3, #2
    2ff4:	009b      	lsls	r3, r3, #2
    2ff6:	18fb      	adds	r3, r7, r3
    2ff8:	685b      	ldr	r3, [r3, #4]
    2ffa:	9301      	str	r3, [sp, #4]
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= 0x00FFFFFF;
    2ffc:	9a01      	ldr	r2, [sp, #4]
    2ffe:	9b05      	ldr	r3, [sp, #20]
    3000:	189b      	adds	r3, r3, r2
    3002:	021b      	lsls	r3, r3, #8
    3004:	0a1b      	lsrs	r3, r3, #8
    3006:	617b      	str	r3, [r7, #20]

		flag_elapsed = 1;
    3008:	2301      	movs	r3, #1
    300a:	9304      	str	r3, [sp, #16]
    300c:	e001      	b.n	3012 <ticker_job+0x4a>
	} else {
		/* No elapsed value in queue */
		flag_elapsed = 0;
    300e:	9204      	str	r2, [sp, #16]
		ticks_elapsed = 0;
    3010:	9201      	str	r2, [sp, #4]
	flag_compare_update = 0;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    3012:	7e3b      	ldrb	r3, [r7, #24]
    3014:	9308      	str	r3, [sp, #32]
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
	node = &instance->node[0];
    3016:	683b      	ldr	r3, [r7, #0]
    3018:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    301a:	687b      	ldr	r3, [r7, #4]
    301c:	930c      	str	r3, [sp, #48]	; 0x30
	count_user = instance->count_user;
    301e:	7a7b      	ldrb	r3, [r7, #9]
    3020:	9303      	str	r3, [sp, #12]
		flag_elapsed = 0;
		ticks_elapsed = 0;
	}

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;
    3022:	23ff      	movs	r3, #255	; 0xff
    3024:	9300      	str	r3, [sp, #0]
	u8_t pending;
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
    3026:	2300      	movs	r3, #0
				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;

				pending = 1;
    3028:	930b      	str	r3, [sp, #44]	; 0x2c

	pending = 0;
	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    302a:	9b03      	ldr	r3, [sp, #12]
    302c:	2b00      	cmp	r3, #0
    302e:	d100      	bne.n	3032 <ticker_job+0x6a>
    3030:	e0e3      	b.n	31fa <ticker_job+0x232>
    3032:	9b03      	ldr	r3, [sp, #12]
		struct ticker_user *user;
		struct ticker_user_op *user_ops;

		user = &users[count_user];
    3034:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	pending = 0;
	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    3036:	3b01      	subs	r3, #1
    3038:	b2db      	uxtb	r3, r3
    303a:	9303      	str	r3, [sp, #12]
		struct ticker_user *user;
		struct ticker_user_op *user_ops;

		user = &users[count_user];
    303c:	00db      	lsls	r3, r3, #3
    303e:	18d3      	adds	r3, r2, r3
    3040:	9302      	str	r3, [sp, #8]
		user_ops = &user->user_op[0];
    3042:	685b      	ldr	r3, [r3, #4]
    3044:	930d      	str	r3, [sp, #52]	; 0x34
		while (user->middle != user->last) {
    3046:	9b02      	ldr	r3, [sp, #8]
    3048:	78d9      	ldrb	r1, [r3, #3]
    304a:	9b02      	ldr	r3, [sp, #8]
    304c:	789e      	ldrb	r6, [r3, #2]
    304e:	428e      	cmp	r6, r1
    3050:	d0eb      	beq.n	302a <ticker_job+0x62>
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    3052:	252c      	movs	r5, #44	; 0x2c
    3054:	4375      	muls	r5, r6
    3056:	9b0d      	ldr	r3, [sp, #52]	; 0x34

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    3058:	9a02      	ldr	r2, [sp, #8]
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    305a:	195d      	adds	r5, r3, r5

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    305c:	7812      	ldrb	r2, [r2, #0]

			user_op = &user_ops[user->middle];

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
    305e:	1c73      	adds	r3, r6, #1
    3060:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
    3062:	429a      	cmp	r2, r3
    3064:	d100      	bne.n	3068 <ticker_job+0xa0>
				middle = 0;
    3066:	2300      	movs	r3, #0
			}
			user->middle = middle;
    3068:	9a02      	ldr	r2, [sp, #8]
    306a:	7093      	strb	r3, [r2, #2]

			ticker = &node[user_op->id];

			/* if op is start, then skip update and stop ops */
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    306c:	782a      	ldrb	r2, [r5, #0]
    306e:	2a03      	cmp	r2, #3
    3070:	d9eb      	bls.n	304a <ticker_job+0x82>
			state = (ticker->req - ticker->ack) & 0xff;

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP)
    3072:	2a05      	cmp	r2, #5
    3074:	d815      	bhi.n	30a2 <ticker_job+0xda>
			if (middle == user->count_user_op) {
				middle = 0;
			}
			user->middle = middle;

			ticker = &node[user_op->id];
    3076:	2424      	movs	r4, #36	; 0x24
    3078:	7869      	ldrb	r1, [r5, #1]
    307a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    307c:	434c      	muls	r4, r1
    307e:	191c      	adds	r4, r3, r4
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
				continue;
			}

			/* determine the ticker state */
			state = (ticker->req - ticker->ack) & 0xff;
    3080:	7863      	ldrb	r3, [r4, #1]
    3082:	78a0      	ldrb	r0, [r4, #2]
    3084:	1a1b      	subs	r3, r3, r0
    3086:	b2db      	uxtb	r3, r3

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP)
			    || (state == 0)
    3088:	2b00      	cmp	r3, #0
    308a:	d00a      	beq.n	30a2 <ticker_job+0xda>
			    || ((user_op->op == TICKER_USER_OP_TYPE_UPDATE)
    308c:	2a04      	cmp	r2, #4
    308e:	d112      	bne.n	30b6 <ticker_job+0xee>
				&&
				(user_op->params.update.ticks_drift_plus == 0)
				&&
    3090:	686a      	ldr	r2, [r5, #4]
    3092:	2a00      	cmp	r2, #0
    3094:	d10f      	bne.n	30b6 <ticker_job+0xee>
				(user_op->params.update.ticks_drift_minus ==
				 0)
				&& (user_op->params.update.ticks_slot_plus ==
				    0)
				&& (user_op->params.update.ticks_slot_minus ==
    3096:	68aa      	ldr	r2, [r5, #8]
    3098:	2a00      	cmp	r2, #0
    309a:	d10c      	bne.n	30b6 <ticker_job+0xee>
				    0)
				&& (user_op->params.update.lazy == 0)
				&& (user_op->params.update.force == 0)
    309c:	68ea      	ldr	r2, [r5, #12]
    309e:	0212      	lsls	r2, r2, #8
    30a0:	d109      	bne.n	30b6 <ticker_job+0xee>
			    )
			    ) {
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    30a2:	2300      	movs	r3, #0
    30a4:	702b      	strb	r3, [r5, #0]
				user_op->status = TICKER_STATUS_FAILURE;
    30a6:	3301      	adds	r3, #1
    30a8:	622b      	str	r3, [r5, #32]
				if (user_op->fp_op_func) {
    30aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    30ac:	2b00      	cmp	r3, #0
    30ae:	d0ca      	beq.n	3046 <ticker_job+0x7e>
					user_op->fp_op_func(user_op->status,
    30b0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    30b2:	2001      	movs	r0, #1
    30b4:	e096      	b.n	31e4 <ticker_job+0x21c>

				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
    30b6:	2b01      	cmp	r3, #1
    30b8:	d000      	beq.n	30bc <ticker_job+0xf4>
    30ba:	e095      	b.n	31e8 <ticker_job+0x220>
				ticker->ticks_to_expire =
				    ticker_dequeue(instance,
    30bc:	0038      	movs	r0, r7
    30be:	f7ff fe63 	bl	2d88 <ticker_dequeue>
				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
				ticker->ticks_to_expire =
    30c2:	60a0      	str	r0, [r4, #8]
						      user_op->id);

				/* Handle drift of ticker by re-inserting
				 * it back.
				 */
				if (user_op->op ==
    30c4:	782b      	ldrb	r3, [r5, #0]
			}

			/* Delete node, if not expired */
			if (state == 1) {
				ticker->ticks_to_expire =
				    ticker_dequeue(instance,
    30c6:	0006      	movs	r6, r0
						      user_op->id);

				/* Handle drift of ticker by re-inserting
				 * it back.
				 */
				if (user_op->op ==
    30c8:	2b04      	cmp	r3, #4
    30ca:	d000      	beq.n	30ce <ticker_job+0x106>
    30cc:	e078      	b.n	31c0 <ticker_job+0x1f8>
					TICKER_USER_OP_TYPE_UPDATE) {
					ticker_job_node_update(ticker,
    30ce:	697b      	ldr	r3, [r7, #20]
    30d0:	9306      	str	r3, [sp, #24]
					  u8_t *insert_head)
{
	u32_t ticks_now;
	u32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
    30d2:	f7ff fa01 	bl	24d8 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    30d6:	9a06      	ldr	r2, [sp, #24]
					  u8_t *insert_head)
{
	u32_t ticks_now;
	u32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
    30d8:	9007      	str	r0, [sp, #28]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    30da:	1a80      	subs	r0, r0, r2
    30dc:	0200      	lsls	r0, r0, #8
    30de:	9b01      	ldr	r3, [sp, #4]
    30e0:	0a00      	lsrs	r0, r0, #8
    30e2:	18c3      	adds	r3, r0, r3
	if (ticks_to_expire > ticks_elapsed) {
		ticks_to_expire -= ticks_elapsed;
    30e4:	1af0      	subs	r0, r6, r3
	u32_t ticks_now;
	u32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
	if (ticks_to_expire > ticks_elapsed) {
    30e6:	429e      	cmp	r6, r3
    30e8:	d804      	bhi.n	30f4 <ticker_job+0x12c>
		ticks_to_expire -= ticks_elapsed;
	} else {
		ticker->ticks_to_expire_minus +=
    30ea:	8aa0      	ldrh	r0, [r4, #20]
    30ec:	1b80      	subs	r0, r0, r6
    30ee:	18c0      	adds	r0, r0, r3
    30f0:	82a0      	strh	r0, [r4, #20]
		    (ticks_elapsed - ticks_to_expire);
		ticks_to_expire = 0;
    30f2:	2000      	movs	r0, #0
	}

	if ((ticker->ticks_periodic != 0)
    30f4:	6863      	ldr	r3, [r4, #4]
    30f6:	2b00      	cmp	r3, #0
    30f8:	d03d      	beq.n	3176 <ticker_job+0x1ae>
	    && (user_op->params.update.lazy != 0)
    30fa:	89ab      	ldrh	r3, [r5, #12]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d03a      	beq.n	3176 <ticker_job+0x1ae>
	    ) {
		user_op->params.update.lazy--;
    3100:	3b01      	subs	r3, #1
    3102:	81ab      	strh	r3, [r5, #12]

		while ((ticks_to_expire > ticker->ticks_periodic)
    3104:	6863      	ldr	r3, [r4, #4]
    3106:	469c      	mov	ip, r3
    3108:	4584      	cmp	ip, r0
    310a:	d301      	bcc.n	3110 <ticker_job+0x148>
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
    310c:	49cb      	ldr	r1, [pc, #812]	; (343c <ticker_job+0x474>)
    310e:	e027      	b.n	3160 <ticker_job+0x198>
	    && (user_op->params.update.lazy != 0)
	    ) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic)
		       && (ticker->lazy_current >
    3110:	8b63      	ldrh	r3, [r4, #26]
    3112:	9309      	str	r3, [sp, #36]	; 0x24
    3114:	89aa      	ldrh	r2, [r5, #12]
    3116:	429a      	cmp	r2, r3
    3118:	d2f8      	bcs.n	310c <ticker_job+0x144>

static u8_t ticker_remainder_decrement(struct ticker_node *ticker)
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= 0x80000000)
    311a:	6a21      	ldr	r1, [r4, #32]
    311c:	4ac8      	ldr	r2, [pc, #800]	; (3440 <ticker_job+0x478>)
    311e:	4bc7      	ldr	r3, [pc, #796]	; (343c <ticker_job+0x474>)
    3120:	188a      	adds	r2, r1, r2
    3122:	0016      	movs	r6, r2
	return 0;
}

static u8_t ticker_remainder_decrement(struct ticker_node *ticker)
{
	u8_t decrement = 0;
    3124:	2200      	movs	r2, #0

	if ((ticker->remainder_current >= 0x80000000)
    3126:	429e      	cmp	r6, r3
    3128:	d903      	bls.n	3132 <ticker_job+0x16a>
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
    312a:	4ac6      	ldr	r2, [pc, #792]	; (3444 <ticker_job+0x47c>)
    312c:	1889      	adds	r1, r1, r2
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
    312e:	2201      	movs	r2, #1
		ticker->remainder_current += 30517578UL;
    3130:	6221      	str	r1, [r4, #32]
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    3132:	6a21      	ldr	r1, [r4, #32]
    3134:	69e6      	ldr	r6, [r4, #28]
		       && (ticker->lazy_current >
			   user_op->params.update.lazy)) {
			ticks_to_expire -=
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
    3136:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    3138:	1b89      	subs	r1, r1, r6
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic)
		       && (ticker->lazy_current >
			   user_op->params.update.lazy)) {
			ticks_to_expire -=
    313a:	4462      	add	r2, ip
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
    313c:	3b01      	subs	r3, #1
	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    313e:	6221      	str	r1, [r4, #32]
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic)
		       && (ticker->lazy_current >
			   user_op->params.update.lazy)) {
			ticks_to_expire -=
    3140:	1a80      	subs	r0, r0, r2
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
    3142:	8363      	strh	r3, [r4, #26]
    3144:	e7e0      	b.n	3108 <ticker_job+0x140>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3146:	69e6      	ldr	r6, [r4, #28]
    3148:	6a23      	ldr	r3, [r4, #32]
    314a:	199b      	adds	r3, r3, r6
	if ((ticker->remainder_current < 0x80000000)
    314c:	4ebc      	ldr	r6, [pc, #752]	; (3440 <ticker_job+0x478>)
    314e:	199e      	adds	r6, r3, r6
    3150:	428e      	cmp	r6, r1
    3152:	d90a      	bls.n	316a <ticker_job+0x1a2>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3154:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    3156:	2300      	movs	r3, #0
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire +=
    3158:	4463      	add	r3, ip
			    ticker->ticks_periodic +
			    ticker_remainder_increment(ticker);
			ticker->lazy_current++;
    315a:	3201      	adds	r2, #1
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire +=
    315c:	18c0      	adds	r0, r0, r3
			    ticker->ticks_periodic +
			    ticker_remainder_increment(ticker);
			ticker->lazy_current++;
    315e:	8362      	strh	r2, [r4, #26]
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
    3160:	8b62      	ldrh	r2, [r4, #26]
    3162:	89ab      	ldrh	r3, [r5, #12]
    3164:	429a      	cmp	r2, r3
    3166:	d3ee      	bcc.n	3146 <ticker_job+0x17e>
    3168:	e004      	b.n	3174 <ticker_job+0x1ac>
static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    316a:	4eb7      	ldr	r6, [pc, #732]	; (3448 <ticker_job+0x480>)
    316c:	199b      	adds	r3, r3, r6
    316e:	6223      	str	r3, [r4, #32]
		return 1;
    3170:	2301      	movs	r3, #1
    3172:	e7f1      	b.n	3158 <ticker_job+0x190>
			    ticker->ticks_periodic +
			    ticker_remainder_increment(ticker);
			ticker->lazy_current++;
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
    3174:	8323      	strh	r3, [r4, #24]
	}

	ticker->ticks_to_expire =
    3176:	88ab      	ldrh	r3, [r5, #4]
	    ticks_to_expire + user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    3178:	8aa2      	ldrh	r2, [r4, #20]
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire =
    317a:	1818      	adds	r0, r3, r0
    317c:	60a0      	str	r0, [r4, #8]
	    ticks_to_expire + user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    317e:	88eb      	ldrh	r3, [r5, #6]
	    user_op->params.update.ticks_drift_minus;
	prepare_ticks_to_expire(ticker, ticks_current, ticks_now);
    3180:	9906      	ldr	r1, [sp, #24]
		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire =
	    ticks_to_expire + user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    3182:	18d3      	adds	r3, r2, r3
    3184:	82a3      	strh	r3, [r4, #20]
	    user_op->params.update.ticks_drift_minus;
	prepare_ticks_to_expire(ticker, ticks_current, ticks_now);
    3186:	9a07      	ldr	r2, [sp, #28]
    3188:	0020      	movs	r0, r4
    318a:	f7ff fe25 	bl	2dd8 <prepare_ticks_to_expire>

	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    318e:	8ae2      	ldrh	r2, [r4, #22]
    3190:	892b      	ldrh	r3, [r5, #8]
    3192:	18d3      	adds	r3, r2, r3
    3194:	b29b      	uxth	r3, r3
    3196:	82e3      	strh	r3, [r4, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    3198:	896a      	ldrh	r2, [r5, #10]
    319a:	4293      	cmp	r3, r2
    319c:	d901      	bls.n	31a2 <ticker_job+0x1da>
		ticker->ticks_slot -=
    319e:	1a9b      	subs	r3, r3, r2
    31a0:	e000      	b.n	31a4 <ticker_job+0x1dc>
		    user_op->params.update.ticks_slot_minus;
	} else {
		ticker->ticks_slot = 0;
    31a2:	2300      	movs	r3, #0
    31a4:	82e3      	strh	r3, [r4, #22]
	}

	if (user_op->params.update.force != 0) {
    31a6:	7bab      	ldrb	r3, [r5, #14]
    31a8:	2b00      	cmp	r3, #0
    31aa:	d000      	beq.n	31ae <ticker_job+0x1e6>
		ticker->force = user_op->params.update.force;
    31ac:	70e3      	strb	r3, [r4, #3]
	}

	ticker->next = *insert_head;
    31ae:	466b      	mov	r3, sp
    31b0:	781b      	ldrb	r3, [r3, #0]
    31b2:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
    31b4:	786b      	ldrb	r3, [r5, #1]
    31b6:	9300      	str	r3, [sp, #0]
							  insert_head);

					/* set schedule status of node
					 * as updating.
					 */
					ticker->req++;
    31b8:	7863      	ldrb	r3, [r4, #1]
    31ba:	3301      	adds	r3, #1
    31bc:	7063      	strb	r3, [r4, #1]
    31be:	e009      	b.n	31d4 <ticker_job+0x20c>
				} else {
					/* reset schedule status of node */
					ticker->req = ticker->ack;
    31c0:	78a3      	ldrb	r3, [r4, #2]
    31c2:	7063      	strb	r3, [r4, #1]

					if (instance->
    31c4:	7e7a      	ldrb	r2, [r7, #25]
    31c6:	786b      	ldrb	r3, [r5, #1]
    31c8:	429a      	cmp	r2, r3
    31ca:	d103      	bne.n	31d4 <ticker_job+0x20c>
					    ticker_id_slot_previous ==
					    user_op->id) {
						instance->
						    ticker_id_slot_previous =
    31cc:	23ff      	movs	r3, #255	; 0xff
    31ce:	767b      	strb	r3, [r7, #25]
						    TICKER_NULL;
						instance->
						    ticks_slot_previous = 0;
    31d0:	2300      	movs	r3, #0
    31d2:	837b      	strh	r3, [r7, #26]
				}

				/* op success, @todo update may fail during
				 * actual insert! need to design that yet.
				 */
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    31d4:	2000      	movs	r0, #0
				user_op->status = TICKER_STATUS_SUCCESS;
				if (user_op->fp_op_func) {
    31d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				}

				/* op success, @todo update may fail during
				 * actual insert! need to design that yet.
				 */
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    31d8:	7028      	strb	r0, [r5, #0]
				user_op->status = TICKER_STATUS_SUCCESS;
    31da:	6228      	str	r0, [r5, #32]
				if (user_op->fp_op_func) {
    31dc:	4283      	cmp	r3, r0
    31de:	d100      	bne.n	31e2 <ticker_job+0x21a>
    31e0:	e731      	b.n	3046 <ticker_job+0x7e>
					user_op->fp_op_func(
    31e2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    31e4:	4798      	blx	r3
    31e6:	e72e      	b.n	3046 <ticker_job+0x7e>
				/* update on expired node requested, deferi
				 * update until bottom half finishes.
				 */
				/* sched job to run after worker bottom half.
				 */
				instance->fp_sched(CALL_ID_JOB,
    31e8:	2102      	movs	r1, #2
    31ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31ec:	2201      	movs	r2, #1
    31ee:	0008      	movs	r0, r1
    31f0:	4798      	blx	r3
						   CALL_ID_JOB, 1);

				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;
    31f2:	9b02      	ldr	r3, [sp, #8]
    31f4:	709e      	strb	r6, [r3, #2]

				pending = 1;
    31f6:	2301      	movs	r3, #1
    31f8:	e716      	b.n	3028 <ticker_job+0x60>

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;

	/* Initialise flag used to update next compare value */
	flag_compare_update = 0;
    31fa:	7e3b      	ldrb	r3, [r7, #24]
    31fc:	9a08      	ldr	r2, [sp, #32]
    31fe:	1a9b      	subs	r3, r3, r2
    3200:	1e5a      	subs	r2, r3, #1
    3202:	4193      	sbcs	r3, r2
    3204:	b2db      	uxtb	r3, r3
    3206:	930a      	str	r3, [sp, #40]	; 0x28
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    3208:	9b04      	ldr	r3, [sp, #16]
    320a:	2b00      	cmp	r3, #0
    320c:	d063      	beq.n	32d6 <ticker_job+0x30e>
					u8_t *insert_head)
{
	struct ticker_node *node;
	u32_t ticks_expired;

	node = &instance->node[0];
    320e:	683b      	ldr	r3, [r7, #0]
    3210:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    3212:	9b03      	ldr	r3, [sp, #12]
    3214:	9302      	str	r3, [sp, #8]
	while (instance->ticker_id_head != TICKER_NULL) {
    3216:	7e3e      	ldrb	r6, [r7, #24]
    3218:	2eff      	cmp	r6, #255	; 0xff
    321a:	d056      	beq.n	32ca <ticker_job+0x302>
		u8_t id_expired;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		id_expired = instance->ticker_id_head;
		ticker = &node[id_expired];
    321c:	2424      	movs	r4, #36	; 0x24
    321e:	4374      	muls	r4, r6
    3220:	9b04      	ldr	r3, [sp, #16]
    3222:	191c      	adds	r4, r3, r4

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    3224:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    3226:	9b01      	ldr	r3, [sp, #4]
    3228:	429d      	cmp	r5, r3
    322a:	d902      	bls.n	3232 <ticker_job+0x26a>
			ticker->ticks_to_expire -= ticks_elapsed;
    322c:	1aed      	subs	r5, r5, r3
    322e:	60a5      	str	r5, [r4, #8]
    3230:	e04b      	b.n	32ca <ticker_job+0x302>
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;
    3232:	9b02      	ldr	r3, [sp, #8]
    3234:	195b      	adds	r3, r3, r5
    3236:	9302      	str	r3, [sp, #8]

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
    3238:	8b7b      	ldrh	r3, [r7, #26]
    323a:	429d      	cmp	r5, r3
    323c:	d201      	bcs.n	3242 <ticker_job+0x27a>
			instance->ticks_slot_previous -= ticks_to_expire;
    323e:	1b5b      	subs	r3, r3, r5
    3240:	e002      	b.n	3248 <ticker_job+0x280>
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    3242:	23ff      	movs	r3, #255	; 0xff
    3244:	767b      	strb	r3, [r7, #25]
			instance->ticks_slot_previous = 0;
    3246:	2300      	movs	r3, #0
    3248:	837b      	strh	r3, [r7, #26]
		}

		/* save current ticks_slot_previous */
		if (ticker->ticks_slot != 0) {
    324a:	8ae3      	ldrh	r3, [r4, #22]
    324c:	2b00      	cmp	r3, #0
    324e:	d002      	beq.n	3256 <ticker_job+0x28e>
			instance->ticker_id_slot_previous = id_expired;
    3250:	767e      	strb	r6, [r7, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
    3252:	8ae3      	ldrh	r3, [r4, #22]
    3254:	837b      	strh	r3, [r7, #26]
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    3256:	2200      	movs	r2, #0

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    3258:	7823      	ldrb	r3, [r4, #0]
			instance->ticker_id_slot_previous = id_expired;
			instance->ticks_slot_previous = ticker->ticks_slot;
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    325a:	60a2      	str	r2, [r4, #8]

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    325c:	763b      	strb	r3, [r7, #24]

		/* ticker will be restarted if periodic */
		if (ticker->ticks_periodic != 0) {
    325e:	6860      	ldr	r0, [r4, #4]
    3260:	4290      	cmp	r0, r2
    3262:	d02a      	beq.n	32ba <ticker_job+0x2f2>
    3264:	8b23      	ldrh	r3, [r4, #24]
    3266:	9303      	str	r3, [sp, #12]
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
    3268:	4b74      	ldr	r3, [pc, #464]	; (343c <ticker_job+0x474>)
    326a:	469c      	mov	ip, r3
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    326c:	69e1      	ldr	r1, [r4, #28]
    326e:	6a23      	ldr	r3, [r4, #32]
    3270:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < 0x80000000)
    3272:	4973      	ldr	r1, [pc, #460]	; (3440 <ticker_job+0x478>)
    3274:	1859      	adds	r1, r3, r1
    3276:	4561      	cmp	r1, ip
    3278:	d902      	bls.n	3280 <ticker_job+0x2b8>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    327a:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    327c:	2300      	movs	r3, #0
    327e:	e003      	b.n	3288 <ticker_job+0x2c0>
static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3280:	4971      	ldr	r1, [pc, #452]	; (3448 <ticker_job+0x480>)
    3282:	185b      	adds	r3, r3, r1
    3284:	6223      	str	r3, [r4, #32]
		return 1;
    3286:	2301      	movs	r3, #1

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
				ticks_to_expire +=
    3288:	181b      	adds	r3, r3, r0
    328a:	18d2      	adds	r2, r2, r3
			u32_t count;

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
    328c:	9b03      	ldr	r3, [sp, #12]
    328e:	3b01      	subs	r3, #1
    3290:	9303      	str	r3, [sp, #12]
    3292:	d2eb      	bcs.n	326c <ticker_job+0x2a4>
				    ticker->ticks_periodic +
				    ticker_remainder_increment(ticker);
			}

			ticker->ticks_to_expire = ticks_to_expire;
			prepare_ticks_to_expire(ticker,
    3294:	9b05      	ldr	r3, [sp, #20]
				ticks_to_expire +=
				    ticker->ticks_periodic +
				    ticker_remainder_increment(ticker);
			}

			ticker->ticks_to_expire = ticks_to_expire;
    3296:	60a2      	str	r2, [r4, #8]
			prepare_ticks_to_expire(ticker,
    3298:	9a02      	ldr	r2, [sp, #8]
    329a:	6979      	ldr	r1, [r7, #20]
    329c:	189a      	adds	r2, r3, r2
    329e:	0020      	movs	r0, r4
    32a0:	f7ff fd9a 	bl	2dd8 <prepare_ticks_to_expire>
						    instance->ticks_current,
						    (ticks_previous +
						     ticks_expired));
			ticker->lazy_current = ticker->lazy_periodic;
    32a4:	8b23      	ldrh	r3, [r4, #24]
    32a6:	8363      	strh	r3, [r4, #26]
			ticker->force = 0;
    32a8:	2300      	movs	r3, #0
    32aa:	70e3      	strb	r3, [r4, #3]

			ticker->next = *insert_head;
    32ac:	466b      	mov	r3, sp
    32ae:	781b      	ldrb	r3, [r3, #0]
    32b0:	7023      	strb	r3, [r4, #0]
			*insert_head = id_expired;

			/* set schedule status of node as restarting. */
			ticker->req++;
    32b2:	7863      	ldrb	r3, [r4, #1]
    32b4:	3301      	adds	r3, #1
    32b6:	7063      	strb	r3, [r4, #1]
    32b8:	e002      	b.n	32c0 <ticker_job+0x2f8>
		} else {
			/* reset schedule status of node */
			ticker->req = ticker->ack;
    32ba:	78a3      	ldrb	r3, [r4, #2]
    32bc:	9e00      	ldr	r6, [sp, #0]
    32be:	7063      	strb	r3, [r4, #1]
			ticker->ticks_to_expire -= ticks_elapsed;
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    32c0:	9b01      	ldr	r3, [sp, #4]
    32c2:	9600      	str	r6, [sp, #0]
    32c4:	1b5b      	subs	r3, r3, r5
    32c6:	9301      	str	r3, [sp, #4]
    32c8:	e7a5      	b.n	3216 <ticker_job+0x24e>
	if (flag_elapsed) {
		ticker_job_worker_bottom_half(instance, ticks_previous,
						 ticks_elapsed, &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
    32ca:	7e3b      	ldrb	r3, [r7, #24]
    32cc:	9a08      	ldr	r2, [sp, #32]
    32ce:	4293      	cmp	r3, r2
    32d0:	d001      	beq.n	32d6 <ticker_job+0x30e>
			flag_compare_update = 1;
    32d2:	2301      	movs	r3, #1
    32d4:	930a      	str	r3, [sp, #40]	; 0x28
{
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	node = &instance->node[0];
    32d6:	683b      	ldr	r3, [r7, #0]
    32d8:	930c      	str	r3, [sp, #48]	; 0x30
	users = &instance->user[0];
    32da:	687b      	ldr	r3, [r7, #4]
    32dc:	9310      	str	r3, [sp, #64]	; 0x40
	count_user = instance->count_user;
    32de:	7a7b      	ldrb	r3, [r7, #9]
    32e0:	9306      	str	r3, [sp, #24]
	while (count_user--) {
    32e2:	9b06      	ldr	r3, [sp, #24]
    32e4:	2b00      	cmp	r3, #0
    32e6:	d100      	bne.n	32ea <ticker_job+0x322>
    32e8:	e128      	b.n	353c <ticker_job+0x574>
    32ea:	9b06      	ldr	r3, [sp, #24]
		struct ticker_user *user;
		u8_t user_ops_first;

		user = &users[count_user];
    32ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
	u8_t count_user;

	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    32ee:	3b01      	subs	r3, #1
    32f0:	b2db      	uxtb	r3, r3
    32f2:	9306      	str	r3, [sp, #24]
		struct ticker_user *user;
		u8_t user_ops_first;

		user = &users[count_user];
    32f4:	00db      	lsls	r3, r3, #3
    32f6:	18d3      	adds	r3, r2, r3
    32f8:	9309      	str	r3, [sp, #36]	; 0x24
		user_ops_first = user->first;
    32fa:	785b      	ldrb	r3, [r3, #1]
    32fc:	9304      	str	r3, [sp, #16]
		while ((insert_head != TICKER_NULL)
    32fe:	9b00      	ldr	r3, [sp, #0]
    3300:	2bff      	cmp	r3, #255	; 0xff
    3302:	d013      	beq.n	332c <ticker_job+0x364>
			struct ticker_node *ticker;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    3304:	2424      	movs	r4, #36	; 0x24
    3306:	9b00      	ldr	r3, [sp, #0]
				insert_head = ticker->next;

				user_op = 0;
    3308:	2500      	movs	r5, #0
			struct ticker_node *ticker;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    330a:	435c      	muls	r4, r3
    330c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    330e:	191c      	adds	r4, r3, r4
				insert_head = ticker->next;
    3310:	9b00      	ldr	r3, [sp, #0]
    3312:	9302      	str	r3, [sp, #8]
    3314:	7823      	ldrb	r3, [r4, #0]
    3316:	9300      	str	r3, [sp, #0]
    3318:	e046      	b.n	33a8 <ticker_job+0x3e0>
				if (_user_op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
					user_op->op = TICKER_USER_OP_TYPE_NONE;
    331a:	2300      	movs	r3, #0
					user_op->status =
    331c:	2001      	movs	r0, #1
				if (_user_op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
					user_op->op = TICKER_USER_OP_TYPE_NONE;
    331e:	702b      	strb	r3, [r5, #0]
					user_op->status =
					    TICKER_STATUS_FAILURE;

					if (user_op->fp_op_func) {
    3320:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
					user_op->op = TICKER_USER_OP_TYPE_NONE;
					user_op->status =
    3322:	6228      	str	r0, [r5, #32]
					    TICKER_STATUS_FAILURE;

					if (user_op->fp_op_func) {
    3324:	2b00      	cmp	r3, #0
    3326:	d001      	beq.n	332c <ticker_job+0x364>
						user_op->
    3328:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    332a:	4798      	blx	r3
		u8_t user_ops_first;

		user = &users[count_user];
		user_ops_first = user->first;
		while ((insert_head != TICKER_NULL)
		       || (user_ops_first != user->middle)
    332c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    332e:	9a04      	ldr	r2, [sp, #16]
    3330:	789b      	ldrb	r3, [r3, #2]
    3332:	4293      	cmp	r3, r2
    3334:	d0d5      	beq.n	32e2 <ticker_job+0x31a>
				user_op = 0;
				_user_op = TICKER_USER_OP_TYPE_START;
			} else {
				u8_t first;

				user_op = &user->user_op[user_ops_first];
    3336:	252c      	movs	r5, #44	; 0x2c
    3338:	9b04      	ldr	r3, [sp, #16]
    333a:	435d      	muls	r5, r3
    333c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    333e:	685b      	ldr	r3, [r3, #4]
    3340:	9301      	str	r3, [sp, #4]
    3342:	195d      	adds	r5, r3, r5
				first = user_ops_first + 1;
    3344:	9b04      	ldr	r3, [sp, #16]
    3346:	3301      	adds	r3, #1
    3348:	b2db      	uxtb	r3, r3
    334a:	9304      	str	r3, [sp, #16]
				if (first == user->count_user_op) {
    334c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    334e:	9a04      	ldr	r2, [sp, #16]
    3350:	781b      	ldrb	r3, [r3, #0]
    3352:	4293      	cmp	r3, r2
    3354:	d101      	bne.n	335a <ticker_job+0x392>
					first = 0;
    3356:	2300      	movs	r3, #0
    3358:	9304      	str	r3, [sp, #16]
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
				ticker = &node[id_insert];
				if (_user_op != TICKER_USER_OP_TYPE_START) {
    335a:	782b      	ldrb	r3, [r5, #0]
    335c:	2b03      	cmp	r3, #3
    335e:	d1e5      	bne.n	332c <ticker_job+0x364>
				}
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
				ticker = &node[id_insert];
    3360:	2424      	movs	r4, #36	; 0x24
					first = 0;
				}
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
    3362:	786b      	ldrb	r3, [r5, #1]
				ticker = &node[id_insert];
    3364:	435c      	muls	r4, r3
					first = 0;
				}
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
    3366:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
    3368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    336a:	191c      	adds	r4, r3, r4
				if (_user_op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    336c:	7863      	ldrb	r3, [r4, #1]
    336e:	78a6      	ldrb	r6, [r4, #2]
    3370:	1b9e      	subs	r6, r3, r6
    3372:	b2f6      	uxtb	r6, r6
    3374:	2e00      	cmp	r6, #0
    3376:	d1d0      	bne.n	331a <ticker_job+0x352>
					}

					continue;
				}

				ticker->ticks_periodic =
    3378:	68eb      	ldr	r3, [r5, #12]
				    user_op->params.start.context;

				ticker->ticks_to_expire =
				    user_op->params.start.ticks_first;
				ticker->ticks_to_expire_minus = 0;
				prepare_ticks_to_expire(ticker,
    337a:	6979      	ldr	r1, [r7, #20]
					}

					continue;
				}

				ticker->ticks_periodic =
    337c:	6063      	str	r3, [r4, #4]
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
    337e:	692b      	ldr	r3, [r5, #16]
				    user_op->params.start.context;

				ticker->ticks_to_expire =
				    user_op->params.start.ticks_first;
				ticker->ticks_to_expire_minus = 0;
				prepare_ticks_to_expire(ticker,
    3380:	0020      	movs	r0, r4
					continue;
				}

				ticker->ticks_periodic =
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
    3382:	61e3      	str	r3, [r4, #28]
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
				    user_op->params.start.lazy;
    3384:	8aab      	ldrh	r3, [r5, #20]

				ticker->ticks_periodic =
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
    3386:	8323      	strh	r3, [r4, #24]
				    user_op->params.start.lazy;
				ticker->ticks_slot =
				    user_op->params.start.ticks_slot;
    3388:	8aeb      	ldrh	r3, [r5, #22]
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
				    user_op->params.start.lazy;
				ticker->ticks_slot =
    338a:	82e3      	strh	r3, [r4, #22]
				    user_op->params.start.ticks_slot;
				ticker->timeout_func =
    338c:	69ab      	ldr	r3, [r5, #24]
    338e:	60e3      	str	r3, [r4, #12]
				    user_op->params.start.fp_timeout_func;
				ticker->context =
    3390:	69eb      	ldr	r3, [r5, #28]
    3392:	6123      	str	r3, [r4, #16]
				    user_op->params.start.context;

				ticker->ticks_to_expire =
    3394:	68ab      	ldr	r3, [r5, #8]
				    user_op->params.start.ticks_first;
				ticker->ticks_to_expire_minus = 0;
    3396:	82a6      	strh	r6, [r4, #20]
				ticker->timeout_func =
				    user_op->params.start.fp_timeout_func;
				ticker->context =
				    user_op->params.start.context;

				ticker->ticks_to_expire =
    3398:	60a3      	str	r3, [r4, #8]
				    user_op->params.start.ticks_first;
				ticker->ticks_to_expire_minus = 0;
				prepare_ticks_to_expire(ticker,
    339a:	686a      	ldr	r2, [r5, #4]
    339c:	f7ff fd1c 	bl	2dd8 <prepare_ticks_to_expire>
							    start.
							    ticks_at_start);

				ticker->remainder_current = 0;
				ticker->lazy_current = 0;
				ticker->force = 1;
    33a0:	2301      	movs	r3, #1
							    ticks_current,
							    user_op->params.
							    start.
							    ticks_at_start);

				ticker->remainder_current = 0;
    33a2:	6226      	str	r6, [r4, #32]
				ticker->lazy_current = 0;
    33a4:	8366      	strh	r6, [r4, #26]
				ticker->force = 1;
    33a6:	70e3      	strb	r3, [r4, #3]
			}

			/* Prepare to insert */
			ticker->next = TICKER_NULL;
    33a8:	23ff      	movs	r3, #255	; 0xff
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_current;
	u32_t ticks_slot_previous;

	node = &instance->node[0];
	ticker_new = &node[id];
    33aa:	9a02      	ldr	r2, [sp, #8]
				ticker->lazy_current = 0;
				ticker->force = 1;
			}

			/* Prepare to insert */
			ticker->next = TICKER_NULL;
    33ac:	7023      	strb	r3, [r4, #0]
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_current;
	u32_t ticks_slot_previous;

	node = &instance->node[0];
	ticker_new = &node[id];
    33ae:	3bdb      	subs	r3, #219	; 0xdb
    33b0:	4353      	muls	r3, r2
    33b2:	9311      	str	r3, [sp, #68]	; 0x44
	u8_t collide;
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_current;
	u32_t ticks_slot_previous;

	node = &instance->node[0];
    33b4:	683b      	ldr	r3, [r7, #0]
    33b6:	9307      	str	r3, [sp, #28]
	ticker_new = &node[id];
    33b8:	9a07      	ldr	r2, [sp, #28]
    33ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    33bc:	4694      	mov	ip, r2
    33be:	4463      	add	r3, ip
    33c0:	469c      	mov	ip, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
    33c2:	689b      	ldr	r3, [r3, #8]
    33c4:	9303      	str	r3, [sp, #12]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    33c6:	8b7a      	ldrh	r2, [r7, #26]
	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    33c8:	7e3b      	ldrb	r3, [r7, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    33ca:	9205      	str	r2, [sp, #20]

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    33cc:	22ff      	movs	r2, #255	; 0xff
	current = instance->ticker_id_head;
	previous = current;
    33ce:	930d      	str	r3, [sp, #52]	; 0x34

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    33d0:	9201      	str	r2, [sp, #4]
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
    33d2:	2bff      	cmp	r3, #255	; 0xff
    33d4:	d01a      	beq.n	340c <ticker_job+0x444>
	       &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
    33d6:	2224      	movs	r2, #36	; 0x24
    33d8:	435a      	muls	r2, r3
    33da:	9907      	ldr	r1, [sp, #28]
	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
	       &&
    33dc:	9803      	ldr	r0, [sp, #12]
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
    33de:	188a      	adds	r2, r1, r2
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
	       &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
    33e0:	6891      	ldr	r1, [r2, #8]
	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
	       &&
    33e2:	4288      	cmp	r0, r1
    33e4:	d912      	bls.n	340c <ticker_job+0x444>
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
	    ) {
		ticks_to_expire -= ticks_to_expire_current;
    33e6:	9803      	ldr	r0, [sp, #12]
    33e8:	1a40      	subs	r0, r0, r1
    33ea:	9003      	str	r0, [sp, #12]

		if (ticker_current->ticks_slot != 0) {
    33ec:	8ad0      	ldrh	r0, [r2, #22]
    33ee:	2800      	cmp	r0, #0
    33f0:	d002      	beq.n	33f8 <ticker_job+0x430>
			ticks_slot_previous = ticker_current->ticks_slot;
    33f2:	9005      	str	r0, [sp, #20]
    33f4:	9301      	str	r3, [sp, #4]
    33f6:	e006      	b.n	3406 <ticker_job+0x43e>
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    33f8:	9e05      	ldr	r6, [sp, #20]
    33fa:	42b1      	cmp	r1, r6
    33fc:	d202      	bcs.n	3404 <ticker_job+0x43c>
				ticks_slot_previous -= ticks_to_expire_current;
    33fe:	1a71      	subs	r1, r6, r1
    3400:	9105      	str	r1, [sp, #20]
    3402:	e000      	b.n	3406 <ticker_job+0x43e>
			} else {
				ticks_slot_previous = 0;
    3404:	9005      	str	r0, [sp, #20]
			}
		}
		previous = current;
		current = ticker_current->next;
    3406:	930d      	str	r3, [sp, #52]	; 0x34
    3408:	7813      	ldrb	r3, [r2, #0]
    340a:	e7e2      	b.n	33d2 <ticker_job+0x40a>
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
				ticker_new->ticks_slot);
    340c:	4662      	mov	r2, ip
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
    340e:	9903      	ldr	r1, [sp, #12]
				ticker_new->ticks_slot);
    3410:	8ad2      	ldrh	r2, [r2, #22]
    3412:	920e      	str	r2, [sp, #56]	; 0x38
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
    3414:	1850      	adds	r0, r2, r1
    3416:	001a      	movs	r2, r3
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    3418:	2aff      	cmp	r2, #255	; 0xff
    341a:	d018      	beq.n	344e <ticker_job+0x486>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    341c:	2124      	movs	r1, #36	; 0x24
    341e:	4351      	muls	r1, r2
    3420:	9e07      	ldr	r6, [sp, #28]
    3422:	1871      	adds	r1, r6, r1
		ticks_to_expire = ticker->ticks_to_expire;
    3424:	688e      	ldr	r6, [r1, #8]
    3426:	960f      	str	r6, [sp, #60]	; 0x3c

		if (ticks_slot <= ticks_to_expire) {
    3428:	4286      	cmp	r6, r0
    342a:	d20f      	bcs.n	344c <ticker_job+0x484>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    342c:	8ace      	ldrh	r6, [r1, #22]
    342e:	2e00      	cmp	r6, #0
    3430:	d10d      	bne.n	344e <ticker_job+0x486>
			break;
		}

		ticks_slot -= ticks_to_expire;
    3432:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3434:	1a80      	subs	r0, r0, r2
		ticker_id_head = ticker->next;
    3436:	780a      	ldrb	r2, [r1, #0]
    3438:	e7ee      	b.n	3418 <ticker_job+0x450>
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	7f172b59 	.word	0x7f172b59
    3440:	ff172b5a 	.word	0xff172b5a
    3444:	01d1a94a 	.word	0x01d1a94a
    3448:	fe2e56b6 	.word	0xfe2e56b6

		ticker = &node[ticker_id_head];
		ticks_to_expire = ticker->ticks_to_expire;

		if (ticks_slot <= ticks_to_expire) {
			return TICKER_NULL;
    344c:	22ff      	movs	r2, #255	; 0xff
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
				ticker_new->ticks_slot);

	if ((ticker_new->ticks_slot == 0)
    344e:	990e      	ldr	r1, [sp, #56]	; 0x38
    3450:	2900      	cmp	r1, #0
    3452:	d005      	beq.n	3460 <ticker_job+0x498>
	    || ((ticks_slot_previous <= ticks_to_expire)
    3454:	9905      	ldr	r1, [sp, #20]
    3456:	9803      	ldr	r0, [sp, #12]
    3458:	4288      	cmp	r0, r1
    345a:	d31f      	bcc.n	349c <ticker_job+0x4d4>
		&& (collide == TICKER_NULL))
    345c:	2aff      	cmp	r2, #255	; 0xff
    345e:	d126      	bne.n	34ae <ticker_job+0x4e6>
	    ) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    3460:	4662      	mov	r2, ip
    3462:	9903      	ldr	r1, [sp, #12]
		ticker_new->next = current;
    3464:	7013      	strb	r3, [r2, #0]

	if ((ticker_new->ticks_slot == 0)
	    || ((ticks_slot_previous <= ticks_to_expire)
		&& (collide == TICKER_NULL))
	    ) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    3466:	6091      	str	r1, [r2, #8]
		ticker_new->next = current;

		if (previous == current) {
    3468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    346a:	4293      	cmp	r3, r2
    346c:	d103      	bne.n	3476 <ticker_job+0x4ae>
			instance->ticker_id_head = id;
    346e:	466a      	mov	r2, sp
    3470:	7a12      	ldrb	r2, [r2, #8]
    3472:	763a      	strb	r2, [r7, #24]
    3474:	e006      	b.n	3484 <ticker_job+0x4bc>
		} else {
			node[previous].next = id;
    3476:	2124      	movs	r1, #36	; 0x24
    3478:	4668      	mov	r0, sp
    347a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    347c:	7a00      	ldrb	r0, [r0, #8]
    347e:	434a      	muls	r2, r1
    3480:	9907      	ldr	r1, [sp, #28]
    3482:	5450      	strb	r0, [r2, r1]
		}

		if (current != TICKER_NULL) {
    3484:	2bff      	cmp	r3, #255	; 0xff
    3486:	d100      	bne.n	348a <ticker_job+0x4c2>
    3488:	e10f      	b.n	36aa <ticker_job+0x6e2>
			node[current].ticks_to_expire -= ticks_to_expire;
    348a:	2224      	movs	r2, #36	; 0x24
    348c:	4353      	muls	r3, r2
    348e:	9a07      	ldr	r2, [sp, #28]
    3490:	9903      	ldr	r1, [sp, #12]
    3492:	18d3      	adds	r3, r2, r3
    3494:	689a      	ldr	r2, [r3, #8]
    3496:	1a52      	subs	r2, r2, r1
    3498:	609a      	str	r2, [r3, #8]
    349a:	e106      	b.n	36aa <ticker_job+0x6e2>

			/* Prepare to insert */
			ticker->next = TICKER_NULL;

			/* If insert collides advance to next interval */
			while (id_insert !=
    349c:	9b02      	ldr	r3, [sp, #8]
    349e:	9a01      	ldr	r2, [sp, #4]
    34a0:	4293      	cmp	r3, r2
    34a2:	d100      	bne.n	34a6 <ticker_job+0x4de>
    34a4:	e101      	b.n	36aa <ticker_job+0x6e2>
			       (id_collide =
				ticker_enqueue(instance, id_insert))) {
				struct ticker_node *ticker_preempt;

				ticker_preempt = (id_collide != TICKER_NULL) ?
					&node[id_collide] : 0;
    34a6:	9b01      	ldr	r3, [sp, #4]
    34a8:	2bff      	cmp	r3, #255	; 0xff
    34aa:	d105      	bne.n	34b8 <ticker_job+0x4f0>
    34ac:	e01a      	b.n	34e4 <ticker_job+0x51c>

			/* Prepare to insert */
			ticker->next = TICKER_NULL;

			/* If insert collides advance to next interval */
			while (id_insert !=
    34ae:	9b02      	ldr	r3, [sp, #8]
    34b0:	4293      	cmp	r3, r2
    34b2:	d100      	bne.n	34b6 <ticker_job+0x4ee>
    34b4:	e0f9      	b.n	36aa <ticker_job+0x6e2>
    34b6:	9201      	str	r2, [sp, #4]
			       (id_collide =
				ticker_enqueue(instance, id_insert))) {
				struct ticker_node *ticker_preempt;

				ticker_preempt = (id_collide != TICKER_NULL) ?
					&node[id_collide] : 0;
    34b8:	2624      	movs	r6, #36	; 0x24
    34ba:	9b01      	ldr	r3, [sp, #4]
    34bc:	435e      	muls	r6, r3
    34be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    34c0:	199e      	adds	r6, r3, r6

				if (ticker_preempt
    34c2:	2e00      	cmp	r6, #0
    34c4:	d00e      	beq.n	34e4 <ticker_job+0x51c>
				    && (ticker->force > ticker_preempt->force)
    34c6:	78e2      	ldrb	r2, [r4, #3]
    34c8:	78f3      	ldrb	r3, [r6, #3]
    34ca:	429a      	cmp	r2, r3
    34cc:	d90a      	bls.n	34e4 <ticker_job+0x51c>
				    ) {
					/* dequeue and get the reminder of ticks
					 * to expire.
					 */
					ticker_preempt->ticks_to_expire =
					    ticker_dequeue(instance,
    34ce:	9901      	ldr	r1, [sp, #4]
    34d0:	0038      	movs	r0, r7
    34d2:	f7ff fc59 	bl	2d88 <ticker_dequeue>
							      id_collide);

					/* unschedule node */
					ticker_preempt->req =
    34d6:	78b3      	ldrb	r3, [r6, #2]
				    && (ticker->force > ticker_preempt->force)
				    ) {
					/* dequeue and get the reminder of ticks
					 * to expire.
					 */
					ticker_preempt->ticks_to_expire =
    34d8:	60b0      	str	r0, [r6, #8]
					    ticker_dequeue(instance,
							      id_collide);

					/* unschedule node */
					ticker_preempt->req =
    34da:	7073      	strb	r3, [r6, #1]
					    ticker_preempt->ack;

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
    34dc:	466b      	mov	r3, sp
    34de:	781b      	ldrb	r3, [r3, #0]
    34e0:	7033      	strb	r3, [r6, #0]
    34e2:	e01a      	b.n	351a <ticker_job+0x552>
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
    34e4:	6862      	ldr	r2, [r4, #4]
    34e6:	2a00      	cmp	r2, #0
    34e8:	d01a      	beq.n	3520 <ticker_job+0x558>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    34ea:	69e1      	ldr	r1, [r4, #28]
    34ec:	6a23      	ldr	r3, [r4, #32]
    34ee:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < 0x80000000)
    34f0:	4973      	ldr	r1, [pc, #460]	; (36c0 <ticker_job+0x6f8>)
    34f2:	1858      	adds	r0, r3, r1
    34f4:	4973      	ldr	r1, [pc, #460]	; (36c4 <ticker_job+0x6fc>)
    34f6:	4288      	cmp	r0, r1
    34f8:	d902      	bls.n	3500 <ticker_job+0x538>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    34fa:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    34fc:	2300      	movs	r3, #0
    34fe:	e003      	b.n	3508 <ticker_job+0x540>
static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3500:	4971      	ldr	r1, [pc, #452]	; (36c8 <ticker_job+0x700>)
    3502:	185b      	adds	r3, r3, r1
    3504:	6223      	str	r3, [r4, #32]
		return 1;
    3506:	2301      	movs	r3, #1

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
    3508:	68a1      	ldr	r1, [r4, #8]
    350a:	1852      	adds	r2, r2, r1
    350c:	18d3      	adds	r3, r2, r3
    350e:	60a3      	str	r3, [r4, #8]
					    ticker->ticks_periodic +
					    ticker_remainder_increment
					    (ticker);
					ticker->lazy_current++;
    3510:	8b63      	ldrh	r3, [r4, #26]
    3512:	3301      	adds	r3, #1
    3514:	8363      	strh	r3, [r4, #26]
    3516:	9b00      	ldr	r3, [sp, #0]
    3518:	9301      	str	r3, [sp, #4]
    351a:	9b01      	ldr	r3, [sp, #4]
    351c:	9300      	str	r3, [sp, #0]
    351e:	e749      	b.n	33b4 <ticker_job+0x3ec>
			if (id_insert == id_collide) {
				ticker->req = ticker->ack + 1;

				status = TICKER_STATUS_SUCCESS;
			} else {
				status = TICKER_STATUS_FAILURE;
    3520:	2001      	movs	r0, #1
			}

			if (user_op) {
    3522:	2d00      	cmp	r5, #0
    3524:	d100      	bne.n	3528 <ticker_job+0x560>
    3526:	e6ea      	b.n	32fe <ticker_job+0x336>
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    3528:	2300      	movs	r3, #0
    352a:	702b      	strb	r3, [r5, #0]
				user_op->status = status;

				if (user_op->fp_op_func) {
    352c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				status = TICKER_STATUS_FAILURE;
			}

			if (user_op) {
				user_op->op = TICKER_USER_OP_TYPE_NONE;
				user_op->status = status;
    352e:	6228      	str	r0, [r5, #32]

				if (user_op->fp_op_func) {
    3530:	2b00      	cmp	r3, #0
    3532:	d100      	bne.n	3536 <ticker_job+0x56e>
    3534:	e6e3      	b.n	32fe <ticker_job+0x336>
					user_op->fp_op_func(user_op->status,
    3536:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    3538:	4798      	blx	r3
    353a:	e6e0      	b.n	32fe <ticker_job+0x336>

	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    353c:	7e3b      	ldrb	r3, [r7, #24]
    353e:	9a08      	ldr	r2, [sp, #32]
    3540:	4293      	cmp	r3, r2
    3542:	d103      	bne.n	354c <ticker_job+0x584>
		flag_compare_update = 1;
	}

	/* Processing any list inquiries */
	if (!pending) {
    3544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3546:	2b00      	cmp	r3, #0
    3548:	d162      	bne.n	3610 <ticker_job+0x648>
    354a:	e005      	b.n	3558 <ticker_job+0x590>
    354c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    354e:	2b00      	cmp	r3, #0
    3550:	d000      	beq.n	3554 <ticker_job+0x58c>
    3552:	e0af      	b.n	36b4 <ticker_job+0x6ec>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
    3554:	2301      	movs	r3, #1
    3556:	930a      	str	r3, [sp, #40]	; 0x28
static inline void ticker_job_list_inquire(struct ticker_instance *instance)
{
	struct ticker_user *users;
	u8_t count_user;

	users = &instance->user[0];
    3558:	687b      	ldr	r3, [r7, #4]
    355a:	9303      	str	r3, [sp, #12]
    355c:	7a7b      	ldrb	r3, [r7, #9]
    355e:	3b01      	subs	r3, #1
    3560:	b2dd      	uxtb	r5, r3
	count_user = instance->count_user;
	while (count_user--) {
    3562:	2dff      	cmp	r5, #255	; 0xff
    3564:	d054      	beq.n	3610 <ticker_job+0x648>
		struct ticker_user *user;

		user = &users[count_user];
    3566:	9b03      	ldr	r3, [sp, #12]
    3568:	00ec      	lsls	r4, r5, #3
    356a:	191c      	adds	r4, r3, r4
		while (user->first != user->last) {
    356c:	7863      	ldrb	r3, [r4, #1]
    356e:	78e2      	ldrb	r2, [r4, #3]
    3570:	429a      	cmp	r2, r3
    3572:	d04b      	beq.n	360c <ticker_job+0x644>
			struct ticker_user_op *user_op;
			ticker_op_func fp_op_func;
			u8_t first;

			user_op = &user->user_op[user->first];
    3574:	222c      	movs	r2, #44	; 0x2c
    3576:	4353      	muls	r3, r2
    3578:	6862      	ldr	r2, [r4, #4]
    357a:	18d3      	adds	r3, r2, r3
			fp_op_func = 0;

			switch (user_op->op) {
    357c:	781a      	ldrb	r2, [r3, #0]
    357e:	2a01      	cmp	r2, #1
    3580:	d033      	beq.n	35ea <ticker_job+0x622>
    3582:	2a02      	cmp	r2, #2
    3584:	d139      	bne.n	35fa <ticker_job+0x632>
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
				break;

			case TICKER_USER_OP_TYPE_SLOT_GET:
				ticker_by_next_slot_get(instance,
    3586:	68d9      	ldr	r1, [r3, #12]
    3588:	685a      	ldr	r2, [r3, #4]
    358a:	9101      	str	r1, [sp, #4]
	struct ticker_node *node;
	u8_t _ticker_id_head;
	struct ticker_node *ticker;
	u32_t _ticks_to_expire;

	node = instance->node;
    358c:	6839      	ldr	r1, [r7, #0]
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
				break;

			case TICKER_USER_OP_TYPE_SLOT_GET:
				ticker_by_next_slot_get(instance,
    358e:	9200      	str	r2, [sp, #0]
	struct ticker_node *node;
	u8_t _ticker_id_head;
	struct ticker_node *ticker;
	u32_t _ticks_to_expire;

	node = instance->node;
    3590:	468c      	mov	ip, r1

	_ticker_id_head = *ticker_id_head;
    3592:	9900      	ldr	r1, [sp, #0]
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
				break;

			case TICKER_USER_OP_TYPE_SLOT_GET:
				ticker_by_next_slot_get(instance,
    3594:	689a      	ldr	r2, [r3, #8]
	struct ticker_node *ticker;
	u32_t _ticks_to_expire;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
    3596:	7809      	ldrb	r1, [r1, #0]
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL)
    3598:	29ff      	cmp	r1, #255	; 0xff
    359a:	d004      	beq.n	35a6 <ticker_job+0x5de>
	    || (*ticks_current != instance->ticks_current)) {
    359c:	6810      	ldr	r0, [r2, #0]
    359e:	0006      	movs	r6, r0
    35a0:	6978      	ldr	r0, [r7, #20]
    35a2:	4286      	cmp	r6, r0
    35a4:	d004      	beq.n	35b0 <ticker_job+0x5e8>
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
    35a6:	6978      	ldr	r0, [r7, #20]

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL)
	    || (*ticks_current != instance->ticks_current)) {
		_ticker_id_head = instance->ticker_id_head;
    35a8:	7e39      	ldrb	r1, [r7, #24]
		*ticks_current = instance->ticks_current;
    35aa:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0;
    35ac:	2200      	movs	r2, #0
    35ae:	e013      	b.n	35d8 <ticker_job+0x610>
	} else {
		ticker = &node[_ticker_id_head];
    35b0:	2024      	movs	r0, #36	; 0x24
    35b2:	4341      	muls	r1, r0
		_ticker_id_head = ticker->next;
    35b4:	4660      	mov	r0, ip
	u32_t _ticks_to_expire;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    35b6:	9a01      	ldr	r2, [sp, #4]
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
		_ticks_to_expire = 0;
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
    35b8:	5c41      	ldrb	r1, [r0, r1]
	u32_t _ticks_to_expire;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    35ba:	6812      	ldr	r2, [r2, #0]
    35bc:	e00c      	b.n	35d8 <ticker_job+0x610>
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL)
	       && ((ticker = &node[_ticker_id_head])->ticks_slot == 0)
    35be:	2024      	movs	r0, #36	; 0x24
    35c0:	4348      	muls	r0, r1
    35c2:	4460      	add	r0, ip
    35c4:	8ac6      	ldrh	r6, [r0, #22]
    35c6:	9604      	str	r6, [sp, #16]
    35c8:	6886      	ldr	r6, [r0, #8]
    35ca:	9602      	str	r6, [sp, #8]
    35cc:	9e04      	ldr	r6, [sp, #16]
    35ce:	2e00      	cmp	r6, #0
    35d0:	d105      	bne.n	35de <ticker_job+0x616>
	    ) {
		_ticks_to_expire += ticker->ticks_to_expire;
    35d2:	9902      	ldr	r1, [sp, #8]
    35d4:	1852      	adds	r2, r2, r1
		_ticker_id_head = ticker->next;
    35d6:	7801      	ldrb	r1, [r0, #0]
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL)
    35d8:	29ff      	cmp	r1, #255	; 0xff
    35da:	d1f0      	bne.n	35be <ticker_job+0x5f6>
    35dc:	e001      	b.n	35e2 <ticker_job+0x61a>
		_ticks_to_expire += ticker->ticks_to_expire;
		_ticker_id_head = ticker->next;
	}

	if (_ticker_id_head != TICKER_NULL) {
		_ticks_to_expire += ticker->ticks_to_expire;
    35de:	9802      	ldr	r0, [sp, #8]
    35e0:	1812      	adds	r2, r2, r0
	}

	*ticker_id_head = _ticker_id_head;
    35e2:	9800      	ldr	r0, [sp, #0]
    35e4:	7001      	strb	r1, [r0, #0]
	*ticks_to_expire = _ticks_to_expire;
    35e6:	9901      	ldr	r1, [sp, #4]
    35e8:	600a      	str	r2, [r1, #0]
							   user_op->
							   params.
							   slot_get.
							   ticks_to_expire);

				user_op->status =
    35ea:	2200      	movs	r2, #0
    35ec:	621a      	str	r2, [r3, #32]
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
    35ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			default:
				/* do nothing for other ops */
				break;
			}

			if (fp_op_func) {
    35f0:	2a00      	cmp	r2, #0
    35f2:	d002      	beq.n	35fa <ticker_job+0x632>
				fp_op_func(user_op->status,
    35f4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    35f6:	6a18      	ldr	r0, [r3, #32]
    35f8:	4790      	blx	r2
					   user_op->op_context);
			}

			first = user->first + 1;
    35fa:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    35fc:	7822      	ldrb	r2, [r4, #0]
			if (fp_op_func) {
				fp_op_func(user_op->status,
					   user_op->op_context);
			}

			first = user->first + 1;
    35fe:	3301      	adds	r3, #1
    3600:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
    3602:	429a      	cmp	r2, r3
    3604:	d100      	bne.n	3608 <ticker_job+0x640>
				first = 0;
    3606:	2300      	movs	r3, #0
			}
			user->first = first;
    3608:	7063      	strb	r3, [r4, #1]
    360a:	e7af      	b.n	356c <ticker_job+0x5a4>
    360c:	1e6b      	subs	r3, r5, #1
    360e:	e7a7      	b.n	3560 <ticker_job+0x598>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    3610:	2300      	movs	r3, #0
    3612:	773b      	strb	r3, [r7, #28]

	/* update compare if head changed */
	if (flag_compare_update) {
    3614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3616:	2b00      	cmp	r3, #0
    3618:	d03e      	beq.n	3698 <ticker_job+0x6d0>
	u32_t ctr_post;
	u32_t ctr;
	u32_t cc;
	u32_t i;

	if (instance->ticker_id_head == TICKER_NULL) {
    361a:	7e3b      	ldrb	r3, [r7, #24]
    361c:	2bff      	cmp	r3, #255	; 0xff
    361e:	d105      	bne.n	362c <ticker_job+0x664>
		if (cntr_stop() == 0) {
    3620:	f7fe ff44 	bl	24ac <cntr_stop>
    3624:	2800      	cmp	r0, #0
    3626:	d137      	bne.n	3698 <ticker_job+0x6d0>
			instance->ticks_slot_previous = 0;
    3628:	8378      	strh	r0, [r7, #26]
    362a:	e035      	b.n	3698 <ticker_job+0x6d0>
		}

		return;
	}

	if (ticker_id_old_head == TICKER_NULL) {
    362c:	9b08      	ldr	r3, [sp, #32]
    362e:	2bff      	cmp	r3, #255	; 0xff
    3630:	d107      	bne.n	3642 <ticker_job+0x67a>
		u32_t ticks_current;

		ticks_current = cntr_cnt_get();
    3632:	f7fe ff51 	bl	24d8 <cntr_cnt_get>
    3636:	0004      	movs	r4, r0

		if (cntr_start() == 0) {
    3638:	f7fe ff28 	bl	248c <cntr_start>
    363c:	2800      	cmp	r0, #0
    363e:	d100      	bne.n	3642 <ticker_job+0x67a>
			instance->ticks_current = ticks_current;
    3640:	617c      	str	r4, [r7, #20]
		}
	}

	node = &instance->node[0];
	ticker = &node[instance->ticker_id_head];
	ticks_to_expire = ticker->ticks_to_expire;
    3642:	2324      	movs	r3, #36	; 0x24
    3644:	260a      	movs	r6, #10
    3646:	7e3a      	ldrb	r2, [r7, #24]
    3648:	4353      	muls	r3, r2
    364a:	683a      	ldr	r2, [r7, #0]
    364c:	18d3      	adds	r3, r2, r3
    364e:	689b      	ldr	r3, [r3, #8]
    3650:	9300      	str	r3, [sp, #0]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    3652:	f7fe ff41 	bl	24d8 <cntr_cnt_get>
		cc = instance->ticks_current;
    3656:	697a      	ldr	r2, [r7, #20]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    3658:	0005      	movs	r5, r0
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
		       ticks_to_expire : ticks_elapsed);
    365a:	1a83      	subs	r3, r0, r2
    365c:	021b      	lsls	r3, r3, #8
    365e:	0a1b      	lsrs	r3, r3, #8
    3660:	1cdc      	adds	r4, r3, #3
    3662:	9b00      	ldr	r3, [sp, #0]
    3664:	429c      	cmp	r4, r3
    3666:	d200      	bcs.n	366a <ticker_job+0x6a2>
    3668:	001c      	movs	r4, r3

		ctr = cntr_cnt_get();
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
    366a:	1914      	adds	r4, r2, r4
		       ticks_to_expire : ticks_elapsed);
		cc &= 0x00FFFFFF;
    366c:	0224      	lsls	r4, r4, #8
    366e:	0a24      	lsrs	r4, r4, #8

		instance->fp_cmp_set(cc);
    3670:	0020      	movs	r0, r4
    3672:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3674:	4798      	blx	r3

		ctr_post = cntr_cnt_get();
    3676:	f7fe ff2f 	bl	24d8 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    367a:	1b40      	subs	r0, r0, r5
    367c:	0200      	lsls	r0, r0, #8
    367e:	0a00      	lsrs	r0, r0, #8
    3680:	1b64      	subs	r4, r4, r5
    3682:	0224      	lsls	r4, r4, #8
    3684:	3003      	adds	r0, #3
    3686:	0a24      	lsrs	r4, r4, #8
    3688:	42a0      	cmp	r0, r4
    368a:	d905      	bls.n	3698 <ticker_job+0x6d0>
    368c:	3e01      	subs	r6, #1
	 */
	i = 10;
	do {
		u32_t ticks_elapsed;

		LL_ASSERT(i);
    368e:	2e00      	cmp	r6, #0
    3690:	d1df      	bne.n	3652 <ticker_job+0x68a>
    3692:	b662      	cpsie	i
    3694:	2004      	movs	r0, #4
    3696:	df02      	svc	2
	if (flag_compare_update) {
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    3698:	7f7b      	ldrb	r3, [r7, #29]
    369a:	2b00      	cmp	r3, #0
    369c:	d00e      	beq.n	36bc <ticker_job+0x6f4>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
    369e:	2201      	movs	r2, #1
    36a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36a2:	0011      	movs	r1, r2
    36a4:	2002      	movs	r0, #2
    36a6:	4798      	blx	r3
    36a8:	e008      	b.n	36bc <ticker_job+0x6f4>
				}
			}

			/* Update flags */
			if (id_insert == id_collide) {
				ticker->req = ticker->ack + 1;
    36aa:	78a3      	ldrb	r3, [r4, #2]

				status = TICKER_STATUS_SUCCESS;
    36ac:	2000      	movs	r0, #0
				}
			}

			/* Update flags */
			if (id_insert == id_collide) {
				ticker->req = ticker->ack + 1;
    36ae:	3301      	adds	r3, #1
    36b0:	7063      	strb	r3, [r4, #1]
    36b2:	e736      	b.n	3522 <ticker_job+0x55a>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    36b4:	466b      	mov	r3, sp
    36b6:	7e1b      	ldrb	r3, [r3, #24]
    36b8:	773b      	strb	r3, [r7, #28]
    36ba:	e7ae      	b.n	361a <ticker_job+0x652>
	if (instance->worker_trigger) {
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_JOB(0);
}
    36bc:	b013      	add	sp, #76	; 0x4c
    36be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36c0:	ff172b5a 	.word	0xff172b5a
    36c4:	7f172b59 	.word	0x7f172b59
    36c8:	fe2e56b6 	.word	0xfe2e56b6

000036cc <ticker_instance1_caller_id_get>:
	return 0;
}

static u8_t ticker_instance1_caller_id_get(u8_t user_id)
{
	switch (user_id) {
    36cc:	2802      	cmp	r0, #2
    36ce:	d004      	beq.n	36da <ticker_instance1_caller_id_get+0xe>
    36d0:	2803      	cmp	r0, #3
    36d2:	d002      	beq.n	36da <ticker_instance1_caller_id_get+0xe>
	case MAYFLY_CALL_ID_PROGRAM:
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_2:
	default:
		LL_ASSERT(0);
    36d4:	b662      	cpsie	i
    36d6:	2004      	movs	r0, #4
    36d8:	df02      	svc	2
		LL_ASSERT(0);
		break;
	}

	return 0;
}
    36da:	4770      	bx	lr

000036dc <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
    36dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    36de:	0006      	movs	r6, r0
    36e0:	a805      	add	r0, sp, #20
    36e2:	c880      	ldmia	r0!, {r7}
    36e4:	7804      	ldrb	r4, [r0, #0]
	    || (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)
	    ) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
    36e6:	2e00      	cmp	r6, #0
    36e8:	d009      	beq.n	36fe <ticker_init+0x22>
    36ea:	2e01      	cmp	r6, #1
    36ec:	d139      	bne.n	3762 <ticker_init+0x86>
		instance->fp_sched = ticker_instance0_sched;
		instance->fp_cmp_set = ticker_instance0_cmp_set;
		break;

	case 1:
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
    36ee:	481e      	ldr	r0, [pc, #120]	; (3768 <ticker_init+0x8c>)
    36f0:	4d1e      	ldr	r5, [pc, #120]	; (376c <ticker_init+0x90>)
    36f2:	64c5      	str	r5, [r0, #76]	; 0x4c
		instance->fp_sched = ticker_instance1_sched;
    36f4:	4d1e      	ldr	r5, [pc, #120]	; (3770 <ticker_init+0x94>)
    36f6:	6505      	str	r5, [r0, #80]	; 0x50
		instance->fp_cmp_set = ticker_instance1_cmp_set;
    36f8:	4d1e      	ldr	r5, [pc, #120]	; (3774 <ticker_init+0x98>)
    36fa:	6545      	str	r5, [r0, #84]	; 0x54
		break;
    36fc:	e006      	b.n	370c <ticker_init+0x30>
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
	case 0:
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
    36fe:	481a      	ldr	r0, [pc, #104]	; (3768 <ticker_init+0x8c>)
    3700:	4d1d      	ldr	r5, [pc, #116]	; (3778 <ticker_init+0x9c>)
    3702:	6205      	str	r5, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
    3704:	4d1d      	ldr	r5, [pc, #116]	; (377c <ticker_init+0xa0>)
    3706:	6245      	str	r5, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
    3708:	4d1d      	ldr	r5, [pc, #116]	; (3780 <ticker_init+0xa4>)
    370a:	6285      	str	r5, [r0, #40]	; 0x28

	default:
		return TICKER_STATUS_FAILURE;
	}

	instance->count_node = count_node;
    370c:	202c      	movs	r0, #44	; 0x2c
    370e:	4370      	muls	r0, r6
    3710:	4684      	mov	ip, r0
    3712:	4d15      	ldr	r5, [pc, #84]	; (3768 <ticker_init+0x8c>)
    3714:	1828      	adds	r0, r5, r0
    3716:	7201      	strb	r1, [r0, #8]
	instance->node = node;
    3718:	4661      	mov	r1, ip
    371a:	514a      	str	r2, [r1, r5]
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    371c:	222c      	movs	r2, #44	; 0x2c
    371e:	4694      	mov	ip, r2
	}

	instance->count_node = count_node;
	instance->node = node;

	instance->count_user = count_user;
    3720:	7243      	strb	r3, [r0, #9]
	instance->user = user;
    3722:	6047      	str	r7, [r0, #4]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
    3724:	3b01      	subs	r3, #1
    3726:	b2db      	uxtb	r3, r3
    3728:	2bff      	cmp	r3, #255	; 0xff
    372a:	d00c      	beq.n	3746 <ticker_init+0x6a>
		users[count_user].user_op = user_op_;
    372c:	9807      	ldr	r0, [sp, #28]
    372e:	00da      	lsls	r2, r3, #3
    3730:	18ba      	adds	r2, r7, r2
    3732:	6050      	str	r0, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    3734:	4660      	mov	r0, ip
    3736:	7812      	ldrb	r2, [r2, #0]
    3738:	9907      	ldr	r1, [sp, #28]
    373a:	4350      	muls	r0, r2
		count_op -= users[count_user].count_user_op;
    373c:	1aa4      	subs	r4, r4, r2
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    373e:	1808      	adds	r0, r1, r0
    3740:	9007      	str	r0, [sp, #28]
		count_op -= users[count_user].count_user_op;
    3742:	b2e4      	uxtb	r4, r4
    3744:	e7ee      	b.n	3724 <ticker_init+0x48>
	}

	if (count_op) {
		return TICKER_STATUS_FAILURE;
    3746:	2001      	movs	r0, #1
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
		count_op -= users[count_user].count_user_op;
	}

	if (count_op) {
    3748:	2c00      	cmp	r4, #0
    374a:	d10b      	bne.n	3764 <ticker_init+0x88>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
    374c:	302b      	adds	r0, #43	; 0x2b
    374e:	4346      	muls	r6, r0
    3750:	19ae      	adds	r6, r5, r6
    3752:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
    3754:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
    3756:	8374      	strh	r4, [r6, #26]
	instance->ticks_current = 0;
    3758:	6174      	str	r4, [r6, #20]
	instance->ticks_elapsed_first = 0;
    375a:	72b4      	strb	r4, [r6, #10]
	instance->ticks_elapsed_last = 0;
    375c:	72f4      	strb	r4, [r6, #11]

	return TICKER_STATUS_SUCCESS;
    375e:	0020      	movs	r0, r4
    3760:	e000      	b.n	3764 <ticker_init+0x88>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
    3762:	2001      	movs	r0, #1
	instance->ticks_current = 0;
	instance->ticks_elapsed_first = 0;
	instance->ticks_elapsed_last = 0;

	return TICKER_STATUS_SUCCESS;
}
    3764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3766:	46c0      	nop			; (mov r8, r8)
    3768:	20000564 	.word	0x20000564
    376c:	000036cd 	.word	0x000036cd
    3770:	00002e31 	.word	0x00002e31
    3774:	00002e19 	.word	0x00002e19
    3778:	00002f05 	.word	0x00002f05
    377c:	00002e99 	.word	0x00002e99
    3780:	00002e25 	.word	0x00002e25

00003784 <ticker_trigger>:

void ticker_trigger(u8_t instance_index)
{
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    3784:	232c      	movs	r3, #44	; 0x2c
    3786:	4358      	muls	r0, r3
    3788:	4b05      	ldr	r3, [pc, #20]	; (37a0 <ticker_trigger+0x1c>)

	return TICKER_STATUS_SUCCESS;
}

void ticker_trigger(u8_t instance_index)
{
    378a:	b510      	push	{r4, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    378c:	1818      	adds	r0, r3, r0
    378e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3790:	2b00      	cmp	r3, #0
    3792:	d003      	beq.n	379c <ticker_trigger+0x18>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
    3794:	2201      	movs	r2, #1
    3796:	2000      	movs	r0, #0
    3798:	0011      	movs	r1, r2
    379a:	4798      	blx	r3
						   CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_ISR(0);
}
    379c:	bd10      	pop	{r4, pc}
    379e:	46c0      	nop			; (mov r8, r8)
    37a0:	20000564 	.word	0x20000564

000037a4 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    37a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    37a6:	242c      	movs	r4, #44	; 0x2c
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    37a8:	b085      	sub	sp, #20
    37aa:	9301      	str	r3, [sp, #4]
    37ac:	ab0d      	add	r3, sp, #52	; 0x34
    37ae:	881b      	ldrh	r3, [r3, #0]
	u8_t last;
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    37b0:	4360      	muls	r0, r4
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    37b2:	9302      	str	r3, [sp, #8]
    37b4:	ab0e      	add	r3, sp, #56	; 0x38
    37b6:	881b      	ldrh	r3, [r3, #0]
	u8_t last;
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    37b8:	00cd      	lsls	r5, r1, #3
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    37ba:	9303      	str	r3, [sp, #12]
	u8_t last;
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    37bc:	4b1c      	ldr	r3, [pc, #112]	; (3830 <ticker_start+0x8c>)
    37be:	181b      	adds	r3, r3, r0
    37c0:	6858      	ldr	r0, [r3, #4]
    37c2:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    37c4:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    37c6:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    37c8:	1c77      	adds	r7, r6, #1
    37ca:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    37cc:	4287      	cmp	r7, r0
    37ce:	4180      	sbcs	r0, r0
    37d0:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    37d2:	7868      	ldrb	r0, [r5, #1]
    37d4:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    37d6:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    37d8:	45bc      	cmp	ip, r7
    37da:	d026      	beq.n	382a <ticker_start+0x86>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    37dc:	4374      	muls	r4, r6
    37de:	6868      	ldr	r0, [r5, #4]
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    37e0:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    37e2:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = _ticker_id;
    37e4:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
    37e6:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
    37e8:	2003      	movs	r0, #3
	user_op->id = _ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
    37ea:	6062      	str	r2, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    37ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
    37ee:	7020      	strb	r0, [r4, #0]
	user_op->id = _ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
    37f0:	60a2      	str	r2, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    37f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    37f4:	6226      	str	r6, [r4, #32]
	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = _ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
	user_op->params.start.ticks_periodic = ticks_periodic;
    37f6:	60e2      	str	r2, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    37f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    37fa:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = _ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
	user_op->params.start.ticks_periodic = ticks_periodic;
	user_op->params.start.remainder_periodic = remainder_periodic;
    37fc:	6122      	str	r2, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    37fe:	466a      	mov	r2, sp
    3800:	8992      	ldrh	r2, [r2, #12]
    3802:	82e2      	strh	r2, [r4, #22]
	user_op->params.start.lazy = lazy;
    3804:	466a      	mov	r2, sp
    3806:	8912      	ldrh	r2, [r2, #8]
    3808:	82a2      	strh	r2, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
    380a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    380c:	61a2      	str	r2, [r4, #24]
	user_op->params.start.context = context;
    380e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3810:	61e2      	str	r2, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    3812:	9a11      	ldr	r2, [sp, #68]	; 0x44
    3814:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3816:	9a12      	ldr	r2, [sp, #72]	; 0x48
    3818:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    381a:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    381c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    381e:	6a1b      	ldr	r3, [r3, #32]
    3820:	4798      	blx	r3
    3822:	2200      	movs	r2, #0
    3824:	0031      	movs	r1, r6
    3826:	47a8      	blx	r5

	return user_op->status;
    3828:	6a20      	ldr	r0, [r4, #32]
}
    382a:	b005      	add	sp, #20
    382c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	20000564 	.word	0x20000564

00003834 <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    3834:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    3836:	242c      	movs	r4, #44	; 0x2c

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    3838:	b087      	sub	sp, #28
    383a:	9300      	str	r3, [sp, #0]
    383c:	ab0c      	add	r3, sp, #48	; 0x30
    383e:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    3840:	4360      	muls	r0, r4

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    3842:	9301      	str	r3, [sp, #4]
    3844:	ab0d      	add	r3, sp, #52	; 0x34
    3846:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    3848:	00cd      	lsls	r5, r1, #3

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    384a:	9302      	str	r3, [sp, #8]
    384c:	ab0e      	add	r3, sp, #56	; 0x38
    384e:	881b      	ldrh	r3, [r3, #0]
    3850:	9303      	str	r3, [sp, #12]
    3852:	ab0f      	add	r3, sp, #60	; 0x3c
    3854:	881b      	ldrh	r3, [r3, #0]
    3856:	9304      	str	r3, [sp, #16]
    3858:	ab10      	add	r3, sp, #64	; 0x40
    385a:	781b      	ldrb	r3, [r3, #0]
    385c:	9305      	str	r3, [sp, #20]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    385e:	4b1c      	ldr	r3, [pc, #112]	; (38d0 <ticker_update+0x9c>)
    3860:	181b      	adds	r3, r3, r0
    3862:	6858      	ldr	r0, [r3, #4]
    3864:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    3866:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    3868:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    386a:	1c77      	adds	r7, r6, #1
    386c:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    386e:	4287      	cmp	r7, r0
    3870:	4180      	sbcs	r0, r0
    3872:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    3874:	7868      	ldrb	r0, [r5, #1]
    3876:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    3878:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    387a:	45bc      	cmp	ip, r7
    387c:	d026      	beq.n	38cc <ticker_update+0x98>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    387e:	4374      	muls	r4, r6
    3880:	6868      	ldr	r0, [r5, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    3882:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    3884:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = _ticker_id;
    3886:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    3888:	466a      	mov	r2, sp
    388a:	8812      	ldrh	r2, [r2, #0]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    388c:	2004      	movs	r0, #4
	user_op->id = _ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    388e:	80a2      	strh	r2, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    3890:	466a      	mov	r2, sp
    3892:	8892      	ldrh	r2, [r2, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    3894:	7020      	strb	r0, [r4, #0]
	user_op->id = _ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    3896:	80e2      	strh	r2, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    3898:	466a      	mov	r2, sp
    389a:	8912      	ldrh	r2, [r2, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    389c:	6226      	str	r6, [r4, #32]
	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = _ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    389e:	8122      	strh	r2, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    38a0:	466a      	mov	r2, sp
    38a2:	8992      	ldrh	r2, [r2, #12]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    38a4:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = _ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    38a6:	8162      	strh	r2, [r4, #10]
	user_op->params.update.lazy = lazy;
    38a8:	466a      	mov	r2, sp
    38aa:	8a12      	ldrh	r2, [r2, #16]
    38ac:	81a2      	strh	r2, [r4, #12]
	user_op->params.update.force = force;
    38ae:	466a      	mov	r2, sp
    38b0:	7d12      	ldrb	r2, [r2, #20]
    38b2:	73a2      	strb	r2, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    38b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    38b6:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    38b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    38ba:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    38bc:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    38be:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    38c0:	6a1b      	ldr	r3, [r3, #32]
    38c2:	4798      	blx	r3
    38c4:	2200      	movs	r2, #0
    38c6:	0031      	movs	r1, r6
    38c8:	47a8      	blx	r5

	return user_op->status;
    38ca:	6a20      	ldr	r0, [r4, #32]
}
    38cc:	b007      	add	sp, #28
    38ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38d0:	20000564 	.word	0x20000564

000038d4 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    38d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    38d6:	242c      	movs	r4, #44	; 0x2c
    38d8:	4360      	muls	r0, r4
	return user_op->status;
}

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    38da:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    38dc:	4b13      	ldr	r3, [pc, #76]	; (392c <ticker_stop+0x58>)
    38de:	00cd      	lsls	r5, r1, #3
    38e0:	181b      	adds	r3, r3, r0
    38e2:	6858      	ldr	r0, [r3, #4]
    38e4:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    38e6:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    38e8:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    38ea:	1c77      	adds	r7, r6, #1
    38ec:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    38ee:	4287      	cmp	r7, r0
    38f0:	4180      	sbcs	r0, r0
    38f2:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    38f4:	7868      	ldrb	r0, [r5, #1]
    38f6:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    38f8:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    38fa:	45bc      	cmp	ip, r7
    38fc:	d014      	beq.n	3928 <ticker_stop+0x54>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    38fe:	4374      	muls	r4, r6
    3900:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = _ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    3902:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    3904:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3906:	2005      	movs	r0, #5
	user_op->id = _ticker_id;
    3908:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    390a:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    390c:	7020      	strb	r0, [r4, #0]
	user_op->id = _ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    390e:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3910:	9a08      	ldr	r2, [sp, #32]
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = _ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    3912:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    3914:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    3916:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    3918:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    391a:	0008      	movs	r0, r1
    391c:	6a1b      	ldr	r3, [r3, #32]
    391e:	4798      	blx	r3
    3920:	2200      	movs	r2, #0
    3922:	0031      	movs	r1, r6
    3924:	47a8      	blx	r5

	return user_op->status;
    3926:	6a20      	ldr	r0, [r4, #32]
}
    3928:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    392a:	46c0      	nop			; (mov r8, r8)
    392c:	20000564 	.word	0x20000564

00003930 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *_ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    3930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    3932:	242c      	movs	r4, #44	; 0x2c
    3934:	4360      	muls	r0, r4
}

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *_ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    3936:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    3938:	4b15      	ldr	r3, [pc, #84]	; (3990 <ticker_next_slot_get+0x60>)
    393a:	00cd      	lsls	r5, r1, #3
    393c:	181b      	adds	r3, r3, r0
    393e:	6858      	ldr	r0, [r3, #4]
    3940:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    3942:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    3944:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    3946:	1c77      	adds	r7, r6, #1
    3948:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    394a:	4287      	cmp	r7, r0
    394c:	4180      	sbcs	r0, r0
    394e:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    3950:	7868      	ldrb	r0, [r5, #1]
    3952:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    3954:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    3956:	45bc      	cmp	ip, r7
    3958:	d019      	beq.n	398e <ticker_next_slot_get+0x5e>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    395a:	4374      	muls	r4, r6
    395c:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    395e:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    3960:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    3962:	20ff      	movs	r0, #255	; 0xff
	user_op->params.slot_get.ticker_id = _ticker_id;
    3964:	6062      	str	r2, [r4, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
    3966:	9a01      	ldr	r2, [sp, #4]
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    3968:	7060      	strb	r0, [r4, #1]
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
    396a:	60a2      	str	r2, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    396c:	9a08      	ldr	r2, [sp, #32]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    396e:	7026      	strb	r6, [r4, #0]
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    3970:	60e2      	str	r2, [r4, #12]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    3972:	9a09      	ldr	r2, [sp, #36]	; 0x24
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
    3974:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    3976:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3978:	9a0a      	ldr	r2, [sp, #40]	; 0x28

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    397a:	0008      	movs	r0, r1
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    397c:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    397e:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    3980:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    3982:	6a1b      	ldr	r3, [r3, #32]
    3984:	4798      	blx	r3
    3986:	2200      	movs	r2, #0
    3988:	0031      	movs	r1, r6
    398a:	47a8      	blx	r5

	return user_op->status;
    398c:	6a20      	ldr	r0, [r4, #32]
}
    398e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3990:	20000564 	.word	0x20000564

00003994 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    3994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    3996:	242c      	movs	r4, #44	; 0x2c
    3998:	4360      	muls	r0, r4
	return user_op->status;
}

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    399a:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    399c:	4b12      	ldr	r3, [pc, #72]	; (39e8 <ticker_job_idle_get+0x54>)
    399e:	00cd      	lsls	r5, r1, #3
    39a0:	181b      	adds	r3, r3, r0
    39a2:	6858      	ldr	r0, [r3, #4]
    39a4:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    39a6:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    39a8:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    39aa:	1c77      	adds	r7, r6, #1
    39ac:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    39ae:	4287      	cmp	r7, r0
    39b0:	4180      	sbcs	r0, r0
    39b2:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    39b4:	7868      	ldrb	r0, [r5, #1]
    39b6:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    39b8:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    39ba:	45bc      	cmp	ip, r7
    39bc:	d013      	beq.n	39e6 <ticker_job_idle_get+0x52>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    39be:	4374      	muls	r4, r6
    39c0:	686e      	ldr	r6, [r5, #4]
    39c2:	1934      	adds	r4, r6, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    39c4:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
    39c6:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    39c8:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    39ca:	7020      	strb	r0, [r4, #0]
	user_op->id = TICKER_NULL;
    39cc:	30fe      	adds	r0, #254	; 0xfe
    39ce:	7060      	strb	r0, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    39d0:	62a2      	str	r2, [r4, #40]	; 0x28
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    39d2:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;
    39d4:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    39d6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    39d8:	0008      	movs	r0, r1
    39da:	6a1b      	ldr	r3, [r3, #32]
    39dc:	4798      	blx	r3
    39de:	2200      	movs	r2, #0
    39e0:	0031      	movs	r1, r6
    39e2:	47a8      	blx	r5

	return user_op->status;
    39e4:	6a20      	ldr	r0, [r4, #32]
}
    39e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    39e8:	20000564 	.word	0x20000564

000039ec <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    39ec:	232c      	movs	r3, #44	; 0x2c

	return user_op->status;
}

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
    39ee:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    39f0:	4343      	muls	r3, r0
    39f2:	4805      	ldr	r0, [pc, #20]	; (3a08 <ticker_job_sched+0x1c>)
    39f4:	18c3      	adds	r3, r0, r3
    39f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    39f8:	0008      	movs	r0, r1
    39fa:	6a1b      	ldr	r3, [r3, #32]
    39fc:	4798      	blx	r3
    39fe:	2200      	movs	r2, #0
    3a00:	2102      	movs	r1, #2
    3a02:	47a0      	blx	r4
}
    3a04:	bd10      	pop	{r4, pc}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	20000564 	.word	0x20000564

00003a0c <ticker_ticks_now_get>:

u32_t ticker_ticks_now_get(void)
{
    3a0c:	b510      	push	{r4, lr}
	return cntr_cnt_get();
    3a0e:	f7fe fd63 	bl	24d8 <cntr_cnt_get>
}
    3a12:	bd10      	pop	{r4, pc}

00003a14 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3a14:	1a40      	subs	r0, r0, r1
    3a16:	0200      	lsls	r0, r0, #8
    3a18:	0a00      	lsrs	r0, r0, #8
}
    3a1a:	4770      	bx	lr

00003a1c <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
    3a1c:	b570      	push	{r4, r5, r6, lr}
    3a1e:	0006      	movs	r6, r0
    3a20:	000c      	movs	r4, r1
	while (len) {
    3a22:	2c00      	cmp	r4, #0
    3a24:	d013      	beq.n	3a4e <bt_rand+0x32>
		k_mutex_lock(&mutex_rand, K_FOREVER);
    3a26:	2101      	movs	r1, #1
    3a28:	4d0a      	ldr	r5, [pc, #40]	; (3a54 <bt_rand+0x38>)
    3a2a:	4249      	negs	r1, r1
    3a2c:	0028      	movs	r0, r5
    3a2e:	f005 fa51 	bl	8ed4 <k_mutex_lock>
		len = rand_get(len, buf);
    3a32:	0020      	movs	r0, r4
    3a34:	0031      	movs	r1, r6
    3a36:	f7ff f947 	bl	2cc8 <rand_get>
    3a3a:	0004      	movs	r4, r0
		k_mutex_unlock(&mutex_rand);
    3a3c:	0028      	movs	r0, r5
    3a3e:	f005 faab 	bl	8f98 <k_mutex_unlock>
		if (len) {
    3a42:	2c00      	cmp	r4, #0
    3a44:	d003      	beq.n	3a4e <bt_rand+0x32>
    3a46:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    3a48:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    3a4a:	bf20      	wfe
    3a4c:	e7e9      	b.n	3a22 <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
    3a4e:	2000      	movs	r0, #0
    3a50:	bd70      	pop	{r4, r5, r6, pc}
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	200002a8 	.word	0x200002a8

00003a58 <cpu_sleep>:
    3a58:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    3a5a:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    3a5c:	bf20      	wfe
static inline void cpu_sleep(void)
{
	__WFE();
	__SEV();
	__WFE();
}
    3a5e:	4770      	bx	lr

00003a60 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    3a60:	6008      	str	r0, [r1, #0]
}
    3a62:	4770      	bx	lr

00003a64 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    3a64:	2800      	cmp	r0, #0
    3a66:	d104      	bne.n	3a72 <prepare_reduced+0xe>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
    3a68:	2380      	movs	r3, #128	; 0x80
    3a6a:	680a      	ldr	r2, [r1, #0]
    3a6c:	061b      	lsls	r3, r3, #24
    3a6e:	4313      	orrs	r3, r2
    3a70:	600b      	str	r3, [r1, #0]
	}
}
    3a72:	4770      	bx	lr

00003a74 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    3a74:	2800      	cmp	r0, #0
    3a76:	d103      	bne.n	3a80 <prepare_normal+0xc>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
    3a78:	680b      	ldr	r3, [r1, #0]
    3a7a:	005b      	lsls	r3, r3, #1
    3a7c:	085b      	lsrs	r3, r3, #1
    3a7e:	600b      	str	r3, [r1, #0]
	}
}
    3a80:	4770      	bx	lr

00003a82 <chan_sel_remap>:
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    3a82:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a84:	0002      	movs	r2, r0
    3a86:	1d46      	adds	r6, r0, #5
		u8_t bit_count;

		bite = *chan_map;
		bit_count = 8;
		while (bit_count--) {
			if (bite & 0x01) {
    3a88:	2701      	movs	r7, #1
static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    3a8a:	2000      	movs	r0, #0
	byte_count = 5;
	while (byte_count--) {
    3a8c:	42b2      	cmp	r2, r6
    3a8e:	d011      	beq.n	3ab4 <chan_sel_remap+0x32>
    3a90:	0004      	movs	r4, r0
		u8_t bite;
		u8_t bit_count;

		bite = *chan_map;
    3a92:	7815      	ldrb	r5, [r2, #0]
    3a94:	3408      	adds	r4, #8
    3a96:	b2e4      	uxtb	r4, r4
		bit_count = 8;
		while (bit_count--) {
    3a98:	42a0      	cmp	r0, r4
    3a9a:	d009      	beq.n	3ab0 <chan_sel_remap+0x2e>
			if (bite & 0x01) {
    3a9c:	423d      	tst	r5, r7
    3a9e:	d003      	beq.n	3aa8 <chan_sel_remap+0x26>
				if (chan_index == 0) {
    3aa0:	2900      	cmp	r1, #0
    3aa2:	d007      	beq.n	3ab4 <chan_sel_remap+0x32>
					break;
				}
				chan_index--;
    3aa4:	3901      	subs	r1, #1
    3aa6:	b2c9      	uxtb	r1, r1
			}
			chan_next++;
    3aa8:	1c43      	adds	r3, r0, #1
    3aaa:	b2d8      	uxtb	r0, r3
			bite >>= 1;
    3aac:	086d      	lsrs	r5, r5, #1
    3aae:	e7f3      	b.n	3a98 <chan_sel_remap+0x16>

		if (bit_count < 8) {
			break;
		}

		chan_map++;
    3ab0:	3201      	adds	r2, #1
    3ab2:	e7eb      	b.n	3a8c <chan_sel_remap+0xa>
	}

	return chan_next;
}
    3ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00003ab8 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    3ab8:	b530      	push	{r4, r5, lr}
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    3aba:	23db      	movs	r3, #219	; 0xdb
	    _radio.packet_rx_last) {
    3abc:	24b6      	movs	r4, #182	; 0xb6
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    3abe:	490f      	ldr	r1, [pc, #60]	; (3afc <packet_rx_reserve_get+0x44>)
    3ac0:	005b      	lsls	r3, r3, #1
	    _radio.packet_rx_last) {
    3ac2:	34ff      	adds	r4, #255	; 0xff
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    3ac4:	5ccb      	ldrb	r3, [r1, r3]
	    _radio.packet_rx_last) {
    3ac6:	5d0a      	ldrb	r2, [r1, r4]
			_radio.packet_rx_acquire);
	}
}

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    3ac8:	0005      	movs	r5, r0
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    3aca:	4293      	cmp	r3, r2
    3acc:	d302      	bcc.n	3ad4 <packet_rx_reserve_get+0x1c>
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    3ace:	5d0a      	ldrb	r2, [r1, r4]

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
    3ad0:	1a9b      	subs	r3, r3, r2
    3ad2:	e005      	b.n	3ae0 <packet_rx_reserve_get+0x28>
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    3ad4:	22da      	movs	r2, #218	; 0xda
    3ad6:	0052      	lsls	r2, r2, #1
    3ad8:	5c8a      	ldrb	r2, [r1, r2]
			_radio.packet_rx_last +
    3ada:	5d08      	ldrb	r0, [r1, r4]
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    3adc:	189b      	adds	r3, r3, r2
    3ade:	1a1b      	subs	r3, r3, r0
    3ae0:	b2db      	uxtb	r3, r3
static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
		return 0;
    3ae2:	2000      	movs	r0, #0

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
    3ae4:	429d      	cmp	r5, r3
    3ae6:	d807      	bhi.n	3af8 <packet_rx_reserve_get+0x40>
		return 0;
	}

	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    3ae8:	22d8      	movs	r2, #216	; 0xd8
    3aea:	5d0b      	ldrb	r3, [r1, r4]
    3aec:	0052      	lsls	r2, r2, #1
    3aee:	588a      	ldr	r2, [r1, r2]
    3af0:	009b      	lsls	r3, r3, #2
    3af2:	5898      	ldr	r0, [r3, r2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    3af4:	2301      	movs	r3, #1
    3af6:	7103      	strb	r3, [r0, #4]

	return radio_pdu_node_rx;
}
    3af8:	bd30      	pop	{r4, r5, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	200005f4 	.word	0x200005f4

00003b00 <conn_update_req>:
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
}

static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
    3b00:	0003      	movs	r3, r0
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
}

static u32_t conn_update_req(struct connection *conn)
{
    3b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    3b04:	3358      	adds	r3, #88	; 0x58
    3b06:	781e      	ldrb	r6, [r3, #0]
    3b08:	3301      	adds	r3, #1
    3b0a:	9301      	str	r3, [sp, #4]
    3b0c:	781b      	ldrb	r3, [r3, #0]
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
}

static u32_t conn_update_req(struct connection *conn)
{
    3b0e:	0004      	movs	r4, r0
    3b10:	2001      	movs	r0, #1
	if (conn->llcp_req != conn->llcp_ack) {
    3b12:	42b3      	cmp	r3, r6
    3b14:	d147      	bne.n	3ba6 <conn_update_req+0xa6>
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
    3b16:	0023      	movs	r3, r4
    3b18:	3334      	adds	r3, #52	; 0x34
    3b1a:	781d      	ldrb	r5, [r3, #0]
    3b1c:	4005      	ands	r5, r0
    3b1e:	d014      	beq.n	3b4a <conn_update_req+0x4a>
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    3b20:	3358      	adds	r3, #88	; 0x58
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    3b22:	781b      	ldrb	r3, [r3, #0]
		conn->llcp_ack--;

		return 0;
	}

	return 2;
    3b24:	1800      	adds	r0, r0, r0

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    3b26:	4203      	tst	r3, r0
    3b28:	d03d      	beq.n	3ba6 <conn_update_req+0xa6>
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    3b2a:	0023      	movs	r3, r4
    3b2c:	338d      	adds	r3, #141	; 0x8d
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    3b2e:	781b      	ldrb	r3, [r3, #0]
    3b30:	2b08      	cmp	r3, #8
    3b32:	d938      	bls.n	3ba6 <conn_update_req+0xa6>
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    3b34:	0023      	movs	r3, r4
    3b36:	338e      	adds	r3, #142	; 0x8e
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    3b38:	881b      	ldrh	r3, [r3, #0]
    3b3a:	4a1b      	ldr	r2, [pc, #108]	; (3ba8 <conn_update_req+0xa8>)
    3b3c:	4293      	cmp	r3, r2
    3b3e:	d132      	bne.n	3ba6 <conn_update_req+0xa6>
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
    3b40:	0022      	movs	r2, r4
    3b42:	3290      	adds	r2, #144	; 0x90

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    3b44:	8812      	ldrh	r2, [r2, #0]
    3b46:	429a      	cmp	r2, r3
    3b48:	d12d      	bne.n	3ba6 <conn_update_req+0xa6>
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
    3b4a:	0023      	movs	r3, r4
    3b4c:	2701      	movs	r7, #1
    3b4e:	3384      	adds	r3, #132	; 0x84
    3b50:	701f      	strb	r7, [r3, #0]
		conn->llcp.connection_update.win_offset_us = 0;
    3b52:	2300      	movs	r3, #0
    3b54:	67e3      	str	r3, [r4, #124]	; 0x7c
		conn->llcp.connection_update.interval = conn->conn_interval;
    3b56:	0023      	movs	r3, r4
    3b58:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    3b5a:	335c      	adds	r3, #92	; 0x5c
    3b5c:	8018      	strh	r0, [r3, #0]
		conn->llcp.connection_update.latency = conn->latency;
    3b5e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		conn->llcp.connection_update.timeout = conn->conn_interval *
    3b60:	21fa      	movs	r1, #250	; 0xfa
	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
    3b62:	805a      	strh	r2, [r3, #2]
		conn->llcp.connection_update.timeout = conn->conn_interval *
    3b64:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    3b66:	0089      	lsls	r1, r1, #2
    3b68:	4358      	muls	r0, r3
    3b6a:	237d      	movs	r3, #125	; 0x7d
    3b6c:	4358      	muls	r0, r3
    3b6e:	f7fc fba1 	bl	2b4 <__aeabi_idiv>
    3b72:	0023      	movs	r3, r4
    3b74:	3360      	adds	r3, #96	; 0x60
    3b76:	8018      	strh	r0, [r3, #0]
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    3b78:	426b      	negs	r3, r5
    3b7a:	415d      	adcs	r5, r3
    3b7c:	2302      	movs	r3, #2
    3b7e:	0022      	movs	r2, r4
    3b80:	1b5d      	subs	r5, r3, r5
    3b82:	2107      	movs	r1, #7
    3b84:	002b      	movs	r3, r5
    3b86:	3285      	adds	r2, #133	; 0x85
    3b88:	7815      	ldrb	r5, [r2, #0]
    3b8a:	400b      	ands	r3, r1
    3b8c:	438d      	bics	r5, r1
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    3b8e:	431d      	orrs	r5, r3
    3b90:	2318      	movs	r3, #24

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
		conn->llcp_ack--;

		return 0;
    3b92:	2000      	movs	r0, #0
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    3b94:	439d      	bics	r5, r3
    3b96:	3b10      	subs	r3, #16
    3b98:	431d      	orrs	r5, r3

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
		conn->llcp_ack--;
    3b9a:	9b01      	ldr	r3, [sp, #4]
		conn->llcp.connection_update.state =
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
    3b9c:	345a      	adds	r4, #90	; 0x5a
		conn->llcp_ack--;
    3b9e:	3e01      	subs	r6, #1
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    3ba0:	7015      	strb	r5, [r2, #0]

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
    3ba2:	7027      	strb	r7, [r4, #0]
		conn->llcp_ack--;
    3ba4:	701e      	strb	r6, [r3, #0]

		return 0;
	}

	return 2;
}
    3ba6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ba8:	0000ffff 	.word	0x0000ffff

00003bac <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    3bac:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    3bae:	780c      	ldrb	r4, [r1, #0]
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    3bb0:	b085      	sub	sp, #20
    3bb2:	0006      	movs	r6, r0
    3bb4:	9101      	str	r1, [sp, #4]
    3bb6:	9202      	str	r2, [sp, #8]
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
		return 0;
    3bb8:	2000      	movs	r0, #0
{
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
    3bba:	4294      	cmp	r4, r2
    3bbc:	d041      	beq.n	3c42 <tx_cmplt_get+0x96>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    3bbe:	23f2      	movs	r3, #242	; 0xf2
	_first = *first;
	if (_first == last) {
		return 0;
	}

	cmplt = 0;
    3bc0:	0005      	movs	r5, r0
	*handle = _radio.pkt_release[_first].handle;
    3bc2:	4a21      	ldr	r2, [pc, #132]	; (3c48 <tx_cmplt_get+0x9c>)
    3bc4:	005b      	lsls	r3, r3, #1
    3bc6:	58d2      	ldr	r2, [r2, r3]
    3bc8:	00e1      	lsls	r1, r4, #3
    3bca:	5a8a      	ldrh	r2, [r1, r2]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    3bcc:	9303      	str	r3, [sp, #12]
	if (_first == last) {
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    3bce:	8032      	strh	r2, [r6, #0]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    3bd0:	9903      	ldr	r1, [sp, #12]
    3bd2:	4b1d      	ldr	r3, [pc, #116]	; (3c48 <tx_cmplt_get+0x9c>)
    3bd4:	00e2      	lsls	r2, r4, #3
    3bd6:	585b      	ldr	r3, [r3, r1]
    3bd8:	8831      	ldrh	r1, [r6, #0]
    3bda:	189b      	adds	r3, r3, r2
    3bdc:	881a      	ldrh	r2, [r3, #0]
    3bde:	4291      	cmp	r1, r2
    3be0:	d12c      	bne.n	3c3c <tx_cmplt_get+0x90>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    3be2:	6858      	ldr	r0, [r3, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
    3be4:	2801      	cmp	r0, #1
    3be6:	d90d      	bls.n	3c04 <tx_cmplt_get+0x58>
    3be8:	2203      	movs	r2, #3
    3bea:	0001      	movs	r1, r0
    3bec:	4391      	bics	r1, r2
    3bee:	d00e      	beq.n	3c0e <tx_cmplt_get+0x62>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    3bf0:	1d01      	adds	r1, r0, #4
    3bf2:	d00c      	beq.n	3c0e <tx_cmplt_get+0x62>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    3bf4:	7941      	ldrb	r1, [r0, #5]
    3bf6:	2900      	cmp	r1, #0
    3bf8:	d009      	beq.n	3c0e <tx_cmplt_get+0x62>
    3bfa:	7901      	ldrb	r1, [r0, #4]
    3bfc:	400a      	ands	r2, r1
    3bfe:	3a01      	subs	r2, #1
    3c00:	2a01      	cmp	r2, #1
    3c02:	d804      	bhi.n	3c0e <tx_cmplt_get+0x62>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
    3c04:	2201      	movs	r2, #1
    3c06:	605a      	str	r2, [r3, #4]
				(struct radio_pdu_node_tx *)1;

			cmplt++;
    3c08:	18ab      	adds	r3, r5, r2
    3c0a:	b2dd      	uxtb	r5, r3
    3c0c:	e001      	b.n	3c12 <tx_cmplt_get+0x66>
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx =
    3c0e:	2202      	movs	r2, #2
    3c10:	605a      	str	r2, [r3, #4]
				(struct radio_pdu_node_tx *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    3c12:	2303      	movs	r3, #3
    3c14:	0002      	movs	r2, r0
    3c16:	4f0c      	ldr	r7, [pc, #48]	; (3c48 <tx_cmplt_get+0x9c>)
    3c18:	439a      	bics	r2, r3
    3c1a:	d004      	beq.n	3c26 <tx_cmplt_get+0x7a>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    3c1c:	0039      	movs	r1, r7
    3c1e:	31d9      	adds	r1, #217	; 0xd9
    3c20:	31ff      	adds	r1, #255	; 0xff
    3c22:	f7fe fbbc 	bl	239e <mem_release>
		}

		_first = _first + 1;
		if (_first == _radio.packet_tx_count) {
    3c26:	23f4      	movs	r3, #244	; 0xf4
    3c28:	005b      	lsls	r3, r3, #1

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    3c2a:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    3c2c:	5cfb      	ldrb	r3, [r7, r3]

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    3c2e:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
    3c30:	42a3      	cmp	r3, r4
    3c32:	d100      	bne.n	3c36 <tx_cmplt_get+0x8a>
			_first = 0;
    3c34:	2400      	movs	r4, #0
		}

	} while (_first != last);
    3c36:	9b02      	ldr	r3, [sp, #8]
    3c38:	429c      	cmp	r4, r3
    3c3a:	d1c9      	bne.n	3bd0 <tx_cmplt_get+0x24>

	*first = _first;

	return cmplt;
    3c3c:	0028      	movs	r0, r5
			_first = 0;
		}

	} while (_first != last);

	*first = _first;
    3c3e:	9b01      	ldr	r3, [sp, #4]
    3c40:	701c      	strb	r4, [r3, #0]

	return cmplt;
}
    3c42:	b005      	add	sp, #20
    3c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c46:	46c0      	nop			; (mov r8, r8)
    3c48:	200005f4 	.word	0x200005f4

00003c4c <connection_get>:

static struct connection *connection_get(u16_t handle)
{
	struct connection *conn;

	if (handle < _radio.connection_count) {
    3c4c:	22c6      	movs	r2, #198	; 0xc6

	return 0;
}

static struct connection *connection_get(u16_t handle)
{
    3c4e:	b510      	push	{r4, lr}
	struct connection *conn;

	if (handle < _radio.connection_count) {
    3c50:	4b09      	ldr	r3, [pc, #36]	; (3c78 <connection_get+0x2c>)
    3c52:	0052      	lsls	r2, r2, #1
    3c54:	5c9a      	ldrb	r2, [r3, r2]

	return 0;
}

static struct connection *connection_get(u16_t handle)
{
    3c56:	0004      	movs	r4, r0
	struct connection *conn;

	if (handle < _radio.connection_count) {
    3c58:	4282      	cmp	r2, r0
    3c5a:	d90b      	bls.n	3c74 <connection_get+0x28>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    3c5c:	0002      	movs	r2, r0
    3c5e:	20c2      	movs	r0, #194	; 0xc2
    3c60:	0040      	lsls	r0, r0, #1
    3c62:	21fc      	movs	r1, #252	; 0xfc
    3c64:	5818      	ldr	r0, [r3, r0]
    3c66:	f7fe fbb0 	bl	23ca <mem_get>
		if ((conn) && (conn->handle == handle)) {
    3c6a:	2800      	cmp	r0, #0
    3c6c:	d002      	beq.n	3c74 <connection_get+0x28>
    3c6e:	8c03      	ldrh	r3, [r0, #32]
    3c70:	42a3      	cmp	r3, r4
    3c72:	d000      	beq.n	3c76 <connection_get+0x2a>
			return conn;
		}
	}

	return 0;
    3c74:	2000      	movs	r0, #0
}
    3c76:	bd10      	pop	{r4, pc}
    3c78:	200005f4 	.word	0x200005f4

00003c7c <role_disable>:
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3c7c:	2302      	movs	r3, #2
		LL_ASSERT(0);
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
    3c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c80:	b089      	sub	sp, #36	; 0x24
    3c82:	0004      	movs	r4, r0
    3c84:	9103      	str	r1, [sp, #12]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3c86:	9304      	str	r3, [sp, #16]
	u32_t ret;

	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
    3c88:	2805      	cmp	r0, #5
    3c8a:	d006      	beq.n	3c9a <role_disable+0x1e>
    3c8c:	2806      	cmp	r0, #6
    3c8e:	d123      	bne.n	3cd8 <role_disable+0x5c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
			  (ret_cb == TICKER_STATUS_FAILURE));
		break;

	case RADIO_TICKER_ID_SCAN:
		ticks_xtal_to_start =
    3c90:	4b71      	ldr	r3, [pc, #452]	; (3e58 <role_disable+0x1dc>)
    3c92:	33fc      	adds	r3, #252	; 0xfc
    3c94:	6d1f      	ldr	r7, [r3, #80]	; 0x50
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    3c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    3c98:	e02a      	b.n	3cf0 <role_disable+0x74>
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    3c9a:	4b6f      	ldr	r3, [pc, #444]	; (3e58 <role_disable+0x1dc>)
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3c9c:	2103      	movs	r1, #3
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    3c9e:	001a      	movs	r2, r3
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    3ca0:	3398      	adds	r3, #152	; 0x98
    3ca2:	681b      	ldr	r3, [r3, #0]
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    3ca4:	3294      	adds	r2, #148	; 0x94
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    3ca6:	9302      	str	r3, [sp, #8]
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3ca8:	ab04      	add	r3, sp, #16
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    3caa:	6817      	ldr	r7, [r2, #0]
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3cac:	2000      	movs	r0, #0
    3cae:	9300      	str	r3, [sp, #0]
    3cb0:	9a03      	ldr	r2, [sp, #12]
    3cb2:	4b6a      	ldr	r3, [pc, #424]	; (3e5c <role_disable+0x1e0>)
    3cb4:	f7ff fe0e 	bl	38d4 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
    3cb8:	2802      	cmp	r0, #2
    3cba:	d003      	beq.n	3cc4 <role_disable+0x48>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    3cbc:	9b04      	ldr	r3, [sp, #16]
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d106      	bne.n	3cd0 <role_disable+0x54>
    3cc2:	e016      	b.n	3cf2 <role_disable+0x76>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
			/* wait for ticker to be stopped */
			while (ret_cb == TICKER_STATUS_BUSY) {
    3cc4:	9b04      	ldr	r3, [sp, #16]
    3cc6:	2b02      	cmp	r3, #2
    3cc8:	d1f8      	bne.n	3cbc <role_disable+0x40>
				cpu_sleep();
    3cca:	f7ff fec5 	bl	3a58 <cpu_sleep>
    3cce:	e7f9      	b.n	3cc4 <role_disable+0x48>
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    3cd0:	9b04      	ldr	r3, [sp, #16]
    3cd2:	2b01      	cmp	r3, #1
    3cd4:	d00d      	beq.n	3cf2 <role_disable+0x76>
    3cd6:	e0b0      	b.n	3e3a <role_disable+0x1be>
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
			_radio.scanner.hdr.ticks_active_to_start;
		break;
	default:
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    3cd8:	2806      	cmp	r0, #6
    3cda:	d800      	bhi.n	3cde <role_disable+0x62>
    3cdc:	e0ad      	b.n	3e3a <role_disable+0x1be>
			struct connection *conn;
			u16_t conn_handle;

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
    3cde:	3807      	subs	r0, #7
    3ce0:	b280      	uxth	r0, r0
    3ce2:	f7ff ffb3 	bl	3c4c <connection_get>
			if (!conn) {
    3ce6:	2800      	cmp	r0, #0
    3ce8:	d100      	bne.n	3cec <role_disable+0x70>
    3cea:	e0b2      	b.n	3e52 <role_disable+0x1d6>
				return 1;
			}

			ticks_xtal_to_start =
    3cec:	6807      	ldr	r7, [r0, #0]
				conn->hdr.ticks_xtal_to_start;
			ticks_active_to_start =
    3cee:	6843      	ldr	r3, [r0, #4]
    3cf0:	9302      	str	r3, [sp, #8]
			LL_ASSERT(0);
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
    3cf2:	4d59      	ldr	r5, [pc, #356]	; (3e58 <role_disable+0x1dc>)
    3cf4:	7ba8      	ldrb	r0, [r5, #14]
    3cf6:	b2c0      	uxtb	r0, r0
    3cf8:	2800      	cmp	r0, #0
    3cfa:	d000      	beq.n	3cfe <role_disable+0x82>
    3cfc:	e09d      	b.n	3e3a <role_disable+0x1be>
	_radio.ticker_id_stop = ticker_id_primary;

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3cfe:	4e57      	ldr	r6, [pc, #348]	; (3e5c <role_disable+0x1e0>)
    3d00:	ab04      	add	r3, sp, #16
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
	_radio.ticker_id_stop = ticker_id_primary;
    3d02:	73ac      	strb	r4, [r5, #14]

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3d04:	0022      	movs	r2, r4
    3d06:	9300      	str	r3, [sp, #0]
    3d08:	2103      	movs	r1, #3
    3d0a:	0033      	movs	r3, r6
    3d0c:	f7ff fde2 	bl	38d4 <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    3d10:	2802      	cmp	r0, #2
    3d12:	d005      	beq.n	3d20 <role_disable+0xa4>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb != TICKER_STATUS_SUCCESS) {
    3d14:	9b04      	ldr	r3, [sp, #16]
    3d16:	4d50      	ldr	r5, [pc, #320]	; (3e58 <role_disable+0x1dc>)
    3d18:	2b00      	cmp	r3, #0
    3d1a:	d000      	beq.n	3d1e <role_disable+0xa2>
    3d1c:	e095      	b.n	3e4a <role_disable+0x1ce>
    3d1e:	e00d      	b.n	3d3c <role_disable+0xc0>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
		/* if inside our event, enable Job. */
		if (_radio.ticker_id_event == ticker_id_primary) {
    3d20:	7b6b      	ldrb	r3, [r5, #13]
    3d22:	429c      	cmp	r4, r3
    3d24:	d104      	bne.n	3d30 <role_disable+0xb4>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    3d26:	2201      	movs	r2, #1
    3d28:	2003      	movs	r0, #3
    3d2a:	0011      	movs	r1, r2
    3d2c:	f7fe f9f6 	bl	211c <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);
		}

		/* wait for ticker to be stopped */
		while (ret_cb == TICKER_STATUS_BUSY) {
    3d30:	9b04      	ldr	r3, [sp, #16]
    3d32:	2b02      	cmp	r3, #2
    3d34:	d1ee      	bne.n	3d14 <role_disable+0x98>
			cpu_sleep();
    3d36:	f7ff fe8f 	bl	3a58 <cpu_sleep>
    3d3a:	e7f9      	b.n	3d30 <role_disable+0xb4>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
		goto role_disable_cleanup;
	}

	/* Inside our event, gracefully handle XTAL and Radio actives */
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    3d3c:	7b2b      	ldrb	r3, [r5, #12]
    3d3e:	429c      	cmp	r4, r3
    3d40:	d003      	beq.n	3d4a <role_disable+0xce>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    3d42:	7b6b      	ldrb	r3, [r5, #13]
    3d44:	429c      	cmp	r4, r3
    3d46:	d000      	beq.n	3d4a <role_disable+0xce>
    3d48:	e07a      	b.n	3e40 <role_disable+0x1c4>
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3d4a:	2302      	movs	r3, #2
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3d4c:	2200      	movs	r2, #0
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3d4e:	9305      	str	r3, [sp, #20]
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3d50:	ab05      	add	r3, sp, #20
    3d52:	9300      	str	r3, [sp, #0]
    3d54:	2103      	movs	r1, #3
    3d56:	0033      	movs	r3, r6
    3d58:	0010      	movs	r0, r2
    3d5a:	f7ff fdbb 	bl	38d4 <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, RADIO_TICKER_ID_EVENT,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    3d5e:	2802      	cmp	r0, #2
    3d60:	d107      	bne.n	3d72 <role_disable+0xf6>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    3d62:	2201      	movs	r2, #1
    3d64:	0011      	movs	r1, r2
    3d66:	1880      	adds	r0, r0, r2
    3d68:	f7fe f9d8 	bl	211c <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 1);

		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    3d6c:	9b05      	ldr	r3, [sp, #20]
    3d6e:	2b02      	cmp	r3, #2
    3d70:	d063      	beq.n	3e3a <role_disable+0x1be>
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
    3d72:	9805      	ldr	r0, [sp, #20]
    3d74:	2302      	movs	r3, #2
    3d76:	2800      	cmp	r0, #0
    3d78:	d130      	bne.n	3ddc <role_disable+0x160>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop = {0, 0, s_link, NULL,
			mayfly_xtal_stop};
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3d7a:	9306      	str	r3, [sp, #24]
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
    3d7c:	7b2b      	ldrb	r3, [r5, #12]
    3d7e:	2b00      	cmp	r3, #0
    3d80:	d05b      	beq.n	3e3a <role_disable+0x1be>
		_radio.ticker_id_prepare = 0;

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3d82:	ab06      	add	r3, sp, #24
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
		_radio.ticker_id_prepare = 0;
    3d84:	7328      	strb	r0, [r5, #12]

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3d86:	2201      	movs	r2, #1
    3d88:	9300      	str	r3, [sp, #0]
    3d8a:	2103      	movs	r1, #3
    3d8c:	0033      	movs	r3, r6
    3d8e:	f7ff fda1 	bl	38d4 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP,
				  RADIO_TICKER_ID_MARKER_0,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    3d92:	2802      	cmp	r0, #2
    3d94:	d107      	bne.n	3da6 <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    3d96:	2201      	movs	r2, #1
    3d98:	0011      	movs	r1, r2
    3d9a:	1880      	adds	r0, r0, r2
    3d9c:	f7fe f9be 	bl	211c <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    3da0:	9b06      	ldr	r3, [sp, #24]
    3da2:	2b02      	cmp	r3, #2
    3da4:	d049      	beq.n	3e3a <role_disable+0x1be>
		}

		if (ret_cb == TICKER_STATUS_SUCCESS) {
    3da6:	9906      	ldr	r1, [sp, #24]
    3da8:	2900      	cmp	r1, #0
    3daa:	d104      	bne.n	3db6 <role_disable+0x13a>
			/* Step 2.1.1: Check and deassert Radio Active or XTAL
			 * start
			 */
			if (ticks_active_to_start > ticks_xtal_to_start) {
    3dac:	9b02      	ldr	r3, [sp, #8]
    3dae:	42bb      	cmp	r3, r7
    3db0:	d90c      	bls.n	3dcc <role_disable+0x150>
				u32_t retval;

				/* radio active asserted, handle deasserting
				 * here
				 */
				retval = mayfly_enqueue(
    3db2:	4b2b      	ldr	r3, [pc, #172]	; (3e60 <role_disable+0x1e4>)
    3db4:	e00b      	b.n	3dce <role_disable+0x152>
						RADIO_TICKER_USER_ID_APP,
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
				LL_ASSERT(!retval);
			}
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
    3db6:	9b06      	ldr	r3, [sp, #24]
    3db8:	2b01      	cmp	r3, #1
    3dba:	d13e      	bne.n	3e3a <role_disable+0x1be>
			u32_t retval;

			/* Step 2.1.2: Deassert Radio Active and XTAL start */

			/* radio active asserted, handle deasserting here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    3dbc:	2200      	movs	r2, #0
    3dbe:	4b28      	ldr	r3, [pc, #160]	; (3e60 <role_disable+0x1e4>)
    3dc0:	0011      	movs	r1, r2
    3dc2:	2003      	movs	r0, #3
    3dc4:	f7fe f9ca 	bl	215c <mayfly_enqueue>
    3dc8:	1e01      	subs	r1, r0, #0
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_inactive);
			LL_ASSERT(!retval);
    3dca:	d136      	bne.n	3e3a <role_disable+0x1be>

			/* XTAL started, handle XTAL stop here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    3dcc:	4b25      	ldr	r3, [pc, #148]	; (3e64 <role_disable+0x1e8>)
    3dce:	000a      	movs	r2, r1
    3dd0:	2003      	movs	r0, #3
    3dd2:	f7fe f9c3 	bl	215c <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
			LL_ASSERT(!retval);
    3dd6:	2800      	cmp	r0, #0
    3dd8:	d032      	beq.n	3e40 <role_disable+0x1c4>
    3dda:	e02e      	b.n	3e3a <role_disable+0x1be>
		} else {
			LL_ASSERT(0);
		}
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
    3ddc:	9c05      	ldr	r4, [sp, #20]
    3dde:	2c01      	cmp	r4, #1
    3de0:	d12b      	bne.n	3e3a <role_disable+0x1be>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3de2:	9307      	str	r3, [sp, #28]
		 * (role dependent)
		 */
		/* Stop ticker "may" be in use for direct adv or scanner,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    3de4:	ab07      	add	r3, sp, #28
    3de6:	9300      	str	r3, [sp, #0]
    3de8:	9a03      	ldr	r2, [sp, #12]
    3dea:	0033      	movs	r3, r6
    3dec:	2103      	movs	r1, #3
    3dee:	2000      	movs	r0, #0
    3df0:	f7ff fd70 	bl	38d4 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    3df4:	2802      	cmp	r0, #2
    3df6:	d107      	bne.n	3e08 <role_disable+0x18c>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    3df8:	0022      	movs	r2, r4
    3dfa:	0021      	movs	r1, r4
    3dfc:	3001      	adds	r0, #1
    3dfe:	f7fe f98d 	bl	211c <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    3e02:	9b07      	ldr	r3, [sp, #28]
    3e04:	2b02      	cmp	r3, #2
    3e06:	d018      	beq.n	3e3a <role_disable+0x1be>
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    3e08:	9b07      	ldr	r3, [sp, #28]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d002      	beq.n	3e14 <role_disable+0x198>
    3e0e:	9b07      	ldr	r3, [sp, #28]
    3e10:	2b01      	cmp	r3, #1
    3e12:	d112      	bne.n	3e3a <role_disable+0x1be>
			  (ret_cb == TICKER_STATUS_FAILURE));

		if (_radio.role != ROLE_NONE) {
    3e14:	7beb      	ldrb	r3, [r5, #15]
    3e16:	2b00      	cmp	r3, #0
    3e18:	d012      	beq.n	3e40 <role_disable+0x1c4>
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    3e1a:	2204      	movs	r2, #4
    3e1c:	4b12      	ldr	r3, [pc, #72]	; (3e68 <role_disable+0x1ec>)

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    3e1e:	2003      	movs	r0, #3
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    3e20:	609a      	str	r2, [r3, #8]

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    3e22:	2200      	movs	r2, #0
    3e24:	0011      	movs	r1, r2
    3e26:	f7fe f999 	bl	215c <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_stop);
			LL_ASSERT(!retval);
    3e2a:	2800      	cmp	r0, #0
    3e2c:	d105      	bne.n	3e3a <role_disable+0x1be>

			/* wait for radio ISR to exit */
			while (_radio.role != ROLE_NONE) {
    3e2e:	7beb      	ldrb	r3, [r5, #15]
    3e30:	2b00      	cmp	r3, #0
    3e32:	d005      	beq.n	3e40 <role_disable+0x1c4>
				cpu_sleep();
    3e34:	f7ff fe10 	bl	3a58 <cpu_sleep>
    3e38:	e7f9      	b.n	3e2e <role_disable+0x1b2>
			}
		}
	} else {
		LL_ASSERT(0);
    3e3a:	b662      	cpsie	i
    3e3c:	2004      	movs	r0, #4
    3e3e:	df02      	svc	2

		role_active_disable(ticker_id_stop,
				    ticks_xtal_to_start, ticks_active_to_start);
	}

	if (!_radio.ticker_id_stop) {
    3e40:	7bab      	ldrb	r3, [r5, #14]
    3e42:	2b00      	cmp	r3, #0
    3e44:	d101      	bne.n	3e4a <role_disable+0x1ce>
		ret_cb = TICKER_STATUS_FAILURE;
    3e46:	3301      	adds	r3, #1
    3e48:	9304      	str	r3, [sp, #16]
	}

role_disable_cleanup:
	_radio.ticker_id_stop = 0;
    3e4a:	2300      	movs	r3, #0
    3e4c:	73ab      	strb	r3, [r5, #14]

	return ret_cb;
    3e4e:	9804      	ldr	r0, [sp, #16]
    3e50:	e000      	b.n	3e54 <role_disable+0x1d8>

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
			if (!conn) {
				return 1;
    3e52:	2001      	movs	r0, #1

role_disable_cleanup:
	_radio.ticker_id_stop = 0;

	return ret_cb;
}
    3e54:	b009      	add	sp, #36	; 0x24
    3e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e58:	200005f4 	.word	0x200005f4
    3e5c:	00003a61 	.word	0x00003a61
    3e60:	20000228 	.word	0x20000228
    3e64:	200001b8 	.word	0x200001b8
    3e68:	200001c8 	.word	0x200001c8

00003e6c <prepare_pdu_data_tx>:
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    3e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    3e6e:	0006      	movs	r6, r0
    3e70:	0004      	movs	r4, r0
    3e72:	36a4      	adds	r6, #164	; 0xa4
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    3e74:	000d      	movs	r5, r1
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    3e76:	7831      	ldrb	r1, [r6, #0]
    3e78:	34e8      	adds	r4, #232	; 0xe8
    3e7a:	09cb      	lsrs	r3, r1, #7
    3e7c:	d133      	bne.n	3ee6 <prepare_pdu_data_tx+0x7a>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    3e7e:	6822      	ldr	r2, [r4, #0]

	if ((conn->empty != 0) || /* empty packet */
    3e80:	2a00      	cmp	r2, #0
    3e82:	d030      	beq.n	3ee6 <prepare_pdu_data_tx+0x7a>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    3e84:	1d13      	adds	r3, r2, #4
    3e86:	9301      	str	r3, [sp, #4]

	if ((conn->empty != 0) || /* empty packet */
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
    3e88:	070b      	lsls	r3, r1, #28
    3e8a:	d543      	bpl.n	3f14 <prepare_pdu_data_tx+0xa8>
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
    3e8c:	7957      	ldrb	r7, [r2, #5]
    3e8e:	2f00      	cmp	r7, #0
    3e90:	d040      	beq.n	3f14 <prepare_pdu_data_tx+0xa8>
	    (_pdu_data_tx->len != 0) &&
    3e92:	7917      	ldrb	r7, [r2, #4]
    3e94:	43ff      	mvns	r7, r7
    3e96:	07bb      	lsls	r3, r7, #30
    3e98:	d125      	bne.n	3ee6 <prepare_pdu_data_tx+0x7a>
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
	     ((conn->role.master.role == 0) &&
    3e9a:	0007      	movs	r7, r0
    3e9c:	3734      	adds	r7, #52	; 0x34
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
	    (_pdu_data_tx->len != 0) &&
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    3e9e:	783f      	ldrb	r7, [r7, #0]
    3ea0:	79d2      	ldrb	r2, [r2, #7]
    3ea2:	46bc      	mov	ip, r7
    3ea4:	4663      	mov	r3, ip
    3ea6:	2740      	movs	r7, #64	; 0x40
    3ea8:	07db      	lsls	r3, r3, #31
    3eaa:	d40c      	bmi.n	3ec6 <prepare_pdu_data_tx+0x5a>
	     ((conn->role.master.role == 0) &&
    3eac:	4239      	tst	r1, r7
    3eae:	d102      	bne.n	3eb6 <prepare_pdu_data_tx+0x4a>
	      (((conn->refresh == 0) &&
    3eb0:	2a02      	cmp	r2, #2
    3eb2:	d105      	bne.n	3ec0 <prepare_pdu_data_tx+0x54>
    3eb4:	e02e      	b.n	3f14 <prepare_pdu_data_tx+0xa8>
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    3eb6:	1e91      	subs	r1, r2, #2
    3eb8:	2901      	cmp	r1, #1
    3eba:	d92b      	bls.n	3f14 <prepare_pdu_data_tx+0xa8>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    3ebc:	2a0b      	cmp	r2, #11
    3ebe:	d029      	beq.n	3f14 <prepare_pdu_data_tx+0xa8>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    3ec0:	2a06      	cmp	r2, #6
    3ec2:	d10c      	bne.n	3ede <prepare_pdu_data_tx+0x72>
    3ec4:	e026      	b.n	3f14 <prepare_pdu_data_tx+0xa8>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
	     ((conn->role.slave.role != 0) &&
    3ec6:	4239      	tst	r1, r7
    3ec8:	d102      	bne.n	3ed0 <prepare_pdu_data_tx+0x64>
	      (((conn->refresh == 0) &&
    3eca:	2a02      	cmp	r2, #2
    3ecc:	d104      	bne.n	3ed8 <prepare_pdu_data_tx+0x6c>
    3ece:	e021      	b.n	3f14 <prepare_pdu_data_tx+0xa8>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    3ed0:	27fd      	movs	r7, #253	; 0xfd
    3ed2:	1e91      	subs	r1, r2, #2
    3ed4:	4239      	tst	r1, r7
    3ed6:	d01d      	beq.n	3f14 <prepare_pdu_data_tx+0xa8>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    3ed8:	1f51      	subs	r1, r2, #5
    3eda:	2901      	cmp	r1, #1
    3edc:	d91a      	bls.n	3f14 <prepare_pdu_data_tx+0xa8>
    3ede:	21fb      	movs	r1, #251	; 0xfb
    3ee0:	3a0d      	subs	r2, #13
    3ee2:	420a      	tst	r2, r1
    3ee4:	d016      	beq.n	3f14 <prepare_pdu_data_tx+0xa8>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    3ee6:	2280      	movs	r2, #128	; 0x80
    3ee8:	7833      	ldrb	r3, [r6, #0]
    3eea:	4252      	negs	r2, r2
    3eec:	4313      	orrs	r3, r2
    3eee:	7033      	strb	r3, [r6, #0]

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    3ef0:	f7fe fc4c 	bl	278c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    3ef4:	2103      	movs	r1, #3
    3ef6:	7802      	ldrb	r2, [r0, #0]
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    3ef8:	0003      	movs	r3, r0
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    3efa:	438a      	bics	r2, r1
    3efc:	3902      	subs	r1, #2
    3efe:	430a      	orrs	r2, r1
    3f00:	7002      	strb	r2, [r0, #0]
	pdu_data_tx->len = 0;
    3f02:	2200      	movs	r2, #0
    3f04:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    3f06:	6820      	ldr	r0, [r4, #0]
    3f08:	781a      	ldrb	r2, [r3, #0]
    3f0a:	310f      	adds	r1, #15
    3f0c:	2800      	cmp	r0, #0
    3f0e:	d12a      	bne.n	3f66 <prepare_pdu_data_tx+0xfa>
		pdu_data_tx->md = 1;
	} else {
		pdu_data_tx->md = 0;
    3f10:	438a      	bics	r2, r1
    3f12:	e029      	b.n	3f68 <prepare_pdu_data_tx+0xfc>
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);
    3f14:	0001      	movs	r1, r0

		if (!conn->packet_tx_head_len) {
    3f16:	30f8      	adds	r0, #248	; 0xf8
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);
    3f18:	31f9      	adds	r1, #249	; 0xf9
    3f1a:	780a      	ldrb	r2, [r1, #0]
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    3f1c:	9b01      	ldr	r3, [sp, #4]
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    3f1e:	7806      	ldrb	r6, [r0, #0]
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    3f20:	189b      	adds	r3, r3, r2
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    3f22:	2e00      	cmp	r6, #0
    3f24:	d101      	bne.n	3f2a <prepare_pdu_data_tx+0xbe>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    3f26:	785e      	ldrb	r6, [r3, #1]
    3f28:	7006      	strb	r6, [r0, #0]
		}

		if (conn->packet_tx_head_offset) {
    3f2a:	2a00      	cmp	r2, #0
    3f2c:	d005      	beq.n	3f3a <prepare_pdu_data_tx+0xce>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    3f2e:	2603      	movs	r6, #3
    3f30:	781a      	ldrb	r2, [r3, #0]
    3f32:	43b2      	bics	r2, r6
    3f34:	3e02      	subs	r6, #2
    3f36:	4332      	orrs	r2, r6
    3f38:	701a      	strb	r2, [r3, #0]
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    3f3a:	7802      	ldrb	r2, [r0, #0]
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    3f3c:	2010      	movs	r0, #16

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    3f3e:	7809      	ldrb	r1, [r1, #0]
    3f40:	1a52      	subs	r2, r2, r1
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    3f42:	7819      	ldrb	r1, [r3, #0]

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    3f44:	b2d2      	uxtb	r2, r2
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    3f46:	4381      	bics	r1, r0

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    3f48:	705a      	strb	r2, [r3, #1]
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    3f4a:	7019      	strb	r1, [r3, #0]
		max_tx_octets = conn->max_tx_octets;
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
    3f4c:	2a1b      	cmp	r2, #27
    3f4e:	d904      	bls.n	3f5a <prepare_pdu_data_tx+0xee>
			_pdu_data_tx->len = max_tx_octets;
    3f50:	221b      	movs	r2, #27
    3f52:	705a      	strb	r2, [r3, #1]
			_pdu_data_tx->md = 1;
    3f54:	b2ca      	uxtb	r2, r1
    3f56:	4302      	orrs	r2, r0
    3f58:	701a      	strb	r2, [r3, #0]
		}

		if (conn->pkt_tx_head->next) {
    3f5a:	6822      	ldr	r2, [r4, #0]
    3f5c:	6812      	ldr	r2, [r2, #0]
    3f5e:	2a00      	cmp	r2, #0
    3f60:	d003      	beq.n	3f6a <prepare_pdu_data_tx+0xfe>
			_pdu_data_tx->md = 1;
    3f62:	2110      	movs	r1, #16
    3f64:	781a      	ldrb	r2, [r3, #0]
    3f66:	430a      	orrs	r2, r1
    3f68:	701a      	strb	r2, [r3, #0]
		}
	}

	_pdu_data_tx->rfu = 0;
    3f6a:	221f      	movs	r2, #31
    3f6c:	7819      	ldrb	r1, [r3, #0]
    3f6e:	400a      	ands	r2, r1
    3f70:	701a      	strb	r2, [r3, #0]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR)
	_pdu_data_tx->resv = 0;
    3f72:	2200      	movs	r2, #0
    3f74:	709a      	strb	r2, [r3, #2]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR */

	*pdu_data_tx = _pdu_data_tx;
    3f76:	602b      	str	r3, [r5, #0]
}
    3f78:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

00003f7c <sched_free_win_offset_calc>:
				       u8_t is_select,
				       u32_t *ticks_to_offset_next,
				       u16_t conn_interval,
				       u8_t *offset_max,
				       u8_t *win_offset)
{
    3f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f7e:	0016      	movs	r6, r2
	u32_t ticks_prepare_reduced = 0;
    3f80:	2200      	movs	r2, #0
				       u8_t is_select,
				       u32_t *ticks_to_offset_next,
				       u16_t conn_interval,
				       u8_t *offset_max,
				       u8_t *win_offset)
{
    3f82:	b093      	sub	sp, #76	; 0x4c
    3f84:	9309      	str	r3, [sp, #36]	; 0x24
	u8_t ticker_id_prev;
	u8_t ticker_id_other;
	u8_t offset_index;
	u16_t _win_offset;

	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    3f86:	6803      	ldr	r3, [r0, #0]
				       u8_t is_select,
				       u32_t *ticks_to_offset_next,
				       u16_t conn_interval,
				       u8_t *offset_max,
				       u8_t *win_offset)
{
    3f88:	9007      	str	r0, [sp, #28]
    3f8a:	910d      	str	r1, [sp, #52]	; 0x34
	u32_t ticks_prepare_reduced = 0;
    3f8c:	920a      	str	r2, [sp, #40]	; 0x28
	u8_t ticker_id_prev;
	u8_t ticker_id_other;
	u8_t offset_index;
	u16_t _win_offset;

	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    3f8e:	4293      	cmp	r3, r2
    3f90:	da08      	bge.n	3fa4 <sched_free_win_offset_calc+0x28>
				(conn_curr->hdr.ticks_active_to_start >
				conn_curr->hdr.ticks_preempt_to_start) ?
				conn_curr->hdr.ticks_active_to_start :
				conn_curr->hdr.ticks_preempt_to_start;

		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
    3f92:	6841      	ldr	r1, [r0, #4]
    3f94:	6882      	ldr	r2, [r0, #8]
    3f96:	005b      	lsls	r3, r3, #1
    3f98:	085b      	lsrs	r3, r3, #1
    3f9a:	428a      	cmp	r2, r1
    3f9c:	d200      	bcs.n	3fa0 <sched_free_win_offset_calc+0x24>
    3f9e:	000a      	movs	r2, r1
    3fa0:	1a9b      	subs	r3, r3, r2
    3fa2:	930a      	str	r3, [sp, #40]	; 0x28
					  (~((u32_t)1 << 31))) -
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    3fa4:	2211      	movs	r2, #17
    3fa6:	23ff      	movs	r3, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
		ticks_anchor_prev = offset_index = _win_offset = 0;
    3fa8:	2400      	movs	r4, #0
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
					  (~((u32_t)1 << 31))) -
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    3faa:	a90a      	add	r1, sp, #40	; 0x28
    3fac:	1852      	adds	r2, r2, r1
    3fae:	7013      	strb	r3, [r2, #0]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
		ticks_anchor_prev = offset_index = _win_offset = 0;
    3fb0:	2212      	movs	r2, #18
					  (~((u32_t)1 << 31))) -
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    3fb2:	0025      	movs	r5, r4
		ticks_anchor_prev = offset_index = _win_offset = 0;
    3fb4:	1852      	adds	r2, r2, r1
    3fb6:	8014      	strh	r4, [r2, #0]
					  (~((u32_t)1 << 31))) -
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    3fb8:	940f      	str	r4, [sp, #60]	; 0x3c
    3fba:	9410      	str	r4, [sp, #64]	; 0x40
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
					  (~((u32_t)1 << 31))) -
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    3fbc:	9308      	str	r3, [sp, #32]
    3fbe:	930c      	str	r3, [sp, #48]	; 0x30
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
		ticks_anchor_prev = offset_index = _win_offset = 0;
	ticks_slot_prev_abs = 0;
    3fc0:	9406      	str	r4, [sp, #24]
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
		ticks_anchor_prev = offset_index = _win_offset = 0;
    3fc2:	940b      	str	r4, [sp, #44]	; 0x2c
	ticks_slot_prev_abs = 0;
	do {
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3fc4:	2302      	movs	r3, #2
		struct connection *conn;
		u32_t ret;

		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    3fc6:	2211      	movs	r2, #17
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
		ticks_anchor_prev = offset_index = _win_offset = 0;
	ticks_slot_prev_abs = 0;
	do {
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    3fc8:	9311      	str	r3, [sp, #68]	; 0x44
		struct connection *conn;
		u32_t ret;

		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    3fca:	ab11      	add	r3, sp, #68	; 0x44
    3fcc:	9302      	str	r3, [sp, #8]
    3fce:	4b6f      	ldr	r3, [pc, #444]	; (418c <sched_free_win_offset_calc+0x210>)
    3fd0:	a90a      	add	r1, sp, #40	; 0x28
    3fd2:	9301      	str	r3, [sp, #4]
    3fd4:	ab10      	add	r3, sp, #64	; 0x40
    3fd6:	9300      	str	r3, [sp, #0]
    3fd8:	1852      	adds	r2, r2, r1
    3fda:	ab0f      	add	r3, sp, #60	; 0x3c
    3fdc:	2101      	movs	r1, #1
    3fde:	2000      	movs	r0, #0
    3fe0:	f7ff fca6 	bl	3930 <ticker_next_slot_get>
					   RADIO_TICKER_USER_ID_JOB,
					   &ticker_id, &ticks_anchor,
					   &ticks_to_expire, ticker_if_done,
					   (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    3fe4:	2802      	cmp	r0, #2
    3fe6:	d003      	beq.n	3ff0 <sched_free_win_offset_calc+0x74>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
						 RADIO_TICKER_USER_ID_JOB);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    3fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3fea:	2b00      	cmp	r3, #0
    3fec:	d008      	beq.n	4000 <sched_free_win_offset_calc+0x84>
    3fee:	e015      	b.n	401c <sched_free_win_offset_calc+0xa0>
					   &ticker_id, &ticks_anchor,
					   &ticks_to_expire, ticker_if_done,
					   (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
    3ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3ff2:	2b02      	cmp	r3, #2
    3ff4:	d1f8      	bne.n	3fe8 <sched_free_win_offset_calc+0x6c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    3ff6:	2101      	movs	r1, #1
    3ff8:	2000      	movs	r0, #0
    3ffa:	f7ff fcf7 	bl	39ec <ticker_job_sched>
    3ffe:	e7f7      	b.n	3ff0 <sched_free_win_offset_calc+0x74>
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);

		if (ticker_id == 0xff) {
    4000:	2311      	movs	r3, #17
    4002:	aa0a      	add	r2, sp, #40	; 0x28
    4004:	189b      	adds	r3, r3, r2
    4006:	781a      	ldrb	r2, [r3, #0]
    4008:	2aff      	cmp	r2, #255	; 0xff
    400a:	d100      	bne.n	400e <sched_free_win_offset_calc+0x92>
    400c:	e088      	b.n	4120 <sched_free_win_offset_calc+0x1a4>
			break;
		}

		if ((ticker_id_prev != 0xff) &&
    400e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4010:	2bff      	cmp	r3, #255	; 0xff
    4012:	d006      	beq.n	4022 <sched_free_win_offset_calc+0xa6>
    4014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4016:	990f      	ldr	r1, [sp, #60]	; 0x3c
    4018:	428b      	cmp	r3, r1
    401a:	d002      	beq.n	4022 <sched_free_win_offset_calc+0xa6>
		    (ticks_anchor != ticks_anchor_prev)) {
			LL_ASSERT(0);
    401c:	b662      	cpsie	i
    401e:	2004      	movs	r0, #4
    4020:	df02      	svc	2
		}

		if (ticker_id < RADIO_TICKER_ID_ADV) {
    4022:	2a04      	cmp	r2, #4
    4024:	d977      	bls.n	4116 <sched_free_win_offset_calc+0x19a>
			continue;
		}

		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    4026:	2a06      	cmp	r2, #6
    4028:	d974      	bls.n	4114 <sched_free_win_offset_calc+0x198>
			 */
			ticker_id_other = ticker_id;
			continue;
		}

		if (ticker_id_other != 0xFF) {
    402a:	9b08      	ldr	r3, [sp, #32]
    402c:	2bff      	cmp	r3, #255	; 0xff
    402e:	d177      	bne.n	4120 <sched_free_win_offset_calc+0x1a4>
			break;
		}

		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4030:	4857      	ldr	r0, [pc, #348]	; (4190 <sched_free_win_offset_calc+0x214>)
    4032:	3385      	adds	r3, #133	; 0x85
    4034:	3a07      	subs	r2, #7
    4036:	58c0      	ldr	r0, [r0, r3]
    4038:	b292      	uxth	r2, r2
    403a:	21fc      	movs	r1, #252	; 0xfc
    403c:	f7fe f9c5 	bl	23ca <mem_get>
			       (ticker_id - RADIO_TICKER_ID_FIRST_CONNECTION));

		if ((conn != conn_curr) && ((is_select) ||
    4040:	9b07      	ldr	r3, [sp, #28]

		if (ticker_id_other != 0xFF) {
			break;
		}

		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4042:	0007      	movs	r7, r0
			       (ticker_id - RADIO_TICKER_ID_FIRST_CONNECTION));

		if ((conn != conn_curr) && ((is_select) ||
    4044:	4283      	cmp	r3, r0
    4046:	d066      	beq.n	4116 <sched_free_win_offset_calc+0x19a>
    4048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    404a:	2b00      	cmp	r3, #0
    404c:	d104      	bne.n	4058 <sched_free_win_offset_calc+0xdc>
					    (conn->role.master.role == 0))) {
    404e:	0003      	movs	r3, r0
    4050:	3334      	adds	r3, #52	; 0x34
		}

		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
			       (ticker_id - RADIO_TICKER_ID_FIRST_CONNECTION));

		if ((conn != conn_curr) && ((is_select) ||
    4052:	781b      	ldrb	r3, [r3, #0]
    4054:	07db      	lsls	r3, r3, #31
    4056:	d45e      	bmi.n	4116 <sched_free_win_offset_calc+0x19a>
					    (conn->role.master.role == 0))) {
			u32_t ticks_to_expire_normal =
    4058:	9a10      	ldr	r2, [sp, #64]	; 0x40
    405a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    405c:	4694      	mov	ip, r2
    405e:	4463      	add	r3, ip
    4060:	9305      	str	r3, [sp, #20]
				ticks_to_expire + ticks_prepare_reduced;

			if (conn->hdr.ticks_xtal_to_start &
    4062:	683b      	ldr	r3, [r7, #0]
    4064:	2b00      	cmp	r3, #0
    4066:	da0a      	bge.n	407e <sched_free_win_offset_calc+0x102>
					(conn->hdr.ticks_active_to_start >
					 conn->hdr.ticks_preempt_to_start) ?
					conn->hdr.ticks_active_to_start :
					conn->hdr.ticks_preempt_to_start;

				ticks_to_expire_normal -=
    4068:	6879      	ldr	r1, [r7, #4]
    406a:	68ba      	ldr	r2, [r7, #8]
    406c:	428a      	cmp	r2, r1
    406e:	d200      	bcs.n	4072 <sched_free_win_offset_calc+0xf6>
    4070:	000a      	movs	r2, r1
    4072:	005b      	lsls	r3, r3, #1
    4074:	085b      	lsrs	r3, r3, #1
    4076:	1ad3      	subs	r3, r2, r3
    4078:	9a05      	ldr	r2, [sp, #20]
    407a:	18d3      	adds	r3, r2, r3
    407c:	9305      	str	r3, [sp, #20]
					((conn->hdr.ticks_xtal_to_start &
					  (~((u32_t)1 << 31))) -
					 ticks_prepare_to_start);
			}

			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    407e:	6833      	ldr	r3, [r6, #0]
    4080:	9a05      	ldr	r2, [sp, #20]
    4082:	429a      	cmp	r2, r3
    4084:	d93a      	bls.n	40fc <sched_free_win_offset_calc+0x180>
    4086:	429d      	cmp	r5, r3
    4088:	d22a      	bcs.n	40e0 <sched_free_win_offset_calc+0x164>
    408a:	001d      	movs	r5, r3
    408c:	e028      	b.n	40e0 <sched_free_win_offset_calc+0x164>
					ticks_to_expire_prev =
						*ticks_to_offset_next;
				}

				while ((offset_index < *offset_max) &&
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
    408e:	0029      	movs	r1, r5
    4090:	9805      	ldr	r0, [sp, #20]
    4092:	f7ff fcbf 	bl	3a14 <ticker_ticks_diff_get>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
					ticks_to_expire_prev =
						*ticks_to_offset_next;
				}

				while ((offset_index < *offset_max) &&
    4096:	68fb      	ldr	r3, [r7, #12]
    4098:	9a06      	ldr	r2, [sp, #24]
    409a:	3364      	adds	r3, #100	; 0x64
    409c:	189b      	adds	r3, r3, r2
    409e:	4298      	cmp	r0, r3
    40a0:	d324      	bcc.n	40ec <sched_free_win_offset_calc+0x170>
							      ticks_to_expire_prev) >=
					(ticks_slot_prev_abs +
					 TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
							    625 + 1250) +
					 conn->hdr.ticks_slot))) {
					_win_offset =
    40a2:	9b06      	ldr	r3, [sp, #24]
    40a4:	4a3b      	ldr	r2, [pc, #236]	; (4194 <sched_free_win_offset_calc+0x218>)
    40a6:	18e8      	adds	r0, r5, r3
    40a8:	2100      	movs	r1, #0
    40aa:	2307      	movs	r3, #7
    40ac:	f7fc fa0e 	bl	4cc <__aeabi_lmul>
    40b0:	2300      	movs	r3, #0
    40b2:	4a39      	ldr	r2, [pc, #228]	; (4198 <sched_free_win_offset_calc+0x21c>)
    40b4:	f7fc f9ea 	bl	48c <__aeabi_uldivmod>
    40b8:	4938      	ldr	r1, [pc, #224]	; (419c <sched_free_win_offset_calc+0x220>)
    40ba:	f7fc f871 	bl	1a0 <__aeabi_uidiv>
    40be:	2112      	movs	r1, #18
    40c0:	ab0a      	add	r3, sp, #40	; 0x28
    40c2:	18c9      	adds	r1, r1, r3
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
								   ticks_slot_prev_abs) / 1250;
					if (_win_offset >= conn_interval) {
    40c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
							      ticks_to_expire_prev) >=
					(ticks_slot_prev_abs +
					 TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
							    625 + 1250) +
					 conn->hdr.ticks_slot))) {
					_win_offset =
    40c6:	b280      	uxth	r0, r0
    40c8:	8008      	strh	r0, [r1, #0]
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
								   ticks_slot_prev_abs) / 1250;
					if (_win_offset >= conn_interval) {
    40ca:	4298      	cmp	r0, r3
    40cc:	d20d      	bcs.n	40ea <sched_free_win_offset_calc+0x16e>
						ticks_to_expire_prev = 0;

						break;
					}

					memcpy(win_offset +
    40ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
    40d0:	0060      	lsls	r0, r4, #1
    40d2:	1818      	adds	r0, r3, r0
    40d4:	2202      	movs	r2, #2
    40d6:	f7fc ff2f 	bl	f38 <memcpy>
					       (sizeof(u16_t) * offset_index),
					       &_win_offset, sizeof(u16_t));
					offset_index++;
    40da:	3401      	adds	r4, #1
    40dc:	b2e4      	uxtb	r4, r4

					ticks_to_expire_prev +=
    40de:	3528      	adds	r5, #40	; 0x28
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
					ticks_to_expire_prev =
						*ticks_to_offset_next;
				}

				while ((offset_index < *offset_max) &&
    40e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    40e2:	781b      	ldrb	r3, [r3, #0]
    40e4:	42a3      	cmp	r3, r4
    40e6:	d8d2      	bhi.n	408e <sched_free_win_offset_calc+0x112>
    40e8:	e000      	b.n	40ec <sched_free_win_offset_calc+0x170>
					 conn->hdr.ticks_slot))) {
					_win_offset =
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
								   ticks_slot_prev_abs) / 1250;
					if (_win_offset >= conn_interval) {
						ticks_to_expire_prev = 0;
    40ea:	2500      	movs	r5, #0
						TICKER_US_TO_TICKS(1250);
				}

				*ticks_to_offset_next = ticks_to_expire_prev;

				if (_win_offset >= conn_interval) {
    40ec:	2312      	movs	r3, #18
    40ee:	aa0a      	add	r2, sp, #40	; 0x28
    40f0:	189b      	adds	r3, r3, r2
    40f2:	881b      	ldrh	r3, [r3, #0]
    40f4:	9a09      	ldr	r2, [sp, #36]	; 0x24

					ticks_to_expire_prev +=
						TICKER_US_TO_TICKS(1250);
				}

				*ticks_to_offset_next = ticks_to_expire_prev;
    40f6:	6035      	str	r5, [r6, #0]

				if (_win_offset >= conn_interval) {
    40f8:	4293      	cmp	r3, r2
    40fa:	d211      	bcs.n	4120 <sched_free_win_offset_calc+0x1a4>
					break;
				}
			}

			ticks_anchor_prev = ticks_anchor;
    40fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
    40fe:	aa0a      	add	r2, sp, #40	; 0x28
				if (_win_offset >= conn_interval) {
					break;
				}
			}

			ticks_anchor_prev = ticks_anchor;
    4100:	930b      	str	r3, [sp, #44]	; 0x2c
			ticker_id_prev = ticker_id;
    4102:	2311      	movs	r3, #17
    4104:	189b      	adds	r3, r3, r2
    4106:	781b      	ldrb	r3, [r3, #0]
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_prev_abs =
    4108:	9d05      	ldr	r5, [sp, #20]
					break;
				}
			}

			ticks_anchor_prev = ticks_anchor;
			ticker_id_prev = ticker_id;
    410a:	930c      	str	r3, [sp, #48]	; 0x30
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_prev_abs =
    410c:	68fb      	ldr	r3, [r7, #12]
    410e:	3364      	adds	r3, #100	; 0x64
    4110:	9306      	str	r3, [sp, #24]
    4112:	e000      	b.n	4116 <sched_free_win_offset_calc+0x19a>
    4114:	9208      	str	r2, [sp, #32]
				TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
						   625 + 1250) +
				conn->hdr.ticks_slot;
		}
	} while (offset_index < *offset_max);
    4116:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4118:	781b      	ldrb	r3, [r3, #0]
    411a:	42a3      	cmp	r3, r4
    411c:	d900      	bls.n	4120 <sched_free_win_offset_calc+0x1a4>
    411e:	e751      	b.n	3fc4 <sched_free_win_offset_calc+0x48>

	if (ticker_id == 0xFF) {
    4120:	2311      	movs	r3, #17
    4122:	aa0a      	add	r2, sp, #40	; 0x28
    4124:	189b      	adds	r3, r3, r2
    4126:	781b      	ldrb	r3, [r3, #0]
    4128:	2bff      	cmp	r3, #255	; 0xff
    412a:	d12a      	bne.n	4182 <sched_free_win_offset_calc+0x206>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
    412c:	6833      	ldr	r3, [r6, #0]
    412e:	429d      	cmp	r5, r3
    4130:	d220      	bcs.n	4174 <sched_free_win_offset_calc+0x1f8>
    4132:	001d      	movs	r5, r3
    4134:	e01e      	b.n	4174 <sched_free_win_offset_calc+0x1f8>
			ticks_to_expire_prev = *ticks_to_offset_next;
		}

		while (offset_index < *offset_max) {
			_win_offset =
    4136:	9b06      	ldr	r3, [sp, #24]
    4138:	4a16      	ldr	r2, [pc, #88]	; (4194 <sched_free_win_offset_calc+0x218>)
    413a:	18e8      	adds	r0, r5, r3
    413c:	2100      	movs	r1, #0
    413e:	2307      	movs	r3, #7
    4140:	f7fc f9c4 	bl	4cc <__aeabi_lmul>
    4144:	2300      	movs	r3, #0
    4146:	4a14      	ldr	r2, [pc, #80]	; (4198 <sched_free_win_offset_calc+0x21c>)
    4148:	f7fc f9a0 	bl	48c <__aeabi_uldivmod>
    414c:	4913      	ldr	r1, [pc, #76]	; (419c <sched_free_win_offset_calc+0x220>)
    414e:	f7fc f827 	bl	1a0 <__aeabi_uidiv>
    4152:	2112      	movs	r1, #18
    4154:	ab0a      	add	r3, sp, #40	; 0x28
    4156:	18c9      	adds	r1, r1, r3
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
						   ticks_slot_prev_abs) / 1250;
			if (_win_offset >= conn_interval) {
    4158:	9b09      	ldr	r3, [sp, #36]	; 0x24
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
			ticks_to_expire_prev = *ticks_to_offset_next;
		}

		while (offset_index < *offset_max) {
			_win_offset =
    415a:	b280      	uxth	r0, r0
    415c:	8008      	strh	r0, [r1, #0]
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
						   ticks_slot_prev_abs) / 1250;
			if (_win_offset >= conn_interval) {
    415e:	4283      	cmp	r3, r0
    4160:	d90d      	bls.n	417e <sched_free_win_offset_calc+0x202>
				ticks_to_expire_prev = 0;

				break;
			}

			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    4162:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4164:	0060      	lsls	r0, r4, #1
    4166:	1818      	adds	r0, r3, r0
    4168:	2202      	movs	r2, #2
    416a:	f7fc fee5 	bl	f38 <memcpy>
			       &_win_offset, sizeof(u16_t));
			offset_index++;
    416e:	3401      	adds	r4, #1
    4170:	b2e4      	uxtb	r4, r4

			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
    4172:	3528      	adds	r5, #40	; 0x28
	if (ticker_id == 0xFF) {
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
			ticks_to_expire_prev = *ticks_to_offset_next;
		}

		while (offset_index < *offset_max) {
    4174:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4176:	781b      	ldrb	r3, [r3, #0]
    4178:	42a3      	cmp	r3, r4
    417a:	d8dc      	bhi.n	4136 <sched_free_win_offset_calc+0x1ba>
    417c:	e000      	b.n	4180 <sched_free_win_offset_calc+0x204>
			_win_offset =
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
						   ticks_slot_prev_abs) / 1250;
			if (_win_offset >= conn_interval) {
				ticks_to_expire_prev = 0;
    417e:	2500      	movs	r5, #0
			offset_index++;

			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
		}

		*ticks_to_offset_next = ticks_to_expire_prev;
    4180:	6035      	str	r5, [r6, #0]
	}

	*offset_max = offset_index;
    4182:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4184:	701c      	strb	r4, [r3, #0]
}
    4186:	b013      	add	sp, #76	; 0x4c
    4188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    418a:	46c0      	nop			; (mov r8, r8)
    418c:	00003a61 	.word	0x00003a61
    4190:	200005f4 	.word	0x200005f4
    4194:	1afd498d 	.word	0x1afd498d
    4198:	3b9aca00 	.word	0x3b9aca00
    419c:	000004e2 	.word	0x000004e2

000041a0 <mayfly_sched_win_offset_select>:
				   &offset_max,
				   (u8_t *)conn->llcp.connection_update.pdu_win_offset);
}

static void mayfly_sched_win_offset_select(void *params)
{
    41a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#define OFFSET_S_MAX 6
#define OFFSET_M_MAX 6
	struct connection *conn = (struct connection *)params;
	u32_t ticks_to_offset;
	u16_t win_offset_m[OFFSET_M_MAX];
	u8_t offset_m_max = OFFSET_M_MAX;
    41a2:	270d      	movs	r7, #13
				   &offset_max,
				   (u8_t *)conn->llcp.connection_update.pdu_win_offset);
}

static void mayfly_sched_win_offset_select(void *params)
{
    41a4:	b08b      	sub	sp, #44	; 0x2c
#define OFFSET_S_MAX 6
#define OFFSET_M_MAX 6
	struct connection *conn = (struct connection *)params;
	u32_t ticks_to_offset;
	u16_t win_offset_m[OFFSET_M_MAX];
	u8_t offset_m_max = OFFSET_M_MAX;
    41a6:	ab02      	add	r3, sp, #8
    41a8:	18ff      	adds	r7, r7, r3
    41aa:	2306      	movs	r3, #6
	u16_t win_offset_s;
	u8_t offset_index_s = 0;

	ticks_to_offset =
		TICKER_US_TO_TICKS(conn->llcp.connection_update.offset0 * 1250);
    41ac:	0005      	movs	r5, r0
#define OFFSET_S_MAX 6
#define OFFSET_M_MAX 6
	struct connection *conn = (struct connection *)params;
	u32_t ticks_to_offset;
	u16_t win_offset_m[OFFSET_M_MAX];
	u8_t offset_m_max = OFFSET_M_MAX;
    41ae:	703b      	strb	r3, [r7, #0]
	u16_t win_offset_s;
	u8_t offset_index_s = 0;

	ticks_to_offset =
    41b0:	2324      	movs	r3, #36	; 0x24
				   &offset_max,
				   (u8_t *)conn->llcp.connection_update.pdu_win_offset);
}

static void mayfly_sched_win_offset_select(void *params)
{
    41b2:	0004      	movs	r4, r0
	u8_t offset_m_max = OFFSET_M_MAX;
	u16_t win_offset_s;
	u8_t offset_index_s = 0;

	ticks_to_offset =
		TICKER_US_TO_TICKS(conn->llcp.connection_update.offset0 * 1250);
    41b4:	3566      	adds	r5, #102	; 0x66
	u16_t win_offset_m[OFFSET_M_MAX];
	u8_t offset_m_max = OFFSET_M_MAX;
	u16_t win_offset_s;
	u8_t offset_index_s = 0;

	ticks_to_offset =
    41b6:	8828      	ldrh	r0, [r5, #0]
    41b8:	4a2d      	ldr	r2, [pc, #180]	; (4270 <mayfly_sched_win_offset_select+0xd0>)
    41ba:	33ff      	adds	r3, #255	; 0xff
    41bc:	2100      	movs	r1, #0
    41be:	f7fc f985 	bl	4cc <__aeabi_lmul>
    41c2:	4a2c      	ldr	r2, [pc, #176]	; (4274 <mayfly_sched_win_offset_select+0xd4>)
    41c4:	2307      	movs	r3, #7
    41c6:	f7fc f961 	bl	48c <__aeabi_uldivmod>
		TICKER_US_TO_TICKS(conn->llcp.connection_update.offset0 * 1250);

	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    41ca:	0023      	movs	r3, r4
	u16_t win_offset_m[OFFSET_M_MAX];
	u8_t offset_m_max = OFFSET_M_MAX;
	u16_t win_offset_s;
	u8_t offset_index_s = 0;

	ticks_to_offset =
    41cc:	9006      	str	r0, [sp, #24]
		TICKER_US_TO_TICKS(conn->llcp.connection_update.offset0 * 1250);

	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    41ce:	aa07      	add	r2, sp, #28
    41d0:	335c      	adds	r3, #92	; 0x5c
    41d2:	881b      	ldrh	r3, [r3, #0]
    41d4:	2101      	movs	r1, #1
    41d6:	9201      	str	r2, [sp, #4]
    41d8:	9700      	str	r7, [sp, #0]
    41da:	aa06      	add	r2, sp, #24
    41dc:	0020      	movs	r0, r4
    41de:	f7ff fecd 	bl	3f7c <sched_free_win_offset_calc>
    41e2:	0023      	movs	r3, r4
    41e4:	3372      	adds	r3, #114	; 0x72
    41e6:	9303      	str	r3, [sp, #12]
				   &offset_m_max, (u8_t *)&win_offset_m[0]);

	while (offset_index_s < OFFSET_S_MAX) {
		u8_t offset_index_m = 0;

		memcpy((u8_t *)&win_offset_s,
    41e8:	260e      	movs	r6, #14
    41ea:	ab02      	add	r3, sp, #8
    41ec:	18f6      	adds	r6, r6, r3
    41ee:	2202      	movs	r2, #2
    41f0:	0029      	movs	r1, r5
    41f2:	0030      	movs	r0, r6
    41f4:	f7fc fea0 	bl	f38 <memcpy>
		       ((u8_t *)&conn->llcp.connection_update.offset0 +
			(sizeof(u16_t) * offset_index_s)), sizeof(u16_t));

		while (offset_index_m < offset_m_max) {
    41f8:	783b      	ldrb	r3, [r7, #0]
			if ((win_offset_s != 0xffff) &&
    41fa:	8832      	ldrh	r2, [r6, #0]

		memcpy((u8_t *)&win_offset_s,
		       ((u8_t *)&conn->llcp.connection_update.offset0 +
			(sizeof(u16_t) * offset_index_s)), sizeof(u16_t));

		while (offset_index_m < offset_m_max) {
    41fc:	9302      	str	r3, [sp, #8]
    41fe:	2300      	movs	r3, #0
    4200:	9802      	ldr	r0, [sp, #8]
    4202:	b2d9      	uxtb	r1, r3
    4204:	4288      	cmp	r0, r1
    4206:	d909      	bls.n	421c <mayfly_sched_win_offset_select+0x7c>
			if ((win_offset_s != 0xffff) &&
    4208:	491b      	ldr	r1, [pc, #108]	; (4278 <mayfly_sched_win_offset_select+0xd8>)
    420a:	428a      	cmp	r2, r1
    420c:	d004      	beq.n	4218 <mayfly_sched_win_offset_select+0x78>
			    (win_offset_s == win_offset_m[offset_index_m])) {
    420e:	0059      	lsls	r1, r3, #1
    4210:	a807      	add	r0, sp, #28
    4212:	5a09      	ldrh	r1, [r1, r0]
		memcpy((u8_t *)&win_offset_s,
		       ((u8_t *)&conn->llcp.connection_update.offset0 +
			(sizeof(u16_t) * offset_index_s)), sizeof(u16_t));

		while (offset_index_m < offset_m_max) {
			if ((win_offset_s != 0xffff) &&
    4214:	428a      	cmp	r2, r1
    4216:	d01f      	beq.n	4258 <mayfly_sched_win_offset_select+0xb8>
    4218:	3301      	adds	r3, #1
    421a:	e7f1      	b.n	4200 <mayfly_sched_win_offset_select+0x60>

	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
				   conn->llcp.connection_update.interval,
				   &offset_m_max, (u8_t *)&win_offset_m[0]);

	while (offset_index_s < OFFSET_S_MAX) {
    421c:	9b03      	ldr	r3, [sp, #12]
    421e:	3502      	adds	r5, #2
    4220:	429d      	cmp	r5, r3
    4222:	d1e1      	bne.n	41e8 <mayfly_sched_win_offset_select+0x48>
		       &win_offset_s, sizeof(u16_t));
	} else {
		struct pdu_data *pdu_ctrl_tx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    4224:	0022      	movs	r2, r4
    4226:	0023      	movs	r3, r4
    4228:	3258      	adds	r2, #88	; 0x58
    422a:	7812      	ldrb	r2, [r2, #0]
    422c:	3359      	adds	r3, #89	; 0x59
    422e:	701a      	strb	r2, [r3, #0]

		/* reset mutex */
		_radio.conn_upd = NULL;
    4230:	23fe      	movs	r3, #254	; 0xfe
    4232:	2100      	movs	r1, #0
    4234:	4a11      	ldr	r2, [pc, #68]	; (427c <mayfly_sched_win_offset_select+0xdc>)
    4236:	005b      	lsls	r3, r3, #1
    4238:	50d1      	str	r1, [r2, r3]

		/* send reject_ind_ext */
		pdu_ctrl_tx = (struct pdu_data *)
			((u8_t *)conn->llcp.connection_update.pdu_win_offset -
    423a:	3404      	adds	r4, #4
    423c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
			 offsetof(struct pdu_data,
				  payload.llctrl.ctrldata.conn_update_ind.win_offset));
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    423e:	3103      	adds	r1, #3
    4240:	3b05      	subs	r3, #5
    4242:	781a      	ldrb	r2, [r3, #0]
		pdu_ctrl_tx->len =
    4244:	7059      	strb	r1, [r3, #1]
		/* send reject_ind_ext */
		pdu_ctrl_tx = (struct pdu_data *)
			((u8_t *)conn->llcp.connection_update.pdu_win_offset -
			 offsetof(struct pdu_data,
				  payload.llctrl.ctrldata.conn_update_ind.win_offset));
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    4246:	430a      	orrs	r2, r1
    4248:	701a      	strb	r2, [r3, #0]
		pdu_ctrl_tx->len =
			offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_reject_ext_ind);
		pdu_ctrl_tx->payload.llctrl.opcode =
    424a:	2211      	movs	r2, #17
    424c:	70da      	strb	r2, [r3, #3]
			PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
		pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    424e:	3a02      	subs	r2, #2
    4250:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.
			error_code = 0x20; /* Unsupported parameter value */
    4252:	3211      	adds	r2, #17
    4254:	715a      	strb	r2, [r3, #5]
    4256:	e008      	b.n	426a <mayfly_sched_win_offset_select+0xca>

		offset_index_s++;
	}

	if (offset_index_s < OFFSET_S_MAX) {
		conn->llcp.connection_update.win_offset_us =
    4258:	4b09      	ldr	r3, [pc, #36]	; (4280 <mayfly_sched_win_offset_select+0xe0>)
			win_offset_s * 1250;
		memcpy(conn->llcp.connection_update.pdu_win_offset,
    425a:	3404      	adds	r4, #4

		offset_index_s++;
	}

	if (offset_index_s < OFFSET_S_MAX) {
		conn->llcp.connection_update.win_offset_us =
    425c:	435a      	muls	r2, r3
    425e:	67a2      	str	r2, [r4, #120]	; 0x78
			win_offset_s * 1250;
		memcpy(conn->llcp.connection_update.pdu_win_offset,
    4260:	0031      	movs	r1, r6
    4262:	2202      	movs	r2, #2
    4264:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    4266:	f7fc fe67 	bl	f38 <memcpy>
		pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
		pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.
			error_code = 0x20; /* Unsupported parameter value */
	}
}
    426a:	b00b      	add	sp, #44	; 0x2c
    426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    426e:	46c0      	nop			; (mov r8, r8)
    4270:	09ce5400 	.word	0x09ce5400
    4274:	1afd498d 	.word	0x1afd498d
    4278:	0000ffff 	.word	0x0000ffff
    427c:	200005f4 	.word	0x200005f4
    4280:	000004e2 	.word	0x000004e2

00004284 <mayfly_sched_free_win_offset_calc>:

	*offset_max = offset_index;
}

static void mayfly_sched_free_win_offset_calc(void *params)
{
    4284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct connection *conn = (struct connection *)params;
	u32_t ticks_to_offset_default = 0;
    4286:	2300      	movs	r3, #0
	u32_t *ticks_to_offset_next;
	u8_t offset_max = 6;
    4288:	210b      	movs	r1, #11
}

static void mayfly_sched_free_win_offset_calc(void *params)
{
	struct connection *conn = (struct connection *)params;
	u32_t ticks_to_offset_default = 0;
    428a:	9303      	str	r3, [sp, #12]
	u32_t *ticks_to_offset_next;
	u8_t offset_max = 6;
    428c:	4469      	add	r1, sp
    428e:	3306      	adds	r3, #6
    4290:	700b      	strb	r3, [r1, #0]

	ticks_to_offset_next = &ticks_to_offset_default;

	if (conn->role.slave.role != 0) {
    4292:	0003      	movs	r3, r0
    4294:	3334      	adds	r3, #52	; 0x34
    4296:	781b      	ldrb	r3, [r3, #0]
	struct connection *conn = (struct connection *)params;
	u32_t ticks_to_offset_default = 0;
	u32_t *ticks_to_offset_next;
	u8_t offset_max = 6;

	ticks_to_offset_next = &ticks_to_offset_default;
    4298:	aa03      	add	r2, sp, #12

	if (conn->role.slave.role != 0) {
    429a:	07db      	lsls	r3, r3, #31
    429c:	d503      	bpl.n	42a6 <mayfly_sched_free_win_offset_calc+0x22>
		conn->llcp.connection_update.ticks_to_offset_next =
			conn->role.slave.ticks_to_offset;

		ticks_to_offset_next =
    429e:	0002      	movs	r2, r0
	u8_t offset_max = 6;

	ticks_to_offset_next = &ticks_to_offset_default;

	if (conn->role.slave.role != 0) {
		conn->llcp.connection_update.ticks_to_offset_next =
    42a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
			conn->role.slave.ticks_to_offset;

		ticks_to_offset_next =
    42a2:	3278      	adds	r2, #120	; 0x78
	u8_t offset_max = 6;

	ticks_to_offset_next = &ticks_to_offset_default;

	if (conn->role.slave.role != 0) {
		conn->llcp.connection_update.ticks_to_offset_next =
    42a4:	6783      	str	r3, [r0, #120]	; 0x78

		ticks_to_offset_next =
			&conn->llcp.connection_update.ticks_to_offset_next;
	}

	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    42a6:	0003      	movs	r3, r0
				   conn->llcp.connection_update.interval,
				   &offset_max,
				   (u8_t *)conn->llcp.connection_update.pdu_win_offset);
    42a8:	1d04      	adds	r4, r0, #4

		ticks_to_offset_next =
			&conn->llcp.connection_update.ticks_to_offset_next;
	}

	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    42aa:	6fe4      	ldr	r4, [r4, #124]	; 0x7c
    42ac:	335c      	adds	r3, #92	; 0x5c
    42ae:	881b      	ldrh	r3, [r3, #0]
    42b0:	9100      	str	r1, [sp, #0]
    42b2:	9401      	str	r4, [sp, #4]
    42b4:	2100      	movs	r1, #0
    42b6:	f7ff fe61 	bl	3f7c <sched_free_win_offset_calc>
				   conn->llcp.connection_update.interval,
				   &offset_max,
				   (u8_t *)conn->llcp.connection_update.pdu_win_offset);
}
    42ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000042bc <sched_after_mstr_free_slot_get>:
#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
static void sched_after_mstr_free_slot_get(u8_t user_id,
					   u32_t ticks_slot_abs,
					   u32_t *ticks_anchor,
					   u32_t *us_offset)
{
    42bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    42be:	b08f      	sub	sp, #60	; 0x3c
    42c0:	9209      	str	r2, [sp, #36]	; 0x24
	u8_t ticker_id_prev;
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_prev;
	u32_t ticks_slot_prev_abs;

	ticker_id = ticker_id_prev = 0xff;
    42c2:	2217      	movs	r2, #23
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    42c4:	2400      	movs	r4, #0
#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
static void sched_after_mstr_free_slot_get(u8_t user_id,
					   u32_t ticks_slot_abs,
					   u32_t *ticks_anchor,
					   u32_t *us_offset)
{
    42c6:	001f      	movs	r7, r3
	u8_t ticker_id_prev;
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_prev;
	u32_t ticks_slot_prev_abs;

	ticker_id = ticker_id_prev = 0xff;
    42c8:	23ff      	movs	r3, #255	; 0xff
#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
static void sched_after_mstr_free_slot_get(u8_t user_id,
					   u32_t ticks_slot_abs,
					   u32_t *ticks_anchor,
					   u32_t *us_offset)
{
    42ca:	9108      	str	r1, [sp, #32]
	u8_t ticker_id_prev;
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_prev;
	u32_t ticks_slot_prev_abs;

	ticker_id = ticker_id_prev = 0xff;
    42cc:	a906      	add	r1, sp, #24
    42ce:	1852      	adds	r2, r2, r1
#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
static void sched_after_mstr_free_slot_get(u8_t user_id,
					   u32_t ticks_slot_abs,
					   u32_t *ticks_anchor,
					   u32_t *us_offset)
{
    42d0:	9007      	str	r0, [sp, #28]
	u8_t ticker_id_prev;
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_prev;
	u32_t ticks_slot_prev_abs;

	ticker_id = ticker_id_prev = 0xff;
    42d2:	7013      	strb	r3, [r2, #0]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    42d4:	603c      	str	r4, [r7, #0]
    42d6:	940c      	str	r4, [sp, #48]	; 0x30
    42d8:	9406      	str	r4, [sp, #24]
	u8_t ticker_id_prev;
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_prev;
	u32_t ticks_slot_prev_abs;

	ticker_id = ticker_id_prev = 0xff;
    42da:	9305      	str	r3, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
	ticks_slot_prev_abs = 0;
	while (1) {
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    42dc:	2302      	movs	r3, #2
		struct connection *conn;
		u32_t ret;

		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    42de:	2517      	movs	r5, #23

	ticker_id = ticker_id_prev = 0xff;
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
	ticks_slot_prev_abs = 0;
	while (1) {
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    42e0:	930d      	str	r3, [sp, #52]	; 0x34
		struct connection *conn;
		u32_t ret;

		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    42e2:	ab06      	add	r3, sp, #24
    42e4:	18ed      	adds	r5, r5, r3
    42e6:	ab0d      	add	r3, sp, #52	; 0x34
    42e8:	9302      	str	r3, [sp, #8]
    42ea:	4b32      	ldr	r3, [pc, #200]	; (43b4 <sched_after_mstr_free_slot_get+0xf8>)
    42ec:	002a      	movs	r2, r5
    42ee:	9301      	str	r3, [sp, #4]
    42f0:	ab0c      	add	r3, sp, #48	; 0x30
    42f2:	9300      	str	r3, [sp, #0]
    42f4:	9907      	ldr	r1, [sp, #28]
    42f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    42f8:	2000      	movs	r0, #0
    42fa:	f7ff fb19 	bl	3930 <ticker_next_slot_get>
					   user_id, &ticker_id, ticks_anchor,
					   &ticks_to_expire, ticker_if_done,
					   (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    42fe:	2802      	cmp	r0, #2
    4300:	d005      	beq.n	430e <sched_after_mstr_free_slot_get+0x52>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
						 user_id);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    4302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4304:	2b00      	cmp	r3, #0
    4306:	d00a      	beq.n	431e <sched_after_mstr_free_slot_get+0x62>
    4308:	b662      	cpsie	i
    430a:	2004      	movs	r0, #4
    430c:	df02      	svc	2
					   user_id, &ticker_id, ticks_anchor,
					   &ticks_to_expire, ticker_if_done,
					   (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
    430e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4310:	2b02      	cmp	r3, #2
    4312:	d1f6      	bne.n	4302 <sched_after_mstr_free_slot_get+0x46>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4314:	9907      	ldr	r1, [sp, #28]
    4316:	2000      	movs	r0, #0
    4318:	f7ff fb68 	bl	39ec <ticker_job_sched>
    431c:	e7f7      	b.n	430e <sched_after_mstr_free_slot_get+0x52>
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);

		if (ticker_id == 0xff) {
    431e:	782a      	ldrb	r2, [r5, #0]
    4320:	2aff      	cmp	r2, #255	; 0xff
    4322:	d041      	beq.n	43a8 <sched_after_mstr_free_slot_get+0xec>
			break;
		}

		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    4324:	2a06      	cmp	r2, #6
    4326:	d9d9      	bls.n	42dc <sched_after_mstr_free_slot_get+0x20>
			continue;
		}

		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4328:	20c2      	movs	r0, #194	; 0xc2
    432a:	4b23      	ldr	r3, [pc, #140]	; (43b8 <sched_after_mstr_free_slot_get+0xfc>)
    432c:	3a07      	subs	r2, #7
    432e:	0040      	lsls	r0, r0, #1
    4330:	b292      	uxth	r2, r2
    4332:	21fc      	movs	r1, #252	; 0xfc
    4334:	5818      	ldr	r0, [r3, r0]
    4336:	f7fe f848 	bl	23ca <mem_get>
    433a:	1e05      	subs	r5, r0, #0
			       (ticker_id - RADIO_TICKER_ID_FIRST_CONNECTION));
		if ((conn) && (conn->role.master.role == 0)) {
    433c:	d0ce      	beq.n	42dc <sched_after_mstr_free_slot_get+0x20>
    433e:	0003      	movs	r3, r0
    4340:	3334      	adds	r3, #52	; 0x34
    4342:	781b      	ldrb	r3, [r3, #0]
    4344:	07db      	lsls	r3, r3, #31
    4346:	d4c9      	bmi.n	42dc <sched_after_mstr_free_slot_get+0x20>
			u32_t ticks_to_expire_normal = ticks_to_expire;

			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    4348:	6803      	ldr	r3, [r0, #0]
		}

		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
			       (ticker_id - RADIO_TICKER_ID_FIRST_CONNECTION));
		if ((conn) && (conn->role.master.role == 0)) {
			u32_t ticks_to_expire_normal = ticks_to_expire;
    434a:	9e0c      	ldr	r6, [sp, #48]	; 0x30

			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    434c:	2b00      	cmp	r3, #0
    434e:	da08      	bge.n	4362 <sched_after_mstr_free_slot_get+0xa6>
    4350:	6841      	ldr	r1, [r0, #4]
    4352:	6882      	ldr	r2, [r0, #8]
    4354:	428a      	cmp	r2, r1
    4356:	d200      	bcs.n	435a <sched_after_mstr_free_slot_get+0x9e>
    4358:	000a      	movs	r2, r1
					(conn->hdr.ticks_active_to_start >
					 conn->hdr.ticks_preempt_to_start) ?
					conn->hdr.ticks_active_to_start :
					conn->hdr.ticks_preempt_to_start;

				ticks_to_expire_normal -=
    435a:	005b      	lsls	r3, r3, #1
    435c:	1996      	adds	r6, r2, r6
    435e:	085b      	lsrs	r3, r3, #1
    4360:	1af6      	subs	r6, r6, r3
					((conn->hdr.ticks_xtal_to_start &
					  (~((u32_t)1 << 31))) -
					 ticks_prepare_to_start);
			}

			if ((ticker_id_prev != 0xFF) &&
    4362:	9b05      	ldr	r3, [sp, #20]
    4364:	2bff      	cmp	r3, #255	; 0xff
    4366:	d108      	bne.n	437a <sched_after_mstr_free_slot_get+0xbe>
			     (ticks_slot_prev_abs + ticks_slot_abs +
			      TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 2)))) {
				break;
			}

			ticker_id_prev = ticker_id;
    4368:	2317      	movs	r3, #23
    436a:	aa06      	add	r2, sp, #24
    436c:	189b      	adds	r3, r3, r2
    436e:	781b      	ldrb	r3, [r3, #0]
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_prev_abs =
    4370:	68ec      	ldr	r4, [r5, #12]
			     (ticks_slot_prev_abs + ticks_slot_abs +
			      TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 2)))) {
				break;
			}

			ticker_id_prev = ticker_id;
    4372:	9305      	str	r3, [sp, #20]
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_prev_abs =
    4374:	3427      	adds	r4, #39	; 0x27
			      TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 2)))) {
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    4376:	9606      	str	r6, [sp, #24]
    4378:	e7b0      	b.n	42dc <sched_after_mstr_free_slot_get+0x20>
					  (~((u32_t)1 << 31))) -
					 ticks_prepare_to_start);
			}

			if ((ticker_id_prev != 0xFF) &&
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    437a:	9906      	ldr	r1, [sp, #24]
    437c:	0030      	movs	r0, r6
    437e:	f7ff fb49 	bl	3a14 <ticker_ticks_diff_get>
					((conn->hdr.ticks_xtal_to_start &
					  (~((u32_t)1 << 31))) -
					 ticks_prepare_to_start);
			}

			if ((ticker_id_prev != 0xFF) &&
    4382:	9b08      	ldr	r3, [sp, #32]
    4384:	3302      	adds	r3, #2
    4386:	191b      	adds	r3, r3, r4
    4388:	4298      	cmp	r0, r3
    438a:	d9ed      	bls.n	4368 <sched_after_mstr_free_slot_get+0xac>
				conn->hdr.ticks_slot;
		}
	}

	if (ticker_id_prev != 0xff) {
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
    438c:	9b06      	ldr	r3, [sp, #24]
    438e:	4a0b      	ldr	r2, [pc, #44]	; (43bc <sched_after_mstr_free_slot_get+0x100>)
    4390:	1918      	adds	r0, r3, r4
    4392:	2100      	movs	r1, #0
    4394:	2307      	movs	r3, #7
    4396:	f7fc f899 	bl	4cc <__aeabi_lmul>
    439a:	4a09      	ldr	r2, [pc, #36]	; (43c0 <sched_after_mstr_free_slot_get+0x104>)
    439c:	2300      	movs	r3, #0
    439e:	f7fc f875 	bl	48c <__aeabi_uldivmod>
    43a2:	3020      	adds	r0, #32
    43a4:	6038      	str	r0, [r7, #0]
    43a6:	e002      	b.n	43ae <sched_after_mstr_free_slot_get+0xf2>
				TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US) +
				conn->hdr.ticks_slot;
		}
	}

	if (ticker_id_prev != 0xff) {
    43a8:	9b05      	ldr	r3, [sp, #20]
    43aa:	2bff      	cmp	r3, #255	; 0xff
    43ac:	d1ee      	bne.n	438c <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
						ticks_slot_prev_abs) +
			(RADIO_TICKER_JITTER_US << 1);
	}
}
    43ae:	b00f      	add	sp, #60	; 0x3c
    43b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43b2:	46c0      	nop			; (mov r8, r8)
    43b4:	00003a61 	.word	0x00003a61
    43b8:	200005f4 	.word	0x200005f4
    43bc:	1afd498d 	.word	0x1afd498d
    43c0:	3b9aca00 	.word	0x3b9aca00

000043c4 <sched_after_mstr_free_offset_get>:

static void sched_after_mstr_free_offset_get(u16_t conn_interval,
					     u32_t ticks_slot,
					     u32_t ticks_anchor,
					     u32_t *win_offset_us)
{
    43c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    43c6:	0005      	movs	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    43c8:	9201      	str	r2, [sp, #4]

	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    43ca:	2001      	movs	r0, #1

static void sched_after_mstr_free_offset_get(u16_t conn_interval,
					     u32_t ticks_slot,
					     u32_t ticks_anchor,
					     u32_t *win_offset_us)
{
    43cc:	0016      	movs	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;

	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    43ce:	3127      	adds	r1, #39	; 0x27
    43d0:	aa01      	add	r2, sp, #4

static void sched_after_mstr_free_offset_get(u16_t conn_interval,
					     u32_t ticks_slot,
					     u32_t ticks_anchor,
					     u32_t *win_offset_us)
{
    43d2:	001c      	movs	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;

	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    43d4:	f7ff ff72 	bl	42bc <sched_after_mstr_free_slot_get>
				       (TICKER_US_TO_TICKS(
						RADIO_TICKER_XTAL_OFFSET_US) +
					ticks_slot), &ticks_anchor_offset,
				       win_offset_us);

	if (ticks_anchor_offset != ticks_anchor) {
    43d8:	9801      	ldr	r0, [sp, #4]
    43da:	4286      	cmp	r6, r0
    43dc:	d00e      	beq.n	43fc <sched_after_mstr_free_offset_get+0x38>
		*win_offset_us +=
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
    43de:	0031      	movs	r1, r6
    43e0:	f7ff fb18 	bl	3a14 <ticker_ticks_diff_get>
						RADIO_TICKER_XTAL_OFFSET_US) +
					ticks_slot), &ticks_anchor_offset,
				       win_offset_us);

	if (ticks_anchor_offset != ticks_anchor) {
		*win_offset_us +=
    43e4:	4a0b      	ldr	r2, [pc, #44]	; (4414 <sched_after_mstr_free_offset_get+0x50>)
    43e6:	2307      	movs	r3, #7
    43e8:	2100      	movs	r1, #0
    43ea:	f7fc f86f 	bl	4cc <__aeabi_lmul>
    43ee:	2300      	movs	r3, #0
    43f0:	4a09      	ldr	r2, [pc, #36]	; (4418 <sched_after_mstr_free_offset_get+0x54>)
    43f2:	f7fc f84b 	bl	48c <__aeabi_uldivmod>
    43f6:	6823      	ldr	r3, [r4, #0]
    43f8:	1818      	adds	r0, r3, r0
    43fa:	6020      	str	r0, [r4, #0]
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
								 ticks_anchor));
	}

	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
    43fc:	6823      	ldr	r3, [r4, #0]
    43fe:	2b00      	cmp	r3, #0
    4400:	db07      	blt.n	4412 <sched_after_mstr_free_offset_get+0x4e>
		u32_t conn_interval_us = conn_interval * 1250;
    4402:	4806      	ldr	r0, [pc, #24]	; (441c <sched_after_mstr_free_offset_get+0x58>)
    4404:	4368      	muls	r0, r5

		while (*win_offset_us > conn_interval_us) {
    4406:	6823      	ldr	r3, [r4, #0]
    4408:	4298      	cmp	r0, r3
    440a:	d202      	bcs.n	4412 <sched_after_mstr_free_offset_get+0x4e>
			*win_offset_us -= conn_interval_us;
    440c:	1a1b      	subs	r3, r3, r0
    440e:	6023      	str	r3, [r4, #0]
    4410:	e7f9      	b.n	4406 <sched_after_mstr_free_offset_get+0x42>
		}
	}
}
    4412:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    4414:	1afd498d 	.word	0x1afd498d
    4418:	3b9aca00 	.word	0x3b9aca00
    441c:	000004e2 	.word	0x000004e2

00004420 <mayfly_sched_win_offset_use>:
					 (u32_t)params,
					 &_radio.scanner.win_offset_us);
}

static void mayfly_sched_win_offset_use(void *params)
{
    4420:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct connection *conn = (struct connection *)params;
	u16_t win_offset;

	sched_after_mstr_free_offset_get(conn->conn_interval,
    4422:	0003      	movs	r3, r0
					 (u32_t)params,
					 &_radio.scanner.win_offset_us);
}

static void mayfly_sched_win_offset_use(void *params)
{
    4424:	0004      	movs	r4, r0
	struct connection *conn = (struct connection *)params;
	u16_t win_offset;

	sched_after_mstr_free_offset_get(conn->conn_interval,
    4426:	337c      	adds	r3, #124	; 0x7c
    4428:	6f62      	ldr	r2, [r4, #116]	; 0x74
    442a:	68e1      	ldr	r1, [r4, #12]
    442c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    442e:	f7ff ffc9 	bl	43c4 <sched_after_mstr_free_offset_get>
				conn->hdr.ticks_slot,
				conn->llcp.connection_update.ticks_ref,
				&conn->llcp.connection_update.win_offset_us);

	win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    4432:	466b      	mov	r3, sp
    4434:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    4436:	4906      	ldr	r1, [pc, #24]	; (4450 <mayfly_sched_win_offset_use+0x30>)
    4438:	1d9d      	adds	r5, r3, #6
    443a:	f7fb feb1 	bl	1a0 <__aeabi_uidiv>
	memcpy(conn->llcp.connection_update.pdu_win_offset, &win_offset,
    443e:	3404      	adds	r4, #4
	sched_after_mstr_free_offset_get(conn->conn_interval,
				conn->hdr.ticks_slot,
				conn->llcp.connection_update.ticks_ref,
				&conn->llcp.connection_update.win_offset_us);

	win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    4440:	8028      	strh	r0, [r5, #0]
	memcpy(conn->llcp.connection_update.pdu_win_offset, &win_offset,
    4442:	0029      	movs	r1, r5
    4444:	2202      	movs	r2, #2
    4446:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    4448:	f7fc fd76 	bl	f38 <memcpy>
	       sizeof(u16_t));
}
    444c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    444e:	46c0      	nop			; (mov r8, r8)
    4450:	000004e2 	.word	0x000004e2

00004454 <rx_fc_lock>:

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
    4454:	b510      	push	{r4, lr}
	if (_radio.fc_req == _radio.fc_ack) {
    4456:	21fa      	movs	r1, #250	; 0xfa
    4458:	24f6      	movs	r4, #246	; 0xf6
    445a:	4b0b      	ldr	r3, [pc, #44]	; (4488 <rx_fc_lock+0x34>)
    445c:	0049      	lsls	r1, r1, #1
    445e:	34ff      	adds	r4, #255	; 0xff
    4460:	5c5a      	ldrb	r2, [r3, r1]
    4462:	5d1c      	ldrb	r4, [r3, r4]
    4464:	4294      	cmp	r4, r2
    4466:	d10d      	bne.n	4484 <rx_fc_lock+0x30>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    4468:	5c5a      	ldrb	r2, [r3, r1]
    446a:	32f4      	adds	r2, #244	; 0xf4
    446c:	0052      	lsls	r2, r2, #1
    446e:	189a      	adds	r2, r3, r2
    4470:	80d0      	strh	r0, [r2, #6]
		req = _radio.fc_req + 1;
    4472:	5c5a      	ldrb	r2, [r3, r1]
    4474:	3201      	adds	r2, #1
    4476:	b2d2      	uxtb	r2, r2
		if (req == TRIPLE_BUFFER_SIZE) {
    4478:	2a03      	cmp	r2, #3
    447a:	d100      	bne.n	447e <rx_fc_lock+0x2a>
			req = 0;
    447c:	2200      	movs	r2, #0
		}
		_radio.fc_req = req;
    447e:	21fa      	movs	r1, #250	; 0xfa
    4480:	0049      	lsls	r1, r1, #1
    4482:	545a      	strb	r2, [r3, r1]
	}
}
    4484:	bd10      	pop	{r4, pc}
    4486:	46c0      	nop			; (mov r8, r8)
    4488:	200005f4 	.word	0x200005f4

0000448c <ticker_job_disable>:
	DEBUG_RADIO_ISR(0);
}

#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
static void ticker_job_disable(u32_t status, void *op_context)
{
    448c:	b510      	push	{r4, lr}
	ARG_UNUSED(status);
	ARG_UNUSED(op_context);

	if (_radio.state != STATE_NONE) {
    448e:	4b05      	ldr	r3, [pc, #20]	; (44a4 <ticker_job_disable+0x18>)
    4490:	7c1b      	ldrb	r3, [r3, #16]
    4492:	2b00      	cmp	r3, #0
    4494:	d004      	beq.n	44a0 <ticker_job_disable+0x14>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4496:	2101      	movs	r1, #1
    4498:	2200      	movs	r2, #0
    449a:	0008      	movs	r0, r1
    449c:	f7fd fe3e 	bl	211c <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);
	}
}
    44a0:	bd10      	pop	{r4, pc}
    44a2:	46c0      	nop			; (mov r8, r8)
    44a4:	200005f4 	.word	0x200005f4

000044a8 <mayfly_xtal_retain.part.10>:
				{0, 0, s_link[1], NULL, mayfly_xtal_stop}
			};
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;
    44a8:	2200      	movs	r2, #0
    44aa:	4b09      	ldr	r3, [pc, #36]	; (44d0 <mayfly_xtal_retain.part.10+0x28>)

	DEBUG_RADIO_CLOSE(0);
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    44ac:	b510      	push	{r4, lr}
				{0, 0, s_link[1], NULL, mayfly_xtal_stop}
			};
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;
    44ae:	701a      	strb	r2, [r3, #0]
    44b0:	4b08      	ldr	r3, [pc, #32]	; (44d4 <mayfly_xtal_retain.part.10+0x2c>)

			switch (caller_id) {
    44b2:	4290      	cmp	r0, r2
    44b4:	d002      	beq.n	44bc <mayfly_xtal_retain.part.10+0x14>
    44b6:	2801      	cmp	r0, #1
    44b8:	d106      	bne.n	44c8 <mayfly_xtal_retain.part.10+0x20>
			case RADIO_TICKER_USER_ID_WORKER:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
				break;

			case RADIO_TICKER_USER_ID_JOB:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    44ba:	3310      	adds	r3, #16
			default:
				LL_ASSERT(0);
				break;
			}

			retval = mayfly_enqueue(caller_id,
    44bc:	2200      	movs	r2, #0
    44be:	0011      	movs	r1, r2
    44c0:	f7fd fe4c 	bl	215c <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						p_mfy_xtal_stop);
			LL_ASSERT(!retval);
    44c4:	2800      	cmp	r0, #0
    44c6:	d002      	beq.n	44ce <mayfly_xtal_retain.part.10+0x26>
    44c8:	b662      	cpsie	i
    44ca:	2004      	movs	r0, #4
    44cc:	df02      	svc	2
		}
	}
}
    44ce:	bd10      	pop	{r4, pc}
    44d0:	20000a1d 	.word	0x20000a1d
    44d4:	20000208 	.word	0x20000208

000044d8 <rx_packet_set>:

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    44d8:	b570      	push	{r4, r5, r6, lr}
    44da:	000d      	movs	r5, r1
	phy = conn->phy_rx;
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    44dc:	2100      	movs	r1, #0

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    44de:	0004      	movs	r4, r0
	phy = conn->phy_rx;
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    44e0:	0008      	movs	r0, r1
    44e2:	f7fe f885 	bl	25f0 <radio_phy_set>

	if (conn->enc_rx) {
    44e6:	0023      	movs	r3, r4
    44e8:	33a4      	adds	r3, #164	; 0xa4
    44ea:	781b      	ldrb	r3, [r3, #0]
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    44ec:	2201      	movs	r2, #1
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);

	if (conn->enc_rx) {
    44ee:	06db      	lsls	r3, r3, #27
    44f0:	d509      	bpl.n	4506 <rx_packet_set+0x2e>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    44f2:	211f      	movs	r1, #31
    44f4:	2008      	movs	r0, #8
    44f6:	f7fe f8bd 	bl	2674 <radio_pkt_configure>

		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx,
    44fa:	0020      	movs	r0, r4
    44fc:	0029      	movs	r1, r5
    44fe:	30a5      	adds	r0, #165	; 0xa5
    4500:	f7fe fad2 	bl	2aa8 <radio_ccm_rx_pkt_set>
    4504:	e004      	b.n	4510 <rx_packet_set+0x38>
						      pdu_data_rx));
	} else {
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    4506:	2008      	movs	r0, #8
    4508:	211b      	movs	r1, #27
    450a:	f7fe f8b3 	bl	2674 <radio_pkt_configure>

		radio_pkt_rx_set(pdu_data_rx);
    450e:	0028      	movs	r0, r5
    4510:	f7fe f8ce 	bl	26b0 <radio_pkt_rx_set>
	}
}
    4514:	bd70      	pop	{r4, r5, r6, pc}

00004516 <tx_packet_set>:

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    4516:	b570      	push	{r4, r5, r6, lr}
    4518:	000d      	movs	r5, r1
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);
    451a:	2100      	movs	r1, #0
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    451c:	0004      	movs	r4, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);
    451e:	0008      	movs	r0, r1
    4520:	f7fe f866 	bl	25f0 <radio_phy_set>

	if (conn->enc_tx) {
    4524:	0023      	movs	r3, r4
    4526:	33a4      	adds	r3, #164	; 0xa4
    4528:	781b      	ldrb	r3, [r3, #0]
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    452a:	2201      	movs	r2, #1
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);

	if (conn->enc_tx) {
    452c:	069b      	lsls	r3, r3, #26
    452e:	d509      	bpl.n	4544 <tx_packet_set+0x2e>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    4530:	211f      	movs	r1, #31
    4532:	2008      	movs	r0, #8
    4534:	f7fe f89e 	bl	2674 <radio_pkt_configure>

		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    4538:	0020      	movs	r0, r4
    453a:	0029      	movs	r1, r5
    453c:	30c6      	adds	r0, #198	; 0xc6
    453e:	f7fe faf1 	bl	2b24 <radio_ccm_tx_pkt_set>
    4542:	e004      	b.n	454e <tx_packet_set+0x38>
						      pdu_data_tx));
	} else {
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    4544:	2008      	movs	r0, #8
    4546:	211b      	movs	r1, #27
    4548:	f7fe f894 	bl	2674 <radio_pkt_configure>

		radio_pkt_tx_set(pdu_data_tx);
    454c:	0028      	movs	r0, r5
    454e:	f7fe f8b7 	bl	26c0 <radio_pkt_tx_set>
	}
}
    4552:	bd70      	pop	{r4, r5, r6, pc}

00004554 <chan_set.part.18>:
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	LL_ASSERT(!_radio.ticker_id_prepare);
    4554:	b662      	cpsie	i
    4556:	2004      	movs	r0, #4
    4558:	df02      	svc	2
	...

0000455c <prepare_normal_set>:
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    455c:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    455e:	6803      	ldr	r3, [r0, #0]
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    4560:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    4562:	2b00      	cmp	r3, #0
    4564:	da19      	bge.n	459a <prepare_normal_set+0x3e>
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    4566:	6845      	ldr	r5, [r0, #4]
    4568:	6884      	ldr	r4, [r0, #8]
    456a:	005b      	lsls	r3, r3, #1
    456c:	085b      	lsrs	r3, r3, #1
    456e:	42ac      	cmp	r4, r5
    4570:	d200      	bcs.n	4574 <prepare_normal_set+0x18>
    4572:	002c      	movs	r4, r5
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    4574:	9006      	str	r0, [sp, #24]
    4576:	480a      	ldr	r0, [pc, #40]	; (45a0 <prepare_normal_set+0x44>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    4578:	1b1b      	subs	r3, r3, r4
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    457a:	9005      	str	r0, [sp, #20]
    457c:	2000      	movs	r0, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    457e:	b29b      	uxth	r3, r3
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    4580:	9301      	str	r3, [sp, #4]
    4582:	9300      	str	r3, [sp, #0]
    4584:	9004      	str	r0, [sp, #16]
    4586:	0003      	movs	r3, r0
    4588:	9003      	str	r0, [sp, #12]
    458a:	9002      	str	r0, [sp, #8]
    458c:	f7ff f952 	bl	3834 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      ticker_user_id,
				      ticker_id, 0, ticks_drift_minus,
				      ticks_drift_minus, 0, 0, 0,
				      prepare_normal, hdr);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4590:	2302      	movs	r3, #2
    4592:	4398      	bics	r0, r3
    4594:	d001      	beq.n	459a <prepare_normal_set+0x3e>
    4596:	f7ff ffdd 	bl	4554 <chan_set.part.18>
			  (ticker_status == TICKER_STATUS_BUSY));
	}
}
    459a:	b009      	add	sp, #36	; 0x24
    459c:	bd30      	pop	{r4, r5, pc}
    459e:	46c0      	nop			; (mov r8, r8)
    45a0:	00003a75 	.word	0x00003a75

000045a4 <terminate_ind_rx_enqueue>:
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    45a4:	0003      	movs	r3, r0
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    45a6:	b510      	push	{r4, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    45a8:	3398      	adds	r3, #152	; 0x98
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    45aa:	000a      	movs	r2, r1
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
    45ac:	6819      	ldr	r1, [r3, #0]
    45ae:	2900      	cmp	r1, #0
    45b0:	d101      	bne.n	45b6 <terminate_ind_rx_enqueue+0x12>
    45b2:	f7ff ffcf 	bl	4554 <chan_set.part.18>

	radio_pdu_node_rx->hdr.handle = conn->handle;
    45b6:	8c00      	ldrh	r0, [r0, #32]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
    45b8:	721a      	strb	r2, [r3, #8]
	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
    45ba:	80d8      	strh	r0, [r3, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    45bc:	2007      	movs	r0, #7

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    45be:	4a09      	ldr	r2, [pc, #36]	; (45e4 <terminate_ind_rx_enqueue+0x40>)
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    45c0:	7118      	strb	r0, [r3, #4]

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    45c2:	30e6      	adds	r0, #230	; 0xe6
    45c4:	30ff      	adds	r0, #255	; 0xff
    45c6:	5c10      	ldrb	r0, [r2, r0]

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    45c8:	32c5      	adds	r2, #197	; 0xc5
	link = radio_pdu_node_rx->hdr.onion.link;

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    45ca:	7018      	strb	r0, [r3, #0]
	    _radio.packet_release_last;

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    45cc:	32ff      	adds	r2, #255	; 0xff
    45ce:	0018      	movs	r0, r3
    45d0:	f7fd ff19 	bl	2406 <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    45d4:	2800      	cmp	r0, #0
    45d6:	d102      	bne.n	45de <terminate_ind_rx_enqueue+0x3a>
    45d8:	b662      	cpsie	i
    45da:	2004      	movs	r0, #4
    45dc:	df02      	svc	2
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    45de:	f003 fd57 	bl	8090 <radio_event_callback>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);

	/* callback to trigger application action */
	packet_rx_callback();
}
    45e2:	bd10      	pop	{r4, pc}
    45e4:	200005f4 	.word	0x200005f4

000045e8 <packet_rx_enqueue>:
		       &s_mfy_callback);
#endif
}

static void packet_rx_enqueue(void)
{
    45e8:	b570      	push	{r4, r5, r6, lr}
	void *link;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	u8_t last;

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    45ea:	21db      	movs	r1, #219	; 0xdb
    45ec:	24b6      	movs	r4, #182	; 0xb6
    45ee:	4a15      	ldr	r2, [pc, #84]	; (4644 <packet_rx_enqueue+0x5c>)
    45f0:	34ff      	adds	r4, #255	; 0xff
    45f2:	0049      	lsls	r1, r1, #1
    45f4:	5d13      	ldrb	r3, [r2, r4]
    45f6:	5c51      	ldrb	r1, [r2, r1]
    45f8:	4299      	cmp	r1, r3
    45fa:	d101      	bne.n	4600 <packet_rx_enqueue+0x18>
    45fc:	f7ff ffaa 	bl	4554 <chan_set.part.18>

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    4600:	21d8      	movs	r1, #216	; 0xd8
    4602:	5d13      	ldrb	r3, [r2, r4]
    4604:	0049      	lsls	r1, r1, #1
    4606:	5851      	ldr	r1, [r2, r1]
    4608:	009b      	lsls	r3, r3, #2
    460a:	5858      	ldr	r0, [r3, r1]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    460c:	23f6      	movs	r3, #246	; 0xf6

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
	if (last == _radio.packet_rx_count) {
    460e:	25da      	movs	r5, #218	; 0xda

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    4610:	005b      	lsls	r3, r3, #1
    4612:	5cd3      	ldrb	r3, [r2, r3]

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	link = radio_pdu_node_rx->hdr.onion.link;
    4614:	6801      	ldr	r1, [r0, #0]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    4616:	7003      	strb	r3, [r0, #0]
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    4618:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_rx_count) {
    461a:	006d      	lsls	r5, r5, #1
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    461c:	3301      	adds	r3, #1
	if (last == _radio.packet_rx_count) {
    461e:	5d55      	ldrb	r5, [r2, r5]
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    4620:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
    4622:	429d      	cmp	r5, r3
    4624:	d100      	bne.n	4628 <packet_rx_enqueue+0x40>
		last = 0;
    4626:	2300      	movs	r3, #0
	}
	_radio.packet_rx_last = last;
    4628:	5513      	strb	r3, [r2, r4]

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    462a:	32c5      	adds	r2, #197	; 0xc5
    462c:	32ff      	adds	r2, #255	; 0xff
    462e:	f7fd feea 	bl	2406 <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    4632:	2800      	cmp	r0, #0
    4634:	d102      	bne.n	463c <packet_rx_enqueue+0x54>
    4636:	b662      	cpsie	i
    4638:	2004      	movs	r0, #4
    463a:	df02      	svc	2
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    463c:	f003 fd28 	bl	8090 <radio_event_callback>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);

	/* callback to trigger application action */
	packet_rx_callback();
}
    4640:	bd70      	pop	{r4, r5, r6, pc}
    4642:	46c0      	nop			; (mov r8, r8)
    4644:	200005f4 	.word	0x200005f4

00004648 <isr_rx_scan_report>:

	return 1;
}

static u32_t isr_rx_scan_report(u8_t rssi_ready)
{
    4648:	b570      	push	{r4, r5, r6, lr}
    464a:	0004      	movs	r4, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
    464c:	2003      	movs	r0, #3
    464e:	f7ff fa33 	bl	3ab8 <packet_rx_reserve_get>
	if (radio_pdu_node_rx == 0) {
    4652:	2800      	cmp	r0, #0
    4654:	d025      	beq.n	46a2 <isr_rx_scan_report+0x5a>
		return 1;
	}

	/* Prepare the report (adv or scan resp) */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    4656:	2301      	movs	r3, #1
    4658:	425b      	negs	r3, r3
    465a:	80c3      	strh	r3, [r0, #6]
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
    465c:	235e      	movs	r3, #94	; 0x5e
    465e:	4a12      	ldr	r2, [pc, #72]	; (46a8 <isr_rx_scan_report+0x60>)
    4660:	33ff      	adds	r3, #255	; 0xff
    4662:	5cd3      	ldrb	r3, [r2, r3]
    4664:	075a      	lsls	r2, r3, #29
    4666:	d00b      	beq.n	4680 <isr_rx_scan_report+0x38>
		switch (_radio.scanner.phy) {
    4668:	075b      	lsls	r3, r3, #29
    466a:	0f5b      	lsrs	r3, r3, #29
    466c:	b2da      	uxtb	r2, r3
    466e:	2a01      	cmp	r2, #1
    4670:	d004      	beq.n	467c <isr_rx_scan_report+0x34>
    4672:	2a04      	cmp	r2, #4
    4674:	d005      	beq.n	4682 <isr_rx_scan_report+0x3a>
			radio_pdu_node_rx->hdr.type =
				NODE_RX_TYPE_EXT_CODED_REPORT;
			break;

		default:
			LL_ASSERT(0);
    4676:	b662      	cpsie	i
    4678:	2004      	movs	r0, #4
    467a:	df02      	svc	2
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
		switch (_radio.scanner.phy) {
		case BIT(0):
			radio_pdu_node_rx->hdr.type =
    467c:	2303      	movs	r3, #3
    467e:	e000      	b.n	4682 <isr_rx_scan_report+0x3a>
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    4680:	2302      	movs	r3, #2
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    4682:	7a45      	ldrb	r5, [r0, #9]
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    4684:	7103      	strb	r3, [r0, #4]
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    4686:	1940      	adds	r0, r0, r5
    4688:	300a      	adds	r0, #10
    468a:	0005      	movs	r5, r0
    468c:	267f      	movs	r6, #127	; 0x7f
			     pdu_adv_rx->len] =
    468e:	2c00      	cmp	r4, #0
    4690:	d002      	beq.n	4698 <isr_rx_scan_report+0x50>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    4692:	f7fe f8a7 	bl	27e4 <radio_rssi_get>
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			     pdu_adv_rx->len] =
    4696:	4006      	ands	r6, r0
    4698:	702e      	strb	r6, [r5, #0]
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();
    469a:	f7ff ffa5 	bl	45e8 <packet_rx_enqueue>

	return 0;
    469e:	2000      	movs	r0, #0
    46a0:	e000      	b.n	46a4 <isr_rx_scan_report+0x5c>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
	if (radio_pdu_node_rx == 0) {
		return 1;
    46a2:	2001      	movs	r0, #1
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();

	return 0;
}
    46a4:	bd70      	pop	{r4, r5, r6, pc}
    46a6:	46c0      	nop			; (mov r8, r8)
    46a8:	200005f4 	.word	0x200005f4

000046ac <chan_set>:
}
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
    46ac:	b510      	push	{r4, lr}
    46ae:	0004      	movs	r4, r0
	switch (chan) {
    46b0:	2826      	cmp	r0, #38	; 0x26
    46b2:	d005      	beq.n	46c0 <chan_set+0x14>
    46b4:	2827      	cmp	r0, #39	; 0x27
    46b6:	d005      	beq.n	46c4 <chan_set+0x18>
	case 37:
		radio_freq_chan_set(2);
    46b8:	2002      	movs	r0, #2
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
	switch (chan) {
    46ba:	2c25      	cmp	r4, #37	; 0x25
    46bc:	d104      	bne.n	46c8 <chan_set+0x1c>
    46be:	e007      	b.n	46d0 <chan_set+0x24>
	case 37:
		radio_freq_chan_set(2);
		break;

	case 38:
		radio_freq_chan_set(26);
    46c0:	201a      	movs	r0, #26
    46c2:	e005      	b.n	46d0 <chan_set+0x24>
		break;

	case 39:
		radio_freq_chan_set(80);
    46c4:	2050      	movs	r0, #80	; 0x50
    46c6:	e003      	b.n	46d0 <chan_set+0x24>
		break;

	default:
		if (chan < 11) {
    46c8:	2c0a      	cmp	r4, #10
    46ca:	d807      	bhi.n	46dc <chan_set+0x30>
			radio_freq_chan_set(4 + (2 * chan));
    46cc:	1ca0      	adds	r0, r4, #2
    46ce:	0040      	lsls	r0, r0, #1
    46d0:	f7fd ffa2 	bl	2618 <radio_freq_chan_set>
			LL_ASSERT(0);
		}
		break;
	}

	radio_whiten_iv_set(chan);
    46d4:	0020      	movs	r0, r4
    46d6:	f7fd ffa7 	bl	2628 <radio_whiten_iv_set>
}
    46da:	bd10      	pop	{r4, pc}

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    46dc:	1ce0      	adds	r0, r4, #3
		break;

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
    46de:	2c27      	cmp	r4, #39	; 0x27
    46e0:	d9f5      	bls.n	46ce <chan_set+0x22>
    46e2:	f7ff ff37 	bl	4554 <chan_set.part.18>
	...

000046e8 <adv_setup>:

	DEBUG_RADIO_PREPARE_A(0);
}

static void adv_setup(void)
{
    46e8:	b570      	push	{r4, r5, r6, lr}
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    46ea:	4c2c      	ldr	r4, [pc, #176]	; (479c <adv_setup+0xb4>)
    46ec:	0023      	movs	r3, r4
	    _radio.advertiser.adv_data.last) {
    46ee:	0022      	movs	r2, r4
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    46f0:	33f4      	adds	r3, #244	; 0xf4
	    _radio.advertiser.adv_data.last) {
    46f2:	32f5      	adds	r2, #245	; 0xf5
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    46f4:	781b      	ldrb	r3, [r3, #0]
    46f6:	7812      	ldrb	r2, [r2, #0]
    46f8:	429a      	cmp	r2, r3
    46fa:	d007      	beq.n	470c <adv_setup+0x24>
	    _radio.advertiser.adv_data.last) {
		u8_t first;

		first = _radio.advertiser.adv_data.first + 1;
    46fc:	3301      	adds	r3, #1
    46fe:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    4700:	2b02      	cmp	r3, #2
    4702:	d100      	bne.n	4706 <adv_setup+0x1e>
			first = 0;
    4704:	2300      	movs	r3, #0
		}
		_radio.advertiser.adv_data.first = first;
    4706:	0022      	movs	r2, r4
    4708:	32f4      	adds	r2, #244	; 0xf4
    470a:	7013      	strb	r3, [r2, #0]
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    470c:	22a2      	movs	r2, #162	; 0xa2
	    advertiser.scan_data.last) {
    470e:	2146      	movs	r1, #70	; 0x46
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    4710:	0052      	lsls	r2, r2, #1
	    advertiser.scan_data.last) {
    4712:	31ff      	adds	r1, #255	; 0xff
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    4714:	5ca3      	ldrb	r3, [r4, r2]
    4716:	5c61      	ldrb	r1, [r4, r1]
    4718:	4299      	cmp	r1, r3
    471a:	d005      	beq.n	4728 <adv_setup+0x40>
	    advertiser.scan_data.last) {
		u8_t first;

		first = _radio.advertiser.scan_data.first + 1;
    471c:	3301      	adds	r3, #1
    471e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    4720:	2b02      	cmp	r3, #2
    4722:	d100      	bne.n	4726 <adv_setup+0x3e>
			first = 0;
    4724:	2300      	movs	r3, #0
		}
		_radio.advertiser.scan_data.first = first;
    4726:	54a3      	strb	r3, [r4, r2]
		upd = 1;
	}

	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
    4728:	0023      	movs	r3, r4
    472a:	33f4      	adds	r3, #244	; 0xf4
		}
		_radio.advertiser.scan_data.first = first;
		upd = 1;
	}

	pdu = (struct pdu_adv *)
    472c:	781d      	ldrb	r5, [r3, #0]
    472e:	2327      	movs	r3, #39	; 0x27
    4730:	435d      	muls	r5, r3
    4732:	35a0      	adds	r5, #160	; 0xa0
    4734:	1965      	adds	r5, r4, r5
    4736:	1da8      	adds	r0, r5, #6
		       &pdu->payload.adv_ind.addr[0], BDADDR_SIZE);
	}
#else
	ARG_UNUSED(upd);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
    4738:	f7fd ffc2 	bl	26c0 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    473c:	230f      	movs	r3, #15
    473e:	79aa      	ldrb	r2, [r5, #6]
    4740:	4013      	ands	r3, r2
    4742:	2b02      	cmp	r3, #2
    4744:	d00a      	beq.n	475c <adv_setup+0x74>
    4746:	2b07      	cmp	r3, #7
    4748:	d008      	beq.n	475c <adv_setup+0x74>
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    474a:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    474c:	2096      	movs	r0, #150	; 0x96
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    474e:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    4750:	f7fe f8c0 	bl	28d4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    4754:	2000      	movs	r0, #0
    4756:	f7fe f821 	bl	279c <radio_switch_complete_and_rx>
    475a:	e003      	b.n	4764 <adv_setup+0x7c>
	} else {
		_radio.state = STATE_CLOSE;
    475c:	2303      	movs	r3, #3
    475e:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    4760:	f7fe f82c 	bl	27bc <radio_switch_complete_and_disable>
	}

	bitmap = _radio.advertiser.chl_map_current;
    4764:	0023      	movs	r3, r4
    4766:	33a4      	adds	r3, #164	; 0xa4
    4768:	781b      	ldrb	r3, [r3, #0]
	chan = 0;
    476a:	2000      	movs	r0, #0
	} else {
		_radio.state = STATE_CLOSE;
		radio_switch_complete_and_disable();
	}

	bitmap = _radio.advertiser.chl_map_current;
    476c:	071b      	lsls	r3, r3, #28
    476e:	0f5b      	lsrs	r3, r3, #29
    4770:	b2da      	uxtb	r2, r3
    4772:	0011      	movs	r1, r2
	chan = 0;
	while ((bitmap & 0x01) == 0) {
    4774:	2501      	movs	r5, #1
    4776:	4229      	tst	r1, r5
    4778:	d103      	bne.n	4782 <adv_setup+0x9a>
		chan++;
    477a:	3001      	adds	r0, #1
    477c:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
    477e:	0849      	lsrs	r1, r1, #1
    4780:	e7f9      	b.n	4776 <adv_setup+0x8e>
	}
	_radio.advertiser.chl_map_current &=
    4782:	210e      	movs	r1, #14
    4784:	3207      	adds	r2, #7
    4786:	34a4      	adds	r4, #164	; 0xa4
    4788:	4013      	ands	r3, r2
    478a:	005a      	lsls	r2, r3, #1
    478c:	7823      	ldrb	r3, [r4, #0]
		(_radio.advertiser.chl_map_current - 1);

	chan_set(37 + chan);
    478e:	3025      	adds	r0, #37	; 0x25
	chan = 0;
	while ((bitmap & 0x01) == 0) {
		chan++;
		bitmap >>= 1;
	}
	_radio.advertiser.chl_map_current &=
    4790:	438b      	bics	r3, r1
    4792:	4313      	orrs	r3, r2
    4794:	7023      	strb	r3, [r4, #0]
		(_radio.advertiser.chl_map_current - 1);

	chan_set(37 + chan);
    4796:	f7ff ff89 	bl	46ac <chan_set>
}
    479a:	bd70      	pop	{r4, r5, r6, pc}
    479c:	200005f4 	.word	0x200005f4

000047a0 <pdu_node_tx_release>:
	}
}

static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
    47a0:	b570      	push	{r4, r5, r6, lr}
	u8_t last;

	last = _radio.packet_release_last + 1;
    47a2:	24f6      	movs	r4, #246	; 0xf6
	if (last == _radio.packet_tx_count) {
    47a4:	25f4      	movs	r5, #244	; 0xf4
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    47a6:	4b0f      	ldr	r3, [pc, #60]	; (47e4 <pdu_node_tx_release+0x44>)
    47a8:	0064      	lsls	r4, r4, #1
    47aa:	5d1a      	ldrb	r2, [r3, r4]
	if (last == _radio.packet_tx_count) {
    47ac:	006d      	lsls	r5, r5, #1
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    47ae:	3201      	adds	r2, #1
	if (last == _radio.packet_tx_count) {
    47b0:	5d5d      	ldrb	r5, [r3, r5]
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    47b2:	b2d2      	uxtb	r2, r2
	if (last == _radio.packet_tx_count) {
    47b4:	4295      	cmp	r5, r2
    47b6:	d100      	bne.n	47ba <pdu_node_tx_release+0x1a>
		last = 0;
    47b8:	2200      	movs	r2, #0
	}

	LL_ASSERT(last != _radio.packet_release_first);
    47ba:	25ec      	movs	r5, #236	; 0xec
    47bc:	35ff      	adds	r5, #255	; 0xff
    47be:	5d5d      	ldrb	r5, [r3, r5]
    47c0:	4295      	cmp	r5, r2
    47c2:	d101      	bne.n	47c8 <pdu_node_tx_release+0x28>
    47c4:	f7ff fec6 	bl	4554 <chan_set.part.18>

	/* Enqueue app mem for release */
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    47c8:	25f2      	movs	r5, #242	; 0xf2
    47ca:	006d      	lsls	r5, r5, #1
    47cc:	595e      	ldr	r6, [r3, r5]
    47ce:	5d1d      	ldrb	r5, [r3, r4]
    47d0:	00ed      	lsls	r5, r5, #3
    47d2:	53a8      	strh	r0, [r5, r6]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    47d4:	5d18      	ldrb	r0, [r3, r4]
    47d6:	00c0      	lsls	r0, r0, #3
    47d8:	1830      	adds	r0, r6, r0
    47da:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
    47dc:	551a      	strb	r2, [r3, r4]
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    47de:	f003 fc57 	bl	8090 <radio_event_callback>
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
	_radio.packet_release_last = last;

	/* callback to trigger application action */
	packet_rx_callback();
}
    47e2:	bd70      	pop	{r4, r5, r6, pc}
    47e4:	200005f4 	.word	0x200005f4

000047e8 <packet_tx_enqueue>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void packet_tx_enqueue(u8_t max)
{
    47e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    47ea:	9000      	str	r0, [sp, #0]
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    47ec:	9b00      	ldr	r3, [sp, #0]
    47ee:	2b00      	cmp	r3, #0
    47f0:	d048      	beq.n	4884 <packet_tx_enqueue+0x9c>
    47f2:	27ea      	movs	r7, #234	; 0xea
    47f4:	22f5      	movs	r2, #245	; 0xf5
    47f6:	4c24      	ldr	r4, [pc, #144]	; (4888 <packet_tx_enqueue+0xa0>)
    47f8:	37ff      	adds	r7, #255	; 0xff
    47fa:	0052      	lsls	r2, r2, #1
    47fc:	5de3      	ldrb	r3, [r4, r7]
    47fe:	5ca2      	ldrb	r2, [r4, r2]
    4800:	429a      	cmp	r2, r3
    4802:	d03f      	beq.n	4884 <packet_tx_enqueue+0x9c>
		struct pdu_data_q_tx *pdu_data_q_tx;
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4804:	23f0      	movs	r3, #240	; 0xf0
    4806:	5de6      	ldrb	r6, [r4, r7]
    4808:	005b      	lsls	r3, r3, #1
    480a:	58e3      	ldr	r3, [r4, r3]
    480c:	00f6      	lsls	r6, r6, #3
    480e:	199e      	adds	r6, r3, r6
    4810:	9301      	str	r3, [sp, #4]
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    4812:	2300      	movs	r3, #0
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
    4814:	6875      	ldr	r5, [r6, #4]
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4816:	8832      	ldrh	r2, [r6, #0]
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    4818:	602b      	str	r3, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    481a:	3385      	adds	r3, #133	; 0x85
    481c:	33ff      	adds	r3, #255	; 0xff
    481e:	58e0      	ldr	r0, [r4, r3]
    4820:	21fc      	movs	r1, #252	; 0xfc
    4822:	f7fd fdd2 	bl	23ca <mem_get>
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
    4826:	8833      	ldrh	r3, [r6, #0]
    4828:	8c02      	ldrh	r2, [r0, #32]
    482a:	429a      	cmp	r2, r3
    482c:	d113      	bne.n	4856 <packet_tx_enqueue+0x6e>
			if (conn->pkt_tx_data == 0) {
    482e:	0002      	movs	r2, r0
    4830:	0003      	movs	r3, r0
    4832:	32f0      	adds	r2, #240	; 0xf0
    4834:	6811      	ldr	r1, [r2, #0]
    4836:	33f4      	adds	r3, #244	; 0xf4
    4838:	2900      	cmp	r1, #0
    483a:	d106      	bne.n	484a <packet_tx_enqueue+0x62>
				conn->pkt_tx_data = node_tx_new;

				if (conn->pkt_tx_head == 0) {
    483c:	30e8      	adds	r0, #232	; 0xe8
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
			if (conn->pkt_tx_data == 0) {
				conn->pkt_tx_data = node_tx_new;
    483e:	6015      	str	r5, [r2, #0]

				if (conn->pkt_tx_head == 0) {
    4840:	6802      	ldr	r2, [r0, #0]
    4842:	2a00      	cmp	r2, #0
    4844:	d101      	bne.n	484a <packet_tx_enqueue+0x62>
					conn->pkt_tx_head = node_tx_new;
    4846:	6005      	str	r5, [r0, #0]
					conn->pkt_tx_last = NULL;
    4848:	601a      	str	r2, [r3, #0]
				}
			}

			if (conn->pkt_tx_last) {
    484a:	681a      	ldr	r2, [r3, #0]
    484c:	2a00      	cmp	r2, #0
    484e:	d000      	beq.n	4852 <packet_tx_enqueue+0x6a>
				conn->pkt_tx_last->next = node_tx_new;
    4850:	6015      	str	r5, [r2, #0]
			}

			conn->pkt_tx_last = node_tx_new;
    4852:	601d      	str	r5, [r3, #0]
    4854:	e007      	b.n	4866 <packet_tx_enqueue+0x7e>
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4856:	2203      	movs	r2, #3
    4858:	792b      	ldrb	r3, [r5, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    485a:	0029      	movs	r1, r5
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    485c:	4393      	bics	r3, r2
    485e:	712b      	strb	r3, [r5, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    4860:	8830      	ldrh	r0, [r6, #0]
    4862:	f7ff ff9d 	bl	47a0 <pdu_node_tx_release>
		}

		first = _radio.packet_tx_first + 1;
		if (first == _radio.packet_tx_count) {
    4866:	22f4      	movs	r2, #244	; 0xf4
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    4868:	5de3      	ldrb	r3, [r4, r7]
		if (first == _radio.packet_tx_count) {
    486a:	0052      	lsls	r2, r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    486c:	3301      	adds	r3, #1
		if (first == _radio.packet_tx_count) {
    486e:	5ca2      	ldrb	r2, [r4, r2]
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    4870:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
    4872:	429a      	cmp	r2, r3
    4874:	d100      	bne.n	4878 <packet_tx_enqueue+0x90>
			first = 0;
    4876:	2300      	movs	r3, #0
		}
		_radio.packet_tx_first = first;
    4878:	55e3      	strb	r3, [r4, r7]
    487a:	9f00      	ldr	r7, [sp, #0]
    487c:	3f01      	subs	r7, #1
    487e:	b2fb      	uxtb	r3, r7
    4880:	9300      	str	r3, [sp, #0]
    4882:	e7b3      	b.n	47ec <packet_tx_enqueue+0x4>
	}
}
    4884:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	200005f4 	.word	0x200005f4

0000488c <connection_release>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    488c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    488e:	2201      	movs	r2, #1
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    4890:	0004      	movs	r4, r0
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    4892:	0011      	movs	r1, r2
    4894:	2000      	movs	r0, #0
    4896:	f7fd fc41 	bl	211c <mayfly_enable>
	/** @todo correctly stop tickers ensuring crystal and radio active are
	 * placed in right states
	 */

	/* Stop Master/Slave role ticker */
	ticker_status =
    489a:	2100      	movs	r1, #0
    489c:	8c22      	ldrh	r2, [r4, #32]
    489e:	4f38      	ldr	r7, [pc, #224]	; (4980 <connection_release+0xf4>)
    48a0:	4b38      	ldr	r3, [pc, #224]	; (4984 <connection_release+0xf8>)
    48a2:	3207      	adds	r2, #7
    48a4:	9300      	str	r3, [sp, #0]
    48a6:	b2d2      	uxtb	r2, r2
    48a8:	003b      	movs	r3, r7
    48aa:	0008      	movs	r0, r1
    48ac:	f7ff f812 	bl	38d4 <ticker_stop>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    48b0:	2502      	movs	r5, #2
    48b2:	43a8      	bics	r0, r5
    48b4:	d11b      	bne.n	48ee <connection_release+0x62>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    48b6:	4b34      	ldr	r3, [pc, #208]	; (4988 <connection_release+0xfc>)
    48b8:	7c1a      	ldrb	r2, [r3, #16]
    48ba:	001e      	movs	r6, r3
    48bc:	2a05      	cmp	r2, #5
    48be:	d128      	bne.n	4912 <connection_release+0x86>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    48c0:	7b1a      	ldrb	r2, [r3, #12]
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    48c2:	8c23      	ldrh	r3, [r4, #32]
    48c4:	3307      	adds	r3, #7
    48c6:	429a      	cmp	r2, r3
    48c8:	d123      	bne.n	4912 <connection_release+0x86>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
					  conn->handle))) {
		ticker_status =
    48ca:	4b30      	ldr	r3, [pc, #192]	; (498c <connection_release+0x100>)
    48cc:	2201      	movs	r2, #1
    48ce:	9300      	str	r3, [sp, #0]
    48d0:	0001      	movs	r1, r0
    48d2:	003b      	movs	r3, r7
    48d4:	f7fe fffe 	bl	38d4 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_MARKER_0,
				    ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    48d8:	43a8      	bics	r0, r5
    48da:	d108      	bne.n	48ee <connection_release+0x62>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    48dc:	4b2c      	ldr	r3, [pc, #176]	; (4990 <connection_release+0x104>)
    48de:	0002      	movs	r2, r0
    48e0:	9300      	str	r3, [sp, #0]
    48e2:	0001      	movs	r1, r0
    48e4:	003b      	movs	r3, r7
    48e6:	f7fe fff5 	bl	38d4 <ticker_stop>
		    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_ID_EVENT,
				ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    48ea:	43a8      	bics	r0, r5
    48ec:	d011      	beq.n	4912 <connection_release+0x86>
    48ee:	b662      	cpsie	i
    48f0:	2004      	movs	r0, #4
    48f2:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
    48f4:	0023      	movs	r3, r4
    48f6:	33f0      	adds	r3, #240	; 0xf0
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    48f8:	681b      	ldr	r3, [r3, #0]
    48fa:	4299      	cmp	r1, r3
    48fc:	d01f      	beq.n	493e <connection_release+0xb2>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    48fe:	2203      	movs	r2, #3
    4900:	790b      	ldrb	r3, [r1, #4]
    4902:	4393      	bics	r3, r2
    4904:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4906:	682b      	ldr	r3, [r5, #0]
    4908:	681b      	ldr	r3, [r3, #0]
    490a:	602b      	str	r3, [r5, #0]

		pdu_node_tx_release(conn->handle, node_tx);
    490c:	8c20      	ldrh	r0, [r4, #32]
    490e:	f7ff ff47 	bl	47a0 <pdu_node_tx_release>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    4912:	0025      	movs	r5, r4
    4914:	0027      	movs	r7, r4
    4916:	35e8      	adds	r5, #232	; 0xe8
    4918:	37ec      	adds	r7, #236	; 0xec
    491a:	6829      	ldr	r1, [r5, #0]
    491c:	683b      	ldr	r3, [r7, #0]
    491e:	4299      	cmp	r1, r3
    4920:	d1e8      	bne.n	48f4 <connection_release+0x68>
    4922:	e00c      	b.n	493e <connection_release+0xb2>
		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
    4924:	0023      	movs	r3, r4
    4926:	33f0      	adds	r3, #240	; 0xf0

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    4928:	681b      	ldr	r3, [r3, #0]
    492a:	4298      	cmp	r0, r3
    492c:	d00a      	beq.n	4944 <connection_release+0xb8>

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    492e:	0031      	movs	r1, r6
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4930:	6803      	ldr	r3, [r0, #0]
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4932:	31d1      	adds	r1, #209	; 0xd1
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    4934:	602b      	str	r3, [r5, #0]
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    4936:	31ff      	adds	r1, #255	; 0xff
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    4938:	603b      	str	r3, [r7, #0]

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    493a:	f7fd fd30 	bl	239e <mem_release>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    493e:	6828      	ldr	r0, [r5, #0]
    4940:	2800      	cmp	r0, #0
    4942:	d1ef      	bne.n	4924 <connection_release+0x98>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    4944:	2300      	movs	r3, #0
    4946:	603b      	str	r3, [r7, #0]
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4948:	2703      	movs	r7, #3
		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;

	/* flush and release, rest of data */
	while (conn->pkt_tx_head) {
    494a:	6829      	ldr	r1, [r5, #0]
    494c:	2900      	cmp	r1, #0
    494e:	d00c      	beq.n	496a <connection_release+0xde>
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_data = conn->pkt_tx_head;
    4950:	0022      	movs	r2, r4
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4952:	790b      	ldrb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_data = conn->pkt_tx_head;
    4954:	32f0      	adds	r2, #240	; 0xf0
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    4956:	43bb      	bics	r3, r7
    4958:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    495a:	682b      	ldr	r3, [r5, #0]
    495c:	681b      	ldr	r3, [r3, #0]
    495e:	602b      	str	r3, [r5, #0]
		conn->pkt_tx_data = conn->pkt_tx_head;
    4960:	6013      	str	r3, [r2, #0]

		pdu_node_tx_release(conn->handle, node_tx);
    4962:	8c20      	ldrh	r0, [r4, #32]
    4964:	f7ff ff1c 	bl	47a0 <pdu_node_tx_release>
    4968:	e7ef      	b.n	494a <connection_release+0xbe>
	}

	conn->handle = 0xffff;
    496a:	2301      	movs	r3, #1
    496c:	425b      	negs	r3, r3
    496e:	8423      	strh	r3, [r4, #32]

	/* reset mutex */
	if (_radio.conn_upd == conn) {
    4970:	33fe      	adds	r3, #254	; 0xfe
    4972:	33ff      	adds	r3, #255	; 0xff
    4974:	58f2      	ldr	r2, [r6, r3]
    4976:	4294      	cmp	r4, r2
    4978:	d100      	bne.n	497c <connection_release+0xf0>
		_radio.conn_upd = NULL;
    497a:	50f1      	str	r1, [r6, r3]
	}
}
    497c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    497e:	46c0      	nop			; (mov r8, r8)
    4980:	00004cbd 	.word	0x00004cbd
    4984:	00001c78 	.word	0x00001c78
    4988:	200005f4 	.word	0x200005f4
    498c:	00001c84 	.word	0x00001c84
    4990:	00001c8b 	.word	0x00001c8b

00004994 <mayfly_radio_stop>:
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
	enum state state = (enum state)((u32_t)params & 0xff);
    4994:	b2c0      	uxtb	r0, r0
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    4996:	1f03      	subs	r3, r0, #4
	}
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
    4998:	b510      	push	{r4, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    499a:	2b01      	cmp	r3, #1
    499c:	d901      	bls.n	49a2 <mayfly_radio_stop+0xe>
    499e:	f7ff fdd9 	bl	4554 <chan_set.part.18>

	radio_used = ((_radio.state != STATE_NONE) &&
    49a2:	4a08      	ldr	r2, [pc, #32]	; (49c4 <mayfly_radio_stop+0x30>)
    49a4:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
    49a6:	2b00      	cmp	r3, #0
    49a8:	d006      	beq.n	49b8 <mayfly_radio_stop+0x24>
	enum state state = (enum state)((u32_t)params & 0xff);
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
    49aa:	3b04      	subs	r3, #4
    49ac:	2b01      	cmp	r3, #1
    49ae:	d903      	bls.n	49b8 <mayfly_radio_stop+0x24>
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
		if (radio_used) {
			_radio.state = state;
    49b0:	7410      	strb	r0, [r2, #16]
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
    49b2:	f7fd fea1 	bl	26f8 <radio_disable>
	}
}
    49b6:	e003      	b.n	49c0 <mayfly_radio_stop+0x2c>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
    49b8:	f7fd fec2 	bl	2740 <radio_is_idle>
    49bc:	2800      	cmp	r0, #0
    49be:	d0f8      	beq.n	49b2 <mayfly_radio_stop+0x1e>
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
	}
}
    49c0:	bd10      	pop	{r4, pc}
    49c2:	46c0      	nop			; (mov r8, r8)
    49c4:	200005f4 	.word	0x200005f4

000049c8 <mayfly_radio_active>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
		  (_radio.ticker_id_stop == ticker_id));
}

static void mayfly_radio_active(void *params)
{
    49c8:	b510      	push	{r4, lr}
    49ca:	4b0b      	ldr	r3, [pc, #44]	; (49f8 <mayfly_radio_active+0x30>)
	static u8_t s_active;

	if ((u32_t)params) {
    49cc:	2800      	cmp	r0, #0
    49ce:	d006      	beq.n	49de <mayfly_radio_active+0x16>
		if (s_active++) {
    49d0:	781a      	ldrb	r2, [r3, #0]
			return;
		}

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
    49d2:	2001      	movs	r0, #1
static void mayfly_radio_active(void *params)
{
	static u8_t s_active;

	if ((u32_t)params) {
		if (s_active++) {
    49d4:	1c51      	adds	r1, r2, #1
    49d6:	7019      	strb	r1, [r3, #0]
    49d8:	2a00      	cmp	r2, #0
    49da:	d10c      	bne.n	49f6 <mayfly_radio_active+0x2e>
    49dc:	e009      	b.n	49f2 <mayfly_radio_active+0x2a>

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
	} else {
		LL_ASSERT(s_active);
    49de:	7818      	ldrb	r0, [r3, #0]
    49e0:	2800      	cmp	r0, #0
    49e2:	d101      	bne.n	49e8 <mayfly_radio_active+0x20>
    49e4:	f7ff fdb6 	bl	4554 <chan_set.part.18>

		if (--s_active) {
    49e8:	3801      	subs	r0, #1
    49ea:	b2c0      	uxtb	r0, r0
    49ec:	7018      	strb	r0, [r3, #0]
    49ee:	2800      	cmp	r0, #0
    49f0:	d101      	bne.n	49f6 <mayfly_radio_active+0x2e>
			return;
		}

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
    49f2:	f003 fb4b 	bl	808c <radio_active_callback>
	}
}
    49f6:	bd10      	pop	{r4, pc}
    49f8:	20000a1c 	.word	0x20000a1c

000049fc <mayfly_radio_inactive>:
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
}

static void mayfly_radio_inactive(void *params)
{
    49fc:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	mayfly_radio_active(0);
    49fe:	2000      	movs	r0, #0
    4a00:	f7ff ffe2 	bl	49c8 <mayfly_radio_active>

	DEBUG_RADIO_CLOSE(0);
}
    4a04:	bd10      	pop	{r4, pc}
	...

00004a08 <event_xtal>:
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4a08:	2200      	movs	r2, #0
	clock_control_on(_radio.hf_clock, NULL);
}

static void event_xtal(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    4a0a:	b510      	push	{r4, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4a0c:	4b04      	ldr	r3, [pc, #16]	; (4a20 <event_xtal+0x18>)
    4a0e:	0011      	movs	r1, r2
    4a10:	0010      	movs	r0, r2
    4a12:	f7fd fba3 	bl	215c <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
    4a16:	2800      	cmp	r0, #0
    4a18:	d001      	beq.n	4a1e <event_xtal+0x16>
    4a1a:	f7ff fd9b 	bl	4554 <chan_set.part.18>
}
    4a1e:	bd10      	pop	{r4, pc}
    4a20:	20000188 	.word	0x20000188

00004a24 <event_active>:
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4a24:	2200      	movs	r2, #0
	}
}

static void event_active(u32_t ticks_at_expire, u32_t remainder,
			 u16_t lazy, void *context)
{
    4a26:	b510      	push	{r4, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4a28:	4b04      	ldr	r3, [pc, #16]	; (4a3c <event_active+0x18>)
    4a2a:	0011      	movs	r1, r2
    4a2c:	0010      	movs	r0, r2
    4a2e:	f7fd fb95 	bl	215c <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
    4a32:	2800      	cmp	r0, #0
    4a34:	d001      	beq.n	4a3a <event_active+0x16>
    4a36:	f7ff fd8d 	bl	4554 <chan_set.part.18>
}
    4a3a:	bd10      	pop	{r4, pc}
    4a3c:	20000198 	.word	0x20000198

00004a40 <event_stop>:
	}
}

static void event_stop(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    4a40:	001a      	movs	r2, r3
	ARG_UNUSED(lazy);

	/* Radio state requested (stop or abort) stored in context is supplied
	 * in params.
	 */
	s_mfy_radio_stop.param = context;
    4a42:	4b06      	ldr	r3, [pc, #24]	; (4a5c <event_stop+0x1c>)
	}
}

static void event_stop(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    4a44:	b510      	push	{r4, lr}
	ARG_UNUSED(lazy);

	/* Radio state requested (stop or abort) stored in context is supplied
	 * in params.
	 */
	s_mfy_radio_stop.param = context;
    4a46:	609a      	str	r2, [r3, #8]

	/* Stop Radio Tx/Rx */
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4a48:	2200      	movs	r2, #0
    4a4a:	0011      	movs	r1, r2
    4a4c:	0010      	movs	r0, r2
    4a4e:	f7fd fb85 	bl	215c <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_stop);
	LL_ASSERT(!retval);
    4a52:	2800      	cmp	r0, #0
    4a54:	d001      	beq.n	4a5a <event_stop+0x1a>
    4a56:	f7ff fd7d 	bl	4554 <chan_set.part.18>
}
    4a5a:	bd10      	pop	{r4, pc}
    4a5c:	200001d8 	.word	0x200001d8

00004a60 <event_adv_stop>:
	DEBUG_RADIO_START_A(0);
}

void event_adv_stop(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
		    void *context)
{
    4a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(context);

	/* Abort an event, if any, to avoid Rx queue corruption used by Radio
	 * ISR.
	 */
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    4a62:	2200      	movs	r2, #0
    4a64:	2305      	movs	r3, #5
    4a66:	0011      	movs	r1, r2
    4a68:	0010      	movs	r0, r2
    4a6a:	f7ff ffe9 	bl	4a40 <event_stop>

	/* Stop Direct Adv */
	ticker_status =
    4a6e:	2100      	movs	r1, #0
    4a70:	4b11      	ldr	r3, [pc, #68]	; (4ab8 <event_adv_stop+0x58>)
    4a72:	2205      	movs	r2, #5
    4a74:	9300      	str	r3, [sp, #0]
    4a76:	0008      	movs	r0, r1
    4a78:	4b10      	ldr	r3, [pc, #64]	; (4abc <event_adv_stop+0x5c>)
    4a7a:	f7fe ff2b 	bl	38d4 <ticker_stop>
	    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_ID_ADV,
			ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4a7e:	2302      	movs	r3, #2
    4a80:	4398      	bics	r0, r3
    4a82:	1e05      	subs	r5, r0, #0
    4a84:	d001      	beq.n	4a8a <event_adv_stop+0x2a>
    4a86:	f7ff fd65 	bl	4554 <chan_set.part.18>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Prepare the rx packet structure */
	radio_pdu_node_rx = packet_rx_reserve_get(1);
    4a8a:	2001      	movs	r0, #1
    4a8c:	f7ff f814 	bl	3ab8 <packet_rx_reserve_get>
    4a90:	1e04      	subs	r4, r0, #0
	LL_ASSERT(radio_pdu_node_rx);
    4a92:	d102      	bne.n	4a9a <event_adv_stop+0x3a>
    4a94:	b662      	cpsie	i
    4a96:	2004      	movs	r0, #4
    4a98:	df02      	svc	2

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    4a9a:	2301      	movs	r3, #1
    4a9c:	425b      	negs	r3, r3
    4a9e:	80c3      	strh	r3, [r0, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    4aa0:	3307      	adds	r3, #7

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    4aa2:	0029      	movs	r1, r5
	radio_pdu_node_rx = packet_rx_reserve_get(1);
	LL_ASSERT(radio_pdu_node_rx);

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    4aa4:	7103      	strb	r3, [r0, #4]

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    4aa6:	2218      	movs	r2, #24
	radio_pdu_node_rx->hdr.handle = 0xffff;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
    4aa8:	300b      	adds	r0, #11
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    4aaa:	f7fc fa6f 	bl	f8c <memset>
	radio_le_conn_cmplt->status = 0x3c;
    4aae:	233c      	movs	r3, #60	; 0x3c
    4ab0:	72e3      	strb	r3, [r4, #11]

	/* enqueue connection complete structure into queue */
	packet_rx_enqueue();
    4ab2:	f7ff fd99 	bl	45e8 <packet_rx_enqueue>
}
    4ab6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    4ab8:	00001355 	.word	0x00001355
    4abc:	00004cbd 	.word	0x00004cbd

00004ac0 <event_common_prepare>:
				 u32_t *ticks_active_to_start,
				 u32_t ticks_preempt_to_start,
				 u8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    4ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ac2:	0016      	movs	r6, r2
    4ac4:	b08f      	sub	sp, #60	; 0x3c
    4ac6:	930c      	str	r3, [sp, #48]	; 0x30
    4ac8:	ab14      	add	r3, sp, #80	; 0x50
    4aca:	cb04      	ldmia	r3!, {r2}
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    4acc:	6834      	ldr	r4, [r6, #0]
				 u32_t *ticks_active_to_start,
				 u32_t ticks_preempt_to_start,
				 u8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    4ace:	781b      	ldrb	r3, [r3, #0]
    4ad0:	900b      	str	r0, [sp, #44]	; 0x2c
    4ad2:	930d      	str	r3, [sp, #52]	; 0x34
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    4ad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				 u32_t *ticks_active_to_start,
				 u32_t ticks_preempt_to_start,
				 u8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    4ad6:	000d      	movs	r5, r1
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    4ad8:	681f      	ldr	r7, [r3, #0]
	u32_t ticks_to_start;

	/* in case this event is short prepare, xtal to start duration will be
	 * active to start duration.
	 */
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
    4ada:	2c00      	cmp	r4, #0
    4adc:	da03      	bge.n	4ae6 <event_common_prepare+0x26>
		_ticks_xtal_to_start =
    4ade:	003c      	movs	r4, r7
    4ae0:	4297      	cmp	r7, r2
    4ae2:	d200      	bcs.n	4ae6 <event_common_prepare+0x26>
    4ae4:	0014      	movs	r4, r2

	/* decide whether its XTAL start or active event that is the current
	 * execution context and accordingly setup the ticker for the other
	 * event (XTAL or active event). These are oneshot ticker.
	 */
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    4ae6:	42bc      	cmp	r4, r7
    4ae8:	d91a      	bls.n	4b20 <event_common_prepare+0x60>

		/* XTAL is before Active */
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
		ticks_to_start = _ticks_xtal_to_start;

		ticker_status =
    4aea:	2000      	movs	r0, #0
    4aec:	4b4d      	ldr	r3, [pc, #308]	; (4c24 <event_common_prepare+0x164>)
    4aee:	9006      	str	r0, [sp, #24]
    4af0:	9308      	str	r3, [sp, #32]
    4af2:	4b4d      	ldr	r3, [pc, #308]	; (4c28 <event_common_prepare+0x168>)
    4af4:	9004      	str	r0, [sp, #16]
    4af6:	9307      	str	r3, [sp, #28]
    4af8:	4b4c      	ldr	r3, [pc, #304]	; (4c2c <event_common_prepare+0x16c>)
    4afa:	9003      	str	r0, [sp, #12]
    4afc:	9305      	str	r3, [sp, #20]
    4afe:	1be3      	subs	r3, r4, r7
    4b00:	9300      	str	r3, [sp, #0]
    4b02:	9002      	str	r0, [sp, #8]
    4b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b06:	9001      	str	r0, [sp, #4]
    4b08:	2201      	movs	r2, #1
    4b0a:	0001      	movs	r1, r0
    4b0c:	f7fe fe4a 	bl	37a4 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_active, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_active, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4b10:	2302      	movs	r3, #2
    4b12:	4398      	bics	r0, r3
    4b14:	d000      	beq.n	4b18 <event_common_prepare+0x58>
    4b16:	e07f      	b.n	4c18 <event_common_prepare+0x158>
			  (ticker_status == TICKER_STATUS_BUSY));

		event_xtal(0, 0, 0, NULL);
    4b18:	0003      	movs	r3, r0
    4b1a:	0002      	movs	r2, r0
    4b1c:	0001      	movs	r1, r0
    4b1e:	e029      	b.n	4b74 <event_common_prepare+0xb4>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    4b20:	42bc      	cmp	r4, r7
    4b22:	d21d      	bcs.n	4b60 <event_common_prepare+0xa0>

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);
    4b24:	2300      	movs	r3, #0
    4b26:	001a      	movs	r2, r3
    4b28:	0019      	movs	r1, r3
    4b2a:	0018      	movs	r0, r3
    4b2c:	f7ff ff7a 	bl	4a24 <event_active>

		ticker_status =
    4b30:	2000      	movs	r0, #0
    4b32:	4b3f      	ldr	r3, [pc, #252]	; (4c30 <event_common_prepare+0x170>)
		event_xtal(0, 0, 0, NULL);
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
		u32_t ticks_to_xtal;

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    4b34:	1b3c      	subs	r4, r7, r4
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);

		ticker_status =
    4b36:	9308      	str	r3, [sp, #32]
    4b38:	4b3b      	ldr	r3, [pc, #236]	; (4c28 <event_common_prepare+0x168>)
    4b3a:	9006      	str	r0, [sp, #24]
    4b3c:	9307      	str	r3, [sp, #28]
    4b3e:	4b3d      	ldr	r3, [pc, #244]	; (4c34 <event_common_prepare+0x174>)
    4b40:	9004      	str	r0, [sp, #16]
    4b42:	9305      	str	r3, [sp, #20]
    4b44:	9003      	str	r0, [sp, #12]
    4b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b48:	9002      	str	r0, [sp, #8]
    4b4a:	9001      	str	r0, [sp, #4]
    4b4c:	9400      	str	r4, [sp, #0]
    4b4e:	2201      	movs	r2, #1
    4b50:	0001      	movs	r1, r0
    4b52:	f7fe fe27 	bl	37a4 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_xtal, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_xtal, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4b56:	2302      	movs	r3, #2
    4b58:	4398      	bics	r0, r3
    4b5a:	d15d      	bne.n	4c18 <event_common_prepare+0x158>
    4b5c:	003c      	movs	r4, r7
    4b5e:	e00b      	b.n	4b78 <event_common_prepare+0xb8>
		/* Active and XTAL are at the same time,
		 * no ticker required to be setup.
		 */
		ticks_to_start = _ticks_xtal_to_start;

		event_active(0, 0, 0, NULL);
    4b60:	2300      	movs	r3, #0
    4b62:	001a      	movs	r2, r3
    4b64:	0019      	movs	r1, r3
    4b66:	0018      	movs	r0, r3
    4b68:	f7ff ff5c 	bl	4a24 <event_active>
		event_xtal(0, 0, 0, NULL);
    4b6c:	2300      	movs	r3, #0
    4b6e:	001a      	movs	r2, r3
    4b70:	0019      	movs	r1, r3
    4b72:	0018      	movs	r0, r3
    4b74:	f7ff ff48 	bl	4a08 <event_xtal>

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;

	/* setup the start ticker */
	ticker_status =
    4b78:	2000      	movs	r0, #0
		event_active(0, 0, 0, NULL);
		event_xtal(0, 0, 0, NULL);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    4b7a:	4b2f      	ldr	r3, [pc, #188]	; (4c38 <event_common_prepare+0x178>)

	/* setup the start ticker */
	ticker_status =
    4b7c:	0002      	movs	r2, r0
		event_active(0, 0, 0, NULL);
		event_xtal(0, 0, 0, NULL);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    4b7e:	609d      	str	r5, [r3, #8]

	/* setup the start ticker */
	ticker_status =
    4b80:	4b2e      	ldr	r3, [pc, #184]	; (4c3c <event_common_prepare+0x17c>)
    4b82:	4d29      	ldr	r5, [pc, #164]	; (4c28 <event_common_prepare+0x168>)
    4b84:	9308      	str	r3, [sp, #32]
    4b86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4b88:	9507      	str	r5, [sp, #28]
    4b8a:	9306      	str	r3, [sp, #24]
    4b8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4b8e:	9004      	str	r0, [sp, #16]
    4b90:	9305      	str	r3, [sp, #20]
    4b92:	9003      	str	r0, [sp, #12]
    4b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4b96:	9002      	str	r0, [sp, #8]
    4b98:	9001      	str	r0, [sp, #4]
    4b9a:	9400      	str	r4, [sp, #0]
    4b9c:	0001      	movs	r1, r0
    4b9e:	f7fe fe01 	bl	37a4 <ticker_start>
			     ticks_at_expire, ticks_to_start,
			     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
			     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
			     ticker_timeout_fp, context, ticker_success_assert,
			     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4ba2:	2302      	movs	r3, #2
    4ba4:	4398      	bics	r0, r3
    4ba6:	d137      	bne.n	4c18 <event_common_prepare+0x158>
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#else
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    4ba8:	2305      	movs	r3, #5
    4baa:	0002      	movs	r2, r0
    4bac:	0001      	movs	r1, r0
    4bae:	f7ff ff47 	bl	4a40 <event_stop>
#endif
#undef RADIO_DEFERRED_PREEMPT

	/** Handle change in _ticks_active_to_start */
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    4bb2:	23fc      	movs	r3, #252	; 0xfc
    4bb4:	4a20      	ldr	r2, [pc, #128]	; (4c38 <event_common_prepare+0x178>)
    4bb6:	005b      	lsls	r3, r3, #1
    4bb8:	58d2      	ldr	r2, [r2, r3]
    4bba:	4297      	cmp	r7, r2
    4bbc:	d01f      	beq.n	4bfe <event_common_prepare+0x13e>
		u32_t ticks_to_start_new =
    4bbe:	6833      	ldr	r3, [r6, #0]
    4bc0:	005b      	lsls	r3, r3, #1
    4bc2:	085b      	lsrs	r3, r3, #1
    4bc4:	4293      	cmp	r3, r2
    4bc6:	d200      	bcs.n	4bca <event_common_prepare+0x10a>
    4bc8:	0013      	movs	r3, r2
			((_radio.ticks_active_to_start <
			  (*ticks_xtal_to_start & ~(((u32_t)1 << 31)))) ?
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;
    4bca:	990c      	ldr	r1, [sp, #48]	; 0x30
    4bcc:	600a      	str	r2, [r1, #0]

		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
    4bce:	6832      	ldr	r2, [r6, #0]
    4bd0:	2a00      	cmp	r2, #0
    4bd2:	da02      	bge.n	4bda <event_common_prepare+0x11a>
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
    4bd4:	0052      	lsls	r2, r2, #1
    4bd6:	0852      	lsrs	r2, r2, #1
    4bd8:	6032      	str	r2, [r6, #0]
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    4bda:	2000      	movs	r0, #0
    4bdc:	4918      	ldr	r1, [pc, #96]	; (4c40 <event_common_prepare+0x180>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    4bde:	b29a      	uxth	r2, r3
    4be0:	b2a3      	uxth	r3, r4
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    4be2:	9106      	str	r1, [sp, #24]
    4be4:	9302      	str	r3, [sp, #8]
    4be6:	9201      	str	r2, [sp, #4]
    4be8:	9200      	str	r2, [sp, #0]
    4bea:	9505      	str	r5, [sp, #20]
    4bec:	9004      	str	r0, [sp, #16]
    4bee:	9003      	str	r0, [sp, #12]
    4bf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4bf2:	0001      	movs	r1, r0
    4bf4:	f7fe fe1e 	bl	3834 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      RADIO_TICKER_USER_ID_WORKER, ticker_id,
				      ticks_to_start, ticks_to_start_new,
				      ticks_to_start_new, ticks_to_start, 0, 0,
				      ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4bf8:	2302      	movs	r3, #2
    4bfa:	4398      	bics	r0, r3
    4bfc:	d10c      	bne.n	4c18 <event_common_prepare+0x158>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* route all packets queued for connections */
	packet_tx_enqueue(0xFF);
    4bfe:	20ff      	movs	r0, #255	; 0xff
    4c00:	f7ff fdf2 	bl	47e8 <packet_tx_enqueue>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    4c04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4c06:	4b0f      	ldr	r3, [pc, #60]	; (4c44 <event_common_prepare+0x184>)

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4c08:	2000      	movs	r0, #0
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    4c0a:	609a      	str	r2, [r3, #8]

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    4c0c:	2201      	movs	r2, #1
    4c0e:	0011      	movs	r1, r2
    4c10:	f7fd faa4 	bl	215c <mayfly_enqueue>
					RADIO_TICKER_USER_ID_JOB, 1,
					&s_mfy_xtal_stop_calc);
		LL_ASSERT(!retval);
    4c14:	2800      	cmp	r0, #0
    4c16:	d002      	beq.n	4c1e <event_common_prepare+0x15e>
    4c18:	b662      	cpsie	i
    4c1a:	2004      	movs	r0, #4
    4c1c:	df02      	svc	2
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED */
}
    4c1e:	b00f      	add	sp, #60	; 0x3c
    4c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c22:	46c0      	nop			; (mov r8, r8)
    4c24:	00001110 	.word	0x00001110
    4c28:	00004cbd 	.word	0x00004cbd
    4c2c:	00004a25 	.word	0x00004a25
    4c30:	00001125 	.word	0x00001125
    4c34:	00004a09 	.word	0x00004a09
    4c38:	200005f4 	.word	0x200005f4
    4c3c:	0000113d 	.word	0x0000113d
    4c40:	0000116a 	.word	0x0000116a
    4c44:	200001f8 	.word	0x200001f8

00004c48 <ticker_update_slave_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
		  (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV));
}

static void ticker_update_slave_assert(u32_t status, void *params)
{
    4c48:	b510      	push	{r4, lr}
	u8_t ticker_id = (u32_t)params & 0xFF;

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    4c4a:	2800      	cmp	r0, #0
    4c4c:	d006      	beq.n	4c5c <ticker_update_slave_assert+0x14>
    4c4e:	4b04      	ldr	r3, [pc, #16]	; (4c60 <ticker_update_slave_assert+0x18>)
    4c50:	b2c9      	uxtb	r1, r1
    4c52:	7b9b      	ldrb	r3, [r3, #14]
    4c54:	4299      	cmp	r1, r3
    4c56:	d001      	beq.n	4c5c <ticker_update_slave_assert+0x14>
    4c58:	f7ff fc7c 	bl	4554 <chan_set.part.18>
		  (_radio.ticker_id_stop == ticker_id));
}
    4c5c:	bd10      	pop	{r4, pc}
    4c5e:	46c0      	nop			; (mov r8, r8)
    4c60:	200005f4 	.word	0x200005f4

00004c64 <ticker_update_adv_assert>:
		}
	}
}

static void ticker_update_adv_assert(u32_t status, void *params)
{
    4c64:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    4c66:	2800      	cmp	r0, #0
    4c68:	d005      	beq.n	4c76 <ticker_update_adv_assert+0x12>
    4c6a:	4b03      	ldr	r3, [pc, #12]	; (4c78 <ticker_update_adv_assert+0x14>)
    4c6c:	7b9b      	ldrb	r3, [r3, #14]
    4c6e:	2b05      	cmp	r3, #5
    4c70:	d001      	beq.n	4c76 <ticker_update_adv_assert+0x12>
    4c72:	f7ff fc6f 	bl	4554 <chan_set.part.18>
		  (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV));
}
    4c76:	bd10      	pop	{r4, pc}
    4c78:	200005f4 	.word	0x200005f4

00004c7c <ticker_stop_scan_assert>:
		}
	}
}

static void ticker_stop_scan_assert(u32_t status, void *params)
{
    4c7c:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    4c7e:	2801      	cmp	r0, #1
    4c80:	d108      	bne.n	4c94 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    4c82:	4b05      	ldr	r3, [pc, #20]	; (4c98 <ticker_stop_scan_assert+0x1c>)
    4c84:	7b9a      	ldrb	r2, [r3, #14]
    4c86:	2a06      	cmp	r2, #6
    4c88:	d102      	bne.n	4c90 <ticker_stop_scan_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Scan role as it is now transitioned
			 * to Master role).
			 */
			_radio.ticker_id_stop = 0;
    4c8a:	2200      	movs	r2, #0
    4c8c:	739a      	strb	r2, [r3, #14]
    4c8e:	e001      	b.n	4c94 <ticker_stop_scan_assert+0x18>
    4c90:	f7ff fc60 	bl	4554 <chan_set.part.18>
		} else {
			LL_ASSERT(0);
		}
	}
}
    4c94:	bd10      	pop	{r4, pc}
    4c96:	46c0      	nop			; (mov r8, r8)
    4c98:	200005f4 	.word	0x200005f4

00004c9c <ticker_stop_adv_assert>:

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_stop_adv_assert(u32_t status, void *params)
{
    4c9c:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    4c9e:	2801      	cmp	r0, #1
    4ca0:	d108      	bne.n	4cb4 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    4ca2:	4b05      	ldr	r3, [pc, #20]	; (4cb8 <ticker_stop_adv_assert+0x1c>)
    4ca4:	7b9a      	ldrb	r2, [r3, #14]
    4ca6:	2a05      	cmp	r2, #5
    4ca8:	d102      	bne.n	4cb0 <ticker_stop_adv_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Adv role as it is now transitioned
			 * to Slave role).
			 */
			_radio.ticker_id_stop = 0;
    4caa:	2200      	movs	r2, #0
    4cac:	739a      	strb	r2, [r3, #14]
    4cae:	e001      	b.n	4cb4 <ticker_stop_adv_assert+0x18>
    4cb0:	f7ff fc50 	bl	4554 <chan_set.part.18>
		} else {
			LL_ASSERT(0);
		}
	}
}
    4cb4:	bd10      	pop	{r4, pc}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	200005f4 	.word	0x200005f4

00004cbc <ticker_success_assert>:
{
	*((u32_t volatile *)ops_context) = status;
}

static void ticker_success_assert(u32_t status, void *params)
{
    4cbc:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    4cbe:	2800      	cmp	r0, #0
    4cc0:	d001      	beq.n	4cc6 <ticker_success_assert+0xa>
    4cc2:	f7ff fc47 	bl	4554 <chan_set.part.18>
}
    4cc6:	bd10      	pop	{r4, pc}

00004cc8 <radio_event_adv_prepare>:
			    0x555555);
}

void radio_event_adv_prepare(u32_t ticks_at_expire, u32_t remainder,
			     u16_t lazy, void *context)
{
    4cc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	LL_ASSERT(!_radio.ticker_id_prepare);
    4cca:	4c0b      	ldr	r4, [pc, #44]	; (4cf8 <radio_event_adv_prepare+0x30>)
    4ccc:	7b25      	ldrb	r5, [r4, #12]
    4cce:	b2ed      	uxtb	r5, r5
    4cd0:	2d00      	cmp	r5, #0
    4cd2:	d001      	beq.n	4cd8 <radio_event_adv_prepare+0x10>
    4cd4:	f7ff fc3e 	bl	4554 <chan_set.part.18>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    4cd8:	2605      	movs	r6, #5

	event_common_prepare(ticks_at_expire, remainder,
    4cda:	0023      	movs	r3, r4
    4cdc:	0022      	movs	r2, r4
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	LL_ASSERT(!_radio.ticker_id_prepare);
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    4cde:	7326      	strb	r6, [r4, #12]

	event_common_prepare(ticks_at_expire, remainder,
    4ce0:	9503      	str	r5, [sp, #12]
    4ce2:	4d06      	ldr	r5, [pc, #24]	; (4cfc <radio_event_adv_prepare+0x34>)
    4ce4:	9601      	str	r6, [sp, #4]
    4ce6:	9502      	str	r5, [sp, #8]
    4ce8:	349c      	adds	r4, #156	; 0x9c
    4cea:	6824      	ldr	r4, [r4, #0]
    4cec:	3398      	adds	r3, #152	; 0x98
    4cee:	3294      	adds	r2, #148	; 0x94
    4cf0:	9400      	str	r4, [sp, #0]
    4cf2:	f7ff fee5 	bl	4ac0 <event_common_prepare>
			     &_radio.advertiser.hdr.ticks_active_to_start,
			     _radio.advertiser.hdr.ticks_preempt_to_start,
			     RADIO_TICKER_ID_ADV, event_adv, NULL);

	DEBUG_RADIO_PREPARE_A(0);
}
    4cf6:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    4cf8:	200005f4 	.word	0x200005f4
    4cfc:	00004fc1 	.word	0x00004fc1

00004d00 <adv_scan_configure.constprop.31>:
	radio_reset();
	radio_tx_power_set(0);
	radio_isr_set(isr);
}

static void adv_scan_configure(u8_t phy, u8_t flags)
    4d00:	b513      	push	{r0, r1, r4, lr}
    4d02:	0004      	movs	r4, r0
{
	u32_t aa = 0x8e89bed6;
    4d04:	4b0d      	ldr	r3, [pc, #52]	; (4d3c <adv_scan_configure.constprop.31+0x3c>)
    4d06:	9301      	str	r3, [sp, #4]
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    4d08:	f7fd fc62 	bl	25d0 <radio_reset>
	radio_tx_power_set(0);
    4d0c:	2000      	movs	r0, #0
    4d0e:	f7fd fc7b 	bl	2608 <radio_tx_power_set>
	radio_isr_set(isr);
    4d12:	480b      	ldr	r0, [pc, #44]	; (4d40 <adv_scan_configure.constprop.31+0x40>)
    4d14:	f7fd fc44 	bl	25a0 <radio_isr_set>
static void adv_scan_configure(u8_t phy, u8_t flags)
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
    4d18:	2101      	movs	r1, #1
    4d1a:	0020      	movs	r0, r4
    4d1c:	f7fd fc68 	bl	25f0 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    4d20:	0064      	lsls	r4, r4, #1
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
	radio_aa_set((u8_t *)&aa);
    4d22:	a801      	add	r0, sp, #4
    4d24:	f7fd fc88 	bl	2638 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    4d28:	b2e2      	uxtb	r2, r4
    4d2a:	2125      	movs	r1, #37	; 0x25
    4d2c:	2008      	movs	r0, #8
    4d2e:	f7fd fca1 	bl	2674 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    4d32:	4904      	ldr	r1, [pc, #16]	; (4d44 <adv_scan_configure.constprop.31+0x44>)
    4d34:	4804      	ldr	r0, [pc, #16]	; (4d48 <adv_scan_configure.constprop.31+0x48>)
    4d36:	f7fd fd0d 	bl	2754 <radio_crc_configure>
			    0x555555);
}
    4d3a:	bd13      	pop	{r0, r1, r4, pc}
    4d3c:	8e89bed6 	.word	0x8e89bed6
    4d40:	00005d3d 	.word	0x00005d3d
    4d44:	00555555 	.word	0x00555555
    4d48:	0000065b 	.word	0x0000065b

00004d4c <packet_rx_allocate.constprop.32>:

static void packet_rx_allocate(u8_t max)
{
	u8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    4d4c:	23e4      	movs	r3, #228	; 0xe4
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR */

	*pdu_data_tx = _pdu_data_tx;
}

static void packet_rx_allocate(u8_t max)
    4d4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
{
	u8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    4d50:	4d1f      	ldr	r5, [pc, #124]	; (4dd0 <packet_rx_allocate.constprop.32+0x84>)
    4d52:	005b      	lsls	r3, r3, #1
    4d54:	5cee      	ldrb	r6, [r5, r3]
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    4d56:	3b12      	subs	r3, #18
    4d58:	5cec      	ldrb	r4, [r5, r3]
	if (acquire == _radio.packet_rx_count) {
    4d5a:	3b02      	subs	r3, #2

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    4d5c:	3401      	adds	r4, #1
	if (acquire == _radio.packet_rx_count) {
    4d5e:	5ceb      	ldrb	r3, [r5, r3]

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    4d60:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
    4d62:	42a3      	cmp	r3, r4
    4d64:	d11c      	bne.n	4da0 <packet_rx_allocate.constprop.32+0x54>
		acquire = 0;
    4d66:	2400      	movs	r4, #0
    4d68:	e01a      	b.n	4da0 <packet_rx_allocate.constprop.32+0x54>
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    4d6a:	23db      	movs	r3, #219	; 0xdb
    4d6c:	22d8      	movs	r2, #216	; 0xd8
		if (!radio_pdu_node_rx) {
			mem_release(link, &_radio.link_rx_free);
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;
    4d6e:	6007      	str	r7, [r0, #0]

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    4d70:	005b      	lsls	r3, r3, #1
    4d72:	5ceb      	ldrb	r3, [r5, r3]
    4d74:	0052      	lsls	r2, r2, #1
    4d76:	58aa      	ldr	r2, [r5, r2]
    4d78:	009b      	lsls	r3, r3, #2
    4d7a:	5098      	str	r0, [r3, r2]
		_radio.packet_rx_acquire = acquire;
    4d7c:	23db      	movs	r3, #219	; 0xdb
    4d7e:	005b      	lsls	r3, r3, #1
    4d80:	54ec      	strb	r4, [r5, r3]
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    4d82:	9201      	str	r2, [sp, #4]
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
		if (acquire == _radio.packet_rx_count) {
    4d84:	3b02      	subs	r3, #2
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    4d86:	3401      	adds	r4, #1
		if (acquire == _radio.packet_rx_count) {
    4d88:	5ceb      	ldrb	r3, [r5, r3]
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    4d8a:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
    4d8c:	42a3      	cmp	r3, r4
    4d8e:	d100      	bne.n	4d92 <packet_rx_allocate.constprop.32+0x46>
			acquire = 0;
    4d90:	2400      	movs	r4, #0
		}

		_radio.link_rx_data_quota--;
    4d92:	22e4      	movs	r2, #228	; 0xe4
    4d94:	0052      	lsls	r2, r2, #1
    4d96:	5cab      	ldrb	r3, [r5, r2]
    4d98:	3e01      	subs	r6, #1
    4d9a:	3b01      	subs	r3, #1
    4d9c:	54ab      	strb	r3, [r5, r2]
    4d9e:	b2f6      	uxtb	r6, r6
	acquire = _radio.packet_rx_acquire + 1;
	if (acquire == _radio.packet_rx_count) {
		acquire = 0;
	}

	while ((max--) && (acquire != _radio.packet_rx_last)) {
    4da0:	2e00      	cmp	r6, #0
    4da2:	d014      	beq.n	4dce <packet_rx_allocate.constprop.32+0x82>
    4da4:	23b6      	movs	r3, #182	; 0xb6
    4da6:	33ff      	adds	r3, #255	; 0xff
    4da8:	5ceb      	ldrb	r3, [r5, r3]
    4daa:	429c      	cmp	r4, r3
    4dac:	d00f      	beq.n	4dce <packet_rx_allocate.constprop.32+0x82>
		void *link;
		struct radio_pdu_node_rx *radio_pdu_node_rx;

		link = mem_acquire(&_radio.link_rx_free);
    4dae:	4809      	ldr	r0, [pc, #36]	; (4dd4 <packet_rx_allocate.constprop.32+0x88>)
    4db0:	f7fd fadc 	bl	236c <mem_acquire>
    4db4:	1e07      	subs	r7, r0, #0
		if (!link) {
    4db6:	d00a      	beq.n	4dce <packet_rx_allocate.constprop.32+0x82>
			break;
		}

		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    4db8:	0028      	movs	r0, r5
    4dba:	30a5      	adds	r0, #165	; 0xa5
    4dbc:	30ff      	adds	r0, #255	; 0xff
    4dbe:	f7fd fad5 	bl	236c <mem_acquire>
		if (!radio_pdu_node_rx) {
    4dc2:	2800      	cmp	r0, #0
    4dc4:	d1d1      	bne.n	4d6a <packet_rx_allocate.constprop.32+0x1e>
			mem_release(link, &_radio.link_rx_free);
    4dc6:	4903      	ldr	r1, [pc, #12]	; (4dd4 <packet_rx_allocate.constprop.32+0x88>)
    4dc8:	0038      	movs	r0, r7
    4dca:	f7fd fae8 	bl	239e <mem_release>
			acquire = 0;
		}

		_radio.link_rx_data_quota--;
	}
}
    4dce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4dd0:	200005f4 	.word	0x200005f4
    4dd4:	200007b0 	.word	0x200007b0

00004dd8 <common_init>:
static void common_init(void)
{
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    4dd8:	23c6      	movs	r3, #198	; 0xc6
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    4dda:	b570      	push	{r4, r5, r6, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    4ddc:	4c3b      	ldr	r4, [pc, #236]	; (4ecc <common_init+0xf4>)
    4dde:	005b      	lsls	r3, r3, #1
    4de0:	5ce2      	ldrb	r2, [r4, r3]
    4de2:	2a00      	cmp	r2, #0
    4de4:	d00a      	beq.n	4dfc <common_init+0x24>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    4de6:	0023      	movs	r3, r4
    4de8:	20c2      	movs	r0, #194	; 0xc2
    4dea:	3389      	adds	r3, #137	; 0x89
    4dec:	0040      	lsls	r0, r0, #1
    4dee:	33ff      	adds	r3, #255	; 0xff
    4df0:	b292      	uxth	r2, r2
    4df2:	21fc      	movs	r1, #252	; 0xfc
    4df4:	5820      	ldr	r0, [r4, r0]
    4df6:	f7fd fa93 	bl	2320 <mem_init>
    4dfa:	e002      	b.n	4e02 <common_init+0x2a>
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    4dfc:	23c4      	movs	r3, #196	; 0xc4
    4dfe:	005b      	lsls	r3, r3, #1
    4e00:	50e2      	str	r2, [r4, r3]
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
    4e02:	0023      	movs	r3, r4
    4e04:	22d7      	movs	r2, #215	; 0xd7
    4e06:	21d6      	movs	r1, #214	; 0xd6
    4e08:	20d0      	movs	r0, #208	; 0xd0
    4e0a:	33a5      	adds	r3, #165	; 0xa5
    4e0c:	0052      	lsls	r2, r2, #1
    4e0e:	0049      	lsls	r1, r1, #1
    4e10:	0040      	lsls	r0, r0, #1
    4e12:	33ff      	adds	r3, #255	; 0xff
    4e14:	5ca2      	ldrb	r2, [r4, r2]
    4e16:	5a61      	ldrh	r1, [r4, r1]
    4e18:	5820      	ldr	r0, [r4, r0]
    4e1a:	f7fd fa81 	bl	2320 <mem_init>
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    4e1e:	23da      	movs	r3, #218	; 0xda
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    4e20:	0025      	movs	r5, r4
    4e22:	20dc      	movs	r0, #220	; 0xdc
		 (_radio.packet_rx_count + _radio.connection_count),
    4e24:	005b      	lsls	r3, r3, #1
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    4e26:	5ce2      	ldrb	r2, [r4, r3]
		 (_radio.packet_rx_count + _radio.connection_count),
    4e28:	3b28      	subs	r3, #40	; 0x28
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    4e2a:	5ce3      	ldrb	r3, [r4, r3]
    4e2c:	35bd      	adds	r5, #189	; 0xbd
    4e2e:	35ff      	adds	r5, #255	; 0xff
    4e30:	0040      	lsls	r0, r0, #1
    4e32:	18d2      	adds	r2, r2, r3
    4e34:	2108      	movs	r1, #8
    4e36:	002b      	movs	r3, r5
    4e38:	5820      	ldr	r0, [r4, r0]
    4e3a:	f7fd fa71 	bl	2320 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    4e3e:	0023      	movs	r3, r4
    4e40:	20e6      	movs	r0, #230	; 0xe6
    4e42:	33d1      	adds	r3, #209	; 0xd1
    4e44:	0040      	lsls	r0, r0, #1
    4e46:	33ff      	adds	r3, #255	; 0xff
    4e48:	2202      	movs	r2, #2
    4e4a:	2124      	movs	r1, #36	; 0x24
    4e4c:	5820      	ldr	r0, [r4, r0]
    4e4e:	f7fd fa67 	bl	2320 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    4e52:	22f4      	movs	r2, #244	; 0xf4
	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4e54:	0023      	movs	r3, r4
    4e56:	21ee      	movs	r1, #238	; 0xee
    4e58:	20ea      	movs	r0, #234	; 0xea
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    4e5a:	0052      	lsls	r2, r2, #1
	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4e5c:	5ca2      	ldrb	r2, [r4, r2]
    4e5e:	33d9      	adds	r3, #217	; 0xd9
    4e60:	3a01      	subs	r2, #1
    4e62:	0049      	lsls	r1, r1, #1
    4e64:	0040      	lsls	r0, r0, #1
    4e66:	5820      	ldr	r0, [r4, r0]
    4e68:	33ff      	adds	r3, #255	; 0xff
    4e6a:	b292      	uxth	r2, r2
    4e6c:	5a61      	ldrh	r1, [r4, r1]
    4e6e:	f7fd fa57 	bl	2320 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    4e72:	0028      	movs	r0, r5
    4e74:	f7fd fa7a 	bl	236c <mem_acquire>
	LL_ASSERT(link);
    4e78:	2800      	cmp	r0, #0
    4e7a:	d102      	bne.n	4e82 <common_init+0xaa>
    4e7c:	b662      	cpsie	i
    4e7e:	2004      	movs	r0, #4
    4e80:	df02      	svc	2
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4e82:	0022      	movs	r2, r4
    4e84:	0021      	movs	r1, r4
    4e86:	32c5      	adds	r2, #197	; 0xc5
    4e88:	31c1      	adds	r1, #193	; 0xc1
    4e8a:	32ff      	adds	r2, #255	; 0xff
    4e8c:	31ff      	adds	r1, #255	; 0xff
    4e8e:	f7fd fab7 	bl	2400 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chl_map = 0x07;
    4e92:	0022      	movs	r2, r4
    4e94:	2138      	movs	r1, #56	; 0x38
    4e96:	32a4      	adds	r2, #164	; 0xa4
    4e98:	7853      	ldrb	r3, [r2, #1]
    4e9a:	430b      	orrs	r3, r1
    4e9c:	7053      	strb	r3, [r2, #1]

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    4e9e:	22cb      	movs	r2, #203	; 0xcb
    4ea0:	23ff      	movs	r3, #255	; 0xff
    4ea2:	0052      	lsls	r2, r2, #1
    4ea4:	54a3      	strb	r3, [r4, r2]
	_radio.data_chan_map[1] = 0xFF;
    4ea6:	2298      	movs	r2, #152	; 0x98
    4ea8:	32ff      	adds	r2, #255	; 0xff
    4eaa:	54a3      	strb	r3, [r4, r2]
	_radio.data_chan_map[2] = 0xFF;
    4eac:	3201      	adds	r2, #1
    4eae:	54a3      	strb	r3, [r4, r2]
	_radio.data_chan_map[3] = 0xFF;
    4eb0:	229a      	movs	r2, #154	; 0x9a
    4eb2:	32ff      	adds	r2, #255	; 0xff
    4eb4:	54a3      	strb	r3, [r4, r2]
	_radio.data_chan_map[4] = 0x1F;
    4eb6:	3a7b      	subs	r2, #123	; 0x7b
    4eb8:	3aff      	subs	r2, #255	; 0xff
    4eba:	339b      	adds	r3, #155	; 0x9b
    4ebc:	54e2      	strb	r2, [r4, r3]
	_radio.data_chan_count = 37;
    4ebe:	239c      	movs	r3, #156	; 0x9c
    4ec0:	3206      	adds	r2, #6
    4ec2:	33ff      	adds	r3, #255	; 0xff
    4ec4:	54e2      	strb	r2, [r4, r3]
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY_CODED */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    4ec6:	f7ff ff41 	bl	4d4c <packet_rx_allocate.constprop.32>
}
    4eca:	bd70      	pop	{r4, r5, r6, pc}
    4ecc:	200005f4 	.word	0x200005f4

00004ed0 <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    4ed0:	4b03      	ldr	r3, [pc, #12]	; (4ee0 <mayfly_xtal_start+0x10>)
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_start(void *params)
{
    4ed2:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    4ed4:	6818      	ldr	r0, [r3, #0]
    4ed6:	2100      	movs	r1, #0
    4ed8:	6843      	ldr	r3, [r0, #4]
    4eda:	681b      	ldr	r3, [r3, #0]
    4edc:	4798      	blx	r3
}
    4ede:	bd10      	pop	{r4, pc}
    4ee0:	200005f4 	.word	0x200005f4

00004ee4 <mayfly_xtal_stop>:

static void mayfly_xtal_stop(void *params)
{
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    4ee4:	4b03      	ldr	r3, [pc, #12]	; (4ef4 <mayfly_xtal_stop+0x10>)
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_stop(void *params)
{
    4ee6:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    4ee8:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    4eea:	2100      	movs	r1, #0
    4eec:	6843      	ldr	r3, [r0, #4]
    4eee:	685b      	ldr	r3, [r3, #4]
    4ef0:	4798      	blx	r3

	DEBUG_RADIO_CLOSE(0);
}
    4ef2:	bd10      	pop	{r4, pc}
    4ef4:	200005f4 	.word	0x200005f4

00004ef8 <chan_sel_2>:
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    4ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4efa:	9301      	str	r3, [sp, #4]
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    4efc:	2301      	movs	r3, #1
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    4efe:	0014      	movs	r4, r2
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    4f00:	2603      	movs	r6, #3
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    4f02:	469c      	mov	ip, r3
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    4f04:	4048      	eors	r0, r1
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    4f06:	2308      	movs	r3, #8
static u8_t chan_rev_8(u8_t i)
{
	u8_t iterate;
	u8_t o;

	o = 0;
    4f08:	2200      	movs	r2, #0
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    4f0a:	0a05      	lsrs	r5, r0, #8
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    4f0c:	4667      	mov	r7, ip
    4f0e:	0052      	lsls	r2, r2, #1
    4f10:	402f      	ands	r7, r5
    4f12:	3b01      	subs	r3, #1
    4f14:	433a      	orrs	r2, r7
    4f16:	b2db      	uxtb	r3, r3
    4f18:	b2d2      	uxtb	r2, r2
		i >>= 1;
    4f1a:	086d      	lsrs	r5, r5, #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    4f1c:	2b00      	cmp	r3, #0
    4f1e:	d1f5      	bne.n	4f0c <chan_sel_2+0x14>
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    4f20:	2708      	movs	r7, #8
    4f22:	0212      	lsls	r2, r2, #8
    4f24:	b212      	sxth	r2, r2
    4f26:	b2c0      	uxtb	r0, r0
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    4f28:	4665      	mov	r5, ip
    4f2a:	005b      	lsls	r3, r3, #1
    4f2c:	4005      	ands	r5, r0
    4f2e:	3f01      	subs	r7, #1
    4f30:	432b      	orrs	r3, r5
    4f32:	b2ff      	uxtb	r7, r7
    4f34:	b2db      	uxtb	r3, r3
		i >>= 1;
    4f36:	0840      	lsrs	r0, r0, #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    4f38:	2f00      	cmp	r7, #0
    4f3a:	d1f5      	bne.n	4f28 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
}

static u16_t chan_mam(u16_t a, u16_t b)
{
	return ((u32_t)a * 17 + b) & 0xFFFF;
    4f3c:	431a      	orrs	r2, r3
    4f3e:	0010      	movs	r0, r2
    4f40:	2311      	movs	r3, #17
    4f42:	4358      	muls	r0, r3
    4f44:	3e01      	subs	r6, #1
    4f46:	1808      	adds	r0, r1, r0
    4f48:	b2f6      	uxtb	r6, r6
    4f4a:	b280      	uxth	r0, r0
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;

	for (iterate = 0; iterate < 3; iterate++) {
    4f4c:	2e00      	cmp	r6, #0
    4f4e:	d1da      	bne.n	4f06 <chan_sel_2+0xe>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
    4f50:	4041      	eors	r1, r0
    4f52:	000e      	movs	r6, r1
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    4f54:	2125      	movs	r1, #37	; 0x25
    4f56:	0030      	movs	r0, r6
    4f58:	f7fb f9a8 	bl	2ac <__aeabi_uidivmod>

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    4f5c:	2207      	movs	r2, #7
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    4f5e:	b2c8      	uxtb	r0, r1

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    4f60:	08c3      	lsrs	r3, r0, #3
    4f62:	5ce3      	ldrb	r3, [r4, r3]
    4f64:	4002      	ands	r2, r0
    4f66:	4113      	asrs	r3, r2
    4f68:	2201      	movs	r2, #1
    4f6a:	4213      	tst	r3, r2
    4f6c:	d105      	bne.n	4f7a <chan_sel_2+0x82>
		u8_t chan_index;

		chan_index = ((u32_t)chan_count * prn_e) >> 16;
		chan_next = chan_sel_remap(chan_map, chan_index);
    4f6e:	9901      	ldr	r1, [sp, #4]
    4f70:	0020      	movs	r0, r4
    4f72:	4371      	muls	r1, r6
    4f74:	0c09      	lsrs	r1, r1, #16
    4f76:	f7fe fd84 	bl	3a82 <chan_sel_remap>
	} else {
		/* channel can be used, return it */
	}

	return chan_next;
}
    4f7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004f7c <preempt_calc>:
}

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
    4f7c:	b570      	push	{r4, r5, r6, lr}
    4f7e:	0014      	movs	r4, r2
    4f80:	000e      	movs	r6, r1
    4f82:	0005      	movs	r5, r0
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    4f84:	f7fe fd42 	bl	3a0c <ticker_ticks_now_get>

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
	u32_t diff =
    4f88:	0021      	movs	r1, r4
    4f8a:	f7fe fd43 	bl	3a14 <ticker_ticks_diff_get>
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
    4f8e:	1cc4      	adds	r4, r0, #3
		}

		return 1;
	}

	return 0;
    4f90:	2000      	movs	r0, #0
{
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    4f92:	2c09      	cmp	r4, #9
    4f94:	d910      	bls.n	4fb8 <preempt_calc+0x3c>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
		}
	} else {
		if (s_xtal_retained) {
    4f96:	4b09      	ldr	r3, [pc, #36]	; (4fbc <preempt_calc+0x40>)
    4f98:	781b      	ldrb	r3, [r3, #0]
    4f9a:	4283      	cmp	r3, r0
    4f9c:	d001      	beq.n	4fa2 <preempt_calc+0x26>
    4f9e:	f7ff fa83 	bl	44a8 <mayfly_xtal_retain.part.10>

	diff += 3;
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    4fa2:	0028      	movs	r0, r5
    4fa4:	0032      	movs	r2, r6
    4fa6:	2100      	movs	r1, #0
    4fa8:	f7ff fad8 	bl	455c <prepare_normal_set>

		diff += hdr->ticks_preempt_to_start;
    4fac:	68ab      	ldr	r3, [r5, #8]
		if (diff <
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
		}

		return 1;
    4fae:	2001      	movs	r0, #1
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);

		diff += hdr->ticks_preempt_to_start;
    4fb0:	18e3      	adds	r3, r4, r3
		if (diff <
    4fb2:	2b26      	cmp	r3, #38	; 0x26
    4fb4:	d800      	bhi.n	4fb8 <preempt_calc+0x3c>
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
    4fb6:	60ab      	str	r3, [r5, #8]

		return 1;
	}

	return 0;
}
    4fb8:	bd70      	pop	{r4, r5, r6, pc}
    4fba:	46c0      	nop			; (mov r8, r8)
    4fbc:	20000a1d 	.word	0x20000a1d

00004fc0 <event_adv>:
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    4fc0:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    4fc2:	4b28      	ldr	r3, [pc, #160]	; (5064 <event_adv+0xa4>)
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    4fc4:	0005      	movs	r5, r0
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    4fc6:	7bda      	ldrb	r2, [r3, #15]
    4fc8:	001c      	movs	r4, r3
    4fca:	b2d2      	uxtb	r2, r2
    4fcc:	2a00      	cmp	r2, #0
    4fce:	d144      	bne.n	505a <event_adv+0x9a>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    4fd0:	7b1b      	ldrb	r3, [r3, #12]
    4fd2:	b2db      	uxtb	r3, r3
    4fd4:	2b05      	cmp	r3, #5
    4fd6:	d140      	bne.n	505a <event_adv+0x9a>
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    4fd8:	0026      	movs	r6, r4
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    4fda:	2101      	movs	r1, #1
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    4fdc:	36a5      	adds	r6, #165	; 0xa5
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;
    4fde:	6060      	str	r0, [r4, #4]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    4fe0:	7830      	ldrb	r0, [r6, #0]
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    4fe2:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    4fe4:	0740      	lsls	r0, r0, #29
    4fe6:	0f40      	lsrs	r0, r0, #29
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
    4fe8:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    4fea:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    4fec:	f7ff fe88 	bl	4d00 <adv_scan_configure.constprop.31>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	adv_scan_configure(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map_current = _radio.advertiser.chl_map;
    4ff0:	0021      	movs	r1, r4
    4ff2:	200e      	movs	r0, #14
    4ff4:	7833      	ldrb	r3, [r6, #0]
    4ff6:	31a4      	adds	r1, #164	; 0xa4
    4ff8:	069b      	lsls	r3, r3, #26
    4ffa:	0f5b      	lsrs	r3, r3, #29
    4ffc:	005a      	lsls	r2, r3, #1
    4ffe:	780b      	ldrb	r3, [r1, #0]
    5000:	4383      	bics	r3, r0
    5002:	4313      	orrs	r3, r2
    5004:	700b      	strb	r3, [r1, #0]
	adv_setup();
    5006:	f7ff fb6f 	bl	46e8 <adv_setup>

	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {
    500a:	223f      	movs	r2, #63	; 0x3f
    500c:	7833      	ldrb	r3, [r6, #0]
    500e:	4393      	bics	r3, r2
    5010:	d006      	beq.n	5020 <event_adv+0x60>

		struct ll_filter *wl = ctrl_filter_get();
    5012:	f003 f8e3 	bl	81dc <ctrl_filter_get>

		radio_filter_configure(wl->enable_bitmask,
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
    5016:	1c82      	adds	r2, r0, #2
	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {

		struct ll_filter *wl = ctrl_filter_get();

		radio_filter_configure(wl->enable_bitmask,
    5018:	7841      	ldrb	r1, [r0, #1]
    501a:	7800      	ldrb	r0, [r0, #0]
    501c:	f7fd fbf8 	bl	2810 <radio_filter_configure>
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
	}

	radio_tmr_start(1,
    5020:	0029      	movs	r1, r5
    5022:	68a2      	ldr	r2, [r4, #8]
    5024:	3109      	adds	r1, #9
    5026:	2001      	movs	r0, #1
    5028:	f7fd fc5c 	bl	28e4 <radio_tmr_start>
			ticks_at_expire +
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
			_radio.remainder_anchor);
	radio_tmr_end_capture();
    502c:	f7fd fd1e 	bl	2a6c <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    5030:	0020      	movs	r0, r4
    5032:	002a      	movs	r2, r5
    5034:	3094      	adds	r0, #148	; 0x94
    5036:	2105      	movs	r1, #5
    5038:	f7ff ffa0 	bl	4f7c <preempt_calc>
    503c:	2800      	cmp	r0, #0
    503e:	d004      	beq.n	504a <event_adv+0x8a>
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    5040:	2304      	movs	r3, #4
    5042:	7423      	strb	r3, [r4, #16]
		radio_disable();
    5044:	f7fd fb58 	bl	26f8 <radio_disable>
    5048:	e00a      	b.n	5060 <event_adv+0xa0>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    504a:	0003      	movs	r3, r0
    504c:	4a06      	ldr	r2, [pc, #24]	; (5068 <event_adv+0xa8>)
    504e:	0001      	movs	r1, r0
    5050:	f7fe fca0 	bl	3994 <ticker_job_idle_get>
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					RADIO_TICKER_USER_ID_WORKER,
					ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5054:	2302      	movs	r3, #2
    5056:	4398      	bics	r0, r3
    5058:	d002      	beq.n	5060 <event_adv+0xa0>
    505a:	b662      	cpsie	i
    505c:	2004      	movs	r0, #4
    505e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_A(0);
}
    5060:	bd70      	pop	{r4, r5, r6, pc}
    5062:	46c0      	nop			; (mov r8, r8)
    5064:	200005f4 	.word	0x200005f4
    5068:	0000448d 	.word	0x0000448d

0000506c <connection_configure>:
	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
}

static void connection_configure(struct connection *conn)
{
    506c:	b510      	push	{r4, lr}
    506e:	0004      	movs	r4, r0
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    5070:	f7fd faae 	bl	25d0 <radio_reset>
	radio_tx_power_set(0);
    5074:	2000      	movs	r0, #0
    5076:	f7fd fac7 	bl	2608 <radio_tx_power_set>
	radio_isr_set(isr);
    507a:	4809      	ldr	r0, [pc, #36]	; (50a0 <connection_configure+0x34>)
    507c:	f7fd fa90 	bl	25a0 <radio_isr_set>
}

static void connection_configure(struct connection *conn)
{
	adv_scan_conn_configure();
	radio_aa_set(conn->access_addr);
    5080:	0020      	movs	r0, r4
    5082:	3010      	adds	r0, #16
    5084:	f7fd fad8 	bl	2638 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    5088:	7da1      	ldrb	r1, [r4, #22]
    508a:	7d63      	ldrb	r3, [r4, #21]
    508c:	0409      	lsls	r1, r1, #16
    508e:	021b      	lsls	r3, r3, #8
    5090:	4319      	orrs	r1, r3
    5092:	7d23      	ldrb	r3, [r4, #20]
    5094:	4803      	ldr	r0, [pc, #12]	; (50a4 <connection_configure+0x38>)
    5096:	4319      	orrs	r1, r3
    5098:	f7fd fb5c 	bl	2754 <radio_crc_configure>
			    (((u32_t)conn->crc_init[2] << 16) |
			     ((u32_t)conn->crc_init[1] << 8) |
			     ((u32_t)conn->crc_init[0])));
}
    509c:	bd10      	pop	{r4, pc}
    509e:	46c0      	nop			; (mov r8, r8)
    50a0:	00005d3d 	.word	0x00005d3d
    50a4:	0000065b 	.word	0x0000065b

000050a8 <event_slave>:
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    50a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    50aa:	001c      	movs	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    50ac:	4b54      	ldr	r3, [pc, #336]	; (5200 <event_slave+0x158>)
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    50ae:	9000      	str	r0, [sp, #0]
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    50b0:	7bde      	ldrb	r6, [r3, #15]
    50b2:	001d      	movs	r5, r3
    50b4:	b2f6      	uxtb	r6, r6
    50b6:	2e00      	cmp	r6, #0
    50b8:	d000      	beq.n	50bc <event_slave+0x14>
    50ba:	e09a      	b.n	51f2 <event_slave+0x14a>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    50bc:	7b1b      	ldrb	r3, [r3, #12]
    50be:	8c22      	ldrh	r2, [r4, #32]
    50c0:	b2db      	uxtb	r3, r3
    50c2:	3207      	adds	r2, #7
    50c4:	4293      	cmp	r3, r2
    50c6:	d000      	beq.n	50ca <event_slave+0x22>
    50c8:	e093      	b.n	51f2 <event_slave+0x14a>
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    50ca:	2203      	movs	r2, #3
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    50cc:	b2db      	uxtb	r3, r3

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    50ce:	73ea      	strb	r2, [r5, #15]
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
    50d0:	732e      	strb	r6, [r5, #12]
	_radio.ticker_id_event =
    50d2:	736b      	strb	r3, [r5, #13]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    50d4:	9b00      	ldr	r3, [sp, #0]
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    50d6:	2701      	movs	r7, #1
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    50d8:	606b      	str	r3, [r5, #4]
	_radio.packet_counter = 0;
    50da:	23ca      	movs	r3, #202	; 0xca
    50dc:	005b      	lsls	r3, r3, #1
    50de:	54ee      	strb	r6, [r5, r3]
	_radio.crc_expire = 0;
    50e0:	2396      	movs	r3, #150	; 0x96
    50e2:	33ff      	adds	r3, #255	; 0xff
    50e4:	54ee      	strb	r6, [r5, r3]

	_radio.conn_curr = conn;
    50e6:	3b05      	subs	r3, #5
    50e8:	50ec      	str	r4, [r5, r3]
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    50ea:	742f      	strb	r7, [r5, #16]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    50ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	conn->latency_prepare = 0;

	connection_configure(conn);
    50ee:	0020      	movs	r0, r4
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    50f0:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    50f2:	8526      	strh	r6, [r4, #40]	; 0x28

	connection_configure(conn);
    50f4:	f7ff ffba 	bl	506c <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    50f8:	2096      	movs	r0, #150	; 0x96
    50fa:	f7fd fbeb 	bl	28d4 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
    50fe:	0031      	movs	r1, r6
    5100:	0030      	movs	r0, r6
    5102:	f7fd fb53 	bl	27ac <radio_switch_complete_and_tx>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    5106:	23b6      	movs	r3, #182	; 0xb6
    5108:	22d8      	movs	r2, #216	; 0xd8
    510a:	0026      	movs	r6, r4
    510c:	33ff      	adds	r3, #255	; 0xff
    510e:	5ceb      	ldrb	r3, [r5, r3]
    5110:	0052      	lsls	r2, r2, #1
    5112:	58aa      	ldr	r2, [r5, r2]
    5114:	009b      	lsls	r3, r3, #2
    5116:	5899      	ldr	r1, [r3, r2]
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    5118:	0020      	movs	r0, r4
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    511a:	3108      	adds	r1, #8
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    511c:	f7ff f9dc 	bl	44d8 <rx_packet_set>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    5120:	7f22      	ldrb	r2, [r4, #28]
    5122:	3617      	adds	r6, #23
    5124:	0693      	lsls	r3, r2, #26
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    5126:	0e9b      	lsrs	r3, r3, #26

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    5128:	0652      	lsls	r2, r2, #25
    512a:	d507      	bpl.n	513c <event_slave+0x94>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    512c:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    512e:	8be1      	ldrh	r1, [r4, #30]
    5130:	3801      	subs	r0, #1
    5132:	0032      	movs	r2, r6
    5134:	b280      	uxth	r0, r0
    5136:	f7ff fedf 	bl	4ef8 <chan_sel_2>
    513a:	e019      	b.n	5170 <event_slave+0xc8>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    513c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    513e:	9301      	str	r3, [sp, #4]
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    5140:	7fa3      	ldrb	r3, [r4, #30]
    5142:	3001      	adds	r0, #1
    5144:	4358      	muls	r0, r3
    5146:	7fe3      	ldrb	r3, [r4, #31]
    5148:	2125      	movs	r1, #37	; 0x25
    514a:	18c0      	adds	r0, r0, r3
    514c:	f7fb f998 	bl	480 <__aeabi_idivmod>
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5150:	2207      	movs	r2, #7
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    5152:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    5154:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5156:	08c3      	lsrs	r3, r0, #3
    5158:	5cf3      	ldrb	r3, [r6, r3]
    515a:	4011      	ands	r1, r2
    515c:	410b      	asrs	r3, r1
    515e:	423b      	tst	r3, r7
    5160:	d106      	bne.n	5170 <event_slave+0xc8>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    5162:	9901      	ldr	r1, [sp, #4]
    5164:	f7fb f8a2 	bl	2ac <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    5168:	0030      	movs	r0, r6
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    516a:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    516c:	f7fe fc89 	bl	3a82 <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    5170:	f7ff fa9c 	bl	46ac <chan_set>

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    5174:	6c22      	ldr	r2, [r4, #64]	; 0x40
    5176:	6c63      	ldr	r3, [r4, #68]	; 0x44
    5178:	189b      	adds	r3, r3, r2
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
    517a:	2200      	movs	r2, #0
    517c:	6422      	str	r2, [r4, #64]	; 0x40
	if (conn->role.slave.window_widening_event_us >
	    conn->role.slave.window_widening_max_us) {
    517e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    5180:	6463      	str	r3, [r4, #68]	; 0x44
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
	if (conn->role.slave.window_widening_event_us >
    5182:	4293      	cmp	r3, r2
    5184:	d900      	bls.n	5188 <event_slave+0xe0>
	    conn->role.slave.window_widening_max_us) {
		conn->role.slave.window_widening_event_us =
    5186:	6462      	str	r2, [r4, #68]	; 0x44
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    5188:	2600      	movs	r6, #0
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    518a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    518c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    518e:	9900      	ldr	r1, [sp, #0]
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    5190:	189b      	adds	r3, r3, r2
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    5192:	3109      	adds	r1, #9
    5194:	68aa      	ldr	r2, [r5, #8]
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    5196:	64e3      	str	r3, [r4, #76]	; 0x4c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    5198:	64a6      	str	r6, [r4, #72]	; 0x48

	remainder_us =
    519a:	0030      	movs	r0, r6
    519c:	f7fd fba2 	bl	28e4 <radio_tmr_start>
    51a0:	0007      	movs	r7, r0
		radio_tmr_start(0, ticks_at_expire +
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
	radio_tmr_aa_capture();
    51a2:	f7fd fc35 	bl	2a10 <radio_tmr_aa_capture>
    51a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    51a8:	0058      	lsls	r0, r3, #1
    51aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    51ac:	3368      	adds	r3, #104	; 0x68
    51ae:	18c3      	adds	r3, r0, r3

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
	hcto += addr_us_get(conn->phy_rx);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	hcto += radio_rx_ready_delay_get(0);
    51b0:	0030      	movs	r0, r6
    51b2:	9301      	str	r3, [sp, #4]
    51b4:	f7fd fa90 	bl	26d8 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_tmr_hcto_configure(hcto);
    51b8:	9b01      	ldr	r3, [sp, #4]
    51ba:	18ff      	adds	r7, r7, r3
    51bc:	1838      	adds	r0, r7, r0
    51be:	f7fd fbfb 	bl	29b8 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
    51c2:	f7fd fc53 	bl	2a6c <radio_tmr_end_capture>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    51c6:	8c21      	ldrh	r1, [r4, #32]
    51c8:	9a00      	ldr	r2, [sp, #0]
    51ca:	3107      	adds	r1, #7
    51cc:	b2c9      	uxtb	r1, r1
    51ce:	0020      	movs	r0, r4
    51d0:	f7ff fed4 	bl	4f7c <preempt_calc>
    51d4:	42b0      	cmp	r0, r6
    51d6:	d004      	beq.n	51e2 <event_slave+0x13a>
				      conn->handle), ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    51d8:	2304      	movs	r3, #4
    51da:	742b      	strb	r3, [r5, #16]
		radio_disable();
    51dc:	f7fd fa8c 	bl	26f8 <radio_disable>
    51e0:	e00a      	b.n	51f8 <event_slave+0x150>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    51e2:	0003      	movs	r3, r0
    51e4:	4a07      	ldr	r2, [pc, #28]	; (5204 <event_slave+0x15c>)
    51e6:	0001      	movs	r1, r0
    51e8:	f7fe fbd4 	bl	3994 <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    51ec:	2302      	movs	r3, #2
    51ee:	4398      	bics	r0, r3
    51f0:	d002      	beq.n	51f8 <event_slave+0x150>
    51f2:	b662      	cpsie	i
    51f4:	2004      	movs	r0, #4
    51f6:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    51f8:	2002      	movs	r0, #2
    51fa:	f7ff faf5 	bl	47e8 <packet_tx_enqueue>

	DEBUG_RADIO_START_S(0);
}
    51fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5200:	200005f4 	.word	0x200005f4
    5204:	0000448d 	.word	0x0000448d

00005208 <ctrl_tx_enqueue>:
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    5208:	0003      	movs	r3, r0
    520a:	0002      	movs	r2, r0
	p->next = node_tx;
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
    520c:	b530      	push	{r4, r5, lr}
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    520e:	33a4      	adds	r3, #164	; 0xa4
    5210:	781c      	ldrb	r4, [r3, #0]
    5212:	32ec      	adds	r2, #236	; 0xec

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
    5214:	09e3      	lsrs	r3, r4, #7
    5216:	d11c      	bne.n	5252 <ctrl_tx_enqueue+0x4a>
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    5218:	0003      	movs	r3, r0
    521a:	33e8      	adds	r3, #232	; 0xe8
    521c:	681b      	ldr	r3, [r3, #0]
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    521e:	2b00      	cmp	r3, #0
    5220:	d017      	beq.n	5252 <ctrl_tx_enqueue+0x4a>
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    5222:	0724      	lsls	r4, r4, #28
    5224:	d502      	bpl.n	522c <ctrl_tx_enqueue+0x24>
				    /* data PDU tx is not paused */
				    (conn->pause_tx == 0) ||
    5226:	6814      	ldr	r4, [r2, #0]
    5228:	42a3      	cmp	r3, r4
    522a:	d112      	bne.n	5252 <ctrl_tx_enqueue+0x4a>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    522c:	0005      	movs	r5, r0
    522e:	35f0      	adds	r5, #240	; 0xf0
    5230:	682c      	ldr	r4, [r5, #0]
    5232:	42a3      	cmp	r3, r4
    5234:	d101      	bne.n	523a <ctrl_tx_enqueue+0x32>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    5236:	681c      	ldr	r4, [r3, #0]
    5238:	602c      	str	r4, [r5, #0]
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
    523a:	6814      	ldr	r4, [r2, #0]
    523c:	2c00      	cmp	r4, #0
    523e:	d00d      	beq.n	525c <ctrl_tx_enqueue+0x54>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    5240:	682b      	ldr	r3, [r5, #0]
    5242:	6822      	ldr	r2, [r4, #0]
    5244:	429a      	cmp	r2, r3
    5246:	d001      	beq.n	524c <ctrl_tx_enqueue+0x44>
    5248:	0014      	movs	r4, r2
    524a:	e7fa      	b.n	5242 <ctrl_tx_enqueue+0x3a>
		p = p->next;
	}

	node_tx->next = p->next;
    524c:	600b      	str	r3, [r1, #0]
	p->next = node_tx;
    524e:	6021      	str	r1, [r4, #0]
    5250:	e013      	b.n	527a <ctrl_tx_enqueue+0x72>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
    5252:	6813      	ldr	r3, [r2, #0]
    5254:	2b00      	cmp	r3, #0
    5256:	d106      	bne.n	5266 <ctrl_tx_enqueue+0x5e>
			node_tx->next = conn->pkt_tx_head;
    5258:	0003      	movs	r3, r0
    525a:	33e8      	adds	r3, #232	; 0xe8
    525c:	681c      	ldr	r4, [r3, #0]
    525e:	600c      	str	r4, [r1, #0]
			conn->pkt_tx_head = node_tx;
    5260:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    5262:	6011      	str	r1, [r2, #0]
    5264:	e009      	b.n	527a <ctrl_tx_enqueue+0x72>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    5266:	0002      	movs	r2, r0
    5268:	32f0      	adds	r2, #240	; 0xf0
    526a:	6812      	ldr	r2, [r2, #0]
    526c:	681c      	ldr	r4, [r3, #0]
    526e:	4294      	cmp	r4, r2
    5270:	d001      	beq.n	5276 <ctrl_tx_enqueue+0x6e>
    5272:	0023      	movs	r3, r4
    5274:	e7fa      	b.n	526c <ctrl_tx_enqueue+0x64>
		p = p->next;
	}

	node_tx->next = p->next;
    5276:	600a      	str	r2, [r1, #0]
	p->next = node_tx;
    5278:	6019      	str	r1, [r3, #0]
			ctrl_tx_enqueue_tail(conn, node_tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
    527a:	680b      	ldr	r3, [r1, #0]
    527c:	2b00      	cmp	r3, #0
    527e:	d101      	bne.n	5284 <ctrl_tx_enqueue+0x7c>
		conn->pkt_tx_last = node_tx;
    5280:	30f4      	adds	r0, #244	; 0xf4
    5282:	6001      	str	r1, [r0, #0]
	}
}
    5284:	bd30      	pop	{r4, r5, pc}
	...

00005288 <event_connection_prepare>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    5288:	b5f0      	push	{r4, r5, r6, r7, lr}
    528a:	b091      	sub	sp, #68	; 0x44
    528c:	900a      	str	r0, [sp, #40]	; 0x28
	u16_t event_counter;

	LL_ASSERT(!_radio.ticker_id_prepare);
    528e:	48bd      	ldr	r0, [pc, #756]	; (5584 <event_connection_prepare+0x2fc>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    5290:	910e      	str	r1, [sp, #56]	; 0x38
    5292:	001c      	movs	r4, r3
	u16_t event_counter;

	LL_ASSERT(!_radio.ticker_id_prepare);
    5294:	7b03      	ldrb	r3, [r0, #12]
    5296:	0005      	movs	r5, r0
    5298:	2b00      	cmp	r3, #0
    529a:	d001      	beq.n	52a0 <event_connection_prepare+0x18>
    529c:	f000 fbeb 	bl	5a76 <event_connection_prepare+0x7ee>
	_radio.ticker_id_prepare =
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    52a0:	0026      	movs	r6, r4
				     struct connection *conn)
{
	u16_t event_counter;

	LL_ASSERT(!_radio.ticker_id_prepare);
	_radio.ticker_id_prepare =
    52a2:	8c23      	ldrh	r3, [r4, #32]
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    52a4:	3634      	adds	r6, #52	; 0x34
				     struct connection *conn)
{
	u16_t event_counter;

	LL_ASSERT(!_radio.ticker_id_prepare);
	_radio.ticker_id_prepare =
    52a6:	3307      	adds	r3, #7
    52a8:	b2db      	uxtb	r3, r3
    52aa:	7303      	strb	r3, [r0, #12]
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    52ac:	7833      	ldrb	r3, [r6, #0]
    52ae:	07db      	lsls	r3, r3, #31
    52b0:	d509      	bpl.n	52c6 <event_connection_prepare+0x3e>
		conn->role.slave.window_widening_prepare_us +=
    52b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    52b4:	1c53      	adds	r3, r2, #1
    52b6:	434b      	muls	r3, r1
    52b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    52ba:	185b      	adds	r3, r3, r1
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
		    conn->role.slave.window_widening_max_us) {
    52bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	_radio.ticker_id_prepare =
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
		conn->role.slave.window_widening_prepare_us +=
    52be:	6423      	str	r3, [r4, #64]	; 0x40
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
    52c0:	428b      	cmp	r3, r1
    52c2:	d900      	bls.n	52c6 <event_connection_prepare+0x3e>
		    conn->role.slave.window_widening_max_us) {
			conn->role.slave.window_widening_prepare_us =
    52c4:	6421      	str	r1, [r4, #64]	; 0x40
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    52c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
		event_phy_req_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* check if procedure is requested */
	if (conn->llcp_ack != conn->llcp_req) {
    52c8:	0027      	movs	r7, r4
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    52ca:	18d2      	adds	r2, r2, r3

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    52cc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    52ce:	b292      	uxth	r2, r2
    52d0:	8522      	strh	r2, [r4, #40]	; 0x28

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    52d2:	18d2      	adds	r2, r2, r3
    52d4:	b293      	uxth	r3, r2
    52d6:	930b      	str	r3, [sp, #44]	; 0x2c
		event_phy_req_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* check if procedure is requested */
	if (conn->llcp_ack != conn->llcp_req) {
    52d8:	0023      	movs	r3, r4
    52da:	3759      	adds	r7, #89	; 0x59
    52dc:	3358      	adds	r3, #88	; 0x58
    52de:	783a      	ldrb	r2, [r7, #0]
    52e0:	781b      	ldrb	r3, [r3, #0]
    52e2:	429a      	cmp	r2, r3
    52e4:	d101      	bne.n	52ea <event_connection_prepare+0x62>
    52e6:	f000 fbc9 	bl	5a7c <event_connection_prepare+0x7f4>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    52ea:	2200      	movs	r2, #0
    52ec:	2305      	movs	r3, #5
    52ee:	0010      	movs	r0, r2
    52f0:	0011      	movs	r1, r2
    52f2:	f7ff fba5 	bl	4a40 <event_stop>

		switch (conn->llcp_type) {
    52f6:	0023      	movs	r3, r4
    52f8:	335a      	adds	r3, #90	; 0x5a
    52fa:	7818      	ldrb	r0, [r3, #0]
    52fc:	3801      	subs	r0, #1
    52fe:	2803      	cmp	r0, #3
    5300:	d900      	bls.n	5304 <event_connection_prepare+0x7c>
    5302:	e3b8      	b.n	5a76 <event_connection_prepare+0x7ee>
    5304:	f7fa ff42 	bl	18c <__gnu_thumb1_case_uhi>
    5308:	02ca0004 	.word	0x02ca0004
    530c:	03420316 	.word	0x03420316
					   u32_t ticks_at_expire)
{
	struct connection *conn_upd;
	u16_t instant_latency;

	conn_upd = _radio.conn_upd;
    5310:	23fe      	movs	r3, #254	; 0xfe
    5312:	005b      	lsls	r3, r3, #1
    5314:	58ea      	ldr	r2, [r5, r3]

	/* set mutex */
	if (!conn_upd) {
    5316:	2a00      	cmp	r2, #0
    5318:	d100      	bne.n	531c <event_connection_prepare+0x94>
		_radio.conn_upd = conn;
    531a:	50ec      	str	r4, [r5, r3]
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
		 0xffff);
	if (conn->llcp.connection_update.state) {
    531c:	0027      	movs	r7, r4
    531e:	2307      	movs	r3, #7
    5320:	3785      	adds	r7, #133	; 0x85
    5322:	7839      	ldrb	r1, [r7, #0]
    5324:	400b      	ands	r3, r1
    5326:	d100      	bne.n	532a <event_connection_prepare+0xa2>
    5328:	e138      	b.n	559c <event_connection_prepare+0x314>
		if (((conn_upd == 0) || (conn_upd == conn)) &&
    532a:	2a00      	cmp	r2, #0
    532c:	d002      	beq.n	5334 <event_connection_prepare+0xac>
    532e:	4294      	cmp	r4, r2
    5330:	d000      	beq.n	5334 <event_connection_prepare+0xac>
    5332:	e3a3      	b.n	5a7c <event_connection_prepare+0x7f4>
    5334:	3b04      	subs	r3, #4
    5336:	2b01      	cmp	r3, #1
    5338:	d800      	bhi.n	533c <event_connection_prepare+0xb4>
    533a:	e39f      	b.n	5a7c <event_connection_prepare+0x7f4>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			struct radio_pdu_node_tx *node_tx;
			struct pdu_data *pdu_ctrl_tx;
			u8_t state;

			node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    533c:	0028      	movs	r0, r5
    533e:	30d1      	adds	r0, #209	; 0xd1
    5340:	30ff      	adds	r0, #255	; 0xff
    5342:	f7fd f813 	bl	236c <mem_acquire>
    5346:	1e05      	subs	r5, r0, #0
			if (!node_tx) {
    5348:	d100      	bne.n	534c <event_connection_prepare+0xc4>
    534a:	e397      	b.n	5a7c <event_connection_prepare+0x7f4>
			pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			state = conn->llcp.connection_update.state;
    534c:	783b      	ldrb	r3, [r7, #0]
    534e:	075b      	lsls	r3, r3, #29
    5350:	0f5b      	lsrs	r3, r3, #29
			if ((state == LLCP_CONN_STATE_RSP) &&
    5352:	2b03      	cmp	r3, #3
    5354:	d105      	bne.n	5362 <event_connection_prepare+0xda>
    5356:	7833      	ldrb	r3, [r6, #0]
    5358:	07db      	lsls	r3, r3, #31
    535a:	d500      	bpl.n	535e <event_connection_prepare+0xd6>
    535c:	e0bc      	b.n	54d8 <event_connection_prepare+0x250>
			    (conn->role.master.role == 0)) {
				state = LLCP_CONN_STATE_INITIATE;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
				fp_mayfly_select_or_use =
    535e:	4f8a      	ldr	r7, [pc, #552]	; (5588 <event_connection_prepare+0x300>)
    5360:	e008      	b.n	5374 <event_connection_prepare+0xec>
					mayfly_sched_win_offset_select;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			}

			switch (state) {
    5362:	2b02      	cmp	r3, #2
    5364:	d057      	beq.n	5416 <event_connection_prepare+0x18e>
    5366:	2b03      	cmp	r3, #3
    5368:	d100      	bne.n	536c <event_connection_prepare+0xe4>
    536a:	e0b5      	b.n	54d8 <event_connection_prepare+0x250>
    536c:	2b01      	cmp	r3, #1
    536e:	d000      	beq.n	5372 <event_connection_prepare+0xea>
    5370:	e381      	b.n	5a76 <event_connection_prepare+0x7ee>
			}

			pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    5372:	4f86      	ldr	r7, [pc, #536]	; (558c <event_connection_prepare+0x304>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			}

			switch (state) {
			case LLCP_CONN_STATE_INITIATE:
				if (conn->role.master.role == 0) {
    5374:	2301      	movs	r3, #1
    5376:	7832      	ldrb	r2, [r6, #0]
    5378:	401a      	ands	r2, r3
    537a:	d14c      	bne.n	5416 <event_connection_prepare+0x18e>
			  u32_t ticks_at_expire,
			  struct mayfly *mayfly_sched_offset,
			  void (*fp_mayfly_select_or_use)(void *))
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    537c:	0021      	movs	r1, r4
    537e:	2007      	movs	r0, #7
    5380:	3185      	adds	r1, #133	; 0x85
    5382:	780b      	ldrb	r3, [r1, #0]

	/* set instant */
	conn->llcp.connection_update.instant =
    5384:	0026      	movs	r6, r4
			  u32_t ticks_at_expire,
			  struct mayfly *mayfly_sched_offset,
			  void (*fp_mayfly_select_or_use)(void *))
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    5386:	4383      	bics	r3, r0
    5388:	700b      	strb	r3, [r1, #0]

	/* set instant */
	conn->llcp.connection_update.instant =
    538a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    538c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    538e:	3306      	adds	r3, #6
    5390:	18cb      	adds	r3, r1, r3
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5392:	2103      	movs	r1, #3
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;

	/* set instant */
	conn->llcp.connection_update.instant =
    5394:	3664      	adds	r6, #100	; 0x64
    5396:	8033      	strh	r3, [r6, #0]
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5398:	792b      	ldrb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    539a:	71ea      	strb	r2, [r5, #7]
	/* set instant */
	conn->llcp.connection_update.instant =
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    539c:	430b      	orrs	r3, r1
    539e:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    53a0:	230c      	movs	r3, #12
    53a2:	716b      	strb	r3, [r5, #5]
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
    53a4:	0023      	movs	r3, r4
    53a6:	3384      	adds	r3, #132	; 0x84
    53a8:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    53aa:	4979      	ldr	r1, [pc, #484]	; (5590 <event_connection_prepare+0x308>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
    53ac:	722b      	strb	r3, [r5, #8]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    53ae:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    53b0:	f7fa fef6 	bl	1a0 <__aeabi_uidiv>
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
    53b4:	0023      	movs	r3, r4
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    53b6:	b280      	uxth	r0, r0
    53b8:	7268      	strb	r0, [r5, #9]
    53ba:	0a00      	lsrs	r0, r0, #8
    53bc:	72a8      	strb	r0, [r5, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
    53be:	335c      	adds	r3, #92	; 0x5c
    53c0:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
    53c2:	72eb      	strb	r3, [r5, #11]
    53c4:	0a1b      	lsrs	r3, r3, #8
    53c6:	732b      	strb	r3, [r5, #12]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
    53c8:	0023      	movs	r3, r4
    53ca:	335e      	adds	r3, #94	; 0x5e
    53cc:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
    53ce:	736b      	strb	r3, [r5, #13]
    53d0:	0a1b      	lsrs	r3, r3, #8
    53d2:	73ab      	strb	r3, [r5, #14]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
		conn->llcp.connection_update.timeout;
    53d4:	0023      	movs	r3, r4
    53d6:	3360      	adds	r3, #96	; 0x60
    53d8:	881b      	ldrh	r3, [r3, #0]
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
    53da:	73eb      	strb	r3, [r5, #15]
    53dc:	0a1b      	lsrs	r3, r3, #8
    53de:	742b      	strb	r3, [r5, #16]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
		conn->llcp.connection_update.instant;
    53e0:	8833      	ldrh	r3, [r6, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
    53e2:	746b      	strb	r3, [r5, #17]
    53e4:	0a1b      	lsrs	r3, r3, #8
    53e6:	74ab      	strb	r3, [r5, #18]

		/* calculate window offset that places the connection in the
		 * next available slot after existing masters.
		 */
		conn->llcp.connection_update.ticks_ref = ticks_at_expire;
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    53e8:	6822      	ldr	r2, [r4, #0]
		u32_t retval;

		/* calculate window offset that places the connection in the
		 * next available slot after existing masters.
		 */
		conn->llcp.connection_update.ticks_ref = ticks_at_expire;
    53ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    53ec:	6763      	str	r3, [r4, #116]	; 0x74
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    53ee:	2a00      	cmp	r2, #0
    53f0:	da0a      	bge.n	5408 <event_connection_prepare+0x180>
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->llcp.connection_update.ticks_ref -=
    53f2:	6861      	ldr	r1, [r4, #4]
    53f4:	68a3      	ldr	r3, [r4, #8]
    53f6:	428b      	cmp	r3, r1
    53f8:	d200      	bcs.n	53fc <event_connection_prepare+0x174>
    53fa:	000b      	movs	r3, r1
    53fc:	0052      	lsls	r2, r2, #1
    53fe:	0852      	lsrs	r2, r2, #1
    5400:	1a9b      	subs	r3, r3, r2
    5402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5404:	189b      	adds	r3, r3, r2
    5406:	6763      	str	r3, [r4, #116]	; 0x74
				((conn->hdr.ticks_xtal_to_start &
				  (~((u32_t)1 << 31))) -
				 ticks_prepare_to_start);
		}

		conn->llcp.connection_update.pdu_win_offset = (u16_t *)
    5408:	002a      	movs	r2, r5
    540a:	1d23      	adds	r3, r4, #4
    540c:	3209      	adds	r2, #9
    540e:	67da      	str	r2, [r3, #124]	; 0x7c
			&pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_offset;

		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    5410:	4b60      	ldr	r3, [pc, #384]	; (5594 <event_connection_prepare+0x30c>)
    5412:	60df      	str	r7, [r3, #12]
    5414:	e056      	b.n	54c4 <event_connection_prepare+0x23c>
					    struct pdu_data *pdu_ctrl_tx,
					    u32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    5416:	0022      	movs	r2, r4
    5418:	2107      	movs	r1, #7
    541a:	3285      	adds	r2, #133	; 0x85
    541c:	7813      	ldrb	r3, [r2, #0]
    541e:	438b      	bics	r3, r1
    5420:	3902      	subs	r1, #2
    5422:	430b      	orrs	r3, r1
    5424:	7013      	strb	r3, [r2, #0]

	/* place the conn param req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5426:	2203      	movs	r2, #3
    5428:	792b      	ldrb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    542a:	0021      	movs	r1, r4
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;

	/* place the conn param req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    542c:	4313      	orrs	r3, r2
    542e:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    5430:	2318      	movs	r3, #24
    5432:	716b      	strb	r3, [r5, #5]
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
    5434:	3b09      	subs	r3, #9
    5436:	71eb      	strb	r3, [r5, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    5438:	315c      	adds	r1, #92	; 0x5c
    543a:	880b      	ldrh	r3, [r1, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    543c:	2200      	movs	r2, #0
    543e:	722b      	strb	r3, [r5, #8]
    5440:	0a1b      	lsrs	r3, r3, #8
    5442:	726b      	strb	r3, [r5, #9]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
    5444:	880b      	ldrh	r3, [r1, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    5446:	212c      	movs	r1, #44	; 0x2c
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    5448:	72ab      	strb	r3, [r5, #10]
    544a:	0a1b      	lsrs	r3, r3, #8
    544c:	72eb      	strb	r3, [r5, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
    544e:	0023      	movs	r3, r4
    5450:	335e      	adds	r3, #94	; 0x5e
    5452:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    5454:	732b      	strb	r3, [r5, #12]
    5456:	0a1b      	lsrs	r3, r3, #8
    5458:	736b      	strb	r3, [r5, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
    545a:	0023      	movs	r3, r4
    545c:	3360      	adds	r3, #96	; 0x60
    545e:	881b      	ldrh	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
    5460:	742a      	strb	r2, [r5, #16]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    5462:	73ab      	strb	r3, [r5, #14]
    5464:	0a1b      	lsrs	r3, r3, #8
    5466:	73eb      	strb	r3, [r5, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    5468:	466b      	mov	r3, sp
    546a:	185b      	adds	r3, r3, r1
    546c:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    546e:	0029      	movs	r1, r5
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    5470:	746b      	strb	r3, [r5, #17]
    5472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    5474:	3113      	adds	r1, #19
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    5476:	0a1b      	lsrs	r3, r3, #8
    5478:	74ab      	strb	r3, [r5, #18]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 = 0xffff;
    547a:	2301      	movs	r3, #1
    547c:	425b      	negs	r3, r3
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    547e:	74ea      	strb	r2, [r5, #19]
    5480:	704a      	strb	r2, [r1, #1]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 = 0xffff;
    5482:	756b      	strb	r3, [r5, #21]
    5484:	75ab      	strb	r3, [r5, #22]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 = 0xffff;
    5486:	75eb      	strb	r3, [r5, #23]
    5488:	762b      	strb	r3, [r5, #24]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 = 0xffff;
    548a:	766b      	strb	r3, [r5, #25]
    548c:	76ab      	strb	r3, [r5, #26]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 = 0xffff;
    548e:	76eb      	strb	r3, [r5, #27]
    5490:	772b      	strb	r3, [r5, #28]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 = 0xffff;
    5492:	776b      	strb	r3, [r5, #29]
    5494:	77ab      	strb	r3, [r5, #30]

	/* Start Procedure Timeout */
	conn->procedure_expire = conn->procedure_reload;
    5496:	8e23      	ldrh	r3, [r4, #48]	; 0x30
#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
	{
		u32_t retval;

		conn->llcp.connection_update.ticks_ref = ticks_at_expire;
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    5498:	6822      	ldr	r2, [r4, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 = 0xffff;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 = 0xffff;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 = 0xffff;

	/* Start Procedure Timeout */
	conn->procedure_expire = conn->procedure_reload;
    549a:	8663      	strh	r3, [r4, #50]	; 0x32

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
	{
		u32_t retval;

		conn->llcp.connection_update.ticks_ref = ticks_at_expire;
    549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    549e:	6763      	str	r3, [r4, #116]	; 0x74
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    54a0:	2a00      	cmp	r2, #0
    54a2:	da0a      	bge.n	54ba <event_connection_prepare+0x232>
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->llcp.connection_update.ticks_ref -=
    54a4:	6860      	ldr	r0, [r4, #4]
    54a6:	68a3      	ldr	r3, [r4, #8]
    54a8:	4283      	cmp	r3, r0
    54aa:	d200      	bcs.n	54ae <event_connection_prepare+0x226>
    54ac:	0003      	movs	r3, r0
    54ae:	0052      	lsls	r2, r2, #1
    54b0:	0852      	lsrs	r2, r2, #1
    54b2:	1a9b      	subs	r3, r3, r2
    54b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    54b6:	189b      	adds	r3, r3, r2
    54b8:	6763      	str	r3, [r4, #116]	; 0x74
				((conn->hdr.ticks_xtal_to_start &
				  (~((u32_t)1 << 31))) -
				 ticks_prepare_to_start);
		}

		conn->llcp.connection_update.pdu_win_offset = (u16_t *)
    54ba:	1d23      	adds	r3, r4, #4
    54bc:	67d9      	str	r1, [r3, #124]	; 0x7c
			&pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0;

		mayfly_sched_offset->fp = mayfly_sched_free_win_offset_calc;
    54be:	4a36      	ldr	r2, [pc, #216]	; (5598 <event_connection_prepare+0x310>)
    54c0:	4b34      	ldr	r3, [pc, #208]	; (5594 <event_connection_prepare+0x30c>)
    54c2:	60da      	str	r2, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    54c4:	2201      	movs	r2, #1
    54c6:	2000      	movs	r0, #0
    54c8:	0011      	movs	r1, r2

		conn->llcp.connection_update.pdu_win_offset = (u16_t *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0;

		mayfly_sched_offset->fp = mayfly_sched_free_win_offset_calc;
		mayfly_sched_offset->param = (void *)conn;
    54ca:	609c      	str	r4, [r3, #8]

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    54cc:	f7fc fe46 	bl	215c <mayfly_enqueue>
					RADIO_TICKER_USER_ID_JOB, 1,
					mayfly_sched_offset);
		LL_ASSERT(!retval);
    54d0:	2800      	cmp	r0, #0
    54d2:	d100      	bne.n	54d6 <event_connection_prepare+0x24e>
    54d4:	e208      	b.n	58e8 <event_connection_prepare+0x660>
    54d6:	e2ce      	b.n	5a76 <event_connection_prepare+0x7ee>

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    54d8:	0023      	movs	r3, r4
    54da:	3358      	adds	r3, #88	; 0x58
    54dc:	781a      	ldrb	r2, [r3, #0]

	/* reset mutex */
	_radio.conn_upd = NULL;
    54de:	2100      	movs	r1, #0

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    54e0:	705a      	strb	r2, [r3, #1]

	/* reset mutex */
	_radio.conn_upd = NULL;
    54e2:	23fe      	movs	r3, #254	; 0xfe
    54e4:	4a27      	ldr	r2, [pc, #156]	; (5584 <event_connection_prepare+0x2fc>)
    54e6:	005b      	lsls	r3, r3, #1
    54e8:	50d1      	str	r1, [r2, r3]

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    54ea:	2203      	movs	r2, #3
    54ec:	792b      	ldrb	r3, [r5, #4]
    54ee:	4313      	orrs	r3, r2
    54f0:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    54f2:	2318      	movs	r3, #24
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    54f4:	0022      	movs	r2, r4

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    54f6:	716b      	strb	r3, [r5, #5]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    54f8:	3b08      	subs	r3, #8
    54fa:	71eb      	strb	r3, [r5, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    54fc:	325c      	adds	r2, #92	; 0x5c
    54fe:	8813      	ldrh	r3, [r2, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    5500:	722b      	strb	r3, [r5, #8]
    5502:	0a1b      	lsrs	r3, r3, #8
    5504:	726b      	strb	r3, [r5, #9]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
    5506:	8813      	ldrh	r3, [r2, #0]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    5508:	72ab      	strb	r3, [r5, #10]
    550a:	0a1b      	lsrs	r3, r3, #8
    550c:	72eb      	strb	r3, [r5, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
    550e:	0023      	movs	r3, r4
    5510:	335e      	adds	r3, #94	; 0x5e
    5512:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    5514:	732b      	strb	r3, [r5, #12]
    5516:	0a1b      	lsrs	r3, r3, #8
    5518:	736b      	strb	r3, [r5, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
    551a:	0023      	movs	r3, r4
    551c:	3360      	adds	r3, #96	; 0x60
    551e:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    5520:	73ab      	strb	r3, [r5, #14]
    5522:	0a1b      	lsrs	r3, r3, #8
    5524:	73eb      	strb	r3, [r5, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
    5526:	0023      	movs	r3, r4
    5528:	3362      	adds	r3, #98	; 0x62
    552a:	781b      	ldrb	r3, [r3, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
    552c:	742b      	strb	r3, [r5, #16]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
    552e:	0023      	movs	r3, r4
    5530:	3364      	adds	r3, #100	; 0x64
    5532:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
    5534:	746b      	strb	r3, [r5, #17]
    5536:	0a1b      	lsrs	r3, r3, #8
    5538:	74ab      	strb	r3, [r5, #18]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
    553a:	0023      	movs	r3, r4
    553c:	3366      	adds	r3, #102	; 0x66
    553e:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
    5540:	74eb      	strb	r3, [r5, #19]
    5542:	0a1b      	lsrs	r3, r3, #8
    5544:	752b      	strb	r3, [r5, #20]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
    5546:	0023      	movs	r3, r4
    5548:	3368      	adds	r3, #104	; 0x68
    554a:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
    554c:	756b      	strb	r3, [r5, #21]
    554e:	0a1b      	lsrs	r3, r3, #8
    5550:	75ab      	strb	r3, [r5, #22]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
    5552:	0023      	movs	r3, r4
    5554:	336a      	adds	r3, #106	; 0x6a
    5556:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
    5558:	75eb      	strb	r3, [r5, #23]
    555a:	0a1b      	lsrs	r3, r3, #8
    555c:	762b      	strb	r3, [r5, #24]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
    555e:	0023      	movs	r3, r4
    5560:	336c      	adds	r3, #108	; 0x6c
    5562:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
    5564:	766b      	strb	r3, [r5, #25]
    5566:	0a1b      	lsrs	r3, r3, #8
    5568:	76ab      	strb	r3, [r5, #26]
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
		conn->llcp.connection_update.offset4;
    556a:	0023      	movs	r3, r4
    556c:	336e      	adds	r3, #110	; 0x6e
    556e:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
    5570:	76eb      	strb	r3, [r5, #27]
    5572:	0a1b      	lsrs	r3, r3, #8
    5574:	772b      	strb	r3, [r5, #28]
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
		conn->llcp.connection_update.offset5;
    5576:	0023      	movs	r3, r4
    5578:	3370      	adds	r3, #112	; 0x70
    557a:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
    557c:	776b      	strb	r3, [r5, #29]
    557e:	0a1b      	lsrs	r3, r3, #8
    5580:	77ab      	strb	r3, [r5, #30]
    5582:	e1b1      	b.n	58e8 <event_connection_prepare+0x660>
    5584:	200005f4 	.word	0x200005f4
    5588:	000041a1 	.word	0x000041a1
    558c:	00004421 	.word	0x00004421
    5590:	000004e2 	.word	0x000004e2
    5594:	200001e8 	.word	0x200001e8
    5598:	00004285 	.word	0x00004285
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
    559c:	0022      	movs	r2, r4
    559e:	3264      	adds	r2, #100	; 0x64
	/* set mutex */
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
    55a0:	8812      	ldrh	r2, [r2, #0]
    55a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    55a4:	1a8a      	subs	r2, r1, r2
				break;
			}

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (instant_latency <= 0x7FFF) {
    55a6:	b296      	uxth	r6, r2
    55a8:	0412      	lsls	r2, r2, #16
    55aa:	d500      	bpl.n	55ae <event_connection_prepare+0x326>
    55ac:	e266      	b.n	5a7c <event_connection_prepare+0x7f4>
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    55ae:	0022      	movs	r2, r4
    55b0:	3258      	adds	r2, #88	; 0x58
    55b2:	7811      	ldrb	r1, [r2, #0]

		/* Reset ticker_id_prepare as role is not continued further
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;
    55b4:	732b      	strb	r3, [r5, #12]
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    55b6:	7051      	strb	r1, [r2, #1]
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;

		/* reset mutex */
		if (_radio.conn_upd == conn) {
    55b8:	22fe      	movs	r2, #254	; 0xfe
    55ba:	0052      	lsls	r2, r2, #1
    55bc:	58a9      	ldr	r1, [r5, r2]
    55be:	428c      	cmp	r4, r1
    55c0:	d100      	bne.n	55c4 <event_connection_prepare+0x33c>
			_radio.conn_upd = NULL;
    55c2:	50ab      	str	r3, [r5, r2]
    55c4:	0027      	movs	r7, r4
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
    55c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    55c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    55ca:	375c      	adds	r7, #92	; 0x5c
    55cc:	4293      	cmp	r3, r2
    55ce:	d10d      	bne.n	55ec <event_connection_prepare+0x364>
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
		    (conn->llcp.connection_update.timeout !=
    55d0:	0023      	movs	r3, r4
    55d2:	3360      	adds	r3, #96	; 0x60
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
    55d4:	881d      	ldrh	r5, [r3, #0]
    55d6:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    55d8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    55da:	21fa      	movs	r1, #250	; 0xfa
    55dc:	4358      	muls	r0, r3
    55de:	237d      	movs	r3, #125	; 0x7d
    55e0:	0089      	lsls	r1, r1, #2
    55e2:	4358      	muls	r0, r3
    55e4:	f7fa fe66 	bl	2b4 <__aeabi_idiv>
    55e8:	4285      	cmp	r5, r0
    55ea:	d01d      	beq.n	5628 <event_connection_prepare+0x3a0>
		    (conn->llcp.connection_update.timeout !=
		     (conn->conn_interval * conn->supervision_reload * 125 / 1000))) {
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    55ec:	2002      	movs	r0, #2
    55ee:	f7fe fa63 	bl	3ab8 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    55f2:	2800      	cmp	r0, #0
    55f4:	d100      	bne.n	55f8 <event_connection_prepare+0x370>
    55f6:	e23e      	b.n	5a76 <event_connection_prepare+0x7ee>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    55f8:	8c23      	ldrh	r3, [r4, #32]
    55fa:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    55fc:	2308      	movs	r3, #8
    55fe:	7103      	strb	r3, [r0, #4]
			pdu_data_rx =
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
    5600:	2300      	movs	r3, #0
    5602:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
    5604:	883b      	ldrh	r3, [r7, #0]
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
    5606:	7303      	strb	r3, [r0, #12]
    5608:	0a1b      	lsrs	r3, r3, #8
    560a:	7343      	strb	r3, [r0, #13]
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
				conn->llcp.connection_update.latency;
    560c:	0023      	movs	r3, r4
    560e:	335e      	adds	r3, #94	; 0x5e
    5610:	881b      	ldrh	r3, [r3, #0]
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
    5612:	7383      	strb	r3, [r0, #14]
    5614:	0a1b      	lsrs	r3, r3, #8
    5616:	73c3      	strb	r3, [r0, #15]
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
				conn->llcp.connection_update.timeout;
    5618:	0023      	movs	r3, r4
    561a:	3360      	adds	r3, #96	; 0x60
    561c:	881b      	ldrh	r3, [r3, #0]
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
    561e:	7403      	strb	r3, [r0, #16]
    5620:	0a1b      	lsrs	r3, r3, #8
    5622:	7443      	strb	r3, [r0, #17]
				conn->llcp.connection_update.timeout;

			/* enqueue connection update complete structure
			 * into queue.
			 */
			packet_rx_enqueue();
    5624:	f7fe ffe0 	bl	45e8 <packet_rx_enqueue>
		}

		/* restore to normal prepare */
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    5628:	6823      	ldr	r3, [r4, #0]
    562a:	2b00      	cmp	r3, #0
    562c:	da0b      	bge.n	5646 <event_connection_prepare+0x3be>
			u32_t ticks_prepare_to_start =
    562e:	6861      	ldr	r1, [r4, #4]
    5630:	68a2      	ldr	r2, [r4, #8]
    5632:	428a      	cmp	r2, r1
    5634:	d200      	bcs.n	5638 <event_connection_prepare+0x3b0>
    5636:	000a      	movs	r2, r1
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
    5638:	005b      	lsls	r3, r3, #1
    563a:	085b      	lsrs	r3, r3, #1
    563c:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    563e:	1ad3      	subs	r3, r2, r3
    5640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5642:	18d3      	adds	r3, r2, r3
    5644:	930a      	str	r3, [sp, #40]	; 0x28
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    5646:	8ca5      	ldrh	r5, [r4, #36]	; 0x24
		latency = conn_interval_old /
			conn->llcp.connection_update.interval;
    5648:	883f      	ldrh	r7, [r7, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    564a:	4375      	muls	r5, r6
    564c:	b2ad      	uxth	r5, r5
		latency = conn_interval_old /
    564e:	0039      	movs	r1, r7
    5650:	0028      	movs	r0, r5
    5652:	f7fa fda5 	bl	1a0 <__aeabi_uidiv>
    5656:	b283      	uxth	r3, r0
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
    5658:	0018      	movs	r0, r3
    565a:	4378      	muls	r0, r7
    565c:	b280      	uxth	r0, r0
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
		latency = conn_interval_old /
    565e:	930b      	str	r3, [sp, #44]	; 0x2c
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
			conn->llcp.connection_update.interval;
		if (conn_interval_new > conn_interval_old) {
    5660:	4285      	cmp	r5, r0
    5662:	d20f      	bcs.n	5684 <event_connection_prepare+0x3fc>
			ticks_at_expire +=
    5664:	2324      	movs	r3, #36	; 0x24
    5666:	1b40      	subs	r0, r0, r5
    5668:	4add      	ldr	r2, [pc, #884]	; (59e0 <event_connection_prepare+0x758>)
    566a:	33ff      	adds	r3, #255	; 0xff
    566c:	17c1      	asrs	r1, r0, #31
    566e:	f7fa ff2d 	bl	4cc <__aeabi_lmul>
    5672:	2307      	movs	r3, #7
    5674:	4adb      	ldr	r2, [pc, #876]	; (59e4 <event_connection_prepare+0x75c>)
    5676:	f7fa ff09 	bl	48c <__aeabi_uldivmod>
    567a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    567c:	0200      	lsls	r0, r0, #8
    567e:	0a00      	lsrs	r0, r0, #8
    5680:	18c3      	adds	r3, r0, r3
    5682:	e00e      	b.n	56a2 <event_connection_prepare+0x41a>
				TICKER_US_TO_TICKS((conn_interval_new -
						    conn_interval_old) * 1250);
		} else {
			ticks_at_expire -=
    5684:	2324      	movs	r3, #36	; 0x24
    5686:	1a28      	subs	r0, r5, r0
    5688:	4ad5      	ldr	r2, [pc, #852]	; (59e0 <event_connection_prepare+0x758>)
    568a:	33ff      	adds	r3, #255	; 0xff
    568c:	17c1      	asrs	r1, r0, #31
    568e:	f7fa ff1d 	bl	4cc <__aeabi_lmul>
    5692:	2307      	movs	r3, #7
    5694:	4ad3      	ldr	r2, [pc, #844]	; (59e4 <event_connection_prepare+0x75c>)
    5696:	f7fa fef9 	bl	48c <__aeabi_uldivmod>
    569a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    569c:	0200      	lsls	r0, r0, #8
    569e:	0a00      	lsrs	r0, r0, #8
    56a0:	1a1b      	subs	r3, r3, r0
    56a2:	930a      	str	r3, [sp, #40]	; 0x28
				TICKER_US_TO_TICKS((conn_interval_old -
						    conn_interval_new) * 1250);
		}
		conn->latency_prepare -= (instant_latency - latency);
    56a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    56a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    56a8:	1b9b      	subs	r3, r3, r6
    56aa:	18d3      	adds	r3, r2, r3
    56ac:	8523      	strh	r3, [r4, #40]	; 0x28

		/* calculate the offset, window widening and interval */
		ticks_slot_offset =
    56ae:	6862      	ldr	r2, [r4, #4]
    56b0:	6823      	ldr	r3, [r4, #0]
    56b2:	920e      	str	r2, [sp, #56]	; 0x38
    56b4:	429a      	cmp	r2, r3
    56b6:	d200      	bcs.n	56ba <event_connection_prepare+0x432>
    56b8:	930e      	str	r3, [sp, #56]	; 0x38
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    56ba:	0025      	movs	r5, r4
    56bc:	2301      	movs	r3, #1
    56be:	3534      	adds	r5, #52	; 0x34
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    56c0:	48c9      	ldr	r0, [pc, #804]	; (59e8 <event_connection_prepare+0x760>)
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    56c2:	7829      	ldrb	r1, [r5, #0]
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    56c4:	4347      	muls	r7, r0
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    56c6:	4019      	ands	r1, r3
    56c8:	900c      	str	r0, [sp, #48]	; 0x30
    56ca:	d056      	beq.n	577a <event_connection_prepare+0x4f2>
			conn->role.slave.window_widening_prepare_us -=
    56cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    56ce:	49c7      	ldr	r1, [pc, #796]	; (59ec <event_connection_prepare+0x764>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    56d0:	435e      	muls	r6, r3
    56d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    56d4:	4ac6      	ldr	r2, [pc, #792]	; (59f0 <event_connection_prepare+0x768>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    56d6:	1b9e      	subs	r6, r3, r6
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    56d8:	23ce      	movs	r3, #206	; 0xce
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    56da:	6426      	str	r6, [r4, #64]	; 0x40
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    56dc:	005b      	lsls	r3, r3, #1
    56de:	5ccb      	ldrb	r3, [r1, r3]
				   gc_lookup_ppm[conn->role.slave.sca]) *
    56e0:	7829      	ldrb	r1, [r5, #0]
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    56e2:	005b      	lsls	r3, r3, #1
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    56e4:	5a98      	ldrh	r0, [r3, r2]
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
    56e6:	230e      	movs	r3, #14
    56e8:	400b      	ands	r3, r1
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    56ea:	5a9b      	ldrh	r3, [r3, r2]
    56ec:	49c1      	ldr	r1, [pc, #772]	; (59f4 <event_connection_prepare+0x76c>)
    56ee:	18c0      	adds	r0, r0, r3
    56f0:	4378      	muls	r0, r7
    56f2:	4bc1      	ldr	r3, [pc, #772]	; (59f8 <event_connection_prepare+0x770>)
    56f4:	18c0      	adds	r0, r0, r3
    56f6:	f7fa fd53 	bl	1a0 <__aeabi_uidiv>
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
    56fa:	0022      	movs	r2, r4
			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
    56fc:	087b      	lsrs	r3, r7, #1
    56fe:	3b96      	subs	r3, #150	; 0x96
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
    5700:	63a0      	str	r0, [r4, #56]	; 0x38
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
    5702:	63e3      	str	r3, [r4, #60]	; 0x3c
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
    5704:	3284      	adds	r2, #132	; 0x84
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    5706:	7812      	ldrb	r2, [r2, #0]
    5708:	990c      	ldr	r1, [sp, #48]	; 0x30
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    570a:	0005      	movs	r5, r0
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    570c:	434a      	muls	r2, r1
    570e:	64a2      	str	r2, [r4, #72]	; 0x48
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    5710:	2200      	movs	r2, #0

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    5712:	980b      	ldr	r0, [sp, #44]	; 0x2c
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    5714:	6562      	str	r2, [r4, #84]	; 0x54

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    5716:	4368      	muls	r0, r5
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    5718:	1836      	adds	r6, r6, r0
				conn->role.slave.window_widening_periodic_us *
				latency;
			if (conn->role.slave.window_widening_prepare_us >
    571a:	42b3      	cmp	r3, r6
    571c:	d301      	bcc.n	5722 <event_connection_prepare+0x49a>
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    571e:	6426      	str	r6, [r4, #64]	; 0x40
    5720:	e000      	b.n	5724 <event_connection_prepare+0x49c>
				conn->role.slave.window_widening_periodic_us *
				latency;
			if (conn->role.slave.window_widening_prepare_us >
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
    5722:	6423      	str	r3, [r4, #64]	; 0x40
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    5724:	4ab5      	ldr	r2, [pc, #724]	; (59fc <event_connection_prepare+0x774>)
    5726:	2300      	movs	r3, #0
    5728:	2100      	movs	r1, #0
    572a:	f7fa fecf 	bl	4cc <__aeabi_lmul>
    572e:	4aad      	ldr	r2, [pc, #692]	; (59e4 <event_connection_prepare+0x75c>)
    5730:	2307      	movs	r3, #7
    5732:	f7fa feab 	bl	48c <__aeabi_uldivmod>
    5736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    5738:	49ab      	ldr	r1, [pc, #684]	; (59e8 <event_connection_prepare+0x760>)
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    573a:	1a1b      	subs	r3, r3, r0
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    573c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    573e:	930a      	str	r3, [sp, #40]	; 0x28
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    5740:	f7fa fd2e 	bl	1a0 <__aeabi_uidiv>
    5744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5746:	4aad      	ldr	r2, [pc, #692]	; (59fc <event_connection_prepare+0x774>)
    5748:	4343      	muls	r3, r0
    574a:	2100      	movs	r1, #0
    574c:	0018      	movs	r0, r3
    574e:	2300      	movs	r3, #0
    5750:	f7fa febc 	bl	4cc <__aeabi_lmul>
    5754:	4aa3      	ldr	r2, [pc, #652]	; (59e4 <event_connection_prepare+0x75c>)
    5756:	2307      	movs	r3, #7
    5758:	f7fa fe98 	bl	48c <__aeabi_uldivmod>
    575c:	0200      	lsls	r0, r0, #8
    575e:	0a03      	lsrs	r3, r0, #8
    5760:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    5762:	0023      	movs	r3, r4
    5764:	3385      	adds	r3, #133	; 0x85
    5766:	781a      	ldrb	r2, [r3, #0]
    5768:	2318      	movs	r3, #24
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    576a:	1b7d      	subs	r5, r7, r5
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    576c:	4013      	ands	r3, r2
    576e:	2b10      	cmp	r3, #16
    5770:	d110      	bne.n	5794 <event_connection_prepare+0x50c>
				conn_update_req(conn);
    5772:	0020      	movs	r0, r4
    5774:	f7fe f9c4 	bl	3b00 <conn_update_req>
    5778:	e00c      	b.n	5794 <event_connection_prepare+0x50c>
			}
		} else {
			ticks_win_offset =
    577a:	4aa0      	ldr	r2, [pc, #640]	; (59fc <event_connection_prepare+0x774>)
    577c:	2300      	movs	r3, #0
    577e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    5780:	f7fa fea4 	bl	4cc <__aeabi_lmul>
    5784:	2307      	movs	r3, #7
    5786:	4a97      	ldr	r2, [pc, #604]	; (59e4 <event_connection_prepare+0x75c>)
    5788:	f7fa fe80 	bl	48c <__aeabi_uldivmod>
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
    578c:	003d      	movs	r5, r7

			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
    578e:	0200      	lsls	r0, r0, #8
    5790:	0a03      	lsrs	r3, r0, #8
    5792:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    5794:	0023      	movs	r3, r4
    5796:	335c      	adds	r3, #92	; 0x5c
    5798:	881b      	ldrh	r3, [r3, #0]
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    579a:	0039      	movs	r1, r7
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    579c:	84a3      	strh	r3, [r4, #36]	; 0x24
		conn->latency = conn->llcp.connection_update.latency;
    579e:	0023      	movs	r3, r4
    57a0:	335e      	adds	r3, #94	; 0x5e
    57a2:	881b      	ldrh	r3, [r3, #0]
    57a4:	84e3      	strh	r3, [r4, #38]	; 0x26
		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
    57a6:	0023      	movs	r3, r4
    57a8:	3360      	adds	r3, #96	; 0x60
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    57aa:	8818      	ldrh	r0, [r3, #0]
    57ac:	4b94      	ldr	r3, [pc, #592]	; (5a00 <event_connection_prepare+0x778>)
    57ae:	4358      	muls	r0, r3
    57b0:	f7fa fcf6 	bl	1a0 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    57b4:	0039      	movs	r1, r7
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    57b6:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    57b8:	4892      	ldr	r0, [pc, #584]	; (5a04 <event_connection_prepare+0x77c>)
    57ba:	f7fa fcf1 	bl	1a0 <__aeabi_uidiv>
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		if (!conn->llcp.connection_update.is_internal) {
    57be:	0023      	movs	r3, r4
    57c0:	3385      	adds	r3, #133	; 0x85
    57c2:	781a      	ldrb	r2, [r3, #0]
    57c4:	2318      	movs	r3, #24
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    57c6:	8620      	strh	r0, [r4, #48]	; 0x30
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		if (!conn->llcp.connection_update.is_internal) {
    57c8:	4013      	ands	r3, r2
    57ca:	d100      	bne.n	57ce <event_connection_prepare+0x546>
			conn->supervision_expire = 0;
    57cc:	85e3      	strh	r3, [r4, #46]	; 0x2e
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    57ce:	2101      	movs	r1, #1
    57d0:	2000      	movs	r0, #0
    57d2:	f002 fc2d 	bl	8030 <mayfly_is_enabled>
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    57d6:	2200      	movs	r2, #0
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    57d8:	900f      	str	r0, [sp, #60]	; 0x3c
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    57da:	2101      	movs	r1, #1
    57dc:	0010      	movs	r0, r2
    57de:	f7fc fc9d 	bl	211c <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);

		/* start slave/master with new timings */
		ticker_status =
    57e2:	2100      	movs	r1, #0
    57e4:	8c22      	ldrh	r2, [r4, #32]
    57e6:	4b88      	ldr	r3, [pc, #544]	; (5a08 <event_connection_prepare+0x780>)
    57e8:	3207      	adds	r2, #7
    57ea:	9300      	str	r3, [sp, #0]
    57ec:	b2d2      	uxtb	r2, r2
    57ee:	4b87      	ldr	r3, [pc, #540]	; (5a0c <event_connection_prepare+0x784>)
    57f0:	0008      	movs	r0, r1
    57f2:	f7fe f86f 	bl	38d4 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    57f6:	2302      	movs	r3, #2
    57f8:	4398      	bics	r0, r3
    57fa:	1e06      	subs	r6, r0, #0
    57fc:	d000      	beq.n	5800 <event_connection_prepare+0x578>
    57fe:	e13a      	b.n	5a76 <event_connection_prepare+0x7ee>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
    5800:	4a7e      	ldr	r2, [pc, #504]	; (59fc <event_connection_prepare+0x774>)
    5802:	2300      	movs	r3, #0
    5804:	0028      	movs	r0, r5
    5806:	0031      	movs	r1, r6
    5808:	f7fa fe60 	bl	4cc <__aeabi_lmul>
    580c:	4a75      	ldr	r2, [pc, #468]	; (59e4 <event_connection_prepare+0x75c>)
    580e:	2307      	movs	r3, #7
    5810:	900c      	str	r0, [sp, #48]	; 0x30
    5812:	910d      	str	r1, [sp, #52]	; 0x34
    5814:	f7fa fe3a 	bl	48c <__aeabi_uldivmod>
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5818:	0205      	lsls	r5, r0, #8
    581a:	0a2d      	lsrs	r5, r5, #8
    581c:	4a71      	ldr	r2, [pc, #452]	; (59e4 <event_connection_prepare+0x75c>)
    581e:	2307      	movs	r3, #7
    5820:	0028      	movs	r0, r5
    5822:	0031      	movs	r1, r6
    5824:	f7fa fe52 	bl	4cc <__aeabi_lmul>
    5828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    582a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    582c:	1a12      	subs	r2, r2, r0
    582e:	418b      	sbcs	r3, r1
    5830:	0010      	movs	r0, r2
    5832:	22fa      	movs	r2, #250	; 0xfa
    5834:	0019      	movs	r1, r3
    5836:	0092      	lsls	r2, r2, #2
    5838:	2300      	movs	r3, #0
    583a:	f7fa fe27 	bl	48c <__aeabi_uldivmod>
    583e:	68e2      	ldr	r2, [r4, #12]
    5840:	8c27      	ldrh	r7, [r4, #32]
    5842:	4694      	mov	ip, r2
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
				     TICKER_REMAINDER(periodic_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
    5844:	0022      	movs	r2, r4
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
				     TICKER_REMAINDER(periodic_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
    5848:	3234      	adds	r2, #52	; 0x34
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    584a:	0001      	movs	r1, r0
    584c:	7810      	ldrb	r0, [r2, #0]
    584e:	3707      	adds	r7, #7
    5850:	4463      	add	r3, ip
    5852:	b2ff      	uxtb	r7, r7
    5854:	b29b      	uxth	r3, r3
    5856:	4a6e      	ldr	r2, [pc, #440]	; (5a10 <event_connection_prepare+0x788>)
    5858:	07c0      	lsls	r0, r0, #31
    585a:	d400      	bmi.n	585e <event_connection_prepare+0x5d6>
    585c:	4a6d      	ldr	r2, [pc, #436]	; (5a14 <event_connection_prepare+0x78c>)
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    585e:	486e      	ldr	r0, [pc, #440]	; (5a18 <event_connection_prepare+0x790>)
    5860:	9304      	str	r3, [sp, #16]
    5862:	9008      	str	r0, [sp, #32]
    5864:	4869      	ldr	r0, [pc, #420]	; (5a0c <event_connection_prepare+0x784>)
    5866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5868:	9007      	str	r0, [sp, #28]
    586a:	2000      	movs	r0, #0
    586c:	9205      	str	r2, [sp, #20]
    586e:	9102      	str	r1, [sp, #8]
    5870:	9300      	str	r3, [sp, #0]
    5872:	9406      	str	r4, [sp, #24]
    5874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5876:	9003      	str	r0, [sp, #12]
    5878:	9501      	str	r5, [sp, #4]
    587a:	003a      	movs	r2, r7
    587c:	0001      	movs	r1, r0
    587e:	f7fd ff91 	bl	37a4 <ticker_start>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
				     event_slave_prepare : event_master_prepare,
				     conn, ticker_success_assert,
				     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5882:	2302      	movs	r3, #2
    5884:	4398      	bics	r0, r3
    5886:	d000      	beq.n	588a <event_connection_prepare+0x602>
    5888:	e0f5      	b.n	5a76 <event_connection_prepare+0x7ee>
			  (ticker_status == TICKER_STATUS_BUSY));

		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    588a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    588c:	2b00      	cmp	r3, #0
    588e:	d100      	bne.n	5892 <event_connection_prepare+0x60a>
    5890:	e133      	b.n	5afa <event_connection_prepare+0x872>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5892:	2201      	movs	r2, #1
    5894:	0011      	movs	r1, r2
    5896:	f7fc fc41 	bl	211c <mayfly_enable>
    589a:	e12e      	b.n	5afa <event_connection_prepare+0x872>
}

static inline void event_ch_map_prep(struct connection *conn,
				     u16_t event_counter)
{
	if (conn->llcp.chan_map.initiate) {
    589c:	0026      	movs	r6, r4
    589e:	365c      	adds	r6, #92	; 0x5c
    58a0:	7833      	ldrb	r3, [r6, #0]
    58a2:	2b00      	cmp	r3, #0
    58a4:	d025      	beq.n	58f2 <event_connection_prepare+0x66a>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    58a6:	0028      	movs	r0, r5
    58a8:	30d1      	adds	r0, #209	; 0xd1
    58aa:	30ff      	adds	r0, #255	; 0xff
    58ac:	f7fc fd5e 	bl	236c <mem_acquire>
    58b0:	1e05      	subs	r5, r0, #0
		if (node_tx) {
    58b2:	d100      	bne.n	58b6 <event_connection_prepare+0x62e>
    58b4:	e0e2      	b.n	5a7c <event_connection_prepare+0x7f4>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;
    58b6:	2300      	movs	r3, #0
    58b8:	7033      	strb	r3, [r6, #0]

			/* set instant */
			conn->llcp.chan_map.instant =
    58ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    58bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    58be:	3306      	adds	r3, #6
    58c0:	18d3      	adds	r3, r2, r3
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    58c2:	2203      	movs	r2, #3

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;

			/* set instant */
			conn->llcp.chan_map.instant =
    58c4:	80f3      	strh	r3, [r6, #6]
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    58c6:	7903      	ldrb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    58c8:	0021      	movs	r1, r4
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    58ca:	4313      	orrs	r3, r2
    58cc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    58ce:	2308      	movs	r3, #8
    58d0:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    58d2:	3b07      	subs	r3, #7
    58d4:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    58d6:	3202      	adds	r2, #2
    58d8:	3008      	adds	r0, #8
    58da:	315d      	adds	r1, #93	; 0x5d
    58dc:	f7fb fb2c 	bl	f38 <memcpy>
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
				conn->llcp.chan_map.instant;
    58e0:	88f3      	ldrh	r3, [r6, #6]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
    58e2:	736b      	strb	r3, [r5, #13]
    58e4:	0a1b      	lsrs	r3, r3, #8
    58e6:	73ab      	strb	r3, [r5, #14]
				conn->llcp.chan_map.instant;

			ctrl_tx_enqueue(conn, node_tx);
    58e8:	0029      	movs	r1, r5
    58ea:	0020      	movs	r0, r4
    58ec:	f7ff fc8c 	bl	5208 <ctrl_tx_enqueue>
    58f0:	e0c4      	b.n	5a7c <event_connection_prepare+0x7f4>
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    58f2:	0023      	movs	r3, r4
    58f4:	3362      	adds	r3, #98	; 0x62
    58f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    58f8:	881b      	ldrh	r3, [r3, #0]
    58fa:	1ad3      	subs	r3, r2, r3
    58fc:	4a47      	ldr	r2, [pc, #284]	; (5a1c <event_connection_prepare+0x794>)
    58fe:	b29b      	uxth	r3, r3
    5900:	4293      	cmp	r3, r2
    5902:	dd00      	ble.n	5906 <event_connection_prepare+0x67e>
    5904:	e0ba      	b.n	5a7c <event_connection_prepare+0x7f4>
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    5906:	0023      	movs	r3, r4

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    5908:	0025      	movs	r5, r4
    590a:	0021      	movs	r1, r4
			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    590c:	3358      	adds	r3, #88	; 0x58
    590e:	781b      	ldrb	r3, [r3, #0]

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    5910:	3517      	adds	r5, #23
			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    5912:	703b      	strb	r3, [r7, #0]

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    5914:	2205      	movs	r2, #5
    5916:	315d      	adds	r1, #93	; 0x5d
    5918:	0028      	movs	r0, r5
    591a:	f7fb fb0d 	bl	f38 <memcpy>
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    591e:	2105      	movs	r1, #5
    5920:	0028      	movs	r0, r5
    5922:	f7fc fd91 	bl	2448 <util_ones_count_get>

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    5926:	223f      	movs	r2, #63	; 0x3f
    5928:	7f23      	ldrb	r3, [r4, #28]
    592a:	4010      	ands	r0, r2
    592c:	4393      	bics	r3, r2
    592e:	4318      	orrs	r0, r3
    5930:	7720      	strb	r0, [r4, #28]
    5932:	e0a3      	b.n	5a7c <event_connection_prepare+0x7f4>

static inline void event_fex_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5934:	0028      	movs	r0, r5
    5936:	30d1      	adds	r0, #209	; 0xd1
    5938:	30ff      	adds	r0, #255	; 0xff
    593a:	f7fc fd17 	bl	236c <mem_acquire>
    593e:	1e05      	subs	r5, r0, #0
	if (node_tx) {
    5940:	d100      	bne.n	5944 <event_connection_prepare+0x6bc>
    5942:	e09b      	b.n	5a7c <event_connection_prepare+0x7f4>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    5944:	0023      	movs	r3, r4
    5946:	3358      	adds	r3, #88	; 0x58
    5948:	781b      	ldrb	r3, [r3, #0]

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    594a:	2203      	movs	r2, #3
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    594c:	703b      	strb	r3, [r7, #0]

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    594e:	0027      	movs	r7, r4
    5950:	4b33      	ldr	r3, [pc, #204]	; (5a20 <event_connection_prepare+0x798>)
    5952:	3788      	adds	r7, #136	; 0x88
    5954:	603b      	str	r3, [r7, #0]

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5956:	7903      	ldrb	r3, [r0, #4]
    5958:	4313      	orrs	r3, r2
    595a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    595c:	2309      	movs	r3, #9
    595e:	7143      	strb	r3, [r0, #5]
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    5960:	7832      	ldrb	r2, [r6, #0]
    5962:	3b01      	subs	r3, #1
    5964:	07d2      	lsls	r2, r2, #31
    5966:	d500      	bpl.n	596a <event_connection_prepare+0x6e2>
    5968:	3306      	adds	r3, #6
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    596a:	0028      	movs	r0, r5

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    596c:	71eb      	strb	r3, [r5, #7]
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    596e:	2100      	movs	r1, #0
    5970:	3008      	adds	r0, #8
    5972:	2208      	movs	r2, #8
    5974:	f7fb fb0a 	bl	f8c <memset>
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    5978:	783b      	ldrb	r3, [r7, #0]
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
			(conn->llcp_features >> 16) & 0xFF;

		ctrl_tx_enqueue(conn, node_tx);
    597a:	0029      	movs	r1, r5
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    597c:	722b      	strb	r3, [r5, #8]
			conn->llcp_features & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    597e:	683b      	ldr	r3, [r7, #0]
    5980:	0a1b      	lsrs	r3, r3, #8
    5982:	726b      	strb	r3, [r5, #9]
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    5984:	683b      	ldr	r3, [r7, #0]
    5986:	0c1b      	lsrs	r3, r3, #16
    5988:	72ab      	strb	r3, [r5, #10]
    598a:	e022      	b.n	59d2 <event_connection_prepare+0x74a>
}

static inline void event_vex_prep(struct connection *conn)
{

	if (conn->llcp_version.tx == 0) {
    598c:	0027      	movs	r7, r4
    598e:	2601      	movs	r6, #1
    5990:	378c      	adds	r7, #140	; 0x8c
    5992:	783b      	ldrb	r3, [r7, #0]
    5994:	4233      	tst	r3, r6
    5996:	d145      	bne.n	5a24 <event_connection_prepare+0x79c>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5998:	0028      	movs	r0, r5
    599a:	30d1      	adds	r0, #209	; 0xd1
    599c:	30ff      	adds	r0, #255	; 0xff
    599e:	f7fc fce5 	bl	236c <mem_acquire>
    59a2:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    59a4:	d06a      	beq.n	5a7c <event_connection_prepare+0x7f4>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    59a6:	0023      	movs	r3, r4
    59a8:	3358      	adds	r3, #88	; 0x58
    59aa:	781a      	ldrb	r2, [r3, #0]
    59ac:	705a      	strb	r2, [r3, #1]

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    59ae:	2203      	movs	r2, #3

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;
    59b0:	783b      	ldrb	r3, [r7, #0]
    59b2:	431e      	orrs	r6, r3
    59b4:	703e      	strb	r6, [r7, #0]

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    59b6:	7903      	ldrb	r3, [r0, #4]
    59b8:	4313      	orrs	r3, r2
    59ba:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    59bc:	2306      	movs	r3, #6
    59be:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_version_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    59c0:	18db      	adds	r3, r3, r3
    59c2:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_VERSION_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    59c4:	3b03      	subs	r3, #3
    59c6:	7203      	strb	r3, [r0, #8]
				RADIO_BLE_VERSION_NUMBER;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    59c8:	3b0a      	subs	r3, #10
    59ca:	7243      	strb	r3, [r0, #9]
    59cc:	7283      	strb	r3, [r0, #10]
				RADIO_BLE_COMPANY_ID;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    59ce:	72c3      	strb	r3, [r0, #11]
    59d0:	7303      	strb	r3, [r0, #12]
				RADIO_BLE_SUB_VERSION_NUMBER;

			ctrl_tx_enqueue(conn, node_tx);
    59d2:	0020      	movs	r0, r4
    59d4:	f7ff fc18 	bl	5208 <ctrl_tx_enqueue>

			/* Start Procedure Timeout (@todo this shall not
			 * replace terminate procedure)
			 */
			conn->procedure_expire = conn->procedure_reload;
    59d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    59da:	8663      	strh	r3, [r4, #50]	; 0x32
    59dc:	e04e      	b.n	5a7c <event_connection_prepare+0x7f4>
    59de:	46c0      	nop			; (mov r8, r8)
    59e0:	09ce5400 	.word	0x09ce5400
    59e4:	1afd498d 	.word	0x1afd498d
    59e8:	000004e2 	.word	0x000004e2
    59ec:	200005f4 	.word	0x200005f4
    59f0:	00009e4c 	.word	0x00009e4c
    59f4:	000f4240 	.word	0x000f4240
    59f8:	000f423f 	.word	0x000f423f
    59fc:	3b9aca00 	.word	0x3b9aca00
    5a00:	00002710 	.word	0x00002710
    5a04:	02625a00 	.word	0x02625a00
    5a08:	000015db 	.word	0x000015db
    5a0c:	00004cbd 	.word	0x00004cbd
    5a10:	00005b15 	.word	0x00005b15
    5a14:	00005b0d 	.word	0x00005b0d
    5a18:	000015eb 	.word	0x000015eb
    5a1c:	00007fff 	.word	0x00007fff
    5a20:	0000400e 	.word	0x0000400e
		}
	} else if (conn->llcp_version.rx != 0) {
    5a24:	2002      	movs	r0, #2
    5a26:	4203      	tst	r3, r0
    5a28:	d025      	beq.n	5a76 <event_connection_prepare+0x7ee>
		struct radio_pdu_node_rx *radio_pdu_node_rx;
		struct pdu_data *pdu_ctrl_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    5a2a:	0023      	movs	r3, r4
    5a2c:	3358      	adds	r3, #88	; 0x58
    5a2e:	781a      	ldrb	r2, [r3, #0]
    5a30:	705a      	strb	r2, [r3, #1]

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
    5a32:	f7fe f841 	bl	3ab8 <packet_rx_reserve_get>
		LL_ASSERT(radio_pdu_node_rx);
    5a36:	2800      	cmp	r0, #0
    5a38:	d01d      	beq.n	5a76 <event_connection_prepare+0x7ee>
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    5a3a:	2203      	movs	r2, #3

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(radio_pdu_node_rx);

		radio_pdu_node_rx->hdr.handle = conn->handle;
    5a3c:	8c23      	ldrh	r3, [r4, #32]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    5a3e:	7106      	strb	r6, [r0, #4]

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(radio_pdu_node_rx);

		radio_pdu_node_rx->hdr.handle = conn->handle;
    5a40:	80c3      	strh	r3, [r0, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    5a42:	7a03      	ldrb	r3, [r0, #8]
    5a44:	4313      	orrs	r3, r2
    5a46:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    5a48:	2306      	movs	r3, #6
    5a4a:	7243      	strb	r3, [r0, #9]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
    5a4c:	18db      	adds	r3, r3, r3
    5a4e:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
    5a50:	0023      	movs	r3, r4
    5a52:	338d      	adds	r3, #141	; 0x8d
    5a54:	781b      	ldrb	r3, [r3, #0]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
    5a56:	7303      	strb	r3, [r0, #12]
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
			conn->llcp_version.company_id;
    5a58:	0023      	movs	r3, r4
    5a5a:	338e      	adds	r3, #142	; 0x8e
    5a5c:	881b      	ldrh	r3, [r3, #0]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
    5a5e:	7343      	strb	r3, [r0, #13]
    5a60:	0a1b      	lsrs	r3, r3, #8
    5a62:	7383      	strb	r3, [r0, #14]
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
			conn->llcp_version.sub_version_number;
    5a64:	0023      	movs	r3, r4
    5a66:	3390      	adds	r3, #144	; 0x90
    5a68:	881b      	ldrh	r3, [r3, #0]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    5a6a:	73c3      	strb	r3, [r0, #15]
    5a6c:	0a1b      	lsrs	r3, r3, #8
    5a6e:	7403      	strb	r3, [r0, #16]
			conn->llcp_version.sub_version_number;

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
    5a70:	f7fe fdba 	bl	45e8 <packet_rx_enqueue>
    5a74:	e002      	b.n	5a7c <event_connection_prepare+0x7f4>
			event_phy_upd_ind_prep(conn, event_counter);
			break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		default:
			LL_ASSERT(0);
    5a76:	b662      	cpsie	i
    5a78:	2004      	movs	r0, #4
    5a7a:	df02      	svc	2
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    5a7c:	0025      	movs	r5, r4
    5a7e:	0026      	movs	r6, r4
    5a80:	3595      	adds	r5, #149	; 0x95
    5a82:	3694      	adds	r6, #148	; 0x94
    5a84:	782a      	ldrb	r2, [r5, #0]
    5a86:	7833      	ldrb	r3, [r6, #0]
    5a88:	429a      	cmp	r2, r3
    5a8a:	d01e      	beq.n	5aca <event_connection_prepare+0x842>
		struct radio_pdu_node_tx *node_tx;

		/* Stop previous event, to avoid Radio DMA corrupting the rx
		 * queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    5a8c:	2200      	movs	r2, #0
    5a8e:	2305      	movs	r3, #5
    5a90:	0011      	movs	r1, r2
    5a92:	0010      	movs	r0, r2
    5a94:	f7fe ffd4 	bl	4a40 <event_stop>

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5a98:	4819      	ldr	r0, [pc, #100]	; (5b00 <event_connection_prepare+0x878>)
    5a9a:	30d1      	adds	r0, #209	; 0xd1
    5a9c:	30ff      	adds	r0, #255	; 0xff
    5a9e:	f7fc fc65 	bl	236c <mem_acquire>
    5aa2:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    5aa4:	d011      	beq.n	5aca <event_connection_prepare+0x842>

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5aa6:	2203      	movs	r2, #3
		if (node_tx) {
			struct pdu_data *pdu_ctrl_tx =
			    (struct pdu_data *)node_tx->pdu_data;

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    5aa8:	7833      	ldrb	r3, [r6, #0]
    5aaa:	702b      	strb	r3, [r5, #0]

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5aac:	7903      	ldrb	r3, [r0, #4]
    5aae:	4313      	orrs	r3, r2
    5ab0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    5ab2:	2302      	movs	r3, #2
    5ab4:	7143      	strb	r3, [r0, #5]
				offsetof(struct pdu_data_llctrl, ctrldata) +
				sizeof(struct pdu_data_llctrl_terminate_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    5ab6:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.terminate_ind.
				error_code = conn->llcp_terminate.reason_own;
    5ab8:	0023      	movs	r3, r4
    5aba:	3396      	adds	r3, #150	; 0x96
    5abc:	781b      	ldrb	r3, [r3, #0]
    5abe:	7203      	strb	r3, [r0, #8]

			ctrl_tx_enqueue(conn, node_tx);
    5ac0:	0020      	movs	r0, r4
    5ac2:	f7ff fba1 	bl	5208 <ctrl_tx_enqueue>

			/* Terminate Procedure timeout is started, will
			 * replace any other timeout running
			 */
			conn->procedure_expire = conn->procedure_reload;
    5ac6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    5ac8:	8663      	strh	r3, [r4, #50]	; 0x32
	event_common_prepare(ticks_at_expire, remainder,
			     &conn->hdr.ticks_xtal_to_start,
			     &conn->hdr.ticks_active_to_start,
			     conn->hdr.ticks_preempt_to_start,
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			     (conn->role.slave.role != 0) ? event_slave : event_master,
    5aca:	0020      	movs	r0, r4
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* Setup XTAL startup and radio active events */
	event_common_prepare(ticks_at_expire, remainder,
    5acc:	8c22      	ldrh	r2, [r4, #32]
			     &conn->hdr.ticks_xtal_to_start,
			     &conn->hdr.ticks_active_to_start,
			     conn->hdr.ticks_preempt_to_start,
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			     (conn->role.slave.role != 0) ? event_slave : event_master,
    5ace:	3034      	adds	r0, #52	; 0x34
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* Setup XTAL startup and radio active events */
	event_common_prepare(ticks_at_expire, remainder,
    5ad0:	7805      	ldrb	r5, [r0, #0]
    5ad2:	3207      	adds	r2, #7
    5ad4:	1d23      	adds	r3, r4, #4
    5ad6:	68a1      	ldr	r1, [r4, #8]
    5ad8:	b2d2      	uxtb	r2, r2
    5ada:	480a      	ldr	r0, [pc, #40]	; (5b04 <event_connection_prepare+0x87c>)
    5adc:	07ed      	lsls	r5, r5, #31
    5ade:	d400      	bmi.n	5ae2 <event_connection_prepare+0x85a>
    5ae0:	4809      	ldr	r0, [pc, #36]	; (5b08 <event_connection_prepare+0x880>)
    5ae2:	9002      	str	r0, [sp, #8]
    5ae4:	9201      	str	r2, [sp, #4]
    5ae6:	9100      	str	r1, [sp, #0]
    5ae8:	0022      	movs	r2, r4
    5aea:	9403      	str	r4, [sp, #12]
    5aec:	990e      	ldr	r1, [sp, #56]	; 0x38
    5aee:	980a      	ldr	r0, [sp, #40]	; 0x28
    5af0:	f7fe ffe6 	bl	4ac0 <event_common_prepare>
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			     (conn->role.slave.role != 0) ? event_slave : event_master,
			     conn);

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    5af4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5af6:	3201      	adds	r2, #1
    5af8:	8462      	strh	r2, [r4, #34]	; 0x22
}
    5afa:	b011      	add	sp, #68	; 0x44
    5afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5afe:	46c0      	nop			; (mov r8, r8)
    5b00:	200005f4 	.word	0x200005f4
    5b04:	000050a9 	.word	0x000050a9
    5b08:	00007675 	.word	0x00007675

00005b0c <event_master_prepare>:
	DEBUG_RADIO_START_S(0);
}

static void event_master_prepare(u32_t ticks_at_expire, u32_t remainder,
				 u16_t lazy, void *context)
{
    5b0c:	b510      	push	{r4, lr}
	DEBUG_RADIO_PREPARE_M(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    5b0e:	f7ff fbbb 	bl	5288 <event_connection_prepare>

	DEBUG_RADIO_PREPARE_M(0);
}
    5b12:	bd10      	pop	{r4, pc}

00005b14 <event_slave_prepare>:
    5b14:	b510      	push	{r4, lr}
    5b16:	f7ff fbb7 	bl	5288 <event_connection_prepare>
    5b1a:	bd10      	pop	{r4, pc}

00005b1c <mayfly_xtal_stop_calc>:
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    5b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5b1e:	2302      	movs	r3, #2
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    5b20:	2623      	movs	r6, #35	; 0x23
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    5b22:	0005      	movs	r5, r0
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
	ticks_to_expire = 0;
    5b24:	2000      	movs	r0, #0
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    5b26:	b08d      	sub	sp, #52	; 0x34
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    5b28:	446e      	add	r6, sp
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5b2a:	9309      	str	r3, [sp, #36]	; 0x24
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    5b2c:	33fd      	adds	r3, #253	; 0xfd
    5b2e:	7033      	strb	r3, [r6, #0]
	ticks_to_expire = 0;
	ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b30:	ab09      	add	r3, sp, #36	; 0x24
    5b32:	9302      	str	r3, [sp, #8]
    5b34:	4b7a      	ldr	r3, [pc, #488]	; (5d20 <mayfly_xtal_stop_calc+0x204>)
    5b36:	0032      	movs	r2, r6
    5b38:	9301      	str	r3, [sp, #4]
    5b3a:	ab0a      	add	r3, sp, #40	; 0x28
    5b3c:	9300      	str	r3, [sp, #0]
    5b3e:	2101      	movs	r1, #1
    5b40:	ab0b      	add	r3, sp, #44	; 0x2c
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
	ticks_to_expire = 0;
    5b42:	900a      	str	r0, [sp, #40]	; 0x28
	ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b44:	f7fd fef4 	bl	3930 <ticker_next_slot_get>
				   RADIO_TICKER_USER_ID_JOB, &ticker_id,
				   &ticks_current, &ticks_to_expire,
				   ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    5b48:	2802      	cmp	r0, #2
    5b4a:	d003      	beq.n	5b54 <mayfly_xtal_stop_calc+0x38>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
					 RADIO_TICKER_USER_ID_JOB);
		}
	}

	LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    5b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d008      	beq.n	5b64 <mayfly_xtal_stop_calc+0x48>
    5b52:	e057      	b.n	5c04 <mayfly_xtal_stop_calc+0xe8>
				   RADIO_TICKER_USER_ID_JOB, &ticker_id,
				   &ticks_current, &ticks_to_expire,
				   ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
		while (ret_cb == TICKER_STATUS_BUSY) {
    5b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b56:	2b02      	cmp	r3, #2
    5b58:	d1f8      	bne.n	5b4c <mayfly_xtal_stop_calc+0x30>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b5a:	2101      	movs	r1, #1
    5b5c:	2000      	movs	r0, #0
    5b5e:	f7fd ff45 	bl	39ec <ticker_job_sched>
    5b62:	e7f7      	b.n	5b54 <mayfly_xtal_stop_calc+0x38>
		}
	}

	LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);

	if ((ticker_id != 0xff) &&
    5b64:	7832      	ldrb	r2, [r6, #0]
    5b66:	4b6f      	ldr	r3, [pc, #444]	; (5d24 <mayfly_xtal_stop_calc+0x208>)
    5b68:	2aff      	cmp	r2, #255	; 0xff
    5b6a:	d069      	beq.n	5c40 <mayfly_xtal_stop_calc+0x124>
    5b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5b6e:	2aa8      	cmp	r2, #168	; 0xa8
    5b70:	d866      	bhi.n	5c40 <mayfly_xtal_stop_calc+0x124>
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
{
	static u8_t s_xtal_retained;

	if (retain) {
		if (!s_xtal_retained) {
    5b72:	7819      	ldrb	r1, [r3, #0]
    5b74:	2900      	cmp	r1, #0
    5b76:	d107      	bne.n	5b88 <mayfly_xtal_stop_calc+0x6c>
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);

			s_xtal_retained = 1;
    5b78:	2001      	movs	r0, #1

			retval = mayfly_enqueue(caller_id,
    5b7a:	000a      	movs	r2, r1
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);

			s_xtal_retained = 1;
    5b7c:	7018      	strb	r0, [r3, #0]

			retval = mayfly_enqueue(caller_id,
    5b7e:	4b6a      	ldr	r3, [pc, #424]	; (5d28 <mayfly_xtal_stop_calc+0x20c>)
    5b80:	f7fc faec 	bl	215c <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
    5b84:	2800      	cmp	r0, #0
    5b86:	d13d      	bne.n	5c04 <mayfly_xtal_stop_calc+0xe8>
	if ((ticker_id != 0xff) &&
	    (ticks_to_expire <
	     TICKER_US_TO_TICKS(CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD))) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);

		if (ticker_id >= RADIO_TICKER_ID_ADV) {
    5b88:	7832      	ldrb	r2, [r6, #0]
    5b8a:	2a04      	cmp	r2, #4
    5b8c:	d800      	bhi.n	5b90 <mayfly_xtal_stop_calc+0x74>
    5b8e:	e0c5      	b.n	5d1c <mayfly_xtal_stop_calc+0x200>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			u8_t ticker_id_current = ((u32_t)params & 0xff);
    5b90:	b2ed      	uxtb	r5, r5
    5b92:	4f66      	ldr	r7, [pc, #408]	; (5d2c <mayfly_xtal_stop_calc+0x210>)
			u32_t ticks_prepare_to_start;
			struct connection *conn = NULL;
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5b94:	2a06      	cmp	r2, #6
    5b96:	d90a      	bls.n	5bae <mayfly_xtal_stop_calc+0x92>
				conn = mem_get(_radio.conn_pool,
    5b98:	23c2      	movs	r3, #194	; 0xc2
    5b9a:	3a07      	subs	r2, #7
    5b9c:	005b      	lsls	r3, r3, #1
    5b9e:	21fc      	movs	r1, #252	; 0xfc
    5ba0:	b292      	uxth	r2, r2
    5ba2:	58f8      	ldr	r0, [r7, r3]
    5ba4:	f7fc fc11 	bl	23ca <mem_get>
    5ba8:	0004      	movs	r4, r0
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
    5baa:	0001      	movs	r1, r0
    5bac:	e007      	b.n	5bbe <mayfly_xtal_stop_calc+0xa2>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    5bae:	0039      	movs	r1, r7
				conn = mem_get(_radio.conn_pool,
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    5bb0:	2a05      	cmp	r2, #5
    5bb2:	d002      	beq.n	5bba <mayfly_xtal_stop_calc+0x9e>
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    5bb4:	314d      	adds	r1, #77	; 0x4d
    5bb6:	31ff      	adds	r1, #255	; 0xff
    5bb8:	e000      	b.n	5bbc <mayfly_xtal_stop_calc+0xa0>
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    5bba:	3194      	adds	r1, #148	; 0x94
#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			u8_t ticker_id_current = ((u32_t)params & 0xff);
			struct connection *conn_curr = NULL;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			u32_t ticks_prepare_to_start;
			struct connection *conn = NULL;
    5bbc:	2400      	movs	r4, #0
			}

			/* compensate for reduced next ticker's prepare or
			 * reduce next ticker's prepare.
			 */
			ticks_prepare_to_start =
    5bbe:	684a      	ldr	r2, [r1, #4]
    5bc0:	688b      	ldr	r3, [r1, #8]
    5bc2:	4293      	cmp	r3, r2
    5bc4:	d200      	bcs.n	5bc8 <mayfly_xtal_stop_calc+0xac>
    5bc6:	0013      	movs	r3, r2
				(hdr->ticks_active_to_start >
				 hdr->ticks_preempt_to_start) ?
				hdr->ticks_active_to_start :
				hdr->ticks_preempt_to_start;
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
    5bc8:	680a      	ldr	r2, [r1, #0]
    5bca:	2a00      	cmp	r2, #0
    5bcc:	da06      	bge.n	5bdc <mayfly_xtal_stop_calc+0xc0>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
    5bce:	990a      	ldr	r1, [sp, #40]	; 0x28
    5bd0:	0052      	lsls	r2, r2, #1
    5bd2:	185b      	adds	r3, r3, r1
    5bd4:	0852      	lsrs	r2, r2, #1
    5bd6:	1a9a      	subs	r2, r3, r2
    5bd8:	920a      	str	r2, [sp, #40]	; 0x28
    5bda:	e016      	b.n	5c0a <mayfly_xtal_stop_calc+0xee>
						    ticks_prepare_to_start);
			} else {
				/* Postpone the primary because we dont have
				 * to start xtal.
				 */
				if (hdr->ticks_xtal_to_start >
    5bdc:	4293      	cmp	r3, r2
    5bde:	d214      	bcs.n	5c0a <mayfly_xtal_stop_calc+0xee>
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    5be0:	2000      	movs	r0, #0
						ticker_update(
    5be2:	1ad3      	subs	r3, r2, r3
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    5be4:	7832      	ldrb	r2, [r6, #0]
    5be6:	9106      	str	r1, [sp, #24]
    5be8:	4951      	ldr	r1, [pc, #324]	; (5d30 <mayfly_xtal_stop_calc+0x214>)
						ticker_update(
    5bea:	b29b      	uxth	r3, r3
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    5bec:	9105      	str	r1, [sp, #20]
    5bee:	9302      	str	r3, [sp, #8]
    5bf0:	9004      	str	r0, [sp, #16]
    5bf2:	9003      	str	r0, [sp, #12]
    5bf4:	9001      	str	r0, [sp, #4]
    5bf6:	9000      	str	r0, [sp, #0]
    5bf8:	2101      	movs	r1, #1
    5bfa:	f7fd fe1b 	bl	3834 <ticker_update>
							      ticks_drift_plus, 0,
							      0, ticks_drift_plus,
							      0, 0,
							      prepare_reduced,
							      hdr);
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
    5bfe:	2302      	movs	r3, #2
    5c00:	4398      	bics	r0, r3
    5c02:	d002      	beq.n	5c0a <mayfly_xtal_stop_calc+0xee>
    5c04:	b662      	cpsie	i
    5c06:	2004      	movs	r0, #4
    5c08:	df02      	svc	2
						   ticker_status));
				}
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5c0a:	2d06      	cmp	r5, #6
    5c0c:	d800      	bhi.n	5c10 <mayfly_xtal_stop_calc+0xf4>
    5c0e:	e085      	b.n	5d1c <mayfly_xtal_stop_calc+0x200>
				/* compensate the current ticker for reduced
				 * prepare.
				 */
				conn_curr =
    5c10:	23c2      	movs	r3, #194	; 0xc2
    5c12:	3d07      	subs	r5, #7
    5c14:	005b      	lsls	r3, r3, #1
    5c16:	b2aa      	uxth	r2, r5
    5c18:	58f8      	ldr	r0, [r7, r3]
    5c1a:	21fc      	movs	r1, #252	; 0xfc
    5c1c:	f7fc fbd5 	bl	23ca <mem_get>
				ticks_prepare_to_start =
					(conn_curr->hdr.ticks_active_to_start >
					conn_curr->hdr.ticks_preempt_to_start) ?
					conn_curr->hdr.ticks_active_to_start :
					conn_curr->hdr.ticks_preempt_to_start;
				if ((conn_curr->hdr.ticks_xtal_to_start &
    5c20:	6803      	ldr	r3, [r0, #0]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
				/* compensate the current ticker for reduced
				 * prepare.
				 */
				conn_curr =
    5c22:	0005      	movs	r5, r0
				ticks_prepare_to_start =
					(conn_curr->hdr.ticks_active_to_start >
					conn_curr->hdr.ticks_preempt_to_start) ?
					conn_curr->hdr.ticks_active_to_start :
					conn_curr->hdr.ticks_preempt_to_start;
				if ((conn_curr->hdr.ticks_xtal_to_start &
    5c24:	2b00      	cmp	r3, #0
    5c26:	da2e      	bge.n	5c86 <mayfly_xtal_stop_calc+0x16a>
						((u32_t)1 << 31)) != 0) {
					ticks_to_expire +=
    5c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5c2a:	005b      	lsls	r3, r3, #1
    5c2c:	085b      	lsrs	r3, r3, #1
    5c2e:	189b      	adds	r3, r3, r2
    5c30:	6841      	ldr	r1, [r0, #4]
    5c32:	6882      	ldr	r2, [r0, #8]
    5c34:	428a      	cmp	r2, r1
    5c36:	d200      	bcs.n	5c3a <mayfly_xtal_stop_calc+0x11e>
    5c38:	000a      	movs	r2, r1
    5c3a:	1a9b      	subs	r3, r3, r2
    5c3c:	930a      	str	r3, [sp, #40]	; 0x28
    5c3e:	e022      	b.n	5c86 <mayfly_xtal_stop_calc+0x16a>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
		}
	} else {
		if (s_xtal_retained) {
    5c40:	781b      	ldrb	r3, [r3, #0]
    5c42:	2b00      	cmp	r3, #0
    5c44:	d002      	beq.n	5c4c <mayfly_xtal_stop_calc+0x130>
    5c46:	2001      	movs	r0, #1
    5c48:	f7fe fc2e 	bl	44a8 <mayfly_xtal_retain.part.10>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
		}
	} else {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);

		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
    5c4c:	7832      	ldrb	r2, [r6, #0]
    5c4e:	1f53      	subs	r3, r2, #5
    5c50:	b2db      	uxtb	r3, r3
    5c52:	2bf9      	cmp	r3, #249	; 0xf9
    5c54:	d862      	bhi.n	5d1c <mayfly_xtal_stop_calc+0x200>
    5c56:	4b35      	ldr	r3, [pc, #212]	; (5d2c <mayfly_xtal_stop_calc+0x210>)
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5c58:	2a06      	cmp	r2, #6
    5c5a:	d908      	bls.n	5c6e <mayfly_xtal_stop_calc+0x152>
				struct connection *conn;

				conn = mem_get(_radio.conn_pool,
    5c5c:	20c2      	movs	r0, #194	; 0xc2
    5c5e:	3a07      	subs	r2, #7
    5c60:	0040      	lsls	r0, r0, #1
    5c62:	b292      	uxth	r2, r2
    5c64:	21fc      	movs	r1, #252	; 0xfc
    5c66:	5818      	ldr	r0, [r3, r0]
    5c68:	f7fc fbaf 	bl	23ca <mem_get>
    5c6c:	e006      	b.n	5c7c <mayfly_xtal_stop_calc+0x160>
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    5c6e:	0018      	movs	r0, r3
    5c70:	3094      	adds	r0, #148	; 0x94
				conn = mem_get(_radio.conn_pool,
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    5c72:	2a05      	cmp	r2, #5
    5c74:	d002      	beq.n	5c7c <mayfly_xtal_stop_calc+0x160>
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    5c76:	334d      	adds	r3, #77	; 0x4d
    5c78:	33ff      	adds	r3, #255	; 0xff
    5c7a:	0018      	movs	r0, r3
			} else {
				LL_ASSERT(0);
			}

			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
    5c7c:	7832      	ldrb	r2, [r6, #0]
    5c7e:	2101      	movs	r1, #1
    5c80:	f7fe fc6c 	bl	455c <prepare_normal_set>
					   ticker_id);
		}
	}
}
    5c84:	e04a      	b.n	5d1c <mayfly_xtal_stop_calc+0x200>
			}

			/* auto conn param req or conn update procedure to
			 * avoid connection collisions.
			 */
			if ((conn) && (conn_curr) &&
    5c86:	2c00      	cmp	r4, #0
    5c88:	d048      	beq.n	5d1c <mayfly_xtal_stop_calc+0x200>
			    (conn_curr->conn_interval == conn->conn_interval)) {
    5c8a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
			}

			/* auto conn param req or conn update procedure to
			 * avoid connection collisions.
			 */
			if ((conn) && (conn_curr) &&
    5c8c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    5c8e:	4298      	cmp	r0, r3
    5c90:	d144      	bne.n	5d1c <mayfly_xtal_stop_calc+0x200>
			    (conn_curr->conn_interval == conn->conn_interval)) {
				u32_t ticks_conn_interval =
    5c92:	2324      	movs	r3, #36	; 0x24
    5c94:	4a27      	ldr	r2, [pc, #156]	; (5d34 <mayfly_xtal_stop_calc+0x218>)
    5c96:	33ff      	adds	r3, #255	; 0xff
    5c98:	2100      	movs	r1, #0
    5c9a:	f7fa fc17 	bl	4cc <__aeabi_lmul>
    5c9e:	4a26      	ldr	r2, [pc, #152]	; (5d38 <mayfly_xtal_stop_calc+0x21c>)
    5ca0:	2307      	movs	r3, #7
    5ca2:	f7fa fbf3 	bl	48c <__aeabi_uldivmod>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);

				/* remove laziness, if any, from
				 * ticks_to_expire.
				 */
				while (ticks_to_expire > ticks_conn_interval) {
    5ca6:	2200      	movs	r2, #0
			/* auto conn param req or conn update procedure to
			 * avoid connection collisions.
			 */
			if ((conn) && (conn_curr) &&
			    (conn_curr->conn_interval == conn->conn_interval)) {
				u32_t ticks_conn_interval =
    5ca8:	0200      	lsls	r0, r0, #8
    5caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5cac:	0a00      	lsrs	r0, r0, #8
    5cae:	2601      	movs	r6, #1
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);

				/* remove laziness, if any, from
				 * ticks_to_expire.
				 */
				while (ticks_to_expire > ticks_conn_interval) {
    5cb0:	4298      	cmp	r0, r3
    5cb2:	d202      	bcs.n	5cba <mayfly_xtal_stop_calc+0x19e>
					ticks_to_expire -= ticks_conn_interval;
    5cb4:	1a1b      	subs	r3, r3, r0
    5cb6:	0032      	movs	r2, r6
    5cb8:	e7f9      	b.n	5cae <mayfly_xtal_stop_calc+0x192>
    5cba:	2a00      	cmp	r2, #0
    5cbc:	d000      	beq.n	5cc0 <mayfly_xtal_stop_calc+0x1a4>
    5cbe:	930a      	str	r3, [sp, #40]	; 0x28
				}

				/* if next ticker close to this ticker, send
				 * conn param req.
				 */
				if ((conn_curr->role.slave.role != 0) &&
    5cc0:	002a      	movs	r2, r5
    5cc2:	0021      	movs	r1, r4
    5cc4:	3234      	adds	r2, #52	; 0x34
    5cc6:	7810      	ldrb	r0, [r2, #0]
    5cc8:	3134      	adds	r1, #52	; 0x34
    5cca:	2201      	movs	r2, #1
    5ccc:	7809      	ldrb	r1, [r1, #0]
    5cce:	4230      	tst	r0, r6
    5cd0:	d011      	beq.n	5cf6 <mayfly_xtal_stop_calc+0x1da>
    5cd2:	4211      	tst	r1, r2
    5cd4:	d122      	bne.n	5d1c <mayfly_xtal_stop_calc+0x200>
					(conn->role.master.role == 0) &&
    5cd6:	68ea      	ldr	r2, [r5, #12]
    5cd8:	323b      	adds	r2, #59	; 0x3b
    5cda:	429a      	cmp	r2, r3
    5cdc:	d91e      	bls.n	5d1c <mayfly_xtal_stop_calc+0x200>
					 (TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
							     625)
					  + conn_curr->hdr.ticks_slot))) {
					u32_t status;

					status = conn_update_req(conn_curr);
    5cde:	0028      	movs	r0, r5
    5ce0:	f7fd ff0e 	bl	3b00 <conn_update_req>
					if ((status == 2) &&
    5ce4:	2802      	cmp	r0, #2
    5ce6:	d119      	bne.n	5d1c <mayfly_xtal_stop_calc+0x200>
    5ce8:	0023      	movs	r3, r4
    5cea:	338c      	adds	r3, #140	; 0x8c
    5cec:	781b      	ldrb	r3, [r3, #0]
    5cee:	4203      	tst	r3, r0
    5cf0:	d014      	beq.n	5d1c <mayfly_xtal_stop_calc+0x200>
					    (conn->llcp_version.rx)) {
						conn_update_req(conn);
    5cf2:	0020      	movs	r0, r4
    5cf4:	e010      	b.n	5d18 <mayfly_xtal_stop_calc+0x1fc>
					}
				} else if ((conn_curr->role.master.role == 0) &&
    5cf6:	4211      	tst	r1, r2
    5cf8:	d010      	beq.n	5d1c <mayfly_xtal_stop_calc+0x200>
						(conn->role.slave.role != 0) &&
    5cfa:	68ea      	ldr	r2, [r5, #12]
    5cfc:	323b      	adds	r2, #59	; 0x3b
    5cfe:	429a      	cmp	r2, r3
    5d00:	d90c      	bls.n	5d1c <mayfly_xtal_stop_calc+0x200>
						 (TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
								     625) +
						  conn_curr->hdr.ticks_slot))) {
					u32_t status;

					status = conn_update_req(conn);
    5d02:	0020      	movs	r0, r4
    5d04:	f7fd fefc 	bl	3b00 <conn_update_req>
					if ((status == 2) &&
    5d08:	2802      	cmp	r0, #2
    5d0a:	d107      	bne.n	5d1c <mayfly_xtal_stop_calc+0x200>
    5d0c:	002b      	movs	r3, r5
    5d0e:	338c      	adds	r3, #140	; 0x8c
    5d10:	781b      	ldrb	r3, [r3, #0]
    5d12:	4203      	tst	r3, r0
    5d14:	d002      	beq.n	5d1c <mayfly_xtal_stop_calc+0x200>
					    (conn_curr->llcp_version.rx)) {
						conn_update_req(conn_curr);
    5d16:	0028      	movs	r0, r5
    5d18:	f7fd fef2 	bl	3b00 <conn_update_req>
			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
					   ticker_id);
		}
	}
}
    5d1c:	b00d      	add	sp, #52	; 0x34
    5d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d20:	00003a61 	.word	0x00003a61
    5d24:	20000a1d 	.word	0x20000a1d
    5d28:	200001a8 	.word	0x200001a8
    5d2c:	200005f4 	.word	0x200005f4
    5d30:	00003a65 	.word	0x00003a65
    5d34:	09ce5400 	.word	0x09ce5400
    5d38:	1afd498d 	.word	0x1afd498d

00005d3c <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    5d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d3e:	b099      	sub	sp, #100	; 0x64
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    5d40:	f7fc fcf6 	bl	2730 <radio_is_done>
    5d44:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    5d46:	2e00      	cmp	r6, #0
    5d48:	d012      	beq.n	5d70 <isr+0x34>
		 * and generate the profiling event at the end of the ISR.
		 */
		radio_tmr_sample();
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

		crc_ok = radio_crc_is_valid();
    5d4a:	f7fc fd15 	bl	2778 <radio_crc_is_valid>
    5d4e:	b2c3      	uxtb	r3, r0
    5d50:	930f      	str	r3, [sp, #60]	; 0x3c
		devmatch_ok = radio_filter_has_match();
    5d52:	f7fc fd99 	bl	2888 <radio_filter_has_match>
    5d56:	b2c7      	uxtb	r7, r0
		irkmatch_ok = radio_ar_has_match();
    5d58:	f7fc ff84 	bl	2c64 <radio_ar_has_match>
    5d5c:	b2c5      	uxtb	r5, r0
		irkmatch_id = radio_ar_match_get();
    5d5e:	f7fc ff69 	bl	2c34 <radio_ar_match_get>
    5d62:	b2c3      	uxtb	r3, r0
    5d64:	9311      	str	r3, [sp, #68]	; 0x44
		rssi_ready = radio_rssi_is_ready();
    5d66:	f7fc fd4b 	bl	2800 <radio_rssi_is_ready>
    5d6a:	b2c3      	uxtb	r3, r0
    5d6c:	930c      	str	r3, [sp, #48]	; 0x30
    5d6e:	e005      	b.n	5d7c <isr+0x40>
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
		irkmatch_id = 0xFF;
    5d70:	23ff      	movs	r3, #255	; 0xff
		devmatch_ok = radio_filter_has_match();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    5d72:	0035      	movs	r5, r6
    5d74:	0037      	movs	r7, r6
    5d76:	960c      	str	r6, [sp, #48]	; 0x30
		irkmatch_id = 0xFF;
    5d78:	9311      	str	r3, [sp, #68]	; 0x44
		devmatch_ok = radio_filter_has_match();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    5d7a:	960f      	str	r6, [sp, #60]	; 0x3c
		irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	radio_status_reset();
    5d7c:	f7fc fcc6 	bl	270c <radio_status_reset>
	radio_tmr_status_reset();
    5d80:	f7fc fd98 	bl	28b4 <radio_tmr_status_reset>
	radio_filter_status_reset();
    5d84:	f7fc fd78 	bl	2878 <radio_filter_status_reset>
	radio_ar_status_reset();
    5d88:	f7fc ff5c 	bl	2c44 <radio_ar_status_reset>
	radio_rssi_status_reset();
    5d8c:	f7fc fd32 	bl	27f4 <radio_rssi_status_reset>

	switch (_radio.state) {
    5d90:	4c95      	ldr	r4, [pc, #596]	; (5fe8 <isr+0x2ac>)
    5d92:	7c23      	ldrb	r3, [r4, #16]
    5d94:	2b05      	cmp	r3, #5
    5d96:	d901      	bls.n	5d9c <isr+0x60>
    5d98:	f001 fc32 	bl	7600 <isr+0x18c4>
    5d9c:	0018      	movs	r0, r3
    5d9e:	f7fa f9f5 	bl	18c <__gnu_thumb1_case_uhi>
    5da2:	0c60      	.short	0x0c60
    5da4:	0006008e 	.word	0x0006008e
    5da8:	0a910a91 	.word	0x0a910a91
    5dac:	0a91      	.short	0x0a91

static inline void isr_radio_state_tx(void)
{
	u32_t hcto;

	_radio.state = STATE_RX;
    5dae:	2301      	movs	r3, #1
    5db0:	7423      	strb	r3, [r4, #16]

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    5db2:	f7fc fe71 	bl	2a98 <radio_tmr_end_get>
    5db6:	0006      	movs	r6, r0

	radio_tmr_tifs_set(RADIO_TIFS);
    5db8:	2096      	movs	r0, #150	; 0x96
    5dba:	f7fc fd8b 	bl	28d4 <radio_tmr_tifs_set>

	switch (_radio.role) {
    5dbe:	7be0      	ldrb	r0, [r4, #15]
    5dc0:	3801      	subs	r0, #1
    5dc2:	2803      	cmp	r0, #3
    5dc4:	d901      	bls.n	5dca <isr+0x8e>
    5dc6:	f001 fc1b 	bl	7600 <isr+0x18c4>
    5dca:	36c3      	adds	r6, #195	; 0xc3

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
    5dcc:	2100      	movs	r1, #0

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */

	radio_tmr_tifs_set(RADIO_TIFS);

	switch (_radio.role) {
    5dce:	f7fa f9d3 	bl	178 <__gnu_thumb1_case_uqi>
    5dd2:	2a02      	.short	0x2a02
    5dd4:	4d4d      	.short	0x4d4d
	case ROLE_ADV:
		radio_switch_complete_and_tx(0, 0);
    5dd6:	0008      	movs	r0, r1
    5dd8:	f7fc fce8 	bl	27ac <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    5ddc:	f7fc fcda 	bl	2794 <radio_pkt_scratch_get>
    5de0:	f7fc fc66 	bl	26b0 <radio_pkt_rx_set>

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    5de4:	f7fc fc9c 	bl	2720 <radio_is_ready>
    5de8:	2800      	cmp	r0, #0
    5dea:	d001      	beq.n	5df0 <isr+0xb4>
    5dec:	f001 fc08 	bl	7600 <isr+0x18c4>

		if (_radio.advertiser.filter_policy && _radio.nirk) {
    5df0:	0023      	movs	r3, r4
    5df2:	223f      	movs	r2, #63	; 0x3f
    5df4:	33a5      	adds	r3, #165	; 0xa5
    5df6:	781b      	ldrb	r3, [r3, #0]
    5df8:	4393      	bics	r3, r2
    5dfa:	d006      	beq.n	5e0a <isr+0xce>
    5dfc:	7c60      	ldrb	r0, [r4, #17]
    5dfe:	2800      	cmp	r0, #0
    5e00:	d003      	beq.n	5e0a <isr+0xce>
			radio_ar_configure(_radio.nirk, _radio.irk);
    5e02:	0021      	movs	r1, r4
    5e04:	3112      	adds	r1, #18
    5e06:	f7fc fee7 	bl	2bd8 <radio_ar_configure>
		}

		hcto += radio_rx_chain_delay_get(0, 0);
    5e0a:	2100      	movs	r1, #0
    5e0c:	0008      	movs	r0, r1
    5e0e:	f7fc fc65 	bl	26dc <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
    5e12:	2100      	movs	r1, #0
		if (_radio.advertiser.filter_policy && _radio.nirk) {
			radio_ar_configure(_radio.nirk, _radio.irk);
		}

		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
    5e14:	1834      	adds	r4, r6, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    5e16:	0008      	movs	r0, r1
    5e18:	f7fc fc5c 	bl	26d4 <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    5e1c:	1a20      	subs	r0, r4, r0
    5e1e:	f7fc fdcb 	bl	29b8 <radio_tmr_hcto_configure>
    5e22:	f000 fd1e 	bl	6862 <isr+0xb26>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_RSSI */

		break;

	case ROLE_SCAN:
		radio_switch_complete_and_tx(0, 0);
    5e26:	0008      	movs	r0, r1
    5e28:	f7fc fcc0 	bl	27ac <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    5e2c:	23b6      	movs	r3, #182	; 0xb6
    5e2e:	22d8      	movs	r2, #216	; 0xd8
    5e30:	33ff      	adds	r3, #255	; 0xff
    5e32:	5ce3      	ldrb	r3, [r4, r3]
    5e34:	0052      	lsls	r2, r2, #1
    5e36:	58a2      	ldr	r2, [r4, r2]
    5e38:	009b      	lsls	r3, r3, #2
    5e3a:	5898      	ldr	r0, [r3, r2]
    5e3c:	3008      	adds	r0, #8
    5e3e:	f7fc fc37 	bl	26b0 <radio_pkt_rx_set>
				    pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    5e42:	f7fc fc6d 	bl	2720 <radio_is_ready>
    5e46:	1e05      	subs	r5, r0, #0
    5e48:	d001      	beq.n	5e4e <isr+0x112>
    5e4a:	f001 fbd9 	bl	7600 <isr+0x18c4>

		hcto += radio_rx_chain_delay_get(0, 0);
    5e4e:	0001      	movs	r1, r0
    5e50:	f7fc fc44 	bl	26dc <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
    5e54:	0029      	movs	r1, r5

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
    5e56:	1834      	adds	r4, r6, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    5e58:	0028      	movs	r0, r5
    5e5a:	f7fc fc3b 	bl	26d4 <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    5e5e:	1a20      	subs	r0, r4, r0
    5e60:	f7fc fdaa 	bl	29b8 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    5e64:	f7fc fcb2 	bl	27cc <radio_rssi_measure>
    5e68:	f001 fbfb 	bl	7662 <isr+0x1926>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
    5e6c:	0008      	movs	r0, r1
    5e6e:	f7fc fc9d 	bl	27ac <radio_switch_complete_and_tx>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    5e72:	23b6      	movs	r3, #182	; 0xb6
    5e74:	22d8      	movs	r2, #216	; 0xd8
    5e76:	33ff      	adds	r3, #255	; 0xff
    5e78:	5ce3      	ldrb	r3, [r4, r3]
    5e7a:	0052      	lsls	r2, r2, #1
    5e7c:	58a2      	ldr	r2, [r4, r2]
    5e7e:	009b      	lsls	r3, r3, #2
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    5e80:	5899      	ldr	r1, [r3, r2]
    5e82:	23c8      	movs	r3, #200	; 0xc8
    5e84:	005b      	lsls	r3, r3, #1
    5e86:	3108      	adds	r1, #8
    5e88:	58e0      	ldr	r0, [r4, r3]
    5e8a:	f7fe fb25 	bl	44d8 <rx_packet_set>
			      packet_rx[_radio.packet_rx_last]->pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    5e8e:	f7fc fc47 	bl	2720 <radio_is_ready>
    5e92:	1e05      	subs	r5, r0, #0
    5e94:	d001      	beq.n	5e9a <isr+0x15e>
    5e96:	f001 fbb3 	bl	7600 <isr+0x18c4>
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
						 _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		hcto += radio_rx_chain_delay_get(0, 0);
    5e9a:	0001      	movs	r1, r0
    5e9c:	f7fc fc1e 	bl	26dc <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
    5ea0:	0029      	movs	r1, r5
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
						 _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
    5ea2:	1834      	adds	r4, r6, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    5ea4:	0028      	movs	r0, r5
    5ea6:	f7fc fc15 	bl	26d4 <radio_tx_chain_delay_get>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_hcto_configure(hcto);
    5eaa:	1a20      	subs	r0, r4, r0
    5eac:	f7fc fd84 	bl	29b8 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    5eb0:	f7fc fddc 	bl	2a6c <radio_tmr_end_capture>
		/* TODO: use timebox for tx enqueue (instead of 1 packet
		 * that is routed, which may not be for the current connection)
		 * try to route as much tx packet in queue into corresponding
		 * connection's tx list.
		 */
		packet_tx_enqueue(1);
    5eb4:	2001      	movs	r0, #1
    5eb6:	f7fe fc97 	bl	47e8 <packet_tx_enqueue>
    5eba:	f001 fbd2 	bl	7662 <isr+0x1926>
				      u8_t devmatch_ok, u8_t irkmatch_ok,
				      u8_t irkmatch_id, u8_t rssi_ready)
{
	u32_t err;

	if (!((trx_done) || ((SILENT_CONNECTION) &&
    5ebe:	2e00      	cmp	r6, #0
    5ec0:	d105      	bne.n	5ece <isr+0x192>
			     (_radio.role == ROLE_SLAVE)))) {
		_radio.state = STATE_CLOSE;
    5ec2:	2303      	movs	r3, #3
    5ec4:	7423      	strb	r3, [r4, #16]
		radio_disable();
    5ec6:	f7fc fc17 	bl	26f8 <radio_disable>
    5eca:	f001 fbca 	bl	7662 <isr+0x1926>

		return;
	}

	switch (_radio.role) {
    5ece:	7be0      	ldrb	r0, [r4, #15]
    5ed0:	3801      	subs	r0, #1
    5ed2:	2803      	cmp	r0, #3
    5ed4:	d901      	bls.n	5eda <isr+0x19e>
    5ed6:	f001 fb93 	bl	7600 <isr+0x18c4>
    5eda:	f7fa f957 	bl	18c <__gnu_thumb1_case_uhi>
    5ede:	0004      	.short	0x0004
    5ee0:	052e022b 	.word	0x052e022b
    5ee4:	052e      	.short	0x052e
	case ROLE_ADV:
		if (crc_ok) {
    5ee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5ee8:	2b00      	cmp	r3, #0
    5eea:	d0ea      	beq.n	5ec2 <isr+0x186>
			       u8_t irkmatch_id, u8_t rssi_ready)
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    5eec:	f7fc fc52 	bl	2794 <radio_pkt_scratch_get>
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    5ef0:	220f      	movs	r2, #15
    5ef2:	7803      	ldrb	r3, [r0, #0]
			       u8_t irkmatch_id, u8_t rssi_ready)
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    5ef4:	0006      	movs	r6, r0
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    5ef6:	401a      	ands	r2, r3
    5ef8:	2a03      	cmp	r2, #3
    5efa:	d137      	bne.n	5f6c <isr+0x230>
    5efc:	7843      	ldrb	r3, [r0, #1]
    5efe:	2b0c      	cmp	r3, #12
    5f00:	d1df      	bne.n	5ec2 <isr+0x186>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
	    (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    5f02:	0023      	movs	r3, r4
    5f04:	33a5      	adds	r3, #165	; 0xa5
    5f06:	781b      	ldrb	r3, [r3, #0]
	     (devmatch_ok) || (irkmatch_ok)) &&
    5f08:	065b      	lsls	r3, r3, #25
    5f0a:	d501      	bpl.n	5f10 <isr+0x1d4>
    5f0c:	433d      	orrs	r5, r7
    5f0e:	d0d8      	beq.n	5ec2 <isr+0x186>
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv;
	u8_t pdu_len;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
    5f10:	2003      	movs	r0, #3
    5f12:	f7fd fdd1 	bl	3ab8 <packet_rx_reserve_get>
	if (radio_pdu_node_rx == 0) {
    5f16:	2800      	cmp	r0, #0
    5f18:	d0d3      	beq.n	5ec2 <isr+0x186>
		return 1;
	}

	/* Prepare the report (scan req) */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    5f1a:	2301      	movs	r3, #1
    5f1c:	425b      	negs	r3, r3
    5f1e:	80c3      	strh	r3, [r0, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_SCAN_REQ;
    5f20:	3306      	adds	r3, #6
    5f22:	7103      	strb	r3, [r0, #4]

	/* Make a copy of PDU into Rx node (as the received PDU is in the
	 * scratch buffer), and save the RSSI value.
	 */
	pdu_adv = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
    5f24:	3008      	adds	r0, #8
    5f26:	0007      	movs	r7, r0
	pdu_len = offsetof(struct pdu_adv, payload) + pdu_adv_rx->len;
	memcpy(pdu_adv, pdu_adv_rx, pdu_len);
    5f28:	7875      	ldrb	r5, [r6, #1]
    5f2a:	0031      	movs	r1, r6
    5f2c:	3502      	adds	r5, #2
    5f2e:	b2ed      	uxtb	r5, r5
    5f30:	002a      	movs	r2, r5
    5f32:	f7fb f801 	bl	f38 <memcpy>
	((u8_t *)pdu_adv)[pdu_len] =
    5f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5f38:	197d      	adds	r5, r7, r5
    5f3a:	277f      	movs	r7, #127	; 0x7f
    5f3c:	2b00      	cmp	r3, #0
    5f3e:	d002      	beq.n	5f46 <isr+0x20a>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    5f40:	f7fc fc50 	bl	27e4 <radio_rssi_get>
	 * scratch buffer), and save the RSSI value.
	 */
	pdu_adv = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	pdu_len = offsetof(struct pdu_adv, payload) + pdu_adv_rx->len;
	memcpy(pdu_adv, pdu_adv_rx, pdu_len);
	((u8_t *)pdu_adv)[pdu_len] =
    5f44:	4007      	ands	r7, r0
    5f46:	702f      	strb	r7, [r5, #0]
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();
    5f48:	f7fe fb4e 	bl	45e8 <packet_rx_enqueue>
			/* Scan Response will not be transmitted */
			return err;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_NOTIFY */

		_radio.state = STATE_CLOSE;
    5f4c:	2303      	movs	r3, #3
    5f4e:	7423      	strb	r3, [r4, #16]

		radio_switch_complete_and_disable();
    5f50:	f7fc fc34 	bl	27bc <radio_switch_complete_and_disable>

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);
    5f54:	23a2      	movs	r3, #162	; 0xa2
    5f56:	005b      	lsls	r3, r3, #1

		_radio.state = STATE_CLOSE;

		radio_switch_complete_and_disable();

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
    5f58:	5ce0      	ldrb	r0, [r4, r3]
    5f5a:	3b1e      	subs	r3, #30
    5f5c:	3bff      	subs	r3, #255	; 0xff
    5f5e:	4358      	muls	r0, r3
    5f60:	1820      	adds	r0, r4, r0
    5f62:	30f6      	adds	r0, #246	; 0xf6
    5f64:	f7fc fbac 	bl	26c0 <radio_pkt_tx_set>
    5f68:	f001 fb7b 	bl	7662 <isr+0x1926>
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    5f6c:	2a05      	cmp	r2, #5
    5f6e:	d1a8      	bne.n	5ec2 <isr+0x186>
    5f70:	7842      	ldrb	r2, [r0, #1]
    5f72:	2a22      	cmp	r2, #34	; 0x22
    5f74:	d1a5      	bne.n	5ec2 <isr+0x186>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    5f76:	0022      	movs	r2, r4
    5f78:	32a5      	adds	r2, #165	; 0xa5
    5f7a:	7812      	ldrb	r2, [r2, #0]
    5f7c:	0992      	lsrs	r2, r2, #6
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
    5f7e:	0792      	lsls	r2, r2, #30
    5f80:	d501      	bpl.n	5f86 <isr+0x24a>
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
    5f82:	433d      	orrs	r5, r7
    5f84:	d09d      	beq.n	5ec2 <isr+0x186>
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];
    5f86:	0022      	movs	r2, r4
    5f88:	32f4      	adds	r2, #244	; 0xf4
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    5f8a:	7811      	ldrb	r1, [r2, #0]
    5f8c:	2227      	movs	r2, #39	; 0x27
    5f8e:	434a      	muls	r2, r1

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
    5f90:	210f      	movs	r1, #15
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    5f92:	32a0      	adds	r2, #160	; 0xa0
    5f94:	18a2      	adds	r2, r4, r2
    5f96:	920f      	str	r2, [sp, #60]	; 0x3c

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
    5f98:	7992      	ldrb	r2, [r2, #6]
    5f9a:	4011      	ands	r1, r2
    5f9c:	2901      	cmp	r1, #1
    5f9e:	d005      	beq.n	5fac <isr+0x270>
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    5fa0:	23fb      	movs	r3, #251	; 0xfb
    5fa2:	005b      	lsls	r3, r3, #1
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
    5fa4:	5ce3      	ldrb	r3, [r4, r3]
    5fa6:	2b00      	cmp	r3, #0
    5fa8:	d029      	beq.n	5ffe <isr+0x2c2>
    5faa:	e01f      	b.n	5fec <isr+0x2b0>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
    5fac:	0651      	lsls	r1, r2, #25
		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    5fae:	0fc9      	lsrs	r1, r1, #31
    5fb0:	09d8      	lsrs	r0, r3, #7
    5fb2:	4281      	cmp	r1, r0
    5fb4:	d185      	bne.n	5ec2 <isr+0x186>
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
    5fb6:	065b      	lsls	r3, r3, #25
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
    5fb8:	09d2      	lsrs	r2, r2, #7
    5fba:	0fdb      	lsrs	r3, r3, #31
    5fbc:	429a      	cmp	r2, r3
    5fbe:	d000      	beq.n	5fc2 <isr+0x286>
    5fc0:	e77f      	b.n	5ec2 <isr+0x186>
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
    5fc2:	0031      	movs	r1, r6
    5fc4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    5fc6:	2206      	movs	r2, #6
    5fc8:	3108      	adds	r1, #8
    5fca:	3008      	adds	r0, #8
    5fcc:	f7fa ff9f 	bl	f0e <memcmp>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
    5fd0:	2800      	cmp	r0, #0
    5fd2:	d000      	beq.n	5fd6 <isr+0x29a>
    5fd4:	e775      	b.n	5ec2 <isr+0x186>
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
    5fd6:	980f      	ldr	r0, [sp, #60]	; 0x3c
			     pdu_adv->payload.connect_ind.init_addr,
    5fd8:	1cb1      	adds	r1, r6, #2
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
    5fda:	2206      	movs	r2, #6
    5fdc:	300e      	adds	r0, #14
    5fde:	f7fa ff96 	bl	f0e <memcmp>
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
    5fe2:	2800      	cmp	r0, #0
    5fe4:	d0dc      	beq.n	5fa0 <isr+0x264>
    5fe6:	e76c      	b.n	5ec2 <isr+0x186>
    5fe8:	200005f4 	.word	0x200005f4
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    5fec:	23fa      	movs	r3, #250	; 0xfa
    5fee:	22f6      	movs	r2, #246	; 0xf6
    5ff0:	005b      	lsls	r3, r3, #1
    5ff2:	32ff      	adds	r2, #255	; 0xff
    5ff4:	5ce3      	ldrb	r3, [r4, r3]
    5ff6:	5ca2      	ldrb	r2, [r4, r2]
    5ff8:	429a      	cmp	r2, r3
    5ffa:	d000      	beq.n	5ffe <isr+0x2c2>
    5ffc:	e761      	b.n	5ec2 <isr+0x186>
		   (_radio.advertiser.conn)) {
    5ffe:	0025      	movs	r5, r4
    6000:	35fc      	adds	r5, #252	; 0xfc
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    6002:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    6004:	2b00      	cmp	r3, #0
    6006:	d100      	bne.n	600a <isr+0x2ce>
    6008:	e75b      	b.n	5ec2 <isr+0x186>
		u32_t conn_offset_us;
		u32_t rx_ready_delay;
		u32_t ticker_status;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    600a:	2004      	movs	r0, #4
    600c:	f7fd fd54 	bl	3ab8 <packet_rx_reserve_get>
    6010:	900a      	str	r0, [sp, #40]	; 0x28
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    6012:	2800      	cmp	r0, #0
    6014:	d100      	bne.n	6018 <isr+0x2dc>
    6016:	e754      	b.n	5ec2 <isr+0x186>
			return 1;
		}

		_radio.state = STATE_STOP;
    6018:	2304      	movs	r3, #4
    601a:	7423      	strb	r3, [r4, #16]
		radio_disable();
    601c:	f7fc fb6c 	bl	26f8 <radio_disable>

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    6020:	2300      	movs	r3, #0

		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
    6022:	6cef      	ldr	r7, [r5, #76]	; 0x4c
		_radio.advertiser.conn = NULL;
    6024:	64eb      	str	r3, [r5, #76]	; 0x4c

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6026:	3385      	adds	r3, #133	; 0x85
    6028:	33ff      	adds	r3, #255	; 0xff
    602a:	58e1      	ldr	r1, [r4, r3]
    602c:	22fc      	movs	r2, #252	; 0xfc
    602e:	0038      	movs	r0, r7
    6030:	f7fc f9ce 	bl	23d0 <mem_index_get>
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    6034:	0031      	movs	r1, r6
		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6036:	8438      	strh	r0, [r7, #32]
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    6038:	0038      	movs	r0, r7
    603a:	2203      	movs	r2, #3
    603c:	3112      	adds	r1, #18
    603e:	3014      	adds	r0, #20
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    6040:	003d      	movs	r5, r7
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    6042:	f7fa ff79 	bl	f38 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    6046:	0031      	movs	r1, r6
    6048:	3510      	adds	r5, #16
    604a:	2204      	movs	r2, #4
    604c:	310e      	adds	r1, #14
    604e:	0028      	movs	r0, r5
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    6050:	003c      	movs	r4, r7
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    6052:	f7fa ff71 	bl	f38 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    6056:	0031      	movs	r1, r6
    6058:	3417      	adds	r4, #23
    605a:	2205      	movs	r2, #5
    605c:	311e      	adds	r1, #30
    605e:	0020      	movs	r0, r4
    6060:	f7fa ff6a 	bl	f38 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    6064:	2105      	movs	r1, #5
    6066:	0020      	movs	r0, r4
    6068:	f7fc f9ee 	bl	2448 <util_ones_count_get>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    606c:	223f      	movs	r2, #63	; 0x3f
    606e:	7f3b      	ldrb	r3, [r7, #28]
    6070:	4010      	ands	r0, r2
    6072:	4393      	bics	r3, r2
    6074:	4318      	orrs	r0, r3
    6076:	7738      	strb	r0, [r7, #28]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    6078:	0038      	movs	r0, r7
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    607a:	1d33      	adds	r3, r6, #4
    607c:	7fdb      	ldrb	r3, [r3, #31]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    607e:	0029      	movs	r1, r5
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    6080:	06db      	lsls	r3, r3, #27
    6082:	0edb      	lsrs	r3, r3, #27
    6084:	77bb      	strb	r3, [r7, #30]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    6086:	7e73      	ldrb	r3, [r6, #25]
    6088:	7e32      	ldrb	r2, [r6, #24]
    608a:	021b      	lsls	r3, r3, #8
    608c:	4313      	orrs	r3, r2
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
    608e:	84bb      	strh	r3, [r7, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
    6090:	7e73      	ldrb	r3, [r6, #25]
    6092:	7e32      	ldrb	r2, [r6, #24]
    6094:	021b      	lsls	r3, r3, #8
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    6096:	4313      	orrs	r3, r2
    6098:	4ae1      	ldr	r2, [pc, #900]	; (6420 <isr+0x6e4>)
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    609a:	3050      	adds	r0, #80	; 0x50
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    609c:	435a      	muls	r2, r3
    609e:	920c      	str	r2, [sp, #48]	; 0x30
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
    60a0:	7ef3      	ldrb	r3, [r6, #27]
    60a2:	7eb2      	ldrb	r2, [r6, #26]
    60a4:	021b      	lsls	r3, r3, #8
    60a6:	4313      	orrs	r3, r2
    60a8:	84fb      	strh	r3, [r7, #38]	; 0x26
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    60aa:	2204      	movs	r2, #4
    60ac:	f7fa ff44 	bl	f38 <memcpy>
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
    60b0:	7f70      	ldrb	r0, [r6, #29]
    60b2:	7f33      	ldrb	r3, [r6, #28]
    60b4:	0200      	lsls	r0, r0, #8
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    60b6:	4318      	orrs	r0, r3
    60b8:	4bda      	ldr	r3, [pc, #872]	; (6424 <isr+0x6e8>)
    60ba:	990c      	ldr	r1, [sp, #48]	; 0x30
    60bc:	4358      	muls	r0, r3
    60be:	f7fa f86f 	bl	1a0 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    60c2:	990c      	ldr	r1, [sp, #48]	; 0x30
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    60c4:	85b8      	strh	r0, [r7, #44]	; 0x2c
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    60c6:	48d8      	ldr	r0, [pc, #864]	; (6428 <isr+0x6ec>)
    60c8:	f7fa f86a 	bl	1a0 <__aeabi_uidiv>
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    60cc:	2406      	movs	r4, #6
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    60ce:	8c3b      	ldrh	r3, [r7, #32]
    60d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    60d2:	8638      	strh	r0, [r7, #48]	; 0x30

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    60d4:	0015      	movs	r5, r2
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    60d6:	80d3      	strh	r3, [r2, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    60d8:	7114      	strb	r4, [r2, #4]
    60da:	0013      	movs	r3, r2

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    60dc:	2200      	movs	r2, #0
    60de:	72da      	strb	r2, [r3, #11]
		radio_le_conn_cmplt->role = 0x01;
    60e0:	2301      	movs	r3, #1
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    60e2:	0028      	movs	r0, r5
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
    60e4:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    60e6:	7833      	ldrb	r3, [r6, #0]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
    60e8:	1cb1      	adds	r1, r6, #2
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    60ea:	065b      	lsls	r3, r3, #25
    60ec:	0fdb      	lsrs	r3, r3, #31
    60ee:	736b      	strb	r3, [r5, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    60f0:	0022      	movs	r2, r4
    60f2:	300e      	adds	r0, #14
    60f4:	f7fa ff20 	bl	f38 <memcpy>
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    60f8:	0031      	movs	r1, r6
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    60fa:	7833      	ldrb	r3, [r6, #0]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    60fc:	980a      	ldr	r0, [sp, #40]	; 0x28
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    60fe:	09db      	lsrs	r3, r3, #7
    6100:	752b      	strb	r3, [r5, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    6102:	3108      	adds	r1, #8
    6104:	0022      	movs	r2, r4
    6106:	3015      	adds	r0, #21
    6108:	f7fa ff16 	bl	f38 <memcpy>
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    610c:	2244      	movs	r2, #68	; 0x44
    610e:	466b      	mov	r3, sp
    6110:	189b      	adds	r3, r3, r2
    6112:	781b      	ldrb	r3, [r3, #0]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    6114:	350b      	adds	r5, #11
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    6116:	742b      	strb	r3, [r5, #16]
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    6118:	7e73      	ldrb	r3, [r6, #25]
    611a:	7e32      	ldrb	r2, [r6, #24]
    611c:	021b      	lsls	r3, r3, #8
    611e:	4313      	orrs	r3, r2
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
    6120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6122:	7713      	strb	r3, [r2, #28]
    6124:	0a1b      	lsrs	r3, r3, #8
    6126:	7753      	strb	r3, [r2, #29]
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
    6128:	7ef3      	ldrb	r3, [r6, #27]
    612a:	7eb2      	ldrb	r2, [r6, #26]
    612c:	021b      	lsls	r3, r3, #8
    612e:	4313      	orrs	r3, r2
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
    6130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6132:	7793      	strb	r3, [r2, #30]
    6134:	0a1b      	lsrs	r3, r3, #8
    6136:	77d3      	strb	r3, [r2, #31]
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
    6138:	7f73      	ldrb	r3, [r6, #29]
    613a:	7f32      	ldrb	r2, [r6, #28]
    613c:	021b      	lsls	r3, r3, #8
    613e:	4313      	orrs	r3, r2
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
    6140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6142:	3220      	adds	r2, #32
    6144:	7013      	strb	r3, [r2, #0]
    6146:	0a1b      	lsrs	r3, r3, #8
    6148:	7053      	strb	r3, [r2, #1]
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
			pdu_adv->payload.connect_ind.lldata.sca;
    614a:	1d33      	adds	r3, r6, #4
    614c:	7fdb      	ldrb	r3, [r3, #31]
    614e:	095b      	lsrs	r3, r3, #5
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
    6150:	75eb      	strb	r3, [r5, #23]
			pdu_adv->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    6152:	8c38      	ldrh	r0, [r7, #32]
    6154:	f7fe f97e 	bl	4454 <rx_fc_lock>
		packet_rx_enqueue();
    6158:	f7fe fa46 	bl	45e8 <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    615c:	2003      	movs	r0, #3
    615e:	f7fd fcab 	bl	3ab8 <packet_rx_reserve_get>
    6162:	4baf      	ldr	r3, [pc, #700]	; (6420 <isr+0x6e4>)
    6164:	930a      	str	r3, [sp, #40]	; 0x28
			LL_ASSERT(radio_pdu_node_rx);
    6166:	2800      	cmp	r0, #0
    6168:	d101      	bne.n	616e <isr+0x432>
    616a:	f001 fa49 	bl	7600 <isr+0x18c4>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    616e:	8c3b      	ldrh	r3, [r7, #32]
    6170:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    6172:	230a      	movs	r3, #10
    6174:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv->chan_sel) {
    6176:	7832      	ldrb	r2, [r6, #0]
    6178:	3316      	adds	r3, #22
    617a:	4013      	ands	r3, r2
    617c:	d00e      	beq.n	619c <isr+0x460>
				u16_t aa_ls =
    617e:	7c7b      	ldrb	r3, [r7, #17]
    6180:	7c3a      	ldrb	r2, [r7, #16]
    6182:	021b      	lsls	r3, r3, #8
    6184:	431a      	orrs	r2, r3
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    6186:	7cfb      	ldrb	r3, [r7, #19]
    6188:	7cb9      	ldrb	r1, [r7, #18]
    618a:	021b      	lsls	r3, r3, #8
    618c:	430b      	orrs	r3, r1
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    618e:	2440      	movs	r4, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    6190:	4053      	eors	r3, r2
    6192:	83fb      	strh	r3, [r7, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    6194:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    6196:	7f39      	ldrb	r1, [r7, #28]
    6198:	4321      	orrs	r1, r4
    619a:	7739      	strb	r1, [r7, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    619c:	72c3      	strb	r3, [r0, #11]
			}

			packet_rx_enqueue();
    619e:	f7fe fa23 	bl	45e8 <packet_rx_enqueue>
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
    61a2:	0039      	movs	r1, r7
    61a4:	240e      	movs	r4, #14
    61a6:	1d33      	adds	r3, r6, #4
    61a8:	7fdb      	ldrb	r3, [r3, #31]
    61aa:	3134      	adds	r1, #52	; 0x34
    61ac:	780a      	ldrb	r2, [r1, #0]
    61ae:	095b      	lsrs	r3, r3, #5
    61b0:	0058      	lsls	r0, r3, #1
    61b2:	43a2      	bics	r2, r4
    61b4:	4302      	orrs	r2, r0
    61b6:	700a      	strb	r2, [r1, #0]
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    61b8:	22ce      	movs	r2, #206	; 0xce
    61ba:	4d9c      	ldr	r5, [pc, #624]	; (642c <isr+0x6f0>)
    61bc:	0052      	lsls	r2, r2, #1
    61be:	5caa      	ldrb	r2, [r5, r2]
    61c0:	499b      	ldr	r1, [pc, #620]	; (6430 <isr+0x6f4>)
    61c2:	0052      	lsls	r2, r2, #1
			   gc_lookup_ppm[conn->role.slave.sca]) *
    61c4:	005b      	lsls	r3, r3, #1
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    61c6:	5a50      	ldrh	r0, [r2, r1]
    61c8:	5a5b      	ldrh	r3, [r3, r1]
    61ca:	499a      	ldr	r1, [pc, #616]	; (6434 <isr+0x6f8>)
    61cc:	18c0      	adds	r0, r0, r3
    61ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    61d0:	2400      	movs	r4, #0
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    61d2:	4358      	muls	r0, r3
    61d4:	4b98      	ldr	r3, [pc, #608]	; (6438 <isr+0x6fc>)
    61d6:	18c0      	adds	r0, r0, r3
    61d8:	f7f9 ffe2 	bl	1a0 <__aeabi_uidiv>
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    61dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    61de:	63b8      	str	r0, [r7, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    61e0:	085b      	lsrs	r3, r3, #1
    61e2:	3b96      	subs	r3, #150	; 0x96
    61e4:	63fb      	str	r3, [r7, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    61e6:	7d73      	ldrb	r3, [r6, #21]
    61e8:	4a8d      	ldr	r2, [pc, #564]	; (6420 <isr+0x6e4>)
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    61ea:	64bc      	str	r4, [r7, #72]	; 0x48
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    61ec:	4353      	muls	r3, r2
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    61ee:	0020      	movs	r0, r4
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    61f0:	64fb      	str	r3, [r7, #76]	; 0x4c
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    61f2:	f7fc fa71 	bl	26d8 <radio_rx_ready_delay_get>

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    61f6:	4a91      	ldr	r2, [pc, #580]	; (643c <isr+0x700>)
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    61f8:	9010      	str	r0, [sp, #64]	; 0x40

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    61fa:	2300      	movs	r3, #0
    61fc:	1880      	adds	r0, r0, r2
    61fe:	0021      	movs	r1, r4
    6200:	4a8f      	ldr	r2, [pc, #572]	; (6440 <isr+0x704>)
    6202:	f7fa f963 	bl	4cc <__aeabi_lmul>
    6206:	4a8f      	ldr	r2, [pc, #572]	; (6444 <isr+0x708>)
    6208:	2307      	movs	r3, #7
    620a:	f7fa f93f 	bl	48c <__aeabi_uldivmod>
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    620e:	23fc      	movs	r3, #252	; 0xfc
    6210:	005b      	lsls	r3, r3, #1
    6212:	58ea      	ldr	r2, [r5, r3]
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    6214:	0200      	lsls	r0, r0, #8
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    6216:	3bd2      	subs	r3, #210	; 0xd2
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    6218:	0a00      	lsrs	r0, r0, #8
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    621a:	3bff      	subs	r3, #255	; 0xff
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    621c:	60f8      	str	r0, [r7, #12]
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    621e:	607a      	str	r2, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    6220:	603b      	str	r3, [r7, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    6222:	60bc      	str	r4, [r7, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    6224:	920a      	str	r2, [sp, #40]	; 0x28
    6226:	429a      	cmp	r2, r3
    6228:	d200      	bcs.n	622c <isr+0x4f0>
    622a:	930a      	str	r3, [sp, #40]	; 0x28
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us -=
    622c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    622e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    6230:	2500      	movs	r5, #0
    6232:	1a9b      	subs	r3, r3, r2
    6234:	930c      	str	r3, [sp, #48]	; 0x30
			conn->role.slave.window_widening_periodic_us;

		conn_offset_us = radio_tmr_end_get();
    6236:	f7fc fc2f 	bl	2a98 <radio_tmr_end_get>
    623a:	9011      	str	r0, [sp, #68]	; 0x44
		conn_offset_us +=
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
    623c:	7df3      	ldrb	r3, [r6, #23]
    623e:	7db2      	ldrb	r2, [r6, #22]
    6240:	021b      	lsls	r3, r3, #8
    6242:	4313      	orrs	r3, r2
    6244:	001c      	movs	r4, r3
    6246:	4b76      	ldr	r3, [pc, #472]	; (6420 <isr+0x6e4>)
			 1) * 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6248:	0029      	movs	r1, r5
    624a:	3401      	adds	r4, #1
    624c:	0028      	movs	r0, r5
    624e:	435c      	muls	r4, r3
    6250:	f7fc fa40 	bl	26d4 <radio_tx_chain_delay_get>
    6254:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6256:	3c20      	subs	r4, #32
    6258:	191c      	adds	r4, r3, r4
		conn_offset_us -= rx_ready_delay;
		conn_offset_us -= RADIO_TICKER_JITTER_US << 1;
    625a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    625c:	1a20      	subs	r0, r4, r0
    625e:	1ac3      	subs	r3, r0, r3
    6260:	9310      	str	r3, [sp, #64]	; 0x40

		/* Stop Advertiser */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6262:	4b79      	ldr	r3, [pc, #484]	; (6448 <isr+0x70c>)
    6264:	2205      	movs	r2, #5
    6266:	9300      	str	r3, [sp, #0]
    6268:	0029      	movs	r1, r5
    626a:	4b78      	ldr	r3, [pc, #480]	; (644c <isr+0x710>)
    626c:	0028      	movs	r0, r5
    626e:	f7fd fb31 	bl	38d4 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_ADV,
					    ticker_stop_adv_assert,
					    (void *)__LINE__);
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    6272:	4977      	ldr	r1, [pc, #476]	; (6450 <isr+0x714>)
    6274:	f7fe fd12 	bl	4c9c <ticker_stop_adv_assert>

		/* Stop Direct Adv Stopper */
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    6278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    627a:	799a      	ldrb	r2, [r3, #6]
    627c:	230f      	movs	r3, #15
    627e:	4013      	ands	r3, r2
    6280:	2b01      	cmp	r3, #1
    6282:	d106      	bne.n	6292 <isr+0x556>
			/* Advertiser stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6284:	9500      	str	r5, [sp, #0]
    6286:	002b      	movs	r3, r5
    6288:	2203      	movs	r2, #3
    628a:	0029      	movs	r1, r5
    628c:	0028      	movs	r0, r5
    628e:	f7fd fb21 	bl	38d4 <ticker_stop>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(conn_offset_us),
		     TICKER_US_TO_TICKS(conn_interval_us),
    6292:	2400      	movs	r4, #0
    6294:	980c      	ldr	r0, [sp, #48]	; 0x30
    6296:	4a6a      	ldr	r2, [pc, #424]	; (6440 <isr+0x704>)
    6298:	2300      	movs	r3, #0
    629a:	0021      	movs	r1, r4
    629c:	f7fa f916 	bl	4cc <__aeabi_lmul>
    62a0:	4a68      	ldr	r2, [pc, #416]	; (6444 <isr+0x708>)
    62a2:	2307      	movs	r3, #7
    62a4:	900c      	str	r0, [sp, #48]	; 0x30
    62a6:	910d      	str	r1, [sp, #52]	; 0x34
    62a8:	f7fa f8f0 	bl	48c <__aeabi_uldivmod>

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
    62ac:	4b5f      	ldr	r3, [pc, #380]	; (642c <isr+0x6f0>)
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_ADV_STOP, NULL, NULL);
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    62ae:	8c3d      	ldrh	r5, [r7, #32]
    62b0:	685e      	ldr	r6, [r3, #4]
    62b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    62b4:	9706      	str	r7, [sp, #24]
    62b6:	1af6      	subs	r6, r6, r3
    62b8:	4b66      	ldr	r3, [pc, #408]	; (6454 <isr+0x718>)
    62ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    62bc:	9308      	str	r3, [sp, #32]
    62be:	4b66      	ldr	r3, [pc, #408]	; (6458 <isr+0x71c>)
    62c0:	0021      	movs	r1, r4
    62c2:	9307      	str	r3, [sp, #28]
    62c4:	4b65      	ldr	r3, [pc, #404]	; (645c <isr+0x720>)
    62c6:	3507      	adds	r5, #7
    62c8:	9305      	str	r3, [sp, #20]
    62ca:	68fb      	ldr	r3, [r7, #12]
    62cc:	0207      	lsls	r7, r0, #8
    62ce:	189b      	adds	r3, r3, r2
    62d0:	b29b      	uxth	r3, r3
    62d2:	0a3f      	lsrs	r7, r7, #8
    62d4:	9304      	str	r3, [sp, #16]
    62d6:	4a5b      	ldr	r2, [pc, #364]	; (6444 <isr+0x708>)
    62d8:	2307      	movs	r3, #7
    62da:	0038      	movs	r0, r7
    62dc:	9403      	str	r4, [sp, #12]
    62de:	f7fa f8f5 	bl	4cc <__aeabi_lmul>
    62e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    62e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    62e6:	1a12      	subs	r2, r2, r0
    62e8:	418b      	sbcs	r3, r1
    62ea:	0010      	movs	r0, r2
    62ec:	22fa      	movs	r2, #250	; 0xfa
    62ee:	0019      	movs	r1, r3
    62f0:	0092      	lsls	r2, r2, #2
    62f2:	2300      	movs	r3, #0
    62f4:	f7fa f8ca 	bl	48c <__aeabi_uldivmod>
    62f8:	4a51      	ldr	r2, [pc, #324]	; (6440 <isr+0x704>)
    62fa:	9002      	str	r0, [sp, #8]
    62fc:	2300      	movs	r3, #0
    62fe:	9810      	ldr	r0, [sp, #64]	; 0x40
    6300:	0021      	movs	r1, r4
    6302:	9701      	str	r7, [sp, #4]
    6304:	f7fa f8e2 	bl	4cc <__aeabi_lmul>
    6308:	4a4e      	ldr	r2, [pc, #312]	; (6444 <isr+0x708>)
    630a:	2307      	movs	r3, #7
    630c:	f7fa f8be 	bl	48c <__aeabi_uldivmod>
    6310:	0200      	lsls	r0, r0, #8
    6312:	0a00      	lsrs	r0, r0, #8
    6314:	b2ed      	uxtb	r5, r5
    6316:	9000      	str	r0, [sp, #0]
    6318:	0033      	movs	r3, r6
    631a:	002a      	movs	r2, r5
    631c:	0021      	movs	r1, r4
    631e:	0020      	movs	r0, r4
    6320:	f7fd fa40 	bl	37a4 <ticker_start>
		     TICKER_US_TO_TICKS(conn_interval_us),
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
		     (ticks_slot_offset + conn->hdr.ticks_slot),
		     event_slave_prepare, conn, ticker_success_assert,
		     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6324:	2302      	movs	r3, #2
    6326:	4398      	bics	r0, r3
    6328:	42a0      	cmp	r0, r4
    632a:	d001      	beq.n	6330 <isr+0x5f4>
    632c:	f001 f968 	bl	7600 <isr+0x18c4>
    6330:	f001 f997 	bl	7662 <isr+0x1926>
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    6334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6336:	2b00      	cmp	r3, #0
    6338:	d101      	bne.n	633e <isr+0x602>
    633a:	f001 f964 	bl	7606 <isr+0x18ca>
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
    633e:	265e      	movs	r6, #94	; 0x5e
    6340:	36ff      	adds	r6, #255	; 0xff
    6342:	5da3      	ldrb	r3, [r4, r6]
    6344:	06db      	lsls	r3, r3, #27
    6346:	0fda      	lsrs	r2, r3, #31
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    6348:	d003      	beq.n	6352 <isr+0x616>
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
		     (devmatch_ok) || (irkmatch_ok))) {
    634a:	433d      	orrs	r5, r7
    634c:	d101      	bne.n	6352 <isr+0x616>
    634e:	f001 f95a 	bl	7606 <isr+0x18ca>
static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    6352:	23b6      	movs	r3, #182	; 0xb6
    6354:	21d8      	movs	r1, #216	; 0xd8
    6356:	33ff      	adds	r3, #255	; 0xff
    6358:	5ce3      	ldrb	r3, [r4, r3]
    635a:	0049      	lsls	r1, r1, #1
    635c:	5861      	ldr	r1, [r4, r1]
    635e:	009b      	lsls	r3, r3, #2
    6360:	585b      	ldr	r3, [r3, r1]
    6362:	930a      	str	r3, [sp, #40]	; 0x28

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    6364:	23be      	movs	r3, #190	; 0xbe
    6366:	005b      	lsls	r3, r3, #1
    6368:	58e3      	ldr	r3, [r4, r3]
    636a:	2b00      	cmp	r3, #0
    636c:	d100      	bne.n	6370 <isr+0x634>
    636e:	e224      	b.n	67ba <isr+0xa7e>
    6370:	23fb      	movs	r3, #251	; 0xfb
    6372:	005b      	lsls	r3, r3, #1
    6374:	5ce3      	ldrb	r3, [r4, r3]
    6376:	2b00      	cmp	r3, #0
    6378:	d008      	beq.n	638c <isr+0x650>
				      (_radio.fc_req == _radio.fc_ack)) &&
    637a:	23fa      	movs	r3, #250	; 0xfa
    637c:	21f6      	movs	r1, #246	; 0xf6
    637e:	005b      	lsls	r3, r3, #1
    6380:	31ff      	adds	r1, #255	; 0xff
    6382:	5ce3      	ldrb	r3, [r4, r3]

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    6384:	5c61      	ldrb	r1, [r4, r1]
    6386:	4299      	cmp	r1, r3
    6388:	d000      	beq.n	638c <isr+0x650>
    638a:	e216      	b.n	67ba <isr+0xa7e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    638c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    638e:	7a1b      	ldrb	r3, [r3, #8]
    6390:	0719      	lsls	r1, r3, #28
    6392:	d007      	beq.n	63a4 <isr+0x668>
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
    6394:	220f      	movs	r2, #15
    6396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6398:	7a1b      	ldrb	r3, [r3, #8]
    639a:	401a      	ands	r2, r3
    639c:	2a01      	cmp	r2, #1
    639e:	d000      	beq.n	63a2 <isr+0x666>
    63a0:	e20b      	b.n	67ba <isr+0xa7e>
    63a2:	e028      	b.n	63f6 <isr+0x6ba>
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
    63a4:	2a00      	cmp	r2, #0
    63a6:	d014      	beq.n	63d2 <isr+0x696>
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
	    ((radio_tmr_end_get() + 502) <
    63a8:	f7fc fb76 	bl	2a98 <radio_tmr_end_get>
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    63ac:	0023      	movs	r3, r4
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    63ae:	30f7      	adds	r0, #247	; 0xf7
    63b0:	30ff      	adds	r0, #255	; 0xff
	    ((radio_tmr_end_get() + 502) <
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    63b2:	33fc      	adds	r3, #252	; 0xfc
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    63b4:	0005      	movs	r5, r0
    63b6:	4a23      	ldr	r2, [pc, #140]	; (6444 <isr+0x708>)
    63b8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
    63ba:	2100      	movs	r1, #0
    63bc:	2307      	movs	r3, #7
    63be:	f7fa f885 	bl	4cc <__aeabi_lmul>
    63c2:	4a1f      	ldr	r2, [pc, #124]	; (6440 <isr+0x704>)
    63c4:	2300      	movs	r3, #0
    63c6:	f7fa f861 	bl	48c <__aeabi_uldivmod>
    63ca:	4285      	cmp	r5, r0
    63cc:	d300      	bcc.n	63d0 <isr+0x694>
    63ce:	e1f4      	b.n	67ba <isr+0xa7e>
    63d0:	e053      	b.n	647a <isr+0x73e>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    63d2:	5da2      	ldrb	r2, [r4, r6]
    63d4:	065b      	lsls	r3, r3, #25
    63d6:	0652      	lsls	r2, r2, #25

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
    63d8:	0fd2      	lsrs	r2, r2, #31
    63da:	0fdb      	lsrs	r3, r3, #31
    63dc:	429a      	cmp	r2, r3
    63de:	d1d9      	bne.n	6394 <isr+0x658>
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
    63e0:	0020      	movs	r0, r4
    63e2:	990a      	ldr	r1, [sp, #40]	; 0x28
    63e4:	305f      	adds	r0, #95	; 0x5f
    63e6:	30ff      	adds	r0, #255	; 0xff
    63e8:	2206      	movs	r2, #6
    63ea:	310a      	adds	r1, #10
    63ec:	f7fa fd8f 	bl	f0e <memcmp>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    63f0:	2800      	cmp	r0, #0
    63f2:	d0d9      	beq.n	63a8 <isr+0x66c>
    63f4:	e7ce      	b.n	6394 <isr+0x658>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    63f6:	5da2      	ldrb	r2, [r4, r6]
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    63f8:	09db      	lsrs	r3, r3, #7
    63fa:	09d2      	lsrs	r2, r2, #7
    63fc:	429a      	cmp	r2, r3
    63fe:	d003      	beq.n	6408 <isr+0x6cc>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6400:	5da3      	ldrb	r3, [r4, r6]
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
    6402:	069b      	lsls	r3, r3, #26
    6404:	d42c      	bmi.n	6460 <isr+0x724>
    6406:	e1d8      	b.n	67ba <isr+0xa7e>
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
    6408:	0020      	movs	r0, r4
    640a:	990a      	ldr	r1, [sp, #40]	; 0x28
    640c:	3065      	adds	r0, #101	; 0x65
    640e:	30ff      	adds	r0, #255	; 0xff
    6410:	2206      	movs	r2, #6
    6412:	3110      	adds	r1, #16
    6414:	f7fa fd7b 	bl	f0e <memcmp>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    6418:	2800      	cmp	r0, #0
    641a:	d0c5      	beq.n	63a8 <isr+0x66c>
    641c:	e7f0      	b.n	6400 <isr+0x6c4>
    641e:	46c0      	nop			; (mov r8, r8)
    6420:	000004e2 	.word	0x000004e2
    6424:	00002710 	.word	0x00002710
    6428:	02625a00 	.word	0x02625a00
    642c:	200005f4 	.word	0x200005f4
    6430:	00009e4c 	.word	0x00009e4c
    6434:	000f4240 	.word	0x000f4240
    6438:	000f423f 	.word	0x000f423f
    643c:	00000452 	.word	0x00000452
    6440:	3b9aca00 	.word	0x3b9aca00
    6444:	1afd498d 	.word	0x1afd498d
    6448:	000003ae 	.word	0x000003ae
    644c:	00004c9d 	.word	0x00004c9d
    6450:	000003af 	.word	0x000003af
    6454:	000003c6 	.word	0x000003c6
    6458:	00004cbd 	.word	0x00004cbd
    645c:	00005b15 	.word	0x00005b15
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6462:	7a1b      	ldrb	r3, [r3, #8]
    6464:	09db      	lsrs	r3, r3, #7
    6466:	d100      	bne.n	646a <isr+0x72e>
    6468:	e1a7      	b.n	67ba <isr+0xa7e>
		(pdu_adv_rx->rx_addr != 0) &&
    646a:	223f      	movs	r2, #63	; 0x3f
    646c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    646e:	7d5b      	ldrb	r3, [r3, #21]
    6470:	4393      	bics	r3, r2
    6472:	2b40      	cmp	r3, #64	; 0x40
    6474:	d000      	beq.n	6478 <isr+0x73c>
    6476:	e1a0      	b.n	67ba <isr+0xa7e>
    6478:	e796      	b.n	63a8 <isr+0x66c>
		u32_t conn_offset_us;
		u32_t ticker_status;
		u32_t conn_space_us;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    647a:	2004      	movs	r0, #4
    647c:	f7fd fb1c 	bl	3ab8 <packet_rx_reserve_get>
    6480:	900c      	str	r0, [sp, #48]	; 0x30
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    6482:	2800      	cmp	r0, #0
    6484:	d101      	bne.n	648a <isr+0x74e>
    6486:	f001 f8be 	bl	7606 <isr+0x18ca>
			return 1;
		}

		_radio.state = STATE_STOP;
    648a:	2304      	movs	r3, #4
    648c:	7423      	strb	r3, [r4, #16]

		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
    648e:	23be      	movs	r3, #190	; 0xbe
		_radio.scanner.conn = NULL;
    6490:	2200      	movs	r2, #0
		}

		_radio.state = STATE_STOP;

		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
    6492:	005b      	lsls	r3, r3, #1
    6494:	58e7      	ldr	r7, [r4, r3]
		_radio.scanner.conn = NULL;
    6496:	50e2      	str	r2, [r4, r3]

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    6498:	f7fc f97c 	bl	2794 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    649c:	220f      	movs	r2, #15
			pdu_adv_tx->chan_sel = 1;
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    649e:	2140      	movs	r1, #64	; 0x40
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    64a0:	7803      	ldrb	r3, [r0, #0]
		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    64a2:	0005      	movs	r5, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    64a4:	4393      	bics	r3, r2

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			pdu_adv_tx->chan_sel = 1;
    64a6:	3216      	adds	r2, #22
    64a8:	4313      	orrs	r3, r2
    64aa:	7003      	strb	r3, [r0, #0]
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    64ac:	5da3      	ldrb	r3, [r4, r6]
    64ae:	09db      	lsrs	r3, r3, #7
    64b0:	019a      	lsls	r2, r3, #6
    64b2:	7803      	ldrb	r3, [r0, #0]
    64b4:	438b      	bics	r3, r1
    64b6:	4313      	orrs	r3, r2
    64b8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    64ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    64bc:	7801      	ldrb	r1, [r0, #0]
    64be:	7a1b      	ldrb	r3, [r3, #8]
    64c0:	065b      	lsls	r3, r3, #25
    64c2:	0fdb      	lsrs	r3, r3, #31
    64c4:	01da      	lsls	r2, r3, #7
    64c6:	237f      	movs	r3, #127	; 0x7f
    64c8:	400b      	ands	r3, r1
    64ca:	4313      	orrs	r3, r2
    64cc:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    64ce:	0021      	movs	r1, r4
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    64d0:	2322      	movs	r3, #34	; 0x22
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    64d2:	3165      	adds	r1, #101	; 0x65
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    64d4:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    64d6:	1c83      	adds	r3, r0, #2
    64d8:	31ff      	adds	r1, #255	; 0xff
    64da:	2206      	movs	r2, #6
    64dc:	0018      	movs	r0, r3
    64de:	9315      	str	r3, [sp, #84]	; 0x54
    64e0:	f7fa fd2a 	bl	f38 <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
    64e4:	002b      	movs	r3, r5
    64e6:	990a      	ldr	r1, [sp, #40]	; 0x28
    64e8:	3308      	adds	r3, #8
    64ea:	0018      	movs	r0, r3
    64ec:	2206      	movs	r2, #6
    64ee:	310a      	adds	r1, #10
    64f0:	9313      	str	r3, [sp, #76]	; 0x4c
    64f2:	f7fa fd21 	bl	f38 <memcpy>
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
    64f6:	0039      	movs	r1, r7
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    64f8:	0028      	movs	r0, r5
		       access_addr[0], &conn->access_addr[0], 4);
    64fa:	3110      	adds	r1, #16
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    64fc:	2204      	movs	r2, #4
    64fe:	300e      	adds	r0, #14
    6500:	f7fa fd1a 	bl	f38 <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
    6504:	0039      	movs	r1, r7
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    6506:	0028      	movs	r0, r5
		       &conn->crc_init[0], 3);
    6508:	3114      	adds	r1, #20
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    650a:	2203      	movs	r2, #3
    650c:	3012      	adds	r0, #18
    650e:	f7fa fd13 	bl	f38 <memcpy>
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;
    6512:	2301      	movs	r3, #1
    6514:	756b      	strb	r3, [r5, #21]

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;
    6516:	3370      	adds	r3, #112	; 0x70
    6518:	33ff      	adds	r3, #255	; 0xff
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;

		conn_interval_us =
    651a:	5ae3      	ldrh	r3, [r4, r3]
    651c:	4ae5      	ldr	r2, [pc, #916]	; (68b4 <isr+0xb78>)
    651e:	435a      	muls	r2, r3
    6520:	9214      	str	r2, [sp, #80]	; 0x50
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    6522:	f7fc fab9 	bl	2a98 <radio_tmr_end_get>
    6526:	23db      	movs	r3, #219	; 0xdb
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6528:	2100      	movs	r1, #0
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    652a:	00db      	lsls	r3, r3, #3
    652c:	18c6      	adds	r6, r0, r3
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    652e:	0008      	movs	r0, r1
    6530:	f7fc f8d0 	bl	26d4 <radio_tx_chain_delay_get>
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    6534:	2100      	movs	r1, #0

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6536:	1a36      	subs	r6, r6, r0
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    6538:	0008      	movs	r0, r1
    653a:	f7fc f8c9 	bl	26d0 <radio_tx_ready_delay_get>
    653e:	1a33      	subs	r3, r6, r0
    6540:	9310      	str	r3, [sp, #64]	; 0x40

		if (_radio.scanner.win_offset_us == 0) {
    6542:	23c0      	movs	r3, #192	; 0xc0
    6544:	005b      	lsls	r3, r3, #1
    6546:	58e4      	ldr	r4, [r4, r3]
    6548:	2c00      	cmp	r4, #0
    654a:	d104      	bne.n	6556 <isr+0x81a>
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
    654c:	75ac      	strb	r4, [r5, #22]
    654e:	75ec      	strb	r4, [r5, #23]
    6550:	e00f      	b.n	6572 <isr+0x836>
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
    6552:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6554:	18e4      	adds	r4, r4, r3
		if (_radio.scanner.win_offset_us == 0) {
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    6556:	2c00      	cmp	r4, #0
    6558:	dbfb      	blt.n	6552 <isr+0x816>
    655a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    655c:	42a3      	cmp	r3, r4
    655e:	d8f8      	bhi.n	6552 <isr+0x816>
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
    6560:	1ae0      	subs	r0, r4, r3
    6562:	49d4      	ldr	r1, [pc, #848]	; (68b4 <isr+0xb78>)
    6564:	f7f9 fe1c 	bl	1a0 <__aeabi_uidiv>
    6568:	b280      	uxth	r0, r0
    656a:	75a8      	strb	r0, [r5, #22]
    656c:	0a00      	lsrs	r0, r0, #8
    656e:	75e8      	strb	r0, [r5, #23]
    6570:	9410      	str	r4, [sp, #64]	; 0x40
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    6572:	23b8      	movs	r3, #184	; 0xb8
			_radio.scanner.conn_interval;
    6574:	4cd0      	ldr	r4, [pc, #832]	; (68b8 <isr+0xb7c>)
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    6576:	005b      	lsls	r3, r3, #1
    6578:	5ce3      	ldrb	r3, [r4, r3]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    657a:	0039      	movs	r1, r7
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    657c:	762b      	strb	r3, [r5, #24]
    657e:	4bcf      	ldr	r3, [pc, #828]	; (68bc <isr+0xb80>)
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    6580:	0028      	movs	r0, r5
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    6582:	785b      	ldrb	r3, [r3, #1]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    6584:	2205      	movs	r2, #5
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    6586:	766b      	strb	r3, [r5, #25]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    6588:	23b9      	movs	r3, #185	; 0xb9
    658a:	005b      	lsls	r3, r3, #1
    658c:	5ce3      	ldrb	r3, [r4, r3]
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    658e:	3117      	adds	r1, #23
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    6590:	76ab      	strb	r3, [r5, #26]
    6592:	4bcb      	ldr	r3, [pc, #812]	; (68c0 <isr+0xb84>)
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    6594:	301e      	adds	r0, #30
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    6596:	785b      	ldrb	r3, [r3, #1]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
		       &conn->data_chan_map[0],
		       sizeof(pdu_adv_tx->payload.connect_ind.lldata.chan_map));
		pdu_adv_tx->payload.connect_ind.lldata.hop =
    6598:	1d2e      	adds	r6, r5, #4
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    659a:	76eb      	strb	r3, [r5, #27]
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
    659c:	23ba      	movs	r3, #186	; 0xba
    659e:	005b      	lsls	r3, r3, #1
    65a0:	5ce3      	ldrb	r3, [r4, r3]
    65a2:	772b      	strb	r3, [r5, #28]
    65a4:	4bc7      	ldr	r3, [pc, #796]	; (68c4 <isr+0xb88>)
    65a6:	785b      	ldrb	r3, [r3, #1]
    65a8:	776b      	strb	r3, [r5, #29]
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    65aa:	f7fa fcc5 	bl	f38 <memcpy>
		       &conn->data_chan_map[0],
		       sizeof(pdu_adv_tx->payload.connect_ind.lldata.chan_map));
		pdu_adv_tx->payload.connect_ind.lldata.hop =
    65ae:	231f      	movs	r3, #31
    65b0:	7fba      	ldrb	r2, [r7, #30]
    65b2:	401a      	ands	r2, r3
    65b4:	0011      	movs	r1, r2
    65b6:	7ff2      	ldrb	r2, [r6, #31]
    65b8:	439a      	bics	r2, r3
    65ba:	430a      	orrs	r2, r1
    65bc:	77f2      	strb	r2, [r6, #31]
			conn->data_chan_hop;
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
    65be:	22ce      	movs	r2, #206	; 0xce
    65c0:	0052      	lsls	r2, r2, #1
    65c2:	7ff1      	ldrb	r1, [r6, #31]
    65c4:	5ca2      	ldrb	r2, [r4, r2]
    65c6:	400b      	ands	r3, r1
    65c8:	0152      	lsls	r2, r2, #5
    65ca:	4313      	orrs	r3, r2
    65cc:	77f3      	strb	r3, [r6, #31]

		radio_switch_complete_and_disable();
    65ce:	f7fc f8f5 	bl	27bc <radio_switch_complete_and_disable>

		radio_pkt_tx_set(pdu_adv_tx);
    65d2:	0028      	movs	r0, r5
    65d4:	f7fc f874 	bl	26c0 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    65d8:	f7fc f8a2 	bl	2720 <radio_is_ready>
    65dc:	9012      	str	r0, [sp, #72]	; 0x48
    65de:	2800      	cmp	r0, #0
    65e0:	d001      	beq.n	65e6 <isr+0x8aa>
    65e2:	f001 f80d 	bl	7600 <isr+0x18c4>

		radio_tmr_end_capture();
    65e6:	f7fc fa41 	bl	2a6c <radio_tmr_end_capture>
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    65ea:	23c2      	movs	r3, #194	; 0xc2
    65ec:	005b      	lsls	r3, r3, #1
    65ee:	58e1      	ldr	r1, [r4, r3]
    65f0:	22fc      	movs	r2, #252	; 0xfc
    65f2:	0038      	movs	r0, r7
    65f4:	f7fb feec 	bl	23d0 <mem_index_get>
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    65f8:	2206      	movs	r2, #6
		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    65fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    65fc:	8438      	strh	r0, [r7, #32]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    65fe:	2148      	movs	r1, #72	; 0x48
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6600:	711a      	strb	r2, [r3, #4]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    6602:	466a      	mov	r2, sp
		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    6604:	80d8      	strh	r0, [r3, #6]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    6606:	1852      	adds	r2, r2, r1
    6608:	330b      	adds	r3, #11
    660a:	930f      	str	r3, [sp, #60]	; 0x3c
    660c:	7812      	ldrb	r2, [r2, #0]
    660e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6610:	980c      	ldr	r0, [sp, #48]	; 0x30

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    6612:	72da      	strb	r2, [r3, #11]
		radio_le_conn_cmplt->role = 0x00;
    6614:	466a      	mov	r2, sp
    6616:	1852      	adds	r2, r2, r1
    6618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    661a:	7812      	ldrb	r2, [r2, #0]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    661c:	9913      	ldr	r1, [sp, #76]	; 0x4c
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
    661e:	705a      	strb	r2, [r3, #1]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    6620:	782b      	ldrb	r3, [r5, #0]
    6622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6624:	09db      	lsrs	r3, r3, #7
    6626:	7093      	strb	r3, [r2, #2]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6628:	300e      	adds	r0, #14
    662a:	2206      	movs	r2, #6
    662c:	f7fa fc84 	bl	f38 <memcpy>
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    6630:	782b      	ldrb	r3, [r5, #0]
    6632:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    6634:	980c      	ldr	r0, [sp, #48]	; 0x30
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    6636:	065b      	lsls	r3, r3, #25
    6638:	0fdb      	lsrs	r3, r3, #31
    663a:	7253      	strb	r3, [r2, #9]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    663c:	9915      	ldr	r1, [sp, #84]	; 0x54
    663e:	2206      	movs	r2, #6
    6640:	3015      	adds	r0, #21
    6642:	f7fa fc79 	bl	f38 <memcpy>
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    6646:	2144      	movs	r1, #68	; 0x44
    6648:	466a      	mov	r2, sp
    664a:	1852      	adds	r2, r2, r1
    664c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    664e:	7812      	ldrb	r2, [r2, #0]
    6650:	741a      	strb	r2, [r3, #16]
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    6652:	23b8      	movs	r3, #184	; 0xb8
    6654:	005b      	lsls	r3, r3, #1
    6656:	5ce3      	ldrb	r3, [r4, r3]
    6658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    665a:	7713      	strb	r3, [r2, #28]
    665c:	4b97      	ldr	r3, [pc, #604]	; (68bc <isr+0xb80>)
    665e:	785b      	ldrb	r3, [r3, #1]
    6660:	7753      	strb	r3, [r2, #29]
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
    6662:	23b9      	movs	r3, #185	; 0xb9
    6664:	005b      	lsls	r3, r3, #1
    6666:	5ce3      	ldrb	r3, [r4, r3]
    6668:	7793      	strb	r3, [r2, #30]
    666a:	4b95      	ldr	r3, [pc, #596]	; (68c0 <isr+0xb84>)
    666c:	785b      	ldrb	r3, [r3, #1]
    666e:	77d3      	strb	r3, [r2, #31]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    6670:	0013      	movs	r3, r2
    6672:	22ba      	movs	r2, #186	; 0xba
    6674:	0052      	lsls	r2, r2, #1
    6676:	5ca2      	ldrb	r2, [r4, r2]
    6678:	3320      	adds	r3, #32
    667a:	701a      	strb	r2, [r3, #0]
    667c:	4a91      	ldr	r2, [pc, #580]	; (68c4 <isr+0xb88>)
    667e:	7852      	ldrb	r2, [r2, #1]
    6680:	705a      	strb	r2, [r3, #1]
		radio_le_conn_cmplt->mca =
			pdu_adv_tx->payload.connect_ind.lldata.sca;
    6682:	7ff3      	ldrb	r3, [r6, #31]
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
		radio_le_conn_cmplt->mca =
    6684:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
			pdu_adv_tx->payload.connect_ind.lldata.sca;
    6686:	095b      	lsrs	r3, r3, #5
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
		radio_le_conn_cmplt->mca =
    6688:	75d3      	strb	r3, [r2, #23]
			pdu_adv_tx->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    668a:	8c38      	ldrh	r0, [r7, #32]
    668c:	f7fd fee2 	bl	4454 <rx_fc_lock>
		packet_rx_enqueue();
    6690:	f7fd ffaa 	bl	45e8 <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    6694:	2003      	movs	r0, #3
    6696:	f7fd fa0f 	bl	3ab8 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    669a:	2800      	cmp	r0, #0
    669c:	d101      	bne.n	66a2 <isr+0x966>
    669e:	f000 ffaf 	bl	7600 <isr+0x18c4>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    66a2:	8c3b      	ldrh	r3, [r7, #32]
    66a4:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    66a6:	230a      	movs	r3, #10
    66a8:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
    66aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    66ac:	7a1a      	ldrb	r2, [r3, #8]
    66ae:	2320      	movs	r3, #32
    66b0:	4013      	ands	r3, r2
    66b2:	d00e      	beq.n	66d2 <isr+0x996>
				u16_t aa_ls =
    66b4:	7c7b      	ldrb	r3, [r7, #17]
    66b6:	7c39      	ldrb	r1, [r7, #16]
    66b8:	021b      	lsls	r3, r3, #8
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    66ba:	7cfa      	ldrb	r2, [r7, #19]
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
				u16_t aa_ls =
    66bc:	4319      	orrs	r1, r3
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    66be:	7cbb      	ldrb	r3, [r7, #18]
    66c0:	0212      	lsls	r2, r2, #8
    66c2:	4313      	orrs	r3, r2
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    66c4:	2440      	movs	r4, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    66c6:	404b      	eors	r3, r1
    66c8:	83fb      	strh	r3, [r7, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    66ca:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    66cc:	7f3a      	ldrb	r2, [r7, #28]
    66ce:	4322      	orrs	r2, r4
    66d0:	773a      	strb	r2, [r7, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    66d2:	72c3      	strb	r3, [r0, #11]
			}

			packet_rx_enqueue();
    66d4:	f7fd ff88 	bl	45e8 <packet_rx_enqueue>
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    66d8:	4b77      	ldr	r3, [pc, #476]	; (68b8 <isr+0xb7c>)
    66da:	001a      	movs	r2, r3
    66dc:	32fc      	adds	r2, #252	; 0xfc
    66de:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
    66e0:	60fa      	str	r2, [r7, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    66e2:	22fc      	movs	r2, #252	; 0xfc
    66e4:	0052      	lsls	r2, r2, #1
    66e6:	589c      	ldr	r4, [r3, r2]
		conn->hdr.ticks_xtal_to_start =
    66e8:	2327      	movs	r3, #39	; 0x27
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    66ea:	2200      	movs	r2, #0
			packet_rx_enqueue();
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    66ec:	607c      	str	r4, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    66ee:	603b      	str	r3, [r7, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    66f0:	60ba      	str	r2, [r7, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    66f2:	429c      	cmp	r4, r3
    66f4:	d200      	bcs.n	66f8 <isr+0x9bc>
    66f6:	001c      	movs	r4, r3
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;

		/* Stop Scanner */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    66f8:	2100      	movs	r1, #0
    66fa:	4b73      	ldr	r3, [pc, #460]	; (68c8 <isr+0xb8c>)
    66fc:	2206      	movs	r2, #6
    66fe:	9300      	str	r3, [sp, #0]
    6700:	0008      	movs	r0, r1
    6702:	4b72      	ldr	r3, [pc, #456]	; (68cc <isr+0xb90>)
    6704:	f7fd f8e6 	bl	38d4 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    6708:	219b      	movs	r1, #155	; 0x9b

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    670a:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    670c:	00c9      	lsls	r1, r1, #3
    670e:	f7fe fab5 	bl	4c7c <ticker_stop_scan_assert>

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6712:	002b      	movs	r3, r5
    6714:	2204      	movs	r2, #4
    6716:	0029      	movs	r1, r5
    6718:	9500      	str	r5, [sp, #0]
    671a:	0028      	movs	r0, r5
    671c:	f7fd f8da 	bl	38d4 <ticker_stop>
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    6720:	4a6b      	ldr	r2, [pc, #428]	; (68d0 <isr+0xb94>)
    6722:	2300      	movs	r3, #0
    6724:	9814      	ldr	r0, [sp, #80]	; 0x50
    6726:	0029      	movs	r1, r5
    6728:	f7f9 fed0 	bl	4cc <__aeabi_lmul>
    672c:	4a69      	ldr	r2, [pc, #420]	; (68d4 <isr+0xb98>)
    672e:	2307      	movs	r3, #7
    6730:	900a      	str	r0, [sp, #40]	; 0x28
    6732:	910b      	str	r1, [sp, #44]	; 0x2c
    6734:	f7f9 feaa 	bl	48c <__aeabi_uldivmod>
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
    6738:	4b5f      	ldr	r3, [pc, #380]	; (68b8 <isr+0xb7c>)
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    673a:	900c      	str	r0, [sp, #48]	; 0x30
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    RADIO_TICKER_ID_SCAN_STOP, NULL, NULL);

		/* Start master */
		ticker_status =
    673c:	685b      	ldr	r3, [r3, #4]
    673e:	4a65      	ldr	r2, [pc, #404]	; (68d4 <isr+0xb98>)
    6740:	1b1b      	subs	r3, r3, r4
    6742:	930f      	str	r3, [sp, #60]	; 0x3c
    6744:	4b64      	ldr	r3, [pc, #400]	; (68d8 <isr+0xb9c>)
    6746:	8c3e      	ldrh	r6, [r7, #32]
    6748:	9308      	str	r3, [sp, #32]
    674a:	4b64      	ldr	r3, [pc, #400]	; (68dc <isr+0xba0>)
    674c:	9706      	str	r7, [sp, #24]
    674e:	9307      	str	r3, [sp, #28]
    6750:	4b63      	ldr	r3, [pc, #396]	; (68e0 <isr+0xba4>)
    6752:	3607      	adds	r6, #7
    6754:	9305      	str	r3, [sp, #20]
    6756:	68fb      	ldr	r3, [r7, #12]
    6758:	9503      	str	r5, [sp, #12]
    675a:	191c      	adds	r4, r3, r4
    675c:	b2a4      	uxth	r4, r4
    675e:	2307      	movs	r3, #7
    6760:	9404      	str	r4, [sp, #16]
    6762:	f7f9 feb3 	bl	4cc <__aeabi_lmul>
    6766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6768:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    676a:	22fa      	movs	r2, #250	; 0xfa
    676c:	1a1b      	subs	r3, r3, r0
    676e:	418c      	sbcs	r4, r1
    6770:	0092      	lsls	r2, r2, #2
    6772:	0018      	movs	r0, r3
    6774:	0021      	movs	r1, r4
    6776:	2300      	movs	r3, #0
    6778:	f7f9 fe88 	bl	48c <__aeabi_uldivmod>
    677c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    677e:	9002      	str	r0, [sp, #8]
    6780:	9301      	str	r3, [sp, #4]
    6782:	4a53      	ldr	r2, [pc, #332]	; (68d0 <isr+0xb94>)
    6784:	2300      	movs	r3, #0
    6786:	9810      	ldr	r0, [sp, #64]	; 0x40
    6788:	0029      	movs	r1, r5
    678a:	f7f9 fe9f 	bl	4cc <__aeabi_lmul>
    678e:	4a51      	ldr	r2, [pc, #324]	; (68d4 <isr+0xb98>)
    6790:	2307      	movs	r3, #7
    6792:	f7f9 fe7b 	bl	48c <__aeabi_uldivmod>
    6796:	0200      	lsls	r0, r0, #8
    6798:	0a00      	lsrs	r0, r0, #8
    679a:	b2f6      	uxtb	r6, r6
    679c:	9000      	str	r0, [sp, #0]
    679e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    67a0:	0032      	movs	r2, r6
    67a2:	0029      	movs	r1, r5
    67a4:	0028      	movs	r0, r5
    67a6:	f7fc fffd 	bl	37a4 <ticker_start>
				     TICKER_REMAINDER(conn_interval_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     event_master_prepare, conn,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    67aa:	2302      	movs	r3, #2
    67ac:	4398      	bics	r0, r3
    67ae:	42a8      	cmp	r0, r5
    67b0:	d001      	beq.n	67b6 <isr+0xa7a>
    67b2:	f000 ff25 	bl	7600 <isr+0x18c4>
    67b6:	f000 ff54 	bl	7662 <isr+0x1926>

		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    67ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    67bc:	4c3e      	ldr	r4, [pc, #248]	; (68b8 <isr+0xb7c>)
    67be:	7a19      	ldrb	r1, [r3, #8]
    67c0:	230f      	movs	r3, #15
    67c2:	400b      	ands	r3, r1
    67c4:	d001      	beq.n	67ca <isr+0xa8e>
    67c6:	2b06      	cmp	r3, #6
    67c8:	d157      	bne.n	687a <isr+0xb3e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    67ca:	5da2      	ldrb	r2, [r4, r6]
    67cc:	0712      	lsls	r2, r2, #28
    67ce:	d54c      	bpl.n	686a <isr+0xb2e>
		 (_radio.scanner.type != 0) &&
		 (_radio.scanner.conn == 0)) {
    67d0:	22be      	movs	r2, #190	; 0xbe
    67d2:	0052      	lsls	r2, r2, #1
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
		 (_radio.scanner.type != 0) &&
    67d4:	58a2      	ldr	r2, [r4, r2]
    67d6:	2a00      	cmp	r2, #0
    67d8:	d147      	bne.n	686a <isr+0xb2e>
		 (_radio.scanner.conn == 0)) {
		struct pdu_adv *pdu_adv_tx;
		u32_t err;

		/* save the adv packet */
		err = isr_rx_scan_report(rssi_ready);
    67da:	980c      	ldr	r0, [sp, #48]	; 0x30
    67dc:	f7fd ff34 	bl	4648 <isr_rx_scan_report>
    67e0:	1e06      	subs	r6, r0, #0
		if (err) {
    67e2:	d001      	beq.n	67e8 <isr+0xaac>
    67e4:	f000 ff0f 	bl	7606 <isr+0x18ca>
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    67e8:	f7fb ffd4 	bl	2794 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    67ec:	220f      	movs	r2, #15
    67ee:	7803      	ldrb	r3, [r0, #0]
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    67f0:	2140      	movs	r1, #64	; 0x40
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    67f2:	4393      	bics	r3, r2
    67f4:	3a0c      	subs	r2, #12
    67f6:	4313      	orrs	r3, r2
    67f8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    67fa:	235e      	movs	r3, #94	; 0x5e
    67fc:	33ff      	adds	r3, #255	; 0xff
    67fe:	5ce3      	ldrb	r3, [r4, r3]
		if (err) {
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    6800:	0005      	movs	r5, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6802:	09db      	lsrs	r3, r3, #7
    6804:	019a      	lsls	r2, r3, #6
    6806:	7803      	ldrb	r3, [r0, #0]
    6808:	438b      	bics	r3, r1
    680a:	4313      	orrs	r3, r2
    680c:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    680e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6810:	7801      	ldrb	r1, [r0, #0]
    6812:	7a1b      	ldrb	r3, [r3, #8]
    6814:	065b      	lsls	r3, r3, #25
    6816:	0fdb      	lsrs	r3, r3, #31
    6818:	01da      	lsls	r2, r3, #7
    681a:	237f      	movs	r3, #127	; 0x7f
    681c:	400b      	ands	r3, r1
    681e:	4313      	orrs	r3, r2
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    6820:	0021      	movs	r1, r4

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    6822:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    6824:	230c      	movs	r3, #12
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    6826:	3165      	adds	r1, #101	; 0x65
		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    6828:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    682a:	31ff      	adds	r1, #255	; 0xff
    682c:	2206      	movs	r2, #6
    682e:	3002      	adds	r0, #2
    6830:	f7fa fb82 	bl	f38 <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    6834:	0028      	movs	r0, r5
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
    6836:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    6838:	2206      	movs	r2, #6
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
    683a:	310a      	adds	r1, #10
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    683c:	3008      	adds	r0, #8
    683e:	f7fa fb7b 	bl	f38 <memcpy>
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    6842:	21ae      	movs	r1, #174	; 0xae
    6844:	2202      	movs	r2, #2
    6846:	0049      	lsls	r1, r1, #1
    6848:	5c63      	ldrb	r3, [r4, r1]
		_radio.state = STATE_TX;

		radio_tmr_tifs_set(RADIO_TIFS);
    684a:	2096      	movs	r0, #150	; 0x96
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    684c:	4313      	orrs	r3, r2
    684e:	5463      	strb	r3, [r4, r1]
		_radio.state = STATE_TX;
    6850:	7422      	strb	r2, [r4, #16]

		radio_tmr_tifs_set(RADIO_TIFS);
    6852:	f7fc f83f 	bl	28d4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    6856:	0030      	movs	r0, r6
    6858:	f7fb ffa0 	bl	279c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    685c:	0028      	movs	r0, r5
    685e:	f7fb ff2f 	bl	26c0 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    6862:	f7fc f903 	bl	2a6c <radio_tmr_end_capture>
    6866:	f000 fefc 	bl	7662 <isr+0x1926>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    686a:	2b00      	cmp	r3, #0
    686c:	d105      	bne.n	687a <isr+0xb3e>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    686e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6870:	7a5b      	ldrb	r3, [r3, #9]
    6872:	2b00      	cmp	r3, #0
    6874:	d155      	bne.n	6922 <isr+0xbe6>
    6876:	f000 fec6 	bl	7606 <isr+0x18ca>
		radio_tmr_end_capture();

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    687a:	2b01      	cmp	r3, #1
    687c:	d006      	beq.n	688c <isr+0xb50>
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    687e:	220b      	movs	r2, #11
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    6880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6882:	7a19      	ldrb	r1, [r3, #8]
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    6884:	400a      	ands	r2, r1
    6886:	2a02      	cmp	r2, #2
    6888:	d137      	bne.n	68fa <isr+0xbbe>
    688a:	e7f0      	b.n	686e <isr+0xb32>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    688c:	5da2      	ldrb	r2, [r4, r6]

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    688e:	09cb      	lsrs	r3, r1, #7
    6890:	09d2      	lsrs	r2, r2, #7
    6892:	429a      	cmp	r2, r3
    6894:	d003      	beq.n	689e <isr+0xb62>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6896:	5da3      	ldrb	r3, [r4, r6]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
    6898:	069b      	lsls	r3, r3, #26
    689a:	d423      	bmi.n	68e4 <isr+0xba8>
    689c:	e7ef      	b.n	687e <isr+0xb42>
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
    689e:	0020      	movs	r0, r4
    68a0:	990a      	ldr	r1, [sp, #40]	; 0x28
    68a2:	3065      	adds	r0, #101	; 0x65
    68a4:	30ff      	adds	r0, #255	; 0xff
    68a6:	2206      	movs	r2, #6
    68a8:	3110      	adds	r1, #16
    68aa:	f7fa fb30 	bl	f0e <memcmp>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    68ae:	2800      	cmp	r0, #0
    68b0:	d0dd      	beq.n	686e <isr+0xb32>
    68b2:	e7f0      	b.n	6896 <isr+0xb5a>
    68b4:	000004e2 	.word	0x000004e2
    68b8:	200005f4 	.word	0x200005f4
    68bc:	20000764 	.word	0x20000764
    68c0:	20000766 	.word	0x20000766
    68c4:	20000768 	.word	0x20000768
    68c8:	000004d7 	.word	0x000004d7
    68cc:	00004c7d 	.word	0x00004c7d
    68d0:	3b9aca00 	.word	0x3b9aca00
    68d4:	1afd498d 	.word	0x1afd498d
    68d8:	000004ef 	.word	0x000004ef
    68dc:	00004cbd 	.word	0x00004cbd
    68e0:	00005b0d 	.word	0x00005b0d
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    68e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    68e6:	7a1b      	ldrb	r3, [r3, #8]
    68e8:	09db      	lsrs	r3, r3, #7
    68ea:	d0c8      	beq.n	687e <isr+0xb42>
		     (pdu_adv_rx->rx_addr != 0) &&
    68ec:	223f      	movs	r2, #63	; 0x3f
    68ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    68f0:	7d5b      	ldrb	r3, [r3, #21]
    68f2:	4393      	bics	r3, r2
    68f4:	2b40      	cmp	r3, #64	; 0x40
    68f6:	d1c2      	bne.n	687e <isr+0xb42>
    68f8:	e7b9      	b.n	686e <isr+0xb32>
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    68fa:	230f      	movs	r3, #15
    68fc:	400b      	ands	r3, r1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    68fe:	2b07      	cmp	r3, #7
    6900:	d104      	bne.n	690c <isr+0xbd0>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    6902:	5da2      	ldrb	r2, [r4, r6]
    6904:	421a      	tst	r2, r3
    6906:	d1b2      	bne.n	686e <isr+0xb32>
    6908:	f000 fe7d 	bl	7606 <isr+0x18ca>
		   (_radio.scanner.phy)) ||
    690c:	2b04      	cmp	r3, #4
    690e:	d001      	beq.n	6914 <isr+0xbd8>
    6910:	f000 fe79 	bl	7606 <isr+0x18ca>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    6914:	3359      	adds	r3, #89	; 0x59
    6916:	33ff      	adds	r3, #255	; 0xff
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    6918:	5ce3      	ldrb	r3, [r4, r3]
    691a:	079b      	lsls	r3, r3, #30
    691c:	d4a7      	bmi.n	686e <isr+0xb32>
    691e:	f000 fe72 	bl	7606 <isr+0x18ca>
		   (_radio.scanner.state != 0))) &&
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    6922:	23be      	movs	r3, #190	; 0xbe
    6924:	005b      	lsls	r3, r3, #1
    6926:	58e3      	ldr	r3, [r4, r3]
    6928:	2b00      	cmp	r3, #0
    692a:	d001      	beq.n	6930 <isr+0xbf4>
    692c:	f000 fe6b 	bl	7606 <isr+0x18ca>
		u32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(rssi_ready);
    6930:	980c      	ldr	r0, [sp, #48]	; 0x30
    6932:	f7fd fe89 	bl	4648 <isr_rx_scan_report>
    6936:	f000 fe66 	bl	7606 <isr+0x18ca>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    693a:	22ca      	movs	r2, #202	; 0xca
    693c:	0052      	lsls	r2, r2, #1
    693e:	5ca3      	ldrb	r3, [r4, r2]

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    6940:	2601      	movs	r6, #1
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    6942:	3301      	adds	r3, #1
    6944:	54a3      	strb	r3, [r4, r2]

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6946:	23b6      	movs	r3, #182	; 0xb6
    6948:	33ff      	adds	r3, #255	; 0xff
    694a:	5ce3      	ldrb	r3, [r4, r3]
    694c:	321c      	adds	r2, #28
    694e:	58a2      	ldr	r2, [r4, r2]
    6950:	009b      	lsls	r3, r3, #2
    6952:	589d      	ldr	r5, [r3, r2]
    6954:	2296      	movs	r2, #150	; 0x96
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

	if (crc_ok) {
    6956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	/* Increment packet counter for this connection event */
	_radio.packet_counter++;

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    6958:	712e      	strb	r6, [r5, #4]
    695a:	32ff      	adds	r2, #255	; 0xff

	if (crc_ok) {
    695c:	2b00      	cmp	r3, #0
    695e:	d101      	bne.n	6964 <isr+0xc28>
    6960:	f000 fc2b 	bl	71ba <isr+0x147e>
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
	u8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    6964:	2300      	movs	r3, #0
    6966:	54a3      	strb	r3, [r4, r2]

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    6968:	3391      	adds	r3, #145	; 0x91
    696a:	33ff      	adds	r3, #255	; 0xff
    696c:	58e1      	ldr	r1, [r4, r3]
    696e:	7a2c      	ldrb	r4, [r5, #8]
    6970:	0008      	movs	r0, r1
    6972:	30a4      	adds	r0, #164	; 0xa4
    6974:	7802      	ldrb	r2, [r0, #0]
    6976:	0764      	lsls	r4, r4, #29
    6978:	07d3      	lsls	r3, r2, #31
    697a:	0fdb      	lsrs	r3, r3, #31
    697c:	b2db      	uxtb	r3, r3
    697e:	0fe4      	lsrs	r4, r4, #31
    6980:	429c      	cmp	r4, r3
    6982:	d100      	bne.n	6986 <isr+0xc4a>
    6984:	e09c      	b.n	6ac0 <isr+0xd84>

		/* Increment serial number */
		_radio.conn_curr->sn++;
    6986:	199b      	adds	r3, r3, r6
    6988:	4033      	ands	r3, r6
    698a:	43b2      	bics	r2, r6
    698c:	431a      	orrs	r2, r3

		if (_radio.conn_curr->empty == 0) {
    698e:	0014      	movs	r4, r2
    6990:	237f      	movs	r3, #127	; 0x7f
	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {

		/* Increment serial number */
		_radio.conn_curr->sn++;
    6992:	7002      	strb	r2, [r0, #0]

		if (_radio.conn_curr->empty == 0) {
    6994:	439c      	bics	r4, r3
    6996:	d000      	beq.n	699a <isr+0xc5e>
    6998:	e080      	b.n	6a9c <isr+0xd60>
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
    699a:	000b      	movs	r3, r1
    699c:	33e8      	adds	r3, #232	; 0xe8
    699e:	681b      	ldr	r3, [r3, #0]
    69a0:	930a      	str	r3, [sp, #40]	; 0x28
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
    69a2:	1d1c      	adds	r4, r3, #4
				 _radio.conn_curr->packet_tx_head_offset);
    69a4:	000b      	movs	r3, r1
    69a6:	33f9      	adds	r3, #249	; 0xf9
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    69a8:	781b      	ldrb	r3, [r3, #0]
    69aa:	18e4      	adds	r4, r4, r3
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
    69ac:	7863      	ldrb	r3, [r4, #1]
    69ae:	9310      	str	r3, [sp, #64]	; 0x40
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;

			if (pdu_data_tx_len != 0) {
    69b0:	2b00      	cmp	r3, #0
    69b2:	d03e      	beq.n	6a32 <isr+0xcf6>
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;
    69b4:	7823      	ldrb	r3, [r4, #0]
    69b6:	079b      	lsls	r3, r3, #30
    69b8:	0f9b      	lsrs	r3, r3, #30
    69ba:	b2d8      	uxtb	r0, r3
    69bc:	4684      	mov	ip, r0

			if (pdu_data_tx_len != 0) {
				/* if encrypted increment tx counter */
				if (_radio.conn_curr->enc_tx) {
    69be:	0692      	lsls	r2, r2, #26
    69c0:	d51c      	bpl.n	69fc <isr+0xcc0>
					_radio.conn_curr->ccm_tx.counter++;
    69c2:	0008      	movs	r0, r1
    69c4:	000a      	movs	r2, r1
    69c6:	30d8      	adds	r0, #216	; 0xd8
    69c8:	8800      	ldrh	r0, [r0, #0]
    69ca:	32d6      	adds	r2, #214	; 0xd6
    69cc:	8816      	ldrh	r6, [r2, #0]
    69ce:	0400      	lsls	r0, r0, #16
    69d0:	4330      	orrs	r0, r6
    69d2:	900c      	str	r0, [sp, #48]	; 0x30
    69d4:	0008      	movs	r0, r1
    69d6:	31dc      	adds	r1, #220	; 0xdc
    69d8:	8809      	ldrh	r1, [r1, #0]
    69da:	30da      	adds	r0, #218	; 0xda
    69dc:	8800      	ldrh	r0, [r0, #0]
    69de:	0409      	lsls	r1, r1, #16
    69e0:	4301      	orrs	r1, r0
    69e2:	910d      	str	r1, [sp, #52]	; 0x34
    69e4:	2001      	movs	r0, #1
    69e6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    69e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    69ea:	2100      	movs	r1, #0
    69ec:	1836      	adds	r6, r6, r0
    69ee:	414f      	adcs	r7, r1
    69f0:	0c30      	lsrs	r0, r6, #16
    69f2:	0c39      	lsrs	r1, r7, #16
    69f4:	8016      	strh	r6, [r2, #0]
    69f6:	8050      	strh	r0, [r2, #2]
    69f8:	8097      	strh	r7, [r2, #4]
    69fa:	80d1      	strh	r1, [r2, #6]
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    69fc:	4662      	mov	r2, ip
    69fe:	2a03      	cmp	r2, #3
    6a00:	d117      	bne.n	6a32 <isr+0xcf6>
static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;

	switch (pdu_data_tx->payload.llctrl.opcode) {
    6a02:	78e2      	ldrb	r2, [r4, #3]
    6a04:	2a02      	cmp	r2, #2
    6a06:	d114      	bne.n	6a32 <isr+0xcf6>
	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		_radio.state = STATE_CLOSE;
    6a08:	4ed6      	ldr	r6, [pc, #856]	; (6d64 <isr+0x1028>)
    6a0a:	7433      	strb	r3, [r6, #16]
		radio_disable();
    6a0c:	f7fb fe74 	bl	26f8 <radio_disable>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    6a10:	f7fb fe86 	bl	2720 <radio_is_ready>
    6a14:	2800      	cmp	r0, #0
    6a16:	d001      	beq.n	6a1c <isr+0xce0>
    6a18:	f000 fdf2 	bl	7600 <isr+0x18c4>

		terminate_ind_rx_enqueue(_radio.conn_curr,
    6a1c:	23c8      	movs	r3, #200	; 0xc8
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
    6a1e:	7921      	ldrb	r1, [r4, #4]
		radio_disable();

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());

		terminate_ind_rx_enqueue(_radio.conn_curr,
    6a20:	005b      	lsls	r3, r3, #1
    6a22:	58f0      	ldr	r0, [r6, r3]
    6a24:	2913      	cmp	r1, #19
    6a26:	d100      	bne.n	6a2a <isr+0xcee>
    6a28:	3103      	adds	r1, #3
    6a2a:	f7fd fdbb 	bl	45a4 <terminate_ind_rx_enqueue>
		      error_code == 0x13) ?  0x16 :
		     pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
		     error_code);

		/* Ack received, hence terminate */
		terminate = 1;
    6a2e:	2601      	movs	r6, #1
    6a30:	e000      	b.n	6a34 <isr+0xcf8>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    6a32:	2600      	movs	r6, #0
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    6a34:	23c8      	movs	r3, #200	; 0xc8
    6a36:	4ccb      	ldr	r4, [pc, #812]	; (6d64 <isr+0x1028>)
    6a38:	005b      	lsls	r3, r3, #1
    6a3a:	58e3      	ldr	r3, [r4, r3]
    6a3c:	9810      	ldr	r0, [sp, #64]	; 0x40
    6a3e:	0019      	movs	r1, r3
    6a40:	31f9      	adds	r1, #249	; 0xf9
    6a42:	780a      	ldrb	r2, [r1, #0]
    6a44:	1887      	adds	r7, r0, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
			    _radio.conn_curr->packet_tx_head_len) {
    6a46:	0018      	movs	r0, r3
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    6a48:	b2fa      	uxtb	r2, r7
    6a4a:	700a      	strb	r2, [r1, #0]
			if (_radio.conn_curr->packet_tx_head_offset ==
			    _radio.conn_curr->packet_tx_head_len) {
    6a4c:	30f8      	adds	r0, #248	; 0xf8
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
			if (_radio.conn_curr->packet_tx_head_offset ==
    6a4e:	7807      	ldrb	r7, [r0, #0]
    6a50:	940c      	str	r4, [sp, #48]	; 0x30
    6a52:	4297      	cmp	r7, r2
    6a54:	d125      	bne.n	6aa2 <isr+0xd66>
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    6a56:	2700      	movs	r7, #0
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    6a58:	3911      	subs	r1, #17
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    6a5a:	7007      	strb	r7, [r0, #0]
	_radio.conn_curr->packet_tx_head_offset = 0;
    6a5c:	744f      	strb	r7, [r1, #17]

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    6a5e:	380c      	subs	r0, #12
    6a60:	680a      	ldr	r2, [r1, #0]
    6a62:	6804      	ldr	r4, [r0, #0]
    6a64:	42a2      	cmp	r2, r4
    6a66:	d111      	bne.n	6a8c <isr+0xd50>
		if (node_tx) {
    6a68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    6a6a:	42bc      	cmp	r4, r7
    6a6c:	d019      	beq.n	6aa2 <isr+0xd66>
			_radio.conn_curr->pkt_tx_ctrl =
			    _radio.conn_curr->pkt_tx_ctrl->next;
			_radio.conn_curr->pkt_tx_head =
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
			    _radio.conn_curr->pkt_tx_data) {
    6a6e:	33f0      	adds	r3, #240	; 0xf0

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
		if (node_tx) {
			_radio.conn_curr->pkt_tx_ctrl =
			    _radio.conn_curr->pkt_tx_ctrl->next;
    6a70:	6812      	ldr	r2, [r2, #0]
			_radio.conn_curr->pkt_tx_head =
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    6a72:	681b      	ldr	r3, [r3, #0]
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
		if (node_tx) {
			_radio.conn_curr->pkt_tx_ctrl =
    6a74:	6002      	str	r2, [r0, #0]
			    _radio.conn_curr->pkt_tx_ctrl->next;
			_radio.conn_curr->pkt_tx_head =
    6a76:	600a      	str	r2, [r1, #0]
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    6a78:	429a      	cmp	r2, r3
    6a7a:	d100      	bne.n	6a7e <isr+0xd42>
			    _radio.conn_curr->pkt_tx_data) {
				_radio.conn_curr->pkt_tx_ctrl = NULL;
    6a7c:	6007      	str	r7, [r0, #0]
			}

			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
    6a7e:	49b9      	ldr	r1, [pc, #740]	; (6d64 <isr+0x1028>)
    6a80:	980a      	ldr	r0, [sp, #40]	; 0x28
    6a82:	31d1      	adds	r1, #209	; 0xd1
    6a84:	31ff      	adds	r1, #255	; 0xff
    6a86:	f7fb fc8a 	bl	239e <mem_release>
    6a8a:	e00a      	b.n	6aa2 <isr+0xd66>
		}
	} else {
		if (_radio.conn_curr->pkt_tx_head ==
		    _radio.conn_curr->pkt_tx_data) {
    6a8c:	33f0      	adds	r3, #240	; 0xf0
			}

			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
		}
	} else {
		if (_radio.conn_curr->pkt_tx_head ==
    6a8e:	681c      	ldr	r4, [r3, #0]
    6a90:	6810      	ldr	r0, [r2, #0]
    6a92:	42a2      	cmp	r2, r4
    6a94:	d100      	bne.n	6a98 <isr+0xd5c>
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
    6a96:	6018      	str	r0, [r3, #0]
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    6a98:	6008      	str	r0, [r1, #0]
    6a9a:	e004      	b.n	6aa6 <isr+0xd6a>
			if (_radio.conn_curr->packet_tx_head_offset ==
			    _radio.conn_curr->packet_tx_head_len) {
				*tx_release = isr_rx_conn_pkt_release(node_tx);
			}
		} else {
			_radio.conn_curr->empty = 0;
    6a9c:	401a      	ands	r2, r3
    6a9e:	7002      	strb	r2, [r0, #0]
    6aa0:	e00e      	b.n	6ac0 <isr+0xd84>

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    6aa2:	2300      	movs	r3, #0
    6aa4:	930a      	str	r3, [sp, #40]	; 0x28
			_radio.conn_curr->empty = 0;
		}
	}

	/* local initiated disconnect procedure completed */
	if (terminate) {
    6aa6:	2e00      	cmp	r6, #0
    6aa8:	d00c      	beq.n	6ac4 <isr+0xd88>
		connection_release(_radio.conn_curr);
    6aaa:	26c8      	movs	r6, #200	; 0xc8
    6aac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6aae:	0076      	lsls	r6, r6, #1
    6ab0:	5998      	ldr	r0, [r3, r6]
    6ab2:	f7fd feeb 	bl	488c <connection_release>
		_radio.conn_curr = NULL;
    6ab6:	2300      	movs	r3, #0
    6ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6aba:	5193      	str	r3, [r2, r6]
    6abc:	f000 fdaf 	bl	761e <isr+0x18e2>
			_radio.conn_curr->pkt_tx_head->next;

		return node_tx;
	}

	return NULL;
    6ac0:	2300      	movs	r3, #0
    6ac2:	930a      	str	r3, [sp, #40]	; 0x28

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    6ac4:	23c8      	movs	r3, #200	; 0xc8
    6ac6:	4ea7      	ldr	r6, [pc, #668]	; (6d64 <isr+0x1028>)
    6ac8:	005b      	lsls	r3, r3, #1
    6aca:	58f3      	ldr	r3, [r6, r3]
    6acc:	7a2a      	ldrb	r2, [r5, #8]
    6ace:	33a4      	adds	r3, #164	; 0xa4
    6ad0:	781b      	ldrb	r3, [r3, #0]
    6ad2:	0712      	lsls	r2, r2, #28
    6ad4:	079b      	lsls	r3, r3, #30
    6ad6:	0fd2      	lsrs	r2, r2, #31
    6ad8:	0fdb      	lsrs	r3, r3, #31
    6ada:	429a      	cmp	r2, r3
    6adc:	d001      	beq.n	6ae2 <isr+0xda6>
    6ade:	f000 fda4 	bl	762a <isr+0x18ee>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    6ae2:	2003      	movs	r0, #3
    6ae4:	f7fc ffe8 	bl	3ab8 <packet_rx_reserve_get>

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    6ae8:	2800      	cmp	r0, #0
    6aea:	d101      	bne.n	6af0 <isr+0xdb4>
    6aec:	f000 fd9d 	bl	762a <isr+0x18ee>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
    6af0:	23fb      	movs	r3, #251	; 0xfb
    6af2:	005b      	lsls	r3, r3, #1
	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    6af4:	5cf3      	ldrb	r3, [r6, r3]
    6af6:	2b00      	cmp	r3, #0
    6af8:	d03d      	beq.n	6b76 <isr+0xe3a>
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    6afa:	23e0      	movs	r3, #224	; 0xe0
    6afc:	005b      	lsls	r3, r3, #1
    6afe:	58f2      	ldr	r2, [r6, r3]
    6b00:	3304      	adds	r3, #4
    6b02:	58f1      	ldr	r1, [r6, r3]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
    6b04:	428a      	cmp	r2, r1
    6b06:	d107      	bne.n	6b18 <isr+0xddc>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    6b08:	21fa      	movs	r1, #250	; 0xfa
    6b0a:	20f6      	movs	r0, #246	; 0xf6
    6b0c:	0049      	lsls	r1, r1, #1
    6b0e:	30ff      	adds	r0, #255	; 0xff
    6b10:	5c71      	ldrb	r1, [r6, r1]
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    6b12:	5c30      	ldrb	r0, [r6, r0]
    6b14:	4288      	cmp	r0, r1
    6b16:	d02e      	beq.n	6b76 <isr+0xe3a>
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    6b18:	58f3      	ldr	r3, [r6, r3]
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    6b1a:	429a      	cmp	r2, r3
    6b1c:	d101      	bne.n	6b22 <isr+0xde6>
    6b1e:	f000 fd84 	bl	762a <isr+0x18ee>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    6b22:	23fa      	movs	r3, #250	; 0xfa
    6b24:	21f6      	movs	r1, #246	; 0xf6
    6b26:	005b      	lsls	r3, r3, #1
    6b28:	31ff      	adds	r1, #255	; 0xff
    6b2a:	5cf2      	ldrb	r2, [r6, r3]
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    6b2c:	5c71      	ldrb	r1, [r6, r1]
    6b2e:	4291      	cmp	r1, r2
    6b30:	d101      	bne.n	6b36 <isr+0xdfa>
    6b32:	f000 fd7a 	bl	762a <isr+0x18ee>
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    6b36:	5cf3      	ldrb	r3, [r6, r3]
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d108      	bne.n	6b4e <isr+0xe12>
		(((_radio.fc_req == 0) &&
    6b3c:	22f9      	movs	r2, #249	; 0xf9
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    6b3e:	3391      	adds	r3, #145	; 0x91
    6b40:	33ff      	adds	r3, #255	; 0xff
    6b42:	58f3      	ldr	r3, [r6, r3]
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    6b44:	0052      	lsls	r2, r2, #1
    6b46:	5ab2      	ldrh	r2, [r6, r2]
    6b48:	8c1b      	ldrh	r3, [r3, #32]
    6b4a:	429a      	cmp	r2, r3
    6b4c:	d013      	beq.n	6b76 <isr+0xe3a>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    6b4e:	23fa      	movs	r3, #250	; 0xfa
    6b50:	005b      	lsls	r3, r3, #1
    6b52:	5cf2      	ldrb	r2, [r6, r3]
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    6b54:	2a00      	cmp	r2, #0
    6b56:	d101      	bne.n	6b5c <isr+0xe20>
    6b58:	f000 fd67 	bl	762a <isr+0x18ee>
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
    6b5c:	22c8      	movs	r2, #200	; 0xc8
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    6b5e:	5cf3      	ldrb	r3, [r6, r3]
		   _radio.conn_curr->handle)))))) {
    6b60:	0052      	lsls	r2, r2, #1
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    6b62:	33f3      	adds	r3, #243	; 0xf3
		   _radio.conn_curr->handle)))))) {
    6b64:	58b1      	ldr	r1, [r6, r2]
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    6b66:	005b      	lsls	r3, r3, #1
    6b68:	18f3      	adds	r3, r6, r3
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    6b6a:	88da      	ldrh	r2, [r3, #6]
    6b6c:	8c0b      	ldrh	r3, [r1, #32]
    6b6e:	429a      	cmp	r2, r3
    6b70:	d001      	beq.n	6b76 <isr+0xe3a>
    6b72:	f000 fd5a 	bl	762a <isr+0x18ee>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;

		if (pdu_data_rx->len != 0) {
    6b76:	7a6b      	ldrb	r3, [r5, #9]
    6b78:	2b00      	cmp	r3, #0
    6b7a:	d100      	bne.n	6b7e <isr+0xe42>
    6b7c:	e2d1      	b.n	7122 <isr+0x13e6>
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    6b7e:	24c8      	movs	r4, #200	; 0xc8
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    6b80:	2200      	movs	r2, #0

		if (pdu_data_rx->len != 0) {
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    6b82:	0064      	lsls	r4, r4, #1
    6b84:	5933      	ldr	r3, [r6, r4]
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    6b86:	920c      	str	r2, [sp, #48]	; 0x30

		if (pdu_data_rx->len != 0) {
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    6b88:	33a4      	adds	r3, #164	; 0xa4
    6b8a:	781b      	ldrb	r3, [r3, #0]
    6b8c:	06db      	lsls	r3, r3, #27
    6b8e:	d507      	bpl.n	6ba0 <isr+0xe64>
				u32_t done;

				done = radio_ccm_is_done();
    6b90:	f7fb fff4 	bl	2b7c <radio_ccm_is_done>
				LL_ASSERT(done);

				ccm_rx_increment = 1;
    6b94:	2301      	movs	r3, #1
    6b96:	930c      	str	r3, [sp, #48]	; 0x30
			 */
			if (_radio.conn_curr->enc_rx) {
				u32_t done;

				done = radio_ccm_is_done();
				LL_ASSERT(done);
    6b98:	2800      	cmp	r0, #0
    6b9a:	d101      	bne.n	6ba0 <isr+0xe64>
    6b9c:	f000 fd30 	bl	7600 <isr+0x18c4>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    6ba0:	5933      	ldr	r3, [r6, r4]
    6ba2:	33a4      	adds	r3, #164	; 0xa4
    6ba4:	781b      	ldrb	r3, [r3, #0]
    6ba6:	06db      	lsls	r3, r3, #27
    6ba8:	d409      	bmi.n	6bbe <isr+0xe82>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    6baa:	23c8      	movs	r3, #200	; 0xc8
    6bac:	005b      	lsls	r3, r3, #1
    6bae:	58f4      	ldr	r4, [r6, r3]
    6bb0:	0023      	movs	r3, r4
    6bb2:	33a4      	adds	r3, #164	; 0xa4
				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
    6bb4:	781a      	ldrb	r2, [r3, #0]
    6bb6:	7a2b      	ldrb	r3, [r5, #8]
    6bb8:	0752      	lsls	r2, r2, #29
    6bba:	d41a      	bmi.n	6bf2 <isr+0xeb6>
    6bbc:	e01c      	b.n	6bf8 <isr+0xebc>
    6bbe:	f7fc f801 	bl	2bc4 <radio_ccm_mic_is_valid>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    6bc2:	2800      	cmp	r0, #0
    6bc4:	d1f1      	bne.n	6baa <isr+0xe6e>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
			     (pdu_data_rx->ll_id != PDU_DATA_LLID_CTRL))) {
				_radio.state = STATE_CLOSE;
    6bc6:	2303      	movs	r3, #3
    6bc8:	7433      	strb	r3, [r6, #16]
				radio_disable();
    6bca:	f7fb fd95 	bl	26f8 <radio_disable>

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
    6bce:	f7fb fda7 	bl	2720 <radio_is_ready>
    6bd2:	1e07      	subs	r7, r0, #0
    6bd4:	d001      	beq.n	6bda <isr+0xe9e>
    6bd6:	f000 fd13 	bl	7600 <isr+0x18c4>

				terminate_ind_rx_enqueue(_radio.conn_curr,
    6bda:	24c8      	movs	r4, #200	; 0xc8
    6bdc:	0064      	lsls	r4, r4, #1
    6bde:	213d      	movs	r1, #61	; 0x3d
    6be0:	5930      	ldr	r0, [r6, r4]
    6be2:	f7fd fcdf 	bl	45a4 <terminate_ind_rx_enqueue>
							 0x3d);

				connection_release(_radio.conn_curr);
    6be6:	5930      	ldr	r0, [r6, r4]
    6be8:	f7fd fe50 	bl	488c <connection_release>
				_radio.conn_curr = NULL;
    6bec:	5137      	str	r7, [r6, r4]
    6bee:	f000 fd16 	bl	761e <isr+0x18e2>
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    6bf2:	43da      	mvns	r2, r3
    6bf4:	0792      	lsls	r2, r2, #30
    6bf6:	d1e6      	bne.n	6bc6 <isr+0xe8a>
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
			_radio.conn_curr->apto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			switch (pdu_data_rx->ll_id) {
    6bf8:	079b      	lsls	r3, r3, #30
    6bfa:	0f9b      	lsrs	r3, r3, #30
    6bfc:	d101      	bne.n	6c02 <isr+0xec6>
    6bfe:	f000 fcff 	bl	7600 <isr+0x18c4>
    6c02:	2b02      	cmp	r3, #2
    6c04:	d800      	bhi.n	6c08 <isr+0xecc>
    6c06:	e28f      	b.n	7128 <isr+0x13ec>
{
	struct pdu_data *pdu_data_rx;
	u8_t nack = 0;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
    6c08:	7aef      	ldrb	r7, [r5, #11]
    6c0a:	2f11      	cmp	r7, #17
    6c0c:	d900      	bls.n	6c10 <isr+0xed4>
    6c0e:	e273      	b.n	70f8 <isr+0x13bc>
    6c10:	0038      	movs	r0, r7
    6c12:	f7f9 fabb 	bl	18c <__gnu_thumb1_case_uhi>
    6c16:	0012      	.short	0x0012
    6c18:	00ad0078 	.word	0x00ad0078
    6c1c:	02710271 	.word	0x02710271
    6c20:	02710271 	.word	0x02710271
    6c24:	00b00261 	.word	0x00b00261
    6c28:	027100e0 	.word	0x027100e0
    6c2c:	00f20271 	.word	0x00f20271
    6c30:	00b00271 	.word	0x00b00271
    6c34:	02900151 	.word	0x02900151
    6c38:	0222      	.short	0x0222
	packet_rx_callback();
}

static u32_t conn_update(struct connection *conn, struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
    6c3a:	7dab      	ldrb	r3, [r5, #22]
    6c3c:	7d6a      	ldrb	r2, [r5, #21]
    6c3e:	021b      	lsls	r3, r3, #8
    6c40:	4313      	orrs	r3, r2
    6c42:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    6c44:	1a9b      	subs	r3, r3, r2
    6c46:	4a48      	ldr	r2, [pc, #288]	; (6d68 <isr+0x102c>)
    6c48:	b29b      	uxth	r3, r3
    6c4a:	4293      	cmp	r3, r2
    6c4c:	dd00      	ble.n	6c50 <isr+0xf14>
    6c4e:	e26f      	b.n	7130 <isr+0x13f4>
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
		return 1;
	}

	LL_ASSERT((conn->llcp_req == conn->llcp_ack) ||
    6c50:	0023      	movs	r3, r4
    6c52:	0022      	movs	r2, r4
    6c54:	3359      	adds	r3, #89	; 0x59
    6c56:	3258      	adds	r2, #88	; 0x58
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	7812      	ldrb	r2, [r2, #0]
    6c5c:	429a      	cmp	r2, r3
    6c5e:	d00f      	beq.n	6c80 <isr+0xf44>
    6c60:	0022      	movs	r2, r4
    6c62:	325a      	adds	r2, #90	; 0x5a
    6c64:	7812      	ldrb	r2, [r2, #0]
    6c66:	2a01      	cmp	r2, #1
    6c68:	d001      	beq.n	6c6e <isr+0xf32>
    6c6a:	f000 fcc9 	bl	7600 <isr+0x18c4>
    6c6e:	0022      	movs	r2, r4
    6c70:	3285      	adds	r2, #133	; 0x85
    6c72:	7811      	ldrb	r1, [r2, #0]
    6c74:	2207      	movs	r2, #7
    6c76:	400a      	ands	r2, r1
    6c78:	2a05      	cmp	r2, #5
    6c7a:	d001      	beq.n	6c80 <isr+0xf44>
    6c7c:	f000 fcc0 	bl	7600 <isr+0x18c4>
		    LLCP_CONN_STATE_RSP_WAIT)));

	/* set mutex, if only not already set. As a master the mutex shall
	 * be set, but a slave we accept it as new 'set' of mutex.
	 */
	if (_radio.conn_upd == 0) {
    6c80:	22fe      	movs	r2, #254	; 0xfe
    6c82:	0052      	lsls	r2, r2, #1
    6c84:	58b1      	ldr	r1, [r6, r2]
    6c86:	2900      	cmp	r1, #0
    6c88:	d107      	bne.n	6c9a <isr+0xf5e>
		LL_ASSERT(conn->role.slave.role != 0);
    6c8a:	0021      	movs	r1, r4
    6c8c:	3134      	adds	r1, #52	; 0x34
    6c8e:	7809      	ldrb	r1, [r1, #0]
    6c90:	07c9      	lsls	r1, r1, #31
    6c92:	d401      	bmi.n	6c98 <isr+0xf5c>
    6c94:	f000 fcb4 	bl	7600 <isr+0x18c4>

		_radio.conn_upd = conn;
    6c98:	50b4      	str	r4, [r6, r2]
	}

	conn->llcp.connection_update.win_size =
    6c9a:	0022      	movs	r2, r4
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
    6c9c:	7b29      	ldrb	r1, [r5, #12]
		LL_ASSERT(conn->role.slave.role != 0);

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
    6c9e:	3284      	adds	r2, #132	; 0x84
    6ca0:	7011      	strb	r1, [r2, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
    6ca2:	7baa      	ldrb	r2, [r5, #14]
    6ca4:	7b69      	ldrb	r1, [r5, #13]
    6ca6:	0212      	lsls	r2, r2, #8
		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
    6ca8:	430a      	orrs	r2, r1
    6caa:	4930      	ldr	r1, [pc, #192]	; (6d6c <isr+0x1030>)
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_ack--;
    6cac:	3b01      	subs	r3, #1
		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
    6cae:	434a      	muls	r2, r1
    6cb0:	67e2      	str	r2, [r4, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
    6cb2:	7c2a      	ldrb	r2, [r5, #16]
    6cb4:	7be9      	ldrb	r1, [r5, #15]
    6cb6:	0212      	lsls	r2, r2, #8
    6cb8:	430a      	orrs	r2, r1
	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
    6cba:	0021      	movs	r1, r4
    6cbc:	315c      	adds	r1, #92	; 0x5c
    6cbe:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
    6cc0:	7caa      	ldrb	r2, [r5, #18]
    6cc2:	7c69      	ldrb	r1, [r5, #17]
    6cc4:	0212      	lsls	r2, r2, #8
    6cc6:	430a      	orrs	r2, r1
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
    6cc8:	0021      	movs	r1, r4
    6cca:	315e      	adds	r1, #94	; 0x5e
    6ccc:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
    6cce:	7d2a      	ldrb	r2, [r5, #20]
    6cd0:	7ce9      	ldrb	r1, [r5, #19]
    6cd2:	0212      	lsls	r2, r2, #8
    6cd4:	430a      	orrs	r2, r1
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
    6cd6:	0021      	movs	r1, r4
    6cd8:	3160      	adds	r1, #96	; 0x60
    6cda:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
    6cdc:	7daa      	ldrb	r2, [r5, #22]
    6cde:	7d69      	ldrb	r1, [r5, #21]
    6ce0:	0212      	lsls	r2, r2, #8
    6ce2:	430a      	orrs	r2, r1
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
    6ce4:	0021      	movs	r1, r4
    6ce6:	3164      	adds	r1, #100	; 0x64
    6ce8:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;
    6cea:	22e0      	movs	r2, #224	; 0xe0
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    6cec:	3121      	adds	r1, #33	; 0x21
    6cee:	7808      	ldrb	r0, [r1, #0]
	conn->llcp.connection_update.is_internal = 0;
    6cf0:	4002      	ands	r2, r0
    6cf2:	700a      	strb	r2, [r1, #0]

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    6cf4:	0022      	movs	r2, r4
    6cf6:	2101      	movs	r1, #1
    6cf8:	325a      	adds	r2, #90	; 0x5a
    6cfa:	7011      	strb	r1, [r2, #0]
	conn->llcp_ack--;
    6cfc:	3a01      	subs	r2, #1
    6cfe:	7013      	strb	r3, [r2, #0]
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
			/* conn param req procedure, if any, is complete */
			_radio.conn_curr->procedure_expire = 0;
    6d00:	2300      	movs	r3, #0
    6d02:	8663      	strh	r3, [r4, #50]	; 0x32
    6d04:	e212      	b.n	712c <isr+0x13f0>
}

static u32_t chan_map_update(struct connection *conn,
			     struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
    6d06:	7cab      	ldrb	r3, [r5, #18]
    6d08:	7c6a      	ldrb	r2, [r5, #17]
    6d0a:	021b      	lsls	r3, r3, #8
    6d0c:	4313      	orrs	r3, r2
    6d0e:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    6d10:	1a9b      	subs	r3, r3, r2
    6d12:	4a15      	ldr	r2, [pc, #84]	; (6d68 <isr+0x102c>)
    6d14:	b29b      	uxth	r3, r3
    6d16:	4293      	cmp	r3, r2
    6d18:	dd00      	ble.n	6d1c <isr+0xfe0>
    6d1a:	e209      	b.n	7130 <isr+0x13f4>
	      conn->event_counter) & 0xffff) > 0x7fff) {
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    6d1c:	0026      	movs	r6, r4
    6d1e:	0023      	movs	r3, r4
    6d20:	3659      	adds	r6, #89	; 0x59
    6d22:	3358      	adds	r3, #88	; 0x58
    6d24:	781a      	ldrb	r2, [r3, #0]
    6d26:	7833      	ldrb	r3, [r6, #0]
    6d28:	429a      	cmp	r2, r3
    6d2a:	d001      	beq.n	6d30 <isr+0xff4>
    6d2c:	f000 fc68 	bl	7600 <isr+0x18c4>

	memcpy(&conn->llcp.chan_map.chm[0],
    6d30:	0020      	movs	r0, r4
    6d32:	0029      	movs	r1, r5
    6d34:	2205      	movs	r2, #5
    6d36:	305d      	adds	r0, #93	; 0x5d
    6d38:	310c      	adds	r1, #12
    6d3a:	f7fa f8fd 	bl	f38 <memcpy>
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
    6d3e:	7cab      	ldrb	r3, [r5, #18]
    6d40:	7c6a      	ldrb	r2, [r5, #17]
    6d42:	021b      	lsls	r3, r3, #8
    6d44:	4313      	orrs	r3, r2
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	memcpy(&conn->llcp.chan_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
    6d46:	0022      	movs	r2, r4
    6d48:	3262      	adds	r2, #98	; 0x62
    6d4a:	8013      	strh	r3, [r2, #0]
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
	conn->llcp.chan_map.initiate = 0;
    6d4c:	0023      	movs	r3, r4
    6d4e:	2200      	movs	r2, #0
    6d50:	335c      	adds	r3, #92	; 0x5c
    6d52:	701a      	strb	r2, [r3, #0]

	conn->llcp_type = LLCP_CHAN_MAP;
    6d54:	2302      	movs	r3, #2
    6d56:	345a      	adds	r4, #90	; 0x5a
    6d58:	7023      	strb	r3, [r4, #0]
	conn->llcp_ack--;
    6d5a:	7833      	ldrb	r3, [r6, #0]
    6d5c:	3b01      	subs	r3, #1
    6d5e:	7033      	strb	r3, [r6, #0]
    6d60:	e15c      	b.n	701c <isr+0x12e0>
    6d62:	46c0      	nop			; (mov r8, r8)
    6d64:	200005f4 	.word	0x200005f4
    6d68:	00007fff 	.word	0x00007fff
    6d6c:	000004e2 	.word	0x000004e2
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
    6d70:	7b2b      	ldrb	r3, [r5, #12]
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
    6d72:	3497      	adds	r4, #151	; 0x97
    6d74:	e1de      	b.n	7134 <isr+0x13f8>
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6d76:	7b2b      	ldrb	r3, [r5, #12]
    6d78:	7b69      	ldrb	r1, [r5, #13]
    6d7a:	4add      	ldr	r2, [pc, #884]	; (70f0 <isr+0x13b4>)
    6d7c:	0209      	lsls	r1, r1, #8
    6d7e:	4313      	orrs	r3, r2
    6d80:	0027      	movs	r7, r4
    6d82:	430b      	orrs	r3, r1
    6d84:	7ba9      	ldrb	r1, [r5, #14]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6d86:	0030      	movs	r0, r6
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6d88:	0409      	lsls	r1, r1, #16
    6d8a:	430b      	orrs	r3, r1
    6d8c:	001a      	movs	r2, r3
    6d8e:	3788      	adds	r7, #136	; 0x88
    6d90:	683b      	ldr	r3, [r7, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6d92:	30d1      	adds	r0, #209	; 0xd1
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6d94:	03db      	lsls	r3, r3, #15
    6d96:	0bdb      	lsrs	r3, r3, #15
    6d98:	4013      	ands	r3, r2
    6d9a:	603b      	str	r3, [r7, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6d9c:	30ff      	adds	r0, #255	; 0xff
    6d9e:	f7fb fae5 	bl	236c <mem_acquire>
    6da2:	1e06      	subs	r6, r0, #0
	LL_ASSERT(node_tx);
    6da4:	d101      	bne.n	6daa <isr+0x106e>
    6da6:	f000 fc2b 	bl	7600 <isr+0x18c4>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6daa:	2203      	movs	r2, #3
    6dac:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    6dae:	2100      	movs	r1, #0
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6db0:	4313      	orrs	r3, r2
    6db2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    6db4:	2309      	movs	r3, #9
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    6db6:	3205      	adds	r2, #5
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    6db8:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    6dba:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    6dbc:	3008      	adds	r0, #8
    6dbe:	f7fa f8e5 	bl	f8c <memset>
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    6dc2:	783b      	ldrb	r3, [r7, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
		(conn->llcp_features >> 16) & 0xFF;

	ctrl_tx_enqueue(conn, node_tx);
    6dc4:	0031      	movs	r1, r6
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    6dc6:	7233      	strb	r3, [r6, #8]
		conn->llcp_features & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    6dc8:	683b      	ldr	r3, [r7, #0]
    6dca:	0a1b      	lsrs	r3, r3, #8
    6dcc:	7273      	strb	r3, [r6, #9]
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    6dce:	683b      	ldr	r3, [r7, #0]
    6dd0:	0c1b      	lsrs	r3, r3, #16
    6dd2:	72b3      	strb	r3, [r6, #10]
    6dd4:	e1a1      	b.n	711a <isr+0x13de>
		struct pdu_data_llctrl_feature_rsp *rsp;

		rsp = &pdu_data_rx->payload.llctrl.ctrldata.feature_rsp;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    6dd6:	7b2b      	ldrb	r3, [r5, #12]
    6dd8:	4ac5      	ldr	r2, [pc, #788]	; (70f0 <isr+0x13b4>)
    6dda:	7b69      	ldrb	r1, [r5, #13]
    6ddc:	4313      	orrs	r3, r2
    6dde:	0209      	lsls	r1, r1, #8
    6de0:	0020      	movs	r0, r4
    6de2:	430b      	orrs	r3, r1
    6de4:	7ba9      	ldrb	r1, [r5, #14]
    6de6:	3088      	adds	r0, #136	; 0x88
    6de8:	0409      	lsls	r1, r1, #16
    6dea:	430b      	orrs	r3, r1
    6dec:	001a      	movs	r2, r3
    6dee:	6803      	ldr	r3, [r0, #0]
    6df0:	03db      	lsls	r3, r3, #15
    6df2:	0bdb      	lsrs	r3, r3, #15
    6df4:	4013      	ands	r3, r2
    6df6:	6003      	str	r3, [r0, #0]
    6df8:	e177      	b.n	70ea <isr+0x13ae>
		_radio.conn_curr->enc_tx = 0;
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
    6dfa:	0023      	movs	r3, r4
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
    6dfc:	7b2a      	ldrb	r2, [r5, #12]
		_radio.conn_curr->enc_tx = 0;
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
    6dfe:	338d      	adds	r3, #141	; 0x8d
    6e00:	701a      	strb	r2, [r3, #0]
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
    6e02:	7bab      	ldrb	r3, [r5, #14]
    6e04:	7b6a      	ldrb	r2, [r5, #13]
    6e06:	021b      	lsls	r3, r3, #8
    6e08:	4313      	orrs	r3, r2

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
    6e0a:	0022      	movs	r2, r4
    6e0c:	328e      	adds	r2, #142	; 0x8e
    6e0e:	8013      	strh	r3, [r2, #0]
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
    6e10:	7c2b      	ldrb	r3, [r5, #16]
    6e12:	7bea      	ldrb	r2, [r5, #15]
    6e14:	021b      	lsls	r3, r3, #8
    6e16:	4313      	orrs	r3, r2
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
    6e18:	0022      	movs	r2, r4
    6e1a:	3290      	adds	r2, #144	; 0x90
    6e1c:	8013      	strh	r3, [r2, #0]
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
    6e1e:	2303      	movs	r3, #3
    6e20:	3a04      	subs	r2, #4
    6e22:	7811      	ldrb	r1, [r2, #0]
    6e24:	2700      	movs	r7, #0
    6e26:	400b      	ands	r3, r1
    6e28:	2b01      	cmp	r3, #1
    6e2a:	d101      	bne.n	6e30 <isr+0x10f4>
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
    6e2c:	8667      	strh	r7, [r4, #50]	; 0x32
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;
    6e2e:	001f      	movs	r7, r3

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    6e30:	2102      	movs	r1, #2
    6e32:	7813      	ldrb	r3, [r2, #0]

		if (_radio.conn_curr->llcp_version.tx == 0) {
    6e34:	2601      	movs	r6, #1

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    6e36:	430b      	orrs	r3, r1

		if (_radio.conn_curr->llcp_version.tx == 0) {
    6e38:	0019      	movs	r1, r3
    6e3a:	4031      	ands	r1, r6

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    6e3c:	7013      	strb	r3, [r2, #0]

		if (_radio.conn_curr->llcp_version.tx == 0) {
    6e3e:	9110      	str	r1, [sp, #64]	; 0x40
    6e40:	d000      	beq.n	6e44 <isr+0x1108>
    6e42:	e179      	b.n	7138 <isr+0x13fc>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6e44:	48ab      	ldr	r0, [pc, #684]	; (70f4 <isr+0x13b8>)
		}

		_radio.conn_curr->llcp_version.rx = 1;

		if (_radio.conn_curr->llcp_version.tx == 0) {
			_radio.conn_curr->llcp_version.tx = 1;
    6e46:	4333      	orrs	r3, r6
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6e48:	30d1      	adds	r0, #209	; 0xd1
		}

		_radio.conn_curr->llcp_version.rx = 1;

		if (_radio.conn_curr->llcp_version.tx == 0) {
			_radio.conn_curr->llcp_version.tx = 1;
    6e4a:	7013      	strb	r3, [r2, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6e4c:	30ff      	adds	r0, #255	; 0xff
    6e4e:	f7fb fa8d 	bl	236c <mem_acquire>
    6e52:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    6e54:	d100      	bne.n	6e58 <isr+0x111c>
    6e56:	e3d3      	b.n	7600 <isr+0x18c4>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6e58:	2203      	movs	r2, #3
    6e5a:	7903      	ldrb	r3, [r0, #4]
    6e5c:	4313      	orrs	r3, r2
    6e5e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    6e60:	2306      	movs	r3, #6
    6e62:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_version_ind);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    6e64:	18db      	adds	r3, r3, r3
    6e66:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    6e68:	3b03      	subs	r3, #3
    6e6a:	7203      	strb	r3, [r0, #8]
		RADIO_BLE_VERSION_NUMBER;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    6e6c:	3b0a      	subs	r3, #10
    6e6e:	7243      	strb	r3, [r0, #9]
    6e70:	7283      	strb	r3, [r0, #10]
		RADIO_BLE_COMPANY_ID;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    6e72:	72c3      	strb	r3, [r0, #11]
    6e74:	7303      	strb	r3, [r0, #12]
		RADIO_BLE_SUB_VERSION_NUMBER;

	ctrl_tx_enqueue(conn, node_tx);
    6e76:	0020      	movs	r0, r4
    6e78:	f7fe f9c6 	bl	5208 <ctrl_tx_enqueue>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    6e7c:	0022      	movs	r2, r4
    6e7e:	2180      	movs	r1, #128	; 0x80
    6e80:	32a4      	adds	r2, #164	; 0xa4
    6e82:	7813      	ldrb	r3, [r2, #0]
    6e84:	4249      	negs	r1, r1
    6e86:	430b      	orrs	r3, r1
    6e88:	7013      	strb	r3, [r2, #0]

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    6e8a:	f7fb fc7f 	bl	278c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6e8e:	2203      	movs	r2, #3
    6e90:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
	if (conn->pkt_tx_head) {
    6e92:	34e8      	adds	r4, #232	; 0xe8
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6e94:	4393      	bics	r3, r2
    6e96:	431e      	orrs	r6, r3
	pdu_data_tx->len = 0;
    6e98:	466b      	mov	r3, sp
    6e9a:	323d      	adds	r2, #61	; 0x3d
    6e9c:	189b      	adds	r3, r3, r2
    6e9e:	781b      	ldrb	r3, [r3, #0]
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6ea0:	7006      	strb	r6, [r0, #0]
	pdu_data_tx->len = 0;
    6ea2:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    6ea4:	6821      	ldr	r1, [r4, #0]
    6ea6:	3a30      	subs	r2, #48	; 0x30
    6ea8:	b2f3      	uxtb	r3, r6
    6eaa:	2900      	cmp	r1, #0
    6eac:	d001      	beq.n	6eb2 <isr+0x1176>
		pdu_data_tx->md = 1;
    6eae:	4313      	orrs	r3, r2
    6eb0:	e000      	b.n	6eb4 <isr+0x1178>
	} else {
		pdu_data_tx->md = 0;
    6eb2:	4393      	bics	r3, r2
    6eb4:	7003      	strb	r3, [r0, #0]
    6eb6:	e13f      	b.n	7138 <isr+0x13fc>
		 */

		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
    6eb8:	0023      	movs	r3, r4
    6eba:	21fe      	movs	r1, #254	; 0xfe
    6ebc:	3359      	adds	r3, #89	; 0x59
    6ebe:	781f      	ldrb	r7, [r3, #0]
    6ec0:	3b01      	subs	r3, #1
    6ec2:	781b      	ldrb	r3, [r3, #0]
    6ec4:	0049      	lsls	r1, r1, #1
    6ec6:	42bb      	cmp	r3, r7
    6ec8:	d104      	bne.n	6ed4 <isr+0x1198>
    6eca:	5873      	ldr	r3, [r6, r1]
    6ecc:	2b00      	cmp	r3, #0
    6ece:	d000      	beq.n	6ed2 <isr+0x1196>
    6ed0:	e0af      	b.n	7032 <isr+0x12f6>
    6ed2:	e01c      	b.n	6f0e <isr+0x11d2>
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
    6ed4:	0023      	movs	r3, r4
    6ed6:	3334      	adds	r3, #52	; 0x34
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    6ed8:	781a      	ldrb	r2, [r3, #0]
    6eda:	2301      	movs	r3, #1
    6edc:	4013      	ands	r3, r2
    6ede:	0022      	movs	r2, r4
    6ee0:	325a      	adds	r2, #90	; 0x5a
    6ee2:	2b00      	cmp	r3, #0
    6ee4:	d100      	bne.n	6ee8 <isr+0x11ac>
    6ee6:	e09b      	b.n	7020 <isr+0x12e4>
		     (_radio.conn_curr->role.slave.role != 0) &&
    6ee8:	5873      	ldr	r3, [r6, r1]
    6eea:	429c      	cmp	r4, r3
    6eec:	d000      	beq.n	6ef0 <isr+0x11b4>
    6eee:	e387      	b.n	7600 <isr+0x18c4>
		     (_radio.conn_curr == _radio.conn_upd) &&
    6ef0:	7813      	ldrb	r3, [r2, #0]
    6ef2:	2b01      	cmp	r3, #1
    6ef4:	d000      	beq.n	6ef8 <isr+0x11bc>
    6ef6:	e383      	b.n	7600 <isr+0x18c4>
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
		     ((_radio.conn_curr->llcp.connection_update.state ==
    6ef8:	0023      	movs	r3, r4
    6efa:	3385      	adds	r3, #133	; 0x85
		       LLCP_CONN_STATE_INITIATE) ||
    6efc:	781a      	ldrb	r2, [r3, #0]
    6efe:	2307      	movs	r3, #7
    6f00:	4013      	ands	r3, r2
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
		     (_radio.conn_curr == _radio.conn_upd) &&
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
    6f02:	1e5a      	subs	r2, r3, #1
    6f04:	2a01      	cmp	r2, #1
    6f06:	d902      	bls.n	6f0e <isr+0x11d2>
		     ((_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_INITIATE) ||
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_REQ) ||
    6f08:	2b05      	cmp	r3, #5
    6f0a:	d000      	beq.n	6f0e <isr+0x11d2>
    6f0c:	e378      	b.n	7600 <isr+0x18c4>
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_RSP_WAIT)))) {
			/* set mutex */
			if (_radio.conn_upd == 0) {
    6f0e:	23fe      	movs	r3, #254	; 0xfe
    6f10:	005b      	lsls	r3, r3, #1
    6f12:	58f2      	ldr	r2, [r6, r3]
    6f14:	2a00      	cmp	r2, #0
    6f16:	d100      	bne.n	6f1a <isr+0x11de>
				_radio.conn_upd = _radio.conn_curr;
    6f18:	50f4      	str	r4, [r6, r3]

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
    6f1a:	7b6b      	ldrb	r3, [r5, #13]
    6f1c:	7b2a      	ldrb	r2, [r5, #12]
    6f1e:	021b      	lsls	r3, r3, #8
    6f20:	4313      	orrs	r3, r2
			}

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
    6f22:	0022      	movs	r2, r4
    6f24:	325c      	adds	r2, #92	; 0x5c
    6f26:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
    6f28:	7c6b      	ldrb	r3, [r5, #17]
    6f2a:	7c2a      	ldrb	r2, [r5, #16]
    6f2c:	021b      	lsls	r3, r3, #8
    6f2e:	4313      	orrs	r3, r2
			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
    6f30:	0022      	movs	r2, r4
    6f32:	325e      	adds	r2, #94	; 0x5e
    6f34:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
    6f36:	7cee      	ldrb	r6, [r5, #19]
    6f38:	7cab      	ldrb	r3, [r5, #18]
    6f3a:	0236      	lsls	r6, r6, #8
    6f3c:	431e      	orrs	r6, r3
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
    6f3e:	0023      	movs	r3, r4
    6f40:	3360      	adds	r3, #96	; 0x60
    6f42:	801e      	strh	r6, [r3, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
    6f44:	7d2a      	ldrb	r2, [r5, #20]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
    6f46:	709a      	strb	r2, [r3, #2]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
    6f48:	7dab      	ldrb	r3, [r5, #22]
    6f4a:	7d6a      	ldrb	r2, [r5, #21]
    6f4c:	021b      	lsls	r3, r3, #8
    6f4e:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
    6f50:	0022      	movs	r2, r4
    6f52:	3264      	adds	r2, #100	; 0x64
    6f54:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
    6f56:	7e2b      	ldrb	r3, [r5, #24]
    6f58:	7dea      	ldrb	r2, [r5, #23]
    6f5a:	021b      	lsls	r3, r3, #8
    6f5c:	4313      	orrs	r3, r2
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
    6f5e:	0022      	movs	r2, r4
    6f60:	3266      	adds	r2, #102	; 0x66
    6f62:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
    6f64:	7eab      	ldrb	r3, [r5, #26]
    6f66:	7e6a      	ldrb	r2, [r5, #25]
    6f68:	021b      	lsls	r3, r3, #8
    6f6a:	4313      	orrs	r3, r2
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
    6f6c:	0022      	movs	r2, r4
    6f6e:	3268      	adds	r2, #104	; 0x68
    6f70:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
    6f72:	7f2b      	ldrb	r3, [r5, #28]
    6f74:	7eea      	ldrb	r2, [r5, #27]
    6f76:	021b      	lsls	r3, r3, #8
    6f78:	4313      	orrs	r3, r2
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
    6f7a:	0022      	movs	r2, r4
    6f7c:	326a      	adds	r2, #106	; 0x6a
    6f7e:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
    6f80:	7fab      	ldrb	r3, [r5, #30]
    6f82:	7f6a      	ldrb	r2, [r5, #29]
    6f84:	021b      	lsls	r3, r3, #8
    6f86:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
    6f88:	0022      	movs	r2, r4
    6f8a:	326c      	adds	r2, #108	; 0x6c
    6f8c:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
    6f8e:	1c6b      	adds	r3, r5, #1
    6f90:	7fdb      	ldrb	r3, [r3, #31]
    6f92:	7fea      	ldrb	r2, [r5, #31]
    6f94:	021b      	lsls	r3, r3, #8
    6f96:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
    6f98:	0022      	movs	r2, r4
    6f9a:	326e      	adds	r2, #110	; 0x6e
    6f9c:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;
    6f9e:	1cab      	adds	r3, r5, #2
    6fa0:	7fda      	ldrb	r2, [r3, #31]
    6fa2:	1ceb      	adds	r3, r5, #3
    6fa4:	7fdb      	ldrb	r3, [r3, #31]
    6fa6:	021b      	lsls	r3, r3, #8
    6fa8:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
    6faa:	0022      	movs	r2, r4
    6fac:	3270      	adds	r2, #112	; 0x70
    6fae:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;

			/* enqueue the conn param req, if parameters changed,
			 * else respond
			 */
			if ((_radio.conn_curr->llcp.connection_update.interval !=
    6fb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    6fb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6fb4:	4293      	cmp	r3, r2
    6fb6:	d10a      	bne.n	6fce <isr+0x1292>
			     _radio.conn_curr->conn_interval) ||
			    (_radio.conn_curr->llcp.connection_update.latency
			     != _radio.conn_curr->latency) ||
    6fb8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    6fba:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    6fbc:	21fa      	movs	r1, #250	; 0xfa
    6fbe:	4358      	muls	r0, r3
    6fc0:	237d      	movs	r3, #125	; 0x7d
    6fc2:	0089      	lsls	r1, r1, #2
    6fc4:	4358      	muls	r0, r3
    6fc6:	f7f9 f975 	bl	2b4 <__aeabi_idiv>
    6fca:	4286      	cmp	r6, r0
    6fcc:	d010      	beq.n	6ff0 <isr+0x12b4>
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
    6fce:	0022      	movs	r2, r4
    6fd0:	2107      	movs	r1, #7
    6fd2:	3285      	adds	r2, #133	; 0x85
    6fd4:	7813      	ldrb	r3, [r2, #0]
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
    6fd6:	3f01      	subs	r7, #1
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
    6fd8:	438b      	bics	r3, r1
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    6fda:	3903      	subs	r1, #3
    6fdc:	430b      	orrs	r3, r1
    6fde:	3114      	adds	r1, #20
    6fe0:	438b      	bics	r3, r1
    6fe2:	7013      	strb	r3, [r2, #0]
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    6fe4:	2301      	movs	r3, #1
    6fe6:	3a2b      	subs	r2, #43	; 0x2b
				_radio.conn_curr->llcp_ack--;
    6fe8:	3459      	adds	r4, #89	; 0x59
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    6fea:	7013      	strb	r3, [r2, #0]
				_radio.conn_curr->llcp_ack--;
    6fec:	7027      	strb	r7, [r4, #0]
    6fee:	e09d      	b.n	712c <isr+0x13f0>
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    6ff0:	0023      	movs	r3, r4
    6ff2:	2101      	movs	r1, #1
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
				_radio.conn_curr->llcp.connection_update.state =
    6ff4:	0020      	movs	r0, r4
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    6ff6:	2200      	movs	r2, #0
				_radio.conn_curr->llcp.connection_update.state =
    6ff8:	2607      	movs	r6, #7
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    6ffa:	3384      	adds	r3, #132	; 0x84
    6ffc:	7019      	strb	r1, [r3, #0]
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
				_radio.conn_curr->llcp.connection_update.state =
    6ffe:	3085      	adds	r0, #133	; 0x85
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    7000:	67e2      	str	r2, [r4, #124]	; 0x7c
				_radio.conn_curr->llcp.connection_update.state =
    7002:	7803      	ldrb	r3, [r0, #0]
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;

				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
    7004:	3f01      	subs	r7, #1
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
				_radio.conn_curr->llcp.connection_update.state =
    7006:	43b3      	bics	r3, r6
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    7008:	3e04      	subs	r6, #4
    700a:	4333      	orrs	r3, r6
    700c:	3615      	adds	r6, #21
    700e:	43b3      	bics	r3, r6
    7010:	7003      	strb	r3, [r0, #0]

				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    7012:	0023      	movs	r3, r4
				_radio.conn_curr->llcp_ack--;
    7014:	3459      	adds	r4, #89	; 0x59
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
				_radio.conn_curr->llcp.connection_update.state =
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;

				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    7016:	335a      	adds	r3, #90	; 0x5a
    7018:	7019      	strb	r1, [r3, #0]
				_radio.conn_curr->llcp_ack--;
    701a:	7027      	strb	r7, [r4, #0]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    701c:	0017      	movs	r7, r2
    701e:	e08b      	b.n	7138 <isr+0x13fc>
		/* master in conn update procedure, master in any state we
		 * ignore this req
		 */
		else if ((_radio.conn_curr->llcp_req !=
			  _radio.conn_curr->llcp_ack) &&
			 (_radio.conn_curr->role.master.role == 0) &&
    7020:	5871      	ldr	r1, [r6, r1]
    7022:	428c      	cmp	r4, r1
    7024:	d000      	beq.n	7028 <isr+0x12ec>
    7026:	e2eb      	b.n	7600 <isr+0x18c4>
			 (_radio.conn_curr == _radio.conn_upd) &&
    7028:	7812      	ldrb	r2, [r2, #0]
    702a:	2a01      	cmp	r2, #1
    702c:	d000      	beq.n	7030 <isr+0x12f4>
    702e:	e2e7      	b.n	7600 <isr+0x18c4>
    7030:	e07c      	b.n	712c <isr+0x13f0>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7032:	0030      	movs	r0, r6
    7034:	30d1      	adds	r0, #209	; 0xd1
    7036:	30ff      	adds	r0, #255	; 0xff
    7038:	f7fb f998 	bl	236c <mem_acquire>
    703c:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    703e:	d100      	bne.n	7042 <isr+0x1306>
    7040:	e2de      	b.n	7600 <isr+0x18c4>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7042:	2203      	movs	r2, #3
    7044:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    7046:	7142      	strb	r2, [r0, #5]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7048:	4313      	orrs	r3, r2
    704a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    704c:	2311      	movs	r3, #17
    704e:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
    7050:	3b02      	subs	r3, #2
    7052:	7203      	strb	r3, [r0, #8]
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
    7054:	3311      	adds	r3, #17
    7056:	7243      	strb	r3, [r0, #9]
    7058:	e05f      	b.n	711a <isr+0x13de>

static inline void
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
    705a:	0023      	movs	r3, r4
    705c:	3358      	adds	r3, #88	; 0x58
    705e:	781a      	ldrb	r2, [r3, #0]
    7060:	7859      	ldrb	r1, [r3, #1]
    7062:	3301      	adds	r3, #1
    7064:	4291      	cmp	r1, r2
    7066:	d066      	beq.n	7136 <isr+0x13fa>
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;

		switch (_radio.conn_curr->llcp_type) {
    7068:	7859      	ldrb	r1, [r3, #1]
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    706a:	701a      	strb	r2, [r3, #0]

		switch (_radio.conn_curr->llcp_type) {
    706c:	2901      	cmp	r1, #1
    706e:	d000      	beq.n	7072 <isr+0x1336>
    7070:	e2c6      	b.n	7600 <isr+0x18c4>

static inline void
isr_rx_conn_pkt_ctrl_rej_conn_upd(struct radio_pdu_node_rx *radio_pdu_node_rx,
				  u8_t *rx_enqueue)
{
	LL_ASSERT(_radio.conn_upd == _radio.conn_curr);
    7072:	22fe      	movs	r2, #254	; 0xfe
    7074:	0052      	lsls	r2, r2, #1
    7076:	58b3      	ldr	r3, [r6, r2]
    7078:	429c      	cmp	r4, r3
    707a:	d000      	beq.n	707e <isr+0x1342>
    707c:	e2c0      	b.n	7600 <isr+0x18c4>

	/* reset mutex */
	_radio.conn_upd = NULL;
    707e:	2300      	movs	r3, #0
    7080:	50b3      	str	r3, [r6, r2]

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
    7082:	0022      	movs	r2, r4
    7084:	3234      	adds	r2, #52	; 0x34
    7086:	7812      	ldrb	r2, [r2, #0]
    7088:	420a      	tst	r2, r1
    708a:	d001      	beq.n	7090 <isr+0x1354>
		_radio.conn_curr->role.slave.ticks_to_offset =
    708c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    708e:	6562      	str	r2, [r4, #84]	; 0x54
		    _radio.conn_curr->llcp.connection_update.
			ticks_to_offset_next;
	}

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;
    7090:	8663      	strh	r3, [r4, #50]	; 0x32

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    7092:	0023      	movs	r3, r4
    7094:	3385      	adds	r3, #133	; 0x85
    7096:	781a      	ldrb	r2, [r3, #0]
    7098:	2318      	movs	r3, #24
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    709a:	2700      	movs	r7, #0

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    709c:	421a      	tst	r2, r3
    709e:	d14b      	bne.n	7138 <isr+0x13fc>
		struct radio_le_conn_update_cmplt
			*radio_le_conn_update_cmplt;
		struct pdu_data *pdu_data_rx;

		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    70a0:	3b10      	subs	r3, #16
		/* prepare connection update complete structure */
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
    70a2:	72ef      	strb	r7, [r5, #11]
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
		struct radio_le_conn_update_cmplt
			*radio_le_conn_update_cmplt;
		struct pdu_data *pdu_data_rx;

		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    70a4:	712b      	strb	r3, [r5, #4]
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
    70a6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
		radio_le_conn_update_cmplt->timeout =
    70a8:	21fa      	movs	r1, #250	; 0xfa
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
    70aa:	0a1a      	lsrs	r2, r3, #8
    70ac:	732b      	strb	r3, [r5, #12]
    70ae:	736a      	strb	r2, [r5, #13]
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    70b0:	1de2      	adds	r2, r4, #7
    70b2:	7fd2      	ldrb	r2, [r2, #31]
		radio_le_conn_update_cmplt->timeout =
    70b4:	0089      	lsls	r1, r1, #2
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    70b6:	73aa      	strb	r2, [r5, #14]
    70b8:	0022      	movs	r2, r4
    70ba:	3208      	adds	r2, #8
    70bc:	7fd2      	ldrb	r2, [r2, #31]
		radio_le_conn_update_cmplt->timeout =
			_radio.conn_curr->supervision_reload *
			_radio.conn_curr->conn_interval * 125 / 1000;

		*rx_enqueue = 1;
    70be:	3701      	adds	r7, #1
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    70c0:	73ea      	strb	r2, [r5, #15]
		radio_le_conn_update_cmplt->timeout =
    70c2:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
    70c4:	4358      	muls	r0, r3
    70c6:	237d      	movs	r3, #125	; 0x7d
    70c8:	4358      	muls	r0, r3
    70ca:	f7f9 f8f3 	bl	2b4 <__aeabi_idiv>
    70ce:	b280      	uxth	r0, r0
    70d0:	7428      	strb	r0, [r5, #16]
    70d2:	0a00      	lsrs	r0, r0, #8
    70d4:	7468      	strb	r0, [r5, #17]
    70d6:	e02f      	b.n	7138 <isr+0x13fc>
		_radio.conn_curr->procedure_expire = 0;
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		if (_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) {
    70d8:	0023      	movs	r3, r4
    70da:	3358      	adds	r3, #88	; 0x58
    70dc:	781a      	ldrb	r2, [r3, #0]
    70de:	7859      	ldrb	r1, [r3, #1]
    70e0:	3301      	adds	r3, #1
    70e2:	4291      	cmp	r1, r2
    70e4:	d001      	beq.n	70ea <isr+0x13ae>
			/* reset ctrl procedure */
			_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    70e6:	701a      	strb	r2, [r3, #0]
    70e8:	e28a      	b.n	7600 <isr+0x18c4>
				break;
			}
		}

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    70ea:	2300      	movs	r3, #0
    70ec:	8663      	strh	r3, [r4, #50]	; 0x32
    70ee:	e01b      	b.n	7128 <isr+0x13ec>
    70f0:	fffe30d0 	.word	0xfffe30d0
    70f4:	200005f4 	.word	0x200005f4
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    70f8:	0030      	movs	r0, r6
    70fa:	30d1      	adds	r0, #209	; 0xd1
    70fc:	30ff      	adds	r0, #255	; 0xff
    70fe:	f7fb f935 	bl	236c <mem_acquire>
    7102:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    7104:	d100      	bne.n	7108 <isr+0x13cc>
    7106:	e27b      	b.n	7600 <isr+0x18c4>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7108:	2203      	movs	r2, #3
    710a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_unknown_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
    710c:	7207      	strb	r7, [r0, #8]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    710e:	4313      	orrs	r3, r2
    7110:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    7112:	2302      	movs	r3, #2
    7114:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_unknown_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    7116:	3305      	adds	r3, #5
    7118:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;

	ctrl_tx_enqueue(conn, node_tx);
    711a:	0020      	movs	r0, r4
    711c:	f7fe f874 	bl	5208 <ctrl_tx_enqueue>
    7120:	e009      	b.n	7136 <isr+0x13fa>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    7122:	001f      	movs	r7, r3
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    7124:	930c      	str	r3, [sp, #48]	; 0x30
    7126:	e007      	b.n	7138 <isr+0x13fc>

			switch (pdu_data_rx->ll_id) {
			case PDU_DATA_LLID_DATA_CONTINUE:
			case PDU_DATA_LLID_DATA_START:
				/* enqueue data packet */
				*rx_enqueue = 1;
    7128:	2701      	movs	r7, #1
    712a:	e005      	b.n	7138 <isr+0x13fc>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    712c:	001f      	movs	r7, r3
    712e:	e003      	b.n	7138 <isr+0x13fc>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND:
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    7130:	2328      	movs	r3, #40	; 0x28
    7132:	3497      	adds	r4, #151	; 0x97
    7134:	7023      	strb	r3, [r4, #0]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    7136:	2700      	movs	r7, #0
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		}

		if (!nack) {
			_radio.conn_curr->nesn++;
    7138:	23c8      	movs	r3, #200	; 0xc8
    713a:	4ad6      	ldr	r2, [pc, #856]	; (7494 <isr+0x1758>)
    713c:	005b      	lsls	r3, r3, #1
    713e:	58d4      	ldr	r4, [r2, r3]
    7140:	3b8f      	subs	r3, #143	; 0x8f
    7142:	0022      	movs	r2, r4
    7144:	32a4      	adds	r2, #164	; 0xa4
    7146:	7811      	ldrb	r1, [r2, #0]
    7148:	3bff      	subs	r3, #255	; 0xff
    714a:	404b      	eors	r3, r1
    714c:	7013      	strb	r3, [r2, #0]

			if (ccm_rx_increment) {
    714e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7150:	2b00      	cmp	r3, #0
    7152:	d100      	bne.n	7156 <isr+0x141a>
    7154:	e26a      	b.n	762c <isr+0x18f0>
				_radio.conn_curr->ccm_rx.counter++;
    7156:	0023      	movs	r3, r4
    7158:	0026      	movs	r6, r4
    715a:	33b4      	adds	r3, #180	; 0xb4
    715c:	36b8      	adds	r6, #184	; 0xb8
    715e:	681b      	ldr	r3, [r3, #0]
    7160:	7832      	ldrb	r2, [r6, #0]
    7162:	0a1b      	lsrs	r3, r3, #8
    7164:	0612      	lsls	r2, r2, #24
    7166:	431a      	orrs	r2, r3
    7168:	0010      	movs	r0, r2
    716a:	0022      	movs	r2, r4
    716c:	32bc      	adds	r2, #188	; 0xbc
    716e:	6833      	ldr	r3, [r6, #0]
    7170:	7812      	ldrb	r2, [r2, #0]
    7172:	0a1b      	lsrs	r3, r3, #8
    7174:	0612      	lsls	r2, r2, #24
    7176:	431a      	orrs	r2, r3
    7178:	0011      	movs	r1, r2
    717a:	2300      	movs	r3, #0
    717c:	2201      	movs	r2, #1
    717e:	1812      	adds	r2, r2, r0
    7180:	414b      	adcs	r3, r1
    7182:	920c      	str	r2, [sp, #48]	; 0x30
    7184:	930d      	str	r3, [sp, #52]	; 0x34
    7186:	2230      	movs	r2, #48	; 0x30
    7188:	466b      	mov	r3, sp
    718a:	189b      	adds	r3, r3, r2
    718c:	781b      	ldrb	r3, [r3, #0]
    718e:	34b5      	adds	r4, #181	; 0xb5
    7190:	7023      	strb	r3, [r4, #0]
    7192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7194:	0a19      	lsrs	r1, r3, #8
    7196:	0e1a      	lsrs	r2, r3, #24
    7198:	7061      	strb	r1, [r4, #1]
    719a:	70e2      	strb	r2, [r4, #3]
    719c:	0c19      	lsrs	r1, r3, #16
    719e:	2234      	movs	r2, #52	; 0x34
    71a0:	466b      	mov	r3, sp
    71a2:	189b      	adds	r3, r3, r2
    71a4:	781b      	ldrb	r3, [r3, #0]
    71a6:	70a1      	strb	r1, [r4, #2]
    71a8:	7123      	strb	r3, [r4, #4]
    71aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    71ac:	0a1a      	lsrs	r2, r3, #8
    71ae:	7162      	strb	r2, [r4, #5]
    71b0:	0c1a      	lsrs	r2, r3, #16
    71b2:	0e1b      	lsrs	r3, r3, #24
    71b4:	71a2      	strb	r2, [r4, #6]
    71b6:	71e3      	strb	r3, [r4, #7]
    71b8:	e238      	b.n	762c <isr+0x18f0>
		if (terminate) {
			goto isr_rx_conn_exit;
		}
	} else {
		/* Start CRC error countdown, if not already started */
		if (_radio.crc_expire == 0) {
    71ba:	5ca3      	ldrb	r3, [r4, r2]
    71bc:	2b00      	cmp	r3, #0
    71be:	d101      	bne.n	71c4 <isr+0x1488>
			_radio.crc_expire = 2;
    71c0:	3302      	adds	r3, #2
    71c2:	54a3      	strb	r3, [r4, r2]
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
    71c4:	5ca3      	ldrb	r3, [r4, r2]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    71c6:	2700      	movs	r7, #0
		if (_radio.crc_expire == 0) {
			_radio.crc_expire = 2;
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
    71c8:	3b01      	subs	r3, #1
    71ca:	b2db      	uxtb	r3, r3
    71cc:	54a3      	strb	r3, [r4, r2]
		crc_close = (_radio.crc_expire == 0);
    71ce:	425c      	negs	r4, r3
    71d0:	415c      	adcs	r4, r3

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    71d2:	970a      	str	r7, [sp, #40]	; 0x28
			_radio.crc_expire = 2;
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
    71d4:	b2e4      	uxtb	r4, r4
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    71d6:	23c8      	movs	r3, #200	; 0xc8
    71d8:	4eae      	ldr	r6, [pc, #696]	; (7494 <isr+0x1758>)
    71da:	005b      	lsls	r3, r3, #1
    71dc:	58f0      	ldr	r0, [r6, r3]
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    71de:	a917      	add	r1, sp, #92	; 0x5c
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    71e0:	0003      	movs	r3, r0
    71e2:	33a4      	adds	r3, #164	; 0xa4
    71e4:	781b      	ldrb	r3, [r3, #0]
    71e6:	09db      	lsrs	r3, r3, #7
    71e8:	930c      	str	r3, [sp, #48]	; 0x30
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    71ea:	f7fc fe3f 	bl	3e6c <prepare_pdu_data_tx>
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    71ee:	7c33      	ldrb	r3, [r6, #16]
    71f0:	2b03      	cmp	r3, #3
    71f2:	d014      	beq.n	721e <isr+0x14e2>
    71f4:	2303      	movs	r3, #3
    71f6:	2c00      	cmp	r4, #0
    71f8:	d111      	bne.n	721e <isr+0x14e2>
    71fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    71fc:	2a00      	cmp	r2, #0
    71fe:	d006      	beq.n	720e <isr+0x14d2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    7200:	7a2a      	ldrb	r2, [r5, #8]
    7202:	06d2      	lsls	r2, r2, #27
    7204:	d403      	bmi.n	720e <isr+0x14d2>
    7206:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    7208:	7852      	ldrb	r2, [r2, #1]
    720a:	2a00      	cmp	r2, #0
    720c:	d007      	beq.n	721e <isr+0x14e2>
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
    720e:	23c8      	movs	r3, #200	; 0xc8
    7210:	005b      	lsls	r3, r3, #1
    7212:	58f3      	ldr	r3, [r6, r3]
    7214:	3397      	adds	r3, #151	; 0x97

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
    7216:	781b      	ldrb	r3, [r3, #0]
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7218:	1e5a      	subs	r2, r3, #1
    721a:	4193      	sbcs	r3, r2
    721c:	3302      	adds	r3, #2
    721e:	24c8      	movs	r4, #200	; 0xc8
    7220:	7433      	strb	r3, [r6, #16]
    7222:	0064      	lsls	r4, r4, #1
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
			STATE_CLOSE : STATE_TX;

	if (_radio.state == STATE_CLOSE) {
    7224:	2b03      	cmp	r3, #3
    7226:	d111      	bne.n	724c <isr+0x1510>
		/* Event close for master */
		if (_radio.role == ROLE_MASTER) {
    7228:	7bf3      	ldrb	r3, [r6, #15]
    722a:	2b04      	cmp	r3, #4
    722c:	d10b      	bne.n	7246 <isr+0x150a>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    722e:	227f      	movs	r2, #127	; 0x7f
    7230:	5931      	ldr	r1, [r6, r4]
    7232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7234:	31a4      	adds	r1, #164	; 0xa4
    7236:	7808      	ldrb	r0, [r1, #0]
    7238:	01db      	lsls	r3, r3, #7
    723a:	4002      	ands	r2, r0
    723c:	4313      	orrs	r3, r2
    723e:	700b      	strb	r3, [r1, #0]

			radio_disable();
    7240:	f7fb fa5a 	bl	26f8 <radio_disable>
    7244:	e023      	b.n	728e <isr+0x1552>

			goto isr_rx_conn_exit;
		}
		/* Event close for slave */
		else {
			radio_switch_complete_and_disable();
    7246:	f7fb fab9 	bl	27bc <radio_switch_complete_and_disable>
    724a:	e007      	b.n	725c <isr+0x1520>
		}
	} else {	/* if (_radio.state == STATE_TX) */
		radio_tmr_tifs_set(RADIO_TIFS);
    724c:	2096      	movs	r0, #150	; 0x96
    724e:	f7fb fb41 	bl	28d4 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_rx(0);
    7252:	2000      	movs	r0, #0
    7254:	f7fb faa2 	bl	279c <radio_switch_complete_and_rx>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_end_capture();
    7258:	f7fb fc08 	bl	2a6c <radio_tmr_end_capture>
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
    725c:	5930      	ldr	r0, [r6, r4]
    725e:	2301      	movs	r3, #1
    7260:	0006      	movs	r6, r0
    7262:	9917      	ldr	r1, [sp, #92]	; 0x5c
    7264:	36a4      	adds	r6, #164	; 0xa4
    7266:	7832      	ldrb	r2, [r6, #0]
    7268:	780c      	ldrb	r4, [r1, #0]
    726a:	401a      	ands	r2, r3
    726c:	3307      	adds	r3, #7
    726e:	439c      	bics	r4, r3
    7270:	00d2      	lsls	r2, r2, #3
    7272:	4322      	orrs	r2, r4
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    7274:	2404      	movs	r4, #4

		radio_tmr_end_capture();
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
    7276:	700a      	strb	r2, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    7278:	7832      	ldrb	r2, [r6, #0]
    727a:	3b07      	subs	r3, #7
    727c:	0852      	lsrs	r2, r2, #1
    727e:	4013      	ands	r3, r2
    7280:	009a      	lsls	r2, r3, #2
    7282:	780b      	ldrb	r3, [r1, #0]
    7284:	43a3      	bics	r3, r4
    7286:	4313      	orrs	r3, r2
    7288:	700b      	strb	r3, [r1, #0]

	/* setup the radio tx packet buffer */
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    728a:	f7fd f944 	bl	4516 <tx_packet_set>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
    728e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7290:	2b00      	cmp	r3, #0
    7292:	d007      	beq.n	72a4 <isr+0x1568>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    7294:	23c8      	movs	r3, #200	; 0xc8
    7296:	4a7f      	ldr	r2, [pc, #508]	; (7494 <isr+0x1758>)
    7298:	005b      	lsls	r3, r3, #1
    729a:	58d3      	ldr	r3, [r2, r3]
    729c:	990a      	ldr	r1, [sp, #40]	; 0x28
    729e:	8c18      	ldrh	r0, [r3, #32]
    72a0:	f7fd fa7e 	bl	47a0 <pdu_node_tx_release>
	}

	/* enqueue any rx packet/event towards application */
	if (rx_enqueue) {
    72a4:	2f00      	cmp	r7, #0
    72a6:	d100      	bne.n	72aa <isr+0x156e>
    72a8:	e1db      	b.n	7662 <isr+0x1926>
		/* set data flow control lock on currently rx-ed connection */
		rx_fc_lock(_radio.conn_curr->handle);
    72aa:	24c8      	movs	r4, #200	; 0xc8
    72ac:	4e79      	ldr	r6, [pc, #484]	; (7494 <isr+0x1758>)
    72ae:	0064      	lsls	r4, r4, #1
    72b0:	5933      	ldr	r3, [r6, r4]
    72b2:	8c18      	ldrh	r0, [r3, #32]
    72b4:	f7fd f8ce 	bl	4454 <rx_fc_lock>

		/* set the connection handle and enqueue */
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    72b8:	5933      	ldr	r3, [r6, r4]
    72ba:	8c1b      	ldrh	r3, [r3, #32]
    72bc:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
    72be:	f7fd f993 	bl	45e8 <packet_rx_enqueue>
    72c2:	e1ce      	b.n	7662 <isr+0x1926>

static inline void isr_radio_state_close(void)
{
	u32_t dont_close = 0;

	switch (_radio.role) {
    72c4:	7be0      	ldrb	r0, [r4, #15]
    72c6:	b2c0      	uxtb	r0, r0
    72c8:	2804      	cmp	r0, #4
    72ca:	d900      	bls.n	72ce <isr+0x1592>
    72cc:	e198      	b.n	7600 <isr+0x18c4>
    72ce:	f7f8 ff5d 	bl	18c <__gnu_thumb1_case_uhi>
    72d2:	0191      	.short	0x0191
    72d4:	003f0005 	.word	0x003f0005
    72d8:	00770077 	.word	0x00770077

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
    72dc:	2b03      	cmp	r3, #3
    72de:	d10b      	bne.n	72f8 <isr+0x15bc>
	    (_radio.advertiser.chl_map_current != 0)) {
    72e0:	0023      	movs	r3, r4
    72e2:	33a4      	adds	r3, #164	; 0xa4

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
    72e4:	781a      	ldrb	r2, [r3, #0]
    72e6:	230e      	movs	r3, #14
    72e8:	421a      	tst	r2, r3
    72ea:	d005      	beq.n	72f8 <isr+0x15bc>
	    (_radio.advertiser.chl_map_current != 0)) {
		dont_close = 1;

		adv_setup();
    72ec:	f7fd f9fc 	bl	46e8 <adv_setup>

		radio_tx_enable();
    72f0:	f7fb f9fc 	bl	26ec <radio_tx_enable>
    72f4:	f7ff fab5 	bl	6862 <isr+0xb26>

		radio_tmr_end_capture();
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();
    72f8:	f7fb fab4 	bl	2864 <radio_filter_disable>

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
    72fc:	7c23      	ldrb	r3, [r4, #16]
    72fe:	2b03      	cmp	r3, #3
    7300:	d000      	beq.n	7304 <isr+0x15c8>
    7302:	e195      	b.n	7630 <isr+0x18f4>
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
    7304:	0023      	movs	r3, r4
    7306:	33f4      	adds	r3, #244	; 0xf4
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
    7308:	781a      	ldrb	r2, [r3, #0]
    730a:	2327      	movs	r3, #39	; 0x27
    730c:	4353      	muls	r3, r2
    730e:	33a0      	adds	r3, #160	; 0xa0
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
    7310:	18e3      	adds	r3, r4, r3

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
    7312:	799a      	ldrb	r2, [r3, #6]
    7314:	230f      	movs	r3, #15
    7316:	4013      	ands	r3, r2
    7318:	2b01      	cmp	r3, #1
    731a:	d100      	bne.n	731e <isr+0x15e2>
    731c:	e188      	b.n	7630 <isr+0x18f4>
			 * condition where in the Adv role is being stopped but
			 * at the same time it is preempted by Adv event that
			 * gets into close state. Accept failure when Adv role
			 * is being stopped.
			 */
			ticker_status =
    731e:	4b5e      	ldr	r3, [pc, #376]	; (7498 <isr+0x175c>)
    7320:	2000      	movs	r0, #0
    7322:	9306      	str	r3, [sp, #24]
    7324:	4b5d      	ldr	r3, [pc, #372]	; (749c <isr+0x1760>)
    7326:	9004      	str	r0, [sp, #16]
    7328:	9305      	str	r3, [sp, #20]
    732a:	2348      	movs	r3, #72	; 0x48
    732c:	9003      	str	r0, [sp, #12]
    732e:	33ff      	adds	r3, #255	; 0xff
    7330:	9002      	str	r0, [sp, #8]
    7332:	9001      	str	r0, [sp, #4]
    7334:	9000      	str	r0, [sp, #0]
    7336:	2205      	movs	r2, #5
    7338:	0001      	movs	r1, r0
    733a:	f7fc fa7b 	bl	3834 <ticker_update>
					      TICKER_US_TO_TICKS(random_delay *
								 1000),
					      0, 0, 0, 0, 0,
					      ticker_update_adv_assert,
					      (void *)__LINE__);
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    733e:	2302      	movs	r3, #2
    7340:	4398      	bics	r0, r3
    7342:	d100      	bne.n	7346 <isr+0x160a>
    7344:	e174      	b.n	7630 <isr+0x18f4>
    7346:	7ba3      	ldrb	r3, [r4, #14]
    7348:	2b05      	cmp	r3, #5
    734a:	d100      	bne.n	734e <isr+0x1612>
    734c:	e170      	b.n	7630 <isr+0x18f4>
    734e:	e157      	b.n	7600 <isr+0x18c4>

static inline u32_t isr_close_scan(void)
{
	u32_t dont_close = 0;

	if (_radio.state == STATE_CLOSE) {
    7350:	2b03      	cmp	r3, #3
    7352:	d127      	bne.n	73a4 <isr+0x1668>
		dont_close = 1;

		radio_tmr_tifs_set(RADIO_TIFS);
    7354:	2096      	movs	r0, #150	; 0x96
    7356:	f7fb fabd 	bl	28d4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0);
    735a:	2100      	movs	r1, #0
    735c:	0008      	movs	r0, r1
    735e:	f7fb fa25 	bl	27ac <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    7362:	23b6      	movs	r3, #182	; 0xb6
    7364:	22d8      	movs	r2, #216	; 0xd8
    7366:	33ff      	adds	r3, #255	; 0xff
    7368:	5ce3      	ldrb	r3, [r4, r3]
    736a:	0052      	lsls	r2, r2, #1
    736c:	58a2      	ldr	r2, [r4, r2]
    736e:	009b      	lsls	r3, r3, #2
    7370:	5898      	ldr	r0, [r3, r2]
    7372:	3008      	adds	r0, #8
    7374:	f7fb f99c 	bl	26b0 <radio_pkt_rx_set>
					pdu_data);
		radio_rssi_measure();
    7378:	f7fb fa28 	bl	27cc <radio_rssi_measure>

		if (_radio.scanner.filter_policy && _radio.nirk) {
    737c:	235e      	movs	r3, #94	; 0x5e
    737e:	33ff      	adds	r3, #255	; 0xff
    7380:	5ce2      	ldrb	r2, [r4, r3]
    7382:	3b2e      	subs	r3, #46	; 0x2e
    7384:	3bff      	subs	r3, #255	; 0xff
    7386:	421a      	tst	r2, r3
    7388:	d006      	beq.n	7398 <isr+0x165c>
    738a:	7c60      	ldrb	r0, [r4, #17]
    738c:	2800      	cmp	r0, #0
    738e:	d003      	beq.n	7398 <isr+0x165c>
			radio_ar_configure(_radio.nirk, _radio.irk);
    7390:	0021      	movs	r1, r4
    7392:	3112      	adds	r1, #18
    7394:	f7fb fc20 	bl	2bd8 <radio_ar_configure>
		}

		_radio.state = STATE_RX;
    7398:	2301      	movs	r3, #1
    739a:	7423      	strb	r3, [r4, #16]

		radio_rx_enable();
    739c:	f7fb f9a0 	bl	26e0 <radio_rx_enable>
    73a0:	f7ff fa5f 	bl	6862 <isr+0xb26>

		radio_tmr_end_capture();
	} else {
		radio_filter_disable();
    73a4:	f7fb fa5e 	bl	2864 <radio_filter_disable>

		if (_radio.state == STATE_ABORT) {
    73a8:	7c23      	ldrb	r3, [r4, #16]
    73aa:	2b05      	cmp	r3, #5
    73ac:	d000      	beq.n	73b0 <isr+0x1674>
    73ae:	e13f      	b.n	7630 <isr+0x18f4>
			/* Scanner stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    73b0:	2000      	movs	r0, #0
    73b2:	2204      	movs	r2, #4
    73b4:	9000      	str	r0, [sp, #0]
    73b6:	0003      	movs	r3, r0
    73b8:	0001      	movs	r1, r0
    73ba:	f7fc fa8b 	bl	38d4 <ticker_stop>
    73be:	e137      	b.n	7630 <isr+0x18f4>
	u16_t elapsed_event;
	u16_t lazy;
	u8_t force;

	/* Local initiated terminate happened */
	if (_radio.conn_curr == 0) {
    73c0:	25c8      	movs	r5, #200	; 0xc8
    73c2:	006d      	lsls	r5, r5, #1
    73c4:	5960      	ldr	r0, [r4, r5]
    73c6:	2800      	cmp	r0, #0
    73c8:	d100      	bne.n	73cc <isr+0x1690>
    73ca:	e131      	b.n	7630 <isr+0x18f4>
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
    73cc:	7be3      	ldrb	r3, [r4, #15]
    73ce:	2b03      	cmp	r3, #3
    73d0:	d107      	bne.n	73e2 <isr+0x16a6>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
    73d2:	0003      	movs	r3, r0
    73d4:	3397      	adds	r3, #151	; 0x97
    73d6:	7819      	ldrb	r1, [r3, #0]
	if (_radio.conn_curr == 0) {
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
    73d8:	2900      	cmp	r1, #0
    73da:	d002      	beq.n	73e2 <isr+0x16a6>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
    73dc:	f7fd f8e2 	bl	45a4 <terminate_ind_rx_enqueue>
    73e0:	e0ca      	b.n	7578 <isr+0x183c>
		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
    73e2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    73e4:	930c      	str	r3, [sp, #48]	; 0x30
	elapsed_event = latency_event + 1;
    73e6:	3301      	adds	r3, #1
    73e8:	b29b      	uxth	r3, r3
    73ea:	930a      	str	r3, [sp, #40]	; 0x28

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
    73ec:	23ca      	movs	r3, #202	; 0xca
    73ee:	005b      	lsls	r3, r3, #1
    73f0:	5ce5      	ldrb	r5, [r4, r3]
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
    73f2:	7be3      	ldrb	r3, [r4, #15]
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
    73f4:	2d00      	cmp	r5, #0
    73f6:	d057      	beq.n	74a8 <isr+0x176c>
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
    73f8:	2b03      	cmp	r3, #3
    73fa:	d13f      	bne.n	747c <isr+0x1740>
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
    73fc:	f7fb fb2a 	bl	2a54 <radio_tmr_aa_get>
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
    7400:	23c8      	movs	r3, #200	; 0xc8
    7402:	005b      	lsls	r3, r3, #1
    7404:	58e5      	ldr	r5, [r4, r3]
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
    7406:	0006      	movs	r6, r0
			window_widening_event_us =
    7408:	6c68      	ldr	r0, [r5, #68]	; 0x44
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
    740a:	4a25      	ldr	r2, [pc, #148]	; (74a0 <isr+0x1764>)
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			preamble_to_addr_us = addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
    740c:	0007      	movs	r7, r0
    740e:	3748      	adds	r7, #72	; 0x48
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
    7410:	2300      	movs	r3, #0
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
    7412:	42be      	cmp	r6, r7
    7414:	d813      	bhi.n	743e <isr+0x1702>
			    start_to_address_expected_us) {
				ticks_drift_plus =
    7416:	2100      	movs	r1, #0
    7418:	f7f9 f858 	bl	4cc <__aeabi_lmul>
    741c:	4a21      	ldr	r2, [pc, #132]	; (74a4 <isr+0x1768>)
    741e:	2307      	movs	r3, #7
    7420:	f7f9 f834 	bl	48c <__aeabi_uldivmod>
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
    7424:	4a1e      	ldr	r2, [pc, #120]	; (74a0 <isr+0x1764>)
    7426:	2300      	movs	r3, #0
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
    7428:	b284      	uxth	r4, r0
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
    742a:	2100      	movs	r1, #0
    742c:	1bb8      	subs	r0, r7, r6
    742e:	f7f9 f84d 	bl	4cc <__aeabi_lmul>
    7432:	2307      	movs	r3, #7
    7434:	4a1b      	ldr	r2, [pc, #108]	; (74a4 <isr+0x1768>)
    7436:	f7f9 f829 	bl	48c <__aeabi_uldivmod>
    743a:	b283      	uxth	r3, r0
    743c:	e009      	b.n	7452 <isr+0x1716>
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
    743e:	0030      	movs	r0, r6
    7440:	2100      	movs	r1, #0
    7442:	f7f9 f843 	bl	4cc <__aeabi_lmul>
    7446:	2307      	movs	r3, #7
    7448:	4a16      	ldr	r2, [pc, #88]	; (74a4 <isr+0x1768>)
    744a:	f7f9 f81f 	bl	48c <__aeabi_uldivmod>
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
    744e:	2302      	movs	r3, #2
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
    7450:	b284      	uxth	r4, r0
							   preamble_to_addr_us);
			}


			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
    7452:	2200      	movs	r2, #0
    7454:	646a      	str	r2, [r5, #68]	; 0x44
			_radio.conn_curr->role.slave.window_size_event_us = 0;
    7456:	64ea      	str	r2, [r5, #76]	; 0x4c

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
    7458:	8cea      	ldrh	r2, [r5, #38]	; 0x26
    745a:	856a      	strh	r2, [r5, #42]	; 0x2a
			if (_radio.conn_curr->pkt_tx_head) {
    745c:	002a      	movs	r2, r5
    745e:	32e8      	adds	r2, #232	; 0xe8
    7460:	6812      	ldr	r2, [r2, #0]
    7462:	2a00      	cmp	r2, #0
    7464:	d00e      	beq.n	7484 <isr+0x1748>
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
    7466:	7952      	ldrb	r2, [r2, #5]
    7468:	2a00      	cmp	r2, #0
    746a:	d104      	bne.n	7476 <isr+0x173a>
				    _radio.conn_curr->packet_tx_head_offset) {
    746c:	002a      	movs	r2, r5
    746e:	32f9      	adds	r2, #249	; 0xf9
			if (_radio.conn_curr->pkt_tx_head) {
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
    7470:	7812      	ldrb	r2, [r2, #0]
    7472:	2a00      	cmp	r2, #0
    7474:	d006      	beq.n	7484 <isr+0x1748>
				    _radio.conn_curr->packet_tx_head_offset) {
					_radio.conn_curr->latency_event = 0;
    7476:	2200      	movs	r2, #0
    7478:	856a      	strh	r2, [r5, #42]	; 0x2a
    747a:	e003      	b.n	7484 <isr+0x1748>
				}
			}
		} else {
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
    747c:	2300      	movs	r3, #0
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
    747e:	001c      	movs	r4, r3
					_radio.conn_curr->latency_event = 0;
				}
			}
		} else {
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
    7480:	3035      	adds	r0, #53	; 0x35
    7482:	7003      	strb	r3, [r0, #0]
		}

		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
    7484:	22c8      	movs	r2, #200	; 0xc8
    7486:	4903      	ldr	r1, [pc, #12]	; (7494 <isr+0x1758>)
    7488:	0052      	lsls	r2, r2, #1
    748a:	588a      	ldr	r2, [r1, r2]
    748c:	2100      	movs	r1, #0
    748e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    7490:	e036      	b.n	7500 <isr+0x17c4>
    7492:	46c0      	nop			; (mov r8, r8)
    7494:	200005f4 	.word	0x200005f4
    7498:	00000b29 	.word	0x00000b29
    749c:	00004c65 	.word	0x00004c65
    74a0:	3b9aca00 	.word	0x3b9aca00
    74a4:	1afd498d 	.word	0x1afd498d
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
    74a8:	2b04      	cmp	r3, #4
    74aa:	d10d      	bne.n	74c8 <isr+0x178c>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
    74ac:	0003      	movs	r3, r0
    74ae:	3397      	adds	r3, #151	; 0x97
    74b0:	7819      	ldrb	r1, [r3, #0]
		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
    74b2:	2900      	cmp	r1, #0
    74b4:	d008      	beq.n	74c8 <isr+0x178c>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    74b6:	26c8      	movs	r6, #200	; 0xc8
    74b8:	0076      	lsls	r6, r6, #1
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
    74ba:	f7fd f873 	bl	45a4 <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    74be:	59a0      	ldr	r0, [r4, r6]
    74c0:	f7fd f9e4 	bl	488c <connection_release>
		_radio.conn_curr = NULL;
    74c4:	51a5      	str	r5, [r4, r6]
    74c6:	e0b3      	b.n	7630 <isr+0x18f4>

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
    74c8:	7be3      	ldrb	r3, [r4, #15]
    74ca:	2b04      	cmp	r3, #4
    74cc:	d110      	bne.n	74f0 <isr+0x17b4>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
    74ce:	0002      	movs	r2, r0
    74d0:	3235      	adds	r2, #53	; 0x35
    74d2:	7813      	ldrb	r3, [r2, #0]

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
    74d4:	2b00      	cmp	r3, #0
    74d6:	d00b      	beq.n	74f0 <isr+0x17b4>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
		if (_radio.conn_curr->role.master.connect_expire >
    74d8:	990a      	ldr	r1, [sp, #40]	; 0x28
    74da:	4299      	cmp	r1, r3
    74dc:	d202      	bcs.n	74e4 <isr+0x17a8>
		    elapsed_event) {
			_radio.conn_curr->role.master.connect_expire -= elapsed_event;
    74de:	1a5b      	subs	r3, r3, r1
    74e0:	7013      	strb	r3, [r2, #0]
    74e2:	e00b      	b.n	74fc <isr+0x17c0>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);

			connection_release(_radio.conn_curr);
    74e4:	25c8      	movs	r5, #200	; 0xc8
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
		if (_radio.conn_curr->role.master.connect_expire >
		    elapsed_event) {
			_radio.conn_curr->role.master.connect_expire -= elapsed_event;
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    74e6:	213e      	movs	r1, #62	; 0x3e
    74e8:	f7fd f85c 	bl	45a4 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    74ec:	006d      	lsls	r5, r5, #1
    74ee:	e043      	b.n	7578 <isr+0x183c>
	/* if anchor point not sync-ed, start supervision timeout, and break
	 * latency if any.
	 */
	else {
		/* Start supervision timeout, if not started already */
		if (_radio.conn_curr->supervision_expire == 0) {
    74f0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    74f2:	2b00      	cmp	r3, #0
    74f4:	d102      	bne.n	74fc <isr+0x17c0>
			_radio.conn_curr->supervision_expire =
    74f6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    74f8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    74fa:	e000      	b.n	74fe <isr+0x17c2>

		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
    74fc:	2300      	movs	r3, #0
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
    74fe:	001c      	movs	r4, r3
		}
	}

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
    7500:	27c8      	movs	r7, #200	; 0xc8
    7502:	4e59      	ldr	r6, [pc, #356]	; (7668 <isr+0x192c>)
    7504:	007f      	lsls	r7, r7, #1
    7506:	59f0      	ldr	r0, [r6, r7]
    7508:	0035      	movs	r5, r6
    750a:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    750c:	2a00      	cmp	r2, #0
    750e:	d024      	beq.n	755a <isr+0x181e>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    7510:	990a      	ldr	r1, [sp, #40]	; 0x28
    7512:	4291      	cmp	r1, r2
    7514:	d218      	bcs.n	7548 <isr+0x180c>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    7516:	1a52      	subs	r2, r2, r1
    7518:	b291      	uxth	r1, r2

			/* break latency */
			_radio.conn_curr->latency_event = 0;
    751a:	2200      	movs	r2, #0

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
			_radio.conn_curr->supervision_expire -= elapsed_event;
    751c:	85c1      	strh	r1, [r0, #46]	; 0x2e

			/* break latency */
			_radio.conn_curr->latency_event = 0;
    751e:	8542      	strh	r2, [r0, #42]	; 0x2a

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
				force = 1;
    7520:	3201      	adds	r2, #1
			_radio.conn_curr->latency_event = 0;

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
    7522:	2906      	cmp	r1, #6
    7524:	d91a      	bls.n	755c <isr+0x1820>
				force = 1;
			}
			/* use randomness to force slave role when anchor
			 * points are being missed.
			 */
			else if (_radio.role == ROLE_SLAVE) {
    7526:	7bf1      	ldrb	r1, [r6, #15]
    7528:	2903      	cmp	r1, #3
    752a:	d116      	bne.n	755a <isr+0x181e>
				if (latency_event != 0) {
    752c:	990c      	ldr	r1, [sp, #48]	; 0x30
    752e:	2900      	cmp	r1, #0
    7530:	d114      	bne.n	755c <isr+0x1820>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;
    7532:	6d06      	ldr	r6, [r0, #80]	; 0x50

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
    7534:	0871      	lsrs	r1, r6, #1
					if (force) {
    7536:	4216      	tst	r6, r2
    7538:	d101      	bne.n	753e <isr+0x1802>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
    753a:	6501      	str	r1, [r0, #80]	; 0x50
    753c:	e00d      	b.n	755a <isr+0x181e>
					if (force) {
						_radio.conn_curr->role.slave.force |=
    753e:	2680      	movs	r6, #128	; 0x80
    7540:	0636      	lsls	r6, r6, #24
    7542:	4331      	orrs	r1, r6
    7544:	6501      	str	r1, [r0, #80]	; 0x50
    7546:	e009      	b.n	755c <isr+0x1820>
							((u32_t)1 << 31);
					}
				}
			}
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    7548:	2108      	movs	r1, #8
    754a:	f7fd f82b 	bl	45a4 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    754e:	59f0      	ldr	r0, [r6, r7]
    7550:	f7fd f99c 	bl	488c <connection_release>
			_radio.conn_curr = NULL;
    7554:	2300      	movs	r3, #0
    7556:	51f3      	str	r3, [r6, r7]
    7558:	e06a      	b.n	7630 <isr+0x18f4>
				_radio.conn_curr->supervision_reload;
		}
	}

	/* check supervision timeout */
	force = 0;
    755a:	2200      	movs	r2, #0
			return;
		}
	}

	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
    755c:	8e41      	ldrh	r1, [r0, #50]	; 0x32
    755e:	2900      	cmp	r1, #0
    7560:	d010      	beq.n	7584 <isr+0x1848>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    7562:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    7564:	428e      	cmp	r6, r1
    7566:	d202      	bcs.n	756e <isr+0x1832>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    7568:	1b89      	subs	r1, r1, r6
    756a:	8641      	strh	r1, [r0, #50]	; 0x32
    756c:	e00a      	b.n	7584 <isr+0x1848>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    756e:	2122      	movs	r1, #34	; 0x22

			connection_release(_radio.conn_curr);
    7570:	24c8      	movs	r4, #200	; 0xc8
	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
			_radio.conn_curr->procedure_expire -= elapsed_event;
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    7572:	f7fd f817 	bl	45a4 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    7576:	0064      	lsls	r4, r4, #1
    7578:	5928      	ldr	r0, [r5, r4]
    757a:	f7fd f987 	bl	488c <connection_release>
			_radio.conn_curr = NULL;
    757e:	2300      	movs	r3, #0
    7580:	512b      	str	r3, [r5, r4]
    7582:	e055      	b.n	7630 <isr+0x18f4>
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    7584:	0001      	movs	r1, r0
    7586:	3159      	adds	r1, #89	; 0x59
    7588:	780e      	ldrb	r6, [r1, #0]
    758a:	3901      	subs	r1, #1
    758c:	7809      	ldrb	r1, [r1, #0]
    758e:	428e      	cmp	r6, r1
    7590:	d007      	beq.n	75a2 <isr+0x1866>
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
    7592:	0001      	movs	r1, r0
    7594:	315a      	adds	r1, #90	; 0x5a
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    7596:	7809      	ldrb	r1, [r1, #0]
    7598:	3901      	subs	r1, #1
    759a:	2901      	cmp	r1, #1
    759c:	d801      	bhi.n	75a2 <isr+0x1866>
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
    759e:	2100      	movs	r1, #0
    75a0:	8541      	strh	r1, [r0, #42]	; 0x2a
    75a2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	}

	/* check if latency needs update */
	lazy = 0;
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    75a4:	2a00      	cmp	r2, #0
    75a6:	d103      	bne.n	75b0 <isr+0x1874>
    75a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
	}

	/* check if latency needs update */
	lazy = 0;
    75aa:	0017      	movs	r7, r2
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    75ac:	42b1      	cmp	r1, r6
    75ae:	d001      	beq.n	75b4 <isr+0x1878>
		lazy = _radio.conn_curr->latency_event + 1;
    75b0:	3101      	adds	r1, #1
    75b2:	b28f      	uxth	r7, r1
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    75b4:	0021      	movs	r1, r4
    75b6:	4319      	orrs	r1, r3
    75b8:	4339      	orrs	r1, r7
    75ba:	b289      	uxth	r1, r1
    75bc:	2900      	cmp	r1, #0
    75be:	d101      	bne.n	75c4 <isr+0x1888>
	    (lazy != 0) || (force != 0)) {
    75c0:	2a00      	cmp	r2, #0
    75c2:	d035      	beq.n	7630 <isr+0x18f4>
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    75c4:	8c06      	ldrh	r6, [r0, #32]
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    75c6:	2000      	movs	r0, #0
    75c8:	4928      	ldr	r1, [pc, #160]	; (766c <isr+0x1930>)
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    75ca:	3607      	adds	r6, #7
    75cc:	b2f6      	uxtb	r6, r6
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    75ce:	9105      	str	r1, [sp, #20]
    75d0:	9204      	str	r2, [sp, #16]
    75d2:	9300      	str	r3, [sp, #0]
    75d4:	9606      	str	r6, [sp, #24]
    75d6:	0023      	movs	r3, r4
    75d8:	9703      	str	r7, [sp, #12]
    75da:	9002      	str	r0, [sp, #8]
    75dc:	9001      	str	r0, [sp, #4]
    75de:	0032      	movs	r2, r6
    75e0:	0001      	movs	r1, r0
    75e2:	f7fc f927 	bl	3834 <ticker_update>
				      RADIO_TICKER_USER_ID_WORKER,
				      ticker_id,
				      ticks_drift_plus, ticks_drift_minus, 0, 0,
				      lazy, force, ticker_update_slave_assert,
				      (void *)(u32_t)ticker_id);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    75e6:	2302      	movs	r3, #2
    75e8:	4398      	bics	r0, r3
    75ea:	d021      	beq.n	7630 <isr+0x18f4>
    75ec:	7bab      	ldrb	r3, [r5, #14]
    75ee:	429e      	cmp	r6, r3
    75f0:	d01e      	beq.n	7630 <isr+0x18f4>
    75f2:	e005      	b.n	7600 <isr+0x18c4>
		 * no active role at that instance in time.
		 * Just reset the state to none. The role has gracefully closed
		 * before this ISR run.
		 * The above applies to aborting a role event too.
		 */
		LL_ASSERT((_radio.state == STATE_STOP) ||
    75f4:	3b04      	subs	r3, #4
    75f6:	2b01      	cmp	r3, #1
    75f8:	d802      	bhi.n	7600 <isr+0x18c4>
			  (_radio.state == STATE_ABORT));

		_radio.state = STATE_NONE;
    75fa:	2300      	movs	r3, #0
    75fc:	7423      	strb	r3, [r4, #16]
    75fe:	e030      	b.n	7662 <isr+0x1926>
		 * using Radio Disable task.
		 */
		break;

	default:
		LL_ASSERT(0);
    7600:	b662      	cpsie	i
    7602:	2004      	movs	r0, #4
    7604:	df02      	svc	2
			err = isr_rx_scan(irkmatch_id, rssi_ready);
		} else {
			err = 1;
		}
		if (err) {
			_radio.state = STATE_CLOSE;
    7606:	2303      	movs	r3, #3
    7608:	4c17      	ldr	r4, [pc, #92]	; (7668 <isr+0x192c>)
    760a:	7423      	strb	r3, [r4, #16]
			radio_disable();
    760c:	f7fb f874 	bl	26f8 <radio_disable>
			/* switch scanner state to idle */
			_radio.scanner.state = 0;
    7610:	22ae      	movs	r2, #174	; 0xae
    7612:	2102      	movs	r1, #2
    7614:	0052      	lsls	r2, r2, #1
    7616:	5ca3      	ldrb	r3, [r4, r2]
    7618:	438b      	bics	r3, r1
    761a:	54a3      	strb	r3, [r4, r2]
    761c:	e021      	b.n	7662 <isr+0x1926>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
    761e:	2700      	movs	r7, #0
    7620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7622:	42bb      	cmp	r3, r7
    7624:	d000      	beq.n	7628 <isr+0x18ec>
    7626:	e635      	b.n	7294 <isr+0x1558>
    7628:	e01b      	b.n	7662 <isr+0x1926>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    762a:	2700      	movs	r7, #0
	u8_t crc_close = 0;
    762c:	2400      	movs	r4, #0
    762e:	e5d2      	b.n	71d6 <isr+0x149a>

	if (dont_close) {
		return;
	}

	_radio.role = ROLE_NONE;
    7630:	2400      	movs	r4, #0
    7632:	4d0d      	ldr	r5, [pc, #52]	; (7668 <isr+0x192c>)
    7634:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    7636:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    7638:	736c      	strb	r4, [r5, #13]

	radio_tmr_stop();
    763a:	f7fb f9b5 	bl	29a8 <radio_tmr_stop>
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    763e:	0022      	movs	r2, r4
    7640:	0021      	movs	r1, r4
    7642:	0020      	movs	r0, r4
    7644:	4b0a      	ldr	r3, [pc, #40]	; (7670 <isr+0x1934>)
    7646:	f7fa fd89 	bl	215c <mayfly_enqueue>
    764a:	1e04      	subs	r4, r0, #0
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
    764c:	d1d8      	bne.n	7600 <isr+0x18c4>

	radio_tmr_stop();

	event_inactive(0, 0, 0, NULL);

	clock_control_off(_radio.hf_clock, NULL);
    764e:	6828      	ldr	r0, [r5, #0]
    7650:	0021      	movs	r1, r4
    7652:	6843      	ldr	r3, [r0, #4]
    7654:	685b      	ldr	r3, [r3, #4]
    7656:	4798      	blx	r3

	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    7658:	2201      	movs	r2, #1
    765a:	0020      	movs	r0, r4
    765c:	0011      	movs	r1, r2
    765e:	f7fa fd5d 	bl	211c <mayfly_enable>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
    7662:	b019      	add	sp, #100	; 0x64
    7664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7666:	46c0      	nop			; (mov r8, r8)
    7668:	200005f4 	.word	0x200005f4
    766c:	00004c49 	.word	0x00004c49
    7670:	20000178 	.word	0x20000178

00007674 <event_master>:
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    7674:	b5f0      	push	{r4, r5, r6, r7, lr}
    7676:	001c      	movs	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    7678:	4b4e      	ldr	r3, [pc, #312]	; (77b4 <event_master+0x140>)
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    767a:	b085      	sub	sp, #20
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    767c:	7bdd      	ldrb	r5, [r3, #15]
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    767e:	0006      	movs	r6, r0
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    7680:	b2ed      	uxtb	r5, r5
    7682:	2d00      	cmp	r5, #0
    7684:	d000      	beq.n	7688 <event_master+0x14>
    7686:	e090      	b.n	77aa <event_master+0x136>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    7688:	7b1a      	ldrb	r2, [r3, #12]
    768a:	8c21      	ldrh	r1, [r4, #32]
    768c:	b2d2      	uxtb	r2, r2
    768e:	3107      	adds	r1, #7
    7690:	428a      	cmp	r2, r1
    7692:	d000      	beq.n	7696 <event_master+0x22>
    7694:	e089      	b.n	77aa <event_master+0x136>
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    7696:	2704      	movs	r7, #4
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    7698:	b2d2      	uxtb	r2, r2

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    769a:	73df      	strb	r7, [r3, #15]
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
    769c:	731d      	strb	r5, [r3, #12]
	_radio.ticker_id_event =
    769e:	735a      	strb	r2, [r3, #13]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    76a0:	22ca      	movs	r2, #202	; 0xca
    76a2:	0052      	lsls	r2, r2, #1
    76a4:	549d      	strb	r5, [r3, r2]
	_radio.crc_expire = 0;
    76a6:	2296      	movs	r2, #150	; 0x96
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
    76a8:	2002      	movs	r0, #2
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;
    76aa:	32ff      	adds	r2, #255	; 0xff
    76ac:	549d      	strb	r5, [r3, r2]

	_radio.conn_curr = conn;
    76ae:	3a05      	subs	r2, #5
    76b0:	509c      	str	r4, [r3, r2]
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
    76b2:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    76b4:	605e      	str	r6, [r3, #4]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    76b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	conn->latency_prepare = 0;
    76b8:	8525      	strh	r5, [r4, #40]	; 0x28
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    76ba:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    76bc:	f7fd f894 	bl	47e8 <packet_tx_enqueue>

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    76c0:	a903      	add	r1, sp, #12
    76c2:	0020      	movs	r0, r4
    76c4:	f7fc fbd2 	bl	3e6c <prepare_pdu_data_tx>

	pdu_data_tx->sn = conn->sn;
    76c8:	0020      	movs	r0, r4
    76ca:	2201      	movs	r2, #1
    76cc:	30a4      	adds	r0, #164	; 0xa4
    76ce:	7803      	ldrb	r3, [r0, #0]
    76d0:	9903      	ldr	r1, [sp, #12]
    76d2:	4013      	ands	r3, r2
    76d4:	00db      	lsls	r3, r3, #3
    76d6:	9301      	str	r3, [sp, #4]
    76d8:	780b      	ldrb	r3, [r1, #0]
    76da:	001a      	movs	r2, r3
    76dc:	2308      	movs	r3, #8
    76de:	439a      	bics	r2, r3
    76e0:	0013      	movs	r3, r2
    76e2:	9a01      	ldr	r2, [sp, #4]
    76e4:	4313      	orrs	r3, r2
	pdu_data_tx->nesn = conn->nesn;
    76e6:	2201      	movs	r2, #1
	packet_tx_enqueue(2);

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);

	pdu_data_tx->sn = conn->sn;
    76e8:	700b      	strb	r3, [r1, #0]
	pdu_data_tx->nesn = conn->nesn;
    76ea:	7803      	ldrb	r3, [r0, #0]

	connection_configure(conn);
    76ec:	0020      	movs	r0, r4

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);

	pdu_data_tx->sn = conn->sn;
	pdu_data_tx->nesn = conn->nesn;
    76ee:	085b      	lsrs	r3, r3, #1
    76f0:	4013      	ands	r3, r2
    76f2:	009a      	lsls	r2, r3, #2
    76f4:	780b      	ldrb	r3, [r1, #0]
    76f6:	43bb      	bics	r3, r7
    76f8:	0027      	movs	r7, r4
    76fa:	4313      	orrs	r3, r2
    76fc:	700b      	strb	r3, [r1, #0]

	connection_configure(conn);
    76fe:	f7fd fcb5 	bl	506c <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    7702:	2096      	movs	r0, #150	; 0x96
    7704:	f7fb f8e6 	bl	28d4 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_rx(conn->phy_rx);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_rx(0);
    7708:	0028      	movs	r0, r5
    770a:	f7fb f847 	bl	279c <radio_switch_complete_and_rx>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	tx_packet_set(conn, pdu_data_tx);
    770e:	9903      	ldr	r1, [sp, #12]
    7710:	0020      	movs	r0, r4
    7712:	f7fc ff00 	bl	4516 <tx_packet_set>

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    7716:	7f23      	ldrb	r3, [r4, #28]
    7718:	3717      	adds	r7, #23
    771a:	069d      	lsls	r5, r3, #26
    771c:	065b      	lsls	r3, r3, #25
    771e:	d508      	bpl.n	7732 <event_master+0xbe>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    7720:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    7722:	0eab      	lsrs	r3, r5, #26
    7724:	3801      	subs	r0, #1
    7726:	8be1      	ldrh	r1, [r4, #30]
    7728:	003a      	movs	r2, r7
    772a:	b280      	uxth	r0, r0
    772c:	f7fd fbe4 	bl	4ef8 <chan_sel_2>
    7730:	e01a      	b.n	7768 <event_master+0xf4>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    7732:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    7734:	7fa3      	ldrb	r3, [r4, #30]
    7736:	3001      	adds	r0, #1
    7738:	4358      	muls	r0, r3
    773a:	7fe3      	ldrb	r3, [r4, #31]
    773c:	2125      	movs	r1, #37	; 0x25
    773e:	18c0      	adds	r0, r0, r3
    7740:	f7f8 fe9e 	bl	480 <__aeabi_idivmod>
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7744:	2207      	movs	r2, #7
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    7746:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    7748:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    774a:	08c3      	lsrs	r3, r0, #3
    774c:	5cfb      	ldrb	r3, [r7, r3]
    774e:	4011      	ands	r1, r2
    7750:	410b      	asrs	r3, r1
    7752:	3a06      	subs	r2, #6
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    7754:	0ead      	lsrs	r5, r5, #26
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7756:	4213      	tst	r3, r2
    7758:	d106      	bne.n	7768 <event_master+0xf4>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    775a:	0029      	movs	r1, r5
    775c:	f7f8 fda6 	bl	2ac <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    7760:	0038      	movs	r0, r7
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    7762:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    7764:	f7fc f98d 	bl	3a82 <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    7768:	f7fc ffa0 	bl	46ac <chan_set>
	     (conn->supervision_expire <= 6)) ||
	    ((conn->role.master.connect_expire != 0) &&
	     (conn->role.master.connect_expire <= 6)))
#endif
	{
		radio_tmr_start(1, ticks_at_expire +
    776c:	0031      	movs	r1, r6
    776e:	4d11      	ldr	r5, [pc, #68]	; (77b4 <event_master+0x140>)
    7770:	3109      	adds	r1, #9
    7772:	68aa      	ldr	r2, [r5, #8]
    7774:	2001      	movs	r0, #1
    7776:	f7fb f8b5 	bl	28e4 <radio_tmr_start>
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
		radio_tmr_end_capture();
    777a:	f7fb f977 	bl	2a6c <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    777e:	8c21      	ldrh	r1, [r4, #32]
    7780:	0032      	movs	r2, r6
    7782:	3107      	adds	r1, #7
    7784:	b2c9      	uxtb	r1, r1
    7786:	0020      	movs	r0, r4
    7788:	f7fd fbf8 	bl	4f7c <preempt_calc>
#endif

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
    778c:	2800      	cmp	r0, #0
    778e:	d004      	beq.n	779a <event_master+0x126>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
				      conn->handle), ticks_at_expire)) {
		_radio.state = STATE_STOP;
    7790:	2304      	movs	r3, #4
    7792:	742b      	strb	r3, [r5, #16]
		radio_disable();
    7794:	f7fa ffb0 	bl	26f8 <radio_disable>
    7798:	e00a      	b.n	77b0 <event_master+0x13c>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    779a:	0003      	movs	r3, r0
    779c:	4a06      	ldr	r2, [pc, #24]	; (77b8 <event_master+0x144>)
    779e:	0001      	movs	r1, r0
    77a0:	f7fc f8f8 	bl	3994 <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    77a4:	2302      	movs	r3, #2
    77a6:	4398      	bics	r0, r3
    77a8:	d002      	beq.n	77b0 <event_master+0x13c>
    77aa:	b662      	cpsie	i
    77ac:	2004      	movs	r0, #4
    77ae:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_M(0);
}
    77b0:	b005      	add	sp, #20
    77b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77b4:	200005f4 	.word	0x200005f4
    77b8:	0000448d 	.word	0x0000448d

000077bc <radio_init>:
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
    77bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    77be:	b087      	sub	sp, #28
    77c0:	9201      	str	r2, [sp, #4]
    77c2:	aa0c      	add	r2, sp, #48	; 0x30
    77c4:	7815      	ldrb	r5, [r2, #0]
    77c6:	aa0d      	add	r2, sp, #52	; 0x34
    77c8:	8817      	ldrh	r7, [r2, #0]
    77ca:	aa0e      	add	r2, sp, #56	; 0x38
    77cc:	8812      	ldrh	r2, [r2, #0]
    77ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    77d0:	9205      	str	r2, [sp, #20]
    77d2:	aa10      	add	r2, sp, #64	; 0x40
    77d4:	8812      	ldrh	r2, [r2, #0]
    77d6:	9202      	str	r2, [sp, #8]
	u32_t retcode;
	u8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
    77d8:	4a38      	ldr	r2, [pc, #224]	; (78bc <radio_init+0x100>)
    77da:	6010      	str	r0, [r2, #0]

	/* initialise SCA */
	_radio.sca = sca;
    77dc:	20ce      	movs	r0, #206	; 0xce
    77de:	0040      	lsls	r0, r0, #1
    77e0:	5411      	strb	r1, [r2, r0]

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;
    77e2:	9902      	ldr	r1, [sp, #8]

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
    77e4:	4668      	mov	r0, sp

	/* initialise SCA */
	_radio.sca = sca;

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;
    77e6:	1861      	adds	r1, r4, r1
    77e8:	9103      	str	r1, [sp, #12]

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
    77ea:	21c6      	movs	r1, #198	; 0xc6
    77ec:	7900      	ldrb	r0, [r0, #4]
    77ee:	0049      	lsls	r1, r1, #1
    77f0:	5450      	strb	r0, [r2, r1]
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    77f2:	20fc      	movs	r0, #252	; 0xfc
	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
    77f4:	3908      	subs	r1, #8
    77f6:	5054      	str	r4, [r2, r1]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    77f8:	9901      	ldr	r1, [sp, #4]
    77fa:	4348      	muls	r0, r1
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
    77fc:	1cd9      	adds	r1, r3, #3
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
    77fe:	3304      	adds	r3, #4
    7800:	b2de      	uxtb	r6, r3
    7802:	23da      	movs	r3, #218	; 0xda
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7804:	1820      	adds	r0, r4, r0
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
    7806:	005b      	lsls	r3, r3, #1
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    7808:	1c6c      	adds	r4, r5, #1
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
    780a:	3502      	adds	r5, #2
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
    780c:	54d6      	strb	r6, [r2, r3]
	_radio.packet_tx_count = (tx_count_max + 1);
    780e:	b2ed      	uxtb	r5, r5
    7810:	3334      	adds	r3, #52	; 0x34
    7812:	54d5      	strb	r5, [r2, r3]
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    7814:	b2e4      	uxtb	r4, r4
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;
    7816:	3b20      	subs	r3, #32
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
    7818:	b2c9      	uxtb	r1, r1
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;
    781a:	54d1      	strb	r1, [r2, r3]
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    781c:	9404      	str	r4, [sp, #16]
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
    781e:	3b18      	subs	r3, #24
	mem_radio +=
    7820:	00b4      	lsls	r4, r6, #2
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
    7822:	50d0      	str	r0, [r2, r3]
	mem_radio +=
    7824:	1904      	adds	r4, r0, r4
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
    7826:	3330      	adds	r3, #48	; 0x30
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    7828:	00ed      	lsls	r5, r5, #3
	_radio.packet_rx = (void *)mem_radio;
	mem_radio +=
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
    782a:	50d4      	str	r4, [r2, r3]
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    782c:	1964      	adds	r4, r4, r5

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
    782e:	3304      	adds	r3, #4
    7830:	50d4      	str	r4, [r2, r3]
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((PDU_AC_SIZE_MAX + 1) <
    7832:	1cf8      	adds	r0, r7, #3
	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
    7834:	3b3c      	subs	r3, #60	; 0x3c
    7836:	52d7      	strh	r7, [r2, r3]
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    7838:	1964      	adds	r4, r4, r5
    783a:	3302      	adds	r3, #2

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((PDU_AC_SIZE_MAX + 1) <
    783c:	2828      	cmp	r0, #40	; 0x28
    783e:	d903      	bls.n	7848 <radio_init+0x8c>
	    (offsetof(struct pdu_data, payload) +
			_radio.packet_data_octets_max)) {
		_radio.packet_rx_data_pool_size =
    7840:	2003      	movs	r0, #3
    7842:	370e      	adds	r7, #14
    7844:	4387      	bics	r7, r0
    7846:	e000      	b.n	784a <radio_init+0x8e>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
    7848:	2730      	movs	r7, #48	; 0x30
    784a:	4379      	muls	r1, r7
    784c:	52d1      	strh	r1, [r2, r3]
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    784e:	23d6      	movs	r3, #214	; 0xd6
    7850:	2130      	movs	r1, #48	; 0x30
    7852:	4d1a      	ldr	r5, [pc, #104]	; (78bc <radio_init+0x100>)
    7854:	005b      	lsls	r3, r3, #1
    7856:	52e9      	strh	r1, [r5, r3]
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7858:	3b02      	subs	r3, #2
    785a:	5aef      	ldrh	r7, [r5, r3]
    785c:	0038      	movs	r0, r7
    785e:	f7f8 fc9f 	bl	1a0 <__aeabi_uidiv>
    7862:	23d7      	movs	r3, #215	; 0xd7
    7864:	005b      	lsls	r3, r3, #1
    7866:	54e8      	strb	r0, [r5, r3]
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
    7868:	3b0e      	subs	r3, #14
    786a:	50ec      	str	r4, [r5, r3]
	mem_radio += _radio.packet_rx_data_pool_size;
    786c:	19e4      	adds	r4, r4, r7

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
    786e:	3318      	adds	r3, #24
    7870:	50ec      	str	r4, [r5, r3]
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    7872:	9b01      	ldr	r3, [sp, #4]
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    7874:	9805      	ldr	r0, [sp, #20]
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    7876:	18f6      	adds	r6, r6, r3
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
    7878:	23e6      	movs	r3, #230	; 0xe6
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    787a:	00f6      	lsls	r6, r6, #3
    787c:	19a4      	adds	r4, r4, r6
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
    787e:	005b      	lsls	r3, r3, #1
    7880:	50ec      	str	r4, [r5, r3]
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    7882:	3bca      	subs	r3, #202	; 0xca
    7884:	3bff      	subs	r3, #255	; 0xff
    7886:	300a      	adds	r0, #10
    7888:	4398      	bics	r0, r3
    788a:	33da      	adds	r3, #218	; 0xda
    788c:	b280      	uxth	r0, r0
    788e:	33ff      	adds	r3, #255	; 0xff
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    7890:	3448      	adds	r4, #72	; 0x48

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    7892:	52e8      	strh	r0, [r5, r3]
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
		       offsetof(struct pdu_data, payload) +
		       packet_tx_data_size);

	/* initialise tx data pool memory */
	_radio.pkt_tx_data_pool = mem_radio;
    7894:	3b08      	subs	r3, #8
    7896:	50ec      	str	r4, [r5, r3]
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
    7898:	9b04      	ldr	r3, [sp, #16]
    789a:	4343      	muls	r3, r0
    789c:	18e4      	adds	r4, r4, r3
    789e:	9b03      	ldr	r3, [sp, #12]
    78a0:	1ae4      	subs	r4, r4, r3
	if (retcode) {
    78a2:	d002      	beq.n	78aa <radio_init+0xee>
		return (retcode + mem_size);
    78a4:	9b02      	ldr	r3, [sp, #8]
    78a6:	1918      	adds	r0, r3, r4
    78a8:	e006      	b.n	78b8 <radio_init+0xfc>
	 * This is a simple flow control to rx data only on one selected
	 * connection handle.
	 * TODO: replace this feature with host-to-controller flowcontrol
	 * implementation/design.
	 */
	_radio.fc_ena = 1;
    78aa:	23fb      	movs	r3, #251	; 0xfb
    78ac:	2201      	movs	r2, #1
    78ae:	005b      	lsls	r3, r3, #1
    78b0:	54ea      	strb	r2, [r5, r3]

	/* memory allocations */
	common_init();
    78b2:	f7fd fa91 	bl	4dd8 <common_init>
#if defined(RADIO_UNIT_TEST) && \
	defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
	chan_sel_2_ut();
#endif /* RADIO_UNIT_TEST && CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

	return retcode;
    78b6:	0020      	movs	r0, r4
}
    78b8:	b007      	add	sp, #28
    78ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78bc:	200005f4 	.word	0x200005f4

000078c0 <ll_reset>:

void ll_reset(void)
{
    78c0:	b570      	push	{r4, r5, r6, lr}
	u16_t conn_handle;

	/* disable advertiser events */
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    78c2:	2103      	movs	r1, #3
    78c4:	2005      	movs	r0, #5
    78c6:	f7fc f9d9 	bl	3c7c <role_disable>

	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    78ca:	26c6      	movs	r6, #198	; 0xc6

	/* disable advertiser events */
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);

	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    78cc:	2104      	movs	r1, #4
    78ce:	2006      	movs	r0, #6
    78d0:	f7fc f9d4 	bl	3c7c <role_disable>

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    78d4:	2500      	movs	r5, #0
    78d6:	0076      	lsls	r6, r6, #1
    78d8:	4c21      	ldr	r4, [pc, #132]	; (7960 <ll_reset+0xa0>)
    78da:	5da3      	ldrb	r3, [r4, r6]
    78dc:	42ab      	cmp	r3, r5
    78de:	d907      	bls.n	78f0 <ll_reset+0x30>
	     conn_handle++) {
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    78e0:	1de8      	adds	r0, r5, #7
    78e2:	b2c0      	uxtb	r0, r0
    78e4:	21ff      	movs	r1, #255	; 0xff
	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
	     conn_handle++) {
    78e6:	3501      	adds	r5, #1
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    78e8:	f7fc f9c8 	bl	3c7c <role_disable>
	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
	     conn_handle++) {
    78ec:	b2ad      	uxth	r5, r5
    78ee:	e7f3      	b.n	78d8 <ll_reset+0x18>
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.nirk = 0;
	_radio.advertiser.is_enabled = 0;
    78f0:	0022      	movs	r2, r4
    78f2:	2101      	movs	r1, #1
    78f4:	32a4      	adds	r2, #164	; 0xa4
    78f6:	7813      	ldrb	r3, [r2, #0]
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.nirk = 0;
    78f8:	2500      	movs	r5, #0
	_radio.advertiser.is_enabled = 0;
    78fa:	438b      	bics	r3, r1
    78fc:	7013      	strb	r3, [r2, #0]
	_radio.advertiser.conn = NULL;
    78fe:	0023      	movs	r3, r4
	_radio.scanner.is_enabled = 0;
    7900:	22ae      	movs	r2, #174	; 0xae
	}

	/* reset controller context members */
	_radio.nirk = 0;
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
    7902:	33fc      	adds	r3, #252	; 0xfc
	_radio.scanner.is_enabled = 0;
    7904:	0052      	lsls	r2, r2, #1
	}

	/* reset controller context members */
	_radio.nirk = 0;
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
    7906:	64dd      	str	r5, [r3, #76]	; 0x4c
	_radio.scanner.is_enabled = 0;
    7908:	5ca3      	ldrb	r3, [r4, r2]
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.nirk = 0;
    790a:	7465      	strb	r5, [r4, #17]
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
	_radio.scanner.is_enabled = 0;
    790c:	438b      	bics	r3, r1
    790e:	54a3      	strb	r3, [r4, r2]
	_radio.scanner.conn = NULL;
    7910:	23be      	movs	r3, #190	; 0xbe
    7912:	005b      	lsls	r3, r3, #1
    7914:	50e5      	str	r5, [r4, r3]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7916:	312f      	adds	r1, #47	; 0x2f
    7918:	3330      	adds	r3, #48	; 0x30
    791a:	52e1      	strh	r1, [r4, r3]
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    791c:	3b02      	subs	r3, #2
    791e:	5ae0      	ldrh	r0, [r4, r3]
    7920:	f7f8 fc3e 	bl	1a0 <__aeabi_uidiv>
    7924:	23d7      	movs	r3, #215	; 0xd7
    7926:	005b      	lsls	r3, r3, #1
    7928:	54e0      	strb	r0, [r4, r3]
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
    792a:	23b6      	movs	r3, #182	; 0xb6
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    792c:	22e4      	movs	r2, #228	; 0xe4
	_radio.scanner.is_enabled = 0;
	_radio.scanner.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
    792e:	33ff      	adds	r3, #255	; 0xff
    7930:	54e5      	strb	r5, [r4, r3]
	_radio.packet_rx_acquire = 0;
    7932:	3301      	adds	r3, #1
    7934:	54e5      	strb	r5, [r4, r3]
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    7936:	3b02      	subs	r3, #2
    7938:	5ce3      	ldrb	r3, [r4, r3]
    793a:	0052      	lsls	r2, r2, #1
    793c:	3b01      	subs	r3, #1
    793e:	54a3      	strb	r3, [r4, r2]
	_radio.packet_tx_first = 0;
    7940:	23ea      	movs	r3, #234	; 0xea
    7942:	33ff      	adds	r3, #255	; 0xff
    7944:	54e5      	strb	r5, [r4, r3]
	_radio.packet_tx_last = 0;
    7946:	3301      	adds	r3, #1
    7948:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_first = 0;
    794a:	23ec      	movs	r3, #236	; 0xec
    794c:	33ff      	adds	r3, #255	; 0xff
    794e:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_last = 0;

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
    7950:	0028      	movs	r0, r5
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
	_radio.packet_tx_first = 0;
	_radio.packet_tx_last = 0;
	_radio.packet_release_first = 0;
	_radio.packet_release_last = 0;
    7952:	3301      	adds	r3, #1
    7954:	54e5      	strb	r5, [r4, r3]

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
    7956:	f000 fce3 	bl	8320 <ll_filter_reset>
	/* memory allocations */
	common_init();
    795a:	f7fd fa3d 	bl	4dd8 <common_init>
}
    795e:	bd70      	pop	{r4, r5, r6, pc}
    7960:	200005f4 	.word	0x200005f4

00007964 <radio_adv_data_get>:
	_radio.ticks_active_to_start = ticks_active_to_start;
}

struct radio_adv_data *radio_adv_data_get(void)
{
	return &_radio.advertiser.adv_data;
    7964:	4801      	ldr	r0, [pc, #4]	; (796c <radio_adv_data_get+0x8>)
}
    7966:	30a6      	adds	r0, #166	; 0xa6
    7968:	4770      	bx	lr
    796a:	46c0      	nop			; (mov r8, r8)
    796c:	200005f4 	.word	0x200005f4

00007970 <radio_scan_data_get>:

struct radio_adv_data *radio_scan_data_get(void)
{
	return &_radio.advertiser.scan_data;
    7970:	4801      	ldr	r0, [pc, #4]	; (7978 <radio_scan_data_get+0x8>)
}
    7972:	30f6      	adds	r0, #246	; 0xf6
    7974:	4770      	bx	lr
    7976:	46c0      	nop			; (mov r8, r8)
    7978:	200005f4 	.word	0x200005f4

0000797c <radio_adv_is_enabled>:
	return status;
}

u32_t radio_adv_is_enabled(void)
{
	return _radio.advertiser.is_enabled;
    797c:	4b03      	ldr	r3, [pc, #12]	; (798c <radio_adv_is_enabled+0x10>)
    797e:	33a4      	adds	r3, #164	; 0xa4
    7980:	7818      	ldrb	r0, [r3, #0]
    7982:	07c0      	lsls	r0, r0, #31
    7984:	0fc0      	lsrs	r0, r0, #31
    7986:	b2c0      	uxtb	r0, r0
}
    7988:	4770      	bx	lr
    798a:	46c0      	nop			; (mov r8, r8)
    798c:	200005f4 	.word	0x200005f4

00007990 <radio_adv_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
    7990:	4b05      	ldr	r3, [pc, #20]	; (79a8 <radio_adv_filter_pol_get+0x18>)
		return _radio.advertiser.filter_policy;
	}

	return 0;
    7992:	2000      	movs	r0, #0
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
    7994:	001a      	movs	r2, r3
    7996:	32a4      	adds	r2, #164	; 0xa4
    7998:	7812      	ldrb	r2, [r2, #0]
    799a:	07d2      	lsls	r2, r2, #31
    799c:	d502      	bpl.n	79a4 <radio_adv_filter_pol_get+0x14>
		return _radio.advertiser.filter_policy;
    799e:	33a5      	adds	r3, #165	; 0xa5
    79a0:	7818      	ldrb	r0, [r3, #0]
    79a2:	0980      	lsrs	r0, r0, #6
	}

	return 0;
}
    79a4:	4770      	bx	lr
    79a6:	46c0      	nop			; (mov r8, r8)
    79a8:	200005f4 	.word	0x200005f4

000079ac <radio_scan_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
    79ac:	22ae      	movs	r2, #174	; 0xae
    79ae:	4b06      	ldr	r3, [pc, #24]	; (79c8 <radio_scan_filter_pol_get+0x1c>)
    79b0:	0052      	lsls	r2, r2, #1
    79b2:	5c9a      	ldrb	r2, [r3, r2]
		return _radio.scanner.filter_policy;
	}

	return 0;
    79b4:	2000      	movs	r0, #0
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
    79b6:	07d2      	lsls	r2, r2, #31
    79b8:	d504      	bpl.n	79c4 <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
    79ba:	225e      	movs	r2, #94	; 0x5e
    79bc:	32ff      	adds	r2, #255	; 0xff
    79be:	5c98      	ldrb	r0, [r3, r2]
    79c0:	0680      	lsls	r0, r0, #26
    79c2:	0f80      	lsrs	r0, r0, #30
	}

	return 0;
}
    79c4:	4770      	bx	lr
    79c6:	46c0      	nop			; (mov r8, r8)
    79c8:	200005f4 	.word	0x200005f4

000079cc <ll_version_ind_send>:

	return 0;
}

u32_t ll_version_ind_send(u16_t handle)
{
    79cc:	b510      	push	{r4, lr}
	struct connection *conn;

	conn = connection_get(handle);
    79ce:	f7fc f93d 	bl	3c4c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
    79d2:	2201      	movs	r2, #1
u32_t ll_version_ind_send(u16_t handle)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    79d4:	2800      	cmp	r0, #0
    79d6:	d00d      	beq.n	79f4 <ll_version_ind_send+0x28>
    79d8:	0001      	movs	r1, r0
    79da:	0003      	movs	r3, r0
    79dc:	3158      	adds	r1, #88	; 0x58
    79de:	3359      	adds	r3, #89	; 0x59
    79e0:	780c      	ldrb	r4, [r1, #0]
    79e2:	781b      	ldrb	r3, [r3, #0]
    79e4:	42a3      	cmp	r3, r4
    79e6:	d105      	bne.n	79f4 <ll_version_ind_send+0x28>
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    79e8:	3203      	adds	r2, #3
    79ea:	305a      	adds	r0, #90	; 0x5a
    79ec:	7002      	strb	r2, [r0, #0]
	conn->llcp_req++;

	return 0;
    79ee:	2200      	movs	r2, #0
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
	conn->llcp_req++;
    79f0:	3301      	adds	r3, #1
    79f2:	700b      	strb	r3, [r1, #0]

	return 0;
}
    79f4:	0010      	movs	r0, r2
    79f6:	bd10      	pop	{r4, pc}

000079f8 <ll_terminate_ind_send>:

u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
    79f8:	b570      	push	{r4, r5, r6, lr}
    79fa:	000c      	movs	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
    79fc:	f7fc f926 	bl	3c4c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
    7a00:	2201      	movs	r2, #1
u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
    7a02:	2800      	cmp	r0, #0
    7a04:	d00c      	beq.n	7a20 <ll_terminate_ind_send+0x28>
    7a06:	0003      	movs	r3, r0
    7a08:	0001      	movs	r1, r0
    7a0a:	3395      	adds	r3, #149	; 0x95
    7a0c:	3194      	adds	r1, #148	; 0x94
    7a0e:	781d      	ldrb	r5, [r3, #0]
    7a10:	780b      	ldrb	r3, [r1, #0]
    7a12:	42ab      	cmp	r3, r5
    7a14:	d104      	bne.n	7a20 <ll_terminate_ind_send+0x28>
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;

	conn->llcp_terminate.req++;
    7a16:	189b      	adds	r3, r3, r2

	return 0;
    7a18:	2200      	movs	r2, #0
	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;
    7a1a:	3096      	adds	r0, #150	; 0x96
    7a1c:	7004      	strb	r4, [r0, #0]

	conn->llcp_terminate.req++;
    7a1e:	700b      	strb	r3, [r1, #0]

	return 0;
}
    7a20:	0010      	movs	r0, r2
    7a22:	bd70      	pop	{r4, r5, r6, pc}

00007a24 <radio_rx_get>:

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
    7a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a26:	0005      	movs	r5, r0
    7a28:	0008      	movs	r0, r1
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    7a2a:	21e2      	movs	r1, #226	; 0xe2
    7a2c:	4b1b      	ldr	r3, [pc, #108]	; (7a9c <radio_rx_get+0x78>)
    7a2e:	22e0      	movs	r2, #224	; 0xe0
    7a30:	0049      	lsls	r1, r1, #1
    7a32:	585c      	ldr	r4, [r3, r1]
    7a34:	0019      	movs	r1, r3
    7a36:	0052      	lsls	r2, r2, #1
    7a38:	589a      	ldr	r2, [r3, r2]
    7a3a:	31ec      	adds	r1, #236	; 0xec

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
    7a3c:	b085      	sub	sp, #20
    7a3e:	001e      	movs	r6, r3
    7a40:	31ff      	adds	r1, #255	; 0xff
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    7a42:	42a2      	cmp	r2, r4
    7a44:	d01d      	beq.n	7a82 <radio_rx_get+0x5e>
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
    7a46:	6853      	ldr	r3, [r2, #4]

		cmplt = tx_cmplt_get(handle,
    7a48:	781a      	ldrb	r2, [r3, #0]

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
    7a4a:	9301      	str	r3, [sp, #4]

		cmplt = tx_cmplt_get(handle,
    7a4c:	f7fc f8ae 	bl	3bac <tx_cmplt_get>
    7a50:	1e04      	subs	r4, r0, #0
				&_radio.packet_release_first,
				_radio_pdu_node_rx->hdr.onion.
				packet_release_last);
		if (!cmplt) {
    7a52:	d11d      	bne.n	7a90 <radio_rx_get+0x6c>
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
    7a54:	23ec      	movs	r3, #236	; 0xec
			cmplt_curr = 0;
    7a56:	0007      	movs	r7, r0
				packet_release_last);
		if (!cmplt) {
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
    7a58:	33ff      	adds	r3, #255	; 0xff
    7a5a:	5cf3      	ldrb	r3, [r6, r3]
    7a5c:	aa02      	add	r2, sp, #8
    7a5e:	7153      	strb	r3, [r2, #5]
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
    7a60:	23f6      	movs	r3, #246	; 0xf6
    7a62:	005b      	lsls	r3, r3, #1
    7a64:	5cf2      	ldrb	r2, [r6, r3]
    7a66:	ab02      	add	r3, sp, #8
    7a68:	b2d2      	uxtb	r2, r2
    7a6a:	1d59      	adds	r1, r3, #5
    7a6c:	1d98      	adds	r0, r3, #6
    7a6e:	f7fc f89d 	bl	3bac <tx_cmplt_get>
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
				 (cmplt_prev != cmplt_curr));
    7a72:	2f00      	cmp	r7, #0
    7a74:	d001      	beq.n	7a7a <radio_rx_get+0x56>

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
    7a76:	0007      	movs	r7, r0
    7a78:	e7f2      	b.n	7a60 <radio_rx_get+0x3c>
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
    7a7a:	2800      	cmp	r0, #0
    7a7c:	d1fb      	bne.n	7a76 <radio_rx_get+0x52>
				 (cmplt_prev != cmplt_curr));

			*radio_pdu_node_rx = _radio_pdu_node_rx;
    7a7e:	9b01      	ldr	r3, [sp, #4]
    7a80:	e007      	b.n	7a92 <radio_rx_get+0x6e>
		} else {
			*radio_pdu_node_rx = NULL;
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    7a82:	22f6      	movs	r2, #246	; 0xf6
    7a84:	0052      	lsls	r2, r2, #1
    7a86:	5c9a      	ldrb	r2, [r3, r2]
    7a88:	b2d2      	uxtb	r2, r2
    7a8a:	f7fc f88f 	bl	3bac <tx_cmplt_get>
    7a8e:	0004      	movs	r4, r0
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
    7a90:	2300      	movs	r3, #0
	}

	return cmplt;
}
    7a92:	0020      	movs	r0, r4
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
    7a94:	602b      	str	r3, [r5, #0]
	}

	return cmplt;
}
    7a96:	b005      	add	sp, #20
    7a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a9a:	46c0      	nop			; (mov r8, r8)
    7a9c:	200005f4 	.word	0x200005f4

00007aa0 <radio_rx_mem_release>:
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
    7aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7aa2:	2680      	movs	r6, #128	; 0x80
    7aa4:	0005      	movs	r5, r0
	struct radio_pdu_node_rx *_radio_pdu_node_rx;
	struct connection *conn;

	_radio_pdu_node_rx = *radio_pdu_node_rx;
    7aa6:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
    7aa8:	2800      	cmp	r0, #0
    7aaa:	d020      	beq.n	7aee <radio_rx_mem_release+0x4e>
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;

		switch (_radio_pdu_node_rx_free->hdr.type) {
    7aac:	7903      	ldrb	r3, [r0, #4]
	_radio_pdu_node_rx = *radio_pdu_node_rx;
	while (_radio_pdu_node_rx) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
    7aae:	6807      	ldr	r7, [r0, #0]
    7ab0:	2b0a      	cmp	r3, #10
    7ab2:	d819      	bhi.n	7ae8 <radio_rx_mem_release+0x48>
    7ab4:	2201      	movs	r2, #1
    7ab6:	409a      	lsls	r2, r3
    7ab8:	0013      	movs	r3, r2
    7aba:	4a0f      	ldr	r2, [pc, #60]	; (7af8 <radio_rx_mem_release+0x58>)
    7abc:	4c0f      	ldr	r4, [pc, #60]	; (7afc <radio_rx_mem_release+0x5c>)
    7abe:	4213      	tst	r3, r2
    7ac0:	d10b      	bne.n	7ada <radio_rx_mem_release+0x3a>
    7ac2:	4233      	tst	r3, r6
    7ac4:	d010      	beq.n	7ae8 <radio_rx_mem_release+0x48>
			mem_release(_radio_pdu_node_rx_free,
				    &_radio.pkt_rx_data_free);
			break;

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    7ac6:	23c2      	movs	r3, #194	; 0xc2
    7ac8:	005b      	lsls	r3, r3, #1
    7aca:	88c2      	ldrh	r2, [r0, #6]
    7acc:	21fc      	movs	r1, #252	; 0xfc
    7ace:	58e0      	ldr	r0, [r4, r3]
    7ad0:	f7fa fc7b 	bl	23ca <mem_get>
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
    7ad4:	0021      	movs	r1, r4
    7ad6:	3189      	adds	r1, #137	; 0x89
    7ad8:	e001      	b.n	7ade <radio_rx_mem_release+0x3e>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
		case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

			mem_release(_radio_pdu_node_rx_free,
    7ada:	0021      	movs	r1, r4
    7adc:	31a5      	adds	r1, #165	; 0xa5

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
    7ade:	31ff      	adds	r1, #255	; 0xff
    7ae0:	f7fa fc5d 	bl	239e <mem_release>
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
    7ae4:	0038      	movs	r0, r7
    7ae6:	e7df      	b.n	7aa8 <radio_rx_mem_release+0x8>

			mem_release(conn, &_radio.conn_free);
			break;

		default:
			LL_ASSERT(0);
    7ae8:	b662      	cpsie	i
    7aea:	2004      	movs	r0, #4
    7aec:	df02      	svc	2
			break;
		}
	}

	*radio_pdu_node_rx = _radio_pdu_node_rx;
    7aee:	6028      	str	r0, [r5, #0]

	packet_rx_allocate(0xff);
    7af0:	f7fd f92c 	bl	4d4c <packet_rx_allocate.constprop.32>
}
    7af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7af6:	46c0      	nop			; (mov r8, r8)
    7af8:	0000077e 	.word	0x0000077e
    7afc:	200005f4 	.word	0x200005f4

00007b00 <do_radio_rx_fc_set>:
		_radio.fc_req = req;
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
    7b00:	b530      	push	{r4, r5, lr}
    7b02:	4b19      	ldr	r3, [pc, #100]	; (7b68 <do_radio_rx_fc_set+0x68>)
    7b04:	0004      	movs	r4, r0
	if (req == ack) {
    7b06:	4291      	cmp	r1, r2
    7b08:	d11f      	bne.n	7b4a <do_radio_rx_fc_set+0x4a>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    7b0a:	22e2      	movs	r2, #226	; 0xe2
    7b0c:	20e0      	movs	r0, #224	; 0xe0
    7b0e:	0052      	lsls	r2, r2, #1
    7b10:	0040      	lsls	r0, r0, #1
    7b12:	581d      	ldr	r5, [r3, r0]
    7b14:	589a      	ldr	r2, [r3, r2]
				_radio.fc_ack = ack;

				return 1;
			}
		} else {
			return 1;
    7b16:	38c0      	subs	r0, #192	; 0xc0
    7b18:	38ff      	subs	r0, #255	; 0xff
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    7b1a:	4295      	cmp	r5, r2
    7b1c:	d123      	bne.n	7b66 <do_radio_rx_fc_set+0x66>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    7b1e:	1e0a      	subs	r2, r1, #0
    7b20:	d100      	bne.n	7b24 <do_radio_rx_fc_set+0x24>
				ack1 = TRIPLE_BUFFER_SIZE;
    7b22:	2203      	movs	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    7b24:	3a01      	subs	r2, #1
    7b26:	b2d2      	uxtb	r2, r2
    7b28:	0010      	movs	r0, r2
    7b2a:	30f4      	adds	r0, #244	; 0xf4
    7b2c:	0040      	lsls	r0, r0, #1
    7b2e:	1818      	adds	r0, r3, r0
    7b30:	80c4      	strh	r4, [r0, #6]
			_radio.fc_ack = ack1;
    7b32:	24f6      	movs	r4, #246	; 0xf6
    7b34:	34ff      	adds	r4, #255	; 0xff
    7b36:	551a      	strb	r2, [r3, r4]

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    7b38:	22fa      	movs	r2, #250	; 0xfa
    7b3a:	0052      	lsls	r2, r2, #1
    7b3c:	5c9a      	ldrb	r2, [r3, r2]
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
    7b3e:	2000      	movs	r0, #0
			}
			_radio.fc_handle[--ack1] = handle;
			_radio.fc_ack = ack1;

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    7b40:	4291      	cmp	r1, r2
    7b42:	d010      	beq.n	7b66 <do_radio_rx_fc_set+0x66>
				_radio.fc_ack = ack;
    7b44:	5519      	strb	r1, [r3, r4]

				return 1;
    7b46:	3001      	adds	r0, #1
    7b48:	e00d      	b.n	7b66 <do_radio_rx_fc_set+0x66>
			}
		} else {
			return 1;
		}
	} else if (((req == 0) &&
    7b4a:	2900      	cmp	r1, #0
    7b4c:	d103      	bne.n	7b56 <do_radio_rx_fc_set+0x56>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
    7b4e:	22f9      	movs	r2, #249	; 0xf9
    7b50:	0052      	lsls	r2, r2, #1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
    7b52:	5a9b      	ldrh	r3, [r3, r2]
    7b54:	e003      	b.n	7b5e <do_radio_rx_fc_set+0x5e>
		} else {
			return 1;
		}
	} else if (((req == 0) &&
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    7b56:	31f3      	adds	r1, #243	; 0xf3
    7b58:	0049      	lsls	r1, r1, #1
    7b5a:	1859      	adds	r1, r3, r1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
    7b5c:	88cb      	ldrh	r3, [r1, #6]
    7b5e:	1b18      	subs	r0, r3, r4
    7b60:	1e43      	subs	r3, r0, #1
    7b62:	4198      	sbcs	r0, r3
    7b64:	b2c0      	uxtb	r0, r0
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
}
    7b66:	bd30      	pop	{r4, r5, pc}
    7b68:	200005f4 	.word	0x200005f4

00007b6c <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
    7b6c:	22fb      	movs	r2, #251	; 0xfb

	return 0;
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    7b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.fc_ena) {
    7b70:	4b16      	ldr	r3, [pc, #88]	; (7bcc <radio_rx_fc_set+0x60>)
    7b72:	0052      	lsls	r2, r2, #1
    7b74:	5c9a      	ldrb	r2, [r3, r2]
    7b76:	2a00      	cmp	r2, #0
    7b78:	d101      	bne.n	7b7e <radio_rx_fc_set+0x12>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    7b7a:	2000      	movs	r0, #0
    7b7c:	e024      	b.n	7bc8 <radio_rx_fc_set+0x5c>
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
    7b7e:	22fa      	movs	r2, #250	; 0xfa
		u8_t ack = _radio.fc_ack;
    7b80:	25f6      	movs	r5, #246	; 0xf6
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
    7b82:	0052      	lsls	r2, r2, #1
    7b84:	5c9c      	ldrb	r4, [r3, r2]
		u8_t ack = _radio.fc_ack;
    7b86:	35ff      	adds	r5, #255	; 0xff
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
    7b88:	b2e4      	uxtb	r4, r4
		u8_t ack = _radio.fc_ack;
    7b8a:	5d5a      	ldrb	r2, [r3, r5]

		if (fc) {
    7b8c:	2900      	cmp	r1, #0
    7b8e:	d006      	beq.n	7b9e <radio_rx_fc_set+0x32>
			if (handle != 0xffff) {
    7b90:	4b0f      	ldr	r3, [pc, #60]	; (7bd0 <radio_rx_fc_set+0x64>)
    7b92:	4298      	cmp	r0, r3
    7b94:	d0f1      	beq.n	7b7a <radio_rx_fc_set+0xe>
				return do_radio_rx_fc_set(handle, req, ack);
    7b96:	0021      	movs	r1, r4
    7b98:	f7ff ffb2 	bl	7b00 <do_radio_rx_fc_set>
    7b9c:	e014      	b.n	7bc8 <radio_rx_fc_set+0x5c>
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7b9e:	20e0      	movs	r0, #224	; 0xe0
    7ba0:	27e2      	movs	r7, #226	; 0xe2
    7ba2:	0040      	lsls	r0, r0, #1
    7ba4:	007f      	lsls	r7, r7, #1
    7ba6:	5818      	ldr	r0, [r3, r0]
    7ba8:	59de      	ldr	r6, [r3, r7]
    7baa:	42b0      	cmp	r0, r6
    7bac:	d1e5      	bne.n	7b7a <radio_rx_fc_set+0xe>
    7bae:	4294      	cmp	r4, r2
    7bb0:	d0e3      	beq.n	7b7a <radio_rx_fc_set+0xe>
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7bb2:	59df      	ldr	r7, [r3, r7]
				return do_radio_rx_fc_set(handle, req, ack);
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;
    7bb4:	555c      	strb	r4, [r3, r5]

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7bb6:	42b8      	cmp	r0, r7
    7bb8:	d0df      	beq.n	7b7a <radio_rx_fc_set+0xe>
			    (req == _radio.fc_req)) {
    7bba:	20fa      	movs	r0, #250	; 0xfa
    7bbc:	0040      	lsls	r0, r0, #1
    7bbe:	5c18      	ldrb	r0, [r3, r0]
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7bc0:	4284      	cmp	r4, r0
    7bc2:	d1da      	bne.n	7b7a <radio_rx_fc_set+0xe>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    7bc4:	0008      	movs	r0, r1
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
			    (req == _radio.fc_req)) {
				_radio.fc_ack = ack;
    7bc6:	555a      	strb	r2, [r3, r5]
			}
		}
	}

	return 0;
}
    7bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bca:	46c0      	nop			; (mov r8, r8)
    7bcc:	200005f4 	.word	0x200005f4
    7bd0:	0000ffff 	.word	0x0000ffff

00007bd4 <ll_adv_scan_state_cb>:
	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
    7bd4:	4770      	bx	lr
	...

00007bd8 <radio_adv_enable>:
u32_t radio_adv_enable(u8_t phy_p, u16_t interval, u8_t chl_map,
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
    7bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bda:	b093      	sub	sp, #76	; 0x4c
    7bdc:	930f      	str	r3, [sp, #60]	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    7bde:	2302      	movs	r3, #2
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    7be0:	4d9a      	ldr	r5, [pc, #616]	; (7e4c <radio_adv_enable+0x274>)
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    7be2:	9311      	str	r3, [sp, #68]	; 0x44
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    7be4:	002b      	movs	r3, r5
    7be6:	2601      	movs	r6, #1
    7be8:	33a4      	adds	r3, #164	; 0xa4
u32_t radio_adv_enable(u8_t phy_p, u16_t interval, u8_t chl_map,
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
    7bea:	920e      	str	r2, [sp, #56]	; 0x38
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    7bec:	781a      	ldrb	r2, [r3, #0]
u32_t radio_adv_enable(u8_t phy_p, u16_t interval, u8_t chl_map,
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
    7bee:	900d      	str	r0, [sp, #52]	; 0x34
    7bf0:	910a      	str	r1, [sp, #40]	; 0x28
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    7bf2:	4032      	ands	r2, r6
    7bf4:	d000      	beq.n	7bf8 <radio_adv_enable+0x20>
    7bf6:	e124      	b.n	7e42 <radio_adv_enable+0x26a>
		return 1;
	}

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
    7bf8:	002b      	movs	r3, r5
    7bfa:	33f5      	adds	r3, #245	; 0xf5

	if (_radio.advertiser.is_enabled) {
		return 1;
	}

	pdu_adv = (struct pdu_adv *)
    7bfc:	7819      	ldrb	r1, [r3, #0]
    7bfe:	2327      	movs	r3, #39	; 0x27
    7c00:	434b      	muls	r3, r1
    7c02:	33a0      	adds	r3, #160	; 0xa0
    7c04:	18eb      	adds	r3, r5, r3
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7c06:	7999      	ldrb	r1, [r3, #6]

	if (_radio.advertiser.is_enabled) {
		return 1;
	}

	pdu_adv = (struct pdu_adv *)
    7c08:	930c      	str	r3, [sp, #48]	; 0x30
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7c0a:	230f      	movs	r3, #15
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
	} else {
		conn = NULL;
    7c0c:	0017      	movs	r7, r2
	}

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    7c0e:	400b      	ands	r3, r1
    7c10:	2b01      	cmp	r3, #1
    7c12:	d85e      	bhi.n	7cd2 <radio_adv_enable+0xfa>
	    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND)) {
		void *link;

		if (_radio.advertiser.conn) {
    7c14:	4b8e      	ldr	r3, [pc, #568]	; (7e50 <radio_adv_enable+0x278>)
    7c16:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    7c18:	2c00      	cmp	r4, #0
    7c1a:	d000      	beq.n	7c1e <radio_adv_enable+0x46>
    7c1c:	e111      	b.n	7e42 <radio_adv_enable+0x26a>
			return 1;
		}

		link = mem_acquire(&_radio.link_rx_free);
    7c1e:	488d      	ldr	r0, [pc, #564]	; (7e54 <radio_adv_enable+0x27c>)
    7c20:	f7fa fba4 	bl	236c <mem_acquire>
    7c24:	900b      	str	r0, [sp, #44]	; 0x2c
		if (!link) {
    7c26:	2800      	cmp	r0, #0
    7c28:	d100      	bne.n	7c2c <radio_adv_enable+0x54>
    7c2a:	e10a      	b.n	7e42 <radio_adv_enable+0x26a>
			return 1;
		}

		conn = mem_acquire(&_radio.conn_free);
    7c2c:	0028      	movs	r0, r5
    7c2e:	3089      	adds	r0, #137	; 0x89
    7c30:	30ff      	adds	r0, #255	; 0xff
    7c32:	f7fa fb9b 	bl	236c <mem_acquire>
    7c36:	1e07      	subs	r7, r0, #0
		if (!conn) {
    7c38:	d105      	bne.n	7c46 <radio_adv_enable+0x6e>
			mem_release(link, &_radio.link_rx_free);
    7c3a:	4986      	ldr	r1, [pc, #536]	; (7e54 <radio_adv_enable+0x27c>)
    7c3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7c3e:	f7fa fbae 	bl	239e <mem_release>

			return 1;
    7c42:	0035      	movs	r5, r6
    7c44:	e0fe      	b.n	7e44 <radio_adv_enable+0x26c>
		}

		conn->handle = 0xFFFF;
    7c46:	2301      	movs	r3, #1
    7c48:	425b      	negs	r3, r3
    7c4a:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    7c4c:	0003      	movs	r3, r0
    7c4e:	4a82      	ldr	r2, [pc, #520]	; (7e58 <radio_adv_enable+0x280>)
		conn->data_chan_sel = 0;
    7c50:	2140      	movs	r1, #64	; 0x40

			return 1;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
    7c52:	3388      	adds	r3, #136	; 0x88
    7c54:	601a      	str	r2, [r3, #0]
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
    7c56:	0002      	movs	r2, r0
		conn->role.slave.latency_cancel = 0;
    7c58:	2510      	movs	r5, #16
			return 1;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
    7c5a:	7f03      	ldrb	r3, [r0, #28]
		conn->data_chan_use = 0;
    7c5c:	77c4      	strb	r4, [r0, #31]
			return 1;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
    7c5e:	438b      	bics	r3, r1
    7c60:	7703      	strb	r3, [r0, #28]
		conn->data_chan_use = 0;
		conn->event_counter = 0;
    7c62:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
    7c64:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
    7c66:	8544      	strh	r4, [r0, #42]	; 0x2a
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
    7c68:	3234      	adds	r2, #52	; 0x34
    7c6a:	7813      	ldrb	r3, [r2, #0]
		conn->role.slave.latency_cancel = 0;
    7c6c:	4333      	orrs	r3, r6
    7c6e:	43ab      	bics	r3, r5
    7c70:	7013      	strb	r3, [r2, #0]
		conn->role.slave.window_widening_prepare_us = 0;
		conn->role.slave.window_widening_event_us = 0;
		conn->role.slave.ticks_to_offset = 0;
		conn->supervision_expire = 6;
    7c72:	2306      	movs	r3, #6
    7c74:	85c3      	strh	r3, [r0, #46]	; 0x2e
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
    7c76:	0003      	movs	r3, r0
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
    7c78:	6404      	str	r4, [r0, #64]	; 0x40
		conn->role.slave.window_widening_event_us = 0;
    7c7a:	6444      	str	r4, [r0, #68]	; 0x44
		conn->role.slave.ticks_to_offset = 0;
    7c7c:	6544      	str	r4, [r0, #84]	; 0x54
		conn->supervision_expire = 6;
		conn->procedure_expire = 0;
    7c7e:	8644      	strh	r4, [r0, #50]	; 0x32
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
    7c80:	2002      	movs	r0, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
    7c82:	3358      	adds	r3, #88	; 0x58
    7c84:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack = 0;
    7c86:	705c      	strb	r4, [r3, #1]
		conn->llcp_version.tx = 0;
    7c88:	3258      	adds	r2, #88	; 0x58
    7c8a:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_version.rx = 0;
    7c8c:	43b3      	bics	r3, r6
    7c8e:	4383      	bics	r3, r0
    7c90:	7013      	strb	r3, [r2, #0]
		conn->llcp_terminate.req = 0;
    7c92:	003b      	movs	r3, r7
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    7c94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
		conn->llcp_terminate.req = 0;
    7c96:	3394      	adds	r3, #148	; 0x94
    7c98:	701c      	strb	r4, [r3, #0]
		conn->llcp_terminate.ack = 0;
    7c9a:	705c      	strb	r4, [r3, #1]
		conn->llcp_terminate.reason_peer = 0;
    7c9c:	70dc      	strb	r4, [r3, #3]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    7c9e:	3304      	adds	r3, #4
    7ca0:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
		conn->llcp_phy.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
    7ca2:	003a      	movs	r2, r7
    7ca4:	32a4      	adds	r2, #164	; 0xa4
    7ca6:	7813      	ldrb	r3, [r2, #0]
		conn->nesn = 0;
    7ca8:	43b3      	bics	r3, r6
		conn->pause_rx = 0;
    7caa:	4383      	bics	r3, r0
		conn->pause_tx = 0;
		conn->enc_rx = 0;
    7cac:	30f1      	adds	r0, #241	; 0xf1
    7cae:	4003      	ands	r3, r0
		conn->enc_tx = 0;
    7cb0:	43ab      	bics	r3, r5
		conn->refresh = 0;
    7cb2:	38d3      	subs	r0, #211	; 0xd3
    7cb4:	4383      	bics	r3, r0
		conn->empty = 0;
    7cb6:	438b      	bics	r3, r1
    7cb8:	313f      	adds	r1, #63	; 0x3f
    7cba:	400b      	ands	r3, r1
    7cbc:	7013      	strb	r3, [r2, #0]
		conn->pkt_tx_head = NULL;
    7cbe:	003b      	movs	r3, r7
    7cc0:	33e8      	adds	r3, #232	; 0xe8
    7cc2:	601c      	str	r4, [r3, #0]
		conn->pkt_tx_ctrl = NULL;
    7cc4:	605c      	str	r4, [r3, #4]
		conn->pkt_tx_data = NULL;
    7cc6:	609c      	str	r4, [r3, #8]
		conn->pkt_tx_last = NULL;
    7cc8:	60dc      	str	r4, [r3, #12]
		conn->packet_tx_head_len = 0;
    7cca:	741c      	strb	r4, [r3, #16]
		conn->packet_tx_head_offset = 0;
    7ccc:	745c      	strb	r4, [r3, #17]
		conn->rssi_latest = 0x7F;
		conn->rssi_reported = 0x7F;
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
    7cce:	4b60      	ldr	r3, [pc, #384]	; (7e50 <radio_adv_enable+0x278>)
    7cd0:	64df      	str	r7, [r3, #76]	; 0x4c
	} else {
		conn = NULL;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
    7cd2:	4c5e      	ldr	r4, [pc, #376]	; (7e4c <radio_adv_enable+0x274>)
    7cd4:	2307      	movs	r3, #7
    7cd6:	0021      	movs	r1, r4
    7cd8:	31a4      	adds	r1, #164	; 0xa4
    7cda:	784a      	ldrb	r2, [r1, #1]
    7cdc:	980d      	ldr	r0, [sp, #52]	; 0x34
    7cde:	439a      	bics	r2, r3
    7ce0:	4018      	ands	r0, r3
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
    7ce2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7ce4:	4302      	orrs	r2, r0
    7ce6:	2038      	movs	r0, #56	; 0x38
    7ce8:	401d      	ands	r5, r3
    7cea:	00eb      	lsls	r3, r5, #3
	_radio.advertiser.filter_policy = filter_policy;
    7cec:	253f      	movs	r5, #63	; 0x3f

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
    7cee:	4382      	bics	r2, r0
	_radio.advertiser.filter_policy = filter_policy;
    7cf0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7cf2:	4313      	orrs	r3, r2
    7cf4:	402b      	ands	r3, r5
    7cf6:	0180      	lsls	r0, r0, #6
    7cf8:	4303      	orrs	r3, r0
    7cfa:	704b      	strb	r3, [r1, #1]

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
    7cfc:	23fc      	movs	r3, #252	; 0xfc
    7cfe:	005b      	lsls	r3, r3, #1
    7d00:	58e5      	ldr	r5, [r4, r3]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
	_radio.advertiser.filter_policy = filter_policy;

	_radio.advertiser.hdr.ticks_active_to_start =
    7d02:	0023      	movs	r3, r4
		_radio.ticks_active_to_start;
	_radio.advertiser.hdr.ticks_xtal_to_start =
    7d04:	0022      	movs	r2, r4
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
	_radio.advertiser.filter_policy = filter_policy;

	_radio.advertiser.hdr.ticks_active_to_start =
    7d06:	3398      	adds	r3, #152	; 0x98
    7d08:	601d      	str	r5, [r3, #0]
		_radio.ticks_active_to_start;
	_radio.advertiser.hdr.ticks_xtal_to_start =
    7d0a:	2327      	movs	r3, #39	; 0x27
    7d0c:	3294      	adds	r2, #148	; 0x94
    7d0e:	6013      	str	r3, [r2, #0]
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
    7d10:	0022      	movs	r2, r4
    7d12:	2100      	movs	r1, #0
    7d14:	329c      	adds	r2, #156	; 0x9c
    7d16:	6011      	str	r1, [r2, #0]
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.advertiser.hdr.ticks_slot =
    7d18:	0022      	movs	r2, r4
    7d1a:	3182      	adds	r1, #130	; 0x82
    7d1c:	32a0      	adds	r2, #160	; 0xa0
    7d1e:	6011      	str	r1, [r2, #0]
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
		/* Max. chain is ADV_IND + SCAN_REQ + SCAN_RESP */
		((376 + 150 + 176 + 150 + 376) * 3));

	ticks_slot_offset =
    7d20:	429d      	cmp	r5, r3
    7d22:	d200      	bcs.n	7d26 <radio_adv_enable+0x14e>
    7d24:	001d      	movs	r5, r3
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    7d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7d28:	ae11      	add	r6, sp, #68	; 0x44
    7d2a:	799a      	ldrb	r2, [r3, #6]
    7d2c:	230f      	movs	r3, #15
    7d2e:	4013      	ands	r3, r2
    7d30:	2b01      	cmp	r3, #1
    7d32:	d138      	bne.n	7da6 <radio_adv_enable+0x1ce>
    7d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7d36:	2b00      	cmp	r3, #0
    7d38:	d135      	bne.n	7da6 <radio_adv_enable+0x1ce>
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
    7d3a:	f7fb fe67 	bl	3a0c <ticker_ticks_now_get>

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				   RADIO_TICKER_USER_ID_APP,
				   RADIO_TICKER_ID_ADV, ticks_now, 0,
				   (ticks_slot_offset +
				    _radio.advertiser.hdr.ticks_slot),
    7d3e:	0023      	movs	r3, r4
    7d40:	33a0      	adds	r3, #160	; 0xa0
    7d42:	681b      	ldr	r3, [r3, #0]
	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d44:	4a45      	ldr	r2, [pc, #276]	; (7e5c <radio_adv_enable+0x284>)
    7d46:	195d      	adds	r5, r3, r5
    7d48:	9207      	str	r2, [sp, #28]
    7d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7d4c:	b2ab      	uxth	r3, r5
    7d4e:	9206      	str	r2, [sp, #24]
    7d50:	9304      	str	r3, [sp, #16]
    7d52:	4a43      	ldr	r2, [pc, #268]	; (7e60 <radio_adv_enable+0x288>)
    7d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
    7d56:	900b      	str	r0, [sp, #44]	; 0x2c

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7d58:	9205      	str	r2, [sp, #20]
    7d5a:	9303      	str	r3, [sp, #12]
    7d5c:	9302      	str	r3, [sp, #8]
    7d5e:	9501      	str	r5, [sp, #4]
    7d60:	9300      	str	r3, [sp, #0]
    7d62:	9608      	str	r6, [sp, #32]
    7d64:	0003      	movs	r3, r0
    7d66:	2205      	movs	r2, #5
    7d68:	2103      	movs	r1, #3
    7d6a:	980a      	ldr	r0, [sp, #40]	; 0x28
    7d6c:	f7fb fd1a 	bl	37a4 <ticker_start>
    7d70:	4d3a      	ldr	r5, [pc, #232]	; (7e5c <radio_adv_enable+0x284>)
				   (ticks_slot_offset +
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    7d72:	2802      	cmp	r0, #2
    7d74:	d011      	beq.n	7d9a <radio_adv_enable+0x1c2>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		if (ret_cb != TICKER_STATUS_SUCCESS) {
    7d76:	9811      	ldr	r0, [sp, #68]	; 0x44
    7d78:	2800      	cmp	r0, #0
    7d7a:	d152      	bne.n	7e22 <radio_adv_enable+0x24a>
			goto failure_cleanup;
		}

		ret =
    7d7c:	2203      	movs	r2, #3
    7d7e:	4b39      	ldr	r3, [pc, #228]	; (7e64 <radio_adv_enable+0x28c>)
    7d80:	9608      	str	r6, [sp, #32]
    7d82:	9305      	str	r3, [sp, #20]
    7d84:	4b38      	ldr	r3, [pc, #224]	; (7e68 <radio_adv_enable+0x290>)
    7d86:	9507      	str	r5, [sp, #28]
    7d88:	9300      	str	r3, [sp, #0]
    7d8a:	9006      	str	r0, [sp, #24]
    7d8c:	9004      	str	r0, [sp, #16]
    7d8e:	9003      	str	r0, [sp, #12]
    7d90:	9002      	str	r0, [sp, #8]
    7d92:	9001      	str	r0, [sp, #4]
    7d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d96:	0011      	movs	r1, r2
    7d98:	e027      	b.n	7dea <radio_adv_enable+0x212>
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
    7d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7d9c:	2b02      	cmp	r3, #2
    7d9e:	d1ea      	bne.n	7d76 <radio_adv_enable+0x19e>
				cpu_sleep();
    7da0:	f7fb fe5a 	bl	3a58 <cpu_sleep>
    7da4:	e7f9      	b.n	7d9a <radio_adv_enable+0x1c2>
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7da6:	f7fb fe31 	bl	3a0c <ticker_ticks_now_get>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
    7daa:	4b2c      	ldr	r3, [pc, #176]	; (7e5c <radio_adv_enable+0x284>)
    7dac:	9608      	str	r6, [sp, #32]
    7dae:	9307      	str	r3, [sp, #28]
    7db0:	4b2b      	ldr	r3, [pc, #172]	; (7e60 <radio_adv_enable+0x288>)
    7db2:	2600      	movs	r6, #0
    7db4:	9305      	str	r3, [sp, #20]
				     RADIO_TICKER_ID_ADV,
				     ticker_ticks_now_get(), 0,
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     (ticks_slot_offset +
				      _radio.advertiser.hdr.ticks_slot),
    7db6:	0023      	movs	r3, r4
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
    7db8:	9606      	str	r6, [sp, #24]
				     RADIO_TICKER_ID_ADV,
				     ticker_ticks_now_get(), 0,
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     (ticks_slot_offset +
				      _radio.advertiser.hdr.ticks_slot),
    7dba:	33a0      	adds	r3, #160	; 0xa0
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
    7dbc:	681b      	ldr	r3, [r3, #0]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7dbe:	900b      	str	r0, [sp, #44]	; 0x2c
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
    7dc0:	195d      	adds	r5, r3, r5
    7dc2:	4a2a      	ldr	r2, [pc, #168]	; (7e6c <radio_adv_enable+0x294>)
    7dc4:	2391      	movs	r3, #145	; 0x91
    7dc6:	b2ad      	uxth	r5, r5
    7dc8:	980a      	ldr	r0, [sp, #40]	; 0x28
    7dca:	0031      	movs	r1, r6
    7dcc:	9504      	str	r5, [sp, #16]
    7dce:	9603      	str	r6, [sp, #12]
    7dd0:	9602      	str	r6, [sp, #8]
    7dd2:	f7f8 fb7b 	bl	4cc <__aeabi_lmul>
    7dd6:	4a26      	ldr	r2, [pc, #152]	; (7e70 <radio_adv_enable+0x298>)
    7dd8:	2307      	movs	r3, #7
    7dda:	f7f8 fb57 	bl	48c <__aeabi_uldivmod>
    7dde:	2205      	movs	r2, #5
    7de0:	9001      	str	r0, [sp, #4]
    7de2:	2103      	movs	r1, #3
    7de4:	0030      	movs	r0, r6
    7de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7de8:	9600      	str	r6, [sp, #0]
    7dea:	f7fb fcdb 	bl	37a4 <ticker_start>
				      _radio.advertiser.hdr.ticks_slot),
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
    7dee:	2802      	cmp	r0, #2
    7df0:	d003      	beq.n	7dfa <radio_adv_enable+0x222>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
    7df2:	9d11      	ldr	r5, [sp, #68]	; 0x44
    7df4:	2d00      	cmp	r5, #0
    7df6:	d006      	beq.n	7e06 <radio_adv_enable+0x22e>
    7df8:	e013      	b.n	7e22 <radio_adv_enable+0x24a>
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
		while (ret_cb == TICKER_STATUS_BUSY) {
    7dfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7dfc:	2b02      	cmp	r3, #2
    7dfe:	d1f8      	bne.n	7df2 <radio_adv_enable+0x21a>
			cpu_sleep();
    7e00:	f7fb fe2a 	bl	3a58 <cpu_sleep>
    7e04:	e7f9      	b.n	7dfa <radio_adv_enable+0x222>
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
		_radio.advertiser.is_enabled = 1;
    7e06:	0022      	movs	r2, r4
    7e08:	2001      	movs	r0, #1
    7e0a:	32a4      	adds	r2, #164	; 0xa4
    7e0c:	7813      	ldrb	r3, [r2, #0]
    7e0e:	4303      	orrs	r3, r0
    7e10:	7013      	strb	r3, [r2, #0]

		if (!_radio.scanner.is_enabled) {
    7e12:	23ae      	movs	r3, #174	; 0xae
    7e14:	005b      	lsls	r3, r3, #1
    7e16:	5ce3      	ldrb	r3, [r4, r3]
    7e18:	4203      	tst	r3, r0
    7e1a:	d113      	bne.n	7e44 <radio_adv_enable+0x26c>
			ll_adv_scan_state_cb(BIT(0));
    7e1c:	f7ff feda 	bl	7bd4 <ll_adv_scan_state_cb>
    7e20:	e010      	b.n	7e44 <radio_adv_enable+0x26c>
		return 0;
	}

failure_cleanup:

	if (conn) {
    7e22:	2f00      	cmp	r7, #0
    7e24:	d00d      	beq.n	7e42 <radio_adv_enable+0x26a>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    7e26:	0021      	movs	r1, r4
    7e28:	003b      	movs	r3, r7
    7e2a:	31bd      	adds	r1, #189	; 0xbd
    7e2c:	3398      	adds	r3, #152	; 0x98
    7e2e:	31ff      	adds	r1, #255	; 0xff
    7e30:	6818      	ldr	r0, [r3, #0]
    7e32:	f7fa fab4 	bl	239e <mem_release>
			    onion.link, &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
    7e36:	0021      	movs	r1, r4
    7e38:	3189      	adds	r1, #137	; 0x89
    7e3a:	31ff      	adds	r1, #255	; 0xff
    7e3c:	0038      	movs	r0, r7
    7e3e:	f7fa faae 	bl	239e <mem_release>
	}

	return 1;
    7e42:	2501      	movs	r5, #1
}
    7e44:	0028      	movs	r0, r5
    7e46:	b013      	add	sp, #76	; 0x4c
    7e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e4a:	46c0      	nop			; (mov r8, r8)
    7e4c:	200005f4 	.word	0x200005f4
    7e50:	200006f0 	.word	0x200006f0
    7e54:	200007b0 	.word	0x200007b0
    7e58:	0000400e 	.word	0x0000400e
    7e5c:	00003a61 	.word	0x00003a61
    7e60:	00004cc9 	.word	0x00004cc9
    7e64:	00004a61 	.word	0x00004a61
    7e68:	0000a3fe 	.word	0x0000a3fe
    7e6c:	84e72a00 	.word	0x84e72a00
    7e70:	1afd498d 	.word	0x1afd498d

00007e74 <radio_adv_disable>:

u32_t radio_adv_disable(void)
{
    7e74:	b570      	push	{r4, r5, r6, lr}
	u32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
    7e76:	2103      	movs	r1, #3
    7e78:	2005      	movs	r0, #5
    7e7a:	f7fb feff 	bl	3c7c <role_disable>
    7e7e:	1e05      	subs	r5, r0, #0
			      RADIO_TICKER_ID_ADV_STOP);
	if (!status) {
    7e80:	d122      	bne.n	7ec8 <radio_adv_disable+0x54>
		struct connection *conn;

		_radio.advertiser.is_enabled = 0;
    7e82:	4c12      	ldr	r4, [pc, #72]	; (7ecc <radio_adv_disable+0x58>)
    7e84:	2201      	movs	r2, #1
    7e86:	0021      	movs	r1, r4
    7e88:	31a4      	adds	r1, #164	; 0xa4
    7e8a:	780b      	ldrb	r3, [r1, #0]
    7e8c:	4393      	bics	r3, r2
    7e8e:	700b      	strb	r3, [r1, #0]

		if (!_radio.scanner.is_enabled) {
    7e90:	23ae      	movs	r3, #174	; 0xae
    7e92:	005b      	lsls	r3, r3, #1
    7e94:	5ce3      	ldrb	r3, [r4, r3]
    7e96:	4213      	tst	r3, r2
    7e98:	d101      	bne.n	7e9e <radio_adv_disable+0x2a>
			ll_adv_scan_state_cb(0);
    7e9a:	f7ff fe9b 	bl	7bd4 <ll_adv_scan_state_cb>
		}

		conn = _radio.advertiser.conn;
    7e9e:	0023      	movs	r3, r4
    7ea0:	33fc      	adds	r3, #252	; 0xfc
    7ea2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
		if (conn) {
    7ea4:	2e00      	cmp	r6, #0
    7ea6:	d00f      	beq.n	7ec8 <radio_adv_disable+0x54>
			_radio.advertiser.conn = NULL;
    7ea8:	2200      	movs	r2, #0

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    7eaa:	0021      	movs	r1, r4
			ll_adv_scan_state_cb(0);
		}

		conn = _radio.advertiser.conn;
		if (conn) {
			_radio.advertiser.conn = NULL;
    7eac:	64da      	str	r2, [r3, #76]	; 0x4c

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    7eae:	0033      	movs	r3, r6
    7eb0:	31bd      	adds	r1, #189	; 0xbd
    7eb2:	3398      	adds	r3, #152	; 0x98
    7eb4:	31ff      	adds	r1, #255	; 0xff
    7eb6:	6818      	ldr	r0, [r3, #0]
    7eb8:	f7fa fa71 	bl	239e <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
    7ebc:	0021      	movs	r1, r4
    7ebe:	3189      	adds	r1, #137	; 0x89
    7ec0:	31ff      	adds	r1, #255	; 0xff
    7ec2:	0030      	movs	r0, r6
    7ec4:	f7fa fa6b 	bl	239e <mem_release>
		}
	}

	return status;
}
    7ec8:	0028      	movs	r0, r5
    7eca:	bd70      	pop	{r4, r5, r6, pc}
    7ecc:	200005f4 	.word	0x200005f4

00007ed0 <radio_rx_dequeue>:

	return cmplt;
}

void radio_rx_dequeue(void)
{
    7ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    7ed2:	4d39      	ldr	r5, [pc, #228]	; (7fb8 <radio_rx_dequeue+0xe8>)
	return cmplt;
}

void radio_rx_dequeue(void)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
    7ed4:	2300      	movs	r3, #0
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    7ed6:	0029      	movs	r1, r5
	return cmplt;
}

void radio_rx_dequeue(void)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
    7ed8:	9301      	str	r3, [sp, #4]
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    7eda:	33c5      	adds	r3, #197	; 0xc5
    7edc:	33ff      	adds	r3, #255	; 0xff
    7ede:	31c1      	adds	r1, #193	; 0xc1
    7ee0:	58e8      	ldr	r0, [r5, r3]
    7ee2:	31ff      	adds	r1, #255	; 0xff
    7ee4:	aa01      	add	r2, sp, #4
    7ee6:	f7fa faa0 	bl	242a <memq_dequeue>
    7eea:	002c      	movs	r4, r5
			    (void **)&radio_pdu_node_rx);
	LL_ASSERT(link);
    7eec:	2800      	cmp	r0, #0
    7eee:	d04c      	beq.n	7f8a <radio_rx_dequeue+0xba>

	mem_release(link, &_radio.link_rx_free);
    7ef0:	0029      	movs	r1, r5
    7ef2:	31bd      	adds	r1, #189	; 0xbd
    7ef4:	31ff      	adds	r1, #255	; 0xff
    7ef6:	f7fa fa52 	bl	239e <mem_release>

	switch (radio_pdu_node_rx->hdr.type) {
    7efa:	9b01      	ldr	r3, [sp, #4]
    7efc:	7919      	ldrb	r1, [r3, #4]
    7efe:	290a      	cmp	r1, #10
    7f00:	d843      	bhi.n	7f8a <radio_rx_dequeue+0xba>
    7f02:	2201      	movs	r2, #1
    7f04:	408a      	lsls	r2, r1
    7f06:	492d      	ldr	r1, [pc, #180]	; (7fbc <radio_rx_dequeue+0xec>)
    7f08:	420a      	tst	r2, r1
    7f0a:	d102      	bne.n	7f12 <radio_rx_dequeue+0x42>
    7f0c:	0612      	lsls	r2, r2, #24
    7f0e:	d40b      	bmi.n	7f28 <radio_rx_dequeue+0x58>
    7f10:	e03b      	b.n	7f8a <radio_rx_dequeue+0xba>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
	case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

		/* release data link credit quota */
		LL_ASSERT(_radio.link_rx_data_quota <
    7f12:	21da      	movs	r1, #218	; 0xda
    7f14:	20e4      	movs	r0, #228	; 0xe4
    7f16:	0049      	lsls	r1, r1, #1
    7f18:	0040      	lsls	r0, r0, #1
    7f1a:	5c69      	ldrb	r1, [r5, r1]
    7f1c:	5c2a      	ldrb	r2, [r5, r0]
    7f1e:	3901      	subs	r1, #1
    7f20:	428a      	cmp	r2, r1
    7f22:	da32      	bge.n	7f8a <radio_rx_dequeue+0xba>
			  (_radio.packet_rx_count - 1));

		_radio.link_rx_data_quota++;
    7f24:	3201      	adds	r2, #1
    7f26:	542a      	strb	r2, [r5, r0]
	default:
		LL_ASSERT(0);
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    7f28:	791a      	ldrb	r2, [r3, #4]
    7f2a:	2a06      	cmp	r2, #6
    7f2c:	d143      	bne.n	7fb6 <radio_rx_dequeue+0xe6>
		struct pdu_data *pdu_data_rx;
		u8_t bm;

		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    7f2e:	001a      	movs	r2, r3
    7f30:	7adb      	ldrb	r3, [r3, #11]
    7f32:	320b      	adds	r2, #11
    7f34:	2b3c      	cmp	r3, #60	; 0x3c
    7f36:	d004      	beq.n	7f42 <radio_rx_dequeue+0x72>
    7f38:	7853      	ldrb	r3, [r2, #1]
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d01f      	beq.n	7f7e <radio_rx_dequeue+0xae>
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
		struct radio_le_conn_cmplt *radio_le_conn_cmplt;
		struct connection *conn = NULL;
    7f3e:	2500      	movs	r5, #0
    7f40:	e004      	b.n	7f4c <radio_rx_dequeue+0x7c>
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
    7f42:	0023      	movs	r3, r4
				_radio.advertiser.conn = NULL;
    7f44:	2200      	movs	r2, #0
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
    7f46:	33fc      	adds	r3, #252	; 0xfc
    7f48:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
				_radio.advertiser.conn = NULL;
    7f4a:	64da      	str	r2, [r3, #76]	; 0x4c
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
    7f4c:	0022      	movs	r2, r4
    7f4e:	2101      	movs	r1, #1
    7f50:	32a4      	adds	r2, #164	; 0xa4
    7f52:	7813      	ldrb	r3, [r2, #0]
    7f54:	420b      	tst	r3, r1
    7f56:	d018      	beq.n	7f8a <radio_rx_dequeue+0xba>
			_radio.advertiser.is_enabled = 0;
    7f58:	438b      	bics	r3, r1
    7f5a:	7013      	strb	r3, [r2, #0]
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
			_radio.scanner.is_enabled = 0;
		}

		if (conn) {
    7f5c:	2d00      	cmp	r5, #0
    7f5e:	d019      	beq.n	7f94 <radio_rx_dequeue+0xc4>
			struct radio_pdu_node_rx *node_rx = (void *)
				&conn->llcp_terminate.radio_pdu_node_rx;

			mem_release(node_rx->hdr.onion.link,
    7f60:	0021      	movs	r1, r4
    7f62:	002b      	movs	r3, r5
    7f64:	31bd      	adds	r1, #189	; 0xbd
    7f66:	3398      	adds	r3, #152	; 0x98
    7f68:	6818      	ldr	r0, [r3, #0]
    7f6a:	31ff      	adds	r1, #255	; 0xff
    7f6c:	f7fa fa17 	bl	239e <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
    7f70:	0021      	movs	r1, r4
    7f72:	3189      	adds	r1, #137	; 0x89
    7f74:	31ff      	adds	r1, #255	; 0xff
    7f76:	0028      	movs	r0, r5
    7f78:	f7fa fa11 	bl	239e <mem_release>
    7f7c:	e00a      	b.n	7f94 <radio_rx_dequeue+0xc4>
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
			_radio.advertiser.is_enabled = 0;
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
    7f7e:	22ae      	movs	r2, #174	; 0xae
    7f80:	2101      	movs	r1, #1
    7f82:	0052      	lsls	r2, r2, #1
    7f84:	5ca3      	ldrb	r3, [r4, r2]
    7f86:	420b      	tst	r3, r1
    7f88:	d102      	bne.n	7f90 <radio_rx_dequeue+0xc0>
    7f8a:	b662      	cpsie	i
    7f8c:	2004      	movs	r0, #4
    7f8e:	df02      	svc	2
			_radio.scanner.is_enabled = 0;
    7f90:	438b      	bics	r3, r1
    7f92:	54a3      	strb	r3, [r4, r2]
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    7f94:	23ae      	movs	r3, #174	; 0xae
    7f96:	005b      	lsls	r3, r3, #1
    7f98:	5ce0      	ldrb	r0, [r4, r3]
		     _radio.advertiser.is_enabled;
    7f9a:	34a4      	adds	r4, #164	; 0xa4
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    7f9c:	07c0      	lsls	r0, r0, #31
    7f9e:	0fc0      	lsrs	r0, r0, #31
		     _radio.advertiser.is_enabled;

		if (!bm) {
    7fa0:	b2c0      	uxtb	r0, r0
    7fa2:	0043      	lsls	r3, r0, #1
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
		     _radio.advertiser.is_enabled;
    7fa4:	7820      	ldrb	r0, [r4, #0]
    7fa6:	07c0      	lsls	r0, r0, #31
    7fa8:	0fc0      	lsrs	r0, r0, #31

		if (!bm) {
    7faa:	4318      	orrs	r0, r3
    7fac:	b240      	sxtb	r0, r0
    7fae:	2800      	cmp	r0, #0
    7fb0:	d101      	bne.n	7fb6 <radio_rx_dequeue+0xe6>
			ll_adv_scan_state_cb(0);
    7fb2:	f7ff fe0f 	bl	7bd4 <ll_adv_scan_state_cb>
		}
	}
}
    7fb6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    7fb8:	200005f4 	.word	0x200005f4
    7fbc:	0000077e 	.word	0x0000077e

00007fc0 <rtc0_nrf5_isr>:
static void rtc0_nrf5_isr(void *arg)
{
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    7fc0:	4b0a      	ldr	r3, [pc, #40]	; (7fec <rtc0_nrf5_isr+0x2c>)
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    7fc2:	b570      	push	{r4, r5, r6, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    7fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7fc6:	001c      	movs	r4, r3
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    7fc8:	6c9d      	ldr	r5, [r3, #72]	; 0x48

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    7fca:	2a00      	cmp	r2, #0
    7fcc:	d003      	beq.n	7fd6 <rtc0_nrf5_isr+0x16>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    7fce:	2000      	movs	r0, #0
    7fd0:	6458      	str	r0, [r3, #68]	; 0x44

		ticker_trigger(0);
    7fd2:	f7fb fbd7 	bl	3784 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    7fd6:	2d00      	cmp	r5, #0
    7fd8:	d004      	beq.n	7fe4 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    7fda:	2300      	movs	r3, #0

		ticker_trigger(1);
    7fdc:	2001      	movs	r0, #1
		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    7fde:	64a3      	str	r3, [r4, #72]	; 0x48

		ticker_trigger(1);
    7fe0:	f7fb fbd0 	bl	3784 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    7fe4:	2000      	movs	r0, #0
    7fe6:	f7fa f90f 	bl	2208 <mayfly_run>
}
    7fea:	bd70      	pop	{r4, r5, r6, pc}
    7fec:	4000b0fc 	.word	0x4000b0fc

00007ff0 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
    7ff0:	b510      	push	{r4, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
    7ff2:	2001      	movs	r0, #1
    7ff4:	f7fa f908 	bl	2208 <mayfly_run>
}
    7ff8:	bd10      	pop	{r4, pc}

00007ffa <rng_nrf5_isr>:

	mayfly_run(MAYFLY_CALL_ID_0);
}

static void rng_nrf5_isr(void *arg)
{
    7ffa:	b510      	push	{r4, lr}
	isr_rand(arg);
    7ffc:	f7fa fe92 	bl	2d24 <isr_rand>
}
    8000:	bd10      	pop	{r4, pc}

00008002 <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
    8002:	b510      	push	{r4, lr}
{
	isr_radio();
    8004:	f7fa fac2 	bl	258c <isr_radio>

	ISR_DIRECT_PM();
    8008:	f000 fd52 	bl	8ab0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    800c:	f000 fc68 	bl	88e0 <_IntExit>
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
    8010:	bd10      	pop	{r4, pc}

00008012 <mayfly_enable_cb>:
	u8_t pub_addr[BDADDR_SIZE];
	u8_t rnd_addr[BDADDR_SIZE];
} _ll_context;

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    8012:	b510      	push	{r4, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
    8014:	2901      	cmp	r1, #1
    8016:	d002      	beq.n	801e <mayfly_enable_cb+0xc>
    8018:	b662      	cpsie	i
    801a:	2004      	movs	r0, #4
    801c:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    801e:	2018      	movs	r0, #24
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
    8020:	2a00      	cmp	r2, #0
    8022:	d002      	beq.n	802a <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    8024:	f000 fcee 	bl	8a04 <_arch_irq_enable>
    8028:	e001      	b.n	802e <mayfly_enable_cb+0x1c>
	} else {
		irq_disable(SWI4_IRQn);
    802a:	f000 fcf5 	bl	8a18 <_arch_irq_disable>
	}
}
    802e:	bd10      	pop	{r4, pc}

00008030 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    8030:	b510      	push	{r4, lr}
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
		return irq_is_enabled(RTC0_IRQn);
    8032:	200b      	movs	r0, #11

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
    8034:	2900      	cmp	r1, #0
    8036:	d002      	beq.n	803e <mayfly_is_enabled+0xe>
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
    8038:	2901      	cmp	r1, #1
    803a:	d103      	bne.n	8044 <mayfly_is_enabled+0x14>
		return irq_is_enabled(SWI4_IRQn);
    803c:	2018      	movs	r0, #24
    803e:	f000 fcf5 	bl	8a2c <_arch_irq_is_enabled>
	}

	LL_ASSERT(0);

	return 0;
}
    8042:	bd10      	pop	{r4, pc}
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
		return irq_is_enabled(SWI4_IRQn);
	}

	LL_ASSERT(0);
    8044:	b662      	cpsie	i
    8046:	2004      	movs	r0, #4
    8048:	df02      	svc	2

0000804a <mayfly_prio_is_equal>:

	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
    804a:	0003      	movs	r3, r0
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
    804c:	2001      	movs	r0, #1
    804e:	428b      	cmp	r3, r1
    8050:	d008      	beq.n	8064 <mayfly_prio_is_equal+0x1a>
	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
	return (caller_id == callee_id) ||
    8052:	2b00      	cmp	r3, #0
    8054:	d101      	bne.n	805a <mayfly_prio_is_equal+0x10>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
    8056:	3901      	subs	r1, #1
    8058:	e002      	b.n	8060 <mayfly_prio_is_equal+0x16>
    805a:	2000      	movs	r0, #0
    805c:	2b01      	cmp	r3, #1
    805e:	d101      	bne.n	8064 <mayfly_prio_is_equal+0x1a>
    8060:	4248      	negs	r0, r1
    8062:	4148      	adcs	r0, r1
	       ((caller_id == MAYFLY_CALL_ID_1) &&
		(callee_id == MAYFLY_CALL_ID_0));
}
    8064:	4770      	bx	lr
	...

00008068 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    8068:	4b07      	ldr	r3, [pc, #28]	; (8088 <mayfly_pend+0x20>)
	(void)caller_id;

	switch (callee_id) {
    806a:	2900      	cmp	r1, #0
    806c:	d004      	beq.n	8078 <mayfly_pend+0x10>
    806e:	2901      	cmp	r1, #1
    8070:	d106      	bne.n	8080 <mayfly_pend+0x18>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8072:	2280      	movs	r2, #128	; 0x80
    8074:	0452      	lsls	r2, r2, #17
    8076:	e001      	b.n	807c <mayfly_pend+0x14>
    8078:	2280      	movs	r2, #128	; 0x80
    807a:	0112      	lsls	r2, r2, #4
    807c:	605a      	str	r2, [r3, #4]
	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
		break;
	}
}
    807e:	4770      	bx	lr
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
    8080:	b662      	cpsie	i
    8082:	2004      	movs	r0, #4
    8084:	df02      	svc	2
    8086:	46c0      	nop			; (mov r8, r8)
    8088:	e000e1fc 	.word	0xe000e1fc

0000808c <radio_active_callback>:
	}
}

void radio_active_callback(u8_t active)
{
}
    808c:	4770      	bx	lr
	...

00008090 <radio_event_callback>:

void radio_event_callback(void)
{
    8090:	b510      	push	{r4, lr}
	k_sem_give(sem_recv);
    8092:	4b02      	ldr	r3, [pc, #8]	; (809c <radio_event_callback+0xc>)
    8094:	6818      	ldr	r0, [r3, #0]
    8096:	f001 fb8b 	bl	97b0 <k_sem_give>
}
    809a:	bd10      	pop	{r4, pc}
    809c:	20000b44 	.word	0x20000b44

000080a0 <ll_init>:
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
    80a0:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
    80a2:	4b34      	ldr	r3, [pc, #208]	; (8174 <ll_init+0xd4>)
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
    80a4:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
    80a6:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(_rand_context, sizeof(_rand_context));
    80a8:	2108      	movs	r1, #8
    80aa:	4833      	ldr	r0, [pc, #204]	; (8178 <ll_init+0xd8>)
    80ac:	f7fa fdec 	bl	2c88 <rand_init>

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    80b0:	4832      	ldr	r0, [pc, #200]	; (817c <ll_init+0xdc>)
    80b2:	f000 fe03 	bl	8cbc <device_get_binding>
	if (!clk_k32) {
    80b6:	2800      	cmp	r0, #0
    80b8:	d101      	bne.n	80be <ll_init+0x1e>
		return -ENODEV;
    80ba:	2013      	movs	r0, #19
    80bc:	e056      	b.n	816c <ll_init+0xcc>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    80be:	6843      	ldr	r3, [r0, #4]
    80c0:	2101      	movs	r1, #1
    80c2:	681b      	ldr	r3, [r3, #0]
    80c4:	4798      	blx	r3
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
    80c6:	f7fa f9d1 	bl	246c <cntr_init>

	mayfly_init();
    80ca:	f7fa f805 	bl	20d8 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    80ce:	2208      	movs	r2, #8
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    80d0:	2400      	movs	r4, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;
    80d2:	2602      	movs	r6, #2

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
    80d4:	250d      	movs	r5, #13
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    80d6:	4b2a      	ldr	r3, [pc, #168]	; (8180 <ll_init+0xe0>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
    80d8:	2107      	movs	r1, #7
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    80da:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    80dc:	3a05      	subs	r2, #5
    80de:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
    80e0:	4a28      	ldr	r2, [pc, #160]	; (8184 <ll_init+0xe4>)

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    80e2:	741c      	strb	r4, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;
    80e4:	761e      	strb	r6, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
    80e6:	0020      	movs	r0, r4
    80e8:	9202      	str	r2, [sp, #8]
    80ea:	9300      	str	r3, [sp, #0]
    80ec:	9501      	str	r5, [sp, #4]
    80ee:	2304      	movs	r3, #4
    80f0:	4a25      	ldr	r2, [pc, #148]	; (8188 <ll_init+0xe8>)
    80f2:	f7fb faf3 	bl	36dc <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    RADIO_TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    80f6:	4825      	ldr	r0, [pc, #148]	; (818c <ll_init+0xec>)
    80f8:	f000 fde0 	bl	8cbc <device_get_binding>
	if (!clk_m16) {
    80fc:	42a0      	cmp	r0, r4
    80fe:	d0dc      	beq.n	80ba <ll_init+0x1a>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
    8100:	23f8      	movs	r3, #248	; 0xf8
    8102:	005b      	lsls	r3, r3, #1
    8104:	9304      	str	r3, [sp, #16]
    8106:	4b22      	ldr	r3, [pc, #136]	; (8190 <ll_init+0xf0>)
    8108:	0022      	movs	r2, r4
    810a:	9303      	str	r3, [sp, #12]
    810c:	231b      	movs	r3, #27
    810e:	9600      	str	r6, [sp, #0]
    8110:	9302      	str	r3, [sp, #8]
    8112:	9301      	str	r3, [sp, #4]
    8114:	2107      	movs	r1, #7
    8116:	3b1a      	subs	r3, #26
    8118:	f7ff fb50 	bl	77bc <radio_init>
    811c:	1e04      	subs	r4, r0, #0
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
    811e:	d124      	bne.n	816a <ll_init+0xca>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
    8120:	2001      	movs	r0, #1
    8122:	f000 f8fd 	bl	8320 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn,
    8126:	0022      	movs	r2, r4
    8128:	0021      	movs	r1, r4
    812a:	2001      	movs	r0, #1
    812c:	f000 fc8a 	bl	8a44 <_irq_priority_set>
			   CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
    8130:	0022      	movs	r2, r4
    8132:	0021      	movs	r1, r4
    8134:	200b      	movs	r0, #11
    8136:	f000 fc85 	bl	8a44 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BLUETOOTH_CONTROLLER_JOB_PRIO,
    813a:	0022      	movs	r2, r4
    813c:	0021      	movs	r1, r4
    813e:	2018      	movs	r0, #24
    8140:	f000 fc80 	bl	8a44 <_irq_priority_set>
		    swi4_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
    8144:	0022      	movs	r2, r4
    8146:	2101      	movs	r1, #1
    8148:	0028      	movs	r0, r5
    814a:	f000 fc7b 	bl	8a44 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
    814e:	2001      	movs	r0, #1
    8150:	f000 fc58 	bl	8a04 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    8154:	200b      	movs	r0, #11
    8156:	f000 fc55 	bl	8a04 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    815a:	2018      	movs	r0, #24
    815c:	f000 fc52 	bl	8a04 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
    8160:	0028      	movs	r0, r5
    8162:	f000 fc4f 	bl	8a04 <_arch_irq_enable>

	return 0;
    8166:	0020      	movs	r0, r4
    8168:	e001      	b.n	816e <ll_init+0xce>
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
    816a:	200c      	movs	r0, #12
    816c:	4240      	negs	r0, r0
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);
	irq_enable(NRF5_IRQ_RNG_IRQn);

	return 0;
}
    816e:	b006      	add	sp, #24
    8170:	bd70      	pop	{r4, r5, r6, pc}
    8172:	46c0      	nop			; (mov r8, r8)
    8174:	20000b44 	.word	0x20000b44
    8178:	20000d90 	.word	0x20000d90
    817c:	00009d7f 	.word	0x00009d7f
    8180:	20000b24 	.word	0x20000b24
    8184:	20000b54 	.word	0x20000b54
    8188:	20000a28 	.word	0x20000a28
    818c:	00009d94 	.word	0x00009d94
    8190:	200007f4 	.word	0x200007f4

00008194 <ll_addr_get>:

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    8194:	b510      	push	{r4, lr}
    8196:	0003      	movs	r3, r0
    8198:	4c09      	ldr	r4, [pc, #36]	; (81c0 <ll_addr_get+0x2c>)
    819a:	0008      	movs	r0, r1
	if (addr_type) {
    819c:	2b00      	cmp	r3, #0
    819e:	d004      	beq.n	81aa <ll_addr_get+0x16>
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
		}

		return _ll_context.rnd_addr;
    81a0:	1da3      	adds	r3, r4, #6

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type) {
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
    81a2:	001c      	movs	r4, r3
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type) {
		if (bdaddr) {
    81a4:	2900      	cmp	r1, #0
    81a6:	d103      	bne.n	81b0 <ll_addr_get+0x1c>
    81a8:	e007      	b.n	81ba <ll_addr_get+0x26>

	if (bdaddr) {
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
	}

	return _ll_context.pub_addr;
    81aa:	0023      	movs	r3, r4
		}

		return _ll_context.rnd_addr;
	}

	if (bdaddr) {
    81ac:	2900      	cmp	r1, #0
    81ae:	d004      	beq.n	81ba <ll_addr_get+0x26>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
    81b0:	2206      	movs	r2, #6
    81b2:	0021      	movs	r1, r4
    81b4:	f7f8 fec0 	bl	f38 <memcpy>
	}

	return _ll_context.pub_addr;
    81b8:	0023      	movs	r3, r4
}
    81ba:	0018      	movs	r0, r3
    81bc:	bd10      	pop	{r4, pc}
    81be:	46c0      	nop			; (mov r8, r8)
    81c0:	20000b48 	.word	0x20000b48

000081c4 <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    81c4:	0003      	movs	r3, r0
    81c6:	b510      	push	{r4, lr}
    81c8:	4803      	ldr	r0, [pc, #12]	; (81d8 <ll_addr_set+0x14>)
	if (addr_type) {
    81ca:	2b00      	cmp	r3, #0
    81cc:	d000      	beq.n	81d0 <ll_addr_set+0xc>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
    81ce:	3006      	adds	r0, #6
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
    81d0:	2206      	movs	r2, #6
    81d2:	f7f8 feb1 	bl	f38 <memcpy>
	}
}
    81d6:	bd10      	pop	{r4, pc}
    81d8:	20000b48 	.word	0x20000b48

000081dc <ctrl_filter_get>:


struct ll_filter *ctrl_filter_get(void)
{
	return &wl;
}
    81dc:	4800      	ldr	r0, [pc, #0]	; (81e0 <ctrl_filter_get+0x4>)
    81de:	4770      	bx	lr
    81e0:	20000d98 	.word	0x20000d98

000081e4 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    81e4:	2008      	movs	r0, #8
    81e6:	4770      	bx	lr

000081e8 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    81e8:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    81ea:	f7ff fbd1 	bl	7990 <radio_adv_filter_pol_get>
    81ee:	2800      	cmp	r0, #0
    81f0:	d001      	beq.n	81f6 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
    81f2:	200c      	movs	r0, #12
    81f4:	e009      	b.n	820a <ll_wl_clear+0x22>
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    81f6:	f7ff fbd9 	bl	79ac <radio_scan_filter_pol_get>
    81fa:	2301      	movs	r3, #1
    81fc:	4018      	ands	r0, r3
    81fe:	d1f8      	bne.n	81f2 <ll_wl_clear+0xa>
struct k_delayed_work rpa_work;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
    8200:	4b02      	ldr	r3, [pc, #8]	; (820c <ll_wl_clear+0x24>)
    8202:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
    8204:	7058      	strb	r0, [r3, #1]
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	filter_clear(&wl);
	wl_anon = 0;
    8206:	4b02      	ldr	r3, [pc, #8]	; (8210 <ll_wl_clear+0x28>)
    8208:	7018      	strb	r0, [r3, #0]

	return 0;
}
    820a:	bd10      	pop	{r4, pc}
    820c:	20000d98 	.word	0x20000d98
    8210:	20000fbc 	.word	0x20000fbc

00008214 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    8214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8216:	0005      	movs	r5, r0

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8218:	f7ff fbba 	bl	7990 <radio_adv_filter_pol_get>
    821c:	2800      	cmp	r0, #0
    821e:	d001      	beq.n	8224 <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8220:	240c      	movs	r4, #12
    8222:	e02c      	b.n	827e <ll_wl_add+0x6a>
}

u32_t ll_wl_add(bt_addr_le_t *addr)
{

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8224:	f7ff fbc2 	bl	79ac <radio_scan_filter_pol_get>
    8228:	2201      	movs	r2, #1
    822a:	4010      	ands	r0, r2
    822c:	1e04      	subs	r4, r0, #0
    822e:	d1f7      	bne.n	8220 <ll_wl_add+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
    8230:	782f      	ldrb	r7, [r5, #0]
    8232:	2fff      	cmp	r7, #255	; 0xff
    8234:	d102      	bne.n	823c <ll_wl_add+0x28>
		wl_anon = 1;
    8236:	4b13      	ldr	r3, [pc, #76]	; (8284 <ll_wl_add+0x70>)
    8238:	701a      	strb	r2, [r3, #0]
		return 0;
    823a:	e020      	b.n	827e <ll_wl_add+0x6a>

static u32_t filter_add(struct ll_filter *filter, u8_t addr_type, u8_t *bdaddr)
{
	u8_t index;

	if (filter->enable_bitmask == 0xFF) {
    823c:	4812      	ldr	r0, [pc, #72]	; (8288 <ll_wl_add+0x74>)
    823e:	7801      	ldrb	r1, [r0, #0]
    8240:	29ff      	cmp	r1, #255	; 0xff
    8242:	d01b      	beq.n	827c <ll_wl_add+0x68>
    8244:	0023      	movs	r3, r4
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
	}

	for (index = 0;
    8246:	4694      	mov	ip, r2
    8248:	000e      	movs	r6, r1
    824a:	4662      	mov	r2, ip
    824c:	411e      	asrs	r6, r3
    824e:	4216      	tst	r6, r2
    8250:	d002      	beq.n	8258 <ll_wl_add+0x44>
	     (filter->enable_bitmask & (1 << index));
	     index++) {
    8252:	3301      	adds	r3, #1
    8254:	b2db      	uxtb	r3, r3
    8256:	e7f7      	b.n	8248 <ll_wl_add+0x34>
	}
	filter->enable_bitmask |= (1 << index);
    8258:	2601      	movs	r6, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    825a:	2201      	movs	r2, #1

	for (index = 0;
	     (filter->enable_bitmask & (1 << index));
	     index++) {
	}
	filter->enable_bitmask |= (1 << index);
    825c:	409e      	lsls	r6, r3
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    825e:	403a      	ands	r2, r7
    8260:	409a      	lsls	r2, r3

	for (index = 0;
	     (filter->enable_bitmask & (1 << index));
	     index++) {
	}
	filter->enable_bitmask |= (1 << index);
    8262:	4331      	orrs	r1, r6
    8264:	7001      	strb	r1, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    8266:	7841      	ldrb	r1, [r0, #1]
    8268:	430a      	orrs	r2, r1
    826a:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    826c:	2206      	movs	r2, #6
    826e:	4353      	muls	r3, r2
    8270:	18c0      	adds	r0, r0, r3
	if (addr->type == ADDR_TYPE_ANON) {
		wl_anon = 1;
		return 0;
	}

	return filter_add(&wl, addr->type, addr->a.val);
    8272:	1c69      	adds	r1, r5, #1
	     (filter->enable_bitmask & (1 << index));
	     index++) {
	}
	filter->enable_bitmask |= (1 << index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    8274:	3002      	adds	r0, #2
    8276:	f7f8 fe5f 	bl	f38 <memcpy>
    827a:	e000      	b.n	827e <ll_wl_add+0x6a>
static u32_t filter_add(struct ll_filter *filter, u8_t addr_type, u8_t *bdaddr)
{
	u8_t index;

	if (filter->enable_bitmask == 0xFF) {
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    827c:	2407      	movs	r4, #7
		wl_anon = 1;
		return 0;
	}

	return filter_add(&wl, addr->type, addr->a.val);
}
    827e:	0020      	movs	r0, r4
    8280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8282:	46c0      	nop			; (mov r8, r8)
    8284:	20000fbc 	.word	0x20000fbc
    8288:	20000d98 	.word	0x20000d98

0000828c <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    828c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    828e:	0007      	movs	r7, r0

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8290:	f7ff fb7e 	bl	7990 <radio_adv_filter_pol_get>
    8294:	2800      	cmp	r0, #0
    8296:	d001      	beq.n	829c <ll_wl_remove+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8298:	250c      	movs	r5, #12
    829a:	e03a      	b.n	8312 <ll_wl_remove+0x86>
}

u32_t ll_wl_remove(bt_addr_le_t *addr)
{

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    829c:	f7ff fb86 	bl	79ac <radio_scan_filter_pol_get>
    82a0:	2301      	movs	r3, #1
    82a2:	4018      	ands	r0, r3
    82a4:	1e05      	subs	r5, r0, #0
    82a6:	d1f7      	bne.n	8298 <ll_wl_remove+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
    82a8:	783a      	ldrb	r2, [r7, #0]
    82aa:	9200      	str	r2, [sp, #0]
    82ac:	2aff      	cmp	r2, #255	; 0xff
    82ae:	d102      	bne.n	82b6 <ll_wl_remove+0x2a>
		wl_anon = 0;
    82b0:	4b19      	ldr	r3, [pc, #100]	; (8318 <ll_wl_remove+0x8c>)
    82b2:	7018      	strb	r0, [r3, #0]
		return 0;
    82b4:	e02d      	b.n	8312 <ll_wl_remove+0x86>
static u32_t filter_remove(struct ll_filter *filter, u8_t addr_type,
			   u8_t *bdaddr)
{
	u8_t index;

	if (!filter->enable_bitmask) {
    82b6:	4a19      	ldr	r2, [pc, #100]	; (831c <ll_wl_remove+0x90>)
    82b8:	7812      	ldrb	r2, [r2, #0]
    82ba:	2a00      	cmp	r2, #0
    82bc:	d00c      	beq.n	82d8 <ll_wl_remove+0x4c>
    82be:	2408      	movs	r4, #8
		return BT_HCI_ERR_INVALID_PARAM;
	}

	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
    82c0:	9301      	str	r3, [sp, #4]
    82c2:	e005      	b.n	82d0 <ll_wl_remove+0x44>
    82c4:	4e15      	ldr	r6, [pc, #84]	; (831c <ll_wl_remove+0x90>)
    82c6:	9a01      	ldr	r2, [sp, #4]
    82c8:	7833      	ldrb	r3, [r6, #0]
    82ca:	40e3      	lsrs	r3, r4
    82cc:	4213      	tst	r3, r2
    82ce:	d105      	bne.n	82dc <ll_wl_remove+0x50>
	if (!filter->enable_bitmask) {
		return BT_HCI_ERR_INVALID_PARAM;
	}

	index = 8;
	while (index--) {
    82d0:	3c01      	subs	r4, #1
    82d2:	b2e4      	uxtb	r4, r4
    82d4:	2cff      	cmp	r4, #255	; 0xff
    82d6:	d1f5      	bne.n	82c4 <ll_wl_remove+0x38>
			   u8_t *bdaddr)
{
	u8_t index;

	if (!filter->enable_bitmask) {
		return BT_HCI_ERR_INVALID_PARAM;
    82d8:	2512      	movs	r5, #18
    82da:	e01a      	b.n	8312 <ll_wl_remove+0x86>
	}

	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
    82dc:	7873      	ldrb	r3, [r6, #1]
    82de:	9a00      	ldr	r2, [sp, #0]
    82e0:	4123      	asrs	r3, r4
    82e2:	4053      	eors	r3, r2
    82e4:	9a01      	ldr	r2, [sp, #4]
    82e6:	4213      	tst	r3, r2
    82e8:	d1f2      	bne.n	82d0 <ll_wl_remove+0x44>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    82ea:	2006      	movs	r0, #6
    82ec:	4360      	muls	r0, r4
    82ee:	1830      	adds	r0, r6, r0
	if (addr->type == ADDR_TYPE_ANON) {
		wl_anon = 0;
		return 0;
	}

	return filter_remove(&wl, addr->type, addr->a.val);
    82f0:	1c79      	adds	r1, r7, #1
	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    82f2:	3002      	adds	r0, #2
    82f4:	2206      	movs	r2, #6
    82f6:	f7f8 fe0a 	bl	f0e <memcmp>

	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
    82fa:	2800      	cmp	r0, #0
    82fc:	d1e8      	bne.n	82d0 <ll_wl_remove+0x44>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
			filter->enable_bitmask &= ~BIT(index);
    82fe:	2301      	movs	r3, #1
    8300:	40a3      	lsls	r3, r4
    8302:	43db      	mvns	r3, r3
    8304:	7832      	ldrb	r2, [r6, #0]
    8306:	b2db      	uxtb	r3, r3
    8308:	401a      	ands	r2, r3
    830a:	7032      	strb	r2, [r6, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    830c:	7872      	ldrb	r2, [r6, #1]
    830e:	4013      	ands	r3, r2
    8310:	7073      	strb	r3, [r6, #1]
		wl_anon = 0;
		return 0;
	}

	return filter_remove(&wl, addr->type, addr->a.val);
}
    8312:	0028      	movs	r0, r5
    8314:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8316:	46c0      	nop			; (mov r8, r8)
    8318:	20000fbc 	.word	0x20000fbc
    831c:	20000d98 	.word	0x20000d98

00008320 <ll_filter_reset>:
struct k_delayed_work rpa_work;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
    8320:	2300      	movs	r3, #0
    8322:	4a03      	ldr	r2, [pc, #12]	; (8330 <ll_filter_reset+0x10>)
    8324:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    8326:	7053      	strb	r3, [r2, #1]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	filter_clear(&wl);
	wl_anon = 0;
    8328:	4a02      	ldr	r2, [pc, #8]	; (8334 <ll_filter_reset+0x14>)
    832a:	7013      	strb	r3, [r2, #0]
	} else {
		k_delayed_work_cancel(&rpa_work);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

}
    832c:	4770      	bx	lr
    832e:	46c0      	nop			; (mov r8, r8)
    8330:	20000d98 	.word	0x20000d98
    8334:	20000fbc 	.word	0x20000fbc

00008338 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    8338:	b5f0      	push	{r4, r5, r6, r7, lr}
    833a:	b08b      	sub	sp, #44	; 0x2c
    833c:	001d      	movs	r5, r3
    833e:	ab10      	add	r3, sp, #64	; 0x40
    8340:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8342:	4f78      	ldr	r7, [pc, #480]	; (8524 <ll_adv_params_set+0x1ec>)
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    8344:	9302      	str	r3, [sp, #8]
    8346:	ab11      	add	r3, sp, #68	; 0x44
    8348:	781b      	ldrb	r3, [r3, #0]
    834a:	9201      	str	r2, [sp, #4]
    834c:	9303      	str	r3, [sp, #12]
    834e:	ab13      	add	r3, sp, #76	; 0x4c
    8350:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8352:	2206      	movs	r2, #6
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    8354:	9304      	str	r3, [sp, #16]
    8356:	ab14      	add	r3, sp, #80	; 0x50
    8358:	781b      	ldrb	r3, [r3, #0]
    835a:	000c      	movs	r4, r1
    835c:	9305      	str	r3, [sp, #20]
    835e:	ab16      	add	r3, sp, #88	; 0x58
    8360:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8362:	0039      	movs	r1, r7
    8364:	a808      	add	r0, sp, #32
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    8366:	9300      	str	r3, [sp, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8368:	f7f8 fde6 	bl	f38 <memcpy>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
    836c:	f7ff fb06 	bl	797c <radio_adv_is_enabled>
    8370:	1e06      	subs	r6, r0, #0
    8372:	d000      	beq.n	8376 <ll_adv_params_set+0x3e>
    8374:	e0cf      	b.n	8516 <ll_adv_params_set+0x1de>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    8376:	201f      	movs	r0, #31
    8378:	2320      	movs	r3, #32
    837a:	496b      	ldr	r1, [pc, #428]	; (8528 <ll_adv_params_set+0x1f0>)
    837c:	780a      	ldrb	r2, [r1, #0]
    837e:	4002      	ands	r2, r0
    8380:	431a      	orrs	r2, r3
    8382:	700a      	strb	r2, [r1, #0]

	/* extended */
	if (adv_type > 0x04) {
    8384:	2d04      	cmp	r5, #4
    8386:	d91f      	bls.n	83c8 <ll_adv_params_set+0x90>
		/* legacy */
		if (evt_prop & BIT(4)) {
    8388:	06e3      	lsls	r3, r4, #27
    838a:	d50c      	bpl.n	83a6 <ll_adv_params_set+0x6e>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    838c:	ad07      	add	r5, sp, #28
    838e:	0028      	movs	r0, r5
    8390:	1db9      	adds	r1, r7, #6
    8392:	2204      	movs	r2, #4
    8394:	f7f8 fdd0 	bl	f38 <memcpy>

			adv_type = leg_adv_type[evt_prop & 0x03];
    8398:	2303      	movs	r3, #3
    839a:	4023      	ands	r3, r4
    839c:	5ced      	ldrb	r5, [r5, r3]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    839e:	0723      	lsls	r3, r4, #28
    83a0:	d512      	bpl.n	83c8 <ll_adv_params_set+0x90>
				adv_type = 0x01;
    83a2:	2501      	movs	r5, #1
    83a4:	e015      	b.n	83d2 <ll_adv_params_set+0x9a>
			}
		} else {
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
    83a6:	43e3      	mvns	r3, r4
    83a8:	079b      	lsls	r3, r3, #30
    83aa:	d100      	bne.n	83ae <ll_adv_params_set+0x76>
    83ac:	e0b5      	b.n	851a <ll_adv_params_set+0x1e2>
    83ae:	230c      	movs	r3, #12
    83b0:	4023      	ands	r3, r4
    83b2:	2b0c      	cmp	r3, #12
    83b4:	d100      	bne.n	83b8 <ll_adv_params_set+0x80>
    83b6:	e0b0      	b.n	851a <ll_adv_params_set+0x1e2>
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */

			ll_adv.phy_p = phy_p;
    83b8:	780a      	ldrb	r2, [r1, #0]
    83ba:	9b00      	ldr	r3, [sp, #0]
    83bc:	4010      	ands	r0, r2
    83be:	015b      	lsls	r3, r3, #5
    83c0:	4303      	orrs	r3, r0
    83c2:	700b      	strb	r3, [r1, #0]
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    83c4:	2505      	movs	r5, #5
    83c6:	e001      	b.n	83cc <ll_adv_params_set+0x94>
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
    83c8:	2d01      	cmp	r5, #1
    83ca:	d002      	beq.n	83d2 <ll_adv_params_set+0x9a>
		ll_adv.interval = interval;
    83cc:	4b56      	ldr	r3, [pc, #344]	; (8528 <ll_adv_params_set+0x1f0>)
    83ce:	9a01      	ldr	r2, [sp, #4]
    83d0:	e001      	b.n	83d6 <ll_adv_params_set+0x9e>
	} else {
		ll_adv.interval = 0;
    83d2:	2200      	movs	r2, #0
    83d4:	4b54      	ldr	r3, [pc, #336]	; (8528 <ll_adv_params_set+0x1f0>)
	}
	ll_adv.chl_map = chl_map;
    83d6:	2007      	movs	r0, #7
    83d8:	4953      	ldr	r1, [pc, #332]	; (8528 <ll_adv_params_set+0x1f0>)
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    83da:	605a      	str	r2, [r3, #4]
	}
	ll_adv.chl_map = chl_map;
    83dc:	780b      	ldrb	r3, [r1, #0]
    83de:	9a04      	ldr	r2, [sp, #16]
    83e0:	4383      	bics	r3, r0
    83e2:	001f      	movs	r7, r3
	ll_adv.filter_policy = filter_policy;
    83e4:	2303      	movs	r3, #3
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chl_map = chl_map;
    83e6:	4002      	ands	r2, r0
	ll_adv.filter_policy = filter_policy;
    83e8:	9805      	ldr	r0, [sp, #20]
    83ea:	4018      	ands	r0, r3
    83ec:	003b      	movs	r3, r7
    83ee:	4313      	orrs	r3, r2
    83f0:	2218      	movs	r2, #24
    83f2:	00c0      	lsls	r0, r0, #3
    83f4:	4393      	bics	r3, r2
    83f6:	4303      	orrs	r3, r0
    83f8:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    83fa:	f7ff fab3 	bl	7964 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    83fe:	0003      	movs	r3, r0
    8400:	334f      	adds	r3, #79	; 0x4f
    8402:	781f      	ldrb	r7, [r3, #0]
    8404:	2327      	movs	r3, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
    8406:	210f      	movs	r1, #15
	ll_adv.chl_map = chl_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8408:	435f      	muls	r7, r3
	pdu->type = pdu_adv_type[adv_type];
    840a:	ab08      	add	r3, sp, #32
    840c:	5d5b      	ldrb	r3, [r3, r5]
	ll_adv.chl_map = chl_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    840e:	19c7      	adds	r7, r0, r7
	pdu->type = pdu_adv_type[adv_type];
    8410:	400b      	ands	r3, r1
    8412:	001a      	movs	r2, r3
    8414:	783b      	ldrb	r3, [r7, #0]
    8416:	438b      	bics	r3, r1
	pdu->rfu = 0;
    8418:	4313      	orrs	r3, r2
    841a:	2210      	movs	r2, #16
    841c:	4393      	bics	r3, r2
    841e:	703b      	strb	r3, [r7, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2) &&
    8420:	4019      	ands	r1, r3
    8422:	1892      	adds	r2, r2, r2
    8424:	2901      	cmp	r1, #1
    8426:	d801      	bhi.n	842c <ll_adv_params_set+0xf4>
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
    8428:	4313      	orrs	r3, r2
    842a:	e000      	b.n	842e <ll_adv_params_set+0xf6>
	} else {
		pdu->chan_sel = 0;
    842c:	4393      	bics	r3, r2
	if (own_addr_type >= BT_ADDR_LE_PUBLIC_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    842e:	2101      	movs	r1, #1
    8430:	2040      	movs	r0, #64	; 0x40
	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2) &&
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
	} else {
		pdu->chan_sel = 0;
    8432:	703b      	strb	r3, [r7, #0]
	if (own_addr_type >= BT_ADDR_LE_PUBLIC_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    8434:	9d02      	ldr	r5, [sp, #8]
    8436:	783b      	ldrb	r3, [r7, #0]
    8438:	400d      	ands	r5, r1
    843a:	01aa      	lsls	r2, r5, #6
    843c:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    843e:	4313      	orrs	r3, r2
    8440:	227f      	movs	r2, #127	; 0x7f
    8442:	4013      	ands	r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    8444:	3a70      	subs	r2, #112	; 0x70
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
    8446:	703b      	strb	r3, [r7, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    8448:	401a      	ands	r2, r3
    844a:	428a      	cmp	r2, r1
    844c:	d10b      	bne.n	8466 <ll_adv_params_set+0x12e>
		pdu->rx_addr = direct_addr_type;
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
    844e:	0038      	movs	r0, r7
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		pdu->rx_addr = direct_addr_type;
    8450:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
    8452:	3008      	adds	r0, #8
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		pdu->rx_addr = direct_addr_type;
    8454:	01d2      	lsls	r2, r2, #7
    8456:	4313      	orrs	r3, r2
    8458:	703b      	strb	r3, [r7, #0]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
    845a:	2206      	movs	r2, #6
    845c:	9912      	ldr	r1, [sp, #72]	; 0x48
    845e:	f7f8 fd6b 	bl	f38 <memcpy>
		       BDADDR_SIZE);
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
    8462:	230c      	movs	r3, #12
    8464:	e03c      	b.n	84e0 <ll_adv_params_set+0x1a8>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    8466:	2a07      	cmp	r2, #7
    8468:	d136      	bne.n	84d8 <ll_adv_params_set+0x1a0>
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;
    846a:	01a0      	lsls	r0, r4, #6
    846c:	70b8      	strb	r0, [r7, #2]

		/* Zero-init header flags */
		*(u8_t *)h = 0;
    846e:	2000      	movs	r0, #0
		struct pdu_adv_payload_com_ext_adv *p;
		struct ext_adv_hdr *h;
		u8_t *ptr;
		u8_t len;

		p = (void *)&pdu->payload.adv_ext_ind;
    8470:	1cbb      	adds	r3, r7, #2
    8472:	9301      	str	r3, [sp, #4]
		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;

		/* Zero-init header flags */
		*(u8_t *)h = 0;
    8474:	70f8      	strb	r0, [r7, #3]
		u8_t *ptr;
		u8_t len;

		p = (void *)&pdu->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
    8476:	1d3b      	adds	r3, r7, #4

		/* Zero-init header flags */
		*(u8_t *)h = 0;

		/* AdvA flag */
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    8478:	06a2      	lsls	r2, r4, #26
    847a:	d408      	bmi.n	848e <ll_adv_params_set+0x156>
    847c:	223f      	movs	r2, #63	; 0x3f
    847e:	78b8      	ldrb	r0, [r7, #2]
    8480:	4390      	bics	r0, r2
    8482:	d104      	bne.n	848e <ll_adv_params_set+0x156>
    8484:	9a00      	ldr	r2, [sp, #0]
    8486:	2a04      	cmp	r2, #4
    8488:	d001      	beq.n	848e <ll_adv_params_set+0x156>
			/* TODO: optional on 1M */
			h->adv_addr = 1;
    848a:	70f9      	strb	r1, [r7, #3]

			/* NOTE: AdvA is filled at enable */
			ptr += BDADDR_SIZE;
    848c:	3306      	adds	r3, #6
		/* TODO: AuxPtr flag */

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
    848e:	2040      	movs	r0, #64	; 0x40
    8490:	4204      	tst	r4, r0
    8492:	d003      	beq.n	849c <ll_adv_params_set+0x164>
			h->tx_pwr = 1;
    8494:	78f9      	ldrb	r1, [r7, #3]
			ptr++;
    8496:	3301      	adds	r3, #1

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
			h->tx_pwr = 1;
    8498:	4301      	orrs	r1, r0
    849a:	70f9      	strb	r1, [r7, #3]
			ptr++;
		}

		/* Calc primary PDU len */
		len = ptr - (u8_t *)p;
    849c:	1cba      	adds	r2, r7, #2
    849e:	1a9a      	subs	r2, r3, r2
    84a0:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
    84a2:	2a02      	cmp	r2, #2
    84a4:	d908      	bls.n	84b8 <ll_adv_params_set+0x180>
				    ext_hdr_adi_adv_data) + sizeof(*h))) {
			p->ext_hdr_len = len -
    84a6:	243f      	movs	r4, #63	; 0x3f
    84a8:	1e51      	subs	r1, r2, #1
    84aa:	4021      	ands	r1, r4
    84ac:	0008      	movs	r0, r1
    84ae:	78b9      	ldrb	r1, [r7, #2]
    84b0:	43a1      	bics	r1, r4
    84b2:	4301      	orrs	r1, r0
    84b4:	70b9      	strb	r1, [r7, #2]
    84b6:	e000      	b.n	84ba <ll_adv_params_set+0x182>
				offsetof(struct pdu_adv_payload_com_ext_adv,
					 ext_hdr_adi_adv_data);
			pdu->len = len;
		} else {
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
    84b8:	2201      	movs	r2, #1
    84ba:	707a      	strb	r2, [r7, #1]
		/* TODO: AdvData */

		/* TODO: ACAD */

		/* Tx Power */
		if (h->tx_pwr) {
    84bc:	78fa      	ldrb	r2, [r7, #3]
    84be:	0652      	lsls	r2, r2, #25
    84c0:	d50f      	bpl.n	84e2 <ll_adv_params_set+0x1aa>
			u8_t _tx_pwr;

			_tx_pwr = 0;
    84c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
			if (tx_pwr) {
    84c4:	1e11      	subs	r1, r2, #0
    84c6:	d004      	beq.n	84d2 <ll_adv_params_set+0x19a>
				if (*tx_pwr != 0x7F) {
    84c8:	7812      	ldrb	r2, [r2, #0]
    84ca:	2a7f      	cmp	r2, #127	; 0x7f
    84cc:	d101      	bne.n	84d2 <ll_adv_params_set+0x19a>
					_tx_pwr = *tx_pwr;
				} else {
					*tx_pwr = _tx_pwr;
    84ce:	2200      	movs	r2, #0
    84d0:	700a      	strb	r2, [r1, #0]
				}
			}

			ptr--;
			*ptr = _tx_pwr;
    84d2:	3b01      	subs	r3, #1
    84d4:	701a      	strb	r2, [r3, #0]
    84d6:	e004      	b.n	84e2 <ll_adv_params_set+0x1aa>
		/* NOTE: TargetA, filled at enable and RPA timeout */

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	} else if (pdu->len == 0) {
    84d8:	787b      	ldrb	r3, [r7, #1]
    84da:	2b00      	cmp	r3, #0
    84dc:	d101      	bne.n	84e2 <ll_adv_params_set+0x1aa>
		pdu->len = BDADDR_SIZE;
    84de:	3306      	adds	r3, #6
    84e0:	707b      	strb	r3, [r7, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    84e2:	f7ff fa45 	bl	7970 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    84e6:	0003      	movs	r3, r0
    84e8:	334f      	adds	r3, #79	; 0x4f
    84ea:	781a      	ldrb	r2, [r3, #0]
    84ec:	2327      	movs	r3, #39	; 0x27
    84ee:	4353      	muls	r3, r2
    84f0:	18c0      	adds	r0, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    84f2:	230f      	movs	r3, #15
    84f4:	7802      	ldrb	r2, [r0, #0]
    84f6:	439a      	bics	r2, r3
	pdu->rfu = 0;
    84f8:	3b0b      	subs	r3, #11
    84fa:	431a      	orrs	r2, r3
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    84fc:	01ab      	lsls	r3, r5, #6
    84fe:	258f      	movs	r5, #143	; 0x8f
    8500:	4015      	ands	r5, r2
	pdu->rx_addr = 0;
    8502:	431d      	orrs	r5, r3
    8504:	237f      	movs	r3, #127	; 0x7f
    8506:	401d      	ands	r5, r3
	if (pdu->len == 0) {
    8508:	7843      	ldrb	r3, [r0, #1]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
    850a:	7005      	strb	r5, [r0, #0]
	if (pdu->len == 0) {
    850c:	2b00      	cmp	r3, #0
    850e:	d105      	bne.n	851c <ll_adv_params_set+0x1e4>
		pdu->len = BDADDR_SIZE;
    8510:	3306      	adds	r3, #6
    8512:	7043      	strb	r3, [r0, #1]
    8514:	e002      	b.n	851c <ll_adv_params_set+0x1e4>

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
		return 0x0C; /* Command Disallowed */
    8516:	260c      	movs	r6, #12
    8518:	e000      	b.n	851c <ll_adv_params_set+0x1e4>
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
    851a:	2612      	movs	r6, #18
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
    851c:	0030      	movs	r0, r6
    851e:	b00b      	add	sp, #44	; 0x2c
    8520:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8522:	46c0      	nop			; (mov r8, r8)
    8524:	00009d6e 	.word	0x00009d6e
    8528:	20000dcc 	.word	0x20000dcc

0000852c <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    852c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    852e:	0007      	movs	r7, r0
    8530:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    8532:	f7ff fa17 	bl	7964 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8536:	0003      	movs	r3, r0
    8538:	2127      	movs	r1, #39	; 0x27
    853a:	334f      	adds	r3, #79	; 0x4f
    853c:	781d      	ldrb	r5, [r3, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    853e:	0006      	movs	r6, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8540:	4369      	muls	r1, r5
    8542:	1841      	adds	r1, r0, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    8544:	200f      	movs	r0, #15
    8546:	780b      	ldrb	r3, [r1, #0]
    8548:	4018      	ands	r0, r3
    854a:	2801      	cmp	r0, #1
    854c:	d043      	beq.n	85d6 <ll_adv_data_set+0xaa>
    854e:	2807      	cmp	r0, #7
    8550:	d041      	beq.n	85d6 <ll_adv_data_set+0xaa>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    8552:	0032      	movs	r2, r6
    8554:	324e      	adds	r2, #78	; 0x4e
    8556:	7812      	ldrb	r2, [r2, #0]
    8558:	42aa      	cmp	r2, r5
    855a:	d104      	bne.n	8566 <ll_adv_data_set+0x3a>
		last = radio_adv_data->last + 1;
    855c:	3501      	adds	r5, #1
    855e:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    8560:	2d02      	cmp	r5, #2
    8562:	d100      	bne.n	8566 <ll_adv_data_set+0x3a>
			last = 0;
    8564:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
    8566:	200f      	movs	r0, #15
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    8568:	2427      	movs	r4, #39	; 0x27
	pdu->type = prev->type;
    856a:	4003      	ands	r3, r0
    856c:	001a      	movs	r2, r3
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    856e:	436c      	muls	r4, r5
    8570:	1934      	adds	r4, r6, r4
	pdu->type = prev->type;
    8572:	7823      	ldrb	r3, [r4, #0]
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
	pdu->len = BDADDR_SIZE + len;

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    8574:	364f      	adds	r6, #79	; 0x4f
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
    8576:	4383      	bics	r3, r0
	pdu->rfu = 0;
    8578:	4313      	orrs	r3, r2
    857a:	2210      	movs	r2, #16
    857c:	4393      	bics	r3, r2
    857e:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    8580:	2301      	movs	r3, #1
    8582:	7808      	ldrb	r0, [r1, #0]
    8584:	0940      	lsrs	r0, r0, #5
    8586:	4018      	ands	r0, r3
    8588:	7823      	ldrb	r3, [r4, #0]
    858a:	0140      	lsls	r0, r0, #5
    858c:	001a      	movs	r2, r3
    858e:	2320      	movs	r3, #32
    8590:	439a      	bics	r2, r3
    8592:	4310      	orrs	r0, r2
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
    8594:	2201      	movs	r2, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    8596:	7020      	strb	r0, [r4, #0]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
    8598:	780b      	ldrb	r3, [r1, #0]
    859a:	099b      	lsrs	r3, r3, #6
    859c:	4013      	ands	r3, r2
    859e:	019a      	lsls	r2, r3, #6
    85a0:	b2c3      	uxtb	r3, r0
    85a2:	2040      	movs	r0, #64	; 0x40
    85a4:	4383      	bics	r3, r0
    85a6:	4313      	orrs	r3, r2
    85a8:	7023      	strb	r3, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
    85aa:	780b      	ldrb	r3, [r1, #0]
    85ac:	7820      	ldrb	r0, [r4, #0]
    85ae:	09db      	lsrs	r3, r3, #7
    85b0:	01da      	lsls	r2, r3, #7
    85b2:	237f      	movs	r3, #127	; 0x7f
    85b4:	4003      	ands	r3, r0
    85b6:	4313      	orrs	r3, r2
    85b8:	7023      	strb	r3, [r4, #0]
	memcpy(&pdu->payload.adv_ind.addr[0],
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
    85ba:	3102      	adds	r1, #2
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
	pdu->rx_addr = prev->rx_addr;
	memcpy(&pdu->payload.adv_ind.addr[0],
    85bc:	2206      	movs	r2, #6
    85be:	1ca0      	adds	r0, r4, #2
    85c0:	f7f8 fcba 	bl	f38 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
    85c4:	0020      	movs	r0, r4
    85c6:	003a      	movs	r2, r7
    85c8:	3008      	adds	r0, #8
    85ca:	9901      	ldr	r1, [sp, #4]
    85cc:	f7f8 fcb4 	bl	f38 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    85d0:	1dbb      	adds	r3, r7, #6
    85d2:	7063      	strb	r3, [r4, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    85d4:	7035      	strb	r5, [r6, #0]
}
    85d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000085d8 <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    85d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    85da:	0007      	movs	r7, r0
    85dc:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    85de:	f7ff f9c7 	bl	7970 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    85e2:	0003      	movs	r3, r0
    85e4:	0002      	movs	r2, r0
    85e6:	334e      	adds	r3, #78	; 0x4e
    85e8:	324f      	adds	r2, #79	; 0x4f
    85ea:	7811      	ldrb	r1, [r2, #0]
    85ec:	781b      	ldrb	r3, [r3, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    85ee:	0005      	movs	r5, r0
    85f0:	000e      	movs	r6, r1
	if (radio_scan_data->first == radio_scan_data->last) {
    85f2:	428b      	cmp	r3, r1
    85f4:	d104      	bne.n	8600 <ll_scan_data_set+0x28>
		last = radio_scan_data->last + 1;
    85f6:	1c4e      	adds	r6, r1, #1
    85f8:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
    85fa:	2e02      	cmp	r6, #2
    85fc:	d100      	bne.n	8600 <ll_scan_data_set+0x28>
			last = 0;
    85fe:	2600      	movs	r6, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    8600:	2427      	movs	r4, #39	; 0x27
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    8602:	220f      	movs	r2, #15
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    8604:	4361      	muls	r1, r4
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    8606:	4374      	muls	r4, r6
    8608:	192c      	adds	r4, r5, r4
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    860a:	7823      	ldrb	r3, [r4, #0]
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    860c:	2040      	movs	r0, #64	; 0x40

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    860e:	4393      	bics	r3, r2
	pdu->rfu = 0;
    8610:	3a0b      	subs	r2, #11
    8612:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
    8614:	32cb      	adds	r2, #203	; 0xcb
    8616:	4013      	ands	r3, r2
    8618:	7023      	strb	r3, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
    861a:	2340      	movs	r3, #64	; 0x40
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    861c:	1869      	adds	r1, r5, r1
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    861e:	780a      	ldrb	r2, [r1, #0]
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE + len;
	memcpy(&pdu->payload.scan_rsp.addr[0],
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
    8620:	3102      	adds	r1, #2
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    8622:	401a      	ands	r2, r3
    8624:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->payload.scan_rsp.addr[0],
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    8626:	354f      	adds	r5, #79	; 0x4f
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    8628:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    862a:	4313      	orrs	r3, r2
    862c:	227f      	movs	r2, #127	; 0x7f
    862e:	4013      	ands	r3, r2
    8630:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
    8632:	1dbb      	adds	r3, r7, #6
    8634:	7063      	strb	r3, [r4, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
    8636:	1ca0      	adds	r0, r4, #2
    8638:	3a79      	subs	r2, #121	; 0x79
    863a:	f7f8 fc7d 	bl	f38 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
    863e:	0020      	movs	r0, r4
    8640:	003a      	movs	r2, r7
    8642:	9901      	ldr	r1, [sp, #4]
    8644:	3008      	adds	r0, #8
    8646:	f7f8 fc77 	bl	f38 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    864a:	702e      	strb	r6, [r5, #0]
}
    864c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

00008650 <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
    8650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    8652:	2800      	cmp	r0, #0
    8654:	d102      	bne.n	865c <ll_adv_enable+0xc>
		status = radio_adv_disable();
    8656:	f7ff fc0d 	bl	7e74 <radio_adv_disable>

		return status;
    865a:	e041      	b.n	86e0 <ll_adv_enable+0x90>
	 */

	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
    865c:	f7ff f982 	bl	7964 <radio_adv_data_get>
    8660:	0007      	movs	r7, r0
	radio_scan_data = radio_scan_data_get();
    8662:	f7ff f985 	bl	7970 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
    8666:	003b      	movs	r3, r7
    8668:	334f      	adds	r3, #79	; 0x4f
	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    866a:	781c      	ldrb	r4, [r3, #0]

	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
    866c:	0006      	movs	r6, r0
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    866e:	2527      	movs	r5, #39	; 0x27
    8670:	0020      	movs	r0, r4
			[radio_scan_data->last][0];

	if (0) {

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    8672:	230f      	movs	r3, #15
	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    8674:	4368      	muls	r0, r5
    8676:	183c      	adds	r4, r7, r0
			[radio_scan_data->last][0];

	if (0) {

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    8678:	7820      	ldrb	r0, [r4, #0]
    867a:	4003      	ands	r3, r0
    867c:	2b07      	cmp	r3, #7
    867e:	d10a      	bne.n	8696 <ll_adv_enable+0x46>
		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* AdvA, fill here at enable */
		if (h->adv_addr) {
    8680:	78e3      	ldrb	r3, [r4, #3]
    8682:	07db      	lsls	r3, r3, #31
    8684:	d521      	bpl.n	86ca <ll_adv_enable+0x7a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    8686:	0640      	lsls	r0, r0, #25
    8688:	2100      	movs	r1, #0
    868a:	0fc0      	lsrs	r0, r0, #31
    868c:	f7ff fd82 	bl	8194 <ll_addr_get>
    8690:	0001      	movs	r1, r0
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
    8692:	1d20      	adds	r0, r4, #4
    8694:	e016      	b.n	86c4 <ll_adv_enable+0x74>
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
			[radio_scan_data->last][0];
    8696:	0033      	movs	r3, r6
			priv = true;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
    8698:	0640      	lsls	r0, r0, #25
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
			[radio_scan_data->last][0];
    869a:	334f      	adds	r3, #79	; 0x4f
			priv = true;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
    869c:	2100      	movs	r1, #0
    869e:	0fc0      	lsrs	r0, r0, #31
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
			[radio_scan_data->last][0];
    86a0:	781f      	ldrb	r7, [r3, #0]
			priv = true;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
    86a2:	f7ff fd77 	bl	8194 <ll_addr_get>
			ll_rl_pdu_adv_update(idx, pdu_scan);
			priv = true;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
    86a6:	2206      	movs	r2, #6
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
    86a8:	0001      	movs	r1, r0
			ll_rl_pdu_adv_update(idx, pdu_scan);
			priv = true;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
    86aa:	1ca0      	adds	r0, r4, #2
    86ac:	f7f8 fc44 	bl	f38 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
    86b0:	7820      	ldrb	r0, [r4, #0]
    86b2:	2100      	movs	r1, #0
    86b4:	0640      	lsls	r0, r0, #25
    86b6:	0fc0      	lsrs	r0, r0, #31
    86b8:	f7ff fd6c 	bl	8194 <ll_addr_get>
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    86bc:	437d      	muls	r5, r7
    86be:	1976      	adds	r6, r6, r5
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
    86c0:	0001      	movs	r1, r0
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
    86c2:	1cb0      	adds	r0, r6, #2
    86c4:	2206      	movs	r2, #6
    86c6:	f7f8 fc37 	bl	f38 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval, ll_adv.chl_map,
				  ll_adv.filter_policy);
    86ca:	4906      	ldr	r1, [pc, #24]	; (86e4 <ll_adv_enable+0x94>)
    86cc:	7808      	ldrb	r0, [r1, #0]
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval, ll_adv.chl_map,
    86ce:	6849      	ldr	r1, [r1, #4]
				  ll_adv.filter_policy);
    86d0:	06c3      	lsls	r3, r0, #27
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval, ll_adv.chl_map,
    86d2:	0742      	lsls	r2, r0, #29
    86d4:	0f9b      	lsrs	r3, r3, #30
    86d6:	0f52      	lsrs	r2, r2, #29
    86d8:	b289      	uxth	r1, r1
    86da:	0940      	lsrs	r0, r0, #5
    86dc:	f7ff fa7c 	bl	7bd8 <radio_adv_enable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chl_map,
				  ll_adv.filter_policy);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
}
    86e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    86e2:	46c0      	nop			; (mov r8, r8)
    86e4:	20000dcc 	.word	0x20000dcc

000086e8 <net_buf_pool_get>:
/* Linker-defined symbol bound to the static pool structs */
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
    86e8:	2324      	movs	r3, #36	; 0x24
    86ea:	4358      	muls	r0, r3
    86ec:	4b01      	ldr	r3, [pc, #4]	; (86f4 <net_buf_pool_get+0xc>)
    86ee:	18c0      	adds	r0, r0, r3
}
    86f0:	4770      	bx	lr
    86f2:	46c0      	nop			; (mov r8, r8)
    86f4:	200002d0 	.word	0x200002d0

000086f8 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
    86f8:	b570      	push	{r4, r5, r6, lr}
    86fa:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    86fc:	f3ef 8510 	mrs	r5, PRIMASK
    8700:	b672      	cpsid	i
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    8702:	8ac3      	ldrh	r3, [r0, #22]
    8704:	2b00      	cmp	r3, #0
    8706:	d028      	beq.n	875a <net_buf_alloc+0x62>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    8708:	8a82      	ldrh	r2, [r0, #20]
    870a:	429a      	cmp	r2, r3
    870c:	d908      	bls.n	8720 <net_buf_alloc+0x28>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    870e:	2100      	movs	r1, #0
    8710:	f000 fe30 	bl	9374 <k_queue_get>
			if (buf) {
    8714:	2800      	cmp	r0, #0
    8716:	d003      	beq.n	8720 <net_buf_alloc+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    8718:	2d00      	cmp	r5, #0
    871a:	d126      	bne.n	876a <net_buf_alloc+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    871c:	b662      	cpsie	i
    871e:	e024      	b.n	876a <net_buf_alloc+0x72>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
    8720:	8ae0      	ldrh	r0, [r4, #22]
    8722:	1e43      	subs	r3, r0, #1
    8724:	82e3      	strh	r3, [r4, #22]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    8726:	2d00      	cmp	r5, #0
    8728:	d100      	bne.n	872c <net_buf_alloc+0x34>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    872a:	b662      	cpsie	i
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
    872c:	2103      	movs	r1, #3
    872e:	8b23      	ldrh	r3, [r4, #24]
    8730:	8b62      	ldrh	r2, [r4, #26]
    8732:	3303      	adds	r3, #3
    8734:	1852      	adds	r2, r2, r1
    8736:	438a      	bics	r2, r1
    8738:	438b      	bics	r3, r1
    873a:	189b      	adds	r3, r3, r2
    873c:	8aa2      	ldrh	r2, [r4, #20]
    873e:	3310      	adds	r3, #16
    8740:	1a10      	subs	r0, r2, r0
    8742:	4358      	muls	r0, r3
    8744:	6a23      	ldr	r3, [r4, #32]

	buf->pool_id = pool_id(pool);
    8746:	4a0e      	ldr	r2, [pc, #56]	; (8780 <net_buf_alloc+0x88>)
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
    8748:	1818      	adds	r0, r3, r0

	buf->pool_id = pool_id(pool);
    874a:	4b0e      	ldr	r3, [pc, #56]	; (8784 <net_buf_alloc+0x8c>)
    874c:	1ae3      	subs	r3, r4, r3
    874e:	109b      	asrs	r3, r3, #2
    8750:	4353      	muls	r3, r2
    8752:	7183      	strb	r3, [r0, #6]
	buf->size = pool->buf_size;
    8754:	8b23      	ldrh	r3, [r4, #24]
    8756:	81c3      	strh	r3, [r0, #14]

		uninit_count = pool->uninit_count--;
		irq_unlock(key);

		buf = pool_get_uninit(pool, uninit_count);
		goto success;
    8758:	e007      	b.n	876a <net_buf_alloc+0x72>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    875a:	2d00      	cmp	r5, #0
    875c:	d100      	bne.n	8760 <net_buf_alloc+0x68>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    875e:	b662      	cpsie	i
		}
	} else {
		buf = k_lifo_get(&pool->free, timeout);
	}
#else
	buf = k_lifo_get(&pool->free, timeout);
    8760:	0020      	movs	r0, r4
    8762:	f000 fe07 	bl	9374 <k_queue_get>
#endif
	if (!buf) {
    8766:	2800      	cmp	r0, #0
    8768:	d008      	beq.n	877c <net_buf_alloc+0x84>
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
    876a:	2301      	movs	r3, #1
    876c:	7103      	strb	r3, [r0, #4]
	buf->flags = 0;
    876e:	2300      	movs	r3, #0
    8770:	7143      	strb	r3, [r0, #5]
	buf->frags = NULL;
    8772:	6003      	str	r3, [r0, #0]
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
    8774:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
    8776:	0003      	movs	r3, r0
    8778:	3310      	adds	r3, #16
    877a:	6083      	str	r3, [r0, #8]
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    877c:	bd70      	pop	{r4, r5, r6, pc}
    877e:	46c0      	nop			; (mov r8, r8)
    8780:	38e38e39 	.word	0x38e38e39
    8784:	200002d0 	.word	0x200002d0

00008788 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    8788:	0003      	movs	r3, r0
    878a:	3310      	adds	r3, #16
    878c:	1859      	adds	r1, r3, r1
    878e:	6081      	str	r1, [r0, #8]
}
    8790:	4770      	bx	lr

00008792 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    8792:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    8794:	000a      	movs	r2, r1
		tail->flags |= NET_BUF_FRAGS;
    8796:	2501      	movs	r5, #1
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    8798:	6814      	ldr	r4, [r2, #0]
    879a:	2c00      	cmp	r4, #0
    879c:	d004      	beq.n	87a8 <net_buf_put+0x16>
		tail->flags |= NET_BUF_FRAGS;
    879e:	7953      	ldrb	r3, [r2, #5]
    87a0:	432b      	orrs	r3, r5
    87a2:	7153      	strb	r3, [r2, #5]
    87a4:	0022      	movs	r2, r4
    87a6:	e7f7      	b.n	8798 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
    87a8:	f000 fda0 	bl	92ec <k_queue_append_list>
}
    87ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000087b0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    87b0:	b570      	push	{r4, r5, r6, lr}
    87b2:	0001      	movs	r1, r0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    87b4:	2424      	movs	r4, #36	; 0x24
void net_buf_unref(struct net_buf *buf)
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
    87b6:	2900      	cmp	r1, #0
    87b8:	d015      	beq.n	87e6 <net_buf_unref+0x36>
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
    87ba:	790b      	ldrb	r3, [r1, #4]
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
		struct net_buf *frags = buf->frags;
    87bc:	680d      	ldr	r5, [r1, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
    87be:	3b01      	subs	r3, #1
    87c0:	b2db      	uxtb	r3, r3
    87c2:	710b      	strb	r3, [r1, #4]
    87c4:	2b00      	cmp	r3, #0
    87c6:	d10e      	bne.n	87e6 <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    87c8:	7988      	ldrb	r0, [r1, #6]

		if (--buf->ref > 0) {
			return;
		}

		buf->frags = NULL;
    87ca:	600b      	str	r3, [r1, #0]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    87cc:	4360      	muls	r0, r4
    87ce:	4b06      	ldr	r3, [pc, #24]	; (87e8 <net_buf_unref+0x38>)
    87d0:	1818      	adds	r0, r3, r0
    87d2:	69c3      	ldr	r3, [r0, #28]
    87d4:	2b00      	cmp	r3, #0
    87d6:	d002      	beq.n	87de <net_buf_unref+0x2e>
			pool->destroy(buf);
    87d8:	0008      	movs	r0, r1
    87da:	4798      	blx	r3
    87dc:	e001      	b.n	87e2 <net_buf_unref+0x32>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    87de:	f000 fd7f 	bl	92e0 <k_queue_prepend>
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    87e2:	0029      	movs	r1, r5
    87e4:	e7e7      	b.n	87b6 <net_buf_unref+0x6>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    87e6:	bd70      	pop	{r4, r5, r6, pc}
    87e8:	200002d0 	.word	0x200002d0

000087ec <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    87ec:	7903      	ldrb	r3, [r0, #4]
    87ee:	3301      	adds	r3, #1
    87f0:	7103      	strb	r3, [r0, #4]
	return buf;
}
    87f2:	4770      	bx	lr

000087f4 <net_buf_simple_add>:
 *
 *  @return Tail pointer for the buffer.
 */
static inline u8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
    87f4:	8882      	ldrh	r2, [r0, #4]
    87f6:	6803      	ldr	r3, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    87f8:	1851      	adds	r1, r2, r1
    87fa:	189b      	adds	r3, r3, r2
    87fc:	8081      	strh	r1, [r0, #4]
	return tail;
}
    87fe:	0018      	movs	r0, r3
    8800:	4770      	bx	lr

00008802 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    8802:	b510      	push	{r4, lr}
    8804:	0004      	movs	r4, r0
    8806:	8883      	ldrh	r3, [r0, #4]
    8808:	6800      	ldr	r0, [r0, #0]
    880a:	18c0      	adds	r0, r0, r3

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    880c:	189b      	adds	r3, r3, r2
    880e:	80a3      	strh	r3, [r4, #4]
void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    8810:	f7f8 fb92 	bl	f38 <memcpy>
}
    8814:	bd10      	pop	{r4, pc}

00008816 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    8816:	8883      	ldrh	r3, [r0, #4]
    8818:	1a5b      	subs	r3, r3, r1
    881a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    881c:	6803      	ldr	r3, [r0, #0]
    881e:	1859      	adds	r1, r3, r1
    8820:	6001      	str	r1, [r0, #0]
}
    8822:	0008      	movs	r0, r1
    8824:	4770      	bx	lr

00008826 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    8826:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
    8828:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    882a:	2101      	movs	r1, #1

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
	u8_t val;

	val = buf->data[0];
    882c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
    882e:	f7ff fff2 	bl	8816 <net_buf_simple_pull>

	return val;
}
    8832:	0020      	movs	r0, r4
    8834:	bd10      	pop	{r4, pc}

00008836 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    8836:	0002      	movs	r2, r0
    8838:	6803      	ldr	r3, [r0, #0]
    883a:	3208      	adds	r2, #8
    883c:	1a98      	subs	r0, r3, r2
}
    883e:	4770      	bx	lr

00008840 <nordicsemi_nrf51_init>:
static bool ftpan_59(void);

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK;

static int nordicsemi_nrf51_init(struct device *arg)
{
    8840:	b530      	push	{r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    8842:	f3ef 8010 	mrs	r0, PRIMASK
    8846:	b672      	cpsid	i
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    8848:	4a1e      	ldr	r2, [pc, #120]	; (88c4 <nordicsemi_nrf51_init+0x84>)
    884a:	7813      	ldrb	r3, [r2, #0]
    884c:	0011      	movs	r1, r2
    884e:	2b01      	cmp	r3, #1
    8850:	d119      	bne.n	8886 <nordicsemi_nrf51_init+0x46>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
    8852:	4b1d      	ldr	r3, [pc, #116]	; (88c8 <nordicsemi_nrf51_init+0x88>)
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    8854:	681b      	ldr	r3, [r3, #0]
    8856:	071b      	lsls	r3, r3, #28
    8858:	d115      	bne.n	8886 <nordicsemi_nrf51_init+0x46>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
    885a:	4b1c      	ldr	r3, [pc, #112]	; (88cc <nordicsemi_nrf51_init+0x8c>)
    885c:	25e0      	movs	r5, #224	; 0xe0
    885e:	681a      	ldr	r2, [r3, #0]
    8860:	23f0      	movs	r3, #240	; 0xf0
    8862:	0014      	movs	r4, r2
    8864:	401c      	ands	r4, r3
    8866:	422a      	tst	r2, r5
    8868:	d10b      	bne.n	8882 <nordicsemi_nrf51_init+0x42>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
    886a:	4a19      	ldr	r2, [pc, #100]	; (88d0 <nordicsemi_nrf51_init+0x90>)

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
    886c:	6812      	ldr	r2, [r2, #0]
    886e:	421a      	tst	r2, r3
    8870:	d109      	bne.n	8886 <nordicsemi_nrf51_init+0x46>
	 * instructions in the devices that do not need it is that the new
	 * peripherals in the second generation devices (LPCOMP for example)
	 * will not be available.
	 */
	if (ftpan_26()) {
		*(volatile u32_t *)0x40000504 = 0xC007FFDF;
    8872:	4a18      	ldr	r2, [pc, #96]	; (88d4 <nordicsemi_nrf51_init+0x94>)
    8874:	4b18      	ldr	r3, [pc, #96]	; (88d8 <nordicsemi_nrf51_init+0x98>)
    8876:	601a      	str	r2, [r3, #0]
		*(volatile u32_t *)0x40006C18 = 0x00008000;
    8878:	2280      	movs	r2, #128	; 0x80
    887a:	4b18      	ldr	r3, [pc, #96]	; (88dc <nordicsemi_nrf51_init+0x9c>)
    887c:	0212      	lsls	r2, r2, #8
    887e:	601a      	str	r2, [r3, #0]
    8880:	e001      	b.n	8886 <nordicsemi_nrf51_init+0x46>
		}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x10) &&
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
    8882:	2c30      	cmp	r4, #48	; 0x30
    8884:	d0f1      	beq.n	886a <nordicsemi_nrf51_init+0x2a>
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    8886:	680b      	ldr	r3, [r1, #0]
    8888:	b2db      	uxtb	r3, r3
    888a:	2b01      	cmp	r3, #1
    888c:	d10d      	bne.n	88aa <nordicsemi_nrf51_init+0x6a>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
    888e:	4a0e      	ldr	r2, [pc, #56]	; (88c8 <nordicsemi_nrf51_init+0x88>)
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    8890:	6812      	ldr	r2, [r2, #0]
    8892:	0712      	lsls	r2, r2, #28
    8894:	d109      	bne.n	88aa <nordicsemi_nrf51_init+0x6a>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
    8896:	21f0      	movs	r1, #240	; 0xf0
    8898:	4a0c      	ldr	r2, [pc, #48]	; (88cc <nordicsemi_nrf51_init+0x8c>)
    889a:	6812      	ldr	r2, [r2, #0]
    889c:	400a      	ands	r2, r1
    889e:	2a40      	cmp	r2, #64	; 0x40
    88a0:	d103      	bne.n	88aa <nordicsemi_nrf51_init+0x6a>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
    88a2:	4a0b      	ldr	r2, [pc, #44]	; (88d0 <nordicsemi_nrf51_init+0x90>)

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
    88a4:	6812      	ldr	r2, [r2, #0]
    88a6:	420a      	tst	r2, r1
    88a8:	d003      	beq.n	88b2 <nordicsemi_nrf51_init+0x72>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    88aa:	2800      	cmp	r0, #0
    88ac:	d107      	bne.n	88be <nordicsemi_nrf51_init+0x7e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    88ae:	b662      	cpsie	i
	 */
	NMI_INIT();

	irq_unlock(key);

	return 0;
    88b0:	e005      	b.n	88be <nordicsemi_nrf51_init+0x7e>
	 * "MPU: Reset value of DISABLEINDEBUG register is incorrect" found
	 * at Product Anomaly document for your device found at
	 * https://www.nordicsemi.com/.
	 */
	if (ftpan_59()) {
		NRF_MPU->DISABLEINDEBUG =
    88b2:	22c1      	movs	r2, #193	; 0xc1
    88b4:	2180      	movs	r1, #128	; 0x80
    88b6:	00d2      	lsls	r2, r2, #3
    88b8:	05c9      	lsls	r1, r1, #23
    88ba:	508b      	str	r3, [r1, r2]
    88bc:	e7f5      	b.n	88aa <nordicsemi_nrf51_init+0x6a>
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    88be:	2000      	movs	r0, #0
    88c0:	bd30      	pop	{r4, r5, pc}
    88c2:	46c0      	nop			; (mov r8, r8)
    88c4:	f0000fe0 	.word	0xf0000fe0
    88c8:	f0000fe4 	.word	0xf0000fe4
    88cc:	f0000fe8 	.word	0xf0000fe8
    88d0:	f0000fec 	.word	0xf0000fec
    88d4:	c007ffdf 	.word	0xc007ffdf
    88d8:	40000504 	.word	0x40000504
    88dc:	40006c18 	.word	0x40006c18

000088e0 <_IntExit>:
SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _IntExit)

/* _IntExit falls through to _ExcExit (they are aliases of each other) */

#ifdef CONFIG_TIMESLICING
    push {lr}
    88e0:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    88e2:	f000 ff03 	bl	96ec <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    88e6:	bc01      	pop	{r0}
    mov lr, r0
    88e8:	4686      	mov	lr, r0
    88ea:	46c0      	nop			; (mov r8, r8)

000088ec <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    88ec:	4805      	ldr	r0, [pc, #20]	; (8904 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    88ee:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
    88f0:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
    88f2:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
    88f4:	d805      	bhi.n	8902 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    88f6:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
    88f8:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    88fa:	d002      	beq.n	8902 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    88fc:	4902      	ldr	r1, [pc, #8]	; (8908 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    88fe:	4a03      	ldr	r2, [pc, #12]	; (890c <_EXIT_EXC+0xa>)
    str r2, [r1]
    8900:	600a      	str	r2, [r1, #0]

00008902 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    8902:	4770      	bx	lr
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    8904:	20000e94 	.word	0x20000e94
    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    cmp r0, r1
    beq _EXIT_EXC

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    8908:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
    890c:	10000000 	.word	0x10000000

00008910 <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
    8910:	b5f0      	push	{r4, r5, r6, r7, lr}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8912:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
    8914:	2200      	movs	r2, #0
    8916:	2603      	movs	r6, #3
    8918:	25ff      	movs	r5, #255	; 0xff
    891a:	00a4      	lsls	r4, r4, #2
    891c:	0010      	movs	r0, r2
    891e:	002f      	movs	r7, r5
    8920:	4030      	ands	r0, r6
    8922:	00c0      	lsls	r0, r0, #3
    8924:	4087      	lsls	r7, r0
    8926:	0893      	lsrs	r3, r2, #2
    8928:	4904      	ldr	r1, [pc, #16]	; (893c <_IntLibInit+0x2c>)
    892a:	009b      	lsls	r3, r3, #2
    892c:	185b      	adds	r3, r3, r1
    892e:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    8930:	3201      	adds	r2, #1
    8932:	43b9      	bics	r1, r7
    8934:	5119      	str	r1, [r3, r4]
    8936:	2a1a      	cmp	r2, #26
    8938:	d1f0      	bne.n	891c <_IntLibInit+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    893a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    893c:	e000e100 	.word	0xe000e100

00008940 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    8940:	4913      	ldr	r1, [pc, #76]	; (8990 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    8942:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    8944:	2028      	movs	r0, #40	; 0x28
    add r0, r2
    8946:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    8948:	f3ef 8c09 	mrs	ip, PSP

#if defined(CONFIG_ARMV6_M)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
    894c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
    894e:	4643      	mov	r3, r8
    mov r4, r9
    8950:	464c      	mov	r4, r9
    mov r5, r10
    8952:	4655      	mov	r5, sl
    mov r6, r11
    8954:	465e      	mov	r6, fp
    mov r7, ip
    8956:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
    8958:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    895a:	4f0e      	ldr	r7, [pc, #56]	; (8994 <_thread_irq_disabled+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    895c:	4e0e      	ldr	r6, [pc, #56]	; (8998 <_thread_irq_disabled+0x26>)

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
    895e:	b672      	cpsid	i
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    8960:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    8962:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    8964:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    8966:	6d90      	ldr	r0, [r2, #88]	; 0x58
    movs.n r3, #0
    8968:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    896a:	6593      	str	r3, [r2, #88]	; 0x58
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
    896c:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
    896e:	d100      	bne.n	8972 <_thread_irq_disabled>
    cpsie i
    8970:	b662      	cpsie	i

00008972 <_thread_irq_disabled>:
_thread_irq_disabled:

    ldr r4, =_thread_offset_to_callee_saved
    8972:	2428      	movs	r4, #40	; 0x28
    adds r0, r2, r4
    8974:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
    8976:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
    8978:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
    897a:	4698      	mov	r8, r3
    mov r9, r4
    897c:	46a1      	mov	r9, r4
    mov r10, r5
    897e:	46aa      	mov	sl, r5
    mov r11, r6
    8980:	46b3      	mov	fp, r6
    mov ip, r7
    8982:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    8984:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
    8986:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ldmia r0, {v1-v8, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
    8988:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif
#endif

    /* exc return */
    bx lr
    898c:	4770      	bx	lr
    898e:	0000      	.short	0x0000
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    8990:	20000e94 	.word	0x20000e94
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    8994:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
    8998:	08000000 	.word	0x08000000

0000899c <__svc>:
#if defined(CONFIG_ARMV6_M)
SECTION_FUNC(TEXT, __svc)
    /* Use EXC_RETURN state to find out if stack frame is on the
     * MSP or PSP
     */
    ldr r0, =0x4
    899c:	2004      	movs	r0, #4
    mov r1, lr
    899e:	4671      	mov	r1, lr
    tst r1, r0
    89a0:	4201      	tst	r1, r0
    beq _stack_frame_msp
    89a2:	d002      	beq.n	89aa <_stack_frame_msp>
    mrs r0, PSP
    89a4:	f3ef 8009 	mrs	r0, PSP
    bne _stack_frame_endif
    89a8:	d101      	bne.n	89ae <_stack_frame_endif>

000089aa <_stack_frame_msp>:
_stack_frame_msp:
    mrs r0, MSP
    89aa:	f3ef 8008 	mrs	r0, MSP

000089ae <_stack_frame_endif>:
_stack_frame_endif:

    /* Figure out what SVC call number was invoked */
    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    89ae:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    subs r1, r1, #2
    89b0:	3902      	subs	r1, #2
    ldrb r1, [r1, #0]
    89b2:	7809      	ldrb	r1, [r1, #0]
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */

    cmp r1, #2
    89b4:	2902      	cmp	r1, #2
    beq _oops
    89b6:	d000      	beq.n	89ba <_oops>
    pop {r3}
    mov lr, r3
#endif

    /* exception return is done in _IntExit() */
    b _IntExit
    89b8:	e792      	b.n	88e0 <_IntExit>

000089ba <_oops>:

_oops:
    push {lr}
    89ba:	b500      	push	{lr}
    blx _do_kernel_oops
    89bc:	f000 f8d0 	bl	8b60 <_do_kernel_oops>
    pop {pc}
    89c0:	bd00      	pop	{pc}
    89c2:	46c0      	nop			; (mov r8, r8)

000089c4 <__swap>:
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
    89c4:	4905      	ldr	r1, [pc, #20]	; (89dc <__swap+0x18>)
    ldr r2, [r1, #_kernel_offset_to_current]
    89c6:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
    89c8:	6590      	str	r0, [r2, #88]	; 0x58

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
    89ca:	4905      	ldr	r1, [pc, #20]	; (89e0 <__swap+0x1c>)
    ldr r1, [r1]
    89cc:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
    89ce:	65d1      	str	r1, [r2, #92]	; 0x5c

#if defined(CONFIG_ARMV6_M)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
    89d0:	4904      	ldr	r1, [pc, #16]	; (89e4 <__swap+0x20>)
    ldr r3, =_SCS_ICSR_PENDSV
    89d2:	4b05      	ldr	r3, [pc, #20]	; (89e8 <__swap+0x24>)
    str r3, [r1, #0]
    89d4:	600b      	str	r3, [r1, #0]
    /* Unlock interrupts to allow PendSV, since it's running at prio 0xff
     *
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
    89d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
    89d8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    bx lr
    89da:	4770      	bx	lr
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
    89dc:	20000e94 	.word	0x20000e94

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
    89e0:	00009e70 	.word	0x00009e70

#if defined(CONFIG_ARMV6_M)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
    89e4:	e000ed04 	.word	0xe000ed04
    ldr r3, =_SCS_ICSR_PENDSV
    89e8:	10000000 	.word	0x10000000

000089ec <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
    89ec:	b510      	push	{r4, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    89ee:	4b03      	ldr	r3, [pc, #12]	; (89fc <_Fault+0x10>)
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
    89f0:	0001      	movs	r1, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    89f2:	2000      	movs	r0, #0
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    89f4:	685b      	ldr	r3, [r3, #4]

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    89f6:	f000 f8b9 	bl	8b6c <_SysFatalErrorHandler>
}
    89fa:	bd10      	pop	{r4, pc}
    89fc:	e000ed00 	.word	0xe000ed00

00008a00 <_FaultInit>:
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
}
    8a00:	4770      	bx	lr
	...

00008a04 <_arch_irq_enable>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8a04:	231f      	movs	r3, #31
    8a06:	4018      	ands	r0, r3
    8a08:	3b1e      	subs	r3, #30
    8a0a:	4083      	lsls	r3, r0
    8a0c:	4a01      	ldr	r2, [pc, #4]	; (8a14 <_arch_irq_enable+0x10>)
    8a0e:	6013      	str	r3, [r2, #0]
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
    8a10:	4770      	bx	lr
    8a12:	46c0      	nop			; (mov r8, r8)
    8a14:	e000e100 	.word	0xe000e100

00008a18 <_arch_irq_disable>:
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8a18:	231f      	movs	r3, #31
    8a1a:	4018      	ands	r0, r3
    8a1c:	3b1e      	subs	r3, #30
    8a1e:	4083      	lsls	r3, r0
    8a20:	4a01      	ldr	r2, [pc, #4]	; (8a28 <_arch_irq_disable+0x10>)
    8a22:	67d3      	str	r3, [r2, #124]	; 0x7c
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}
    8a24:	4770      	bx	lr
    8a26:	46c0      	nop			; (mov r8, r8)
    8a28:	e000e104 	.word	0xe000e104

00008a2c <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    8a2c:	0942      	lsrs	r2, r0, #5
    8a2e:	4b04      	ldr	r3, [pc, #16]	; (8a40 <_arch_irq_is_enabled+0x14>)
    8a30:	0092      	lsls	r2, r2, #2
    8a32:	58d2      	ldr	r2, [r2, r3]
    8a34:	231f      	movs	r3, #31
    8a36:	4003      	ands	r3, r0
    8a38:	2001      	movs	r0, #1
    8a3a:	4098      	lsls	r0, r3
    8a3c:	4010      	ands	r0, r2
}
    8a3e:	4770      	bx	lr
    8a40:	e000e100 	.word	0xe000e100

00008a44 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    8a44:	b243      	sxtb	r3, r0
 * and possibly one additional to support zero latency interrupts.
 *
 * @return N/A
 */
void _irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    8a46:	b570      	push	{r4, r5, r6, lr}
    8a48:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	da14      	bge.n	8a78 <_irq_priority_set+0x34>
    8a4e:	230f      	movs	r3, #15
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8a50:	b2c0      	uxtb	r0, r0
    8a52:	4003      	ands	r3, r0
    8a54:	3b08      	subs	r3, #8
    8a56:	4a12      	ldr	r2, [pc, #72]	; (8aa0 <_irq_priority_set+0x5c>)
    8a58:	089b      	lsrs	r3, r3, #2
    8a5a:	2403      	movs	r4, #3
    8a5c:	009b      	lsls	r3, r3, #2
    8a5e:	189b      	adds	r3, r3, r2
    8a60:	22ff      	movs	r2, #255	; 0xff
    8a62:	4020      	ands	r0, r4
    8a64:	40a0      	lsls	r0, r4
    8a66:	0014      	movs	r4, r2
    8a68:	400a      	ands	r2, r1
    8a6a:	4084      	lsls	r4, r0
    8a6c:	4082      	lsls	r2, r0
    8a6e:	69dd      	ldr	r5, [r3, #28]
    8a70:	43a5      	bics	r5, r4
    8a72:	432a      	orrs	r2, r5
    8a74:	61da      	str	r2, [r3, #28]
    8a76:	e011      	b.n	8a9c <_irq_priority_set+0x58>
    8a78:	4a0a      	ldr	r2, [pc, #40]	; (8aa4 <_irq_priority_set+0x60>)
    8a7a:	089b      	lsrs	r3, r3, #2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8a7c:	2503      	movs	r5, #3
    8a7e:	009b      	lsls	r3, r3, #2
    8a80:	189b      	adds	r3, r3, r2
    8a82:	22ff      	movs	r2, #255	; 0xff
    8a84:	4028      	ands	r0, r5
    8a86:	40a8      	lsls	r0, r5
    8a88:	0015      	movs	r5, r2
    8a8a:	24c0      	movs	r4, #192	; 0xc0
    8a8c:	4085      	lsls	r5, r0
    8a8e:	400a      	ands	r2, r1
    8a90:	4082      	lsls	r2, r0
    8a92:	00a4      	lsls	r4, r4, #2
    8a94:	591e      	ldr	r6, [r3, r4]
    8a96:	43ae      	bics	r6, r5
    8a98:	4332      	orrs	r2, r6
    8a9a:	511a      	str	r2, [r3, r4]
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
}
    8a9c:	bd70      	pop	{r4, r5, r6, pc}
    8a9e:	46c0      	nop			; (mov r8, r8)
    8aa0:	e000ed00 	.word	0xe000ed00
    8aa4:	e000e100 	.word	0xe000e100

00008aa8 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
    8aa8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	__reserved();
    8aaa:	f000 f841 	bl	8b30 <__hard_fault>
}
    8aae:	bd10      	pop	{r4, pc}

00008ab0 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    8ab0:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    8ab2:	f3ef 8410 	mrs	r4, PRIMASK
    8ab6:	b672      	cpsid	i
	__asm__ volatile("cpsid i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
    8ab8:	4b05      	ldr	r3, [pc, #20]	; (8ad0 <_arch_isr_direct_pm+0x20>)
    8aba:	6958      	ldr	r0, [r3, #20]
    8abc:	2800      	cmp	r0, #0
    8abe:	d003      	beq.n	8ac8 <_arch_isr_direct_pm+0x18>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    8ac0:	2200      	movs	r2, #0
    8ac2:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
    8ac4:	f000 f914 	bl	8cf0 <_sys_power_save_idle_exit>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    8ac8:	2c00      	cmp	r4, #0
    8aca:	d100      	bne.n	8ace <_arch_isr_direct_pm+0x1e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    8acc:	b662      	cpsie	i
	__asm__ volatile("cpsie i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

}
    8ace:	bd10      	pop	{r4, pc}
    8ad0:	20000e94 	.word	0x20000e94

00008ad4 <_new_thread>:

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    8ad4:	b570      	push	{r4, r5, r6, lr}
    8ad6:	001e      	movs	r6, r3

	__ASSERT(!((u32_t)pStackMem & (STACK_ALIGN - 1)),
		 "stack is not aligned properly\n"
		 "%d-byte alignment required\n", STACK_ALIGN);

	char *stackEnd = pStackMem + stackSize;
    8ad8:	188c      	adds	r4, r1, r2
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    8ada:	9b08      	ldr	r3, [sp, #32]
    8adc:	9907      	ldr	r1, [sp, #28]
    8ade:	2204      	movs	r2, #4

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    8ae0:	0005      	movs	r5, r0
    8ae2:	f001 f8c9 	bl	9c78 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
    8ae6:	2207      	movs	r2, #7
    8ae8:	4394      	bics	r4, r2
    8aea:	0022      	movs	r2, r4
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
    8aec:	2001      	movs	r0, #1

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    8aee:	2300      	movs	r3, #0
    8af0:	4909      	ldr	r1, [pc, #36]	; (8b18 <_new_thread+0x44>)

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
    8af2:	3a20      	subs	r2, #32
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
    8af4:	4381      	bics	r1, r0
    8af6:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
    8af8:	652b      	str	r3, [r5, #80]	; 0x50
    8afa:	6191      	str	r1, [r2, #24]
	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    8afc:	9904      	ldr	r1, [sp, #16]

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
	pInitCtx->a1 = (u32_t)pEntry;
    8afe:	6016      	str	r6, [r2, #0]
	pInitCtx->a2 = (u32_t)parameter1;
    8b00:	6051      	str	r1, [r2, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    8b02:	9905      	ldr	r1, [sp, #20]
    8b04:	6091      	str	r1, [r2, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    8b06:	9906      	ldr	r1, [sp, #24]
    8b08:	60d1      	str	r1, [r2, #12]
	pInitCtx->xpsr =
    8b0a:	2180      	movs	r1, #128	; 0x80
    8b0c:	0449      	lsls	r1, r1, #17
    8b0e:	61d1      	str	r1, [r2, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
    8b10:	64aa      	str	r2, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    8b12:	65ab      	str	r3, [r5, #88]	; 0x58
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */

	thread_monitor_init(thread);
}
    8b14:	bd70      	pop	{r4, r5, r6, pc}
    8b16:	46c0      	nop			; (mov r8, r8)
    8b18:	00009b45 	.word	0x00009b45

00008b1c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    8b1c:	4901      	ldr	r1, [pc, #4]	; (8b24 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    8b1e:	2210      	movs	r2, #16
	str r2, [r1]
    8b20:	600a      	str	r2, [r1, #0]
	bx lr
    8b22:	4770      	bx	lr
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    8b24:	e000ed10 	.word	0xe000ed10

00008b28 <k_cpu_idle>:
	pop {r0}
	mov lr, r0
#endif

#if defined(CONFIG_ARMV6_M)
	cpsie i
    8b28:	b662      	cpsie	i
	msr BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
    8b2a:	bf30      	wfi

	bx lr
    8b2c:	4770      	bx	lr
    8b2e:	46c0      	nop			; (mov r8, r8)

00008b30 <__hard_fault>:
#endif /* CONFIG_ARMV6_M */
SECTION_SUBSEC_FUNC(TEXT,__fault,__reserved)

#if defined(CONFIG_ARMV6_M)
	/* force unlock interrupts */
	cpsie i
    8b30:	b662      	cpsie	i

	/* Use EXC_RETURN state to find out if stack frame is on the
	 * MSP or PSP
	 */
	ldr r0, =0x4
    8b32:	2004      	movs	r0, #4
	mov r1, lr
    8b34:	4671      	mov	r1, lr
	tst r1, r0
    8b36:	4201      	tst	r1, r0
	beq _stack_frame_msp
    8b38:	d002      	beq.n	8b40 <_stack_frame_msp>
	mrs r0, PSP
    8b3a:	f3ef 8009 	mrs	r0, PSP
	bne _stack_frame_endif
    8b3e:	d101      	bne.n	8b44 <_stack_frame_endif>

00008b40 <_stack_frame_msp>:
_stack_frame_msp:
	mrs r0, MSP
    8b40:	f3ef 8008 	mrs	r0, MSP

00008b44 <_stack_frame_endif>:
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
    8b44:	b500      	push	{lr}
	bl _Fault
    8b46:	f7ff ff51 	bl	89ec <_Fault>

	pop {pc}
    8b4a:	bd00      	pop	{pc}

00008b4c <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    8b4c:	b570      	push	{r4, r5, r6, lr}
    8b4e:	000d      	movs	r5, r1
    8b50:	0004      	movs	r4, r0

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    8b52:	f000 fd9b 	bl	968c <k_current_get>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    8b56:	0029      	movs	r1, r5
    8b58:	0020      	movs	r0, r4
    8b5a:	f000 f807 	bl	8b6c <_SysFatalErrorHandler>
}
    8b5e:	bd70      	pop	{r4, r5, r6, pc}

00008b60 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    8b60:	b510      	push	{r4, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
    8b62:	0001      	movs	r1, r0
    8b64:	6800      	ldr	r0, [r0, #0]
    8b66:	f7ff fff1 	bl	8b4c <_NanoFatalErrorHandler>
}
    8b6a:	bd10      	pop	{r4, pc}

00008b6c <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
    8b6c:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    8b6e:	2805      	cmp	r0, #5
    8b70:	d00f      	beq.n	8b92 <_SysFatalErrorHandler+0x26>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    8b72:	f000 ffd5 	bl	9b20 <k_is_in_isr>
    8b76:	2800      	cmp	r0, #0
    8b78:	d002      	beq.n	8b80 <_SysFatalErrorHandler+0x14>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    8b7a:	f000 ffd1 	bl	9b20 <k_is_in_isr>
    8b7e:	e008      	b.n	8b92 <_SysFatalErrorHandler+0x26>
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    8b80:	f000 ffd8 	bl	9b34 <_is_thread_essential>
    8b84:	2800      	cmp	r0, #0
    8b86:	d1f8      	bne.n	8b7a <_SysFatalErrorHandler+0xe>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
		goto hang_system;
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
	k_thread_abort(_current);
    8b88:	4b03      	ldr	r3, [pc, #12]	; (8b98 <_SysFatalErrorHandler+0x2c>)
    8b8a:	6898      	ldr	r0, [r3, #8]
    8b8c:	f000 f806 	bl	8b9c <k_thread_abort>

	for (;;) {
		k_cpu_idle();
	}
	CODE_UNREACHABLE;
}
    8b90:	bd10      	pop	{r4, pc}
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    8b92:	f7ff ffc9 	bl	8b28 <k_cpu_idle>
    8b96:	e7fc      	b.n	8b92 <_SysFatalErrorHandler+0x26>
    8b98:	20000e94 	.word	0x20000e94

00008b9c <k_thread_abort>:
#include <wait_q.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void k_thread_abort(k_tid_t thread)
{
    8b9c:	b570      	push	{r4, r5, r6, lr}
    8b9e:	0005      	movs	r5, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    8ba0:	f3ef 8410 	mrs	r4, PRIMASK
    8ba4:	b672      	cpsid	i
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
    8ba6:	f000 ffff 	bl	9ba8 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    8baa:	4b0b      	ldr	r3, [pc, #44]	; (8bd8 <k_thread_abort+0x3c>)
    8bac:	689b      	ldr	r3, [r3, #8]
    8bae:	429d      	cmp	r5, r3
    8bb0:	d10d      	bne.n	8bce <k_thread_abort+0x32>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    8bb2:	4b0a      	ldr	r3, [pc, #40]	; (8bdc <k_thread_abort+0x40>)
    8bb4:	685a      	ldr	r2, [r3, #4]
    8bb6:	05d2      	lsls	r2, r2, #23
    8bb8:	d104      	bne.n	8bc4 <k_thread_abort+0x28>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    8bba:	f000 fd97 	bl	96ec <_update_time_slice_before_swap>
#endif

	return __swap(key);
    8bbe:	0020      	movs	r0, r4
    8bc0:	f7ff ff00 	bl	89c4 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    8bc4:	2180      	movs	r1, #128	; 0x80
    8bc6:	685a      	ldr	r2, [r3, #4]
    8bc8:	0549      	lsls	r1, r1, #21
    8bca:	430a      	orrs	r2, r1
    8bcc:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    8bce:	0020      	movs	r0, r4
    8bd0:	f000 fcd0 	bl	9574 <_reschedule_threads>
}
    8bd4:	bd70      	pop	{r4, r5, r6, pc}
    8bd6:	46c0      	nop			; (mov r8, r8)
    8bd8:	20000e94 	.word	0x20000e94
    8bdc:	e000ed00 	.word	0xe000ed00

00008be0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    8be0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    8be2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    8be4:	4a0a      	ldr	r2, [pc, #40]	; (8c10 <_idle_state_cleared+0x1c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    8be6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    8be8:	2800      	cmp	r0, #0

#if defined(CONFIG_ARMV6_M)
	beq _idle_state_cleared
    8bea:	d003      	beq.n	8bf4 <_idle_state_cleared>
	movs.n r1, #0
    8bec:	2100      	movs	r1, #0
	/* clear kernel idle state */
	str r1, [r2, #_kernel_offset_to_idle]
    8bee:	6151      	str	r1, [r2, #20]
	blx _sys_power_save_idle_exit
    8bf0:	f000 f87e 	bl	8cf0 <_sys_power_save_idle_exit>

00008bf4 <_idle_state_cleared>:
		blxne	_sys_power_save_idle_exit
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    8bf4:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    8bf6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
    8bfa:	2110      	movs	r1, #16
	subs r0, r1	/* get IRQ number */
    8bfc:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
    8bfe:	00c0      	lsls	r0, r0, #3
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
    8c00:	4904      	ldr	r1, [pc, #16]	; (8c14 <_idle_state_cleared+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    8c02:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    8c04:	c909      	ldmia	r1!, {r0, r3}
	pop {r3}
#else
	pop {lr}
#endif
#endif
	blx r3		/* call ISR */
    8c06:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
    8c08:	bc08      	pop	{r3}
	mov lr, r3
    8c0a:	469e      	mov	lr, r3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
    8c0c:	e668      	b.n	88e0 <_IntExit>
    8c0e:	0000      	.short	0x0000
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    8c10:	20000e94 	.word	0x20000e94
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
    8c14:	000000a8 	.word	0x000000a8

00008c18 <__reset>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
    8c18:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
    8c1a:	4804      	ldr	r0, [pc, #16]	; (8c2c <__reset+0x14>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    8c1c:	4904      	ldr	r1, [pc, #16]	; (8c30 <__reset+0x18>)
    adds r0, r0, r1
    8c1e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    8c20:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    8c24:	2002      	movs	r0, #2
    msr CONTROL, r0
    8c26:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    8c2a:	e005      	b.n	8c38 <_PrepC>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
    8c2c:	20002034 	.word	0x20002034
    ldr r1, =CONFIG_ISR_STACK_SIZE
    8c30:	00000800 	.word	0x00000800

00008c34 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    8c34:	bf30      	wfi
    b _SysNmiOnReset
    8c36:	e7fd      	b.n	8c34 <_SysNmiOnReset>

00008c38 <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
    8c38:	b510      	push	{r4, lr}
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    8c3a:	f000 f887 	bl	8d4c <_bss_zero>
	_data_copy();
    8c3e:	f000 f891 	bl	8d64 <_data_copy>
	_Cstart();
    8c42:	f000 f8b1 	bl	8da8 <_Cstart>

00008c46 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    8c46:	b510      	push	{r4, lr}
	handler();
    8c48:	f7ff fff4 	bl	8c34 <_SysNmiOnReset>
	_ExcExit();
    8c4c:	f7ff fe4e 	bl	88ec <_ExcExit>
}
    8c50:	bd10      	pop	{r4, pc}

00008c52 <atomic_get>:
 *
 * @return The value read from <target>
 */
atomic_val_t atomic_get(const atomic_t *target)
{
	return *target;
    8c52:	6800      	ldr	r0, [r0, #0]
}
    8c54:	4770      	bx	lr

00008c56 <atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
    8c56:	0003      	movs	r3, r0
    8c58:	f3ef 8210 	mrs	r2, PRIMASK
    8c5c:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    8c5e:	6800      	ldr	r0, [r0, #0]
	*target = value;
    8c60:	6019      	str	r1, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    8c62:	2a00      	cmp	r2, #0
    8c64:	d100      	bne.n	8c68 <atomic_set+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    8c66:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    8c68:	4770      	bx	lr

00008c6a <atomic_or>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    8c6a:	f3ef 8210 	mrs	r2, PRIMASK
    8c6e:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    8c70:	6803      	ldr	r3, [r0, #0]
	*target |= value;
    8c72:	4319      	orrs	r1, r3
    8c74:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    8c76:	2a00      	cmp	r2, #0
    8c78:	d100      	bne.n	8c7c <atomic_or+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    8c7a:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    8c7c:	0018      	movs	r0, r3
    8c7e:	4770      	bx	lr

00008c80 <atomic_and>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    8c80:	f3ef 8210 	mrs	r2, PRIMASK
    8c84:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    8c86:	6803      	ldr	r3, [r0, #0]
	*target &= value;
    8c88:	4019      	ands	r1, r3
    8c8a:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    8c8c:	2a00      	cmp	r2, #0
    8c8e:	d100      	bne.n	8c92 <atomic_and+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    8c90:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    8c92:	0018      	movs	r0, r3
    8c94:	4770      	bx	lr
	...

00008c98 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    8c98:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    8c9a:	4e07      	ldr	r6, [pc, #28]	; (8cb8 <_sys_device_do_config_level+0x20>)
    8c9c:	0083      	lsls	r3, r0, #2
    8c9e:	599d      	ldr	r5, [r3, r6]
    8ca0:	3001      	adds	r0, #1
    8ca2:	0084      	lsls	r4, r0, #2
    8ca4:	5933      	ldr	r3, [r6, r4]
    8ca6:	429d      	cmp	r5, r3
    8ca8:	d205      	bcs.n	8cb6 <_sys_device_do_config_level+0x1e>
								info++) {
		struct device_config *device = info->config;

		device->init(info);
    8caa:	682b      	ldr	r3, [r5, #0]
    8cac:	0028      	movs	r0, r5
    8cae:	685b      	ldr	r3, [r3, #4]
    8cb0:	4798      	blx	r3
void _sys_device_do_config_level(int level)
{
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
								info++) {
    8cb2:	350c      	adds	r5, #12
    8cb4:	e7f6      	b.n	8ca4 <_sys_device_do_config_level+0xc>
		struct device_config *device = info->config;

		device->init(info);
	}
}
    8cb6:	bd70      	pop	{r4, r5, r6, pc}
    8cb8:	00009e5c 	.word	0x00009e5c

00008cbc <device_get_binding>:

struct device *device_get_binding(const char *name)
{
    8cbc:	b570      	push	{r4, r5, r6, lr}
    8cbe:	0005      	movs	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
    8cc0:	4c09      	ldr	r4, [pc, #36]	; (8ce8 <device_get_binding+0x2c>)
    8cc2:	4b0a      	ldr	r3, [pc, #40]	; (8cec <device_get_binding+0x30>)
    8cc4:	429c      	cmp	r4, r3
    8cc6:	d00d      	beq.n	8ce4 <device_get_binding+0x28>
		if (info->driver_api && !strcmp(name, info->config->name)) {
    8cc8:	6863      	ldr	r3, [r4, #4]
    8cca:	2b00      	cmp	r3, #0
    8ccc:	d101      	bne.n	8cd2 <device_get_binding+0x16>

struct device *device_get_binding(const char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
    8cce:	340c      	adds	r4, #12
    8cd0:	e7f7      	b.n	8cc2 <device_get_binding+0x6>
		if (info->driver_api && !strcmp(name, info->config->name)) {
    8cd2:	6823      	ldr	r3, [r4, #0]
    8cd4:	0028      	movs	r0, r5
    8cd6:	6819      	ldr	r1, [r3, #0]
    8cd8:	f7f8 f90d 	bl	ef6 <strcmp>
    8cdc:	2800      	cmp	r0, #0
    8cde:	d1f6      	bne.n	8cce <device_get_binding+0x12>
    8ce0:	0020      	movs	r0, r4
    8ce2:	e000      	b.n	8ce6 <device_get_binding+0x2a>
			return info;
		}
	}

	return NULL;
    8ce4:	2000      	movs	r0, #0
}
    8ce6:	bd70      	pop	{r4, r5, r6, pc}
    8ce8:	20000240 	.word	0x20000240
    8cec:	20000294 	.word	0x20000294

00008cf0 <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
    8cf0:	b510      	push	{r4, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    8cf2:	1c43      	adds	r3, r0, #1
    8cf4:	d003      	beq.n	8cfe <_sys_power_save_idle_exit+0xe>
    8cf6:	4b03      	ldr	r3, [pc, #12]	; (8d04 <_sys_power_save_idle_exit+0x14>)
    8cf8:	681b      	ldr	r3, [r3, #0]
    8cfa:	4298      	cmp	r0, r3
    8cfc:	db01      	blt.n	8d02 <_sys_power_save_idle_exit+0x12>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    8cfe:	f7f7 fdd7 	bl	8b0 <_timer_idle_exit>
	}
}
    8d02:	bd10      	pop	{r4, pc}
    8d04:	20000238 	.word	0x20000238

00008d08 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    8d08:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    8d0a:	f3ef 8310 	mrs	r3, PRIMASK
    8d0e:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8d10:	4d0b      	ldr	r5, [pc, #44]	; (8d40 <idle+0x38>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d12:	4a0c      	ldr	r2, [pc, #48]	; (8d44 <idle+0x3c>)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8d14:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d16:	4293      	cmp	r3, r2
    8d18:	d009      	beq.n	8d2e <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    8d1a:	2b00      	cmp	r3, #0
    8d1c:	d007      	beq.n	8d2e <idle+0x26>
    8d1e:	691c      	ldr	r4, [r3, #16]
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
    8d20:	1c63      	adds	r3, r4, #1
    8d22:	d006      	beq.n	8d32 <idle+0x2a>
    8d24:	4b08      	ldr	r3, [pc, #32]	; (8d48 <idle+0x40>)
    8d26:	681b      	ldr	r3, [r3, #0]
    8d28:	42a3      	cmp	r3, r4
    8d2a:	dd02      	ble.n	8d32 <idle+0x2a>
    8d2c:	e004      	b.n	8d38 <idle+0x30>
    8d2e:	2401      	movs	r4, #1
    8d30:	4264      	negs	r4, r4
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
    8d32:	0020      	movs	r0, r4
    8d34:	f7f7 fda6 	bl	884 <_timer_idle_enter>
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
    8d38:	616c      	str	r4, [r5, #20]
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
    8d3a:	f7ff fef5 	bl	8b28 <k_cpu_idle>
    8d3e:	e7e4      	b.n	8d0a <idle+0x2>
    8d40:	20000e94 	.word	0x20000e94
    8d44:	20000ea0 	.word	0x20000ea0
    8d48:	20000238 	.word	0x20000238

00008d4c <_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
    8d4c:	b510      	push	{r4, lr}
	memset(&__bss_start, 0,
    8d4e:	4803      	ldr	r0, [pc, #12]	; (8d5c <_bss_zero+0x10>)
    8d50:	4a03      	ldr	r2, [pc, #12]	; (8d60 <_bss_zero+0x14>)
    8d52:	2100      	movs	r1, #0
    8d54:	1a12      	subs	r2, r2, r0
    8d56:	f7f8 f919 	bl	f8c <memset>
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
}
    8d5a:	bd10      	pop	{r4, pc}
    8d5c:	20000318 	.word	0x20000318
    8d60:	2000110c 	.word	0x2000110c

00008d64 <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
    8d64:	b510      	push	{r4, lr}
	memcpy(&__data_ram_start, &__data_rom_start,
    8d66:	4803      	ldr	r0, [pc, #12]	; (8d74 <_data_copy+0x10>)
    8d68:	4a03      	ldr	r2, [pc, #12]	; (8d78 <_data_copy+0x14>)
    8d6a:	4904      	ldr	r1, [pc, #16]	; (8d7c <_data_copy+0x18>)
    8d6c:	1a12      	subs	r2, r2, r0
    8d6e:	f7f8 f8e3 	bl	f38 <memcpy>
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
}
    8d72:	bd10      	pop	{r4, pc}
    8d74:	20000000 	.word	0x20000000
    8d78:	20000318 	.word	0x20000318
    8d7c:	00009e78 	.word	0x00009e78

00008d80 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
    8d80:	b510      	push	{r4, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8d82:	2002      	movs	r0, #2
    8d84:	f7ff ff88 	bl	8c98 <_sys_device_do_config_level>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    8d88:	2003      	movs	r0, #3
    8d8a:	f7ff ff85 	bl	8c98 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    8d8e:	f000 ff33 	bl	9bf8 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    8d92:	f7f7 fcf5 	bl	780 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    8d96:	2101      	movs	r1, #1
    8d98:	4a02      	ldr	r2, [pc, #8]	; (8da4 <_main+0x24>)
    8d9a:	7a13      	ldrb	r3, [r2, #8]
    8d9c:	438b      	bics	r3, r1
    8d9e:	7213      	strb	r3, [r2, #8]
}
    8da0:	bd10      	pop	{r4, pc}
    8da2:	46c0      	nop			; (mov r8, r8)
    8da4:	20000dd4 	.word	0x20000dd4

00008da8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    8da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8daa:	b087      	sub	sp, #28
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
    8dac:	f7ff fdb0 	bl	8910 <_IntLibInit>
    8db0:	4b2f      	ldr	r3, [pc, #188]	; (8e70 <_Cstart+0xc8>)
    8db2:	4a30      	ldr	r2, [pc, #192]	; (8e74 <_Cstart+0xcc>)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    8db4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    8db6:	605b      	str	r3, [r3, #4]
    8db8:	3308      	adds	r3, #8

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    8dba:	429a      	cmp	r2, r3
    8dbc:	d1fa      	bne.n	8db4 <_Cstart+0xc>
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;

	_new_thread(_main_thread, _main_stack,
    8dbe:	2400      	movs	r4, #0
    8dc0:	2301      	movs	r3, #1
    8dc2:	2280      	movs	r2, #128	; 0x80
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
    8dc4:	4d2c      	ldr	r5, [pc, #176]	; (8e78 <_Cstart+0xd0>)
    8dc6:	4e2d      	ldr	r6, [pc, #180]	; (8e7c <_Cstart+0xd4>)

	_new_thread(_main_thread, _main_stack,
    8dc8:	492d      	ldr	r1, [pc, #180]	; (8e80 <_Cstart+0xd8>)
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
    8dca:	61b5      	str	r5, [r6, #24]

	_new_thread(_main_thread, _main_stack,
    8dcc:	0028      	movs	r0, r5
    8dce:	9304      	str	r3, [sp, #16]
    8dd0:	9403      	str	r4, [sp, #12]
    8dd2:	9402      	str	r4, [sp, #8]
    8dd4:	9401      	str	r4, [sp, #4]
    8dd6:	9400      	str	r4, [sp, #0]
    8dd8:	4b2a      	ldr	r3, [pc, #168]	; (8e84 <_Cstart+0xdc>)
    8dda:	00d2      	lsls	r2, r2, #3
    8ddc:	f7ff fe7a 	bl	8ad4 <_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8de0:	2204      	movs	r2, #4
    8de2:	7a6b      	ldrb	r3, [r5, #9]
		    MAIN_STACK_SIZE, _main, NULL, NULL, NULL,
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);
    8de4:	0028      	movs	r0, r5
    8de6:	4393      	bics	r3, r2
    8de8:	726b      	strb	r3, [r5, #9]
    8dea:	f000 fb19 	bl	9420 <_add_thread_to_ready_q>

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_thread, _idle_stack,
    8dee:	2301      	movs	r3, #1
    8df0:	2280      	movs	r2, #128	; 0x80
    8df2:	4f25      	ldr	r7, [pc, #148]	; (8e88 <_Cstart+0xe0>)
    8df4:	9304      	str	r3, [sp, #16]
    8df6:	330e      	adds	r3, #14
    8df8:	9303      	str	r3, [sp, #12]
    8dfa:	4924      	ldr	r1, [pc, #144]	; (8e8c <_Cstart+0xe4>)
    8dfc:	0038      	movs	r0, r7
    8dfe:	9402      	str	r4, [sp, #8]
    8e00:	9401      	str	r4, [sp, #4]
    8e02:	9400      	str	r4, [sp, #0]
    8e04:	4b22      	ldr	r3, [pc, #136]	; (8e90 <_Cstart+0xe8>)
    8e06:	0052      	lsls	r2, r2, #1
    8e08:	f7ff fe64 	bl	8ad4 <_new_thread>
    8e0c:	2204      	movs	r2, #4
    8e0e:	7a7b      	ldrb	r3, [r7, #9]
		    IDLE_STACK_SIZE, idle, NULL, NULL, NULL,
		    K_LOWEST_THREAD_PRIO, K_ESSENTIAL);
	_mark_thread_as_started(_idle_thread);
	_add_thread_to_ready_q(_idle_thread);
    8e10:	0038      	movs	r0, r7
    8e12:	4393      	bics	r3, r2
    8e14:	727b      	strb	r3, [r7, #9]
    8e16:	f000 fb03 	bl	9420 <_add_thread_to_ready_q>
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
    8e1a:	2280      	movs	r2, #128	; 0x80
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    8e1c:	4b1d      	ldr	r3, [pc, #116]	; (8e94 <_Cstart+0xec>)
    8e1e:	0112      	lsls	r2, r2, #4
    8e20:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
    8e22:	6133      	str	r3, [r6, #16]
    8e24:	4b1c      	ldr	r3, [pc, #112]	; (8e98 <_Cstart+0xf0>)
    8e26:	189b      	adds	r3, r3, r2
    8e28:	f383 8808 	msr	MSP, r3
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    8e2c:	4a1b      	ldr	r2, [pc, #108]	; (8e9c <_Cstart+0xf4>)
    8e2e:	4b1c      	ldr	r3, [pc, #112]	; (8ea0 <_Cstart+0xf8>)
    8e30:	6a11      	ldr	r1, [r2, #32]
    8e32:	400b      	ands	r3, r1
    8e34:	21c0      	movs	r1, #192	; 0xc0
    8e36:	0409      	lsls	r1, r1, #16
    8e38:	430b      	orrs	r3, r1
    8e3a:	6213      	str	r3, [r2, #32]
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    8e3c:	f7ff fde0 	bl	8a00 <_FaultInit>
	_CpuIdleInit();
    8e40:	f7ff fe6c 	bl	8b1c <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    8e44:	0020      	movs	r0, r4
    8e46:	f7ff ff27 	bl	8c98 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8e4a:	2001      	movs	r0, #1
    8e4c:	f7ff ff24 	bl	8c98 <_sys_device_do_config_level>

	_current = main_thread;

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    8e50:	2280      	movs	r2, #128	; 0x80
    8e52:	4b0b      	ldr	r3, [pc, #44]	; (8e80 <_Cstart+0xd8>)
    8e54:	00d2      	lsls	r2, r2, #3
    8e56:	189b      	adds	r3, r3, r2
    8e58:	2207      	movs	r2, #7
    8e5a:	490a      	ldr	r1, [pc, #40]	; (8e84 <_Cstart+0xdc>)
    8e5c:	4393      	bics	r3, r2
	char *start_of_main_stack;

	start_of_main_stack = main_stack + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    8e5e:	60b5      	str	r5, [r6, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    8e60:	4a10      	ldr	r2, [pc, #64]	; (8ea4 <_Cstart+0xfc>)
    8e62:	000c      	movs	r4, r1
    8e64:	f383 8809 	msr	PSP, r3
    8e68:	b662      	cpsie	i
    8e6a:	1c20      	adds	r0, r4, #0
    8e6c:	4710      	bx	r2
    8e6e:	46c0      	nop			; (mov r8, r8)
    8e70:	20000eb4 	.word	0x20000eb4
    8e74:	20000fb4 	.word	0x20000fb4
    8e78:	20000dd4 	.word	0x20000dd4
    8e7c:	20000e94 	.word	0x20000e94
    8e80:	20001b34 	.word	0x20001b34
    8e84:	00008d81 	.word	0x00008d81
    8e88:	20000e34 	.word	0x20000e34
    8e8c:	20001f34 	.word	0x20001f34
    8e90:	00008d09 	.word	0x00008d09
    8e94:	20000ea0 	.word	0x20000ea0
    8e98:	20002034 	.word	0x20002034
    8e9c:	e000ed00 	.word	0xe000ed00
    8ea0:	ff00ffff 	.word	0xff00ffff
    8ea4:	00009b45 	.word	0x00009b45

00008ea8 <adjust_owner_prio.isra.6>:
	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    8ea8:	230a      	movs	r3, #10
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    8eaa:	b570      	push	{r4, r5, r6, lr}
{
	if (mutex->owner->base.prio != new_prio) {
    8eac:	56c3      	ldrsb	r3, [r0, r3]
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    8eae:	0004      	movs	r4, r0
    8eb0:	000d      	movs	r5, r1
{
	if (mutex->owner->base.prio != new_prio) {
    8eb2:	428b      	cmp	r3, r1
    8eb4:	d00d      	beq.n	8ed2 <adjust_owner_prio.isra.6+0x2a>
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    8eb6:	7a43      	ldrb	r3, [r0, #9]
    8eb8:	06db      	lsls	r3, r3, #27
    8eba:	d109      	bne.n	8ed0 <adjust_owner_prio.isra.6+0x28>
    8ebc:	6a03      	ldr	r3, [r0, #32]
    8ebe:	3301      	adds	r3, #1
    8ec0:	d106      	bne.n	8ed0 <adjust_owner_prio.isra.6+0x28>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
    8ec2:	f000 fad5 	bl	9470 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
    8ec6:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
    8ec8:	0020      	movs	r0, r4
    8eca:	f000 faa9 	bl	9420 <_add_thread_to_ready_q>
    8ece:	e000      	b.n	8ed2 <adjust_owner_prio.isra.6+0x2a>
	} else {
		thread->base.prio = prio;
    8ed0:	72a5      	strb	r5, [r4, #10]
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
    8ed2:	bd70      	pop	{r4, r5, r6, pc}

00008ed4 <k_mutex_lock>:

int k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    8ed4:	b570      	push	{r4, r5, r6, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    8ed6:	4a2f      	ldr	r2, [pc, #188]	; (8f94 <k_mutex_lock+0xc0>)
    8ed8:	000d      	movs	r5, r1
    8eda:	6891      	ldr	r1, [r2, #8]
    8edc:	0004      	movs	r4, r0
    8ede:	7acb      	ldrb	r3, [r1, #11]
    8ee0:	3b01      	subs	r3, #1
    8ee2:	72cb      	strb	r3, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
    8ee4:	68c3      	ldr	r3, [r0, #12]
    8ee6:	0010      	movs	r0, r2
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d005      	beq.n	8ef8 <k_mutex_lock+0x24>
    8eec:	68a1      	ldr	r1, [r4, #8]
    8eee:	6892      	ldr	r2, [r2, #8]
    8ef0:	4291      	cmp	r1, r2
    8ef2:	d10d      	bne.n	8f10 <k_mutex_lock+0x3c>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
    8ef4:	6922      	ldr	r2, [r4, #16]
    8ef6:	e002      	b.n	8efe <k_mutex_lock+0x2a>
    8ef8:	6892      	ldr	r2, [r2, #8]
    8efa:	7a92      	ldrb	r2, [r2, #10]
    8efc:	b252      	sxtb	r2, r2
					mutex->owner_orig_prio;

		mutex->lock_count++;
    8efe:	3301      	adds	r3, #1
    8f00:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    8f02:	6883      	ldr	r3, [r0, #8]

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
    8f04:	6122      	str	r2, [r4, #16]
					_current->base.prio :
					mutex->owner_orig_prio;

		mutex->lock_count++;
		mutex->owner = _current;
    8f06:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
    8f08:	f000 fb4e 	bl	95a8 <k_sched_unlock>

		return 0;
    8f0c:	2000      	movs	r0, #0
    8f0e:	e040      	b.n	8f92 <k_mutex_lock+0xbe>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
    8f10:	2d00      	cmp	r5, #0
    8f12:	d103      	bne.n	8f1c <k_mutex_lock+0x48>
		k_sched_unlock();
    8f14:	f000 fb48 	bl	95a8 <k_sched_unlock>
		return -EBUSY;
    8f18:	2010      	movs	r0, #16
    8f1a:	e039      	b.n	8f90 <k_mutex_lock+0xbc>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8f1c:	230a      	movs	r3, #10
    8f1e:	56cb      	ldrsb	r3, [r1, r3]
    8f20:	210a      	movs	r1, #10
    8f22:	5651      	ldrsb	r1, [r2, r1]
    8f24:	4299      	cmp	r1, r3
    8f26:	dd00      	ble.n	8f2a <k_mutex_lock+0x56>
    8f28:	0019      	movs	r1, r3
    8f2a:	43cb      	mvns	r3, r1
    8f2c:	17db      	asrs	r3, r3, #31
    8f2e:	4019      	ands	r1, r3
    8f30:	f3ef 8610 	mrs	r6, PRIMASK
    8f34:	b672      	cpsid	i

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    8f36:	230a      	movs	r3, #10
    8f38:	68a0      	ldr	r0, [r4, #8]
    8f3a:	56c3      	ldrsb	r3, [r0, r3]
    8f3c:	428b      	cmp	r3, r1
    8f3e:	dd01      	ble.n	8f44 <k_mutex_lock+0x70>
		adjust_owner_prio(mutex, new_prio);
    8f40:	f7ff ffb2 	bl	8ea8 <adjust_owner_prio.isra.6>
	}

	_pend_current_thread(&mutex->wait_q, timeout);
    8f44:	0020      	movs	r0, r4
    8f46:	0029      	movs	r1, r5
    8f48:	f000 faf2 	bl	9530 <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    8f4c:	f000 fbce 	bl	96ec <_update_time_slice_before_swap>
#endif

	return __swap(key);
    8f50:	0030      	movs	r0, r6
    8f52:	f7ff fd37 	bl	89c4 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
    8f56:	2800      	cmp	r0, #0
    8f58:	d0d6      	beq.n	8f08 <k_mutex_lock+0x34>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8f5a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8f5c:	42a3      	cmp	r3, r4
    8f5e:	d100      	bne.n	8f62 <k_mutex_lock+0x8e>
    8f60:	2300      	movs	r3, #0
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
    8f62:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
    8f64:	2b00      	cmp	r3, #0
    8f66:	d007      	beq.n	8f78 <k_mutex_lock+0xa4>

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
    8f68:	7a9b      	ldrb	r3, [r3, #10]
    8f6a:	b25b      	sxtb	r3, r3
    8f6c:	4299      	cmp	r1, r3
    8f6e:	dd00      	ble.n	8f72 <k_mutex_lock+0x9e>
    8f70:	0019      	movs	r1, r3
    8f72:	43cb      	mvns	r3, r1
    8f74:	17db      	asrs	r3, r3, #31
    8f76:	4019      	ands	r1, r3
    8f78:	f3ef 8510 	mrs	r5, PRIMASK
    8f7c:	b672      	cpsid	i
						     new_prio) : new_prio;

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
    8f7e:	68a0      	ldr	r0, [r4, #8]
    8f80:	f7ff ff92 	bl	8ea8 <adjust_owner_prio.isra.6>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    8f84:	2d00      	cmp	r5, #0
    8f86:	d100      	bne.n	8f8a <k_mutex_lock+0xb6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    8f88:	b662      	cpsie	i
	irq_unlock(key);

	k_sched_unlock();
    8f8a:	f000 fb0d 	bl	95a8 <k_sched_unlock>

	return -EAGAIN;
    8f8e:	200b      	movs	r0, #11
    8f90:	4240      	negs	r0, r0
}
    8f92:	bd70      	pop	{r4, r5, r6, pc}
    8f94:	20000e94 	.word	0x20000e94

00008f98 <k_mutex_unlock>:

void k_mutex_unlock(struct k_mutex *mutex)
{
    8f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f9a:	4e34      	ldr	r6, [pc, #208]	; (906c <k_mutex_unlock+0xd4>)
    8f9c:	0005      	movs	r5, r0
    8f9e:	68b2      	ldr	r2, [r6, #8]
    8fa0:	7ad3      	ldrb	r3, [r2, #11]
    8fa2:	3b01      	subs	r3, #1
    8fa4:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    8fa6:	68c3      	ldr	r3, [r0, #12]
    8fa8:	3b01      	subs	r3, #1
    8faa:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
    8fac:	2b00      	cmp	r3, #0
    8fae:	d002      	beq.n	8fb6 <k_mutex_unlock+0x1e>
		k_sched_unlock();
    8fb0:	f000 fafa 	bl	95a8 <k_sched_unlock>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
    8fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    8fb6:	f3ef 8710 	mrs	r7, PRIMASK
    8fba:	b672      	cpsid	i
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    8fbc:	6901      	ldr	r1, [r0, #16]
    8fbe:	6880      	ldr	r0, [r0, #8]
    8fc0:	f7ff ff72 	bl	8ea8 <adjust_owner_prio.isra.6>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    8fc4:	4b2a      	ldr	r3, [pc, #168]	; (9070 <k_mutex_unlock+0xd8>)
    8fc6:	682c      	ldr	r4, [r5, #0]
    8fc8:	681b      	ldr	r3, [r3, #0]
    8fca:	2b00      	cmp	r3, #0
    8fcc:	d00b      	beq.n	8fe6 <k_mutex_unlock+0x4e>
    8fce:	42a5      	cmp	r5, r4
    8fd0:	d042      	beq.n	9058 <k_mutex_unlock+0xc0>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    8fd2:	2c00      	cmp	r4, #0
    8fd4:	d040      	beq.n	9058 <k_mutex_unlock+0xc0>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    8fd6:	6a23      	ldr	r3, [r4, #32]
    8fd8:	3302      	adds	r3, #2
    8fda:	d108      	bne.n	8fee <k_mutex_unlock+0x56>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    8fdc:	686b      	ldr	r3, [r5, #4]
    8fde:	42a3      	cmp	r3, r4
    8fe0:	d03a      	beq.n	9058 <k_mutex_unlock+0xc0>
    8fe2:	6824      	ldr	r4, [r4, #0]
    8fe4:	e7f5      	b.n	8fd2 <k_mutex_unlock+0x3a>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8fe6:	42a5      	cmp	r5, r4
    8fe8:	d036      	beq.n	9058 <k_mutex_unlock+0xc0>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    8fea:	2c00      	cmp	r4, #0
    8fec:	d034      	beq.n	9058 <k_mutex_unlock+0xc0>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    8fee:	6863      	ldr	r3, [r4, #4]
    8ff0:	6822      	ldr	r2, [r4, #0]
    8ff2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    8ff4:	6822      	ldr	r2, [r4, #0]
    8ff6:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    8ff8:	2202      	movs	r2, #2
    8ffa:	7a63      	ldrb	r3, [r4, #9]
    8ffc:	4393      	bics	r3, r2
    8ffe:	7263      	strb	r3, [r4, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9000:	6a23      	ldr	r3, [r4, #32]
    9002:	1c5a      	adds	r2, r3, #1
    9004:	d010      	beq.n	9028 <k_mutex_unlock+0x90>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    9006:	0022      	movs	r2, r4
    9008:	6931      	ldr	r1, [r6, #16]
    900a:	3210      	adds	r2, #16
    900c:	4291      	cmp	r1, r2
    900e:	d003      	beq.n	9018 <k_mutex_unlock+0x80>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9010:	6922      	ldr	r2, [r4, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    9012:	6911      	ldr	r1, [r2, #16]
    9014:	18cb      	adds	r3, r1, r3
    9016:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    9018:	6963      	ldr	r3, [r4, #20]
    901a:	6922      	ldr	r2, [r4, #16]
    901c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    901e:	6922      	ldr	r2, [r4, #16]
    9020:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    9022:	2301      	movs	r3, #1
    9024:	425b      	negs	r3, r3
    9026:	6223      	str	r3, [r4, #32]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9028:	7a63      	ldrb	r3, [r4, #9]
    902a:	2204      	movs	r2, #4
    902c:	0019      	movs	r1, r3
    902e:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    9030:	221b      	movs	r2, #27
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9032:	7261      	strb	r1, [r4, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    9034:	4213      	tst	r3, r2
    9036:	d102      	bne.n	903e <k_mutex_unlock+0xa6>
    9038:	6a23      	ldr	r3, [r4, #32]
    903a:	3301      	adds	r3, #1
    903c:	d012      	beq.n	9064 <k_mutex_unlock+0xcc>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    903e:	2f00      	cmp	r7, #0
    9040:	d100      	bne.n	9044 <k_mutex_unlock+0xac>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    9042:	b662      	cpsie	i
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    9044:	2300      	movs	r3, #0
    9046:	65e3      	str	r3, [r4, #92]	; 0x5c
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
		mutex->lock_count++;
    9048:	68eb      	ldr	r3, [r5, #12]
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
    904a:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
    904c:	3301      	adds	r3, #1
    904e:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
    9050:	230a      	movs	r3, #10
    9052:	56e3      	ldrsb	r3, [r4, r3]
    9054:	612b      	str	r3, [r5, #16]
    9056:	e7ab      	b.n	8fb0 <k_mutex_unlock+0x18>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    9058:	2f00      	cmp	r7, #0
    905a:	d100      	bne.n	905e <k_mutex_unlock+0xc6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    905c:	b662      	cpsie	i
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
    905e:	2300      	movs	r3, #0
    9060:	60ab      	str	r3, [r5, #8]
    9062:	e7a5      	b.n	8fb0 <k_mutex_unlock+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    9064:	0020      	movs	r0, r4
    9066:	f000 f9db 	bl	9420 <_add_thread_to_ready_q>
    906a:	e7e8      	b.n	903e <k_mutex_unlock+0xa6>
    906c:	20000e94 	.word	0x20000e94
    9070:	20001088 	.word	0x20001088

00009074 <_signal_poll_event>:

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
	*must_reschedule = 0;
    9074:	2300      	movs	r3, #0
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    9076:	b570      	push	{r4, r5, r6, lr}
	*must_reschedule = 0;
    9078:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    907a:	6803      	ldr	r3, [r0, #0]
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    907c:	0004      	movs	r4, r0
    907e:	000d      	movs	r5, r1
    9080:	0016      	movs	r6, r2
	*must_reschedule = 0;

	if (!event->poller) {
    9082:	2b00      	cmp	r3, #0
    9084:	d043      	beq.n	910e <_signal_poll_event+0x9a>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    9086:	6818      	ldr	r0, [r3, #0]
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
    9088:	2220      	movs	r2, #32
    908a:	7a43      	ldrb	r3, [r0, #9]
    908c:	0019      	movs	r1, r3
    908e:	4391      	bics	r1, r2

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    9090:	2202      	movs	r2, #2
    9092:	7241      	strb	r1, [r0, #9]
    9094:	4213      	tst	r3, r2
    9096:	d03a      	beq.n	910e <_signal_poll_event+0x9a>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    9098:	6a03      	ldr	r3, [r0, #32]
    909a:	3302      	adds	r3, #2
    909c:	d045      	beq.n	912a <_signal_poll_event+0xb6>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    909e:	6843      	ldr	r3, [r0, #4]
    90a0:	6801      	ldr	r1, [r0, #0]
    90a2:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    90a4:	6801      	ldr	r1, [r0, #0]
    90a6:	604b      	str	r3, [r1, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    90a8:	7a43      	ldrb	r3, [r0, #9]
    90aa:	4393      	bics	r3, r2
    90ac:	7243      	strb	r3, [r0, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    90ae:	6a03      	ldr	r3, [r0, #32]
    90b0:	1c5a      	adds	r2, r3, #1
    90b2:	d011      	beq.n	90d8 <_signal_poll_event+0x64>
    90b4:	4a20      	ldr	r2, [pc, #128]	; (9138 <_signal_poll_event+0xc4>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    90b6:	6911      	ldr	r1, [r2, #16]
    90b8:	0002      	movs	r2, r0
    90ba:	3210      	adds	r2, #16
    90bc:	4291      	cmp	r1, r2
    90be:	d003      	beq.n	90c8 <_signal_poll_event+0x54>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    90c0:	6902      	ldr	r2, [r0, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    90c2:	6911      	ldr	r1, [r2, #16]
    90c4:	18cb      	adds	r3, r1, r3
    90c6:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    90c8:	6943      	ldr	r3, [r0, #20]
    90ca:	6902      	ldr	r2, [r0, #16]
    90cc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    90ce:	6902      	ldr	r2, [r0, #16]
    90d0:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    90d2:	2301      	movs	r3, #1
    90d4:	425b      	negs	r3, r3
    90d6:	6203      	str	r3, [r0, #32]
    90d8:	2300      	movs	r3, #0
    90da:	65c3      	str	r3, [r0, #92]	; 0x5c
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    90dc:	7a43      	ldrb	r3, [r0, #9]
    90de:	06db      	lsls	r3, r3, #27
    90e0:	d115      	bne.n	910e <_signal_poll_event+0x9a>
    90e2:	6a03      	ldr	r3, [r0, #32]
    90e4:	3301      	adds	r3, #1
    90e6:	d112      	bne.n	910e <_signal_poll_event+0x9a>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    90e8:	f000 f99a 	bl	9420 <_add_thread_to_ready_q>
 */
static ALWAYS_INLINE u32_t _IpsrGet(void)
{
	u32_t vector;

	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
    90ec:	f3ef 8305 	mrs	r3, IPSR
#endif
#if defined(CONFIG_ARMV6_M)
		/* On ARMv6-M there is no nested execution bit, so we check
		 * exception 3, hard fault, to a detect a nested exception.
		 */
		|| (vector == 3)
    90f0:	2b0d      	cmp	r3, #13
    90f2:	d81d      	bhi.n	9130 <_signal_poll_event+0xbc>
    90f4:	2b03      	cmp	r3, #3
    90f6:	d01b      	beq.n	9130 <_signal_poll_event+0xbc>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    90f8:	4b0f      	ldr	r3, [pc, #60]	; (9138 <_signal_poll_event+0xc4>)
    90fa:	689b      	ldr	r3, [r3, #8]
    90fc:	895b      	ldrh	r3, [r3, #10]
    90fe:	2b7f      	cmp	r3, #127	; 0x7f
    9100:	d816      	bhi.n	9130 <_signal_poll_event+0xbc>
    9102:	f000 fa25 	bl	9550 <__must_switch_threads>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    9106:	2301      	movs	r3, #1
    9108:	2800      	cmp	r0, #0
    910a:	d011      	beq.n	9130 <_signal_poll_event+0xbc>
    910c:	6033      	str	r3, [r6, #0]
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
	event->state |= state;
    910e:	221f      	movs	r2, #31
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
    9110:	2000      	movs	r0, #0
	event->state |= state;
    9112:	6866      	ldr	r6, [r4, #4]
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
    9114:	6020      	str	r0, [r4, #0]
	event->state |= state;
    9116:	03f1      	lsls	r1, r6, #15
    9118:	0ec9      	lsrs	r1, r1, #27
    911a:	4329      	orrs	r1, r5
    911c:	4011      	ands	r1, r2
    911e:	030b      	lsls	r3, r1, #12
    9120:	4906      	ldr	r1, [pc, #24]	; (913c <_signal_poll_event+0xc8>)
    9122:	4031      	ands	r1, r6
    9124:	4319      	orrs	r1, r3
    9126:	6061      	str	r1, [r4, #4]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
    9128:	e004      	b.n	9134 <_signal_poll_event+0xc0>
	if (!_is_thread_pending(thread)) {
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
		return -EAGAIN;
    912a:	200b      	movs	r0, #11
    912c:	4240      	negs	r0, r0
    912e:	e001      	b.n	9134 <_signal_poll_event+0xc0>
	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    9130:	2300      	movs	r3, #0
    9132:	e7eb      	b.n	910c <_signal_poll_event+0x98>

ready_event:
	set_event_ready(event, state);
	return 0;
}
    9134:	bd70      	pop	{r4, r5, r6, pc}
    9136:	46c0      	nop			; (mov r8, r8)
    9138:	20000e94 	.word	0x20000e94
    913c:	fffe0fff 	.word	0xfffe0fff

00009140 <_handle_obj_poll_event>:

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
    9140:	b507      	push	{r0, r1, r2, lr}
    9142:	0003      	movs	r3, r0
	struct k_poll_event *poll_event = *obj_poll_event;
	int must_reschedule;

	*obj_poll_event = NULL;
    9144:	2200      	movs	r2, #0

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
	struct k_poll_event *poll_event = *obj_poll_event;
    9146:	6800      	ldr	r0, [r0, #0]
	int must_reschedule;

	*obj_poll_event = NULL;
    9148:	601a      	str	r2, [r3, #0]
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
    914a:	aa01      	add	r2, sp, #4
    914c:	f7ff ff92 	bl	9074 <_signal_poll_event>
	return must_reschedule;
}
    9150:	9801      	ldr	r0, [sp, #4]
    9152:	bd0e      	pop	{r1, r2, r3, pc}

00009154 <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9154:	7a43      	ldrb	r3, [r0, #9]
    9156:	2204      	movs	r2, #4
    9158:	0019      	movs	r1, r3
    915a:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    915c:	221b      	movs	r2, #27
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
    915e:	b510      	push	{r4, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9160:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    9162:	4213      	tst	r3, r2
    9164:	d104      	bne.n	9170 <_ready_thread+0x1c>
    9166:	6a03      	ldr	r3, [r0, #32]
    9168:	3301      	adds	r3, #1
    916a:	d101      	bne.n	9170 <_ready_thread+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    916c:	f000 f958 	bl	9420 <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
    9170:	bd10      	pop	{r4, pc}

00009172 <handle_poll_event>:
	_set_thread_return_value_with_data(thread, 0, data);
}

/* returns 1 if a reschedule must take place, 0 otherwise */
static inline int handle_poll_event(struct k_queue *queue)
{
    9172:	0003      	movs	r3, r0
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
    9174:	6900      	ldr	r0, [r0, #16]
	_set_thread_return_value_with_data(thread, 0, data);
}

/* returns 1 if a reschedule must take place, 0 otherwise */
static inline int handle_poll_event(struct k_queue *queue)
{
    9176:	b510      	push	{r4, lr}
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
    9178:	2800      	cmp	r0, #0
    917a:	d004      	beq.n	9186 <handle_poll_event+0x14>
    917c:	3310      	adds	r3, #16
    917e:	0018      	movs	r0, r3
    9180:	2108      	movs	r1, #8
    9182:	f7ff ffdd 	bl	9140 <_handle_obj_poll_event>
#else
	return 0;
#endif
}
    9186:	bd10      	pop	{r4, pc}

00009188 <_Swap>:
#ifdef CONFIG_STACK_SENTINEL
extern void _check_stack_sentinel(void);
#endif

static inline unsigned int _Swap(unsigned int key)
{
    9188:	b510      	push	{r4, lr}
    918a:	0004      	movs	r4, r0

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    918c:	f000 faae 	bl	96ec <_update_time_slice_before_swap>
#endif

	return __swap(key);
    9190:	0020      	movs	r0, r4
    9192:	f7ff fc17 	bl	89c4 <__swap>
}
    9196:	bd10      	pop	{r4, pc}

00009198 <_must_switch_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    9198:	4b05      	ldr	r3, [pc, #20]	; (91b0 <_must_switch_threads+0x18>)
/*
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
    919a:	b510      	push	{r4, lr}
    919c:	689b      	ldr	r3, [r3, #8]
	return _is_preempt(_current) && __must_switch_threads();
    919e:	2000      	movs	r0, #0
    91a0:	895b      	ldrh	r3, [r3, #10]
    91a2:	2b7f      	cmp	r3, #127	; 0x7f
    91a4:	d803      	bhi.n	91ae <_must_switch_threads+0x16>
    91a6:	f000 f9d3 	bl	9550 <__must_switch_threads>
    91aa:	1e43      	subs	r3, r0, #1
    91ac:	4198      	sbcs	r0, r3
}
    91ae:	bd10      	pop	{r4, pc}
    91b0:	20000e94 	.word	0x20000e94

000091b4 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    91b4:	4b14      	ldr	r3, [pc, #80]	; (9208 <_unpend_first_thread+0x54>)
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    91b6:	0001      	movs	r1, r0
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    91b8:	681b      	ldr	r3, [r3, #0]
    91ba:	6802      	ldr	r2, [r0, #0]
    91bc:	2b00      	cmp	r3, #0
    91be:	d00f      	beq.n	91e0 <_unpend_first_thread+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    91c0:	0013      	movs	r3, r2
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    91c2:	2000      	movs	r0, #0
    91c4:	4291      	cmp	r1, r2
    91c6:	d01d      	beq.n	9204 <_unpend_first_thread+0x50>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    91c8:	2b00      	cmp	r3, #0
    91ca:	d007      	beq.n	91dc <_unpend_first_thread+0x28>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    91cc:	6a1a      	ldr	r2, [r3, #32]
    91ce:	3202      	adds	r2, #2
    91d0:	d10c      	bne.n	91ec <_unpend_first_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    91d2:	684a      	ldr	r2, [r1, #4]
    91d4:	429a      	cmp	r2, r3
    91d6:	d014      	beq.n	9202 <_unpend_first_thread+0x4e>
    91d8:	681b      	ldr	r3, [r3, #0]
    91da:	e7f5      	b.n	91c8 <_unpend_first_thread+0x14>
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    91dc:	0018      	movs	r0, r3
    91de:	e011      	b.n	9204 <_unpend_first_thread+0x50>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    91e0:	0018      	movs	r0, r3
    91e2:	4291      	cmp	r1, r2
    91e4:	d00e      	beq.n	9204 <_unpend_first_thread+0x50>
    91e6:	1e10      	subs	r0, r2, #0
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    91e8:	d101      	bne.n	91ee <_unpend_first_thread+0x3a>
    91ea:	e00b      	b.n	9204 <_unpend_first_thread+0x50>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    91ec:	0018      	movs	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    91ee:	6843      	ldr	r3, [r0, #4]
    91f0:	6802      	ldr	r2, [r0, #0]
    91f2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    91f4:	6802      	ldr	r2, [r0, #0]
    91f6:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    91f8:	2202      	movs	r2, #2
    91fa:	7a43      	ldrb	r3, [r0, #9]
    91fc:	4393      	bics	r3, r2
    91fe:	7243      	strb	r3, [r0, #9]
    9200:	e000      	b.n	9204 <_unpend_first_thread+0x50>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9202:	2000      	movs	r0, #0
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
    9204:	4770      	bx	lr
    9206:	46c0      	nop			; (mov r8, r8)
    9208:	20001088 	.word	0x20001088

0000920c <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    920c:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    920e:	6900      	ldr	r0, [r0, #16]
    9210:	1c42      	adds	r2, r0, #1
    9212:	d010      	beq.n	9236 <_abort_timeout+0x2a>
    9214:	4a08      	ldr	r2, [pc, #32]	; (9238 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    9216:	6912      	ldr	r2, [r2, #16]
    9218:	4293      	cmp	r3, r2
    921a:	d003      	beq.n	9224 <_abort_timeout+0x18>
    921c:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    921e:	6911      	ldr	r1, [r2, #16]
    9220:	1808      	adds	r0, r1, r0
    9222:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    9224:	685a      	ldr	r2, [r3, #4]
    9226:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
    9228:	2000      	movs	r0, #0
    922a:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    922c:	6819      	ldr	r1, [r3, #0]
    922e:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    9230:	2201      	movs	r2, #1
    9232:	4252      	negs	r2, r2
    9234:	611a      	str	r2, [r3, #16]

	return 0;
}
    9236:	4770      	bx	lr
    9238:	20000e94 	.word	0x20000e94

0000923c <k_queue_init>:
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    923c:	2300      	movs	r3, #0
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    923e:	6000      	str	r0, [r0, #0]
    9240:	6083      	str	r3, [r0, #8]
	list->tail = NULL;
    9242:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    9244:	6040      	str	r0, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);

	_INIT_OBJ_POLL_EVENT(queue);
    9246:	6103      	str	r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
    9248:	4770      	bx	lr

0000924a <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    924a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    924c:	0005      	movs	r5, r0
    924e:	000f      	movs	r7, r1
    9250:	0014      	movs	r4, r2
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    9252:	f3ef 8310 	mrs	r3, PRIMASK
    9256:	b672      	cpsid	i
    9258:	9301      	str	r3, [sp, #4]
	struct k_thread *first_pending_thread;
	unsigned int key;

	key = irq_lock();

	first_pending_thread = _unpend_first_thread(&queue->wait_q);
    925a:	f7ff ffab 	bl	91b4 <_unpend_first_thread>
    925e:	1e06      	subs	r6, r0, #0

	if (first_pending_thread) {
    9260:	d00f      	beq.n	9282 <k_queue_insert+0x38>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    9262:	3010      	adds	r0, #16
    9264:	f7ff ffd2 	bl	920c <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
    9268:	0030      	movs	r0, r6
    926a:	f7ff ff73 	bl	9154 <_ready_thread>
    926e:	2300      	movs	r3, #0
_set_thread_return_value_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	_set_thread_return_value(thread, value);
	thread->base.swap_data = data;
    9270:	60f4      	str	r4, [r6, #12]
    9272:	65f3      	str	r3, [r6, #92]	; 0x5c
    9274:	f3ef 8305 	mrs	r3, IPSR
    9278:	2b0d      	cmp	r3, #13
    927a:	d822      	bhi.n	92c2 <k_queue_insert+0x78>
    927c:	2b03      	cmp	r3, #3
    927e:	d125      	bne.n	92cc <k_queue_insert+0x82>
    9280:	e01f      	b.n	92c2 <k_queue_insert+0x78>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
    9282:	2f00      	cmp	r7, #0
    9284:	d106      	bne.n	9294 <k_queue_insert+0x4a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    9286:	68ab      	ldr	r3, [r5, #8]
    9288:	6023      	str	r3, [r4, #0]
	list->head = node;

	if (!list->tail) {
    928a:	68eb      	ldr	r3, [r5, #12]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    928c:	60ac      	str	r4, [r5, #8]

	if (!list->tail) {
    928e:	2b00      	cmp	r3, #0
    9290:	d10e      	bne.n	92b0 <k_queue_insert+0x66>
    9292:	e00a      	b.n	92aa <k_queue_insert+0x60>
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
    9294:	683b      	ldr	r3, [r7, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    9296:	6023      	str	r3, [r4, #0]
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
    9298:	2b00      	cmp	r3, #0
    929a:	d108      	bne.n	92ae <k_queue_insert+0x64>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
    929c:	68eb      	ldr	r3, [r5, #12]
    929e:	2b00      	cmp	r3, #0
    92a0:	d102      	bne.n	92a8 <k_queue_insert+0x5e>
		list->tail = node;
    92a2:	60ec      	str	r4, [r5, #12]
		list->head = node;
    92a4:	60ac      	str	r4, [r5, #8]
    92a6:	e003      	b.n	92b0 <k_queue_insert+0x66>
	} else {
		list->tail->next = node;
    92a8:	601c      	str	r4, [r3, #0]
		list->tail = node;
    92aa:	60ec      	str	r4, [r5, #12]
    92ac:	e000      	b.n	92b0 <k_queue_insert+0x66>
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
		sys_slist_append(list, node);
	} else {
		node->next = prev->next;
		prev->next = node;
    92ae:	603c      	str	r4, [r7, #0]
			(void)_Swap(key);
			return;
		}
	} else {
		sys_slist_insert(&queue->data_q, prev, data);
		if (handle_poll_event(queue)) {
    92b0:	0028      	movs	r0, r5
    92b2:	f7ff ff5e 	bl	9172 <handle_poll_event>
    92b6:	2800      	cmp	r0, #0
    92b8:	d003      	beq.n	92c2 <k_queue_insert+0x78>
			(void)_Swap(key);
    92ba:	9801      	ldr	r0, [sp, #4]
    92bc:	f7ff ff64 	bl	9188 <_Swap>
			return;
    92c0:	e007      	b.n	92d2 <k_queue_insert+0x88>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    92c2:	9b01      	ldr	r3, [sp, #4]
    92c4:	2b00      	cmp	r3, #0
    92c6:	d104      	bne.n	92d2 <k_queue_insert+0x88>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    92c8:	b662      	cpsie	i
    92ca:	e002      	b.n	92d2 <k_queue_insert+0x88>

	first_pending_thread = _unpend_first_thread(&queue->wait_q);

	if (first_pending_thread) {
		prepare_thread_to_run(first_pending_thread, data);
		if (!_is_in_isr() && _must_switch_threads()) {
    92cc:	f7ff ff64 	bl	9198 <_must_switch_threads>
    92d0:	e7f1      	b.n	92b6 <k_queue_insert+0x6c>
			return;
		}
	}

	irq_unlock(key);
}
    92d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000092d4 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
    92d4:	b510      	push	{r4, lr}
    92d6:	000a      	movs	r2, r1
	return k_queue_insert(queue, queue->data_q.tail, data);
    92d8:	68c1      	ldr	r1, [r0, #12]
    92da:	f7ff ffb6 	bl	924a <k_queue_insert>
}
    92de:	bd10      	pop	{r4, pc}

000092e0 <k_queue_prepend>:

void k_queue_prepend(struct k_queue *queue, void *data)
{
    92e0:	b510      	push	{r4, lr}
    92e2:	000a      	movs	r2, r1
	return k_queue_insert(queue, NULL, data);
    92e4:	2100      	movs	r1, #0
    92e6:	f7ff ffb0 	bl	924a <k_queue_insert>
}
    92ea:	bd10      	pop	{r4, pc}

000092ec <k_queue_append_list>:

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    92ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    92ee:	0004      	movs	r4, r0
    92f0:	000d      	movs	r5, r1
    92f2:	9201      	str	r2, [sp, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    92f4:	f3ef 8710 	mrs	r7, PRIMASK
    92f8:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    92fa:	6803      	ldr	r3, [r0, #0]
    92fc:	9300      	str	r3, [sp, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    92fe:	4298      	cmp	r0, r3
    9300:	d112      	bne.n	9328 <k_queue_append_list+0x3c>
    9302:	2300      	movs	r3, #0
    9304:	9300      	str	r3, [sp, #0]
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
    9306:	e00f      	b.n	9328 <k_queue_append_list+0x3c>
    9308:	0020      	movs	r0, r4
    930a:	f7ff ff53 	bl	91b4 <_unpend_first_thread>
    930e:	1e06      	subs	r6, r0, #0
    9310:	d00d      	beq.n	932e <k_queue_append_list+0x42>
    9312:	0030      	movs	r0, r6
    9314:	3010      	adds	r0, #16
    9316:	f7ff ff79 	bl	920c <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
    931a:	0030      	movs	r0, r6
    931c:	f7ff ff1a 	bl	9154 <_ready_thread>
    9320:	2300      	movs	r3, #0
    9322:	60f5      	str	r5, [r6, #12]
	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
    9324:	682d      	ldr	r5, [r5, #0]
    9326:	65f3      	str	r3, [r6, #92]	; 0x5c
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
    9328:	2d00      	cmp	r5, #0
    932a:	d1ed      	bne.n	9308 <k_queue_append_list+0x1c>
    932c:	e005      	b.n	933a <k_queue_append_list+0x4e>
 * @param tail A pointer to the last element of the list to append
 */
static inline void sys_slist_append_list(sys_slist_t *list,
					 void *head, void *tail)
{
	if (!list->tail) {
    932e:	68e3      	ldr	r3, [r4, #12]
    9330:	2b00      	cmp	r3, #0
    9332:	d119      	bne.n	9368 <k_queue_append_list+0x7c>
		list->head = (sys_snode_t *)head;
    9334:	60a5      	str	r5, [r4, #8]
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
    9336:	9b01      	ldr	r3, [sp, #4]
    9338:	60e3      	str	r3, [r4, #12]

	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
    933a:	9b00      	ldr	r3, [sp, #0]
    933c:	2b00      	cmp	r3, #0
    933e:	d006      	beq.n	934e <k_queue_append_list+0x62>
    9340:	f3ef 8305 	mrs	r3, IPSR
    9344:	2b0d      	cmp	r3, #13
    9346:	d80b      	bhi.n	9360 <k_queue_append_list+0x74>
    9348:	2b03      	cmp	r3, #3
    934a:	d10f      	bne.n	936c <k_queue_append_list+0x80>
    934c:	e008      	b.n	9360 <k_queue_append_list+0x74>
		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
			return;
		}
	} else {
		if (handle_poll_event(queue)) {
    934e:	0020      	movs	r0, r4
    9350:	f7ff ff0f 	bl	9172 <handle_poll_event>
    9354:	2800      	cmp	r0, #0
    9356:	d003      	beq.n	9360 <k_queue_append_list+0x74>
			(void)_Swap(key);
    9358:	0038      	movs	r0, r7
    935a:	f7ff ff15 	bl	9188 <_Swap>
			return;
    935e:	e008      	b.n	9372 <k_queue_append_list+0x86>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    9360:	2f00      	cmp	r7, #0
    9362:	d106      	bne.n	9372 <k_queue_append_list+0x86>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    9364:	b662      	cpsie	i
    9366:	e004      	b.n	9372 <k_queue_append_list+0x86>
{
	if (!list->tail) {
		list->head = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
    9368:	601d      	str	r5, [r3, #0]
    936a:	e7e4      	b.n	9336 <k_queue_append_list+0x4a>
	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
		if (!_is_in_isr() && _must_switch_threads()) {
    936c:	f7ff ff14 	bl	9198 <_must_switch_threads>
    9370:	e7f0      	b.n	9354 <k_queue_append_list+0x68>
			return;
		}
	}

	irq_unlock(key);
}
    9372:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00009374 <k_queue_get>:
	k_queue_append_list(queue, list->head, list->tail);
	sys_slist_init(list);
}

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    9374:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    9376:	f3ef 8410 	mrs	r4, PRIMASK
    937a:	b672      	cpsid	i
    937c:	6883      	ldr	r3, [r0, #8]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    937e:	2b00      	cmp	r3, #0
    9380:	d00a      	beq.n	9398 <k_queue_get+0x24>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    9382:	681a      	ldr	r2, [r3, #0]
	if (list->tail == node) {
    9384:	68c1      	ldr	r1, [r0, #12]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    9386:	6082      	str	r2, [r0, #8]
	if (list->tail == node) {
    9388:	428b      	cmp	r3, r1
    938a:	d100      	bne.n	938e <k_queue_get+0x1a>
		list->tail = list->head;
    938c:	60c2      	str	r2, [r0, #12]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    938e:	0018      	movs	r0, r3
    9390:	2c00      	cmp	r4, #0
    9392:	d114      	bne.n	93be <k_queue_get+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    9394:	b662      	cpsie	i
    9396:	e012      	b.n	93be <k_queue_get+0x4a>
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
    9398:	2900      	cmp	r1, #0
    939a:	d106      	bne.n	93aa <k_queue_get+0x36>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    939c:	2c00      	cmp	r4, #0
    939e:	d001      	beq.n	93a4 <k_queue_get+0x30>
		irq_unlock(key);
		return NULL;
    93a0:	2000      	movs	r0, #0
    93a2:	e00c      	b.n	93be <k_queue_get+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    93a4:	b662      	cpsie	i
    93a6:	0020      	movs	r0, r4
    93a8:	e009      	b.n	93be <k_queue_get+0x4a>
	}

	_pend_current_thread(&queue->wait_q, timeout);
    93aa:	f000 f8c1 	bl	9530 <_pend_current_thread>

	return _Swap(key) ? NULL : _current->base.swap_data;
    93ae:	0020      	movs	r0, r4
    93b0:	f7ff feea 	bl	9188 <_Swap>
    93b4:	2800      	cmp	r0, #0
    93b6:	d1f3      	bne.n	93a0 <k_queue_get+0x2c>
    93b8:	4b01      	ldr	r3, [pc, #4]	; (93c0 <k_queue_get+0x4c>)
    93ba:	689b      	ldr	r3, [r3, #8]
    93bc:	68d8      	ldr	r0, [r3, #12]
}
    93be:	bd10      	pop	{r4, pc}
    93c0:	20000e94 	.word	0x20000e94

000093c4 <_add_timeout>:
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
    93c4:	60ca      	str	r2, [r1, #12]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    93c6:	4a15      	ldr	r2, [pc, #84]	; (941c <_add_timeout+0x58>)
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
    93c8:	6088      	str	r0, [r1, #8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    93ca:	0010      	movs	r0, r2

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
    93cc:	b530      	push	{r4, r5, lr}
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
    93ce:	610b      	str	r3, [r1, #16]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    93d0:	68d3      	ldr	r3, [r2, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    93d2:	300c      	adds	r0, #12
    93d4:	4283      	cmp	r3, r0
    93d6:	d108      	bne.n	93ea <_add_timeout+0x26>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    93d8:	0013      	movs	r3, r2
    93da:	330c      	adds	r3, #12
    93dc:	600b      	str	r3, [r1, #0]
	node->prev = list->tail;
    93de:	6913      	ldr	r3, [r2, #16]
    93e0:	604b      	str	r3, [r1, #4]

	list->tail->next = node;
    93e2:	6913      	ldr	r3, [r2, #16]
    93e4:	6019      	str	r1, [r3, #0]
	list->tail = node;
    93e6:	6111      	str	r1, [r2, #16]
    93e8:	e017      	b.n	941a <_add_timeout+0x56>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    93ea:	2b00      	cmp	r3, #0
    93ec:	d0f4      	beq.n	93d8 <_add_timeout+0x14>
    93ee:	6915      	ldr	r5, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
    93f0:	6908      	ldr	r0, [r1, #16]
    93f2:	691c      	ldr	r4, [r3, #16]
    93f4:	42a0      	cmp	r0, r4
    93f6:	dc08      	bgt.n	940a <_add_timeout+0x46>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    93f8:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    93fa:	1a20      	subs	r0, r4, r0
    93fc:	6118      	str	r0, [r3, #16]
    93fe:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    9400:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    9402:	685a      	ldr	r2, [r3, #4]
    9404:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    9406:	6059      	str	r1, [r3, #4]
    9408:	e007      	b.n	941a <_add_timeout+0x56>
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
    940a:	1b00      	subs	r0, r0, r4
    940c:	6108      	str	r0, [r1, #16]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    940e:	42ab      	cmp	r3, r5
    9410:	d0e2      	beq.n	93d8 <_add_timeout+0x14>
    9412:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    9414:	2b00      	cmp	r3, #0
    9416:	d1eb      	bne.n	93f0 <_add_timeout+0x2c>
    9418:	e7de      	b.n	93d8 <_add_timeout+0x14>
#ifdef CONFIG_TICKLESS_KERNEL
	if (!program_time || (adjusted_timeout < program_time)) {
		_set_time(adjusted_timeout);
	}
#endif
}
    941a:	bd30      	pop	{r4, r5, pc}
    941c:	20000e94 	.word	0x20000e94

00009420 <_add_thread_to_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
    9420:	230a      	movs	r3, #10
    9422:	56c3      	ldrsb	r3, [r0, r3]
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    9424:	b530      	push	{r4, r5, lr}
    9426:	001d      	movs	r5, r3
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
    9428:	241f      	movs	r4, #31
    942a:	3510      	adds	r5, #16
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
    942c:	116a      	asrs	r2, r5, #5
    942e:	4025      	ands	r5, r4
    9430:	3c1e      	subs	r4, #30
    9432:	40ac      	lsls	r4, r5
    9434:	490d      	ldr	r1, [pc, #52]	; (946c <_add_thread_to_ready_q+0x4c>)
    9436:	3206      	adds	r2, #6
    9438:	0092      	lsls	r2, r2, #2
    943a:	188a      	adds	r2, r1, r2
    943c:	6855      	ldr	r5, [r2, #4]

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
    943e:	3314      	adds	r3, #20
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
    9440:	432c      	orrs	r4, r5
    9442:	6054      	str	r4, [r2, #4]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    9444:	250a      	movs	r5, #10
    9446:	240a      	movs	r4, #10

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
    9448:	00db      	lsls	r3, r3, #3
    944a:	18cb      	adds	r3, r1, r3
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    944c:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
    944e:	685a      	ldr	r2, [r3, #4]
    9450:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
    9452:	685a      	ldr	r2, [r3, #4]
    9454:	6010      	str	r0, [r2, #0]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    9456:	698a      	ldr	r2, [r1, #24]
	list->tail = node;
    9458:	6058      	str	r0, [r3, #4]
    945a:	5745      	ldrsb	r5, [r0, r5]
    945c:	5714      	ldrsb	r4, [r2, r4]
    945e:	000b      	movs	r3, r1
    9460:	42a5      	cmp	r5, r4
    9462:	da00      	bge.n	9466 <_add_thread_to_ready_q+0x46>
    9464:	0002      	movs	r2, r0
    9466:	619a      	str	r2, [r3, #24]
#else
	sys_dlist_append(&_ready_q.q[0], &thread->base.k_q_node);
	_ready_q.prio_bmap[0] = 1;
	_ready_q.cache = thread;
#endif
}
    9468:	bd30      	pop	{r4, r5, pc}
    946a:	46c0      	nop			; (mov r8, r8)
    946c:	20000e94 	.word	0x20000e94

00009470 <_remove_thread_from_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
    9470:	230a      	movs	r3, #10
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    9472:	b510      	push	{r4, lr}
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    9474:	6842      	ldr	r2, [r0, #4]
    9476:	6801      	ldr	r1, [r0, #0]
    9478:	56c3      	ldrsb	r3, [r0, r3]
    947a:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    947c:	6801      	ldr	r1, [r0, #0]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
    947e:	4c11      	ldr	r4, [pc, #68]	; (94c4 <_remove_thread_from_ready_q+0x54>)
    9480:	3314      	adds	r3, #20
    9482:	604a      	str	r2, [r1, #4]
    9484:	00db      	lsls	r3, r3, #3
    9486:	18e2      	adds	r2, r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    9488:	591b      	ldr	r3, [r3, r4]
    948a:	4293      	cmp	r3, r2
    948c:	d10e      	bne.n	94ac <_remove_thread_from_ready_q+0x3c>
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
    948e:	220a      	movs	r2, #10
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
    9490:	211f      	movs	r1, #31
    9492:	5682      	ldrsb	r2, [r0, r2]
    9494:	3210      	adds	r2, #16
    9496:	1153      	asrs	r3, r2, #5
    9498:	400a      	ands	r2, r1
    949a:	391e      	subs	r1, #30
    949c:	4091      	lsls	r1, r2
    949e:	000a      	movs	r2, r1
    94a0:	3306      	adds	r3, #6
    94a2:	009b      	lsls	r3, r3, #2
    94a4:	18e3      	adds	r3, r4, r3
    94a6:	6859      	ldr	r1, [r3, #4]
    94a8:	4391      	bics	r1, r2
    94aa:	6059      	str	r1, [r3, #4]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    94ac:	69a3      	ldr	r3, [r4, #24]
    94ae:	4298      	cmp	r0, r3
    94b0:	d105      	bne.n	94be <_remove_thread_from_ready_q+0x4e>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    94b2:	69e0      	ldr	r0, [r4, #28]
    94b4:	f7f7 f836 	bl	524 <__ffssi2>
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
    94b8:	3003      	adds	r0, #3
    94ba:	00c0      	lsls	r0, r0, #3
    94bc:	5823      	ldr	r3, [r4, r0]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    94be:	61a3      	str	r3, [r4, #24]
#else
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
    94c0:	bd10      	pop	{r4, pc}
    94c2:	46c0      	nop			; (mov r8, r8)
    94c4:	20000e94 	.word	0x20000e94

000094c8 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    94c8:	b570      	push	{r4, r5, r6, lr}
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    94ca:	680b      	ldr	r3, [r1, #0]
    94cc:	0004      	movs	r4, r0
    94ce:	000d      	movs	r5, r1
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    94d0:	4299      	cmp	r1, r3
    94d2:	d013      	beq.n	94fc <_pend_thread+0x34>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(wait_q_list, node) {
    94d4:	2b00      	cmp	r3, #0
    94d6:	d011      	beq.n	94fc <_pend_thread+0x34>
		struct k_thread *pending = (struct k_thread *)node;

		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    94d8:	200a      	movs	r0, #10
    94da:	210a      	movs	r1, #10
    94dc:	5620      	ldrsb	r0, [r4, r0]
    94de:	5659      	ldrsb	r1, [r3, r1]
    94e0:	4288      	cmp	r0, r1
    94e2:	da06      	bge.n	94f2 <_pend_thread+0x2a>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    94e4:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
    94e6:	6023      	str	r3, [r4, #0]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    94e8:	6061      	str	r1, [r4, #4]
		node->next = insert_point;
		insert_point->prev->next = node;
    94ea:	6859      	ldr	r1, [r3, #4]
    94ec:	600c      	str	r4, [r1, #0]
		insert_point->prev = node;
    94ee:	605c      	str	r4, [r3, #4]
    94f0:	e00a      	b.n	9508 <_pend_thread+0x40>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    94f2:	6869      	ldr	r1, [r5, #4]
    94f4:	428b      	cmp	r3, r1
    94f6:	d001      	beq.n	94fc <_pend_thread+0x34>
    94f8:	681b      	ldr	r3, [r3, #0]
    94fa:	e7eb      	b.n	94d4 <_pend_thread+0xc>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    94fc:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    94fe:	686b      	ldr	r3, [r5, #4]
    9500:	6063      	str	r3, [r4, #4]

	list->tail->next = node;
    9502:	686b      	ldr	r3, [r5, #4]
    9504:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9506:	606c      	str	r4, [r5, #4]
}

/* mark a thread as pending in its TCS */
static inline void _mark_thread_as_pending(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_PENDING;
    9508:	2102      	movs	r1, #2
    950a:	7a63      	ldrb	r3, [r4, #9]
    950c:	430b      	orrs	r3, r1
    950e:	7263      	strb	r3, [r4, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    9510:	1c53      	adds	r3, r2, #1
    9512:	d00b      	beq.n	952c <_pend_thread+0x64>

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       s32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    9514:	3209      	adds	r2, #9
    9516:	0010      	movs	r0, r2
    9518:	3108      	adds	r1, #8
    951a:	f7f6 fe41 	bl	1a0 <__aeabi_uidiv>
    951e:	0021      	movs	r1, r4
    9520:	1c43      	adds	r3, r0, #1
    9522:	3110      	adds	r1, #16
    9524:	002a      	movs	r2, r5
    9526:	0020      	movs	r0, r4
    9528:	f7ff ff4c 	bl	93c4 <_add_timeout>
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    952c:	bd70      	pop	{r4, r5, r6, pc}
	...

00009530 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    9530:	b570      	push	{r4, r5, r6, lr}
    9532:	000e      	movs	r6, r1
    9534:	0005      	movs	r5, r0
	_remove_thread_from_ready_q(_current);
    9536:	4c05      	ldr	r4, [pc, #20]	; (954c <_pend_current_thread+0x1c>)
    9538:	68a0      	ldr	r0, [r4, #8]
    953a:	f7ff ff99 	bl	9470 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    953e:	0032      	movs	r2, r6
    9540:	0029      	movs	r1, r5
    9542:	68a0      	ldr	r0, [r4, #8]
    9544:	f7ff ffc0 	bl	94c8 <_pend_thread>
}
    9548:	bd70      	pop	{r4, r5, r6, pc}
    954a:	46c0      	nop			; (mov r8, r8)
    954c:	20000e94 	.word	0x20000e94

00009550 <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
    9550:	b510      	push	{r4, lr}
{
	int bitmap = 0;
	u32_t ready_range;

#if (K_NUM_PRIORITIES <= 32)
	ready_range = _ready_q.prio_bmap[0];
    9552:	4c07      	ldr	r4, [pc, #28]	; (9570 <__must_switch_threads+0x20>)
    9554:	69e0      	ldr	r0, [r4, #28]
    9556:	f7f6 ffe5 	bl	524 <__ffssi2>

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    955a:	220a      	movs	r2, #10
    955c:	68a3      	ldr	r3, [r4, #8]
    955e:	569a      	ldrsb	r2, [r3, r2]
    9560:	0003      	movs	r3, r0
    9562:	3b11      	subs	r3, #17
    9564:	2001      	movs	r0, #1
    9566:	429a      	cmp	r2, r3
    9568:	dc00      	bgt.n	956c <__must_switch_threads+0x1c>
    956a:	2000      	movs	r0, #0
#else
	return 0;
#endif
}
    956c:	bd10      	pop	{r4, pc}
    956e:	46c0      	nop			; (mov r8, r8)
    9570:	20000e94 	.word	0x20000e94

00009574 <_reschedule_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    9574:	4b0a      	ldr	r3, [pc, #40]	; (95a0 <_reschedule_threads+0x2c>)

/* reschedule threads if the scheduler is not locked */
/* not callable from ISR */
/* must be called with interrupts locked */
void _reschedule_threads(int key)
{
    9576:	b510      	push	{r4, lr}
    9578:	689b      	ldr	r3, [r3, #8]
    957a:	0004      	movs	r4, r0
    957c:	895b      	ldrh	r3, [r3, #10]
    957e:	2b7f      	cmp	r3, #127	; 0x7f
    9580:	d803      	bhi.n	958a <_reschedule_threads+0x16>
    9582:	f7ff ffe5 	bl	9550 <__must_switch_threads>
    9586:	2800      	cmp	r0, #0
    9588:	d103      	bne.n	9592 <_reschedule_threads+0x1e>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    958a:	2c00      	cmp	r4, #0
    958c:	d107      	bne.n	959e <_reschedule_threads+0x2a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    958e:	b662      	cpsie	i
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
    9590:	e005      	b.n	959e <_reschedule_threads+0x2a>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    9592:	2200      	movs	r2, #0
    9594:	4b03      	ldr	r3, [pc, #12]	; (95a4 <_reschedule_threads+0x30>)
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
#endif

	return __swap(key);
    9596:	0020      	movs	r0, r4
    9598:	601a      	str	r2, [r3, #0]
    959a:	f7ff fa13 	bl	89c4 <__swap>
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
    959e:	bd10      	pop	{r4, pc}
    95a0:	20000e94 	.word	0x20000e94
    95a4:	2000108c 	.word	0x2000108c

000095a8 <k_sched_unlock>:
		_current, _current->base.sched_locked);
#endif
}

void k_sched_unlock(void)
{
    95a8:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    95aa:	f3ef 8010 	mrs	r0, PRIMASK
    95ae:	b672      	cpsid	i

	int key = irq_lock();

	/* compiler_barrier() not needed, comes from irq_lock() */

	++_current->base.sched_locked;
    95b0:	4b03      	ldr	r3, [pc, #12]	; (95c0 <k_sched_unlock+0x18>)
    95b2:	689a      	ldr	r2, [r3, #8]
    95b4:	7ad3      	ldrb	r3, [r2, #11]
    95b6:	3301      	adds	r3, #1
    95b8:	72d3      	strb	r3, [r2, #11]

	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule_threads(key);
    95ba:	f7ff ffdb 	bl	9574 <_reschedule_threads>
#endif
}
    95be:	bd10      	pop	{r4, pc}
    95c0:	20000e94 	.word	0x20000e94

000095c4 <_move_thread_to_end_of_prio_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
    95c4:	230a      	movs	r3, #10
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
    95c6:	b510      	push	{r4, lr}
    95c8:	56c3      	ldrsb	r3, [r0, r3]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
    95ca:	4c0e      	ldr	r4, [pc, #56]	; (9604 <_move_thread_to_end_of_prio_q+0x40>)
    95cc:	3314      	adds	r3, #20
    95ce:	00db      	lsls	r3, r3, #3
    95d0:	18e3      	adds	r3, r4, r3

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    95d2:	685a      	ldr	r2, [r3, #4]
    95d4:	4290      	cmp	r0, r2
    95d6:	d014      	beq.n	9602 <_move_thread_to_end_of_prio_q+0x3e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    95d8:	6842      	ldr	r2, [r0, #4]
    95da:	6801      	ldr	r1, [r0, #0]
    95dc:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    95de:	6801      	ldr	r1, [r0, #0]
    95e0:	604a      	str	r2, [r1, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    95e2:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
    95e4:	685a      	ldr	r2, [r3, #4]
    95e6:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
    95e8:	685a      	ldr	r2, [r3, #4]
    95ea:	6010      	str	r0, [r2, #0]
	list->tail = node;
    95ec:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    95ee:	69a3      	ldr	r3, [r4, #24]
    95f0:	4298      	cmp	r0, r3
    95f2:	d105      	bne.n	9600 <_move_thread_to_end_of_prio_q+0x3c>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    95f4:	69e0      	ldr	r0, [r4, #28]
    95f6:	f7f6 ff95 	bl	524 <__ffssi2>
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
    95fa:	3003      	adds	r0, #3
    95fc:	00c0      	lsls	r0, r0, #3
    95fe:	5823      	ldr	r3, [r4, r0]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    9600:	61a3      	str	r3, [r4, #24]
#endif
}
    9602:	bd10      	pop	{r4, pc}
    9604:	20000e94 	.word	0x20000e94

00009608 <k_yield>:

void k_yield(void)
{
    9608:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    960a:	f3ef 8510 	mrs	r5, PRIMASK
    960e:	b672      	cpsid	i
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	_move_thread_to_end_of_prio_q(_current);
    9610:	4c09      	ldr	r4, [pc, #36]	; (9638 <k_yield+0x30>)
    9612:	68a0      	ldr	r0, [r4, #8]
    9614:	f7ff ffd6 	bl	95c4 <_move_thread_to_end_of_prio_q>

	if (_current == _get_next_ready_thread()) {
    9618:	68a2      	ldr	r2, [r4, #8]
    961a:	69a3      	ldr	r3, [r4, #24]
    961c:	429a      	cmp	r2, r3
    961e:	d103      	bne.n	9628 <k_yield+0x20>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    9620:	2d00      	cmp	r5, #0
    9622:	d107      	bne.n	9634 <k_yield+0x2c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    9624:	b662      	cpsie	i
    9626:	e005      	b.n	9634 <k_yield+0x2c>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    9628:	2200      	movs	r2, #0
    962a:	4b04      	ldr	r3, [pc, #16]	; (963c <k_yield+0x34>)
    962c:	0028      	movs	r0, r5
    962e:	601a      	str	r2, [r3, #0]
    9630:	f7ff f9c8 	bl	89c4 <__swap>
		_check_stack_sentinel();
#endif
	} else {
		_Swap(key);
	}
}
    9634:	bd70      	pop	{r4, r5, r6, pc}
    9636:	46c0      	nop			; (mov r8, r8)
    9638:	20000e94 	.word	0x20000e94
    963c:	2000108c 	.word	0x2000108c

00009640 <k_sleep>:

void k_sleep(s32_t duration)
{
    9640:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    9642:	2800      	cmp	r0, #0
    9644:	d102      	bne.n	964c <k_sleep+0xc>
		k_yield();
    9646:	f7ff ffdf 	bl	9608 <k_yield>
		return;
    964a:	e019      	b.n	9680 <k_sleep+0x40>
	}

	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    964c:	210a      	movs	r1, #10
    964e:	3009      	adds	r0, #9
    9650:	f7f6 fda6 	bl	1a0 <__aeabi_uidiv>
    9654:	3001      	adds	r0, #1
    9656:	9001      	str	r0, [sp, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    9658:	f3ef 8510 	mrs	r5, PRIMASK
    965c:	b672      	cpsid	i
	key = irq_lock();

	_remove_thread_from_ready_q(_current);
    965e:	4c09      	ldr	r4, [pc, #36]	; (9684 <k_sleep+0x44>)
    9660:	68a0      	ldr	r0, [r4, #8]
    9662:	f7ff ff05 	bl	9470 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    9666:	68a0      	ldr	r0, [r4, #8]
    9668:	9b01      	ldr	r3, [sp, #4]
    966a:	0001      	movs	r1, r0
    966c:	2200      	movs	r2, #0
    966e:	3110      	adds	r1, #16
    9670:	f7ff fea8 	bl	93c4 <_add_timeout>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    9674:	2200      	movs	r2, #0
    9676:	4b04      	ldr	r3, [pc, #16]	; (9688 <k_sleep+0x48>)
    9678:	0028      	movs	r0, r5
    967a:	601a      	str	r2, [r3, #0]
    967c:	f7ff f9a2 	bl	89c4 <__swap>
	_remove_thread_from_ready_q(_current);
	_add_thread_timeout(_current, NULL, ticks);

	_Swap(key);
#endif
}
    9680:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    9682:	46c0      	nop			; (mov r8, r8)
    9684:	20000e94 	.word	0x20000e94
    9688:	2000108c 	.word	0x2000108c

0000968c <k_current_get>:
	}
}

k_tid_t k_current_get(void)
{
	return _current;
    968c:	4b01      	ldr	r3, [pc, #4]	; (9694 <k_current_get+0x8>)
    968e:	6898      	ldr	r0, [r3, #8]
}
    9690:	4770      	bx	lr
    9692:	46c0      	nop			; (mov r8, r8)
    9694:	20000e94 	.word	0x20000e94

00009698 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    9698:	4b10      	ldr	r3, [pc, #64]	; (96dc <_is_thread_time_slicing+0x44>)
	_time_slice_elapsed = 0;
	_time_slice_prio_ceiling = prio;
}

int _is_thread_time_slicing(struct k_thread *thread)
{
    969a:	b082      	sub	sp, #8
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    969c:	681a      	ldr	r2, [r3, #0]
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
    969e:	2300      	movs	r3, #0
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    96a0:	429a      	cmp	r2, r3
    96a2:	dd17      	ble.n	96d4 <_is_thread_time_slicing+0x3c>
	return entry_point == idle;
}

static inline int _is_idle_thread_ptr(k_tid_t thread)
{
	return thread == _idle_thread;
    96a4:	4b0e      	ldr	r3, [pc, #56]	; (96e0 <_is_thread_time_slicing+0x48>)
    96a6:	681b      	ldr	r3, [r3, #0]
    96a8:	9301      	str	r3, [sp, #4]
    96aa:	9a01      	ldr	r2, [sp, #4]
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
    96ac:	2300      	movs	r3, #0
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    96ae:	4290      	cmp	r0, r2
    96b0:	d010      	beq.n	96d4 <_is_thread_time_slicing+0x3c>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    96b2:	220a      	movs	r2, #10
    96b4:	4b0b      	ldr	r3, [pc, #44]	; (96e4 <_is_thread_time_slicing+0x4c>)
    96b6:	5682      	ldrsb	r2, [r0, r2]
    96b8:	6819      	ldr	r1, [r3, #0]
		return 0;
    96ba:	2300      	movs	r3, #0
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    96bc:	428a      	cmp	r2, r1
    96be:	db09      	blt.n	96d4 <_is_thread_time_slicing+0x3c>
 * @return 1 if multiple nodes, 0 otherwise
 */

static inline int sys_dlist_has_multiple_nodes(sys_dlist_t *list)
{
	return list->head != list->tail;
    96c0:	0013      	movs	r3, r2
    96c2:	4909      	ldr	r1, [pc, #36]	; (96e8 <_is_thread_time_slicing+0x50>)
    96c4:	3314      	adds	r3, #20
    96c6:	00db      	lsls	r3, r3, #3
    96c8:	18ca      	adds	r2, r1, r3
    96ca:	6850      	ldr	r0, [r2, #4]
    96cc:	585b      	ldr	r3, [r3, r1]
    96ce:	1a1b      	subs	r3, r3, r0
    96d0:	1e58      	subs	r0, r3, #1
    96d2:	4183      	sbcs	r3, r0

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
}
    96d4:	0018      	movs	r0, r3
    96d6:	b002      	add	sp, #8
    96d8:	4770      	bx	lr
    96da:	46c0      	nop			; (mov r8, r8)
    96dc:	20000fb8 	.word	0x20000fb8
    96e0:	00009e74 	.word	0x00009e74
    96e4:	20000fb4 	.word	0x20000fb4
    96e8:	20000e94 	.word	0x20000e94

000096ec <_update_time_slice_before_swap>:
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    96ec:	2200      	movs	r2, #0
    96ee:	4b01      	ldr	r3, [pc, #4]	; (96f4 <_update_time_slice_before_swap+0x8>)
    96f0:	601a      	str	r2, [r3, #0]
}
    96f2:	4770      	bx	lr
    96f4:	2000108c 	.word	0x2000108c

000096f8 <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    96f8:	7a43      	ldrb	r3, [r0, #9]
    96fa:	2204      	movs	r2, #4
    96fc:	0019      	movs	r1, r3
    96fe:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    9700:	221b      	movs	r2, #27
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
    9702:	b510      	push	{r4, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9704:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    9706:	4213      	tst	r3, r2
    9708:	d104      	bne.n	9714 <_ready_thread+0x1c>
    970a:	6a03      	ldr	r3, [r0, #32]
    970c:	3301      	adds	r3, #1
    970e:	d101      	bne.n	9714 <_ready_thread+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    9710:	f7ff fe86 	bl	9420 <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
    9714:	bd10      	pop	{r4, pc}
	...

00009718 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    9718:	4b14      	ldr	r3, [pc, #80]	; (976c <_unpend_first_thread+0x54>)
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    971a:	0001      	movs	r1, r0
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    971c:	681b      	ldr	r3, [r3, #0]
    971e:	6802      	ldr	r2, [r0, #0]
    9720:	2b00      	cmp	r3, #0
    9722:	d00f      	beq.n	9744 <_unpend_first_thread+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9724:	0013      	movs	r3, r2
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9726:	2000      	movs	r0, #0
    9728:	4291      	cmp	r1, r2
    972a:	d01d      	beq.n	9768 <_unpend_first_thread+0x50>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    972c:	2b00      	cmp	r3, #0
    972e:	d007      	beq.n	9740 <_unpend_first_thread+0x28>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    9730:	6a1a      	ldr	r2, [r3, #32]
    9732:	3202      	adds	r2, #2
    9734:	d10c      	bne.n	9750 <_unpend_first_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9736:	684a      	ldr	r2, [r1, #4]
    9738:	429a      	cmp	r2, r3
    973a:	d014      	beq.n	9766 <_unpend_first_thread+0x4e>
    973c:	681b      	ldr	r3, [r3, #0]
    973e:	e7f5      	b.n	972c <_unpend_first_thread+0x14>
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    9740:	0018      	movs	r0, r3
    9742:	e011      	b.n	9768 <_unpend_first_thread+0x50>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9744:	0018      	movs	r0, r3
    9746:	4291      	cmp	r1, r2
    9748:	d00e      	beq.n	9768 <_unpend_first_thread+0x50>
    974a:	1e10      	subs	r0, r2, #0
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    974c:	d101      	bne.n	9752 <_unpend_first_thread+0x3a>
    974e:	e00b      	b.n	9768 <_unpend_first_thread+0x50>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    9750:	0018      	movs	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    9752:	6843      	ldr	r3, [r0, #4]
    9754:	6802      	ldr	r2, [r0, #0]
    9756:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    9758:	6802      	ldr	r2, [r0, #0]
    975a:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    975c:	2202      	movs	r2, #2
    975e:	7a43      	ldrb	r3, [r0, #9]
    9760:	4393      	bics	r3, r2
    9762:	7243      	strb	r3, [r0, #9]
    9764:	e000      	b.n	9768 <_unpend_first_thread+0x50>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9766:	2000      	movs	r0, #0
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
    9768:	4770      	bx	lr
    976a:	46c0      	nop			; (mov r8, r8)
    976c:	20001088 	.word	0x20001088

00009770 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    9770:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9772:	6900      	ldr	r0, [r0, #16]
    9774:	1c42      	adds	r2, r0, #1
    9776:	d010      	beq.n	979a <_abort_timeout+0x2a>
    9778:	4a08      	ldr	r2, [pc, #32]	; (979c <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    977a:	6912      	ldr	r2, [r2, #16]
    977c:	4293      	cmp	r3, r2
    977e:	d003      	beq.n	9788 <_abort_timeout+0x18>
    9780:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    9782:	6911      	ldr	r1, [r2, #16]
    9784:	1808      	adds	r0, r1, r0
    9786:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    9788:	685a      	ldr	r2, [r3, #4]
    978a:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
    978c:	2000      	movs	r0, #0
    978e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    9790:	6819      	ldr	r1, [r3, #0]
    9792:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    9794:	2201      	movs	r2, #1
    9796:	4252      	negs	r2, r2
    9798:	611a      	str	r2, [r3, #16]

	return 0;
}
    979a:	4770      	bx	lr
    979c:	20000e94 	.word	0x20000e94

000097a0 <k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
    97a0:	2300      	movs	r3, #0
void k_sem_init(struct k_sem *sem, unsigned int initial_count,
		unsigned int limit)
{
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
    97a2:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    97a4:	60c2      	str	r2, [r0, #12]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    97a6:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    97a8:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
    97aa:	6103      	str	r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);
}
    97ac:	4770      	bx	lr
	...

000097b0 <k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void k_sem_give(struct k_sem *sem)
{
    97b0:	b570      	push	{r4, r5, r6, lr}
    97b2:	0004      	movs	r4, r0
    97b4:	f3ef 8510 	mrs	r5, PRIMASK
    97b8:	b672      	cpsid	i
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    97ba:	f7ff ffad 	bl	9718 <_unpend_first_thread>
    97be:	1e06      	subs	r6, r0, #0

	if (!thread) {
    97c0:	d116      	bne.n	97f0 <k_sem_give+0x40>
#endif
}

static inline void increment_count_up_to_limit(struct k_sem *sem)
{
	sem->count += (sem->count != sem->limit);
    97c2:	68a2      	ldr	r2, [r4, #8]
    97c4:	68e3      	ldr	r3, [r4, #12]
    97c6:	1a9b      	subs	r3, r3, r2
    97c8:	1e59      	subs	r1, r3, #1
    97ca:	418b      	sbcs	r3, r1
    97cc:	189b      	adds	r3, r3, r2
    97ce:	60a3      	str	r3, [r4, #8]
{
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_SEM_AVAILABLE;

	return sem->poll_event ?
	       _handle_obj_poll_event(&sem->poll_event, state) : 0;
    97d0:	6923      	ldr	r3, [r4, #16]
    97d2:	2b00      	cmp	r3, #0
    97d4:	d022      	beq.n	981c <k_sem_give+0x6c>
    97d6:	0020      	movs	r0, r4
    97d8:	2104      	movs	r1, #4
    97da:	3010      	adds	r0, #16
    97dc:	f7ff fcb0 	bl	9140 <_handle_obj_poll_event>
{
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    97e0:	2800      	cmp	r0, #0
    97e2:	d01b      	beq.n	981c <k_sem_give+0x6c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    97e4:	f7ff ff82 	bl	96ec <_update_time_slice_before_swap>
#endif

	return __swap(key);
    97e8:	0028      	movs	r0, r5
    97ea:	f7ff f8eb 	bl	89c4 <__swap>
    97ee:	e018      	b.n	9822 <k_sem_give+0x72>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    97f0:	3010      	adds	r0, #16
    97f2:	f7ff ffbd 	bl	9770 <_abort_timeout>
	if (!thread) {
		increment_count_up_to_limit(sem);
		return handle_poll_event(sem);
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
    97f6:	0030      	movs	r0, r6
    97f8:	f7ff ff7e 	bl	96f8 <_ready_thread>
    97fc:	2300      	movs	r3, #0
    97fe:	65f3      	str	r3, [r6, #92]	; 0x5c
    9800:	f3ef 8305 	mrs	r3, IPSR
    9804:	2b0d      	cmp	r3, #13
    9806:	d809      	bhi.n	981c <k_sem_give+0x6c>
    9808:	2b03      	cmp	r3, #3
    980a:	d007      	beq.n	981c <k_sem_give+0x6c>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    980c:	4b05      	ldr	r3, [pc, #20]	; (9824 <k_sem_give+0x74>)
    980e:	689b      	ldr	r3, [r3, #8]
    9810:	895b      	ldrh	r3, [r3, #10]
    9812:	2b7f      	cmp	r3, #127	; 0x7f
    9814:	d802      	bhi.n	981c <k_sem_give+0x6c>
    9816:	f7ff fe9b 	bl	9550 <__must_switch_threads>
    981a:	e7e1      	b.n	97e0 <k_sem_give+0x30>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    981c:	2d00      	cmp	r5, #0
    981e:	d100      	bne.n	9822 <k_sem_give+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    9820:	b662      	cpsie	i
	if (do_sem_give(sem)) {
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    9822:	bd70      	pop	{r4, r5, r6, pc}
    9824:	20000e94 	.word	0x20000e94

00009828 <k_sem_take>:

int k_sem_take(struct k_sem *sem, s32_t timeout)
{
    9828:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    982a:	f3ef 8410 	mrs	r4, PRIMASK
    982e:	b672      	cpsid	i
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    9830:	6883      	ldr	r3, [r0, #8]
    9832:	2b00      	cmp	r3, #0
    9834:	d006      	beq.n	9844 <k_sem_take+0x1c>
		sem->count--;
    9836:	3b01      	subs	r3, #1
    9838:	6083      	str	r3, [r0, #8]
		irq_unlock(key);
		return 0;
    983a:	2000      	movs	r0, #0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    983c:	4284      	cmp	r4, r0
    983e:	d111      	bne.n	9864 <k_sem_take+0x3c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    9840:	b662      	cpsie	i
    9842:	e00f      	b.n	9864 <k_sem_take+0x3c>
	}

	if (timeout == K_NO_WAIT) {
    9844:	2900      	cmp	r1, #0
    9846:	d103      	bne.n	9850 <k_sem_take+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    9848:	2c00      	cmp	r4, #0
    984a:	d109      	bne.n	9860 <k_sem_take+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    984c:	b662      	cpsie	i
    984e:	e007      	b.n	9860 <k_sem_take+0x38>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
    9850:	f7ff fe6e 	bl	9530 <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    9854:	f7ff ff4a 	bl	96ec <_update_time_slice_before_swap>
#endif

	return __swap(key);
    9858:	0020      	movs	r0, r4
    985a:	f7ff f8b3 	bl	89c4 <__swap>

	return _Swap(key);
    985e:	e001      	b.n	9864 <k_sem_take+0x3c>
		return 0;
	}

	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EBUSY;
    9860:	2010      	movs	r0, #16
    9862:	4240      	negs	r0, r0
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
    9864:	bd10      	pop	{r4, pc}
	...

00009868 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    9868:	b5f0      	push	{r4, r5, r6, r7, lr}
    986a:	b085      	sub	sp, #20
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    986c:	f3ef 8410 	mrs	r4, PRIMASK
    9870:	b672      	cpsid	i

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    9872:	495a      	ldr	r1, [pc, #360]	; (99dc <_nano_sys_clock_tick_announce+0x174>)
    9874:	17c3      	asrs	r3, r0, #31
    9876:	9301      	str	r3, [sp, #4]
    9878:	9000      	str	r0, [sp, #0]
    987a:	680a      	ldr	r2, [r1, #0]
    987c:	684b      	ldr	r3, [r1, #4]
    987e:	9d00      	ldr	r5, [sp, #0]
    9880:	9e01      	ldr	r6, [sp, #4]
    9882:	1952      	adds	r2, r2, r5
    9884:	4173      	adcs	r3, r6
    9886:	600a      	str	r2, [r1, #0]
    9888:	604b      	str	r3, [r1, #4]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    988a:	2c00      	cmp	r4, #0
    988c:	d100      	bne.n	9890 <_nano_sys_clock_tick_announce+0x28>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    988e:	b662      	cpsie	i
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    9890:	aa02      	add	r2, sp, #8
    9892:	9202      	str	r2, [sp, #8]
	list->tail = (sys_dnode_t *)list;
    9894:	6052      	str	r2, [r2, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    9896:	f3ef 8610 	mrs	r6, PRIMASK
    989a:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    989c:	4d50      	ldr	r5, [pc, #320]	; (99e0 <_nano_sys_clock_tick_announce+0x178>)
    989e:	4c51      	ldr	r4, [pc, #324]	; (99e4 <_nano_sys_clock_tick_announce+0x17c>)
    98a0:	68eb      	ldr	r3, [r5, #12]
    98a2:	0031      	movs	r1, r6
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    98a4:	42a3      	cmp	r3, r4
    98a6:	d001      	beq.n	98ac <_nano_sys_clock_tick_announce+0x44>
		(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

	K_DEBUG("head: %p, delta: %d\n",
		head, head ? head->delta_ticks_from_prev : -2112);

	if (!head) {
    98a8:	2b00      	cmp	r3, #0
    98aa:	d103      	bne.n	98b4 <_nano_sys_clock_tick_announce+0x4c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    98ac:	2e00      	cmp	r6, #0
    98ae:	d171      	bne.n	9994 <_nano_sys_clock_tick_announce+0x12c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    98b0:	b662      	cpsie	i
    98b2:	e06f      	b.n	9994 <_nano_sys_clock_tick_announce+0x12c>
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
    98b4:	691e      	ldr	r6, [r3, #16]
    98b6:	1a30      	subs	r0, r6, r0
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
    98b8:	2601      	movs	r6, #1
	if (!head) {
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
    98ba:	6118      	str	r0, [r3, #16]
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
    98bc:	484a      	ldr	r0, [pc, #296]	; (99e8 <_nano_sys_clock_tick_announce+0x180>)
    98be:	6006      	str	r6, [r0, #0]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
    98c0:	3e03      	subs	r6, #3
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
    98c2:	6918      	ldr	r0, [r3, #16]
    98c4:	2800      	cmp	r0, #0
    98c6:	d116      	bne.n	98f6 <_nano_sys_clock_tick_announce+0x8e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    98c8:	681f      	ldr	r7, [r3, #0]
    98ca:	6858      	ldr	r0, [r3, #4]
    98cc:	6007      	str	r7, [r0, #0]
	node->next->prev = node->prev;
    98ce:	681f      	ldr	r7, [r3, #0]
    98d0:	6078      	str	r0, [r7, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
    98d2:	6810      	ldr	r0, [r2, #0]
	node->prev = list;
    98d4:	605a      	str	r2, [r3, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
    98d6:	6018      	str	r0, [r3, #0]
	node->prev = list;

	list->head->prev = node;
    98d8:	6810      	ldr	r0, [r2, #0]
	list->head = node;
    98da:	6013      	str	r3, [r2, #0]
static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
	node->prev = list;

	list->head->prev = node;
    98dc:	6043      	str	r3, [r0, #4]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
    98de:	611e      	str	r6, [r3, #16]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    98e0:	2900      	cmp	r1, #0
    98e2:	d100      	bne.n	98e6 <_nano_sys_clock_tick_announce+0x7e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    98e4:	b662      	cpsie	i
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    98e6:	f3ef 8110 	mrs	r1, PRIMASK
    98ea:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    98ec:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    98ee:	42a3      	cmp	r3, r4
    98f0:	d001      	beq.n	98f6 <_nano_sys_clock_tick_announce+0x8e>
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
    98f2:	2b00      	cmp	r3, #0
    98f4:	d1e5      	bne.n	98c2 <_nano_sys_clock_tick_announce+0x5a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    98f6:	2900      	cmp	r1, #0
    98f8:	d100      	bne.n	98fc <_nano_sys_clock_tick_announce+0x94>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    98fa:	b662      	cpsie	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    98fc:	9b02      	ldr	r3, [sp, #8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    98fe:	4293      	cmp	r3, r2
    9900:	d103      	bne.n	990a <_nano_sys_clock_tick_announce+0xa2>

	irq_unlock(key);

	_handle_expired_timeouts(&expired);

	_handling_timeouts = 0;
    9902:	2200      	movs	r2, #0
    9904:	4b38      	ldr	r3, [pc, #224]	; (99e8 <_nano_sys_clock_tick_announce+0x180>)
    9906:	601a      	str	r2, [r3, #0]
    9908:	e044      	b.n	9994 <_nano_sys_clock_tick_announce+0x12c>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
    990a:	2b00      	cmp	r3, #0
    990c:	d0f9      	beq.n	9902 <_nano_sys_clock_tick_announce+0x9a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    990e:	9a03      	ldr	r2, [sp, #12]
    9910:	2400      	movs	r4, #0
    9912:	4293      	cmp	r3, r2
    9914:	d000      	beq.n	9918 <_nano_sys_clock_tick_announce+0xb0>
    9916:	681c      	ldr	r4, [r3, #0]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9918:	2704      	movs	r7, #4
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    991a:	6819      	ldr	r1, [r3, #0]
    991c:	685a      	ldr	r2, [r3, #4]
    991e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    9920:	6819      	ldr	r1, [r3, #0]
    9922:	604a      	str	r2, [r1, #4]
 * kept as -EAGAIN, set previously in _Swap().
 */

static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
    9924:	6898      	ldr	r0, [r3, #8]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    9926:	f3ef 8610 	mrs	r6, PRIMASK
    992a:	b672      	cpsid	i
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
    992c:	2201      	movs	r2, #1
    992e:	4252      	negs	r2, r2
    9930:	611a      	str	r2, [r3, #16]

	K_DEBUG("timeout %p\n", timeout);
	if (thread) {
    9932:	2800      	cmp	r0, #0
    9934:	d01b      	beq.n	996e <_nano_sys_clock_tick_announce+0x106>
/* remove a thread timing out from kernel object's wait queue */

static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
    9936:	68db      	ldr	r3, [r3, #12]
    9938:	2b00      	cmp	r3, #0
    993a:	d00a      	beq.n	9952 <_nano_sys_clock_tick_announce+0xea>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    993c:	6843      	ldr	r3, [r0, #4]
    993e:	6802      	ldr	r2, [r0, #0]
    9940:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    9942:	6802      	ldr	r2, [r0, #0]
    9944:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    9946:	2202      	movs	r2, #2
    9948:	7a43      	ldrb	r3, [r0, #9]
    994a:	4393      	bics	r3, r2
    994c:	7243      	strb	r3, [r0, #9]
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
    994e:	2300      	movs	r3, #0
    9950:	61c3      	str	r3, [r0, #28]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9952:	7a43      	ldrb	r3, [r0, #9]
    9954:	001a      	movs	r2, r3
    9956:	43ba      	bics	r2, r7
    9958:	7242      	strb	r2, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    995a:	221b      	movs	r2, #27
    995c:	4213      	tst	r3, r2
    995e:	d102      	bne.n	9966 <_nano_sys_clock_tick_announce+0xfe>
    9960:	6a03      	ldr	r3, [r0, #32]
    9962:	3301      	adds	r3, #1
    9964:	d035      	beq.n	99d2 <_nano_sys_clock_tick_announce+0x16a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    9966:	2e00      	cmp	r6, #0
    9968:	d109      	bne.n	997e <_nano_sys_clock_tick_announce+0x116>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    996a:	b662      	cpsie	i
    996c:	e007      	b.n	997e <_nano_sys_clock_tick_announce+0x116>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    996e:	2e00      	cmp	r6, #0
    9970:	d100      	bne.n	9974 <_nano_sys_clock_tick_announce+0x10c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    9972:	b662      	cpsie	i
		_unpend_thread_timing_out(thread, timeout);
		_ready_thread(thread);
		irq_unlock(key);
	} else {
		irq_unlock(key);
		if (timeout->func) {
    9974:	695a      	ldr	r2, [r3, #20]
    9976:	2a00      	cmp	r2, #0
    9978:	d001      	beq.n	997e <_nano_sys_clock_tick_announce+0x116>
			timeout->func(timeout);
    997a:	0018      	movs	r0, r3
    997c:	4790      	blx	r2
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
    997e:	2c00      	cmp	r4, #0
    9980:	d0bf      	beq.n	9902 <_nano_sys_clock_tick_announce+0x9a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9982:	9b03      	ldr	r3, [sp, #12]
    9984:	2200      	movs	r2, #0
    9986:	429c      	cmp	r4, r3
    9988:	d102      	bne.n	9990 <_nano_sys_clock_tick_announce+0x128>
    998a:	0023      	movs	r3, r4
    998c:	0014      	movs	r4, r2
    998e:	e7c4      	b.n	991a <_nano_sys_clock_tick_announce+0xb2>
    9990:	6822      	ldr	r2, [r4, #0]
    9992:	e7fa      	b.n	998a <_nano_sys_clock_tick_announce+0x122>
static void handle_time_slicing(s32_t ticks)
{
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
    9994:	68a8      	ldr	r0, [r5, #8]
    9996:	f7ff fe7f 	bl	9698 <_is_thread_time_slicing>
    999a:	2800      	cmp	r0, #0
    999c:	d01c      	beq.n	99d8 <_nano_sys_clock_tick_announce+0x170>
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
    999e:	9800      	ldr	r0, [sp, #0]
    99a0:	9901      	ldr	r1, [sp, #4]
    99a2:	220a      	movs	r2, #10
    99a4:	2300      	movs	r3, #0
    99a6:	f7f6 fd91 	bl	4cc <__aeabi_lmul>
    99aa:	4b10      	ldr	r3, [pc, #64]	; (99ec <_nano_sys_clock_tick_announce+0x184>)
    99ac:	681a      	ldr	r2, [r3, #0]
    99ae:	1810      	adds	r0, r2, r0
	if (_time_slice_elapsed >= _time_slice_duration) {
    99b0:	4a0f      	ldr	r2, [pc, #60]	; (99f0 <_nano_sys_clock_tick_announce+0x188>)
#endif
	if (!_is_thread_time_slicing(_current)) {
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
    99b2:	6018      	str	r0, [r3, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    99b4:	6812      	ldr	r2, [r2, #0]
    99b6:	4290      	cmp	r0, r2
    99b8:	db0e      	blt.n	99d8 <_nano_sys_clock_tick_announce+0x170>

		unsigned int key;

		_time_slice_elapsed = 0;
    99ba:	2200      	movs	r2, #0
    99bc:	601a      	str	r2, [r3, #0]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    99be:	f3ef 8410 	mrs	r4, PRIMASK
    99c2:	b672      	cpsid	i

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
    99c4:	68a8      	ldr	r0, [r5, #8]
    99c6:	f7ff fdfd 	bl	95c4 <_move_thread_to_end_of_prio_q>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    99ca:	2c00      	cmp	r4, #0
    99cc:	d104      	bne.n	99d8 <_nano_sys_clock_tick_announce+0x170>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    99ce:	b662      	cpsie	i
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    99d0:	e002      	b.n	99d8 <_nano_sys_clock_tick_announce+0x170>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    99d2:	f7ff fd25 	bl	9420 <_add_thread_to_ready_q>
    99d6:	e7c6      	b.n	9966 <_nano_sys_clock_tick_announce+0xfe>
    99d8:	b005      	add	sp, #20
    99da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99dc:	20001090 	.word	0x20001090
    99e0:	20000e94 	.word	0x20000e94
    99e4:	20000ea0 	.word	0x20000ea0
    99e8:	20001088 	.word	0x20001088
    99ec:	2000108c 	.word	0x2000108c
    99f0:	20000fb8 	.word	0x20000fb8

000099f4 <k_sys_work_q_init>:

static int k_sys_work_q_init(struct device *dev)
{
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    99f4:	2301      	movs	r3, #1
    99f6:	2280      	movs	r2, #128	; 0x80
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    99f8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    99fa:	4804      	ldr	r0, [pc, #16]	; (9a0c <k_sys_work_q_init+0x18>)
    99fc:	425b      	negs	r3, r3
    99fe:	00d2      	lsls	r2, r2, #3
    9a00:	4903      	ldr	r1, [pc, #12]	; (9a10 <k_sys_work_q_init+0x1c>)
    9a02:	f000 f95b 	bl	9cbc <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    9a06:	2000      	movs	r0, #0
    9a08:	bd10      	pop	{r4, pc}
    9a0a:	46c0      	nop			; (mov r8, r8)
    9a0c:	20001098 	.word	0x20001098
    9a10:	20002834 	.word	0x20002834

00009a14 <_is_thread_ready>:
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    9a14:	7a42      	ldrb	r2, [r0, #9]
    9a16:	2300      	movs	r3, #0
    9a18:	06d2      	lsls	r2, r2, #27
    9a1a:	d103      	bne.n	9a24 <_is_thread_ready+0x10>
    9a1c:	6a03      	ldr	r3, [r0, #32]
    9a1e:	3301      	adds	r3, #1
    9a20:	4258      	negs	r0, r3
    9a22:	4143      	adcs	r3, r0
		 _is_thread_timeout_active(thread));
}
    9a24:	0018      	movs	r0, r3
    9a26:	4770      	bx	lr

00009a28 <start_thread>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
static void start_thread(struct k_thread *thread)
{
    9a28:	b570      	push	{r4, r5, r6, lr}
    9a2a:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    9a2c:	f3ef 8510 	mrs	r5, PRIMASK
    9a30:	b672      	cpsid	i
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9a32:	2204      	movs	r2, #4
    9a34:	7a43      	ldrb	r3, [r0, #9]
    9a36:	4393      	bics	r3, r2
    9a38:	7243      	strb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
    9a3a:	f7ff ffeb 	bl	9a14 <_is_thread_ready>
    9a3e:	2800      	cmp	r0, #0
    9a40:	d011      	beq.n	9a66 <start_thread+0x3e>
		_add_thread_to_ready_q(thread);
    9a42:	0020      	movs	r0, r4
    9a44:	f7ff fcec 	bl	9420 <_add_thread_to_ready_q>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    9a48:	4b09      	ldr	r3, [pc, #36]	; (9a70 <start_thread+0x48>)
    9a4a:	689b      	ldr	r3, [r3, #8]
    9a4c:	895b      	ldrh	r3, [r3, #10]
    9a4e:	2b7f      	cmp	r3, #127	; 0x7f
    9a50:	d809      	bhi.n	9a66 <start_thread+0x3e>
    9a52:	f7ff fd7d 	bl	9550 <__must_switch_threads>
    9a56:	2800      	cmp	r0, #0
    9a58:	d005      	beq.n	9a66 <start_thread+0x3e>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    9a5a:	f7ff fe47 	bl	96ec <_update_time_slice_before_swap>
#endif

	return __swap(key);
    9a5e:	0028      	movs	r0, r5
    9a60:	f7fe ffb0 	bl	89c4 <__swap>
    9a64:	e002      	b.n	9a6c <start_thread+0x44>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    9a66:	2d00      	cmp	r5, #0
    9a68:	d100      	bne.n	9a6c <start_thread+0x44>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    9a6a:	b662      	cpsie	i
			return;
		}
	}

	irq_unlock(key);
}
    9a6c:	bd70      	pop	{r4, r5, r6, pc}
    9a6e:	46c0      	nop			; (mov r8, r8)
    9a70:	20000e94 	.word	0x20000e94

00009a74 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    9a74:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    9a76:	6900      	ldr	r0, [r0, #16]
    9a78:	1c42      	adds	r2, r0, #1
    9a7a:	d010      	beq.n	9a9e <_abort_timeout+0x2a>
    9a7c:	4a08      	ldr	r2, [pc, #32]	; (9aa0 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    9a7e:	6912      	ldr	r2, [r2, #16]
    9a80:	4293      	cmp	r3, r2
    9a82:	d003      	beq.n	9a8c <_abort_timeout+0x18>
    9a84:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    9a86:	6911      	ldr	r1, [r2, #16]
    9a88:	1808      	adds	r0, r1, r0
    9a8a:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    9a8c:	685a      	ldr	r2, [r3, #4]
    9a8e:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
    9a90:	2000      	movs	r0, #0
    9a92:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    9a94:	6819      	ldr	r1, [r3, #0]
    9a96:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    9a98:	2201      	movs	r2, #1
    9a9a:	4252      	negs	r2, r2
    9a9c:	611a      	str	r2, [r3, #16]

	return 0;
}
    9a9e:	4770      	bx	lr
    9aa0:	20000e94 	.word	0x20000e94

00009aa4 <schedule_new_thread.part.14>:
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    9aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9aa6:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    9aa8:	f3ef 8510 	mrs	r5, PRIMASK
    9aac:	b672      	cpsid	i
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
    9aae:	3109      	adds	r1, #9
    9ab0:	0008      	movs	r0, r1
    9ab2:	210a      	movs	r1, #10
    9ab4:	f7f6 fb74 	bl	1a0 <__aeabi_uidiv>
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
    9ab8:	2300      	movs	r3, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9aba:	4a17      	ldr	r2, [pc, #92]	; (9b18 <schedule_new_thread.part.14+0x74>)
    9abc:	61e3      	str	r3, [r4, #28]
    9abe:	4e17      	ldr	r6, [pc, #92]	; (9b1c <schedule_new_thread.part.14+0x78>)
    9ac0:	68d3      	ldr	r3, [r2, #12]
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
    9ac2:	3001      	adds	r0, #1
    9ac4:	6220      	str	r0, [r4, #32]
	timeout->thread = thread;
    9ac6:	61a4      	str	r4, [r4, #24]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9ac8:	42b3      	cmp	r3, r6
    9aca:	d107      	bne.n	9adc <schedule_new_thread.part.14+0x38>
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
    9acc:	0023      	movs	r3, r4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    9ace:	6126      	str	r6, [r4, #16]
	node->prev = list->tail;
    9ad0:	6911      	ldr	r1, [r2, #16]
    9ad2:	3310      	adds	r3, #16
    9ad4:	6161      	str	r1, [r4, #20]

	list->tail->next = node;
    9ad6:	600b      	str	r3, [r1, #0]
	list->tail = node;
    9ad8:	6113      	str	r3, [r2, #16]
    9ada:	e019      	b.n	9b10 <schedule_new_thread.part.14+0x6c>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    9adc:	2b00      	cmp	r3, #0
    9ade:	d0f5      	beq.n	9acc <schedule_new_thread.part.14+0x28>
    9ae0:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
    9ae2:	6a21      	ldr	r1, [r4, #32]
    9ae4:	6918      	ldr	r0, [r3, #16]
    9ae6:	4281      	cmp	r1, r0
    9ae8:	dc0a      	bgt.n	9b00 <schedule_new_thread.part.14+0x5c>
			in_q->delta_ticks_from_prev -= *delta;
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
    9aea:	0022      	movs	r2, r4
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
		if (*delta <= in_q->delta_ticks_from_prev) {
			in_q->delta_ticks_from_prev -= *delta;
    9aec:	1a41      	subs	r1, r0, r1
    9aee:	6119      	str	r1, [r3, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    9af0:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
    9af2:	6123      	str	r3, [r4, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    9af4:	6161      	str	r1, [r4, #20]
		node->next = insert_point;
		insert_point->prev->next = node;
    9af6:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
    9af8:	3210      	adds	r2, #16
    9afa:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
    9afc:	605a      	str	r2, [r3, #4]
    9afe:	e007      	b.n	9b10 <schedule_new_thread.part.14+0x6c>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
    9b00:	1a09      	subs	r1, r1, r0
    9b02:	6221      	str	r1, [r4, #32]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9b04:	42bb      	cmp	r3, r7
    9b06:	d0e1      	beq.n	9acc <schedule_new_thread.part.14+0x28>
    9b08:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	d1e9      	bne.n	9ae2 <schedule_new_thread.part.14+0x3e>
    9b0e:	e7dd      	b.n	9acc <schedule_new_thread.part.14+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    9b10:	2d00      	cmp	r5, #0
    9b12:	d100      	bne.n	9b16 <schedule_new_thread.part.14+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    9b14:	b662      	cpsie	i
	}
#else
	ARG_UNUSED(delay);
	start_thread(thread);
#endif
}
    9b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b18:	20000e94 	.word	0x20000e94
    9b1c:	20000ea0 	.word	0x20000ea0

00009b20 <k_is_in_isr>:
    9b20:	f3ef 8305 	mrs	r3, IPSR
    9b24:	2001      	movs	r0, #1
    9b26:	2b0d      	cmp	r3, #13
    9b28:	d802      	bhi.n	9b30 <k_is_in_isr+0x10>
    9b2a:	3b03      	subs	r3, #3
    9b2c:	4258      	negs	r0, r3
    9b2e:	4158      	adcs	r0, r3


int k_is_in_isr(void)
{
	return _is_in_isr();
}
    9b30:	4770      	bx	lr
	...

00009b34 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
    9b34:	4b02      	ldr	r3, [pc, #8]	; (9b40 <_is_thread_essential+0xc>)
    9b36:	689b      	ldr	r3, [r3, #8]
    9b38:	7a18      	ldrb	r0, [r3, #8]
    9b3a:	2301      	movs	r3, #1
    9b3c:	4018      	ands	r0, r3
}
    9b3e:	4770      	bx	lr
    9b40:	20000e94 	.word	0x20000e94

00009b44 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
    9b44:	b510      	push	{r4, lr}
    9b46:	0004      	movs	r4, r0
    9b48:	0008      	movs	r0, r1
    9b4a:	0011      	movs	r1, r2
	entry(p1, p2, p3);
    9b4c:	001a      	movs	r2, r3
    9b4e:	47a0      	blx	r4

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_MULTITHREADING
	if (_is_thread_essential()) {
    9b50:	f7ff fff0 	bl	9b34 <_is_thread_essential>
    9b54:	2800      	cmp	r0, #0
    9b56:	d002      	beq.n	9b5e <_thread_entry+0x1a>
		_k_except_reason(_NANO_ERR_INVALID_TASK_EXIT);
    9b58:	b662      	cpsie	i
    9b5a:	2001      	movs	r0, #1
    9b5c:	df02      	svc	2
	}

	k_thread_abort(_current);
    9b5e:	4b02      	ldr	r3, [pc, #8]	; (9b68 <_thread_entry+0x24>)
    9b60:	6898      	ldr	r0, [r3, #8]
    9b62:	f7ff f81b 	bl	8b9c <k_thread_abort>
    9b66:	46c0      	nop			; (mov r8, r8)
    9b68:	20000e94 	.word	0x20000e94

00009b6c <k_thread_create>:

k_tid_t k_thread_create(struct k_thread *new_thread, char *stack,
			size_t stack_size, void (*entry)(void *, void *, void*),
			void *p1, void *p2, void *p3,
			int prio, u32_t options, s32_t delay)
{
    9b6c:	b510      	push	{r4, lr}
    9b6e:	0004      	movs	r4, r0
    9b70:	b086      	sub	sp, #24
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
    9b72:	980c      	ldr	r0, [sp, #48]	; 0x30
    9b74:	9004      	str	r0, [sp, #16]
    9b76:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9b78:	9003      	str	r0, [sp, #12]
    9b7a:	980a      	ldr	r0, [sp, #40]	; 0x28
    9b7c:	9002      	str	r0, [sp, #8]
    9b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9b80:	9001      	str	r0, [sp, #4]
    9b82:	9808      	ldr	r0, [sp, #32]
    9b84:	9000      	str	r0, [sp, #0]
    9b86:	0020      	movs	r0, r4
    9b88:	f7fe ffa4 	bl	8ad4 <_new_thread>

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
    9b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9b8e:	2b00      	cmp	r3, #0
    9b90:	d103      	bne.n	9b9a <k_thread_create+0x2e>
		start_thread(thread);
    9b92:	0020      	movs	r0, r4
    9b94:	f7ff ff48 	bl	9a28 <start_thread>
    9b98:	e003      	b.n	9ba2 <k_thread_create+0x36>
    9b9a:	990d      	ldr	r1, [sp, #52]	; 0x34
    9b9c:	0020      	movs	r0, r4
    9b9e:	f7ff ff81 	bl	9aa4 <schedule_new_thread.part.14>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
		    options);

	schedule_new_thread(new_thread, delay);
	return new_thread;
}
    9ba2:	0020      	movs	r0, r4
    9ba4:	b006      	add	sp, #24
    9ba6:	bd10      	pop	{r4, pc}

00009ba8 <_k_thread_single_abort>:
	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    9ba8:	6d03      	ldr	r3, [r0, #80]	; 0x50

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
    9baa:	b510      	push	{r4, lr}
    9bac:	0004      	movs	r4, r0
	if (thread->fn_abort != NULL) {
    9bae:	2b00      	cmp	r3, #0
    9bb0:	d000      	beq.n	9bb4 <_k_thread_single_abort+0xc>
		thread->fn_abort();
    9bb2:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    9bb4:	0020      	movs	r0, r4
    9bb6:	f7ff ff2d 	bl	9a14 <_is_thread_ready>
    9bba:	2800      	cmp	r0, #0
    9bbc:	d003      	beq.n	9bc6 <_k_thread_single_abort+0x1e>
		_remove_thread_from_ready_q(thread);
    9bbe:	0020      	movs	r0, r4
    9bc0:	f7ff fc56 	bl	9470 <_remove_thread_from_ready_q>
    9bc4:	e012      	b.n	9bec <_k_thread_single_abort+0x44>
	} else {
		if (_is_thread_pending(thread)) {
    9bc6:	2202      	movs	r2, #2
    9bc8:	7a63      	ldrb	r3, [r4, #9]
    9bca:	4213      	tst	r3, r2
    9bcc:	d007      	beq.n	9bde <_k_thread_single_abort+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    9bce:	6863      	ldr	r3, [r4, #4]
    9bd0:	6821      	ldr	r1, [r4, #0]
    9bd2:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    9bd4:	6821      	ldr	r1, [r4, #0]
    9bd6:	604b      	str	r3, [r1, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    9bd8:	7a63      	ldrb	r3, [r4, #9]
    9bda:	4393      	bics	r3, r2
    9bdc:	7263      	strb	r3, [r4, #9]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
    9bde:	6a23      	ldr	r3, [r4, #32]
    9be0:	3301      	adds	r3, #1
    9be2:	d003      	beq.n	9bec <_k_thread_single_abort+0x44>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    9be4:	0020      	movs	r0, r4
    9be6:	3010      	adds	r0, #16
    9be8:	f7ff ff44 	bl	9a74 <_abort_timeout>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_DEAD;
    9bec:	2208      	movs	r2, #8
    9bee:	7a63      	ldrb	r3, [r4, #9]
    9bf0:	4313      	orrs	r3, r2
    9bf2:	7263      	strb	r3, [r4, #9]
			_abort_thread_timeout(thread);
		}
	}
	_mark_thread_as_dead(thread);
}
    9bf4:	bd10      	pop	{r4, pc}
	...

00009bf8 <_init_static_threads>:

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
    9bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    9bfa:	4c1c      	ldr	r4, [pc, #112]	; (9c6c <_init_static_threads+0x74>)
	_mark_thread_as_dead(thread);
}

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
    9bfc:	b087      	sub	sp, #28
    9bfe:	0025      	movs	r5, r4
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    9c00:	4e1b      	ldr	r6, [pc, #108]	; (9c70 <_init_static_threads+0x78>)
    9c02:	42b4      	cmp	r4, r6
    9c04:	d213      	bcs.n	9c2e <_init_static_threads+0x36>
		_new_thread(
    9c06:	6a23      	ldr	r3, [r4, #32]
    9c08:	9304      	str	r3, [sp, #16]
    9c0a:	69e3      	ldr	r3, [r4, #28]
    9c0c:	9303      	str	r3, [sp, #12]
    9c0e:	69a3      	ldr	r3, [r4, #24]
    9c10:	9302      	str	r3, [sp, #8]
    9c12:	6963      	ldr	r3, [r4, #20]
    9c14:	9301      	str	r3, [sp, #4]
    9c16:	6923      	ldr	r3, [r4, #16]
    9c18:	9300      	str	r3, [sp, #0]
    9c1a:	68e3      	ldr	r3, [r4, #12]
    9c1c:	68a2      	ldr	r2, [r4, #8]
    9c1e:	6861      	ldr	r1, [r4, #4]
    9c20:	6820      	ldr	r0, [r4, #0]
    9c22:	f7fe ff57 	bl	8ad4 <_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
    9c26:	6823      	ldr	r3, [r4, #0]
    9c28:	64dc      	str	r4, [r3, #76]	; 0x4c
#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    9c2a:	3430      	adds	r4, #48	; 0x30
    9c2c:	e7e8      	b.n	9c00 <_init_static_threads+0x8>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    9c2e:	4b11      	ldr	r3, [pc, #68]	; (9c74 <_init_static_threads+0x7c>)
    9c30:	689a      	ldr	r2, [r3, #8]
    9c32:	7ad3      	ldrb	r3, [r2, #11]
    9c34:	3b01      	subs	r3, #1
    9c36:	72d3      	strb	r3, [r2, #11]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    9c38:	f3ef 8710 	mrs	r7, PRIMASK
    9c3c:	b672      	cpsid	i
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    9c3e:	002c      	movs	r4, r5
    9c40:	42b4      	cmp	r4, r6
    9c42:	d20c      	bcs.n	9c5e <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
    9c44:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9c46:	1c4b      	adds	r3, r1, #1
    9c48:	d007      	beq.n	9c5a <_init_static_threads+0x62>
			schedule_new_thread(thread_data->init_thread,
    9c4a:	6820      	ldr	r0, [r4, #0]

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
    9c4c:	2900      	cmp	r1, #0
    9c4e:	d102      	bne.n	9c56 <_init_static_threads+0x5e>
		start_thread(thread);
    9c50:	f7ff feea 	bl	9a28 <start_thread>
    9c54:	e001      	b.n	9c5a <_init_static_threads+0x62>
    9c56:	f7ff ff25 	bl	9aa4 <schedule_new_thread.part.14>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    9c5a:	3430      	adds	r4, #48	; 0x30
    9c5c:	e7f0      	b.n	9c40 <_init_static_threads+0x48>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    9c5e:	2f00      	cmp	r7, #0
    9c60:	d100      	bne.n	9c64 <_init_static_threads+0x6c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    9c62:	b662      	cpsie	i
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
    9c64:	f7ff fca0 	bl	95a8 <k_sched_unlock>
}
    9c68:	b007      	add	sp, #28
    9c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c6c:	20000294 	.word	0x20000294
    9c70:	20000294 	.word	0x20000294
    9c74:	20000e94 	.word	0x20000e94

00009c78 <_init_thread_base>:
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    9c78:	7242      	strb	r2, [r0, #9]
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
    9c7a:	2201      	movs	r2, #1
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    9c7c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    9c7e:	2300      	movs	r3, #0
    9c80:	4252      	negs	r2, r2
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    9c82:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
    9c84:	72c3      	strb	r3, [r0, #11]
    9c86:	6202      	str	r2, [r0, #32]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
    9c88:	61c3      	str	r3, [r0, #28]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
    9c8a:	6183      	str	r3, [r0, #24]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
    9c8c:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    9c8e:	4770      	bx	lr

00009c90 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    9c90:	b570      	push	{r4, r5, r6, lr}
    9c92:	0005      	movs	r5, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_fifo_get(&work_q->fifo, K_FOREVER);
    9c94:	2101      	movs	r1, #1
    9c96:	0028      	movs	r0, r5
    9c98:	4249      	negs	r1, r1
    9c9a:	f7ff fb6b 	bl	9374 <k_queue_get>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9c9e:	2102      	movs	r1, #2
    9ca0:	0004      	movs	r4, r0

		handler = work->handler;
    9ca2:	6846      	ldr	r6, [r0, #4]
    9ca4:	4249      	negs	r1, r1

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    9ca6:	3008      	adds	r0, #8
    9ca8:	f7fe ffea 	bl	8c80 <atomic_and>
    9cac:	07c3      	lsls	r3, r0, #31
    9cae:	d501      	bpl.n	9cb4 <work_q_main+0x24>
					       K_WORK_STATE_PENDING)) {
			handler(work);
    9cb0:	0020      	movs	r0, r4
    9cb2:	47b0      	blx	r6
		}

		/* Make sure we don't hog up the CPU if the FIFO never (or
		 * very rarely) gets empty.
		 */
		k_yield();
    9cb4:	f7ff fca8 	bl	9608 <k_yield>
	}
    9cb8:	e7ec      	b.n	9c94 <work_q_main+0x4>
	...

00009cbc <k_work_q_start>:
}

void k_work_q_start(struct k_work_q *work_q, char *stack,
		    size_t stack_size, int prio)
{
    9cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cbe:	0004      	movs	r4, r0
    9cc0:	b087      	sub	sp, #28
    9cc2:	001f      	movs	r7, r3
    9cc4:	000d      	movs	r5, r1
    9cc6:	0016      	movs	r6, r2
	k_fifo_init(&work_q->fifo);
    9cc8:	f7ff fab8 	bl	923c <k_queue_init>

	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
    9ccc:	2300      	movs	r3, #0
    9cce:	0020      	movs	r0, r4
    9cd0:	9305      	str	r3, [sp, #20]
    9cd2:	9304      	str	r3, [sp, #16]
    9cd4:	9302      	str	r3, [sp, #8]
    9cd6:	9301      	str	r3, [sp, #4]
    9cd8:	9703      	str	r7, [sp, #12]
    9cda:	9400      	str	r4, [sp, #0]
    9cdc:	4b03      	ldr	r3, [pc, #12]	; (9cec <k_work_q_start+0x30>)
    9cde:	0032      	movs	r2, r6
    9ce0:	0029      	movs	r1, r5
    9ce2:	3014      	adds	r0, #20
    9ce4:	f7ff ff42 	bl	9b6c <k_thread_create>
			work_q, 0, 0, prio, 0, 0);
}
    9ce8:	b007      	add	sp, #28
    9cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cec:	00009c91 	.word	0x00009c91

00009cf0 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    9cf0:	4770      	bx	lr
