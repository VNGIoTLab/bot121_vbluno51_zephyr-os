
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
       0:	20002b80 	.word	0x20002b80
       4:	0000ea29 	.word	0x0000ea29
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf(fputc, DESC(stdout), format, vargs);
       8:	0000ea57 	.word	0x0000ea57
int printf(const char *_MLIBC_RESTRICT format, ...)
{
	va_list vargs;
	int     r;

	va_start(vargs, format);
       c:	0000e8c9 	.word	0x0000e8c9
	r = _prf(fputc, DESC(stdout), format, vargs);
      10:	0000e8c9 	.word	0x0000e8c9
	va_end(vargs);

	return r;
}
      14:	0000e8c9 	.word	0x0000e8c9
      18:	0000e8c9 	.word	0x0000e8c9
      1c:	0000e8c9 	.word	0x0000e8c9
	uint64_t			double_temp;

	count = 0;

	while ((c = *format++)) {
		if (c != '%') {
      20:	0000e8c9 	.word	0x0000e8c9
      24:	0000e8c9 	.word	0x0000e8c9
      28:	0000e8c9 	.word	0x0000e8c9
      2c:	0000e6f5 	.word	0x0000e6f5
			}

			if (c == '.') {
				c = *format++;
				if (c == '*') {
					precision = (int32_t)
      30:	0000e8c9 	.word	0x0000e8c9
      34:	0000e8c9 	.word	0x0000e8c9
					va_arg(vargs, int32_t);
				} else
					precision = _atoi(&format);

				if (precision > MAXFLD)
      38:	0000e699 	.word	0x0000e699
					precision = -1;
      3c:	0000e8c9 	.word	0x0000e8c9

00000040 <_irq_vector_table>:
				c = *format++;
      40:	0000e9f1 0000d33b 0000e9f1 0000e9f1     ....;...........
			 * No further special processing is done for them.
			 */

			if (strchr("hlLz", c) != NULL) {
				i = c;
				c = *format++;
      50:	0000e9f1 0000e9f1 0000e9f1 0000e9f1     ................
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
      60:	0000e9f1 0000e9f1 0000e9f1 0000e9f1     ................
				if (precision != -1)
					pad = ' ';
				break;

			case '%':
				if ((*func)('%', dest) == EOF) {
      70:	0000e9f1 0000e9f1 0000e9f1 0000e9f1     ................
	count = 0;

	while ((c = *format++)) {
		if (c != '%') {
			if ((*func) (c, dest) == EOF) {
				return EOF;
      80:	0000e9f1 0000e9f1 0000e9f1 0000e9f1     ................
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
      90:	0000e9f1 0000e9f1 0000e9f1 0000e9f1     ................
      a0:	0000e9f1 0000e9f1                       ........

000000a8 <_sw_isr_table>:
				switch (c) {
      a8:	00000000 0000146d 00000000 0000e841     ....m.......A...
      b8:	00000000 0000e841 00000000 0000e841     ....A.......A...
				case '-':
					fminus = true;
					break;

				case '+':
					fplus = true;
      c8:	00000000 0000e841 00000000 0000e841     ....A.......A...
				}
			}

			if (c == '*') {
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
      d8:	20000720 000011b9 00000000 0000e841      .. ........A...
				if (width < 0) {
					fminus = true;
					width = -width;
				}
				c = *format++;
      e8:	00000000 0000e841 00000000 0000e841     ....A.......A...
			} else if (!isdigit(c))
      f8:	00000000 0000e841 00000000 0000d2f9     ....A...........
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
     108:	00000000 0000e841 00000000 0000d333     ....A.......3...
		i = 10 * i + *p++ - '0';
     118:	00000000 0000e841 00000000 0000e841     ....A.......A...
			 */
			if ((unsigned) width > MAXFLD) {
				width = MAXFLD;
			}

			if (c == '.') {
     128:	00000000 0000e841 00000000 00000f21     ....A.......!...

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
		i = 10 * i + *p++ - '0';
     138:	00000000 0000e841 00000000 0000e841     ....A.......A...
     148:	00000000 0000e841 00000000 0000e841     ....A.......A...
			count++;

		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */
     158:	00000000 0000e841 00000000 0000e841     ....A.......A...
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     168:	00000000 0000d329 00000000 0000e841     ....).......A...

00000178 <__gnu_thumb1_case_uqi>:
     178:	b402      	push	{r1}
     17a:	4671      	mov	r1, lr
     17c:	0849      	lsrs	r1, r1, #1
     17e:	0049      	lsls	r1, r1, #1
     180:	5c09      	ldrb	r1, [r1, r0]
     182:	0049      	lsls	r1, r1, #1
     184:	448e      	add	lr, r1
     186:	bc02      	pop	{r1}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <__gnu_thumb1_case_shi>:
     18c:	b403      	push	{r0, r1}
     18e:	4671      	mov	r1, lr
     190:	0849      	lsrs	r1, r1, #1
     192:	0040      	lsls	r0, r0, #1
     194:	0049      	lsls	r1, r1, #1
     196:	5e09      	ldrsh	r1, [r1, r0]
     198:	0049      	lsls	r1, r1, #1
     19a:	448e      	add	lr, r1
     19c:	bc03      	pop	{r0, r1}
     19e:	4770      	bx	lr

000001a0 <__gnu_thumb1_case_uhi>:
				if (precision != -1)
					pad = ' ';
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
     1a0:	b403      	push	{r0, r1}
     1a2:	4671      	mov	r1, lr
     1a4:	0849      	lsrs	r1, r1, #1
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     1a6:	0040      	lsls	r0, r0, #1
     1a8:	0049      	lsls	r1, r1, #1

			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     1aa:	5a09      	ldrh	r1, [r1, r0]
     1ac:	0049      	lsls	r1, r1, #1
     1ae:	448e      	add	lr, r1
     1b0:	bc03      	pop	{r0, r1}
     1b2:	4770      	bx	lr

000001b4 <__gnu_thumb1_case_si>:
				buf[1] = '\0';
     1b4:	b403      	push	{r0, r1}
				need_justifying = true;
				c = 1;
     1b6:	4671      	mov	r1, lr
			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
				buf[1] = '\0';
     1b8:	3102      	adds	r1, #2
				need_justifying = true;
				c = 1;
				break;
     1ba:	0889      	lsrs	r1, r1, #2

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     1bc:	0080      	lsls	r0, r0, #2
     1be:	0089      	lsls	r1, r1, #2
     1c0:	5808      	ldr	r0, [r1, r0]
     1c2:	1840      	adds	r0, r0, r1

#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
     1c4:	4686      	mov	lr, r0
     1c6:	bc03      	pop	{r0, r1}
		*buf++ = '-';
     1c8:	46f7      	mov	pc, lr
     1ca:	46c0      	nop			; (mov r8, r8)

000001cc <__aeabi_uidiv>:
		if (value != 0x80000000)
     1cc:	2200      	movs	r2, #0
			value = -value;
     1ce:	0843      	lsrs	r3, r0, #1
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
		if (value != 0x80000000)
     1d0:	428b      	cmp	r3, r1
     1d2:	d374      	bcc.n	2be <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x3e>
     1d4:	0903      	lsrs	r3, r0, #4
     1d6:	428b      	cmp	r3, r1
     1d8:	d35f      	bcc.n	29a <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x1a>
			value = -value;
	} else if (fplus)
     1da:	0a03      	lsrs	r3, r0, #8
     1dc:	428b      	cmp	r3, r1
     1de:	d344      	bcc.n	26a <__aeabi_uidiv+0x9e>
		*buf++ = '+';
     1e0:	0b03      	lsrs	r3, r0, #12
     1e2:	428b      	cmp	r3, r1
	else if (fspace)
     1e4:	d328      	bcc.n	238 <__aeabi_uidiv+0x6c>
     1e6:	0c03      	lsrs	r3, r0, #16
     1e8:	428b      	cmp	r3, r1
     1ea:	d30d      	bcc.n	208 <__aeabi_uidiv+0x3c>
		*buf++ = ' ';
     1ec:	22ff      	movs	r2, #255	; 0xff
     1ee:	0209      	lsls	r1, r1, #8
     1f0:	ba12      	rev	r2, r2
     1f2:	0c03      	lsrs	r3, r0, #16
     1f4:	428b      	cmp	r3, r1
     1f6:	d302      	bcc.n	1fe <__aeabi_uidiv+0x32>
     1f8:	1212      	asrs	r2, r2, #8
#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
     1fa:	0209      	lsls	r1, r1, #8
     1fc:	d065      	beq.n	2ca <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x4a>
     1fe:	0b03      	lsrs	r3, r0, #12
     200:	428b      	cmp	r3, r1
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     202:	d319      	bcc.n	238 <__aeabi_uidiv+0x6c>
     204:	e000      	b.n	208 <__aeabi_uidiv+0x3c>
     206:	0a09      	lsrs	r1, r1, #8
     208:	0bc3      	lsrs	r3, r0, #15
     20a:	428b      	cmp	r3, r1

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     20c:	d301      	bcc.n	212 <__aeabi_uidiv+0x46>
     20e:	03cb      	lsls	r3, r1, #15
	} else if (fplus)
		*buf++ = '+';
	else if (fspace)
		*buf++ = ' ';

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
     210:	1ac0      	subs	r0, r0, r3
     212:	4152      	adcs	r2, r2
     214:	0b83      	lsrs	r3, r0, #14

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     216:	428b      	cmp	r3, r1
					prefix = 1;
     218:	d301      	bcc.n	21e <__aeabi_uidiv+0x52>

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     21a:	038b      	lsls	r3, r1, #14
     21c:	1ac0      	subs	r0, r0, r3
     21e:	4152      	adcs	r2, r2
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     220:	0b43      	lsrs	r3, r0, #13
     222:	428b      	cmp	r3, r1
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     224:	d301      	bcc.n	22a <__aeabi_uidiv+0x5e>
     226:	034b      	lsls	r3, r1, #13
     228:	1ac0      	subs	r0, r0, r3
     22a:	4152      	adcs	r2, r2
				double_temp = u.i;
     22c:	0b03      	lsrs	r3, r0, #12
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     22e:	428b      	cmp	r3, r1
     230:	d301      	bcc.n	236 <__aeabi_uidiv+0x6a>
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     232:	030b      	lsls	r3, r1, #12
     234:	1ac0      	subs	r0, r0, r3
     236:	4152      	adcs	r2, r2
     238:	0ac3      	lsrs	r3, r0, #11
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     23a:	428b      	cmp	r3, r1
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     23c:	d301      	bcc.n	242 <__aeabi_uidiv+0x76>
	fract = (double_temp << 11) & ~HIGHBIT64;
     23e:	02cb      	lsls	r3, r1, #11
     240:	1ac0      	subs	r0, r0, r3
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     242:	4152      	adcs	r2, r2
	fract = (double_temp << 11) & ~HIGHBIT64;
     244:	0a83      	lsrs	r3, r0, #10
     246:	428b      	cmp	r3, r1
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     248:	d301      	bcc.n	24e <__aeabi_uidiv+0x82>
     24a:	028b      	lsls	r3, r1, #10
		if (!fract) {
     24c:	1ac0      	subs	r0, r0, r3
     24e:	4152      	adcs	r2, r2
     250:	0a43      	lsrs	r3, r0, #9
     252:	428b      	cmp	r3, r1
			*buf++ = sign ? '-' : '+';
     254:	d301      	bcc.n	25a <__aeabi_uidiv+0x8e>
     256:	024b      	lsls	r3, r1, #9
     258:	1ac0      	subs	r0, r0, r3
     25a:	4152      	adcs	r2, r2
     25c:	0a03      	lsrs	r3, r0, #8
			*buf++ = 'I';
     25e:	428b      	cmp	r3, r1
     260:	d301      	bcc.n	266 <__aeabi_uidiv+0x9a>
			*buf++ = 'N';
     262:	020b      	lsls	r3, r1, #8
     264:	1ac0      	subs	r0, r0, r3
			*buf++ = 'F';
     266:	4152      	adcs	r2, r2
     268:	d2cd      	bcs.n	206 <__aeabi_uidiv+0x3a>
     26a:	09c3      	lsrs	r3, r0, #7
     26c:	428b      	cmp	r3, r1
		} else {
			*buf++ = 'N';
     26e:	d301      	bcc.n	274 <__aeabi_uidiv+0xa8>
			*buf++ = 'a';
     270:	01cb      	lsls	r3, r1, #7
			*buf++ = sign ? '-' : '+';
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
     272:	1ac0      	subs	r0, r0, r3
			*buf++ = 'a';
			*buf++ = 'N';
     274:	4152      	adcs	r2, r2
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
     276:	0983      	lsrs	r3, r0, #6
			*buf++ = 'N';
     278:	428b      	cmp	r3, r1
     27a:	d301      	bcc.n	280 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE>
     27c:	018b      	lsls	r3, r1, #6
		}
		*buf = 0;
     27e:	1ac0      	subs	r0, r0, r3
		return buf - start;
     280:	4152      	adcs	r2, r2
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
			*buf++ = 'N';
		}
		*buf = 0;
     282:	0943      	lsrs	r3, r0, #5
		return buf - start;
     284:	428b      	cmp	r3, r1
     286:	d301      	bcc.n	28c <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0xc>
	}

	if ((exp | fract) != 0) {
     288:	014b      	lsls	r3, r1, #5
     28a:	1ac0      	subs	r0, r0, r3
     28c:	4152      	adcs	r2, r2
     28e:	0903      	lsrs	r3, r0, #4
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     290:	428b      	cmp	r3, r1
		fract |= HIGHBIT64;
     292:	d301      	bcc.n	298 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x18>
		*buf = 0;
		return buf - start;
	}

	if ((exp | fract) != 0) {
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     294:	010b      	lsls	r3, r1, #4
		fract |= HIGHBIT64;
     296:	1ac0      	subs	r0, r0, r3
     298:	4152      	adcs	r2, r2
     29a:	08c3      	lsrs	r3, r0, #3
     29c:	428b      	cmp	r3, r1
		decexp = true;		/* Wasn't zero */
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
     29e:	d301      	bcc.n	2a4 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x24>
     2a0:	00cb      	lsls	r3, r1, #3
		*buf++ = '-';
     2a2:	1ac0      	subs	r0, r0, r3
     2a4:	4152      	adcs	r2, r2
     2a6:	0883      	lsrs	r3, r0, #2
	} else if (fplus) {
     2a8:	428b      	cmp	r3, r1
     2aa:	d301      	bcc.n	2b0 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x30>
     2ac:	008b      	lsls	r3, r1, #2
     2ae:	1ac0      	subs	r0, r0, r3
		*buf++ = '+';
     2b0:	4152      	adcs	r2, r2
     2b2:	0843      	lsrs	r3, r0, #1
	} else if (fspace) {
     2b4:	428b      	cmp	r3, r1
     2b6:	d301      	bcc.n	2bc <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x3c>
     2b8:	004b      	lsls	r3, r1, #1
     2ba:	1ac0      	subs	r0, r0, r3
		*buf++ = ' ';
     2bc:	4152      	adcs	r2, r2
     2be:	1a41      	subs	r1, r0, r1
     2c0:	d200      	bcs.n	2c4 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x44>
     2c2:	4601      	mov	r1, r0
     2c4:	4152      	adcs	r2, r2
	}

	decexp = 0;
     2c6:	4610      	mov	r0, r2
     2c8:	4770      	bx	lr
	while (exp <= -3) {
     2ca:	e7ff      	b.n	2cc <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x4c>
     2cc:	b501      	push	{r0, lr}
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     2ce:	2000      	movs	r0, #0
     2d0:	f000 f8f0 	bl	4b4 <__aeabi_idiv0>
     2d4:	bd02      	pop	{r1, pc}
     2d6:	46c0      	nop			; (mov r8, r8)

000002d8 <__aeabi_uidivmod>:
			_rlrshift(&fract);
     2d8:	2900      	cmp	r1, #0
     2da:	d0f7      	beq.n	2cc <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x4c>
     2dc:	e776      	b.n	1cc <__aeabi_uidiv>
			exp++;
     2de:	4770      	bx	lr

000002e0 <__aeabi_idiv>:
     2e0:	4603      	mov	r3, r0
		}
		fract *= 5;
     2e2:	430b      	orrs	r3, r1
     2e4:	d47f      	bmi.n	3e6 <__aeabi_idiv+0x106>
     2e6:	2200      	movs	r2, #0
     2e8:	0843      	lsrs	r3, r0, #1
		exp++;
		decexp--;
     2ea:	428b      	cmp	r3, r1
	while (exp <= -3) {
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
     2ec:	d374      	bcc.n	3d8 <__aeabi_idiv+0xf8>
     2ee:	0903      	lsrs	r3, r0, #4
		exp++;
		decexp--;
     2f0:	428b      	cmp	r3, r1
     2f2:	d35f      	bcc.n	3b4 <__aeabi_idiv+0xd4>
     2f4:	0a03      	lsrs	r3, r0, #8

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     2f6:	428b      	cmp	r3, r1
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
		exp++;
     2f8:	d344      	bcc.n	384 <__aeabi_idiv+0xa4>
		decexp--;

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     2fa:	0b03      	lsrs	r3, r0, #12
     2fc:	428b      	cmp	r3, r1
			fract <<= 1;
     2fe:	d328      	bcc.n	352 <__aeabi_idiv+0x72>
     300:	0c03      	lsrs	r3, r0, #16
			exp--;
     302:	428b      	cmp	r3, r1
     304:	d30d      	bcc.n	322 <__aeabi_idiv+0x42>
     306:	22ff      	movs	r2, #255	; 0xff
     308:	0209      	lsls	r1, r1, #8
     30a:	ba12      	rev	r2, r2
     30c:	0c03      	lsrs	r3, r0, #16
     30e:	428b      	cmp	r3, r1
     310:	d302      	bcc.n	318 <__aeabi_idiv+0x38>
     312:	1212      	asrs	r2, r2, #8
     314:	0209      	lsls	r1, r1, #8
     316:	d065      	beq.n	3e4 <__aeabi_idiv+0x104>
     318:	0b03      	lsrs	r3, r0, #12
     31a:	428b      	cmp	r3, r1
     31c:	d319      	bcc.n	352 <__aeabi_idiv+0x72>
     31e:	e000      	b.n	322 <__aeabi_idiv+0x42>
     320:	0a09      	lsrs	r1, r1, #8
     322:	0bc3      	lsrs	r3, r0, #15
     324:	428b      	cmp	r3, r1
     326:	d301      	bcc.n	32c <__aeabi_idiv+0x4c>
     328:	03cb      	lsls	r3, r1, #15
     32a:	1ac0      	subs	r0, r0, r3
     32c:	4152      	adcs	r2, r2
     32e:	0b83      	lsrs	r3, r0, #14
     330:	428b      	cmp	r3, r1
     332:	d301      	bcc.n	338 <__aeabi_idiv+0x58>
		}
	}

	while (exp > 0) {
     334:	038b      	lsls	r3, r1, #14
     336:	1ac0      	subs	r0, r0, r3
		_ldiv5(&fract);
     338:	4152      	adcs	r2, r2
     33a:	0b43      	lsrs	r3, r0, #13
     33c:	428b      	cmp	r3, r1
		exp--;
		decexp++;
     33e:	d301      	bcc.n	344 <__aeabi_idiv+0x64>
     340:	034b      	lsls	r3, r1, #13
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     342:	1ac0      	subs	r0, r0, r3
	}

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
     344:	4152      	adcs	r2, r2
		}
	}

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
     346:	0b03      	lsrs	r3, r0, #12
		decexp++;
     348:	428b      	cmp	r3, r1
     34a:	d301      	bcc.n	350 <__aeabi_idiv+0x70>
     34c:	030b      	lsls	r3, r1, #12
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     34e:	1ac0      	subs	r0, r0, r3
     350:	4152      	adcs	r2, r2
			fract <<= 1;
     352:	0ac3      	lsrs	r3, r0, #11
     354:	428b      	cmp	r3, r1
			exp--;
     356:	d301      	bcc.n	35c <__aeabi_idiv+0x7c>
     358:	02cb      	lsls	r3, r1, #11
     35a:	1ac0      	subs	r0, r0, r3
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     35c:	4152      	adcs	r2, r2
		exp++;
     35e:	0a83      	lsrs	r3, r0, #10
			exp--;
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     360:	428b      	cmp	r3, r1
     362:	d301      	bcc.n	368 <__aeabi_idiv+0x88>
			fract <<= 1;
			exp--;
		}
	}

	while (exp < (0 + 4)) {
     364:	028b      	lsls	r3, r1, #10
     366:	1ac0      	subs	r0, r0, r3
		_rlrshift(&fract);
		exp++;
	}

	if (precision < 0)
     368:	4152      	adcs	r2, r2
     36a:	0a43      	lsrs	r3, r0, #9
		precision = 6;		/* Default precision if none given */
     36c:	428b      	cmp	r3, r1
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
     36e:	d301      	bcc.n	374 <__aeabi_idiv+0x94>
     370:	024b      	lsls	r3, r1, #9
     372:	1ac0      	subs	r0, r0, r3
     374:	4152      	adcs	r2, r2
     376:	0a03      	lsrs	r3, r0, #8
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     378:	428b      	cmp	r3, r1
     37a:	d301      	bcc.n	380 <__aeabi_idiv+0xa0>
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
     37c:	020b      	lsls	r3, r1, #8
     37e:	1ac0      	subs	r0, r0, r3
     380:	4152      	adcs	r2, r2
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     382:	d2cd      	bcs.n	320 <__aeabi_idiv+0x40>
     384:	09c3      	lsrs	r3, r0, #7
     386:	428b      	cmp	r3, r1
     388:	d301      	bcc.n	38e <__aeabi_idiv+0xae>
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     38a:	01cb      	lsls	r3, r1, #7
     38c:	1ac0      	subs	r0, r0, r3
     38e:	4152      	adcs	r2, r2
     390:	0983      	lsrs	r3, r0, #6
     392:	428b      	cmp	r3, r1
     394:	d301      	bcc.n	39a <__aeabi_idiv+0xba>
     396:	018b      	lsls	r3, r1, #6
			if (c == 'g')
     398:	1ac0      	subs	r0, r0, r3
     39a:	4152      	adcs	r2, r2
				c = 'e';
			else
				c = 'E';
     39c:	0943      	lsrs	r3, r0, #5
     39e:	428b      	cmp	r3, r1
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     3a0:	d301      	bcc.n	3a6 <__aeabi_idiv+0xc6>
     3a2:	014b      	lsls	r3, r1, #5
				c = 'E';
		} else
			c = 'f';
	}

	if (c == 'f') {
     3a4:	1ac0      	subs	r0, r0, r3
     3a6:	4152      	adcs	r2, r2
		exp = precision + decexp;
     3a8:	0903      	lsrs	r3, r0, #4
     3aa:	428b      	cmp	r3, r1
     3ac:	d301      	bcc.n	3b2 <__aeabi_idiv+0xd2>
     3ae:	010b      	lsls	r3, r1, #4
     3b0:	1ac0      	subs	r0, r0, r3
     3b2:	4152      	adcs	r2, r2
     3b4:	08c3      	lsrs	r3, r0, #3
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
			if (c == 'g')
				c = 'e';
     3b6:	428b      	cmp	r3, r1
	if (c == 'f') {
		exp = precision + decexp;
		if (exp < 0)
			exp = 0;
	} else
		exp = precision + 1;
     3b8:	d301      	bcc.n	3be <__aeabi_idiv+0xde>
	digit_count = 16;
     3ba:	00cb      	lsls	r3, r1, #3
     3bc:	1ac0      	subs	r0, r0, r3
     3be:	4152      	adcs	r2, r2
     3c0:	0883      	lsrs	r3, r0, #2
     3c2:	428b      	cmp	r3, r1
	if (exp > 16)
		exp = 16;

	ltemp = 0x0800000000000000;
     3c4:	d301      	bcc.n	3ca <__aeabi_idiv+0xea>
     3c6:	008b      	lsls	r3, r1, #2
     3c8:	1ac0      	subs	r0, r0, r3
     3ca:	4152      	adcs	r2, r2
     3cc:	0843      	lsrs	r3, r0, #1
	while (exp--) {
     3ce:	428b      	cmp	r3, r1
     3d0:	d301      	bcc.n	3d6 <__aeabi_idiv+0xf6>
		_ldiv5(&ltemp);
     3d2:	004b      	lsls	r3, r1, #1
     3d4:	1ac0      	subs	r0, r0, r3
     3d6:	4152      	adcs	r2, r2
		_rlrshift(&ltemp);
     3d8:	1a41      	subs	r1, r0, r1
     3da:	d200      	bcs.n	3de <__aeabi_idiv+0xfe>
     3dc:	4601      	mov	r1, r0
     3de:	4152      	adcs	r2, r2
	}

	fract += ltemp;
     3e0:	4610      	mov	r0, r2
     3e2:	4770      	bx	lr
     3e4:	e05d      	b.n	4a2 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x1d>
     3e6:	0fca      	lsrs	r2, r1, #31
     3e8:	d000      	beq.n	3ec <__aeabi_idiv+0x10c>
     3ea:	4249      	negs	r1, r1
     3ec:	1003      	asrs	r3, r0, #32
     3ee:	d300      	bcc.n	3f2 <__aeabi_idiv+0x112>
	if ((fract >> 32) & 0xF0000000) {
     3f0:	4240      	negs	r0, r0
     3f2:	4053      	eors	r3, r2
		_ldiv5(&fract);
     3f4:	2200      	movs	r2, #0
     3f6:	469c      	mov	ip, r3
     3f8:	0903      	lsrs	r3, r0, #4
		_rlrshift(&fract);
     3fa:	428b      	cmp	r3, r1
     3fc:	d32d      	bcc.n	45a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x5a>
     3fe:	0a03      	lsrs	r3, r0, #8
		decexp++;
     400:	428b      	cmp	r3, r1
     402:	d312      	bcc.n	42a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2a>
     404:	22fc      	movs	r2, #252	; 0xfc
	}

	if (c == 'f') {
     406:	0189      	lsls	r1, r1, #6
     408:	ba12      	rev	r2, r2
		if (decexp > 0) {
     40a:	0a03      	lsrs	r3, r0, #8
     40c:	428b      	cmp	r3, r1
     40e:	d30c      	bcc.n	42a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2a>
     410:	0189      	lsls	r1, r1, #6
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
     412:	1192      	asrs	r2, r2, #6
     414:	428b      	cmp	r3, r1
     416:	d308      	bcc.n	42a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2a>
     418:	0189      	lsls	r1, r1, #6
     41a:	1192      	asrs	r2, r2, #6
     41c:	428b      	cmp	r3, r1
		decexp++;
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
     41e:	d304      	bcc.n	42a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2a>
     420:	0189      	lsls	r1, r1, #6
     422:	d03a      	beq.n	49a <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x15>
     424:	1192      	asrs	r2, r2, #6
     426:	e000      	b.n	42a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2a>
				*buf++ = _get_digit(&fract, &digit_count);
				decexp--;
			}
		} else
			*buf++ = '0';
     428:	0989      	lsrs	r1, r1, #6
     42a:	09c3      	lsrs	r3, r0, #7
     42c:	428b      	cmp	r3, r1
		if (falt || (precision > 0))
     42e:	d301      	bcc.n	434 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x34>
     430:	01cb      	lsls	r3, r1, #7
     432:	1ac0      	subs	r0, r0, r3
     434:	4152      	adcs	r2, r2
     436:	0983      	lsrs	r3, r0, #6
     438:	428b      	cmp	r3, r1
			*buf++ = '.';
     43a:	d301      	bcc.n	440 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x40>
     43c:	018b      	lsls	r3, r1, #6
     43e:	1ac0      	subs	r0, r0, r3
     440:	4152      	adcs	r2, r2
     442:	0943      	lsrs	r3, r0, #5
		while (precision-- > 0) {
     444:	428b      	cmp	r3, r1
     446:	d301      	bcc.n	44c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x4c>
     448:	014b      	lsls	r3, r1, #5
			if (decexp < 0) {
     44a:	1ac0      	subs	r0, r0, r3
     44c:	4152      	adcs	r2, r2
     44e:	0903      	lsrs	r3, r0, #4
				*buf++ = '0';
     450:	428b      	cmp	r3, r1
     452:	d301      	bcc.n	458 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x58>
				decexp++;
     454:	010b      	lsls	r3, r1, #4
     456:	1ac0      	subs	r0, r0, r3
     458:	4152      	adcs	r2, r2
     45a:	08c3      	lsrs	r3, r0, #3
			} else
				*buf++ = _get_digit(&fract, &digit_count);
     45c:	428b      	cmp	r3, r1
     45e:	d301      	bcc.n	464 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x64>
     460:	00cb      	lsls	r3, r1, #3
     462:	1ac0      	subs	r0, r0, r3
     464:	4152      	adcs	r2, r2
     466:	0883      	lsrs	r3, r0, #2
     468:	428b      	cmp	r3, r1
     46a:	d301      	bcc.n	470 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x70>
     46c:	008b      	lsls	r3, r1, #2
     46e:	1ac0      	subs	r0, r0, r3
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
     470:	4152      	adcs	r2, r2
     472:	d2d9      	bcs.n	428 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x28>
     474:	0843      	lsrs	r3, r0, #1
     476:	428b      	cmp	r3, r1
     478:	d301      	bcc.n	47e <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x7e>
		if (*buf++ != '0')
			decexp--;
     47a:	004b      	lsls	r3, r1, #1
     47c:	1ac0      	subs	r0, r0, r3
     47e:	4152      	adcs	r2, r2
     480:	1a41      	subs	r1, r0, r1
     482:	d200      	bcs.n	486 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x1>
     484:	4601      	mov	r1, r0
		if (falt || (precision > 0))
     486:	4663      	mov	r3, ip
     488:	4152      	adcs	r2, r2
     48a:	105b      	asrs	r3, r3, #1
			} else
				*buf++ = _get_digit(&fract, &digit_count);
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
     48c:	4610      	mov	r0, r2
			decexp--;
		if (falt || (precision > 0))
     48e:	d301      	bcc.n	494 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xf>
     490:	4240      	negs	r0, r0
			*buf++ = '.';
     492:	2b00      	cmp	r3, #0
     494:	d500      	bpl.n	498 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x13>
     496:	4249      	negs	r1, r1
     498:	4770      	bx	lr
		while (precision-- > 0)
     49a:	4663      	mov	r3, ip
     49c:	105b      	asrs	r3, r3, #1
			*buf++ = _get_digit(&fract, &digit_count);
     49e:	d300      	bcc.n	4a2 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x1d>
     4a0:	4240      	negs	r0, r0
     4a2:	b501      	push	{r0, lr}
     4a4:	2000      	movs	r0, #0
     4a6:	f000 f805 	bl	4b4 <__aeabi_idiv0>
     4aa:	bd02      	pop	{r1, pc}

000004ac <__aeabi_idivmod>:
	}

	if (prune_zero) {
     4ac:	2900      	cmp	r1, #0
     4ae:	d0f8      	beq.n	4a2 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x1d>
     4b0:	e716      	b.n	2e0 <__aeabi_idiv>
		while (*--buf == '0')
     4b2:	4770      	bx	lr

000004b4 <__aeabi_idiv0>:
     4b4:	4770      	bx	lr
     4b6:	46c0      	nop			; (mov r8, r8)

000004b8 <__aeabi_uldivmod>:
     4b8:	2b00      	cmp	r3, #0
     4ba:	d111      	bne.n	4e0 <__aeabi_uldivmod+0x28>
			;
		if (*buf != '.')
     4bc:	2a00      	cmp	r2, #0
     4be:	d10f      	bne.n	4e0 <__aeabi_uldivmod+0x28>
     4c0:	2900      	cmp	r1, #0
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
     4c2:	d100      	bne.n	4c6 <__aeabi_uldivmod+0xe>
     4c4:	2800      	cmp	r0, #0
     4c6:	d002      	beq.n	4ce <__aeabi_uldivmod+0x16>
     4c8:	2100      	movs	r1, #0
     4ca:	43c9      	mvns	r1, r1
		*buf++ = (char) c;
		if (decexp < 0) {
     4cc:	1c08      	adds	r0, r1, #0
		if (*buf != '.')
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
		*buf++ = (char) c;
     4ce:	b407      	push	{r0, r1, r2}
     4d0:	4802      	ldr	r0, [pc, #8]	; (4dc <__aeabi_uldivmod+0x24>)
		if (decexp < 0) {
     4d2:	a102      	add	r1, pc, #8	; (adr r1, 4dc <__aeabi_uldivmod+0x24>)
     4d4:	1840      	adds	r0, r0, r1
			decexp = -decexp;
     4d6:	9002      	str	r0, [sp, #8]
     4d8:	bd03      	pop	{r0, r1, pc}
			*buf++ = '-';
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	ffffffd9 	.word	0xffffffd9
		} else
			*buf++ = '+';
     4e0:	b403      	push	{r0, r1}
		*buf++ = (char) ((decexp / 100) + '0');
     4e2:	4668      	mov	r0, sp
     4e4:	b501      	push	{r0, lr}
     4e6:	9802      	ldr	r0, [sp, #8]
     4e8:	f000 f856 	bl	598 <__udivmoddi4>
     4ec:	9b01      	ldr	r3, [sp, #4]
		decexp %= 100;
     4ee:	469e      	mov	lr, r3
     4f0:	b002      	add	sp, #8
     4f2:	bc0c      	pop	{r2, r3}
     4f4:	4770      	bx	lr
     4f6:	46c0      	nop			; (mov r8, r8)

000004f8 <__aeabi_lmul>:
		*buf++ = (char) ((decexp / 10) + '0');
     4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     4fa:	464f      	mov	r7, r9
     4fc:	4646      	mov	r6, r8
     4fe:	b4c0      	push	{r6, r7}
     500:	0416      	lsls	r6, r2, #16
     502:	0c36      	lsrs	r6, r6, #16
		decexp %= 10;
		*buf++ = (char) (decexp + '0');
     504:	4699      	mov	r9, r3
     506:	0033      	movs	r3, r6
     508:	0405      	lsls	r5, r0, #16
     50a:	0c2c      	lsrs	r4, r5, #16
     50c:	0c07      	lsrs	r7, r0, #16
     50e:	0c15      	lsrs	r5, r2, #16
     510:	4363      	muls	r3, r4
	}
	*buf = 0;
     512:	437e      	muls	r6, r7

	return buf - start;
     514:	436f      	muls	r7, r5
		decexp %= 100;
		*buf++ = (char) ((decexp / 10) + '0');
		decexp %= 10;
		*buf++ = (char) (decexp + '0');
	}
	*buf = 0;
     516:	4365      	muls	r5, r4

	return buf - start;
     518:	0c1c      	lsrs	r4, r3, #16
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
     51a:	19ad      	adds	r5, r5, r6
     51c:	1964      	adds	r4, r4, r5
					prefix = 1;
     51e:	469c      	mov	ip, r3
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
     520:	42a6      	cmp	r6, r4
     522:	d903      	bls.n	52c <__aeabi_lmul+0x34>
     524:	2380      	movs	r3, #128	; 0x80
     526:	025b      	lsls	r3, r3, #9
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     528:	4698      	mov	r8, r3
     52a:	4447      	add	r7, r8
     52c:	4663      	mov	r3, ip
     52e:	0c25      	lsrs	r5, r4, #16
     530:	19ef      	adds	r7, r5, r7
					prefix = 1;
				need_justifying = true;
				break;

			case 'n':
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
     532:	041d      	lsls	r5, r3, #16
     534:	464b      	mov	r3, r9
				*int32ptr_temp = count;
     536:	434a      	muls	r2, r1
     538:	4343      	muls	r3, r0
     53a:	0c2d      	lsrs	r5, r5, #16
				break;
     53c:	0424      	lsls	r4, r4, #16

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     53e:	1964      	adds	r4, r4, r5
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
				*int32ptr_temp = count;
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     540:	1899      	adds	r1, r3, r2
     542:	19c9      	adds	r1, r1, r7
     544:	0020      	movs	r0, r4
     546:	bc0c      	pop	{r2, r3}

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     548:	4690      	mov	r8, r2
     54a:	4699      	mov	r9, r3
		*buf++ = '0';
     54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     54e:	46c0      	nop			; (mov r8, r8)

00000550 <__ffssi2>:
     550:	b510      	push	{r4, lr}
     552:	2300      	movs	r3, #0
     554:	2800      	cmp	r0, #0
		if (!value) {
     556:	d002      	beq.n	55e <__ffssi2+0xe>
     558:	f000 f8ea 	bl	730 <__ctzsi2>
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     55c:	1c43      	adds	r3, r0, #1

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
				if (precision != -1)
     55e:	0018      	movs	r0, r3
     560:	bd10      	pop	{r4, pc}
					pad = ' ';
     562:	46c0      	nop			; (mov r8, r8)

00000564 <__popcountsi2>:
     564:	4b09      	ldr	r3, [pc, #36]	; (58c <__popcountsi2+0x28>)
     566:	0842      	lsrs	r2, r0, #1

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     568:	401a      	ands	r2, r3
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
			return 1;
		}
	}
	return (buf - buf0) + _to_x(buf, value, 8, precision);
     56a:	1a82      	subs	r2, r0, r2
     56c:	0010      	movs	r0, r2
     56e:	4b08      	ldr	r3, [pc, #32]	; (590 <__popcountsi2+0x2c>)
     570:	0892      	lsrs	r2, r2, #2
     572:	4018      	ands	r0, r3
     574:	4013      	ands	r3, r2
     576:	18c0      	adds	r0, r0, r3
     578:	0903      	lsrs	r3, r0, #4
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
     57a:	1818      	adds	r0, r3, r0
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     57c:	4b05      	ldr	r3, [pc, #20]	; (594 <__popcountsi2+0x30>)
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     57e:	4018      	ands	r0, r3
     580:	0203      	lsls	r3, r0, #8
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
     582:	1818      	adds	r0, r3, r0
     584:	0403      	lsls	r3, r0, #16
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     586:	18c0      	adds	r0, r0, r3
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
     588:	0e00      	lsrs	r0, r0, #24
     58a:	4770      	bx	lr
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     58c:	55555555 	.word	0x55555555
	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     590:	33333333 	.word	0x33333333
     594:	0f0f0f0f 	.word	0x0f0f0f0f

00000598 <__udivmoddi4>:
	if (prefix == 'X') {
		_uc(buf0);
	}

	return len + (buf - buf0);
     598:	b5f0      	push	{r4, r5, r6, r7, lr}
     59a:	464d      	mov	r5, r9
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     59c:	4656      	mov	r6, sl
     59e:	4644      	mov	r4, r8
     5a0:	465f      	mov	r7, fp
					if (cptr_temp[c] == '\0') {
     5a2:	b4f0      	push	{r4, r5, r6, r7}
     5a4:	4692      	mov	sl, r2
     5a6:	b083      	sub	sp, #12
						break;
					}
				}
				if ((precision >= 0) && (precision < c))
     5a8:	0004      	movs	r4, r0
     5aa:	000d      	movs	r5, r1
     5ac:	4699      	mov	r9, r3
     5ae:	428b      	cmp	r3, r1
     5b0:	d82f      	bhi.n	612 <__udivmoddi4+0x7a>
     5b2:	d02c      	beq.n	60e <__udivmoddi4+0x76>
     5b4:	4649      	mov	r1, r9
     5b6:	4650      	mov	r0, sl
					c = precision;
				if (c > 0) {
     5b8:	f000 f8ae 	bl	718 <__clzdi2>
     5bc:	0029      	movs	r1, r5
					memcpy(buf, cptr_temp, (size_t) c);
     5be:	0006      	movs	r6, r0
     5c0:	0020      	movs	r0, r4
     5c2:	f000 f8a9 	bl	718 <__clzdi2>
     5c6:	1a33      	subs	r3, r6, r0
					need_justifying = true;
				}
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5c8:	4698      	mov	r8, r3
     5ca:	3b20      	subs	r3, #32
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     5cc:	469b      	mov	fp, r3
     5ce:	d500      	bpl.n	5d2 <__udivmoddi4+0x3a>
     5d0:	e074      	b.n	6bc <__udivmoddi4+0x124>
     5d2:	4653      	mov	r3, sl
     5d4:	465a      	mov	r2, fp
     5d6:	4093      	lsls	r3, r2
     5d8:	001f      	movs	r7, r3
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     5da:	4653      	mov	r3, sl
     5dc:	4642      	mov	r2, r8
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5de:	4093      	lsls	r3, r2
     5e0:	001e      	movs	r6, r3
		   int alt_form, int precision, int prefix)
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
     5e2:	42af      	cmp	r7, r5
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5e4:	d829      	bhi.n	63a <__udivmoddi4+0xa2>
     5e6:	d026      	beq.n	636 <__udivmoddi4+0x9e>
		   int alt_form, int precision, int prefix)
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
     5e8:	465b      	mov	r3, fp
     5ea:	1ba4      	subs	r4, r4, r6
		*buf++ = '0';
     5ec:	41bd      	sbcs	r5, r7
     5ee:	2b00      	cmp	r3, #0
		*buf++ = 'x';
     5f0:	da00      	bge.n	5f4 <__udivmoddi4+0x5c>
     5f2:	e079      	b.n	6e8 <__udivmoddi4+0x150>
     5f4:	2200      	movs	r2, #0
     5f6:	2300      	movs	r3, #0
     5f8:	9200      	str	r2, [sp, #0]
	}

	len = _to_x(buf, value, 16, precision);
     5fa:	9301      	str	r3, [sp, #4]
     5fc:	2301      	movs	r3, #1
     5fe:	465a      	mov	r2, fp
     600:	4093      	lsls	r3, r2
     602:	9301      	str	r3, [sp, #4]
	if (prefix == 'X') {
     604:	2301      	movs	r3, #1
     606:	4642      	mov	r2, r8
     608:	4093      	lsls	r3, r2
		_uc(buf0);
	}

	return len + (buf - buf0);
     60a:	9300      	str	r3, [sp, #0]
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     60c:	e019      	b.n	642 <__udivmoddi4+0xaa>
	len = _to_x(buf, value, 16, precision);
	if (prefix == 'X') {
		_uc(buf0);
	}

	return len + (buf - buf0);
     60e:	4282      	cmp	r2, r0
     610:	d9d0      	bls.n	5b4 <__udivmoddi4+0x1c>
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     612:	2200      	movs	r2, #0
				need_justifying = true;
				if (precision != -1)
     614:	2300      	movs	r3, #0
     616:	9200      	str	r2, [sp, #0]
					pad = ' ';
     618:	9301      	str	r3, [sp, #4]
     61a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     61c:	2b00      	cmp	r3, #0
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
		if (*buf >= 'a' && *buf <= 'z') {
     61e:	d001      	beq.n	624 <__udivmoddi4+0x8c>
     620:	601c      	str	r4, [r3, #0]
     622:	605d      	str	r5, [r3, #4]
     624:	9800      	ldr	r0, [sp, #0]
			*buf += 'A' - 'a';
     626:	9901      	ldr	r1, [sp, #4]
     628:	b003      	add	sp, #12
     62a:	bc3c      	pop	{r2, r3, r4, r5}
#define EOF  -1
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
     62c:	4690      	mov	r8, r2
     62e:	4699      	mov	r9, r3
     630:	46a2      	mov	sl, r4
     632:	46ab      	mov	fp, r5
     634:	bdf0      	pop	{r4, r5, r6, r7, pc}
			case '%':
				if ((*func)('%', dest) == EOF) {
					return EOF;
				}

				count++;
     636:	42a3      	cmp	r3, r4
     638:	d9d6      	bls.n	5e8 <__udivmoddi4+0x50>
     63a:	2200      	movs	r2, #0
     63c:	2300      	movs	r3, #0
     63e:	9200      	str	r2, [sp, #0]
     640:	9301      	str	r3, [sp, #4]
     642:	4643      	mov	r3, r8
	if (alt_form) {
		*buf++ = '0';
		if (!value) {
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
			return 1;
     644:	2b00      	cmp	r3, #0

			if (c >= MAXFLD + 1)
				return EOF;

			if (need_justifying) {
				if (c < width) {
     646:	d0e8      	beq.n	61a <__udivmoddi4+0x82>
     648:	07fb      	lsls	r3, r7, #31
     64a:	0872      	lsrs	r2, r6, #1
					if (fminus)	{
     64c:	431a      	orrs	r2, r3
     64e:	4646      	mov	r6, r8
     650:	087b      	lsrs	r3, r7, #1
						/* Left justify? */
						for (i = c; i < width; i++)
							buf[i] = ' ';
     652:	e00e      	b.n	672 <__udivmoddi4+0xda>
     654:	42ab      	cmp	r3, r5
     656:	d101      	bne.n	65c <__udivmoddi4+0xc4>

			if (need_justifying) {
				if (c < width) {
					if (fminus)	{
						/* Left justify? */
						for (i = c; i < width; i++)
     658:	42a2      	cmp	r2, r4
     65a:	d80c      	bhi.n	676 <__udivmoddi4+0xde>
     65c:	1aa4      	subs	r4, r4, r2
     65e:	419d      	sbcs	r5, r3
     660:	2001      	movs	r0, #1
     662:	1924      	adds	r4, r4, r4
     664:	416d      	adcs	r5, r5
     666:	2100      	movs	r1, #0
     668:	3e01      	subs	r6, #1
     66a:	1824      	adds	r4, r4, r0
     66c:	414d      	adcs	r5, r1
     66e:	2e00      	cmp	r6, #0
							buf[i] = ' ';
					} else {
						/* Right justify */
						(void) memmove((buf + (width - c)), buf, (size_t) (c
     670:	d006      	beq.n	680 <__udivmoddi4+0xe8>
     672:	42ab      	cmp	r3, r5
     674:	d9ee      	bls.n	654 <__udivmoddi4+0xbc>
     676:	3e01      	subs	r6, #1
     678:	1924      	adds	r4, r4, r4
     67a:	416d      	adcs	r5, r5
     67c:	2e00      	cmp	r6, #0
     67e:	d1f8      	bne.n	672 <__udivmoddi4+0xda>
										+ 1));
						if (pad == ' ')
     680:	465b      	mov	r3, fp
     682:	9800      	ldr	r0, [sp, #0]
     684:	9901      	ldr	r1, [sp, #4]
							prefix = 0;
     686:	1900      	adds	r0, r0, r4
						c = width - c + prefix;
     688:	4169      	adcs	r1, r5
						for (i = prefix; i < c; i++)
     68a:	2b00      	cmp	r3, #0
     68c:	db22      	blt.n	6d4 <__udivmoddi4+0x13c>
							buf[i] = pad;
     68e:	002b      	movs	r3, r5
     690:	465a      	mov	r2, fp
     692:	40d3      	lsrs	r3, r2
     694:	002a      	movs	r2, r5
						(void) memmove((buf + (width - c)), buf, (size_t) (c
										+ 1));
						if (pad == ' ')
							prefix = 0;
						c = width - c + prefix;
						for (i = prefix; i < c; i++)
     696:	4644      	mov	r4, r8
     698:	40e2      	lsrs	r2, r4
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
					if ((*func)(*cptr, dest) == EOF)
     69a:	001c      	movs	r4, r3
     69c:	465b      	mov	r3, fp
     69e:	0015      	movs	r5, r2
     6a0:	2b00      	cmp	r3, #0
     6a2:	db2c      	blt.n	6fe <__udivmoddi4+0x166>
     6a4:	0026      	movs	r6, r4
     6a6:	409e      	lsls	r6, r3
     6a8:	0033      	movs	r3, r6
     6aa:	0026      	movs	r6, r4
     6ac:	4647      	mov	r7, r8
							buf[i] = pad;
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
     6ae:	40be      	lsls	r6, r7
     6b0:	0032      	movs	r2, r6
     6b2:	1a80      	subs	r0, r0, r2
     6b4:	4199      	sbcs	r1, r3
     6b6:	9000      	str	r0, [sp, #0]
     6b8:	9101      	str	r1, [sp, #4]
     6ba:	e7ae      	b.n	61a <__udivmoddi4+0x82>

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
     6bc:	4642      	mov	r2, r8
     6be:	2320      	movs	r3, #32
     6c0:	1a9b      	subs	r3, r3, r2
     6c2:	4652      	mov	r2, sl
     6c4:	40da      	lsrs	r2, r3
     6c6:	4641      	mov	r1, r8
     6c8:	0013      	movs	r3, r2
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     6ca:	464a      	mov	r2, r9
     6cc:	408a      	lsls	r2, r1

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
     6ce:	0017      	movs	r7, r2
     6d0:	431f      	orrs	r7, r3
     6d2:	e782      	b.n	5da <__udivmoddi4+0x42>
			*buf++ = '.';
		while (precision-- > 0)
			*buf++ = _get_digit(&fract, &digit_count);
	}

	if (prune_zero) {
     6d4:	4642      	mov	r2, r8
     6d6:	2320      	movs	r3, #32
     6d8:	1a9b      	subs	r3, r3, r2
     6da:	002a      	movs	r2, r5
     6dc:	4646      	mov	r6, r8
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     6de:	409a      	lsls	r2, r3
     6e0:	0023      	movs	r3, r4
				}
			}
		}
	}
	return count;
}
     6e2:	40f3      	lsrs	r3, r6
     6e4:	4313      	orrs	r3, r2
     6e6:	e7d5      	b.n	694 <__udivmoddi4+0xfc>
     6e8:	4642      	mov	r2, r8
     6ea:	2320      	movs	r3, #32
     6ec:	2100      	movs	r1, #0
     6ee:	1a9b      	subs	r3, r3, r2
     6f0:	2200      	movs	r2, #0
     6f2:	9100      	str	r1, [sp, #0]
     6f4:	9201      	str	r2, [sp, #4]
     6f6:	2201      	movs	r2, #1
     6f8:	40da      	lsrs	r2, r3
     6fa:	9201      	str	r2, [sp, #4]
     6fc:	e782      	b.n	604 <__udivmoddi4+0x6c>
     6fe:	4642      	mov	r2, r8
     700:	2320      	movs	r3, #32
     702:	0026      	movs	r6, r4
     704:	1a9b      	subs	r3, r3, r2
     706:	40de      	lsrs	r6, r3
     708:	002f      	movs	r7, r5
     70a:	46b4      	mov	ip, r6
     70c:	4097      	lsls	r7, r2
     70e:	4666      	mov	r6, ip
     710:	003b      	movs	r3, r7
     712:	4333      	orrs	r3, r6
     714:	e7c9      	b.n	6aa <__udivmoddi4+0x112>
     716:	46c0      	nop			; (mov r8, r8)

00000718 <__clzdi2>:
     718:	b510      	push	{r4, lr}
     71a:	2900      	cmp	r1, #0
     71c:	d103      	bne.n	726 <__clzdi2+0xe>
     71e:	f000 f827 	bl	770 <__clzsi2>
     722:	3020      	adds	r0, #32
     724:	e002      	b.n	72c <__clzdi2+0x14>
     726:	1c08      	adds	r0, r1, #0
     728:	f000 f822 	bl	770 <__clzsi2>
     72c:	bd10      	pop	{r4, pc}
     72e:	46c0      	nop			; (mov r8, r8)

00000730 <__ctzsi2>:
     730:	4241      	negs	r1, r0
     732:	4008      	ands	r0, r1
     734:	211c      	movs	r1, #28
     736:	2301      	movs	r3, #1
     738:	041b      	lsls	r3, r3, #16
     73a:	4298      	cmp	r0, r3
     73c:	d301      	bcc.n	742 <__ctzsi2+0x12>
     73e:	0c00      	lsrs	r0, r0, #16
     740:	3910      	subs	r1, #16
     742:	0a1b      	lsrs	r3, r3, #8
     744:	4298      	cmp	r0, r3
     746:	d301      	bcc.n	74c <__ctzsi2+0x1c>
     748:	0a00      	lsrs	r0, r0, #8
     74a:	3908      	subs	r1, #8
     74c:	091b      	lsrs	r3, r3, #4
     74e:	4298      	cmp	r0, r3
     750:	d301      	bcc.n	756 <__ctzsi2+0x26>
     752:	0900      	lsrs	r0, r0, #4
     754:	3904      	subs	r1, #4
     756:	a202      	add	r2, pc, #8	; (adr r2, 760 <__ctzsi2+0x30>)
     758:	5c10      	ldrb	r0, [r2, r0]
     75a:	1a40      	subs	r0, r0, r1
     75c:	4770      	bx	lr
     75e:	46c0      	nop			; (mov r8, r8)
     760:	1d1d1c1b 	.word	0x1d1d1c1b
     764:	1e1e1e1e 	.word	0x1e1e1e1e
     768:	1f1f1f1f 	.word	0x1f1f1f1f
     76c:	1f1f1f1f 	.word	0x1f1f1f1f

00000770 <__clzsi2>:
     770:	211c      	movs	r1, #28
     772:	2301      	movs	r3, #1
     774:	041b      	lsls	r3, r3, #16
     776:	4298      	cmp	r0, r3
     778:	d301      	bcc.n	77e <__clzsi2+0xe>
     77a:	0c00      	lsrs	r0, r0, #16
     77c:	3910      	subs	r1, #16
     77e:	0a1b      	lsrs	r3, r3, #8
     780:	4298      	cmp	r0, r3
     782:	d301      	bcc.n	788 <__clzsi2+0x18>
     784:	0a00      	lsrs	r0, r0, #8
     786:	3908      	subs	r1, #8
     788:	091b      	lsrs	r3, r3, #4
     78a:	4298      	cmp	r0, r3
     78c:	d301      	bcc.n	792 <__clzsi2+0x22>
     78e:	0900      	lsrs	r0, r0, #4
     790:	3904      	subs	r1, #4
     792:	a202      	add	r2, pc, #8	; (adr r2, 79c <__clzsi2+0x2c>)
     794:	5c10      	ldrb	r0, [r2, r0]
     796:	1840      	adds	r0, r0, r1
     798:	4770      	bx	lr
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	02020304 	.word	0x02020304
     7a0:	01010101 	.word	0x01010101
	...

000007ac <csc_meas_ccc_cfg_changed>:
static bool ctrl_point_configured;

static void csc_meas_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				     u16_t value)
{
	csc_simulate = value == BT_GATT_CCC_NOTIFY;
     7ac:	3901      	subs	r1, #1
     7ae:	424b      	negs	r3, r1
     7b0:	414b      	adcs	r3, r1
     7b2:	4a01      	ldr	r2, [pc, #4]	; (7b8 <csc_meas_ccc_cfg_changed+0xc>)
     7b4:	7013      	strb	r3, [r2, #0]
}
     7b6:	4770      	bx	lr
     7b8:	2000080e 	.word	0x2000080e

000007bc <ctrl_point_ccc_cfg_changed>:

static void ctrl_point_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				       u16_t value)
{
	ctrl_point_configured = value == BT_GATT_CCC_INDICATE;
     7bc:	3902      	subs	r1, #2
     7be:	424b      	negs	r3, r1
     7c0:	414b      	adcs	r3, r1
     7c2:	4a01      	ldr	r2, [pc, #4]	; (7c8 <ctrl_point_ccc_cfg_changed+0xc>)
     7c4:	7013      	strb	r3, [r2, #0]
}
     7c6:	4770      	bx	lr
     7c8:	200007f8 	.word	0x200007f8

000007cc <disconnected>:
		printk("Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     7cc:	b510      	push	{r4, lr}
	printk("Disconnected (reason %u)\n", reason);
     7ce:	4802      	ldr	r0, [pc, #8]	; (7d8 <disconnected+0xc>)
     7d0:	f001 f8b2 	bl	1938 <printk>
}
     7d4:	bd10      	pop	{r4, pc}
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	0000ffcc 	.word	0x0000ffcc

000007dc <connected>:

	i++;
}

static void connected(struct bt_conn *conn, u8_t err)
{
     7dc:	b510      	push	{r4, lr}
	if (err) {
     7de:	2900      	cmp	r1, #0
     7e0:	d003      	beq.n	7ea <connected+0xe>
		printk("Connection failed (err %u)\n", err);
     7e2:	4804      	ldr	r0, [pc, #16]	; (7f4 <connected+0x18>)
     7e4:	f001 f8a8 	bl	1938 <printk>
     7e8:	e002      	b.n	7f0 <connected+0x14>
	} else {
		printk("Connected\n");
     7ea:	4803      	ldr	r0, [pc, #12]	; (7f8 <connected+0x1c>)
     7ec:	f001 f8a4 	bl	1938 <printk>
	}
}
     7f0:	bd10      	pop	{r4, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	0000ffe6 	.word	0x0000ffe6
     7f8:	00010002 	.word	0x00010002

000007fc <read_csc_feature>:
}

static ssize_t read_csc_feature(struct bt_conn *conn,
				const struct bt_gatt_attr *attr, void *buf,
				u16_t len, u16_t offset)
{
     7fc:	b570      	push	{r4, r5, r6, lr}
     7fe:	b086      	sub	sp, #24
     800:	ac0a      	add	r4, sp, #40	; 0x28
     802:	8825      	ldrh	r5, [r4, #0]
	u16_t csc_feature = CSC_FEATURE;
     804:	2416      	movs	r4, #22
     806:	2607      	movs	r6, #7
     808:	446c      	add	r4, sp
     80a:	8026      	strh	r6, [r4, #0]

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
     80c:	3e05      	subs	r6, #5
     80e:	9602      	str	r6, [sp, #8]
     810:	9401      	str	r4, [sp, #4]
     812:	9500      	str	r5, [sp, #0]
     814:	f004 fc0a 	bl	502c <bt_gatt_attr_read>
				 &csc_feature, sizeof(csc_feature));
}
     818:	b006      	add	sp, #24
     81a:	bd70      	pop	{r4, r5, r6, pc}

0000081c <read_location>:
}

static ssize_t read_location(struct bt_conn *conn,
			     const struct bt_gatt_attr *attr, void *buf,
			     u16_t len, u16_t offset)
{
     81c:	b530      	push	{r4, r5, lr}
	u8_t *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     81e:	2501      	movs	r5, #1
}

static ssize_t read_location(struct bt_conn *conn,
			     const struct bt_gatt_attr *attr, void *buf,
			     u16_t len, u16_t offset)
{
     820:	b085      	sub	sp, #20
     822:	ac08      	add	r4, sp, #32
     824:	8824      	ldrh	r4, [r4, #0]
	u8_t *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     826:	9502      	str	r5, [sp, #8]
     828:	68cd      	ldr	r5, [r1, #12]
     82a:	9400      	str	r4, [sp, #0]
     82c:	9501      	str	r5, [sp, #4]
     82e:	f004 fbfd 	bl	502c <bt_gatt_attr_read>
				 sizeof(*value));
}
     832:	b005      	add	sp, #20
     834:	bd30      	pop	{r4, r5, pc}
	...

00000838 <bt_ready>:
static const struct bt_data sd[] = {
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};

static void bt_ready(int err)
{
     838:	b530      	push	{r4, r5, lr}
     83a:	0005      	movs	r5, r0
     83c:	b087      	sub	sp, #28
	if (err) {
     83e:	2800      	cmp	r0, #0
     840:	d002      	beq.n	848 <bt_ready+0x10>
		printk("Bluetooth init failed (err %d)\n", err);
     842:	0001      	movs	r1, r0
     844:	4815      	ldr	r0, [pc, #84]	; (89c <bt_ready+0x64>)
     846:	e021      	b.n	88c <bt_ready+0x54>
		return;
	}

	printk("Bluetooth initialized\n");
     848:	4815      	ldr	r0, [pc, #84]	; (8a0 <bt_ready+0x68>)
     84a:	f001 f875 	bl	1938 <printk>

	bas_init();
     84e:	f000 f9cd 	bl	bec <bas_init>
	dis_init(CONFIG_SOC, "ACME");
     852:	4914      	ldr	r1, [pc, #80]	; (8a4 <bt_ready+0x6c>)
     854:	4814      	ldr	r0, [pc, #80]	; (8a8 <bt_ready+0x70>)
     856:	f000 f9a3 	bl	ba0 <dis_init>
	bt_gatt_service_register(&csc_svc);

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     85a:	ac03      	add	r4, sp, #12

	printk("Bluetooth initialized\n");

	bas_init();
	dis_init(CONFIG_SOC, "ACME");
	bt_gatt_service_register(&csc_svc);
     85c:	4813      	ldr	r0, [pc, #76]	; (8ac <bt_ready+0x74>)
     85e:	f004 fceb 	bl	5238 <bt_gatt_service_register>

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     862:	220c      	movs	r2, #12
     864:	0029      	movs	r1, r5
     866:	0020      	movs	r0, r4
     868:	f000 fa3f 	bl	cea <memset>
     86c:	22a0      	movs	r2, #160	; 0xa0
     86e:	2301      	movs	r3, #1
     870:	8062      	strh	r2, [r4, #2]
     872:	3250      	adds	r2, #80	; 0x50
     874:	7023      	strb	r3, [r4, #0]
     876:	80a2      	strh	r2, [r4, #4]
     878:	490d      	ldr	r1, [pc, #52]	; (8b0 <bt_ready+0x78>)
     87a:	9300      	str	r3, [sp, #0]
     87c:	3aee      	subs	r2, #238	; 0xee
     87e:	4b0d      	ldr	r3, [pc, #52]	; (8b4 <bt_ready+0x7c>)
     880:	0020      	movs	r0, r4
     882:	f002 fad9 	bl	2e38 <bt_le_adv_start>
     886:	1e01      	subs	r1, r0, #0
			      sd, ARRAY_SIZE(sd));
	if (err) {
     888:	d003      	beq.n	892 <bt_ready+0x5a>
		printk("Advertising failed to start (err %d)\n", err);
     88a:	480b      	ldr	r0, [pc, #44]	; (8b8 <bt_ready+0x80>)
     88c:	f001 f854 	bl	1938 <printk>
     890:	e002      	b.n	898 <bt_ready+0x60>
		return;
	}

	printk("Advertising successfully started\n");
     892:	480a      	ldr	r0, [pc, #40]	; (8bc <bt_ready+0x84>)
     894:	f001 f850 	bl	1938 <printk>
}
     898:	b007      	add	sp, #28
     89a:	bd30      	pop	{r4, r5, pc}
     89c:	0001000d 	.word	0x0001000d
     8a0:	0001002d 	.word	0x0001002d
     8a4:	00010044 	.word	0x00010044
     8a8:	00010049 	.word	0x00010049
     8ac:	20000070 	.word	0x20000070
     8b0:	0000ffbc 	.word	0x0000ffbc
     8b4:	000100b0 	.word	0x000100b0
     8b8:	00010057 	.word	0x00010057
     8bc:	0001007d 	.word	0x0001007d

000008c0 <write_ctrl_point>:

static ssize_t write_ctrl_point(struct bt_conn *conn,
				const struct bt_gatt_attr *attr,
				const void *buf, u16_t len, u16_t offset,
				u8_t flags)
{
     8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     8c2:	001c      	movs	r4, r3
	const struct write_sc_ctrl_point_req *req = buf;
	u8_t status;
	int i;

	if (!ctrl_point_configured) {
     8c4:	4b2d      	ldr	r3, [pc, #180]	; (97c <write_ctrl_point+0xbc>)

static ssize_t write_ctrl_point(struct bt_conn *conn,
				const struct bt_gatt_attr *attr,
				const void *buf, u16_t len, u16_t offset,
				u8_t flags)
{
     8c6:	0005      	movs	r5, r0
	const struct write_sc_ctrl_point_req *req = buf;
	u8_t status;
	int i;

	if (!ctrl_point_configured) {
     8c8:	781b      	ldrb	r3, [r3, #0]
     8ca:	2b00      	cmp	r3, #0
     8cc:	d051      	beq.n	972 <write_ctrl_point+0xb2>
		return BT_GATT_ERR(CSC_ERR_CCC_CONFIG);
	}

	if (!len) {
     8ce:	2c00      	cmp	r4, #0
     8d0:	d051      	beq.n	976 <write_ctrl_point+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	switch (req->op) {
     8d2:	7811      	ldrb	r1, [r2, #0]
     8d4:	2903      	cmp	r1, #3
     8d6:	d016      	beq.n	906 <write_ctrl_point+0x46>
     8d8:	2904      	cmp	r1, #4
     8da:	d02b      	beq.n	934 <write_ctrl_point+0x74>
			       &supported_locations,
			       sizeof(supported_locations));

		return len;
	default:
		status = SC_CP_RSP_OP_NOT_SUPP;
     8dc:	2302      	movs	r3, #2

	if (!len) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	switch (req->op) {
     8de:	2901      	cmp	r1, #1
     8e0:	d139      	bne.n	956 <write_ctrl_point+0x96>
	case SC_CP_OP_SET_CWR:
		if (len != sizeof(req->op) + sizeof(req->cwr)) {
			status = SC_CP_RSP_INVAL_PARAM;
     8e2:	2303      	movs	r3, #3
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	switch (req->op) {
	case SC_CP_OP_SET_CWR:
		if (len != sizeof(req->op) + sizeof(req->cwr)) {
     8e4:	2c05      	cmp	r4, #5
     8e6:	d136      	bne.n	956 <write_ctrl_point+0x96>
			status = SC_CP_RSP_INVAL_PARAM;
			break;
		}

		cwr = sys_le32_to_cpu(req->cwr);
     8e8:	7890      	ldrb	r0, [r2, #2]
     8ea:	7857      	ldrb	r7, [r2, #1]
     8ec:	78d3      	ldrb	r3, [r2, #3]
     8ee:	0200      	lsls	r0, r0, #8
     8f0:	4338      	orrs	r0, r7
     8f2:	041b      	lsls	r3, r3, #16
     8f4:	4303      	orrs	r3, r0
     8f6:	0018      	movs	r0, r3
     8f8:	7913      	ldrb	r3, [r2, #4]
     8fa:	4a21      	ldr	r2, [pc, #132]	; (980 <write_ctrl_point+0xc0>)
     8fc:	061b      	lsls	r3, r3, #24
     8fe:	4303      	orrs	r3, r0
     900:	6013      	str	r3, [r2, #0]
		status = SC_CP_RSP_SUCCESS;
     902:	000b      	movs	r3, r1
		break;
     904:	e027      	b.n	956 <write_ctrl_point+0x96>
	}

	switch (req->op) {
	case SC_CP_OP_SET_CWR:
		if (len != sizeof(req->op) + sizeof(req->cwr)) {
			status = SC_CP_RSP_INVAL_PARAM;
     906:	000b      	movs	r3, r1

		cwr = sys_le32_to_cpu(req->cwr);
		status = SC_CP_RSP_SUCCESS;
		break;
	case SC_CP_OP_UPDATE_LOC:
		if (len != sizeof(req->op) + sizeof(req->location)) {
     908:	2c02      	cmp	r4, #2
     90a:	d124      	bne.n	956 <write_ctrl_point+0x96>
			status = SC_CP_RSP_INVAL_PARAM;
			break;
		}

		/* Break if the requested location is the same as current one */
		if (req->location == sensor_location) {
     90c:	4b1d      	ldr	r3, [pc, #116]	; (984 <write_ctrl_point+0xc4>)
     90e:	7850      	ldrb	r0, [r2, #1]
     910:	781e      	ldrb	r6, [r3, #0]
     912:	001a      	movs	r2, r3
			status = SC_CP_RSP_SUCCESS;
     914:	2301      	movs	r3, #1
			status = SC_CP_RSP_INVAL_PARAM;
			break;
		}

		/* Break if the requested location is the same as current one */
		if (req->location == sensor_location) {
     916:	4286      	cmp	r6, r0
     918:	d01d      	beq.n	956 <write_ctrl_point+0x96>
     91a:	2300      	movs	r3, #0
		/* Pre-set status */
		status = SC_CP_RSP_INVAL_PARAM;

		/* Check if requested location is supported */
		for (i = 0; i < ARRAY_SIZE(supported_locations); i++) {
			if (supported_locations[i] == req->location) {
     91c:	4e1a      	ldr	r6, [pc, #104]	; (988 <write_ctrl_point+0xc8>)
     91e:	5d9f      	ldrb	r7, [r3, r6]
     920:	4287      	cmp	r7, r0
     922:	d102      	bne.n	92a <write_ctrl_point+0x6a>
				sensor_location = req->location;
     924:	7010      	strb	r0, [r2, #0]
				status = SC_CP_RSP_SUCCESS;
     926:	2301      	movs	r3, #1
				break;
     928:	e015      	b.n	956 <write_ctrl_point+0x96>

		/* Pre-set status */
		status = SC_CP_RSP_INVAL_PARAM;

		/* Check if requested location is supported */
		for (i = 0; i < ARRAY_SIZE(supported_locations); i++) {
     92a:	3301      	adds	r3, #1
     92c:	2b05      	cmp	r3, #5
     92e:	d1f6      	bne.n	91e <write_ctrl_point+0x5e>
	}

	switch (req->op) {
	case SC_CP_OP_SET_CWR:
		if (len != sizeof(req->op) + sizeof(req->cwr)) {
			status = SC_CP_RSP_INVAL_PARAM;
     930:	3b02      	subs	r3, #2
     932:	e010      	b.n	956 <write_ctrl_point+0x96>
     934:	2303      	movs	r3, #3
			}
		}

		break;
	case SC_CP_OP_REQ_SUPP_LOC:
		if (len != sizeof(req->op)) {
     936:	2c01      	cmp	r4, #1
     938:	d10d      	bne.n	956 <write_ctrl_point+0x96>
{
	struct sc_ctrl_point_ind *ind;
	u8_t buf[sizeof(*ind) + data_len];

	ind = (void *) buf;
	ind->op = SC_CP_OP_RESPONSE;
     93a:	466a      	mov	r2, sp
     93c:	330d      	adds	r3, #13
     93e:	7013      	strb	r3, [r2, #0]
	ind->req_op = req_op;
     940:	466b      	mov	r3, sp
     942:	7051      	strb	r1, [r2, #1]
	ind->status = status;
     944:	7094      	strb	r4, [r2, #2]

	/* Send data (supported locations) if present */
	if (data && data_len) {
		memcpy(ind->data, data, data_len);
     946:	1cd8      	adds	r0, r3, #3
     948:	2205      	movs	r2, #5
     94a:	490f      	ldr	r1, [pc, #60]	; (988 <write_ctrl_point+0xc8>)
     94c:	f000 f9a3 	bl	c96 <memcpy>
	}

	bt_gatt_notify(conn, &csc_attrs[9], buf, sizeof(buf));
     950:	2308      	movs	r3, #8
     952:	466a      	mov	r2, sp
     954:	e006      	b.n	964 <write_ctrl_point+0xa4>
{
	struct sc_ctrl_point_ind *ind;
	u8_t buf[sizeof(*ind) + data_len];

	ind = (void *) buf;
	ind->op = SC_CP_OP_RESPONSE;
     956:	4668      	mov	r0, sp
     958:	2210      	movs	r2, #16
	ind->req_op = req_op;
	ind->status = status;
     95a:	7083      	strb	r3, [r0, #2]
{
	struct sc_ctrl_point_ind *ind;
	u8_t buf[sizeof(*ind) + data_len];

	ind = (void *) buf;
	ind->op = SC_CP_OP_RESPONSE;
     95c:	7002      	strb	r2, [r0, #0]
	/* Send data (supported locations) if present */
	if (data && data_len) {
		memcpy(ind->data, data, data_len);
	}

	bt_gatt_notify(conn, &csc_attrs[9], buf, sizeof(buf));
     95e:	2303      	movs	r3, #3
	struct sc_ctrl_point_ind *ind;
	u8_t buf[sizeof(*ind) + data_len];

	ind = (void *) buf;
	ind->op = SC_CP_OP_RESPONSE;
	ind->req_op = req_op;
     960:	466a      	mov	r2, sp
     962:	7041      	strb	r1, [r0, #1]
	/* Send data (supported locations) if present */
	if (data && data_len) {
		memcpy(ind->data, data, data_len);
	}

	bt_gatt_notify(conn, &csc_attrs[9], buf, sizeof(buf));
     964:	4909      	ldr	r1, [pc, #36]	; (98c <write_ctrl_point+0xcc>)
     966:	0028      	movs	r0, r5
     968:	31b4      	adds	r1, #180	; 0xb4
     96a:	f004 fcdf 	bl	532c <bt_gatt_notify>
		status = SC_CP_RSP_OP_NOT_SUPP;
	}

	ctrl_point_ind(conn, req->op, status, NULL, 0);

	return len;
     96e:	0020      	movs	r0, r4
     970:	e003      	b.n	97a <write_ctrl_point+0xba>
	const struct write_sc_ctrl_point_req *req = buf;
	u8_t status;
	int i;

	if (!ctrl_point_configured) {
		return BT_GATT_ERR(CSC_ERR_CCC_CONFIG);
     972:	2081      	movs	r0, #129	; 0x81
     974:	e000      	b.n	978 <write_ctrl_point+0xb8>
	}

	if (!len) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
     976:	200d      	movs	r0, #13
     978:	4240      	negs	r0, r0
	}

	ctrl_point_ind(conn, req->op, status, NULL, 0);

	return len;
}
     97a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     97c:	200007f8 	.word	0x200007f8
     980:	20000810 	.word	0x20000810
     984:	200007f9 	.word	0x200007f9
     988:	200001b4 	.word	0x200001b4
     98c:	20000090 	.word	0x20000090

00000990 <main>:

	printk("Advertising successfully started\n");
}

void main(void)
{
     990:	b5f0      	push	{r4, r5, r6, r7, lr}
     992:	b085      	sub	sp, #20
     994:	af00      	add	r7, sp, #0
	int err;

	err = bt_enable(bt_ready);
     996:	485b      	ldr	r0, [pc, #364]	; (b04 <main+0x174>)
     998:	f002 f9fa 	bl	2d90 <bt_enable>
     99c:	1e01      	subs	r1, r0, #0
	if (err) {
     99e:	d005      	beq.n	9ac <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
     9a0:	4859      	ldr	r0, [pc, #356]	; (b08 <main+0x178>)
     9a2:	f000 ffc9 	bl	1938 <printk>
		}

		/* Battery level simulation */
		bas_notify();
	}
}
     9a6:	46bd      	mov	sp, r7
     9a8:	b005      	add	sp, #20
     9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (err) {
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	bt_conn_cb_register(&conn_callbacks);
     9ac:	4857      	ldr	r0, [pc, #348]	; (b0c <main+0x17c>)
     9ae:	f002 fb95 	bl	30dc <bt_conn_cb_register>

	while (1) {
		k_sleep(MSEC_PER_SEC);
     9b2:	20fa      	movs	r0, #250	; 0xfa
     9b4:	0080      	lsls	r0, r0, #2
     9b6:	f00e fe83 	bl	f6c0 <k_sleep>

		/* CSC simulation */
		if (csc_simulate) {
     9ba:	4b55      	ldr	r3, [pc, #340]	; (b10 <main+0x180>)
     9bc:	781b      	ldrb	r3, [r3, #0]
     9be:	2b00      	cmp	r3, #0
     9c0:	d072      	beq.n	aa8 <main+0x118>
static u16_t lcet; /* Last Crank Event Time */

static void csc_simulation(void)
{
	static u8_t i;
	u32_t rand = sys_rand32_get();
     9c2:	f000 f9e1 	bl	d88 <sys_rand32_get>
	bool nfy_crank = false, nfy_wheel = false;

	/* Measurements don't have to be updated every second */
	if (!(i % 2)) {
     9c6:	4b53      	ldr	r3, [pc, #332]	; (b14 <main+0x184>)
static u16_t lcet; /* Last Crank Event Time */

static void csc_simulation(void)
{
	static u8_t i;
	u32_t rand = sys_rand32_get();
     9c8:	0005      	movs	r5, r0
	bool nfy_crank = false, nfy_wheel = false;

	/* Measurements don't have to be updated every second */
	if (!(i % 2)) {
     9ca:	781e      	ldrb	r6, [r3, #0]
     9cc:	2301      	movs	r3, #1

static void csc_simulation(void)
{
	static u8_t i;
	u32_t rand = sys_rand32_get();
	bool nfy_crank = false, nfy_wheel = false;
     9ce:	2400      	movs	r4, #0

	/* Measurements don't have to be updated every second */
	if (!(i % 2)) {
     9d0:	421e      	tst	r6, r3
     9d2:	d10e      	bne.n	9f2 <main+0x62>
		lwet += 1050 + rand % 50;
     9d4:	4b50      	ldr	r3, [pc, #320]	; (b18 <main+0x188>)
     9d6:	2132      	movs	r1, #50	; 0x32
     9d8:	881c      	ldrh	r4, [r3, #0]
     9da:	4b50      	ldr	r3, [pc, #320]	; (b1c <main+0x18c>)
     9dc:	18e4      	adds	r4, r4, r3
     9de:	f7ff fc7b 	bl	2d8 <__aeabi_uidivmod>
     9e2:	4b4d      	ldr	r3, [pc, #308]	; (b18 <main+0x188>)
     9e4:	1864      	adds	r4, r4, r1
     9e6:	801c      	strh	r4, [r3, #0]
		cwr += 2;
		nfy_wheel = true;
     9e8:	2401      	movs	r4, #1
	bool nfy_crank = false, nfy_wheel = false;

	/* Measurements don't have to be updated every second */
	if (!(i % 2)) {
		lwet += 1050 + rand % 50;
		cwr += 2;
     9ea:	4a4d      	ldr	r2, [pc, #308]	; (b20 <main+0x190>)
     9ec:	6813      	ldr	r3, [r2, #0]
     9ee:	3302      	adds	r3, #2
     9f0:	6013      	str	r3, [r2, #0]
		nfy_wheel = true;
	}

	if (!(i % 3)) {
     9f2:	2103      	movs	r1, #3
     9f4:	0030      	movs	r0, r6
     9f6:	f7ff fc6f 	bl	2d8 <__aeabi_uidivmod>
     9fa:	b2c9      	uxtb	r1, r1
     9fc:	2900      	cmp	r1, #0
     9fe:	d15b      	bne.n	ab8 <main+0x128>
		lcet += 1000 + rand % 50;
     a00:	23fa      	movs	r3, #250	; 0xfa
     a02:	4e48      	ldr	r6, [pc, #288]	; (b24 <main+0x194>)
     a04:	009b      	lsls	r3, r3, #2
     a06:	8831      	ldrh	r1, [r6, #0]
     a08:	0028      	movs	r0, r5
     a0a:	18cb      	adds	r3, r1, r3
     a0c:	2132      	movs	r1, #50	; 0x32
     a0e:	607b      	str	r3, [r7, #4]
     a10:	f7ff fc62 	bl	2d8 <__aeabi_uidivmod>
     a14:	687b      	ldr	r3, [r7, #4]
     a16:	1859      	adds	r1, r3, r1
     a18:	8031      	strh	r1, [r6, #0]
		ccr += 1;
     a1a:	4943      	ldr	r1, [pc, #268]	; (b28 <main+0x198>)
     a1c:	880b      	ldrh	r3, [r1, #0]
     a1e:	3301      	adds	r3, #1
     a20:	800b      	strh	r3, [r1, #0]
	 * In typical applications, the CSC Measurement characteristic is
	 * notified approximately once per second. This interval may vary
	 * and is determined by the Server and not required to be configurable
	 * by the Client.
	 */
	measurement_nfy(NULL, nfy_wheel ? cwr : 0, nfy_wheel ? lwet : 0,
     a22:	2c00      	cmp	r4, #0
     a24:	d143      	bne.n	aae <main+0x11e>
     a26:	0023      	movs	r3, r4
     a28:	0022      	movs	r2, r4
     a2a:	880c      	ldrh	r4, [r1, #0]
     a2c:	8831      	ldrh	r1, [r6, #0]
     a2e:	6079      	str	r1, [r7, #4]
	u16_t lcet;
} __packed;

static void measurement_nfy(struct bt_conn *conn, u32_t cwr, u16_t lwet,
			    u16_t ccr, u16_t lcet)
{
     a30:	4669      	mov	r1, sp
     a32:	6039      	str	r1, [r7, #0]
	struct csc_measurement_nfy *nfy;
	u8_t buf[sizeof(*nfy) +
     a34:	2b00      	cmp	r3, #0
     a36:	d048      	beq.n	aca <main+0x13a>
     a38:	2607      	movs	r6, #7
		    (cwr ? sizeof(struct wheel_rev_data_nfy) : 0) +
		    (ccr ? sizeof(struct crank_rev_data_nfy) : 0)];
     a3a:	2c00      	cmp	r4, #0
     a3c:	d14b      	bne.n	ad6 <main+0x146>

static void measurement_nfy(struct bt_conn *conn, u32_t cwr, u16_t lwet,
			    u16_t ccr, u16_t lcet)
{
	struct csc_measurement_nfy *nfy;
	u8_t buf[sizeof(*nfy) +
     a3e:	4668      	mov	r0, sp
     a40:	1df1      	adds	r1, r6, #7
     a42:	08c9      	lsrs	r1, r1, #3
     a44:	00c9      	lsls	r1, r1, #3
     a46:	1a41      	subs	r1, r0, r1
     a48:	468d      	mov	sp, r1

	nfy = (void *) buf;
	nfy->flags = 0;

	/* Send Wheel Revolution data is present */
	if (cwr) {
     a4a:	2400      	movs	r4, #0

static void measurement_nfy(struct bt_conn *conn, u32_t cwr, u16_t lwet,
			    u16_t ccr, u16_t lcet)
{
	struct csc_measurement_nfy *nfy;
	u8_t buf[sizeof(*nfy) +
     a4c:	466d      	mov	r5, sp

	nfy = (void *) buf;
	nfy->flags = 0;

	/* Send Wheel Revolution data is present */
	if (cwr) {
     a4e:	42a3      	cmp	r3, r4
     a50:	d144      	bne.n	adc <main+0x14c>
		    (cwr ? sizeof(struct wheel_rev_data_nfy) : 0) +
		    (ccr ? sizeof(struct crank_rev_data_nfy) : 0)];
	u16_t len = 0;

	nfy = (void *) buf;
	nfy->flags = 0;
     a52:	2000      	movs	r0, #0
     a54:	7028      	strb	r0, [r5, #0]
		memcpy(nfy->data, &data, sizeof(data));
		len += sizeof(data);
	}

	/* Send Crank Revolution data is present */
	if (ccr) {
     a56:	2c00      	cmp	r4, #0
     a58:	d00d      	beq.n	a76 <main+0xe6>
		struct crank_rev_data_nfy data;

		nfy->flags |= CSC_CRANK_REV_DATA_PRESENT;
     a5a:	2202      	movs	r2, #2
     a5c:	782b      	ldrb	r3, [r5, #0]
		data.ccr = sys_cpu_to_le16(ccr);
     a5e:	813c      	strh	r4, [r7, #8]

	/* Send Crank Revolution data is present */
	if (ccr) {
		struct crank_rev_data_nfy data;

		nfy->flags |= CSC_CRANK_REV_DATA_PRESENT;
     a60:	4313      	orrs	r3, r2
     a62:	702b      	strb	r3, [r5, #0]
		data.ccr = sys_cpu_to_le16(ccr);
		data.lcet = sys_cpu_to_le16(lcet);
     a64:	88bb      	ldrh	r3, [r7, #4]

		memcpy(nfy->data + len, &data, sizeof(data));
     a66:	1892      	adds	r2, r2, r2
	if (ccr) {
		struct crank_rev_data_nfy data;

		nfy->flags |= CSC_CRANK_REV_DATA_PRESENT;
		data.ccr = sys_cpu_to_le16(ccr);
		data.lcet = sys_cpu_to_le16(lcet);
     a68:	817b      	strh	r3, [r7, #10]

		memcpy(nfy->data + len, &data, sizeof(data));
     a6a:	1c6b      	adds	r3, r5, #1
     a6c:	1818      	adds	r0, r3, r0
     a6e:	2308      	movs	r3, #8
     a70:	18f9      	adds	r1, r7, r3
     a72:	f000 f910 	bl	c96 <memcpy>
	}

	bt_gatt_notify(NULL, &csc_attrs[2], buf, sizeof(buf));
     a76:	492d      	ldr	r1, [pc, #180]	; (b2c <main+0x19c>)
     a78:	b2b3      	uxth	r3, r6
     a7a:	002a      	movs	r2, r5
     a7c:	3128      	adds	r1, #40	; 0x28
     a7e:	2000      	movs	r0, #0
     a80:	f004 fc54 	bl	532c <bt_gatt_notify>
     a84:	683b      	ldr	r3, [r7, #0]
     a86:	469d      	mov	sp, r3

	/*
	 * The Last Crank Event Time value and Last Wheel Event Time roll over
	 * every 64 seconds.
	 */
	if (!(i % 64)) {
     a88:	4b22      	ldr	r3, [pc, #136]	; (b14 <main+0x184>)
     a8a:	781a      	ldrb	r2, [r3, #0]
     a8c:	233f      	movs	r3, #63	; 0x3f
     a8e:	4013      	ands	r3, r2
     a90:	d105      	bne.n	a9e <main+0x10e>
		lcet = 0;
     a92:	4a24      	ldr	r2, [pc, #144]	; (b24 <main+0x194>)
     a94:	8013      	strh	r3, [r2, #0]
		lwet = 0;
     a96:	4a20      	ldr	r2, [pc, #128]	; (b18 <main+0x188>)
     a98:	8013      	strh	r3, [r2, #0]
		i = 0;
     a9a:	4a1e      	ldr	r2, [pc, #120]	; (b14 <main+0x184>)
     a9c:	7013      	strb	r3, [r2, #0]
	}

	i++;
     a9e:	4b1d      	ldr	r3, [pc, #116]	; (b14 <main+0x184>)
     aa0:	4a1c      	ldr	r2, [pc, #112]	; (b14 <main+0x184>)
     aa2:	781b      	ldrb	r3, [r3, #0]
     aa4:	3301      	adds	r3, #1
     aa6:	7013      	strb	r3, [r2, #0]
		if (csc_simulate) {
			csc_simulation();
		}

		/* Battery level simulation */
		bas_notify();
     aa8:	f000 f8a8 	bl	bfc <bas_notify>
	}
     aac:	e781      	b.n	9b2 <main+0x22>
	 * In typical applications, the CSC Measurement characteristic is
	 * notified approximately once per second. This interval may vary
	 * and is determined by the Server and not required to be configurable
	 * by the Client.
	 */
	measurement_nfy(NULL, nfy_wheel ? cwr : 0, nfy_wheel ? lwet : 0,
     aae:	4b1c      	ldr	r3, [pc, #112]	; (b20 <main+0x190>)
     ab0:	4a19      	ldr	r2, [pc, #100]	; (b18 <main+0x188>)
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	8812      	ldrh	r2, [r2, #0]
     ab6:	e7b8      	b.n	a2a <main+0x9a>
     ab8:	2c00      	cmp	r4, #0
     aba:	d01b      	beq.n	af4 <main+0x164>
     abc:	2400      	movs	r4, #0
     abe:	4b18      	ldr	r3, [pc, #96]	; (b20 <main+0x190>)
     ac0:	4a15      	ldr	r2, [pc, #84]	; (b18 <main+0x188>)
     ac2:	681b      	ldr	r3, [r3, #0]
     ac4:	8812      	ldrh	r2, [r2, #0]
     ac6:	607c      	str	r4, [r7, #4]
     ac8:	e7b2      	b.n	a30 <main+0xa0>
			    u16_t ccr, u16_t lcet)
{
	struct csc_measurement_nfy *nfy;
	u8_t buf[sizeof(*nfy) +
		    (cwr ? sizeof(struct wheel_rev_data_nfy) : 0) +
		    (ccr ? sizeof(struct crank_rev_data_nfy) : 0)];
     aca:	2c00      	cmp	r4, #0
     acc:	d017      	beq.n	afe <main+0x16e>

static void measurement_nfy(struct bt_conn *conn, u32_t cwr, u16_t lwet,
			    u16_t ccr, u16_t lcet)
{
	struct csc_measurement_nfy *nfy;
	u8_t buf[sizeof(*nfy) +
     ace:	b082      	sub	sp, #8
     ad0:	466d      	mov	r5, sp
		    (cwr ? sizeof(struct wheel_rev_data_nfy) : 0) +
     ad2:	2605      	movs	r6, #5
     ad4:	e7bd      	b.n	a52 <main+0xc2>

static void measurement_nfy(struct bt_conn *conn, u32_t cwr, u16_t lwet,
			    u16_t ccr, u16_t lcet)
{
	struct csc_measurement_nfy *nfy;
	u8_t buf[sizeof(*nfy) +
     ad6:	b084      	sub	sp, #16
     ad8:	466d      	mov	r5, sp
		    (cwr ? sizeof(struct wheel_rev_data_nfy) : 0) +
     ada:	260b      	movs	r6, #11

	/* Send Wheel Revolution data is present */
	if (cwr) {
		struct wheel_rev_data_nfy data;

		nfy->flags |= CSC_WHEEL_REV_DATA_PRESENT;
     adc:	2101      	movs	r1, #1
		data.cwr = sys_cpu_to_le32(cwr);
     ade:	60bb      	str	r3, [r7, #8]
		data.lwet = sys_cpu_to_le16(lwet);

		memcpy(nfy->data, &data, sizeof(data));
     ae0:	2308      	movs	r3, #8

	/* Send Wheel Revolution data is present */
	if (cwr) {
		struct wheel_rev_data_nfy data;

		nfy->flags |= CSC_WHEEL_REV_DATA_PRESENT;
     ae2:	7029      	strb	r1, [r5, #0]
		data.cwr = sys_cpu_to_le32(cwr);
		data.lwet = sys_cpu_to_le16(lwet);
     ae4:	81ba      	strh	r2, [r7, #12]

		memcpy(nfy->data, &data, sizeof(data));
     ae6:	1c68      	adds	r0, r5, #1
     ae8:	2206      	movs	r2, #6
     aea:	18f9      	adds	r1, r7, r3
     aec:	f000 f8d3 	bl	c96 <memcpy>
		len += sizeof(data);
     af0:	2006      	movs	r0, #6
     af2:	e7b0      	b.n	a56 <main+0xc6>
	u16_t lcet;
} __packed;

static void measurement_nfy(struct bt_conn *conn, u32_t cwr, u16_t lwet,
			    u16_t ccr, u16_t lcet)
{
     af4:	466b      	mov	r3, sp
	 * In typical applications, the CSC Measurement characteristic is
	 * notified approximately once per second. This interval may vary
	 * and is determined by the Server and not required to be configurable
	 * by the Client.
	 */
	measurement_nfy(NULL, nfy_wheel ? cwr : 0, nfy_wheel ? lwet : 0,
     af6:	0022      	movs	r2, r4
	u16_t lcet;
} __packed;

static void measurement_nfy(struct bt_conn *conn, u32_t cwr, u16_t lwet,
			    u16_t ccr, u16_t lcet)
{
     af8:	603b      	str	r3, [r7, #0]
	 * In typical applications, the CSC Measurement characteristic is
	 * notified approximately once per second. This interval may vary
	 * and is determined by the Server and not required to be configurable
	 * by the Client.
	 */
	measurement_nfy(NULL, nfy_wheel ? cwr : 0, nfy_wheel ? lwet : 0,
     afa:	0023      	movs	r3, r4
     afc:	607c      	str	r4, [r7, #4]

static void measurement_nfy(struct bt_conn *conn, u32_t cwr, u16_t lwet,
			    u16_t ccr, u16_t lcet)
{
	struct csc_measurement_nfy *nfy;
	u8_t buf[sizeof(*nfy) +
     afe:	2601      	movs	r6, #1
     b00:	e79d      	b.n	a3e <main+0xae>
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	00000839 	.word	0x00000839
     b08:	0001000d 	.word	0x0001000d
     b0c:	20000054 	.word	0x20000054
     b10:	2000080e 	.word	0x2000080e
     b14:	20000818 	.word	0x20000818
     b18:	20000816 	.word	0x20000816
     b1c:	0000041a 	.word	0x0000041a
     b20:	20000810 	.word	0x20000810
     b24:	2000081a 	.word	0x2000081a
     b28:	20000814 	.word	0x20000814
     b2c:	20000090 	.word	0x20000090

00000b30 <read_manuf>:
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b30:	b5f0      	push	{r4, r5, r6, r7, lr}
     b32:	b087      	sub	sp, #28
     b34:	001e      	movs	r6, r3
     b36:	ab0c      	add	r3, sp, #48	; 0x30
     b38:	881f      	ldrh	r7, [r3, #0]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     b3a:	4b0a      	ldr	r3, [pc, #40]	; (b64 <read_manuf+0x34>)
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b3c:	0005      	movs	r5, r0
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     b3e:	681c      	ldr	r4, [r3, #0]
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b40:	9104      	str	r1, [sp, #16]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     b42:	0020      	movs	r0, r4
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b44:	9205      	str	r2, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     b46:	f000 f87c 	bl	c42 <strlen>

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
     b4a:	b280      	uxth	r0, r0
     b4c:	9002      	str	r0, [sp, #8]
     b4e:	9401      	str	r4, [sp, #4]
     b50:	9700      	str	r7, [sp, #0]
     b52:	0033      	movs	r3, r6
     b54:	9a05      	ldr	r2, [sp, #20]
     b56:	9904      	ldr	r1, [sp, #16]
     b58:	0028      	movs	r0, r5
     b5a:	f004 fa67 	bl	502c <bt_gatt_attr_read>
				 strlen(dis_manuf));
}
     b5e:	b007      	add	sp, #28
     b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	2000081c 	.word	0x2000081c

00000b68 <read_model>:
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b68:	b5f0      	push	{r4, r5, r6, r7, lr}
     b6a:	b087      	sub	sp, #28
     b6c:	001e      	movs	r6, r3
     b6e:	ab0c      	add	r3, sp, #48	; 0x30
     b70:	881f      	ldrh	r7, [r3, #0]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     b72:	4b0a      	ldr	r3, [pc, #40]	; (b9c <read_model+0x34>)
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b74:	0005      	movs	r5, r0
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     b76:	681c      	ldr	r4, [r3, #0]
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b78:	9104      	str	r1, [sp, #16]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     b7a:	0020      	movs	r0, r4
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     b7c:	9205      	str	r2, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     b7e:	f000 f860 	bl	c42 <strlen>

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
     b82:	b280      	uxth	r0, r0
     b84:	9002      	str	r0, [sp, #8]
     b86:	9401      	str	r4, [sp, #4]
     b88:	9700      	str	r7, [sp, #0]
     b8a:	0033      	movs	r3, r6
     b8c:	9a05      	ldr	r2, [sp, #20]
     b8e:	9904      	ldr	r1, [sp, #16]
     b90:	0028      	movs	r0, r5
     b92:	f004 fa4b 	bl	502c <bt_gatt_attr_read>
				 strlen(dis_model));
}
     b96:	b007      	add	sp, #28
     b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	20000820 	.word	0x20000820

00000ba0 <dis_init>:
};

static struct bt_gatt_service dis_svc = BT_GATT_SERVICE(attrs);

void dis_init(const char *model, const char *manuf)
{
     ba0:	b510      	push	{r4, lr}
	dis_model = model;
     ba2:	4b04      	ldr	r3, [pc, #16]	; (bb4 <dis_init+0x14>)
     ba4:	6018      	str	r0, [r3, #0]
	dis_manuf = manuf;
     ba6:	4b04      	ldr	r3, [pc, #16]	; (bb8 <dis_init+0x18>)

	bt_gatt_service_register(&dis_svc);
     ba8:	4804      	ldr	r0, [pc, #16]	; (bbc <dis_init+0x1c>)
static struct bt_gatt_service dis_svc = BT_GATT_SERVICE(attrs);

void dis_init(const char *model, const char *manuf)
{
	dis_model = model;
	dis_manuf = manuf;
     baa:	6019      	str	r1, [r3, #0]

	bt_gatt_service_register(&dis_svc);
     bac:	f004 fb44 	bl	5238 <bt_gatt_service_register>
}
     bb0:	bd10      	pop	{r4, pc}
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	20000820 	.word	0x20000820
     bb8:	2000081c 	.word	0x2000081c
     bbc:	200001ec 	.word	0x200001ec

00000bc0 <blvl_ccc_cfg_changed>:
static u8_t battery = 100;

static void blvl_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 u16_t value)
{
	simulate_blvl = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
     bc0:	3901      	subs	r1, #1
     bc2:	424b      	negs	r3, r1
     bc4:	414b      	adcs	r3, r1
     bc6:	4a01      	ldr	r2, [pc, #4]	; (bcc <blvl_ccc_cfg_changed+0xc>)
     bc8:	7013      	strb	r3, [r2, #0]
}
     bca:	4770      	bx	lr
     bcc:	2000082e 	.word	0x2000082e

00000bd0 <read_blvl>:

static ssize_t read_blvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     bd0:	b530      	push	{r4, r5, lr}
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     bd2:	2501      	movs	r5, #1
	simulate_blvl = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
}

static ssize_t read_blvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     bd4:	b085      	sub	sp, #20
     bd6:	ac08      	add	r4, sp, #32
     bd8:	8824      	ldrh	r4, [r4, #0]
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     bda:	9502      	str	r5, [sp, #8]
     bdc:	68cd      	ldr	r5, [r1, #12]
     bde:	9400      	str	r4, [sp, #0]
     be0:	9501      	str	r5, [sp, #4]
     be2:	f004 fa23 	bl	502c <bt_gatt_attr_read>
				 sizeof(*value));
}
     be6:	b005      	add	sp, #20
     be8:	bd30      	pop	{r4, r5, pc}
	...

00000bec <bas_init>:
};

static struct bt_gatt_service bas_svc = BT_GATT_SERVICE(attrs);

void bas_init(void)
{
     bec:	b510      	push	{r4, lr}
	bt_gatt_service_register(&bas_svc);
     bee:	4802      	ldr	r0, [pc, #8]	; (bf8 <bas_init+0xc>)
     bf0:	f004 fb22 	bl	5238 <bt_gatt_service_register>
}
     bf4:	bd10      	pop	{r4, pc}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	200002b0 	.word	0x200002b0

00000bfc <bas_notify>:

void bas_notify(void)
{
     bfc:	b510      	push	{r4, lr}
	if (!simulate_blvl) {
     bfe:	4b09      	ldr	r3, [pc, #36]	; (c24 <bas_notify+0x28>)
     c00:	781b      	ldrb	r3, [r3, #0]
     c02:	2b00      	cmp	r3, #0
     c04:	d00d      	beq.n	c22 <bas_notify+0x26>
		return;
	}

	battery--;
     c06:	4a08      	ldr	r2, [pc, #32]	; (c28 <bas_notify+0x2c>)
     c08:	7813      	ldrb	r3, [r2, #0]
     c0a:	3b01      	subs	r3, #1
     c0c:	b2db      	uxtb	r3, r3
	if (!battery) {
     c0e:	2b00      	cmp	r3, #0
     c10:	d100      	bne.n	c14 <bas_notify+0x18>
		/* Software eco battery charger */
		battery = 100;
     c12:	2364      	movs	r3, #100	; 0x64
	}

	bt_gatt_notify(NULL, &attrs[2], &battery, sizeof(battery));
     c14:	4905      	ldr	r1, [pc, #20]	; (c2c <bas_notify+0x30>)
	}

	battery--;
	if (!battery) {
		/* Software eco battery charger */
		battery = 100;
     c16:	7013      	strb	r3, [r2, #0]
	}

	bt_gatt_notify(NULL, &attrs[2], &battery, sizeof(battery));
     c18:	3128      	adds	r1, #40	; 0x28
     c1a:	2301      	movs	r3, #1
     c1c:	2000      	movs	r0, #0
     c1e:	f004 fb85 	bl	532c <bt_gatt_notify>
}
     c22:	bd10      	pop	{r4, pc}
     c24:	2000082e 	.word	0x2000082e
     c28:	200002ac 	.word	0x200002ac
     c2c:	2000025c 	.word	0x2000025c

00000c30 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
     c30:	0003      	movs	r3, r0
     c32:	780a      	ldrb	r2, [r1, #0]
		*d = *s;
     c34:	701a      	strb	r2, [r3, #0]

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
     c36:	2a00      	cmp	r2, #0
     c38:	d002      	beq.n	c40 <strcpy+0x10>
		*d = *s;
		d++;
     c3a:	3301      	adds	r3, #1
		s++;
     c3c:	3101      	adds	r1, #1
     c3e:	e7f8      	b.n	c32 <strcpy+0x2>
	}

	*d = '\0';

	return dest;
}
     c40:	4770      	bx	lr

00000c42 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
     c42:	0002      	movs	r2, r0
	size_t n = 0;

	while (*s != '\0') {
     c44:	0003      	movs	r3, r0
     c46:	7819      	ldrb	r1, [r3, #0]
     c48:	1a98      	subs	r0, r3, r2
     c4a:	2900      	cmp	r1, #0
     c4c:	d001      	beq.n	c52 <strlen+0x10>
		s++;
     c4e:	3301      	adds	r3, #1
     c50:	e7f9      	b.n	c46 <strlen+0x4>
		n++;
	}

	return n;
}
     c52:	4770      	bx	lr

00000c54 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
     c54:	7803      	ldrb	r3, [r0, #0]
     c56:	780a      	ldrb	r2, [r1, #0]
     c58:	4293      	cmp	r3, r2
     c5a:	d105      	bne.n	c68 <strcmp+0x14>
     c5c:	2b00      	cmp	r3, #0
     c5e:	d002      	beq.n	c66 <strcmp+0x12>
		s1++;
     c60:	3001      	adds	r0, #1
		s2++;
     c62:	3101      	adds	r1, #1
     c64:	e7f6      	b.n	c54 <strcmp>
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
     c66:	001a      	movs	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
     c68:	1a98      	subs	r0, r3, r2
}
     c6a:	4770      	bx	lr

00000c6c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     c6c:	0003      	movs	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
     c6e:	2000      	movs	r0, #0
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     c70:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     c72:	4282      	cmp	r2, r0
     c74:	d00e      	beq.n	c94 <memcmp+0x28>
     c76:	3a01      	subs	r2, #1
     c78:	189a      	adds	r2, r3, r2
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     c7a:	4293      	cmp	r3, r2
     c7c:	d103      	bne.n	c86 <memcmp+0x1a>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	7808      	ldrb	r0, [r1, #0]
     c82:	1a18      	subs	r0, r3, r0
     c84:	e006      	b.n	c94 <memcmp+0x28>
	const char *c2 = m2;

	if (!n)
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     c86:	781c      	ldrb	r4, [r3, #0]
     c88:	7808      	ldrb	r0, [r1, #0]
     c8a:	4284      	cmp	r4, r0
     c8c:	d1f7      	bne.n	c7e <memcmp+0x12>
		c1++;
     c8e:	3301      	adds	r3, #1
		c2++;
     c90:	3101      	adds	r1, #1
     c92:	e7f2      	b.n	c7a <memcmp+0xe>
	}

	return *c1 - *c2;
}
     c94:	bd10      	pop	{r4, pc}

00000c96 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
     c96:	b530      	push	{r4, r5, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     c98:	0004      	movs	r4, r0
     c9a:	2303      	movs	r3, #3
     c9c:	404c      	eors	r4, r1
     c9e:	421c      	tst	r4, r3
     ca0:	d002      	beq.n	ca8 <memcpy+0x12>

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
     ca2:	0004      	movs	r4, r0
     ca4:	2300      	movs	r3, #0
     ca6:	e019      	b.n	cdc <memcpy+0x46>
     ca8:	0004      	movs	r4, r0

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
     caa:	001d      	movs	r5, r3
     cac:	0023      	movs	r3, r4
     cae:	402b      	ands	r3, r5
     cb0:	d007      	beq.n	cc2 <memcpy+0x2c>
			if (n == 0) {
     cb2:	2a00      	cmp	r2, #0
     cb4:	d018      	beq.n	ce8 <memcpy+0x52>
				return d;
			}
			*(d_byte++) = *(s_byte++);
     cb6:	780b      	ldrb	r3, [r1, #0]
			n--;
     cb8:	3a01      	subs	r2, #1

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
				return d;
			}
			*(d_byte++) = *(s_byte++);
     cba:	7023      	strb	r3, [r4, #0]
     cbc:	3101      	adds	r1, #1
     cbe:	3401      	adds	r4, #1
     cc0:	e7f4      	b.n	cac <memcpy+0x16>
		/* do word-sized copying as long as possible */

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
     cc2:	1ad5      	subs	r5, r2, r3
     cc4:	2d03      	cmp	r5, #3
     cc6:	d903      	bls.n	cd0 <memcpy+0x3a>
			*(d_word++) = *(s_word++);
     cc8:	58cd      	ldr	r5, [r1, r3]
     cca:	50e5      	str	r5, [r4, r3]
     ccc:	3304      	adds	r3, #4
     cce:	e7f8      	b.n	cc2 <memcpy+0x2c>
     cd0:	0893      	lsrs	r3, r2, #2
     cd2:	009b      	lsls	r3, r3, #2
     cd4:	1ad2      	subs	r2, r2, r3
     cd6:	18e4      	adds	r4, r4, r3
     cd8:	18c9      	adds	r1, r1, r3
     cda:	e7e3      	b.n	ca4 <memcpy+0xe>
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     cdc:	429a      	cmp	r2, r3
     cde:	d003      	beq.n	ce8 <memcpy+0x52>
		*(d_byte++) = *(s_byte++);
     ce0:	5ccd      	ldrb	r5, [r1, r3]
     ce2:	54e5      	strb	r5, [r4, r3]
     ce4:	3301      	adds	r3, #1
     ce6:	e7f9      	b.n	cdc <memcpy+0x46>
		n--;
	}

	return d;
}
     ce8:	bd30      	pop	{r4, r5, pc}

00000cea <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     cea:	b5f0      	push	{r4, r5, r6, r7, lr}
     cec:	0003      	movs	r3, r0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
     cee:	2603      	movs	r6, #3
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     cf0:	b2cc      	uxtb	r4, r1
     cf2:	001d      	movs	r5, r3

	while (((unsigned int)d_byte) & 0x3) {
     cf4:	4233      	tst	r3, r6
     cf6:	d005      	beq.n	d04 <memset+0x1a>
		if (n == 0) {
     cf8:	2a00      	cmp	r2, #0
     cfa:	d01a      	beq.n	d32 <memset+0x48>
			return buf;
		}
		*(d_byte++) = c_byte;
     cfc:	701c      	strb	r4, [r3, #0]
		n--;
     cfe:	3a01      	subs	r2, #1
     d00:	3301      	adds	r3, #1
     d02:	e7f6      	b.n	cf2 <memset+0x8>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     d04:	27ff      	movs	r7, #255	; 0xff
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
     d06:	b2ce      	uxtb	r6, r1

	c_word |= c_word << 8;
     d08:	023f      	lsls	r7, r7, #8
     d0a:	0209      	lsls	r1, r1, #8
     d0c:	4039      	ands	r1, r7
     d0e:	4331      	orrs	r1, r6
	c_word |= c_word << 16;
     d10:	040e      	lsls	r6, r1, #16
     d12:	4331      	orrs	r1, r6

	while (n >= sizeof(unsigned int)) {
     d14:	0016      	movs	r6, r2
     d16:	2e03      	cmp	r6, #3
     d18:	d902      	bls.n	d20 <memset+0x36>
		*(d_word++) = c_word;
     d1a:	c302      	stmia	r3!, {r1}
		n -= sizeof(unsigned int);
     d1c:	3e04      	subs	r6, #4
     d1e:	e7fa      	b.n	d16 <memset+0x2c>
     d20:	0893      	lsrs	r3, r2, #2
     d22:	009b      	lsls	r3, r3, #2
     d24:	18eb      	adds	r3, r5, r3
     d26:	18aa      	adds	r2, r5, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     d28:	4293      	cmp	r3, r2
     d2a:	d002      	beq.n	d32 <memset+0x48>
		*(d_byte++) = c_byte;
     d2c:	701c      	strb	r4, [r3, #0]
     d2e:	3301      	adds	r3, #1
     d30:	e7fa      	b.n	d28 <memset+0x3e>
		n--;
	}

	return buf;
}
     d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d34 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
     d34:	b570      	push	{r4, r5, r6, lr}
     d36:	0004      	movs	r4, r0
     d38:	4d07      	ldr	r5, [pc, #28]	; (d58 <console_out+0x24>)
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     d3a:	280a      	cmp	r0, #10
     d3c:	d104      	bne.n	d48 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
     d3e:	6828      	ldr	r0, [r5, #0]
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
     d40:	210d      	movs	r1, #13
     d42:	6843      	ldr	r3, [r0, #4]
     d44:	685b      	ldr	r3, [r3, #4]
     d46:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
     d48:	6828      	ldr	r0, [r5, #0]
     d4a:	b2e1      	uxtb	r1, r4
     d4c:	6843      	ldr	r3, [r0, #4]
     d4e:	685b      	ldr	r3, [r3, #4]
     d50:	4798      	blx	r3

	return c;
}
     d52:	0020      	movs	r0, r4
     d54:	bd70      	pop	{r4, r5, r6, pc}
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	20000830 	.word	0x20000830

00000d5c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     d5c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
     d5e:	4802      	ldr	r0, [pc, #8]	; (d68 <uart_console_hook_install+0xc>)
     d60:	f000 fcb2 	bl	16c8 <__printk_hook_install>
}
     d64:	bd10      	pop	{r4, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	00000d35 	.word	0x00000d35

00000d6c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     d6c:	b510      	push	{r4, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     d6e:	4804      	ldr	r0, [pc, #16]	; (d80 <uart_console_init+0x14>)
     d70:	f00d fecc 	bl	eb0c <device_get_binding>
     d74:	4b03      	ldr	r3, [pc, #12]	; (d84 <uart_console_init+0x18>)
     d76:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     d78:	f7ff fff0 	bl	d5c <uart_console_hook_install>

	return 0;
}
     d7c:	2000      	movs	r0, #0
     d7e:	bd10      	pop	{r4, pc}
     d80:	000100b8 	.word	0x000100b8
     d84:	20000830 	.word	0x20000830

00000d88 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
     d88:	b510      	push	{r4, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
     d8a:	f000 f941 	bl	1010 <_timer_cycle_get_32>
     d8e:	4903      	ldr	r1, [pc, #12]	; (d9c <sys_rand32_get+0x14>)
     d90:	0004      	movs	r4, r0
     d92:	4803      	ldr	r0, [pc, #12]	; (da0 <sys_rand32_get+0x18>)
     d94:	f00d fe65 	bl	ea62 <atomic_add>
     d98:	1900      	adds	r0, r0, r4
}
     d9a:	bd10      	pop	{r4, pc}
     d9c:	3b9aca0d 	.word	0x3b9aca0d
     da0:	20000834 	.word	0x20000834

00000da4 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     da4:	6803      	ldr	r3, [r0, #0]
     da6:	689b      	ldr	r3, [r3, #8]
     da8:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
     daa:	001a      	movs	r2, r3
     dac:	32fc      	adds	r2, #252	; 0xfc
     dae:	68d0      	ldr	r0, [r2, #12]
     db0:	2800      	cmp	r0, #0
     db2:	d006      	beq.n	dc2 <uart_nrf5_poll_in+0x1e>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
     db4:	2000      	movs	r0, #0
     db6:	60d0      	str	r0, [r2, #12]

	/* got a character */
	*c = (unsigned char)uart->RXD;
     db8:	22a3      	movs	r2, #163	; 0xa3
     dba:	00d2      	lsls	r2, r2, #3
     dbc:	589b      	ldr	r3, [r3, r2]
     dbe:	700b      	strb	r3, [r1, #0]

	return 0;
     dc0:	e001      	b.n	dc6 <uart_nrf5_poll_in+0x22>
static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);

	if (!uart->EVENTS_RXDRDY) {
		return -1;
     dc2:	2001      	movs	r0, #1
     dc4:	4240      	negs	r0, r0

	/* got a character */
	*c = (unsigned char)uart->RXD;

	return 0;
}
     dc6:	4770      	bx	lr

00000dc8 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     dc8:	6803      	ldr	r3, [r0, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
     dca:	4a06      	ldr	r2, [pc, #24]	; (de4 <uart_nrf5_poll_out+0x1c>)
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     dcc:	689b      	ldr	r3, [r3, #8]
     dce:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
     dd0:	5099      	str	r1, [r3, r2]

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
     dd2:	33fc      	adds	r3, #252	; 0xfc
     dd4:	6a1a      	ldr	r2, [r3, #32]
     dd6:	2a00      	cmp	r2, #0
     dd8:	d0fc      	beq.n	dd4 <uart_nrf5_poll_out+0xc>
	}

	uart->EVENTS_TXDRDY = 0;
     dda:	2200      	movs	r2, #0

	return c;
}
     ddc:	0008      	movs	r0, r1

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
	}

	uart->EVENTS_TXDRDY = 0;
     dde:	621a      	str	r2, [r3, #32]

	return c;
}
     de0:	4770      	bx	lr
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	0000051c 	.word	0x0000051c

00000de8 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     de8:	6803      	ldr	r3, [r0, #0]
	u32_t error = 0;
     dea:	2000      	movs	r0, #0
}

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     dec:	689b      	ldr	r3, [r3, #8]
     dee:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
     df0:	001a      	movs	r2, r3
     df2:	32fc      	adds	r2, #252	; 0xfc
     df4:	6a92      	ldr	r2, [r2, #40]	; 0x28
     df6:	4282      	cmp	r2, r0
     df8:	d003      	beq.n	e02 <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
     dfa:	2290      	movs	r2, #144	; 0x90
     dfc:	00d2      	lsls	r2, r2, #3
     dfe:	5898      	ldr	r0, [r3, r2]

		/* Clear the register */
		uart->ERRORSRC = error;
     e00:	5098      	str	r0, [r3, r2]
	}

	error = error & 0x0F;

	return error;
     e02:	230f      	movs	r3, #15
     e04:	4018      	ands	r0, r3
}
     e06:	4770      	bx	lr

00000e08 <uart_nrf5_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
     e0a:	6803      	ldr	r3, [r0, #0]
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     e0c:	0005      	movs	r5, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
     e0e:	689b      	ldr	r3, [r3, #8]
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     e10:	4818      	ldr	r0, [pc, #96]	; (e74 <uart_nrf5_init+0x6c>)
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     e12:	681c      	ldr	r4, [r3, #0]
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     e14:	f00d fe7a 	bl	eb0c <device_get_binding>
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
     e18:	6843      	ldr	r3, [r0, #4]
     e1a:	0006      	movs	r6, r0
     e1c:	681f      	ldr	r7, [r3, #0]
     e1e:	2302      	movs	r3, #2
     e20:	220a      	movs	r2, #10
     e22:	33ff      	adds	r3, #255	; 0xff
     e24:	2100      	movs	r1, #0
     e26:	47b8      	blx	r7
     e28:	6873      	ldr	r3, [r6, #4]
     e2a:	0030      	movs	r0, r6
     e2c:	681f      	ldr	r7, [r3, #0]
     e2e:	2300      	movs	r3, #0
     e30:	220b      	movs	r2, #11
     e32:	0019      	movs	r1, r3
     e34:	47b8      	blx	r7
				  (GPIO_DIR_OUT | GPIO_PUD_PULL_UP));
	(void) gpio_pin_configure(gpio_dev,
				  CONFIG_UART_NRF5_GPIO_RX_PIN,
				  (GPIO_DIR_IN));

	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
     e36:	220a      	movs	r2, #10
     e38:	4b0f      	ldr	r3, [pc, #60]	; (e78 <uart_nrf5_init+0x70>)
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     e3a:	21eb      	movs	r1, #235	; 0xeb
				  (GPIO_DIR_OUT | GPIO_PUD_PULL_UP));
	(void) gpio_pin_configure(gpio_dev,
				  CONFIG_UART_NRF5_GPIO_RX_PIN,
				  (GPIO_DIR_IN));

	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
     e3c:	50e2      	str	r2, [r4, r3]
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
     e3e:	4b0f      	ldr	r3, [pc, #60]	; (e7c <uart_nrf5_init+0x74>)
     e40:	3201      	adds	r2, #1
     e42:	50e2      	str	r2, [r4, r3]
	uart->PSELCTS = CONFIG_UART_NRF5_GPIO_CTS_PIN;
	uart->CONFIG = (UART_CONFIG_HWFC_Enabled << UART_CONFIG_HWFC_Pos);

#endif /* CONFIG_UART_NRF5_FLOW_CONTROL */

	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
     e44:	22e1      	movs	r2, #225	; 0xe1
     e46:	68ab      	ldr	r3, [r5, #8]
     e48:	0252      	lsls	r2, r2, #9
     e4a:	601a      	str	r2, [r3, #0]
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     e4c:	682b      	ldr	r3, [r5, #0]
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     e4e:	0449      	lsls	r1, r1, #17
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     e50:	689b      	ldr	r3, [r3, #8]
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);

	uart->EVENTS_TXDRDY = 0;
     e52:	2000      	movs	r0, #0
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     e54:	681a      	ldr	r2, [r3, #0]
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     e56:	4b0a      	ldr	r3, [pc, #40]	; (e80 <uart_nrf5_init+0x78>)
     e58:	50d1      	str	r1, [r2, r3]
	if (err) {
		return err;
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
     e5a:	2204      	movs	r2, #4
     e5c:	3b24      	subs	r3, #36	; 0x24
     e5e:	50e2      	str	r2, [r4, r3]

	uart->EVENTS_TXDRDY = 0;
     e60:	0023      	movs	r3, r4
     e62:	33fc      	adds	r3, #252	; 0xfc
     e64:	6218      	str	r0, [r3, #32]
	uart->EVENTS_RXDRDY = 0;
     e66:	60d8      	str	r0, [r3, #12]

	uart->TASKS_STARTTX = 1;
     e68:	2301      	movs	r3, #1
     e6a:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
     e6c:	6023      	str	r3, [r4, #0]

	dev->driver_api = &uart_nrf5_driver_api;
     e6e:	4b05      	ldr	r3, [pc, #20]	; (e84 <uart_nrf5_init+0x7c>)
     e70:	606b      	str	r3, [r5, #4]
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->irq_config_func(dev);
#endif

	return 0;
}
     e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e74:	000100bf 	.word	0x000100bf
     e78:	0000050c 	.word	0x0000050c
     e7c:	00000514 	.word	0x00000514
     e80:	00000524 	.word	0x00000524
     e84:	000100e8 	.word	0x000100e8

00000e88 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
     e88:	22a8      	movs	r2, #168	; 0xa8
     e8a:	4b08      	ldr	r3, [pc, #32]	; (eac <rtc_compare_set+0x24>)
     e8c:	00d2      	lsls	r2, r2, #3
     e8e:	5098      	str	r0, [r3, r2]
	rtc_now = RTC_COUNTER;
     e90:	4a07      	ldr	r2, [pc, #28]	; (eb0 <rtc_compare_set+0x28>)
     e92:	589b      	ldr	r3, [r3, r2]
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
     e94:	1ac0      	subs	r0, r0, r3
     e96:	0200      	lsls	r0, r0, #8
     e98:	0a00      	lsrs	r0, r0, #8
     e9a:	4b06      	ldr	r3, [pc, #24]	; (eb4 <rtc_compare_set+0x2c>)
     e9c:	3802      	subs	r0, #2
     e9e:	4298      	cmp	r0, r3
     ea0:	d903      	bls.n	eaa <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     ea2:	2280      	movs	r2, #128	; 0x80
     ea4:	4b04      	ldr	r3, [pc, #16]	; (eb8 <rtc_compare_set+0x30>)
     ea6:	0292      	lsls	r2, r2, #10
     ea8:	605a      	str	r2, [r3, #4]
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
     eaa:	4770      	bx	lr
     eac:	40011000 	.word	0x40011000
     eb0:	00000504 	.word	0x00000504
     eb4:	007ffffd 	.word	0x007ffffd
     eb8:	e000e1fc 	.word	0xe000e1fc

00000ebc <rtc_announce_set_next>:

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     ebc:	4b13      	ldr	r3, [pc, #76]	; (f0c <rtc_announce_set_next+0x50>)
     ebe:	4a14      	ldr	r2, [pc, #80]	; (f10 <rtc_announce_set_next+0x54>)
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
     ec0:	b570      	push	{r4, r5, r6, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     ec2:	58d0      	ldr	r0, [r2, r3]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     ec4:	23a3      	movs	r3, #163	; 0xa3
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     ec6:	4d13      	ldr	r5, [pc, #76]	; (f14 <rtc_announce_set_next+0x58>)

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     ec8:	005b      	lsls	r3, r3, #1
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     eca:	682c      	ldr	r4, [r5, #0]
     ecc:	1b00      	subs	r0, r0, r4
     ece:	0200      	lsls	r0, r0, #8
     ed0:	0a00      	lsrs	r0, r0, #8

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     ed2:	4298      	cmp	r0, r3
     ed4:	d913      	bls.n	efe <rtc_announce_set_next+0x42>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
     ed6:	2148      	movs	r1, #72	; 0x48
     ed8:	31ff      	adds	r1, #255	; 0xff
     eda:	f7ff f977 	bl	1cc <__aeabi_uidiv>

		if (sys_elapsed > expected_sys_ticks) {
     ede:	4b0e      	ldr	r3, [pc, #56]	; (f18 <rtc_announce_set_next+0x5c>)
     ee0:	681b      	ldr	r3, [r3, #0]
     ee2:	4298      	cmp	r0, r3
     ee4:	d900      	bls.n	ee8 <rtc_announce_set_next+0x2c>
     ee6:	0018      	movs	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     ee8:	2348      	movs	r3, #72	; 0x48
     eea:	33ff      	adds	r3, #255	; 0xff
     eec:	4343      	muls	r3, r0
     eee:	191c      	adds	r4, r3, r4
     ef0:	0224      	lsls	r4, r4, #8
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     ef2:	4b0a      	ldr	r3, [pc, #40]	; (f1c <rtc_announce_set_next+0x60>)

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     ef4:	0a24      	lsrs	r4, r4, #8
     ef6:	602c      	str	r4, [r5, #0]
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     ef8:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
     efa:	f00e fd09 	bl	f910 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
     efe:	6828      	ldr	r0, [r5, #0]
     f00:	3048      	adds	r0, #72	; 0x48
     f02:	30ff      	adds	r0, #255	; 0xff
     f04:	f7ff ffc0 	bl	e88 <rtc_compare_set>
}
     f08:	bd70      	pop	{r4, r5, r6, pc}
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	00000504 	.word	0x00000504
     f10:	40011000 	.word	0x40011000
     f14:	20000838 	.word	0x20000838
     f18:	2000083c 	.word	0x2000083c
     f1c:	200006dc 	.word	0x200006dc

00000f20 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     f20:	2200      	movs	r2, #0
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
     f22:	b510      	push	{r4, lr}
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     f24:	4b02      	ldr	r3, [pc, #8]	; (f30 <rtc1_nrf5_isr+0x10>)
     f26:	645a      	str	r2, [r3, #68]	; 0x44
	rtc_announce_set_next();
     f28:	f7ff ffc8 	bl	ebc <rtc_announce_set_next>
}
     f2c:	bd10      	pop	{r4, pc}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	400110fc 	.word	0x400110fc

00000f34 <_timer_idle_enter>:
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     f34:	4b07      	ldr	r3, [pc, #28]	; (f54 <_timer_idle_enter+0x20>)
 * c) The RTC is programmed to fire at sys tick 1 + 3 = 4 (RTC tick 400)
 *
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
     f36:	b510      	push	{r4, lr}
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     f38:	4298      	cmp	r0, r3
     f3a:	d900      	bls.n	f3e <_timer_idle_enter+0xa>
	    (sys_ticks > (RTC_HALF / RTC_TICKS_PER_SYS_TICK))) {
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
     f3c:	0018      	movs	r0, r3
	}

	expected_sys_ticks = sys_ticks;
     f3e:	4b06      	ldr	r3, [pc, #24]	; (f58 <_timer_idle_enter+0x24>)
     f40:	6018      	str	r0, [r3, #0]

	/* If ticks is 0, the RTC interrupt handler will be set pending
	 * immediately, meaning that we will not go to sleep.
	 */
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
     f42:	2348      	movs	r3, #72	; 0x48
     f44:	33ff      	adds	r3, #255	; 0xff
     f46:	4358      	muls	r0, r3
     f48:	4b04      	ldr	r3, [pc, #16]	; (f5c <_timer_idle_enter+0x28>)
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	18c0      	adds	r0, r0, r3
     f4e:	f7ff ff9b 	bl	e88 <rtc_compare_set>
}
     f52:	bd10      	pop	{r4, pc}
     f54:	00006435 	.word	0x00006435
     f58:	2000083c 	.word	0x2000083c
     f5c:	20000838 	.word	0x20000838

00000f60 <_timer_idle_exit>:
{
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     f60:	2200      	movs	r2, #0
     f62:	4b07      	ldr	r3, [pc, #28]	; (f80 <_timer_idle_exit+0x20>)
 * a) Notify how many sys ticks have passed, i.e., 350 - 150 / 100 = 2.
 * b) Schedule next sys tick at 400.
 *
 */
void _timer_idle_exit(void)
{
     f64:	b510      	push	{r4, lr}
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     f66:	2180      	movs	r1, #128	; 0x80
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     f68:	645a      	str	r2, [r3, #68]	; 0x44
     f6a:	23c0      	movs	r3, #192	; 0xc0
     f6c:	4a05      	ldr	r2, [pc, #20]	; (f84 <_timer_idle_exit+0x24>)
     f6e:	005b      	lsls	r3, r3, #1
     f70:	0289      	lsls	r1, r1, #10
     f72:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	rtc_announce_set_next();
     f74:	f7ff ffa2 	bl	ebc <rtc_announce_set_next>

	/* After exiting idle, the kernel no longer expects more than one sys
	 * ticks to have passed when _sys_clock_tick_announce() is called.
	 */
	expected_sys_ticks = 1;
     f78:	2201      	movs	r2, #1
     f7a:	4b03      	ldr	r3, [pc, #12]	; (f88 <_timer_idle_exit+0x28>)
     f7c:	601a      	str	r2, [r3, #0]
}
     f7e:	bd10      	pop	{r4, pc}
     f80:	400110fc 	.word	0x400110fc
     f84:	e000e100 	.word	0xe000e100
     f88:	2000083c 	.word	0x2000083c

00000f8c <_sys_clock_driver_init>:
	RTC_CC_EVENT = 0;
	rtc_announce_set_next();
}

int _sys_clock_driver_init(struct device *device)
{
     f8c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
     f8e:	481a      	ldr	r0, [pc, #104]	; (ff8 <_sys_clock_driver_init+0x6c>)
     f90:	f00d fdbc 	bl	eb0c <device_get_binding>
	if (!clock) {
     f94:	2800      	cmp	r0, #0
     f96:	d02c      	beq.n	ff2 <_sys_clock_driver_init+0x66>
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     f98:	2400      	movs	r4, #0

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     f9a:	2601      	movs	r6, #1
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
     f9c:	6843      	ldr	r3, [r0, #4]
     f9e:	2101      	movs	r1, #1
     fa0:	681b      	ldr	r3, [r3, #0]
     fa2:	4798      	blx	r3
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     fa4:	4b15      	ldr	r3, [pc, #84]	; (ffc <_sys_clock_driver_init+0x70>)
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
     fa6:	2248      	movs	r2, #72	; 0x48
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     fa8:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     faa:	4b15      	ldr	r3, [pc, #84]	; (1000 <_sys_clock_driver_init+0x74>)
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
     fac:	4d15      	ldr	r5, [pc, #84]	; (1004 <_sys_clock_driver_init+0x78>)
	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     fae:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
     fb0:	23a1      	movs	r3, #161	; 0xa1
     fb2:	00db      	lsls	r3, r3, #3
     fb4:	50ec      	str	r4, [r5, r3]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
     fb6:	32ff      	adds	r2, #255	; 0xff
     fb8:	3338      	adds	r3, #56	; 0x38
     fba:	50ea      	str	r2, [r5, r3]
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
     fbc:	2380      	movs	r3, #128	; 0x80
     fbe:	32fe      	adds	r2, #254	; 0xfe
     fc0:	025b      	lsls	r3, r3, #9
     fc2:	32ff      	adds	r2, #255	; 0xff
     fc4:	50ab      	str	r3, [r5, r2]
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
     fc6:	3a40      	subs	r2, #64	; 0x40
     fc8:	50ab      	str	r3, [r5, r2]

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
     fca:	4b0f      	ldr	r3, [pc, #60]	; (1008 <_sys_clock_driver_init+0x7c>)
     fcc:	2180      	movs	r1, #128	; 0x80
     fce:	645c      	str	r4, [r3, #68]	; 0x44
     fd0:	23c0      	movs	r3, #192	; 0xc0
     fd2:	4a0e      	ldr	r2, [pc, #56]	; (100c <_sys_clock_driver_init+0x80>)
     fd4:	005b      	lsls	r3, r3, #1
     fd6:	0289      	lsls	r1, r1, #10
     fd8:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
     fda:	2011      	movs	r0, #17
     fdc:	0022      	movs	r2, r4
     fde:	0031      	movs	r1, r6
     fe0:	f00d fbfc 	bl	e7dc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
     fe4:	2011      	movs	r0, #17
     fe6:	f00d fbd9 	bl	e79c <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
     fea:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
     fec:	0020      	movs	r0, r4

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
	irq_enable(NRF5_IRQ_RTC1_IRQn);

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;
     fee:	602e      	str	r6, [r5, #0]

	return 0;
     ff0:	e001      	b.n	ff6 <_sys_clock_driver_init+0x6a>

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
	if (!clock) {
		return -1;
     ff2:	2001      	movs	r0, #1
     ff4:	4240      	negs	r0, r0

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
}
     ff6:	bd70      	pop	{r4, r5, r6, pc}
     ff8:	000100c6 	.word	0x000100c6
     ffc:	20000838 	.word	0x20000838
    1000:	2000083c 	.word	0x2000083c
    1004:	40011000 	.word	0x40011000
    1008:	400110fc 	.word	0x400110fc
    100c:	e000e100 	.word	0xe000e100

00001010 <_timer_cycle_get_32>:
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1010:	490b      	ldr	r1, [pc, #44]	; (1040 <_timer_cycle_get_32+0x30>)
    1012:	4a0c      	ldr	r2, [pc, #48]	; (1044 <_timer_cycle_get_32+0x34>)

	return 0;
}

u32_t _timer_cycle_get_32(void)
{
    1014:	b570      	push	{r4, r5, r6, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1016:	588b      	ldr	r3, [r1, r2]
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1018:	4e0b      	ldr	r6, [pc, #44]	; (1048 <_timer_cycle_get_32+0x38>)
    101a:	6834      	ldr	r4, [r6, #0]
    101c:	6875      	ldr	r5, [r6, #4]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    101e:	5888      	ldr	r0, [r1, r2]
	} while (rtc_now != rtc_prev);
    1020:	4283      	cmp	r3, r0
    1022:	d001      	beq.n	1028 <_timer_cycle_get_32+0x18>
    1024:	0003      	movs	r3, r0
    1026:	e7f8      	b.n	101a <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1028:	2048      	movs	r0, #72	; 0x48
    102a:	30ff      	adds	r0, #255	; 0xff
    102c:	4360      	muls	r0, r4
    102e:	4a07      	ldr	r2, [pc, #28]	; (104c <_timer_cycle_get_32+0x3c>)
    1030:	1a1b      	subs	r3, r3, r0
    1032:	6810      	ldr	r0, [r2, #0]
    1034:	021b      	lsls	r3, r3, #8
    1036:	4360      	muls	r0, r4
    1038:	0a1b      	lsrs	r3, r3, #8
    103a:	1818      	adds	r0, r3, r0
	       elapsed_cycles;
}
    103c:	bd70      	pop	{r4, r5, r6, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	40011000 	.word	0x40011000
    1044:	00000504 	.word	0x00000504
    1048:	20001c40 	.word	0x20001c40
    104c:	200006e0 	.word	0x200006e0

00001050 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1050:	6803      	ldr	r3, [r0, #0]
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    1052:	b570      	push	{r4, r5, r6, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1054:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1056:	2501      	movs	r5, #1
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1058:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    105a:	261f      	movs	r6, #31
    105c:	6883      	ldr	r3, [r0, #8]
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    105e:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1060:	68dc      	ldr	r4, [r3, #12]
    1062:	0023      	movs	r3, r4
    1064:	40c3      	lsrs	r3, r0
    1066:	422b      	tst	r3, r5
    1068:	d008      	beq.n	107c <gpiote_find_channel+0x2c>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    106a:	0003      	movs	r3, r0
    106c:	3345      	adds	r3, #69	; 0x45
    106e:	33ff      	adds	r3, #255	; 0xff
    1070:	009b      	lsls	r3, r3, #2
    1072:	589b      	ldr	r3, [r3, r2]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1074:	0a1b      	lsrs	r3, r3, #8
    1076:	4033      	ands	r3, r6
    1078:	428b      	cmp	r3, r1
    107a:	d003      	beq.n	1084 <gpiote_find_channel+0x34>
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    107c:	3001      	adds	r0, #1
    107e:	2804      	cmp	r0, #4
    1080:	d1ef      	bne.n	1062 <gpiote_find_channel+0x12>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
			return i;
		}
	}

	return -ENODEV;
    1082:	3817      	subs	r0, #23
}
    1084:	bd70      	pop	{r4, r5, r6, pc}

00001086 <gpio_nrf5_read>:
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
    1086:	b530      	push	{r4, r5, lr}
    1088:	0015      	movs	r5, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    108a:	6802      	ldr	r2, [r0, #0]
    108c:	20a2      	movs	r0, #162	; 0xa2
    108e:	6892      	ldr	r2, [r2, #8]
    1090:	00c0      	lsls	r0, r0, #3
    1092:	6814      	ldr	r4, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
    1094:	5822      	ldr	r2, [r4, r0]
static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1096:	2900      	cmp	r1, #0
    1098:	d102      	bne.n	10a0 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    109a:	40ea      	lsrs	r2, r5
    109c:	3101      	adds	r1, #1
    109e:	400a      	ands	r2, r1
	} else {
		*value = gpio->IN;
	}
	return 0;
}
    10a0:	2000      	movs	r0, #0
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    10a2:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    10a4:	bd30      	pop	{r4, r5, pc}
	...

000010a8 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    10a8:	6800      	ldr	r0, [r0, #0]
    10aa:	6880      	ldr	r0, [r0, #8]
    10ac:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    10ae:	2900      	cmp	r1, #0
    10b0:	d109      	bne.n	10c6 <gpio_nrf5_write+0x1e>
    10b2:	3101      	adds	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    10b4:	4091      	lsls	r1, r2
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		if (value) { /* 1 */
    10b6:	2b00      	cmp	r3, #0
    10b8:	d002      	beq.n	10c0 <gpio_nrf5_write+0x18>
			gpio->OUTSET = BIT(pin);
    10ba:	23a1      	movs	r3, #161	; 0xa1
    10bc:	00db      	lsls	r3, r3, #3
    10be:	e000      	b.n	10c2 <gpio_nrf5_write+0x1a>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    10c0:	4b03      	ldr	r3, [pc, #12]	; (10d0 <gpio_nrf5_write+0x28>)
    10c2:	50c1      	str	r1, [r0, r3]
    10c4:	e001      	b.n	10ca <gpio_nrf5_write+0x22>
		}
	} else {
		gpio->OUT = value;
    10c6:	4a03      	ldr	r2, [pc, #12]	; (10d4 <gpio_nrf5_write+0x2c>)
    10c8:	5083      	str	r3, [r0, r2]
	}
	return 0;
}
    10ca:	2000      	movs	r0, #0
    10cc:	4770      	bx	lr
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	0000050c 	.word	0x0000050c
    10d4:	00000504 	.word	0x00000504

000010d8 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    10d8:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    10da:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    10dc:	2a00      	cmp	r2, #0
    10de:	d007      	beq.n	10f0 <gpio_nrf5_manage_callback+0x18>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    10e0:	681a      	ldr	r2, [r3, #0]
    10e2:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    10e4:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    10e6:	6019      	str	r1, [r3, #0]

	if (!list->tail) {
    10e8:	2a00      	cmp	r2, #0
    10ea:	d119      	bne.n	1120 <gpio_nrf5_manage_callback+0x48>
		list->tail = list->head;
    10ec:	6059      	str	r1, [r3, #4]
    10ee:	e017      	b.n	1120 <gpio_nrf5_manage_callback+0x48>
    10f0:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    10f2:	2800      	cmp	r0, #0
    10f4:	d014      	beq.n	1120 <gpio_nrf5_manage_callback+0x48>
		if (test == node) {
    10f6:	4281      	cmp	r1, r0
    10f8:	d10f      	bne.n	111a <gpio_nrf5_manage_callback+0x42>
    10fa:	685c      	ldr	r4, [r3, #4]
    10fc:	6808      	ldr	r0, [r1, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    10fe:	2a00      	cmp	r2, #0
    1100:	d104      	bne.n	110c <gpio_nrf5_manage_callback+0x34>
		list->head = node->next;
    1102:	6018      	str	r0, [r3, #0]

		/* Was node also the tail? */
		if (list->tail == node) {
    1104:	42a1      	cmp	r1, r4
    1106:	d105      	bne.n	1114 <gpio_nrf5_manage_callback+0x3c>
			list->tail = list->head;
    1108:	6058      	str	r0, [r3, #4]
    110a:	e003      	b.n	1114 <gpio_nrf5_manage_callback+0x3c>
		}
	} else {
		prev_node->next = node->next;
    110c:	6010      	str	r0, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    110e:	42a1      	cmp	r1, r4
    1110:	d100      	bne.n	1114 <gpio_nrf5_manage_callback+0x3c>
			list->tail = prev_node;
    1112:	605a      	str	r2, [r3, #4]
		}
	}

	node->next = NULL;
    1114:	2300      	movs	r3, #0
    1116:	600b      	str	r3, [r1, #0]
    1118:	e002      	b.n	1120 <gpio_nrf5_manage_callback+0x48>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    111a:	0002      	movs	r2, r0
    111c:	6800      	ldr	r0, [r0, #0]
    111e:	e7e8      	b.n	10f2 <gpio_nrf5_manage_callback+0x1a>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    1120:	2000      	movs	r0, #0
    1122:	bd10      	pop	{r4, pc}

00001124 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1126:	6803      	ldr	r3, [r0, #0]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1128:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    112a:	689b      	ldr	r3, [r3, #8]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    112c:	0017      	movs	r7, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    112e:	689d      	ldr	r5, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1130:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1132:	2900      	cmp	r1, #0
    1134:	d114      	bne.n	1160 <gpio_nrf5_enable_callback+0x3c>

		i = gpiote_find_channel(dev, pin);
    1136:	0011      	movs	r1, r2
    1138:	f7ff ff8a 	bl	1050 <gpiote_find_channel>
    113c:	1e02      	subs	r2, r0, #0
		if (i < 0) {
    113e:	db11      	blt.n	1164 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    1140:	2301      	movs	r3, #1
    1142:	0019      	movs	r1, r3
    1144:	40b9      	lsls	r1, r7
    1146:	68b0      	ldr	r0, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1148:	4093      	lsls	r3, r2
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    114a:	4301      	orrs	r1, r0
    114c:	60b1      	str	r1, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    114e:	0011      	movs	r1, r2
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1150:	22c1      	movs	r2, #193	; 0xc1
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    1152:	3140      	adds	r1, #64	; 0x40
    1154:	0089      	lsls	r1, r1, #2
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1156:	0092      	lsls	r2, r2, #2
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    1158:	514c      	str	r4, [r1, r5]
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
	}

	return 0;
    115a:	0020      	movs	r0, r4

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    115c:	50ab      	str	r3, [r5, r2]
	} else {
		return -ENOTSUP;
	}

	return 0;
    115e:	e001      	b.n	1164 <gpio_nrf5_enable_callback+0x40>
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
    1160:	2023      	movs	r0, #35	; 0x23
    1162:	4240      	negs	r0, r0
	}

	return 0;
}
    1164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001166 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    1166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1168:	6803      	ldr	r3, [r0, #0]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    116a:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    116c:	689b      	ldr	r3, [r3, #8]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    116e:	0016      	movs	r6, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1170:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1172:	6885      	ldr	r5, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1174:	2900      	cmp	r1, #0
    1176:	d110      	bne.n	119a <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    1178:	0011      	movs	r1, r2
    117a:	f7ff ff69 	bl	1050 <gpiote_find_channel>
    117e:	1e03      	subs	r3, r0, #0
		if (i < 0) {
    1180:	db0d      	blt.n	119e <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    1182:	2301      	movs	r3, #1
    1184:	001a      	movs	r2, r3
    1186:	40b2      	lsls	r2, r6
    1188:	68a9      	ldr	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    118a:	4083      	lsls	r3, r0
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    118c:	4391      	bics	r1, r2
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    118e:	22c2      	movs	r2, #194	; 0xc2
    1190:	0092      	lsls	r2, r2, #2
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    1192:	60a9      	str	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    1194:	50bb      	str	r3, [r7, r2]
	} else {
		return -ENOTSUP;
	}

	return 0;
    1196:	0023      	movs	r3, r4
    1198:	e001      	b.n	119e <gpio_nrf5_disable_callback+0x38>

		data->pin_callback_enables &= ~(BIT(pin));
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
	} else {
		return -ENOTSUP;
    119a:	2323      	movs	r3, #35	; 0x23
    119c:	425b      	negs	r3, r3
	}

	return 0;
}
    119e:	0018      	movs	r0, r3
    11a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000011a2 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    11a2:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    11a4:	2200      	movs	r2, #0
    11a6:	2101      	movs	r1, #1
    11a8:	2006      	movs	r0, #6
    11aa:	f00d fb17 	bl	e7dc <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    11ae:	2006      	movs	r0, #6
    11b0:	f00d faf4 	bl	e79c <_arch_irq_enable>

	return 0;
}
    11b4:	2000      	movs	r0, #0
    11b6:	bd10      	pop	{r4, pc}

000011b8 <gpio_nrf5_port_isr>:
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    11b8:	6803      	ldr	r3, [r0, #0]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
    11ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    11bc:	689b      	ldr	r3, [r3, #8]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
    11be:	0004      	movs	r4, r0
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    11c0:	689b      	ldr	r3, [r3, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    11c2:	2701      	movs	r7, #1
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    11c4:	9301      	str	r3, [sp, #4]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    11c6:	2300      	movs	r3, #0
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
    11c8:	001a      	movs	r2, r3
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    11ca:	6885      	ldr	r5, [r0, #8]
    11cc:	9801      	ldr	r0, [sp, #4]
    11ce:	0099      	lsls	r1, r3, #2
    11d0:	1841      	adds	r1, r0, r1
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
    11d2:	0008      	movs	r0, r1
    11d4:	30fc      	adds	r0, #252	; 0xfc
    11d6:	6846      	ldr	r6, [r0, #4]
    11d8:	2e00      	cmp	r6, #0
    11da:	d00a      	beq.n	11f2 <gpio_nrf5_port_isr+0x3a>
			gpiote->EVENTS_IN[i] = 0;
    11dc:	2600      	movs	r6, #0
    11de:	6046      	str	r6, [r0, #4]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    11e0:	20a2      	movs	r0, #162	; 0xa2
    11e2:	00c0      	lsls	r0, r0, #3
    11e4:	5809      	ldr	r1, [r1, r0]
    11e6:	201f      	movs	r0, #31
    11e8:	0a09      	lsrs	r1, r1, #8
    11ea:	4001      	ands	r1, r0
    11ec:	0038      	movs	r0, r7
    11ee:	4088      	lsls	r0, r1
    11f0:	4302      	orrs	r2, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    11f2:	3301      	adds	r3, #1
    11f4:	2b04      	cmp	r3, #4
    11f6:	d1e9      	bne.n	11cc <gpio_nrf5_port_isr+0x14>
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
    11f8:	68ae      	ldr	r6, [r5, #8]

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    11fa:	2006      	movs	r0, #6
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
    11fc:	4016      	ands	r6, r2

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    11fe:	f00d fad7 	bl	e7b0 <_arch_irq_disable>
    1202:	682d      	ldr	r5, [r5, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1204:	2d00      	cmp	r5, #0
    1206:	d103      	bne.n	1210 <gpio_nrf5_port_isr+0x58>

	/* Call the registered callbacks */
	_gpio_fire_callbacks(&data->callbacks, (struct device *)dev,
			     enabled_int);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1208:	2006      	movs	r0, #6
    120a:	f00d fac7 	bl	e79c <_arch_irq_enable>
}
    120e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (cb->pin_mask & pins) {
    1210:	68ab      	ldr	r3, [r5, #8]
    1212:	4233      	tst	r3, r6
    1214:	d0f5      	beq.n	1202 <gpio_nrf5_port_isr+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1216:	0032      	movs	r2, r6
    1218:	0029      	movs	r1, r5
    121a:	0020      	movs	r0, r4
    121c:	686b      	ldr	r3, [r5, #4]
    121e:	4798      	blx	r3
    1220:	e7ef      	b.n	1202 <gpio_nrf5_port_isr+0x4a>
	...

00001224 <gpio_nrf5_config>:
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
    1224:	b5f0      	push	{r4, r5, r6, r7, lr}
    1226:	0006      	movs	r6, r0
    1228:	0014      	movs	r4, r2
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    122a:	6802      	ldr	r2, [r0, #0]
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
    122c:	b085      	sub	sp, #20
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    122e:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1230:	68b5      	ldr	r5, [r6, #8]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1232:	6890      	ldr	r0, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1234:	6817      	ldr	r7, [r2, #0]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1236:	9003      	str	r0, [sp, #12]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1238:	2900      	cmp	r1, #0
    123a:	d001      	beq.n	1240 <gpio_nrf5_config+0x1c>
					      pull |
					      GPIO_INPUT_CONNECT |
					      GPIO_DIR_INPUT);
		}
	} else {
		return -ENOTSUP;
    123c:	2023      	movs	r0, #35	; 0x23
    123e:	e069      	b.n	1314 <gpio_nrf5_config+0xf0>

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1240:	2103      	movs	r1, #3
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1242:	1398      	asrs	r0, r3, #14
    1244:	4008      	ands	r0, r1

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1246:	131a      	asrs	r2, r3, #12
    1248:	400a      	ands	r2, r1
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    124a:	9001      	str	r0, [sp, #4]

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    124c:	31fd      	adds	r1, #253	; 0xfd
    124e:	20c0      	movs	r0, #192	; 0xc0
    1250:	468c      	mov	ip, r1
    1252:	0080      	lsls	r0, r0, #2
    1254:	4018      	ands	r0, r3
			pull = GPIO_PULL_UP;
    1256:	39f4      	subs	r1, #244	; 0xf4
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1258:	4560      	cmp	r0, ip
    125a:	d004      	beq.n	1266 <gpio_nrf5_config+0x42>
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
    125c:	492f      	ldr	r1, [pc, #188]	; (131c <gpio_nrf5_config+0xf8>)
    125e:	1840      	adds	r0, r0, r1
    1260:	4241      	negs	r1, r0
    1262:	4141      	adcs	r1, r0
    1264:	0089      	lsls	r1, r1, #2
			pull = GPIO_PULL_UP;
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
			pull = GPIO_PULL_DOWN;
		}

		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    1266:	2001      	movs	r0, #1
    1268:	0092      	lsls	r2, r2, #2
    126a:	9202      	str	r2, [sp, #8]
    126c:	4203      	tst	r3, r0
    126e:	d013      	beq.n	1298 <gpio_nrf5_config+0x74>
			/* Set initial output value */
			if (pull == GPIO_PULL_UP) {
    1270:	290c      	cmp	r1, #12
    1272:	d103      	bne.n	127c <gpio_nrf5_config+0x58>
				gpio->OUTSET = BIT(pin);
    1274:	22a1      	movs	r2, #161	; 0xa1
    1276:	40a0      	lsls	r0, r4
    1278:	00d2      	lsls	r2, r2, #3
    127a:	e003      	b.n	1284 <gpio_nrf5_config+0x60>
			} else if (pull == GPIO_PULL_DOWN) {
    127c:	2904      	cmp	r1, #4
    127e:	d102      	bne.n	1286 <gpio_nrf5_config+0x62>
				gpio->OUTCLR = BIT(pin);
    1280:	40a0      	lsls	r0, r4
    1282:	4a27      	ldr	r2, [pc, #156]	; (1320 <gpio_nrf5_config+0xfc>)
    1284:	50b8      	str	r0, [r7, r2]
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    1286:	9802      	ldr	r0, [sp, #8]
    1288:	9a01      	ldr	r2, [sp, #4]
    128a:	1882      	adds	r2, r0, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
    128c:	4825      	ldr	r0, [pc, #148]	; (1324 <gpio_nrf5_config+0x100>)
			} else if (pull == GPIO_PULL_DOWN) {
				gpio->OUTCLR = BIT(pin);
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    128e:	0092      	lsls	r2, r2, #2
					      pull |
					      GPIO_INPUT_DISCONNECT |
    1290:	5812      	ldr	r2, [r2, r0]
    1292:	2003      	movs	r0, #3
    1294:	4302      	orrs	r2, r0
    1296:	e005      	b.n	12a4 <gpio_nrf5_config+0x80>
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    1298:	9802      	ldr	r0, [sp, #8]
    129a:	9a01      	ldr	r2, [sp, #4]
    129c:	1882      	adds	r2, r0, r2
					      pull |
					      GPIO_INPUT_CONNECT |
    129e:	4821      	ldr	r0, [pc, #132]	; (1324 <gpio_nrf5_config+0x100>)
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
    12a0:	0092      	lsls	r2, r2, #2
					      pull |
					      GPIO_INPUT_CONNECT |
    12a2:	5812      	ldr	r2, [r2, r0]
    12a4:	4311      	orrs	r1, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    12a6:	0022      	movs	r2, r4
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
    12a8:	2002      	movs	r0, #2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    12aa:	32c1      	adds	r2, #193	; 0xc1
    12ac:	32ff      	adds	r2, #255	; 0xff
    12ae:	0092      	lsls	r2, r2, #2
    12b0:	51d1      	str	r1, [r2, r7]
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
    12b2:	4018      	ands	r0, r3
    12b4:	d02f      	beq.n	1316 <gpio_nrf5_config+0xf2>
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
    12b6:	069a      	lsls	r2, r3, #26
    12b8:	d5c0      	bpl.n	123c <gpio_nrf5_config+0x18>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    12ba:	065a      	lsls	r2, r3, #25
    12bc:	d403      	bmi.n	12c6 <gpio_nrf5_config+0xa2>
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
    12be:	2780      	movs	r7, #128	; 0x80
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    12c0:	075b      	lsls	r3, r3, #29
    12c2:	d403      	bmi.n	12cc <gpio_nrf5_config+0xa8>
    12c4:	e000      	b.n	12c8 <gpio_nrf5_config+0xa4>
	if (flags & GPIO_INT) {
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
    12c6:	27c0      	movs	r7, #192	; 0xc0
    12c8:	02bf      	lsls	r7, r7, #10
    12ca:	e000      	b.n	12ce <gpio_nrf5_config+0xaa>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
    12cc:	027f      	lsls	r7, r7, #9
			}
		} else { /* GPIO_INT_LEVEL */
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    12ce:	68e8      	ldr	r0, [r5, #12]
    12d0:	f7ff f948 	bl	564 <__popcountsi2>
    12d4:	2804      	cmp	r0, #4
    12d6:	d01c      	beq.n	1312 <gpio_nrf5_config+0xee>
				GPIOTE_CHAN_COUNT) {
			return -EIO;
		}

		/* check if already allocated to replace */
		int i = gpiote_find_channel(dev, pin);
    12d8:	0030      	movs	r0, r6
    12da:	0021      	movs	r1, r4
    12dc:	f7ff feb8 	bl	1050 <gpiote_find_channel>
    12e0:	68ee      	ldr	r6, [r5, #12]

		if (i < 0) {
    12e2:	2800      	cmp	r0, #0
    12e4:	da03      	bge.n	12ee <gpio_nrf5_config+0xca>
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    12e6:	43f0      	mvns	r0, r6
    12e8:	f7ff f932 	bl	550 <__ffssi2>
    12ec:	3801      	subs	r0, #1
		}

		data->gpiote_chan_mask |= BIT(i);
    12ee:	2201      	movs	r2, #1
    12f0:	0013      	movs	r3, r2
    12f2:	4083      	lsls	r3, r0
    12f4:	431e      	orrs	r6, r3

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    12f6:	23f8      	movs	r3, #248	; 0xf8
    12f8:	0224      	lsls	r4, r4, #8
    12fa:	015b      	lsls	r3, r3, #5
    12fc:	401c      	ands	r4, r3

		gpiote->CONFIG[i] = config;
    12fe:	3045      	adds	r0, #69	; 0x45

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    1300:	4314      	orrs	r4, r2

		gpiote->CONFIG[i] = config;
    1302:	30ff      	adds	r0, #255	; 0xff
    1304:	9b03      	ldr	r3, [sp, #12]
    1306:	0080      	lsls	r0, r0, #2

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    1308:	4327      	orrs	r7, r4
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
    130a:	60ee      	str	r6, [r5, #12]

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);

		gpiote->CONFIG[i] = config;
    130c:	50c7      	str	r7, [r0, r3]
	}


	return 0;
    130e:	2000      	movs	r0, #0
    1310:	e001      	b.n	1316 <gpio_nrf5_config+0xf2>
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
				GPIOTE_CHAN_COUNT) {
			return -EIO;
    1312:	2005      	movs	r0, #5
    1314:	4240      	negs	r0, r0
		gpiote->CONFIG[i] = config;
	}


	return 0;
}
    1316:	b005      	add	sp, #20
    1318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	fffffe00 	.word	0xfffffe00
    1320:	0000050c 	.word	0x0000050c
    1324:	00010124 	.word	0x00010124

00001328 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1328:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    132a:	f3ef 8110 	mrs	r1, PRIMASK
    132e:	b672      	cpsid	i
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1330:	4a15      	ldr	r2, [pc, #84]	; (1388 <_m16src_stop+0x60>)
    1332:	7810      	ldrb	r0, [r2, #0]
    1334:	2800      	cmp	r0, #0
    1336:	d104      	bne.n	1342 <_m16src_stop+0x1a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1338:	2900      	cmp	r1, #0
    133a:	d120      	bne.n	137e <_m16src_stop+0x56>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    133c:	b662      	cpsie	i
		irq_unlock(imask);
		return -EALREADY;
    133e:	3845      	subs	r0, #69	; 0x45
    1340:	e021      	b.n	1386 <_m16src_stop+0x5e>
	}

	if (--m16src_ref) {
    1342:	1e43      	subs	r3, r0, #1
    1344:	b2db      	uxtb	r3, r3
    1346:	7013      	strb	r3, [r2, #0]
    1348:	2b00      	cmp	r3, #0
    134a:	d004      	beq.n	1356 <_m16src_stop+0x2e>
		irq_unlock(imask);
		return 0;
    134c:	2000      	movs	r0, #0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    134e:	4281      	cmp	r1, r0
    1350:	d119      	bne.n	1386 <_m16src_stop+0x5e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1352:	b662      	cpsie	i
    1354:	e017      	b.n	1386 <_m16src_stop+0x5e>
	}

	if (m16src_grd) {
    1356:	4b0d      	ldr	r3, [pc, #52]	; (138c <_m16src_stop+0x64>)
    1358:	781c      	ldrb	r4, [r3, #0]
    135a:	2c00      	cmp	r4, #0
    135c:	d004      	beq.n	1368 <_m16src_stop+0x40>
		m16src_ref++;
    135e:	7010      	strb	r0, [r2, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1360:	2900      	cmp	r1, #0
    1362:	d10e      	bne.n	1382 <_m16src_stop+0x5a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1364:	b662      	cpsie	i
    1366:	e00c      	b.n	1382 <_m16src_stop+0x5a>
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    1368:	2201      	movs	r2, #1
    136a:	701a      	strb	r2, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    136c:	2900      	cmp	r1, #0
    136e:	d100      	bne.n	1372 <_m16src_stop+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1370:	b662      	cpsie	i

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    1372:	2180      	movs	r1, #128	; 0x80

	/* release resource guard */
	m16src_grd = 0;
    1374:	2000      	movs	r0, #0

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    1376:	05c9      	lsls	r1, r1, #23
    1378:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    137a:	7018      	strb	r0, [r3, #0]

	return 0;
    137c:	e003      	b.n	1386 <_m16src_stop+0x5e>
	 */
	imask = irq_lock();

	if (!m16src_ref) {
		irq_unlock(imask);
		return -EALREADY;
    137e:	2045      	movs	r0, #69	; 0x45
    1380:	e000      	b.n	1384 <_m16src_stop+0x5c>
	}

	if (m16src_grd) {
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
    1382:	200b      	movs	r0, #11
    1384:	4240      	negs	r0, r0

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    1386:	bd10      	pop	{r4, pc}
    1388:	20000850 	.word	0x20000850
    138c:	20000851 	.word	0x20000851

00001390 <_clock_control_init>:
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1390:	2200      	movs	r2, #0
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    1392:	b510      	push	{r4, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1394:	0010      	movs	r0, r2
    1396:	2101      	movs	r1, #1
    1398:	f00d fa20 	bl	e7dc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    139c:	2000      	movs	r0, #0
    139e:	f00d f9fd 	bl	e79c <_arch_irq_enable>

	return 0;
}
    13a2:	2000      	movs	r0, #0
    13a4:	bd10      	pop	{r4, pc}
	...

000013a8 <_m16src_start>:

static u8_t m16src_ref;
static u8_t m16src_grd;

static int _m16src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    13a8:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    13aa:	f3ef 8310 	mrs	r3, PRIMASK
    13ae:	b672      	cpsid	i

	/* Test for reference increment from zero and resource guard not taken.
	 */
	imask = irq_lock();

	if (m16src_ref++) {
    13b0:	4a29      	ldr	r2, [pc, #164]	; (1458 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x28>)
    13b2:	7810      	ldrb	r0, [r2, #0]
    13b4:	1c44      	adds	r4, r0, #1
    13b6:	7014      	strb	r4, [r2, #0]
    13b8:	2800      	cmp	r0, #0
    13ba:	d003      	beq.n	13c4 <_m16src_start+0x1c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    13bc:	2b00      	cmp	r3, #0
    13be:	d13f      	bne.n	1440 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x10>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    13c0:	b662      	cpsie	i
    13c2:	e03d      	b.n	1440 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x10>
		irq_unlock(imask);
		goto hf_already_started;
	}

	if (m16src_grd) {
    13c4:	4c25      	ldr	r4, [pc, #148]	; (145c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x2c>)
    13c6:	7825      	ldrb	r5, [r4, #0]
    13c8:	2d00      	cmp	r5, #0
    13ca:	d004      	beq.n	13d6 <_m16src_start+0x2e>
		m16src_ref--;
    13cc:	7010      	strb	r0, [r2, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    13ce:	2b00      	cmp	r3, #0
    13d0:	d13f      	bne.n	1452 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x22>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    13d2:	b662      	cpsie	i
    13d4:	e03d      	b.n	1452 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x22>
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    13d6:	2201      	movs	r2, #1
    13d8:	7022      	strb	r2, [r4, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    13da:	2b00      	cmp	r3, #0
    13dc:	d100      	bne.n	13e0 <_m16src_start+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    13de:	b662      	cpsie	i
    13e0:	2580      	movs	r5, #128	; 0x80
    13e2:	4e1f      	ldr	r6, [pc, #124]	; (1460 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x30>)
    13e4:	05ed      	lsls	r5, r5, #23

	irq_unlock(imask);

	/* If blocking then spin-wait in CPU sleep until 16MHz clock settles. */
	blocking = POINTER_TO_UINT(sub_system);
	if (blocking) {
    13e6:	2900      	cmp	r1, #0
    13e8:	d025      	beq.n	1436 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x6>
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);
    13ea:	2000      	movs	r0, #0
    13ec:	f00d f9e0 	bl	e7b0 <_arch_irq_disable>

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    13f0:	2300      	movs	r3, #0

		intenset = NRF_CLOCK->INTENSET;
    13f2:	22c1      	movs	r2, #193	; 0xc1
	if (blocking) {
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    13f4:	6073      	str	r3, [r6, #4]

		intenset = NRF_CLOCK->INTENSET;
    13f6:	0092      	lsls	r2, r2, #2
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    13f8:	3301      	adds	r3, #1

		irq_disable(POWER_CLOCK_IRQn);

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		intenset = NRF_CLOCK->INTENSET;
    13fa:	58a9      	ldr	r1, [r5, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    13fc:	50ab      	str	r3, [r5, r2]

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    13fe:	602b      	str	r3, [r5, #0]

		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1400:	6873      	ldr	r3, [r6, #4]
    1402:	2b00      	cmp	r3, #0
    1404:	d103      	bne.n	140e <_m16src_start+0x66>
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    1406:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    1408:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    140a:	bf20      	wfe
    140c:	e7f8      	b.n	1400 <_m16src_start+0x58>
			__WFE();
			__SEV();
			__WFE();
		}

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    140e:	2200      	movs	r2, #0
    1410:	4b13      	ldr	r3, [pc, #76]	; (1460 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x30>)
    1412:	605a      	str	r2, [r3, #4]

		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1414:	2301      	movs	r3, #1
    1416:	4219      	tst	r1, r3
    1418:	d104      	bne.n	1424 <_m16src_start+0x7c>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    141a:	22c2      	movs	r2, #194	; 0xc2
    141c:	2180      	movs	r1, #128	; 0x80
    141e:	0092      	lsls	r2, r2, #2
    1420:	05c9      	lsls	r1, r1, #23
    1422:	508b      	str	r3, [r1, r2]
    1424:	23c0      	movs	r3, #192	; 0xc0
    1426:	2101      	movs	r1, #1
    1428:	4a0e      	ldr	r2, [pc, #56]	; (1464 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x34>)
    142a:	005b      	lsls	r3, r3, #1
    142c:	50d1      	str	r1, [r2, r3]
		}

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
    142e:	2000      	movs	r0, #0
    1430:	f00d f9b4 	bl	e79c <_arch_irq_enable>
    1434:	e002      	b.n	143c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xc>
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1436:	2301      	movs	r3, #1

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1438:	6071      	str	r1, [r6, #4]

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    143a:	602b      	str	r3, [r5, #0]
	}

	/* release resource guard */
	m16src_grd = 0;
    143c:	2300      	movs	r3, #0
    143e:	7023      	strb	r3, [r4, #0]
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1440:	2280      	movs	r2, #128	; 0x80
    1442:	4b09      	ldr	r3, [pc, #36]	; (1468 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x38>)
    1444:	05d2      	lsls	r2, r2, #23
    1446:	58d3      	ldr	r3, [r2, r3]
		return 0;
    1448:	2000      	movs	r0, #0
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    144a:	03db      	lsls	r3, r3, #15
    144c:	d403      	bmi.n	1456 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x26>
		return 0;
	} else {
		return -EINPROGRESS;
    144e:	3844      	subs	r0, #68	; 0x44
    1450:	e001      	b.n	1456 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x26>
	}

	if (m16src_grd) {
		m16src_ref--;
		irq_unlock(imask);
		return -EAGAIN;
    1452:	200b      	movs	r0, #11
    1454:	4240      	negs	r0, r0
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    1456:	bd70      	pop	{r4, r5, r6, pc}
    1458:	20000850 	.word	0x20000850
    145c:	20000851 	.word	0x20000851
    1460:	400000fc 	.word	0x400000fc
    1464:	e000e100 	.word	0xe000e100
    1468:	0000040c 	.word	0x0000040c

0000146c <_power_clock_isr>:

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
    146c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t pof, hf_intenset, hf_stat, hf, lf, done, ctto;
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    146e:	4c24      	ldr	r4, [pc, #144]	; (1500 <_power_clock_isr+0x94>)
    1470:	2380      	movs	r3, #128	; 0x80
    1472:	68e2      	ldr	r2, [r4, #12]
    1474:	05db      	lsls	r3, r3, #23
    1476:	4694      	mov	ip, r2

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1478:	22c1      	movs	r2, #193	; 0xc1
    147a:	0092      	lsls	r2, r2, #2
    147c:	5899      	ldr	r1, [r3, r2]
    147e:	2201      	movs	r2, #1
    1480:	400a      	ands	r2, r1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1482:	4920      	ldr	r1, [pc, #128]	; (1504 <_power_clock_isr+0x98>)

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
    1484:	0005      	movs	r5, r0

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1486:	585e      	ldr	r6, [r3, r1]
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1488:	9200      	str	r2, [sp, #0]
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    148a:	6867      	ldr	r7, [r4, #4]

	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    148c:	68a0      	ldr	r0, [r4, #8]

	done = (NRF_CLOCK->EVENTS_DONE != 0);
    148e:	6921      	ldr	r1, [r4, #16]
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1490:	6962      	ldr	r2, [r4, #20]
    1492:	9201      	str	r2, [sp, #4]

	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);

	if (pof) {
    1494:	4662      	mov	r2, ip
    1496:	2a00      	cmp	r2, #0
    1498:	d001      	beq.n	149e <_power_clock_isr+0x32>
		NRF_POWER->EVENTS_POFWARN = 0;
    149a:	2200      	movs	r2, #0
    149c:	60e2      	str	r2, [r4, #12]
	}

	if (hf) {
    149e:	2f00      	cmp	r7, #0
    14a0:	d001      	beq.n	14a6 <_power_clock_isr+0x3a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    14a2:	2700      	movs	r7, #0
    14a4:	6067      	str	r7, [r4, #4]
	}

	if (hf_intenset && hf_stat) {
    14a6:	9a00      	ldr	r2, [sp, #0]
    14a8:	2a00      	cmp	r2, #0
    14aa:	d006      	beq.n	14ba <_power_clock_isr+0x4e>
    14ac:	03f2      	lsls	r2, r6, #15
    14ae:	d504      	bpl.n	14ba <_power_clock_isr+0x4e>
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    14b0:	26c2      	movs	r6, #194	; 0xc2
    14b2:	2201      	movs	r2, #1
    14b4:	00b6      	lsls	r6, r6, #2
    14b6:	519a      	str	r2, [r3, r6]

		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    14b8:	611a      	str	r2, [r3, #16]
	}

	if (lf) {
    14ba:	2800      	cmp	r0, #0
    14bc:	d001      	beq.n	14c2 <_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    14be:	2300      	movs	r3, #0
    14c0:	60a3      	str	r3, [r4, #8]

		__ASSERT_NO_MSG(0);
	}

	if (done) {
    14c2:	2900      	cmp	r1, #0
    14c4:	d008      	beq.n	14d8 <_power_clock_isr+0x6c>
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
    14c6:	2100      	movs	r1, #0

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    14c8:	0028      	movs	r0, r5
	}

	if (done) {
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
    14ca:	6121      	str	r1, [r4, #16]

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    14cc:	f7ff ff2c 	bl	1328 <_m16src_stop>
		__ASSERT_NO_MSG(!err);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    14d0:	2380      	movs	r3, #128	; 0x80
    14d2:	2201      	movs	r2, #1
    14d4:	05db      	lsls	r3, r3, #23
    14d6:	615a      	str	r2, [r3, #20]
	}

	if (ctto) {
    14d8:	9b01      	ldr	r3, [sp, #4]
    14da:	2b00      	cmp	r3, #0
    14dc:	d00e      	beq.n	14fc <_power_clock_isr+0x90>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    14de:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    14e0:	23c1      	movs	r3, #193	; 0xc1
    14e2:	2280      	movs	r2, #128	; 0x80
	}

	if (ctto) {
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    14e4:	6161      	str	r1, [r4, #20]

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    14e6:	2401      	movs	r4, #1
    14e8:	009b      	lsls	r3, r3, #2
    14ea:	05d2      	lsls	r2, r2, #23
    14ec:	50d4      	str	r4, [r2, r3]

		err = _m16src_start(dev, false);
    14ee:	0028      	movs	r0, r5
    14f0:	f7ff ff5a 	bl	13a8 <_m16src_start>
		if (!err) {
    14f4:	2800      	cmp	r0, #0
    14f6:	d101      	bne.n	14fc <_power_clock_isr+0x90>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    14f8:	4b03      	ldr	r3, [pc, #12]	; (1508 <_power_clock_isr+0x9c>)
    14fa:	605c      	str	r4, [r3, #4]
			NVIC_SetPendingIRQ(POWER_CLOCK_IRQn);
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}
}
    14fc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	400000fc 	.word	0x400000fc
    1504:	0000040c 	.word	0x0000040c
    1508:	e000e1fc 	.word	0xe000e1fc

0000150c <_k32src_start>:

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    150e:	2580      	movs	r5, #128	; 0x80
    1510:	2383      	movs	r3, #131	; 0x83
    1512:	05ed      	lsls	r5, r5, #23
    1514:	00db      	lsls	r3, r3, #3
    1516:	58ec      	ldr	r4, [r5, r3]
    1518:	2380      	movs	r3, #128	; 0x80

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    151a:	0007      	movs	r7, r0
	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
		return 0;
    151c:	2000      	movs	r0, #0

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    151e:	025b      	lsls	r3, r3, #9

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    1520:	000e      	movs	r6, r1

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    1522:	401c      	ands	r4, r3
    1524:	4284      	cmp	r4, r0
    1526:	d14d      	bne.n	15c4 <_k32src_start+0xb8>
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);
    1528:	0020      	movs	r0, r4
    152a:	f00d f941 	bl	e7b0 <_arch_irq_disable>

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;

	intenset = NRF_CLOCK->INTENSET;
    152e:	22c1      	movs	r2, #193	; 0xc1
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1530:	2002      	movs	r0, #2
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1532:	4b25      	ldr	r3, [pc, #148]	; (15c8 <_k32src_start+0xbc>)

	intenset = NRF_CLOCK->INTENSET;
    1534:	0092      	lsls	r2, r2, #2
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1536:	609c      	str	r4, [r3, #8]

	intenset = NRF_CLOCK->INTENSET;
    1538:	58a9      	ldr	r1, [r5, r2]
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    153a:	50a8      	str	r0, [r5, r2]

	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    153c:	22a3      	movs	r2, #163	; 0xa3
    153e:	00d2      	lsls	r2, r2, #3
    1540:	50ae      	str	r6, [r5, r2]

	/* Start and spin-wait until clock settles */
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1542:	2201      	movs	r2, #1
    1544:	001c      	movs	r4, r3
    1546:	60aa      	str	r2, [r5, #8]

	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1548:	68a3      	ldr	r3, [r4, #8]
    154a:	2b00      	cmp	r3, #0
    154c:	d103      	bne.n	1556 <_k32src_start+0x4a>
    154e:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    1550:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    1552:	bf20      	wfe
    1554:	e7f8      	b.n	1548 <_k32src_start+0x3c>
		__WFE();
		__SEV();
		__WFE();
	}

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1556:	2200      	movs	r2, #0
    1558:	4b1b      	ldr	r3, [pc, #108]	; (15c8 <_k32src_start+0xbc>)
    155a:	609a      	str	r2, [r3, #8]

	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    155c:	2302      	movs	r3, #2
    155e:	4219      	tst	r1, r3
    1560:	d104      	bne.n	156c <_k32src_start+0x60>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1562:	22c2      	movs	r2, #194	; 0xc2
    1564:	2180      	movs	r1, #128	; 0x80
    1566:	0092      	lsls	r2, r2, #2
    1568:	05c9      	lsls	r1, r1, #23
    156a:	508b      	str	r3, [r1, r2]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    156c:	23c0      	movs	r3, #192	; 0xc0
    156e:	2501      	movs	r5, #1
    1570:	4a16      	ldr	r2, [pc, #88]	; (15cc <_k32src_start+0xc0>)
    1572:	005b      	lsls	r3, r3, #1
    1574:	50d5      	str	r5, [r2, r3]
	}

	NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

	irq_enable(POWER_CLOCK_IRQn);
    1576:	2000      	movs	r0, #0
    1578:	f00d f910 	bl	e79c <_arch_irq_enable>

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    157c:	2380      	movs	r3, #128	; 0x80
    157e:	22c2      	movs	r2, #194	; 0xc2
    1580:	2018      	movs	r0, #24
    1582:	0092      	lsls	r2, r2, #2
    1584:	05db      	lsls	r3, r3, #23
    1586:	5098      	str	r0, [r3, r2]
	NRF_CLOCK->EVENTS_DONE = 0;
	NRF_CLOCK->EVENTS_CTTO = 0;

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1588:	2103      	movs	r1, #3

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
	NRF_CLOCK->EVENTS_DONE = 0;
    158a:	2200      	movs	r2, #0
	NRF_CLOCK->EVENTS_CTTO = 0;

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    158c:	4031      	ands	r1, r6

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
	NRF_CLOCK->EVENTS_DONE = 0;
    158e:	6122      	str	r2, [r4, #16]
	NRF_CLOCK->EVENTS_CTTO = 0;
    1590:	6162      	str	r2, [r4, #20]

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1592:	4291      	cmp	r1, r2
    1594:	d10e      	bne.n	15b4 <_k32src_start+0xa8>
		int err;

		/* Set the Calibration Timer Initial Value */
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1596:	22a7      	movs	r2, #167	; 0xa7
    1598:	2410      	movs	r4, #16
    159a:	00d2      	lsls	r2, r2, #3
    159c:	509c      	str	r4, [r3, r2]

		/* Enable DONE and CTTO IRQs */
		NRF_CLOCK->INTENSET =
    159e:	22c1      	movs	r2, #193	; 0xc1
    15a0:	0092      	lsls	r2, r2, #2
    15a2:	5098      	str	r0, [r3, r2]
		/* Start HF clock, if already started then explicitly
		 * assert IRQ.
		 * NOTE: The INTENSET is used as state flag to start
		 * calibration in ISR.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    15a4:	509d      	str	r5, [r3, r2]

		err = _m16src_start(dev, false);
    15a6:	0038      	movs	r0, r7
    15a8:	f7ff fefe 	bl	13a8 <_m16src_start>
		if (!err) {
    15ac:	2800      	cmp	r0, #0
    15ae:	d101      	bne.n	15b4 <_k32src_start+0xa8>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    15b0:	4b07      	ldr	r3, [pc, #28]	; (15d0 <_k32src_start+0xc4>)
    15b2:	605d      	str	r5, [r3, #4]
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
    15b4:	2383      	movs	r3, #131	; 0x83
    15b6:	2280      	movs	r2, #128	; 0x80
    15b8:	2001      	movs	r0, #1
    15ba:	00db      	lsls	r3, r3, #3
    15bc:	05d2      	lsls	r2, r2, #23
    15be:	58d3      	ldr	r3, [r2, r3]
    15c0:	0c1b      	lsrs	r3, r3, #16
    15c2:	4398      	bics	r0, r3
}
    15c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	400000fc 	.word	0x400000fc
    15cc:	e000e100 	.word	0xe000e100
    15d0:	e000e1fc 	.word	0xe000e1fc

000015d4 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    15d4:	2000      	movs	r0, #0
    15d6:	4770      	bx	lr

000015d8 <char_out>:
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
	ctx->count++;
    15d8:	680b      	ldr	r3, [r1, #0]
struct out_context {
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
    15da:	b510      	push	{r4, lr}
	ctx->count++;
    15dc:	3301      	adds	r3, #1
    15de:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    15e0:	4b01      	ldr	r3, [pc, #4]	; (15e8 <char_out+0x10>)
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	4798      	blx	r3
}
    15e6:	bd10      	pop	{r4, pc}
    15e8:	200002c0 	.word	0x200002c0

000015ec <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    15ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ee:	b087      	sub	sp, #28
    15f0:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    15f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    15f4:	0007      	movs	r7, r0
    15f6:	9102      	str	r1, [sp, #8]
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    15f8:	2b00      	cmp	r3, #0
    15fa:	dc01      	bgt.n	1600 <_printk_dec_ulong+0x14>
		min_width = 1;
    15fc:	2301      	movs	r3, #1
    15fe:	930c      	str	r3, [sp, #48]	; 0x30
    1600:	2320      	movs	r3, #32
    1602:	9305      	str	r3, [sp, #20]
    1604:	9b03      	ldr	r3, [sp, #12]
    1606:	2b01      	cmp	r3, #1
    1608:	d101      	bne.n	160e <_printk_dec_ulong+0x22>
    160a:	332f      	adds	r3, #47	; 0x2f
    160c:	9305      	str	r3, [sp, #20]
    160e:	230a      	movs	r3, #10
    1610:	9301      	str	r3, [sp, #4]
    1612:	2300      	movs	r3, #0
    1614:	0016      	movs	r6, r2
    1616:	2401      	movs	r4, #1
    1618:	4d1f      	ldr	r5, [pc, #124]	; (1698 <_printk_dec_ulong+0xac>)
    161a:	9304      	str	r3, [sp, #16]
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    161c:	9b04      	ldr	r3, [sp, #16]
    161e:	2b00      	cmp	r3, #0
    1620:	d101      	bne.n	1626 <_printk_dec_ulong+0x3a>
    1622:	42b5      	cmp	r5, r6
    1624:	d20a      	bcs.n	163c <_printk_dec_ulong+0x50>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    1626:	1c69      	adds	r1, r5, #1
    1628:	0030      	movs	r0, r6
    162a:	f7fe fdcf 	bl	1cc <__aeabi_uidiv>
    162e:	9902      	ldr	r1, [sp, #8]
    1630:	3030      	adds	r0, #48	; 0x30
    1632:	47b8      	blx	r7
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    1634:	2301      	movs	r3, #1
			out((int)((remainder / (pos + 1)) + 48), ctx);
			digits++;
    1636:	3401      	adds	r4, #1
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    1638:	9304      	str	r3, [sp, #16]
			out((int)((remainder / (pos + 1)) + 48), ctx);
			digits++;
    163a:	e00a      	b.n	1652 <_printk_dec_ulong+0x66>
		} else if (remaining <= min_width
    163c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    163e:	9a01      	ldr	r2, [sp, #4]
    1640:	4293      	cmp	r3, r2
    1642:	db06      	blt.n	1652 <_printk_dec_ulong+0x66>
				&& padding < PAD_SPACE_AFTER) {
    1644:	9b03      	ldr	r3, [sp, #12]
    1646:	2b02      	cmp	r3, #2
    1648:	d803      	bhi.n	1652 <_printk_dec_ulong+0x66>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    164a:	9902      	ldr	r1, [sp, #8]
    164c:	9805      	ldr	r0, [sp, #20]
    164e:	47b8      	blx	r7
			digits++;
    1650:	3401      	adds	r4, #1
		}
		remaining--;
    1652:	9b01      	ldr	r3, [sp, #4]
		remainder %= (pos + 1);
    1654:	1c69      	adds	r1, r5, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1656:	3b01      	subs	r3, #1
		remainder %= (pos + 1);
    1658:	0030      	movs	r0, r6
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    165a:	9301      	str	r3, [sp, #4]
		remainder %= (pos + 1);
    165c:	f7fe fe3c 	bl	2d8 <__aeabi_uidivmod>
		pos /= 10;
    1660:	0028      	movs	r0, r5
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
    1662:	000e      	movs	r6, r1
		pos /= 10;
    1664:	210a      	movs	r1, #10
    1666:	f7fe fdb1 	bl	1cc <__aeabi_uidiv>
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
    166a:	9b01      	ldr	r3, [sp, #4]
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
    166c:	0005      	movs	r5, r0
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
    166e:	2b01      	cmp	r3, #1
    1670:	d1d4      	bne.n	161c <_printk_dec_ulong+0x30>
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
	}
	out((int)(remainder + 48), ctx);
    1672:	0030      	movs	r0, r6
    1674:	9902      	ldr	r1, [sp, #8]
    1676:	3030      	adds	r0, #48	; 0x30
    1678:	47b8      	blx	r7

	if (padding == PAD_SPACE_AFTER) {
    167a:	9b03      	ldr	r3, [sp, #12]
    167c:	2b03      	cmp	r3, #3
    167e:	d108      	bne.n	1692 <_printk_dec_ulong+0xa6>
    1680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1682:	1b1c      	subs	r4, r3, r4
		remaining = min_width - digits;
		while (remaining-- > 0) {
    1684:	2c00      	cmp	r4, #0
    1686:	dd04      	ble.n	1692 <_printk_dec_ulong+0xa6>
			out(' ', ctx);
    1688:	9902      	ldr	r1, [sp, #8]
    168a:	2020      	movs	r0, #32
    168c:	47b8      	blx	r7
    168e:	3c01      	subs	r4, #1
    1690:	e7f8      	b.n	1684 <_printk_dec_ulong+0x98>
		}
	}
}
    1692:	b007      	add	sp, #28
    1694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	3b9ac9ff 	.word	0x3b9ac9ff

0000169c <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    169c:	680a      	ldr	r2, [r1, #0]
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    169e:	b530      	push	{r4, r5, lr}
    16a0:	688b      	ldr	r3, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
    16a2:	2a00      	cmp	r2, #0
    16a4:	d002      	beq.n	16ac <str_out+0x10>
    16a6:	684c      	ldr	r4, [r1, #4]
    16a8:	42a3      	cmp	r3, r4
    16aa:	db02      	blt.n	16b2 <str_out+0x16>
		ctx->count++;
    16ac:	3301      	adds	r3, #1
    16ae:	608b      	str	r3, [r1, #8]
		return c;
    16b0:	e009      	b.n	16c6 <str_out+0x2a>
	}

	if (ctx->count == ctx->max - 1) {
    16b2:	1e65      	subs	r5, r4, #1
    16b4:	42ab      	cmp	r3, r5
    16b6:	d103      	bne.n	16c0 <str_out+0x24>
		ctx->str[ctx->count++] = '\0';
    16b8:	608c      	str	r4, [r1, #8]
    16ba:	2100      	movs	r1, #0
    16bc:	54d1      	strb	r1, [r2, r3]
    16be:	e002      	b.n	16c6 <str_out+0x2a>
	} else {
		ctx->str[ctx->count++] = c;
    16c0:	1c5c      	adds	r4, r3, #1
    16c2:	608c      	str	r4, [r1, #8]
    16c4:	54d0      	strb	r0, [r2, r3]
	}

	return c;
}
    16c6:	bd30      	pop	{r4, r5, pc}

000016c8 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    16c8:	4b01      	ldr	r3, [pc, #4]	; (16d0 <__printk_hook_install+0x8>)
    16ca:	6018      	str	r0, [r3, #0]
}
    16cc:	4770      	bx	lr
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	200002c0 	.word	0x200002c0

000016d4 <_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    16d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d6:	001c      	movs	r4, r3
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	int long_ctr = 0;
    16d8:	2300      	movs	r3, #0
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    16da:	b08d      	sub	sp, #52	; 0x34
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	int long_ctr = 0;
    16dc:	9305      	str	r3, [sp, #20]
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
    16de:	3b01      	subs	r3, #1
    16e0:	9304      	str	r3, [sp, #16]
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
    16e2:	2300      	movs	r3, #0
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    16e4:	0005      	movs	r5, r0
    16e6:	000e      	movs	r6, r1
	int might_format = 0; /* 1 if encountered a '%' */
    16e8:	001f      	movs	r7, r3
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    16ea:	9207      	str	r2, [sp, #28]
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
    16ec:	9303      	str	r3, [sp, #12]
	int min_width = -1;
	int long_ctr = 0;

	/* fmt has already been adjusted if needed */

	while (*fmt) {
    16ee:	9b07      	ldr	r3, [sp, #28]
    16f0:	7818      	ldrb	r0, [r3, #0]
    16f2:	2800      	cmp	r0, #0
    16f4:	d100      	bne.n	16f8 <_vprintk+0x24>
    16f6:	e10f      	b.n	1918 <_vprintk+0x244>
		if (!might_format) {
    16f8:	2f00      	cmp	r7, #0
    16fa:	d105      	bne.n	1708 <_vprintk+0x34>
			if (*fmt != '%') {
    16fc:	2825      	cmp	r0, #37	; 0x25
    16fe:	d100      	bne.n	1702 <_vprintk+0x2e>
    1700:	e0fb      	b.n	18fa <_vprintk+0x226>
				out((int)*fmt, ctx);
    1702:	0031      	movs	r1, r6
    1704:	47a8      	blx	r5
    1706:	e103      	b.n	1910 <_vprintk+0x23c>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1708:	2864      	cmp	r0, #100	; 0x64
    170a:	d050      	beq.n	17ae <_vprintk+0xda>
    170c:	d816      	bhi.n	173c <_vprintk+0x68>
    170e:	2839      	cmp	r0, #57	; 0x39
    1710:	d809      	bhi.n	1726 <_vprintk+0x52>
    1712:	2831      	cmp	r0, #49	; 0x31
    1714:	d236      	bcs.n	1784 <_vprintk+0xb0>
    1716:	282d      	cmp	r0, #45	; 0x2d
    1718:	d02a      	beq.n	1770 <_vprintk+0x9c>
    171a:	2830      	cmp	r0, #48	; 0x30
    171c:	d02a      	beq.n	1774 <_vprintk+0xa0>
    171e:	2825      	cmp	r0, #37	; 0x25
    1720:	d000      	beq.n	1724 <_vprintk+0x50>
    1722:	e0e1      	b.n	18e8 <_vprintk+0x214>
    1724:	e0e5      	b.n	18f2 <_vprintk+0x21e>
    1726:	2858      	cmp	r0, #88	; 0x58
    1728:	d07b      	beq.n	1822 <_vprintk+0x14e>
    172a:	2863      	cmp	r0, #99	; 0x63
    172c:	d000      	beq.n	1730 <_vprintk+0x5c>
    172e:	e0db      	b.n	18e8 <_vprintk+0x214>
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);

				out(c, ctx);
    1730:	6820      	ldr	r0, [r4, #0]
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    1732:	1d27      	adds	r7, r4, #4

				out(c, ctx);
    1734:	0031      	movs	r1, r6
    1736:	47a8      	blx	r5
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    1738:	003c      	movs	r4, r7
    173a:	e0dc      	b.n	18f6 <_vprintk+0x222>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    173c:	2870      	cmp	r0, #112	; 0x70
    173e:	d066      	beq.n	180e <_vprintk+0x13a>
    1740:	d807      	bhi.n	1752 <_vprintk+0x7e>
    1742:	2869      	cmp	r0, #105	; 0x69
    1744:	d033      	beq.n	17ae <_vprintk+0xda>
    1746:	286c      	cmp	r0, #108	; 0x6c
    1748:	d02d      	beq.n	17a6 <_vprintk+0xd2>
    174a:	2868      	cmp	r0, #104	; 0x68
    174c:	d000      	beq.n	1750 <_vprintk+0x7c>
    174e:	e0cb      	b.n	18e8 <_vprintk+0x214>
    1750:	e0d9      	b.n	1906 <_vprintk+0x232>
    1752:	2875      	cmp	r0, #117	; 0x75
    1754:	d046      	beq.n	17e4 <_vprintk+0x110>
    1756:	d805      	bhi.n	1764 <_vprintk+0x90>
    1758:	2873      	cmp	r0, #115	; 0x73
    175a:	d000      	beq.n	175e <_vprintk+0x8a>
    175c:	e0c4      	b.n	18e8 <_vprintk+0x214>
				_printk_hex_ulong(out, ctx, x, padding,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    175e:	1d27      	adds	r7, r4, #4
    1760:	6824      	ldr	r4, [r4, #0]

				while (*s)
    1762:	e0b7      	b.n	18d4 <_vprintk+0x200>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1764:	2878      	cmp	r0, #120	; 0x78
    1766:	d05c      	beq.n	1822 <_vprintk+0x14e>
    1768:	287a      	cmp	r0, #122	; 0x7a
    176a:	d100      	bne.n	176e <_vprintk+0x9a>
    176c:	e0cb      	b.n	1906 <_vprintk+0x232>
    176e:	e0bb      	b.n	18e8 <_vprintk+0x214>
			case '-':
				padding = PAD_SPACE_AFTER;
    1770:	2303      	movs	r3, #3
    1772:	e0c7      	b.n	1904 <_vprintk+0x230>
				goto still_might_format;
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
    1774:	9b04      	ldr	r3, [sp, #16]
    1776:	2b00      	cmp	r3, #0
    1778:	da07      	bge.n	178a <_vprintk+0xb6>
    177a:	9b03      	ldr	r3, [sp, #12]
    177c:	2b00      	cmp	r3, #0
    177e:	d100      	bne.n	1782 <_vprintk+0xae>
    1780:	e0c3      	b.n	190a <_vprintk+0x236>
    1782:	e006      	b.n	1792 <_vprintk+0xbe>
					padding = PAD_ZERO_BEFORE;
					goto still_might_format;
				}
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
    1784:	9b04      	ldr	r3, [sp, #16]
    1786:	2b00      	cmp	r3, #0
    1788:	db03      	blt.n	1792 <_vprintk+0xbe>
					min_width = *fmt - '0';
				} else {
					min_width = 10 * min_width + *fmt - '0';
    178a:	230a      	movs	r3, #10
    178c:	9a04      	ldr	r2, [sp, #16]
    178e:	4353      	muls	r3, r2
    1790:	1818      	adds	r0, r3, r0
				}

				if (padding == PAD_NONE) {
    1792:	9b03      	ldr	r3, [sp, #12]
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
					min_width = *fmt - '0';
				} else {
					min_width = 10 * min_width + *fmt - '0';
    1794:	3830      	subs	r0, #48	; 0x30
    1796:	9004      	str	r0, [sp, #16]
    1798:	2701      	movs	r7, #1
				}

				if (padding == PAD_NONE) {
    179a:	2b00      	cmp	r3, #0
    179c:	d000      	beq.n	17a0 <_vprintk+0xcc>
    179e:	e0b7      	b.n	1910 <_vprintk+0x23c>
					padding = PAD_SPACE_BEFORE;
    17a0:	3302      	adds	r3, #2
    17a2:	9303      	str	r3, [sp, #12]
    17a4:	e0b4      	b.n	1910 <_vprintk+0x23c>
				}
				goto still_might_format;
			case 'l':
				long_ctr++;
    17a6:	9b05      	ldr	r3, [sp, #20]
    17a8:	3301      	adds	r3, #1
    17aa:	9305      	str	r3, [sp, #20]
    17ac:	e0ab      	b.n	1906 <_vprintk+0x232>
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d;
				if (long_ctr < 2) {
    17ae:	9b05      	ldr	r3, [sp, #20]
    17b0:	2b01      	cmp	r3, #1
    17b2:	dc02      	bgt.n	17ba <_vprintk+0xe6>
					d = va_arg(ap, long);
    17b4:	6827      	ldr	r7, [r4, #0]
    17b6:	3404      	adds	r4, #4
    17b8:	e006      	b.n	17c8 <_vprintk+0xf4>
				} else {
					d = (long)va_arg(ap, long long);
    17ba:	3407      	adds	r4, #7
    17bc:	0023      	movs	r3, r4
    17be:	2207      	movs	r2, #7
    17c0:	4393      	bics	r3, r2
    17c2:	001c      	movs	r4, r3
    17c4:	681f      	ldr	r7, [r3, #0]
    17c6:	3408      	adds	r4, #8
				}

				if (d < 0) {
    17c8:	2f00      	cmp	r7, #0
    17ca:	da06      	bge.n	17da <_vprintk+0x106>
					out((int)'-', ctx);
    17cc:	0031      	movs	r1, r6
    17ce:	202d      	movs	r0, #45	; 0x2d
    17d0:	47a8      	blx	r5
					d = -d;
					min_width--;
    17d2:	9b04      	ldr	r3, [sp, #16]
					d = (long)va_arg(ap, long long);
				}

				if (d < 0) {
					out((int)'-', ctx);
					d = -d;
    17d4:	427f      	negs	r7, r7
					min_width--;
    17d6:	3b01      	subs	r3, #1
    17d8:	9304      	str	r3, [sp, #16]
				}
				_printk_dec_ulong(out, ctx, d, padding,
    17da:	9b04      	ldr	r3, [sp, #16]
    17dc:	003a      	movs	r2, r7
    17de:	9300      	str	r3, [sp, #0]
    17e0:	9b03      	ldr	r3, [sp, #12]
    17e2:	e00f      	b.n	1804 <_vprintk+0x130>
				break;
			}
			case 'u': {
				unsigned long u;

				if (long_ctr < 2) {
    17e4:	9b05      	ldr	r3, [sp, #20]
    17e6:	2b01      	cmp	r3, #1
    17e8:	dc02      	bgt.n	17f0 <_vprintk+0x11c>
					u = va_arg(ap, unsigned long);
    17ea:	6822      	ldr	r2, [r4, #0]
    17ec:	3404      	adds	r4, #4
    17ee:	e006      	b.n	17fe <_vprintk+0x12a>
				} else {
					u = (unsigned long)va_arg(ap,
    17f0:	3407      	adds	r4, #7
    17f2:	0023      	movs	r3, r4
    17f4:	2207      	movs	r2, #7
    17f6:	4393      	bics	r3, r2
    17f8:	001c      	movs	r4, r3
    17fa:	681a      	ldr	r2, [r3, #0]
    17fc:	3408      	adds	r4, #8
							unsigned long long);
				}
				_printk_dec_ulong(out, ctx, u, padding,
    17fe:	9b04      	ldr	r3, [sp, #16]
    1800:	9300      	str	r3, [sp, #0]
    1802:	9b03      	ldr	r3, [sp, #12]
    1804:	0031      	movs	r1, r6
    1806:	0028      	movs	r0, r5
    1808:	f7ff fef0 	bl	15ec <_printk_dec_ulong>
    180c:	e073      	b.n	18f6 <_vprintk+0x222>
						  min_width);
				break;
			}
			case 'p':
				  out('0', ctx);
    180e:	0031      	movs	r1, r6
    1810:	2030      	movs	r0, #48	; 0x30
    1812:	47a8      	blx	r5
				  out('x', ctx);
    1814:	0031      	movs	r1, r6
    1816:	2078      	movs	r0, #120	; 0x78
    1818:	47a8      	blx	r5
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
				  min_width = 8;
    181a:	2308      	movs	r3, #8
    181c:	9304      	str	r3, [sp, #16]
			}
			case 'p':
				  out('0', ctx);
				  out('x', ctx);
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
    181e:	3b07      	subs	r3, #7
    1820:	9303      	str	r3, [sp, #12]
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x;

				if (long_ctr < 2) {
    1822:	9b05      	ldr	r3, [sp, #20]
    1824:	2b01      	cmp	r3, #1
    1826:	dc03      	bgt.n	1830 <_vprintk+0x15c>
					x = va_arg(ap, unsigned long);
    1828:	6823      	ldr	r3, [r4, #0]
    182a:	3404      	adds	r4, #4
    182c:	9309      	str	r3, [sp, #36]	; 0x24
    182e:	e007      	b.n	1840 <_vprintk+0x16c>
				} else {
					x = (unsigned long)va_arg(ap,
    1830:	3407      	adds	r4, #7
    1832:	0023      	movs	r3, r4
    1834:	2207      	movs	r2, #7
    1836:	4393      	bics	r3, r2
    1838:	001c      	movs	r4, r3
    183a:	681b      	ldr	r3, [r3, #0]
    183c:	3408      	adds	r4, #8
    183e:	9309      	str	r3, [sp, #36]	; 0x24
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
    1840:	2308      	movs	r3, #8
    1842:	9306      	str	r3, [sp, #24]
	int digits = 0;
    1844:	2300      	movs	r3, #0
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
    1846:	2708      	movs	r7, #8
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    1848:	9308      	str	r3, [sp, #32]
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
    184a:	930b      	str	r3, [sp, #44]	; 0x2c
	int remaining = 8; /* 8 digits max */
	int digits = 0;

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    184c:	3f01      	subs	r7, #1
    184e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1850:	00bb      	lsls	r3, r7, #2
    1852:	40d8      	lsrs	r0, r3
    1854:	230f      	movs	r3, #15
    1856:	4018      	ands	r0, r3

		if (nibble || found_largest_digit || size == 1) {
    1858:	d105      	bne.n	1866 <_vprintk+0x192>
    185a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    185c:	2b00      	cmp	r3, #0
    185e:	d107      	bne.n	1870 <_vprintk+0x19c>
    1860:	2f00      	cmp	r7, #0
    1862:	d111      	bne.n	1888 <_vprintk+0x1b4>
    1864:	e004      	b.n	1870 <_vprintk+0x19c>
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    1866:	2357      	movs	r3, #87	; 0x57
    1868:	2809      	cmp	r0, #9
    186a:	d802      	bhi.n	1872 <_vprintk+0x19e>
    186c:	3b27      	subs	r3, #39	; 0x27
    186e:	e000      	b.n	1872 <_vprintk+0x19e>
    1870:	2330      	movs	r3, #48	; 0x30
			out((int)nibble, ctx);
    1872:	18c0      	adds	r0, r0, r3
    1874:	0031      	movs	r1, r6
    1876:	47a8      	blx	r5
			digits++;
    1878:	9b08      	ldr	r3, [sp, #32]
    187a:	3301      	adds	r3, #1
    187c:	9308      	str	r3, [sp, #32]
    187e:	9b06      	ldr	r3, [sp, #24]
    1880:	930a      	str	r3, [sp, #40]	; 0x28

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
    1882:	2301      	movs	r3, #1
    1884:	930b      	str	r3, [sp, #44]	; 0x2c
    1886:	e012      	b.n	18ae <_vprintk+0x1da>
			out((int)nibble, ctx);
			digits++;
			continue;
		}

		if (remaining-- <= min_width) {
    1888:	9b06      	ldr	r3, [sp, #24]
    188a:	9a06      	ldr	r2, [sp, #24]
    188c:	3b01      	subs	r3, #1
    188e:	930a      	str	r3, [sp, #40]	; 0x28
    1890:	9b04      	ldr	r3, [sp, #16]
    1892:	4293      	cmp	r3, r2
    1894:	db0b      	blt.n	18ae <_vprintk+0x1da>
			if (padding == PAD_ZERO_BEFORE) {
    1896:	9b03      	ldr	r3, [sp, #12]
    1898:	2b01      	cmp	r3, #1
    189a:	d102      	bne.n	18a2 <_vprintk+0x1ce>
				out('0', ctx);
    189c:	0031      	movs	r1, r6
    189e:	2030      	movs	r0, #48	; 0x30
    18a0:	e004      	b.n	18ac <_vprintk+0x1d8>
			} else if (padding == PAD_SPACE_BEFORE) {
    18a2:	9b03      	ldr	r3, [sp, #12]
    18a4:	2b02      	cmp	r3, #2
    18a6:	d102      	bne.n	18ae <_vprintk+0x1da>
				out(' ', ctx);
    18a8:	0031      	movs	r1, r6
    18aa:	2020      	movs	r0, #32
    18ac:	47a8      	blx	r5
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;

	for (; size; size--) {
    18ae:	2f00      	cmp	r7, #0
    18b0:	d002      	beq.n	18b8 <_vprintk+0x1e4>
    18b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    18b4:	9306      	str	r3, [sp, #24]
    18b6:	e7c9      	b.n	184c <_vprintk+0x178>
				out(' ', ctx);
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    18b8:	9b03      	ldr	r3, [sp, #12]
    18ba:	2b03      	cmp	r3, #3
    18bc:	d128      	bne.n	1910 <_vprintk+0x23c>
    18be:	9b04      	ldr	r3, [sp, #16]
    18c0:	005f      	lsls	r7, r3, #1
    18c2:	9b08      	ldr	r3, [sp, #32]
    18c4:	1aff      	subs	r7, r7, r3
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
    18c6:	2f00      	cmp	r7, #0
    18c8:	dd15      	ble.n	18f6 <_vprintk+0x222>
			out(' ', ctx);
    18ca:	0031      	movs	r1, r6
    18cc:	2020      	movs	r0, #32
    18ce:	47a8      	blx	r5
    18d0:	3f01      	subs	r7, #1
    18d2:	e7f8      	b.n	18c6 <_vprintk+0x1f2>
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);

				while (*s)
    18d4:	7820      	ldrb	r0, [r4, #0]
    18d6:	2800      	cmp	r0, #0
    18d8:	d003      	beq.n	18e2 <_vprintk+0x20e>
					out((int)(*s++), ctx);
    18da:	0031      	movs	r1, r6
    18dc:	3401      	adds	r4, #1
    18de:	47a8      	blx	r5
    18e0:	e7f8      	b.n	18d4 <_vprintk+0x200>
				_printk_hex_ulong(out, ctx, x, padding,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    18e2:	003c      	movs	r4, r7
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
    18e4:	0007      	movs	r7, r0
    18e6:	e013      	b.n	1910 <_vprintk+0x23c>
			case '%': {
				out((int)'%', ctx);
				break;
			}
			default:
				out((int)'%', ctx);
    18e8:	0031      	movs	r1, r6
    18ea:	2025      	movs	r0, #37	; 0x25
    18ec:	47a8      	blx	r5
				out((int)*fmt, ctx);
    18ee:	9b07      	ldr	r3, [sp, #28]
    18f0:	7818      	ldrb	r0, [r3, #0]
    18f2:	0031      	movs	r1, r6
    18f4:	47a8      	blx	r5
				break;
			}
			might_format = 0;
    18f6:	2700      	movs	r7, #0
				break;
			}
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
    18f8:	e00a      	b.n	1910 <_vprintk+0x23c>
		if (!might_format) {
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
    18fa:	2301      	movs	r3, #1
    18fc:	425b      	negs	r3, r3
    18fe:	9304      	str	r3, [sp, #16]
				padding = PAD_NONE;
    1900:	003b      	movs	r3, r7
				long_ctr = 0;
    1902:	9705      	str	r7, [sp, #20]
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
				padding = PAD_NONE;
    1904:	9303      	str	r3, [sp, #12]
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1906:	2701      	movs	r7, #1
    1908:	e002      	b.n	1910 <_vprintk+0x23c>
			case '-':
				padding = PAD_SPACE_AFTER;
				goto still_might_format;
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
					padding = PAD_ZERO_BEFORE;
    190a:	2301      	movs	r3, #1
    190c:	001f      	movs	r7, r3
    190e:	9303      	str	r3, [sp, #12]
				break;
			}
			might_format = 0;
		}
still_might_format:
		++fmt;
    1910:	9b07      	ldr	r3, [sp, #28]
    1912:	3301      	adds	r3, #1
    1914:	9307      	str	r3, [sp, #28]
    1916:	e6ea      	b.n	16ee <_vprintk+0x1a>
	}
}
    1918:	b00d      	add	sp, #52	; 0x34
    191a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000191c <vprintk>:
	ctx->count++;
	return _char_out(c);
}

int vprintk(const char *fmt, va_list ap)
{
    191c:	b507      	push	{r0, r1, r2, lr}
    191e:	000b      	movs	r3, r1
	struct out_context ctx = { 0 };
    1920:	2100      	movs	r1, #0
	ctx->count++;
	return _char_out(c);
}

int vprintk(const char *fmt, va_list ap)
{
    1922:	0002      	movs	r2, r0
	struct out_context ctx = { 0 };
    1924:	9101      	str	r1, [sp, #4]

	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
    1926:	4803      	ldr	r0, [pc, #12]	; (1934 <vprintk+0x18>)
    1928:	a901      	add	r1, sp, #4
    192a:	f7ff fed3 	bl	16d4 <_vprintk>
	return ctx.count;
}
    192e:	9801      	ldr	r0, [sp, #4]
    1930:	bd0e      	pop	{r1, r2, r3, pc}
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	000015d9 	.word	0x000015d9

00001938 <printk>:
 * @param fmt formatted string to output
 *
 * @return Number of characters printed
 */
int printk(const char *fmt, ...)
{
    1938:	b40f      	push	{r0, r1, r2, r3}
    193a:	b507      	push	{r0, r1, r2, lr}
    193c:	a904      	add	r1, sp, #16
    193e:	c901      	ldmia	r1!, {r0}
	int ret;
	va_list ap;

	va_start(ap, fmt);
    1940:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    1942:	f7ff ffeb 	bl	191c <vprintk>
	va_end(ap);

	return ret;
}
    1946:	b003      	add	sp, #12
    1948:	bc08      	pop	{r3}
    194a:	b004      	add	sp, #16
    194c:	4718      	bx	r3
	...

00001950 <snprintk>:

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1950:	b40c      	push	{r2, r3}
    1952:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    1954:	2500      	movs	r5, #0

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1956:	b085      	sub	sp, #20
    1958:	ab08      	add	r3, sp, #32
    195a:	cb04      	ldmia	r3!, {r2}
	struct str_context ctx = { str, size, 0 };
    195c:	9001      	str	r0, [sp, #4]
    195e:	9102      	str	r1, [sp, #8]

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1960:	0004      	movs	r4, r0
	struct str_context ctx = { str, size, 0 };
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1962:	a901      	add	r1, sp, #4
    1964:	4807      	ldr	r0, [pc, #28]	; (1984 <snprintk+0x34>)
int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
	va_list ap;

	va_start(ap, fmt);
    1966:	9300      	str	r3, [sp, #0]
	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
    1968:	9503      	str	r5, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    196a:	f7ff feb3 	bl	16d4 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    196e:	9803      	ldr	r0, [sp, #12]
    1970:	9b02      	ldr	r3, [sp, #8]
    1972:	4298      	cmp	r0, r3
    1974:	da00      	bge.n	1978 <snprintk+0x28>
		str[ctx.count] = '\0';
    1976:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    1978:	b005      	add	sp, #20
    197a:	bc30      	pop	{r4, r5}
    197c:	bc08      	pop	{r3}
    197e:	b002      	add	sp, #8
    1980:	4718      	bx	r3
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	0000169d 	.word	0x0000169d

00001988 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_IEEE802154_DRIVER_LEVEL, 0);
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE, 448);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_MAX, 27);

GEN_ABS_SYM_END
    1988:	4770      	bx	lr

0000198a <bt_rpa_create>:
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY) || \
	defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    198a:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    198c:	1ccf      	adds	r7, r1, #3
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY) || \
	defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    198e:	b085      	sub	sp, #20
    1990:	0004      	movs	r4, r0
    1992:	000d      	movs	r5, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1994:	0038      	movs	r0, r7
    1996:	2103      	movs	r1, #3
    1998:	f006 fa54 	bl	7e44 <bt_rand>
    199c:	1e06      	subs	r6, r0, #0
	if (err) {
    199e:	d11d      	bne.n	19dc <bt_rpa_create+0x52>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    19a0:	233f      	movs	r3, #63	; 0x3f
    19a2:	796a      	ldrb	r2, [r5, #5]
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    19a4:	0039      	movs	r1, r7
	err = bt_rand(rpa->val + 3, 3);
	if (err) {
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    19a6:	4013      	ands	r3, r2
    19a8:	2240      	movs	r2, #64	; 0x40
    19aa:	4313      	orrs	r3, r2
    19ac:	716b      	strb	r3, [r5, #5]
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    19ae:	3a3d      	subs	r2, #61	; 0x3d
    19b0:	4668      	mov	r0, sp
    19b2:	f7ff f970 	bl	c96 <memcpy>
	memset(res + 3, 0, 13);
    19b6:	466b      	mov	r3, sp
    19b8:	220d      	movs	r2, #13
    19ba:	0031      	movs	r1, r6
    19bc:	1cd8      	adds	r0, r3, #3
    19be:	f7ff f994 	bl	cea <memset>

	err = bt_encrypt_le(irk, res, res);
    19c2:	0020      	movs	r0, r4
    19c4:	466a      	mov	r2, sp
    19c6:	4669      	mov	r1, sp
    19c8:	f006 fa5a 	bl	7e80 <bt_encrypt_le>
    19cc:	1e04      	subs	r4, r0, #0
	if (err) {
    19ce:	d104      	bne.n	19da <bt_rpa_create+0x50>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    19d0:	2203      	movs	r2, #3
    19d2:	4669      	mov	r1, sp
    19d4:	0028      	movs	r0, r5
    19d6:	f7ff f95e 	bl	c96 <memcpy>

	/* r' = padding || r */
	memcpy(res, r, 3);
	memset(res + 3, 0, 13);

	err = bt_encrypt_le(irk, res, res);
    19da:	0020      	movs	r0, r4
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    19dc:	b005      	add	sp, #20
    19de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000019e0 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    19e0:	b570      	push	{r4, r5, r6, lr}
	switch (src->type) {
    19e2:	7803      	ldrb	r3, [r0, #0]
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    19e4:	0005      	movs	r5, r0
    19e6:	000c      	movs	r4, r1
	switch (src->type) {
    19e8:	2b01      	cmp	r3, #1
    19ea:	d013      	beq.n	1a14 <uuid_to_uuid128+0x34>
    19ec:	2b00      	cmp	r3, #0
    19ee:	d007      	beq.n	1a00 <uuid_to_uuid128+0x20>
    19f0:	2b02      	cmp	r3, #2
    19f2:	d11c      	bne.n	1a2e <uuid_to_uuid128+0x4e>
		*dst = uuid128_base;
		sys_put_le32(BT_UUID_32(src)->val,
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    19f4:	0001      	movs	r1, r0
    19f6:	2211      	movs	r2, #17
    19f8:	0020      	movs	r0, r4
    19fa:	f7ff f94c 	bl	c96 <memcpy>
		return;
    19fe:	e016      	b.n	1a2e <uuid_to_uuid128+0x4e>

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    1a00:	2211      	movs	r2, #17
    1a02:	490b      	ldr	r1, [pc, #44]	; (1a30 <uuid_to_uuid128+0x50>)
    1a04:	0020      	movs	r0, r4
    1a06:	f7ff f946 	bl	c96 <memcpy>
		sys_put_le16(BT_UUID_16(src)->val,
    1a0a:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1a0c:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    1a0e:	0a1b      	lsrs	r3, r3, #8
    1a10:	73a3      	strb	r3, [r4, #14]
    1a12:	e00c      	b.n	1a2e <uuid_to_uuid128+0x4e>
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    1a14:	2211      	movs	r2, #17
    1a16:	4906      	ldr	r1, [pc, #24]	; (1a30 <uuid_to_uuid128+0x50>)
    1a18:	0020      	movs	r0, r4
    1a1a:	f7ff f93c 	bl	c96 <memcpy>
		sys_put_le32(BT_UUID_32(src)->val,
    1a1e:	686b      	ldr	r3, [r5, #4]
    1a20:	0a1a      	lsrs	r2, r3, #8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1a22:	7363      	strb	r3, [r4, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1a24:	0c1b      	lsrs	r3, r3, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1a26:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    1a28:	0a1b      	lsrs	r3, r3, #8
    1a2a:	73a2      	strb	r2, [r4, #14]
    1a2c:	7423      	strb	r3, [r4, #16]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1a2e:	bd70      	pop	{r4, r5, r6, pc}
    1a30:	0001017c 	.word	0x0001017c

00001a34 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1a34:	b510      	push	{r4, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1a36:	7802      	ldrb	r2, [r0, #0]
    1a38:	780b      	ldrb	r3, [r1, #0]

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1a3a:	b08a      	sub	sp, #40	; 0x28
    1a3c:	000c      	movs	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1a3e:	4293      	cmp	r3, r2
    1a40:	d00c      	beq.n	1a5c <bt_uuid_cmp+0x28>

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    1a42:	4669      	mov	r1, sp
    1a44:	f7ff ffcc 	bl	19e0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1a48:	a905      	add	r1, sp, #20
    1a4a:	0020      	movs	r0, r4
    1a4c:	f7ff ffc8 	bl	19e0 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    1a50:	2115      	movs	r1, #21
    1a52:	466b      	mov	r3, sp
    1a54:	2210      	movs	r2, #16
    1a56:	4469      	add	r1, sp
    1a58:	1c58      	adds	r0, r3, #1
    1a5a:	e010      	b.n	1a7e <bt_uuid_cmp+0x4a>
{
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    1a5c:	2b01      	cmp	r3, #1
    1a5e:	d00a      	beq.n	1a76 <bt_uuid_cmp+0x42>
    1a60:	2b00      	cmp	r3, #0
    1a62:	d005      	beq.n	1a70 <bt_uuid_cmp+0x3c>
    1a64:	2b02      	cmp	r3, #2
    1a66:	d10d      	bne.n	1a84 <bt_uuid_cmp+0x50>
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1a68:	3101      	adds	r1, #1
    1a6a:	3001      	adds	r0, #1
    1a6c:	2210      	movs	r2, #16
    1a6e:	e006      	b.n	1a7e <bt_uuid_cmp+0x4a>
	if (u1->type != u2->type)
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1a70:	8843      	ldrh	r3, [r0, #2]
    1a72:	8848      	ldrh	r0, [r1, #2]
    1a74:	e001      	b.n	1a7a <bt_uuid_cmp+0x46>
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1a76:	6843      	ldr	r3, [r0, #4]
    1a78:	6848      	ldr	r0, [r1, #4]
    1a7a:	1a18      	subs	r0, r3, r0
    1a7c:	e004      	b.n	1a88 <bt_uuid_cmp+0x54>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1a7e:	f7ff f8f5 	bl	c6c <memcmp>
    1a82:	e001      	b.n	1a88 <bt_uuid_cmp+0x54>
	}

	return -EINVAL;
    1a84:	2016      	movs	r0, #22
    1a86:	4240      	negs	r0, r0
}
    1a88:	b00a      	add	sp, #40	; 0x28
    1a8a:	bd10      	pop	{r4, pc}

00001a8c <net_buf_user_data>:
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    1a8c:	89c3      	ldrh	r3, [r0, #14]
    1a8e:	18c0      	adds	r0, r0, r3
    1a90:	2303      	movs	r3, #3
    1a92:	3013      	adds	r0, #19
    1a94:	4398      	bics	r0, r3
}
    1a96:	4770      	bx	lr

00001a98 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1a98:	094b      	lsrs	r3, r1, #5
    1a9a:	009b      	lsls	r3, r3, #2
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    1a9c:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1a9e:	18c0      	adds	r0, r0, r3
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    1aa0:	000c      	movs	r4, r1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1aa2:	f00c ffff 	bl	eaa4 <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1aa6:	231f      	movs	r3, #31
    1aa8:	401c      	ands	r4, r3
    1aaa:	4120      	asrs	r0, r4
    1aac:	3b1e      	subs	r3, #30
    1aae:	4018      	ands	r0, r3
}
    1ab0:	bd10      	pop	{r4, pc}
	...

00001ab4 <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    1ab4:	0001      	movs	r1, r0
    1ab6:	2200      	movs	r2, #0

	return 0;
}

static void update_conn_param(struct bt_conn *conn)
{
    1ab8:	b510      	push	{r4, lr}
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    1aba:	78c3      	ldrb	r3, [r0, #3]
    1abc:	317c      	adds	r1, #124	; 0x7c
    1abe:	4293      	cmp	r3, r2
    1ac0:	d000      	beq.n	1ac4 <update_conn_param+0x10>
    1ac2:	4a02      	ldr	r2, [pc, #8]	; (1acc <update_conn_param+0x18>)
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1ac4:	4802      	ldr	r0, [pc, #8]	; (1ad0 <update_conn_param+0x1c>)
    1ac6:	f00e f9cd 	bl	fe64 <k_delayed_work_submit_to_queue>
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
				 CONN_UPDATE_TIMEOUT);
}
    1aca:	bd10      	pop	{r4, pc}
    1acc:	00001388 	.word	0x00001388
    1ad0:	20001c48 	.word	0x20001c48

00001ad4 <hci_cmd_done.isra.15>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1ad4:	b570      	push	{r4, r5, r6, lr}
    1ad6:	0005      	movs	r5, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ad8:	7988      	ldrb	r0, [r1, #6]

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1ada:	000c      	movs	r4, r1
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1adc:	f00c fc74 	bl	e3c8 <net_buf_pool_get>
    1ae0:	4b08      	ldr	r3, [pc, #32]	; (1b04 <hci_cmd_done.isra.15+0x30>)
    1ae2:	4298      	cmp	r0, r3
    1ae4:	d10c      	bne.n	1b00 <hci_cmd_done.isra.15+0x2c>
			buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1ae6:	0020      	movs	r0, r4
    1ae8:	f7ff ffd0 	bl	1a8c <net_buf_user_data>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1aec:	6843      	ldr	r3, [r0, #4]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d006      	beq.n	1b00 <hci_cmd_done.isra.15+0x2c>
		cmd(buf)->status = status;
    1af2:	7045      	strb	r5, [r0, #1]
		k_sem_give(cmd(buf)->sync);
    1af4:	0020      	movs	r0, r4
    1af6:	f7ff ffc9 	bl	1a8c <net_buf_user_data>
    1afa:	6840      	ldr	r0, [r0, #4]
    1afc:	f00d fe98 	bl	f830 <k_sem_give>
	}
}
    1b00:	bd70      	pop	{r4, r5, r6, pc}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	200007b0 	.word	0x200007b0

00001b08 <bt_hci_cmd_create>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    1b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b0a:	000e      	movs	r6, r1
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1b0c:	2101      	movs	r1, #1
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    1b0e:	0005      	movs	r5, r0
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1b10:	4249      	negs	r1, r1
    1b12:	480f      	ldr	r0, [pc, #60]	; (1b50 <bt_hci_cmd_create+0x48>)
    1b14:	f00c fc60 	bl	e3d8 <net_buf_alloc>
    1b18:	0004      	movs	r4, r0
	__ASSERT_NO_MSG(buf);

	BT_DBG("buf %p", buf);

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    1b1a:	2100      	movs	r1, #0
    1b1c:	f00c fcbc 	bl	e498 <net_buf_reserve>

	cmd(buf)->type = BT_BUF_CMD;
    1b20:	0020      	movs	r0, r4
    1b22:	f7ff ffb3 	bl	1a8c <net_buf_user_data>
    1b26:	2700      	movs	r7, #0
    1b28:	7007      	strb	r7, [r0, #0]
	cmd(buf)->opcode = opcode;
    1b2a:	0020      	movs	r0, r4
    1b2c:	f7ff ffae 	bl	1a8c <net_buf_user_data>
    1b30:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    1b32:	0020      	movs	r0, r4
    1b34:	f7ff ffaa 	bl	1a8c <net_buf_user_data>
    1b38:	6047      	str	r7, [r0, #4]

	hdr = net_buf_add(buf, sizeof(*hdr));
    1b3a:	0020      	movs	r0, r4
    1b3c:	2103      	movs	r1, #3
    1b3e:	3008      	adds	r0, #8
    1b40:	f00c fce0 	bl	e504 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    1b44:	7005      	strb	r5, [r0, #0]
    1b46:	0a2d      	lsrs	r5, r5, #8
    1b48:	7045      	strb	r5, [r0, #1]
	hdr->param_len = param_len;
    1b4a:	7086      	strb	r6, [r0, #2]

	return buf;
}
    1b4c:	0020      	movs	r0, r4
    1b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b50:	200007b0 	.word	0x200007b0

00001b54 <bt_hci_cmd_send_sync>:
	return 0;
}

int bt_hci_cmd_send_sync(u16_t opcode, struct net_buf *buf,
			 struct net_buf **rsp)
{
    1b54:	b570      	push	{r4, r5, r6, lr}
    1b56:	000c      	movs	r4, r1
    1b58:	b086      	sub	sp, #24
    1b5a:	0015      	movs	r5, r2
	struct k_sem sync_sem;
	int err;

	if (!buf) {
    1b5c:	2900      	cmp	r1, #0
    1b5e:	d103      	bne.n	1b68 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    1b60:	f7ff ffd2 	bl	1b08 <bt_hci_cmd_create>
    1b64:	1e04      	subs	r4, r0, #0
		if (!buf) {
    1b66:	d029      	beq.n	1bbc <bt_hci_cmd_send_sync+0x68>
		}
	}

	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);

	k_sem_init(&sync_sem, 0, 1);
    1b68:	ae01      	add	r6, sp, #4
    1b6a:	2201      	movs	r2, #1
    1b6c:	2100      	movs	r1, #0
    1b6e:	0030      	movs	r0, r6
    1b70:	f00d fe56 	bl	f820 <k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1b74:	0020      	movs	r0, r4
    1b76:	f7ff ff89 	bl	1a8c <net_buf_user_data>
    1b7a:	6046      	str	r6, [r0, #4]

	/* Make sure the buffer stays around until the command completes */
	net_buf_ref(buf);
    1b7c:	0020      	movs	r0, r4
    1b7e:	f00c fcbd 	bl	e4fc <net_buf_ref>

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1b82:	4810      	ldr	r0, [pc, #64]	; (1bc4 <bt_hci_cmd_send_sync+0x70>)
    1b84:	0021      	movs	r1, r4
    1b86:	30c4      	adds	r0, #196	; 0xc4
    1b88:	f00c fc8b 	bl	e4a2 <net_buf_put>

	err = k_sem_take(&sync_sem, HCI_CMD_TIMEOUT);
    1b8c:	490e      	ldr	r1, [pc, #56]	; (1bc8 <bt_hci_cmd_send_sync+0x74>)
    1b8e:	0030      	movs	r0, r6
    1b90:	f00d fe8a 	bl	f8a8 <k_sem_take>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
    1b94:	0020      	movs	r0, r4
    1b96:	f7ff ff79 	bl	1a8c <net_buf_user_data>
    1b9a:	7840      	ldrb	r0, [r0, #1]
    1b9c:	2800      	cmp	r0, #0
    1b9e:	d004      	beq.n	1baa <bt_hci_cmd_send_sync+0x56>
		err = -EIO;
		net_buf_unref(buf);
    1ba0:	0020      	movs	r0, r4
    1ba2:	f00c fc8d 	bl	e4c0 <net_buf_unref>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
		err = -EIO;
    1ba6:	2005      	movs	r0, #5
    1ba8:	e009      	b.n	1bbe <bt_hci_cmd_send_sync+0x6a>
		net_buf_unref(buf);
	} else {
		err = 0;
		if (rsp) {
    1baa:	2d00      	cmp	r5, #0
    1bac:	d001      	beq.n	1bb2 <bt_hci_cmd_send_sync+0x5e>
			*rsp = buf;
    1bae:	602c      	str	r4, [r5, #0]
    1bb0:	e006      	b.n	1bc0 <bt_hci_cmd_send_sync+0x6c>
		} else {
			net_buf_unref(buf);
    1bb2:	0020      	movs	r0, r4
    1bb4:	f00c fc84 	bl	e4c0 <net_buf_unref>

	if (cmd(buf)->status) {
		err = -EIO;
		net_buf_unref(buf);
	} else {
		err = 0;
    1bb8:	0028      	movs	r0, r5
    1bba:	e001      	b.n	1bc0 <bt_hci_cmd_send_sync+0x6c>
	int err;

	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    1bbc:	2037      	movs	r0, #55	; 0x37
    1bbe:	4240      	negs	r0, r0
			net_buf_unref(buf);
		}
	}

	return err;
}
    1bc0:	b006      	add	sp, #24
    1bc2:	bd70      	pop	{r4, r5, r6, pc}
    1bc4:	200002f8 	.word	0x200002f8
    1bc8:	00002710 	.word	0x00002710

00001bcc <set_random_address>:

	return 0;
}

static int set_random_address(const bt_addr_t *addr)
{
    1bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    1bce:	4e14      	ldr	r6, [pc, #80]	; (1c20 <set_random_address+0x54>)
    1bd0:	2206      	movs	r2, #6
    1bd2:	0037      	movs	r7, r6
    1bd4:	3708      	adds	r7, #8
    1bd6:	0039      	movs	r1, r7
    1bd8:	0005      	movs	r5, r0
    1bda:	f7ff f847 	bl	c6c <memcmp>
    1bde:	1e04      	subs	r4, r0, #0
	int err;

	BT_DBG("%s", bt_addr_str(addr));

	/* Do nothing if we already have the right address */
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    1be0:	d01b      	beq.n	1c1a <set_random_address+0x4e>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    1be2:	2106      	movs	r1, #6
    1be4:	480f      	ldr	r0, [pc, #60]	; (1c24 <set_random_address+0x58>)
    1be6:	f7ff ff8f 	bl	1b08 <bt_hci_cmd_create>
    1bea:	1e04      	subs	r4, r0, #0
	if (!buf) {
    1bec:	d013      	beq.n	1c16 <set_random_address+0x4a>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, addr, sizeof(*addr));
    1bee:	2206      	movs	r2, #6
    1bf0:	0029      	movs	r1, r5
    1bf2:	3008      	adds	r0, #8
    1bf4:	f00c fc8d 	bl	e512 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    1bf8:	0021      	movs	r1, r4
    1bfa:	2200      	movs	r2, #0
    1bfc:	4809      	ldr	r0, [pc, #36]	; (1c24 <set_random_address+0x58>)
    1bfe:	f7ff ffa9 	bl	1b54 <bt_hci_cmd_send_sync>
    1c02:	1e04      	subs	r4, r0, #0
	if (err) {
    1c04:	d109      	bne.n	1c1a <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1c06:	2206      	movs	r2, #6
    1c08:	0029      	movs	r1, r5
    1c0a:	0038      	movs	r0, r7
    1c0c:	f7ff f843 	bl	c96 <memcpy>
		return err;
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    1c10:	2301      	movs	r3, #1
    1c12:	71f3      	strb	r3, [r6, #7]
    1c14:	e001      	b.n	1c1a <set_random_address+0x4e>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
	if (!buf) {
		return -ENOBUFS;
    1c16:	2437      	movs	r4, #55	; 0x37
    1c18:	4264      	negs	r4, r4
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
	return 0;
}
    1c1a:	0020      	movs	r0, r4
    1c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	200002f8 	.word	0x200002f8
    1c24:	00002005 	.word	0x00002005

00001c28 <le_set_private_addr>:
		le_set_private_addr();
	}
}
#else
static int le_set_private_addr(void)
{
    1c28:	b507      	push	{r0, r1, r2, lr}
	bt_addr_t nrpa;
	int err;

	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    1c2a:	2106      	movs	r1, #6
    1c2c:	4668      	mov	r0, sp
    1c2e:	f006 f909 	bl	7e44 <bt_rand>
	if (err) {
    1c32:	2800      	cmp	r0, #0
    1c34:	d108      	bne.n	1c48 <le_set_private_addr+0x20>
		return err;
	}

	nrpa.val[5] &= 0x3f;
    1c36:	466b      	mov	r3, sp
    1c38:	795a      	ldrb	r2, [r3, #5]
    1c3a:	233f      	movs	r3, #63	; 0x3f
    1c3c:	4013      	ands	r3, r2
    1c3e:	466a      	mov	r2, sp

	return set_random_address(&nrpa);
    1c40:	4668      	mov	r0, sp
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
	if (err) {
		return err;
	}

	nrpa.val[5] &= 0x3f;
    1c42:	7153      	strb	r3, [r2, #5]

	return set_random_address(&nrpa);
    1c44:	f7ff ffc2 	bl	1bcc <set_random_address>
}
    1c48:	bd0e      	pop	{r1, r2, r3, pc}
	...

00001c4c <bt_hci_stop_scanning>:

	return err;
}

static int bt_hci_stop_scanning(void)
{
    1c4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    1c4e:	4d1c      	ldr	r5, [pc, #112]	; (1cc0 <bt_hci_stop_scanning+0x74>)
    1c50:	2107      	movs	r1, #7
    1c52:	356c      	adds	r5, #108	; 0x6c
    1c54:	0028      	movs	r0, r5
    1c56:	f7ff ff1f 	bl	1a98 <atomic_test_bit>
    1c5a:	2800      	cmp	r0, #0
    1c5c:	d02b      	beq.n	1cb6 <bt_hci_stop_scanning+0x6a>
		return -EALREADY;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    1c5e:	2102      	movs	r1, #2
    1c60:	4818      	ldr	r0, [pc, #96]	; (1cc4 <bt_hci_stop_scanning+0x78>)
    1c62:	f7ff ff51 	bl	1b08 <bt_hci_cmd_create>
    1c66:	1e04      	subs	r4, r0, #0
				sizeof(*scan_enable));
	if (!buf) {
    1c68:	d027      	beq.n	1cba <bt_hci_stop_scanning+0x6e>
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    1c6a:	2102      	movs	r1, #2
    1c6c:	3008      	adds	r0, #8
    1c6e:	f00c fc49 	bl	e504 <net_buf_simple_add>
	memset(scan_enable, 0, sizeof(*scan_enable));
    1c72:	2202      	movs	r2, #2
    1c74:	2100      	movs	r1, #0
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    1c76:	0006      	movs	r6, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    1c78:	f7ff f837 	bl	cea <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1c7c:	2300      	movs	r3, #0
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    1c7e:	aa01      	add	r2, sp, #4
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
	memset(scan_enable, 0, sizeof(*scan_enable));
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1c80:	7073      	strb	r3, [r6, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    1c82:	7033      	strb	r3, [r6, #0]

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    1c84:	0021      	movs	r1, r4
    1c86:	480f      	ldr	r0, [pc, #60]	; (1cc4 <bt_hci_stop_scanning+0x78>)
    1c88:	f7ff ff64 	bl	1b54 <bt_hci_cmd_send_sync>
	if (err) {
    1c8c:	2800      	cmp	r0, #0
    1c8e:	d116      	bne.n	1cbe <bt_hci_stop_scanning+0x72>
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    1c90:	9b01      	ldr	r3, [sp, #4]
    1c92:	689b      	ldr	r3, [r3, #8]
    1c94:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    1c96:	2c00      	cmp	r4, #0
    1c98:	d108      	bne.n	1cac <bt_hci_stop_scanning+0x60>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1c9a:	2181      	movs	r1, #129	; 0x81
    1c9c:	0028      	movs	r0, r5
    1c9e:	4249      	negs	r1, r1
    1ca0:	f00c ff17 	bl	ead2 <atomic_and>
    1ca4:	4908      	ldr	r1, [pc, #32]	; (1cc8 <bt_hci_stop_scanning+0x7c>)
    1ca6:	0028      	movs	r0, r5
    1ca8:	f00c ff13 	bl	ead2 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_SCANNING);
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);
    1cac:	9801      	ldr	r0, [sp, #4]
    1cae:	f00c fc07 	bl	e4c0 <net_buf_unref>
	if (err) {
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    1cb2:	0020      	movs	r0, r4
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);

	return err;
    1cb4:	e003      	b.n	1cbe <bt_hci_stop_scanning+0x72>
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
		return -EALREADY;
    1cb6:	2045      	movs	r0, #69	; 0x45
    1cb8:	e000      	b.n	1cbc <bt_hci_stop_scanning+0x70>
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
    1cba:	2037      	movs	r0, #55	; 0x37
    1cbc:	4240      	negs	r0, r0
	}

	net_buf_unref(rsp);

	return err;
}
    1cbe:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    1cc0:	200002f8 	.word	0x200002f8
    1cc4:	0000200c 	.word	0x0000200c
    1cc8:	fffffdff 	.word	0xfffffdff

00001ccc <set_advertise_enable>:

	return addr;
}

static int set_advertise_enable(bool enable)
{
    1ccc:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    1cce:	2101      	movs	r1, #1

	return addr;
}

static int set_advertise_enable(bool enable)
{
    1cd0:	0005      	movs	r5, r0
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    1cd2:	4812      	ldr	r0, [pc, #72]	; (1d1c <set_advertise_enable+0x50>)
    1cd4:	f7ff ff18 	bl	1b08 <bt_hci_cmd_create>
    1cd8:	1e04      	subs	r4, r0, #0
	if (!buf) {
    1cda:	d01a      	beq.n	1d12 <set_advertise_enable+0x46>
    1cdc:	3008      	adds	r0, #8
		return -ENOBUFS;
	}

	if (enable) {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    1cde:	2101      	movs	r1, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
	if (!buf) {
		return -ENOBUFS;
	}

	if (enable) {
    1ce0:	2d00      	cmp	r5, #0
    1ce2:	d100      	bne.n	1ce6 <set_advertise_enable+0x1a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
	} else {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    1ce4:	0029      	movs	r1, r5
    1ce6:	f00c fc1e 	bl	e526 <net_buf_simple_add_u8>
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    1cea:	0021      	movs	r1, r4
    1cec:	2200      	movs	r2, #0
    1cee:	480b      	ldr	r0, [pc, #44]	; (1d1c <set_advertise_enable+0x50>)
    1cf0:	f7ff ff30 	bl	1b54 <bt_hci_cmd_send_sync>
    1cf4:	1e04      	subs	r4, r0, #0
	if (err) {
    1cf6:	d10e      	bne.n	1d16 <set_advertise_enable+0x4a>
    1cf8:	4809      	ldr	r0, [pc, #36]	; (1d20 <set_advertise_enable+0x54>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1cfa:	306c      	adds	r0, #108	; 0x6c
		return err;
	}

	if (enable) {
    1cfc:	2d00      	cmp	r5, #0
    1cfe:	d003      	beq.n	1d08 <set_advertise_enable+0x3c>
    1d00:	2120      	movs	r1, #32
    1d02:	f00c fedb 	bl	eabc <atomic_or>
    1d06:	e006      	b.n	1d16 <set_advertise_enable+0x4a>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1d08:	2121      	movs	r1, #33	; 0x21
    1d0a:	4249      	negs	r1, r1
    1d0c:	f00c fee1 	bl	ead2 <atomic_and>
    1d10:	e001      	b.n	1d16 <set_advertise_enable+0x4a>
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
	if (!buf) {
		return -ENOBUFS;
    1d12:	2437      	movs	r4, #55	; 0x37
    1d14:	4264      	negs	r4, r4
	} else {
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);
	}

	return 0;
}
    1d16:	0020      	movs	r0, r4
    1d18:	bd70      	pop	{r4, r5, r6, pc}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	0000200a 	.word	0x0000200a
    1d20:	200002f8 	.word	0x200002f8

00001d24 <set_ad>:

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    1d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d26:	000c      	movs	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    1d28:	2120      	movs	r1, #32

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    1d2a:	9000      	str	r0, [sp, #0]
    1d2c:	9201      	str	r2, [sp, #4]
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    1d2e:	f7ff feeb 	bl	1b08 <bt_hci_cmd_create>
    1d32:	1e06      	subs	r6, r0, #0
	if (!buf) {
    1d34:	d037      	beq.n	1da6 <set_ad+0x82>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    1d36:	2120      	movs	r1, #32
    1d38:	3008      	adds	r0, #8
    1d3a:	f00c fbe3 	bl	e504 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    1d3e:	2220      	movs	r2, #32
    1d40:	2100      	movs	r1, #0
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    1d42:	0005      	movs	r5, r0

	memset(set_data, 0, sizeof(*set_data));

	for (i = 0; i < ad_len; i++) {
    1d44:	2700      	movs	r7, #0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));

	memset(set_data, 0, sizeof(*set_data));
    1d46:	f7fe ffd0 	bl	cea <memset>

	for (i = 0; i < ad_len; i++) {
    1d4a:	9b01      	ldr	r3, [sp, #4]
    1d4c:	429f      	cmp	r7, r3
    1d4e:	d024      	beq.n	1d9a <set_ad+0x76>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    1d50:	7828      	ldrb	r0, [r5, #0]
    1d52:	7863      	ldrb	r3, [r4, #1]
    1d54:	181b      	adds	r3, r3, r0
    1d56:	3302      	adds	r3, #2
    1d58:	2b1f      	cmp	r3, #31
    1d5a:	dd04      	ble.n	1d66 <set_ad+0x42>
			net_buf_unref(buf);
    1d5c:	0030      	movs	r0, r6
    1d5e:	f00c fbaf 	bl	e4c0 <net_buf_unref>
			return -EINVAL;
    1d62:	2016      	movs	r0, #22
    1d64:	e020      	b.n	1da8 <set_ad+0x84>
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    1d66:	1c43      	adds	r3, r0, #1
    1d68:	b2db      	uxtb	r3, r3
    1d6a:	702b      	strb	r3, [r5, #0]
    1d6c:	7862      	ldrb	r2, [r4, #1]
    1d6e:	1829      	adds	r1, r5, r0
		set_data->data[set_data->len++] = ad[i].type;
    1d70:	3002      	adds	r0, #2
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    1d72:	3201      	adds	r2, #1
		set_data->data[set_data->len++] = ad[i].type;
    1d74:	b2c0      	uxtb	r0, r0
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    1d76:	704a      	strb	r2, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    1d78:	7028      	strb	r0, [r5, #0]
    1d7a:	7822      	ldrb	r2, [r4, #0]
    1d7c:	18eb      	adds	r3, r5, r3
    1d7e:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    1d80:	1828      	adds	r0, r5, r0
    1d82:	7862      	ldrb	r2, [r4, #1]
    1d84:	6861      	ldr	r1, [r4, #4]
    1d86:	3001      	adds	r0, #1
    1d88:	f7fe ff85 	bl	c96 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    1d8c:	7863      	ldrb	r3, [r4, #1]
    1d8e:	782a      	ldrb	r2, [r5, #0]

	set_data = net_buf_add(buf, sizeof(*set_data));

	memset(set_data, 0, sizeof(*set_data));

	for (i = 0; i < ad_len; i++) {
    1d90:	3701      	adds	r7, #1
		set_data->data[set_data->len++] = ad[i].data_len + 1;
		set_data->data[set_data->len++] = ad[i].type;

		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    1d92:	18d3      	adds	r3, r2, r3
    1d94:	702b      	strb	r3, [r5, #0]
    1d96:	3408      	adds	r4, #8
    1d98:	e7d7      	b.n	1d4a <set_ad+0x26>
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    1d9a:	2200      	movs	r2, #0
    1d9c:	0031      	movs	r1, r6
    1d9e:	9800      	ldr	r0, [sp, #0]
    1da0:	f7ff fed8 	bl	1b54 <bt_hci_cmd_send_sync>
    1da4:	e001      	b.n	1daa <set_ad+0x86>
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
    1da6:	2037      	movs	r0, #55	; 0x37
    1da8:	4240      	negs	r0, r0
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
}
    1daa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001dac <bt_le_conn_params_valid>:
done:
	bt_conn_unref(conn);
}

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
    1dac:	b530      	push	{r4, r5, lr}
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
    1dae:	8801      	ldrh	r1, [r0, #0]
    1db0:	8843      	ldrh	r3, [r0, #2]
done:
	bt_conn_unref(conn);
}

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
    1db2:	0002      	movs	r2, r0
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
	    param->interval_min < 6 || param->interval_max > 3200) {
		return false;
    1db4:	2000      	movs	r0, #0

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
    1db6:	4299      	cmp	r1, r3
    1db8:	d819      	bhi.n	1dee <bt_le_conn_params_valid+0x42>
    1dba:	2905      	cmp	r1, #5
    1dbc:	d917      	bls.n	1dee <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    1dbe:	21c8      	movs	r1, #200	; 0xc8
    1dc0:	0109      	lsls	r1, r1, #4
    1dc2:	428b      	cmp	r3, r1
    1dc4:	d813      	bhi.n	1dee <bt_le_conn_params_valid+0x42>
		return false;
	}

	if (param->latency > 499) {
    1dc6:	24f4      	movs	r4, #244	; 0xf4
    1dc8:	8891      	ldrh	r1, [r2, #4]
    1dca:	34ff      	adds	r4, #255	; 0xff
    1dcc:	42a1      	cmp	r1, r4
    1dce:	d80e      	bhi.n	1dee <bt_le_conn_params_valid+0x42>
		return false;
	}

	if (param->timeout < 10 || param->timeout > 3200 ||
    1dd0:	88d2      	ldrh	r2, [r2, #6]
    1dd2:	4d07      	ldr	r5, [pc, #28]	; (1df0 <bt_le_conn_params_valid+0x44>)
    1dd4:	0014      	movs	r4, r2
    1dd6:	3c0a      	subs	r4, #10
    1dd8:	b2a4      	uxth	r4, r4
    1dda:	42ac      	cmp	r4, r5
    1ddc:	d807      	bhi.n	1dee <bt_le_conn_params_valid+0x42>
    1dde:	3101      	adds	r1, #1
    1de0:	434b      	muls	r3, r1
    1de2:	0092      	lsls	r2, r2, #2
    1de4:	2101      	movs	r1, #1
    1de6:	429a      	cmp	r2, r3
    1de8:	dc00      	bgt.n	1dec <bt_le_conn_params_valid+0x40>
    1dea:	1c01      	adds	r1, r0, #0
    1dec:	b2c8      	uxtb	r0, r1
	     ((1 + param->latency) * param->interval_max))) {
		return false;
	}

	return true;
}
    1dee:	bd30      	pop	{r4, r5, pc}
    1df0:	00000c76 	.word	0x00000c76

00001df4 <bt_le_scan_update>:

	return err;
}

int bt_le_scan_update(bool fast_scan)
{
    1df4:	b510      	push	{r4, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    1df6:	4c09      	ldr	r4, [pc, #36]	; (1e1c <bt_le_scan_update+0x28>)
    1df8:	2108      	movs	r1, #8
    1dfa:	346c      	adds	r4, #108	; 0x6c
    1dfc:	0020      	movs	r0, r4
    1dfe:	f7ff fe4b 	bl	1a98 <atomic_test_bit>
    1e02:	2800      	cmp	r0, #0
    1e04:	d001      	beq.n	1e0a <bt_le_scan_update+0x16>
		return 0;
    1e06:	2000      	movs	r0, #0
    1e08:	e007      	b.n	1e1a <bt_le_scan_update+0x26>
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    1e0a:	2107      	movs	r1, #7
    1e0c:	0020      	movs	r0, r4
    1e0e:	f7ff fe43 	bl	1a98 <atomic_test_bit>
    1e12:	2800      	cmp	r0, #0
    1e14:	d0f7      	beq.n	1e06 <bt_le_scan_update+0x12>
		int err;

		err = bt_hci_stop_scanning();
    1e16:	f7ff ff19 	bl	1c4c <bt_hci_stop_scanning>
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
				     0x01);
	}

	return 0;
}
    1e1a:	bd10      	pop	{r4, pc}
    1e1c:	200002f8 	.word	0x200002f8

00001e20 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    1e20:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    1e22:	b510      	push	{r4, lr}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;

	return bt_rand(addr->a.val, 6);
    1e24:	2106      	movs	r1, #6

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    1e26:	0004      	movs	r4, r0
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    1e28:	7003      	strb	r3, [r0, #0]

	return bt_rand(addr->a.val, 6);
    1e2a:	18c0      	adds	r0, r0, r3
    1e2c:	f006 f80a 	bl	7e44 <bt_rand>
int bt_addr_le_create_static(bt_addr_le_t *addr)
{
	int err;

	err = create_random_addr(addr);
	if (err) {
    1e30:	2800      	cmp	r0, #0
    1e32:	d104      	bne.n	1e3e <bt_addr_le_create_static+0x1e>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    1e34:	2240      	movs	r2, #64	; 0x40
    1e36:	79a3      	ldrb	r3, [r4, #6]
    1e38:	4252      	negs	r2, r2
    1e3a:	4313      	orrs	r3, r2
    1e3c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    1e3e:	bd10      	pop	{r4, pc}

00001e40 <bt_init>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PRIVACY */

static int bt_init(void)
{
    1e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e42:	b087      	sub	sp, #28
{
	struct net_buf *rsp;
	int err;

	/* Send HCI_RESET */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    1e44:	aa04      	add	r2, sp, #16
    1e46:	2100      	movs	r1, #0
    1e48:	48ca      	ldr	r0, [pc, #808]	; (2174 <bt_init+0x334>)
    1e4a:	f7ff fe83 	bl	1b54 <bt_hci_cmd_send_sync>
	if (err) {
    1e4e:	1e04      	subs	r4, r0, #0
    1e50:	d167      	bne.n	1f22 <bt_init+0xe2>
    1e52:	9b04      	ldr	r3, [sp, #16]
	}
}

static void hci_reset_complete(struct net_buf *buf)
{
	u8_t status = buf->data[0];
    1e54:	689b      	ldr	r3, [r3, #8]

	BT_DBG("status %u", status);

	if (status) {
    1e56:	781b      	ldrb	r3, [r3, #0]
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d106      	bne.n	1e6a <bt_init+0x2a>
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    1e5c:	48c6      	ldr	r0, [pc, #792]	; (2178 <bt_init+0x338>)

	if (status) {
		return;
	}

	scan_dev_found_cb = NULL;
    1e5e:	4ac7      	ldr	r2, [pc, #796]	; (217c <bt_init+0x33c>)
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    1e60:	2101      	movs	r1, #1
    1e62:	306c      	adds	r0, #108	; 0x6c

	if (status) {
		return;
	}

	scan_dev_found_cb = NULL;
    1e64:	6013      	str	r3, [r2, #0]
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    1e66:	f00c fe1f 	bl	eaa8 <atomic_set>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
	if (err) {
		return err;
	}
	hci_reset_complete(rsp);
	net_buf_unref(rsp);
    1e6a:	9804      	ldr	r0, [sp, #16]
    1e6c:	f00c fb28 	bl	e4c0 <net_buf_unref>

	/* Read Local Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    1e70:	aa04      	add	r2, sp, #16
    1e72:	2100      	movs	r1, #0
    1e74:	48c2      	ldr	r0, [pc, #776]	; (2180 <bt_init+0x340>)
    1e76:	f7ff fe6d 	bl	1b54 <bt_hci_cmd_send_sync>
    1e7a:	0006      	movs	r6, r0
	if (err) {
    1e7c:	1e04      	subs	r4, r0, #0
    1e7e:	d150      	bne.n	1f22 <bt_init+0xe2>
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    1e80:	4dbd      	ldr	r5, [pc, #756]	; (2178 <bt_init+0x338>)
    1e82:	9b04      	ldr	r3, [sp, #16]
    1e84:	0028      	movs	r0, r5
    1e86:	6899      	ldr	r1, [r3, #8]
    1e88:	2208      	movs	r2, #8
    1e8a:	3101      	adds	r1, #1
    1e8c:	3016      	adds	r0, #22
    1e8e:	f7fe ff02 	bl	c96 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
	if (err) {
		return err;
	}
	read_local_features_complete(rsp);
	net_buf_unref(rsp);
    1e92:	9804      	ldr	r0, [sp, #16]
    1e94:	f00c fb14 	bl	e4c0 <net_buf_unref>

	/* Read Local Version Information */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1e98:	0031      	movs	r1, r6
    1e9a:	aa04      	add	r2, sp, #16
    1e9c:	48b9      	ldr	r0, [pc, #740]	; (2184 <bt_init+0x344>)
    1e9e:	f7ff fe59 	bl	1b54 <bt_hci_cmd_send_sync>
    1ea2:	0006      	movs	r6, r0
				   &rsp);
	if (err) {
    1ea4:	1e04      	subs	r4, r0, #0
    1ea6:	d13c      	bne.n	1f22 <bt_init+0xe2>
		return err;
	}
	read_local_ver_complete(rsp);
    1ea8:	9804      	ldr	r0, [sp, #16]
    1eaa:	6883      	ldr	r3, [r0, #8]
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    1eac:	785a      	ldrb	r2, [r3, #1]
    1eae:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    1eb0:	78da      	ldrb	r2, [r3, #3]
    1eb2:	7899      	ldrb	r1, [r3, #2]
    1eb4:	0212      	lsls	r2, r2, #8
    1eb6:	430a      	orrs	r2, r1
    1eb8:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    1eba:	791a      	ldrb	r2, [r3, #4]
    1ebc:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    1ebe:	7a1a      	ldrb	r2, [r3, #8]
    1ec0:	79d9      	ldrb	r1, [r3, #7]
    1ec2:	0212      	lsls	r2, r2, #8
    1ec4:	430a      	orrs	r2, r1
    1ec6:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    1ec8:	795a      	ldrb	r2, [r3, #5]
    1eca:	799b      	ldrb	r3, [r3, #6]
    1ecc:	021b      	lsls	r3, r3, #8
    1ece:	4313      	orrs	r3, r2
    1ed0:	82ab      	strh	r3, [r5, #20]
				   &rsp);
	if (err) {
		return err;
	}
	read_local_ver_complete(rsp);
	net_buf_unref(rsp);
    1ed2:	f00c faf5 	bl	e4c0 <net_buf_unref>

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    1ed6:	0031      	movs	r1, r6
    1ed8:	aa04      	add	r2, sp, #16
    1eda:	48ab      	ldr	r0, [pc, #684]	; (2188 <bt_init+0x348>)
    1edc:	f7ff fe3a 	bl	1b54 <bt_hci_cmd_send_sync>
    1ee0:	0006      	movs	r6, r0
	if (err) {
    1ee2:	1e04      	subs	r4, r0, #0
    1ee4:	d11d      	bne.n	1f22 <bt_init+0xe2>
    1ee6:	9b04      	ldr	r3, [sp, #16]
    1ee8:	2206      	movs	r2, #6
{
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    1eea:	6899      	ldr	r1, [r3, #8]
    1eec:	1c68      	adds	r0, r5, #1
    1eee:	3101      	adds	r1, #1
    1ef0:	f7fe fed1 	bl	c96 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    1ef4:	9804      	ldr	r0, [sp, #16]
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    1ef6:	702e      	strb	r6, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    1ef8:	f00c fae2 	bl	e4c0 <net_buf_unref>

	/* Read Local Supported Commands */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    1efc:	aa04      	add	r2, sp, #16
    1efe:	0031      	movs	r1, r6
    1f00:	48a2      	ldr	r0, [pc, #648]	; (218c <bt_init+0x34c>)
    1f02:	f7ff fe27 	bl	1b54 <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    1f06:	1e04      	subs	r4, r0, #0
    1f08:	d10b      	bne.n	1f22 <bt_init+0xe2>
{
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
    1f0a:	0028      	movs	r0, r5
    1f0c:	9b04      	ldr	r3, [sp, #16]
    1f0e:	2240      	movs	r2, #64	; 0x40
    1f10:	6899      	ldr	r1, [r3, #8]
    1f12:	301e      	adds	r0, #30
    1f14:	3101      	adds	r1, #1
    1f16:	f7fe febe 	bl	c96 <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_supported_commands_complete(rsp);
	net_buf_unref(rsp);
    1f1a:	9804      	ldr	r0, [sp, #16]
    1f1c:	f00c fad0 	bl	e4c0 <net_buf_unref>
    1f20:	e002      	b.n	1f28 <bt_init+0xe8>
static int hci_init(void)
{
	int err;

	err = common_init();
	if (err) {
    1f22:	2c00      	cmp	r4, #0
    1f24:	d000      	beq.n	1f28 <bt_init+0xe8>
    1f26:	e1d6      	b.n	22d6 <bt_init+0x496>
	struct net_buf *buf;
	struct net_buf *rsp;
	int err;

	/* For now we only support LE capable controllers */
	if (!BT_FEAT_LE(bt_dev.features)) {
    1f28:	4d93      	ldr	r5, [pc, #588]	; (2178 <bt_init+0x338>)
    1f2a:	7eab      	ldrb	r3, [r5, #26]
    1f2c:	065b      	lsls	r3, r3, #25
    1f2e:	d400      	bmi.n	1f32 <bt_init+0xf2>
    1f30:	e0e6      	b.n	2100 <bt_init+0x2c0>
		BT_ERR("Non-LE capable controller detected!");
		return -ENODEV;
	}

	/* Read Low Energy Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    1f32:	aa02      	add	r2, sp, #8
    1f34:	2100      	movs	r1, #0
    1f36:	4896      	ldr	r0, [pc, #600]	; (2190 <bt_init+0x350>)
    1f38:	f7ff fe0c 	bl	1b54 <bt_hci_cmd_send_sync>
    1f3c:	0006      	movs	r6, r0
				   &rsp);
	if (err) {
    1f3e:	1e04      	subs	r4, r0, #0
    1f40:	d000      	beq.n	1f44 <bt_init+0x104>
    1f42:	e0e0      	b.n	2106 <bt_init+0x2c6>
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    1f44:	0028      	movs	r0, r5
    1f46:	9b02      	ldr	r3, [sp, #8]
    1f48:	2208      	movs	r2, #8
    1f4a:	6899      	ldr	r1, [r3, #8]
    1f4c:	3070      	adds	r0, #112	; 0x70
    1f4e:	3101      	adds	r1, #1
    1f50:	f7fe fea1 	bl	c96 <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_le_features_complete(rsp);
	net_buf_unref(rsp);
    1f54:	9802      	ldr	r0, [sp, #8]
    1f56:	f00c fab3 	bl	e4c0 <net_buf_unref>

#if defined(CONFIG_BLUETOOTH_CONN)
	/* Read LE Buffer Size */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    1f5a:	aa02      	add	r2, sp, #8
    1f5c:	0031      	movs	r1, r6
    1f5e:	488d      	ldr	r0, [pc, #564]	; (2194 <bt_init+0x354>)
    1f60:	f7ff fdf8 	bl	1b54 <bt_hci_cmd_send_sync>
				   NULL, &rsp);
	if (err) {
    1f64:	1e04      	subs	r4, r0, #0
    1f66:	d000      	beq.n	1f6a <bt_init+0x12a>
    1f68:	e0cd      	b.n	2106 <bt_init+0x2c6>
    1f6a:	9b02      	ldr	r3, [sp, #8]
    1f6c:	6899      	ldr	r1, [r3, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
	u8_t le_max_num;

	BT_DBG("status %u", rp->status);

	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    1f6e:	788b      	ldrb	r3, [r1, #2]
    1f70:	784a      	ldrb	r2, [r1, #1]
    1f72:	021b      	lsls	r3, r3, #8
    1f74:	4313      	orrs	r3, r2
    1f76:	002a      	movs	r2, r5
    1f78:	3280      	adds	r2, #128	; 0x80
    1f7a:	8013      	strh	r3, [r2, #0]
	if (!bt_dev.le.mtu) {
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d00a      	beq.n	1f96 <bt_init+0x156>
	}

	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);

	le_max_num = min(rp->le_max_num, CONFIG_BLUETOOTH_CONN_TX_MAX);
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    1f80:	78cb      	ldrb	r3, [r1, #3]
    1f82:	1c19      	adds	r1, r3, #0
    1f84:	2b02      	cmp	r3, #2
    1f86:	d900      	bls.n	1f8a <bt_init+0x14a>
    1f88:	2102      	movs	r1, #2
    1f8a:	0028      	movs	r0, r5
    1f8c:	b2c9      	uxtb	r1, r1
    1f8e:	3084      	adds	r0, #132	; 0x84
    1f90:	000a      	movs	r2, r1
    1f92:	f00d fc45 	bl	f820 <k_sem_init>
				   NULL, &rsp);
	if (err) {
		return err;
	}
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    1f96:	9802      	ldr	r0, [sp, #8]
    1f98:	f00c fa92 	bl	e4c0 <net_buf_unref>
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
    1f9c:	2320      	movs	r3, #32
    1f9e:	7eac      	ldrb	r4, [r5, #26]
    1fa0:	401c      	ands	r4, r3
    1fa2:	d005      	beq.n	1fb0 <bt_init+0x170>
			return err;
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    1fa4:	002b      	movs	r3, r5
    1fa6:	333a      	adds	r3, #58	; 0x3a
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	071b      	lsls	r3, r3, #28
    1fac:	d53c      	bpl.n	2028 <bt_init+0x1e8>
    1fae:	e015      	b.n	1fdc <bt_init+0x19c>
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    1fb0:	2102      	movs	r1, #2
    1fb2:	4879      	ldr	r0, [pc, #484]	; (2198 <bt_init+0x358>)
    1fb4:	f7ff fda8 	bl	1b08 <bt_hci_cmd_create>
    1fb8:	1e06      	subs	r6, r0, #0
					sizeof(*cp_le));
		if (!buf) {
    1fba:	d100      	bne.n	1fbe <bt_init+0x17e>
    1fbc:	e17c      	b.n	22b8 <bt_init+0x478>
			return -ENOBUFS;
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));
    1fbe:	2102      	movs	r1, #2
    1fc0:	3008      	adds	r0, #8
    1fc2:	f00c fa9f 	bl	e504 <net_buf_simple_add>

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    1fc6:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    1fc8:	7044      	strb	r4, [r0, #1]
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    1fca:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    1fcc:	0022      	movs	r2, r4
    1fce:	0031      	movs	r1, r6
    1fd0:	4871      	ldr	r0, [pc, #452]	; (2198 <bt_init+0x358>)
    1fd2:	f7ff fdbf 	bl	1b54 <bt_hci_cmd_send_sync>
					   NULL);
		if (err) {
    1fd6:	2800      	cmp	r0, #0
    1fd8:	d0e4      	beq.n	1fa4 <bt_init+0x164>
    1fda:	e093      	b.n	2104 <bt_init+0x2c4>
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    1fdc:	aa02      	add	r2, sp, #8
    1fde:	2100      	movs	r1, #0
    1fe0:	486e      	ldr	r0, [pc, #440]	; (219c <bt_init+0x35c>)
    1fe2:	f7ff fdb7 	bl	1b54 <bt_hci_cmd_send_sync>
					   &rsp);
		if (err) {
    1fe6:	1e04      	subs	r4, r0, #0
    1fe8:	d000      	beq.n	1fec <bt_init+0x1ac>
    1fea:	e08c      	b.n	2106 <bt_init+0x2c6>
			return err;
		}
		le_read_supp_states_complete(rsp);
    1fec:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    1fee:	6883      	ldr	r3, [r0, #8]
    1ff0:	1c5f      	adds	r7, r3, #1
    1ff2:	7859      	ldrb	r1, [r3, #1]
    1ff4:	789b      	ldrb	r3, [r3, #2]
    1ff6:	78be      	ldrb	r6, [r7, #2]
    1ff8:	021b      	lsls	r3, r3, #8
    1ffa:	430b      	orrs	r3, r1
    1ffc:	0436      	lsls	r6, r6, #16
    1ffe:	001a      	movs	r2, r3
    2000:	0033      	movs	r3, r6
    2002:	78fe      	ldrb	r6, [r7, #3]
    2004:	4313      	orrs	r3, r2
    2006:	0636      	lsls	r6, r6, #24
    2008:	797a      	ldrb	r2, [r7, #5]
    200a:	793c      	ldrb	r4, [r7, #4]
    200c:	431e      	orrs	r6, r3
    200e:	79bb      	ldrb	r3, [r7, #6]
    2010:	0212      	lsls	r2, r2, #8
    2012:	4322      	orrs	r2, r4
    2014:	041b      	lsls	r3, r3, #16
    2016:	4313      	orrs	r3, r2
    2018:	001a      	movs	r2, r3
    201a:	79fb      	ldrb	r3, [r7, #7]
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    201c:	67ae      	str	r6, [r5, #120]	; 0x78
    201e:	061b      	lsls	r3, r3, #24
    2020:	4313      	orrs	r3, r2
    2022:	67eb      	str	r3, [r5, #124]	; 0x7c
					   &rsp);
		if (err) {
			return err;
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
    2024:	f00c fa4c 	bl	e4c0 <net_buf_unref>
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN) &&
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2028:	002b      	movs	r3, r5
    202a:	3370      	adds	r3, #112	; 0x70
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN) &&
    202c:	781b      	ldrb	r3, [r3, #0]
    202e:	069b      	lsls	r3, r3, #26
    2030:	d52e      	bpl.n	2090 <bt_init+0x250>
		struct bt_hci_cp_le_write_default_data_len *cp;
		struct bt_hci_rp_le_read_max_data_len *rp;
		struct net_buf *buf, *rsp;
		u16_t tx_octets, tx_time;

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    2032:	aa04      	add	r2, sp, #16
    2034:	2100      	movs	r1, #0
    2036:	485a      	ldr	r0, [pc, #360]	; (21a0 <bt_init+0x360>)
    2038:	f7ff fd8c 	bl	1b54 <bt_hci_cmd_send_sync>
    203c:	1e04      	subs	r4, r0, #0
					   &rsp);
		if (err) {
    203e:	d162      	bne.n	2106 <bt_init+0x2c6>
			return err;
		}

		rp = (void *)rsp->data;
    2040:	9804      	ldr	r0, [sp, #16]
    2042:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2044:	789e      	ldrb	r6, [r3, #2]
    2046:	785a      	ldrb	r2, [r3, #1]
    2048:	0236      	lsls	r6, r6, #8
    204a:	4316      	orrs	r6, r2
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    204c:	78da      	ldrb	r2, [r3, #3]
    204e:	791b      	ldrb	r3, [r3, #4]
    2050:	021b      	lsls	r3, r3, #8
    2052:	4313      	orrs	r3, r2
    2054:	9301      	str	r3, [sp, #4]
		net_buf_unref(rsp);
    2056:	f00c fa33 	bl	e4c0 <net_buf_unref>

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    205a:	2104      	movs	r1, #4
    205c:	4851      	ldr	r0, [pc, #324]	; (21a4 <bt_init+0x364>)
    205e:	f7ff fd53 	bl	1b08 <bt_hci_cmd_create>
    2062:	1e07      	subs	r7, r0, #0
					sizeof(*cp));
		if (!buf) {
    2064:	d100      	bne.n	2068 <bt_init+0x228>
    2066:	e127      	b.n	22b8 <bt_init+0x478>
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    2068:	2104      	movs	r1, #4
    206a:	3008      	adds	r0, #8
    206c:	f00c fa4a 	bl	e504 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2070:	466b      	mov	r3, sp
    2072:	791b      	ldrb	r3, [r3, #4]
		if (!buf) {
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2074:	7006      	strb	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2076:	7083      	strb	r3, [r0, #2]
    2078:	9b01      	ldr	r3, [sp, #4]
		if (!buf) {
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    207a:	0a36      	lsrs	r6, r6, #8
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    207c:	0a1b      	lsrs	r3, r3, #8
		if (!buf) {
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    207e:	7046      	strb	r6, [r0, #1]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2080:	70c3      	strb	r3, [r0, #3]

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2082:	0022      	movs	r2, r4
    2084:	0039      	movs	r1, r7
    2086:	4847      	ldr	r0, [pc, #284]	; (21a4 <bt_init+0x364>)
    2088:	f7ff fd64 	bl	1b54 <bt_hci_cmd_send_sync>
					   buf, NULL);
		if (err) {
    208c:	2800      	cmp	r0, #0
    208e:	d139      	bne.n	2104 <bt_init+0x2c4>
	struct bt_hci_cp_le_set_event_mask *cp_mask;
	struct net_buf *buf;
	u64_t mask = 0;

	/* Set LE event mask */
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2090:	2108      	movs	r1, #8
    2092:	4845      	ldr	r0, [pc, #276]	; (21a8 <bt_init+0x368>)
    2094:	f7ff fd38 	bl	1b08 <bt_hci_cmd_create>
    2098:	1e04      	subs	r4, r0, #0
	if (!buf) {
    209a:	d100      	bne.n	209e <bt_init+0x25e>
    209c:	e10c      	b.n	22b8 <bt_init+0x478>
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    209e:	2108      	movs	r1, #8
    20a0:	1840      	adds	r0, r0, r1
    20a2:	f00c fa2f 	bl	e504 <net_buf_simple_add>

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    20a6:	002b      	movs	r3, r5
    20a8:	3370      	adds	r3, #112	; 0x70
    20aa:	781a      	ldrb	r2, [r3, #0]
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    20ac:	230f      	movs	r3, #15
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    20ae:	0791      	lsls	r1, r2, #30
    20b0:	d500      	bpl.n	20b4 <bt_init+0x274>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    20b2:	3320      	adds	r3, #32
		}
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    20b4:	0692      	lsls	r2, r2, #26
    20b6:	d501      	bpl.n	20bc <bt_init+0x27c>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    20b8:	2240      	movs	r2, #64	; 0x40
    20ba:	4313      	orrs	r3, r2
		}
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    20bc:	002a      	movs	r2, r5
    20be:	3271      	adds	r2, #113	; 0x71
    20c0:	7811      	ldrb	r1, [r2, #0]
    20c2:	2209      	movs	r2, #9
    20c4:	4211      	tst	r1, r2
    20c6:	d002      	beq.n	20ce <bt_init+0x28e>
		    BT_FEAT_LE_PHY_CODED(bt_dev.le.features)) {
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    20c8:	2280      	movs	r2, #128	; 0x80
    20ca:	0112      	lsls	r2, r2, #4
    20cc:	4313      	orrs	r3, r2

	/*
	 * If "LE Read Local P-256 Public Key" and "LE Generate DH Key" are
	 * supported we need to enable events generated by those commands.
	 */
	if ((bt_dev.supported_commands[34] & 0x02) &&
    20ce:	002a      	movs	r2, r5
    20d0:	3240      	adds	r2, #64	; 0x40
    20d2:	7811      	ldrb	r1, [r2, #0]
    20d4:	2206      	movs	r2, #6
    20d6:	400a      	ands	r2, r1
    20d8:	2a06      	cmp	r2, #6
    20da:	d102      	bne.n	20e2 <bt_init+0x2a2>
	    (bt_dev.supported_commands[34] & 0x04)) {
		mask |= BT_EVT_MASK_LE_P256_PUBLIC_KEY_COMPLETE;
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    20dc:	327b      	adds	r2, #123	; 0x7b
    20de:	32ff      	adds	r2, #255	; 0xff
    20e0:	4313      	orrs	r3, r2
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    20e2:	2200      	movs	r2, #0
    20e4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    20e6:	0a1b      	lsrs	r3, r3, #8
    20e8:	7043      	strb	r3, [r0, #1]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    20ea:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    20ec:	70c2      	strb	r2, [r0, #3]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    20ee:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    20f0:	7142      	strb	r2, [r0, #5]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    20f2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    20f4:	71c2      	strb	r2, [r0, #7]
	}

	sys_put_le64(mask, cp_mask->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    20f6:	0021      	movs	r1, r4
    20f8:	482b      	ldr	r0, [pc, #172]	; (21a8 <bt_init+0x368>)
    20fa:	f7ff fd2b 	bl	1b54 <bt_hci_cmd_send_sync>
    20fe:	e001      	b.n	2104 <bt_init+0x2c4>
	int err;

	/* For now we only support LE capable controllers */
	if (!BT_FEAT_LE(bt_dev.features)) {
		BT_ERR("Non-LE capable controller detected!");
		return -ENODEV;
    2100:	2413      	movs	r4, #19
    2102:	e0da      	b.n	22ba <bt_init+0x47a>
		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
		cp_le->simul = 0x00;
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
					   NULL);
		if (err) {
    2104:	0004      	movs	r4, r0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    2106:	2c00      	cmp	r4, #0
    2108:	d000      	beq.n	210c <bt_init+0x2cc>
    210a:	e0e4      	b.n	22d6 <bt_init+0x496>
		return err;
	}

	if (BT_FEAT_BREDR(bt_dev.features)) {
    210c:	7eab      	ldrb	r3, [r5, #26]
    210e:	069b      	lsls	r3, r3, #26
    2110:	d506      	bpl.n	2120 <bt_init+0x2e0>
{
	struct bt_hci_cp_set_event_mask *ev;
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2112:	2108      	movs	r1, #8
    2114:	4825      	ldr	r0, [pc, #148]	; (21ac <bt_init+0x36c>)
    2116:	f7ff fcf7 	bl	1b08 <bt_hci_cmd_create>
    211a:	1e04      	subs	r4, r0, #0
	if (!buf) {
    211c:	d14a      	bne.n	21b4 <bt_init+0x374>
    211e:	e0cb      	b.n	22b8 <bt_init+0x478>
{
#if defined(CONFIG_BLUETOOTH_CONN)
	struct net_buf *rsp;
	int err;

	if (bt_dev.le.mtu) {
    2120:	002e      	movs	r6, r5
    2122:	3680      	adds	r6, #128	; 0x80
    2124:	8833      	ldrh	r3, [r6, #0]
    2126:	2b00      	cmp	r3, #0
    2128:	d1f3      	bne.n	2112 <bt_init+0x2d2>
		return 0;
	}

	/* Use BR/EDR buffer size if LE reports zero buffers */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    212a:	0021      	movs	r1, r4
    212c:	aa04      	add	r2, sp, #16
    212e:	4820      	ldr	r0, [pc, #128]	; (21b0 <bt_init+0x370>)
    2130:	f7ff fd10 	bl	1b54 <bt_hci_cmd_send_sync>
	if (err) {
    2134:	1e04      	subs	r4, r0, #0
    2136:	d000      	beq.n	213a <bt_init+0x2fa>
    2138:	e0cd      	b.n	22d6 <bt_init+0x496>
	u16_t pkts;

	BT_DBG("status %u", rp->status);

	/* If LE-side has buffers we can ignore the BR/EDR values */
	if (bt_dev.le.mtu) {
    213a:	8833      	ldrh	r3, [r6, #0]
    213c:	2b00      	cmp	r3, #0
    213e:	d114      	bne.n	216a <bt_init+0x32a>
    2140:	9b04      	ldr	r3, [sp, #16]
    2142:	689b      	ldr	r3, [r3, #8]
		return;
	}

	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2144:	789a      	ldrb	r2, [r3, #2]
    2146:	7859      	ldrb	r1, [r3, #1]
    2148:	0212      	lsls	r2, r2, #8
    214a:	430a      	orrs	r2, r1
    214c:	8032      	strh	r2, [r6, #0]
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    214e:	791a      	ldrb	r2, [r3, #4]
    2150:	795b      	ldrb	r3, [r3, #5]
    2152:	021b      	lsls	r3, r3, #8
    2154:	4313      	orrs	r3, r2

	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);

	pkts = min(pkts, CONFIG_BLUETOOTH_CONN_TX_MAX);

	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2156:	1c19      	adds	r1, r3, #0
    2158:	2b02      	cmp	r3, #2
    215a:	d900      	bls.n	215e <bt_init+0x31e>
    215c:	2102      	movs	r1, #2
    215e:	0028      	movs	r0, r5
    2160:	b289      	uxth	r1, r1
    2162:	3084      	adds	r0, #132	; 0x84
    2164:	000a      	movs	r2, r1
    2166:	f00d fb5b 	bl	f820 <k_sem_init>
	if (err) {
		return err;
	}

	read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    216a:	9804      	ldr	r0, [sp, #16]
    216c:	f00c f9a8 	bl	e4c0 <net_buf_unref>
    2170:	e7cf      	b.n	2112 <bt_init+0x2d2>
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	00000c03 	.word	0x00000c03
    2178:	200002f8 	.word	0x200002f8
    217c:	200008a0 	.word	0x200008a0
    2180:	00001003 	.word	0x00001003
    2184:	00001001 	.word	0x00001001
    2188:	00001009 	.word	0x00001009
    218c:	00001002 	.word	0x00001002
    2190:	00002003 	.word	0x00002003
    2194:	00002002 	.word	0x00002002
    2198:	00000c6d 	.word	0x00000c6d
    219c:	0000201c 	.word	0x0000201c
    21a0:	0000202f 	.word	0x0000202f
    21a4:	00002024 	.word	0x00002024
    21a8:	00002001 	.word	0x00002001
    21ac:	00000c01 	.word	0x00000c01
    21b0:	00001005 	.word	0x00001005
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
	}

	ev = net_buf_add(buf, sizeof(*ev));
    21b4:	2108      	movs	r1, #8
    21b6:	3008      	adds	r0, #8
    21b8:	f00c f9a4 	bl	e504 <net_buf_simple_add>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    21bc:	2310      	movs	r3, #16
    21be:	2200      	movs	r2, #0
    21c0:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    21c2:	3378      	adds	r3, #120	; 0x78
    21c4:	7043      	strb	r3, [r0, #1]
    21c6:	3b86      	subs	r3, #134	; 0x86
    21c8:	70c3      	strb	r3, [r0, #3]
    21ca:	331e      	adds	r3, #30
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    21cc:	7082      	strb	r2, [r0, #2]
    21ce:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    21d0:	7142      	strb	r2, [r0, #5]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    21d2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    21d4:	71c3      	strb	r3, [r0, #7]
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
	}

	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    21d6:	0021      	movs	r1, r4
    21d8:	4840      	ldr	r0, [pc, #256]	; (22dc <bt_init+0x49c>)
    21da:	f7ff fcbb 	bl	1b54 <bt_hci_cmd_send_sync>
    21de:	1e04      	subs	r4, r0, #0
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    21e0:	d179      	bne.n	22d6 <bt_init+0x496>
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    21e2:	0001      	movs	r1, r0
    21e4:	2207      	movs	r2, #7
    21e6:	a804      	add	r0, sp, #16
    21e8:	f7fe fd7f 	bl	cea <memset>
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    21ec:	2207      	movs	r2, #7
    21ee:	a904      	add	r1, sp, #16
    21f0:	0028      	movs	r0, r5
    21f2:	f7fe fd3b 	bl	c6c <memcmp>
    21f6:	2800      	cmp	r0, #0
    21f8:	d104      	bne.n	2204 <bt_init+0x3c4>

static int set_static_addr(void)
{
	int err;

	if (bt_storage) {
    21fa:	4e39      	ldr	r6, [pc, #228]	; (22e0 <bt_init+0x4a0>)
    21fc:	6833      	ldr	r3, [r6, #0]
    21fe:	2b00      	cmp	r3, #0
    2200:	d10d      	bne.n	221e <bt_init+0x3de>
    2202:	e014      	b.n	222e <bt_init+0x3ee>
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2204:	2207      	movs	r2, #7
    2206:	4937      	ldr	r1, [pc, #220]	; (22e4 <bt_init+0x4a4>)
    2208:	a802      	add	r0, sp, #8
    220a:	f7fe fd44 	bl	c96 <memcpy>
    220e:	2207      	movs	r2, #7
    2210:	a902      	add	r1, sp, #8
    2212:	0028      	movs	r0, r5
    2214:	f7fe fd2a 	bl	c6c <memcmp>
	err = set_event_mask();
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2218:	2800      	cmp	r0, #0
    221a:	d0ee      	beq.n	21fa <bt_init+0x3ba>
    221c:	e04f      	b.n	22be <bt_init+0x47e>
	int err;

	if (bt_storage) {
		ssize_t ret;

		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    221e:	2100      	movs	r1, #0
    2220:	681c      	ldr	r4, [r3, #0]
    2222:	002a      	movs	r2, r5
    2224:	2307      	movs	r3, #7
    2226:	0008      	movs	r0, r1
    2228:	47a0      	blx	r4
				       &bt_dev.id_addr, sizeof(bt_dev.id_addr));
		if (ret == sizeof(bt_dev.id_addr)) {
    222a:	2807      	cmp	r0, #7
    222c:	d02f      	beq.n	228e <bt_init+0x44e>
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    222e:	4b2e      	ldr	r3, [pc, #184]	; (22e8 <bt_init+0x4a8>)
    2230:	6819      	ldr	r1, [r3, #0]
    2232:	001a      	movs	r2, r3
    2234:	1c4b      	adds	r3, r1, #1
    2236:	d105      	bne.n	2244 <bt_init+0x404>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    2238:	4b2c      	ldr	r3, [pc, #176]	; (22ec <bt_init+0x4ac>)
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    223a:	492d      	ldr	r1, [pc, #180]	; (22f0 <bt_init+0x4b0>)
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    223c:	681b      	ldr	r3, [r3, #0]
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    223e:	b29b      	uxth	r3, r3
    2240:	428b      	cmp	r3, r1
    2242:	d017      	beq.n	2274 <bt_init+0x434>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    2244:	4b2b      	ldr	r3, [pc, #172]	; (22f4 <bt_init+0x4b4>)
    2246:	6819      	ldr	r1, [r3, #0]
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    2248:	2301      	movs	r3, #1
    224a:	4219      	tst	r1, r3
    224c:	d012      	beq.n	2274 <bt_init+0x434>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    224e:	702b      	strb	r3, [r5, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
    2250:	6813      	ldr	r3, [r2, #0]
    2252:	0a1a      	lsrs	r2, r3, #8
    2254:	70aa      	strb	r2, [r5, #2]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    2256:	2240      	movs	r2, #64	; 0x40
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2258:	706b      	strb	r3, [r5, #1]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    225a:	0c1b      	lsrs	r3, r3, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    225c:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    225e:	0a1b      	lsrs	r3, r3, #8
    2260:	712b      	strb	r3, [r5, #4]
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    2262:	4b22      	ldr	r3, [pc, #136]	; (22ec <bt_init+0x4ac>)
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    2264:	4252      	negs	r2, r2
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    2266:	681b      	ldr	r3, [r3, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2268:	716b      	strb	r3, [r5, #5]
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    226a:	b29b      	uxth	r3, r3
    226c:	0a1b      	lsrs	r3, r3, #8
    226e:	4313      	orrs	r3, r2
    2270:	71ab      	strb	r3, [r5, #6]
    2272:	e00c      	b.n	228e <bt_init+0x44e>
	}
#endif /* CONFIG_SOC_FAMILY_NRF5 */

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2274:	0028      	movs	r0, r5
    2276:	f7ff fdd3 	bl	1e20 <bt_addr_le_create_static>
	if (err) {
    227a:	1e04      	subs	r4, r0, #0
    227c:	d12b      	bne.n	22d6 <bt_init+0x496>
		return err;
	}

	if (bt_storage) {
    227e:	6833      	ldr	r3, [r6, #0]
    2280:	2b00      	cmp	r3, #0
    2282:	d004      	beq.n	228e <bt_init+0x44e>
		ssize_t ret;

		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2284:	685c      	ldr	r4, [r3, #4]
    2286:	002a      	movs	r2, r5
    2288:	2307      	movs	r3, #7
    228a:	0001      	movs	r1, r0
    228c:	47a0      	blx	r4
	} else {
		BT_WARN("Using temporary static random address");
	}

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    228e:	782b      	ldrb	r3, [r5, #0]
    2290:	2b01      	cmp	r3, #1
    2292:	d10f      	bne.n	22b4 <bt_init+0x474>
    2294:	223f      	movs	r2, #63	; 0x3f
    2296:	79ab      	ldrb	r3, [r5, #6]
    2298:	4393      	bics	r3, r2
    229a:	2bc0      	cmp	r3, #192	; 0xc0
    229c:	d10a      	bne.n	22b4 <bt_init+0x474>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
	}

	err = set_random_address(&bt_dev.id_addr.a);
    229e:	1c68      	adds	r0, r5, #1
    22a0:	f7ff fc94 	bl	1bcc <set_random_address>
	if (err) {
    22a4:	1e04      	subs	r4, r0, #0
    22a6:	d116      	bne.n	22d6 <bt_init+0x496>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    22a8:	0028      	movs	r0, r5
    22aa:	2104      	movs	r1, #4
    22ac:	306c      	adds	r0, #108	; 0x6c
    22ae:	f00c fc05 	bl	eabc <atomic_or>
    22b2:	e004      	b.n	22be <bt_init+0x47e>

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
    22b4:	2416      	movs	r4, #22
    22b6:	e000      	b.n	22ba <bt_init+0x47a>
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
    22b8:	2437      	movs	r4, #55	; 0x37
    22ba:	4264      	negs	r4, r4
    22bc:	e00b      	b.n	22d6 <bt_init+0x496>
	if (err) {
		return err;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		err = bt_conn_init();
    22be:	f001 fac3 	bl	3848 <bt_conn_init>
    22c2:	1e04      	subs	r4, r0, #0
		if (err) {
    22c4:	d107      	bne.n	22d6 <bt_init+0x496>
    22c6:	0028      	movs	r0, r5
    22c8:	2102      	movs	r1, #2
    22ca:	306c      	adds	r0, #108	; 0x6c
    22cc:	f00c fbf6 	bl	eabc <atomic_or>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);
    22d0:	0020      	movs	r0, r4
    22d2:	f7ff fd8f 	bl	1df4 <bt_le_scan_update>

	return 0;
}
    22d6:	0020      	movs	r0, r4
    22d8:	b007      	add	sp, #28
    22da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22dc:	00000c01 	.word	0x00000c01
    22e0:	20001b44 	.word	0x20001b44
    22e4:	0000ff94 	.word	0x0000ff94
    22e8:	100000a4 	.word	0x100000a4
    22ec:	100000a8 	.word	0x100000a8
    22f0:	0000ffff 	.word	0x0000ffff
    22f4:	100000a0 	.word	0x100000a0

000022f8 <init_work>:

static void init_work(struct k_work *work)
{
    22f8:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    22fa:	f7ff fda1 	bl	1e40 <bt_init>
	if (ready_cb) {
    22fe:	4b03      	ldr	r3, [pc, #12]	; (230c <init_work+0x14>)
    2300:	681b      	ldr	r3, [r3, #0]
    2302:	2b00      	cmp	r3, #0
    2304:	d000      	beq.n	2308 <init_work+0x10>
		ready_cb(err);
    2306:	4798      	blx	r3
	}
}
    2308:	bd10      	pop	{r4, pc}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	2000089c 	.word	0x2000089c

00002310 <bt_send>:

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2310:	4b03      	ldr	r3, [pc, #12]	; (2320 <bt_send+0x10>)

	return 0;
}

int bt_send(struct net_buf *buf)
{
    2312:	b510      	push	{r4, lr}

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2314:	33d8      	adds	r3, #216	; 0xd8
    2316:	681b      	ldr	r3, [r3, #0]
    2318:	68db      	ldr	r3, [r3, #12]
    231a:	4798      	blx	r3
}
    231c:	bd10      	pop	{r4, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	200002f8 	.word	0x200002f8

00002324 <bt_hci_cmd_send>:

	return buf;
}

int bt_hci_cmd_send(u16_t opcode, struct net_buf *buf)
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	0005      	movs	r5, r0
    2328:	1e0c      	subs	r4, r1, #0
	if (!buf) {
    232a:	d103      	bne.n	2334 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    232c:	f7ff fbec 	bl	1b08 <bt_hci_cmd_create>
    2330:	1e04      	subs	r4, r0, #0
		if (!buf) {
    2332:	d015      	beq.n	2360 <bt_hci_cmd_send+0x3c>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);

	/* Host Number of Completed Packets can ignore the ncmd value
	 * and does not generate any cmd complete/status events.
	 */
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2334:	4b0c      	ldr	r3, [pc, #48]	; (2368 <bt_hci_cmd_send+0x44>)
    2336:	429d      	cmp	r5, r3
    2338:	d10b      	bne.n	2352 <bt_hci_cmd_send+0x2e>
		int err;

		err = bt_send(buf);
    233a:	0020      	movs	r0, r4
    233c:	f7ff ffe8 	bl	2310 <bt_send>
    2340:	0005      	movs	r5, r0
    2342:	2000      	movs	r0, #0
		if (err) {
    2344:	4285      	cmp	r5, r0
    2346:	d00d      	beq.n	2364 <bt_hci_cmd_send+0x40>
			BT_ERR("Unable to send to driver (err %d)", err);
			net_buf_unref(buf);
    2348:	0020      	movs	r0, r4
    234a:	f00c f8b9 	bl	e4c0 <net_buf_unref>
    234e:	0028      	movs	r0, r5
    2350:	e008      	b.n	2364 <bt_hci_cmd_send+0x40>
		}

		return err;
	}

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2352:	4806      	ldr	r0, [pc, #24]	; (236c <bt_hci_cmd_send+0x48>)
    2354:	0021      	movs	r1, r4
    2356:	30c4      	adds	r0, #196	; 0xc4
    2358:	f00c f8a3 	bl	e4a2 <net_buf_put>

	return 0;
    235c:	2000      	movs	r0, #0
    235e:	e001      	b.n	2364 <bt_hci_cmd_send+0x40>
int bt_hci_cmd_send(u16_t opcode, struct net_buf *buf)
{
	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    2360:	2037      	movs	r0, #55	; 0x37
    2362:	4240      	negs	r0, r0
	}

	net_buf_put(&bt_dev.cmd_tx_queue, buf);

	return 0;
}
    2364:	bd70      	pop	{r4, r5, r6, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	00000c35 	.word	0x00000c35
    236c:	200002f8 	.word	0x200002f8

00002370 <hci_le_set_phy.isra.24>:
	}

	return 0;
}

static int hci_le_set_phy(struct bt_conn *conn)
    2370:	b570      	push	{r4, r5, r6, lr}
{
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2372:	2107      	movs	r1, #7
	}

	return 0;
}

static int hci_le_set_phy(struct bt_conn *conn)
    2374:	0004      	movs	r4, r0
{
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2376:	480e      	ldr	r0, [pc, #56]	; (23b0 <hci_le_set_phy.isra.24+0x40>)
    2378:	f7ff fbc6 	bl	1b08 <bt_hci_cmd_create>
    237c:	1e05      	subs	r5, r0, #0
	if (!buf) {
    237e:	d014      	beq.n	23aa <hci_le_set_phy.isra.24+0x3a>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2380:	2107      	movs	r1, #7
    2382:	3008      	adds	r0, #8
    2384:	f00c f8be 	bl	e504 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2388:	8823      	ldrh	r3, [r4, #0]
    238a:	2400      	movs	r4, #0
    238c:	7003      	strb	r3, [r0, #0]
    238e:	0a1b      	lsrs	r3, r3, #8
    2390:	7043      	strb	r3, [r0, #1]
	cp->all_phys = 0;
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2392:	2302      	movs	r3, #2
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
	cp->all_phys = 0;
    2394:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2396:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2398:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    239a:	7144      	strb	r4, [r0, #5]
    239c:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    239e:	0029      	movs	r1, r5
    23a0:	4803      	ldr	r0, [pc, #12]	; (23b0 <hci_le_set_phy.isra.24+0x40>)
    23a2:	f7ff ffbf 	bl	2324 <bt_hci_cmd_send>

	return 0;
    23a6:	0020      	movs	r0, r4
    23a8:	e001      	b.n	23ae <hci_le_set_phy.isra.24+0x3e>
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    23aa:	2037      	movs	r0, #55	; 0x37
    23ac:	4240      	negs	r0, r0
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);

	return 0;
}
    23ae:	bd70      	pop	{r4, r5, r6, pc}
    23b0:	00002032 	.word	0x00002032

000023b4 <hci_le_set_data_len.isra.25>:
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);

	return 0;
}

static int hci_le_set_data_len(struct bt_conn *conn)
    23b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    23b6:	0007      	movs	r7, r0
	struct bt_hci_cp_le_set_data_len *cp;
	struct net_buf *buf, *rsp;
	u16_t tx_octets, tx_time;
	int err;

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    23b8:	aa01      	add	r2, sp, #4
    23ba:	2100      	movs	r1, #0
    23bc:	4816      	ldr	r0, [pc, #88]	; (2418 <hci_le_set_data_len.isra.25+0x64>)
    23be:	f7ff fbc9 	bl	1b54 <bt_hci_cmd_send_sync>
	if (err) {
    23c2:	2800      	cmp	r0, #0
    23c4:	d126      	bne.n	2414 <hci_le_set_data_len.isra.25+0x60>
		return err;
	}

	rp = (void *)rsp->data;
    23c6:	9801      	ldr	r0, [sp, #4]
    23c8:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    23ca:	789d      	ldrb	r5, [r3, #2]
    23cc:	785a      	ldrb	r2, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    23ce:	791c      	ldrb	r4, [r3, #4]
	if (err) {
		return err;
	}

	rp = (void *)rsp->data;
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    23d0:	022d      	lsls	r5, r5, #8
    23d2:	4315      	orrs	r5, r2
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    23d4:	78da      	ldrb	r2, [r3, #3]
    23d6:	0224      	lsls	r4, r4, #8
    23d8:	4314      	orrs	r4, r2
	net_buf_unref(rsp);
    23da:	f00c f871 	bl	e4c0 <net_buf_unref>

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    23de:	2106      	movs	r1, #6
    23e0:	480e      	ldr	r0, [pc, #56]	; (241c <hci_le_set_data_len.isra.25+0x68>)
    23e2:	f7ff fb91 	bl	1b08 <bt_hci_cmd_create>
    23e6:	1e06      	subs	r6, r0, #0
	if (!buf) {
    23e8:	d012      	beq.n	2410 <hci_le_set_data_len.isra.25+0x5c>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    23ea:	2106      	movs	r1, #6
    23ec:	3008      	adds	r0, #8
    23ee:	f00c f889 	bl	e504 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    23f2:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    23f4:	7085      	strb	r5, [r0, #2]
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    23f6:	7003      	strb	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    23f8:	0a2d      	lsrs	r5, r5, #8
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    23fa:	0a1b      	lsrs	r3, r3, #8
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
	cp->tx_time = sys_cpu_to_le16(tx_time);
    23fc:	7104      	strb	r4, [r0, #4]
    23fe:	0a24      	lsrs	r4, r4, #8
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    2400:	7043      	strb	r3, [r0, #1]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2402:	70c5      	strb	r5, [r0, #3]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2404:	7144      	strb	r4, [r0, #5]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2406:	0031      	movs	r1, r6
    2408:	4804      	ldr	r0, [pc, #16]	; (241c <hci_le_set_data_len.isra.25+0x68>)
    240a:	f7ff ff8b 	bl	2324 <bt_hci_cmd_send>
    240e:	e001      	b.n	2414 <hci_le_set_data_len.isra.25+0x60>
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
	net_buf_unref(rsp);

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    2410:	2037      	movs	r0, #55	; 0x37
    2412:	4240      	negs	r0, r0
	if (err) {
		return err;
	}

	return 0;
}
    2414:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	0000202f 	.word	0x0000202f
    241c:	00002022 	.word	0x00002022

00002420 <le_conn_param_neg_reply>:

	return true;
}

static int le_conn_param_neg_reply(u16_t handle, u8_t reason)
{
    2420:	b570      	push	{r4, r5, r6, lr}
    2422:	0004      	movs	r4, r0
    2424:	000e      	movs	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2426:	480b      	ldr	r0, [pc, #44]	; (2454 <le_conn_param_neg_reply+0x34>)
    2428:	2103      	movs	r1, #3
    242a:	f7ff fb6d 	bl	1b08 <bt_hci_cmd_create>
    242e:	1e05      	subs	r5, r0, #0
				sizeof(*cp));
	if (!buf) {
    2430:	d00c      	beq.n	244c <le_conn_param_neg_reply+0x2c>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2432:	2103      	movs	r1, #3
    2434:	3008      	adds	r0, #8
    2436:	f00c f865 	bl	e504 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    243a:	7004      	strb	r4, [r0, #0]
    243c:	0a24      	lsrs	r4, r4, #8
    243e:	7044      	strb	r4, [r0, #1]
	cp->reason = sys_cpu_to_le16(reason);
    2440:	7086      	strb	r6, [r0, #2]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2442:	0029      	movs	r1, r5
    2444:	4803      	ldr	r0, [pc, #12]	; (2454 <le_conn_param_neg_reply+0x34>)
    2446:	f7ff ff6d 	bl	2324 <bt_hci_cmd_send>
    244a:	e001      	b.n	2450 <le_conn_param_neg_reply+0x30>
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    244c:	2037      	movs	r0, #55	; 0x37
    244e:	4240      	negs	r0, r0
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
    2450:	bd70      	pop	{r4, r5, r6, pc}
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	00002021 	.word	0x00002021

00002458 <hci_tx_thread>:
/* command FIFO */
#define EV_COUNT 1
#endif

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
    2458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    245a:	4c36      	ldr	r4, [pc, #216]	; (2534 <hci_tx_thread+0xdc>)
    245c:	4b36      	ldr	r3, [pc, #216]	; (2538 <hci_tx_thread+0xe0>)
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    245e:	0020      	movs	r0, r4
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    2460:	6862      	ldr	r2, [r4, #4]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2462:	300c      	adds	r0, #12
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    2464:	4013      	ands	r3, r2
    2466:	6063      	str	r3, [r4, #4]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2468:	f000 ff5c 	bl	3324 <bt_conn_prepare_events>
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    246c:	2201      	movs	r2, #1

		events[0].state = K_POLL_STATE_NOT_READY;
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    246e:	1c43      	adds	r3, r0, #1
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    2470:	4252      	negs	r2, r2
    2472:	0019      	movs	r1, r3
    2474:	0020      	movs	r0, r4

		events[0].state = K_POLL_STATE_NOT_READY;
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2476:	9300      	str	r3, [sp, #0]
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    2478:	f00c fdca 	bl	f010 <k_poll>
		BT_ASSERT(err == 0);
    247c:	2800      	cmp	r0, #0
    247e:	d144      	bne.n	250a <hci_tx_thread+0xb2>
    2480:	3408      	adds	r4, #8
    2482:	e02c      	b.n	24de <hci_tx_thread+0x86>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);

	/* Wait until ncmd > 0 */
	BT_DBG("calling sem_take_wait");
	k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    2484:	2101      	movs	r1, #1
    2486:	9801      	ldr	r0, [sp, #4]
    2488:	4249      	negs	r1, r1
    248a:	3098      	adds	r0, #152	; 0x98
    248c:	f00d fa0c 	bl	f8a8 <k_sem_take>

	/* Clear out any existing sent command */
	if (bt_dev.sent_cmd) {
    2490:	9f01      	ldr	r7, [sp, #4]
    2492:	37ac      	adds	r7, #172	; 0xac
    2494:	6838      	ldr	r0, [r7, #0]
    2496:	2800      	cmp	r0, #0
    2498:	d002      	beq.n	24a0 <hci_tx_thread+0x48>
		BT_ERR("Uncleared pending sent_cmd");
		net_buf_unref(bt_dev.sent_cmd);
    249a:	f00c f811 	bl	e4c0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    249e:	603d      	str	r5, [r7, #0]
	}

	bt_dev.sent_cmd = net_buf_ref(buf);
    24a0:	0030      	movs	r0, r6
    24a2:	f00c f82b 	bl	e4fc <net_buf_ref>
    24a6:	9d01      	ldr	r5, [sp, #4]
    24a8:	35ac      	adds	r5, #172	; 0xac
    24aa:	6028      	str	r0, [r5, #0]

	BT_DBG("Sending command 0x%04x (buf %p) to driver",
	       cmd(buf)->opcode, buf);

	err = bt_send(buf);
    24ac:	0030      	movs	r0, r6
    24ae:	f7ff ff2f 	bl	2310 <bt_send>
	if (err) {
    24b2:	2800      	cmp	r0, #0
    24b4:	d00f      	beq.n	24d6 <hci_tx_thread+0x7e>
		BT_ERR("Unable to send to driver (err %d)", err);
		k_sem_give(&bt_dev.ncmd_sem);
    24b6:	9801      	ldr	r0, [sp, #4]
    24b8:	3098      	adds	r0, #152	; 0x98
    24ba:	f00d f9b9 	bl	f830 <k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    24be:	2100      	movs	r1, #0
    24c0:	201f      	movs	r0, #31
    24c2:	f7ff fb07 	bl	1ad4 <hci_cmd_done.isra.15>
			     NULL);
		net_buf_unref(bt_dev.sent_cmd);
    24c6:	6828      	ldr	r0, [r5, #0]
    24c8:	f00b fffa 	bl	e4c0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    24cc:	2300      	movs	r3, #0
		net_buf_unref(buf);
    24ce:	0030      	movs	r0, r6
		BT_ERR("Unable to send to driver (err %d)", err);
		k_sem_give(&bt_dev.ncmd_sem);
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
			     NULL);
		net_buf_unref(bt_dev.sent_cmd);
		bt_dev.sent_cmd = NULL;
    24d0:	602b      	str	r3, [r5, #0]
		net_buf_unref(buf);
    24d2:	f00b fff5 	bl	e4c0 <net_buf_unref>

static void process_events(struct k_poll_event *ev, int count)
{
	BT_DBG("count %d", count);

	for (; count; ev++, count--) {
    24d6:	9b00      	ldr	r3, [sp, #0]
    24d8:	340c      	adds	r4, #12
    24da:	3b01      	subs	r3, #1
    24dc:	9300      	str	r3, [sp, #0]
    24de:	0022      	movs	r2, r4
    24e0:	9b00      	ldr	r3, [sp, #0]
    24e2:	3a08      	subs	r2, #8
    24e4:	2b00      	cmp	r3, #0
    24e6:	d021      	beq.n	252c <hci_tx_thread+0xd4>
		BT_DBG("ev->state %u", ev->state);

		switch (ev->state) {
    24e8:	6853      	ldr	r3, [r2, #4]
    24ea:	03db      	lsls	r3, r3, #15
    24ec:	0edb      	lsrs	r3, r3, #27
    24ee:	2b08      	cmp	r3, #8
    24f0:	d1f1      	bne.n	24d6 <hci_tx_thread+0x7e>
		case K_POLL_STATE_SIGNALED:
			break;
		case K_POLL_STATE_FIFO_DATA_AVAILABLE:
			if (ev->tag == BT_EVENT_CMD_TX) {
    24f2:	7915      	ldrb	r5, [r2, #4]
    24f4:	2d00      	cmp	r5, #0
    24f6:	d10b      	bne.n	2510 <hci_tx_thread+0xb8>
	struct net_buf *buf;
	int err;

	/* Get next command */
	BT_DBG("calling net_buf_get");
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    24f8:	4f10      	ldr	r7, [pc, #64]	; (253c <hci_tx_thread+0xe4>)
    24fa:	0029      	movs	r1, r5
    24fc:	0038      	movs	r0, r7
    24fe:	30c4      	adds	r0, #196	; 0xc4
    2500:	f00b ffb2 	bl	e468 <net_buf_get>
    2504:	9701      	str	r7, [sp, #4]
    2506:	1e06      	subs	r6, r0, #0
	BT_ASSERT(buf);
    2508:	d1bc      	bne.n	2484 <hci_tx_thread+0x2c>
    250a:	b662      	cpsie	i
    250c:	2004      	movs	r0, #4
    250e:	df02      	svc	2
			if (ev->tag == BT_EVENT_CMD_TX) {
				send_cmd();
			} else if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
				struct bt_conn *conn;

				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2510:	2d01      	cmp	r5, #1
    2512:	d104      	bne.n	251e <hci_tx_thread+0xc6>
					conn = CONTAINER_OF(ev->fifo,
							    struct bt_conn,
							    tx_notify);
					bt_conn_notify_tx(conn);
    2514:	6820      	ldr	r0, [r4, #0]
    2516:	3818      	subs	r0, #24
    2518:	f000 fe5e 	bl	31d8 <bt_conn_notify_tx>
    251c:	e7db      	b.n	24d6 <hci_tx_thread+0x7e>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    251e:	2d02      	cmp	r5, #2
    2520:	d1d9      	bne.n	24d6 <hci_tx_thread+0x7e>
					conn = CONTAINER_OF(ev->fifo,
							    struct bt_conn,
							    tx_queue);
					bt_conn_process_tx(conn);
    2522:	6820      	ldr	r0, [r4, #0]
    2524:	382c      	subs	r0, #44	; 0x2c
    2526:	f001 f93f 	bl	37a8 <bt_conn_process_tx>
    252a:	e7d4      	b.n	24d6 <hci_tx_thread+0x7e>
		process_events(events, ev_count);

		/* Make sure we don't hog the CPU if there's all the time
		 * some ready events.
		 */
		k_yield();
    252c:	f00d f8ac 	bl	f688 <k_yield>
	}
    2530:	e793      	b.n	245a <hci_tx_thread+0x2>
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	200002c4 	.word	0x200002c4
    2538:	fffe0fff 	.word	0xfffe0fff
    253c:	200002f8 	.word	0x200002f8

00002540 <bt_recv>:

	return bt_dev.drv->send(buf);
}

int bt_recv(struct net_buf *buf)
{
    2540:	b5f0      	push	{r4, r5, r6, r7, lr}
    2542:	0007      	movs	r7, r0
    2544:	b089      	sub	sp, #36	; 0x24

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	pool = net_buf_pool_get(buf->pool_id);
    2546:	7980      	ldrb	r0, [r0, #6]
    2548:	f00b ff3e 	bl	e3c8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    254c:	8b43      	ldrh	r3, [r0, #26]
		BT_ERR("Too small user data size");
		net_buf_unref(buf);
    254e:	0038      	movs	r0, r7
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	pool = net_buf_pool_get(buf->pool_id);
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    2550:	2b03      	cmp	r3, #3
    2552:	d94b      	bls.n	25ec <bt_recv+0xac>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    2554:	f7ff fa9a 	bl	1a8c <net_buf_user_data>
		BT_ERR("Too small user data size");
		net_buf_unref(buf);
		return -EINVAL;
	}

	switch (bt_buf_get_type(buf)) {
    2558:	7803      	ldrb	r3, [r0, #0]
    255a:	2b01      	cmp	r3, #1
    255c:	d026      	beq.n	25ac <bt_recv+0x6c>
    255e:	2b03      	cmp	r3, #3
    2560:	d143      	bne.n	25ea <bt_recv+0xaa>
#endif

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    2562:	68bb      	ldr	r3, [r7, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    2564:	78dd      	ldrb	r5, [r3, #3]
    2566:	789a      	ldrb	r2, [r3, #2]
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    2568:	785c      	ldrb	r4, [r3, #1]
    256a:	7819      	ldrb	r1, [r3, #0]

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    256c:	022d      	lsls	r5, r5, #8
    256e:	4315      	orrs	r5, r2
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    2570:	0222      	lsls	r2, r4, #8
    2572:	430a      	orrs	r2, r1
	flags = bt_acl_flags(handle);

	acl(buf)->handle = bt_acl_handle(handle);
    2574:	0513      	lsls	r3, r2, #20
    2576:	0d1b      	lsrs	r3, r3, #20
    2578:	8043      	strh	r3, [r0, #2]

	net_buf_pull(buf, sizeof(*hdr));
    257a:	0038      	movs	r0, r7
    257c:	2104      	movs	r1, #4
    257e:	3008      	adds	r0, #8
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    2580:	0014      	movs	r4, r2
	flags = bt_acl_flags(handle);

	acl(buf)->handle = bt_acl_handle(handle);

	net_buf_pull(buf, sizeof(*hdr));
    2582:	f00b ffe0 	bl	e546 <net_buf_simple_pull>

	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);

	if (buf->len != len) {
    2586:	89bb      	ldrh	r3, [r7, #12]
    2588:	42ab      	cmp	r3, r5
    258a:	d129      	bne.n	25e0 <bt_recv+0xa0>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
		net_buf_unref(buf);
		return;
	}

	conn = bt_conn_lookup_handle(acl(buf)->handle);
    258c:	0038      	movs	r0, r7
    258e:	f7ff fa7d 	bl	1a8c <net_buf_user_data>
    2592:	8840      	ldrh	r0, [r0, #2]
    2594:	f000 ffc4 	bl	3520 <bt_conn_lookup_handle>
    2598:	1e05      	subs	r5, r0, #0
	if (!conn) {
    259a:	d021      	beq.n	25e0 <bt_recv+0xa0>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
		net_buf_unref(buf);
		return;
	}

	bt_conn_recv(conn, buf, flags);
    259c:	0b22      	lsrs	r2, r4, #12
    259e:	0039      	movs	r1, r7
    25a0:	f000 fda4 	bl	30ec <bt_conn_recv>
	bt_conn_unref(conn);
    25a4:	0028      	movs	r0, r5
    25a6:	f001 f82f 	bl	3608 <bt_conn_unref>
    25aa:	e01c      	b.n	25e6 <bt_recv+0xa6>
	}
}

static void hci_event(struct net_buf *buf)
{
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    25ac:	68bc      	ldr	r4, [r7, #8]

	BT_DBG("event 0x%02x", hdr->evt);

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    25ae:	7822      	ldrb	r2, [r4, #0]
    25b0:	2a13      	cmp	r2, #19
    25b2:	d807      	bhi.n	25c4 <bt_recv+0x84>
    25b4:	4093      	lsls	r3, r2
    25b6:	228c      	movs	r2, #140	; 0x8c
    25b8:	0312      	lsls	r2, r2, #12
    25ba:	4213      	tst	r3, r2
    25bc:	d002      	beq.n	25c4 <bt_recv+0x84>
    25be:	b662      	cpsie	i
    25c0:	2004      	movs	r0, #4
    25c2:	df02      	svc	2

	net_buf_pull(buf, sizeof(*hdr));
    25c4:	003b      	movs	r3, r7
    25c6:	3308      	adds	r3, #8
    25c8:	0018      	movs	r0, r3
    25ca:	2102      	movs	r1, #2
    25cc:	9300      	str	r3, [sp, #0]
    25ce:	f00b ffba 	bl	e546 <net_buf_simple_pull>

	switch (hdr->evt) {
    25d2:	7823      	ldrb	r3, [r4, #0]
    25d4:	2b05      	cmp	r3, #5
    25d6:	d15b      	bne.n	2690 <bt_recv+0x150>
    25d8:	68bd      	ldr	r5, [r7, #8]
	struct bt_conn *conn;

	BT_DBG("status %u handle %u reason %u", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    25da:	782e      	ldrb	r6, [r5, #0]
    25dc:	2e00      	cmp	r6, #0
    25de:	d00a      	beq.n	25f6 <bt_recv+0xb6>
			buf->len, bt_hex(buf->data, buf->len));
		break;

	}

	net_buf_unref(buf);
    25e0:	0038      	movs	r0, r7
    25e2:	f00b ff6d 	bl	e4c0 <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_event(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    25e6:	2000      	movs	r0, #0
    25e8:	e30f      	b.n	2c0a <bt_recv+0x6ca>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    25ea:	0038      	movs	r0, r7
    25ec:	f00b ff68 	bl	e4c0 <net_buf_unref>
		return -EINVAL;
    25f0:	2016      	movs	r0, #22
    25f2:	4240      	negs	r0, r0
    25f4:	e309      	b.n	2c0a <bt_recv+0x6ca>
}

static void hci_disconn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    25f6:	78a8      	ldrb	r0, [r5, #2]
    25f8:	786b      	ldrb	r3, [r5, #1]
    25fa:	0200      	lsls	r0, r0, #8

	if (evt->status) {
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    25fc:	4318      	orrs	r0, r3
    25fe:	f000 ff8f 	bl	3520 <bt_conn_lookup_handle>
    2602:	1e04      	subs	r4, r0, #0
	if (!conn) {
    2604:	d01d      	beq.n	2642 <bt_recv+0x102>
		BT_ERR("Unable to look up conn with handle %u", handle);
		goto advertise;
	}

	conn->err = evt->reason;
    2606:	0003      	movs	r3, r0
    2608:	78ea      	ldrb	r2, [r5, #3]
    260a:	334c      	adds	r3, #76	; 0x4c
    260c:	701a      	strb	r2, [r3, #0]

	/* Check stacks usage (no-ops if not enabled) */
	k_call_stacks_analyze();
    260e:	f00c fac5 	bl	eb9c <k_call_stacks_analyze>
#if !defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
	STACK_ANALYZE("rx stack", rx_thread_stack);
#endif
	STACK_ANALYZE("tx stack", tx_thread_stack);

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2612:	0031      	movs	r1, r6
    2614:	0020      	movs	r0, r4
    2616:	f000 fef5 	bl	3404 <bt_conn_set_state>
	conn->handle = 0;

	if (conn->type != BT_CONN_TYPE_LE) {
    261a:	78a5      	ldrb	r5, [r4, #2]
	STACK_ANALYZE("rx stack", rx_thread_stack);
#endif
	STACK_ANALYZE("tx stack", tx_thread_stack);

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	conn->handle = 0;
    261c:	8026      	strh	r6, [r4, #0]

	if (conn->type != BT_CONN_TYPE_LE) {
    261e:	2d00      	cmp	r5, #0
    2620:	d132      	bne.n	2688 <bt_recv+0x148>
#endif
		bt_conn_unref(conn);
		return;
	}

	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    2622:	1d20      	adds	r0, r4, #4
    2624:	0029      	movs	r1, r5
    2626:	f7ff fa37 	bl	1a98 <atomic_test_bit>
    262a:	2800      	cmp	r0, #0
    262c:	d006      	beq.n	263c <bt_recv+0xfc>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    262e:	0020      	movs	r0, r4
    2630:	2101      	movs	r1, #1
    2632:	f000 fee7 	bl	3404 <bt_conn_set_state>
		bt_le_scan_update(false);
    2636:	0028      	movs	r0, r5
    2638:	f7ff fbdc 	bl	1df4 <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    263c:	0020      	movs	r0, r4
    263e:	f000 ffe3 	bl	3608 <bt_conn_unref>

advertise:
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2642:	4cc0      	ldr	r4, [pc, #768]	; (2944 <bt_recv+0x404>)
    2644:	2106      	movs	r1, #6
    2646:	346c      	adds	r4, #108	; 0x6c
    2648:	0020      	movs	r0, r4
    264a:	f7ff fa25 	bl	1a98 <atomic_test_bit>
    264e:	2800      	cmp	r0, #0
    2650:	d0c6      	beq.n	25e0 <bt_recv+0xa0>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2652:	2105      	movs	r1, #5
    2654:	0020      	movs	r0, r4
    2656:	f7ff fa1f 	bl	1a98 <atomic_test_bit>
	}

	bt_conn_unref(conn);

advertise:
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    265a:	2800      	cmp	r0, #0
    265c:	d1c0      	bne.n	25e0 <bt_recv+0xa0>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
			le_set_private_addr();
		}

		set_advertise_enable(true);
    265e:	3001      	adds	r0, #1
    2660:	f7ff fb34 	bl	1ccc <set_advertise_enable>
    2664:	e7bc      	b.n	25e0 <bt_recv+0xa0>
    2666:	68bd      	ldr	r5, [r7, #8]
	int err;

	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
	       evt->role, bt_addr_le_str(&evt->peer_addr));

	if (evt->status) {
    2668:	782b      	ldrb	r3, [r5, #0]
    266a:	2b00      	cmp	r3, #0
    266c:	d029      	beq.n	26c2 <bt_recv+0x182>
		 * connection so there is no need to check ID address as
		 * only one connection can be in that state
		 *
		 * Depending on error code address might not be valid anyway.
		 */
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    266e:	2102      	movs	r1, #2
    2670:	2000      	movs	r0, #0
    2672:	f000 ffa5 	bl	35c0 <bt_conn_lookup_state_le>
    2676:	1e04      	subs	r4, r0, #0
		if (!conn) {
    2678:	d0b2      	beq.n	25e0 <bt_recv+0xa0>
			return;
		}

		conn->err = evt->status;
    267a:	0003      	movs	r3, r0
    267c:	782a      	ldrb	r2, [r5, #0]
    267e:	334c      	adds	r3, #76	; 0x4c
    2680:	701a      	strb	r2, [r3, #0]

		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2682:	2100      	movs	r1, #0
    2684:	f000 febe 	bl	3404 <bt_conn_set_state>

		/* Drop the reference got by lookup call in CONNECT state.
		 * We are now in DISCONNECTED state since no successful LE
		 * link been made.
		 */
		bt_conn_unref(conn);
    2688:	0020      	movs	r0, r4
    268a:	f000 ffbd 	bl	3608 <bt_conn_unref>
    268e:	e7a7      	b.n	25e0 <bt_recv+0xa0>

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    2690:	2b3e      	cmp	r3, #62	; 0x3e
    2692:	d1a5      	bne.n	25e0 <bt_recv+0xa0>
	}
}

static void hci_le_meta_event(struct net_buf *buf)
{
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    2694:	68bc      	ldr	r4, [r7, #8]

	BT_DBG("subevent 0x%02x", evt->subevent);

	net_buf_pull(buf, sizeof(*evt));
    2696:	2101      	movs	r1, #1
    2698:	9800      	ldr	r0, [sp, #0]
    269a:	f00b ff54 	bl	e546 <net_buf_simple_pull>

	switch (evt->subevent) {
    269e:	7820      	ldrb	r0, [r4, #0]
    26a0:	3801      	subs	r0, #1
    26a2:	280b      	cmp	r0, #11
    26a4:	d89c      	bhi.n	25e0 <bt_recv+0xa0>
    26a6:	f7fd fd71 	bl	18c <__gnu_thumb1_case_shi>
    26aa:	ffde      	.short	0xffde
    26ac:	00b601f0 	.word	0x00b601f0
    26b0:	ff9b00dc 	.word	0xff9b00dc
    26b4:	0182011c 	.word	0x0182011c
    26b8:	01e101bf 	.word	0x01e101bf
    26bc:	ff9bff9b 	.word	0xff9bff9b
    26c0:	0194      	.short	0x0194
}

static void le_conn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    26c2:	78aa      	ldrb	r2, [r5, #2]
    26c4:	786b      	ldrb	r3, [r5, #1]
    26c6:	0212      	lsls	r2, r2, #8
		bt_conn_unref(conn);

		return;
	}

	id_addr = find_id_addr(&evt->peer_addr);
    26c8:	1d2e      	adds	r6, r5, #4
}

static void le_conn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    26ca:	431a      	orrs	r2, r3

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    26cc:	2102      	movs	r1, #2
    26ce:	0030      	movs	r0, r6
}

static void le_conn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    26d0:	9200      	str	r2, [sp, #0]

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    26d2:	f000 ff75 	bl	35c0 <bt_conn_lookup_state_le>

	if (evt->role == BT_CONN_ROLE_SLAVE) {
    26d6:	78eb      	ldrb	r3, [r5, #3]

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    26d8:	0004      	movs	r4, r0

	if (evt->role == BT_CONN_ROLE_SLAVE) {
    26da:	2b01      	cmp	r3, #1
    26dc:	d10b      	bne.n	26f6 <bt_recv+0x1b6>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    26de:	2121      	movs	r1, #33	; 0x21
    26e0:	4898      	ldr	r0, [pc, #608]	; (2944 <bt_recv+0x404>)
    26e2:	4249      	negs	r1, r1
    26e4:	306c      	adds	r0, #108	; 0x6c
    26e6:	f00c f9f4 	bl	ead2 <atomic_and>
		 * object to keep host in sync with controller state
		 */
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);

		/* only for slave we may need to add new connection */
		if (!conn) {
    26ea:	2c00      	cmp	r4, #0
    26ec:	d106      	bne.n	26fc <bt_recv+0x1bc>
			conn = bt_conn_add_le(id_addr);
    26ee:	0030      	movs	r0, r6
    26f0:	f000 fe58 	bl	33a4 <bt_conn_add_le>
    26f4:	0004      	movs	r4, r0
		}
	}

	if (!conn) {
    26f6:	2c00      	cmp	r4, #0
    26f8:	d100      	bne.n	26fc <bt_recv+0x1bc>
    26fa:	e771      	b.n	25e0 <bt_recv+0xa0>
		BT_ERR("Unable to add new conn for handle %u", handle);
		return;
	}

	conn->handle   = handle;
    26fc:	466b      	mov	r3, sp
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    26fe:	0020      	movs	r0, r4
    2700:	881b      	ldrh	r3, [r3, #0]
    2702:	2207      	movs	r2, #7
    2704:	8023      	strh	r3, [r4, #0]
    2706:	0031      	movs	r1, r6
    2708:	3050      	adds	r0, #80	; 0x50
    270a:	f7fe fac4 	bl	c96 <memcpy>
	bt_addr_le_copy(&conn->le.dst, id_addr);
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    270e:	7b2b      	ldrb	r3, [r5, #12]
    2710:	7aea      	ldrb	r2, [r5, #11]
    2712:	021b      	lsls	r3, r3, #8
    2714:	4313      	orrs	r3, r2
    2716:	0022      	movs	r2, r4
    2718:	3266      	adds	r2, #102	; 0x66
    271a:	8013      	strh	r3, [r2, #0]
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    271c:	7bab      	ldrb	r3, [r5, #14]
    271e:	7b6a      	ldrb	r2, [r5, #13]
    2720:	021b      	lsls	r3, r3, #8
    2722:	4313      	orrs	r3, r2
    2724:	0022      	movs	r2, r4
    2726:	326c      	adds	r2, #108	; 0x6c
    2728:	8013      	strh	r3, [r2, #0]
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    272a:	7c2b      	ldrb	r3, [r5, #16]
    272c:	7bea      	ldrb	r2, [r5, #15]
    272e:	021b      	lsls	r3, r3, #8
    2730:	4313      	orrs	r3, r2
    2732:	0022      	movs	r2, r4
    2734:	326e      	adds	r2, #110	; 0x6e
    2736:	8013      	strh	r3, [r2, #0]
	conn->role = evt->role;
    2738:	78eb      	ldrb	r3, [r5, #3]
    273a:	9300      	str	r3, [sp, #0]
    273c:	466b      	mov	r3, sp
    273e:	781b      	ldrb	r3, [r3, #0]
    2740:	70e3      	strb	r3, [r4, #3]
	/*
	 * Use connection address (instead of identity address) as initiator
	 * or responder address. Only slave needs to be updated. For master all
	 * was set during outgoing connection creation.
	 */
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    2742:	9b00      	ldr	r3, [sp, #0]
    2744:	2b01      	cmp	r3, #1
    2746:	d119      	bne.n	277c <bt_recv+0x23c>
    2748:	0020      	movs	r0, r4
    274a:	0031      	movs	r1, r6
    274c:	2207      	movs	r2, #7
    274e:	3057      	adds	r0, #87	; 0x57
    2750:	f7fe faa1 	bl	c96 <memcpy>
    2754:	0020      	movs	r0, r4
    2756:	4e7b      	ldr	r6, [pc, #492]	; (2944 <bt_recv+0x404>)
    2758:	2207      	movs	r2, #7
    275a:	0031      	movs	r1, r6
    275c:	305e      	adds	r0, #94	; 0x5e
    275e:	f7fe fa9a 	bl	c96 <memcpy>
		/* if the controller supports, lets advertise for another
		 * slave connection.
		 * check for connectable advertising state is sufficient as
		 * this is how this le connection complete for slave occurred.
		 */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2762:	0030      	movs	r0, r6
    2764:	2106      	movs	r1, #6
    2766:	306c      	adds	r0, #108	; 0x6c
    2768:	f7ff f996 	bl	1a98 <atomic_test_bit>
    276c:	2800      	cmp	r0, #0
    276e:	d005      	beq.n	277c <bt_recv+0x23c>
    2770:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    2772:	065b      	lsls	r3, r3, #25
    2774:	d502      	bpl.n	277c <bt_recv+0x23c>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
			if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
				le_set_private_addr();
			}

			set_advertise_enable(true);
    2776:	9800      	ldr	r0, [sp, #0]
    2778:	f7ff faa8 	bl	1ccc <set_advertise_enable>
		}

	}

	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    277c:	2103      	movs	r1, #3
    277e:	0020      	movs	r0, r4
    2780:	f000 fe40 	bl	3404 <bt_conn_set_state>
	/*
	 * it is possible that connection was disconnected directly from
	 * connected callback so we must check state before doing connection
	 * parameters update
	 */
	if (conn->state != BT_CONN_CONNECTED) {
    2784:	0023      	movs	r3, r4
    2786:	334d      	adds	r3, #77	; 0x4d
    2788:	781b      	ldrb	r3, [r3, #0]
    278a:	2b03      	cmp	r3, #3
    278c:	d13c      	bne.n	2808 <bt_recv+0x2c8>
		goto done;
	}

	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    278e:	78eb      	ldrb	r3, [r5, #3]
    2790:	2b00      	cmp	r3, #0
    2792:	d004      	beq.n	279e <bt_recv+0x25e>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2794:	4b6b      	ldr	r3, [pc, #428]	; (2944 <bt_recv+0x404>)
    2796:	3370      	adds	r3, #112	; 0x70
	 */
	if (conn->state != BT_CONN_CONNECTED) {
		goto done;
	}

	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2798:	781b      	ldrb	r3, [r3, #0]
    279a:	071b      	lsls	r3, r3, #28
    279c:	d512      	bpl.n	27c4 <bt_recv+0x284>
static int hci_le_read_remote_features(struct bt_conn *conn)
{
	struct bt_hci_cp_le_read_remote_features *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    279e:	2102      	movs	r1, #2
    27a0:	4869      	ldr	r0, [pc, #420]	; (2948 <bt_recv+0x408>)
    27a2:	f7ff f9b1 	bl	1b08 <bt_hci_cmd_create>
    27a6:	1e05      	subs	r5, r0, #0
				sizeof(*cp));
	if (!buf) {
    27a8:	d00c      	beq.n	27c4 <bt_recv+0x284>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    27aa:	2102      	movs	r1, #2
    27ac:	3008      	adds	r0, #8
    27ae:	f00b fea9 	bl	e504 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    27b2:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    27b4:	0029      	movs	r1, r5
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    27b6:	7003      	strb	r3, [r0, #0]
    27b8:	0a1b      	lsrs	r3, r3, #8
    27ba:	7043      	strb	r3, [r0, #1]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    27bc:	4862      	ldr	r0, [pc, #392]	; (2948 <bt_recv+0x408>)
    27be:	f7ff fdb1 	bl	2324 <bt_hci_cmd_send>
    27c2:	e021      	b.n	2808 <bt_recv+0x2c8>
		if (!err) {
			goto done;
		}
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    27c4:	4b5f      	ldr	r3, [pc, #380]	; (2944 <bt_recv+0x404>)
    27c6:	001a      	movs	r2, r3
    27c8:	3271      	adds	r2, #113	; 0x71
    27ca:	7812      	ldrb	r2, [r2, #0]
    27cc:	001d      	movs	r5, r3
    27ce:	07d3      	lsls	r3, r2, #31
    27d0:	d507      	bpl.n	27e2 <bt_recv+0x2a2>
		err = hci_le_set_phy(conn);
    27d2:	0020      	movs	r0, r4
    27d4:	f7ff fdcc 	bl	2370 <hci_le_set_phy.isra.24>
		if (!err) {
    27d8:	2800      	cmp	r0, #0
    27da:	d102      	bne.n	27e2 <bt_recv+0x2a2>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    27dc:	1d20      	adds	r0, r4, #4
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    27de:	2180      	movs	r1, #128	; 0x80
    27e0:	e00c      	b.n	27fc <bt_recv+0x2bc>
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    27e2:	002b      	movs	r3, r5
    27e4:	3370      	adds	r3, #112	; 0x70
    27e6:	781b      	ldrb	r3, [r3, #0]
    27e8:	069b      	lsls	r3, r3, #26
    27ea:	d50a      	bpl.n	2802 <bt_recv+0x2c2>
		err = hci_le_set_data_len(conn);
    27ec:	0020      	movs	r0, r4
    27ee:	f7ff fde1 	bl	23b4 <hci_le_set_data_len.isra.25>
		if (!err) {
    27f2:	2800      	cmp	r0, #0
    27f4:	d105      	bne.n	2802 <bt_recv+0x2c2>
    27f6:	2180      	movs	r1, #128	; 0x80
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    27f8:	1d20      	adds	r0, r4, #4
    27fa:	0049      	lsls	r1, r1, #1
    27fc:	f00c f95e 	bl	eabc <atomic_or>
    2800:	e002      	b.n	2808 <bt_recv+0x2c8>
			goto done;
		}
	}

	update_conn_param(conn);
    2802:	0020      	movs	r0, r4
    2804:	f7ff f956 	bl	1ab4 <update_conn_param>

done:
	bt_conn_unref(conn);
    2808:	0020      	movs	r0, r4
    280a:	f000 fefd 	bl	3608 <bt_conn_unref>
	bt_le_scan_update(false);
    280e:	2000      	movs	r0, #0
    2810:	f7ff faf0 	bl	1df4 <bt_le_scan_update>
    2814:	e6e4      	b.n	25e0 <bt_recv+0xa0>
    2816:	68bc      	ldr	r4, [r7, #8]
{
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
	struct bt_conn *conn;
	u16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    2818:	78a0      	ldrb	r0, [r4, #2]
    281a:	7863      	ldrb	r3, [r4, #1]
    281c:	0200      	lsls	r0, r0, #8

	BT_DBG("status %u, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    281e:	4318      	orrs	r0, r3
    2820:	f000 fe7e 	bl	3520 <bt_conn_lookup_handle>
    2824:	1e05      	subs	r5, r0, #0
	if (!conn) {
    2826:	d100      	bne.n	282a <bt_recv+0x2ea>
    2828:	e6da      	b.n	25e0 <bt_recv+0xa0>
		BT_ERR("Unable to lookup conn for handle %u", handle);
		return;
	}

	if (!evt->status) {
    282a:	7823      	ldrb	r3, [r4, #0]
    282c:	2b00      	cmp	r3, #0
    282e:	d116      	bne.n	285e <bt_recv+0x31e>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    2830:	7923      	ldrb	r3, [r4, #4]
    2832:	78e2      	ldrb	r2, [r4, #3]
    2834:	021b      	lsls	r3, r3, #8
    2836:	4313      	orrs	r3, r2
    2838:	0002      	movs	r2, r0
    283a:	3266      	adds	r2, #102	; 0x66
    283c:	8013      	strh	r3, [r2, #0]
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    283e:	79a3      	ldrb	r3, [r4, #6]
    2840:	7962      	ldrb	r2, [r4, #5]
    2842:	021b      	lsls	r3, r3, #8
    2844:	4313      	orrs	r3, r2
    2846:	0002      	movs	r2, r0
    2848:	326c      	adds	r2, #108	; 0x6c
    284a:	8013      	strh	r3, [r2, #0]
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    284c:	7a23      	ldrb	r3, [r4, #8]
    284e:	79e2      	ldrb	r2, [r4, #7]
    2850:	021b      	lsls	r3, r3, #8
    2852:	4313      	orrs	r3, r2
    2854:	0002      	movs	r2, r0
    2856:	326e      	adds	r2, #110	; 0x6e
    2858:	8013      	strh	r3, [r2, #0]
		notify_le_param_updated(conn);
    285a:	f000 fc03 	bl	3064 <notify_le_param_updated>
	}

	bt_conn_unref(conn);
    285e:	0028      	movs	r0, r5
    2860:	e713      	b.n	268a <bt_recv+0x14a>
    2862:	68bd      	ldr	r5, [r7, #8]
}

static void le_remote_feat_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2864:	78a8      	ldrb	r0, [r5, #2]
    2866:	786b      	ldrb	r3, [r5, #1]
    2868:	0200      	lsls	r0, r0, #8
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    286a:	4318      	orrs	r0, r3
    286c:	f000 fe58 	bl	3520 <bt_conn_lookup_handle>
    2870:	1e04      	subs	r4, r0, #0
	if (!conn) {
    2872:	d100      	bne.n	2876 <bt_recv+0x336>
    2874:	e6b4      	b.n	25e0 <bt_recv+0xa0>
		BT_ERR("Unable to lookup conn for handle %u", handle);
		return;
	}

	if (!evt->status) {
    2876:	782b      	ldrb	r3, [r5, #0]
    2878:	2b00      	cmp	r3, #0
    287a:	d104      	bne.n	2886 <bt_recv+0x346>
		memcpy(conn->le.features, evt->features,
    287c:	1ce9      	adds	r1, r5, #3
    287e:	2208      	movs	r2, #8
    2880:	3070      	adds	r0, #112	; 0x70
    2882:	f7fe fa08 	bl	c96 <memcpy>
		       sizeof(conn->le.features));
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    2886:	4b2f      	ldr	r3, [pc, #188]	; (2944 <bt_recv+0x404>)
    2888:	001a      	movs	r2, r3
    288a:	3271      	adds	r2, #113	; 0x71
    288c:	7811      	ldrb	r1, [r2, #0]
    288e:	2201      	movs	r2, #1
    2890:	001d      	movs	r5, r3
    2892:	4211      	tst	r1, r2
    2894:	d00c      	beq.n	28b0 <bt_recv+0x370>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    2896:	0023      	movs	r3, r4
    2898:	3371      	adds	r3, #113	; 0x71
	if (!evt->status) {
		memcpy(conn->le.features, evt->features,
		       sizeof(conn->le.features));
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	4213      	tst	r3, r2
    289e:	d007      	beq.n	28b0 <bt_recv+0x370>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
		int err;

		err = hci_le_set_phy(conn);
    28a0:	0020      	movs	r0, r4
    28a2:	f7ff fd65 	bl	2370 <hci_le_set_phy.isra.24>
		if (!err) {
    28a6:	2800      	cmp	r0, #0
    28a8:	d102      	bne.n	28b0 <bt_recv+0x370>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    28aa:	1d20      	adds	r0, r4, #4
    28ac:	2180      	movs	r1, #128	; 0x80
    28ae:	e015      	b.n	28dc <bt_recv+0x39c>
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    28b0:	002b      	movs	r3, r5
    28b2:	3370      	adds	r3, #112	; 0x70
    28b4:	781a      	ldrb	r2, [r3, #0]
    28b6:	2320      	movs	r3, #32
    28b8:	421a      	tst	r2, r3
    28ba:	d100      	bne.n	28be <bt_recv+0x37e>
    28bc:	e0b0      	b.n	2a20 <bt_recv+0x4e0>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    28be:	0022      	movs	r2, r4
    28c0:	3270      	adds	r2, #112	; 0x70
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    28c2:	7812      	ldrb	r2, [r2, #0]
    28c4:	421a      	tst	r2, r3
    28c6:	d100      	bne.n	28ca <bt_recv+0x38a>
    28c8:	e0aa      	b.n	2a20 <bt_recv+0x4e0>
	    BT_FEAT_LE_DLE(conn->le.features)) {
		int err;

		err = hci_le_set_data_len(conn);
    28ca:	0020      	movs	r0, r4
    28cc:	f7ff fd72 	bl	23b4 <hci_le_set_data_len.isra.25>
		if (!err) {
    28d0:	2800      	cmp	r0, #0
    28d2:	d000      	beq.n	28d6 <bt_recv+0x396>
    28d4:	e0a4      	b.n	2a20 <bt_recv+0x4e0>
    28d6:	2180      	movs	r1, #128	; 0x80
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    28d8:	1d20      	adds	r0, r4, #4
    28da:	0049      	lsls	r1, r1, #1
    28dc:	f00c f8ee 	bl	eabc <atomic_or>
    28e0:	e6d2      	b.n	2688 <bt_recv+0x148>
    28e2:	68bb      	ldr	r3, [r7, #8]
	struct bt_le_conn_param param;
	struct bt_conn *conn;
	u16_t handle;
	int err;

	handle = sys_le16_to_cpu(evt->handle);
    28e4:	785d      	ldrb	r5, [r3, #1]
    28e6:	781a      	ldrb	r2, [r3, #0]
    28e8:	022d      	lsls	r5, r5, #8
    28ea:	4315      	orrs	r5, r2
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    28ec:	78da      	ldrb	r2, [r3, #3]
    28ee:	7899      	ldrb	r1, [r3, #2]
    28f0:	0212      	lsls	r2, r2, #8
    28f2:	430a      	orrs	r2, r1
    28f4:	a906      	add	r1, sp, #24
    28f6:	800a      	strh	r2, [r1, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    28f8:	795a      	ldrb	r2, [r3, #5]
    28fa:	7919      	ldrb	r1, [r3, #4]
    28fc:	0212      	lsls	r2, r2, #8
    28fe:	430a      	orrs	r2, r1
    2900:	a906      	add	r1, sp, #24
    2902:	804a      	strh	r2, [r1, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    2904:	79da      	ldrb	r2, [r3, #7]
    2906:	7999      	ldrb	r1, [r3, #6]
    2908:	0212      	lsls	r2, r2, #8
    290a:	430a      	orrs	r2, r1
    290c:	a906      	add	r1, sp, #24
    290e:	808a      	strh	r2, [r1, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2910:	7a1a      	ldrb	r2, [r3, #8]
    2912:	7a5b      	ldrb	r3, [r3, #9]

	conn = bt_conn_lookup_handle(handle);
    2914:	0028      	movs	r0, r5

	handle = sys_le16_to_cpu(evt->handle);
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
	param.latency = sys_le16_to_cpu(evt->latency);
	param.timeout = sys_le16_to_cpu(evt->timeout);
    2916:	021b      	lsls	r3, r3, #8
    2918:	4313      	orrs	r3, r2
    291a:	80cb      	strh	r3, [r1, #6]

	conn = bt_conn_lookup_handle(handle);
    291c:	f000 fe00 	bl	3520 <bt_conn_lookup_handle>
    2920:	1e06      	subs	r6, r0, #0
	if (!conn) {
    2922:	d104      	bne.n	292e <bt_recv+0x3ee>
		BT_ERR("Unable to lookup conn for handle %u", handle);
		return le_conn_param_neg_reply(handle,
    2924:	2102      	movs	r1, #2
    2926:	0028      	movs	r0, r5
    2928:	f7ff fd7a 	bl	2420 <le_conn_param_neg_reply>
    292c:	e658      	b.n	25e0 <bt_recv+0xa0>
					       BT_HCI_ERR_UNKNOWN_CONN_ID);
	}

	if (!le_param_req(conn, &param)) {
    292e:	a906      	add	r1, sp, #24
    2930:	f000 fbb2 	bl	3098 <le_param_req>
    2934:	2800      	cmp	r0, #0
    2936:	d109      	bne.n	294c <bt_recv+0x40c>
		err = le_conn_param_neg_reply(handle,
    2938:	211e      	movs	r1, #30
    293a:	0028      	movs	r0, r5
    293c:	f7ff fd70 	bl	2420 <le_conn_param_neg_reply>
    2940:	e033      	b.n	29aa <bt_recv+0x46a>
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	200002f8 	.word	0x200002f8
    2948:	00002016 	.word	0x00002016
				   const struct bt_le_conn_param *param)
{
	struct bt_hci_cp_le_conn_param_req_reply *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    294c:	210e      	movs	r1, #14
    294e:	48b0      	ldr	r0, [pc, #704]	; (2c10 <bt_recv+0x6d0>)
    2950:	f7ff f8da 	bl	1b08 <bt_hci_cmd_create>
    2954:	9000      	str	r0, [sp, #0]
	if (!buf) {
    2956:	2800      	cmp	r0, #0
    2958:	d027      	beq.n	29aa <bt_recv+0x46a>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    295a:	210e      	movs	r1, #14
    295c:	3008      	adds	r0, #8
    295e:	f00b fdd1 	bl	e504 <net_buf_simple_add>
    2962:	0004      	movs	r4, r0
	memset(cp, 0, sizeof(*cp));
    2964:	2100      	movs	r1, #0
    2966:	220e      	movs	r2, #14
    2968:	f7fe f9bf 	bl	cea <memset>

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    296c:	ab06      	add	r3, sp, #24
    296e:	781b      	ldrb	r3, [r3, #0]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
    2970:	7025      	strb	r5, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    2972:	70a3      	strb	r3, [r4, #2]
    2974:	ab06      	add	r3, sp, #24
    2976:	785b      	ldrb	r3, [r3, #1]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
    2978:	0a2d      	lsrs	r5, r5, #8
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    297a:	70e3      	strb	r3, [r4, #3]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
    297c:	7065      	strb	r5, [r4, #1]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    297e:	ab06      	add	r3, sp, #24
    2980:	789b      	ldrb	r3, [r3, #2]
	cp->latency = sys_cpu_to_le16(param->latency);
	cp->timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    2982:	9900      	ldr	r1, [sp, #0]
	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    2984:	7123      	strb	r3, [r4, #4]
    2986:	ab06      	add	r3, sp, #24
    2988:	78db      	ldrb	r3, [r3, #3]
	cp->latency = sys_cpu_to_le16(param->latency);
	cp->timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    298a:	48a1      	ldr	r0, [pc, #644]	; (2c10 <bt_recv+0x6d0>)
	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    298c:	7163      	strb	r3, [r4, #5]
	cp->latency = sys_cpu_to_le16(param->latency);
    298e:	ab06      	add	r3, sp, #24
    2990:	791b      	ldrb	r3, [r3, #4]
    2992:	71a3      	strb	r3, [r4, #6]
    2994:	ab06      	add	r3, sp, #24
    2996:	795b      	ldrb	r3, [r3, #5]
    2998:	71e3      	strb	r3, [r4, #7]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    299a:	ab06      	add	r3, sp, #24
    299c:	799b      	ldrb	r3, [r3, #6]
    299e:	7223      	strb	r3, [r4, #8]
    29a0:	ab06      	add	r3, sp, #24
    29a2:	79db      	ldrb	r3, [r3, #7]
    29a4:	7263      	strb	r3, [r4, #9]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    29a6:	f7ff fcbd 	bl	2324 <bt_hci_cmd_send>
					      BT_HCI_ERR_INVALID_LL_PARAM);
	} else {
		err = le_conn_param_req_reply(handle, &param);
	}

	bt_conn_unref(conn);
    29aa:	0030      	movs	r0, r6
    29ac:	e66d      	b.n	268a <bt_recv+0x14a>
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
	u16_t handle = sys_le16_to_cpu(evt->handle);
    29ae:	68ba      	ldr	r2, [r7, #8]
    29b0:	7850      	ldrb	r0, [r2, #1]
    29b2:	7813      	ldrb	r3, [r2, #0]
    29b4:	0200      	lsls	r0, r0, #8
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    29b6:	4318      	orrs	r0, r3
    29b8:	f000 fdb2 	bl	3520 <bt_conn_lookup_handle>
    29bc:	1e04      	subs	r4, r0, #0
	if (!conn) {
    29be:	d100      	bne.n	29c2 <bt_recv+0x482>
    29c0:	e60e      	b.n	25e0 <bt_recv+0xa0>
	}

	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
	       max_tx_time, max_rx_octets, max_rx_time);

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    29c2:	3004      	adds	r0, #4
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    29c4:	4993      	ldr	r1, [pc, #588]	; (2c14 <bt_recv+0x6d4>)
    29c6:	f00c f884 	bl	ead2 <atomic_and>
    29ca:	05c3      	lsls	r3, r0, #23
    29cc:	d400      	bmi.n	29d0 <bt_recv+0x490>
    29ce:	e65b      	b.n	2688 <bt_recv+0x148>
    29d0:	e026      	b.n	2a20 <bt_recv+0x4e0>
}

static void le_phy_update_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    29d2:	68ba      	ldr	r2, [r7, #8]
    29d4:	7890      	ldrb	r0, [r2, #2]
    29d6:	7853      	ldrb	r3, [r2, #1]
    29d8:	0200      	lsls	r0, r0, #8
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    29da:	4318      	orrs	r0, r3
    29dc:	f000 fda0 	bl	3520 <bt_conn_lookup_handle>
    29e0:	1e04      	subs	r4, r0, #0
	if (!conn) {
    29e2:	d100      	bne.n	29e6 <bt_recv+0x4a6>
    29e4:	e5fc      	b.n	25e0 <bt_recv+0xa0>
    29e6:	2181      	movs	r1, #129	; 0x81
	}

	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
	       evt->status, evt->tx_phy, evt->rx_phy);

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    29e8:	1d05      	adds	r5, r0, #4
    29ea:	4249      	negs	r1, r1
    29ec:	0028      	movs	r0, r5
    29ee:	f00c f870 	bl	ead2 <atomic_and>
    29f2:	0603      	lsls	r3, r0, #24
    29f4:	d400      	bmi.n	29f8 <bt_recv+0x4b8>
    29f6:	e647      	b.n	2688 <bt_recv+0x148>
		goto done;
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    29f8:	4b87      	ldr	r3, [pc, #540]	; (2c18 <bt_recv+0x6d8>)
    29fa:	3370      	adds	r3, #112	; 0x70
    29fc:	781a      	ldrb	r2, [r3, #0]
    29fe:	2320      	movs	r3, #32
    2a00:	421a      	tst	r2, r3
    2a02:	d00d      	beq.n	2a20 <bt_recv+0x4e0>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    2a04:	0022      	movs	r2, r4
    2a06:	3270      	adds	r2, #112	; 0x70

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
		goto done;
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    2a08:	7812      	ldrb	r2, [r2, #0]
    2a0a:	421a      	tst	r2, r3
    2a0c:	d008      	beq.n	2a20 <bt_recv+0x4e0>
	    BT_FEAT_LE_DLE(conn->le.features)) {
		int err;

		err = hci_le_set_data_len(conn);
    2a0e:	0020      	movs	r0, r4
    2a10:	f7ff fcd0 	bl	23b4 <hci_le_set_data_len.isra.25>
		if (!err) {
    2a14:	2800      	cmp	r0, #0
    2a16:	d103      	bne.n	2a20 <bt_recv+0x4e0>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2a18:	2180      	movs	r1, #128	; 0x80
    2a1a:	0028      	movs	r0, r5
    2a1c:	0049      	lsls	r1, r1, #1
    2a1e:	e75d      	b.n	28dc <bt_recv+0x39c>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
			goto done;
		}
	}

	update_conn_param(conn);
    2a20:	0020      	movs	r0, r4
    2a22:	f7ff f847 	bl	1ab4 <update_conn_param>
    2a26:	e62f      	b.n	2688 <bt_recv+0x148>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2a28:	2111      	movs	r1, #17
    2a2a:	4d7b      	ldr	r5, [pc, #492]	; (2c18 <bt_recv+0x6d8>)
    2a2c:	68bc      	ldr	r4, [r7, #8]
    2a2e:	356c      	adds	r5, #108	; 0x6c
    2a30:	4249      	negs	r1, r1
    2a32:	0028      	movs	r0, r5
    2a34:	f00c f84d 	bl	ead2 <atomic_and>

	BT_DBG("status: 0x%x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    2a38:	7823      	ldrb	r3, [r4, #0]
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	d108      	bne.n	2a50 <bt_recv+0x510>
		memcpy(pub_key, evt->key, 64);
    2a3e:	1c61      	adds	r1, r4, #1
    2a40:	2240      	movs	r2, #64	; 0x40
    2a42:	4876      	ldr	r0, [pc, #472]	; (2c1c <bt_recv+0x6dc>)
    2a44:	f7fe f927 	bl	c96 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2a48:	2108      	movs	r1, #8
    2a4a:	0028      	movs	r0, r5
    2a4c:	f00c f836 	bl	eabc <atomic_or>
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2a50:	4b73      	ldr	r3, [pc, #460]	; (2c20 <bt_recv+0x6e0>)
    2a52:	681d      	ldr	r5, [r3, #0]
    2a54:	2d00      	cmp	r5, #0
    2a56:	d100      	bne.n	2a5a <bt_recv+0x51a>
    2a58:	e5c2      	b.n	25e0 <bt_recv+0xa0>
		cb->func(evt->status ? NULL : evt->key);
    2a5a:	2000      	movs	r0, #0
    2a5c:	7822      	ldrb	r2, [r4, #0]
    2a5e:	682b      	ldr	r3, [r5, #0]
    2a60:	4282      	cmp	r2, r0
    2a62:	d100      	bne.n	2a66 <bt_recv+0x526>
    2a64:	1c60      	adds	r0, r4, #1
    2a66:	4798      	blx	r3
	if (!evt->status) {
		memcpy(pub_key, evt->key, 64);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2a68:	686d      	ldr	r5, [r5, #4]
    2a6a:	e7f3      	b.n	2a54 <bt_recv+0x514>
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    2a6c:	4c6d      	ldr	r4, [pc, #436]	; (2c24 <bt_recv+0x6e4>)
    2a6e:	68ba      	ldr	r2, [r7, #8]
    2a70:	6823      	ldr	r3, [r4, #0]
    2a72:	2b00      	cmp	r3, #0
    2a74:	d100      	bne.n	2a78 <bt_recv+0x538>
    2a76:	e5b3      	b.n	25e0 <bt_recv+0xa0>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2a78:	2000      	movs	r0, #0
    2a7a:	7811      	ldrb	r1, [r2, #0]
    2a7c:	4281      	cmp	r1, r0
    2a7e:	d100      	bne.n	2a82 <bt_recv+0x542>
    2a80:	1c50      	adds	r0, r2, #1
    2a82:	4798      	blx	r3
		dh_key_cb = NULL;
    2a84:	2300      	movs	r3, #0
    2a86:	6023      	str	r3, [r4, #0]
    2a88:	e5aa      	b.n	25e0 <bt_recv+0xa0>
	return 0;
}

static void le_adv_report(struct net_buf *buf)
{
	u8_t num_reports = net_buf_pull_u8(buf);
    2a8a:	9800      	ldr	r0, [sp, #0]
    2a8c:	f00b fd63 	bl	e556 <net_buf_simple_pull_u8>
    2a90:	9003      	str	r0, [sp, #12]
	struct bt_hci_evt_le_advertising_info *info;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    2a92:	9b03      	ldr	r3, [sp, #12]
    2a94:	2b00      	cmp	r3, #0
    2a96:	d100      	bne.n	2a9a <bt_recv+0x55a>
    2a98:	e5a2      	b.n	25e0 <bt_recv+0xa0>
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
    2a9a:	68bb      	ldr	r3, [r7, #8]
		net_buf_pull(buf, sizeof(*info));
    2a9c:	2109      	movs	r1, #9
    2a9e:	9800      	ldr	r0, [sp, #0]

	while (num_reports--) {
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
    2aa0:	9301      	str	r3, [sp, #4]
		net_buf_pull(buf, sizeof(*info));
    2aa2:	f00b fd50 	bl	e546 <net_buf_simple_pull>

		BT_DBG("%s event %u, len %u, rssi %d dBm",
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);
    2aa6:	9b01      	ldr	r3, [sp, #4]

		if (scan_dev_found_cb) {
    2aa8:	4e5f      	ldr	r6, [pc, #380]	; (2c28 <bt_recv+0x6e8>)

		BT_DBG("%s event %u, len %u, rssi %d dBm",
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);
    2aaa:	3301      	adds	r3, #1
    2aac:	9302      	str	r3, [sp, #8]

		if (scan_dev_found_cb) {
    2aae:	6833      	ldr	r3, [r6, #0]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d01c      	beq.n	2aee <bt_recv+0x5ae>
		s8_t rssi;

		info = (void *)buf->data;
		net_buf_pull(buf, sizeof(*info));

		rssi = info->data[info->length];
    2ab4:	9b01      	ldr	r3, [sp, #4]
    2ab6:	9a01      	ldr	r2, [sp, #4]
    2ab8:	7a1b      	ldrb	r3, [r3, #8]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2aba:	9800      	ldr	r0, [sp, #0]
    2abc:	18d3      	adds	r3, r2, r3
    2abe:	7a5d      	ldrb	r5, [r3, #9]
    2ac0:	f00b fd5c 	bl	e57c <net_buf_simple_headroom>
	state->len = buf->len;
    2ac4:	89bb      	ldrh	r3, [r7, #12]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2ac6:	0004      	movs	r4, r0
	state->len = buf->len;
    2ac8:	9304      	str	r3, [sp, #16]
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    2aca:	9b01      	ldr	r3, [sp, #4]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    2acc:	b269      	sxtb	r1, r5
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    2ace:	7a1b      	ldrb	r3, [r3, #8]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    2ad0:	6836      	ldr	r6, [r6, #0]
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    2ad2:	81bb      	strh	r3, [r7, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    2ad4:	9b01      	ldr	r3, [sp, #4]
    2ad6:	9802      	ldr	r0, [sp, #8]
    2ad8:	781a      	ldrb	r2, [r3, #0]
    2ada:	9b00      	ldr	r3, [sp, #0]
    2adc:	47b0      	blx	r6
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2ade:	003b      	movs	r3, r7
    2ae0:	b2a4      	uxth	r4, r4
    2ae2:	3310      	adds	r3, #16
    2ae4:	191c      	adds	r4, r3, r4
	buf->len = state->len;
    2ae6:	466b      	mov	r3, sp
    2ae8:	8a1b      	ldrh	r3, [r3, #16]
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2aea:	60bc      	str	r4, [r7, #8]
	buf->len = state->len;
    2aec:	81bb      	strh	r3, [r7, #12]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2aee:	4d4a      	ldr	r5, [pc, #296]	; (2c18 <bt_recv+0x6d8>)

			net_buf_simple_restore(&buf->b, &state);
		}

#if defined(CONFIG_BLUETOOTH_CONN)
		check_pending_conn(addr, &info->addr, info->evt_type);
    2af0:	9b01      	ldr	r3, [sp, #4]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2af2:	002e      	movs	r6, r5
    2af4:	366c      	adds	r6, #108	; 0x6c
    2af6:	2108      	movs	r1, #8
    2af8:	0030      	movs	r0, r6

			net_buf_simple_restore(&buf->b, &state);
		}

#if defined(CONFIG_BLUETOOTH_CONN)
		check_pending_conn(addr, &info->addr, info->evt_type);
    2afa:	781c      	ldrb	r4, [r3, #0]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2afc:	f7fe ffcc 	bl	1a98 <atomic_test_bit>
    2b00:	2800      	cmp	r0, #0
    2b02:	d177      	bne.n	2bf4 <bt_recv+0x6b4>
		return;
	}

	/* Return if event is not connectable */
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    2b04:	2c01      	cmp	r4, #1
    2b06:	d875      	bhi.n	2bf4 <bt_recv+0x6b4>
		return;
	}

	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    2b08:	2101      	movs	r1, #1
    2b0a:	9802      	ldr	r0, [sp, #8]
    2b0c:	f000 fd58 	bl	35c0 <bt_conn_lookup_state_le>
    2b10:	1e04      	subs	r4, r0, #0
	if (!conn) {
    2b12:	d06f      	beq.n	2bf4 <bt_recv+0x6b4>
		return;
	}

	if (bt_hci_stop_scanning()) {
    2b14:	f7ff f89a 	bl	1c4c <bt_hci_stop_scanning>
    2b18:	2800      	cmp	r0, #0
    2b1a:	d15d      	bne.n	2bd8 <bt_recv+0x698>
	} else {
		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    2b1c:	2102      	movs	r1, #2
    2b1e:	0030      	movs	r0, r6
    2b20:	f7fe ffba 	bl	1a98 <atomic_test_bit>
    2b24:	2800      	cmp	r0, #0
    2b26:	d002      	beq.n	2b2e <bt_recv+0x5ee>
			set_random_address(&bt_dev.id_addr.a);
    2b28:	1c68      	adds	r0, r5, #1
    2b2a:	f7ff f84f 	bl	1bcc <set_random_address>
		}

		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    2b2e:	0023      	movs	r3, r4
    2b30:	3357      	adds	r3, #87	; 0x57
    2b32:	2207      	movs	r2, #7
    2b34:	4938      	ldr	r1, [pc, #224]	; (2c18 <bt_recv+0x6d8>)
    2b36:	0018      	movs	r0, r3
    2b38:	9305      	str	r3, [sp, #20]
    2b3a:	f7fe f8ac 	bl	c96 <memcpy>
	}

	bt_addr_le_copy(&conn->le.resp_addr, addr);
    2b3e:	0023      	movs	r3, r4
    2b40:	335e      	adds	r3, #94	; 0x5e
    2b42:	2207      	movs	r2, #7
    2b44:	9902      	ldr	r1, [sp, #8]
    2b46:	0018      	movs	r0, r3
    2b48:	9304      	str	r3, [sp, #16]
    2b4a:	f7fe f8a4 	bl	c96 <memcpy>
static int hci_le_create_conn(const struct bt_conn *conn)
{
	struct net_buf *buf;
	struct bt_hci_cp_le_create_conn *cp;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    2b4e:	2119      	movs	r1, #25
    2b50:	4836      	ldr	r0, [pc, #216]	; (2c2c <bt_recv+0x6ec>)
    2b52:	f7fe ffd9 	bl	1b08 <bt_hci_cmd_create>
    2b56:	1e05      	subs	r5, r0, #0
	if (!buf) {
    2b58:	d03e      	beq.n	2bd8 <bt_recv+0x698>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2b5a:	2119      	movs	r1, #25
    2b5c:	3008      	adds	r0, #8
    2b5e:	f00b fcd1 	bl	e504 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    2b62:	2219      	movs	r2, #25
    2b64:	2100      	movs	r1, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2b66:	0006      	movs	r6, r0
	memset(cp, 0, sizeof(*cp));
    2b68:	f7fe f8bf 	bl	cea <memset>

	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    2b6c:	2360      	movs	r3, #96	; 0x60
    2b6e:	2200      	movs	r2, #0
    2b70:	7033      	strb	r3, [r6, #0]
	cp->scan_window = cp->scan_interval;
    2b72:	70b3      	strb	r3, [r6, #2]
    2b74:	2300      	movs	r3, #0

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    2b76:	7072      	strb	r2, [r6, #1]
	cp->scan_window = cp->scan_interval;
    2b78:	70f3      	strb	r3, [r6, #3]
    2b7a:	2207      	movs	r2, #7
    2b7c:	9904      	ldr	r1, [sp, #16]

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    2b7e:	1d70      	adds	r0, r6, #5
    2b80:	f7fe f889 	bl	c96 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    2b84:	9b05      	ldr	r3, [sp, #20]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2b86:	2200      	movs	r2, #0
	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
    2b88:	781b      	ldrb	r3, [r3, #0]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2b8a:	0029      	movs	r1, r5
	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
    2b8c:	7333      	strb	r3, [r6, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    2b8e:	0023      	movs	r3, r4
    2b90:	3368      	adds	r3, #104	; 0x68
    2b92:	881b      	ldrh	r3, [r3, #0]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2b94:	4825      	ldr	r0, [pc, #148]	; (2c2c <bt_recv+0x6ec>)
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    2b96:	7373      	strb	r3, [r6, #13]
    2b98:	0a1b      	lsrs	r3, r3, #8
    2b9a:	73b3      	strb	r3, [r6, #14]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    2b9c:	0023      	movs	r3, r4
    2b9e:	336a      	adds	r3, #106	; 0x6a
    2ba0:	881b      	ldrh	r3, [r3, #0]
    2ba2:	73f3      	strb	r3, [r6, #15]
    2ba4:	0a1b      	lsrs	r3, r3, #8
    2ba6:	7433      	strb	r3, [r6, #16]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    2ba8:	0023      	movs	r3, r4
    2baa:	336c      	adds	r3, #108	; 0x6c
    2bac:	881b      	ldrh	r3, [r3, #0]
    2bae:	7473      	strb	r3, [r6, #17]
    2bb0:	0a1b      	lsrs	r3, r3, #8
    2bb2:	74b3      	strb	r3, [r6, #18]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    2bb4:	0023      	movs	r3, r4
    2bb6:	336e      	adds	r3, #110	; 0x6e
    2bb8:	881b      	ldrh	r3, [r3, #0]
    2bba:	74f3      	strb	r3, [r6, #19]
    2bbc:	0a1b      	lsrs	r3, r3, #8
    2bbe:	7533      	strb	r3, [r6, #20]

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2bc0:	f7fe ffc8 	bl	1b54 <bt_hci_cmd_send_sync>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
	}

	bt_addr_le_copy(&conn->le.resp_addr, addr);

	if (hci_le_create_conn(conn)) {
    2bc4:	2800      	cmp	r0, #0
    2bc6:	d107      	bne.n	2bd8 <bt_recv+0x698>
		goto failed;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT);
    2bc8:	0020      	movs	r0, r4
    2bca:	2102      	movs	r1, #2
    2bcc:	f000 fc1a 	bl	3404 <bt_conn_set_state>
	bt_conn_unref(conn);
    2bd0:	0020      	movs	r0, r4
    2bd2:	f000 fd19 	bl	3608 <bt_conn_unref>
    2bd6:	e00d      	b.n	2bf4 <bt_recv+0x6b4>
	return;

failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    2bd8:	0023      	movs	r3, r4
    2bda:	221f      	movs	r2, #31
    2bdc:	334c      	adds	r3, #76	; 0x4c
    2bde:	701a      	strb	r2, [r3, #0]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2be0:	2100      	movs	r1, #0
    2be2:	0020      	movs	r0, r4
    2be4:	f000 fc0e 	bl	3404 <bt_conn_set_state>
	bt_conn_unref(conn);
    2be8:	0020      	movs	r0, r4
    2bea:	f000 fd0d 	bl	3608 <bt_conn_unref>
	bt_le_scan_update(false);
    2bee:	2000      	movs	r0, #0
    2bf0:	f7ff f900 	bl	1df4 <bt_le_scan_update>
#endif /* CONFIG_BLUETOOTH_CONN */

		/* Get next report iteration by moving pointer to right offset
		 * in buf according to spec 4.2, Vol 2, Part E, 7.7.65.2.
		 */
		net_buf_pull(buf, info->length + sizeof(rssi));
    2bf4:	9b01      	ldr	r3, [sp, #4]
    2bf6:	9800      	ldr	r0, [sp, #0]
    2bf8:	7a19      	ldrb	r1, [r3, #8]
    2bfa:	3101      	adds	r1, #1
    2bfc:	f00b fca3 	bl	e546 <net_buf_simple_pull>
    2c00:	9b03      	ldr	r3, [sp, #12]
    2c02:	3b01      	subs	r3, #1
    2c04:	b2db      	uxtb	r3, r3
    2c06:	9303      	str	r3, [sp, #12]
    2c08:	e743      	b.n	2a92 <bt_recv+0x552>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    2c0a:	b009      	add	sp, #36	; 0x24
    2c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	00002020 	.word	0x00002020
    2c14:	fffffeff 	.word	0xfffffeff
    2c18:	200002f8 	.word	0x200002f8
    2c1c:	20000858 	.word	0x20000858
    2c20:	20000898 	.word	0x20000898
    2c24:	20000854 	.word	0x20000854
    2c28:	200008a0 	.word	0x200008a0
    2c2c:	0000200d 	.word	0x0000200d

00002c30 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    2c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c32:	b085      	sub	sp, #20
    2c34:	0004      	movs	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2c36:	6885      	ldr	r5, [r0, #8]
    2c38:	f7fe ff28 	bl	1a8c <net_buf_user_data>

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2c3c:	7803      	ldrb	r3, [r0, #0]
    2c3e:	2b01      	cmp	r3, #1
    2c40:	d110      	bne.n	2c64 <bt_recv_prio+0x34>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2c42:	89a2      	ldrh	r2, [r4, #12]
    2c44:	2a01      	cmp	r2, #1
    2c46:	d90d      	bls.n	2c64 <bt_recv_prio+0x34>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    2c48:	782a      	ldrb	r2, [r5, #0]
    2c4a:	2a13      	cmp	r2, #19
    2c4c:	d80a      	bhi.n	2c64 <bt_recv_prio+0x34>
    2c4e:	4093      	lsls	r3, r2
    2c50:	228c      	movs	r2, #140	; 0x8c
    2c52:	0312      	lsls	r2, r2, #12
    2c54:	4213      	tst	r3, r2
    2c56:	d005      	beq.n	2c64 <bt_recv_prio+0x34>
    2c58:	e007      	b.n	2c6a <bt_recv_prio+0x3a>

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    2c5a:	2b0e      	cmp	r3, #14
    2c5c:	d05d      	beq.n	2d1a <bt_recv_prio+0xea>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		hci_num_completed_packets(buf);
		break;
#endif /* CONFIG_BLUETOOTH_CONN */
	default:
		net_buf_unref(buf);
    2c5e:	0020      	movs	r0, r4
    2c60:	f00b fc2e 	bl	e4c0 <net_buf_unref>

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    2c64:	b662      	cpsie	i
    2c66:	2004      	movs	r0, #4
    2c68:	df02      	svc	2

	net_buf_pull(buf, sizeof(*hdr));
    2c6a:	0026      	movs	r6, r4
    2c6c:	3608      	adds	r6, #8
    2c6e:	2102      	movs	r1, #2
    2c70:	0030      	movs	r0, r6
    2c72:	f00b fc68 	bl	e546 <net_buf_simple_pull>

	switch (hdr->evt) {
    2c76:	782b      	ldrb	r3, [r5, #0]
    2c78:	2b0f      	cmp	r3, #15
    2c7a:	d110      	bne.n	2c9e <bt_recv_prio+0x6e>
	}
}

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    2c7c:	68a5      	ldr	r5, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    2c7e:	2104      	movs	r1, #4

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t ncmd = evt->ncmd;
    2c80:	786f      	ldrb	r7, [r5, #1]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    2c82:	0030      	movs	r0, r6
    2c84:	f00b fc5f 	bl	e546 <net_buf_simple_pull>

	hci_cmd_done(opcode, evt->status, buf);
    2c88:	7828      	ldrb	r0, [r5, #0]
    2c8a:	0021      	movs	r1, r4
    2c8c:	f7fe ff22 	bl	1ad4 <hci_cmd_done.isra.15>

	/* Allow next command to be sent */
	if (ncmd) {
    2c90:	2f00      	cmp	r7, #0
    2c92:	d05f      	beq.n	2d54 <bt_recv_prio+0x124>

	hci_cmd_done(opcode, status, buf);

	/* Allow next command to be sent */
	if (ncmd) {
		k_sem_give(&bt_dev.ncmd_sem);
    2c94:	4832      	ldr	r0, [pc, #200]	; (2d60 <bt_recv_prio+0x130>)
    2c96:	3098      	adds	r0, #152	; 0x98
    2c98:	f00c fdca 	bl	f830 <k_sem_give>
    2c9c:	e05a      	b.n	2d54 <bt_recv_prio+0x124>
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    2c9e:	2b13      	cmp	r3, #19
    2ca0:	d1db      	bne.n	2c5a <bt_recv_prio+0x2a>
}

static void hci_num_completed_packets(struct net_buf *buf)
{
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
	u16_t i, num_handles = sys_le16_to_cpu(evt->num_handles);
    2ca2:	2700      	movs	r7, #0
    2ca4:	68a3      	ldr	r3, [r4, #8]
    2ca6:	9301      	str	r3, [sp, #4]
    2ca8:	781b      	ldrb	r3, [r3, #0]
    2caa:	9302      	str	r3, [sp, #8]

	BT_DBG("num_handles %u", num_handles);

	for (i = 0; i < num_handles; i++) {
    2cac:	9a02      	ldr	r2, [sp, #8]
    2cae:	b2bb      	uxth	r3, r7
    2cb0:	429a      	cmp	r2, r3
    2cb2:	d94f      	bls.n	2d54 <bt_recv_prio+0x124>
    2cb4:	9a01      	ldr	r2, [sp, #4]
    2cb6:	00bb      	lsls	r3, r7, #2
    2cb8:	18d3      	adds	r3, r2, r3
		u16_t handle, count;
		struct bt_conn *conn;
		unsigned int key;

		handle = sys_le16_to_cpu(evt->h[i].handle);
    2cba:	7898      	ldrb	r0, [r3, #2]
    2cbc:	785a      	ldrb	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    2cbe:	791e      	ldrb	r6, [r3, #4]
	for (i = 0; i < num_handles; i++) {
		u16_t handle, count;
		struct bt_conn *conn;
		unsigned int key;

		handle = sys_le16_to_cpu(evt->h[i].handle);
    2cc0:	0200      	lsls	r0, r0, #8
    2cc2:	4310      	orrs	r0, r2
		count = sys_le16_to_cpu(evt->h[i].count);
    2cc4:	78da      	ldrb	r2, [r3, #3]
    2cc6:	0236      	lsls	r6, r6, #8
    2cc8:	4316      	orrs	r6, r2
    2cca:	9603      	str	r6, [sp, #12]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    2ccc:	f3ef 8610 	mrs	r6, PRIMASK
    2cd0:	b672      	cpsid	i

		BT_DBG("handle %u count %u", handle, count);

		key = irq_lock();

		conn = bt_conn_lookup_handle(handle);
    2cd2:	f000 fc25 	bl	3520 <bt_conn_lookup_handle>
    2cd6:	1e05      	subs	r5, r0, #0
		if (!conn) {
    2cd8:	d103      	bne.n	2ce2 <bt_recv_prio+0xb2>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    2cda:	2e00      	cmp	r6, #0
    2cdc:	d11b      	bne.n	2d16 <bt_recv_prio+0xe6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    2cde:	b662      	cpsie	i
    2ce0:	e019      	b.n	2d16 <bt_recv_prio+0xe6>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    2ce2:	2e00      	cmp	r6, #0
    2ce4:	d100      	bne.n	2ce8 <bt_recv_prio+0xb8>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    2ce6:	b662      	cpsie	i
		return -EINVAL;
	}
}

int bt_recv_prio(struct net_buf *buf)
{
    2ce8:	9e03      	ldr	r6, [sp, #12]
			continue;
		}

		irq_unlock(key);

		while (count--) {
    2cea:	2e00      	cmp	r6, #0
    2cec:	d010      	beq.n	2d10 <bt_recv_prio+0xe0>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    2cee:	f3ef 8310 	mrs	r3, PRIMASK
    2cf2:	b672      	cpsid	i
    2cf4:	6929      	ldr	r1, [r5, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    2cf6:	2900      	cmp	r1, #0
    2cf8:	d029      	beq.n	2d4e <bt_recv_prio+0x11e>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    2cfa:	680a      	ldr	r2, [r1, #0]
	if (list->tail == node) {
    2cfc:	6968      	ldr	r0, [r5, #20]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    2cfe:	612a      	str	r2, [r5, #16]
	if (list->tail == node) {
    2d00:	4281      	cmp	r1, r0
    2d02:	d100      	bne.n	2d06 <bt_recv_prio+0xd6>
		list->tail = list->head;
    2d04:	616a      	str	r2, [r5, #20]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    2d06:	2b00      	cmp	r3, #0
    2d08:	d115      	bne.n	2d36 <bt_recv_prio+0x106>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    2d0a:	b662      	cpsie	i

			key = irq_lock();
			node = sys_slist_get(&conn->tx_pending);
			irq_unlock(key);

			if (!node) {
    2d0c:	2900      	cmp	r1, #0
    2d0e:	d112      	bne.n	2d36 <bt_recv_prio+0x106>

			k_fifo_put(&conn->tx_notify, node);
			k_sem_give(bt_conn_get_pkts(conn));
		}

		bt_conn_unref(conn);
    2d10:	0028      	movs	r0, r5
    2d12:	f000 fc79 	bl	3608 <bt_conn_unref>
    2d16:	3701      	adds	r7, #1
    2d18:	e7c8      	b.n	2cac <bt_recv_prio+0x7c>

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t status, ncmd = evt->ncmd;
    2d1a:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    2d1c:	2103      	movs	r1, #3
    2d1e:	0030      	movs	r0, r6

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t status, ncmd = evt->ncmd;
    2d20:	781d      	ldrb	r5, [r3, #0]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    2d22:	f00b fc10 	bl	e546 <net_buf_simple_pull>
	/* All command return parameters have a 1-byte status in the
	 * beginning, so we can safely make this generalization.
	 */
	status = buf->data[0];

	hci_cmd_done(opcode, status, buf);
    2d26:	68a3      	ldr	r3, [r4, #8]
    2d28:	0021      	movs	r1, r4
    2d2a:	7818      	ldrb	r0, [r3, #0]
    2d2c:	f7fe fed2 	bl	1ad4 <hci_cmd_done.isra.15>

	/* Allow next command to be sent */
	if (ncmd) {
    2d30:	2d00      	cmp	r5, #0
    2d32:	d00f      	beq.n	2d54 <bt_recv_prio+0x124>
    2d34:	e7ae      	b.n	2c94 <bt_recv_prio+0x64>
			if (!node) {
				BT_ERR("packets count mismatch");
				break;
			}

			k_fifo_put(&conn->tx_notify, node);
    2d36:	0028      	movs	r0, r5
    2d38:	3018      	adds	r0, #24
    2d3a:	f00c fb0b 	bl	f354 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    2d3e:	0028      	movs	r0, r5
    2d40:	f000 f98c 	bl	305c <bt_conn_get_pkts>
    2d44:	3e01      	subs	r6, #1
    2d46:	f00c fd73 	bl	f830 <k_sem_give>
    2d4a:	b2b6      	uxth	r6, r6
    2d4c:	e7cd      	b.n	2cea <bt_recv_prio+0xba>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d1de      	bne.n	2d10 <bt_recv_prio+0xe0>
    2d52:	e7da      	b.n	2d0a <bt_recv_prio+0xda>
		net_buf_unref(buf);
		BT_ASSERT(0);
		return -EINVAL;
	}

	net_buf_unref(buf);
    2d54:	0020      	movs	r0, r4
    2d56:	f00b fbb3 	bl	e4c0 <net_buf_unref>

	return 0;
}
    2d5a:	2000      	movs	r0, #0
    2d5c:	b005      	add	sp, #20
    2d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d60:	200002f8 	.word	0x200002f8

00002d64 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    2d64:	4a09      	ldr	r2, [pc, #36]	; (2d8c <bt_hci_driver_register+0x28>)
    2d66:	32d8      	adds	r2, #216	; 0xd8
    2d68:	6813      	ldr	r3, [r2, #0]
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d108      	bne.n	2d80 <bt_hci_driver_register+0x1c>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    2d6e:	6881      	ldr	r1, [r0, #8]
    2d70:	2900      	cmp	r1, #0
    2d72:	d007      	beq.n	2d84 <bt_hci_driver_register+0x20>
    2d74:	68c1      	ldr	r1, [r0, #12]
    2d76:	2900      	cmp	r1, #0
    2d78:	d004      	beq.n	2d84 <bt_hci_driver_register+0x20>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    2d7a:	6010      	str	r0, [r2, #0]
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    2d7c:	0018      	movs	r0, r3
    2d7e:	e003      	b.n	2d88 <bt_hci_driver_register+0x24>
}

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
		return -EALREADY;
    2d80:	2045      	movs	r0, #69	; 0x45
    2d82:	e000      	b.n	2d86 <bt_hci_driver_register+0x22>
	}

	if (!drv->open || !drv->send) {
		return -EINVAL;
    2d84:	2016      	movs	r0, #22
    2d86:	4240      	negs	r0, r0

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
}
    2d88:	4770      	bx	lr
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	200002f8 	.word	0x200002f8

00002d90 <bt_enable>:
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    2d90:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
    2d92:	4d22      	ldr	r5, [pc, #136]	; (2e1c <bt_enable+0x8c>)
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    2d94:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
    2d96:	002f      	movs	r7, r5
    2d98:	37d8      	adds	r7, #216	; 0xd8
    2d9a:	683b      	ldr	r3, [r7, #0]
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    2d9c:	9007      	str	r0, [sp, #28]
	int err;

	if (!bt_dev.drv) {
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d032      	beq.n	2e08 <bt_enable+0x78>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2da2:	0028      	movs	r0, r5
    2da4:	2101      	movs	r1, #1
    2da6:	306c      	adds	r0, #108	; 0x6c
    2da8:	f00b fe88 	bl	eabc <atomic_or>

	return (old & mask) != 0;
    2dac:	2601      	movs	r6, #1
    2dae:	4030      	ands	r0, r6
    2db0:	1e04      	subs	r4, r0, #0
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    2db2:	d12b      	bne.n	2e0c <bt_enable+0x7c>
		return -EALREADY;
	}

	ready_cb = cb;
    2db4:	4b1a      	ldr	r3, [pc, #104]	; (2e20 <bt_enable+0x90>)
    2db6:	9a07      	ldr	r2, [sp, #28]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    2db8:	491a      	ldr	r1, [pc, #104]	; (2e24 <bt_enable+0x94>)

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
	}

	ready_cb = cb;
    2dba:	601a      	str	r2, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    2dbc:	2309      	movs	r3, #9
    2dbe:	22a0      	movs	r2, #160	; 0xa0
    2dc0:	425b      	negs	r3, r3
    2dc2:	9005      	str	r0, [sp, #20]
    2dc4:	9004      	str	r0, [sp, #16]
    2dc6:	9303      	str	r3, [sp, #12]
    2dc8:	9002      	str	r0, [sp, #8]
    2dca:	9001      	str	r0, [sp, #4]
    2dcc:	9000      	str	r0, [sp, #0]
    2dce:	4b16      	ldr	r3, [pc, #88]	; (2e28 <bt_enable+0x98>)
    2dd0:	0092      	lsls	r2, r2, #2
    2dd2:	4816      	ldr	r0, [pc, #88]	; (2e2c <bt_enable+0x9c>)
    2dd4:	f00c ff1e 	bl	fc14 <k_thread_create>

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    2dd8:	683b      	ldr	r3, [r7, #0]
    2dda:	689b      	ldr	r3, [r3, #8]
    2ddc:	4798      	blx	r3
	if (err) {
    2dde:	2800      	cmp	r0, #0
    2de0:	d117      	bne.n	2e12 <bt_enable+0x82>
		BT_ERR("HCI driver open failed (%d)", err);
		return err;
	}

	if (!cb) {
    2de2:	9b07      	ldr	r3, [sp, #28]
    2de4:	2b00      	cmp	r3, #0
    2de6:	d102      	bne.n	2dee <bt_enable+0x5e>
		return bt_init();
    2de8:	f7ff f82a 	bl	1e40 <bt_init>
    2dec:	e011      	b.n	2e12 <bt_enable+0x82>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2dee:	0028      	movs	r0, r5
    2df0:	0031      	movs	r1, r6
    2df2:	3068      	adds	r0, #104	; 0x68
    2df4:	f00b fe62 	bl	eabc <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    2df8:	4230      	tst	r0, r6
    2dfa:	d10b      	bne.n	2e14 <bt_enable+0x84>
		k_fifo_put(&work_q->fifo, work);
    2dfc:	0029      	movs	r1, r5
    2dfe:	480c      	ldr	r0, [pc, #48]	; (2e30 <bt_enable+0xa0>)
    2e00:	3160      	adds	r1, #96	; 0x60
    2e02:	f00c faa7 	bl	f354 <k_queue_append>
    2e06:	e005      	b.n	2e14 <bt_enable+0x84>
{
	int err;

	if (!bt_dev.drv) {
		BT_ERR("No HCI driver registered");
		return -ENODEV;
    2e08:	2413      	movs	r4, #19
    2e0a:	e000      	b.n	2e0e <bt_enable+0x7e>
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
    2e0c:	2445      	movs	r4, #69	; 0x45
    2e0e:	4264      	negs	r4, r4
    2e10:	e000      	b.n	2e14 <bt_enable+0x84>
    2e12:	0004      	movs	r4, r0
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    2e14:	0020      	movs	r0, r4
    2e16:	b009      	add	sp, #36	; 0x24
    2e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	200002f8 	.word	0x200002f8
    2e20:	2000089c 	.word	0x2000089c
    2e24:	20002184 	.word	0x20002184
    2e28:	00002459 	.word	0x00002459
    2e2c:	200008a4 	.word	0x200008a4
    2e30:	20001c48 	.word	0x20001c48

00002e34 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
    2e34:	2000      	movs	r0, #0
    2e36:	4770      	bx	lr

00002e38 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    2e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e3a:	b085      	sub	sp, #20
    2e3c:	9201      	str	r2, [sp, #4]
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2e3e:	7802      	ldrb	r2, [r0, #0]
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    2e40:	9303      	str	r3, [sp, #12]
    2e42:	0004      	movs	r4, r0
    2e44:	000d      	movs	r5, r1
    2e46:	8843      	ldrh	r3, [r0, #2]
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2e48:	07d2      	lsls	r2, r2, #31
    2e4a:	d407      	bmi.n	2e5c <bt_le_adv_start+0x24>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    2e4c:	4a4b      	ldr	r2, [pc, #300]	; (2f7c <bt_le_adv_start+0x144>)
    2e4e:	7b92      	ldrb	r2, [r2, #14]
    2e50:	2a08      	cmp	r2, #8
    2e52:	d803      	bhi.n	2e5c <bt_le_adv_start+0x24>
    2e54:	2b9f      	cmp	r3, #159	; 0x9f
    2e56:	d801      	bhi.n	2e5c <bt_le_adv_start+0x24>
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
    2e58:	2616      	movs	r6, #22
    2e5a:	e025      	b.n	2ea8 <bt_le_adv_start+0x70>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    2e5c:	88a2      	ldrh	r2, [r4, #4]
    2e5e:	4293      	cmp	r3, r2
    2e60:	d8fa      	bhi.n	2e58 <bt_le_adv_start+0x20>
    2e62:	2b1f      	cmp	r3, #31
    2e64:	d9f8      	bls.n	2e58 <bt_le_adv_start+0x20>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    2e66:	2380      	movs	r3, #128	; 0x80
    2e68:	01db      	lsls	r3, r3, #7
    2e6a:	429a      	cmp	r2, r3
    2e6c:	d8f4      	bhi.n	2e58 <bt_le_adv_start+0x20>

	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2e6e:	4f43      	ldr	r7, [pc, #268]	; (2f7c <bt_le_adv_start+0x144>)
    2e70:	2105      	movs	r1, #5
    2e72:	0038      	movs	r0, r7
    2e74:	306c      	adds	r0, #108	; 0x6c
    2e76:	f7fe fe0f 	bl	1a98 <atomic_test_bit>
    2e7a:	1e06      	subs	r6, r0, #0
    2e7c:	d178      	bne.n	2f70 <bt_le_adv_start+0x138>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    2e7e:	9a01      	ldr	r2, [sp, #4]
    2e80:	0029      	movs	r1, r5
    2e82:	483f      	ldr	r0, [pc, #252]	; (2f80 <bt_le_adv_start+0x148>)
    2e84:	f7fe ff4e 	bl	1d24 <set_ad>
	if (err) {
    2e88:	2800      	cmp	r0, #0
    2e8a:	d16f      	bne.n	2f6c <bt_le_adv_start+0x134>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2e8c:	9b03      	ldr	r3, [sp, #12]
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d10c      	bne.n	2eac <bt_le_adv_start+0x74>
    2e92:	7823      	ldrb	r3, [r4, #0]
    2e94:	07db      	lsls	r3, r3, #31
    2e96:	d409      	bmi.n	2eac <bt_le_adv_start+0x74>
		if (err) {
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    2e98:	210f      	movs	r1, #15
    2e9a:	483a      	ldr	r0, [pc, #232]	; (2f84 <bt_le_adv_start+0x14c>)
    2e9c:	f7fe fe34 	bl	1b08 <bt_hci_cmd_create>
    2ea0:	9001      	str	r0, [sp, #4]
				sizeof(*set_param));
	if (!buf) {
    2ea2:	2800      	cmp	r0, #0
    2ea4:	d10a      	bne.n	2ebc <bt_le_adv_start+0x84>
		return -ENOBUFS;
    2ea6:	2637      	movs	r6, #55	; 0x37
	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
    2ea8:	4276      	negs	r6, r6
    2eaa:	e063      	b.n	2f74 <bt_le_adv_start+0x13c>
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    2eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2eae:	9903      	ldr	r1, [sp, #12]
    2eb0:	4835      	ldr	r0, [pc, #212]	; (2f88 <bt_le_adv_start+0x150>)
    2eb2:	f7fe ff37 	bl	1d24 <set_ad>
		if (err) {
    2eb6:	2800      	cmp	r0, #0
    2eb8:	d0ee      	beq.n	2e98 <bt_le_adv_start+0x60>
    2eba:	e057      	b.n	2f6c <bt_le_adv_start+0x134>
				sizeof(*set_param));
	if (!buf) {
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    2ebc:	9801      	ldr	r0, [sp, #4]
    2ebe:	210f      	movs	r1, #15
    2ec0:	3008      	adds	r0, #8
    2ec2:	f00b fb1f 	bl	e504 <net_buf_simple_add>
    2ec6:	0005      	movs	r5, r0

	memset(set_param, 0, sizeof(*set_param));
    2ec8:	220f      	movs	r2, #15
    2eca:	2100      	movs	r1, #0
    2ecc:	f7fd ff0d 	bl	cea <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    2ed0:	78a3      	ldrb	r3, [r4, #2]
    2ed2:	702b      	strb	r3, [r5, #0]
    2ed4:	78e3      	ldrb	r3, [r4, #3]
    2ed6:	706b      	strb	r3, [r5, #1]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    2ed8:	7923      	ldrb	r3, [r4, #4]
    2eda:	70ab      	strb	r3, [r5, #2]
    2edc:	7963      	ldrb	r3, [r4, #5]
    2ede:	70eb      	strb	r3, [r5, #3]
	set_param->channel_map  = 0x07;
    2ee0:	2307      	movs	r3, #7
    2ee2:	736b      	strb	r3, [r5, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    2ee4:	7823      	ldrb	r3, [r4, #0]
    2ee6:	07db      	lsls	r3, r3, #31
    2ee8:	d50d      	bpl.n	2f06 <bt_le_adv_start+0xce>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (atomic_test_bit(bt_dev.flags,
    2eea:	0038      	movs	r0, r7
    2eec:	2102      	movs	r1, #2
    2eee:	306c      	adds	r0, #108	; 0x6c
    2ef0:	f7fe fdd2 	bl	1a98 <atomic_test_bit>
    2ef4:	2800      	cmp	r0, #0
    2ef6:	d002      	beq.n	2efe <bt_le_adv_start+0xc6>
					    BT_DEV_ID_STATIC_RANDOM)) {
				set_random_address(&bt_dev.id_addr.a);
    2ef8:	1c78      	adds	r0, r7, #1
    2efa:	f7fe fe67 	bl	1bcc <set_random_address>
			}

			set_param->own_addr_type = bt_dev.id_addr.type;
    2efe:	783b      	ldrb	r3, [r7, #0]
    2f00:	716b      	strb	r3, [r5, #5]
		}

		set_param->type = BT_LE_ADV_IND;
    2f02:	2300      	movs	r3, #0
    2f04:	e01c      	b.n	2f40 <bt_le_adv_start+0x108>
	} else {
		if (param->own_addr) {
    2f06:	68a0      	ldr	r0, [r4, #8]
    2f08:	2800      	cmp	r0, #0
    2f0a:	d006      	beq.n	2f1a <bt_le_adv_start+0xe2>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    2f0c:	223f      	movs	r2, #63	; 0x3f
    2f0e:	7943      	ldrb	r3, [r0, #5]
    2f10:	4393      	bics	r3, r2
    2f12:	d1a1      	bne.n	2e58 <bt_le_adv_start+0x20>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    2f14:	f7fe fe5a 	bl	1bcc <set_random_address>
    2f18:	e001      	b.n	2f1e <bt_le_adv_start+0xe6>
		} else {
			err = le_set_private_addr();
    2f1a:	f7fe fe85 	bl	1c28 <le_set_private_addr>
    2f1e:	9002      	str	r0, [sp, #8]
		}

		if (err) {
    2f20:	9b02      	ldr	r3, [sp, #8]
    2f22:	2b00      	cmp	r3, #0
    2f24:	d004      	beq.n	2f30 <bt_le_adv_start+0xf8>
			net_buf_unref(buf);
    2f26:	9801      	ldr	r0, [sp, #4]
    2f28:	f00b faca 	bl	e4c0 <net_buf_unref>
			return err;
    2f2c:	9e02      	ldr	r6, [sp, #8]
    2f2e:	e021      	b.n	2f74 <bt_le_adv_start+0x13c>
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    2f30:	2301      	movs	r3, #1
    2f32:	716b      	strb	r3, [r5, #5]

		if (sd) {
    2f34:	9b03      	ldr	r3, [sp, #12]
    2f36:	2b00      	cmp	r3, #0
    2f38:	d001      	beq.n	2f3e <bt_le_adv_start+0x106>
			set_param->type = BT_LE_ADV_SCAN_IND;
    2f3a:	2302      	movs	r3, #2
    2f3c:	e000      	b.n	2f40 <bt_le_adv_start+0x108>
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
    2f3e:	2303      	movs	r3, #3
    2f40:	712b      	strb	r3, [r5, #4]
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    2f42:	2200      	movs	r2, #0
    2f44:	9901      	ldr	r1, [sp, #4]
    2f46:	480f      	ldr	r0, [pc, #60]	; (2f84 <bt_le_adv_start+0x14c>)
    2f48:	f7fe fe04 	bl	1b54 <bt_hci_cmd_send_sync>
	if (err) {
    2f4c:	2800      	cmp	r0, #0
    2f4e:	d10d      	bne.n	2f6c <bt_le_adv_start+0x134>
		return err;
	}

	err = set_advertise_enable(true);
    2f50:	3001      	adds	r0, #1
    2f52:	f7fe febb 	bl	1ccc <set_advertise_enable>
	if (err) {
    2f56:	2800      	cmp	r0, #0
    2f58:	d108      	bne.n	2f6c <bt_le_adv_start+0x134>
		return err;
	}

	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    2f5a:	7823      	ldrb	r3, [r4, #0]
    2f5c:	079b      	lsls	r3, r3, #30
    2f5e:	d409      	bmi.n	2f74 <bt_le_adv_start+0x13c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2f60:	0038      	movs	r0, r7
    2f62:	2140      	movs	r1, #64	; 0x40
    2f64:	306c      	adds	r0, #108	; 0x6c
    2f66:	f00b fda9 	bl	eabc <atomic_or>
    2f6a:	e003      	b.n	2f74 <bt_le_adv_start+0x13c>
    2f6c:	0006      	movs	r6, r0
    2f6e:	e001      	b.n	2f74 <bt_le_adv_start+0x13c>
	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
    2f70:	2645      	movs	r6, #69	; 0x45
    2f72:	e799      	b.n	2ea8 <bt_le_adv_start+0x70>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    2f74:	0030      	movs	r0, r6
    2f76:	b005      	add	sp, #20
    2f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	200002f8 	.word	0x200002f8
    2f80:	00002008 	.word	0x00002008
    2f84:	00002006 	.word	0x00002006
    2f88:	00002009 	.word	0x00002009

00002f8c <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    2f8c:	b570      	push	{r4, r5, r6, lr}
    2f8e:	0005      	movs	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    2f90:	4806      	ldr	r0, [pc, #24]	; (2fac <bt_buf_get_rx+0x20>)
    2f92:	f00b fa21 	bl	e3d8 <net_buf_alloc>
    2f96:	1e04      	subs	r4, r0, #0
#endif

	if (buf) {
    2f98:	d006      	beq.n	2fa8 <bt_buf_get_rx+0x1c>
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    2f9a:	2100      	movs	r1, #0
    2f9c:	f00b fa7c 	bl	e498 <net_buf_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    2fa0:	0020      	movs	r0, r4
    2fa2:	f7fe fd73 	bl	1a8c <net_buf_user_data>
    2fa6:	7005      	strb	r5, [r0, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    2fa8:	0020      	movs	r0, r4
    2faa:	bd70      	pop	{r4, r5, r6, pc}
    2fac:	200007d4 	.word	0x200007d4

00002fb0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    2fb0:	b510      	push	{r4, lr}
    2fb2:	0001      	movs	r1, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    2fb4:	f3ef 8210 	mrs	r2, PRIMASK
    2fb8:	b672      	cpsid	i
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    2fba:	2000      	movs	r0, #0
{
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    2fbc:	4b0c      	ldr	r3, [pc, #48]	; (2ff0 <bt_buf_get_cmd_complete+0x40>)
    2fbe:	33ac      	adds	r3, #172	; 0xac
    2fc0:	681c      	ldr	r4, [r3, #0]
	bt_dev.sent_cmd = NULL;
    2fc2:	6018      	str	r0, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    2fc4:	4282      	cmp	r2, r0
    2fc6:	d100      	bne.n	2fca <bt_buf_get_cmd_complete+0x1a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    2fc8:	b662      	cpsie	i
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    2fca:	2c00      	cmp	r4, #0
    2fcc:	d00b      	beq.n	2fe6 <bt_buf_get_cmd_complete+0x36>
    2fce:	0020      	movs	r0, r4
    2fd0:	f7fe fd5c 	bl	1a8c <net_buf_user_data>
    2fd4:	2301      	movs	r3, #1
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    2fd6:	2100      	movs	r1, #0
    2fd8:	7003      	strb	r3, [r0, #0]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    2fda:	0020      	movs	r0, r4

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    2fdc:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    2fde:	f00b fa5b 	bl	e498 <net_buf_reserve>

		return buf;
    2fe2:	0020      	movs	r0, r4
    2fe4:	e002      	b.n	2fec <bt_buf_get_cmd_complete+0x3c>
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2fe6:	2001      	movs	r0, #1
    2fe8:	f7ff ffd0 	bl	2f8c <bt_buf_get_rx>
}
    2fec:	bd10      	pop	{r4, pc}
    2fee:	46c0      	nop			; (mov r8, r8)
    2ff0:	200002f8 	.word	0x200002f8

00002ff4 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    2ff4:	b570      	push	{r4, r5, r6, lr}
    2ff6:	0005      	movs	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    2ff8:	4b07      	ldr	r3, [pc, #28]	; (3018 <notify_connected+0x24>)
    2ffa:	681c      	ldr	r4, [r3, #0]
    2ffc:	2c00      	cmp	r4, #0
    2ffe:	d009      	beq.n	3014 <notify_connected+0x20>
		if (cb->connected) {
    3000:	6823      	ldr	r3, [r4, #0]
    3002:	2b00      	cmp	r3, #0
    3004:	d004      	beq.n	3010 <notify_connected+0x1c>
			cb->connected(conn, conn->err);
    3006:	002a      	movs	r2, r5
    3008:	324c      	adds	r2, #76	; 0x4c
    300a:	7811      	ldrb	r1, [r2, #0]
    300c:	0028      	movs	r0, r5
    300e:	4798      	blx	r3

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3010:	6924      	ldr	r4, [r4, #16]
    3012:	e7f3      	b.n	2ffc <notify_connected+0x8>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3014:	bd70      	pop	{r4, r5, r6, pc}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	20000928 	.word	0x20000928

0000301c <bt_conn_reset_rx_state>:
	cb->_next = callback_list;
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
    301c:	b510      	push	{r4, lr}
	if (!conn->rx_len) {
    301e:	8903      	ldrh	r3, [r0, #8]
	cb->_next = callback_list;
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
    3020:	0004      	movs	r4, r0
	if (!conn->rx_len) {
    3022:	2b00      	cmp	r3, #0
    3024:	d005      	beq.n	3032 <bt_conn_reset_rx_state+0x16>
		return;
	}

	net_buf_unref(conn->rx);
    3026:	68c0      	ldr	r0, [r0, #12]
    3028:	f00b fa4a 	bl	e4c0 <net_buf_unref>
	conn->rx = NULL;
    302c:	2300      	movs	r3, #0
    302e:	60e3      	str	r3, [r4, #12]
	conn->rx_len = 0;
    3030:	8123      	strh	r3, [r4, #8]
}
    3032:	bd10      	pop	{r4, pc}

00003034 <conn_cleanup>:
}

static struct k_poll_signal conn_change = K_POLL_SIGNAL_INITIALIZER();

static void conn_cleanup(struct bt_conn *conn)
{
    3034:	b510      	push	{r4, lr}
    3036:	0004      	movs	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    3038:	0020      	movs	r0, r4
    303a:	2100      	movs	r1, #0
    303c:	302c      	adds	r0, #44	; 0x2c
    303e:	f00b fa13 	bl	e468 <net_buf_get>
    3042:	2800      	cmp	r0, #0
    3044:	d002      	beq.n	304c <conn_cleanup+0x18>
		net_buf_unref(buf);
    3046:	f00b fa3b 	bl	e4c0 <net_buf_unref>
    304a:	e7f5      	b.n	3038 <conn_cleanup+0x4>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_reset_rx_state(conn);
    304c:	0020      	movs	r0, r4
    304e:	f7ff ffe5 	bl	301c <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    3052:	0020      	movs	r0, r4
    3054:	3048      	adds	r0, #72	; 0x48
    3056:	f00b fd1a 	bl	ea8e <atomic_dec>

	/* Release the reference we took for the very first
	 * state transition.
	 */
	bt_conn_unref(conn);
}
    305a:	bd10      	pop	{r4, pc}

0000305c <bt_conn_get_pkts>:
		return &bt_dev.br.pkts;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return &bt_dev.le.pkts;
}
    305c:	4800      	ldr	r0, [pc, #0]	; (3060 <bt_conn_get_pkts+0x4>)
    305e:	4770      	bx	lr
    3060:	2000037c 	.word	0x2000037c

00003064 <notify_le_param_updated>:
		}
	}
}

void notify_le_param_updated(struct bt_conn *conn)
{
    3064:	b570      	push	{r4, r5, r6, lr}
    3066:	0005      	movs	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3068:	4b0a      	ldr	r3, [pc, #40]	; (3094 <notify_le_param_updated+0x30>)
    306a:	681c      	ldr	r4, [r3, #0]
    306c:	2c00      	cmp	r4, #0
    306e:	d00f      	beq.n	3090 <notify_le_param_updated+0x2c>
		if (cb->le_param_updated) {
    3070:	68e6      	ldr	r6, [r4, #12]
    3072:	2e00      	cmp	r6, #0
    3074:	d00a      	beq.n	308c <notify_le_param_updated+0x28>
			cb->le_param_updated(conn, conn->le.interval,
    3076:	002b      	movs	r3, r5
    3078:	002a      	movs	r2, r5
    307a:	0029      	movs	r1, r5
    307c:	336e      	adds	r3, #110	; 0x6e
    307e:	326c      	adds	r2, #108	; 0x6c
    3080:	3166      	adds	r1, #102	; 0x66
    3082:	881b      	ldrh	r3, [r3, #0]
    3084:	8812      	ldrh	r2, [r2, #0]
    3086:	8809      	ldrh	r1, [r1, #0]
    3088:	0028      	movs	r0, r5
    308a:	47b0      	blx	r6

void notify_le_param_updated(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    308c:	6924      	ldr	r4, [r4, #16]
    308e:	e7ed      	b.n	306c <notify_le_param_updated+0x8>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    3090:	bd70      	pop	{r4, r5, r6, pc}
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	20000928 	.word	0x20000928

00003098 <le_param_req>:

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    3098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    309a:	0007      	movs	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    309c:	0008      	movs	r0, r1
		}
	}
}

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    309e:	000e      	movs	r6, r1
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    30a0:	f7fe fe84 	bl	1dac <bt_le_conn_params_valid>
    30a4:	1e05      	subs	r5, r0, #0
    30a6:	d101      	bne.n	30ac <le_param_req+0x14>
		return false;
    30a8:	2500      	movs	r5, #0
    30aa:	e013      	b.n	30d4 <le_param_req+0x3c>
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    30ac:	4b0a      	ldr	r3, [pc, #40]	; (30d8 <le_param_req+0x40>)
    30ae:	681c      	ldr	r4, [r3, #0]
    30b0:	2c00      	cmp	r4, #0
    30b2:	d00f      	beq.n	30d4 <le_param_req+0x3c>
		if (!cb->le_param_req) {
    30b4:	68a3      	ldr	r3, [r4, #8]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d101      	bne.n	30be <le_param_req+0x26>

	if (!bt_le_conn_params_valid(param)) {
		return false;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    30ba:	6924      	ldr	r4, [r4, #16]
    30bc:	e7f8      	b.n	30b0 <le_param_req+0x18>
		if (!cb->le_param_req) {
			continue;
		}

		if (!cb->le_param_req(conn, param)) {
    30be:	0031      	movs	r1, r6
    30c0:	0038      	movs	r0, r7
    30c2:	4798      	blx	r3
    30c4:	2800      	cmp	r0, #0
    30c6:	d0ef      	beq.n	30a8 <le_param_req+0x10>
		}

		/* The callback may modify the parameters so we need to
		 * double-check that it returned valid parameters.
		 */
		if (!bt_le_conn_params_valid(param)) {
    30c8:	0030      	movs	r0, r6
    30ca:	f7fe fe6f 	bl	1dac <bt_le_conn_params_valid>
    30ce:	2800      	cmp	r0, #0
    30d0:	d1f3      	bne.n	30ba <le_param_req+0x22>
    30d2:	e7e9      	b.n	30a8 <le_param_req+0x10>
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    30d4:	0028      	movs	r0, r5
    30d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30d8:	20000928 	.word	0x20000928

000030dc <bt_conn_cb_register>:
}
#endif /* CONFIG_BLUETOOTH_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    30dc:	4b02      	ldr	r3, [pc, #8]	; (30e8 <bt_conn_cb_register+0xc>)
    30de:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    30e0:	6018      	str	r0, [r3, #0]
}
#endif /* CONFIG_BLUETOOTH_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    30e2:	6102      	str	r2, [r0, #16]
	callback_list = cb;
}
    30e4:	4770      	bx	lr
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	20000928 	.word	0x20000928

000030ec <bt_conn_recv>:
	conn->rx = NULL;
	conn->rx_len = 0;
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    30ec:	b570      	push	{r4, r5, r6, lr}
    30ee:	0004      	movs	r4, r0
    30f0:	000d      	movs	r5, r1
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    30f2:	2a01      	cmp	r2, #1
    30f4:	d014      	beq.n	3120 <bt_conn_recv+0x34>
    30f6:	2a02      	cmp	r2, #2
    30f8:	d132      	bne.n	3160 <bt_conn_recv+0x74>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    30fa:	688b      	ldr	r3, [r1, #8]
    30fc:	785e      	ldrb	r6, [r3, #1]
    30fe:	781a      	ldrb	r2, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    3100:	8903      	ldrh	r3, [r0, #8]

	/* Check packet boundary flags */
	switch (flags) {
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3102:	0236      	lsls	r6, r6, #8
    3104:	4316      	orrs	r6, r2

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    3106:	2b00      	cmp	r3, #0
    3108:	d001      	beq.n	310e <bt_conn_recv+0x22>
			BT_ERR("Unexpected first L2CAP frame");
			bt_conn_reset_rx_state(conn);
    310a:	f7ff ff87 	bl	301c <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    310e:	89ab      	ldrh	r3, [r5, #12]
    3110:	3604      	adds	r6, #4
    3112:	1af3      	subs	r3, r6, r3
    3114:	b29b      	uxth	r3, r3
    3116:	8123      	strh	r3, [r4, #8]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    3118:	2b00      	cmp	r3, #0
    311a:	d025      	beq.n	3168 <bt_conn_recv+0x7c>
			conn->rx = buf;
    311c:	60e5      	str	r5, [r4, #12]
			return;
    311e:	e034      	b.n	318a <bt_conn_recv+0x9e>
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    3120:	8903      	ldrh	r3, [r0, #8]
    3122:	2b00      	cmp	r3, #0
    3124:	d01c      	beq.n	3160 <bt_conn_recv+0x74>
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
			return;
		}

		if (buf->len > conn->rx_len) {
    3126:	898e      	ldrh	r6, [r1, #12]
    3128:	42b3      	cmp	r3, r6
    312a:	d319      	bcc.n	3160 <bt_conn_recv+0x74>
			return;
		}

		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);

		if (buf->len > net_buf_tailroom(conn->rx)) {
    312c:	68c0      	ldr	r0, [r0, #12]
    312e:	3008      	adds	r0, #8
    3130:	f00b fa29 	bl	e586 <net_buf_simple_tailroom>
    3134:	4286      	cmp	r6, r0
    3136:	d813      	bhi.n	3160 <bt_conn_recv+0x74>
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
			return;
		}

		net_buf_add_mem(conn->rx, buf->data, buf->len);
    3138:	68e0      	ldr	r0, [r4, #12]
    313a:	89aa      	ldrh	r2, [r5, #12]
    313c:	68a9      	ldr	r1, [r5, #8]
    313e:	3008      	adds	r0, #8
    3140:	f00b f9e7 	bl	e512 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    3144:	8923      	ldrh	r3, [r4, #8]
    3146:	89aa      	ldrh	r2, [r5, #12]
		net_buf_unref(buf);
    3148:	0028      	movs	r0, r5
			net_buf_unref(buf);
			return;
		}

		net_buf_add_mem(conn->rx, buf->data, buf->len);
		conn->rx_len -= buf->len;
    314a:	1a9b      	subs	r3, r3, r2
    314c:	8123      	strh	r3, [r4, #8]
		net_buf_unref(buf);
    314e:	f00b f9b7 	bl	e4c0 <net_buf_unref>

		if (conn->rx_len) {
    3152:	8923      	ldrh	r3, [r4, #8]
    3154:	2b00      	cmp	r3, #0
    3156:	d118      	bne.n	318a <bt_conn_recv+0x9e>
			return;
		}

		buf = conn->rx;
    3158:	68e5      	ldr	r5, [r4, #12]
		conn->rx = NULL;
		conn->rx_len = 0;
    315a:	8123      	strh	r3, [r4, #8]
		if (conn->rx_len) {
			return;
		}

		buf = conn->rx;
		conn->rx = NULL;
    315c:	60e3      	str	r3, [r4, #12]
		conn->rx_len = 0;

		break;
    315e:	e003      	b.n	3168 <bt_conn_recv+0x7c>
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
		bt_conn_reset_rx_state(conn);
    3160:	0020      	movs	r0, r4
    3162:	f7ff ff5b 	bl	301c <bt_conn_reset_rx_state>
    3166:	e008      	b.n	317a <bt_conn_recv+0x8e>
		net_buf_unref(buf);
		return;
	}

	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);
    3168:	68ab      	ldr	r3, [r5, #8]
    316a:	781a      	ldrb	r2, [r3, #0]
    316c:	785b      	ldrb	r3, [r3, #1]
    316e:	021b      	lsls	r3, r3, #8

	if (sizeof(*hdr) + len != buf->len) {
    3170:	4313      	orrs	r3, r2
    3172:	89aa      	ldrh	r2, [r5, #12]
    3174:	3304      	adds	r3, #4
    3176:	4293      	cmp	r3, r2
    3178:	d003      	beq.n	3182 <bt_conn_recv+0x96>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
		net_buf_unref(buf);
    317a:	0028      	movs	r0, r5
    317c:	f00b f9a0 	bl	e4c0 <net_buf_unref>
		return;
    3180:	e003      	b.n	318a <bt_conn_recv+0x9e>
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
    3182:	0029      	movs	r1, r5
    3184:	0020      	movs	r0, r4
    3186:	f000 fcb4 	bl	3af2 <bt_l2cap_recv>
}
    318a:	bd70      	pop	{r4, r5, r6, pc}

0000318c <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    318c:	b570      	push	{r4, r5, r6, lr}
    318e:	0005      	movs	r5, r0
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    3190:	7988      	ldrb	r0, [r1, #6]
	bt_l2cap_recv(conn, buf);
}

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    3192:	000c      	movs	r4, r1
    3194:	0016      	movs	r6, r2
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    3196:	f00b f917 	bl	e3c8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    319a:	8b43      	ldrh	r3, [r0, #26]
    319c:	2b03      	cmp	r3, #3
    319e:	d804      	bhi.n	31aa <bt_conn_send_cb+0x1e>
		BT_ERR("Too small user data size");
		net_buf_unref(buf);
    31a0:	0020      	movs	r0, r4
    31a2:	f00b f98d 	bl	e4c0 <net_buf_unref>
		return -EINVAL;
    31a6:	2016      	movs	r0, #22
    31a8:	e008      	b.n	31bc <bt_conn_send_cb+0x30>
	}

	if (conn->state != BT_CONN_CONNECTED) {
    31aa:	002b      	movs	r3, r5
    31ac:	334d      	adds	r3, #77	; 0x4d
    31ae:	781a      	ldrb	r2, [r3, #0]
    31b0:	2a03      	cmp	r2, #3
    31b2:	d005      	beq.n	31c0 <bt_conn_send_cb+0x34>
		BT_ERR("not connected!");
		net_buf_unref(buf);
    31b4:	0020      	movs	r0, r4
    31b6:	f00b f983 	bl	e4c0 <net_buf_unref>
		return -ENOTCONN;
    31ba:	2039      	movs	r0, #57	; 0x39
    31bc:	4240      	negs	r0, r0
    31be:	e00a      	b.n	31d6 <bt_conn_send_cb+0x4a>
	}

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
    31c0:	0028      	movs	r0, r5
		BT_ERR("not connected!");
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	conn_tx(buf)->cb = cb;
    31c2:	89e3      	ldrh	r3, [r4, #14]

	net_buf_put(&conn->tx_queue, buf);
    31c4:	302c      	adds	r0, #44	; 0x2c
		BT_ERR("not connected!");
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	conn_tx(buf)->cb = cb;
    31c6:	18e3      	adds	r3, r4, r3
    31c8:	3313      	adds	r3, #19
    31ca:	4393      	bics	r3, r2
    31cc:	601e      	str	r6, [r3, #0]

	net_buf_put(&conn->tx_queue, buf);
    31ce:	0021      	movs	r1, r4
    31d0:	f00b f967 	bl	e4a2 <net_buf_put>
	return 0;
    31d4:	2000      	movs	r0, #0
}
    31d6:	bd70      	pop	{r4, r5, r6, pc}

000031d8 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    31d8:	b570      	push	{r4, r5, r6, lr}
    31da:	0005      	movs	r5, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    31dc:	0028      	movs	r0, r5
    31de:	2100      	movs	r1, #0
    31e0:	3018      	adds	r0, #24
    31e2:	f00c f907 	bl	f3f4 <k_queue_get>
    31e6:	1e04      	subs	r4, r0, #0
    31e8:	d00f      	beq.n	320a <bt_conn_notify_tx+0x32>
		if (tx->cb) {
    31ea:	6863      	ldr	r3, [r4, #4]
    31ec:	2b00      	cmp	r3, #0
    31ee:	d001      	beq.n	31f4 <bt_conn_notify_tx+0x1c>
			tx->cb(conn);
    31f0:	0028      	movs	r0, r5
    31f2:	4798      	blx	r3
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    31f4:	2300      	movs	r3, #0
    31f6:	6063      	str	r3, [r4, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    31f8:	4b04      	ldr	r3, [pc, #16]	; (320c <bt_conn_notify_tx+0x34>)
    31fa:	681a      	ldr	r2, [r3, #0]
    31fc:	6022      	str	r2, [r4, #0]
	list->head = node;

	if (!list->tail) {
    31fe:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    3200:	601c      	str	r4, [r3, #0]

	if (!list->tail) {
    3202:	2a00      	cmp	r2, #0
    3204:	d1ea      	bne.n	31dc <bt_conn_notify_tx+0x4>
		list->tail = list->head;
    3206:	605c      	str	r4, [r3, #4]
    3208:	e7e8      	b.n	31dc <bt_conn_notify_tx+0x4>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    320a:	bd70      	pop	{r4, r5, r6, pc}
    320c:	20000904 	.word	0x20000904

00003210 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3210:	b5f0      	push	{r4, r5, r6, r7, lr}
    3212:	000f      	movs	r7, r1

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    3214:	2101      	movs	r1, #1
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3216:	0005      	movs	r5, r0

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    3218:	4c40      	ldr	r4, [pc, #256]	; (331c <send_frag+0x10c>)
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    321a:	b085      	sub	sp, #20

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    321c:	4249      	negs	r1, r1
    321e:	0020      	movs	r0, r4
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3220:	9302      	str	r3, [sp, #8]
    3222:	9201      	str	r2, [sp, #4]

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    3224:	f00c fb40 	bl	f8a8 <k_sem_take>

	/* Make sure we notify and free up any pending tx contexts */
	bt_conn_notify_tx(conn);
    3228:	0028      	movs	r0, r5
    322a:	f7ff ffd5 	bl	31d8 <bt_conn_notify_tx>

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    322e:	002b      	movs	r3, r5
    3230:	334d      	adds	r3, #77	; 0x4d
    3232:	781e      	ldrb	r6, [r3, #0]
    3234:	9403      	str	r4, [sp, #12]
    3236:	2e03      	cmp	r6, #3
    3238:	d161      	bne.n	32fe <send_frag+0xee>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    323a:	0038      	movs	r0, r7
    323c:	2104      	movs	r1, #4
    323e:	3008      	adds	r0, #8
    3240:	f00b f979 	bl	e536 <net_buf_simple_push>
    3244:	2102      	movs	r1, #2
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3246:	9b01      	ldr	r3, [sp, #4]
    3248:	031c      	lsls	r4, r3, #12
    324a:	882b      	ldrh	r3, [r5, #0]
    324c:	431c      	orrs	r4, r3
    324e:	b2a4      	uxth	r4, r4
    3250:	7004      	strb	r4, [r0, #0]
    3252:	0a24      	lsrs	r4, r4, #8
    3254:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3256:	89bb      	ldrh	r3, [r7, #12]
    3258:	3b04      	subs	r3, #4
    325a:	b29b      	uxth	r3, r3
    325c:	7083      	strb	r3, [r0, #2]
    325e:	0a1b      	lsrs	r3, r3, #8
    3260:	70c3      	strb	r3, [r0, #3]
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    3262:	89fb      	ldrh	r3, [r7, #14]
    3264:	18fb      	adds	r3, r7, r3
    3266:	3313      	adds	r3, #19
    3268:	43b3      	bics	r3, r6
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;
    326a:	4e2d      	ldr	r6, [pc, #180]	; (3320 <send_frag+0x110>)

	cb = conn_tx(buf)->cb;
    326c:	681a      	ldr	r2, [r3, #0]
    326e:	7019      	strb	r1, [r3, #0]
    3270:	6834      	ldr	r4, [r6, #0]

	list->head = node->next;
	if (list->tail == node) {
    3272:	6871      	ldr	r1, [r6, #4]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    3274:	6823      	ldr	r3, [r4, #0]
    3276:	6033      	str	r3, [r6, #0]
	if (list->tail == node) {
    3278:	428c      	cmp	r4, r1
    327a:	d100      	bne.n	327e <send_frag+0x6e>
		list->tail = list->head;
    327c:	6073      	str	r3, [r6, #4]
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    327e:	6062      	str	r2, [r4, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    3280:	f3ef 8210 	mrs	r2, PRIMASK
    3284:	b672      	cpsid	i
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    3286:	2300      	movs	r3, #0
    3288:	6023      	str	r3, [r4, #0]

	if (!list->tail) {
    328a:	696b      	ldr	r3, [r5, #20]
    328c:	2b00      	cmp	r3, #0
    328e:	d102      	bne.n	3296 <send_frag+0x86>
		list->tail = node;
    3290:	616c      	str	r4, [r5, #20]
		list->head = node;
    3292:	612c      	str	r4, [r5, #16]
    3294:	e001      	b.n	329a <send_frag+0x8a>
	} else {
		list->tail->next = node;
    3296:	601c      	str	r4, [r3, #0]
		list->tail = node;
    3298:	616c      	str	r4, [r5, #20]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    329a:	2a00      	cmp	r2, #0
    329c:	d100      	bne.n	32a0 <send_frag+0x90>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    329e:	b662      	cpsie	i
	cb = conn_tx(buf)->cb;
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    32a0:	0038      	movs	r0, r7
    32a2:	f7ff f835 	bl	2310 <bt_send>
		BT_ERR("Unable to send to driver (err %d)", err);
		remove_pending_tx(conn, node);
		goto fail;
	}

	return true;
    32a6:	2301      	movs	r3, #1
    32a8:	9301      	str	r3, [sp, #4]
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
	if (err) {
    32aa:	2800      	cmp	r0, #0
    32ac:	d032      	beq.n	3314 <send_frag+0x104>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    32ae:	f3ef 8010 	mrs	r0, PRIMASK
    32b2:	b672      	cpsid	i
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    32b4:	2200      	movs	r2, #0
    32b6:	692b      	ldr	r3, [r5, #16]
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    32b8:	2b00      	cmp	r3, #0
    32ba:	d014      	beq.n	32e6 <send_frag+0xd6>
		if (test == node) {
    32bc:	429c      	cmp	r4, r3
    32be:	d10f      	bne.n	32e0 <send_frag+0xd0>
    32c0:	6823      	ldr	r3, [r4, #0]
    32c2:	6969      	ldr	r1, [r5, #20]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    32c4:	2a00      	cmp	r2, #0
    32c6:	d104      	bne.n	32d2 <send_frag+0xc2>
		list->head = node->next;
    32c8:	612b      	str	r3, [r5, #16]

		/* Was node also the tail? */
		if (list->tail == node) {
    32ca:	428c      	cmp	r4, r1
    32cc:	d105      	bne.n	32da <send_frag+0xca>
			list->tail = list->head;
    32ce:	616b      	str	r3, [r5, #20]
    32d0:	e003      	b.n	32da <send_frag+0xca>
		}
	} else {
		prev_node->next = node->next;
    32d2:	6013      	str	r3, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    32d4:	428c      	cmp	r4, r1
    32d6:	d100      	bne.n	32da <send_frag+0xca>
			list->tail = prev_node;
    32d8:	616a      	str	r2, [r5, #20]
		}
	}

	node->next = NULL;
    32da:	2300      	movs	r3, #0
    32dc:	6023      	str	r3, [r4, #0]
    32de:	e002      	b.n	32e6 <send_frag+0xd6>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    32e0:	001a      	movs	r2, r3
    32e2:	681b      	ldr	r3, [r3, #0]
    32e4:	e7e8      	b.n	32b8 <send_frag+0xa8>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    32e6:	2800      	cmp	r0, #0
    32e8:	d100      	bne.n	32ec <send_frag+0xdc>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    32ea:	b662      	cpsie	i
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    32ec:	2300      	movs	r3, #0
    32ee:	6063      	str	r3, [r4, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    32f0:	6833      	ldr	r3, [r6, #0]
    32f2:	6023      	str	r3, [r4, #0]
	list->head = node;

	if (!list->tail) {
    32f4:	6873      	ldr	r3, [r6, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    32f6:	6034      	str	r4, [r6, #0]

	if (!list->tail) {
    32f8:	2b00      	cmp	r3, #0
    32fa:	d100      	bne.n	32fe <send_frag+0xee>
		list->tail = list->head;
    32fc:	6074      	str	r4, [r6, #4]
	}

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
    32fe:	9803      	ldr	r0, [sp, #12]
    3300:	f00c fa96 	bl	f830 <k_sem_give>
	if (always_consume) {
		net_buf_unref(buf);
	}
	return false;
    3304:	2300      	movs	r3, #0
    3306:	9301      	str	r3, [sp, #4]

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    3308:	9b02      	ldr	r3, [sp, #8]
    330a:	2b00      	cmp	r3, #0
    330c:	d002      	beq.n	3314 <send_frag+0x104>
		net_buf_unref(buf);
    330e:	0038      	movs	r0, r7
    3310:	f00b f8d6 	bl	e4c0 <net_buf_unref>
	}
	return false;
}
    3314:	9801      	ldr	r0, [sp, #4]
    3316:	b005      	add	sp, #20
    3318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	2000037c 	.word	0x2000037c
    3320:	20000904 	.word	0x20000904

00003324 <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    3324:	2200      	movs	r2, #0
    3326:	4b1d      	ldr	r3, [pc, #116]	; (339c <bt_conn_prepare_events+0x78>)
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    3328:	b570      	push	{r4, r5, r6, lr}
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    332a:	2101      	movs	r1, #1
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    332c:	0005      	movs	r5, r0
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    332e:	605a      	str	r2, [r3, #4]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    3330:	f00b fe50 	bl	efd4 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    3334:	4c1a      	ldr	r4, [pc, #104]	; (33a0 <bt_conn_prepare_events+0x7c>)
    3336:	0020      	movs	r0, r4
    3338:	3048      	adds	r0, #72	; 0x48
    333a:	f00b fbb3 	bl	eaa4 <atomic_get>
    333e:	0026      	movs	r6, r4
    3340:	2800      	cmp	r0, #0
    3342:	d00e      	beq.n	3362 <bt_conn_prepare_events+0x3e>
			continue;
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
    3344:	0023      	movs	r3, r4
    3346:	334d      	adds	r3, #77	; 0x4d
    3348:	781b      	ldrb	r3, [r3, #0]
    334a:	2b00      	cmp	r3, #0
    334c:	d10b      	bne.n	3366 <bt_conn_prepare_events+0x42>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    334e:	2141      	movs	r1, #65	; 0x41
    3350:	1d20      	adds	r0, r4, #4
    3352:	4249      	negs	r1, r1
    3354:	f00b fbbd 	bl	ead2 <atomic_and>
    3358:	0643      	lsls	r3, r0, #25
    335a:	d504      	bpl.n	3366 <bt_conn_prepare_events+0x42>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
    335c:	0020      	movs	r0, r4
    335e:	f7ff fe69 	bl	3034 <conn_cleanup>
			continue;
    3362:	2001      	movs	r0, #1
    3364:	e019      	b.n	339a <bt_conn_prepare_events+0x76>
		}

		if (conn->state != BT_CONN_CONNECTED) {
    3366:	0033      	movs	r3, r6
    3368:	334d      	adds	r3, #77	; 0x4d
    336a:	781c      	ldrb	r4, [r3, #0]
    336c:	2c03      	cmp	r4, #3
    336e:	d1f8      	bne.n	3362 <bt_conn_prepare_events+0x3e>
			continue;
		}

		BT_DBG("Adding conn %p to poll list", conn);

		k_poll_event_init(&events[ev_count],
    3370:	0033      	movs	r3, r6
    3372:	0028      	movs	r0, r5
    3374:	332c      	adds	r3, #44	; 0x2c
    3376:	300c      	adds	r0, #12
    3378:	2200      	movs	r2, #0
    337a:	2104      	movs	r1, #4
    337c:	f00b fe2a 	bl	efd4 <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    3380:	2302      	movs	r3, #2

		k_poll_event_init(&events[ev_count],
    3382:	0028      	movs	r0, r5

		k_poll_event_init(&events[ev_count],
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    3384:	742b      	strb	r3, [r5, #16]

		k_poll_event_init(&events[ev_count],
    3386:	0033      	movs	r3, r6
    3388:	3018      	adds	r0, #24
    338a:	3318      	adds	r3, #24
    338c:	2200      	movs	r2, #0
    338e:	2104      	movs	r1, #4
    3390:	f00b fe20 	bl	efd4 <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_notify);
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    3394:	2301      	movs	r3, #1
    3396:	0020      	movs	r0, r4
    3398:	772b      	strb	r3, [r5, #28]
	}

	return ev_count;
}
    339a:	bd70      	pop	{r4, r5, r6, pc}
    339c:	2000090c 	.word	0x2000090c
    33a0:	2000092c 	.word	0x2000092c

000033a4 <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    33a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    33a6:	4c15      	ldr	r4, [pc, #84]	; (33fc <bt_conn_add_le+0x58>)
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    33a8:	0007      	movs	r7, r0
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    33aa:	0026      	movs	r6, r4
    33ac:	3648      	adds	r6, #72	; 0x48
    33ae:	0030      	movs	r0, r6
    33b0:	f00b fb78 	bl	eaa4 <atomic_get>
    33b4:	0005      	movs	r5, r0
struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    33b6:	2000      	movs	r0, #0
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    33b8:	2d00      	cmp	r5, #0
    33ba:	d11d      	bne.n	33f8 <bt_conn_add_le+0x54>

	if (!conn) {
		return NULL;
	}

	memset(conn, 0, sizeof(*conn));
    33bc:	22a4      	movs	r2, #164	; 0xa4
    33be:	0029      	movs	r1, r5
    33c0:	0020      	movs	r0, r4
    33c2:	f7fd fc92 	bl	cea <memset>

	atomic_set(&conn->ref, 1);
    33c6:	2101      	movs	r1, #1
    33c8:	0030      	movs	r0, r6
    33ca:	f00b fb6d 	bl	eaa8 <atomic_set>
    33ce:	0020      	movs	r0, r4
    33d0:	2207      	movs	r2, #7
    33d2:	0039      	movs	r1, r7
    33d4:	3050      	adds	r0, #80	; 0x50
    33d6:	f7fd fc5e 	bl	c96 <memcpy>
#if defined(CONFIG_BLUETOOTH_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    33da:	0023      	movs	r3, r4
    33dc:	2218      	movs	r2, #24
    33de:	3368      	adds	r3, #104	; 0x68
    33e0:	801a      	strh	r2, [r3, #0]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    33e2:	0023      	movs	r3, r4
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    33e4:	0020      	movs	r0, r4
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    33e6:	336a      	adds	r3, #106	; 0x6a
    33e8:	3210      	adds	r2, #16
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    33ea:	307c      	adds	r0, #124	; 0x7c
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BLUETOOTH_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
    33ec:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    33ee:	801a      	strh	r2, [r3, #0]
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    33f0:	4903      	ldr	r1, [pc, #12]	; (3400 <bt_conn_add_le+0x5c>)
    33f2:	f00c fce9 	bl	fdc8 <k_delayed_work_init>
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
			conn = &conns[i];
    33f6:	0020      	movs	r0, r4
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
	k_delayed_work_init(&conn->le.update_work, le_conn_update);

	return conn;
}
    33f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	2000092c 	.word	0x2000092c
    3400:	000036e9 	.word	0x000036e9

00003404 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    3404:	b570      	push	{r4, r5, r6, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    3406:	0006      	movs	r6, r0
    3408:	364d      	adds	r6, #77	; 0x4d
    340a:	7835      	ldrb	r5, [r6, #0]
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    340c:	0004      	movs	r4, r0
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    340e:	428d      	cmp	r5, r1
    3410:	d07c      	beq.n	350c <bt_conn_set_state+0x108>
		BT_WARN("no transition");
		return;
	}

	old_state = conn->state;
	conn->state = state;
    3412:	7031      	strb	r1, [r6, #0]

	/* Actions needed for exiting the old state */
	switch (old_state) {
    3414:	2d00      	cmp	r5, #0
    3416:	d102      	bne.n	341e <bt_conn_set_state+0x1a>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    3418:	3048      	adds	r0, #72	; 0x48
    341a:	f00b fb2d 	bl	ea78 <atomic_inc>
	default:
		break;
	}

	/* Actions needed for entering the new state */
	switch (conn->state) {
    341e:	7833      	ldrb	r3, [r6, #0]
    3420:	2b00      	cmp	r3, #0
    3422:	d01a      	beq.n	345a <bt_conn_set_state+0x56>
    3424:	2b03      	cmp	r3, #3
    3426:	d171      	bne.n	350c <bt_conn_set_state+0x108>
	case BT_CONN_CONNECTED:
		if (conn->type == BT_CONN_TYPE_SCO) {
    3428:	78a3      	ldrb	r3, [r4, #2]
    342a:	2b02      	cmp	r3, #2
    342c:	d06e      	beq.n	350c <bt_conn_set_state+0x108>
			/* TODO: Notify sco connected */
			break;
		}
		k_fifo_init(&conn->tx_queue);
    342e:	0020      	movs	r0, r4
    3430:	302c      	adds	r0, #44	; 0x2c
    3432:	f00b ff43 	bl	f2bc <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    3436:	0020      	movs	r0, r4
    3438:	3018      	adds	r0, #24
    343a:	f00b ff3f 	bl	f2bc <k_queue_init>
		k_poll_signal(&conn_change, 0);
    343e:	2100      	movs	r1, #0
    3440:	4833      	ldr	r0, [pc, #204]	; (3510 <bt_conn_set_state+0x10c>)
    3442:	f00b fea9 	bl	f198 <k_poll_signal>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    3446:	2300      	movs	r3, #0

		sys_slist_init(&conn->channels);

		bt_l2cap_connected(conn);
    3448:	0020      	movs	r0, r4
    344a:	6423      	str	r3, [r4, #64]	; 0x40
	list->tail = NULL;
    344c:	6463      	str	r3, [r4, #68]	; 0x44
    344e:	f000 fa81 	bl	3954 <bt_l2cap_connected>
		notify_connected(conn);
    3452:	0020      	movs	r0, r4
    3454:	f7ff fdce 	bl	2ff4 <notify_connected>
		break;
    3458:	e058      	b.n	350c <bt_conn_set_state+0x108>
	case BT_CONN_DISCONNECTED:
		if (conn->type == BT_CONN_TYPE_SCO) {
    345a:	78a3      	ldrb	r3, [r4, #2]
    345c:	2b02      	cmp	r3, #2
    345e:	d037      	beq.n	34d0 <bt_conn_set_state+0xcc>
		}
		/* Notify disconnection and queue a dummy buffer to wake
		 * up and stop the tx thread for states where it was
		 * running.
		 */
		if (old_state == BT_CONN_CONNECTED ||
    3460:	1eeb      	subs	r3, r5, #3
    3462:	2b01      	cmp	r3, #1
    3464:	d82f      	bhi.n	34c6 <bt_conn_set_state+0xc2>
		    old_state == BT_CONN_DISCONNECT) {
			bt_l2cap_disconnected(conn);
    3466:	0020      	movs	r0, r4
    3468:	f000 faae 	bl	39c8 <bt_l2cap_disconnected>

static void notify_disconnected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    346c:	4b29      	ldr	r3, [pc, #164]	; (3514 <bt_conn_set_state+0x110>)
    346e:	681d      	ldr	r5, [r3, #0]
    3470:	2d00      	cmp	r5, #0
    3472:	d021      	beq.n	34b8 <bt_conn_set_state+0xb4>
		if (cb->disconnected) {
    3474:	686b      	ldr	r3, [r5, #4]
    3476:	2b00      	cmp	r3, #0
    3478:	d004      	beq.n	3484 <bt_conn_set_state+0x80>
			cb->disconnected(conn, conn->err);
    347a:	0022      	movs	r2, r4
    347c:	324c      	adds	r2, #76	; 0x4c
    347e:	7811      	ldrb	r1, [r2, #0]
    3480:	0020      	movs	r0, r4
    3482:	4798      	blx	r3

static void notify_disconnected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3484:	692d      	ldr	r5, [r5, #16]
    3486:	e7f3      	b.n	3470 <bt_conn_set_state+0x6c>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    3488:	6819      	ldr	r1, [r3, #0]
	if (list->tail == node) {
    348a:	6960      	ldr	r0, [r4, #20]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    348c:	6121      	str	r1, [r4, #16]
	if (list->tail == node) {
    348e:	4283      	cmp	r3, r0
    3490:	d100      	bne.n	3494 <bt_conn_set_state+0x90>
		list->tail = list->head;
    3492:	6161      	str	r1, [r4, #20]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3494:	2a00      	cmp	r2, #0
    3496:	d102      	bne.n	349e <bt_conn_set_state+0x9a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    3498:	b662      	cpsie	i

		key = irq_lock();
		node = sys_slist_get(&conn->tx_pending);
		irq_unlock(key);

		if (!node) {
    349a:	2b00      	cmp	r3, #0
    349c:	d027      	beq.n	34ee <bt_conn_set_state+0xea>
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    349e:	2200      	movs	r2, #0
    34a0:	605a      	str	r2, [r3, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    34a2:	4a1d      	ldr	r2, [pc, #116]	; (3518 <bt_conn_set_state+0x114>)
    34a4:	6811      	ldr	r1, [r2, #0]
    34a6:	6019      	str	r1, [r3, #0]
	list->head = node;

	if (!list->tail) {
    34a8:	6851      	ldr	r1, [r2, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    34aa:	6013      	str	r3, [r2, #0]

	if (!list->tail) {
    34ac:	2900      	cmp	r1, #0
    34ae:	d100      	bne.n	34b2 <bt_conn_set_state+0xae>
		list->tail = list->head;
    34b0:	6053      	str	r3, [r2, #4]
			break;
		}

		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));

		k_sem_give(bt_conn_get_pkts(conn));
    34b2:	481a      	ldr	r0, [pc, #104]	; (351c <bt_conn_set_state+0x118>)
    34b4:	f00c f9bc 	bl	f830 <k_sem_give>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    34b8:	f3ef 8210 	mrs	r2, PRIMASK
    34bc:	b672      	cpsid	i
    34be:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    34c0:	2b00      	cmp	r3, #0
    34c2:	d1e1      	bne.n	3488 <bt_conn_set_state+0x84>
    34c4:	e011      	b.n	34ea <bt_conn_set_state+0xe6>
			}

			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
			k_poll_signal(&conn_change, 0);
			/* The last ref will be dropped by the tx_thread */
		} else if (old_state == BT_CONN_CONNECT) {
    34c6:	2d02      	cmp	r5, #2
    34c8:	d107      	bne.n	34da <bt_conn_set_state+0xd6>
			/* conn->err will be set in this case */
			notify_connected(conn);
    34ca:	0020      	movs	r0, r4
    34cc:	f7ff fd92 	bl	2ff4 <notify_connected>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    34d0:	0020      	movs	r0, r4
    34d2:	3048      	adds	r0, #72	; 0x48
    34d4:	f00b fadb 	bl	ea8e <atomic_dec>
    34d8:	e018      	b.n	350c <bt_conn_set_state+0x108>
			/* The last ref will be dropped by the tx_thread */
		} else if (old_state == BT_CONN_CONNECT) {
			/* conn->err will be set in this case */
			notify_connected(conn);
			bt_conn_unref(conn);
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    34da:	2d01      	cmp	r5, #1
    34dc:	d116      	bne.n	350c <bt_conn_set_state+0x108>
			/* this indicate LE Create Connection failed */
			if (conn->err) {
    34de:	0023      	movs	r3, r4
    34e0:	334c      	adds	r3, #76	; 0x4c
    34e2:	781b      	ldrb	r3, [r3, #0]
    34e4:	2b00      	cmp	r3, #0
    34e6:	d0f3      	beq.n	34d0 <bt_conn_set_state+0xcc>
    34e8:	e7ef      	b.n	34ca <bt_conn_set_state+0xc6>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    34ea:	2a00      	cmp	r2, #0
    34ec:	d0d4      	beq.n	3498 <bt_conn_set_state+0x94>
			bt_l2cap_disconnected(conn);
			notify_disconnected(conn);
			process_unack_tx(conn);

			/* Cancel Connection Update if it is pending */
			if (conn->type == BT_CONN_TYPE_LE) {
    34ee:	78a3      	ldrb	r3, [r4, #2]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d103      	bne.n	34fc <bt_conn_set_state+0xf8>
				k_delayed_work_cancel(&conn->le.update_work);
    34f4:	0020      	movs	r0, r4
    34f6:	307c      	adds	r0, #124	; 0x7c
    34f8:	f00c fc7c 	bl	fdf4 <k_delayed_work_cancel>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    34fc:	2140      	movs	r1, #64	; 0x40
			}

			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    34fe:	1d20      	adds	r0, r4, #4
    3500:	f00b fadc 	bl	eabc <atomic_or>
			k_poll_signal(&conn_change, 0);
    3504:	2100      	movs	r1, #0
    3506:	4802      	ldr	r0, [pc, #8]	; (3510 <bt_conn_set_state+0x10c>)
    3508:	f00b fe46 	bl	f198 <k_poll_signal>
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    350c:	bd70      	pop	{r4, r5, r6, pc}
    350e:	46c0      	nop			; (mov r8, r8)
    3510:	2000090c 	.word	0x2000090c
    3514:	20000928 	.word	0x20000928
    3518:	20000904 	.word	0x20000904
    351c:	2000037c 	.word	0x2000037c

00003520 <bt_conn_lookup_handle>:

struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
    3520:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3522:	4c0c      	ldr	r4, [pc, #48]	; (3554 <bt_conn_lookup_handle+0x34>)
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
    3524:	0006      	movs	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3526:	0025      	movs	r5, r4
    3528:	3548      	adds	r5, #72	; 0x48
    352a:	0028      	movs	r0, r5
    352c:	f00b faba 	bl	eaa4 <atomic_get>
			return bt_conn_ref(&sco_conns[i]);
		}
	}
#endif

	return NULL;
    3530:	2200      	movs	r2, #0
struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    3532:	4290      	cmp	r0, r2
    3534:	d00c      	beq.n	3550 <bt_conn_lookup_handle+0x30>
			continue;
		}

		/* We only care about connections with a valid handle */
		if (conns[i].state != BT_CONN_CONNECTED &&
    3536:	0023      	movs	r3, r4
    3538:	334d      	adds	r3, #77	; 0x4d
    353a:	781b      	ldrb	r3, [r3, #0]
    353c:	3b03      	subs	r3, #3
    353e:	2b01      	cmp	r3, #1
    3540:	d806      	bhi.n	3550 <bt_conn_lookup_handle+0x30>
		    conns[i].state != BT_CONN_DISCONNECT) {
			continue;
		}

		if (conns[i].handle == handle) {
    3542:	8823      	ldrh	r3, [r4, #0]
    3544:	42b3      	cmp	r3, r6
    3546:	d103      	bne.n	3550 <bt_conn_lookup_handle+0x30>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    3548:	0028      	movs	r0, r5
    354a:	f00b fa95 	bl	ea78 <atomic_inc>
		    conns[i].state != BT_CONN_DISCONNECT) {
			continue;
		}

		if (conns[i].handle == handle) {
			return bt_conn_ref(&conns[i]);
    354e:	0022      	movs	r2, r4
		}
	}
#endif

	return NULL;
}
    3550:	0010      	movs	r0, r2
    3552:	bd70      	pop	{r4, r5, r6, pc}
    3554:	2000092c 	.word	0x2000092c

00003558 <bt_conn_addr_le_cmp>:

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    3558:	b570      	push	{r4, r5, r6, lr}
    355a:	000d      	movs	r5, r1
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    355c:	0001      	movs	r1, r0

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    355e:	0004      	movs	r4, r0
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    3560:	3150      	adds	r1, #80	; 0x50
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    3562:	2207      	movs	r2, #7
    3564:	0028      	movs	r0, r5
    3566:	f7fd fb81 	bl	c6c <memcmp>
    356a:	2800      	cmp	r0, #0
    356c:	d00a      	beq.n	3584 <bt_conn_addr_le_cmp+0x2c>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    356e:	78e3      	ldrb	r3, [r4, #3]
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    3570:	0021      	movs	r1, r4
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    3572:	2b00      	cmp	r3, #0
    3574:	d101      	bne.n	357a <bt_conn_addr_le_cmp+0x22>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    3576:	315e      	adds	r1, #94	; 0x5e
    3578:	e000      	b.n	357c <bt_conn_addr_le_cmp+0x24>
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
    357a:	3157      	adds	r1, #87	; 0x57
    357c:	2207      	movs	r2, #7
    357e:	0028      	movs	r0, r5
    3580:	f7fd fb74 	bl	c6c <memcmp>
}
    3584:	bd70      	pop	{r4, r5, r6, pc}
	...

00003588 <bt_conn_lookup_addr_le>:

struct bt_conn *bt_conn_lookup_addr_le(const bt_addr_le_t *peer)
{
    3588:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    358a:	4c0c      	ldr	r4, [pc, #48]	; (35bc <bt_conn_lookup_addr_le+0x34>)

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(const bt_addr_le_t *peer)
{
    358c:	0006      	movs	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    358e:	0025      	movs	r5, r4
    3590:	3548      	adds	r5, #72	; 0x48
    3592:	0028      	movs	r0, r5
    3594:	f00b fa86 	bl	eaa4 <atomic_get>
    3598:	2800      	cmp	r0, #0
    359a:	d00d      	beq.n	35b8 <bt_conn_lookup_addr_le+0x30>
			continue;
		}

		if (conns[i].type != BT_CONN_TYPE_LE) {
    359c:	78a3      	ldrb	r3, [r4, #2]
    359e:	2b00      	cmp	r3, #0
    35a0:	d10a      	bne.n	35b8 <bt_conn_lookup_addr_le+0x30>
			continue;
		}

		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    35a2:	0031      	movs	r1, r6
    35a4:	0020      	movs	r0, r4
    35a6:	f7ff ffd7 	bl	3558 <bt_conn_addr_le_cmp>
    35aa:	2800      	cmp	r0, #0
    35ac:	d104      	bne.n	35b8 <bt_conn_lookup_addr_le+0x30>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    35ae:	0028      	movs	r0, r5
    35b0:	f00b fa62 	bl	ea78 <atomic_inc>

		if (conns[i].type != BT_CONN_TYPE_LE) {
			continue;
		}

		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    35b4:	0020      	movs	r0, r4
			return bt_conn_ref(&conns[i]);
    35b6:	e000      	b.n	35ba <bt_conn_lookup_addr_le+0x32>
		}
	}

	return NULL;
    35b8:	2000      	movs	r0, #0
}
    35ba:	bd70      	pop	{r4, r5, r6, pc}
    35bc:	2000092c 	.word	0x2000092c

000035c0 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    35c0:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    35c2:	4c10      	ldr	r4, [pc, #64]	; (3604 <bt_conn_lookup_state_le+0x44>)
	return NULL;
}

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    35c4:	0005      	movs	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    35c6:	0020      	movs	r0, r4
    35c8:	3048      	adds	r0, #72	; 0x48
	return NULL;
}

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    35ca:	000e      	movs	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    35cc:	f00b fa6a 	bl	eaa4 <atomic_get>
    35d0:	2800      	cmp	r0, #0
    35d2:	d015      	beq.n	3600 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conns[i].type != BT_CONN_TYPE_LE) {
    35d4:	78a3      	ldrb	r3, [r4, #2]
    35d6:	2b00      	cmp	r3, #0
    35d8:	d112      	bne.n	3600 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    35da:	2d00      	cmp	r5, #0
    35dc:	d10a      	bne.n	35f4 <bt_conn_lookup_state_le+0x34>
			continue;
		}

		if (conns[i].state == state) {
    35de:	0023      	movs	r3, r4
    35e0:	334d      	adds	r3, #77	; 0x4d
    35e2:	781b      	ldrb	r3, [r3, #0]
    35e4:	42b3      	cmp	r3, r6
    35e6:	d10b      	bne.n	3600 <bt_conn_lookup_state_le+0x40>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    35e8:	0020      	movs	r0, r4
    35ea:	3048      	adds	r0, #72	; 0x48
    35ec:	f00b fa44 	bl	ea78 <atomic_inc>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
			continue;
		}

		if (conns[i].state == state) {
			return bt_conn_ref(&conns[i]);
    35f0:	0020      	movs	r0, r4
    35f2:	e006      	b.n	3602 <bt_conn_lookup_state_le+0x42>

		if (conns[i].type != BT_CONN_TYPE_LE) {
			continue;
		}

		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    35f4:	0029      	movs	r1, r5
    35f6:	0020      	movs	r0, r4
    35f8:	f7ff ffae 	bl	3558 <bt_conn_addr_le_cmp>
    35fc:	2800      	cmp	r0, #0
    35fe:	d0ee      	beq.n	35de <bt_conn_lookup_state_le+0x1e>
		if (conns[i].state == state) {
			return bt_conn_ref(&conns[i]);
		}
	}

	return NULL;
    3600:	2000      	movs	r0, #0
}
    3602:	bd70      	pop	{r4, r5, r6, pc}
    3604:	2000092c 	.word	0x2000092c

00003608 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
    3608:	b510      	push	{r4, lr}
	atomic_dec(&conn->ref);
    360a:	3048      	adds	r0, #72	; 0x48
    360c:	f00b fa3f 	bl	ea8e <atomic_dec>

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
}
    3610:	bd10      	pop	{r4, pc}
	...

00003614 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    3614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3616:	0007      	movs	r7, r0
    3618:	000d      	movs	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    361a:	4815      	ldr	r0, [pc, #84]	; (3670 <bt_conn_le_conn_update+0x5c>)
    361c:	210e      	movs	r1, #14
    361e:	f7fe fa73 	bl	1b08 <bt_hci_cmd_create>
    3622:	1e06      	subs	r6, r0, #0
				sizeof(*conn_update));
	if (!buf) {
    3624:	d021      	beq.n	366a <bt_conn_le_conn_update+0x56>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    3626:	210e      	movs	r1, #14
    3628:	3008      	adds	r0, #8
    362a:	f00a ff6b 	bl	e504 <net_buf_simple_add>
    362e:	0004      	movs	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    3630:	220e      	movs	r2, #14
    3632:	2100      	movs	r1, #0
    3634:	f7fd fb59 	bl	cea <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    3638:	783b      	ldrb	r3, [r7, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    363a:	0031      	movs	r1, r6
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
	memset(conn_update, 0, sizeof(*conn_update));
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    363c:	7023      	strb	r3, [r4, #0]
    363e:	787b      	ldrb	r3, [r7, #1]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3640:	480b      	ldr	r0, [pc, #44]	; (3670 <bt_conn_le_conn_update+0x5c>)
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
	memset(conn_update, 0, sizeof(*conn_update));
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    3642:	7063      	strb	r3, [r4, #1]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    3644:	782b      	ldrb	r3, [r5, #0]
    3646:	70a3      	strb	r3, [r4, #2]
    3648:	786b      	ldrb	r3, [r5, #1]
    364a:	70e3      	strb	r3, [r4, #3]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    364c:	78ab      	ldrb	r3, [r5, #2]
    364e:	7123      	strb	r3, [r4, #4]
    3650:	78eb      	ldrb	r3, [r5, #3]
    3652:	7163      	strb	r3, [r4, #5]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    3654:	792b      	ldrb	r3, [r5, #4]
    3656:	71a3      	strb	r3, [r4, #6]
    3658:	796b      	ldrb	r3, [r5, #5]
    365a:	71e3      	strb	r3, [r4, #7]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    365c:	79ab      	ldrb	r3, [r5, #6]
    365e:	7223      	strb	r3, [r4, #8]
    3660:	79eb      	ldrb	r3, [r5, #7]
    3662:	7263      	strb	r3, [r4, #9]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    3664:	f7fe fe5e 	bl	2324 <bt_hci_cmd_send>
    3668:	e001      	b.n	366e <bt_conn_le_conn_update+0x5a>
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
				sizeof(*conn_update));
	if (!buf) {
		return -ENOBUFS;
    366a:	2037      	movs	r0, #55	; 0x37
    366c:	4240      	negs	r0, r0
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}
    366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3670:	00002013 	.word	0x00002013

00003674 <bt_conn_le_param_update>:
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    3674:	0003      	movs	r3, r0
	return 0;
}

int bt_conn_le_param_update(struct bt_conn *conn,
			    const struct bt_le_conn_param *param)
{
    3676:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    3678:	3366      	adds	r3, #102	; 0x66
    367a:	881b      	ldrh	r3, [r3, #0]
    367c:	880a      	ldrh	r2, [r1, #0]
	return 0;
}

int bt_conn_le_param_update(struct bt_conn *conn,
			    const struct bt_le_conn_param *param)
{
    367e:	0004      	movs	r4, r0
    3680:	000d      	movs	r5, r1
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    3682:	429a      	cmp	r2, r3
    3684:	d80e      	bhi.n	36a4 <bt_conn_le_param_update+0x30>
    3686:	884a      	ldrh	r2, [r1, #2]
    3688:	429a      	cmp	r2, r3
    368a:	d30b      	bcc.n	36a4 <bt_conn_le_param_update+0x30>
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
    368c:	0003      	movs	r3, r0
    368e:	336c      	adds	r3, #108	; 0x6c
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
    3690:	881a      	ldrh	r2, [r3, #0]
    3692:	888b      	ldrh	r3, [r1, #4]
    3694:	429a      	cmp	r2, r3
    3696:	d105      	bne.n	36a4 <bt_conn_le_param_update+0x30>
	    conn->le.latency == param->latency &&
	    conn->le.timeout == param->timeout) {
    3698:	0003      	movs	r3, r0
    369a:	336e      	adds	r3, #110	; 0x6e
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
    369c:	881a      	ldrh	r2, [r3, #0]
    369e:	88cb      	ldrh	r3, [r1, #6]
    36a0:	429a      	cmp	r2, r3
    36a2:	d01b      	beq.n	36dc <bt_conn_le_param_update+0x68>
	    conn->le.timeout == param->timeout) {
		return -EALREADY;
	}

	/* Cancel any pending update */
	k_delayed_work_cancel(&conn->le.update_work);
    36a4:	0020      	movs	r0, r4
    36a6:	307c      	adds	r0, #124	; 0x7c
    36a8:	f00c fba4 	bl	fdf4 <k_delayed_work_cancel>

	/* Use LE connection parameter request if both local and remote support
	 * it; or if local role is master then use LE connection update.
	 */
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    36ac:	4b0d      	ldr	r3, [pc, #52]	; (36e4 <bt_conn_le_param_update+0x70>)
    36ae:	3370      	adds	r3, #112	; 0x70
    36b0:	781a      	ldrb	r2, [r3, #0]
    36b2:	2302      	movs	r3, #2
    36b4:	421a      	tst	r2, r3
    36b6:	d004      	beq.n	36c2 <bt_conn_le_param_update+0x4e>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    36b8:	0022      	movs	r2, r4
    36ba:	3270      	adds	r2, #112	; 0x70
	k_delayed_work_cancel(&conn->le.update_work);

	/* Use LE connection parameter request if both local and remote support
	 * it; or if local role is master then use LE connection update.
	 */
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    36bc:	7812      	ldrb	r2, [r2, #0]
    36be:	421a      	tst	r2, r3
    36c0:	d102      	bne.n	36c8 <bt_conn_le_param_update+0x54>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    36c2:	78e3      	ldrb	r3, [r4, #3]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d104      	bne.n	36d2 <bt_conn_le_param_update+0x5e>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
		return bt_conn_le_conn_update(conn, param);
    36c8:	0029      	movs	r1, r5
    36ca:	0020      	movs	r0, r4
    36cc:	f7ff ffa2 	bl	3614 <bt_conn_le_conn_update>
    36d0:	e006      	b.n	36e0 <bt_conn_le_param_update+0x6c>
	}

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
    36d2:	0029      	movs	r1, r5
    36d4:	0020      	movs	r0, r4
    36d6:	f000 fa2b 	bl	3b30 <bt_l2cap_update_conn_param>
    36da:	e001      	b.n	36e0 <bt_conn_le_param_update+0x6c>
	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
	    conn->le.timeout == param->timeout) {
		return -EALREADY;
    36dc:	2045      	movs	r0, #69	; 0x45
    36de:	4240      	negs	r0, r0

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
}
    36e0:	bd70      	pop	{r4, r5, r6, pc}
    36e2:	46c0      	nop			; (mov r8, r8)
    36e4:	200002f8 	.word	0x200002f8

000036e8 <le_conn_update>:
	/* Default to accepting if there's no app callback */
	return true;
}

static void le_conn_update(struct k_work *work)
{
    36e8:	b507      	push	{r0, r1, r2, lr}
	    conn->state == BT_CONN_CONNECT) {
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
		return;
	}

	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    36ea:	0003      	movs	r3, r0
    36ec:	4669      	mov	r1, sp
    36ee:	3b14      	subs	r3, #20
    36f0:	881b      	ldrh	r3, [r3, #0]
    36f2:	0002      	movs	r2, r0
    36f4:	800b      	strh	r3, [r1, #0]
    36f6:	0003      	movs	r3, r0
    36f8:	3b12      	subs	r3, #18
    36fa:	881b      	ldrh	r3, [r3, #0]
    36fc:	3a7c      	subs	r2, #124	; 0x7c
    36fe:	804b      	strh	r3, [r1, #2]
    3700:	0003      	movs	r3, r0
    3702:	3b10      	subs	r3, #16
    3704:	881b      	ldrh	r3, [r3, #0]
    3706:	808b      	strh	r3, [r1, #4]
    3708:	0003      	movs	r3, r0
    370a:	3b0e      	subs	r3, #14
    370c:	881b      	ldrh	r3, [r3, #0]
				 conn->le.interval_max,
				 conn->le.latency,
				 conn->le.timeout);

	bt_conn_le_param_update(conn, param);
    370e:	0010      	movs	r0, r2
	    conn->state == BT_CONN_CONNECT) {
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
		return;
	}

	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    3710:	80cb      	strh	r3, [r1, #6]
				 conn->le.interval_max,
				 conn->le.latency,
				 conn->le.timeout);

	bt_conn_le_param_update(conn, param);
    3712:	f7ff ffaf 	bl	3674 <bt_conn_le_param_update>
}
    3716:	bd07      	pop	{r0, r1, r2, pc}

00003718 <bt_conn_create_pdu>:

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    3718:	b570      	push	{r4, r5, r6, lr}
    371a:	000c      	movs	r4, r1
	struct net_buf *buf;

	if (!pool) {
    371c:	2800      	cmp	r0, #0
    371e:	d100      	bne.n	3722 <bt_conn_create_pdu+0xa>
		pool = &acl_tx_pool;
    3720:	4805      	ldr	r0, [pc, #20]	; (3738 <bt_conn_create_pdu+0x20>)
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    3722:	2101      	movs	r1, #1
    3724:	4249      	negs	r1, r1
    3726:	f00a fe57 	bl	e3d8 <net_buf_alloc>
    372a:	0005      	movs	r5, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BLUETOOTH_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    372c:	1d21      	adds	r1, r4, #4
    372e:	f00a feb3 	bl	e498 <net_buf_reserve>

	return buf;
}
    3732:	0028      	movs	r0, r5
    3734:	bd70      	pop	{r4, r5, r6, pc}
    3736:	46c0      	nop			; (mov r8, r8)
    3738:	2000078c 	.word	0x2000078c

0000373c <create_frag.isra.6>:
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
}

static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    373c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    373e:	000f      	movs	r7, r1
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    3740:	2100      	movs	r1, #0
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
}

static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    3742:	0005      	movs	r5, r0
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    3744:	0008      	movs	r0, r1
    3746:	f7ff ffe7 	bl	3718 <bt_conn_create_pdu>

	if (conn->state != BT_CONN_CONNECTED) {
    374a:	782a      	ldrb	r2, [r5, #0]
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    374c:	0004      	movs	r4, r0

	if (conn->state != BT_CONN_CONNECTED) {
    374e:	2a03      	cmp	r2, #3
    3750:	d003      	beq.n	375a <create_frag.isra.6+0x1e>
		net_buf_unref(frag);
    3752:	f00a feb5 	bl	e4c0 <net_buf_unref>
		return NULL;
    3756:	2000      	movs	r0, #0
    3758:	e022      	b.n	37a0 <create_frag.isra.6+0x64>
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    375a:	89c3      	ldrh	r3, [r0, #14]

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    375c:	0006      	movs	r6, r0
		net_buf_unref(frag);
		return NULL;
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    375e:	18c3      	adds	r3, r0, r3
    3760:	3313      	adds	r3, #19
    3762:	4393      	bics	r3, r2
    3764:	2200      	movs	r2, #0
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    3766:	4d0f      	ldr	r5, [pc, #60]	; (37a4 <create_frag.isra.6+0x68>)
		net_buf_unref(frag);
		return NULL;
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    3768:	601a      	str	r2, [r3, #0]
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    376a:	3580      	adds	r5, #128	; 0x80
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    376c:	882b      	ldrh	r3, [r5, #0]
    376e:	3608      	adds	r6, #8
    3770:	0030      	movs	r0, r6
    3772:	9301      	str	r3, [sp, #4]
    3774:	f00a ff07 	bl	e586 <net_buf_simple_tailroom>
    3778:	9b01      	ldr	r3, [sp, #4]
    377a:	4283      	cmp	r3, r0
    377c:	d201      	bcs.n	3782 <create_frag.isra.6+0x46>
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    377e:	882d      	ldrh	r5, [r5, #0]
    3780:	e003      	b.n	378a <create_frag.isra.6+0x4e>
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    3782:	0030      	movs	r0, r6
    3784:	f00a feff 	bl	e586 <net_buf_simple_tailroom>
    3788:	b285      	uxth	r5, r0

	net_buf_add_mem(frag, buf->data, frag_len);
    378a:	002a      	movs	r2, r5
    378c:	68b9      	ldr	r1, [r7, #8]
    378e:	0030      	movs	r0, r6
    3790:	f00a febf 	bl	e512 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    3794:	0038      	movs	r0, r7
    3796:	0029      	movs	r1, r5
    3798:	3008      	adds	r0, #8
    379a:	f00a fed4 	bl	e546 <net_buf_simple_pull>
    379e:	0020      	movs	r0, r4

	return frag;
}
    37a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	200002f8 	.word	0x200002f8

000037a8 <bt_conn_process_tx>:

	return ev_count;
}

void bt_conn_process_tx(struct bt_conn *conn)
{
    37a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    37aa:	0007      	movs	r7, r0
    37ac:	374d      	adds	r7, #77	; 0x4d
    37ae:	783b      	ldrb	r3, [r7, #0]

	return ev_count;
}

void bt_conn_process_tx(struct bt_conn *conn)
{
    37b0:	0005      	movs	r5, r0
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    37b2:	2b00      	cmp	r3, #0
    37b4:	d10a      	bne.n	37cc <bt_conn_process_tx+0x24>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    37b6:	2141      	movs	r1, #65	; 0x41
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    37b8:	3004      	adds	r0, #4
    37ba:	4249      	negs	r1, r1
    37bc:	f00b f989 	bl	ead2 <atomic_and>
{
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    37c0:	0643      	lsls	r3, r0, #25
    37c2:	d503      	bpl.n	37cc <bt_conn_process_tx+0x24>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
		conn_cleanup(conn);
    37c4:	0028      	movs	r0, r5
    37c6:	f7ff fc35 	bl	3034 <conn_cleanup>
		return;
    37ca:	e03a      	b.n	3842 <bt_conn_process_tx+0x9a>
	}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    37cc:	0028      	movs	r0, r5
    37ce:	2100      	movs	r1, #0
    37d0:	302c      	adds	r0, #44	; 0x2c
    37d2:	f00a fe49 	bl	e468 <net_buf_get>
    37d6:	1e04      	subs	r4, r0, #0
	BT_ASSERT(buf);
    37d8:	d102      	bne.n	37e0 <bt_conn_process_tx+0x38>
    37da:	b662      	cpsie	i
    37dc:	2004      	movs	r0, #4
    37de:	df02      	svc	2
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    37e0:	4e18      	ldr	r6, [pc, #96]	; (3844 <bt_conn_process_tx+0x9c>)
	struct net_buf *frag;

	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);

	/* Send directly if the packet fits the ACL MTU */
	if (buf->len <= conn_mtu(conn)) {
    37e2:	8982      	ldrh	r2, [r0, #12]
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    37e4:	0033      	movs	r3, r6
    37e6:	3380      	adds	r3, #128	; 0x80
	struct net_buf *frag;

	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);

	/* Send directly if the packet fits the ACL MTU */
	if (buf->len <= conn_mtu(conn)) {
    37e8:	881b      	ldrh	r3, [r3, #0]
    37ea:	429a      	cmp	r2, r3
    37ec:	d802      	bhi.n	37f4 <bt_conn_process_tx+0x4c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    37ee:	2300      	movs	r3, #0
    37f0:	001a      	movs	r2, r3
    37f2:	e01d      	b.n	3830 <bt_conn_process_tx+0x88>
	}

	/* Create & enqueue first fragment */
	frag = create_frag(conn, buf);
    37f4:	0001      	movs	r1, r0
    37f6:	0038      	movs	r0, r7
    37f8:	f7ff ffa0 	bl	373c <create_frag.isra.6>
    37fc:	1e01      	subs	r1, r0, #0
	if (!frag) {
    37fe:	d01d      	beq.n	383c <bt_conn_process_tx+0x94>
		return false;
	}

	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    3800:	2301      	movs	r3, #1
    3802:	2200      	movs	r2, #0
		frag = create_frag(conn, buf);
		if (!frag) {
			return false;
		}

		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    3804:	0028      	movs	r0, r5
    3806:	f7ff fd03 	bl	3210 <send_frag>
    380a:	2800      	cmp	r0, #0
    380c:	d016      	beq.n	383c <bt_conn_process_tx+0x94>
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    380e:	0033      	movs	r3, r6
    3810:	3380      	adds	r3, #128	; 0x80

	/*
	 * Send the fragments. For the last one simply use the original
	 * buffer (which works since we've used net_buf_pull on it.
	 */
	while (buf->len > conn_mtu(conn)) {
    3812:	89a2      	ldrh	r2, [r4, #12]
    3814:	881b      	ldrh	r3, [r3, #0]
    3816:	429a      	cmp	r2, r3
    3818:	d908      	bls.n	382c <bt_conn_process_tx+0x84>
		frag = create_frag(conn, buf);
    381a:	0021      	movs	r1, r4
    381c:	0038      	movs	r0, r7
    381e:	f7ff ff8d 	bl	373c <create_frag.isra.6>
    3822:	1e01      	subs	r1, r0, #0
		if (!frag) {
    3824:	d00a      	beq.n	383c <bt_conn_process_tx+0x94>
			return false;
		}

		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    3826:	2301      	movs	r3, #1
    3828:	001a      	movs	r2, r3
    382a:	e7eb      	b.n	3804 <bt_conn_process_tx+0x5c>
			return false;
		}
	}

	return send_frag(conn, buf, BT_ACL_CONT, false);
    382c:	2300      	movs	r3, #0
    382e:	2201      	movs	r2, #1
    3830:	0021      	movs	r1, r4
    3832:	0028      	movs	r0, r5
    3834:	f7ff fcec 	bl	3210 <send_frag>
	}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);
	if (!send_buf(conn, buf)) {
    3838:	2800      	cmp	r0, #0
    383a:	d102      	bne.n	3842 <bt_conn_process_tx+0x9a>
		net_buf_unref(buf);
    383c:	0020      	movs	r0, r4
    383e:	f00a fe3f 	bl	e4c0 <net_buf_unref>
	}
}
    3842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3844:	200002f8 	.word	0x200002f8

00003848 <bt_conn_init>:
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    3848:	4a0c      	ldr	r2, [pc, #48]	; (387c <bt_conn_init+0x34>)
    384a:	4b0d      	ldr	r3, [pc, #52]	; (3880 <bt_conn_init+0x38>)
    384c:	6811      	ldr	r1, [r2, #0]
	}
}
#endif /* CONFIG_BLUETOOTH_SMP || CONFIG_BLUETOOTH_BREDR */

int bt_conn_init(void)
{
    384e:	b510      	push	{r4, lr}
    3850:	6019      	str	r1, [r3, #0]
	list->head = node;

	if (!list->tail) {
    3852:	6851      	ldr	r1, [r2, #4]
    3854:	2900      	cmp	r1, #0
    3856:	d100      	bne.n	385a <bt_conn_init+0x12>
		list->tail = list->head;
    3858:	6053      	str	r3, [r2, #4]
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;

	if (!list->tail) {
    385a:	6851      	ldr	r1, [r2, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    385c:	609b      	str	r3, [r3, #8]
	list->head = node;
    385e:	3308      	adds	r3, #8
    3860:	6013      	str	r3, [r2, #0]

	if (!list->tail) {
    3862:	2900      	cmp	r1, #0
    3864:	d100      	bne.n	3868 <bt_conn_init+0x20>
		list->tail = list->head;
    3866:	6053      	str	r3, [r2, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    3868:	f001 f994 	bl	4b94 <bt_att_init>

	err = bt_smp_init();
    386c:	f001 fdc4 	bl	53f8 <bt_smp_init>
    3870:	1e04      	subs	r4, r0, #0
	if (err) {
    3872:	d101      	bne.n	3878 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
    3874:	f000 f99a 	bl	3bac <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    3878:	0020      	movs	r0, r4
    387a:	bd10      	pop	{r4, pc}
    387c:	20000904 	.word	0x20000904
    3880:	20000918 	.word	0x20000918

00003884 <l2cap_disconnected>:

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}
    3884:	4770      	bx	lr
	...

00003888 <l2cap_accept>:
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    3888:	200c      	movs	r0, #12
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    388a:	4b05      	ldr	r3, [pc, #20]	; (38a0 <l2cap_accept+0x18>)
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    388c:	4240      	negs	r0, r0
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    388e:	681a      	ldr	r2, [r3, #0]
    3890:	2a00      	cmp	r2, #0
    3892:	d103      	bne.n	389c <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    3894:	4803      	ldr	r0, [pc, #12]	; (38a4 <l2cap_accept+0x1c>)
    3896:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;

		return 0;
    3898:	0010      	movs	r0, r2
		if (l2cap->chan.chan.conn) {
			continue;
		}

		l2cap->chan.chan.ops = &ops;
		*chan = &l2cap->chan.chan;
    389a:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    389c:	4770      	bx	lr
    389e:	46c0      	nop			; (mov r8, r8)
    38a0:	200009d4 	.word	0x200009d4
    38a4:	200003d8 	.word	0x200003d8

000038a8 <l2cap_connected>:
    38a8:	4770      	bx	lr
	...

000038ac <bt_l2cap_le_fixed_chan_register>:
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    38ac:	2300      	movs	r3, #0

void bt_l2cap_le_fixed_chan_register(struct bt_l2cap_fixed_chan *chan)
{
	BT_DBG("CID 0x%04x", chan->cid);

	sys_slist_append(&le_channels, &chan->node);
    38ae:	0002      	movs	r2, r0
    38b0:	6083      	str	r3, [r0, #8]

	if (!list->tail) {
    38b2:	4b05      	ldr	r3, [pc, #20]	; (38c8 <bt_l2cap_le_fixed_chan_register+0x1c>)
    38b4:	3208      	adds	r2, #8
    38b6:	6859      	ldr	r1, [r3, #4]
    38b8:	2900      	cmp	r1, #0
    38ba:	d102      	bne.n	38c2 <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail = node;
    38bc:	605a      	str	r2, [r3, #4]
		list->head = node;
    38be:	601a      	str	r2, [r3, #0]
    38c0:	e001      	b.n	38c6 <bt_l2cap_le_fixed_chan_register+0x1a>
	} else {
		list->tail->next = node;
    38c2:	600a      	str	r2, [r1, #0]
		list->tail = node;
    38c4:	605a      	str	r2, [r3, #4]
}
    38c6:	4770      	bx	lr
    38c8:	20000a64 	.word	0x20000a64

000038cc <bt_l2cap_chan_remove>:
	return NULL;
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_chan_remove(struct bt_conn *conn, struct bt_l2cap_chan *ch)
{
    38cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
    38ce:	b530      	push	{r4, r5, lr}
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    38d0:	2b00      	cmp	r3, #0
    38d2:	d020      	beq.n	3916 <bt_l2cap_chan_remove+0x4a>
    38d4:	2200      	movs	r2, #0
    38d6:	3b08      	subs	r3, #8
    38d8:	2b00      	cmp	r3, #0
    38da:	d01c      	beq.n	3916 <bt_l2cap_chan_remove+0x4a>
		if (chan == ch) {
    38dc:	428b      	cmp	r3, r1
    38de:	d111      	bne.n	3904 <bt_l2cap_chan_remove+0x38>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    38e0:	000d      	movs	r5, r1
    38e2:	688b      	ldr	r3, [r1, #8]
    38e4:	3508      	adds	r5, #8
    38e6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    38e8:	2a00      	cmp	r2, #0
    38ea:	d104      	bne.n	38f6 <bt_l2cap_chan_remove+0x2a>
		list->head = node->next;
    38ec:	6403      	str	r3, [r0, #64]	; 0x40

		/* Was node also the tail? */
		if (list->tail == node) {
    38ee:	42a5      	cmp	r5, r4
    38f0:	d105      	bne.n	38fe <bt_l2cap_chan_remove+0x32>
			list->tail = list->head;
    38f2:	6443      	str	r3, [r0, #68]	; 0x44
    38f4:	e003      	b.n	38fe <bt_l2cap_chan_remove+0x32>
		}
	} else {
		prev_node->next = node->next;
    38f6:	6013      	str	r3, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    38f8:	42a5      	cmp	r5, r4
    38fa:	d100      	bne.n	38fe <bt_l2cap_chan_remove+0x32>
			list->tail = prev_node;
    38fc:	6442      	str	r2, [r0, #68]	; 0x44
		}
	}

	node->next = NULL;
    38fe:	2300      	movs	r3, #0
    3900:	608b      	str	r3, [r1, #8]
    3902:	e008      	b.n	3916 <bt_l2cap_chan_remove+0x4a>
			return;
		}

		prev = &chan->node;
    3904:	001a      	movs	r2, r3
    3906:	3208      	adds	r2, #8
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    3908:	2a00      	cmp	r2, #0
    390a:	d004      	beq.n	3916 <bt_l2cap_chan_remove+0x4a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    390c:	689b      	ldr	r3, [r3, #8]
void bt_l2cap_chan_remove(struct bt_conn *conn, struct bt_l2cap_chan *ch)
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    390e:	2b00      	cmp	r3, #0
    3910:	d001      	beq.n	3916 <bt_l2cap_chan_remove+0x4a>
    3912:	3b08      	subs	r3, #8
    3914:	e7e0      	b.n	38d8 <bt_l2cap_chan_remove+0xc>
			return;
		}

		prev = &chan->node;
	}
}
    3916:	bd30      	pop	{r4, r5, pc}

00003918 <bt_l2cap_chan_del>:

void bt_l2cap_chan_del(struct bt_l2cap_chan *chan)
{
	BT_DBG("conn %p chan %p", chan->conn, chan);

	if (!chan->conn) {
    3918:	6803      	ldr	r3, [r0, #0]
}
#endif /* CONFIG_BLUETOOTH_DEBUG_L2CAP */
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_chan_del(struct bt_l2cap_chan *chan)
{
    391a:	b510      	push	{r4, lr}
    391c:	0004      	movs	r4, r0
	BT_DBG("conn %p chan %p", chan->conn, chan);

	if (!chan->conn) {
    391e:	2b00      	cmp	r3, #0
    3920:	d006      	beq.n	3930 <bt_l2cap_chan_del+0x18>
		goto destroy;
	}

	if (chan->ops->disconnected) {
    3922:	6843      	ldr	r3, [r0, #4]
    3924:	685b      	ldr	r3, [r3, #4]
    3926:	2b00      	cmp	r3, #0
    3928:	d000      	beq.n	392c <bt_l2cap_chan_del+0x14>
		chan->ops->disconnected(chan);
    392a:	4798      	blx	r3
	}

	chan->conn = NULL;
    392c:	2300      	movs	r3, #0
    392e:	6023      	str	r3, [r4, #0]
	/* Reset internal members of common channel */
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
	chan->psm = 0;
#endif

	if (chan->destroy) {
    3930:	68e3      	ldr	r3, [r4, #12]
    3932:	2b00      	cmp	r3, #0
    3934:	d001      	beq.n	393a <bt_l2cap_chan_del+0x22>
		chan->destroy(chan);
    3936:	0020      	movs	r0, r4
    3938:	4798      	blx	r3
	}
}
    393a:	bd10      	pop	{r4, pc}

0000393c <l2cap_rtx_timeout>:
{
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);

	BT_ERR("chan %p timeout", chan);

	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    393c:	3810      	subs	r0, #16
		chan->destroy(chan);
	}
}

static void l2cap_rtx_timeout(struct k_work *work)
{
    393e:	b510      	push	{r4, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);

	BT_ERR("chan %p timeout", chan);

	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    3940:	0004      	movs	r4, r0
    3942:	0001      	movs	r1, r0
    3944:	6800      	ldr	r0, [r0, #0]
    3946:	f7ff ffc1 	bl	38cc <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    394a:	0020      	movs	r0, r4
    394c:	f7ff ffe4 	bl	3918 <bt_l2cap_chan_del>
}
    3950:	bd10      	pop	{r4, pc}
	...

00003954 <bt_l2cap_connected>:

	return true;
}

void bt_l2cap_connected(struct bt_conn *conn)
{
    3954:	4b1a      	ldr	r3, [pc, #104]	; (39c0 <bt_l2cap_connected+0x6c>)
    3956:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3958:	681b      	ldr	r3, [r3, #0]
    395a:	0006      	movs	r6, r0
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_connected(conn);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    395c:	001c      	movs	r4, r3
    395e:	3c08      	subs	r4, #8
    3960:	2b00      	cmp	r3, #0
    3962:	d02b      	beq.n	39bc <bt_l2cap_connected+0x68>
    3964:	2c00      	cmp	r4, #0
    3966:	d029      	beq.n	39bc <bt_l2cap_connected+0x68>
		struct bt_l2cap_le_chan *ch;

		if (fchan->accept(conn, &chan) < 0) {
    3968:	a901      	add	r1, sp, #4
    396a:	0030      	movs	r0, r6
    396c:	6863      	ldr	r3, [r4, #4]
    396e:	4798      	blx	r3
    3970:	2800      	cmp	r0, #0
    3972:	db1e      	blt.n	39b2 <bt_l2cap_connected+0x5e>
			continue;
		}

		ch = BT_L2CAP_LE_CHAN(chan);
    3974:	9d01      	ldr	r5, [sp, #4]

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
    3976:	8823      	ldrh	r3, [r4, #0]
		ch->tx.cid = fchan->cid;
    3978:	002a      	movs	r2, r5
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    397a:	0028      	movs	r0, r5

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
		ch->tx.cid = fchan->cid;
    397c:	3254      	adds	r2, #84	; 0x54
		ch = BT_L2CAP_LE_CHAN(chan);

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
    397e:	872b      	strh	r3, [r5, #56]	; 0x38
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    3980:	4910      	ldr	r1, [pc, #64]	; (39c4 <bt_l2cap_connected+0x70>)

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
		ch->tx.cid = fchan->cid;
    3982:	8013      	strh	r3, [r2, #0]
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    3984:	3010      	adds	r0, #16
    3986:	f00c fa1f 	bl	fdc8 <k_delayed_work_init>

void bt_l2cap_chan_add(struct bt_conn *conn, struct bt_l2cap_chan *chan,
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
    398a:	002a      	movs	r2, r5
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    398c:	2300      	movs	r3, #0

	if (!list->tail) {
    398e:	6c71      	ldr	r1, [r6, #68]	; 0x44
    3990:	3208      	adds	r2, #8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    3992:	60ab      	str	r3, [r5, #8]

	if (!list->tail) {
    3994:	4299      	cmp	r1, r3
    3996:	d102      	bne.n	399e <bt_l2cap_connected+0x4a>
		list->tail = node;
    3998:	6472      	str	r2, [r6, #68]	; 0x44
		list->head = node;
    399a:	6432      	str	r2, [r6, #64]	; 0x40
    399c:	e001      	b.n	39a2 <bt_l2cap_connected+0x4e>
	} else {
		list->tail->next = node;
    399e:	600a      	str	r2, [r1, #0]
		list->tail = node;
    39a0:	6472      	str	r2, [r6, #68]	; 0x44

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    39a2:	9801      	ldr	r0, [sp, #4]
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
	chan->conn = conn;
	chan->destroy = destroy;
    39a4:	60eb      	str	r3, [r5, #12]

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    39a6:	6843      	ldr	r3, [r0, #4]
void bt_l2cap_chan_add(struct bt_conn *conn, struct bt_l2cap_chan *chan,
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
	chan->conn = conn;
    39a8:	602e      	str	r6, [r5, #0]

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	2b00      	cmp	r3, #0
    39ae:	d000      	beq.n	39b2 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
    39b0:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    39b2:	68a4      	ldr	r4, [r4, #8]
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_connected(conn);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    39b4:	2c00      	cmp	r4, #0
    39b6:	d001      	beq.n	39bc <bt_l2cap_connected+0x68>
    39b8:	3c08      	subs	r4, #8
    39ba:	e7d3      	b.n	3964 <bt_l2cap_connected+0x10>

		if (chan->ops->connected) {
			chan->ops->connected(chan);
		}
	}
}
    39bc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    39be:	46c0      	nop			; (mov r8, r8)
    39c0:	20000a64 	.word	0x20000a64
    39c4:	0000393d 	.word	0x0000393d

000039c8 <bt_l2cap_disconnected>:

void bt_l2cap_disconnected(struct bt_conn *conn)
{
    39c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
    39ca:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    39cc:	2b00      	cmp	r3, #0
    39ce:	d015      	beq.n	39fc <bt_l2cap_disconnected+0x34>
    39d0:	0018      	movs	r0, r3
    39d2:	3808      	subs	r0, #8
    39d4:	2800      	cmp	r0, #0
    39d6:	d011      	beq.n	39fc <bt_l2cap_disconnected+0x34>
    39d8:	681b      	ldr	r3, [r3, #0]
    39da:	001c      	movs	r4, r3
    39dc:	3c08      	subs	r4, #8
    39de:	2b00      	cmp	r3, #0
    39e0:	d00a      	beq.n	39f8 <bt_l2cap_disconnected+0x30>
		bt_l2cap_chan_del(chan);
    39e2:	f7ff ff99 	bl	3918 <bt_l2cap_chan_del>

void bt_l2cap_disconnected(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    39e6:	2c00      	cmp	r4, #0
    39e8:	d008      	beq.n	39fc <bt_l2cap_disconnected+0x34>
    39ea:	68a3      	ldr	r3, [r4, #8]
    39ec:	0020      	movs	r0, r4
    39ee:	2b00      	cmp	r3, #0
    39f0:	d002      	beq.n	39f8 <bt_l2cap_disconnected+0x30>
    39f2:	3b08      	subs	r3, #8
    39f4:	001c      	movs	r4, r3
    39f6:	e7f4      	b.n	39e2 <bt_l2cap_disconnected+0x1a>
		bt_l2cap_chan_del(chan);
    39f8:	f7ff ff8e 	bl	3918 <bt_l2cap_chan_del>
	}
}
    39fc:	bd10      	pop	{r4, pc}

000039fe <bt_l2cap_create_pdu>:

	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    39fe:	b510      	push	{r4, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3a00:	3104      	adds	r1, #4
    3a02:	f7ff fe89 	bl	3718 <bt_conn_create_pdu>
}
    3a06:	bd10      	pop	{r4, pc}

00003a08 <bt_l2cap_send_cb>:

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    3a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a0a:	0006      	movs	r6, r0
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    3a0c:	0010      	movs	r0, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
}

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    3a0e:	0015      	movs	r5, r2
    3a10:	000c      	movs	r4, r1
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    3a12:	3008      	adds	r0, #8
    3a14:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
}

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    3a16:	001f      	movs	r7, r3
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    3a18:	f00a fd8d 	bl	e536 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3a1c:	89ab      	ldrh	r3, [r5, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    3a1e:	7084      	strb	r4, [r0, #2]
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3a20:	3b04      	subs	r3, #4
    3a22:	b29b      	uxth	r3, r3
    3a24:	7003      	strb	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    3a26:	0a24      	lsrs	r4, r4, #8
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3a28:	0a1b      	lsrs	r3, r3, #8
    3a2a:	7043      	strb	r3, [r0, #1]
	hdr->cid = sys_cpu_to_le16(cid);
    3a2c:	70c4      	strb	r4, [r0, #3]

	bt_conn_send_cb(conn, buf, cb);
    3a2e:	003a      	movs	r2, r7
    3a30:	0029      	movs	r1, r5
    3a32:	0030      	movs	r0, r6
    3a34:	f7ff fbaa 	bl	318c <bt_conn_send_cb>
}
    3a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003a3a <l2cap_recv>:
	bt_l2cap_chan_del(&chan->chan);
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    3a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
	u16_t len;

	if (buf->len < sizeof(*hdr)) {
    3a3c:	898b      	ldrh	r3, [r1, #12]
	bt_l2cap_chan_del(&chan->chan);
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    3a3e:	0006      	movs	r6, r0
    3a40:	000c      	movs	r4, r1
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
	u16_t len;

	if (buf->len < sizeof(*hdr)) {
    3a42:	2b03      	cmp	r3, #3
    3a44:	d932      	bls.n	3aac <l2cap_recv+0x72>
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
	net_buf_pull(buf, sizeof(*hdr));
    3a46:	0008      	movs	r0, r1
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    3a48:	688d      	ldr	r5, [r1, #8]
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
	net_buf_pull(buf, sizeof(*hdr));
    3a4a:	3008      	adds	r0, #8
	if (buf->len < sizeof(*hdr)) {
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
    3a4c:	78ef      	ldrb	r7, [r5, #3]
    3a4e:	78ab      	ldrb	r3, [r5, #2]
    3a50:	023f      	lsls	r7, r7, #8
	net_buf_pull(buf, sizeof(*hdr));
    3a52:	2104      	movs	r1, #4
	if (buf->len < sizeof(*hdr)) {
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
    3a54:	431f      	orrs	r7, r3
	net_buf_pull(buf, sizeof(*hdr));
    3a56:	f00a fd76 	bl	e546 <net_buf_simple_pull>

	BT_DBG("Signaling code 0x%02x ident %u len %u", hdr->code,
	       hdr->ident, len);

	if (buf->len != len) {
    3a5a:	89a3      	ldrh	r3, [r4, #12]
    3a5c:	42bb      	cmp	r3, r7
    3a5e:	d125      	bne.n	3aac <l2cap_recv+0x72>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
		return;
	}

	if (!hdr->ident) {
    3a60:	786c      	ldrb	r4, [r5, #1]
    3a62:	2c00      	cmp	r4, #0
    3a64:	d022      	beq.n	3aac <l2cap_recv+0x72>
		BT_ERR("Invalid ident value in L2CAP PDU");
		return;
	}

	switch (hdr->code) {
    3a66:	782b      	ldrb	r3, [r5, #0]
    3a68:	2b01      	cmp	r3, #1
    3a6a:	d01f      	beq.n	3aac <l2cap_recv+0x72>
    3a6c:	2b13      	cmp	r3, #19
    3a6e:	d01d      	beq.n	3aac <l2cap_recv+0x72>
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3a70:	2104      	movs	r1, #4
    3a72:	2000      	movs	r0, #0
		/* Ignored */
		break;
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */
	default:
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
		l2cap_send_reject(chan->conn, hdr->ident,
    3a74:	6837      	ldr	r7, [r6, #0]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3a76:	f7ff fe4f 	bl	3718 <bt_conn_create_pdu>
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    3a7a:	0006      	movs	r6, r0
    3a7c:	3608      	adds	r6, #8
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3a7e:	0005      	movs	r5, r0
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    3a80:	2104      	movs	r1, #4
    3a82:	0030      	movs	r0, r6
    3a84:	f00a fd3e 	bl	e504 <net_buf_simple_add>
	hdr->code = code;
    3a88:	2301      	movs	r3, #1
	hdr->ident = ident;
    3a8a:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    3a8c:	2102      	movs	r1, #2
    3a8e:	2400      	movs	r4, #0
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = code;
    3a90:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);
    3a92:	7081      	strb	r1, [r0, #2]
    3a94:	70c4      	strb	r4, [r0, #3]
	struct net_buf *buf;

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
				      sizeof(*rej) + data_len);

	rej = net_buf_add(buf, sizeof(*rej));
    3a96:	0030      	movs	r0, r6
    3a98:	f00a fd34 	bl	e504 <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    3a9c:	0023      	movs	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
    3a9e:	7004      	strb	r4, [r0, #0]
    3aa0:	7044      	strb	r4, [r0, #1]
    3aa2:	002a      	movs	r2, r5
    3aa4:	2105      	movs	r1, #5
    3aa6:	0038      	movs	r0, r7
    3aa8:	f7ff ffae 	bl	3a08 <bt_l2cap_send_cb>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
		l2cap_send_reject(chan->conn, hdr->ident,
				  BT_L2CAP_REJ_NOT_UNDERSTOOD, NULL, 0);
		break;
	}
}
    3aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003aae <bt_l2cap_le_lookup_tx_cid>:
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
    3aae:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
			return chan;
		}
	}

	return NULL;
    3ab0:	1e18      	subs	r0, r3, #0
struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    3ab2:	d00d      	beq.n	3ad0 <bt_l2cap_le_lookup_tx_cid+0x22>
    3ab4:	3b08      	subs	r3, #8
    3ab6:	0018      	movs	r0, r3
    3ab8:	2800      	cmp	r0, #0
    3aba:	d009      	beq.n	3ad0 <bt_l2cap_le_lookup_tx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    3abc:	0003      	movs	r3, r0
    3abe:	3354      	adds	r3, #84	; 0x54
    3ac0:	881b      	ldrh	r3, [r3, #0]
    3ac2:	428b      	cmp	r3, r1
    3ac4:	d004      	beq.n	3ad0 <bt_l2cap_le_lookup_tx_cid+0x22>
    3ac6:	6880      	ldr	r0, [r0, #8]
struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    3ac8:	2800      	cmp	r0, #0
    3aca:	d001      	beq.n	3ad0 <bt_l2cap_le_lookup_tx_cid+0x22>
    3acc:	3808      	subs	r0, #8
    3ace:	e7f3      	b.n	3ab8 <bt_l2cap_le_lookup_tx_cid+0xa>
			return chan;
		}
	}

	return NULL;
}
    3ad0:	4770      	bx	lr

00003ad2 <bt_l2cap_le_lookup_rx_cid>:

struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
    3ad2:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			return chan;
		}
	}

	return NULL;
    3ad4:	1e18      	subs	r0, r3, #0
struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    3ad6:	d00b      	beq.n	3af0 <bt_l2cap_le_lookup_rx_cid+0x1e>
    3ad8:	3b08      	subs	r3, #8
    3ada:	0018      	movs	r0, r3
    3adc:	2800      	cmp	r0, #0
    3ade:	d007      	beq.n	3af0 <bt_l2cap_le_lookup_rx_cid+0x1e>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    3ae0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    3ae2:	428b      	cmp	r3, r1
    3ae4:	d004      	beq.n	3af0 <bt_l2cap_le_lookup_rx_cid+0x1e>
    3ae6:	6880      	ldr	r0, [r0, #8]
struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    3ae8:	2800      	cmp	r0, #0
    3aea:	d001      	beq.n	3af0 <bt_l2cap_le_lookup_rx_cid+0x1e>
    3aec:	3808      	subs	r0, #8
    3aee:	e7f5      	b.n	3adc <bt_l2cap_le_lookup_rx_cid+0xa>
			return chan;
		}
	}

	return NULL;
}
    3af0:	4770      	bx	lr

00003af2 <bt_l2cap_recv>:

	chan->ops->recv(chan, buf);
}

void bt_l2cap_recv(struct bt_conn *conn, struct net_buf *buf)
{
    3af2:	b570      	push	{r4, r5, r6, lr}
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_recv(conn, buf);
		return;
	}

	if (buf->len < sizeof(*hdr)) {
    3af4:	898b      	ldrh	r3, [r1, #12]

	chan->ops->recv(chan, buf);
}

void bt_l2cap_recv(struct bt_conn *conn, struct net_buf *buf)
{
    3af6:	0006      	movs	r6, r0
    3af8:	000c      	movs	r4, r1
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_recv(conn, buf);
		return;
	}

	if (buf->len < sizeof(*hdr)) {
    3afa:	2b03      	cmp	r3, #3
    3afc:	d913      	bls.n	3b26 <bt_l2cap_recv+0x34>
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
	net_buf_pull(buf, sizeof(*hdr));
    3afe:	0020      	movs	r0, r4
		BT_ERR("Too small L2CAP PDU received");
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
    3b00:	688a      	ldr	r2, [r1, #8]
	net_buf_pull(buf, sizeof(*hdr));
    3b02:	3008      	adds	r0, #8
		BT_ERR("Too small L2CAP PDU received");
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
    3b04:	78d5      	ldrb	r5, [r2, #3]
    3b06:	7893      	ldrb	r3, [r2, #2]
    3b08:	022d      	lsls	r5, r5, #8
    3b0a:	431d      	orrs	r5, r3
	net_buf_pull(buf, sizeof(*hdr));
    3b0c:	2104      	movs	r1, #4
    3b0e:	f00a fd1a 	bl	e546 <net_buf_simple_pull>

	BT_DBG("Packet for CID %u len %u", cid, buf->len);

	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    3b12:	0029      	movs	r1, r5
    3b14:	0030      	movs	r0, r6
    3b16:	f7ff ffdc 	bl	3ad2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    3b1a:	2800      	cmp	r0, #0
    3b1c:	d003      	beq.n	3b26 <bt_l2cap_recv+0x34>
	}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

	BT_DBG("chan %p len %u", chan, buf->len);

	chan->ops->recv(chan, buf);
    3b1e:	6843      	ldr	r3, [r0, #4]
    3b20:	0021      	movs	r1, r4
    3b22:	691b      	ldr	r3, [r3, #16]
    3b24:	4798      	blx	r3
		net_buf_unref(buf);
		return;
	}

	l2cap_chan_recv(chan, buf);
	net_buf_unref(buf);
    3b26:	0020      	movs	r0, r4
    3b28:	f00a fcca 	bl	e4c0 <net_buf_unref>
}
    3b2c:	bd70      	pop	{r4, r5, r6, pc}
	...

00003b30 <bt_l2cap_update_conn_param>:

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    3b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    3b32:	4b1d      	ldr	r3, [pc, #116]	; (3ba8 <bt_l2cap_update_conn_param+0x78>)
	net_buf_unref(buf);
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    3b34:	000c      	movs	r4, r1

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    3b36:	781a      	ldrb	r2, [r3, #0]
	net_buf_unref(buf);
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    3b38:	9001      	str	r0, [sp, #4]

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    3b3a:	1c51      	adds	r1, r2, #1
    3b3c:	b2c9      	uxtb	r1, r1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    3b3e:	2900      	cmp	r1, #0
    3b40:	d001      	beq.n	3b46 <bt_l2cap_update_conn_param+0x16>

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    3b42:	7019      	strb	r1, [r3, #0]
    3b44:	e001      	b.n	3b4a <bt_l2cap_update_conn_param+0x1a>
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
		ident++;
    3b46:	3202      	adds	r2, #2
    3b48:	701a      	strb	r2, [r3, #0]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3b4a:	2104      	movs	r1, #4
    3b4c:	2000      	movs	r0, #0
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
		ident++;
	}

	return ident;
    3b4e:	781d      	ldrb	r5, [r3, #0]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3b50:	f7ff fde2 	bl	3718 <bt_conn_create_pdu>
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    3b54:	0007      	movs	r7, r0
    3b56:	3708      	adds	r7, #8
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    3b58:	0006      	movs	r6, r0
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    3b5a:	2104      	movs	r1, #4
    3b5c:	0038      	movs	r0, r7
    3b5e:	f00a fcd1 	bl	e504 <net_buf_simple_add>
	hdr->code = code;
    3b62:	2312      	movs	r3, #18
	hdr->ident = ident;
    3b64:	7045      	strb	r5, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    3b66:	2108      	movs	r1, #8
    3b68:	2500      	movs	r5, #0
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = code;
    3b6a:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);
    3b6c:	70c5      	strb	r5, [r0, #3]
    3b6e:	7081      	strb	r1, [r0, #2]
	struct net_buf *buf;

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
				      get_ident(), sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    3b70:	0038      	movs	r0, r7
    3b72:	f00a fcc7 	bl	e504 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    3b76:	7823      	ldrb	r3, [r4, #0]
    3b78:	0032      	movs	r2, r6
    3b7a:	7003      	strb	r3, [r0, #0]
    3b7c:	7863      	ldrb	r3, [r4, #1]
    3b7e:	2105      	movs	r1, #5
    3b80:	7043      	strb	r3, [r0, #1]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    3b82:	78a3      	ldrb	r3, [r4, #2]
    3b84:	7083      	strb	r3, [r0, #2]
    3b86:	78e3      	ldrb	r3, [r4, #3]
    3b88:	70c3      	strb	r3, [r0, #3]
	req->latency = sys_cpu_to_le16(param->latency);
    3b8a:	7923      	ldrb	r3, [r4, #4]
    3b8c:	7103      	strb	r3, [r0, #4]
    3b8e:	7963      	ldrb	r3, [r4, #5]
    3b90:	7143      	strb	r3, [r0, #5]
	req->timeout = sys_cpu_to_le16(param->timeout);
    3b92:	79a3      	ldrb	r3, [r4, #6]
    3b94:	7183      	strb	r3, [r0, #6]
    3b96:	79e3      	ldrb	r3, [r4, #7]
    3b98:	71c3      	strb	r3, [r0, #7]
    3b9a:	002b      	movs	r3, r5
    3b9c:	9801      	ldr	r0, [sp, #4]
    3b9e:	f7ff ff33 	bl	3a08 <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);

	return 0;
}
    3ba2:	0028      	movs	r0, r5
    3ba4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ba6:	46c0      	nop			; (mov r8, r8)
    3ba8:	200009d0 	.word	0x200009d0

00003bac <bt_l2cap_init>:

	return -ENOMEM;
}

void bt_l2cap_init(void)
{
    3bac:	b510      	push	{r4, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    3bae:	4802      	ldr	r0, [pc, #8]	; (3bb8 <bt_l2cap_init+0xc>)
    3bb0:	f7ff fe7c 	bl	38ac <bt_l2cap_le_fixed_chan_register>

	if (IS_ENABLED(CONFIG_BLUETOOTH_BREDR)) {
		bt_l2cap_br_init();
	}
}
    3bb4:	bd10      	pop	{r4, pc}
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	200003ec 	.word	0x200003ec

00003bbc <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}
    3bbc:	2006      	movs	r0, #6
    3bbe:	4770      	bx	lr

00003bc0 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    3bc0:	2300      	movs	r3, #0
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    3bc2:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    3bc4:	4908      	ldr	r1, [pc, #32]	; (3be8 <att_op_get_type+0x28>)
    3bc6:	00da      	lsls	r2, r3, #3
    3bc8:	5c54      	ldrb	r4, [r2, r1]
    3bca:	4284      	cmp	r4, r0
    3bcc:	d102      	bne.n	3bd4 <att_op_get_type+0x14>
			return handlers[i].type;
    3bce:	188a      	adds	r2, r1, r2
    3bd0:	7893      	ldrb	r3, [r2, #2]
    3bd2:	e006      	b.n	3be2 <att_op_get_type+0x22>
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    3bd4:	3301      	adds	r3, #1
    3bd6:	2b1b      	cmp	r3, #27
    3bd8:	d1f5      	bne.n	3bc6 <att_op_get_type+0x6>
			return handlers[i].type;
		}
	}

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
    3bda:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
			return handlers[i].type;
		}
	}

	if (op & ATT_CMD_MASK) {
    3bdc:	0642      	lsls	r2, r0, #25
    3bde:	d400      	bmi.n	3be2 <att_op_get_type+0x22>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    3be0:	3306      	adds	r3, #6
}
    3be2:	0018      	movs	r0, r3
    3be4:	bd10      	pop	{r4, pc}
    3be6:	46c0      	nop			; (mov r8, r8)
    3be8:	00010190 	.word	0x00010190

00003bec <bt_att_accept>:
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    3bec:	200c      	movs	r0, #12
	att->req->buf = NULL;
}
#endif /* CONFIG_BLUETOOTH_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    3bee:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    3bf0:	4c0a      	ldr	r4, [pc, #40]	; (3c1c <bt_att_accept+0x30>)
	att->req->buf = NULL;
}
#endif /* CONFIG_BLUETOOTH_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    3bf2:	000e      	movs	r6, r1
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    3bf4:	6825      	ldr	r5, [r4, #0]
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    3bf6:	4240      	negs	r0, r0
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    3bf8:	2d00      	cmp	r5, #0
    3bfa:	d10e      	bne.n	3c1a <bt_att_accept+0x2e>
			continue;
		}

		att->chan.chan.ops = &ops;
		atomic_set(att->flags, 0);
    3bfc:	0020      	movs	r0, r4

		if (att->chan.chan.conn) {
			continue;
		}

		att->chan.chan.ops = &ops;
    3bfe:	4b08      	ldr	r3, [pc, #32]	; (3c20 <bt_att_accept+0x34>)
		atomic_set(att->flags, 0);
    3c00:	0029      	movs	r1, r5

		if (att->chan.chan.conn) {
			continue;
		}

		att->chan.chan.ops = &ops;
    3c02:	6063      	str	r3, [r4, #4]
		atomic_set(att->flags, 0);
    3c04:	3090      	adds	r0, #144	; 0x90
    3c06:	f00a ff4f 	bl	eaa8 <atomic_set>
		k_sem_init(&att->tx_sem, CONFIG_BLUETOOTH_ATT_TX_MAX,
    3c0a:	2202      	movs	r2, #2
    3c0c:	0020      	movs	r0, r4
    3c0e:	0011      	movs	r1, r2
    3c10:	30c8      	adds	r0, #200	; 0xc8
    3c12:	f00b fe05 	bl	f820 <k_sem_init>
			   CONFIG_BLUETOOTH_ATT_TX_MAX);

		*chan = &att->chan.chan;

		return 0;
    3c16:	0028      	movs	r0, r5
		att->chan.chan.ops = &ops;
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BLUETOOTH_ATT_TX_MAX,
			   CONFIG_BLUETOOTH_ATT_TX_MAX);

		*chan = &att->chan.chan;
    3c18:	6034      	str	r4, [r6, #0]
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    3c1a:	bd70      	pop	{r4, r5, r6, pc}
    3c1c:	20000a6c 	.word	0x20000a6c
    3c20:	20000404 	.word	0x20000404

00003c24 <att_req_destroy>:
};

static struct bt_att bt_req_pool[CONFIG_BLUETOOTH_MAX_CONN];

static void att_req_destroy(struct bt_att_req *req)
{
    3c24:	b510      	push	{r4, lr}
    3c26:	0004      	movs	r4, r0
	BT_DBG("req %p", req);

	if (req->buf) {
    3c28:	6900      	ldr	r0, [r0, #16]
    3c2a:	2800      	cmp	r0, #0
    3c2c:	d001      	beq.n	3c32 <att_req_destroy+0xe>
		net_buf_unref(req->buf);
    3c2e:	f00a fc47 	bl	e4c0 <net_buf_unref>
	}

	if (req->destroy) {
    3c32:	68a3      	ldr	r3, [r4, #8]
    3c34:	2b00      	cmp	r3, #0
    3c36:	d001      	beq.n	3c3c <att_req_destroy+0x18>
		req->destroy(req);
    3c38:	0020      	movs	r0, r4
    3c3a:	4798      	blx	r3
	}

	memset(req, 0, sizeof(*req));
    3c3c:	2214      	movs	r2, #20
    3c3e:	2100      	movs	r1, #0
    3c40:	0020      	movs	r0, r4
    3c42:	f7fd f852 	bl	cea <memset>
}
    3c46:	bd10      	pop	{r4, pc}

00003c48 <att_notify>:

	return att_handle_rsp(att, buf->data, buf->len, 0);
}

static u8_t att_notify(struct bt_att *att, struct net_buf *buf)
{
    3c48:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    3c4a:	3108      	adds	r1, #8
    3c4c:	0008      	movs	r0, r1
    3c4e:	f00a fc8a 	bl	e566 <net_buf_simple_pull_le16>
	BT_DBG("handle 0x%04x", handle);

	bt_gatt_notification(conn, handle, buf->data, buf->len);

	return 0;
}
    3c52:	2000      	movs	r0, #0
    3c54:	bd10      	pop	{r4, pc}
	...

00003c58 <read_group_cb>:
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3c58:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
    3c5a:	680e      	ldr	r6, [r1, #0]
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3c5c:	b087      	sub	sp, #28
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    3c5e:	6833      	ldr	r3, [r6, #0]
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    3c60:	2700      	movs	r7, #0

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    3c62:	9303      	str	r3, [sp, #12]
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    3c64:	23a0      	movs	r3, #160	; 0xa0
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3c66:	0005      	movs	r5, r0
    3c68:	000c      	movs	r4, r1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    3c6a:	019b      	lsls	r3, r3, #6
    3c6c:	a904      	add	r1, sp, #16
    3c6e:	6800      	ldr	r0, [r0, #0]
    3c70:	700f      	strb	r7, [r1, #0]
    3c72:	804b      	strh	r3, [r1, #2]
    3c74:	f7fd fede 	bl	1a34 <bt_uuid_cmp>
    3c78:	42b8      	cmp	r0, r7
    3c7a:	d018      	beq.n	3cae <read_group_cb+0x56>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    3c7c:	4b30      	ldr	r3, [pc, #192]	; (3d40 <read_group_cb+0xe8>)
    3c7e:	a905      	add	r1, sp, #20
    3c80:	6828      	ldr	r0, [r5, #0]
    3c82:	700f      	strb	r7, [r1, #0]
    3c84:	804b      	strh	r3, [r1, #2]
    3c86:	f7fd fed5 	bl	1a34 <bt_uuid_cmp>
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    3c8a:	42b8      	cmp	r0, r7
    3c8c:	d00f      	beq.n	3cae <read_group_cb+0x56>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    3c8e:	6923      	ldr	r3, [r4, #16]
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    3c90:	2001      	movs	r0, #1
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    3c92:	42bb      	cmp	r3, r7
    3c94:	d051      	beq.n	3d3a <read_group_cb+0xe2>
    3c96:	78d9      	ldrb	r1, [r3, #3]
    3c98:	7898      	ldrb	r0, [r3, #2]
    3c9a:	8a2a      	ldrh	r2, [r5, #16]
    3c9c:	0209      	lsls	r1, r1, #8
    3c9e:	4301      	orrs	r1, r0
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    3ca0:	2001      	movs	r0, #1
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    3ca2:	428a      	cmp	r2, r1
    3ca4:	d949      	bls.n	3d3a <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    3ca6:	709a      	strb	r2, [r3, #2]
    3ca8:	0a12      	lsrs	r2, r2, #8
    3caa:	70da      	strb	r2, [r3, #3]
    3cac:	e045      	b.n	3d3a <read_group_cb+0xe2>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* If Group Type don't match skip */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    3cae:	6861      	ldr	r1, [r4, #4]
    3cb0:	6828      	ldr	r0, [r5, #0]
    3cb2:	f7fd febf 	bl	1a34 <bt_uuid_cmp>
    3cb6:	2800      	cmp	r0, #0
    3cb8:	d002      	beq.n	3cc0 <read_group_cb+0x68>
		data->group = NULL;
    3cba:	2300      	movs	r3, #0
    3cbc:	6123      	str	r3, [r4, #16]
    3cbe:	e03b      	b.n	3d38 <read_group_cb+0xe0>
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* Stop if there is no space left */
	if (data->rsp->len &&
    3cc0:	68e3      	ldr	r3, [r4, #12]
    3cc2:	3656      	adds	r6, #86	; 0x56
    3cc4:	781a      	ldrb	r2, [r3, #0]
    3cc6:	68a0      	ldr	r0, [r4, #8]
    3cc8:	2a00      	cmp	r2, #0
    3cca:	d006      	beq.n	3cda <read_group_cb+0x82>
    3ccc:	8833      	ldrh	r3, [r6, #0]
    3cce:	8981      	ldrh	r1, [r0, #12]
    3cd0:	1a5b      	subs	r3, r3, r1
    3cd2:	4293      	cmp	r3, r2
    3cd4:	da01      	bge.n	3cda <read_group_cb+0x82>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
		return BT_GATT_ITER_STOP;
    3cd6:	2000      	movs	r0, #0
    3cd8:	e02f      	b.n	3d3a <read_group_cb+0xe2>
	}

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    3cda:	2104      	movs	r1, #4
    3cdc:	3008      	adds	r0, #8
    3cde:	f00a fc11 	bl	e504 <net_buf_simple_add>

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    3ce2:	2700      	movs	r7, #0
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
		return BT_GATT_ITER_STOP;
	}

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    3ce4:	6120      	str	r0, [r4, #16]

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    3ce6:	8a2b      	ldrh	r3, [r5, #16]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    3ce8:	68a1      	ldr	r1, [r4, #8]

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    3cea:	b2da      	uxtb	r2, r3
    3cec:	0a1b      	lsrs	r3, r3, #8
    3cee:	7002      	strb	r2, [r0, #0]
    3cf0:	7043      	strb	r3, [r0, #1]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    3cf2:	7082      	strb	r2, [r0, #2]
    3cf4:	70c3      	strb	r3, [r0, #3]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    3cf6:	898a      	ldrh	r2, [r1, #12]
    3cf8:	8833      	ldrh	r3, [r6, #0]
    3cfa:	6889      	ldr	r1, [r1, #8]
    3cfc:	1a9b      	subs	r3, r3, r2
    3cfe:	b29b      	uxth	r3, r3
    3d00:	188a      	adds	r2, r1, r2
    3d02:	9700      	str	r7, [sp, #0]
    3d04:	0029      	movs	r1, r5
    3d06:	686e      	ldr	r6, [r5, #4]
    3d08:	9803      	ldr	r0, [sp, #12]
    3d0a:	47b0      	blx	r6
    3d0c:	0001      	movs	r1, r0
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
    3d0e:	42b8      	cmp	r0, r7
    3d10:	dbe1      	blt.n	3cd6 <read_group_cb+0x7e>
		/* TODO: Handle read errors */
		return BT_GATT_ITER_STOP;
	}

	if (!data->rsp->len) {
    3d12:	68e0      	ldr	r0, [r4, #12]
    3d14:	1d0b      	adds	r3, r1, #4
    3d16:	7802      	ldrb	r2, [r0, #0]
    3d18:	42ba      	cmp	r2, r7
    3d1a:	d101      	bne.n	3d20 <read_group_cb+0xc8>
		/* Set len to be the first group found */
		data->rsp->len = read + sizeof(*data->group);
    3d1c:	7003      	strb	r3, [r0, #0]
    3d1e:	e006      	b.n	3d2e <read_group_cb+0xd6>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    3d20:	429a      	cmp	r2, r3
    3d22:	d004      	beq.n	3d2e <read_group_cb+0xd6>
		/* All groups entries should have the same size */
		data->buf->len -= sizeof(*data->group);
    3d24:	68a2      	ldr	r2, [r4, #8]
    3d26:	8993      	ldrh	r3, [r2, #12]
    3d28:	3b04      	subs	r3, #4
    3d2a:	8193      	strh	r3, [r2, #12]
    3d2c:	e7d3      	b.n	3cd6 <read_group_cb+0x7e>
		return false;
	}

	net_buf_add(data->buf, read);
    3d2e:	68a3      	ldr	r3, [r4, #8]
    3d30:	3308      	adds	r3, #8
    3d32:	0018      	movs	r0, r3
    3d34:	f00a fbe6 	bl	e504 <net_buf_simple_add>

	/* Continue to find the end handle */
	return BT_GATT_ITER_CONTINUE;
    3d38:	2001      	movs	r0, #1
}
    3d3a:	b007      	add	sp, #28
    3d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d3e:	46c0      	nop			; (mov r8, r8)
    3d40:	00002801 	.word	0x00002801

00003d44 <find_info_cb>:
	struct bt_att *att = data->att;

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
    3d44:	688b      	ldr	r3, [r1, #8]
		struct bt_att_info_128 *info128;
	};
};

static u8_t find_info_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3d46:	b570      	push	{r4, r5, r6, lr}
    3d48:	0005      	movs	r5, r0
    3d4a:	000c      	movs	r4, r1
	struct find_info_data *data = user_data;
	struct bt_att *att = data->att;
    3d4c:	680e      	ldr	r6, [r1, #0]

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d10c      	bne.n	3d6c <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    3d52:	6848      	ldr	r0, [r1, #4]
    3d54:	2101      	movs	r1, #1
    3d56:	3008      	adds	r0, #8
    3d58:	f00a fbd4 	bl	e504 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    3d5c:	682b      	ldr	r3, [r5, #0]

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    3d5e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    3d60:	781a      	ldrb	r2, [r3, #0]
    3d62:	4253      	negs	r3, r2
    3d64:	4153      	adcs	r3, r2
    3d66:	2202      	movs	r2, #2
    3d68:	1ad3      	subs	r3, r2, r3
    3d6a:	7003      	strb	r3, [r0, #0]
				    BT_ATT_INFO_16 : BT_ATT_INFO_128;
	}

	switch (data->rsp->format) {
    3d6c:	68a3      	ldr	r3, [r4, #8]
    3d6e:	781b      	ldrb	r3, [r3, #0]
    3d70:	2b01      	cmp	r3, #1
    3d72:	d002      	beq.n	3d7a <find_info_cb+0x36>
    3d74:	2b02      	cmp	r3, #2
    3d76:	d01b      	beq.n	3db0 <find_info_cb+0x6c>
    3d78:	e03a      	b.n	3df0 <find_info_cb+0xac>
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    3d7a:	2000      	movs	r0, #0
				    BT_ATT_INFO_16 : BT_ATT_INFO_128;
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    3d7c:	682b      	ldr	r3, [r5, #0]
    3d7e:	781b      	ldrb	r3, [r3, #0]
    3d80:	4283      	cmp	r3, r0
    3d82:	d136      	bne.n	3df2 <find_info_cb+0xae>
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    3d84:	6860      	ldr	r0, [r4, #4]
    3d86:	2104      	movs	r1, #4
    3d88:	3008      	adds	r0, #8
    3d8a:	f00a fbbb 	bl	e504 <net_buf_simple_add>
    3d8e:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    3d90:	7c2b      	ldrb	r3, [r5, #16]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);

		if (att->chan.tx.mtu - data->buf->len >
    3d92:	3656      	adds	r6, #86	; 0x56
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    3d94:	7003      	strb	r3, [r0, #0]
    3d96:	7c6b      	ldrb	r3, [r5, #17]
    3d98:	7043      	strb	r3, [r0, #1]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    3d9a:	682b      	ldr	r3, [r5, #0]
    3d9c:	789a      	ldrb	r2, [r3, #2]
    3d9e:	7082      	strb	r2, [r0, #2]
    3da0:	78db      	ldrb	r3, [r3, #3]

		if (att->chan.tx.mtu - data->buf->len >
    3da2:	6862      	ldr	r2, [r4, #4]
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
		data->info16->handle = sys_cpu_to_le16(attr->handle);
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    3da4:	70c3      	strb	r3, [r0, #3]
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    3da6:	8833      	ldrh	r3, [r6, #0]
    3da8:	8990      	ldrh	r0, [r2, #12]
    3daa:	1a18      	subs	r0, r3, r0
    3dac:	2304      	movs	r3, #4
    3dae:	e01b      	b.n	3de8 <find_info_cb+0xa4>
			return BT_GATT_ITER_CONTINUE;
		}

		break;
	case BT_ATT_INFO_128:
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    3db0:	682b      	ldr	r3, [r5, #0]
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    3db2:	2000      	movs	r0, #0
			return BT_GATT_ITER_CONTINUE;
		}

		break;
	case BT_ATT_INFO_128:
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    3db4:	781b      	ldrb	r3, [r3, #0]
    3db6:	2b02      	cmp	r3, #2
    3db8:	d11b      	bne.n	3df2 <find_info_cb+0xae>
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    3dba:	6860      	ldr	r0, [r4, #4]
    3dbc:	2112      	movs	r1, #18
    3dbe:	3008      	adds	r0, #8
    3dc0:	f00a fba0 	bl	e504 <net_buf_simple_add>
    3dc4:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    3dc6:	7c2b      	ldrb	r3, [r5, #16]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    3dc8:	6829      	ldr	r1, [r5, #0]
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    3dca:	7003      	strb	r3, [r0, #0]
    3dcc:	7c6b      	ldrb	r3, [r5, #17]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    3dce:	2210      	movs	r2, #16
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    3dd0:	7043      	strb	r3, [r0, #1]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    3dd2:	68e3      	ldr	r3, [r4, #12]
    3dd4:	3101      	adds	r1, #1
    3dd6:	1c98      	adds	r0, r3, #2
    3dd8:	f7fc ff5d 	bl	c96 <memcpy>
		       sizeof(data->info128->uuid));

		if (att->chan.tx.mtu - data->buf->len >
    3ddc:	6862      	ldr	r2, [r4, #4]
    3dde:	3656      	adds	r6, #86	; 0x56
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    3de0:	8833      	ldrh	r3, [r6, #0]
    3de2:	8990      	ldrh	r0, [r2, #12]
    3de4:	1a18      	subs	r0, r3, r0
    3de6:	2312      	movs	r3, #18
    3de8:	4283      	cmp	r3, r0
    3dea:	4180      	sbcs	r0, r0
    3dec:	4240      	negs	r0, r0
    3dee:	e000      	b.n	3df2 <find_info_cb+0xae>
		    sizeof(*data->info128)) {
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_STOP;
    3df0:	2000      	movs	r0, #0
}
    3df2:	bd70      	pop	{r4, r5, r6, pc}

00003df4 <find_type_cb>:
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3df4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    3df6:	2700      	movs	r7, #0
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
    3df8:	680e      	ldr	r6, [r1, #0]
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3dfa:	b08b      	sub	sp, #44	; 0x2c
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    3dfc:	6833      	ldr	r3, [r6, #0]
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3dfe:	0005      	movs	r5, r0
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    3e00:	9303      	str	r3, [sp, #12]
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    3e02:	4b29      	ldr	r3, [pc, #164]	; (3ea8 <find_type_cb+0xb4>)
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3e04:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    3e06:	6800      	ldr	r0, [r0, #0]
    3e08:	a904      	add	r1, sp, #16
    3e0a:	700f      	strb	r7, [r1, #0]
    3e0c:	804b      	strh	r3, [r1, #2]
    3e0e:	f7fd fe11 	bl	1a34 <bt_uuid_cmp>
    3e12:	42b8      	cmp	r0, r7
    3e14:	d102      	bne.n	3e1c <find_type_cb+0x28>
		data->group = NULL;
    3e16:	2300      	movs	r3, #0
    3e18:	60a3      	str	r3, [r4, #8]
    3e1a:	e041      	b.n	3ea0 <find_type_cb+0xac>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    3e1c:	23a0      	movs	r3, #160	; 0xa0
    3e1e:	a905      	add	r1, sp, #20
    3e20:	019b      	lsls	r3, r3, #6
    3e22:	6828      	ldr	r0, [r5, #0]
    3e24:	700f      	strb	r7, [r1, #0]
    3e26:	804b      	strh	r3, [r1, #2]
    3e28:	f7fd fe04 	bl	1a34 <bt_uuid_cmp>
    3e2c:	2800      	cmp	r0, #0
    3e2e:	d00e      	beq.n	3e4e <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    3e30:	68a3      	ldr	r3, [r4, #8]
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    3e32:	2601      	movs	r6, #1
		return BT_GATT_ITER_CONTINUE;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    3e34:	2b00      	cmp	r3, #0
    3e36:	d034      	beq.n	3ea2 <find_type_cb+0xae>
    3e38:	78d9      	ldrb	r1, [r3, #3]
    3e3a:	7898      	ldrb	r0, [r3, #2]
    3e3c:	8a2a      	ldrh	r2, [r5, #16]
    3e3e:	0209      	lsls	r1, r1, #8
    3e40:	4301      	orrs	r1, r0
    3e42:	428a      	cmp	r2, r1
    3e44:	d92d      	bls.n	3ea2 <find_type_cb+0xae>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    3e46:	709a      	strb	r2, [r3, #2]
    3e48:	0a12      	lsrs	r2, r2, #8
    3e4a:	70da      	strb	r2, [r3, #3]
    3e4c:	e029      	b.n	3ea2 <find_type_cb+0xae>
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* stop if there is no space left */
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    3e4e:	0033      	movs	r3, r6
    3e50:	6862      	ldr	r2, [r4, #4]
    3e52:	3356      	adds	r3, #86	; 0x56
    3e54:	881b      	ldrh	r3, [r3, #0]
    3e56:	8992      	ldrh	r2, [r2, #12]
		return BT_GATT_ITER_STOP;
    3e58:	0006      	movs	r6, r0
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* stop if there is no space left */
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    3e5a:	1a9b      	subs	r3, r3, r2
    3e5c:	2b03      	cmp	r3, #3
    3e5e:	d920      	bls.n	3ea2 <find_type_cb+0xae>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    3e60:	9000      	str	r0, [sp, #0]
    3e62:	aa06      	add	r2, sp, #24
    3e64:	2310      	movs	r3, #16
    3e66:	0029      	movs	r1, r5
    3e68:	9803      	ldr	r0, [sp, #12]
    3e6a:	686f      	ldr	r7, [r5, #4]
    3e6c:	47b8      	blx	r7
    3e6e:	1e02      	subs	r2, r0, #0
	if (read < 0) {
    3e70:	dbd1      	blt.n	3e16 <find_type_cb+0x22>
		data->group = NULL;
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check if data matches */
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    3e72:	7c23      	ldrb	r3, [r4, #16]
    3e74:	4298      	cmp	r0, r3
    3e76:	d1ce      	bne.n	3e16 <find_type_cb+0x22>
    3e78:	a906      	add	r1, sp, #24
    3e7a:	68e0      	ldr	r0, [r4, #12]
    3e7c:	f7fc fef6 	bl	c6c <memcmp>
    3e80:	2800      	cmp	r0, #0
    3e82:	d1c8      	bne.n	3e16 <find_type_cb+0x22>

	/* If service has been found, error should be cleared */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    3e84:	6860      	ldr	r0, [r4, #4]
		data->group = NULL;
		return BT_GATT_ITER_CONTINUE;
	}

	/* If service has been found, error should be cleared */
	data->err = 0x00;
    3e86:	7466      	strb	r6, [r4, #17]

	/* Fast foward to next item position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    3e88:	3008      	adds	r0, #8
    3e8a:	2104      	movs	r1, #4
    3e8c:	f00a fb3a 	bl	e504 <net_buf_simple_add>
    3e90:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    3e92:	8a2b      	ldrh	r3, [r5, #16]
    3e94:	b2da      	uxtb	r2, r3
    3e96:	0a1b      	lsrs	r3, r3, #8
    3e98:	7002      	strb	r2, [r0, #0]
    3e9a:	7043      	strb	r3, [r0, #1]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    3e9c:	7082      	strb	r2, [r0, #2]
    3e9e:	70c3      	strb	r3, [r0, #3]

	/* continue to find the end_handle */
	return BT_GATT_ITER_CONTINUE;
    3ea0:	2601      	movs	r6, #1
}
    3ea2:	0030      	movs	r0, r6
    3ea4:	b00b      	add	sp, #44	; 0x2c
    3ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ea8:	00002801 	.word	0x00002801

00003eac <bt_att_connected>:

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    3eac:	0002      	movs	r2, r0
    3eae:	2317      	movs	r3, #23
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    3eb0:	b510      	push	{r4, lr}
    3eb2:	0004      	movs	r4, r0

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    3eb4:	3256      	adds	r2, #86	; 0x56
    3eb6:	8013      	strh	r3, [r2, #0]
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;

	k_delayed_work_init(&att->timeout_work, att_timeout);
    3eb8:	4906      	ldr	r1, [pc, #24]	; (3ed4 <bt_att_connected+0x28>)
#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    3eba:	8743      	strh	r3, [r0, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
    3ebc:	30a0      	adds	r0, #160	; 0xa0
    3ebe:	f00b ff83 	bl	fdc8 <k_delayed_work_init>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    3ec2:	0023      	movs	r3, r4
    3ec4:	2200      	movs	r2, #0
    3ec6:	3398      	adds	r3, #152	; 0x98
    3ec8:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
    3eca:	605a      	str	r2, [r3, #4]
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    3ecc:	6820      	ldr	r0, [r4, #0]
    3ece:	f001 fa4d 	bl	536c <bt_gatt_connected>
}
    3ed2:	bd10      	pop	{r4, pc}
    3ed4:	00004359 	.word	0x00004359

00003ed8 <check_perm.isra.3>:
	}

	return false;
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
    3ed8:	b510      	push	{r4, lr}
    3eda:	0002      	movs	r2, r0
    3edc:	7c83      	ldrb	r3, [r0, #18]
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    3ede:	07c8      	lsls	r0, r1, #31
    3ee0:	d506      	bpl.n	3ef0 <check_perm.isra.3+0x18>
    3ee2:	2415      	movs	r4, #21
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    3ee4:	2002      	movs	r0, #2
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    3ee6:	4223      	tst	r3, r4
    3ee8:	d014      	beq.n	3f14 <check_perm.isra.3+0x3c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    3eea:	6854      	ldr	r4, [r2, #4]
    3eec:	2c00      	cmp	r4, #0
    3eee:	d011      	beq.n	3f14 <check_perm.isra.3+0x3c>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    3ef0:	0788      	lsls	r0, r1, #30
    3ef2:	d506      	bpl.n	3f02 <check_perm.isra.3+0x2a>
    3ef4:	242a      	movs	r4, #42	; 0x2a
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    3ef6:	2003      	movs	r0, #3
	if ((mask & BT_GATT_PERM_READ) &&
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
		return BT_ATT_ERR_READ_NOT_PERMITTED;
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    3ef8:	4223      	tst	r3, r4
    3efa:	d00b      	beq.n	3f14 <check_perm.isra.3+0x3c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    3efc:	6892      	ldr	r2, [r2, #8]
    3efe:	2a00      	cmp	r2, #0
    3f00:	d008      	beq.n	3f14 <check_perm.isra.3+0x3c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
	}

	mask &= attr->perm;
    3f02:	4019      	ands	r1, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    3f04:	2330      	movs	r3, #48	; 0x30
#if defined(CONFIG_BLUETOOTH_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
			return BT_ATT_ERR_AUTHENTICATION;
		}
#else
		return BT_ATT_ERR_AUTHENTICATION;
    3f06:	2005      	movs	r0, #5
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
	}

	mask &= attr->perm;
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    3f08:	4219      	tst	r1, r3
    3f0a:	d103      	bne.n	3f14 <check_perm.isra.3+0x3c>
    3f0c:	3007      	adds	r0, #7
    3f0e:	4008      	ands	r0, r1
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    3f10:	d000      	beq.n	3f14 <check_perm.isra.3+0x3c>
#if defined(CONFIG_BLUETOOTH_SMP)
		if (!conn->encrypt) {
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
		}
#else
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    3f12:	200f      	movs	r0, #15
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	return 0;
}
    3f14:	bd10      	pop	{r4, pc}

00003f16 <read_type_cb>:
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3f16:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
    3f18:	680b      	ldr	r3, [r1, #0]
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3f1a:	b085      	sub	sp, #20
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
    3f1c:	9302      	str	r3, [sp, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    3f1e:	681b      	ldr	r3, [r3, #0]
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    3f20:	0006      	movs	r6, r0
    3f22:	000c      	movs	r4, r1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    3f24:	6800      	ldr	r0, [r0, #0]
    3f26:	6849      	ldr	r1, [r1, #4]

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    3f28:	9303      	str	r3, [sp, #12]
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    3f2a:	f7fd fd83 	bl	1a34 <bt_uuid_cmp>
		return BT_GATT_ITER_CONTINUE;
    3f2e:	2501      	movs	r5, #1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    3f30:	1e07      	subs	r7, r0, #0
    3f32:	d150      	bne.n	3fd6 <read_type_cb+0xc0>
	 *
	 * If the first attribute in the set of requested attributes would
	 * cause an Error Response then no other attributes in the requested
	 * attributes can be considered.
	 */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    3f34:	2115      	movs	r1, #21
    3f36:	0030      	movs	r0, r6
    3f38:	f7ff ffce 	bl	3ed8 <check_perm.isra.3>
    3f3c:	1e05      	subs	r5, r0, #0
    3f3e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    3f40:	d006      	beq.n	3f50 <read_type_cb+0x3a>
		if (data->rsp->len) {
    3f42:	68e3      	ldr	r3, [r4, #12]
    3f44:	781d      	ldrb	r5, [r3, #0]
    3f46:	2d00      	cmp	r5, #0
    3f48:	d045      	beq.n	3fd6 <read_type_cb+0xc0>
			data->err = 0x00;
    3f4a:	7527      	strb	r7, [r4, #20]
		}
		return BT_GATT_ITER_STOP;
    3f4c:	003d      	movs	r5, r7
    3f4e:	e042      	b.n	3fd6 <read_type_cb+0xc0>

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: attr not found error to no error.
	 */
	data->err = 0x00;
    3f50:	7520      	strb	r0, [r4, #20]

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    3f52:	68a0      	ldr	r0, [r4, #8]
    3f54:	2102      	movs	r1, #2
    3f56:	3008      	adds	r0, #8
    3f58:	f00a fad4 	bl	e504 <net_buf_simple_add>
    3f5c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    3f5e:	7c33      	ldrb	r3, [r6, #16]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
    3f60:	9f02      	ldr	r7, [sp, #8]
	 */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);
    3f62:	7003      	strb	r3, [r0, #0]
    3f64:	7c73      	ldrb	r3, [r6, #17]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    3f66:	68a1      	ldr	r1, [r4, #8]
	 */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);
    3f68:	7043      	strb	r3, [r0, #1]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
    3f6a:	3756      	adds	r7, #86	; 0x56
	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    3f6c:	898a      	ldrh	r2, [r1, #12]
    3f6e:	883b      	ldrh	r3, [r7, #0]
    3f70:	6889      	ldr	r1, [r1, #8]
    3f72:	9500      	str	r5, [sp, #0]
    3f74:	1a9b      	subs	r3, r3, r2
    3f76:	188a      	adds	r2, r1, r2
    3f78:	6871      	ldr	r1, [r6, #4]
    3f7a:	b29b      	uxth	r3, r3
    3f7c:	468c      	mov	ip, r1
    3f7e:	9803      	ldr	r0, [sp, #12]
    3f80:	0031      	movs	r1, r6
    3f82:	4666      	mov	r6, ip
    3f84:	47b0      	blx	r6
    3f86:	1e01      	subs	r1, r0, #0
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
    3f88:	da08      	bge.n	3f9c <read_type_cb+0x86>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    3f8a:	000b      	movs	r3, r1
    3f8c:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    3f8e:	200e      	movs	r0, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    3f90:	2bfe      	cmp	r3, #254	; 0xfe
    3f92:	d801      	bhi.n	3f98 <read_type_cb+0x82>
		return -err;
    3f94:	4249      	negs	r1, r1
    3f96:	b2c8      	uxtb	r0, r1

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
		data->err = err_to_att(read);
    3f98:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    3f9a:	e01c      	b.n	3fd6 <read_type_cb+0xc0>
	}

	if (!data->rsp->len) {
    3f9c:	68e0      	ldr	r0, [r4, #12]
    3f9e:	1c8b      	adds	r3, r1, #2
    3fa0:	7802      	ldrb	r2, [r0, #0]
    3fa2:	2a00      	cmp	r2, #0
    3fa4:	d101      	bne.n	3faa <read_type_cb+0x94>
		/* Set len to be the first item found */
		data->rsp->len = read + sizeof(*data->item);
    3fa6:	7003      	strb	r3, [r0, #0]
    3fa8:	e006      	b.n	3fb8 <read_type_cb+0xa2>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    3faa:	429a      	cmp	r2, r3
    3fac:	d004      	beq.n	3fb8 <read_type_cb+0xa2>
		/* All items should have the same size */
		data->buf->len -= sizeof(*data->item);
    3fae:	68a2      	ldr	r2, [r4, #8]
    3fb0:	8993      	ldrh	r3, [r2, #12]
    3fb2:	3b02      	subs	r3, #2
    3fb4:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    3fb6:	e00e      	b.n	3fd6 <read_type_cb+0xc0>
	}

	net_buf_add(data->buf, read);
    3fb8:	68a0      	ldr	r0, [r4, #8]

	/* return true only if there are still space for more items */
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    3fba:	2501      	movs	r5, #1
		/* All items should have the same size */
		data->buf->len -= sizeof(*data->item);
		return BT_GATT_ITER_STOP;
	}

	net_buf_add(data->buf, read);
    3fbc:	3008      	adds	r0, #8
    3fbe:	f00a faa1 	bl	e504 <net_buf_simple_add>

	/* return true only if there are still space for more items */
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    3fc2:	68a2      	ldr	r2, [r4, #8]
    3fc4:	883b      	ldrh	r3, [r7, #0]
    3fc6:	8992      	ldrh	r2, [r2, #12]
    3fc8:	1a9b      	subs	r3, r3, r2
    3fca:	68e2      	ldr	r2, [r4, #12]
    3fcc:	7812      	ldrb	r2, [r2, #0]
    3fce:	4293      	cmp	r3, r2
    3fd0:	dc00      	bgt.n	3fd4 <read_type_cb+0xbe>
    3fd2:	2500      	movs	r5, #0
    3fd4:	b2ed      	uxtb	r5, r5
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
}
    3fd6:	0028      	movs	r0, r5
    3fd8:	b005      	add	sp, #20
    3fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003fdc <uuid_create>:
	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
    3fdc:	b510      	push	{r4, lr}
	switch (buf->len) {
    3fde:	898b      	ldrh	r3, [r1, #12]
	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
    3fe0:	0004      	movs	r4, r0
	switch (buf->len) {
    3fe2:	2b02      	cmp	r3, #2
    3fe4:	d009      	beq.n	3ffa <uuid_create+0x1e>
    3fe6:	2b10      	cmp	r3, #16
    3fe8:	d110      	bne.n	400c <uuid_create+0x30>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
		return true;
	case 16:
		uuid->type = BT_UUID_TYPE_128;
    3fea:	2302      	movs	r3, #2
    3fec:	7003      	strb	r3, [r0, #0]
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    3fee:	898a      	ldrh	r2, [r1, #12]
    3ff0:	3001      	adds	r0, #1
    3ff2:	6889      	ldr	r1, [r1, #8]
    3ff4:	f7fc fe4f 	bl	c96 <memcpy>
    3ff8:	e006      	b.n	4008 <uuid_create+0x2c>

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
	switch (buf->len) {
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    3ffa:	2300      	movs	r3, #0
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    3ffc:	3108      	adds	r1, #8

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
	switch (buf->len) {
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    3ffe:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    4000:	0008      	movs	r0, r1
    4002:	f00a fab0 	bl	e566 <net_buf_simple_pull_le16>
    4006:	8060      	strh	r0, [r4, #2]
		return true;
	case 16:
		uuid->type = BT_UUID_TYPE_128;
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    4008:	2001      	movs	r0, #1
    400a:	e000      	b.n	400e <uuid_create+0x32>
		return true;
	}

	return false;
    400c:	2000      	movs	r0, #0
}
    400e:	bd10      	pop	{r4, pc}

00004010 <att_req_sent>:

	k_sem_give(&att->tx_sem);
}

static void att_req_sent(struct bt_conn *conn)
{
    4010:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4012:	2104      	movs	r1, #4
    4014:	f7ff fd4b 	bl	3aae <bt_l2cap_le_lookup_tx_cid>
    4018:	0004      	movs	r4, r0
{
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p att->req %p", conn, att, att->req);

	k_sem_give(&att->tx_sem);
    401a:	30c8      	adds	r0, #200	; 0xc8
    401c:	f00b fc08 	bl	f830 <k_sem_give>

	/* Start timeout work */
	if (att->req) {
    4020:	0023      	movs	r3, r4
    4022:	3394      	adds	r3, #148	; 0x94
    4024:	681b      	ldr	r3, [r3, #0]
    4026:	2b00      	cmp	r3, #0
    4028:	d005      	beq.n	4036 <att_req_sent+0x26>
		k_delayed_work_submit(&att->timeout_work, ATT_TIMEOUT);
    402a:	0021      	movs	r1, r4
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    402c:	4a02      	ldr	r2, [pc, #8]	; (4038 <att_req_sent+0x28>)
    402e:	31a0      	adds	r1, #160	; 0xa0
    4030:	4802      	ldr	r0, [pc, #8]	; (403c <att_req_sent+0x2c>)
    4032:	f00b ff17 	bl	fe64 <k_delayed_work_submit_to_queue>
	}
}
    4036:	bd10      	pop	{r4, pc}
    4038:	00007530 	.word	0x00007530
    403c:	20001c48 	.word	0x20001c48

00004040 <att_is_connected>:
	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
}

static inline bool att_is_connected(struct bt_att *att)
{
    4040:	b510      	push	{r4, lr}
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    4042:	6803      	ldr	r3, [r0, #0]
    4044:	2401      	movs	r4, #1
    4046:	334d      	adds	r3, #77	; 0x4d
    4048:	781b      	ldrb	r3, [r3, #0]
    404a:	2b03      	cmp	r3, #3
    404c:	d104      	bne.n	4058 <att_is_connected+0x18>
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
    404e:	3090      	adds	r0, #144	; 0x90
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4050:	f00a fd28 	bl	eaa4 <atomic_get>
    4054:	1080      	asrs	r0, r0, #2
	return 0;
}

static inline bool att_is_connected(struct bt_att *att)
{
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    4056:	4384      	bics	r4, r0
    4058:	0020      	movs	r0, r4
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}
    405a:	bd10      	pop	{r4, pc}

0000405c <att_prepare_write_req>:
    405c:	2006      	movs	r0, #6
    405e:	4770      	bx	lr

00004060 <att_chan_get>:
static struct bt_att *att_chan_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    4060:	0003      	movs	r3, r0
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    4062:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    4064:	334d      	adds	r3, #77	; 0x4d
    4066:	781b      	ldrb	r3, [r3, #0]
    4068:	2b03      	cmp	r3, #3
    406a:	d001      	beq.n	4070 <att_chan_get+0x10>
		BT_WARN("Not connected");
		return NULL;
    406c:	2000      	movs	r0, #0
    406e:	e00a      	b.n	4086 <att_chan_get+0x26>
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    4070:	2104      	movs	r1, #4
    4072:	f7ff fd2e 	bl	3ad2 <bt_l2cap_le_lookup_rx_cid>
    4076:	1e04      	subs	r4, r0, #0
	if (!chan) {
    4078:	d0f8      	beq.n	406c <att_chan_get+0xc>
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    407a:	3090      	adds	r0, #144	; 0x90
    407c:	f00a fd12 	bl	eaa4 <atomic_get>
    4080:	0743      	lsls	r3, r0, #29
    4082:	d4f3      	bmi.n	406c <att_chan_get+0xc>
    4084:	0020      	movs	r0, r4
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    4086:	bd10      	pop	{r4, pc}

00004088 <att_pdu_sent>:
		k_delayed_work_submit(&att->timeout_work, ATT_TIMEOUT);
	}
}

static void att_pdu_sent(struct bt_conn *conn)
{
    4088:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    408a:	2104      	movs	r1, #4
    408c:	f7ff fd0f 	bl	3aae <bt_l2cap_le_lookup_tx_cid>
{
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

	k_sem_give(&att->tx_sem);
    4090:	30c8      	adds	r0, #200	; 0xc8
    4092:	f00b fbcd 	bl	f830 <k_sem_give>
}
    4096:	bd10      	pop	{r4, pc}

00004098 <att_rsp_sent>:

	k_sem_give(&att->tx_sem);
}

static void att_rsp_sent(struct bt_conn *conn)
{
    4098:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    409a:	2104      	movs	r1, #4
    409c:	f7ff fd07 	bl	3aae <bt_l2cap_le_lookup_tx_cid>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    40a0:	2102      	movs	r1, #2
    40a2:	0004      	movs	r4, r0
    40a4:	4249      	negs	r1, r1
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    40a6:	3090      	adds	r0, #144	; 0x90
    40a8:	f00a fd13 	bl	ead2 <atomic_and>
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    40ac:	0020      	movs	r0, r4
    40ae:	30c8      	adds	r0, #200	; 0xc8
    40b0:	f00b fbbe 	bl	f830 <k_sem_give>
}
    40b4:	bd10      	pop	{r4, pc}

000040b6 <att_cfm_sent>:

	return CONTAINER_OF(chan, struct bt_att, chan);
}

static void att_cfm_sent(struct bt_conn *conn)
{
    40b6:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    40b8:	2104      	movs	r1, #4
    40ba:	f7ff fcf8 	bl	3aae <bt_l2cap_le_lookup_tx_cid>
    40be:	2103      	movs	r1, #3
    40c0:	0004      	movs	r4, r0
    40c2:	4249      	negs	r1, r1
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    40c4:	3090      	adds	r0, #144	; 0x90
    40c6:	f00a fd04 	bl	ead2 <atomic_and>
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    40ca:	0020      	movs	r0, r4
    40cc:	30c8      	adds	r0, #200	; 0xc8
    40ce:	f00b fbaf 	bl	f830 <k_sem_give>
}
    40d2:	bd10      	pop	{r4, pc}

000040d4 <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    40d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    40d6:	000c      	movs	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    40d8:	212a      	movs	r1, #42	; 0x2a
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    40da:	0006      	movs	r6, r0
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    40dc:	f7ff fefc 	bl	3ed8 <check_perm.isra.3>
    40e0:	1e05      	subs	r5, r0, #0
    40e2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    40e4:	d119      	bne.n	411a <write_cb+0x46>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	write = attr->write(data->conn, attr, data->value, data->len,
    40e6:	8a62      	ldrh	r2, [r4, #18]
    40e8:	9001      	str	r0, [sp, #4]
    40ea:	9200      	str	r2, [sp, #0]
    40ec:	7c23      	ldrb	r3, [r4, #16]
    40ee:	68b7      	ldr	r7, [r6, #8]
    40f0:	68e2      	ldr	r2, [r4, #12]
    40f2:	0031      	movs	r1, r6
    40f4:	6820      	ldr	r0, [r4, #0]
    40f6:	47b8      	blx	r7
			    data->offset, 0);
	if (write < 0 || write != data->len) {
    40f8:	2800      	cmp	r0, #0
    40fa:	db02      	blt.n	4102 <write_cb+0x2e>
    40fc:	7c23      	ldrb	r3, [r4, #16]
    40fe:	4298      	cmp	r0, r3
    4100:	d008      	beq.n	4114 <write_cb+0x40>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    4102:	0003      	movs	r3, r0
    4104:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    4106:	220e      	movs	r2, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    4108:	2bfe      	cmp	r3, #254	; 0xfe
    410a:	d801      	bhi.n	4110 <write_cb+0x3c>
		return -err;
    410c:	4240      	negs	r0, r0
    410e:	b2c2      	uxtb	r2, r0

	/* Read attribute value and store in the buffer */
	write = attr->write(data->conn, attr, data->value, data->len,
			    data->offset, 0);
	if (write < 0 || write != data->len) {
		data->err = err_to_att(write);
    4110:	7522      	strb	r2, [r4, #20]
    4112:	e003      	b.n	411c <write_cb+0x48>
		return BT_GATT_ITER_STOP;
	}

	data->err = 0;
    4114:	7525      	strb	r5, [r4, #20]

	return BT_GATT_ITER_CONTINUE;
    4116:	2501      	movs	r5, #1
    4118:	e000      	b.n	411c <write_cb+0x48>
	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    411a:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    411c:	0028      	movs	r0, r5
    411e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004120 <att_send_req>:

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
	BT_DBG("req %p", req);

	att->req = req;
    4120:	0003      	movs	r3, r0
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    4122:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("req %p", req);

	att->req = req;
    4124:	3394      	adds	r3, #148	; 0x94

	k_sem_take(&att->tx_sem, K_FOREVER);
    4126:	0005      	movs	r5, r0

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
	BT_DBG("req %p", req);

	att->req = req;
    4128:	6019      	str	r1, [r3, #0]
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    412a:	000e      	movs	r6, r1
	BT_DBG("req %p", req);

	att->req = req;

	k_sem_take(&att->tx_sem, K_FOREVER);
    412c:	2101      	movs	r1, #1
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    412e:	0004      	movs	r4, r0
	BT_DBG("req %p", req);

	att->req = req;

	k_sem_take(&att->tx_sem, K_FOREVER);
    4130:	35c8      	adds	r5, #200	; 0xc8
    4132:	4249      	negs	r1, r1
    4134:	0028      	movs	r0, r5
    4136:	f00b fbb7 	bl	f8a8 <k_sem_take>
	if (!att_is_connected(att)) {
    413a:	0020      	movs	r0, r4
    413c:	f7ff ff80 	bl	4040 <att_is_connected>
    4140:	2800      	cmp	r0, #0
    4142:	d105      	bne.n	4150 <att_send_req+0x30>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
    4144:	0028      	movs	r0, r5
    4146:	f00b fb73 	bl	f830 <k_sem_give>
		return -ENOTCONN;
    414a:	2039      	movs	r0, #57	; 0x39
    414c:	4240      	negs	r0, r0
    414e:	e01f      	b.n	4190 <att_send_req+0x70>
	}

	/* Save request state so it can be resent */
	net_buf_simple_save(&req->buf->b, &req->state);
    4150:	6935      	ldr	r5, [r6, #16]
    4152:	0028      	movs	r0, r5
    4154:	3008      	adds	r0, #8
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    4156:	f00a fa11 	bl	e57c <net_buf_simple_headroom>
    415a:	81b0      	strh	r0, [r6, #12]
	state->len = buf->len;
    415c:	89ab      	ldrh	r3, [r5, #12]

	/* Keep a reference for resending in case of an error */
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    415e:	6930      	ldr	r0, [r6, #16]
    4160:	81f3      	strh	r3, [r6, #14]
    4162:	6824      	ldr	r4, [r4, #0]
    4164:	f00a f9ca 	bl	e4fc <net_buf_ref>
    4168:	6933      	ldr	r3, [r6, #16]
    416a:	0005      	movs	r5, r0
	k_sem_give(&att->tx_sem);
}

static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
{
	switch (att_op_get_type(buf->data[0])) {
    416c:	689b      	ldr	r3, [r3, #8]
    416e:	7818      	ldrb	r0, [r3, #0]
    4170:	f7ff fd26 	bl	3bc0 <att_op_get_type>
    4174:	3801      	subs	r0, #1
    4176:	b2c0      	uxtb	r0, r0
    4178:	4b06      	ldr	r3, [pc, #24]	; (4194 <att_send_req+0x74>)
    417a:	2804      	cmp	r0, #4
    417c:	d802      	bhi.n	4184 <att_send_req+0x64>
    417e:	4b06      	ldr	r3, [pc, #24]	; (4198 <att_send_req+0x78>)
    4180:	0080      	lsls	r0, r0, #2
    4182:	58c3      	ldr	r3, [r0, r3]

	/* Save request state so it can be resent */
	net_buf_simple_save(&req->buf->b, &req->state);

	/* Keep a reference for resending in case of an error */
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    4184:	0020      	movs	r0, r4
    4186:	002a      	movs	r2, r5
    4188:	2104      	movs	r1, #4
    418a:	f7ff fc3d 	bl	3a08 <bt_l2cap_send_cb>
			 net_buf_ref(req->buf), att_cb(req->buf));

	return 0;
    418e:	2000      	movs	r0, #0
}
    4190:	bd70      	pop	{r4, r5, r6, pc}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	00004089 	.word	0x00004089
    4198:	00010268 	.word	0x00010268

0000419c <att_handle_rsp>:

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    419c:	b5f0      	push	{r4, r5, r6, r7, lr}
    419e:	0004      	movs	r4, r0
	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);

	if (!att->req) {
    41a0:	0025      	movs	r5, r4

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    41a2:	b085      	sub	sp, #20
	bt_att_func_t func;

	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);
    41a4:	30a0      	adds	r0, #160	; 0xa0

	if (!att->req) {
    41a6:	3594      	adds	r5, #148	; 0x94

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    41a8:	9303      	str	r3, [sp, #12]
    41aa:	9102      	str	r1, [sp, #8]
    41ac:	0017      	movs	r7, r2
	bt_att_func_t func;

	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);
    41ae:	f00b fe21 	bl	fdf4 <k_delayed_work_cancel>

	if (!att->req) {
    41b2:	682b      	ldr	r3, [r5, #0]
    41b4:	2b00      	cmp	r3, #0
    41b6:	d01a      	beq.n	41ee <att_handle_rsp+0x52>
		BT_WARN("No pending ATT request");
		goto process;
	}

	/* Release original buffer */
	if (att->req->buf) {
    41b8:	6918      	ldr	r0, [r3, #16]
    41ba:	2800      	cmp	r0, #0
    41bc:	d004      	beq.n	41c8 <att_handle_rsp+0x2c>
		net_buf_unref(att->req->buf);
    41be:	f00a f97f 	bl	e4c0 <net_buf_unref>
		att->req->buf = NULL;
    41c2:	2200      	movs	r2, #0
    41c4:	682b      	ldr	r3, [r5, #0]
    41c6:	611a      	str	r2, [r3, #16]
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    41c8:	682b      	ldr	r3, [r5, #0]
	att->req->func = NULL;
    41ca:	2600      	movs	r6, #0
		net_buf_unref(att->req->buf);
		att->req->buf = NULL;
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    41cc:	685a      	ldr	r2, [r3, #4]
	att->req->func = NULL;

	func(att->chan.chan.conn, err, pdu, len, att->req);
    41ce:	6820      	ldr	r0, [r4, #0]
		net_buf_unref(att->req->buf);
		att->req->buf = NULL;
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    41d0:	4694      	mov	ip, r2
	att->req->func = NULL;
    41d2:	605e      	str	r6, [r3, #4]

	func(att->chan.chan.conn, err, pdu, len, att->req);
    41d4:	9a02      	ldr	r2, [sp, #8]
    41d6:	9300      	str	r3, [sp, #0]
    41d8:	9903      	ldr	r1, [sp, #12]
    41da:	003b      	movs	r3, r7
    41dc:	4667      	mov	r7, ip
    41de:	47b8      	blx	r7

	/* Don't destroy if callback had reused the request */
	if (!att->req->func) {
    41e0:	6828      	ldr	r0, [r5, #0]
    41e2:	6843      	ldr	r3, [r0, #4]
    41e4:	42b3      	cmp	r3, r6
    41e6:	d101      	bne.n	41ec <att_handle_rsp+0x50>
		att_req_destroy(att->req);
    41e8:	f7ff fd1c 	bl	3c24 <att_req_destroy>
	}

	att->req = NULL;
    41ec:	602e      	str	r6, [r5, #0]
    41ee:	0023      	movs	r3, r4
    41f0:	3398      	adds	r3, #152	; 0x98
    41f2:	6819      	ldr	r1, [r3, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    41f4:	2900      	cmp	r1, #0
    41f6:	d008      	beq.n	420a <att_handle_rsp+0x6e>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    41f8:	680a      	ldr	r2, [r1, #0]
	if (list->tail == node) {
    41fa:	6858      	ldr	r0, [r3, #4]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    41fc:	601a      	str	r2, [r3, #0]
	if (list->tail == node) {
    41fe:	4281      	cmp	r1, r0
    4200:	d100      	bne.n	4204 <att_handle_rsp+0x68>
		list->tail = list->head;
    4202:	605a      	str	r2, [r3, #4]
	node = sys_slist_get(&att->reqs);
	if (!node) {
		return;
	}

	att_send_req(att, ATT_REQ(node));
    4204:	0020      	movs	r0, r4
    4206:	f7ff ff8b 	bl	4120 <att_send_req>
process:
	/* Process pending requests */
	att_process(att);

	return 0;
}
    420a:	2000      	movs	r0, #0
    420c:	b005      	add	sp, #20
    420e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004210 <att_confirm>:

	return 0;
}

static u8_t att_confirm(struct bt_att *att, struct net_buf *buf)
{
    4210:	b510      	push	{r4, lr}
	BT_DBG("");

	return att_handle_rsp(att, buf->data, buf->len, 0);
    4212:	2300      	movs	r3, #0
    4214:	898a      	ldrh	r2, [r1, #12]
    4216:	6889      	ldr	r1, [r1, #8]
    4218:	f7ff ffc0 	bl	419c <att_handle_rsp>
}
    421c:	bd10      	pop	{r4, pc}

0000421e <att_handle_exec_write_rsp>:
    421e:	b510      	push	{r4, lr}
    4220:	f7ff fff6 	bl	4210 <att_confirm>
    4224:	bd10      	pop	{r4, pc}

00004226 <att_handle_prepare_write_rsp>:
    4226:	b510      	push	{r4, lr}
    4228:	f7ff fff2 	bl	4210 <att_confirm>
    422c:	bd10      	pop	{r4, pc}

0000422e <att_handle_write_rsp>:
    422e:	b510      	push	{r4, lr}
    4230:	f7ff ffee 	bl	4210 <att_confirm>
    4234:	bd10      	pop	{r4, pc}

00004236 <att_handle_read_mult_rsp>:
    4236:	b510      	push	{r4, lr}
    4238:	f7ff ffea 	bl	4210 <att_confirm>
    423c:	bd10      	pop	{r4, pc}

0000423e <att_handle_read_blob_rsp>:
    423e:	b510      	push	{r4, lr}
    4240:	f7ff ffe6 	bl	4210 <att_confirm>
    4244:	bd10      	pop	{r4, pc}

00004246 <att_handle_read_rsp>:
    4246:	b510      	push	{r4, lr}
    4248:	f7ff ffe2 	bl	4210 <att_confirm>
    424c:	bd10      	pop	{r4, pc}

0000424e <att_handle_read_type_rsp>:
    424e:	b510      	push	{r4, lr}
    4250:	f7ff ffde 	bl	4210 <att_confirm>
    4254:	bd10      	pop	{r4, pc}

00004256 <att_handle_find_type_rsp>:
    4256:	b510      	push	{r4, lr}
    4258:	f7ff ffda 	bl	4210 <att_confirm>
    425c:	bd10      	pop	{r4, pc}

0000425e <att_handle_find_info_rsp>:
    425e:	b510      	push	{r4, lr}
    4260:	f7ff ffd6 	bl	4210 <att_confirm>
    4264:	bd10      	pop	{r4, pc}

00004266 <att_mtu_rsp>:

	return 0;
}

static u8_t att_mtu_rsp(struct bt_att *att, struct net_buf *buf)
{
    4266:	b510      	push	{r4, lr}
	struct bt_att_exchange_mtu_rsp *rsp;
	u16_t mtu;

	if (!att) {
		return 0;
    4268:	0003      	movs	r3, r0

	return 0;
}

static u8_t att_mtu_rsp(struct bt_att *att, struct net_buf *buf)
{
    426a:	000c      	movs	r4, r1
	struct bt_att_exchange_mtu_rsp *rsp;
	u16_t mtu;

	if (!att) {
    426c:	2800      	cmp	r0, #0
    426e:	d014      	beq.n	429a <att_mtu_rsp+0x34>
		return 0;
	}

	rsp = (void *)buf->data;
    4270:	6889      	ldr	r1, [r1, #8]

	mtu = sys_le16_to_cpu(rsp->mtu);
    4272:	784b      	ldrb	r3, [r1, #1]
    4274:	780a      	ldrb	r2, [r1, #0]
    4276:	021b      	lsls	r3, r3, #8

	BT_DBG("Server MTU %u", mtu);

	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    4278:	4313      	orrs	r3, r2
    427a:	2b16      	cmp	r3, #22
    427c:	d803      	bhi.n	4286 <att_mtu_rsp+0x20>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    427e:	2200      	movs	r2, #0
    4280:	2304      	movs	r3, #4
    4282:	0011      	movs	r1, r2
    4284:	e006      	b.n	4294 <att_mtu_rsp+0x2e>
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    4286:	0002      	movs	r2, r0
	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
	}

	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    4288:	2317      	movs	r3, #23
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    428a:	3256      	adds	r2, #86	; 0x56
	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
	}

	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    428c:	8743      	strh	r3, [r0, #58]	; 0x3a
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    428e:	8013      	strh	r3, [r2, #0]

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);

	return att_handle_rsp(att, rsp, buf->len, 0);
    4290:	2300      	movs	r3, #0
    4292:	89a2      	ldrh	r2, [r4, #12]
    4294:	f7ff ff82 	bl	419c <att_handle_rsp>
    4298:	0003      	movs	r3, r0
}
    429a:	0018      	movs	r0, r3
    429c:	bd10      	pop	{r4, pc}

0000429e <att_error_rsp>:
	rsp = (void *)buf->data;

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    429e:	0003      	movs	r3, r0
	return bt_conn_security(conn, sec);
}
#endif /* CONFIG_BLUETOOTH_SMP */

static u8_t att_error_rsp(struct bt_att *att, struct net_buf *buf)
{
    42a0:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    42a2:	3394      	adds	r3, #148	; 0x94
    42a4:	681a      	ldr	r2, [r3, #0]
static u8_t att_error_rsp(struct bt_att *att, struct net_buf *buf)
{
	struct bt_att_error_rsp *rsp;
	u8_t err;

	rsp = (void *)buf->data;
    42a6:	688c      	ldr	r4, [r1, #8]

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
		err = BT_ATT_ERR_UNLIKELY;
    42a8:	230e      	movs	r3, #14
	rsp = (void *)buf->data;

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    42aa:	2a00      	cmp	r2, #0
    42ac:	d00a      	beq.n	42c4 <att_error_rsp+0x26>
		err = BT_ATT_ERR_UNLIKELY;
		goto done;
	}

	if (att->req->buf) {
    42ae:	6913      	ldr	r3, [r2, #16]
    42b0:	2b00      	cmp	r3, #0
    42b2:	d006      	beq.n	42c2 <att_error_rsp+0x24>
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    42b4:	001d      	movs	r5, r3
    42b6:	8991      	ldrh	r1, [r2, #12]
    42b8:	3510      	adds	r5, #16
    42ba:	1869      	adds	r1, r5, r1
    42bc:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    42be:	89d2      	ldrh	r2, [r2, #14]
    42c0:	819a      	strh	r2, [r3, #12]
		/* Restore state to be resent */
		net_buf_simple_restore(&att->req->buf->b, &att->req->state);
	}

	err = rsp->error;
    42c2:	78e3      	ldrb	r3, [r4, #3]
		return 0;
	}
#endif /* CONFIG_BLUETOOTH_SMP */

done:
	return att_handle_rsp(att, NULL, 0, err);
    42c4:	2200      	movs	r2, #0
    42c6:	0011      	movs	r1, r2
    42c8:	f7ff ff68 	bl	419c <att_handle_rsp>
}
    42cc:	bd70      	pop	{r4, r5, r6, pc}

000042ce <att_reset>:

	return buf;
}

static void att_reset(struct bt_att *att)
{
    42ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    42d0:	0005      	movs	r5, r0

	atomic_set_bit(att->flags, ATT_DISCONNECTED);

	/* Ensure that any waiters are woken up */
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
    42d2:	002c      	movs	r4, r5
    42d4:	002e      	movs	r6, r5

	return buf;
}

static void att_reset(struct bt_att *att)
{
    42d6:	b085      	sub	sp, #20
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    42d8:	2104      	movs	r1, #4

	atomic_set_bit(att->flags, ATT_DISCONNECTED);

	/* Ensure that any waiters are woken up */
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
    42da:	34c8      	adds	r4, #200	; 0xc8
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
		net_buf_unref(buf);
	}
#endif

	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    42dc:	3090      	adds	r0, #144	; 0x90
    42de:	f00a fbed 	bl	eabc <atomic_or>

	/* Ensure that any waiters are woken up */
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
    42e2:	0020      	movs	r0, r4
    42e4:	f00b faa4 	bl	f830 <k_sem_give>
    42e8:	3698      	adds	r6, #152	; 0x98
    42ea:	0020      	movs	r0, r4
    42ec:	f00b faa0 	bl	f830 <k_sem_give>
    42f0:	6834      	ldr	r4, [r6, #0]
    42f2:	9603      	str	r6, [sp, #12]
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    42f4:	2c00      	cmp	r4, #0
    42f6:	d10e      	bne.n	4316 <att_reset+0x48>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    42f8:	2100      	movs	r1, #0
    42fa:	9b03      	ldr	r3, [sp, #12]
    42fc:	6019      	str	r1, [r3, #0]
	list->tail = NULL;
    42fe:	6059      	str	r1, [r3, #4]
	}

	/* Reset list */
	sys_slist_init(&att->reqs);

	if (!att->req) {
    4300:	002b      	movs	r3, r5
    4302:	3394      	adds	r3, #148	; 0x94
    4304:	681b      	ldr	r3, [r3, #0]
    4306:	428b      	cmp	r3, r1
    4308:	d017      	beq.n	433a <att_reset+0x6c>
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    430a:	230e      	movs	r3, #14
    430c:	000a      	movs	r2, r1
    430e:	0028      	movs	r0, r5
    4310:	f7ff ff44 	bl	419c <att_handle_rsp>
    4314:	e011      	b.n	433a <att_reset+0x6c>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    4316:	6827      	ldr	r7, [r4, #0]
		k_sem_give(&att->tx_sem);
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
		if (req->func) {
    4318:	6863      	ldr	r3, [r4, #4]
    431a:	1e1e      	subs	r6, r3, #0
    431c:	d005      	beq.n	432a <att_reset+0x5c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    431e:	2300      	movs	r3, #0
    4320:	9400      	str	r4, [sp, #0]
    4322:	001a      	movs	r2, r3
    4324:	210e      	movs	r1, #14
    4326:	0018      	movs	r0, r3
    4328:	47b0      	blx	r6
		}

		att_req_destroy(req);
    432a:	0020      	movs	r0, r4
    432c:	f7ff fc7a 	bl	3c24 <att_req_destroy>
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    4330:	2f00      	cmp	r7, #0
    4332:	d0e1      	beq.n	42f8 <att_reset+0x2a>
    4334:	003c      	movs	r4, r7
    4336:	683f      	ldr	r7, [r7, #0]
    4338:	e7ee      	b.n	4318 <att_reset+0x4a>
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}
    433a:	b005      	add	sp, #20
    433c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000433e <bt_att_disconnected>:

	bt_gatt_connected(ch->chan.conn);
}

static void bt_att_disconnected(struct bt_l2cap_chan *chan)
{
    433e:	b510      	push	{r4, lr}
    4340:	0004      	movs	r4, r0
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p cid 0x%04x", ch, ch->tx.cid);

	att_reset(att);
    4342:	f7ff ffc4 	bl	42ce <att_reset>

	bt_gatt_disconnected(ch->chan.conn);
    4346:	6820      	ldr	r0, [r4, #0]
    4348:	f001 f81c 	bl	5384 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    434c:	22dc      	movs	r2, #220	; 0xdc
    434e:	2100      	movs	r1, #0
    4350:	0020      	movs	r0, r4
    4352:	f7fc fcca 	bl	cea <memset>
}
    4356:	bd10      	pop	{r4, pc}

00004358 <att_timeout>:
	 * transaction shall be considered to have failed and the local higher
	 * layers shall be informed of this failure. No more attribute protocol
	 * requests, commands, indications or notifications shall be sent to the
	 * target device on this ATT Bearer.
	 */
	att_reset(att);
    4358:	38a0      	subs	r0, #160	; 0xa0
	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}

static void att_timeout(struct k_work *work)
{
    435a:	b510      	push	{r4, lr}
	 * transaction shall be considered to have failed and the local higher
	 * layers shall be informed of this failure. No more attribute protocol
	 * requests, commands, indications or notifications shall be sent to the
	 * target device on this ATT Bearer.
	 */
	att_reset(att);
    435c:	0004      	movs	r4, r0
    435e:	f7ff ffb6 	bl	42ce <att_reset>

	/* Consider the channel disconnected */
	bt_gatt_disconnected(ch->chan.conn);
    4362:	6820      	ldr	r0, [r4, #0]
    4364:	f001 f80e 	bl	5384 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    4368:	2300      	movs	r3, #0
    436a:	6023      	str	r3, [r4, #0]
}
    436c:	bd10      	pop	{r4, pc}

0000436e <read_cb>:
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    436e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
    4370:	680e      	ldr	r6, [r1, #0]
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4372:	0007      	movs	r7, r0
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4374:	6888      	ldr	r0, [r1, #8]

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    4376:	6833      	ldr	r3, [r6, #0]
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4378:	000c      	movs	r4, r1
    437a:	b085      	sub	sp, #20
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    437c:	2100      	movs	r1, #0
    437e:	3008      	adds	r0, #8

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    4380:	9303      	str	r3, [sp, #12]
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4382:	f00a f8bf 	bl	e504 <net_buf_simple_add>

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: invalid handle error to no error.
	 */
	data->err = 0x00;
    4386:	2300      	movs	r3, #0
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4388:	60e0      	str	r0, [r4, #12]

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: invalid handle error to no error.
	 */
	data->err = 0x00;
    438a:	7423      	strb	r3, [r4, #16]

	/* Check attribute permissions */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    438c:	2115      	movs	r1, #21
    438e:	0038      	movs	r0, r7
    4390:	f7ff fda2 	bl	3ed8 <check_perm.isra.3>
    4394:	1e05      	subs	r5, r0, #0
    4396:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    4398:	d11e      	bne.n	43d8 <read_cb+0x6a>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    439a:	68a1      	ldr	r1, [r4, #8]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    439c:	3656      	adds	r6, #86	; 0x56
	if (data->err) {
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    439e:	898a      	ldrh	r2, [r1, #12]
    43a0:	8833      	ldrh	r3, [r6, #0]
    43a2:	6889      	ldr	r1, [r1, #8]
    43a4:	1a9b      	subs	r3, r3, r2
    43a6:	188a      	adds	r2, r1, r2
    43a8:	88a1      	ldrh	r1, [r4, #4]
    43aa:	b29b      	uxth	r3, r3
    43ac:	9100      	str	r1, [sp, #0]
    43ae:	687e      	ldr	r6, [r7, #4]
    43b0:	0039      	movs	r1, r7
    43b2:	9803      	ldr	r0, [sp, #12]
    43b4:	47b0      	blx	r6
    43b6:	1e01      	subs	r1, r0, #0
			  att->chan.tx.mtu - data->buf->len, data->offset);
	if (read < 0) {
    43b8:	da08      	bge.n	43cc <read_cb+0x5e>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    43ba:	000b      	movs	r3, r1
    43bc:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    43be:	200e      	movs	r0, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    43c0:	2bfe      	cmp	r3, #254	; 0xfe
    43c2:	d801      	bhi.n	43c8 <read_cb+0x5a>
		return -err;
    43c4:	4249      	negs	r1, r1
    43c6:	b2c8      	uxtb	r0, r1

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, data->offset);
	if (read < 0) {
		data->err = err_to_att(read);
    43c8:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    43ca:	e006      	b.n	43da <read_cb+0x6c>
	}

	net_buf_add(data->buf, read);
    43cc:	68a0      	ldr	r0, [r4, #8]

	return BT_GATT_ITER_CONTINUE;
    43ce:	2501      	movs	r5, #1
	if (read < 0) {
		data->err = err_to_att(read);
		return BT_GATT_ITER_STOP;
	}

	net_buf_add(data->buf, read);
    43d0:	3008      	adds	r0, #8
    43d2:	f00a f897 	bl	e504 <net_buf_simple_add>

	return BT_GATT_ITER_CONTINUE;
    43d6:	e000      	b.n	43da <read_cb+0x6c>
	data->err = 0x00;

	/* Check attribute permissions */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    43d8:	2500      	movs	r5, #0
	}

	net_buf_add(data->buf, read);

	return BT_GATT_ITER_CONTINUE;
}
    43da:	0028      	movs	r0, r5
    43dc:	b005      	add	sp, #20
    43de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000043e0 <bt_att_create_pdu>:

	return att;
}

struct net_buf *bt_att_create_pdu(struct bt_conn *conn, u8_t op, size_t len)
{
    43e0:	b570      	push	{r4, r5, r6, lr}
    43e2:	000d      	movs	r5, r1
    43e4:	0014      	movs	r4, r2
	struct bt_att_hdr *hdr;
	struct net_buf *buf;
	struct bt_att *att;

	att = att_chan_get(conn);
    43e6:	f7ff fe3b 	bl	4060 <att_chan_get>
    43ea:	1e03      	subs	r3, r0, #0
	if (!att) {
    43ec:	d00f      	beq.n	440e <bt_att_create_pdu+0x2e>
		return NULL;
	}

	if (len + sizeof(op) > att->chan.tx.mtu) {
    43ee:	3356      	adds	r3, #86	; 0x56
    43f0:	881b      	ldrh	r3, [r3, #0]
    43f2:	3401      	adds	r4, #1
	struct net_buf *buf;
	struct bt_att *att;

	att = att_chan_get(conn);
	if (!att) {
		return NULL;
    43f4:	2000      	movs	r0, #0
	}

	if (len + sizeof(op) > att->chan.tx.mtu) {
    43f6:	429c      	cmp	r4, r3
    43f8:	d809      	bhi.n	440e <bt_att_create_pdu+0x2e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
			att->chan.tx.mtu, len + sizeof(op));
		return NULL;
	}

	buf = bt_l2cap_create_pdu(NULL, 0);
    43fa:	0001      	movs	r1, r0
    43fc:	f7ff faff 	bl	39fe <bt_l2cap_create_pdu>

	hdr = net_buf_add(buf, sizeof(*hdr));
    4400:	2101      	movs	r1, #1
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
			att->chan.tx.mtu, len + sizeof(op));
		return NULL;
	}

	buf = bt_l2cap_create_pdu(NULL, 0);
    4402:	0004      	movs	r4, r0

	hdr = net_buf_add(buf, sizeof(*hdr));
    4404:	3008      	adds	r0, #8
    4406:	f00a f87d 	bl	e504 <net_buf_simple_add>
	hdr->code = op;
    440a:	7005      	strb	r5, [r0, #0]

	return buf;
    440c:	0020      	movs	r0, r4
}
    440e:	bd70      	pop	{r4, r5, r6, pc}

00004410 <att_indicate>:

	return 0;
}

static u8_t att_indicate(struct bt_att *att, struct net_buf *buf)
{
    4410:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    4412:	3108      	adds	r1, #8
	return 0;
}

static u8_t att_indicate(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    4414:	6804      	ldr	r4, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    4416:	0008      	movs	r0, r1
    4418:	f00a f8a5 	bl	e566 <net_buf_simple_pull_le16>

	BT_DBG("handle 0x%04x", handle);

	bt_gatt_notification(conn, handle, buf->data, buf->len);

	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    441c:	2200      	movs	r2, #0
    441e:	211e      	movs	r1, #30
    4420:	0020      	movs	r0, r4
    4422:	f7ff ffdd 	bl	43e0 <bt_att_create_pdu>
    4426:	1e02      	subs	r2, r0, #0
	if (!buf) {
    4428:	d004      	beq.n	4434 <att_indicate+0x24>
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    442a:	4b03      	ldr	r3, [pc, #12]	; (4438 <att_indicate+0x28>)
    442c:	2104      	movs	r1, #4
    442e:	0020      	movs	r0, r4
    4430:	f7ff faea 	bl	3a08 <bt_l2cap_send_cb>

	return 0;
}
    4434:	2000      	movs	r0, #0
    4436:	bd10      	pop	{r4, pc}
    4438:	000040b7 	.word	0x000040b7

0000443c <att_mtu_req>:

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
    443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    443e:	688b      	ldr	r3, [r1, #8]

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
    4440:	0004      	movs	r4, r0
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    4442:	781a      	ldrb	r2, [r3, #0]
    4444:	785b      	ldrb	r3, [r3, #1]

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
    4446:	2004      	movs	r0, #4
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    4448:	021b      	lsls	r3, r3, #8

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    444a:	4313      	orrs	r3, r2
    444c:	2b16      	cmp	r3, #22
    444e:	d91c      	bls.n	448a <att_mtu_req+0x4e>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    4450:	6827      	ldr	r7, [r4, #0]
	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    4452:	2202      	movs	r2, #2
    4454:	2103      	movs	r1, #3
    4456:	0038      	movs	r0, r7
    4458:	f7ff ffc2 	bl	43e0 <bt_att_create_pdu>
    445c:	0006      	movs	r6, r0
	if (!pdu) {
		return BT_ATT_ERR_UNLIKELY;
    445e:	200e      	movs	r0, #14
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
	if (!pdu) {
    4460:	2e00      	cmp	r6, #0
    4462:	d012      	beq.n	448a <att_mtu_req+0x4e>

	mtu_server = BT_ATT_MTU;

	BT_DBG("Server MTU %u", mtu_server);

	rsp = net_buf_add(pdu, sizeof(*rsp));
    4464:	0030      	movs	r0, r6
    4466:	2102      	movs	r1, #2
    4468:	3008      	adds	r0, #8
    446a:	f00a f84b 	bl	e504 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    446e:	2517      	movs	r5, #23
    4470:	2300      	movs	r3, #0
    4472:	7005      	strb	r5, [r0, #0]
    4474:	7043      	strb	r3, [r0, #1]

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    4476:	0032      	movs	r2, r6
    4478:	0038      	movs	r0, r7
    447a:	4b04      	ldr	r3, [pc, #16]	; (448c <att_mtu_req+0x50>)
    447c:	2104      	movs	r1, #4
    447e:	f7ff fac3 	bl	3a08 <bt_l2cap_send_cb>
	 */
	att->chan.rx.mtu = min(mtu_client, mtu_server);
	att->chan.tx.mtu = att->chan.rx.mtu;

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
    4482:	2000      	movs	r0, #0
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    4484:	8765      	strh	r5, [r4, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    4486:	3456      	adds	r4, #86	; 0x56
    4488:	8025      	strh	r5, [r4, #0]

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
}
    448a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    448c:	00004099 	.word	0x00004099

00004490 <send_err_rsp.part.10>:
	default:
		return att_pdu_sent;
	}
}

static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    4490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4492:	000f      	movs	r7, r1
    4494:	0014      	movs	r4, r2
	/* Ignore opcode 0x00 */
	if (!req) {
		return;
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    4496:	2101      	movs	r1, #1
    4498:	2204      	movs	r2, #4
	default:
		return att_pdu_sent;
	}
}

static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    449a:	0006      	movs	r6, r0
    449c:	9301      	str	r3, [sp, #4]
	/* Ignore opcode 0x00 */
	if (!req) {
		return;
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    449e:	f7ff ff9f 	bl	43e0 <bt_att_create_pdu>
    44a2:	1e05      	subs	r5, r0, #0
	if (!buf) {
    44a4:	d010      	beq.n	44c8 <send_err_rsp.part.10+0x38>
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
    44a6:	2104      	movs	r1, #4
    44a8:	3008      	adds	r0, #8
    44aa:	f00a f82b 	bl	e504 <net_buf_simple_add>
	rsp->request = req;
	rsp->handle = sys_cpu_to_le16(handle);
	rsp->error = err;
    44ae:	466b      	mov	r3, sp
    44b0:	791b      	ldrb	r3, [r3, #4]
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
	rsp->request = req;
	rsp->handle = sys_cpu_to_le16(handle);
    44b2:	7044      	strb	r4, [r0, #1]
    44b4:	0a24      	lsrs	r4, r4, #8
	rsp->error = err;
    44b6:	70c3      	strb	r3, [r0, #3]
	if (!buf) {
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
	rsp->request = req;
    44b8:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    44ba:	7084      	strb	r4, [r0, #2]
	rsp->error = err;

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    44bc:	4b03      	ldr	r3, [pc, #12]	; (44cc <send_err_rsp.part.10+0x3c>)
    44be:	002a      	movs	r2, r5
    44c0:	2104      	movs	r1, #4
    44c2:	0030      	movs	r0, r6
    44c4:	f7ff faa0 	bl	3a08 <bt_l2cap_send_cb>
}
    44c8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	00004099 	.word	0x00004099

000044d0 <bt_att_recv>:

	return ATT_UNKNOWN;
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    44d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
	const struct att_handler *handler;
	u8_t err;
	size_t i;

	if (buf->len < sizeof(*hdr)) {
    44d2:	898b      	ldrh	r3, [r1, #12]

	return ATT_UNKNOWN;
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    44d4:	0006      	movs	r6, r0
    44d6:	000f      	movs	r7, r1
	struct bt_att_hdr *hdr = (void *)buf->data;
	const struct att_handler *handler;
	u8_t err;
	size_t i;

	if (buf->len < sizeof(*hdr)) {
    44d8:	2b00      	cmp	r3, #0
    44da:	d051      	beq.n	4580 <bt_att_recv+0xb0>
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    44dc:	0038      	movs	r0, r7
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_att_hdr *hdr = (void *)buf->data;
    44de:	688b      	ldr	r3, [r1, #8]
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    44e0:	3008      	adds	r0, #8
    44e2:	2101      	movs	r1, #1
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_att_hdr *hdr = (void *)buf->data;
    44e4:	9301      	str	r3, [sp, #4]
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    44e6:	f00a f82e 	bl	e546 <net_buf_simple_pull>

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (hdr->code == handlers[i].op) {
    44ea:	9b01      	ldr	r3, [sp, #4]
    44ec:	4a25      	ldr	r2, [pc, #148]	; (4584 <bt_att_recv+0xb4>)
    44ee:	781c      	ldrb	r4, [r3, #0]

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    44f0:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    44f2:	00dd      	lsls	r5, r3, #3
    44f4:	5ca9      	ldrb	r1, [r5, r2]
    44f6:	42a1      	cmp	r1, r4
    44f8:	d107      	bne.n	450a <bt_att_recv+0x3a>
		}
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
    44fa:	4b22      	ldr	r3, [pc, #136]	; (4584 <bt_att_recv+0xb4>)
    44fc:	195b      	adds	r3, r3, r5
    44fe:	789c      	ldrb	r4, [r3, #2]
    4500:	2c01      	cmp	r4, #1
    4502:	d006      	beq.n	4512 <bt_att_recv+0x42>
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
			BT_WARN("Ignoring unexpected request");
			return;
		} else if (handler->type == ATT_INDICATION &&
    4504:	2c05      	cmp	r4, #5
    4506:	d10b      	bne.n	4520 <bt_att_recv+0x50>
    4508:	e011      	b.n	452e <bt_att_recv+0x5e>

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    450a:	3301      	adds	r3, #1
    450c:	2b1b      	cmp	r3, #27
    450e:	d1f0      	bne.n	44f2 <bt_att_recv+0x22>
    4510:	e02b      	b.n	456a <bt_att_recv+0x9a>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4512:	0030      	movs	r0, r6
    4514:	0021      	movs	r1, r4
    4516:	3090      	adds	r0, #144	; 0x90
    4518:	f00a fad0 	bl	eabc <atomic_or>
		}
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
    451c:	4220      	tst	r0, r4
    451e:	d12f      	bne.n	4580 <bt_att_recv+0xb0>
			BT_WARN("Ignoring unexpected indication");
			return;
		}
	}

	if (buf->len < handler->expect_len) {
    4520:	4b18      	ldr	r3, [pc, #96]	; (4584 <bt_att_recv+0xb4>)
    4522:	89ba      	ldrh	r2, [r7, #12]
    4524:	195d      	adds	r5, r3, r5
    4526:	786b      	ldrb	r3, [r5, #1]
    4528:	429a      	cmp	r2, r3
    452a:	d312      	bcc.n	4552 <bt_att_recv+0x82>
    452c:	e007      	b.n	453e <bt_att_recv+0x6e>
    452e:	0030      	movs	r0, r6
    4530:	2102      	movs	r1, #2
    4532:	3090      	adds	r0, #144	; 0x90
    4534:	f00a fac2 	bl	eabc <atomic_or>
	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
			BT_WARN("Ignoring unexpected request");
			return;
		} else if (handler->type == ATT_INDICATION &&
    4538:	0783      	lsls	r3, r0, #30
    453a:	d5f1      	bpl.n	4520 <bt_att_recv+0x50>
    453c:	e020      	b.n	4580 <bt_att_recv+0xb0>

	if (buf->len < handler->expect_len) {
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
		err = BT_ATT_ERR_INVALID_PDU;
	} else {
		err = handler->func(att, buf);
    453e:	686b      	ldr	r3, [r5, #4]
    4540:	0039      	movs	r1, r7
    4542:	0030      	movs	r0, r6
    4544:	4798      	blx	r3
    4546:	0003      	movs	r3, r0
	}

	if (handler->type == ATT_REQUEST && err) {
    4548:	2c01      	cmp	r4, #1
    454a:	d119      	bne.n	4580 <bt_att_recv+0xb0>
    454c:	2800      	cmp	r0, #0
    454e:	d017      	beq.n	4580 <bt_att_recv+0xb0>
    4550:	e002      	b.n	4558 <bt_att_recv+0x88>
    4552:	2c01      	cmp	r4, #1
    4554:	d114      	bne.n	4580 <bt_att_recv+0xb0>
		}
	}

	if (buf->len < handler->expect_len) {
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
		err = BT_ATT_ERR_INVALID_PDU;
    4556:	2304      	movs	r3, #4
		err = handler->func(att, buf);
	}

	if (handler->type == ATT_REQUEST && err) {
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
    4558:	9a01      	ldr	r2, [sp, #4]
    455a:	7811      	ldrb	r1, [r2, #0]
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    455c:	2900      	cmp	r1, #0
    455e:	d00f      	beq.n	4580 <bt_att_recv+0xb0>
    4560:	2200      	movs	r2, #0
    4562:	6830      	ldr	r0, [r6, #0]
    4564:	f7ff ff94 	bl	4490 <send_err_rsp.part.10>
    4568:	e00a      	b.n	4580 <bt_att_recv+0xb0>
		}
	}

	if (!handler) {
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    456a:	0020      	movs	r0, r4
    456c:	f7ff fb28 	bl	3bc0 <att_op_get_type>
    4570:	2800      	cmp	r0, #0
    4572:	d005      	beq.n	4580 <bt_att_recv+0xb0>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    4574:	2c00      	cmp	r4, #0
    4576:	d003      	beq.n	4580 <bt_att_recv+0xb0>
    4578:	2306      	movs	r3, #6
    457a:	2200      	movs	r2, #0
    457c:	0021      	movs	r1, r4
    457e:	e7f0      	b.n	4562 <bt_att_recv+0x92>

	if (handler->type == ATT_REQUEST && err) {
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}
    4580:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4582:	46c0      	nop			; (mov r8, r8)
    4584:	00010190 	.word	0x00010190

00004588 <att_read_group_req>:

	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
    4588:	b5f0      	push	{r4, r5, r6, r7, lr}
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    458a:	898b      	ldrh	r3, [r1, #12]

	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
    458c:	b08f      	sub	sp, #60	; 0x3c
    458e:	0007      	movs	r7, r0
    4590:	000e      	movs	r6, r1
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4592:	2b06      	cmp	r3, #6
    4594:	d002      	beq.n	459c <att_read_group_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    4596:	2504      	movs	r5, #4
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4598:	2b14      	cmp	r3, #20
    459a:	d179      	bne.n	4690 <att_read_group_req+0x108>

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    459c:	0030      	movs	r0, r6
	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    459e:	683b      	ldr	r3, [r7, #0]

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    45a0:	2104      	movs	r1, #4
	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    45a2:	9301      	str	r3, [sp, #4]
	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    45a4:	68b3      	ldr	r3, [r6, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    45a6:	3008      	adds	r0, #8
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    45a8:	785c      	ldrb	r4, [r3, #1]
    45aa:	781a      	ldrb	r2, [r3, #0]
    45ac:	0224      	lsls	r4, r4, #8
    45ae:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    45b0:	789a      	ldrb	r2, [r3, #2]
    45b2:	78db      	ldrb	r3, [r3, #3]
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
		return BT_ATT_ERR_UNLIKELY;
    45b4:	250e      	movs	r5, #14
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    45b6:	021b      	lsls	r3, r3, #8
    45b8:	4313      	orrs	r3, r2
    45ba:	9300      	str	r3, [sp, #0]
	net_buf_pull(buf, sizeof(*req));
    45bc:	f009 ffc3 	bl	e546 <net_buf_simple_pull>

	if (!uuid_create(&u.uuid, buf)) {
    45c0:	0031      	movs	r1, r6
    45c2:	a804      	add	r0, sp, #16
    45c4:	f7ff fd0a 	bl	3fdc <uuid_create>
    45c8:	2800      	cmp	r0, #0
    45ca:	d061      	beq.n	4690 <att_read_group_req+0x108>
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    45cc:	2c00      	cmp	r4, #0
    45ce:	d007      	beq.n	45e0 <att_read_group_req+0x58>
    45d0:	2500      	movs	r5, #0
    45d2:	9b00      	ldr	r3, [sp, #0]
    45d4:	42ab      	cmp	r3, r5
    45d6:	d002      	beq.n	45de <att_read_group_req+0x56>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    45d8:	429c      	cmp	r4, r3
    45da:	d801      	bhi.n	45e0 <att_read_group_req+0x58>
    45dc:	e008      	b.n	45f0 <att_read_group_req+0x68>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    45de:	9c00      	ldr	r4, [sp, #0]
    45e0:	2301      	movs	r3, #1
    45e2:	0022      	movs	r2, r4
    45e4:	2110      	movs	r1, #16
    45e6:	9801      	ldr	r0, [sp, #4]
    45e8:	f7ff ff52 	bl	4490 <send_err_rsp.part.10>
	       start_handle, end_handle, bt_uuid_str(&u.uuid));

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    45ec:	2500      	movs	r5, #0
    45ee:	e04f      	b.n	4690 <att_read_group_req+0x108>
	 * Read By Group Type Request. The "Primary Service" and "Secondary
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    45f0:	ab02      	add	r3, sp, #8
    45f2:	701d      	strb	r5, [r3, #0]
    45f4:	23a0      	movs	r3, #160	; 0xa0
    45f6:	aa02      	add	r2, sp, #8
    45f8:	019b      	lsls	r3, r3, #6
    45fa:	0011      	movs	r1, r2
    45fc:	a804      	add	r0, sp, #16
    45fe:	8053      	strh	r3, [r2, #2]
    4600:	f7fd fa18 	bl	1a34 <bt_uuid_cmp>
    4604:	2800      	cmp	r0, #0
    4606:	d00d      	beq.n	4624 <att_read_group_req+0x9c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    4608:	4b23      	ldr	r3, [pc, #140]	; (4698 <att_read_group_req+0x110>)
    460a:	a903      	add	r1, sp, #12
    460c:	a804      	add	r0, sp, #16
    460e:	700d      	strb	r5, [r1, #0]
    4610:	804b      	strh	r3, [r1, #2]
    4612:	f7fd fa0f 	bl	1a34 <bt_uuid_cmp>
	 * Read By Group Type Request. The "Primary Service" and "Secondary
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    4616:	2800      	cmp	r0, #0
    4618:	d004      	beq.n	4624 <att_read_group_req+0x9c>
    461a:	2310      	movs	r3, #16
    461c:	0022      	movs	r2, r4
    461e:	0019      	movs	r1, r3
    4620:	9801      	ldr	r0, [sp, #4]
    4622:	e02b      	b.n	467c <att_read_group_req+0xf4>
}

static u8_t att_read_group_rsp(struct bt_att *att, struct bt_uuid *uuid,
			       u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    4624:	683e      	ldr	r6, [r7, #0]
	struct read_group_data data;

	memset(&data, 0, sizeof(data));
    4626:	2214      	movs	r2, #20
    4628:	2100      	movs	r1, #0
    462a:	a809      	add	r0, sp, #36	; 0x24
    462c:	f7fc fb5d 	bl	cea <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    4630:	2201      	movs	r2, #1
    4632:	2111      	movs	r1, #17
    4634:	0030      	movs	r0, r6
    4636:	f7ff fed3 	bl	43e0 <bt_att_create_pdu>
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    463a:	250e      	movs	r5, #14
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_group_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    463c:	900b      	str	r0, [sp, #44]	; 0x2c
				     sizeof(*data.rsp));
	if (!data.buf) {
    463e:	2800      	cmp	r0, #0
    4640:	d026      	beq.n	4690 <att_read_group_req+0x108>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
    4642:	ab04      	add	r3, sp, #16
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4644:	2101      	movs	r1, #1
    4646:	3008      	adds	r0, #8
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    4648:	9709      	str	r7, [sp, #36]	; 0x24
	data.uuid = uuid;
    464a:	930a      	str	r3, [sp, #40]	; 0x28
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
    464c:	2700      	movs	r7, #0
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    464e:	f009 ff59 	bl	e504 <net_buf_simple_add>
	data.rsp->len = 0;
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4652:	ab09      	add	r3, sp, #36	; 0x24
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4654:	900c      	str	r0, [sp, #48]	; 0x30
	data.rsp->len = 0;
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4656:	4a11      	ldr	r2, [pc, #68]	; (469c <att_read_group_req+0x114>)
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
    4658:	7007      	strb	r7, [r0, #0]
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    465a:	9900      	ldr	r1, [sp, #0]
    465c:	0020      	movs	r0, r4

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
	data.group = NULL;
    465e:	970d      	str	r7, [sp, #52]	; 0x34

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    4660:	f000 fd7c 	bl	515c <bt_gatt_foreach_attr>

	if (!data.rsp->len) {
    4664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4666:	781d      	ldrb	r5, [r3, #0]
    4668:	9300      	str	r3, [sp, #0]
    466a:	42bd      	cmp	r5, r7
    466c:	d109      	bne.n	4682 <att_read_group_req+0xfa>
		net_buf_unref(data.buf);
    466e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4670:	f009 ff26 	bl	e4c0 <net_buf_unref>
    4674:	230a      	movs	r3, #10
    4676:	0022      	movs	r2, r4
    4678:	2110      	movs	r1, #16
    467a:	0030      	movs	r0, r6
    467c:	f7ff ff08 	bl	4490 <send_err_rsp.part.10>
    4680:	e006      	b.n	4690 <att_read_group_req+0x108>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4682:	4b07      	ldr	r3, [pc, #28]	; (46a0 <att_read_group_req+0x118>)
    4684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4686:	2104      	movs	r1, #4
    4688:	0030      	movs	r0, r6
    468a:	f7ff f9bd 	bl	3a08 <bt_l2cap_send_cb>

	return 0;
    468e:	003d      	movs	r5, r7
			     BT_ATT_ERR_UNSUPPORTED_GROUP_TYPE);
		return 0;
	}

	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
}
    4690:	0028      	movs	r0, r5
    4692:	b00f      	add	sp, #60	; 0x3c
    4694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	00002801 	.word	0x00002801
    469c:	00003c59 	.word	0x00003c59
    46a0:	00004099 	.word	0x00004099

000046a4 <att_read_mult_req>:
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    46a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46a6:	b087      	sub	sp, #28
	struct bt_conn *conn = att->chan.chan.conn;
    46a8:	6805      	ldr	r5, [r0, #0]
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));
    46aa:	ac01      	add	r4, sp, #4
    46ac:	2214      	movs	r2, #20
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    46ae:	0006      	movs	r6, r0
    46b0:	000f      	movs	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));
    46b2:	0020      	movs	r0, r4
    46b4:	2100      	movs	r1, #0
    46b6:	f7fc fb18 	bl	cea <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    46ba:	2200      	movs	r2, #0
    46bc:	210f      	movs	r1, #15
    46be:	0028      	movs	r0, r5
    46c0:	f7ff fe8e 	bl	43e0 <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    46c4:	230e      	movs	r3, #14
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    46c6:	60a0      	str	r0, [r4, #8]
	if (!data.buf) {
    46c8:	2800      	cmp	r0, #0
    46ca:	d023      	beq.n	4714 <att_read_mult_req+0x70>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    46cc:	9601      	str	r6, [sp, #4]

	while (buf->len >= sizeof(u16_t)) {
    46ce:	89bb      	ldrh	r3, [r7, #12]
    46d0:	2b01      	cmp	r3, #1
    46d2:	d918      	bls.n	4706 <att_read_mult_req+0x62>
		handle = net_buf_pull_le16(buf);
    46d4:	0038      	movs	r0, r7
    46d6:	3008      	adds	r0, #8
    46d8:	f009 ff45 	bl	e566 <net_buf_simple_pull_le16>
		 * permitted on any of the Characteristic Values.
		 *
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    46dc:	2301      	movs	r3, #1

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    46de:	4a0f      	ldr	r2, [pc, #60]	; (471c <att_read_mult_req+0x78>)
		 * permitted on any of the Characteristic Values.
		 *
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    46e0:	7423      	strb	r3, [r4, #16]

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    46e2:	0001      	movs	r1, r0
    46e4:	0023      	movs	r3, r4
	}

	data.att = att;

	while (buf->len >= sizeof(u16_t)) {
		handle = net_buf_pull_le16(buf);
    46e6:	0006      	movs	r6, r0
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    46e8:	f000 fd38 	bl	515c <bt_gatt_foreach_attr>

		/* Stop reading in case of error */
		if (data.err) {
    46ec:	7c23      	ldrb	r3, [r4, #16]
    46ee:	2b00      	cmp	r3, #0
    46f0:	d0ed      	beq.n	46ce <att_read_mult_req+0x2a>
			net_buf_unref(data.buf);
    46f2:	68a0      	ldr	r0, [r4, #8]
    46f4:	f009 fee4 	bl	e4c0 <net_buf_unref>
    46f8:	7c23      	ldrb	r3, [r4, #16]
    46fa:	0032      	movs	r2, r6
    46fc:	210e      	movs	r1, #14
    46fe:	0028      	movs	r0, r5
    4700:	f7ff fec6 	bl	4490 <send_err_rsp.part.10>
    4704:	e005      	b.n	4712 <att_read_mult_req+0x6e>
				     data.err);
			return 0;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4706:	4b06      	ldr	r3, [pc, #24]	; (4720 <att_read_mult_req+0x7c>)
    4708:	68a2      	ldr	r2, [r4, #8]
    470a:	2104      	movs	r1, #4
    470c:	0028      	movs	r0, r5
    470e:	f7ff f97b 	bl	3a08 <bt_l2cap_send_cb>

	return 0;
    4712:	2300      	movs	r3, #0
}
    4714:	0018      	movs	r0, r3
    4716:	b007      	add	sp, #28
    4718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    471a:	46c0      	nop			; (mov r8, r8)
    471c:	0000436f 	.word	0x0000436f
    4720:	00004099 	.word	0x00004099

00004724 <att_read_rsp>:
	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_read_rsp(struct bt_att *att, u8_t op, u8_t rsp, u16_t handle,
			 u16_t offset)
{
    4724:	b5f0      	push	{r4, r5, r6, r7, lr}
    4726:	b08b      	sub	sp, #44	; 0x2c
    4728:	001e      	movs	r6, r3
    472a:	ab10      	add	r3, sp, #64	; 0x40
    472c:	881b      	ldrh	r3, [r3, #0]
    472e:	9000      	str	r0, [sp, #0]
    4730:	9101      	str	r1, [sp, #4]
    4732:	9202      	str	r2, [sp, #8]
    4734:	9303      	str	r3, [sp, #12]
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    4736:	2501      	movs	r5, #1
			 u16_t offset)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;

	if (!handle) {
    4738:	2e00      	cmp	r6, #0
    473a:	d033      	beq.n	47a4 <att_read_rsp+0x80>
}

static u8_t att_read_rsp(struct bt_att *att, u8_t op, u8_t rsp, u16_t handle,
			 u16_t offset)
{
	struct bt_conn *conn = att->chan.chan.conn;
    473c:	6807      	ldr	r7, [r0, #0]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    473e:	ac05      	add	r4, sp, #20
    4740:	2214      	movs	r2, #20
    4742:	2100      	movs	r1, #0
    4744:	0020      	movs	r0, r4
    4746:	f7fc fad0 	bl	cea <memset>

	data.buf = bt_att_create_pdu(conn, rsp, 0);
    474a:	2200      	movs	r2, #0
    474c:	9902      	ldr	r1, [sp, #8]
    474e:	0038      	movs	r0, r7
    4750:	f7ff fe46 	bl	43e0 <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    4754:	350d      	adds	r5, #13
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, rsp, 0);
    4756:	60a0      	str	r0, [r4, #8]
	if (!data.buf) {
    4758:	2800      	cmp	r0, #0
    475a:	d023      	beq.n	47a4 <att_read_rsp+0x80>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    475c:	9b00      	ldr	r3, [sp, #0]
	data.offset = offset;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    475e:	4a13      	ldr	r2, [pc, #76]	; (47ac <att_read_rsp+0x88>)
	data.buf = bt_att_create_pdu(conn, rsp, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    4760:	9305      	str	r3, [sp, #20]
	data.offset = offset;
    4762:	466b      	mov	r3, sp
    4764:	899b      	ldrh	r3, [r3, #12]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4766:	0031      	movs	r1, r6
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.offset = offset;
    4768:	80a3      	strh	r3, [r4, #4]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    476a:	2301      	movs	r3, #1

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    476c:	0030      	movs	r0, r6

	data.att = att;
	data.offset = offset;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    476e:	7423      	strb	r3, [r4, #16]

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    4770:	0023      	movs	r3, r4
    4772:	f000 fcf3 	bl	515c <bt_gatt_foreach_attr>

	/* In case of error discard data and respond with an error */
	if (data.err) {
    4776:	7c25      	ldrb	r5, [r4, #16]
    4778:	2d00      	cmp	r5, #0
    477a:	d00d      	beq.n	4798 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
		/* Respond here since handle is set */
		send_err_rsp(conn, op, handle, data.err);
		return 0;
    477c:	2500      	movs	r5, #0

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);

	/* In case of error discard data and respond with an error */
	if (data.err) {
		net_buf_unref(data.buf);
    477e:	68a0      	ldr	r0, [r4, #8]
    4780:	f009 fe9e 	bl	e4c0 <net_buf_unref>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    4784:	9b01      	ldr	r3, [sp, #4]
    4786:	42ab      	cmp	r3, r5
    4788:	d00c      	beq.n	47a4 <att_read_rsp+0x80>
    478a:	7c23      	ldrb	r3, [r4, #16]
    478c:	0032      	movs	r2, r6
    478e:	9901      	ldr	r1, [sp, #4]
    4790:	0038      	movs	r0, r7
    4792:	f7ff fe7d 	bl	4490 <send_err_rsp.part.10>
    4796:	e005      	b.n	47a4 <att_read_rsp+0x80>
		/* Respond here since handle is set */
		send_err_rsp(conn, op, handle, data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4798:	4b05      	ldr	r3, [pc, #20]	; (47b0 <att_read_rsp+0x8c>)
    479a:	68a2      	ldr	r2, [r4, #8]
    479c:	2104      	movs	r1, #4
    479e:	0038      	movs	r0, r7
    47a0:	f7ff f932 	bl	3a08 <bt_l2cap_send_cb>

	return 0;
}
    47a4:	0028      	movs	r0, r5
    47a6:	b00b      	add	sp, #44	; 0x2c
    47a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47aa:	46c0      	nop			; (mov r8, r8)
    47ac:	0000436f 	.word	0x0000436f
    47b0:	00004099 	.word	0x00004099

000047b4 <att_read_blob_req>:
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
			    handle, 0);
}

static u8_t att_read_blob_req(struct bt_att *att, struct net_buf *buf)
{
    47b4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_read_blob_req *req;
	u16_t handle, offset;

	req = (void *)buf->data;
    47b6:	688a      	ldr	r2, [r1, #8]

	handle = sys_le16_to_cpu(req->handle);
    47b8:	7853      	ldrb	r3, [r2, #1]
    47ba:	7811      	ldrb	r1, [r2, #0]
    47bc:	021b      	lsls	r3, r3, #8
	offset = sys_le16_to_cpu(req->offset);

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    47be:	430b      	orrs	r3, r1
	u16_t handle, offset;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
    47c0:	7891      	ldrb	r1, [r2, #2]
    47c2:	78d2      	ldrb	r2, [r2, #3]
    47c4:	0212      	lsls	r2, r2, #8

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    47c6:	430a      	orrs	r2, r1
    47c8:	9200      	str	r2, [sp, #0]
    47ca:	210c      	movs	r1, #12
    47cc:	220d      	movs	r2, #13
    47ce:	f7ff ffa9 	bl	4724 <att_read_rsp>
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}
    47d2:	bd0e      	pop	{r1, r2, r3, pc}

000047d4 <att_read_req>:

	return 0;
}

static u8_t att_read_req(struct bt_att *att, struct net_buf *buf)
{
    47d4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_read_req *req;
	u16_t handle;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    47d6:	688b      	ldr	r3, [r1, #8]

	BT_DBG("handle 0x%04x", handle);

	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    47d8:	210a      	movs	r1, #10
	struct bt_att_read_req *req;
	u16_t handle;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    47da:	781a      	ldrb	r2, [r3, #0]
    47dc:	785b      	ldrb	r3, [r3, #1]
    47de:	021b      	lsls	r3, r3, #8

	BT_DBG("handle 0x%04x", handle);

	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    47e0:	4313      	orrs	r3, r2
    47e2:	2200      	movs	r2, #0
    47e4:	9200      	str	r2, [sp, #0]
    47e6:	320b      	adds	r2, #11
    47e8:	f7ff ff9c 	bl	4724 <att_read_rsp>
			    handle, 0);
}
    47ec:	bd0e      	pop	{r1, r2, r3, pc}
	...

000047f0 <att_read_type_req>:

	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
    47f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47f2:	b08f      	sub	sp, #60	; 0x3c
    47f4:	9001      	str	r0, [sp, #4]
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    47f6:	898b      	ldrh	r3, [r1, #12]

	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
    47f8:	000e      	movs	r6, r1
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    47fa:	2b06      	cmp	r3, #6
    47fc:	d002      	beq.n	4804 <att_read_type_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    47fe:	2504      	movs	r5, #4
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    4800:	2b14      	cmp	r3, #20
    4802:	d159      	bne.n	48b8 <att_read_type_req+0xc8>

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    4804:	0030      	movs	r0, r6
	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    4806:	9b01      	ldr	r3, [sp, #4]

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    4808:	2104      	movs	r1, #4
	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    480a:	681f      	ldr	r7, [r3, #0]
	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    480c:	68b3      	ldr	r3, [r6, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    480e:	3008      	adds	r0, #8
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    4810:	785c      	ldrb	r4, [r3, #1]
    4812:	781a      	ldrb	r2, [r3, #0]
    4814:	0224      	lsls	r4, r4, #8
    4816:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    4818:	789a      	ldrb	r2, [r3, #2]
    481a:	78db      	ldrb	r3, [r3, #3]
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
		return BT_ATT_ERR_UNLIKELY;
    481c:	250e      	movs	r5, #14
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    481e:	021b      	lsls	r3, r3, #8
    4820:	4313      	orrs	r3, r2
    4822:	9300      	str	r3, [sp, #0]
	net_buf_pull(buf, sizeof(*req));
    4824:	f009 fe8f 	bl	e546 <net_buf_simple_pull>

	if (!uuid_create(&u.uuid, buf)) {
    4828:	0031      	movs	r1, r6
    482a:	a803      	add	r0, sp, #12
    482c:	f7ff fbd6 	bl	3fdc <uuid_create>
    4830:	2800      	cmp	r0, #0
    4832:	d041      	beq.n	48b8 <att_read_type_req+0xc8>
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    4834:	2c00      	cmp	r4, #0
    4836:	d006      	beq.n	4846 <att_read_type_req+0x56>
    4838:	9b00      	ldr	r3, [sp, #0]
    483a:	2b00      	cmp	r3, #0
    483c:	d002      	beq.n	4844 <att_read_type_req+0x54>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    483e:	429c      	cmp	r4, r3
    4840:	d801      	bhi.n	4846 <att_read_type_req+0x56>
    4842:	e008      	b.n	4856 <att_read_type_req+0x66>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    4844:	9c00      	ldr	r4, [sp, #0]
    4846:	2301      	movs	r3, #1
    4848:	0022      	movs	r2, r4
    484a:	2108      	movs	r1, #8
    484c:	0038      	movs	r0, r7
    484e:	f7ff fe1f 	bl	4490 <send_err_rsp.part.10>
	       start_handle, end_handle, bt_uuid_str(&u.uuid));

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    4852:	2500      	movs	r5, #0
    4854:	e030      	b.n	48b8 <att_read_type_req+0xc8>
}

static u8_t att_read_type_rsp(struct bt_att *att, struct bt_uuid *uuid,
			      u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    4856:	9b01      	ldr	r3, [sp, #4]
	struct read_type_data data;

	memset(&data, 0, sizeof(data));
    4858:	ae08      	add	r6, sp, #32
}

static u8_t att_read_type_rsp(struct bt_att *att, struct bt_uuid *uuid,
			      u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    485a:	681f      	ldr	r7, [r3, #0]
	struct read_type_data data;

	memset(&data, 0, sizeof(data));
    485c:	2218      	movs	r2, #24
    485e:	2100      	movs	r1, #0
    4860:	0030      	movs	r0, r6
    4862:	f7fc fa42 	bl	cea <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    4866:	2201      	movs	r2, #1
    4868:	2109      	movs	r1, #9
    486a:	0038      	movs	r0, r7
    486c:	f7ff fdb8 	bl	43e0 <bt_att_create_pdu>
    4870:	60b0      	str	r0, [r6, #8]
				     sizeof(*data.rsp));
	if (!data.buf) {
    4872:	2800      	cmp	r0, #0
    4874:	d020      	beq.n	48b8 <att_read_type_req+0xc8>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    4876:	9b01      	ldr	r3, [sp, #4]
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4878:	2101      	movs	r1, #1
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    487a:	9308      	str	r3, [sp, #32]
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    487c:	3008      	adds	r0, #8
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
    487e:	ab03      	add	r3, sp, #12
    4880:	6073      	str	r3, [r6, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4882:	f009 fe3f 	bl	e504 <net_buf_simple_add>
	data.rsp->len = 0;
    4886:	2300      	movs	r3, #0
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    4888:	60f0      	str	r0, [r6, #12]
	data.rsp->len = 0;
    488a:	7003      	strb	r3, [r0, #0]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    488c:	230a      	movs	r3, #10

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    488e:	4a0c      	ldr	r2, [pc, #48]	; (48c0 <att_read_type_req+0xd0>)
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4890:	7533      	strb	r3, [r6, #20]

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    4892:	9900      	ldr	r1, [sp, #0]
    4894:	0033      	movs	r3, r6
    4896:	0020      	movs	r0, r4
    4898:	f000 fc60 	bl	515c <bt_gatt_foreach_attr>

	if (data.err) {
    489c:	7d35      	ldrb	r5, [r6, #20]
    489e:	2d00      	cmp	r5, #0
    48a0:	d004      	beq.n	48ac <att_read_type_req+0xbc>
		net_buf_unref(data.buf);
    48a2:	68b0      	ldr	r0, [r6, #8]
    48a4:	f009 fe0c 	bl	e4c0 <net_buf_unref>
    48a8:	7d33      	ldrb	r3, [r6, #20]
    48aa:	e7cd      	b.n	4848 <att_read_type_req+0x58>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
			     data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    48ac:	4b05      	ldr	r3, [pc, #20]	; (48c4 <att_read_type_req+0xd4>)
    48ae:	68b2      	ldr	r2, [r6, #8]
    48b0:	2104      	movs	r1, #4
    48b2:	0038      	movs	r0, r7
    48b4:	f7ff f8a8 	bl	3a08 <bt_l2cap_send_cb>
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
	}

	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
}
    48b8:	0028      	movs	r0, r5
    48ba:	b00f      	add	sp, #60	; 0x3c
    48bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48be:	46c0      	nop			; (mov r8, r8)
    48c0:	00003f17 	.word	0x00003f17
    48c4:	00004099 	.word	0x00004099

000048c8 <att_find_type_req>:

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    48c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ca:	000d      	movs	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    48cc:	6803      	ldr	r3, [r0, #0]

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    48ce:	0007      	movs	r7, r0
	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
	value = net_buf_pull(buf, sizeof(*req));
    48d0:	0028      	movs	r0, r5

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    48d2:	b08b      	sub	sp, #44	; 0x2c
	struct bt_conn *conn = att->chan.chan.conn;
    48d4:	9301      	str	r3, [sp, #4]
	struct bt_att_find_type_req *req;
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;
    48d6:	688b      	ldr	r3, [r1, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
	value = net_buf_pull(buf, sizeof(*req));
    48d8:	3008      	adds	r0, #8
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    48da:	785c      	ldrb	r4, [r3, #1]
    48dc:	781a      	ldrb	r2, [r3, #0]
    48de:	0224      	lsls	r4, r4, #8
    48e0:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    48e2:	78da      	ldrb	r2, [r3, #3]
    48e4:	7899      	ldrb	r1, [r3, #2]
    48e6:	0212      	lsls	r2, r2, #8
    48e8:	430a      	orrs	r2, r1
    48ea:	9200      	str	r2, [sp, #0]
	type = sys_le16_to_cpu(req->type);
    48ec:	795e      	ldrb	r6, [r3, #5]
    48ee:	791a      	ldrb	r2, [r3, #4]
    48f0:	0236      	lsls	r6, r6, #8
	value = net_buf_pull(buf, sizeof(*req));
    48f2:	2106      	movs	r1, #6

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
    48f4:	4316      	orrs	r6, r2
	value = net_buf_pull(buf, sizeof(*req));
    48f6:	f009 fe26 	bl	e546 <net_buf_simple_pull>
    48fa:	9002      	str	r0, [sp, #8]
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    48fc:	2c00      	cmp	r4, #0
    48fe:	d006      	beq.n	490e <att_find_type_req+0x46>
    4900:	9b00      	ldr	r3, [sp, #0]
    4902:	2b00      	cmp	r3, #0
    4904:	d002      	beq.n	490c <att_find_type_req+0x44>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    4906:	429c      	cmp	r4, r3
    4908:	d801      	bhi.n	490e <att_find_type_req+0x46>
    490a:	e008      	b.n	491e <att_find_type_req+0x56>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    490c:	9c00      	ldr	r4, [sp, #0]
    490e:	2301      	movs	r3, #1
    4910:	0022      	movs	r2, r4
    4912:	2106      	movs	r1, #6
    4914:	9801      	ldr	r0, [sp, #4]
    4916:	f7ff fdbb 	bl	4490 <send_err_rsp.part.10>
	 * UUID for the specific primary service.
	 */
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
    491a:	2600      	movs	r6, #0
    491c:	e036      	b.n	498c <att_find_type_req+0xc4>
	/* The Attribute Protocol Find By Type Value Request shall be used with
	 * the Attribute Type parameter set to the UUID for "Primary Service"
	 * and the Attribute Value set to the 16-bit Bluetooth UUID or 128-bit
	 * UUID for the specific primary service.
	 */
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    491e:	23a0      	movs	r3, #160	; 0xa0
    4920:	019b      	lsls	r3, r3, #6
    4922:	429e      	cmp	r6, r3
    4924:	d001      	beq.n	492a <att_find_type_req+0x62>
    4926:	230a      	movs	r3, #10
    4928:	e7f2      	b.n	4910 <att_find_type_req+0x48>
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
    492a:	89ab      	ldrh	r3, [r5, #12]
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    492c:	ad05      	add	r5, sp, #20
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
    492e:	9303      	str	r3, [sp, #12]

static u8_t att_find_type_rsp(struct bt_att *att, u16_t start_handle,
			      u16_t end_handle, const void *value,
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    4930:	683b      	ldr	r3, [r7, #0]
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    4932:	2214      	movs	r2, #20
    4934:	2100      	movs	r1, #0
    4936:	0028      	movs	r0, r5

static u8_t att_find_type_rsp(struct bt_att *att, u16_t start_handle,
			      u16_t end_handle, const void *value,
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    4938:	9301      	str	r3, [sp, #4]
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    493a:	f7fc f9d6 	bl	cea <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    493e:	2200      	movs	r2, #0
    4940:	2107      	movs	r1, #7
    4942:	9801      	ldr	r0, [sp, #4]
    4944:	f7ff fd4c 	bl	43e0 <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    4948:	260e      	movs	r6, #14
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_type_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    494a:	6068      	str	r0, [r5, #4]
	if (!data.buf) {
    494c:	2800      	cmp	r0, #0
    494e:	d01d      	beq.n	498c <att_find_type_req+0xc4>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
	data.value = value;
    4950:	9b02      	ldr	r3, [sp, #8]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    4952:	9705      	str	r7, [sp, #20]
	data.group = NULL;
	data.value = value;
    4954:	60eb      	str	r3, [r5, #12]
	data.value_len = value_len;
    4956:	466b      	mov	r3, sp
    4958:	7b1b      	ldrb	r3, [r3, #12]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
    495a:	2700      	movs	r7, #0
	data.value = value;
	data.value_len = value_len;
    495c:	742b      	strb	r3, [r5, #16]

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    495e:	230a      	movs	r3, #10

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4960:	4a0c      	ldr	r2, [pc, #48]	; (4994 <att_find_type_req+0xcc>)
	data.group = NULL;
	data.value = value;
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    4962:	746b      	strb	r3, [r5, #17]

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    4964:	9900      	ldr	r1, [sp, #0]
    4966:	002b      	movs	r3, r5
    4968:	0020      	movs	r0, r4
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
    496a:	60af      	str	r7, [r5, #8]
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    496c:	f000 fbf6 	bl	515c <bt_gatt_foreach_attr>

	/* If error has not been cleared, no service has been found */
	if (data.err) {
    4970:	7c6e      	ldrb	r6, [r5, #17]
    4972:	42be      	cmp	r6, r7
    4974:	d004      	beq.n	4980 <att_find_type_req+0xb8>
		net_buf_unref(data.buf);
    4976:	6868      	ldr	r0, [r5, #4]
    4978:	f009 fda2 	bl	e4c0 <net_buf_unref>
    497c:	7c6b      	ldrb	r3, [r5, #17]
    497e:	e7c7      	b.n	4910 <att_find_type_req+0x48>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
			     data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4980:	4b05      	ldr	r3, [pc, #20]	; (4998 <att_find_type_req+0xd0>)
    4982:	686a      	ldr	r2, [r5, #4]
    4984:	2104      	movs	r1, #4
    4986:	9801      	ldr	r0, [sp, #4]
    4988:	f7ff f83e 	bl	3a08 <bt_l2cap_send_cb>
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}
    498c:	0030      	movs	r0, r6
    498e:	b00b      	add	sp, #44	; 0x2c
    4990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4992:	46c0      	nop			; (mov r8, r8)
    4994:	00003df5 	.word	0x00003df5
    4998:	00004099 	.word	0x00004099

0000499c <att_find_info_req>:

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    499c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;
    499e:	688b      	ldr	r3, [r1, #8]

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    49a0:	b085      	sub	sp, #20
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    49a2:	785c      	ldrb	r4, [r3, #1]
    49a4:	781a      	ldrb	r2, [r3, #0]
    49a6:	0224      	lsls	r4, r4, #8

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    49a8:	0007      	movs	r7, r0
	struct bt_conn *conn = att->chan.chan.conn;
    49aa:	6806      	ldr	r6, [r0, #0]
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    49ac:	4314      	orrs	r4, r2
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    49ae:	d008      	beq.n	49c2 <att_find_info_req+0x26>
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    49b0:	78dd      	ldrb	r5, [r3, #3]
    49b2:	789a      	ldrb	r2, [r3, #2]
    49b4:	022d      	lsls	r5, r5, #8
    49b6:	4315      	orrs	r5, r2
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    49b8:	d002      	beq.n	49c0 <att_find_info_req+0x24>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    49ba:	42ac      	cmp	r4, r5
    49bc:	d801      	bhi.n	49c2 <att_find_info_req+0x26>
    49be:	e008      	b.n	49d2 <att_find_info_req+0x36>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    49c0:	002c      	movs	r4, r5
    49c2:	2301      	movs	r3, #1
    49c4:	0022      	movs	r2, r4
    49c6:	2104      	movs	r1, #4
    49c8:	0030      	movs	r0, r6
    49ca:	f7ff fd61 	bl	4490 <send_err_rsp.part.10>
	       end_handle);

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    49ce:	2000      	movs	r0, #0
    49d0:	e024      	b.n	4a1c <att_find_info_req+0x80>
			      u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_info_data data;

	memset(&data, 0, sizeof(data));
    49d2:	2210      	movs	r2, #16
    49d4:	2100      	movs	r1, #0
    49d6:	4668      	mov	r0, sp
    49d8:	f7fc f987 	bl	cea <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    49dc:	2200      	movs	r2, #0
    49de:	2105      	movs	r1, #5
    49e0:	0030      	movs	r0, r6
    49e2:	f7ff fcfd 	bl	43e0 <bt_att_create_pdu>
    49e6:	0003      	movs	r3, r0
    49e8:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    49ea:	200e      	movs	r0, #14
	struct find_info_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
	if (!data.buf) {
    49ec:	2b00      	cmp	r3, #0
    49ee:	d015      	beq.n	4a1c <att_find_info_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    49f0:	0029      	movs	r1, r5
    49f2:	466b      	mov	r3, sp
    49f4:	4a0a      	ldr	r2, [pc, #40]	; (4a20 <att_find_info_req+0x84>)
    49f6:	0020      	movs	r0, r4
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    49f8:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    49fa:	f000 fbaf 	bl	515c <bt_gatt_foreach_attr>

	if (!data.rsp) {
    49fe:	9d02      	ldr	r5, [sp, #8]
    4a00:	2d00      	cmp	r5, #0
    4a02:	d104      	bne.n	4a0e <att_find_info_req+0x72>
		net_buf_unref(data.buf);
    4a04:	9801      	ldr	r0, [sp, #4]
    4a06:	f009 fd5b 	bl	e4c0 <net_buf_unref>
    4a0a:	230a      	movs	r3, #10
    4a0c:	e7da      	b.n	49c4 <att_find_info_req+0x28>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    4a0e:	4b05      	ldr	r3, [pc, #20]	; (4a24 <att_find_info_req+0x88>)
    4a10:	9a01      	ldr	r2, [sp, #4]
    4a12:	2104      	movs	r1, #4
    4a14:	0030      	movs	r0, r6
    4a16:	f7fe fff7 	bl	3a08 <bt_l2cap_send_cb>
    4a1a:	e7d8      	b.n	49ce <att_find_info_req+0x32>
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
	}

	return att_find_info_rsp(att, start_handle, end_handle);
}
    4a1c:	b005      	add	sp, #20
    4a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a20:	00003d45 	.word	0x00003d45
    4a24:	00004099 	.word	0x00004099

00004a28 <att_write_rsp.part.11.constprop.14>:
	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    4a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a2a:	b08b      	sub	sp, #44	; 0x2c
    4a2c:	9301      	str	r3, [sp, #4]
    4a2e:	ab10      	add	r3, sp, #64	; 0x40
    4a30:	0017      	movs	r7, r2
    4a32:	cb04      	ldmia	r3!, {r2}
    4a34:	0005      	movs	r5, r0
    4a36:	781b      	ldrb	r3, [r3, #0]
    4a38:	000e      	movs	r6, r1
    4a3a:	9202      	str	r2, [sp, #8]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    4a3c:	2100      	movs	r1, #0
    4a3e:	2218      	movs	r2, #24
    4a40:	a804      	add	r0, sp, #16
	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    4a42:	9303      	str	r3, [sp, #12]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    4a44:	f7fc f951 	bl	cea <memset>

	/* Only allocate buf if required to respond */
	if (rsp) {
    4a48:	2f00      	cmp	r7, #0
    4a4a:	d119      	bne.n	4a80 <att_write_rsp.part.11.constprop.14+0x58>
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
	data.op = op;
    4a4c:	ab04      	add	r3, sp, #16
    4a4e:	721e      	strb	r6, [r3, #8]
	data.offset = offset;
    4a50:	2300      	movs	r3, #0
    4a52:	aa04      	add	r2, sp, #16
    4a54:	8253      	strh	r3, [r2, #18]
	data.value = value;
    4a56:	9b02      	ldr	r3, [sp, #8]
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    4a58:	9901      	ldr	r1, [sp, #4]
	}

	data.conn = conn;
	data.op = op;
	data.offset = offset;
	data.value = value;
    4a5a:	9307      	str	r3, [sp, #28]
	data.len = len;
    4a5c:	0013      	movs	r3, r2
    4a5e:	466a      	mov	r2, sp
    4a60:	7b12      	ldrb	r2, [r2, #12]
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    4a62:	0008      	movs	r0, r1

	data.conn = conn;
	data.op = op;
	data.offset = offset;
	data.value = value;
	data.len = len;
    4a64:	741a      	strb	r2, [r3, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    4a66:	2301      	movs	r3, #1
    4a68:	aa04      	add	r2, sp, #16
    4a6a:	7513      	strb	r3, [r2, #20]

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    4a6c:	0013      	movs	r3, r2
    4a6e:	4a19      	ldr	r2, [pc, #100]	; (4ad4 <att_write_rsp.part.11.constprop.14+0xac>)
		if (!data.buf) {
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
    4a70:	9504      	str	r5, [sp, #16]
	data.offset = offset;
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    4a72:	f000 fb73 	bl	515c <bt_gatt_foreach_attr>

	if (data.err) {
    4a76:	ab04      	add	r3, sp, #16
    4a78:	7d1c      	ldrb	r4, [r3, #20]
    4a7a:	2c00      	cmp	r4, #0
    4a7c:	d10a      	bne.n	4a94 <att_write_rsp.part.11.constprop.14+0x6c>
    4a7e:	e01e      	b.n	4abe <att_write_rsp.part.11.constprop.14+0x96>

	memset(&data, 0, sizeof(data));

	/* Only allocate buf if required to respond */
	if (rsp) {
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    4a80:	2200      	movs	r2, #0
    4a82:	0039      	movs	r1, r7
    4a84:	0028      	movs	r0, r5
    4a86:	f7ff fcab 	bl	43e0 <bt_att_create_pdu>
		if (!data.buf) {
			return BT_ATT_ERR_UNLIKELY;
    4a8a:	240e      	movs	r4, #14

	memset(&data, 0, sizeof(data));

	/* Only allocate buf if required to respond */
	if (rsp) {
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    4a8c:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
    4a8e:	2800      	cmp	r0, #0
    4a90:	d1dc      	bne.n	4a4c <att_write_rsp.part.11.constprop.14+0x24>
    4a92:	e01c      	b.n	4ace <att_write_rsp.part.11.constprop.14+0xa6>

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);

	if (data.err) {
		/* In case of error discard data and respond with an error */
		if (rsp) {
    4a94:	2f00      	cmp	r7, #0
    4a96:	d00d      	beq.n	4ab4 <att_write_rsp.part.11.constprop.14+0x8c>
			net_buf_unref(data.buf);
    4a98:	9805      	ldr	r0, [sp, #20]
    4a9a:	f009 fd11 	bl	e4c0 <net_buf_unref>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    4a9e:	2e00      	cmp	r6, #0
    4aa0:	d101      	bne.n	4aa6 <att_write_rsp.part.11.constprop.14+0x7e>
		if (rsp) {
			net_buf_unref(data.buf);
			/* Respond here since handle is set */
			send_err_rsp(conn, op, handle, data.err);
		}
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    4aa2:	2400      	movs	r4, #0
    4aa4:	e013      	b.n	4ace <att_write_rsp.part.11.constprop.14+0xa6>
    4aa6:	ab04      	add	r3, sp, #16
    4aa8:	7d1b      	ldrb	r3, [r3, #20]
    4aaa:	9a01      	ldr	r2, [sp, #4]
    4aac:	0031      	movs	r1, r6
    4aae:	0028      	movs	r0, r5
    4ab0:	f7ff fcee 	bl	4490 <send_err_rsp.part.10>
    4ab4:	2e18      	cmp	r6, #24
    4ab6:	d1f4      	bne.n	4aa2 <att_write_rsp.part.11.constprop.14+0x7a>
    4ab8:	ab04      	add	r3, sp, #16
    4aba:	7d1c      	ldrb	r4, [r3, #20]
    4abc:	e007      	b.n	4ace <att_write_rsp.part.11.constprop.14+0xa6>
	}

	if (data.buf) {
    4abe:	9a05      	ldr	r2, [sp, #20]
    4ac0:	2a00      	cmp	r2, #0
    4ac2:	d0ee      	beq.n	4aa2 <att_write_rsp.part.11.constprop.14+0x7a>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    4ac4:	4b04      	ldr	r3, [pc, #16]	; (4ad8 <att_write_rsp.part.11.constprop.14+0xb0>)
    4ac6:	2104      	movs	r1, #4
    4ac8:	0028      	movs	r0, r5
    4aca:	f7fe ff9d 	bl	3a08 <bt_l2cap_send_cb>
				 att_rsp_sent);
	}

	return 0;
}
    4ace:	0020      	movs	r0, r4
    4ad0:	b00b      	add	sp, #44	; 0x2c
    4ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ad4:	000040d5 	.word	0x000040d5
    4ad8:	00004099 	.word	0x00004099

00004adc <att_signed_write_cmd>:

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    4adc:	b5f0      	push	{r4, r5, r6, r7, lr}
	handle = sys_le16_to_cpu(req->handle);

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    4ade:	000e      	movs	r6, r1

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    4ae0:	000c      	movs	r4, r1
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    4ae2:	688b      	ldr	r3, [r1, #8]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    4ae4:	6807      	ldr	r7, [r0, #0]
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    4ae6:	781a      	ldrb	r2, [r3, #0]
    4ae8:	785b      	ldrb	r3, [r3, #1]

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    4aea:	3608      	adds	r6, #8
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    4aec:	021b      	lsls	r3, r3, #8

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    4aee:	b085      	sub	sp, #20
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    4af0:	4313      	orrs	r3, r2

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    4af2:	2101      	movs	r1, #1
    4af4:	0030      	movs	r0, r6
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    4af6:	9303      	str	r3, [sp, #12]

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    4af8:	f009 fd1d 	bl	e536 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    4afc:	0021      	movs	r1, r4
    4afe:	0038      	movs	r0, r7
    4b00:	f000 fc77 	bl	53f2 <bt_smp_sign_verify>
    4b04:	0005      	movs	r5, r0
	if (err) {
		BT_ERR("Error verifying data");
		/* No response for this command */
		return 0;
    4b06:	2000      	movs	r0, #0
	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
	err = bt_smp_sign_verify(conn, buf);
	if (err) {
    4b08:	4285      	cmp	r5, r0
    4b0a:	d117      	bne.n	4b3c <att_signed_write_cmd+0x60>
		BT_ERR("Error verifying data");
		/* No response for this command */
		return 0;
	}

	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    4b0c:	2101      	movs	r1, #1
    4b0e:	0030      	movs	r0, r6
    4b10:	f009 fd19 	bl	e546 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    4b14:	2102      	movs	r1, #2
    4b16:	0030      	movs	r0, r6
    4b18:	f009 fd15 	bl	e546 <net_buf_simple_pull>
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    4b1c:	9b03      	ldr	r3, [sp, #12]
		return BT_ATT_ERR_INVALID_HANDLE;
    4b1e:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    4b20:	2b00      	cmp	r3, #0
    4b22:	d00b      	beq.n	4b3c <att_signed_write_cmd+0x60>
    4b24:	89a3      	ldrh	r3, [r4, #12]
    4b26:	002a      	movs	r2, r5
    4b28:	3b0c      	subs	r3, #12
    4b2a:	b2db      	uxtb	r3, r3
    4b2c:	9301      	str	r3, [sp, #4]
    4b2e:	68a3      	ldr	r3, [r4, #8]
    4b30:	0029      	movs	r1, r5
    4b32:	9300      	str	r3, [sp, #0]
    4b34:	0038      	movs	r0, r7
    4b36:	9b03      	ldr	r3, [sp, #12]
    4b38:	f7ff ff76 	bl	4a28 <att_write_rsp.part.11.constprop.14>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
	net_buf_pull(buf, sizeof(*req));

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
			     buf->len - sizeof(struct bt_att_signature));
}
    4b3c:	b005      	add	sp, #20
    4b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004b40 <att_write_cmd>:
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    4b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4b42:	6805      	ldr	r5, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    4b44:	0008      	movs	r0, r1
    4b46:	3008      	adds	r0, #8
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    4b48:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    4b4a:	f009 fd0c 	bl	e566 <net_buf_simple_pull_le16>
    4b4e:	0003      	movs	r3, r0
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    4b50:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    4b52:	2b00      	cmp	r3, #0
    4b54:	d008      	beq.n	4b68 <att_write_cmd+0x28>
    4b56:	7b22      	ldrb	r2, [r4, #12]
    4b58:	0028      	movs	r0, r5
    4b5a:	9201      	str	r2, [sp, #4]
    4b5c:	68a2      	ldr	r2, [r4, #8]
    4b5e:	9200      	str	r2, [sp, #0]
    4b60:	2200      	movs	r2, #0
    4b62:	0011      	movs	r1, r2
    4b64:	f7ff ff60 	bl	4a28 <att_write_rsp.part.11.constprop.14>
	handle = net_buf_pull_le16(buf);

	BT_DBG("handle 0x%04x", handle);

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}
    4b68:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00004b6a <att_write_req>:

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    4b6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    4b6c:	6805      	ldr	r5, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    4b6e:	0008      	movs	r0, r1
    4b70:	3008      	adds	r0, #8

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    4b72:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    4b74:	f009 fcf7 	bl	e566 <net_buf_simple_pull_le16>
    4b78:	0003      	movs	r3, r0
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    4b7a:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    4b7c:	2b00      	cmp	r3, #0
    4b7e:	d008      	beq.n	4b92 <att_write_req+0x28>
    4b80:	7b22      	ldrb	r2, [r4, #12]
    4b82:	2112      	movs	r1, #18
    4b84:	9201      	str	r2, [sp, #4]
    4b86:	68a2      	ldr	r2, [r4, #8]
    4b88:	0028      	movs	r0, r5
    4b8a:	9200      	str	r2, [sp, #0]
    4b8c:	2213      	movs	r2, #19
    4b8e:	f7ff ff4b 	bl	4a28 <att_write_rsp.part.11.constprop.14>

	BT_DBG("handle 0x%04x", handle);

	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
			     handle, 0, buf->data, buf->len);
}
    4b92:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00004b94 <bt_att_init>:

	return -ENOMEM;
}

void bt_att_init(void)
{
    4b94:	b510      	push	{r4, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    4b96:	4803      	ldr	r0, [pc, #12]	; (4ba4 <bt_att_init+0x10>)
    4b98:	f7fe fe88 	bl	38ac <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    4b9c:	f000 fa3a 	bl	5014 <bt_gatt_init>
}
    4ba0:	bd10      	pop	{r4, pc}
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	200003f8 	.word	0x200003f8

00004ba8 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    4ba8:	b510      	push	{r4, lr}
    4baa:	000c      	movs	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    4bac:	2800      	cmp	r0, #0
    4bae:	d01c      	beq.n	4bea <bt_att_req_send+0x42>
    4bb0:	2900      	cmp	r1, #0
    4bb2:	d01a      	beq.n	4bea <bt_att_req_send+0x42>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    4bb4:	f7ff fa54 	bl	4060 <att_chan_get>
	if (!att) {
    4bb8:	2800      	cmp	r0, #0
    4bba:	d018      	beq.n	4bee <bt_att_req_send+0x46>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    4bbc:	0003      	movs	r3, r0
    4bbe:	3394      	adds	r3, #148	; 0x94
    4bc0:	681b      	ldr	r3, [r3, #0]
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d00d      	beq.n	4be2 <bt_att_req_send+0x3a>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
    4bc6:	0002      	movs	r2, r0
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    4bc8:	2300      	movs	r3, #0

	if (!list->tail) {
    4bca:	3298      	adds	r2, #152	; 0x98
    4bcc:	6850      	ldr	r0, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    4bce:	6023      	str	r3, [r4, #0]

	if (!list->tail) {
    4bd0:	4298      	cmp	r0, r3
    4bd2:	d102      	bne.n	4bda <bt_att_req_send+0x32>
		list->tail = node;
    4bd4:	6054      	str	r4, [r2, #4]
		list->head = node;
    4bd6:	6014      	str	r4, [r2, #0]
    4bd8:	e00b      	b.n	4bf2 <bt_att_req_send+0x4a>
	} else {
		list->tail->next = node;
    4bda:	6004      	str	r4, [r0, #0]
		list->tail = node;
    4bdc:	6054      	str	r4, [r2, #4]
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    4bde:	0018      	movs	r0, r3
    4be0:	e007      	b.n	4bf2 <bt_att_req_send+0x4a>
	}

	return att_send_req(att, req);
    4be2:	0021      	movs	r1, r4
    4be4:	f7ff fa9c 	bl	4120 <att_send_req>
    4be8:	e003      	b.n	4bf2 <bt_att_req_send+0x4a>
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
		return -EINVAL;
    4bea:	2016      	movs	r0, #22
    4bec:	e000      	b.n	4bf0 <bt_att_req_send+0x48>
	}

	att = att_chan_get(conn);
	if (!att) {
		return -ENOTCONN;
    4bee:	2039      	movs	r0, #57	; 0x39
    4bf0:	4240      	negs	r0, r0
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
    4bf2:	bd10      	pop	{r4, pc}

00004bf4 <sc_ccc_cfg_changed>:

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
	BT_DBG("value 0x%04x", value);
}
    4bf4:	4770      	bx	lr

00004bf6 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    4bf6:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    4bf8:	2000      	movs	r0, #0
    4bfa:	4770      	bx	lr

00004bfc <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    4bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	u16_t value = 0x0000;
    4bfe:	2300      	movs	r3, #0

	for (i = 0; i < ccc->cfg_len; i++) {
		if (ccc->cfg[i].value > value) {
    4c00:	260a      	movs	r6, #10
			     struct _bt_gatt_ccc *ccc)
{
	int i;
	u16_t value = 0x0000;

	for (i = 0; i < ccc->cfg_len; i++) {
    4c02:	001a      	movs	r2, r3
    4c04:	684d      	ldr	r5, [r1, #4]
    4c06:	42aa      	cmp	r2, r5
    4c08:	d00b      	beq.n	4c22 <gatt_ccc_changed+0x26>
		if (ccc->cfg[i].value > value) {
    4c0a:	0034      	movs	r4, r6
    4c0c:	4354      	muls	r4, r2
    4c0e:	680f      	ldr	r7, [r1, #0]
    4c10:	193c      	adds	r4, r7, r4
    4c12:	8927      	ldrh	r7, [r4, #8]
    4c14:	1c1c      	adds	r4, r3, #0
    4c16:	42bb      	cmp	r3, r7
    4c18:	d200      	bcs.n	4c1c <gatt_ccc_changed+0x20>
    4c1a:	1c3c      	adds	r4, r7, #0
    4c1c:	b2a3      	uxth	r3, r4
			     struct _bt_gatt_ccc *ccc)
{
	int i;
	u16_t value = 0x0000;

	for (i = 0; i < ccc->cfg_len; i++) {
    4c1e:	3201      	adds	r2, #1
    4c20:	e7f1      	b.n	4c06 <gatt_ccc_changed+0xa>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    4c22:	890a      	ldrh	r2, [r1, #8]
    4c24:	429a      	cmp	r2, r3
    4c26:	d003      	beq.n	4c30 <gatt_ccc_changed+0x34>
		ccc->value = value;
    4c28:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    4c2a:	68ca      	ldr	r2, [r1, #12]
    4c2c:	0019      	movs	r1, r3
    4c2e:	4790      	blx	r2
	}
}
    4c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004c32 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    4c32:	b510      	push	{r4, lr}
    4c34:	9b02      	ldr	r3, [sp, #8]
    4c36:	000a      	movs	r2, r1
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    4c38:	699c      	ldr	r4, [r3, #24]
    4c3a:	6959      	ldr	r1, [r3, #20]
    4c3c:	47a0      	blx	r4
}
    4c3e:	bd10      	pop	{r4, pc}

00004c40 <sc_indicate_rsp>:

static struct k_sem sc_sem = K_SEM_INITIALIZER(sc_sem, 1, 1);

static void sc_indicate_rsp(struct bt_conn *conn,
			    const struct bt_gatt_attr *attr, u8_t err)
{
    4c40:	b510      	push	{r4, lr}
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
    4c42:	4802      	ldr	r0, [pc, #8]	; (4c4c <sc_indicate_rsp+0xc>)
    4c44:	f00a fdf4 	bl	f830 <k_sem_give>
}
    4c48:	bd10      	pop	{r4, pc}
    4c4a:	46c0      	nop			; (mov r8, r8)
    4c4c:	20000518 	.word	0x20000518

00004c50 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       u16_t len, u16_t offset, u8_t flags)
{
    4c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c52:	b085      	sub	sp, #20
    4c54:	9103      	str	r1, [sp, #12]
    4c56:	a90a      	add	r1, sp, #40	; 0x28
    4c58:	9002      	str	r0, [sp, #8]
    4c5a:	8809      	ldrh	r1, [r1, #0]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    4c5c:	9803      	ldr	r0, [sp, #12]
    4c5e:	68c5      	ldr	r5, [r0, #12]
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
    4c60:	2902      	cmp	r1, #2
    4c62:	d84e      	bhi.n	4d02 <bt_gatt_attr_write_ccc+0xb2>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(u16_t)) {
    4c64:	18c9      	adds	r1, r1, r3
    4c66:	001e      	movs	r6, r3
    4c68:	2902      	cmp	r1, #2
    4c6a:	dc4c      	bgt.n	4d06 <bt_gatt_attr_write_ccc+0xb6>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    4c6c:	7853      	ldrb	r3, [r2, #1]
    4c6e:	7812      	ldrb	r2, [r2, #0]
    4c70:	021b      	lsls	r3, r3, #8
    4c72:	431a      	orrs	r2, r3
    4c74:	0017      	movs	r7, r2
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    4c76:	2400      	movs	r4, #0
    4c78:	686b      	ldr	r3, [r5, #4]
    4c7a:	429c      	cmp	r4, r3
    4c7c:	d209      	bcs.n	4c92 <bt_gatt_attr_write_ccc+0x42>
		/* Check for existing configuration */
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    4c7e:	210a      	movs	r1, #10
    4c80:	4361      	muls	r1, r4
    4c82:	682b      	ldr	r3, [r5, #0]
    4c84:	9802      	ldr	r0, [sp, #8]
    4c86:	1859      	adds	r1, r3, r1
    4c88:	3101      	adds	r1, #1
    4c8a:	f7fe fc65 	bl	3558 <bt_conn_addr_le_cmp>
    4c8e:	2800      	cmp	r0, #0
    4c90:	d105      	bne.n	4c9e <bt_gatt_attr_write_ccc+0x4e>
			break;
		}
	}

	if (i == ccc->cfg_len) {
    4c92:	686b      	ldr	r3, [r5, #4]
    4c94:	429c      	cmp	r4, r3
    4c96:	d121      	bne.n	4cdc <bt_gatt_attr_write_ccc+0x8c>
    4c98:	2400      	movs	r4, #0
    4c9a:	220a      	movs	r2, #10
    4c9c:	e00b      	b.n	4cb6 <bt_gatt_attr_write_ccc+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    4c9e:	3401      	adds	r4, #1
    4ca0:	e7ea      	b.n	4c78 <bt_gatt_attr_write_ccc+0x28>
    4ca2:	0011      	movs	r1, r2
    4ca4:	4361      	muls	r1, r4
    4ca6:	9101      	str	r1, [sp, #4]
	}

	if (i == ccc->cfg_len) {
		for (i = 0; i < ccc->cfg_len; i++) {
			/* Check for unused configuration */
			if (ccc->cfg[i].valid) {
    4ca8:	9801      	ldr	r0, [sp, #4]
    4caa:	6829      	ldr	r1, [r5, #0]
    4cac:	1808      	adds	r0, r1, r0
    4cae:	7801      	ldrb	r1, [r0, #0]
    4cb0:	2900      	cmp	r1, #0
    4cb2:	d003      	beq.n	4cbc <bt_gatt_attr_write_ccc+0x6c>
			break;
		}
	}

	if (i == ccc->cfg_len) {
		for (i = 0; i < ccc->cfg_len; i++) {
    4cb4:	3401      	adds	r4, #1
    4cb6:	429c      	cmp	r4, r3
    4cb8:	d1f3      	bne.n	4ca2 <bt_gatt_attr_write_ccc+0x52>
    4cba:	e026      	b.n	4d0a <bt_gatt_attr_write_ccc+0xba>
			/* Check for unused configuration */
			if (ccc->cfg[i].valid) {
				continue;
			}

			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    4cbc:	9902      	ldr	r1, [sp, #8]
    4cbe:	3001      	adds	r0, #1
    4cc0:	3150      	adds	r1, #80	; 0x50
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4cc2:	2207      	movs	r2, #7
    4cc4:	f7fb ffe7 	bl	c96 <memcpy>

			if (value) {
    4cc8:	2f00      	cmp	r7, #0
    4cca:	d003      	beq.n	4cd4 <bt_gatt_attr_write_ccc+0x84>
				ccc->cfg[i].valid = true;
    4ccc:	2301      	movs	r3, #1
    4cce:	682a      	ldr	r2, [r5, #0]
    4cd0:	9901      	ldr	r1, [sp, #4]
    4cd2:	5453      	strb	r3, [r2, r1]
			}

			break;
		}

		if (i == ccc->cfg_len) {
    4cd4:	686b      	ldr	r3, [r5, #4]
    4cd6:	429c      	cmp	r4, r3
    4cd8:	d106      	bne.n	4ce8 <bt_gatt_attr_write_ccc+0x98>
    4cda:	e016      	b.n	4d0a <bt_gatt_attr_write_ccc+0xba>
			BT_WARN("No space to store CCC cfg");
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
		}
	} else if (!value) {
    4cdc:	2f00      	cmp	r7, #0
    4cde:	d103      	bne.n	4ce8 <bt_gatt_attr_write_ccc+0x98>
		/* free existing configuration for default value */
		ccc->cfg[i].valid = false;
    4ce0:	230a      	movs	r3, #10
    4ce2:	4363      	muls	r3, r4
    4ce4:	682a      	ldr	r2, [r5, #0]
    4ce6:	549f      	strb	r7, [r3, r2]
	}

	ccc->cfg[i].value = value;
    4ce8:	230a      	movs	r3, #10
    4cea:	435c      	muls	r4, r3
    4cec:	682b      	ldr	r3, [r5, #0]
    4cee:	191c      	adds	r4, r3, r4
    4cf0:	8127      	strh	r7, [r4, #8]

	BT_DBG("handle 0x%04x value %u", attr->handle, ccc->cfg[i].value);

	/* Update cfg if don't match */
	if (ccc->cfg[i].value != ccc->value) {
    4cf2:	892b      	ldrh	r3, [r5, #8]
    4cf4:	42bb      	cmp	r3, r7
    4cf6:	d00a      	beq.n	4d0e <bt_gatt_attr_write_ccc+0xbe>
		gatt_ccc_changed(attr, ccc);
    4cf8:	0029      	movs	r1, r5
    4cfa:	9803      	ldr	r0, [sp, #12]
    4cfc:	f7ff ff7e 	bl	4bfc <gatt_ccc_changed>
    4d00:	e005      	b.n	4d0e <bt_gatt_attr_write_ccc+0xbe>
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    4d02:	2607      	movs	r6, #7
    4d04:	e002      	b.n	4d0c <bt_gatt_attr_write_ccc+0xbc>
	}

	if (offset + len > sizeof(u16_t)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    4d06:	260d      	movs	r6, #13
    4d08:	e000      	b.n	4d0c <bt_gatt_attr_write_ccc+0xbc>
			break;
		}

		if (i == ccc->cfg_len) {
			BT_WARN("No space to store CCC cfg");
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    4d0a:	2611      	movs	r6, #17
    4d0c:	4276      	negs	r6, r6
	if (ccc->cfg[i].value != ccc->value) {
		gatt_ccc_changed(attr, ccc);
	}

	return len;
}
    4d0e:	0030      	movs	r0, r6
    4d10:	b005      	add	sp, #20
    4d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d14 <connected_cb>:
{
	return bt_att_get_mtu(conn);
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    4d16:	4b12      	ldr	r3, [pc, #72]	; (4d60 <connected_cb+0x4c>)
    4d18:	6882      	ldr	r2, [r0, #8]
{
	return bt_att_get_mtu(conn);
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4d1a:	0007      	movs	r7, r0
    4d1c:	9101      	str	r1, [sp, #4]
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    4d1e:	429a      	cmp	r2, r3
    4d20:	d11c      	bne.n	4d5c <connected_cb+0x48>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    4d22:	68c5      	ldr	r5, [r0, #12]

	/* If already enabled skip */
	if (ccc->value) {
    4d24:	892c      	ldrh	r4, [r5, #8]
    4d26:	2c00      	cmp	r4, #0
    4d28:	d118      	bne.n	4d5c <connected_cb+0x48>
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    4d2a:	686b      	ldr	r3, [r5, #4]
    4d2c:	429c      	cmp	r4, r3
    4d2e:	d215      	bcs.n	4d5c <connected_cb+0x48>
    4d30:	260a      	movs	r6, #10
    4d32:	4366      	muls	r6, r4
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    4d34:	682b      	ldr	r3, [r5, #0]
    4d36:	9801      	ldr	r0, [sp, #4]
    4d38:	1999      	adds	r1, r3, r6
    4d3a:	3101      	adds	r1, #1
    4d3c:	f7fe fc0c 	bl	3558 <bt_conn_addr_le_cmp>
    4d40:	2800      	cmp	r0, #0
    4d42:	d109      	bne.n	4d58 <connected_cb+0x44>
			continue;
		}

		if (ccc->cfg[i].value) {
    4d44:	682b      	ldr	r3, [r5, #0]
    4d46:	199e      	adds	r6, r3, r6
    4d48:	8933      	ldrh	r3, [r6, #8]
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	d004      	beq.n	4d58 <connected_cb+0x44>
			gatt_ccc_changed(attr, ccc);
    4d4e:	0029      	movs	r1, r5
    4d50:	0038      	movs	r0, r7
    4d52:	f7ff ff53 	bl	4bfc <gatt_ccc_changed>
    4d56:	e001      	b.n	4d5c <connected_cb+0x48>
	/* If already enabled skip */
	if (ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    4d58:	3401      	adds	r4, #1
    4d5a:	e7e6      	b.n	4d2a <connected_cb+0x16>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    4d5c:	2001      	movs	r0, #1
    4d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4d60:	00004c51 	.word	0x00004c51

00004d64 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    4d64:	b570      	push	{r4, r5, r6, lr}
    4d66:	4a1c      	ldr	r2, [pc, #112]	; (4dd8 <gatt_register+0x74>)
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    4d68:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;

	if (sys_slist_is_empty(&db)) {
    4d6a:	6813      	ldr	r3, [r2, #0]
static int gatt_register(struct bt_gatt_service *svc)
{
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
	u16_t count = svc->attr_count;
    4d6c:	8881      	ldrh	r1, [r0, #4]

	if (sys_slist_is_empty(&db)) {
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d018      	beq.n	4da4 <gatt_register+0x40>
    4d72:	6853      	ldr	r3, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    4d74:	2b00      	cmp	r3, #0
    4d76:	d02c      	beq.n	4dd2 <gatt_register+0x6e>
	handle = last->attrs[last->attr_count - 1].handle;
    4d78:	3b08      	subs	r3, #8
    4d7a:	001d      	movs	r5, r3
    4d7c:	682e      	ldr	r6, [r5, #0]
    4d7e:	2514      	movs	r5, #20
    4d80:	889b      	ldrh	r3, [r3, #4]
    4d82:	436b      	muls	r3, r5
    4d84:	18f3      	adds	r3, r6, r3
    4d86:	3b14      	subs	r3, #20
    4d88:	8a1b      	ldrh	r3, [r3, #16]
    4d8a:	e00b      	b.n	4da4 <gatt_register+0x40>

populate:
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
    4d8c:	2900      	cmp	r1, #0
    4d8e:	d00f      	beq.n	4db0 <gatt_register+0x4c>
		if (!attrs->handle) {
    4d90:	8a25      	ldrh	r5, [r4, #16]
    4d92:	2d00      	cmp	r5, #0
    4d94:	d109      	bne.n	4daa <gatt_register+0x46>
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
    4d96:	3301      	adds	r3, #1
    4d98:	b29d      	uxth	r5, r3
    4d9a:	8225      	strh	r5, [r4, #16]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
	handle = last->attrs[last->attr_count - 1].handle;

populate:
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
    4d9c:	002b      	movs	r3, r5
    4d9e:	3901      	subs	r1, #1
    4da0:	3414      	adds	r4, #20
    4da2:	b289      	uxth	r1, r1
    4da4:	2c00      	cmp	r4, #0
    4da6:	d1f1      	bne.n	4d8c <gatt_register+0x28>
    4da8:	e002      	b.n	4db0 <gatt_register+0x4c>
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    4daa:	42ab      	cmp	r3, r5
    4dac:	d3f6      	bcc.n	4d9c <gatt_register+0x38>
    4dae:	e00d      	b.n	4dcc <gatt_register+0x68>
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    4db0:	2300      	movs	r3, #0
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    4db2:	0001      	movs	r1, r0
    4db4:	6083      	str	r3, [r0, #8]

	if (!list->tail) {
    4db6:	6850      	ldr	r0, [r2, #4]
    4db8:	3108      	adds	r1, #8
    4dba:	4298      	cmp	r0, r3
    4dbc:	d102      	bne.n	4dc4 <gatt_register+0x60>
		list->tail = node;
    4dbe:	6051      	str	r1, [r2, #4]
		list->head = node;
    4dc0:	6011      	str	r1, [r2, #0]
    4dc2:	e008      	b.n	4dd6 <gatt_register+0x72>
	} else {
		list->tail->next = node;
    4dc4:	6001      	str	r1, [r0, #0]
		list->tail = node;
    4dc6:	6051      	str	r1, [r2, #4]

	return 0;
    4dc8:	0018      	movs	r0, r3
    4dca:	e004      	b.n	4dd6 <gatt_register+0x72>
			handle = attrs->handle;
		} else {
			/* Service has conflicting handles */
			BT_ERR("Unable to register handle 0x%04x",
			       attrs->handle);
			return -EINVAL;
    4dcc:	2016      	movs	r0, #22
    4dce:	4240      	negs	r0, r0
    4dd0:	e001      	b.n	4dd6 <gatt_register+0x72>
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
	handle = last->attrs[last->attr_count - 1].handle;
    4dd2:	681b      	ldr	r3, [r3, #0]
    4dd4:	deff      	udf	#255	; 0xff
	}

	sys_slist_append(&db, &svc->node);

	return 0;
}
    4dd6:	bd70      	pop	{r4, r5, r6, pc}
    4dd8:	20000b6c 	.word	0x20000b6c

00004ddc <gatt_notify>:
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len)
{
    4ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dde:	b085      	sub	sp, #20
    4de0:	9102      	str	r1, [sp, #8]
    4de2:	9203      	str	r2, [sp, #12]
	struct net_buf *buf;
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    4de4:	211b      	movs	r1, #27
    4de6:	1c9a      	adds	r2, r3, #2
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len)
{
    4de8:	0007      	movs	r7, r0
    4dea:	001e      	movs	r6, r3
	struct net_buf *buf;
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    4dec:	f7ff faf8 	bl	43e0 <bt_att_create_pdu>
    4df0:	1e05      	subs	r5, r0, #0
	if (!buf) {
    4df2:	d01e      	beq.n	4e32 <gatt_notify+0x56>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    4df4:	0003      	movs	r3, r0
    4df6:	3308      	adds	r3, #8
    4df8:	2102      	movs	r1, #2
    4dfa:	0018      	movs	r0, r3
    4dfc:	9301      	str	r3, [sp, #4]
    4dfe:	f009 fb81 	bl	e504 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    4e02:	466b      	mov	r3, sp
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    4e04:	0004      	movs	r4, r0
	nfy->handle = sys_cpu_to_le16(handle);
    4e06:	7a1b      	ldrb	r3, [r3, #8]

	net_buf_add(buf, len);
    4e08:	0031      	movs	r1, r6
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
	nfy->handle = sys_cpu_to_le16(handle);
    4e0a:	7003      	strb	r3, [r0, #0]
    4e0c:	9b02      	ldr	r3, [sp, #8]
    4e0e:	0a1b      	lsrs	r3, r3, #8
    4e10:	7043      	strb	r3, [r0, #1]

	net_buf_add(buf, len);
    4e12:	9801      	ldr	r0, [sp, #4]
    4e14:	f009 fb76 	bl	e504 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    4e18:	0032      	movs	r2, r6
    4e1a:	9903      	ldr	r1, [sp, #12]
    4e1c:	1ca0      	adds	r0, r4, #2
    4e1e:	f7fb ff3a 	bl	c96 <memcpy>
    4e22:	0038      	movs	r0, r7
    4e24:	2300      	movs	r3, #0
    4e26:	002a      	movs	r2, r5
    4e28:	2104      	movs	r1, #4
    4e2a:	f7fe fded 	bl	3a08 <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_ATT, buf);

	return 0;
    4e2e:	2000      	movs	r0, #0
    4e30:	e001      	b.n	4e36 <gatt_notify+0x5a>
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
	if (!buf) {
		BT_WARN("No buffer available to send notification");
		return -ENOMEM;
    4e32:	200c      	movs	r0, #12
    4e34:	4240      	negs	r0, r0
	memcpy(nfy->value, data, len);

	bt_l2cap_send(conn, BT_L2CAP_CID_ATT, buf);

	return 0;
}
    4e36:	b005      	add	sp, #20
    4e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00004e3c <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    4e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    4e3e:	8c0a      	ldrh	r2, [r1, #32]
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    4e40:	000c      	movs	r4, r1
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    4e42:	3202      	adds	r2, #2
    4e44:	211d      	movs	r1, #29
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    4e46:	0007      	movs	r7, r0
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    4e48:	f7ff faca 	bl	43e0 <bt_att_create_pdu>
    4e4c:	1e06      	subs	r6, r0, #0
				sizeof(*ind) + params->len);
	if (!buf) {
    4e4e:	d027      	beq.n	4ea0 <gatt_indicate+0x64>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
    4e50:	0003      	movs	r3, r0
    4e52:	3308      	adds	r3, #8
    4e54:	2102      	movs	r1, #2
    4e56:	0018      	movs	r0, r3
    4e58:	9301      	str	r3, [sp, #4]
    4e5a:	f009 fb53 	bl	e504 <net_buf_simple_add>
    4e5e:	0005      	movs	r5, r0
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    4e60:	6963      	ldr	r3, [r4, #20]
    4e62:	7c1a      	ldrb	r2, [r3, #16]
    4e64:	7002      	strb	r2, [r0, #0]
    4e66:	7c5b      	ldrb	r3, [r3, #17]
    4e68:	7043      	strb	r3, [r0, #1]

	net_buf_add(buf, params->len);
    4e6a:	8c21      	ldrh	r1, [r4, #32]
    4e6c:	9801      	ldr	r0, [sp, #4]
    4e6e:	f009 fb49 	bl	e504 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    4e72:	8c22      	ldrh	r2, [r4, #32]
    4e74:	69e1      	ldr	r1, [r4, #28]
    4e76:	1ca8      	adds	r0, r5, #2
    4e78:	f7fb ff0d 	bl	c96 <memcpy>

	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
		req->func = func;
    4e7c:	4b0a      	ldr	r3, [pc, #40]	; (4ea8 <gatt_indicate+0x6c>)
	int err;

	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
    4e7e:	6126      	str	r6, [r4, #16]
		req->func = func;
    4e80:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    4e82:	2300      	movs	r3, #0

		err = bt_att_req_send(conn, req);
    4e84:	0021      	movs	r1, r4
	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
		req->func = func;
		req->destroy = destroy;
    4e86:	60a3      	str	r3, [r4, #8]

		err = bt_att_req_send(conn, req);
    4e88:	0038      	movs	r0, r7
    4e8a:	f7ff fe8d 	bl	4ba8 <bt_att_req_send>
    4e8e:	0004      	movs	r4, r0
	} else {
		err = bt_att_send(conn, buf);
	}

	if (err) {
    4e90:	2000      	movs	r0, #0
    4e92:	4284      	cmp	r4, r0
    4e94:	d006      	beq.n	4ea4 <gatt_indicate+0x68>
		BT_ERR("Error sending ATT PDU: %d", err);
		net_buf_unref(buf);
    4e96:	0030      	movs	r0, r6
    4e98:	f009 fb12 	bl	e4c0 <net_buf_unref>
    4e9c:	0020      	movs	r0, r4
    4e9e:	e001      	b.n	4ea4 <gatt_indicate+0x68>

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
	if (!buf) {
		BT_WARN("No buffer available to send indication");
		return -ENOMEM;
    4ea0:	200c      	movs	r0, #12
    4ea2:	4240      	negs	r0, r0

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    4ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4ea6:	46c0      	nop			; (mov r8, r8)
    4ea8:	00004c33 	.word	0x00004c33

00004eac <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4eac:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    4eae:	2600      	movs	r6, #0

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4eb0:	b085      	sub	sp, #20
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    4eb2:	ab02      	add	r3, sp, #8
    4eb4:	aa02      	add	r2, sp, #8
    4eb6:	701e      	strb	r6, [r3, #0]
    4eb8:	4b27      	ldr	r3, [pc, #156]	; (4f58 <notify_cb+0xac>)

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4eba:	0005      	movs	r5, r0
    4ebc:	000c      	movs	r4, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    4ebe:	6800      	ldr	r0, [r0, #0]
    4ec0:	0011      	movs	r1, r2
    4ec2:	8053      	strh	r3, [r2, #2]
    4ec4:	f7fc fdb6 	bl	1a34 <bt_uuid_cmp>
    4ec8:	42b0      	cmp	r0, r6
    4eca:	d00a      	beq.n	4ee2 <notify_cb+0x36>
		/* Stop if we reach the next characteristic */
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    4ecc:	4b23      	ldr	r3, [pc, #140]	; (4f5c <notify_cb+0xb0>)
    4ece:	a903      	add	r1, sp, #12
    4ed0:	6828      	ldr	r0, [r5, #0]
    4ed2:	804b      	strh	r3, [r1, #2]
    4ed4:	700e      	strb	r6, [r1, #0]
    4ed6:	f7fc fdad 	bl	1a34 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    4eda:	1e43      	subs	r3, r0, #1
    4edc:	4198      	sbcs	r0, r3
    4ede:	b2c0      	uxtb	r0, r0
    4ee0:	e037      	b.n	4f52 <notify_cb+0xa6>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    4ee2:	4b1f      	ldr	r3, [pc, #124]	; (4f60 <notify_cb+0xb4>)
    4ee4:	68aa      	ldr	r2, [r5, #8]
    4ee6:	429a      	cmp	r2, r3
    4ee8:	d001      	beq.n	4eee <notify_cb+0x42>
		return BT_GATT_ITER_CONTINUE;
    4eea:	2001      	movs	r0, #1
    4eec:	e031      	b.n	4f52 <notify_cb+0xa6>
	}

	ccc = attr->user_data;

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    4eee:	0007      	movs	r7, r0
	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    4ef0:	68ee      	ldr	r6, [r5, #12]

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    4ef2:	6873      	ldr	r3, [r6, #4]
    4ef4:	429f      	cmp	r7, r3
    4ef6:	d2f8      	bcs.n	4eea <notify_cb+0x3e>
		struct bt_conn *conn;
		int err;

		if (ccc->value != data->type) {
    4ef8:	8932      	ldrh	r2, [r6, #8]
    4efa:	88a3      	ldrh	r3, [r4, #4]
    4efc:	429a      	cmp	r2, r3
    4efe:	d126      	bne.n	4f4e <notify_cb+0xa2>
			continue;
		}

		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    4f00:	200a      	movs	r0, #10
    4f02:	4378      	muls	r0, r7
    4f04:	6833      	ldr	r3, [r6, #0]
    4f06:	1818      	adds	r0, r3, r0
    4f08:	3001      	adds	r0, #1
    4f0a:	f7fe fb3d 	bl	3588 <bt_conn_lookup_addr_le>
    4f0e:	1e05      	subs	r5, r0, #0
		if (!conn) {
    4f10:	d01d      	beq.n	4f4e <notify_cb+0xa2>
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
    4f12:	0003      	movs	r3, r0
    4f14:	334d      	adds	r3, #77	; 0x4d
    4f16:	781b      	ldrb	r3, [r3, #0]
    4f18:	2b03      	cmp	r3, #3
    4f1a:	d002      	beq.n	4f22 <notify_cb+0x76>
			bt_conn_unref(conn);
    4f1c:	f7fe fb74 	bl	3608 <bt_conn_unref>
    4f20:	e015      	b.n	4f4e <notify_cb+0xa2>
			continue;
		}

		if (data->type == BT_GATT_CCC_INDICATE) {
    4f22:	88a3      	ldrh	r3, [r4, #4]
    4f24:	2b02      	cmp	r3, #2
    4f26:	d103      	bne.n	4f30 <notify_cb+0x84>
			err = gatt_indicate(conn, data->params);
    4f28:	6961      	ldr	r1, [r4, #20]
    4f2a:	f7ff ff87 	bl	4e3c <gatt_indicate>
    4f2e:	e005      	b.n	4f3c <notify_cb+0x90>
		} else {
			err = gatt_notify(conn, data->attr->handle, data->data,
    4f30:	68a2      	ldr	r2, [r4, #8]
    4f32:	8a23      	ldrh	r3, [r4, #16]
    4f34:	8a11      	ldrh	r1, [r2, #16]
    4f36:	68e2      	ldr	r2, [r4, #12]
    4f38:	f7ff ff50 	bl	4ddc <gatt_notify>
    4f3c:	9001      	str	r0, [sp, #4]
					 data->len);
		}

		bt_conn_unref(conn);
    4f3e:	0028      	movs	r0, r5
    4f40:	f7fe fb62 	bl	3608 <bt_conn_unref>
    4f44:	2000      	movs	r0, #0

		if (err < 0) {
    4f46:	9b01      	ldr	r3, [sp, #4]
    4f48:	4283      	cmp	r3, r0
    4f4a:	db02      	blt.n	4f52 <notify_cb+0xa6>
			return BT_GATT_ITER_STOP;
		}

		data->err = 0;
    4f4c:	6020      	str	r0, [r4, #0]
	}

	ccc = attr->user_data;

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    4f4e:	3701      	adds	r7, #1
    4f50:	e7cf      	b.n	4ef2 <notify_cb+0x46>

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    4f52:	b005      	add	sp, #20
    4f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f56:	46c0      	nop			; (mov r8, r8)
    4f58:	00002902 	.word	0x00002902
    4f5c:	00002803 	.word	0x00002803
    4f60:	00004c51 	.word	0x00004c51

00004f64 <disconnected_cb>:

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    4f66:	4b2a      	ldr	r3, [pc, #168]	; (5010 <disconnected_cb+0xac>)
    4f68:	6882      	ldr	r2, [r0, #8]

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    4f6a:	0007      	movs	r7, r0
    4f6c:	9101      	str	r1, [sp, #4]
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    4f6e:	429a      	cmp	r2, r3
    4f70:	d14c      	bne.n	500c <disconnected_cb+0xa8>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    4f72:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    4f74:	2600      	movs	r6, #0
    4f76:	8923      	ldrh	r3, [r4, #8]
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d047      	beq.n	500c <disconnected_cb+0xa8>
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    4f7c:	6863      	ldr	r3, [r4, #4]
    4f7e:	429e      	cmp	r6, r3
    4f80:	d238      	bcs.n	4ff4 <disconnected_cb+0x90>
    4f82:	250a      	movs	r5, #10
    4f84:	4375      	muls	r5, r6
		/* Ignore configurations with disabled value */
		if (!ccc->cfg[i].value) {
    4f86:	6823      	ldr	r3, [r4, #0]
    4f88:	1959      	adds	r1, r3, r5
    4f8a:	890b      	ldrh	r3, [r1, #8]
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d02f      	beq.n	4ff0 <disconnected_cb+0x8c>
			continue;
		}

		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    4f90:	3101      	adds	r1, #1
    4f92:	9801      	ldr	r0, [sp, #4]
    4f94:	f7fe fae0 	bl	3558 <bt_conn_addr_le_cmp>
    4f98:	2800      	cmp	r0, #0
    4f9a:	d011      	beq.n	4fc0 <disconnected_cb+0x5c>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    4f9c:	6823      	ldr	r3, [r4, #0]
    4f9e:	1958      	adds	r0, r3, r5
    4fa0:	3001      	adds	r0, #1
    4fa2:	f7fe faf1 	bl	3588 <bt_conn_lookup_addr_le>
			if (tmp) {
    4fa6:	2800      	cmp	r0, #0
    4fa8:	d022      	beq.n	4ff0 <disconnected_cb+0x8c>
				if (tmp->state == BT_CONN_CONNECTED) {
    4faa:	0003      	movs	r3, r0
    4fac:	334d      	adds	r3, #77	; 0x4d
    4fae:	781b      	ldrb	r3, [r3, #0]
    4fb0:	2b03      	cmp	r3, #3
    4fb2:	d102      	bne.n	4fba <disconnected_cb+0x56>
					bt_conn_unref(tmp);
    4fb4:	f7fe fb28 	bl	3608 <bt_conn_unref>
    4fb8:	e028      	b.n	500c <disconnected_cb+0xa8>
					return BT_GATT_ITER_CONTINUE;
				}

				bt_conn_unref(tmp);
    4fba:	f7fe fb25 	bl	3608 <bt_conn_unref>
    4fbe:	e017      	b.n	4ff0 <disconnected_cb+0x8c>
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    4fc0:	9b01      	ldr	r3, [sp, #4]
    4fc2:	3350      	adds	r3, #80	; 0x50
    4fc4:	0018      	movs	r0, r3
    4fc6:	9300      	str	r3, [sp, #0]
    4fc8:	f7fd ff34 	bl	2e34 <bt_addr_le_is_bonded>
    4fcc:	1e01      	subs	r1, r0, #0
    4fce:	6820      	ldr	r0, [r4, #0]
    4fd0:	d108      	bne.n	4fe4 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    4fd2:	5541      	strb	r1, [r0, r5]
				memset(&ccc->cfg[i].value, 0,
    4fd4:	6823      	ldr	r3, [r4, #0]
    4fd6:	2202      	movs	r2, #2
    4fd8:	195d      	adds	r5, r3, r5
    4fda:	0028      	movs	r0, r5
    4fdc:	3008      	adds	r0, #8
    4fde:	f7fb fe84 	bl	cea <memset>
    4fe2:	e005      	b.n	4ff0 <disconnected_cb+0x8c>
				       sizeof(ccc->cfg[i].value));
			} else {
				/* Update address in case it has changed */
				bt_addr_le_copy(&ccc->cfg[i].peer,
    4fe4:	1940      	adds	r0, r0, r5
    4fe6:	3001      	adds	r0, #1
    4fe8:	2207      	movs	r2, #7
    4fea:	9900      	ldr	r1, [sp, #0]
    4fec:	f7fb fe53 	bl	c96 <memcpy>
	/* If already disabled skip */
	if (!ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    4ff0:	3601      	adds	r6, #1
    4ff2:	e7c3      	b.n	4f7c <disconnected_cb+0x18>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    4ff4:	0020      	movs	r0, r4
    4ff6:	2202      	movs	r2, #2
    4ff8:	2100      	movs	r1, #0
    4ffa:	3008      	adds	r0, #8
    4ffc:	f7fb fe75 	bl	cea <memset>
	if (ccc->cfg_changed) {
    5000:	68e3      	ldr	r3, [r4, #12]
    5002:	2b00      	cmp	r3, #0
    5004:	d002      	beq.n	500c <disconnected_cb+0xa8>
		ccc->cfg_changed(attr, ccc->value);
    5006:	8921      	ldrh	r1, [r4, #8]
    5008:	0038      	movs	r0, r7
    500a:	4798      	blx	r3
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    500c:	2001      	movs	r0, #1
    500e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5010:	00004c51 	.word	0x00004c51

00005014 <bt_gatt_init>:

	return 0;
}

void bt_gatt_init(void)
{
    5014:	b510      	push	{r4, lr}
	/* Register mandatory services */
	gatt_register(&gap_svc);
    5016:	4803      	ldr	r0, [pc, #12]	; (5024 <bt_gatt_init+0x10>)
    5018:	f7ff fea4 	bl	4d64 <gatt_register>
	gatt_register(&gatt_svc);
    501c:	4802      	ldr	r0, [pc, #8]	; (5028 <bt_gatt_init+0x14>)
    501e:	f7ff fea1 	bl	4d64 <gatt_register>
}
    5022:	bd10      	pop	{r4, pc}
    5024:	2000054c 	.word	0x2000054c
    5028:	2000050c 	.word	0x2000050c

0000502c <bt_gatt_attr_read>:
}

ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			  void *buf, u16_t buf_len, u16_t offset,
			  const void *value, u16_t value_len)
{
    502c:	b510      	push	{r4, lr}
    502e:	0010      	movs	r0, r2
    5030:	aa02      	add	r2, sp, #8
    5032:	8811      	ldrh	r1, [r2, #0]
    5034:	aa04      	add	r2, sp, #16
    5036:	8814      	ldrh	r4, [r2, #0]
	u16_t len;

	if (offset > value_len) {
    5038:	42a1      	cmp	r1, r4
    503a:	d80a      	bhi.n	5052 <bt_gatt_attr_read+0x26>
    503c:	1a64      	subs	r4, r4, r1
    503e:	429c      	cmp	r4, r3
    5040:	dd00      	ble.n	5044 <bt_gatt_attr_read+0x18>
    5042:	001c      	movs	r4, r3
	len = min(buf_len, value_len - offset);

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, value + offset, len);
    5044:	9b03      	ldr	r3, [sp, #12]
    5046:	b2a4      	uxth	r4, r4
    5048:	1859      	adds	r1, r3, r1
    504a:	0022      	movs	r2, r4
    504c:	f7fb fe23 	bl	c96 <memcpy>

	return len;
    5050:	e001      	b.n	5056 <bt_gatt_attr_read+0x2a>
			  const void *value, u16_t value_len)
{
	u16_t len;

	if (offset > value_len) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5052:	2407      	movs	r4, #7
    5054:	4264      	negs	r4, r4
	       len);

	memcpy(buf, value + offset, len);

	return len;
}
    5056:	0020      	movs	r0, r4
    5058:	bd10      	pop	{r4, pc}
	...

0000505c <read_appearance>:
}

static ssize_t read_appearance(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    505c:	b570      	push	{r4, r5, r6, lr}
    505e:	b086      	sub	sp, #24
    5060:	ac0a      	add	r4, sp, #40	; 0x28
    5062:	8825      	ldrh	r5, [r4, #0]
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    5064:	2416      	movs	r4, #22
    5066:	4e05      	ldr	r6, [pc, #20]	; (507c <read_appearance+0x20>)
    5068:	446c      	add	r4, sp
    506a:	8026      	strh	r6, [r4, #0]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    506c:	2602      	movs	r6, #2
    506e:	9401      	str	r4, [sp, #4]
    5070:	9602      	str	r6, [sp, #8]
    5072:	9500      	str	r5, [sp, #0]
    5074:	f7ff ffda 	bl	502c <bt_gatt_attr_read>
				 sizeof(appearance));
}
    5078:	b006      	add	sp, #24
    507a:	bd70      	pop	{r4, r5, r6, pc}
    507c:	00000485 	.word	0x00000485

00005080 <read_name>:

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    5080:	b5f0      	push	{r4, r5, r6, r7, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    5082:	4c0b      	ldr	r4, [pc, #44]	; (50b0 <read_name+0x30>)

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    5084:	b087      	sub	sp, #28
    5086:	0005      	movs	r5, r0
    5088:	001e      	movs	r6, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    508a:	0020      	movs	r0, r4

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    508c:	ab0c      	add	r3, sp, #48	; 0x30
    508e:	881f      	ldrh	r7, [r3, #0]
    5090:	9104      	str	r1, [sp, #16]
    5092:	9205      	str	r2, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    5094:	f7fb fdd5 	bl	c42 <strlen>
static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    5098:	b280      	uxth	r0, r0
    509a:	9002      	str	r0, [sp, #8]
    509c:	9401      	str	r4, [sp, #4]
    509e:	9700      	str	r7, [sp, #0]
    50a0:	0033      	movs	r3, r6
    50a2:	9a05      	ldr	r2, [sp, #20]
    50a4:	9904      	ldr	r1, [sp, #16]
    50a6:	0028      	movs	r0, r5
    50a8:	f7ff ffc0 	bl	502c <bt_gatt_attr_read>
				 strlen(gap_name));
}
    50ac:	b007      	add	sp, #28
    50ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50b0:	0001009f 	.word	0x0001009f

000050b4 <bt_gatt_attr_read_service>:
}

ssize_t bt_gatt_attr_read_service(struct bt_conn *conn,
				  const struct bt_gatt_attr *attr,
				  void *buf, u16_t len, u16_t offset)
{
    50b4:	b570      	push	{r4, r5, r6, lr}
    50b6:	b086      	sub	sp, #24
    50b8:	ac0a      	add	r4, sp, #40	; 0x28
    50ba:	8825      	ldrh	r5, [r4, #0]
	struct bt_uuid *uuid = attr->user_data;
    50bc:	68cc      	ldr	r4, [r1, #12]

	if (uuid->type == BT_UUID_TYPE_16) {
    50be:	7826      	ldrb	r6, [r4, #0]
    50c0:	2e00      	cmp	r6, #0
    50c2:	d107      	bne.n	50d4 <bt_gatt_attr_read_service+0x20>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    50c4:	8864      	ldrh	r4, [r4, #2]
    50c6:	3616      	adds	r6, #22
    50c8:	446e      	add	r6, sp
    50ca:	8034      	strh	r4, [r6, #0]

		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    50cc:	2402      	movs	r4, #2
    50ce:	9601      	str	r6, [sp, #4]
    50d0:	9402      	str	r4, [sp, #8]
    50d2:	e003      	b.n	50dc <bt_gatt_attr_read_service+0x28>
					 &uuid16, 2);
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    50d4:	2610      	movs	r6, #16
				 BT_UUID_128(uuid)->val, 16);
    50d6:	3401      	adds	r4, #1

		return bt_gatt_attr_read(conn, attr, buf, len, offset,
					 &uuid16, 2);
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    50d8:	9602      	str	r6, [sp, #8]
    50da:	9401      	str	r4, [sp, #4]
    50dc:	9500      	str	r5, [sp, #0]
    50de:	f7ff ffa5 	bl	502c <bt_gatt_attr_read>
				 BT_UUID_128(uuid)->val, 16);
}
    50e2:	b006      	add	sp, #24
    50e4:	bd70      	pop	{r4, r5, r6, pc}

000050e6 <bt_gatt_attr_read_ccc>:
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    50e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    50e8:	0006      	movs	r6, r0
    50ea:	000f      	movs	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    50ec:	2400      	movs	r4, #0
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    50ee:	b08b      	sub	sp, #44	; 0x2c
    50f0:	9306      	str	r3, [sp, #24]
    50f2:	ab10      	add	r3, sp, #64	; 0x40
    50f4:	881b      	ldrh	r3, [r3, #0]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    50f6:	68cd      	ldr	r5, [r1, #12]
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    50f8:	9205      	str	r2, [sp, #20]
    50fa:	9307      	str	r3, [sp, #28]
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    50fc:	686b      	ldr	r3, [r5, #4]
    50fe:	429c      	cmp	r4, r3
    5100:	d216      	bcs.n	5130 <bt_gatt_attr_read_ccc+0x4a>
    5102:	230a      	movs	r3, #10
    5104:	4363      	muls	r3, r4
    5106:	9304      	str	r3, [sp, #16]
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5108:	9a04      	ldr	r2, [sp, #16]
    510a:	682b      	ldr	r3, [r5, #0]
    510c:	0030      	movs	r0, r6
    510e:	1899      	adds	r1, r3, r2
    5110:	3101      	adds	r1, #1
    5112:	f7fe fa21 	bl	3558 <bt_conn_addr_le_cmp>
    5116:	2800      	cmp	r0, #0
    5118:	d001      	beq.n	511e <bt_gatt_attr_read_ccc+0x38>
{
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    511a:	3401      	adds	r4, #1
    511c:	e7ee      	b.n	50fc <bt_gatt_attr_read_ccc+0x16>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
			continue;
		}

		value = sys_cpu_to_le16(ccc->cfg[i].value);
    511e:	682a      	ldr	r2, [r5, #0]
    5120:	9b04      	ldr	r3, [sp, #16]
    5122:	4694      	mov	ip, r2
    5124:	4463      	add	r3, ip
    5126:	891a      	ldrh	r2, [r3, #8]
    5128:	2316      	movs	r3, #22
    512a:	a904      	add	r1, sp, #16
    512c:	185b      	adds	r3, r3, r1
    512e:	801a      	strh	r2, [r3, #0]
    5130:	2316      	movs	r3, #22
		break;
	}

	/* Default to disable if there is no cfg for the peer */
	if (i == ccc->cfg_len) {
    5132:	686a      	ldr	r2, [r5, #4]
    5134:	a904      	add	r1, sp, #16
    5136:	185b      	adds	r3, r3, r1
    5138:	4294      	cmp	r4, r2
    513a:	d101      	bne.n	5140 <bt_gatt_attr_read_ccc+0x5a>
		value = 0x0000;
    513c:	2200      	movs	r2, #0
    513e:	801a      	strh	r2, [r3, #0]
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    5140:	2202      	movs	r2, #2
    5142:	9301      	str	r3, [sp, #4]
    5144:	9b07      	ldr	r3, [sp, #28]
    5146:	9202      	str	r2, [sp, #8]
    5148:	9300      	str	r3, [sp, #0]
    514a:	9a05      	ldr	r2, [sp, #20]
    514c:	9b06      	ldr	r3, [sp, #24]
    514e:	0039      	movs	r1, r7
    5150:	0030      	movs	r0, r6
    5152:	f7ff ff6b 	bl	502c <bt_gatt_attr_read>
				 sizeof(value));
}
    5156:	b00b      	add	sp, #44	; 0x2c
    5158:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000515c <bt_gatt_foreach_attr>:
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
}

void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
    515c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    515e:	9301      	str	r3, [sp, #4]
    5160:	4b12      	ldr	r3, [pc, #72]	; (51ac <bt_gatt_foreach_attr+0x50>)
    5162:	0006      	movs	r6, r0
    5164:	681b      	ldr	r3, [r3, #0]
    5166:	000f      	movs	r7, r1
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5168:	001c      	movs	r4, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
}

void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
    516a:	9200      	str	r2, [sp, #0]
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    516c:	3c08      	subs	r4, #8
    516e:	2b00      	cmp	r3, #0
    5170:	d01b      	beq.n	51aa <bt_gatt_foreach_attr+0x4e>
    5172:	2c00      	cmp	r4, #0
    5174:	d019      	beq.n	51aa <bt_gatt_foreach_attr+0x4e>
    5176:	2500      	movs	r5, #0
		int i;

		for (i = 0; i < svc->attr_count; i++) {
    5178:	88a3      	ldrh	r3, [r4, #4]
    517a:	429d      	cmp	r5, r3
    517c:	da10      	bge.n	51a0 <bt_gatt_foreach_attr+0x44>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    517e:	2014      	movs	r0, #20
    5180:	4368      	muls	r0, r5
    5182:	6823      	ldr	r3, [r4, #0]
    5184:	1818      	adds	r0, r3, r0

			/* Check if attribute handle is within range */
			if (attr->handle < start_handle ||
    5186:	8a03      	ldrh	r3, [r0, #16]
    5188:	42b3      	cmp	r3, r6
    518a:	d201      	bcs.n	5190 <bt_gatt_foreach_attr+0x34>
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
		int i;

		for (i = 0; i < svc->attr_count; i++) {
    518c:	3501      	adds	r5, #1
    518e:	e7f3      	b.n	5178 <bt_gatt_foreach_attr+0x1c>
			struct bt_gatt_attr *attr = &svc->attrs[i];

			/* Check if attribute handle is within range */
			if (attr->handle < start_handle ||
    5190:	42bb      	cmp	r3, r7
    5192:	d8fb      	bhi.n	518c <bt_gatt_foreach_attr+0x30>
			    attr->handle > end_handle) {
				continue;
			}

			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    5194:	9901      	ldr	r1, [sp, #4]
    5196:	9b00      	ldr	r3, [sp, #0]
    5198:	4798      	blx	r3
    519a:	2800      	cmp	r0, #0
    519c:	d1f6      	bne.n	518c <bt_gatt_foreach_attr+0x30>
    519e:	e004      	b.n	51aa <bt_gatt_foreach_attr+0x4e>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    51a0:	68a4      	ldr	r4, [r4, #8]
void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    51a2:	2c00      	cmp	r4, #0
    51a4:	d001      	beq.n	51aa <bt_gatt_foreach_attr+0x4e>
    51a6:	3c08      	subs	r4, #8
    51a8:	e7e3      	b.n	5172 <bt_gatt_foreach_attr+0x16>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
				return;
			}
		}
	}
}
    51aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    51ac:	20000b6c 	.word	0x20000b6c

000051b0 <bt_gatt_indicate.part.7>:
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);

	return nfy.err;
}

int bt_gatt_indicate(struct bt_conn *conn,
    51b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if (conn) {
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
    51b2:	2339      	movs	r3, #57	; 0x39
	nfy.type = BT_GATT_CCC_INDICATE;
    51b4:	466a      	mov	r2, sp

	if (conn) {
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
    51b6:	425b      	negs	r3, r3
    51b8:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    51ba:	333b      	adds	r3, #59	; 0x3b
    51bc:	8093      	strh	r3, [r2, #4]
	nfy.params = params;

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    51be:	6943      	ldr	r3, [r0, #20]
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
	nfy.type = BT_GATT_CCC_INDICATE;
	nfy.params = params;
    51c0:	9005      	str	r0, [sp, #20]

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    51c2:	8a18      	ldrh	r0, [r3, #16]
    51c4:	4a03      	ldr	r2, [pc, #12]	; (51d4 <bt_gatt_indicate.part.7+0x24>)
    51c6:	466b      	mov	r3, sp
    51c8:	4903      	ldr	r1, [pc, #12]	; (51d8 <bt_gatt_indicate.part.7+0x28>)
    51ca:	f7ff ffc7 	bl	515c <bt_gatt_foreach_attr>

	return nfy.err;
}
    51ce:	9800      	ldr	r0, [sp, #0]
    51d0:	b007      	add	sp, #28
    51d2:	bd00      	pop	{pc}
    51d4:	00004ead 	.word	0x00004ead
    51d8:	0000ffff 	.word	0x0000ffff

000051dc <sc_indicate.isra.8>:
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
}

static void sc_indicate(struct bt_gatt_attr *start, struct bt_gatt_attr *end)
    51dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
{
	static struct bt_gatt_indicate_params params;
	u16_t sc_range[2];

	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
    51de:	4c12      	ldr	r4, [pc, #72]	; (5228 <sc_indicate.isra.8+0x4c>)
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
}

static void sc_indicate(struct bt_gatt_attr *start, struct bt_gatt_attr *end)
    51e0:	0006      	movs	r6, r0
    51e2:	000d      	movs	r5, r1
{
	static struct bt_gatt_indicate_params params;
	u16_t sc_range[2];

	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
    51e4:	0020      	movs	r0, r4
    51e6:	2100      	movs	r1, #0
    51e8:	f00a fb5e 	bl	f8a8 <k_sem_take>
    51ec:	2800      	cmp	r0, #0
    51ee:	d004      	beq.n	51fa <sc_indicate.isra.8+0x1e>
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
    51f0:	2101      	movs	r1, #1
    51f2:	0020      	movs	r0, r4
    51f4:	4249      	negs	r1, r1
    51f6:	f00a fb57 	bl	f8a8 <k_sem_take>
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
    51fa:	8832      	ldrh	r2, [r6, #0]
    51fc:	ab01      	add	r3, sp, #4
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    51fe:	480b      	ldr	r0, [pc, #44]	; (522c <sc_indicate.isra.8+0x50>)
	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
    5200:	801a      	strh	r2, [r3, #0]
	sc_range[1] = sys_cpu_to_le16(end->handle);
    5202:	882a      	ldrh	r2, [r5, #0]

	params.attr = &gatt_attrs[2];
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
    5204:	61c3      	str	r3, [r0, #28]
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);
    5206:	805a      	strh	r2, [r3, #2]

	params.attr = &gatt_attrs[2];
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);
    5208:	2304      	movs	r3, #4
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    520a:	4a09      	ldr	r2, [pc, #36]	; (5230 <sc_indicate.isra.8+0x54>)
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);
    520c:	8403      	strh	r3, [r0, #32]
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    520e:	3228      	adds	r2, #40	; 0x28
    5210:	6142      	str	r2, [r0, #20]
	params.func = sc_indicate_rsp;
    5212:	4a08      	ldr	r2, [pc, #32]	; (5234 <sc_indicate.isra.8+0x58>)
    5214:	6182      	str	r2, [r0, #24]
    5216:	f7ff ffcb 	bl	51b0 <bt_gatt_indicate.part.7>
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);

	if (!bt_gatt_indicate(NULL, &params)) {
    521a:	2800      	cmp	r0, #0
    521c:	d002      	beq.n	5224 <sc_indicate.isra.8+0x48>
		return;
	}

	k_sem_give(&sc_sem);
    521e:	0020      	movs	r0, r4
    5220:	f00a fb06 	bl	f830 <k_sem_give>
}
    5224:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	20000518 	.word	0x20000518
    522c:	20000b48 	.word	0x20000b48
    5230:	20000418 	.word	0x20000418
    5234:	00004c41 	.word	0x00004c41

00005238 <bt_gatt_service_register>:

int bt_gatt_service_register(struct bt_gatt_service *svc)
{
    5238:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    523a:	6803      	ldr	r3, [r0, #0]
    523c:	2400      	movs	r4, #0

	k_sem_give(&sc_sem);
}

int bt_gatt_service_register(struct bt_gatt_service *svc)
{
    523e:	0005      	movs	r5, r0
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    5240:	6818      	ldr	r0, [r3, #0]
    5242:	466b      	mov	r3, sp
    5244:	701c      	strb	r4, [r3, #0]
    5246:	23c0      	movs	r3, #192	; 0xc0
    5248:	466a      	mov	r2, sp
    524a:	015b      	lsls	r3, r3, #5
    524c:	4669      	mov	r1, sp
    524e:	8053      	strh	r3, [r2, #2]
    5250:	f7fc fbf0 	bl	1a34 <bt_uuid_cmp>
    5254:	42a0      	cmp	r0, r4
    5256:	d102      	bne.n	525e <bt_gatt_service_register+0x26>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
		return -EALREADY;
    5258:	2345      	movs	r3, #69	; 0x45
    525a:	425b      	negs	r3, r3
    525c:	e018      	b.n	5290 <bt_gatt_service_register+0x58>
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    525e:	682b      	ldr	r3, [r5, #0]
    5260:	a901      	add	r1, sp, #4
    5262:	6818      	ldr	r0, [r3, #0]
    5264:	4b0b      	ldr	r3, [pc, #44]	; (5294 <bt_gatt_service_register+0x5c>)
    5266:	700c      	strb	r4, [r1, #0]
    5268:	804b      	strh	r3, [r1, #2]
    526a:	f7fc fbe3 	bl	1a34 <bt_uuid_cmp>
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    526e:	2800      	cmp	r0, #0
    5270:	d0f2      	beq.n	5258 <bt_gatt_service_register+0x20>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
		return -EALREADY;
	}

	err = gatt_register(svc);
    5272:	0028      	movs	r0, r5
    5274:	f7ff fd76 	bl	4d64 <gatt_register>
    5278:	1e03      	subs	r3, r0, #0
	if (err < 0) {
    527a:	db09      	blt.n	5290 <bt_gatt_service_register+0x58>
    527c:	2314      	movs	r3, #20
    527e:	88a9      	ldrh	r1, [r5, #4]
		return err;
	}

	sc_indicate(&svc->attrs[0], &svc->attrs[svc->attr_count - 1]);
    5280:	6828      	ldr	r0, [r5, #0]
    5282:	4359      	muls	r1, r3
    5284:	1841      	adds	r1, r0, r1
    5286:	3904      	subs	r1, #4
    5288:	3010      	adds	r0, #16
    528a:	f7ff ffa7 	bl	51dc <sc_indicate.isra.8>

	return 0;
    528e:	0023      	movs	r3, r4
}
    5290:	0018      	movs	r0, r3
    5292:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    5294:	00001801 	.word	0x00001801

00005298 <bt_gatt_attr_next>:
	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
	struct bt_gatt_attr *next = NULL;
    5298:	2300      	movs	r3, #0

	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
    529a:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
    529c:	9301      	str	r3, [sp, #4]

	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    529e:	8a00      	ldrh	r0, [r0, #16]
    52a0:	ab01      	add	r3, sp, #4
    52a2:	3001      	adds	r0, #1
    52a4:	b280      	uxth	r0, r0
    52a6:	0001      	movs	r1, r0
    52a8:	4a02      	ldr	r2, [pc, #8]	; (52b4 <bt_gatt_attr_next+0x1c>)
    52aa:	f7ff ff57 	bl	515c <bt_gatt_foreach_attr>
			     &next);

	return next;
}
    52ae:	9801      	ldr	r0, [sp, #4]
    52b0:	bd0e      	pop	{r1, r2, r3, pc}
    52b2:	46c0      	nop			; (mov r8, r8)
    52b4:	00004bf7 	.word	0x00004bf7

000052b8 <bt_gatt_attr_read_chrc>:
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    52b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ba:	b08f      	sub	sp, #60	; 0x3c
    52bc:	9306      	str	r3, [sp, #24]
    52be:	ab14      	add	r3, sp, #80	; 0x50
    52c0:	881b      	ldrh	r3, [r3, #0]
	struct bt_gatt_chrc *chrc = attr->user_data;
    52c2:	68cd      	ldr	r5, [r1, #12]
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    52c4:	9005      	str	r0, [sp, #20]
    52c6:	9307      	str	r3, [sp, #28]
	struct bt_gatt_chrc *chrc = attr->user_data;
	struct gatt_chrc pdu;
	const struct bt_gatt_attr *next;
	u8_t value_len;

	pdu.properties = chrc->properties;
    52c8:	792b      	ldrb	r3, [r5, #4]
    52ca:	ae09      	add	r6, sp, #36	; 0x24
	 * The Characteristic Value declaration contains the value of the
	 * characteristic. It is the first Attribute after the characteristic
	 * declaration. All characteristic definitions shall have a
	 * Characteristic Value declaration.
	 */
	next = bt_gatt_attr_next(attr);
    52cc:	0008      	movs	r0, r1
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    52ce:	0017      	movs	r7, r2
	struct bt_gatt_chrc *chrc = attr->user_data;
	struct gatt_chrc pdu;
	const struct bt_gatt_attr *next;
	u8_t value_len;

	pdu.properties = chrc->properties;
    52d0:	7033      	strb	r3, [r6, #0]
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    52d2:	000c      	movs	r4, r1
	 * The Characteristic Value declaration contains the value of the
	 * characteristic. It is the first Attribute after the characteristic
	 * declaration. All characteristic definitions shall have a
	 * Characteristic Value declaration.
	 */
	next = bt_gatt_attr_next(attr);
    52d4:	f7ff ffe0 	bl	5298 <bt_gatt_attr_next>
    52d8:	2315      	movs	r3, #21
    52da:	aa04      	add	r2, sp, #16
    52dc:	189b      	adds	r3, r3, r2
	if (!next) {
    52de:	2800      	cmp	r0, #0
    52e0:	d102      	bne.n	52e8 <bt_gatt_attr_read_chrc+0x30>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
		pdu.value_handle = 0x0000;
    52e2:	7018      	strb	r0, [r3, #0]
    52e4:	7058      	strb	r0, [r3, #1]
    52e6:	e003      	b.n	52f0 <bt_gatt_attr_read_chrc+0x38>
	} else {
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    52e8:	7c02      	ldrb	r2, [r0, #16]
    52ea:	701a      	strb	r2, [r3, #0]
    52ec:	7c42      	ldrb	r2, [r0, #17]
    52ee:	705a      	strb	r2, [r3, #1]
    52f0:	2017      	movs	r0, #23
	}
	value_len = sizeof(pdu.properties) + sizeof(pdu.value_handle);

	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    52f2:	6829      	ldr	r1, [r5, #0]
    52f4:	aa04      	add	r2, sp, #16
    52f6:	780b      	ldrb	r3, [r1, #0]
    52f8:	1880      	adds	r0, r0, r2
    52fa:	2b00      	cmp	r3, #0
    52fc:	d105      	bne.n	530a <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    52fe:	884b      	ldrh	r3, [r1, #2]
    5300:	7003      	strb	r3, [r0, #0]
    5302:	0a1b      	lsrs	r3, r3, #8
    5304:	7043      	strb	r3, [r0, #1]
		value_len += 2;
    5306:	2305      	movs	r3, #5
    5308:	e004      	b.n	5314 <bt_gatt_attr_read_chrc+0x5c>
	} else {
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    530a:	3101      	adds	r1, #1
    530c:	2210      	movs	r2, #16
    530e:	f7fb fcc2 	bl	c96 <memcpy>
		value_len += 16;
    5312:	2313      	movs	r3, #19
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    5314:	9302      	str	r3, [sp, #8]
    5316:	9b07      	ldr	r3, [sp, #28]
    5318:	9601      	str	r6, [sp, #4]
    531a:	9300      	str	r3, [sp, #0]
    531c:	003a      	movs	r2, r7
    531e:	9b06      	ldr	r3, [sp, #24]
    5320:	0021      	movs	r1, r4
    5322:	9805      	ldr	r0, [sp, #20]
    5324:	f7ff fe82 	bl	502c <bt_gatt_attr_read>
}
    5328:	b00f      	add	sp, #60	; 0x3c
    532a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000532c <bt_gatt_notify>:
	return BT_GATT_ITER_CONTINUE;
}

int bt_gatt_notify(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		   const void *data, u16_t len)
{
    532c:	b510      	push	{r4, lr}
    532e:	b086      	sub	sp, #24
    5330:	8a0c      	ldrh	r4, [r1, #16]
	struct notify_data nfy;

	__ASSERT(attr && attr->handle, "invalid parameters\n");

	if (conn) {
    5332:	2800      	cmp	r0, #0
    5334:	d003      	beq.n	533e <bt_gatt_notify+0x12>
		return gatt_notify(conn, attr->handle, data, len);
    5336:	0021      	movs	r1, r4
    5338:	f7ff fd50 	bl	4ddc <gatt_notify>
    533c:	e00f      	b.n	535e <bt_gatt_notify+0x32>
	}

	nfy.err = -ENOTCONN;
    533e:	2039      	movs	r0, #57	; 0x39
    5340:	4240      	negs	r0, r0
    5342:	9000      	str	r0, [sp, #0]
	nfy.attr = attr;
    5344:	9102      	str	r1, [sp, #8]
	nfy.type = BT_GATT_CCC_NOTIFY;
    5346:	4668      	mov	r0, sp
    5348:	2101      	movs	r1, #1
	nfy.data = data;
	nfy.len = len;
    534a:	8203      	strh	r3, [r0, #16]
		return gatt_notify(conn, attr->handle, data, len);
	}

	nfy.err = -ENOTCONN;
	nfy.attr = attr;
	nfy.type = BT_GATT_CCC_NOTIFY;
    534c:	8081      	strh	r1, [r0, #4]
	nfy.data = data;
    534e:	9203      	str	r2, [sp, #12]
	nfy.len = len;

	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    5350:	0020      	movs	r0, r4
    5352:	466b      	mov	r3, sp
    5354:	4a03      	ldr	r2, [pc, #12]	; (5364 <bt_gatt_notify+0x38>)
    5356:	4904      	ldr	r1, [pc, #16]	; (5368 <bt_gatt_notify+0x3c>)
    5358:	f7ff ff00 	bl	515c <bt_gatt_foreach_attr>

	return nfy.err;
    535c:	9800      	ldr	r0, [sp, #0]
}
    535e:	b006      	add	sp, #24
    5360:	bd10      	pop	{r4, pc}
    5362:	46c0      	nop			; (mov r8, r8)
    5364:	00004ead 	.word	0x00004ead
    5368:	0000ffff 	.word	0x0000ffff

0000536c <bt_gatt_connected>:
}

#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    536c:	b510      	push	{r4, lr}
    536e:	0003      	movs	r3, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    5370:	4a02      	ldr	r2, [pc, #8]	; (537c <bt_gatt_connected+0x10>)
    5372:	4903      	ldr	r1, [pc, #12]	; (5380 <bt_gatt_connected+0x14>)
    5374:	2001      	movs	r0, #1
    5376:	f7ff fef1 	bl	515c <bt_gatt_foreach_attr>
#if defined(CONFIG_BLUETOOTH_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */
}
    537a:	bd10      	pop	{r4, pc}
    537c:	00004d15 	.word	0x00004d15
    5380:	0000ffff 	.word	0x0000ffff

00005384 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    5384:	b510      	push	{r4, lr}
    5386:	0003      	movs	r3, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    5388:	4a02      	ldr	r2, [pc, #8]	; (5394 <bt_gatt_disconnected+0x10>)
    538a:	4903      	ldr	r1, [pc, #12]	; (5398 <bt_gatt_disconnected+0x14>)
    538c:	2001      	movs	r0, #1
    538e:	f7ff fee5 	bl	515c <bt_gatt_foreach_attr>

#if defined(CONFIG_BLUETOOTH_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */
}
    5392:	bd10      	pop	{r4, pc}
    5394:	00004f65 	.word	0x00004f65
    5398:	0000ffff 	.word	0x0000ffff

0000539c <bt_smp_accept>:
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    539c:	200c      	movs	r0, #12
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    539e:	4b05      	ldr	r3, [pc, #20]	; (53b4 <bt_smp_accept+0x18>)
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    53a0:	4240      	negs	r0, r0
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    53a2:	681a      	ldr	r2, [r3, #0]
    53a4:	2a00      	cmp	r2, #0
    53a6:	d103      	bne.n	53b0 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.ops = &ops;
    53a8:	4803      	ldr	r0, [pc, #12]	; (53b8 <bt_smp_accept+0x1c>)
    53aa:	6058      	str	r0, [r3, #4]

		*chan = &smp->chan;

		return 0;
    53ac:	0010      	movs	r0, r2
			continue;
		}

		smp->chan.ops = &ops;

		*chan = &smp->chan;
    53ae:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    53b0:	4770      	bx	lr
    53b2:	46c0      	nop			; (mov r8, r8)
    53b4:	20000b80 	.word	0x20000b80
    53b8:	20000564 	.word	0x20000564

000053bc <bt_smp_recv>:
	 * a Pairing Failed command with the reason set to "Pairing Not
	 * Supported" when any command is received.
	 * Core Specification Vol. 3, Part H, 3.3
	 */

	buf = bt_l2cap_create_pdu(NULL, 0);
    53bc:	2100      	movs	r1, #0
{
	return -ENOTSUP;
}

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    53be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->conn;
    53c0:	6807      	ldr	r7, [r0, #0]
	 * a Pairing Failed command with the reason set to "Pairing Not
	 * Supported" when any command is received.
	 * Core Specification Vol. 3, Part H, 3.3
	 */

	buf = bt_l2cap_create_pdu(NULL, 0);
    53c2:	0008      	movs	r0, r1
    53c4:	f7fe fb1b 	bl	39fe <bt_l2cap_create_pdu>
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
    53c8:	0006      	movs	r6, r0
    53ca:	3608      	adds	r6, #8
	 * a Pairing Failed command with the reason set to "Pairing Not
	 * Supported" when any command is received.
	 * Core Specification Vol. 3, Part H, 3.3
	 */

	buf = bt_l2cap_create_pdu(NULL, 0);
    53cc:	0004      	movs	r4, r0
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
    53ce:	2101      	movs	r1, #1
    53d0:	0030      	movs	r0, r6
    53d2:	f009 f897 	bl	e504 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    53d6:	2505      	movs	r5, #5

	rsp = net_buf_add(buf, sizeof(*rsp));
    53d8:	2101      	movs	r1, #1

	buf = bt_l2cap_create_pdu(NULL, 0);
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
    53da:	7005      	strb	r5, [r0, #0]

	rsp = net_buf_add(buf, sizeof(*rsp));
    53dc:	0030      	movs	r0, r6
    53de:	f009 f891 	bl	e504 <net_buf_simple_add>
    53e2:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
    53e4:	7005      	strb	r5, [r0, #0]
    53e6:	0022      	movs	r2, r4
    53e8:	0038      	movs	r0, r7
    53ea:	2106      	movs	r1, #6
    53ec:	f7fe fb0c 	bl	3a08 <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf);
}
    53f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000053f2 <bt_smp_sign_verify>:
    53f2:	2023      	movs	r0, #35	; 0x23
    53f4:	4240      	negs	r0, r0
    53f6:	4770      	bx	lr

000053f8 <bt_smp_init>:

	return -ENOMEM;
}

int bt_smp_init(void)
{
    53f8:	b510      	push	{r4, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_SMP,
		.accept	= bt_smp_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    53fa:	4802      	ldr	r0, [pc, #8]	; (5404 <bt_smp_init+0xc>)
    53fc:	f7fe fa56 	bl	38ac <bt_l2cap_le_fixed_chan_register>

	return 0;
}
    5400:	2000      	movs	r0, #0
    5402:	bd10      	pop	{r4, pc}
    5404:	20000558 	.word	0x20000558

00005408 <evt_create>:
static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    5408:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    540a:	3008      	adds	r0, #8
static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    540c:	000d      	movs	r5, r1
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    540e:	2102      	movs	r1, #2
static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    5410:	0014      	movs	r4, r2
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    5412:	f009 f877 	bl	e504 <net_buf_simple_add>
	hdr->evt = evt;
    5416:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    5418:	7044      	strb	r4, [r0, #1]
}
    541a:	bd70      	pop	{r4, r5, r6, pc}

0000541c <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BLUETOOTH_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    541c:	b570      	push	{r4, r5, r6, lr}
    541e:	0005      	movs	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    5420:	2001      	movs	r0, #1
    5422:	4240      	negs	r0, r0
    5424:	f7fd fdc4 	bl	2fb0 <bt_buf_get_cmd_complete>
    5428:	0004      	movs	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    542a:	2204      	movs	r2, #4
    542c:	210f      	movs	r1, #15
    542e:	f7ff ffeb 	bl	5408 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    5432:	0020      	movs	r0, r4
    5434:	2104      	movs	r1, #4
    5436:	3008      	adds	r0, #8
    5438:	f009 f864 	bl	e504 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    543c:	2301      	movs	r3, #1
    543e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    5440:	4b03      	ldr	r3, [pc, #12]	; (5450 <cmd_status+0x34>)

	buf = bt_buf_get_cmd_complete(K_FOREVER);
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
    5442:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
	cs->opcode = sys_cpu_to_le16(_opcode);
    5444:	781a      	ldrb	r2, [r3, #0]
    5446:	785b      	ldrb	r3, [r3, #1]
    5448:	7082      	strb	r2, [r0, #2]
    544a:	70c3      	strb	r3, [r0, #3]

	return buf;
}
    544c:	0020      	movs	r0, r4
    544e:	bd70      	pop	{r4, r5, r6, pc}
    5450:	20000c10 	.word	0x20000c10

00005454 <cmd_complete>:
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    5454:	b570      	push	{r4, r5, r6, lr}
    5456:	0004      	movs	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    5458:	2001      	movs	r0, #1
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    545a:	000d      	movs	r5, r1
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    545c:	4240      	negs	r0, r0
    545e:	f7fd fda7 	bl	2fb0 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    5462:	1cea      	adds	r2, r5, #3

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    5464:	6020      	str	r0, [r4, #0]

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    5466:	b2d2      	uxtb	r2, r2
    5468:	210e      	movs	r1, #14
    546a:	f7ff ffcd 	bl	5408 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    546e:	6820      	ldr	r0, [r4, #0]
    5470:	2103      	movs	r1, #3
    5472:	3008      	adds	r0, #8
    5474:	f009 f846 	bl	e504 <net_buf_simple_add>
	cc->ncmd = 1;
    5478:	2301      	movs	r3, #1
    547a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    547c:	4b05      	ldr	r3, [pc, #20]	; (5494 <cmd_complete+0x40>)

	return net_buf_add(*buf, plen);
    547e:	0029      	movs	r1, r5

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);

	cc = net_buf_add(*buf, sizeof(*cc));
	cc->ncmd = 1;
	cc->opcode = sys_cpu_to_le16(_opcode);
    5480:	781a      	ldrb	r2, [r3, #0]
    5482:	785b      	ldrb	r3, [r3, #1]
    5484:	7042      	strb	r2, [r0, #1]
    5486:	7083      	strb	r3, [r0, #2]

	return net_buf_add(*buf, plen);
    5488:	6820      	ldr	r0, [r4, #0]
    548a:	3008      	adds	r0, #8
    548c:	f009 f83a 	bl	e504 <net_buf_simple_add>
}
    5490:	bd70      	pop	{r4, r5, r6, pc}
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	20000c10 	.word	0x20000c10

00005498 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    5498:	b570      	push	{r4, r5, r6, lr}
    549a:	0004      	movs	r4, r0
    549c:	0015      	movs	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    549e:	3201      	adds	r2, #1
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    54a0:	000e      	movs	r6, r1
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    54a2:	b2d2      	uxtb	r2, r2
	me = net_buf_add(buf, sizeof(*me));
    54a4:	3408      	adds	r4, #8

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    54a6:	213e      	movs	r1, #62	; 0x3e
    54a8:	f7ff ffae 	bl	5408 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    54ac:	2101      	movs	r1, #1
    54ae:	0020      	movs	r0, r4
    54b0:	f009 f828 	bl	e504 <net_buf_simple_add>
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    54b4:	0029      	movs	r1, r5
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    54b6:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    54b8:	0020      	movs	r0, r4
    54ba:	f009 f823 	bl	e504 <net_buf_simple_add>
}
    54be:	bd70      	pop	{r4, r5, r6, pc}

000054c0 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    54c0:	4b0c      	ldr	r3, [pc, #48]	; (54f4 <encrypt_change+0x34>)
	       sizeof(u16_t));
}

static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
    54c2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    54c4:	681b      	ldr	r3, [r3, #0]
	       sizeof(u16_t));
}

static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
    54c6:	0004      	movs	r4, r0
    54c8:	000d      	movs	r5, r1
    54ca:	0016      	movs	r6, r2
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    54cc:	061b      	lsls	r3, r3, #24
    54ce:	d510      	bpl.n	54f2 <encrypt_change+0x32>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    54d0:	2204      	movs	r2, #4
    54d2:	2108      	movs	r1, #8
    54d4:	0030      	movs	r0, r6
    54d6:	f7ff ff97 	bl	5408 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    54da:	0030      	movs	r0, r6
    54dc:	2104      	movs	r1, #4
    54de:	3008      	adds	r0, #8
    54e0:	f009 f810 	bl	e504 <net_buf_simple_add>

	ep->status = err;
    54e4:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    54e6:	4263      	negs	r3, r4
    54e8:	4163      	adcs	r3, r4

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
    54ea:	7045      	strb	r5, [r0, #1]
    54ec:	0a2d      	lsrs	r5, r5, #8
    54ee:	7085      	strb	r5, [r0, #2]
	ep->encrypt = !err ? 1 : 0;
    54f0:	70c3      	strb	r3, [r0, #3]
}
    54f2:	bd70      	pop	{r4, r5, r6, pc}
    54f4:	20000578 	.word	0x20000578

000054f8 <le_remote_feat_complete>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    54f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54fa:	0014      	movs	r4, r2
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    54fc:	4a10      	ldr	r2, [pc, #64]	; (5540 <le_remote_feat_complete+0x48>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    54fe:	0007      	movs	r7, r0
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5500:	6852      	ldr	r2, [r2, #4]
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    5502:	000e      	movs	r6, r1
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5504:	0092      	lsls	r2, r2, #2
    5506:	d519      	bpl.n	553c <le_remote_feat_complete+0x44>
    5508:	2508      	movs	r5, #8
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    550a:	4a0e      	ldr	r2, [pc, #56]	; (5544 <le_remote_feat_complete+0x4c>)
static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    550c:	6812      	ldr	r2, [r2, #0]
    550e:	422a      	tst	r2, r5
    5510:	d014      	beq.n	553c <le_remote_feat_complete+0x44>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    5512:	220b      	movs	r2, #11
    5514:	2104      	movs	r1, #4
    5516:	0018      	movs	r0, r3
    5518:	f7ff ffbe 	bl	5498 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
    551c:	7044      	strb	r4, [r0, #1]
    551e:	40ec      	lsrs	r4, r5
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
    5520:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    5522:	7084      	strb	r4, [r0, #2]
    5524:	3003      	adds	r0, #3
	if (!status) {
    5526:	2f00      	cmp	r7, #0
    5528:	d104      	bne.n	5534 <le_remote_feat_complete+0x3c>
		memcpy(&sep->features[0],
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
    552a:	1d31      	adds	r1, r6, #4
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    552c:	002a      	movs	r2, r5
    552e:	f7fb fbb2 	bl	c96 <memcpy>
    5532:	e003      	b.n	553c <le_remote_feat_complete+0x44>
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    5534:	002a      	movs	r2, r5
    5536:	2100      	movs	r1, #0
    5538:	f7fb fbd7 	bl	cea <memset>
	}
}
    553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    553e:	46c0      	nop			; (mov r8, r8)
    5540:	20000578 	.word	0x20000578
    5544:	20000580 	.word	0x20000580

00005548 <bt_addr_le_to_str.constprop.58>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    5548:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    554a:	7803      	ldrb	r3, [r0, #0]
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    554c:	b088      	sub	sp, #32
    554e:	0004      	movs	r4, r0
    5550:	000e      	movs	r6, r1
    5552:	ad06      	add	r5, sp, #24
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    5554:	2b00      	cmp	r3, #0
    5556:	d003      	beq.n	5560 <bt_addr_le_to_str.constprop.58+0x18>
    5558:	2b01      	cmp	r3, #1
    555a:	d106      	bne.n	556a <bt_addr_le_to_str.constprop.58+0x22>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    555c:	490f      	ldr	r1, [pc, #60]	; (559c <bt_addr_le_to_str.constprop.58+0x54>)
    555e:	e000      	b.n	5562 <bt_addr_le_to_str.constprop.58+0x1a>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    5560:	490f      	ldr	r1, [pc, #60]	; (55a0 <bt_addr_le_to_str.constprop.58+0x58>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    5562:	0028      	movs	r0, r5
    5564:	f7fb fb64 	bl	c30 <strcpy>
    5568:	e004      	b.n	5574 <bt_addr_le_to_str.constprop.58+0x2c>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    556a:	4a0e      	ldr	r2, [pc, #56]	; (55a4 <bt_addr_le_to_str.constprop.58+0x5c>)
    556c:	2107      	movs	r1, #7
    556e:	0028      	movs	r0, r5
    5570:	f7fc f9ee 	bl	1950 <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    5574:	7862      	ldrb	r2, [r4, #1]
    5576:	79a3      	ldrb	r3, [r4, #6]
    5578:	9204      	str	r2, [sp, #16]
    557a:	78a2      	ldrb	r2, [r4, #2]
    557c:	9505      	str	r5, [sp, #20]
    557e:	9203      	str	r2, [sp, #12]
    5580:	78e2      	ldrb	r2, [r4, #3]
    5582:	211b      	movs	r1, #27
    5584:	9202      	str	r2, [sp, #8]
    5586:	7922      	ldrb	r2, [r4, #4]
    5588:	0030      	movs	r0, r6
    558a:	9201      	str	r2, [sp, #4]
    558c:	7962      	ldrb	r2, [r4, #5]
    558e:	9200      	str	r2, [sp, #0]
    5590:	4a05      	ldr	r2, [pc, #20]	; (55a8 <bt_addr_le_to_str.constprop.58+0x60>)
    5592:	f7fc f9dd 	bl	1950 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    5596:	b008      	add	sp, #32
    5598:	bd70      	pop	{r4, r5, r6, pc}
    559a:	46c0      	nop			; (mov r8, r8)
    559c:	00010283 	.word	0x00010283
    55a0:	0001027c 	.word	0x0001027c
    55a4:	0001028a 	.word	0x0001028a
    55a8:	00010291 	.word	0x00010291

000055ac <le_adv_ext_report.isra.53>:
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
		phy, adv->type, adv->len, adv->tx_addr, adv->rx_addr, rssi);

	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    55ac:	220f      	movs	r2, #15
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    55ae:	b510      	push	{r4, lr}
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
		phy, adv->type, adv->len, adv->tx_addr, adv->rx_addr, rssi);

	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    55b0:	7803      	ldrb	r3, [r0, #0]
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    55b2:	b08a      	sub	sp, #40	; 0x28
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
		phy, adv->type, adv->len, adv->tx_addr, adv->rx_addr, rssi);

	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    55b4:	401a      	ands	r2, r3
    55b6:	2a07      	cmp	r2, #7
    55b8:	d116      	bne.n	55e8 <le_adv_ext_report.isra.53+0x3c>
    55ba:	7842      	ldrb	r2, [r0, #1]
    55bc:	2a00      	cmp	r2, #0
    55be:	d013      	beq.n	55e8 <le_adv_ext_report.isra.53+0x3c>
		ptr = (u8_t *)h + sizeof(*h);

		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
			p->ext_hdr_len);

		if (!p->ext_hdr_len) {
    55c0:	7882      	ldrb	r2, [r0, #2]
    55c2:	0692      	lsls	r2, r2, #26
    55c4:	d010      	beq.n	55e8 <le_adv_ext_report.isra.53+0x3c>
			goto no_ext_hdr;
		}

		if (h->adv_addr) {
    55c6:	78c2      	ldrb	r2, [r0, #3]
    55c8:	07d2      	lsls	r2, r2, #31
    55ca:	d50d      	bpl.n	55e8 <le_adv_ext_report.isra.53+0x3c>
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
    55cc:	065b      	lsls	r3, r3, #25
    55ce:	ac01      	add	r4, sp, #4
    55d0:	0fdb      	lsrs	r3, r3, #31
    55d2:	7023      	strb	r3, [r4, #0]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    55d4:	466b      	mov	r3, sp
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
    55d6:	1d01      	adds	r1, r0, #4
		if (h->adv_addr) {
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    55d8:	2206      	movs	r2, #6
    55da:	1d58      	adds	r0, r3, #5
    55dc:	f7fb fb5b 	bl	c96 <memcpy>
			ptr += BDADDR_SIZE;

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    55e0:	a903      	add	r1, sp, #12
    55e2:	0020      	movs	r0, r4
    55e4:	f7ff ffb0 	bl	5548 <bt_addr_le_to_str.constprop.58>
		/* TODO: length check? */
	}

no_ext_hdr:
	return;
}
    55e8:	b00a      	add	sp, #40	; 0x28
    55ea:	bd10      	pop	{r4, pc}

000055ec <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    55ec:	b530      	push	{r4, r5, lr}
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    55ee:	7842      	ldrb	r2, [r0, #1]
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    55f0:	0003      	movs	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    55f2:	7804      	ldrb	r4, [r0, #0]
    55f4:	7880      	ldrb	r0, [r0, #2]
    55f6:	0212      	lsls	r2, r2, #8
    55f8:	4322      	orrs	r2, r4
    55fa:	0400      	lsls	r0, r0, #16
    55fc:	0011      	movs	r1, r2
    55fe:	0002      	movs	r2, r0
    5600:	78d8      	ldrb	r0, [r3, #3]
    5602:	430a      	orrs	r2, r1
    5604:	0600      	lsls	r0, r0, #24
    5606:	4310      	orrs	r0, r2
    5608:	795a      	ldrb	r2, [r3, #5]
    560a:	791d      	ldrb	r5, [r3, #4]
    560c:	7999      	ldrb	r1, [r3, #6]
    560e:	0212      	lsls	r2, r2, #8
    5610:	432a      	orrs	r2, r5
    5612:	0409      	lsls	r1, r1, #16
    5614:	0014      	movs	r4, r2
    5616:	000a      	movs	r2, r1
    5618:	79d9      	ldrb	r1, [r3, #7]
    561a:	4322      	orrs	r2, r4
    561c:	0609      	lsls	r1, r1, #24
    561e:	4311      	orrs	r1, r2
}
    5620:	bd30      	pop	{r4, r5, pc}
	...

00005624 <hci_cmd_handle>:

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    5624:	2300      	movs	r3, #0

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    5626:	b5f0      	push	{r4, r5, r6, r7, lr}
    5628:	b095      	sub	sp, #84	; 0x54
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    562a:	930f      	str	r3, [sp, #60]	; 0x3c

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    562c:	0004      	movs	r4, r0
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
	u16_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    562e:	8980      	ldrh	r0, [r0, #12]
    5630:	2802      	cmp	r0, #2
    5632:	d801      	bhi.n	5638 <hci_cmd_handle+0x14>
		BT_ERR("No HCI Command header");
		return NULL;
    5634:	2000      	movs	r0, #0
    5636:	e35e      	b.n	5cf6 <hci_cmd_handle+0x6d2>
	}

	chdr = (void *)cmd->data;
    5638:	68a3      	ldr	r3, [r4, #8]
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    563a:	4dbc      	ldr	r5, [pc, #752]	; (592c <hci_cmd_handle+0x308>)
    563c:	785a      	ldrb	r2, [r3, #1]
    563e:	7819      	ldrb	r1, [r3, #0]
    5640:	0212      	lsls	r2, r2, #8
    5642:	430a      	orrs	r2, r1
    5644:	802a      	strh	r2, [r5, #0]

	if (cmd->len < chdr->param_len) {
    5646:	789b      	ldrb	r3, [r3, #2]
    5648:	4283      	cmp	r3, r0
    564a:	d8f3      	bhi.n	5634 <hci_cmd_handle+0x10>
		BT_ERR("Invalid HCI CMD packet length");
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));
    564c:	0020      	movs	r0, r4
    564e:	2103      	movs	r1, #3
    5650:	3008      	adds	r0, #8
    5652:	f008 ff78 	bl	e546 <net_buf_simple_pull>

	ocf = BT_OCF(_opcode);
    5656:	882b      	ldrh	r3, [r5, #0]

	switch (BT_OGF(_opcode)) {
    5658:	0a98      	lsrs	r0, r3, #10
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));

	ocf = BT_OCF(_opcode);
    565a:	059d      	lsls	r5, r3, #22

	switch (BT_OGF(_opcode)) {
    565c:	3801      	subs	r0, #1
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));

	ocf = BT_OCF(_opcode);
    565e:	0dad      	lsrs	r5, r5, #22

	switch (BT_OGF(_opcode)) {
    5660:	2807      	cmp	r0, #7
    5662:	d900      	bls.n	5666 <hci_cmd_handle+0x42>
    5664:	e340      	b.n	5ce8 <hci_cmd_handle+0x6c4>
    5666:	f7fa fd9b 	bl	1a0 <__gnu_thumb1_case_uhi>
    566a:	0008      	.short	0x0008
    566c:	001e033f 	.word	0x001e033f
    5670:	033f0045 	.word	0x033f0045
    5674:	033f033f 	.word	0x033f033f
    5678:	00c7      	.short	0x00c7
#endif /* CONFIG_BLUETOOTH_CONN */

static int link_control_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				   struct net_buf **evt)
{
	switch (ocf) {
    567a:	2d06      	cmp	r5, #6
    567c:	d00a      	beq.n	5694 <hci_cmd_handle+0x70>
    567e:	2d1d      	cmp	r5, #29
    5680:	d000      	beq.n	5684 <hci_cmd_handle+0x60>
    5682:	e331      	b.n	5ce8 <hci_cmd_handle+0x6c4>
{
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    5684:	68a2      	ldr	r2, [r4, #8]
    5686:	7850      	ldrb	r0, [r2, #1]
    5688:	7813      	ldrb	r3, [r2, #0]
    568a:	0200      	lsls	r0, r0, #8
	status = ll_version_ind_send(handle);
    568c:	4318      	orrs	r0, r3
    568e:	f007 f9cc 	bl	ca2a <ll_version_ind_send>
    5692:	e2bf      	b.n	5c14 <hci_cmd_handle+0x5f0>
    5694:	68a2      	ldr	r2, [r4, #8]
{
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    5696:	7850      	ldrb	r0, [r2, #1]
    5698:	7813      	ldrb	r3, [r2, #0]
    569a:	0200      	lsls	r0, r0, #8
	status = ll_terminate_ind_send(handle, cmd->reason);
    569c:	7891      	ldrb	r1, [r2, #2]
    569e:	4318      	orrs	r0, r3
    56a0:	f007 f9d9 	bl	ca56 <ll_terminate_ind_send>
    56a4:	e2b6      	b.n	5c14 <hci_cmd_handle+0x5f0>
#endif

static int ctrl_bb_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			      struct net_buf **evt)
{
	switch (ocf) {
    56a6:	2d03      	cmp	r5, #3
    56a8:	d00c      	beq.n	56c4 <hci_cmd_handle+0xa0>
    56aa:	2d63      	cmp	r5, #99	; 0x63
    56ac:	d01d      	beq.n	56ea <hci_cmd_handle+0xc6>
    56ae:	2d01      	cmp	r5, #1
    56b0:	d000      	beq.n	56b4 <hci_cmd_handle+0x90>
    56b2:	e319      	b.n	5ce8 <hci_cmd_handle+0x6c4>
static void set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	event_mask = sys_get_le64(cmd->events);
    56b4:	68a0      	ldr	r0, [r4, #8]
    56b6:	f7ff ff99 	bl	55ec <sys_get_le64>
    56ba:	4b9d      	ldr	r3, [pc, #628]	; (5930 <hci_cmd_handle+0x30c>)
    56bc:	6018      	str	r0, [r3, #0]
    56be:	6059      	str	r1, [r3, #4]

	ccst = cmd_complete(evt, sizeof(*ccst));
    56c0:	0029      	movs	r1, r5
    56c2:	e300      	b.n	5cc6 <hci_cmd_handle+0x6a2>

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    56c4:	2001      	movs	r0, #1
    56c6:	499b      	ldr	r1, [pc, #620]	; (5934 <hci_cmd_handle+0x310>)
    56c8:	4b99      	ldr	r3, [pc, #612]	; (5930 <hci_cmd_handle+0x30c>)
    56ca:	4240      	negs	r0, r0
    56cc:	6018      	str	r0, [r3, #0]
    56ce:	6059      	str	r1, [r3, #4]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    56d0:	2000      	movs	r0, #0
    56d2:	2100      	movs	r1, #0
    56d4:	4b98      	ldr	r3, [pc, #608]	; (5938 <hci_cmd_handle+0x314>)
    56d6:	6018      	str	r0, [r3, #0]
    56d8:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    56da:	201f      	movs	r0, #31
    56dc:	2100      	movs	r1, #0
    56de:	4b97      	ldr	r3, [pc, #604]	; (593c <hci_cmd_handle+0x318>)
    56e0:	6018      	str	r0, [r3, #0]
    56e2:	6059      	str	r1, [r3, #4]

	if (buf) {
		ll_reset();
    56e4:	f007 f870 	bl	c7c8 <ll_reset>
    56e8:	e2ec      	b.n	5cc4 <hci_cmd_handle+0x6a0>
static void set_event_mask_page_2(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    56ea:	68a0      	ldr	r0, [r4, #8]
    56ec:	f7ff ff7e 	bl	55ec <sys_get_le64>
    56f0:	4b91      	ldr	r3, [pc, #580]	; (5938 <hci_cmd_handle+0x314>)
    56f2:	e0d9      	b.n	58a8 <hci_cmd_handle+0x284>
}

static int info_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			   struct net_buf **evt)
{
	switch (ocf) {
    56f4:	1e68      	subs	r0, r5, #1
    56f6:	2808      	cmp	r0, #8
    56f8:	d900      	bls.n	56fc <hci_cmd_handle+0xd8>
    56fa:	e2f5      	b.n	5ce8 <hci_cmd_handle+0x6c4>
    56fc:	f7fa fd50 	bl	1a0 <__gnu_thumb1_case_uhi>
    5700:	00180009 	.word	0x00180009
    5704:	02f40063 	.word	0x02f40063
    5708:	02f402f4 	.word	0x02f402f4
    570c:	02f402f4 	.word	0x02f402f4
    5710:	0071      	.short	0x0071

static void read_local_version_info(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    5712:	2109      	movs	r1, #9
    5714:	a80f      	add	r0, sp, #60	; 0x3c
    5716:	f7ff fe9d 	bl	5454 <cmd_complete>

	rp->status = 0x00;
    571a:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
    571c:	2209      	movs	r2, #9
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    571e:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
	rp->hci_revision = sys_cpu_to_le16(0);
    5720:	7083      	strb	r3, [r0, #2]
    5722:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    5724:	3b01      	subs	r3, #1
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
	rp->hci_version = BT_HCI_VERSION_5_0;
    5726:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    5728:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    572a:	7143      	strb	r3, [r0, #5]
    572c:	7183      	strb	r3, [r0, #6]
    572e:	e137      	b.n	59a0 <hci_cmd_handle+0x37c>

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    5730:	2141      	movs	r1, #65	; 0x41
    5732:	a80f      	add	r0, sp, #60	; 0x3c
    5734:	f7ff fe8e 	bl	5454 <cmd_complete>

	rp->status = 0x00;
    5738:	2100      	movs	r1, #0

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    573a:	0004      	movs	r4, r0
	rp->commands[27] |= BIT(6) | BIT(7);
	/* LE Read Supported States */
	rp->commands[28] |= BIT(3);
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
	/* LE Set Adv Params, LE Read Adv Channel TX Power, LE Set Adv Data */
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    573c:	2609      	movs	r6, #9
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    573e:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    5740:	2240      	movs	r2, #64	; 0x40
    5742:	3001      	adds	r0, #1
    5744:	f7fb fad1 	bl	cea <memset>
	rp->commands[27] |= BIT(6) | BIT(7);
	/* LE Read Supported States */
	rp->commands[28] |= BIT(3);
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
	/* LE Set Adv Params, LE Read Adv Channel TX Power, LE Set Adv Data */
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    5748:	7ea5      	ldrb	r5, [r4, #26]
    574a:	4276      	negs	r6, r6
    574c:	4335      	orrs	r5, r6
    574e:	76a5      	strb	r5, [r4, #26]
	/* LE Set Scan Response Data, LE Set Adv Enable */
	rp->commands[26] |= BIT(0) | BIT(1);
    5750:	253d      	movs	r5, #61	; 0x3d

	rp->status = 0x00;
	memset(&rp->commands[0], 0, sizeof(rp->commands));

	/* Set Event Mask, and Reset. */
	rp->commands[5] |= BIT(6) | BIT(7);
    5752:	2240      	movs	r2, #64	; 0x40
	/* LE Set Event Mask, LE Read Buffer Size, LE Read Local Supp Feats,
	 * Set Random Addr
	 */
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
	/* LE Read WL Size, LE Clear WL */
	rp->commands[26] |= BIT(6) | BIT(7);
    5754:	7ee1      	ldrb	r1, [r4, #27]
	rp->commands[28] |= BIT(3);
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
	/* LE Set Adv Params, LE Read Adv Channel TX Power, LE Set Adv Data */
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
	/* LE Set Scan Response Data, LE Set Adv Enable */
	rp->commands[26] |= BIT(0) | BIT(1);
    5756:	426d      	negs	r5, r5
    5758:	4329      	orrs	r1, r5
    575a:	76e1      	strb	r1, [r4, #27]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */
#endif /* CONFIG_BLUETOOTH_CENTRAL */
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	/* LE LTK Request Reply, LE LTK Request Negative Reply */
	rp->commands[28] |= BIT(1) | BIT(2);
    575c:	210e      	movs	r1, #14

	rp->status = 0x00;
	memset(&rp->commands[0], 0, sizeof(rp->commands));

	/* Set Event Mask, and Reset. */
	rp->commands[5] |= BIT(6) | BIT(7);
    575e:	79a3      	ldrb	r3, [r4, #6]
    5760:	4252      	negs	r2, r2
    5762:	4313      	orrs	r3, r2
    5764:	71a3      	strb	r3, [r4, #6]
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	/* Set FC, Host Buffer Size and Host Num Completed */
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
#endif
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
    5766:	7be3      	ldrb	r3, [r4, #15]
    5768:	3268      	adds	r2, #104	; 0x68
    576a:	4313      	orrs	r3, r2
    576c:	73e3      	strb	r3, [r4, #15]
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
    576e:	7c23      	ldrb	r3, [r4, #16]
    5770:	3a26      	subs	r2, #38	; 0x26
    5772:	4313      	orrs	r3, r2
	/* LE Add Dev to WL, LE Remove Dev from WL */
	rp->commands[27] |= BIT(0) | BIT(1);
	/* LE Encrypt, LE Rand */
	rp->commands[27] |= BIT(6) | BIT(7);
	/* LE Read Supported States */
	rp->commands[28] |= BIT(3);
    5774:	7f62      	ldrb	r2, [r4, #29]
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
	/* Set Event Mask Page 2 */
	rp->commands[22] |= BIT(2);
    5776:	2004      	movs	r0, #4
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */
#endif /* CONFIG_BLUETOOTH_CENTRAL */
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	/* LE LTK Request Reply, LE LTK Request Negative Reply */
	rp->commands[28] |= BIT(1) | BIT(2);
    5778:	430a      	orrs	r2, r1
    577a:	7762      	strb	r2, [r4, #29]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */
#endif
#if defined(CONFIG_BLUETOOTH_CONN)
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
    577c:	7862      	ldrb	r2, [r4, #1]
    577e:	3112      	adds	r1, #18
    5780:	430a      	orrs	r2, r1
    5782:	7062      	strb	r2, [r4, #1]
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
    5784:	2219      	movs	r2, #25
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
#endif
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
    5786:	7423      	strb	r3, [r4, #16]
	/* Set Event Mask Page 2 */
	rp->commands[22] |= BIT(2);
    5788:	7de3      	ldrb	r3, [r4, #23]
#endif
#if defined(CONFIG_BLUETOOTH_CONN)
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
    578a:	4252      	negs	r2, r2
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] |= BIT(3) | BIT(5);
	/* Read BD ADDR. */
	rp->commands[15] |= BIT(1);
	/* Set Event Mask Page 2 */
	rp->commands[22] |= BIT(2);
    578c:	4303      	orrs	r3, r0
    578e:	75e3      	strb	r3, [r4, #23]
	 */
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
	/* LE Read WL Size, LE Clear WL */
	rp->commands[26] |= BIT(6) | BIT(7);
	/* LE Add Dev to WL, LE Remove Dev from WL */
	rp->commands[27] |= BIT(0) | BIT(1);
    5790:	7f23      	ldrb	r3, [r4, #28]
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    5792:	1d65      	adds	r5, r4, #5
#endif
#if defined(CONFIG_BLUETOOTH_CONN)
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
    5794:	4313      	orrs	r3, r2
    5796:	7723      	strb	r3, [r4, #28]
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    5798:	7feb      	ldrb	r3, [r5, #31]
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] |= BIT(4) | BIT(5);
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    579a:	1826      	adds	r6, r4, r0
	/* Disconnect. */
	rp->commands[0] |= BIT(5);
	/* LE Connection Update, LE Read Remote Features */
	rp->commands[27] |= BIT(2) | BIT(5);
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] |= BIT(4) | BIT(5);
    579c:	1ce7      	adds	r7, r4, #3
    579e:	7ff9      	ldrb	r1, [r7, #31]
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    57a0:	7ff2      	ldrb	r2, [r6, #31]
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
	/* LE Set Privacy Mode */
	rp->commands[39] |= BIT(2);
    57a2:	3428      	adds	r4, #40	; 0x28
#endif /* CONFIG_BLUETOOTH_CONN */
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    57a4:	930d      	str	r3, [sp, #52]	; 0x34
	/* LE Set Privacy Mode */
	rp->commands[39] |= BIT(2);
    57a6:	7823      	ldrb	r3, [r4, #0]
    57a8:	4318      	orrs	r0, r3
    57aa:	7020      	strb	r0, [r4, #0]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Set Data Length, and LE Read Suggested Data Length. */
	rp->commands[33] |= BIT(6) | BIT(7);
    57ac:	2010      	movs	r0, #16
    57ae:	4240      	negs	r0, r0
    57b0:	4301      	orrs	r1, r0
    57b2:	77f9      	strb	r1, [r7, #31]
	/* LE Write Suggested Data Length. */
	rp->commands[34] |= BIT(0);
    57b4:	2107      	movs	r1, #7
    57b6:	4249      	negs	r1, r1
    57b8:	430a      	orrs	r2, r1
    57ba:	77f2      	strb	r2, [r6, #31]
	/* LE Read Maximum Data Length. */
	rp->commands[35] |= BIT(3);
    57bc:	220f      	movs	r2, #15
    57be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    57c0:	4313      	orrs	r3, r2
    57c2:	77eb      	strb	r3, [r5, #31]
    57c4:	e28e      	b.n	5ce4 <hci_cmd_handle+0x6c0>

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    57c6:	2109      	movs	r1, #9
    57c8:	a80f      	add	r0, sp, #60	; 0x3c
    57ca:	f7ff fe43 	bl	5454 <cmd_complete>

	rp->status = 0x00;
    57ce:	2100      	movs	r1, #0

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    57d0:	0004      	movs	r4, r0

	rp->status = 0x00;
    57d2:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    57d4:	2208      	movs	r2, #8
    57d6:	3001      	adds	r0, #1
    57d8:	f7fb fa87 	bl	cea <memset>
	/* BR/EDR not supported and LE supported */
	rp->features[4] = (1 << 5) | (1 << 6);
    57dc:	2360      	movs	r3, #96	; 0x60
    57de:	7163      	strb	r3, [r4, #5]
    57e0:	e280      	b.n	5ce4 <hci_cmd_handle+0x6c0>

static void read_bd_addr(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_bd_addr *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    57e2:	2107      	movs	r1, #7
    57e4:	a80f      	add	r0, sp, #60	; 0x3c
    57e6:	f7ff fe35 	bl	5454 <cmd_complete>
    57ea:	0001      	movs	r1, r0

	rp->status = 0x00;
    57ec:	2000      	movs	r0, #0
    57ee:	7008      	strb	r0, [r1, #0]
	ll_addr_get(0, &rp->bdaddr.val[0]);
    57f0:	3101      	adds	r1, #1
    57f2:	f007 fe69 	bl	d4c8 <ll_addr_get>
    57f6:	e275      	b.n	5ce4 <hci_cmd_handle+0x6c0>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static int controller_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	switch (ocf) {
    57f8:	1e68      	subs	r0, r5, #1
    57fa:	284d      	cmp	r0, #77	; 0x4d
    57fc:	d900      	bls.n	5800 <hci_cmd_handle+0x1dc>
    57fe:	e273      	b.n	5ce8 <hci_cmd_handle+0x6c4>
    5800:	f7fa fcce 	bl	1a0 <__gnu_thumb1_case_uhi>
    5804:	0055004e 	.word	0x0055004e
    5808:	02720061 	.word	0x02720061
    580c:	00d10073 	.word	0x00d10073
    5810:	00f400ec 	.word	0x00f400ec
    5814:	010000fa 	.word	0x010000fa
    5818:	02720272 	.word	0x02720272
    581c:	02720272 	.word	0x02720272
    5820:	00830078 	.word	0x00830078
    5824:	008f008b 	.word	0x008f008b
    5828:	0272012a 	.word	0x0272012a
    582c:	01220272 	.word	0x01220272
    5830:	00b1009e 	.word	0x00b1009e
    5834:	010f0272 	.word	0x010f0272
    5838:	00bc0117 	.word	0x00bc0117
    583c:	02720272 	.word	0x02720272
    5840:	01420272 	.word	0x01420272
    5844:	0176015b 	.word	0x0176015b
    5848:	019a0190 	.word	0x019a0190
    584c:	02720272 	.word	0x02720272
    5850:	02180211 	.word	0x02180211
    5854:	0224021c 	.word	0x0224021c
    5858:	023e022f 	.word	0x023e022f
    585c:	0259024d 	.word	0x0259024d
    5860:	01b201a6 	.word	0x01b201a6
    5864:	01eb01d2 	.word	0x01eb01d2
    5868:	02720272 	.word	0x02720272
    586c:	02720272 	.word	0x02720272
    5870:	02720272 	.word	0x02720272
    5874:	02720272 	.word	0x02720272
    5878:	02720272 	.word	0x02720272
    587c:	02720272 	.word	0x02720272
    5880:	02720272 	.word	0x02720272
    5884:	02720272 	.word	0x02720272
    5888:	02720272 	.word	0x02720272
    588c:	02720272 	.word	0x02720272
    5890:	02720272 	.word	0x02720272
    5894:	02720272 	.word	0x02720272
    5898:	02720272 	.word	0x02720272
    589c:	02660272 	.word	0x02660272
static void le_set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	le_event_mask = sys_get_le64(cmd->events);
    58a0:	68a0      	ldr	r0, [r4, #8]
    58a2:	f7ff fea3 	bl	55ec <sys_get_le64>
    58a6:	4b25      	ldr	r3, [pc, #148]	; (593c <hci_cmd_handle+0x318>)
    58a8:	6018      	str	r0, [r3, #0]
    58aa:	6059      	str	r1, [r3, #4]
    58ac:	e20a      	b.n	5cc4 <hci_cmd_handle+0x6a0>

static void le_read_buffer_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    58ae:	2104      	movs	r1, #4
    58b0:	a80f      	add	r0, sp, #60	; 0x3c
    58b2:	f7ff fdcf 	bl	5454 <cmd_complete>

	rp->status = 0x00;
    58b6:	2300      	movs	r3, #0

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    58b8:	211b      	movs	r1, #27
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    58ba:	7003      	strb	r3, [r0, #0]

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    58bc:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    58be:	3302      	adds	r3, #2

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    58c0:	7041      	strb	r1, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    58c2:	70c3      	strb	r3, [r0, #3]
    58c4:	e20e      	b.n	5ce4 <hci_cmd_handle+0x6c0>

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    58c6:	2109      	movs	r1, #9
    58c8:	a80f      	add	r0, sp, #60	; 0x3c
    58ca:	f7ff fdc3 	bl	5454 <cmd_complete>

	rp->status = 0x00;
    58ce:	2500      	movs	r5, #0

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    58d0:	0004      	movs	r4, r0

	rp->status = 0x00;
    58d2:	7005      	strb	r5, [r0, #0]

	memset(&rp->features[0], 0x00, sizeof(rp->features));
    58d4:	2208      	movs	r2, #8
    58d6:	3001      	adds	r0, #1
    58d8:	0029      	movs	r1, r5
    58da:	f7fb fa06 	bl	cea <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    58de:	237f      	movs	r3, #127	; 0x7f
    58e0:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    58e2:	3b3f      	subs	r3, #63	; 0x3f
    58e4:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    58e6:	70e5      	strb	r5, [r4, #3]
    58e8:	e1fc      	b.n	5ce4 <hci_cmd_handle+0x6c0>
static void le_set_random_address(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_random_address *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_addr_set(1, &cmd->bdaddr.val[0]);
    58ea:	68a1      	ldr	r1, [r4, #8]
    58ec:	2001      	movs	r0, #1
    58ee:	f007 fe05 	bl	d4fc <ll_addr_set>
    58f2:	e1e7      	b.n	5cc4 <hci_cmd_handle+0x6a0>

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    58f4:	2102      	movs	r1, #2
    58f6:	a80f      	add	r0, sp, #60	; 0x3c
    58f8:	f7ff fdac 	bl	5454 <cmd_complete>
	rp->status = 0x00;
    58fc:	2300      	movs	r3, #0
    58fe:	7003      	strb	r3, [r0, #0]

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    5900:	0004      	movs	r4, r0
	rp->status = 0x00;

	rp->wl_size = ll_wl_size_get();
    5902:	f007 feeb 	bl	d6dc <ll_wl_size_get>
    5906:	7060      	strb	r0, [r4, #1]
    5908:	e1ec      	b.n	5ce4 <hci_cmd_handle+0x6c0>

static void le_clear_wl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;

	ccst = cmd_complete(evt, sizeof(*ccst));
    590a:	2101      	movs	r1, #1
    590c:	a80f      	add	r0, sp, #60	; 0x3c
    590e:	f7ff fda1 	bl	5454 <cmd_complete>
    5912:	0004      	movs	r4, r0
	ccst->status = ll_wl_clear();
    5914:	f007 fee4 	bl	d6e0 <ll_wl_clear>
    5918:	e1cb      	b.n	5cb2 <hci_cmd_handle+0x68e>
{
	struct bt_hci_cp_le_add_dev_to_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_add(&cmd->addr);
    591a:	68a0      	ldr	r0, [r4, #8]
    591c:	f007 ff80 	bl	d820 <ll_wl_add>
    5920:	e1da      	b.n	5cd8 <hci_cmd_handle+0x6b4>
{
	struct bt_hci_cp_le_rem_dev_from_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_remove(&cmd->addr);
    5922:	68a0      	ldr	r0, [r4, #8]
    5924:	f007 fefc 	bl	d720 <ll_wl_remove>
    5928:	e1d6      	b.n	5cd8 <hci_cmd_handle+0x6b4>
    592a:	46c0      	nop			; (mov r8, r8)
    592c:	20000c10 	.word	0x20000c10
    5930:	20000578 	.word	0x20000578
    5934:	00001fff 	.word	0x00001fff
    5938:	20000c18 	.word	0x20000c18
    593c:	20000580 	.word	0x20000580
    5940:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
	struct bt_hci_rp_le_encrypt *rp;
	u8_t enc_data[16];

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    5942:	aa10      	add	r2, sp, #64	; 0x40
    5944:	0001      	movs	r1, r0
    5946:	2300      	movs	r3, #0
    5948:	3110      	adds	r1, #16
    594a:	f000 fff3 	bl	6934 <ecb_encrypt>

	rp = cmd_complete(evt, sizeof(*rp));
    594e:	2111      	movs	r1, #17
    5950:	a80f      	add	r0, sp, #60	; 0x3c
    5952:	f7ff fd7f 	bl	5454 <cmd_complete>

	rp->status = 0x00;
    5956:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    5958:	2210      	movs	r2, #16

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    595a:	7003      	strb	r3, [r0, #0]
	memcpy(rp->enc_data, enc_data, 16);
    595c:	a910      	add	r1, sp, #64	; 0x40
    595e:	3001      	adds	r0, #1
    5960:	f7fb f999 	bl	c96 <memcpy>
    5964:	e1be      	b.n	5ce4 <hci_cmd_handle+0x6c0>
static void le_rand(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
    5966:	2109      	movs	r1, #9
    5968:	a80f      	add	r0, sp, #60	; 0x3c
    596a:	f7ff fd73 	bl	5454 <cmd_complete>
	rp->status = 0x00;
    596e:	2300      	movs	r3, #0

	bt_rand(rp->rand, count);
    5970:	2108      	movs	r1, #8
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = 0x00;
    5972:	7003      	strb	r3, [r0, #0]

	bt_rand(rp->rand, count);
    5974:	3001      	adds	r0, #1
    5976:	f002 fa65 	bl	7e44 <bt_rand>
    597a:	e1b3      	b.n	5ce4 <hci_cmd_handle+0x6c0>
static void le_read_supp_states(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_supp_states *rp;
	u64_t states = 0;

	rp = cmd_complete(evt, sizeof(*rp));
    597c:	2109      	movs	r1, #9
    597e:	a80f      	add	r0, sp, #60	; 0x3c
    5980:	f7ff fd68 	bl	5454 <cmd_complete>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    5984:	228f      	movs	r2, #143	; 0x8f
	rp->status = 0x00;
    5986:	2300      	movs	r3, #0
    5988:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
    598a:	323d      	adds	r2, #61	; 0x3d
    598c:	7082      	strb	r2, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    598e:	3a9c      	subs	r2, #156	; 0x9c
    5990:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    5992:	32bc      	adds	r2, #188	; 0xbc
    5994:	7102      	strb	r2, [r0, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    5996:	3a2c      	subs	r2, #44	; 0x2c
    5998:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
    599a:	3abf      	subs	r2, #191	; 0xbf
    599c:	7003      	strb	r3, [r0, #0]
    599e:	7182      	strb	r2, [r0, #6]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    59a0:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    59a2:	7203      	strb	r3, [r0, #8]
    59a4:	e19e      	b.n	5ce4 <hci_cmd_handle+0x6c0>
    59a6:	68a1      	ldr	r1, [r4, #8]
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u16_t min_interval;
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);
    59a8:	784a      	ldrb	r2, [r1, #1]
    59aa:	7808      	ldrb	r0, [r1, #0]
    59ac:	0212      	lsls	r2, r2, #8

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    59ae:	4302      	orrs	r2, r0
    59b0:	2000      	movs	r0, #0
    59b2:	790b      	ldrb	r3, [r1, #4]
    59b4:	900a      	str	r0, [sp, #40]	; 0x28
    59b6:	9009      	str	r0, [sp, #36]	; 0x24
    59b8:	9008      	str	r0, [sp, #32]
    59ba:	9007      	str	r0, [sp, #28]
    59bc:	9006      	str	r0, [sp, #24]
    59be:	9005      	str	r0, [sp, #20]
    59c0:	7b8c      	ldrb	r4, [r1, #14]
    59c2:	9404      	str	r4, [sp, #16]
    59c4:	7b4c      	ldrb	r4, [r1, #13]
    59c6:	9403      	str	r4, [sp, #12]
				   cmd->own_addr_type, cmd->direct_addr.type,
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    59c8:	1dcc      	adds	r4, r1, #7
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    59ca:	9402      	str	r4, [sp, #8]
    59cc:	798c      	ldrb	r4, [r1, #6]
    59ce:	9401      	str	r4, [sp, #4]
    59d0:	7949      	ldrb	r1, [r1, #5]
    59d2:	9100      	str	r1, [sp, #0]
    59d4:	0001      	movs	r1, r0
    59d6:	f008 fadd 	bl	df94 <ll_adv_params_set>
    59da:	e17d      	b.n	5cd8 <hci_cmd_handle+0x6b4>

static void le_read_adv_chan_tx_power(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_chan_tx_power *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    59dc:	2102      	movs	r1, #2
    59de:	a80f      	add	r0, sp, #60	; 0x3c
    59e0:	f7ff fd38 	bl	5454 <cmd_complete>

	rp->status = 0x00;
    59e4:	2300      	movs	r3, #0
    59e6:	7003      	strb	r3, [r0, #0]

	rp->tx_power_level = 0;
    59e8:	7043      	strb	r3, [r0, #1]
    59ea:	e17b      	b.n	5ce4 <hci_cmd_handle+0x6c0>
    59ec:	68a3      	ldr	r3, [r4, #8]
static void le_set_adv_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_adv_data_set(cmd->len, &cmd->data[0]);
    59ee:	1c59      	adds	r1, r3, #1
    59f0:	7818      	ldrb	r0, [r3, #0]
    59f2:	f008 fbdf 	bl	e1b4 <ll_adv_data_set>
    59f6:	e165      	b.n	5cc4 <hci_cmd_handle+0x6a0>
    59f8:	68a3      	ldr	r3, [r4, #8]
static void le_set_scan_rsp_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_scan_data_set(cmd->len, &cmd->data[0]);
    59fa:	1c59      	adds	r1, r3, #1
    59fc:	7818      	ldrb	r0, [r3, #0]
    59fe:	f008 fc2f 	bl	e260 <ll_scan_data_set>
    5a02:	e15f      	b.n	5cc4 <hci_cmd_handle+0x6a0>
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    5a04:	68a3      	ldr	r3, [r4, #8]
    5a06:	7818      	ldrb	r0, [r3, #0]
    5a08:	f008 fc66 	bl	e2d8 <ll_adv_enable>

	ccst = cmd_complete(evt, sizeof(*ccst));
    5a0c:	2101      	movs	r1, #1
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    5a0e:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    5a10:	a80f      	add	r0, sp, #60	; 0x3c
    5a12:	f7ff fd1f 	bl	5454 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5a16:	2300      	movs	r3, #0
    5a18:	429c      	cmp	r4, r3
    5a1a:	d100      	bne.n	5a1e <hci_cmd_handle+0x3fa>
    5a1c:	e169      	b.n	5cf2 <hci_cmd_handle+0x6ce>
    5a1e:	330c      	adds	r3, #12
    5a20:	e167      	b.n	5cf2 <hci_cmd_handle+0x6ce>
    5a22:	68a2      	ldr	r2, [r4, #8]
	struct bt_hci_rp_le_ltk_req_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    5a24:	2100      	movs	r1, #0
	struct bt_hci_cp_le_ltk_req_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5a26:	7854      	ldrb	r4, [r2, #1]
    5a28:	7813      	ldrb	r3, [r2, #0]
    5a2a:	0224      	lsls	r4, r4, #8
    5a2c:	431c      	orrs	r4, r3
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    5a2e:	3202      	adds	r2, #2
    5a30:	e006      	b.n	5a40 <hci_cmd_handle+0x41c>
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5a32:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    5a34:	2106      	movs	r1, #6
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5a36:	7813      	ldrb	r3, [r2, #0]
    5a38:	7854      	ldrb	r4, [r2, #1]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    5a3a:	2200      	movs	r2, #0
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5a3c:	0224      	lsls	r4, r4, #8
    5a3e:	431c      	orrs	r4, r3
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    5a40:	0020      	movs	r0, r4
    5a42:	f006 ff95 	bl	c970 <ll_start_enc_req_send>
    5a46:	e05f      	b.n	5b08 <hci_cmd_handle+0x4e4>
{
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5a48:	68a2      	ldr	r2, [r4, #8]
    5a4a:	7850      	ldrb	r0, [r2, #1]
    5a4c:	7813      	ldrb	r3, [r2, #0]
    5a4e:	0200      	lsls	r0, r0, #8
	status = ll_feature_req_send(handle);
    5a50:	4318      	orrs	r0, r3
    5a52:	f006 ffd4 	bl	c9fe <ll_feature_req_send>
    5a56:	e0dd      	b.n	5c14 <hci_cmd_handle+0x5f0>
    5a58:	68a2      	ldr	r2, [r4, #8]
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    5a5a:	7953      	ldrb	r3, [r2, #5]
    5a5c:	7911      	ldrb	r1, [r2, #4]
	u16_t conn_interval_max;
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5a5e:	7850      	ldrb	r0, [r2, #1]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    5a60:	021b      	lsls	r3, r3, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    5a62:	430b      	orrs	r3, r1
	u16_t conn_interval_max;
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5a64:	7811      	ldrb	r1, [r2, #0]
    5a66:	0200      	lsls	r0, r0, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    5a68:	4308      	orrs	r0, r1
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    5a6a:	7a51      	ldrb	r1, [r2, #9]
    5a6c:	7a14      	ldrb	r4, [r2, #8]
    5a6e:	0209      	lsls	r1, r1, #8

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    5a70:	4321      	orrs	r1, r4
    5a72:	9101      	str	r1, [sp, #4]
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    5a74:	7991      	ldrb	r1, [r2, #6]
    5a76:	79d2      	ldrb	r2, [r2, #7]
    5a78:	0212      	lsls	r2, r2, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    5a7a:	430a      	orrs	r2, r1
    5a7c:	9200      	str	r2, [sp, #0]
    5a7e:	2200      	movs	r2, #0
    5a80:	0011      	movs	r1, r2
    5a82:	f006 ff2b 	bl	c8dc <ll_conn_update>
    5a86:	e0c5      	b.n	5c14 <hci_cmd_handle+0x5f0>
    5a88:	68a2      	ldr	r2, [r4, #8]
	u16_t latency;
	u16_t timeout;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5a8a:	7854      	ldrb	r4, [r2, #1]
    5a8c:	7813      	ldrb	r3, [r2, #0]
    5a8e:	0224      	lsls	r4, r4, #8
    5a90:	431c      	orrs	r4, r3
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    5a92:	7953      	ldrb	r3, [r2, #5]
    5a94:	7911      	ldrb	r1, [r2, #4]
    5a96:	021b      	lsls	r3, r3, #8
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    5a98:	430b      	orrs	r3, r1
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);
    5a9a:	7a51      	ldrb	r1, [r2, #9]
    5a9c:	7a10      	ldrb	r0, [r2, #8]
    5a9e:	0209      	lsls	r1, r1, #8

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    5aa0:	4301      	orrs	r1, r0
    5aa2:	9101      	str	r1, [sp, #4]
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
    5aa4:	7991      	ldrb	r1, [r2, #6]
    5aa6:	79d2      	ldrb	r2, [r2, #7]
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    5aa8:	0020      	movs	r0, r4
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
    5aaa:	0212      	lsls	r2, r2, #8
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    5aac:	430a      	orrs	r2, r1
    5aae:	9200      	str	r2, [sp, #0]
    5ab0:	2102      	movs	r1, #2
    5ab2:	2200      	movs	r2, #0
    5ab4:	f006 ff12 	bl	c8dc <ll_conn_update>
    5ab8:	e026      	b.n	5b08 <hci_cmd_handle+0x4e4>
    5aba:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    5abc:	2400      	movs	r4, #0
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5abe:	785d      	ldrb	r5, [r3, #1]
    5ac0:	781a      	ldrb	r2, [r3, #0]
    5ac2:	022d      	lsls	r5, r5, #8
    5ac4:	4315      	orrs	r5, r2
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    5ac6:	2102      	movs	r1, #2
    5ac8:	789a      	ldrb	r2, [r3, #2]
    5aca:	0028      	movs	r0, r5
    5acc:	9401      	str	r4, [sp, #4]
    5ace:	9400      	str	r4, [sp, #0]
    5ad0:	0023      	movs	r3, r4
    5ad2:	f006 ff03 	bl	c8dc <ll_conn_update>

	rp = cmd_complete(evt, sizeof(*rp));
    5ad6:	2103      	movs	r1, #3
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    5ad8:	0006      	movs	r6, r0

	rp = cmd_complete(evt, sizeof(*rp));
    5ada:	a80f      	add	r0, sp, #60	; 0x3c
    5adc:	f7ff fcba 	bl	5454 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5ae0:	42a6      	cmp	r6, r4
    5ae2:	d000      	beq.n	5ae6 <hci_cmd_handle+0x4c2>
    5ae4:	340c      	adds	r4, #12
	rp->handle = sys_cpu_to_le16(handle);
    5ae6:	7045      	strb	r5, [r0, #1]
    5ae8:	0a2d      	lsrs	r5, r5, #8

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5aea:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    5aec:	7085      	strb	r5, [r0, #2]
    5aee:	e0f9      	b.n	5ce4 <hci_cmd_handle+0x6c0>
    5af0:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_rp_le_set_data_len *rp;
	u32_t status;
	u16_t tx_octets;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5af2:	785c      	ldrb	r4, [r3, #1]
    5af4:	781a      	ldrb	r2, [r3, #0]
    5af6:	0224      	lsls	r4, r4, #8
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
    5af8:	78d9      	ldrb	r1, [r3, #3]
	struct bt_hci_rp_le_set_data_len *rp;
	u32_t status;
	u16_t tx_octets;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    5afa:	4314      	orrs	r4, r2
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
    5afc:	789a      	ldrb	r2, [r3, #2]
    5afe:	0209      	lsls	r1, r1, #8
	/** @todo add reject_ext_ind support in ctrl.c */
	status = ll_length_req_send(handle, tx_octets);
    5b00:	4311      	orrs	r1, r2
    5b02:	0020      	movs	r0, r4
    5b04:	f006 ffbd 	bl	ca82 <ll_length_req_send>
    5b08:	0005      	movs	r5, r0

	rp = cmd_complete(evt, sizeof(*rp));
    5b0a:	2103      	movs	r1, #3
    5b0c:	a80f      	add	r0, sp, #60	; 0x3c
    5b0e:	f7ff fca1 	bl	5454 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5b12:	2300      	movs	r3, #0
    5b14:	429d      	cmp	r5, r3
    5b16:	d000      	beq.n	5b1a <hci_cmd_handle+0x4f6>
    5b18:	330c      	adds	r3, #12
	rp->handle = sys_cpu_to_le16(handle);
    5b1a:	7044      	strb	r4, [r0, #1]
    5b1c:	0a24      	lsrs	r4, r4, #8
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
	/** @todo add reject_ext_ind support in ctrl.c */
	status = ll_length_req_send(handle, tx_octets);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5b1e:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    5b20:	7084      	strb	r4, [r0, #2]
    5b22:	e0df      	b.n	5ce4 <hci_cmd_handle+0x6c0>

static void le_read_default_data_len(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_default_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    5b24:	2105      	movs	r1, #5
    5b26:	a80f      	add	r0, sp, #60	; 0x3c
    5b28:	f7ff fc94 	bl	5454 <cmd_complete>
    5b2c:	0004      	movs	r4, r0

	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    5b2e:	1cc1      	adds	r1, r0, #3
    5b30:	3001      	adds	r0, #1
    5b32:	f006 ffc9 	bl	cac8 <ll_length_default_get>
    5b36:	e091      	b.n	5c5c <hci_cmd_handle+0x638>
    5b38:	68a3      	ldr	r3, [r4, #8]
{
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    5b3a:	78d9      	ldrb	r1, [r3, #3]
    5b3c:	789a      	ldrb	r2, [r3, #2]
    5b3e:	7858      	ldrb	r0, [r3, #1]
    5b40:	0209      	lsls	r1, r1, #8
    5b42:	4311      	orrs	r1, r2
    5b44:	781a      	ldrb	r2, [r3, #0]
    5b46:	0200      	lsls	r0, r0, #8
    5b48:	4310      	orrs	r0, r2
    5b4a:	f006 ffc7 	bl	cadc <ll_length_default_set>
    5b4e:	e039      	b.n	5bc4 <hci_cmd_handle+0x5a0>

static void le_read_max_data_len(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_max_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    5b50:	2109      	movs	r1, #9
    5b52:	a80f      	add	r0, sp, #60	; 0x3c
    5b54:	f7ff fc7e 	bl	5454 <cmd_complete>
    5b58:	0004      	movs	r4, r0

	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    5b5a:	1dc3      	adds	r3, r0, #7
    5b5c:	1d42      	adds	r2, r0, #5
    5b5e:	1cc1      	adds	r1, r0, #3
    5b60:	3001      	adds	r0, #1
    5b62:	f006 ffc3 	bl	caec <ll_length_max_get>
    5b66:	e079      	b.n	5c5c <hci_cmd_handle+0x638>
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    5b68:	68a3      	ldr	r3, [r4, #8]

	rp = cmd_complete(evt, sizeof(*rp));
    5b6a:	2105      	movs	r1, #5
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    5b6c:	785d      	ldrb	r5, [r3, #1]
    5b6e:	781a      	ldrb	r2, [r3, #0]
    5b70:	022d      	lsls	r5, r5, #8

	rp = cmd_complete(evt, sizeof(*rp));
    5b72:	a80f      	add	r0, sp, #60	; 0x3c
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    5b74:	4315      	orrs	r5, r2

	rp = cmd_complete(evt, sizeof(*rp));
    5b76:	f7ff fc6d 	bl	5454 <cmd_complete>

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    5b7a:	1d02      	adds	r2, r0, #4
    5b7c:	1cc1      	adds	r1, r0, #3
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);

	rp = cmd_complete(evt, sizeof(*rp));
    5b7e:	0004      	movs	r4, r0

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    5b80:	0028      	movs	r0, r5
    5b82:	f006 ffbc 	bl	cafe <ll_phy_get>

	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5b86:	2300      	movs	r3, #0
    5b88:	4298      	cmp	r0, r3
    5b8a:	d000      	beq.n	5b8e <hci_cmd_handle+0x56a>
    5b8c:	330c      	adds	r3, #12
	rp->handle = sys_cpu_to_le16(handle);
    5b8e:	7065      	strb	r5, [r4, #1]
    5b90:	0a2d      	lsrs	r5, r5, #8

	rp = cmd_complete(evt, sizeof(*rp));

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);

	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5b92:	7023      	strb	r3, [r4, #0]
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    5b94:	78e0      	ldrb	r0, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    5b96:	70a5      	strb	r5, [r4, #2]
    5b98:	f7fa fcda 	bl	550 <__ffssi2>
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    5b9c:	70e0      	strb	r0, [r4, #3]
    5b9e:	7920      	ldrb	r0, [r4, #4]
    5ba0:	f7fa fcd6 	bl	550 <__ffssi2>
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    5ba4:	7120      	strb	r0, [r4, #4]
    5ba6:	e09d      	b.n	5ce4 <hci_cmd_handle+0x6c0>
    5ba8:	68a3      	ldr	r3, [r4, #8]
{
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    5baa:	781a      	ldrb	r2, [r3, #0]
    5bac:	07d1      	lsls	r1, r2, #31
    5bae:	d501      	bpl.n	5bb4 <hci_cmd_handle+0x590>
		cmd->tx_phys = 0x07;
    5bb0:	2107      	movs	r1, #7
    5bb2:	7059      	strb	r1, [r3, #1]
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    5bb4:	0792      	lsls	r2, r2, #30
    5bb6:	d501      	bpl.n	5bbc <hci_cmd_handle+0x598>
		cmd->rx_phys = 0x07;
    5bb8:	2207      	movs	r2, #7
    5bba:	709a      	strb	r2, [r3, #2]
	}

	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    5bbc:	7899      	ldrb	r1, [r3, #2]
    5bbe:	7858      	ldrb	r0, [r3, #1]
    5bc0:	f006 ffb4 	bl	cb2c <ll_phy_default_set>
    5bc4:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    5bc6:	2101      	movs	r1, #1
    5bc8:	a80f      	add	r0, sp, #60	; 0x3c
    5bca:	f7ff fc43 	bl	5454 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    5bce:	2300      	movs	r3, #0
    5bd0:	429c      	cmp	r4, r3
    5bd2:	d100      	bne.n	5bd6 <hci_cmd_handle+0x5b2>
    5bd4:	e08d      	b.n	5cf2 <hci_cmd_handle+0x6ce>
    5bd6:	331e      	adds	r3, #30
    5bd8:	e08b      	b.n	5cf2 <hci_cmd_handle+0x6ce>
    5bda:	68a1      	ldr	r1, [r4, #8]
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
	u32_t status;
	u16_t handle;
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
    5bdc:	7848      	ldrb	r0, [r1, #1]
    5bde:	780b      	ldrb	r3, [r1, #0]
    5be0:	0200      	lsls	r0, r0, #8
    5be2:	4318      	orrs	r0, r3
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    5be4:	798b      	ldrb	r3, [r1, #6]
    5be6:	794c      	ldrb	r4, [r1, #5]

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    5be8:	788a      	ldrb	r2, [r1, #2]
	u32_t status;
	u16_t handle;
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    5bea:	021b      	lsls	r3, r3, #8
    5bec:	4323      	orrs	r3, r4

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    5bee:	07d4      	lsls	r4, r2, #31
    5bf0:	d501      	bpl.n	5bf6 <hci_cmd_handle+0x5d2>
		cmd->tx_phys = 0x07;
    5bf2:	2407      	movs	r4, #7
    5bf4:	70cc      	strb	r4, [r1, #3]
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    5bf6:	0792      	lsls	r2, r2, #30
    5bf8:	d501      	bpl.n	5bfe <hci_cmd_handle+0x5da>
		cmd->rx_phys = 0x07;
    5bfa:	2207      	movs	r2, #7
    5bfc:	710a      	strb	r2, [r1, #4]
	}
	if (phy_opts & 0x03) {
		phy_opts -= 1;
		phy_opts &= 1;
	} else {
		phy_opts = 0;
    5bfe:	2200      	movs	r2, #0
		cmd->tx_phys = 0x07;
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
		cmd->rx_phys = 0x07;
	}
	if (phy_opts & 0x03) {
    5c00:	079c      	lsls	r4, r3, #30
    5c02:	d002      	beq.n	5c0a <hci_cmd_handle+0x5e6>
		phy_opts -= 1;
    5c04:	1e5a      	subs	r2, r3, #1
		phy_opts &= 1;
    5c06:	2301      	movs	r3, #1
    5c08:	401a      	ands	r2, r3
	} else {
		phy_opts = 0;
	}

	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    5c0a:	790b      	ldrb	r3, [r1, #4]
    5c0c:	b2d2      	uxtb	r2, r2
    5c0e:	78c9      	ldrb	r1, [r1, #3]
    5c10:	f006 ff94 	bl	cb3c <ll_phy_req_send>
				 cmd->rx_phys);

	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    5c14:	2300      	movs	r3, #0
    5c16:	4298      	cmp	r0, r3
    5c18:	d000      	beq.n	5c1c <hci_cmd_handle+0x5f8>
    5c1a:	330c      	adds	r3, #12
    5c1c:	0018      	movs	r0, r3
    5c1e:	f7ff fbfd 	bl	541c <cmd_status>
    5c22:	900f      	str	r0, [sp, #60]	; 0x3c
    5c24:	e05e      	b.n	5ce4 <hci_cmd_handle+0x6c0>
    5c26:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    5c28:	0002      	movs	r2, r0
    5c2a:	1dc1      	adds	r1, r0, #7
    5c2c:	3217      	adds	r2, #23
    5c2e:	f007 ffdf 	bl	dbf0 <ll_rl_add>
    5c32:	e051      	b.n	5cd8 <hci_cmd_handle+0x6b4>
{
	struct bt_hci_cp_le_rem_dev_from_rl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_rl_remove(&cmd->peer_id_addr);
    5c34:	68a0      	ldr	r0, [r4, #8]
    5c36:	f008 f879 	bl	dd2c <ll_rl_remove>
    5c3a:	e04d      	b.n	5cd8 <hci_cmd_handle+0x6b4>
}

static void le_clear_rl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;
	ccst = cmd_complete(evt, sizeof(*ccst));
    5c3c:	2101      	movs	r1, #1
    5c3e:	a80f      	add	r0, sp, #60	; 0x3c
    5c40:	f7ff fc08 	bl	5454 <cmd_complete>
    5c44:	0004      	movs	r4, r0

	ccst->status = ll_rl_clear();
    5c46:	f007 ffb7 	bl	dbb8 <ll_rl_clear>
    5c4a:	e032      	b.n	5cb2 <hci_cmd_handle+0x68e>

static void le_read_rl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_rl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    5c4c:	2102      	movs	r1, #2
    5c4e:	a80f      	add	r0, sp, #60	; 0x3c
    5c50:	f7ff fc00 	bl	5454 <cmd_complete>
    5c54:	0004      	movs	r4, r0

	rp->rl_size = ll_rl_size_get();
    5c56:	f007 ffad 	bl	dbb4 <ll_rl_size_get>
    5c5a:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    5c5c:	2300      	movs	r3, #0
    5c5e:	7023      	strb	r3, [r4, #0]
    5c60:	e040      	b.n	5ce4 <hci_cmd_handle+0x6c0>
    5c62:	2207      	movs	r2, #7
    5c64:	68a1      	ldr	r1, [r4, #8]
    5c66:	a810      	add	r0, sp, #64	; 0x40
    5c68:	f7fb f815 	bl	c96 <memcpy>
	struct bt_hci_cp_le_read_peer_rpa *cmd = (void *)buf->data;
	struct bt_hci_rp_le_read_peer_rpa *rp;
	bt_addr_le_t peer_id_addr;

	bt_addr_le_copy(&peer_id_addr, &cmd->peer_id_addr);
	rp = cmd_complete(evt, sizeof(*rp));
    5c6c:	2107      	movs	r1, #7
    5c6e:	a80f      	add	r0, sp, #60	; 0x3c
    5c70:	f7ff fbf0 	bl	5454 <cmd_complete>
    5c74:	0004      	movs	r4, r0

	rp->status = ll_rl_prpa_get(&peer_id_addr, &rp->peer_rpa);
    5c76:	1c41      	adds	r1, r0, #1
    5c78:	a810      	add	r0, sp, #64	; 0x40
    5c7a:	f008 f8c5 	bl	de08 <ll_rl_prpa_get>
    5c7e:	e018      	b.n	5cb2 <hci_cmd_handle+0x68e>
    5c80:	2207      	movs	r2, #7
    5c82:	68a1      	ldr	r1, [r4, #8]
    5c84:	a810      	add	r0, sp, #64	; 0x40
    5c86:	f7fb f806 	bl	c96 <memcpy>
	struct bt_hci_cp_le_read_local_rpa *cmd = (void *)buf->data;
	struct bt_hci_rp_le_read_local_rpa *rp;
	bt_addr_le_t peer_id_addr;

	bt_addr_le_copy(&peer_id_addr, &cmd->peer_id_addr);
	rp = cmd_complete(evt, sizeof(*rp));
    5c8a:	2107      	movs	r1, #7
    5c8c:	a80f      	add	r0, sp, #60	; 0x3c
    5c8e:	f7ff fbe1 	bl	5454 <cmd_complete>
    5c92:	0004      	movs	r4, r0

	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    5c94:	1c41      	adds	r1, r0, #1
    5c96:	a810      	add	r0, sp, #64	; 0x40
    5c98:	f008 f8ce 	bl	de38 <ll_rl_lrpa_get>
    5c9c:	e009      	b.n	5cb2 <hci_cmd_handle+0x68e>

static void le_set_addr_res_enable(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u8_t enable = cmd->enable;
    5c9e:	68a3      	ldr	r3, [r4, #8]

	ccst = cmd_complete(evt, sizeof(*ccst));
    5ca0:	2101      	movs	r1, #1
    5ca2:	a80f      	add	r0, sp, #60	; 0x3c

static void le_set_addr_res_enable(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u8_t enable = cmd->enable;
    5ca4:	781d      	ldrb	r5, [r3, #0]

	ccst = cmd_complete(evt, sizeof(*ccst));
    5ca6:	f7ff fbd5 	bl	5454 <cmd_complete>
    5caa:	0004      	movs	r4, r0
	ccst->status = ll_rl_enable(enable);
    5cac:	0028      	movs	r0, r5
    5cae:	f008 f8db 	bl	de68 <ll_rl_enable>
    5cb2:	7020      	strb	r0, [r4, #0]
    5cb4:	e016      	b.n	5ce4 <hci_cmd_handle+0x6c0>

static void le_set_rpa_timeout(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    5cb6:	68a2      	ldr	r2, [r4, #8]
    5cb8:	7850      	ldrb	r0, [r2, #1]
    5cba:	7813      	ldrb	r3, [r2, #0]
    5cbc:	0200      	lsls	r0, r0, #8

	ll_rl_timeout_set(timeout);
    5cbe:	4318      	orrs	r0, r3
    5cc0:	f008 f8ea 	bl	de98 <ll_rl_timeout_set>

	ccst = cmd_complete(evt, sizeof(*ccst));
    5cc4:	2101      	movs	r1, #1
    5cc6:	a80f      	add	r0, sp, #60	; 0x3c
    5cc8:	f7ff fbc4 	bl	5454 <cmd_complete>
	ccst->status = 0x00;
    5ccc:	2300      	movs	r3, #0
    5cce:	e010      	b.n	5cf2 <hci_cmd_handle+0x6ce>
    5cd0:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    5cd2:	79c1      	ldrb	r1, [r0, #7]
    5cd4:	f008 f8e8 	bl	dea8 <ll_priv_mode_set>
    5cd8:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    5cda:	2101      	movs	r1, #1
    5cdc:	a80f      	add	r0, sp, #60	; 0x3c
    5cde:	f7ff fbb9 	bl	5454 <cmd_complete>
	ccst->status = status;
    5ce2:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
	}

	return evt;
    5ce4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    5ce6:	e006      	b.n	5cf6 <hci_cmd_handle+0x6d2>
		err = -EINVAL;
		break;
	}

	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
    5ce8:	2101      	movs	r1, #1
    5cea:	a80f      	add	r0, sp, #60	; 0x3c
    5cec:	f7ff fbb2 	bl	5454 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    5cf0:	2301      	movs	r3, #1
    5cf2:	7003      	strb	r3, [r0, #0]
    5cf4:	e7f6      	b.n	5ce4 <hci_cmd_handle+0x6c0>
	}

	return evt;
}
    5cf6:	b015      	add	sp, #84	; 0x54
    5cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cfa:	46c0      	nop			; (mov r8, r8)

00005cfc <hci_acl_handle>:

int hci_acl_handle(struct net_buf *buf)
{
    5cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data;
	u16_t handle;
	u8_t flags;
	u16_t len;

	if (buf->len < sizeof(*acl)) {
    5cfe:	8983      	ldrh	r3, [r0, #12]

	return evt;
}

int hci_acl_handle(struct net_buf *buf)
{
    5d00:	0005      	movs	r5, r0
	struct pdu_data *pdu_data;
	u16_t handle;
	u8_t flags;
	u16_t len;

	if (buf->len < sizeof(*acl)) {
    5d02:	2b03      	cmp	r3, #3
    5d04:	d932      	bls.n	5d6c <hci_acl_handle+0x70>
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
    5d06:	6883      	ldr	r3, [r0, #8]
	len = sys_le16_to_cpu(acl->len);
	handle = sys_le16_to_cpu(acl->handle);
	net_buf_pull(buf, sizeof(*acl));
    5d08:	2104      	movs	r1, #4
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
    5d0a:	78de      	ldrb	r6, [r3, #3]
    5d0c:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    5d0e:	785c      	ldrb	r4, [r3, #1]
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
    5d10:	0236      	lsls	r6, r6, #8
    5d12:	4316      	orrs	r6, r2
	handle = sys_le16_to_cpu(acl->handle);
    5d14:	781a      	ldrb	r2, [r3, #0]
    5d16:	0224      	lsls	r4, r4, #8
	net_buf_pull(buf, sizeof(*acl));
    5d18:	3008      	adds	r0, #8
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
	handle = sys_le16_to_cpu(acl->handle);
    5d1a:	4314      	orrs	r4, r2
	net_buf_pull(buf, sizeof(*acl));
    5d1c:	f008 fc13 	bl	e546 <net_buf_simple_pull>

	if (buf->len < len) {
    5d20:	89ab      	ldrh	r3, [r5, #12]
    5d22:	42b3      	cmp	r3, r6
    5d24:	d322      	bcc.n	5d6c <hci_acl_handle+0x70>
		BT_ERR("Invalid HCI ACL packet length");
		return -EINVAL;
	}

	/* assigning flags first because handle will be overwritten */
	flags = bt_acl_flags(handle);
    5d26:	0b27      	lsrs	r7, r4, #12
	handle = bt_acl_handle(handle);
    5d28:	0524      	lsls	r4, r4, #20
    5d2a:	0d23      	lsrs	r3, r4, #20
    5d2c:	9301      	str	r3, [sp, #4]

	radio_pdu_node_tx = radio_tx_mem_acquire();
    5d2e:	f007 f809 	bl	cd44 <radio_tx_mem_acquire>
    5d32:	1e04      	subs	r4, r0, #0
	if (!radio_pdu_node_tx) {
    5d34:	d01c      	beq.n	5d70 <hci_acl_handle+0x74>
    5d36:	2203      	movs	r2, #3
    5d38:	7903      	ldrb	r3, [r0, #4]
		return -ENOBUFS;
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    5d3a:	4393      	bics	r3, r2
		BT_ERR("Tx Buffer Overflow");
		return -ENOBUFS;
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    5d3c:	2f00      	cmp	r7, #0
    5d3e:	d002      	beq.n	5d46 <hci_acl_handle+0x4a>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
	} else {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5d40:	2201      	movs	r2, #1
		BT_ERR("Tx Buffer Overflow");
		return -ENOBUFS;
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    5d42:	2f02      	cmp	r7, #2
    5d44:	d100      	bne.n	5d48 <hci_acl_handle+0x4c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    5d46:	2202      	movs	r2, #2
	} else {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5d48:	4313      	orrs	r3, r2
    5d4a:	7123      	strb	r3, [r4, #4]
	}
	pdu_data->len = len;
    5d4c:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    5d4e:	0032      	movs	r2, r6
    5d50:	68a9      	ldr	r1, [r5, #8]
    5d52:	1de0      	adds	r0, r4, #7
    5d54:	f7fa ff9f 	bl	c96 <memcpy>

	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    5d58:	0021      	movs	r1, r4
    5d5a:	9801      	ldr	r0, [sp, #4]
    5d5c:	f007 f806 	bl	cd6c <radio_tx_mem_enqueue>
		BT_ERR("Invalid Tx Enqueue");
		radio_tx_mem_release(radio_pdu_node_tx);
		return -EINVAL;
	}

	return 0;
    5d60:	2300      	movs	r3, #0
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
	}
	pdu_data->len = len;
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);

	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    5d62:	4298      	cmp	r0, r3
    5d64:	d006      	beq.n	5d74 <hci_acl_handle+0x78>
		BT_ERR("Invalid Tx Enqueue");
		radio_tx_mem_release(radio_pdu_node_tx);
    5d66:	0020      	movs	r0, r4
    5d68:	f006 fff6 	bl	cd58 <radio_tx_mem_release>
		return -EINVAL;
    5d6c:	2316      	movs	r3, #22
    5d6e:	e000      	b.n	5d72 <hci_acl_handle+0x76>
	handle = bt_acl_handle(handle);

	radio_pdu_node_tx = radio_tx_mem_acquire();
	if (!radio_pdu_node_tx) {
		BT_ERR("Tx Buffer Overflow");
		return -ENOBUFS;
    5d70:	2337      	movs	r3, #55	; 0x37
    5d72:	425b      	negs	r3, r3
		radio_tx_mem_release(radio_pdu_node_tx);
		return -EINVAL;
	}

	return 0;
}
    5d74:	0018      	movs	r0, r3
    5d76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005d78 <hci_acl_encode>:
	}
}

#if defined(CONFIG_BLUETOOTH_CONN)
void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    5d78:	b570      	push	{r4, r5, r6, lr}
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    5d7a:	7a03      	ldrb	r3, [r0, #8]
	}
}

#if defined(CONFIG_BLUETOOTH_CONN)
void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    5d7c:	0004      	movs	r4, r0
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    5d7e:	079b      	lsls	r3, r3, #30
    5d80:	0f9b      	lsrs	r3, r3, #30
    5d82:	3b01      	subs	r3, #1
    5d84:	b2db      	uxtb	r3, r3
	u16_t handle_flags;
	u16_t handle;
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;
    5d86:	88c5      	ldrh	r5, [r0, #6]

	switch (pdu_data->ll_id) {
    5d88:	2b01      	cmp	r3, #1
    5d8a:	d821      	bhi.n	5dd0 <hci_acl_encode+0x58>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    5d8c:	3108      	adds	r1, #8
    5d8e:	000e      	movs	r6, r1
    5d90:	2104      	movs	r1, #4
    5d92:	0030      	movs	r0, r6
    5d94:	f008 fbb6 	bl	e504 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    5d98:	2303      	movs	r3, #3
    5d9a:	7a22      	ldrb	r2, [r4, #8]
    5d9c:	4013      	ands	r3, r2
    5d9e:	2b02      	cmp	r3, #2
    5da0:	d102      	bne.n	5da8 <hci_acl_encode+0x30>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    5da2:	2380      	movs	r3, #128	; 0x80
    5da4:	019b      	lsls	r3, r3, #6
    5da6:	e001      	b.n	5dac <hci_acl_encode+0x34>
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    5da8:	2380      	movs	r3, #128	; 0x80
    5daa:	015b      	lsls	r3, r3, #5
    5dac:	431d      	orrs	r5, r3
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    5dae:	7005      	strb	r5, [r0, #0]
    5db0:	0a2d      	lsrs	r5, r5, #8
    5db2:	7045      	strb	r5, [r0, #1]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    5db4:	7a63      	ldrb	r3, [r4, #9]
    5db6:	7083      	strb	r3, [r0, #2]
    5db8:	2300      	movs	r3, #0
    5dba:	70c3      	strb	r3, [r0, #3]
		data = (void *)net_buf_add(buf, pdu_data->len);
    5dbc:	7a61      	ldrb	r1, [r4, #9]
    5dbe:	0030      	movs	r0, r6
    5dc0:	f008 fba0 	bl	e504 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    5dc4:	0021      	movs	r1, r4
    5dc6:	7a62      	ldrb	r2, [r4, #9]
    5dc8:	310b      	adds	r1, #11
    5dca:	f7fa ff64 	bl	c96 <memcpy>
	default:
		LL_ASSERT(0);
		break;
	}

}
    5dce:	bd70      	pop	{r4, r5, r6, pc}
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    5dd0:	b662      	cpsie	i
    5dd2:	2004      	movs	r0, #4
    5dd4:	df02      	svc	2
	...

00005dd8 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    5dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dda:	0004      	movs	r4, r0
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    5ddc:	0007      	movs	r7, r0

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    5dde:	7900      	ldrb	r0, [r0, #4]

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    5de0:	b08b      	sub	sp, #44	; 0x2c
    5de2:	000e      	movs	r6, r1
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    5de4:	3708      	adds	r7, #8
			   struct pdu_data *pdu_data, struct net_buf *buf)
{
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;
    5de6:	88e5      	ldrh	r5, [r4, #6]
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    5de8:	2801      	cmp	r0, #1
    5dea:	d100      	bne.n	5dee <hci_evt_encode+0x16>
    5dec:	e15a      	b.n	60a4 <hci_evt_encode+0x2cc>
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;

	switch (node_rx->hdr.type) {
    5dee:	3802      	subs	r0, #2
    5df0:	280a      	cmp	r0, #10
    5df2:	d900      	bls.n	5df6 <hci_evt_encode+0x1e>
    5df4:	e225      	b.n	6242 <hci_evt_encode+0x46a>
    5df6:	f7fa f9d3 	bl	1a0 <__gnu_thumb1_case_uhi>
    5dfa:	000b      	.short	0x000b
    5dfc:	004a004a 	.word	0x004a004a
    5e00:	0077004e 	.word	0x0077004e
    5e04:	00ce00b3 	.word	0x00ce00b3
    5e08:	010f00fa 	.word	0x010f00fa
    5e0c:	01370122 	.word	0x01370122
}

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    5e10:	2207      	movs	r2, #7
    5e12:	49d7      	ldr	r1, [pc, #860]	; (6170 <hci_evt_encode+0x398>)
    5e14:	a803      	add	r0, sp, #12
    5e16:	f7fa ff3e 	bl	c96 <memcpy>
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5e1a:	4bd6      	ldr	r3, [pc, #856]	; (6174 <hci_evt_encode+0x39c>)
    5e1c:	685b      	ldr	r3, [r3, #4]
    5e1e:	009b      	lsls	r3, r3, #2
    5e20:	d400      	bmi.n	5e24 <hci_evt_encode+0x4c>
    5e22:	e211      	b.n	6248 <hci_evt_encode+0x470>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    5e24:	4bd4      	ldr	r3, [pc, #848]	; (6178 <hci_evt_encode+0x3a0>)
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5e26:	681b      	ldr	r3, [r3, #0]
    5e28:	079b      	lsls	r3, r3, #30
    5e2a:	d400      	bmi.n	5e2e <hci_evt_encode+0x56>
    5e2c:	e20c      	b.n	6248 <hci_evt_encode+0x470>
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    5e2e:	230f      	movs	r3, #15
    5e30:	7a22      	ldrb	r2, [r4, #8]
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    5e32:	2500      	movs	r5, #0
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    5e34:	4013      	ands	r3, r2
    5e36:	2b01      	cmp	r3, #1
    5e38:	d002      	beq.n	5e40 <hci_evt_encode+0x68>
		data_len = (adv->len - BDADDR_SIZE);
    5e3a:	7a65      	ldrb	r5, [r4, #9]
    5e3c:	3d06      	subs	r5, #6
    5e3e:	b2ed      	uxtb	r5, r5
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    5e40:	002a      	movs	r2, r5
    5e42:	320b      	adds	r2, #11
    5e44:	b2d2      	uxtb	r2, r2
    5e46:	2102      	movs	r1, #2
    5e48:	0030      	movs	r0, r6
    5e4a:	f7ff fb25 	bl	5498 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    5e4e:	2301      	movs	r3, #1
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    5e50:	0021      	movs	r1, r4
	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    5e52:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    5e54:	7a23      	ldrb	r3, [r4, #8]
    5e56:	aa03      	add	r2, sp, #12
    5e58:	071b      	lsls	r3, r3, #28
    5e5a:	0f1b      	lsrs	r3, r3, #28
    5e5c:	5cd3      	ldrb	r3, [r2, r3]
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    5e5e:	0006      	movs	r6, r0
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    5e60:	7043      	strb	r3, [r0, #1]
	adv_info->addr.type = adv->tx_addr;
    5e62:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    5e64:	310a      	adds	r1, #10

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
    5e66:	065b      	lsls	r3, r3, #25
    5e68:	0fdb      	lsrs	r3, r3, #31
    5e6a:	7083      	strb	r3, [r0, #2]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    5e6c:	2206      	movs	r2, #6
    5e6e:	3003      	adds	r0, #3
    5e70:	f7fa ff11 	bl	c96 <memcpy>
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    5e74:	0039      	movs	r1, r7
	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
    5e76:	7275      	strb	r5, [r6, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    5e78:	360a      	adds	r6, #10
    5e7a:	3108      	adds	r1, #8
    5e7c:	002a      	movs	r2, r5
    5e7e:	0030      	movs	r0, r6
    5e80:	f7fa ff09 	bl	c96 <memcpy>
	/* RSSI */
	rssi = &adv_info->data[0] + data_len;
	*rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5e84:	7a61      	ldrb	r1, [r4, #9]
    5e86:	1864      	adds	r4, r4, r1
    5e88:	7aa3      	ldrb	r3, [r4, #10]
    5e8a:	5573      	strb	r3, [r6, r5]
    5e8c:	e1dc      	b.n	6248 <hci_evt_encode+0x470>
}

static void le_adv_ext_coded_report(struct pdu_data *pdu_data, u8_t *b,
				    struct net_buf *buf)
{
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    5e8e:	0038      	movs	r0, r7
    5e90:	f7ff fb8c 	bl	55ac <le_adv_ext_report.isra.53>
    5e94:	e1d8      	b.n	6248 <hci_evt_encode+0x470>
    5e96:	0025      	movs	r5, r4
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5e98:	4bb6      	ldr	r3, [pc, #728]	; (6174 <hci_evt_encode+0x39c>)
    5e9a:	350a      	adds	r5, #10
    5e9c:	685b      	ldr	r3, [r3, #4]
    5e9e:	009b      	lsls	r3, r3, #2
    5ea0:	d503      	bpl.n	5eaa <hci_evt_encode+0xd2>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    5ea2:	4bb5      	ldr	r3, [pc, #724]	; (6178 <hci_evt_encode+0x3a0>)
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5ea4:	681b      	ldr	r3, [r3, #0]
    5ea6:	035b      	lsls	r3, r3, #13
    5ea8:	d40f      	bmi.n	5eca <hci_evt_encode+0xf2>
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    5eaa:	7a23      	ldrb	r3, [r4, #8]
    5eac:	ae01      	add	r6, sp, #4
    5eae:	065b      	lsls	r3, r3, #25
    5eb0:	0fdb      	lsrs	r3, r3, #31
    5eb2:	7033      	strb	r3, [r6, #0]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    5eb4:	466b      	mov	r3, sp
    5eb6:	0029      	movs	r1, r5
    5eb8:	2206      	movs	r2, #6
    5eba:	1d58      	adds	r0, r3, #5
    5ebc:	f7fa feeb 	bl	c96 <memcpy>
		       sizeof(bt_addr_t));
		rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
			 offsetof(struct pdu_adv, payload) + adv->len];

		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5ec0:	a903      	add	r1, sp, #12
    5ec2:	0030      	movs	r0, r6
    5ec4:	f7ff fb40 	bl	5548 <bt_addr_le_to_str.constprop.58>
    5ec8:	e1be      	b.n	6248 <hci_evt_encode+0x470>
			handle, addr_str, rssi);

		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    5eca:	2208      	movs	r2, #8
    5ecc:	2113      	movs	r1, #19
    5ece:	0030      	movs	r0, r6
    5ed0:	f7ff fae2 	bl	5498 <meta_evt>
	sep->handle = 0;
    5ed4:	2300      	movs	r3, #0
    5ed6:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    5ed8:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    5eda:	2206      	movs	r2, #6
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
	sep->handle = 0;
	sep->addr.type = adv->tx_addr;
    5edc:	065b      	lsls	r3, r3, #25
    5ede:	0fdb      	lsrs	r3, r3, #31
    5ee0:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    5ee2:	0029      	movs	r1, r5
    5ee4:	3002      	adds	r0, #2
    5ee6:	e10c      	b.n	6102 <hci_evt_encode+0x32a>
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5ee8:	4ba2      	ldr	r3, [pc, #648]	; (6174 <hci_evt_encode+0x39c>)
    5eea:	685b      	ldr	r3, [r3, #4]
    5eec:	009b      	lsls	r3, r3, #2
    5eee:	d400      	bmi.n	5ef2 <hci_evt_encode+0x11a>
    5ef0:	e1aa      	b.n	6248 <hci_evt_encode+0x470>
    5ef2:	2101      	movs	r1, #1
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE)) {
    5ef4:	4ba0      	ldr	r3, [pc, #640]	; (6178 <hci_evt_encode+0x3a0>)
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5ef6:	681b      	ldr	r3, [r3, #0]
    5ef8:	420b      	tst	r3, r1
    5efa:	d100      	bne.n	5efe <hci_evt_encode+0x126>
    5efc:	e1a4      	b.n	6248 <hci_evt_encode+0x470>
		return;
	}

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    5efe:	2212      	movs	r2, #18
    5f00:	0030      	movs	r0, r6
    5f02:	f7ff fac9 	bl	5498 <meta_evt>

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5f06:	0021      	movs	r1, r4
		return;
	}

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    5f08:	0006      	movs	r6, r0

	sep->status = radio_cc->status;
    5f0a:	0027      	movs	r7, r4
    5f0c:	7ae3      	ldrb	r3, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    5f0e:	7045      	strb	r5, [r0, #1]
    5f10:	0a2d      	lsrs	r5, r5, #8

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
    5f12:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    5f14:	7085      	strb	r5, [r0, #2]
	sep->role = radio_cc->role;
    5f16:	7b23      	ldrb	r3, [r4, #12]
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5f18:	2206      	movs	r2, #6

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
    5f1a:	70c3      	strb	r3, [r0, #3]
	sep->peer_addr.type = radio_cc->peer_addr_type;
    5f1c:	7b63      	ldrb	r3, [r4, #13]
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5f1e:	310e      	adds	r1, #14
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
    5f20:	7103      	strb	r3, [r0, #4]
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5f22:	3005      	adds	r0, #5
    5f24:	f7fa feb7 	bl	c96 <memcpy>
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
    5f28:	7f63      	ldrb	r3, [r4, #29]
    5f2a:	7f22      	ldrb	r2, [r4, #28]
    5f2c:	021b      	lsls	r3, r3, #8
    5f2e:	4313      	orrs	r3, r2
    5f30:	72f3      	strb	r3, [r6, #11]
    5f32:	0a1b      	lsrs	r3, r3, #8
    5f34:	7333      	strb	r3, [r6, #12]
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
    5f36:	7fe3      	ldrb	r3, [r4, #31]
    5f38:	7fa2      	ldrb	r2, [r4, #30]
    5f3a:	021b      	lsls	r3, r3, #8
    5f3c:	4313      	orrs	r3, r2
    5f3e:	7373      	strb	r3, [r6, #13]
    5f40:	0a1b      	lsrs	r3, r3, #8

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
    5f42:	370b      	adds	r7, #11
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
    5f44:	73b3      	strb	r3, [r6, #14]
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5f46:	7dbb      	ldrb	r3, [r7, #22]
    5f48:	7d7a      	ldrb	r2, [r7, #21]
    5f4a:	021b      	lsls	r3, r3, #8
    5f4c:	4313      	orrs	r3, r2
    5f4e:	73f3      	strb	r3, [r6, #15]
    5f50:	0a1b      	lsrs	r3, r3, #8
    5f52:	7433      	strb	r3, [r6, #16]
	sep->clock_accuracy = radio_cc->mca;
    5f54:	7dfb      	ldrb	r3, [r7, #23]

	conn_count++;
    5f56:	4a89      	ldr	r2, [pc, #548]	; (617c <hci_evt_encode+0x3a4>)
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
	sep->clock_accuracy = radio_cc->mca;
    5f58:	7473      	strb	r3, [r6, #17]

	conn_count++;
    5f5a:	6813      	ldr	r3, [r2, #0]
    5f5c:	3301      	adds	r3, #1
    5f5e:	e018      	b.n	5f92 <hci_evt_encode+0x1ba>
static void disconn_complete(struct pdu_data *pdu_data, u16_t handle,
			     struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *ep;

	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    5f60:	4b84      	ldr	r3, [pc, #528]	; (6174 <hci_evt_encode+0x39c>)
    5f62:	681b      	ldr	r3, [r3, #0]
    5f64:	06db      	lsls	r3, r3, #27
    5f66:	d400      	bmi.n	5f6a <hci_evt_encode+0x192>
    5f68:	e16e      	b.n	6248 <hci_evt_encode+0x470>
		return;
	}

	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    5f6a:	2204      	movs	r2, #4
    5f6c:	2105      	movs	r1, #5
    5f6e:	0030      	movs	r0, r6
    5f70:	f7ff fa4a 	bl	5408 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    5f74:	0030      	movs	r0, r6
    5f76:	2104      	movs	r1, #4
    5f78:	3008      	adds	r0, #8
    5f7a:	f008 fac3 	bl	e504 <net_buf_simple_add>

	ep->status = 0x00;
    5f7e:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    5f80:	7045      	strb	r5, [r0, #1]
    5f82:	0a2d      	lsrs	r5, r5, #8
	}

	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
    5f84:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    5f86:	7085      	strb	r5, [r0, #2]
	ep->reason = *((u8_t *)pdu_data);
    5f88:	7a23      	ldrb	r3, [r4, #8]

	conn_count--;
    5f8a:	4a7c      	ldr	r2, [pc, #496]	; (617c <hci_evt_encode+0x3a4>)
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->reason = *((u8_t *)pdu_data);
    5f8c:	70c3      	strb	r3, [r0, #3]

	conn_count--;
    5f8e:	6813      	ldr	r3, [r2, #0]
    5f90:	3b01      	subs	r3, #1
    5f92:	6013      	str	r3, [r2, #0]
    5f94:	e158      	b.n	6248 <hci_evt_encode+0x470>
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_update_complete *sep;
	struct radio_le_conn_update_cmplt *radio_cu;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5f96:	4b77      	ldr	r3, [pc, #476]	; (6174 <hci_evt_encode+0x39c>)
    5f98:	685b      	ldr	r3, [r3, #4]
    5f9a:	009b      	lsls	r3, r3, #2
    5f9c:	d400      	bmi.n	5fa0 <hci_evt_encode+0x1c8>
    5f9e:	e153      	b.n	6248 <hci_evt_encode+0x470>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    5fa0:	4b75      	ldr	r3, [pc, #468]	; (6178 <hci_evt_encode+0x3a0>)
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_update_complete *sep;
	struct radio_le_conn_update_cmplt *radio_cu;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5fa2:	681b      	ldr	r3, [r3, #0]
    5fa4:	075b      	lsls	r3, r3, #29
    5fa6:	d400      	bmi.n	5faa <hci_evt_encode+0x1d2>
    5fa8:	e14e      	b.n	6248 <hci_evt_encode+0x470>
	}

	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    5faa:	2209      	movs	r2, #9
    5fac:	2103      	movs	r1, #3
    5fae:	0030      	movs	r0, r6
    5fb0:	f7ff fa72 	bl	5498 <meta_evt>

	sep->status = radio_cu->status;
    5fb4:	0023      	movs	r3, r4
    5fb6:	7ae2      	ldrb	r2, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    5fb8:	7045      	strb	r5, [r0, #1]
    5fba:	0a2d      	lsrs	r5, r5, #8
	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_cu->status;
    5fbc:	7002      	strb	r2, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    5fbe:	7085      	strb	r5, [r0, #2]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    5fc0:	7b62      	ldrb	r2, [r4, #13]
    5fc2:	7b21      	ldrb	r1, [r4, #12]
    5fc4:	0212      	lsls	r2, r2, #8
    5fc6:	430a      	orrs	r2, r1
    5fc8:	70c2      	strb	r2, [r0, #3]
    5fca:	0a12      	lsrs	r2, r2, #8
    5fcc:	7102      	strb	r2, [r0, #4]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    5fce:	7be2      	ldrb	r2, [r4, #15]
    5fd0:	7ba1      	ldrb	r1, [r4, #14]
    5fd2:	0212      	lsls	r2, r2, #8
    5fd4:	430a      	orrs	r2, r1
    5fd6:	7142      	strb	r2, [r0, #5]
    5fd8:	0a12      	lsrs	r2, r2, #8
    5fda:	7182      	strb	r2, [r0, #6]
	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_cu->status;
    5fdc:	330b      	adds	r3, #11
	sep->handle = sys_cpu_to_le16(handle);
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    5fde:	799b      	ldrb	r3, [r3, #6]
    5fe0:	7c22      	ldrb	r2, [r4, #16]
    5fe2:	021b      	lsls	r3, r3, #8
    5fe4:	4313      	orrs	r3, r2
    5fe6:	71c3      	strb	r3, [r0, #7]
    5fe8:	0a1b      	lsrs	r3, r3, #8
    5fea:	7203      	strb	r3, [r0, #8]
    5fec:	e12c      	b.n	6248 <hci_evt_encode+0x470>
static void enc_refresh_complete(struct pdu_data *pdu_data, u16_t handle,
				 struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_key_refresh_complete *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    5fee:	4b61      	ldr	r3, [pc, #388]	; (6174 <hci_evt_encode+0x39c>)
    5ff0:	685b      	ldr	r3, [r3, #4]
    5ff2:	041b      	lsls	r3, r3, #16
    5ff4:	d400      	bmi.n	5ff8 <hci_evt_encode+0x220>
    5ff6:	e127      	b.n	6248 <hci_evt_encode+0x470>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    5ff8:	2203      	movs	r2, #3
    5ffa:	2130      	movs	r1, #48	; 0x30
    5ffc:	0030      	movs	r0, r6
    5ffe:	f7ff fa03 	bl	5408 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    6002:	0030      	movs	r0, r6
    6004:	2103      	movs	r1, #3
    6006:	3008      	adds	r0, #8
    6008:	f008 fa7c 	bl	e504 <net_buf_simple_add>

	ep->status = 0x00;
    600c:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    600e:	7045      	strb	r5, [r0, #1]
    6010:	0a2d      	lsrs	r5, r5, #8
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
    6012:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    6014:	7085      	strb	r5, [r0, #2]
    6016:	e117      	b.n	6248 <hci_evt_encode+0x470>
static void auth_payload_timeout_exp(struct pdu_data *pdu_data, u16_t handle,
				     struct net_buf *buf)
{
	struct bt_hci_evt_auth_payload_timeout_exp *ep;

	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    6018:	4b59      	ldr	r3, [pc, #356]	; (6180 <hci_evt_encode+0x3a8>)
    601a:	681b      	ldr	r3, [r3, #0]
    601c:	021b      	lsls	r3, r3, #8
    601e:	d400      	bmi.n	6022 <hci_evt_encode+0x24a>
    6020:	e112      	b.n	6248 <hci_evt_encode+0x470>
		return;
	}

	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    6022:	2202      	movs	r2, #2
    6024:	2157      	movs	r1, #87	; 0x57
    6026:	0030      	movs	r0, r6
    6028:	f7ff f9ee 	bl	5408 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    602c:	0030      	movs	r0, r6
    602e:	2102      	movs	r1, #2
    6030:	3008      	adds	r0, #8
    6032:	f008 fa67 	bl	e504 <net_buf_simple_add>

	ep->handle = sys_cpu_to_le16(handle);
    6036:	7005      	strb	r5, [r0, #0]
    6038:	0a2d      	lsrs	r5, r5, #8
    603a:	7045      	strb	r5, [r0, #1]
    603c:	e104      	b.n	6248 <hci_evt_encode+0x470>
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_chan_sel_algo *sep;
	struct radio_le_chan_sel_algo *radio_le_chan_sel_algo;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    603e:	4b4d      	ldr	r3, [pc, #308]	; (6174 <hci_evt_encode+0x39c>)
    6040:	685b      	ldr	r3, [r3, #4]
    6042:	009b      	lsls	r3, r3, #2
    6044:	d400      	bmi.n	6048 <hci_evt_encode+0x270>
    6046:	e0ff      	b.n	6248 <hci_evt_encode+0x470>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    6048:	4b4b      	ldr	r3, [pc, #300]	; (6178 <hci_evt_encode+0x3a0>)
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_chan_sel_algo *sep;
	struct radio_le_chan_sel_algo *radio_le_chan_sel_algo;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    604a:	681b      	ldr	r3, [r3, #0]
    604c:	031b      	lsls	r3, r3, #12
    604e:	d400      	bmi.n	6052 <hci_evt_encode+0x27a>
    6050:	e0fa      	b.n	6248 <hci_evt_encode+0x470>
	}

	radio_le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
					pdu_data->payload.lldata;

	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    6052:	2203      	movs	r2, #3
    6054:	2114      	movs	r1, #20
    6056:	0030      	movs	r0, r6
    6058:	f7ff fa1e 	bl	5498 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    605c:	7005      	strb	r5, [r0, #0]
    605e:	0a2d      	lsrs	r5, r5, #8
    6060:	7045      	strb	r5, [r0, #1]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    6062:	7ae3      	ldrb	r3, [r4, #11]
    6064:	7083      	strb	r3, [r0, #2]
    6066:	e0ef      	b.n	6248 <hci_evt_encode+0x470>
	struct radio_le_phy_upd_cmplt *radio_le_phy_upd_cmplt;

	radio_le_phy_upd_cmplt = (struct radio_le_phy_upd_cmplt *)
				 pdu_data->payload.lldata;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6068:	4b42      	ldr	r3, [pc, #264]	; (6174 <hci_evt_encode+0x39c>)
    606a:	685b      	ldr	r3, [r3, #4]
    606c:	009b      	lsls	r3, r3, #2
    606e:	d400      	bmi.n	6072 <hci_evt_encode+0x29a>
    6070:	e0ea      	b.n	6248 <hci_evt_encode+0x470>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    6072:	4b41      	ldr	r3, [pc, #260]	; (6178 <hci_evt_encode+0x3a0>)
	struct radio_le_phy_upd_cmplt *radio_le_phy_upd_cmplt;

	radio_le_phy_upd_cmplt = (struct radio_le_phy_upd_cmplt *)
				 pdu_data->payload.lldata;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6074:	681b      	ldr	r3, [r3, #0]
    6076:	051b      	lsls	r3, r3, #20
    6078:	d400      	bmi.n	607c <hci_evt_encode+0x2a4>
    607a:	e0e5      	b.n	6248 <hci_evt_encode+0x470>
			find_lsb_set(radio_le_phy_upd_cmplt->tx),
			find_lsb_set(radio_le_phy_upd_cmplt->rx));
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    607c:	2205      	movs	r2, #5
    607e:	210c      	movs	r1, #12
    6080:	0030      	movs	r0, r6
    6082:	f7ff fa09 	bl	5498 <meta_evt>

	sep->status = radio_le_phy_upd_cmplt->status;
    6086:	7ae3      	ldrb	r3, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    6088:	7045      	strb	r5, [r0, #1]
    608a:	0a2d      	lsrs	r5, r5, #8
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_le_phy_upd_cmplt->status;
    608c:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    608e:	7085      	strb	r5, [r0, #2]
			find_lsb_set(radio_le_phy_upd_cmplt->tx),
			find_lsb_set(radio_le_phy_upd_cmplt->rx));
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    6090:	0006      	movs	r6, r0
    6092:	7b20      	ldrb	r0, [r4, #12]
    6094:	f7fa fa5c 	bl	550 <__ffssi2>

	sep->status = radio_le_phy_upd_cmplt->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    6098:	70f0      	strb	r0, [r6, #3]
    609a:	7b60      	ldrb	r0, [r4, #13]
    609c:	f7fa fa58 	bl	550 <__ffssi2>
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    60a0:	7130      	strb	r0, [r6, #4]
    60a2:	e0d1      	b.n	6248 <hci_evt_encode+0x470>
static void encode_data_ctrl(struct radio_pdu_node_rx *node_rx,
			     struct pdu_data *pdu_data, struct net_buf *buf)
{
	u16_t handle = node_rx->hdr.handle;

	switch (pdu_data->payload.llctrl.opcode) {
    60a4:	7ae0      	ldrb	r0, [r4, #11]
    60a6:	3803      	subs	r0, #3
    60a8:	2812      	cmp	r0, #18
    60aa:	d900      	bls.n	60ae <hci_evt_encode+0x2d6>
    60ac:	e0c9      	b.n	6242 <hci_evt_encode+0x46a>
    60ae:	f7fa f863 	bl	178 <__gnu_thumb1_case_uqi>
    60b2:	c80a      	.short	0xc80a
    60b4:	c8be2bc8 	.word	0xc8be2bc8
    60b8:	34c8c82f 	.word	0x34c8c82f
    60bc:	c869c859 	.word	0xc869c859
    60c0:	91c8c8c8 	.word	0x91c8c8c8
    60c4:	91          	.byte	0x91
    60c5:	00          	.byte	0x00
static void le_ltk_request(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    60c6:	4b2b      	ldr	r3, [pc, #172]	; (6174 <hci_evt_encode+0x39c>)
    60c8:	685b      	ldr	r3, [r3, #4]
    60ca:	009b      	lsls	r3, r3, #2
    60cc:	d400      	bmi.n	60d0 <hci_evt_encode+0x2f8>
    60ce:	e0bb      	b.n	6248 <hci_evt_encode+0x470>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    60d0:	4b29      	ldr	r3, [pc, #164]	; (6178 <hci_evt_encode+0x3a0>)
static void le_ltk_request(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    60d2:	681b      	ldr	r3, [r3, #0]
    60d4:	06db      	lsls	r3, r3, #27
    60d6:	d400      	bmi.n	60da <hci_evt_encode+0x302>
    60d8:	e0b6      	b.n	6248 <hci_evt_encode+0x470>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    60da:	220c      	movs	r2, #12
    60dc:	2105      	movs	r1, #5
    60de:	0030      	movs	r0, r6
    60e0:	f7ff f9da 	bl	5498 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    60e4:	0021      	movs	r1, r4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    60e6:	0006      	movs	r6, r0

	sep->handle = sys_cpu_to_le16(handle);
    60e8:	7005      	strb	r5, [r0, #0]
    60ea:	0a2d      	lsrs	r5, r5, #8
    60ec:	7045      	strb	r5, [r0, #1]
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    60ee:	310c      	adds	r1, #12
    60f0:	2208      	movs	r2, #8
    60f2:	3002      	adds	r0, #2
    60f4:	f7fa fdcf 	bl	c96 <memcpy>
	       sizeof(u64_t));
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    60f8:	0021      	movs	r1, r4
    60fa:	0030      	movs	r0, r6
    60fc:	2202      	movs	r2, #2
    60fe:	3114      	adds	r1, #20
    6100:	300a      	adds	r0, #10
    6102:	f7fa fdc8 	bl	c96 <memcpy>
    6106:	e09f      	b.n	6248 <hci_evt_encode+0x470>
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		le_ltk_request(pdu_data, handle, buf);
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		encrypt_change(0x00, handle, buf);
    6108:	000a      	movs	r2, r1
    610a:	2000      	movs	r0, #0
    610c:	0029      	movs	r1, r5
    610e:	e02c      	b.n	616a <hci_evt_encode+0x392>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_FEATURE_RSP:
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    6110:	000b      	movs	r3, r1
    6112:	002a      	movs	r2, r5
    6114:	0039      	movs	r1, r7
    6116:	2000      	movs	r0, #0
    6118:	e090      	b.n	623c <hci_evt_encode+0x464>
				struct net_buf *buf)
{
	struct pdu_data_llctrl_version_ind *ver_ind;
	struct bt_hci_evt_remote_version_info *ep;

	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    611a:	4b16      	ldr	r3, [pc, #88]	; (6174 <hci_evt_encode+0x39c>)
    611c:	681b      	ldr	r3, [r3, #0]
    611e:	051b      	lsls	r3, r3, #20
    6120:	d400      	bmi.n	6124 <hci_evt_encode+0x34c>
    6122:	e091      	b.n	6248 <hci_evt_encode+0x470>
		return;
	}

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    6124:	2208      	movs	r2, #8
    6126:	210c      	movs	r1, #12
    6128:	0030      	movs	r0, r6
    612a:	f7ff f96d 	bl	5408 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    612e:	0030      	movs	r0, r6
    6130:	2108      	movs	r1, #8
    6132:	3008      	adds	r0, #8
    6134:	f008 f9e6 	bl	e504 <net_buf_simple_add>

	ver_ind = &pdu_data->payload.llctrl.ctrldata.version_ind;
	ep->status = 0x00;
    6138:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    613a:	7045      	strb	r5, [r0, #1]
    613c:	0a2d      	lsrs	r5, r5, #8

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ver_ind = &pdu_data->payload.llctrl.ctrldata.version_ind;
	ep->status = 0x00;
    613e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    6140:	7085      	strb	r5, [r0, #2]
	ep->version = ver_ind->version_number;
    6142:	7b23      	ldrb	r3, [r4, #12]
    6144:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    6146:	7ba3      	ldrb	r3, [r4, #14]
    6148:	7b62      	ldrb	r2, [r4, #13]
    614a:	021b      	lsls	r3, r3, #8
    614c:	4313      	orrs	r3, r2
    614e:	7103      	strb	r3, [r0, #4]
    6150:	0a1b      	lsrs	r3, r3, #8
    6152:	7143      	strb	r3, [r0, #5]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    6154:	7c23      	ldrb	r3, [r4, #16]
    6156:	7be2      	ldrb	r2, [r4, #15]
    6158:	021b      	lsls	r3, r3, #8
    615a:	4313      	orrs	r3, r2
    615c:	7183      	strb	r3, [r0, #6]
    615e:	0a1b      	lsrs	r3, r3, #8
    6160:	71c3      	strb	r3, [r0, #7]
    6162:	e071      	b.n	6248 <hci_evt_encode+0x470>
		remote_version_info(pdu_data, handle, buf);
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    6164:	000a      	movs	r2, r1
    6166:	0029      	movs	r1, r5
    6168:	7b20      	ldrb	r0, [r4, #12]
    616a:	f7ff f9a9 	bl	54c0 <encrypt_change>
    616e:	e06b      	b.n	6248 <hci_evt_encode+0x470>
    6170:	0000ff9b 	.word	0x0000ff9b
    6174:	20000578 	.word	0x20000578
    6178:	20000580 	.word	0x20000580
    617c:	20000c14 	.word	0x20000c14
    6180:	20000c18 	.word	0x20000c18
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6184:	4b31      	ldr	r3, [pc, #196]	; (624c <hci_evt_encode+0x474>)
    6186:	685b      	ldr	r3, [r3, #4]
    6188:	009b      	lsls	r3, r3, #2
    618a:	d55d      	bpl.n	6248 <hci_evt_encode+0x470>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    618c:	4b30      	ldr	r3, [pc, #192]	; (6250 <hci_evt_encode+0x478>)
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    618e:	681b      	ldr	r3, [r3, #0]
    6190:	069b      	lsls	r3, r3, #26
    6192:	d559      	bpl.n	6248 <hci_evt_encode+0x470>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    6194:	220a      	movs	r2, #10
    6196:	2106      	movs	r1, #6
    6198:	0030      	movs	r0, r6
    619a:	f7ff f97d 	bl	5498 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    619e:	7005      	strb	r5, [r0, #0]
    61a0:	0a2d      	lsrs	r5, r5, #8
    61a2:	7045      	strb	r5, [r0, #1]
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    61a4:	7b63      	ldrb	r3, [r4, #13]
    61a6:	7b22      	ldrb	r2, [r4, #12]
    61a8:	021b      	lsls	r3, r3, #8
    61aa:	4313      	orrs	r3, r2
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
    61ac:	7083      	strb	r3, [r0, #2]
    61ae:	0a1b      	lsrs	r3, r3, #8
    61b0:	70c3      	strb	r3, [r0, #3]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    61b2:	7be3      	ldrb	r3, [r4, #15]
    61b4:	7ba2      	ldrb	r2, [r4, #14]
    61b6:	021b      	lsls	r3, r3, #8
    61b8:	4313      	orrs	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
    61ba:	7103      	strb	r3, [r0, #4]
    61bc:	0a1b      	lsrs	r3, r3, #8
    61be:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    61c0:	7c63      	ldrb	r3, [r4, #17]
    61c2:	7c22      	ldrb	r2, [r4, #16]
    61c4:	021b      	lsls	r3, r3, #8
    61c6:	4313      	orrs	r3, r2
    61c8:	7183      	strb	r3, [r0, #6]
    61ca:	0a1b      	lsrs	r3, r3, #8
    61cc:	71c3      	strb	r3, [r0, #7]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    61ce:	7ca2      	ldrb	r2, [r4, #18]
    61d0:	7ce3      	ldrb	r3, [r4, #19]
    61d2:	e026      	b.n	6222 <hci_evt_encode+0x44a>
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    61d4:	4b1d      	ldr	r3, [pc, #116]	; (624c <hci_evt_encode+0x474>)
    61d6:	685b      	ldr	r3, [r3, #4]
    61d8:	009b      	lsls	r3, r3, #2
    61da:	d535      	bpl.n	6248 <hci_evt_encode+0x470>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    61dc:	4b1c      	ldr	r3, [pc, #112]	; (6250 <hci_evt_encode+0x478>)
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    61de:	681b      	ldr	r3, [r3, #0]
    61e0:	065b      	lsls	r3, r3, #25
    61e2:	d531      	bpl.n	6248 <hci_evt_encode+0x470>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    61e4:	220a      	movs	r2, #10
    61e6:	2107      	movs	r1, #7
    61e8:	0030      	movs	r0, r6
    61ea:	f7ff f955 	bl	5498 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    61ee:	7005      	strb	r5, [r0, #0]
    61f0:	0a2d      	lsrs	r5, r5, #8
    61f2:	7045      	strb	r5, [r0, #1]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    61f4:	7c63      	ldrb	r3, [r4, #17]
    61f6:	7c22      	ldrb	r2, [r4, #16]
    61f8:	021b      	lsls	r3, r3, #8
    61fa:	4313      	orrs	r3, r2
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
    61fc:	7083      	strb	r3, [r0, #2]
    61fe:	0a1b      	lsrs	r3, r3, #8
    6200:	70c3      	strb	r3, [r0, #3]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    6202:	7ce3      	ldrb	r3, [r4, #19]
    6204:	7ca2      	ldrb	r2, [r4, #18]
    6206:	021b      	lsls	r3, r3, #8
    6208:	4313      	orrs	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
    620a:	7103      	strb	r3, [r0, #4]
    620c:	0a1b      	lsrs	r3, r3, #8
    620e:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    6210:	7b63      	ldrb	r3, [r4, #13]
    6212:	7b22      	ldrb	r2, [r4, #12]
    6214:	021b      	lsls	r3, r3, #8
    6216:	4313      	orrs	r3, r2
	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
    6218:	7183      	strb	r3, [r0, #6]
    621a:	0a1b      	lsrs	r3, r3, #8
    621c:	71c3      	strb	r3, [r0, #7]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    621e:	7ba2      	ldrb	r2, [r4, #14]
    6220:	7be3      	ldrb	r3, [r4, #15]
    6222:	021b      	lsls	r3, r3, #8
    6224:	4313      	orrs	r3, r2
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
    6226:	7203      	strb	r3, [r0, #8]
    6228:	0a1b      	lsrs	r3, r3, #8
    622a:	7243      	strb	r3, [r0, #9]
    622c:	e00c      	b.n	6248 <hci_evt_encode+0x470>

static void le_unknown_rsp(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{

	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    622e:	7b23      	ldrb	r3, [r4, #12]
    6230:	2b0e      	cmp	r3, #14
    6232:	d109      	bne.n	6248 <hci_evt_encode+0x470>
	case PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ:
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    6234:	000b      	movs	r3, r1
    6236:	002a      	movs	r2, r5
    6238:	2100      	movs	r1, #0
    623a:	201a      	movs	r0, #26
    623c:	f7ff f95c 	bl	54f8 <le_remote_feat_complete>
    6240:	e002      	b.n	6248 <hci_evt_encode+0x470>
	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		le_unknown_rsp(pdu_data, handle, buf);
		break;

	default:
		LL_ASSERT(0);
    6242:	b662      	cpsie	i
    6244:	2004      	movs	r0, #4
    6246:	df02      	svc	2
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    6248:	b00b      	add	sp, #44	; 0x2c
    624a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    624c:	20000578 	.word	0x20000578
    6250:	20000580 	.word	0x20000580

00006254 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    6254:	b570      	push	{r4, r5, r6, lr}
    6256:	0005      	movs	r5, r0
    6258:	000c      	movs	r4, r1
    625a:	0016      	movs	r6, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    625c:	2113      	movs	r1, #19
    625e:	2205      	movs	r2, #5
    6260:	f7ff f8d2 	bl	5408 <evt_create>

	ep = net_buf_add(buf, len);
    6264:	0028      	movs	r0, r5
    6266:	2105      	movs	r1, #5
    6268:	3008      	adds	r0, #8
    626a:	f008 f94b 	bl	e504 <net_buf_simple_add>
	ep->num_handles = num_handles;
    626e:	2301      	movs	r3, #1
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
	hc->count = sys_cpu_to_le16(num);
    6270:	2200      	movs	r2, #0

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    6272:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    6274:	7044      	strb	r4, [r0, #1]
    6276:	18c3      	adds	r3, r0, r3
	hc->count = sys_cpu_to_le16(num);
    6278:	b2b6      	uxth	r6, r6
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    627a:	0a24      	lsrs	r4, r4, #8
	hc->count = sys_cpu_to_le16(num);
    627c:	709e      	strb	r6, [r3, #2]
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    627e:	705c      	strb	r4, [r3, #1]
	hc->count = sys_cpu_to_le16(num);
    6280:	70da      	strb	r2, [r3, #3]
}
    6282:	bd70      	pop	{r4, r5, r6, pc}

00006284 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    6284:	7903      	ldrb	r3, [r0, #4]
    6286:	2b01      	cmp	r3, #1
    6288:	d006      	beq.n	6298 <hci_get_class+0x14>
    628a:	3b02      	subs	r3, #2
    628c:	b2db      	uxtb	r3, r3
    628e:	2b0a      	cmp	r3, #10
    6290:	d80a      	bhi.n	62a8 <hci_get_class+0x24>
    6292:	4a07      	ldr	r2, [pc, #28]	; (62b0 <hci_get_class+0x2c>)
    6294:	56d0      	ldrsb	r0, [r2, r3]
    6296:	e009      	b.n	62ac <hci_get_class+0x28>
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    6298:	7a03      	ldrb	r3, [r0, #8]
    629a:	2003      	movs	r0, #3
    629c:	4003      	ands	r3, r0
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    629e:	3b03      	subs	r3, #3
    62a0:	425a      	negs	r2, r3
    62a2:	4153      	adcs	r3, r2
    62a4:	1ac0      	subs	r0, r0, r3
    62a6:	e001      	b.n	62ac <hci_get_class+0x28>
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    62a8:	2001      	movs	r0, #1
    62aa:	4240      	negs	r0, r0
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
	}
}
    62ac:	4770      	bx	lr
    62ae:	46c0      	nop			; (mov r8, r8)
    62b0:	000102bf 	.word	0x000102bf

000062b4 <hci_init>:

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    62b4:	2001      	movs	r0, #1
    62b6:	4b08      	ldr	r3, [pc, #32]	; (62d8 <hci_init+0x24>)
    62b8:	4908      	ldr	r1, [pc, #32]	; (62dc <hci_init+0x28>)
    62ba:	4240      	negs	r0, r0
    62bc:	6018      	str	r0, [r3, #0]
    62be:	6059      	str	r1, [r3, #4]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    62c0:	2000      	movs	r0, #0
    62c2:	2100      	movs	r1, #0
    62c4:	4b06      	ldr	r3, [pc, #24]	; (62e0 <hci_init+0x2c>)
    62c6:	6018      	str	r0, [r3, #0]
    62c8:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    62ca:	201f      	movs	r0, #31
    62cc:	2100      	movs	r1, #0
    62ce:	4b05      	ldr	r3, [pc, #20]	; (62e4 <hci_init+0x30>)
    62d0:	6018      	str	r0, [r3, #0]
    62d2:	6059      	str	r1, [r3, #4]
{
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    62d4:	4770      	bx	lr
    62d6:	46c0      	nop			; (mov r8, r8)
    62d8:	20000578 	.word	0x20000578
    62dc:	00001fff 	.word	0x00001fff
    62e0:	20000c18 	.word	0x20000c18
    62e4:	20000580 	.word	0x20000580

000062e8 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    62e8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    62ea:	4802      	ldr	r0, [pc, #8]	; (62f4 <_hci_driver_init+0xc>)
    62ec:	f7fc fd3a 	bl	2d64 <bt_hci_driver_register>

	return 0;
}
    62f0:	2000      	movs	r0, #0
    62f2:	bd10      	pop	{r4, pc}
    62f4:	000102cc 	.word	0x000102cc

000062f8 <hci_driver_send>:

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    62f8:	b510      	push	{r4, lr}
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    62fa:	8983      	ldrh	r3, [r0, #12]

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    62fc:	0004      	movs	r4, r0
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    62fe:	2b00      	cmp	r3, #0
    6300:	d015      	beq.n	632e <hci_driver_send+0x36>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    6302:	2203      	movs	r2, #3
    6304:	89c3      	ldrh	r3, [r0, #14]
    6306:	18c3      	adds	r3, r0, r3
    6308:	3313      	adds	r3, #19
    630a:	4393      	bics	r3, r2
		BT_ERR("Empty HCI packet");
		return -EINVAL;
	}

	type = bt_buf_get_type(buf);
	switch (type) {
    630c:	781b      	ldrb	r3, [r3, #0]
    630e:	2b00      	cmp	r3, #0
    6310:	d006      	beq.n	6320 <hci_driver_send+0x28>
    6312:	2b02      	cmp	r3, #2
    6314:	d10b      	bne.n	632e <hci_driver_send+0x36>
#if defined(CONFIG_BLUETOOTH_CONN)
	case BT_BUF_ACL_OUT:
		err = hci_acl_handle(buf);
    6316:	f7ff fcf1 	bl	5cfc <hci_acl_handle>
	default:
		BT_ERR("Unknown HCI type %u", type);
		return -EINVAL;
	}

	if (!err) {
    631a:	2800      	cmp	r0, #0
    631c:	d10e      	bne.n	633c <hci_driver_send+0x44>
    631e:	e009      	b.n	6334 <hci_driver_send+0x3c>

static int cmd_handle(struct net_buf *buf)
{
	struct net_buf *evt;

	evt = hci_cmd_handle(buf);
    6320:	f7ff f980 	bl	5624 <hci_cmd_handle>
	if (evt) {
    6324:	2800      	cmp	r0, #0
    6326:	d005      	beq.n	6334 <hci_driver_send+0x3c>
		BT_DBG("Replying with event of %u bytes", evt->len);
		bt_recv_prio(evt);
    6328:	f7fc fc82 	bl	2c30 <bt_recv_prio>
    632c:	e002      	b.n	6334 <hci_driver_send+0x3c>
	case BT_BUF_CMD:
		err = cmd_handle(buf);
		break;
	default:
		BT_ERR("Unknown HCI type %u", type);
		return -EINVAL;
    632e:	2016      	movs	r0, #22
    6330:	4240      	negs	r0, r0
    6332:	e003      	b.n	633c <hci_driver_send+0x44>
	}

	if (!err) {
		net_buf_unref(buf);
    6334:	0020      	movs	r0, r4
    6336:	f008 f8c3 	bl	e4c0 <net_buf_unref>
    633a:	2000      	movs	r0, #0
	}

	BT_DBG("exit: %d", err);

	return err;
}
    633c:	bd10      	pop	{r4, pc}
	...

00006340 <recv_thread>:
	return buf;
}
#endif

static void recv_thread(void *p1, void *p2, void *p3)
{
    6340:	b513      	push	{r0, r1, r4, lr}

		/* process host buffers first if any */
		buf = process_hbuf();

#else
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    6342:	2101      	movs	r1, #1
    6344:	4821      	ldr	r0, [pc, #132]	; (63cc <recv_thread+0x8c>)
    6346:	4249      	negs	r1, r1
    6348:	f009 f854 	bl	f3f4 <k_queue_get>
    634c:	1e04      	subs	r4, r0, #0
#endif
		BT_DBG("unblocked");

		if (node_rx && !buf) {
    634e:	d03a      	beq.n	63c6 <recv_thread+0x86>
	return buf;
}

static inline struct net_buf *process_node(struct radio_pdu_node_rx *node_rx)
{
	s8_t class = hci_get_class(node_rx);
    6350:	f7ff ff98 	bl	6284 <hci_get_class>
    6354:	9401      	str	r4, [sp, #4]
					  s8_t class)
{
	struct net_buf *buf = NULL;

	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
    6356:	2800      	cmp	r0, #0
    6358:	db1c      	blt.n	6394 <recv_thread+0x54>
    635a:	2802      	cmp	r0, #2
    635c:	dd0b      	ble.n	6376 <recv_thread+0x36>
    635e:	2803      	cmp	r0, #3
    6360:	d118      	bne.n	6394 <recv_thread+0x54>
		}
		break;
#if defined(CONFIG_BLUETOOTH_CONN)
	case HCI_CLASS_ACL_DATA:
		/* generate ACL data */
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    6362:	2101      	movs	r1, #1
    6364:	4249      	negs	r1, r1
    6366:	f7fc fe11 	bl	2f8c <bt_buf_get_rx>
    636a:	0004      	movs	r4, r0
		hci_acl_encode(node_rx, buf);
    636c:	0001      	movs	r1, r0
    636e:	9801      	ldr	r0, [sp, #4]
    6370:	f7ff fd02 	bl	5d78 <hci_acl_encode>
    6374:	e011      	b.n	639a <recv_thread+0x5a>
	switch (class) {
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    6376:	2100      	movs	r1, #0
	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    6378:	2801      	cmp	r0, #1
    637a:	d002      	beq.n	6382 <recv_thread+0x42>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
		} else {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    637c:	2101      	movs	r1, #1
    637e:	2001      	movs	r0, #1
    6380:	4249      	negs	r1, r1
    6382:	f7fc fe03 	bl	2f8c <bt_buf_get_rx>
    6386:	1e04      	subs	r4, r0, #0
		}
		if (buf) {
    6388:	d007      	beq.n	639a <recv_thread+0x5a>
			hci_evt_encode(node_rx, buf);
    638a:	0001      	movs	r1, r0
    638c:	9801      	ldr	r0, [sp, #4]
    638e:	f7ff fd23 	bl	5dd8 <hci_evt_encode>
    6392:	e002      	b.n	639a <recv_thread+0x5a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
		hci_acl_encode(node_rx, buf);
		break;
#endif
	default:
		LL_ASSERT(0);
    6394:	b662      	cpsie	i
    6396:	2004      	movs	r0, #4
    6398:	df02      	svc	2
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
    639a:	9b01      	ldr	r3, [sp, #4]
    639c:	2100      	movs	r1, #0
    639e:	88d8      	ldrh	r0, [r3, #6]
    63a0:	f006 fc9e 	bl	cce0 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    63a4:	2200      	movs	r2, #0
    63a6:	9b01      	ldr	r3, [sp, #4]
	radio_rx_mem_release(&node_rx);
    63a8:	a801      	add	r0, sp, #4
		LL_ASSERT(0);
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
	node_rx->hdr.onion.next = 0;
    63aa:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    63ac:	f006 fc32 	bl	cc14 <radio_rx_mem_release>
		if (node_rx && !buf) {
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
    63b0:	2c00      	cmp	r4, #0
    63b2:	d008      	beq.n	63c6 <recv_thread+0x86>
			if (buf->len) {
    63b4:	89a3      	ldrh	r3, [r4, #12]
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    63b6:	0020      	movs	r0, r4
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
			if (buf->len) {
    63b8:	2b00      	cmp	r3, #0
    63ba:	d002      	beq.n	63c2 <recv_thread+0x82>
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    63bc:	f7fc f8c0 	bl	2540 <bt_recv>
    63c0:	e001      	b.n	63c6 <recv_thread+0x86>
			} else {
				net_buf_unref(buf);
    63c2:	f008 f87d 	bl	e4c0 <net_buf_unref>
			}
		}

		k_yield();
    63c6:	f009 f95f 	bl	f688 <k_yield>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
			rx_ts = k_uptime_get_32();
		}
#endif
	}
    63ca:	e7ba      	b.n	6342 <recv_thread+0x2>
    63cc:	20000778 	.word	0x20000778

000063d0 <prio_recv_thread>:
static sys_slist_t hbuf_pend;
static s32_t hbuf_count;
#endif

static void prio_recv_thread(void *p1, void *p2, void *p3)
{
    63d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    63d2:	466b      	mov	r3, sp
    63d4:	1c9d      	adds	r5, r3, #2
    63d6:	0029      	movs	r1, r5
    63d8:	a801      	add	r0, sp, #4
    63da:	f006 fbdf 	bl	cb9c <radio_rx_get>
    63de:	1e04      	subs	r4, r0, #0
    63e0:	d00f      	beq.n	6402 <prio_recv_thread+0x32>
#if defined(CONFIG_BLUETOOTH_CONN)
			struct net_buf *buf;

			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    63e2:	2101      	movs	r1, #1
    63e4:	2001      	movs	r0, #1
    63e6:	4249      	negs	r1, r1
    63e8:	f7fc fdd0 	bl	2f8c <bt_buf_get_rx>
    63ec:	0006      	movs	r6, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    63ee:	8829      	ldrh	r1, [r5, #0]
    63f0:	0022      	movs	r2, r4
    63f2:	f7ff ff2f 	bl	6254 <hci_num_cmplt_encode>
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
			bt_recv_prio(buf);
    63f6:	0030      	movs	r0, r6
    63f8:	f7fc fc1a 	bl	2c30 <bt_recv_prio>
			k_yield();
    63fc:	f009 f944 	bl	f688 <k_yield>
    6400:	e7e7      	b.n	63d2 <prio_recv_thread+0x2>
#endif
		}

		if (node_rx) {
    6402:	9b01      	ldr	r3, [sp, #4]
    6404:	2b00      	cmp	r3, #0
    6406:	d006      	beq.n	6416 <prio_recv_thread+0x46>

			radio_rx_dequeue();
    6408:	f006 fefe 	bl	d208 <radio_rx_dequeue>

			BT_DBG("RX node enqueue");
			k_fifo_put(&recv_fifo, node_rx);
    640c:	9901      	ldr	r1, [sp, #4]
    640e:	4805      	ldr	r0, [pc, #20]	; (6424 <prio_recv_thread+0x54>)
    6410:	f008 ffa0 	bl	f354 <k_queue_append>
    6414:	e7dd      	b.n	63d2 <prio_recv_thread+0x2>

			continue;
		}

		BT_DBG("sem take...");
		k_sem_take(&sem_prio_recv, K_FOREVER);
    6416:	2101      	movs	r1, #1
    6418:	4803      	ldr	r0, [pc, #12]	; (6428 <prio_recv_thread+0x58>)
    641a:	4249      	negs	r1, r1
    641c:	f009 fa44 	bl	f8a8 <k_sem_take>
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    6420:	e7d7      	b.n	63d2 <prio_recv_thread+0x2>
    6422:	46c0      	nop			; (mov r8, r8)
    6424:	20000778 	.word	0x20000778
    6428:	20000750 	.word	0x20000750

0000642c <hci_driver_open>:

	return err;
}

static int hci_driver_open(void)
{
    642c:	b510      	push	{r4, lr}
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    642e:	4814      	ldr	r0, [pc, #80]	; (6480 <hci_driver_open+0x54>)

	return err;
}

static int hci_driver_open(void)
{
    6430:	b086      	sub	sp, #24
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    6432:	f006 ffd1 	bl	d3d8 <ll_init>
    6436:	1e04      	subs	r4, r0, #0
	if (err) {
    6438:	d11f      	bne.n	647a <hci_driver_open+0x4e>
	}

#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hci_init(&hbuf_signal);
#else
	hci_init(NULL);
    643a:	f7ff ff3b 	bl	62b4 <hci_init>
#endif

	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    643e:	230a      	movs	r3, #10
    6440:	22e0      	movs	r2, #224	; 0xe0
    6442:	425b      	negs	r3, r3
    6444:	9303      	str	r3, [sp, #12]
    6446:	0052      	lsls	r2, r2, #1
    6448:	4b0e      	ldr	r3, [pc, #56]	; (6484 <hci_driver_open+0x58>)
    644a:	490f      	ldr	r1, [pc, #60]	; (6488 <hci_driver_open+0x5c>)
    644c:	9405      	str	r4, [sp, #20]
    644e:	9404      	str	r4, [sp, #16]
    6450:	9402      	str	r4, [sp, #8]
    6452:	9401      	str	r4, [sp, #4]
    6454:	9400      	str	r4, [sp, #0]
    6456:	480d      	ldr	r0, [pc, #52]	; (648c <hci_driver_open+0x60>)
    6458:	f009 fbdc 	bl	fc14 <k_thread_create>
			K_THREAD_STACK_SIZEOF(prio_recv_thread_stack),
			prio_recv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(6), 0, K_NO_WAIT);

	k_thread_create(&recv_thread_data, recv_thread_stack,
    645c:	2309      	movs	r3, #9
    645e:	2280      	movs	r2, #128	; 0x80
    6460:	425b      	negs	r3, r3
    6462:	9303      	str	r3, [sp, #12]
    6464:	9405      	str	r4, [sp, #20]
    6466:	9404      	str	r4, [sp, #16]
    6468:	9402      	str	r4, [sp, #8]
    646a:	9401      	str	r4, [sp, #4]
    646c:	9400      	str	r4, [sp, #0]
    646e:	4b08      	ldr	r3, [pc, #32]	; (6490 <hci_driver_open+0x64>)
    6470:	00d2      	lsls	r2, r2, #3
    6472:	4908      	ldr	r1, [pc, #32]	; (6494 <hci_driver_open+0x68>)
    6474:	4808      	ldr	r0, [pc, #32]	; (6498 <hci_driver_open+0x6c>)
    6476:	f009 fbcd 	bl	fc14 <k_thread_create>
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	BT_DBG("Success.");

	return 0;
}
    647a:	0020      	movs	r0, r4
    647c:	b006      	add	sp, #24
    647e:	bd10      	pop	{r4, pc}
    6480:	20000750 	.word	0x20000750
    6484:	000063d1 	.word	0x000063d1
    6488:	200024a0 	.word	0x200024a0
    648c:	20001bd0 	.word	0x20001bd0
    6490:	00006341 	.word	0x00006341
    6494:	20001d84 	.word	0x20001d84
    6498:	20001b48 	.word	0x20001b48

0000649c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    649e:	2504      	movs	r5, #4
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    64a0:	270c      	movs	r7, #12
void mayfly_init(void)
{
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
    64a2:	3d01      	subs	r5, #1
    64a4:	b2ed      	uxtb	r5, r5
    64a6:	2dff      	cmp	r5, #255	; 0xff
    64a8:	d015      	beq.n	64d6 <mayfly_init+0x3a>
    64aa:	2404      	movs	r4, #4
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    64ac:	2630      	movs	r6, #48	; 0x30
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    64ae:	3c01      	subs	r4, #1
    64b0:	b2e4      	uxtb	r4, r4
    64b2:	2cff      	cmp	r4, #255	; 0xff
    64b4:	d0f5      	beq.n	64a2 <mayfly_init+0x6>
			memq_init(mfl[callee_id][caller_id],
    64b6:	0033      	movs	r3, r6
    64b8:	0039      	movs	r1, r7
    64ba:	436b      	muls	r3, r5
    64bc:	4361      	muls	r1, r4
    64be:	18c9      	adds	r1, r1, r3
    64c0:	4b05      	ldr	r3, [pc, #20]	; (64d8 <mayfly_init+0x3c>)
    64c2:	00a8      	lsls	r0, r5, #2
    64c4:	1859      	adds	r1, r3, r1
    64c6:	1900      	adds	r0, r0, r4
    64c8:	4b04      	ldr	r3, [pc, #16]	; (64dc <mayfly_init+0x40>)
    64ca:	00c0      	lsls	r0, r0, #3
    64cc:	1d0a      	adds	r2, r1, #4
    64ce:	1818      	adds	r0, r3, r0
    64d0:	f000 f98c 	bl	67ec <memq_init>
    64d4:	e7eb      	b.n	64ae <mayfly_init+0x12>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    64d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64d8:	20000ca0 	.word	0x20000ca0
    64dc:	20000c20 	.word	0x20000c20

000064e0 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    64e0:	b570      	push	{r4, r5, r6, lr}
    64e2:	250c      	movs	r5, #12
    64e4:	2430      	movs	r4, #48	; 0x30
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    64e6:	002b      	movs	r3, r5
    64e8:	434c      	muls	r4, r1
    64ea:	4343      	muls	r3, r0
    64ec:	4e0b      	ldr	r6, [pc, #44]	; (651c <mayfly_enable+0x3c>)
    64ee:	191c      	adds	r4, r3, r4
    64f0:	1933      	adds	r3, r6, r4
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	if (enable) {
    64f2:	2a00      	cmp	r2, #0
    64f4:	d008      	beq.n	6508 <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
    64f6:	7a1d      	ldrb	r5, [r3, #8]
    64f8:	7a5c      	ldrb	r4, [r3, #9]
    64fa:	42ac      	cmp	r4, r5
    64fc:	d101      	bne.n	6502 <mayfly_enable+0x22>
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    64fe:	3401      	adds	r4, #1
    6500:	721c      	strb	r4, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    6502:	f006 ff22 	bl	d34a <mayfly_enable_cb>
    6506:	e007      	b.n	6518 <mayfly_enable+0x38>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    6508:	7a9c      	ldrb	r4, [r3, #10]
    650a:	7ada      	ldrb	r2, [r3, #11]
    650c:	42a2      	cmp	r2, r4
    650e:	d103      	bne.n	6518 <mayfly_enable+0x38>
		    mft[callee_id][caller_id].disable_ack) {
			mft[callee_id][caller_id].disable_req++;
    6510:	3201      	adds	r2, #1
    6512:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    6514:	f006 ff44 	bl	d3a0 <mayfly_pend>
		}
	}
}
    6518:	bd70      	pop	{r4, r5, r6, pc}
    651a:	46c0      	nop			; (mov r8, r8)
    651c:	20000ca0 	.word	0x20000ca0

00006520 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    6520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6522:	0005      	movs	r5, r0
    6524:	000e      	movs	r6, r1
    6526:	001c      	movs	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    6528:	2a00      	cmp	r2, #0
    652a:	d001      	beq.n	6530 <mayfly_enqueue+0x10>
    652c:	2101      	movs	r1, #1
    652e:	e017      	b.n	6560 <mayfly_enqueue+0x40>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6530:	f006 ff27 	bl	d382 <mayfly_prio_is_equal>
    6534:	2800      	cmp	r0, #0
    6536:	d0f9      	beq.n	652c <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
    6538:	0031      	movs	r1, r6
    653a:	0028      	movs	r0, r5
    653c:	f006 ff14 	bl	d368 <mayfly_is_enabled>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6540:	2800      	cmp	r0, #0
    6542:	d0f3      	beq.n	652c <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
    6544:	230c      	movs	r3, #12
    6546:	436b      	muls	r3, r5
    6548:	001a      	movs	r2, r3
    654a:	2330      	movs	r3, #48	; 0x30
    654c:	4373      	muls	r3, r6
    654e:	18d3      	adds	r3, r2, r3
    6550:	4a1d      	ldr	r2, [pc, #116]	; (65c8 <mayfly_enqueue+0xa8>)
    6552:	18d3      	adds	r3, r2, r3
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    6554:	7a9a      	ldrb	r2, [r3, #10]
    6556:	7adb      	ldrb	r3, [r3, #11]
    6558:	1ad3      	subs	r3, r2, r3
    655a:	1e5a      	subs	r2, r3, #1
    655c:	4193      	sbcs	r3, r2
    655e:	0019      	movs	r1, r3

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    6560:	2203      	movs	r2, #3
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    6562:	7863      	ldrb	r3, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    6564:	7827      	ldrb	r7, [r4, #0]
    6566:	1aff      	subs	r7, r7, r3
    6568:	4017      	ands	r7, r2
	if (state != 0) {
    656a:	d010      	beq.n	658e <mayfly_enqueue+0x6e>
		if (chain) {
    656c:	2900      	cmp	r1, #0
    656e:	d00a      	beq.n	6586 <mayfly_enqueue+0x66>

				return 0;
			}

			/* already ready */
			return 1;
    6570:	2001      	movs	r0, #1

	/* already in queue */
	state = (m->_req - ack) & 0x03;
	if (state != 0) {
		if (chain) {
			if (state != 1) {
    6572:	4287      	cmp	r7, r0
    6574:	d026      	beq.n	65c4 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    6576:	181b      	adds	r3, r3, r0
    6578:	b2db      	uxtb	r3, r3
    657a:	7023      	strb	r3, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    657c:	0031      	movs	r1, r6
    657e:	0028      	movs	r0, r5
    6580:	f006 ff0e 	bl	d3a0 <mayfly_pend>
    6584:	e008      	b.n	6598 <mayfly_enqueue+0x78>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    6586:	3302      	adds	r3, #2
    6588:	b2db      	uxtb	r3, r3
    658a:	7023      	strb	r3, [r4, #0]
    658c:	e001      	b.n	6592 <mayfly_enqueue+0x72>
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    658e:	2900      	cmp	r1, #0
    6590:	d104      	bne.n	659c <mayfly_enqueue+0x7c>
		/* call fp */
		m->fp(m->param);
    6592:	68e3      	ldr	r3, [r4, #12]
    6594:	68a0      	ldr	r0, [r4, #8]
    6596:	4798      	blx	r3

		return 0;
    6598:	2000      	movs	r0, #0
    659a:	e013      	b.n	65c4 <mayfly_enqueue+0xa4>
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    659c:	3301      	adds	r3, #1
    659e:	b2db      	uxtb	r3, r3
    65a0:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    65a2:	220c      	movs	r2, #12
    65a4:	2330      	movs	r3, #48	; 0x30
    65a6:	436a      	muls	r2, r5
    65a8:	4373      	muls	r3, r6
    65aa:	18d2      	adds	r2, r2, r3
    65ac:	4b06      	ldr	r3, [pc, #24]	; (65c8 <mayfly_enqueue+0xa8>)
    65ae:	6861      	ldr	r1, [r4, #4]
    65b0:	189a      	adds	r2, r3, r2
    65b2:	3204      	adds	r2, #4
    65b4:	0020      	movs	r0, r4
    65b6:	f000 f91c 	bl	67f2 <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    65ba:	0028      	movs	r0, r5
    65bc:	0031      	movs	r1, r6
    65be:	f006 feef 	bl	d3a0 <mayfly_pend>

	return 0;
    65c2:	0038      	movs	r0, r7
}
    65c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65c6:	46c0      	nop			; (mov r8, r8)
    65c8:	20000ca0 	.word	0x20000ca0

000065cc <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
	u8_t enable = 0;
    65cc:	2300      	movs	r3, #0

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    65ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    65d0:	0005      	movs	r5, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    65d2:	2404      	movs	r4, #4
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    65d4:	2730      	movs	r7, #48	; 0x30

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    65d6:	b087      	sub	sp, #28
	u8_t disable = 0;
	u8_t enable = 0;
    65d8:	9300      	str	r3, [sp, #0]
	return 0;
}

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
    65da:	9301      	str	r3, [sp, #4]
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    65dc:	3c01      	subs	r4, #1
    65de:	b2e4      	uxtb	r4, r4
    65e0:	2cff      	cmp	r4, #255	; 0xff
    65e2:	d070      	beq.n	66c6 <mayfly_run+0xfa>
		void *link;
		struct mayfly *m = 0;
    65e4:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    65e6:	220c      	movs	r2, #12

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;
    65e8:	9305      	str	r3, [sp, #20]

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    65ea:	003b      	movs	r3, r7
    65ec:	4362      	muls	r2, r4
    65ee:	436b      	muls	r3, r5
    65f0:	493b      	ldr	r1, [pc, #236]	; (66e0 <mayfly_run+0x114>)
    65f2:	18d3      	adds	r3, r2, r3
    65f4:	18c8      	adds	r0, r1, r3
    65f6:	aa05      	add	r2, sp, #20
    65f8:	5859      	ldr	r1, [r3, r1]
    65fa:	6840      	ldr	r0, [r0, #4]
    65fc:	f000 f900 	bl	6800 <memq_peek>
    6600:	0006      	movs	r6, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    6602:	2e00      	cmp	r6, #0
    6604:	d042      	beq.n	668c <mayfly_run+0xc0>
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
    6606:	2003      	movs	r0, #3
		while (link) {
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    6608:	9b05      	ldr	r3, [sp, #20]
			state = (req - m->_ack) & 0x03;
    660a:	785a      	ldrb	r2, [r3, #1]
		while (link) {
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    660c:	7819      	ldrb	r1, [r3, #0]
			state = (req - m->_ack) & 0x03;
    660e:	1a89      	subs	r1, r1, r2
    6610:	4008      	ands	r0, r1
    6612:	9002      	str	r0, [sp, #8]
			if (state == 1) {
    6614:	2801      	cmp	r0, #1
    6616:	d104      	bne.n	6622 <mayfly_run+0x56>
				/* mark mayfly as ran */
				m->_ack--;
    6618:	3a01      	subs	r2, #1
    661a:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    661c:	6898      	ldr	r0, [r3, #8]
    661e:	68da      	ldr	r2, [r3, #12]
    6620:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			req = m->_req;
    6622:	9a05      	ldr	r2, [sp, #20]
    6624:	7813      	ldrb	r3, [r2, #0]
    6626:	b2db      	uxtb	r3, r3
    6628:	9303      	str	r3, [sp, #12]
			if (((req - m->_ack) & 0x03) != 1) {
    662a:	7853      	ldrb	r3, [r2, #1]
    662c:	9a03      	ldr	r2, [sp, #12]
    662e:	1ad3      	subs	r3, r2, r3
    6630:	2203      	movs	r2, #3
    6632:	4013      	ands	r3, r2
    6634:	2b01      	cmp	r3, #1
    6636:	d010      	beq.n	665a <mayfly_run+0x8e>
				memq_dequeue(mft[callee_id][caller_id].tail,
    6638:	003b      	movs	r3, r7
    663a:	3209      	adds	r2, #9
    663c:	4362      	muls	r2, r4
    663e:	436b      	muls	r3, r5
    6640:	18d3      	adds	r3, r2, r3
    6642:	4a27      	ldr	r2, [pc, #156]	; (66e0 <mayfly_run+0x114>)
    6644:	18d3      	adds	r3, r2, r3
    6646:	0019      	movs	r1, r3
    6648:	2200      	movs	r2, #0
    664a:	6858      	ldr	r0, [r3, #4]
    664c:	f000 f8e3 	bl	6816 <memq_dequeue>

				/* release link into dequeued mayfly struct */
				m->_link = link;

				/* reset mayfly state to idle */
				m->_ack = req;
    6650:	466a      	mov	r2, sp
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    6652:	9b05      	ldr	r3, [sp, #20]

				/* reset mayfly state to idle */
				m->_ack = req;
    6654:	7b12      	ldrb	r2, [r2, #12]
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    6656:	605e      	str	r6, [r3, #4]

				/* reset mayfly state to idle */
				m->_ack = req;
    6658:	705a      	strb	r2, [r3, #1]
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    665a:	003b      	movs	r3, r7
    665c:	220c      	movs	r2, #12
    665e:	436b      	muls	r3, r5
    6660:	4362      	muls	r2, r4
    6662:	491f      	ldr	r1, [pc, #124]	; (66e0 <mayfly_run+0x114>)
    6664:	18d3      	adds	r3, r2, r3
    6666:	18c8      	adds	r0, r1, r3
    6668:	aa05      	add	r2, sp, #20
    666a:	5859      	ldr	r1, [r3, r1]
    666c:	6840      	ldr	r0, [r0, #4]
    666e:	f000 f8c7 	bl	6800 <memq_peek>
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    6672:	9b02      	ldr	r3, [sp, #8]
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    6674:	0006      	movs	r6, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    6676:	2b01      	cmp	r3, #1
    6678:	d1c3      	bne.n	6602 <mayfly_run+0x36>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    667a:	2c00      	cmp	r4, #0
    667c:	d101      	bne.n	6682 <mayfly_run+0xb6>
    667e:	2800      	cmp	r0, #0
    6680:	d004      	beq.n	668c <mayfly_run+0xc0>
					mayfly_pend(callee_id, callee_id);
    6682:	0029      	movs	r1, r5
    6684:	0028      	movs	r0, r5
    6686:	f006 fe8b 	bl	d3a0 <mayfly_pend>
    668a:	e027      	b.n	66dc <mayfly_run+0x110>
					return;
				}
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
    668c:	003a      	movs	r2, r7
    668e:	200c      	movs	r0, #12
    6690:	436a      	muls	r2, r5
    6692:	4360      	muls	r0, r4
    6694:	4b12      	ldr	r3, [pc, #72]	; (66e0 <mayfly_run+0x114>)
    6696:	1882      	adds	r2, r0, r2
    6698:	189a      	adds	r2, r3, r2
    669a:	7a90      	ldrb	r0, [r2, #10]
    669c:	7ad6      	ldrb	r6, [r2, #11]
    669e:	0019      	movs	r1, r3
    66a0:	4286      	cmp	r6, r0
    66a2:	d002      	beq.n	66aa <mayfly_run+0xde>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    66a4:	2301      	movs	r3, #1

			mft[callee_id][caller_id].disable_ack =
    66a6:	72d0      	strb	r0, [r2, #11]
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    66a8:	9301      	str	r3, [sp, #4]

			mft[callee_id][caller_id].disable_ack =
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    66aa:	230c      	movs	r3, #12
    66ac:	003a      	movs	r2, r7
    66ae:	4363      	muls	r3, r4
    66b0:	436a      	muls	r2, r5
    66b2:	189b      	adds	r3, r3, r2
    66b4:	18cb      	adds	r3, r1, r3
    66b6:	7a1a      	ldrb	r2, [r3, #8]
    66b8:	7a59      	ldrb	r1, [r3, #9]
    66ba:	4291      	cmp	r1, r2
    66bc:	d08e      	beq.n	65dc <mayfly_run+0x10>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;

			mft[callee_id][caller_id].enable_ack =
    66be:	725a      	strb	r2, [r3, #9]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;
    66c0:	2301      	movs	r3, #1
    66c2:	9300      	str	r3, [sp, #0]
    66c4:	e78a      	b.n	65dc <mayfly_run+0x10>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    66c6:	9b01      	ldr	r3, [sp, #4]
    66c8:	2b00      	cmp	r3, #0
    66ca:	d007      	beq.n	66dc <mayfly_run+0x110>
    66cc:	9b00      	ldr	r3, [sp, #0]
    66ce:	2b00      	cmp	r3, #0
    66d0:	d104      	bne.n	66dc <mayfly_run+0x110>
		mayfly_enable_cb(callee_id, callee_id, 0);
    66d2:	001a      	movs	r2, r3
    66d4:	0029      	movs	r1, r5
    66d6:	0028      	movs	r0, r5
    66d8:	f006 fe37 	bl	d34a <mayfly_enable_cb>
	}
}
    66dc:	b007      	add	sp, #28
    66de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66e0:	20000ca0 	.word	0x20000ca0

000066e4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    66e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    66e6:	0014      	movs	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    66e8:	2203      	movs	r2, #3

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    66ea:	0005      	movs	r5, r0
	*mem_head = mem_pool;
    66ec:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    66ee:	1dc3      	adds	r3, r0, #7

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    66f0:	1e60      	subs	r0, r4, #1
    66f2:	b280      	uxth	r0, r0
    66f4:	4348      	muls	r0, r1
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    66f6:	4393      	bics	r3, r2
    66f8:	801c      	strh	r4, [r3, #0]

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    66fa:	000e      	movs	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    66fc:	1828      	adds	r0, r5, r0
    66fe:	3201      	adds	r2, #1
    6700:	2100      	movs	r1, #0
    6702:	f7fa faf2 	bl	cea <memset>
    6706:	3c02      	subs	r4, #2
	       sizeof(mem_pool));
	while (mem_count--) {
    6708:	4b08      	ldr	r3, [pc, #32]	; (672c <mem_init+0x48>)
    670a:	b2a4      	uxth	r4, r4
    670c:	429c      	cmp	r4, r3
    670e:	d00b      	beq.n	6728 <mem_init+0x44>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    6710:	1c60      	adds	r0, r4, #1
    6712:	4370      	muls	r0, r6
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    6714:	182b      	adds	r3, r5, r0
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6716:	1b80      	subs	r0, r0, r6
    6718:	1828      	adds	r0, r5, r0
    671a:	2204      	movs	r2, #4
    671c:	a901      	add	r1, sp, #4
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    671e:	9301      	str	r3, [sp, #4]
    6720:	3c01      	subs	r4, #1
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    6722:	f7fa fab8 	bl	c96 <memcpy>
    6726:	e7ef      	b.n	6708 <mem_init+0x24>
		       (void *)&next, sizeof(next));
	}
}
    6728:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    672a:	46c0      	nop			; (mov r8, r8)
    672c:	0000ffff 	.word	0x0000ffff

00006730 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    6730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (*mem_head) {
    6732:	6805      	ldr	r5, [r0, #0]
		       (void *)&next, sizeof(next));
	}
}

void *mem_acquire(void **mem_head)
{
    6734:	0006      	movs	r6, r0
	if (*mem_head) {
    6736:	2d00      	cmp	r5, #0
    6738:	d011      	beq.n	675e <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    673a:	2703      	movs	r7, #3
    673c:	1deb      	adds	r3, r5, #7
    673e:	43bb      	bics	r3, r7
    6740:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    6742:	2204      	movs	r2, #4
    6744:	0029      	movs	r1, r5
    6746:	a801      	add	r0, sp, #4
    6748:	f7fa faa5 	bl	c96 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    674c:	9b01      	ldr	r3, [sp, #4]
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;
    674e:	3c01      	subs	r4, #1
    6750:	b2a4      	uxth	r4, r4

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));

		/* Store free mem_count after the list's next pointer */
		if (head) {
    6752:	2b00      	cmp	r3, #0
    6754:	d002      	beq.n	675c <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    6756:	1dda      	adds	r2, r3, #7
    6758:	43ba      	bics	r2, r7
    675a:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    675c:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    675e:	0028      	movs	r0, r5
    6760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00006762 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    6762:	680b      	ldr	r3, [r1, #0]

	return NULL;
}

void mem_release(void *mem, void **mem_head)
{
    6764:	b570      	push	{r4, r5, r6, lr}
    6766:	0005      	movs	r5, r0
    6768:	000c      	movs	r4, r1
	u16_t free_count = 0;
    676a:	1e1e      	subs	r6, r3, #0

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    676c:	d003      	beq.n	6776 <mem_release+0x14>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    676e:	2203      	movs	r2, #3
    6770:	3307      	adds	r3, #7
    6772:	4393      	bics	r3, r2
    6774:	881e      	ldrh	r6, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    6776:	0028      	movs	r0, r5
    6778:	2204      	movs	r2, #4
    677a:	0021      	movs	r1, r4
    677c:	f7fa fa8b 	bl	c96 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    6780:	2203      	movs	r2, #3
    6782:	1deb      	adds	r3, r5, #7
    6784:	3601      	adds	r6, #1
    6786:	4393      	bics	r3, r2
    6788:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    678a:	6025      	str	r5, [r4, #0]
}
    678c:	bd70      	pop	{r4, r5, r6, pc}

0000678e <mem_free_count_get>:

u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;
    678e:	1e03      	subs	r3, r0, #0

	/* Get the free count from the list */
	if (mem_head) {
    6790:	d003      	beq.n	679a <mem_free_count_get+0xc>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    6792:	2303      	movs	r3, #3
    6794:	3007      	adds	r0, #7
    6796:	4398      	bics	r0, r3
    6798:	8803      	ldrh	r3, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    679a:	0018      	movs	r0, r3
    679c:	4770      	bx	lr

0000679e <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
    679e:	434a      	muls	r2, r1
    67a0:	1880      	adds	r0, r0, r2
}
    67a2:	4770      	bx	lr

000067a4 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    67a4:	1a40      	subs	r0, r0, r1
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
    67a6:	b510      	push	{r4, lr}
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    67a8:	b280      	uxth	r0, r0
    67aa:	0011      	movs	r1, r2
    67ac:	f7f9 fd0e 	bl	1cc <__aeabi_uidiv>
    67b0:	b280      	uxth	r0, r0
}
    67b2:	bd10      	pop	{r4, pc}

000067b4 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    67b4:	b510      	push	{r4, lr}
	src += len;
	while (len--) {
    67b6:	4b06      	ldr	r3, [pc, #24]	; (67d0 <mem_rcopy+0x1c>)
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
}

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    67b8:	1889      	adds	r1, r1, r2
	while (len--) {
    67ba:	3a01      	subs	r2, #1
    67bc:	b292      	uxth	r2, r2
    67be:	429a      	cmp	r2, r3
    67c0:	d004      	beq.n	67cc <mem_rcopy+0x18>
		*dst++ = *--src;
    67c2:	3901      	subs	r1, #1
    67c4:	780c      	ldrb	r4, [r1, #0]
    67c6:	7004      	strb	r4, [r0, #0]
    67c8:	3001      	adds	r0, #1
    67ca:	e7f6      	b.n	67ba <mem_rcopy+0x6>
	}
}
    67cc:	bd10      	pop	{r4, pc}
    67ce:	46c0      	nop			; (mov r8, r8)
    67d0:	0000ffff 	.word	0x0000ffff

000067d4 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    67d4:	1841      	adds	r1, r0, r1
	while (len--) {
    67d6:	4288      	cmp	r0, r1
    67d8:	d006      	beq.n	67e8 <mem_nz+0x14>
    67da:	3001      	adds	r0, #1
		if (*src++) {
    67dc:	1e43      	subs	r3, r0, #1
    67de:	781b      	ldrb	r3, [r3, #0]
    67e0:	2b00      	cmp	r3, #0
    67e2:	d0f8      	beq.n	67d6 <mem_nz+0x2>
			return 1;
    67e4:	2001      	movs	r0, #1
    67e6:	e000      	b.n	67ea <mem_nz+0x16>
		}
	}

	return 0;
    67e8:	2000      	movs	r0, #0
}
    67ea:	4770      	bx	lr

000067ec <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    67ec:	6010      	str	r0, [r2, #0]
    67ee:	6008      	str	r0, [r1, #0]

	return link;
}
    67f0:	4770      	bx	lr

000067f2 <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    67f2:	6813      	ldr	r3, [r2, #0]
    67f4:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    67f6:	6813      	ldr	r3, [r2, #0]
    67f8:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;

	return link;
}
    67fa:	0008      	movs	r0, r1

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;

	/* increment the tail! */
	*tail = link;
    67fc:	6011      	str	r1, [r2, #0]

	return link;
}
    67fe:	4770      	bx	lr

00006800 <memq_peek>:
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
		return 0;
    6800:	2300      	movs	r3, #0
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    6802:	4281      	cmp	r1, r0
    6804:	d005      	beq.n	6812 <memq_peek+0x12>
    6806:	000b      	movs	r3, r1

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    6808:	2a00      	cmp	r2, #0
    680a:	d002      	beq.n	6812 <memq_peek+0x12>
		*mem = *((void **)link + 1);
    680c:	684b      	ldr	r3, [r1, #4]
    680e:	6013      	str	r3, [r2, #0]
    6810:	000b      	movs	r3, r1
	}

	return link;
}
    6812:	0018      	movs	r0, r3
    6814:	4770      	bx	lr

00006816 <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    6816:	680b      	ldr	r3, [r1, #0]
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    6818:	4283      	cmp	r3, r0
    681a:	d004      	beq.n	6826 <memq_dequeue+0x10>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    681c:	2a00      	cmp	r2, #0
    681e:	d005      	beq.n	682c <memq_dequeue+0x16>
		*mem = *((void **)link + 1);
    6820:	6858      	ldr	r0, [r3, #4]
    6822:	6010      	str	r0, [r2, #0]
    6824:	e002      	b.n	682c <memq_dequeue+0x16>

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    6826:	2300      	movs	r3, #0
    6828:	681b      	ldr	r3, [r3, #0]
    682a:	deff      	udf	#255	; 0xff
    682c:	681a      	ldr	r2, [r3, #0]

	return link;
}
    682e:	0018      	movs	r0, r3

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    6830:	600a      	str	r2, [r1, #0]

	return link;
}
    6832:	4770      	bx	lr

00006834 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    6834:	0002      	movs	r2, r0
    6836:	1841      	adds	r1, r0, r1
	u8_t one_count = 0;
    6838:	2000      	movs	r0, #0

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    683a:	b510      	push	{r4, lr}
	u8_t one_count = 0;

	while (octets_len--) {
    683c:	428a      	cmp	r2, r1
    683e:	d009      	beq.n	6854 <util_ones_count_get+0x20>
		u8_t bite;

		bite = *octets;
    6840:	7814      	ldrb	r4, [r2, #0]
		while (bite) {
    6842:	2c00      	cmp	r4, #0
    6844:	d004      	beq.n	6850 <util_ones_count_get+0x1c>
			bite &= (bite - 1);
    6846:	1e63      	subs	r3, r4, #1
    6848:	401c      	ands	r4, r3
			one_count++;
    684a:	1c43      	adds	r3, r0, #1
    684c:	b2d8      	uxtb	r0, r3
    684e:	e7f8      	b.n	6842 <util_ones_count_get+0xe>
		}
		octets++;
    6850:	3201      	adds	r2, #1
    6852:	e7f3      	b.n	683c <util_ones_count_get+0x8>
	}

	return one_count;
}
    6854:	bd10      	pop	{r4, pc}
	...

00006858 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    6858:	22a1      	movs	r2, #161	; 0xa1
    685a:	2100      	movs	r1, #0
    685c:	4b05      	ldr	r3, [pc, #20]	; (6874 <cntr_init+0x1c>)
    685e:	00d2      	lsls	r2, r2, #3
    6860:	5099      	str	r1, [r3, r2]
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    6862:	22c0      	movs	r2, #192	; 0xc0
    6864:	21d1      	movs	r1, #209	; 0xd1
    6866:	0292      	lsls	r2, r2, #10
    6868:	0089      	lsls	r1, r1, #2
    686a:	505a      	str	r2, [r3, r1]
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    686c:	3940      	subs	r1, #64	; 0x40
    686e:	505a      	str	r2, [r3, r1]
			     RTC_INTENSET_COMPARE1_Msk);
}
    6870:	4770      	bx	lr
    6872:	46c0      	nop			; (mov r8, r8)
    6874:	4000b000 	.word	0x4000b000

00006878 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    6878:	4a05      	ldr	r2, [pc, #20]	; (6890 <cntr_start+0x18>)
    687a:	2001      	movs	r0, #1
    687c:	7813      	ldrb	r3, [r2, #0]
    687e:	1c59      	adds	r1, r3, #1
    6880:	7011      	strb	r1, [r2, #0]
    6882:	2b00      	cmp	r3, #0
    6884:	d102      	bne.n	688c <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    6886:	4a03      	ldr	r2, [pc, #12]	; (6894 <cntr_start+0x1c>)
    6888:	6010      	str	r0, [r2, #0]

	return 0;
    688a:	0018      	movs	r0, r3
}
    688c:	4770      	bx	lr
    688e:	46c0      	nop			; (mov r8, r8)
    6890:	20000d60 	.word	0x20000d60
    6894:	4000b000 	.word	0x4000b000

00006898 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    6898:	4a08      	ldr	r2, [pc, #32]	; (68bc <cntr_stop+0x24>)
    689a:	7813      	ldrb	r3, [r2, #0]
    689c:	2b00      	cmp	r3, #0
    689e:	d102      	bne.n	68a6 <cntr_stop+0xe>
    68a0:	b662      	cpsie	i
    68a2:	2004      	movs	r0, #4
    68a4:	df02      	svc	2

	if (--_refcount) {
    68a6:	3b01      	subs	r3, #1
    68a8:	b2db      	uxtb	r3, r3
    68aa:	7013      	strb	r3, [r2, #0]
    68ac:	2001      	movs	r0, #1
    68ae:	2b00      	cmp	r3, #0
    68b0:	d102      	bne.n	68b8 <cntr_stop+0x20>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    68b2:	4a03      	ldr	r2, [pc, #12]	; (68c0 <cntr_stop+0x28>)
    68b4:	6050      	str	r0, [r2, #4]

	return 0;
    68b6:	0018      	movs	r0, r3
}
    68b8:	4770      	bx	lr
    68ba:	46c0      	nop			; (mov r8, r8)
    68bc:	20000d60 	.word	0x20000d60
    68c0:	4000b000 	.word	0x4000b000

000068c4 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    68c4:	4b01      	ldr	r3, [pc, #4]	; (68cc <cntr_cnt_get+0x8>)
    68c6:	4a02      	ldr	r2, [pc, #8]	; (68d0 <cntr_cnt_get+0xc>)
    68c8:	58d0      	ldr	r0, [r2, r3]
}
    68ca:	4770      	bx	lr
    68cc:	00000504 	.word	0x00000504
    68d0:	4000b000 	.word	0x4000b000

000068d4 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    68d4:	3051      	adds	r0, #81	; 0x51
    68d6:	4b02      	ldr	r3, [pc, #8]	; (68e0 <cntr_cmp_set+0xc>)
    68d8:	30ff      	adds	r0, #255	; 0xff
    68da:	0080      	lsls	r0, r0, #2
    68dc:	50c1      	str	r1, [r0, r3]
}
    68de:	4770      	bx	lr
    68e0:	4000b000 	.word	0x4000b000

000068e4 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    68e4:	2101      	movs	r1, #1
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    68e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    68e8:	4b0f      	ldr	r3, [pc, #60]	; (6928 <do_ecb+0x44>)
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    68ea:	4c10      	ldr	r4, [pc, #64]	; (692c <do_ecb+0x48>)
    68ec:	2500      	movs	r5, #0

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    68ee:	4a10      	ldr	r2, [pc, #64]	; (6930 <do_ecb+0x4c>)
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    68f0:	6059      	str	r1, [r3, #4]
    68f2:	0017      	movs	r7, r2
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    68f4:	5098      	str	r0, [r3, r2]
		NRF_ECB->EVENTS_ENDECB = 0;
    68f6:	6065      	str	r5, [r4, #4]
		NRF_ECB->EVENTS_ERRORECB = 0;
    68f8:	60a5      	str	r5, [r4, #8]
    68fa:	4d0c      	ldr	r5, [pc, #48]	; (692c <do_ecb+0x48>)
		NRF_ECB->TASKS_STARTECB = 1;
    68fc:	6019      	str	r1, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    68fe:	686e      	ldr	r6, [r5, #4]
    6900:	2e00      	cmp	r6, #0
    6902:	d105      	bne.n	6910 <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    6904:	68a6      	ldr	r6, [r4, #8]
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    6906:	2e00      	cmp	r6, #0
    6908:	d102      	bne.n	6910 <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
    690a:	59de      	ldr	r6, [r3, r7]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    690c:	2e00      	cmp	r6, #0
    690e:	d1f6      	bne.n	68fe <do_ecb+0x1a>
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    6910:	4e05      	ldr	r6, [pc, #20]	; (6928 <do_ecb+0x44>)
    6912:	6071      	str	r1, [r6, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    6914:	68ad      	ldr	r5, [r5, #8]
    6916:	2d00      	cmp	r5, #0
    6918:	d1e8      	bne.n	68ec <do_ecb+0x8>
    691a:	589a      	ldr	r2, [r3, r2]
    691c:	2a00      	cmp	r2, #0
    691e:	d0e5      	beq.n	68ec <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
    6920:	4b03      	ldr	r3, [pc, #12]	; (6930 <do_ecb+0x4c>)
    6922:	50f5      	str	r5, [r6, r3]
}
    6924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6926:	46c0      	nop			; (mov r8, r8)
    6928:	4000e000 	.word	0x4000e000
    692c:	4000e0fc 	.word	0x4000e0fc
    6930:	00000504 	.word	0x00000504

00006934 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    6934:	b570      	push	{r4, r5, r6, lr}
    6936:	000e      	movs	r6, r1
    6938:	b08c      	sub	sp, #48	; 0x30
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    693a:	0001      	movs	r1, r0
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    693c:	0015      	movs	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    693e:	4668      	mov	r0, sp
    6940:	2210      	movs	r2, #16
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    6942:	001c      	movs	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    6944:	f7ff ff36 	bl	67b4 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    6948:	a804      	add	r0, sp, #16
    694a:	2210      	movs	r2, #16
    694c:	0031      	movs	r1, r6
    694e:	f7ff ff31 	bl	67b4 <mem_rcopy>

	do_ecb(&ecb);
    6952:	4668      	mov	r0, sp
    6954:	f7ff ffc6 	bl	68e4 <do_ecb>

	if (cipher_text_le) {
    6958:	2d00      	cmp	r5, #0
    695a:	d004      	beq.n	6966 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    695c:	2210      	movs	r2, #16
    695e:	a908      	add	r1, sp, #32
    6960:	0028      	movs	r0, r5
    6962:	f7ff ff27 	bl	67b4 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    6966:	2c00      	cmp	r4, #0
    6968:	d004      	beq.n	6974 <ecb_encrypt+0x40>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    696a:	2210      	movs	r2, #16
    696c:	a908      	add	r1, sp, #32
    696e:	0020      	movs	r0, r4
    6970:	f7fa f991 	bl	c96 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    6974:	b00c      	add	sp, #48	; 0x30
    6976:	bd70      	pop	{r4, r5, r6, pc}

00006978 <isr_radio>:

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
	if (sfp_radio_isr) {
    6978:	4b03      	ldr	r3, [pc, #12]	; (6988 <isr_radio+0x10>)
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    697a:	b510      	push	{r4, lr}
	if (sfp_radio_isr) {
    697c:	681b      	ldr	r3, [r3, #0]
    697e:	2b00      	cmp	r3, #0
    6980:	d000      	beq.n	6984 <isr_radio+0xc>
		sfp_radio_isr();
    6982:	4798      	blx	r3
	}
}
    6984:	bd10      	pop	{r4, pc}
    6986:	46c0      	nop			; (mov r8, r8)
    6988:	20000dbc 	.word	0x20000dbc

0000698c <radio_isr_set>:

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    698c:	4b08      	ldr	r3, [pc, #32]	; (69b0 <radio_isr_set+0x24>)
		sfp_radio_isr();
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    698e:	b510      	push	{r4, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    6990:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    6992:	23c1      	movs	r3, #193	; 0xc1
    6994:	2110      	movs	r1, #16
    6996:	4a07      	ldr	r2, [pc, #28]	; (69b4 <radio_isr_set+0x28>)
    6998:	009b      	lsls	r3, r3, #2
    699a:	50d1      	str	r1, [r2, r3]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    699c:	4a06      	ldr	r2, [pc, #24]	; (69b8 <radio_isr_set+0x2c>)
    699e:	3b85      	subs	r3, #133	; 0x85
    69a0:	390e      	subs	r1, #14
    69a2:	3bff      	subs	r3, #255	; 0xff
    69a4:	50d1      	str	r1, [r2, r3]
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    69a6:	2001      	movs	r0, #1
    69a8:	f007 fef8 	bl	e79c <_arch_irq_enable>
}
    69ac:	bd10      	pop	{r4, pc}
    69ae:	46c0      	nop			; (mov r8, r8)
    69b0:	20000dbc 	.word	0x20000dbc
    69b4:	40001000 	.word	0x40001000
    69b8:	e000e100 	.word	0xe000e100

000069bc <radio_reset>:

void radio_reset(void)
{
    69bc:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
    69be:	2001      	movs	r0, #1
    69c0:	f007 fef6 	bl	e7b0 <_arch_irq_disable>

	NRF_RADIO->POWER =
    69c4:	2100      	movs	r1, #0
    69c6:	4a03      	ldr	r2, [pc, #12]	; (69d4 <radio_reset+0x18>)
    69c8:	4b03      	ldr	r3, [pc, #12]	; (69d8 <radio_reset+0x1c>)
    69ca:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    69cc:	3101      	adds	r1, #1
    69ce:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Enabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
}
    69d0:	bd10      	pop	{r4, pc}
    69d2:	46c0      	nop			; (mov r8, r8)
    69d4:	40001000 	.word	0x40001000
    69d8:	00000ffc 	.word	0x00000ffc

000069dc <radio_phy_set>:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

#if defined(CONFIG_SOC_SERIES_NRF51X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
    69dc:	2301      	movs	r3, #1

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    69de:	2802      	cmp	r0, #2
    69e0:	d000      	beq.n	69e4 <radio_phy_set+0x8>
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    69e2:	3302      	adds	r3, #2
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    69e4:	22a2      	movs	r2, #162	; 0xa2
    69e6:	4902      	ldr	r1, [pc, #8]	; (69f0 <radio_phy_set+0x14>)
    69e8:	00d2      	lsls	r2, r2, #3
    69ea:	508b      	str	r3, [r1, r2]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_RADIO_ENABLE_FAST)
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
				RADIO_MODECNF0_RU_Pos) &
			       RADIO_MODECNF0_RU_Msk;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_RADIO_ENABLE_FAST */
}
    69ec:	4770      	bx	lr
    69ee:	46c0      	nop			; (mov r8, r8)
    69f0:	40001000 	.word	0x40001000

000069f4 <radio_tx_power_set>:

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    69f4:	4b01      	ldr	r3, [pc, #4]	; (69fc <radio_tx_power_set+0x8>)
    69f6:	4a02      	ldr	r2, [pc, #8]	; (6a00 <radio_tx_power_set+0xc>)
    69f8:	50d0      	str	r0, [r2, r3]
}
    69fa:	4770      	bx	lr
    69fc:	0000050c 	.word	0x0000050c
    6a00:	40001000 	.word	0x40001000

00006a04 <radio_freq_chan_set>:

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    6a04:	23a1      	movs	r3, #161	; 0xa1
    6a06:	4a02      	ldr	r2, [pc, #8]	; (6a10 <radio_freq_chan_set+0xc>)
    6a08:	00db      	lsls	r3, r3, #3
    6a0a:	50d0      	str	r0, [r2, r3]
}
    6a0c:	4770      	bx	lr
    6a0e:	46c0      	nop			; (mov r8, r8)
    6a10:	40001000 	.word	0x40001000

00006a14 <radio_whiten_iv_set>:

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    6a14:	4b01      	ldr	r3, [pc, #4]	; (6a1c <radio_whiten_iv_set+0x8>)
    6a16:	4a02      	ldr	r2, [pc, #8]	; (6a20 <radio_whiten_iv_set+0xc>)
    6a18:	50d0      	str	r0, [r2, r3]
}
    6a1a:	4770      	bx	lr
    6a1c:	00000554 	.word	0x00000554
    6a20:	40001000 	.word	0x40001000

00006a24 <radio_aa_set>:

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    6a24:	2200      	movs	r2, #0
    6a26:	490a      	ldr	r1, [pc, #40]	; (6a50 <radio_aa_set+0x2c>)
    6a28:	4b0a      	ldr	r3, [pc, #40]	; (6a54 <radio_aa_set+0x30>)
    6a2a:	50ca      	str	r2, [r1, r3]
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    6a2c:	3201      	adds	r2, #1
    6a2e:	3304      	adds	r3, #4
    6a30:	50ca      	str	r2, [r1, r3]
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    6a32:	78c2      	ldrb	r2, [r0, #3]
    6a34:	4b08      	ldr	r3, [pc, #32]	; (6a58 <radio_aa_set+0x34>)
    6a36:	50ca      	str	r2, [r1, r3]
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    6a38:	7883      	ldrb	r3, [r0, #2]
    6a3a:	061a      	lsls	r2, r3, #24
    6a3c:	7843      	ldrb	r3, [r0, #1]
    6a3e:	041b      	lsls	r3, r3, #16
    6a40:	4313      	orrs	r3, r2
    6a42:	7802      	ldrb	r2, [r0, #0]
    6a44:	0212      	lsls	r2, r2, #8
    6a46:	4313      	orrs	r3, r2
    6a48:	4a04      	ldr	r2, [pc, #16]	; (6a5c <radio_aa_set+0x38>)
    6a4a:	508b      	str	r3, [r1, r2]
}
    6a4c:	4770      	bx	lr
    6a4e:	46c0      	nop			; (mov r8, r8)
    6a50:	40001000 	.word	0x40001000
    6a54:	0000052c 	.word	0x0000052c
    6a58:	00000524 	.word	0x00000524
    6a5c:	0000051c 	.word	0x0000051c

00006a60 <radio_pkt_configure>:
	ARG_UNUSED(phy);

	extra = 0;

	/* nRF51 supports only 27 byte PDU when using h/w CCM for encryption. */
	if (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR) && dc) {
    6a60:	07d3      	lsls	r3, r2, #31
    6a62:	d500      	bpl.n	6a66 <radio_pkt_configure+0x6>
		bits_len = 5;
    6a64:	2005      	movs	r0, #5
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
    6a66:	2208      	movs	r2, #8
    6a68:	23f0      	movs	r3, #240	; 0xf0
    6a6a:	1a12      	subs	r2, r2, r0
    6a6c:	031b      	lsls	r3, r3, #12
    6a6e:	0412      	lsls	r2, r2, #16
    6a70:	401a      	ands	r2, r3
    6a72:	230f      	movs	r3, #15
    6a74:	4003      	ands	r3, r0
    6a76:	2080      	movs	r0, #128	; 0x80
    6a78:	0040      	lsls	r0, r0, #1
    6a7a:	4318      	orrs	r0, r3
    6a7c:	4310      	orrs	r0, r2
		extra |= (RADIO_PCNF0_S1INCL_Include <<
			  RADIO_PCNF0_S1INCL_Pos) & RADIO_PCNF0_S1INCL_Msk;
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    6a7e:	4b04      	ldr	r3, [pc, #16]	; (6a90 <radio_pkt_configure+0x30>)
    6a80:	4a04      	ldr	r2, [pc, #16]	; (6a94 <radio_pkt_configure+0x34>)
    6a82:	5098      	str	r0, [r3, r2]
			       RADIO_PCNF1_STATLEN_Msk) |
			     (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			       RADIO_PCNF1_BALEN_Msk) |
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
    6a84:	4a04      	ldr	r2, [pc, #16]	; (6a98 <radio_pkt_configure+0x38>)
    6a86:	4311      	orrs	r1, r2
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
			   extra;

	NRF_RADIO->PCNF1 = (((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    6a88:	22a3      	movs	r2, #163	; 0xa3
    6a8a:	00d2      	lsls	r2, r2, #3
    6a8c:	5099      	str	r1, [r3, r2]
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
			     (((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
			       RADIO_PCNF1_WHITEEN_Msk));
}
    6a8e:	4770      	bx	lr
    6a90:	40001000 	.word	0x40001000
    6a94:	00000514 	.word	0x00000514
    6a98:	02030000 	.word	0x02030000

00006a9c <radio_pkt_rx_set>:
    6a9c:	4b01      	ldr	r3, [pc, #4]	; (6aa4 <radio_pkt_rx_set+0x8>)
    6a9e:	4a02      	ldr	r2, [pc, #8]	; (6aa8 <radio_pkt_rx_set+0xc>)
    6aa0:	50d0      	str	r0, [r2, r3]
    6aa2:	4770      	bx	lr
    6aa4:	00000504 	.word	0x00000504
    6aa8:	40001000 	.word	0x40001000

00006aac <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    6aac:	4b01      	ldr	r3, [pc, #4]	; (6ab4 <radio_pkt_tx_set+0x8>)
    6aae:	4a02      	ldr	r2, [pc, #8]	; (6ab8 <radio_pkt_tx_set+0xc>)
    6ab0:	50d0      	str	r0, [r2, r3]
}
    6ab2:	4770      	bx	lr
    6ab4:	00000504 	.word	0x00000504
    6ab8:	40001000 	.word	0x40001000

00006abc <radio_tx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    6abc:	208c      	movs	r0, #140	; 0x8c
    6abe:	4770      	bx	lr

00006ac0 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    6ac0:	2001      	movs	r0, #1
    6ac2:	4770      	bx	lr

00006ac4 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    6ac4:	208a      	movs	r0, #138	; 0x8a
    6ac6:	4770      	bx	lr

00006ac8 <radio_rx_chain_delay_get>:
	case BIT(1):
		return 5; /* ceil(5) */
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    6ac8:	2003      	movs	r0, #3
    6aca:	4770      	bx	lr

00006acc <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    6acc:	2201      	movs	r2, #1
    6ace:	4b01      	ldr	r3, [pc, #4]	; (6ad4 <radio_rx_enable+0x8>)
    6ad0:	605a      	str	r2, [r3, #4]
}
    6ad2:	4770      	bx	lr
    6ad4:	40001000 	.word	0x40001000

00006ad8 <radio_tx_enable>:

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    6ad8:	2201      	movs	r2, #1
    6ada:	4b01      	ldr	r3, [pc, #4]	; (6ae0 <radio_tx_enable+0x8>)
    6adc:	601a      	str	r2, [r3, #0]
}
    6ade:	4770      	bx	lr
    6ae0:	40001000 	.word	0x40001000

00006ae4 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    6ae4:	2280      	movs	r2, #128	; 0x80
    6ae6:	2100      	movs	r1, #0
    6ae8:	4b02      	ldr	r3, [pc, #8]	; (6af4 <radio_disable+0x10>)
    6aea:	0092      	lsls	r2, r2, #2
    6aec:	5099      	str	r1, [r3, r2]
	NRF_RADIO->TASKS_DISABLE = 1;
    6aee:	2201      	movs	r2, #1
    6af0:	611a      	str	r2, [r3, #16]
}
    6af2:	4770      	bx	lr
    6af4:	40001000 	.word	0x40001000

00006af8 <radio_status_reset>:

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    6af8:	2200      	movs	r2, #0
    6afa:	4b03      	ldr	r3, [pc, #12]	; (6b08 <radio_status_reset+0x10>)
    6afc:	605a      	str	r2, [r3, #4]
	NRF_RADIO->EVENTS_ADDRESS = 0;
    6afe:	609a      	str	r2, [r3, #8]
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    6b00:	60da      	str	r2, [r3, #12]
	NRF_RADIO->EVENTS_END = 0;
    6b02:	611a      	str	r2, [r3, #16]
	NRF_RADIO->EVENTS_DISABLED = 0;
    6b04:	615a      	str	r2, [r3, #20]
}
    6b06:	4770      	bx	lr
    6b08:	400010fc 	.word	0x400010fc

00006b0c <radio_is_ready>:

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    6b0c:	4b02      	ldr	r3, [pc, #8]	; (6b18 <radio_is_ready+0xc>)
    6b0e:	6858      	ldr	r0, [r3, #4]
    6b10:	1e43      	subs	r3, r0, #1
    6b12:	4198      	sbcs	r0, r3
}
    6b14:	4770      	bx	lr
    6b16:	46c0      	nop			; (mov r8, r8)
    6b18:	400010fc 	.word	0x400010fc

00006b1c <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    6b1c:	4b02      	ldr	r3, [pc, #8]	; (6b28 <radio_is_done+0xc>)
    6b1e:	6918      	ldr	r0, [r3, #16]
    6b20:	1e43      	subs	r3, r0, #1
    6b22:	4198      	sbcs	r0, r3
}
    6b24:	4770      	bx	lr
    6b26:	46c0      	nop			; (mov r8, r8)
    6b28:	400010fc 	.word	0x400010fc

00006b2c <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    6b2c:	23aa      	movs	r3, #170	; 0xaa
    6b2e:	4a03      	ldr	r2, [pc, #12]	; (6b3c <radio_is_idle+0x10>)
    6b30:	00db      	lsls	r3, r3, #3
    6b32:	58d0      	ldr	r0, [r2, r3]
    6b34:	4243      	negs	r3, r0
    6b36:	4158      	adcs	r0, r3
}
    6b38:	4770      	bx	lr
    6b3a:	46c0      	nop			; (mov r8, r8)
    6b3c:	40001000 	.word	0x40001000

00006b40 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
    6b40:	b510      	push	{r4, lr}
	NRF_RADIO->CRCCNF =
    6b42:	2404      	movs	r4, #4
    6b44:	4b04      	ldr	r3, [pc, #16]	; (6b58 <radio_crc_configure+0x18>)
    6b46:	4a05      	ldr	r2, [pc, #20]	; (6b5c <radio_crc_configure+0x1c>)
    6b48:	34ff      	adds	r4, #255	; 0xff
    6b4a:	509c      	str	r4, [r3, r2]
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    6b4c:	3204      	adds	r2, #4
    6b4e:	5098      	str	r0, [r3, r2]
	NRF_RADIO->CRCINIT = iv;
    6b50:	4a03      	ldr	r2, [pc, #12]	; (6b60 <radio_crc_configure+0x20>)
    6b52:	5099      	str	r1, [r3, r2]
}
    6b54:	bd10      	pop	{r4, pc}
    6b56:	46c0      	nop			; (mov r8, r8)
    6b58:	40001000 	.word	0x40001000
    6b5c:	00000534 	.word	0x00000534
    6b60:	0000053c 	.word	0x0000053c

00006b64 <radio_crc_is_valid>:

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    6b64:	2380      	movs	r3, #128	; 0x80
    6b66:	4a03      	ldr	r2, [pc, #12]	; (6b74 <radio_crc_is_valid+0x10>)
    6b68:	00db      	lsls	r3, r3, #3
    6b6a:	58d0      	ldr	r0, [r2, r3]
    6b6c:	1e43      	subs	r3, r0, #1
    6b6e:	4198      	sbcs	r0, r3
}
    6b70:	4770      	bx	lr
    6b72:	46c0      	nop			; (mov r8, r8)
    6b74:	40001000 	.word	0x40001000

00006b78 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    6b78:	4800      	ldr	r0, [pc, #0]	; (6b7c <radio_pkt_empty_get+0x4>)
    6b7a:	4770      	bx	lr
    6b7c:	20000d8c 	.word	0x20000d8c

00006b80 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    6b80:	4800      	ldr	r0, [pc, #0]	; (6b84 <radio_pkt_scratch_get+0x4>)
    6b82:	4770      	bx	lr
    6b84:	20000d64 	.word	0x20000d64

00006b88 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    6b88:	2380      	movs	r3, #128	; 0x80
    6b8a:	210b      	movs	r1, #11
    6b8c:	4a01      	ldr	r2, [pc, #4]	; (6b94 <radio_switch_complete_and_rx+0xc>)
    6b8e:	009b      	lsls	r3, r3, #2
    6b90:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, phy, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    6b92:	4770      	bx	lr
    6b94:	40001000 	.word	0x40001000

00006b98 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy, u8_t flags)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    6b98:	2380      	movs	r3, #128	; 0x80
    6b9a:	2107      	movs	r1, #7
    6b9c:	4a01      	ldr	r2, [pc, #4]	; (6ba4 <radio_switch_complete_and_tx+0xc>)
    6b9e:	009b      	lsls	r3, r3, #2
    6ba0:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy, flags);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    6ba2:	4770      	bx	lr
    6ba4:	40001000 	.word	0x40001000

00006ba8 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    6ba8:	2380      	movs	r3, #128	; 0x80
    6baa:	2103      	movs	r1, #3
    6bac:	4a01      	ldr	r2, [pc, #4]	; (6bb4 <radio_switch_complete_and_disable+0xc>)
    6bae:	009b      	lsls	r3, r3, #2
    6bb0:	50d1      	str	r1, [r2, r3]
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    6bb2:	4770      	bx	lr
    6bb4:	40001000 	.word	0x40001000

00006bb8 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    6bb8:	2280      	movs	r2, #128	; 0x80
    6bba:	2088      	movs	r0, #136	; 0x88
    6bbc:	4903      	ldr	r1, [pc, #12]	; (6bcc <radio_rssi_measure+0x14>)
    6bbe:	0092      	lsls	r2, r2, #2
    6bc0:	588b      	ldr	r3, [r1, r2]
    6bc2:	0040      	lsls	r0, r0, #1
    6bc4:	4303      	orrs	r3, r0
    6bc6:	508b      	str	r3, [r1, r2]
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    6bc8:	4770      	bx	lr
    6bca:	46c0      	nop			; (mov r8, r8)
    6bcc:	40001000 	.word	0x40001000

00006bd0 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    6bd0:	23a9      	movs	r3, #169	; 0xa9
    6bd2:	4a02      	ldr	r2, [pc, #8]	; (6bdc <radio_rssi_get+0xc>)
    6bd4:	00db      	lsls	r3, r3, #3
    6bd6:	58d0      	ldr	r0, [r2, r3]
}
    6bd8:	4770      	bx	lr
    6bda:	46c0      	nop			; (mov r8, r8)
    6bdc:	40001000 	.word	0x40001000

00006be0 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    6be0:	2200      	movs	r2, #0
    6be2:	4b01      	ldr	r3, [pc, #4]	; (6be8 <radio_rssi_status_reset+0x8>)
    6be4:	621a      	str	r2, [r3, #32]
}
    6be6:	4770      	bx	lr
    6be8:	400010fc 	.word	0x400010fc

00006bec <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    6bec:	4b02      	ldr	r3, [pc, #8]	; (6bf8 <radio_rssi_is_ready+0xc>)
    6bee:	6a18      	ldr	r0, [r3, #32]
    6bf0:	1e43      	subs	r3, r0, #1
    6bf2:	4198      	sbcs	r0, r3
}
    6bf4:	4770      	bx	lr
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	400010fc 	.word	0x400010fc

00006bfc <radio_filter_configure>:
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    6bfc:	23c0      	movs	r3, #192	; 0xc0
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
}

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    6bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    6c00:	00db      	lsls	r3, r3, #3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    6c02:	27c4      	movs	r7, #196	; 0xc4
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
}

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    6c04:	2600      	movs	r6, #0
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    6c06:	469c      	mov	ip, r3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    6c08:	00ff      	lsls	r7, r7, #3
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    6c0a:	7854      	ldrb	r4, [r2, #1]
    6c0c:	7813      	ldrb	r3, [r2, #0]
    6c0e:	0224      	lsls	r4, r4, #8
    6c10:	431c      	orrs	r4, r3
    6c12:	7893      	ldrb	r3, [r2, #2]
    6c14:	4d0d      	ldr	r5, [pc, #52]	; (6c4c <radio_filter_configure+0x50>)
    6c16:	041b      	lsls	r3, r3, #16
    6c18:	4323      	orrs	r3, r4
    6c1a:	001c      	movs	r4, r3
    6c1c:	78d3      	ldrb	r3, [r2, #3]
    6c1e:	061b      	lsls	r3, r3, #24
    6c20:	4323      	orrs	r3, r4
    6c22:	00b4      	lsls	r4, r6, #2
    6c24:	1964      	adds	r4, r4, r5
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    6c26:	4665      	mov	r5, ip
    6c28:	5163      	str	r3, [r4, r5]
    6c2a:	7953      	ldrb	r3, [r2, #5]
    6c2c:	7915      	ldrb	r5, [r2, #4]
    6c2e:	021b      	lsls	r3, r3, #8
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    6c30:	432b      	orrs	r3, r5
    6c32:	3601      	adds	r6, #1
    6c34:	51e3      	str	r3, [r4, r7]
		bdaddr += 6;
    6c36:	3206      	adds	r2, #6
void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
    6c38:	2e08      	cmp	r6, #8
    6c3a:	d1e6      	bne.n	6c0a <radio_filter_configure+0xe>
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    6c3c:	23c8      	movs	r3, #200	; 0xc8
    6c3e:	0209      	lsls	r1, r1, #8
    6c40:	4a02      	ldr	r2, [pc, #8]	; (6c4c <radio_filter_configure+0x50>)
    6c42:	4308      	orrs	r0, r1
    6c44:	00db      	lsls	r3, r3, #3
    6c46:	50d0      	str	r0, [r2, r3]
}
    6c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c4a:	46c0      	nop			; (mov r8, r8)
    6c4c:	40001000 	.word	0x40001000

00006c50 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    6c50:	22c8      	movs	r2, #200	; 0xc8
    6c52:	20ff      	movs	r0, #255	; 0xff
    6c54:	4902      	ldr	r1, [pc, #8]	; (6c60 <radio_filter_disable+0x10>)
    6c56:	00d2      	lsls	r2, r2, #3
    6c58:	588b      	ldr	r3, [r1, r2]
    6c5a:	4383      	bics	r3, r0
    6c5c:	508b      	str	r3, [r1, r2]
}
    6c5e:	4770      	bx	lr
    6c60:	40001000 	.word	0x40001000

00006c64 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    6c64:	2200      	movs	r2, #0
    6c66:	4b02      	ldr	r3, [pc, #8]	; (6c70 <radio_filter_status_reset+0xc>)
    6c68:	619a      	str	r2, [r3, #24]
	NRF_RADIO->EVENTS_DEVMISS = 0;
    6c6a:	61da      	str	r2, [r3, #28]
}
    6c6c:	4770      	bx	lr
    6c6e:	46c0      	nop			; (mov r8, r8)
    6c70:	400010fc 	.word	0x400010fc

00006c74 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    6c74:	4b02      	ldr	r3, [pc, #8]	; (6c80 <radio_filter_has_match+0xc>)
    6c76:	6998      	ldr	r0, [r3, #24]
    6c78:	1e43      	subs	r3, r0, #1
    6c7a:	4198      	sbcs	r0, r3
}
    6c7c:	4770      	bx	lr
    6c7e:	46c0      	nop			; (mov r8, r8)
    6c80:	400010fc 	.word	0x400010fc

00006c84 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    6c84:	2382      	movs	r3, #130	; 0x82
    6c86:	4a02      	ldr	r2, [pc, #8]	; (6c90 <radio_filter_match_get+0xc>)
    6c88:	00db      	lsls	r3, r3, #3
    6c8a:	58d0      	ldr	r0, [r2, r3]
}
    6c8c:	4770      	bx	lr
    6c8e:	46c0      	nop			; (mov r8, r8)
    6c90:	40001000 	.word	0x40001000

00006c94 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    6c94:	22ac      	movs	r2, #172	; 0xac
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    6c96:	2180      	movs	r1, #128	; 0x80
	return NRF_RADIO->DAI;
}

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    6c98:	4b04      	ldr	r3, [pc, #16]	; (6cac <radio_bc_configure+0x18>)
    6c9a:	00d2      	lsls	r2, r2, #3
    6c9c:	5098      	str	r0, [r3, r2]
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    6c9e:	2040      	movs	r0, #64	; 0x40
    6ca0:	0089      	lsls	r1, r1, #2
    6ca2:	585a      	ldr	r2, [r3, r1]
    6ca4:	4302      	orrs	r2, r0
    6ca6:	505a      	str	r2, [r3, r1]
}
    6ca8:	4770      	bx	lr
    6caa:	46c0      	nop			; (mov r8, r8)
    6cac:	40001000 	.word	0x40001000

00006cb0 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    6cb0:	2180      	movs	r1, #128	; 0x80
    6cb2:	23d2      	movs	r3, #210	; 0xd2
    6cb4:	4a04      	ldr	r2, [pc, #16]	; (6cc8 <radio_tmr_status_reset+0x18>)
    6cb6:	02c9      	lsls	r1, r1, #11
    6cb8:	009b      	lsls	r3, r3, #2
    6cba:	50d1      	str	r1, [r2, r3]
	NRF_PPI->CHENCLR =
    6cbc:	21ff      	movs	r1, #255	; 0xff
    6cbe:	4a03      	ldr	r2, [pc, #12]	; (6ccc <radio_tmr_status_reset+0x1c>)
    6cc0:	33c1      	adds	r3, #193	; 0xc1
    6cc2:	33ff      	adds	r3, #255	; 0xff
    6cc4:	50d1      	str	r1, [r2, r3]
	    (PPI_CHEN_CH0_Msk | PPI_CHEN_CH1_Msk | PPI_CHEN_CH2_Msk |
	     PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
	     PPI_CHEN_CH6_Msk | PPI_CHEN_CH7_Msk);
}
    6cc6:	4770      	bx	lr
    6cc8:	4000b000 	.word	0x4000b000
    6ccc:	4001f000 	.word	0x4001f000

00006cd0 <radio_tmr_tifs_set>:

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    6cd0:	4b01      	ldr	r3, [pc, #4]	; (6cd8 <radio_tmr_tifs_set+0x8>)
    6cd2:	4a02      	ldr	r2, [pc, #8]	; (6cdc <radio_tmr_tifs_set+0xc>)
    6cd4:	50d0      	str	r0, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    6cd6:	4770      	bx	lr
    6cd8:	00000544 	.word	0x00000544
    6cdc:	40001000 	.word	0x40001000

00006ce0 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    6ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    6ce2:	4b20      	ldr	r3, [pc, #128]	; (6d64 <radio_tmr_start+0x84>)
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    6ce4:	000c      	movs	r4, r1
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    6ce6:	18d1      	adds	r1, r2, r3
    6ce8:	4b1f      	ldr	r3, [pc, #124]	; (6d68 <radio_tmr_start+0x88>)
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    6cea:	9001      	str	r0, [sp, #4]
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    6cec:	4299      	cmp	r1, r3
    6cee:	d902      	bls.n	6cf6 <radio_tmr_start+0x16>
		ticks_start--;
		remainder += 30517578UL;
    6cf0:	4b1e      	ldr	r3, [pc, #120]	; (6d6c <radio_tmr_start+0x8c>)
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
    6cf2:	3c01      	subs	r4, #1
		remainder += 30517578UL;
    6cf4:	18d2      	adds	r2, r2, r3
	}
	remainder /= 1000000UL;
    6cf6:	491e      	ldr	r1, [pc, #120]	; (6d70 <radio_tmr_start+0x90>)
    6cf8:	0010      	movs	r0, r2
    6cfa:	f7f9 fa67 	bl	1cc <__aeabi_uidiv>

	NRF_TIMER0->TASKS_CLEAR = 1;
    6cfe:	2201      	movs	r2, #1
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    6d00:	25a2      	movs	r5, #162	; 0xa2
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    6d02:	2600      	movs	r6, #0
	NRF_TIMER0->PRESCALER = 4;
    6d04:	2704      	movs	r7, #4
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    6d06:	4b1b      	ldr	r3, [pc, #108]	; (6d74 <radio_tmr_start+0x94>)
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    6d08:	00ed      	lsls	r5, r5, #3
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    6d0a:	60da      	str	r2, [r3, #12]
	NRF_TIMER0->MODE = 0;
    6d0c:	4a1a      	ldr	r2, [pc, #104]	; (6d78 <radio_tmr_start+0x98>)
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    6d0e:	2102      	movs	r1, #2
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    6d10:	509e      	str	r6, [r3, r2]
	NRF_TIMER0->PRESCALER = 4;
    6d12:	515f      	str	r7, [r3, r5]
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    6d14:	27a1      	movs	r7, #161	; 0xa1
    6d16:	00ff      	lsls	r7, r7, #3
    6d18:	51d9      	str	r1, [r3, r7]

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
    6d1a:	21a9      	movs	r1, #169	; 0xa9
	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
    6d1c:	3738      	adds	r7, #56	; 0x38
    6d1e:	51d8      	str	r0, [r3, r7]
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    6d20:	4f16      	ldr	r7, [pc, #88]	; (6d7c <radio_tmr_start+0x9c>)

	NRF_RTC0->CC[2] = ticks_start;
    6d22:	00c9      	lsls	r1, r1, #3
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    6d24:	647e      	str	r6, [r7, #68]	; 0x44

	NRF_RTC0->CC[2] = ticks_start;
    6d26:	4f16      	ldr	r7, [pc, #88]	; (6d80 <radio_tmr_start+0xa0>)
    6d28:	507c      	str	r4, [r7, r1]
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    6d2a:	2180      	movs	r1, #128	; 0x80
    6d2c:	24d1      	movs	r4, #209	; 0xd1
    6d2e:	02c9      	lsls	r1, r1, #11
    6d30:	00a4      	lsls	r4, r4, #2
    6d32:	5139      	str	r1, [r7, r4]
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    6d34:	4c13      	ldr	r4, [pc, #76]	; (6d84 <radio_tmr_start+0xa4>)

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    6d36:	4f14      	ldr	r7, [pc, #80]	; (6d88 <radio_tmr_start+0xa8>)
	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    6d38:	64e6      	str	r6, [r4, #76]	; 0x4c

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    6d3a:	26a3      	movs	r6, #163	; 0xa3
    6d3c:	4c13      	ldr	r4, [pc, #76]	; (6d8c <radio_tmr_start+0xac>)
    6d3e:	00f6      	lsls	r6, r6, #3
    6d40:	51a7      	str	r7, [r4, r6]
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    6d42:	4e13      	ldr	r6, [pc, #76]	; (6d90 <radio_tmr_start+0xb0>)
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    6d44:	9901      	ldr	r1, [sp, #4]
	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    6d46:	51a3      	str	r3, [r4, r6]
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    6d48:	2302      	movs	r3, #2
    6d4a:	4e12      	ldr	r6, [pc, #72]	; (6d94 <radio_tmr_start+0xb4>)
    6d4c:	50a3      	str	r3, [r4, r2]
    6d4e:	4b12      	ldr	r3, [pc, #72]	; (6d98 <radio_tmr_start+0xb8>)

	if (trx) {
		NRF_PPI->CH[0].EEP =
    6d50:	5166      	str	r6, [r4, r5]

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    6d52:	2900      	cmp	r1, #0
    6d54:	d001      	beq.n	6d5a <radio_tmr_start+0x7a>
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    6d56:	4d11      	ldr	r5, [pc, #68]	; (6d9c <radio_tmr_start+0xbc>)
    6d58:	e000      	b.n	6d5c <radio_tmr_start+0x7c>
			(u32_t)&(NRF_RADIO->TASKS_TXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
	} else {
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    6d5a:	4d11      	ldr	r5, [pc, #68]	; (6da0 <radio_tmr_start+0xc0>)
    6d5c:	50e5      	str	r5, [r4, r3]
			(u32_t)&(NRF_RADIO->TASKS_RXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    6d5e:	2301      	movs	r3, #1
    6d60:	50a3      	str	r3, [r4, r2]
	NRF_PPI->CHG[0] = PPI_CHG_CH9_Msk | PPI_CHG_CH12_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	return remainder;
}
    6d62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6d64:	fff0bdc0 	.word	0xfff0bdc0
    6d68:	7ff0bdbf 	.word	0x7ff0bdbf
    6d6c:	01d1a94a 	.word	0x01d1a94a
    6d70:	000f4240 	.word	0x000f4240
    6d74:	40008000 	.word	0x40008000
    6d78:	00000504 	.word	0x00000504
    6d7c:	400080fc 	.word	0x400080fc
    6d80:	4000b000 	.word	0x4000b000
    6d84:	4000b0fc 	.word	0x4000b0fc
    6d88:	4000b148 	.word	0x4000b148
    6d8c:	4001f000 	.word	0x4001f000
    6d90:	0000051c 	.word	0x0000051c
    6d94:	40008140 	.word	0x40008140
    6d98:	00000514 	.word	0x00000514
    6d9c:	40001000 	.word	0x40001000
    6da0:	40001004 	.word	0x40001004

00006da4 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    6da4:	2201      	movs	r2, #1
    6da6:	4b02      	ldr	r3, [pc, #8]	; (6db0 <radio_tmr_stop+0xc>)
    6da8:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    6daa:	611a      	str	r2, [r3, #16]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_TIMER1->TASKS_STOP = 1;
	NRF_TIMER1->TASKS_SHUTDOWN = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    6dac:	4770      	bx	lr
    6dae:	46c0      	nop			; (mov r8, r8)
    6db0:	40008000 	.word	0x40008000

00006db4 <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[2] = hcto;
    6db4:	22a9      	movs	r2, #169	; 0xa9
    6db6:	4b0c      	ldr	r3, [pc, #48]	; (6de8 <radio_tmr_hcto_configure+0x34>)
    6db8:	00d2      	lsls	r2, r2, #3
    6dba:	5098      	str	r0, [r3, r2]
	NRF_TIMER0->EVENTS_COMPARE[2] = 0;
    6dbc:	2200      	movs	r2, #0
    6dbe:	33fc      	adds	r3, #252	; 0xfc
    6dc0:	64da      	str	r2, [r3, #76]	; 0x4c

	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    6dc2:	22a6      	movs	r2, #166	; 0xa6
    6dc4:	4b09      	ldr	r3, [pc, #36]	; (6dec <radio_tmr_hcto_configure+0x38>)
    6dc6:	490a      	ldr	r1, [pc, #40]	; (6df0 <radio_tmr_hcto_configure+0x3c>)
    6dc8:	00d2      	lsls	r2, r2, #3
    6dca:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    6dcc:	4909      	ldr	r1, [pc, #36]	; (6df4 <radio_tmr_hcto_configure+0x40>)
    6dce:	4a0a      	ldr	r2, [pc, #40]	; (6df8 <radio_tmr_hcto_configure+0x44>)
    6dd0:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[2]);
    6dd2:	490a      	ldr	r1, [pc, #40]	; (6dfc <radio_tmr_hcto_configure+0x48>)
    6dd4:	3204      	adds	r2, #4
    6dd6:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    6dd8:	4909      	ldr	r1, [pc, #36]	; (6e00 <radio_tmr_hcto_configure+0x4c>)
    6dda:	4a0a      	ldr	r2, [pc, #40]	; (6e04 <radio_tmr_hcto_configure+0x50>)
    6ddc:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
    6dde:	2130      	movs	r1, #48	; 0x30
    6de0:	4a09      	ldr	r2, [pc, #36]	; (6e08 <radio_tmr_hcto_configure+0x54>)
    6de2:	5099      	str	r1, [r3, r2]
}
    6de4:	4770      	bx	lr
    6de6:	46c0      	nop			; (mov r8, r8)
    6de8:	40008000 	.word	0x40008000
    6dec:	4001f000 	.word	0x4001f000
    6df0:	40001104 	.word	0x40001104
    6df4:	40008048 	.word	0x40008048
    6df8:	00000534 	.word	0x00000534
    6dfc:	40008148 	.word	0x40008148
    6e00:	40001010 	.word	0x40001010
    6e04:	0000053c 	.word	0x0000053c
    6e08:	00000504 	.word	0x00000504

00006e0c <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    6e0c:	22a4      	movs	r2, #164	; 0xa4
    6e0e:	4b08      	ldr	r3, [pc, #32]	; (6e30 <radio_tmr_aa_capture+0x24>)
    6e10:	4908      	ldr	r1, [pc, #32]	; (6e34 <radio_tmr_aa_capture+0x28>)
    6e12:	00d2      	lsls	r2, r2, #3
    6e14:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    6e16:	4908      	ldr	r1, [pc, #32]	; (6e38 <radio_tmr_aa_capture+0x2c>)
    6e18:	4a08      	ldr	r2, [pc, #32]	; (6e3c <radio_tmr_aa_capture+0x30>)
    6e1a:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    6e1c:	4908      	ldr	r1, [pc, #32]	; (6e40 <radio_tmr_aa_capture+0x34>)
    6e1e:	3204      	adds	r2, #4
    6e20:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    6e22:	4908      	ldr	r1, [pc, #32]	; (6e44 <radio_tmr_aa_capture+0x38>)
    6e24:	4a08      	ldr	r2, [pc, #32]	; (6e48 <radio_tmr_aa_capture+0x3c>)
    6e26:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    6e28:	210c      	movs	r1, #12
    6e2a:	4a08      	ldr	r2, [pc, #32]	; (6e4c <radio_tmr_aa_capture+0x40>)
    6e2c:	5099      	str	r1, [r3, r2]
}
    6e2e:	4770      	bx	lr
    6e30:	4001f000 	.word	0x4001f000
    6e34:	40001100 	.word	0x40001100
    6e38:	40008040 	.word	0x40008040
    6e3c:	00000524 	.word	0x00000524
    6e40:	40001104 	.word	0x40001104
    6e44:	40008044 	.word	0x40008044
    6e48:	0000052c 	.word	0x0000052c
    6e4c:	00000504 	.word	0x00000504

00006e50 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return (NRF_TIMER0->CC[1] - NRF_TIMER0->CC[0]);
    6e50:	21a8      	movs	r1, #168	; 0xa8
    6e52:	4a03      	ldr	r2, [pc, #12]	; (6e60 <radio_tmr_aa_get+0x10>)
    6e54:	4b03      	ldr	r3, [pc, #12]	; (6e64 <radio_tmr_aa_get+0x14>)
    6e56:	00c9      	lsls	r1, r1, #3
    6e58:	58d3      	ldr	r3, [r2, r3]
    6e5a:	5850      	ldr	r0, [r2, r1]
    6e5c:	1a18      	subs	r0, r3, r0
}
    6e5e:	4770      	bx	lr
    6e60:	40008000 	.word	0x40008000
    6e64:	00000544 	.word	0x00000544

00006e68 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[7].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    6e68:	22a9      	movs	r2, #169	; 0xa9
    6e6a:	4b05      	ldr	r3, [pc, #20]	; (6e80 <radio_tmr_end_capture+0x18>)
    6e6c:	4905      	ldr	r1, [pc, #20]	; (6e84 <radio_tmr_end_capture+0x1c>)
    6e6e:	00d2      	lsls	r2, r2, #3
    6e70:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[7].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    6e72:	4905      	ldr	r1, [pc, #20]	; (6e88 <radio_tmr_end_capture+0x20>)
    6e74:	4a05      	ldr	r2, [pc, #20]	; (6e8c <radio_tmr_end_capture+0x24>)
    6e76:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = PPI_CHEN_CH7_Msk;
    6e78:	2180      	movs	r1, #128	; 0x80
    6e7a:	4a05      	ldr	r2, [pc, #20]	; (6e90 <radio_tmr_end_capture+0x28>)
    6e7c:	5099      	str	r1, [r3, r2]
}
    6e7e:	4770      	bx	lr
    6e80:	4001f000 	.word	0x4001f000
    6e84:	4000110c 	.word	0x4000110c
    6e88:	40008048 	.word	0x40008048
    6e8c:	0000054c 	.word	0x0000054c
    6e90:	00000504 	.word	0x00000504

00006e94 <radio_tmr_end_get>:

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    6e94:	23a9      	movs	r3, #169	; 0xa9
    6e96:	4a02      	ldr	r2, [pc, #8]	; (6ea0 <radio_tmr_end_get+0xc>)
    6e98:	00db      	lsls	r3, r3, #3
    6e9a:	58d0      	ldr	r0, [r2, r3]
}
    6e9c:	4770      	bx	lr
    6e9e:	46c0      	nop			; (mov r8, r8)
    6ea0:	40008000 	.word	0x40008000

00006ea4 <radio_ccm_rx_pkt_set>:
}

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
    6ea4:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    6ea6:	24a0      	movs	r4, #160	; 0xa0
    6ea8:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    6eaa:	2502      	movs	r5, #2

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    6eac:	4b12      	ldr	r3, [pc, #72]	; (6ef8 <radio_ccm_rx_pkt_set+0x54>)
    6eae:	00e4      	lsls	r4, r4, #3
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    6eb0:	26a1      	movs	r6, #161	; 0xa1

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    6eb2:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    6eb4:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE =
    6eb6:	2401      	movs	r4, #1
    6eb8:	4d10      	ldr	r5, [pc, #64]	; (6efc <radio_ccm_rx_pkt_set+0x58>)
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    6eba:	00f6      	lsls	r6, r6, #3

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
	NRF_CCM->MODE =
    6ebc:	515c      	str	r4, [r3, r5]
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    6ebe:	5198      	str	r0, [r3, r6]
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    6ec0:	480f      	ldr	r0, [pc, #60]	; (6f00 <radio_ccm_rx_pkt_set+0x5c>)
    6ec2:	4e10      	ldr	r6, [pc, #64]	; (6f04 <radio_ccm_rx_pkt_set+0x60>)
    6ec4:	5198      	str	r0, [r3, r6]
	NRF_CCM->OUTPTR = (u32_t)pkt;
    6ec6:	3604      	adds	r6, #4
    6ec8:	5199      	str	r1, [r3, r6]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    6eca:	4e0f      	ldr	r6, [pc, #60]	; (6f08 <radio_ccm_rx_pkt_set+0x64>)
    6ecc:	490f      	ldr	r1, [pc, #60]	; (6f0c <radio_ccm_rx_pkt_set+0x68>)
    6ece:	505e      	str	r6, [r3, r1]
	NRF_CCM->SHORTS = 0;
    6ed0:	2180      	movs	r1, #128	; 0x80
    6ed2:	0089      	lsls	r1, r1, #2
    6ed4:	505a      	str	r2, [r3, r1]
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    6ed6:	0019      	movs	r1, r3
    6ed8:	31fc      	adds	r1, #252	; 0xfc
    6eda:	604a      	str	r2, [r1, #4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    6edc:	608a      	str	r2, [r1, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    6ede:	60ca      	str	r2, [r1, #12]

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    6ee0:	21a8      	movs	r1, #168	; 0xa8
    6ee2:	4a0b      	ldr	r2, [pc, #44]	; (6f10 <radio_ccm_rx_pkt_set+0x6c>)
    6ee4:	4e0b      	ldr	r6, [pc, #44]	; (6f14 <radio_ccm_rx_pkt_set+0x70>)
    6ee6:	00c9      	lsls	r1, r1, #3
    6ee8:	5056      	str	r6, [r2, r1]
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    6eea:	4e0b      	ldr	r6, [pc, #44]	; (6f18 <radio_ccm_rx_pkt_set+0x74>)
    6eec:	490b      	ldr	r1, [pc, #44]	; (6f1c <radio_ccm_rx_pkt_set+0x78>)
    6eee:	5056      	str	r6, [r2, r1]
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    6ef0:	2140      	movs	r1, #64	; 0x40
    6ef2:	5151      	str	r1, [r2, r5]

	NRF_CCM->TASKS_KSGEN = 1;
    6ef4:	601c      	str	r4, [r3, #0]

	return _pkt_scratch;
}
    6ef6:	bd70      	pop	{r4, r5, r6, pc}
    6ef8:	4000f000 	.word	0x4000f000
    6efc:	00000504 	.word	0x00000504
    6f00:	20000d64 	.word	0x20000d64
    6f04:	0000050c 	.word	0x0000050c
    6f08:	20000d90 	.word	0x20000d90
    6f0c:	00000514 	.word	0x00000514
    6f10:	4001f000 	.word	0x4001f000
    6f14:	40001104 	.word	0x40001104
    6f18:	4000f004 	.word	0x4000f004
    6f1c:	00000544 	.word	0x00000544

00006f20 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    6f20:	b530      	push	{r4, r5, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    6f22:	24a0      	movs	r4, #160	; 0xa0
    6f24:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    6f26:	2502      	movs	r5, #2
	return _pkt_scratch;
}

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    6f28:	4b0d      	ldr	r3, [pc, #52]	; (6f60 <radio_ccm_tx_pkt_set+0x40>)
    6f2a:	00e4      	lsls	r4, r4, #3
    6f2c:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    6f2e:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE =
    6f30:	4c0c      	ldr	r4, [pc, #48]	; (6f64 <radio_ccm_tx_pkt_set+0x44>)
    6f32:	511a      	str	r2, [r3, r4]
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    6f34:	3404      	adds	r4, #4
    6f36:	5118      	str	r0, [r3, r4]
	NRF_CCM->INPTR = (u32_t)pkt;
    6f38:	480b      	ldr	r0, [pc, #44]	; (6f68 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    6f3a:	4c0c      	ldr	r4, [pc, #48]	; (6f6c <radio_ccm_tx_pkt_set+0x4c>)
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)pkt;
    6f3c:	5019      	str	r1, [r3, r0]
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    6f3e:	21a2      	movs	r1, #162	; 0xa2
    6f40:	480b      	ldr	r0, [pc, #44]	; (6f70 <radio_ccm_tx_pkt_set+0x50>)
    6f42:	00c9      	lsls	r1, r1, #3
    6f44:	5058      	str	r0, [r3, r1]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    6f46:	490b      	ldr	r1, [pc, #44]	; (6f74 <radio_ccm_tx_pkt_set+0x54>)
    6f48:	505c      	str	r4, [r3, r1]
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    6f4a:	2180      	movs	r1, #128	; 0x80
    6f4c:	2401      	movs	r4, #1
    6f4e:	0089      	lsls	r1, r1, #2
    6f50:	505c      	str	r4, [r3, r1]
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    6f52:	0019      	movs	r1, r3
    6f54:	31fc      	adds	r1, #252	; 0xfc
    6f56:	604a      	str	r2, [r1, #4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    6f58:	608a      	str	r2, [r1, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    6f5a:	60ca      	str	r2, [r1, #12]

	NRF_CCM->TASKS_KSGEN = 1;
    6f5c:	601c      	str	r4, [r3, #0]

	return _pkt_scratch;
}
    6f5e:	bd30      	pop	{r4, r5, pc}
    6f60:	4000f000 	.word	0x4000f000
    6f64:	00000504 	.word	0x00000504
    6f68:	0000050c 	.word	0x0000050c
    6f6c:	20000d90 	.word	0x20000d90
    6f70:	20000d64 	.word	0x20000d64
    6f74:	00000514 	.word	0x00000514

00006f78 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    6f78:	23c1      	movs	r3, #193	; 0xc1
    6f7a:	2102      	movs	r1, #2
    6f7c:	4a0d      	ldr	r2, [pc, #52]	; (6fb4 <radio_ccm_is_done+0x3c>)
    6f7e:	009b      	lsls	r3, r3, #2
    6f80:	50d1      	str	r1, [r2, r3]
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    6f82:	4a0d      	ldr	r2, [pc, #52]	; (6fb8 <radio_ccm_is_done+0x40>)
    6f84:	6893      	ldr	r3, [r2, #8]
    6f86:	2b00      	cmp	r3, #0
    6f88:	d103      	bne.n	6f92 <radio_ccm_is_done+0x1a>
    6f8a:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    6f8c:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    6f8e:	bf20      	wfe
    6f90:	e7f8      	b.n	6f84 <radio_ccm_is_done+0xc>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    6f92:	23c2      	movs	r3, #194	; 0xc2
    6f94:	2102      	movs	r1, #2
    6f96:	4a07      	ldr	r2, [pc, #28]	; (6fb4 <radio_ccm_is_done+0x3c>)
    6f98:	009b      	lsls	r3, r3, #2
    6f9a:	50d1      	str	r1, [r2, r3]
    6f9c:	2180      	movs	r1, #128	; 0x80
    6f9e:	4a07      	ldr	r2, [pc, #28]	; (6fbc <radio_ccm_is_done+0x44>)
    6fa0:	3b89      	subs	r3, #137	; 0x89
    6fa2:	0209      	lsls	r1, r1, #8
    6fa4:	3bff      	subs	r3, #255	; 0xff
    6fa6:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    6fa8:	4b03      	ldr	r3, [pc, #12]	; (6fb8 <radio_ccm_is_done+0x40>)
    6faa:	68d8      	ldr	r0, [r3, #12]
    6fac:	4243      	negs	r3, r0
    6fae:	4158      	adcs	r0, r3
}
    6fb0:	4770      	bx	lr
    6fb2:	46c0      	nop			; (mov r8, r8)
    6fb4:	4000f000 	.word	0x4000f000
    6fb8:	4000f0fc 	.word	0x4000f0fc
    6fbc:	e000e100 	.word	0xe000e100

00006fc0 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    6fc0:	2380      	movs	r3, #128	; 0x80
    6fc2:	4a03      	ldr	r2, [pc, #12]	; (6fd0 <radio_ccm_mic_is_valid+0x10>)
    6fc4:	00db      	lsls	r3, r3, #3
    6fc6:	58d0      	ldr	r0, [r2, r3]
    6fc8:	1e43      	subs	r3, r0, #1
    6fca:	4198      	sbcs	r0, r3
}
    6fcc:	4770      	bx	lr
    6fce:	46c0      	nop			; (mov r8, r8)
    6fd0:	4000f000 	.word	0x4000f000

00006fd4 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
    6fd4:	23a0      	movs	r3, #160	; 0xa0
    6fd6:	2201      	movs	r2, #1
}

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    6fd8:	b570      	push	{r4, r5, r6, lr}
	NRF_AAR->ENABLE = 1;
    6fda:	4c0e      	ldr	r4, [pc, #56]	; (7014 <radio_ar_configure+0x40>)
	NRF_AAR->NIRK = nirk;
    6fdc:	4d0e      	ldr	r5, [pc, #56]	; (7018 <radio_ar_configure+0x44>)

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
    6fde:	00db      	lsls	r3, r3, #3
    6fe0:	50e2      	str	r2, [r4, r3]
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
    6fe2:	3308      	adds	r3, #8
static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
    6fe4:	5160      	str	r0, [r4, r5]
	NRF_AAR->IRKPTR = (u32_t)irk;
    6fe6:	50e1      	str	r1, [r4, r3]
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    6fe8:	4b0c      	ldr	r3, [pc, #48]	; (701c <radio_ar_configure+0x48>)
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];

	radio_bc_configure(64);
    6fea:	2040      	movs	r0, #64	; 0x40
void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    6fec:	595a      	ldr	r2, [r3, r5]
    6fee:	23a2      	movs	r3, #162	; 0xa2
    6ff0:	00db      	lsls	r3, r3, #3
    6ff2:	50e2      	str	r2, [r4, r3]
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];
    6ff4:	2200      	movs	r2, #0
    6ff6:	4b0a      	ldr	r3, [pc, #40]	; (7020 <radio_ar_configure+0x4c>)
    6ff8:	50e2      	str	r2, [r4, r3]

	radio_bc_configure(64);
    6ffa:	f7ff fe4b 	bl	6c94 <radio_bc_configure>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    6ffe:	22a8      	movs	r2, #168	; 0xa8
    7000:	4b08      	ldr	r3, [pc, #32]	; (7024 <radio_ar_configure+0x50>)
    7002:	4909      	ldr	r1, [pc, #36]	; (7028 <radio_ar_configure+0x54>)
    7004:	00d2      	lsls	r2, r2, #3
    7006:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    7008:	4a08      	ldr	r2, [pc, #32]	; (702c <radio_ar_configure+0x58>)
    700a:	509c      	str	r4, [r3, r2]
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    700c:	2240      	movs	r2, #64	; 0x40
    700e:	515a      	str	r2, [r3, r5]
}
    7010:	bd70      	pop	{r4, r5, r6, pc}
    7012:	46c0      	nop			; (mov r8, r8)
    7014:	4000f000 	.word	0x4000f000
    7018:	00000504 	.word	0x00000504
    701c:	40001000 	.word	0x40001000
    7020:	00000514 	.word	0x00000514
    7024:	4001f000 	.word	0x4001f000
    7028:	40001128 	.word	0x40001128
    702c:	00000544 	.word	0x00000544

00007030 <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    7030:	2380      	movs	r3, #128	; 0x80
    7032:	4a02      	ldr	r2, [pc, #8]	; (703c <radio_ar_match_get+0xc>)
    7034:	00db      	lsls	r3, r3, #3
    7036:	58d0      	ldr	r0, [r2, r3]
}
    7038:	4770      	bx	lr
    703a:	46c0      	nop			; (mov r8, r8)
    703c:	4000f000 	.word	0x4000f000

00007040 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    7040:	4b05      	ldr	r3, [pc, #20]	; (7058 <radio_ar_status_reset+0x18>)
    7042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	return NRF_AAR->STATUS;
}

void radio_ar_status_reset(void)
{
	if (radio_bc_has_match()) {
    7044:	2a00      	cmp	r2, #0
    7046:	d004      	beq.n	7052 <radio_ar_status_reset+0x12>
		NRF_AAR->EVENTS_END = 0;
    7048:	2100      	movs	r1, #0
    704a:	4a04      	ldr	r2, [pc, #16]	; (705c <radio_ar_status_reset+0x1c>)
    704c:	6051      	str	r1, [r2, #4]
		NRF_AAR->EVENTS_RESOLVED = 0;
    704e:	6091      	str	r1, [r2, #8]
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
    7050:	60d1      	str	r1, [r2, #12]
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    7052:	2200      	movs	r2, #0
    7054:	62da      	str	r2, [r3, #44]	; 0x2c
		NRF_AAR->EVENTS_RESOLVED = 0;
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
	}

	radio_bc_status_reset();
}
    7056:	4770      	bx	lr
    7058:	400010fc 	.word	0x400010fc
    705c:	4000f0fc 	.word	0x4000f0fc

00007060 <radio_ar_has_match>:

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    7060:	2000      	movs	r0, #0
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    7062:	4b06      	ldr	r3, [pc, #24]	; (707c <radio_ar_has_match+0x1c>)
    7064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    7066:	4283      	cmp	r3, r0
    7068:	d006      	beq.n	7078 <radio_ar_has_match+0x18>
    706a:	4b05      	ldr	r3, [pc, #20]	; (7080 <radio_ar_has_match+0x20>)
    706c:	685a      	ldr	r2, [r3, #4]
	radio_bc_status_reset();
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
    706e:	4282      	cmp	r2, r0
    7070:	d002      	beq.n	7078 <radio_ar_has_match+0x18>
			(NRF_AAR->EVENTS_END) &&
			(NRF_AAR->EVENTS_RESOLVED));
    7072:	6898      	ldr	r0, [r3, #8]
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    7074:	1e43      	subs	r3, r0, #1
    7076:	4198      	sbcs	r0, r3
			(NRF_AAR->EVENTS_RESOLVED));
}
    7078:	4770      	bx	lr
    707a:	46c0      	nop			; (mov r8, r8)
    707c:	400010fc 	.word	0x400010fc
    7080:	4000f0fc 	.word	0x4000f0fc

00007084 <rand_init>:

static struct rand *rng;

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));
    7084:	2904      	cmp	r1, #4
    7086:	d802      	bhi.n	708e <rand_init+0xa>
    7088:	b662      	cpsie	i
    708a:	2004      	movs	r0, #4
    708c:	df02      	svc	2

	rng = (struct rand *)context;
	rng->count = context_len - sizeof(struct rand) + 1;
    708e:	3903      	subs	r1, #3
    7090:	7001      	strb	r1, [r0, #0]
	rng->first = rng->last = 0;
    7092:	2100      	movs	r1, #0

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    7094:	2201      	movs	r2, #1

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    7096:	4b07      	ldr	r3, [pc, #28]	; (70b4 <rand_init+0x30>)
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    7098:	7081      	strb	r1, [r0, #2]

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    709a:	6018      	str	r0, [r3, #0]
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    709c:	7041      	strb	r1, [r0, #1]

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    709e:	4b06      	ldr	r3, [pc, #24]	; (70b8 <rand_init+0x34>)
    70a0:	4806      	ldr	r0, [pc, #24]	; (70bc <rand_init+0x38>)
    70a2:	501a      	str	r2, [r3, r0]
	NRF_RNG->EVENTS_VALRDY = 0;
    70a4:	4806      	ldr	r0, [pc, #24]	; (70c0 <rand_init+0x3c>)
    70a6:	6041      	str	r1, [r0, #4]
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    70a8:	21c1      	movs	r1, #193	; 0xc1
    70aa:	0089      	lsls	r1, r1, #2
    70ac:	505a      	str	r2, [r3, r1]

	NRF_RNG->TASKS_START = 1;
    70ae:	601a      	str	r2, [r3, #0]
}
    70b0:	4770      	bx	lr
    70b2:	46c0      	nop			; (mov r8, r8)
    70b4:	20000dc0 	.word	0x20000dc0
    70b8:	4000d000 	.word	0x4000d000
    70bc:	00000504 	.word	0x00000504
    70c0:	4000d0fc 	.word	0x4000d0fc

000070c4 <rand_get>:

size_t rand_get(size_t octets, u8_t *rand)
{
    70c4:	b510      	push	{r4, lr}
	u8_t reserved;
	u8_t first;

	while (octets) {
		if (rng->first == rng->last) {
    70c6:	4b14      	ldr	r3, [pc, #80]	; (7118 <rand_get+0x54>)
    70c8:	681a      	ldr	r2, [r3, #0]
    70ca:	7853      	ldrb	r3, [r2, #1]
size_t rand_get(size_t octets, u8_t *rand)
{
	u8_t reserved;
	u8_t first;

	while (octets) {
    70cc:	2800      	cmp	r0, #0
    70ce:	d00f      	beq.n	70f0 <rand_get+0x2c>
		if (rng->first == rng->last) {
    70d0:	7894      	ldrb	r4, [r2, #2]
    70d2:	429c      	cmp	r4, r3
    70d4:	d00c      	beq.n	70f0 <rand_get+0x2c>
			break;
		}

		rand[--octets] = rng->rand[rng->first];
    70d6:	18d3      	adds	r3, r2, r3
    70d8:	78db      	ldrb	r3, [r3, #3]
    70da:	3801      	subs	r0, #1
    70dc:	540b      	strb	r3, [r1, r0]

		first = rng->first + 1;
    70de:	7853      	ldrb	r3, [r2, #1]
		if (first == rng->count) {
    70e0:	7814      	ldrb	r4, [r2, #0]
			break;
		}

		rand[--octets] = rng->rand[rng->first];

		first = rng->first + 1;
    70e2:	3301      	adds	r3, #1
    70e4:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
    70e6:	429c      	cmp	r4, r3
    70e8:	d100      	bne.n	70ec <rand_get+0x28>
			first = 0;
    70ea:	2300      	movs	r3, #0
		}
		rng->first = first;
    70ec:	7053      	strb	r3, [r2, #1]
    70ee:	e7ec      	b.n	70ca <rand_get+0x6>
	}

	reserved = RAND_RESERVED;
	first = rng->first;
	while (reserved--) {
    70f0:	2105      	movs	r1, #5
    70f2:	3901      	subs	r1, #1
    70f4:	b2c9      	uxtb	r1, r1
    70f6:	2900      	cmp	r1, #0
    70f8:	d00d      	beq.n	7116 <rand_get+0x52>
		if (first == rng->last) {
    70fa:	7894      	ldrb	r4, [r2, #2]
    70fc:	429c      	cmp	r4, r3
    70fe:	d103      	bne.n	7108 <rand_get+0x44>
			NRF_RNG->TASKS_START = 1;
    7100:	2201      	movs	r2, #1
    7102:	4b06      	ldr	r3, [pc, #24]	; (711c <rand_get+0x58>)
    7104:	601a      	str	r2, [r3, #0]

			break;
    7106:	e006      	b.n	7116 <rand_get+0x52>
		}

		first++;
    7108:	3301      	adds	r3, #1
		if (first == rng->count) {
    710a:	7814      	ldrb	r4, [r2, #0]
			NRF_RNG->TASKS_START = 1;

			break;
		}

		first++;
    710c:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
    710e:	429c      	cmp	r4, r3
    7110:	d1ef      	bne.n	70f2 <rand_get+0x2e>
			first = 0;
    7112:	2300      	movs	r3, #0
    7114:	e7ed      	b.n	70f2 <rand_get+0x2e>
		}
	}

	return octets;
}
    7116:	bd10      	pop	{r4, pc}
    7118:	20000dc0 	.word	0x20000dc0
    711c:	4000d000 	.word	0x4000d000

00007120 <isr_rand>:

void isr_rand(void *param)
{
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    7120:	4915      	ldr	r1, [pc, #84]	; (7178 <isr_rand+0x58>)

	return octets;
}

void isr_rand(void *param)
{
    7122:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    7124:	684b      	ldr	r3, [r1, #4]
    7126:	2b00      	cmp	r3, #0
    7128:	d024      	beq.n	7174 <isr_rand+0x54>
		u8_t last;

		last = rng->last + 1;
    712a:	4b14      	ldr	r3, [pc, #80]	; (717c <isr_rand+0x5c>)
    712c:	681a      	ldr	r2, [r3, #0]
    712e:	7890      	ldrb	r0, [r2, #2]
		if (last == rng->count) {
    7130:	7814      	ldrb	r4, [r2, #0]
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
		u8_t last;

		last = rng->last + 1;
    7132:	1c43      	adds	r3, r0, #1
    7134:	b2db      	uxtb	r3, r3
		if (last == rng->count) {
    7136:	42a3      	cmp	r3, r4
    7138:	d100      	bne.n	713c <isr_rand+0x1c>
			last = 0;
    713a:	2300      	movs	r3, #0
		}

		if (last == rng->first) {
    713c:	7856      	ldrb	r6, [r2, #1]
    713e:	4d10      	ldr	r5, [pc, #64]	; (7180 <isr_rand+0x60>)
    7140:	429e      	cmp	r6, r3
    7142:	d104      	bne.n	714e <isr_rand+0x2e>
			/* this condition should not happen
			 * , but due to probable bug in HW
			 * , new value could be generated
			 * before task is stopped.
			 */
			NRF_RNG->TASKS_STOP = 1;
    7144:	2301      	movs	r3, #1
    7146:	606b      	str	r3, [r5, #4]
			NRF_RNG->EVENTS_VALRDY = 0;
    7148:	2300      	movs	r3, #0
    714a:	604b      	str	r3, [r1, #4]

			return;
    714c:	e012      	b.n	7174 <isr_rand+0x54>
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
    714e:	26a1      	movs	r6, #161	; 0xa1
    7150:	00f6      	lsls	r6, r6, #3
    7152:	59ad      	ldr	r5, [r5, r6]
    7154:	1810      	adds	r0, r2, r0
    7156:	70c5      	strb	r5, [r0, #3]
		rng->last = last;
    7158:	7093      	strb	r3, [r2, #2]

		last = rng->last + 1;
    715a:	3301      	adds	r3, #1
    715c:	b2db      	uxtb	r3, r3
    715e:	2000      	movs	r0, #0
		if (last == rng->count) {
    7160:	429c      	cmp	r4, r3
    7162:	d100      	bne.n	7166 <isr_rand+0x46>
			last = 0;
    7164:	0003      	movs	r3, r0
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    7166:	6048      	str	r0, [r1, #4]

		if (last == rng->first) {
    7168:	7852      	ldrb	r2, [r2, #1]
    716a:	429a      	cmp	r2, r3
    716c:	d102      	bne.n	7174 <isr_rand+0x54>
			NRF_RNG->TASKS_STOP = 1;
    716e:	2201      	movs	r2, #1
    7170:	4b03      	ldr	r3, [pc, #12]	; (7180 <isr_rand+0x60>)
    7172:	605a      	str	r2, [r3, #4]
		}
	}
}
    7174:	bd70      	pop	{r4, r5, r6, pc}
    7176:	46c0      	nop			; (mov r8, r8)
    7178:	4000d0fc 	.word	0x4000d0fc
    717c:	20000dc0 	.word	0x20000dc0
    7180:	4000d000 	.word	0x4000d000

00007184 <ticker_dequeue>:
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    7184:	2324      	movs	r3, #36	; 0x24

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    7186:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    7188:	7e04      	ldrb	r4, [r0, #24]
	current = previous;
	total = 0;
    718a:	2500      	movs	r5, #0
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
	current = previous;
    718c:	0022      	movs	r2, r4
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    718e:	469c      	mov	ip, r3
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
    7190:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    7192:	2aff      	cmp	r2, #255	; 0xff
    7194:	d00a      	beq.n	71ac <ticker_dequeue+0x28>

		ticker_current = &node[current];
    7196:	4663      	mov	r3, ip
    7198:	4353      	muls	r3, r2
    719a:	18f3      	adds	r3, r6, r3
    719c:	781f      	ldrb	r7, [r3, #0]

		if (current == id) {
    719e:	428a      	cmp	r2, r1
    71a0:	d006      	beq.n	71b0 <ticker_dequeue+0x2c>
			break;
		}

		total += ticker_current->ticks_to_expire;
    71a2:	689b      	ldr	r3, [r3, #8]
		previous = current;
		current = ticker_current->next;
    71a4:	0014      	movs	r4, r2

		if (current == id) {
			break;
		}

		total += ticker_current->ticks_to_expire;
    71a6:	18ed      	adds	r5, r5, r3
		previous = current;
		current = ticker_current->next;
    71a8:	003a      	movs	r2, r7
    71aa:	e7f2      	b.n	7192 <ticker_dequeue+0xe>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    71ac:	2000      	movs	r0, #0
    71ae:	e010      	b.n	71d2 <ticker_dequeue+0x4e>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    71b0:	4294      	cmp	r4, r2
    71b2:	d100      	bne.n	71b6 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    71b4:	7607      	strb	r7, [r0, #24]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    71b6:	2224      	movs	r2, #36	; 0x24
    71b8:	4354      	muls	r4, r2
    71ba:	7818      	ldrb	r0, [r3, #0]
	if (previous == current) {
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
    71bc:	6899      	ldr	r1, [r3, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    71be:	55a0      	strb	r0, [r4, r6]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    71c0:	781b      	ldrb	r3, [r3, #0]
    71c2:	2bff      	cmp	r3, #255	; 0xff
    71c4:	d004      	beq.n	71d0 <ticker_dequeue+0x4c>
		node[ticker_current->next].ticks_to_expire += timeout;
    71c6:	435a      	muls	r2, r3
    71c8:	18b3      	adds	r3, r6, r2
    71ca:	689a      	ldr	r2, [r3, #8]
    71cc:	1852      	adds	r2, r2, r1
    71ce:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    71d0:	1868      	adds	r0, r5, r1
}
    71d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000071d4 <ticks_to_expire_prep>:
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    71d4:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    71d6:	6883      	ldr	r3, [r0, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    71d8:	8a84      	ldrh	r4, [r0, #20]

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & BIT(31)) == 0) {
    71da:	1a55      	subs	r5, r2, r1
    71dc:	d403      	bmi.n	71e6 <ticks_to_expire_prep+0x12>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    71de:	022a      	lsls	r2, r5, #8
    71e0:	0a12      	lsrs	r2, r2, #8
    71e2:	18d2      	adds	r2, r2, r3
    71e4:	e00a      	b.n	71fc <ticks_to_expire_prep+0x28>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    71e6:	1a89      	subs	r1, r1, r2
    71e8:	0209      	lsls	r1, r1, #8
    71ea:	0a09      	lsrs	r1, r1, #8
		u32_t delta_current_start;

		delta_current_start = ticker_ticks_diff_get(ticks_current,
							    ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
			ticks_to_expire -= delta_current_start;
    71ec:	1a5a      	subs	r2, r3, r1
	} else {
		u32_t delta_current_start;

		delta_current_start = ticker_ticks_diff_get(ticks_current,
							    ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
    71ee:	428b      	cmp	r3, r1
    71f0:	d804      	bhi.n	71fc <ticks_to_expire_prep+0x28>
    71f2:	1ae3      	subs	r3, r4, r3
			ticks_to_expire -= delta_current_start;
		} else {
			ticks_to_expire_minus +=
    71f4:	185b      	adds	r3, r3, r1
    71f6:	b29c      	uxth	r4, r3
			    (delta_current_start - ticks_to_expire);
			ticks_to_expire = 0;
    71f8:	2200      	movs	r2, #0
    71fa:	e004      	b.n	7206 <ticks_to_expire_prep+0x32>
		}
	}

	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
    71fc:	42a2      	cmp	r2, r4
    71fe:	d902      	bls.n	7206 <ticks_to_expire_prep+0x32>
		ticks_to_expire -= ticks_to_expire_minus;
    7200:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7202:	2300      	movs	r3, #0
    7204:	e002      	b.n	720c <ticks_to_expire_prep+0x38>
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    7206:	1aa3      	subs	r3, r4, r2
		ticks_to_expire = 0;
    7208:	2200      	movs	r2, #0
	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
		ticks_to_expire -= ticks_to_expire_minus;
		ticks_to_expire_minus = 0;
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    720a:	b29b      	uxth	r3, r3
		ticks_to_expire = 0;
	}

	ticker->ticks_to_expire = ticks_to_expire;
    720c:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    720e:	8283      	strh	r3, [r0, #20]
}
    7210:	bd30      	pop	{r4, r5, pc}

00007212 <ticker_job_op_cb>:

	return decrement;
}

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
    7212:	0003      	movs	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7214:	2200      	movs	r2, #0
    7216:	701a      	strb	r2, [r3, #0]
	user_op->status = status;
	if (user_op->fp_op_func) {
    7218:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	return decrement;
}

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
    721a:	b510      	push	{r4, lr}
    721c:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
	user_op->status = status;
    721e:	6219      	str	r1, [r3, #32]
	if (user_op->fp_op_func) {
    7220:	2a00      	cmp	r2, #0
    7222:	d001      	beq.n	7228 <ticker_job_op_cb+0x16>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7224:	6a99      	ldr	r1, [r3, #40]	; 0x28
    7226:	4790      	blx	r2
	}
}
    7228:	bd10      	pop	{r4, pc}

0000722a <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
    722a:	b510      	push	{r4, lr}
    722c:	0001      	movs	r1, r0
	cntr_cmp_set(1, value);
    722e:	2001      	movs	r0, #1
    7230:	f7ff fb50 	bl	68d4 <cntr_cmp_set>
}
    7234:	bd10      	pop	{r4, pc}

00007236 <ticker_instance0_cmp_set>:
		break;
	}
}

static void ticker_instance0_cmp_set(u32_t value)
{
    7236:	b510      	push	{r4, lr}
    7238:	0001      	movs	r1, r0
	cntr_cmp_set(0, value);
    723a:	2000      	movs	r0, #0
    723c:	f7ff fb4a 	bl	68d4 <cntr_cmp_set>
}
    7240:	bd10      	pop	{r4, pc}
	...

00007244 <ticker_instance1_sched>:
		break;
	}
}

static void ticker_instance1_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    7244:	b510      	push	{r4, lr}
    7246:	000c      	movs	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    7248:	2803      	cmp	r0, #3
    724a:	d821      	bhi.n	7290 <ticker_instance1_sched+0x4c>
    724c:	f7f8 ff94 	bl	178 <__gnu_thumb1_case_uqi>
    7250:	190c0802 	.word	0x190c0802
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    7254:	2901      	cmp	r1, #1
    7256:	d11b      	bne.n	7290 <ticker_instance1_sched+0x4c>
				0, 0, link,
				&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    7258:	4b0f      	ldr	r3, [pc, #60]	; (7298 <ticker_instance1_sched+0x54>)
    725a:	2102      	movs	r1, #2
    725c:	2000      	movs	r0, #0
    725e:	e014      	b.n	728a <ticker_instance1_sched+0x46>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    7260:	4b0e      	ldr	r3, [pc, #56]	; (729c <ticker_instance1_sched+0x58>)
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    7262:	2902      	cmp	r1, #2
    7264:	d00a      	beq.n	727c <ticker_instance1_sched+0x38>
    7266:	e013      	b.n	7290 <ticker_instance1_sched+0x4c>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    7268:	2901      	cmp	r1, #1
    726a:	d003      	beq.n	7274 <ticker_instance1_sched+0x30>
    726c:	2902      	cmp	r1, #2
    726e:	d10f      	bne.n	7290 <ticker_instance1_sched+0x4c>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    7270:	4b0b      	ldr	r3, [pc, #44]	; (72a0 <ticker_instance1_sched+0x5c>)
    7272:	e003      	b.n	727c <ticker_instance1_sched+0x38>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    7274:	2102      	movs	r1, #2
    7276:	4b0b      	ldr	r3, [pc, #44]	; (72a4 <ticker_instance1_sched+0x60>)
    7278:	0008      	movs	r0, r1
    727a:	e006      	b.n	728a <ticker_instance1_sched+0x46>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    727c:	0021      	movs	r1, r4
    727e:	0020      	movs	r0, r4
    7280:	e003      	b.n	728a <ticker_instance1_sched+0x46>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    7282:	2902      	cmp	r1, #2
    7284:	d104      	bne.n	7290 <ticker_instance1_sched+0x4c>
				(void *)&_instance[1],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    7286:	2003      	movs	r0, #3
    7288:	4b07      	ldr	r3, [pc, #28]	; (72a8 <ticker_instance1_sched+0x64>)
    728a:	f7ff f949 	bl	6520 <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    728e:	bd10      	pop	{r4, pc}
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    7290:	b662      	cpsie	i
    7292:	2004      	movs	r0, #4
    7294:	df02      	svc	2
    7296:	46c0      	nop			; (mov r8, r8)
    7298:	200005c8 	.word	0x200005c8
    729c:	200005d8 	.word	0x200005d8
    72a0:	20000618 	.word	0x20000618
    72a4:	200005f8 	.word	0x200005f8
    72a8:	200005b8 	.word	0x200005b8

000072ac <ticker_instance0_sched>:

	return 0;
}

static void ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    72ac:	b510      	push	{r4, lr}
    72ae:	000c      	movs	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    72b0:	2803      	cmp	r0, #3
    72b2:	d823      	bhi.n	72fc <ticker_instance0_sched+0x50>
    72b4:	f7f8 ff60 	bl	178 <__gnu_thumb1_case_uqi>
    72b8:	1a0d0702 	.word	0x1a0d0702
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    72bc:	2901      	cmp	r1, #1
    72be:	d11d      	bne.n	72fc <ticker_instance0_sched+0x50>
				0, 0, link,
				&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    72c0:	4b10      	ldr	r3, [pc, #64]	; (7304 <ticker_instance0_sched+0x58>)
    72c2:	2100      	movs	r1, #0
    72c4:	e010      	b.n	72e8 <ticker_instance0_sched+0x3c>
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    72c6:	2902      	cmp	r1, #2
    72c8:	d118      	bne.n	72fc <ticker_instance0_sched+0x50>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    72ca:	4b0f      	ldr	r3, [pc, #60]	; (7308 <ticker_instance0_sched+0x5c>)
    72cc:	2101      	movs	r1, #1
    72ce:	2000      	movs	r0, #0
    72d0:	e011      	b.n	72f6 <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    72d2:	2901      	cmp	r1, #1
    72d4:	d004      	beq.n	72e0 <ticker_instance0_sched+0x34>
    72d6:	2902      	cmp	r1, #2
    72d8:	d110      	bne.n	72fc <ticker_instance0_sched+0x50>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    72da:	4b0c      	ldr	r3, [pc, #48]	; (730c <ticker_instance0_sched+0x60>)
    72dc:	2101      	movs	r1, #1
    72de:	e003      	b.n	72e8 <ticker_instance0_sched+0x3c>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    72e0:	4b0b      	ldr	r3, [pc, #44]	; (7310 <ticker_instance0_sched+0x64>)
    72e2:	2100      	movs	r1, #0
    72e4:	0020      	movs	r0, r4
    72e6:	e006      	b.n	72f6 <ticker_instance0_sched+0x4a>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    72e8:	0008      	movs	r0, r1
    72ea:	e004      	b.n	72f6 <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    72ec:	2902      	cmp	r1, #2
    72ee:	d105      	bne.n	72fc <ticker_instance0_sched+0x50>
				(void *)&_instance[0],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    72f0:	2101      	movs	r1, #1
    72f2:	2003      	movs	r0, #3
    72f4:	4b07      	ldr	r3, [pc, #28]	; (7314 <ticker_instance0_sched+0x68>)
    72f6:	f7ff f913 	bl	6520 <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    72fa:	bd10      	pop	{r4, pc}
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    72fc:	b662      	cpsie	i
    72fe:	2004      	movs	r0, #4
    7300:	df02      	svc	2
    7302:	46c0      	nop			; (mov r8, r8)
    7304:	20000608 	.word	0x20000608
    7308:	20000588 	.word	0x20000588
    730c:	200005a8 	.word	0x200005a8
    7310:	20000598 	.word	0x20000598
    7314:	200005e8 	.word	0x200005e8

00007318 <ticker_instance0_caller_id_get>:
 ****************************************************************************/
#include "util/mayfly.h"

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
	switch (user_id) {
    7318:	2801      	cmp	r0, #1
    731a:	d006      	beq.n	732a <ticker_instance0_caller_id_get+0x12>
    731c:	2800      	cmp	r0, #0
    731e:	d006      	beq.n	732e <ticker_instance0_caller_id_get+0x16>
    7320:	2803      	cmp	r0, #3
    7322:	d005      	beq.n	7330 <ticker_instance0_caller_id_get+0x18>
	case MAYFLY_CALL_ID_PROGRAM:
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_2:
	default:
		LL_ASSERT(0);
    7324:	b662      	cpsie	i
    7326:	2004      	movs	r0, #4
    7328:	df02      	svc	2
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;

	case MAYFLY_CALL_ID_1:
		return CALL_ID_JOB;
    732a:	2002      	movs	r0, #2
    732c:	e000      	b.n	7330 <ticker_instance0_caller_id_get+0x18>

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;
    732e:	2001      	movs	r0, #1
		LL_ASSERT(0);
		break;
	}

	return 0;
}
    7330:	4770      	bx	lr

00007332 <ticker_worker>:
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    7332:	2301      	movs	r3, #1

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    7334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
	if (instance->job_guard) {
    7336:	7f06      	ldrb	r6, [r0, #28]

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    7338:	0004      	movs	r4, r0
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    733a:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
    733c:	2e00      	cmp	r6, #0
    733e:	d14b      	bne.n	73d8 <ticker_worker+0xa6>
		return;
	}

	/* If no tickers to expire, do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    7340:	7e03      	ldrb	r3, [r0, #24]
    7342:	2bff      	cmp	r3, #255	; 0xff
    7344:	d101      	bne.n	734a <ticker_worker+0x18>
		instance->worker_trigger = 0;
    7346:	7746      	strb	r6, [r0, #29]

		return;
    7348:	e046      	b.n	73d8 <ticker_worker+0xa6>
	}

	/* ticks_elapsed is collected here, job will use it */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    734a:	f7ff fabb 	bl	68c4 <cntr_cnt_get>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    734e:	6963      	ldr	r3, [r4, #20]

	/* initialise actual elapsed ticks being consumed */
	ticks_expired = 0;

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;
    7350:	7e27      	ldrb	r7, [r4, #24]
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7352:	1ac5      	subs	r5, r0, r3
    7354:	022d      	lsls	r5, r5, #8
    7356:	0a2b      	lsrs	r3, r5, #8
    7358:	9300      	str	r3, [sp, #0]

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;

	/* expire all tickers within ticks_elapsed and collect ticks_expired */
	node = &instance->node[0];
    735a:	6823      	ldr	r3, [r4, #0]
    735c:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    735e:	2fff      	cmp	r7, #255	; 0xff
    7360:	d007      	beq.n	7372 <ticker_worker+0x40>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    7362:	2324      	movs	r3, #36	; 0x24
    7364:	435f      	muls	r7, r3
    7366:	9b01      	ldr	r3, [sp, #4]

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
		if (ticks_elapsed < ticks_to_expire) {
    7368:	9a00      	ldr	r2, [sp, #0]
	while (ticker_id_head != TICKER_NULL) {
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    736a:	19d9      	adds	r1, r3, r7

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    736c:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    736e:	4293      	cmp	r3, r2
    7370:	d904      	bls.n	737c <ticker_worker+0x4a>
			DEBUG_TICKER_TASK(0);
		}
	}

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    7372:	7aa2      	ldrb	r2, [r4, #10]
    7374:	7ae3      	ldrb	r3, [r4, #11]
    7376:	4293      	cmp	r3, r2
    7378:	d122      	bne.n	73c0 <ticker_worker+0x8e>
    737a:	e01b      	b.n	73b4 <ticker_worker+0x82>

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    737c:	20ff      	movs	r0, #255	; 0xff
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    737e:	9a00      	ldr	r2, [sp, #0]
		ticks_expired += ticks_to_expire;
    7380:	18f6      	adds	r6, r6, r3
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    7382:	1ad2      	subs	r2, r2, r3
    7384:	9200      	str	r2, [sp, #0]

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7386:	788a      	ldrb	r2, [r1, #2]
    7388:	784b      	ldrb	r3, [r1, #1]
		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;

		/* move to next ticker */
		ticker_id_head = ticker->next;
    738a:	780f      	ldrb	r7, [r1, #0]

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    738c:	1a9b      	subs	r3, r3, r2
    738e:	4003      	ands	r3, r0
    7390:	2b01      	cmp	r3, #1
    7392:	d1e4      	bne.n	735e <ticker_worker+0x2c>
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;

		if (ticker->timeout_func) {
    7394:	68cb      	ldr	r3, [r1, #12]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
			continue;
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;
    7396:	3a01      	subs	r2, #1
    7398:	708a      	strb	r2, [r1, #2]

		if (ticker->timeout_func) {
    739a:	1e1d      	subs	r5, r3, #0
    739c:	d0df      	beq.n	735e <ticker_worker+0x2c>
					   ticks_expired -
					   ticker->ticks_to_expire_minus) &
					  0x00FFFFFF;

			DEBUG_TICKER_TASK(1);
			ticker->timeout_func(ticks_at_expire,
    739e:	6963      	ldr	r3, [r4, #20]
    73a0:	8a88      	ldrh	r0, [r1, #20]
    73a2:	8b4a      	ldrh	r2, [r1, #26]
    73a4:	1a18      	subs	r0, r3, r0
    73a6:	1980      	adds	r0, r0, r6
    73a8:	0200      	lsls	r0, r0, #8
    73aa:	690b      	ldr	r3, [r1, #16]
    73ac:	0a00      	lsrs	r0, r0, #8
    73ae:	6a09      	ldr	r1, [r1, #32]
    73b0:	47a8      	blx	r5
    73b2:	e7d4      	b.n	735e <ticker_worker+0x2c>

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
		u8_t last;

		last = instance->ticks_elapsed_last + 1;
    73b4:	3301      	adds	r3, #1
    73b6:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
    73b8:	2b02      	cmp	r3, #2
    73ba:	d100      	bne.n	73be <ticker_worker+0x8c>
			last = 0;
    73bc:	2300      	movs	r3, #0
		}
		instance->ticks_elapsed_last = last;
    73be:	72e3      	strb	r3, [r4, #11]
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    73c0:	7ae3      	ldrb	r3, [r4, #11]

	instance->worker_trigger = 0;

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    73c2:	2201      	movs	r2, #1
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    73c4:	3302      	adds	r3, #2
    73c6:	009b      	lsls	r3, r3, #2
    73c8:	18e3      	adds	r3, r4, r3
    73ca:	605e      	str	r6, [r3, #4]

	instance->worker_trigger = 0;
    73cc:	2300      	movs	r3, #0

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    73ce:	2102      	movs	r1, #2
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;

	instance->worker_trigger = 0;
    73d0:	7763      	strb	r3, [r4, #29]

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    73d2:	0010      	movs	r0, r2
    73d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    73d6:	4798      	blx	r3
}
    73d8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

000073dc <ticker_job>:
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    73dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    73de:	7f42      	ldrb	r2, [r0, #29]
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    73e0:	b097      	sub	sp, #92	; 0x5c
    73e2:	0007      	movs	r7, r0
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    73e4:	2a00      	cmp	r2, #0
    73e6:	d000      	beq.n	73ea <ticker_job+0xe>
    73e8:	e37b      	b.n	7ae2 <ticker_job+0x706>
		DEBUG_TICKER_JOB(0);

		return;
	}
	instance->job_guard = 1;
    73ea:	2301      	movs	r3, #1
    73ec:	7703      	strb	r3, [r0, #28]

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    73ee:	6943      	ldr	r3, [r0, #20]
    73f0:	9306      	str	r3, [sp, #24]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    73f2:	7a83      	ldrb	r3, [r0, #10]
    73f4:	7ac1      	ldrb	r1, [r0, #11]
    73f6:	4299      	cmp	r1, r3
    73f8:	d013      	beq.n	7422 <ticker_job+0x46>
		u8_t first;

		first = instance->ticks_elapsed_first + 1;
    73fa:	3301      	adds	r3, #1
    73fc:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    73fe:	2b02      	cmp	r3, #2
    7400:	d100      	bne.n	7404 <ticker_job+0x28>
			first = 0;
    7402:	0013      	movs	r3, r2
		}
		instance->ticks_elapsed_first = first;
    7404:	72bb      	strb	r3, [r7, #10]

		ticks_elapsed =
    7406:	3302      	adds	r3, #2
    7408:	009b      	lsls	r3, r3, #2
    740a:	18fb      	adds	r3, r7, r3
    740c:	685b      	ldr	r3, [r3, #4]
    740e:	9302      	str	r3, [sp, #8]
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= 0x00FFFFFF;
    7410:	9a02      	ldr	r2, [sp, #8]
    7412:	9b06      	ldr	r3, [sp, #24]
    7414:	189b      	adds	r3, r3, r2
    7416:	021b      	lsls	r3, r3, #8
    7418:	0a1b      	lsrs	r3, r3, #8
    741a:	617b      	str	r3, [r7, #20]

		flag_elapsed = 1;
    741c:	2301      	movs	r3, #1
    741e:	9305      	str	r3, [sp, #20]
    7420:	e001      	b.n	7426 <ticker_job+0x4a>
	} else {
		/* No elapsed value in queue */
		flag_elapsed = 0;
    7422:	9205      	str	r2, [sp, #20]
		ticks_elapsed = 0;
    7424:	9202      	str	r2, [sp, #8]
	flag_compare_update = 0;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    7426:	7e3b      	ldrb	r3, [r7, #24]
    7428:	9308      	str	r3, [sp, #32]
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
	node = &instance->node[0];
    742a:	683b      	ldr	r3, [r7, #0]
    742c:	930b      	str	r3, [sp, #44]	; 0x2c
	users = &instance->user[0];
    742e:	687b      	ldr	r3, [r7, #4]
    7430:	930d      	str	r3, [sp, #52]	; 0x34
    7432:	7a7b      	ldrb	r3, [r7, #9]
    7434:	3b01      	subs	r3, #1
    7436:	b2db      	uxtb	r3, r3
    7438:	9304      	str	r3, [sp, #16]
		flag_elapsed = 0;
		ticks_elapsed = 0;
	}

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;
    743a:	23ff      	movs	r3, #255	; 0xff
    743c:	9301      	str	r3, [sp, #4]
	u8_t pending;
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
    743e:	2300      	movs	r3, #0
    7440:	930c      	str	r3, [sp, #48]	; 0x30
	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    7442:	9b04      	ldr	r3, [sp, #16]
    7444:	2bff      	cmp	r3, #255	; 0xff
    7446:	d100      	bne.n	744a <ticker_job+0x6e>
    7448:	e0d9      	b.n	75fe <ticker_job+0x222>
		struct ticker_user *user;
		struct ticker_user_op *user_ops;

		user = &users[count_user];
    744a:	9b04      	ldr	r3, [sp, #16]
    744c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    744e:	00db      	lsls	r3, r3, #3
    7450:	18d3      	adds	r3, r2, r3
    7452:	9303      	str	r3, [sp, #12]
		user_ops = &user->user_op[0];
    7454:	685b      	ldr	r3, [r3, #4]
    7456:	930e      	str	r3, [sp, #56]	; 0x38
		while (user->middle != user->last) {
    7458:	9b03      	ldr	r3, [sp, #12]
    745a:	78d9      	ldrb	r1, [r3, #3]
    745c:	9b03      	ldr	r3, [sp, #12]
    745e:	789e      	ldrb	r6, [r3, #2]
    7460:	428e      	cmp	r6, r1
    7462:	d100      	bne.n	7466 <ticker_job+0x8a>
    7464:	e0c6      	b.n	75f4 <ticker_job+0x218>
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    7466:	252c      	movs	r5, #44	; 0x2c
    7468:	4375      	muls	r5, r6
    746a:	9b0e      	ldr	r3, [sp, #56]	; 0x38

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    746c:	9a03      	ldr	r2, [sp, #12]
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    746e:	195d      	adds	r5, r3, r5

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    7470:	7812      	ldrb	r2, [r2, #0]

			user_op = &user_ops[user->middle];

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
    7472:	1c73      	adds	r3, r6, #1
    7474:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
    7476:	429a      	cmp	r2, r3
    7478:	d100      	bne.n	747c <ticker_job+0xa0>
				middle = 0;
    747a:	2300      	movs	r3, #0
			}
			user->middle = middle;
    747c:	9a03      	ldr	r2, [sp, #12]
    747e:	7093      	strb	r3, [r2, #2]

			ticker = &node[user_op->id];

			/* if op is start, then skip update and stop ops */
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    7480:	782a      	ldrb	r2, [r5, #0]
    7482:	2a03      	cmp	r2, #3
    7484:	d9ea      	bls.n	745c <ticker_job+0x80>
			state = (ticker->req - ticker->ack) & 0xff;

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7486:	2a05      	cmp	r2, #5
    7488:	d815      	bhi.n	74b6 <ticker_job+0xda>
			if (middle == user->count_user_op) {
				middle = 0;
			}
			user->middle = middle;

			ticker = &node[user_op->id];
    748a:	2424      	movs	r4, #36	; 0x24
    748c:	7869      	ldrb	r1, [r5, #1]
    748e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7490:	434c      	muls	r4, r1
    7492:	191c      	adds	r4, r3, r4
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
				continue;
			}

			/* determine the ticker state */
			state = (ticker->req - ticker->ack) & 0xff;
    7494:	7863      	ldrb	r3, [r4, #1]
    7496:	78a0      	ldrb	r0, [r4, #2]
    7498:	1a1b      	subs	r3, r3, r0
    749a:	b2db      	uxtb	r3, r3

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    749c:	2b00      	cmp	r3, #0
    749e:	d00a      	beq.n	74b6 <ticker_job+0xda>
			    (state == 0) ||
    74a0:	2a04      	cmp	r2, #4
    74a2:	d10a      	bne.n	74ba <ticker_job+0xde>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
			     (user_op->params.update.ticks_drift_plus == 0) &&
    74a4:	686a      	ldr	r2, [r5, #4]
    74a6:	2a00      	cmp	r2, #0
    74a8:	d107      	bne.n	74ba <ticker_job+0xde>
			     (user_op->params.update.ticks_drift_minus == 0) &&
			     (user_op->params.update.ticks_slot_plus == 0) &&
    74aa:	68aa      	ldr	r2, [r5, #8]
    74ac:	2a00      	cmp	r2, #0
    74ae:	d104      	bne.n	74ba <ticker_job+0xde>
			     (user_op->params.update.ticks_slot_minus == 0) &&
			     (user_op->params.update.lazy == 0) &&
    74b0:	68ea      	ldr	r2, [r5, #12]
    74b2:	0212      	lsls	r2, r2, #8
    74b4:	d101      	bne.n	74ba <ticker_job+0xde>
			     (user_op->params.update.force == 0))) {
				ticker_job_op_cb(user_op,
    74b6:	2101      	movs	r1, #1
    74b8:	e08f      	b.n	75da <ticker_job+0x1fe>
						 TICKER_STATUS_FAILURE);
				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
    74ba:	2b01      	cmp	r3, #1
    74bc:	d000      	beq.n	74c0 <ticker_job+0xe4>
    74be:	e090      	b.n	75e2 <ticker_job+0x206>
					  struct ticker_user_op *user_op,
					  u32_t ticks_elapsed,
					  u8_t *insert_head)
{
	/* Remove ticker node from list */
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    74c0:	0038      	movs	r0, r7
    74c2:	f7ff fe5f 	bl	7184 <ticker_dequeue>
    74c6:	60a0      	str	r0, [r4, #8]

	/* Handle update of ticker by re-inserting it back. */
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    74c8:	782b      	ldrb	r3, [r5, #0]
					  struct ticker_user_op *user_op,
					  u32_t ticks_elapsed,
					  u8_t *insert_head)
{
	/* Remove ticker node from list */
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    74ca:	0006      	movs	r6, r0

	/* Handle update of ticker by re-inserting it back. */
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    74cc:	2b04      	cmp	r3, #4
    74ce:	d000      	beq.n	74d2 <ticker_job+0xf6>
    74d0:	e078      	b.n	75c4 <ticker_job+0x1e8>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    74d2:	697b      	ldr	r3, [r7, #20]
    74d4:	9307      	str	r3, [sp, #28]
					  u8_t *insert_head)
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_now;

	ticks_now = cntr_cnt_get();
    74d6:	f7ff f9f5 	bl	68c4 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    74da:	9a07      	ldr	r2, [sp, #28]
					  u8_t *insert_head)
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_now;

	ticks_now = cntr_cnt_get();
    74dc:	9009      	str	r0, [sp, #36]	; 0x24
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    74de:	1a80      	subs	r0, r0, r2
    74e0:	0200      	lsls	r0, r0, #8
    74e2:	9b02      	ldr	r3, [sp, #8]
    74e4:	0a00      	lsrs	r0, r0, #8
    74e6:	18c3      	adds	r3, r0, r3
	if (ticks_to_expire > ticks_elapsed) {
		ticks_to_expire -= ticks_elapsed;
    74e8:	1af0      	subs	r0, r6, r3
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_now;

	ticks_now = cntr_cnt_get();
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
	if (ticks_to_expire > ticks_elapsed) {
    74ea:	429e      	cmp	r6, r3
    74ec:	d804      	bhi.n	74f8 <ticker_job+0x11c>
		ticks_to_expire -= ticks_elapsed;
	} else {
		ticker->ticks_to_expire_minus += ticks_elapsed -
    74ee:	8aa0      	ldrh	r0, [r4, #20]
    74f0:	1b80      	subs	r0, r0, r6
    74f2:	18c0      	adds	r0, r0, r3
    74f4:	82a0      	strh	r0, [r4, #20]
						 ticks_to_expire;
		ticks_to_expire = 0;
    74f6:	2000      	movs	r0, #0
	}

	if ((ticker->ticks_periodic != 0) &&
    74f8:	6863      	ldr	r3, [r4, #4]
    74fa:	2b00      	cmp	r3, #0
    74fc:	d03d      	beq.n	757a <ticker_job+0x19e>
	    (user_op->params.update.lazy != 0)) {
    74fe:	89ab      	ldrh	r3, [r5, #12]
		ticker->ticks_to_expire_minus += ticks_elapsed -
						 ticks_to_expire;
		ticks_to_expire = 0;
	}

	if ((ticker->ticks_periodic != 0) &&
    7500:	2b00      	cmp	r3, #0
    7502:	d03a      	beq.n	757a <ticker_job+0x19e>
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;
    7504:	3b01      	subs	r3, #1
    7506:	81ab      	strh	r3, [r5, #12]

		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7508:	6863      	ldr	r3, [r4, #4]
    750a:	469c      	mov	ip, r3
    750c:	4584      	cmp	ip, r0
    750e:	d301      	bcc.n	7514 <ticker_job+0x138>
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
    7510:	49c6      	ldr	r1, [pc, #792]	; (782c <ticker_job+0x450>)
    7512:	e027      	b.n	7564 <ticker_job+0x188>
	if ((ticker->ticks_periodic != 0) &&
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    7514:	8b63      	ldrh	r3, [r4, #26]
    7516:	930a      	str	r3, [sp, #40]	; 0x28

	if ((ticker->ticks_periodic != 0) &&
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7518:	89aa      	ldrh	r2, [r5, #12]
    751a:	429a      	cmp	r2, r3
    751c:	d2f8      	bcs.n	7510 <ticker_job+0x134>

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
    751e:	6a21      	ldr	r1, [r4, #32]
    7520:	4ac3      	ldr	r2, [pc, #780]	; (7830 <ticker_job+0x454>)
    7522:	4bc2      	ldr	r3, [pc, #776]	; (782c <ticker_job+0x450>)
    7524:	188a      	adds	r2, r1, r2
    7526:	0016      	movs	r6, r2
	return 0;
}

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
	u8_t decrement = 0;
    7528:	2200      	movs	r2, #0

	if ((ticker->remainder_current >= BIT(31)) ||
    752a:	429e      	cmp	r6, r3
    752c:	d903      	bls.n	7536 <ticker_job+0x15a>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
    752e:	4ac1      	ldr	r2, [pc, #772]	; (7834 <ticker_job+0x458>)
    7530:	1889      	adds	r1, r1, r2
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
    7532:	2201      	movs	r2, #1
		ticker->remainder_current += 30517578UL;
    7534:	6221      	str	r1, [r4, #32]
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    7536:	6a21      	ldr	r1, [r4, #32]
    7538:	69e6      	ldr	r6, [r4, #28]

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
			ticks_to_expire -= ticker->ticks_periodic +
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
    753a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker->remainder_current >= BIT(31)) ||
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    753c:	1b89      	subs	r1, r1, r6
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
			ticks_to_expire -= ticker->ticks_periodic +
    753e:	4462      	add	r2, ip
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
    7540:	3b01      	subs	r3, #1
	if ((ticker->remainder_current >= BIT(31)) ||
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    7542:	6221      	str	r1, [r4, #32]
	    (user_op->params.update.lazy != 0)) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic) &&
		       (ticker->lazy_current > user_op->params.update.lazy)) {
			ticks_to_expire -= ticker->ticks_periodic +
    7544:	1a80      	subs	r0, r0, r2
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
    7546:	8363      	strh	r3, [r4, #26]
    7548:	e7e0      	b.n	750c <ticker_job+0x130>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    754a:	69e6      	ldr	r6, [r4, #28]
    754c:	6a23      	ldr	r3, [r4, #32]
    754e:	199b      	adds	r3, r3, r6
	if ((ticker->remainder_current < BIT(31)) &&
    7550:	4eb7      	ldr	r6, [pc, #732]	; (7830 <ticker_job+0x454>)
    7552:	199e      	adds	r6, r3, r6
    7554:	428e      	cmp	r6, r1
    7556:	d90a      	bls.n	756e <ticker_job+0x192>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    7558:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    755a:	2300      	movs	r3, #0
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire += ticker->ticks_periodic +
    755c:	4463      	add	r3, ip
					   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
    755e:	3201      	adds	r2, #1
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire += ticker->ticks_periodic +
    7560:	18c0      	adds	r0, r0, r3
					   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
    7562:	8362      	strh	r2, [r4, #26]
			ticks_to_expire -= ticker->ticks_periodic +
					   ticker_remainder_dec(ticker);
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
    7564:	8b62      	ldrh	r2, [r4, #26]
    7566:	89ab      	ldrh	r3, [r5, #12]
    7568:	429a      	cmp	r2, r3
    756a:	d3ee      	bcc.n	754a <ticker_job+0x16e>
    756c:	e004      	b.n	7578 <ticker_job+0x19c>
static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    756e:	4eb2      	ldr	r6, [pc, #712]	; (7838 <ticker_job+0x45c>)
    7570:	199b      	adds	r3, r3, r6
    7572:	6223      	str	r3, [r4, #32]
		return 1;
    7574:	2301      	movs	r3, #1
    7576:	e7f1      	b.n	755c <ticker_job+0x180>
			ticks_to_expire += ticker->ticks_periodic +
					   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
    7578:	8323      	strh	r3, [r4, #24]
	}

	ticker->ticks_to_expire = ticks_to_expire +
    757a:	88ab      	ldrh	r3, [r5, #4]
				  user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    757c:	8aa2      	ldrh	r2, [r4, #20]
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire = ticks_to_expire +
    757e:	1818      	adds	r0, r3, r0
    7580:	60a0      	str	r0, [r4, #8]
				  user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    7582:	88eb      	ldrh	r3, [r5, #6]
				user_op->params.update.ticks_drift_minus;

	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7584:	9907      	ldr	r1, [sp, #28]
		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire = ticks_to_expire +
				  user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    7586:	18d3      	adds	r3, r2, r3
    7588:	82a3      	strh	r3, [r4, #20]
				user_op->params.update.ticks_drift_minus;

	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    758a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    758c:	0020      	movs	r0, r4
    758e:	f7ff fe21 	bl	71d4 <ticks_to_expire_prep>

	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    7592:	8ae2      	ldrh	r2, [r4, #22]
    7594:	892b      	ldrh	r3, [r5, #8]
    7596:	18d3      	adds	r3, r2, r3
    7598:	b29b      	uxth	r3, r3
    759a:	82e3      	strh	r3, [r4, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    759c:	896a      	ldrh	r2, [r5, #10]
    759e:	4293      	cmp	r3, r2
    75a0:	d901      	bls.n	75a6 <ticker_job+0x1ca>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    75a2:	1a9b      	subs	r3, r3, r2
    75a4:	e000      	b.n	75a8 <ticker_job+0x1cc>
	} else {
		ticker->ticks_slot = 0;
    75a6:	2300      	movs	r3, #0
    75a8:	82e3      	strh	r3, [r4, #22]
	}

	if (user_op->params.update.force != 0) {
    75aa:	7bab      	ldrb	r3, [r5, #14]
    75ac:	2b00      	cmp	r3, #0
    75ae:	d000      	beq.n	75b2 <ticker_job+0x1d6>
		ticker->force = user_op->params.update.force;
    75b0:	70e3      	strb	r3, [r4, #3]
	}

	ticker->next = *insert_head;
    75b2:	466b      	mov	r3, sp
    75b4:	791b      	ldrb	r3, [r3, #4]
    75b6:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
    75b8:	786b      	ldrb	r3, [r5, #1]
    75ba:	9301      	str	r3, [sp, #4]
				       ticks_elapsed, insert_head);

		/* set schedule status of node
		 * as updating.
		 */
		ticker->req++;
    75bc:	7863      	ldrb	r3, [r4, #1]
    75be:	3301      	adds	r3, #1
    75c0:	7063      	strb	r3, [r4, #1]
    75c2:	e009      	b.n	75d8 <ticker_job+0x1fc>
	} else {
		/* reset schedule status of node */
		ticker->req = ticker->ack;
    75c4:	78a3      	ldrb	r3, [r4, #2]
    75c6:	7063      	strb	r3, [r4, #1]

		if (instance->ticker_id_slot_previous == user_op->id) {
    75c8:	7e7a      	ldrb	r2, [r7, #25]
    75ca:	786b      	ldrb	r3, [r5, #1]
    75cc:	429a      	cmp	r2, r3
    75ce:	d103      	bne.n	75d8 <ticker_job+0x1fc>
			instance->ticker_id_slot_previous = TICKER_NULL;
    75d0:	23ff      	movs	r3, #255	; 0xff
    75d2:	767b      	strb	r3, [r7, #25]
			instance->ticks_slot_previous = 0;
    75d4:	2300      	movs	r3, #0
    75d6:	837b      	strh	r3, [r7, #26]
	}

	/* op success, @todo update may fail during
	 * actual insert! need to design that yet.
	 */
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    75d8:	2100      	movs	r1, #0
    75da:	0028      	movs	r0, r5
    75dc:	f7ff fe19 	bl	7212 <ticker_job_op_cb>
    75e0:	e73a      	b.n	7458 <ticker_job+0x7c>
				/* update on expired node requested, deferi
				 * update until bottom half finishes.
				 */
				/* sched job to run after worker bottom half.
				 */
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
    75e2:	2102      	movs	r1, #2
    75e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    75e6:	2201      	movs	r2, #1
    75e8:	0008      	movs	r0, r1
    75ea:	4798      	blx	r3

				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;
    75ec:	9b03      	ldr	r3, [sp, #12]
    75ee:	709e      	strb	r6, [r3, #2]

				pending = 1;
    75f0:	2301      	movs	r3, #1
    75f2:	930c      	str	r3, [sp, #48]	; 0x30
    75f4:	9b04      	ldr	r3, [sp, #16]
    75f6:	3b01      	subs	r3, #1
    75f8:	b2db      	uxtb	r3, r3
    75fa:	9304      	str	r3, [sp, #16]
    75fc:	e721      	b.n	7442 <ticker_job+0x66>

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;

	/* Initialise flag used to update next compare value */
	flag_compare_update = 0;
    75fe:	7e3b      	ldrb	r3, [r7, #24]
    7600:	9a08      	ldr	r2, [sp, #32]
    7602:	1a9b      	subs	r3, r3, r2
    7604:	1e5a      	subs	r2, r3, #1
    7606:	4193      	sbcs	r3, r2
    7608:	b2db      	uxtb	r3, r3
    760a:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    760c:	9b05      	ldr	r3, [sp, #20]
    760e:	2b00      	cmp	r3, #0
    7610:	d066      	beq.n	76e0 <ticker_job+0x304>
					u8_t *insert_head)
{
	struct ticker_node *node;
	u32_t ticks_expired;

	node = &instance->node[0];
    7612:	683b      	ldr	r3, [r7, #0]
    7614:	9305      	str	r3, [sp, #20]
	ticks_expired = 0;
    7616:	2300      	movs	r3, #0
    7618:	9303      	str	r3, [sp, #12]

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
			instance->ticks_slot_previous -= ticks_to_expire;
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    761a:	9b04      	ldr	r3, [sp, #16]
    761c:	9307      	str	r3, [sp, #28]
	struct ticker_node *node;
	u32_t ticks_expired;

	node = &instance->node[0];
	ticks_expired = 0;
	while (instance->ticker_id_head != TICKER_NULL) {
    761e:	7e3e      	ldrb	r6, [r7, #24]
    7620:	2eff      	cmp	r6, #255	; 0xff
    7622:	d057      	beq.n	76d4 <ticker_job+0x2f8>
		u32_t ticks_to_expire;
		u8_t id_expired;

		/* auto variable for current ticker node */
		id_expired = instance->ticker_id_head;
		ticker = &node[id_expired];
    7624:	2424      	movs	r4, #36	; 0x24
    7626:	4374      	muls	r4, r6
    7628:	9b05      	ldr	r3, [sp, #20]
    762a:	191c      	adds	r4, r3, r4

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    762c:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    762e:	9b02      	ldr	r3, [sp, #8]
    7630:	429d      	cmp	r5, r3
    7632:	d902      	bls.n	763a <ticker_job+0x25e>
			ticker->ticks_to_expire -= ticks_elapsed;
    7634:	1aed      	subs	r5, r5, r3
    7636:	60a5      	str	r5, [r4, #8]
    7638:	e04c      	b.n	76d4 <ticker_job+0x2f8>
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;
    763a:	9b03      	ldr	r3, [sp, #12]
    763c:	195b      	adds	r3, r3, r5
    763e:	9303      	str	r3, [sp, #12]

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
    7640:	8b7b      	ldrh	r3, [r7, #26]
    7642:	429d      	cmp	r5, r3
    7644:	d201      	bcs.n	764a <ticker_job+0x26e>
			instance->ticks_slot_previous -= ticks_to_expire;
    7646:	1b5b      	subs	r3, r3, r5
    7648:	e003      	b.n	7652 <ticker_job+0x276>
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    764a:	466b      	mov	r3, sp
    764c:	7f1b      	ldrb	r3, [r3, #28]
    764e:	767b      	strb	r3, [r7, #25]
			instance->ticks_slot_previous = 0;
    7650:	2300      	movs	r3, #0
    7652:	837b      	strh	r3, [r7, #26]
		}

		/* save current ticks_slot_previous */
		if (ticker->ticks_slot != 0) {
    7654:	8ae3      	ldrh	r3, [r4, #22]
    7656:	2b00      	cmp	r3, #0
    7658:	d002      	beq.n	7660 <ticker_job+0x284>
			instance->ticker_id_slot_previous = id_expired;
    765a:	767e      	strb	r6, [r7, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
    765c:	8ae3      	ldrh	r3, [r4, #22]
    765e:	837b      	strh	r3, [r7, #26]
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    7660:	2200      	movs	r2, #0

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    7662:	7823      	ldrb	r3, [r4, #0]
			instance->ticker_id_slot_previous = id_expired;
			instance->ticks_slot_previous = ticker->ticks_slot;
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    7664:	60a2      	str	r2, [r4, #8]

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    7666:	763b      	strb	r3, [r7, #24]

		/* ticker will be restarted if periodic */
		if (ticker->ticks_periodic != 0) {
    7668:	6860      	ldr	r0, [r4, #4]
    766a:	4290      	cmp	r0, r2
    766c:	d02a      	beq.n	76c4 <ticker_job+0x2e8>
    766e:	8b23      	ldrh	r3, [r4, #24]
    7670:	9304      	str	r3, [sp, #16]
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
    7672:	4b6e      	ldr	r3, [pc, #440]	; (782c <ticker_job+0x450>)
    7674:	469c      	mov	ip, r3
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    7676:	69e1      	ldr	r1, [r4, #28]
    7678:	6a23      	ldr	r3, [r4, #32]
    767a:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    767c:	496c      	ldr	r1, [pc, #432]	; (7830 <ticker_job+0x454>)
    767e:	1859      	adds	r1, r3, r1
    7680:	4561      	cmp	r1, ip
    7682:	d902      	bls.n	768a <ticker_job+0x2ae>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    7684:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    7686:	2300      	movs	r3, #0
    7688:	e003      	b.n	7692 <ticker_job+0x2b6>
static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    768a:	496b      	ldr	r1, [pc, #428]	; (7838 <ticker_job+0x45c>)
    768c:	185b      	adds	r3, r3, r1
    768e:	6223      	str	r3, [r4, #32]
		return 1;
    7690:	2301      	movs	r3, #1
			/* Prepare for next interval */
			ticks_to_expire = 0;
			count = 1 + ticker->lazy_periodic;
			while (count--) {
				ticks_to_expire += ticker->ticks_periodic;
				ticks_to_expire += ticker_remainder_inc(ticker);
    7692:	181b      	adds	r3, r3, r0
    7694:	18d2      	adds	r2, r2, r3
			u32_t count;

			/* Prepare for next interval */
			ticks_to_expire = 0;
			count = 1 + ticker->lazy_periodic;
			while (count--) {
    7696:	9b04      	ldr	r3, [sp, #16]
    7698:	3b01      	subs	r3, #1
    769a:	9304      	str	r3, [sp, #16]
    769c:	d2eb      	bcs.n	7676 <ticker_job+0x29a>
				ticks_to_expire += ticker->ticks_periodic;
				ticks_to_expire += ticker_remainder_inc(ticker);
			}
			ticker->ticks_to_expire = ticks_to_expire;
			ticks_to_expire_prep(ticker, instance->ticks_current,
    769e:	9b06      	ldr	r3, [sp, #24]
			count = 1 + ticker->lazy_periodic;
			while (count--) {
				ticks_to_expire += ticker->ticks_periodic;
				ticks_to_expire += ticker_remainder_inc(ticker);
			}
			ticker->ticks_to_expire = ticks_to_expire;
    76a0:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    76a2:	9a03      	ldr	r2, [sp, #12]
    76a4:	6979      	ldr	r1, [r7, #20]
    76a6:	189a      	adds	r2, r3, r2
    76a8:	0020      	movs	r0, r4
    76aa:	f7ff fd93 	bl	71d4 <ticks_to_expire_prep>
					     (ticks_previous + ticks_expired));
			ticker->lazy_current = ticker->lazy_periodic;
    76ae:	8b23      	ldrh	r3, [r4, #24]
    76b0:	8363      	strh	r3, [r4, #26]
			ticker->force = 0;
    76b2:	2300      	movs	r3, #0
    76b4:	70e3      	strb	r3, [r4, #3]

			/* Add to insert list */
			ticker->next = *insert_head;
    76b6:	466b      	mov	r3, sp
    76b8:	791b      	ldrb	r3, [r3, #4]
    76ba:	7023      	strb	r3, [r4, #0]
			*insert_head = id_expired;

			/* set schedule status of node as restarting. */
			ticker->req++;
    76bc:	7863      	ldrb	r3, [r4, #1]
    76be:	3301      	adds	r3, #1
    76c0:	7063      	strb	r3, [r4, #1]
    76c2:	e002      	b.n	76ca <ticker_job+0x2ee>
		} else {
			/* reset schedule status of node */
			ticker->req = ticker->ack;
    76c4:	78a3      	ldrb	r3, [r4, #2]
    76c6:	9e01      	ldr	r6, [sp, #4]
    76c8:	7063      	strb	r3, [r4, #1]
			ticker->ticks_to_expire -= ticks_elapsed;
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    76ca:	9b02      	ldr	r3, [sp, #8]
    76cc:	9601      	str	r6, [sp, #4]
    76ce:	1b5b      	subs	r3, r3, r5
    76d0:	9302      	str	r3, [sp, #8]
    76d2:	e7a4      	b.n	761e <ticker_job+0x242>
	if (flag_elapsed) {
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
				     &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
    76d4:	7e3b      	ldrb	r3, [r7, #24]
    76d6:	9a08      	ldr	r2, [sp, #32]
    76d8:	4293      	cmp	r3, r2
    76da:	d001      	beq.n	76e0 <ticker_job+0x304>
			flag_compare_update = 1;
    76dc:	2301      	movs	r3, #1
    76de:	930b      	str	r3, [sp, #44]	; 0x2c
{
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	node = &instance->node[0];
    76e0:	683b      	ldr	r3, [r7, #0]
    76e2:	930e      	str	r3, [sp, #56]	; 0x38
	users = &instance->user[0];
    76e4:	687b      	ldr	r3, [r7, #4]
    76e6:	9312      	str	r3, [sp, #72]	; 0x48
    76e8:	7a7b      	ldrb	r3, [r7, #9]
    76ea:	3b01      	subs	r3, #1
    76ec:	b2db      	uxtb	r3, r3
    76ee:	930a      	str	r3, [sp, #40]	; 0x28
	count_user = instance->count_user;
	while (count_user--) {
    76f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    76f2:	2bff      	cmp	r3, #255	; 0xff
    76f4:	d100      	bne.n	76f8 <ticker_job+0x31c>
    76f6:	e134      	b.n	7962 <ticker_job+0x586>
		struct ticker_user_op *user_ops;
		struct ticker_user *user;
		u8_t user_ops_first;

		user = &users[count_user];
    76f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    76fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    76fc:	00db      	lsls	r3, r3, #3
    76fe:	18d3      	adds	r3, r2, r3
    7700:	9309      	str	r3, [sp, #36]	; 0x24
		user_ops = (void *)&user->user_op[0];
    7702:	685b      	ldr	r3, [r3, #4]
    7704:	9313      	str	r3, [sp, #76]	; 0x4c
		user_ops_first = user->first;
    7706:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7708:	785b      	ldrb	r3, [r3, #1]
    770a:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    770c:	9b01      	ldr	r3, [sp, #4]
    770e:	2bff      	cmp	r3, #255	; 0xff
    7710:	d100      	bne.n	7714 <ticker_job+0x338>
    7712:	e10c      	b.n	792e <ticker_job+0x552>
			u8_t id_insert;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    7714:	2424      	movs	r4, #36	; 0x24
    7716:	9b01      	ldr	r3, [sp, #4]
				insert_head = ticker->next;

				user_op = NULL;
    7718:	2500      	movs	r5, #0
			u8_t id_insert;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    771a:	435c      	muls	r4, r3
    771c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    771e:	191c      	adds	r4, r3, r4
				insert_head = ticker->next;
    7720:	9b01      	ldr	r3, [sp, #4]
    7722:	9302      	str	r3, [sp, #8]
    7724:	7823      	ldrb	r3, [r4, #0]
    7726:	9301      	str	r3, [sp, #4]
    7728:	e017      	b.n	775a <ticker_job+0x37e>
				       struct ticker_user_op *user_op,
				       u32_t ticks_current)
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
    772a:	68eb      	ldr	r3, [r5, #12]
					ticker_job_op_cb(user_op,
							 TICKER_STATUS_FAILURE);
					continue;
				}

				ticker_job_op_start(ticker, user_op,
    772c:	6979      	ldr	r1, [r7, #20]
				       struct ticker_user_op *user_op,
				       u32_t ticks_current)
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
    772e:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    7730:	692b      	ldr	r3, [r5, #16]
	ticker->ticks_slot = start->ticks_slot;
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    7732:	686a      	ldr	r2, [r5, #4]
				       u32_t ticks_current)
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
	ticker->remainder_periodic = start->remainder_periodic;
    7734:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
    7736:	8aab      	ldrh	r3, [r5, #20]
	ticker->ticks_slot = start->ticks_slot;
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    7738:	0020      	movs	r0, r4
{
	struct ticker_user_op_start *start = (void *)&user_op->params.start;

	ticker->ticks_periodic = start->ticks_periodic;
	ticker->remainder_periodic = start->remainder_periodic;
	ticker->lazy_periodic = start->lazy;
    773a:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
    773c:	8aeb      	ldrh	r3, [r5, #22]
    773e:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
    7740:	69ab      	ldr	r3, [r5, #24]
    7742:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    7744:	69eb      	ldr	r3, [r5, #28]
    7746:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    7748:	68ab      	ldr	r3, [r5, #8]
	ticker->ticks_to_expire_minus = 0;
    774a:	82a6      	strh	r6, [r4, #20]
	ticker->remainder_periodic = start->remainder_periodic;
	ticker->lazy_periodic = start->lazy;
	ticker->ticks_slot = start->ticks_slot;
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
    774c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    774e:	f7ff fd41 	bl	71d4 <ticks_to_expire_prep>
	ticker->remainder_current = 0;
	ticker->lazy_current = 0;
	ticker->force = 1;
    7752:	2301      	movs	r3, #1
	ticker->timeout_func = start->fp_timeout_func;
	ticker->context = start->context;
	ticker->ticks_to_expire = start->ticks_first;
	ticker->ticks_to_expire_minus = 0;
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
	ticker->remainder_current = 0;
    7754:	6226      	str	r6, [r4, #32]
	ticker->lazy_current = 0;
    7756:	8366      	strh	r6, [r4, #26]
	ticker->force = 1;
    7758:	70e3      	strb	r3, [r4, #3]
static inline u32_t ticker_job_insert(struct ticker_instance *instance,
				      u8_t id_insert,
				      struct ticker_node *ticker,
				      u8_t *insert_head)
{
	struct ticker_node *node = &instance->node[0];
    775a:	683b      	ldr	r3, [r7, #0]
	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
		skip = ticker->lazy_current -
		       ticker->lazy_periodic;
	} else {
		skip = 0;
    775c:	2100      	movs	r1, #0
static inline u32_t ticker_job_insert(struct ticker_instance *instance,
				      u8_t id_insert,
				      struct ticker_node *ticker,
				      u8_t *insert_head)
{
	struct ticker_node *node = &instance->node[0];
    775e:	9314      	str	r3, [sp, #80]	; 0x50
	u8_t id_collide;
	u16_t skip;

	/* Prepare to insert */
	ticker->next = TICKER_NULL;
    7760:	23ff      	movs	r3, #255	; 0xff

	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7762:	8b22      	ldrh	r2, [r4, #24]
	struct ticker_node *node = &instance->node[0];
	u8_t id_collide;
	u16_t skip;

	/* Prepare to insert */
	ticker->next = TICKER_NULL;
    7764:	7023      	strb	r3, [r4, #0]

	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
    7766:	8b63      	ldrh	r3, [r4, #26]
		skip = ticker->lazy_current -
		       ticker->lazy_periodic;
	} else {
		skip = 0;
    7768:	910f      	str	r1, [sp, #60]	; 0x3c

	/* Prepare to insert */
	ticker->next = TICKER_NULL;

	/* No. of times ticker has skipped its interval */
	if (ticker->lazy_current > ticker->lazy_periodic) {
    776a:	4293      	cmp	r3, r2
    776c:	d902      	bls.n	7774 <ticker_job+0x398>
		skip = ticker->lazy_current -
    776e:	1a9b      	subs	r3, r3, r2
    7770:	b29b      	uxth	r3, r3
    7772:	930f      	str	r3, [sp, #60]	; 0x3c
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
	ticker_new = &node[id];
    7774:	2324      	movs	r3, #36	; 0x24
    7776:	9a02      	ldr	r2, [sp, #8]
    7778:	4353      	muls	r3, r2
    777a:	9315      	str	r3, [sp, #84]	; 0x54
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
    777c:	683b      	ldr	r3, [r7, #0]
    777e:	9307      	str	r3, [sp, #28]
	ticker_new = &node[id];
    7780:	9a07      	ldr	r2, [sp, #28]
    7782:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7784:	4694      	mov	ip, r2
    7786:	4463      	add	r3, ip
    7788:	469c      	mov	ip, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
    778a:	689b      	ldr	r3, [r3, #8]
    778c:	9303      	str	r3, [sp, #12]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    778e:	8b7a      	ldrh	r2, [r7, #26]
	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    7790:	7e3b      	ldrb	r3, [r7, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    7792:	9206      	str	r2, [sp, #24]

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    7794:	22ff      	movs	r2, #255	; 0xff
	current = instance->ticker_id_head;
	previous = current;
    7796:	930d      	str	r3, [sp, #52]	; 0x34

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    7798:	9204      	str	r2, [sp, #16]
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
    779a:	2bff      	cmp	r3, #255	; 0xff
    779c:	d01a      	beq.n	77d4 <ticker_job+0x3f8>
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))) {
    779e:	2224      	movs	r2, #36	; 0x24
    77a0:	435a      	muls	r2, r3
    77a2:	9907      	ldr	r1, [sp, #28]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
    77a4:	9803      	ldr	r0, [sp, #12]
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))) {
    77a6:	188a      	adds	r2, r1, r2
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
    77a8:	6891      	ldr	r1, [r2, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL) &&
    77aa:	4288      	cmp	r0, r1
    77ac:	d912      	bls.n	77d4 <ticker_job+0x3f8>
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))) {
		ticks_to_expire -= ticks_to_expire_current;
    77ae:	9803      	ldr	r0, [sp, #12]
    77b0:	1a40      	subs	r0, r0, r1
    77b2:	9003      	str	r0, [sp, #12]

		if (ticker_current->ticks_slot != 0) {
    77b4:	8ad0      	ldrh	r0, [r2, #22]
    77b6:	2800      	cmp	r0, #0
    77b8:	d002      	beq.n	77c0 <ticker_job+0x3e4>
			ticks_slot_previous = ticker_current->ticks_slot;
    77ba:	9006      	str	r0, [sp, #24]
    77bc:	9304      	str	r3, [sp, #16]
    77be:	e006      	b.n	77ce <ticker_job+0x3f2>
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    77c0:	9e06      	ldr	r6, [sp, #24]
    77c2:	42b1      	cmp	r1, r6
    77c4:	d202      	bcs.n	77cc <ticker_job+0x3f0>
				ticks_slot_previous -= ticks_to_expire_current;
    77c6:	1a71      	subs	r1, r6, r1
    77c8:	9106      	str	r1, [sp, #24]
    77ca:	e000      	b.n	77ce <ticker_job+0x3f2>
			} else {
				ticks_slot_previous = 0;
    77cc:	9006      	str	r0, [sp, #24]
			}
		}
		previous = current;
		current = ticker_current->next;
    77ce:	930d      	str	r3, [sp, #52]	; 0x34
    77d0:	7813      	ldrb	r3, [r2, #0]
    77d2:	e7e2      	b.n	779a <ticker_job+0x3be>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
    77d4:	4662      	mov	r2, ip
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current,
    77d6:	9903      	ldr	r1, [sp, #12]
				     ticks_to_expire + ticker_new->ticks_slot);
    77d8:	8ad2      	ldrh	r2, [r2, #22]
    77da:	9210      	str	r2, [sp, #64]	; 0x40
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current,
    77dc:	1850      	adds	r0, r2, r1
    77de:	001a      	movs	r2, r3
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    77e0:	2aff      	cmp	r2, #255	; 0xff
    77e2:	d00f      	beq.n	7804 <ticker_job+0x428>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    77e4:	2124      	movs	r1, #36	; 0x24
    77e6:	4351      	muls	r1, r2
    77e8:	9e07      	ldr	r6, [sp, #28]
    77ea:	1871      	adds	r1, r6, r1
		ticks_to_expire = ticker->ticks_to_expire;
    77ec:	688e      	ldr	r6, [r1, #8]
    77ee:	9611      	str	r6, [sp, #68]	; 0x44

		if (ticks_slot <= ticks_to_expire) {
    77f0:	4286      	cmp	r6, r0
    77f2:	d206      	bcs.n	7802 <ticker_job+0x426>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    77f4:	8ace      	ldrh	r6, [r1, #22]
    77f6:	2e00      	cmp	r6, #0
    77f8:	d104      	bne.n	7804 <ticker_job+0x428>
			break;
		}

		ticks_slot -= ticks_to_expire;
    77fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    77fc:	1a80      	subs	r0, r0, r2
		ticker_id_head = ticker->next;
    77fe:	780a      	ldrb	r2, [r1, #0]
    7800:	e7ee      	b.n	77e0 <ticker_job+0x404>

		ticker = &node[ticker_id_head];
		ticks_to_expire = ticker->ticks_to_expire;

		if (ticks_slot <= ticks_to_expire) {
			return TICKER_NULL;
    7802:	22ff      	movs	r2, #255	; 0xff
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);

	if ((ticker_new->ticks_slot == 0) ||
    7804:	9910      	ldr	r1, [sp, #64]	; 0x40
    7806:	2900      	cmp	r1, #0
    7808:	d005      	beq.n	7816 <ticker_job+0x43a>
    780a:	9906      	ldr	r1, [sp, #24]
    780c:	9803      	ldr	r0, [sp, #12]
    780e:	4288      	cmp	r0, r1
    7810:	d327      	bcc.n	7862 <ticker_job+0x486>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    7812:	2aff      	cmp	r2, #255	; 0xff
    7814:	d12e      	bne.n	7874 <ticker_job+0x498>
	     (collide == TICKER_NULL))) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    7816:	4662      	mov	r2, ip
    7818:	9903      	ldr	r1, [sp, #12]
		ticker_new->next = current;
    781a:	7013      	strb	r3, [r2, #0]
				     ticks_to_expire + ticker_new->ticks_slot);

	if ((ticker_new->ticks_slot == 0) ||
	    ((ticks_slot_previous <= ticks_to_expire) &&
	     (collide == TICKER_NULL))) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    781c:	6091      	str	r1, [r2, #8]
		ticker_new->next = current;

		if (previous == current) {
    781e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7820:	429a      	cmp	r2, r3
    7822:	d10b      	bne.n	783c <ticker_job+0x460>
			instance->ticker_id_head = id;
    7824:	466a      	mov	r2, sp
    7826:	7a12      	ldrb	r2, [r2, #8]
    7828:	763a      	strb	r2, [r7, #24]
    782a:	e00e      	b.n	784a <ticker_job+0x46e>
    782c:	7f172b59 	.word	0x7f172b59
    7830:	ff172b5a 	.word	0xff172b5a
    7834:	01d1a94a 	.word	0x01d1a94a
    7838:	fe2e56b6 	.word	0xfe2e56b6
		} else {
			node[previous].next = id;
    783c:	2124      	movs	r1, #36	; 0x24
    783e:	4668      	mov	r0, sp
    7840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7842:	7a00      	ldrb	r0, [r0, #8]
    7844:	434a      	muls	r2, r1
    7846:	9907      	ldr	r1, [sp, #28]
    7848:	5450      	strb	r0, [r2, r1]
		}

		if (current != TICKER_NULL) {
    784a:	2bff      	cmp	r3, #255	; 0xff
    784c:	d100      	bne.n	7850 <ticker_job+0x474>
    784e:	e140      	b.n	7ad2 <ticker_job+0x6f6>
			node[current].ticks_to_expire -= ticks_to_expire;
    7850:	2224      	movs	r2, #36	; 0x24
    7852:	4353      	muls	r3, r2
    7854:	9a07      	ldr	r2, [sp, #28]
    7856:	9903      	ldr	r1, [sp, #12]
    7858:	18d3      	adds	r3, r2, r3
    785a:	689a      	ldr	r2, [r3, #8]
    785c:	1a52      	subs	r2, r2, r1
    785e:	609a      	str	r2, [r3, #8]
    7860:	e137      	b.n	7ad2 <ticker_job+0x6f6>
	} else {
		skip = 0;
	}

	/* If insert collides, remove colliding or advance to next interval */
	while (id_insert !=
    7862:	9b02      	ldr	r3, [sp, #8]
    7864:	9a04      	ldr	r2, [sp, #16]
    7866:	4293      	cmp	r3, r2
    7868:	d100      	bne.n	786c <ticker_job+0x490>
    786a:	e132      	b.n	7ad2 <ticker_job+0x6f6>
	       (id_collide = ticker_enqueue(instance, id_insert))) {
		/* check for collision */
		if (id_collide != TICKER_NULL) {
    786c:	9b04      	ldr	r3, [sp, #16]
    786e:	2bff      	cmp	r3, #255	; 0xff
    7870:	d105      	bne.n	787e <ticker_job+0x4a2>
    7872:	e027      	b.n	78c4 <ticker_job+0x4e8>
	} else {
		skip = 0;
	}

	/* If insert collides, remove colliding or advance to next interval */
	while (id_insert !=
    7874:	9b02      	ldr	r3, [sp, #8]
    7876:	4293      	cmp	r3, r2
    7878:	d100      	bne.n	787c <ticker_job+0x4a0>
    787a:	e12a      	b.n	7ad2 <ticker_job+0x6f6>
    787c:	9204      	str	r2, [sp, #16]
	       (id_collide = ticker_enqueue(instance, id_insert))) {
		/* check for collision */
		if (id_collide != TICKER_NULL) {
			struct ticker_node *ticker_collide = &node[id_collide];
    787e:	2624      	movs	r6, #36	; 0x24
    7880:	9b04      	ldr	r3, [sp, #16]
			if (ticker_collide->lazy_current >
			    ticker_collide->lazy_periodic) {
				skip_collide = ticker_collide->lazy_current -
					       ticker_collide->lazy_periodic;
			} else {
				skip_collide = 0;
    7882:	2200      	movs	r2, #0
	/* If insert collides, remove colliding or advance to next interval */
	while (id_insert !=
	       (id_collide = ticker_enqueue(instance, id_insert))) {
		/* check for collision */
		if (id_collide != TICKER_NULL) {
			struct ticker_node *ticker_collide = &node[id_collide];
    7884:	435e      	muls	r6, r3
    7886:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7888:	199e      	adds	r6, r3, r6
			u16_t skip_collide;

			/* No. of times ticker colliding has skipped its
			 * interval.
			 */
			if (ticker_collide->lazy_current >
    788a:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
    788c:	8b31      	ldrh	r1, [r6, #24]
			u16_t skip_collide;

			/* No. of times ticker colliding has skipped its
			 * interval.
			 */
			if (ticker_collide->lazy_current >
    788e:	428b      	cmp	r3, r1
    7890:	d901      	bls.n	7896 <ticker_job+0x4ba>
			    ticker_collide->lazy_periodic) {
				skip_collide = ticker_collide->lazy_current -
    7892:	1a5b      	subs	r3, r3, r1
    7894:	b29a      	uxth	r2, r3
					       ticker_collide->lazy_periodic;
			} else {
				skip_collide = 0;
			}

			if (ticker_collide->ticks_periodic &&
    7896:	6873      	ldr	r3, [r6, #4]
    7898:	2b00      	cmp	r3, #0
    789a:	d013      	beq.n	78c4 <ticker_job+0x4e8>
			    ticker_collide->ticks_periodic &&
    789c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    789e:	429a      	cmp	r2, r3
    78a0:	d810      	bhi.n	78c4 <ticker_job+0x4e8>
			    skip_collide <= skip &&
    78a2:	78f2      	ldrb	r2, [r6, #3]
    78a4:	78e3      	ldrb	r3, [r4, #3]
    78a6:	429a      	cmp	r2, r3
    78a8:	d20c      	bcs.n	78c4 <ticker_job+0x4e8>
			    ticker_collide->force < ticker->force) {
				/* dequeue and get the reminder of ticks
				 * to expire.
				 */
				ticker_collide->ticks_to_expire =
					ticker_dequeue(instance, id_collide);
    78aa:	9904      	ldr	r1, [sp, #16]
    78ac:	0038      	movs	r0, r7
    78ae:	f7ff fc69 	bl	7184 <ticker_dequeue>

				/* unschedule node */
				ticker_collide->req = ticker_collide->ack;
    78b2:	78b3      	ldrb	r3, [r6, #2]
			    skip_collide <= skip &&
			    ticker_collide->force < ticker->force) {
				/* dequeue and get the reminder of ticks
				 * to expire.
				 */
				ticker_collide->ticks_to_expire =
    78b4:	60b0      	str	r0, [r6, #8]
					ticker_dequeue(instance, id_collide);

				/* unschedule node */
				ticker_collide->req = ticker_collide->ack;
    78b6:	7073      	strb	r3, [r6, #1]

				/* enqueue for re-insertion */
				ticker_collide->next = *insert_head;
    78b8:	466b      	mov	r3, sp
    78ba:	791b      	ldrb	r3, [r3, #4]
    78bc:	7033      	strb	r3, [r6, #0]
    78be:	9b04      	ldr	r3, [sp, #16]
    78c0:	9301      	str	r3, [sp, #4]
    78c2:	e75b      	b.n	777c <ticker_job+0x3a0>
				continue;
			}
		}

		/* occupied, try next interval */
		if (ticker->ticks_periodic != 0) {
    78c4:	6862      	ldr	r2, [r4, #4]
    78c6:	2a00      	cmp	r2, #0
    78c8:	d016      	beq.n	78f8 <ticker_job+0x51c>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    78ca:	69e1      	ldr	r1, [r4, #28]
    78cc:	6a23      	ldr	r3, [r4, #32]
    78ce:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    78d0:	4985      	ldr	r1, [pc, #532]	; (7ae8 <ticker_job+0x70c>)
    78d2:	1858      	adds	r0, r3, r1
    78d4:	4985      	ldr	r1, [pc, #532]	; (7aec <ticker_job+0x710>)
    78d6:	4288      	cmp	r0, r1
    78d8:	d902      	bls.n	78e0 <ticker_job+0x504>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    78da:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    78dc:	2300      	movs	r3, #0
    78de:	e003      	b.n	78e8 <ticker_job+0x50c>
static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < BIT(31)) &&
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    78e0:	4983      	ldr	r1, [pc, #524]	; (7af0 <ticker_job+0x714>)
    78e2:	185b      	adds	r3, r3, r1
    78e4:	6223      	str	r3, [r4, #32]
		return 1;
    78e6:	2301      	movs	r3, #1
			}
		}

		/* occupied, try next interval */
		if (ticker->ticks_periodic != 0) {
			ticker->ticks_to_expire += ticker->ticks_periodic +
    78e8:	68a1      	ldr	r1, [r4, #8]
    78ea:	1852      	adds	r2, r2, r1
    78ec:	18d3      	adds	r3, r2, r3
    78ee:	60a3      	str	r3, [r4, #8]
						   ticker_remainder_inc(ticker);
			ticker->lazy_current++;
    78f0:	8b63      	ldrh	r3, [r4, #26]
    78f2:	3301      	adds	r3, #1
    78f4:	8363      	strh	r3, [r4, #26]
    78f6:	e741      	b.n	777c <ticker_job+0x3a0>
		} else {
			return TICKER_STATUS_FAILURE;
    78f8:	2101      	movs	r1, #1
			}

			status = ticker_job_insert(instance, id_insert, ticker,
						   &insert_head);

			if (user_op) {
    78fa:	2d00      	cmp	r5, #0
    78fc:	d100      	bne.n	7900 <ticker_job+0x524>
    78fe:	e705      	b.n	770c <ticker_job+0x330>
				ticker_job_op_cb(user_op, status);
    7900:	0028      	movs	r0, r5
    7902:	f7ff fc86 	bl	7212 <ticker_job_op_cb>
    7906:	e701      	b.n	770c <ticker_job+0x330>

				user_op = NULL;
			} else {
				u8_t first;

				user_op = &user_ops[user_ops_first];
    7908:	252c      	movs	r5, #44	; 0x2c
    790a:	9b05      	ldr	r3, [sp, #20]
    790c:	435d      	muls	r5, r3
    790e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7910:	195d      	adds	r5, r3, r5
				first = user_ops_first + 1;
    7912:	9b05      	ldr	r3, [sp, #20]
    7914:	3301      	adds	r3, #1
    7916:	b2db      	uxtb	r3, r3
    7918:	9305      	str	r3, [sp, #20]
				if (first == user->count_user_op) {
    791a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    791c:	9a05      	ldr	r2, [sp, #20]
    791e:	781b      	ldrb	r3, [r3, #0]
    7920:	4293      	cmp	r3, r2
    7922:	d101      	bne.n	7928 <ticker_job+0x54c>
					first = 0;
    7924:	2300      	movs	r3, #0
    7926:	9305      	str	r3, [sp, #20]
				}
				user_ops_first = first;

				id_insert = user_op->id;
				ticker = &node[id_insert];
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7928:	782b      	ldrb	r3, [r5, #0]
    792a:	2b03      	cmp	r3, #3
    792c:	d005      	beq.n	793a <ticker_job+0x55e>
		u8_t user_ops_first;

		user = &users[count_user];
		user_ops = (void *)&user->user_op[0];
		user_ops_first = user->first;
		while ((insert_head != TICKER_NULL) ||
    792e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7930:	9a05      	ldr	r2, [sp, #20]
    7932:	789b      	ldrb	r3, [r3, #2]
    7934:	4293      	cmp	r3, r2
    7936:	d1e7      	bne.n	7908 <ticker_job+0x52c>
    7938:	e011      	b.n	795e <ticker_job+0x582>
					first = 0;
				}
				user_ops_first = first;

				id_insert = user_op->id;
				ticker = &node[id_insert];
    793a:	2424      	movs	r4, #36	; 0x24
				if (first == user->count_user_op) {
					first = 0;
				}
				user_ops_first = first;

				id_insert = user_op->id;
    793c:	786b      	ldrb	r3, [r5, #1]
				ticker = &node[id_insert];
    793e:	435c      	muls	r4, r3
				if (first == user->count_user_op) {
					first = 0;
				}
				user_ops_first = first;

				id_insert = user_op->id;
    7940:	9302      	str	r3, [sp, #8]
				ticker = &node[id_insert];
    7942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7944:	191c      	adds	r4, r3, r4
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    7946:	7863      	ldrb	r3, [r4, #1]
    7948:	78a6      	ldrb	r6, [r4, #2]
    794a:	1b9e      	subs	r6, r3, r6
    794c:	b2f6      	uxtb	r6, r6
    794e:	2e00      	cmp	r6, #0
    7950:	d100      	bne.n	7954 <ticker_job+0x578>
    7952:	e6ea      	b.n	772a <ticker_job+0x34e>
					ticker_job_op_cb(user_op,
    7954:	2101      	movs	r1, #1
    7956:	0028      	movs	r0, r5
    7958:	f7ff fc5b 	bl	7212 <ticker_job_op_cb>
    795c:	e7e7      	b.n	792e <ticker_job+0x552>
    795e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7960:	e6c3      	b.n	76ea <ticker_job+0x30e>

	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    7962:	7e3b      	ldrb	r3, [r7, #24]
    7964:	9a08      	ldr	r2, [sp, #32]
    7966:	4293      	cmp	r3, r2
    7968:	d103      	bne.n	7972 <ticker_job+0x596>
		flag_compare_update = 1;
	}

	/* Processing any list inquiries */
	if (!pending) {
    796a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    796c:	2b00      	cmp	r3, #0
    796e:	d163      	bne.n	7a38 <ticker_job+0x65c>
    7970:	e005      	b.n	797e <ticker_job+0x5a2>
    7972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7974:	2b00      	cmp	r3, #0
    7976:	d000      	beq.n	797a <ticker_job+0x59e>
    7978:	e0b0      	b.n	7adc <ticker_job+0x700>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
    797a:	2301      	movs	r3, #1
    797c:	930b      	str	r3, [sp, #44]	; 0x2c
static inline void ticker_job_list_inquire(struct ticker_instance *instance)
{
	struct ticker_user *users;
	u8_t count_user;

	users = &instance->user[0];
    797e:	687b      	ldr	r3, [r7, #4]
    7980:	9304      	str	r3, [sp, #16]
    7982:	7a7b      	ldrb	r3, [r7, #9]
    7984:	3b01      	subs	r3, #1
    7986:	b2dd      	uxtb	r5, r3
	count_user = instance->count_user;
	while (count_user--) {
    7988:	2dff      	cmp	r5, #255	; 0xff
    798a:	d055      	beq.n	7a38 <ticker_job+0x65c>
		struct ticker_user_op *user_op;
		struct ticker_user *user;

		user = &users[count_user];
    798c:	9b04      	ldr	r3, [sp, #16]
    798e:	00ec      	lsls	r4, r5, #3
    7990:	191c      	adds	r4, r3, r4
		user_op = &user->user_op[0];
    7992:	6863      	ldr	r3, [r4, #4]
    7994:	9305      	str	r3, [sp, #20]
		while (user->first != user->last) {
    7996:	7863      	ldrb	r3, [r4, #1]
    7998:	78e2      	ldrb	r2, [r4, #3]
    799a:	429a      	cmp	r2, r3
    799c:	d04a      	beq.n	7a34 <ticker_job+0x658>
			u8_t first;

			ticker_job_op_inquire(instance, &user_op[user->first]);
    799e:	222c      	movs	r2, #44	; 0x2c
    79a0:	4353      	muls	r3, r2
    79a2:	9a05      	ldr	r2, [sp, #20]
    79a4:	18d3      	adds	r3, r2, r3
					 struct ticker_user_op *uop)
{
	ticker_op_func fp_op_func;

	fp_op_func = NULL;
	switch (uop->op) {
    79a6:	781a      	ldrb	r2, [r3, #0]
    79a8:	2a01      	cmp	r2, #1
    79aa:	d033      	beq.n	7a14 <ticker_job+0x638>
    79ac:	2a02      	cmp	r2, #2
    79ae:	d138      	bne.n	7a22 <ticker_job+0x646>
	case TICKER_USER_OP_TYPE_SLOT_GET:
		ticker_by_next_slot_get(instance,
    79b0:	68d9      	ldr	r1, [r3, #12]
    79b2:	685a      	ldr	r2, [r3, #4]
    79b4:	9102      	str	r1, [sp, #8]
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
    79b6:	6839      	ldr	r1, [r7, #0]
	ticker_op_func fp_op_func;

	fp_op_func = NULL;
	switch (uop->op) {
	case TICKER_USER_OP_TYPE_SLOT_GET:
		ticker_by_next_slot_get(instance,
    79b8:	9201      	str	r2, [sp, #4]
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
    79ba:	468c      	mov	ip, r1

	_ticker_id_head = *ticker_id_head;
    79bc:	9901      	ldr	r1, [sp, #4]
	ticker_op_func fp_op_func;

	fp_op_func = NULL;
	switch (uop->op) {
	case TICKER_USER_OP_TYPE_SLOT_GET:
		ticker_by_next_slot_get(instance,
    79be:	689a      	ldr	r2, [r3, #8]
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
    79c0:	7809      	ldrb	r1, [r1, #0]
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL) ||
    79c2:	29ff      	cmp	r1, #255	; 0xff
    79c4:	d004      	beq.n	79d0 <ticker_job+0x5f4>
    79c6:	6810      	ldr	r0, [r2, #0]
    79c8:	0006      	movs	r6, r0
    79ca:	6978      	ldr	r0, [r7, #20]
    79cc:	4286      	cmp	r6, r0
    79ce:	d004      	beq.n	79da <ticker_job+0x5fe>
	    (*ticks_current != instance->ticks_current)) {
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
    79d0:	6978      	ldr	r0, [r7, #20]

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL) ||
	    (*ticks_current != instance->ticks_current)) {
		_ticker_id_head = instance->ticker_id_head;
    79d2:	7e39      	ldrb	r1, [r7, #24]
		*ticks_current = instance->ticks_current;
    79d4:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0;
    79d6:	2200      	movs	r2, #0
    79d8:	e013      	b.n	7a02 <ticker_job+0x626>
	} else {
		ticker = &node[_ticker_id_head];
    79da:	2024      	movs	r0, #36	; 0x24
    79dc:	4341      	muls	r1, r0
		_ticker_id_head = ticker->next;
    79de:	4660      	mov	r0, ip
	u8_t _ticker_id_head;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    79e0:	9a02      	ldr	r2, [sp, #8]
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
		_ticks_to_expire = 0;
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
    79e2:	5c41      	ldrb	r1, [r0, r1]
	u8_t _ticker_id_head;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    79e4:	6812      	ldr	r2, [r2, #0]
    79e6:	e00c      	b.n	7a02 <ticker_job+0x626>
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    79e8:	2024      	movs	r0, #36	; 0x24
    79ea:	4348      	muls	r0, r1
    79ec:	4460      	add	r0, ip
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL) &&
    79ee:	8ac6      	ldrh	r6, [r0, #22]
    79f0:	9606      	str	r6, [sp, #24]
    79f2:	6886      	ldr	r6, [r0, #8]
    79f4:	9603      	str	r6, [sp, #12]
    79f6:	9e06      	ldr	r6, [sp, #24]
    79f8:	2e00      	cmp	r6, #0
    79fa:	d105      	bne.n	7a08 <ticker_job+0x62c>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
    79fc:	9903      	ldr	r1, [sp, #12]
    79fe:	1852      	adds	r2, r2, r1
		_ticker_id_head = ticker->next;
    7a00:	7801      	ldrb	r1, [r0, #0]
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL) &&
    7a02:	29ff      	cmp	r1, #255	; 0xff
    7a04:	d1f0      	bne.n	79e8 <ticker_job+0x60c>
    7a06:	e001      	b.n	7a0c <ticker_job+0x630>
		_ticks_to_expire += ticker->ticks_to_expire;
		_ticker_id_head = ticker->next;
	}

	if (_ticker_id_head != TICKER_NULL) {
		_ticks_to_expire += ticker->ticks_to_expire;
    7a08:	9803      	ldr	r0, [sp, #12]
    7a0a:	1812      	adds	r2, r2, r0
	}

	*ticker_id_head = _ticker_id_head;
    7a0c:	9801      	ldr	r0, [sp, #4]
    7a0e:	7001      	strb	r1, [r0, #0]
	*ticks_to_expire = _ticks_to_expire;
    7a10:	9902      	ldr	r1, [sp, #8]
    7a12:	600a      	str	r2, [r1, #0]
					uop->params.slot_get.ticks_current,
					uop->params.slot_get.ticks_to_expire);
		/* Fall-through */

	case TICKER_USER_OP_TYPE_IDLE_GET:
		uop->status = TICKER_STATUS_SUCCESS;
    7a14:	2000      	movs	r0, #0
		fp_op_func = uop->fp_op_func;
    7a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
					uop->params.slot_get.ticks_current,
					uop->params.slot_get.ticks_to_expire);
		/* Fall-through */

	case TICKER_USER_OP_TYPE_IDLE_GET:
		uop->status = TICKER_STATUS_SUCCESS;
    7a18:	6218      	str	r0, [r3, #32]
	default:
		/* do nothing for other ops */
		break;
	}

	if (fp_op_func) {
    7a1a:	4282      	cmp	r2, r0
    7a1c:	d001      	beq.n	7a22 <ticker_job+0x646>
		fp_op_func(uop->status, uop->op_context);
    7a1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    7a20:	4790      	blx	r2
		while (user->first != user->last) {
			u8_t first;

			ticker_job_op_inquire(instance, &user_op[user->first]);

			first = user->first + 1;
    7a22:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    7a24:	7822      	ldrb	r2, [r4, #0]
		while (user->first != user->last) {
			u8_t first;

			ticker_job_op_inquire(instance, &user_op[user->first]);

			first = user->first + 1;
    7a26:	3301      	adds	r3, #1
    7a28:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
    7a2a:	429a      	cmp	r2, r3
    7a2c:	d100      	bne.n	7a30 <ticker_job+0x654>
				first = 0;
    7a2e:	2300      	movs	r3, #0
			}
			user->first = first;
    7a30:	7063      	strb	r3, [r4, #1]
    7a32:	e7b0      	b.n	7996 <ticker_job+0x5ba>
    7a34:	1e6b      	subs	r3, r5, #1
    7a36:	e7a6      	b.n	7986 <ticker_job+0x5aa>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    7a38:	2300      	movs	r3, #0
    7a3a:	773b      	strb	r3, [r7, #28]

	/* update compare if head changed */
	if (flag_compare_update) {
    7a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7a3e:	2b00      	cmp	r3, #0
    7a40:	d03e      	beq.n	7ac0 <ticker_job+0x6e4>
	u32_t ctr_post;
	u32_t ctr;
	u32_t cc;
	u32_t i;

	if (instance->ticker_id_head == TICKER_NULL) {
    7a42:	7e3b      	ldrb	r3, [r7, #24]
    7a44:	2bff      	cmp	r3, #255	; 0xff
    7a46:	d105      	bne.n	7a54 <ticker_job+0x678>
		if (cntr_stop() == 0) {
    7a48:	f7fe ff26 	bl	6898 <cntr_stop>
    7a4c:	2800      	cmp	r0, #0
    7a4e:	d137      	bne.n	7ac0 <ticker_job+0x6e4>
			instance->ticks_slot_previous = 0;
    7a50:	8378      	strh	r0, [r7, #26]
    7a52:	e035      	b.n	7ac0 <ticker_job+0x6e4>
		}

		return;
	}

	if (ticker_id_old_head == TICKER_NULL) {
    7a54:	9b08      	ldr	r3, [sp, #32]
    7a56:	2bff      	cmp	r3, #255	; 0xff
    7a58:	d107      	bne.n	7a6a <ticker_job+0x68e>
		u32_t ticks_current;

		ticks_current = cntr_cnt_get();
    7a5a:	f7fe ff33 	bl	68c4 <cntr_cnt_get>
    7a5e:	0004      	movs	r4, r0

		if (cntr_start() == 0) {
    7a60:	f7fe ff0a 	bl	6878 <cntr_start>
    7a64:	2800      	cmp	r0, #0
    7a66:	d100      	bne.n	7a6a <ticker_job+0x68e>
			instance->ticks_current = ticks_current;
    7a68:	617c      	str	r4, [r7, #20]
		}
	}

	ticker = &instance->node[instance->ticker_id_head];
	ticks_to_expire = ticker->ticks_to_expire;
    7a6a:	2324      	movs	r3, #36	; 0x24
    7a6c:	260a      	movs	r6, #10
    7a6e:	7e3a      	ldrb	r2, [r7, #24]
    7a70:	4353      	muls	r3, r2
    7a72:	683a      	ldr	r2, [r7, #0]
    7a74:	18d3      	adds	r3, r2, r3
    7a76:	689b      	ldr	r3, [r3, #8]
    7a78:	9301      	str	r3, [sp, #4]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    7a7a:	f7fe ff23 	bl	68c4 <cntr_cnt_get>
		cc = instance->ticks_current;
    7a7e:	697a      	ldr	r2, [r7, #20]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    7a80:	0005      	movs	r5, r0
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
		       ticks_to_expire : ticks_elapsed);
    7a82:	1a83      	subs	r3, r0, r2
    7a84:	021b      	lsls	r3, r3, #8
    7a86:	0a1b      	lsrs	r3, r3, #8
    7a88:	1cdc      	adds	r4, r3, #3
    7a8a:	9b01      	ldr	r3, [sp, #4]
    7a8c:	429c      	cmp	r4, r3
    7a8e:	d200      	bcs.n	7a92 <ticker_job+0x6b6>
    7a90:	001c      	movs	r4, r3

		ctr = cntr_cnt_get();
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
    7a92:	1914      	adds	r4, r2, r4
		       ticks_to_expire : ticks_elapsed);
		cc &= 0x00FFFFFF;
    7a94:	0224      	lsls	r4, r4, #8
    7a96:	0a24      	lsrs	r4, r4, #8

		instance->fp_cmp_set(cc);
    7a98:	0020      	movs	r0, r4
    7a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a9c:	4798      	blx	r3

		ctr_post = cntr_cnt_get();
    7a9e:	f7fe ff11 	bl	68c4 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    7aa2:	1b40      	subs	r0, r0, r5
    7aa4:	0200      	lsls	r0, r0, #8
    7aa6:	0a00      	lsrs	r0, r0, #8
    7aa8:	1b64      	subs	r4, r4, r5
    7aaa:	0224      	lsls	r4, r4, #8
    7aac:	3003      	adds	r0, #3
    7aae:	0a24      	lsrs	r4, r4, #8
    7ab0:	42a0      	cmp	r0, r4
    7ab2:	d905      	bls.n	7ac0 <ticker_job+0x6e4>
    7ab4:	3e01      	subs	r6, #1
	 */
	i = 10;
	do {
		u32_t ticks_elapsed;

		LL_ASSERT(i);
    7ab6:	2e00      	cmp	r6, #0
    7ab8:	d1df      	bne.n	7a7a <ticker_job+0x69e>
    7aba:	b662      	cpsie	i
    7abc:	2004      	movs	r0, #4
    7abe:	df02      	svc	2
	if (flag_compare_update) {
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    7ac0:	7f7b      	ldrb	r3, [r7, #29]
    7ac2:	2b00      	cmp	r3, #0
    7ac4:	d00d      	beq.n	7ae2 <ticker_job+0x706>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
    7ac6:	2201      	movs	r2, #1
    7ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7aca:	0011      	movs	r1, r2
    7acc:	2002      	movs	r0, #2
    7ace:	4798      	blx	r3
    7ad0:	e007      	b.n	7ae2 <ticker_job+0x706>
			return TICKER_STATUS_FAILURE;
		}
	}

	/* Inserted/Scheduled */
	ticker->req = ticker->ack + 1;
    7ad2:	78a3      	ldrb	r3, [r4, #2]

	return TICKER_STATUS_SUCCESS;
    7ad4:	2100      	movs	r1, #0
			return TICKER_STATUS_FAILURE;
		}
	}

	/* Inserted/Scheduled */
	ticker->req = ticker->ack + 1;
    7ad6:	3301      	adds	r3, #1
    7ad8:	7063      	strb	r3, [r4, #1]
    7ada:	e70e      	b.n	78fa <ticker_job+0x51e>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    7adc:	2300      	movs	r3, #0
    7ade:	773b      	strb	r3, [r7, #28]
    7ae0:	e7af      	b.n	7a42 <ticker_job+0x666>
	if (instance->worker_trigger) {
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_JOB(0);
}
    7ae2:	b017      	add	sp, #92	; 0x5c
    7ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ae6:	46c0      	nop			; (mov r8, r8)
    7ae8:	ff172b5a 	.word	0xff172b5a
    7aec:	7f172b59 	.word	0x7f172b59
    7af0:	fe2e56b6 	.word	0xfe2e56b6

00007af4 <ticker_instance1_caller_id_get>:
	return 0;
}

static u8_t ticker_instance1_caller_id_get(u8_t user_id)
{
	switch (user_id) {
    7af4:	2802      	cmp	r0, #2
    7af6:	d004      	beq.n	7b02 <ticker_instance1_caller_id_get+0xe>
    7af8:	2803      	cmp	r0, #3
    7afa:	d002      	beq.n	7b02 <ticker_instance1_caller_id_get+0xe>
	case MAYFLY_CALL_ID_PROGRAM:
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_2:
	default:
		LL_ASSERT(0);
    7afc:	b662      	cpsie	i
    7afe:	2004      	movs	r0, #4
    7b00:	df02      	svc	2
		LL_ASSERT(0);
		break;
	}

	return 0;
}
    7b02:	4770      	bx	lr

00007b04 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
    7b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b06:	0006      	movs	r6, r0
    7b08:	a805      	add	r0, sp, #20
    7b0a:	c880      	ldmia	r0!, {r7}
    7b0c:	7804      	ldrb	r4, [r0, #0]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
    7b0e:	2e00      	cmp	r6, #0
    7b10:	d009      	beq.n	7b26 <ticker_init+0x22>
    7b12:	2e01      	cmp	r6, #1
    7b14:	d139      	bne.n	7b8a <ticker_init+0x86>
		instance->fp_sched = ticker_instance0_sched;
		instance->fp_cmp_set = ticker_instance0_cmp_set;
		break;

	case 1:
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
    7b16:	481e      	ldr	r0, [pc, #120]	; (7b90 <ticker_init+0x8c>)
    7b18:	4d1e      	ldr	r5, [pc, #120]	; (7b94 <ticker_init+0x90>)
    7b1a:	64c5      	str	r5, [r0, #76]	; 0x4c
		instance->fp_sched = ticker_instance1_sched;
    7b1c:	4d1e      	ldr	r5, [pc, #120]	; (7b98 <ticker_init+0x94>)
    7b1e:	6505      	str	r5, [r0, #80]	; 0x50
		instance->fp_cmp_set = ticker_instance1_cmp_set;
    7b20:	4d1e      	ldr	r5, [pc, #120]	; (7b9c <ticker_init+0x98>)
    7b22:	6545      	str	r5, [r0, #84]	; 0x54
		break;
    7b24:	e006      	b.n	7b34 <ticker_init+0x30>
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
	case 0:
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
    7b26:	481a      	ldr	r0, [pc, #104]	; (7b90 <ticker_init+0x8c>)
    7b28:	4d1d      	ldr	r5, [pc, #116]	; (7ba0 <ticker_init+0x9c>)
    7b2a:	6205      	str	r5, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
    7b2c:	4d1d      	ldr	r5, [pc, #116]	; (7ba4 <ticker_init+0xa0>)
    7b2e:	6245      	str	r5, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
    7b30:	4d1d      	ldr	r5, [pc, #116]	; (7ba8 <ticker_init+0xa4>)
    7b32:	6285      	str	r5, [r0, #40]	; 0x28

	default:
		return TICKER_STATUS_FAILURE;
	}

	instance->count_node = count_node;
    7b34:	202c      	movs	r0, #44	; 0x2c
    7b36:	4370      	muls	r0, r6
    7b38:	4684      	mov	ip, r0
    7b3a:	4d15      	ldr	r5, [pc, #84]	; (7b90 <ticker_init+0x8c>)
    7b3c:	1828      	adds	r0, r5, r0
    7b3e:	7201      	strb	r1, [r0, #8]
	instance->node = node;
    7b40:	4661      	mov	r1, ip
    7b42:	514a      	str	r2, [r1, r5]
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    7b44:	222c      	movs	r2, #44	; 0x2c
    7b46:	4694      	mov	ip, r2
	}

	instance->count_node = count_node;
	instance->node = node;

	instance->count_user = count_user;
    7b48:	7243      	strb	r3, [r0, #9]
	instance->user = user;
    7b4a:	6047      	str	r7, [r0, #4]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
    7b4c:	3b01      	subs	r3, #1
    7b4e:	b2db      	uxtb	r3, r3
    7b50:	2bff      	cmp	r3, #255	; 0xff
    7b52:	d00c      	beq.n	7b6e <ticker_init+0x6a>
		users[count_user].user_op = user_op_;
    7b54:	9807      	ldr	r0, [sp, #28]
    7b56:	00da      	lsls	r2, r3, #3
    7b58:	18ba      	adds	r2, r7, r2
    7b5a:	6050      	str	r0, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    7b5c:	4660      	mov	r0, ip
    7b5e:	7812      	ldrb	r2, [r2, #0]
    7b60:	9907      	ldr	r1, [sp, #28]
    7b62:	4350      	muls	r0, r2
		count_op -= users[count_user].count_user_op;
    7b64:	1aa4      	subs	r4, r4, r2
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    7b66:	1808      	adds	r0, r1, r0
    7b68:	9007      	str	r0, [sp, #28]
		count_op -= users[count_user].count_user_op;
    7b6a:	b2e4      	uxtb	r4, r4
    7b6c:	e7ee      	b.n	7b4c <ticker_init+0x48>
	}

	if (count_op) {
		return TICKER_STATUS_FAILURE;
    7b6e:	2001      	movs	r0, #1
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
		count_op -= users[count_user].count_user_op;
	}

	if (count_op) {
    7b70:	2c00      	cmp	r4, #0
    7b72:	d10b      	bne.n	7b8c <ticker_init+0x88>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
    7b74:	302b      	adds	r0, #43	; 0x2b
    7b76:	4346      	muls	r6, r0
    7b78:	19ae      	adds	r6, r5, r6
    7b7a:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7b7c:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
    7b7e:	8374      	strh	r4, [r6, #26]
	instance->ticks_current = 0;
    7b80:	6174      	str	r4, [r6, #20]
	instance->ticks_elapsed_first = 0;
    7b82:	72b4      	strb	r4, [r6, #10]
	instance->ticks_elapsed_last = 0;
    7b84:	72f4      	strb	r4, [r6, #11]

	return TICKER_STATUS_SUCCESS;
    7b86:	0020      	movs	r0, r4
    7b88:	e000      	b.n	7b8c <ticker_init+0x88>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
    7b8a:	2001      	movs	r0, #1
	instance->ticks_current = 0;
	instance->ticks_elapsed_first = 0;
	instance->ticks_elapsed_last = 0;

	return TICKER_STATUS_SUCCESS;
}
    7b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b8e:	46c0      	nop			; (mov r8, r8)
    7b90:	20000e14 	.word	0x20000e14
    7b94:	00007af5 	.word	0x00007af5
    7b98:	00007245 	.word	0x00007245
    7b9c:	0000722b 	.word	0x0000722b
    7ba0:	00007319 	.word	0x00007319
    7ba4:	000072ad 	.word	0x000072ad
    7ba8:	00007237 	.word	0x00007237

00007bac <ticker_trigger>:

void ticker_trigger(u8_t instance_index)
{
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    7bac:	232c      	movs	r3, #44	; 0x2c
    7bae:	4358      	muls	r0, r3
    7bb0:	4b05      	ldr	r3, [pc, #20]	; (7bc8 <ticker_trigger+0x1c>)
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
    7bb2:	b510      	push	{r4, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    7bb4:	1818      	adds	r0, r3, r0
    7bb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7bb8:	2b00      	cmp	r3, #0
    7bba:	d003      	beq.n	7bc4 <ticker_trigger+0x18>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
    7bbc:	2201      	movs	r2, #1
    7bbe:	2000      	movs	r0, #0
    7bc0:	0011      	movs	r1, r2
    7bc2:	4798      	blx	r3
						   CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_ISR(0);
}
    7bc4:	bd10      	pop	{r4, pc}
    7bc6:	46c0      	nop			; (mov r8, r8)
    7bc8:	20000e14 	.word	0x20000e14

00007bcc <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    7bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7bce:	242c      	movs	r4, #44	; 0x2c
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    7bd0:	b085      	sub	sp, #20
    7bd2:	9301      	str	r3, [sp, #4]
    7bd4:	ab0d      	add	r3, sp, #52	; 0x34
    7bd6:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7bd8:	4360      	muls	r0, r4
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    7bda:	9302      	str	r3, [sp, #8]
    7bdc:	ab0e      	add	r3, sp, #56	; 0x38
    7bde:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7be0:	00cd      	lsls	r5, r1, #3
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    7be2:	9303      	str	r3, [sp, #12]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7be4:	4b1c      	ldr	r3, [pc, #112]	; (7c58 <ticker_start+0x8c>)
    7be6:	181b      	adds	r3, r3, r0
    7be8:	6858      	ldr	r0, [r3, #4]
    7bea:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    7bec:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    7bee:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    7bf0:	1c77      	adds	r7, r6, #1
    7bf2:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    7bf4:	4287      	cmp	r7, r0
    7bf6:	4180      	sbcs	r0, r0
    7bf8:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    7bfa:	7868      	ldrb	r0, [r5, #1]
    7bfc:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    7bfe:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    7c00:	45bc      	cmp	ip, r7
    7c02:	d026      	beq.n	7c52 <ticker_start+0x86>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7c04:	4374      	muls	r4, r6
    7c06:	6868      	ldr	r0, [r5, #4]
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    7c08:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7c0a:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = ticker_id;
    7c0c:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7c0e:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
    7c10:	2003      	movs	r0, #3
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
    7c12:	6062      	str	r2, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
    7c16:	7020      	strb	r0, [r4, #0]
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
    7c18:	60a2      	str	r2, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7c1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    7c1c:	6226      	str	r6, [r4, #32]
	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
	user_op->params.start.ticks_periodic = ticks_periodic;
    7c1e:	60e2      	str	r2, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    7c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    7c22:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
	user_op->params.start.ticks_periodic = ticks_periodic;
	user_op->params.start.remainder_periodic = remainder_periodic;
    7c24:	6122      	str	r2, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7c26:	466a      	mov	r2, sp
    7c28:	8992      	ldrh	r2, [r2, #12]
    7c2a:	82e2      	strh	r2, [r4, #22]
	user_op->params.start.lazy = lazy;
    7c2c:	466a      	mov	r2, sp
    7c2e:	8912      	ldrh	r2, [r2, #8]
    7c30:	82a2      	strh	r2, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
    7c32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7c34:	61a2      	str	r2, [r4, #24]
	user_op->params.start.context = context;
    7c36:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7c38:	61e2      	str	r2, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    7c3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7c3c:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7c3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7c40:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    7c42:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    7c44:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    7c46:	6a1b      	ldr	r3, [r3, #32]
    7c48:	4798      	blx	r3
    7c4a:	2200      	movs	r2, #0
    7c4c:	0031      	movs	r1, r6
    7c4e:	47a8      	blx	r5

	return user_op->status;
    7c50:	6a20      	ldr	r0, [r4, #32]
}
    7c52:	b005      	add	sp, #20
    7c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c56:	46c0      	nop			; (mov r8, r8)
    7c58:	20000e14 	.word	0x20000e14

00007c5c <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    7c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7c5e:	242c      	movs	r4, #44	; 0x2c

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    7c60:	b087      	sub	sp, #28
    7c62:	9300      	str	r3, [sp, #0]
    7c64:	ab0c      	add	r3, sp, #48	; 0x30
    7c66:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7c68:	4360      	muls	r0, r4

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    7c6a:	9301      	str	r3, [sp, #4]
    7c6c:	ab0d      	add	r3, sp, #52	; 0x34
    7c6e:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7c70:	00cd      	lsls	r5, r1, #3

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    7c72:	9302      	str	r3, [sp, #8]
    7c74:	ab0e      	add	r3, sp, #56	; 0x38
    7c76:	881b      	ldrh	r3, [r3, #0]
    7c78:	9303      	str	r3, [sp, #12]
    7c7a:	ab0f      	add	r3, sp, #60	; 0x3c
    7c7c:	881b      	ldrh	r3, [r3, #0]
    7c7e:	9304      	str	r3, [sp, #16]
    7c80:	ab10      	add	r3, sp, #64	; 0x40
    7c82:	781b      	ldrb	r3, [r3, #0]
    7c84:	9305      	str	r3, [sp, #20]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7c86:	4b1c      	ldr	r3, [pc, #112]	; (7cf8 <ticker_update+0x9c>)
    7c88:	181b      	adds	r3, r3, r0
    7c8a:	6858      	ldr	r0, [r3, #4]
    7c8c:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    7c8e:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    7c90:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    7c92:	1c77      	adds	r7, r6, #1
    7c94:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    7c96:	4287      	cmp	r7, r0
    7c98:	4180      	sbcs	r0, r0
    7c9a:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    7c9c:	7868      	ldrb	r0, [r5, #1]
    7c9e:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    7ca0:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    7ca2:	45bc      	cmp	ip, r7
    7ca4:	d026      	beq.n	7cf4 <ticker_update+0x98>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7ca6:	4374      	muls	r4, r6
    7ca8:	6868      	ldr	r0, [r5, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    7caa:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7cac:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = ticker_id;
    7cae:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7cb0:	466a      	mov	r2, sp
    7cb2:	8812      	ldrh	r2, [r2, #0]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7cb4:	2004      	movs	r0, #4
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7cb6:	80a2      	strh	r2, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7cb8:	466a      	mov	r2, sp
    7cba:	8892      	ldrh	r2, [r2, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    7cbc:	7020      	strb	r0, [r4, #0]
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7cbe:	80e2      	strh	r2, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7cc0:	466a      	mov	r2, sp
    7cc2:	8912      	ldrh	r2, [r2, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    7cc4:	6226      	str	r6, [r4, #32]
	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    7cc6:	8122      	strh	r2, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7cc8:	466a      	mov	r2, sp
    7cca:	8992      	ldrh	r2, [r2, #12]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    7ccc:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7cce:	8162      	strh	r2, [r4, #10]
	user_op->params.update.lazy = lazy;
    7cd0:	466a      	mov	r2, sp
    7cd2:	8a12      	ldrh	r2, [r2, #16]
    7cd4:	81a2      	strh	r2, [r4, #12]
	user_op->params.update.force = force;
    7cd6:	466a      	mov	r2, sp
    7cd8:	7d12      	ldrb	r2, [r2, #20]
    7cda:	73a2      	strb	r2, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    7cdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7cde:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7ce0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7ce2:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    7ce4:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    7ce6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    7ce8:	6a1b      	ldr	r3, [r3, #32]
    7cea:	4798      	blx	r3
    7cec:	2200      	movs	r2, #0
    7cee:	0031      	movs	r1, r6
    7cf0:	47a8      	blx	r5

	return user_op->status;
    7cf2:	6a20      	ldr	r0, [r4, #32]
}
    7cf4:	b007      	add	sp, #28
    7cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7cf8:	20000e14 	.word	0x20000e14

00007cfc <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    7cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7cfe:	242c      	movs	r4, #44	; 0x2c
    7d00:	4360      	muls	r0, r4
	return user_op->status;
}

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    7d02:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7d04:	4b13      	ldr	r3, [pc, #76]	; (7d54 <ticker_stop+0x58>)
    7d06:	00cd      	lsls	r5, r1, #3
    7d08:	181b      	adds	r3, r3, r0
    7d0a:	6858      	ldr	r0, [r3, #4]
    7d0c:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    7d0e:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    7d10:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    7d12:	1c77      	adds	r7, r6, #1
    7d14:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    7d16:	4287      	cmp	r7, r0
    7d18:	4180      	sbcs	r0, r0
    7d1a:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    7d1c:	7868      	ldrb	r0, [r5, #1]
    7d1e:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    7d20:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    7d22:	45bc      	cmp	ip, r7
    7d24:	d014      	beq.n	7d50 <ticker_stop+0x54>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7d26:	4374      	muls	r4, r6
    7d28:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    7d2a:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7d2c:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7d2e:	2005      	movs	r0, #5
	user_op->id = ticker_id;
    7d30:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    7d32:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7d34:	7020      	strb	r0, [r4, #0]
	user_op->id = ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    7d36:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7d38:	9a08      	ldr	r2, [sp, #32]
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    7d3a:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    7d3c:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    7d3e:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    7d40:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    7d42:	0008      	movs	r0, r1
    7d44:	6a1b      	ldr	r3, [r3, #32]
    7d46:	4798      	blx	r3
    7d48:	2200      	movs	r2, #0
    7d4a:	0031      	movs	r1, r6
    7d4c:	47a8      	blx	r5

	return user_op->status;
    7d4e:	6a20      	ldr	r0, [r4, #32]
}
    7d50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7d52:	46c0      	nop			; (mov r8, r8)
    7d54:	20000e14 	.word	0x20000e14

00007d58 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    7d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7d5a:	242c      	movs	r4, #44	; 0x2c
    7d5c:	4360      	muls	r0, r4
}

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    7d5e:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7d60:	4b15      	ldr	r3, [pc, #84]	; (7db8 <ticker_next_slot_get+0x60>)
    7d62:	00cd      	lsls	r5, r1, #3
    7d64:	181b      	adds	r3, r3, r0
    7d66:	6858      	ldr	r0, [r3, #4]
    7d68:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    7d6a:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    7d6c:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    7d6e:	1c77      	adds	r7, r6, #1
    7d70:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    7d72:	4287      	cmp	r7, r0
    7d74:	4180      	sbcs	r0, r0
    7d76:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    7d78:	7868      	ldrb	r0, [r5, #1]
    7d7a:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    7d7c:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    7d7e:	45bc      	cmp	ip, r7
    7d80:	d019      	beq.n	7db6 <ticker_next_slot_get+0x5e>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7d82:	4374      	muls	r4, r6
    7d84:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    7d86:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7d88:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    7d8a:	20ff      	movs	r0, #255	; 0xff
	user_op->params.slot_get.ticker_id = ticker_id;
    7d8c:	6062      	str	r2, [r4, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
    7d8e:	9a01      	ldr	r2, [sp, #4]
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    7d90:	7060      	strb	r0, [r4, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
    7d92:	60a2      	str	r2, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    7d94:	9a08      	ldr	r2, [sp, #32]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    7d96:	7026      	strb	r6, [r4, #0]
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    7d98:	60e2      	str	r2, [r4, #12]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    7d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
    7d9c:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    7d9e:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    7da2:	0008      	movs	r0, r1
	user_op->params.slot_get.ticker_id = ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    7da4:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    7da6:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    7da8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    7daa:	6a1b      	ldr	r3, [r3, #32]
    7dac:	4798      	blx	r3
    7dae:	2200      	movs	r2, #0
    7db0:	0031      	movs	r1, r6
    7db2:	47a8      	blx	r5

	return user_op->status;
    7db4:	6a20      	ldr	r0, [r4, #32]
}
    7db6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7db8:	20000e14 	.word	0x20000e14

00007dbc <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    7dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7dbe:	242c      	movs	r4, #44	; 0x2c
    7dc0:	4360      	muls	r0, r4
	return user_op->status;
}

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    7dc2:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
    7dc4:	4b12      	ldr	r3, [pc, #72]	; (7e10 <ticker_job_idle_get+0x54>)
    7dc6:	00cd      	lsls	r5, r1, #3
    7dc8:	181b      	adds	r3, r3, r0
    7dca:	6858      	ldr	r0, [r3, #4]
    7dcc:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    7dce:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    7dd0:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];

	last = user->last + 1;
    7dd2:	1c77      	adds	r7, r6, #1
    7dd4:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    7dd6:	4287      	cmp	r7, r0
    7dd8:	4180      	sbcs	r0, r0
    7dda:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    7ddc:	7868      	ldrb	r0, [r5, #1]
    7dde:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    7de0:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    7de2:	45bc      	cmp	ip, r7
    7de4:	d013      	beq.n	7e0e <ticker_job_idle_get+0x52>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7de6:	4374      	muls	r4, r6
    7de8:	686e      	ldr	r6, [r5, #4]
    7dea:	1934      	adds	r4, r6, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    7dec:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
    7dee:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    7df0:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    7df2:	7020      	strb	r0, [r4, #0]
	user_op->id = TICKER_NULL;
    7df4:	30fe      	adds	r0, #254	; 0xfe
    7df6:	7060      	strb	r0, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    7df8:	62a2      	str	r2, [r4, #40]	; 0x28
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    7dfa:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;
    7dfc:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    7dfe:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    7e00:	0008      	movs	r0, r1
    7e02:	6a1b      	ldr	r3, [r3, #32]
    7e04:	4798      	blx	r3
    7e06:	2200      	movs	r2, #0
    7e08:	0031      	movs	r1, r6
    7e0a:	47a8      	blx	r5

	return user_op->status;
    7e0c:	6a20      	ldr	r0, [r4, #32]
}
    7e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7e10:	20000e14 	.word	0x20000e14

00007e14 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    7e14:	232c      	movs	r3, #44	; 0x2c

	return user_op->status;
}

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
    7e16:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    7e18:	4343      	muls	r3, r0
    7e1a:	4805      	ldr	r0, [pc, #20]	; (7e30 <ticker_job_sched+0x1c>)
    7e1c:	18c3      	adds	r3, r0, r3
    7e1e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    7e20:	0008      	movs	r0, r1
    7e22:	6a1b      	ldr	r3, [r3, #32]
    7e24:	4798      	blx	r3
    7e26:	2200      	movs	r2, #0
    7e28:	2102      	movs	r1, #2
    7e2a:	47a0      	blx	r4
}
    7e2c:	bd10      	pop	{r4, pc}
    7e2e:	46c0      	nop			; (mov r8, r8)
    7e30:	20000e14 	.word	0x20000e14

00007e34 <ticker_ticks_now_get>:

u32_t ticker_ticks_now_get(void)
{
    7e34:	b510      	push	{r4, lr}
	return cntr_cnt_get();
    7e36:	f7fe fd45 	bl	68c4 <cntr_cnt_get>
}
    7e3a:	bd10      	pop	{r4, pc}

00007e3c <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7e3c:	1a40      	subs	r0, r0, r1
    7e3e:	0200      	lsls	r0, r0, #8
    7e40:	0a00      	lsrs	r0, r0, #8
}
    7e42:	4770      	bx	lr

00007e44 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
    7e44:	b570      	push	{r4, r5, r6, lr}
    7e46:	0006      	movs	r6, r0
    7e48:	000c      	movs	r4, r1
	while (len) {
    7e4a:	2c00      	cmp	r4, #0
    7e4c:	d013      	beq.n	7e76 <bt_rand+0x32>
		k_mutex_lock(&mutex_rand, K_FOREVER);
    7e4e:	2101      	movs	r1, #1
    7e50:	4d0a      	ldr	r5, [pc, #40]	; (7e7c <bt_rand+0x38>)
    7e52:	4249      	negs	r1, r1
    7e54:	0028      	movs	r0, r5
    7e56:	f006 ff67 	bl	ed28 <k_mutex_lock>
		len = rand_get(len, buf);
    7e5a:	0020      	movs	r0, r4
    7e5c:	0031      	movs	r1, r6
    7e5e:	f7ff f931 	bl	70c4 <rand_get>
    7e62:	0004      	movs	r4, r0
		k_mutex_unlock(&mutex_rand);
    7e64:	0028      	movs	r0, r5
    7e66:	f006 ffc1 	bl	edec <k_mutex_unlock>
		if (len) {
    7e6a:	2c00      	cmp	r4, #0
    7e6c:	d003      	beq.n	7e76 <bt_rand+0x32>
    7e6e:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    7e70:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    7e72:	bf20      	wfe
    7e74:	e7e9      	b.n	7e4a <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
    7e76:	2000      	movs	r0, #0
    7e78:	bd70      	pop	{r4, r5, r6, pc}
    7e7a:	46c0      	nop			; (mov r8, r8)
    7e7c:	20000764 	.word	0x20000764

00007e80 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    7e80:	b510      	push	{r4, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    7e82:	2300      	movs	r3, #0
    7e84:	f7fe fd56 	bl	6934 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    7e88:	2000      	movs	r0, #0
    7e8a:	bd10      	pop	{r4, pc}

00007e8c <cpu_sleep>:
    7e8c:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    7e8e:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    7e90:	bf20      	wfe
static inline void cpu_sleep(void)
{
	__WFE();
	__SEV();
	__WFE();
}
    7e92:	4770      	bx	lr

00007e94 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    7e94:	6008      	str	r0, [r1, #0]
}
    7e96:	4770      	bx	lr

00007e98 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    7e98:	2800      	cmp	r0, #0
    7e9a:	d104      	bne.n	7ea6 <prepare_reduced+0xe>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
    7e9c:	2380      	movs	r3, #128	; 0x80
    7e9e:	680a      	ldr	r2, [r1, #0]
    7ea0:	061b      	lsls	r3, r3, #24
    7ea2:	4313      	orrs	r3, r2
    7ea4:	600b      	str	r3, [r1, #0]
	}
}
    7ea6:	4770      	bx	lr

00007ea8 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    7ea8:	2800      	cmp	r0, #0
    7eaa:	d103      	bne.n	7eb4 <prepare_normal+0xc>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
    7eac:	680b      	ldr	r3, [r1, #0]
    7eae:	005b      	lsls	r3, r3, #1
    7eb0:	085b      	lsrs	r3, r3, #1
    7eb2:	600b      	str	r3, [r1, #0]
	}
}
    7eb4:	4770      	bx	lr

00007eb6 <chan_sel_remap>:

	return 0;
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    7eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
    7eb8:	0002      	movs	r2, r0
    7eba:	1d46      	adds	r6, r0, #5
		u8_t bit_count;

		bite = *chan_map;
		bit_count = 8;
		while (bit_count--) {
			if (bite & 0x01) {
    7ebc:	2701      	movs	r7, #1
static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    7ebe:	2000      	movs	r0, #0
	byte_count = 5;
	while (byte_count--) {
    7ec0:	42b2      	cmp	r2, r6
    7ec2:	d011      	beq.n	7ee8 <chan_sel_remap+0x32>
    7ec4:	0004      	movs	r4, r0
		u8_t bite;
		u8_t bit_count;

		bite = *chan_map;
    7ec6:	7815      	ldrb	r5, [r2, #0]
    7ec8:	3408      	adds	r4, #8
    7eca:	b2e4      	uxtb	r4, r4
		bit_count = 8;
		while (bit_count--) {
    7ecc:	42a0      	cmp	r0, r4
    7ece:	d009      	beq.n	7ee4 <chan_sel_remap+0x2e>
			if (bite & 0x01) {
    7ed0:	423d      	tst	r5, r7
    7ed2:	d003      	beq.n	7edc <chan_sel_remap+0x26>
				if (chan_index == 0) {
    7ed4:	2900      	cmp	r1, #0
    7ed6:	d007      	beq.n	7ee8 <chan_sel_remap+0x32>
					break;
				}
				chan_index--;
    7ed8:	3901      	subs	r1, #1
    7eda:	b2c9      	uxtb	r1, r1
			}
			chan_next++;
    7edc:	1c43      	adds	r3, r0, #1
    7ede:	b2d8      	uxtb	r0, r3
			bite >>= 1;
    7ee0:	086d      	lsrs	r5, r5, #1
    7ee2:	e7f3      	b.n	7ecc <chan_sel_remap+0x16>

		if (bit_count < 8) {
			break;
		}

		chan_map++;
    7ee4:	3201      	adds	r2, #1
    7ee6:	e7eb      	b.n	7ec0 <chan_sel_remap+0xa>
	}

	return chan_next;
}
    7ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00007eec <packet_rx_acquired_count_get>:
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    7eec:	229f      	movs	r2, #159	; 0x9f
    7eee:	4b09      	ldr	r3, [pc, #36]	; (7f14 <packet_rx_acquired_count_get+0x28>)
    7ef0:	0052      	lsls	r2, r2, #1
    7ef2:	5c98      	ldrb	r0, [r3, r2]
	    _radio.packet_rx_last) {
    7ef4:	223e      	movs	r2, #62	; 0x3e
    7ef6:	32ff      	adds	r2, #255	; 0xff
    7ef8:	5c99      	ldrb	r1, [r3, r2]
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    7efa:	4288      	cmp	r0, r1
    7efc:	d302      	bcc.n	7f04 <packet_rx_acquired_count_get+0x18>
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    7efe:	5c9b      	ldrb	r3, [r3, r2]

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
    7f00:	1ac0      	subs	r0, r0, r3
    7f02:	e005      	b.n	7f10 <packet_rx_acquired_count_get+0x24>
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    7f04:	219e      	movs	r1, #158	; 0x9e
    7f06:	0049      	lsls	r1, r1, #1
			_radio.packet_rx_last +
    7f08:	5c9a      	ldrb	r2, [r3, r2]
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    7f0a:	5c5b      	ldrb	r3, [r3, r1]
    7f0c:	18c0      	adds	r0, r0, r3
    7f0e:	1a80      	subs	r0, r0, r2
    7f10:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_last +
			_radio.packet_rx_acquire);
	}
}
    7f12:	4770      	bx	lr
    7f14:	20000ea0 	.word	0x20000ea0

00007f18 <packet_rx_reserve_get>:

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    7f18:	b510      	push	{r4, lr}
    7f1a:	0004      	movs	r4, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
    7f1c:	f7ff ffe6 	bl	7eec <packet_rx_acquired_count_get>
    7f20:	0003      	movs	r3, r0
		return 0;
    7f22:	2000      	movs	r0, #0

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
    7f24:	42a3      	cmp	r3, r4
    7f26:	d309      	bcc.n	7f3c <packet_rx_reserve_get+0x24>
		return 0;
	}

	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    7f28:	223e      	movs	r2, #62	; 0x3e
    7f2a:	4b05      	ldr	r3, [pc, #20]	; (7f40 <packet_rx_reserve_get+0x28>)
    7f2c:	32ff      	adds	r2, #255	; 0xff
    7f2e:	5c9a      	ldrb	r2, [r3, r2]
    7f30:	33fc      	adds	r3, #252	; 0xfc
    7f32:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    7f34:	0093      	lsls	r3, r2, #2
    7f36:	5858      	ldr	r0, [r3, r1]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    7f38:	2301      	movs	r3, #1
    7f3a:	7103      	strb	r3, [r0, #4]

	return radio_pdu_node_rx;
}
    7f3c:	bd10      	pop	{r4, pc}
    7f3e:	46c0      	nop			; (mov r8, r8)
    7f40:	20000ea0 	.word	0x20000ea0

00007f44 <packet_rx_allocate>:

	*pdu_data_tx = _pdu_data_tx;
}

static void packet_rx_allocate(u8_t max)
{
    7f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    7f46:	23a8      	movs	r3, #168	; 0xa8
    7f48:	4d22      	ldr	r5, [pc, #136]	; (7fd4 <packet_rx_allocate+0x90>)
    7f4a:	005b      	lsls	r3, r3, #1
    7f4c:	5ceb      	ldrb	r3, [r5, r3]
    7f4e:	1c1e      	adds	r6, r3, #0
    7f50:	4283      	cmp	r3, r0
    7f52:	d900      	bls.n	7f56 <packet_rx_allocate+0x12>
    7f54:	1c06      	adds	r6, r0, #0
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    7f56:	239f      	movs	r3, #159	; 0x9f
    7f58:	005b      	lsls	r3, r3, #1
    7f5a:	5cec      	ldrb	r4, [r5, r3]
	if (acquire == _radio.packet_rx_count) {
    7f5c:	3b02      	subs	r3, #2

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    7f5e:	3401      	adds	r4, #1
	if (acquire == _radio.packet_rx_count) {
    7f60:	5ceb      	ldrb	r3, [r5, r3]

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    7f62:	b2e4      	uxtb	r4, r4
    7f64:	b2f6      	uxtb	r6, r6
	if (acquire == _radio.packet_rx_count) {
    7f66:	42a3      	cmp	r3, r4
    7f68:	d11b      	bne.n	7fa2 <packet_rx_allocate+0x5e>
		acquire = 0;
    7f6a:	2400      	movs	r4, #0
    7f6c:	e019      	b.n	7fa2 <packet_rx_allocate+0x5e>
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    7f6e:	239f      	movs	r3, #159	; 0x9f
    7f70:	002a      	movs	r2, r5
		if (!radio_pdu_node_rx) {
			mem_release(link, &_radio.link_rx_free);
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;
    7f72:	6007      	str	r7, [r0, #0]

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    7f74:	005b      	lsls	r3, r3, #1
    7f76:	5ceb      	ldrb	r3, [r5, r3]
    7f78:	32fc      	adds	r2, #252	; 0xfc
    7f7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    7f7c:	009b      	lsls	r3, r3, #2
    7f7e:	5098      	str	r0, [r3, r2]
		_radio.packet_rx_acquire = acquire;
    7f80:	239f      	movs	r3, #159	; 0x9f
    7f82:	005b      	lsls	r3, r3, #1
    7f84:	54ec      	strb	r4, [r5, r3]

		acquire = _radio.packet_rx_acquire + 1;
		if (acquire == _radio.packet_rx_count) {
    7f86:	3b02      	subs	r3, #2
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    7f88:	3401      	adds	r4, #1
		if (acquire == _radio.packet_rx_count) {
    7f8a:	5ceb      	ldrb	r3, [r5, r3]
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    7f8c:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
    7f8e:	42a3      	cmp	r3, r4
    7f90:	d100      	bne.n	7f94 <packet_rx_allocate+0x50>
			acquire = 0;
    7f92:	2400      	movs	r4, #0
		}

		_radio.link_rx_data_quota--;
    7f94:	22a8      	movs	r2, #168	; 0xa8
    7f96:	0052      	lsls	r2, r2, #1
    7f98:	5cab      	ldrb	r3, [r5, r2]
    7f9a:	3e01      	subs	r6, #1
    7f9c:	3b01      	subs	r3, #1
    7f9e:	54ab      	strb	r3, [r5, r2]
    7fa0:	b2f6      	uxtb	r6, r6
	acquire = _radio.packet_rx_acquire + 1;
	if (acquire == _radio.packet_rx_count) {
		acquire = 0;
	}

	while ((max--) && (acquire != _radio.packet_rx_last)) {
    7fa2:	2e00      	cmp	r6, #0
    7fa4:	d014      	beq.n	7fd0 <packet_rx_allocate+0x8c>
    7fa6:	233e      	movs	r3, #62	; 0x3e
    7fa8:	33ff      	adds	r3, #255	; 0xff
    7faa:	5ceb      	ldrb	r3, [r5, r3]
    7fac:	429c      	cmp	r4, r3
    7fae:	d00f      	beq.n	7fd0 <packet_rx_allocate+0x8c>
		void *link;
		struct radio_pdu_node_rx *radio_pdu_node_rx;

		link = mem_acquire(&_radio.link_rx_free);
    7fb0:	4809      	ldr	r0, [pc, #36]	; (7fd8 <packet_rx_allocate+0x94>)
    7fb2:	f7fe fbbd 	bl	6730 <mem_acquire>
    7fb6:	1e07      	subs	r7, r0, #0
		if (!link) {
    7fb8:	d00a      	beq.n	7fd0 <packet_rx_allocate+0x8c>
			break;
		}

		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    7fba:	0028      	movs	r0, r5
    7fbc:	302d      	adds	r0, #45	; 0x2d
    7fbe:	30ff      	adds	r0, #255	; 0xff
    7fc0:	f7fe fbb6 	bl	6730 <mem_acquire>
		if (!radio_pdu_node_rx) {
    7fc4:	2800      	cmp	r0, #0
    7fc6:	d1d2      	bne.n	7f6e <packet_rx_allocate+0x2a>
			mem_release(link, &_radio.link_rx_free);
    7fc8:	4903      	ldr	r1, [pc, #12]	; (7fd8 <packet_rx_allocate+0x94>)
    7fca:	0038      	movs	r0, r7
    7fcc:	f7fe fbc9 	bl	6762 <mem_release>
			acquire = 0;
		}

		_radio.link_rx_data_quota--;
	}
}
    7fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7fd2:	46c0      	nop			; (mov r8, r8)
    7fd4:	20000ea0 	.word	0x20000ea0
    7fd8:	20000fe4 	.word	0x20000fe4

00007fdc <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    7fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    7fde:	4c36      	ldr	r4, [pc, #216]	; (80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>)
    7fe0:	0023      	movs	r3, r4
    7fe2:	0020      	movs	r0, r4
    7fe4:	33ff      	adds	r3, #255	; 0xff
    7fe6:	7b5a      	ldrb	r2, [r3, #13]
    7fe8:	30fc      	adds	r0, #252	; 0xfc
    7fea:	2a00      	cmp	r2, #0
    7fec:	d009      	beq.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    7fee:	0023      	movs	r3, r4
    7ff0:	218c      	movs	r1, #140	; 0x8c
    7ff2:	3309      	adds	r3, #9
    7ff4:	33ff      	adds	r3, #255	; 0xff
    7ff6:	b292      	uxth	r2, r2
    7ff8:	0049      	lsls	r1, r1, #1
    7ffa:	6880      	ldr	r0, [r0, #8]
    7ffc:	f7fe fb72 	bl	66e4 <mem_init>
    8000:	e000      	b.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    8002:	60c2      	str	r2, [r0, #12]
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
    8004:	0023      	movs	r3, r4
    8006:	229b      	movs	r2, #155	; 0x9b
    8008:	0026      	movs	r6, r4
    800a:	0027      	movs	r7, r4
    800c:	332d      	adds	r3, #45	; 0x2d
    800e:	37fc      	adds	r7, #252	; 0xfc
    8010:	0052      	lsls	r2, r2, #1
    8012:	36fe      	adds	r6, #254	; 0xfe
    8014:	33ff      	adds	r3, #255	; 0xff
    8016:	5ca2      	ldrb	r2, [r4, r2]
    8018:	8ef1      	ldrh	r1, [r6, #54]	; 0x36
    801a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    801c:	f7fe fb62 	bl	66e4 <mem_init>
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    8020:	0025      	movs	r5, r4
    8022:	239e      	movs	r3, #158	; 0x9e
    8024:	35ff      	adds	r5, #255	; 0xff
    8026:	005b      	lsls	r3, r3, #1
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    8028:	5ce2      	ldrb	r2, [r4, r3]
    802a:	7b6b      	ldrb	r3, [r5, #13]
    802c:	2108      	movs	r1, #8
    802e:	18d2      	adds	r2, r2, r3
    8030:	6c78      	ldr	r0, [r7, #68]	; 0x44
    8032:	4b22      	ldr	r3, [pc, #136]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
    8034:	f7fe fb56 	bl	66e4 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    8038:	0023      	movs	r3, r4
    803a:	3359      	adds	r3, #89	; 0x59
    803c:	33ff      	adds	r3, #255	; 0xff
    803e:	2202      	movs	r2, #2
    8040:	2124      	movs	r1, #36	; 0x24
    8042:	6db8      	ldr	r0, [r7, #88]	; 0x58
    8044:	f7fe fb4e 	bl	66e4 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    8048:	22b8      	movs	r2, #184	; 0xb8
	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    804a:	0023      	movs	r3, r4
    804c:	21b2      	movs	r1, #178	; 0xb2
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    804e:	0052      	lsls	r2, r2, #1
	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    8050:	5ca2      	ldrb	r2, [r4, r2]
    8052:	3361      	adds	r3, #97	; 0x61
    8054:	3a01      	subs	r2, #1
    8056:	0049      	lsls	r1, r1, #1
    8058:	6e38      	ldr	r0, [r7, #96]	; 0x60
    805a:	33ff      	adds	r3, #255	; 0xff
    805c:	b292      	uxth	r2, r2
    805e:	5a61      	ldrh	r1, [r4, r1]
    8060:	f7fe fb40 	bl	66e4 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    8064:	4815      	ldr	r0, [pc, #84]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
    8066:	f7fe fb63 	bl	6730 <mem_acquire>
	LL_ASSERT(link);
    806a:	2800      	cmp	r0, #0
    806c:	d102      	bne.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
    806e:	b662      	cpsie	i
    8070:	2004      	movs	r0, #4
    8072:	df02      	svc	2
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    8074:	0022      	movs	r2, r4
    8076:	0021      	movs	r1, r4
    8078:	324d      	adds	r2, #77	; 0x4d
    807a:	3149      	adds	r1, #73	; 0x49
    807c:	31ff      	adds	r1, #255	; 0xff
    807e:	32ff      	adds	r2, #255	; 0xff
    8080:	f7fe fbb4 	bl	67ec <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    8084:	2238      	movs	r2, #56	; 0x38
    8086:	3406      	adds	r4, #6
    8088:	7fe3      	ldrb	r3, [r4, #31]

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    808a:	20ff      	movs	r0, #255	; 0xff
	link = mem_acquire(&_radio.link_rx_free);
	LL_ASSERT(link);
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    808c:	4313      	orrs	r3, r2
    808e:	77e3      	strb	r3, [r4, #31]
	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
	_radio.data_chan_map[1] = 0xFF;
	_radio.data_chan_map[2] = 0xFF;
	_radio.data_chan_map[3] = 0xFF;
	_radio.data_chan_map[4] = 0x1F;
    8090:	231f      	movs	r3, #31
    8092:	76eb      	strb	r3, [r5, #27]
	_radio.data_chan_count = 37;
    8094:	3306      	adds	r3, #6
    8096:	772b      	strb	r3, [r5, #28]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    8098:	3b0a      	subs	r3, #10
    809a:	8433      	strh	r3, [r6, #32]
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
    809c:	332e      	adds	r3, #46	; 0x2e
    809e:	33ff      	adds	r3, #255	; 0xff
    80a0:	8473      	strh	r3, [r6, #34]	; 0x22
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* Initialize the DLE defaults */
	_radio.default_phy_tx = BIT(0);
    80a2:	3b48      	subs	r3, #72	; 0x48
    80a4:	3bff      	subs	r3, #255	; 0xff

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    80a6:	75e8      	strb	r0, [r5, #23]
	_radio.data_chan_map[1] = 0xFF;
    80a8:	7628      	strb	r0, [r5, #24]
	_radio.data_chan_map[2] = 0xFF;
    80aa:	7668      	strb	r0, [r5, #25]
	_radio.data_chan_map[3] = 0xFF;
    80ac:	76a8      	strb	r0, [r5, #26]
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* Initialize the DLE defaults */
	_radio.default_phy_tx = BIT(0);
    80ae:	84b3      	strh	r3, [r6, #36]	; 0x24
	_radio.default_phy_rx = BIT(0);
    80b0:	84f3      	strh	r3, [r6, #38]	; 0x26
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY_CODED */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    80b2:	f7ff ff47 	bl	7f44 <packet_rx_allocate>
}
    80b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80b8:	20000ea0 	.word	0x20000ea0
    80bc:	20000fe4 	.word	0x20000fe4

000080c0 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    80c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    80c2:	780c      	ldrb	r4, [r1, #0]
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    80c4:	b085      	sub	sp, #20
    80c6:	9001      	str	r0, [sp, #4]
    80c8:	9102      	str	r1, [sp, #8]
    80ca:	9203      	str	r2, [sp, #12]
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
		return 0;
    80cc:	2000      	movs	r0, #0
{
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
    80ce:	4294      	cmp	r4, r2
    80d0:	d03f      	beq.n	8152 <tx_cmplt_get+0x92>
		return 0;
	}

	cmplt = 0;
    80d2:	0006      	movs	r6, r0
	*handle = _radio.pkt_release[_first].handle;
    80d4:	4d20      	ldr	r5, [pc, #128]	; (8158 <tx_cmplt_get+0x98>)
    80d6:	00e3      	lsls	r3, r4, #3
    80d8:	35fc      	adds	r5, #252	; 0xfc
    80da:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    80dc:	5a9b      	ldrh	r3, [r3, r2]
    80de:	9a01      	ldr	r2, [sp, #4]
    80e0:	8013      	strh	r3, [r2, #0]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    80e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    80e4:	00e3      	lsls	r3, r4, #3
    80e6:	18d3      	adds	r3, r2, r3
    80e8:	9a01      	ldr	r2, [sp, #4]
    80ea:	8811      	ldrh	r1, [r2, #0]
    80ec:	881a      	ldrh	r2, [r3, #0]
    80ee:	4291      	cmp	r1, r2
    80f0:	d12c      	bne.n	814c <tx_cmplt_get+0x8c>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    80f2:	6858      	ldr	r0, [r3, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
    80f4:	2801      	cmp	r0, #1
    80f6:	d90d      	bls.n	8114 <tx_cmplt_get+0x54>
    80f8:	2203      	movs	r2, #3
    80fa:	0001      	movs	r1, r0
    80fc:	4391      	bics	r1, r2
    80fe:	d00e      	beq.n	811e <tx_cmplt_get+0x5e>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    8100:	1d01      	adds	r1, r0, #4
    8102:	d00c      	beq.n	811e <tx_cmplt_get+0x5e>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    8104:	7941      	ldrb	r1, [r0, #5]
    8106:	2900      	cmp	r1, #0
    8108:	d009      	beq.n	811e <tx_cmplt_get+0x5e>
    810a:	7901      	ldrb	r1, [r0, #4]
    810c:	400a      	ands	r2, r1
    810e:	3a01      	subs	r2, #1
    8110:	2a01      	cmp	r2, #1
    8112:	d804      	bhi.n	811e <tx_cmplt_get+0x5e>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
    8114:	2201      	movs	r2, #1
    8116:	605a      	str	r2, [r3, #4]
				(struct radio_pdu_node_tx *)1;

			cmplt++;
    8118:	18b3      	adds	r3, r6, r2
    811a:	b2de      	uxtb	r6, r3
    811c:	e001      	b.n	8122 <tx_cmplt_get+0x62>
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx =
    811e:	2202      	movs	r2, #2
    8120:	605a      	str	r2, [r3, #4]
				(struct radio_pdu_node_tx *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    8122:	2303      	movs	r3, #3
    8124:	0002      	movs	r2, r0
    8126:	4f0c      	ldr	r7, [pc, #48]	; (8158 <tx_cmplt_get+0x98>)
    8128:	439a      	bics	r2, r3
    812a:	d004      	beq.n	8136 <tx_cmplt_get+0x76>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    812c:	0039      	movs	r1, r7
    812e:	3161      	adds	r1, #97	; 0x61
    8130:	31ff      	adds	r1, #255	; 0xff
    8132:	f7fe fb16 	bl	6762 <mem_release>
		}

		_first = _first + 1;
		if (_first == _radio.packet_tx_count) {
    8136:	23b8      	movs	r3, #184	; 0xb8
    8138:	005b      	lsls	r3, r3, #1

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    813a:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    813c:	5cfb      	ldrb	r3, [r7, r3]

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    813e:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
    8140:	42a3      	cmp	r3, r4
    8142:	d100      	bne.n	8146 <tx_cmplt_get+0x86>
			_first = 0;
    8144:	2400      	movs	r4, #0
		}

	} while (_first != last);
    8146:	9b03      	ldr	r3, [sp, #12]
    8148:	429c      	cmp	r4, r3
    814a:	d1ca      	bne.n	80e2 <tx_cmplt_get+0x22>

	*first = _first;

	return cmplt;
    814c:	0030      	movs	r0, r6
			_first = 0;
		}

	} while (_first != last);

	*first = _first;
    814e:	9b02      	ldr	r3, [sp, #8]
    8150:	701c      	strb	r4, [r3, #0]

	return cmplt;
}
    8152:	b005      	add	sp, #20
    8154:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8156:	46c0      	nop			; (mov r8, r8)
    8158:	20000ea0 	.word	0x20000ea0

0000815c <connection_get>:

static struct connection *connection_get(u16_t handle)
{
	struct connection *conn;

	if (handle < _radio.connection_count) {
    815c:	4b0a      	ldr	r3, [pc, #40]	; (8188 <connection_get+0x2c>)
{
	return &_radio.advertiser.scan_data;
}

static struct connection *connection_get(u16_t handle)
{
    815e:	b510      	push	{r4, lr}
	struct connection *conn;

	if (handle < _radio.connection_count) {
    8160:	001a      	movs	r2, r3
    8162:	32ff      	adds	r2, #255	; 0xff
    8164:	7b52      	ldrb	r2, [r2, #13]
{
	return &_radio.advertiser.scan_data;
}

static struct connection *connection_get(u16_t handle)
{
    8166:	0004      	movs	r4, r0
	struct connection *conn;

	if (handle < _radio.connection_count) {
    8168:	4282      	cmp	r2, r0
    816a:	d90b      	bls.n	8184 <connection_get+0x28>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    816c:	218c      	movs	r1, #140	; 0x8c
    816e:	33fc      	adds	r3, #252	; 0xfc
    8170:	0002      	movs	r2, r0
    8172:	0049      	lsls	r1, r1, #1
    8174:	6898      	ldr	r0, [r3, #8]
    8176:	f7fe fb12 	bl	679e <mem_get>
		if ((conn) && (conn->handle == handle)) {
    817a:	2800      	cmp	r0, #0
    817c:	d002      	beq.n	8184 <connection_get+0x28>
    817e:	8c03      	ldrh	r3, [r0, #32]
    8180:	42a3      	cmp	r3, r4
    8182:	d000      	beq.n	8186 <connection_get+0x2a>
			return conn;
		}
	}

	return 0;
    8184:	2000      	movs	r0, #0
}
    8186:	bd10      	pop	{r4, pc}
    8188:	20000ea0 	.word	0x20000ea0

0000818c <role_disable>:
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    818c:	2302      	movs	r3, #2
		LL_ASSERT(0);
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
    818e:	b5f0      	push	{r4, r5, r6, r7, lr}
    8190:	b089      	sub	sp, #36	; 0x24
    8192:	0004      	movs	r4, r0
    8194:	9103      	str	r1, [sp, #12]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8196:	9304      	str	r3, [sp, #16]
	u32_t ret;

	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
    8198:	2805      	cmp	r0, #5
    819a:	d008      	beq.n	81ae <role_disable+0x22>
    819c:	2806      	cmp	r0, #6
    819e:	d122      	bne.n	81e6 <role_disable+0x5a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
			  (ret_cb == TICKER_STATUS_FAILURE));
		break;

	case RADIO_TICKER_ID_SCAN:
		ticks_xtal_to_start =
    81a0:	4b72      	ldr	r3, [pc, #456]	; (836c <role_disable+0x1e0>)
    81a2:	001a      	movs	r2, r3
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    81a4:	33d0      	adds	r3, #208	; 0xd0
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
			  (ret_cb == TICKER_STATUS_FAILURE));
		break;

	case RADIO_TICKER_ID_SCAN:
		ticks_xtal_to_start =
    81a6:	32cc      	adds	r2, #204	; 0xcc
    81a8:	6817      	ldr	r7, [r2, #0]
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    81aa:	681b      	ldr	r3, [r3, #0]
    81ac:	e027      	b.n	81fe <role_disable+0x72>
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    81ae:	4b6f      	ldr	r3, [pc, #444]	; (836c <role_disable+0x1e0>)
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    81b0:	9a03      	ldr	r2, [sp, #12]
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    81b2:	695f      	ldr	r7, [r3, #20]
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    81b4:	699b      	ldr	r3, [r3, #24]
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    81b6:	2103      	movs	r1, #3
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    81b8:	9302      	str	r3, [sp, #8]
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    81ba:	ab04      	add	r3, sp, #16
    81bc:	9300      	str	r3, [sp, #0]
    81be:	2000      	movs	r0, #0
    81c0:	4b6b      	ldr	r3, [pc, #428]	; (8370 <role_disable+0x1e4>)
    81c2:	f7ff fd9b 	bl	7cfc <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
    81c6:	2802      	cmp	r0, #2
    81c8:	d003      	beq.n	81d2 <role_disable+0x46>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    81ca:	9b04      	ldr	r3, [sp, #16]
    81cc:	2b00      	cmp	r3, #0
    81ce:	d106      	bne.n	81de <role_disable+0x52>
    81d0:	e016      	b.n	8200 <role_disable+0x74>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
			/* wait for ticker to be stopped */
			while (ret_cb == TICKER_STATUS_BUSY) {
    81d2:	9b04      	ldr	r3, [sp, #16]
    81d4:	2b02      	cmp	r3, #2
    81d6:	d1f8      	bne.n	81ca <role_disable+0x3e>
				cpu_sleep();
    81d8:	f7ff fe58 	bl	7e8c <cpu_sleep>
    81dc:	e7f9      	b.n	81d2 <role_disable+0x46>
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    81de:	9b04      	ldr	r3, [sp, #16]
    81e0:	2b01      	cmp	r3, #1
    81e2:	d00d      	beq.n	8200 <role_disable+0x74>
    81e4:	e0b2      	b.n	834c <role_disable+0x1c0>
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
			_radio.scanner.hdr.ticks_active_to_start;
		break;
	default:
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    81e6:	2806      	cmp	r0, #6
    81e8:	d800      	bhi.n	81ec <role_disable+0x60>
    81ea:	e0af      	b.n	834c <role_disable+0x1c0>
			struct connection *conn;
			u16_t conn_handle;

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
    81ec:	3807      	subs	r0, #7
    81ee:	b280      	uxth	r0, r0
    81f0:	f7ff ffb4 	bl	815c <connection_get>
			if (!conn) {
    81f4:	2800      	cmp	r0, #0
    81f6:	d100      	bne.n	81fa <role_disable+0x6e>
    81f8:	e0b4      	b.n	8364 <role_disable+0x1d8>
				return 1;
			}

			ticks_xtal_to_start =
    81fa:	6807      	ldr	r7, [r0, #0]
				conn->hdr.ticks_xtal_to_start;
			ticks_active_to_start =
    81fc:	6843      	ldr	r3, [r0, #4]
    81fe:	9302      	str	r3, [sp, #8]
			LL_ASSERT(0);
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
    8200:	4d5a      	ldr	r5, [pc, #360]	; (836c <role_disable+0x1e0>)
    8202:	7ba8      	ldrb	r0, [r5, #14]
    8204:	b2c0      	uxtb	r0, r0
    8206:	2800      	cmp	r0, #0
    8208:	d000      	beq.n	820c <role_disable+0x80>
    820a:	e09f      	b.n	834c <role_disable+0x1c0>
	_radio.ticker_id_stop = ticker_id_primary;

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret_cb = TICKER_STATUS_BUSY;
    820c:	2302      	movs	r3, #2
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    820e:	4e58      	ldr	r6, [pc, #352]	; (8370 <role_disable+0x1e4>)
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
	_radio.ticker_id_stop = ticker_id_primary;
    8210:	73ac      	strb	r4, [r5, #14]

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret_cb = TICKER_STATUS_BUSY;
    8212:	9304      	str	r3, [sp, #16]
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8214:	ab04      	add	r3, sp, #16
    8216:	9300      	str	r3, [sp, #0]
    8218:	0022      	movs	r2, r4
    821a:	0033      	movs	r3, r6
    821c:	2103      	movs	r1, #3
    821e:	f7ff fd6d 	bl	7cfc <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    8222:	2802      	cmp	r0, #2
    8224:	d005      	beq.n	8232 <role_disable+0xa6>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb != TICKER_STATUS_SUCCESS) {
    8226:	9b04      	ldr	r3, [sp, #16]
    8228:	4d50      	ldr	r5, [pc, #320]	; (836c <role_disable+0x1e0>)
    822a:	2b00      	cmp	r3, #0
    822c:	d000      	beq.n	8230 <role_disable+0xa4>
    822e:	e095      	b.n	835c <role_disable+0x1d0>
    8230:	e00d      	b.n	824e <role_disable+0xc2>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
		/* if inside our event, enable Job. */
		if (_radio.ticker_id_event == ticker_id_primary) {
    8232:	7b6b      	ldrb	r3, [r5, #13]
    8234:	429c      	cmp	r4, r3
    8236:	d104      	bne.n	8242 <role_disable+0xb6>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    8238:	2201      	movs	r2, #1
    823a:	2003      	movs	r0, #3
    823c:	0011      	movs	r1, r2
    823e:	f7fe f94f 	bl	64e0 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);
		}

		/* wait for ticker to be stopped */
		while (ret_cb == TICKER_STATUS_BUSY) {
    8242:	9b04      	ldr	r3, [sp, #16]
    8244:	2b02      	cmp	r3, #2
    8246:	d1ee      	bne.n	8226 <role_disable+0x9a>
			cpu_sleep();
    8248:	f7ff fe20 	bl	7e8c <cpu_sleep>
    824c:	e7f9      	b.n	8242 <role_disable+0xb6>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
		goto role_disable_cleanup;
	}

	/* Inside our event, gracefully handle XTAL and Radio actives */
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    824e:	7b2b      	ldrb	r3, [r5, #12]
    8250:	429c      	cmp	r4, r3
    8252:	d003      	beq.n	825c <role_disable+0xd0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    8254:	7b6b      	ldrb	r3, [r5, #13]
    8256:	429c      	cmp	r4, r3
    8258:	d000      	beq.n	825c <role_disable+0xd0>
    825a:	e07a      	b.n	8352 <role_disable+0x1c6>
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    825c:	2302      	movs	r3, #2
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    825e:	2200      	movs	r2, #0
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8260:	9305      	str	r3, [sp, #20]
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8262:	ab05      	add	r3, sp, #20
    8264:	9300      	str	r3, [sp, #0]
    8266:	2103      	movs	r1, #3
    8268:	0033      	movs	r3, r6
    826a:	0010      	movs	r0, r2
    826c:	f7ff fd46 	bl	7cfc <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, RADIO_TICKER_ID_EVENT,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    8270:	2802      	cmp	r0, #2
    8272:	d107      	bne.n	8284 <role_disable+0xf8>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    8274:	2201      	movs	r2, #1
    8276:	0011      	movs	r1, r2
    8278:	1880      	adds	r0, r0, r2
    827a:	f7fe f931 	bl	64e0 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 1);

		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    827e:	9b05      	ldr	r3, [sp, #20]
    8280:	2b02      	cmp	r3, #2
    8282:	d063      	beq.n	834c <role_disable+0x1c0>
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
    8284:	9805      	ldr	r0, [sp, #20]
    8286:	2302      	movs	r3, #2
    8288:	2800      	cmp	r0, #0
    828a:	d130      	bne.n	82ee <role_disable+0x162>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop = {0, 0, s_link, NULL,
			mayfly_xtal_stop};
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    828c:	9306      	str	r3, [sp, #24]
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
    828e:	7b2b      	ldrb	r3, [r5, #12]
    8290:	2b00      	cmp	r3, #0
    8292:	d05b      	beq.n	834c <role_disable+0x1c0>
		_radio.ticker_id_prepare = 0;

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8294:	ab06      	add	r3, sp, #24
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
		_radio.ticker_id_prepare = 0;
    8296:	7328      	strb	r0, [r5, #12]

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8298:	2201      	movs	r2, #1
    829a:	9300      	str	r3, [sp, #0]
    829c:	2103      	movs	r1, #3
    829e:	0033      	movs	r3, r6
    82a0:	f7ff fd2c 	bl	7cfc <ticker_stop>
				  RADIO_TICKER_USER_ID_APP,
				  RADIO_TICKER_ID_MARKER_0,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    82a4:	2802      	cmp	r0, #2
    82a6:	d107      	bne.n	82b8 <role_disable+0x12c>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    82a8:	2201      	movs	r2, #1
    82aa:	0011      	movs	r1, r2
    82ac:	1880      	adds	r0, r0, r2
    82ae:	f7fe f917 	bl	64e0 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    82b2:	9b06      	ldr	r3, [sp, #24]
    82b4:	2b02      	cmp	r3, #2
    82b6:	d049      	beq.n	834c <role_disable+0x1c0>
		}

		if (ret_cb == TICKER_STATUS_SUCCESS) {
    82b8:	9906      	ldr	r1, [sp, #24]
    82ba:	2900      	cmp	r1, #0
    82bc:	d104      	bne.n	82c8 <role_disable+0x13c>
			/* Step 2.1.1: Check and deassert Radio Active or XTAL
			 * start
			 */
			if (ticks_active_to_start > ticks_xtal_to_start) {
    82be:	9b02      	ldr	r3, [sp, #8]
    82c0:	42bb      	cmp	r3, r7
    82c2:	d90c      	bls.n	82de <role_disable+0x152>
				u32_t retval;

				/* radio active asserted, handle deasserting
				 * here
				 */
				retval = mayfly_enqueue(
    82c4:	4b2b      	ldr	r3, [pc, #172]	; (8374 <role_disable+0x1e8>)
    82c6:	e00b      	b.n	82e0 <role_disable+0x154>
						RADIO_TICKER_USER_ID_APP,
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
				LL_ASSERT(!retval);
			}
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
    82c8:	9b06      	ldr	r3, [sp, #24]
    82ca:	2b01      	cmp	r3, #1
    82cc:	d13e      	bne.n	834c <role_disable+0x1c0>
			u32_t retval;

			/* Step 2.1.2: Deassert Radio Active and XTAL start */

			/* radio active asserted, handle deasserting here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    82ce:	2200      	movs	r2, #0
    82d0:	4b28      	ldr	r3, [pc, #160]	; (8374 <role_disable+0x1e8>)
    82d2:	0011      	movs	r1, r2
    82d4:	2003      	movs	r0, #3
    82d6:	f7fe f923 	bl	6520 <mayfly_enqueue>
    82da:	1e01      	subs	r1, r0, #0
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_inactive);
			LL_ASSERT(!retval);
    82dc:	d136      	bne.n	834c <role_disable+0x1c0>

			/* XTAL started, handle XTAL stop here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    82de:	4b26      	ldr	r3, [pc, #152]	; (8378 <role_disable+0x1ec>)
    82e0:	000a      	movs	r2, r1
    82e2:	2003      	movs	r0, #3
    82e4:	f7fe f91c 	bl	6520 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
			LL_ASSERT(!retval);
    82e8:	2800      	cmp	r0, #0
    82ea:	d032      	beq.n	8352 <role_disable+0x1c6>
    82ec:	e02e      	b.n	834c <role_disable+0x1c0>
		} else {
			LL_ASSERT(0);
		}
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
    82ee:	9c05      	ldr	r4, [sp, #20]
    82f0:	2c01      	cmp	r4, #1
    82f2:	d12b      	bne.n	834c <role_disable+0x1c0>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    82f4:	9307      	str	r3, [sp, #28]
		 * (role dependent)
		 */
		/* Stop ticker "may" be in use for direct adv or scanner,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    82f6:	ab07      	add	r3, sp, #28
    82f8:	9300      	str	r3, [sp, #0]
    82fa:	9a03      	ldr	r2, [sp, #12]
    82fc:	0033      	movs	r3, r6
    82fe:	2103      	movs	r1, #3
    8300:	2000      	movs	r0, #0
    8302:	f7ff fcfb 	bl	7cfc <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    8306:	2802      	cmp	r0, #2
    8308:	d107      	bne.n	831a <role_disable+0x18e>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    830a:	0022      	movs	r2, r4
    830c:	0021      	movs	r1, r4
    830e:	3001      	adds	r0, #1
    8310:	f7fe f8e6 	bl	64e0 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    8314:	9b07      	ldr	r3, [sp, #28]
    8316:	2b02      	cmp	r3, #2
    8318:	d018      	beq.n	834c <role_disable+0x1c0>
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    831a:	9b07      	ldr	r3, [sp, #28]
    831c:	2b00      	cmp	r3, #0
    831e:	d002      	beq.n	8326 <role_disable+0x19a>
    8320:	9b07      	ldr	r3, [sp, #28]
    8322:	2b01      	cmp	r3, #1
    8324:	d112      	bne.n	834c <role_disable+0x1c0>
			  (ret_cb == TICKER_STATUS_FAILURE));

		if (_radio.role != ROLE_NONE) {
    8326:	7beb      	ldrb	r3, [r5, #15]
    8328:	2b00      	cmp	r3, #0
    832a:	d012      	beq.n	8352 <role_disable+0x1c6>
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    832c:	2204      	movs	r2, #4
    832e:	4b13      	ldr	r3, [pc, #76]	; (837c <role_disable+0x1f0>)

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    8330:	2003      	movs	r0, #3
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    8332:	609a      	str	r2, [r3, #8]

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    8334:	2200      	movs	r2, #0
    8336:	0011      	movs	r1, r2
    8338:	f7fe f8f2 	bl	6520 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_stop);
			LL_ASSERT(!retval);
    833c:	2800      	cmp	r0, #0
    833e:	d105      	bne.n	834c <role_disable+0x1c0>

			/* wait for radio ISR to exit */
			while (_radio.role != ROLE_NONE) {
    8340:	7beb      	ldrb	r3, [r5, #15]
    8342:	2b00      	cmp	r3, #0
    8344:	d005      	beq.n	8352 <role_disable+0x1c6>
				cpu_sleep();
    8346:	f7ff fda1 	bl	7e8c <cpu_sleep>
    834a:	e7f9      	b.n	8340 <role_disable+0x1b4>
			}
		}
	} else {
		LL_ASSERT(0);
    834c:	b662      	cpsie	i
    834e:	2004      	movs	r0, #4
    8350:	df02      	svc	2

		role_active_disable(ticker_id_stop,
				    ticks_xtal_to_start, ticks_active_to_start);
	}

	if (!_radio.ticker_id_stop) {
    8352:	7bab      	ldrb	r3, [r5, #14]
    8354:	2b00      	cmp	r3, #0
    8356:	d101      	bne.n	835c <role_disable+0x1d0>
		ret_cb = TICKER_STATUS_FAILURE;
    8358:	3301      	adds	r3, #1
    835a:	9304      	str	r3, [sp, #16]
	}

role_disable_cleanup:
	_radio.ticker_id_stop = 0;
    835c:	2300      	movs	r3, #0
    835e:	73ab      	strb	r3, [r5, #14]

	return ret_cb;
    8360:	9804      	ldr	r0, [sp, #16]
    8362:	e000      	b.n	8366 <role_disable+0x1da>

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
			if (!conn) {
				return 1;
    8364:	2001      	movs	r0, #1

role_disable_cleanup:
	_radio.ticker_id_stop = 0;

	return ret_cb;
}
    8366:	b009      	add	sp, #36	; 0x24
    8368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    836a:	46c0      	nop			; (mov r8, r8)
    836c:	20000ea0 	.word	0x20000ea0
    8370:	00007e95 	.word	0x00007e95
    8374:	20000678 	.word	0x20000678
    8378:	200006c8 	.word	0x200006c8
    837c:	20000668 	.word	0x20000668

00008380 <rx_packet_set>:

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    8380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    8382:	0003      	movs	r3, r0

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    8384:	0006      	movs	r6, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    8386:	3333      	adds	r3, #51	; 0x33
    8388:	781c      	ldrb	r4, [r3, #0]
{
	u16_t max_rx_octets;
	u8_t phy;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_rx_octets = conn->max_rx_octets;
    838a:	8e05      	ldrh	r5, [r0, #48]	; 0x30
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    838c:	06a4      	lsls	r4, r4, #26
    838e:	0f64      	lsrs	r4, r4, #29
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    8390:	0020      	movs	r0, r4

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    8392:	000f      	movs	r7, r1
	phy = conn->phy_rx;
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    8394:	2100      	movs	r1, #0
    8396:	f7fe fb21 	bl	69dc <radio_phy_set>

	if (conn->enc_rx) {
    839a:	0033      	movs	r3, r6
    839c:	2201      	movs	r2, #1
    839e:	33c0      	adds	r3, #192	; 0xc0
    83a0:	781b      	ldrb	r3, [r3, #0]
    83a2:	0064      	lsls	r4, r4, #1
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    83a4:	4322      	orrs	r2, r4
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);

	if (conn->enc_rx) {
    83a6:	06db      	lsls	r3, r3, #27
    83a8:	d50a      	bpl.n	83c0 <rx_packet_set+0x40>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    83aa:	1d29      	adds	r1, r5, #4
    83ac:	b2c9      	uxtb	r1, r1
    83ae:	2008      	movs	r0, #8
    83b0:	f7fe fb56 	bl	6a60 <radio_pkt_configure>

		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx,
    83b4:	0030      	movs	r0, r6
    83b6:	0039      	movs	r1, r7
    83b8:	30c1      	adds	r0, #193	; 0xc1
    83ba:	f7fe fd73 	bl	6ea4 <radio_ccm_rx_pkt_set>
    83be:	e004      	b.n	83ca <rx_packet_set+0x4a>
						      pdu_data_rx));
	} else {
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    83c0:	2008      	movs	r0, #8
    83c2:	b2e9      	uxtb	r1, r5
    83c4:	f7fe fb4c 	bl	6a60 <radio_pkt_configure>

		radio_pkt_rx_set(pdu_data_rx);
    83c8:	0038      	movs	r0, r7
    83ca:	f7fe fb67 	bl	6a9c <radio_pkt_rx_set>
	}
}
    83ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000083d0 <prepare_pdu_data_tx>:
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    83d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    83d2:	0006      	movs	r6, r0
    83d4:	0004      	movs	r4, r0
    83d6:	36c0      	adds	r6, #192	; 0xc0
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    83d8:	000d      	movs	r5, r1
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    83da:	7831      	ldrb	r1, [r6, #0]
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    83dc:	0002      	movs	r2, r0
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    83de:	09cb      	lsrs	r3, r1, #7
    83e0:	34fc      	adds	r4, #252	; 0xfc
    83e2:	2b00      	cmp	r3, #0
    83e4:	d133      	bne.n	844e <prepare_pdu_data_tx+0x7e>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    83e6:	68a3      	ldr	r3, [r4, #8]

	if ((conn->empty != 0) || /* empty packet */
    83e8:	2b00      	cmp	r3, #0
    83ea:	d030      	beq.n	844e <prepare_pdu_data_tx+0x7e>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    83ec:	1d18      	adds	r0, r3, #4
    83ee:	9001      	str	r0, [sp, #4]

	if ((conn->empty != 0) || /* empty packet */
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
    83f0:	0708      	lsls	r0, r1, #28
    83f2:	d542      	bpl.n	847a <prepare_pdu_data_tx+0xaa>
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
    83f4:	795f      	ldrb	r7, [r3, #5]
    83f6:	2f00      	cmp	r7, #0
    83f8:	d03f      	beq.n	847a <prepare_pdu_data_tx+0xaa>
	    (_pdu_data_tx->len != 0) &&
    83fa:	791f      	ldrb	r7, [r3, #4]
    83fc:	43ff      	mvns	r7, r7
    83fe:	07b8      	lsls	r0, r7, #30
    8400:	d125      	bne.n	844e <prepare_pdu_data_tx+0x7e>
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
	     ((conn->role.master.role == 0) &&
    8402:	0017      	movs	r7, r2
    8404:	3744      	adds	r7, #68	; 0x44
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
	    (_pdu_data_tx->len != 0) &&
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    8406:	783f      	ldrb	r7, [r7, #0]
    8408:	79db      	ldrb	r3, [r3, #7]
    840a:	46bc      	mov	ip, r7
    840c:	4660      	mov	r0, ip
    840e:	2740      	movs	r7, #64	; 0x40
    8410:	07c0      	lsls	r0, r0, #31
    8412:	d40c      	bmi.n	842e <prepare_pdu_data_tx+0x5e>
	     ((conn->role.master.role == 0) &&
    8414:	4239      	tst	r1, r7
    8416:	d102      	bne.n	841e <prepare_pdu_data_tx+0x4e>
	      (((conn->refresh == 0) &&
    8418:	2b02      	cmp	r3, #2
    841a:	d105      	bne.n	8428 <prepare_pdu_data_tx+0x58>
    841c:	e02d      	b.n	847a <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    841e:	1e99      	subs	r1, r3, #2
    8420:	2901      	cmp	r1, #1
    8422:	d92a      	bls.n	847a <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    8424:	2b0b      	cmp	r3, #11
    8426:	d028      	beq.n	847a <prepare_pdu_data_tx+0xaa>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    8428:	2b06      	cmp	r3, #6
    842a:	d10c      	bne.n	8446 <prepare_pdu_data_tx+0x76>
    842c:	e025      	b.n	847a <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
	     ((conn->role.slave.role != 0) &&
    842e:	4239      	tst	r1, r7
    8430:	d102      	bne.n	8438 <prepare_pdu_data_tx+0x68>
	      (((conn->refresh == 0) &&
    8432:	2b02      	cmp	r3, #2
    8434:	d104      	bne.n	8440 <prepare_pdu_data_tx+0x70>
    8436:	e020      	b.n	847a <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    8438:	27fd      	movs	r7, #253	; 0xfd
    843a:	1e99      	subs	r1, r3, #2
    843c:	4239      	tst	r1, r7
    843e:	d01c      	beq.n	847a <prepare_pdu_data_tx+0xaa>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    8440:	1f59      	subs	r1, r3, #5
    8442:	2901      	cmp	r1, #1
    8444:	d919      	bls.n	847a <prepare_pdu_data_tx+0xaa>
    8446:	21fb      	movs	r1, #251	; 0xfb
    8448:	3b0d      	subs	r3, #13
    844a:	420b      	tst	r3, r1
    844c:	d015      	beq.n	847a <prepare_pdu_data_tx+0xaa>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    844e:	2280      	movs	r2, #128	; 0x80
    8450:	7833      	ldrb	r3, [r6, #0]
    8452:	4252      	negs	r2, r2
    8454:	4313      	orrs	r3, r2
    8456:	7033      	strb	r3, [r6, #0]

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    8458:	f7fe fb8e 	bl	6b78 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    845c:	2203      	movs	r2, #3
    845e:	7803      	ldrb	r3, [r0, #0]
    8460:	4393      	bics	r3, r2
    8462:	3a02      	subs	r2, #2
    8464:	4313      	orrs	r3, r2
    8466:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    8468:	2300      	movs	r3, #0
    846a:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    846c:	68a1      	ldr	r1, [r4, #8]
    846e:	7803      	ldrb	r3, [r0, #0]
    8470:	320f      	adds	r2, #15
    8472:	2900      	cmp	r1, #0
    8474:	d129      	bne.n	84ca <prepare_pdu_data_tx+0xfa>
		pdu_data_tx->md = 1;
	} else {
		pdu_data_tx->md = 0;
    8476:	4393      	bics	r3, r2
    8478:	e028      	b.n	84cc <prepare_pdu_data_tx+0xfc>
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);
    847a:	0011      	movs	r1, r2
    847c:	31ff      	adds	r1, #255	; 0xff
    847e:	7d8b      	ldrb	r3, [r1, #22]
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    8480:	9801      	ldr	r0, [sp, #4]
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    8482:	7d4e      	ldrb	r6, [r1, #21]
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    8484:	18c0      	adds	r0, r0, r3
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    8486:	2e00      	cmp	r6, #0
    8488:	d101      	bne.n	848e <prepare_pdu_data_tx+0xbe>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    848a:	7846      	ldrb	r6, [r0, #1]
    848c:	754e      	strb	r6, [r1, #21]
		}

		if (conn->packet_tx_head_offset) {
    848e:	2b00      	cmp	r3, #0
    8490:	d005      	beq.n	849e <prepare_pdu_data_tx+0xce>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8492:	2603      	movs	r6, #3
    8494:	7803      	ldrb	r3, [r0, #0]
    8496:	43b3      	bics	r3, r6
    8498:	3e02      	subs	r6, #2
    849a:	4333      	orrs	r3, r6
    849c:	7003      	strb	r3, [r0, #0]
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    849e:	2610      	movs	r6, #16

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    84a0:	7d4b      	ldrb	r3, [r1, #21]
    84a2:	7d89      	ldrb	r1, [r1, #22]
    84a4:	1a5b      	subs	r3, r3, r1
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    84a6:	7801      	ldrb	r1, [r0, #0]

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    84a8:	b2db      	uxtb	r3, r3
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    84aa:	43b1      	bics	r1, r6

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    84ac:	7043      	strb	r3, [r0, #1]
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    84ae:	7001      	strb	r1, [r0, #0]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		max_tx_octets = conn->max_tx_octets;
    84b0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
    84b2:	429a      	cmp	r2, r3
    84b4:	d203      	bcs.n	84be <prepare_pdu_data_tx+0xee>
			_pdu_data_tx->len = max_tx_octets;
			_pdu_data_tx->md = 1;
    84b6:	b2cb      	uxtb	r3, r1
    84b8:	4333      	orrs	r3, r6
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
			_pdu_data_tx->len = max_tx_octets;
    84ba:	7042      	strb	r2, [r0, #1]
			_pdu_data_tx->md = 1;
    84bc:	7003      	strb	r3, [r0, #0]
		}

		if (conn->pkt_tx_head->next) {
    84be:	68a3      	ldr	r3, [r4, #8]
    84c0:	681b      	ldr	r3, [r3, #0]
    84c2:	2b00      	cmp	r3, #0
    84c4:	d003      	beq.n	84ce <prepare_pdu_data_tx+0xfe>
			_pdu_data_tx->md = 1;
    84c6:	2210      	movs	r2, #16
    84c8:	7803      	ldrb	r3, [r0, #0]
    84ca:	4313      	orrs	r3, r2
    84cc:	7003      	strb	r3, [r0, #0]
		}
	}

	_pdu_data_tx->rfu = 0;
    84ce:	231f      	movs	r3, #31
    84d0:	7802      	ldrb	r2, [r0, #0]
    84d2:	4013      	ands	r3, r2
    84d4:	7003      	strb	r3, [r0, #0]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR)
	_pdu_data_tx->resv = 0;
    84d6:	2300      	movs	r3, #0
    84d8:	7083      	strb	r3, [r0, #2]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR */

	*pdu_data_tx = _pdu_data_tx;
    84da:	6028      	str	r0, [r5, #0]
}
    84dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000084de <tx_packet_set>:
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    84de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    84e0:	0003      	movs	r3, r0
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    84e2:	0006      	movs	r6, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    84e4:	3332      	adds	r3, #50	; 0x32
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    84e6:	000f      	movs	r7, r1
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    84e8:	7819      	ldrb	r1, [r3, #0]
{
	u16_t max_tx_octets;
	u8_t phy, flags;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_tx_octets = conn->max_tx_octets;
    84ea:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    84ec:	068c      	lsls	r4, r1, #26
    84ee:	0f64      	lsrs	r4, r4, #29
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);
    84f0:	0020      	movs	r0, r4
    84f2:	09c9      	lsrs	r1, r1, #7
    84f4:	f7fe fa72 	bl	69dc <radio_phy_set>

	if (conn->enc_tx) {
    84f8:	0033      	movs	r3, r6
    84fa:	2201      	movs	r2, #1
    84fc:	33c0      	adds	r3, #192	; 0xc0
    84fe:	781b      	ldrb	r3, [r3, #0]
    8500:	0064      	lsls	r4, r4, #1
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    8502:	4322      	orrs	r2, r4
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);

	if (conn->enc_tx) {
    8504:	069b      	lsls	r3, r3, #26
    8506:	d50a      	bpl.n	851e <tx_packet_set+0x40>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    8508:	1d29      	adds	r1, r5, #4
    850a:	b2c9      	uxtb	r1, r1
    850c:	2008      	movs	r0, #8
    850e:	f7fe faa7 	bl	6a60 <radio_pkt_configure>

		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    8512:	0030      	movs	r0, r6
    8514:	0039      	movs	r1, r7
    8516:	30e2      	adds	r0, #226	; 0xe2
    8518:	f7fe fd02 	bl	6f20 <radio_ccm_tx_pkt_set>
    851c:	e004      	b.n	8528 <tx_packet_set+0x4a>
						      pdu_data_tx));
	} else {
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    851e:	2008      	movs	r0, #8
    8520:	b2e9      	uxtb	r1, r5
    8522:	f7fe fa9d 	bl	6a60 <radio_pkt_configure>

		radio_pkt_tx_set(pdu_data_tx);
    8526:	0038      	movs	r0, r7
    8528:	f7fe fac0 	bl	6aac <radio_pkt_tx_set>
	}
}
    852c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008530 <rx_fc_lock>:

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
    8530:	b510      	push	{r4, lr}
	if (_radio.fc_req == _radio.fc_ack) {
    8532:	21be      	movs	r1, #190	; 0xbe
    8534:	247e      	movs	r4, #126	; 0x7e
    8536:	4b0b      	ldr	r3, [pc, #44]	; (8564 <rx_fc_lock+0x34>)
    8538:	0049      	lsls	r1, r1, #1
    853a:	34ff      	adds	r4, #255	; 0xff
    853c:	5c5a      	ldrb	r2, [r3, r1]
    853e:	5d1c      	ldrb	r4, [r3, r4]
    8540:	4294      	cmp	r4, r2
    8542:	d10d      	bne.n	8560 <rx_fc_lock+0x30>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    8544:	5c5a      	ldrb	r2, [r3, r1]
    8546:	32b8      	adds	r2, #184	; 0xb8
    8548:	0052      	lsls	r2, r2, #1
    854a:	189a      	adds	r2, r3, r2
    854c:	80d0      	strh	r0, [r2, #6]
		req = _radio.fc_req + 1;
    854e:	5c5a      	ldrb	r2, [r3, r1]
    8550:	3201      	adds	r2, #1
    8552:	b2d2      	uxtb	r2, r2
		if (req == TRIPLE_BUFFER_SIZE) {
    8554:	2a03      	cmp	r2, #3
    8556:	d100      	bne.n	855a <rx_fc_lock+0x2a>
			req = 0;
    8558:	2200      	movs	r2, #0
		}
		_radio.fc_req = req;
    855a:	21be      	movs	r1, #190	; 0xbe
    855c:	0049      	lsls	r1, r1, #1
    855e:	545a      	strb	r2, [r3, r1]
	}
}
    8560:	bd10      	pop	{r4, pc}
    8562:	46c0      	nop			; (mov r8, r8)
    8564:	20000ea0 	.word	0x20000ea0

00008568 <ticker_job_disable>:
	DEBUG_RADIO_ISR(0);
}

#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
static void ticker_job_disable(u32_t status, void *op_context)
{
    8568:	b510      	push	{r4, lr}
	ARG_UNUSED(status);
	ARG_UNUSED(op_context);

	if (_radio.state != STATE_NONE) {
    856a:	4b05      	ldr	r3, [pc, #20]	; (8580 <ticker_job_disable+0x18>)
    856c:	7c1b      	ldrb	r3, [r3, #16]
    856e:	2b00      	cmp	r3, #0
    8570:	d004      	beq.n	857c <ticker_job_disable+0x14>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    8572:	2101      	movs	r1, #1
    8574:	2200      	movs	r2, #0
    8576:	0008      	movs	r0, r1
    8578:	f7fd ffb2 	bl	64e0 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);
	}
}
    857c:	bd10      	pop	{r4, pc}
    857e:	46c0      	nop			; (mov r8, r8)
    8580:	20000ea0 	.word	0x20000ea0

00008584 <mayfly_xtal_retain.part.15>:
				{0, 0, s_link[1], NULL, mayfly_xtal_stop}
			};
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;
    8584:	2200      	movs	r2, #0
    8586:	4b09      	ldr	r3, [pc, #36]	; (85ac <mayfly_xtal_retain.part.15+0x28>)

	DEBUG_RADIO_CLOSE(0);
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    8588:	b510      	push	{r4, lr}
				{0, 0, s_link[1], NULL, mayfly_xtal_stop}
			};
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;
    858a:	701a      	strb	r2, [r3, #0]
    858c:	4b08      	ldr	r3, [pc, #32]	; (85b0 <mayfly_xtal_retain.part.15+0x2c>)

			switch (caller_id) {
    858e:	4290      	cmp	r0, r2
    8590:	d002      	beq.n	8598 <mayfly_xtal_retain.part.15+0x14>
    8592:	2801      	cmp	r0, #1
    8594:	d106      	bne.n	85a4 <mayfly_xtal_retain.part.15+0x20>
			case RADIO_TICKER_USER_ID_WORKER:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
				break;

			case RADIO_TICKER_USER_ID_JOB:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    8596:	3310      	adds	r3, #16
			default:
				LL_ASSERT(0);
				break;
			}

			retval = mayfly_enqueue(caller_id,
    8598:	2200      	movs	r2, #0
    859a:	0011      	movs	r1, r2
    859c:	f7fd ffc0 	bl	6520 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						p_mfy_xtal_stop);
			LL_ASSERT(!retval);
    85a0:	2800      	cmp	r0, #0
    85a2:	d002      	beq.n	85aa <mayfly_xtal_retain.part.15+0x26>
    85a4:	b662      	cpsie	i
    85a6:	2004      	movs	r0, #4
    85a8:	df02      	svc	2
		}
	}
}
    85aa:	bd10      	pop	{r4, pc}
    85ac:	20000e8c 	.word	0x20000e8c
    85b0:	20000698 	.word	0x20000698

000085b4 <chan_set.part.21>:
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_O(1);

	LL_ASSERT(!_radio.ticker_id_prepare);
    85b4:	b662      	cpsie	i
    85b6:	2004      	movs	r0, #4
    85b8:	df02      	svc	2
	...

000085bc <prepare_normal_set>:
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    85bc:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    85be:	6803      	ldr	r3, [r0, #0]
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    85c0:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    85c2:	2b00      	cmp	r3, #0
    85c4:	da19      	bge.n	85fa <prepare_normal_set+0x3e>
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    85c6:	6845      	ldr	r5, [r0, #4]
    85c8:	6884      	ldr	r4, [r0, #8]
    85ca:	005b      	lsls	r3, r3, #1
    85cc:	085b      	lsrs	r3, r3, #1
    85ce:	42ac      	cmp	r4, r5
    85d0:	d200      	bcs.n	85d4 <prepare_normal_set+0x18>
    85d2:	002c      	movs	r4, r5
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    85d4:	9006      	str	r0, [sp, #24]
    85d6:	480a      	ldr	r0, [pc, #40]	; (8600 <prepare_normal_set+0x44>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    85d8:	1b1b      	subs	r3, r3, r4
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    85da:	9005      	str	r0, [sp, #20]
    85dc:	2000      	movs	r0, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    85de:	b29b      	uxth	r3, r3
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    85e0:	9301      	str	r3, [sp, #4]
    85e2:	9300      	str	r3, [sp, #0]
    85e4:	9004      	str	r0, [sp, #16]
    85e6:	0003      	movs	r3, r0
    85e8:	9003      	str	r0, [sp, #12]
    85ea:	9002      	str	r0, [sp, #8]
    85ec:	f7ff fb36 	bl	7c5c <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      ticker_user_id,
				      ticker_id, 0, ticks_drift_minus,
				      ticks_drift_minus, 0, 0, 0,
				      prepare_normal, hdr);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    85f0:	2302      	movs	r3, #2
    85f2:	4398      	bics	r0, r3
    85f4:	d001      	beq.n	85fa <prepare_normal_set+0x3e>
    85f6:	f7ff ffdd 	bl	85b4 <chan_set.part.21>
			  (ticker_status == TICKER_STATUS_BUSY));
	}
}
    85fa:	b009      	add	sp, #36	; 0x24
    85fc:	bd30      	pop	{r4, r5, pc}
    85fe:	46c0      	nop			; (mov r8, r8)
    8600:	00007ea9 	.word	0x00007ea9

00008604 <terminate_ind_rx_enqueue>:
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    8604:	0003      	movs	r3, r0
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    8606:	b510      	push	{r4, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    8608:	33a8      	adds	r3, #168	; 0xa8
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    860a:	000a      	movs	r2, r1
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
    860c:	6819      	ldr	r1, [r3, #0]
    860e:	2900      	cmp	r1, #0
    8610:	d101      	bne.n	8616 <terminate_ind_rx_enqueue+0x12>
    8612:	f7ff ffcf 	bl	85b4 <chan_set.part.21>

	radio_pdu_node_rx->hdr.handle = conn->handle;
    8616:	8c00      	ldrh	r0, [r0, #32]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
    8618:	721a      	strb	r2, [r3, #8]
	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
    861a:	80d8      	strh	r0, [r3, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    861c:	2007      	movs	r0, #7

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    861e:	4a09      	ldr	r2, [pc, #36]	; (8644 <terminate_ind_rx_enqueue+0x40>)
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    8620:	7118      	strb	r0, [r3, #4]

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    8622:	306e      	adds	r0, #110	; 0x6e
    8624:	30ff      	adds	r0, #255	; 0xff
    8626:	5c10      	ldrb	r0, [r2, r0]

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    8628:	324d      	adds	r2, #77	; 0x4d
	link = radio_pdu_node_rx->hdr.onion.link;

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    862a:	7018      	strb	r0, [r3, #0]
	    _radio.packet_release_last;

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    862c:	32ff      	adds	r2, #255	; 0xff
    862e:	0018      	movs	r0, r3
    8630:	f7fe f8df 	bl	67f2 <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    8634:	2800      	cmp	r0, #0
    8636:	d102      	bne.n	863e <terminate_ind_rx_enqueue+0x3a>
    8638:	b662      	cpsie	i
    863a:	2004      	movs	r0, #4
    863c:	df02      	svc	2
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    863e:	f004 fec3 	bl	d3c8 <radio_event_callback>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);

	/* callback to trigger application action */
	packet_rx_callback();
}
    8642:	bd10      	pop	{r4, pc}
    8644:	20000ea0 	.word	0x20000ea0

00008648 <packet_rx_enqueue>:
		       &s_mfy_callback);
#endif
}

static void packet_rx_enqueue(void)
{
    8648:	b570      	push	{r4, r5, r6, lr}
	void *link;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	u8_t last;

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    864a:	219f      	movs	r1, #159	; 0x9f
    864c:	243e      	movs	r4, #62	; 0x3e
    864e:	4a15      	ldr	r2, [pc, #84]	; (86a4 <packet_rx_enqueue+0x5c>)
    8650:	34ff      	adds	r4, #255	; 0xff
    8652:	0049      	lsls	r1, r1, #1
    8654:	5d13      	ldrb	r3, [r2, r4]
    8656:	5c51      	ldrb	r1, [r2, r1]
    8658:	4299      	cmp	r1, r3
    865a:	d101      	bne.n	8660 <packet_rx_enqueue+0x18>
    865c:	f7ff ffaa 	bl	85b4 <chan_set.part.21>

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8660:	0011      	movs	r1, r2
    8662:	5d13      	ldrb	r3, [r2, r4]
    8664:	31fc      	adds	r1, #252	; 0xfc
    8666:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    8668:	009b      	lsls	r3, r3, #2
    866a:	5858      	ldr	r0, [r3, r1]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    866c:	23ba      	movs	r3, #186	; 0xba

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
	if (last == _radio.packet_rx_count) {
    866e:	259e      	movs	r5, #158	; 0x9e

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    8670:	005b      	lsls	r3, r3, #1
    8672:	5cd3      	ldrb	r3, [r2, r3]

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	link = radio_pdu_node_rx->hdr.onion.link;
    8674:	6801      	ldr	r1, [r0, #0]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    8676:	7003      	strb	r3, [r0, #0]
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    8678:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_rx_count) {
    867a:	006d      	lsls	r5, r5, #1
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    867c:	3301      	adds	r3, #1
	if (last == _radio.packet_rx_count) {
    867e:	5d55      	ldrb	r5, [r2, r5]
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    8680:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
    8682:	429d      	cmp	r5, r3
    8684:	d100      	bne.n	8688 <packet_rx_enqueue+0x40>
		last = 0;
    8686:	2300      	movs	r3, #0
	}
	_radio.packet_rx_last = last;
    8688:	5513      	strb	r3, [r2, r4]

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    868a:	324d      	adds	r2, #77	; 0x4d
    868c:	32ff      	adds	r2, #255	; 0xff
    868e:	f7fe f8b0 	bl	67f2 <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    8692:	2800      	cmp	r0, #0
    8694:	d102      	bne.n	869c <packet_rx_enqueue+0x54>
    8696:	b662      	cpsie	i
    8698:	2004      	movs	r0, #4
    869a:	df02      	svc	2
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    869c:	f004 fe94 	bl	d3c8 <radio_event_callback>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);

	/* callback to trigger application action */
	packet_rx_callback();
}
    86a0:	bd70      	pop	{r4, r5, r6, pc}
    86a2:	46c0      	nop			; (mov r8, r8)
    86a4:	20000ea0 	.word	0x20000ea0

000086a8 <isr_rx_scan_report>:

	return 1;
}

static u32_t isr_rx_scan_report(u8_t rssi_ready)
{
    86a8:	b570      	push	{r4, r5, r6, lr}
    86aa:	0004      	movs	r4, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
    86ac:	2003      	movs	r0, #3
    86ae:	f7ff fc33 	bl	7f18 <packet_rx_reserve_get>
	if (radio_pdu_node_rx == 0) {
    86b2:	2800      	cmp	r0, #0
    86b4:	d024      	beq.n	8700 <isr_rx_scan_report+0x58>
		return 1;
	}

	/* Prepare the report (adv or scan resp) */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    86b6:	2301      	movs	r3, #1
    86b8:	425b      	negs	r3, r3
    86ba:	80c3      	strh	r3, [r0, #6]
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
    86bc:	4b11      	ldr	r3, [pc, #68]	; (8704 <isr_rx_scan_report+0x5c>)
    86be:	33dd      	adds	r3, #221	; 0xdd
    86c0:	781b      	ldrb	r3, [r3, #0]
    86c2:	075a      	lsls	r2, r3, #29
    86c4:	d00b      	beq.n	86de <isr_rx_scan_report+0x36>
		switch (_radio.scanner.phy) {
    86c6:	075b      	lsls	r3, r3, #29
    86c8:	0f5b      	lsrs	r3, r3, #29
    86ca:	b2da      	uxtb	r2, r3
    86cc:	2a01      	cmp	r2, #1
    86ce:	d004      	beq.n	86da <isr_rx_scan_report+0x32>
    86d0:	2a04      	cmp	r2, #4
    86d2:	d005      	beq.n	86e0 <isr_rx_scan_report+0x38>
			radio_pdu_node_rx->hdr.type =
				NODE_RX_TYPE_EXT_CODED_REPORT;
			break;

		default:
			LL_ASSERT(0);
    86d4:	b662      	cpsie	i
    86d6:	2004      	movs	r0, #4
    86d8:	df02      	svc	2
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
		switch (_radio.scanner.phy) {
		case BIT(0):
			radio_pdu_node_rx->hdr.type =
    86da:	2303      	movs	r3, #3
    86dc:	e000      	b.n	86e0 <isr_rx_scan_report+0x38>
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    86de:	2302      	movs	r3, #2
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    86e0:	7a45      	ldrb	r5, [r0, #9]
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    86e2:	7103      	strb	r3, [r0, #4]
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    86e4:	1940      	adds	r0, r0, r5
    86e6:	300a      	adds	r0, #10
    86e8:	0005      	movs	r5, r0
    86ea:	267f      	movs	r6, #127	; 0x7f
			     pdu_adv_rx->len] =
    86ec:	2c00      	cmp	r4, #0
    86ee:	d002      	beq.n	86f6 <isr_rx_scan_report+0x4e>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    86f0:	f7fe fa6e 	bl	6bd0 <radio_rssi_get>
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			     pdu_adv_rx->len] =
    86f4:	4006      	ands	r6, r0
    86f6:	702e      	strb	r6, [r5, #0]
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();
    86f8:	f7ff ffa6 	bl	8648 <packet_rx_enqueue>

	return 0;
    86fc:	2000      	movs	r0, #0
    86fe:	e000      	b.n	8702 <isr_rx_scan_report+0x5a>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
	if (radio_pdu_node_rx == 0) {
		return 1;
    8700:	2001      	movs	r0, #1
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();

	return 0;
}
    8702:	bd70      	pop	{r4, r5, r6, pc}
    8704:	20000ea0 	.word	0x20000ea0

00008708 <chan_set>:
}
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
    8708:	b510      	push	{r4, lr}
    870a:	0004      	movs	r4, r0
	switch (chan) {
    870c:	2826      	cmp	r0, #38	; 0x26
    870e:	d005      	beq.n	871c <chan_set+0x14>
    8710:	2827      	cmp	r0, #39	; 0x27
    8712:	d005      	beq.n	8720 <chan_set+0x18>
	case 37:
		radio_freq_chan_set(2);
    8714:	2002      	movs	r0, #2
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
	switch (chan) {
    8716:	2c25      	cmp	r4, #37	; 0x25
    8718:	d104      	bne.n	8724 <chan_set+0x1c>
    871a:	e007      	b.n	872c <chan_set+0x24>
	case 37:
		radio_freq_chan_set(2);
		break;

	case 38:
		radio_freq_chan_set(26);
    871c:	201a      	movs	r0, #26
    871e:	e005      	b.n	872c <chan_set+0x24>
		break;

	case 39:
		radio_freq_chan_set(80);
    8720:	2050      	movs	r0, #80	; 0x50
    8722:	e003      	b.n	872c <chan_set+0x24>
		break;

	default:
		if (chan < 11) {
    8724:	2c0a      	cmp	r4, #10
    8726:	d807      	bhi.n	8738 <chan_set+0x30>
			radio_freq_chan_set(4 + (2 * chan));
    8728:	1ca0      	adds	r0, r4, #2
    872a:	0040      	lsls	r0, r0, #1
    872c:	f7fe f96a 	bl	6a04 <radio_freq_chan_set>
			LL_ASSERT(0);
		}
		break;
	}

	radio_whiten_iv_set(chan);
    8730:	0020      	movs	r0, r4
    8732:	f7fe f96f 	bl	6a14 <radio_whiten_iv_set>
}
    8736:	bd10      	pop	{r4, pc}

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    8738:	1ce0      	adds	r0, r4, #3
		break;

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
    873a:	2c27      	cmp	r4, #39	; 0x27
    873c:	d9f5      	bls.n	872a <chan_set+0x22>
    873e:	f7ff ff39 	bl	85b4 <chan_set.part.21>
	...

00008744 <adv_setup>:

	DEBUG_RADIO_PREPARE_A(0);
}

static void adv_setup(void)
{
    8744:	b570      	push	{r4, r5, r6, lr}
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    8746:	4c35      	ldr	r4, [pc, #212]	; (881c <adv_setup+0xd8>)
    8748:	0023      	movs	r3, r4
	    _radio.advertiser.adv_data.last) {
    874a:	0022      	movs	r2, r4
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    874c:	3375      	adds	r3, #117	; 0x75
	    _radio.advertiser.adv_data.last) {
    874e:	3276      	adds	r2, #118	; 0x76
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    8750:	7811      	ldrb	r1, [r2, #0]
    8752:	781b      	ldrb	r3, [r3, #0]
static void adv_setup(void)
{
	struct pdu_adv *pdu;
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;
    8754:	2200      	movs	r2, #0

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    8756:	4299      	cmp	r1, r3
    8758:	d008      	beq.n	876c <adv_setup+0x28>
	    _radio.advertiser.adv_data.last) {
		u8_t first;

		first = _radio.advertiser.adv_data.first + 1;
    875a:	3301      	adds	r3, #1
    875c:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    875e:	2b02      	cmp	r3, #2
    8760:	d100      	bne.n	8764 <adv_setup+0x20>
			first = 0;
    8762:	0013      	movs	r3, r2
		}
		_radio.advertiser.adv_data.first = first;
    8764:	0022      	movs	r2, r4
    8766:	3275      	adds	r2, #117	; 0x75
    8768:	7013      	strb	r3, [r2, #0]
		upd = 1;
    876a:	2201      	movs	r2, #1
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    876c:	0023      	movs	r3, r4
	    advertiser.scan_data.last) {
    876e:	0021      	movs	r1, r4
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    8770:	33c5      	adds	r3, #197	; 0xc5
	    advertiser.scan_data.last) {
    8772:	31c6      	adds	r1, #198	; 0xc6
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    8774:	781b      	ldrb	r3, [r3, #0]
    8776:	7809      	ldrb	r1, [r1, #0]
    8778:	4299      	cmp	r1, r3
    877a:	d008      	beq.n	878e <adv_setup+0x4a>
	    advertiser.scan_data.last) {
		u8_t first;

		first = _radio.advertiser.scan_data.first + 1;
    877c:	3301      	adds	r3, #1
    877e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    8780:	2b02      	cmp	r3, #2
    8782:	d100      	bne.n	8786 <adv_setup+0x42>
			first = 0;
    8784:	2300      	movs	r3, #0
		}
		_radio.advertiser.scan_data.first = first;
    8786:	0022      	movs	r2, r4
    8788:	32c5      	adds	r2, #197	; 0xc5
    878a:	7013      	strb	r3, [r2, #0]
		upd = 1;
    878c:	2201      	movs	r2, #1
	}

	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
    878e:	0023      	movs	r3, r4
    8790:	3375      	adds	r3, #117	; 0x75
		}
		_radio.advertiser.scan_data.first = first;
		upd = 1;
	}

	pdu = (struct pdu_adv *)
    8792:	781d      	ldrb	r5, [r3, #0]
    8794:	2327      	movs	r3, #39	; 0x27
    8796:	435d      	muls	r5, r3
    8798:	3520      	adds	r5, #32
    879a:	1965      	adds	r5, r4, r5
    879c:	1dee      	adds	r6, r5, #7
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
    879e:	2a00      	cmp	r2, #0
    87a0:	d00a      	beq.n	87b8 <adv_setup+0x74>
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
		_radio.advertiser.scan_data.data[
			_radio.advertiser.scan_data.first];
    87a2:	0022      	movs	r2, r4

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    87a4:	0029      	movs	r1, r5
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
		_radio.advertiser.scan_data.data[
			_radio.advertiser.scan_data.first];
    87a6:	32c5      	adds	r2, #197	; 0xc5
	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
    87a8:	7810      	ldrb	r0, [r2, #0]
			_radio.advertiser.scan_data.first];

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    87aa:	3109      	adds	r1, #9
	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
    87ac:	4358      	muls	r0, r3
    87ae:	1820      	adds	r0, r4, r0
			_radio.advertiser.scan_data.first];

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    87b0:	3079      	adds	r0, #121	; 0x79
    87b2:	2206      	movs	r2, #6
    87b4:	f7f8 fa6f 	bl	c96 <memcpy>
		       &pdu->payload.adv_ind.addr[0], BDADDR_SIZE);
	}
#else
	ARG_UNUSED(upd);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
    87b8:	0030      	movs	r0, r6
    87ba:	f7fe f977 	bl	6aac <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    87be:	230f      	movs	r3, #15
    87c0:	79ea      	ldrb	r2, [r5, #7]
    87c2:	4013      	ands	r3, r2
    87c4:	2b02      	cmp	r3, #2
    87c6:	d00a      	beq.n	87de <adv_setup+0x9a>
    87c8:	2b07      	cmp	r3, #7
    87ca:	d008      	beq.n	87de <adv_setup+0x9a>
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    87cc:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    87ce:	2096      	movs	r0, #150	; 0x96
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    87d0:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    87d2:	f7fe fa7d 	bl	6cd0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    87d6:	2000      	movs	r0, #0
    87d8:	f7fe f9d6 	bl	6b88 <radio_switch_complete_and_rx>
    87dc:	e003      	b.n	87e6 <adv_setup+0xa2>
	} else {
		_radio.state = STATE_CLOSE;
    87de:	2303      	movs	r3, #3
    87e0:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    87e2:	f7fe f9e1 	bl	6ba8 <radio_switch_complete_and_disable>
	}

	bitmap = _radio.advertiser.chan_map_current;
    87e6:	1d63      	adds	r3, r4, #5
    87e8:	7fdb      	ldrb	r3, [r3, #31]
	chan = 0;
    87ea:	2000      	movs	r0, #0
	} else {
		_radio.state = STATE_CLOSE;
		radio_switch_complete_and_disable();
	}

	bitmap = _radio.advertiser.chan_map_current;
    87ec:	071b      	lsls	r3, r3, #28
    87ee:	0f5b      	lsrs	r3, r3, #29
    87f0:	b2da      	uxtb	r2, r3
    87f2:	0011      	movs	r1, r2
	chan = 0;
	while ((bitmap & 0x01) == 0) {
    87f4:	2501      	movs	r5, #1
    87f6:	4229      	tst	r1, r5
    87f8:	d103      	bne.n	8802 <adv_setup+0xbe>
		chan++;
    87fa:	3001      	adds	r0, #1
    87fc:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
    87fe:	0849      	lsrs	r1, r1, #1
    8800:	e7f9      	b.n	87f6 <adv_setup+0xb2>
	}
	_radio.advertiser.chan_map_current &=
    8802:	210e      	movs	r1, #14
    8804:	3207      	adds	r2, #7
    8806:	3405      	adds	r4, #5
    8808:	4013      	ands	r3, r2
    880a:	005a      	lsls	r2, r3, #1
    880c:	7fe3      	ldrb	r3, [r4, #31]
		(_radio.advertiser.chan_map_current - 1);

	chan_set(37 + chan);
    880e:	3025      	adds	r0, #37	; 0x25
	chan = 0;
	while ((bitmap & 0x01) == 0) {
		chan++;
		bitmap >>= 1;
	}
	_radio.advertiser.chan_map_current &=
    8810:	438b      	bics	r3, r1
    8812:	4313      	orrs	r3, r2
    8814:	77e3      	strb	r3, [r4, #31]
		(_radio.advertiser.chan_map_current - 1);

	chan_set(37 + chan);
    8816:	f7ff ff77 	bl	8708 <chan_set>
}
    881a:	bd70      	pop	{r4, r5, r6, pc}
    881c:	20000ea0 	.word	0x20000ea0

00008820 <pdu_node_tx_release>:
	}
}

static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
    8820:	b570      	push	{r4, r5, r6, lr}
	u8_t last;

	last = _radio.packet_release_last + 1;
    8822:	24ba      	movs	r4, #186	; 0xba
	if (last == _radio.packet_tx_count) {
    8824:	25b8      	movs	r5, #184	; 0xb8
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    8826:	4b0f      	ldr	r3, [pc, #60]	; (8864 <pdu_node_tx_release+0x44>)
    8828:	0064      	lsls	r4, r4, #1
    882a:	5d1a      	ldrb	r2, [r3, r4]
	if (last == _radio.packet_tx_count) {
    882c:	006d      	lsls	r5, r5, #1
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    882e:	3201      	adds	r2, #1
	if (last == _radio.packet_tx_count) {
    8830:	5d5d      	ldrb	r5, [r3, r5]
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    8832:	b2d2      	uxtb	r2, r2
	if (last == _radio.packet_tx_count) {
    8834:	4295      	cmp	r5, r2
    8836:	d100      	bne.n	883a <pdu_node_tx_release+0x1a>
		last = 0;
    8838:	2200      	movs	r2, #0
	}

	LL_ASSERT(last != _radio.packet_release_first);
    883a:	2574      	movs	r5, #116	; 0x74
    883c:	35ff      	adds	r5, #255	; 0xff
    883e:	5d5d      	ldrb	r5, [r3, r5]
    8840:	4295      	cmp	r5, r2
    8842:	d101      	bne.n	8848 <pdu_node_tx_release+0x28>
    8844:	f7ff feb6 	bl	85b4 <chan_set.part.21>

	/* Enqueue app mem for release */
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    8848:	001d      	movs	r5, r3
    884a:	35fc      	adds	r5, #252	; 0xfc
    884c:	6f2e      	ldr	r6, [r5, #112]	; 0x70
    884e:	5d1d      	ldrb	r5, [r3, r4]
    8850:	00ed      	lsls	r5, r5, #3
    8852:	53a8      	strh	r0, [r5, r6]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    8854:	5d18      	ldrb	r0, [r3, r4]
    8856:	00c0      	lsls	r0, r0, #3
    8858:	1830      	adds	r0, r6, r0
    885a:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
    885c:	551a      	strb	r2, [r3, r4]
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    885e:	f004 fdb3 	bl	d3c8 <radio_event_callback>
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
	_radio.packet_release_last = last;

	/* callback to trigger application action */
	packet_rx_callback();
}
    8862:	bd70      	pop	{r4, r5, r6, pc}
    8864:	20000ea0 	.word	0x20000ea0

00008868 <packet_tx_enqueue>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void packet_tx_enqueue(u8_t max)
{
    8868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    886a:	9001      	str	r0, [sp, #4]
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    886c:	9b01      	ldr	r3, [sp, #4]
    886e:	2b00      	cmp	r3, #0
    8870:	d042      	beq.n	88f8 <packet_tx_enqueue+0x90>
    8872:	2772      	movs	r7, #114	; 0x72
    8874:	23b9      	movs	r3, #185	; 0xb9
    8876:	4e21      	ldr	r6, [pc, #132]	; (88fc <packet_tx_enqueue+0x94>)
    8878:	005b      	lsls	r3, r3, #1
    887a:	37ff      	adds	r7, #255	; 0xff
    887c:	5cf1      	ldrb	r1, [r6, r3]
    887e:	5df2      	ldrb	r2, [r6, r7]
    8880:	0033      	movs	r3, r6
    8882:	4291      	cmp	r1, r2
    8884:	d038      	beq.n	88f8 <packet_tx_enqueue+0x90>
		struct pdu_data_q_tx *pdu_data_q_tx;
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    8886:	33fc      	adds	r3, #252	; 0xfc
    8888:	5df5      	ldrb	r5, [r6, r7]
    888a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    888c:	00ed      	lsls	r5, r5, #3
    888e:	1955      	adds	r5, r2, r5
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8890:	218c      	movs	r1, #140	; 0x8c
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    8892:	2200      	movs	r2, #0
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
    8894:	686c      	ldr	r4, [r5, #4]
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8896:	6898      	ldr	r0, [r3, #8]
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    8898:	6022      	str	r2, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    889a:	0049      	lsls	r1, r1, #1
    889c:	882a      	ldrh	r2, [r5, #0]
    889e:	f7fd ff7e 	bl	679e <mem_get>
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
    88a2:	882b      	ldrh	r3, [r5, #0]
    88a4:	8c02      	ldrh	r2, [r0, #32]
    88a6:	429a      	cmp	r2, r3
    88a8:	d10f      	bne.n	88ca <packet_tx_enqueue+0x62>
			if (conn->pkt_tx_data == 0) {
    88aa:	30fc      	adds	r0, #252	; 0xfc
    88ac:	6903      	ldr	r3, [r0, #16]
    88ae:	2b00      	cmp	r3, #0
    88b0:	d105      	bne.n	88be <packet_tx_enqueue+0x56>
				conn->pkt_tx_data = node_tx_new;

				if (conn->pkt_tx_head == 0) {
    88b2:	6883      	ldr	r3, [r0, #8]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
			if (conn->pkt_tx_data == 0) {
				conn->pkt_tx_data = node_tx_new;
    88b4:	6104      	str	r4, [r0, #16]

				if (conn->pkt_tx_head == 0) {
    88b6:	2b00      	cmp	r3, #0
    88b8:	d101      	bne.n	88be <packet_tx_enqueue+0x56>
					conn->pkt_tx_head = node_tx_new;
    88ba:	6084      	str	r4, [r0, #8]
					conn->pkt_tx_last = NULL;
    88bc:	6143      	str	r3, [r0, #20]
				}
			}

			if (conn->pkt_tx_last) {
    88be:	6943      	ldr	r3, [r0, #20]
    88c0:	2b00      	cmp	r3, #0
    88c2:	d000      	beq.n	88c6 <packet_tx_enqueue+0x5e>
				conn->pkt_tx_last->next = node_tx_new;
    88c4:	601c      	str	r4, [r3, #0]
			}

			conn->pkt_tx_last = node_tx_new;
    88c6:	6144      	str	r4, [r0, #20]
    88c8:	e007      	b.n	88da <packet_tx_enqueue+0x72>
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    88ca:	2203      	movs	r2, #3
    88cc:	7923      	ldrb	r3, [r4, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    88ce:	0021      	movs	r1, r4
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    88d0:	4393      	bics	r3, r2
    88d2:	7123      	strb	r3, [r4, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    88d4:	8828      	ldrh	r0, [r5, #0]
    88d6:	f7ff ffa3 	bl	8820 <pdu_node_tx_release>
		}

		first = _radio.packet_tx_first + 1;
		if (first == _radio.packet_tx_count) {
    88da:	22b8      	movs	r2, #184	; 0xb8
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    88dc:	5df3      	ldrb	r3, [r6, r7]
		if (first == _radio.packet_tx_count) {
    88de:	0052      	lsls	r2, r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    88e0:	3301      	adds	r3, #1
		if (first == _radio.packet_tx_count) {
    88e2:	5cb2      	ldrb	r2, [r6, r2]
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    88e4:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
    88e6:	429a      	cmp	r2, r3
    88e8:	d100      	bne.n	88ec <packet_tx_enqueue+0x84>
			first = 0;
    88ea:	2300      	movs	r3, #0
		}
		_radio.packet_tx_first = first;
    88ec:	55f3      	strb	r3, [r6, r7]
    88ee:	9f01      	ldr	r7, [sp, #4]
    88f0:	3f01      	subs	r7, #1
    88f2:	b2fb      	uxtb	r3, r7
    88f4:	9301      	str	r3, [sp, #4]
    88f6:	e7b9      	b.n	886c <packet_tx_enqueue+0x4>
	}
}
    88f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    88fa:	46c0      	nop			; (mov r8, r8)
    88fc:	20000ea0 	.word	0x20000ea0

00008900 <connection_release>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    8900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    8902:	2201      	movs	r2, #1
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    8904:	0005      	movs	r5, r0
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    8906:	0011      	movs	r1, r2
    8908:	2000      	movs	r0, #0
    890a:	f7fd fde9 	bl	64e0 <mayfly_enable>
	/** @todo correctly stop tickers ensuring crystal and radio active are
	 * placed in right states
	 */

	/* Stop Master/Slave role ticker */
	ticker_status =
    890e:	2100      	movs	r1, #0
    8910:	8c2a      	ldrh	r2, [r5, #32]
    8912:	4f34      	ldr	r7, [pc, #208]	; (89e4 <connection_release+0xe4>)
    8914:	4b34      	ldr	r3, [pc, #208]	; (89e8 <connection_release+0xe8>)
    8916:	3207      	adds	r2, #7
    8918:	9300      	str	r3, [sp, #0]
    891a:	b2d2      	uxtb	r2, r2
    891c:	003b      	movs	r3, r7
    891e:	0008      	movs	r0, r1
    8920:	f7ff f9ec 	bl	7cfc <ticker_stop>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8924:	2402      	movs	r4, #2
    8926:	43a0      	bics	r0, r4
    8928:	d11d      	bne.n	8966 <connection_release+0x66>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    892a:	4b30      	ldr	r3, [pc, #192]	; (89ec <connection_release+0xec>)
    892c:	7c1a      	ldrb	r2, [r3, #16]
    892e:	001e      	movs	r6, r3
    8930:	2a05      	cmp	r2, #5
    8932:	d001      	beq.n	8938 <connection_release+0x38>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    8934:	2703      	movs	r7, #3
    8936:	e025      	b.n	8984 <connection_release+0x84>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    8938:	7b1a      	ldrb	r2, [r3, #12]
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    893a:	8c2b      	ldrh	r3, [r5, #32]
    893c:	3307      	adds	r3, #7
    893e:	429a      	cmp	r2, r3
    8940:	d1f8      	bne.n	8934 <connection_release+0x34>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
					  conn->handle))) {
		ticker_status =
    8942:	4b2b      	ldr	r3, [pc, #172]	; (89f0 <connection_release+0xf0>)
    8944:	2201      	movs	r2, #1
    8946:	9300      	str	r3, [sp, #0]
    8948:	0001      	movs	r1, r0
    894a:	003b      	movs	r3, r7
    894c:	f7ff f9d6 	bl	7cfc <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_MARKER_0,
				    ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8950:	43a0      	bics	r0, r4
    8952:	d108      	bne.n	8966 <connection_release+0x66>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    8954:	4b27      	ldr	r3, [pc, #156]	; (89f4 <connection_release+0xf4>)
    8956:	0002      	movs	r2, r0
    8958:	9300      	str	r3, [sp, #0]
    895a:	0001      	movs	r1, r0
    895c:	003b      	movs	r3, r7
    895e:	f7ff f9cd 	bl	7cfc <ticker_stop>
		    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_ID_EVENT,
				ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8962:	43a0      	bics	r0, r4
    8964:	d0e6      	beq.n	8934 <connection_release+0x34>
    8966:	b662      	cpsie	i
    8968:	2004      	movs	r0, #4
    896a:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    896c:	6923      	ldr	r3, [r4, #16]
    896e:	4299      	cmp	r1, r3
    8970:	d01a      	beq.n	89a8 <connection_release+0xa8>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    8972:	790b      	ldrb	r3, [r1, #4]
    8974:	43bb      	bics	r3, r7
    8976:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    8978:	68a3      	ldr	r3, [r4, #8]
    897a:	681b      	ldr	r3, [r3, #0]
    897c:	60a3      	str	r3, [r4, #8]

		pdu_node_tx_release(conn->handle, node_tx);
    897e:	8c28      	ldrh	r0, [r5, #32]
    8980:	f7ff ff4e 	bl	8820 <pdu_node_tx_release>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    8984:	002c      	movs	r4, r5
    8986:	34fc      	adds	r4, #252	; 0xfc
    8988:	68a1      	ldr	r1, [r4, #8]
    898a:	68e3      	ldr	r3, [r4, #12]
    898c:	4299      	cmp	r1, r3
    898e:	d1ed      	bne.n	896c <connection_release+0x6c>
    8990:	e00a      	b.n	89a8 <connection_release+0xa8>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    8992:	6923      	ldr	r3, [r4, #16]
    8994:	4298      	cmp	r0, r3
    8996:	d00a      	beq.n	89ae <connection_release+0xae>

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    8998:	0031      	movs	r1, r6
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    899a:	6803      	ldr	r3, [r0, #0]
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    899c:	3159      	adds	r1, #89	; 0x59
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    899e:	60a3      	str	r3, [r4, #8]
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    89a0:	60e3      	str	r3, [r4, #12]

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    89a2:	31ff      	adds	r1, #255	; 0xff
    89a4:	f7fd fedd 	bl	6762 <mem_release>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    89a8:	68a0      	ldr	r0, [r4, #8]
    89aa:	2800      	cmp	r0, #0
    89ac:	d1f1      	bne.n	8992 <connection_release+0x92>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    89ae:	2300      	movs	r3, #0
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    89b0:	2703      	movs	r7, #3
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    89b2:	60e3      	str	r3, [r4, #12]

	/* flush and release, rest of data */
	while (conn->pkt_tx_head) {
    89b4:	68a1      	ldr	r1, [r4, #8]
    89b6:	2900      	cmp	r1, #0
    89b8:	d00a      	beq.n	89d0 <connection_release+0xd0>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    89ba:	790b      	ldrb	r3, [r1, #4]
    89bc:	43bb      	bics	r3, r7
    89be:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    89c0:	68a3      	ldr	r3, [r4, #8]
    89c2:	681b      	ldr	r3, [r3, #0]
    89c4:	60a3      	str	r3, [r4, #8]
		conn->pkt_tx_data = conn->pkt_tx_head;
    89c6:	6123      	str	r3, [r4, #16]

		pdu_node_tx_release(conn->handle, node_tx);
    89c8:	8c28      	ldrh	r0, [r5, #32]
    89ca:	f7ff ff29 	bl	8820 <pdu_node_tx_release>
    89ce:	e7f1      	b.n	89b4 <connection_release+0xb4>
	}

	conn->handle = 0xffff;
    89d0:	2301      	movs	r3, #1
    89d2:	425b      	negs	r3, r3
    89d4:	842b      	strh	r3, [r5, #32]

	/* reset mutex */
	if (_radio.conn_upd == conn) {
    89d6:	3386      	adds	r3, #134	; 0x86
    89d8:	33ff      	adds	r3, #255	; 0xff
    89da:	58f2      	ldr	r2, [r6, r3]
    89dc:	4295      	cmp	r5, r2
    89de:	d100      	bne.n	89e2 <connection_release+0xe2>
		_radio.conn_upd = NULL;
    89e0:	50f1      	str	r1, [r6, r3]
	}
}
    89e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    89e4:	00008da1 	.word	0x00008da1
    89e8:	00001cf6 	.word	0x00001cf6
    89ec:	20000ea0 	.word	0x20000ea0
    89f0:	00001d02 	.word	0x00001d02
    89f4:	00001d09 	.word	0x00001d09

000089f8 <mayfly_radio_stop>:
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
	enum state state = (enum state)((u32_t)params & 0xff);
    89f8:	b2c0      	uxtb	r0, r0
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    89fa:	1f03      	subs	r3, r0, #4
	}
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
    89fc:	b510      	push	{r4, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    89fe:	2b01      	cmp	r3, #1
    8a00:	d901      	bls.n	8a06 <mayfly_radio_stop+0xe>
    8a02:	f7ff fdd7 	bl	85b4 <chan_set.part.21>

	radio_used = ((_radio.state != STATE_NONE) &&
    8a06:	4a08      	ldr	r2, [pc, #32]	; (8a28 <mayfly_radio_stop+0x30>)
    8a08:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
    8a0a:	2b00      	cmp	r3, #0
    8a0c:	d006      	beq.n	8a1c <mayfly_radio_stop+0x24>
	enum state state = (enum state)((u32_t)params & 0xff);
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
    8a0e:	3b04      	subs	r3, #4
    8a10:	2b01      	cmp	r3, #1
    8a12:	d903      	bls.n	8a1c <mayfly_radio_stop+0x24>
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
		if (radio_used) {
			_radio.state = state;
    8a14:	7410      	strb	r0, [r2, #16]
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
    8a16:	f7fe f865 	bl	6ae4 <radio_disable>
	}
}
    8a1a:	e003      	b.n	8a24 <mayfly_radio_stop+0x2c>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
    8a1c:	f7fe f886 	bl	6b2c <radio_is_idle>
    8a20:	2800      	cmp	r0, #0
    8a22:	d0f8      	beq.n	8a16 <mayfly_radio_stop+0x1e>
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
	}
}
    8a24:	bd10      	pop	{r4, pc}
    8a26:	46c0      	nop			; (mov r8, r8)
    8a28:	20000ea0 	.word	0x20000ea0

00008a2c <mayfly_radio_active>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
		  (_radio.ticker_id_stop == ticker_id));
}

static void mayfly_radio_active(void *params)
{
    8a2c:	b510      	push	{r4, lr}
    8a2e:	4b0b      	ldr	r3, [pc, #44]	; (8a5c <mayfly_radio_active+0x30>)
	static u8_t s_active;

	if ((u32_t)params) {
    8a30:	2800      	cmp	r0, #0
    8a32:	d006      	beq.n	8a42 <mayfly_radio_active+0x16>
		if (s_active++) {
    8a34:	781a      	ldrb	r2, [r3, #0]
			return;
		}

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
    8a36:	2001      	movs	r0, #1
static void mayfly_radio_active(void *params)
{
	static u8_t s_active;

	if ((u32_t)params) {
		if (s_active++) {
    8a38:	1c51      	adds	r1, r2, #1
    8a3a:	7019      	strb	r1, [r3, #0]
    8a3c:	2a00      	cmp	r2, #0
    8a3e:	d10c      	bne.n	8a5a <mayfly_radio_active+0x2e>
    8a40:	e009      	b.n	8a56 <mayfly_radio_active+0x2a>

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
	} else {
		LL_ASSERT(s_active);
    8a42:	7818      	ldrb	r0, [r3, #0]
    8a44:	2800      	cmp	r0, #0
    8a46:	d101      	bne.n	8a4c <mayfly_radio_active+0x20>
    8a48:	f7ff fdb4 	bl	85b4 <chan_set.part.21>

		if (--s_active) {
    8a4c:	3801      	subs	r0, #1
    8a4e:	b2c0      	uxtb	r0, r0
    8a50:	7018      	strb	r0, [r3, #0]
    8a52:	2800      	cmp	r0, #0
    8a54:	d101      	bne.n	8a5a <mayfly_radio_active+0x2e>
			return;
		}

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
    8a56:	f004 fcb5 	bl	d3c4 <radio_active_callback>
	}
}
    8a5a:	bd10      	pop	{r4, pc}
    8a5c:	20001338 	.word	0x20001338

00008a60 <mayfly_radio_inactive>:
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
}

static void mayfly_radio_inactive(void *params)
{
    8a60:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	mayfly_radio_active(0);
    8a62:	2000      	movs	r0, #0
    8a64:	f7ff ffe2 	bl	8a2c <mayfly_radio_active>

	DEBUG_RADIO_CLOSE(0);
}
    8a68:	bd10      	pop	{r4, pc}
	...

00008a6c <event_xtal>:
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    8a6c:	2200      	movs	r2, #0
	clock_control_on(_radio.hf_clock, NULL);
}

static void event_xtal(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    8a6e:	b510      	push	{r4, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    8a70:	4b04      	ldr	r3, [pc, #16]	; (8a84 <event_xtal+0x18>)
    8a72:	0011      	movs	r1, r2
    8a74:	0010      	movs	r0, r2
    8a76:	f7fd fd53 	bl	6520 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
    8a7a:	2800      	cmp	r0, #0
    8a7c:	d001      	beq.n	8a82 <event_xtal+0x16>
    8a7e:	f7ff fd99 	bl	85b4 <chan_set.part.21>
}
    8a82:	bd10      	pop	{r4, pc}
    8a84:	200006b8 	.word	0x200006b8

00008a88 <event_active>:
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    8a88:	2200      	movs	r2, #0
	}
}

static void event_active(u32_t ticks_at_expire, u32_t remainder,
			 u16_t lazy, void *context)
{
    8a8a:	b510      	push	{r4, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    8a8c:	4b04      	ldr	r3, [pc, #16]	; (8aa0 <event_active+0x18>)
    8a8e:	0011      	movs	r1, r2
    8a90:	0010      	movs	r0, r2
    8a92:	f7fd fd45 	bl	6520 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
    8a96:	2800      	cmp	r0, #0
    8a98:	d001      	beq.n	8a9e <event_active+0x16>
    8a9a:	f7ff fd8b 	bl	85b4 <chan_set.part.21>
}
    8a9e:	bd10      	pop	{r4, pc}
    8aa0:	20000628 	.word	0x20000628

00008aa4 <event_stop>:
	}
}

static void event_stop(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    8aa4:	001a      	movs	r2, r3
	ARG_UNUSED(lazy);

	/* Radio state requested (stop or abort) stored in context is supplied
	 * in params.
	 */
	s_mfy_radio_stop.param = context;
    8aa6:	4b06      	ldr	r3, [pc, #24]	; (8ac0 <event_stop+0x1c>)
	}
}

static void event_stop(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    8aa8:	b510      	push	{r4, lr}
	ARG_UNUSED(lazy);

	/* Radio state requested (stop or abort) stored in context is supplied
	 * in params.
	 */
	s_mfy_radio_stop.param = context;
    8aaa:	609a      	str	r2, [r3, #8]

	/* Stop Radio Tx/Rx */
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    8aac:	2200      	movs	r2, #0
    8aae:	0011      	movs	r1, r2
    8ab0:	0010      	movs	r0, r2
    8ab2:	f7fd fd35 	bl	6520 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_stop);
	LL_ASSERT(!retval);
    8ab6:	2800      	cmp	r0, #0
    8ab8:	d001      	beq.n	8abe <event_stop+0x1a>
    8aba:	f7ff fd7b 	bl	85b4 <chan_set.part.21>
}
    8abe:	bd10      	pop	{r4, pc}
    8ac0:	20000638 	.word	0x20000638

00008ac4 <event_adv_stop>:
	DEBUG_RADIO_START_A(0);
}

void event_adv_stop(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
		    void *context)
{
    8ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(context);

	/* Abort an event, if any, to avoid Rx queue corruption used by Radio
	 * ISR.
	 */
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    8ac6:	2200      	movs	r2, #0
    8ac8:	2305      	movs	r3, #5
    8aca:	0011      	movs	r1, r2
    8acc:	0010      	movs	r0, r2
    8ace:	f7ff ffe9 	bl	8aa4 <event_stop>

	/* Stop Direct Adv */
	ticker_status =
    8ad2:	2100      	movs	r1, #0
    8ad4:	4b11      	ldr	r3, [pc, #68]	; (8b1c <event_adv_stop+0x58>)
    8ad6:	2205      	movs	r2, #5
    8ad8:	9300      	str	r3, [sp, #0]
    8ada:	0008      	movs	r0, r1
    8adc:	4b10      	ldr	r3, [pc, #64]	; (8b20 <event_adv_stop+0x5c>)
    8ade:	f7ff f90d 	bl	7cfc <ticker_stop>
	    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_ID_ADV,
			ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8ae2:	2302      	movs	r3, #2
    8ae4:	4398      	bics	r0, r3
    8ae6:	1e05      	subs	r5, r0, #0
    8ae8:	d001      	beq.n	8aee <event_adv_stop+0x2a>
    8aea:	f7ff fd63 	bl	85b4 <chan_set.part.21>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Prepare the rx packet structure */
	radio_pdu_node_rx = packet_rx_reserve_get(1);
    8aee:	2001      	movs	r0, #1
    8af0:	f7ff fa12 	bl	7f18 <packet_rx_reserve_get>
    8af4:	1e04      	subs	r4, r0, #0
	LL_ASSERT(radio_pdu_node_rx);
    8af6:	d102      	bne.n	8afe <event_adv_stop+0x3a>
    8af8:	b662      	cpsie	i
    8afa:	2004      	movs	r0, #4
    8afc:	df02      	svc	2

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    8afe:	2301      	movs	r3, #1
    8b00:	425b      	negs	r3, r3
    8b02:	80c3      	strh	r3, [r0, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8b04:	3307      	adds	r3, #7

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    8b06:	0029      	movs	r1, r5
	radio_pdu_node_rx = packet_rx_reserve_get(1);
	LL_ASSERT(radio_pdu_node_rx);

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8b08:	7103      	strb	r3, [r0, #4]

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    8b0a:	2218      	movs	r2, #24
	radio_pdu_node_rx->hdr.handle = 0xffff;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
    8b0c:	300b      	adds	r0, #11
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    8b0e:	f7f8 f8ec 	bl	cea <memset>
	radio_le_conn_cmplt->status = 0x3c;
    8b12:	233c      	movs	r3, #60	; 0x3c
    8b14:	72e3      	strb	r3, [r4, #11]

	/* enqueue connection complete structure into queue */
	packet_rx_enqueue();
    8b16:	f7ff fd97 	bl	8648 <packet_rx_enqueue>
}
    8b1a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    8b1c:	000013bd 	.word	0x000013bd
    8b20:	00008da1 	.word	0x00008da1

00008b24 <event_common_prepare>:
				  u32_t *ticks_active_to_start,
				  u32_t ticks_preempt_to_start,
				  u8_t ticker_id,
				  ticker_timeout_func ticker_timeout_fp,
				  void *context)
{
    8b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b26:	0005      	movs	r5, r0
    8b28:	0017      	movs	r7, r2
    8b2a:	b08f      	sub	sp, #60	; 0x3c
    8b2c:	930a      	str	r3, [sp, #40]	; 0x28
    8b2e:	ab14      	add	r3, sp, #80	; 0x50
    8b30:	cb04      	ldmia	r3!, {r2}
    8b32:	910d      	str	r1, [sp, #52]	; 0x34
    8b34:	781b      	ldrb	r3, [r3, #0]
    8b36:	920b      	str	r2, [sp, #44]	; 0x2c
    8b38:	930c      	str	r3, [sp, #48]	; 0x30
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    8b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				  u8_t ticker_id,
				  ticker_timeout_func ticker_timeout_fp,
				  void *context)
{
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    8b3c:	683c      	ldr	r4, [r7, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    8b3e:	681e      	ldr	r6, [r3, #0]
	u32_t ticks_to_start;

	/* Check for stale ticks_at_expire */
	if (ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire) >
    8b40:	f7ff f978 	bl	7e34 <ticker_ticks_now_get>
    8b44:	0029      	movs	r1, r5
    8b46:	f7ff f979 	bl	7e3c <ticker_ticks_diff_get>
    8b4a:	2809      	cmp	r0, #9
    8b4c:	d907      	bls.n	8b5e <event_common_prepare+0x3a>
	    TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
		/* Abort any running role, as it probably is the cause for
		 * stale ticks_at_expire.
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    8b4e:	2200      	movs	r2, #0
    8b50:	2305      	movs	r3, #5
    8b52:	0011      	movs	r1, r2
    8b54:	0010      	movs	r0, r2
    8b56:	f7ff ffa5 	bl	8aa4 <event_stop>

		/* TODO: How much consecutive skips is tolerable? */
		return 1;
    8b5a:	2501      	movs	r5, #1
    8b5c:	e0a7      	b.n	8cae <event_common_prepare+0x18a>
	}

	/* in case this event is short prepare, xtal to start duration will be
	 * active to start duration.
	 */
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
    8b5e:	2c00      	cmp	r4, #0
    8b60:	da04      	bge.n	8b6c <event_common_prepare+0x48>
		_ticks_xtal_to_start =
    8b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8b64:	0034      	movs	r4, r6
    8b66:	429e      	cmp	r6, r3
    8b68:	d200      	bcs.n	8b6c <event_common_prepare+0x48>
    8b6a:	001c      	movs	r4, r3

	/* decide whether its XTAL start or active event that is the current
	 * execution context and accordingly setup the ticker for the other
	 * event (XTAL or active event). These are oneshot ticker.
	 */
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    8b6c:	42b4      	cmp	r4, r6
    8b6e:	d91a      	bls.n	8ba6 <event_common_prepare+0x82>

		/* XTAL is before Active */
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
		ticks_to_start = _ticks_xtal_to_start;

		ticker_status =
    8b70:	2000      	movs	r0, #0
    8b72:	4b50      	ldr	r3, [pc, #320]	; (8cb4 <event_common_prepare+0x190>)
    8b74:	9006      	str	r0, [sp, #24]
    8b76:	9308      	str	r3, [sp, #32]
    8b78:	4b4f      	ldr	r3, [pc, #316]	; (8cb8 <event_common_prepare+0x194>)
    8b7a:	9004      	str	r0, [sp, #16]
    8b7c:	9307      	str	r3, [sp, #28]
    8b7e:	4b4f      	ldr	r3, [pc, #316]	; (8cbc <event_common_prepare+0x198>)
    8b80:	9003      	str	r0, [sp, #12]
    8b82:	9305      	str	r3, [sp, #20]
    8b84:	1ba3      	subs	r3, r4, r6
    8b86:	9300      	str	r3, [sp, #0]
    8b88:	9002      	str	r0, [sp, #8]
    8b8a:	002b      	movs	r3, r5
    8b8c:	9001      	str	r0, [sp, #4]
    8b8e:	2201      	movs	r2, #1
    8b90:	0001      	movs	r1, r0
    8b92:	f7ff f81b 	bl	7bcc <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_active, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_active, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8b96:	2302      	movs	r3, #2
    8b98:	4398      	bics	r0, r3
    8b9a:	d000      	beq.n	8b9e <event_common_prepare+0x7a>
    8b9c:	e084      	b.n	8ca8 <event_common_prepare+0x184>
			  (ticker_status == TICKER_STATUS_BUSY));

		event_xtal(0, 0, 0, NULL);
    8b9e:	0003      	movs	r3, r0
    8ba0:	0002      	movs	r2, r0
    8ba2:	0001      	movs	r1, r0
    8ba4:	e029      	b.n	8bfa <event_common_prepare+0xd6>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    8ba6:	42b4      	cmp	r4, r6
    8ba8:	d21d      	bcs.n	8be6 <event_common_prepare+0xc2>

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);
    8baa:	2300      	movs	r3, #0
    8bac:	001a      	movs	r2, r3
    8bae:	0019      	movs	r1, r3
    8bb0:	0018      	movs	r0, r3
    8bb2:	f7ff ff69 	bl	8a88 <event_active>

		ticker_status =
    8bb6:	2000      	movs	r0, #0
    8bb8:	4b41      	ldr	r3, [pc, #260]	; (8cc0 <event_common_prepare+0x19c>)
		event_xtal(0, 0, 0, NULL);
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
		u32_t ticks_to_xtal;

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    8bba:	1b34      	subs	r4, r6, r4
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);

		ticker_status =
    8bbc:	9308      	str	r3, [sp, #32]
    8bbe:	4b3e      	ldr	r3, [pc, #248]	; (8cb8 <event_common_prepare+0x194>)
    8bc0:	9006      	str	r0, [sp, #24]
    8bc2:	9307      	str	r3, [sp, #28]
    8bc4:	4b3f      	ldr	r3, [pc, #252]	; (8cc4 <event_common_prepare+0x1a0>)
    8bc6:	9004      	str	r0, [sp, #16]
    8bc8:	9305      	str	r3, [sp, #20]
    8bca:	9003      	str	r0, [sp, #12]
    8bcc:	002b      	movs	r3, r5
    8bce:	9002      	str	r0, [sp, #8]
    8bd0:	9001      	str	r0, [sp, #4]
    8bd2:	9400      	str	r4, [sp, #0]
    8bd4:	2201      	movs	r2, #1
    8bd6:	0001      	movs	r1, r0
    8bd8:	f7fe fff8 	bl	7bcc <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_xtal, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_xtal, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8bdc:	2302      	movs	r3, #2
    8bde:	4398      	bics	r0, r3
    8be0:	d162      	bne.n	8ca8 <event_common_prepare+0x184>
    8be2:	0034      	movs	r4, r6
    8be4:	e00b      	b.n	8bfe <event_common_prepare+0xda>
		/* Active and XTAL are at the same time,
		 * no ticker required to be setup.
		 */
		ticks_to_start = _ticks_xtal_to_start;

		event_active(0, 0, 0, NULL);
    8be6:	2300      	movs	r3, #0
    8be8:	001a      	movs	r2, r3
    8bea:	0019      	movs	r1, r3
    8bec:	0018      	movs	r0, r3
    8bee:	f7ff ff4b 	bl	8a88 <event_active>
		event_xtal(0, 0, 0, NULL);
    8bf2:	2300      	movs	r3, #0
    8bf4:	001a      	movs	r2, r3
    8bf6:	0019      	movs	r1, r3
    8bf8:	0018      	movs	r0, r3
    8bfa:	f7ff ff37 	bl	8a6c <event_xtal>

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;

	/* setup the start ticker */
	ticker_status =
    8bfe:	2000      	movs	r0, #0
		event_active(0, 0, 0, NULL);
		event_xtal(0, 0, 0, NULL);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    8c00:	4b31      	ldr	r3, [pc, #196]	; (8cc8 <event_common_prepare+0x1a4>)
    8c02:	9a0d      	ldr	r2, [sp, #52]	; 0x34

	/* setup the start ticker */
	ticker_status =
    8c04:	0001      	movs	r1, r0
		event_active(0, 0, 0, NULL);
		event_xtal(0, 0, 0, NULL);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    8c06:	609a      	str	r2, [r3, #8]

	/* setup the start ticker */
	ticker_status =
    8c08:	4b30      	ldr	r3, [pc, #192]	; (8ccc <event_common_prepare+0x1a8>)
    8c0a:	9004      	str	r0, [sp, #16]
    8c0c:	9308      	str	r3, [sp, #32]
    8c0e:	4b2a      	ldr	r3, [pc, #168]	; (8cb8 <event_common_prepare+0x194>)
    8c10:	9003      	str	r0, [sp, #12]
    8c12:	9307      	str	r3, [sp, #28]
    8c14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    8c16:	9002      	str	r0, [sp, #8]
    8c18:	9306      	str	r3, [sp, #24]
    8c1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8c1c:	9001      	str	r0, [sp, #4]
    8c1e:	9305      	str	r3, [sp, #20]
    8c20:	9400      	str	r4, [sp, #0]
    8c22:	002b      	movs	r3, r5
    8c24:	0002      	movs	r2, r0
    8c26:	f7fe ffd1 	bl	7bcc <ticker_start>
			     ticks_at_expire, ticks_to_start,
			     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
			     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
			     ticker_timeout_fp, context, ticker_success_assert,
			     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8c2a:	2302      	movs	r3, #2
    8c2c:	4398      	bics	r0, r3
    8c2e:	4b22      	ldr	r3, [pc, #136]	; (8cb8 <event_common_prepare+0x194>)
    8c30:	1e05      	subs	r5, r0, #0
    8c32:	930b      	str	r3, [sp, #44]	; 0x2c
    8c34:	d138      	bne.n	8ca8 <event_common_prepare+0x184>
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#else
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    8c36:	2305      	movs	r3, #5
    8c38:	0002      	movs	r2, r0
    8c3a:	0001      	movs	r1, r0
    8c3c:	f7ff ff32 	bl	8aa4 <event_stop>
#endif
#undef RADIO_DEFERRED_PREEMPT

	/** Handle change in _ticks_active_to_start */
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    8c40:	23c0      	movs	r3, #192	; 0xc0
    8c42:	4a21      	ldr	r2, [pc, #132]	; (8cc8 <event_common_prepare+0x1a4>)
    8c44:	005b      	lsls	r3, r3, #1
    8c46:	58d2      	ldr	r2, [r2, r3]
    8c48:	4296      	cmp	r6, r2
    8c4a:	d020      	beq.n	8c8e <event_common_prepare+0x16a>
		u32_t ticks_to_start_new =
    8c4c:	683b      	ldr	r3, [r7, #0]
    8c4e:	005b      	lsls	r3, r3, #1
    8c50:	085b      	lsrs	r3, r3, #1
    8c52:	4293      	cmp	r3, r2
    8c54:	d200      	bcs.n	8c58 <event_common_prepare+0x134>
    8c56:	0013      	movs	r3, r2
			((_radio.ticks_active_to_start <
			  (*ticks_xtal_to_start & ~(((u32_t)1 << 31)))) ?
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;
    8c58:	990a      	ldr	r1, [sp, #40]	; 0x28
    8c5a:	600a      	str	r2, [r1, #0]

		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
    8c5c:	683a      	ldr	r2, [r7, #0]
    8c5e:	2a00      	cmp	r2, #0
    8c60:	da02      	bge.n	8c68 <event_common_prepare+0x144>
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
    8c62:	0052      	lsls	r2, r2, #1
    8c64:	0852      	lsrs	r2, r2, #1
    8c66:	603a      	str	r2, [r7, #0]
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    8c68:	2000      	movs	r0, #0
    8c6a:	4919      	ldr	r1, [pc, #100]	; (8cd0 <event_common_prepare+0x1ac>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c6c:	b29a      	uxth	r2, r3
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    8c6e:	9106      	str	r1, [sp, #24]
    8c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c72:	b2a3      	uxth	r3, r4
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    8c74:	9105      	str	r1, [sp, #20]
    8c76:	9302      	str	r3, [sp, #8]
    8c78:	9201      	str	r2, [sp, #4]
    8c7a:	9200      	str	r2, [sp, #0]
    8c7c:	9004      	str	r0, [sp, #16]
    8c7e:	9003      	str	r0, [sp, #12]
    8c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8c82:	0001      	movs	r1, r0
    8c84:	f7fe ffea 	bl	7c5c <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      RADIO_TICKER_USER_ID_WORKER, ticker_id,
				      ticks_to_start, ticks_to_start_new,
				      ticks_to_start_new, ticks_to_start, 0, 0,
				      ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8c88:	2302      	movs	r3, #2
    8c8a:	4398      	bics	r0, r3
    8c8c:	d10c      	bne.n	8ca8 <event_common_prepare+0x184>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* route all packets queued for connections */
	packet_tx_enqueue(0xFF);
    8c8e:	20ff      	movs	r0, #255	; 0xff
    8c90:	f7ff fdea 	bl	8868 <packet_tx_enqueue>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    8c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8c96:	4b0f      	ldr	r3, [pc, #60]	; (8cd4 <event_common_prepare+0x1b0>)

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    8c98:	2000      	movs	r0, #0
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    8c9a:	609a      	str	r2, [r3, #8]

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    8c9c:	2201      	movs	r2, #1
    8c9e:	0011      	movs	r1, r2
    8ca0:	f7fd fc3e 	bl	6520 <mayfly_enqueue>
					RADIO_TICKER_USER_ID_JOB, 1,
					&s_mfy_xtal_stop_calc);
		LL_ASSERT(!retval);
    8ca4:	2800      	cmp	r0, #0
    8ca6:	d002      	beq.n	8cae <event_common_prepare+0x18a>
    8ca8:	b662      	cpsie	i
    8caa:	2004      	movs	r0, #4
    8cac:	df02      	svc	2
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED */

	return 0;
}
    8cae:	0028      	movs	r0, r5
    8cb0:	b00f      	add	sp, #60	; 0x3c
    8cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8cb4:	00001168 	.word	0x00001168
    8cb8:	00008da1 	.word	0x00008da1
    8cbc:	00008a89 	.word	0x00008a89
    8cc0:	0000117d 	.word	0x0000117d
    8cc4:	00008a6d 	.word	0x00008a6d
    8cc8:	20000ea0 	.word	0x20000ea0
    8ccc:	00001195 	.word	0x00001195
    8cd0:	000011c2 	.word	0x000011c2
    8cd4:	20000688 	.word	0x20000688

00008cd8 <radio_event_adv_prepare>:
			    0x555555);
}

void radio_event_adv_prepare(u32_t ticks_at_expire, u32_t remainder,
			     u16_t lazy, void *context)
{
    8cd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	LL_ASSERT(!_radio.ticker_id_prepare);
    8cda:	4c0c      	ldr	r4, [pc, #48]	; (8d0c <radio_event_adv_prepare+0x34>)
    8cdc:	7b25      	ldrb	r5, [r4, #12]
    8cde:	b2ed      	uxtb	r5, r5
    8ce0:	2d00      	cmp	r5, #0
    8ce2:	d001      	beq.n	8ce8 <radio_event_adv_prepare+0x10>
    8ce4:	f7ff fc66 	bl	85b4 <chan_set.part.21>

	err = event_common_prepare(ticks_at_expire, remainder,
    8ce8:	9503      	str	r5, [sp, #12]
    8cea:	4d09      	ldr	r5, [pc, #36]	; (8d10 <radio_event_adv_prepare+0x38>)
    8cec:	0023      	movs	r3, r4
    8cee:	9502      	str	r5, [sp, #8]
    8cf0:	2505      	movs	r5, #5
    8cf2:	0022      	movs	r2, r4
    8cf4:	9501      	str	r5, [sp, #4]
    8cf6:	69e6      	ldr	r6, [r4, #28]
    8cf8:	3318      	adds	r3, #24
    8cfa:	3214      	adds	r2, #20
    8cfc:	9600      	str	r6, [sp, #0]
    8cfe:	f7ff ff11 	bl	8b24 <event_common_prepare>
				   &_radio.advertiser.hdr.ticks_xtal_to_start,
				   &_radio.advertiser.hdr.ticks_active_to_start,
				   _radio.advertiser.hdr.ticks_preempt_to_start,
				   RADIO_TICKER_ID_ADV, event_adv, NULL);
	if (!err) {
    8d02:	2800      	cmp	r0, #0
    8d04:	d100      	bne.n	8d08 <radio_event_adv_prepare+0x30>
		_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    8d06:	7325      	strb	r5, [r4, #12]
	}

	DEBUG_RADIO_PREPARE_A(0);
}
    8d08:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8d0a:	46c0      	nop			; (mov r8, r8)
    8d0c:	20000ea0 	.word	0x20000ea0
    8d10:	00008ee9 	.word	0x00008ee9

00008d14 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    8d14:	b510      	push	{r4, lr}
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    8d16:	2800      	cmp	r0, #0
    8d18:	d001      	beq.n	8d1e <ticker_op_latency_cancelled+0xa>
    8d1a:	f7ff fc4b 	bl	85b4 <chan_set.part.21>

	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
    8d1e:	2210      	movs	r2, #16
    8d20:	3144      	adds	r1, #68	; 0x44
    8d22:	780b      	ldrb	r3, [r1, #0]
    8d24:	4393      	bics	r3, r2
    8d26:	700b      	strb	r3, [r1, #0]
}
    8d28:	bd10      	pop	{r4, pc}
	...

00008d2c <ticker_update_slave_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
		  (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV));
}

static void ticker_update_slave_assert(u32_t status, void *params)
{
    8d2c:	b510      	push	{r4, lr}
	u8_t ticker_id = (u32_t)params & 0xFF;

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    8d2e:	2800      	cmp	r0, #0
    8d30:	d006      	beq.n	8d40 <ticker_update_slave_assert+0x14>
    8d32:	4b04      	ldr	r3, [pc, #16]	; (8d44 <ticker_update_slave_assert+0x18>)
    8d34:	b2c9      	uxtb	r1, r1
    8d36:	7b9b      	ldrb	r3, [r3, #14]
    8d38:	4299      	cmp	r1, r3
    8d3a:	d001      	beq.n	8d40 <ticker_update_slave_assert+0x14>
    8d3c:	f7ff fc3a 	bl	85b4 <chan_set.part.21>
		  (_radio.ticker_id_stop == ticker_id));
}
    8d40:	bd10      	pop	{r4, pc}
    8d42:	46c0      	nop			; (mov r8, r8)
    8d44:	20000ea0 	.word	0x20000ea0

00008d48 <ticker_update_adv_assert>:
		}
	}
}

static void ticker_update_adv_assert(u32_t status, void *params)
{
    8d48:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    8d4a:	2800      	cmp	r0, #0
    8d4c:	d005      	beq.n	8d5a <ticker_update_adv_assert+0x12>
    8d4e:	4b03      	ldr	r3, [pc, #12]	; (8d5c <ticker_update_adv_assert+0x14>)
    8d50:	7b9b      	ldrb	r3, [r3, #14]
    8d52:	2b05      	cmp	r3, #5
    8d54:	d001      	beq.n	8d5a <ticker_update_adv_assert+0x12>
    8d56:	f7ff fc2d 	bl	85b4 <chan_set.part.21>
		  (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV));
}
    8d5a:	bd10      	pop	{r4, pc}
    8d5c:	20000ea0 	.word	0x20000ea0

00008d60 <ticker_stop_scan_assert>:
		}
	}
}

static void ticker_stop_scan_assert(u32_t status, void *params)
{
    8d60:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    8d62:	2801      	cmp	r0, #1
    8d64:	d108      	bne.n	8d78 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    8d66:	4b05      	ldr	r3, [pc, #20]	; (8d7c <ticker_stop_scan_assert+0x1c>)
    8d68:	7b9a      	ldrb	r2, [r3, #14]
    8d6a:	2a06      	cmp	r2, #6
    8d6c:	d102      	bne.n	8d74 <ticker_stop_scan_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Scan role as it is now transitioned
			 * to Master role).
			 */
			_radio.ticker_id_stop = 0;
    8d6e:	2200      	movs	r2, #0
    8d70:	739a      	strb	r2, [r3, #14]
    8d72:	e001      	b.n	8d78 <ticker_stop_scan_assert+0x18>
    8d74:	f7ff fc1e 	bl	85b4 <chan_set.part.21>
		} else {
			LL_ASSERT(0);
		}
	}
}
    8d78:	bd10      	pop	{r4, pc}
    8d7a:	46c0      	nop			; (mov r8, r8)
    8d7c:	20000ea0 	.word	0x20000ea0

00008d80 <ticker_stop_adv_assert>:

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_stop_adv_assert(u32_t status, void *params)
{
    8d80:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    8d82:	2801      	cmp	r0, #1
    8d84:	d108      	bne.n	8d98 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    8d86:	4b05      	ldr	r3, [pc, #20]	; (8d9c <ticker_stop_adv_assert+0x1c>)
    8d88:	7b9a      	ldrb	r2, [r3, #14]
    8d8a:	2a05      	cmp	r2, #5
    8d8c:	d102      	bne.n	8d94 <ticker_stop_adv_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Adv role as it is now transitioned
			 * to Slave role).
			 */
			_radio.ticker_id_stop = 0;
    8d8e:	2200      	movs	r2, #0
    8d90:	739a      	strb	r2, [r3, #14]
    8d92:	e001      	b.n	8d98 <ticker_stop_adv_assert+0x18>
    8d94:	f7ff fc0e 	bl	85b4 <chan_set.part.21>
		} else {
			LL_ASSERT(0);
		}
	}
}
    8d98:	bd10      	pop	{r4, pc}
    8d9a:	46c0      	nop			; (mov r8, r8)
    8d9c:	20000ea0 	.word	0x20000ea0

00008da0 <ticker_success_assert>:
{
	*((u32_t volatile *)ops_context) = status;
}

static void ticker_success_assert(u32_t status, void *params)
{
    8da0:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    8da2:	2800      	cmp	r0, #0
    8da4:	d001      	beq.n	8daa <ticker_success_assert+0xa>
    8da6:	f7ff fc05 	bl	85b4 <chan_set.part.21>
}
    8daa:	bd10      	pop	{r4, pc}

00008dac <adv_scan_configure.constprop.33>:
	radio_reset();
	radio_tx_power_set(0);
	radio_isr_set(isr);
}

static void adv_scan_configure(u8_t phy, u8_t flags)
    8dac:	b513      	push	{r0, r1, r4, lr}
    8dae:	0004      	movs	r4, r0
{
	u32_t aa = 0x8e89bed6;
    8db0:	4b0d      	ldr	r3, [pc, #52]	; (8de8 <adv_scan_configure.constprop.33+0x3c>)
    8db2:	9301      	str	r3, [sp, #4]
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    8db4:	f7fd fe02 	bl	69bc <radio_reset>
	radio_tx_power_set(0);
    8db8:	2000      	movs	r0, #0
    8dba:	f7fd fe1b 	bl	69f4 <radio_tx_power_set>
	radio_isr_set(isr);
    8dbe:	480b      	ldr	r0, [pc, #44]	; (8dec <adv_scan_configure.constprop.33+0x40>)
    8dc0:	f7fd fde4 	bl	698c <radio_isr_set>
static void adv_scan_configure(u8_t phy, u8_t flags)
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
    8dc4:	2101      	movs	r1, #1
    8dc6:	0020      	movs	r0, r4
    8dc8:	f7fd fe08 	bl	69dc <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    8dcc:	0064      	lsls	r4, r4, #1
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
	radio_aa_set((u8_t *)&aa);
    8dce:	a801      	add	r0, sp, #4
    8dd0:	f7fd fe28 	bl	6a24 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    8dd4:	b2e2      	uxtb	r2, r4
    8dd6:	2125      	movs	r1, #37	; 0x25
    8dd8:	2008      	movs	r0, #8
    8dda:	f7fd fe41 	bl	6a60 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    8dde:	4904      	ldr	r1, [pc, #16]	; (8df0 <adv_scan_configure.constprop.33+0x44>)
    8de0:	4804      	ldr	r0, [pc, #16]	; (8df4 <adv_scan_configure.constprop.33+0x48>)
    8de2:	f7fd fead 	bl	6b40 <radio_crc_configure>
			    0x555555);
}
    8de6:	bd13      	pop	{r0, r1, r4, pc}
    8de8:	8e89bed6 	.word	0x8e89bed6
    8dec:	0000a4f5 	.word	0x0000a4f5
    8df0:	00555555 	.word	0x00555555
    8df4:	0000065b 	.word	0x0000065b

00008df8 <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    8df8:	4b03      	ldr	r3, [pc, #12]	; (8e08 <mayfly_xtal_start+0x10>)
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_start(void *params)
{
    8dfa:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    8dfc:	6818      	ldr	r0, [r3, #0]
    8dfe:	2100      	movs	r1, #0
    8e00:	6843      	ldr	r3, [r0, #4]
    8e02:	681b      	ldr	r3, [r3, #0]
    8e04:	4798      	blx	r3
}
    8e06:	bd10      	pop	{r4, pc}
    8e08:	20000ea0 	.word	0x20000ea0

00008e0c <mayfly_xtal_stop>:

static void mayfly_xtal_stop(void *params)
{
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    8e0c:	4b03      	ldr	r3, [pc, #12]	; (8e1c <mayfly_xtal_stop+0x10>)
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_stop(void *params)
{
    8e0e:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    8e10:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    8e12:	2100      	movs	r1, #0
    8e14:	6843      	ldr	r3, [r0, #4]
    8e16:	685b      	ldr	r3, [r3, #4]
    8e18:	4798      	blx	r3

	DEBUG_RADIO_CLOSE(0);
}
    8e1a:	bd10      	pop	{r4, pc}
    8e1c:	20000ea0 	.word	0x20000ea0

00008e20 <chan_sel_2>:
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    8e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8e22:	9301      	str	r3, [sp, #4]
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    8e24:	2301      	movs	r3, #1
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    8e26:	0014      	movs	r4, r2
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    8e28:	2603      	movs	r6, #3
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    8e2a:	469c      	mov	ip, r3
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    8e2c:	4048      	eors	r0, r1
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    8e2e:	2308      	movs	r3, #8
static u8_t chan_rev_8(u8_t i)
{
	u8_t iterate;
	u8_t o;

	o = 0;
    8e30:	2200      	movs	r2, #0
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    8e32:	0a05      	lsrs	r5, r0, #8
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    8e34:	4667      	mov	r7, ip
    8e36:	0052      	lsls	r2, r2, #1
    8e38:	402f      	ands	r7, r5
    8e3a:	3b01      	subs	r3, #1
    8e3c:	433a      	orrs	r2, r7
    8e3e:	b2db      	uxtb	r3, r3
    8e40:	b2d2      	uxtb	r2, r2
		i >>= 1;
    8e42:	086d      	lsrs	r5, r5, #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    8e44:	2b00      	cmp	r3, #0
    8e46:	d1f5      	bne.n	8e34 <chan_sel_2+0x14>
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    8e48:	2708      	movs	r7, #8
    8e4a:	0212      	lsls	r2, r2, #8
    8e4c:	b212      	sxth	r2, r2
    8e4e:	b2c0      	uxtb	r0, r0
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    8e50:	4665      	mov	r5, ip
    8e52:	005b      	lsls	r3, r3, #1
    8e54:	4005      	ands	r5, r0
    8e56:	3f01      	subs	r7, #1
    8e58:	432b      	orrs	r3, r5
    8e5a:	b2ff      	uxtb	r7, r7
    8e5c:	b2db      	uxtb	r3, r3
		i >>= 1;
    8e5e:	0840      	lsrs	r0, r0, #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    8e60:	2f00      	cmp	r7, #0
    8e62:	d1f5      	bne.n	8e50 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
}

static u16_t chan_mam(u16_t a, u16_t b)
{
	return ((u32_t)a * 17 + b) & 0xFFFF;
    8e64:	431a      	orrs	r2, r3
    8e66:	0010      	movs	r0, r2
    8e68:	2311      	movs	r3, #17
    8e6a:	4358      	muls	r0, r3
    8e6c:	3e01      	subs	r6, #1
    8e6e:	1808      	adds	r0, r1, r0
    8e70:	b2f6      	uxtb	r6, r6
    8e72:	b280      	uxth	r0, r0
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;

	for (iterate = 0; iterate < 3; iterate++) {
    8e74:	2e00      	cmp	r6, #0
    8e76:	d1da      	bne.n	8e2e <chan_sel_2+0xe>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
    8e78:	4041      	eors	r1, r0
    8e7a:	000e      	movs	r6, r1
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    8e7c:	2125      	movs	r1, #37	; 0x25
    8e7e:	0030      	movs	r0, r6
    8e80:	f7f7 fa2a 	bl	2d8 <__aeabi_uidivmod>

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8e84:	2207      	movs	r2, #7
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    8e86:	b2c8      	uxtb	r0, r1

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8e88:	08c3      	lsrs	r3, r0, #3
    8e8a:	5ce3      	ldrb	r3, [r4, r3]
    8e8c:	4002      	ands	r2, r0
    8e8e:	4113      	asrs	r3, r2
    8e90:	2201      	movs	r2, #1
    8e92:	4213      	tst	r3, r2
    8e94:	d105      	bne.n	8ea2 <chan_sel_2+0x82>
		u8_t chan_index;

		chan_index = ((u32_t)chan_count * prn_e) >> 16;
		chan_next = chan_sel_remap(chan_map, chan_index);
    8e96:	9901      	ldr	r1, [sp, #4]
    8e98:	0020      	movs	r0, r4
    8e9a:	4371      	muls	r1, r6
    8e9c:	0c09      	lsrs	r1, r1, #16
    8e9e:	f7ff f80a 	bl	7eb6 <chan_sel_remap>
	} else {
		/* channel can be used, return it */
	}

	return chan_next;
}
    8ea2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00008ea4 <preempt_calc>:
}

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
    8ea4:	b570      	push	{r4, r5, r6, lr}
    8ea6:	0014      	movs	r4, r2
    8ea8:	000e      	movs	r6, r1
    8eaa:	0005      	movs	r5, r0
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    8eac:	f7fe ffc2 	bl	7e34 <ticker_ticks_now_get>

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
	u32_t diff =
    8eb0:	0021      	movs	r1, r4
    8eb2:	f7fe ffc3 	bl	7e3c <ticker_ticks_diff_get>
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
    8eb6:	1cc4      	adds	r4, r0, #3
		}

		return 1;
	}

	return 0;
    8eb8:	2000      	movs	r0, #0
{
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    8eba:	2c09      	cmp	r4, #9
    8ebc:	d910      	bls.n	8ee0 <preempt_calc+0x3c>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
		}
	} else {
		if (s_xtal_retained) {
    8ebe:	4b09      	ldr	r3, [pc, #36]	; (8ee4 <preempt_calc+0x40>)
    8ec0:	781b      	ldrb	r3, [r3, #0]
    8ec2:	4283      	cmp	r3, r0
    8ec4:	d001      	beq.n	8eca <preempt_calc+0x26>
    8ec6:	f7ff fb5d 	bl	8584 <mayfly_xtal_retain.part.15>

	diff += 3;
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    8eca:	0028      	movs	r0, r5
    8ecc:	0032      	movs	r2, r6
    8ece:	2100      	movs	r1, #0
    8ed0:	f7ff fb74 	bl	85bc <prepare_normal_set>

		diff += hdr->ticks_preempt_to_start;
    8ed4:	68ab      	ldr	r3, [r5, #8]
		if (diff <
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
		}

		return 1;
    8ed6:	2001      	movs	r0, #1
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);

		diff += hdr->ticks_preempt_to_start;
    8ed8:	18e3      	adds	r3, r4, r3
		if (diff <
    8eda:	2b26      	cmp	r3, #38	; 0x26
    8edc:	d800      	bhi.n	8ee0 <preempt_calc+0x3c>
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
    8ede:	60ab      	str	r3, [r5, #8]

		return 1;
	}

	return 0;
}
    8ee0:	bd70      	pop	{r4, r5, r6, pc}
    8ee2:	46c0      	nop			; (mov r8, r8)
    8ee4:	20000e8c 	.word	0x20000e8c

00008ee8 <event_adv>:
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    8ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    8eea:	4b2c      	ldr	r3, [pc, #176]	; (8f9c <event_adv+0xb4>)
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    8eec:	0005      	movs	r5, r0
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    8eee:	7bda      	ldrb	r2, [r3, #15]
    8ef0:	001c      	movs	r4, r3
    8ef2:	b2d2      	uxtb	r2, r2
    8ef4:	2a00      	cmp	r2, #0
    8ef6:	d14c      	bne.n	8f92 <event_adv+0xaa>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    8ef8:	7b1b      	ldrb	r3, [r3, #12]
    8efa:	b2db      	uxtb	r3, r3
    8efc:	2b05      	cmp	r3, #5
    8efe:	d148      	bne.n	8f92 <event_adv+0xaa>
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    8f00:	2601      	movs	r6, #1
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    8f02:	1da7      	adds	r7, r4, #6
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;
    8f04:	6060      	str	r0, [r4, #4]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    8f06:	7ff8      	ldrb	r0, [r7, #31]
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    8f08:	73e6      	strb	r6, [r4, #15]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    8f0a:	0740      	lsls	r0, r0, #29
    8f0c:	0f40      	lsrs	r0, r0, #29
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
    8f0e:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    8f10:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    8f12:	f7ff ff4b 	bl	8dac <adv_scan_configure.constprop.33>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	adv_scan_configure(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    8f16:	200e      	movs	r0, #14
    8f18:	7ffb      	ldrb	r3, [r7, #31]
    8f1a:	1d61      	adds	r1, r4, #5
    8f1c:	069b      	lsls	r3, r3, #26
    8f1e:	0f5b      	lsrs	r3, r3, #29
    8f20:	005a      	lsls	r2, r3, #1
    8f22:	7fcb      	ldrb	r3, [r1, #31]
    8f24:	4383      	bics	r3, r0
    8f26:	4313      	orrs	r3, r2
    8f28:	77cb      	strb	r3, [r1, #31]
	adv_setup();
    8f2a:	f7ff fc0b 	bl	8744 <adv_setup>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (ctrl_rl_enabled()) {
    8f2e:	f004 fd15 	bl	d95c <ctrl_rl_enabled>
    8f32:	223f      	movs	r2, #63	; 0x3f
    8f34:	7ffb      	ldrb	r3, [r7, #31]
		struct ll_filter *filter =
    8f36:	4393      	bics	r3, r2

	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
	adv_setup();

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (ctrl_rl_enabled()) {
    8f38:	2800      	cmp	r0, #0
    8f3a:	d003      	beq.n	8f44 <event_adv+0x5c>
		struct ll_filter *filter =
    8f3c:	1e58      	subs	r0, r3, #1
    8f3e:	4183      	sbcs	r3, r0
    8f40:	b2d8      	uxtb	r0, r3
    8f42:	e002      	b.n	8f4a <event_adv+0x62>
				       filter->addr_type_bitmask,
				       (u8_t *)filter->bdaddr);
	} else
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {
    8f44:	2b00      	cmp	r3, #0
    8f46:	d007      	beq.n	8f58 <event_adv+0x70>

		struct ll_filter *wl = ctrl_filter_get(true);
    8f48:	0030      	movs	r0, r6
    8f4a:	f004 fbbd 	bl	d6c8 <ctrl_filter_get>

		radio_filter_configure(wl->enable_bitmask,
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
    8f4e:	1c82      	adds	r2, r0, #2
	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {

		struct ll_filter *wl = ctrl_filter_get(true);

		radio_filter_configure(wl->enable_bitmask,
    8f50:	7841      	ldrb	r1, [r0, #1]
    8f52:	7800      	ldrb	r0, [r0, #0]
    8f54:	f7fd fe52 	bl	6bfc <radio_filter_configure>
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
	}

	radio_tmr_start(1,
    8f58:	0029      	movs	r1, r5
    8f5a:	68a2      	ldr	r2, [r4, #8]
    8f5c:	3109      	adds	r1, #9
    8f5e:	2001      	movs	r0, #1
    8f60:	f7fd febe 	bl	6ce0 <radio_tmr_start>
			ticks_at_expire +
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
			_radio.remainder_anchor);
	radio_tmr_end_capture();
    8f64:	f7fd ff80 	bl	6e68 <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    8f68:	0020      	movs	r0, r4
    8f6a:	002a      	movs	r2, r5
    8f6c:	3014      	adds	r0, #20
    8f6e:	2105      	movs	r1, #5
    8f70:	f7ff ff98 	bl	8ea4 <preempt_calc>
    8f74:	2800      	cmp	r0, #0
    8f76:	d004      	beq.n	8f82 <event_adv+0x9a>
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    8f78:	2304      	movs	r3, #4
    8f7a:	7423      	strb	r3, [r4, #16]
		radio_disable();
    8f7c:	f7fd fdb2 	bl	6ae4 <radio_disable>
    8f80:	e00a      	b.n	8f98 <event_adv+0xb0>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    8f82:	0003      	movs	r3, r0
    8f84:	4a06      	ldr	r2, [pc, #24]	; (8fa0 <event_adv+0xb8>)
    8f86:	0001      	movs	r1, r0
    8f88:	f7fe ff18 	bl	7dbc <ticker_job_idle_get>
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					RADIO_TICKER_USER_ID_WORKER,
					ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8f8c:	2302      	movs	r3, #2
    8f8e:	4398      	bics	r0, r3
    8f90:	d002      	beq.n	8f98 <event_adv+0xb0>
    8f92:	b662      	cpsie	i
    8f94:	2004      	movs	r0, #4
    8f96:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_A(0);
}
    8f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f9a:	46c0      	nop			; (mov r8, r8)
    8f9c:	20000ea0 	.word	0x20000ea0
    8fa0:	00008569 	.word	0x00008569

00008fa4 <connection_configure>:
					   conn->handle;
	}
}

static void connection_configure(struct connection *conn)
{
    8fa4:	b510      	push	{r4, lr}
    8fa6:	0004      	movs	r4, r0
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    8fa8:	f7fd fd08 	bl	69bc <radio_reset>
	radio_tx_power_set(0);
    8fac:	2000      	movs	r0, #0
    8fae:	f7fd fd21 	bl	69f4 <radio_tx_power_set>
	radio_isr_set(isr);
    8fb2:	4809      	ldr	r0, [pc, #36]	; (8fd8 <connection_configure+0x34>)
    8fb4:	f7fd fcea 	bl	698c <radio_isr_set>
}

static void connection_configure(struct connection *conn)
{
	adv_scan_conn_configure();
	radio_aa_set(conn->access_addr);
    8fb8:	0020      	movs	r0, r4
    8fba:	3010      	adds	r0, #16
    8fbc:	f7fd fd32 	bl	6a24 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    8fc0:	7da1      	ldrb	r1, [r4, #22]
    8fc2:	7d63      	ldrb	r3, [r4, #21]
    8fc4:	0409      	lsls	r1, r1, #16
    8fc6:	021b      	lsls	r3, r3, #8
    8fc8:	4319      	orrs	r1, r3
    8fca:	7d23      	ldrb	r3, [r4, #20]
    8fcc:	4803      	ldr	r0, [pc, #12]	; (8fdc <connection_configure+0x38>)
    8fce:	4319      	orrs	r1, r3
    8fd0:	f7fd fdb6 	bl	6b40 <radio_crc_configure>
			    (((u32_t)conn->crc_init[2] << 16) |
			     ((u32_t)conn->crc_init[1] << 8) |
			     ((u32_t)conn->crc_init[0])));
}
    8fd4:	bd10      	pop	{r4, pc}
    8fd6:	46c0      	nop			; (mov r8, r8)
    8fd8:	0000a4f5 	.word	0x0000a4f5
    8fdc:	0000065b 	.word	0x0000065b

00008fe0 <event_slave>:
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    8fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    8fe2:	4a5d      	ldr	r2, [pc, #372]	; (9158 <event_slave+0x178>)
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    8fe4:	001c      	movs	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    8fe6:	7bd3      	ldrb	r3, [r2, #15]
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    8fe8:	0006      	movs	r6, r0
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    8fea:	b2db      	uxtb	r3, r3
    8fec:	0015      	movs	r5, r2
    8fee:	2b00      	cmp	r3, #0
    8ff0:	d000      	beq.n	8ff4 <event_slave+0x14>
    8ff2:	e0aa      	b.n	914a <event_slave+0x16a>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    8ff4:	7b12      	ldrb	r2, [r2, #12]
    8ff6:	8c21      	ldrh	r1, [r4, #32]
    8ff8:	b2d2      	uxtb	r2, r2
    8ffa:	3107      	adds	r1, #7
    8ffc:	428a      	cmp	r2, r1
    8ffe:	d000      	beq.n	9002 <event_slave+0x22>
    9000:	e0a3      	b.n	914a <event_slave+0x16a>
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    9002:	2103      	movs	r1, #3
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    9004:	b2d2      	uxtb	r2, r2

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    9006:	73e9      	strb	r1, [r5, #15]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    9008:	002f      	movs	r7, r5
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
    900a:	732b      	strb	r3, [r5, #12]
	_radio.ticker_id_event =
    900c:	736a      	strb	r2, [r5, #13]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    900e:	002a      	movs	r2, r5
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    9010:	3902      	subs	r1, #2
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    9012:	32ff      	adds	r2, #255	; 0xff
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    9014:	37fc      	adds	r7, #252	; 0xfc
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    9016:	7553      	strb	r3, [r2, #21]
	_radio.crc_expire = 0;
    9018:	7593      	strb	r3, [r2, #22]

	_radio.conn_curr = conn;
    901a:	617c      	str	r4, [r7, #20]
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    901c:	7429      	strb	r1, [r5, #16]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    901e:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    9020:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	conn->latency_prepare = 0;

	connection_configure(conn);
    9022:	0020      	movs	r0, r4
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    9024:	8562      	strh	r2, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    9026:	8523      	strh	r3, [r4, #40]	; 0x28

	connection_configure(conn);
    9028:	f7ff ffbc 	bl	8fa4 <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    902c:	2096      	movs	r0, #150	; 0x96
    902e:	f7fd fe4f 	bl	6cd0 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
    9032:	0023      	movs	r3, r4
    9034:	3332      	adds	r3, #50	; 0x32
    9036:	7818      	ldrb	r0, [r3, #0]
    9038:	09c1      	lsrs	r1, r0, #7
    903a:	0680      	lsls	r0, r0, #26
    903c:	0f40      	lsrs	r0, r0, #29
    903e:	f7fd fdab 	bl	6b98 <radio_switch_complete_and_tx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    9042:	233e      	movs	r3, #62	; 0x3e
    9044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9046:	0027      	movs	r7, r4
    9048:	33ff      	adds	r3, #255	; 0xff
    904a:	5ceb      	ldrb	r3, [r5, r3]
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    904c:	0020      	movs	r0, r4
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    904e:	009b      	lsls	r3, r3, #2
    9050:	5899      	ldr	r1, [r3, r2]
    9052:	3717      	adds	r7, #23
    9054:	3108      	adds	r1, #8
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    9056:	f7ff f993 	bl	8380 <rx_packet_set>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    905a:	7f22      	ldrb	r2, [r4, #28]
    905c:	0693      	lsls	r3, r2, #26
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    905e:	0e9b      	lsrs	r3, r3, #26

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    9060:	0652      	lsls	r2, r2, #25
    9062:	d507      	bpl.n	9074 <event_slave+0x94>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    9064:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    9066:	8be1      	ldrh	r1, [r4, #30]
    9068:	3801      	subs	r0, #1
    906a:	003a      	movs	r2, r7
    906c:	b280      	uxth	r0, r0
    906e:	f7ff fed7 	bl	8e20 <chan_sel_2>
    9072:	e01a      	b.n	90aa <event_slave+0xca>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    9074:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    9076:	9301      	str	r3, [sp, #4]
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    9078:	7fa3      	ldrb	r3, [r4, #30]
    907a:	3001      	adds	r0, #1
    907c:	4358      	muls	r0, r3
    907e:	7fe3      	ldrb	r3, [r4, #31]
    9080:	2125      	movs	r1, #37	; 0x25
    9082:	18c0      	adds	r0, r0, r3
    9084:	f7f7 fa12 	bl	4ac <__aeabi_idivmod>
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    9088:	2207      	movs	r2, #7
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    908a:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    908c:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    908e:	08c3      	lsrs	r3, r0, #3
    9090:	5cfb      	ldrb	r3, [r7, r3]
    9092:	4011      	ands	r1, r2
    9094:	410b      	asrs	r3, r1
    9096:	3a06      	subs	r2, #6
    9098:	4213      	tst	r3, r2
    909a:	d106      	bne.n	90aa <event_slave+0xca>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    909c:	9901      	ldr	r1, [sp, #4]
    909e:	f7f7 f91b 	bl	2d8 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    90a2:	0038      	movs	r0, r7
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    90a4:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    90a6:	f7fe ff06 	bl	7eb6 <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    90aa:	f7ff fb2d 	bl	8708 <chan_set>

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    90ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
    90b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    90b2:	189b      	adds	r3, r3, r2
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
    90b4:	2200      	movs	r2, #0
    90b6:	6522      	str	r2, [r4, #80]	; 0x50
	if (conn->role.slave.window_widening_event_us >
	    conn->role.slave.window_widening_max_us) {
    90b8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    90ba:	6563      	str	r3, [r4, #84]	; 0x54
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
	if (conn->role.slave.window_widening_event_us >
    90bc:	4293      	cmp	r3, r2
    90be:	d900      	bls.n	90c2 <event_slave+0xe2>
	    conn->role.slave.window_widening_max_us) {
		conn->role.slave.window_widening_event_us =
    90c0:	6562      	str	r2, [r4, #84]	; 0x54
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    90c2:	2000      	movs	r0, #0

	remainder_us =
    90c4:	0031      	movs	r1, r6
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    90c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    90c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    90ca:	3109      	adds	r1, #9
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    90cc:	189b      	adds	r3, r3, r2
    90ce:	65e3      	str	r3, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    90d0:	68aa      	ldr	r2, [r5, #8]
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    90d2:	65a0      	str	r0, [r4, #88]	; 0x58

	remainder_us =
    90d4:	f7fd fe04 	bl	6ce0 <radio_tmr_start>
    90d8:	0005      	movs	r5, r0
		radio_tmr_start(0, ticks_at_expire +
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
	radio_tmr_aa_capture();
    90da:	f7fd fe97 	bl	6e0c <radio_tmr_aa_capture>
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
    90de:	6d63      	ldr	r3, [r4, #84]	; 0x54
    90e0:	0058      	lsls	r0, r3, #1
    90e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    90e4:	3340      	adds	r3, #64	; 0x40
    90e6:	18c0      	adds	r0, r0, r3
    90e8:	1947      	adds	r7, r0, r5
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    90ea:	0025      	movs	r5, r4
    90ec:	3533      	adds	r5, #51	; 0x33
    90ee:	7828      	ldrb	r0, [r5, #0]
    90f0:	0680      	lsls	r0, r0, #26
    90f2:	0f40      	lsrs	r0, r0, #29
    90f4:	f7fd fce6 	bl	6ac4 <radio_rx_ready_delay_get>
	hcto += addr_us_get(conn->phy_rx);
    90f8:	782b      	ldrb	r3, [r5, #0]
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    90fa:	1838      	adds	r0, r7, r0
	hcto += addr_us_get(conn->phy_rx);
    90fc:	069b      	lsls	r3, r3, #26
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    90fe:	0f5b      	lsrs	r3, r3, #29
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
    9100:	2218      	movs	r2, #24
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    9102:	2b02      	cmp	r3, #2
    9104:	d005      	beq.n	9112 <event_slave+0x132>
    9106:	2b04      	cmp	r3, #4
    9108:	d102      	bne.n	9110 <event_slave+0x130>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    910a:	3261      	adds	r2, #97	; 0x61
    910c:	32ff      	adds	r2, #255	; 0xff
    910e:	e000      	b.n	9112 <event_slave+0x132>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
    9110:	2228      	movs	r2, #40	; 0x28
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	hcto += radio_rx_ready_delay_get(0);
	hcto += addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_tmr_hcto_configure(hcto);
    9112:	1810      	adds	r0, r2, r0
    9114:	f7fd fe4e 	bl	6db4 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
    9118:	f7fd fea6 	bl	6e68 <radio_tmr_end_capture>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    911c:	8c21      	ldrh	r1, [r4, #32]
    911e:	0032      	movs	r2, r6
    9120:	3107      	adds	r1, #7
    9122:	b2c9      	uxtb	r1, r1
    9124:	0020      	movs	r0, r4
    9126:	f7ff febd 	bl	8ea4 <preempt_calc>
    912a:	2800      	cmp	r0, #0
    912c:	d005      	beq.n	913a <event_slave+0x15a>
				      conn->handle), ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    912e:	2204      	movs	r2, #4
    9130:	4b09      	ldr	r3, [pc, #36]	; (9158 <event_slave+0x178>)
    9132:	741a      	strb	r2, [r3, #16]
		radio_disable();
    9134:	f7fd fcd6 	bl	6ae4 <radio_disable>
    9138:	e00a      	b.n	9150 <event_slave+0x170>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    913a:	0003      	movs	r3, r0
    913c:	4a07      	ldr	r2, [pc, #28]	; (915c <event_slave+0x17c>)
    913e:	0001      	movs	r1, r0
    9140:	f7fe fe3c 	bl	7dbc <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9144:	2302      	movs	r3, #2
    9146:	4398      	bics	r0, r3
    9148:	d002      	beq.n	9150 <event_slave+0x170>
    914a:	b662      	cpsie	i
    914c:	2004      	movs	r0, #4
    914e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    9150:	2002      	movs	r0, #2
    9152:	f7ff fb89 	bl	8868 <packet_tx_enqueue>

	DEBUG_RADIO_START_S(0);
}
    9156:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    9158:	20000ea0 	.word	0x20000ea0
    915c:	00008569 	.word	0x00008569

00009160 <ctrl_tx_enqueue>:
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    9160:	0003      	movs	r3, r0
	p->next = node_tx;
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
    9162:	b510      	push	{r4, lr}
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    9164:	33c0      	adds	r3, #192	; 0xc0
    9166:	781a      	ldrb	r2, [r3, #0]
    9168:	30fc      	adds	r0, #252	; 0xfc

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
    916a:	09d3      	lsrs	r3, r2, #7
    916c:	d11c      	bne.n	91a8 <ctrl_tx_enqueue+0x48>
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    916e:	6883      	ldr	r3, [r0, #8]
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    9170:	2b00      	cmp	r3, #0
    9172:	d019      	beq.n	91a8 <ctrl_tx_enqueue+0x48>
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    9174:	0712      	lsls	r2, r2, #28
    9176:	d502      	bpl.n	917e <ctrl_tx_enqueue+0x1e>
				    /* data PDU tx is not paused */
				    (conn->pause_tx == 0) ||
    9178:	68c2      	ldr	r2, [r0, #12]
    917a:	4293      	cmp	r3, r2
    917c:	d114      	bne.n	91a8 <ctrl_tx_enqueue+0x48>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    917e:	6902      	ldr	r2, [r0, #16]
    9180:	4293      	cmp	r3, r2
    9182:	d101      	bne.n	9188 <ctrl_tx_enqueue+0x28>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    9184:	681a      	ldr	r2, [r3, #0]
    9186:	6102      	str	r2, [r0, #16]
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
    9188:	68c2      	ldr	r2, [r0, #12]
    918a:	2a00      	cmp	r2, #0
    918c:	d103      	bne.n	9196 <ctrl_tx_enqueue+0x36>
			node_tx->next = conn->pkt_tx_head->next;
    918e:	681a      	ldr	r2, [r3, #0]
    9190:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    9192:	6019      	str	r1, [r3, #0]
    9194:	e00e      	b.n	91b4 <ctrl_tx_enqueue+0x54>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    9196:	6903      	ldr	r3, [r0, #16]
    9198:	6814      	ldr	r4, [r2, #0]
    919a:	429c      	cmp	r4, r3
    919c:	d001      	beq.n	91a2 <ctrl_tx_enqueue+0x42>
    919e:	0022      	movs	r2, r4
    91a0:	e7fa      	b.n	9198 <ctrl_tx_enqueue+0x38>
		p = p->next;
	}

	node_tx->next = p->next;
    91a2:	600b      	str	r3, [r1, #0]
	p->next = node_tx;
    91a4:	6011      	str	r1, [r2, #0]
    91a6:	e00f      	b.n	91c8 <ctrl_tx_enqueue+0x68>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
    91a8:	68c3      	ldr	r3, [r0, #12]
    91aa:	2b00      	cmp	r3, #0
    91ac:	d104      	bne.n	91b8 <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    91ae:	6883      	ldr	r3, [r0, #8]
    91b0:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    91b2:	6081      	str	r1, [r0, #8]
			conn->pkt_tx_ctrl = node_tx;
    91b4:	60c1      	str	r1, [r0, #12]
    91b6:	e007      	b.n	91c8 <ctrl_tx_enqueue+0x68>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    91b8:	6902      	ldr	r2, [r0, #16]
    91ba:	681c      	ldr	r4, [r3, #0]
    91bc:	4294      	cmp	r4, r2
    91be:	d001      	beq.n	91c4 <ctrl_tx_enqueue+0x64>
    91c0:	0023      	movs	r3, r4
    91c2:	e7fa      	b.n	91ba <ctrl_tx_enqueue+0x5a>
		p = p->next;
	}

	node_tx->next = p->next;
    91c4:	600a      	str	r2, [r1, #0]
	p->next = node_tx;
    91c6:	6019      	str	r1, [r3, #0]
			ctrl_tx_enqueue_tail(conn, node_tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
    91c8:	680b      	ldr	r3, [r1, #0]
    91ca:	2b00      	cmp	r3, #0
    91cc:	d100      	bne.n	91d0 <ctrl_tx_enqueue+0x70>
		conn->pkt_tx_last = node_tx;
    91ce:	6141      	str	r1, [r0, #20]
	}
}
    91d0:	bd10      	pop	{r4, pc}
	...

000091d4 <start_enc_rsp_send>:
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    91d4:	000b      	movs	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
    91d6:	2100      	movs	r1, #0
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    91d8:	b510      	push	{r4, lr}
    91da:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
    91dc:	428b      	cmp	r3, r1
    91de:	d10a      	bne.n	91f6 <start_enc_rsp_send+0x22>
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    91e0:	480c      	ldr	r0, [pc, #48]	; (9214 <start_enc_rsp_send+0x40>)
    91e2:	3059      	adds	r0, #89	; 0x59
    91e4:	30ff      	adds	r0, #255	; 0xff
    91e6:	f7fd faa3 	bl	6730 <mem_acquire>
    91ea:	0001      	movs	r1, r0
		LL_ASSERT(node_tx);

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
    91ec:	1d03      	adds	r3, r0, #4
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		LL_ASSERT(node_tx);
    91ee:	2800      	cmp	r0, #0
    91f0:	d101      	bne.n	91f6 <start_enc_rsp_send+0x22>
    91f2:	f7ff f9df 	bl	85b4 <chan_set.part.21>

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	}

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    91f6:	2003      	movs	r0, #3
    91f8:	781a      	ldrb	r2, [r3, #0]
    91fa:	4302      	orrs	r2, r0
    91fc:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    91fe:	2201      	movs	r2, #1
    9200:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
    9202:	3205      	adds	r2, #5
    9204:	70da      	strb	r2, [r3, #3]
		PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;

	if (node_tx) {
    9206:	2900      	cmp	r1, #0
    9208:	d002      	beq.n	9210 <start_enc_rsp_send+0x3c>
		ctrl_tx_enqueue(conn, node_tx);
    920a:	0020      	movs	r0, r4
    920c:	f7ff ffa8 	bl	9160 <ctrl_tx_enqueue>
	}
}
    9210:	bd10      	pop	{r4, pc}
    9212:	46c0      	nop			; (mov r8, r8)
    9214:	20000ea0 	.word	0x20000ea0

00009218 <pause_enc_rsp_send>:

static void pause_enc_rsp_send(struct connection *conn)
{
    9218:	b510      	push	{r4, lr}
    921a:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    921c:	480a      	ldr	r0, [pc, #40]	; (9248 <pause_enc_rsp_send+0x30>)
    921e:	3059      	adds	r0, #89	; 0x59
    9220:	30ff      	adds	r0, #255	; 0xff
    9222:	f7fd fa85 	bl	6730 <mem_acquire>
    9226:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    9228:	d101      	bne.n	922e <pause_enc_rsp_send+0x16>
    922a:	f7ff f9c3 	bl	85b4 <chan_set.part.21>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    922e:	2203      	movs	r2, #3
    9230:	7903      	ldrb	r3, [r0, #4]
    9232:	4313      	orrs	r3, r2
    9234:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    9236:	2301      	movs	r3, #1
    9238:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
    923a:	330a      	adds	r3, #10
    923c:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;

	ctrl_tx_enqueue(conn, node_tx);
    923e:	0020      	movs	r0, r4
    9240:	f7ff ff8e 	bl	9160 <ctrl_tx_enqueue>
}
    9244:	bd10      	pop	{r4, pc}
    9246:	46c0      	nop			; (mov r8, r8)
    9248:	20000ea0 	.word	0x20000ea0

0000924c <reject_ind_ext_send>:
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    924c:	b570      	push	{r4, r5, r6, lr}
    924e:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9250:	480b      	ldr	r0, [pc, #44]	; (9280 <reject_ind_ext_send+0x34>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    9252:	000e      	movs	r6, r1
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9254:	3059      	adds	r0, #89	; 0x59
    9256:	30ff      	adds	r0, #255	; 0xff
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    9258:	0015      	movs	r5, r2
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    925a:	f7fd fa69 	bl	6730 <mem_acquire>
    925e:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    9260:	d101      	bne.n	9266 <reject_ind_ext_send+0x1a>
    9262:	f7ff f9a7 	bl	85b4 <chan_set.part.21>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9266:	2203      	movs	r2, #3
    9268:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
    926a:	7206      	strb	r6, [r0, #8]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    926c:	4313      	orrs	r3, r2
    926e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    9270:	2311      	movs	r3, #17
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
    9272:	7245      	strb	r5, [r0, #9]
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    9274:	7142      	strb	r2, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    9276:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
		error_code;

	ctrl_tx_enqueue(conn, node_tx);
    9278:	0020      	movs	r0, r4
    927a:	f7ff ff71 	bl	9160 <ctrl_tx_enqueue>
}
    927e:	bd70      	pop	{r4, r5, r6, pc}
    9280:	20000ea0 	.word	0x20000ea0

00009284 <event_connection_prepare>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    9284:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16_t event_counter;
	u32_t err;

	LL_ASSERT(!_radio.ticker_id_prepare);
    9286:	4dd7      	ldr	r5, [pc, #860]	; (95e4 <event_connection_prepare+0x360>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    9288:	b093      	sub	sp, #76	; 0x4c
    928a:	900d      	str	r0, [sp, #52]	; 0x34
    928c:	9111      	str	r1, [sp, #68]	; 0x44
    928e:	001f      	movs	r7, r3
	u16_t event_counter;
	u32_t err;

	LL_ASSERT(!_radio.ticker_id_prepare);
    9290:	7b2b      	ldrb	r3, [r5, #12]
    9292:	2b00      	cmp	r3, #0
    9294:	d001      	beq.n	929a <event_connection_prepare+0x16>
    9296:	f000 ff67 	bl	a168 <event_connection_prepare+0xee4>

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    929a:	003b      	movs	r3, r7
    929c:	3344      	adds	r3, #68	; 0x44
    929e:	781b      	ldrb	r3, [r3, #0]
    92a0:	07db      	lsls	r3, r3, #31
    92a2:	d509      	bpl.n	92b8 <event_connection_prepare+0x34>
		conn->role.slave.window_widening_prepare_us +=
    92a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    92a6:	1c53      	adds	r3, r2, #1
    92a8:	434b      	muls	r3, r1
    92aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
    92ac:	185b      	adds	r3, r3, r1
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
		    conn->role.slave.window_widening_max_us) {
    92ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c

	LL_ASSERT(!_radio.ticker_id_prepare);

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
		conn->role.slave.window_widening_prepare_us +=
    92b0:	653b      	str	r3, [r7, #80]	; 0x50
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
    92b2:	428b      	cmp	r3, r1
    92b4:	d900      	bls.n	92b8 <event_connection_prepare+0x34>
		    conn->role.slave.window_widening_max_us) {
			conn->role.slave.window_widening_prepare_us =
    92b6:	6539      	str	r1, [r7, #80]	; 0x50
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    92b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    92ba:	18d2      	adds	r2, r2, r3

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    92bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    92be:	b292      	uxth	r2, r2
    92c0:	853a      	strh	r2, [r7, #40]	; 0x28

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    92c2:	18d2      	adds	r2, r2, r3
    92c4:	b293      	uxth	r3, r2
    92c6:	930a      	str	r3, [sp, #40]	; 0x28

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    92c8:	003b      	movs	r3, r7
    92ca:	3369      	adds	r3, #105	; 0x69
    92cc:	781a      	ldrb	r2, [r3, #0]
    92ce:	3b01      	subs	r3, #1
    92d0:	781b      	ldrb	r3, [r3, #0]
    92d2:	429a      	cmp	r2, r3
    92d4:	d000      	beq.n	92d8 <event_connection_prepare+0x54>
    92d6:	e0bd      	b.n	9454 <event_connection_prepare+0x1d0>
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
    92d8:	003e      	movs	r6, r7

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    92da:	003b      	movs	r3, r7
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
    92dc:	36bd      	adds	r6, #189	; 0xbd

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    92de:	33bc      	adds	r3, #188	; 0xbc
    92e0:	7832      	ldrb	r2, [r6, #0]
    92e2:	781b      	ldrb	r3, [r3, #0]
    92e4:	429a      	cmp	r2, r3
    92e6:	d101      	bne.n	92ec <event_connection_prepare+0x68>
    92e8:	f000 fe19 	bl	9f1e <event_connection_prepare+0xc9a>
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    92ec:	2200      	movs	r2, #0
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    92ee:	003c      	movs	r4, r7
	if ((conn->llcp_ack == conn->llcp_req) &&
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    92f0:	0010      	movs	r0, r2
    92f2:	2305      	movs	r3, #5
    92f4:	0011      	movs	r1, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    92f6:	34be      	adds	r4, #190	; 0xbe
	if ((conn->llcp_ack == conn->llcp_req) &&
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    92f8:	f7ff fbd4 	bl	8aa4 <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    92fc:	7820      	ldrb	r0, [r4, #0]
    92fe:	0780      	lsls	r0, r0, #30
    9300:	0f80      	lsrs	r0, r0, #30
    9302:	f7f6 ff39 	bl	178 <__gnu_thumb1_case_uqi>
    9306:	9e02      	.short	0x9e02
    9308:	409e      	.short	0x409e
	{
		struct pdu_data_llctrl_phy_req_rsp *pr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    930a:	0028      	movs	r0, r5
    930c:	3059      	adds	r0, #89	; 0x59
    930e:	30ff      	adds	r0, #255	; 0xff
    9310:	f7fd fa0e 	bl	6730 <mem_acquire>
    9314:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    9316:	d100      	bne.n	931a <event_connection_prepare+0x96>
    9318:	e093      	b.n	9442 <event_connection_prepare+0x1be>
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    931a:	2603      	movs	r6, #3
    931c:	2201      	movs	r2, #1
    931e:	7823      	ldrb	r3, [r4, #0]

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    9320:	2507      	movs	r5, #7
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		if (!node_tx) {
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    9322:	43b3      	bics	r3, r6
    9324:	4313      	orrs	r3, r2

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    9326:	003a      	movs	r2, r7
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		if (!node_tx) {
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    9328:	7023      	strb	r3, [r4, #0]

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    932a:	3232      	adds	r2, #50	; 0x32
    932c:	7810      	ldrb	r0, [r2, #0]
    932e:	089b      	lsrs	r3, r3, #2
    9330:	43a8      	bics	r0, r5
    9332:	402b      	ands	r3, r5
    9334:	4303      	orrs	r3, r0
    9336:	7013      	strb	r3, [r2, #0]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    9338:	7823      	ldrb	r3, [r4, #0]
    933a:	7850      	ldrb	r0, [r2, #1]
    933c:	095b      	lsrs	r3, r3, #5
    933e:	43a8      	bics	r0, r5
    9340:	402b      	ands	r3, r5
    9342:	4303      	orrs	r3, r0
    9344:	7053      	strb	r3, [r2, #1]
		conn->phy_pref_flags = conn->llcp_phy.flags;
    9346:	003b      	movs	r3, r7
    9348:	2001      	movs	r0, #1
    934a:	2540      	movs	r5, #64	; 0x40
    934c:	33bf      	adds	r3, #191	; 0xbf
    934e:	781b      	ldrb	r3, [r3, #0]
    9350:	07db      	lsls	r3, r3, #31
    9352:	0fdb      	lsrs	r3, r3, #31
    9354:	4018      	ands	r0, r3
    9356:	7813      	ldrb	r3, [r2, #0]
    9358:	0180      	lsls	r0, r0, #6
    935a:	43ab      	bics	r3, r5
    935c:	4318      	orrs	r0, r3
    935e:	7010      	strb	r0, [r2, #0]

		/* place the phy req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9360:	790b      	ldrb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    9362:	714e      	strb	r6, [r1, #5]
		conn->phy_pref_rx = conn->llcp_phy.rx;
		conn->phy_pref_flags = conn->llcp_phy.flags;

		/* place the phy req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9364:	4333      	orrs	r3, r6
    9366:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
				   sizeof(struct pdu_data_llctrl_phy_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    9368:	2316      	movs	r3, #22
    936a:	71cb      	strb	r3, [r1, #7]
			PDU_DATA_LLCTRL_TYPE_PHY_REQ;

		pr = (struct pdu_data_llctrl_phy_req_rsp *)
		     &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
    936c:	7823      	ldrb	r3, [r4, #0]
		pr->rx_phys = conn->llcp_phy.rx;

		ctrl_tx_enqueue(conn, node_tx);
    936e:	0038      	movs	r0, r7
		pdu_ctrl_tx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_PHY_REQ;

		pr = (struct pdu_data_llctrl_phy_req_rsp *)
		     &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
    9370:	06db      	lsls	r3, r3, #27
    9372:	0f5b      	lsrs	r3, r3, #29
    9374:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    9376:	7823      	ldrb	r3, [r4, #0]
    9378:	095b      	lsrs	r3, r3, #5
    937a:	724b      	strb	r3, [r1, #9]

		ctrl_tx_enqueue(conn, node_tx);
    937c:	f7ff fef0 	bl	9160 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    9380:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    9382:	877b      	strh	r3, [r7, #58]	; 0x3a
    9384:	e05d      	b.n	9442 <event_connection_prepare+0x1be>
	break;

	case LLCP_PHY_STATE_UPD:
	{
		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
    9386:	003b      	movs	r3, r7
    9388:	33bc      	adds	r3, #188	; 0xbc
    938a:	781b      	ldrb	r3, [r3, #0]
    938c:	7033      	strb	r3, [r6, #0]

		/* select only one tx phy, prefer 2M */
		if (conn->llcp_phy.tx & BIT(1)) {
    938e:	003b      	movs	r3, r7
    9390:	33be      	adds	r3, #190	; 0xbe
    9392:	781a      	ldrb	r2, [r3, #0]
    9394:	06d1      	lsls	r1, r2, #27
    9396:	0f49      	lsrs	r1, r1, #29
    9398:	0788      	lsls	r0, r1, #30
    939a:	d503      	bpl.n	93a4 <event_connection_prepare+0x120>
			conn->llcp_phy.tx = BIT(1);
    939c:	211c      	movs	r1, #28
    939e:	438a      	bics	r2, r1
    93a0:	3914      	subs	r1, #20
    93a2:	e00b      	b.n	93bc <event_connection_prepare+0x138>
    93a4:	2004      	movs	r0, #4
		} else if (conn->llcp_phy.tx & BIT(0)) {
    93a6:	07cc      	lsls	r4, r1, #31
    93a8:	d503      	bpl.n	93b2 <event_connection_prepare+0x12e>
			conn->llcp_phy.tx = BIT(0);
    93aa:	211c      	movs	r1, #28
    93ac:	438a      	bics	r2, r1
    93ae:	4302      	orrs	r2, r0
    93b0:	e005      	b.n	93be <event_connection_prepare+0x13a>
    93b2:	241c      	movs	r4, #28
		} else if (conn->llcp_phy.tx & BIT(2)) {
			conn->llcp_phy.tx = BIT(2);
    93b4:	43a2      	bics	r2, r4
		/* select only one tx phy, prefer 2M */
		if (conn->llcp_phy.tx & BIT(1)) {
			conn->llcp_phy.tx = BIT(1);
		} else if (conn->llcp_phy.tx & BIT(0)) {
			conn->llcp_phy.tx = BIT(0);
		} else if (conn->llcp_phy.tx & BIT(2)) {
    93b6:	4201      	tst	r1, r0
    93b8:	d001      	beq.n	93be <event_connection_prepare+0x13a>
			conn->llcp_phy.tx = BIT(2);
    93ba:	2110      	movs	r1, #16
    93bc:	430a      	orrs	r2, r1
		} else {
			conn->llcp_phy.tx = 0;
    93be:	701a      	strb	r2, [r3, #0]
		}

		/* select only one rx phy, prefer 2M */
		if (conn->llcp_phy.rx & BIT(1)) {
    93c0:	7818      	ldrb	r0, [r3, #0]
    93c2:	0941      	lsrs	r1, r0, #5
    93c4:	078a      	lsls	r2, r1, #30
    93c6:	d504      	bpl.n	93d2 <event_connection_prepare+0x14e>
			conn->llcp_phy.rx = BIT(1);
    93c8:	211f      	movs	r1, #31
    93ca:	0002      	movs	r2, r0
    93cc:	400a      	ands	r2, r1
    93ce:	3121      	adds	r1, #33	; 0x21
    93d0:	e00d      	b.n	93ee <event_connection_prepare+0x16a>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    93d2:	07ca      	lsls	r2, r1, #31
    93d4:	d504      	bpl.n	93e0 <event_connection_prepare+0x15c>
			conn->llcp_phy.rx = BIT(0);
    93d6:	211f      	movs	r1, #31
    93d8:	0002      	movs	r2, r0
    93da:	400a      	ands	r2, r1
    93dc:	3101      	adds	r1, #1
    93de:	e006      	b.n	93ee <event_connection_prepare+0x16a>
    93e0:	221f      	movs	r2, #31
		} else if (conn->llcp_phy.rx & BIT(2)) {
    93e2:	2404      	movs	r4, #4
			conn->llcp_phy.rx = BIT(2);
    93e4:	4002      	ands	r2, r0
		/* select only one rx phy, prefer 2M */
		if (conn->llcp_phy.rx & BIT(1)) {
			conn->llcp_phy.rx = BIT(1);
		} else if (conn->llcp_phy.rx & BIT(0)) {
			conn->llcp_phy.rx = BIT(0);
		} else if (conn->llcp_phy.rx & BIT(2)) {
    93e6:	4221      	tst	r1, r4
    93e8:	d002      	beq.n	93f0 <event_connection_prepare+0x16c>
			conn->llcp_phy.rx = BIT(2);
    93ea:	2180      	movs	r1, #128	; 0x80
    93ec:	4249      	negs	r1, r1
    93ee:	430a      	orrs	r2, r1
		} else {
			conn->llcp_phy.rx = 0;
		}

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    93f0:	0039      	movs	r1, r7
    93f2:	2407      	movs	r4, #7
    93f4:	251c      	movs	r5, #28
		} else if (conn->llcp_phy.rx & BIT(0)) {
			conn->llcp_phy.rx = BIT(0);
		} else if (conn->llcp_phy.rx & BIT(2)) {
			conn->llcp_phy.rx = BIT(2);
		} else {
			conn->llcp_phy.rx = 0;
    93f6:	701a      	strb	r2, [r3, #0]
		}

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    93f8:	781a      	ldrb	r2, [r3, #0]
    93fa:	316c      	adds	r1, #108	; 0x6c
    93fc:	7808      	ldrb	r0, [r1, #0]
    93fe:	0892      	lsrs	r2, r2, #2
    9400:	4022      	ands	r2, r4
    9402:	43a8      	bics	r0, r5
    9404:	0092      	lsls	r2, r2, #2
    9406:	4302      	orrs	r2, r0
    9408:	700a      	strb	r2, [r1, #0]
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    940a:	781b      	ldrb	r3, [r3, #0]
    940c:	7808      	ldrb	r0, [r1, #0]
    940e:	095b      	lsrs	r3, r3, #5
    9410:	015a      	lsls	r2, r3, #5
    9412:	231f      	movs	r3, #31
    9414:	4003      	ands	r3, r0
    9416:	4313      	orrs	r3, r2
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    9418:	003a      	movs	r2, r7

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
    941a:	b2d8      	uxtb	r0, r3
    941c:	2301      	movs	r3, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    941e:	32bf      	adds	r2, #191	; 0xbf
    9420:	7812      	ldrb	r2, [r2, #0]
    9422:	40da      	lsrs	r2, r3
    9424:	401a      	ands	r2, r3
    9426:	409a      	lsls	r2, r3
    9428:	4303      	orrs	r3, r0
    942a:	2002      	movs	r0, #2
    942c:	4383      	bics	r3, r0
    942e:	4313      	orrs	r3, r2
    9430:	700b      	strb	r3, [r1, #0]

		conn->llcp_type = LLCP_PHY_UPD;
    9432:	003b      	movs	r3, r7
		conn->llcp_ack--;
    9434:	003a      	movs	r2, r7
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;

		conn->llcp_type = LLCP_PHY_UPD;
    9436:	336a      	adds	r3, #106	; 0x6a
    9438:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack--;
    943a:	3269      	adds	r2, #105	; 0x69
    943c:	7813      	ldrb	r3, [r2, #0]
    943e:	3b01      	subs	r3, #1
    9440:	7013      	strb	r3, [r2, #0]
		event_phy_req_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* check if procedure is requested */
	if (conn->llcp_ack != conn->llcp_req) {
    9442:	003b      	movs	r3, r7
    9444:	3369      	adds	r3, #105	; 0x69
    9446:	781a      	ldrb	r2, [r3, #0]
    9448:	3b01      	subs	r3, #1
    944a:	781b      	ldrb	r3, [r3, #0]
    944c:	429a      	cmp	r2, r3
    944e:	d101      	bne.n	9454 <event_connection_prepare+0x1d0>
    9450:	f000 fd65 	bl	9f1e <event_connection_prepare+0xc9a>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    9454:	2200      	movs	r2, #0
    9456:	2305      	movs	r3, #5
    9458:	0010      	movs	r0, r2
    945a:	0011      	movs	r1, r2
    945c:	f7ff fb22 	bl	8aa4 <event_stop>

		switch (conn->llcp_type) {
    9460:	003b      	movs	r3, r7
    9462:	336a      	adds	r3, #106	; 0x6a
    9464:	7818      	ldrb	r0, [r3, #0]
    9466:	3801      	subs	r0, #1
    9468:	2806      	cmp	r0, #6
    946a:	d901      	bls.n	9470 <event_connection_prepare+0x1ec>
    946c:	f000 fe7c 	bl	a168 <event_connection_prepare+0xee4>
    9470:	f7f6 fe96 	bl	1a0 <__gnu_thumb1_case_uhi>
    9474:	02da0007 	.word	0x02da0007
    9478:	04280323 	.word	0x04280323
    947c:	04a40456 	.word	0x04a40456
    9480:	04be      	.short	0x04be
					   u32_t ticks_at_expire)
{
	struct connection *conn_upd;
	u16_t instant_latency;

	conn_upd = _radio.conn_upd;
    9482:	23c2      	movs	r3, #194	; 0xc2
    9484:	4857      	ldr	r0, [pc, #348]	; (95e4 <event_connection_prepare+0x360>)
    9486:	005b      	lsls	r3, r3, #1
    9488:	58c2      	ldr	r2, [r0, r3]

	/* set mutex */
	if (!conn_upd) {
    948a:	2a00      	cmp	r2, #0
    948c:	d100      	bne.n	9490 <event_connection_prepare+0x20c>
		_radio.conn_upd = conn;
    948e:	50c7      	str	r7, [r0, r3]
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
		 0xffff);
	if (conn->llcp.connection_update.state) {
    9490:	003d      	movs	r5, r7
    9492:	2307      	movs	r3, #7
    9494:	3595      	adds	r5, #149	; 0x95
    9496:	7829      	ldrb	r1, [r5, #0]
    9498:	400b      	ands	r3, r1
    949a:	d100      	bne.n	949e <event_connection_prepare+0x21a>
    949c:	e0fc      	b.n	9698 <event_connection_prepare+0x414>
		if (((conn_upd == 0) || (conn_upd == conn)) &&
    949e:	2a00      	cmp	r2, #0
    94a0:	d003      	beq.n	94aa <event_connection_prepare+0x226>
    94a2:	4297      	cmp	r7, r2
    94a4:	d001      	beq.n	94aa <event_connection_prepare+0x226>
    94a6:	f000 fd3a 	bl	9f1e <event_connection_prepare+0xc9a>
    94aa:	3b04      	subs	r3, #4
    94ac:	2b01      	cmp	r3, #1
    94ae:	d801      	bhi.n	94b4 <event_connection_prepare+0x230>
    94b0:	f000 fd35 	bl	9f1e <event_connection_prepare+0xc9a>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			struct radio_pdu_node_tx *node_tx;
			struct pdu_data *pdu_ctrl_tx;
			u8_t state;

			node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    94b4:	3059      	adds	r0, #89	; 0x59
    94b6:	30ff      	adds	r0, #255	; 0xff
    94b8:	f7fd f93a 	bl	6730 <mem_acquire>
    94bc:	1e04      	subs	r4, r0, #0
			if (!node_tx) {
    94be:	d101      	bne.n	94c4 <event_connection_prepare+0x240>
    94c0:	f000 fd2d 	bl	9f1e <event_connection_prepare+0xc9a>
			pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			state = conn->llcp.connection_update.state;
    94c4:	782b      	ldrb	r3, [r5, #0]
    94c6:	075b      	lsls	r3, r3, #29
    94c8:	0f5b      	lsrs	r3, r3, #29
			if ((state == LLCP_CONN_STATE_RSP) &&
    94ca:	2b03      	cmp	r3, #3
    94cc:	d105      	bne.n	94da <event_connection_prepare+0x256>
			    (conn->role.master.role == 0)) {
    94ce:	003b      	movs	r3, r7
    94d0:	3344      	adds	r3, #68	; 0x44

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			state = conn->llcp.connection_update.state;
			if ((state == LLCP_CONN_STATE_RSP) &&
    94d2:	781b      	ldrb	r3, [r3, #0]
    94d4:	07db      	lsls	r3, r3, #31
    94d6:	d509      	bpl.n	94ec <event_connection_prepare+0x268>
    94d8:	e088      	b.n	95ec <event_connection_prepare+0x368>
				fp_mayfly_select_or_use =
					mayfly_sched_win_offset_select;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			}

			switch (state) {
    94da:	2b02      	cmp	r3, #2
    94dc:	d043      	beq.n	9566 <event_connection_prepare+0x2e2>
    94de:	2b03      	cmp	r3, #3
    94e0:	d100      	bne.n	94e4 <event_connection_prepare+0x260>
    94e2:	e083      	b.n	95ec <event_connection_prepare+0x368>
    94e4:	2b01      	cmp	r3, #1
    94e6:	d001      	beq.n	94ec <event_connection_prepare+0x268>
    94e8:	f000 fe3e 	bl	a168 <event_connection_prepare+0xee4>
			case LLCP_CONN_STATE_INITIATE:
				if (conn->role.master.role == 0) {
    94ec:	003b      	movs	r3, r7
    94ee:	3344      	adds	r3, #68	; 0x44
    94f0:	781a      	ldrb	r2, [r3, #0]
    94f2:	2301      	movs	r3, #1
    94f4:	401a      	ands	r2, r3
    94f6:	d136      	bne.n	9566 <event_connection_prepare+0x2e2>
			  u32_t ticks_at_expire,
			  struct mayfly *mayfly_sched_offset,
			  void (*fp_mayfly_select_or_use)(void *))
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    94f8:	2107      	movs	r1, #7
    94fa:	782b      	ldrb	r3, [r5, #0]
    94fc:	438b      	bics	r3, r1
    94fe:	702b      	strb	r3, [r5, #0]

	/* set instant */
	conn->llcp.connection_update.instant =
    9500:	003d      	movs	r5, r7
    9502:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9504:	990a      	ldr	r1, [sp, #40]	; 0x28
    9506:	3306      	adds	r3, #6
    9508:	18cb      	adds	r3, r1, r3
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    950a:	2103      	movs	r1, #3
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;

	/* set instant */
	conn->llcp.connection_update.instant =
    950c:	3574      	adds	r5, #116	; 0x74
    950e:	802b      	strh	r3, [r5, #0]
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9510:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    9512:	71e2      	strb	r2, [r4, #7]
	/* set instant */
	conn->llcp.connection_update.instant =
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9514:	430b      	orrs	r3, r1
    9516:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    9518:	230c      	movs	r3, #12
    951a:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
    951c:	003b      	movs	r3, r7
    951e:	3394      	adds	r3, #148	; 0x94
    9520:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    9522:	4931      	ldr	r1, [pc, #196]	; (95e8 <event_connection_prepare+0x364>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
    9524:	7223      	strb	r3, [r4, #8]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    9526:	003b      	movs	r3, r7
    9528:	338c      	adds	r3, #140	; 0x8c
    952a:	6818      	ldr	r0, [r3, #0]
    952c:	f7f6 fe4e 	bl	1cc <__aeabi_uidiv>
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
    9530:	003b      	movs	r3, r7
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    9532:	b280      	uxth	r0, r0
    9534:	7260      	strb	r0, [r4, #9]
    9536:	0a00      	lsrs	r0, r0, #8
    9538:	72a0      	strb	r0, [r4, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
    953a:	336c      	adds	r3, #108	; 0x6c
    953c:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
    953e:	72e3      	strb	r3, [r4, #11]
    9540:	0a1b      	lsrs	r3, r3, #8
    9542:	7323      	strb	r3, [r4, #12]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
    9544:	003b      	movs	r3, r7
    9546:	336e      	adds	r3, #110	; 0x6e
    9548:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
    954a:	7363      	strb	r3, [r4, #13]
    954c:	0a1b      	lsrs	r3, r3, #8
    954e:	73a3      	strb	r3, [r4, #14]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
		conn->llcp.connection_update.timeout;
    9550:	003b      	movs	r3, r7
    9552:	3370      	adds	r3, #112	; 0x70
    9554:	881b      	ldrh	r3, [r3, #0]
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
    9556:	73e3      	strb	r3, [r4, #15]
    9558:	0a1b      	lsrs	r3, r3, #8
    955a:	7423      	strb	r3, [r4, #16]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
		conn->llcp.connection_update.instant;
    955c:	882b      	ldrh	r3, [r5, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
    955e:	7463      	strb	r3, [r4, #17]
    9560:	0a1b      	lsrs	r3, r3, #8
    9562:	74a3      	strb	r3, [r4, #18]
    9564:	e286      	b.n	9a74 <event_connection_prepare+0x7f0>
					    struct pdu_data *pdu_ctrl_tx,
					    u32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    9566:	2207      	movs	r2, #7
    9568:	782b      	ldrb	r3, [r5, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    956a:	0039      	movs	r1, r7
					    struct pdu_data *pdu_ctrl_tx,
					    u32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    956c:	4393      	bics	r3, r2
    956e:	3a02      	subs	r2, #2
    9570:	4313      	orrs	r3, r2
    9572:	702b      	strb	r3, [r5, #0]

	/* place the conn param req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9574:	7923      	ldrb	r3, [r4, #4]
    9576:	3a02      	subs	r2, #2
    9578:	4313      	orrs	r3, r2
    957a:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    957c:	2318      	movs	r3, #24
    957e:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
    9580:	3b09      	subs	r3, #9
    9582:	71e3      	strb	r3, [r4, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    9584:	316c      	adds	r1, #108	; 0x6c
    9586:	880b      	ldrh	r3, [r1, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    9588:	2200      	movs	r2, #0
    958a:	7223      	strb	r3, [r4, #8]
    958c:	0a1b      	lsrs	r3, r3, #8
    958e:	7263      	strb	r3, [r4, #9]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
    9590:	880b      	ldrh	r3, [r1, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    9592:	2128      	movs	r1, #40	; 0x28
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    9594:	72a3      	strb	r3, [r4, #10]
    9596:	0a1b      	lsrs	r3, r3, #8
    9598:	72e3      	strb	r3, [r4, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
    959a:	003b      	movs	r3, r7
    959c:	336e      	adds	r3, #110	; 0x6e
    959e:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    95a0:	7323      	strb	r3, [r4, #12]
    95a2:	0a1b      	lsrs	r3, r3, #8
    95a4:	7363      	strb	r3, [r4, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
    95a6:	003b      	movs	r3, r7
    95a8:	3370      	adds	r3, #112	; 0x70
    95aa:	881b      	ldrh	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
    95ac:	7422      	strb	r2, [r4, #16]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    95ae:	73a3      	strb	r3, [r4, #14]
    95b0:	0a1b      	lsrs	r3, r3, #8
    95b2:	73e3      	strb	r3, [r4, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    95b4:	466b      	mov	r3, sp
    95b6:	185b      	adds	r3, r3, r1
    95b8:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    95ba:	74e2      	strb	r2, [r4, #19]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    95bc:	7463      	strb	r3, [r4, #17]
    95be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    95c0:	7522      	strb	r2, [r4, #20]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    95c2:	0a1b      	lsrs	r3, r3, #8
    95c4:	74a3      	strb	r3, [r4, #18]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 = 0xffff;
    95c6:	2301      	movs	r3, #1
    95c8:	425b      	negs	r3, r3
    95ca:	7563      	strb	r3, [r4, #21]
    95cc:	75a3      	strb	r3, [r4, #22]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 = 0xffff;
    95ce:	75e3      	strb	r3, [r4, #23]
    95d0:	7623      	strb	r3, [r4, #24]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 = 0xffff;
    95d2:	7663      	strb	r3, [r4, #25]
    95d4:	76a3      	strb	r3, [r4, #26]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 = 0xffff;
    95d6:	76e3      	strb	r3, [r4, #27]
    95d8:	7723      	strb	r3, [r4, #28]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 = 0xffff;
    95da:	7763      	strb	r3, [r4, #29]
    95dc:	77a3      	strb	r3, [r4, #30]

	/* Start Procedure Timeout */
	conn->procedure_expire = conn->procedure_reload;
    95de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    95e0:	877b      	strh	r3, [r7, #58]	; 0x3a
    95e2:	e247      	b.n	9a74 <event_connection_prepare+0x7f0>
    95e4:	20000ea0 	.word	0x20000ea0
    95e8:	000004e2 	.word	0x000004e2

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    95ec:	003b      	movs	r3, r7
    95ee:	3368      	adds	r3, #104	; 0x68
    95f0:	781a      	ldrb	r2, [r3, #0]

	/* reset mutex */
	_radio.conn_upd = NULL;
    95f2:	2100      	movs	r1, #0

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    95f4:	705a      	strb	r2, [r3, #1]

	/* reset mutex */
	_radio.conn_upd = NULL;
    95f6:	23c2      	movs	r3, #194	; 0xc2
    95f8:	4ab1      	ldr	r2, [pc, #708]	; (98c0 <event_connection_prepare+0x63c>)
    95fa:	005b      	lsls	r3, r3, #1
    95fc:	50d1      	str	r1, [r2, r3]

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    95fe:	2203      	movs	r2, #3
    9600:	7923      	ldrb	r3, [r4, #4]
    9602:	4313      	orrs	r3, r2
    9604:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    9606:	2318      	movs	r3, #24
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    9608:	003a      	movs	r2, r7

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    960a:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    960c:	3b08      	subs	r3, #8
    960e:	71e3      	strb	r3, [r4, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    9610:	326c      	adds	r2, #108	; 0x6c
    9612:	8813      	ldrh	r3, [r2, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    9614:	7223      	strb	r3, [r4, #8]
    9616:	0a1b      	lsrs	r3, r3, #8
    9618:	7263      	strb	r3, [r4, #9]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
    961a:	8813      	ldrh	r3, [r2, #0]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    961c:	72a3      	strb	r3, [r4, #10]
    961e:	0a1b      	lsrs	r3, r3, #8
    9620:	72e3      	strb	r3, [r4, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
    9622:	003b      	movs	r3, r7
    9624:	336e      	adds	r3, #110	; 0x6e
    9626:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    9628:	7323      	strb	r3, [r4, #12]
    962a:	0a1b      	lsrs	r3, r3, #8
    962c:	7363      	strb	r3, [r4, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
    962e:	003b      	movs	r3, r7
    9630:	3370      	adds	r3, #112	; 0x70
    9632:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    9634:	73a3      	strb	r3, [r4, #14]
    9636:	0a1b      	lsrs	r3, r3, #8
    9638:	73e3      	strb	r3, [r4, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
    963a:	003b      	movs	r3, r7
    963c:	3372      	adds	r3, #114	; 0x72
    963e:	781b      	ldrb	r3, [r3, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
    9640:	7423      	strb	r3, [r4, #16]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
    9642:	003b      	movs	r3, r7
    9644:	3374      	adds	r3, #116	; 0x74
    9646:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
    9648:	7463      	strb	r3, [r4, #17]
    964a:	0a1b      	lsrs	r3, r3, #8
    964c:	74a3      	strb	r3, [r4, #18]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
    964e:	003b      	movs	r3, r7
    9650:	3376      	adds	r3, #118	; 0x76
    9652:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
    9654:	74e3      	strb	r3, [r4, #19]
    9656:	0a1b      	lsrs	r3, r3, #8
    9658:	7523      	strb	r3, [r4, #20]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
    965a:	003b      	movs	r3, r7
    965c:	3378      	adds	r3, #120	; 0x78
    965e:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
    9660:	7563      	strb	r3, [r4, #21]
    9662:	0a1b      	lsrs	r3, r3, #8
    9664:	75a3      	strb	r3, [r4, #22]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
    9666:	003b      	movs	r3, r7
    9668:	337a      	adds	r3, #122	; 0x7a
    966a:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
    966c:	75e3      	strb	r3, [r4, #23]
    966e:	0a1b      	lsrs	r3, r3, #8
    9670:	7623      	strb	r3, [r4, #24]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
    9672:	003b      	movs	r3, r7
    9674:	337c      	adds	r3, #124	; 0x7c
    9676:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
    9678:	7663      	strb	r3, [r4, #25]
    967a:	0a1b      	lsrs	r3, r3, #8
    967c:	76a3      	strb	r3, [r4, #26]
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
		conn->llcp.connection_update.offset4;
    967e:	003b      	movs	r3, r7
    9680:	337e      	adds	r3, #126	; 0x7e
    9682:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
    9684:	76e3      	strb	r3, [r4, #27]
    9686:	0a1b      	lsrs	r3, r3, #8
    9688:	7723      	strb	r3, [r4, #28]
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
		conn->llcp.connection_update.offset5;
    968a:	003b      	movs	r3, r7
    968c:	3380      	adds	r3, #128	; 0x80
    968e:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
    9690:	7763      	strb	r3, [r4, #29]
    9692:	0a1b      	lsrs	r3, r3, #8
    9694:	77a3      	strb	r3, [r4, #30]
    9696:	e1ed      	b.n	9a74 <event_connection_prepare+0x7f0>
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
    9698:	003a      	movs	r2, r7
    969a:	3274      	adds	r2, #116	; 0x74
	/* set mutex */
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
    969c:	8812      	ldrh	r2, [r2, #0]
    969e:	990a      	ldr	r1, [sp, #40]	; 0x28
    96a0:	1a8a      	subs	r2, r1, r2
				break;
			}

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (instant_latency <= 0x7FFF) {
    96a2:	b295      	uxth	r5, r2
    96a4:	0412      	lsls	r2, r2, #16
    96a6:	d501      	bpl.n	96ac <event_connection_prepare+0x428>
    96a8:	f000 fc39 	bl	9f1e <event_connection_prepare+0xc9a>
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    96ac:	003a      	movs	r2, r7
    96ae:	3268      	adds	r2, #104	; 0x68
    96b0:	7811      	ldrb	r1, [r2, #0]

		/* Reset ticker_id_prepare as role is not continued further
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;
    96b2:	7303      	strb	r3, [r0, #12]
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    96b4:	7051      	strb	r1, [r2, #1]
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;

		/* reset mutex */
		if (_radio.conn_upd == conn) {
    96b6:	22c2      	movs	r2, #194	; 0xc2
    96b8:	0052      	lsls	r2, r2, #1
    96ba:	5881      	ldr	r1, [r0, r2]
    96bc:	428f      	cmp	r7, r1
    96be:	d100      	bne.n	96c2 <event_connection_prepare+0x43e>
			_radio.conn_upd = NULL;
    96c0:	5083      	str	r3, [r0, r2]
    96c2:	003e      	movs	r6, r7
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
    96c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    96c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    96c8:	366c      	adds	r6, #108	; 0x6c
    96ca:	4293      	cmp	r3, r2
    96cc:	d10d      	bne.n	96ea <event_connection_prepare+0x466>
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
		    (conn->llcp.connection_update.timeout !=
    96ce:	003b      	movs	r3, r7
    96d0:	3370      	adds	r3, #112	; 0x70
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
    96d2:	881c      	ldrh	r4, [r3, #0]
    96d4:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
    96d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    96d8:	21fa      	movs	r1, #250	; 0xfa
    96da:	4358      	muls	r0, r3
    96dc:	237d      	movs	r3, #125	; 0x7d
    96de:	0089      	lsls	r1, r1, #2
    96e0:	4358      	muls	r0, r3
    96e2:	f7f6 fdfd 	bl	2e0 <__aeabi_idiv>
    96e6:	4284      	cmp	r4, r0
    96e8:	d01e      	beq.n	9728 <event_connection_prepare+0x4a4>
		    (conn->llcp.connection_update.timeout !=
		     (conn->conn_interval * conn->supervision_reload * 125 / 1000))) {
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    96ea:	2002      	movs	r0, #2
    96ec:	f7fe fc14 	bl	7f18 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    96f0:	2800      	cmp	r0, #0
    96f2:	d101      	bne.n	96f8 <event_connection_prepare+0x474>
    96f4:	f000 fd38 	bl	a168 <event_connection_prepare+0xee4>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    96f8:	8c3b      	ldrh	r3, [r7, #32]
    96fa:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    96fc:	2308      	movs	r3, #8
    96fe:	7103      	strb	r3, [r0, #4]
			pdu_data_rx =
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
    9700:	2300      	movs	r3, #0
    9702:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
    9704:	8833      	ldrh	r3, [r6, #0]
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
    9706:	7303      	strb	r3, [r0, #12]
    9708:	0a1b      	lsrs	r3, r3, #8
    970a:	7343      	strb	r3, [r0, #13]
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
				conn->llcp.connection_update.latency;
    970c:	003b      	movs	r3, r7
    970e:	336e      	adds	r3, #110	; 0x6e
    9710:	881b      	ldrh	r3, [r3, #0]
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
    9712:	7383      	strb	r3, [r0, #14]
    9714:	0a1b      	lsrs	r3, r3, #8
    9716:	73c3      	strb	r3, [r0, #15]
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
				conn->llcp.connection_update.timeout;
    9718:	003b      	movs	r3, r7
    971a:	3370      	adds	r3, #112	; 0x70
    971c:	881b      	ldrh	r3, [r3, #0]
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
    971e:	7403      	strb	r3, [r0, #16]
    9720:	0a1b      	lsrs	r3, r3, #8
    9722:	7443      	strb	r3, [r0, #17]
				conn->llcp.connection_update.timeout;

			/* enqueue connection update complete structure
			 * into queue.
			 */
			packet_rx_enqueue();
    9724:	f7fe ff90 	bl	8648 <packet_rx_enqueue>
		}

		/* restore to normal prepare */
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    9728:	683b      	ldr	r3, [r7, #0]
    972a:	2b00      	cmp	r3, #0
    972c:	da0b      	bge.n	9746 <event_connection_prepare+0x4c2>
			u32_t ticks_prepare_to_start =
    972e:	6879      	ldr	r1, [r7, #4]
    9730:	68ba      	ldr	r2, [r7, #8]
    9732:	428a      	cmp	r2, r1
    9734:	d200      	bcs.n	9738 <event_connection_prepare+0x4b4>
    9736:	000a      	movs	r2, r1
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
    9738:	005b      	lsls	r3, r3, #1
    973a:	085b      	lsrs	r3, r3, #1
    973c:	603b      	str	r3, [r7, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    973e:	1ad3      	subs	r3, r2, r3
    9740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9742:	18d3      	adds	r3, r2, r3
    9744:	930d      	str	r3, [sp, #52]	; 0x34
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    9746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    9748:	001c      	movs	r4, r3
    974a:	436c      	muls	r4, r5
    974c:	930a      	str	r3, [sp, #40]	; 0x28
		latency = conn_interval_old /
			conn->llcp.connection_update.interval;
    974e:	8836      	ldrh	r6, [r6, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    9750:	b2a4      	uxth	r4, r4
		latency = conn_interval_old /
    9752:	0031      	movs	r1, r6
    9754:	0020      	movs	r0, r4
    9756:	f7f6 fd39 	bl	1cc <__aeabi_uidiv>
    975a:	b283      	uxth	r3, r0
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
    975c:	0018      	movs	r0, r3
    975e:	4370      	muls	r0, r6
    9760:	b280      	uxth	r0, r0
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
		latency = conn_interval_old /
    9762:	930e      	str	r3, [sp, #56]	; 0x38
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
			conn->llcp.connection_update.interval;
		if (conn_interval_new > conn_interval_old) {
    9764:	4284      	cmp	r4, r0
    9766:	d20f      	bcs.n	9788 <event_connection_prepare+0x504>
			ticks_at_expire +=
    9768:	2324      	movs	r3, #36	; 0x24
    976a:	1b00      	subs	r0, r0, r4
    976c:	4a55      	ldr	r2, [pc, #340]	; (98c4 <event_connection_prepare+0x640>)
    976e:	33ff      	adds	r3, #255	; 0xff
    9770:	17c1      	asrs	r1, r0, #31
    9772:	f7f6 fec1 	bl	4f8 <__aeabi_lmul>
    9776:	2307      	movs	r3, #7
    9778:	4a53      	ldr	r2, [pc, #332]	; (98c8 <event_connection_prepare+0x644>)
    977a:	f7f6 fe9d 	bl	4b8 <__aeabi_uldivmod>
    977e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9780:	0200      	lsls	r0, r0, #8
    9782:	0a00      	lsrs	r0, r0, #8
    9784:	18c3      	adds	r3, r0, r3
    9786:	e00e      	b.n	97a6 <event_connection_prepare+0x522>
				TICKER_US_TO_TICKS((conn_interval_new -
						    conn_interval_old) * 1250);
		} else {
			ticks_at_expire -=
    9788:	2324      	movs	r3, #36	; 0x24
    978a:	1a20      	subs	r0, r4, r0
    978c:	4a4d      	ldr	r2, [pc, #308]	; (98c4 <event_connection_prepare+0x640>)
    978e:	33ff      	adds	r3, #255	; 0xff
    9790:	17c1      	asrs	r1, r0, #31
    9792:	f7f6 feb1 	bl	4f8 <__aeabi_lmul>
    9796:	2307      	movs	r3, #7
    9798:	4a4b      	ldr	r2, [pc, #300]	; (98c8 <event_connection_prepare+0x644>)
    979a:	f7f6 fe8d 	bl	4b8 <__aeabi_uldivmod>
    979e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    97a0:	0200      	lsls	r0, r0, #8
    97a2:	0a00      	lsrs	r0, r0, #8
    97a4:	1a1b      	subs	r3, r3, r0
    97a6:	930c      	str	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS((conn_interval_old -
						    conn_interval_new) * 1250);
		}
		conn->latency_prepare -= (instant_latency - latency);
    97a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    97aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    97ac:	1b5b      	subs	r3, r3, r5
    97ae:	18d3      	adds	r3, r2, r3
    97b0:	853b      	strh	r3, [r7, #40]	; 0x28

		/* calculate the offset, window widening and interval */
		ticks_slot_offset =
    97b2:	687a      	ldr	r2, [r7, #4]
    97b4:	683b      	ldr	r3, [r7, #0]
    97b6:	920d      	str	r2, [sp, #52]	; 0x34
    97b8:	429a      	cmp	r2, r3
    97ba:	d200      	bcs.n	97be <event_connection_prepare+0x53a>
    97bc:	930d      	str	r3, [sp, #52]	; 0x34
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    97be:	003c      	movs	r4, r7
    97c0:	2301      	movs	r3, #1
    97c2:	3444      	adds	r4, #68	; 0x44
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    97c4:	4841      	ldr	r0, [pc, #260]	; (98cc <event_connection_prepare+0x648>)
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    97c6:	7821      	ldrb	r1, [r4, #0]
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    97c8:	4346      	muls	r6, r0
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    97ca:	4019      	ands	r1, r3
    97cc:	900f      	str	r0, [sp, #60]	; 0x3c
    97ce:	d100      	bne.n	97d2 <event_connection_prepare+0x54e>
    97d0:	e088      	b.n	98e4 <event_connection_prepare+0x660>
			conn->role.slave.window_widening_prepare_us -=
    97d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    97d4:	4a3e      	ldr	r2, [pc, #248]	; (98d0 <event_connection_prepare+0x64c>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    97d6:	435d      	muls	r5, r3
    97d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    97da:	1b5d      	subs	r5, r3, r5
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    97dc:	4b38      	ldr	r3, [pc, #224]	; (98c0 <event_connection_prepare+0x63c>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    97de:	653d      	str	r5, [r7, #80]	; 0x50
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    97e0:	33ff      	adds	r3, #255	; 0xff
    97e2:	7f5b      	ldrb	r3, [r3, #29]
				   gc_lookup_ppm[conn->role.slave.sca]) *
    97e4:	7821      	ldrb	r1, [r4, #0]
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    97e6:	005b      	lsls	r3, r3, #1
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    97e8:	5a98      	ldrh	r0, [r3, r2]
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
    97ea:	230e      	movs	r3, #14
    97ec:	400b      	ands	r3, r1
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    97ee:	5a9b      	ldrh	r3, [r3, r2]
    97f0:	4938      	ldr	r1, [pc, #224]	; (98d4 <event_connection_prepare+0x650>)
    97f2:	18c0      	adds	r0, r0, r3
    97f4:	4370      	muls	r0, r6
    97f6:	4b38      	ldr	r3, [pc, #224]	; (98d8 <event_connection_prepare+0x654>)
    97f8:	18c0      	adds	r0, r0, r3
    97fa:	f7f6 fce7 	bl	1cc <__aeabi_uidiv>
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
    97fe:	003b      	movs	r3, r7
			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
    9800:	0872      	lsrs	r2, r6, #1
    9802:	3a96      	subs	r2, #150	; 0x96
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
    9804:	64b8      	str	r0, [r7, #72]	; 0x48
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
    9806:	64fa      	str	r2, [r7, #76]	; 0x4c
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
    9808:	3394      	adds	r3, #148	; 0x94
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    980a:	781b      	ldrb	r3, [r3, #0]
    980c:	990f      	ldr	r1, [sp, #60]	; 0x3c
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    980e:	0004      	movs	r4, r0
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    9810:	434b      	muls	r3, r1
    9812:	65bb      	str	r3, [r7, #88]	; 0x58
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    9814:	2300      	movs	r3, #0

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    9816:	980e      	ldr	r0, [sp, #56]	; 0x38
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    9818:	667b      	str	r3, [r7, #100]	; 0x64

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    981a:	4360      	muls	r0, r4
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    981c:	182d      	adds	r5, r5, r0
				conn->role.slave.window_widening_periodic_us *
				latency;
			if (conn->role.slave.window_widening_prepare_us >
    981e:	42aa      	cmp	r2, r5
    9820:	d301      	bcc.n	9826 <event_connection_prepare+0x5a2>
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    9822:	653d      	str	r5, [r7, #80]	; 0x50
    9824:	e000      	b.n	9828 <event_connection_prepare+0x5a4>
				conn->role.slave.window_widening_periodic_us *
				latency;
			if (conn->role.slave.window_widening_prepare_us >
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
    9826:	653a      	str	r2, [r7, #80]	; 0x50
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    9828:	4a2c      	ldr	r2, [pc, #176]	; (98dc <event_connection_prepare+0x658>)
    982a:	2300      	movs	r3, #0
    982c:	2100      	movs	r1, #0
    982e:	f7f6 fe63 	bl	4f8 <__aeabi_lmul>
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    9832:	003d      	movs	r5, r7
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    9834:	4a24      	ldr	r2, [pc, #144]	; (98c8 <event_connection_prepare+0x644>)
    9836:	2307      	movs	r3, #7
    9838:	f7f6 fe3e 	bl	4b8 <__aeabi_uldivmod>
    983c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    983e:	358c      	adds	r5, #140	; 0x8c
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    9840:	1a1b      	subs	r3, r3, r0
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    9842:	4922      	ldr	r1, [pc, #136]	; (98cc <event_connection_prepare+0x648>)
    9844:	6828      	ldr	r0, [r5, #0]
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    9846:	930c      	str	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    9848:	f7f6 fcc0 	bl	1cc <__aeabi_uidiv>
    984c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    984e:	4a23      	ldr	r2, [pc, #140]	; (98dc <event_connection_prepare+0x658>)
    9850:	4343      	muls	r3, r0
    9852:	2100      	movs	r1, #0
    9854:	0018      	movs	r0, r3
    9856:	2300      	movs	r3, #0
    9858:	f7f6 fe4e 	bl	4f8 <__aeabi_lmul>
    985c:	4a1a      	ldr	r2, [pc, #104]	; (98c8 <event_connection_prepare+0x644>)
    985e:	2307      	movs	r3, #7
    9860:	f7f6 fe2a 	bl	4b8 <__aeabi_uldivmod>
    9864:	0200      	lsls	r0, r0, #8
    9866:	0a03      	lsrs	r3, r0, #8
    9868:	930e      	str	r3, [sp, #56]	; 0x38
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    986a:	1b33      	subs	r3, r6, r4
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    986c:	003c      	movs	r4, r7
    986e:	2218      	movs	r2, #24
    9870:	3495      	adds	r4, #149	; 0x95
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    9872:	930f      	str	r3, [sp, #60]	; 0x3c
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    9874:	7823      	ldrb	r3, [r4, #0]
    9876:	4013      	ands	r3, r2
    9878:	2b10      	cmp	r3, #16
    987a:	d142      	bne.n	9902 <event_connection_prepare+0x67e>
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
}

static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
    987c:	003b      	movs	r3, r7
    987e:	003a      	movs	r2, r7
    9880:	3368      	adds	r3, #104	; 0x68
    9882:	3269      	adds	r2, #105	; 0x69
    9884:	781b      	ldrb	r3, [r3, #0]
    9886:	9210      	str	r2, [sp, #64]	; 0x40
    9888:	7812      	ldrb	r2, [r2, #0]
    988a:	9211      	str	r2, [sp, #68]	; 0x44
    988c:	429a      	cmp	r2, r3
    988e:	d138      	bne.n	9902 <event_connection_prepare+0x67e>
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    9890:	003b      	movs	r3, r7
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    9892:	2202      	movs	r2, #2
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    9894:	339c      	adds	r3, #156	; 0x9c
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    9896:	781b      	ldrb	r3, [r3, #0]
    9898:	4213      	tst	r3, r2
    989a:	d032      	beq.n	9902 <event_connection_prepare+0x67e>
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    989c:	003b      	movs	r3, r7
    989e:	339d      	adds	r3, #157	; 0x9d
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    98a0:	781b      	ldrb	r3, [r3, #0]
    98a2:	2b08      	cmp	r3, #8
    98a4:	d92d      	bls.n	9902 <event_connection_prepare+0x67e>
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    98a6:	003b      	movs	r3, r7
    98a8:	339e      	adds	r3, #158	; 0x9e
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    98aa:	881b      	ldrh	r3, [r3, #0]
    98ac:	4a0c      	ldr	r2, [pc, #48]	; (98e0 <event_connection_prepare+0x65c>)
    98ae:	4293      	cmp	r3, r2
    98b0:	d127      	bne.n	9902 <event_connection_prepare+0x67e>
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
    98b2:	003a      	movs	r2, r7
    98b4:	32a0      	adds	r2, #160	; 0xa0

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    98b6:	8812      	ldrh	r2, [r2, #0]
    98b8:	429a      	cmp	r2, r3
    98ba:	d122      	bne.n	9902 <event_connection_prepare+0x67e>
    98bc:	f000 fc99 	bl	a1f2 <event_connection_prepare+0xf6e>
    98c0:	20000ea0 	.word	0x20000ea0
    98c4:	09ce5400 	.word	0x09ce5400
    98c8:	1afd498d 	.word	0x1afd498d
    98cc:	000004e2 	.word	0x000004e2
    98d0:	000102dc 	.word	0x000102dc
    98d4:	000f4240 	.word	0x000f4240
    98d8:	000f423f 	.word	0x000f423f
    98dc:	3b9aca00 	.word	0x3b9aca00
    98e0:	0000ffff 	.word	0x0000ffff
			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
    98e4:	003b      	movs	r3, r7
    98e6:	338c      	adds	r3, #140	; 0x8c

			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
    98e8:	6818      	ldr	r0, [r3, #0]
    98ea:	4aea      	ldr	r2, [pc, #936]	; (9c94 <event_connection_prepare+0xa10>)
    98ec:	2300      	movs	r3, #0
    98ee:	f7f6 fe03 	bl	4f8 <__aeabi_lmul>
    98f2:	2307      	movs	r3, #7
    98f4:	4ae8      	ldr	r2, [pc, #928]	; (9c98 <event_connection_prepare+0xa14>)
    98f6:	f7f6 fddf 	bl	4b8 <__aeabi_uldivmod>
    98fa:	0200      	lsls	r0, r0, #8
    98fc:	0a03      	lsrs	r3, r0, #8
    98fe:	930e      	str	r3, [sp, #56]	; 0x38
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
    9900:	960f      	str	r6, [sp, #60]	; 0x3c
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    9902:	003b      	movs	r3, r7
    9904:	336c      	adds	r3, #108	; 0x6c
    9906:	881b      	ldrh	r3, [r3, #0]
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    9908:	0031      	movs	r1, r6
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    990a:	84bb      	strh	r3, [r7, #36]	; 0x24
		conn->latency = conn->llcp.connection_update.latency;
    990c:	003b      	movs	r3, r7
    990e:	336e      	adds	r3, #110	; 0x6e
    9910:	881c      	ldrh	r4, [r3, #0]
    9912:	84fc      	strh	r4, [r7, #38]	; 0x26
		conn->supervision_reload =
    9914:	8858      	ldrh	r0, [r3, #2]
    9916:	4be1      	ldr	r3, [pc, #900]	; (9c9c <event_connection_prepare+0xa18>)
    9918:	4358      	muls	r0, r3
    991a:	f7f6 fc57 	bl	1cc <__aeabi_uidiv>
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    991e:	0031      	movs	r1, r6
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    9920:	86b8      	strh	r0, [r7, #52]	; 0x34
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    9922:	48df      	ldr	r0, [pc, #892]	; (9ca0 <event_connection_prepare+0xa1c>)
    9924:	f7f6 fc52 	bl	1cc <__aeabi_uidiv>
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    9928:	0031      	movs	r1, r6
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    992a:	8738      	strh	r0, [r7, #56]	; 0x38
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    992c:	48dd      	ldr	r0, [pc, #884]	; (9ca4 <event_connection_prepare+0xa20>)
    992e:	f7f6 fc4d 	bl	1cc <__aeabi_uidiv>
    9932:	1cba      	adds	r2, r7, #2
    9934:	b283      	uxth	r3, r0
    9936:	87d3      	strh	r3, [r2, #62]	; 0x3e
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    9938:	1da2      	adds	r2, r4, #6
    993a:	4293      	cmp	r3, r2
    993c:	dd02      	ble.n	9944 <event_connection_prepare+0x6c0>
    993e:	1b1b      	subs	r3, r3, r4
    9940:	3b06      	subs	r3, #6
    9942:	b29b      	uxth	r3, r3
    9944:	87bb      	strh	r3, [r7, #60]	; 0x3c
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		if (!conn->llcp.connection_update.is_internal) {
    9946:	003b      	movs	r3, r7
    9948:	3395      	adds	r3, #149	; 0x95
    994a:	781a      	ldrb	r2, [r3, #0]
    994c:	2318      	movs	r3, #24
    994e:	4013      	ands	r3, r2
    9950:	d100      	bne.n	9954 <event_connection_prepare+0x6d0>
			conn->supervision_expire = 0;
    9952:	86fb      	strh	r3, [r7, #54]	; 0x36
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    9954:	2101      	movs	r1, #1
    9956:	2000      	movs	r0, #0
    9958:	f003 fd06 	bl	d368 <mayfly_is_enabled>
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    995c:	2200      	movs	r2, #0
    995e:	2101      	movs	r1, #1
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    9960:	0006      	movs	r6, r0
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    9962:	0010      	movs	r0, r2
    9964:	f7fc fdbc 	bl	64e0 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);

		/* start slave/master with new timings */
		ticker_status =
    9968:	2100      	movs	r1, #0
    996a:	8c3a      	ldrh	r2, [r7, #32]
    996c:	4bce      	ldr	r3, [pc, #824]	; (9ca8 <event_connection_prepare+0xa24>)
    996e:	3207      	adds	r2, #7
    9970:	9300      	str	r3, [sp, #0]
    9972:	b2d2      	uxtb	r2, r2
    9974:	4bcd      	ldr	r3, [pc, #820]	; (9cac <event_connection_prepare+0xa28>)
    9976:	0008      	movs	r0, r1
    9978:	f7fe f9c0 	bl	7cfc <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    997c:	2302      	movs	r3, #2
    997e:	4398      	bics	r0, r3
    9980:	1e05      	subs	r5, r0, #0
    9982:	d001      	beq.n	9988 <event_connection_prepare+0x704>
    9984:	f000 fbf0 	bl	a168 <event_connection_prepare+0xee4>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9988:	8c3b      	ldrh	r3, [r7, #32]
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
    998a:	4ac2      	ldr	r2, [pc, #776]	; (9c94 <event_connection_prepare+0xa10>)
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    998c:	3307      	adds	r3, #7
    998e:	b2db      	uxtb	r3, r3
    9990:	9310      	str	r3, [sp, #64]	; 0x40
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
    9992:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9994:	2300      	movs	r3, #0
    9996:	0029      	movs	r1, r5
    9998:	f7f6 fdae 	bl	4f8 <__aeabi_lmul>
    999c:	4abe      	ldr	r2, [pc, #760]	; (9c98 <event_connection_prepare+0xa14>)
    999e:	2307      	movs	r3, #7
    99a0:	900a      	str	r0, [sp, #40]	; 0x28
    99a2:	910b      	str	r1, [sp, #44]	; 0x2c
    99a4:	f7f6 fd88 	bl	4b8 <__aeabi_uldivmod>
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    99a8:	0204      	lsls	r4, r0, #8
    99aa:	0a24      	lsrs	r4, r4, #8
    99ac:	4aba      	ldr	r2, [pc, #744]	; (9c98 <event_connection_prepare+0xa14>)
    99ae:	2307      	movs	r3, #7
    99b0:	0020      	movs	r0, r4
    99b2:	0029      	movs	r1, r5
    99b4:	f7f6 fda0 	bl	4f8 <__aeabi_lmul>
    99b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    99ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    99bc:	1a12      	subs	r2, r2, r0
    99be:	418b      	sbcs	r3, r1
    99c0:	0010      	movs	r0, r2
    99c2:	22fa      	movs	r2, #250	; 0xfa
    99c4:	0019      	movs	r1, r3
    99c6:	0092      	lsls	r2, r2, #2
    99c8:	2300      	movs	r3, #0
    99ca:	f7f6 fd75 	bl	4b8 <__aeabi_uldivmod>
    99ce:	68fa      	ldr	r2, [r7, #12]
    99d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    99d2:	4694      	mov	ip, r2
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
				     TICKER_REMAINDER(periodic_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
    99d4:	003a      	movs	r2, r7
    99d6:	3244      	adds	r2, #68	; 0x44
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    99d8:	0001      	movs	r1, r0
    99da:	7810      	ldrb	r0, [r2, #0]
    99dc:	4463      	add	r3, ip
    99de:	b29b      	uxth	r3, r3
    99e0:	4ab3      	ldr	r2, [pc, #716]	; (9cb0 <event_connection_prepare+0xa2c>)
    99e2:	07c0      	lsls	r0, r0, #31
    99e4:	d400      	bmi.n	99e8 <event_connection_prepare+0x764>
    99e6:	4ab3      	ldr	r2, [pc, #716]	; (9cb4 <event_connection_prepare+0xa30>)
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    99e8:	48b3      	ldr	r0, [pc, #716]	; (9cb8 <event_connection_prepare+0xa34>)
    99ea:	9304      	str	r3, [sp, #16]
    99ec:	9008      	str	r0, [sp, #32]
    99ee:	48af      	ldr	r0, [pc, #700]	; (9cac <event_connection_prepare+0xa28>)
    99f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    99f2:	9007      	str	r0, [sp, #28]
    99f4:	2000      	movs	r0, #0
    99f6:	9205      	str	r2, [sp, #20]
    99f8:	9102      	str	r1, [sp, #8]
    99fa:	9300      	str	r3, [sp, #0]
    99fc:	9706      	str	r7, [sp, #24]
    99fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9a00:	9003      	str	r0, [sp, #12]
    9a02:	9401      	str	r4, [sp, #4]
    9a04:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9a06:	0001      	movs	r1, r0
    9a08:	f7fe f8e0 	bl	7bcc <ticker_start>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
				     event_slave_prepare : event_master_prepare,
				     conn, ticker_success_assert,
				     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9a0c:	2302      	movs	r3, #2
    9a0e:	4398      	bics	r0, r3
    9a10:	d000      	beq.n	9a14 <event_connection_prepare+0x790>
    9a12:	e3a9      	b.n	a168 <event_connection_prepare+0xee4>
			  (ticker_status == TICKER_STATUS_BUSY));

		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    9a14:	2e00      	cmp	r6, #0
    9a16:	d101      	bne.n	9a1c <event_connection_prepare+0x798>
    9a18:	f000 fc19 	bl	a24e <event_connection_prepare+0xfca>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    9a1c:	2201      	movs	r2, #1
    9a1e:	0011      	movs	r1, r2
    9a20:	f7fc fd5e 	bl	64e0 <mayfly_enable>
    9a24:	f000 fc13 	bl	a24e <event_connection_prepare+0xfca>
}

static inline void event_ch_map_prep(struct connection *conn,
				     u16_t event_counter)
{
	if (conn->llcp.chan_map.initiate) {
    9a28:	003d      	movs	r5, r7
    9a2a:	356c      	adds	r5, #108	; 0x6c
    9a2c:	782b      	ldrb	r3, [r5, #0]
    9a2e:	2b00      	cmp	r3, #0
    9a30:	d022      	beq.n	9a78 <event_connection_prepare+0x7f4>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9a32:	48a2      	ldr	r0, [pc, #648]	; (9cbc <event_connection_prepare+0xa38>)
    9a34:	3059      	adds	r0, #89	; 0x59
    9a36:	30ff      	adds	r0, #255	; 0xff
    9a38:	f7fc fe7a 	bl	6730 <mem_acquire>
    9a3c:	1e04      	subs	r4, r0, #0
		if (node_tx) {
    9a3e:	d100      	bne.n	9a42 <event_connection_prepare+0x7be>
    9a40:	e26d      	b.n	9f1e <event_connection_prepare+0xc9a>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;
    9a42:	2300      	movs	r3, #0
    9a44:	702b      	strb	r3, [r5, #0]

			/* set instant */
			conn->llcp.chan_map.instant =
    9a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9a4a:	3306      	adds	r3, #6
    9a4c:	18d3      	adds	r3, r2, r3
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9a4e:	2203      	movs	r2, #3

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;

			/* set instant */
			conn->llcp.chan_map.instant =
    9a50:	80eb      	strh	r3, [r5, #6]
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9a52:	7903      	ldrb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    9a54:	0039      	movs	r1, r7
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9a56:	4313      	orrs	r3, r2
    9a58:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    9a5a:	2308      	movs	r3, #8
    9a5c:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    9a5e:	3b07      	subs	r3, #7
    9a60:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    9a62:	3202      	adds	r2, #2
    9a64:	3008      	adds	r0, #8
    9a66:	316d      	adds	r1, #109	; 0x6d
    9a68:	f7f7 f915 	bl	c96 <memcpy>
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
				conn->llcp.chan_map.instant;
    9a6c:	88eb      	ldrh	r3, [r5, #6]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
    9a6e:	7363      	strb	r3, [r4, #13]
    9a70:	0a1b      	lsrs	r3, r3, #8
    9a72:	73a3      	strb	r3, [r4, #14]
				conn->llcp.chan_map.instant;

			ctrl_tx_enqueue(conn, node_tx);
    9a74:	0021      	movs	r1, r4
    9a76:	e108      	b.n	9c8a <event_connection_prepare+0xa06>
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    9a78:	003b      	movs	r3, r7
    9a7a:	3372      	adds	r3, #114	; 0x72
    9a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9a7e:	881b      	ldrh	r3, [r3, #0]
    9a80:	1ad3      	subs	r3, r2, r3
    9a82:	4a8f      	ldr	r2, [pc, #572]	; (9cc0 <event_connection_prepare+0xa3c>)
    9a84:	b29b      	uxth	r3, r3
    9a86:	4293      	cmp	r3, r2
    9a88:	dd00      	ble.n	9a8c <event_connection_prepare+0x808>
    9a8a:	e248      	b.n	9f1e <event_connection_prepare+0xc9a>
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9a8c:	003b      	movs	r3, r7

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    9a8e:	003c      	movs	r4, r7
    9a90:	0039      	movs	r1, r7
			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9a92:	3368      	adds	r3, #104	; 0x68
    9a94:	781a      	ldrb	r2, [r3, #0]

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    9a96:	3417      	adds	r4, #23
			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9a98:	705a      	strb	r2, [r3, #1]

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    9a9a:	316d      	adds	r1, #109	; 0x6d
    9a9c:	2205      	movs	r2, #5
    9a9e:	0020      	movs	r0, r4
    9aa0:	f7f7 f8f9 	bl	c96 <memcpy>
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    9aa4:	2105      	movs	r1, #5
    9aa6:	0020      	movs	r0, r4
    9aa8:	f7fc fec4 	bl	6834 <util_ones_count_get>

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    9aac:	223f      	movs	r2, #63	; 0x3f
    9aae:	7f3b      	ldrb	r3, [r7, #28]
    9ab0:	4010      	ands	r0, r2
    9ab2:	4393      	bics	r3, r2
    9ab4:	4318      	orrs	r0, r3
    9ab6:	7738      	strb	r0, [r7, #28]
    9ab8:	e231      	b.n	9f1e <event_connection_prepare+0xc9a>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
static inline void event_enc_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9aba:	4e80      	ldr	r6, [pc, #512]	; (9cbc <event_connection_prepare+0xa38>)
    9abc:	0035      	movs	r5, r6
    9abe:	3559      	adds	r5, #89	; 0x59
    9ac0:	35ff      	adds	r5, #255	; 0xff
    9ac2:	0028      	movs	r0, r5
    9ac4:	f7fc fe34 	bl	6730 <mem_acquire>
    9ac8:	900c      	str	r0, [sp, #48]	; 0x30
	if (node_tx) {
    9aca:	2800      	cmp	r0, #0
    9acc:	d100      	bne.n	9ad0 <event_connection_prepare+0x84c>
    9ace:	e226      	b.n	9f1e <event_connection_prepare+0xc9a>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9ad0:	003b      	movs	r3, r7
    9ad2:	3368      	adds	r3, #104	; 0x68
    9ad4:	781a      	ldrb	r2, [r3, #0]
    9ad6:	705a      	strb	r2, [r3, #1]

		/* master sends encrypted enc start rsp in control priority */
		if (conn->role.master.role == 0) {
    9ad8:	3b24      	subs	r3, #36	; 0x24
    9ada:	781c      	ldrb	r4, [r3, #0]
    9adc:	2301      	movs	r3, #1
    9ade:	401c      	ands	r4, r3
    9ae0:	d13a      	bne.n	9b58 <event_connection_prepare+0x8d4>
			/* calc the Session Key */
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    9ae2:	003d      	movs	r5, r7
    9ae4:	0039      	movs	r1, r7
    9ae6:	0038      	movs	r0, r7
    9ae8:	35c1      	adds	r5, #193	; 0xc1
    9aea:	002b      	movs	r3, r5
    9aec:	0022      	movs	r2, r4
    9aee:	3187      	adds	r1, #135	; 0x87
    9af0:	3077      	adds	r0, #119	; 0x77
    9af2:	f7fc ff1f 	bl	6934 <ecb_encrypt>
				    &conn->llcp.encryption.skd[0],
				    NULL, &conn->ccm_rx.key[0]);

			/* copy the Session Key */
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    9af6:	0038      	movs	r0, r7
    9af8:	0029      	movs	r1, r5
    9afa:	2210      	movs	r2, #16
    9afc:	30e2      	adds	r0, #226	; 0xe2
    9afe:	f7f7 f8ca 	bl	c96 <memcpy>
			       sizeof(conn->ccm_tx.key));

			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    9b02:	0039      	movs	r1, r7
    9b04:	0038      	movs	r0, r7
    9b06:	2208      	movs	r2, #8
    9b08:	31da      	adds	r1, #218	; 0xda
    9b0a:	30fb      	adds	r0, #251	; 0xfb
    9b0c:	f7f7 f8c3 	bl	c96 <memcpy>
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    9b10:	003b      	movs	r3, r7
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    9b12:	003a      	movs	r2, r7
    9b14:	2101      	movs	r1, #1
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    9b16:	33d1      	adds	r3, #209	; 0xd1
    9b18:	701c      	strb	r4, [r3, #0]
    9b1a:	705c      	strb	r4, [r3, #1]
    9b1c:	709c      	strb	r4, [r3, #2]
    9b1e:	70dc      	strb	r4, [r3, #3]
    9b20:	711c      	strb	r4, [r3, #4]
    9b22:	715c      	strb	r4, [r3, #5]
    9b24:	719c      	strb	r4, [r3, #6]
    9b26:	71dc      	strb	r4, [r3, #7]
			conn->ccm_tx.counter = 0;
    9b28:	3321      	adds	r3, #33	; 0x21
    9b2a:	801c      	strh	r4, [r3, #0]
    9b2c:	805c      	strh	r4, [r3, #2]
    9b2e:	809c      	strh	r4, [r3, #4]
    9b30:	80dc      	strh	r4, [r3, #6]

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    9b32:	32d9      	adds	r2, #217	; 0xd9
    9b34:	7813      	ldrb	r3, [r2, #0]
			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;

			/* send enc start resp */
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    9b36:	0038      	movs	r0, r7
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    9b38:	438b      	bics	r3, r1
    9b3a:	7013      	strb	r3, [r2, #0]
			conn->ccm_tx.direction = 1;
    9b3c:	3221      	adds	r2, #33	; 0x21
    9b3e:	7813      	ldrb	r3, [r2, #0]
    9b40:	430b      	orrs	r3, r1
    9b42:	7013      	strb	r3, [r2, #0]

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;
    9b44:	2330      	movs	r3, #48	; 0x30
			 */
			conn->ccm_rx.direction = 0;
			conn->ccm_tx.direction = 1;

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
    9b46:	3a3a      	subs	r2, #58	; 0x3a
    9b48:	7811      	ldrb	r1, [r2, #0]
			conn->enc_tx = 1;
    9b4a:	430b      	orrs	r3, r1
    9b4c:	7013      	strb	r3, [r2, #0]
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
    9b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9b50:	1d19      	adds	r1, r3, #4
			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;

			/* send enc start resp */
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    9b52:	f7ff fb3f 	bl	91d4 <start_enc_rsp_send>
    9b56:	e097      	b.n	9c88 <event_connection_prepare+0xa04>
		/* slave send reject ind or start enc req at control priority */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
		else {
#else /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */
		else if (!conn->pause_tx || conn->refresh) {
    9b58:	003b      	movs	r3, r7
    9b5a:	33c0      	adds	r3, #192	; 0xc0
    9b5c:	781c      	ldrb	r4, [r3, #0]
    9b5e:	930e      	str	r3, [sp, #56]	; 0x38
    9b60:	2348      	movs	r3, #72	; 0x48
    9b62:	401c      	ands	r4, r3
    9b64:	2c08      	cmp	r4, #8
    9b66:	d07d      	beq.n	9c64 <event_connection_prepare+0x9e0>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

			/* ll ctrl packet */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9b68:	2603      	movs	r6, #3
    9b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9b6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9b6e:	791b      	ldrb	r3, [r3, #4]
    9b70:	4333      	orrs	r3, r6
    9b72:	7113      	strb	r3, [r2, #4]

			/* place the reject ind packet as next in tx queue */
			if (conn->llcp.encryption.error_code) {
    9b74:	003b      	movs	r3, r7
    9b76:	336c      	adds	r3, #108	; 0x6c
    9b78:	781c      	ldrb	r4, [r3, #0]
    9b7a:	2c00      	cmp	r4, #0
    9b7c:	d009      	beq.n	9b92 <event_connection_prepare+0x90e>
				pdu_ctrl_tx->len =
    9b7e:	2202      	movs	r2, #2
    9b80:	990c      	ldr	r1, [sp, #48]	; 0x30
    9b82:	714a      	strb	r2, [r1, #5]
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
    9b84:	320b      	adds	r2, #11
    9b86:	71ca      	strb	r2, [r1, #7]
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
					conn->llcp.encryption.error_code;
    9b88:	781a      	ldrb	r2, [r3, #0]
				pdu_ctrl_tx->len =
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
    9b8a:	720a      	strb	r2, [r1, #8]
					conn->llcp.encryption.error_code;

				conn->llcp.encryption.error_code = 0;
    9b8c:	2200      	movs	r2, #0
    9b8e:	701a      	strb	r2, [r3, #0]
    9b90:	e07a      	b.n	9c88 <event_connection_prepare+0xa04>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9b92:	0028      	movs	r0, r5
    9b94:	f7fc fdcc 	bl	6730 <mem_acquire>
    9b98:	1e05      	subs	r5, r0, #0
	LL_ASSERT(node_tx);
    9b9a:	d100      	bne.n	9b9e <event_connection_prepare+0x91a>
    9b9c:	e2e4      	b.n	a168 <event_connection_prepare+0xee4>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9b9e:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    9ba0:	2208      	movs	r2, #8
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9ba2:	431e      	orrs	r6, r3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    9ba4:	230d      	movs	r3, #13
    9ba6:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    9ba8:	0003      	movs	r3, r0
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9baa:	7106      	strb	r6, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    9bac:	2604      	movs	r6, #4
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    9bae:	3308      	adds	r3, #8

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    9bb0:	71c6      	strb	r6, [r0, #7]
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    9bb2:	21aa      	movs	r1, #170	; 0xaa
    9bb4:	0018      	movs	r0, r3
    9bb6:	930f      	str	r3, [sp, #60]	; 0x3c
    9bb8:	f7f7 f897 	bl	cea <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 0xbb,
    9bbc:	002b      	movs	r3, r5
    9bbe:	3310      	adds	r3, #16
    9bc0:	0018      	movs	r0, r3
    9bc2:	0032      	movs	r2, r6
    9bc4:	21bb      	movs	r1, #187	; 0xbb
    9bc6:	9310      	str	r3, [sp, #64]	; 0x40
    9bc8:	f7f7 f88f 	bl	cea <memset>
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    9bcc:	0038      	movs	r0, r7
    9bce:	2208      	movs	r2, #8
    9bd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9bd2:	308f      	adds	r0, #143	; 0x8f
    9bd4:	f7f7 f85f 	bl	c96 <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
    9bd8:	0038      	movs	r0, r7
    9bda:	0032      	movs	r2, r6
    9bdc:	9910      	ldr	r1, [sp, #64]	; 0x40
    9bde:	30de      	adds	r0, #222	; 0xde
    9be0:	f7f7 f859 	bl	c96 <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    9be4:	0029      	movs	r1, r5
    9be6:	0038      	movs	r0, r7
				 */
				enc_rsp_send(conn);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    9be8:	003d      	movs	r5, r7
	memcpy(&conn->llcp.encryption.skd[8],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    9bea:	f7ff fab9 	bl	9160 <ctrl_tx_enqueue>
				 */
				enc_rsp_send(conn);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    9bee:	0039      	movs	r1, r7
    9bf0:	0038      	movs	r0, r7
    9bf2:	35c1      	adds	r5, #193	; 0xc1
    9bf4:	002b      	movs	r3, r5
    9bf6:	0022      	movs	r2, r4
    9bf8:	3187      	adds	r1, #135	; 0x87
    9bfa:	3077      	adds	r0, #119	; 0x77
    9bfc:	f7fc fe9a 	bl	6934 <ecb_encrypt>
					    &conn->llcp.encryption.skd[0], NULL,
					    &conn->ccm_rx.key[0]);

				/* copy the Session Key */
				memcpy(&conn->ccm_tx.key[0],
    9c00:	0038      	movs	r0, r7
    9c02:	2210      	movs	r2, #16
    9c04:	0029      	movs	r1, r5
    9c06:	30e2      	adds	r0, #226	; 0xe2
    9c08:	f7f7 f845 	bl	c96 <memcpy>
				       &conn->ccm_rx.key[0],
				       sizeof(conn->ccm_tx.key));

				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    9c0c:	0039      	movs	r1, r7
    9c0e:	0038      	movs	r0, r7
    9c10:	2208      	movs	r2, #8
    9c12:	31da      	adds	r1, #218	; 0xda
    9c14:	30fb      	adds	r0, #251	; 0xfb
    9c16:	f7f7 f83e 	bl	c96 <memcpy>
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    9c1a:	003b      	movs	r3, r7
				conn->ccm_tx.counter = 0;

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    9c1c:	003a      	movs	r2, r7
    9c1e:	2101      	movs	r1, #1
				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    9c20:	33d1      	adds	r3, #209	; 0xd1
    9c22:	701c      	strb	r4, [r3, #0]
    9c24:	715c      	strb	r4, [r3, #5]
    9c26:	705c      	strb	r4, [r3, #1]
    9c28:	709c      	strb	r4, [r3, #2]
    9c2a:	70dc      	strb	r4, [r3, #3]
    9c2c:	711c      	strb	r4, [r3, #4]
    9c2e:	719c      	strb	r4, [r3, #6]
    9c30:	71dc      	strb	r4, [r3, #7]
				conn->ccm_tx.counter = 0;
    9c32:	3321      	adds	r3, #33	; 0x21
    9c34:	801c      	strh	r4, [r3, #0]
    9c36:	809c      	strh	r4, [r3, #4]
    9c38:	805c      	strh	r4, [r3, #2]
    9c3a:	80dc      	strh	r4, [r3, #6]

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    9c3c:	32d9      	adds	r2, #217	; 0xd9
    9c3e:	7813      	ldrb	r3, [r2, #0]
    9c40:	430b      	orrs	r3, r1
    9c42:	7013      	strb	r3, [r2, #0]
				conn->ccm_tx.direction = 0;
    9c44:	3221      	adds	r2, #33	; 0x21
    9c46:	7813      	ldrb	r3, [r2, #0]
    9c48:	438b      	bics	r3, r1
    9c4a:	7013      	strb	r3, [r2, #0]

				/* enable receive encryption (transmit turned
				 * on when start enc resp from master is
				 * received)
				 */
				conn->enc_rx = 1;
    9c4c:	2210      	movs	r2, #16
    9c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9c50:	781b      	ldrb	r3, [r3, #0]
    9c52:	4313      	orrs	r3, r2
    9c54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9c56:	7013      	strb	r3, [r2, #0]

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    9c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					offsetof(struct pdu_data_llctrl,
						 ctrldata);
				pdu_ctrl_tx->payload.llctrl.opcode =
    9c5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				 * received)
				 */
				conn->enc_rx = 1;

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    9c5c:	7159      	strb	r1, [r3, #5]
					offsetof(struct pdu_data_llctrl,
						 ctrldata);
				pdu_ctrl_tx->payload.llctrl.opcode =
    9c5e:	2305      	movs	r3, #5
    9c60:	71d3      	strb	r3, [r2, #7]
    9c62:	e011      	b.n	9c88 <event_connection_prepare+0xa04>
			}

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
		} else {
			/* enable transmit encryption */
			_radio.conn_curr->enc_tx = 1;
    9c64:	36fc      	adds	r6, #252	; 0xfc
    9c66:	6970      	ldr	r0, [r6, #20]
    9c68:	2120      	movs	r1, #32
    9c6a:	0002      	movs	r2, r0
    9c6c:	32c0      	adds	r2, #192	; 0xc0
    9c6e:	7813      	ldrb	r3, [r2, #0]
    9c70:	430b      	orrs	r3, r1
    9c72:	7013      	strb	r3, [r2, #0]

			start_enc_rsp_send(_radio.conn_curr, NULL);
    9c74:	2100      	movs	r1, #0
    9c76:	f7ff faad 	bl	91d4 <start_enc_rsp_send>

			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
			_radio.conn_curr->pause_tx = 0;
    9c7a:	2104      	movs	r1, #4
			_radio.conn_curr->enc_tx = 1;

			start_enc_rsp_send(_radio.conn_curr, NULL);

			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    9c7c:	6972      	ldr	r2, [r6, #20]
    9c7e:	32c0      	adds	r2, #192	; 0xc0
    9c80:	7813      	ldrb	r3, [r2, #0]
			_radio.conn_curr->pause_tx = 0;
    9c82:	438b      	bics	r3, r1
    9c84:	43a3      	bics	r3, r4
    9c86:	7013      	strb	r3, [r2, #0]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		}

		ctrl_tx_enqueue(conn, node_tx);
    9c88:	990c      	ldr	r1, [sp, #48]	; 0x30
    9c8a:	0038      	movs	r0, r7
    9c8c:	f7ff fa68 	bl	9160 <ctrl_tx_enqueue>
    9c90:	e145      	b.n	9f1e <event_connection_prepare+0xc9a>
    9c92:	46c0      	nop			; (mov r8, r8)
    9c94:	3b9aca00 	.word	0x3b9aca00
    9c98:	1afd498d 	.word	0x1afd498d
    9c9c:	00002710 	.word	0x00002710
    9ca0:	02625a00 	.word	0x02625a00
    9ca4:	01c9c380 	.word	0x01c9c380
    9ca8:	00001654 	.word	0x00001654
    9cac:	00008da1 	.word	0x00008da1
    9cb0:	0000a269 	.word	0x0000a269
    9cb4:	0000a261 	.word	0x0000a261
    9cb8:	00001664 	.word	0x00001664
    9cbc:	20000ea0 	.word	0x20000ea0
    9cc0:	00007fff 	.word	0x00007fff

static inline void event_fex_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9cc4:	48d8      	ldr	r0, [pc, #864]	; (a028 <event_connection_prepare+0xda4>)
    9cc6:	3059      	adds	r0, #89	; 0x59
    9cc8:	30ff      	adds	r0, #255	; 0xff
    9cca:	f7fc fd31 	bl	6730 <mem_acquire>
    9cce:	1e04      	subs	r4, r0, #0
	if (node_tx) {
    9cd0:	d100      	bne.n	9cd4 <event_connection_prepare+0xa50>
    9cd2:	e124      	b.n	9f1e <event_connection_prepare+0xc9a>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9cd4:	003b      	movs	r3, r7

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    9cd6:	003d      	movs	r5, r7
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9cd8:	3368      	adds	r3, #104	; 0x68
    9cda:	781a      	ldrb	r2, [r3, #0]

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    9cdc:	3598      	adds	r5, #152	; 0x98
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9cde:	705a      	strb	r2, [r3, #1]

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9ce0:	2203      	movs	r2, #3

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    9ce2:	4bd2      	ldr	r3, [pc, #840]	; (a02c <event_connection_prepare+0xda8>)
    9ce4:	602b      	str	r3, [r5, #0]

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9ce6:	7903      	ldrb	r3, [r0, #4]
    9ce8:	4313      	orrs	r3, r2
    9cea:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    9cec:	2309      	movs	r3, #9
    9cee:	7143      	strb	r3, [r0, #5]
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
			(conn->role.master.role == 0) ?
    9cf0:	003b      	movs	r3, r7
    9cf2:	3344      	adds	r3, #68	; 0x44

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    9cf4:	781a      	ldrb	r2, [r3, #0]
    9cf6:	2308      	movs	r3, #8
    9cf8:	07d2      	lsls	r2, r2, #31
    9cfa:	d500      	bpl.n	9cfe <event_connection_prepare+0xa7a>
    9cfc:	3306      	adds	r3, #6
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    9cfe:	0020      	movs	r0, r4

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    9d00:	71e3      	strb	r3, [r4, #7]
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    9d02:	2100      	movs	r1, #0
    9d04:	3008      	adds	r0, #8
    9d06:	2208      	movs	r2, #8
    9d08:	f7f6 ffef 	bl	cea <memset>
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    9d0c:	782b      	ldrb	r3, [r5, #0]
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
			(conn->llcp_features >> 16) & 0xFF;

		ctrl_tx_enqueue(conn, node_tx);
    9d0e:	0021      	movs	r1, r4
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    9d10:	7223      	strb	r3, [r4, #8]
			conn->llcp_features & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    9d12:	682b      	ldr	r3, [r5, #0]
    9d14:	0a1b      	lsrs	r3, r3, #8
    9d16:	7263      	strb	r3, [r4, #9]
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    9d18:	682b      	ldr	r3, [r5, #0]
    9d1a:	0c1b      	lsrs	r3, r3, #16
    9d1c:	72a3      	strb	r3, [r4, #10]
    9d1e:	e061      	b.n	9de4 <event_connection_prepare+0xb60>
}

static inline void event_vex_prep(struct connection *conn)
{

	if (conn->llcp_version.tx == 0) {
    9d20:	003d      	movs	r5, r7
    9d22:	2401      	movs	r4, #1
    9d24:	359c      	adds	r5, #156	; 0x9c
    9d26:	782b      	ldrb	r3, [r5, #0]
    9d28:	4223      	tst	r3, r4
    9d2a:	d11e      	bne.n	9d6a <event_connection_prepare+0xae6>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9d2c:	48be      	ldr	r0, [pc, #760]	; (a028 <event_connection_prepare+0xda4>)
    9d2e:	3059      	adds	r0, #89	; 0x59
    9d30:	30ff      	adds	r0, #255	; 0xff
    9d32:	f7fc fcfd 	bl	6730 <mem_acquire>
    9d36:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    9d38:	d100      	bne.n	9d3c <event_connection_prepare+0xab8>
    9d3a:	e0f0      	b.n	9f1e <event_connection_prepare+0xc9a>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    9d3c:	003b      	movs	r3, r7
    9d3e:	3368      	adds	r3, #104	; 0x68
    9d40:	781a      	ldrb	r2, [r3, #0]
    9d42:	705a      	strb	r2, [r3, #1]

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9d44:	2203      	movs	r2, #3

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;
    9d46:	782b      	ldrb	r3, [r5, #0]
    9d48:	431c      	orrs	r4, r3
    9d4a:	702c      	strb	r4, [r5, #0]

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9d4c:	7903      	ldrb	r3, [r0, #4]
    9d4e:	4313      	orrs	r3, r2
    9d50:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    9d52:	2306      	movs	r3, #6
    9d54:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_version_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    9d56:	18db      	adds	r3, r3, r3
    9d58:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_VERSION_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    9d5a:	3b03      	subs	r3, #3
    9d5c:	7203      	strb	r3, [r0, #8]
				RADIO_BLE_VERSION_NUMBER;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    9d5e:	3b0a      	subs	r3, #10
    9d60:	7243      	strb	r3, [r0, #9]
    9d62:	7283      	strb	r3, [r0, #10]
				RADIO_BLE_COMPANY_ID;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    9d64:	72c3      	strb	r3, [r0, #11]
    9d66:	7303      	strb	r3, [r0, #12]
    9d68:	e03c      	b.n	9de4 <event_connection_prepare+0xb60>
			/* Start Procedure Timeout (@todo this shall not
			 * replace terminate procedure)
			 */
			conn->procedure_expire = conn->procedure_reload;
		}
	} else if (conn->llcp_version.rx != 0) {
    9d6a:	2002      	movs	r0, #2
    9d6c:	4203      	tst	r3, r0
    9d6e:	d100      	bne.n	9d72 <event_connection_prepare+0xaee>
    9d70:	e1fa      	b.n	a168 <event_connection_prepare+0xee4>
		struct radio_pdu_node_rx *radio_pdu_node_rx;
		struct pdu_data *pdu_ctrl_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9d72:	003b      	movs	r3, r7
    9d74:	3368      	adds	r3, #104	; 0x68
    9d76:	781a      	ldrb	r2, [r3, #0]
    9d78:	705a      	strb	r2, [r3, #1]

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
    9d7a:	f7fe f8cd 	bl	7f18 <packet_rx_reserve_get>
		LL_ASSERT(radio_pdu_node_rx);
    9d7e:	2800      	cmp	r0, #0
    9d80:	d100      	bne.n	9d84 <event_connection_prepare+0xb00>
    9d82:	e1f1      	b.n	a168 <event_connection_prepare+0xee4>
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    9d84:	2203      	movs	r2, #3

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(radio_pdu_node_rx);

		radio_pdu_node_rx->hdr.handle = conn->handle;
    9d86:	8c3b      	ldrh	r3, [r7, #32]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    9d88:	7104      	strb	r4, [r0, #4]

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(radio_pdu_node_rx);

		radio_pdu_node_rx->hdr.handle = conn->handle;
    9d8a:	80c3      	strh	r3, [r0, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    9d8c:	7a03      	ldrb	r3, [r0, #8]
    9d8e:	4313      	orrs	r3, r2
    9d90:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    9d92:	2306      	movs	r3, #6
    9d94:	7243      	strb	r3, [r0, #9]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
    9d96:	18db      	adds	r3, r3, r3
    9d98:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
    9d9a:	003b      	movs	r3, r7
    9d9c:	339d      	adds	r3, #157	; 0x9d
    9d9e:	781b      	ldrb	r3, [r3, #0]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
    9da0:	7303      	strb	r3, [r0, #12]
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
			conn->llcp_version.company_id;
    9da2:	003b      	movs	r3, r7
    9da4:	339e      	adds	r3, #158	; 0x9e
    9da6:	881b      	ldrh	r3, [r3, #0]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
    9da8:	7343      	strb	r3, [r0, #13]
    9daa:	0a1b      	lsrs	r3, r3, #8
    9dac:	7383      	strb	r3, [r0, #14]
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
			conn->llcp_version.sub_version_number;
    9dae:	003b      	movs	r3, r7
    9db0:	33a0      	adds	r3, #160	; 0xa0
    9db2:	881b      	ldrh	r3, [r3, #0]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    9db4:	73c3      	strb	r3, [r0, #15]
    9db6:	0a1b      	lsrs	r3, r3, #8
    9db8:	7403      	strb	r3, [r0, #16]
    9dba:	e0ae      	b.n	9f1a <event_connection_prepare+0xc96>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
static inline void event_ping_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9dbc:	489a      	ldr	r0, [pc, #616]	; (a028 <event_connection_prepare+0xda4>)
    9dbe:	3059      	adds	r0, #89	; 0x59
    9dc0:	30ff      	adds	r0, #255	; 0xff
    9dc2:	f7fc fcb5 	bl	6730 <mem_acquire>
    9dc6:	1e01      	subs	r1, r0, #0
	if (node_tx) {
    9dc8:	d100      	bne.n	9dcc <event_connection_prepare+0xb48>
    9dca:	e0a8      	b.n	9f1e <event_connection_prepare+0xc9a>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9dcc:	003b      	movs	r3, r7
    9dce:	3368      	adds	r3, #104	; 0x68
    9dd0:	781a      	ldrb	r2, [r3, #0]
    9dd2:	705a      	strb	r2, [r3, #1]

		/* place the ping req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9dd4:	2203      	movs	r2, #3
    9dd6:	7903      	ldrb	r3, [r0, #4]
    9dd8:	4313      	orrs	r3, r2
    9dda:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    9ddc:	2301      	movs	r3, #1
    9dde:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
    9de0:	3311      	adds	r3, #17
    9de2:	71c3      	strb	r3, [r0, #7]
			PDU_DATA_LLCTRL_TYPE_PING_REQ;

		ctrl_tx_enqueue(conn, node_tx);
    9de4:	0038      	movs	r0, r7
    9de6:	f7ff f9bb 	bl	9160 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure)
		 */
		conn->procedure_expire = conn->procedure_reload;
    9dea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    9dec:	877b      	strh	r3, [r7, #58]	; 0x3a
    9dee:	e096      	b.n	9f1e <event_connection_prepare+0xc9a>
}

static inline void event_phy_upd_ind_prep(struct connection *conn,
					  u16_t event_counter)
{
	if (conn->llcp.phy_upd_ind.initiate) {
    9df0:	003c      	movs	r4, r7
    9df2:	2501      	movs	r5, #1
    9df4:	346c      	adds	r4, #108	; 0x6c
    9df6:	7821      	ldrb	r1, [r4, #0]
    9df8:	4229      	tst	r1, r5
    9dfa:	d031      	beq.n	9e60 <event_connection_prepare+0xbdc>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9dfc:	488a      	ldr	r0, [pc, #552]	; (a028 <event_connection_prepare+0xda4>)
    9dfe:	3059      	adds	r0, #89	; 0x59
    9e00:	30ff      	adds	r0, #255	; 0xff
    9e02:	f7fc fc95 	bl	6730 <mem_acquire>
    9e06:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    9e08:	d100      	bne.n	9e0c <event_connection_prepare+0xb88>
    9e0a:	e088      	b.n	9f1e <event_connection_prepare+0xc9a>
			struct pdu_data *pdu_ctrl_tx = (struct pdu_data *)
						       node_tx->pdu_data;
			struct pdu_data_llctrl_phy_upd_ind *p;

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;
    9e0c:	7822      	ldrb	r2, [r4, #0]
    9e0e:	43aa      	bics	r2, r5

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
    9e10:	06d3      	lsls	r3, r2, #27
    9e12:	0f5b      	lsrs	r3, r3, #29
			struct pdu_data *pdu_ctrl_tx = (struct pdu_data *)
						       node_tx->pdu_data;
			struct pdu_data_llctrl_phy_upd_ind *p;

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;
    9e14:	7022      	strb	r2, [r4, #0]

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
			       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    9e16:	0952      	lsrs	r2, r2, #5

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
    9e18:	431a      	orrs	r2, r3
    9e1a:	b2d3      	uxtb	r3, r2
    9e1c:	003a      	movs	r2, r7
    9e1e:	326e      	adds	r2, #110	; 0x6e
    9e20:	2b00      	cmp	r3, #0
    9e22:	d104      	bne.n	9e2e <event_connection_prepare+0xbaa>
			       conn->llcp.phy_upd_ind.rx) & 0x07)) {
				/* Procedure complete */
				conn->llcp_ack = conn->llcp_req;
    9e24:	0038      	movs	r0, r7
    9e26:	3068      	adds	r0, #104	; 0x68
    9e28:	7805      	ldrb	r5, [r0, #0]
    9e2a:	7045      	strb	r5, [r0, #1]
    9e2c:	e003      	b.n	9e36 <event_connection_prepare+0xbb2>

				/* 0 instant */
				conn->llcp.phy_upd_ind.instant = 0;
			} else {
				/* set instant */
				conn->llcp.phy_upd_ind.instant = event_counter +
    9e2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    9e30:	980a      	ldr	r0, [sp, #40]	; 0x28
    9e32:	3306      	adds	r3, #6
    9e34:	18c3      	adds	r3, r0, r3
			}

			/* place the phy update ind packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9e36:	2003      	movs	r0, #3

				/* 0 instant */
				conn->llcp.phy_upd_ind.instant = 0;
			} else {
				/* set instant */
				conn->llcp.phy_upd_ind.instant = event_counter +
    9e38:	8013      	strh	r3, [r2, #0]
			}

			/* place the phy update ind packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9e3a:	790b      	ldrb	r3, [r1, #4]
    9e3c:	4303      	orrs	r3, r0
    9e3e:	710b      	strb	r3, [r1, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    9e40:	2305      	movs	r3, #5
    9e42:	714b      	strb	r3, [r1, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_phy_upd_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    9e44:	3313      	adds	r3, #19
    9e46:	71cb      	strb	r3, [r1, #7]
				PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
			p = &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_upd_ind;
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    9e48:	7823      	ldrb	r3, [r4, #0]
    9e4a:	06db      	lsls	r3, r3, #27
    9e4c:	0f5b      	lsrs	r3, r3, #29
    9e4e:	720b      	strb	r3, [r1, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    9e50:	7823      	ldrb	r3, [r4, #0]
    9e52:	095b      	lsrs	r3, r3, #5
    9e54:	724b      	strb	r3, [r1, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
    9e56:	8813      	ldrh	r3, [r2, #0]
    9e58:	728b      	strb	r3, [r1, #10]
    9e5a:	0a1b      	lsrs	r3, r3, #8
    9e5c:	72cb      	strb	r3, [r1, #11]
    9e5e:	e714      	b.n	9c8a <event_connection_prepare+0xa06>

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    9e60:	003b      	movs	r3, r7
    9e62:	336e      	adds	r3, #110	; 0x6e
    9e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9e66:	881b      	ldrh	r3, [r3, #0]
    9e68:	1ad3      	subs	r3, r2, r3
    9e6a:	4a71      	ldr	r2, [pc, #452]	; (a030 <event_connection_prepare+0xdac>)
    9e6c:	b29b      	uxth	r3, r3
    9e6e:	4293      	cmp	r3, r2
    9e70:	dc55      	bgt.n	9f1e <event_connection_prepare+0xc9a>
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9e72:	003b      	movs	r3, r7

		/* apply new phy */
		old_tx = conn->phy_tx;
    9e74:	003e      	movs	r6, r7
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9e76:	3368      	adds	r3, #104	; 0x68
    9e78:	781a      	ldrb	r2, [r3, #0]

		/* apply new phy */
		old_tx = conn->phy_tx;
    9e7a:	3632      	adds	r6, #50	; 0x32
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    9e7c:	705a      	strb	r2, [r3, #1]

		/* apply new phy */
		old_tx = conn->phy_tx;
		old_rx = conn->phy_rx;
    9e7e:	3b35      	subs	r3, #53	; 0x35
    9e80:	781a      	ldrb	r2, [r3, #0]
		if (conn->llcp.phy_upd_ind.tx) {
    9e82:	231c      	movs	r3, #28

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
    9e84:	7835      	ldrb	r5, [r6, #0]
		old_rx = conn->phy_rx;
    9e86:	0692      	lsls	r2, r2, #26

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
    9e88:	06a8      	lsls	r0, r5, #26
    9e8a:	0f40      	lsrs	r0, r0, #29
		old_rx = conn->phy_rx;
    9e8c:	0f52      	lsrs	r2, r2, #29
		if (conn->llcp.phy_upd_ind.tx) {
    9e8e:	4219      	tst	r1, r3
    9e90:	d007      	beq.n	9ea2 <event_connection_prepare+0xc1e>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    9e92:	7823      	ldrb	r3, [r4, #0]
    9e94:	2438      	movs	r4, #56	; 0x38
    9e96:	06db      	lsls	r3, r3, #27
    9e98:	0f5b      	lsrs	r3, r3, #29
    9e9a:	00db      	lsls	r3, r3, #3
    9e9c:	43a5      	bics	r5, r4
    9e9e:	431d      	orrs	r5, r3
    9ea0:	7035      	strb	r5, [r6, #0]
		}
		if (conn->llcp.phy_upd_ind.rx) {
    9ea2:	231f      	movs	r3, #31
    9ea4:	000c      	movs	r4, r1
    9ea6:	439c      	bics	r4, r3
    9ea8:	d00b      	beq.n	9ec2 <event_connection_prepare+0xc3e>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    9eaa:	003b      	movs	r3, r7
    9eac:	003c      	movs	r4, r7
    9eae:	2638      	movs	r6, #56	; 0x38
    9eb0:	336c      	adds	r3, #108	; 0x6c
    9eb2:	781b      	ldrb	r3, [r3, #0]
    9eb4:	3432      	adds	r4, #50	; 0x32
    9eb6:	7865      	ldrb	r5, [r4, #1]
    9eb8:	095b      	lsrs	r3, r3, #5
    9eba:	00db      	lsls	r3, r3, #3
    9ebc:	43b5      	bics	r5, r6
    9ebe:	431d      	orrs	r5, r3
    9ec0:	7065      	strb	r5, [r4, #1]
		}
		conn->phy_flags = conn->phy_pref_flags;
    9ec2:	003c      	movs	r4, r7
    9ec4:	257f      	movs	r5, #127	; 0x7f
    9ec6:	3432      	adds	r4, #50	; 0x32
    9ec8:	7826      	ldrb	r6, [r4, #0]
    9eca:	0673      	lsls	r3, r6, #25
    9ecc:	0fdb      	lsrs	r3, r3, #31
    9ece:	4035      	ands	r5, r6
    9ed0:	01db      	lsls	r3, r3, #7
    9ed2:	432b      	orrs	r3, r5
    9ed4:	003d      	movs	r5, r7
    9ed6:	7023      	strb	r3, [r4, #0]
    9ed8:	3533      	adds	r5, #51	; 0x33

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    9eda:	078b      	lsls	r3, r1, #30
    9edc:	d409      	bmi.n	9ef2 <event_connection_prepare+0xc6e>
    9ede:	7823      	ldrb	r3, [r4, #0]
    9ee0:	069b      	lsls	r3, r3, #26
    9ee2:	0f5b      	lsrs	r3, r3, #29
    9ee4:	4283      	cmp	r3, r0
    9ee6:	d104      	bne.n	9ef2 <event_connection_prepare+0xc6e>
		    (conn->phy_rx == old_rx)) {
    9ee8:	782b      	ldrb	r3, [r5, #0]
    9eea:	069b      	lsls	r3, r3, #26
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
		}
		conn->phy_flags = conn->phy_pref_flags;

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    9eec:	0f5b      	lsrs	r3, r3, #29
    9eee:	4293      	cmp	r3, r2
    9ef0:	d015      	beq.n	9f1e <event_connection_prepare+0xc9a>
		    (conn->phy_rx == old_rx)) {
			return;
		}

		node_rx = packet_rx_reserve_get(2);
    9ef2:	2002      	movs	r0, #2
    9ef4:	f7fe f810 	bl	7f18 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    9ef8:	2800      	cmp	r0, #0
    9efa:	d100      	bne.n	9efe <event_connection_prepare+0xc7a>
    9efc:	e134      	b.n	a168 <event_connection_prepare+0xee4>

		node_rx->hdr.handle = conn->handle;
    9efe:	8c3b      	ldrh	r3, [r7, #32]
    9f00:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    9f02:	230c      	movs	r3, #12
    9f04:	7103      	strb	r3, [r0, #4]

		pdu_data = (struct pdu_data *)&node_rx->pdu_data;
		p = (struct radio_le_phy_upd_cmplt *)&pdu_data->payload;
		p->status = 0;
    9f06:	2300      	movs	r3, #0
    9f08:	72c3      	strb	r3, [r0, #11]
		p->tx = conn->phy_tx;
    9f0a:	7823      	ldrb	r3, [r4, #0]
    9f0c:	069b      	lsls	r3, r3, #26
    9f0e:	0f5b      	lsrs	r3, r3, #29
    9f10:	7303      	strb	r3, [r0, #12]
		p->rx = conn->phy_rx;
    9f12:	782b      	ldrb	r3, [r5, #0]
    9f14:	069b      	lsls	r3, r3, #26
    9f16:	0f5b      	lsrs	r3, r3, #29
    9f18:	7343      	strb	r3, [r0, #13]

		packet_rx_enqueue();
    9f1a:	f7fe fb95 	bl	8648 <packet_rx_enqueue>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    9f1e:	003c      	movs	r4, r7
    9f20:	003d      	movs	r5, r7
    9f22:	34a5      	adds	r4, #165	; 0xa5
    9f24:	35a4      	adds	r5, #164	; 0xa4
    9f26:	7822      	ldrb	r2, [r4, #0]
    9f28:	782b      	ldrb	r3, [r5, #0]
    9f2a:	429a      	cmp	r2, r3
    9f2c:	d01e      	beq.n	9f6c <event_connection_prepare+0xce8>
		struct radio_pdu_node_tx *node_tx;

		/* Stop previous event, to avoid Radio DMA corrupting the rx
		 * queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    9f2e:	2200      	movs	r2, #0
    9f30:	2305      	movs	r3, #5
    9f32:	0011      	movs	r1, r2
    9f34:	0010      	movs	r0, r2
    9f36:	f7fe fdb5 	bl	8aa4 <event_stop>

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9f3a:	483b      	ldr	r0, [pc, #236]	; (a028 <event_connection_prepare+0xda4>)
    9f3c:	3059      	adds	r0, #89	; 0x59
    9f3e:	30ff      	adds	r0, #255	; 0xff
    9f40:	f7fc fbf6 	bl	6730 <mem_acquire>
    9f44:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    9f46:	d011      	beq.n	9f6c <event_connection_prepare+0xce8>

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9f48:	2203      	movs	r2, #3
		if (node_tx) {
			struct pdu_data *pdu_ctrl_tx =
			    (struct pdu_data *)node_tx->pdu_data;

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    9f4a:	782b      	ldrb	r3, [r5, #0]
    9f4c:	7023      	strb	r3, [r4, #0]

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9f4e:	7903      	ldrb	r3, [r0, #4]
    9f50:	4313      	orrs	r3, r2
    9f52:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    9f54:	2302      	movs	r3, #2
    9f56:	7143      	strb	r3, [r0, #5]
				offsetof(struct pdu_data_llctrl, ctrldata) +
				sizeof(struct pdu_data_llctrl_terminate_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    9f58:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.terminate_ind.
				error_code = conn->llcp_terminate.reason_own;
    9f5a:	003b      	movs	r3, r7
    9f5c:	33a6      	adds	r3, #166	; 0xa6
    9f5e:	781b      	ldrb	r3, [r3, #0]
    9f60:	7203      	strb	r3, [r0, #8]

			ctrl_tx_enqueue(conn, node_tx);
    9f62:	0038      	movs	r0, r7
    9f64:	f7ff f8fc 	bl	9160 <ctrl_tx_enqueue>

			/* Terminate Procedure timeout is started, will
			 * replace any other timeout running
			 */
			conn->procedure_expire = conn->procedure_reload;
    9f68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    9f6a:	877b      	strh	r3, [r7, #58]	; 0x3a
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    9f6c:	003b      	movs	r3, r7
    9f6e:	33b5      	adds	r3, #181	; 0xb5
    9f70:	930c      	str	r3, [sp, #48]	; 0x30
    9f72:	781a      	ldrb	r2, [r3, #0]
    9f74:	3b01      	subs	r3, #1
    9f76:	781b      	ldrb	r3, [r3, #0]
    9f78:	429a      	cmp	r2, r3
    9f7a:	d100      	bne.n	9f7e <event_connection_prepare+0xcfa>
    9f7c:	e119      	b.n	a1b2 <event_connection_prepare+0xf2e>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    9f7e:	2200      	movs	r2, #0
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    9f80:	003d      	movs	r5, r7
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    9f82:	0010      	movs	r0, r2
    9f84:	2305      	movs	r3, #5
    9f86:	0011      	movs	r1, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    9f88:	35b6      	adds	r5, #182	; 0xb6
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    9f8a:	f7fe fd8b 	bl	8aa4 <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    9f8e:	7828      	ldrb	r0, [r5, #0]
    9f90:	0780      	lsls	r0, r0, #30
    9f92:	0f80      	lsrs	r0, r0, #30
    9f94:	f7f6 f904 	bl	1a0 <__gnu_thumb1_case_uhi>
    9f98:	010d0004 	.word	0x010d0004
    9f9c:	004e010d 	.word	0x004e010d
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    9fa0:	f7fd ffa4 	bl	7eec <packet_rx_acquired_count_get>
			mem_free_count_get(_radio.pkt_rx_data_free);
    9fa4:	4e20      	ldr	r6, [pc, #128]	; (a028 <event_connection_prepare+0xda4>)
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    9fa6:	0004      	movs	r4, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    9fa8:	0033      	movs	r3, r6
    9faa:	33fc      	adds	r3, #252	; 0xfc
    9fac:	6b18      	ldr	r0, [r3, #48]	; 0x30
    9fae:	f7fc fbee 	bl	678e <mem_free_count_get>
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    9fb2:	1904      	adds	r4, r0, r4
    9fb4:	b2a0      	uxth	r0, r4
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    9fb6:	28ff      	cmp	r0, #255	; 0xff
    9fb8:	d900      	bls.n	9fbc <event_connection_prepare+0xd38>
    9fba:	e0d5      	b.n	a168 <event_connection_prepare+0xee4>

		if (_radio.packet_rx_data_count != free_count_rx) {
    9fbc:	239b      	movs	r3, #155	; 0x9b
    9fbe:	005b      	lsls	r3, r3, #1
    9fc0:	5cf3      	ldrb	r3, [r6, r3]
    9fc2:	4283      	cmp	r3, r0
    9fc4:	d000      	beq.n	9fc8 <event_connection_prepare+0xd44>
    9fc6:	e0f4      	b.n	a1b2 <event_connection_prepare+0xf2e>
			break;
		}

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9fc8:	0030      	movs	r0, r6
    9fca:	3059      	adds	r0, #89	; 0x59
    9fcc:	30ff      	adds	r0, #255	; 0xff
    9fce:	f7fc fbaf 	bl	6730 <mem_acquire>
    9fd2:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    9fd4:	d100      	bne.n	9fd8 <event_connection_prepare+0xd54>
    9fd6:	e0ec      	b.n	a1b2 <event_connection_prepare+0xf2e>
			break;
		}

		/* wait for resp before completing the procedure */
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    9fd8:	2203      	movs	r2, #3
    9fda:	2001      	movs	r0, #1
    9fdc:	782b      	ldrb	r3, [r5, #0]
    9fde:	4393      	bics	r3, r2
    9fe0:	4303      	orrs	r3, r0
    9fe2:	702b      	strb	r3, [r5, #0]

		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    9fe4:	003b      	movs	r3, r7
    9fe6:	33ba      	adds	r3, #186	; 0xba
    9fe8:	881b      	ldrh	r3, [r3, #0]
    9fea:	85bb      	strh	r3, [r7, #44]	; 0x2c

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9fec:	790b      	ldrb	r3, [r1, #4]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    9fee:	72c8      	strb	r0, [r1, #11]
		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9ff0:	431a      	orrs	r2, r3
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    9ff2:	2309      	movs	r3, #9
    9ff4:	714b      	strb	r3, [r1, #5]
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    9ff6:	330b      	adds	r3, #11
    9ff8:	71cb      	strb	r3, [r1, #7]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    9ffa:	3307      	adds	r3, #7
    9ffc:	720b      	strb	r3, [r1, #8]
    9ffe:	2300      	movs	r3, #0
    a000:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    a002:	3348      	adds	r3, #72	; 0x48
		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    a004:	710a      	strb	r2, [r1, #4]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    a006:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    a008:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);

		ctrl_tx_enqueue(conn, node_tx);
    a00a:	0038      	movs	r0, r7

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
		lr->max_tx_octets = conn->default_tx_octets;
    a00c:	0a1a      	lsrs	r2, r3, #8
    a00e:	730b      	strb	r3, [r1, #12]
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);
    a010:	330e      	adds	r3, #14
    a012:	00db      	lsls	r3, r3, #3
    a014:	b29b      	uxth	r3, r3
    a016:	738b      	strb	r3, [r1, #14]
    a018:	0a1b      	lsrs	r3, r3, #8
    a01a:	73cb      	strb	r3, [r1, #15]

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
		lr->max_tx_octets = conn->default_tx_octets;
    a01c:	734a      	strb	r2, [r1, #13]
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);

		ctrl_tx_enqueue(conn, node_tx);
    a01e:	f7ff f89f 	bl	9160 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    a022:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    a024:	877b      	strh	r3, [r7, #58]	; 0x3a
    a026:	e0c4      	b.n	a1b2 <event_connection_prepare+0xf2e>
    a028:	20000ea0 	.word	0x20000ea0
    a02c:	0000407f 	.word	0x0000407f
    a030:	00007fff 	.word	0x00007fff
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    a034:	f7fd ff5a 	bl	7eec <packet_rx_acquired_count_get>
			mem_free_count_get(_radio.pkt_rx_data_free);
    a038:	4d86      	ldr	r5, [pc, #536]	; (a254 <event_connection_prepare+0xfd0>)
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    a03a:	0004      	movs	r4, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    a03c:	002e      	movs	r6, r5
    a03e:	36fc      	adds	r6, #252	; 0xfc
    a040:	6b30      	ldr	r0, [r6, #48]	; 0x30
    a042:	f7fc fba4 	bl	678e <mem_free_count_get>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    a046:	1904      	adds	r4, r0, r4
    a048:	b2a0      	uxth	r0, r4
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    a04a:	28ff      	cmp	r0, #255	; 0xff
    a04c:	d900      	bls.n	a050 <event_connection_prepare+0xdcc>
    a04e:	e08b      	b.n	a168 <event_connection_prepare+0xee4>

		if (_radio.packet_rx_data_count != free_count_rx) {
    a050:	239b      	movs	r3, #155	; 0x9b
    a052:	005b      	lsls	r3, r3, #1
    a054:	5ceb      	ldrb	r3, [r5, r3]
    a056:	4283      	cmp	r3, r0
    a058:	d000      	beq.n	a05c <event_connection_prepare+0xdd8>
    a05a:	e085      	b.n	a168 <event_connection_prepare+0xee4>
			 */
			LL_ASSERT(0);
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
    a05c:	003b      	movs	r3, r7
    a05e:	33b4      	adds	r3, #180	; 0xb4
    a060:	781b      	ldrb	r3, [r3, #0]
    a062:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		conn->procedure_expire = 0;

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    a064:	2108      	movs	r1, #8
			 */
			LL_ASSERT(0);
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
    a066:	7013      	strb	r3, [r2, #0]
		conn->procedure_expire = 0;
    a068:	2300      	movs	r3, #0
    a06a:	877b      	strh	r3, [r7, #58]	; 0x3a

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    a06c:	6973      	ldr	r3, [r6, #20]
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
		if (_radio.advertiser.conn) {
    a06e:	35c8      	adds	r5, #200	; 0xc8
		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
		conn->procedure_expire = 0;

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    a070:	33c0      	adds	r3, #192	; 0xc0
    a072:	781a      	ldrb	r2, [r3, #0]
    a074:	438a      	bics	r2, r1
    a076:	701a      	strb	r2, [r3, #0]

		/* Use the new rx octets in the connection */
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    a078:	003b      	movs	r3, r7
    a07a:	33b8      	adds	r3, #184	; 0xb8
    a07c:	881b      	ldrh	r3, [r3, #0]
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    a07e:	68f0      	ldr	r0, [r6, #12]

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;

		/* Use the new rx octets in the connection */
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    a080:	863b      	strh	r3, [r7, #48]	; 0x30
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    a082:	f7fc fb84 	bl	678e <mem_free_count_get>
		if (_radio.advertiser.conn) {
    a086:	682b      	ldr	r3, [r5, #0]
    a088:	2b00      	cmp	r3, #0
    a08a:	d001      	beq.n	a090 <event_connection_prepare+0xe0c>
			free_count_conn++;
    a08c:	3001      	adds	r0, #1
    a08e:	b280      	uxth	r0, r0
		}
		if (_radio.scanner.conn) {
    a090:	4b70      	ldr	r3, [pc, #448]	; (a254 <event_connection_prepare+0xfd0>)
    a092:	001a      	movs	r2, r3
    a094:	32fc      	adds	r2, #252	; 0xfc
    a096:	6812      	ldr	r2, [r2, #0]
    a098:	2a00      	cmp	r2, #0
    a09a:	d001      	beq.n	a0a0 <event_connection_prepare+0xe1c>
			free_count_conn++;
    a09c:	3001      	adds	r0, #1
    a09e:	b280      	uxth	r0, r0
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    a0a0:	2103      	movs	r1, #3
    a0a2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    a0a4:	3001      	adds	r0, #1
			free_count_conn++;
		}
		if (_radio.scanner.conn) {
			free_count_conn++;
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    a0a6:	320e      	adds	r2, #14
    a0a8:	438a      	bics	r2, r1
    a0aa:	b292      	uxth	r2, r2
    a0ac:	920c      	str	r2, [sp, #48]	; 0x30
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    a0ae:	001a      	movs	r2, r3
    a0b0:	32ff      	adds	r2, #255	; 0xff
    a0b2:	7b52      	ldrb	r2, [r2, #13]
    a0b4:	4290      	cmp	r0, r2
    a0b6:	d004      	beq.n	a0c2 <event_connection_prepare+0xe3e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
    a0b8:	33fe      	adds	r3, #254	; 0xfe
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    a0ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    a0bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a0be:	4293      	cmp	r3, r2
    a0c0:	d24d      	bcs.n	a15e <event_connection_prepare+0xeda>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    a0c2:	269f      	movs	r6, #159	; 0x9f
    a0c4:	0076      	lsls	r6, r6, #1
				_radio.packet_rx_last) {
    a0c6:	223e      	movs	r2, #62	; 0x3e
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    a0c8:	4d62      	ldr	r5, [pc, #392]	; (a254 <event_connection_prepare+0xfd0>)
				_radio.packet_rx_last) {
    a0ca:	32ff      	adds	r2, #255	; 0xff
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    a0cc:	5dab      	ldrb	r3, [r5, r6]
				_radio.packet_rx_last) {
    a0ce:	5caa      	ldrb	r2, [r5, r2]
    a0d0:	002c      	movs	r4, r5
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    a0d2:	4293      	cmp	r3, r2
    a0d4:	d01f      	beq.n	a116 <event_connection_prepare+0xe92>
				_radio.packet_rx_last) {

				struct radio_pdu_node_rx *node_rx;

				if (_radio.packet_rx_acquire == 0) {
    a0d6:	2b00      	cmp	r3, #0
    a0d8:	d102      	bne.n	a0e0 <event_connection_prepare+0xe5c>
					_radio.packet_rx_acquire =
    a0da:	333d      	adds	r3, #61	; 0x3d
    a0dc:	33ff      	adds	r3, #255	; 0xff
    a0de:	5ceb      	ldrb	r3, [r5, r3]
						_radio.packet_rx_count - 1;
				} else {
					_radio.packet_rx_acquire -= 1;
    a0e0:	3b01      	subs	r3, #1
    a0e2:	55ab      	strb	r3, [r5, r6]
				}

				node_rx = _radio.packet_rx[
    a0e4:	239f      	movs	r3, #159	; 0x9f
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    a0e6:	0021      	movs	r1, r4
						_radio.packet_rx_count - 1;
				} else {
					_radio.packet_rx_acquire -= 1;
				}

				node_rx = _radio.packet_rx[
    a0e8:	005b      	lsls	r3, r3, #1
    a0ea:	5ceb      	ldrb	r3, [r5, r3]
    a0ec:	34fc      	adds	r4, #252	; 0xfc
    a0ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    a0f0:	009b      	lsls	r3, r3, #2
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    a0f2:	589b      	ldr	r3, [r3, r2]
    a0f4:	3145      	adds	r1, #69	; 0x45
    a0f6:	31ff      	adds	r1, #255	; 0xff
    a0f8:	6818      	ldr	r0, [r3, #0]
    a0fa:	f7fc fb32 	bl	6762 <mem_release>
					&_radio.link_rx_free);

				LL_ASSERT(_radio.link_rx_data_quota <
    a0fe:	229e      	movs	r2, #158	; 0x9e
    a100:	21a8      	movs	r1, #168	; 0xa8
    a102:	0052      	lsls	r2, r2, #1
    a104:	0049      	lsls	r1, r1, #1
    a106:	5caa      	ldrb	r2, [r5, r2]
    a108:	5c6b      	ldrb	r3, [r5, r1]
    a10a:	3a01      	subs	r2, #1
    a10c:	4293      	cmp	r3, r2
    a10e:	da2b      	bge.n	a168 <event_connection_prepare+0xee4>
					  (_radio.packet_rx_count - 1));
				_radio.link_rx_data_quota++;
    a110:	3301      	adds	r3, #1
    a112:	546b      	strb	r3, [r5, r1]
    a114:	e7d7      	b.n	a0c6 <event_connection_prepare+0xe42>
    a116:	002b      	movs	r3, r5
				 * later down in code.
				 */
			}

			/* calculate the new rx node size and new count */
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX + 1)) {
    a118:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    a11a:	33fe      	adds	r3, #254	; 0xfe
    a11c:	2a27      	cmp	r2, #39	; 0x27
    a11e:	d801      	bhi.n	a124 <event_connection_prepare+0xea0>
				_radio.packet_rx_data_size =
    a120:	2230      	movs	r2, #48	; 0x30
    a122:	e001      	b.n	a128 <event_connection_prepare+0xea4>
				    MROUND(offsetof(struct radio_pdu_node_rx,
						    pdu_data) +
					   (PDU_AC_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
    a124:	466a      	mov	r2, sp
    a126:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    a128:	86da      	strh	r2, [r3, #54]	; 0x36
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
    a12a:	0023      	movs	r3, r4
    a12c:	33fe      	adds	r3, #254	; 0xfe
    a12e:	8edd      	ldrh	r5, [r3, #54]	; 0x36
					   (PDU_AC_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
    a130:	8e98      	ldrh	r0, [r3, #52]	; 0x34
    a132:	0029      	movs	r1, r5
    a134:	f7f6 f84a 	bl	1cc <__aeabi_uidiv>
    a138:	219b      	movs	r1, #155	; 0x9b
    a13a:	b282      	uxth	r2, r0
    a13c:	b2d3      	uxtb	r3, r2
    a13e:	0049      	lsls	r1, r1, #1
    a140:	5463      	strb	r3, [r4, r1]
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
			LL_ASSERT(_radio.packet_rx_data_count);
    a142:	2b00      	cmp	r3, #0
    a144:	d010      	beq.n	a168 <event_connection_prepare+0xee4>

			/* re-size (re-init) the free rx pool */
			mem_init(_radio.pkt_rx_data_pool,
    a146:	0023      	movs	r3, r4
    a148:	34fc      	adds	r4, #252	; 0xfc
    a14a:	332d      	adds	r3, #45	; 0x2d
    a14c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a14e:	33ff      	adds	r3, #255	; 0xff
    a150:	b2d2      	uxtb	r2, r2
    a152:	0029      	movs	r1, r5
    a154:	f7fc fac6 	bl	66e4 <mem_init>
				 &_radio.pkt_rx_data_free);

			/* allocate the rx queue include one extra for
			 * generating event in following lines.
			 */
			packet_rx_allocate(4);
    a158:	2004      	movs	r0, #4
    a15a:	f7fd fef3 	bl	7f44 <packet_rx_allocate>
		}

		/* Prepare the rx packet structure */
		node_rx = packet_rx_reserve_get(2);
    a15e:	2002      	movs	r0, #2
    a160:	f7fd feda 	bl	7f18 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    a164:	2800      	cmp	r0, #0
    a166:	d102      	bne.n	a16e <event_connection_prepare+0xeea>
    a168:	b662      	cpsie	i
    a16a:	2004      	movs	r0, #4
    a16c:	df02      	svc	2
		node_rx->hdr.handle = conn->handle;
    a16e:	8c3b      	ldrh	r3, [r7, #32]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare length rsp structure */
		pdu_ctrl_rx = (struct pdu_data *) node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    a170:	2203      	movs	r2, #3
		}

		/* Prepare the rx packet structure */
		node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(node_rx);
		node_rx->hdr.handle = conn->handle;
    a172:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    a174:	2301      	movs	r3, #1
    a176:	7103      	strb	r3, [r0, #4]

		/* prepare length rsp structure */
		pdu_ctrl_rx = (struct pdu_data *) node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    a178:	7a03      	ldrb	r3, [r0, #8]
    a17a:	4313      	orrs	r3, r2
    a17c:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
    a17e:	2309      	movs	r3, #9
    a180:	7243      	strb	r3, [r0, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_rx->payload.llctrl.opcode =
    a182:	330c      	adds	r3, #12
    a184:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
    a186:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    a188:	0a1a      	lsrs	r2, r3, #8
    a18a:	7303      	strb	r3, [r0, #12]
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
    a18c:	330e      	adds	r3, #14
    a18e:	00db      	lsls	r3, r3, #3
    a190:	b29b      	uxth	r3, r3
    a192:	7383      	strb	r3, [r0, #14]
    a194:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
    a196:	7342      	strb	r2, [r0, #13]
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
    a198:	73c3      	strb	r3, [r0, #15]
		lr->max_tx_octets = conn->max_tx_octets;
    a19a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    a19c:	0a1a      	lsrs	r2, r3, #8
    a19e:	7403      	strb	r3, [r0, #16]
		lr->max_tx_time = ((conn->max_tx_octets + 14) << 3);
    a1a0:	330e      	adds	r3, #14
    a1a2:	00db      	lsls	r3, r3, #3
    a1a4:	b29b      	uxth	r3, r3
    a1a6:	7483      	strb	r3, [r0, #18]
    a1a8:	0a1b      	lsrs	r3, r3, #8

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
		lr->max_tx_octets = conn->max_tx_octets;
    a1aa:	7442      	strb	r2, [r0, #17]
		lr->max_tx_time = ((conn->max_tx_octets + 14) << 3);
    a1ac:	74c3      	strb	r3, [r0, #19]

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
    a1ae:	f7fe fa4b 	bl	8648 <packet_rx_enqueue>
				   &conn->hdr.ticks_xtal_to_start,
				   &conn->hdr.ticks_active_to_start,
				   conn->hdr.ticks_preempt_to_start,
				   (RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle),
				   (conn->role.slave.role != 0) ? event_slave :
    a1b2:	0039      	movs	r1, r7
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    a1b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				   &conn->hdr.ticks_xtal_to_start,
				   &conn->hdr.ticks_active_to_start,
				   conn->hdr.ticks_preempt_to_start,
				   (RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle),
				   (conn->role.slave.role != 0) ? event_slave :
    a1b6:	3144      	adds	r1, #68	; 0x44
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    a1b8:	3201      	adds	r2, #1
    a1ba:	847a      	strh	r2, [r7, #34]	; 0x22

	/* Setup XTAL startup and radio active events */
	err = event_common_prepare(ticks_at_expire, remainder,
    a1bc:	8c3a      	ldrh	r2, [r7, #32]
    a1be:	780c      	ldrb	r4, [r1, #0]
    a1c0:	3207      	adds	r2, #7
    a1c2:	1d3b      	adds	r3, r7, #4
    a1c4:	68b8      	ldr	r0, [r7, #8]
    a1c6:	b2d2      	uxtb	r2, r2
    a1c8:	4923      	ldr	r1, [pc, #140]	; (a258 <event_connection_prepare+0xfd4>)
    a1ca:	07e4      	lsls	r4, r4, #31
    a1cc:	d400      	bmi.n	a1d0 <event_connection_prepare+0xf4c>
    a1ce:	4923      	ldr	r1, [pc, #140]	; (a25c <event_connection_prepare+0xfd8>)
    a1d0:	9102      	str	r1, [sp, #8]
    a1d2:	9201      	str	r2, [sp, #4]
    a1d4:	9000      	str	r0, [sp, #0]
    a1d6:	9703      	str	r7, [sp, #12]
    a1d8:	003a      	movs	r2, r7
    a1da:	9911      	ldr	r1, [sp, #68]	; 0x44
    a1dc:	980d      	ldr	r0, [sp, #52]	; 0x34
    a1de:	f7fe fca1 	bl	8b24 <event_common_prepare>
				   (RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle),
				   (conn->role.slave.role != 0) ? event_slave :
								  event_master,
				   conn);
	if (!err) {
    a1e2:	2800      	cmp	r0, #0
    a1e4:	d133      	bne.n	a24e <event_connection_prepare+0xfca>
		_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    a1e6:	8c3b      	ldrh	r3, [r7, #32]
    a1e8:	4a1a      	ldr	r2, [pc, #104]	; (a254 <event_connection_prepare+0xfd0>)
    a1ea:	3307      	adds	r3, #7
    a1ec:	b2db      	uxtb	r3, r3
    a1ee:	7313      	strb	r3, [r2, #12]
    a1f0:	e02d      	b.n	a24e <event_connection_prepare+0xfca>
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
    a1f2:	003b      	movs	r3, r7
    a1f4:	2201      	movs	r2, #1
    a1f6:	3394      	adds	r3, #148	; 0x94
    a1f8:	701a      	strb	r2, [r3, #0]
		conn->llcp.connection_update.win_offset_us = 0;
    a1fa:	2300      	movs	r3, #0
		conn->llcp.connection_update.interval = conn->conn_interval;
    a1fc:	466a      	mov	r2, sp
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
    a1fe:	602b      	str	r3, [r5, #0]
		conn->llcp.connection_update.interval = conn->conn_interval;
    a200:	003b      	movs	r3, r7
    a202:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    a204:	336c      	adds	r3, #108	; 0x6c
    a206:	801a      	strh	r2, [r3, #0]
		conn->llcp.connection_update.latency = conn->latency;
    a208:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
		conn->llcp.connection_update.timeout = conn->conn_interval *
    a20a:	21fa      	movs	r1, #250	; 0xfa
	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
    a20c:	805a      	strh	r2, [r3, #2]
		conn->llcp.connection_update.timeout = conn->conn_interval *
    a20e:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
    a210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a212:	0089      	lsls	r1, r1, #2
    a214:	4343      	muls	r3, r0
    a216:	0018      	movs	r0, r3
    a218:	237d      	movs	r3, #125	; 0x7d
    a21a:	4358      	muls	r0, r3
    a21c:	f7f6 f860 	bl	2e0 <__aeabi_idiv>
    a220:	003b      	movs	r3, r7
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    a222:	2207      	movs	r2, #7
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
    a224:	3370      	adds	r3, #112	; 0x70
    a226:	8018      	strh	r0, [r3, #0]
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    a228:	7823      	ldrb	r3, [r4, #0]
    a22a:	4393      	bics	r3, r2
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    a22c:	3a05      	subs	r2, #5
    a22e:	4313      	orrs	r3, r2
    a230:	3216      	adds	r2, #22
    a232:	4393      	bics	r3, r2
    a234:	3a10      	subs	r2, #16
    a236:	4313      	orrs	r3, r2
    a238:	7023      	strb	r3, [r4, #0]

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
    a23a:	003b      	movs	r3, r7
    a23c:	3a07      	subs	r2, #7
    a23e:	336a      	adds	r3, #106	; 0x6a
    a240:	701a      	strb	r2, [r3, #0]
		conn->llcp_ack--;
    a242:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a244:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a246:	3b01      	subs	r3, #1
    a248:	7013      	strb	r3, [r2, #0]
    a24a:	f7ff fb5a 	bl	9902 <event_connection_prepare+0x67e>
				   conn);
	if (!err) {
		_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
					   conn->handle;
	}
}
    a24e:	b013      	add	sp, #76	; 0x4c
    a250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a252:	46c0      	nop			; (mov r8, r8)
    a254:	20000ea0 	.word	0x20000ea0
    a258:	00008fe1 	.word	0x00008fe1
    a25c:	0000a3ad 	.word	0x0000a3ad

0000a260 <event_master_prepare>:
	DEBUG_RADIO_START_S(0);
}

static void event_master_prepare(u32_t ticks_at_expire, u32_t remainder,
				 u16_t lazy, void *context)
{
    a260:	b510      	push	{r4, lr}
	DEBUG_RADIO_PREPARE_M(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    a262:	f7ff f80f 	bl	9284 <event_connection_prepare>

	DEBUG_RADIO_PREPARE_M(0);
}
    a266:	bd10      	pop	{r4, pc}

0000a268 <event_slave_prepare>:
    a268:	b510      	push	{r4, lr}
    a26a:	f7ff f80b 	bl	9284 <event_connection_prepare>
    a26e:	bd10      	pop	{r4, pc}

0000a270 <mayfly_xtal_stop_calc>:
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    a270:	b530      	push	{r4, r5, lr}
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a272:	2302      	movs	r3, #2
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    a274:	2523      	movs	r5, #35	; 0x23
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    a276:	b08d      	sub	sp, #52	; 0x34
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a278:	9309      	str	r3, [sp, #36]	; 0x24
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    a27a:	446d      	add	r5, sp
    a27c:	33fd      	adds	r3, #253	; 0xfd
    a27e:	702b      	strb	r3, [r5, #0]
	ticks_to_expire = 0;
    a280:	2300      	movs	r3, #0
    a282:	930a      	str	r3, [sp, #40]	; 0x28
	do {
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    a284:	ab09      	add	r3, sp, #36	; 0x24
    a286:	9302      	str	r3, [sp, #8]
    a288:	4b43      	ldr	r3, [pc, #268]	; (a398 <mayfly_xtal_stop_calc+0x128>)
    a28a:	002a      	movs	r2, r5
    a28c:	9301      	str	r3, [sp, #4]
    a28e:	ab0a      	add	r3, sp, #40	; 0x28
    a290:	9300      	str	r3, [sp, #0]
    a292:	2101      	movs	r1, #1
    a294:	ab0b      	add	r3, sp, #44	; 0x2c
    a296:	2000      	movs	r0, #0
    a298:	f7fd fd5e 	bl	7d58 <ticker_next_slot_get>
					   RADIO_TICKER_USER_ID_JOB, &ticker_id,
					   &ticks_current, &ticks_to_expire,
					   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    a29c:	2802      	cmp	r0, #2
    a29e:	d003      	beq.n	a2a8 <mayfly_xtal_stop_calc+0x38>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
						 RADIO_TICKER_USER_ID_JOB);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    a2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2a2:	2b00      	cmp	r3, #0
    a2a4:	d008      	beq.n	a2b8 <mayfly_xtal_stop_calc+0x48>
    a2a6:	e020      	b.n	a2ea <mayfly_xtal_stop_calc+0x7a>
					   RADIO_TICKER_USER_ID_JOB, &ticker_id,
					   &ticks_current, &ticks_to_expire,
					   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
    a2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2aa:	2b02      	cmp	r3, #2
    a2ac:	d1f8      	bne.n	a2a0 <mayfly_xtal_stop_calc+0x30>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    a2ae:	2101      	movs	r1, #1
    a2b0:	2000      	movs	r0, #0
    a2b2:	f7fd fdaf 	bl	7e14 <ticker_job_sched>
    a2b6:	e7f7      	b.n	a2a8 <mayfly_xtal_stop_calc+0x38>
						 RADIO_TICKER_USER_ID_JOB);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
	} while (ticker_id != 0xff &&
    a2b8:	782a      	ldrb	r2, [r5, #0]
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
			       _radio.connection_count));
    a2ba:	2aff      	cmp	r2, #255	; 0xff
    a2bc:	d018      	beq.n	a2f0 <mayfly_xtal_stop_calc+0x80>
    a2be:	4c37      	ldr	r4, [pc, #220]	; (a39c <mayfly_xtal_stop_calc+0x12c>)
    a2c0:	0023      	movs	r3, r4
    a2c2:	33ff      	adds	r3, #255	; 0xff
						 RADIO_TICKER_USER_ID_JOB);
			}
		}

		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
	} while (ticker_id != 0xff &&
    a2c4:	7b5b      	ldrb	r3, [r3, #13]
    a2c6:	3307      	adds	r3, #7
    a2c8:	429a      	cmp	r2, r3
    a2ca:	dadb      	bge.n	a284 <mayfly_xtal_stop_calc+0x14>
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
			       _radio.connection_count));

	if ((ticker_id != 0xff) &&
    a2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a2ce:	2ba8      	cmp	r3, #168	; 0xa8
    a2d0:	d80e      	bhi.n	a2f0 <mayfly_xtal_stop_calc+0x80>
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
{
	static u8_t s_xtal_retained;

	if (retain) {
		if (!s_xtal_retained) {
    a2d2:	4b33      	ldr	r3, [pc, #204]	; (a3a0 <mayfly_xtal_stop_calc+0x130>)
    a2d4:	7819      	ldrb	r1, [r3, #0]
    a2d6:	2900      	cmp	r1, #0
    a2d8:	d12d      	bne.n	a336 <mayfly_xtal_stop_calc+0xc6>
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);

			s_xtal_retained = 1;
    a2da:	2001      	movs	r0, #1

			retval = mayfly_enqueue(caller_id,
    a2dc:	000a      	movs	r2, r1
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);

			s_xtal_retained = 1;
    a2de:	7018      	strb	r0, [r3, #0]

			retval = mayfly_enqueue(caller_id,
    a2e0:	4b30      	ldr	r3, [pc, #192]	; (a3a4 <mayfly_xtal_stop_calc+0x134>)
    a2e2:	f7fc f91d 	bl	6520 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
    a2e6:	2800      	cmp	r0, #0
    a2e8:	d025      	beq.n	a336 <mayfly_xtal_stop_calc+0xc6>
							      ticks_drift_plus, 0,
							      0, ticks_drift_plus,
							      0, 0,
							      prepare_reduced,
							      hdr);
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
    a2ea:	b662      	cpsie	i
    a2ec:	2004      	movs	r0, #4
    a2ee:	df02      	svc	2
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
		}
	} else {
		if (s_xtal_retained) {
    a2f0:	4b2b      	ldr	r3, [pc, #172]	; (a3a0 <mayfly_xtal_stop_calc+0x130>)
    a2f2:	781b      	ldrb	r3, [r3, #0]
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d002      	beq.n	a2fe <mayfly_xtal_stop_calc+0x8e>
    a2f8:	2001      	movs	r0, #1
    a2fa:	f7fe f943 	bl	8584 <mayfly_xtal_retain.part.15>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
		}
	} else {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);

		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
    a2fe:	782a      	ldrb	r2, [r5, #0]
    a300:	1f53      	subs	r3, r2, #5
    a302:	b2db      	uxtb	r3, r3
    a304:	2bf9      	cmp	r3, #249	; 0xf9
    a306:	d845      	bhi.n	a394 <mayfly_xtal_stop_calc+0x124>
    a308:	4b24      	ldr	r3, [pc, #144]	; (a39c <mayfly_xtal_stop_calc+0x12c>)
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a30a:	2a06      	cmp	r2, #6
    a30c:	d908      	bls.n	a320 <mayfly_xtal_stop_calc+0xb0>
				struct connection *conn;

				conn = mem_get(_radio.conn_pool,
    a30e:	218c      	movs	r1, #140	; 0x8c
    a310:	33fc      	adds	r3, #252	; 0xfc
    a312:	3a07      	subs	r2, #7
    a314:	b292      	uxth	r2, r2
    a316:	0049      	lsls	r1, r1, #1
    a318:	6898      	ldr	r0, [r3, #8]
    a31a:	f7fc fa40 	bl	679e <mem_get>
    a31e:	e005      	b.n	a32c <mayfly_xtal_stop_calc+0xbc>
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    a320:	0018      	movs	r0, r3
    a322:	3014      	adds	r0, #20
				conn = mem_get(_radio.conn_pool,
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    a324:	2a05      	cmp	r2, #5
    a326:	d001      	beq.n	a32c <mayfly_xtal_stop_calc+0xbc>
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    a328:	33cc      	adds	r3, #204	; 0xcc
    a32a:	0018      	movs	r0, r3
			} else {
				LL_ASSERT(0);
			}

			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
    a32c:	782a      	ldrb	r2, [r5, #0]
    a32e:	2101      	movs	r1, #1
    a330:	f7fe f944 	bl	85bc <prepare_normal_set>
					   ticker_id);
		}
	}
}
    a334:	e02e      	b.n	a394 <mayfly_xtal_stop_calc+0x124>
	if ((ticker_id != 0xff) &&
	    (ticks_to_expire <
	     TICKER_US_TO_TICKS(CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD))) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);

		if (ticker_id >= RADIO_TICKER_ID_ADV) {
    a336:	782a      	ldrb	r2, [r5, #0]
    a338:	2a04      	cmp	r2, #4
    a33a:	d92b      	bls.n	a394 <mayfly_xtal_stop_calc+0x124>
			u32_t ticks_prepare_to_start;
			struct connection *conn = NULL;
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a33c:	2a06      	cmp	r2, #6
    a33e:	d908      	bls.n	a352 <mayfly_xtal_stop_calc+0xe2>
				conn = mem_get(_radio.conn_pool,
    a340:	218c      	movs	r1, #140	; 0x8c
    a342:	34fc      	adds	r4, #252	; 0xfc
    a344:	3a07      	subs	r2, #7
    a346:	b292      	uxth	r2, r2
    a348:	0049      	lsls	r1, r1, #1
    a34a:	68a0      	ldr	r0, [r4, #8]
    a34c:	f7fc fa27 	bl	679e <mem_get>
    a350:	e004      	b.n	a35c <mayfly_xtal_stop_calc+0xec>
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    a352:	0020      	movs	r0, r4
    a354:	3014      	adds	r0, #20
				conn = mem_get(_radio.conn_pool,
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    a356:	2a05      	cmp	r2, #5
    a358:	d000      	beq.n	a35c <mayfly_xtal_stop_calc+0xec>
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    a35a:	30b8      	adds	r0, #184	; 0xb8
			}

			/* compensate for reduced next ticker's prepare or
			 * reduce next ticker's prepare.
			 */
			ticks_prepare_to_start =
    a35c:	6843      	ldr	r3, [r0, #4]
    a35e:	6882      	ldr	r2, [r0, #8]
    a360:	429a      	cmp	r2, r3
    a362:	d200      	bcs.n	a366 <mayfly_xtal_stop_calc+0xf6>
    a364:	001a      	movs	r2, r3
				(hdr->ticks_active_to_start >
				 hdr->ticks_preempt_to_start) ?
				hdr->ticks_active_to_start :
				hdr->ticks_preempt_to_start;
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
    a366:	6803      	ldr	r3, [r0, #0]
    a368:	2b00      	cmp	r3, #0
    a36a:	db13      	blt.n	a394 <mayfly_xtal_stop_calc+0x124>
						    ticks_prepare_to_start);
			} else {
				/* Postpone the primary because we dont have
				 * to start xtal.
				 */
				if (hdr->ticks_xtal_to_start >
    a36c:	429a      	cmp	r2, r3
    a36e:	d211      	bcs.n	a394 <mayfly_xtal_stop_calc+0x124>
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
						ticker_update(
    a370:	1a9b      	subs	r3, r3, r2
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    a372:	782a      	ldrb	r2, [r5, #0]
    a374:	9006      	str	r0, [sp, #24]
    a376:	2000      	movs	r0, #0
    a378:	490b      	ldr	r1, [pc, #44]	; (a3a8 <mayfly_xtal_stop_calc+0x138>)
						ticker_update(
    a37a:	b29b      	uxth	r3, r3
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    a37c:	9105      	str	r1, [sp, #20]
    a37e:	9302      	str	r3, [sp, #8]
    a380:	9004      	str	r0, [sp, #16]
    a382:	9003      	str	r0, [sp, #12]
    a384:	9001      	str	r0, [sp, #4]
    a386:	9000      	str	r0, [sp, #0]
    a388:	2101      	movs	r1, #1
    a38a:	f7fd fc67 	bl	7c5c <ticker_update>
							      ticks_drift_plus, 0,
							      0, ticks_drift_plus,
							      0, 0,
							      prepare_reduced,
							      hdr);
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
    a38e:	2302      	movs	r3, #2
    a390:	4398      	bics	r0, r3
    a392:	d1aa      	bne.n	a2ea <mayfly_xtal_stop_calc+0x7a>
			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
					   ticker_id);
		}
	}
}
    a394:	b00d      	add	sp, #52	; 0x34
    a396:	bd30      	pop	{r4, r5, pc}
    a398:	00007e95 	.word	0x00007e95
    a39c:	20000ea0 	.word	0x20000ea0
    a3a0:	20000e8c 	.word	0x20000e8c
    a3a4:	20000648 	.word	0x20000648
    a3a8:	00007e99 	.word	0x00007e99

0000a3ac <event_master>:
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    a3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3ae:	001c      	movs	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    a3b0:	4b4e      	ldr	r3, [pc, #312]	; (a4ec <event_master+0x140>)
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    a3b2:	b085      	sub	sp, #20
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    a3b4:	7bd9      	ldrb	r1, [r3, #15]
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    a3b6:	0005      	movs	r5, r0
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    a3b8:	b2c9      	uxtb	r1, r1
    a3ba:	2900      	cmp	r1, #0
    a3bc:	d000      	beq.n	a3c0 <event_master+0x14>
    a3be:	e090      	b.n	a4e2 <event_master+0x136>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    a3c0:	7b1a      	ldrb	r2, [r3, #12]
    a3c2:	8c20      	ldrh	r0, [r4, #32]
    a3c4:	b2d2      	uxtb	r2, r2
    a3c6:	3007      	adds	r0, #7
    a3c8:	4282      	cmp	r2, r0
    a3ca:	d000      	beq.n	a3ce <event_master+0x22>
    a3cc:	e089      	b.n	a4e2 <event_master+0x136>
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    a3ce:	2604      	movs	r6, #4
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    a3d0:	b2d2      	uxtb	r2, r2

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    a3d2:	73de      	strb	r6, [r3, #15]
	_radio.state = STATE_TX;
    a3d4:	2002      	movs	r0, #2
	_radio.ticker_id_prepare = 0;
    a3d6:	7319      	strb	r1, [r3, #12]
	_radio.ticker_id_event =
    a3d8:	735a      	strb	r2, [r3, #13]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    a3da:	001a      	movs	r2, r3
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
    a3dc:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    a3de:	32ff      	adds	r2, #255	; 0xff
	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    a3e0:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    a3e2:	33fc      	adds	r3, #252	; 0xfc
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    a3e4:	7551      	strb	r1, [r2, #21]
	_radio.crc_expire = 0;
    a3e6:	7591      	strb	r1, [r2, #22]

	_radio.conn_curr = conn;
    a3e8:	615c      	str	r4, [r3, #20]

	conn->latency_event = conn->latency_prepare;
    a3ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	conn->latency_prepare = 0;
    a3ec:	8521      	strh	r1, [r4, #40]	; 0x28
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    a3ee:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    a3f0:	f7fe fa3a 	bl	8868 <packet_tx_enqueue>

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    a3f4:	a903      	add	r1, sp, #12
    a3f6:	0020      	movs	r0, r4
    a3f8:	f7fd ffea 	bl	83d0 <prepare_pdu_data_tx>

	pdu_data_tx->sn = conn->sn;
    a3fc:	0020      	movs	r0, r4
    a3fe:	2701      	movs	r7, #1
    a400:	30c0      	adds	r0, #192	; 0xc0
    a402:	7803      	ldrb	r3, [r0, #0]
    a404:	9903      	ldr	r1, [sp, #12]
    a406:	403b      	ands	r3, r7
    a408:	00db      	lsls	r3, r3, #3
    a40a:	9301      	str	r3, [sp, #4]
    a40c:	780b      	ldrb	r3, [r1, #0]
    a40e:	001a      	movs	r2, r3
    a410:	2308      	movs	r3, #8
    a412:	439a      	bics	r2, r3
    a414:	0013      	movs	r3, r2
    a416:	9a01      	ldr	r2, [sp, #4]
    a418:	4313      	orrs	r3, r2
    a41a:	700b      	strb	r3, [r1, #0]
	pdu_data_tx->nesn = conn->nesn;
    a41c:	7803      	ldrb	r3, [r0, #0]

	connection_configure(conn);
    a41e:	0020      	movs	r0, r4

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);

	pdu_data_tx->sn = conn->sn;
	pdu_data_tx->nesn = conn->nesn;
    a420:	40fb      	lsrs	r3, r7
    a422:	403b      	ands	r3, r7
    a424:	009a      	lsls	r2, r3, #2
    a426:	780b      	ldrb	r3, [r1, #0]
    a428:	43b3      	bics	r3, r6
    a42a:	4313      	orrs	r3, r2
    a42c:	700b      	strb	r3, [r1, #0]

	connection_configure(conn);
    a42e:	f7fe fdb9 	bl	8fa4 <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    a432:	2096      	movs	r0, #150	; 0x96
    a434:	f7fc fc4c 	bl	6cd0 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_rx(conn->phy_rx);
    a438:	0023      	movs	r3, r4
    a43a:	0026      	movs	r6, r4
    a43c:	3333      	adds	r3, #51	; 0x33
    a43e:	7818      	ldrb	r0, [r3, #0]
    a440:	3617      	adds	r6, #23
    a442:	0680      	lsls	r0, r0, #26
    a444:	0f40      	lsrs	r0, r0, #29
    a446:	f7fc fb9f 	bl	6b88 <radio_switch_complete_and_rx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	tx_packet_set(conn, pdu_data_tx);
    a44a:	9903      	ldr	r1, [sp, #12]
    a44c:	0020      	movs	r0, r4
    a44e:	f7fe f846 	bl	84de <tx_packet_set>

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    a452:	7f22      	ldrb	r2, [r4, #28]
    a454:	0693      	lsls	r3, r2, #26
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    a456:	0e9b      	lsrs	r3, r3, #26
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	tx_packet_set(conn, pdu_data_tx);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    a458:	0652      	lsls	r2, r2, #25
    a45a:	d507      	bpl.n	a46c <event_master+0xc0>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    a45c:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    a45e:	8be1      	ldrh	r1, [r4, #30]
    a460:	3801      	subs	r0, #1
    a462:	0032      	movs	r2, r6
    a464:	b280      	uxth	r0, r0
    a466:	f7fe fcdb 	bl	8e20 <chan_sel_2>
    a46a:	e019      	b.n	a4a0 <event_master+0xf4>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    a46c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    a46e:	9301      	str	r3, [sp, #4]
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    a470:	7fa3      	ldrb	r3, [r4, #30]
    a472:	3001      	adds	r0, #1
    a474:	4358      	muls	r0, r3
    a476:	7fe3      	ldrb	r3, [r4, #31]
    a478:	2125      	movs	r1, #37	; 0x25
    a47a:	18c0      	adds	r0, r0, r3
    a47c:	f7f6 f816 	bl	4ac <__aeabi_idivmod>
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    a480:	2207      	movs	r2, #7
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    a482:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    a484:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    a486:	08c3      	lsrs	r3, r0, #3
    a488:	5cf3      	ldrb	r3, [r6, r3]
    a48a:	4011      	ands	r1, r2
    a48c:	410b      	asrs	r3, r1
    a48e:	423b      	tst	r3, r7
    a490:	d106      	bne.n	a4a0 <event_master+0xf4>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    a492:	9901      	ldr	r1, [sp, #4]
    a494:	f7f5 ff20 	bl	2d8 <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    a498:	0030      	movs	r0, r6
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    a49a:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    a49c:	f7fd fd0b 	bl	7eb6 <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    a4a0:	f7fe f932 	bl	8708 <chan_set>
	     (conn->supervision_expire <= 6)) ||
	    ((conn->role.master.connect_expire != 0) &&
	     (conn->role.master.connect_expire <= 6)))
#endif
	{
		radio_tmr_start(1, ticks_at_expire +
    a4a4:	0029      	movs	r1, r5
    a4a6:	4e11      	ldr	r6, [pc, #68]	; (a4ec <event_master+0x140>)
    a4a8:	3109      	adds	r1, #9
    a4aa:	68b2      	ldr	r2, [r6, #8]
    a4ac:	2001      	movs	r0, #1
    a4ae:	f7fc fc17 	bl	6ce0 <radio_tmr_start>
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
		radio_tmr_end_capture();
    a4b2:	f7fc fcd9 	bl	6e68 <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    a4b6:	8c21      	ldrh	r1, [r4, #32]
    a4b8:	002a      	movs	r2, r5
    a4ba:	3107      	adds	r1, #7
    a4bc:	b2c9      	uxtb	r1, r1
    a4be:	0020      	movs	r0, r4
    a4c0:	f7fe fcf0 	bl	8ea4 <preempt_calc>
#endif

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
    a4c4:	2800      	cmp	r0, #0
    a4c6:	d004      	beq.n	a4d2 <event_master+0x126>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
				      conn->handle), ticks_at_expire)) {
		_radio.state = STATE_STOP;
    a4c8:	2304      	movs	r3, #4
    a4ca:	7433      	strb	r3, [r6, #16]
		radio_disable();
    a4cc:	f7fc fb0a 	bl	6ae4 <radio_disable>
    a4d0:	e00a      	b.n	a4e8 <event_master+0x13c>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    a4d2:	0003      	movs	r3, r0
    a4d4:	4a06      	ldr	r2, [pc, #24]	; (a4f0 <event_master+0x144>)
    a4d6:	0001      	movs	r1, r0
    a4d8:	f7fd fc70 	bl	7dbc <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a4dc:	2302      	movs	r3, #2
    a4de:	4398      	bics	r0, r3
    a4e0:	d002      	beq.n	a4e8 <event_master+0x13c>
    a4e2:	b662      	cpsie	i
    a4e4:	2004      	movs	r0, #4
    a4e6:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_M(0);
}
    a4e8:	b005      	add	sp, #20
    a4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4ec:	20000ea0 	.word	0x20000ea0
    a4f0:	00008569 	.word	0x00008569

0000a4f4 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    a4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4f6:	b097      	sub	sp, #92	; 0x5c
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    a4f8:	f7fc fb10 	bl	6b1c <radio_is_done>
    a4fc:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    a4fe:	2c00      	cmp	r4, #0
    a500:	d014      	beq.n	a52c <isr+0x38>
		 * and generate the profiling event at the end of the ISR.
		 */
		radio_tmr_sample();
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

		crc_ok = radio_crc_is_valid();
    a502:	f7fc fb2f 	bl	6b64 <radio_crc_is_valid>
    a506:	b2c3      	uxtb	r3, r0
    a508:	930f      	str	r3, [sp, #60]	; 0x3c
		devmatch_ok = radio_filter_has_match();
    a50a:	f7fc fbb3 	bl	6c74 <radio_filter_has_match>
    a50e:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    a510:	f7fc fbb8 	bl	6c84 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    a514:	f7fc fda4 	bl	7060 <radio_ar_has_match>
    a518:	b2c5      	uxtb	r5, r0
		irkmatch_id = radio_ar_match_get();
    a51a:	f7fc fd89 	bl	7030 <radio_ar_match_get>
    a51e:	b2c3      	uxtb	r3, r0
    a520:	930c      	str	r3, [sp, #48]	; 0x30
		rssi_ready = radio_rssi_is_ready();
    a522:	f7fc fb63 	bl	6bec <radio_rssi_is_ready>
    a526:	b2c3      	uxtb	r3, r0
    a528:	930e      	str	r3, [sp, #56]	; 0x38
    a52a:	e005      	b.n	a538 <isr+0x44>
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
		devmatch_id = irkmatch_id = 0xFF;
    a52c:	23ff      	movs	r3, #255	; 0xff
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    a52e:	0025      	movs	r5, r4
    a530:	0027      	movs	r7, r4
    a532:	940e      	str	r4, [sp, #56]	; 0x38
		devmatch_id = irkmatch_id = 0xFF;
    a534:	930c      	str	r3, [sp, #48]	; 0x30
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    a536:	940f      	str	r4, [sp, #60]	; 0x3c
		devmatch_id = irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	radio_status_reset();
    a538:	f7fc fade 	bl	6af8 <radio_status_reset>
	radio_tmr_status_reset();
    a53c:	f7fc fbb8 	bl	6cb0 <radio_tmr_status_reset>
	radio_filter_status_reset();
    a540:	f7fc fb90 	bl	6c64 <radio_filter_status_reset>
	radio_ar_status_reset();
    a544:	f7fc fd7c 	bl	7040 <radio_ar_status_reset>
	radio_rssi_status_reset();
    a548:	f7fc fb4a 	bl	6be0 <radio_rssi_status_reset>

	switch (_radio.state) {
    a54c:	48a4      	ldr	r0, [pc, #656]	; (a7e0 <isr+0x2ec>)
    a54e:	7c03      	ldrb	r3, [r0, #16]
    a550:	0006      	movs	r6, r0
    a552:	2b05      	cmp	r3, #5
    a554:	d901      	bls.n	a55a <isr+0x66>
    a556:	f002 f869 	bl	c62c <isr+0x2138>
    a55a:	0018      	movs	r0, r3
    a55c:	f7f5 fe2a 	bl	1b4 <__gnu_thumb1_case_si>
    a560:	0000215a 	.word	0x0000215a
    a564:	0000015e 	.word	0x0000015e
    a568:	00000018 	.word	0x00000018
    a56c:	00001cec 	.word	0x00001cec
    a570:	00001cec 	.word	0x00001cec
    a574:	00001cec 	.word	0x00001cec

static inline void isr_radio_state_tx(void)
{
	u32_t hcto;

	_radio.state = STATE_RX;
    a578:	2301      	movs	r3, #1
    a57a:	7433      	strb	r3, [r6, #16]

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    a57c:	f7fc fc8a 	bl	6e94 <radio_tmr_end_get>
    a580:	0004      	movs	r4, r0

	radio_tmr_tifs_set(RADIO_TIFS);
    a582:	2096      	movs	r0, #150	; 0x96
    a584:	f7fc fba4 	bl	6cd0 <radio_tmr_tifs_set>

	switch (_radio.role) {
    a588:	7bf0      	ldrb	r0, [r6, #15]
    a58a:	3801      	subs	r0, #1
    a58c:	2803      	cmp	r0, #3
    a58e:	d901      	bls.n	a594 <isr+0xa0>
    a590:	f002 f84c 	bl	c62c <isr+0x2138>
    a594:	f7f5 fdf0 	bl	178 <__gnu_thumb1_case_uqi>
    a598:	50502b02 	.word	0x50502b02
	case ROLE_ADV:
		radio_switch_complete_and_tx(0, 0);
    a59c:	2100      	movs	r1, #0
    a59e:	0008      	movs	r0, r1
    a5a0:	f7fc fafa 	bl	6b98 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    a5a4:	f7fc faec 	bl	6b80 <radio_pkt_scratch_get>
    a5a8:	f7fc fa78 	bl	6a9c <radio_pkt_rx_set>

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    a5ac:	f7fc faae 	bl	6b0c <radio_is_ready>
    a5b0:	2800      	cmp	r0, #0
    a5b2:	d001      	beq.n	a5b8 <isr+0xc4>
    a5b4:	f002 f83a 	bl	c62c <isr+0x2138>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		if (ctrl_rl_enabled()) {
    a5b8:	f003 f9d0 	bl	d95c <ctrl_rl_enabled>
    a5bc:	2800      	cmp	r0, #0
    a5be:	d007      	beq.n	a5d0 <isr+0xdc>
			u8_t count, *irks = ctrl_irks_get(&count);
    a5c0:	ad15      	add	r5, sp, #84	; 0x54
    a5c2:	0028      	movs	r0, r5
    a5c4:	f003 f846 	bl	d654 <ctrl_irks_get>
    a5c8:	0001      	movs	r1, r0

			radio_ar_configure(count, irks);
    a5ca:	7828      	ldrb	r0, [r5, #0]
    a5cc:	f7fc fd02 	bl	6fd4 <radio_ar_configure>
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

		hcto += radio_rx_chain_delay_get(0, 0);
    a5d0:	2100      	movs	r1, #0
    a5d2:	0008      	movs	r0, r1
    a5d4:	f7fc fa78 	bl	6ac8 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
    a5d8:	2100      	movs	r1, #0
			radio_ar_configure(count, irks);
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
    a5da:	34c3      	adds	r4, #195	; 0xc3
    a5dc:	1824      	adds	r4, r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    a5de:	0008      	movs	r0, r1
    a5e0:	f7fc fa6e 	bl	6ac0 <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    a5e4:	1a20      	subs	r0, r4, r0
    a5e6:	f7fc fbe5 	bl	6db4 <radio_tmr_hcto_configure>
    a5ea:	f000 fd64 	bl	b0b6 <isr+0xbc2>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_RSSI */

		break;

	case ROLE_SCAN:
		radio_switch_complete_and_tx(0, 0);
    a5ee:	2100      	movs	r1, #0
    a5f0:	0008      	movs	r0, r1
    a5f2:	f7fc fad1 	bl	6b98 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    a5f6:	233e      	movs	r3, #62	; 0x3e
    a5f8:	0030      	movs	r0, r6
    a5fa:	33ff      	adds	r3, #255	; 0xff
    a5fc:	5cf3      	ldrb	r3, [r6, r3]
    a5fe:	30fc      	adds	r0, #252	; 0xfc
    a600:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    a602:	009b      	lsls	r3, r3, #2
    a604:	5898      	ldr	r0, [r3, r2]
    a606:	3008      	adds	r0, #8
    a608:	f7fc fa48 	bl	6a9c <radio_pkt_rx_set>
				    pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    a60c:	f7fc fa7e 	bl	6b0c <radio_is_ready>
    a610:	1e05      	subs	r5, r0, #0
    a612:	d001      	beq.n	a618 <isr+0x124>
    a614:	f002 f80a 	bl	c62c <isr+0x2138>

		hcto += radio_rx_chain_delay_get(0, 0);
    a618:	0001      	movs	r1, r0
    a61a:	f7fc fa55 	bl	6ac8 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    a61e:	34c3      	adds	r4, #195	; 0xc3
    a620:	1824      	adds	r4, r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    a622:	0029      	movs	r1, r5
    a624:	0028      	movs	r0, r5
    a626:	f7fc fa4b 	bl	6ac0 <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    a62a:	1a20      	subs	r0, r4, r0
    a62c:	f7fc fbc2 	bl	6db4 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    a630:	f7fc fac2 	bl	6bb8 <radio_rssi_measure>
    a634:	f002 f841 	bl	c6ba <isr+0x21c6>
		/* fall thru */

	case ROLE_SLAVE:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
    a638:	0035      	movs	r5, r6
    a63a:	35fc      	adds	r5, #252	; 0xfc
					     _radio.conn_curr->phy_flags);
    a63c:	696b      	ldr	r3, [r5, #20]
    a63e:	3332      	adds	r3, #50	; 0x32
    a640:	7818      	ldrb	r0, [r3, #0]
		/* fall thru */

	case ROLE_SLAVE:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
    a642:	09c1      	lsrs	r1, r0, #7
    a644:	0680      	lsls	r0, r0, #26
    a646:	0f40      	lsrs	r0, r0, #29
    a648:	f7fc faa6 	bl	6b98 <radio_switch_complete_and_tx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    a64c:	233e      	movs	r3, #62	; 0x3e
    a64e:	33ff      	adds	r3, #255	; 0xff
    a650:	5cf3      	ldrb	r3, [r6, r3]
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    a652:	6bea      	ldr	r2, [r5, #60]	; 0x3c
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    a654:	009b      	lsls	r3, r3, #2
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    a656:	5899      	ldr	r1, [r3, r2]
    a658:	6968      	ldr	r0, [r5, #20]
    a65a:	3108      	adds	r1, #8
    a65c:	f7fd fe90 	bl	8380 <rx_packet_set>
			      packet_rx[_radio.packet_rx_last]->pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    a660:	f7fc fa54 	bl	6b0c <radio_is_ready>
    a664:	2800      	cmp	r0, #0
    a666:	d001      	beq.n	a66c <isr+0x178>
    a668:	f001 ffe0 	bl	c62c <isr+0x2138>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
    a66c:	696b      	ldr	r3, [r5, #20]
{
	u32_t hcto;

	_radio.state = STATE_RX;

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    a66e:	349b      	adds	r4, #155	; 0x9b
		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
    a670:	3332      	adds	r3, #50	; 0x32
    a672:	7818      	ldrb	r0, [r3, #0]

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    a674:	09c1      	lsrs	r1, r0, #7
    a676:	0680      	lsls	r0, r0, #26
    a678:	0f40      	lsrs	r0, r0, #29
    a67a:	f7fc fa25 	bl	6ac8 <radio_rx_chain_delay_get>
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    a67e:	696b      	ldr	r3, [r5, #20]

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    a680:	1824      	adds	r4, r4, r0
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    a682:	001a      	movs	r2, r3
    a684:	3233      	adds	r2, #51	; 0x33
    a686:	7810      	ldrb	r0, [r2, #0]
	switch (phy) {
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
    a688:	2218      	movs	r2, #24
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    a68a:	0680      	lsls	r0, r0, #26
    a68c:	0f40      	lsrs	r0, r0, #29
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    a68e:	2802      	cmp	r0, #2
    a690:	d005      	beq.n	a69e <isr+0x1aa>
    a692:	2804      	cmp	r0, #4
    a694:	d102      	bne.n	a69c <isr+0x1a8>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    a696:	3261      	adds	r2, #97	; 0x61
    a698:	32ff      	adds	r2, #255	; 0xff
    a69a:	e000      	b.n	a69e <isr+0x1aa>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
    a69c:	2228      	movs	r2, #40	; 0x28
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
						 _radio.conn_curr->phy_flags);
    a69e:	3332      	adds	r3, #50	; 0x32
    a6a0:	7819      	ldrb	r1, [r3, #0]
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    a6a2:	1914      	adds	r4, r2, r4
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
    a6a4:	09c9      	lsrs	r1, r1, #7
    a6a6:	f7fc fa0b 	bl	6ac0 <radio_tx_chain_delay_get>
		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_hcto_configure(hcto);
    a6aa:	1a20      	subs	r0, r4, r0
    a6ac:	f7fc fb82 	bl	6db4 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    a6b0:	f7fc fbda 	bl	6e68 <radio_tmr_end_capture>
		/* TODO: use timebox for tx enqueue (instead of 1 packet
		 * that is routed, which may not be for the current connection)
		 * try to route as much tx packet in queue into corresponding
		 * connection's tx list.
		 */
		packet_tx_enqueue(1);
    a6b4:	2001      	movs	r0, #1
    a6b6:	f7fe f8d7 	bl	8868 <packet_tx_enqueue>
    a6ba:	f001 fffe 	bl	c6ba <isr+0x21c6>
				      u8_t irkmatch_ok, u8_t irkmatch_id,
				      u8_t rssi_ready)
{
	u32_t err;

	if (!((trx_done) || ((SILENT_CONNECTION) &&
    a6be:	2c00      	cmp	r4, #0
    a6c0:	d106      	bne.n	a6d0 <isr+0x1dc>
			     (_radio.role == ROLE_SLAVE)))) {
		_radio.state = STATE_CLOSE;
    a6c2:	2203      	movs	r2, #3
    a6c4:	4b46      	ldr	r3, [pc, #280]	; (a7e0 <isr+0x2ec>)
    a6c6:	741a      	strb	r2, [r3, #16]
		radio_disable();
    a6c8:	f7fc fa0c 	bl	6ae4 <radio_disable>
    a6cc:	f001 fff5 	bl	c6ba <isr+0x21c6>

		return;
	}

	switch (_radio.role) {
    a6d0:	7bf0      	ldrb	r0, [r6, #15]
    a6d2:	3801      	subs	r0, #1
    a6d4:	2803      	cmp	r0, #3
    a6d6:	d901      	bls.n	a6dc <isr+0x1e8>
    a6d8:	f001 ffa8 	bl	c62c <isr+0x2138>
    a6dc:	f7f5 fd60 	bl	1a0 <__gnu_thumb1_case_uhi>
    a6e0:	02660004 	.word	0x02660004
    a6e4:	05430543 	.word	0x05430543
	case ROLE_ADV:
		if (crc_ok) {
    a6e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a6ea:	2b00      	cmp	r3, #0
    a6ec:	d0e9      	beq.n	a6c2 <isr+0x1ce>
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
    a6ee:	240f      	movs	r4, #15
    a6f0:	2d00      	cmp	r5, #0
    a6f2:	d003      	beq.n	a6fc <isr+0x208>
    a6f4:	980c      	ldr	r0, [sp, #48]	; 0x30
    a6f6:	f002 ffb7 	bl	d668 <ctrl_rl_idx>
    a6fa:	0004      	movs	r4, r0
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    a6fc:	f7fc fa40 	bl	6b80 <radio_pkt_scratch_get>
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];
    a700:	0033      	movs	r3, r6
    a702:	3375      	adds	r3, #117	; 0x75
    a704:	781b      	ldrb	r3, [r3, #0]
	/* An IRK match implies address resolution enabled */
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    a706:	0005      	movs	r5, r0
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];
    a708:	930a      	str	r3, [sp, #40]	; 0x28

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    a70a:	230f      	movs	r3, #15
    a70c:	7800      	ldrb	r0, [r0, #0]
    a70e:	4003      	ands	r3, r0
    a710:	2b03      	cmp	r3, #3
    a712:	d11b      	bne.n	a74c <isr+0x258>
    a714:	786b      	ldrb	r3, [r5, #1]
    a716:	2b0c      	cmp	r3, #12
    a718:	d118      	bne.n	a74c <isr+0x258>

static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    a71a:	1db3      	adds	r3, r6, #6
    a71c:	7fdb      	ldrb	r3, [r3, #31]
		 ctrl_rl_allowed(pdu->tx_addr,
				 pdu->payload.scan_req.scan_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    a71e:	065b      	lsls	r3, r3, #25
    a720:	d504      	bpl.n	a72c <isr+0x238>
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
		 ctrl_rl_allowed(pdu->tx_addr,
				 pdu->payload.scan_req.scan_addr)) ||
    a722:	2f00      	cmp	r7, #0
    a724:	d001      	beq.n	a72a <isr+0x236>
    a726:	f001 ffbb 	bl	c6a0 <isr+0x21ac>
    a72a:	e008      	b.n	a73e <isr+0x24a>
static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
		 ctrl_rl_allowed(pdu->tx_addr,
    a72c:	0640      	lsls	r0, r0, #25
				 pdu->payload.scan_req.scan_addr)) ||
    a72e:	1ca9      	adds	r1, r5, #2
static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
		 ctrl_rl_allowed(pdu->tx_addr,
    a730:	0fc0      	lsrs	r0, r0, #31
    a732:	f003 f8db 	bl	d8ec <ctrl_rl_allowed>

static inline bool isr_adv_sr_check(struct pdu_adv *pdu, u8_t devmatch_ok,
				    u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    a736:	2800      	cmp	r0, #0
    a738:	d0f3      	beq.n	a722 <isr+0x22e>
    a73a:	f001 ffb1 	bl	c6a0 <isr+0x21ac>
		 ctrl_rl_allowed(pdu->tx_addr,
				 pdu->payload.scan_req.scan_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    a73e:	0020      	movs	r0, r4
    a740:	f002 ffaa 	bl	d698 <ctrl_irk_whitelisted>
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
    a744:	2800      	cmp	r0, #0
    a746:	d001      	beq.n	a74c <isr+0x258>
    a748:	f001 ffaa 	bl	c6a0 <isr+0x21ac>

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    a74c:	230f      	movs	r3, #15
    a74e:	7828      	ldrb	r0, [r5, #0]
    a750:	4003      	ands	r3, r0
    a752:	2b05      	cmp	r3, #5
    a754:	d1b5      	bne.n	a6c2 <isr+0x1ce>
    a756:	786b      	ldrb	r3, [r5, #1]
    a758:	2b22      	cmp	r3, #34	; 0x22
    a75a:	d1b2      	bne.n	a6c2 <isr+0x1ce>

static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    a75c:	1db3      	adds	r3, r6, #6
    a75e:	7fdb      	ldrb	r3, [r3, #31]
    a760:	099b      	lsrs	r3, r3, #6
		 ctrl_rl_allowed(ci->tx_addr,
				 ci->payload.connect_ind.init_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    a762:	079b      	lsls	r3, r3, #30
    a764:	d502      	bpl.n	a76c <isr+0x278>
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
				 ci->payload.connect_ind.init_addr)) ||
    a766:	2f00      	cmp	r7, #0
    a768:	d107      	bne.n	a77a <isr+0x286>
    a76a:	e012      	b.n	a792 <isr+0x29e>
static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
    a76c:	0640      	lsls	r0, r0, #25
				 ci->payload.connect_ind.init_addr)) ||
    a76e:	1ca9      	adds	r1, r5, #2
static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
    a770:	0fc0      	lsrs	r0, r0, #31
    a772:	f003 f8bb 	bl	d8ec <ctrl_rl_allowed>

static inline bool isr_adv_ci_check(struct pdu_adv *adv, struct pdu_adv *ci,
				    u8_t devmatch_ok, u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    a776:	2800      	cmp	r0, #0
    a778:	d0f5      	beq.n	a766 <isr+0x272>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    a77a:	2327      	movs	r3, #39	; 0x27
    a77c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a77e:	4353      	muls	r3, r2
    a780:	3320      	adds	r3, #32
    a782:	18f3      	adds	r3, r6, r3

static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    a784:	79da      	ldrb	r2, [r3, #7]
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_idx(irkmatch_id) : RL_IDX_NONE;
#else
	u8_t rl_idx = RL_IDX_NONE;
#endif
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    a786:	930f      	str	r3, [sp, #60]	; 0x3c

static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    a788:	230f      	movs	r3, #15
    a78a:	4013      	ands	r3, r2
    a78c:	2b01      	cmp	r3, #1
    a78e:	d136      	bne.n	a7fe <isr+0x30a>
    a790:	e005      	b.n	a79e <isr+0x2aa>
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
		 ctrl_rl_allowed(ci->tx_addr,
				 ci->payload.connect_ind.init_addr)) ||
		(devmatch_ok) || (ctrl_irk_whitelisted(rl_idx))) &&
    a792:	0020      	movs	r0, r4
    a794:	f002 ff80 	bl	d698 <ctrl_irk_whitelisted>
    a798:	2800      	cmp	r0, #0
    a79a:	d1ee      	bne.n	a77a <isr+0x286>
    a79c:	e791      	b.n	a6c2 <isr+0x1ce>
static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		((adv->tx_addr == ci->rx_addr) &&
    a79e:	782b      	ldrb	r3, [r5, #0]
    a7a0:	0651      	lsls	r1, r2, #25

static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    a7a2:	0fc9      	lsrs	r1, r1, #31
    a7a4:	09d8      	lsrs	r0, r3, #7
    a7a6:	4281      	cmp	r1, r0
    a7a8:	d18b      	bne.n	a6c2 <isr+0x1ce>
		((adv->tx_addr == ci->rx_addr) &&
		 (adv->rx_addr == ci->tx_addr) &&
    a7aa:	065b      	lsls	r3, r3, #25
static inline bool isr_adv_ci_direct_check(struct pdu_adv *adv,
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		((adv->tx_addr == ci->rx_addr) &&
    a7ac:	09d2      	lsrs	r2, r2, #7
    a7ae:	0fdb      	lsrs	r3, r3, #31
    a7b0:	429a      	cmp	r2, r3
    a7b2:	d186      	bne.n	a6c2 <isr+0x1ce>
		 (adv->rx_addr == ci->tx_addr) &&
		 !memcmp(adv->payload.direct_ind.adv_addr,
    a7b4:	0029      	movs	r1, r5
    a7b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a7b8:	2206      	movs	r2, #6
    a7ba:	3108      	adds	r1, #8
    a7bc:	3009      	adds	r0, #9
    a7be:	f7f6 fa55 	bl	c6c <memcmp>
					   struct pdu_adv *ci,
					   u8_t rl_idx)
{
	return ((adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		((adv->tx_addr == ci->rx_addr) &&
		 (adv->rx_addr == ci->tx_addr) &&
    a7c2:	2800      	cmp	r0, #0
    a7c4:	d000      	beq.n	a7c8 <isr+0x2d4>
    a7c6:	e77c      	b.n	a6c2 <isr+0x1ce>

static inline bool isr_adv_tgta_check(struct pdu_adv *adv, struct pdu_adv *ci,
				      u8_t rl_idx)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (rl_idx != RL_IDX_NONE) {
    a7c8:	2c0f      	cmp	r4, #15
    a7ca:	d00b      	beq.n	a7e4 <isr+0x2f0>
		return rl_idx == _radio.advertiser.rl_idx;
    a7cc:	1df0      	adds	r0, r6, #7
    a7ce:	7fc0      	ldrb	r0, [r0, #31]
    a7d0:	0700      	lsls	r0, r0, #28
    a7d2:	0f00      	lsrs	r0, r0, #28
    a7d4:	1b00      	subs	r0, r0, r4
    a7d6:	4243      	negs	r3, r0
    a7d8:	4143      	adcs	r3, r0
    a7da:	b2d8      	uxtb	r0, r3
    a7dc:	e00c      	b.n	a7f8 <isr+0x304>
    a7de:	46c0      	nop			; (mov r8, r8)
    a7e0:	20000ea0 	.word	0x20000ea0
	}
#endif
	return !memcmp(adv->payload.direct_ind.tgt_addr,
    a7e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
		       ci->payload.connect_ind.init_addr, BDADDR_SIZE);
    a7e6:	1ca9      	adds	r1, r5, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (rl_idx != RL_IDX_NONE) {
		return rl_idx == _radio.advertiser.rl_idx;
	}
#endif
	return !memcmp(adv->payload.direct_ind.tgt_addr,
    a7e8:	2206      	movs	r2, #6
    a7ea:	300f      	adds	r0, #15
    a7ec:	f7f6 fa3e 	bl	c6c <memcmp>
    a7f0:	0003      	movs	r3, r0
    a7f2:	4258      	negs	r0, r3
    a7f4:	4158      	adcs	r0, r3
    a7f6:	b2c0      	uxtb	r0, r0
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
    a7f8:	2800      	cmp	r0, #0
    a7fa:	d100      	bne.n	a7fe <isr+0x30a>
    a7fc:	e761      	b.n	a6c2 <isr+0x1ce>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, rl_idx) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    a7fe:	23bf      	movs	r3, #191	; 0xbf
    a800:	4cd9      	ldr	r4, [pc, #868]	; (ab68 <isr+0x674>)
    a802:	005b      	lsls	r3, r3, #1
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, rl_idx) &&
    a804:	5ce3      	ldrb	r3, [r4, r3]
    a806:	940a      	str	r4, [sp, #40]	; 0x28
    a808:	2b00      	cmp	r3, #0
    a80a:	d008      	beq.n	a81e <isr+0x32a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    a80c:	23be      	movs	r3, #190	; 0xbe
    a80e:	227e      	movs	r2, #126	; 0x7e
    a810:	005b      	lsls	r3, r3, #1
    a812:	32ff      	adds	r2, #255	; 0xff
    a814:	5ce3      	ldrb	r3, [r4, r3]
    a816:	5ca2      	ldrb	r2, [r4, r2]
    a818:	429a      	cmp	r2, r3
    a81a:	d000      	beq.n	a81e <isr+0x32a>
    a81c:	e751      	b.n	a6c2 <isr+0x1ce>
		   (_radio.advertiser.conn)) {
    a81e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a820:	34c8      	adds	r4, #200	; 0xc8

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, rl_idx) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    a822:	6823      	ldr	r3, [r4, #0]
    a824:	2b00      	cmp	r3, #0
    a826:	d100      	bne.n	a82a <isr+0x336>
    a828:	e74b      	b.n	a6c2 <isr+0x1ce>
		u32_t conn_offset_us;
		u32_t rx_ready_delay;
		u32_t ticker_status;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    a82a:	2004      	movs	r0, #4
    a82c:	f7fd fb74 	bl	7f18 <packet_rx_reserve_get>
    a830:	1e06      	subs	r6, r0, #0
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    a832:	d100      	bne.n	a836 <isr+0x342>
    a834:	e745      	b.n	a6c2 <isr+0x1ce>
			return 1;
		}

		_radio.state = STATE_STOP;
    a836:	2204      	movs	r2, #4
    a838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a83a:	741a      	strb	r2, [r3, #16]
		radio_disable();
    a83c:	f7fc f952 	bl	6ae4 <radio_disable>

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    a840:	2300      	movs	r3, #0

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    a842:	228c      	movs	r2, #140	; 0x8c

		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
    a844:	6827      	ldr	r7, [r4, #0]
		_radio.advertiser.conn = NULL;
    a846:	6023      	str	r3, [r4, #0]

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    a848:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a84a:	0052      	lsls	r2, r2, #1
    a84c:	34fc      	adds	r4, #252	; 0xfc
    a84e:	68a1      	ldr	r1, [r4, #8]
    a850:	0038      	movs	r0, r7
    a852:	f7fb ffa7 	bl	67a4 <mem_index_get>
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    a856:	0029      	movs	r1, r5
		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    a858:	8438      	strh	r0, [r7, #32]
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    a85a:	0038      	movs	r0, r7
    a85c:	2203      	movs	r2, #3
    a85e:	3112      	adds	r1, #18
    a860:	3014      	adds	r0, #20
    a862:	f7f6 fa18 	bl	c96 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    a866:	003b      	movs	r3, r7
    a868:	0029      	movs	r1, r5
    a86a:	3310      	adds	r3, #16
    a86c:	0018      	movs	r0, r3
    a86e:	2204      	movs	r2, #4
    a870:	310e      	adds	r1, #14
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    a872:	003c      	movs	r4, r7
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    a874:	930e      	str	r3, [sp, #56]	; 0x38
    a876:	f7f6 fa0e 	bl	c96 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    a87a:	0029      	movs	r1, r5
    a87c:	3417      	adds	r4, #23
    a87e:	2205      	movs	r2, #5
    a880:	311e      	adds	r1, #30
    a882:	0020      	movs	r0, r4
    a884:	f7f6 fa07 	bl	c96 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    a888:	2105      	movs	r1, #5
    a88a:	0020      	movs	r0, r4
    a88c:	f7fb ffd2 	bl	6834 <util_ones_count_get>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    a890:	223f      	movs	r2, #63	; 0x3f
    a892:	7f3b      	ldrb	r3, [r7, #28]
    a894:	4010      	ands	r0, r2
    a896:	4393      	bics	r3, r2
    a898:	4318      	orrs	r0, r3
    a89a:	7738      	strb	r0, [r7, #28]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    a89c:	0038      	movs	r0, r7
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    a89e:	1d2b      	adds	r3, r5, #4
    a8a0:	7fdb      	ldrb	r3, [r3, #31]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    a8a2:	4cb2      	ldr	r4, [pc, #712]	; (ab6c <isr+0x678>)
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    a8a4:	06db      	lsls	r3, r3, #27
    a8a6:	0edb      	lsrs	r3, r3, #27
    a8a8:	77bb      	strb	r3, [r7, #30]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    a8aa:	7e6b      	ldrb	r3, [r5, #25]
    a8ac:	7e2a      	ldrb	r2, [r5, #24]
    a8ae:	021b      	lsls	r3, r3, #8
    a8b0:	4313      	orrs	r3, r2
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
    a8b2:	84bb      	strh	r3, [r7, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
    a8b4:	7e6b      	ldrb	r3, [r5, #25]
    a8b6:	7e2a      	ldrb	r2, [r5, #24]
    a8b8:	021b      	lsls	r3, r3, #8
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    a8ba:	4313      	orrs	r3, r2
    a8bc:	4363      	muls	r3, r4
    a8be:	930a      	str	r3, [sp, #40]	; 0x28
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
    a8c0:	7eeb      	ldrb	r3, [r5, #27]
    a8c2:	7eaa      	ldrb	r2, [r5, #26]
    a8c4:	021b      	lsls	r3, r3, #8
    a8c6:	4313      	orrs	r3, r2
    a8c8:	84fb      	strh	r3, [r7, #38]	; 0x26
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    a8ca:	2204      	movs	r2, #4
    a8cc:	990e      	ldr	r1, [sp, #56]	; 0x38
    a8ce:	3060      	adds	r0, #96	; 0x60
    a8d0:	f7f6 f9e1 	bl	c96 <memcpy>
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
    a8d4:	7f68      	ldrb	r0, [r5, #29]
    a8d6:	7f2b      	ldrb	r3, [r5, #28]
    a8d8:	0200      	lsls	r0, r0, #8
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    a8da:	4318      	orrs	r0, r3
    a8dc:	4ba4      	ldr	r3, [pc, #656]	; (ab70 <isr+0x67c>)
    a8de:	990a      	ldr	r1, [sp, #40]	; 0x28
    a8e0:	4358      	muls	r0, r3
    a8e2:	f7f5 fc73 	bl	1cc <__aeabi_uidiv>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    a8e6:	990a      	ldr	r1, [sp, #40]	; 0x28
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    a8e8:	86b8      	strh	r0, [r7, #52]	; 0x34
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    a8ea:	48a2      	ldr	r0, [pc, #648]	; (ab74 <isr+0x680>)
    a8ec:	f7f5 fc6e 	bl	1cc <__aeabi_uidiv>
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a8f0:	990a      	ldr	r1, [sp, #40]	; 0x28
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    a8f2:	8738      	strh	r0, [r7, #56]	; 0x38
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    a8f4:	48a0      	ldr	r0, [pc, #640]	; (ab78 <isr+0x684>)
    a8f6:	f7f5 fc69 	bl	1cc <__aeabi_uidiv>
    a8fa:	1cbb      	adds	r3, r7, #2
    a8fc:	b282      	uxth	r2, r0
    a8fe:	87da      	strh	r2, [r3, #62]	; 0x3e
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a900:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    a902:	9410      	str	r4, [sp, #64]	; 0x40
    a904:	1d99      	adds	r1, r3, #6
    a906:	428a      	cmp	r2, r1
    a908:	dd02      	ble.n	a910 <isr+0x41c>
    a90a:	1ad3      	subs	r3, r2, r3
    a90c:	3b06      	subs	r3, #6
    a90e:	b29a      	uxth	r2, r3
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    a910:	8c3b      	ldrh	r3, [r7, #32]
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    a912:	87ba      	strh	r2, [r7, #60]	; 0x3c
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    a914:	80f3      	strh	r3, [r6, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    a916:	2306      	movs	r3, #6
    a918:	7133      	strb	r3, [r6, #4]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    a91a:	2300      	movs	r3, #0
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a91c:	0030      	movs	r0, r6

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    a91e:	72f3      	strb	r3, [r6, #11]
		radio_le_conn_cmplt->role = 0x01;
    a920:	3301      	adds	r3, #1
    a922:	7333      	strb	r3, [r6, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    a924:	782b      	ldrb	r3, [r5, #0]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
    a926:	1ca9      	adds	r1, r5, #2
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    a928:	065b      	lsls	r3, r3, #25
    a92a:	0fdb      	lsrs	r3, r3, #31
    a92c:	7373      	strb	r3, [r6, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a92e:	2206      	movs	r2, #6
    a930:	300e      	adds	r0, #14
    a932:	f7f6 f9b0 	bl	c96 <memcpy>
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    a936:	0030      	movs	r0, r6
    a938:	0029      	movs	r1, r5
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    a93a:	782b      	ldrb	r3, [r5, #0]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    a93c:	3108      	adds	r1, #8
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    a93e:	09db      	lsrs	r3, r3, #7
    a940:	7533      	strb	r3, [r6, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    a942:	2206      	movs	r2, #6
    a944:	3015      	adds	r0, #21
    a946:	f7f6 f9a6 	bl	c96 <memcpy>
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    a94a:	2230      	movs	r2, #48	; 0x30
    a94c:	466b      	mov	r3, sp

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    a94e:	0034      	movs	r4, r6
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    a950:	189b      	adds	r3, r3, r2
    a952:	781b      	ldrb	r3, [r3, #0]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    a954:	340b      	adds	r4, #11
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    a956:	76f3      	strb	r3, [r6, #27]
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    a958:	7e6b      	ldrb	r3, [r5, #25]
    a95a:	7e2a      	ldrb	r2, [r5, #24]
    a95c:	021b      	lsls	r3, r3, #8
    a95e:	4313      	orrs	r3, r2
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
    a960:	7733      	strb	r3, [r6, #28]
    a962:	0a1b      	lsrs	r3, r3, #8
    a964:	7773      	strb	r3, [r6, #29]
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
    a966:	7eeb      	ldrb	r3, [r5, #27]
    a968:	7eaa      	ldrb	r2, [r5, #26]
    a96a:	021b      	lsls	r3, r3, #8
    a96c:	4313      	orrs	r3, r2
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
    a96e:	77b3      	strb	r3, [r6, #30]
    a970:	0a1b      	lsrs	r3, r3, #8
    a972:	77f3      	strb	r3, [r6, #31]
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
    a974:	7f6b      	ldrb	r3, [r5, #29]
    a976:	7f2a      	ldrb	r2, [r5, #28]
    a978:	021b      	lsls	r3, r3, #8
    a97a:	4313      	orrs	r3, r2
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
    a97c:	3620      	adds	r6, #32
    a97e:	7033      	strb	r3, [r6, #0]
    a980:	0a1b      	lsrs	r3, r3, #8
    a982:	7073      	strb	r3, [r6, #1]
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
			pdu_adv->payload.connect_ind.lldata.sca;
    a984:	1d2b      	adds	r3, r5, #4
    a986:	7fdb      	ldrb	r3, [r3, #31]
    a988:	095b      	lsrs	r3, r3, #5
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
    a98a:	75e3      	strb	r3, [r4, #23]
			pdu_adv->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    a98c:	8c38      	ldrh	r0, [r7, #32]
    a98e:	f7fd fdcf 	bl	8530 <rx_fc_lock>
		packet_rx_enqueue();
    a992:	f7fd fe59 	bl	8648 <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    a996:	2003      	movs	r0, #3
    a998:	f7fd fabe 	bl	7f18 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    a99c:	2800      	cmp	r0, #0
    a99e:	d101      	bne.n	a9a4 <isr+0x4b0>
    a9a0:	f001 fe44 	bl	c62c <isr+0x2138>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    a9a4:	8c3b      	ldrh	r3, [r7, #32]
    a9a6:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    a9a8:	230b      	movs	r3, #11
    a9aa:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv->chan_sel) {
    a9ac:	782a      	ldrb	r2, [r5, #0]
    a9ae:	3315      	adds	r3, #21
    a9b0:	4013      	ands	r3, r2
    a9b2:	d00e      	beq.n	a9d2 <isr+0x4de>
				u16_t aa_ls =
    a9b4:	7c7b      	ldrb	r3, [r7, #17]
    a9b6:	7c3a      	ldrb	r2, [r7, #16]
    a9b8:	021b      	lsls	r3, r3, #8
    a9ba:	431a      	orrs	r2, r3
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    a9bc:	7cfb      	ldrb	r3, [r7, #19]
    a9be:	7cb9      	ldrb	r1, [r7, #18]
    a9c0:	021b      	lsls	r3, r3, #8
    a9c2:	430b      	orrs	r3, r1
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    a9c4:	2440      	movs	r4, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    a9c6:	4053      	eors	r3, r2
    a9c8:	83fb      	strh	r3, [r7, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    a9ca:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    a9cc:	7f39      	ldrb	r1, [r7, #28]
    a9ce:	4321      	orrs	r1, r4
    a9d0:	7739      	strb	r1, [r7, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    a9d2:	72c3      	strb	r3, [r0, #11]
			}

			packet_rx_enqueue();
    a9d4:	f7fd fe38 	bl	8648 <packet_rx_enqueue>
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
    a9d8:	0039      	movs	r1, r7
    a9da:	240e      	movs	r4, #14
    a9dc:	1d2b      	adds	r3, r5, #4
    a9de:	7fdb      	ldrb	r3, [r3, #31]
    a9e0:	3144      	adds	r1, #68	; 0x44
    a9e2:	780a      	ldrb	r2, [r1, #0]
    a9e4:	095b      	lsrs	r3, r3, #5
    a9e6:	0058      	lsls	r0, r3, #1
    a9e8:	43a2      	bics	r2, r4
    a9ea:	4302      	orrs	r2, r0
    a9ec:	700a      	strb	r2, [r1, #0]
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    a9ee:	4a5e      	ldr	r2, [pc, #376]	; (ab68 <isr+0x674>)
    a9f0:	4962      	ldr	r1, [pc, #392]	; (ab7c <isr+0x688>)
    a9f2:	32ff      	adds	r2, #255	; 0xff
    a9f4:	7f52      	ldrb	r2, [r2, #29]
			   gc_lookup_ppm[conn->role.slave.sca]) *
    a9f6:	005b      	lsls	r3, r3, #1
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    a9f8:	0052      	lsls	r2, r2, #1
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    a9fa:	5a50      	ldrh	r0, [r2, r1]
    a9fc:	5a5b      	ldrh	r3, [r3, r1]
    a9fe:	4960      	ldr	r1, [pc, #384]	; (ab80 <isr+0x68c>)
    aa00:	18c0      	adds	r0, r0, r3
    aa02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    aa04:	2400      	movs	r4, #0
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    aa06:	4358      	muls	r0, r3
    aa08:	4b5e      	ldr	r3, [pc, #376]	; (ab84 <isr+0x690>)
    aa0a:	18c0      	adds	r0, r0, r3
    aa0c:	f7f5 fbde 	bl	1cc <__aeabi_uidiv>
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    aa10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    aa12:	64b8      	str	r0, [r7, #72]	; 0x48
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    aa14:	085b      	lsrs	r3, r3, #1
    aa16:	3b96      	subs	r3, #150	; 0x96
    aa18:	64fb      	str	r3, [r7, #76]	; 0x4c
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    aa1a:	7d6b      	ldrb	r3, [r5, #21]
    aa1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    aa1e:	65bc      	str	r4, [r7, #88]	; 0x58
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    aa20:	4353      	muls	r3, r2
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    aa22:	0020      	movs	r0, r4
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    aa24:	65fb      	str	r3, [r7, #92]	; 0x5c
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    aa26:	f7fc f84d 	bl	6ac4 <radio_rx_ready_delay_get>

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    aa2a:	4b57      	ldr	r3, [pc, #348]	; (ab88 <isr+0x694>)
    aa2c:	4a57      	ldr	r2, [pc, #348]	; (ab8c <isr+0x698>)
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    aa2e:	0006      	movs	r6, r0

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    aa30:	0021      	movs	r1, r4
    aa32:	18c0      	adds	r0, r0, r3
    aa34:	2300      	movs	r3, #0
    aa36:	f7f5 fd5f 	bl	4f8 <__aeabi_lmul>
    aa3a:	4a55      	ldr	r2, [pc, #340]	; (ab90 <isr+0x69c>)
    aa3c:	2307      	movs	r3, #7
    aa3e:	f7f5 fd3b 	bl	4b8 <__aeabi_uldivmod>
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    aa42:	23c0      	movs	r3, #192	; 0xc0
    aa44:	4a48      	ldr	r2, [pc, #288]	; (ab68 <isr+0x674>)
    aa46:	005b      	lsls	r3, r3, #1
    aa48:	58d2      	ldr	r2, [r2, r3]
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    aa4a:	0200      	lsls	r0, r0, #8
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    aa4c:	3b5a      	subs	r3, #90	; 0x5a
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    aa4e:	0a00      	lsrs	r0, r0, #8
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    aa50:	3bff      	subs	r3, #255	; 0xff
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    aa52:	60f8      	str	r0, [r7, #12]
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    aa54:	607a      	str	r2, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    aa56:	603b      	str	r3, [r7, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    aa58:	60bc      	str	r4, [r7, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    aa5a:	920e      	str	r2, [sp, #56]	; 0x38
    aa5c:	429a      	cmp	r2, r3
    aa5e:	d200      	bcs.n	aa62 <isr+0x56e>
    aa60:	930e      	str	r3, [sp, #56]	; 0x38
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us -=
    aa62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa64:	6cba      	ldr	r2, [r7, #72]	; 0x48
    aa66:	1a9b      	subs	r3, r3, r2
    aa68:	930a      	str	r3, [sp, #40]	; 0x28
			conn->role.slave.window_widening_periodic_us;

		conn_offset_us = radio_tmr_end_get();
    aa6a:	f7fc fa13 	bl	6e94 <radio_tmr_end_get>
    aa6e:	900c      	str	r0, [sp, #48]	; 0x30
		conn_offset_us +=
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
    aa70:	7deb      	ldrb	r3, [r5, #23]
    aa72:	7daa      	ldrb	r2, [r5, #22]
    aa74:	021b      	lsls	r3, r3, #8
    aa76:	4313      	orrs	r3, r2
    aa78:	2500      	movs	r5, #0
    aa7a:	001c      	movs	r4, r3
    aa7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
			 1) * 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    aa7e:	0029      	movs	r1, r5
    aa80:	3401      	adds	r4, #1
    aa82:	0028      	movs	r0, r5
    aa84:	435c      	muls	r4, r3
    aa86:	f7fc f81b 	bl	6ac0 <radio_tx_chain_delay_get>
    aa8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    aa8c:	3c20      	subs	r4, #32
    aa8e:	191c      	adds	r4, r3, r4
    aa90:	1a20      	subs	r0, r4, r0
		conn_offset_us -= rx_ready_delay;
		conn_offset_us -= RADIO_TICKER_JITTER_US << 1;
    aa92:	1b83      	subs	r3, r0, r6
    aa94:	930c      	str	r3, [sp, #48]	; 0x30

		/* Stop Advertiser */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    aa96:	4b3f      	ldr	r3, [pc, #252]	; (ab94 <isr+0x6a0>)
    aa98:	2205      	movs	r2, #5
    aa9a:	9300      	str	r3, [sp, #0]
    aa9c:	0029      	movs	r1, r5
    aa9e:	4b3e      	ldr	r3, [pc, #248]	; (ab98 <isr+0x6a4>)
    aaa0:	0028      	movs	r0, r5
    aaa2:	f7fd f92b 	bl	7cfc <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_ADV,
					    ticker_stop_adv_assert,
					    (void *)__LINE__);
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    aaa6:	493d      	ldr	r1, [pc, #244]	; (ab9c <isr+0x6a8>)
    aaa8:	f7fe f96a 	bl	8d80 <ticker_stop_adv_assert>

		/* Stop Direct Adv Stopper */
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    aaac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aaae:	79da      	ldrb	r2, [r3, #7]
    aab0:	230f      	movs	r3, #15
    aab2:	4013      	ands	r3, r2
    aab4:	2b01      	cmp	r3, #1
    aab6:	d106      	bne.n	aac6 <isr+0x5d2>
			/* Advertiser stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    aab8:	9500      	str	r5, [sp, #0]
    aaba:	002b      	movs	r3, r5
    aabc:	2203      	movs	r2, #3
    aabe:	0029      	movs	r1, r5
    aac0:	0028      	movs	r0, r5
    aac2:	f7fd f91b 	bl	7cfc <ticker_stop>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(conn_offset_us),
		     TICKER_US_TO_TICKS(conn_interval_us),
    aac6:	2400      	movs	r4, #0
    aac8:	980a      	ldr	r0, [sp, #40]	; 0x28
    aaca:	4a30      	ldr	r2, [pc, #192]	; (ab8c <isr+0x698>)
    aacc:	2300      	movs	r3, #0
    aace:	0021      	movs	r1, r4
    aad0:	f7f5 fd12 	bl	4f8 <__aeabi_lmul>
    aad4:	4a2e      	ldr	r2, [pc, #184]	; (ab90 <isr+0x69c>)
    aad6:	2307      	movs	r3, #7
    aad8:	900a      	str	r0, [sp, #40]	; 0x28
    aada:	910b      	str	r1, [sp, #44]	; 0x2c
    aadc:	f7f5 fcec 	bl	4b8 <__aeabi_uldivmod>

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
    aae0:	4b21      	ldr	r3, [pc, #132]	; (ab68 <isr+0x674>)
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_ADV_STOP, NULL, NULL);
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    aae2:	8c3e      	ldrh	r6, [r7, #32]
    aae4:	685d      	ldr	r5, [r3, #4]
    aae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aae8:	9706      	str	r7, [sp, #24]
    aaea:	1aed      	subs	r5, r5, r3
    aaec:	4b2c      	ldr	r3, [pc, #176]	; (aba0 <isr+0x6ac>)
    aaee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    aaf0:	9308      	str	r3, [sp, #32]
    aaf2:	4b2c      	ldr	r3, [pc, #176]	; (aba4 <isr+0x6b0>)
    aaf4:	0021      	movs	r1, r4
    aaf6:	9307      	str	r3, [sp, #28]
    aaf8:	4b2b      	ldr	r3, [pc, #172]	; (aba8 <isr+0x6b4>)
    aafa:	3607      	adds	r6, #7
    aafc:	9305      	str	r3, [sp, #20]
    aafe:	68fb      	ldr	r3, [r7, #12]
    ab00:	0207      	lsls	r7, r0, #8
    ab02:	189b      	adds	r3, r3, r2
    ab04:	b29b      	uxth	r3, r3
    ab06:	0a3f      	lsrs	r7, r7, #8
    ab08:	9304      	str	r3, [sp, #16]
    ab0a:	4a21      	ldr	r2, [pc, #132]	; (ab90 <isr+0x69c>)
    ab0c:	2307      	movs	r3, #7
    ab0e:	0038      	movs	r0, r7
    ab10:	9403      	str	r4, [sp, #12]
    ab12:	f7f5 fcf1 	bl	4f8 <__aeabi_lmul>
    ab16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ab18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ab1a:	1a12      	subs	r2, r2, r0
    ab1c:	418b      	sbcs	r3, r1
    ab1e:	0010      	movs	r0, r2
    ab20:	22fa      	movs	r2, #250	; 0xfa
    ab22:	0019      	movs	r1, r3
    ab24:	0092      	lsls	r2, r2, #2
    ab26:	2300      	movs	r3, #0
    ab28:	f7f5 fcc6 	bl	4b8 <__aeabi_uldivmod>
    ab2c:	4a17      	ldr	r2, [pc, #92]	; (ab8c <isr+0x698>)
    ab2e:	9002      	str	r0, [sp, #8]
    ab30:	2300      	movs	r3, #0
    ab32:	980c      	ldr	r0, [sp, #48]	; 0x30
    ab34:	0021      	movs	r1, r4
    ab36:	9701      	str	r7, [sp, #4]
    ab38:	f7f5 fcde 	bl	4f8 <__aeabi_lmul>
    ab3c:	4a14      	ldr	r2, [pc, #80]	; (ab90 <isr+0x69c>)
    ab3e:	2307      	movs	r3, #7
    ab40:	f7f5 fcba 	bl	4b8 <__aeabi_uldivmod>
    ab44:	0200      	lsls	r0, r0, #8
    ab46:	0a00      	lsrs	r0, r0, #8
    ab48:	b2f6      	uxtb	r6, r6
    ab4a:	9000      	str	r0, [sp, #0]
    ab4c:	002b      	movs	r3, r5
    ab4e:	0032      	movs	r2, r6
    ab50:	0021      	movs	r1, r4
    ab52:	0020      	movs	r0, r4
    ab54:	f7fd f83a 	bl	7bcc <ticker_start>
		     TICKER_US_TO_TICKS(conn_interval_us),
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
		     (ticks_slot_offset + conn->hdr.ticks_slot),
		     event_slave_prepare, conn, ticker_success_assert,
		     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ab58:	2302      	movs	r3, #2
    ab5a:	4398      	bics	r0, r3
    ab5c:	42a0      	cmp	r0, r4
    ab5e:	d001      	beq.n	ab64 <isr+0x670>
    ab60:	f001 fd64 	bl	c62c <isr+0x2138>
    ab64:	f001 fda9 	bl	c6ba <isr+0x21c6>
    ab68:	20000ea0 	.word	0x20000ea0
    ab6c:	000004e2 	.word	0x000004e2
    ab70:	00002710 	.word	0x00002710
    ab74:	02625a00 	.word	0x02625a00
    ab78:	01c9c380 	.word	0x01c9c380
    ab7c:	000102dc 	.word	0x000102dc
    ab80:	000f4240 	.word	0x000f4240
    ab84:	000f423f 	.word	0x000f423f
    ab88:	00000452 	.word	0x00000452
    ab8c:	3b9aca00 	.word	0x3b9aca00
    ab90:	1afd498d 	.word	0x1afd498d
    ab94:	000003e6 	.word	0x000003e6
    ab98:	00008d81 	.word	0x00008d81
    ab9c:	000003e7 	.word	0x000003e7
    aba0:	000003fe 	.word	0x000003fe
    aba4:	00008da1 	.word	0x00008da1
    aba8:	0000a269 	.word	0x0000a269
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    abac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    abae:	2b00      	cmp	r3, #0
    abb0:	d101      	bne.n	abb6 <isr+0x6c2>
    abb2:	f001 fd3e 	bl	c632 <isr+0x213e>
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
    abb6:	0033      	movs	r3, r6
    abb8:	33dd      	adds	r3, #221	; 0xdd
    abba:	781b      	ldrb	r3, [r3, #0]
    abbc:	06db      	lsls	r3, r3, #27
    abbe:	0fda      	lsrs	r2, r3, #31
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    abc0:	d003      	beq.n	abca <isr+0x6d6>
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
		     (devmatch_ok) || (irkmatch_ok))) {
    abc2:	433d      	orrs	r5, r7
    abc4:	d101      	bne.n	abca <isr+0x6d6>
    abc6:	f001 fd34 	bl	c632 <isr+0x213e>
static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    abca:	233e      	movs	r3, #62	; 0x3e
    abcc:	0031      	movs	r1, r6
    abce:	33ff      	adds	r3, #255	; 0xff
    abd0:	5cf3      	ldrb	r3, [r6, r3]
    abd2:	31fc      	adds	r1, #252	; 0xfc
    abd4:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    abd6:	009b      	lsls	r3, r3, #2
    abd8:	581b      	ldr	r3, [r3, r0]
    abda:	930a      	str	r3, [sp, #40]	; 0x28

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    abdc:	680b      	ldr	r3, [r1, #0]
    abde:	2b00      	cmp	r3, #0
    abe0:	d100      	bne.n	abe4 <isr+0x6f0>
    abe2:	e215      	b.n	b010 <isr+0xb1c>
    abe4:	23bf      	movs	r3, #191	; 0xbf
    abe6:	005b      	lsls	r3, r3, #1
    abe8:	5cf3      	ldrb	r3, [r6, r3]
    abea:	2b00      	cmp	r3, #0
    abec:	d008      	beq.n	ac00 <isr+0x70c>
				      (_radio.fc_req == _radio.fc_ack)) &&
    abee:	23be      	movs	r3, #190	; 0xbe
    abf0:	217e      	movs	r1, #126	; 0x7e
    abf2:	005b      	lsls	r3, r3, #1
    abf4:	31ff      	adds	r1, #255	; 0xff
    abf6:	5cf3      	ldrb	r3, [r6, r3]

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    abf8:	5c71      	ldrb	r1, [r6, r1]
    abfa:	4299      	cmp	r1, r3
    abfc:	d000      	beq.n	ac00 <isr+0x70c>
    abfe:	e207      	b.n	b010 <isr+0xb1c>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ac00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac02:	7a1b      	ldrb	r3, [r3, #8]
    ac04:	0719      	lsls	r1, r3, #28
    ac06:	d007      	beq.n	ac18 <isr+0x724>
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
    ac08:	220f      	movs	r2, #15
    ac0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac0c:	7a1b      	ldrb	r3, [r3, #8]
    ac0e:	401a      	ands	r2, r3
    ac10:	2a01      	cmp	r2, #1
    ac12:	d000      	beq.n	ac16 <isr+0x722>
    ac14:	e1fc      	b.n	b010 <isr+0xb1c>
    ac16:	e02a      	b.n	ac6e <isr+0x77a>
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
    ac18:	2a00      	cmp	r2, #0
    ac1a:	d015      	beq.n	ac48 <isr+0x754>
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
	    ((radio_tmr_end_get() + 502) <
    ac1c:	f7fc f93a 	bl	6e94 <radio_tmr_end_get>
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    ac20:	0033      	movs	r3, r6
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    ac22:	2500      	movs	r5, #0
    ac24:	30f7      	adds	r0, #247	; 0xf7
    ac26:	30ff      	adds	r0, #255	; 0xff
	    ((radio_tmr_end_get() + 502) <
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    ac28:	33d8      	adds	r3, #216	; 0xd8
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    ac2a:	0004      	movs	r4, r0
    ac2c:	4aeb      	ldr	r2, [pc, #940]	; (afdc <isr+0xae8>)
    ac2e:	6818      	ldr	r0, [r3, #0]
    ac30:	0029      	movs	r1, r5
    ac32:	2307      	movs	r3, #7
    ac34:	f7f5 fc60 	bl	4f8 <__aeabi_lmul>
    ac38:	4ae9      	ldr	r2, [pc, #932]	; (afe0 <isr+0xaec>)
    ac3a:	2300      	movs	r3, #0
    ac3c:	f7f5 fc3c 	bl	4b8 <__aeabi_uldivmod>
    ac40:	4284      	cmp	r4, r0
    ac42:	d300      	bcc.n	ac46 <isr+0x752>
    ac44:	e1e4      	b.n	b010 <isr+0xb1c>
    ac46:	e036      	b.n	acb6 <isr+0x7c2>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    ac48:	0032      	movs	r2, r6
    ac4a:	32dd      	adds	r2, #221	; 0xdd
    ac4c:	7812      	ldrb	r2, [r2, #0]
    ac4e:	065b      	lsls	r3, r3, #25
    ac50:	0652      	lsls	r2, r2, #25

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
    ac52:	0fd2      	lsrs	r2, r2, #31
    ac54:	0fdb      	lsrs	r3, r3, #31
    ac56:	429a      	cmp	r2, r3
    ac58:	d1d6      	bne.n	ac08 <isr+0x714>
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
    ac5a:	0030      	movs	r0, r6
    ac5c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ac5e:	30de      	adds	r0, #222	; 0xde
    ac60:	2206      	movs	r2, #6
    ac62:	310a      	adds	r1, #10
    ac64:	f7f6 f802 	bl	c6c <memcmp>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    ac68:	2800      	cmp	r0, #0
    ac6a:	d0d7      	beq.n	ac1c <isr+0x728>
    ac6c:	e7cc      	b.n	ac08 <isr+0x714>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    ac6e:	0032      	movs	r2, r6
    ac70:	32dd      	adds	r2, #221	; 0xdd
    ac72:	7812      	ldrb	r2, [r2, #0]
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    ac74:	09db      	lsrs	r3, r3, #7
    ac76:	09d2      	lsrs	r2, r2, #7
    ac78:	429a      	cmp	r2, r3
    ac7a:	d005      	beq.n	ac88 <isr+0x794>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    ac7c:	0033      	movs	r3, r6
    ac7e:	33dd      	adds	r3, #221	; 0xdd
    ac80:	781b      	ldrb	r3, [r3, #0]
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
    ac82:	069b      	lsls	r3, r3, #26
    ac84:	d40a      	bmi.n	ac9c <isr+0x7a8>
    ac86:	e1c3      	b.n	b010 <isr+0xb1c>
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
    ac88:	0030      	movs	r0, r6
    ac8a:	990a      	ldr	r1, [sp, #40]	; 0x28
    ac8c:	30e4      	adds	r0, #228	; 0xe4
    ac8e:	2206      	movs	r2, #6
    ac90:	3110      	adds	r1, #16
    ac92:	f7f5 ffeb 	bl	c6c <memcmp>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    ac96:	2800      	cmp	r0, #0
    ac98:	d0c0      	beq.n	ac1c <isr+0x728>
    ac9a:	e7ef      	b.n	ac7c <isr+0x788>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    ac9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ac9e:	7a1b      	ldrb	r3, [r3, #8]
    aca0:	09db      	lsrs	r3, r3, #7
    aca2:	d100      	bne.n	aca6 <isr+0x7b2>
    aca4:	e1b4      	b.n	b010 <isr+0xb1c>
		(pdu_adv_rx->rx_addr != 0) &&
    aca6:	223f      	movs	r2, #63	; 0x3f
    aca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    acaa:	7d5b      	ldrb	r3, [r3, #21]
    acac:	4393      	bics	r3, r2
    acae:	2b40      	cmp	r3, #64	; 0x40
    acb0:	d000      	beq.n	acb4 <isr+0x7c0>
    acb2:	e1ad      	b.n	b010 <isr+0xb1c>
    acb4:	e7b2      	b.n	ac1c <isr+0x728>
		u32_t conn_offset_us;
		u32_t ticker_status;
		u32_t conn_space_us;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    acb6:	2004      	movs	r0, #4
    acb8:	f7fd f92e 	bl	7f18 <packet_rx_reserve_get>
    acbc:	900e      	str	r0, [sp, #56]	; 0x38
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    acbe:	2800      	cmp	r0, #0
    acc0:	d101      	bne.n	acc6 <isr+0x7d2>
    acc2:	f001 fcb6 	bl	c632 <isr+0x213e>
			return 1;
		}

		_radio.state = STATE_STOP;
    acc6:	2304      	movs	r3, #4
    acc8:	7433      	strb	r3, [r6, #16]

		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
    acca:	4bc6      	ldr	r3, [pc, #792]	; (afe4 <isr+0xaf0>)
    accc:	681f      	ldr	r7, [r3, #0]
		_radio.scanner.conn = NULL;
    acce:	601d      	str	r5, [r3, #0]

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    acd0:	f7fb ff56 	bl	6b80 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    acd4:	220f      	movs	r2, #15
    acd6:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    acd8:	2140      	movs	r1, #64	; 0x40
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    acda:	4393      	bics	r3, r2

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			pdu_adv_tx->chan_sel = 1;
    acdc:	3216      	adds	r2, #22
    acde:	4313      	orrs	r3, r2
    ace0:	7003      	strb	r3, [r0, #0]
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ace2:	0033      	movs	r3, r6
    ace4:	33dd      	adds	r3, #221	; 0xdd
    ace6:	781b      	ldrb	r3, [r3, #0]
		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    ace8:	0004      	movs	r4, r0
			pdu_adv_tx->chan_sel = 1;
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    acea:	09db      	lsrs	r3, r3, #7
    acec:	019a      	lsls	r2, r3, #6
    acee:	7803      	ldrb	r3, [r0, #0]
    acf0:	438b      	bics	r3, r1
    acf2:	4313      	orrs	r3, r2
    acf4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    acf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    acf8:	7801      	ldrb	r1, [r0, #0]
    acfa:	7a1b      	ldrb	r3, [r3, #8]
    acfc:	065b      	lsls	r3, r3, #25
    acfe:	0fdb      	lsrs	r3, r3, #31
    ad00:	01da      	lsls	r2, r3, #7
    ad02:	237f      	movs	r3, #127	; 0x7f
    ad04:	400b      	ands	r3, r1
    ad06:	4313      	orrs	r3, r2
    ad08:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    ad0a:	2322      	movs	r3, #34	; 0x22
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    ad0c:	0031      	movs	r1, r6
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    ad0e:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    ad10:	1c83      	adds	r3, r0, #2
    ad12:	31e4      	adds	r1, #228	; 0xe4
    ad14:	2206      	movs	r2, #6
    ad16:	0018      	movs	r0, r3
    ad18:	9313      	str	r3, [sp, #76]	; 0x4c
    ad1a:	f7f5 ffbc 	bl	c96 <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
    ad1e:	0023      	movs	r3, r4
    ad20:	990a      	ldr	r1, [sp, #40]	; 0x28
    ad22:	3308      	adds	r3, #8
    ad24:	0018      	movs	r0, r3
    ad26:	2206      	movs	r2, #6
    ad28:	310a      	adds	r1, #10
    ad2a:	9311      	str	r3, [sp, #68]	; 0x44
    ad2c:	f7f5 ffb3 	bl	c96 <memcpy>
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
    ad30:	0039      	movs	r1, r7
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    ad32:	0020      	movs	r0, r4
		       access_addr[0], &conn->access_addr[0], 4);
    ad34:	3110      	adds	r1, #16
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    ad36:	2204      	movs	r2, #4
    ad38:	300e      	adds	r0, #14
    ad3a:	f7f5 ffac 	bl	c96 <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
    ad3e:	0039      	movs	r1, r7
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    ad40:	0020      	movs	r0, r4
		       &conn->crc_init[0], 3);
    ad42:	3114      	adds	r1, #20
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    ad44:	2203      	movs	r2, #3
    ad46:	3012      	adds	r0, #18
    ad48:	f7f5 ffa5 	bl	c96 <memcpy>
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;
    ad4c:	2301      	movs	r3, #1

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;
    ad4e:	0030      	movs	r0, r6
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;
    ad50:	7563      	strb	r3, [r4, #21]

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;
    ad52:	30f0      	adds	r0, #240	; 0xf0
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;

		conn_interval_us =
    ad54:	8803      	ldrh	r3, [r0, #0]
    ad56:	4aa4      	ldr	r2, [pc, #656]	; (afe8 <isr+0xaf4>)
    ad58:	435a      	muls	r2, r3
    ad5a:	9212      	str	r2, [sp, #72]	; 0x48
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ad5c:	f7fc f89a 	bl	6e94 <radio_tmr_end_get>
    ad60:	23db      	movs	r3, #219	; 0xdb
    ad62:	00db      	lsls	r3, r3, #3
    ad64:	18c6      	adds	r6, r0, r3
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ad66:	0029      	movs	r1, r5
    ad68:	0028      	movs	r0, r5
    ad6a:	f7fb fea9 	bl	6ac0 <radio_tx_chain_delay_get>
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    ad6e:	0029      	movs	r1, r5

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    ad70:	1a36      	subs	r6, r6, r0
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    ad72:	0028      	movs	r0, r5
    ad74:	f7fb fea2 	bl	6abc <radio_tx_ready_delay_get>
    ad78:	1a33      	subs	r3, r6, r0
    ad7a:	930f      	str	r3, [sp, #60]	; 0x3c

		if (_radio.scanner.win_offset_us == 0) {
    ad7c:	4b99      	ldr	r3, [pc, #612]	; (afe4 <isr+0xaf0>)
    ad7e:	685d      	ldr	r5, [r3, #4]
    ad80:	2d00      	cmp	r5, #0
    ad82:	d104      	bne.n	ad8e <isr+0x89a>
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
    ad84:	75a5      	strb	r5, [r4, #22]
    ad86:	75e5      	strb	r5, [r4, #23]
    ad88:	e00f      	b.n	adaa <isr+0x8b6>
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
    ad8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ad8c:	18ed      	adds	r5, r5, r3
		if (_radio.scanner.win_offset_us == 0) {
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    ad8e:	2d00      	cmp	r5, #0
    ad90:	dbfb      	blt.n	ad8a <isr+0x896>
    ad92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ad94:	42ab      	cmp	r3, r5
    ad96:	d8f8      	bhi.n	ad8a <isr+0x896>
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
    ad98:	1ae8      	subs	r0, r5, r3
    ad9a:	4993      	ldr	r1, [pc, #588]	; (afe8 <isr+0xaf4>)
    ad9c:	f7f5 fa16 	bl	1cc <__aeabi_uidiv>
    ada0:	b280      	uxth	r0, r0
    ada2:	75a0      	strb	r0, [r4, #22]
    ada4:	0a00      	lsrs	r0, r0, #8
    ada6:	75e0      	strb	r0, [r4, #23]
    ada8:	950f      	str	r5, [sp, #60]	; 0x3c
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    adaa:	0039      	movs	r1, r7
    adac:	0020      	movs	r0, r4
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    adae:	4b8f      	ldr	r3, [pc, #572]	; (afec <isr+0xaf8>)
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    adb0:	2205      	movs	r2, #5
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    adb2:	781b      	ldrb	r3, [r3, #0]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    adb4:	3117      	adds	r1, #23
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    adb6:	7623      	strb	r3, [r4, #24]
    adb8:	4b8c      	ldr	r3, [pc, #560]	; (afec <isr+0xaf8>)
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    adba:	301e      	adds	r0, #30
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    adbc:	785b      	ldrb	r3, [r3, #1]
			_radio.scanner.conn_interval;
    adbe:	4d8c      	ldr	r5, [pc, #560]	; (aff0 <isr+0xafc>)
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    adc0:	7663      	strb	r3, [r4, #25]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    adc2:	4b8c      	ldr	r3, [pc, #560]	; (aff4 <isr+0xb00>)
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
		       &conn->data_chan_map[0],
		       sizeof(pdu_adv_tx->payload.connect_ind.lldata.chan_map));
		pdu_adv_tx->payload.connect_ind.lldata.hop =
    adc4:	1d26      	adds	r6, r4, #4
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    adc6:	781b      	ldrb	r3, [r3, #0]
    adc8:	76a3      	strb	r3, [r4, #26]
    adca:	4b8a      	ldr	r3, [pc, #552]	; (aff4 <isr+0xb00>)
    adcc:	785b      	ldrb	r3, [r3, #1]
    adce:	76e3      	strb	r3, [r4, #27]
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
    add0:	4b89      	ldr	r3, [pc, #548]	; (aff8 <isr+0xb04>)
    add2:	781b      	ldrb	r3, [r3, #0]
    add4:	7723      	strb	r3, [r4, #28]
    add6:	4b88      	ldr	r3, [pc, #544]	; (aff8 <isr+0xb04>)
    add8:	785b      	ldrb	r3, [r3, #1]
    adda:	7763      	strb	r3, [r4, #29]
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    addc:	f7f5 ff5b 	bl	c96 <memcpy>
		       &conn->data_chan_map[0],
		       sizeof(pdu_adv_tx->payload.connect_ind.lldata.chan_map));
		pdu_adv_tx->payload.connect_ind.lldata.hop =
    ade0:	231f      	movs	r3, #31
    ade2:	7fba      	ldrb	r2, [r7, #30]
    ade4:	401a      	ands	r2, r3
    ade6:	0011      	movs	r1, r2
    ade8:	7ff2      	ldrb	r2, [r6, #31]
    adea:	439a      	bics	r2, r3
    adec:	430a      	orrs	r2, r1
    adee:	77f2      	strb	r2, [r6, #31]
			conn->data_chan_hop;
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
    adf0:	002a      	movs	r2, r5
    adf2:	32ff      	adds	r2, #255	; 0xff
    adf4:	7ff1      	ldrb	r1, [r6, #31]
    adf6:	7f52      	ldrb	r2, [r2, #29]
    adf8:	400b      	ands	r3, r1
    adfa:	0152      	lsls	r2, r2, #5
    adfc:	4313      	orrs	r3, r2
    adfe:	77f3      	strb	r3, [r6, #31]

		radio_switch_complete_and_disable();
    ae00:	f7fb fed2 	bl	6ba8 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(pdu_adv_tx);
    ae04:	0020      	movs	r0, r4
    ae06:	f7fb fe51 	bl	6aac <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    ae0a:	f7fb fe7f 	bl	6b0c <radio_is_ready>
    ae0e:	9010      	str	r0, [sp, #64]	; 0x40
    ae10:	2800      	cmp	r0, #0
    ae12:	d001      	beq.n	ae18 <isr+0x924>
    ae14:	f001 fc0a 	bl	c62c <isr+0x2138>

		radio_tmr_end_capture();
    ae18:	f7fc f826 	bl	6e68 <radio_tmr_end_capture>
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ae1c:	228c      	movs	r2, #140	; 0x8c
    ae1e:	35fc      	adds	r5, #252	; 0xfc
    ae20:	68a9      	ldr	r1, [r5, #8]
    ae22:	0052      	lsls	r2, r2, #1
    ae24:	0038      	movs	r0, r7
    ae26:	f7fb fcbd 	bl	67a4 <mem_index_get>
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ae2a:	2206      	movs	r2, #6
		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    ae2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ae2e:	8438      	strh	r0, [r7, #32]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    ae30:	2140      	movs	r1, #64	; 0x40
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ae32:	711a      	strb	r2, [r3, #4]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    ae34:	466a      	mov	r2, sp
    ae36:	001d      	movs	r5, r3
    ae38:	1852      	adds	r2, r2, r1
    ae3a:	7812      	ldrb	r2, [r2, #0]
		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    ae3c:	80d8      	strh	r0, [r3, #6]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    ae3e:	72da      	strb	r2, [r3, #11]
		radio_le_conn_cmplt->role = 0x00;
    ae40:	466b      	mov	r3, sp
    ae42:	000a      	movs	r2, r1
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ae44:	0028      	movs	r0, r5
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
    ae46:	185b      	adds	r3, r3, r1
    ae48:	781b      	ldrb	r3, [r3, #0]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ae4a:	3a3a      	subs	r2, #58	; 0x3a
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
    ae4c:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    ae4e:	7823      	ldrb	r3, [r4, #0]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ae50:	9911      	ldr	r1, [sp, #68]	; 0x44
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    ae52:	09db      	lsrs	r3, r3, #7
    ae54:	736b      	strb	r3, [r5, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ae56:	300e      	adds	r0, #14
    ae58:	f7f5 ff1d 	bl	c96 <memcpy>
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ae5c:	7823      	ldrb	r3, [r4, #0]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ae5e:	980e      	ldr	r0, [sp, #56]	; 0x38
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ae60:	065b      	lsls	r3, r3, #25
    ae62:	0fdb      	lsrs	r3, r3, #31
    ae64:	752b      	strb	r3, [r5, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ae66:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ae68:	2206      	movs	r2, #6
    ae6a:	3015      	adds	r0, #21
    ae6c:	f7f5 ff13 	bl	c96 <memcpy>
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    ae70:	2230      	movs	r2, #48	; 0x30
    ae72:	466b      	mov	r3, sp
    ae74:	189b      	adds	r3, r3, r2
    ae76:	781b      	ldrb	r3, [r3, #0]
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    ae78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    ae7a:	76eb      	strb	r3, [r5, #27]
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    ae7c:	4b5b      	ldr	r3, [pc, #364]	; (afec <isr+0xaf8>)

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    ae7e:	350b      	adds	r5, #11
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    ae80:	781b      	ldrb	r3, [r3, #0]
    ae82:	7713      	strb	r3, [r2, #28]
    ae84:	4b59      	ldr	r3, [pc, #356]	; (afec <isr+0xaf8>)
    ae86:	785b      	ldrb	r3, [r3, #1]
    ae88:	7753      	strb	r3, [r2, #29]
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
    ae8a:	4b5a      	ldr	r3, [pc, #360]	; (aff4 <isr+0xb00>)
    ae8c:	781b      	ldrb	r3, [r3, #0]
    ae8e:	7793      	strb	r3, [r2, #30]
    ae90:	4b58      	ldr	r3, [pc, #352]	; (aff4 <isr+0xb00>)
    ae92:	785b      	ldrb	r3, [r3, #1]
    ae94:	77d3      	strb	r3, [r2, #31]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    ae96:	0013      	movs	r3, r2
    ae98:	4a57      	ldr	r2, [pc, #348]	; (aff8 <isr+0xb04>)
    ae9a:	3320      	adds	r3, #32
    ae9c:	7812      	ldrb	r2, [r2, #0]
    ae9e:	701a      	strb	r2, [r3, #0]
    aea0:	4a55      	ldr	r2, [pc, #340]	; (aff8 <isr+0xb04>)
    aea2:	7852      	ldrb	r2, [r2, #1]
    aea4:	705a      	strb	r2, [r3, #1]
		radio_le_conn_cmplt->mca =
			pdu_adv_tx->payload.connect_ind.lldata.sca;
    aea6:	7ff3      	ldrb	r3, [r6, #31]
    aea8:	095b      	lsrs	r3, r3, #5
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
		radio_le_conn_cmplt->mca =
    aeaa:	75eb      	strb	r3, [r5, #23]
			pdu_adv_tx->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    aeac:	8c38      	ldrh	r0, [r7, #32]
    aeae:	f7fd fb3f 	bl	8530 <rx_fc_lock>
		packet_rx_enqueue();
    aeb2:	f7fd fbc9 	bl	8648 <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    aeb6:	2003      	movs	r0, #3
    aeb8:	f7fd f82e 	bl	7f18 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    aebc:	2800      	cmp	r0, #0
    aebe:	d101      	bne.n	aec4 <isr+0x9d0>
    aec0:	f001 fbb4 	bl	c62c <isr+0x2138>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    aec4:	8c3b      	ldrh	r3, [r7, #32]
    aec6:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    aec8:	230b      	movs	r3, #11
    aeca:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
    aecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aece:	7a1a      	ldrb	r2, [r3, #8]
    aed0:	2320      	movs	r3, #32
    aed2:	4013      	ands	r3, r2
    aed4:	d00e      	beq.n	aef4 <isr+0xa00>
				u16_t aa_ls =
    aed6:	7c7b      	ldrb	r3, [r7, #17]
    aed8:	7c39      	ldrb	r1, [r7, #16]
    aeda:	021b      	lsls	r3, r3, #8
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    aedc:	7cfa      	ldrb	r2, [r7, #19]
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
				u16_t aa_ls =
    aede:	4319      	orrs	r1, r3
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    aee0:	7cbb      	ldrb	r3, [r7, #18]
    aee2:	0212      	lsls	r2, r2, #8
    aee4:	4313      	orrs	r3, r2
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    aee6:	2440      	movs	r4, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    aee8:	404b      	eors	r3, r1
    aeea:	83fb      	strh	r3, [r7, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    aeec:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    aeee:	7f3a      	ldrb	r2, [r7, #28]
    aef0:	4322      	orrs	r2, r4
    aef2:	773a      	strb	r2, [r7, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    aef4:	72c3      	strb	r3, [r0, #11]
			}

			packet_rx_enqueue();
    aef6:	f7fd fba7 	bl	8648 <packet_rx_enqueue>
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    aefa:	4b3d      	ldr	r3, [pc, #244]	; (aff0 <isr+0xafc>)
    aefc:	001a      	movs	r2, r3
    aefe:	32f8      	adds	r2, #248	; 0xf8
    af00:	6812      	ldr	r2, [r2, #0]
    af02:	60fa      	str	r2, [r7, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    af04:	22c0      	movs	r2, #192	; 0xc0
    af06:	0052      	lsls	r2, r2, #1
    af08:	589c      	ldr	r4, [r3, r2]
		conn->hdr.ticks_xtal_to_start =
    af0a:	2327      	movs	r3, #39	; 0x27
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    af0c:	2200      	movs	r2, #0
			packet_rx_enqueue();
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    af0e:	607c      	str	r4, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    af10:	603b      	str	r3, [r7, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    af12:	60ba      	str	r2, [r7, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    af14:	429c      	cmp	r4, r3
    af16:	d200      	bcs.n	af1a <isr+0xa26>
    af18:	001c      	movs	r4, r3
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;

		/* Stop Scanner */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    af1a:	2100      	movs	r1, #0
    af1c:	4b37      	ldr	r3, [pc, #220]	; (affc <isr+0xb08>)
    af1e:	2206      	movs	r2, #6
    af20:	9300      	str	r3, [sp, #0]
    af22:	0008      	movs	r0, r1
    af24:	4b36      	ldr	r3, [pc, #216]	; (b000 <isr+0xb0c>)
    af26:	f7fc fee9 	bl	7cfc <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    af2a:	21a2      	movs	r1, #162	; 0xa2

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    af2c:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    af2e:	00c9      	lsls	r1, r1, #3
    af30:	f7fd ff16 	bl	8d60 <ticker_stop_scan_assert>

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    af34:	002b      	movs	r3, r5
    af36:	2204      	movs	r2, #4
    af38:	0029      	movs	r1, r5
    af3a:	9500      	str	r5, [sp, #0]
    af3c:	0028      	movs	r0, r5
    af3e:	f7fc fedd 	bl	7cfc <ticker_stop>
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    af42:	4a27      	ldr	r2, [pc, #156]	; (afe0 <isr+0xaec>)
    af44:	2300      	movs	r3, #0
    af46:	9812      	ldr	r0, [sp, #72]	; 0x48
    af48:	0029      	movs	r1, r5
    af4a:	f7f5 fad5 	bl	4f8 <__aeabi_lmul>
    af4e:	4a23      	ldr	r2, [pc, #140]	; (afdc <isr+0xae8>)
    af50:	2307      	movs	r3, #7
    af52:	900a      	str	r0, [sp, #40]	; 0x28
    af54:	910b      	str	r1, [sp, #44]	; 0x2c
    af56:	f7f5 faaf 	bl	4b8 <__aeabi_uldivmod>
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
    af5a:	4b25      	ldr	r3, [pc, #148]	; (aff0 <isr+0xafc>)
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    af5c:	900e      	str	r0, [sp, #56]	; 0x38
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    RADIO_TICKER_ID_SCAN_STOP, NULL, NULL);

		/* Start master */
		ticker_status =
    af5e:	685b      	ldr	r3, [r3, #4]
    af60:	4a1e      	ldr	r2, [pc, #120]	; (afdc <isr+0xae8>)
    af62:	1b1b      	subs	r3, r3, r4
    af64:	930c      	str	r3, [sp, #48]	; 0x30
    af66:	4b27      	ldr	r3, [pc, #156]	; (b004 <isr+0xb10>)
    af68:	8c3e      	ldrh	r6, [r7, #32]
    af6a:	9308      	str	r3, [sp, #32]
    af6c:	4b26      	ldr	r3, [pc, #152]	; (b008 <isr+0xb14>)
    af6e:	9706      	str	r7, [sp, #24]
    af70:	9307      	str	r3, [sp, #28]
    af72:	4b26      	ldr	r3, [pc, #152]	; (b00c <isr+0xb18>)
    af74:	3607      	adds	r6, #7
    af76:	9305      	str	r3, [sp, #20]
    af78:	68fb      	ldr	r3, [r7, #12]
    af7a:	9503      	str	r5, [sp, #12]
    af7c:	191c      	adds	r4, r3, r4
    af7e:	b2a4      	uxth	r4, r4
    af80:	2307      	movs	r3, #7
    af82:	9404      	str	r4, [sp, #16]
    af84:	f7f5 fab8 	bl	4f8 <__aeabi_lmul>
    af88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    af8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    af8c:	22fa      	movs	r2, #250	; 0xfa
    af8e:	1a1b      	subs	r3, r3, r0
    af90:	418c      	sbcs	r4, r1
    af92:	0092      	lsls	r2, r2, #2
    af94:	0018      	movs	r0, r3
    af96:	0021      	movs	r1, r4
    af98:	2300      	movs	r3, #0
    af9a:	f7f5 fa8d 	bl	4b8 <__aeabi_uldivmod>
    af9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    afa0:	9002      	str	r0, [sp, #8]
    afa2:	9301      	str	r3, [sp, #4]
    afa4:	4a0e      	ldr	r2, [pc, #56]	; (afe0 <isr+0xaec>)
    afa6:	2300      	movs	r3, #0
    afa8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    afaa:	0029      	movs	r1, r5
    afac:	f7f5 faa4 	bl	4f8 <__aeabi_lmul>
    afb0:	4a0a      	ldr	r2, [pc, #40]	; (afdc <isr+0xae8>)
    afb2:	2307      	movs	r3, #7
    afb4:	f7f5 fa80 	bl	4b8 <__aeabi_uldivmod>
    afb8:	0200      	lsls	r0, r0, #8
    afba:	0a00      	lsrs	r0, r0, #8
    afbc:	b2f6      	uxtb	r6, r6
    afbe:	9000      	str	r0, [sp, #0]
    afc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afc2:	0032      	movs	r2, r6
    afc4:	0029      	movs	r1, r5
    afc6:	0028      	movs	r0, r5
    afc8:	f7fc fe00 	bl	7bcc <ticker_start>
				     TICKER_REMAINDER(conn_interval_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     event_master_prepare, conn,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    afcc:	2302      	movs	r3, #2
    afce:	4398      	bics	r0, r3
    afd0:	42a8      	cmp	r0, r5
    afd2:	d001      	beq.n	afd8 <isr+0xae4>
    afd4:	f001 fb2a 	bl	c62c <isr+0x2138>
    afd8:	f001 fb6f 	bl	c6ba <isr+0x21c6>
    afdc:	1afd498d 	.word	0x1afd498d
    afe0:	3b9aca00 	.word	0x3b9aca00
    afe4:	20000f9c 	.word	0x20000f9c
    afe8:	000004e2 	.word	0x000004e2
    afec:	20000f90 	.word	0x20000f90
    aff0:	20000ea0 	.word	0x20000ea0
    aff4:	20000f92 	.word	0x20000f92
    aff8:	20000f94 	.word	0x20000f94
    affc:	0000050f 	.word	0x0000050f
    b000:	00008d61 	.word	0x00008d61
    b004:	00000527 	.word	0x00000527
    b008:	00008da1 	.word	0x00008da1
    b00c:	0000a261 	.word	0x0000a261

		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    b010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b012:	4cc7      	ldr	r4, [pc, #796]	; (b330 <isr+0xe3c>)
    b014:	7a19      	ldrb	r1, [r3, #8]
    b016:	230f      	movs	r3, #15
    b018:	400b      	ands	r3, r1
    b01a:	d001      	beq.n	b020 <isr+0xb2c>
    b01c:	2b06      	cmp	r3, #6
    b01e:	d156      	bne.n	b0ce <isr+0xbda>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
		 (_radio.scanner.type != 0) &&
    b020:	0026      	movs	r6, r4
    b022:	36dd      	adds	r6, #221	; 0xdd
		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    b024:	7832      	ldrb	r2, [r6, #0]
    b026:	0712      	lsls	r2, r2, #28
    b028:	d549      	bpl.n	b0be <isr+0xbca>
		 (_radio.scanner.type != 0) &&
		 (_radio.scanner.conn == 0)) {
    b02a:	0022      	movs	r2, r4
    b02c:	32fc      	adds	r2, #252	; 0xfc
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
		 (_radio.scanner.type != 0) &&
    b02e:	6812      	ldr	r2, [r2, #0]
    b030:	2a00      	cmp	r2, #0
    b032:	d144      	bne.n	b0be <isr+0xbca>
		 (_radio.scanner.conn == 0)) {
		struct pdu_adv *pdu_adv_tx;
		u32_t err;

		/* save the adv packet */
		err = isr_rx_scan_report(rssi_ready);
    b034:	980e      	ldr	r0, [sp, #56]	; 0x38
    b036:	f7fd fb37 	bl	86a8 <isr_rx_scan_report>
    b03a:	1e07      	subs	r7, r0, #0
		if (err) {
    b03c:	d001      	beq.n	b042 <isr+0xb4e>
    b03e:	f001 faf8 	bl	c632 <isr+0x213e>
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    b042:	f7fb fd9d 	bl	6b80 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    b046:	220f      	movs	r2, #15
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    b048:	2140      	movs	r1, #64	; 0x40
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    b04a:	7803      	ldrb	r3, [r0, #0]
		if (err) {
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    b04c:	0005      	movs	r5, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    b04e:	4393      	bics	r3, r2
    b050:	3a0c      	subs	r2, #12
    b052:	4313      	orrs	r3, r2
    b054:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    b056:	7833      	ldrb	r3, [r6, #0]
    b058:	09db      	lsrs	r3, r3, #7
    b05a:	019a      	lsls	r2, r3, #6
    b05c:	7803      	ldrb	r3, [r0, #0]
    b05e:	438b      	bics	r3, r1
    b060:	4313      	orrs	r3, r2
    b062:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    b064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b066:	7801      	ldrb	r1, [r0, #0]
    b068:	7a1b      	ldrb	r3, [r3, #8]
    b06a:	065b      	lsls	r3, r3, #25
    b06c:	0fdb      	lsrs	r3, r3, #31
    b06e:	01da      	lsls	r2, r3, #7
    b070:	237f      	movs	r3, #127	; 0x7f
    b072:	400b      	ands	r3, r1
    b074:	4313      	orrs	r3, r2
    b076:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    b078:	0021      	movs	r1, r4
		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    b07a:	230c      	movs	r3, #12
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    b07c:	31e4      	adds	r1, #228	; 0xe4
		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    b07e:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    b080:	2206      	movs	r2, #6
    b082:	3002      	adds	r0, #2
    b084:	f7f5 fe07 	bl	c96 <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    b088:	0028      	movs	r0, r5
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
    b08a:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    b08c:	2206      	movs	r2, #6
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
    b08e:	310a      	adds	r1, #10
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    b090:	3008      	adds	r0, #8
    b092:	f7f5 fe00 	bl	c96 <memcpy>
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    b096:	0021      	movs	r1, r4
    b098:	2202      	movs	r2, #2
    b09a:	31dc      	adds	r1, #220	; 0xdc
    b09c:	780b      	ldrb	r3, [r1, #0]
		_radio.state = STATE_TX;

		radio_tmr_tifs_set(RADIO_TIFS);
    b09e:	2096      	movs	r0, #150	; 0x96
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    b0a0:	4313      	orrs	r3, r2
    b0a2:	700b      	strb	r3, [r1, #0]
		_radio.state = STATE_TX;
    b0a4:	7422      	strb	r2, [r4, #16]

		radio_tmr_tifs_set(RADIO_TIFS);
    b0a6:	f7fb fe13 	bl	6cd0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    b0aa:	0038      	movs	r0, r7
    b0ac:	f7fb fd6c 	bl	6b88 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    b0b0:	0028      	movs	r0, r5
    b0b2:	f7fb fcfb 	bl	6aac <radio_pkt_tx_set>
		radio_tmr_end_capture();
    b0b6:	f7fb fed7 	bl	6e68 <radio_tmr_end_capture>
    b0ba:	f001 fafe 	bl	c6ba <isr+0x21c6>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    b0be:	2b00      	cmp	r3, #0
    b0c0:	d105      	bne.n	b0ce <isr+0xbda>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    b0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b0c4:	7a5b      	ldrb	r3, [r3, #9]
    b0c6:	2b00      	cmp	r3, #0
    b0c8:	d142      	bne.n	b150 <isr+0xc5c>
    b0ca:	f001 fab2 	bl	c632 <isr+0x213e>
		radio_tmr_end_capture();

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    b0ce:	2b01      	cmp	r3, #1
    b0d0:	d006      	beq.n	b0e0 <isr+0xbec>
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    b0d2:	220b      	movs	r2, #11
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    b0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b0d6:	7a19      	ldrb	r1, [r3, #8]
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    b0d8:	400a      	ands	r2, r1
    b0da:	2a02      	cmp	r2, #2
    b0dc:	d122      	bne.n	b124 <isr+0xc30>
    b0de:	e7f0      	b.n	b0c2 <isr+0xbce>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    b0e0:	0023      	movs	r3, r4
    b0e2:	33dd      	adds	r3, #221	; 0xdd
    b0e4:	781a      	ldrb	r2, [r3, #0]

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    b0e6:	09cb      	lsrs	r3, r1, #7
    b0e8:	09d2      	lsrs	r2, r2, #7
    b0ea:	429a      	cmp	r2, r3
    b0ec:	d005      	beq.n	b0fa <isr+0xc06>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    b0ee:	0023      	movs	r3, r4
    b0f0:	33dd      	adds	r3, #221	; 0xdd
    b0f2:	781b      	ldrb	r3, [r3, #0]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
    b0f4:	069b      	lsls	r3, r3, #26
    b0f6:	d40a      	bmi.n	b10e <isr+0xc1a>
    b0f8:	e7eb      	b.n	b0d2 <isr+0xbde>
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
    b0fa:	0020      	movs	r0, r4
    b0fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    b0fe:	30e4      	adds	r0, #228	; 0xe4
    b100:	2206      	movs	r2, #6
    b102:	3110      	adds	r1, #16
    b104:	f7f5 fdb2 	bl	c6c <memcmp>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    b108:	2800      	cmp	r0, #0
    b10a:	d0da      	beq.n	b0c2 <isr+0xbce>
    b10c:	e7ef      	b.n	b0ee <isr+0xbfa>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    b10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b110:	7a1b      	ldrb	r3, [r3, #8]
    b112:	09db      	lsrs	r3, r3, #7
    b114:	d0dd      	beq.n	b0d2 <isr+0xbde>
		     (pdu_adv_rx->rx_addr != 0) &&
    b116:	223f      	movs	r2, #63	; 0x3f
    b118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b11a:	7d5b      	ldrb	r3, [r3, #21]
    b11c:	4393      	bics	r3, r2
    b11e:	2b40      	cmp	r3, #64	; 0x40
    b120:	d1d7      	bne.n	b0d2 <isr+0xbde>
    b122:	e7ce      	b.n	b0c2 <isr+0xbce>
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    b124:	230f      	movs	r3, #15
    b126:	400b      	ands	r3, r1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    b128:	2b07      	cmp	r3, #7
    b12a:	d106      	bne.n	b13a <isr+0xc46>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    b12c:	0022      	movs	r2, r4
    b12e:	32dd      	adds	r2, #221	; 0xdd
    b130:	7812      	ldrb	r2, [r2, #0]
    b132:	421a      	tst	r2, r3
    b134:	d1c5      	bne.n	b0c2 <isr+0xbce>
    b136:	f001 fa7c 	bl	c632 <isr+0x213e>
		   (_radio.scanner.phy)) ||
    b13a:	2b04      	cmp	r3, #4
    b13c:	d001      	beq.n	b142 <isr+0xc4e>
    b13e:	f001 fa78 	bl	c632 <isr+0x213e>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    b142:	0023      	movs	r3, r4
    b144:	33dc      	adds	r3, #220	; 0xdc
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    b146:	781b      	ldrb	r3, [r3, #0]
    b148:	079b      	lsls	r3, r3, #30
    b14a:	d4ba      	bmi.n	b0c2 <isr+0xbce>
    b14c:	f001 fa71 	bl	c632 <isr+0x213e>
		   (_radio.scanner.state != 0))) &&
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    b150:	34fc      	adds	r4, #252	; 0xfc
    b152:	6823      	ldr	r3, [r4, #0]
    b154:	2b00      	cmp	r3, #0
    b156:	d001      	beq.n	b15c <isr+0xc68>
    b158:	f001 fa6b 	bl	c632 <isr+0x213e>
		u32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(rssi_ready);
    b15c:	980e      	ldr	r0, [sp, #56]	; 0x38
    b15e:	f7fd faa3 	bl	86a8 <isr_rx_scan_report>
    b162:	f001 fa66 	bl	c632 <isr+0x213e>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    b166:	0032      	movs	r2, r6
    b168:	32ff      	adds	r2, #255	; 0xff
    b16a:	7d53      	ldrb	r3, [r2, #21]

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b16c:	0031      	movs	r1, r6
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    b16e:	3301      	adds	r3, #1
    b170:	7553      	strb	r3, [r2, #21]

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b172:	233e      	movs	r3, #62	; 0x3e
    b174:	33ff      	adds	r3, #255	; 0xff
    b176:	5cf3      	ldrb	r3, [r6, r3]
    b178:	31fc      	adds	r1, #252	; 0xfc
    b17a:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    b17c:	009b      	lsls	r3, r3, #2
    b17e:	581f      	ldr	r7, [r3, r0]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    b180:	2001      	movs	r0, #1

	if (crc_ok) {
    b182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	/* Increment packet counter for this connection event */
	_radio.packet_counter++;

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    b184:	7138      	strb	r0, [r7, #4]

	if (crc_ok) {
    b186:	2b00      	cmp	r3, #0
    b188:	d101      	bne.n	b18e <isr+0xc9a>
    b18a:	f000 ffd4 	bl	c136 <isr+0x1c42>
	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    b18e:	694c      	ldr	r4, [r1, #20]
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
	u8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    b190:	2300      	movs	r3, #0

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    b192:	0021      	movs	r1, r4
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
	u8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    b194:	7593      	strb	r3, [r2, #22]

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    b196:	31c0      	adds	r1, #192	; 0xc0
    b198:	780b      	ldrb	r3, [r1, #0]
    b19a:	7a3d      	ldrb	r5, [r7, #8]
    b19c:	07da      	lsls	r2, r3, #31
    b19e:	0fd2      	lsrs	r2, r2, #31
    b1a0:	076d      	lsls	r5, r5, #29
    b1a2:	b2d2      	uxtb	r2, r2
    b1a4:	0fed      	lsrs	r5, r5, #31
    b1a6:	4295      	cmp	r5, r2
    b1a8:	d100      	bne.n	b1ac <isr+0xcb8>
    b1aa:	e125      	b.n	b3f8 <isr+0xf04>

		/* Increment serial number */
		_radio.conn_curr->sn++;
    b1ac:	1812      	adds	r2, r2, r0
    b1ae:	4002      	ands	r2, r0
    b1b0:	4383      	bics	r3, r0
    b1b2:	4313      	orrs	r3, r2

		if (_radio.conn_curr->empty == 0) {
    b1b4:	0018      	movs	r0, r3
    b1b6:	227f      	movs	r2, #127	; 0x7f
	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {

		/* Increment serial number */
		_radio.conn_curr->sn++;
    b1b8:	700b      	strb	r3, [r1, #0]

		if (_radio.conn_curr->empty == 0) {
    b1ba:	4390      	bics	r0, r2
    b1bc:	d000      	beq.n	b1c0 <isr+0xccc>
    b1be:	e10c      	b.n	b3da <isr+0xee6>
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
    b1c0:	0022      	movs	r2, r4
    b1c2:	32fc      	adds	r2, #252	; 0xfc
    b1c4:	6895      	ldr	r5, [r2, #8]
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);
    b1c6:	3203      	adds	r2, #3
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    b1c8:	7d92      	ldrb	r2, [r2, #22]
				(node_tx->pdu_data +
    b1ca:	1d29      	adds	r1, r5, #4
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    b1cc:	188a      	adds	r2, r1, r2
    b1ce:	920a      	str	r2, [sp, #40]	; 0x28
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
    b1d0:	7852      	ldrb	r2, [r2, #1]
    b1d2:	920e      	str	r2, [sp, #56]	; 0x38
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;

			if (pdu_data_tx_len != 0) {
    b1d4:	2a00      	cmp	r2, #0
    b1d6:	d100      	bne.n	b1da <isr+0xce6>
    b1d8:	e0ce      	b.n	b378 <isr+0xe84>
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;
    b1da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b1dc:	7810      	ldrb	r0, [r2, #0]
    b1de:	0780      	lsls	r0, r0, #30
    b1e0:	0f82      	lsrs	r2, r0, #30
    b1e2:	4694      	mov	ip, r2

			if (pdu_data_tx_len != 0) {
				/* if encrypted increment tx counter */
				if (_radio.conn_curr->enc_tx) {
    b1e4:	069b      	lsls	r3, r3, #26
    b1e6:	d51d      	bpl.n	b224 <isr+0xd30>
					_radio.conn_curr->ccm_tx.counter++;
    b1e8:	0023      	movs	r3, r4
    b1ea:	0021      	movs	r1, r4
    b1ec:	33f4      	adds	r3, #244	; 0xf4
    b1ee:	881b      	ldrh	r3, [r3, #0]
    b1f0:	31f2      	adds	r1, #242	; 0xf2
    b1f2:	880a      	ldrh	r2, [r1, #0]
    b1f4:	041b      	lsls	r3, r3, #16
    b1f6:	4313      	orrs	r3, r2
    b1f8:	930c      	str	r3, [sp, #48]	; 0x30
    b1fa:	0023      	movs	r3, r4
    b1fc:	33f6      	adds	r3, #246	; 0xf6
    b1fe:	881a      	ldrh	r2, [r3, #0]
    b200:	3302      	adds	r3, #2
    b202:	881b      	ldrh	r3, [r3, #0]
    b204:	000e      	movs	r6, r1
    b206:	041b      	lsls	r3, r3, #16
    b208:	4313      	orrs	r3, r2
    b20a:	930d      	str	r3, [sp, #52]	; 0x34
    b20c:	2201      	movs	r2, #1
    b20e:	980c      	ldr	r0, [sp, #48]	; 0x30
    b210:	990d      	ldr	r1, [sp, #52]	; 0x34
    b212:	2300      	movs	r3, #0
    b214:	1880      	adds	r0, r0, r2
    b216:	4159      	adcs	r1, r3
    b218:	0c02      	lsrs	r2, r0, #16
    b21a:	0c0b      	lsrs	r3, r1, #16
    b21c:	8030      	strh	r0, [r6, #0]
    b21e:	8072      	strh	r2, [r6, #2]
    b220:	80b1      	strh	r1, [r6, #4]
    b222:	80f3      	strh	r3, [r6, #6]
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    b224:	4663      	mov	r3, ip
isr_rx_conn_pkt(struct radio_pdu_node_rx *radio_pdu_node_rx,
		struct radio_pdu_node_tx **tx_release, u8_t *rx_enqueue)
{
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
    b226:	2600      	movs	r6, #0
				if (_radio.conn_curr->enc_tx) {
					_radio.conn_curr->ccm_tx.counter++;
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    b228:	2b03      	cmp	r3, #3
    b22a:	d000      	beq.n	b22e <isr+0xd3a>
    b22c:	e0a7      	b.n	b37e <isr+0xe8a>
static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;

	switch (pdu_data_tx->payload.llctrl.opcode) {
    b22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b230:	78d8      	ldrb	r0, [r3, #3]
    b232:	3802      	subs	r0, #2
    b234:	2814      	cmp	r0, #20
    b236:	d900      	bls.n	b23a <isr+0xd46>
    b238:	e0a0      	b.n	b37c <isr+0xe88>
    b23a:	4e3d      	ldr	r6, [pc, #244]	; (b330 <isr+0xe3c>)
    b23c:	f7f4 ff9c 	bl	178 <__gnu_thumb1_case_uqi>
    b240:	9e6a200b 	.word	0x9e6a200b
    b244:	9e9e9e9e 	.word	0x9e9e9e9e
    b248:	6e9e4239 	.word	0x6e9e4239
    b24c:	9e9e9e9e 	.word	0x9e9e9e9e
    b250:	9e7a9e9e 	.word	0x9e7a9e9e
    b254:	94          	.byte	0x94
    b255:	00          	.byte	0x00
	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		_radio.state = STATE_CLOSE;
    b256:	2303      	movs	r3, #3
    b258:	7433      	strb	r3, [r6, #16]
		radio_disable();
    b25a:	f7fb fc43 	bl	6ae4 <radio_disable>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    b25e:	f7fb fc55 	bl	6b0c <radio_is_ready>
    b262:	2800      	cmp	r0, #0
    b264:	d001      	beq.n	b26a <isr+0xd76>
    b266:	f001 f9e1 	bl	c62c <isr+0x2138>

		terminate_ind_rx_enqueue(_radio.conn_curr,
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
    b26a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		radio_disable();

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());

		terminate_ind_rx_enqueue(_radio.conn_curr,
    b26c:	36fc      	adds	r6, #252	; 0xfc
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
    b26e:	7919      	ldrb	r1, [r3, #4]
		radio_disable();

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());

		terminate_ind_rx_enqueue(_radio.conn_curr,
    b270:	6970      	ldr	r0, [r6, #20]
    b272:	2913      	cmp	r1, #19
    b274:	d100      	bne.n	b278 <isr+0xd84>
    b276:	3103      	adds	r1, #3
    b278:	f7fd f9c4 	bl	8604 <terminate_ind_rx_enqueue>
		      error_code == 0x13) ?  0x16 :
		     pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
		     error_code);

		/* Ack received, hence terminate */
		terminate = 1;
    b27c:	2601      	movs	r6, #1
    b27e:	e07e      	b.n	b37e <isr+0xe8a>
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    b280:	0020      	movs	r0, r4
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
    b282:	990a      	ldr	r1, [sp, #40]	; 0x28
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    b284:	2208      	movs	r2, #8
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
    b286:	310e      	adds	r1, #14
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    b288:	36fc      	adds	r6, #252	; 0xfc
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    b28a:	3087      	adds	r0, #135	; 0x87
    b28c:	f7f5 fd03 	bl	c96 <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
    b290:	990a      	ldr	r1, [sp, #40]	; 0x28
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    b292:	6970      	ldr	r0, [r6, #20]
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
    b294:	3116      	adds	r1, #22
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    b296:	2204      	movs	r2, #4
    b298:	30da      	adds	r0, #218	; 0xda
    b29a:	f7f5 fcfc 	bl	c96 <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
		       4);

		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    b29e:	6972      	ldr	r2, [r6, #20]
    b2a0:	2008      	movs	r0, #8
    b2a2:	0011      	movs	r1, r2
    b2a4:	31c0      	adds	r1, #192	; 0xc0
    b2a6:	780b      	ldrb	r3, [r1, #0]
    b2a8:	4303      	orrs	r3, r0
    b2aa:	700b      	strb	r3, [r1, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    b2ac:	8f13      	ldrh	r3, [r2, #56]	; 0x38
    b2ae:	8753      	strh	r3, [r2, #58]	; 0x3a
    b2b0:	e064      	b.n	b37c <isr+0xe88>
		 */
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    b2b2:	0022      	movs	r2, r4

		/* key refresh */
		_radio.conn_curr->refresh = 1;
    b2b4:	2348      	movs	r3, #72	; 0x48
		 */
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    b2b6:	32c0      	adds	r2, #192	; 0xc0
    b2b8:	7811      	ldrb	r1, [r2, #0]

		/* key refresh */
		_radio.conn_curr->refresh = 1;
    b2ba:	430b      	orrs	r3, r1
    b2bc:	7013      	strb	r3, [r2, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    b2be:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    b2c0:	8763      	strh	r3, [r4, #58]	; 0x3a
    b2c2:	e05b      	b.n	b37c <isr+0xe88>
			_radio.conn_curr->procedure_reload;
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    b2c4:	7bf6      	ldrb	r6, [r6, #15]
    b2c6:	b2f6      	uxtb	r6, r6
    b2c8:	2e04      	cmp	r6, #4
    b2ca:	d123      	bne.n	b314 <isr+0xe20>
				struct radio_pdu_node_tx *node_tx)
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b2cc:	2203      	movs	r2, #3
    b2ce:	792b      	ldrb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
    b2d0:	0021      	movs	r1, r4
				struct radio_pdu_node_tx *node_tx)
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b2d2:	4313      	orrs	r3, r2
    b2d4:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
    b2d6:	0028      	movs	r0, r5
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    b2d8:	2317      	movs	r3, #23
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    b2da:	71ea      	strb	r2, [r5, #7]
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    b2dc:	716b      	strb	r3, [r5, #5]
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
    b2de:	316d      	adds	r1, #109	; 0x6d
	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
    b2e0:	3205      	adds	r2, #5
    b2e2:	3008      	adds	r0, #8
    b2e4:	f7f5 fcd7 	bl	c96 <memcpy>
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
    b2e8:	0023      	movs	r3, r4
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    b2ea:	0028      	movs	r0, r5
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
    b2ec:	3375      	adds	r3, #117	; 0x75
    b2ee:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
    b2f0:	3476      	adds	r4, #118	; 0x76
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
    b2f2:	742b      	strb	r3, [r5, #16]
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
    b2f4:	7823      	ldrb	r3, [r4, #0]
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    b2f6:	2208      	movs	r2, #8
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
    b2f8:	746b      	strb	r3, [r5, #17]
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    b2fa:	21cc      	movs	r1, #204	; 0xcc
    b2fc:	3012      	adds	r0, #18
    b2fe:	f7f5 fcf4 	bl	cea <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    b302:	0028      	movs	r0, r5
		if (_radio.role == ROLE_MASTER) {
			/* reused tx-ed PDU and send enc req */
			enc_req_reused_send(_radio.conn_curr, *node_tx);

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
    b304:	2500      	movs	r5, #0
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    b306:	0032      	movs	r2, r6
    b308:	301a      	adds	r0, #26
    b30a:	21dd      	movs	r1, #221	; 0xdd
    b30c:	f7f5 fced 	bl	cea <memset>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    b310:	002e      	movs	r6, r5
    b312:	e034      	b.n	b37e <isr+0xe8a>

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
		} else {
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    b314:	34c0      	adds	r4, #192	; 0xc0
    b316:	7823      	ldrb	r3, [r4, #0]
    b318:	2208      	movs	r2, #8
    b31a:	e02a      	b.n	b372 <isr+0xe7e>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    b31c:	0022      	movs	r2, r4
		_radio.conn_curr->pause_tx = 0;
    b31e:	23f3      	movs	r3, #243	; 0xf3

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    b320:	2600      	movs	r6, #0
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    b322:	32c0      	adds	r2, #192	; 0xc0
    b324:	7811      	ldrb	r1, [r2, #0]
		_radio.conn_curr->pause_tx = 0;
    b326:	400b      	ands	r3, r1
    b328:	7013      	strb	r3, [r2, #0]

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    b32a:	8766      	strh	r6, [r4, #58]	; 0x3a
    b32c:	e027      	b.n	b37e <isr+0xe8a>
    b32e:	46c0      	nop			; (mov r8, r8)
    b330:	20000ea0 	.word	0x20000ea0
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
    b334:	0023      	movs	r3, r4
    b336:	33b4      	adds	r3, #180	; 0xb4
    b338:	781a      	ldrb	r2, [r3, #0]
    b33a:	3301      	adds	r3, #1
    b33c:	781b      	ldrb	r3, [r3, #0]
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    b33e:	2600      	movs	r6, #0
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
    b340:	429a      	cmp	r2, r3
    b342:	d01c      	beq.n	b37e <isr+0xe8a>
		     _radio.conn_curr->llcp_length.ack) &&
		    (_radio.conn_curr->llcp_length.state ==
    b344:	0022      	movs	r2, r4
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
		     _radio.conn_curr->llcp_length.ack) &&
    b346:	2103      	movs	r1, #3
		    (_radio.conn_curr->llcp_length.state ==
    b348:	32b6      	adds	r2, #182	; 0xb6
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
		     _radio.conn_curr->llcp_length.ack) &&
    b34a:	7813      	ldrb	r3, [r2, #0]
    b34c:	400b      	ands	r3, r1
    b34e:	2b01      	cmp	r3, #1
    b350:	d115      	bne.n	b37e <isr+0xe8a>
		    (_radio.conn_curr->llcp_length.state ==
		     LLCP_LENGTH_STATE_ACK_WAIT)){
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    b352:	2008      	movs	r0, #8
    b354:	34c0      	adds	r4, #192	; 0xc0
    b356:	7823      	ldrb	r3, [r4, #0]
    b358:	4303      	orrs	r3, r0
    b35a:	7023      	strb	r3, [r4, #0]

			/* wait for response */
			_radio.conn_curr->llcp_length.state =
    b35c:	7813      	ldrb	r3, [r2, #0]
    b35e:	438b      	bics	r3, r1
    b360:	3901      	subs	r1, #1
    b362:	430b      	orrs	r3, r1
    b364:	7013      	strb	r3, [r2, #0]
    b366:	e00a      	b.n	b37e <isr+0xe8a>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    b368:	2203      	movs	r2, #3
    b36a:	34be      	adds	r4, #190	; 0xbe
    b36c:	7823      	ldrb	r3, [r4, #0]
    b36e:	4393      	bics	r3, r2
    b370:	3a01      	subs	r2, #1
    b372:	4313      	orrs	r3, r2
    b374:	7023      	strb	r3, [r4, #0]
    b376:	e001      	b.n	b37c <isr+0xe88>
isr_rx_conn_pkt(struct radio_pdu_node_rx *radio_pdu_node_rx,
		struct radio_pdu_node_tx **tx_release, u8_t *rx_enqueue)
{
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
    b378:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    b37a:	e000      	b.n	b37e <isr+0xe8a>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    b37c:	2600      	movs	r6, #0
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    b37e:	4cd3      	ldr	r4, [pc, #844]	; (b6cc <isr+0x11d8>)
    b380:	980e      	ldr	r0, [sp, #56]	; 0x38
    b382:	0023      	movs	r3, r4
    b384:	33fc      	adds	r3, #252	; 0xfc
    b386:	695b      	ldr	r3, [r3, #20]
    b388:	0019      	movs	r1, r3
    b38a:	31ff      	adds	r1, #255	; 0xff
    b38c:	7d8a      	ldrb	r2, [r1, #22]
    b38e:	1882      	adds	r2, r0, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    b390:	7d48      	ldrb	r0, [r1, #21]
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    b392:	b2d2      	uxtb	r2, r2
    b394:	758a      	strb	r2, [r1, #22]
			if (_radio.conn_curr->packet_tx_head_offset ==
    b396:	4290      	cmp	r0, r2
    b398:	d122      	bne.n	b3e0 <isr+0xeec>
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    b39a:	2000      	movs	r0, #0
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    b39c:	33fc      	adds	r3, #252	; 0xfc
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    b39e:	7548      	strb	r0, [r1, #21]
	_radio.conn_curr->packet_tx_head_offset = 0;
    b3a0:	7588      	strb	r0, [r1, #22]

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    b3a2:	689a      	ldr	r2, [r3, #8]
    b3a4:	68d9      	ldr	r1, [r3, #12]
    b3a6:	428a      	cmp	r2, r1
    b3a8:	d10f      	bne.n	b3ca <isr+0xed6>
		if (node_tx) {
    b3aa:	4285      	cmp	r5, r0
    b3ac:	d018      	beq.n	b3e0 <isr+0xeec>
			_radio.conn_curr->pkt_tx_ctrl =
			    _radio.conn_curr->pkt_tx_ctrl->next;
    b3ae:	6812      	ldr	r2, [r2, #0]
			_radio.conn_curr->pkt_tx_head =
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    b3b0:	6919      	ldr	r1, [r3, #16]
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
		if (node_tx) {
			_radio.conn_curr->pkt_tx_ctrl =
    b3b2:	60da      	str	r2, [r3, #12]
			    _radio.conn_curr->pkt_tx_ctrl->next;
			_radio.conn_curr->pkt_tx_head =
    b3b4:	609a      	str	r2, [r3, #8]
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    b3b6:	428a      	cmp	r2, r1
    b3b8:	d100      	bne.n	b3bc <isr+0xec8>
			    _radio.conn_curr->pkt_tx_data) {
				_radio.conn_curr->pkt_tx_ctrl = NULL;
    b3ba:	60d8      	str	r0, [r3, #12]
			}

			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
    b3bc:	0021      	movs	r1, r4
    b3be:	3159      	adds	r1, #89	; 0x59
    b3c0:	31ff      	adds	r1, #255	; 0xff
    b3c2:	0028      	movs	r0, r5
    b3c4:	f7fb f9cd 	bl	6762 <mem_release>
    b3c8:	e00a      	b.n	b3e0 <isr+0xeec>
		}
	} else {
		if (_radio.conn_curr->pkt_tx_head ==
    b3ca:	6918      	ldr	r0, [r3, #16]
    b3cc:	6811      	ldr	r1, [r2, #0]
    b3ce:	4282      	cmp	r2, r0
    b3d0:	d100      	bne.n	b3d4 <isr+0xee0>
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
    b3d2:	6119      	str	r1, [r3, #16]
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    b3d4:	6099      	str	r1, [r3, #8]
    b3d6:	950e      	str	r5, [sp, #56]	; 0x38
    b3d8:	e004      	b.n	b3e4 <isr+0xef0>
			if (_radio.conn_curr->packet_tx_head_offset ==
			    _radio.conn_curr->packet_tx_head_len) {
				*tx_release = isr_rx_conn_pkt_release(node_tx);
			}
		} else {
			_radio.conn_curr->empty = 0;
    b3da:	4013      	ands	r3, r2
    b3dc:	700b      	strb	r3, [r1, #0]
    b3de:	e00b      	b.n	b3f8 <isr+0xf04>

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    b3e0:	2300      	movs	r3, #0
    b3e2:	930e      	str	r3, [sp, #56]	; 0x38
			_radio.conn_curr->empty = 0;
		}
	}

	/* local initiated disconnect procedure completed */
	if (terminate) {
    b3e4:	2e00      	cmp	r6, #0
    b3e6:	d009      	beq.n	b3fc <isr+0xf08>
		connection_release(_radio.conn_curr);
    b3e8:	34fc      	adds	r4, #252	; 0xfc
    b3ea:	6960      	ldr	r0, [r4, #20]
    b3ec:	f7fd fa88 	bl	8900 <connection_release>
		_radio.conn_curr = NULL;
    b3f0:	2300      	movs	r3, #0
    b3f2:	6163      	str	r3, [r4, #20]
    b3f4:	f001 f930 	bl	c658 <isr+0x2164>
		if (_radio.conn_curr->pkt_tx_head ==
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    b3f8:	2300      	movs	r3, #0
    b3fa:	930e      	str	r3, [sp, #56]	; 0x38

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    b3fc:	48b3      	ldr	r0, [pc, #716]	; (b6cc <isr+0x11d8>)
    b3fe:	7a3a      	ldrb	r2, [r7, #8]
    b400:	0004      	movs	r4, r0
    b402:	34fc      	adds	r4, #252	; 0xfc
    b404:	6963      	ldr	r3, [r4, #20]
    b406:	0712      	lsls	r2, r2, #28
    b408:	33c0      	adds	r3, #192	; 0xc0
    b40a:	781b      	ldrb	r3, [r3, #0]
    b40c:	0fd2      	lsrs	r2, r2, #31
    b40e:	079b      	lsls	r3, r3, #30
    b410:	0fdb      	lsrs	r3, r3, #31
    b412:	0006      	movs	r6, r0
    b414:	429a      	cmp	r2, r3
    b416:	d001      	beq.n	b41c <isr+0xf28>
    b418:	f001 f924 	bl	c664 <isr+0x2170>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    b41c:	2003      	movs	r0, #3
    b41e:	f7fc fd7b 	bl	7f18 <packet_rx_reserve_get>

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    b422:	2800      	cmp	r0, #0
    b424:	d101      	bne.n	b42a <isr+0xf36>
    b426:	f001 f91d 	bl	c664 <isr+0x2170>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
    b42a:	23bf      	movs	r3, #191	; 0xbf
    b42c:	005b      	lsls	r3, r3, #1
	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    b42e:	5cf3      	ldrb	r3, [r6, r3]
    b430:	2b00      	cmp	r3, #0
    b432:	d03a      	beq.n	b4aa <isr+0xfb6>
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    b434:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    b436:	6d23      	ldr	r3, [r4, #80]	; 0x50
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
    b438:	429a      	cmp	r2, r3
    b43a:	d107      	bne.n	b44c <isr+0xf58>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    b43c:	23be      	movs	r3, #190	; 0xbe
    b43e:	217e      	movs	r1, #126	; 0x7e
    b440:	005b      	lsls	r3, r3, #1
    b442:	31ff      	adds	r1, #255	; 0xff
    b444:	5cf3      	ldrb	r3, [r6, r3]
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    b446:	5c71      	ldrb	r1, [r6, r1]
    b448:	4299      	cmp	r1, r3
    b44a:	d02e      	beq.n	b4aa <isr+0xfb6>
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    b44c:	0033      	movs	r3, r6
    b44e:	33fc      	adds	r3, #252	; 0xfc
    b450:	6d19      	ldr	r1, [r3, #80]	; 0x50
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    b452:	428a      	cmp	r2, r1
    b454:	d101      	bne.n	b45a <isr+0xf66>
    b456:	f001 f905 	bl	c664 <isr+0x2170>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    b45a:	22be      	movs	r2, #190	; 0xbe
    b45c:	207e      	movs	r0, #126	; 0x7e
    b45e:	0052      	lsls	r2, r2, #1
    b460:	30ff      	adds	r0, #255	; 0xff
    b462:	5cb1      	ldrb	r1, [r6, r2]
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    b464:	5c30      	ldrb	r0, [r6, r0]
    b466:	4288      	cmp	r0, r1
    b468:	d101      	bne.n	b46e <isr+0xf7a>
    b46a:	f001 f8fb 	bl	c664 <isr+0x2170>
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    b46e:	5cb2      	ldrb	r2, [r6, r2]
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    b470:	2a00      	cmp	r2, #0
    b472:	d106      	bne.n	b482 <isr+0xf8e>
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    b474:	695b      	ldr	r3, [r3, #20]
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    b476:	327b      	adds	r2, #123	; 0x7b
    b478:	32ff      	adds	r2, #255	; 0xff
    b47a:	5ab2      	ldrh	r2, [r6, r2]
    b47c:	8c1b      	ldrh	r3, [r3, #32]
    b47e:	429a      	cmp	r2, r3
    b480:	d013      	beq.n	b4aa <isr+0xfb6>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    b482:	23be      	movs	r3, #190	; 0xbe
    b484:	005b      	lsls	r3, r3, #1
    b486:	5cf2      	ldrb	r2, [r6, r3]
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    b488:	2a00      	cmp	r2, #0
    b48a:	d101      	bne.n	b490 <isr+0xf9c>
    b48c:	f001 f8ea 	bl	c664 <isr+0x2170>
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
    b490:	0032      	movs	r2, r6
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    b492:	5cf3      	ldrb	r3, [r6, r3]
		   _radio.conn_curr->handle)))))) {
    b494:	32fc      	adds	r2, #252	; 0xfc
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    b496:	33b7      	adds	r3, #183	; 0xb7
		   _radio.conn_curr->handle)))))) {
    b498:	6951      	ldr	r1, [r2, #20]
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    b49a:	005b      	lsls	r3, r3, #1
    b49c:	18f3      	adds	r3, r6, r3
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    b49e:	88da      	ldrh	r2, [r3, #6]
    b4a0:	8c0b      	ldrh	r3, [r1, #32]
    b4a2:	429a      	cmp	r2, r3
    b4a4:	d001      	beq.n	b4aa <isr+0xfb6>
    b4a6:	f001 f8dd 	bl	c664 <isr+0x2170>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;

		if (pdu_data_rx->len != 0) {
    b4aa:	7a79      	ldrb	r1, [r7, #9]
    b4ac:	2900      	cmp	r1, #0
    b4ae:	d101      	bne.n	b4b4 <isr+0xfc0>
    b4b0:	f000 fdea 	bl	c088 <isr+0x1b94>
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    b4b4:	0033      	movs	r3, r6
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    b4b6:	2200      	movs	r2, #0

		if (pdu_data_rx->len != 0) {
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    b4b8:	33fc      	adds	r3, #252	; 0xfc
    b4ba:	695b      	ldr	r3, [r3, #20]
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    b4bc:	9210      	str	r2, [sp, #64]	; 0x40

		if (pdu_data_rx->len != 0) {
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    b4be:	33c0      	adds	r3, #192	; 0xc0
    b4c0:	781b      	ldrb	r3, [r3, #0]
    b4c2:	06db      	lsls	r3, r3, #27
    b4c4:	d507      	bpl.n	b4d6 <isr+0xfe2>
				u32_t done;

				done = radio_ccm_is_done();
    b4c6:	f7fb fd57 	bl	6f78 <radio_ccm_is_done>
				LL_ASSERT(done);

				ccm_rx_increment = 1;
    b4ca:	2301      	movs	r3, #1
    b4cc:	9310      	str	r3, [sp, #64]	; 0x40
			 */
			if (_radio.conn_curr->enc_rx) {
				u32_t done;

				done = radio_ccm_is_done();
				LL_ASSERT(done);
    b4ce:	2800      	cmp	r0, #0
    b4d0:	d101      	bne.n	b4d6 <isr+0xfe2>
    b4d2:	f001 f8ab 	bl	c62c <isr+0x2138>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    b4d6:	0033      	movs	r3, r6
    b4d8:	33fc      	adds	r3, #252	; 0xfc
    b4da:	695b      	ldr	r3, [r3, #20]
    b4dc:	33c0      	adds	r3, #192	; 0xc0
    b4de:	781b      	ldrb	r3, [r3, #0]
    b4e0:	06db      	lsls	r3, r3, #27
    b4e2:	d408      	bmi.n	b4f6 <isr+0x1002>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    b4e4:	0033      	movs	r3, r6
    b4e6:	33fc      	adds	r3, #252	; 0xfc
    b4e8:	695d      	ldr	r5, [r3, #20]
    b4ea:	002b      	movs	r3, r5
    b4ec:	33c0      	adds	r3, #192	; 0xc0
				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
    b4ee:	781a      	ldrb	r2, [r3, #0]
    b4f0:	0752      	lsls	r2, r2, #29
    b4f2:	d419      	bmi.n	b528 <isr+0x1034>
    b4f4:	e01c      	b.n	b530 <isr+0x103c>
    b4f6:	f7fb fd63 	bl	6fc0 <radio_ccm_mic_is_valid>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    b4fa:	2800      	cmp	r0, #0
    b4fc:	d1f2      	bne.n	b4e4 <isr+0xff0>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
			     (pdu_data_rx->ll_id != PDU_DATA_LLID_CTRL))) {
				_radio.state = STATE_CLOSE;
    b4fe:	2303      	movs	r3, #3
    b500:	7433      	strb	r3, [r6, #16]
				radio_disable();
    b502:	f7fb faef 	bl	6ae4 <radio_disable>

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
    b506:	f7fb fb01 	bl	6b0c <radio_is_ready>
    b50a:	1e04      	subs	r4, r0, #0
    b50c:	d001      	beq.n	b512 <isr+0x101e>
    b50e:	f001 f88d 	bl	c62c <isr+0x2138>

				terminate_ind_rx_enqueue(_radio.conn_curr,
    b512:	36fc      	adds	r6, #252	; 0xfc
    b514:	213d      	movs	r1, #61	; 0x3d
    b516:	6970      	ldr	r0, [r6, #20]
    b518:	f7fd f874 	bl	8604 <terminate_ind_rx_enqueue>
							 0x3d);

				connection_release(_radio.conn_curr);
    b51c:	6970      	ldr	r0, [r6, #20]
    b51e:	f7fd f9ef 	bl	8900 <connection_release>
				_radio.conn_curr = NULL;
    b522:	6174      	str	r4, [r6, #20]
    b524:	f001 f898 	bl	c658 <isr+0x2164>
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    b528:	7a3a      	ldrb	r2, [r7, #8]
    b52a:	43d2      	mvns	r2, r2
    b52c:	0792      	lsls	r2, r2, #30
    b52e:	d1e6      	bne.n	b4fe <isr+0x100a>
				return 1; /* terminated */
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
    b530:	2400      	movs	r4, #0
			_radio.conn_curr->apto_expire = 0;
    b532:	1d2a      	adds	r2, r5, #4
				return 1; /* terminated */
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
    b534:	87ec      	strh	r4, [r5, #62]	; 0x3e
			_radio.conn_curr->apto_expire = 0;
    b536:	87d4      	strh	r4, [r2, #62]	; 0x3e
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			switch (pdu_data_rx->ll_id) {
    b538:	7a3a      	ldrb	r2, [r7, #8]
    b53a:	0792      	lsls	r2, r2, #30
    b53c:	0f92      	lsrs	r2, r2, #30
    b53e:	42a2      	cmp	r2, r4
    b540:	d101      	bne.n	b546 <isr+0x1052>
    b542:	f001 f873 	bl	c62c <isr+0x2138>
    b546:	2a02      	cmp	r2, #2
    b548:	d800      	bhi.n	b54c <isr+0x1058>
    b54a:	e12a      	b.n	b7a2 <isr+0x12ae>
{
	struct pdu_data *pdu_data_rx;
	u8_t nack = 0;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
    b54c:	7afa      	ldrb	r2, [r7, #11]
    b54e:	920c      	str	r2, [sp, #48]	; 0x30
    b550:	2a18      	cmp	r2, #24
    b552:	d901      	bls.n	b558 <isr+0x1064>
    b554:	f000 fd77 	bl	c046 <isr+0x1b52>
    b558:	0010      	movs	r0, r2
    b55a:	f7f4 fe21 	bl	1a0 <__gnu_thumb1_case_uhi>
    b55e:	0019      	.short	0x0019
    b560:	00b20082 	.word	0x00b20082
    b564:	00d500bd 	.word	0x00d500bd
    b568:	00fc00ed 	.word	0x00fc00ed
    b56c:	01250360 	.word	0x01250360
    b570:	01670155 	.word	0x01670155
    b574:	018c0175 	.word	0x018c0175
    b578:	012501ed 	.word	0x012501ed
    b57c:	00ea01f4 	.word	0x00ea01f4
    b580:	034c02bf 	.word	0x034c02bf
    b584:	039d035e 	.word	0x039d035e
    b588:	045c039d 	.word	0x045c039d
    b58c:	04f604ca 	.word	0x04f604ca
	packet_rx_callback();
}

static u32_t conn_update(struct connection *conn, struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
    b590:	7dbb      	ldrb	r3, [r7, #22]
    b592:	7d7a      	ldrb	r2, [r7, #21]
    b594:	021b      	lsls	r3, r3, #8
    b596:	4313      	orrs	r3, r2
    b598:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    b59a:	1a9b      	subs	r3, r3, r2
    b59c:	4a4c      	ldr	r2, [pc, #304]	; (b6d0 <isr+0x11dc>)
    b59e:	b29b      	uxth	r3, r3
    b5a0:	4293      	cmp	r3, r2
    b5a2:	dd01      	ble.n	b5a8 <isr+0x10b4>
    b5a4:	f001 f850 	bl	c648 <isr+0x2154>
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
		return 1;
	}

	LL_ASSERT((conn->llcp_req == conn->llcp_ack) ||
    b5a8:	002b      	movs	r3, r5
    b5aa:	002a      	movs	r2, r5
    b5ac:	3369      	adds	r3, #105	; 0x69
    b5ae:	3268      	adds	r2, #104	; 0x68
    b5b0:	781b      	ldrb	r3, [r3, #0]
    b5b2:	7812      	ldrb	r2, [r2, #0]
    b5b4:	429a      	cmp	r2, r3
    b5b6:	d00f      	beq.n	b5d8 <isr+0x10e4>
    b5b8:	002a      	movs	r2, r5
    b5ba:	326a      	adds	r2, #106	; 0x6a
    b5bc:	7812      	ldrb	r2, [r2, #0]
    b5be:	2a01      	cmp	r2, #1
    b5c0:	d001      	beq.n	b5c6 <isr+0x10d2>
    b5c2:	f001 f833 	bl	c62c <isr+0x2138>
    b5c6:	002a      	movs	r2, r5
    b5c8:	3295      	adds	r2, #149	; 0x95
    b5ca:	7811      	ldrb	r1, [r2, #0]
    b5cc:	2207      	movs	r2, #7
    b5ce:	400a      	ands	r2, r1
    b5d0:	2a05      	cmp	r2, #5
    b5d2:	d001      	beq.n	b5d8 <isr+0x10e4>
    b5d4:	f001 f82a 	bl	c62c <isr+0x2138>
		    LLCP_CONN_STATE_RSP_WAIT)));

	/* set mutex, if only not already set. As a master the mutex shall
	 * be set, but a slave we accept it as new 'set' of mutex.
	 */
	if (_radio.conn_upd == 0) {
    b5d8:	22c2      	movs	r2, #194	; 0xc2
    b5da:	0052      	lsls	r2, r2, #1
    b5dc:	58b1      	ldr	r1, [r6, r2]
    b5de:	2900      	cmp	r1, #0
    b5e0:	d107      	bne.n	b5f2 <isr+0x10fe>
		LL_ASSERT(conn->role.slave.role != 0);
    b5e2:	0029      	movs	r1, r5
    b5e4:	3144      	adds	r1, #68	; 0x44
    b5e6:	7809      	ldrb	r1, [r1, #0]
    b5e8:	07c9      	lsls	r1, r1, #31
    b5ea:	d401      	bmi.n	b5f0 <isr+0x10fc>
    b5ec:	f001 f81e 	bl	c62c <isr+0x2138>

		_radio.conn_upd = conn;
    b5f0:	50b5      	str	r5, [r6, r2]
	}

	conn->llcp.connection_update.win_size =
    b5f2:	002a      	movs	r2, r5
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
    b5f4:	0028      	movs	r0, r5

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
    b5f6:	7b39      	ldrb	r1, [r7, #12]
		LL_ASSERT(conn->role.slave.role != 0);

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
    b5f8:	3294      	adds	r2, #148	; 0x94
    b5fa:	7011      	strb	r1, [r2, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
    b5fc:	7bba      	ldrb	r2, [r7, #14]
    b5fe:	7b79      	ldrb	r1, [r7, #13]
    b600:	0212      	lsls	r2, r2, #8
		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
    b602:	430a      	orrs	r2, r1
    b604:	4933      	ldr	r1, [pc, #204]	; (b6d4 <isr+0x11e0>)
    b606:	308c      	adds	r0, #140	; 0x8c
    b608:	434a      	muls	r2, r1
    b60a:	6002      	str	r2, [r0, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
    b60c:	7c3a      	ldrb	r2, [r7, #16]
    b60e:	7bf9      	ldrb	r1, [r7, #15]
    b610:	0212      	lsls	r2, r2, #8
    b612:	430a      	orrs	r2, r1
	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
    b614:	0029      	movs	r1, r5
    b616:	316c      	adds	r1, #108	; 0x6c
    b618:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
    b61a:	7cba      	ldrb	r2, [r7, #18]
    b61c:	7c79      	ldrb	r1, [r7, #17]
    b61e:	0212      	lsls	r2, r2, #8
    b620:	430a      	orrs	r2, r1
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
    b622:	0029      	movs	r1, r5
    b624:	316e      	adds	r1, #110	; 0x6e
    b626:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
    b628:	7d3a      	ldrb	r2, [r7, #20]
    b62a:	7cf9      	ldrb	r1, [r7, #19]
    b62c:	0212      	lsls	r2, r2, #8
    b62e:	430a      	orrs	r2, r1
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
    b630:	0029      	movs	r1, r5
    b632:	3170      	adds	r1, #112	; 0x70
    b634:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
    b636:	7dba      	ldrb	r2, [r7, #22]
    b638:	7d79      	ldrb	r1, [r7, #21]
    b63a:	0212      	lsls	r2, r2, #8
    b63c:	430a      	orrs	r2, r1
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
    b63e:	0029      	movs	r1, r5
    b640:	3174      	adds	r1, #116	; 0x74
    b642:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;
    b644:	22e0      	movs	r2, #224	; 0xe0
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    b646:	3121      	adds	r1, #33	; 0x21
    b648:	7808      	ldrb	r0, [r1, #0]
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_ack--;
    b64a:	3b01      	subs	r3, #1
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;
    b64c:	4002      	ands	r2, r0
    b64e:	700a      	strb	r2, [r1, #0]

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    b650:	002a      	movs	r2, r5
    b652:	2101      	movs	r1, #1
    b654:	326a      	adds	r2, #106	; 0x6a
    b656:	7011      	strb	r1, [r2, #0]
	conn->llcp_ack--;
    b658:	3a01      	subs	r2, #1
    b65a:	7013      	strb	r3, [r2, #0]
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
			/* conn param req procedure, if any, is complete */
			_radio.conn_curr->procedure_expire = 0;
    b65c:	2400      	movs	r4, #0
    b65e:	f000 fc72 	bl	bf46 <isr+0x1a52>
}

static u32_t chan_map_update(struct connection *conn,
			     struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
    b662:	7cbb      	ldrb	r3, [r7, #18]
    b664:	7c7a      	ldrb	r2, [r7, #17]
    b666:	021b      	lsls	r3, r3, #8
    b668:	4313      	orrs	r3, r2
    b66a:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    b66c:	1a9b      	subs	r3, r3, r2
    b66e:	4a18      	ldr	r2, [pc, #96]	; (b6d0 <isr+0x11dc>)
    b670:	b29b      	uxth	r3, r3
    b672:	4293      	cmp	r3, r2
    b674:	dd01      	ble.n	b67a <isr+0x1186>
    b676:	f000 ffe7 	bl	c648 <isr+0x2154>
	      conn->event_counter) & 0xffff) > 0x7fff) {
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    b67a:	002e      	movs	r6, r5
    b67c:	002b      	movs	r3, r5
    b67e:	3669      	adds	r6, #105	; 0x69
    b680:	3368      	adds	r3, #104	; 0x68
    b682:	781a      	ldrb	r2, [r3, #0]
    b684:	7833      	ldrb	r3, [r6, #0]
    b686:	429a      	cmp	r2, r3
    b688:	d001      	beq.n	b68e <isr+0x119a>
    b68a:	f000 ffcf 	bl	c62c <isr+0x2138>

	memcpy(&conn->llcp.chan_map.chm[0],
    b68e:	0028      	movs	r0, r5
    b690:	0039      	movs	r1, r7
    b692:	2205      	movs	r2, #5
    b694:	306d      	adds	r0, #109	; 0x6d
    b696:	310c      	adds	r1, #12
    b698:	f7f5 fafd 	bl	c96 <memcpy>
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
    b69c:	7cbb      	ldrb	r3, [r7, #18]
    b69e:	7c7a      	ldrb	r2, [r7, #17]
    b6a0:	021b      	lsls	r3, r3, #8
    b6a2:	4313      	orrs	r3, r2
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	memcpy(&conn->llcp.chan_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
    b6a4:	002a      	movs	r2, r5
    b6a6:	3272      	adds	r2, #114	; 0x72
    b6a8:	8013      	strh	r3, [r2, #0]
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
	conn->llcp.chan_map.initiate = 0;
    b6aa:	002b      	movs	r3, r5
    b6ac:	2400      	movs	r4, #0
    b6ae:	336c      	adds	r3, #108	; 0x6c
    b6b0:	701c      	strb	r4, [r3, #0]

	conn->llcp_type = LLCP_CHAN_MAP;
    b6b2:	2302      	movs	r3, #2
    b6b4:	356a      	adds	r5, #106	; 0x6a
    b6b6:	702b      	strb	r3, [r5, #0]
	conn->llcp_ack--;
    b6b8:	7833      	ldrb	r3, [r6, #0]
    b6ba:	3b01      	subs	r3, #1
    b6bc:	7033      	strb	r3, [r6, #0]
    b6be:	f000 fcfb 	bl	c0b8 <isr+0x1bc4>
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
    b6c2:	7b3b      	ldrb	r3, [r7, #12]
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
    b6c4:	35a7      	adds	r5, #167	; 0xa7
    b6c6:	f000 ffc1 	bl	c64c <isr+0x2158>
    b6ca:	46c0      	nop			; (mov r8, r8)
    b6cc:	20000ea0 	.word	0x20000ea0
    b6d0:	00007fff 	.word	0x00007fff
    b6d4:	000004e2 	.word	0x000004e2
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    b6d8:	0028      	movs	r0, r5
    b6da:	0039      	movs	r1, r7
    b6dc:	2208      	movs	r2, #8
    b6de:	3116      	adds	r1, #22
    b6e0:	3087      	adds	r0, #135	; 0x87
    b6e2:	f7f5 fad8 	bl	c96 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    b6e6:	0039      	movs	r1, r7
    b6e8:	36fc      	adds	r6, #252	; 0xfc
    b6ea:	6970      	ldr	r0, [r6, #20]
    b6ec:	2204      	movs	r2, #4
    b6ee:	311e      	adds	r1, #30
    b6f0:	30da      	adds	r0, #218	; 0xda
    b6f2:	f7f5 fad0 	bl	c96 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.ivm[0], 4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    b6f6:	6972      	ldr	r2, [r6, #20]
    b6f8:	2004      	movs	r0, #4
    b6fa:	0011      	movs	r1, r2
    b6fc:	31c0      	adds	r1, #192	; 0xc0
    b6fe:	780b      	ldrb	r3, [r1, #0]
    b700:	4303      	orrs	r3, r0
    b702:	700b      	strb	r3, [r1, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design)
		 */
		_radio.conn_curr->procedure_expire =
    b704:	8f13      	ldrh	r3, [r2, #56]	; 0x38
    b706:	e04b      	b.n	b7a0 <isr+0x12ac>
		*rx_enqueue = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		/* things sent by slave stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    b708:	0028      	movs	r0, r5
    b70a:	0039      	movs	r1, r7
    b70c:	2208      	movs	r2, #8
    b70e:	310c      	adds	r1, #12
    b710:	308f      	adds	r0, #143	; 0x8f
    b712:	f7f5 fac0 	bl	c96 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.skds[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    b716:	0039      	movs	r1, r7
    b718:	36fc      	adds	r6, #252	; 0xfc
    b71a:	6970      	ldr	r0, [r6, #20]
    b71c:	2204      	movs	r2, #4
    b71e:	3114      	adds	r1, #20
    b720:	30de      	adds	r0, #222	; 0xde
    b722:	f7f5 fab8 	bl	c96 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.ivs[0],
		       4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    b726:	2104      	movs	r1, #4
    b728:	6973      	ldr	r3, [r6, #20]
    b72a:	33c0      	adds	r3, #192	; 0xc0
    b72c:	781a      	ldrb	r2, [r3, #0]
    b72e:	430a      	orrs	r2, r1
    b730:	701a      	strb	r2, [r3, #0]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    b732:	2400      	movs	r4, #0
    b734:	f000 fcc0 	bl	c0b8 <isr+0x1bc4>
		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_REQ:
		LL_ASSERT(_radio.conn_curr->llcp_req ==
    b738:	002b      	movs	r3, r5
    b73a:	002a      	movs	r2, r5
    b73c:	3368      	adds	r3, #104	; 0x68
    b73e:	3269      	adds	r2, #105	; 0x69
    b740:	7819      	ldrb	r1, [r3, #0]
    b742:	7813      	ldrb	r3, [r2, #0]
    b744:	428b      	cmp	r3, r1
    b746:	d001      	beq.n	b74c <isr+0x1258>
    b748:	f000 ff70 	bl	c62c <isr+0x2138>
			  _radio.conn_curr->llcp_ack);

		/* start enc rsp to be scheduled in master prepare */
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    b74c:	2103      	movs	r1, #3
    b74e:	356a      	adds	r5, #106	; 0x6a
    b750:	7029      	strb	r1, [r5, #0]
		_radio.conn_curr->llcp_ack--;
    b752:	3b01      	subs	r3, #1
    b754:	e076      	b.n	b844 <isr+0x1350>
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (_radio.role == ROLE_SLAVE) {
    b756:	7bf2      	ldrb	r2, [r6, #15]
    b758:	b2d2      	uxtb	r2, r2
    b75a:	2a03      	cmp	r2, #3
    b75c:	d10e      	bne.n	b77c <isr+0x1288>

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
    b75e:	002b      	movs	r3, r5
    b760:	0029      	movs	r1, r5
    b762:	3368      	adds	r3, #104	; 0x68
    b764:	3169      	adds	r1, #105	; 0x69
    b766:	7818      	ldrb	r0, [r3, #0]
    b768:	780b      	ldrb	r3, [r1, #0]
    b76a:	4283      	cmp	r3, r0
    b76c:	d001      	beq.n	b772 <isr+0x127e>
    b76e:	f000 ff5d 	bl	c62c <isr+0x2138>
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    b772:	356a      	adds	r5, #106	; 0x6a
			_radio.conn_curr->llcp_ack--;
    b774:	3b01      	subs	r3, #1
#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    b776:	702a      	strb	r2, [r5, #0]
			_radio.conn_curr->llcp_ack--;
    b778:	700b      	strb	r3, [r1, #0]
    b77a:	e003      	b.n	b784 <isr+0x1290>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		} else {
			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
			_radio.conn_curr->pause_tx = 0;
    b77c:	22f3      	movs	r2, #243	; 0xf3
			_radio.conn_curr->pause_tx = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		} else {
			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    b77e:	7819      	ldrb	r1, [r3, #0]
			_radio.conn_curr->pause_tx = 0;
    b780:	400a      	ands	r2, r1
    b782:	701a      	strb	r2, [r3, #0]
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (_radio.conn_curr->refresh) {
    b784:	4bd3      	ldr	r3, [pc, #844]	; (bad4 <isr+0x15e0>)
    b786:	2040      	movs	r0, #64	; 0x40
    b788:	33fc      	adds	r3, #252	; 0xfc
    b78a:	695a      	ldr	r2, [r3, #20]
    b78c:	0011      	movs	r1, r2
    b78e:	31c0      	adds	r1, #192	; 0xc0
    b790:	780b      	ldrb	r3, [r1, #0]
    b792:	4203      	tst	r3, r0
    b794:	d003      	beq.n	b79e <isr+0x12aa>
			_radio.conn_curr->refresh = 0;
    b796:	4383      	bics	r3, r0
    b798:	700b      	strb	r3, [r1, #0]

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    b79a:	2309      	movs	r3, #9
    b79c:	713b      	strb	r3, [r7, #4]
		}
		*rx_enqueue = 1;

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    b79e:	2300      	movs	r3, #0
    b7a0:	8753      	strh	r3, [r2, #58]	; 0x3a
			_radio.conn_curr->refresh = 0;

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
		}
		*rx_enqueue = 1;
    b7a2:	2401      	movs	r4, #1
    b7a4:	f000 fc88 	bl	c0b8 <isr+0x1bc4>
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b7a8:	7b3b      	ldrb	r3, [r7, #12]
    b7aa:	7b79      	ldrb	r1, [r7, #13]
    b7ac:	4aca      	ldr	r2, [pc, #808]	; (bad8 <isr+0x15e4>)
    b7ae:	0209      	lsls	r1, r1, #8
    b7b0:	4313      	orrs	r3, r2
    b7b2:	002c      	movs	r4, r5
    b7b4:	430b      	orrs	r3, r1
    b7b6:	7bb9      	ldrb	r1, [r7, #14]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b7b8:	0030      	movs	r0, r6
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b7ba:	0409      	lsls	r1, r1, #16
    b7bc:	430b      	orrs	r3, r1
    b7be:	001a      	movs	r2, r3
    b7c0:	3498      	adds	r4, #152	; 0x98
    b7c2:	6823      	ldr	r3, [r4, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b7c4:	3059      	adds	r0, #89	; 0x59
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b7c6:	03db      	lsls	r3, r3, #15
    b7c8:	0bdb      	lsrs	r3, r3, #15
    b7ca:	4013      	ands	r3, r2
    b7cc:	6023      	str	r3, [r4, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b7ce:	30ff      	adds	r0, #255	; 0xff
    b7d0:	f7fa ffae 	bl	6730 <mem_acquire>
    b7d4:	1e06      	subs	r6, r0, #0
	LL_ASSERT(node_tx);
    b7d6:	d101      	bne.n	b7dc <isr+0x12e8>
    b7d8:	f000 ff28 	bl	c62c <isr+0x2138>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b7dc:	2203      	movs	r2, #3
    b7de:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    b7e0:	2100      	movs	r1, #0
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b7e2:	4313      	orrs	r3, r2
    b7e4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    b7e6:	2309      	movs	r3, #9
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    b7e8:	3205      	adds	r2, #5
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    b7ea:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    b7ec:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    b7ee:	3008      	adds	r0, #8
    b7f0:	f7f5 fa7b 	bl	cea <memset>
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    b7f4:	7823      	ldrb	r3, [r4, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
		(conn->llcp_features >> 16) & 0xFF;

	ctrl_tx_enqueue(conn, node_tx);
    b7f6:	0031      	movs	r1, r6
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    b7f8:	7233      	strb	r3, [r6, #8]
		conn->llcp_features & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    b7fa:	6823      	ldr	r3, [r4, #0]
    b7fc:	0a1b      	lsrs	r3, r3, #8
    b7fe:	7273      	strb	r3, [r6, #9]
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    b800:	6823      	ldr	r3, [r4, #0]
    b802:	0c1b      	lsrs	r3, r3, #16
    b804:	72b3      	strb	r3, [r6, #10]
    b806:	e370      	b.n	beea <isr+0x19f6>
		struct pdu_data_llctrl_feature_rsp *rsp;

		rsp = &pdu_data_rx->payload.llctrl.ctrldata.feature_rsp;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    b808:	7b3b      	ldrb	r3, [r7, #12]
    b80a:	4ab3      	ldr	r2, [pc, #716]	; (bad8 <isr+0x15e4>)
    b80c:	7b79      	ldrb	r1, [r7, #13]
    b80e:	4313      	orrs	r3, r2
    b810:	0209      	lsls	r1, r1, #8
    b812:	0028      	movs	r0, r5
    b814:	430b      	orrs	r3, r1
    b816:	7bb9      	ldrb	r1, [r7, #14]
    b818:	3098      	adds	r0, #152	; 0x98
    b81a:	0409      	lsls	r1, r1, #16
    b81c:	430b      	orrs	r3, r1
    b81e:	001a      	movs	r2, r3
    b820:	6803      	ldr	r3, [r0, #0]
    b822:	03db      	lsls	r3, r3, #15
    b824:	0bdb      	lsrs	r3, r3, #15
    b826:	4013      	ands	r3, r2
    b828:	6003      	str	r3, [r0, #0]
    b82a:	e089      	b.n	b940 <isr+0x144c>
	}
	break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		pause_enc_rsp_send(_radio.conn_curr);
    b82c:	0028      	movs	r0, r5
    b82e:	f7fd fcf3 	bl	9218 <pause_enc_rsp_send>

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    b832:	0030      	movs	r0, r6

		/* key refresh */
		_radio.conn_curr->refresh = 1;

		/* disable receive encryption */
		_radio.conn_curr->enc_rx = 0;
    b834:	2344      	movs	r3, #68	; 0x44
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		pause_enc_rsp_send(_radio.conn_curr);

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    b836:	30fc      	adds	r0, #252	; 0xfc
    b838:	6942      	ldr	r2, [r0, #20]
    b83a:	32c0      	adds	r2, #192	; 0xc0
    b83c:	7811      	ldrb	r1, [r2, #0]

		/* key refresh */
		_radio.conn_curr->refresh = 1;

		/* disable receive encryption */
		_radio.conn_curr->enc_rx = 0;
    b83e:	430b      	orrs	r3, r1
    b840:	2110      	movs	r1, #16
    b842:	438b      	bics	r3, r1
    b844:	7013      	strb	r3, [r2, #0]
    b846:	e774      	b.n	b732 <isr+0x123e>
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    b848:	7bf3      	ldrb	r3, [r6, #15]
    b84a:	2b04      	cmp	r3, #4
    b84c:	d10a      	bne.n	b864 <isr+0x1370>
			/* reply with pause enc rsp */
			pause_enc_rsp_send(_radio.conn_curr);
    b84e:	0028      	movs	r0, r5
    b850:	f7fd fce2 	bl	9218 <pause_enc_rsp_send>

			/* disable receive encryption */
			_radio.conn_curr->enc_rx = 0;
    b854:	0033      	movs	r3, r6
    b856:	2110      	movs	r1, #16
    b858:	33fc      	adds	r3, #252	; 0xfc
    b85a:	695b      	ldr	r3, [r3, #20]
    b85c:	33c0      	adds	r3, #192	; 0xc0
    b85e:	781a      	ldrb	r2, [r3, #0]
    b860:	438a      	bics	r2, r1
    b862:	701a      	strb	r2, [r3, #0]
		}

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    b864:	0030      	movs	r0, r6

		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
    b866:	2104      	movs	r1, #4
			/* disable receive encryption */
			_radio.conn_curr->enc_rx = 0;
		}

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    b868:	30fc      	adds	r0, #252	; 0xfc
    b86a:	6942      	ldr	r2, [r0, #20]
    b86c:	32c0      	adds	r2, #192	; 0xc0
    b86e:	7813      	ldrb	r3, [r2, #0]

		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
    b870:	430b      	orrs	r3, r1
    b872:	311c      	adds	r1, #28
    b874:	e7e5      	b.n	b842 <isr+0x134e>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
    b876:	002b      	movs	r3, r5
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
    b878:	7b3a      	ldrb	r2, [r7, #12]
		_radio.conn_curr->enc_tx = 0;
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
    b87a:	339d      	adds	r3, #157	; 0x9d
    b87c:	701a      	strb	r2, [r3, #0]
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
    b87e:	7bbb      	ldrb	r3, [r7, #14]
    b880:	7b7a      	ldrb	r2, [r7, #13]
    b882:	021b      	lsls	r3, r3, #8
    b884:	4313      	orrs	r3, r2

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
    b886:	002a      	movs	r2, r5
    b888:	329e      	adds	r2, #158	; 0x9e
    b88a:	8013      	strh	r3, [r2, #0]
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
    b88c:	7c3b      	ldrb	r3, [r7, #16]
    b88e:	7bfa      	ldrb	r2, [r7, #15]
    b890:	021b      	lsls	r3, r3, #8
    b892:	4313      	orrs	r3, r2
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
    b894:	002a      	movs	r2, r5
    b896:	32a0      	adds	r2, #160	; 0xa0
    b898:	8013      	strh	r3, [r2, #0]
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
    b89a:	2303      	movs	r3, #3
    b89c:	3a04      	subs	r2, #4
    b89e:	7811      	ldrb	r1, [r2, #0]
    b8a0:	2400      	movs	r4, #0
    b8a2:	400b      	ands	r3, r1
    b8a4:	2b01      	cmp	r3, #1
    b8a6:	d101      	bne.n	b8ac <isr+0x13b8>
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
    b8a8:	876c      	strh	r4, [r5, #58]	; 0x3a
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;
    b8aa:	001c      	movs	r4, r3

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    b8ac:	2102      	movs	r1, #2
    b8ae:	7813      	ldrb	r3, [r2, #0]

		if (_radio.conn_curr->llcp_version.tx == 0) {
    b8b0:	2601      	movs	r6, #1

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    b8b2:	430b      	orrs	r3, r1

		if (_radio.conn_curr->llcp_version.tx == 0) {
    b8b4:	0019      	movs	r1, r3
    b8b6:	4031      	ands	r1, r6

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    b8b8:	7013      	strb	r3, [r2, #0]

		if (_radio.conn_curr->llcp_version.tx == 0) {
    b8ba:	910a      	str	r1, [sp, #40]	; 0x28
    b8bc:	d001      	beq.n	b8c2 <isr+0x13ce>
    b8be:	f000 fbfb 	bl	c0b8 <isr+0x1bc4>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b8c2:	4884      	ldr	r0, [pc, #528]	; (bad4 <isr+0x15e0>)
		}

		_radio.conn_curr->llcp_version.rx = 1;

		if (_radio.conn_curr->llcp_version.tx == 0) {
			_radio.conn_curr->llcp_version.tx = 1;
    b8c4:	4333      	orrs	r3, r6
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b8c6:	3059      	adds	r0, #89	; 0x59
		}

		_radio.conn_curr->llcp_version.rx = 1;

		if (_radio.conn_curr->llcp_version.tx == 0) {
			_radio.conn_curr->llcp_version.tx = 1;
    b8c8:	7013      	strb	r3, [r2, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b8ca:	30ff      	adds	r0, #255	; 0xff
    b8cc:	f7fa ff30 	bl	6730 <mem_acquire>
    b8d0:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    b8d2:	d101      	bne.n	b8d8 <isr+0x13e4>
    b8d4:	f000 feaa 	bl	c62c <isr+0x2138>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b8d8:	2203      	movs	r2, #3
    b8da:	7903      	ldrb	r3, [r0, #4]
    b8dc:	4313      	orrs	r3, r2
    b8de:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    b8e0:	2306      	movs	r3, #6
    b8e2:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_version_ind);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    b8e4:	18db      	adds	r3, r3, r3
    b8e6:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    b8e8:	3b03      	subs	r3, #3
    b8ea:	7203      	strb	r3, [r0, #8]
		RADIO_BLE_VERSION_NUMBER;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    b8ec:	3b0a      	subs	r3, #10
    b8ee:	7243      	strb	r3, [r0, #9]
    b8f0:	7283      	strb	r3, [r0, #10]
		RADIO_BLE_COMPANY_ID;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    b8f2:	72c3      	strb	r3, [r0, #11]
    b8f4:	7303      	strb	r3, [r0, #12]
		RADIO_BLE_SUB_VERSION_NUMBER;

	ctrl_tx_enqueue(conn, node_tx);
    b8f6:	0028      	movs	r0, r5
    b8f8:	f7fd fc32 	bl	9160 <ctrl_tx_enqueue>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    b8fc:	002a      	movs	r2, r5
    b8fe:	2180      	movs	r1, #128	; 0x80
    b900:	32c0      	adds	r2, #192	; 0xc0
    b902:	7813      	ldrb	r3, [r2, #0]
    b904:	4249      	negs	r1, r1
    b906:	430b      	orrs	r3, r1
    b908:	7013      	strb	r3, [r2, #0]

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    b90a:	f7fb f935 	bl	6b78 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b90e:	2203      	movs	r2, #3
    b910:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
	if (conn->pkt_tx_head) {
    b912:	35fc      	adds	r5, #252	; 0xfc
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b914:	4393      	bics	r3, r2
    b916:	431e      	orrs	r6, r3
	pdu_data_tx->len = 0;
    b918:	466b      	mov	r3, sp
    b91a:	3225      	adds	r2, #37	; 0x25
    b91c:	189b      	adds	r3, r3, r2
    b91e:	781b      	ldrb	r3, [r3, #0]
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    b920:	7006      	strb	r6, [r0, #0]
	pdu_data_tx->len = 0;
    b922:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    b924:	68a9      	ldr	r1, [r5, #8]
    b926:	3a18      	subs	r2, #24
    b928:	b2f3      	uxtb	r3, r6
    b92a:	2900      	cmp	r1, #0
    b92c:	d001      	beq.n	b932 <isr+0x143e>
		pdu_data_tx->md = 1;
    b92e:	4313      	orrs	r3, r2
    b930:	e000      	b.n	b934 <isr+0x1440>
	} else {
		pdu_data_tx->md = 0;
    b932:	4393      	bics	r3, r2
    b934:	7003      	strb	r3, [r0, #0]
    b936:	e3bf      	b.n	c0b8 <isr+0x1bc4>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
		_radio.conn_curr->pause_tx = 0;
    b938:	22f3      	movs	r2, #243	; 0xf3
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    b93a:	7819      	ldrb	r1, [r3, #0]
		_radio.conn_curr->pause_tx = 0;
    b93c:	400a      	ands	r2, r1
    b93e:	701a      	strb	r2, [r3, #0]

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    b940:	2300      	movs	r3, #0
    b942:	876b      	strh	r3, [r5, #58]	; 0x3a
    b944:	e72d      	b.n	b7a2 <isr+0x12ae>
		 */

		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
    b946:	002b      	movs	r3, r5
    b948:	3369      	adds	r3, #105	; 0x69
    b94a:	781b      	ldrb	r3, [r3, #0]
    b94c:	22c2      	movs	r2, #194	; 0xc2
    b94e:	930a      	str	r3, [sp, #40]	; 0x28
    b950:	002b      	movs	r3, r5
    b952:	3368      	adds	r3, #104	; 0x68
    b954:	781b      	ldrb	r3, [r3, #0]
    b956:	990a      	ldr	r1, [sp, #40]	; 0x28
    b958:	0052      	lsls	r2, r2, #1
    b95a:	428b      	cmp	r3, r1
    b95c:	d104      	bne.n	b968 <isr+0x1474>
    b95e:	58b3      	ldr	r3, [r6, r2]
    b960:	2b00      	cmp	r3, #0
    b962:	d000      	beq.n	b966 <isr+0x1472>
    b964:	e0b2      	b.n	bacc <isr+0x15d8>
    b966:	e01f      	b.n	b9a8 <isr+0x14b4>
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
    b968:	002b      	movs	r3, r5
    b96a:	3344      	adds	r3, #68	; 0x44
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    b96c:	781c      	ldrb	r4, [r3, #0]
    b96e:	2301      	movs	r3, #1
    b970:	401c      	ands	r4, r3
    b972:	002b      	movs	r3, r5
		     (_radio.conn_curr->role.slave.role != 0) &&
    b974:	58b2      	ldr	r2, [r6, r2]
    b976:	336a      	adds	r3, #106	; 0x6a
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    b978:	2c00      	cmp	r4, #0
    b97a:	d100      	bne.n	b97e <isr+0x148a>
    b97c:	e09c      	b.n	bab8 <isr+0x15c4>
		     (_radio.conn_curr->role.slave.role != 0) &&
    b97e:	4295      	cmp	r5, r2
    b980:	d001      	beq.n	b986 <isr+0x1492>
    b982:	f000 fe53 	bl	c62c <isr+0x2138>
		     (_radio.conn_curr == _radio.conn_upd) &&
    b986:	781b      	ldrb	r3, [r3, #0]
    b988:	2b01      	cmp	r3, #1
    b98a:	d001      	beq.n	b990 <isr+0x149c>
    b98c:	f000 fe4e 	bl	c62c <isr+0x2138>
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
		     ((_radio.conn_curr->llcp.connection_update.state ==
    b990:	002b      	movs	r3, r5
    b992:	3395      	adds	r3, #149	; 0x95
		       LLCP_CONN_STATE_INITIATE) ||
    b994:	781a      	ldrb	r2, [r3, #0]
    b996:	2307      	movs	r3, #7
    b998:	4013      	ands	r3, r2
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
		     (_radio.conn_curr == _radio.conn_upd) &&
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
    b99a:	1e5a      	subs	r2, r3, #1
    b99c:	2a01      	cmp	r2, #1
    b99e:	d903      	bls.n	b9a8 <isr+0x14b4>
		     ((_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_INITIATE) ||
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_REQ) ||
    b9a0:	2b05      	cmp	r3, #5
    b9a2:	d001      	beq.n	b9a8 <isr+0x14b4>
    b9a4:	f000 fe42 	bl	c62c <isr+0x2138>
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_RSP_WAIT)))) {
			/* set mutex */
			if (_radio.conn_upd == 0) {
    b9a8:	23c2      	movs	r3, #194	; 0xc2
    b9aa:	005b      	lsls	r3, r3, #1
    b9ac:	58f2      	ldr	r2, [r6, r3]
    b9ae:	2a00      	cmp	r2, #0
    b9b0:	d100      	bne.n	b9b4 <isr+0x14c0>
				_radio.conn_upd = _radio.conn_curr;
    b9b2:	50f5      	str	r5, [r6, r3]

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
    b9b4:	7b7b      	ldrb	r3, [r7, #13]
    b9b6:	7b3a      	ldrb	r2, [r7, #12]
    b9b8:	021b      	lsls	r3, r3, #8
    b9ba:	4313      	orrs	r3, r2
			}

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
    b9bc:	002a      	movs	r2, r5
    b9be:	326c      	adds	r2, #108	; 0x6c
    b9c0:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
    b9c2:	7c7b      	ldrb	r3, [r7, #17]
    b9c4:	7c3a      	ldrb	r2, [r7, #16]
    b9c6:	021b      	lsls	r3, r3, #8
    b9c8:	4313      	orrs	r3, r2
			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
    b9ca:	002a      	movs	r2, r5
    b9cc:	326e      	adds	r2, #110	; 0x6e
    b9ce:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
    b9d0:	7cfc      	ldrb	r4, [r7, #19]
    b9d2:	7cbb      	ldrb	r3, [r7, #18]
    b9d4:	0224      	lsls	r4, r4, #8
    b9d6:	431c      	orrs	r4, r3
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
    b9d8:	002b      	movs	r3, r5
    b9da:	3370      	adds	r3, #112	; 0x70
    b9dc:	801c      	strh	r4, [r3, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
    b9de:	7d3a      	ldrb	r2, [r7, #20]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
    b9e0:	709a      	strb	r2, [r3, #2]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
    b9e2:	7dbb      	ldrb	r3, [r7, #22]
    b9e4:	7d7a      	ldrb	r2, [r7, #21]
    b9e6:	021b      	lsls	r3, r3, #8
    b9e8:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
    b9ea:	002a      	movs	r2, r5
    b9ec:	3274      	adds	r2, #116	; 0x74
    b9ee:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
    b9f0:	7e3b      	ldrb	r3, [r7, #24]
    b9f2:	7dfa      	ldrb	r2, [r7, #23]
    b9f4:	021b      	lsls	r3, r3, #8
    b9f6:	4313      	orrs	r3, r2
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
    b9f8:	002a      	movs	r2, r5
    b9fa:	3276      	adds	r2, #118	; 0x76
    b9fc:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
    b9fe:	7ebb      	ldrb	r3, [r7, #26]
    ba00:	7e7a      	ldrb	r2, [r7, #25]
    ba02:	021b      	lsls	r3, r3, #8
    ba04:	4313      	orrs	r3, r2
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
    ba06:	002a      	movs	r2, r5
    ba08:	3278      	adds	r2, #120	; 0x78
    ba0a:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
    ba0c:	7f3b      	ldrb	r3, [r7, #28]
    ba0e:	7efa      	ldrb	r2, [r7, #27]
    ba10:	021b      	lsls	r3, r3, #8
    ba12:	4313      	orrs	r3, r2
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
    ba14:	002a      	movs	r2, r5
    ba16:	327a      	adds	r2, #122	; 0x7a
    ba18:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
    ba1a:	7fbb      	ldrb	r3, [r7, #30]
    ba1c:	7f7a      	ldrb	r2, [r7, #29]
    ba1e:	021b      	lsls	r3, r3, #8
    ba20:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
    ba22:	002a      	movs	r2, r5
    ba24:	327c      	adds	r2, #124	; 0x7c
    ba26:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
    ba28:	1c7b      	adds	r3, r7, #1
    ba2a:	7fdb      	ldrb	r3, [r3, #31]
    ba2c:	7ffa      	ldrb	r2, [r7, #31]
    ba2e:	021b      	lsls	r3, r3, #8
    ba30:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
    ba32:	002a      	movs	r2, r5
    ba34:	327e      	adds	r2, #126	; 0x7e
    ba36:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;
    ba38:	1cbb      	adds	r3, r7, #2
    ba3a:	7fda      	ldrb	r2, [r3, #31]
    ba3c:	1cfb      	adds	r3, r7, #3
    ba3e:	7fdb      	ldrb	r3, [r3, #31]
    ba40:	021b      	lsls	r3, r3, #8
    ba42:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
    ba44:	002a      	movs	r2, r5
    ba46:	3280      	adds	r2, #128	; 0x80
    ba48:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;

			/* enqueue the conn param req, if parameters changed,
			 * else respond
			 */
			if ((_radio.conn_curr->llcp.connection_update.interval !=
    ba4a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    ba4c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ba4e:	4293      	cmp	r3, r2
    ba50:	d10a      	bne.n	ba68 <isr+0x1574>
			     _radio.conn_curr->conn_interval) ||
			    (_radio.conn_curr->llcp.connection_update.latency
			     != _radio.conn_curr->latency) ||
    ba52:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    ba54:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    ba56:	21fa      	movs	r1, #250	; 0xfa
    ba58:	4358      	muls	r0, r3
    ba5a:	237d      	movs	r3, #125	; 0x7d
    ba5c:	0089      	lsls	r1, r1, #2
    ba5e:	4358      	muls	r0, r3
    ba60:	f7f4 fc3e 	bl	2e0 <__aeabi_idiv>
    ba64:	4284      	cmp	r4, r0
    ba66:	d00e      	beq.n	ba86 <isr+0x1592>
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
    ba68:	002a      	movs	r2, r5
    ba6a:	2107      	movs	r1, #7
    ba6c:	3295      	adds	r2, #149	; 0x95
    ba6e:	7813      	ldrb	r3, [r2, #0]
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    ba70:	2401      	movs	r4, #1
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
    ba72:	438b      	bics	r3, r1
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    ba74:	3903      	subs	r1, #3
    ba76:	430b      	orrs	r3, r1
    ba78:	3114      	adds	r1, #20
    ba7a:	438b      	bics	r3, r1
    ba7c:	7013      	strb	r3, [r2, #0]
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    ba7e:	002b      	movs	r3, r5
    ba80:	336a      	adds	r3, #106	; 0x6a
    ba82:	701c      	strb	r4, [r3, #0]
    ba84:	e013      	b.n	baae <isr+0x15ba>
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    ba86:	002b      	movs	r3, r5
    ba88:	2201      	movs	r2, #1
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    ba8a:	2400      	movs	r4, #0
				_radio.conn_curr->llcp.connection_update.state =
    ba8c:	0029      	movs	r1, r5
    ba8e:	2007      	movs	r0, #7
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    ba90:	3394      	adds	r3, #148	; 0x94
    ba92:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    ba94:	3b08      	subs	r3, #8
    ba96:	601c      	str	r4, [r3, #0]
				_radio.conn_curr->llcp.connection_update.state =
    ba98:	3195      	adds	r1, #149	; 0x95
    ba9a:	780b      	ldrb	r3, [r1, #0]
    ba9c:	4383      	bics	r3, r0
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    ba9e:	3804      	subs	r0, #4
    baa0:	4303      	orrs	r3, r0
    baa2:	3015      	adds	r0, #21
    baa4:	4383      	bics	r3, r0
    baa6:	700b      	strb	r3, [r1, #0]

				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    baa8:	002b      	movs	r3, r5
    baaa:	336a      	adds	r3, #106	; 0x6a
    baac:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_ack--;
    baae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bab0:	3569      	adds	r5, #105	; 0x69
    bab2:	3b01      	subs	r3, #1
    bab4:	702b      	strb	r3, [r5, #0]
    bab6:	e2ff      	b.n	c0b8 <isr+0x1bc4>
		/* master in conn update procedure, master in any state we
		 * ignore this req
		 */
		else if ((_radio.conn_curr->llcp_req !=
			  _radio.conn_curr->llcp_ack) &&
			 (_radio.conn_curr->role.master.role == 0) &&
    bab8:	4295      	cmp	r5, r2
    baba:	d001      	beq.n	bac0 <isr+0x15cc>
    babc:	f000 fdb6 	bl	c62c <isr+0x2138>
			 (_radio.conn_curr == _radio.conn_upd) &&
    bac0:	781b      	ldrb	r3, [r3, #0]
    bac2:	2b01      	cmp	r3, #1
    bac4:	d001      	beq.n	baca <isr+0x15d6>
    bac6:	f000 fdb1 	bl	c62c <isr+0x2138>
    baca:	e2f5      	b.n	c0b8 <isr+0x1bc4>
		 * set (another connection update in progress), hence reject
		 * this req.
		 */
		else if (_radio.conn_curr->llcp_req ==
			 _radio.conn_curr->llcp_ack) {
			reject_ind_ext_send(_radio.conn_curr,
    bacc:	2220      	movs	r2, #32
    bace:	210f      	movs	r1, #15
    bad0:	e1b3      	b.n	be3a <isr+0x1946>
    bad2:	46c0      	nop			; (mov r8, r8)
    bad4:	20000ea0 	.word	0x20000ea0
    bad8:	fffe30d0 	.word	0xfffe30d0

static inline void
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
    badc:	002a      	movs	r2, r5
    bade:	3268      	adds	r2, #104	; 0x68
    bae0:	7811      	ldrb	r1, [r2, #0]
    bae2:	7850      	ldrb	r0, [r2, #1]
    bae4:	3201      	adds	r2, #1
    bae6:	4288      	cmp	r0, r1
    bae8:	d03d      	beq.n	bb66 <isr+0x1672>
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;

		switch (_radio.conn_curr->llcp_type) {
    baea:	002b      	movs	r3, r5
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    baec:	7011      	strb	r1, [r2, #0]

		switch (_radio.conn_curr->llcp_type) {
    baee:	336a      	adds	r3, #106	; 0x6a
    baf0:	781a      	ldrb	r2, [r3, #0]
    baf2:	2a01      	cmp	r2, #1
    baf4:	d001      	beq.n	bafa <isr+0x1606>
    baf6:	f000 fd99 	bl	c62c <isr+0x2138>

static inline void
isr_rx_conn_pkt_ctrl_rej_conn_upd(struct radio_pdu_node_rx *radio_pdu_node_rx,
				  u8_t *rx_enqueue)
{
	LL_ASSERT(_radio.conn_upd == _radio.conn_curr);
    bafa:	21c2      	movs	r1, #194	; 0xc2
    bafc:	0049      	lsls	r1, r1, #1
    bafe:	5873      	ldr	r3, [r6, r1]
    bb00:	429d      	cmp	r5, r3
    bb02:	d001      	beq.n	bb08 <isr+0x1614>
    bb04:	f000 fd92 	bl	c62c <isr+0x2138>

	/* reset mutex */
	_radio.conn_upd = NULL;
    bb08:	2300      	movs	r3, #0
    bb0a:	5073      	str	r3, [r6, r1]

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
    bb0c:	0029      	movs	r1, r5
    bb0e:	3144      	adds	r1, #68	; 0x44
    bb10:	7809      	ldrb	r1, [r1, #0]
    bb12:	4211      	tst	r1, r2
    bb14:	d003      	beq.n	bb1e <isr+0x162a>
		_radio.conn_curr->role.slave.ticks_to_offset =
		    _radio.conn_curr->llcp.connection_update.
    bb16:	002a      	movs	r2, r5
    bb18:	3288      	adds	r2, #136	; 0x88
	/* reset mutex */
	_radio.conn_upd = NULL;

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
		_radio.conn_curr->role.slave.ticks_to_offset =
    bb1a:	6812      	ldr	r2, [r2, #0]
    bb1c:	666a      	str	r2, [r5, #100]	; 0x64
		    _radio.conn_curr->llcp.connection_update.
			ticks_to_offset_next;
	}

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;
    bb1e:	876b      	strh	r3, [r5, #58]	; 0x3a

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    bb20:	002b      	movs	r3, r5
    bb22:	3395      	adds	r3, #149	; 0x95
    bb24:	781a      	ldrb	r2, [r3, #0]
    bb26:	2318      	movs	r3, #24
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    bb28:	2400      	movs	r4, #0

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    bb2a:	421a      	tst	r2, r3
    bb2c:	d000      	beq.n	bb30 <isr+0x163c>
    bb2e:	e2c3      	b.n	c0b8 <isr+0x1bc4>
		struct radio_le_conn_update_cmplt
			*radio_le_conn_update_cmplt;
		struct pdu_data *pdu_data_rx;

		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    bb30:	3b10      	subs	r3, #16
    bb32:	713b      	strb	r3, [r7, #4]
		/* prepare connection update complete structure */
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
    bb34:	72fc      	strb	r4, [r7, #11]
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
    bb36:	8cab      	ldrh	r3, [r5, #36]	; 0x24
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
		radio_le_conn_update_cmplt->timeout =
    bb38:	21fa      	movs	r1, #250	; 0xfa
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
    bb3a:	0a1a      	lsrs	r2, r3, #8
    bb3c:	733b      	strb	r3, [r7, #12]
    bb3e:	737a      	strb	r2, [r7, #13]
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    bb40:	1dea      	adds	r2, r5, #7
    bb42:	7fd2      	ldrb	r2, [r2, #31]
		radio_le_conn_update_cmplt->timeout =
    bb44:	0089      	lsls	r1, r1, #2
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    bb46:	73ba      	strb	r2, [r7, #14]
    bb48:	002a      	movs	r2, r5
    bb4a:	3208      	adds	r2, #8
    bb4c:	7fd2      	ldrb	r2, [r2, #31]
    bb4e:	73fa      	strb	r2, [r7, #15]
		radio_le_conn_update_cmplt->timeout =
    bb50:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    bb52:	4358      	muls	r0, r3
    bb54:	237d      	movs	r3, #125	; 0x7d
    bb56:	4358      	muls	r0, r3
    bb58:	f7f4 fbc2 	bl	2e0 <__aeabi_idiv>
    bb5c:	b280      	uxth	r0, r0
    bb5e:	7438      	strb	r0, [r7, #16]
    bb60:	0a00      	lsrs	r0, r0, #8
    bb62:	7478      	strb	r0, [r7, #17]
    bb64:	e21b      	b.n	bf9e <isr+0x1aaa>
			break;
		}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	} else if (_radio.conn_curr->llcp_length.ack !=
		   _radio.conn_curr->llcp_length.req) {
    bb66:	002a      	movs	r2, r5
    bb68:	32b4      	adds	r2, #180	; 0xb4
    bb6a:	7811      	ldrb	r1, [r2, #0]
			LL_ASSERT(0);
			break;
		}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	} else if (_radio.conn_curr->llcp_length.ack !=
    bb6c:	7850      	ldrb	r0, [r2, #1]
    bb6e:	3201      	adds	r2, #1
    bb70:	4288      	cmp	r0, r1
    bb72:	d023      	beq.n	bbbc <isr+0x16c8>
	struct pdu_data *pdu_data_rx;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	rej_ext_ind = (struct pdu_data_llctrl_reject_ext_ind *)
		      &pdu_data_rx->payload.llctrl.ctrldata.reject_ext_ind;
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    bb74:	7b38      	ldrb	r0, [r7, #12]
    bb76:	2400      	movs	r4, #0
    bb78:	2814      	cmp	r0, #20
    bb7a:	d000      	beq.n	bb7e <isr+0x168a>
    bb7c:	e29c      	b.n	c0b8 <isr+0x1bc4>
		struct pdu_data_llctrl_length_req_rsp *lr;

		/* Procedure complete */
		_radio.conn_curr->llcp_length.ack =
    bb7e:	7011      	strb	r1, [r2, #0]
			_radio.conn_curr->llcp_length.req;
		_radio.conn_curr->procedure_expire = 0;

		/* Resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    bb80:	2108      	movs	r1, #8
		struct pdu_data_llctrl_length_req_rsp *lr;

		/* Procedure complete */
		_radio.conn_curr->llcp_length.ack =
			_radio.conn_curr->llcp_length.req;
		_radio.conn_curr->procedure_expire = 0;
    bb82:	876c      	strh	r4, [r5, #58]	; 0x3a

		/* Resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    bb84:	781a      	ldrb	r2, [r3, #0]
    bb86:	438a      	bics	r2, r1
    bb88:	701a      	strb	r2, [r3, #0]

		/* prepare length rsp structure */
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    bb8a:	2309      	movs	r3, #9
    bb8c:	727b      	strb	r3, [r7, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_data_rx->payload.llctrl.opcode =
    bb8e:	330c      	adds	r3, #12
    bb90:	72fb      	strb	r3, [r7, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
    bb92:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    bb94:	0a1a      	lsrs	r2, r3, #8
    bb96:	733b      	strb	r3, [r7, #12]
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
    bb98:	330e      	adds	r3, #14
    bb9a:	00db      	lsls	r3, r3, #3
    bb9c:	b29b      	uxth	r3, r3
    bb9e:	73bb      	strb	r3, [r7, #14]
    bba0:	40cb      	lsrs	r3, r1
		pdu_data_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
    bba2:	737a      	strb	r2, [r7, #13]
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
    bba4:	73fb      	strb	r3, [r7, #15]
		lr->max_tx_octets = _radio.conn_curr->max_tx_octets;
    bba6:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    bba8:	0a1a      	lsrs	r2, r3, #8
    bbaa:	743b      	strb	r3, [r7, #16]
		lr->max_tx_time = ((_radio.conn_curr->max_tx_octets + 14) << 3);
    bbac:	330e      	adds	r3, #14
    bbae:	00db      	lsls	r3, r3, #3
    bbb0:	b29b      	uxth	r3, r3
    bbb2:	74bb      	strb	r3, [r7, #18]
    bbb4:	40cb      	lsrs	r3, r1

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
		lr->max_tx_octets = _radio.conn_curr->max_tx_octets;
    bbb6:	747a      	strb	r2, [r7, #17]
		lr->max_tx_time = ((_radio.conn_curr->max_tx_octets + 14) << 3);
    bbb8:	74fb      	strb	r3, [r7, #19]
    bbba:	e1f0      	b.n	bf9e <isr+0x1aaa>
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
		   _radio.conn_curr->llcp_phy.req) {
    bbbc:	002b      	movs	r3, r5
    bbbe:	33bc      	adds	r3, #188	; 0xbc
    bbc0:	781a      	ldrb	r2, [r3, #0]
		isr_rx_conn_pkt_ctrl_rej_dle(radio_pdu_node_rx,
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
    bbc2:	7859      	ldrb	r1, [r3, #1]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    bbc4:	2400      	movs	r4, #0
		isr_rx_conn_pkt_ctrl_rej_dle(radio_pdu_node_rx,
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
    bbc6:	3301      	adds	r3, #1
    bbc8:	4291      	cmp	r1, r2
    bbca:	d100      	bne.n	bbce <isr+0x16da>
    bbcc:	e274      	b.n	c0b8 <isr+0x1bc4>
	struct pdu_data *pdu_data_rx;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	rej_ext_ind = (struct pdu_data_llctrl_reject_ext_ind *)
		      &pdu_data_rx->payload.llctrl.ctrldata.reject_ext_ind;
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    bbce:	7b39      	ldrb	r1, [r7, #12]
    bbd0:	2916      	cmp	r1, #22
    bbd2:	d000      	beq.n	bbd6 <isr+0x16e2>
    bbd4:	e270      	b.n	c0b8 <isr+0x1bc4>
		if (rej_ext_ind->error_code == 0x23) {
    bbd6:	7b79      	ldrb	r1, [r7, #13]
    bbd8:	2923      	cmp	r1, #35	; 0x23
    bbda:	d100      	bne.n	bbde <isr+0x16ea>
    bbdc:	e26c      	b.n	c0b8 <isr+0x1bc4>
		} else {
			/* Different Transaction Collision */
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
    bbde:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_phy.req;
			_radio.conn_curr->procedure_expire = 0;

			/* skip event generation is not cmd initiated */
			if (!_radio.conn_curr->llcp_phy.cmd) {
    bbe0:	3302      	adds	r3, #2
    bbe2:	781b      	ldrb	r3, [r3, #0]
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
				_radio.conn_curr->llcp_phy.req;
			_radio.conn_curr->procedure_expire = 0;
    bbe4:	876c      	strh	r4, [r5, #58]	; 0x3a

			/* skip event generation is not cmd initiated */
			if (!_radio.conn_curr->llcp_phy.cmd) {
    bbe6:	079b      	lsls	r3, r3, #30
    bbe8:	d400      	bmi.n	bbec <isr+0x16f8>
    bbea:	e265      	b.n	c0b8 <isr+0x1bc4>
				return;
			}

			/* generate phy update complete event with error code */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    bbec:	230c      	movs	r3, #12
    bbee:	713b      	strb	r3, [r7, #4]

			p = (struct radio_le_phy_upd_cmplt *)
			    &pdu_data_rx->payload;
			p->status = rej_ext_ind->error_code;
    bbf0:	7b7b      	ldrb	r3, [r7, #13]
    bbf2:	72fb      	strb	r3, [r7, #11]
    bbf4:	e1c8      	b.n	bf88 <isr+0x1a94>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bbf6:	0030      	movs	r0, r6
    bbf8:	3059      	adds	r0, #89	; 0x59
    bbfa:	30ff      	adds	r0, #255	; 0xff
    bbfc:	f7fa fd98 	bl	6730 <mem_acquire>
    bc00:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    bc02:	d101      	bne.n	bc08 <isr+0x1714>
    bc04:	f000 fd12 	bl	c62c <isr+0x2138>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc08:	2203      	movs	r2, #3
    bc0a:	7903      	ldrb	r3, [r0, #4]
    bc0c:	4313      	orrs	r3, r2
    bc0e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    bc10:	2301      	movs	r3, #1
    bc12:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    bc14:	3312      	adds	r3, #18
    bc16:	71c3      	strb	r3, [r0, #7]
    bc18:	e167      	b.n	beea <isr+0x19f6>
		ping_resp_send(_radio.conn_curr);
		break;

	case PDU_DATA_LLCTRL_TYPE_PING_RSP:
		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    bc1a:	876c      	strh	r4, [r5, #58]	; 0x3a
    bc1c:	e589      	b.n	b732 <isr+0x123e>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		if (_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) {
    bc1e:	002a      	movs	r2, r5
    bc20:	3268      	adds	r2, #104	; 0x68
    bc22:	7811      	ldrb	r1, [r2, #0]
    bc24:	7850      	ldrb	r0, [r2, #1]
    bc26:	3201      	adds	r2, #1
    bc28:	4288      	cmp	r0, r1
    bc2a:	d002      	beq.n	bc32 <isr+0x173e>
			/* reset ctrl procedure */
			_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    bc2c:	7011      	strb	r1, [r2, #0]
    bc2e:	f000 fcfd 	bl	c62c <isr+0x2138>
				LL_ASSERT(0);
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
    bc32:	002a      	movs	r2, r5
    bc34:	32b4      	adds	r2, #180	; 0xb4
    bc36:	7811      	ldrb	r1, [r2, #0]
    bc38:	7850      	ldrb	r0, [r2, #1]
			   _radio.conn_curr->llcp_length.ack) {
    bc3a:	3201      	adds	r2, #1
				LL_ASSERT(0);
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
    bc3c:	4288      	cmp	r0, r1
    bc3e:	d006      	beq.n	bc4e <isr+0x175a>
			   _radio.conn_curr->llcp_length.ack) {
			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
    bc40:	7011      	strb	r1, [r2, #0]
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    bc42:	2108      	movs	r1, #8
    bc44:	781a      	ldrb	r2, [r3, #0]

			/* propagate the data length procedure to
			 * host
			 */
			*rx_enqueue = 1;
    bc46:	2401      	movs	r4, #1
			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    bc48:	438a      	bics	r2, r1
    bc4a:	701a      	strb	r2, [r3, #0]
    bc4c:	e021      	b.n	bc92 <isr+0x179e>
			 */
			*rx_enqueue = 1;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		} else if (_radio.conn_curr->llcp_phy.req !=
    bc4e:	002b      	movs	r3, r5
    bc50:	33bc      	adds	r3, #188	; 0xbc
    bc52:	781a      	ldrb	r2, [r3, #0]
    bc54:	7859      	ldrb	r1, [r3, #1]
			   _radio.conn_curr->llcp_phy.ack) {
    bc56:	3301      	adds	r3, #1
			 */
			*rx_enqueue = 1;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		} else if (_radio.conn_curr->llcp_phy.req !=
    bc58:	4291      	cmp	r1, r2
    bc5a:	d016      	beq.n	bc8a <isr+0x1796>
			   _radio.conn_curr->llcp_phy.ack) {
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
    bc5c:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_phy.req;

			/* skip event generation is not cmd initiated */
			if (_radio.conn_curr->llcp_phy.cmd) {
    bc5e:	3302      	adds	r3, #2
    bc60:	781b      	ldrb	r3, [r3, #0]
    bc62:	2400      	movs	r4, #0
    bc64:	079b      	lsls	r3, r3, #30
    bc66:	d514      	bpl.n	bc92 <isr+0x179e>
				/* generate phy update complete event */
				radio_pdu_node_rx->hdr.type =
    bc68:	230c      	movs	r3, #12
    bc6a:	713b      	strb	r3, [r7, #4]
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
				p->tx = _radio.conn_curr->phy_tx;
    bc6c:	002b      	movs	r3, r5
				radio_pdu_node_rx->hdr.type =
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
    bc6e:	72fc      	strb	r4, [r7, #11]
				p->tx = _radio.conn_curr->phy_tx;
    bc70:	3332      	adds	r3, #50	; 0x32
    bc72:	781b      	ldrb	r3, [r3, #0]
				p->rx = _radio.conn_curr->phy_rx;

				/* enqueue the phy update complete */
				*rx_enqueue = 1;
    bc74:	3401      	adds	r4, #1
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
				p->tx = _radio.conn_curr->phy_tx;
    bc76:	069b      	lsls	r3, r3, #26
    bc78:	0f5b      	lsrs	r3, r3, #29
    bc7a:	733b      	strb	r3, [r7, #12]
				p->rx = _radio.conn_curr->phy_rx;
    bc7c:	002b      	movs	r3, r5
    bc7e:	3333      	adds	r3, #51	; 0x33
    bc80:	781b      	ldrb	r3, [r3, #0]
    bc82:	069b      	lsls	r3, r3, #26
    bc84:	0f5b      	lsrs	r3, r3, #29
    bc86:	737b      	strb	r3, [r7, #13]
    bc88:	e003      	b.n	bc92 <isr+0x179e>
		} else {
			struct pdu_data_llctrl *llctrl;

			llctrl = (struct pdu_data_llctrl *)
				&pdu_data_rx->payload.llctrl;
			switch (llctrl->ctrldata.unknown_rsp.type) {
    bc8a:	7b3c      	ldrb	r4, [r7, #12]
				break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			default:
				/* enqueue the error and let HCI handle it */
				*rx_enqueue = 1;
    bc8c:	3c12      	subs	r4, #18
    bc8e:	1e63      	subs	r3, r4, #1
    bc90:	419c      	sbcs	r4, r3
				break;
			}
		}

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    bc92:	2300      	movs	r3, #0
    bc94:	876b      	strh	r3, [r5, #58]	; 0x3a
    bc96:	e20f      	b.n	c0b8 <isr+0x1bc4>
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    bc98:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    bc9a:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    bc9c:	930a      	str	r3, [sp, #40]	; 0x28

	if (/* Local idle, and Peer request then complete the Peer procedure
	     * with response.
	     */
	    ((_radio.conn_curr->llcp_length.req ==
    bc9e:	002b      	movs	r3, r5
    bca0:	33b4      	adds	r3, #180	; 0xb4
    bca2:	7819      	ldrb	r1, [r3, #0]
	      _radio.conn_curr->llcp_length.ack) &&
    bca4:	3301      	adds	r3, #1
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
	eff_tx_octets = _radio.conn_curr->max_tx_octets;

	if (/* Local idle, and Peer request then complete the Peer procedure
    bca6:	781b      	ldrb	r3, [r3, #0]
    bca8:	428b      	cmp	r3, r1
    bcaa:	d008      	beq.n	bcbe <isr+0x17ca>
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
	     /* with Local requested and Peer request then complete the
	      * Peer procedure with response.
	      */
	     ((((_radio.conn_curr->llcp_length.state ==
    bcac:	002b      	movs	r3, r5
    bcae:	33b6      	adds	r3, #182	; 0xb6
		 LLCP_LENGTH_STATE_REQ) ||
    bcb0:	781a      	ldrb	r2, [r3, #0]
    bcb2:	2303      	movs	r3, #3
    bcb4:	4013      	ands	r3, r2
	      _radio.conn_curr->llcp_length.ack) &&
	     (pdu_data_rx->payload.llctrl.opcode ==
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
	    /* or Local has active... */
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
    bcb6:	2b01      	cmp	r3, #1
    bcb8:	d901      	bls.n	bcbe <isr+0x17ca>
    bcba:	f000 fcac 	bl	c616 <isr+0x2122>
	      * Peer procedure with response.
	      */
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
		(_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
    bcbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bcc0:	2b14      	cmp	r3, #20
    bcc2:	d16b      	bne.n	bd9c <isr+0x18a8>
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;

		/* use the minimal of our default_tx_octets and
		 * peer max_rx_octets
		 */
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    bcc4:	7b7b      	ldrb	r3, [r7, #13]
    bcc6:	7b3a      	ldrb	r2, [r7, #12]
    bcc8:	021b      	lsls	r3, r3, #8
    bcca:	4313      	orrs	r3, r2
    bccc:	2b1a      	cmp	r3, #26
    bcce:	d906      	bls.n	bcde <isr+0x17ea>
			eff_tx_octets = min(lr->max_rx_octets,
    bcd0:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
    bcd2:	1c02      	adds	r2, r0, #0
    bcd4:	4298      	cmp	r0, r3
    bcd6:	d900      	bls.n	bcda <isr+0x17e6>
    bcd8:	1c1a      	adds	r2, r3, #0
    bcda:	b293      	uxth	r3, r2
    bcdc:	930a      	str	r3, [sp, #40]	; 0x28
		}

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    bcde:	7c7b      	ldrb	r3, [r7, #17]
    bce0:	7c3a      	ldrb	r2, [r7, #16]
    bce2:	021b      	lsls	r3, r3, #8
    bce4:	4313      	orrs	r3, r2
    bce6:	2b1a      	cmp	r3, #26
    bce8:	d92f      	bls.n	bd4a <isr+0x1856>
			eff_rx_octets = min(lr->max_tx_octets,
					    RADIO_LL_LENGTH_OCTETS_RX_MAX);
		}

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    bcea:	2e1b      	cmp	r6, #27
    bcec:	d02d      	beq.n	bd4a <isr+0x1856>
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    bcee:	f7fc f8fd 	bl	7eec <packet_rx_acquired_count_get>
				+ mem_free_count_get(_radio.pkt_rx_data_free);
    bcf2:	4de1      	ldr	r5, [pc, #900]	; (c078 <isr+0x1b84>)

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    bcf4:	0004      	movs	r4, r0
				+ mem_free_count_get(_radio.pkt_rx_data_free);
    bcf6:	002e      	movs	r6, r5
    bcf8:	36fc      	adds	r6, #252	; 0xfc
    bcfa:	6b30      	ldr	r0, [r6, #48]	; 0x30
    bcfc:	f7fa fd47 	bl	678e <mem_free_count_get>

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    bd00:	1904      	adds	r4, r0, r4
    bd02:	b2a0      	uxth	r0, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
			LL_ASSERT(free_count_rx <= 0xFF);
    bd04:	28ff      	cmp	r0, #255	; 0xff
    bd06:	d901      	bls.n	bd0c <isr+0x1818>
    bd08:	f000 fc90 	bl	c62c <isr+0x2138>

			if (_radio.packet_rx_data_count == free_count_rx) {
    bd0c:	239b      	movs	r3, #155	; 0x9b
    bd0e:	005b      	lsls	r3, r3, #1
    bd10:	5ceb      	ldrb	r3, [r5, r3]
    bd12:	221b      	movs	r2, #27
    bd14:	4283      	cmp	r3, r0
    bd16:	d144      	bne.n	bda2 <isr+0x18ae>

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    bd18:	4669      	mov	r1, sp
    bd1a:	6973      	ldr	r3, [r6, #20]
    bd1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
    bd1e:	4668      	mov	r0, sp
			LL_ASSERT(free_count_rx <= 0xFF);

			if (_radio.packet_rx_data_count == free_count_rx) {

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    bd20:	85d9      	strh	r1, [r3, #46]	; 0x2e

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    bd22:	0019      	movs	r1, r3
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
    bd24:	8d00      	ldrh	r0, [r0, #40]	; 0x28
				_radio.conn_curr->max_tx_octets = eff_tx_octets;

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    bd26:	31b8      	adds	r1, #184	; 0xb8
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
    bd28:	8048      	strh	r0, [r1, #2]
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
    bd2a:	0018      	movs	r0, r3
				_radio.conn_curr->max_tx_octets = eff_tx_octets;

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    bd2c:	800a      	strh	r2, [r1, #0]
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
    bd2e:	3904      	subs	r1, #4
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
    bd30:	7809      	ldrb	r1, [r1, #0]
    bd32:	30b5      	adds	r0, #181	; 0xb5
    bd34:	3901      	subs	r1, #1
    bd36:	7001      	strb	r1, [r0, #0]
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    bd38:	2003      	movs	r0, #3
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    bd3a:	2400      	movs	r4, #0
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    bd3c:	33b6      	adds	r3, #182	; 0xb6
    bd3e:	7819      	ldrb	r1, [r3, #0]
					LLCP_LENGTH_STATE_RESIZE;

				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
    bd40:	7428      	strb	r0, [r5, #16]
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    bd42:	4301      	orrs	r1, r0
    bd44:	7019      	strb	r1, [r3, #0]
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
    bd46:	0023      	movs	r3, r4
    bd48:	e02d      	b.n	bda6 <isr+0x18b2>
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    bd4a:	002a      	movs	r2, r5
    bd4c:	2008      	movs	r0, #8
    bd4e:	32c0      	adds	r2, #192	; 0xc0
    bd50:	7813      	ldrb	r3, [r2, #0]
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);

			/* Enqueue data length change event (with no change in
			 * rx length happened), safe to enqueue rx.
			 */
			*rx_enqueue = 1;
    bd52:	2401      	movs	r4, #1
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    bd54:	4383      	bics	r3, r0
    bd56:	7013      	strb	r3, [r2, #0]

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    bd58:	466b      	mov	r3, sp
    bd5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
    bd5c:	0a32      	lsrs	r2, r6, #8
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    bd5e:	85eb      	strh	r3, [r5, #46]	; 0x2e

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
    bd60:	002b      	movs	r3, r5
    bd62:	33b5      	adds	r3, #181	; 0xb5
    bd64:	7019      	strb	r1, [r3, #0]
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;
    bd66:	2300      	movs	r3, #0
    bd68:	876b      	strh	r3, [r5, #58]	; 0x3a

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
    bd6a:	737a      	strb	r2, [r7, #13]
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
    bd6c:	0032      	movs	r2, r6
    bd6e:	320e      	adds	r2, #14
    bd70:	00d2      	lsls	r2, r2, #3
    bd72:	b292      	uxth	r2, r2
    bd74:	73ba      	strb	r2, [r7, #14]
    bd76:	40c2      	lsrs	r2, r0
			lr->max_tx_octets = eff_tx_octets;
    bd78:	2128      	movs	r1, #40	; 0x28
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
    bd7a:	73fa      	strb	r2, [r7, #15]
			lr->max_tx_octets = eff_tx_octets;
    bd7c:	466a      	mov	r2, sp
    bd7e:	1852      	adds	r2, r2, r1
    bd80:	7812      	ldrb	r2, [r2, #0]
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
    bd82:	733e      	strb	r6, [r7, #12]
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
			lr->max_tx_octets = eff_tx_octets;
    bd84:	743a      	strb	r2, [r7, #16]
    bd86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bd88:	40c2      	lsrs	r2, r0
    bd8a:	747a      	strb	r2, [r7, #17]
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);
    bd8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bd8e:	320e      	adds	r2, #14
    bd90:	00d2      	lsls	r2, r2, #3
    bd92:	b292      	uxth	r2, r2
    bd94:	74ba      	strb	r2, [r7, #18]
    bd96:	40c2      	lsrs	r2, r0
    bd98:	74fa      	strb	r2, [r7, #19]
    bd9a:	e005      	b.n	bda8 <isr+0x18b4>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    bd9c:	2400      	movs	r4, #0
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
    bd9e:	0023      	movs	r3, r4
    bda0:	e002      	b.n	bda8 <isr+0x18b4>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    bda2:	2400      	movs	r4, #0
				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
			} else {
				nack = 1;
    bda4:	2301      	movs	r3, #1

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
			eff_rx_octets = min(lr->max_tx_octets,
    bda6:	0016      	movs	r6, r2
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
    bda8:	7afa      	ldrb	r2, [r7, #11]
    bdaa:	2a14      	cmp	r2, #20
    bdac:	d000      	beq.n	bdb0 <isr+0x18bc>
    bdae:	e180      	b.n	c0b2 <isr+0x1bbe>
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
	u8_t crc_close = 0;
    bdb0:	2200      	movs	r2, #0
    bdb2:	920c      	str	r2, [sp, #48]	; 0x30
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
    bdb4:	4293      	cmp	r3, r2
    bdb6:	d000      	beq.n	bdba <isr+0x18c6>
    bdb8:	e1ce      	b.n	c158 <isr+0x1c64>
		length_resp_send(_radio.conn_curr, eff_rx_octets,
    bdba:	48af      	ldr	r0, [pc, #700]	; (c078 <isr+0x1b84>)
    bdbc:	0003      	movs	r3, r0
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bdbe:	3059      	adds	r0, #89	; 0x59
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
		length_resp_send(_radio.conn_curr, eff_rx_octets,
    bdc0:	33fc      	adds	r3, #252	; 0xfc
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bdc2:	30ff      	adds	r0, #255	; 0xff
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
		length_resp_send(_radio.conn_curr, eff_rx_octets,
    bdc4:	695d      	ldr	r5, [r3, #20]
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bdc6:	f7fa fcb3 	bl	6730 <mem_acquire>
    bdca:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    bdcc:	d101      	bne.n	bdd2 <isr+0x18de>
    bdce:	f000 fc2d 	bl	c62c <isr+0x2138>

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bdd2:	2203      	movs	r2, #3
    bdd4:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
    bdd6:	7206      	strb	r6, [r0, #8]

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bdd8:	4313      	orrs	r3, r2
    bdda:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    bddc:	2309      	movs	r3, #9
    bdde:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    bde0:	330c      	adds	r3, #12
    bde2:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
    bde4:	0a33      	lsrs	r3, r6, #8
    bde6:	7243      	strb	r3, [r0, #9]
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
    bde8:	0033      	movs	r3, r6
    bdea:	330e      	adds	r3, #14
    bdec:	4093      	lsls	r3, r2
    bdee:	b29b      	uxth	r3, r3
    bdf0:	7283      	strb	r3, [r0, #10]
    bdf2:	0a1b      	lsrs	r3, r3, #8
    bdf4:	72c3      	strb	r3, [r0, #11]
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
    bdf6:	466b      	mov	r3, sp
    bdf8:	3225      	adds	r2, #37	; 0x25
    bdfa:	189b      	adds	r3, r3, r2
    bdfc:	781b      	ldrb	r3, [r3, #0]
    bdfe:	7303      	strb	r3, [r0, #12]
    be00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    be02:	0a1b      	lsrs	r3, r3, #8
    be04:	7343      	strb	r3, [r0, #13]
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
    be06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    be08:	330e      	adds	r3, #14
    be0a:	00db      	lsls	r3, r3, #3
    be0c:	b29b      	uxth	r3, r3
    be0e:	7383      	strb	r3, [r0, #14]
    be10:	0a1b      	lsrs	r3, r3, #8
    be12:	73c3      	strb	r3, [r0, #15]
    be14:	e12c      	b.n	c070 <isr+0x1b7c>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (_radio.role == ROLE_MASTER) {
    be16:	7bf3      	ldrb	r3, [r6, #15]
    be18:	2b04      	cmp	r3, #4
    be1a:	d14b      	bne.n	beb4 <isr+0x19c0>
			if ((_radio.conn_curr->llcp_phy.ack !=
    be1c:	002b      	movs	r3, r5
    be1e:	33bd      	adds	r3, #189	; 0xbd
    be20:	781a      	ldrb	r2, [r3, #0]
			     _radio.conn_curr->llcp_phy.req) &&
    be22:	3b01      	subs	r3, #1
    be24:	7819      	ldrb	r1, [r3, #0]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (_radio.role == ROLE_MASTER) {
			if ((_radio.conn_curr->llcp_phy.ack !=
    be26:	428a      	cmp	r2, r1
    be28:	d00b      	beq.n	be42 <isr+0x194e>
			     _radio.conn_curr->llcp_phy.req) &&
    be2a:	7898      	ldrb	r0, [r3, #2]
    be2c:	2303      	movs	r3, #3
    be2e:	4003      	ands	r3, r0
    be30:	3b01      	subs	r3, #1
    be32:	2b02      	cmp	r3, #2
    be34:	d805      	bhi.n	be42 <isr+0x194e>
			     (_radio.conn_curr->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
			     (_radio.conn_curr->llcp_phy.state ==
			      LLCP_PHY_STATE_UPD))) {
				/* cross-over */
				reject_ind_ext_send(_radio.conn_curr,
    be36:	2223      	movs	r2, #35	; 0x23
    be38:	2116      	movs	r1, #22
    be3a:	0028      	movs	r0, r5
    be3c:	f7fd fa06 	bl	924c <reject_ind_ext_send>
    be40:	e477      	b.n	b732 <isr+0x123e>
				struct pdu_data_llctrl *c =
					&pdu_data_rx->payload.llctrl;
				struct pdu_data_llctrl_phy_req_rsp *p =
					&c->ctrldata.phy_req;

				_radio.conn_curr->llcp_phy.state =
    be42:	002b      	movs	r3, r5
    be44:	2403      	movs	r4, #3
    be46:	33be      	adds	r3, #190	; 0xbe
    be48:	7818      	ldrb	r0, [r3, #0]
    be4a:	4320      	orrs	r0, r4
    be4c:	7018      	strb	r0, [r3, #0]
					LLCP_PHY_STATE_UPD;

				if (_radio.conn_curr->llcp_phy.ack ==
    be4e:	428a      	cmp	r2, r1
    be50:	d11c      	bne.n	be8c <isr+0x1998>
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;
    be52:	0029      	movs	r1, r5
    be54:	3a01      	subs	r2, #1
    be56:	31bd      	adds	r1, #189	; 0xbd
    be58:	700a      	strb	r2, [r1, #0]

					_radio.conn_curr->llcp_phy.cmd = 0;
    be5a:	2102      	movs	r1, #2
    be5c:	785a      	ldrb	r2, [r3, #1]

					_radio.conn_curr->llcp_phy.tx =
    be5e:	201c      	movs	r0, #28

				if (_radio.conn_curr->llcp_phy.ack ==
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;

					_radio.conn_curr->llcp_phy.cmd = 0;
    be60:	438a      	bics	r2, r1
    be62:	705a      	strb	r2, [r3, #1]

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
    be64:	002a      	movs	r2, r5
    be66:	3232      	adds	r2, #50	; 0x32
    be68:	7811      	ldrb	r1, [r2, #0]
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
    be6a:	2207      	movs	r2, #7
    be6c:	400a      	ands	r2, r1
    be6e:	0091      	lsls	r1, r2, #2
    be70:	781a      	ldrb	r2, [r3, #0]
    be72:	4382      	bics	r2, r0
    be74:	430a      	orrs	r2, r1
    be76:	701a      	strb	r2, [r3, #0]
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
						_radio.conn_curr->phy_pref_rx;
    be78:	002a      	movs	r2, r5
    be7a:	3233      	adds	r2, #51	; 0x33
    be7c:	7812      	ldrb	r2, [r2, #0]

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
    be7e:	7818      	ldrb	r0, [r3, #0]
						_radio.conn_curr->phy_pref_rx;
    be80:	0752      	lsls	r2, r2, #29

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
    be82:	0e11      	lsrs	r1, r2, #24
    be84:	221f      	movs	r2, #31
    be86:	4002      	ands	r2, r0
    be88:	430a      	orrs	r2, r1
    be8a:	701a      	strb	r2, [r3, #0]
						_radio.conn_curr->phy_pref_rx;
				}

				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    be8c:	35be      	adds	r5, #190	; 0xbe
    be8e:	7829      	ldrb	r1, [r5, #0]
    be90:	7b7b      	ldrb	r3, [r7, #13]
    be92:	06ca      	lsls	r2, r1, #27
    be94:	0f52      	lsrs	r2, r2, #29
    be96:	4013      	ands	r3, r2
    be98:	009a      	lsls	r2, r3, #2
    be9a:	231c      	movs	r3, #28
    be9c:	4399      	bics	r1, r3
    be9e:	000b      	movs	r3, r1
    bea0:	4313      	orrs	r3, r2
    bea2:	702b      	strb	r3, [r5, #0]
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    bea4:	7b39      	ldrb	r1, [r7, #12]
    bea6:	095a      	lsrs	r2, r3, #5
    bea8:	400a      	ands	r2, r1
    beaa:	211f      	movs	r1, #31
    beac:	0152      	lsls	r2, r2, #5
    beae:	400b      	ands	r3, r1
    beb0:	4313      	orrs	r3, r2
    beb2:	e3cb      	b.n	c64c <isr+0x2158>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    beb4:	0030      	movs	r0, r6
    beb6:	3059      	adds	r0, #89	; 0x59
    beb8:	30ff      	adds	r0, #255	; 0xff
    beba:	f7fa fc39 	bl	6730 <mem_acquire>
    bebe:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    bec0:	d100      	bne.n	bec4 <isr+0x19d0>
    bec2:	e3b3      	b.n	c62c <isr+0x2138>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bec4:	2203      	movs	r2, #3
    bec6:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    bec8:	7142      	strb	r2, [r0, #5]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    beca:	4313      	orrs	r3, r2
    becc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    bece:	2317      	movs	r3, #23
    bed0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
		conn->phy_pref_tx;
    bed2:	002b      	movs	r3, r5
    bed4:	3332      	adds	r3, #50	; 0x32
    bed6:	781b      	ldrb	r3, [r3, #0]
    bed8:	075b      	lsls	r3, r3, #29
    beda:	0f5b      	lsrs	r3, r3, #29
	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
    bedc:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_tx;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
		conn->phy_pref_rx;
    bede:	002b      	movs	r3, r5
    bee0:	3333      	adds	r3, #51	; 0x33
    bee2:	781b      	ldrb	r3, [r3, #0]
    bee4:	075b      	lsls	r3, r3, #29
    bee6:	0f5b      	lsrs	r3, r3, #29
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
		conn->phy_pref_tx;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
    bee8:	7243      	strb	r3, [r0, #9]
		conn->phy_pref_rx;

	ctrl_tx_enqueue(conn, node_tx);
    beea:	0028      	movs	r0, r5
    beec:	f7fd f938 	bl	9160 <ctrl_tx_enqueue>
    bef0:	e41f      	b.n	b732 <isr+0x123e>
			phy_rsp_send(_radio.conn_curr);
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
    bef2:	7bf3      	ldrb	r3, [r6, #15]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    bef4:	2400      	movs	r4, #0
			phy_rsp_send(_radio.conn_curr);
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
    bef6:	2b04      	cmp	r3, #4
    bef8:	d000      	beq.n	befc <isr+0x1a08>
    befa:	e0dd      	b.n	c0b8 <isr+0x1bc4>
    befc:	002b      	movs	r3, r5
    befe:	33bd      	adds	r3, #189	; 0xbd
    bf00:	781a      	ldrb	r2, [r3, #0]
    bf02:	3b01      	subs	r3, #1
    bf04:	781b      	ldrb	r3, [r3, #0]
    bf06:	429a      	cmp	r2, r3
    bf08:	d100      	bne.n	bf0c <isr+0x1a18>
    bf0a:	e0d5      	b.n	c0b8 <isr+0x1bc4>
		    (_radio.conn_curr->llcp_phy.ack !=
		     _radio.conn_curr->llcp_phy.req) &&
		    (_radio.conn_curr->llcp_phy.state ==
    bf0c:	0029      	movs	r1, r5
    bf0e:	31be      	adds	r1, #190	; 0xbe
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
		    (_radio.conn_curr->llcp_phy.ack !=
		     _radio.conn_curr->llcp_phy.req) &&
    bf10:	780b      	ldrb	r3, [r1, #0]
    bf12:	2003      	movs	r0, #3
    bf14:	001a      	movs	r2, r3
    bf16:	4002      	ands	r2, r0
    bf18:	2a02      	cmp	r2, #2
    bf1a:	d000      	beq.n	bf1e <isr+0x1a2a>
    bf1c:	e0cc      	b.n	c0b8 <isr+0x1bc4>
		    (_radio.conn_curr->llcp_phy.state ==
		     LLCP_PHY_STATE_RSP_WAIT)) {
			struct pdu_data_llctrl_phy_req_rsp *p =
				&pdu_data_rx->payload.llctrl.ctrldata.phy_rsp;

			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    bf1e:	4318      	orrs	r0, r3
    bf20:	7008      	strb	r0, [r1, #0]

			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    bf22:	7b7b      	ldrb	r3, [r7, #13]
    bf24:	06c2      	lsls	r2, r0, #27
    bf26:	0f52      	lsrs	r2, r2, #29
    bf28:	401a      	ands	r2, r3
    bf2a:	231c      	movs	r3, #28
    bf2c:	4398      	bics	r0, r3
    bf2e:	0003      	movs	r3, r0
    bf30:	0092      	lsls	r2, r2, #2
    bf32:	4313      	orrs	r3, r2
    bf34:	700b      	strb	r3, [r1, #0]
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    bf36:	7b38      	ldrb	r0, [r7, #12]
    bf38:	095a      	lsrs	r2, r3, #5
    bf3a:	4002      	ands	r2, r0
    bf3c:	201f      	movs	r0, #31
    bf3e:	0152      	lsls	r2, r2, #5
    bf40:	4003      	ands	r3, r0
    bf42:	4313      	orrs	r3, r2
    bf44:	700b      	strb	r3, [r1, #0]

			/* Procedure timeout is stopped */
			_radio.conn_curr->procedure_expire = 0;
    bf46:	876c      	strh	r4, [r5, #58]	; 0x3a
    bf48:	e0b6      	b.n	c0b8 <isr+0x1bc4>

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	p = &pdu_data_rx->payload.llctrl.ctrldata.phy_upd_ind;

	/* Both tx and rx PHY unchanged */
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
    bf4a:	7b3a      	ldrb	r2, [r7, #12]
    bf4c:	7b7b      	ldrb	r3, [r7, #13]
    bf4e:	4313      	orrs	r3, r2
    bf50:	2207      	movs	r2, #7
    bf52:	4013      	ands	r3, r2
    bf54:	d125      	bne.n	bfa2 <isr+0x1aae>
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    bf56:	002a      	movs	r2, r5
    bf58:	0029      	movs	r1, r5
    bf5a:	32bc      	adds	r2, #188	; 0xbc
    bf5c:	31bd      	adds	r1, #189	; 0xbd
    bf5e:	7810      	ldrb	r0, [r2, #0]
    bf60:	780a      	ldrb	r2, [r1, #0]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    bf62:	001c      	movs	r4, r3
	/* Both tx and rx PHY unchanged */
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    bf64:	4282      	cmp	r2, r0
    bf66:	d100      	bne.n	bf6a <isr+0x1a76>
    bf68:	e0a6      	b.n	c0b8 <isr+0x1bc4>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT) ||
    bf6a:	002a      	movs	r2, r5
    bf6c:	32be      	adds	r2, #190	; 0xbe
    bf6e:	8814      	ldrh	r4, [r2, #0]
    bf70:	4e42      	ldr	r6, [pc, #264]	; (c07c <isr+0x1b88>)
    bf72:	4a43      	ldr	r2, [pc, #268]	; (c080 <isr+0x1b8c>)
    bf74:	4022      	ands	r2, r4
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    bf76:	001c      	movs	r4, r3
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT) ||
    bf78:	42b2      	cmp	r2, r6
    bf7a:	d000      	beq.n	bf7e <isr+0x1a8a>
    bf7c:	e09c      	b.n	c0b8 <isr+0x1bc4>
		    (!conn->llcp_phy.cmd)) {
			return 0;
		}

		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
    bf7e:	7008      	strb	r0, [r1, #0]
		conn->procedure_expire = 0;
    bf80:	876b      	strh	r3, [r5, #58]	; 0x3a

		/* generate phy update complete event */
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    bf82:	330c      	adds	r3, #12
    bf84:	713b      	strb	r3, [r7, #4]

		p = (struct radio_le_phy_upd_cmplt *)&pdu_data_rx->payload;
		p->status = 0;
    bf86:	72fc      	strb	r4, [r7, #11]
		p->tx = conn->phy_tx;
    bf88:	002b      	movs	r3, r5
    bf8a:	3332      	adds	r3, #50	; 0x32
    bf8c:	781b      	ldrb	r3, [r3, #0]
		p->rx = conn->phy_rx;
    bf8e:	3533      	adds	r5, #51	; 0x33
		/* generate phy update complete event */
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;

		p = (struct radio_le_phy_upd_cmplt *)&pdu_data_rx->payload;
		p->status = 0;
		p->tx = conn->phy_tx;
    bf90:	069b      	lsls	r3, r3, #26
    bf92:	0f5b      	lsrs	r3, r3, #29
    bf94:	733b      	strb	r3, [r7, #12]
		p->rx = conn->phy_rx;
    bf96:	782b      	ldrb	r3, [r5, #0]
    bf98:	069b      	lsls	r3, r3, #26
    bf9a:	0f5b      	lsrs	r3, r3, #29
    bf9c:	737b      	strb	r3, [r7, #13]

		/* enqueue the phy update complete */
		*rx_enqueue = 1;
    bf9e:	3401      	adds	r4, #1
    bfa0:	e08a      	b.n	c0b8 <isr+0x1bc4>

		return 0;
	}

	/* instant passed */
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    bfa2:	7bfb      	ldrb	r3, [r7, #15]
    bfa4:	7bba      	ldrb	r2, [r7, #14]
    bfa6:	021b      	lsls	r3, r3, #8
    bfa8:	4313      	orrs	r3, r2
    bfaa:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    bfac:	1a9b      	subs	r3, r3, r2
    bfae:	4a35      	ldr	r2, [pc, #212]	; (c084 <isr+0x1b90>)
    bfb0:	b29b      	uxth	r3, r3
    bfb2:	4293      	cmp	r3, r2
    bfb4:	dd00      	ble.n	bfb8 <isr+0x1ac4>
    bfb6:	e347      	b.n	c648 <isr+0x2154>
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    bfb8:	002b      	movs	r3, r5
    bfba:	3368      	adds	r3, #104	; 0x68
    bfbc:	7819      	ldrb	r1, [r3, #0]
    bfbe:	3301      	adds	r3, #1
    bfc0:	781b      	ldrb	r3, [r3, #0]
    bfc2:	428b      	cmp	r3, r1
    bfc4:	d000      	beq.n	bfc8 <isr+0x1ad4>
    bfc6:	e331      	b.n	c62c <isr+0x2138>

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    bfc8:	002b      	movs	r3, r5
    bfca:	33bc      	adds	r3, #188	; 0xbc
    bfcc:	781a      	ldrb	r2, [r3, #0]
    bfce:	7858      	ldrb	r0, [r3, #1]
    bfd0:	3301      	adds	r3, #1
    bfd2:	4290      	cmp	r0, r2
    bfd4:	d012      	beq.n	bffc <isr+0x1b08>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    bfd6:	0028      	movs	r0, r5
    bfd8:	30be      	adds	r0, #190	; 0xbe
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    bfda:	7804      	ldrb	r4, [r0, #0]
    bfdc:	2003      	movs	r0, #3
    bfde:	4004      	ands	r4, r0
    bfe0:	2c02      	cmp	r4, #2
    bfe2:	d10b      	bne.n	bffc <isr+0x1b08>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
		conn->llcp_phy.ack = conn->llcp_phy.req;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    bfe4:	0028      	movs	r0, r5

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
		conn->llcp_phy.ack = conn->llcp_phy.req;
    bfe6:	701a      	strb	r2, [r3, #0]
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    bfe8:	789a      	ldrb	r2, [r3, #2]
    bfea:	2302      	movs	r3, #2
    bfec:	306c      	adds	r0, #108	; 0x6c
    bfee:	4013      	ands	r3, r2
    bff0:	7802      	ldrb	r2, [r0, #0]
    bff2:	43a2      	bics	r2, r4
    bff4:	4313      	orrs	r3, r2
    bff6:	7003      	strb	r3, [r0, #0]

		/* Procedure complete, just wait for instant */
		conn->procedure_expire = 0;
    bff8:	2300      	movs	r3, #0
    bffa:	876b      	strh	r3, [r5, #58]	; 0x3a
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
    bffc:	002a      	movs	r2, r5
    bffe:	2407      	movs	r4, #7
    c000:	261c      	movs	r6, #28
    c002:	7b7b      	ldrb	r3, [r7, #13]
    c004:	326c      	adds	r2, #108	; 0x6c
    c006:	7810      	ldrb	r0, [r2, #0]
    c008:	4023      	ands	r3, r4
    c00a:	43b0      	bics	r0, r6
    c00c:	009b      	lsls	r3, r3, #2
    c00e:	4303      	orrs	r3, r0
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
    c010:	201f      	movs	r0, #31

		/* Procedure complete, just wait for instant */
		conn->procedure_expire = 0;
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
    c012:	7013      	strb	r3, [r2, #0]
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
    c014:	7b3b      	ldrb	r3, [r7, #12]
    c016:	7816      	ldrb	r6, [r2, #0]
    c018:	015b      	lsls	r3, r3, #5
    c01a:	4030      	ands	r0, r6
    c01c:	4303      	orrs	r3, r0
    c01e:	7013      	strb	r3, [r2, #0]
	conn->llcp.phy_upd_ind.instant = p->instant;
    c020:	7bfb      	ldrb	r3, [r7, #15]
    c022:	7bb8      	ldrb	r0, [r7, #14]
    c024:	021b      	lsls	r3, r3, #8
    c026:	4303      	orrs	r3, r0
    c028:	0028      	movs	r0, r5
    c02a:	306e      	adds	r0, #110	; 0x6e
    c02c:	8003      	strh	r3, [r0, #0]
	conn->llcp.phy_upd_ind.initiate = 0;
    c02e:	2001      	movs	r0, #1
    c030:	7813      	ldrb	r3, [r2, #0]

	conn->llcp_type = LLCP_PHY_UPD;
	conn->llcp_ack--;
    c032:	3901      	subs	r1, #1
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
	conn->llcp.phy_upd_ind.instant = p->instant;
	conn->llcp.phy_upd_ind.initiate = 0;
    c034:	4383      	bics	r3, r0
    c036:	7013      	strb	r3, [r2, #0]

	conn->llcp_type = LLCP_PHY_UPD;
    c038:	002b      	movs	r3, r5
	conn->llcp_ack--;
    c03a:	3569      	adds	r5, #105	; 0x69
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
	conn->llcp.phy_upd_ind.instant = p->instant;
	conn->llcp.phy_upd_ind.initiate = 0;

	conn->llcp_type = LLCP_PHY_UPD;
    c03c:	336a      	adds	r3, #106	; 0x6a
    c03e:	701c      	strb	r4, [r3, #0]
	conn->llcp_ack--;
    c040:	7029      	strb	r1, [r5, #0]
    c042:	f7ff fb76 	bl	b732 <isr+0x123e>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c046:	0030      	movs	r0, r6
    c048:	3059      	adds	r0, #89	; 0x59
    c04a:	30ff      	adds	r0, #255	; 0xff
    c04c:	f7fa fb70 	bl	6730 <mem_acquire>
    c050:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    c052:	d100      	bne.n	c056 <isr+0x1b62>
    c054:	e2ea      	b.n	c62c <isr+0x2138>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c056:	2203      	movs	r2, #3
    c058:	7903      	ldrb	r3, [r0, #4]
    c05a:	4313      	orrs	r3, r2
    c05c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    c05e:	2302      	movs	r3, #2
    c060:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_unknown_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    c062:	3305      	adds	r3, #5
    c064:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
    c066:	466b      	mov	r3, sp
    c068:	322d      	adds	r2, #45	; 0x2d
    c06a:	189b      	adds	r3, r3, r2
    c06c:	781b      	ldrb	r3, [r3, #0]
    c06e:	7203      	strb	r3, [r0, #8]

	ctrl_tx_enqueue(conn, node_tx);
    c070:	0028      	movs	r0, r5
    c072:	f7fd f875 	bl	9160 <ctrl_tx_enqueue>
    c076:	e01f      	b.n	c0b8 <isr+0x1bc4>
    c078:	20000ea0 	.word	0x20000ea0
    c07c:	00000202 	.word	0x00000202
    c080:	00000203 	.word	0x00000203
    c084:	00007fff 	.word	0x00007fff
				LL_ASSERT(0);
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		} else if ((_radio.conn_curr->enc_rx) ||
    c088:	0030      	movs	r0, r6
    c08a:	30fc      	adds	r0, #252	; 0xfc
    c08c:	6943      	ldr	r3, [r0, #20]
    c08e:	001a      	movs	r2, r3
    c090:	32c0      	adds	r2, #192	; 0xc0
    c092:	7814      	ldrb	r4, [r2, #0]
    c094:	2214      	movs	r2, #20
    c096:	4014      	ands	r4, r2
    c098:	d100      	bne.n	c09c <isr+0x1ba8>
    c09a:	e2db      	b.n	c654 <isr+0x2160>
			   (_radio.conn_curr->pause_rx)) {
			/* start authenticated payload (pre) timeout */
			if (_radio.conn_curr->apto_expire == 0) {
    c09c:	1d1a      	adds	r2, r3, #4
    c09e:	8fd4      	ldrh	r4, [r2, #62]	; 0x3e
    c0a0:	2c00      	cmp	r4, #0
    c0a2:	d000      	beq.n	c0a6 <isr+0x1bb2>
    c0a4:	e2d5      	b.n	c652 <isr+0x215e>
				_radio.conn_curr->appto_expire =
    c0a6:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
					_radio.conn_curr->appto_reload;
				_radio.conn_curr->apto_expire =
					_radio.conn_curr->apto_reload;
    c0a8:	3302      	adds	r3, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		} else if ((_radio.conn_curr->enc_rx) ||
			   (_radio.conn_curr->pause_rx)) {
			/* start authenticated payload (pre) timeout */
			if (_radio.conn_curr->apto_expire == 0) {
				_radio.conn_curr->appto_expire =
    c0aa:	8799      	strh	r1, [r3, #60]	; 0x3c
					_radio.conn_curr->appto_reload;
				_radio.conn_curr->apto_expire =
    c0ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
    c0ae:	87d3      	strh	r3, [r2, #62]	; 0x3e
    c0b0:	e2d0      	b.n	c654 <isr+0x2160>
			}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		}

		if (!nack) {
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	d000      	beq.n	c0b8 <isr+0x1bc4>
    c0b6:	e2d6      	b.n	c666 <isr+0x2172>
			_radio.conn_curr->nesn++;
    c0b8:	4bc5      	ldr	r3, [pc, #788]	; (c3d0 <isr+0x1edc>)
    c0ba:	33fc      	adds	r3, #252	; 0xfc
    c0bc:	695d      	ldr	r5, [r3, #20]
    c0be:	2302      	movs	r3, #2
    c0c0:	002a      	movs	r2, r5
    c0c2:	32c0      	adds	r2, #192	; 0xc0
    c0c4:	7811      	ldrb	r1, [r2, #0]
    c0c6:	404b      	eors	r3, r1
    c0c8:	7013      	strb	r3, [r2, #0]

			if (ccm_rx_increment) {
    c0ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c0cc:	2b00      	cmp	r3, #0
    c0ce:	d100      	bne.n	c0d2 <isr+0x1bde>
    c0d0:	e2c9      	b.n	c666 <isr+0x2172>
				_radio.conn_curr->ccm_rx.counter++;
    c0d2:	002b      	movs	r3, r5
    c0d4:	002e      	movs	r6, r5
    c0d6:	33d0      	adds	r3, #208	; 0xd0
    c0d8:	36d4      	adds	r6, #212	; 0xd4
    c0da:	681b      	ldr	r3, [r3, #0]
    c0dc:	7832      	ldrb	r2, [r6, #0]
    c0de:	0a1b      	lsrs	r3, r3, #8
    c0e0:	0612      	lsls	r2, r2, #24
    c0e2:	431a      	orrs	r2, r3
    c0e4:	0010      	movs	r0, r2
    c0e6:	002a      	movs	r2, r5
    c0e8:	32d8      	adds	r2, #216	; 0xd8
    c0ea:	6833      	ldr	r3, [r6, #0]
    c0ec:	7812      	ldrb	r2, [r2, #0]
    c0ee:	0a1b      	lsrs	r3, r3, #8
    c0f0:	0612      	lsls	r2, r2, #24
    c0f2:	431a      	orrs	r2, r3
    c0f4:	0011      	movs	r1, r2
    c0f6:	2300      	movs	r3, #0
    c0f8:	2201      	movs	r2, #1
    c0fa:	1812      	adds	r2, r2, r0
    c0fc:	414b      	adcs	r3, r1
    c0fe:	920a      	str	r2, [sp, #40]	; 0x28
    c100:	930b      	str	r3, [sp, #44]	; 0x2c
    c102:	2228      	movs	r2, #40	; 0x28
    c104:	466b      	mov	r3, sp
    c106:	189b      	adds	r3, r3, r2
    c108:	781b      	ldrb	r3, [r3, #0]
    c10a:	35d1      	adds	r5, #209	; 0xd1
    c10c:	702b      	strb	r3, [r5, #0]
    c10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c110:	0a19      	lsrs	r1, r3, #8
    c112:	0e1a      	lsrs	r2, r3, #24
    c114:	7069      	strb	r1, [r5, #1]
    c116:	70ea      	strb	r2, [r5, #3]
    c118:	0c19      	lsrs	r1, r3, #16
    c11a:	222c      	movs	r2, #44	; 0x2c
    c11c:	466b      	mov	r3, sp
    c11e:	189b      	adds	r3, r3, r2
    c120:	781b      	ldrb	r3, [r3, #0]
    c122:	70a9      	strb	r1, [r5, #2]
    c124:	712b      	strb	r3, [r5, #4]
    c126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c128:	0a1a      	lsrs	r2, r3, #8
    c12a:	716a      	strb	r2, [r5, #5]
    c12c:	0c1a      	lsrs	r2, r3, #16
    c12e:	0e1b      	lsrs	r3, r3, #24
    c130:	71aa      	strb	r2, [r5, #6]
    c132:	71eb      	strb	r3, [r5, #7]
    c134:	e297      	b.n	c666 <isr+0x2172>
		if (terminate) {
			goto isr_rx_conn_exit;
		}
	} else {
		/* Start CRC error countdown, if not already started */
		if (_radio.crc_expire == 0) {
    c136:	7d93      	ldrb	r3, [r2, #22]
    c138:	2b00      	cmp	r3, #0
    c13a:	d101      	bne.n	c140 <isr+0x1c4c>
			_radio.crc_expire = 2;
    c13c:	3302      	adds	r3, #2
    c13e:	7593      	strb	r3, [r2, #22]
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
    c140:	0030      	movs	r0, r6
    c142:	30ff      	adds	r0, #255	; 0xff
    c144:	7d86      	ldrb	r6, [r0, #22]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    c146:	2400      	movs	r4, #0
		if (_radio.crc_expire == 0) {
			_radio.crc_expire = 2;
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
    c148:	3e01      	subs	r6, #1
    c14a:	b2f3      	uxtb	r3, r6
    c14c:	7583      	strb	r3, [r0, #22]
		crc_close = (_radio.crc_expire == 0);
    c14e:	425e      	negs	r6, r3
    c150:	415e      	adcs	r6, r3
    c152:	b2f3      	uxtb	r3, r6
    c154:	930c      	str	r3, [sp, #48]	; 0x30

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    c156:	940e      	str	r4, [sp, #56]	; 0x38
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    c158:	4d9d      	ldr	r5, [pc, #628]	; (c3d0 <isr+0x1edc>)
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    c15a:	a915      	add	r1, sp, #84	; 0x54
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    c15c:	002b      	movs	r3, r5
    c15e:	33fc      	adds	r3, #252	; 0xfc
    c160:	6958      	ldr	r0, [r3, #20]
    c162:	0003      	movs	r3, r0
    c164:	33c0      	adds	r3, #192	; 0xc0
    c166:	781b      	ldrb	r3, [r3, #0]
    c168:	09de      	lsrs	r6, r3, #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    c16a:	f7fc f931 	bl	83d0 <prepare_pdu_data_tx>
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    c16e:	7c2b      	ldrb	r3, [r5, #16]
    c170:	2b03      	cmp	r3, #3
    c172:	d015      	beq.n	c1a0 <isr+0x1cac>
    c174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c176:	2303      	movs	r3, #3
    c178:	2a00      	cmp	r2, #0
    c17a:	d111      	bne.n	c1a0 <isr+0x1cac>
    c17c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c17e:	2a00      	cmp	r2, #0
    c180:	d006      	beq.n	c190 <isr+0x1c9c>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    c182:	7a3a      	ldrb	r2, [r7, #8]
    c184:	06d2      	lsls	r2, r2, #27
    c186:	d403      	bmi.n	c190 <isr+0x1c9c>
    c188:	9a15      	ldr	r2, [sp, #84]	; 0x54
    c18a:	7852      	ldrb	r2, [r2, #1]
    c18c:	2a00      	cmp	r2, #0
    c18e:	d007      	beq.n	c1a0 <isr+0x1cac>
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
    c190:	002b      	movs	r3, r5
    c192:	33fc      	adds	r3, #252	; 0xfc
    c194:	695b      	ldr	r3, [r3, #20]
    c196:	33a7      	adds	r3, #167	; 0xa7

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
    c198:	781b      	ldrb	r3, [r3, #0]
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    c19a:	1e5a      	subs	r2, r3, #1
    c19c:	4193      	sbcs	r3, r2
    c19e:	3302      	adds	r3, #2
    c1a0:	742b      	strb	r3, [r5, #16]
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
			STATE_CLOSE : STATE_TX;

	if (_radio.state == STATE_CLOSE) {
    c1a2:	2b03      	cmp	r3, #3
    c1a4:	d111      	bne.n	c1ca <isr+0x1cd6>
		/* Event close for master */
		if (_radio.role == ROLE_MASTER) {
    c1a6:	7beb      	ldrb	r3, [r5, #15]
    c1a8:	2b04      	cmp	r3, #4
    c1aa:	d10b      	bne.n	c1c4 <isr+0x1cd0>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    c1ac:	227f      	movs	r2, #127	; 0x7f
    c1ae:	35fc      	adds	r5, #252	; 0xfc
    c1b0:	6969      	ldr	r1, [r5, #20]
    c1b2:	01f3      	lsls	r3, r6, #7
    c1b4:	31c0      	adds	r1, #192	; 0xc0
    c1b6:	7808      	ldrb	r0, [r1, #0]
    c1b8:	4002      	ands	r2, r0
    c1ba:	4313      	orrs	r3, r2
    c1bc:	700b      	strb	r3, [r1, #0]

			radio_disable();
    c1be:	f7fa fc91 	bl	6ae4 <radio_disable>
    c1c2:	e02a      	b.n	c21a <isr+0x1d26>

			goto isr_rx_conn_exit;
		}
		/* Event close for slave */
		else {
			radio_switch_complete_and_disable();
    c1c4:	f7fa fcf0 	bl	6ba8 <radio_switch_complete_and_disable>
    c1c8:	e00d      	b.n	c1e6 <isr+0x1cf2>
		}
	} else {	/* if (_radio.state == STATE_TX) */
		radio_tmr_tifs_set(RADIO_TIFS);
    c1ca:	2096      	movs	r0, #150	; 0x96
    c1cc:	f7fa fd80 	bl	6cd0 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    c1d0:	002b      	movs	r3, r5
    c1d2:	33fc      	adds	r3, #252	; 0xfc
    c1d4:	695b      	ldr	r3, [r3, #20]
    c1d6:	3333      	adds	r3, #51	; 0x33
    c1d8:	7818      	ldrb	r0, [r3, #0]
    c1da:	0680      	lsls	r0, r0, #26
    c1dc:	0f40      	lsrs	r0, r0, #29
    c1de:	f7fa fcd3 	bl	6b88 <radio_switch_complete_and_rx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_end_capture();
    c1e2:	f7fa fe41 	bl	6e68 <radio_tmr_end_capture>
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
    c1e6:	35fc      	adds	r5, #252	; 0xfc
    c1e8:	6968      	ldr	r0, [r5, #20]
    c1ea:	2301      	movs	r3, #1
    c1ec:	0006      	movs	r6, r0
    c1ee:	9915      	ldr	r1, [sp, #84]	; 0x54
    c1f0:	36c0      	adds	r6, #192	; 0xc0
    c1f2:	7832      	ldrb	r2, [r6, #0]
    c1f4:	780d      	ldrb	r5, [r1, #0]
    c1f6:	401a      	ands	r2, r3
    c1f8:	3307      	adds	r3, #7
    c1fa:	439d      	bics	r5, r3
    c1fc:	00d2      	lsls	r2, r2, #3
    c1fe:	432a      	orrs	r2, r5
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    c200:	2504      	movs	r5, #4

		radio_tmr_end_capture();
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
    c202:	700a      	strb	r2, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    c204:	7832      	ldrb	r2, [r6, #0]
    c206:	3b07      	subs	r3, #7
    c208:	0852      	lsrs	r2, r2, #1
    c20a:	4013      	ands	r3, r2
    c20c:	009a      	lsls	r2, r3, #2
    c20e:	780b      	ldrb	r3, [r1, #0]
    c210:	43ab      	bics	r3, r5
    c212:	4313      	orrs	r3, r2
    c214:	700b      	strb	r3, [r1, #0]

	/* setup the radio tx packet buffer */
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    c216:	f7fc f962 	bl	84de <tx_packet_set>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
    c21a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c21c:	2b00      	cmp	r3, #0
    c21e:	d006      	beq.n	c22e <isr+0x1d3a>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    c220:	4b6b      	ldr	r3, [pc, #428]	; (c3d0 <isr+0x1edc>)
    c222:	990e      	ldr	r1, [sp, #56]	; 0x38
    c224:	33fc      	adds	r3, #252	; 0xfc
    c226:	695b      	ldr	r3, [r3, #20]
    c228:	8c18      	ldrh	r0, [r3, #32]
    c22a:	f7fc faf9 	bl	8820 <pdu_node_tx_release>
	}

	/* enqueue any rx packet/event towards application */
	if (rx_enqueue) {
    c22e:	2c00      	cmp	r4, #0
    c230:	d100      	bne.n	c234 <isr+0x1d40>
    c232:	e242      	b.n	c6ba <isr+0x21c6>
		/* set data flow control lock on currently rx-ed connection */
		rx_fc_lock(_radio.conn_curr->handle);
    c234:	4c66      	ldr	r4, [pc, #408]	; (c3d0 <isr+0x1edc>)
    c236:	34fc      	adds	r4, #252	; 0xfc
    c238:	6963      	ldr	r3, [r4, #20]
    c23a:	8c18      	ldrh	r0, [r3, #32]
    c23c:	f7fc f978 	bl	8530 <rx_fc_lock>

		/* set the connection handle and enqueue */
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    c240:	6963      	ldr	r3, [r4, #20]
    c242:	8c1b      	ldrh	r3, [r3, #32]
    c244:	80fb      	strh	r3, [r7, #6]
		packet_rx_enqueue();
    c246:	f7fc f9ff 	bl	8648 <packet_rx_enqueue>
    c24a:	e236      	b.n	c6ba <isr+0x21c6>

static inline void isr_radio_state_close(void)
{
	u32_t dont_close = 0;

	switch (_radio.role) {
    c24c:	7bf0      	ldrb	r0, [r6, #15]
    c24e:	b2c0      	uxtb	r0, r0
    c250:	2804      	cmp	r0, #4
    c252:	d900      	bls.n	c256 <isr+0x1d62>
    c254:	e1ea      	b.n	c62c <isr+0x2138>
    c256:	f7f3 ffa3 	bl	1a0 <__gnu_thumb1_case_uhi>
    c25a:	01d8      	.short	0x01d8
    c25c:	003e0005 	.word	0x003e0005
    c260:	00740074 	.word	0x00740074

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
    c264:	2b03      	cmp	r3, #3
    c266:	d10a      	bne.n	c27e <isr+0x1d8a>
	    (_radio.advertiser.chan_map_current != 0)) {
    c268:	1d73      	adds	r3, r6, #5

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
    c26a:	7fda      	ldrb	r2, [r3, #31]
    c26c:	230e      	movs	r3, #14
    c26e:	421a      	tst	r2, r3
    c270:	d005      	beq.n	c27e <isr+0x1d8a>
	    (_radio.advertiser.chan_map_current != 0)) {
		dont_close = 1;

		adv_setup();
    c272:	f7fc fa67 	bl	8744 <adv_setup>

		radio_tx_enable();
    c276:	f7fa fc2f 	bl	6ad8 <radio_tx_enable>
    c27a:	f7fe ff1c 	bl	b0b6 <isr+0xbc2>

		radio_tmr_end_capture();
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();
    c27e:	f7fa fce7 	bl	6c50 <radio_filter_disable>

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
    c282:	7c33      	ldrb	r3, [r6, #16]
    c284:	2b03      	cmp	r3, #3
    c286:	d000      	beq.n	c28a <isr+0x1d96>
    c288:	e1f0      	b.n	c66c <isr+0x2178>
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
    c28a:	0033      	movs	r3, r6
    c28c:	3375      	adds	r3, #117	; 0x75
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
    c28e:	781a      	ldrb	r2, [r3, #0]
    c290:	2327      	movs	r3, #39	; 0x27
    c292:	4353      	muls	r3, r2
    c294:	3320      	adds	r3, #32
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
    c296:	18f3      	adds	r3, r6, r3

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
    c298:	79da      	ldrb	r2, [r3, #7]
    c29a:	230f      	movs	r3, #15
    c29c:	4013      	ands	r3, r2
    c29e:	2b01      	cmp	r3, #1
    c2a0:	d100      	bne.n	c2a4 <isr+0x1db0>
    c2a2:	e1e3      	b.n	c66c <isr+0x2178>
			 * condition where in the Adv role is being stopped but
			 * at the same time it is preempted by Adv event that
			 * gets into close state. Accept failure when Adv role
			 * is being stopped.
			 */
			ticker_status =
    c2a4:	4b4b      	ldr	r3, [pc, #300]	; (c3d4 <isr+0x1ee0>)
    c2a6:	2000      	movs	r0, #0
    c2a8:	9306      	str	r3, [sp, #24]
    c2aa:	4b4b      	ldr	r3, [pc, #300]	; (c3d8 <isr+0x1ee4>)
    c2ac:	9004      	str	r0, [sp, #16]
    c2ae:	9305      	str	r3, [sp, #20]
    c2b0:	2348      	movs	r3, #72	; 0x48
    c2b2:	9003      	str	r0, [sp, #12]
    c2b4:	33ff      	adds	r3, #255	; 0xff
    c2b6:	9002      	str	r0, [sp, #8]
    c2b8:	9001      	str	r0, [sp, #4]
    c2ba:	9000      	str	r0, [sp, #0]
    c2bc:	2205      	movs	r2, #5
    c2be:	0001      	movs	r1, r0
    c2c0:	f7fb fccc 	bl	7c5c <ticker_update>
					      TICKER_US_TO_TICKS(random_delay *
								 1000),
					      0, 0, 0, 0, 0,
					      ticker_update_adv_assert,
					      (void *)__LINE__);
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c2c4:	2302      	movs	r3, #2
    c2c6:	4398      	bics	r0, r3
    c2c8:	d100      	bne.n	c2cc <isr+0x1dd8>
    c2ca:	e1cf      	b.n	c66c <isr+0x2178>
    c2cc:	7bb3      	ldrb	r3, [r6, #14]
    c2ce:	2b05      	cmp	r3, #5
    c2d0:	d100      	bne.n	c2d4 <isr+0x1de0>
    c2d2:	e1cb      	b.n	c66c <isr+0x2178>
    c2d4:	e1aa      	b.n	c62c <isr+0x2138>

static inline u32_t isr_close_scan(void)
{
	u32_t dont_close = 0;

	if (_radio.state == STATE_CLOSE) {
    c2d6:	2b03      	cmp	r3, #3
    c2d8:	d125      	bne.n	c326 <isr+0x1e32>
		dont_close = 1;

		radio_tmr_tifs_set(RADIO_TIFS);
    c2da:	2096      	movs	r0, #150	; 0x96
    c2dc:	f7fa fcf8 	bl	6cd0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0);
    c2e0:	2100      	movs	r1, #0
    c2e2:	0008      	movs	r0, r1
    c2e4:	f7fa fc58 	bl	6b98 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    c2e8:	233e      	movs	r3, #62	; 0x3e
    c2ea:	0032      	movs	r2, r6
    c2ec:	33ff      	adds	r3, #255	; 0xff
    c2ee:	5cf3      	ldrb	r3, [r6, r3]
    c2f0:	32fc      	adds	r2, #252	; 0xfc
    c2f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    c2f4:	009b      	lsls	r3, r3, #2
    c2f6:	5898      	ldr	r0, [r3, r2]
    c2f8:	3008      	adds	r0, #8
    c2fa:	f7fa fbcf 	bl	6a9c <radio_pkt_rx_set>
					pdu_data);
		radio_rssi_measure();
    c2fe:	f7fa fc5b 	bl	6bb8 <radio_rssi_measure>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		if (ctrl_rl_enabled()) {
    c302:	f001 fb2b 	bl	d95c <ctrl_rl_enabled>
    c306:	2800      	cmp	r0, #0
    c308:	d007      	beq.n	c31a <isr+0x1e26>
			u8_t count, *irks = ctrl_irks_get(&count);
    c30a:	ac15      	add	r4, sp, #84	; 0x54
    c30c:	0020      	movs	r0, r4
    c30e:	f001 f9a1 	bl	d654 <ctrl_irks_get>
    c312:	0001      	movs	r1, r0

			radio_ar_configure(count, irks);
    c314:	7820      	ldrb	r0, [r4, #0]
    c316:	f7fa fe5d 	bl	6fd4 <radio_ar_configure>
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		_radio.state = STATE_RX;
    c31a:	2301      	movs	r3, #1
    c31c:	7433      	strb	r3, [r6, #16]

		radio_rx_enable();
    c31e:	f7fa fbd5 	bl	6acc <radio_rx_enable>
    c322:	f7fe fec8 	bl	b0b6 <isr+0xbc2>

		radio_tmr_end_capture();
	} else {
		radio_filter_disable();
    c326:	f7fa fc93 	bl	6c50 <radio_filter_disable>

		if (_radio.state == STATE_ABORT) {
    c32a:	7c33      	ldrb	r3, [r6, #16]
    c32c:	2b05      	cmp	r3, #5
    c32e:	d000      	beq.n	c332 <isr+0x1e3e>
    c330:	e19c      	b.n	c66c <isr+0x2178>
			/* Scanner stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c332:	2000      	movs	r0, #0
    c334:	2204      	movs	r2, #4
    c336:	9000      	str	r0, [sp, #0]
    c338:	0003      	movs	r3, r0
    c33a:	0001      	movs	r1, r0
    c33c:	f7fb fcde 	bl	7cfc <ticker_stop>
    c340:	e194      	b.n	c66c <isr+0x2178>
	u16_t elapsed_event;
	u16_t lazy;
	u8_t force;

	/* Local initiated terminate happened */
	if (_radio.conn_curr == 0) {
    c342:	0034      	movs	r4, r6
    c344:	34fc      	adds	r4, #252	; 0xfc
    c346:	6960      	ldr	r0, [r4, #20]
    c348:	2800      	cmp	r0, #0
    c34a:	d100      	bne.n	c34e <isr+0x1e5a>
    c34c:	e18e      	b.n	c66c <isr+0x2178>
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
    c34e:	7bf3      	ldrb	r3, [r6, #15]
    c350:	2b03      	cmp	r3, #3
    c352:	d107      	bne.n	c364 <isr+0x1e70>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
    c354:	0003      	movs	r3, r0
    c356:	33a7      	adds	r3, #167	; 0xa7
    c358:	7819      	ldrb	r1, [r3, #0]
	if (_radio.conn_curr == 0) {
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
    c35a:	2900      	cmp	r1, #0
    c35c:	d002      	beq.n	c364 <isr+0x1e70>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
    c35e:	f7fc f951 	bl	8604 <terminate_ind_rx_enqueue>
    c362:	e097      	b.n	c494 <isr+0x1fa0>
		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
    c364:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    c366:	930e      	str	r3, [sp, #56]	; 0x38
	elapsed_event = latency_event + 1;
    c368:	1c5c      	adds	r4, r3, #1

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
    c36a:	0033      	movs	r3, r6
    c36c:	33ff      	adds	r3, #255	; 0xff
    c36e:	7d5d      	ldrb	r5, [r3, #21]
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;
    c370:	b2a4      	uxth	r4, r4

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
    c372:	7bf3      	ldrb	r3, [r6, #15]
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
    c374:	2d00      	cmp	r5, #0
    c376:	d06b      	beq.n	c450 <isr+0x1f5c>
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
    c378:	2b03      	cmp	r3, #3
    c37a:	d15f      	bne.n	c43c <isr+0x1f48>
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
    c37c:	f7fa fd68 	bl	6e50 <radio_tmr_aa_get>
    c380:	0007      	movs	r7, r0
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
    c382:	0030      	movs	r0, r6
    c384:	30fc      	adds	r0, #252	; 0xfc
    c386:	6945      	ldr	r5, [r0, #20]
	switch (phy) {
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
    c388:	2618      	movs	r6, #24
			start_to_address_actual_us = radio_tmr_aa_get();
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
    c38a:	002b      	movs	r3, r5
    c38c:	3333      	adds	r3, #51	; 0x33
    c38e:	781b      	ldrb	r3, [r3, #0]
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
			window_widening_event_us =
    c390:	6d68      	ldr	r0, [r5, #84]	; 0x54
				_radio.conn_curr->role.slave.window_widening_event_us;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
    c392:	069b      	lsls	r3, r3, #26
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    c394:	0f5b      	lsrs	r3, r3, #29
    c396:	2b02      	cmp	r3, #2
    c398:	d005      	beq.n	c3a6 <isr+0x1eb2>
    c39a:	2b04      	cmp	r3, #4
    c39c:	d102      	bne.n	c3a4 <isr+0x1eb0>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    c39e:	3661      	adds	r6, #97	; 0x61
    c3a0:	36ff      	adds	r6, #255	; 0xff
    c3a2:	e000      	b.n	c3a6 <isr+0x1eb2>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
    c3a4:	2628      	movs	r6, #40	; 0x28
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			preamble_to_addr_us = addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
    c3a6:	0003      	movs	r3, r0
    c3a8:	3320      	adds	r3, #32
    c3aa:	199b      	adds	r3, r3, r6
    c3ac:	930c      	str	r3, [sp, #48]	; 0x30
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
    c3ae:	4a0b      	ldr	r2, [pc, #44]	; (c3dc <isr+0x1ee8>)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
    c3b0:	429f      	cmp	r7, r3
    c3b2:	d817      	bhi.n	c3e4 <isr+0x1ef0>
			    start_to_address_expected_us) {
				ticks_drift_plus =
    c3b4:	2300      	movs	r3, #0
    c3b6:	2100      	movs	r1, #0
    c3b8:	f7f4 f89e 	bl	4f8 <__aeabi_lmul>
    c3bc:	2307      	movs	r3, #7
    c3be:	4a08      	ldr	r2, [pc, #32]	; (c3e0 <isr+0x1eec>)
    c3c0:	f7f4 f87a 	bl	4b8 <__aeabi_uldivmod>
    c3c4:	b283      	uxth	r3, r0
    c3c6:	930a      	str	r3, [sp, #40]	; 0x28
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
    c3c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c3ca:	1bd8      	subs	r0, r3, r7
    c3cc:	e017      	b.n	c3fe <isr+0x1f0a>
    c3ce:	46c0      	nop			; (mov r8, r8)
    c3d0:	20000ea0 	.word	0x20000ea0
    c3d4:	00000b62 	.word	0x00000b62
    c3d8:	00008d49 	.word	0x00008d49
    c3dc:	3b9aca00 	.word	0x3b9aca00
    c3e0:	1afd498d 	.word	0x1afd498d
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
    c3e4:	2300      	movs	r3, #0
    c3e6:	0038      	movs	r0, r7
    c3e8:	2100      	movs	r1, #0
    c3ea:	f7f4 f885 	bl	4f8 <__aeabi_lmul>
    c3ee:	2307      	movs	r3, #7
    c3f0:	4ab3      	ldr	r2, [pc, #716]	; (c6c0 <isr+0x21cc>)
    c3f2:	f7f4 f861 	bl	4b8 <__aeabi_uldivmod>
    c3f6:	b283      	uxth	r3, r0
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
    c3f8:	0030      	movs	r0, r6
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
    c3fa:	930a      	str	r3, [sp, #40]	; 0x28
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
    c3fc:	3020      	adds	r0, #32
    c3fe:	4ab1      	ldr	r2, [pc, #708]	; (c6c4 <isr+0x21d0>)
    c400:	2300      	movs	r3, #0
    c402:	2100      	movs	r1, #0
    c404:	f7f4 f878 	bl	4f8 <__aeabi_lmul>
    c408:	2307      	movs	r3, #7
    c40a:	4aad      	ldr	r2, [pc, #692]	; (c6c0 <isr+0x21cc>)
    c40c:	f7f4 f854 	bl	4b8 <__aeabi_uldivmod>
							   preamble_to_addr_us);
			}


			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
    c410:	2300      	movs	r3, #0
    c412:	656b      	str	r3, [r5, #84]	; 0x54
			_radio.conn_curr->role.slave.window_size_event_us = 0;
    c414:	65eb      	str	r3, [r5, #92]	; 0x5c

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
    c416:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
    c418:	b286      	uxth	r6, r0
			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
			_radio.conn_curr->role.slave.window_size_event_us = 0;

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
    c41a:	856b      	strh	r3, [r5, #42]	; 0x2a
			if (_radio.conn_curr->pkt_tx_head) {
    c41c:	002b      	movs	r3, r5
    c41e:	33fc      	adds	r3, #252	; 0xfc
    c420:	689b      	ldr	r3, [r3, #8]
    c422:	2b00      	cmp	r3, #0
    c424:	d00e      	beq.n	c444 <isr+0x1f50>
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
    c426:	795b      	ldrb	r3, [r3, #5]
    c428:	2b00      	cmp	r3, #0
    c42a:	d104      	bne.n	c436 <isr+0x1f42>
				    _radio.conn_curr->packet_tx_head_offset) {
    c42c:	002b      	movs	r3, r5
    c42e:	33ff      	adds	r3, #255	; 0xff
			if (_radio.conn_curr->pkt_tx_head) {
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
    c430:	7d9b      	ldrb	r3, [r3, #22]
    c432:	2b00      	cmp	r3, #0
    c434:	d006      	beq.n	c444 <isr+0x1f50>
				    _radio.conn_curr->packet_tx_head_offset) {
					_radio.conn_curr->latency_event = 0;
    c436:	2300      	movs	r3, #0
    c438:	856b      	strh	r3, [r5, #42]	; 0x2a
    c43a:	e003      	b.n	c444 <isr+0x1f50>
				}
			}
		} else {
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
    c43c:	2600      	movs	r6, #0
    c43e:	3045      	adds	r0, #69	; 0x45
    c440:	7006      	strb	r6, [r0, #0]
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
    c442:	960a      	str	r6, [sp, #40]	; 0x28
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
		}

		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
    c444:	2200      	movs	r2, #0
    c446:	4ba0      	ldr	r3, [pc, #640]	; (c6c8 <isr+0x21d4>)
    c448:	33fc      	adds	r3, #252	; 0xfc
    c44a:	695b      	ldr	r3, [r3, #20]
    c44c:	86da      	strh	r2, [r3, #54]	; 0x36
    c44e:	e02f      	b.n	c4b0 <isr+0x1fbc>
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
    c450:	2b04      	cmp	r3, #4
    c452:	d10d      	bne.n	c470 <isr+0x1f7c>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
    c454:	0003      	movs	r3, r0
    c456:	33a7      	adds	r3, #167	; 0xa7
    c458:	7819      	ldrb	r1, [r3, #0]
		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
    c45a:	2900      	cmp	r1, #0
    c45c:	d008      	beq.n	c470 <isr+0x1f7c>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    c45e:	0034      	movs	r4, r6
    c460:	34fc      	adds	r4, #252	; 0xfc
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
    c462:	f7fc f8cf 	bl	8604 <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    c466:	6960      	ldr	r0, [r4, #20]
    c468:	f7fc fa4a 	bl	8900 <connection_release>
		_radio.conn_curr = NULL;
    c46c:	6165      	str	r5, [r4, #20]
    c46e:	e0fd      	b.n	c66c <isr+0x2178>

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
    c470:	7bf3      	ldrb	r3, [r6, #15]
    c472:	2b04      	cmp	r3, #4
    c474:	d114      	bne.n	c4a0 <isr+0x1fac>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
    c476:	0002      	movs	r2, r0
    c478:	3245      	adds	r2, #69	; 0x45
    c47a:	7813      	ldrb	r3, [r2, #0]

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
    c47c:	2b00      	cmp	r3, #0
    c47e:	d00f      	beq.n	c4a0 <isr+0x1fac>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
		if (_radio.conn_curr->role.master.connect_expire >
    c480:	429c      	cmp	r4, r3
    c482:	d202      	bcs.n	c48a <isr+0x1f96>
		    elapsed_event) {
			_radio.conn_curr->role.master.connect_expire -= elapsed_event;
    c484:	1b1b      	subs	r3, r3, r4
    c486:	7013      	strb	r3, [r2, #0]
    c488:	e010      	b.n	c4ac <isr+0x1fb8>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    c48a:	213e      	movs	r1, #62	; 0x3e

			connection_release(_radio.conn_curr);
    c48c:	0034      	movs	r4, r6
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
		if (_radio.conn_curr->role.master.connect_expire >
		    elapsed_event) {
			_radio.conn_curr->role.master.connect_expire -= elapsed_event;
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    c48e:	f7fc f8b9 	bl	8604 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    c492:	34fc      	adds	r4, #252	; 0xfc
    c494:	6960      	ldr	r0, [r4, #20]
    c496:	f7fc fa33 	bl	8900 <connection_release>
			_radio.conn_curr = NULL;
    c49a:	2300      	movs	r3, #0
    c49c:	6163      	str	r3, [r4, #20]
    c49e:	e0e5      	b.n	c66c <isr+0x2178>
	/* if anchor point not sync-ed, start supervision timeout, and break
	 * latency if any.
	 */
	else {
		/* Start supervision timeout, if not started already */
		if (_radio.conn_curr->supervision_expire == 0) {
    c4a0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
    c4a2:	2e00      	cmp	r6, #0
    c4a4:	d102      	bne.n	c4ac <isr+0x1fb8>
			_radio.conn_curr->supervision_expire =
    c4a6:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    c4a8:	86c3      	strh	r3, [r0, #54]	; 0x36
    c4aa:	e000      	b.n	c4ae <isr+0x1fba>

		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
    c4ac:	2600      	movs	r6, #0
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
    c4ae:	960a      	str	r6, [sp, #40]	; 0x28
		}
	}

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
    c4b0:	4f85      	ldr	r7, [pc, #532]	; (c6c8 <isr+0x21d4>)
    c4b2:	003d      	movs	r5, r7
    c4b4:	35fc      	adds	r5, #252	; 0xfc
    c4b6:	6968      	ldr	r0, [r5, #20]
    c4b8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	d023      	beq.n	c506 <isr+0x2012>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    c4be:	429c      	cmp	r4, r3
    c4c0:	d218      	bcs.n	c4f4 <isr+0x2000>
			_radio.conn_curr->supervision_expire -= elapsed_event;

			/* break latency */
			_radio.conn_curr->latency_event = 0;
    c4c2:	2200      	movs	r2, #0

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
			_radio.conn_curr->supervision_expire -= elapsed_event;
    c4c4:	1b1b      	subs	r3, r3, r4
    c4c6:	b29b      	uxth	r3, r3
    c4c8:	86c3      	strh	r3, [r0, #54]	; 0x36

			/* break latency */
			_radio.conn_curr->latency_event = 0;
    c4ca:	8542      	strh	r2, [r0, #42]	; 0x2a

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
				force = 1;
    c4cc:	2501      	movs	r5, #1
			_radio.conn_curr->latency_event = 0;

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
    c4ce:	2b06      	cmp	r3, #6
    c4d0:	d91a      	bls.n	c508 <isr+0x2014>
				force = 1;
			}
			/* use randomness to force slave role when anchor
			 * points are being missed.
			 */
			else if (_radio.role == ROLE_SLAVE) {
    c4d2:	7bfb      	ldrb	r3, [r7, #15]
    c4d4:	2b03      	cmp	r3, #3
    c4d6:	d116      	bne.n	c506 <isr+0x2012>
				if (latency_event != 0) {
    c4d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c4da:	4293      	cmp	r3, r2
    c4dc:	d114      	bne.n	c508 <isr+0x2014>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;
    c4de:	6e02      	ldr	r2, [r0, #96]	; 0x60

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
    c4e0:	0853      	lsrs	r3, r2, #1
					if (force) {
    c4e2:	422a      	tst	r2, r5
    c4e4:	d101      	bne.n	c4ea <isr+0x1ff6>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
    c4e6:	6603      	str	r3, [r0, #96]	; 0x60
    c4e8:	e00d      	b.n	c506 <isr+0x2012>
					if (force) {
						_radio.conn_curr->role.slave.force |=
    c4ea:	2280      	movs	r2, #128	; 0x80
    c4ec:	0612      	lsls	r2, r2, #24
    c4ee:	4313      	orrs	r3, r2
    c4f0:	6603      	str	r3, [r0, #96]	; 0x60
    c4f2:	e009      	b.n	c508 <isr+0x2014>
							((u32_t)1 << 31);
					}
				}
			}
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    c4f4:	2108      	movs	r1, #8
    c4f6:	f7fc f885 	bl	8604 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    c4fa:	6968      	ldr	r0, [r5, #20]
    c4fc:	f7fc fa00 	bl	8900 <connection_release>
			_radio.conn_curr = NULL;
    c500:	2300      	movs	r3, #0
    c502:	616b      	str	r3, [r5, #20]
    c504:	e0b2      	b.n	c66c <isr+0x2178>
				_radio.conn_curr->supervision_reload;
		}
	}

	/* check supervision timeout */
	force = 0;
    c506:	2500      	movs	r5, #0
			return;
		}
	}

	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
    c508:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
    c50a:	2b00      	cmp	r3, #0
    c50c:	d00e      	beq.n	c52c <isr+0x2038>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    c50e:	429c      	cmp	r4, r3
    c510:	d202      	bcs.n	c518 <isr+0x2024>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    c512:	1b1b      	subs	r3, r3, r4
    c514:	8743      	strh	r3, [r0, #58]	; 0x3a
    c516:	e009      	b.n	c52c <isr+0x2038>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    c518:	2122      	movs	r1, #34	; 0x22

			connection_release(_radio.conn_curr);
    c51a:	37fc      	adds	r7, #252	; 0xfc
	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
			_radio.conn_curr->procedure_expire -= elapsed_event;
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    c51c:	f7fc f872 	bl	8604 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    c520:	6978      	ldr	r0, [r7, #20]
    c522:	f7fc f9ed 	bl	8900 <connection_release>
			_radio.conn_curr = NULL;
    c526:	2300      	movs	r3, #0
    c528:	617b      	str	r3, [r7, #20]
    c52a:	e09f      	b.n	c66c <isr+0x2178>
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
	/* check apto */
	if (_radio.conn_curr->apto_expire != 0) {
    c52c:	3004      	adds	r0, #4
    c52e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    c530:	2b00      	cmp	r3, #0
    c532:	d014      	beq.n	c55e <isr+0x206a>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    c534:	429c      	cmp	r4, r3
    c536:	d202      	bcs.n	c53e <isr+0x204a>
			_radio.conn_curr->apto_expire -= elapsed_event;
    c538:	1b1b      	subs	r3, r3, r4
    c53a:	87c3      	strh	r3, [r0, #62]	; 0x3e
    c53c:	e00f      	b.n	c55e <isr+0x206a>
		} else {
			struct radio_pdu_node_rx *radio_pdu_node_rx;

			_radio.conn_curr->apto_expire = 0;
    c53e:	2300      	movs	r3, #0
    c540:	87c3      	strh	r3, [r0, #62]	; 0x3e

			/* Prepare the rx packet structure */
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    c542:	2002      	movs	r0, #2
    c544:	f7fb fce8 	bl	7f18 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    c548:	2800      	cmp	r0, #0
    c54a:	d06f      	beq.n	c62c <isr+0x2138>

			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    c54c:	003b      	movs	r3, r7
    c54e:	33fc      	adds	r3, #252	; 0xfc
    c550:	695b      	ldr	r3, [r3, #20]
    c552:	8c1b      	ldrh	r3, [r3, #32]
    c554:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
    c556:	230a      	movs	r3, #10
    c558:	7103      	strb	r3, [r0, #4]

			/* enqueue apto event into rx queue */
			packet_rx_enqueue();
    c55a:	f7fc f875 	bl	8648 <packet_rx_enqueue>
		}
	}

	/* check appto */
	if (_radio.conn_curr->appto_expire != 0) {
    c55e:	003b      	movs	r3, r7
    c560:	33fc      	adds	r3, #252	; 0xfc
    c562:	695b      	ldr	r3, [r3, #20]
    c564:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    c566:	2a00      	cmp	r2, #0
    c568:	d017      	beq.n	c59a <isr+0x20a6>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    c56a:	4294      	cmp	r4, r2
    c56c:	d202      	bcs.n	c574 <isr+0x2080>
			_radio.conn_curr->appto_expire -= elapsed_event;
    c56e:	1b14      	subs	r4, r2, r4
    c570:	87dc      	strh	r4, [r3, #62]	; 0x3e
    c572:	e012      	b.n	c59a <isr+0x20a6>
		} else {
			_radio.conn_curr->appto_expire = 0;
    c574:	2200      	movs	r2, #0
    c576:	87da      	strh	r2, [r3, #62]	; 0x3e

			if ((_radio.conn_curr->procedure_expire == 0) &&
    c578:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
    c57a:	2a00      	cmp	r2, #0
    c57c:	d10d      	bne.n	c59a <isr+0x20a6>
			    (_radio.conn_curr->llcp_req ==
    c57e:	001a      	movs	r2, r3
			     _radio.conn_curr->llcp_ack)) {
    c580:	0018      	movs	r0, r3
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
    c582:	3268      	adds	r2, #104	; 0x68
			     _radio.conn_curr->llcp_ack)) {
    c584:	3069      	adds	r0, #105	; 0x69
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
    c586:	7811      	ldrb	r1, [r2, #0]
		if (_radio.conn_curr->appto_expire > elapsed_event) {
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
    c588:	7802      	ldrb	r2, [r0, #0]
    c58a:	428a      	cmp	r2, r1
    c58c:	d10c      	bne.n	c5a8 <isr+0x20b4>
			    (_radio.conn_curr->llcp_req ==
			     _radio.conn_curr->llcp_ack)) {
				_radio.conn_curr->llcp_type = LLCP_PING;
    c58e:	0019      	movs	r1, r3
    c590:	2406      	movs	r4, #6
    c592:	316a      	adds	r1, #106	; 0x6a
				_radio.conn_curr->llcp_ack--;
    c594:	3a01      	subs	r2, #1
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
			     _radio.conn_curr->llcp_ack)) {
				_radio.conn_curr->llcp_type = LLCP_PING;
    c596:	700c      	strb	r4, [r1, #0]
				_radio.conn_curr->llcp_ack--;
    c598:	7002      	strb	r2, [r0, #0]
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    c59a:	001a      	movs	r2, r3
    c59c:	3269      	adds	r2, #105	; 0x69
    c59e:	7811      	ldrb	r1, [r2, #0]
    c5a0:	3a01      	subs	r2, #1
    c5a2:	7812      	ldrb	r2, [r2, #0]
    c5a4:	4291      	cmp	r1, r2
    c5a6:	d007      	beq.n	c5b8 <isr+0x20c4>
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
    c5a8:	001a      	movs	r2, r3
    c5aa:	326a      	adds	r2, #106	; 0x6a
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    c5ac:	7812      	ldrb	r2, [r2, #0]
    c5ae:	3a01      	subs	r2, #1
    c5b0:	2a01      	cmp	r2, #1
    c5b2:	d801      	bhi.n	c5b8 <isr+0x20c4>
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
    c5b4:	2200      	movs	r2, #0
    c5b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    c5b8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	}

	/* check if latency needs update */
	lazy = 0;
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    c5ba:	2d00      	cmp	r5, #0
    c5bc:	d103      	bne.n	c5c6 <isr+0x20d2>
    c5be:	980e      	ldr	r0, [sp, #56]	; 0x38
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
	}

	/* check if latency needs update */
	lazy = 0;
    c5c0:	0029      	movs	r1, r5
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    c5c2:	4282      	cmp	r2, r0
    c5c4:	d001      	beq.n	c5ca <isr+0x20d6>
		lazy = _radio.conn_curr->latency_event + 1;
    c5c6:	3201      	adds	r2, #1
    c5c8:	b291      	uxth	r1, r2
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    c5ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c5cc:	4332      	orrs	r2, r6
    c5ce:	430a      	orrs	r2, r1
    c5d0:	b292      	uxth	r2, r2
    c5d2:	2a00      	cmp	r2, #0
    c5d4:	d101      	bne.n	c5da <isr+0x20e6>
	    (lazy != 0) || (force != 0)) {
    c5d6:	2d00      	cmp	r5, #0
    c5d8:	d048      	beq.n	c66c <isr+0x2178>
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    c5da:	2000      	movs	r0, #0
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    c5dc:	8c1c      	ldrh	r4, [r3, #32]
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    c5de:	4b3b      	ldr	r3, [pc, #236]	; (c6cc <isr+0x21d8>)
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    c5e0:	3407      	adds	r4, #7
    c5e2:	b2e4      	uxtb	r4, r4
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
    c5e4:	9305      	str	r3, [sp, #20]
    c5e6:	9103      	str	r1, [sp, #12]
    c5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5ea:	9406      	str	r4, [sp, #24]
    c5ec:	9504      	str	r5, [sp, #16]
    c5ee:	9002      	str	r0, [sp, #8]
    c5f0:	9001      	str	r0, [sp, #4]
    c5f2:	9600      	str	r6, [sp, #0]
    c5f4:	0022      	movs	r2, r4
    c5f6:	0001      	movs	r1, r0
    c5f8:	f7fb fb30 	bl	7c5c <ticker_update>
				      RADIO_TICKER_USER_ID_WORKER,
				      ticker_id,
				      ticks_drift_plus, ticks_drift_minus, 0, 0,
				      lazy, force, ticker_update_slave_assert,
				      (void *)(u32_t)ticker_id);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c5fc:	2302      	movs	r3, #2
    c5fe:	4398      	bics	r0, r3
    c600:	d034      	beq.n	c66c <isr+0x2178>
    c602:	7bbb      	ldrb	r3, [r7, #14]
    c604:	429c      	cmp	r4, r3
    c606:	d031      	beq.n	c66c <isr+0x2178>
    c608:	e010      	b.n	c62c <isr+0x2138>
		 * no active role at that instance in time.
		 * Just reset the state to none. The role has gracefully closed
		 * before this ISR run.
		 * The above applies to aborting a role event too.
		 */
		LL_ASSERT((_radio.state == STATE_STOP) ||
    c60a:	3b04      	subs	r3, #4
    c60c:	2b01      	cmp	r3, #1
    c60e:	d80d      	bhi.n	c62c <isr+0x2138>
			  (_radio.state == STATE_ABORT));

		_radio.state = STATE_NONE;
    c610:	2300      	movs	r3, #0
    c612:	7433      	strb	r3, [r6, #16]
    c614:	e051      	b.n	c6ba <isr+0x21c6>
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
		(_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
	       (pdu_data_rx->payload.llctrl.opcode ==
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    c616:	2b02      	cmp	r3, #2
    c618:	d101      	bne.n	c61e <isr+0x212a>
    c61a:	f7ff fb53 	bl	bcc4 <isr+0x17d0>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    c61e:	2400      	movs	r4, #0
			 */
			*rx_enqueue = 1;
		}
	} else {
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
    c620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
    c622:	0023      	movs	r3, r4
			 */
			*rx_enqueue = 1;
		}
	} else {
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
    c624:	2a15      	cmp	r2, #21
    c626:	d101      	bne.n	c62c <isr+0x2138>
    c628:	f7ff fbbe 	bl	bda8 <isr+0x18b4>
		 * using Radio Disable task.
		 */
		break;

	default:
		LL_ASSERT(0);
    c62c:	b662      	cpsie	i
    c62e:	2004      	movs	r0, #4
    c630:	df02      	svc	2
			err = isr_rx_scan(irkmatch_id, rssi_ready);
		} else {
			err = 1;
		}
		if (err) {
			_radio.state = STATE_CLOSE;
    c632:	2303      	movs	r3, #3
    c634:	4c24      	ldr	r4, [pc, #144]	; (c6c8 <isr+0x21d4>)
    c636:	7423      	strb	r3, [r4, #16]
			radio_disable();
    c638:	f7fa fa54 	bl	6ae4 <radio_disable>
			/* switch scanner state to idle */
			_radio.scanner.state = 0;
    c63c:	2202      	movs	r2, #2
    c63e:	34dc      	adds	r4, #220	; 0xdc
    c640:	7823      	ldrb	r3, [r4, #0]
    c642:	4393      	bics	r3, r2
    c644:	7023      	strb	r3, [r4, #0]
    c646:	e038      	b.n	c6ba <isr+0x21c6>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    c648:	2328      	movs	r3, #40	; 0x28
    c64a:	35a7      	adds	r5, #167	; 0xa7
    c64c:	702b      	strb	r3, [r5, #0]
    c64e:	f7ff f870 	bl	b732 <isr+0x123e>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    c652:	000c      	movs	r4, r1
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    c654:	9410      	str	r4, [sp, #64]	; 0x40
    c656:	e52f      	b.n	c0b8 <isr+0x1bc4>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
    c658:	2400      	movs	r4, #0
    c65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c65c:	42a3      	cmp	r3, r4
    c65e:	d000      	beq.n	c662 <isr+0x216e>
    c660:	e5de      	b.n	c220 <isr+0x1d2c>
    c662:	e02a      	b.n	c6ba <isr+0x21c6>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    c664:	2400      	movs	r4, #0
	u8_t crc_close = 0;
    c666:	2300      	movs	r3, #0
    c668:	930c      	str	r3, [sp, #48]	; 0x30
    c66a:	e575      	b.n	c158 <isr+0x1c64>

	if (dont_close) {
		return;
	}

	_radio.role = ROLE_NONE;
    c66c:	2400      	movs	r4, #0
    c66e:	4d16      	ldr	r5, [pc, #88]	; (c6c8 <isr+0x21d4>)
    c670:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    c672:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    c674:	736c      	strb	r4, [r5, #13]

	radio_tmr_stop();
    c676:	f7fa fb95 	bl	6da4 <radio_tmr_stop>
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c67a:	0022      	movs	r2, r4
    c67c:	0021      	movs	r1, r4
    c67e:	0020      	movs	r0, r4
    c680:	4b13      	ldr	r3, [pc, #76]	; (c6d0 <isr+0x21dc>)
    c682:	f7f9 ff4d 	bl	6520 <mayfly_enqueue>
    c686:	1e04      	subs	r4, r0, #0
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
    c688:	d1d0      	bne.n	c62c <isr+0x2138>

	radio_tmr_stop();

	event_inactive(0, 0, 0, NULL);

	clock_control_off(_radio.hf_clock, NULL);
    c68a:	6828      	ldr	r0, [r5, #0]
    c68c:	0021      	movs	r1, r4
    c68e:	6843      	ldr	r3, [r0, #4]
    c690:	685b      	ldr	r3, [r3, #4]
    c692:	4798      	blx	r3

	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c694:	2201      	movs	r2, #1
    c696:	0020      	movs	r0, r4
    c698:	0011      	movs	r1, r2
    c69a:	f7f9 ff21 	bl	64e0 <mayfly_enable>
    c69e:	e00c      	b.n	c6ba <isr+0x21c6>
				return err;
			}
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_NOTIFY */

		_radio.state = STATE_CLOSE;
    c6a0:	2303      	movs	r3, #3
    c6a2:	7433      	strb	r3, [r6, #16]

		radio_switch_complete_and_disable();
    c6a4:	f7fa fa80 	bl	6ba8 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);
    c6a8:	0033      	movs	r3, r6
    c6aa:	33c5      	adds	r3, #197	; 0xc5

		_radio.state = STATE_CLOSE;

		radio_switch_complete_and_disable();

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
    c6ac:	7818      	ldrb	r0, [r3, #0]
    c6ae:	2327      	movs	r3, #39	; 0x27
    c6b0:	4358      	muls	r0, r3
    c6b2:	1830      	adds	r0, r6, r0
    c6b4:	3077      	adds	r0, #119	; 0x77
    c6b6:	f7fa f9f9 	bl	6aac <radio_pkt_tx_set>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
    c6ba:	b017      	add	sp, #92	; 0x5c
    c6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6be:	46c0      	nop			; (mov r8, r8)
    c6c0:	1afd498d 	.word	0x1afd498d
    c6c4:	3b9aca00 	.word	0x3b9aca00
    c6c8:	20000ea0 	.word	0x20000ea0
    c6cc:	00008d2d 	.word	0x00008d2d
    c6d0:	20000658 	.word	0x20000658

0000c6d4 <radio_init>:
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
    c6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6d6:	b087      	sub	sp, #28
    c6d8:	9201      	str	r2, [sp, #4]
    c6da:	aa0c      	add	r2, sp, #48	; 0x30
    c6dc:	7816      	ldrb	r6, [r2, #0]
    c6de:	aa0d      	add	r2, sp, #52	; 0x34
    c6e0:	8817      	ldrh	r7, [r2, #0]
    c6e2:	aa0e      	add	r2, sp, #56	; 0x38
    c6e4:	8812      	ldrh	r2, [r2, #0]
    c6e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    c6e8:	9205      	str	r2, [sp, #20]
    c6ea:	aa10      	add	r2, sp, #64	; 0x40
    c6ec:	8812      	ldrh	r2, [r2, #0]
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    c6ee:	248c      	movs	r4, #140	; 0x8c
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
    c6f0:	9202      	str	r2, [sp, #8]
	u32_t retcode;
	u8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
    c6f2:	4a34      	ldr	r2, [pc, #208]	; (c7c4 <radio_init+0xf0>)
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    c6f4:	0064      	lsls	r4, r4, #1
{
	u32_t retcode;
	u8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
    c6f6:	6010      	str	r0, [r2, #0]

	/* initialise SCA */
	_radio.sca = sca;
    c6f8:	0010      	movs	r0, r2
    c6fa:	30ff      	adds	r0, #255	; 0xff
    c6fc:	7741      	strb	r1, [r0, #29]

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;
    c6fe:	9902      	ldr	r1, [sp, #8]
    c700:	1869      	adds	r1, r5, r1
    c702:	9103      	str	r1, [sp, #12]

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
    c704:	4669      	mov	r1, sp
    c706:	7909      	ldrb	r1, [r1, #4]
    c708:	7341      	strb	r1, [r0, #13]
	_radio.conn_pool = mem_radio;
    c70a:	0010      	movs	r0, r2
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    c70c:	9901      	ldr	r1, [sp, #4]
	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
    c70e:	30fc      	adds	r0, #252	; 0xfc
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    c710:	434c      	muls	r4, r1
	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
    c712:	6085      	str	r5, [r0, #8]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    c714:	192c      	adds	r4, r5, r4
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    c716:	1c75      	adds	r5, r6, #1
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
    c718:	1cd9      	adds	r1, r3, #3
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    c71a:	b2ed      	uxtb	r5, r5
	_radio.packet_rx_count = (rx_count_max + 1);
    c71c:	3304      	adds	r3, #4
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    c71e:	9504      	str	r5, [sp, #16]
	_radio.packet_rx_count = (rx_count_max + 1);
    c720:	b2dd      	uxtb	r5, r3
    c722:	239e      	movs	r3, #158	; 0x9e
	_radio.packet_tx_count = (tx_count_max + 1);
    c724:	3602      	adds	r6, #2
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
    c726:	005b      	lsls	r3, r3, #1
    c728:	54d5      	strb	r5, [r2, r3]
	_radio.packet_tx_count = (tx_count_max + 1);
    c72a:	b2f6      	uxtb	r6, r6
    c72c:	3334      	adds	r3, #52	; 0x34
    c72e:	54d6      	strb	r6, [r2, r3]
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
    c730:	b2c9      	uxtb	r1, r1
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;
    c732:	3b20      	subs	r3, #32
    c734:	54d1      	strb	r1, [r2, r3]

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
	mem_radio +=
    c736:	00ab      	lsls	r3, r5, #2
    c738:	18e3      	adds	r3, r4, r3
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    c73a:	00f6      	lsls	r6, r6, #3
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
    c73c:	63c4      	str	r4, [r0, #60]	; 0x3c
	mem_radio +=
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
    c73e:	66c3      	str	r3, [r0, #108]	; 0x6c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    c740:	199c      	adds	r4, r3, r6
	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
    c742:	32fe      	adds	r2, #254	; 0xfe
	if ((PDU_AC_SIZE_MAX + 1) <
    c744:	1cfb      	adds	r3, r7, #3
	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
    c746:	6704      	str	r4, [r0, #112]	; 0x70
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
    c748:	8657      	strh	r7, [r2, #50]	; 0x32
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    c74a:	19a4      	adds	r4, r4, r6

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((PDU_AC_SIZE_MAX + 1) <
    c74c:	2b28      	cmp	r3, #40	; 0x28
    c74e:	d903      	bls.n	c758 <radio_init+0x84>
	    (offsetof(struct pdu_data, payload) +
			_radio.packet_data_octets_max)) {
		_radio.packet_rx_data_pool_size =
    c750:	2303      	movs	r3, #3
    c752:	370e      	adds	r7, #14
    c754:	439f      	bics	r7, r3
    c756:	e000      	b.n	c75a <radio_init+0x86>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
    c758:	2730      	movs	r7, #48	; 0x30
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    c75a:	4e1a      	ldr	r6, [pc, #104]	; (c7c4 <radio_init+0xf0>)
		_radio.packet_rx_data_pool_size =
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
    c75c:	4379      	muls	r1, r7
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    c75e:	0033      	movs	r3, r6
		_radio.packet_rx_data_pool_size =
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
    c760:	8691      	strh	r1, [r2, #52]	; 0x34
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    c762:	2130      	movs	r1, #48	; 0x30
    c764:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    c766:	8e9f      	ldrh	r7, [r3, #52]	; 0x34
	} else {
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    c768:	86d9      	strh	r1, [r3, #54]	; 0x36
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    c76a:	0038      	movs	r0, r7
    c76c:	f7f3 fd2e 	bl	1cc <__aeabi_uidiv>
    c770:	239b      	movs	r3, #155	; 0x9b
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
    c772:	0032      	movs	r2, r6
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    c774:	005b      	lsls	r3, r3, #1
    c776:	54f0      	strb	r0, [r6, r3]
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    c778:	9b01      	ldr	r3, [sp, #4]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
    c77a:	32fc      	adds	r2, #252	; 0xfc
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    c77c:	18ed      	adds	r5, r5, r3
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    c77e:	2303      	movs	r3, #3
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    c780:	00ed      	lsls	r5, r5, #3
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
    c782:	62d4      	str	r4, [r2, #44]	; 0x2c
	mem_radio += _radio.packet_rx_data_pool_size;
    c784:	19e4      	adds	r4, r4, r7

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
    c786:	6454      	str	r4, [r2, #68]	; 0x44
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    c788:	1964      	adds	r4, r4, r5
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    c78a:	9d05      	ldr	r5, [sp, #20]
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
    c78c:	6594      	str	r4, [r2, #88]	; 0x58
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    c78e:	350a      	adds	r5, #10
    c790:	439d      	bics	r5, r3
    c792:	3362      	adds	r3, #98	; 0x62
    c794:	b2ad      	uxth	r5, r5
    c796:	33ff      	adds	r3, #255	; 0xff
    c798:	52f5      	strh	r5, [r6, r3]
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
    c79a:	9b04      	ldr	r3, [sp, #16]
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    c79c:	3448      	adds	r4, #72	; 0x48
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
    c79e:	436b      	muls	r3, r5
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
		       offsetof(struct pdu_data, payload) +
		       packet_tx_data_size);

	/* initialise tx data pool memory */
	_radio.pkt_tx_data_pool = mem_radio;
    c7a0:	6614      	str	r4, [r2, #96]	; 0x60
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
    c7a2:	18e4      	adds	r4, r4, r3
    c7a4:	9b03      	ldr	r3, [sp, #12]
    c7a6:	1ae4      	subs	r4, r4, r3
	if (retcode) {
    c7a8:	d002      	beq.n	c7b0 <radio_init+0xdc>
		return (retcode + mem_size);
    c7aa:	9b02      	ldr	r3, [sp, #8]
    c7ac:	1918      	adds	r0, r3, r4
    c7ae:	e006      	b.n	c7be <radio_init+0xea>
	 * This is a simple flow control to rx data only on one selected
	 * connection handle.
	 * TODO: replace this feature with host-to-controller flowcontrol
	 * implementation/design.
	 */
	_radio.fc_ena = 1;
    c7b0:	23bf      	movs	r3, #191	; 0xbf
    c7b2:	2201      	movs	r2, #1
    c7b4:	005b      	lsls	r3, r3, #1
    c7b6:	54f2      	strb	r2, [r6, r3]

	/* memory allocations */
	common_init();
    c7b8:	f7fb fc10 	bl	7fdc <common_init>
#if defined(RADIO_UNIT_TEST) && \
	defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
	chan_sel_2_ut();
#endif /* RADIO_UNIT_TEST && CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

	return retcode;
    c7bc:	0020      	movs	r0, r4
}
    c7be:	b007      	add	sp, #28
    c7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7c2:	46c0      	nop			; (mov r8, r8)
    c7c4:	20000ea0 	.word	0x20000ea0

0000c7c8 <ll_reset>:

void ll_reset(void)
{
    c7c8:	b570      	push	{r4, r5, r6, lr}
	u16_t conn_handle;

	/* disable advertiser events */
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    c7ca:	2103      	movs	r1, #3
    c7cc:	2005      	movs	r0, #5
    c7ce:	f7fb fcdd 	bl	818c <role_disable>

	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    c7d2:	2104      	movs	r1, #4
    c7d4:	2006      	movs	r0, #6
    c7d6:	f7fb fcd9 	bl	818c <role_disable>

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    c7da:	4c22      	ldr	r4, [pc, #136]	; (c864 <ll_reset+0x9c>)
    c7dc:	2500      	movs	r5, #0
    c7de:	0026      	movs	r6, r4
    c7e0:	36ff      	adds	r6, #255	; 0xff
    c7e2:	7b73      	ldrb	r3, [r6, #13]
    c7e4:	42ab      	cmp	r3, r5
    c7e6:	d907      	bls.n	c7f8 <ll_reset+0x30>
	     conn_handle++) {
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    c7e8:	1de8      	adds	r0, r5, #7
    c7ea:	b2c0      	uxtb	r0, r0
    c7ec:	21ff      	movs	r1, #255	; 0xff
	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
	     conn_handle++) {
    c7ee:	3501      	adds	r5, #1
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    c7f0:	f7fb fccc 	bl	818c <role_disable>
	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
	     conn_handle++) {
    c7f4:	b2ad      	uxth	r5, r5
    c7f6:	e7f4      	b.n	c7e2 <ll_reset+0x1a>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
    c7f8:	2101      	movs	r1, #1
    c7fa:	1d62      	adds	r2, r4, #5
    c7fc:	7fd3      	ldrb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    c7fe:	2500      	movs	r5, #0
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
    c800:	438b      	bics	r3, r1
    c802:	77d3      	strb	r3, [r2, #31]
	_radio.advertiser.conn = NULL;
    c804:	0023      	movs	r3, r4
	_radio.scanner.is_enabled = 0;
    c806:	0022      	movs	r2, r4
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
    c808:	33c8      	adds	r3, #200	; 0xc8
	_radio.scanner.is_enabled = 0;
    c80a:	32dc      	adds	r2, #220	; 0xdc
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
    c80c:	601d      	str	r5, [r3, #0]
	_radio.scanner.is_enabled = 0;
    c80e:	7813      	ldrb	r3, [r2, #0]
    c810:	438b      	bics	r3, r1
    c812:	7013      	strb	r3, [r2, #0]
	_radio.scanner.conn = NULL;
    c814:	0023      	movs	r3, r4
    c816:	33fc      	adds	r3, #252	; 0xfc
    c818:	601d      	str	r5, [r3, #0]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    c81a:	0023      	movs	r3, r4
    c81c:	312f      	adds	r1, #47	; 0x2f
    c81e:	33fe      	adds	r3, #254	; 0xfe
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    c820:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	/* reset controller context members */
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
	_radio.scanner.is_enabled = 0;
	_radio.scanner.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    c822:	86d9      	strh	r1, [r3, #54]	; 0x36
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    c824:	f7f3 fcd2 	bl	1cc <__aeabi_uidiv>
    c828:	239b      	movs	r3, #155	; 0x9b
    c82a:	005b      	lsls	r3, r3, #1
    c82c:	54e0      	strb	r0, [r4, r3]
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
    c82e:	233e      	movs	r3, #62	; 0x3e
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    c830:	22a8      	movs	r2, #168	; 0xa8
	_radio.scanner.is_enabled = 0;
	_radio.scanner.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
    c832:	33ff      	adds	r3, #255	; 0xff
    c834:	54e5      	strb	r5, [r4, r3]
	_radio.packet_rx_acquire = 0;
    c836:	3301      	adds	r3, #1
    c838:	54e5      	strb	r5, [r4, r3]
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    c83a:	3b02      	subs	r3, #2
    c83c:	5ce3      	ldrb	r3, [r4, r3]
    c83e:	0052      	lsls	r2, r2, #1
    c840:	3b01      	subs	r3, #1
    c842:	54a3      	strb	r3, [r4, r2]
	_radio.packet_tx_first = 0;
    c844:	2372      	movs	r3, #114	; 0x72
    c846:	33ff      	adds	r3, #255	; 0xff
    c848:	54e5      	strb	r5, [r4, r3]
	_radio.packet_tx_last = 0;
    c84a:	3301      	adds	r3, #1
    c84c:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_first = 0;
    c84e:	2374      	movs	r3, #116	; 0x74
    c850:	33ff      	adds	r3, #255	; 0xff
    c852:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_last = 0;

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
    c854:	0028      	movs	r0, r5
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
	_radio.packet_tx_first = 0;
	_radio.packet_tx_last = 0;
	_radio.packet_release_first = 0;
	_radio.packet_release_last = 0;
    c856:	3301      	adds	r3, #1
    c858:	54e5      	strb	r5, [r4, r3]

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
    c85a:	f001 fb4f 	bl	defc <ll_filter_reset>
	/* memory allocations */
	common_init();
    c85e:	f7fb fbbd 	bl	7fdc <common_init>
}
    c862:	bd70      	pop	{r4, r5, r6, pc}
    c864:	20000ea0 	.word	0x20000ea0

0000c868 <radio_adv_data_get>:
	_radio.ticks_active_to_start = ticks_active_to_start;
}

struct radio_adv_data *radio_adv_data_get(void)
{
	return &_radio.advertiser.adv_data;
    c868:	4801      	ldr	r0, [pc, #4]	; (c870 <radio_adv_data_get+0x8>)
}
    c86a:	3027      	adds	r0, #39	; 0x27
    c86c:	4770      	bx	lr
    c86e:	46c0      	nop			; (mov r8, r8)
    c870:	20000ea0 	.word	0x20000ea0

0000c874 <radio_scan_data_get>:

struct radio_adv_data *radio_scan_data_get(void)
{
	return &_radio.advertiser.scan_data;
    c874:	4801      	ldr	r0, [pc, #4]	; (c87c <radio_scan_data_get+0x8>)
}
    c876:	3077      	adds	r0, #119	; 0x77
    c878:	4770      	bx	lr
    c87a:	46c0      	nop			; (mov r8, r8)
    c87c:	20000ea0 	.word	0x20000ea0

0000c880 <radio_adv_is_enabled>:
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
}

u32_t radio_adv_is_enabled(void)
{
	return _radio.advertiser.is_enabled;
    c880:	4b03      	ldr	r3, [pc, #12]	; (c890 <radio_adv_is_enabled+0x10>)
    c882:	3305      	adds	r3, #5
    c884:	7fd8      	ldrb	r0, [r3, #31]
    c886:	07c0      	lsls	r0, r0, #31
    c888:	0fc0      	lsrs	r0, r0, #31
    c88a:	b2c0      	uxtb	r0, r0
}
    c88c:	4770      	bx	lr
    c88e:	46c0      	nop			; (mov r8, r8)
    c890:	20000ea0 	.word	0x20000ea0

0000c894 <radio_adv_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
    c894:	4b04      	ldr	r3, [pc, #16]	; (c8a8 <radio_adv_filter_pol_get+0x14>)
		return _radio.advertiser.filter_policy;
	}

	return 0;
    c896:	2000      	movs	r0, #0
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
    c898:	1d5a      	adds	r2, r3, #5
    c89a:	7fd2      	ldrb	r2, [r2, #31]
    c89c:	07d2      	lsls	r2, r2, #31
    c89e:	d502      	bpl.n	c8a6 <radio_adv_filter_pol_get+0x12>
		return _radio.advertiser.filter_policy;
    c8a0:	3306      	adds	r3, #6
    c8a2:	7fd8      	ldrb	r0, [r3, #31]
    c8a4:	0980      	lsrs	r0, r0, #6
	}

	return 0;
}
    c8a6:	4770      	bx	lr
    c8a8:	20000ea0 	.word	0x20000ea0

0000c8ac <radio_scan_is_enabled>:
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
}

u32_t radio_scan_is_enabled(void)
{
	return _radio.scanner.is_enabled;
    c8ac:	4b03      	ldr	r3, [pc, #12]	; (c8bc <radio_scan_is_enabled+0x10>)
    c8ae:	33dc      	adds	r3, #220	; 0xdc
    c8b0:	7818      	ldrb	r0, [r3, #0]
    c8b2:	07c0      	lsls	r0, r0, #31
    c8b4:	0fc0      	lsrs	r0, r0, #31
    c8b6:	b2c0      	uxtb	r0, r0
}
    c8b8:	4770      	bx	lr
    c8ba:	46c0      	nop			; (mov r8, r8)
    c8bc:	20000ea0 	.word	0x20000ea0

0000c8c0 <radio_scan_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
    c8c0:	4b05      	ldr	r3, [pc, #20]	; (c8d8 <radio_scan_filter_pol_get+0x18>)
		return _radio.scanner.filter_policy;
	}

	return 0;
    c8c2:	2000      	movs	r0, #0
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
    c8c4:	001a      	movs	r2, r3
    c8c6:	32dc      	adds	r2, #220	; 0xdc
    c8c8:	7812      	ldrb	r2, [r2, #0]
    c8ca:	07d2      	lsls	r2, r2, #31
    c8cc:	d503      	bpl.n	c8d6 <radio_scan_filter_pol_get+0x16>
		return _radio.scanner.filter_policy;
    c8ce:	33dd      	adds	r3, #221	; 0xdd
    c8d0:	7818      	ldrb	r0, [r3, #0]
    c8d2:	0680      	lsls	r0, r0, #26
    c8d4:	0f80      	lsrs	r0, r0, #30
	}

	return 0;
}
    c8d6:	4770      	bx	lr
    c8d8:	20000ea0 	.word	0x20000ea0

0000c8dc <ll_conn_update>:
	return status;
}

u32_t ll_conn_update(u16_t handle, u8_t cmd, u8_t status, u16_t interval,
		     u16_t latency, u16_t timeout)
{
    c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8de:	001f      	movs	r7, r3
    c8e0:	ab06      	add	r3, sp, #24
    c8e2:	881e      	ldrh	r6, [r3, #0]
    c8e4:	ab07      	add	r3, sp, #28
    c8e6:	881d      	ldrh	r5, [r3, #0]
    c8e8:	000c      	movs	r4, r1
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
    c8ea:	f7fb fc37 	bl	815c <connection_get>
    c8ee:	0003      	movs	r3, r0
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
		}

		return 1;
    c8f0:	2001      	movs	r0, #1
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
    c8f2:	2b00      	cmp	r3, #0
    c8f4:	d03b      	beq.n	c96e <ll_conn_update+0x92>
	    ((conn->llcp_req != conn->llcp_ack) &&
    c8f6:	001a      	movs	r2, r3
    c8f8:	0019      	movs	r1, r3
    c8fa:	3268      	adds	r2, #104	; 0x68
    c8fc:	3169      	adds	r1, #105	; 0x69
    c8fe:	7812      	ldrb	r2, [r2, #0]
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
    c900:	7809      	ldrb	r1, [r1, #0]
    c902:	4291      	cmp	r1, r2
    c904:	d00c      	beq.n	c920 <ll_conn_update+0x44>
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
    c906:	0019      	movs	r1, r3
    c908:	316a      	adds	r1, #106	; 0x6a

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
    c90a:	7809      	ldrb	r1, [r1, #0]
    c90c:	4281      	cmp	r1, r0
    c90e:	d12e      	bne.n	c96e <ll_conn_update+0x92>
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
	      (conn->llcp.connection_update.state !=
    c910:	0019      	movs	r1, r3
    c912:	3195      	adds	r1, #149	; 0x95
	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
    c914:	7808      	ldrb	r0, [r1, #0]
    c916:	2107      	movs	r1, #7
    c918:	4001      	ands	r1, r0
	      (conn->llcp.connection_update.state !=
	       LLCP_CONN_STATE_APP_WAIT)))) {
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
    c91a:	2002      	movs	r0, #2
	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
    c91c:	2904      	cmp	r1, #4
    c91e:	d126      	bne.n	c96e <ll_conn_update+0x92>
		}

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
    c920:	0018      	movs	r0, r3
    c922:	2101      	movs	r1, #1
    c924:	3094      	adds	r0, #148	; 0x94
    c926:	7001      	strb	r1, [r0, #0]
	conn->llcp.connection_update.win_offset_us = 0;
    c928:	208c      	movs	r0, #140	; 0x8c
    c92a:	4684      	mov	ip, r0
    c92c:	449c      	add	ip, r3
    c92e:	4661      	mov	r1, ip
    c930:	2000      	movs	r0, #0
    c932:	6008      	str	r0, [r1, #0]
	conn->llcp.connection_update.interval = interval;
    c934:	216c      	movs	r1, #108	; 0x6c
    c936:	468c      	mov	ip, r1
    c938:	449c      	add	ip, r3
    c93a:	4661      	mov	r1, ip
    c93c:	800f      	strh	r7, [r1, #0]
	conn->llcp.connection_update.latency = latency;
    c93e:	001f      	movs	r7, r3
    c940:	376e      	adds	r7, #110	; 0x6e
    c942:	803e      	strh	r6, [r7, #0]
	conn->llcp.connection_update.timeout = timeout;
    c944:	001e      	movs	r6, r3
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    c946:	2707      	movs	r7, #7
    c948:	3401      	adds	r4, #1

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
    c94a:	3670      	adds	r6, #112	; 0x70
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    c94c:	403c      	ands	r4, r7

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
    c94e:	8035      	strh	r5, [r6, #0]
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    c950:	0025      	movs	r5, r4
    c952:	3625      	adds	r6, #37	; 0x25
    c954:	7834      	ldrb	r4, [r6, #0]
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    c956:	2101      	movs	r1, #1
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    c958:	43bc      	bics	r4, r7
	conn->llcp.connection_update.is_internal = 0;
    c95a:	432c      	orrs	r4, r5
    c95c:	2518      	movs	r5, #24
    c95e:	43ac      	bics	r4, r5
    c960:	7034      	strb	r4, [r6, #0]

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    c962:	001c      	movs	r4, r3
	conn->llcp_req++;
    c964:	3201      	adds	r2, #1
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    c966:	346a      	adds	r4, #106	; 0x6a
	conn->llcp_req++;
    c968:	3368      	adds	r3, #104	; 0x68
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    c96a:	7021      	strb	r1, [r4, #0]
	conn->llcp_req++;
    c96c:	701a      	strb	r2, [r3, #0]

	return 0;
}
    c96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c970 <ll_start_enc_req_send>:
	return 1;
}

u32_t ll_start_enc_req_send(u16_t handle, u8_t error_code,
			    u8_t const *const ltk)
{
    c970:	b570      	push	{r4, r5, r6, lr}
    c972:	000d      	movs	r5, r1
    c974:	0016      	movs	r6, r2
	struct connection *conn;

	conn = connection_get(handle);
    c976:	f7fb fbf1 	bl	815c <connection_get>
    c97a:	1e04      	subs	r4, r0, #0
	if (!conn) {
    c97c:	d101      	bne.n	c982 <ll_start_enc_req_send+0x12>
		return 1;
    c97e:	2001      	movs	r0, #1
    c980:	e03c      	b.n	c9fc <ll_start_enc_req_send+0x8c>
	}

	if (error_code) {
    c982:	2d00      	cmp	r5, #0
    c984:	d024      	beq.n	c9d0 <ll_start_enc_req_send+0x60>
		if (conn->refresh == 0) {
    c986:	0003      	movs	r3, r0
    c988:	33c0      	adds	r3, #192	; 0xc0
    c98a:	7818      	ldrb	r0, [r3, #0]
    c98c:	2340      	movs	r3, #64	; 0x40
    c98e:	4018      	ands	r0, r3
    c990:	d110      	bne.n	c9b4 <ll_start_enc_req_send+0x44>
			if (conn->llcp_req != conn->llcp_ack) {
    c992:	0022      	movs	r2, r4
    c994:	0023      	movs	r3, r4
    c996:	3268      	adds	r2, #104	; 0x68
    c998:	3369      	adds	r3, #105	; 0x69
    c99a:	7811      	ldrb	r1, [r2, #0]
    c99c:	781b      	ldrb	r3, [r3, #0]
    c99e:	428b      	cmp	r3, r1
    c9a0:	d1ed      	bne.n	c97e <ll_start_enc_req_send+0xe>
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;
    c9a2:	0021      	movs	r1, r4
    c9a4:	316c      	adds	r1, #108	; 0x6c
    c9a6:	700d      	strb	r5, [r1, #0]

			conn->llcp_type = LLCP_ENCRYPTION;
    c9a8:	2103      	movs	r1, #3
    c9aa:	346a      	adds	r4, #106	; 0x6a
			conn->llcp_req++;
    c9ac:	3301      	adds	r3, #1
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
    c9ae:	7021      	strb	r1, [r4, #0]
			conn->llcp_req++;
    c9b0:	7013      	strb	r3, [r2, #0]
    c9b2:	e023      	b.n	c9fc <ll_start_enc_req_send+0x8c>
		} else {
			if (conn->llcp_terminate.ack !=
    c9b4:	0023      	movs	r3, r4
			    conn->llcp_terminate.req) {
    c9b6:	0022      	movs	r2, r4
			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
		} else {
			if (conn->llcp_terminate.ack !=
    c9b8:	33a5      	adds	r3, #165	; 0xa5
			    conn->llcp_terminate.req) {
    c9ba:	32a4      	adds	r2, #164	; 0xa4
			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
		} else {
			if (conn->llcp_terminate.ack !=
    c9bc:	7819      	ldrb	r1, [r3, #0]
    c9be:	7813      	ldrb	r3, [r2, #0]
    c9c0:	428b      	cmp	r3, r1
    c9c2:	d1dc      	bne.n	c97e <ll_start_enc_req_send+0xe>
			    conn->llcp_terminate.req) {
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;
    c9c4:	34a6      	adds	r4, #166	; 0xa6

			conn->llcp_terminate.req++;
    c9c6:	3301      	adds	r3, #1
			if (conn->llcp_terminate.ack !=
			    conn->llcp_terminate.req) {
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;
    c9c8:	7025      	strb	r5, [r4, #0]

		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_req++;
	}

	return 0;
    c9ca:	2000      	movs	r0, #0
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;

			conn->llcp_terminate.req++;
    c9cc:	7013      	strb	r3, [r2, #0]
    c9ce:	e015      	b.n	c9fc <ll_start_enc_req_send+0x8c>
		}
	} else {
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
    c9d0:	2210      	movs	r2, #16
    c9d2:	0031      	movs	r1, r6
    c9d4:	3077      	adds	r0, #119	; 0x77
    c9d6:	f7f4 f95e 	bl	c96 <memcpy>
		       sizeof(conn->llcp.encryption.ltk));

		if (conn->llcp_req != conn->llcp_ack) {
    c9da:	0022      	movs	r2, r4
    c9dc:	0023      	movs	r3, r4
    c9de:	3268      	adds	r2, #104	; 0x68
    c9e0:	3369      	adds	r3, #105	; 0x69
    c9e2:	7811      	ldrb	r1, [r2, #0]
    c9e4:	781b      	ldrb	r3, [r3, #0]
    c9e6:	428b      	cmp	r3, r1
    c9e8:	d1c9      	bne.n	c97e <ll_start_enc_req_send+0xe>
			return 1;
		}

		conn->llcp.encryption.error_code = 0;
    c9ea:	0021      	movs	r1, r4
    c9ec:	316c      	adds	r1, #108	; 0x6c
    c9ee:	700d      	strb	r5, [r1, #0]

		conn->llcp_type = LLCP_ENCRYPTION;
    c9f0:	2103      	movs	r1, #3
		conn->llcp_req++;
	}

	return 0;
    c9f2:	0028      	movs	r0, r5
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
    c9f4:	346a      	adds	r4, #106	; 0x6a
		conn->llcp_req++;
    c9f6:	3301      	adds	r3, #1
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
    c9f8:	7021      	strb	r1, [r4, #0]
		conn->llcp_req++;
    c9fa:	7013      	strb	r3, [r2, #0]
	}

	return 0;
}
    c9fc:	bd70      	pop	{r4, r5, r6, pc}

0000c9fe <ll_feature_req_send>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

u32_t ll_feature_req_send(u16_t handle)
{
    c9fe:	b510      	push	{r4, lr}
	struct connection *conn;

	conn = connection_get(handle);
    ca00:	f7fb fbac 	bl	815c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
    ca04:	2201      	movs	r2, #1
u32_t ll_feature_req_send(u16_t handle)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    ca06:	2800      	cmp	r0, #0
    ca08:	d00d      	beq.n	ca26 <ll_feature_req_send+0x28>
    ca0a:	0001      	movs	r1, r0
    ca0c:	0003      	movs	r3, r0
    ca0e:	3168      	adds	r1, #104	; 0x68
    ca10:	3369      	adds	r3, #105	; 0x69
    ca12:	780c      	ldrb	r4, [r1, #0]
    ca14:	781b      	ldrb	r3, [r3, #0]
    ca16:	42a3      	cmp	r3, r4
    ca18:	d105      	bne.n	ca26 <ll_feature_req_send+0x28>
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    ca1a:	3203      	adds	r2, #3
    ca1c:	306a      	adds	r0, #106	; 0x6a
    ca1e:	7002      	strb	r2, [r0, #0]
	conn->llcp_req++;

	return 0;
    ca20:	2200      	movs	r2, #0
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
	conn->llcp_req++;
    ca22:	3301      	adds	r3, #1
    ca24:	700b      	strb	r3, [r1, #0]

	return 0;
}
    ca26:	0010      	movs	r0, r2
    ca28:	bd10      	pop	{r4, pc}

0000ca2a <ll_version_ind_send>:

u32_t ll_version_ind_send(u16_t handle)
{
    ca2a:	b510      	push	{r4, lr}
	struct connection *conn;

	conn = connection_get(handle);
    ca2c:	f7fb fb96 	bl	815c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
    ca30:	2201      	movs	r2, #1
u32_t ll_version_ind_send(u16_t handle)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    ca32:	2800      	cmp	r0, #0
    ca34:	d00d      	beq.n	ca52 <ll_version_ind_send+0x28>
    ca36:	0001      	movs	r1, r0
    ca38:	0003      	movs	r3, r0
    ca3a:	3168      	adds	r1, #104	; 0x68
    ca3c:	3369      	adds	r3, #105	; 0x69
    ca3e:	780c      	ldrb	r4, [r1, #0]
    ca40:	781b      	ldrb	r3, [r3, #0]
    ca42:	42a3      	cmp	r3, r4
    ca44:	d105      	bne.n	ca52 <ll_version_ind_send+0x28>
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    ca46:	3204      	adds	r2, #4
    ca48:	306a      	adds	r0, #106	; 0x6a
    ca4a:	7002      	strb	r2, [r0, #0]
	conn->llcp_req++;

	return 0;
    ca4c:	2200      	movs	r2, #0
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
	conn->llcp_req++;
    ca4e:	3301      	adds	r3, #1
    ca50:	700b      	strb	r3, [r1, #0]

	return 0;
}
    ca52:	0010      	movs	r0, r2
    ca54:	bd10      	pop	{r4, pc}

0000ca56 <ll_terminate_ind_send>:

u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
    ca56:	b570      	push	{r4, r5, r6, lr}
    ca58:	000c      	movs	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
    ca5a:	f7fb fb7f 	bl	815c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
    ca5e:	2201      	movs	r2, #1
u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
    ca60:	2800      	cmp	r0, #0
    ca62:	d00c      	beq.n	ca7e <ll_terminate_ind_send+0x28>
    ca64:	0003      	movs	r3, r0
    ca66:	0001      	movs	r1, r0
    ca68:	33a5      	adds	r3, #165	; 0xa5
    ca6a:	31a4      	adds	r1, #164	; 0xa4
    ca6c:	781d      	ldrb	r5, [r3, #0]
    ca6e:	780b      	ldrb	r3, [r1, #0]
    ca70:	42ab      	cmp	r3, r5
    ca72:	d104      	bne.n	ca7e <ll_terminate_ind_send+0x28>
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;

	conn->llcp_terminate.req++;
    ca74:	189b      	adds	r3, r3, r2

	return 0;
    ca76:	2200      	movs	r2, #0
	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;
    ca78:	30a6      	adds	r0, #166	; 0xa6
    ca7a:	7004      	strb	r4, [r0, #0]

	conn->llcp_terminate.req++;
    ca7c:	700b      	strb	r3, [r1, #0]

	return 0;
}
    ca7e:	0010      	movs	r0, r2
    ca80:	bd70      	pop	{r4, r5, r6, pc}

0000ca82 <ll_length_req_send>:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
    ca82:	b570      	push	{r4, r5, r6, lr}
    ca84:	000c      	movs	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
    ca86:	f7fb fb69 	bl	815c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
		return 1;
    ca8a:	2201      	movs	r2, #1
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    ca8c:	2800      	cmp	r0, #0
    ca8e:	d019      	beq.n	cac4 <ll_length_req_send+0x42>
    ca90:	0003      	movs	r3, r0
    ca92:	3368      	adds	r3, #104	; 0x68
    ca94:	7819      	ldrb	r1, [r3, #0]
    ca96:	189b      	adds	r3, r3, r2
    ca98:	781b      	ldrb	r3, [r3, #0]
    ca9a:	4299      	cmp	r1, r3
    ca9c:	d112      	bne.n	cac4 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
    ca9e:	0001      	movs	r1, r0
    caa0:	0003      	movs	r3, r0
    caa2:	31b4      	adds	r1, #180	; 0xb4
    caa4:	33b5      	adds	r3, #181	; 0xb5
    caa6:	780d      	ldrb	r5, [r1, #0]
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	42ab      	cmp	r3, r5
    caac:	d10a      	bne.n	cac4 <ll_length_req_send+0x42>
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    caae:	0005      	movs	r5, r0
    cab0:	2603      	movs	r6, #3
    cab2:	35b6      	adds	r5, #182	; 0xb6
    cab4:	782a      	ldrb	r2, [r5, #0]
	conn->llcp_length.tx_octets = tx_octets;
    cab6:	30ba      	adds	r0, #186	; 0xba
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    cab8:	43b2      	bics	r2, r6
    caba:	702a      	strb	r2, [r5, #0]
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;

	return 0;
    cabc:	2200      	movs	r2, #0

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;
    cabe:	3301      	adds	r3, #1
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
	conn->llcp_length.tx_octets = tx_octets;
    cac0:	8004      	strh	r4, [r0, #0]
	conn->llcp_length.req++;
    cac2:	700b      	strb	r3, [r1, #0]

	return 0;
}
    cac4:	0010      	movs	r0, r2
    cac6:	bd70      	pop	{r4, r5, r6, pc}

0000cac8 <ll_length_default_get>:

void ll_length_default_get(u16_t *max_tx_octets, u16_t *max_tx_time)
{
	*max_tx_octets = _radio.default_tx_octets;
    cac8:	4b03      	ldr	r3, [pc, #12]	; (cad8 <ll_length_default_get+0x10>)
    caca:	33fe      	adds	r3, #254	; 0xfe
    cacc:	8c1a      	ldrh	r2, [r3, #32]
    cace:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
    cad0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    cad2:	800b      	strh	r3, [r1, #0]
}
    cad4:	4770      	bx	lr
    cad6:	46c0      	nop			; (mov r8, r8)
    cad8:	20000ea0 	.word	0x20000ea0

0000cadc <ll_length_default_set>:

u32_t ll_length_default_set(u16_t max_tx_octets, u16_t max_tx_time)
{
	/* TODO: parameter check (for BT 5.0 compliance) */

	_radio.default_tx_octets = max_tx_octets;
    cadc:	4b02      	ldr	r3, [pc, #8]	; (cae8 <ll_length_default_set+0xc>)
    cade:	33fe      	adds	r3, #254	; 0xfe
    cae0:	8418      	strh	r0, [r3, #32]
	_radio.default_tx_time = max_tx_time;
    cae2:	8459      	strh	r1, [r3, #34]	; 0x22

	return 0;
}
    cae4:	2000      	movs	r0, #0
    cae6:	4770      	bx	lr
    cae8:	20000ea0 	.word	0x20000ea0

0000caec <ll_length_max_get>:

void ll_length_max_get(u16_t *max_tx_octets, u16_t *max_tx_time,
		       u16_t *max_rx_octets, u16_t *max_rx_time)
{
    caec:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    caee:	241b      	movs	r4, #27
    caf0:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
    caf2:	20a4      	movs	r0, #164	; 0xa4
    caf4:	0040      	lsls	r0, r0, #1
    caf6:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    caf8:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
    cafa:	8018      	strh	r0, [r3, #0]
}
    cafc:	bd10      	pop	{r4, pc}

0000cafe <ll_phy_get>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
u32_t ll_phy_get(u16_t handle, u8_t *tx, u8_t *rx)
{
    cafe:	b570      	push	{r4, r5, r6, lr}
    cb00:	000d      	movs	r5, r1
    cb02:	0014      	movs	r4, r2
	struct connection *conn;

	conn = connection_get(handle);
    cb04:	f7fb fb2a 	bl	815c <connection_get>
	if (!conn) {
		return 1;
    cb08:	2301      	movs	r3, #1
u32_t ll_phy_get(u16_t handle, u8_t *tx, u8_t *rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn) {
    cb0a:	2800      	cmp	r0, #0
    cb0c:	d00b      	beq.n	cb26 <ll_phy_get+0x28>
		return 1;
	}

	/* TODO: context safe read */
	*tx = conn->phy_tx;
    cb0e:	0003      	movs	r3, r0
    cb10:	3332      	adds	r3, #50	; 0x32
    cb12:	781b      	ldrb	r3, [r3, #0]
	*rx = conn->phy_rx;
    cb14:	3033      	adds	r0, #51	; 0x33
	if (!conn) {
		return 1;
	}

	/* TODO: context safe read */
	*tx = conn->phy_tx;
    cb16:	069b      	lsls	r3, r3, #26
    cb18:	0f5b      	lsrs	r3, r3, #29
    cb1a:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
    cb1c:	7803      	ldrb	r3, [r0, #0]
    cb1e:	069b      	lsls	r3, r3, #26
    cb20:	0f5b      	lsrs	r3, r3, #29
    cb22:	7023      	strb	r3, [r4, #0]

	return 0;
    cb24:	2300      	movs	r3, #0
}
    cb26:	0018      	movs	r0, r3
    cb28:	bd70      	pop	{r4, r5, r6, pc}
	...

0000cb2c <ll_phy_default_set>:

u32_t ll_phy_default_set(u8_t tx, u8_t rx)
{
	/* TODO: validate against supported phy */

	_radio.default_phy_tx = tx;
    cb2c:	4b02      	ldr	r3, [pc, #8]	; (cb38 <ll_phy_default_set+0xc>)
    cb2e:	33fe      	adds	r3, #254	; 0xfe
    cb30:	8498      	strh	r0, [r3, #36]	; 0x24
	_radio.default_phy_rx = rx;
    cb32:	84d9      	strh	r1, [r3, #38]	; 0x26

	return 0;
}
    cb34:	2000      	movs	r0, #0
    cb36:	4770      	bx	lr
    cb38:	20000ea0 	.word	0x20000ea0

0000cb3c <ll_phy_req_send>:

u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
    cb3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cb3e:	0015      	movs	r5, r2
    cb40:	000e      	movs	r6, r1
    cb42:	9301      	str	r3, [sp, #4]
	struct connection *conn;

	conn = connection_get(handle);
    cb44:	f7fb fb0a 	bl	815c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
    cb48:	2201      	movs	r2, #1
u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    cb4a:	2800      	cmp	r0, #0
    cb4c:	d023      	beq.n	cb96 <ll_phy_req_send+0x5a>
    cb4e:	0003      	movs	r3, r0
    cb50:	3368      	adds	r3, #104	; 0x68
    cb52:	7819      	ldrb	r1, [r3, #0]
    cb54:	189b      	adds	r3, r3, r2
    cb56:	781b      	ldrb	r3, [r3, #0]
    cb58:	4299      	cmp	r1, r3
    cb5a:	d11c      	bne.n	cb96 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
    cb5c:	0007      	movs	r7, r0
    cb5e:	0001      	movs	r1, r0
    cb60:	37bc      	adds	r7, #188	; 0xbc
    cb62:	31bd      	adds	r1, #189	; 0xbd
    cb64:	783b      	ldrb	r3, [r7, #0]
u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    cb66:	7809      	ldrb	r1, [r1, #0]
    cb68:	4299      	cmp	r1, r3
    cb6a:	d114      	bne.n	cb96 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    cb6c:	0003      	movs	r3, r0
    cb6e:	33be      	adds	r3, #190	; 0xbe
	conn->llcp_phy.cmd = 1;
    cb70:	7858      	ldrb	r0, [r3, #1]
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
    cb72:	4015      	ands	r5, r2
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
    cb74:	0004      	movs	r4, r0
	conn->llcp_phy.tx = tx;
    cb76:	2007      	movs	r0, #7
    cb78:	4006      	ands	r6, r0
	conn->llcp_phy.flags = flags;
    cb7a:	3805      	subs	r0, #5
    cb7c:	4304      	orrs	r4, r0
    cb7e:	0020      	movs	r0, r4
    cb80:	4390      	bics	r0, r2
    cb82:	4305      	orrs	r5, r0
    cb84:	705d      	strb	r5, [r3, #1]
	conn->llcp_phy.rx = rx;
    cb86:	9a01      	ldr	r2, [sp, #4]
    cb88:	00b6      	lsls	r6, r6, #2
    cb8a:	0154      	lsls	r4, r2, #5
	conn->llcp_phy.req++;

	return 0;
    cb8c:	2200      	movs	r2, #0

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
	conn->llcp_phy.rx = rx;
    cb8e:	4334      	orrs	r4, r6
	conn->llcp_phy.req++;
    cb90:	3101      	adds	r1, #1

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
	conn->llcp_phy.rx = rx;
    cb92:	701c      	strb	r4, [r3, #0]
	conn->llcp_phy.req++;
    cb94:	7039      	strb	r1, [r7, #0]

	return 0;
}
    cb96:	0010      	movs	r0, r2
    cb98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000cb9c <radio_rx_get>:
u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    cb9c:	4b1c      	ldr	r3, [pc, #112]	; (cc10 <radio_rx_get+0x74>)

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
    cb9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    cba0:	0005      	movs	r5, r0
    cba2:	0008      	movs	r0, r1
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    cba4:	0019      	movs	r1, r3
    cba6:	31fc      	adds	r1, #252	; 0xfc
    cba8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    cbaa:	6d0c      	ldr	r4, [r1, #80]	; 0x50
    cbac:	0019      	movs	r1, r3
    cbae:	3174      	adds	r1, #116	; 0x74

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
    cbb0:	b085      	sub	sp, #20
    cbb2:	001e      	movs	r6, r3
    cbb4:	31ff      	adds	r1, #255	; 0xff
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    cbb6:	42a2      	cmp	r2, r4
    cbb8:	d01d      	beq.n	cbf6 <radio_rx_get+0x5a>
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
    cbba:	6853      	ldr	r3, [r2, #4]

		cmplt = tx_cmplt_get(handle,
    cbbc:	781a      	ldrb	r2, [r3, #0]

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
    cbbe:	9301      	str	r3, [sp, #4]

		cmplt = tx_cmplt_get(handle,
    cbc0:	f7fb fa7e 	bl	80c0 <tx_cmplt_get>
    cbc4:	1e04      	subs	r4, r0, #0
				&_radio.packet_release_first,
				_radio_pdu_node_rx->hdr.onion.
				packet_release_last);
		if (!cmplt) {
    cbc6:	d11d      	bne.n	cc04 <radio_rx_get+0x68>
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
    cbc8:	2374      	movs	r3, #116	; 0x74
			cmplt_curr = 0;
    cbca:	0007      	movs	r7, r0
				packet_release_last);
		if (!cmplt) {
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
    cbcc:	33ff      	adds	r3, #255	; 0xff
    cbce:	5cf3      	ldrb	r3, [r6, r3]
    cbd0:	aa02      	add	r2, sp, #8
    cbd2:	7153      	strb	r3, [r2, #5]
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
    cbd4:	23ba      	movs	r3, #186	; 0xba
    cbd6:	005b      	lsls	r3, r3, #1
    cbd8:	5cf2      	ldrb	r2, [r6, r3]
    cbda:	ab02      	add	r3, sp, #8
    cbdc:	b2d2      	uxtb	r2, r2
    cbde:	1d59      	adds	r1, r3, #5
    cbe0:	1d98      	adds	r0, r3, #6
    cbe2:	f7fb fa6d 	bl	80c0 <tx_cmplt_get>
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
				 (cmplt_prev != cmplt_curr));
    cbe6:	2f00      	cmp	r7, #0
    cbe8:	d001      	beq.n	cbee <radio_rx_get+0x52>

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
    cbea:	0007      	movs	r7, r0
    cbec:	e7f2      	b.n	cbd4 <radio_rx_get+0x38>
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
    cbee:	2800      	cmp	r0, #0
    cbf0:	d1fb      	bne.n	cbea <radio_rx_get+0x4e>
				 (cmplt_prev != cmplt_curr));

			*radio_pdu_node_rx = _radio_pdu_node_rx;
    cbf2:	9b01      	ldr	r3, [sp, #4]
    cbf4:	e007      	b.n	cc06 <radio_rx_get+0x6a>
		} else {
			*radio_pdu_node_rx = NULL;
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    cbf6:	22ba      	movs	r2, #186	; 0xba
    cbf8:	0052      	lsls	r2, r2, #1
    cbfa:	5c9a      	ldrb	r2, [r3, r2]
    cbfc:	b2d2      	uxtb	r2, r2
    cbfe:	f7fb fa5f 	bl	80c0 <tx_cmplt_get>
    cc02:	0004      	movs	r4, r0
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
    cc04:	2300      	movs	r3, #0
	}

	return cmplt;
}
    cc06:	0020      	movs	r0, r4
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
    cc08:	602b      	str	r3, [r5, #0]
	}

	return cmplt;
}
    cc0a:	b005      	add	sp, #20
    cc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc0e:	46c0      	nop			; (mov r8, r8)
    cc10:	20000ea0 	.word	0x20000ea0

0000cc14 <radio_rx_mem_release>:
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
    cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc16:	2680      	movs	r6, #128	; 0x80
    cc18:	0005      	movs	r5, r0
	struct radio_pdu_node_rx *_radio_pdu_node_rx;
	struct connection *conn;

	_radio_pdu_node_rx = *radio_pdu_node_rx;
    cc1a:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
    cc1c:	2800      	cmp	r0, #0
    cc1e:	d021      	beq.n	cc64 <radio_rx_mem_release+0x50>
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;

		switch (_radio_pdu_node_rx_free->hdr.type) {
    cc20:	7903      	ldrb	r3, [r0, #4]
	_radio_pdu_node_rx = *radio_pdu_node_rx;
	while (_radio_pdu_node_rx) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
    cc22:	6807      	ldr	r7, [r0, #0]
    cc24:	2b0c      	cmp	r3, #12
    cc26:	d81a      	bhi.n	cc5e <radio_rx_mem_release+0x4a>
    cc28:	2201      	movs	r2, #1
    cc2a:	409a      	lsls	r2, r3
    cc2c:	0013      	movs	r3, r2
    cc2e:	4a10      	ldr	r2, [pc, #64]	; (cc70 <radio_rx_mem_release+0x5c>)
    cc30:	4c10      	ldr	r4, [pc, #64]	; (cc74 <radio_rx_mem_release+0x60>)
    cc32:	4213      	tst	r3, r2
    cc34:	d10c      	bne.n	cc50 <radio_rx_mem_release+0x3c>
    cc36:	4233      	tst	r3, r6
    cc38:	d011      	beq.n	cc5e <radio_rx_mem_release+0x4a>
			mem_release(_radio_pdu_node_rx_free,
				    &_radio.pkt_rx_data_free);
			break;

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    cc3a:	0023      	movs	r3, r4
    cc3c:	218c      	movs	r1, #140	; 0x8c
    cc3e:	33fc      	adds	r3, #252	; 0xfc
    cc40:	88c2      	ldrh	r2, [r0, #6]
    cc42:	0049      	lsls	r1, r1, #1
    cc44:	6898      	ldr	r0, [r3, #8]
    cc46:	f7f9 fdaa 	bl	679e <mem_get>
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
    cc4a:	0021      	movs	r1, r4
    cc4c:	3109      	adds	r1, #9
    cc4e:	e001      	b.n	cc54 <radio_rx_mem_release+0x40>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
		case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

			mem_release(_radio_pdu_node_rx_free,
    cc50:	0021      	movs	r1, r4
    cc52:	312d      	adds	r1, #45	; 0x2d

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
    cc54:	31ff      	adds	r1, #255	; 0xff
    cc56:	f7f9 fd84 	bl	6762 <mem_release>
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
    cc5a:	0038      	movs	r0, r7
    cc5c:	e7de      	b.n	cc1c <radio_rx_mem_release+0x8>

			mem_release(conn, &_radio.conn_free);
			break;

		default:
			LL_ASSERT(0);
    cc5e:	b662      	cpsie	i
    cc60:	2004      	movs	r0, #4
    cc62:	df02      	svc	2
			break;
		}
	}

	*radio_pdu_node_rx = _radio_pdu_node_rx;
    cc64:	6028      	str	r0, [r5, #0]

	packet_rx_allocate(0xff);
    cc66:	30ff      	adds	r0, #255	; 0xff
    cc68:	f7fb f96c 	bl	7f44 <packet_rx_allocate>
}
    cc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc6e:	46c0      	nop			; (mov r8, r8)
    cc70:	00001f7e 	.word	0x00001f7e
    cc74:	20000ea0 	.word	0x20000ea0

0000cc78 <do_radio_rx_fc_set>:
		_radio.fc_req = req;
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
    cc78:	b530      	push	{r4, r5, lr}
    cc7a:	4b18      	ldr	r3, [pc, #96]	; (ccdc <do_radio_rx_fc_set+0x64>)
    cc7c:	0004      	movs	r4, r0
	if (req == ack) {
    cc7e:	4291      	cmp	r1, r2
    cc80:	d11c      	bne.n	ccbc <do_radio_rx_fc_set+0x44>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    cc82:	001a      	movs	r2, r3
    cc84:	32fc      	adds	r2, #252	; 0xfc
    cc86:	6d15      	ldr	r5, [r2, #80]	; 0x50
    cc88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
				_radio.fc_ack = ack;

				return 1;
			}
		} else {
			return 1;
    cc8a:	2001      	movs	r0, #1
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    cc8c:	42aa      	cmp	r2, r5
    cc8e:	d123      	bne.n	ccd8 <do_radio_rx_fc_set+0x60>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    cc90:	1e0a      	subs	r2, r1, #0
    cc92:	d100      	bne.n	cc96 <do_radio_rx_fc_set+0x1e>
				ack1 = TRIPLE_BUFFER_SIZE;
    cc94:	2203      	movs	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    cc96:	3a01      	subs	r2, #1
    cc98:	b2d2      	uxtb	r2, r2
    cc9a:	0010      	movs	r0, r2
    cc9c:	30b8      	adds	r0, #184	; 0xb8
    cc9e:	0040      	lsls	r0, r0, #1
    cca0:	1818      	adds	r0, r3, r0
    cca2:	80c4      	strh	r4, [r0, #6]
			_radio.fc_ack = ack1;
    cca4:	247e      	movs	r4, #126	; 0x7e
    cca6:	34ff      	adds	r4, #255	; 0xff
    cca8:	551a      	strb	r2, [r3, r4]

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    ccaa:	22be      	movs	r2, #190	; 0xbe
    ccac:	0052      	lsls	r2, r2, #1
    ccae:	5c9a      	ldrb	r2, [r3, r2]
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
    ccb0:	2000      	movs	r0, #0
			}
			_radio.fc_handle[--ack1] = handle;
			_radio.fc_ack = ack1;

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    ccb2:	4291      	cmp	r1, r2
    ccb4:	d010      	beq.n	ccd8 <do_radio_rx_fc_set+0x60>
				_radio.fc_ack = ack;
    ccb6:	5519      	strb	r1, [r3, r4]

				return 1;
    ccb8:	3001      	adds	r0, #1
    ccba:	e00d      	b.n	ccd8 <do_radio_rx_fc_set+0x60>
			}
		} else {
			return 1;
		}
	} else if (((req == 0) &&
    ccbc:	2900      	cmp	r1, #0
    ccbe:	d103      	bne.n	ccc8 <do_radio_rx_fc_set+0x50>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
    ccc0:	22bd      	movs	r2, #189	; 0xbd
    ccc2:	0052      	lsls	r2, r2, #1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
    ccc4:	5a9b      	ldrh	r3, [r3, r2]
    ccc6:	e003      	b.n	ccd0 <do_radio_rx_fc_set+0x58>
		} else {
			return 1;
		}
	} else if (((req == 0) &&
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    ccc8:	31b7      	adds	r1, #183	; 0xb7
    ccca:	0049      	lsls	r1, r1, #1
    cccc:	1859      	adds	r1, r3, r1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
    ccce:	88cb      	ldrh	r3, [r1, #6]
    ccd0:	1b18      	subs	r0, r3, r4
    ccd2:	1e43      	subs	r3, r0, #1
    ccd4:	4198      	sbcs	r0, r3
    ccd6:	b2c0      	uxtb	r0, r0
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
}
    ccd8:	bd30      	pop	{r4, r5, pc}
    ccda:	46c0      	nop			; (mov r8, r8)
    ccdc:	20000ea0 	.word	0x20000ea0

0000cce0 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
    cce0:	22bf      	movs	r2, #191	; 0xbf

	return 0;
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    cce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.fc_ena) {
    cce4:	4b15      	ldr	r3, [pc, #84]	; (cd3c <radio_rx_fc_set+0x5c>)
    cce6:	0052      	lsls	r2, r2, #1
    cce8:	5c9a      	ldrb	r2, [r3, r2]
    ccea:	2a00      	cmp	r2, #0
    ccec:	d101      	bne.n	ccf2 <radio_rx_fc_set+0x12>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    ccee:	2000      	movs	r0, #0
    ccf0:	e022      	b.n	cd38 <radio_rx_fc_set+0x58>
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
    ccf2:	22be      	movs	r2, #190	; 0xbe
		u8_t ack = _radio.fc_ack;
    ccf4:	257e      	movs	r5, #126	; 0x7e
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
    ccf6:	0052      	lsls	r2, r2, #1
    ccf8:	5c9c      	ldrb	r4, [r3, r2]
		u8_t ack = _radio.fc_ack;
    ccfa:	35ff      	adds	r5, #255	; 0xff
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
    ccfc:	b2e4      	uxtb	r4, r4
		u8_t ack = _radio.fc_ack;
    ccfe:	5d5a      	ldrb	r2, [r3, r5]

		if (fc) {
    cd00:	2900      	cmp	r1, #0
    cd02:	d006      	beq.n	cd12 <radio_rx_fc_set+0x32>
			if (handle != 0xffff) {
    cd04:	4b0e      	ldr	r3, [pc, #56]	; (cd40 <radio_rx_fc_set+0x60>)
    cd06:	4298      	cmp	r0, r3
    cd08:	d0f1      	beq.n	ccee <radio_rx_fc_set+0xe>
				return do_radio_rx_fc_set(handle, req, ack);
    cd0a:	0021      	movs	r1, r4
    cd0c:	f7ff ffb4 	bl	cc78 <do_radio_rx_fc_set>
    cd10:	e012      	b.n	cd38 <radio_rx_fc_set+0x58>
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    cd12:	0018      	movs	r0, r3
    cd14:	30fc      	adds	r0, #252	; 0xfc
    cd16:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
    cd18:	6d06      	ldr	r6, [r0, #80]	; 0x50
    cd1a:	42b7      	cmp	r7, r6
    cd1c:	d1e7      	bne.n	ccee <radio_rx_fc_set+0xe>
    cd1e:	4294      	cmp	r4, r2
    cd20:	d0e5      	beq.n	ccee <radio_rx_fc_set+0xe>
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    cd22:	6d00      	ldr	r0, [r0, #80]	; 0x50
				return do_radio_rx_fc_set(handle, req, ack);
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;
    cd24:	555c      	strb	r4, [r3, r5]

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    cd26:	4287      	cmp	r7, r0
    cd28:	d0e1      	beq.n	ccee <radio_rx_fc_set+0xe>
			    (req == _radio.fc_req)) {
    cd2a:	20be      	movs	r0, #190	; 0xbe
    cd2c:	0040      	lsls	r0, r0, #1
    cd2e:	5c18      	ldrb	r0, [r3, r0]
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    cd30:	4284      	cmp	r4, r0
    cd32:	d1dc      	bne.n	ccee <radio_rx_fc_set+0xe>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
    cd34:	0008      	movs	r0, r1
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
			    (req == _radio.fc_req)) {
				_radio.fc_ack = ack;
    cd36:	555a      	strb	r2, [r3, r5]
			}
		}
	}

	return 0;
}
    cd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd3a:	46c0      	nop			; (mov r8, r8)
    cd3c:	20000ea0 	.word	0x20000ea0
    cd40:	0000ffff 	.word	0x0000ffff

0000cd44 <radio_tx_mem_acquire>:

	return 0;
}

struct radio_pdu_node_tx *radio_tx_mem_acquire(void)
{
    cd44:	b510      	push	{r4, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
    cd46:	4803      	ldr	r0, [pc, #12]	; (cd54 <radio_tx_mem_acquire+0x10>)
    cd48:	3061      	adds	r0, #97	; 0x61
    cd4a:	30ff      	adds	r0, #255	; 0xff
    cd4c:	f7f9 fcf0 	bl	6730 <mem_acquire>
}
    cd50:	bd10      	pop	{r4, pc}
    cd52:	46c0      	nop			; (mov r8, r8)
    cd54:	20000ea0 	.word	0x20000ea0

0000cd58 <radio_tx_mem_release>:

void radio_tx_mem_release(struct radio_pdu_node_tx *node_tx)
{
    cd58:	b510      	push	{r4, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
    cd5a:	4903      	ldr	r1, [pc, #12]	; (cd68 <radio_tx_mem_release+0x10>)
    cd5c:	3161      	adds	r1, #97	; 0x61
    cd5e:	31ff      	adds	r1, #255	; 0xff
    cd60:	f7f9 fcff 	bl	6762 <mem_release>
}
    cd64:	bd10      	pop	{r4, pc}
    cd66:	46c0      	nop			; (mov r8, r8)
    cd68:	20000ea0 	.word	0x20000ea0

0000cd6c <radio_tx_mem_enqueue>:
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    cd6c:	23b9      	movs	r3, #185	; 0xb9
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
    cd6e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    cd70:	4c2a      	ldr	r4, [pc, #168]	; (ce1c <radio_tx_mem_enqueue+0xb0>)
    cd72:	005b      	lsls	r3, r3, #1
    cd74:	5ce5      	ldrb	r5, [r4, r3]
	if (last == _radio.packet_tx_count) {
    cd76:	3b02      	subs	r3, #2
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    cd78:	3501      	adds	r5, #1
	if (last == _radio.packet_tx_count) {
    cd7a:	5ce3      	ldrb	r3, [r4, r3]
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    cd7c:	b2ed      	uxtb	r5, r5
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
    cd7e:	b089      	sub	sp, #36	; 0x24
    cd80:	0007      	movs	r7, r0
    cd82:	000e      	movs	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
	if (last == _radio.packet_tx_count) {
    cd84:	42ab      	cmp	r3, r5
    cd86:	d100      	bne.n	cd8a <radio_tx_mem_enqueue+0x1e>
		last = 0;
    cd88:	2500      	movs	r5, #0
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
    cd8a:	0038      	movs	r0, r7
    cd8c:	f7fb f9e6 	bl	815c <connection_get>
    cd90:	1e03      	subs	r3, r0, #0
	if (!conn || (last == _radio.packet_tx_first)) {
    cd92:	d03f      	beq.n	ce14 <radio_tx_mem_enqueue+0xa8>
    cd94:	2272      	movs	r2, #114	; 0x72
    cd96:	32ff      	adds	r2, #255	; 0xff
    cd98:	5ca2      	ldrb	r2, [r4, r2]
    cd9a:	4295      	cmp	r5, r2
    cd9c:	d03a      	beq.n	ce14 <radio_tx_mem_enqueue+0xa8>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
    cd9e:	22b2      	movs	r2, #178	; 0xb2
    cda0:	0052      	lsls	r2, r2, #1
    cda2:	5aa2      	ldrh	r2, [r4, r2]
    cda4:	7971      	ldrb	r1, [r6, #5]
    cda6:	3a07      	subs	r2, #7
    cda8:	4291      	cmp	r1, r2
    cdaa:	d830      	bhi.n	ce0e <radio_tx_mem_enqueue+0xa2>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
    cdac:	0022      	movs	r2, r4
    cdae:	21b9      	movs	r1, #185	; 0xb9
    cdb0:	32fc      	adds	r2, #252	; 0xfc
    cdb2:	0049      	lsls	r1, r1, #1
    cdb4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    cdb6:	5c62      	ldrb	r2, [r4, r1]
    cdb8:	00d2      	lsls	r2, r2, #3
    cdba:	5217      	strh	r7, [r2, r0]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
    cdbc:	5c62      	ldrb	r2, [r4, r1]
    cdbe:	00d2      	lsls	r2, r2, #3
    cdc0:	1882      	adds	r2, r0, r2
    cdc2:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
    cdc4:	5465      	strb	r5, [r4, r1]

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
    cdc6:	001c      	movs	r4, r3
    cdc8:	3444      	adds	r4, #68	; 0x44
    cdca:	3972      	subs	r1, #114	; 0x72
    cdcc:	7822      	ldrb	r2, [r4, #0]
    cdce:	39ff      	subs	r1, #255	; 0xff
    cdd0:	420a      	tst	r2, r1
    cdd2:	d101      	bne.n	cdd8 <radio_tx_mem_enqueue+0x6c>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
    cdd4:	2000      	movs	r0, #0
    cdd6:	e01e      	b.n	ce16 <radio_tx_mem_enqueue+0xaa>
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
	_radio.packet_tx_last = last;

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
    cdd8:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
    cdda:	2800      	cmp	r0, #0
    cddc:	d0fa      	beq.n	cdd4 <radio_tx_mem_enqueue+0x68>
    cdde:	2510      	movs	r5, #16
    cde0:	0010      	movs	r0, r2
    cde2:	4028      	ands	r0, r5
    cde4:	d1f6      	bne.n	cdd4 <radio_tx_mem_enqueue+0x68>
	    (conn->role.slave.latency_cancel == 0)) {
		u32_t ticker_status;

		conn->role.slave.latency_cancel = 1;
    cde6:	432a      	orrs	r2, r5
    cde8:	7022      	strb	r2, [r4, #0]

		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    cdea:	8c1a      	ldrh	r2, [r3, #32]
    cdec:	9306      	str	r3, [sp, #24]
    cdee:	4b0c      	ldr	r3, [pc, #48]	; (ce20 <radio_tx_mem_enqueue+0xb4>)
    cdf0:	3207      	adds	r2, #7
    cdf2:	9305      	str	r3, [sp, #20]
    cdf4:	9103      	str	r1, [sp, #12]
    cdf6:	0003      	movs	r3, r0
    cdf8:	b2d2      	uxtb	r2, r2
    cdfa:	9004      	str	r0, [sp, #16]
    cdfc:	9002      	str	r0, [sp, #8]
    cdfe:	9001      	str	r0, [sp, #4]
    ce00:	9000      	str	r0, [sp, #0]
    ce02:	2103      	movs	r1, #3
    ce04:	f7fa ff2a 	bl	7c5c <ticker_update>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ce08:	2302      	movs	r3, #2
    ce0a:	4398      	bics	r0, r3
    ce0c:	d0e2      	beq.n	cdd4 <radio_tx_mem_enqueue+0x68>
    ce0e:	b662      	cpsie	i
    ce10:	2004      	movs	r0, #4
    ce12:	df02      	svc	2
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
	if (!conn || (last == _radio.packet_tx_first)) {
		return 1;
    ce14:	2001      	movs	r0, #1
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
}
    ce16:	b009      	add	sp, #36	; 0x24
    ce18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce1a:	46c0      	nop			; (mov r8, r8)
    ce1c:	20000ea0 	.word	0x20000ea0
    ce20:	00008d15 	.word	0x00008d15

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
    ce24:	4770      	bx	lr
	...

0000ce28 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
    ce28:	b510      	push	{r4, lr}
    ce2a:	4b09      	ldr	r3, [pc, #36]	; (ce50 <ll_adv_scan_state_cb+0x28>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}

static void rpa_refresh_start(void)
{
	if (!rl_enable) {
    ce2c:	781b      	ldrb	r3, [r3, #0]
	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
	if (bm) {
    ce2e:	2800      	cmp	r0, #0
    ce30:	d008      	beq.n	ce44 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}

static void rpa_refresh_start(void)
{
	if (!rl_enable) {
    ce32:	2b00      	cmp	r3, #0
    ce34:	d00b      	beq.n	ce4e <ll_adv_scan_state_cb+0x26>
		return;
	}

	BT_DBG("");
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
    ce36:	4b07      	ldr	r3, [pc, #28]	; (ce54 <ll_adv_scan_state_cb+0x2c>)
    ce38:	4907      	ldr	r1, [pc, #28]	; (ce58 <ll_adv_scan_state_cb+0x30>)
    ce3a:	681a      	ldr	r2, [r3, #0]
    ce3c:	4807      	ldr	r0, [pc, #28]	; (ce5c <ll_adv_scan_state_cb+0x34>)
    ce3e:	f003 f811 	bl	fe64 <k_delayed_work_submit_to_queue>
    ce42:	e004      	b.n	ce4e <ll_adv_scan_state_cb+0x26>
}

static void rpa_refresh_stop(void)
{
	if (!rl_enable) {
    ce44:	2b00      	cmp	r3, #0
    ce46:	d002      	beq.n	ce4e <ll_adv_scan_state_cb+0x26>
		return;
	}

	k_delayed_work_cancel(&rpa_work);
    ce48:	4803      	ldr	r0, [pc, #12]	; (ce58 <ll_adv_scan_state_cb+0x30>)
    ce4a:	f002 ffd3 	bl	fdf4 <k_delayed_work_cancel>
	if (bm) {
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
	}
}
    ce4e:	bd10      	pop	{r4, pc}
    ce50:	2000193d 	.word	0x2000193d
    ce54:	20001c30 	.word	0x20001c30
    ce58:	20001ba8 	.word	0x20001ba8
    ce5c:	20001c48 	.word	0x20001c48

0000ce60 <radio_adv_enable>:
		       u8_t filter_policy, u8_t rl_idx)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
    ce60:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce62:	b095      	sub	sp, #84	; 0x54
    ce64:	930f      	str	r3, [sp, #60]	; 0x3c
    ce66:	ab1a      	add	r3, sp, #104	; 0x68
    ce68:	781b      	ldrb	r3, [r3, #0]
    ce6a:	910b      	str	r1, [sp, #44]	; 0x2c
    ce6c:	9310      	str	r3, [sp, #64]	; 0x40
    ce6e:	232f      	movs	r3, #47	; 0x2f
    ce70:	a906      	add	r1, sp, #24
    ce72:	185b      	adds	r3, r3, r1
    ce74:	701a      	strb	r2, [r3, #0]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ce76:	2302      	movs	r3, #2
	struct pdu_adv *pdu_adv;
	u16_t ticks_slot;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    ce78:	4dbf      	ldr	r5, [pc, #764]	; (d178 <radio_adv_enable+0x318>)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ce7a:	9313      	str	r3, [sp, #76]	; 0x4c
	struct pdu_adv *pdu_adv;
	u16_t ticks_slot;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    ce7c:	1d6b      	adds	r3, r5, #5
    ce7e:	7fda      	ldrb	r2, [r3, #31]
    ce80:	2301      	movs	r3, #1
		       u8_t filter_policy, u8_t rl_idx)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chan_map, u8_t filter_policy,
		       u8_t rl_idx)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
    ce82:	900e      	str	r0, [sp, #56]	; 0x38
	struct pdu_adv *pdu_adv;
	u16_t ticks_slot;
	u8_t chan_cnt;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
    ce84:	401a      	ands	r2, r3
    ce86:	d000      	beq.n	ce8a <radio_adv_enable+0x2a>
    ce88:	e171      	b.n	d16e <radio_adv_enable+0x30e>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
    ce8a:	002b      	movs	r3, r5
    ce8c:	3376      	adds	r3, #118	; 0x76

	if (_radio.advertiser.is_enabled) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	pdu_adv = (struct pdu_adv *)
    ce8e:	7819      	ldrb	r1, [r3, #0]
    ce90:	2327      	movs	r3, #39	; 0x27
    ce92:	434b      	muls	r3, r1
    ce94:	3320      	adds	r3, #32
    ce96:	18eb      	adds	r3, r5, r3
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    ce98:	79d9      	ldrb	r1, [r3, #7]

	if (_radio.advertiser.is_enabled) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	pdu_adv = (struct pdu_adv *)
    ce9a:	930d      	str	r3, [sp, #52]	; 0x34
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    ce9c:	230f      	movs	r3, #15
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
	} else {
		conn = NULL;
    ce9e:	0016      	movs	r6, r2
	}

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    cea0:	400b      	ands	r3, r1
    cea2:	2b01      	cmp	r3, #1
    cea4:	d900      	bls.n	cea8 <radio_adv_enable+0x48>
    cea6:	e08e      	b.n	cfc6 <radio_adv_enable+0x166>
	    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND)) {
		void *link;

		if (_radio.advertiser.conn) {
    cea8:	4bb4      	ldr	r3, [pc, #720]	; (d17c <radio_adv_enable+0x31c>)
    ceaa:	681c      	ldr	r4, [r3, #0]
    ceac:	2c00      	cmp	r4, #0
    ceae:	d000      	beq.n	ceb2 <radio_adv_enable+0x52>
    ceb0:	e15d      	b.n	d16e <radio_adv_enable+0x30e>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}

		link = mem_acquire(&_radio.link_rx_free);
    ceb2:	48b3      	ldr	r0, [pc, #716]	; (d180 <radio_adv_enable+0x320>)
    ceb4:	f7f9 fc3c 	bl	6730 <mem_acquire>
		if (!link) {
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    ceb8:	2707      	movs	r7, #7

		if (_radio.advertiser.conn) {
			return BT_HCI_ERR_CMD_DISALLOWED;
		}

		link = mem_acquire(&_radio.link_rx_free);
    ceba:	900c      	str	r0, [sp, #48]	; 0x30
		if (!link) {
    cebc:	2800      	cmp	r0, #0
    cebe:	d100      	bne.n	cec2 <radio_adv_enable+0x62>
    cec0:	e156      	b.n	d170 <radio_adv_enable+0x310>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
		}

		conn = mem_acquire(&_radio.conn_free);
    cec2:	0028      	movs	r0, r5
    cec4:	3009      	adds	r0, #9
    cec6:	30ff      	adds	r0, #255	; 0xff
    cec8:	f7f9 fc32 	bl	6730 <mem_acquire>
    cecc:	1e06      	subs	r6, r0, #0
		if (!conn) {
    cece:	d104      	bne.n	ceda <radio_adv_enable+0x7a>
			mem_release(link, &_radio.link_rx_free);
    ced0:	49ab      	ldr	r1, [pc, #684]	; (d180 <radio_adv_enable+0x320>)
    ced2:	980c      	ldr	r0, [sp, #48]	; 0x30
    ced4:	f7f9 fc45 	bl	6762 <mem_release>

			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    ced8:	e14a      	b.n	d170 <radio_adv_enable+0x310>
		}

		conn->handle = 0xFFFF;
    ceda:	2301      	movs	r3, #1
    cedc:	425b      	negs	r3, r3
    cede:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    cee0:	0003      	movs	r3, r0
    cee2:	4aa8      	ldr	r2, [pc, #672]	; (d184 <radio_adv_enable+0x324>)
    cee4:	3398      	adds	r3, #152	; 0x98
    cee6:	601a      	str	r2, [r3, #0]
		conn->data_chan_sel = 0;
    cee8:	2240      	movs	r2, #64	; 0x40
    ceea:	7f03      	ldrb	r3, [r0, #28]
		conn->data_chan_use = 0;
    ceec:	77c4      	strb	r4, [r0, #31]
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
    ceee:	4393      	bics	r3, r2
    cef0:	7703      	strb	r3, [r0, #28]
		conn->data_chan_use = 0;
		conn->event_counter = 0;
    cef2:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
    cef4:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
    cef6:	8544      	strh	r4, [r0, #42]	; 0x2a

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
    cef8:	35fe      	adds	r5, #254	; 0xfe
    cefa:	8c2b      	ldrh	r3, [r5, #32]
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
    cefc:	4694      	mov	ip, r2
		conn->event_counter = 0;
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
    cefe:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    cf00:	231b      	movs	r3, #27
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
    cf02:	0002      	movs	r2, r0
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    cf04:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    cf06:	8603      	strh	r3, [r0, #48]	; 0x30
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
    cf08:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    cf0a:	3232      	adds	r2, #50	; 0x32
    cf0c:	403b      	ands	r3, r7
    cf0e:	0019      	movs	r1, r3
    cf10:	7813      	ldrb	r3, [r2, #0]
		conn->phy_tx = BIT(0);
		conn->phy_pref_flags = 0;
		conn->phy_flags = 0;
    cf12:	4660      	mov	r0, ip
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
    cf14:	43bb      	bics	r3, r7
    cf16:	430b      	orrs	r3, r1
		conn->phy_tx = BIT(0);
    cf18:	2138      	movs	r1, #56	; 0x38
    cf1a:	b2db      	uxtb	r3, r3
    cf1c:	438b      	bics	r3, r1
    cf1e:	3930      	subs	r1, #48	; 0x30
		conn->phy_pref_flags = 0;
    cf20:	430b      	orrs	r3, r1
		conn->phy_flags = 0;
    cf22:	4383      	bics	r3, r0
    cf24:	303f      	adds	r0, #63	; 0x3f
    cf26:	4003      	ands	r3, r0
    cf28:	7013      	strb	r3, [r2, #0]
		conn->phy_pref_rx = _radio.default_phy_rx;
    cf2a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    cf2c:	7855      	ldrb	r5, [r2, #1]
    cf2e:	403b      	ands	r3, r7
    cf30:	43bd      	bics	r5, r7
    cf32:	432b      	orrs	r3, r5
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
    cf34:	0035      	movs	r5, r6
		conn->phy_pref_tx = _radio.default_phy_tx;
		conn->phy_tx = BIT(0);
		conn->phy_pref_flags = 0;
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
		conn->phy_rx = BIT(0);
    cf36:	3847      	subs	r0, #71	; 0x47
    cf38:	b2db      	uxtb	r3, r3
    cf3a:	4383      	bics	r3, r0
    cf3c:	430b      	orrs	r3, r1
    cf3e:	7053      	strb	r3, [r2, #1]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
    cf40:	3544      	adds	r5, #68	; 0x44
    cf42:	782b      	ldrb	r3, [r5, #0]
		conn->role.slave.latency_cancel = 0;
    cf44:	3837      	subs	r0, #55	; 0x37
    cf46:	4303      	orrs	r3, r0
    cf48:	300f      	adds	r0, #15
    cf4a:	4383      	bics	r3, r0
    cf4c:	702b      	strb	r3, [r5, #0]
		conn->role.slave.window_widening_prepare_us = 0;
		conn->role.slave.window_widening_event_us = 0;
		conn->role.slave.ticks_to_offset = 0;
		conn->supervision_expire = 6;
    cf4e:	2306      	movs	r3, #6
    cf50:	86f3      	strh	r3, [r6, #54]	; 0x36
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
    cf52:	0033      	movs	r3, r6
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
    cf54:	2501      	movs	r5, #1
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
    cf56:	3368      	adds	r3, #104	; 0x68
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
    cf58:	1d32      	adds	r2, r6, #4
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
    cf5a:	6534      	str	r4, [r6, #80]	; 0x50
		conn->role.slave.window_widening_event_us = 0;
    cf5c:	6574      	str	r4, [r6, #84]	; 0x54
		conn->role.slave.ticks_to_offset = 0;
    cf5e:	6674      	str	r4, [r6, #100]	; 0x64
		conn->supervision_expire = 6;
		conn->procedure_expire = 0;
    cf60:	8774      	strh	r4, [r6, #58]	; 0x3a

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
    cf62:	87d4      	strh	r4, [r2, #62]	; 0x3e
		conn->appto_expire = 0;
    cf64:	87f4      	strh	r4, [r6, #62]	; 0x3e
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
    cf66:	3298      	adds	r2, #152	; 0x98
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
    cf68:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack = 0;
    cf6a:	705c      	strb	r4, [r3, #1]
		conn->llcp_version.tx = 0;
    cf6c:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_version.rx = 0;
    cf6e:	43ab      	bics	r3, r5
    cf70:	196d      	adds	r5, r5, r5
    cf72:	43ab      	bics	r3, r5
    cf74:	7013      	strb	r3, [r2, #0]
		conn->llcp_terminate.req = 0;
    cf76:	0033      	movs	r3, r6
    cf78:	33a4      	adds	r3, #164	; 0xa4
    cf7a:	701c      	strb	r4, [r3, #0]
		conn->llcp_terminate.ack = 0;
    cf7c:	705c      	strb	r4, [r3, #1]
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    cf7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
		conn->llcp_terminate.req = 0;
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
    cf80:	70dc      	strb	r4, [r3, #3]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    cf82:	3304      	adds	r3, #4
    cf84:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
		conn->llcp_phy.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
    cf86:	0032      	movs	r2, r6
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->llcp_length.req = 0;
    cf88:	731c      	strb	r4, [r3, #12]
		conn->llcp_length.ack = 0;
    cf8a:	735c      	strb	r4, [r3, #13]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
    cf8c:	751c      	strb	r4, [r3, #20]
		conn->llcp_phy.ack = 0;
    cf8e:	755c      	strb	r4, [r3, #21]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
    cf90:	32c0      	adds	r2, #192	; 0xc0
    cf92:	7813      	ldrb	r3, [r2, #0]
		conn->nesn = 0;
    cf94:	3d01      	subs	r5, #1
    cf96:	43ab      	bics	r3, r5
		conn->pause_rx = 0;
    cf98:	3501      	adds	r5, #1
    cf9a:	43ab      	bics	r3, r5
		conn->pause_tx = 0;
    cf9c:	3502      	adds	r5, #2
    cf9e:	43ab      	bics	r3, r5
		conn->enc_rx = 0;
    cfa0:	438b      	bics	r3, r1
		conn->enc_tx = 0;
    cfa2:	4383      	bics	r3, r0
		conn->refresh = 0;
    cfa4:	3118      	adds	r1, #24
    cfa6:	438b      	bics	r3, r1
		conn->empty = 0;
    cfa8:	4661      	mov	r1, ip
    cfaa:	438b      	bics	r3, r1
    cfac:	313f      	adds	r1, #63	; 0x3f
    cfae:	400b      	ands	r3, r1
    cfb0:	7013      	strb	r3, [r2, #0]
		conn->pkt_tx_head = NULL;
    cfb2:	0033      	movs	r3, r6
    cfb4:	33fc      	adds	r3, #252	; 0xfc
    cfb6:	609c      	str	r4, [r3, #8]
		conn->pkt_tx_ctrl = NULL;
    cfb8:	60dc      	str	r4, [r3, #12]
		conn->pkt_tx_data = NULL;
    cfba:	611c      	str	r4, [r3, #16]
		conn->pkt_tx_last = NULL;
    cfbc:	615c      	str	r4, [r3, #20]
		conn->packet_tx_head_len = 0;
    cfbe:	761c      	strb	r4, [r3, #24]
		conn->packet_tx_head_offset = 0;
    cfc0:	765c      	strb	r4, [r3, #25]
		conn->rssi_latest = 0x7F;
		conn->rssi_reported = 0x7F;
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
    cfc2:	4b6e      	ldr	r3, [pc, #440]	; (d17c <radio_adv_enable+0x31c>)
    cfc4:	601e      	str	r6, [r3, #0]
	} else {
		conn = NULL;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
    cfc6:	2307      	movs	r3, #7
    cfc8:	4c6b      	ldr	r4, [pc, #428]	; (d178 <radio_adv_enable+0x318>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chan_map = chan_map;
    cfca:	202f      	movs	r0, #47	; 0x2f
	} else {
		conn = NULL;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
    cfcc:	1da5      	adds	r5, r4, #6
    cfce:	7fe9      	ldrb	r1, [r5, #31]
    cfd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cfd2:	4399      	bics	r1, r3
    cfd4:	401a      	ands	r2, r3
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chan_map = chan_map;
    cfd6:	430a      	orrs	r2, r1
    cfd8:	2138      	movs	r1, #56	; 0x38
    cfda:	af06      	add	r7, sp, #24
    cfdc:	19c0      	adds	r0, r0, r7
    cfde:	7807      	ldrb	r7, [r0, #0]
    cfe0:	438a      	bics	r2, r1
    cfe2:	403b      	ands	r3, r7
    cfe4:	00db      	lsls	r3, r3, #3
	_radio.advertiser.filter_policy = filter_policy;
    cfe6:	4313      	orrs	r3, r2
    cfe8:	223f      	movs	r2, #63	; 0x3f
    cfea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cfec:	4013      	ands	r3, r2
    cfee:	018f      	lsls	r7, r1, #6
    cff0:	433b      	orrs	r3, r7
    cff2:	77eb      	strb	r3, [r5, #31]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	_radio.advertiser.rl_idx = rl_idx;
    cff4:	250f      	movs	r5, #15
    cff6:	1de1      	adds	r1, r4, #7
    cff8:	7fcb      	ldrb	r3, [r1, #31]
    cffa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cffc:	43ab      	bics	r3, r5
    cffe:	402a      	ands	r2, r5
    d000:	4313      	orrs	r3, r2
    d002:	77cb      	strb	r3, [r1, #31]
#else
	ARG_UNUSED(rl_idx);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
    d004:	23c0      	movs	r3, #192	; 0xc0
    d006:	005b      	lsls	r3, r3, #1
	_radio.advertiser.rl_idx = rl_idx;
#else
	ARG_UNUSED(rl_idx);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

	_radio.advertiser.hdr.ticks_active_to_start =
    d008:	58e3      	ldr	r3, [r4, r3]
	_radio.advertiser.hdr.ticks_xtal_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);

	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    d00a:	2101      	movs	r1, #1
	_radio.advertiser.rl_idx = rl_idx;
#else
	ARG_UNUSED(rl_idx);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

	_radio.advertiser.hdr.ticks_active_to_start =
    d00c:	61a3      	str	r3, [r4, #24]
		_radio.ticks_active_to_start;
	_radio.advertiser.hdr.ticks_xtal_to_start =
    d00e:	2327      	movs	r3, #39	; 0x27
    d010:	6163      	str	r3, [r4, #20]
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
    d012:	2300      	movs	r3, #0
    d014:	61e3      	str	r3, [r4, #28]
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);

	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    d016:	f7f9 fc0d 	bl	6834 <util_ones_count_get>

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    d01a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d01c:	79df      	ldrb	r7, [r3, #7]
    d01e:	402f      	ands	r7, r5
    d020:	2f01      	cmp	r7, #1
    d022:	d105      	bne.n	d030 <radio_adv_enable+0x1d0>
		/* Max. chain is DIRECT_IND * channels + CONNECT_IND */
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    d024:	23a7      	movs	r3, #167	; 0xa7
    d026:	009b      	lsls	r3, r3, #2
    d028:	4358      	muls	r0, r3
    d02a:	3039      	adds	r0, #57	; 0x39
    d02c:	30ff      	adds	r0, #255	; 0xff
    d02e:	e006      	b.n	d03e <radio_adv_enable+0x1de>
			      chan_cnt) - 40 + 352;
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    d030:	2f02      	cmp	r7, #2
    d032:	d102      	bne.n	d03a <radio_adv_enable+0x1da>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    d034:	23a9      	movs	r3, #169	; 0xa9
    d036:	009b      	lsls	r3, r3, #2
    d038:	e000      	b.n	d03c <radio_adv_enable+0x1dc>
	} else {
		/* Max. chain is ADV/SCAN_IND + SCAN_REQ + SCAN_RESP */
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
    d03a:	4b53      	ldr	r3, [pc, #332]	; (d188 <radio_adv_enable+0x328>)
    d03c:	4358      	muls	r0, r3
			      152 + 376) * chan_cnt;
	}
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
    d03e:	4a53      	ldr	r2, [pc, #332]	; (d18c <radio_adv_enable+0x32c>)
    d040:	2300      	movs	r3, #0
			      chan_cnt) - 40 + 352;
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
	} else {
		/* Max. chain is ADV/SCAN_IND + SCAN_REQ + SCAN_RESP */
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
    d042:	b280      	uxth	r0, r0
			      152 + 376) * chan_cnt;
	}
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
    d044:	2100      	movs	r1, #0
    d046:	f7f3 fa57 	bl	4f8 <__aeabi_lmul>
    d04a:	2307      	movs	r3, #7
    d04c:	4a50      	ldr	r2, [pc, #320]	; (d190 <radio_adv_enable+0x330>)
    d04e:	f7f3 fa33 	bl	4b8 <__aeabi_uldivmod>

	ticks_slot_offset =
    d052:	6963      	ldr	r3, [r4, #20]
    d054:	69a5      	ldr	r5, [r4, #24]
	} else {
		/* Max. chain is ADV/SCAN_IND + SCAN_REQ + SCAN_RESP */
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
			      152 + 376) * chan_cnt;
	}
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
    d056:	6220      	str	r0, [r4, #32]

	ticks_slot_offset =
    d058:	429d      	cmp	r5, r3
    d05a:	d200      	bcs.n	d05e <radio_adv_enable+0x1fe>
    d05c:	001d      	movs	r5, r3
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    d05e:	2f01      	cmp	r7, #1
    d060:	d13a      	bne.n	d0d8 <radio_adv_enable+0x278>
    d062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d064:	2b00      	cmp	r3, #0
    d066:	d137      	bne.n	d0d8 <radio_adv_enable+0x278>
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
    d068:	f7fa fee4 	bl	7e34 <ticker_ticks_now_get>

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d06c:	ab13      	add	r3, sp, #76	; 0x4c
    d06e:	9308      	str	r3, [sp, #32]
    d070:	4b48      	ldr	r3, [pc, #288]	; (d194 <radio_adv_enable+0x334>)
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
    d072:	0007      	movs	r7, r0

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d074:	9307      	str	r3, [sp, #28]
    d076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d078:	2205      	movs	r2, #5
    d07a:	9306      	str	r3, [sp, #24]
    d07c:	4b46      	ldr	r3, [pc, #280]	; (d198 <radio_adv_enable+0x338>)
    d07e:	2103      	movs	r1, #3
    d080:	9305      	str	r3, [sp, #20]
    d082:	6a23      	ldr	r3, [r4, #32]
    d084:	195d      	adds	r5, r3, r5
    d086:	b2ab      	uxth	r3, r5
    d088:	9304      	str	r3, [sp, #16]
    d08a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d08c:	9501      	str	r5, [sp, #4]
    d08e:	9303      	str	r3, [sp, #12]
    d090:	9302      	str	r3, [sp, #8]
    d092:	9300      	str	r3, [sp, #0]
    d094:	0003      	movs	r3, r0
    d096:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d098:	f7fa fd98 	bl	7bcc <ticker_start>
    d09c:	4d3d      	ldr	r5, [pc, #244]	; (d194 <radio_adv_enable+0x334>)
				   (ticks_slot_offset +
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    d09e:	2802      	cmp	r0, #2
    d0a0:	d014      	beq.n	d0cc <radio_adv_enable+0x26c>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		if (ret_cb != TICKER_STATUS_SUCCESS) {
    d0a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    d0a4:	2800      	cmp	r0, #0
    d0a6:	d152      	bne.n	d14e <radio_adv_enable+0x2ee>
			goto failure_cleanup;
		}

		ret_cb = TICKER_STATUS_BUSY;
    d0a8:	2302      	movs	r3, #2
		ret =
    d0aa:	2203      	movs	r2, #3

		if (ret_cb != TICKER_STATUS_SUCCESS) {
			goto failure_cleanup;
		}

		ret_cb = TICKER_STATUS_BUSY;
    d0ac:	9313      	str	r3, [sp, #76]	; 0x4c
		ret =
    d0ae:	ab13      	add	r3, sp, #76	; 0x4c
    d0b0:	9308      	str	r3, [sp, #32]
    d0b2:	4b3a      	ldr	r3, [pc, #232]	; (d19c <radio_adv_enable+0x33c>)
    d0b4:	9507      	str	r5, [sp, #28]
    d0b6:	9305      	str	r3, [sp, #20]
    d0b8:	4b39      	ldr	r3, [pc, #228]	; (d1a0 <radio_adv_enable+0x340>)
    d0ba:	9006      	str	r0, [sp, #24]
    d0bc:	9300      	str	r3, [sp, #0]
    d0be:	9004      	str	r0, [sp, #16]
    d0c0:	9003      	str	r0, [sp, #12]
    d0c2:	9002      	str	r0, [sp, #8]
    d0c4:	9001      	str	r0, [sp, #4]
    d0c6:	003b      	movs	r3, r7
    d0c8:	0011      	movs	r1, r2
    d0ca:	e026      	b.n	d11a <radio_adv_enable+0x2ba>
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
    d0cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d0ce:	2b02      	cmp	r3, #2
    d0d0:	d1e7      	bne.n	d0a2 <radio_adv_enable+0x242>
				cpu_sleep();
    d0d2:	f7fa fedb 	bl	7e8c <cpu_sleep>
    d0d6:	e7f9      	b.n	d0cc <radio_adv_enable+0x26c>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
    d0d8:	2700      	movs	r7, #0
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d0da:	f7fa feab 	bl	7e34 <ticker_ticks_now_get>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
    d0de:	ab13      	add	r3, sp, #76	; 0x4c
    d0e0:	9308      	str	r3, [sp, #32]
    d0e2:	4b2c      	ldr	r3, [pc, #176]	; (d194 <radio_adv_enable+0x334>)
    d0e4:	9706      	str	r7, [sp, #24]
    d0e6:	9307      	str	r3, [sp, #28]
    d0e8:	4b2b      	ldr	r3, [pc, #172]	; (d198 <radio_adv_enable+0x338>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    d0ea:	900c      	str	r0, [sp, #48]	; 0x30
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
    d0ec:	9305      	str	r3, [sp, #20]
    d0ee:	6a23      	ldr	r3, [r4, #32]
    d0f0:	4a2c      	ldr	r2, [pc, #176]	; (d1a4 <radio_adv_enable+0x344>)
    d0f2:	195d      	adds	r5, r3, r5
    d0f4:	b2ad      	uxth	r5, r5
    d0f6:	2391      	movs	r3, #145	; 0x91
    d0f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d0fa:	0039      	movs	r1, r7
    d0fc:	9504      	str	r5, [sp, #16]
    d0fe:	9703      	str	r7, [sp, #12]
    d100:	9702      	str	r7, [sp, #8]
    d102:	f7f3 f9f9 	bl	4f8 <__aeabi_lmul>
    d106:	4a22      	ldr	r2, [pc, #136]	; (d190 <radio_adv_enable+0x330>)
    d108:	2307      	movs	r3, #7
    d10a:	f7f3 f9d5 	bl	4b8 <__aeabi_uldivmod>
    d10e:	2205      	movs	r2, #5
    d110:	9001      	str	r0, [sp, #4]
    d112:	2103      	movs	r1, #3
    d114:	0038      	movs	r0, r7
    d116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d118:	9700      	str	r7, [sp, #0]
    d11a:	f7fa fd57 	bl	7bcc <ticker_start>
				      _radio.advertiser.hdr.ticks_slot),
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
    d11e:	2802      	cmp	r0, #2
    d120:	d003      	beq.n	d12a <radio_adv_enable+0x2ca>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
    d122:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    d124:	2f00      	cmp	r7, #0
    d126:	d006      	beq.n	d136 <radio_adv_enable+0x2d6>
    d128:	e011      	b.n	d14e <radio_adv_enable+0x2ee>
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
		while (ret_cb == TICKER_STATUS_BUSY) {
    d12a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d12c:	2b02      	cmp	r3, #2
    d12e:	d1f8      	bne.n	d122 <radio_adv_enable+0x2c2>
			cpu_sleep();
    d130:	f7fa feac 	bl	7e8c <cpu_sleep>
    d134:	e7f9      	b.n	d12a <radio_adv_enable+0x2ca>
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
		_radio.advertiser.is_enabled = 1;
    d136:	2001      	movs	r0, #1
    d138:	1d62      	adds	r2, r4, #5
    d13a:	7fd3      	ldrb	r3, [r2, #31]

		if (!_radio.scanner.is_enabled) {
    d13c:	34dc      	adds	r4, #220	; 0xdc
			cpu_sleep();
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
		_radio.advertiser.is_enabled = 1;
    d13e:	4303      	orrs	r3, r0
    d140:	77d3      	strb	r3, [r2, #31]

		if (!_radio.scanner.is_enabled) {
    d142:	7823      	ldrb	r3, [r4, #0]
    d144:	4203      	tst	r3, r0
    d146:	d113      	bne.n	d170 <radio_adv_enable+0x310>
			ll_adv_scan_state_cb(BIT(0));
    d148:	f7ff fe6e 	bl	ce28 <ll_adv_scan_state_cb>
    d14c:	e010      	b.n	d170 <radio_adv_enable+0x310>
		return 0;
	}

failure_cleanup:

	if (conn) {
    d14e:	2e00      	cmp	r6, #0
    d150:	d00d      	beq.n	d16e <radio_adv_enable+0x30e>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    d152:	0021      	movs	r1, r4
    d154:	0033      	movs	r3, r6
    d156:	3145      	adds	r1, #69	; 0x45
    d158:	33a8      	adds	r3, #168	; 0xa8
    d15a:	31ff      	adds	r1, #255	; 0xff
    d15c:	6818      	ldr	r0, [r3, #0]
    d15e:	f7f9 fb00 	bl	6762 <mem_release>
			    onion.link, &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
    d162:	0021      	movs	r1, r4
    d164:	3109      	adds	r1, #9
    d166:	31ff      	adds	r1, #255	; 0xff
    d168:	0030      	movs	r0, r6
    d16a:	f7f9 fafa 	bl	6762 <mem_release>
	}

	return BT_HCI_ERR_CMD_DISALLOWED;
    d16e:	270c      	movs	r7, #12
}
    d170:	0038      	movs	r0, r7
    d172:	b015      	add	sp, #84	; 0x54
    d174:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d176:	46c0      	nop			; (mov r8, r8)
    d178:	20000ea0 	.word	0x20000ea0
    d17c:	20000f68 	.word	0x20000f68
    d180:	20000fe4 	.word	0x20000fe4
    d184:	0000407f 	.word	0x0000407f
    d188:	000005fc 	.word	0x000005fc
    d18c:	3b9aca00 	.word	0x3b9aca00
    d190:	1afd498d 	.word	0x1afd498d
    d194:	00007e95 	.word	0x00007e95
    d198:	00008cd9 	.word	0x00008cd9
    d19c:	00008ac5 	.word	0x00008ac5
    d1a0:	0000a3fe 	.word	0x0000a3fe
    d1a4:	84e72a00 	.word	0x84e72a00

0000d1a8 <radio_adv_disable>:

u32_t radio_adv_disable(void)
{
    d1a8:	b570      	push	{r4, r5, r6, lr}
	u32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
    d1aa:	2103      	movs	r1, #3
    d1ac:	2005      	movs	r0, #5
    d1ae:	f7fa ffed 	bl	818c <role_disable>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}
	}

	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    d1b2:	230c      	movs	r3, #12
{
	u32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
			      RADIO_TICKER_ID_ADV_STOP);
	if (!status) {
    d1b4:	2800      	cmp	r0, #0
    d1b6:	d122      	bne.n	d1fe <radio_adv_disable+0x56>
		struct connection *conn;

		_radio.advertiser.is_enabled = 0;
    d1b8:	4c12      	ldr	r4, [pc, #72]	; (d204 <radio_adv_disable+0x5c>)
    d1ba:	3b0b      	subs	r3, #11
    d1bc:	1d61      	adds	r1, r4, #5
    d1be:	7fca      	ldrb	r2, [r1, #31]
    d1c0:	439a      	bics	r2, r3
    d1c2:	77ca      	strb	r2, [r1, #31]

		if (!_radio.scanner.is_enabled) {
    d1c4:	0022      	movs	r2, r4
    d1c6:	32dc      	adds	r2, #220	; 0xdc
    d1c8:	7810      	ldrb	r0, [r2, #0]
    d1ca:	4018      	ands	r0, r3
    d1cc:	d101      	bne.n	d1d2 <radio_adv_disable+0x2a>
			ll_adv_scan_state_cb(0);
    d1ce:	f7ff fe2b 	bl	ce28 <ll_adv_scan_state_cb>
		}

		conn = _radio.advertiser.conn;
    d1d2:	0023      	movs	r3, r4
    d1d4:	33c8      	adds	r3, #200	; 0xc8
    d1d6:	681d      	ldr	r5, [r3, #0]
		if (conn) {
    d1d8:	2d00      	cmp	r5, #0
    d1da:	d00f      	beq.n	d1fc <radio_adv_disable+0x54>
			_radio.advertiser.conn = NULL;
    d1dc:	2200      	movs	r2, #0

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    d1de:	0021      	movs	r1, r4
			ll_adv_scan_state_cb(0);
		}

		conn = _radio.advertiser.conn;
		if (conn) {
			_radio.advertiser.conn = NULL;
    d1e0:	601a      	str	r2, [r3, #0]

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    d1e2:	002b      	movs	r3, r5
    d1e4:	3145      	adds	r1, #69	; 0x45
    d1e6:	33a8      	adds	r3, #168	; 0xa8
    d1e8:	31ff      	adds	r1, #255	; 0xff
    d1ea:	6818      	ldr	r0, [r3, #0]
    d1ec:	f7f9 fab9 	bl	6762 <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
    d1f0:	0021      	movs	r1, r4
    d1f2:	3109      	adds	r1, #9
    d1f4:	31ff      	adds	r1, #255	; 0xff
    d1f6:	0028      	movs	r0, r5
    d1f8:	f7f9 fab3 	bl	6762 <mem_release>
		}
	}

	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    d1fc:	2300      	movs	r3, #0
}
    d1fe:	0018      	movs	r0, r3
    d200:	bd70      	pop	{r4, r5, r6, pc}
    d202:	46c0      	nop			; (mov r8, r8)
    d204:	20000ea0 	.word	0x20000ea0

0000d208 <radio_rx_dequeue>:
	return cmplt;
}

void radio_rx_dequeue(void)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
    d208:	2300      	movs	r3, #0

	return cmplt;
}

void radio_rx_dequeue(void)
{
    d20a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    d20c:	4d38      	ldr	r5, [pc, #224]	; (d2f0 <radio_rx_dequeue+0xe8>)
	return cmplt;
}

void radio_rx_dequeue(void)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
    d20e:	9301      	str	r3, [sp, #4]
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    d210:	0029      	movs	r1, r5
    d212:	002b      	movs	r3, r5
    d214:	3149      	adds	r1, #73	; 0x49
    d216:	33fc      	adds	r3, #252	; 0xfc
    d218:	6d18      	ldr	r0, [r3, #80]	; 0x50
    d21a:	31ff      	adds	r1, #255	; 0xff
    d21c:	aa01      	add	r2, sp, #4
    d21e:	f7f9 fafa 	bl	6816 <memq_dequeue>
    d222:	002c      	movs	r4, r5
			    (void **)&radio_pdu_node_rx);
	LL_ASSERT(link);
    d224:	2800      	cmp	r0, #0
    d226:	d04b      	beq.n	d2c0 <radio_rx_dequeue+0xb8>

	mem_release(link, &_radio.link_rx_free);
    d228:	0029      	movs	r1, r5
    d22a:	3145      	adds	r1, #69	; 0x45
    d22c:	31ff      	adds	r1, #255	; 0xff
    d22e:	f7f9 fa98 	bl	6762 <mem_release>

	switch (radio_pdu_node_rx->hdr.type) {
    d232:	9b01      	ldr	r3, [sp, #4]
    d234:	7919      	ldrb	r1, [r3, #4]
    d236:	290c      	cmp	r1, #12
    d238:	d842      	bhi.n	d2c0 <radio_rx_dequeue+0xb8>
    d23a:	2201      	movs	r2, #1
    d23c:	408a      	lsls	r2, r1
    d23e:	492d      	ldr	r1, [pc, #180]	; (d2f4 <radio_rx_dequeue+0xec>)
    d240:	420a      	tst	r2, r1
    d242:	d102      	bne.n	d24a <radio_rx_dequeue+0x42>
    d244:	0612      	lsls	r2, r2, #24
    d246:	d40b      	bmi.n	d260 <radio_rx_dequeue+0x58>
    d248:	e03a      	b.n	d2c0 <radio_rx_dequeue+0xb8>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
	case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

		/* release data link credit quota */
		LL_ASSERT(_radio.link_rx_data_quota <
    d24a:	219e      	movs	r1, #158	; 0x9e
    d24c:	20a8      	movs	r0, #168	; 0xa8
    d24e:	0049      	lsls	r1, r1, #1
    d250:	0040      	lsls	r0, r0, #1
    d252:	5c69      	ldrb	r1, [r5, r1]
    d254:	5c2a      	ldrb	r2, [r5, r0]
    d256:	3901      	subs	r1, #1
    d258:	428a      	cmp	r2, r1
    d25a:	da31      	bge.n	d2c0 <radio_rx_dequeue+0xb8>
			  (_radio.packet_rx_count - 1));

		_radio.link_rx_data_quota++;
    d25c:	3201      	adds	r2, #1
    d25e:	542a      	strb	r2, [r5, r0]
	default:
		LL_ASSERT(0);
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    d260:	791a      	ldrb	r2, [r3, #4]
    d262:	2a06      	cmp	r2, #6
    d264:	d142      	bne.n	d2ec <radio_rx_dequeue+0xe4>
		struct pdu_data *pdu_data_rx;
		u8_t bm;

		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    d266:	001a      	movs	r2, r3
    d268:	7adb      	ldrb	r3, [r3, #11]
    d26a:	320b      	adds	r2, #11
    d26c:	2b3c      	cmp	r3, #60	; 0x3c
    d26e:	d004      	beq.n	d27a <radio_rx_dequeue+0x72>
    d270:	7853      	ldrb	r3, [r2, #1]
    d272:	2b00      	cmp	r3, #0
    d274:	d01e      	beq.n	d2b4 <radio_rx_dequeue+0xac>
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
		struct radio_le_conn_cmplt *radio_le_conn_cmplt;
		struct connection *conn = NULL;
    d276:	2500      	movs	r5, #0
    d278:	e004      	b.n	d284 <radio_rx_dequeue+0x7c>
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
    d27a:	0023      	movs	r3, r4
				_radio.advertiser.conn = NULL;
    d27c:	2200      	movs	r2, #0
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
    d27e:	33c8      	adds	r3, #200	; 0xc8
    d280:	681d      	ldr	r5, [r3, #0]
				_radio.advertiser.conn = NULL;
    d282:	601a      	str	r2, [r3, #0]
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
    d284:	2101      	movs	r1, #1
    d286:	1d62      	adds	r2, r4, #5
    d288:	7fd3      	ldrb	r3, [r2, #31]
    d28a:	420b      	tst	r3, r1
    d28c:	d018      	beq.n	d2c0 <radio_rx_dequeue+0xb8>
			_radio.advertiser.is_enabled = 0;
    d28e:	438b      	bics	r3, r1
    d290:	77d3      	strb	r3, [r2, #31]
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
			_radio.scanner.is_enabled = 0;
		}

		if (conn) {
    d292:	2d00      	cmp	r5, #0
    d294:	d019      	beq.n	d2ca <radio_rx_dequeue+0xc2>
			struct radio_pdu_node_rx *node_rx = (void *)
				&conn->llcp_terminate.radio_pdu_node_rx;

			mem_release(node_rx->hdr.onion.link,
    d296:	0021      	movs	r1, r4
    d298:	002b      	movs	r3, r5
    d29a:	3145      	adds	r1, #69	; 0x45
    d29c:	33a8      	adds	r3, #168	; 0xa8
    d29e:	6818      	ldr	r0, [r3, #0]
    d2a0:	31ff      	adds	r1, #255	; 0xff
    d2a2:	f7f9 fa5e 	bl	6762 <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
    d2a6:	0021      	movs	r1, r4
    d2a8:	3109      	adds	r1, #9
    d2aa:	31ff      	adds	r1, #255	; 0xff
    d2ac:	0028      	movs	r0, r5
    d2ae:	f7f9 fa58 	bl	6762 <mem_release>
    d2b2:	e00a      	b.n	d2ca <radio_rx_dequeue+0xc2>
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
			_radio.advertiser.is_enabled = 0;
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
    d2b4:	0022      	movs	r2, r4
    d2b6:	2101      	movs	r1, #1
    d2b8:	32dc      	adds	r2, #220	; 0xdc
    d2ba:	7813      	ldrb	r3, [r2, #0]
    d2bc:	420b      	tst	r3, r1
    d2be:	d102      	bne.n	d2c6 <radio_rx_dequeue+0xbe>
    d2c0:	b662      	cpsie	i
    d2c2:	2004      	movs	r0, #4
    d2c4:	df02      	svc	2
			_radio.scanner.is_enabled = 0;
    d2c6:	438b      	bics	r3, r1
    d2c8:	7013      	strb	r3, [r2, #0]
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    d2ca:	0023      	movs	r3, r4
    d2cc:	33dc      	adds	r3, #220	; 0xdc
    d2ce:	7818      	ldrb	r0, [r3, #0]
		     _radio.advertiser.is_enabled;
    d2d0:	3405      	adds	r4, #5
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    d2d2:	07c0      	lsls	r0, r0, #31
    d2d4:	0fc0      	lsrs	r0, r0, #31
		     _radio.advertiser.is_enabled;

		if (!bm) {
    d2d6:	b2c0      	uxtb	r0, r0
    d2d8:	0043      	lsls	r3, r0, #1
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
		     _radio.advertiser.is_enabled;
    d2da:	7fe0      	ldrb	r0, [r4, #31]
    d2dc:	07c0      	lsls	r0, r0, #31
    d2de:	0fc0      	lsrs	r0, r0, #31

		if (!bm) {
    d2e0:	4318      	orrs	r0, r3
    d2e2:	b240      	sxtb	r0, r0
    d2e4:	2800      	cmp	r0, #0
    d2e6:	d101      	bne.n	d2ec <radio_rx_dequeue+0xe4>
			ll_adv_scan_state_cb(0);
    d2e8:	f7ff fd9e 	bl	ce28 <ll_adv_scan_state_cb>
		}
	}
}
    d2ec:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    d2ee:	46c0      	nop			; (mov r8, r8)
    d2f0:	20000ea0 	.word	0x20000ea0
    d2f4:	00001f7e 	.word	0x00001f7e

0000d2f8 <rtc0_nrf5_isr>:
static void rtc0_nrf5_isr(void *arg)
{
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    d2f8:	4b0a      	ldr	r3, [pc, #40]	; (d324 <rtc0_nrf5_isr+0x2c>)
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    d2fa:	b570      	push	{r4, r5, r6, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    d2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    d2fe:	001c      	movs	r4, r3
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    d300:	6c9d      	ldr	r5, [r3, #72]	; 0x48

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    d302:	2a00      	cmp	r2, #0
    d304:	d003      	beq.n	d30e <rtc0_nrf5_isr+0x16>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    d306:	2000      	movs	r0, #0
    d308:	6458      	str	r0, [r3, #68]	; 0x44

		ticker_trigger(0);
    d30a:	f7fa fc4f 	bl	7bac <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    d30e:	2d00      	cmp	r5, #0
    d310:	d004      	beq.n	d31c <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    d312:	2300      	movs	r3, #0

		ticker_trigger(1);
    d314:	2001      	movs	r0, #1
		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    d316:	64a3      	str	r3, [r4, #72]	; 0x48

		ticker_trigger(1);
    d318:	f7fa fc48 	bl	7bac <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    d31c:	2000      	movs	r0, #0
    d31e:	f7f9 f955 	bl	65cc <mayfly_run>
}
    d322:	bd70      	pop	{r4, r5, r6, pc}
    d324:	4000b0fc 	.word	0x4000b0fc

0000d328 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
    d328:	b510      	push	{r4, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
    d32a:	2001      	movs	r0, #1
    d32c:	f7f9 f94e 	bl	65cc <mayfly_run>
}
    d330:	bd10      	pop	{r4, pc}

0000d332 <rng_nrf5_isr>:

	mayfly_run(MAYFLY_CALL_ID_0);
}

static void rng_nrf5_isr(void *arg)
{
    d332:	b510      	push	{r4, lr}
	isr_rand(arg);
    d334:	f7f9 fef4 	bl	7120 <isr_rand>
}
    d338:	bd10      	pop	{r4, pc}

0000d33a <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
    d33a:	b510      	push	{r4, lr}
{
	isr_radio();
    d33c:	f7f9 fb1c 	bl	6978 <isr_radio>

	ISR_DIRECT_PM();
    d340:	f001 fa82 	bl	e848 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    d344:	f001 f978 	bl	e638 <_IntExit>
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
    d348:	bd10      	pop	{r4, pc}

0000d34a <mayfly_enable_cb>:
	u8_t pub_addr[BDADDR_SIZE];
	u8_t rnd_addr[BDADDR_SIZE];
} _ll_context;

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    d34a:	b510      	push	{r4, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
    d34c:	2901      	cmp	r1, #1
    d34e:	d002      	beq.n	d356 <mayfly_enable_cb+0xc>
    d350:	b662      	cpsie	i
    d352:	2004      	movs	r0, #4
    d354:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    d356:	2018      	movs	r0, #24
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
    d358:	2a00      	cmp	r2, #0
    d35a:	d002      	beq.n	d362 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    d35c:	f001 fa1e 	bl	e79c <_arch_irq_enable>
    d360:	e001      	b.n	d366 <mayfly_enable_cb+0x1c>
	} else {
		irq_disable(SWI4_IRQn);
    d362:	f001 fa25 	bl	e7b0 <_arch_irq_disable>
	}
}
    d366:	bd10      	pop	{r4, pc}

0000d368 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    d368:	b510      	push	{r4, lr}
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
		return irq_is_enabled(RTC0_IRQn);
    d36a:	200b      	movs	r0, #11

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
    d36c:	2900      	cmp	r1, #0
    d36e:	d002      	beq.n	d376 <mayfly_is_enabled+0xe>
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
    d370:	2901      	cmp	r1, #1
    d372:	d103      	bne.n	d37c <mayfly_is_enabled+0x14>
		return irq_is_enabled(SWI4_IRQn);
    d374:	2018      	movs	r0, #24
    d376:	f001 fa25 	bl	e7c4 <_arch_irq_is_enabled>
	}

	LL_ASSERT(0);

	return 0;
}
    d37a:	bd10      	pop	{r4, pc}
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
		return irq_is_enabled(SWI4_IRQn);
	}

	LL_ASSERT(0);
    d37c:	b662      	cpsie	i
    d37e:	2004      	movs	r0, #4
    d380:	df02      	svc	2

0000d382 <mayfly_prio_is_equal>:

	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
    d382:	0003      	movs	r3, r0
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
    d384:	2001      	movs	r0, #1
    d386:	428b      	cmp	r3, r1
    d388:	d008      	beq.n	d39c <mayfly_prio_is_equal+0x1a>
	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
	return (caller_id == callee_id) ||
    d38a:	2b00      	cmp	r3, #0
    d38c:	d101      	bne.n	d392 <mayfly_prio_is_equal+0x10>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
    d38e:	3901      	subs	r1, #1
    d390:	e002      	b.n	d398 <mayfly_prio_is_equal+0x16>
    d392:	2000      	movs	r0, #0
    d394:	2b01      	cmp	r3, #1
    d396:	d101      	bne.n	d39c <mayfly_prio_is_equal+0x1a>
    d398:	4248      	negs	r0, r1
    d39a:	4148      	adcs	r0, r1
	       ((caller_id == MAYFLY_CALL_ID_1) &&
		(callee_id == MAYFLY_CALL_ID_0));
}
    d39c:	4770      	bx	lr
	...

0000d3a0 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    d3a0:	4b07      	ldr	r3, [pc, #28]	; (d3c0 <mayfly_pend+0x20>)
	(void)caller_id;

	switch (callee_id) {
    d3a2:	2900      	cmp	r1, #0
    d3a4:	d004      	beq.n	d3b0 <mayfly_pend+0x10>
    d3a6:	2901      	cmp	r1, #1
    d3a8:	d106      	bne.n	d3b8 <mayfly_pend+0x18>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    d3aa:	2280      	movs	r2, #128	; 0x80
    d3ac:	0452      	lsls	r2, r2, #17
    d3ae:	e001      	b.n	d3b4 <mayfly_pend+0x14>
    d3b0:	2280      	movs	r2, #128	; 0x80
    d3b2:	0112      	lsls	r2, r2, #4
    d3b4:	605a      	str	r2, [r3, #4]
	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
		break;
	}
}
    d3b6:	4770      	bx	lr
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
    d3b8:	b662      	cpsie	i
    d3ba:	2004      	movs	r0, #4
    d3bc:	df02      	svc	2
    d3be:	46c0      	nop			; (mov r8, r8)
    d3c0:	e000e1fc 	.word	0xe000e1fc

0000d3c4 <radio_active_callback>:
	}
}

void radio_active_callback(u8_t active)
{
}
    d3c4:	4770      	bx	lr
	...

0000d3c8 <radio_event_callback>:

void radio_event_callback(void)
{
    d3c8:	b510      	push	{r4, lr}
	k_sem_give(sem_recv);
    d3ca:	4b02      	ldr	r3, [pc, #8]	; (d3d4 <radio_event_callback+0xc>)
    d3cc:	6818      	ldr	r0, [r3, #0]
    d3ce:	f002 fa2f 	bl	f830 <k_sem_give>
}
    d3d2:	bd10      	pop	{r4, pc}
    d3d4:	200014a4 	.word	0x200014a4

0000d3d8 <ll_init>:
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
    d3d8:	b530      	push	{r4, r5, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
    d3da:	4b33      	ldr	r3, [pc, #204]	; (d4a8 <ll_init+0xd0>)
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
    d3dc:	b087      	sub	sp, #28
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
    d3de:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(_rand_context, sizeof(_rand_context));
    d3e0:	2108      	movs	r1, #8
    d3e2:	4832      	ldr	r0, [pc, #200]	; (d4ac <ll_init+0xd4>)
    d3e4:	f7f9 fe4e 	bl	7084 <rand_init>

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    d3e8:	4831      	ldr	r0, [pc, #196]	; (d4b0 <ll_init+0xd8>)
    d3ea:	f001 fb8f 	bl	eb0c <device_get_binding>
	if (!clk_k32) {
    d3ee:	2800      	cmp	r0, #0
    d3f0:	d101      	bne.n	d3f6 <ll_init+0x1e>
		return -ENODEV;
    d3f2:	2013      	movs	r0, #19
    d3f4:	e054      	b.n	d4a0 <ll_init+0xc8>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    d3f6:	6843      	ldr	r3, [r0, #4]
    d3f8:	2101      	movs	r1, #1
    d3fa:	681b      	ldr	r3, [r3, #0]
    d3fc:	4798      	blx	r3
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
    d3fe:	f7f9 fa2b 	bl	6858 <cntr_init>

	mayfly_init();
    d402:	f7f9 f84b 	bl	649c <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    d406:	2203      	movs	r2, #3
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    d408:	2108      	movs	r1, #8
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    d40a:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    d40c:	2402      	movs	r4, #2

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
    d40e:	250d      	movs	r5, #13
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    d410:	4b28      	ldr	r3, [pc, #160]	; (d4b4 <ll_init+0xdc>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    d412:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
    d414:	4a28      	ldr	r2, [pc, #160]	; (d4b8 <ll_init+0xe0>)
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    d416:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    d418:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    d41a:	761c      	strb	r4, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
    d41c:	9202      	str	r2, [sp, #8]
    d41e:	9300      	str	r3, [sp, #0]
    d420:	9501      	str	r5, [sp, #4]
    d422:	2304      	movs	r3, #4
    d424:	4a25      	ldr	r2, [pc, #148]	; (d4bc <ll_init+0xe4>)
    d426:	f7fa fb6d 	bl	7b04 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    d42a:	4825      	ldr	r0, [pc, #148]	; (d4c0 <ll_init+0xe8>)
    d42c:	f001 fb6e 	bl	eb0c <device_get_binding>
	if (!clk_m16) {
    d430:	2800      	cmp	r0, #0
    d432:	d0de      	beq.n	d3f2 <ll_init+0x1a>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
    d434:	23c4      	movs	r3, #196	; 0xc4
    d436:	009b      	lsls	r3, r3, #2
    d438:	9304      	str	r3, [sp, #16]
    d43a:	4b22      	ldr	r3, [pc, #136]	; (d4c4 <ll_init+0xec>)
    d43c:	9400      	str	r4, [sp, #0]
    d43e:	9303      	str	r3, [sp, #12]
    d440:	231b      	movs	r3, #27
    d442:	9302      	str	r3, [sp, #8]
    d444:	9301      	str	r3, [sp, #4]
    d446:	3b1a      	subs	r3, #26
    d448:	001a      	movs	r2, r3
    d44a:	2107      	movs	r1, #7
    d44c:	f7ff f942 	bl	c6d4 <radio_init>
    d450:	1e04      	subs	r4, r0, #0
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
    d452:	d124      	bne.n	d49e <ll_init+0xc6>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
    d454:	2001      	movs	r0, #1
    d456:	f000 fd51 	bl	defc <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn,
    d45a:	0022      	movs	r2, r4
    d45c:	0021      	movs	r1, r4
    d45e:	2001      	movs	r0, #1
    d460:	f001 f9bc 	bl	e7dc <_irq_priority_set>
			   CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
    d464:	0022      	movs	r2, r4
    d466:	0021      	movs	r1, r4
    d468:	200b      	movs	r0, #11
    d46a:	f001 f9b7 	bl	e7dc <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BLUETOOTH_CONTROLLER_JOB_PRIO,
    d46e:	0022      	movs	r2, r4
    d470:	0021      	movs	r1, r4
    d472:	2018      	movs	r0, #24
    d474:	f001 f9b2 	bl	e7dc <_irq_priority_set>
		    swi4_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
    d478:	0022      	movs	r2, r4
    d47a:	2101      	movs	r1, #1
    d47c:	0028      	movs	r0, r5
    d47e:	f001 f9ad 	bl	e7dc <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
    d482:	2001      	movs	r0, #1
    d484:	f001 f98a 	bl	e79c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    d488:	200b      	movs	r0, #11
    d48a:	f001 f987 	bl	e79c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    d48e:	2018      	movs	r0, #24
    d490:	f001 f984 	bl	e79c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
    d494:	0028      	movs	r0, r5
    d496:	f001 f981 	bl	e79c <_arch_irq_enable>

	return 0;
    d49a:	0020      	movs	r0, r4
    d49c:	e001      	b.n	d4a2 <ll_init+0xca>
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
    d49e:	200c      	movs	r0, #12
    d4a0:	4240      	negs	r0, r0
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);
	irq_enable(NRF5_IRQ_RNG_IRQn);

	return 0;
}
    d4a2:	b007      	add	sp, #28
    d4a4:	bd30      	pop	{r4, r5, pc}
    d4a6:	46c0      	nop			; (mov r8, r8)
    d4a8:	200014a4 	.word	0x200014a4
    d4ac:	200016f0 	.word	0x200016f0
    d4b0:	000100c6 	.word	0x000100c6
    d4b4:	20001484 	.word	0x20001484
    d4b8:	200014b4 	.word	0x200014b4
    d4bc:	20001364 	.word	0x20001364
    d4c0:	000100db 	.word	0x000100db
    d4c4:	20001028 	.word	0x20001028

0000d4c8 <ll_addr_get>:
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES); /* The last index in the total tickers */
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    d4c8:	0002      	movs	r2, r0
    d4ca:	b510      	push	{r4, lr}
    d4cc:	0008      	movs	r0, r1
	if (addr_type > 1) {
		return NULL;
    d4ce:	2300      	movs	r3, #0
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
    d4d0:	2a01      	cmp	r2, #1
    d4d2:	d80f      	bhi.n	d4f4 <ll_addr_get+0x2c>
    d4d4:	4c08      	ldr	r4, [pc, #32]	; (d4f8 <ll_addr_get+0x30>)
		return NULL;
	}

	if (addr_type) {
    d4d6:	429a      	cmp	r2, r3
    d4d8:	d004      	beq.n	d4e4 <ll_addr_get+0x1c>
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
		}

		return _ll_context.rnd_addr;
    d4da:	1da3      	adds	r3, r4, #6
		return NULL;
	}

	if (addr_type) {
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
    d4dc:	001c      	movs	r4, r3
	if (addr_type > 1) {
		return NULL;
	}

	if (addr_type) {
		if (bdaddr) {
    d4de:	2900      	cmp	r1, #0
    d4e0:	d103      	bne.n	d4ea <ll_addr_get+0x22>
    d4e2:	e007      	b.n	d4f4 <ll_addr_get+0x2c>

	if (bdaddr) {
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
	}

	return _ll_context.pub_addr;
    d4e4:	0023      	movs	r3, r4
		}

		return _ll_context.rnd_addr;
	}

	if (bdaddr) {
    d4e6:	2900      	cmp	r1, #0
    d4e8:	d004      	beq.n	d4f4 <ll_addr_get+0x2c>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
    d4ea:	2206      	movs	r2, #6
    d4ec:	0021      	movs	r1, r4
    d4ee:	f7f3 fbd2 	bl	c96 <memcpy>
	}

	return _ll_context.pub_addr;
    d4f2:	0023      	movs	r3, r4
}
    d4f4:	0018      	movs	r0, r3
    d4f6:	bd10      	pop	{r4, pc}
    d4f8:	200014a8 	.word	0x200014a8

0000d4fc <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    d4fc:	0003      	movs	r3, r0
    d4fe:	b510      	push	{r4, lr}
    d500:	4803      	ldr	r0, [pc, #12]	; (d510 <ll_addr_set+0x14>)
	if (addr_type) {
    d502:	2b00      	cmp	r3, #0
    d504:	d000      	beq.n	d508 <ll_addr_set+0xc>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
    d506:	3006      	adds	r0, #6
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
    d508:	2206      	movs	r2, #6
    d50a:	f7f3 fbc4 	bl	c96 <memcpy>
	}
}
    d50e:	bd10      	pop	{r4, pc}
    d510:	200014a8 	.word	0x200014a8

0000d514 <wl_peers_find>:
		wl_peers[i].taken = 0;
	}
}

static int wl_peers_find(u8_t addr_type, u8_t *addr)
{
    d514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d516:	0006      	movs	r6, r0
    d518:	000d      	movs	r5, r1
	int i;

	for (i = 0; i < WL_SIZE; i++) {
    d51a:	2400      	movs	r4, #0
		if (LIST_MATCH(wl_peers, i, addr_type, addr)) {
    d51c:	2701      	movs	r7, #1
    d51e:	2307      	movs	r3, #7
    d520:	4363      	muls	r3, r4
    d522:	480d      	ldr	r0, [pc, #52]	; (d558 <wl_peers_find+0x44>)
    d524:	5c1a      	ldrb	r2, [r3, r0]
    d526:	07d1      	lsls	r1, r2, #31
    d528:	d405      	bmi.n	d536 <wl_peers_find+0x22>

static int wl_peers_find(u8_t addr_type, u8_t *addr)
{
	int i;

	for (i = 0; i < WL_SIZE; i++) {
    d52a:	3401      	adds	r4, #1
    d52c:	2c08      	cmp	r4, #8
    d52e:	d1f6      	bne.n	d51e <wl_peers_find+0xa>
		if (LIST_MATCH(wl_peers, i, addr_type, addr)) {
			return i;
		}
	}

	return -1;
    d530:	2001      	movs	r0, #1
    d532:	4240      	negs	r0, r0
    d534:	e00e      	b.n	d554 <wl_peers_find+0x40>
static int wl_peers_find(u8_t addr_type, u8_t *addr)
{
	int i;

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl_peers, i, addr_type, addr)) {
    d536:	0031      	movs	r1, r6
    d538:	0692      	lsls	r2, r2, #26
    d53a:	0fd2      	lsrs	r2, r2, #31
    d53c:	4039      	ands	r1, r7
    d53e:	428a      	cmp	r2, r1
    d540:	d1f3      	bne.n	d52a <wl_peers_find+0x16>
    d542:	3301      	adds	r3, #1
    d544:	18c0      	adds	r0, r0, r3
    d546:	2206      	movs	r2, #6
    d548:	0029      	movs	r1, r5
    d54a:	f7f3 fb8f 	bl	c6c <memcmp>
    d54e:	2800      	cmp	r0, #0
    d550:	d1eb      	bne.n	d52a <wl_peers_find+0x16>
    d552:	0020      	movs	r0, r4
			return i;
		}
	}

	return -1;
}
    d554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d556:	46c0      	nop			; (mov r8, r8)
    d558:	200017e5 	.word	0x200017e5

0000d55c <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
    d55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
    d55e:	2400      	movs	r4, #0

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
    d560:	2624      	movs	r6, #36	; 0x24

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
    d562:	4d14      	ldr	r5, [pc, #80]	; (d5b4 <filter_rl_update+0x58>)
    d564:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
    d566:	706c      	strb	r4, [r5, #1]

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
    d568:	0033      	movs	r3, r6
    d56a:	4363      	muls	r3, r4
    d56c:	4812      	ldr	r0, [pc, #72]	; (d5b8 <filter_rl_update+0x5c>)
    d56e:	5c1b      	ldrb	r3, [r3, r0]
    d570:	075a      	lsls	r2, r3, #29
    d572:	d501      	bpl.n	d578 <filter_rl_update+0x1c>
    d574:	09db      	lsrs	r3, r3, #7
    d576:	d019      	beq.n	d5ac <filter_rl_update+0x50>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    d578:	0032      	movs	r2, r6
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    d57a:	7829      	ldrb	r1, [r5, #0]
	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    d57c:	4362      	muls	r2, r4
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    d57e:	468c      	mov	ip, r1
    d580:	2101      	movs	r1, #1
	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    d582:	1883      	adds	r3, r0, r2
    d584:	785b      	ldrb	r3, [r3, #1]
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    d586:	40a1      	lsls	r1, r4
    d588:	4667      	mov	r7, ip
	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    d58a:	079b      	lsls	r3, r3, #30
    d58c:	0fdb      	lsrs	r3, r3, #31

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d58e:	40a3      	lsls	r3, r4
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    d590:	4339      	orrs	r1, r7
    d592:	7029      	strb	r1, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d594:	7869      	ldrb	r1, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d596:	3202      	adds	r2, #2

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d598:	430b      	orrs	r3, r1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d59a:	1881      	adds	r1, r0, r2
    d59c:	2206      	movs	r2, #6
    d59e:	0010      	movs	r0, r2
    d5a0:	4360      	muls	r0, r4
    d5a2:	3002      	adds	r0, #2
    d5a4:	1828      	adds	r0, r5, r0

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d5a6:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d5a8:	f7f3 fb75 	bl	c96 <memcpy>
	int i;

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    d5ac:	3401      	adds	r4, #1
    d5ae:	2c08      	cmp	r4, #8
    d5b0:	d1da      	bne.n	d568 <filter_rl_update+0xc>
		if (!rl[i].pirk || rl[i].dev) {
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
				      rl[i].id_addr.val);
		}
	}
}
    d5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5b4:	200016f8 	.word	0x200016f8
    d5b8:	2000181d 	.word	0x2000181d

0000d5bc <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
    d5bc:	b510      	push	{r4, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
    d5be:	f7ff f95f 	bl	c880 <radio_adv_is_enabled>
    d5c2:	2300      	movs	r3, #0
    d5c4:	4298      	cmp	r0, r3
    d5c6:	d103      	bne.n	d5d0 <rl_access_check.constprop.1+0x14>
    d5c8:	f7ff f970 	bl	c8ac <radio_scan_is_enabled>
    d5cc:	4243      	negs	r3, r0
    d5ce:	4143      	adcs	r3, r0
}
    d5d0:	0018      	movs	r0, r3
    d5d2:	bd10      	pop	{r4, pc}

0000d5d4 <filter_wl_update>:
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)

static void filter_wl_update(void)
{
    d5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
    d5d6:	2400      	movs	r4, #0
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
    d5d8:	2607      	movs	r6, #7

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
    d5da:	4d1a      	ldr	r5, [pc, #104]	; (d644 <filter_wl_update+0x70>)
    d5dc:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
    d5de:	706c      	strb	r4, [r5, #1]
	filter_clear(&wl);

	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
    d5e0:	4b19      	ldr	r3, [pc, #100]	; (d648 <filter_wl_update+0x74>)
    d5e2:	4a1a      	ldr	r2, [pc, #104]	; (d64c <filter_wl_update+0x78>)
    d5e4:	781b      	ldrb	r3, [r3, #0]
    d5e6:	2b00      	cmp	r3, #0
    d5e8:	d00e      	beq.n	d608 <filter_wl_update+0x34>

	/* Populate filter from wl peers */
	filter_clear(&wl);

	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;
    d5ea:	0033      	movs	r3, r6
    d5ec:	4363      	muls	r3, r4
    d5ee:	5cd3      	ldrb	r3, [r2, r3]
    d5f0:	06db      	lsls	r3, r3, #27
    d5f2:	0f1b      	lsrs	r3, r3, #28

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
    d5f4:	2b0f      	cmp	r3, #15
    d5f6:	d007      	beq.n	d608 <filter_wl_update+0x34>
    d5f8:	2124      	movs	r1, #36	; 0x24
    d5fa:	434b      	muls	r3, r1
    d5fc:	4914      	ldr	r1, [pc, #80]	; (d650 <filter_wl_update+0x7c>)
    d5fe:	5c5b      	ldrb	r3, [r3, r1]
    d600:	0759      	lsls	r1, r3, #29
    d602:	d501      	bpl.n	d608 <filter_wl_update+0x34>
    d604:	09db      	lsrs	r3, r3, #7
    d606:	d018      	beq.n	d63a <filter_wl_update+0x66>
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
    d608:	0031      	movs	r1, r6
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    d60a:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
    d60c:	4361      	muls	r1, r4
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    d60e:	4684      	mov	ip, r0
    d610:	2001      	movs	r0, #1
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
    d612:	5c53      	ldrb	r3, [r2, r1]
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    d614:	40a0      	lsls	r0, r4
    d616:	4667      	mov	r7, ip
	for (i = 0; i < WL_SIZE; i++) {
		int j = wl_peers[i].rl_idx;

		if (!rl_enable || j == RL_IDX_NONE || !rl[j].pirk ||
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
    d618:	069b      	lsls	r3, r3, #26
    d61a:	0fdb      	lsrs	r3, r3, #31
static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d61c:	3101      	adds	r1, #1

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d61e:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d620:	1851      	adds	r1, r2, r1
    d622:	2206      	movs	r2, #6
}

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    d624:	4338      	orrs	r0, r7
    d626:	7028      	strb	r0, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d628:	7868      	ldrb	r0, [r5, #1]
    d62a:	4303      	orrs	r3, r0
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d62c:	0010      	movs	r0, r2
    d62e:	4360      	muls	r0, r4
    d630:	3002      	adds	r0, #2
    d632:	1828      	adds	r0, r5, r0

static void filter_insert(struct ll_filter *filter, int index, u8_t addr_type,
			   u8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d634:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d636:	f7f3 fb2e 	bl	c96 <memcpy>
	int i;

	/* Populate filter from wl peers */
	filter_clear(&wl);

	for (i = 0; i < WL_SIZE; i++) {
    d63a:	3401      	adds	r4, #1
    d63c:	2c08      	cmp	r4, #8
    d63e:	d1cf      	bne.n	d5e0 <filter_wl_update+0xc>
		    rl[j].dev) {
			filter_insert(&wl, i, wl_peers[i].id_addr_type,
				      wl_peers[i].id_addr.val);
		}
	}
}
    d640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d642:	46c0      	nop			; (mov r8, r8)
    d644:	200017b3 	.word	0x200017b3
    d648:	2000193d 	.word	0x2000193d
    d64c:	200017e5 	.word	0x200017e5
    d650:	2000181d 	.word	0x2000181d

0000d654 <ctrl_irks_get>:
#endif

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
u8_t *ctrl_irks_get(u8_t *count)
{
	*count = peer_irk_count;
    d654:	4b02      	ldr	r3, [pc, #8]	; (d660 <ctrl_irks_get+0xc>)
    d656:	781b      	ldrb	r3, [r3, #0]
    d658:	7003      	strb	r3, [r0, #0]
	return (u8_t *)peer_irks;
}
    d65a:	4802      	ldr	r0, [pc, #8]	; (d664 <ctrl_irks_get+0x10>)
    d65c:	4770      	bx	lr
    d65e:	46c0      	nop			; (mov r8, r8)
    d660:	200017b2 	.word	0x200017b2
    d664:	20001732 	.word	0x20001732

0000d668 <ctrl_rl_idx>:

u8_t ctrl_rl_idx(u8_t irkmatch_id)
{
	u8_t i;

	LL_ASSERT(irkmatch_id < peer_irk_count);
    d668:	4b08      	ldr	r3, [pc, #32]	; (d68c <ctrl_rl_idx+0x24>)
    d66a:	781b      	ldrb	r3, [r3, #0]
    d66c:	4283      	cmp	r3, r0
    d66e:	d909      	bls.n	d684 <ctrl_rl_idx+0x1c>
	i = peer_irk_rl_ids[irkmatch_id];
    d670:	4b07      	ldr	r3, [pc, #28]	; (d690 <ctrl_rl_idx+0x28>)
    d672:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE);
    d674:	2807      	cmp	r0, #7
    d676:	d805      	bhi.n	d684 <ctrl_rl_idx+0x1c>
	LL_ASSERT(rl[i].taken);
    d678:	2324      	movs	r3, #36	; 0x24
    d67a:	4343      	muls	r3, r0
    d67c:	4a05      	ldr	r2, [pc, #20]	; (d694 <ctrl_rl_idx+0x2c>)
    d67e:	5c9b      	ldrb	r3, [r3, r2]
    d680:	07db      	lsls	r3, r3, #31
    d682:	d402      	bmi.n	d68a <ctrl_rl_idx+0x22>
    d684:	b662      	cpsie	i
    d686:	2004      	movs	r0, #4
    d688:	df02      	svc	2

	return i;
}
    d68a:	4770      	bx	lr
    d68c:	200017b2 	.word	0x200017b2
    d690:	2000172a 	.word	0x2000172a
    d694:	2000181d 	.word	0x2000181d

0000d698 <ctrl_irk_whitelisted>:

bool ctrl_irk_whitelisted(u8_t rl_idx)
{
	if (rl_idx == RL_IDX_NONE) {
    d698:	280f      	cmp	r0, #15
    d69a:	d010      	beq.n	d6be <ctrl_irk_whitelisted+0x26>
		return false;
	}

	LL_ASSERT(rl_idx < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE);
    d69c:	2807      	cmp	r0, #7
    d69e:	d805      	bhi.n	d6ac <ctrl_irk_whitelisted+0x14>
	LL_ASSERT(rl[rl_idx].taken);
    d6a0:	2324      	movs	r3, #36	; 0x24
    d6a2:	4358      	muls	r0, r3
    d6a4:	4a07      	ldr	r2, [pc, #28]	; (d6c4 <ctrl_irk_whitelisted+0x2c>)
    d6a6:	5c83      	ldrb	r3, [r0, r2]
    d6a8:	07db      	lsls	r3, r3, #31
    d6aa:	d402      	bmi.n	d6b2 <ctrl_irk_whitelisted+0x1a>
    d6ac:	b662      	cpsie	i
    d6ae:	2004      	movs	r0, #4
    d6b0:	df02      	svc	2

	return rl[rl_idx].wl;
    d6b2:	1810      	adds	r0, r2, r0
    d6b4:	7840      	ldrb	r0, [r0, #1]
    d6b6:	07c0      	lsls	r0, r0, #31
    d6b8:	0fc0      	lsrs	r0, r0, #31
    d6ba:	b2c0      	uxtb	r0, r0
    d6bc:	e000      	b.n	d6c0 <ctrl_irk_whitelisted+0x28>
}

bool ctrl_irk_whitelisted(u8_t rl_idx)
{
	if (rl_idx == RL_IDX_NONE) {
		return false;
    d6be:	2000      	movs	r0, #0

	LL_ASSERT(rl_idx < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE);
	LL_ASSERT(rl[rl_idx].taken);

	return rl[rl_idx].wl;
}
    d6c0:	4770      	bx	lr
    d6c2:	46c0      	nop			; (mov r8, r8)
    d6c4:	2000181d 	.word	0x2000181d

0000d6c8 <ctrl_filter_get>:
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
	if (whitelist) {
		return &wl;
    d6c8:	4b02      	ldr	r3, [pc, #8]	; (d6d4 <ctrl_filter_get+0xc>)
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
	if (whitelist) {
    d6ca:	2800      	cmp	r0, #0
    d6cc:	d100      	bne.n	d6d0 <ctrl_filter_get+0x8>
		return &wl;
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return &rl_filter;
    d6ce:	4b02      	ldr	r3, [pc, #8]	; (d6d8 <ctrl_filter_get+0x10>)
#else
	LL_ASSERT(0);
#endif
}
    d6d0:	0018      	movs	r0, r3
    d6d2:	4770      	bx	lr
    d6d4:	200017b3 	.word	0x200017b3
    d6d8:	200016f8 	.word	0x200016f8

0000d6dc <ll_wl_size_get>:
    d6dc:	2008      	movs	r0, #8
    d6de:	4770      	bx	lr

0000d6e0 <ll_wl_clear>:
{
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
    d6e0:	b570      	push	{r4, r5, r6, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d6e2:	f7ff f8d7 	bl	c894 <radio_adv_filter_pol_get>
    d6e6:	2800      	cmp	r0, #0
    d6e8:	d001      	beq.n	d6ee <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d6ea:	200c      	movs	r0, #12
    d6ec:	e012      	b.n	d714 <ll_wl_clear+0x34>
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d6ee:	f7ff f8e7 	bl	c8c0 <radio_scan_filter_pol_get>
    d6f2:	2201      	movs	r2, #1
    d6f4:	4010      	ands	r0, r2
    d6f6:	d1f8      	bne.n	d6ea <ll_wl_clear+0xa>
    d6f8:	0003      	movs	r3, r0
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
    d6fa:	2607      	movs	r6, #7
    d6fc:	4c06      	ldr	r4, [pc, #24]	; (d718 <ll_wl_clear+0x38>)
    d6fe:	0035      	movs	r5, r6
    d700:	435d      	muls	r5, r3
    d702:	5d29      	ldrb	r1, [r5, r4]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
    d704:	3301      	adds	r3, #1
		wl_peers[i].taken = 0;
    d706:	4391      	bics	r1, r2
    d708:	5529      	strb	r1, [r5, r4]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
    d70a:	2b08      	cmp	r3, #8
    d70c:	d1f7      	bne.n	d6fe <ll_wl_clear+0x1e>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();
#else
	filter_clear(&wl);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	wl_anon = 0;
    d70e:	2200      	movs	r2, #0
    d710:	4b02      	ldr	r3, [pc, #8]	; (d71c <ll_wl_clear+0x3c>)
    d712:	701a      	strb	r2, [r3, #0]

	return 0;
}
    d714:	bd70      	pop	{r4, r5, r6, pc}
    d716:	46c0      	nop			; (mov r8, r8)
    d718:	200017e5 	.word	0x200017e5
    d71c:	20001b40 	.word	0x20001b40

0000d720 <ll_wl_remove>:
	return filter_add(&wl, addr->type, addr->a.val);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    d720:	b570      	push	{r4, r5, r6, lr}
    d722:	0006      	movs	r6, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d724:	f7ff f8b6 	bl	c894 <radio_adv_filter_pol_get>
    d728:	2800      	cmp	r0, #0
    d72a:	d001      	beq.n	d730 <ll_wl_remove+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d72c:	240c      	movs	r4, #12
    d72e:	e027      	b.n	d780 <ll_wl_remove+0x60>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d730:	f7ff f8c6 	bl	c8c0 <radio_scan_filter_pol_get>
    d734:	2501      	movs	r5, #1
    d736:	4028      	ands	r0, r5
    d738:	1e04      	subs	r4, r0, #0
    d73a:	d1f7      	bne.n	d72c <ll_wl_remove+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
    d73c:	7830      	ldrb	r0, [r6, #0]
    d73e:	28ff      	cmp	r0, #255	; 0xff
    d740:	d102      	bne.n	d748 <ll_wl_remove+0x28>
		wl_anon = 0;
    d742:	4b10      	ldr	r3, [pc, #64]	; (d784 <ll_wl_remove+0x64>)
    d744:	701c      	strb	r4, [r3, #0]
		return 0;
    d746:	e01b      	b.n	d780 <ll_wl_remove+0x60>
}

static u32_t wl_peers_remove(bt_addr_le_t *id_addr)
{
	/* find the device and mark it as empty */
	int i = wl_peers_find(id_addr->type, id_addr->a.val);
    d748:	1c71      	adds	r1, r6, #1
    d74a:	f7ff fee3 	bl	d514 <wl_peers_find>

	if (i >= 0) {
    d74e:	2800      	cmp	r0, #0
    d750:	db15      	blt.n	d77e <ll_wl_remove+0x5e>
		int j = wl_peers[i].rl_idx;
    d752:	2307      	movs	r3, #7
    d754:	4343      	muls	r3, r0
    d756:	490c      	ldr	r1, [pc, #48]	; (d788 <ll_wl_remove+0x68>)
    d758:	5c5b      	ldrb	r3, [r3, r1]
    d75a:	06db      	lsls	r3, r3, #27
    d75c:	0f1b      	lsrs	r3, r3, #28

		if (j != RL_IDX_NONE) {
    d75e:	2b0f      	cmp	r3, #15
    d760:	d006      	beq.n	d770 <ll_wl_remove+0x50>
			rl[j].wl = 0;
    d762:	2224      	movs	r2, #36	; 0x24
    d764:	4353      	muls	r3, r2
    d766:	4a09      	ldr	r2, [pc, #36]	; (d78c <ll_wl_remove+0x6c>)
    d768:	18d3      	adds	r3, r2, r3
    d76a:	785a      	ldrb	r2, [r3, #1]
    d76c:	43aa      	bics	r2, r5
    d76e:	705a      	strb	r2, [r3, #1]
		}
		wl_peers[i].taken = 0;
    d770:	2307      	movs	r3, #7
    d772:	2201      	movs	r2, #1
    d774:	4358      	muls	r0, r3
    d776:	5c0b      	ldrb	r3, [r1, r0]
    d778:	4393      	bics	r3, r2
    d77a:	540b      	strb	r3, [r1, r0]
    d77c:	e000      	b.n	d780 <ll_wl_remove+0x60>
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d77e:	2402      	movs	r4, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return wl_peers_remove(addr);
#else
	return filter_remove(&wl, addr->type, addr->a.val);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}
    d780:	0020      	movs	r0, r4
    d782:	bd70      	pop	{r4, r5, r6, pc}
    d784:	20001b40 	.word	0x20001b40
    d788:	200017e5 	.word	0x200017e5
    d78c:	2000181d 	.word	0x2000181d

0000d790 <ll_filters_adv_update>:
		}
	}
}

void ll_filters_adv_update(u8_t adv_fp)
{
    d790:	b510      	push	{r4, lr}
	/* enabling advertising */
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
    d792:	2800      	cmp	r0, #0
    d794:	d005      	beq.n	d7a2 <ll_filters_adv_update+0x12>
    d796:	f7ff f893 	bl	c8c0 <radio_scan_filter_pol_get>
    d79a:	07c3      	lsls	r3, r0, #31
    d79c:	d401      	bmi.n	d7a2 <ll_filters_adv_update+0x12>
		/* whitelist not in use, update whitelist */
		filter_wl_update();
    d79e:	f7ff ff19 	bl	d5d4 <filter_wl_update>
	}

	if (rl_enable && !radio_scan_is_enabled()) {
    d7a2:	4b05      	ldr	r3, [pc, #20]	; (d7b8 <ll_filters_adv_update+0x28>)
    d7a4:	781b      	ldrb	r3, [r3, #0]
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d005      	beq.n	d7b6 <ll_filters_adv_update+0x26>
    d7aa:	f7ff f87f 	bl	c8ac <radio_scan_is_enabled>
    d7ae:	2800      	cmp	r0, #0
    d7b0:	d101      	bne.n	d7b6 <ll_filters_adv_update+0x26>
		/* rl not in use, update resolving list LUT */
		filter_rl_update();
    d7b2:	f7ff fed3 	bl	d55c <filter_rl_update>
	}
}
    d7b6:	bd10      	pop	{r4, pc}
    d7b8:	2000193d 	.word	0x2000193d

0000d7bc <ll_rl_find>:
		filter_rl_update();
	}
}

int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
    d7bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int i, free = -RL_IDX_NONE;
    d7be:	260f      	movs	r6, #15

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    d7c0:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    d7c2:	2724      	movs	r7, #36	; 0x24
		filter_rl_update();
	}
}

int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
    d7c4:	9000      	str	r0, [sp, #0]
    d7c6:	9101      	str	r1, [sp, #4]
	int i, free = -RL_IDX_NONE;
    d7c8:	4276      	negs	r6, r6

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    d7ca:	0038      	movs	r0, r7
    d7cc:	4360      	muls	r0, r4
    d7ce:	4d13      	ldr	r5, [pc, #76]	; (d81c <ll_rl_find+0x60>)
    d7d0:	5d43      	ldrb	r3, [r0, r5]
    d7d2:	07db      	lsls	r3, r3, #31
    d7d4:	d405      	bmi.n	d7e2 <ll_rl_find+0x26>
			return i;
		} else if (!rl[i].taken && free == -RL_IDX_NONE) {
    d7d6:	003b      	movs	r3, r7
    d7d8:	4363      	muls	r3, r4
    d7da:	5ceb      	ldrb	r3, [r5, r3]
    d7dc:	07db      	lsls	r3, r3, #31
    d7de:	d417      	bmi.n	d810 <ll_rl_find+0x54>
    d7e0:	e012      	b.n	d808 <ll_rl_find+0x4c>
int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
	int i, free = -RL_IDX_NONE;

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    d7e2:	2101      	movs	r1, #1
    d7e4:	182b      	adds	r3, r5, r0
    d7e6:	785b      	ldrb	r3, [r3, #1]
    d7e8:	9a00      	ldr	r2, [sp, #0]
    d7ea:	079b      	lsls	r3, r3, #30
    d7ec:	0fdb      	lsrs	r3, r3, #31
    d7ee:	400a      	ands	r2, r1
    d7f0:	4293      	cmp	r3, r2
    d7f2:	d1f0      	bne.n	d7d6 <ll_rl_find+0x1a>
    d7f4:	3002      	adds	r0, #2
    d7f6:	1828      	adds	r0, r5, r0
    d7f8:	2206      	movs	r2, #6
    d7fa:	9901      	ldr	r1, [sp, #4]
    d7fc:	f7f3 fa36 	bl	c6c <memcmp>
    d800:	2800      	cmp	r0, #0
    d802:	d1e8      	bne.n	d7d6 <ll_rl_find+0x1a>
    d804:	0020      	movs	r0, r4
    d806:	e007      	b.n	d818 <ll_rl_find+0x5c>
			return i;
		} else if (!rl[i].taken && free == -RL_IDX_NONE) {
    d808:	0033      	movs	r3, r6
    d80a:	330f      	adds	r3, #15
    d80c:	d100      	bne.n	d810 <ll_rl_find+0x54>
    d80e:	4266      	negs	r6, r4

int ll_rl_find(u8_t id_addr_type, u8_t *id_addr)
{
	int i, free = -RL_IDX_NONE;

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    d810:	3401      	adds	r4, #1
    d812:	2c08      	cmp	r4, #8
    d814:	d1d9      	bne.n	d7ca <ll_rl_find+0xe>
    d816:	0030      	movs	r0, r6
			free = -i;
		}
	}

	return free;
}
    d818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d81a:	46c0      	nop			; (mov r8, r8)
    d81c:	2000181d 	.word	0x2000181d

0000d820 <ll_wl_add>:

	return 0;
}

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    d820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d822:	9000      	str	r0, [sp, #0]
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d824:	f7ff f836 	bl	c894 <radio_adv_filter_pol_get>
    d828:	2800      	cmp	r0, #0
    d82a:	d001      	beq.n	d830 <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d82c:	240c      	movs	r4, #12
    d82e:	e055      	b.n	d8dc <ll_wl_add+0xbc>
	return 0;
}

u32_t ll_wl_add(bt_addr_le_t *addr)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d830:	f7ff f846 	bl	c8c0 <radio_scan_filter_pol_get>
    d834:	2301      	movs	r3, #1
    d836:	4018      	ands	r0, r3
    d838:	1e04      	subs	r4, r0, #0
    d83a:	d1f7      	bne.n	d82c <ll_wl_add+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
    d83c:	9a00      	ldr	r2, [sp, #0]
    d83e:	7810      	ldrb	r0, [r2, #0]
    d840:	28ff      	cmp	r0, #255	; 0xff
    d842:	d102      	bne.n	d84a <ll_wl_add+0x2a>
		wl_anon = 1;
    d844:	4a26      	ldr	r2, [pc, #152]	; (d8e0 <ll_wl_add+0xc0>)
    d846:	7013      	strb	r3, [r2, #0]
		return 0;
    d848:	e048      	b.n	d8dc <ll_wl_add+0xbc>
	return -1;
}

static u32_t wl_peers_add(bt_addr_le_t *id_addr)
{
	int i = wl_peers_find(id_addr->type, id_addr->a.val);
    d84a:	9b00      	ldr	r3, [sp, #0]
    d84c:	3301      	adds	r3, #1
    d84e:	0019      	movs	r1, r3
    d850:	9301      	str	r3, [sp, #4]
    d852:	f7ff fe5f 	bl	d514 <wl_peers_find>

	if (i >= 0) {
    d856:	2800      	cmp	r0, #0
    d858:	da3f      	bge.n	d8da <ll_wl_add+0xba>
    d85a:	0027      	movs	r7, r4
		return BT_HCI_ERR_INVALID_PARAM;
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (!wl_peers[i].taken) {
    d85c:	2107      	movs	r1, #7
    d85e:	4d21      	ldr	r5, [pc, #132]	; (d8e4 <ll_wl_add+0xc4>)
    d860:	000e      	movs	r6, r1
    d862:	437e      	muls	r6, r7
    d864:	5d72      	ldrb	r2, [r6, r5]
    d866:	1c13      	adds	r3, r2, #0
    d868:	07d2      	lsls	r2, r2, #31
    d86a:	d431      	bmi.n	d8d0 <ll_wl_add+0xb0>
			int j;

			wl_peers[i].id_addr_type = id_addr->type & 0x1;
    d86c:	2101      	movs	r1, #1
    d86e:	9a00      	ldr	r2, [sp, #0]
			bt_addr_copy(&wl_peers[i].id_addr, &id_addr->a);
    d870:	19a8      	adds	r0, r5, r6

	for (i = 0; i < WL_SIZE; i++) {
		if (!wl_peers[i].taken) {
			int j;

			wl_peers[i].id_addr_type = id_addr->type & 0x1;
    d872:	7812      	ldrb	r2, [r2, #0]
			bt_addr_copy(&wl_peers[i].id_addr, &id_addr->a);
    d874:	3001      	adds	r0, #1

	for (i = 0; i < WL_SIZE; i++) {
		if (!wl_peers[i].taken) {
			int j;

			wl_peers[i].id_addr_type = id_addr->type & 0x1;
    d876:	400a      	ands	r2, r1
    d878:	311f      	adds	r1, #31
    d87a:	0152      	lsls	r2, r2, #5
    d87c:	438b      	bics	r3, r1
    d87e:	4313      	orrs	r3, r2
    d880:	5573      	strb	r3, [r6, r5]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    d882:	2206      	movs	r2, #6
    d884:	9901      	ldr	r1, [sp, #4]
    d886:	f7f3 fa06 	bl	c96 <memcpy>
			bt_addr_copy(&wl_peers[i].id_addr, &id_addr->a);
			/* Get index to Resolving List if applicable */
			j = ll_rl_find(id_addr->type, id_addr->a.val);
    d88a:	9b00      	ldr	r3, [sp, #0]
    d88c:	9901      	ldr	r1, [sp, #4]
    d88e:	7818      	ldrb	r0, [r3, #0]
    d890:	f7ff ff94 	bl	d7bc <ll_rl_find>
    d894:	5d73      	ldrb	r3, [r6, r5]
			if (j >= 0) {
    d896:	2800      	cmp	r0, #0
    d898:	db0f      	blt.n	d8ba <ll_wl_add+0x9a>
				wl_peers[i].rl_idx = j;
    d89a:	220f      	movs	r2, #15
    d89c:	211e      	movs	r1, #30
    d89e:	4002      	ands	r2, r0
    d8a0:	0052      	lsls	r2, r2, #1
    d8a2:	438b      	bics	r3, r1
    d8a4:	4313      	orrs	r3, r2
    d8a6:	5573      	strb	r3, [r6, r5]
				rl[j].wl = 1;
    d8a8:	2324      	movs	r3, #36	; 0x24
    d8aa:	2201      	movs	r2, #1
    d8ac:	4358      	muls	r0, r3
    d8ae:	4b0e      	ldr	r3, [pc, #56]	; (d8e8 <ll_wl_add+0xc8>)
    d8b0:	1818      	adds	r0, r3, r0
    d8b2:	7843      	ldrb	r3, [r0, #1]
    d8b4:	4313      	orrs	r3, r2
    d8b6:	7043      	strb	r3, [r0, #1]
    d8b8:	e002      	b.n	d8c0 <ll_wl_add+0xa0>
			} else {
				wl_peers[i].rl_idx = RL_IDX_NONE;
    d8ba:	221e      	movs	r2, #30
    d8bc:	4313      	orrs	r3, r2
    d8be:	5573      	strb	r3, [r6, r5]
			}
			wl_peers[i].taken = 1;
    d8c0:	2307      	movs	r3, #7
    d8c2:	2001      	movs	r0, #1
    d8c4:	437b      	muls	r3, r7
    d8c6:	4907      	ldr	r1, [pc, #28]	; (d8e4 <ll_wl_add+0xc4>)
    d8c8:	5c5a      	ldrb	r2, [r3, r1]
    d8ca:	4302      	orrs	r2, r0
    d8cc:	545a      	strb	r2, [r3, r1]
    d8ce:	e005      	b.n	d8dc <ll_wl_add+0xbc>

	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
	}

	for (i = 0; i < WL_SIZE; i++) {
    d8d0:	3701      	adds	r7, #1
    d8d2:	2f08      	cmp	r7, #8
    d8d4:	d1c4      	bne.n	d860 <ll_wl_add+0x40>
			wl_peers[i].taken = 1;
			return 0;
		}
	}

	return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    d8d6:	2407      	movs	r4, #7
    d8d8:	e000      	b.n	d8dc <ll_wl_add+0xbc>
static u32_t wl_peers_add(bt_addr_le_t *id_addr)
{
	int i = wl_peers_find(id_addr->type, id_addr->a.val);

	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
    d8da:	2412      	movs	r4, #18
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	return wl_peers_add(addr);
#else
	return filter_add(&wl, addr->type, addr->a.val);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
}
    d8dc:	0020      	movs	r0, r4
    d8de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d8e0:	20001b40 	.word	0x20001b40
    d8e4:	200017e5 	.word	0x200017e5
    d8e8:	2000181d 	.word	0x2000181d

0000d8ec <ctrl_rl_allowed>:

	return free;
}

bool ctrl_rl_allowed(u8_t id_addr_type, u8_t *id_addr)
{
    d8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i, j;

	if (!rl_enable) {
    d8ee:	4b19      	ldr	r3, [pc, #100]	; (d954 <ctrl_rl_allowed+0x68>)

	return free;
}

bool ctrl_rl_allowed(u8_t id_addr_type, u8_t *id_addr)
{
    d8f0:	0006      	movs	r6, r0
	int i, j;

	if (!rl_enable) {
    d8f2:	781b      	ldrb	r3, [r3, #0]
		return true;
    d8f4:	2001      	movs	r0, #1

bool ctrl_rl_allowed(u8_t id_addr_type, u8_t *id_addr)
{
	int i, j;

	if (!rl_enable) {
    d8f6:	2b00      	cmp	r3, #0
    d8f8:	d02a      	beq.n	d950 <ctrl_rl_allowed+0x64>
    d8fa:	2200      	movs	r2, #0
		return true;
	}

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
    d8fc:	4d16      	ldr	r5, [pc, #88]	; (d958 <ctrl_rl_allowed+0x6c>)
    d8fe:	3023      	adds	r0, #35	; 0x23
    d900:	0003      	movs	r3, r0
    d902:	4353      	muls	r3, r2
    d904:	5d5c      	ldrb	r4, [r3, r5]
    d906:	07e4      	lsls	r4, r4, #31
    d908:	d511      	bpl.n	d92e <ctrl_rl_allowed+0x42>
    d90a:	18ec      	adds	r4, r5, r3
    d90c:	7864      	ldrb	r4, [r4, #1]
    d90e:	07a4      	lsls	r4, r4, #30
    d910:	0fe4      	lsrs	r4, r4, #31
    d912:	42b4      	cmp	r4, r6
    d914:	d10b      	bne.n	d92e <ctrl_rl_allowed+0x42>
			u8_t *addr = rl[i].id_addr.val;
			for (j = 0; j < BDADDR_SIZE; j++) {
    d916:	2400      	movs	r4, #0
    d918:	3302      	adds	r3, #2
    d91a:	18eb      	adds	r3, r5, r3
				if (addr[j] != id_addr[j]) {
    d91c:	5d1f      	ldrb	r7, [r3, r4]
    d91e:	46bc      	mov	ip, r7
    d920:	5d0f      	ldrb	r7, [r1, r4]
    d922:	45bc      	cmp	ip, r7
    d924:	d103      	bne.n	d92e <ctrl_rl_allowed+0x42>
	}

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
			u8_t *addr = rl[i].id_addr.val;
			for (j = 0; j < BDADDR_SIZE; j++) {
    d926:	3401      	adds	r4, #1
    d928:	2c06      	cmp	r4, #6
    d92a:	d1f7      	bne.n	d91c <ctrl_rl_allowed+0x30>
    d92c:	e004      	b.n	d938 <ctrl_rl_allowed+0x4c>

	if (!rl_enable) {
		return true;
	}

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    d92e:	3201      	adds	r2, #1
    d930:	2a08      	cmp	r2, #8
    d932:	d1e5      	bne.n	d900 <ctrl_rl_allowed+0x14>
				return !rl[i].pirk || rl[i].dev;
			}
		}
	}

	return false;
    d934:	2000      	movs	r0, #0
    d936:	e00b      	b.n	d950 <ctrl_rl_allowed+0x64>
					break;
				}
			}

			if (j == BDADDR_SIZE) {
				return !rl[i].pirk || rl[i].dev;
    d938:	2324      	movs	r3, #36	; 0x24
    d93a:	435a      	muls	r2, r3
    d93c:	4b06      	ldr	r3, [pc, #24]	; (d958 <ctrl_rl_allowed+0x6c>)
    d93e:	5c9a      	ldrb	r2, [r3, r2]
    d940:	2301      	movs	r3, #1
    d942:	09d0      	lsrs	r0, r2, #7
    d944:	0752      	lsls	r2, r2, #29
    d946:	d501      	bpl.n	d94c <ctrl_rl_allowed+0x60>
    d948:	4018      	ands	r0, r3
    d94a:	e001      	b.n	d950 <ctrl_rl_allowed+0x64>
    d94c:	0018      	movs	r0, r3
    d94e:	e7fb      	b.n	d948 <ctrl_rl_allowed+0x5c>
			}
		}
	}

	return false;
}
    d950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d952:	46c0      	nop			; (mov r8, r8)
    d954:	2000193d 	.word	0x2000193d
    d958:	2000181d 	.word	0x2000181d

0000d95c <ctrl_rl_enabled>:

bool ctrl_rl_enabled(void)
{
	return rl_enable;
    d95c:	4b02      	ldr	r3, [pc, #8]	; (d968 <ctrl_rl_enabled+0xc>)
    d95e:	7818      	ldrb	r0, [r3, #0]
    d960:	1e43      	subs	r3, r0, #1
    d962:	4198      	sbcs	r0, r3
    d964:	b2c0      	uxtb	r0, r0
}
    d966:	4770      	bx	lr
    d968:	2000193d 	.word	0x2000193d

0000d96c <ll_rl_pdu_adv_update>:

#if defined(CONFIG_BLUETOOTH_BROADCASTER)
void ll_rl_pdu_adv_update(int idx, struct pdu_adv *pdu)
{
    d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d96e:	0006      	movs	r6, r0
    d970:	000c      	movs	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
				  &pdu->payload.scan_rsp.addr[0] :
    d972:	1c8f      	adds	r7, r1, #2
				  &pdu->payload.adv_ind.addr[0];

	struct ll_adv_set *ll_adv = ll_adv_set_get();
    d974:	f000 fb0a 	bl	df8c <ll_adv_set_get>
    d978:	0005      	movs	r5, r0

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
    d97a:	2e00      	cmp	r6, #0
    d97c:	db15      	blt.n	d9aa <ll_rl_pdu_adv_update+0x3e>
    d97e:	2124      	movs	r1, #36	; 0x24
    d980:	4371      	muls	r1, r6
    d982:	4a24      	ldr	r2, [pc, #144]	; (da14 <ll_rl_pdu_adv_update+0xa8>)
    d984:	5c8b      	ldrb	r3, [r1, r2]
    d986:	0658      	lsls	r0, r3, #25
    d988:	d50f      	bpl.n	d9aa <ll_rl_pdu_adv_update+0x3e>
		LL_ASSERT(rl[idx].rpas_ready);
    d98a:	079b      	lsls	r3, r3, #30
    d98c:	d402      	bmi.n	d994 <ll_rl_pdu_adv_update+0x28>
    d98e:	b662      	cpsie	i
    d990:	2004      	movs	r0, #4
    d992:	df02      	svc	2
		pdu->tx_addr = 1;
    d994:	2040      	movs	r0, #64	; 0x40
    d996:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa.val, BDADDR_SIZE);
    d998:	1851      	adds	r1, r2, r1
	struct ll_adv_set *ll_adv = ll_adv_set_get();

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
		LL_ASSERT(rl[idx].rpas_ready);
		pdu->tx_addr = 1;
    d99a:	4303      	orrs	r3, r0
    d99c:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa.val, BDADDR_SIZE);
    d99e:	311e      	adds	r1, #30
    d9a0:	2206      	movs	r2, #6
    d9a2:	0038      	movs	r0, r7
    d9a4:	f7f3 f977 	bl	c96 <memcpy>
    d9a8:	e00f      	b.n	d9ca <ll_rl_pdu_adv_update+0x5e>
	} else {
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
    d9aa:	2101      	movs	r1, #1
    d9ac:	2040      	movs	r0, #64	; 0x40
    d9ae:	786b      	ldrb	r3, [r5, #1]
    d9b0:	091b      	lsrs	r3, r3, #4
    d9b2:	400b      	ands	r3, r1
    d9b4:	019a      	lsls	r2, r3, #6
    d9b6:	7823      	ldrb	r3, [r4, #0]
    d9b8:	4383      	bics	r3, r0
    d9ba:	4313      	orrs	r3, r2
    d9bc:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
    d9be:	7868      	ldrb	r0, [r5, #1]
    d9c0:	0900      	lsrs	r0, r0, #4
    d9c2:	4008      	ands	r0, r1
    d9c4:	0039      	movs	r1, r7
    d9c6:	f7ff fd7f 	bl	d4c8 <ll_addr_get>
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    d9ca:	230f      	movs	r3, #15
    d9cc:	7822      	ldrb	r2, [r4, #0]
    d9ce:	4013      	ands	r3, r2
    d9d0:	2b01      	cmp	r3, #1
    d9d2:	d11d      	bne.n	da10 <ll_rl_pdu_adv_update+0xa4>
    d9d4:	0020      	movs	r0, r4
    d9d6:	3008      	adds	r0, #8
		if (idx >= 0 && rl[idx].pirk) {
    d9d8:	2e00      	cmp	r6, #0
    d9da:	db0c      	blt.n	d9f6 <ll_rl_pdu_adv_update+0x8a>
    d9dc:	3323      	adds	r3, #35	; 0x23
    d9de:	435e      	muls	r6, r3
    d9e0:	490c      	ldr	r1, [pc, #48]	; (da14 <ll_rl_pdu_adv_update+0xa8>)
    d9e2:	5c73      	ldrb	r3, [r6, r1]
    d9e4:	075b      	lsls	r3, r3, #29
    d9e6:	d506      	bpl.n	d9f6 <ll_rl_pdu_adv_update+0x8a>
			pdu->rx_addr = 1;
    d9e8:	2380      	movs	r3, #128	; 0x80
    d9ea:	425b      	negs	r3, r3
    d9ec:	431a      	orrs	r2, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
    d9ee:	3618      	adds	r6, #24
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		if (idx >= 0 && rl[idx].pirk) {
			pdu->rx_addr = 1;
    d9f0:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
    d9f2:	1989      	adds	r1, r1, r6
    d9f4:	e009      	b.n	da0a <ll_rl_pdu_adv_update+0x9e>
		} else {
			pdu->rx_addr = ll_adv->id_addr_type;
    d9f6:	786b      	ldrb	r3, [r5, #1]
    d9f8:	7821      	ldrb	r1, [r4, #0]
    d9fa:	065b      	lsls	r3, r3, #25
    d9fc:	0fdb      	lsrs	r3, r3, #31
    d9fe:	01da      	lsls	r2, r3, #7
    da00:	237f      	movs	r3, #127	; 0x7f
    da02:	400b      	ands	r3, r1
    da04:	4313      	orrs	r3, r2
    da06:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       ll_adv->id_addr, BDADDR_SIZE);
    da08:	1ca9      	adds	r1, r5, #2
			pdu->rx_addr = 1;
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
		} else {
			pdu->rx_addr = ll_adv->id_addr_type;
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
    da0a:	2206      	movs	r2, #6
    da0c:	f7f3 f943 	bl	c96 <memcpy>
			       ll_adv->id_addr, BDADDR_SIZE);
		}
	}
}
    da10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da12:	46c0      	nop			; (mov r8, r8)
    da14:	2000181d 	.word	0x2000181d

0000da18 <ll_rl_rpa_update>:

	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
}

void ll_rl_rpa_update(bool timeout)
{
    da18:	b5f0      	push	{r4, r5, r6, r7, lr}
    da1a:	b085      	sub	sp, #20
    da1c:	9003      	str	r0, [sp, #12]
	int i, err;
	s64_t now = k_uptime_get();
    da1e:	f001 ff6f 	bl	f900 <k_uptime_get>
	bool all = timeout || (rpa_last_ms == -1) ||
    da22:	2301      	movs	r3, #1
    da24:	9302      	str	r3, [sp, #8]
    da26:	9b03      	ldr	r3, [sp, #12]
}

void ll_rl_rpa_update(bool timeout)
{
	int i, err;
	s64_t now = k_uptime_get();
    da28:	9000      	str	r0, [sp, #0]
    da2a:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
    da2c:	2b00      	cmp	r3, #0
    da2e:	d117      	bne.n	da60 <ll_rl_rpa_update+0x48>
    da30:	4b53      	ldr	r3, [pc, #332]	; (db80 <ll_rl_rpa_update+0x168>)
    da32:	681a      	ldr	r2, [r3, #0]
    da34:	685b      	ldr	r3, [r3, #4]
    da36:	1c51      	adds	r1, r2, #1
    da38:	d101      	bne.n	da3e <ll_rl_rpa_update+0x26>
    da3a:	1c59      	adds	r1, r3, #1
    da3c:	d010      	beq.n	da60 <ll_rl_rpa_update+0x48>
    da3e:	9800      	ldr	r0, [sp, #0]
    da40:	9901      	ldr	r1, [sp, #4]
    da42:	1a80      	subs	r0, r0, r2
    da44:	4199      	sbcs	r1, r3
    da46:	0002      	movs	r2, r0
    da48:	2000      	movs	r0, #0
    da4a:	000b      	movs	r3, r1
		   (now - rpa_last_ms >= rpa_timeout_ms);
    da4c:	494d      	ldr	r1, [pc, #308]	; (db84 <ll_rl_rpa_update+0x16c>)

void ll_rl_rpa_update(bool timeout)
{
	int i, err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
    da4e:	680c      	ldr	r4, [r1, #0]
    da50:	2101      	movs	r1, #1
    da52:	4298      	cmp	r0, r3
    da54:	dc02      	bgt.n	da5c <ll_rl_rpa_update+0x44>
    da56:	d102      	bne.n	da5e <ll_rl_rpa_update+0x46>
    da58:	4294      	cmp	r4, r2
    da5a:	d900      	bls.n	da5e <ll_rl_rpa_update+0x46>
    da5c:	2100      	movs	r1, #0
    da5e:	9102      	str	r1, [sp, #8]
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    da60:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    da62:	2624      	movs	r6, #36	; 0x24
    da64:	4d48      	ldr	r5, [pc, #288]	; (db88 <ll_rl_rpa_update+0x170>)
    da66:	3508      	adds	r5, #8
    da68:	0032      	movs	r2, r6
    da6a:	4362      	muls	r2, r4
    da6c:	4b46      	ldr	r3, [pc, #280]	; (db88 <ll_rl_rpa_update+0x170>)
    da6e:	5cd2      	ldrb	r2, [r2, r3]
    da70:	07d1      	lsls	r1, r2, #31
    da72:	d527      	bpl.n	dac4 <ll_rl_rpa_update+0xac>
    da74:	9902      	ldr	r1, [sp, #8]
    da76:	2900      	cmp	r1, #0
    da78:	d101      	bne.n	da7e <ll_rl_rpa_update+0x66>
    da7a:	0792      	lsls	r2, r2, #30
    da7c:	d422      	bmi.n	dac4 <ll_rl_rpa_update+0xac>

			if (rl[i].pirk) {
    da7e:	0032      	movs	r2, r6
    da80:	4362      	muls	r2, r4
    da82:	5c98      	ldrb	r0, [r3, r2]
    da84:	0743      	lsls	r3, r0, #29
    da86:	d50a      	bpl.n	da9e <ll_rl_rpa_update+0x86>
				err = bt_rpa_create(peer_irks[rl[i].pirk_idx],
    da88:	0029      	movs	r1, r5
    da8a:	0680      	lsls	r0, r0, #26
    da8c:	0f40      	lsrs	r0, r0, #29
    da8e:	4b3f      	ldr	r3, [pc, #252]	; (db8c <ll_rl_rpa_update+0x174>)
    da90:	0100      	lsls	r0, r0, #4
    da92:	1818      	adds	r0, r3, r0
    da94:	3110      	adds	r1, #16
    da96:	f7f3 ff78 	bl	198a <bt_rpa_create>
						    &rl[i].peer_rpa);
				LL_ASSERT(!err);
    da9a:	2800      	cmp	r0, #0
    da9c:	d15b      	bne.n	db56 <ll_rl_rpa_update+0x13e>
			}
			if (rl[i].lirk) {
    da9e:	0033      	movs	r3, r6
    daa0:	4363      	muls	r3, r4
    daa2:	4f39      	ldr	r7, [pc, #228]	; (db88 <ll_rl_rpa_update+0x170>)
    daa4:	5ddb      	ldrb	r3, [r3, r7]
    daa6:	065b      	lsls	r3, r3, #25
    daa8:	d506      	bpl.n	dab8 <ll_rl_rpa_update+0xa0>
				err = bt_rpa_create(rl[i].local_irk,
    daaa:	0029      	movs	r1, r5
    daac:	0028      	movs	r0, r5
    daae:	3116      	adds	r1, #22
    dab0:	f7f3 ff6b 	bl	198a <bt_rpa_create>
						    &rl[i].local_rpa);
				LL_ASSERT(!err);
    dab4:	2800      	cmp	r0, #0
    dab6:	d14e      	bne.n	db56 <ll_rl_rpa_update+0x13e>
			}

			rl[i].rpas_ready = 1;
    dab8:	0032      	movs	r2, r6
    daba:	2102      	movs	r1, #2
    dabc:	4362      	muls	r2, r4
    dabe:	5cbb      	ldrb	r3, [r7, r2]
    dac0:	430b      	orrs	r3, r1
    dac2:	54bb      	strb	r3, [r7, r2]
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    dac4:	3401      	adds	r4, #1
    dac6:	3524      	adds	r5, #36	; 0x24
    dac8:	2c08      	cmp	r4, #8
    daca:	d1cd      	bne.n	da68 <ll_rl_rpa_update+0x50>

			rl[i].rpas_ready = 1;
		}
	}

	if (all) {
    dacc:	9b02      	ldr	r3, [sp, #8]
    dace:	2b00      	cmp	r3, #0
    dad0:	d004      	beq.n	dadc <ll_rl_rpa_update+0xc4>
		rpa_last_ms = now;
    dad2:	9900      	ldr	r1, [sp, #0]
    dad4:	9a01      	ldr	r2, [sp, #4]
    dad6:	4b2a      	ldr	r3, [pc, #168]	; (db80 <ll_rl_rpa_update+0x168>)
    dad8:	6019      	str	r1, [r3, #0]
    dada:	605a      	str	r2, [r3, #4]
	}

	if (timeout) {
    dadc:	9b03      	ldr	r3, [sp, #12]
    dade:	2b00      	cmp	r3, #0
    dae0:	d04b      	beq.n	db7a <ll_rl_rpa_update+0x162>
#if defined(CONFIG_BLUETOOTH_BROADCASTER)
		if (radio_adv_is_enabled()) {
    dae2:	f7fe fecd 	bl	c880 <radio_adv_is_enabled>
    dae6:	2800      	cmp	r0, #0
    dae8:	d047      	beq.n	db7a <ll_rl_rpa_update+0x162>
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;
	int idx;

	ll_adv = ll_adv_set_get();
    daea:	f000 fa4f 	bl	df8c <ll_adv_set_get>

	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
    daee:	7843      	ldrb	r3, [r0, #1]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;
	int idx;

	ll_adv = ll_adv_set_get();
    daf0:	0007      	movs	r7, r0

	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
    daf2:	069b      	lsls	r3, r3, #26
    daf4:	d541      	bpl.n	db7a <ll_rl_rpa_update+0x162>
	    ll_adv->own_addr_type != BT_ADDR_LE_RANDOM_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
    daf6:	f7fe feb7 	bl	c868 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    dafa:	0003      	movs	r3, r0
    dafc:	334f      	adds	r3, #79	; 0x4f
    dafe:	9302      	str	r3, [sp, #8]
    db00:	781d      	ldrb	r5, [r3, #0]
    db02:	2327      	movs	r3, #39	; 0x27
    db04:	001e      	movs	r6, r3
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    db06:	0002      	movs	r2, r0
	    ll_adv->own_addr_type != BT_ADDR_LE_RANDOM_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    db08:	436e      	muls	r6, r5
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    db0a:	324e      	adds	r2, #78	; 0x4e
    db0c:	7812      	ldrb	r2, [r2, #0]
	    ll_adv->own_addr_type != BT_ADDR_LE_RANDOM_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    db0e:	1986      	adds	r6, r0, r6
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    db10:	42aa      	cmp	r2, r5
    db12:	d104      	bne.n	db1e <ll_rl_rpa_update+0x106>
		last = radio_adv_data->last + 1;
    db14:	3501      	adds	r5, #1
    db16:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    db18:	2d02      	cmp	r5, #2
    db1a:	d100      	bne.n	db1e <ll_rl_rpa_update+0x106>
			last = 0;
    db1c:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
    db1e:	210f      	movs	r1, #15
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    db20:	436b      	muls	r3, r5
    db22:	18c4      	adds	r4, r0, r3
	pdu->type = prev->type;
    db24:	7833      	ldrb	r3, [r6, #0]
    db26:	400b      	ands	r3, r1
    db28:	001a      	movs	r2, r3
    db2a:	7823      	ldrb	r3, [r4, #0]
    db2c:	438b      	bics	r3, r1
	pdu->rfu = 0;
    db2e:	4313      	orrs	r3, r2
    db30:	2210      	movs	r2, #16
    db32:	4393      	bics	r3, r2
    db34:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    db36:	2320      	movs	r3, #32
    db38:	7832      	ldrb	r2, [r6, #0]
    db3a:	3111      	adds	r1, #17
    db3c:	401a      	ands	r2, r3
    db3e:	7823      	ldrb	r3, [r4, #0]
    db40:	438b      	bics	r3, r1
    db42:	4313      	orrs	r3, r2
    db44:	7023      	strb	r3, [r4, #0]
	} else {
		pdu->chan_sel = 0;
	}

	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr);
    db46:	7878      	ldrb	r0, [r7, #1]
    db48:	1cb9      	adds	r1, r7, #2
    db4a:	0640      	lsls	r0, r0, #25
    db4c:	0fc0      	lsrs	r0, r0, #31
    db4e:	f7ff fe35 	bl	d7bc <ll_rl_find>
	LL_ASSERT(idx >= 0);
    db52:	2800      	cmp	r0, #0
    db54:	da02      	bge.n	db5c <ll_rl_rpa_update+0x144>
    db56:	b662      	cpsie	i
    db58:	2004      	movs	r0, #4
    db5a:	df02      	svc	2
	ll_rl_pdu_adv_update(idx, pdu);
    db5c:	0021      	movs	r1, r4
    db5e:	f7ff ff05 	bl	d96c <ll_rl_pdu_adv_update>

	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
    db62:	0031      	movs	r1, r6
    db64:	0020      	movs	r0, r4
    db66:	7872      	ldrb	r2, [r6, #1]
    db68:	3108      	adds	r1, #8
    db6a:	3a06      	subs	r2, #6
    db6c:	3008      	adds	r0, #8
    db6e:	f7f3 f892 	bl	c96 <memcpy>
	       prev->len - BDADDR_SIZE);
	pdu->len = prev->len;
    db72:	7873      	ldrb	r3, [r6, #1]
    db74:	7063      	strb	r3, [r4, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    db76:	9b02      	ldr	r3, [sp, #8]
    db78:	701d      	strb	r5, [r3, #0]
		if (radio_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
    db7a:	b005      	add	sp, #20
    db7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db7e:	46c0      	nop			; (mov r8, r8)
    db80:	20001b38 	.word	0x20001b38
    db84:	20001c30 	.word	0x20001c30
    db88:	2000181d 	.word	0x2000181d
    db8c:	20001732 	.word	0x20001732

0000db90 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
    db90:	b510      	push	{r4, lr}
	ll_rl_rpa_update(true);
    db92:	2001      	movs	r0, #1
    db94:	f7ff ff40 	bl	da18 <ll_rl_rpa_update>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
    db98:	4b03      	ldr	r3, [pc, #12]	; (dba8 <rpa_timeout+0x18>)
    db9a:	4904      	ldr	r1, [pc, #16]	; (dbac <rpa_timeout+0x1c>)
    db9c:	681a      	ldr	r2, [r3, #0]
    db9e:	4804      	ldr	r0, [pc, #16]	; (dbb0 <rpa_timeout+0x20>)
    dba0:	f002 f960 	bl	fe64 <k_delayed_work_submit_to_queue>
}
    dba4:	bd10      	pop	{r4, pc}
    dba6:	46c0      	nop			; (mov r8, r8)
    dba8:	20001c30 	.word	0x20001c30
    dbac:	20001ba8 	.word	0x20001ba8
    dbb0:	20001c48 	.word	0x20001c48

0000dbb4 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
}
    dbb4:	2008      	movs	r0, #8
    dbb6:	4770      	bx	lr

0000dbb8 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
    dbb8:	b570      	push	{r4, r5, r6, lr}
	if (!rl_access_check(false)) {
    dbba:	f7ff fcff 	bl	d5bc <rl_access_check.constprop.1>
    dbbe:	0003      	movs	r3, r0
		return BT_HCI_ERR_CMD_DISALLOWED;
    dbc0:	200c      	movs	r0, #12
	return CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
}

u32_t ll_rl_clear(void)
{
	if (!rl_access_check(false)) {
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	d00e      	beq.n	dbe4 <ll_rl_clear+0x2c>
    dbc6:	2300      	movs	r3, #0
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
    dbc8:	2524      	movs	r5, #36	; 0x24
    dbca:	2401      	movs	r4, #1
    dbcc:	4906      	ldr	r1, [pc, #24]	; (dbe8 <ll_rl_clear+0x30>)
    dbce:	0028      	movs	r0, r5
    dbd0:	4358      	muls	r0, r3
    dbd2:	5c42      	ldrb	r2, [r0, r1]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    dbd4:	3301      	adds	r3, #1
		rl[i].taken = 0;
    dbd6:	43a2      	bics	r2, r4
    dbd8:	5442      	strb	r2, [r0, r1]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    dbda:	2b08      	cmp	r3, #8
    dbdc:	d1f7      	bne.n	dbce <ll_rl_clear+0x16>
		rl[i].taken = 0;
	}

	peer_irk_count = 0;
    dbde:	2000      	movs	r0, #0
    dbe0:	4b02      	ldr	r3, [pc, #8]	; (dbec <ll_rl_clear+0x34>)
    dbe2:	7018      	strb	r0, [r3, #0]
	}

	rl_clear();

	return 0;
}
    dbe4:	bd70      	pop	{r4, r5, r6, pc}
    dbe6:	46c0      	nop			; (mov r8, r8)
    dbe8:	2000181d 	.word	0x2000181d
    dbec:	200017b2 	.word	0x200017b2

0000dbf0 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
    dbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbf2:	b085      	sub	sp, #20
    dbf4:	9000      	str	r0, [sp, #0]
    dbf6:	9102      	str	r1, [sp, #8]
    dbf8:	9203      	str	r2, [sp, #12]
	int i, j;

	if (!rl_access_check(false)) {
    dbfa:	f7ff fcdf 	bl	d5bc <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
    dbfe:	240c      	movs	r4, #12
u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
	int i, j;

	if (!rl_access_check(false)) {
    dc00:	2800      	cmp	r0, #0
    dc02:	d100      	bne.n	dc06 <ll_rl_add+0x16>
    dc04:	e085      	b.n	dd12 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val);
    dc06:	9b00      	ldr	r3, [sp, #0]
	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
    dc08:	3406      	adds	r4, #6

	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val);
    dc0a:	3301      	adds	r3, #1
    dc0c:	9301      	str	r3, [sp, #4]
    dc0e:	9b00      	ldr	r3, [sp, #0]
    dc10:	9901      	ldr	r1, [sp, #4]
    dc12:	7818      	ldrb	r0, [r3, #0]
    dc14:	f7ff fdd2 	bl	d7bc <ll_rl_find>
	if (i >= 0) {
    dc18:	2800      	cmp	r0, #0
    dc1a:	da7a      	bge.n	dd12 <ll_rl_add+0x122>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (i == -RL_IDX_NONE) {
    dc1c:	0003      	movs	r3, r0
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    dc1e:	3c0b      	subs	r4, #11
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (i == -RL_IDX_NONE) {
    dc20:	330f      	adds	r3, #15
    dc22:	d076      	beq.n	dd12 <ll_rl_add+0x122>
	}

	/* Device not found but empty slot found */
	i = -i;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    dc24:	2624      	movs	r6, #36	; 0x24
	} else if (i == -RL_IDX_NONE) {
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
	}

	/* Device not found but empty slot found */
	i = -i;
    dc26:	4247      	negs	r7, r0

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    dc28:	437e      	muls	r6, r7
    dc2a:	4d3b      	ldr	r5, [pc, #236]	; (dd18 <ll_rl_add+0x128>)
    dc2c:	2206      	movs	r2, #6
    dc2e:	19ab      	adds	r3, r5, r6
    dc30:	1c98      	adds	r0, r3, #2
    dc32:	9901      	ldr	r1, [sp, #4]
    dc34:	f7f3 f82f 	bl	c96 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
    dc38:	2201      	movs	r2, #1
    dc3a:	2102      	movs	r1, #2
    dc3c:	9b00      	ldr	r3, [sp, #0]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    dc3e:	9802      	ldr	r0, [sp, #8]

	/* Device not found but empty slot found */
	i = -i;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
	rl[i].id_addr_type = id_addr->type & 0x1;
    dc40:	781b      	ldrb	r3, [r3, #0]
    dc42:	4013      	ands	r3, r2
    dc44:	005a      	lsls	r2, r3, #1
    dc46:	19ab      	adds	r3, r5, r6
    dc48:	785b      	ldrb	r3, [r3, #1]
    dc4a:	438b      	bics	r3, r1
    dc4c:	4313      	orrs	r3, r2
    dc4e:	19aa      	adds	r2, r5, r6
    dc50:	7053      	strb	r3, [r2, #1]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    dc52:	310e      	adds	r1, #14
    dc54:	f7f8 fdbe 	bl	67d4 <mem_nz>
    dc58:	2301      	movs	r3, #1
    dc5a:	2204      	movs	r2, #4
    dc5c:	4018      	ands	r0, r3
    dc5e:	0083      	lsls	r3, r0, #2
    dc60:	5d70      	ldrb	r0, [r6, r5]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    dc62:	2110      	movs	r1, #16
	/* Device not found but empty slot found */
	i = -i;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
	rl[i].id_addr_type = id_addr->type & 0x1;
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    dc64:	4390      	bics	r0, r2
    dc66:	4318      	orrs	r0, r3
    dc68:	5570      	strb	r0, [r6, r5]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    dc6a:	9803      	ldr	r0, [sp, #12]
    dc6c:	f7f8 fdb2 	bl	67d4 <mem_nz>
    dc70:	2301      	movs	r3, #1
    dc72:	2240      	movs	r2, #64	; 0x40
    dc74:	4003      	ands	r3, r0
    dc76:	0198      	lsls	r0, r3, #6
    dc78:	5d73      	ldrb	r3, [r6, r5]
    dc7a:	4393      	bics	r3, r2
    dc7c:	4303      	orrs	r3, r0
    dc7e:	5573      	strb	r3, [r6, r5]
	if (rl[i].pirk) {
    dc80:	075a      	lsls	r2, r3, #29
    dc82:	d512      	bpl.n	dcaa <ll_rl_add+0xba>
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
    dc84:	2138      	movs	r1, #56	; 0x38
    dc86:	4a25      	ldr	r2, [pc, #148]	; (dd1c <ll_rl_add+0x12c>)
    dc88:	438b      	bics	r3, r1
    dc8a:	7810      	ldrb	r0, [r2, #0]
		peer_irk_rl_ids[peer_irk_count] = i;
		memcpy(peer_irks[peer_irk_count++], pirk, 16);
    dc8c:	9902      	ldr	r1, [sp, #8]
	rl[i].id_addr_type = id_addr->type & 0x1;
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
	if (rl[i].pirk) {
		/* cross-reference */
		rl[i].pirk_idx = peer_irk_count;
    dc8e:	4004      	ands	r4, r0
    dc90:	00e4      	lsls	r4, r4, #3
    dc92:	4323      	orrs	r3, r4
    dc94:	5573      	strb	r3, [r6, r5]
		peer_irk_rl_ids[peer_irk_count] = i;
    dc96:	4b22      	ldr	r3, [pc, #136]	; (dd20 <ll_rl_add+0x130>)
    dc98:	541f      	strb	r7, [r3, r0]
		memcpy(peer_irks[peer_irk_count++], pirk, 16);
    dc9a:	1c43      	adds	r3, r0, #1
    dc9c:	7013      	strb	r3, [r2, #0]
    dc9e:	4b21      	ldr	r3, [pc, #132]	; (dd24 <ll_rl_add+0x134>)
    dca0:	0100      	lsls	r0, r0, #4
    dca2:	1818      	adds	r0, r3, r0
    dca4:	2210      	movs	r2, #16
    dca6:	f7f2 fff6 	bl	c96 <memcpy>
	}
	if (rl[i].lirk) {
    dcaa:	2024      	movs	r0, #36	; 0x24
    dcac:	4378      	muls	r0, r7
    dcae:	4e1a      	ldr	r6, [pc, #104]	; (dd18 <ll_rl_add+0x128>)
    dcb0:	5d83      	ldrb	r3, [r0, r6]
    dcb2:	065b      	lsls	r3, r3, #25
    dcb4:	d505      	bpl.n	dcc2 <ll_rl_add+0xd2>
		memcpy(rl[i].local_irk, lirk, 16);
    dcb6:	3008      	adds	r0, #8
    dcb8:	1830      	adds	r0, r6, r0
    dcba:	2210      	movs	r2, #16
    dcbc:	9903      	ldr	r1, [sp, #12]
    dcbe:	f7f2 ffea 	bl	c96 <memcpy>
	}
	rl[i].rpas_ready = 0;
    dcc2:	2424      	movs	r4, #36	; 0x24
	/* Default to Network Privacy */
	rl[i].dev = 0;
    dcc4:	237d      	movs	r3, #125	; 0x7d
		memcpy(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
		memcpy(rl[i].local_irk, lirk, 16);
	}
	rl[i].rpas_ready = 0;
    dcc6:	437c      	muls	r4, r7
    dcc8:	5d2a      	ldrb	r2, [r5, r4]
	/* Default to Network Privacy */
	rl[i].dev = 0;
	/* Add reference to  a whitelist entry */
	j = wl_peers_find(id_addr->type, id_addr->a.val);
    dcca:	9901      	ldr	r1, [sp, #4]
	if (rl[i].lirk) {
		memcpy(rl[i].local_irk, lirk, 16);
	}
	rl[i].rpas_ready = 0;
	/* Default to Network Privacy */
	rl[i].dev = 0;
    dccc:	4013      	ands	r3, r2
    dcce:	552b      	strb	r3, [r5, r4]
	/* Add reference to  a whitelist entry */
	j = wl_peers_find(id_addr->type, id_addr->a.val);
    dcd0:	9b00      	ldr	r3, [sp, #0]
    dcd2:	192d      	adds	r5, r5, r4
    dcd4:	7818      	ldrb	r0, [r3, #0]
    dcd6:	f7ff fc1d 	bl	d514 <wl_peers_find>
	if (j >= 0) {
    dcda:	2800      	cmp	r0, #0
    dcdc:	db0e      	blt.n	dcfc <ll_rl_add+0x10c>
		wl_peers[j].rl_idx = i;
    dcde:	2307      	movs	r3, #7
    dce0:	241e      	movs	r4, #30
    dce2:	4358      	muls	r0, r3
    dce4:	4910      	ldr	r1, [pc, #64]	; (dd28 <ll_rl_add+0x138>)
    dce6:	3308      	adds	r3, #8
    dce8:	403b      	ands	r3, r7
    dcea:	005a      	lsls	r2, r3, #1
    dcec:	5c43      	ldrb	r3, [r0, r1]
    dcee:	43a3      	bics	r3, r4
    dcf0:	4313      	orrs	r3, r2
		rl[i].wl = 1;
    dcf2:	2201      	movs	r2, #1
	/* Default to Network Privacy */
	rl[i].dev = 0;
	/* Add reference to  a whitelist entry */
	j = wl_peers_find(id_addr->type, id_addr->a.val);
	if (j >= 0) {
		wl_peers[j].rl_idx = i;
    dcf4:	5443      	strb	r3, [r0, r1]
		rl[i].wl = 1;
    dcf6:	786b      	ldrb	r3, [r5, #1]
    dcf8:	4313      	orrs	r3, r2
    dcfa:	e002      	b.n	dd02 <ll_rl_add+0x112>
	} else {
		rl[i].wl = 0;
    dcfc:	2201      	movs	r2, #1
    dcfe:	786b      	ldrb	r3, [r5, #1]
    dd00:	4393      	bics	r3, r2
	}
	rl[i].taken = 1;
    dd02:	2024      	movs	r0, #36	; 0x24
    dd04:	2201      	movs	r2, #1

	return 0;
    dd06:	2400      	movs	r4, #0
		wl_peers[j].rl_idx = i;
		rl[i].wl = 1;
	} else {
		rl[i].wl = 0;
	}
	rl[i].taken = 1;
    dd08:	4378      	muls	r0, r7
	j = wl_peers_find(id_addr->type, id_addr->a.val);
	if (j >= 0) {
		wl_peers[j].rl_idx = i;
		rl[i].wl = 1;
	} else {
		rl[i].wl = 0;
    dd0a:	706b      	strb	r3, [r5, #1]
	}
	rl[i].taken = 1;
    dd0c:	5c33      	ldrb	r3, [r6, r0]
    dd0e:	4313      	orrs	r3, r2
    dd10:	5433      	strb	r3, [r6, r0]

	return 0;
}
    dd12:	0020      	movs	r0, r4
    dd14:	b005      	add	sp, #20
    dd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd18:	2000181d 	.word	0x2000181d
    dd1c:	200017b2 	.word	0x200017b2
    dd20:	2000172a 	.word	0x2000172a
    dd24:	20001732 	.word	0x20001732
    dd28:	200017e5 	.word	0x200017e5

0000dd2c <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
    dd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd2e:	b085      	sub	sp, #20
    dd30:	9002      	str	r0, [sp, #8]
	int i;

	if (!rl_access_check(false)) {
    dd32:	f7ff fc43 	bl	d5bc <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
    dd36:	230c      	movs	r3, #12

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
	int i;

	if (!rl_access_check(false)) {
    dd38:	2800      	cmp	r0, #0
    dd3a:	d057      	beq.n	ddec <ll_rl_remove+0xc0>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
    dd3c:	9b02      	ldr	r3, [sp, #8]
    dd3e:	3301      	adds	r3, #1
    dd40:	9303      	str	r3, [sp, #12]
    dd42:	9b02      	ldr	r3, [sp, #8]
    dd44:	9903      	ldr	r1, [sp, #12]
    dd46:	7818      	ldrb	r0, [r3, #0]
    dd48:	f7ff fd38 	bl	d7bc <ll_rl_find>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    dd4c:	2302      	movs	r3, #2
	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
    dd4e:	9001      	str	r0, [sp, #4]
	if (i >= 0) {
    dd50:	2800      	cmp	r0, #0
    dd52:	db4b      	blt.n	ddec <ll_rl_remove+0xc0>
		int j, k;

		if (rl[i].pirk) {
    dd54:	2724      	movs	r7, #36	; 0x24
    dd56:	0003      	movs	r3, r0
    dd58:	437b      	muls	r3, r7
    dd5a:	4e26      	ldr	r6, [pc, #152]	; (ddf4 <ll_rl_remove+0xc8>)
    dd5c:	5d9c      	ldrb	r4, [r3, r6]
    dd5e:	0763      	lsls	r3, r4, #29
    dd60:	d52d      	bpl.n	ddbe <ll_rl_remove+0x92>
			/* Swap with last item */
			int pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    dd62:	4b25      	ldr	r3, [pc, #148]	; (ddf8 <ll_rl_remove+0xcc>)
    dd64:	781d      	ldrb	r5, [r3, #0]
    dd66:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
    dd68:	2d00      	cmp	r5, #0
    dd6a:	d024      	beq.n	ddb6 <ll_rl_remove+0x8a>
	if (i >= 0) {
		int j, k;

		if (rl[i].pirk) {
			/* Swap with last item */
			int pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    dd6c:	06a4      	lsls	r4, r4, #26
    dd6e:	0f64      	lsrs	r4, r4, #29

			if (pj && pi != pj) {
    dd70:	42ac      	cmp	r4, r5
    dd72:	d020      	beq.n	ddb6 <ll_rl_remove+0x8a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
    dd74:	4821      	ldr	r0, [pc, #132]	; (ddfc <ll_rl_remove+0xd0>)
    dd76:	0123      	lsls	r3, r4, #4
    dd78:	0129      	lsls	r1, r5, #4
    dd7a:	1841      	adds	r1, r0, r1
    dd7c:	2210      	movs	r2, #16
    dd7e:	18c0      	adds	r0, r0, r3
    dd80:	f7f2 ff89 	bl	c96 <memcpy>
				for (k = 0;
    dd84:	2300      	movs	r3, #0
				     k < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
    dd86:	46bc      	mov	ip, r7
    dd88:	4661      	mov	r1, ip
    dd8a:	4359      	muls	r1, r3
    dd8c:	5d8a      	ldrb	r2, [r1, r6]
    dd8e:	1c17      	adds	r7, r2, #0
    dd90:	07d0      	lsls	r0, r2, #31
    dd92:	d50d      	bpl.n	ddb0 <ll_rl_remove+0x84>
    dd94:	0750      	lsls	r0, r2, #29
    dd96:	d50b      	bpl.n	ddb0 <ll_rl_remove+0x84>
					    rl[k].pirk_idx == pj) {
    dd98:	0692      	lsls	r2, r2, #26
				memcpy(peer_irks[pi], peer_irks[pj], 16);
				for (k = 0;
				     k < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
    dd9a:	0f52      	lsrs	r2, r2, #29
    dd9c:	4295      	cmp	r5, r2
    dd9e:	d107      	bne.n	ddb0 <ll_rl_remove+0x84>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
    dda0:	2038      	movs	r0, #56	; 0x38
    dda2:	00e2      	lsls	r2, r4, #3
    dda4:	4387      	bics	r7, r0
    dda6:	433a      	orrs	r2, r7
    dda8:	558a      	strb	r2, [r1, r6]
						peer_irk_rl_ids[pi] = k;
    ddaa:	4a15      	ldr	r2, [pc, #84]	; (de00 <ll_rl_remove+0xd4>)
    ddac:	5513      	strb	r3, [r2, r4]
						break;
    ddae:	e002      	b.n	ddb6 <ll_rl_remove+0x8a>

			if (pj && pi != pj) {
				memcpy(peer_irks[pi], peer_irks[pj], 16);
				for (k = 0;
				     k < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
				     k++) {
    ddb0:	3301      	adds	r3, #1
			/* Swap with last item */
			int pi = rl[i].pirk_idx, pj = peer_irk_count - 1;

			if (pj && pi != pj) {
				memcpy(peer_irks[pi], peer_irks[pj], 16);
				for (k = 0;
    ddb2:	2b08      	cmp	r3, #8
    ddb4:	d1e8      	bne.n	dd88 <ll_rl_remove+0x5c>
						peer_irk_rl_ids[pi] = k;
						break;
					}
				}
			}
			peer_irk_count--;
    ddb6:	4a10      	ldr	r2, [pc, #64]	; (ddf8 <ll_rl_remove+0xcc>)
    ddb8:	7813      	ldrb	r3, [r2, #0]
    ddba:	3b01      	subs	r3, #1
    ddbc:	7013      	strb	r3, [r2, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_peers_find(id_addr->type, id_addr->a.val);
    ddbe:	9b02      	ldr	r3, [sp, #8]
    ddc0:	9903      	ldr	r1, [sp, #12]
    ddc2:	7818      	ldrb	r0, [r3, #0]
    ddc4:	f7ff fba6 	bl	d514 <wl_peers_find>
		if (j >= 0) {
    ddc8:	2800      	cmp	r0, #0
    ddca:	db06      	blt.n	ddda <ll_rl_remove+0xae>
			wl_peers[j].rl_idx = RL_IDX_NONE;
    ddcc:	2307      	movs	r3, #7
    ddce:	211e      	movs	r1, #30
    ddd0:	4358      	muls	r0, r3
    ddd2:	4a0c      	ldr	r2, [pc, #48]	; (de04 <ll_rl_remove+0xd8>)
    ddd4:	5c83      	ldrb	r3, [r0, r2]
    ddd6:	430b      	orrs	r3, r1
    ddd8:	5483      	strb	r3, [r0, r2]
		}
		rl[i].taken = 0;
    ddda:	2324      	movs	r3, #36	; 0x24
    dddc:	2001      	movs	r0, #1
    ddde:	9a01      	ldr	r2, [sp, #4]
    dde0:	4904      	ldr	r1, [pc, #16]	; (ddf4 <ll_rl_remove+0xc8>)
    dde2:	4353      	muls	r3, r2
    dde4:	5c5a      	ldrb	r2, [r3, r1]
    dde6:	4382      	bics	r2, r0
    dde8:	545a      	strb	r2, [r3, r1]
		return 0;
    ddea:	2300      	movs	r3, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
    ddec:	0018      	movs	r0, r3
    ddee:	b005      	add	sp, #20
    ddf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ddf2:	46c0      	nop			; (mov r8, r8)
    ddf4:	2000181d 	.word	0x2000181d
    ddf8:	200017b2 	.word	0x200017b2
    ddfc:	20001732 	.word	0x20001732
    de00:	2000172a 	.word	0x2000172a
    de04:	200017e5 	.word	0x200017e5

0000de08 <ll_rl_prpa_get>:

u32_t ll_rl_prpa_get(bt_addr_le_t *id_addr, bt_addr_t *prpa)
{
    de08:	b510      	push	{r4, lr}
    de0a:	000c      	movs	r4, r1
	int i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
    de0c:	1c41      	adds	r1, r0, #1
    de0e:	7800      	ldrb	r0, [r0, #0]
    de10:	f7ff fcd4 	bl	d7bc <ll_rl_find>
	if (i >= 0) {
		bt_addr_copy(prpa, &rl[i].peer_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    de14:	2302      	movs	r3, #2
{
	int i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
    de16:	2800      	cmp	r0, #0
    de18:	db09      	blt.n	de2e <ll_rl_prpa_get+0x26>
		bt_addr_copy(prpa, &rl[i].peer_rpa);
    de1a:	3322      	adds	r3, #34	; 0x22
    de1c:	4358      	muls	r0, r3
    de1e:	4905      	ldr	r1, [pc, #20]	; (de34 <ll_rl_prpa_get+0x2c>)
    de20:	3018      	adds	r0, #24
    de22:	1809      	adds	r1, r1, r0
    de24:	2206      	movs	r2, #6
    de26:	0020      	movs	r0, r4
    de28:	f7f2 ff35 	bl	c96 <memcpy>
		return 0;
    de2c:	2300      	movs	r3, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;

}
    de2e:	0018      	movs	r0, r3
    de30:	bd10      	pop	{r4, pc}
    de32:	46c0      	nop			; (mov r8, r8)
    de34:	2000181d 	.word	0x2000181d

0000de38 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
    de38:	b510      	push	{r4, lr}
    de3a:	000c      	movs	r4, r1
	int i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
    de3c:	1c41      	adds	r1, r0, #1
    de3e:	7800      	ldrb	r0, [r0, #0]
    de40:	f7ff fcbc 	bl	d7bc <ll_rl_find>
	if (i >= 0) {
		bt_addr_copy(lrpa, &rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    de44:	2302      	movs	r3, #2
{
	int i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
    de46:	2800      	cmp	r0, #0
    de48:	db09      	blt.n	de5e <ll_rl_lrpa_get+0x26>
		bt_addr_copy(lrpa, &rl[i].local_rpa);
    de4a:	3322      	adds	r3, #34	; 0x22
    de4c:	4358      	muls	r0, r3
    de4e:	4905      	ldr	r1, [pc, #20]	; (de64 <ll_rl_lrpa_get+0x2c>)
    de50:	2206      	movs	r2, #6
    de52:	1809      	adds	r1, r1, r0
    de54:	311e      	adds	r1, #30
    de56:	0020      	movs	r0, r4
    de58:	f7f2 ff1d 	bl	c96 <memcpy>
		return 0;
    de5c:	2300      	movs	r3, #0
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
    de5e:	0018      	movs	r0, r3
    de60:	bd10      	pop	{r4, pc}
    de62:	46c0      	nop			; (mov r8, r8)
    de64:	2000181d 	.word	0x2000181d

0000de68 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
    de68:	b510      	push	{r4, lr}
    de6a:	0004      	movs	r4, r0
	if (!rl_access_check(false)) {
    de6c:	f7ff fba6 	bl	d5bc <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
    de70:	230c      	movs	r3, #12
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

u32_t ll_rl_enable(u8_t enable)
{
	if (!rl_access_check(false)) {
    de72:	2800      	cmp	r0, #0
    de74:	d00c      	beq.n	de90 <ll_rl_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
    de76:	2c00      	cmp	r4, #0
    de78:	d005      	beq.n	de86 <ll_rl_enable+0x1e>
    de7a:	2c01      	cmp	r4, #1
    de7c:	d107      	bne.n	de8e <ll_rl_enable+0x26>
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
    de7e:	4b05      	ldr	r3, [pc, #20]	; (de94 <ll_rl_enable+0x2c>)
    de80:	701c      	strb	r4, [r3, #0]
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return 0;
    de82:	2300      	movs	r3, #0
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
    de84:	e004      	b.n	de90 <ll_rl_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
    de86:	4b03      	ldr	r3, [pc, #12]	; (de94 <ll_rl_enable+0x2c>)
    de88:	701c      	strb	r4, [r3, #0]
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return 0;
    de8a:	0023      	movs	r3, r4
	}

	switch (enable) {
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
    de8c:	e000      	b.n	de90 <ll_rl_enable+0x28>
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
    de8e:	2312      	movs	r3, #18
	}

	return 0;
}
    de90:	0018      	movs	r0, r3
    de92:	bd10      	pop	{r4, pc}
    de94:	2000193d 	.word	0x2000193d

0000de98 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
    de98:	23fa      	movs	r3, #250	; 0xfa
    de9a:	009b      	lsls	r3, r3, #2
    de9c:	4358      	muls	r0, r3
    de9e:	4b01      	ldr	r3, [pc, #4]	; (dea4 <ll_rl_timeout_set+0xc>)
    dea0:	6018      	str	r0, [r3, #0]
}
    dea2:	4770      	bx	lr
    dea4:	20001c30 	.word	0x20001c30

0000dea8 <ll_priv_mode_set>:

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
    dea8:	b570      	push	{r4, r5, r6, lr}
    deaa:	0005      	movs	r5, r0
    deac:	000c      	movs	r4, r1
	int i;

	if (!rl_access_check(false)) {
    deae:	f7ff fb85 	bl	d5bc <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
    deb2:	230c      	movs	r3, #12

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
	int i;

	if (!rl_access_check(false)) {
    deb4:	2800      	cmp	r0, #0
    deb6:	d01c      	beq.n	def2 <ll_priv_mode_set+0x4a>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
    deb8:	1c69      	adds	r1, r5, #1
    deba:	7828      	ldrb	r0, [r5, #0]
    debc:	f7ff fc7e 	bl	d7bc <ll_rl_find>
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    dec0:	2302      	movs	r3, #2
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
    dec2:	2800      	cmp	r0, #0
    dec4:	db15      	blt.n	def2 <ll_priv_mode_set+0x4a>
		switch (mode) {
    dec6:	2c00      	cmp	r4, #0
    dec8:	d009      	beq.n	dede <ll_priv_mode_set+0x36>
    deca:	2c01      	cmp	r4, #1
    decc:	d110      	bne.n	def0 <ll_priv_mode_set+0x48>
		case BT_HCI_LE_PRIVACY_MODE_NETWORK:
			rl[i].dev = 0;
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
    dece:	2324      	movs	r3, #36	; 0x24
    ded0:	2180      	movs	r1, #128	; 0x80
    ded2:	4358      	muls	r0, r3
    ded4:	4a08      	ldr	r2, [pc, #32]	; (def8 <ll_priv_mode_set+0x50>)
    ded6:	4249      	negs	r1, r1
    ded8:	5c83      	ldrb	r3, [r0, r2]
    deda:	430b      	orrs	r3, r1
    dedc:	e005      	b.n	deea <ll_priv_mode_set+0x42>
	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		switch (mode) {
		case BT_HCI_LE_PRIVACY_MODE_NETWORK:
			rl[i].dev = 0;
    dede:	2324      	movs	r3, #36	; 0x24
    dee0:	4358      	muls	r0, r3
    dee2:	4a05      	ldr	r2, [pc, #20]	; (def8 <ll_priv_mode_set+0x50>)
    dee4:	335b      	adds	r3, #91	; 0x5b
    dee6:	5c81      	ldrb	r1, [r0, r2]
    dee8:	400b      	ands	r3, r1
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
    deea:	5483      	strb	r3, [r0, r2]
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    deec:	2302      	movs	r3, #2
		case BT_HCI_LE_PRIVACY_MODE_NETWORK:
			rl[i].dev = 0;
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
    deee:	e000      	b.n	def2 <ll_priv_mode_set+0x4a>
		default:
			return BT_HCI_ERR_INVALID_PARAM;
    def0:	2312      	movs	r3, #18
		}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}
    def2:	0018      	movs	r0, r3
    def4:	bd70      	pop	{r4, r5, r6, pc}
    def6:	46c0      	nop			; (mov r8, r8)
    def8:	2000181d 	.word	0x2000181d

0000defc <ll_filter_reset>:

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    defc:	2300      	movs	r3, #0
}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
    defe:	b570      	push	{r4, r5, r6, lr}
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
    df00:	2607      	movs	r6, #7
    df02:	2501      	movs	r5, #1

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    df04:	4a17      	ldr	r2, [pc, #92]	; (df64 <ll_filter_reset+0x68>)
}

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
    df06:	0001      	movs	r1, r0
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
    df08:	4817      	ldr	r0, [pc, #92]	; (df68 <ll_filter_reset+0x6c>)

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    df0a:	7013      	strb	r3, [r2, #0]
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
		wl_peers[i].taken = 0;
    df0c:	0034      	movs	r4, r6
    df0e:	435c      	muls	r4, r3
    df10:	5c22      	ldrb	r2, [r4, r0]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
    df12:	3301      	adds	r3, #1
		wl_peers[i].taken = 0;
    df14:	43aa      	bics	r2, r5
    df16:	5422      	strb	r2, [r4, r0]
		    (list[i].id_addr_type == (type & 0x1)) && \
		    !memcmp(list[i].id_addr.val, addr, BDADDR_SIZE))

static void wl_peers_clear(void)
{
	for (int i = 0; i < WL_SIZE; i++) {
    df18:	2b08      	cmp	r3, #8
    df1a:	d1f7      	bne.n	df0c <ll_filter_reset+0x10>
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
    df1c:	2300      	movs	r3, #0
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
    df1e:	2401      	movs	r4, #1
    df20:	4264      	negs	r4, r4
    df22:	17e5      	asrs	r5, r4, #31
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
    df24:	4a11      	ldr	r2, [pc, #68]	; (df6c <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    df26:	4812      	ldr	r0, [pc, #72]	; (df70 <ll_filter_reset+0x74>)
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
    df28:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    df2a:	4a12      	ldr	r2, [pc, #72]	; (df74 <ll_filter_reset+0x78>)
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
    df2c:	2624      	movs	r6, #36	; 0x24

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    df2e:	6010      	str	r0, [r2, #0]
	rpa_last_ms = -1;
    df30:	4a11      	ldr	r2, [pc, #68]	; (df78 <ll_filter_reset+0x7c>)
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
    df32:	4812      	ldr	r0, [pc, #72]	; (df7c <ll_filter_reset+0x80>)
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	wl_peers_clear();

	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
    df34:	6014      	str	r4, [r2, #0]
    df36:	6055      	str	r5, [r2, #4]
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
    df38:	2501      	movs	r5, #1
    df3a:	0034      	movs	r4, r6
    df3c:	435c      	muls	r4, r3
    df3e:	5c22      	ldrb	r2, [r4, r0]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    df40:	3301      	adds	r3, #1
		rl[i].taken = 0;
    df42:	43aa      	bics	r2, r5
    df44:	5422      	strb	r2, [r4, r0]
}
#endif

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
    df46:	2b08      	cmp	r3, #8
    df48:	d1f7      	bne.n	df3a <ll_filter_reset+0x3e>
		rl[i].taken = 0;
	}

	peer_irk_count = 0;
    df4a:	2200      	movs	r2, #0
    df4c:	4b0c      	ldr	r3, [pc, #48]	; (df80 <ll_filter_reset+0x84>)
    df4e:	480d      	ldr	r0, [pc, #52]	; (df84 <ll_filter_reset+0x88>)
    df50:	701a      	strb	r2, [r3, #0]

	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
	rl_clear();
	if (init) {
    df52:	4291      	cmp	r1, r2
    df54:	d003      	beq.n	df5e <ll_filter_reset+0x62>
		k_delayed_work_init(&rpa_work, rpa_timeout);
    df56:	490c      	ldr	r1, [pc, #48]	; (df88 <ll_filter_reset+0x8c>)
    df58:	f001 ff36 	bl	fdc8 <k_delayed_work_init>
    df5c:	e001      	b.n	df62 <ll_filter_reset+0x66>
	} else {
		k_delayed_work_cancel(&rpa_work);
    df5e:	f001 ff49 	bl	fdf4 <k_delayed_work_cancel>
	}
#else
	filter_clear(&wl);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

}
    df62:	bd70      	pop	{r4, r5, r6, pc}
    df64:	20001b40 	.word	0x20001b40
    df68:	200017e5 	.word	0x200017e5
    df6c:	2000193d 	.word	0x2000193d
    df70:	000dbba0 	.word	0x000dbba0
    df74:	20001c30 	.word	0x20001c30
    df78:	20001b38 	.word	0x20001b38
    df7c:	2000181d 	.word	0x2000181d
    df80:	200017b2 	.word	0x200017b2
    df84:	20001ba8 	.word	0x20001ba8
    df88:	0000db91 	.word	0x0000db91

0000df8c <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
    df8c:	4800      	ldr	r0, [pc, #0]	; (df90 <ll_adv_set_get+0x4>)
    df8e:	4770      	bx	lr
    df90:	20001940 	.word	0x20001940

0000df94 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    df94:	b5f0      	push	{r4, r5, r6, r7, lr}
    df96:	b08d      	sub	sp, #52	; 0x34
    df98:	001e      	movs	r6, r3
    df9a:	ab12      	add	r3, sp, #72	; 0x48
    df9c:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    df9e:	4c83      	ldr	r4, [pc, #524]	; (e1ac <ll_adv_params_set+0x218>)
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    dfa0:	9302      	str	r3, [sp, #8]
    dfa2:	ab13      	add	r3, sp, #76	; 0x4c
    dfa4:	781b      	ldrb	r3, [r3, #0]
    dfa6:	9205      	str	r2, [sp, #20]
    dfa8:	9303      	str	r3, [sp, #12]
    dfaa:	ab15      	add	r3, sp, #84	; 0x54
    dfac:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    dfae:	2206      	movs	r2, #6
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    dfb0:	9306      	str	r3, [sp, #24]
    dfb2:	ab16      	add	r3, sp, #88	; 0x58
    dfb4:	781b      	ldrb	r3, [r3, #0]
    dfb6:	000f      	movs	r7, r1
    dfb8:	9307      	str	r3, [sp, #28]
    dfba:	ab18      	add	r3, sp, #96	; 0x60
    dfbc:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    dfbe:	0021      	movs	r1, r4
    dfc0:	a80a      	add	r0, sp, #40	; 0x28
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    dfc2:	9304      	str	r3, [sp, #16]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    dfc4:	f7f2 fe67 	bl	c96 <memcpy>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
    dfc8:	f7fe fc5a 	bl	c880 <radio_adv_is_enabled>
    dfcc:	9001      	str	r0, [sp, #4]
    dfce:	2800      	cmp	r0, #0
    dfd0:	d000      	beq.n	dfd4 <ll_adv_params_set+0x40>
    dfd2:	e0e3      	b.n	e19c <ll_adv_params_set+0x208>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    dfd4:	2107      	movs	r1, #7
    dfd6:	2501      	movs	r5, #1
    dfd8:	4a75      	ldr	r2, [pc, #468]	; (e1b0 <ll_adv_params_set+0x21c>)
    dfda:	7a13      	ldrb	r3, [r2, #8]
    dfdc:	438b      	bics	r3, r1
    dfde:	432b      	orrs	r3, r5
    dfe0:	7213      	strb	r3, [r2, #8]

	/* extended */
	if (adv_type > 0x04) {
    dfe2:	2e04      	cmp	r6, #4
    dfe4:	d91f      	bls.n	e026 <ll_adv_params_set+0x92>
		/* legacy */
		if (evt_prop & BIT(4)) {
    dfe6:	06fb      	lsls	r3, r7, #27
    dfe8:	d50c      	bpl.n	e004 <ll_adv_params_set+0x70>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    dfea:	ae09      	add	r6, sp, #36	; 0x24
    dfec:	0030      	movs	r0, r6
    dfee:	1da1      	adds	r1, r4, #6
    dff0:	2204      	movs	r2, #4
    dff2:	f7f2 fe50 	bl	c96 <memcpy>

			adv_type = leg_adv_type[evt_prop & 0x03];
    dff6:	2303      	movs	r3, #3
    dff8:	403b      	ands	r3, r7
    dffa:	5cf6      	ldrb	r6, [r6, r3]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    dffc:	073b      	lsls	r3, r7, #28
    dffe:	d512      	bpl.n	e026 <ll_adv_params_set+0x92>
				adv_type = 0x01;
    e000:	002e      	movs	r6, r5
    e002:	e015      	b.n	e030 <ll_adv_params_set+0x9c>
			}
		} else {
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
    e004:	43fb      	mvns	r3, r7
    e006:	079b      	lsls	r3, r3, #30
    e008:	d100      	bne.n	e00c <ll_adv_params_set+0x78>
    e00a:	e0c9      	b.n	e1a0 <ll_adv_params_set+0x20c>
    e00c:	230c      	movs	r3, #12
    e00e:	403b      	ands	r3, r7
    e010:	2b0c      	cmp	r3, #12
    e012:	d100      	bne.n	e016 <ll_adv_params_set+0x82>
    e014:	e0c4      	b.n	e1a0 <ll_adv_params_set+0x20c>
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */

			ll_adv.phy_p = phy_p;
    e016:	7a13      	ldrb	r3, [r2, #8]
    e018:	9804      	ldr	r0, [sp, #16]
    e01a:	438b      	bics	r3, r1
    e01c:	4008      	ands	r0, r1
    e01e:	4303      	orrs	r3, r0
    e020:	7213      	strb	r3, [r2, #8]
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    e022:	2605      	movs	r6, #5
    e024:	e001      	b.n	e02a <ll_adv_params_set+0x96>
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
    e026:	2e01      	cmp	r6, #1
    e028:	d002      	beq.n	e030 <ll_adv_params_set+0x9c>
		ll_adv.interval = interval;
    e02a:	4b61      	ldr	r3, [pc, #388]	; (e1b0 <ll_adv_params_set+0x21c>)
    e02c:	9a05      	ldr	r2, [sp, #20]
    e02e:	e001      	b.n	e034 <ll_adv_params_set+0xa0>
	} else {
		ll_adv.interval = 0;
    e030:	2200      	movs	r2, #0
    e032:	4b5f      	ldr	r3, [pc, #380]	; (e1b0 <ll_adv_params_set+0x21c>)
    e034:	60da      	str	r2, [r3, #12]
	}
	ll_adv.chan_map = chan_map;
    e036:	2207      	movs	r2, #7
    e038:	4d5d      	ldr	r5, [pc, #372]	; (e1b0 <ll_adv_params_set+0x21c>)
    e03a:	9b06      	ldr	r3, [sp, #24]
    e03c:	7829      	ldrb	r1, [r5, #0]
    e03e:	4013      	ands	r3, r2
    e040:	4391      	bics	r1, r2
	ll_adv.filter_policy = filter_policy;
    e042:	430b      	orrs	r3, r1
    e044:	2118      	movs	r1, #24
    e046:	9807      	ldr	r0, [sp, #28]
    e048:	3a04      	subs	r2, #4
    e04a:	4010      	ands	r0, r2
    e04c:	00c2      	lsls	r2, r0, #3
    e04e:	438b      	bics	r3, r1
    e050:	4313      	orrs	r3, r2
    e052:	702b      	strb	r3, [r5, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    e054:	f7fe fc08 	bl	c868 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e058:	0003      	movs	r3, r0
    e05a:	334f      	adds	r3, #79	; 0x4f
    e05c:	781c      	ldrb	r4, [r3, #0]
    e05e:	2327      	movs	r3, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
    e060:	210f      	movs	r1, #15
	ll_adv.chan_map = chan_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e062:	435c      	muls	r4, r3
	pdu->type = pdu_adv_type[adv_type];
    e064:	ab0a      	add	r3, sp, #40	; 0x28
    e066:	5d9b      	ldrb	r3, [r3, r6]
	ll_adv.chan_map = chan_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e068:	1904      	adds	r4, r0, r4
	pdu->type = pdu_adv_type[adv_type];
    e06a:	400b      	ands	r3, r1
    e06c:	001a      	movs	r2, r3
    e06e:	7823      	ldrb	r3, [r4, #0]
    e070:	438b      	bics	r3, r1
	pdu->rfu = 0;
    e072:	4313      	orrs	r3, r2
    e074:	2210      	movs	r2, #16
    e076:	4393      	bics	r3, r2
    e078:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2) &&
    e07a:	4019      	ands	r1, r3
    e07c:	1892      	adds	r2, r2, r2
    e07e:	2901      	cmp	r1, #1
    e080:	d801      	bhi.n	e086 <ll_adv_params_set+0xf2>
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
    e082:	4313      	orrs	r3, r2
    e084:	e000      	b.n	e088 <ll_adv_params_set+0xf4>
	} else {
		pdu->chan_sel = 0;
    e086:	4393      	bics	r3, r2
    e088:	7023      	strb	r3, [r4, #0]
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
    e08a:	2303      	movs	r3, #3
    e08c:	2130      	movs	r1, #48	; 0x30
    e08e:	9a02      	ldr	r2, [sp, #8]
    e090:	4013      	ands	r3, r2
    e092:	011a      	lsls	r2, r3, #4
    e094:	786b      	ldrb	r3, [r5, #1]
    e096:	438b      	bics	r3, r1
    e098:	4313      	orrs	r3, r2
    e09a:	706b      	strb	r3, [r5, #1]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    e09c:	069a      	lsls	r2, r3, #26
    e09e:	d50c      	bpl.n	e0ba <ll_adv_params_set+0x126>
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
    e0a0:	2201      	movs	r2, #1
    e0a2:	9903      	ldr	r1, [sp, #12]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
    e0a4:	1ca8      	adds	r0, r5, #2

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
    e0a6:	400a      	ands	r2, r1
    e0a8:	2140      	movs	r1, #64	; 0x40
    e0aa:	0192      	lsls	r2, r2, #6
    e0ac:	438b      	bics	r3, r1
    e0ae:	4313      	orrs	r3, r2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
    e0b0:	9914      	ldr	r1, [sp, #80]	; 0x50
    e0b2:	2206      	movs	r2, #6

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
    e0b4:	706b      	strb	r3, [r5, #1]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
    e0b6:	f7f2 fdee 	bl	c96 <memcpy>
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    e0ba:	2101      	movs	r1, #1
    e0bc:	2040      	movs	r0, #64	; 0x40
    e0be:	9d02      	ldr	r5, [sp, #8]
    e0c0:	7823      	ldrb	r3, [r4, #0]
    e0c2:	400d      	ands	r5, r1
    e0c4:	01aa      	lsls	r2, r5, #6
    e0c6:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    e0c8:	4313      	orrs	r3, r2
    e0ca:	227f      	movs	r2, #127	; 0x7f
    e0cc:	4013      	ands	r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    e0ce:	3a70      	subs	r2, #112	; 0x70
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
    e0d0:	7023      	strb	r3, [r4, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    e0d2:	401a      	ands	r2, r3
    e0d4:	428a      	cmp	r2, r1
    e0d6:	d10b      	bne.n	e0f0 <ll_adv_params_set+0x15c>
		pdu->rx_addr = direct_addr_type;
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
    e0d8:	0020      	movs	r0, r4
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		pdu->rx_addr = direct_addr_type;
    e0da:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
    e0dc:	3008      	adds	r0, #8
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		pdu->rx_addr = direct_addr_type;
    e0de:	01d2      	lsls	r2, r2, #7
    e0e0:	4313      	orrs	r3, r2
    e0e2:	7023      	strb	r3, [r4, #0]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
    e0e4:	2206      	movs	r2, #6
    e0e6:	9914      	ldr	r1, [sp, #80]	; 0x50
    e0e8:	f7f2 fdd5 	bl	c96 <memcpy>
		       BDADDR_SIZE);
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
    e0ec:	230c      	movs	r3, #12
    e0ee:	e03a      	b.n	e166 <ll_adv_params_set+0x1d2>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    e0f0:	2a07      	cmp	r2, #7
    e0f2:	d134      	bne.n	e15e <ll_adv_params_set+0x1ca>
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;
    e0f4:	01b8      	lsls	r0, r7, #6
    e0f6:	70a0      	strb	r0, [r4, #2]

		/* Zero-init header flags */
		*(u8_t *)h = 0;
    e0f8:	2000      	movs	r0, #0
		struct pdu_adv_payload_com_ext_adv *p;
		struct ext_adv_hdr *h;
		u8_t *ptr;
		u8_t len;

		p = (void *)&pdu->payload.adv_ext_ind;
    e0fa:	1ca2      	adds	r2, r4, #2
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
    e0fc:	1d23      	adds	r3, r4, #4
		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;

		/* Zero-init header flags */
		*(u8_t *)h = 0;
    e0fe:	70e0      	strb	r0, [r4, #3]

		/* AdvA flag */
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    e100:	06b8      	lsls	r0, r7, #26
    e102:	d408      	bmi.n	e116 <ll_adv_params_set+0x182>
    e104:	263f      	movs	r6, #63	; 0x3f
    e106:	78a0      	ldrb	r0, [r4, #2]
    e108:	43b0      	bics	r0, r6
    e10a:	d104      	bne.n	e116 <ll_adv_params_set+0x182>
    e10c:	9804      	ldr	r0, [sp, #16]
    e10e:	2804      	cmp	r0, #4
    e110:	d001      	beq.n	e116 <ll_adv_params_set+0x182>
			/* TODO: optional on 1M */
			h->adv_addr = 1;
    e112:	70e1      	strb	r1, [r4, #3]

			/* NOTE: AdvA is filled at enable */
			ptr += BDADDR_SIZE;
    e114:	3306      	adds	r3, #6
		/* TODO: AuxPtr flag */

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
    e116:	2040      	movs	r0, #64	; 0x40
    e118:	4207      	tst	r7, r0
    e11a:	d003      	beq.n	e124 <ll_adv_params_set+0x190>
			h->tx_pwr = 1;
    e11c:	78e1      	ldrb	r1, [r4, #3]
			ptr++;
    e11e:	3301      	adds	r3, #1

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
			h->tx_pwr = 1;
    e120:	4301      	orrs	r1, r0
    e122:	70e1      	strb	r1, [r4, #3]
			ptr++;
		}

		/* Calc primary PDU len */
		len = ptr - (u8_t *)p;
    e124:	1a9a      	subs	r2, r3, r2
    e126:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
    e128:	2a02      	cmp	r2, #2
    e12a:	d908      	bls.n	e13e <ll_adv_params_set+0x1aa>
				    ext_hdr_adi_adv_data) + sizeof(*h))) {
			p->ext_hdr_len = len -
    e12c:	263f      	movs	r6, #63	; 0x3f
    e12e:	1e51      	subs	r1, r2, #1
    e130:	4031      	ands	r1, r6
    e132:	0008      	movs	r0, r1
    e134:	78a1      	ldrb	r1, [r4, #2]
    e136:	43b1      	bics	r1, r6
    e138:	4301      	orrs	r1, r0
    e13a:	70a1      	strb	r1, [r4, #2]
    e13c:	e000      	b.n	e140 <ll_adv_params_set+0x1ac>
				offsetof(struct pdu_adv_payload_com_ext_adv,
					 ext_hdr_adi_adv_data);
			pdu->len = len;
		} else {
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
    e13e:	2201      	movs	r2, #1
    e140:	7062      	strb	r2, [r4, #1]
		/* TODO: AdvData */

		/* TODO: ACAD */

		/* Tx Power */
		if (h->tx_pwr) {
    e142:	78e2      	ldrb	r2, [r4, #3]
    e144:	0652      	lsls	r2, r2, #25
    e146:	d50f      	bpl.n	e168 <ll_adv_params_set+0x1d4>
			u8_t _tx_pwr;

			_tx_pwr = 0;
    e148:	9a17      	ldr	r2, [sp, #92]	; 0x5c
			if (tx_pwr) {
    e14a:	1e11      	subs	r1, r2, #0
    e14c:	d004      	beq.n	e158 <ll_adv_params_set+0x1c4>
				if (*tx_pwr != 0x7F) {
    e14e:	7812      	ldrb	r2, [r2, #0]
    e150:	2a7f      	cmp	r2, #127	; 0x7f
    e152:	d101      	bne.n	e158 <ll_adv_params_set+0x1c4>
					_tx_pwr = *tx_pwr;
				} else {
					*tx_pwr = _tx_pwr;
    e154:	2200      	movs	r2, #0
    e156:	700a      	strb	r2, [r1, #0]
				}
			}

			ptr--;
			*ptr = _tx_pwr;
    e158:	3b01      	subs	r3, #1
    e15a:	701a      	strb	r2, [r3, #0]
    e15c:	e004      	b.n	e168 <ll_adv_params_set+0x1d4>
		/* NOTE: TargetA, filled at enable and RPA timeout */

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	} else if (pdu->len == 0) {
    e15e:	7863      	ldrb	r3, [r4, #1]
    e160:	2b00      	cmp	r3, #0
    e162:	d101      	bne.n	e168 <ll_adv_params_set+0x1d4>
		pdu->len = BDADDR_SIZE;
    e164:	3306      	adds	r3, #6
    e166:	7063      	strb	r3, [r4, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    e168:	f7fe fb84 	bl	c874 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e16c:	0003      	movs	r3, r0
    e16e:	334f      	adds	r3, #79	; 0x4f
    e170:	781a      	ldrb	r2, [r3, #0]
    e172:	2327      	movs	r3, #39	; 0x27
    e174:	4353      	muls	r3, r2
    e176:	18c0      	adds	r0, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    e178:	230f      	movs	r3, #15
    e17a:	7802      	ldrb	r2, [r0, #0]
    e17c:	439a      	bics	r2, r3
	pdu->rfu = 0;
    e17e:	3b0b      	subs	r3, #11
    e180:	431a      	orrs	r2, r3
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    e182:	01ab      	lsls	r3, r5, #6
    e184:	258f      	movs	r5, #143	; 0x8f
    e186:	4015      	ands	r5, r2
	pdu->rx_addr = 0;
    e188:	431d      	orrs	r5, r3
    e18a:	237f      	movs	r3, #127	; 0x7f
    e18c:	401d      	ands	r5, r3
	if (pdu->len == 0) {
    e18e:	7843      	ldrb	r3, [r0, #1]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
    e190:	7005      	strb	r5, [r0, #0]
	if (pdu->len == 0) {
    e192:	2b00      	cmp	r3, #0
    e194:	d106      	bne.n	e1a4 <ll_adv_params_set+0x210>
		pdu->len = BDADDR_SIZE;
    e196:	3306      	adds	r3, #6
    e198:	7043      	strb	r3, [r0, #1]
    e19a:	e003      	b.n	e1a4 <ll_adv_params_set+0x210>

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    e19c:	230c      	movs	r3, #12
    e19e:	e000      	b.n	e1a2 <ll_adv_params_set+0x20e>
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
    e1a0:	2312      	movs	r3, #18
    e1a2:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
    e1a4:	9801      	ldr	r0, [sp, #4]
    e1a6:	b00d      	add	sp, #52	; 0x34
    e1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1aa:	46c0      	nop			; (mov r8, r8)
    e1ac:	0000ffb2 	.word	0x0000ffb2
    e1b0:	20001940 	.word	0x20001940

0000e1b4 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    e1b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e1b6:	0007      	movs	r7, r0
    e1b8:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    e1ba:	f7fe fb55 	bl	c868 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e1be:	0003      	movs	r3, r0
    e1c0:	2127      	movs	r1, #39	; 0x27
    e1c2:	334f      	adds	r3, #79	; 0x4f
    e1c4:	781d      	ldrb	r5, [r3, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    e1c6:	0006      	movs	r6, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    e1c8:	4369      	muls	r1, r5
    e1ca:	1841      	adds	r1, r0, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    e1cc:	200f      	movs	r0, #15
    e1ce:	780b      	ldrb	r3, [r1, #0]
    e1d0:	4018      	ands	r0, r3
    e1d2:	2801      	cmp	r0, #1
    e1d4:	d043      	beq.n	e25e <ll_adv_data_set+0xaa>
    e1d6:	2807      	cmp	r0, #7
    e1d8:	d041      	beq.n	e25e <ll_adv_data_set+0xaa>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    e1da:	0032      	movs	r2, r6
    e1dc:	324e      	adds	r2, #78	; 0x4e
    e1de:	7812      	ldrb	r2, [r2, #0]
    e1e0:	42aa      	cmp	r2, r5
    e1e2:	d104      	bne.n	e1ee <ll_adv_data_set+0x3a>
		last = radio_adv_data->last + 1;
    e1e4:	3501      	adds	r5, #1
    e1e6:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    e1e8:	2d02      	cmp	r5, #2
    e1ea:	d100      	bne.n	e1ee <ll_adv_data_set+0x3a>
			last = 0;
    e1ec:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
    e1ee:	200f      	movs	r0, #15
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    e1f0:	2427      	movs	r4, #39	; 0x27
	pdu->type = prev->type;
    e1f2:	4003      	ands	r3, r0
    e1f4:	001a      	movs	r2, r3
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    e1f6:	436c      	muls	r4, r5
    e1f8:	1934      	adds	r4, r6, r4
	pdu->type = prev->type;
    e1fa:	7823      	ldrb	r3, [r4, #0]
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
	pdu->len = BDADDR_SIZE + len;

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    e1fc:	364f      	adds	r6, #79	; 0x4f
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
    e1fe:	4383      	bics	r3, r0
	pdu->rfu = 0;
    e200:	4313      	orrs	r3, r2
    e202:	2210      	movs	r2, #16
    e204:	4393      	bics	r3, r2
    e206:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    e208:	2301      	movs	r3, #1
    e20a:	7808      	ldrb	r0, [r1, #0]
    e20c:	0940      	lsrs	r0, r0, #5
    e20e:	4018      	ands	r0, r3
    e210:	7823      	ldrb	r3, [r4, #0]
    e212:	0140      	lsls	r0, r0, #5
    e214:	001a      	movs	r2, r3
    e216:	2320      	movs	r3, #32
    e218:	439a      	bics	r2, r3
    e21a:	4310      	orrs	r0, r2
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
    e21c:	2201      	movs	r2, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    e21e:	7020      	strb	r0, [r4, #0]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
    e220:	780b      	ldrb	r3, [r1, #0]
    e222:	099b      	lsrs	r3, r3, #6
    e224:	4013      	ands	r3, r2
    e226:	019a      	lsls	r2, r3, #6
    e228:	b2c3      	uxtb	r3, r0
    e22a:	2040      	movs	r0, #64	; 0x40
    e22c:	4383      	bics	r3, r0
    e22e:	4313      	orrs	r3, r2
    e230:	7023      	strb	r3, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
    e232:	780b      	ldrb	r3, [r1, #0]
    e234:	7820      	ldrb	r0, [r4, #0]
    e236:	09db      	lsrs	r3, r3, #7
    e238:	01da      	lsls	r2, r3, #7
    e23a:	237f      	movs	r3, #127	; 0x7f
    e23c:	4003      	ands	r3, r0
    e23e:	4313      	orrs	r3, r2
    e240:	7023      	strb	r3, [r4, #0]
	memcpy(&pdu->payload.adv_ind.addr[0],
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
    e242:	3102      	adds	r1, #2
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
	pdu->rx_addr = prev->rx_addr;
	memcpy(&pdu->payload.adv_ind.addr[0],
    e244:	2206      	movs	r2, #6
    e246:	1ca0      	adds	r0, r4, #2
    e248:	f7f2 fd25 	bl	c96 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
    e24c:	0020      	movs	r0, r4
    e24e:	003a      	movs	r2, r7
    e250:	3008      	adds	r0, #8
    e252:	9901      	ldr	r1, [sp, #4]
    e254:	f7f2 fd1f 	bl	c96 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    e258:	1dbb      	adds	r3, r7, #6
    e25a:	7063      	strb	r3, [r4, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    e25c:	7035      	strb	r5, [r6, #0]
}
    e25e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000e260 <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    e260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e262:	0007      	movs	r7, r0
    e264:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    e266:	f7fe fb05 	bl	c874 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    e26a:	0003      	movs	r3, r0
    e26c:	0002      	movs	r2, r0
    e26e:	334e      	adds	r3, #78	; 0x4e
    e270:	324f      	adds	r2, #79	; 0x4f
    e272:	7811      	ldrb	r1, [r2, #0]
    e274:	781b      	ldrb	r3, [r3, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    e276:	0005      	movs	r5, r0
    e278:	000e      	movs	r6, r1
	if (radio_scan_data->first == radio_scan_data->last) {
    e27a:	428b      	cmp	r3, r1
    e27c:	d104      	bne.n	e288 <ll_scan_data_set+0x28>
		last = radio_scan_data->last + 1;
    e27e:	1c4e      	adds	r6, r1, #1
    e280:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
    e282:	2e02      	cmp	r6, #2
    e284:	d100      	bne.n	e288 <ll_scan_data_set+0x28>
			last = 0;
    e286:	2600      	movs	r6, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    e288:	2427      	movs	r4, #39	; 0x27
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    e28a:	220f      	movs	r2, #15
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    e28c:	4361      	muls	r1, r4
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    e28e:	4374      	muls	r4, r6
    e290:	192c      	adds	r4, r5, r4
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    e292:	7823      	ldrb	r3, [r4, #0]
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    e294:	2040      	movs	r0, #64	; 0x40

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    e296:	4393      	bics	r3, r2
	pdu->rfu = 0;
    e298:	3a0b      	subs	r2, #11
    e29a:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
    e29c:	32cb      	adds	r2, #203	; 0xcb
    e29e:	4013      	ands	r3, r2
    e2a0:	7023      	strb	r3, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
    e2a2:	2340      	movs	r3, #64	; 0x40
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    e2a4:	1869      	adds	r1, r5, r1
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    e2a6:	780a      	ldrb	r2, [r1, #0]
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE + len;
	memcpy(&pdu->payload.scan_rsp.addr[0],
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
    e2a8:	3102      	adds	r1, #2
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    e2aa:	401a      	ands	r2, r3
    e2ac:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->payload.scan_rsp.addr[0],
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    e2ae:	354f      	adds	r5, #79	; 0x4f
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
    e2b0:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
    e2b2:	4313      	orrs	r3, r2
    e2b4:	227f      	movs	r2, #127	; 0x7f
    e2b6:	4013      	ands	r3, r2
    e2b8:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
    e2ba:	1dbb      	adds	r3, r7, #6
    e2bc:	7063      	strb	r3, [r4, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
    e2be:	1ca0      	adds	r0, r4, #2
    e2c0:	3a79      	subs	r2, #121	; 0x79
    e2c2:	f7f2 fce8 	bl	c96 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
    e2c6:	0020      	movs	r0, r4
    e2c8:	003a      	movs	r2, r7
    e2ca:	9901      	ldr	r1, [sp, #4]
    e2cc:	3008      	adds	r0, #8
    e2ce:	f7f2 fce2 	bl	c96 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    e2d2:	702e      	strb	r6, [r5, #0]
}
    e2d4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

0000e2d8 <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
    e2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2da:	b085      	sub	sp, #20
	int rl_idx = RL_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    e2dc:	2800      	cmp	r0, #0
    e2de:	d102      	bne.n	e2e6 <ll_adv_enable+0xe>
		return radio_adv_disable();
    e2e0:	f7fe ff62 	bl	d1a8 <radio_adv_disable>
    e2e4:	e06b      	b.n	e3be <ll_adv_enable+0xe6>
	} else if (radio_adv_is_enabled()) {
    e2e6:	f7fe facb 	bl	c880 <radio_adv_is_enabled>
    e2ea:	0007      	movs	r7, r0
		return 0;
    e2ec:	2000      	movs	r0, #0
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
    e2ee:	4287      	cmp	r7, r0
    e2f0:	d165      	bne.n	e3be <ll_adv_enable+0xe6>
	 */

	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
    e2f2:	f7fe fab9 	bl	c868 <radio_adv_data_get>
    e2f6:	0004      	movs	r4, r0
	radio_scan_data = radio_scan_data_get();
    e2f8:	f7fe fabc 	bl	c874 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
    e2fc:	0023      	movs	r3, r4
	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    e2fe:	2227      	movs	r2, #39	; 0x27
			[radio_adv_data->last][0];
    e300:	334f      	adds	r3, #79	; 0x4f
	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    e302:	781d      	ldrb	r5, [r3, #0]
    e304:	4e2f      	ldr	r6, [pc, #188]	; (e3c4 <ll_adv_enable+0xec>)
    e306:	4355      	muls	r5, r2
    e308:	1965      	adds	r5, r4, r5
			[radio_scan_data->last][0];

	if (0) {

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    e30a:	782b      	ldrb	r3, [r5, #0]
    e30c:	240f      	movs	r4, #15
    e30e:	0019      	movs	r1, r3
    e310:	4021      	ands	r1, r4
    e312:	2907      	cmp	r1, #7
    e314:	d10a      	bne.n	e32c <ll_adv_enable+0x54>
		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* AdvA, fill here at enable */
		if (h->adv_addr) {
    e316:	78ea      	ldrb	r2, [r5, #3]
    e318:	07d2      	lsls	r2, r2, #31
    e31a:	d52a      	bpl.n	e372 <ll_adv_enable+0x9a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    e31c:	0658      	lsls	r0, r3, #25
    e31e:	0039      	movs	r1, r7
    e320:	0fc0      	lsrs	r0, r0, #31
    e322:	f7ff f8d1 	bl	d4c8 <ll_addr_get>
    e326:	0001      	movs	r1, r0
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
    e328:	1d28      	adds	r0, r5, #4
    e32a:	e044      	b.n	e3b6 <ll_adv_enable+0xde>
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
			[radio_scan_data->last][0];
    e32c:	0003      	movs	r3, r0
    e32e:	334f      	adds	r3, #79	; 0x4f
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    e330:	781b      	ldrb	r3, [r3, #0]
    e332:	435a      	muls	r2, r3
    e334:	1883      	adds	r3, r0, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		bool priv = false;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		/* Prepare whitelist and optionally resolving list */
		ll_filters_adv_update(ll_adv.filter_policy);
    e336:	7830      	ldrb	r0, [r6, #0]
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    e338:	9303      	str	r3, [sp, #12]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		bool priv = false;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		/* Prepare whitelist and optionally resolving list */
		ll_filters_adv_update(ll_adv.filter_policy);
    e33a:	06c0      	lsls	r0, r0, #27
    e33c:	0f80      	lsrs	r0, r0, #30
    e33e:	f7ff fa27 	bl	d790 <ll_filters_adv_update>

		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    e342:	7870      	ldrb	r0, [r6, #1]
    e344:	0683      	lsls	r3, r0, #26
    e346:	d522      	bpl.n	e38e <ll_adv_enable+0xb6>
		    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
			/* Look up the resolving list */
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
    e348:	0640      	lsls	r0, r0, #25
    e34a:	1cb1      	adds	r1, r6, #2
    e34c:	0fc0      	lsrs	r0, r0, #31
    e34e:	f7ff fa35 	bl	d7bc <ll_rl_find>
    e352:	1e04      	subs	r4, r0, #0
					    ll_adv.id_addr);

			if (rl_idx >= 0) {
    e354:	db02      	blt.n	e35c <ll_adv_enable+0x84>
				/* Generate RPAs if required */
				ll_rl_rpa_update(false);
    e356:	0038      	movs	r0, r7
    e358:	f7ff fb5e 	bl	da18 <ll_rl_rpa_update>
			}

			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
    e35c:	0029      	movs	r1, r5
    e35e:	0020      	movs	r0, r4
    e360:	f7ff fb04 	bl	d96c <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
    e364:	9903      	ldr	r1, [sp, #12]
    e366:	0020      	movs	r0, r4
    e368:	f7ff fb00 	bl	d96c <ll_rl_pdu_adv_update>
			priv = true;
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
    e36c:	2c00      	cmp	r4, #0
    e36e:	da00      	bge.n	e372 <ll_adv_enable+0x9a>
    e370:	240f      	movs	r4, #15
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
				  ll_adv.chan_map, ll_adv.filter_policy,
    e372:	7832      	ldrb	r2, [r6, #0]
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    e374:	7a30      	ldrb	r0, [r6, #8]
				  ll_adv.chan_map, ll_adv.filter_policy,
    e376:	06d3      	lsls	r3, r2, #27
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    e378:	b2e4      	uxtb	r4, r4
				  ll_adv.chan_map, ll_adv.filter_policy,
    e37a:	0752      	lsls	r2, r2, #29
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    e37c:	0740      	lsls	r0, r0, #29
    e37e:	89b1      	ldrh	r1, [r6, #12]
    e380:	0f9b      	lsrs	r3, r3, #30
    e382:	0f52      	lsrs	r2, r2, #29
    e384:	9400      	str	r4, [sp, #0]
    e386:	0f40      	lsrs	r0, r0, #29
    e388:	f7fe fd6a 	bl	ce60 <radio_adv_enable>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
    e38c:	e017      	b.n	e3be <ll_adv_enable+0xe6>
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
    e38e:	7828      	ldrb	r0, [r5, #0]
    e390:	0039      	movs	r1, r7
    e392:	0640      	lsls	r0, r0, #25
    e394:	0fc0      	lsrs	r0, r0, #31
    e396:	f7ff f897 	bl	d4c8 <ll_addr_get>
			priv = true;
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
    e39a:	2206      	movs	r2, #6
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
    e39c:	0001      	movs	r1, r0
			priv = true;
			rl_idx = rl_idx >= 0 ? rl_idx : RL_IDX_NONE;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
    e39e:	1ca8      	adds	r0, r5, #2
    e3a0:	f7f2 fc79 	bl	c96 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
    e3a4:	7828      	ldrb	r0, [r5, #0]
    e3a6:	0039      	movs	r1, r7
    e3a8:	0640      	lsls	r0, r0, #25
    e3aa:	0fc0      	lsrs	r0, r0, #31
    e3ac:	f7ff f88c 	bl	d4c8 <ll_addr_get>
    e3b0:	0001      	movs	r1, r0
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
    e3b2:	9803      	ldr	r0, [sp, #12]
    e3b4:	3002      	adds	r0, #2
    e3b6:	2206      	movs	r2, #6
    e3b8:	f7f2 fc6d 	bl	c96 <memcpy>
    e3bc:	e7d9      	b.n	e372 <ll_adv_enable+0x9a>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
}
    e3be:	b005      	add	sp, #20
    e3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3c2:	46c0      	nop			; (mov r8, r8)
    e3c4:	20001940 	.word	0x20001940

0000e3c8 <net_buf_pool_get>:
/* Linker-defined symbol bound to the static pool structs */
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
    e3c8:	2324      	movs	r3, #36	; 0x24
    e3ca:	4358      	muls	r0, r3
    e3cc:	4b01      	ldr	r3, [pc, #4]	; (e3d4 <net_buf_pool_get+0xc>)
    e3ce:	18c0      	adds	r0, r0, r3
}
    e3d0:	4770      	bx	lr
    e3d2:	46c0      	nop			; (mov r8, r8)
    e3d4:	2000078c 	.word	0x2000078c

0000e3d8 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
    e3d8:	b570      	push	{r4, r5, r6, lr}
    e3da:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    e3dc:	f3ef 8510 	mrs	r5, PRIMASK
    e3e0:	b672      	cpsid	i
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    e3e2:	8ac3      	ldrh	r3, [r0, #22]
    e3e4:	2b00      	cmp	r3, #0
    e3e6:	d028      	beq.n	e43a <net_buf_alloc+0x62>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    e3e8:	8a82      	ldrh	r2, [r0, #20]
    e3ea:	429a      	cmp	r2, r3
    e3ec:	d908      	bls.n	e400 <net_buf_alloc+0x28>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    e3ee:	2100      	movs	r1, #0
    e3f0:	f001 f800 	bl	f3f4 <k_queue_get>
			if (buf) {
    e3f4:	2800      	cmp	r0, #0
    e3f6:	d003      	beq.n	e400 <net_buf_alloc+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    e3f8:	2d00      	cmp	r5, #0
    e3fa:	d126      	bne.n	e44a <net_buf_alloc+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    e3fc:	b662      	cpsie	i
    e3fe:	e024      	b.n	e44a <net_buf_alloc+0x72>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
    e400:	8ae0      	ldrh	r0, [r4, #22]
    e402:	1e43      	subs	r3, r0, #1
    e404:	82e3      	strh	r3, [r4, #22]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    e406:	2d00      	cmp	r5, #0
    e408:	d100      	bne.n	e40c <net_buf_alloc+0x34>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    e40a:	b662      	cpsie	i
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
    e40c:	2103      	movs	r1, #3
    e40e:	8b23      	ldrh	r3, [r4, #24]
    e410:	8b62      	ldrh	r2, [r4, #26]
    e412:	3303      	adds	r3, #3
    e414:	1852      	adds	r2, r2, r1
    e416:	438a      	bics	r2, r1
    e418:	438b      	bics	r3, r1
    e41a:	189b      	adds	r3, r3, r2
    e41c:	8aa2      	ldrh	r2, [r4, #20]
    e41e:	3310      	adds	r3, #16
    e420:	1a10      	subs	r0, r2, r0
    e422:	4358      	muls	r0, r3
    e424:	6a23      	ldr	r3, [r4, #32]

	buf->pool_id = pool_id(pool);
    e426:	4a0e      	ldr	r2, [pc, #56]	; (e460 <net_buf_alloc+0x88>)
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
    e428:	1818      	adds	r0, r3, r0

	buf->pool_id = pool_id(pool);
    e42a:	4b0e      	ldr	r3, [pc, #56]	; (e464 <net_buf_alloc+0x8c>)
    e42c:	1ae3      	subs	r3, r4, r3
    e42e:	109b      	asrs	r3, r3, #2
    e430:	4353      	muls	r3, r2
    e432:	7183      	strb	r3, [r0, #6]
	buf->size = pool->buf_size;
    e434:	8b23      	ldrh	r3, [r4, #24]
    e436:	81c3      	strh	r3, [r0, #14]

		uninit_count = pool->uninit_count--;
		irq_unlock(key);

		buf = pool_get_uninit(pool, uninit_count);
		goto success;
    e438:	e007      	b.n	e44a <net_buf_alloc+0x72>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    e43a:	2d00      	cmp	r5, #0
    e43c:	d100      	bne.n	e440 <net_buf_alloc+0x68>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    e43e:	b662      	cpsie	i
		}
	} else {
		buf = k_lifo_get(&pool->free, timeout);
	}
#else
	buf = k_lifo_get(&pool->free, timeout);
    e440:	0020      	movs	r0, r4
    e442:	f000 ffd7 	bl	f3f4 <k_queue_get>
#endif
	if (!buf) {
    e446:	2800      	cmp	r0, #0
    e448:	d008      	beq.n	e45c <net_buf_alloc+0x84>
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
    e44a:	2301      	movs	r3, #1
    e44c:	7103      	strb	r3, [r0, #4]
	buf->flags = 0;
    e44e:	2300      	movs	r3, #0
    e450:	7143      	strb	r3, [r0, #5]
	buf->frags = NULL;
    e452:	6003      	str	r3, [r0, #0]
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
    e454:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
    e456:	0003      	movs	r3, r0
    e458:	3310      	adds	r3, #16
    e45a:	6083      	str	r3, [r0, #8]
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    e45c:	bd70      	pop	{r4, r5, r6, pc}
    e45e:	46c0      	nop			; (mov r8, r8)
    e460:	38e38e39 	.word	0x38e38e39
    e464:	2000078c 	.word	0x2000078c

0000e468 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    e468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e46a:	0007      	movs	r7, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    e46c:	f000 ffc2 	bl	f3f4 <k_queue_get>
    e470:	1e05      	subs	r5, r0, #0
	if (!buf) {
    e472:	d00f      	beq.n	e494 <net_buf_get+0x2c>
    e474:	0004      	movs	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    e476:	2601      	movs	r6, #1
    e478:	7963      	ldrb	r3, [r4, #5]
    e47a:	4033      	ands	r3, r6
    e47c:	d009      	beq.n	e492 <net_buf_get+0x2a>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    e47e:	2100      	movs	r1, #0
    e480:	0038      	movs	r0, r7
    e482:	f000 ffb7 	bl	f3f4 <k_queue_get>
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
    e486:	7963      	ldrb	r3, [r4, #5]

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    e488:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
    e48a:	43b3      	bics	r3, r6
    e48c:	7163      	strb	r3, [r4, #5]
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    e48e:	0004      	movs	r4, r0
    e490:	e7f2      	b.n	e478 <net_buf_get+0x10>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    e492:	6023      	str	r3, [r4, #0]

	return buf;
}
    e494:	0028      	movs	r0, r5
    e496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e498 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    e498:	0003      	movs	r3, r0
    e49a:	3310      	adds	r3, #16
    e49c:	1859      	adds	r1, r3, r1
    e49e:	6081      	str	r1, [r0, #8]
}
    e4a0:	4770      	bx	lr

0000e4a2 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    e4a2:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    e4a4:	000a      	movs	r2, r1
		tail->flags |= NET_BUF_FRAGS;
    e4a6:	2501      	movs	r5, #1
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    e4a8:	6814      	ldr	r4, [r2, #0]
    e4aa:	2c00      	cmp	r4, #0
    e4ac:	d004      	beq.n	e4b8 <net_buf_put+0x16>
		tail->flags |= NET_BUF_FRAGS;
    e4ae:	7953      	ldrb	r3, [r2, #5]
    e4b0:	432b      	orrs	r3, r5
    e4b2:	7153      	strb	r3, [r2, #5]
    e4b4:	0022      	movs	r2, r4
    e4b6:	e7f7      	b.n	e4a8 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
    e4b8:	f000 ff58 	bl	f36c <k_queue_append_list>
}
    e4bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e4c0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    e4c0:	b570      	push	{r4, r5, r6, lr}
    e4c2:	0001      	movs	r1, r0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    e4c4:	2424      	movs	r4, #36	; 0x24
void net_buf_unref(struct net_buf *buf)
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
    e4c6:	2900      	cmp	r1, #0
    e4c8:	d015      	beq.n	e4f6 <net_buf_unref+0x36>
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
    e4ca:	790b      	ldrb	r3, [r1, #4]
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
		struct net_buf *frags = buf->frags;
    e4cc:	680d      	ldr	r5, [r1, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
    e4ce:	3b01      	subs	r3, #1
    e4d0:	b2db      	uxtb	r3, r3
    e4d2:	710b      	strb	r3, [r1, #4]
    e4d4:	2b00      	cmp	r3, #0
    e4d6:	d10e      	bne.n	e4f6 <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    e4d8:	7988      	ldrb	r0, [r1, #6]

		if (--buf->ref > 0) {
			return;
		}

		buf->frags = NULL;
    e4da:	600b      	str	r3, [r1, #0]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    e4dc:	4360      	muls	r0, r4
    e4de:	4b06      	ldr	r3, [pc, #24]	; (e4f8 <net_buf_unref+0x38>)
    e4e0:	1818      	adds	r0, r3, r0
    e4e2:	69c3      	ldr	r3, [r0, #28]
    e4e4:	2b00      	cmp	r3, #0
    e4e6:	d002      	beq.n	e4ee <net_buf_unref+0x2e>
			pool->destroy(buf);
    e4e8:	0008      	movs	r0, r1
    e4ea:	4798      	blx	r3
    e4ec:	e001      	b.n	e4f2 <net_buf_unref+0x32>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    e4ee:	f000 ff37 	bl	f360 <k_queue_prepend>
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    e4f2:	0029      	movs	r1, r5
    e4f4:	e7e7      	b.n	e4c6 <net_buf_unref+0x6>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    e4f6:	bd70      	pop	{r4, r5, r6, pc}
    e4f8:	2000078c 	.word	0x2000078c

0000e4fc <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    e4fc:	7903      	ldrb	r3, [r0, #4]
    e4fe:	3301      	adds	r3, #1
    e500:	7103      	strb	r3, [r0, #4]
	return buf;
}
    e502:	4770      	bx	lr

0000e504 <net_buf_simple_add>:
 *
 *  @return Tail pointer for the buffer.
 */
static inline u8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
    e504:	8882      	ldrh	r2, [r0, #4]
    e506:	6803      	ldr	r3, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    e508:	1851      	adds	r1, r2, r1
    e50a:	189b      	adds	r3, r3, r2
    e50c:	8081      	strh	r1, [r0, #4]
	return tail;
}
    e50e:	0018      	movs	r0, r3
    e510:	4770      	bx	lr

0000e512 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    e512:	b510      	push	{r4, lr}
    e514:	0004      	movs	r4, r0
    e516:	8883      	ldrh	r3, [r0, #4]
    e518:	6800      	ldr	r0, [r0, #0]
    e51a:	18c0      	adds	r0, r0, r3

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    e51c:	189b      	adds	r3, r3, r2
    e51e:	80a3      	strh	r3, [r4, #4]
void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    e520:	f7f2 fbb9 	bl	c96 <memcpy>
}
    e524:	bd10      	pop	{r4, pc}

0000e526 <net_buf_simple_add_u8>:
    e526:	8882      	ldrh	r2, [r0, #4]
    e528:	6803      	ldr	r3, [r0, #0]
    e52a:	189b      	adds	r3, r3, r2

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    e52c:	3201      	adds	r2, #1
    e52e:	8082      	strh	r2, [r0, #4]

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;

	return u8;
}
    e530:	0018      	movs	r0, r3
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    e532:	7019      	strb	r1, [r3, #0]

	return u8;
}
    e534:	4770      	bx	lr

0000e536 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
    e536:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
    e538:	8882      	ldrh	r2, [r0, #4]
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
    e53a:	1a5b      	subs	r3, r3, r1
	buf->len += len;
    e53c:	1851      	adds	r1, r2, r1
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
    e53e:	6003      	str	r3, [r0, #0]
	buf->len += len;
    e540:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
    e542:	0018      	movs	r0, r3
    e544:	4770      	bx	lr

0000e546 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    e546:	8883      	ldrh	r3, [r0, #4]
    e548:	1a5b      	subs	r3, r3, r1
    e54a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    e54c:	6803      	ldr	r3, [r0, #0]
    e54e:	1859      	adds	r1, r3, r1
    e550:	6001      	str	r1, [r0, #0]
}
    e552:	0008      	movs	r0, r1
    e554:	4770      	bx	lr

0000e556 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    e556:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
    e558:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    e55a:	2101      	movs	r1, #1

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
	u8_t val;

	val = buf->data[0];
    e55c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
    e55e:	f7ff fff2 	bl	e546 <net_buf_simple_pull>

	return val;
}
    e562:	0020      	movs	r0, r4
    e564:	bd10      	pop	{r4, pc}

0000e566 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
    e566:	6802      	ldr	r2, [r0, #0]

	return val;
}

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
    e568:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
    e56a:	7854      	ldrb	r4, [r2, #1]
    e56c:	7813      	ldrb	r3, [r2, #0]
    e56e:	0224      	lsls	r4, r4, #8
    e570:	431c      	orrs	r4, r3
	net_buf_simple_pull(buf, sizeof(val));
    e572:	2102      	movs	r1, #2
    e574:	f7ff ffe7 	bl	e546 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
    e578:	0020      	movs	r0, r4
    e57a:	bd10      	pop	{r4, pc}

0000e57c <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    e57c:	0002      	movs	r2, r0
    e57e:	6803      	ldr	r3, [r0, #0]
    e580:	3208      	adds	r2, #8
    e582:	1a98      	subs	r0, r3, r2
}
    e584:	4770      	bx	lr

0000e586 <net_buf_simple_tailroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    e586:	0003      	movs	r3, r0
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
    e588:	6801      	ldr	r1, [r0, #0]
    e58a:	88c2      	ldrh	r2, [r0, #6]
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    e58c:	3308      	adds	r3, #8
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
    e58e:	1acb      	subs	r3, r1, r3
    e590:	8880      	ldrh	r0, [r0, #4]
    e592:	1ad3      	subs	r3, r2, r3
    e594:	1a18      	subs	r0, r3, r0
}
    e596:	4770      	bx	lr

0000e598 <nordicsemi_nrf51_init>:
static bool ftpan_59(void);

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK;

static int nordicsemi_nrf51_init(struct device *arg)
{
    e598:	b530      	push	{r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    e59a:	f3ef 8010 	mrs	r0, PRIMASK
    e59e:	b672      	cpsid	i
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    e5a0:	4a1e      	ldr	r2, [pc, #120]	; (e61c <nordicsemi_nrf51_init+0x84>)
    e5a2:	7813      	ldrb	r3, [r2, #0]
    e5a4:	0011      	movs	r1, r2
    e5a6:	2b01      	cmp	r3, #1
    e5a8:	d119      	bne.n	e5de <nordicsemi_nrf51_init+0x46>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
    e5aa:	4b1d      	ldr	r3, [pc, #116]	; (e620 <nordicsemi_nrf51_init+0x88>)
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    e5ac:	681b      	ldr	r3, [r3, #0]
    e5ae:	071b      	lsls	r3, r3, #28
    e5b0:	d115      	bne.n	e5de <nordicsemi_nrf51_init+0x46>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
    e5b2:	4b1c      	ldr	r3, [pc, #112]	; (e624 <nordicsemi_nrf51_init+0x8c>)
    e5b4:	25e0      	movs	r5, #224	; 0xe0
    e5b6:	681a      	ldr	r2, [r3, #0]
    e5b8:	23f0      	movs	r3, #240	; 0xf0
    e5ba:	0014      	movs	r4, r2
    e5bc:	401c      	ands	r4, r3
    e5be:	422a      	tst	r2, r5
    e5c0:	d10b      	bne.n	e5da <nordicsemi_nrf51_init+0x42>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
    e5c2:	4a19      	ldr	r2, [pc, #100]	; (e628 <nordicsemi_nrf51_init+0x90>)

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
    e5c4:	6812      	ldr	r2, [r2, #0]
    e5c6:	421a      	tst	r2, r3
    e5c8:	d109      	bne.n	e5de <nordicsemi_nrf51_init+0x46>
	 * instructions in the devices that do not need it is that the new
	 * peripherals in the second generation devices (LPCOMP for example)
	 * will not be available.
	 */
	if (ftpan_26()) {
		*(volatile u32_t *)0x40000504 = 0xC007FFDF;
    e5ca:	4a18      	ldr	r2, [pc, #96]	; (e62c <nordicsemi_nrf51_init+0x94>)
    e5cc:	4b18      	ldr	r3, [pc, #96]	; (e630 <nordicsemi_nrf51_init+0x98>)
    e5ce:	601a      	str	r2, [r3, #0]
		*(volatile u32_t *)0x40006C18 = 0x00008000;
    e5d0:	2280      	movs	r2, #128	; 0x80
    e5d2:	4b18      	ldr	r3, [pc, #96]	; (e634 <nordicsemi_nrf51_init+0x9c>)
    e5d4:	0212      	lsls	r2, r2, #8
    e5d6:	601a      	str	r2, [r3, #0]
    e5d8:	e001      	b.n	e5de <nordicsemi_nrf51_init+0x46>
		}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x10) &&
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
    e5da:	2c30      	cmp	r4, #48	; 0x30
    e5dc:	d0f1      	beq.n	e5c2 <nordicsemi_nrf51_init+0x2a>
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    e5de:	680b      	ldr	r3, [r1, #0]
    e5e0:	b2db      	uxtb	r3, r3
    e5e2:	2b01      	cmp	r3, #1
    e5e4:	d10d      	bne.n	e602 <nordicsemi_nrf51_init+0x6a>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
    e5e6:	4a0e      	ldr	r2, [pc, #56]	; (e620 <nordicsemi_nrf51_init+0x88>)
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
    e5e8:	6812      	ldr	r2, [r2, #0]
    e5ea:	0712      	lsls	r2, r2, #28
    e5ec:	d109      	bne.n	e602 <nordicsemi_nrf51_init+0x6a>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
    e5ee:	21f0      	movs	r1, #240	; 0xf0
    e5f0:	4a0c      	ldr	r2, [pc, #48]	; (e624 <nordicsemi_nrf51_init+0x8c>)
    e5f2:	6812      	ldr	r2, [r2, #0]
    e5f4:	400a      	ands	r2, r1
    e5f6:	2a40      	cmp	r2, #64	; 0x40
    e5f8:	d103      	bne.n	e602 <nordicsemi_nrf51_init+0x6a>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
    e5fa:	4a0b      	ldr	r2, [pc, #44]	; (e628 <nordicsemi_nrf51_init+0x90>)

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
    e5fc:	6812      	ldr	r2, [r2, #0]
    e5fe:	420a      	tst	r2, r1
    e600:	d003      	beq.n	e60a <nordicsemi_nrf51_init+0x72>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    e602:	2800      	cmp	r0, #0
    e604:	d107      	bne.n	e616 <nordicsemi_nrf51_init+0x7e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    e606:	b662      	cpsie	i
	 */
	NMI_INIT();

	irq_unlock(key);

	return 0;
    e608:	e005      	b.n	e616 <nordicsemi_nrf51_init+0x7e>
	 * "MPU: Reset value of DISABLEINDEBUG register is incorrect" found
	 * at Product Anomaly document for your device found at
	 * https://www.nordicsemi.com/.
	 */
	if (ftpan_59()) {
		NRF_MPU->DISABLEINDEBUG =
    e60a:	22c1      	movs	r2, #193	; 0xc1
    e60c:	2180      	movs	r1, #128	; 0x80
    e60e:	00d2      	lsls	r2, r2, #3
    e610:	05c9      	lsls	r1, r1, #23
    e612:	508b      	str	r3, [r1, r2]
    e614:	e7f5      	b.n	e602 <nordicsemi_nrf51_init+0x6a>
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e616:	2000      	movs	r0, #0
    e618:	bd30      	pop	{r4, r5, pc}
    e61a:	46c0      	nop			; (mov r8, r8)
    e61c:	f0000fe0 	.word	0xf0000fe0
    e620:	f0000fe4 	.word	0xf0000fe4
    e624:	f0000fe8 	.word	0xf0000fe8
    e628:	f0000fec 	.word	0xf0000fec
    e62c:	c007ffdf 	.word	0xc007ffdf
    e630:	40000504 	.word	0x40000504
    e634:	40006c18 	.word	0x40006c18

0000e638 <_IntExit>:
SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _IntExit)

/* _IntExit falls through to _ExcExit (they are aliases of each other) */

#ifdef CONFIG_TIMESLICING
    push {lr}
    e638:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    e63a:	f001 f897 	bl	f76c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    e63e:	bc01      	pop	{r0}
    mov lr, r0
    e640:	4686      	mov	lr, r0
    e642:	46c0      	nop			; (mov r8, r8)

0000e644 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    e644:	4805      	ldr	r0, [pc, #20]	; (e65c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    e646:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
    e648:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
    e64a:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
    e64c:	d805      	bhi.n	e65a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    e64e:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
    e650:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    e652:	d002      	beq.n	e65a <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    e654:	4902      	ldr	r1, [pc, #8]	; (e660 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    e656:	4a03      	ldr	r2, [pc, #12]	; (e664 <_EXIT_EXC+0xa>)
    str r2, [r1]
    e658:	600a      	str	r2, [r1, #0]

0000e65a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    e65a:	4770      	bx	lr
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    e65c:	20001a10 	.word	0x20001a10
    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    cmp r0, r1
    beq _EXIT_EXC

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    e660:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
    e664:	10000000 	.word	0x10000000

0000e668 <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
    e668:	b5f0      	push	{r4, r5, r6, r7, lr}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    e66a:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
    e66c:	2200      	movs	r2, #0
    e66e:	2603      	movs	r6, #3
    e670:	25ff      	movs	r5, #255	; 0xff
    e672:	00a4      	lsls	r4, r4, #2
    e674:	0010      	movs	r0, r2
    e676:	002f      	movs	r7, r5
    e678:	4030      	ands	r0, r6
    e67a:	00c0      	lsls	r0, r0, #3
    e67c:	4087      	lsls	r7, r0
    e67e:	0893      	lsrs	r3, r2, #2
    e680:	4904      	ldr	r1, [pc, #16]	; (e694 <_IntLibInit+0x2c>)
    e682:	009b      	lsls	r3, r3, #2
    e684:	185b      	adds	r3, r3, r1
    e686:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e688:	3201      	adds	r2, #1
    e68a:	43b9      	bics	r1, r7
    e68c:	5119      	str	r1, [r3, r4]
    e68e:	2a1a      	cmp	r2, #26
    e690:	d1f0      	bne.n	e674 <_IntLibInit+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e694:	e000e100 	.word	0xe000e100

0000e698 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    e698:	4913      	ldr	r1, [pc, #76]	; (e6e8 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    e69a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    e69c:	2028      	movs	r0, #40	; 0x28
    add r0, r2
    e69e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    e6a0:	f3ef 8c09 	mrs	ip, PSP

#if defined(CONFIG_ARMV6_M)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
    e6a4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
    e6a6:	4643      	mov	r3, r8
    mov r4, r9
    e6a8:	464c      	mov	r4, r9
    mov r5, r10
    e6aa:	4655      	mov	r5, sl
    mov r6, r11
    e6ac:	465e      	mov	r6, fp
    mov r7, ip
    e6ae:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
    e6b0:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    e6b2:	4f0e      	ldr	r7, [pc, #56]	; (e6ec <_thread_irq_disabled+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    e6b4:	4e0e      	ldr	r6, [pc, #56]	; (e6f0 <_thread_irq_disabled+0x26>)

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
    e6b6:	b672      	cpsid	i
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    e6b8:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    e6ba:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    e6bc:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    e6be:	6d90      	ldr	r0, [r2, #88]	; 0x58
    movs.n r3, #0
    e6c0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    e6c2:	6593      	str	r3, [r2, #88]	; 0x58
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
    e6c4:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
    e6c6:	d100      	bne.n	e6ca <_thread_irq_disabled>
    cpsie i
    e6c8:	b662      	cpsie	i

0000e6ca <_thread_irq_disabled>:
_thread_irq_disabled:

    ldr r4, =_thread_offset_to_callee_saved
    e6ca:	2428      	movs	r4, #40	; 0x28
    adds r0, r2, r4
    e6cc:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
    e6ce:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
    e6d0:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
    e6d2:	4698      	mov	r8, r3
    mov r9, r4
    e6d4:	46a1      	mov	r9, r4
    mov r10, r5
    e6d6:	46aa      	mov	sl, r5
    mov r11, r6
    e6d8:	46b3      	mov	fp, r6
    mov ip, r7
    e6da:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    e6dc:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
    e6de:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ldmia r0, {v1-v8, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
    e6e0:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif
#endif

    /* exc return */
    bx lr
    e6e4:	4770      	bx	lr
    e6e6:	0000      	.short	0x0000
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    e6e8:	20001a10 	.word	0x20001a10
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    e6ec:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
    e6f0:	08000000 	.word	0x08000000

0000e6f4 <__svc>:
#if defined(CONFIG_ARMV6_M)
SECTION_FUNC(TEXT, __svc)
    /* Use EXC_RETURN state to find out if stack frame is on the
     * MSP or PSP
     */
    ldr r0, =0x4
    e6f4:	2004      	movs	r0, #4
    mov r1, lr
    e6f6:	4671      	mov	r1, lr
    tst r1, r0
    e6f8:	4201      	tst	r1, r0
    beq _stack_frame_msp
    e6fa:	d002      	beq.n	e702 <_stack_frame_msp>
    mrs r0, PSP
    e6fc:	f3ef 8009 	mrs	r0, PSP
    bne _stack_frame_endif
    e700:	d101      	bne.n	e706 <_stack_frame_endif>

0000e702 <_stack_frame_msp>:
_stack_frame_msp:
    mrs r0, MSP
    e702:	f3ef 8008 	mrs	r0, MSP

0000e706 <_stack_frame_endif>:
_stack_frame_endif:

    /* Figure out what SVC call number was invoked */
    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    e706:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    subs r1, r1, #2
    e708:	3902      	subs	r1, #2
    ldrb r1, [r1, #0]
    e70a:	7809      	ldrb	r1, [r1, #0]
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */

    cmp r1, #2
    e70c:	2902      	cmp	r1, #2
    beq _oops
    e70e:	d000      	beq.n	e712 <_oops>
    pop {r3}
    mov lr, r3
#endif

    /* exception return is done in _IntExit() */
    b _IntExit
    e710:	e792      	b.n	e638 <_IntExit>

0000e712 <_oops>:

_oops:
    push {lr}
    e712:	b500      	push	{lr}
    blx _do_kernel_oops
    e714:	f000 f918 	bl	e948 <_do_kernel_oops>
    pop {pc}
    e718:	bd00      	pop	{pc}
    e71a:	46c0      	nop			; (mov r8, r8)

0000e71c <__swap>:
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
    e71c:	4905      	ldr	r1, [pc, #20]	; (e734 <__swap+0x18>)
    ldr r2, [r1, #_kernel_offset_to_current]
    e71e:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
    e720:	6590      	str	r0, [r2, #88]	; 0x58

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
    e722:	4905      	ldr	r1, [pc, #20]	; (e738 <__swap+0x1c>)
    ldr r1, [r1]
    e724:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
    e726:	65d1      	str	r1, [r2, #92]	; 0x5c

#if defined(CONFIG_ARMV6_M)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
    e728:	4904      	ldr	r1, [pc, #16]	; (e73c <__swap+0x20>)
    ldr r3, =_SCS_ICSR_PENDSV
    e72a:	4b05      	ldr	r3, [pc, #20]	; (e740 <__swap+0x24>)
    str r3, [r1, #0]
    e72c:	600b      	str	r3, [r1, #0]
    /* Unlock interrupts to allow PendSV, since it's running at prio 0xff
     *
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
    e72e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
    e730:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    bx lr
    e732:	4770      	bx	lr
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
    e734:	20001a10 	.word	0x20001a10

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
    e738:	00010548 	.word	0x00010548

#if defined(CONFIG_ARMV6_M)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
    e73c:	e000ed04 	.word	0xe000ed04
    ldr r3, =_SCS_ICSR_PENDSV
    e740:	10000000 	.word	0x10000000

0000e744 <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e744:	4b0e      	ldr	r3, [pc, #56]	; (e780 <_Fault+0x3c>)
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
    e746:	b510      	push	{r4, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e748:	685a      	ldr	r2, [r3, #4]
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
    e74a:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e74c:	05d2      	lsls	r2, r2, #23
    e74e:	0dd2      	lsrs	r2, r2, #23
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
	switch (fault) {
    e750:	2a03      	cmp	r2, #3
    e752:	d108      	bne.n	e766 <_Fault+0x22>
 *
 * @return N/A
 */
static void _HardFault(const NANO_ESF *esf)
{
	PR_EXC("***** HARD FAULT *****\n");
    e754:	480b      	ldr	r0, [pc, #44]	; (e784 <_Fault+0x40>)
    e756:	f7f3 f8ef 	bl	1938 <printk>
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    e75a:	f000 ffd7 	bl	f70c <k_current_get>
    e75e:	69a2      	ldr	r2, [r4, #24]
    e760:	0001      	movs	r1, r0
    e762:	4809      	ldr	r0, [pc, #36]	; (e788 <_Fault+0x44>)
    e764:	e005      	b.n	e772 <_Fault+0x2e>
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
    e766:	4909      	ldr	r1, [pc, #36]	; (e78c <_Fault+0x48>)
    e768:	2a0f      	cmp	r2, #15
    e76a:	dd00      	ble.n	e76e <_Fault+0x2a>
    e76c:	4908      	ldr	r1, [pc, #32]	; (e790 <_Fault+0x4c>)
    e76e:	4809      	ldr	r0, [pc, #36]	; (e794 <_Fault+0x50>)
    e770:	3a10      	subs	r2, #16
    e772:	f7f3 f8e1 	bl	1938 <printk>
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    e776:	0021      	movs	r1, r4
    e778:	2000      	movs	r0, #0
    e77a:	f000 f8eb 	bl	e954 <_SysFatalErrorHandler>
}
    e77e:	bd10      	pop	{r4, pc}
    e780:	e000ed00 	.word	0xe000ed00
    e784:	0001031a 	.word	0x0001031a
    e788:	00010332 	.word	0x00010332
    e78c:	000102ec 	.word	0x000102ec
    e790:	00010301 	.word	0x00010301
    e794:	0001037c 	.word	0x0001037c

0000e798 <_FaultInit>:
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
}
    e798:	4770      	bx	lr
	...

0000e79c <_arch_irq_enable>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    e79c:	231f      	movs	r3, #31
    e79e:	4018      	ands	r0, r3
    e7a0:	3b1e      	subs	r3, #30
    e7a2:	4083      	lsls	r3, r0
    e7a4:	4a01      	ldr	r2, [pc, #4]	; (e7ac <_arch_irq_enable+0x10>)
    e7a6:	6013      	str	r3, [r2, #0]
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
    e7a8:	4770      	bx	lr
    e7aa:	46c0      	nop			; (mov r8, r8)
    e7ac:	e000e100 	.word	0xe000e100

0000e7b0 <_arch_irq_disable>:
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    e7b0:	231f      	movs	r3, #31
    e7b2:	4018      	ands	r0, r3
    e7b4:	3b1e      	subs	r3, #30
    e7b6:	4083      	lsls	r3, r0
    e7b8:	4a01      	ldr	r2, [pc, #4]	; (e7c0 <_arch_irq_disable+0x10>)
    e7ba:	67d3      	str	r3, [r2, #124]	; 0x7c
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}
    e7bc:	4770      	bx	lr
    e7be:	46c0      	nop			; (mov r8, r8)
    e7c0:	e000e104 	.word	0xe000e104

0000e7c4 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    e7c4:	0942      	lsrs	r2, r0, #5
    e7c6:	4b04      	ldr	r3, [pc, #16]	; (e7d8 <_arch_irq_is_enabled+0x14>)
    e7c8:	0092      	lsls	r2, r2, #2
    e7ca:	58d2      	ldr	r2, [r2, r3]
    e7cc:	231f      	movs	r3, #31
    e7ce:	4003      	ands	r3, r0
    e7d0:	2001      	movs	r0, #1
    e7d2:	4098      	lsls	r0, r3
    e7d4:	4010      	ands	r0, r2
}
    e7d6:	4770      	bx	lr
    e7d8:	e000e100 	.word	0xe000e100

0000e7dc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    e7dc:	b243      	sxtb	r3, r0
 * and possibly one additional to support zero latency interrupts.
 *
 * @return N/A
 */
void _irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
    e7de:	b570      	push	{r4, r5, r6, lr}
    e7e0:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
    e7e2:	2b00      	cmp	r3, #0
    e7e4:	da14      	bge.n	e810 <_irq_priority_set+0x34>
    e7e6:	230f      	movs	r3, #15
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    e7e8:	b2c0      	uxtb	r0, r0
    e7ea:	4003      	ands	r3, r0
    e7ec:	3b08      	subs	r3, #8
    e7ee:	4a12      	ldr	r2, [pc, #72]	; (e838 <_irq_priority_set+0x5c>)
    e7f0:	089b      	lsrs	r3, r3, #2
    e7f2:	2403      	movs	r4, #3
    e7f4:	009b      	lsls	r3, r3, #2
    e7f6:	189b      	adds	r3, r3, r2
    e7f8:	22ff      	movs	r2, #255	; 0xff
    e7fa:	4020      	ands	r0, r4
    e7fc:	40a0      	lsls	r0, r4
    e7fe:	0014      	movs	r4, r2
    e800:	400a      	ands	r2, r1
    e802:	4084      	lsls	r4, r0
    e804:	4082      	lsls	r2, r0
    e806:	69dd      	ldr	r5, [r3, #28]
    e808:	43a5      	bics	r5, r4
    e80a:	432a      	orrs	r2, r5
    e80c:	61da      	str	r2, [r3, #28]
    e80e:	e011      	b.n	e834 <_irq_priority_set+0x58>
    e810:	4a0a      	ldr	r2, [pc, #40]	; (e83c <_irq_priority_set+0x60>)
    e812:	089b      	lsrs	r3, r3, #2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    e814:	2503      	movs	r5, #3
    e816:	009b      	lsls	r3, r3, #2
    e818:	189b      	adds	r3, r3, r2
    e81a:	22ff      	movs	r2, #255	; 0xff
    e81c:	4028      	ands	r0, r5
    e81e:	40a8      	lsls	r0, r5
    e820:	0015      	movs	r5, r2
    e822:	24c0      	movs	r4, #192	; 0xc0
    e824:	4085      	lsls	r5, r0
    e826:	400a      	ands	r2, r1
    e828:	4082      	lsls	r2, r0
    e82a:	00a4      	lsls	r4, r4, #2
    e82c:	591e      	ldr	r6, [r3, r4]
    e82e:	43ae      	bics	r6, r5
    e830:	4332      	orrs	r2, r6
    e832:	511a      	str	r2, [r3, r4]
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
}
    e834:	bd70      	pop	{r4, r5, r6, pc}
    e836:	46c0      	nop			; (mov r8, r8)
    e838:	e000ed00 	.word	0xe000ed00
    e83c:	e000e100 	.word	0xe000e100

0000e840 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
    e840:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	__reserved();
    e842:	f000 f841 	bl	e8c8 <__hard_fault>
}
    e846:	bd10      	pop	{r4, pc}

0000e848 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    e848:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    e84a:	f3ef 8410 	mrs	r4, PRIMASK
    e84e:	b672      	cpsid	i
	__asm__ volatile("cpsid i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
    e850:	4b05      	ldr	r3, [pc, #20]	; (e868 <_arch_isr_direct_pm+0x20>)
    e852:	6958      	ldr	r0, [r3, #20]
    e854:	2800      	cmp	r0, #0
    e856:	d003      	beq.n	e860 <_arch_isr_direct_pm+0x18>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    e858:	2200      	movs	r2, #0
    e85a:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
    e85c:	f000 f970 	bl	eb40 <_sys_power_save_idle_exit>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    e860:	2c00      	cmp	r4, #0
    e862:	d100      	bne.n	e866 <_arch_isr_direct_pm+0x1e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    e864:	b662      	cpsie	i
	__asm__ volatile("cpsie i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

}
    e866:	bd10      	pop	{r4, pc}
    e868:	20001a10 	.word	0x20001a10

0000e86c <_new_thread>:

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    e86c:	b570      	push	{r4, r5, r6, lr}
    e86e:	001e      	movs	r6, r3

	__ASSERT(!((u32_t)pStackMem & (STACK_ALIGN - 1)),
		 "stack is not aligned properly\n"
		 "%d-byte alignment required\n", STACK_ALIGN);

	char *stackEnd = pStackMem + stackSize;
    e870:	188c      	adds	r4, r1, r2
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    e872:	9b08      	ldr	r3, [sp, #32]
    e874:	9907      	ldr	r1, [sp, #28]
    e876:	2204      	movs	r2, #4

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    e878:	0005      	movs	r5, r0
    e87a:	f001 fa51 	bl	fd20 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
    e87e:	2207      	movs	r2, #7
    e880:	4394      	bics	r4, r2
    e882:	0022      	movs	r2, r4
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
    e884:	2001      	movs	r0, #1

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
    e886:	2300      	movs	r3, #0
    e888:	4909      	ldr	r1, [pc, #36]	; (e8b0 <_new_thread+0x44>)

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
    e88a:	3a20      	subs	r2, #32
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
    e88c:	4381      	bics	r1, r0
    e88e:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
    e890:	652b      	str	r3, [r5, #80]	; 0x50
    e892:	6191      	str	r1, [r2, #24]
	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    e894:	9904      	ldr	r1, [sp, #16]

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
	pInitCtx->a1 = (u32_t)pEntry;
    e896:	6016      	str	r6, [r2, #0]
	pInitCtx->a2 = (u32_t)parameter1;
    e898:	6051      	str	r1, [r2, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    e89a:	9905      	ldr	r1, [sp, #20]
    e89c:	6091      	str	r1, [r2, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    e89e:	9906      	ldr	r1, [sp, #24]
    e8a0:	60d1      	str	r1, [r2, #12]
	pInitCtx->xpsr =
    e8a2:	2180      	movs	r1, #128	; 0x80
    e8a4:	0449      	lsls	r1, r1, #17
    e8a6:	61d1      	str	r1, [r2, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
    e8a8:	64aa      	str	r2, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    e8aa:	65ab      	str	r3, [r5, #88]	; 0x58
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */

	thread_monitor_init(thread);
}
    e8ac:	bd70      	pop	{r4, r5, r6, pc}
    e8ae:	46c0      	nop			; (mov r8, r8)
    e8b0:	0000fbed 	.word	0x0000fbed

0000e8b4 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    e8b4:	4901      	ldr	r1, [pc, #4]	; (e8bc <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    e8b6:	2210      	movs	r2, #16
	str r2, [r1]
    e8b8:	600a      	str	r2, [r1, #0]
	bx lr
    e8ba:	4770      	bx	lr
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    e8bc:	e000ed10 	.word	0xe000ed10

0000e8c0 <k_cpu_idle>:
	pop {r0}
	mov lr, r0
#endif

#if defined(CONFIG_ARMV6_M)
	cpsie i
    e8c0:	b662      	cpsie	i
	msr BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
    e8c2:	bf30      	wfi

	bx lr
    e8c4:	4770      	bx	lr
    e8c6:	46c0      	nop			; (mov r8, r8)

0000e8c8 <__hard_fault>:
#endif /* CONFIG_ARMV6_M */
SECTION_SUBSEC_FUNC(TEXT,__fault,__reserved)

#if defined(CONFIG_ARMV6_M)
	/* force unlock interrupts */
	cpsie i
    e8c8:	b662      	cpsie	i

	/* Use EXC_RETURN state to find out if stack frame is on the
	 * MSP or PSP
	 */
	ldr r0, =0x4
    e8ca:	2004      	movs	r0, #4
	mov r1, lr
    e8cc:	4671      	mov	r1, lr
	tst r1, r0
    e8ce:	4201      	tst	r1, r0
	beq _stack_frame_msp
    e8d0:	d002      	beq.n	e8d8 <_stack_frame_msp>
	mrs r0, PSP
    e8d2:	f3ef 8009 	mrs	r0, PSP
	bne _stack_frame_endif
    e8d6:	d101      	bne.n	e8dc <_stack_frame_endif>

0000e8d8 <_stack_frame_msp>:
_stack_frame_msp:
	mrs r0, MSP
    e8d8:	f3ef 8008 	mrs	r0, MSP

0000e8dc <_stack_frame_endif>:
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
    e8dc:	b500      	push	{lr}
	bl _Fault
    e8de:	f7ff ff31 	bl	e744 <_Fault>

	pop {pc}
    e8e2:	bd00      	pop	{pc}

0000e8e4 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    e8e4:	b570      	push	{r4, r5, r6, lr}
    e8e6:	0004      	movs	r4, r0
	switch (reason) {
    e8e8:	3801      	subs	r0, #1
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    e8ea:	000d      	movs	r5, r1
	switch (reason) {
    e8ec:	2804      	cmp	r0, #4
    e8ee:	d80e      	bhi.n	e90e <_NanoFatalErrorHandler+0x2a>
    e8f0:	f7f1 fc42 	bl	178 <__gnu_thumb1_case_uqi>
    e8f4:	09050d03 	.word	0x09050d03
    e8f8:	0b          	.byte	0x0b
    e8f9:	00          	.byte	0x00
	case _NANO_ERR_INVALID_TASK_EXIT:
		printk("***** Invalid Exit Software Error! *****\n");
    e8fa:	480d      	ldr	r0, [pc, #52]	; (e930 <_NanoFatalErrorHandler+0x4c>)
    e8fc:	e000      	b.n	e900 <_NanoFatalErrorHandler+0x1c>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    e8fe:	480d      	ldr	r0, [pc, #52]	; (e934 <_NanoFatalErrorHandler+0x50>)
    e900:	f7f3 f81a 	bl	1938 <printk>
		break;
    e904:	e007      	b.n	e916 <_NanoFatalErrorHandler+0x32>

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    e906:	480c      	ldr	r0, [pc, #48]	; (e938 <_NanoFatalErrorHandler+0x54>)
    e908:	e7fa      	b.n	e900 <_NanoFatalErrorHandler+0x1c>
		break;

	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
    e90a:	480c      	ldr	r0, [pc, #48]	; (e93c <_NanoFatalErrorHandler+0x58>)
    e90c:	e7f8      	b.n	e900 <_NanoFatalErrorHandler+0x1c>
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    e90e:	0021      	movs	r1, r4
    e910:	480b      	ldr	r0, [pc, #44]	; (e940 <_NanoFatalErrorHandler+0x5c>)
    e912:	f7f3 f811 	bl	1938 <printk>
		break;
	}
	printk("Current thread ID = %p\n"
    e916:	f000 fef9 	bl	f70c <k_current_get>
    e91a:	69aa      	ldr	r2, [r5, #24]
    e91c:	0001      	movs	r1, r0
    e91e:	4809      	ldr	r0, [pc, #36]	; (e944 <_NanoFatalErrorHandler+0x60>)
    e920:	f7f3 f80a 	bl	1938 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    e924:	0029      	movs	r1, r5
    e926:	0020      	movs	r0, r4
    e928:	f000 f814 	bl	e954 <_SysFatalErrorHandler>
}
    e92c:	bd70      	pop	{r4, r5, r6, pc}
    e92e:	46c0      	nop			; (mov r8, r8)
    e930:	00010390 	.word	0x00010390
    e934:	000103ba 	.word	0x000103ba
    e938:	000103e0 	.word	0x000103e0
    e93c:	000103fa 	.word	0x000103fa
    e940:	00010415 	.word	0x00010415
    e944:	00010438 	.word	0x00010438

0000e948 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    e948:	b510      	push	{r4, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
    e94a:	0001      	movs	r1, r0
    e94c:	6800      	ldr	r0, [r0, #0]
    e94e:	f7ff ffc9 	bl	e8e4 <_NanoFatalErrorHandler>
}
    e952:	bd10      	pop	{r4, pc}

0000e954 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
    e954:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    e956:	2805      	cmp	r0, #5
    e958:	d01a      	beq.n	e990 <_SysFatalErrorHandler+0x3c>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    e95a:	f001 f935 	bl	fbc8 <k_is_in_isr>
    e95e:	2800      	cmp	r0, #0
    e960:	d006      	beq.n	e970 <_SysFatalErrorHandler+0x1c>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    e962:	f001 f931 	bl	fbc8 <k_is_in_isr>
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
    e966:	490c      	ldr	r1, [pc, #48]	; (e998 <_SysFatalErrorHandler+0x44>)
    e968:	2800      	cmp	r0, #0
    e96a:	d10e      	bne.n	e98a <_SysFatalErrorHandler+0x36>
    e96c:	490b      	ldr	r1, [pc, #44]	; (e99c <_SysFatalErrorHandler+0x48>)
    e96e:	e00c      	b.n	e98a <_SysFatalErrorHandler+0x36>
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    e970:	f001 f934 	bl	fbdc <_is_thread_essential>
    e974:	2800      	cmp	r0, #0
    e976:	d1f4      	bne.n	e962 <_SysFatalErrorHandler+0xe>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
		goto hang_system;
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    e978:	4c09      	ldr	r4, [pc, #36]	; (e9a0 <_SysFatalErrorHandler+0x4c>)
    e97a:	480a      	ldr	r0, [pc, #40]	; (e9a4 <_SysFatalErrorHandler+0x50>)
    e97c:	68a1      	ldr	r1, [r4, #8]
    e97e:	f7f2 ffdb 	bl	1938 <printk>
	k_thread_abort(_current);
    e982:	68a0      	ldr	r0, [r4, #8]
    e984:	f000 f812 	bl	e9ac <k_thread_abort>

	for (;;) {
		k_cpu_idle();
	}
	CODE_UNREACHABLE;
}
    e988:	bd10      	pop	{r4, pc}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
    e98a:	4807      	ldr	r0, [pc, #28]	; (e9a8 <_SysFatalErrorHandler+0x54>)
    e98c:	f7f2 ffd4 	bl	1938 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    e990:	f7ff ff96 	bl	e8c0 <k_cpu_idle>
    e994:	e7fc      	b.n	e990 <_SysFatalErrorHandler+0x3c>
    e996:	46c0      	nop			; (mov r8, r8)
    e998:	00010474 	.word	0x00010474
    e99c:	00010478 	.word	0x00010478
    e9a0:	20001a10 	.word	0x20001a10
    e9a4:	000104a9 	.word	0x000104a9
    e9a8:	00010489 	.word	0x00010489

0000e9ac <k_thread_abort>:
#include <wait_q.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void k_thread_abort(k_tid_t thread)
{
    e9ac:	b570      	push	{r4, r5, r6, lr}
    e9ae:	0005      	movs	r5, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    e9b0:	f3ef 8410 	mrs	r4, PRIMASK
    e9b4:	b672      	cpsid	i
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
    e9b6:	f001 f94b 	bl	fc50 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    e9ba:	4b0b      	ldr	r3, [pc, #44]	; (e9e8 <k_thread_abort+0x3c>)
    e9bc:	689b      	ldr	r3, [r3, #8]
    e9be:	429d      	cmp	r5, r3
    e9c0:	d10d      	bne.n	e9de <k_thread_abort+0x32>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    e9c2:	4b0a      	ldr	r3, [pc, #40]	; (e9ec <k_thread_abort+0x40>)
    e9c4:	685a      	ldr	r2, [r3, #4]
    e9c6:	05d2      	lsls	r2, r2, #23
    e9c8:	d104      	bne.n	e9d4 <k_thread_abort+0x28>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    e9ca:	f000 fecf 	bl	f76c <_update_time_slice_before_swap>
#endif

	return __swap(key);
    e9ce:	0020      	movs	r0, r4
    e9d0:	f7ff fea4 	bl	e71c <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e9d4:	2180      	movs	r1, #128	; 0x80
    e9d6:	685a      	ldr	r2, [r3, #4]
    e9d8:	0549      	lsls	r1, r1, #21
    e9da:	430a      	orrs	r2, r1
    e9dc:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    e9de:	0020      	movs	r0, r4
    e9e0:	f000 fe08 	bl	f5f4 <_reschedule_threads>
}
    e9e4:	bd70      	pop	{r4, r5, r6, pc}
    e9e6:	46c0      	nop			; (mov r8, r8)
    e9e8:	20001a10 	.word	0x20001a10
    e9ec:	e000ed00 	.word	0xe000ed00

0000e9f0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    e9f0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    e9f2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    e9f4:	4a0a      	ldr	r2, [pc, #40]	; (ea20 <_idle_state_cleared+0x1c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    e9f6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    e9f8:	2800      	cmp	r0, #0

#if defined(CONFIG_ARMV6_M)
	beq _idle_state_cleared
    e9fa:	d003      	beq.n	ea04 <_idle_state_cleared>
	movs.n r1, #0
    e9fc:	2100      	movs	r1, #0
	/* clear kernel idle state */
	str r1, [r2, #_kernel_offset_to_idle]
    e9fe:	6151      	str	r1, [r2, #20]
	blx _sys_power_save_idle_exit
    ea00:	f000 f89e 	bl	eb40 <_sys_power_save_idle_exit>

0000ea04 <_idle_state_cleared>:
		blxne	_sys_power_save_idle_exit
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ea04:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    ea06:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
    ea0a:	2110      	movs	r1, #16
	subs r0, r1	/* get IRQ number */
    ea0c:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
    ea0e:	00c0      	lsls	r0, r0, #3
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
    ea10:	4904      	ldr	r1, [pc, #16]	; (ea24 <_idle_state_cleared+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    ea12:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    ea14:	c909      	ldmia	r1!, {r0, r3}
	pop {r3}
#else
	pop {lr}
#endif
#endif
	blx r3		/* call ISR */
    ea16:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
    ea18:	bc08      	pop	{r3}
	mov lr, r3
    ea1a:	469e      	mov	lr, r3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
    ea1c:	e60c      	b.n	e638 <_IntExit>
    ea1e:	0000      	.short	0x0000
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    ea20:	20001a10 	.word	0x20001a10
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
    ea24:	000000a8 	.word	0x000000a8

0000ea28 <__reset>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
    ea28:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
    ea2a:	4804      	ldr	r0, [pc, #16]	; (ea3c <__reset+0x14>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    ea2c:	4904      	ldr	r1, [pc, #16]	; (ea40 <__reset+0x18>)
    adds r0, r0, r1
    ea2e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    ea30:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    ea34:	2002      	movs	r0, #2
    msr CONTROL, r0
    ea36:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    ea3a:	e005      	b.n	ea48 <_PrepC>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
    ea3c:	20002c80 	.word	0x20002c80
    ldr r1, =CONFIG_ISR_STACK_SIZE
    ea40:	00000800 	.word	0x00000800

0000ea44 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    ea44:	bf30      	wfi
    b _SysNmiOnReset
    ea46:	e7fd      	b.n	ea44 <_SysNmiOnReset>

0000ea48 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    ea48:	b510      	push	{r4, lr}
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    ea4a:	f000 f8a9 	bl	eba0 <_bss_zero>
	_data_copy();
    ea4e:	f000 f8b3 	bl	ebb8 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    ea52:	f000 f8d3 	bl	ebfc <_Cstart>

0000ea56 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    ea56:	b510      	push	{r4, lr}
	handler();
    ea58:	f7ff fff4 	bl	ea44 <_SysNmiOnReset>
	_ExcExit();
    ea5c:	f7ff fdf2 	bl	e644 <_ExcExit>
}
    ea60:	bd10      	pop	{r4, pc}

0000ea62 <atomic_add>:
    ea62:	f3ef 8210 	mrs	r2, PRIMASK
    ea66:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    ea68:	6803      	ldr	r3, [r0, #0]
	*target += value;
    ea6a:	1859      	adds	r1, r3, r1
    ea6c:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    ea6e:	2a00      	cmp	r2, #0
    ea70:	d100      	bne.n	ea74 <atomic_add+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    ea72:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    ea74:	0018      	movs	r0, r3
    ea76:	4770      	bx	lr

0000ea78 <atomic_inc>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    ea78:	f3ef 8210 	mrs	r2, PRIMASK
    ea7c:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    ea7e:	6803      	ldr	r3, [r0, #0]
	(*target)++;
    ea80:	1c59      	adds	r1, r3, #1
    ea82:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    ea84:	2a00      	cmp	r2, #0
    ea86:	d100      	bne.n	ea8a <atomic_inc+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    ea88:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    ea8a:	0018      	movs	r0, r3
    ea8c:	4770      	bx	lr

0000ea8e <atomic_dec>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    ea8e:	f3ef 8210 	mrs	r2, PRIMASK
    ea92:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    ea94:	6803      	ldr	r3, [r0, #0]
	(*target)--;
    ea96:	1e59      	subs	r1, r3, #1
    ea98:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    ea9a:	2a00      	cmp	r2, #0
    ea9c:	d100      	bne.n	eaa0 <atomic_dec+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    ea9e:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    eaa0:	0018      	movs	r0, r3
    eaa2:	4770      	bx	lr

0000eaa4 <atomic_get>:
 *
 * @return The value read from <target>
 */
atomic_val_t atomic_get(const atomic_t *target)
{
	return *target;
    eaa4:	6800      	ldr	r0, [r0, #0]
}
    eaa6:	4770      	bx	lr

0000eaa8 <atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
    eaa8:	0003      	movs	r3, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    eaaa:	f3ef 8210 	mrs	r2, PRIMASK
    eaae:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    eab0:	6800      	ldr	r0, [r0, #0]
	*target = value;
    eab2:	6019      	str	r1, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    eab4:	2a00      	cmp	r2, #0
    eab6:	d100      	bne.n	eaba <atomic_set+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    eab8:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    eaba:	4770      	bx	lr

0000eabc <atomic_or>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    eabc:	f3ef 8210 	mrs	r2, PRIMASK
    eac0:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    eac2:	6803      	ldr	r3, [r0, #0]
	*target |= value;
    eac4:	4319      	orrs	r1, r3
    eac6:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    eac8:	2a00      	cmp	r2, #0
    eaca:	d100      	bne.n	eace <atomic_or+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    eacc:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    eace:	0018      	movs	r0, r3
    ead0:	4770      	bx	lr

0000ead2 <atomic_and>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    ead2:	f3ef 8210 	mrs	r2, PRIMASK
    ead6:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
    ead8:	6803      	ldr	r3, [r0, #0]
	*target &= value;
    eada:	4019      	ands	r1, r3
    eadc:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    eade:	2a00      	cmp	r2, #0
    eae0:	d100      	bne.n	eae4 <atomic_and+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    eae2:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
    eae4:	0018      	movs	r0, r3
    eae6:	4770      	bx	lr

0000eae8 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    eae8:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    eaea:	4e07      	ldr	r6, [pc, #28]	; (eb08 <_sys_device_do_config_level+0x20>)
    eaec:	0083      	lsls	r3, r0, #2
    eaee:	599d      	ldr	r5, [r3, r6]
    eaf0:	3001      	adds	r0, #1
    eaf2:	0084      	lsls	r4, r0, #2
    eaf4:	5933      	ldr	r3, [r6, r4]
    eaf6:	429d      	cmp	r5, r3
    eaf8:	d205      	bcs.n	eb06 <_sys_device_do_config_level+0x1e>
								info++) {
		struct device_config *device = info->config;

		device->init(info);
    eafa:	682b      	ldr	r3, [r5, #0]
    eafc:	0028      	movs	r0, r5
    eafe:	685b      	ldr	r3, [r3, #4]
    eb00:	4798      	blx	r3
void _sys_device_do_config_level(int level)
{
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
								info++) {
    eb02:	350c      	adds	r5, #12
    eb04:	e7f6      	b.n	eaf4 <_sys_device_do_config_level+0xc>
		struct device_config *device = info->config;

		device->init(info);
	}
}
    eb06:	bd70      	pop	{r4, r5, r6, pc}
    eb08:	00010534 	.word	0x00010534

0000eb0c <device_get_binding>:

struct device *device_get_binding(const char *name)
{
    eb0c:	b570      	push	{r4, r5, r6, lr}
    eb0e:	0005      	movs	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
    eb10:	4c09      	ldr	r4, [pc, #36]	; (eb38 <device_get_binding+0x2c>)
    eb12:	4b0a      	ldr	r3, [pc, #40]	; (eb3c <device_get_binding+0x30>)
    eb14:	429c      	cmp	r4, r3
    eb16:	d00d      	beq.n	eb34 <device_get_binding+0x28>
		if (info->driver_api && !strcmp(name, info->config->name)) {
    eb18:	6863      	ldr	r3, [r4, #4]
    eb1a:	2b00      	cmp	r3, #0
    eb1c:	d101      	bne.n	eb22 <device_get_binding+0x16>

struct device *device_get_binding(const char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
    eb1e:	340c      	adds	r4, #12
    eb20:	e7f7      	b.n	eb12 <device_get_binding+0x6>
		if (info->driver_api && !strcmp(name, info->config->name)) {
    eb22:	6823      	ldr	r3, [r4, #0]
    eb24:	0028      	movs	r0, r5
    eb26:	6819      	ldr	r1, [r3, #0]
    eb28:	f7f2 f894 	bl	c54 <strcmp>
    eb2c:	2800      	cmp	r0, #0
    eb2e:	d1f6      	bne.n	eb1e <device_get_binding+0x12>
    eb30:	0020      	movs	r0, r4
    eb32:	e000      	b.n	eb36 <device_get_binding+0x2a>
			return info;
		}
	}

	return NULL;
    eb34:	2000      	movs	r0, #0
}
    eb36:	bd70      	pop	{r4, r5, r6, pc}
    eb38:	200006e4 	.word	0x200006e4
    eb3c:	20000750 	.word	0x20000750

0000eb40 <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
    eb40:	b510      	push	{r4, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    eb42:	1c43      	adds	r3, r0, #1
    eb44:	d003      	beq.n	eb4e <_sys_power_save_idle_exit+0xe>
    eb46:	4b03      	ldr	r3, [pc, #12]	; (eb54 <_sys_power_save_idle_exit+0x14>)
    eb48:	681b      	ldr	r3, [r3, #0]
    eb4a:	4298      	cmp	r0, r3
    eb4c:	db01      	blt.n	eb52 <_sys_power_save_idle_exit+0x12>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    eb4e:	f7f2 fa07 	bl	f60 <_timer_idle_exit>
	}
}
    eb52:	bd10      	pop	{r4, pc}
    eb54:	200006d8 	.word	0x200006d8

0000eb58 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    eb58:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    eb5a:	f3ef 8310 	mrs	r3, PRIMASK
    eb5e:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    eb60:	4d0b      	ldr	r5, [pc, #44]	; (eb90 <idle+0x38>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eb62:	4a0c      	ldr	r2, [pc, #48]	; (eb94 <idle+0x3c>)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    eb64:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eb66:	4293      	cmp	r3, r2
    eb68:	d009      	beq.n	eb7e <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    eb6a:	2b00      	cmp	r3, #0
    eb6c:	d007      	beq.n	eb7e <idle+0x26>
    eb6e:	691c      	ldr	r4, [r3, #16]
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
    eb70:	1c63      	adds	r3, r4, #1
    eb72:	d006      	beq.n	eb82 <idle+0x2a>
    eb74:	4b08      	ldr	r3, [pc, #32]	; (eb98 <idle+0x40>)
    eb76:	681b      	ldr	r3, [r3, #0]
    eb78:	42a3      	cmp	r3, r4
    eb7a:	dd02      	ble.n	eb82 <idle+0x2a>
    eb7c:	e004      	b.n	eb88 <idle+0x30>
    eb7e:	2401      	movs	r4, #1
    eb80:	4264      	negs	r4, r4
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
    eb82:	0020      	movs	r0, r4
    eb84:	f7f2 f9d6 	bl	f34 <_timer_idle_enter>
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
    eb88:	616c      	str	r4, [r5, #20]
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
    eb8a:	f7ff fe99 	bl	e8c0 <k_cpu_idle>
    eb8e:	e7e4      	b.n	eb5a <idle+0x2>
    eb90:	20001a10 	.word	0x20001a10
    eb94:	20001a1c 	.word	0x20001a1c
    eb98:	200006d8 	.word	0x200006d8

0000eb9c <k_call_stacks_analyze>:
#endif /* CONFIG_ARC */
	STACK_ANALYZE("interrupt", _interrupt_stack);
	STACK_ANALYZE("workqueue", sys_work_q_stack);

#endif /* CONFIG_INIT_STACKS && CONFIG_PRINTK */
}
    eb9c:	4770      	bx	lr
	...

0000eba0 <_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
    eba0:	b510      	push	{r4, lr}
	memset(&__bss_start, 0,
    eba2:	4803      	ldr	r0, [pc, #12]	; (ebb0 <_bss_zero+0x10>)
    eba4:	4a03      	ldr	r2, [pc, #12]	; (ebb4 <_bss_zero+0x14>)
    eba6:	2100      	movs	r1, #0
    eba8:	1a12      	subs	r2, r2, r0
    ebaa:	f7f2 f89e 	bl	cea <memset>
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
#ifdef CONFIG_APPLICATION_MEMORY
	memset(&__app_bss_start, 0,
		 ((u32_t) &__app_bss_end - (u32_t) &__app_bss_start));
#endif
}
    ebae:	bd10      	pop	{r4, pc}
    ebb0:	200007f8 	.word	0x200007f8
    ebb4:	20001cbc 	.word	0x20001cbc

0000ebb8 <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
    ebb8:	b510      	push	{r4, lr}
	memcpy(&__data_ram_start, &__data_rom_start,
    ebba:	4803      	ldr	r0, [pc, #12]	; (ebc8 <_data_copy+0x10>)
    ebbc:	4a03      	ldr	r2, [pc, #12]	; (ebcc <_data_copy+0x14>)
    ebbe:	4904      	ldr	r1, [pc, #16]	; (ebd0 <_data_copy+0x18>)
    ebc0:	1a12      	subs	r2, r2, r0
    ebc2:	f7f2 f868 	bl	c96 <memcpy>
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
#ifdef CONFIG_APPLICATION_MEMORY
	memcpy(&__app_data_ram_start, &__app_data_rom_start,
		 ((u32_t) &__app_data_ram_end - (u32_t) &__app_data_ram_start));
#endif
}
    ebc6:	bd10      	pop	{r4, pc}
    ebc8:	20000000 	.word	0x20000000
    ebcc:	200007f8 	.word	0x200007f8
    ebd0:	00010550 	.word	0x00010550

0000ebd4 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
    ebd4:	b510      	push	{r4, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ebd6:	2002      	movs	r0, #2
    ebd8:	f7ff ff86 	bl	eae8 <_sys_device_do_config_level>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    ebdc:	2003      	movs	r0, #3
    ebde:	f7ff ff83 	bl	eae8 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    ebe2:	f001 f85d 	bl	fca0 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    ebe6:	f7f1 fed3 	bl	990 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    ebea:	2101      	movs	r1, #1
    ebec:	4a02      	ldr	r2, [pc, #8]	; (ebf8 <_main+0x24>)
    ebee:	7a13      	ldrb	r3, [r2, #8]
    ebf0:	438b      	bics	r3, r1
    ebf2:	7213      	strb	r3, [r2, #8]
}
    ebf4:	bd10      	pop	{r4, pc}
    ebf6:	46c0      	nop			; (mov r8, r8)
    ebf8:	20001950 	.word	0x20001950

0000ebfc <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    ebfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebfe:	b087      	sub	sp, #28
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
    ec00:	f7ff fd32 	bl	e668 <_IntLibInit>
    ec04:	4b2f      	ldr	r3, [pc, #188]	; (ecc4 <_Cstart+0xc8>)
    ec06:	4a30      	ldr	r2, [pc, #192]	; (ecc8 <_Cstart+0xcc>)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    ec08:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    ec0a:	605b      	str	r3, [r3, #4]
    ec0c:	3308      	adds	r3, #8

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    ec0e:	429a      	cmp	r2, r3
    ec10:	d1fa      	bne.n	ec08 <_Cstart+0xc>
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;

	_new_thread(_main_thread, _main_stack,
    ec12:	2400      	movs	r4, #0
    ec14:	2301      	movs	r3, #1
    ec16:	2280      	movs	r2, #128	; 0x80
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
    ec18:	4d2c      	ldr	r5, [pc, #176]	; (eccc <_Cstart+0xd0>)
    ec1a:	4e2d      	ldr	r6, [pc, #180]	; (ecd0 <_Cstart+0xd4>)

	_new_thread(_main_thread, _main_stack,
    ec1c:	492d      	ldr	r1, [pc, #180]	; (ecd4 <_Cstart+0xd8>)
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
    ec1e:	61b5      	str	r5, [r6, #24]

	_new_thread(_main_thread, _main_stack,
    ec20:	0028      	movs	r0, r5
    ec22:	9304      	str	r3, [sp, #16]
    ec24:	9403      	str	r4, [sp, #12]
    ec26:	9402      	str	r4, [sp, #8]
    ec28:	9401      	str	r4, [sp, #4]
    ec2a:	9400      	str	r4, [sp, #0]
    ec2c:	4b2a      	ldr	r3, [pc, #168]	; (ecd8 <_Cstart+0xdc>)
    ec2e:	00d2      	lsls	r2, r2, #3
    ec30:	f7ff fe1c 	bl	e86c <_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ec34:	2204      	movs	r2, #4
    ec36:	7a6b      	ldrb	r3, [r5, #9]
		    MAIN_STACK_SIZE, _main, NULL, NULL, NULL,
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);
    ec38:	0028      	movs	r0, r5
    ec3a:	4393      	bics	r3, r2
    ec3c:	726b      	strb	r3, [r5, #9]
    ec3e:	f000 fc2f 	bl	f4a0 <_add_thread_to_ready_q>

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_thread, _idle_stack,
    ec42:	2301      	movs	r3, #1
    ec44:	2280      	movs	r2, #128	; 0x80
    ec46:	4f25      	ldr	r7, [pc, #148]	; (ecdc <_Cstart+0xe0>)
    ec48:	9304      	str	r3, [sp, #16]
    ec4a:	330e      	adds	r3, #14
    ec4c:	9303      	str	r3, [sp, #12]
    ec4e:	4924      	ldr	r1, [pc, #144]	; (ece0 <_Cstart+0xe4>)
    ec50:	0038      	movs	r0, r7
    ec52:	9402      	str	r4, [sp, #8]
    ec54:	9401      	str	r4, [sp, #4]
    ec56:	9400      	str	r4, [sp, #0]
    ec58:	4b22      	ldr	r3, [pc, #136]	; (ece4 <_Cstart+0xe8>)
    ec5a:	0052      	lsls	r2, r2, #1
    ec5c:	f7ff fe06 	bl	e86c <_new_thread>
    ec60:	2204      	movs	r2, #4
    ec62:	7a7b      	ldrb	r3, [r7, #9]
		    IDLE_STACK_SIZE, idle, NULL, NULL, NULL,
		    K_LOWEST_THREAD_PRIO, K_ESSENTIAL);
	_mark_thread_as_started(_idle_thread);
	_add_thread_to_ready_q(_idle_thread);
    ec64:	0038      	movs	r0, r7
    ec66:	4393      	bics	r3, r2
    ec68:	727b      	strb	r3, [r7, #9]
    ec6a:	f000 fc19 	bl	f4a0 <_add_thread_to_ready_q>
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
    ec6e:	2280      	movs	r2, #128	; 0x80
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    ec70:	4b1d      	ldr	r3, [pc, #116]	; (ece8 <_Cstart+0xec>)
    ec72:	0112      	lsls	r2, r2, #4
    ec74:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
    ec76:	6133      	str	r3, [r6, #16]
    ec78:	4b1c      	ldr	r3, [pc, #112]	; (ecec <_Cstart+0xf0>)
    ec7a:	189b      	adds	r3, r3, r2
    ec7c:	f383 8808 	msr	MSP, r3
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    ec80:	4a1b      	ldr	r2, [pc, #108]	; (ecf0 <_Cstart+0xf4>)
    ec82:	4b1c      	ldr	r3, [pc, #112]	; (ecf4 <_Cstart+0xf8>)
    ec84:	6a11      	ldr	r1, [r2, #32]
    ec86:	400b      	ands	r3, r1
    ec88:	21c0      	movs	r1, #192	; 0xc0
    ec8a:	0409      	lsls	r1, r1, #16
    ec8c:	430b      	orrs	r3, r1
    ec8e:	6213      	str	r3, [r2, #32]
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    ec90:	f7ff fd82 	bl	e798 <_FaultInit>
	_CpuIdleInit();
    ec94:	f7ff fe0e 	bl	e8b4 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ec98:	0020      	movs	r0, r4
    ec9a:	f7ff ff25 	bl	eae8 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ec9e:	2001      	movs	r0, #1
    eca0:	f7ff ff22 	bl	eae8 <_sys_device_do_config_level>

	_current = main_thread;

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    eca4:	2280      	movs	r2, #128	; 0x80
    eca6:	4b0b      	ldr	r3, [pc, #44]	; (ecd4 <_Cstart+0xd8>)
    eca8:	00d2      	lsls	r2, r2, #3
    ecaa:	189b      	adds	r3, r3, r2
    ecac:	2207      	movs	r2, #7
    ecae:	490a      	ldr	r1, [pc, #40]	; (ecd8 <_Cstart+0xdc>)
    ecb0:	4393      	bics	r3, r2
	char *start_of_main_stack;

	start_of_main_stack = main_stack + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    ecb2:	60b5      	str	r5, [r6, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    ecb4:	4a10      	ldr	r2, [pc, #64]	; (ecf8 <_Cstart+0xfc>)
    ecb6:	000c      	movs	r4, r1
    ecb8:	f383 8809 	msr	PSP, r3
    ecbc:	b662      	cpsie	i
    ecbe:	1c20      	adds	r0, r4, #0
    ecc0:	4710      	bx	r2
    ecc2:	46c0      	nop			; (mov r8, r8)
    ecc4:	20001a30 	.word	0x20001a30
    ecc8:	20001b30 	.word	0x20001b30
    eccc:	20001950 	.word	0x20001950
    ecd0:	20001a10 	.word	0x20001a10
    ecd4:	20002780 	.word	0x20002780
    ecd8:	0000ebd5 	.word	0x0000ebd5
    ecdc:	200019b0 	.word	0x200019b0
    ece0:	20002b80 	.word	0x20002b80
    ece4:	0000eb59 	.word	0x0000eb59
    ece8:	20001a1c 	.word	0x20001a1c
    ecec:	20002c80 	.word	0x20002c80
    ecf0:	e000ed00 	.word	0xe000ed00
    ecf4:	ff00ffff 	.word	0xff00ffff
    ecf8:	0000fbed 	.word	0x0000fbed

0000ecfc <adjust_owner_prio.isra.6>:
	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
    ecfc:	230a      	movs	r3, #10
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    ecfe:	b570      	push	{r4, r5, r6, lr}
{
	if (mutex->owner->base.prio != new_prio) {
    ed00:	56c3      	ldrsb	r3, [r0, r3]
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    ed02:	0004      	movs	r4, r0
    ed04:	000d      	movs	r5, r1
{
	if (mutex->owner->base.prio != new_prio) {
    ed06:	428b      	cmp	r3, r1
    ed08:	d00d      	beq.n	ed26 <adjust_owner_prio.isra.6+0x2a>
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    ed0a:	7a43      	ldrb	r3, [r0, #9]
    ed0c:	06db      	lsls	r3, r3, #27
    ed0e:	d109      	bne.n	ed24 <adjust_owner_prio.isra.6+0x28>
    ed10:	6a03      	ldr	r3, [r0, #32]
    ed12:	3301      	adds	r3, #1
    ed14:	d106      	bne.n	ed24 <adjust_owner_prio.isra.6+0x28>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
    ed16:	f000 fbeb 	bl	f4f0 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
    ed1a:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
    ed1c:	0020      	movs	r0, r4
    ed1e:	f000 fbbf 	bl	f4a0 <_add_thread_to_ready_q>
    ed22:	e000      	b.n	ed26 <adjust_owner_prio.isra.6+0x2a>
	} else {
		thread->base.prio = prio;
    ed24:	72a5      	strb	r5, [r4, #10]
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
    ed26:	bd70      	pop	{r4, r5, r6, pc}

0000ed28 <k_mutex_lock>:

int k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
    ed28:	b570      	push	{r4, r5, r6, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    ed2a:	4a2f      	ldr	r2, [pc, #188]	; (ede8 <k_mutex_lock+0xc0>)
    ed2c:	000d      	movs	r5, r1
    ed2e:	6891      	ldr	r1, [r2, #8]
    ed30:	0004      	movs	r4, r0
    ed32:	7acb      	ldrb	r3, [r1, #11]
    ed34:	3b01      	subs	r3, #1
    ed36:	72cb      	strb	r3, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
    ed38:	68c3      	ldr	r3, [r0, #12]
    ed3a:	0010      	movs	r0, r2
    ed3c:	2b00      	cmp	r3, #0
    ed3e:	d005      	beq.n	ed4c <k_mutex_lock+0x24>
    ed40:	68a1      	ldr	r1, [r4, #8]
    ed42:	6892      	ldr	r2, [r2, #8]
    ed44:	4291      	cmp	r1, r2
    ed46:	d10d      	bne.n	ed64 <k_mutex_lock+0x3c>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
    ed48:	6922      	ldr	r2, [r4, #16]
    ed4a:	e002      	b.n	ed52 <k_mutex_lock+0x2a>
    ed4c:	6892      	ldr	r2, [r2, #8]
    ed4e:	7a92      	ldrb	r2, [r2, #10]
    ed50:	b252      	sxtb	r2, r2
					mutex->owner_orig_prio;

		mutex->lock_count++;
    ed52:	3301      	adds	r3, #1
    ed54:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    ed56:	6883      	ldr	r3, [r0, #8]

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
    ed58:	6122      	str	r2, [r4, #16]
					_current->base.prio :
					mutex->owner_orig_prio;

		mutex->lock_count++;
		mutex->owner = _current;
    ed5a:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
    ed5c:	f000 fc64 	bl	f628 <k_sched_unlock>

		return 0;
    ed60:	2000      	movs	r0, #0
    ed62:	e040      	b.n	ede6 <k_mutex_lock+0xbe>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
    ed64:	2d00      	cmp	r5, #0
    ed66:	d103      	bne.n	ed70 <k_mutex_lock+0x48>
		k_sched_unlock();
    ed68:	f000 fc5e 	bl	f628 <k_sched_unlock>
		return -EBUSY;
    ed6c:	2010      	movs	r0, #16
    ed6e:	e039      	b.n	ede4 <k_mutex_lock+0xbc>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
    ed70:	230a      	movs	r3, #10
    ed72:	56cb      	ldrsb	r3, [r1, r3]
    ed74:	210a      	movs	r1, #10
    ed76:	5651      	ldrsb	r1, [r2, r1]
    ed78:	4299      	cmp	r1, r3
    ed7a:	dd00      	ble.n	ed7e <k_mutex_lock+0x56>
    ed7c:	0019      	movs	r1, r3
    ed7e:	43cb      	mvns	r3, r1
    ed80:	17db      	asrs	r3, r3, #31
    ed82:	4019      	ands	r1, r3
    ed84:	f3ef 8610 	mrs	r6, PRIMASK
    ed88:	b672      	cpsid	i

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    ed8a:	230a      	movs	r3, #10
    ed8c:	68a0      	ldr	r0, [r4, #8]
    ed8e:	56c3      	ldrsb	r3, [r0, r3]
    ed90:	428b      	cmp	r3, r1
    ed92:	dd01      	ble.n	ed98 <k_mutex_lock+0x70>
		adjust_owner_prio(mutex, new_prio);
    ed94:	f7ff ffb2 	bl	ecfc <adjust_owner_prio.isra.6>
	}

	_pend_current_thread(&mutex->wait_q, timeout);
    ed98:	0020      	movs	r0, r4
    ed9a:	0029      	movs	r1, r5
    ed9c:	f000 fc08 	bl	f5b0 <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    eda0:	f000 fce4 	bl	f76c <_update_time_slice_before_swap>
#endif

	return __swap(key);
    eda4:	0030      	movs	r0, r6
    eda6:	f7ff fcb9 	bl	e71c <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
    edaa:	2800      	cmp	r0, #0
    edac:	d0d6      	beq.n	ed5c <k_mutex_lock+0x34>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    edae:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    edb0:	42a3      	cmp	r3, r4
    edb2:	d100      	bne.n	edb6 <k_mutex_lock+0x8e>
    edb4:	2300      	movs	r3, #0
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
    edb6:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
    edb8:	2b00      	cmp	r3, #0
    edba:	d007      	beq.n	edcc <k_mutex_lock+0xa4>

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
    edbc:	7a9b      	ldrb	r3, [r3, #10]
    edbe:	b25b      	sxtb	r3, r3
    edc0:	4299      	cmp	r1, r3
    edc2:	dd00      	ble.n	edc6 <k_mutex_lock+0x9e>
    edc4:	0019      	movs	r1, r3
    edc6:	43cb      	mvns	r3, r1
    edc8:	17db      	asrs	r3, r3, #31
    edca:	4019      	ands	r1, r3
    edcc:	f3ef 8510 	mrs	r5, PRIMASK
    edd0:	b672      	cpsid	i
						     new_prio) : new_prio;

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
    edd2:	68a0      	ldr	r0, [r4, #8]
    edd4:	f7ff ff92 	bl	ecfc <adjust_owner_prio.isra.6>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    edd8:	2d00      	cmp	r5, #0
    edda:	d100      	bne.n	edde <k_mutex_lock+0xb6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    eddc:	b662      	cpsie	i
	irq_unlock(key);

	k_sched_unlock();
    edde:	f000 fc23 	bl	f628 <k_sched_unlock>

	return -EAGAIN;
    ede2:	200b      	movs	r0, #11
    ede4:	4240      	negs	r0, r0
}
    ede6:	bd70      	pop	{r4, r5, r6, pc}
    ede8:	20001a10 	.word	0x20001a10

0000edec <k_mutex_unlock>:

void k_mutex_unlock(struct k_mutex *mutex)
{
    edec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    edee:	4e34      	ldr	r6, [pc, #208]	; (eec0 <k_mutex_unlock+0xd4>)
    edf0:	0005      	movs	r5, r0
    edf2:	68b2      	ldr	r2, [r6, #8]
    edf4:	7ad3      	ldrb	r3, [r2, #11]
    edf6:	3b01      	subs	r3, #1
    edf8:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    edfa:	68c3      	ldr	r3, [r0, #12]
    edfc:	3b01      	subs	r3, #1
    edfe:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
    ee00:	2b00      	cmp	r3, #0
    ee02:	d002      	beq.n	ee0a <k_mutex_unlock+0x1e>
		k_sched_unlock();
    ee04:	f000 fc10 	bl	f628 <k_sched_unlock>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
    ee08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    ee0a:	f3ef 8710 	mrs	r7, PRIMASK
    ee0e:	b672      	cpsid	i
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ee10:	6901      	ldr	r1, [r0, #16]
    ee12:	6880      	ldr	r0, [r0, #8]
    ee14:	f7ff ff72 	bl	ecfc <adjust_owner_prio.isra.6>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    ee18:	4b2a      	ldr	r3, [pc, #168]	; (eec4 <k_mutex_unlock+0xd8>)
    ee1a:	682c      	ldr	r4, [r5, #0]
    ee1c:	681b      	ldr	r3, [r3, #0]
    ee1e:	2b00      	cmp	r3, #0
    ee20:	d00b      	beq.n	ee3a <k_mutex_unlock+0x4e>
    ee22:	42a5      	cmp	r5, r4
    ee24:	d042      	beq.n	eeac <k_mutex_unlock+0xc0>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    ee26:	2c00      	cmp	r4, #0
    ee28:	d040      	beq.n	eeac <k_mutex_unlock+0xc0>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    ee2a:	6a23      	ldr	r3, [r4, #32]
    ee2c:	3302      	adds	r3, #2
    ee2e:	d108      	bne.n	ee42 <k_mutex_unlock+0x56>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    ee30:	686b      	ldr	r3, [r5, #4]
    ee32:	42a3      	cmp	r3, r4
    ee34:	d03a      	beq.n	eeac <k_mutex_unlock+0xc0>
    ee36:	6824      	ldr	r4, [r4, #0]
    ee38:	e7f5      	b.n	ee26 <k_mutex_unlock+0x3a>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ee3a:	42a5      	cmp	r5, r4
    ee3c:	d036      	beq.n	eeac <k_mutex_unlock+0xc0>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    ee3e:	2c00      	cmp	r4, #0
    ee40:	d034      	beq.n	eeac <k_mutex_unlock+0xc0>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    ee42:	6863      	ldr	r3, [r4, #4]
    ee44:	6822      	ldr	r2, [r4, #0]
    ee46:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ee48:	6822      	ldr	r2, [r4, #0]
    ee4a:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    ee4c:	2202      	movs	r2, #2
    ee4e:	7a63      	ldrb	r3, [r4, #9]
    ee50:	4393      	bics	r3, r2
    ee52:	7263      	strb	r3, [r4, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    ee54:	6a23      	ldr	r3, [r4, #32]
    ee56:	1c5a      	adds	r2, r3, #1
    ee58:	d010      	beq.n	ee7c <k_mutex_unlock+0x90>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    ee5a:	0022      	movs	r2, r4
    ee5c:	6931      	ldr	r1, [r6, #16]
    ee5e:	3210      	adds	r2, #16
    ee60:	4291      	cmp	r1, r2
    ee62:	d003      	beq.n	ee6c <k_mutex_unlock+0x80>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    ee64:	6922      	ldr	r2, [r4, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    ee66:	6911      	ldr	r1, [r2, #16]
    ee68:	18cb      	adds	r3, r1, r3
    ee6a:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    ee6c:	6963      	ldr	r3, [r4, #20]
    ee6e:	6922      	ldr	r2, [r4, #16]
    ee70:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ee72:	6922      	ldr	r2, [r4, #16]
    ee74:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    ee76:	2301      	movs	r3, #1
    ee78:	425b      	negs	r3, r3
    ee7a:	6223      	str	r3, [r4, #32]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ee7c:	7a63      	ldrb	r3, [r4, #9]
    ee7e:	2204      	movs	r2, #4
    ee80:	0019      	movs	r1, r3
    ee82:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    ee84:	221b      	movs	r2, #27
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ee86:	7261      	strb	r1, [r4, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    ee88:	4213      	tst	r3, r2
    ee8a:	d102      	bne.n	ee92 <k_mutex_unlock+0xa6>
    ee8c:	6a23      	ldr	r3, [r4, #32]
    ee8e:	3301      	adds	r3, #1
    ee90:	d012      	beq.n	eeb8 <k_mutex_unlock+0xcc>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    ee92:	2f00      	cmp	r7, #0
    ee94:	d100      	bne.n	ee98 <k_mutex_unlock+0xac>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    ee96:	b662      	cpsie	i
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    ee98:	2300      	movs	r3, #0
    ee9a:	65e3      	str	r3, [r4, #92]	; 0x5c
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
		mutex->lock_count++;
    ee9c:	68eb      	ldr	r3, [r5, #12]
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
    ee9e:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
    eea0:	3301      	adds	r3, #1
    eea2:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
    eea4:	230a      	movs	r3, #10
    eea6:	56e3      	ldrsb	r3, [r4, r3]
    eea8:	612b      	str	r3, [r5, #16]
    eeaa:	e7ab      	b.n	ee04 <k_mutex_unlock+0x18>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    eeac:	2f00      	cmp	r7, #0
    eeae:	d100      	bne.n	eeb2 <k_mutex_unlock+0xc6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    eeb0:	b662      	cpsie	i
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
    eeb2:	2300      	movs	r3, #0
    eeb4:	60ab      	str	r3, [r5, #8]
    eeb6:	e7a5      	b.n	ee04 <k_mutex_unlock+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    eeb8:	0020      	movs	r0, r4
    eeba:	f000 faf1 	bl	f4a0 <_add_thread_to_ready_q>
    eebe:	e7e8      	b.n	ee92 <k_mutex_unlock+0xa6>
    eec0:	20001a10 	.word	0x20001a10
    eec4:	20001c38 	.word	0x20001c38

0000eec8 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    eec8:	230c      	movs	r3, #12
    eeca:	b510      	push	{r4, lr}
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;
    eecc:	2400      	movs	r4, #0
    eece:	434b      	muls	r3, r1
    eed0:	18c0      	adds	r0, r0, r3
/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
	for (; last_registered >= 0; last_registered--) {
    eed2:	2900      	cmp	r1, #0
    eed4:	db17      	blt.n	ef06 <clear_event_registrations+0x3e>
/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;

	switch (event->type) {
    eed6:	7943      	ldrb	r3, [r0, #5]
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;
    eed8:	6004      	str	r4, [r0, #0]

	switch (event->type) {
    eeda:	071b      	lsls	r3, r3, #28
    eedc:	0f1b      	lsrs	r3, r3, #28
    eede:	2b02      	cmp	r3, #2
    eee0:	d006      	beq.n	eef0 <clear_event_registrations+0x28>
    eee2:	2b04      	cmp	r3, #4
    eee4:	d004      	beq.n	eef0 <clear_event_registrations+0x28>
    eee6:	2b01      	cmp	r3, #1
    eee8:	d104      	bne.n	eef4 <clear_event_registrations+0x2c>
		__ASSERT(event->queue, "invalid queue\n");
		event->queue->poll_event = NULL;
		break;
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->signal, "invalid poll signal\n");
		event->signal->poll_event = NULL;
    eeea:	6883      	ldr	r3, [r0, #8]
    eeec:	601c      	str	r4, [r3, #0]
    eeee:	e001      	b.n	eef4 <clear_event_registrations+0x2c>
		__ASSERT(event->sem, "invalid semaphore\n");
		event->sem->poll_event = NULL;
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue, "invalid queue\n");
		event->queue->poll_event = NULL;
    eef0:	6883      	ldr	r3, [r0, #8]
    eef2:	611c      	str	r4, [r3, #16]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    eef4:	2a00      	cmp	r2, #0
    eef6:	d100      	bne.n	eefa <clear_event_registrations+0x32>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    eef8:	b662      	cpsie	i
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    eefa:	f3ef 8210 	mrs	r2, PRIMASK
    eefe:	b672      	cpsid	i
/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
	for (; last_registered >= 0; last_registered--) {
    ef00:	3901      	subs	r1, #1
    ef02:	380c      	subs	r0, #12
    ef04:	e7e5      	b.n	eed2 <clear_event_registrations+0xa>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    ef06:	bd10      	pop	{r4, pc}

0000ef08 <_signal_poll_event>:

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
	*must_reschedule = 0;
    ef08:	2300      	movs	r3, #0
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    ef0a:	b570      	push	{r4, r5, r6, lr}
	*must_reschedule = 0;
    ef0c:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    ef0e:	6803      	ldr	r3, [r0, #0]
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    ef10:	0004      	movs	r4, r0
    ef12:	000d      	movs	r5, r1
    ef14:	0016      	movs	r6, r2
	*must_reschedule = 0;

	if (!event->poller) {
    ef16:	2b00      	cmp	r3, #0
    ef18:	d043      	beq.n	efa2 <_signal_poll_event+0x9a>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    ef1a:	6818      	ldr	r0, [r3, #0]
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
    ef1c:	2220      	movs	r2, #32
    ef1e:	7a43      	ldrb	r3, [r0, #9]
    ef20:	0019      	movs	r1, r3
    ef22:	4391      	bics	r1, r2

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    ef24:	2202      	movs	r2, #2
    ef26:	7241      	strb	r1, [r0, #9]
    ef28:	4213      	tst	r3, r2
    ef2a:	d03a      	beq.n	efa2 <_signal_poll_event+0x9a>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    ef2c:	6a03      	ldr	r3, [r0, #32]
    ef2e:	3302      	adds	r3, #2
    ef30:	d045      	beq.n	efbe <_signal_poll_event+0xb6>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    ef32:	6843      	ldr	r3, [r0, #4]
    ef34:	6801      	ldr	r1, [r0, #0]
    ef36:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    ef38:	6801      	ldr	r1, [r0, #0]
    ef3a:	604b      	str	r3, [r1, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    ef3c:	7a43      	ldrb	r3, [r0, #9]
    ef3e:	4393      	bics	r3, r2
    ef40:	7243      	strb	r3, [r0, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    ef42:	6a03      	ldr	r3, [r0, #32]
    ef44:	1c5a      	adds	r2, r3, #1
    ef46:	d011      	beq.n	ef6c <_signal_poll_event+0x64>
    ef48:	4a20      	ldr	r2, [pc, #128]	; (efcc <_signal_poll_event+0xc4>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    ef4a:	6911      	ldr	r1, [r2, #16]
    ef4c:	0002      	movs	r2, r0
    ef4e:	3210      	adds	r2, #16
    ef50:	4291      	cmp	r1, r2
    ef52:	d003      	beq.n	ef5c <_signal_poll_event+0x54>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    ef54:	6902      	ldr	r2, [r0, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    ef56:	6911      	ldr	r1, [r2, #16]
    ef58:	18cb      	adds	r3, r1, r3
    ef5a:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    ef5c:	6943      	ldr	r3, [r0, #20]
    ef5e:	6902      	ldr	r2, [r0, #16]
    ef60:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ef62:	6902      	ldr	r2, [r0, #16]
    ef64:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    ef66:	2301      	movs	r3, #1
    ef68:	425b      	negs	r3, r3
    ef6a:	6203      	str	r3, [r0, #32]
    ef6c:	2300      	movs	r3, #0
    ef6e:	65c3      	str	r3, [r0, #92]	; 0x5c
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    ef70:	7a43      	ldrb	r3, [r0, #9]
    ef72:	06db      	lsls	r3, r3, #27
    ef74:	d115      	bne.n	efa2 <_signal_poll_event+0x9a>
    ef76:	6a03      	ldr	r3, [r0, #32]
    ef78:	3301      	adds	r3, #1
    ef7a:	d112      	bne.n	efa2 <_signal_poll_event+0x9a>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    ef7c:	f000 fa90 	bl	f4a0 <_add_thread_to_ready_q>
 */
static ALWAYS_INLINE u32_t _IpsrGet(void)
{
	u32_t vector;

	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
    ef80:	f3ef 8305 	mrs	r3, IPSR
#endif
#if defined(CONFIG_ARMV6_M)
		/* On ARMv6-M there is no nested execution bit, so we check
		 * exception 3, hard fault, to a detect a nested exception.
		 */
		|| (vector == 3)
    ef84:	2b0d      	cmp	r3, #13
    ef86:	d81d      	bhi.n	efc4 <_signal_poll_event+0xbc>
    ef88:	2b03      	cmp	r3, #3
    ef8a:	d01b      	beq.n	efc4 <_signal_poll_event+0xbc>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    ef8c:	4b0f      	ldr	r3, [pc, #60]	; (efcc <_signal_poll_event+0xc4>)
    ef8e:	689b      	ldr	r3, [r3, #8]
    ef90:	895b      	ldrh	r3, [r3, #10]
    ef92:	2b7f      	cmp	r3, #127	; 0x7f
    ef94:	d816      	bhi.n	efc4 <_signal_poll_event+0xbc>
    ef96:	f000 fb1b 	bl	f5d0 <__must_switch_threads>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    ef9a:	2301      	movs	r3, #1
    ef9c:	2800      	cmp	r0, #0
    ef9e:	d011      	beq.n	efc4 <_signal_poll_event+0xbc>
    efa0:	6033      	str	r3, [r6, #0]
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
	event->state |= state;
    efa2:	221f      	movs	r2, #31
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
    efa4:	2000      	movs	r0, #0
	event->state |= state;
    efa6:	6866      	ldr	r6, [r4, #4]
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
    efa8:	6020      	str	r0, [r4, #0]
	event->state |= state;
    efaa:	03f1      	lsls	r1, r6, #15
    efac:	0ec9      	lsrs	r1, r1, #27
    efae:	4329      	orrs	r1, r5
    efb0:	4011      	ands	r1, r2
    efb2:	030b      	lsls	r3, r1, #12
    efb4:	4906      	ldr	r1, [pc, #24]	; (efd0 <_signal_poll_event+0xc8>)
    efb6:	4031      	ands	r1, r6
    efb8:	4319      	orrs	r1, r3
    efba:	6061      	str	r1, [r4, #4]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
    efbc:	e004      	b.n	efc8 <_signal_poll_event+0xc0>
	if (!_is_thread_pending(thread)) {
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
		return -EAGAIN;
    efbe:	200b      	movs	r0, #11
    efc0:	4240      	negs	r0, r0
    efc2:	e001      	b.n	efc8 <_signal_poll_event+0xc0>
	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    efc4:	2300      	movs	r3, #0
    efc6:	e7eb      	b.n	efa0 <_signal_poll_event+0x98>

ready_event:
	set_event_ready(event, state);
	return 0;
}
    efc8:	bd70      	pop	{r4, r5, r6, pc}
    efca:	46c0      	nop			; (mov r8, r8)
    efcc:	20001a10 	.word	0x20001a10
    efd0:	fffe0fff 	.word	0xfffe0fff

0000efd4 <k_poll_event_init>:
#include <misc/dlist.h>
#include <misc/__assert.h>

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
    efd4:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
    efd6:	2400      	movs	r4, #0
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
    efd8:	260f      	movs	r6, #15
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
    efda:	6004      	str	r4, [r0, #0]
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
    efdc:	7944      	ldrb	r4, [r0, #5]
    efde:	4031      	ands	r1, r6
    efe0:	43b4      	bics	r4, r6
    efe2:	430c      	orrs	r4, r1
    efe4:	7144      	strb	r4, [r0, #5]
	event->state = K_POLL_STATE_NOT_READY;
    efe6:	6841      	ldr	r1, [r0, #4]
    efe8:	4c08      	ldr	r4, [pc, #32]	; (f00c <k_poll_event_init+0x38>)
	event->mode = mode;
	event->unused = 0;
	event->obj = obj;
    efea:	6083      	str	r3, [r0, #8]
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
    efec:	400c      	ands	r4, r1
	event->mode = mode;
    efee:	2101      	movs	r1, #1
    eff0:	400a      	ands	r2, r1
    eff2:	0051      	lsls	r1, r2, #1
    eff4:	22fc      	movs	r2, #252	; 0xfc
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
    eff6:	0c25      	lsrs	r5, r4, #16
	event->mode = mode;
    eff8:	402a      	ands	r2, r5
    effa:	430a      	orrs	r2, r1
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
    effc:	6044      	str	r4, [r0, #4]
	event->mode = mode;
    effe:	7182      	strb	r2, [r0, #6]
	event->unused = 0;
    f000:	2203      	movs	r2, #3
    f002:	88c1      	ldrh	r1, [r0, #6]
    f004:	400a      	ands	r2, r1
    f006:	80c2      	strh	r2, [r0, #6]
	event->obj = obj;
}
    f008:	bd70      	pop	{r4, r5, r6, pc}
    f00a:	46c0      	nop			; (mov r8, r8)
    f00c:	fffe0fff 	.word	0xfffe0fff

0000f010 <k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
    f010:	b5f0      	push	{r4, r5, r6, r7, lr}
    f012:	b089      	sub	sp, #36	; 0x24
    f014:	0006      	movs	r6, r0
    f016:	9102      	str	r1, [sp, #8]
    f018:	9201      	str	r2, [sp, #4]
    f01a:	f3ef 8410 	mrs	r4, PRIMASK
    f01e:	b672      	cpsid	i
#endif
}

static inline void _set_thread_states(struct k_thread *thread, u32_t states)
{
	thread->base.thread_state |= states;
    f020:	2520      	movs	r5, #32

	int last_registered = -1, in_use = 0, rc;
	unsigned int key;

	key = irq_lock();
	set_polling_state(_current);
    f022:	4b56      	ldr	r3, [pc, #344]	; (f17c <k_poll+0x16c>)
    f024:	6898      	ldr	r0, [r3, #8]
    f026:	7a42      	ldrb	r2, [r0, #9]
    f028:	432a      	orrs	r2, r5
    f02a:	7242      	strb	r2, [r0, #9]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f02c:	2c00      	cmp	r4, #0
    f02e:	d100      	bne.n	f032 <k_poll+0x22>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f030:	b662      	cpsie	i
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
    f032:	2200      	movs	r2, #0
	/*
	 * We can get by with one poller structure for all events for now:
	 * if/when we allow multiple threads to poll on the same object, we
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };
    f034:	689b      	ldr	r3, [r3, #8]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
    f036:	2501      	movs	r5, #1
	/*
	 * We can get by with one poller structure for all events for now:
	 * if/when we allow multiple threads to poll on the same object, we
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };
    f038:	9305      	str	r3, [sp, #20]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
    f03a:	0014      	movs	r4, r2
    f03c:	0033      	movs	r3, r6
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
    f03e:	9200      	str	r2, [sp, #0]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
    f040:	426d      	negs	r5, r5
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
    f042:	9a02      	ldr	r2, [sp, #8]
    f044:	9900      	ldr	r1, [sp, #0]
    f046:	4291      	cmp	r1, r2
    f048:	da1d      	bge.n	f086 <k_poll+0x76>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f04a:	f3ef 8010 	mrs	r0, PRIMASK
    f04e:	b672      	cpsid	i
    f050:	9003      	str	r0, [sp, #12]
}

/* must be called with interrupts locked */
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
    f052:	7958      	ldrb	r0, [r3, #5]
    f054:	0700      	lsls	r0, r0, #28
    f056:	0f00      	lsrs	r0, r0, #28
    f058:	2802      	cmp	r0, #2
    f05a:	d007      	beq.n	f06c <k_poll+0x5c>
    f05c:	2804      	cmp	r0, #4
    f05e:	d00a      	beq.n	f076 <k_poll+0x66>
    f060:	2801      	cmp	r0, #1
    f062:	d13e      	bne.n	f0e2 <k_poll+0xd2>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_SIGNAL:
		if (event->signal->signaled) {
    f064:	689f      	ldr	r7, [r3, #8]
    f066:	687a      	ldr	r2, [r7, #4]
			*state = K_POLL_STATE_SIGNALED;
    f068:	2702      	movs	r7, #2
    f06a:	e009      	b.n	f080 <k_poll+0x70>
    f06c:	689f      	ldr	r7, [r3, #8]
/* must be called with interrupts locked */
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0) {
    f06e:	68bf      	ldr	r7, [r7, #8]
    f070:	2f00      	cmp	r7, #0
    f072:	d16a      	bne.n	f14a <k_poll+0x13a>
    f074:	e035      	b.n	f0e2 <k_poll+0xd2>
    f076:	689f      	ldr	r7, [r3, #8]
			*state = K_POLL_STATE_SEM_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		if (!k_queue_is_empty(event->queue)) {
    f078:	68bf      	ldr	r7, [r7, #8]
    f07a:	46bc      	mov	ip, r7
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
    f07c:	2708      	movs	r7, #8
			*state = K_POLL_STATE_SEM_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		if (!k_queue_is_empty(event->queue)) {
    f07e:	4662      	mov	r2, ip
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_SIGNAL:
		if (event->signal->signaled) {
    f080:	2a00      	cmp	r2, #0
    f082:	d163      	bne.n	f14c <k_poll+0x13c>
    f084:	e02d      	b.n	f0e2 <k_poll+0xd2>
    f086:	f3ef 8710 	mrs	r7, PRIMASK
    f08a:	b672      	cpsid	i
	 * success or a -EADDRINUSE error. In the case of a -EADDRINUSE error,
	 * the events that were available are still flagged as such, and it is
	 * valid for the caller to consider them available, as if this function
	 * returned success.
	 */
	if (!is_polling()) {
    f08c:	2020      	movs	r0, #32
}

/* must be called with interrupts locked */
static inline int is_polling(void)
{
	return _is_thread_polling(_current);
    f08e:	4b3b      	ldr	r3, [pc, #236]	; (f17c <k_poll+0x16c>)
    f090:	689a      	ldr	r2, [r3, #8]
    f092:	7a53      	ldrb	r3, [r2, #9]
	 * success or a -EADDRINUSE error. In the case of a -EADDRINUSE error,
	 * the events that were available are still flagged as such, and it is
	 * valid for the caller to consider them available, as if this function
	 * returned success.
	 */
	if (!is_polling()) {
    f094:	4203      	tst	r3, r0
    f096:	d017      	beq.n	f0c8 <k_poll+0xb8>
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
    f098:	4383      	bics	r3, r0
    f09a:	7253      	strb	r3, [r2, #9]
		return in_use;
	}

	clear_polling_state(_current);

	if (timeout == K_NO_WAIT) {
    f09c:	9b01      	ldr	r3, [sp, #4]
    f09e:	2b00      	cmp	r3, #0
    f0a0:	d103      	bne.n	f0aa <k_poll+0x9a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f0a2:	2f00      	cmp	r7, #0
    f0a4:	d11a      	bne.n	f0dc <k_poll+0xcc>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f0a6:	b662      	cpsie	i
    f0a8:	e018      	b.n	f0dc <k_poll+0xcc>
		irq_unlock(key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    f0aa:	a806      	add	r0, sp, #24

	_pend_current_thread(&wait_q, timeout);
    f0ac:	9901      	ldr	r1, [sp, #4]
	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    f0ae:	9006      	str	r0, [sp, #24]
    f0b0:	6040      	str	r0, [r0, #4]

	_pend_current_thread(&wait_q, timeout);
    f0b2:	f000 fa7d 	bl	f5b0 <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    f0b6:	f000 fb59 	bl	f76c <_update_time_slice_before_swap>
#endif

	return __swap(key);
    f0ba:	0038      	movs	r0, r7
    f0bc:	f7ff fb2e 	bl	e71c <__swap>
    f0c0:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f0c2:	f3ef 8710 	mrs	r7, PRIMASK
    f0c6:	b672      	cpsid	i
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = irq_lock();
	clear_event_registrations(events, last_registered, key);
    f0c8:	0030      	movs	r0, r6
    f0ca:	003a      	movs	r2, r7
    f0cc:	0029      	movs	r1, r5
    f0ce:	f7ff fefb 	bl	eec8 <clear_event_registrations>
	irq_unlock(key);

	return swap_rc;
    f0d2:	0020      	movs	r0, r4
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f0d4:	2f00      	cmp	r7, #0
    f0d6:	d14f      	bne.n	f178 <k_poll+0x168>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f0d8:	b662      	cpsie	i
    f0da:	e04d      	b.n	f178 <k_poll+0x168>

	clear_polling_state(_current);

	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EAGAIN;
    f0dc:	200b      	movs	r0, #11
    f0de:	4240      	negs	r0, r0
    f0e0:	e04a      	b.n	f178 <k_poll+0x168>

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
    f0e2:	9a01      	ldr	r2, [sp, #4]
    f0e4:	2a00      	cmp	r2, #0
    f0e6:	d027      	beq.n	f138 <k_poll+0x128>
    f0e8:	2120      	movs	r1, #32
}

/* must be called with interrupts locked */
static inline int is_polling(void)
{
	return _is_thread_polling(_current);
    f0ea:	4f24      	ldr	r7, [pc, #144]	; (f17c <k_poll+0x16c>)
    f0ec:	68bf      	ldr	r7, [r7, #8]

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
    f0ee:	7a7a      	ldrb	r2, [r7, #9]
    f0f0:	420a      	tst	r2, r1
    f0f2:	d021      	beq.n	f138 <k_poll+0x128>
    f0f4:	2c00      	cmp	r4, #0
    f0f6:	d11f      	bne.n	f138 <k_poll+0x128>
}

/* must be called with interrupts locked */
static inline int register_event(struct k_poll_event *event)
{
	switch (event->type) {
    f0f8:	2802      	cmp	r0, #2
    f0fa:	d004      	beq.n	f106 <k_poll+0xf6>
    f0fc:	2804      	cmp	r0, #4
    f0fe:	d002      	beq.n	f106 <k_poll+0xf6>
    f100:	2801      	cmp	r0, #1
    f102:	d135      	bne.n	f170 <k_poll+0x160>
    f104:	e005      	b.n	f112 <k_poll+0x102>
		}
		event->sem->poll_event = event;
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue, "invalid queue\n");
		if (event->queue->poll_event) {
    f106:	6898      	ldr	r0, [r3, #8]
    f108:	6902      	ldr	r2, [r0, #16]
    f10a:	2a00      	cmp	r2, #0
    f10c:	d107      	bne.n	f11e <k_poll+0x10e>
			return -EADDRINUSE;
		}
		event->queue->poll_event = event;
    f10e:	6103      	str	r3, [r0, #16]
    f110:	e02e      	b.n	f170 <k_poll+0x160>
		break;
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->queue, "invalid poll signal\n");
		if (event->signal->poll_event) {
    f112:	6898      	ldr	r0, [r3, #8]
    f114:	6802      	ldr	r2, [r0, #0]
    f116:	2a00      	cmp	r2, #0
    f118:	d101      	bne.n	f11e <k_poll+0x10e>
			return -EADDRINUSE;
		}
		event->signal->poll_event = event;
    f11a:	6003      	str	r3, [r0, #0]
    f11c:	e028      	b.n	f170 <k_poll+0x160>
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
				events[ii].state = K_POLL_STATE_EADDRINUSE;
    f11e:	685a      	ldr	r2, [r3, #4]
    f120:	4817      	ldr	r0, [pc, #92]	; (f180 <k_poll+0x170>)
				++last_registered;
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
    f122:	2430      	movs	r4, #48	; 0x30
				events[ii].state = K_POLL_STATE_EADDRINUSE;
    f124:	4010      	ands	r0, r2
    f126:	2280      	movs	r2, #128	; 0x80
    f128:	0152      	lsls	r2, r2, #5
    f12a:	4310      	orrs	r0, r2
    f12c:	2220      	movs	r2, #32
    f12e:	6058      	str	r0, [r3, #4]
    f130:	7a78      	ldrb	r0, [r7, #9]
				++last_registered;
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
    f132:	4264      	negs	r4, r4
    f134:	4390      	bics	r0, r2
    f136:	7278      	strb	r0, [r7, #9]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f138:	9a03      	ldr	r2, [sp, #12]
    f13a:	2a00      	cmp	r2, #0
    f13c:	d100      	bne.n	f140 <k_poll+0x130>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f13e:	b662      	cpsie	i
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
    f140:	9a00      	ldr	r2, [sp, #0]
    f142:	330c      	adds	r3, #12
    f144:	3201      	adds	r2, #1
    f146:	9200      	str	r2, [sp, #0]
    f148:	e77b      	b.n	f042 <k_poll+0x32>
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0) {
			*state = K_POLL_STATE_SEM_AVAILABLE;
    f14a:	2704      	movs	r7, #4
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
    f14c:	2000      	movs	r0, #0
	event->state |= state;
    f14e:	685a      	ldr	r2, [r3, #4]
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
    f150:	6018      	str	r0, [r3, #0]
	event->state |= state;
    f152:	03d0      	lsls	r0, r2, #15
    f154:	0ec0      	lsrs	r0, r0, #27
    f156:	4307      	orrs	r7, r0
    f158:	4809      	ldr	r0, [pc, #36]	; (f180 <k_poll+0x170>)
    f15a:	033f      	lsls	r7, r7, #12
    f15c:	4010      	ands	r0, r2
    f15e:	2220      	movs	r2, #32
    f160:	4338      	orrs	r0, r7
    f162:	6058      	str	r0, [r3, #4]
		u32_t state;

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
    f164:	4805      	ldr	r0, [pc, #20]	; (f17c <k_poll+0x16c>)
    f166:	6887      	ldr	r7, [r0, #8]
    f168:	7a78      	ldrb	r0, [r7, #9]
    f16a:	4390      	bics	r0, r2
    f16c:	7278      	strb	r0, [r7, #9]
    f16e:	e7e3      	b.n	f138 <k_poll+0x128>
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
			rc = register_event(&events[ii]);
			if (rc == 0) {
				events[ii].poller = &poller;
    f170:	a805      	add	r0, sp, #20
    f172:	6018      	str	r0, [r3, #0]
				++last_registered;
    f174:	3501      	adds	r5, #1
    f176:	e7df      	b.n	f138 <k_poll+0x128>
	key = irq_lock();
	clear_event_registrations(events, last_registered, key);
	irq_unlock(key);

	return swap_rc;
}
    f178:	b009      	add	sp, #36	; 0x24
    f17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f17c:	20001a10 	.word	0x20001a10
    f180:	fffe0fff 	.word	0xfffe0fff

0000f184 <_handle_obj_poll_event>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
    f184:	b507      	push	{r0, r1, r2, lr}
    f186:	0003      	movs	r3, r0
	struct k_poll_event *poll_event = *obj_poll_event;
	int must_reschedule;

	*obj_poll_event = NULL;
    f188:	2200      	movs	r2, #0

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
	struct k_poll_event *poll_event = *obj_poll_event;
    f18a:	6800      	ldr	r0, [r0, #0]
	int must_reschedule;

	*obj_poll_event = NULL;
    f18c:	601a      	str	r2, [r3, #0]
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
    f18e:	aa01      	add	r2, sp, #4
    f190:	f7ff feba 	bl	ef08 <_signal_poll_event>
	return must_reschedule;
}
    f194:	9801      	ldr	r0, [sp, #4]
    f196:	bd0e      	pop	{r1, r2, r3, pc}

0000f198 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
    f198:	b537      	push	{r0, r1, r2, r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f19a:	f3ef 8510 	mrs	r5, PRIMASK
    f19e:	b672      	cpsid	i
	unsigned int key = irq_lock();
	int must_reschedule;

	signal->result = result;
	signal->signaled = 1;
    f1a0:	2301      	movs	r3, #1
int k_poll_signal(struct k_poll_signal *signal, int result)
{
	unsigned int key = irq_lock();
	int must_reschedule;

	signal->result = result;
    f1a2:	6081      	str	r1, [r0, #8]
	signal->signaled = 1;
    f1a4:	6043      	str	r3, [r0, #4]

	if (!signal->poll_event) {
    f1a6:	6800      	ldr	r0, [r0, #0]
    f1a8:	2800      	cmp	r0, #0
    f1aa:	d00e      	beq.n	f1ca <k_poll_signal+0x32>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(signal->poll_event, K_POLL_STATE_SIGNALED,
    f1ac:	aa01      	add	r2, sp, #4
    f1ae:	2102      	movs	r1, #2
    f1b0:	f7ff feaa 	bl	ef08 <_signal_poll_event>
				    &must_reschedule);

	if (must_reschedule) {
    f1b4:	9b01      	ldr	r3, [sp, #4]
	if (!signal->poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(signal->poll_event, K_POLL_STATE_SIGNALED,
    f1b6:	0004      	movs	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
    f1b8:	2b00      	cmp	r3, #0
    f1ba:	d006      	beq.n	f1ca <k_poll_signal+0x32>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    f1bc:	f000 fad6 	bl	f76c <_update_time_slice_before_swap>
#endif

	return __swap(key);
    f1c0:	0028      	movs	r0, r5
    f1c2:	f7ff faab 	bl	e71c <__swap>
		(void)_Swap(key);
	} else {
		irq_unlock(key);
	}

	return rc;
    f1c6:	0020      	movs	r0, r4
    f1c8:	e002      	b.n	f1d0 <k_poll_signal+0x38>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f1ca:	2d00      	cmp	r5, #0
    f1cc:	d100      	bne.n	f1d0 <k_poll_signal+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f1ce:	b662      	cpsie	i
}
    f1d0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f1d2 <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f1d2:	7a43      	ldrb	r3, [r0, #9]
    f1d4:	2204      	movs	r2, #4
    f1d6:	0019      	movs	r1, r3
    f1d8:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    f1da:	221b      	movs	r2, #27
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
    f1dc:	b510      	push	{r4, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f1de:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    f1e0:	4213      	tst	r3, r2
    f1e2:	d104      	bne.n	f1ee <_ready_thread+0x1c>
    f1e4:	6a03      	ldr	r3, [r0, #32]
    f1e6:	3301      	adds	r3, #1
    f1e8:	d101      	bne.n	f1ee <_ready_thread+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    f1ea:	f000 f959 	bl	f4a0 <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
    f1ee:	bd10      	pop	{r4, pc}

0000f1f0 <handle_poll_event>:
	_set_thread_return_value_with_data(thread, 0, data);
}

/* returns 1 if a reschedule must take place, 0 otherwise */
static inline int handle_poll_event(struct k_queue *queue)
{
    f1f0:	0003      	movs	r3, r0
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
    f1f2:	6900      	ldr	r0, [r0, #16]
	_set_thread_return_value_with_data(thread, 0, data);
}

/* returns 1 if a reschedule must take place, 0 otherwise */
static inline int handle_poll_event(struct k_queue *queue)
{
    f1f4:	b510      	push	{r4, lr}
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
    f1f6:	2800      	cmp	r0, #0
    f1f8:	d004      	beq.n	f204 <handle_poll_event+0x14>
    f1fa:	3310      	adds	r3, #16
    f1fc:	0018      	movs	r0, r3
    f1fe:	2108      	movs	r1, #8
    f200:	f7ff ffc0 	bl	f184 <_handle_obj_poll_event>
#else
	return 0;
#endif
}
    f204:	bd10      	pop	{r4, pc}

0000f206 <_Swap>:
#ifdef CONFIG_STACK_SENTINEL
extern void _check_stack_sentinel(void);
#endif

static inline unsigned int _Swap(unsigned int key)
{
    f206:	b510      	push	{r4, lr}
    f208:	0004      	movs	r4, r0

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    f20a:	f000 faaf 	bl	f76c <_update_time_slice_before_swap>
#endif

	return __swap(key);
    f20e:	0020      	movs	r0, r4
    f210:	f7ff fa84 	bl	e71c <__swap>
}
    f214:	bd10      	pop	{r4, pc}
	...

0000f218 <_must_switch_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    f218:	4b05      	ldr	r3, [pc, #20]	; (f230 <_must_switch_threads+0x18>)
/*
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
    f21a:	b510      	push	{r4, lr}
    f21c:	689b      	ldr	r3, [r3, #8]
	return _is_preempt(_current) && __must_switch_threads();
    f21e:	2000      	movs	r0, #0
    f220:	895b      	ldrh	r3, [r3, #10]
    f222:	2b7f      	cmp	r3, #127	; 0x7f
    f224:	d803      	bhi.n	f22e <_must_switch_threads+0x16>
    f226:	f000 f9d3 	bl	f5d0 <__must_switch_threads>
    f22a:	1e43      	subs	r3, r0, #1
    f22c:	4198      	sbcs	r0, r3
}
    f22e:	bd10      	pop	{r4, pc}
    f230:	20001a10 	.word	0x20001a10

0000f234 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    f234:	4b14      	ldr	r3, [pc, #80]	; (f288 <_unpend_first_thread+0x54>)
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    f236:	0001      	movs	r1, r0
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    f238:	681b      	ldr	r3, [r3, #0]
    f23a:	6802      	ldr	r2, [r0, #0]
    f23c:	2b00      	cmp	r3, #0
    f23e:	d00f      	beq.n	f260 <_unpend_first_thread+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f240:	0013      	movs	r3, r2
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f242:	2000      	movs	r0, #0
    f244:	4291      	cmp	r1, r2
    f246:	d01d      	beq.n	f284 <_unpend_first_thread+0x50>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    f248:	2b00      	cmp	r3, #0
    f24a:	d007      	beq.n	f25c <_unpend_first_thread+0x28>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    f24c:	6a1a      	ldr	r2, [r3, #32]
    f24e:	3202      	adds	r2, #2
    f250:	d10c      	bne.n	f26c <_unpend_first_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    f252:	684a      	ldr	r2, [r1, #4]
    f254:	429a      	cmp	r2, r3
    f256:	d014      	beq.n	f282 <_unpend_first_thread+0x4e>
    f258:	681b      	ldr	r3, [r3, #0]
    f25a:	e7f5      	b.n	f248 <_unpend_first_thread+0x14>
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    f25c:	0018      	movs	r0, r3
    f25e:	e011      	b.n	f284 <_unpend_first_thread+0x50>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f260:	0018      	movs	r0, r3
    f262:	4291      	cmp	r1, r2
    f264:	d00e      	beq.n	f284 <_unpend_first_thread+0x50>
    f266:	1e10      	subs	r0, r2, #0
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    f268:	d101      	bne.n	f26e <_unpend_first_thread+0x3a>
    f26a:	e00b      	b.n	f284 <_unpend_first_thread+0x50>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    f26c:	0018      	movs	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f26e:	6843      	ldr	r3, [r0, #4]
    f270:	6802      	ldr	r2, [r0, #0]
    f272:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    f274:	6802      	ldr	r2, [r0, #0]
    f276:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    f278:	2202      	movs	r2, #2
    f27a:	7a43      	ldrb	r3, [r0, #9]
    f27c:	4393      	bics	r3, r2
    f27e:	7243      	strb	r3, [r0, #9]
    f280:	e000      	b.n	f284 <_unpend_first_thread+0x50>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    f282:	2000      	movs	r0, #0
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
    f284:	4770      	bx	lr
    f286:	46c0      	nop			; (mov r8, r8)
    f288:	20001c38 	.word	0x20001c38

0000f28c <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    f28c:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    f28e:	6900      	ldr	r0, [r0, #16]
    f290:	1c42      	adds	r2, r0, #1
    f292:	d010      	beq.n	f2b6 <_abort_timeout+0x2a>
    f294:	4a08      	ldr	r2, [pc, #32]	; (f2b8 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    f296:	6912      	ldr	r2, [r2, #16]
    f298:	4293      	cmp	r3, r2
    f29a:	d003      	beq.n	f2a4 <_abort_timeout+0x18>
    f29c:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    f29e:	6911      	ldr	r1, [r2, #16]
    f2a0:	1808      	adds	r0, r1, r0
    f2a2:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f2a4:	685a      	ldr	r2, [r3, #4]
    f2a6:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
    f2a8:	2000      	movs	r0, #0
    f2aa:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    f2ac:	6819      	ldr	r1, [r3, #0]
    f2ae:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    f2b0:	2201      	movs	r2, #1
    f2b2:	4252      	negs	r2, r2
    f2b4:	611a      	str	r2, [r3, #16]

	return 0;
}
    f2b6:	4770      	bx	lr
    f2b8:	20001a10 	.word	0x20001a10

0000f2bc <k_queue_init>:
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    f2bc:	2300      	movs	r3, #0
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    f2be:	6000      	str	r0, [r0, #0]
    f2c0:	6083      	str	r3, [r0, #8]
	list->tail = NULL;
    f2c2:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    f2c4:	6040      	str	r0, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);

	_INIT_OBJ_POLL_EVENT(queue);
    f2c6:	6103      	str	r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
    f2c8:	4770      	bx	lr

0000f2ca <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    f2ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f2cc:	0005      	movs	r5, r0
    f2ce:	000f      	movs	r7, r1
    f2d0:	0014      	movs	r4, r2
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f2d2:	f3ef 8310 	mrs	r3, PRIMASK
    f2d6:	b672      	cpsid	i
    f2d8:	9301      	str	r3, [sp, #4]
	struct k_thread *first_pending_thread;
	unsigned int key;

	key = irq_lock();

	first_pending_thread = _unpend_first_thread(&queue->wait_q);
    f2da:	f7ff ffab 	bl	f234 <_unpend_first_thread>
    f2de:	1e06      	subs	r6, r0, #0

	if (first_pending_thread) {
    f2e0:	d00f      	beq.n	f302 <k_queue_insert+0x38>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    f2e2:	3010      	adds	r0, #16
    f2e4:	f7ff ffd2 	bl	f28c <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
    f2e8:	0030      	movs	r0, r6
    f2ea:	f7ff ff72 	bl	f1d2 <_ready_thread>
    f2ee:	2300      	movs	r3, #0
_set_thread_return_value_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	_set_thread_return_value(thread, value);
	thread->base.swap_data = data;
    f2f0:	60f4      	str	r4, [r6, #12]
    f2f2:	65f3      	str	r3, [r6, #92]	; 0x5c
    f2f4:	f3ef 8305 	mrs	r3, IPSR
    f2f8:	2b0d      	cmp	r3, #13
    f2fa:	d822      	bhi.n	f342 <k_queue_insert+0x78>
    f2fc:	2b03      	cmp	r3, #3
    f2fe:	d125      	bne.n	f34c <k_queue_insert+0x82>
    f300:	e01f      	b.n	f342 <k_queue_insert+0x78>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
    f302:	2f00      	cmp	r7, #0
    f304:	d106      	bne.n	f314 <k_queue_insert+0x4a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    f306:	68ab      	ldr	r3, [r5, #8]
    f308:	6023      	str	r3, [r4, #0]
	list->head = node;

	if (!list->tail) {
    f30a:	68eb      	ldr	r3, [r5, #12]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    f30c:	60ac      	str	r4, [r5, #8]

	if (!list->tail) {
    f30e:	2b00      	cmp	r3, #0
    f310:	d10e      	bne.n	f330 <k_queue_insert+0x66>
    f312:	e00a      	b.n	f32a <k_queue_insert+0x60>
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
    f314:	683b      	ldr	r3, [r7, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    f316:	6023      	str	r3, [r4, #0]
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
    f318:	2b00      	cmp	r3, #0
    f31a:	d108      	bne.n	f32e <k_queue_insert+0x64>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
    f31c:	68eb      	ldr	r3, [r5, #12]
    f31e:	2b00      	cmp	r3, #0
    f320:	d102      	bne.n	f328 <k_queue_insert+0x5e>
		list->tail = node;
    f322:	60ec      	str	r4, [r5, #12]
		list->head = node;
    f324:	60ac      	str	r4, [r5, #8]
    f326:	e003      	b.n	f330 <k_queue_insert+0x66>
	} else {
		list->tail->next = node;
    f328:	601c      	str	r4, [r3, #0]
		list->tail = node;
    f32a:	60ec      	str	r4, [r5, #12]
    f32c:	e000      	b.n	f330 <k_queue_insert+0x66>
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
		sys_slist_append(list, node);
	} else {
		node->next = prev->next;
		prev->next = node;
    f32e:	603c      	str	r4, [r7, #0]
			(void)_Swap(key);
			return;
		}
	} else {
		sys_slist_insert(&queue->data_q, prev, data);
		if (handle_poll_event(queue)) {
    f330:	0028      	movs	r0, r5
    f332:	f7ff ff5d 	bl	f1f0 <handle_poll_event>
    f336:	2800      	cmp	r0, #0
    f338:	d003      	beq.n	f342 <k_queue_insert+0x78>
			(void)_Swap(key);
    f33a:	9801      	ldr	r0, [sp, #4]
    f33c:	f7ff ff63 	bl	f206 <_Swap>
			return;
    f340:	e007      	b.n	f352 <k_queue_insert+0x88>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f342:	9b01      	ldr	r3, [sp, #4]
    f344:	2b00      	cmp	r3, #0
    f346:	d104      	bne.n	f352 <k_queue_insert+0x88>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f348:	b662      	cpsie	i
    f34a:	e002      	b.n	f352 <k_queue_insert+0x88>

	first_pending_thread = _unpend_first_thread(&queue->wait_q);

	if (first_pending_thread) {
		prepare_thread_to_run(first_pending_thread, data);
		if (!_is_in_isr() && _must_switch_threads()) {
    f34c:	f7ff ff64 	bl	f218 <_must_switch_threads>
    f350:	e7f1      	b.n	f336 <k_queue_insert+0x6c>
			return;
		}
	}

	irq_unlock(key);
}
    f352:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000f354 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
    f354:	b510      	push	{r4, lr}
    f356:	000a      	movs	r2, r1
	return k_queue_insert(queue, queue->data_q.tail, data);
    f358:	68c1      	ldr	r1, [r0, #12]
    f35a:	f7ff ffb6 	bl	f2ca <k_queue_insert>
}
    f35e:	bd10      	pop	{r4, pc}

0000f360 <k_queue_prepend>:

void k_queue_prepend(struct k_queue *queue, void *data)
{
    f360:	b510      	push	{r4, lr}
    f362:	000a      	movs	r2, r1
	return k_queue_insert(queue, NULL, data);
    f364:	2100      	movs	r1, #0
    f366:	f7ff ffb0 	bl	f2ca <k_queue_insert>
}
    f36a:	bd10      	pop	{r4, pc}

0000f36c <k_queue_append_list>:

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    f36c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f36e:	0004      	movs	r4, r0
    f370:	000d      	movs	r5, r1
    f372:	9201      	str	r2, [sp, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f374:	f3ef 8710 	mrs	r7, PRIMASK
    f378:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f37a:	6803      	ldr	r3, [r0, #0]
    f37c:	9300      	str	r3, [sp, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f37e:	4298      	cmp	r0, r3
    f380:	d112      	bne.n	f3a8 <k_queue_append_list+0x3c>
    f382:	2300      	movs	r3, #0
    f384:	9300      	str	r3, [sp, #0]
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
    f386:	e00f      	b.n	f3a8 <k_queue_append_list+0x3c>
    f388:	0020      	movs	r0, r4
    f38a:	f7ff ff53 	bl	f234 <_unpend_first_thread>
    f38e:	1e06      	subs	r6, r0, #0
    f390:	d00d      	beq.n	f3ae <k_queue_append_list+0x42>
    f392:	0030      	movs	r0, r6
    f394:	3010      	adds	r0, #16
    f396:	f7ff ff79 	bl	f28c <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
    f39a:	0030      	movs	r0, r6
    f39c:	f7ff ff19 	bl	f1d2 <_ready_thread>
    f3a0:	2300      	movs	r3, #0
    f3a2:	60f5      	str	r5, [r6, #12]
	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
    f3a4:	682d      	ldr	r5, [r5, #0]
    f3a6:	65f3      	str	r3, [r6, #92]	; 0x5c
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
    f3a8:	2d00      	cmp	r5, #0
    f3aa:	d1ed      	bne.n	f388 <k_queue_append_list+0x1c>
    f3ac:	e005      	b.n	f3ba <k_queue_append_list+0x4e>
 * @param tail A pointer to the last element of the list to append
 */
static inline void sys_slist_append_list(sys_slist_t *list,
					 void *head, void *tail)
{
	if (!list->tail) {
    f3ae:	68e3      	ldr	r3, [r4, #12]
    f3b0:	2b00      	cmp	r3, #0
    f3b2:	d119      	bne.n	f3e8 <k_queue_append_list+0x7c>
		list->head = (sys_snode_t *)head;
    f3b4:	60a5      	str	r5, [r4, #8]
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
    f3b6:	9b01      	ldr	r3, [sp, #4]
    f3b8:	60e3      	str	r3, [r4, #12]

	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
    f3ba:	9b00      	ldr	r3, [sp, #0]
    f3bc:	2b00      	cmp	r3, #0
    f3be:	d006      	beq.n	f3ce <k_queue_append_list+0x62>
    f3c0:	f3ef 8305 	mrs	r3, IPSR
    f3c4:	2b0d      	cmp	r3, #13
    f3c6:	d80b      	bhi.n	f3e0 <k_queue_append_list+0x74>
    f3c8:	2b03      	cmp	r3, #3
    f3ca:	d10f      	bne.n	f3ec <k_queue_append_list+0x80>
    f3cc:	e008      	b.n	f3e0 <k_queue_append_list+0x74>
		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
			return;
		}
	} else {
		if (handle_poll_event(queue)) {
    f3ce:	0020      	movs	r0, r4
    f3d0:	f7ff ff0e 	bl	f1f0 <handle_poll_event>
    f3d4:	2800      	cmp	r0, #0
    f3d6:	d003      	beq.n	f3e0 <k_queue_append_list+0x74>
			(void)_Swap(key);
    f3d8:	0038      	movs	r0, r7
    f3da:	f7ff ff14 	bl	f206 <_Swap>
			return;
    f3de:	e008      	b.n	f3f2 <k_queue_append_list+0x86>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f3e0:	2f00      	cmp	r7, #0
    f3e2:	d106      	bne.n	f3f2 <k_queue_append_list+0x86>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f3e4:	b662      	cpsie	i
    f3e6:	e004      	b.n	f3f2 <k_queue_append_list+0x86>
{
	if (!list->tail) {
		list->head = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
    f3e8:	601d      	str	r5, [r3, #0]
    f3ea:	e7e4      	b.n	f3b6 <k_queue_append_list+0x4a>
	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
		if (!_is_in_isr() && _must_switch_threads()) {
    f3ec:	f7ff ff14 	bl	f218 <_must_switch_threads>
    f3f0:	e7f0      	b.n	f3d4 <k_queue_append_list+0x68>
			return;
		}
	}

	irq_unlock(key);
}
    f3f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000f3f4 <k_queue_get>:
	k_queue_append_list(queue, list->head, list->tail);
	sys_slist_init(list);
}

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    f3f4:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f3f6:	f3ef 8410 	mrs	r4, PRIMASK
    f3fa:	b672      	cpsid	i
    f3fc:	6883      	ldr	r3, [r0, #8]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    f3fe:	2b00      	cmp	r3, #0
    f400:	d00a      	beq.n	f418 <k_queue_get+0x24>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    f402:	681a      	ldr	r2, [r3, #0]
	if (list->tail == node) {
    f404:	68c1      	ldr	r1, [r0, #12]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    f406:	6082      	str	r2, [r0, #8]
	if (list->tail == node) {
    f408:	428b      	cmp	r3, r1
    f40a:	d100      	bne.n	f40e <k_queue_get+0x1a>
		list->tail = list->head;
    f40c:	60c2      	str	r2, [r0, #12]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f40e:	0018      	movs	r0, r3
    f410:	2c00      	cmp	r4, #0
    f412:	d114      	bne.n	f43e <k_queue_get+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f414:	b662      	cpsie	i
    f416:	e012      	b.n	f43e <k_queue_get+0x4a>
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
    f418:	2900      	cmp	r1, #0
    f41a:	d106      	bne.n	f42a <k_queue_get+0x36>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f41c:	2c00      	cmp	r4, #0
    f41e:	d001      	beq.n	f424 <k_queue_get+0x30>
		irq_unlock(key);
		return NULL;
    f420:	2000      	movs	r0, #0
    f422:	e00c      	b.n	f43e <k_queue_get+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f424:	b662      	cpsie	i
    f426:	0020      	movs	r0, r4
    f428:	e009      	b.n	f43e <k_queue_get+0x4a>
	}

	_pend_current_thread(&queue->wait_q, timeout);
    f42a:	f000 f8c1 	bl	f5b0 <_pend_current_thread>

	return _Swap(key) ? NULL : _current->base.swap_data;
    f42e:	0020      	movs	r0, r4
    f430:	f7ff fee9 	bl	f206 <_Swap>
    f434:	2800      	cmp	r0, #0
    f436:	d1f3      	bne.n	f420 <k_queue_get+0x2c>
    f438:	4b01      	ldr	r3, [pc, #4]	; (f440 <k_queue_get+0x4c>)
    f43a:	689b      	ldr	r3, [r3, #8]
    f43c:	68d8      	ldr	r0, [r3, #12]
}
    f43e:	bd10      	pop	{r4, pc}
    f440:	20001a10 	.word	0x20001a10

0000f444 <_add_timeout>:
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
    f444:	60ca      	str	r2, [r1, #12]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f446:	4a15      	ldr	r2, [pc, #84]	; (f49c <_add_timeout+0x58>)
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
    f448:	6088      	str	r0, [r1, #8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f44a:	0010      	movs	r0, r2

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
    f44c:	b530      	push	{r4, r5, lr}
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
    f44e:	610b      	str	r3, [r1, #16]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f450:	68d3      	ldr	r3, [r2, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f452:	300c      	adds	r0, #12
    f454:	4283      	cmp	r3, r0
    f456:	d108      	bne.n	f46a <_add_timeout+0x26>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    f458:	0013      	movs	r3, r2
    f45a:	330c      	adds	r3, #12
    f45c:	600b      	str	r3, [r1, #0]
	node->prev = list->tail;
    f45e:	6913      	ldr	r3, [r2, #16]
    f460:	604b      	str	r3, [r1, #4]

	list->tail->next = node;
    f462:	6913      	ldr	r3, [r2, #16]
    f464:	6019      	str	r1, [r3, #0]
	list->tail = node;
    f466:	6111      	str	r1, [r2, #16]
    f468:	e017      	b.n	f49a <_add_timeout+0x56>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    f46a:	2b00      	cmp	r3, #0
    f46c:	d0f4      	beq.n	f458 <_add_timeout+0x14>
    f46e:	6915      	ldr	r5, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
    f470:	6908      	ldr	r0, [r1, #16]
    f472:	691c      	ldr	r4, [r3, #16]
    f474:	42a0      	cmp	r0, r4
    f476:	dc08      	bgt.n	f48a <_add_timeout+0x46>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    f478:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    f47a:	1a20      	subs	r0, r4, r0
    f47c:	6118      	str	r0, [r3, #16]
    f47e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    f480:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    f482:	685a      	ldr	r2, [r3, #4]
    f484:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    f486:	6059      	str	r1, [r3, #4]
    f488:	e007      	b.n	f49a <_add_timeout+0x56>
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
    f48a:	1b00      	subs	r0, r0, r4
    f48c:	6108      	str	r0, [r1, #16]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    f48e:	42ab      	cmp	r3, r5
    f490:	d0e2      	beq.n	f458 <_add_timeout+0x14>
    f492:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    f494:	2b00      	cmp	r3, #0
    f496:	d1eb      	bne.n	f470 <_add_timeout+0x2c>
    f498:	e7de      	b.n	f458 <_add_timeout+0x14>
#ifdef CONFIG_TICKLESS_KERNEL
	if (!program_time || (adjusted_timeout < program_time)) {
		_set_time(adjusted_timeout);
	}
#endif
}
    f49a:	bd30      	pop	{r4, r5, pc}
    f49c:	20001a10 	.word	0x20001a10

0000f4a0 <_add_thread_to_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
    f4a0:	230a      	movs	r3, #10
    f4a2:	56c3      	ldrsb	r3, [r0, r3]
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    f4a4:	b530      	push	{r4, r5, lr}
    f4a6:	001d      	movs	r5, r3
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
    f4a8:	241f      	movs	r4, #31
    f4aa:	3510      	adds	r5, #16
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
    f4ac:	116a      	asrs	r2, r5, #5
    f4ae:	4025      	ands	r5, r4
    f4b0:	3c1e      	subs	r4, #30
    f4b2:	40ac      	lsls	r4, r5
    f4b4:	490d      	ldr	r1, [pc, #52]	; (f4ec <_add_thread_to_ready_q+0x4c>)
    f4b6:	3206      	adds	r2, #6
    f4b8:	0092      	lsls	r2, r2, #2
    f4ba:	188a      	adds	r2, r1, r2
    f4bc:	6855      	ldr	r5, [r2, #4]

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
    f4be:	3314      	adds	r3, #20
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
    f4c0:	432c      	orrs	r4, r5
    f4c2:	6054      	str	r4, [r2, #4]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    f4c4:	250a      	movs	r5, #10
    f4c6:	240a      	movs	r4, #10

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
    f4c8:	00db      	lsls	r3, r3, #3
    f4ca:	18cb      	adds	r3, r1, r3
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    f4cc:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
    f4ce:	685a      	ldr	r2, [r3, #4]
    f4d0:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
    f4d2:	685a      	ldr	r2, [r3, #4]
    f4d4:	6010      	str	r0, [r2, #0]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    f4d6:	698a      	ldr	r2, [r1, #24]
	list->tail = node;
    f4d8:	6058      	str	r0, [r3, #4]
    f4da:	5745      	ldrsb	r5, [r0, r5]
    f4dc:	5714      	ldrsb	r4, [r2, r4]
    f4de:	000b      	movs	r3, r1
    f4e0:	42a5      	cmp	r5, r4
    f4e2:	da00      	bge.n	f4e6 <_add_thread_to_ready_q+0x46>
    f4e4:	0002      	movs	r2, r0
    f4e6:	619a      	str	r2, [r3, #24]
#else
	sys_dlist_append(&_ready_q.q[0], &thread->base.k_q_node);
	_ready_q.prio_bmap[0] = 1;
	_ready_q.cache = thread;
#endif
}
    f4e8:	bd30      	pop	{r4, r5, pc}
    f4ea:	46c0      	nop			; (mov r8, r8)
    f4ec:	20001a10 	.word	0x20001a10

0000f4f0 <_remove_thread_from_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
    f4f0:	230a      	movs	r3, #10
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    f4f2:	b510      	push	{r4, lr}
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f4f4:	6842      	ldr	r2, [r0, #4]
    f4f6:	6801      	ldr	r1, [r0, #0]
    f4f8:	56c3      	ldrsb	r3, [r0, r3]
    f4fa:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    f4fc:	6801      	ldr	r1, [r0, #0]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
    f4fe:	4c11      	ldr	r4, [pc, #68]	; (f544 <_remove_thread_from_ready_q+0x54>)
    f500:	3314      	adds	r3, #20
    f502:	604a      	str	r2, [r1, #4]
    f504:	00db      	lsls	r3, r3, #3
    f506:	18e2      	adds	r2, r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    f508:	591b      	ldr	r3, [r3, r4]
    f50a:	4293      	cmp	r3, r2
    f50c:	d10e      	bne.n	f52c <_remove_thread_from_ready_q+0x3c>
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
    f50e:	220a      	movs	r2, #10
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
    f510:	211f      	movs	r1, #31
    f512:	5682      	ldrsb	r2, [r0, r2]
    f514:	3210      	adds	r2, #16
    f516:	1153      	asrs	r3, r2, #5
    f518:	400a      	ands	r2, r1
    f51a:	391e      	subs	r1, #30
    f51c:	4091      	lsls	r1, r2
    f51e:	000a      	movs	r2, r1
    f520:	3306      	adds	r3, #6
    f522:	009b      	lsls	r3, r3, #2
    f524:	18e3      	adds	r3, r4, r3
    f526:	6859      	ldr	r1, [r3, #4]
    f528:	4391      	bics	r1, r2
    f52a:	6059      	str	r1, [r3, #4]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    f52c:	69a3      	ldr	r3, [r4, #24]
    f52e:	4298      	cmp	r0, r3
    f530:	d105      	bne.n	f53e <_remove_thread_from_ready_q+0x4e>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    f532:	69e0      	ldr	r0, [r4, #28]
    f534:	f7f1 f80c 	bl	550 <__ffssi2>
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
    f538:	3003      	adds	r0, #3
    f53a:	00c0      	lsls	r0, r0, #3
    f53c:	5823      	ldr	r3, [r4, r0]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    f53e:	61a3      	str	r3, [r4, #24]
#else
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
    f540:	bd10      	pop	{r4, pc}
    f542:	46c0      	nop			; (mov r8, r8)
    f544:	20001a10 	.word	0x20001a10

0000f548 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    f548:	b570      	push	{r4, r5, r6, lr}
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f54a:	680b      	ldr	r3, [r1, #0]
    f54c:	0004      	movs	r4, r0
    f54e:	000d      	movs	r5, r1
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f550:	4299      	cmp	r1, r3
    f552:	d013      	beq.n	f57c <_pend_thread+0x34>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(wait_q_list, node) {
    f554:	2b00      	cmp	r3, #0
    f556:	d011      	beq.n	f57c <_pend_thread+0x34>
		struct k_thread *pending = (struct k_thread *)node;

		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    f558:	200a      	movs	r0, #10
    f55a:	210a      	movs	r1, #10
    f55c:	5620      	ldrsb	r0, [r4, r0]
    f55e:	5659      	ldrsb	r1, [r3, r1]
    f560:	4288      	cmp	r0, r1
    f562:	da06      	bge.n	f572 <_pend_thread+0x2a>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    f564:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
    f566:	6023      	str	r3, [r4, #0]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    f568:	6061      	str	r1, [r4, #4]
		node->next = insert_point;
		insert_point->prev->next = node;
    f56a:	6859      	ldr	r1, [r3, #4]
    f56c:	600c      	str	r4, [r1, #0]
		insert_point->prev = node;
    f56e:	605c      	str	r4, [r3, #4]
    f570:	e00a      	b.n	f588 <_pend_thread+0x40>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    f572:	6869      	ldr	r1, [r5, #4]
    f574:	428b      	cmp	r3, r1
    f576:	d001      	beq.n	f57c <_pend_thread+0x34>
    f578:	681b      	ldr	r3, [r3, #0]
    f57a:	e7eb      	b.n	f554 <_pend_thread+0xc>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    f57c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    f57e:	686b      	ldr	r3, [r5, #4]
    f580:	6063      	str	r3, [r4, #4]

	list->tail->next = node;
    f582:	686b      	ldr	r3, [r5, #4]
    f584:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f586:	606c      	str	r4, [r5, #4]
}

/* mark a thread as pending in its TCS */
static inline void _mark_thread_as_pending(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_PENDING;
    f588:	2102      	movs	r1, #2
    f58a:	7a63      	ldrb	r3, [r4, #9]
    f58c:	430b      	orrs	r3, r1
    f58e:	7263      	strb	r3, [r4, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    f590:	1c53      	adds	r3, r2, #1
    f592:	d00b      	beq.n	f5ac <_pend_thread+0x64>

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       s32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    f594:	3209      	adds	r2, #9
    f596:	0010      	movs	r0, r2
    f598:	3108      	adds	r1, #8
    f59a:	f7f0 fe17 	bl	1cc <__aeabi_uidiv>
    f59e:	0021      	movs	r1, r4
    f5a0:	1c43      	adds	r3, r0, #1
    f5a2:	3110      	adds	r1, #16
    f5a4:	002a      	movs	r2, r5
    f5a6:	0020      	movs	r0, r4
    f5a8:	f7ff ff4c 	bl	f444 <_add_timeout>
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    f5ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f5b0 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    f5b0:	b570      	push	{r4, r5, r6, lr}
    f5b2:	000e      	movs	r6, r1
    f5b4:	0005      	movs	r5, r0
	_remove_thread_from_ready_q(_current);
    f5b6:	4c05      	ldr	r4, [pc, #20]	; (f5cc <_pend_current_thread+0x1c>)
    f5b8:	68a0      	ldr	r0, [r4, #8]
    f5ba:	f7ff ff99 	bl	f4f0 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    f5be:	0032      	movs	r2, r6
    f5c0:	0029      	movs	r1, r5
    f5c2:	68a0      	ldr	r0, [r4, #8]
    f5c4:	f7ff ffc0 	bl	f548 <_pend_thread>
}
    f5c8:	bd70      	pop	{r4, r5, r6, pc}
    f5ca:	46c0      	nop			; (mov r8, r8)
    f5cc:	20001a10 	.word	0x20001a10

0000f5d0 <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
    f5d0:	b510      	push	{r4, lr}
{
	int bitmap = 0;
	u32_t ready_range;

#if (K_NUM_PRIORITIES <= 32)
	ready_range = _ready_q.prio_bmap[0];
    f5d2:	4c07      	ldr	r4, [pc, #28]	; (f5f0 <__must_switch_threads+0x20>)
    f5d4:	69e0      	ldr	r0, [r4, #28]
    f5d6:	f7f0 ffbb 	bl	550 <__ffssi2>

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    f5da:	220a      	movs	r2, #10
    f5dc:	68a3      	ldr	r3, [r4, #8]
    f5de:	569a      	ldrsb	r2, [r3, r2]
    f5e0:	0003      	movs	r3, r0
    f5e2:	3b11      	subs	r3, #17
    f5e4:	2001      	movs	r0, #1
    f5e6:	429a      	cmp	r2, r3
    f5e8:	dc00      	bgt.n	f5ec <__must_switch_threads+0x1c>
    f5ea:	2000      	movs	r0, #0
#else
	return 0;
#endif
}
    f5ec:	bd10      	pop	{r4, pc}
    f5ee:	46c0      	nop			; (mov r8, r8)
    f5f0:	20001a10 	.word	0x20001a10

0000f5f4 <_reschedule_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    f5f4:	4b0a      	ldr	r3, [pc, #40]	; (f620 <_reschedule_threads+0x2c>)

/* reschedule threads if the scheduler is not locked */
/* not callable from ISR */
/* must be called with interrupts locked */
void _reschedule_threads(int key)
{
    f5f6:	b510      	push	{r4, lr}
    f5f8:	689b      	ldr	r3, [r3, #8]
    f5fa:	0004      	movs	r4, r0
    f5fc:	895b      	ldrh	r3, [r3, #10]
    f5fe:	2b7f      	cmp	r3, #127	; 0x7f
    f600:	d803      	bhi.n	f60a <_reschedule_threads+0x16>
    f602:	f7ff ffe5 	bl	f5d0 <__must_switch_threads>
    f606:	2800      	cmp	r0, #0
    f608:	d103      	bne.n	f612 <_reschedule_threads+0x1e>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f60a:	2c00      	cmp	r4, #0
    f60c:	d107      	bne.n	f61e <_reschedule_threads+0x2a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f60e:	b662      	cpsie	i
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
    f610:	e005      	b.n	f61e <_reschedule_threads+0x2a>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    f612:	2200      	movs	r2, #0
    f614:	4b03      	ldr	r3, [pc, #12]	; (f624 <_reschedule_threads+0x30>)
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
#endif

	return __swap(key);
    f616:	0020      	movs	r0, r4
    f618:	601a      	str	r2, [r3, #0]
    f61a:	f7ff f87f 	bl	e71c <__swap>
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
    f61e:	bd10      	pop	{r4, pc}
    f620:	20001a10 	.word	0x20001a10
    f624:	20001c3c 	.word	0x20001c3c

0000f628 <k_sched_unlock>:
		_current, _current->base.sched_locked);
#endif
}

void k_sched_unlock(void)
{
    f628:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f62a:	f3ef 8010 	mrs	r0, PRIMASK
    f62e:	b672      	cpsid	i

	int key = irq_lock();

	/* compiler_barrier() not needed, comes from irq_lock() */

	++_current->base.sched_locked;
    f630:	4b03      	ldr	r3, [pc, #12]	; (f640 <k_sched_unlock+0x18>)
    f632:	689a      	ldr	r2, [r3, #8]
    f634:	7ad3      	ldrb	r3, [r2, #11]
    f636:	3301      	adds	r3, #1
    f638:	72d3      	strb	r3, [r2, #11]

	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule_threads(key);
    f63a:	f7ff ffdb 	bl	f5f4 <_reschedule_threads>
#endif
}
    f63e:	bd10      	pop	{r4, pc}
    f640:	20001a10 	.word	0x20001a10

0000f644 <_move_thread_to_end_of_prio_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
    f644:	230a      	movs	r3, #10
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
    f646:	b510      	push	{r4, lr}
    f648:	56c3      	ldrsb	r3, [r0, r3]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
    f64a:	4c0e      	ldr	r4, [pc, #56]	; (f684 <_move_thread_to_end_of_prio_q+0x40>)
    f64c:	3314      	adds	r3, #20
    f64e:	00db      	lsls	r3, r3, #3
    f650:	18e3      	adds	r3, r4, r3

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    f652:	685a      	ldr	r2, [r3, #4]
    f654:	4290      	cmp	r0, r2
    f656:	d014      	beq.n	f682 <_move_thread_to_end_of_prio_q+0x3e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f658:	6842      	ldr	r2, [r0, #4]
    f65a:	6801      	ldr	r1, [r0, #0]
    f65c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    f65e:	6801      	ldr	r1, [r0, #0]
    f660:	604a      	str	r2, [r1, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    f662:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
    f664:	685a      	ldr	r2, [r3, #4]
    f666:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
    f668:	685a      	ldr	r2, [r3, #4]
    f66a:	6010      	str	r0, [r2, #0]
	list->tail = node;
    f66c:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    f66e:	69a3      	ldr	r3, [r4, #24]
    f670:	4298      	cmp	r0, r3
    f672:	d105      	bne.n	f680 <_move_thread_to_end_of_prio_q+0x3c>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    f674:	69e0      	ldr	r0, [r4, #28]
    f676:	f7f0 ff6b 	bl	550 <__ffssi2>
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
    f67a:	3003      	adds	r0, #3
    f67c:	00c0      	lsls	r0, r0, #3
    f67e:	5823      	ldr	r3, [r4, r0]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    f680:	61a3      	str	r3, [r4, #24]
#endif
}
    f682:	bd10      	pop	{r4, pc}
    f684:	20001a10 	.word	0x20001a10

0000f688 <k_yield>:

void k_yield(void)
{
    f688:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f68a:	f3ef 8510 	mrs	r5, PRIMASK
    f68e:	b672      	cpsid	i
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	_move_thread_to_end_of_prio_q(_current);
    f690:	4c09      	ldr	r4, [pc, #36]	; (f6b8 <k_yield+0x30>)
    f692:	68a0      	ldr	r0, [r4, #8]
    f694:	f7ff ffd6 	bl	f644 <_move_thread_to_end_of_prio_q>

	if (_current == _get_next_ready_thread()) {
    f698:	68a2      	ldr	r2, [r4, #8]
    f69a:	69a3      	ldr	r3, [r4, #24]
    f69c:	429a      	cmp	r2, r3
    f69e:	d103      	bne.n	f6a8 <k_yield+0x20>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f6a0:	2d00      	cmp	r5, #0
    f6a2:	d107      	bne.n	f6b4 <k_yield+0x2c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f6a4:	b662      	cpsie	i
    f6a6:	e005      	b.n	f6b4 <k_yield+0x2c>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    f6a8:	2200      	movs	r2, #0
    f6aa:	4b04      	ldr	r3, [pc, #16]	; (f6bc <k_yield+0x34>)
    f6ac:	0028      	movs	r0, r5
    f6ae:	601a      	str	r2, [r3, #0]
    f6b0:	f7ff f834 	bl	e71c <__swap>
		_check_stack_sentinel();
#endif
	} else {
		_Swap(key);
	}
}
    f6b4:	bd70      	pop	{r4, r5, r6, pc}
    f6b6:	46c0      	nop			; (mov r8, r8)
    f6b8:	20001a10 	.word	0x20001a10
    f6bc:	20001c3c 	.word	0x20001c3c

0000f6c0 <k_sleep>:

void k_sleep(s32_t duration)
{
    f6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
    f6c2:	2800      	cmp	r0, #0
    f6c4:	d102      	bne.n	f6cc <k_sleep+0xc>
		k_yield();
    f6c6:	f7ff ffdf 	bl	f688 <k_yield>
		return;
    f6ca:	e019      	b.n	f700 <k_sleep+0x40>
	}

	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    f6cc:	210a      	movs	r1, #10
    f6ce:	3009      	adds	r0, #9
    f6d0:	f7f0 fd7c 	bl	1cc <__aeabi_uidiv>
    f6d4:	3001      	adds	r0, #1
    f6d6:	9001      	str	r0, [sp, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f6d8:	f3ef 8510 	mrs	r5, PRIMASK
    f6dc:	b672      	cpsid	i
	key = irq_lock();

	_remove_thread_from_ready_q(_current);
    f6de:	4c09      	ldr	r4, [pc, #36]	; (f704 <k_sleep+0x44>)
    f6e0:	68a0      	ldr	r0, [r4, #8]
    f6e2:	f7ff ff05 	bl	f4f0 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    f6e6:	68a0      	ldr	r0, [r4, #8]
    f6e8:	9b01      	ldr	r3, [sp, #4]
    f6ea:	0001      	movs	r1, r0
    f6ec:	2200      	movs	r2, #0
    f6ee:	3110      	adds	r1, #16
    f6f0:	f7ff fea8 	bl	f444 <_add_timeout>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    f6f4:	2200      	movs	r2, #0
    f6f6:	4b04      	ldr	r3, [pc, #16]	; (f708 <k_sleep+0x48>)
    f6f8:	0028      	movs	r0, r5
    f6fa:	601a      	str	r2, [r3, #0]
    f6fc:	f7ff f80e 	bl	e71c <__swap>
	_remove_thread_from_ready_q(_current);
	_add_thread_timeout(_current, NULL, ticks);

	_Swap(key);
#endif
}
    f700:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f702:	46c0      	nop			; (mov r8, r8)
    f704:	20001a10 	.word	0x20001a10
    f708:	20001c3c 	.word	0x20001c3c

0000f70c <k_current_get>:
	}
}

k_tid_t k_current_get(void)
{
	return _current;
    f70c:	4b01      	ldr	r3, [pc, #4]	; (f714 <k_current_get+0x8>)
    f70e:	6898      	ldr	r0, [r3, #8]
}
    f710:	4770      	bx	lr
    f712:	46c0      	nop			; (mov r8, r8)
    f714:	20001a10 	.word	0x20001a10

0000f718 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    f718:	4b10      	ldr	r3, [pc, #64]	; (f75c <_is_thread_time_slicing+0x44>)
	_time_slice_elapsed = 0;
	_time_slice_prio_ceiling = prio;
}

int _is_thread_time_slicing(struct k_thread *thread)
{
    f71a:	b082      	sub	sp, #8
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    f71c:	681a      	ldr	r2, [r3, #0]
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
    f71e:	2300      	movs	r3, #0
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    f720:	429a      	cmp	r2, r3
    f722:	dd17      	ble.n	f754 <_is_thread_time_slicing+0x3c>
	return entry_point == idle;
}

static inline int _is_idle_thread_ptr(k_tid_t thread)
{
	return thread == _idle_thread;
    f724:	4b0e      	ldr	r3, [pc, #56]	; (f760 <_is_thread_time_slicing+0x48>)
    f726:	681b      	ldr	r3, [r3, #0]
    f728:	9301      	str	r3, [sp, #4]
    f72a:	9a01      	ldr	r2, [sp, #4]
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
    f72c:	2300      	movs	r3, #0
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    f72e:	4290      	cmp	r0, r2
    f730:	d010      	beq.n	f754 <_is_thread_time_slicing+0x3c>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    f732:	220a      	movs	r2, #10
    f734:	4b0b      	ldr	r3, [pc, #44]	; (f764 <_is_thread_time_slicing+0x4c>)
    f736:	5682      	ldrsb	r2, [r0, r2]
    f738:	6819      	ldr	r1, [r3, #0]
		return 0;
    f73a:	2300      	movs	r3, #0
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    f73c:	428a      	cmp	r2, r1
    f73e:	db09      	blt.n	f754 <_is_thread_time_slicing+0x3c>
 * @return 1 if multiple nodes, 0 otherwise
 */

static inline int sys_dlist_has_multiple_nodes(sys_dlist_t *list)
{
	return list->head != list->tail;
    f740:	0013      	movs	r3, r2
    f742:	4909      	ldr	r1, [pc, #36]	; (f768 <_is_thread_time_slicing+0x50>)
    f744:	3314      	adds	r3, #20
    f746:	00db      	lsls	r3, r3, #3
    f748:	18ca      	adds	r2, r1, r3
    f74a:	6850      	ldr	r0, [r2, #4]
    f74c:	585b      	ldr	r3, [r3, r1]
    f74e:	1a1b      	subs	r3, r3, r0
    f750:	1e58      	subs	r0, r3, #1
    f752:	4183      	sbcs	r3, r0

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
}
    f754:	0018      	movs	r0, r3
    f756:	b002      	add	sp, #8
    f758:	4770      	bx	lr
    f75a:	46c0      	nop			; (mov r8, r8)
    f75c:	20001b34 	.word	0x20001b34
    f760:	0001054c 	.word	0x0001054c
    f764:	20001b30 	.word	0x20001b30
    f768:	20001a10 	.word	0x20001a10

0000f76c <_update_time_slice_before_swap>:
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    f76c:	2200      	movs	r2, #0
    f76e:	4b01      	ldr	r3, [pc, #4]	; (f774 <_update_time_slice_before_swap+0x8>)
    f770:	601a      	str	r2, [r3, #0]
}
    f772:	4770      	bx	lr
    f774:	20001c3c 	.word	0x20001c3c

0000f778 <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f778:	7a43      	ldrb	r3, [r0, #9]
    f77a:	2204      	movs	r2, #4
    f77c:	0019      	movs	r1, r3
    f77e:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    f780:	221b      	movs	r2, #27
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
    f782:	b510      	push	{r4, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f784:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    f786:	4213      	tst	r3, r2
    f788:	d104      	bne.n	f794 <_ready_thread+0x1c>
    f78a:	6a03      	ldr	r3, [r0, #32]
    f78c:	3301      	adds	r3, #1
    f78e:	d101      	bne.n	f794 <_ready_thread+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    f790:	f7ff fe86 	bl	f4a0 <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
    f794:	bd10      	pop	{r4, pc}
	...

0000f798 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    f798:	4b14      	ldr	r3, [pc, #80]	; (f7ec <_unpend_first_thread+0x54>)
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    f79a:	0001      	movs	r1, r0
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    f79c:	681b      	ldr	r3, [r3, #0]
    f79e:	6802      	ldr	r2, [r0, #0]
    f7a0:	2b00      	cmp	r3, #0
    f7a2:	d00f      	beq.n	f7c4 <_unpend_first_thread+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f7a4:	0013      	movs	r3, r2
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f7a6:	2000      	movs	r0, #0
    f7a8:	4291      	cmp	r1, r2
    f7aa:	d01d      	beq.n	f7e8 <_unpend_first_thread+0x50>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    f7ac:	2b00      	cmp	r3, #0
    f7ae:	d007      	beq.n	f7c0 <_unpend_first_thread+0x28>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    f7b0:	6a1a      	ldr	r2, [r3, #32]
    f7b2:	3202      	adds	r2, #2
    f7b4:	d10c      	bne.n	f7d0 <_unpend_first_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    f7b6:	684a      	ldr	r2, [r1, #4]
    f7b8:	429a      	cmp	r2, r3
    f7ba:	d014      	beq.n	f7e6 <_unpend_first_thread+0x4e>
    f7bc:	681b      	ldr	r3, [r3, #0]
    f7be:	e7f5      	b.n	f7ac <_unpend_first_thread+0x14>
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    f7c0:	0018      	movs	r0, r3
    f7c2:	e011      	b.n	f7e8 <_unpend_first_thread+0x50>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f7c4:	0018      	movs	r0, r3
    f7c6:	4291      	cmp	r1, r2
    f7c8:	d00e      	beq.n	f7e8 <_unpend_first_thread+0x50>
    f7ca:	1e10      	subs	r0, r2, #0
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    f7cc:	d101      	bne.n	f7d2 <_unpend_first_thread+0x3a>
    f7ce:	e00b      	b.n	f7e8 <_unpend_first_thread+0x50>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    f7d0:	0018      	movs	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f7d2:	6843      	ldr	r3, [r0, #4]
    f7d4:	6802      	ldr	r2, [r0, #0]
    f7d6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    f7d8:	6802      	ldr	r2, [r0, #0]
    f7da:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    f7dc:	2202      	movs	r2, #2
    f7de:	7a43      	ldrb	r3, [r0, #9]
    f7e0:	4393      	bics	r3, r2
    f7e2:	7243      	strb	r3, [r0, #9]
    f7e4:	e000      	b.n	f7e8 <_unpend_first_thread+0x50>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    f7e6:	2000      	movs	r0, #0
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
    f7e8:	4770      	bx	lr
    f7ea:	46c0      	nop			; (mov r8, r8)
    f7ec:	20001c38 	.word	0x20001c38

0000f7f0 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    f7f0:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    f7f2:	6900      	ldr	r0, [r0, #16]
    f7f4:	1c42      	adds	r2, r0, #1
    f7f6:	d010      	beq.n	f81a <_abort_timeout+0x2a>
    f7f8:	4a08      	ldr	r2, [pc, #32]	; (f81c <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    f7fa:	6912      	ldr	r2, [r2, #16]
    f7fc:	4293      	cmp	r3, r2
    f7fe:	d003      	beq.n	f808 <_abort_timeout+0x18>
    f800:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    f802:	6911      	ldr	r1, [r2, #16]
    f804:	1808      	adds	r0, r1, r0
    f806:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f808:	685a      	ldr	r2, [r3, #4]
    f80a:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
    f80c:	2000      	movs	r0, #0
    f80e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    f810:	6819      	ldr	r1, [r3, #0]
    f812:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    f814:	2201      	movs	r2, #1
    f816:	4252      	negs	r2, r2
    f818:	611a      	str	r2, [r3, #16]

	return 0;
}
    f81a:	4770      	bx	lr
    f81c:	20001a10 	.word	0x20001a10

0000f820 <k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
    f820:	2300      	movs	r3, #0
void k_sem_init(struct k_sem *sem, unsigned int initial_count,
		unsigned int limit)
{
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
    f822:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    f824:	60c2      	str	r2, [r0, #12]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    f826:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    f828:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
    f82a:	6103      	str	r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);
}
    f82c:	4770      	bx	lr
	...

0000f830 <k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void k_sem_give(struct k_sem *sem)
{
    f830:	b570      	push	{r4, r5, r6, lr}
    f832:	0004      	movs	r4, r0
    f834:	f3ef 8510 	mrs	r5, PRIMASK
    f838:	b672      	cpsid	i
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    f83a:	f7ff ffad 	bl	f798 <_unpend_first_thread>
    f83e:	1e06      	subs	r6, r0, #0

	if (!thread) {
    f840:	d116      	bne.n	f870 <k_sem_give+0x40>
#endif
}

static inline void increment_count_up_to_limit(struct k_sem *sem)
{
	sem->count += (sem->count != sem->limit);
    f842:	68a2      	ldr	r2, [r4, #8]
    f844:	68e3      	ldr	r3, [r4, #12]
    f846:	1a9b      	subs	r3, r3, r2
    f848:	1e59      	subs	r1, r3, #1
    f84a:	418b      	sbcs	r3, r1
    f84c:	189b      	adds	r3, r3, r2
    f84e:	60a3      	str	r3, [r4, #8]
{
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_SEM_AVAILABLE;

	return sem->poll_event ?
	       _handle_obj_poll_event(&sem->poll_event, state) : 0;
    f850:	6923      	ldr	r3, [r4, #16]
    f852:	2b00      	cmp	r3, #0
    f854:	d022      	beq.n	f89c <k_sem_give+0x6c>
    f856:	0020      	movs	r0, r4
    f858:	2104      	movs	r1, #4
    f85a:	3010      	adds	r0, #16
    f85c:	f7ff fc92 	bl	f184 <_handle_obj_poll_event>
{
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    f860:	2800      	cmp	r0, #0
    f862:	d01b      	beq.n	f89c <k_sem_give+0x6c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    f864:	f7ff ff82 	bl	f76c <_update_time_slice_before_swap>
#endif

	return __swap(key);
    f868:	0028      	movs	r0, r5
    f86a:	f7fe ff57 	bl	e71c <__swap>
    f86e:	e018      	b.n	f8a2 <k_sem_give+0x72>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    f870:	3010      	adds	r0, #16
    f872:	f7ff ffbd 	bl	f7f0 <_abort_timeout>
	if (!thread) {
		increment_count_up_to_limit(sem);
		return handle_poll_event(sem);
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
    f876:	0030      	movs	r0, r6
    f878:	f7ff ff7e 	bl	f778 <_ready_thread>
    f87c:	2300      	movs	r3, #0
    f87e:	65f3      	str	r3, [r6, #92]	; 0x5c
    f880:	f3ef 8305 	mrs	r3, IPSR
    f884:	2b0d      	cmp	r3, #13
    f886:	d809      	bhi.n	f89c <k_sem_give+0x6c>
    f888:	2b03      	cmp	r3, #3
    f88a:	d007      	beq.n	f89c <k_sem_give+0x6c>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    f88c:	4b05      	ldr	r3, [pc, #20]	; (f8a4 <k_sem_give+0x74>)
    f88e:	689b      	ldr	r3, [r3, #8]
    f890:	895b      	ldrh	r3, [r3, #10]
    f892:	2b7f      	cmp	r3, #127	; 0x7f
    f894:	d802      	bhi.n	f89c <k_sem_give+0x6c>
    f896:	f7ff fe9b 	bl	f5d0 <__must_switch_threads>
    f89a:	e7e1      	b.n	f860 <k_sem_give+0x30>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f89c:	2d00      	cmp	r5, #0
    f89e:	d100      	bne.n	f8a2 <k_sem_give+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f8a0:	b662      	cpsie	i
	if (do_sem_give(sem)) {
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    f8a2:	bd70      	pop	{r4, r5, r6, pc}
    f8a4:	20001a10 	.word	0x20001a10

0000f8a8 <k_sem_take>:

int k_sem_take(struct k_sem *sem, s32_t timeout)
{
    f8a8:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f8aa:	f3ef 8410 	mrs	r4, PRIMASK
    f8ae:	b672      	cpsid	i
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    f8b0:	6883      	ldr	r3, [r0, #8]
    f8b2:	2b00      	cmp	r3, #0
    f8b4:	d006      	beq.n	f8c4 <k_sem_take+0x1c>
		sem->count--;
    f8b6:	3b01      	subs	r3, #1
    f8b8:	6083      	str	r3, [r0, #8]
		irq_unlock(key);
		return 0;
    f8ba:	2000      	movs	r0, #0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f8bc:	4284      	cmp	r4, r0
    f8be:	d111      	bne.n	f8e4 <k_sem_take+0x3c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f8c0:	b662      	cpsie	i
    f8c2:	e00f      	b.n	f8e4 <k_sem_take+0x3c>
	}

	if (timeout == K_NO_WAIT) {
    f8c4:	2900      	cmp	r1, #0
    f8c6:	d103      	bne.n	f8d0 <k_sem_take+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f8c8:	2c00      	cmp	r4, #0
    f8ca:	d109      	bne.n	f8e0 <k_sem_take+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f8cc:	b662      	cpsie	i
    f8ce:	e007      	b.n	f8e0 <k_sem_take+0x38>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
    f8d0:	f7ff fe6e 	bl	f5b0 <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    f8d4:	f7ff ff4a 	bl	f76c <_update_time_slice_before_swap>
#endif

	return __swap(key);
    f8d8:	0020      	movs	r0, r4
    f8da:	f7fe ff1f 	bl	e71c <__swap>

	return _Swap(key);
    f8de:	e001      	b.n	f8e4 <k_sem_take+0x3c>
		return 0;
	}

	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EBUSY;
    f8e0:	2010      	movs	r0, #16
    f8e2:	4240      	negs	r0, r0
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
    f8e4:	bd10      	pop	{r4, pc}
	...

0000f8e8 <_tick_get>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f8e8:	f3ef 8310 	mrs	r3, PRIMASK
    f8ec:	b672      	cpsid	i
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    f8ee:	4a03      	ldr	r2, [pc, #12]	; (f8fc <_tick_get+0x14>)
    f8f0:	6810      	ldr	r0, [r2, #0]
    f8f2:	6851      	ldr	r1, [r2, #4]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f8f4:	2b00      	cmp	r3, #0
    f8f6:	d100      	bne.n	f8fa <_tick_get+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f8f8:	b662      	cpsie	i
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    f8fa:	4770      	bx	lr
    f8fc:	20001c40 	.word	0x20001c40

0000f900 <k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t k_uptime_get(void)
{
    f900:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
    f902:	f7ff fff1 	bl	f8e8 <_tick_get>
    f906:	220a      	movs	r2, #10
    f908:	2300      	movs	r3, #0
    f90a:	f7f0 fdf5 	bl	4f8 <__aeabi_lmul>
}
    f90e:	bd10      	pop	{r4, pc}

0000f910 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    f910:	b5f0      	push	{r4, r5, r6, r7, lr}
    f912:	b085      	sub	sp, #20
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f914:	f3ef 8410 	mrs	r4, PRIMASK
    f918:	b672      	cpsid	i

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    f91a:	495a      	ldr	r1, [pc, #360]	; (fa84 <_nano_sys_clock_tick_announce+0x174>)
    f91c:	17c3      	asrs	r3, r0, #31
    f91e:	9301      	str	r3, [sp, #4]
    f920:	9000      	str	r0, [sp, #0]
    f922:	680a      	ldr	r2, [r1, #0]
    f924:	684b      	ldr	r3, [r1, #4]
    f926:	9d00      	ldr	r5, [sp, #0]
    f928:	9e01      	ldr	r6, [sp, #4]
    f92a:	1952      	adds	r2, r2, r5
    f92c:	4173      	adcs	r3, r6
    f92e:	600a      	str	r2, [r1, #0]
    f930:	604b      	str	r3, [r1, #4]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f932:	2c00      	cmp	r4, #0
    f934:	d100      	bne.n	f938 <_nano_sys_clock_tick_announce+0x28>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f936:	b662      	cpsie	i
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    f938:	aa02      	add	r2, sp, #8
    f93a:	9202      	str	r2, [sp, #8]
	list->tail = (sys_dnode_t *)list;
    f93c:	6052      	str	r2, [r2, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f93e:	f3ef 8610 	mrs	r6, PRIMASK
    f942:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f944:	4d50      	ldr	r5, [pc, #320]	; (fa88 <_nano_sys_clock_tick_announce+0x178>)
    f946:	4c51      	ldr	r4, [pc, #324]	; (fa8c <_nano_sys_clock_tick_announce+0x17c>)
    f948:	68eb      	ldr	r3, [r5, #12]
    f94a:	0031      	movs	r1, r6
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f94c:	42a3      	cmp	r3, r4
    f94e:	d001      	beq.n	f954 <_nano_sys_clock_tick_announce+0x44>
		(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

	K_DEBUG("head: %p, delta: %d\n",
		head, head ? head->delta_ticks_from_prev : -2112);

	if (!head) {
    f950:	2b00      	cmp	r3, #0
    f952:	d103      	bne.n	f95c <_nano_sys_clock_tick_announce+0x4c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f954:	2e00      	cmp	r6, #0
    f956:	d171      	bne.n	fa3c <_nano_sys_clock_tick_announce+0x12c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f958:	b662      	cpsie	i
    f95a:	e06f      	b.n	fa3c <_nano_sys_clock_tick_announce+0x12c>
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
    f95c:	691e      	ldr	r6, [r3, #16]
    f95e:	1a30      	subs	r0, r6, r0
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
    f960:	2601      	movs	r6, #1
	if (!head) {
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
    f962:	6118      	str	r0, [r3, #16]
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
    f964:	484a      	ldr	r0, [pc, #296]	; (fa90 <_nano_sys_clock_tick_announce+0x180>)
    f966:	6006      	str	r6, [r0, #0]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
    f968:	3e03      	subs	r6, #3
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
    f96a:	6918      	ldr	r0, [r3, #16]
    f96c:	2800      	cmp	r0, #0
    f96e:	d116      	bne.n	f99e <_nano_sys_clock_tick_announce+0x8e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f970:	681f      	ldr	r7, [r3, #0]
    f972:	6858      	ldr	r0, [r3, #4]
    f974:	6007      	str	r7, [r0, #0]
	node->next->prev = node->prev;
    f976:	681f      	ldr	r7, [r3, #0]
    f978:	6078      	str	r0, [r7, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
    f97a:	6810      	ldr	r0, [r2, #0]
	node->prev = list;
    f97c:	605a      	str	r2, [r3, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
    f97e:	6018      	str	r0, [r3, #0]
	node->prev = list;

	list->head->prev = node;
    f980:	6810      	ldr	r0, [r2, #0]
	list->head = node;
    f982:	6013      	str	r3, [r2, #0]
static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
	node->prev = list;

	list->head->prev = node;
    f984:	6043      	str	r3, [r0, #4]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
    f986:	611e      	str	r6, [r3, #16]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f988:	2900      	cmp	r1, #0
    f98a:	d100      	bne.n	f98e <_nano_sys_clock_tick_announce+0x7e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f98c:	b662      	cpsie	i
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f98e:	f3ef 8110 	mrs	r1, PRIMASK
    f992:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f994:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f996:	42a3      	cmp	r3, r4
    f998:	d001      	beq.n	f99e <_nano_sys_clock_tick_announce+0x8e>
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
    f99a:	2b00      	cmp	r3, #0
    f99c:	d1e5      	bne.n	f96a <_nano_sys_clock_tick_announce+0x5a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    f99e:	2900      	cmp	r1, #0
    f9a0:	d100      	bne.n	f9a4 <_nano_sys_clock_tick_announce+0x94>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    f9a2:	b662      	cpsie	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f9a4:	9b02      	ldr	r3, [sp, #8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f9a6:	4293      	cmp	r3, r2
    f9a8:	d103      	bne.n	f9b2 <_nano_sys_clock_tick_announce+0xa2>

	irq_unlock(key);

	_handle_expired_timeouts(&expired);

	_handling_timeouts = 0;
    f9aa:	2200      	movs	r2, #0
    f9ac:	4b38      	ldr	r3, [pc, #224]	; (fa90 <_nano_sys_clock_tick_announce+0x180>)
    f9ae:	601a      	str	r2, [r3, #0]
    f9b0:	e044      	b.n	fa3c <_nano_sys_clock_tick_announce+0x12c>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f9b2:	2b00      	cmp	r3, #0
    f9b4:	d0f9      	beq.n	f9aa <_nano_sys_clock_tick_announce+0x9a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    f9b6:	9a03      	ldr	r2, [sp, #12]
    f9b8:	2400      	movs	r4, #0
    f9ba:	4293      	cmp	r3, r2
    f9bc:	d000      	beq.n	f9c0 <_nano_sys_clock_tick_announce+0xb0>
    f9be:	681c      	ldr	r4, [r3, #0]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f9c0:	2704      	movs	r7, #4
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f9c2:	6819      	ldr	r1, [r3, #0]
    f9c4:	685a      	ldr	r2, [r3, #4]
    f9c6:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    f9c8:	6819      	ldr	r1, [r3, #0]
    f9ca:	604a      	str	r2, [r1, #4]
 * kept as -EAGAIN, set previously in _Swap().
 */

static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
    f9cc:	6898      	ldr	r0, [r3, #8]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    f9ce:	f3ef 8610 	mrs	r6, PRIMASK
    f9d2:	b672      	cpsid	i
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
    f9d4:	2201      	movs	r2, #1
    f9d6:	4252      	negs	r2, r2
    f9d8:	611a      	str	r2, [r3, #16]

	K_DEBUG("timeout %p\n", timeout);
	if (thread) {
    f9da:	2800      	cmp	r0, #0
    f9dc:	d01b      	beq.n	fa16 <_nano_sys_clock_tick_announce+0x106>
/* remove a thread timing out from kernel object's wait queue */

static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
    f9de:	68db      	ldr	r3, [r3, #12]
    f9e0:	2b00      	cmp	r3, #0
    f9e2:	d00a      	beq.n	f9fa <_nano_sys_clock_tick_announce+0xea>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f9e4:	6843      	ldr	r3, [r0, #4]
    f9e6:	6802      	ldr	r2, [r0, #0]
    f9e8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    f9ea:	6802      	ldr	r2, [r0, #0]
    f9ec:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    f9ee:	2202      	movs	r2, #2
    f9f0:	7a43      	ldrb	r3, [r0, #9]
    f9f2:	4393      	bics	r3, r2
    f9f4:	7243      	strb	r3, [r0, #9]
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
    f9f6:	2300      	movs	r3, #0
    f9f8:	61c3      	str	r3, [r0, #28]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f9fa:	7a43      	ldrb	r3, [r0, #9]
    f9fc:	001a      	movs	r2, r3
    f9fe:	43ba      	bics	r2, r7
    fa00:	7242      	strb	r2, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    fa02:	221b      	movs	r2, #27
    fa04:	4213      	tst	r3, r2
    fa06:	d102      	bne.n	fa0e <_nano_sys_clock_tick_announce+0xfe>
    fa08:	6a03      	ldr	r3, [r0, #32]
    fa0a:	3301      	adds	r3, #1
    fa0c:	d035      	beq.n	fa7a <_nano_sys_clock_tick_announce+0x16a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    fa0e:	2e00      	cmp	r6, #0
    fa10:	d109      	bne.n	fa26 <_nano_sys_clock_tick_announce+0x116>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    fa12:	b662      	cpsie	i
    fa14:	e007      	b.n	fa26 <_nano_sys_clock_tick_announce+0x116>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    fa16:	2e00      	cmp	r6, #0
    fa18:	d100      	bne.n	fa1c <_nano_sys_clock_tick_announce+0x10c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    fa1a:	b662      	cpsie	i
		_unpend_thread_timing_out(thread, timeout);
		_ready_thread(thread);
		irq_unlock(key);
	} else {
		irq_unlock(key);
		if (timeout->func) {
    fa1c:	695a      	ldr	r2, [r3, #20]
    fa1e:	2a00      	cmp	r2, #0
    fa20:	d001      	beq.n	fa26 <_nano_sys_clock_tick_announce+0x116>
			timeout->func(timeout);
    fa22:	0018      	movs	r0, r3
    fa24:	4790      	blx	r2
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fa26:	2c00      	cmp	r4, #0
    fa28:	d0bf      	beq.n	f9aa <_nano_sys_clock_tick_announce+0x9a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    fa2a:	9b03      	ldr	r3, [sp, #12]
    fa2c:	2200      	movs	r2, #0
    fa2e:	429c      	cmp	r4, r3
    fa30:	d102      	bne.n	fa38 <_nano_sys_clock_tick_announce+0x128>
    fa32:	0023      	movs	r3, r4
    fa34:	0014      	movs	r4, r2
    fa36:	e7c4      	b.n	f9c2 <_nano_sys_clock_tick_announce+0xb2>
    fa38:	6822      	ldr	r2, [r4, #0]
    fa3a:	e7fa      	b.n	fa32 <_nano_sys_clock_tick_announce+0x122>
static void handle_time_slicing(s32_t ticks)
{
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
    fa3c:	68a8      	ldr	r0, [r5, #8]
    fa3e:	f7ff fe6b 	bl	f718 <_is_thread_time_slicing>
    fa42:	2800      	cmp	r0, #0
    fa44:	d01c      	beq.n	fa80 <_nano_sys_clock_tick_announce+0x170>
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
    fa46:	9800      	ldr	r0, [sp, #0]
    fa48:	9901      	ldr	r1, [sp, #4]
    fa4a:	220a      	movs	r2, #10
    fa4c:	2300      	movs	r3, #0
    fa4e:	f7f0 fd53 	bl	4f8 <__aeabi_lmul>
    fa52:	4b10      	ldr	r3, [pc, #64]	; (fa94 <_nano_sys_clock_tick_announce+0x184>)
    fa54:	681a      	ldr	r2, [r3, #0]
    fa56:	1810      	adds	r0, r2, r0
	if (_time_slice_elapsed >= _time_slice_duration) {
    fa58:	4a0f      	ldr	r2, [pc, #60]	; (fa98 <_nano_sys_clock_tick_announce+0x188>)
#endif
	if (!_is_thread_time_slicing(_current)) {
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
    fa5a:	6018      	str	r0, [r3, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    fa5c:	6812      	ldr	r2, [r2, #0]
    fa5e:	4290      	cmp	r0, r2
    fa60:	db0e      	blt.n	fa80 <_nano_sys_clock_tick_announce+0x170>

		unsigned int key;

		_time_slice_elapsed = 0;
    fa62:	2200      	movs	r2, #0
    fa64:	601a      	str	r2, [r3, #0]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    fa66:	f3ef 8410 	mrs	r4, PRIMASK
    fa6a:	b672      	cpsid	i

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
    fa6c:	68a8      	ldr	r0, [r5, #8]
    fa6e:	f7ff fde9 	bl	f644 <_move_thread_to_end_of_prio_q>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    fa72:	2c00      	cmp	r4, #0
    fa74:	d104      	bne.n	fa80 <_nano_sys_clock_tick_announce+0x170>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    fa76:	b662      	cpsie	i
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    fa78:	e002      	b.n	fa80 <_nano_sys_clock_tick_announce+0x170>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    fa7a:	f7ff fd11 	bl	f4a0 <_add_thread_to_ready_q>
    fa7e:	e7c6      	b.n	fa0e <_nano_sys_clock_tick_announce+0xfe>
    fa80:	b005      	add	sp, #20
    fa82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa84:	20001c40 	.word	0x20001c40
    fa88:	20001a10 	.word	0x20001a10
    fa8c:	20001a1c 	.word	0x20001a1c
    fa90:	20001c38 	.word	0x20001c38
    fa94:	20001c3c 	.word	0x20001c3c
    fa98:	20001b34 	.word	0x20001b34

0000fa9c <k_sys_work_q_init>:

static int k_sys_work_q_init(struct device *dev)
{
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    fa9c:	2301      	movs	r3, #1
    fa9e:	2280      	movs	r2, #128	; 0x80
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    faa0:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    faa2:	4804      	ldr	r0, [pc, #16]	; (fab4 <k_sys_work_q_init+0x18>)
    faa4:	425b      	negs	r3, r3
    faa6:	00d2      	lsls	r2, r2, #3
    faa8:	4903      	ldr	r1, [pc, #12]	; (fab8 <k_sys_work_q_init+0x1c>)
    faaa:	f000 f973 	bl	fd94 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    faae:	2000      	movs	r0, #0
    fab0:	bd10      	pop	{r4, pc}
    fab2:	46c0      	nop			; (mov r8, r8)
    fab4:	20001c48 	.word	0x20001c48
    fab8:	20003480 	.word	0x20003480

0000fabc <_is_thread_ready>:
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    fabc:	7a42      	ldrb	r2, [r0, #9]
    fabe:	2300      	movs	r3, #0
    fac0:	06d2      	lsls	r2, r2, #27
    fac2:	d103      	bne.n	facc <_is_thread_ready+0x10>
    fac4:	6a03      	ldr	r3, [r0, #32]
    fac6:	3301      	adds	r3, #1
    fac8:	4258      	negs	r0, r3
    faca:	4143      	adcs	r3, r0
		 _is_thread_timeout_active(thread));
}
    facc:	0018      	movs	r0, r3
    face:	4770      	bx	lr

0000fad0 <start_thread>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
static void start_thread(struct k_thread *thread)
{
    fad0:	b570      	push	{r4, r5, r6, lr}
    fad2:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    fad4:	f3ef 8510 	mrs	r5, PRIMASK
    fad8:	b672      	cpsid	i
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fada:	2204      	movs	r2, #4
    fadc:	7a43      	ldrb	r3, [r0, #9]
    fade:	4393      	bics	r3, r2
    fae0:	7243      	strb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
    fae2:	f7ff ffeb 	bl	fabc <_is_thread_ready>
    fae6:	2800      	cmp	r0, #0
    fae8:	d011      	beq.n	fb0e <start_thread+0x3e>
		_add_thread_to_ready_q(thread);
    faea:	0020      	movs	r0, r4
    faec:	f7ff fcd8 	bl	f4a0 <_add_thread_to_ready_q>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    faf0:	4b09      	ldr	r3, [pc, #36]	; (fb18 <start_thread+0x48>)
    faf2:	689b      	ldr	r3, [r3, #8]
    faf4:	895b      	ldrh	r3, [r3, #10]
    faf6:	2b7f      	cmp	r3, #127	; 0x7f
    faf8:	d809      	bhi.n	fb0e <start_thread+0x3e>
    fafa:	f7ff fd69 	bl	f5d0 <__must_switch_threads>
    fafe:	2800      	cmp	r0, #0
    fb00:	d005      	beq.n	fb0e <start_thread+0x3e>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
    fb02:	f7ff fe33 	bl	f76c <_update_time_slice_before_swap>
#endif

	return __swap(key);
    fb06:	0028      	movs	r0, r5
    fb08:	f7fe fe08 	bl	e71c <__swap>
    fb0c:	e002      	b.n	fb14 <start_thread+0x44>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    fb0e:	2d00      	cmp	r5, #0
    fb10:	d100      	bne.n	fb14 <start_thread+0x44>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    fb12:	b662      	cpsie	i
			return;
		}
	}

	irq_unlock(key);
}
    fb14:	bd70      	pop	{r4, r5, r6, pc}
    fb16:	46c0      	nop			; (mov r8, r8)
    fb18:	20001a10 	.word	0x20001a10

0000fb1c <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    fb1c:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    fb1e:	6900      	ldr	r0, [r0, #16]
    fb20:	1c42      	adds	r2, r0, #1
    fb22:	d010      	beq.n	fb46 <_abort_timeout+0x2a>
    fb24:	4a08      	ldr	r2, [pc, #32]	; (fb48 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    fb26:	6912      	ldr	r2, [r2, #16]
    fb28:	4293      	cmp	r3, r2
    fb2a:	d003      	beq.n	fb34 <_abort_timeout+0x18>
    fb2c:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    fb2e:	6911      	ldr	r1, [r2, #16]
    fb30:	1808      	adds	r0, r1, r0
    fb32:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    fb34:	685a      	ldr	r2, [r3, #4]
    fb36:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
    fb38:	2000      	movs	r0, #0
    fb3a:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    fb3c:	6819      	ldr	r1, [r3, #0]
    fb3e:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    fb40:	2201      	movs	r2, #1
    fb42:	4252      	negs	r2, r2
    fb44:	611a      	str	r2, [r3, #16]

	return 0;
}
    fb46:	4770      	bx	lr
    fb48:	20001a10 	.word	0x20001a10

0000fb4c <schedule_new_thread.part.14>:
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    fb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb4e:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    fb50:	f3ef 8510 	mrs	r5, PRIMASK
    fb54:	b672      	cpsid	i
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
    fb56:	3109      	adds	r1, #9
    fb58:	0008      	movs	r0, r1
    fb5a:	210a      	movs	r1, #10
    fb5c:	f7f0 fb36 	bl	1cc <__aeabi_uidiv>
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
    fb60:	2300      	movs	r3, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    fb62:	4a17      	ldr	r2, [pc, #92]	; (fbc0 <schedule_new_thread.part.14+0x74>)
    fb64:	61e3      	str	r3, [r4, #28]
    fb66:	4e17      	ldr	r6, [pc, #92]	; (fbc4 <schedule_new_thread.part.14+0x78>)
    fb68:	68d3      	ldr	r3, [r2, #12]
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
    fb6a:	3001      	adds	r0, #1
    fb6c:	6220      	str	r0, [r4, #32]
	timeout->thread = thread;
    fb6e:	61a4      	str	r4, [r4, #24]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fb70:	42b3      	cmp	r3, r6
    fb72:	d107      	bne.n	fb84 <schedule_new_thread.part.14+0x38>
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
    fb74:	0023      	movs	r3, r4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    fb76:	6126      	str	r6, [r4, #16]
	node->prev = list->tail;
    fb78:	6911      	ldr	r1, [r2, #16]
    fb7a:	3310      	adds	r3, #16
    fb7c:	6161      	str	r1, [r4, #20]

	list->tail->next = node;
    fb7e:	600b      	str	r3, [r1, #0]
	list->tail = node;
    fb80:	6113      	str	r3, [r2, #16]
    fb82:	e019      	b.n	fbb8 <schedule_new_thread.part.14+0x6c>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    fb84:	2b00      	cmp	r3, #0
    fb86:	d0f5      	beq.n	fb74 <schedule_new_thread.part.14+0x28>
    fb88:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
    fb8a:	6a21      	ldr	r1, [r4, #32]
    fb8c:	6918      	ldr	r0, [r3, #16]
    fb8e:	4281      	cmp	r1, r0
    fb90:	dc0a      	bgt.n	fba8 <schedule_new_thread.part.14+0x5c>
			in_q->delta_ticks_from_prev -= *delta;
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
    fb92:	0022      	movs	r2, r4
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
		if (*delta <= in_q->delta_ticks_from_prev) {
			in_q->delta_ticks_from_prev -= *delta;
    fb94:	1a41      	subs	r1, r0, r1
    fb96:	6119      	str	r1, [r3, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    fb98:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
    fb9a:	6123      	str	r3, [r4, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    fb9c:	6161      	str	r1, [r4, #20]
		node->next = insert_point;
		insert_point->prev->next = node;
    fb9e:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
    fba0:	3210      	adds	r2, #16
    fba2:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
    fba4:	605a      	str	r2, [r3, #4]
    fba6:	e007      	b.n	fbb8 <schedule_new_thread.part.14+0x6c>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
    fba8:	1a09      	subs	r1, r1, r0
    fbaa:	6221      	str	r1, [r4, #32]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    fbac:	42bb      	cmp	r3, r7
    fbae:	d0e1      	beq.n	fb74 <schedule_new_thread.part.14+0x28>
    fbb0:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    fbb2:	2b00      	cmp	r3, #0
    fbb4:	d1e9      	bne.n	fb8a <schedule_new_thread.part.14+0x3e>
    fbb6:	e7dd      	b.n	fb74 <schedule_new_thread.part.14+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    fbb8:	2d00      	cmp	r5, #0
    fbba:	d100      	bne.n	fbbe <schedule_new_thread.part.14+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    fbbc:	b662      	cpsie	i
	}
#else
	ARG_UNUSED(delay);
	start_thread(thread);
#endif
}
    fbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbc0:	20001a10 	.word	0x20001a10
    fbc4:	20001a1c 	.word	0x20001a1c

0000fbc8 <k_is_in_isr>:
    fbc8:	f3ef 8305 	mrs	r3, IPSR
    fbcc:	2001      	movs	r0, #1
    fbce:	2b0d      	cmp	r3, #13
    fbd0:	d802      	bhi.n	fbd8 <k_is_in_isr+0x10>
    fbd2:	3b03      	subs	r3, #3
    fbd4:	4258      	negs	r0, r3
    fbd6:	4158      	adcs	r0, r3


int k_is_in_isr(void)
{
	return _is_in_isr();
}
    fbd8:	4770      	bx	lr
	...

0000fbdc <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
    fbdc:	4b02      	ldr	r3, [pc, #8]	; (fbe8 <_is_thread_essential+0xc>)
    fbde:	689b      	ldr	r3, [r3, #8]
    fbe0:	7a18      	ldrb	r0, [r3, #8]
    fbe2:	2301      	movs	r3, #1
    fbe4:	4018      	ands	r0, r3
}
    fbe6:	4770      	bx	lr
    fbe8:	20001a10 	.word	0x20001a10

0000fbec <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
    fbec:	b510      	push	{r4, lr}
    fbee:	0004      	movs	r4, r0
    fbf0:	0008      	movs	r0, r1
    fbf2:	0011      	movs	r1, r2
	entry(p1, p2, p3);
    fbf4:	001a      	movs	r2, r3
    fbf6:	47a0      	blx	r4

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_MULTITHREADING
	if (_is_thread_essential()) {
    fbf8:	f7ff fff0 	bl	fbdc <_is_thread_essential>
    fbfc:	2800      	cmp	r0, #0
    fbfe:	d002      	beq.n	fc06 <_thread_entry+0x1a>
		_k_except_reason(_NANO_ERR_INVALID_TASK_EXIT);
    fc00:	b662      	cpsie	i
    fc02:	2001      	movs	r0, #1
    fc04:	df02      	svc	2
	}

	k_thread_abort(_current);
    fc06:	4b02      	ldr	r3, [pc, #8]	; (fc10 <_thread_entry+0x24>)
    fc08:	6898      	ldr	r0, [r3, #8]
    fc0a:	f7fe fecf 	bl	e9ac <k_thread_abort>
    fc0e:	46c0      	nop			; (mov r8, r8)
    fc10:	20001a10 	.word	0x20001a10

0000fc14 <k_thread_create>:

k_tid_t k_thread_create(struct k_thread *new_thread, char *stack,
			size_t stack_size, void (*entry)(void *, void *, void*),
			void *p1, void *p2, void *p3,
			int prio, u32_t options, s32_t delay)
{
    fc14:	b510      	push	{r4, lr}
    fc16:	0004      	movs	r4, r0
    fc18:	b086      	sub	sp, #24
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
    fc1a:	980c      	ldr	r0, [sp, #48]	; 0x30
    fc1c:	9004      	str	r0, [sp, #16]
    fc1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fc20:	9003      	str	r0, [sp, #12]
    fc22:	980a      	ldr	r0, [sp, #40]	; 0x28
    fc24:	9002      	str	r0, [sp, #8]
    fc26:	9809      	ldr	r0, [sp, #36]	; 0x24
    fc28:	9001      	str	r0, [sp, #4]
    fc2a:	9808      	ldr	r0, [sp, #32]
    fc2c:	9000      	str	r0, [sp, #0]
    fc2e:	0020      	movs	r0, r4
    fc30:	f7fe fe1c 	bl	e86c <_new_thread>

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
    fc34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fc36:	2b00      	cmp	r3, #0
    fc38:	d103      	bne.n	fc42 <k_thread_create+0x2e>
		start_thread(thread);
    fc3a:	0020      	movs	r0, r4
    fc3c:	f7ff ff48 	bl	fad0 <start_thread>
    fc40:	e003      	b.n	fc4a <k_thread_create+0x36>
    fc42:	990d      	ldr	r1, [sp, #52]	; 0x34
    fc44:	0020      	movs	r0, r4
    fc46:	f7ff ff81 	bl	fb4c <schedule_new_thread.part.14>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
		    options);

	schedule_new_thread(new_thread, delay);
	return new_thread;
}
    fc4a:	0020      	movs	r0, r4
    fc4c:	b006      	add	sp, #24
    fc4e:	bd10      	pop	{r4, pc}

0000fc50 <_k_thread_single_abort>:
	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    fc50:	6d03      	ldr	r3, [r0, #80]	; 0x50

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
    fc52:	b510      	push	{r4, lr}
    fc54:	0004      	movs	r4, r0
	if (thread->fn_abort != NULL) {
    fc56:	2b00      	cmp	r3, #0
    fc58:	d000      	beq.n	fc5c <_k_thread_single_abort+0xc>
		thread->fn_abort();
    fc5a:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    fc5c:	0020      	movs	r0, r4
    fc5e:	f7ff ff2d 	bl	fabc <_is_thread_ready>
    fc62:	2800      	cmp	r0, #0
    fc64:	d003      	beq.n	fc6e <_k_thread_single_abort+0x1e>
		_remove_thread_from_ready_q(thread);
    fc66:	0020      	movs	r0, r4
    fc68:	f7ff fc42 	bl	f4f0 <_remove_thread_from_ready_q>
    fc6c:	e012      	b.n	fc94 <_k_thread_single_abort+0x44>
	} else {
		if (_is_thread_pending(thread)) {
    fc6e:	2202      	movs	r2, #2
    fc70:	7a63      	ldrb	r3, [r4, #9]
    fc72:	4213      	tst	r3, r2
    fc74:	d007      	beq.n	fc86 <_k_thread_single_abort+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    fc76:	6863      	ldr	r3, [r4, #4]
    fc78:	6821      	ldr	r1, [r4, #0]
    fc7a:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    fc7c:	6821      	ldr	r1, [r4, #0]
    fc7e:	604b      	str	r3, [r1, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
    fc80:	7a63      	ldrb	r3, [r4, #9]
    fc82:	4393      	bics	r3, r2
    fc84:	7263      	strb	r3, [r4, #9]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
    fc86:	6a23      	ldr	r3, [r4, #32]
    fc88:	3301      	adds	r3, #1
    fc8a:	d003      	beq.n	fc94 <_k_thread_single_abort+0x44>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    fc8c:	0020      	movs	r0, r4
    fc8e:	3010      	adds	r0, #16
    fc90:	f7ff ff44 	bl	fb1c <_abort_timeout>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_DEAD;
    fc94:	2208      	movs	r2, #8
    fc96:	7a63      	ldrb	r3, [r4, #9]
    fc98:	4313      	orrs	r3, r2
    fc9a:	7263      	strb	r3, [r4, #9]
			_abort_thread_timeout(thread);
		}
	}
	_mark_thread_as_dead(thread);
}
    fc9c:	bd10      	pop	{r4, pc}
	...

0000fca0 <_init_static_threads>:

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
    fca0:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    fca2:	4c1c      	ldr	r4, [pc, #112]	; (fd14 <_init_static_threads+0x74>)
	_mark_thread_as_dead(thread);
}

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
    fca4:	b087      	sub	sp, #28
    fca6:	0025      	movs	r5, r4
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    fca8:	4e1b      	ldr	r6, [pc, #108]	; (fd18 <_init_static_threads+0x78>)
    fcaa:	42b4      	cmp	r4, r6
    fcac:	d213      	bcs.n	fcd6 <_init_static_threads+0x36>
		_new_thread(
    fcae:	6a23      	ldr	r3, [r4, #32]
    fcb0:	9304      	str	r3, [sp, #16]
    fcb2:	69e3      	ldr	r3, [r4, #28]
    fcb4:	9303      	str	r3, [sp, #12]
    fcb6:	69a3      	ldr	r3, [r4, #24]
    fcb8:	9302      	str	r3, [sp, #8]
    fcba:	6963      	ldr	r3, [r4, #20]
    fcbc:	9301      	str	r3, [sp, #4]
    fcbe:	6923      	ldr	r3, [r4, #16]
    fcc0:	9300      	str	r3, [sp, #0]
    fcc2:	68e3      	ldr	r3, [r4, #12]
    fcc4:	68a2      	ldr	r2, [r4, #8]
    fcc6:	6861      	ldr	r1, [r4, #4]
    fcc8:	6820      	ldr	r0, [r4, #0]
    fcca:	f7fe fdcf 	bl	e86c <_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
    fcce:	6823      	ldr	r3, [r4, #0]
    fcd0:	64dc      	str	r4, [r3, #76]	; 0x4c
#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    fcd2:	3430      	adds	r4, #48	; 0x30
    fcd4:	e7e8      	b.n	fca8 <_init_static_threads+0x8>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    fcd6:	4b11      	ldr	r3, [pc, #68]	; (fd1c <_init_static_threads+0x7c>)
    fcd8:	689a      	ldr	r2, [r3, #8]
    fcda:	7ad3      	ldrb	r3, [r2, #11]
    fcdc:	3b01      	subs	r3, #1
    fcde:	72d3      	strb	r3, [r2, #11]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    fce0:	f3ef 8710 	mrs	r7, PRIMASK
    fce4:	b672      	cpsid	i
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    fce6:	002c      	movs	r4, r5
    fce8:	42b4      	cmp	r4, r6
    fcea:	d20c      	bcs.n	fd06 <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
    fcec:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fcee:	1c4b      	adds	r3, r1, #1
    fcf0:	d007      	beq.n	fd02 <_init_static_threads+0x62>
			schedule_new_thread(thread_data->init_thread,
    fcf2:	6820      	ldr	r0, [r4, #0]

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
    fcf4:	2900      	cmp	r1, #0
    fcf6:	d102      	bne.n	fcfe <_init_static_threads+0x5e>
		start_thread(thread);
    fcf8:	f7ff feea 	bl	fad0 <start_thread>
    fcfc:	e001      	b.n	fd02 <_init_static_threads+0x62>
    fcfe:	f7ff ff25 	bl	fb4c <schedule_new_thread.part.14>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    fd02:	3430      	adds	r4, #48	; 0x30
    fd04:	e7f0      	b.n	fce8 <_init_static_threads+0x48>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    fd06:	2f00      	cmp	r7, #0
    fd08:	d100      	bne.n	fd0c <_init_static_threads+0x6c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    fd0a:	b662      	cpsie	i
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
    fd0c:	f7ff fc8c 	bl	f628 <k_sched_unlock>
}
    fd10:	b007      	add	sp, #28
    fd12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd14:	20000750 	.word	0x20000750
    fd18:	20000750 	.word	0x20000750
    fd1c:	20001a10 	.word	0x20001a10

0000fd20 <_init_thread_base>:
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    fd20:	7242      	strb	r2, [r0, #9]
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
    fd22:	2201      	movs	r2, #1
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    fd24:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    fd26:	2300      	movs	r3, #0
    fd28:	4252      	negs	r2, r2
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    fd2a:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
    fd2c:	72c3      	strb	r3, [r0, #11]
    fd2e:	6202      	str	r2, [r0, #32]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
    fd30:	61c3      	str	r3, [r0, #28]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
    fd32:	6183      	str	r3, [r0, #24]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
    fd34:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    fd36:	4770      	bx	lr

0000fd38 <k_work_submit_to_queue>:
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
    fd38:	b570      	push	{r4, r5, r6, lr}
    fd3a:	0005      	movs	r5, r0
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    fd3c:	0008      	movs	r0, r1
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
    fd3e:	000c      	movs	r4, r1
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    fd40:	3008      	adds	r0, #8
    fd42:	2101      	movs	r1, #1
    fd44:	f7fe feba 	bl	eabc <atomic_or>
    fd48:	07c3      	lsls	r3, r0, #31
    fd4a:	d403      	bmi.n	fd54 <k_work_submit_to_queue+0x1c>
		k_fifo_put(&work_q->fifo, work);
    fd4c:	0021      	movs	r1, r4
    fd4e:	0028      	movs	r0, r5
    fd50:	f7ff fb00 	bl	f354 <k_queue_append>
	}
}
    fd54:	bd70      	pop	{r4, r5, r6, pc}

0000fd56 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
    fd56:	380c      	subs	r0, #12
			work_q, 0, 0, prio, 0, 0);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
    fd58:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
    fd5a:	0001      	movs	r1, r0
    fd5c:	0004      	movs	r4, r0
    fd5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
    fd60:	f7ff ffea 	bl	fd38 <k_work_submit_to_queue>
	/* detach from workqueue, for cancel to return appropriate status */
	w->work_q = NULL;
    fd64:	2300      	movs	r3, #0
    fd66:	6263      	str	r3, [r4, #36]	; 0x24
}
    fd68:	bd10      	pop	{r4, pc}

0000fd6a <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    fd6a:	b570      	push	{r4, r5, r6, lr}
    fd6c:	0005      	movs	r5, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_fifo_get(&work_q->fifo, K_FOREVER);
    fd6e:	2101      	movs	r1, #1
    fd70:	0028      	movs	r0, r5
    fd72:	4249      	negs	r1, r1
    fd74:	f7ff fb3e 	bl	f3f4 <k_queue_get>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fd78:	2102      	movs	r1, #2
    fd7a:	0004      	movs	r4, r0

		handler = work->handler;
    fd7c:	6846      	ldr	r6, [r0, #4]
    fd7e:	4249      	negs	r1, r1

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    fd80:	3008      	adds	r0, #8
    fd82:	f7fe fea6 	bl	ead2 <atomic_and>
    fd86:	07c3      	lsls	r3, r0, #31
    fd88:	d501      	bpl.n	fd8e <work_q_main+0x24>
					       K_WORK_STATE_PENDING)) {
			handler(work);
    fd8a:	0020      	movs	r0, r4
    fd8c:	47b0      	blx	r6
		}

		/* Make sure we don't hog up the CPU if the FIFO never (or
		 * very rarely) gets empty.
		 */
		k_yield();
    fd8e:	f7ff fc7b 	bl	f688 <k_yield>
	}
    fd92:	e7ec      	b.n	fd6e <work_q_main+0x4>

0000fd94 <k_work_q_start>:
}

void k_work_q_start(struct k_work_q *work_q, char *stack,
		    size_t stack_size, int prio)
{
    fd94:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd96:	0004      	movs	r4, r0
    fd98:	b087      	sub	sp, #28
    fd9a:	001f      	movs	r7, r3
    fd9c:	000d      	movs	r5, r1
    fd9e:	0016      	movs	r6, r2
	k_fifo_init(&work_q->fifo);
    fda0:	f7ff fa8c 	bl	f2bc <k_queue_init>

	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
    fda4:	2300      	movs	r3, #0
    fda6:	0020      	movs	r0, r4
    fda8:	9305      	str	r3, [sp, #20]
    fdaa:	9304      	str	r3, [sp, #16]
    fdac:	9302      	str	r3, [sp, #8]
    fdae:	9301      	str	r3, [sp, #4]
    fdb0:	9703      	str	r7, [sp, #12]
    fdb2:	9400      	str	r4, [sp, #0]
    fdb4:	4b03      	ldr	r3, [pc, #12]	; (fdc4 <k_work_q_start+0x30>)
    fdb6:	0032      	movs	r2, r6
    fdb8:	0029      	movs	r1, r5
    fdba:	3014      	adds	r0, #20
    fdbc:	f7ff ff2a 	bl	fc14 <k_thread_create>
			work_q, 0, 0, prio, 0, 0);
}
    fdc0:	b007      	add	sp, #28
    fdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdc4:	0000fd6b 	.word	0x0000fd6b

0000fdc8 <k_delayed_work_init>:
	/* detach from workqueue, for cancel to return appropriate status */
	w->work_q = NULL;
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
    fdc8:	b570      	push	{r4, r5, r6, lr}
    fdca:	000d      	movs	r5, r1
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fdcc:	2102      	movs	r1, #2
    fdce:	0004      	movs	r4, r0
    fdd0:	4249      	negs	r1, r1
 *
 * @return N/A
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
    fdd2:	3008      	adds	r0, #8
    fdd4:	f7fe fe7d 	bl	ead2 <atomic_and>
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
    fdd8:	2301      	movs	r3, #1
    fdda:	425b      	negs	r3, r3
    fddc:	61e3      	str	r3, [r4, #28]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
    fdde:	2300      	movs	r3, #0
	t->thread = NULL;

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
    fde0:	4a03      	ldr	r2, [pc, #12]	; (fdf0 <k_delayed_work_init+0x28>)
	work->handler = handler;
    fde2:	6065      	str	r5, [r4, #4]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
    fde4:	61a3      	str	r3, [r4, #24]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
    fde6:	6163      	str	r3, [r4, #20]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
    fde8:	6222      	str	r2, [r4, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
    fdea:	6263      	str	r3, [r4, #36]	; 0x24
}
    fdec:	bd70      	pop	{r4, r5, r6, pc}
    fdee:	46c0      	nop			; (mov r8, r8)
    fdf0:	0000fd57 	.word	0x0000fd57

0000fdf4 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
    fdf4:	b570      	push	{r4, r5, r6, lr}
    fdf6:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    fdf8:	f3ef 8510 	mrs	r5, PRIMASK
    fdfc:	b672      	cpsid	i
 *
 * @return 1 if work item is pending, or 0 if it is not pending.
 */
static inline int k_work_pending(struct k_work *work)
{
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
    fdfe:	3008      	adds	r0, #8
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fe00:	f7fe fe50 	bl	eaa4 <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    fe04:	2301      	movs	r3, #1
    fe06:	4018      	ands	r0, r3
	int key = irq_lock();

	if (k_work_pending(&work->work)) {
    fe08:	d003      	beq.n	fe12 <k_delayed_work_cancel+0x1e>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    fe0a:	2d00      	cmp	r5, #0
    fe0c:	d123      	bne.n	fe56 <k_delayed_work_cancel+0x62>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    fe0e:	b662      	cpsie	i
    fe10:	e021      	b.n	fe56 <k_delayed_work_cancel+0x62>
		irq_unlock(key);
		return -EINPROGRESS;
	}

	if (!work->work_q) {
    fe12:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fe14:	2b00      	cmp	r3, #0
    fe16:	d103      	bne.n	fe20 <k_delayed_work_cancel+0x2c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    fe18:	2d00      	cmp	r5, #0
    fe1a:	d11e      	bne.n	fe5a <k_delayed_work_cancel+0x66>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    fe1c:	b662      	cpsie	i
    fe1e:	e01c      	b.n	fe5a <k_delayed_work_cancel+0x66>
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    fe20:	69e3      	ldr	r3, [r4, #28]
    fe22:	1c5a      	adds	r2, r3, #1
    fe24:	d011      	beq.n	fe4a <k_delayed_work_cancel+0x56>
    fe26:	4a0e      	ldr	r2, [pc, #56]	; (fe60 <k_delayed_work_cancel+0x6c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    fe28:	6911      	ldr	r1, [r2, #16]
    fe2a:	0022      	movs	r2, r4
    fe2c:	320c      	adds	r2, #12
    fe2e:	4291      	cmp	r1, r2
    fe30:	d003      	beq.n	fe3a <k_delayed_work_cancel+0x46>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    fe32:	68e2      	ldr	r2, [r4, #12]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    fe34:	6911      	ldr	r1, [r2, #16]
    fe36:	18cb      	adds	r3, r1, r3
    fe38:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    fe3a:	6923      	ldr	r3, [r4, #16]
    fe3c:	68e2      	ldr	r2, [r4, #12]
    fe3e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    fe40:	68e2      	ldr	r2, [r4, #12]
    fe42:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    fe44:	2301      	movs	r3, #1
    fe46:	425b      	negs	r3, r3
    fe48:	61e3      	str	r3, [r4, #28]

	/* Abort timeout, if it has expired this will do nothing */
	_abort_timeout(&work->timeout);

	/* Detach from workqueue */
	work->work_q = NULL;
    fe4a:	2300      	movs	r3, #0
    fe4c:	6263      	str	r3, [r4, #36]	; 0x24
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    fe4e:	429d      	cmp	r5, r3
    fe50:	d105      	bne.n	fe5e <k_delayed_work_cancel+0x6a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    fe52:	b662      	cpsie	i
    fe54:	e003      	b.n	fe5e <k_delayed_work_cancel+0x6a>
{
	int key = irq_lock();

	if (k_work_pending(&work->work)) {
		irq_unlock(key);
		return -EINPROGRESS;
    fe56:	2044      	movs	r0, #68	; 0x44
    fe58:	e000      	b.n	fe5c <k_delayed_work_cancel+0x68>
	}

	if (!work->work_q) {
		irq_unlock(key);
		return -EINVAL;
    fe5a:	2016      	movs	r0, #22
    fe5c:	4240      	negs	r0, r0
	work->work_q = NULL;

	irq_unlock(key);

	return 0;
}
    fe5e:	bd70      	pop	{r4, r5, r6, pc}
    fe60:	20001a10 	.word	0x20001a10

0000fe64 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
    fe64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe66:	0007      	movs	r7, r0
    fe68:	000c      	movs	r4, r1
    fe6a:	0016      	movs	r6, r2
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    fe6c:	f3ef 8510 	mrs	r5, PRIMASK
    fe70:	b672      	cpsid	i
	int key = irq_lock();
	int err;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
    fe72:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    fe74:	2b00      	cmp	r3, #0
    fe76:	d002      	beq.n	fe7e <k_delayed_work_submit_to_queue+0x1a>
    fe78:	4283      	cmp	r3, r0
    fe7a:	d00b      	beq.n	fe94 <k_delayed_work_submit_to_queue+0x30>
    fe7c:	e043      	b.n	ff06 <k_delayed_work_submit_to_queue+0xa2>
		err = -EADDRINUSE;
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
    fe7e:	2800      	cmp	r0, #0
    fe80:	d008      	beq.n	fe94 <k_delayed_work_submit_to_queue+0x30>
			goto done;
		}
	}

	/* Attach workqueue so the timeout callback can submit it */
	work->work_q = work_q;
    fe82:	6267      	str	r7, [r4, #36]	; 0x24

	if (!delay) {
    fe84:	2e00      	cmp	r6, #0
    fe86:	d10b      	bne.n	fea0 <k_delayed_work_submit_to_queue+0x3c>
		/* Submit work if no ticks is 0 */
		k_work_submit_to_queue(work_q, &work->work);
    fe88:	0038      	movs	r0, r7
    fe8a:	0021      	movs	r1, r4
    fe8c:	f7ff ff54 	bl	fd38 <k_work_submit_to_queue>
		/* Add timeout */
		_add_timeout(NULL, &work->timeout, NULL,
				_TICK_ALIGN + _ms_to_ticks(delay));
	}

	err = 0;
    fe90:	0030      	movs	r0, r6
    fe92:	e03a      	b.n	ff0a <k_delayed_work_submit_to_queue+0xa6>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = k_delayed_work_cancel(work);
    fe94:	0020      	movs	r0, r4
    fe96:	f7ff ffad 	bl	fdf4 <k_delayed_work_cancel>
		if (err < 0) {
    fe9a:	2800      	cmp	r0, #0
    fe9c:	daf1      	bge.n	fe82 <k_delayed_work_submit_to_queue+0x1e>
    fe9e:	e034      	b.n	ff0a <k_delayed_work_submit_to_queue+0xa6>
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
    fea0:	0030      	movs	r0, r6
    fea2:	210a      	movs	r1, #10
    fea4:	3009      	adds	r0, #9
    fea6:	f7f0 f991 	bl	1cc <__aeabi_uidiv>
	timeout->thread = thread;
    feaa:	2300      	movs	r3, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    feac:	4a19      	ldr	r2, [pc, #100]	; (ff14 <k_delayed_work_submit_to_queue+0xb0>)
    feae:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    feb0:	61a3      	str	r3, [r4, #24]
    feb2:	4e19      	ldr	r6, [pc, #100]	; (ff18 <k_delayed_work_submit_to_queue+0xb4>)
    feb4:	68d3      	ldr	r3, [r2, #12]
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
    feb6:	3001      	adds	r0, #1
    feb8:	61e0      	str	r0, [r4, #28]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    feba:	42b3      	cmp	r3, r6
    febc:	d108      	bne.n	fed0 <k_delayed_work_submit_to_queue+0x6c>
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
    febe:	0023      	movs	r3, r4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    fec0:	60e6      	str	r6, [r4, #12]
	node->prev = list->tail;
    fec2:	6911      	ldr	r1, [r2, #16]
    fec4:	330c      	adds	r3, #12
    fec6:	6121      	str	r1, [r4, #16]

	list->tail->next = node;
    fec8:	6911      	ldr	r1, [r2, #16]
    feca:	600b      	str	r3, [r1, #0]
	list->tail = node;
    fecc:	6113      	str	r3, [r2, #16]
    fece:	e010      	b.n	fef2 <k_delayed_work_submit_to_queue+0x8e>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    fed0:	2b00      	cmp	r3, #0
    fed2:	d0f4      	beq.n	febe <k_delayed_work_submit_to_queue+0x5a>
    fed4:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
    fed6:	69e1      	ldr	r1, [r4, #28]
    fed8:	6918      	ldr	r0, [r3, #16]
    feda:	4281      	cmp	r1, r0
    fedc:	dc0b      	bgt.n	fef6 <k_delayed_work_submit_to_queue+0x92>
			in_q->delta_ticks_from_prev -= *delta;
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
    fede:	0022      	movs	r2, r4
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
		if (*delta <= in_q->delta_ticks_from_prev) {
			in_q->delta_ticks_from_prev -= *delta;
    fee0:	1a41      	subs	r1, r0, r1
    fee2:	6119      	str	r1, [r3, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    fee4:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
    fee6:	60e3      	str	r3, [r4, #12]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    fee8:	6121      	str	r1, [r4, #16]
		node->next = insert_point;
		insert_point->prev->next = node;
    feea:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
    feec:	320c      	adds	r2, #12
    feee:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
    fef0:	605a      	str	r2, [r3, #4]
		/* Add timeout */
		_add_timeout(NULL, &work->timeout, NULL,
				_TICK_ALIGN + _ms_to_ticks(delay));
	}

	err = 0;
    fef2:	2000      	movs	r0, #0
    fef4:	e009      	b.n	ff0a <k_delayed_work_submit_to_queue+0xa6>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
    fef6:	1a09      	subs	r1, r1, r0
    fef8:	61e1      	str	r1, [r4, #28]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    fefa:	42bb      	cmp	r3, r7
    fefc:	d0df      	beq.n	febe <k_delayed_work_submit_to_queue+0x5a>
    fefe:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    ff00:	2b00      	cmp	r3, #0
    ff02:	d1e8      	bne.n	fed6 <k_delayed_work_submit_to_queue+0x72>
    ff04:	e7db      	b.n	febe <k_delayed_work_submit_to_queue+0x5a>
	int key = irq_lock();
	int err;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
		err = -EADDRINUSE;
    ff06:	2030      	movs	r0, #48	; 0x30
    ff08:	4240      	negs	r0, r0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    ff0a:	2d00      	cmp	r5, #0
    ff0c:	d100      	bne.n	ff10 <k_delayed_work_submit_to_queue+0xac>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    ff0e:	b662      	cpsie	i

done:
	irq_unlock(key);

	return err;
}
    ff10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff12:	46c0      	nop			; (mov r8, r8)
    ff14:	20001a10 	.word	0x20001a10
    ff18:	20001a1c 	.word	0x20001a1c

0000ff1c <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    ff1c:	4770      	bx	lr
