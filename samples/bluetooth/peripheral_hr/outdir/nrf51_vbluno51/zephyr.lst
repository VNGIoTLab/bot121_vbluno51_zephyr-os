
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	       u16_t initial_value)
{
       0:	20003340 	.word	0x20003340
       4:	00012c29 	.word	0x00012c29
	u16_t crc = initial_value;
	size_t i, b;

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {
       8:	00012c57 	.word	0x00012c57
       c:	00012ac9 	.word	0x00012ac9
      10:	00012ac9 	.word	0x00012ac9

		for (b = 0; b < 8; b++) {
			u16_t divide = crc & 0x8000;
      14:	00012ac9 	.word	0x00012ac9
      18:	00012ac9 	.word	0x00012ac9

			crc = (crc << 1);

			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
      1c:	00012ac9 	.word	0x00012ac9
				crc |= !!(src[i] & (0x80 >> b));
      20:	00012ac9 	.word	0x00012ac9
      24:	00012ac9 	.word	0x00012ac9
      28:	00012ac9 	.word	0x00012ac9
      2c:	000128f5 	.word	0x000128f5
			}

			if (divide) {
      30:	00012ac9 	.word	0x00012ac9
				crc = crc ^ polynomial;
      34:	00012ac9 	.word	0x00012ac9
	size_t i, b;

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {

		for (b = 0; b < 8; b++) {
      38:	00012899 	.word	0x00012899
      3c:	00012ac9 	.word	0x00012ac9

00000040 <_irq_vector_table>:
{
	u16_t crc = initial_value;
	size_t i, b;

	/* src length + crc width of zeros appended */
	for (i = 0; i < len + sizeof(crc); i++) {
      40:	00012bf1 00011833 00012bf1 00012bf1     .+..3....+...+..
			 * No further special processing is done for them.
			 */

			if (strchr("hlLz", c) != NULL) {
				i = c;
				c = *format++;
      50:	00012bf1 00012bf1 00012bf1 00012bf1     .+...+...+...+..
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
      60:	00012bf1 00012bf1 00012bf1 00012bf1     .+...+...+...+..
				if (precision != -1)
					pad = ' ';
				break;

			case '%':
				if ((*func)('%', dest) == EOF) {
      70:	00012bf1 00012bf1 00012bf1 00012bf1     .+...+...+...+..
	count = 0;

	while ((c = *format++)) {
		if (c != '%') {
			if ((*func) (c, dest) == EOF) {
				return EOF;
      80:	00012bf1 00012bf1 00012bf1 00012bf1     .+...+...+...+..
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
      90:	00012bf1 00012bf1 00012bf1 00012bf1     .+...+...+...+..
      a0:	00012bf1 00012bf1                       .+...+..

000000a8 <_sw_isr_table>:
				switch (c) {
      a8:	00000000 00001171 00000000 00012a41     ....q.......A*..
      b8:	00000000 00012a41 00000000 00012a41     ....A*......A*..
				case '-':
					fminus = true;
					break;

				case '+':
					fplus = true;
      c8:	00000000 00012a41 00000000 00012a41     ....A*......A*..
				}
			}

			if (c == '*') {
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
      d8:	200006dc 00000ebd 00000000 00012a41     ... ........A*..
				if (width < 0) {
					fminus = true;
					width = -width;
				}
				c = *format++;
      e8:	00000000 00012a41 00000000 00012a41     ....A*......A*..
			} else if (!isdigit(c))
      f8:	00000000 00012a41 00000000 000117f1     ....A*..........
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
     108:	00000000 00012a41 00000000 0001182b     ....A*......+...
		i = 10 * i + *p++ - '0';
     118:	00000000 00012a41 00000000 00012a41     ....A*......A*..
			 */
			if ((unsigned) width > MAXFLD) {
				width = MAXFLD;
			}

			if (c == '.') {
     128:	00000000 00012a41 00000000 00000c65     ....A*......e...

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
		i = 10 * i + *p++ - '0';
     138:	00000000 00012a41 00000000 00012a41     ....A*......A*..
     148:	00000000 00012a41 00000000 00012a41     ....A*......A*..
			count++;

		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */
     158:	00000000 00012a41 00000000 00012a41     ....A*......A*..
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     168:	00000000 00011821 00000000 00012a41     ....!.......A*..

00000178 <__gnu_thumb1_case_uqi>:
     178:	b402      	push	{r1}
     17a:	4671      	mov	r1, lr
     17c:	0849      	lsrs	r1, r1, #1
     17e:	0049      	lsls	r1, r1, #1
     180:	5c09      	ldrb	r1, [r1, r0]
     182:	0049      	lsls	r1, r1, #1
     184:	448e      	add	lr, r1
     186:	bc02      	pop	{r1}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <__gnu_thumb1_case_uhi>:
     18c:	b403      	push	{r0, r1}
     18e:	4671      	mov	r1, lr
     190:	0849      	lsrs	r1, r1, #1
     192:	0040      	lsls	r0, r0, #1
     194:	0049      	lsls	r1, r1, #1
     196:	5a09      	ldrh	r1, [r1, r0]
     198:	0049      	lsls	r1, r1, #1
     19a:	448e      	add	lr, r1
     19c:	bc03      	pop	{r0, r1}
     19e:	4770      	bx	lr

000001a0 <__aeabi_uidiv>:
				if (precision != -1)
					pad = ' ';
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
     1a0:	2200      	movs	r2, #0
     1a2:	0843      	lsrs	r3, r0, #1
     1a4:	428b      	cmp	r3, r1
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     1a6:	d374      	bcc.n	292 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x12>
     1a8:	0903      	lsrs	r3, r0, #4

			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     1aa:	428b      	cmp	r3, r1
     1ac:	d35f      	bcc.n	26e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xae>
     1ae:	0a03      	lsrs	r3, r0, #8
     1b0:	428b      	cmp	r3, r1
     1b2:	d344      	bcc.n	23e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x7e>
				buf[1] = '\0';
     1b4:	0b03      	lsrs	r3, r0, #12
				need_justifying = true;
				c = 1;
     1b6:	428b      	cmp	r3, r1
			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
				buf[1] = '\0';
     1b8:	d328      	bcc.n	20c <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x4c>
				need_justifying = true;
				c = 1;
				break;
     1ba:	0c03      	lsrs	r3, r0, #16

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     1bc:	428b      	cmp	r3, r1
     1be:	d30d      	bcc.n	1dc <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x1c>
     1c0:	22ff      	movs	r2, #255	; 0xff
     1c2:	0209      	lsls	r1, r1, #8

#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
     1c4:	ba12      	rev	r2, r2
     1c6:	0c03      	lsrs	r3, r0, #16
		*buf++ = '-';
     1c8:	428b      	cmp	r3, r1
     1ca:	d302      	bcc.n	1d2 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x12>
		if (value != 0x80000000)
     1cc:	1212      	asrs	r2, r2, #8
			value = -value;
     1ce:	0209      	lsls	r1, r1, #8
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
		if (value != 0x80000000)
     1d0:	d065      	beq.n	29e <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x1e>
     1d2:	0b03      	lsrs	r3, r0, #12
     1d4:	428b      	cmp	r3, r1
     1d6:	d319      	bcc.n	20c <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x4c>
     1d8:	e000      	b.n	1dc <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x1c>
			value = -value;
	} else if (fplus)
     1da:	0a09      	lsrs	r1, r1, #8
     1dc:	0bc3      	lsrs	r3, r0, #15
     1de:	428b      	cmp	r3, r1
		*buf++ = '+';
     1e0:	d301      	bcc.n	1e6 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x26>
     1e2:	03cb      	lsls	r3, r1, #15
	else if (fspace)
     1e4:	1ac0      	subs	r0, r0, r3
     1e6:	4152      	adcs	r2, r2
     1e8:	0b83      	lsrs	r3, r0, #14
     1ea:	428b      	cmp	r3, r1
		*buf++ = ' ';
     1ec:	d301      	bcc.n	1f2 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x32>
     1ee:	038b      	lsls	r3, r1, #14
     1f0:	1ac0      	subs	r0, r0, r3
     1f2:	4152      	adcs	r2, r2
     1f4:	0b43      	lsrs	r3, r0, #13
     1f6:	428b      	cmp	r3, r1
     1f8:	d301      	bcc.n	1fe <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x3e>
#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
		*buf++ = '-';
     1fa:	034b      	lsls	r3, r1, #13
     1fc:	1ac0      	subs	r0, r0, r3
     1fe:	4152      	adcs	r2, r2
     200:	0b03      	lsrs	r3, r0, #12
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     202:	428b      	cmp	r3, r1
     204:	d301      	bcc.n	20a <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x4a>
     206:	030b      	lsls	r3, r1, #12
     208:	1ac0      	subs	r0, r0, r3
     20a:	4152      	adcs	r2, r2

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     20c:	0ac3      	lsrs	r3, r0, #11
     20e:	428b      	cmp	r3, r1
	} else if (fplus)
		*buf++ = '+';
	else if (fspace)
		*buf++ = ' ';

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
     210:	d301      	bcc.n	216 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x56>
     212:	02cb      	lsls	r3, r1, #11
     214:	1ac0      	subs	r0, r0, r3

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     216:	4152      	adcs	r2, r2
					prefix = 1;
     218:	0a83      	lsrs	r3, r0, #10

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     21a:	428b      	cmp	r3, r1
     21c:	d301      	bcc.n	222 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x62>
     21e:	028b      	lsls	r3, r1, #10
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     220:	1ac0      	subs	r0, r0, r3
     222:	4152      	adcs	r2, r2
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     224:	0a43      	lsrs	r3, r0, #9
     226:	428b      	cmp	r3, r1
     228:	d301      	bcc.n	22e <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x6e>
     22a:	024b      	lsls	r3, r1, #9
				double_temp = u.i;
     22c:	1ac0      	subs	r0, r0, r3
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     22e:	4152      	adcs	r2, r2
     230:	0a03      	lsrs	r3, r0, #8
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     232:	428b      	cmp	r3, r1
     234:	d301      	bcc.n	23a <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x7a>
     236:	020b      	lsls	r3, r1, #8
     238:	1ac0      	subs	r0, r0, r3
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     23a:	4152      	adcs	r2, r2
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     23c:	d2cd      	bcs.n	1da <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x1a>
	fract = (double_temp << 11) & ~HIGHBIT64;
     23e:	09c3      	lsrs	r3, r0, #7
     240:	428b      	cmp	r3, r1
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     242:	d301      	bcc.n	248 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x88>
	fract = (double_temp << 11) & ~HIGHBIT64;
     244:	01cb      	lsls	r3, r1, #7
     246:	1ac0      	subs	r0, r0, r3
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     248:	4152      	adcs	r2, r2
     24a:	0983      	lsrs	r3, r0, #6
		if (!fract) {
     24c:	428b      	cmp	r3, r1
     24e:	d301      	bcc.n	254 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0x94>
     250:	018b      	lsls	r3, r1, #6
     252:	1ac0      	subs	r0, r0, r3
			*buf++ = sign ? '-' : '+';
     254:	4152      	adcs	r2, r2
     256:	0943      	lsrs	r3, r0, #5
     258:	428b      	cmp	r3, r1
     25a:	d301      	bcc.n	260 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xa0>
     25c:	014b      	lsls	r3, r1, #5
			*buf++ = 'I';
     25e:	1ac0      	subs	r0, r0, r3
     260:	4152      	adcs	r2, r2
			*buf++ = 'N';
     262:	0903      	lsrs	r3, r0, #4
     264:	428b      	cmp	r3, r1
			*buf++ = 'F';
     266:	d301      	bcc.n	26c <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xac>
     268:	010b      	lsls	r3, r1, #4
     26a:	1ac0      	subs	r0, r0, r3
     26c:	4152      	adcs	r2, r2
		} else {
			*buf++ = 'N';
     26e:	08c3      	lsrs	r3, r0, #3
			*buf++ = 'a';
     270:	428b      	cmp	r3, r1
			*buf++ = sign ? '-' : '+';
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
     272:	d301      	bcc.n	278 <CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE+0xb8>
			*buf++ = 'a';
			*buf++ = 'N';
     274:	00cb      	lsls	r3, r1, #3
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
     276:	1ac0      	subs	r0, r0, r3
			*buf++ = 'N';
     278:	4152      	adcs	r2, r2
     27a:	0883      	lsrs	r3, r0, #2
     27c:	428b      	cmp	r3, r1
		}
		*buf = 0;
     27e:	d301      	bcc.n	284 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x4>
		return buf - start;
     280:	008b      	lsls	r3, r1, #2
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
			*buf++ = 'N';
		}
		*buf = 0;
     282:	1ac0      	subs	r0, r0, r3
		return buf - start;
     284:	4152      	adcs	r2, r2
     286:	0843      	lsrs	r3, r0, #1
	}

	if ((exp | fract) != 0) {
     288:	428b      	cmp	r3, r1
     28a:	d301      	bcc.n	290 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x10>
     28c:	004b      	lsls	r3, r1, #1
     28e:	1ac0      	subs	r0, r0, r3
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     290:	4152      	adcs	r2, r2
		fract |= HIGHBIT64;
     292:	1a41      	subs	r1, r0, r1
		*buf = 0;
		return buf - start;
	}

	if ((exp | fract) != 0) {
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     294:	d200      	bcs.n	298 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x18>
		fract |= HIGHBIT64;
     296:	4601      	mov	r1, r0
     298:	4152      	adcs	r2, r2
     29a:	4610      	mov	r0, r2
     29c:	4770      	bx	lr
		decexp = true;		/* Wasn't zero */
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
     29e:	e7ff      	b.n	2a0 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x20>
     2a0:	b501      	push	{r0, lr}
		*buf++ = '-';
     2a2:	2000      	movs	r0, #0
     2a4:	f000 f8f0 	bl	488 <__aeabi_idiv0>
	} else if (fplus) {
     2a8:	bd02      	pop	{r1, pc}
     2aa:	46c0      	nop			; (mov r8, r8)

000002ac <__aeabi_uidivmod>:
     2ac:	2900      	cmp	r1, #0
     2ae:	d0f7      	beq.n	2a0 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x20>
		*buf++ = '+';
     2b0:	e776      	b.n	1a0 <__aeabi_uidiv>
     2b2:	4770      	bx	lr

000002b4 <__aeabi_idiv>:
	} else if (fspace) {
     2b4:	4603      	mov	r3, r0
     2b6:	430b      	orrs	r3, r1
     2b8:	d47f      	bmi.n	3ba <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x79>
     2ba:	2200      	movs	r2, #0
		*buf++ = ' ';
     2bc:	0843      	lsrs	r3, r0, #1
     2be:	428b      	cmp	r3, r1
     2c0:	d374      	bcc.n	3ac <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x6b>
     2c2:	0903      	lsrs	r3, r0, #4
     2c4:	428b      	cmp	r3, r1
	}

	decexp = 0;
     2c6:	d35f      	bcc.n	388 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x47>
     2c8:	0a03      	lsrs	r3, r0, #8
	while (exp <= -3) {
     2ca:	428b      	cmp	r3, r1
     2cc:	d344      	bcc.n	358 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x17>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     2ce:	0b03      	lsrs	r3, r0, #12
     2d0:	428b      	cmp	r3, r1
     2d2:	d328      	bcc.n	326 <__aeabi_idiv+0x72>
     2d4:	0c03      	lsrs	r3, r0, #16
     2d6:	428b      	cmp	r3, r1
			_rlrshift(&fract);
     2d8:	d30d      	bcc.n	2f6 <__aeabi_idiv+0x42>
     2da:	22ff      	movs	r2, #255	; 0xff
     2dc:	0209      	lsls	r1, r1, #8
			exp++;
     2de:	ba12      	rev	r2, r2
     2e0:	0c03      	lsrs	r3, r0, #16
		}
		fract *= 5;
     2e2:	428b      	cmp	r3, r1
     2e4:	d302      	bcc.n	2ec <__aeabi_idiv+0x38>
     2e6:	1212      	asrs	r2, r2, #8
     2e8:	0209      	lsls	r1, r1, #8
		exp++;
		decexp--;
     2ea:	d065      	beq.n	3b8 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x77>
	while (exp <= -3) {
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
     2ec:	0b03      	lsrs	r3, r0, #12
     2ee:	428b      	cmp	r3, r1
		exp++;
		decexp--;
     2f0:	d319      	bcc.n	326 <__aeabi_idiv+0x72>
     2f2:	e000      	b.n	2f6 <__aeabi_idiv+0x42>
     2f4:	0a09      	lsrs	r1, r1, #8

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     2f6:	0bc3      	lsrs	r3, r0, #15
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
		exp++;
     2f8:	428b      	cmp	r3, r1
		decexp--;

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     2fa:	d301      	bcc.n	300 <__aeabi_idiv+0x4c>
     2fc:	03cb      	lsls	r3, r1, #15
			fract <<= 1;
     2fe:	1ac0      	subs	r0, r0, r3
     300:	4152      	adcs	r2, r2
			exp--;
     302:	0b83      	lsrs	r3, r0, #14
     304:	428b      	cmp	r3, r1
     306:	d301      	bcc.n	30c <__aeabi_idiv+0x58>
     308:	038b      	lsls	r3, r1, #14
     30a:	1ac0      	subs	r0, r0, r3
     30c:	4152      	adcs	r2, r2
     30e:	0b43      	lsrs	r3, r0, #13
     310:	428b      	cmp	r3, r1
     312:	d301      	bcc.n	318 <__aeabi_idiv+0x64>
     314:	034b      	lsls	r3, r1, #13
     316:	1ac0      	subs	r0, r0, r3
     318:	4152      	adcs	r2, r2
     31a:	0b03      	lsrs	r3, r0, #12
     31c:	428b      	cmp	r3, r1
     31e:	d301      	bcc.n	324 <__aeabi_idiv+0x70>
     320:	030b      	lsls	r3, r1, #12
     322:	1ac0      	subs	r0, r0, r3
     324:	4152      	adcs	r2, r2
     326:	0ac3      	lsrs	r3, r0, #11
     328:	428b      	cmp	r3, r1
     32a:	d301      	bcc.n	330 <__aeabi_idiv+0x7c>
     32c:	02cb      	lsls	r3, r1, #11
     32e:	1ac0      	subs	r0, r0, r3
     330:	4152      	adcs	r2, r2
     332:	0a83      	lsrs	r3, r0, #10
		}
	}

	while (exp > 0) {
     334:	428b      	cmp	r3, r1
     336:	d301      	bcc.n	33c <__aeabi_idiv+0x88>
		_ldiv5(&fract);
     338:	028b      	lsls	r3, r1, #10
     33a:	1ac0      	subs	r0, r0, r3
     33c:	4152      	adcs	r2, r2
		exp--;
		decexp++;
     33e:	0a43      	lsrs	r3, r0, #9
     340:	428b      	cmp	r3, r1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     342:	d301      	bcc.n	348 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x7>
	}

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
     344:	024b      	lsls	r3, r1, #9
		}
	}

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
     346:	1ac0      	subs	r0, r0, r3
		decexp++;
     348:	4152      	adcs	r2, r2
     34a:	0a03      	lsrs	r3, r0, #8
     34c:	428b      	cmp	r3, r1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     34e:	d301      	bcc.n	354 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x13>
     350:	020b      	lsls	r3, r1, #8
			fract <<= 1;
     352:	1ac0      	subs	r0, r0, r3
     354:	4152      	adcs	r2, r2
			exp--;
     356:	d2cd      	bcs.n	2f4 <__aeabi_idiv+0x40>
     358:	09c3      	lsrs	r3, r0, #7
     35a:	428b      	cmp	r3, r1
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     35c:	d301      	bcc.n	362 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x21>
		exp++;
     35e:	01cb      	lsls	r3, r1, #7
			exp--;
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     360:	1ac0      	subs	r0, r0, r3
     362:	4152      	adcs	r2, r2
			fract <<= 1;
			exp--;
		}
	}

	while (exp < (0 + 4)) {
     364:	0983      	lsrs	r3, r0, #6
     366:	428b      	cmp	r3, r1
		_rlrshift(&fract);
		exp++;
	}

	if (precision < 0)
     368:	d301      	bcc.n	36e <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x2d>
     36a:	018b      	lsls	r3, r1, #6
		precision = 6;		/* Default precision if none given */
     36c:	1ac0      	subs	r0, r0, r3
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
     36e:	4152      	adcs	r2, r2
     370:	0943      	lsrs	r3, r0, #5
     372:	428b      	cmp	r3, r1
     374:	d301      	bcc.n	37a <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x39>
     376:	014b      	lsls	r3, r1, #5
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     378:	1ac0      	subs	r0, r0, r3
     37a:	4152      	adcs	r2, r2
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
     37c:	0903      	lsrs	r3, r0, #4
     37e:	428b      	cmp	r3, r1
     380:	d301      	bcc.n	386 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x45>
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     382:	010b      	lsls	r3, r1, #4
     384:	1ac0      	subs	r0, r0, r3
     386:	4152      	adcs	r2, r2
     388:	08c3      	lsrs	r3, r0, #3
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     38a:	428b      	cmp	r3, r1
     38c:	d301      	bcc.n	392 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x51>
     38e:	00cb      	lsls	r3, r1, #3
     390:	1ac0      	subs	r0, r0, r3
     392:	4152      	adcs	r2, r2
     394:	0883      	lsrs	r3, r0, #2
     396:	428b      	cmp	r3, r1
			if (c == 'g')
     398:	d301      	bcc.n	39e <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x5d>
     39a:	008b      	lsls	r3, r1, #2
				c = 'e';
			else
				c = 'E';
     39c:	1ac0      	subs	r0, r0, r3
     39e:	4152      	adcs	r2, r2
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     3a0:	0843      	lsrs	r3, r0, #1
     3a2:	428b      	cmp	r3, r1
				c = 'E';
		} else
			c = 'f';
	}

	if (c == 'f') {
     3a4:	d301      	bcc.n	3aa <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x69>
     3a6:	004b      	lsls	r3, r1, #1
		exp = precision + decexp;
     3a8:	1ac0      	subs	r0, r0, r3
     3aa:	4152      	adcs	r2, r2
     3ac:	1a41      	subs	r1, r0, r1
     3ae:	d200      	bcs.n	3b2 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x71>
     3b0:	4601      	mov	r1, r0
     3b2:	4152      	adcs	r2, r2
     3b4:	4610      	mov	r0, r2
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
			if (c == 'g')
				c = 'e';
     3b6:	4770      	bx	lr
	if (c == 'f') {
		exp = precision + decexp;
		if (exp < 0)
			exp = 0;
	} else
		exp = precision + 1;
     3b8:	e05d      	b.n	476 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x76>
	digit_count = 16;
     3ba:	0fca      	lsrs	r2, r1, #31
     3bc:	d000      	beq.n	3c0 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x7f>
     3be:	4249      	negs	r1, r1
     3c0:	1003      	asrs	r3, r0, #32
     3c2:	d300      	bcc.n	3c6 <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0x85>
	if (exp > 16)
		exp = 16;

	ltemp = 0x0800000000000000;
     3c4:	4240      	negs	r0, r0
     3c6:	4053      	eors	r3, r2
     3c8:	2200      	movs	r2, #0
     3ca:	469c      	mov	ip, r3
     3cc:	0903      	lsrs	r3, r0, #4
	while (exp--) {
     3ce:	428b      	cmp	r3, r1
     3d0:	d32d      	bcc.n	42e <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2e>
		_ldiv5(&ltemp);
     3d2:	0a03      	lsrs	r3, r0, #8
     3d4:	428b      	cmp	r3, r1
     3d6:	d312      	bcc.n	3fe <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xbd>
		_rlrshift(&ltemp);
     3d8:	22fc      	movs	r2, #252	; 0xfc
     3da:	0189      	lsls	r1, r1, #6
     3dc:	ba12      	rev	r2, r2
     3de:	0a03      	lsrs	r3, r0, #8
	}

	fract += ltemp;
     3e0:	428b      	cmp	r3, r1
     3e2:	d30c      	bcc.n	3fe <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xbd>
     3e4:	0189      	lsls	r1, r1, #6
     3e6:	1192      	asrs	r2, r2, #6
     3e8:	428b      	cmp	r3, r1
     3ea:	d308      	bcc.n	3fe <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xbd>
     3ec:	0189      	lsls	r1, r1, #6
     3ee:	1192      	asrs	r2, r2, #6
	if ((fract >> 32) & 0xF0000000) {
     3f0:	428b      	cmp	r3, r1
     3f2:	d304      	bcc.n	3fe <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xbd>
		_ldiv5(&fract);
     3f4:	0189      	lsls	r1, r1, #6
     3f6:	d03a      	beq.n	46e <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x6e>
     3f8:	1192      	asrs	r2, r2, #6
		_rlrshift(&fract);
     3fa:	e000      	b.n	3fe <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xbd>
     3fc:	0989      	lsrs	r1, r1, #6
     3fe:	09c3      	lsrs	r3, r0, #7
		decexp++;
     400:	428b      	cmp	r3, r1
     402:	d301      	bcc.n	408 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x8>
     404:	01cb      	lsls	r3, r1, #7
	}

	if (c == 'f') {
     406:	1ac0      	subs	r0, r0, r3
     408:	4152      	adcs	r2, r2
		if (decexp > 0) {
     40a:	0983      	lsrs	r3, r0, #6
     40c:	428b      	cmp	r3, r1
     40e:	d301      	bcc.n	414 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x14>
     410:	018b      	lsls	r3, r1, #6
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
     412:	1ac0      	subs	r0, r0, r3
     414:	4152      	adcs	r2, r2
     416:	0943      	lsrs	r3, r0, #5
     418:	428b      	cmp	r3, r1
     41a:	d301      	bcc.n	420 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x20>
     41c:	014b      	lsls	r3, r1, #5
		decexp++;
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
     41e:	1ac0      	subs	r0, r0, r3
     420:	4152      	adcs	r2, r2
     422:	0903      	lsrs	r3, r0, #4
     424:	428b      	cmp	r3, r1
     426:	d301      	bcc.n	42c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x2c>
				*buf++ = _get_digit(&fract, &digit_count);
				decexp--;
			}
		} else
			*buf++ = '0';
     428:	010b      	lsls	r3, r1, #4
     42a:	1ac0      	subs	r0, r0, r3
     42c:	4152      	adcs	r2, r2
		if (falt || (precision > 0))
     42e:	08c3      	lsrs	r3, r0, #3
     430:	428b      	cmp	r3, r1
     432:	d301      	bcc.n	438 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x38>
     434:	00cb      	lsls	r3, r1, #3
     436:	1ac0      	subs	r0, r0, r3
     438:	4152      	adcs	r2, r2
			*buf++ = '.';
     43a:	0883      	lsrs	r3, r0, #2
     43c:	428b      	cmp	r3, r1
     43e:	d301      	bcc.n	444 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x44>
     440:	008b      	lsls	r3, r1, #2
     442:	1ac0      	subs	r0, r0, r3
		while (precision-- > 0) {
     444:	4152      	adcs	r2, r2
     446:	d2d9      	bcs.n	3fc <CONFIG_BLUETOOTH_DEVICE_APPEARANCE+0xbb>
     448:	0843      	lsrs	r3, r0, #1
			if (decexp < 0) {
     44a:	428b      	cmp	r3, r1
     44c:	d301      	bcc.n	452 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x52>
     44e:	004b      	lsls	r3, r1, #1
				*buf++ = '0';
     450:	1ac0      	subs	r0, r0, r3
     452:	4152      	adcs	r2, r2
				decexp++;
     454:	1a41      	subs	r1, r0, r1
     456:	d200      	bcs.n	45a <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x5a>
     458:	4601      	mov	r1, r0
     45a:	4663      	mov	r3, ip
			} else
				*buf++ = _get_digit(&fract, &digit_count);
     45c:	4152      	adcs	r2, r2
     45e:	105b      	asrs	r3, r3, #1
     460:	4610      	mov	r0, r2
     462:	d301      	bcc.n	468 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x68>
     464:	4240      	negs	r0, r0
     466:	2b00      	cmp	r3, #0
     468:	d500      	bpl.n	46c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x6c>
     46a:	4249      	negs	r1, r1
     46c:	4770      	bx	lr
     46e:	4663      	mov	r3, ip
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
     470:	105b      	asrs	r3, r3, #1
     472:	d300      	bcc.n	476 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x76>
     474:	4240      	negs	r0, r0
     476:	b501      	push	{r0, lr}
     478:	2000      	movs	r0, #0
		if (*buf++ != '0')
			decexp--;
     47a:	f000 f805 	bl	488 <__aeabi_idiv0>
     47e:	bd02      	pop	{r1, pc}

00000480 <__aeabi_idivmod>:
     480:	2900      	cmp	r1, #0
     482:	d0f8      	beq.n	476 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x76>
     484:	e716      	b.n	2b4 <__aeabi_idiv>
		if (falt || (precision > 0))
     486:	4770      	bx	lr

00000488 <__aeabi_idiv0>:
     488:	4770      	bx	lr
     48a:	46c0      	nop			; (mov r8, r8)

0000048c <__aeabi_uldivmod>:
			} else
				*buf++ = _get_digit(&fract, &digit_count);
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
     48c:	2b00      	cmp	r3, #0
			decexp--;
		if (falt || (precision > 0))
     48e:	d111      	bne.n	4b4 <__aeabi_uldivmod+0x28>
     490:	2a00      	cmp	r2, #0
			*buf++ = '.';
     492:	d10f      	bne.n	4b4 <__aeabi_uldivmod+0x28>
     494:	2900      	cmp	r1, #0
     496:	d100      	bne.n	49a <__aeabi_uldivmod+0xe>
     498:	2800      	cmp	r0, #0
		while (precision-- > 0)
     49a:	d002      	beq.n	4a2 <__aeabi_uldivmod+0x16>
     49c:	2100      	movs	r1, #0
			*buf++ = _get_digit(&fract, &digit_count);
     49e:	43c9      	mvns	r1, r1
     4a0:	1c08      	adds	r0, r1, #0
     4a2:	b407      	push	{r0, r1, r2}
     4a4:	4802      	ldr	r0, [pc, #8]	; (4b0 <__aeabi_uldivmod+0x24>)
     4a6:	a102      	add	r1, pc, #8	; (adr r1, 4b0 <__aeabi_uldivmod+0x24>)
     4a8:	1840      	adds	r0, r0, r1
     4aa:	9002      	str	r0, [sp, #8]
	}

	if (prune_zero) {
     4ac:	bd03      	pop	{r0, r1, pc}
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	ffffffd9 	.word	0xffffffd9
		while (*--buf == '0')
     4b4:	b403      	push	{r0, r1}
     4b6:	4668      	mov	r0, sp
     4b8:	b501      	push	{r0, lr}
     4ba:	9802      	ldr	r0, [sp, #8]
			;
		if (*buf != '.')
     4bc:	f000 f856 	bl	56c <__udivmoddi4>
     4c0:	9b01      	ldr	r3, [sp, #4]
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
     4c2:	469e      	mov	lr, r3
     4c4:	b002      	add	sp, #8
     4c6:	bc0c      	pop	{r2, r3}
     4c8:	4770      	bx	lr
     4ca:	46c0      	nop			; (mov r8, r8)

000004cc <__aeabi_lmul>:
		*buf++ = (char) c;
		if (decexp < 0) {
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (*buf != '.')
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
		*buf++ = (char) c;
     4ce:	464f      	mov	r7, r9
     4d0:	4646      	mov	r6, r8
		if (decexp < 0) {
     4d2:	b4c0      	push	{r6, r7}
     4d4:	0416      	lsls	r6, r2, #16
			decexp = -decexp;
     4d6:	0c36      	lsrs	r6, r6, #16
     4d8:	4699      	mov	r9, r3
			*buf++ = '-';
     4da:	0033      	movs	r3, r6
     4dc:	0405      	lsls	r5, r0, #16
		} else
			*buf++ = '+';
     4de:	0c2c      	lsrs	r4, r5, #16
     4e0:	0c07      	lsrs	r7, r0, #16
		*buf++ = (char) ((decexp / 100) + '0');
     4e2:	0c15      	lsrs	r5, r2, #16
     4e4:	4363      	muls	r3, r4
     4e6:	437e      	muls	r6, r7
     4e8:	436f      	muls	r7, r5
     4ea:	4365      	muls	r5, r4
     4ec:	0c1c      	lsrs	r4, r3, #16
		decexp %= 100;
     4ee:	19ad      	adds	r5, r5, r6
     4f0:	1964      	adds	r4, r4, r5
     4f2:	469c      	mov	ip, r3
     4f4:	42a6      	cmp	r6, r4
     4f6:	d903      	bls.n	500 <__aeabi_lmul+0x34>
		*buf++ = (char) ((decexp / 10) + '0');
     4f8:	2380      	movs	r3, #128	; 0x80
     4fa:	025b      	lsls	r3, r3, #9
     4fc:	4698      	mov	r8, r3
     4fe:	4447      	add	r7, r8
     500:	4663      	mov	r3, ip
     502:	0c25      	lsrs	r5, r4, #16
		decexp %= 10;
		*buf++ = (char) (decexp + '0');
     504:	19ef      	adds	r7, r5, r7
     506:	041d      	lsls	r5, r3, #16
     508:	464b      	mov	r3, r9
     50a:	434a      	muls	r2, r1
     50c:	4343      	muls	r3, r0
     50e:	0c2d      	lsrs	r5, r5, #16
     510:	0424      	lsls	r4, r4, #16
	}
	*buf = 0;
     512:	1964      	adds	r4, r4, r5

	return buf - start;
     514:	1899      	adds	r1, r3, r2
		decexp %= 100;
		*buf++ = (char) ((decexp / 10) + '0');
		decexp %= 10;
		*buf++ = (char) (decexp + '0');
	}
	*buf = 0;
     516:	19c9      	adds	r1, r1, r7

	return buf - start;
     518:	0020      	movs	r0, r4
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
     51a:	bc0c      	pop	{r2, r3}
     51c:	4690      	mov	r8, r2
					prefix = 1;
     51e:	4699      	mov	r9, r3
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
     520:	bdf0      	pop	{r4, r5, r6, r7, pc}
     522:	46c0      	nop			; (mov r8, r8)

00000524 <__ffssi2>:
     524:	b510      	push	{r4, lr}
     526:	2300      	movs	r3, #0
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     528:	2800      	cmp	r0, #0
     52a:	d002      	beq.n	532 <__ffssi2+0xe>
     52c:	f000 f8ea 	bl	704 <__ctzsi2>
     530:	1c43      	adds	r3, r0, #1
					prefix = 1;
				need_justifying = true;
				break;

			case 'n':
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
     532:	0018      	movs	r0, r3
     534:	bd10      	pop	{r4, pc}
				*int32ptr_temp = count;
     536:	46c0      	nop			; (mov r8, r8)

00000538 <__popcountsi2>:
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <__popcountsi2+0x28>)
     53a:	0842      	lsrs	r2, r0, #1
				break;
     53c:	401a      	ands	r2, r3

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     53e:	1a82      	subs	r2, r0, r2
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
				*int32ptr_temp = count;
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     540:	0010      	movs	r0, r2
     542:	4b08      	ldr	r3, [pc, #32]	; (564 <__popcountsi2+0x2c>)
     544:	0892      	lsrs	r2, r2, #2
     546:	4018      	ands	r0, r3

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     548:	4013      	ands	r3, r2
     54a:	18c0      	adds	r0, r0, r3
		*buf++ = '0';
     54c:	0903      	lsrs	r3, r0, #4
     54e:	1818      	adds	r0, r3, r0
     550:	4b05      	ldr	r3, [pc, #20]	; (568 <__popcountsi2+0x30>)
     552:	4018      	ands	r0, r3
     554:	0203      	lsls	r3, r0, #8
		if (!value) {
     556:	1818      	adds	r0, r3, r0
     558:	0403      	lsls	r3, r0, #16
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
     55a:	18c0      	adds	r0, r0, r3
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     55c:	0e00      	lsrs	r0, r0, #24

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
				if (precision != -1)
     55e:	4770      	bx	lr
     560:	55555555 	.word	0x55555555
					pad = ' ';
     564:	33333333 	.word	0x33333333

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
	char *buf0 = buf;

	if (alt_form) {
     568:	0f0f0f0f 	.word	0x0f0f0f0f

0000056c <__udivmoddi4>:
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
			return 1;
		}
	}
	return (buf - buf0) + _to_x(buf, value, 8, precision);
     56c:	b5f0      	push	{r4, r5, r6, r7, lr}
     56e:	464d      	mov	r5, r9
     570:	4656      	mov	r6, sl
     572:	4644      	mov	r4, r8
     574:	465f      	mov	r7, fp
     576:	b4f0      	push	{r4, r5, r6, r7}
     578:	4692      	mov	sl, r2
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
     57a:	b083      	sub	sp, #12
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     57c:	0004      	movs	r4, r0
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     57e:	000d      	movs	r5, r1
     580:	4699      	mov	r9, r3
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
     582:	428b      	cmp	r3, r1
     584:	d82f      	bhi.n	5e6 <__udivmoddi4+0x7a>
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     586:	d02c      	beq.n	5e2 <__udivmoddi4+0x76>
	int len;
	char *buf0 = buf;

	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
     588:	4649      	mov	r1, r9
     58a:	4650      	mov	r0, sl
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     58c:	f000 f8ae 	bl	6ec <__clzdi2>
	if (alt_form) {
		*buf++ = '0';
		*buf++ = 'x';
	}

	len = _to_x(buf, value, 16, precision);
     590:	0029      	movs	r1, r5
     592:	0006      	movs	r6, r0
     594:	0020      	movs	r0, r4
     596:	f000 f8a9 	bl	6ec <__clzdi2>
	if (prefix == 'X') {
		_uc(buf0);
	}

	return len + (buf - buf0);
     59a:	1a33      	subs	r3, r6, r0
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     59c:	4698      	mov	r8, r3
     59e:	3b20      	subs	r3, #32
     5a0:	469b      	mov	fp, r3
					if (cptr_temp[c] == '\0') {
     5a2:	d500      	bpl.n	5a6 <__udivmoddi4+0x3a>
     5a4:	e074      	b.n	690 <__udivmoddi4+0x124>
     5a6:	4653      	mov	r3, sl
						break;
					}
				}
				if ((precision >= 0) && (precision < c))
     5a8:	465a      	mov	r2, fp
     5aa:	4093      	lsls	r3, r2
     5ac:	001f      	movs	r7, r3
     5ae:	4653      	mov	r3, sl
     5b0:	4642      	mov	r2, r8
     5b2:	4093      	lsls	r3, r2
     5b4:	001e      	movs	r6, r3
     5b6:	42af      	cmp	r7, r5
					c = precision;
				if (c > 0) {
     5b8:	d829      	bhi.n	60e <__udivmoddi4+0xa2>
     5ba:	d026      	beq.n	60a <__udivmoddi4+0x9e>
     5bc:	465b      	mov	r3, fp
					memcpy(buf, cptr_temp, (size_t) c);
     5be:	1ba4      	subs	r4, r4, r6
     5c0:	41bd      	sbcs	r5, r7
     5c2:	2b00      	cmp	r3, #0
     5c4:	da00      	bge.n	5c8 <__udivmoddi4+0x5c>
     5c6:	e079      	b.n	6bc <__udivmoddi4+0x150>
					need_justifying = true;
				}
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5c8:	2200      	movs	r2, #0
     5ca:	2300      	movs	r3, #0
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     5cc:	9200      	str	r2, [sp, #0]
     5ce:	9301      	str	r3, [sp, #4]
     5d0:	2301      	movs	r3, #1
     5d2:	465a      	mov	r2, fp
     5d4:	4093      	lsls	r3, r2
     5d6:	9301      	str	r3, [sp, #4]
     5d8:	2301      	movs	r3, #1
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     5da:	4642      	mov	r2, r8
     5dc:	4093      	lsls	r3, r2
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5de:	9300      	str	r3, [sp, #0]
     5e0:	e019      	b.n	616 <__udivmoddi4+0xaa>
		   int alt_form, int precision, int prefix)
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
     5e2:	4282      	cmp	r2, r0
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     5e4:	d9d0      	bls.n	588 <__udivmoddi4+0x1c>
     5e6:	2200      	movs	r2, #0
		   int alt_form, int precision, int prefix)
{
	int len;
	char *buf0 = buf;

	if (alt_form) {
     5e8:	2300      	movs	r3, #0
     5ea:	9200      	str	r2, [sp, #0]
		*buf++ = '0';
     5ec:	9301      	str	r3, [sp, #4]
     5ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		*buf++ = 'x';
     5f0:	2b00      	cmp	r3, #0
     5f2:	d001      	beq.n	5f8 <__udivmoddi4+0x8c>
     5f4:	601c      	str	r4, [r3, #0]
     5f6:	605d      	str	r5, [r3, #4]
     5f8:	9800      	ldr	r0, [sp, #0]
	}

	len = _to_x(buf, value, 16, precision);
     5fa:	9901      	ldr	r1, [sp, #4]
     5fc:	b003      	add	sp, #12
     5fe:	bc3c      	pop	{r2, r3, r4, r5}
     600:	4690      	mov	r8, r2
     602:	4699      	mov	r9, r3
	if (prefix == 'X') {
     604:	46a2      	mov	sl, r4
     606:	46ab      	mov	fp, r5
     608:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_uc(buf0);
	}

	return len + (buf - buf0);
     60a:	42a3      	cmp	r3, r4
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     60c:	d9d6      	bls.n	5bc <__udivmoddi4+0x50>
	len = _to_x(buf, value, 16, precision);
	if (prefix == 'X') {
		_uc(buf0);
	}

	return len + (buf - buf0);
     60e:	2200      	movs	r2, #0
     610:	2300      	movs	r3, #0
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     612:	9200      	str	r2, [sp, #0]
				need_justifying = true;
				if (precision != -1)
     614:	9301      	str	r3, [sp, #4]
     616:	4643      	mov	r3, r8
					pad = ' ';
     618:	2b00      	cmp	r3, #0
     61a:	d0e8      	beq.n	5ee <__udivmoddi4+0x82>
     61c:	07fb      	lsls	r3, r7, #31
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
		if (*buf >= 'a' && *buf <= 'z') {
     61e:	0872      	lsrs	r2, r6, #1
     620:	431a      	orrs	r2, r3
     622:	4646      	mov	r6, r8
     624:	087b      	lsrs	r3, r7, #1
			*buf += 'A' - 'a';
     626:	e00e      	b.n	646 <__udivmoddi4+0xda>
     628:	42ab      	cmp	r3, r5
     62a:	d101      	bne.n	630 <__udivmoddi4+0xc4>
#define EOF  -1
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
     62c:	42a2      	cmp	r2, r4
     62e:	d80c      	bhi.n	64a <__udivmoddi4+0xde>
     630:	1aa4      	subs	r4, r4, r2
     632:	419d      	sbcs	r5, r3
     634:	2001      	movs	r0, #1
			case '%':
				if ((*func)('%', dest) == EOF) {
					return EOF;
				}

				count++;
     636:	1924      	adds	r4, r4, r4
     638:	416d      	adcs	r5, r5
     63a:	2100      	movs	r1, #0
     63c:	3e01      	subs	r6, #1
     63e:	1824      	adds	r4, r4, r0
     640:	414d      	adcs	r5, r1
     642:	2e00      	cmp	r6, #0
	if (alt_form) {
		*buf++ = '0';
		if (!value) {
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
			return 1;
     644:	d006      	beq.n	654 <__udivmoddi4+0xe8>

			if (c >= MAXFLD + 1)
				return EOF;

			if (need_justifying) {
				if (c < width) {
     646:	42ab      	cmp	r3, r5
     648:	d9ee      	bls.n	628 <__udivmoddi4+0xbc>
     64a:	3e01      	subs	r6, #1
					if (fminus)	{
     64c:	1924      	adds	r4, r4, r4
     64e:	416d      	adcs	r5, r5
     650:	2e00      	cmp	r6, #0
						/* Left justify? */
						for (i = c; i < width; i++)
							buf[i] = ' ';
     652:	d1f8      	bne.n	646 <__udivmoddi4+0xda>
     654:	465b      	mov	r3, fp
     656:	9800      	ldr	r0, [sp, #0]

			if (need_justifying) {
				if (c < width) {
					if (fminus)	{
						/* Left justify? */
						for (i = c; i < width; i++)
     658:	9901      	ldr	r1, [sp, #4]
     65a:	1900      	adds	r0, r0, r4
     65c:	4169      	adcs	r1, r5
     65e:	2b00      	cmp	r3, #0
     660:	db22      	blt.n	6a8 <__udivmoddi4+0x13c>
     662:	002b      	movs	r3, r5
     664:	465a      	mov	r2, fp
     666:	40d3      	lsrs	r3, r2
     668:	002a      	movs	r2, r5
     66a:	4644      	mov	r4, r8
     66c:	40e2      	lsrs	r2, r4
     66e:	001c      	movs	r4, r3
							buf[i] = ' ';
					} else {
						/* Right justify */
						(void) memmove((buf + (width - c)), buf, (size_t) (c
     670:	465b      	mov	r3, fp
     672:	0015      	movs	r5, r2
     674:	2b00      	cmp	r3, #0
     676:	db2c      	blt.n	6d2 <__udivmoddi4+0x166>
     678:	0026      	movs	r6, r4
     67a:	409e      	lsls	r6, r3
     67c:	0033      	movs	r3, r6
     67e:	0026      	movs	r6, r4
										+ 1));
						if (pad == ' ')
     680:	4647      	mov	r7, r8
     682:	40be      	lsls	r6, r7
     684:	0032      	movs	r2, r6
							prefix = 0;
     686:	1a80      	subs	r0, r0, r2
						c = width - c + prefix;
     688:	4199      	sbcs	r1, r3
						for (i = prefix; i < c; i++)
     68a:	9000      	str	r0, [sp, #0]
     68c:	9101      	str	r1, [sp, #4]
							buf[i] = pad;
     68e:	e7ae      	b.n	5ee <__udivmoddi4+0x82>
     690:	4642      	mov	r2, r8
     692:	2320      	movs	r3, #32
     694:	1a9b      	subs	r3, r3, r2
						(void) memmove((buf + (width - c)), buf, (size_t) (c
										+ 1));
						if (pad == ' ')
							prefix = 0;
						c = width - c + prefix;
						for (i = prefix; i < c; i++)
     696:	4652      	mov	r2, sl
     698:	40da      	lsrs	r2, r3
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
					if ((*func)(*cptr, dest) == EOF)
     69a:	4641      	mov	r1, r8
     69c:	0013      	movs	r3, r2
     69e:	464a      	mov	r2, r9
     6a0:	408a      	lsls	r2, r1
     6a2:	0017      	movs	r7, r2
     6a4:	431f      	orrs	r7, r3
     6a6:	e782      	b.n	5ae <__udivmoddi4+0x42>
     6a8:	4642      	mov	r2, r8
     6aa:	2320      	movs	r3, #32
     6ac:	1a9b      	subs	r3, r3, r2
							buf[i] = pad;
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
     6ae:	002a      	movs	r2, r5
     6b0:	4646      	mov	r6, r8
     6b2:	409a      	lsls	r2, r3
     6b4:	0023      	movs	r3, r4
     6b6:	40f3      	lsrs	r3, r6
     6b8:	4313      	orrs	r3, r2
     6ba:	e7d5      	b.n	668 <__udivmoddi4+0xfc>

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
     6bc:	4642      	mov	r2, r8
     6be:	2320      	movs	r3, #32
     6c0:	2100      	movs	r1, #0
     6c2:	1a9b      	subs	r3, r3, r2
     6c4:	2200      	movs	r2, #0
     6c6:	9100      	str	r1, [sp, #0]
     6c8:	9201      	str	r2, [sp, #4]
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     6ca:	2201      	movs	r2, #1
     6cc:	40da      	lsrs	r2, r3

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
     6ce:	9201      	str	r2, [sp, #4]
     6d0:	e782      	b.n	5d8 <__udivmoddi4+0x6c>
     6d2:	4642      	mov	r2, r8
			*buf++ = '.';
		while (precision-- > 0)
			*buf++ = _get_digit(&fract, &digit_count);
	}

	if (prune_zero) {
     6d4:	2320      	movs	r3, #32
     6d6:	0026      	movs	r6, r4
     6d8:	1a9b      	subs	r3, r3, r2
     6da:	40de      	lsrs	r6, r3
     6dc:	002f      	movs	r7, r5
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
     6de:	46b4      	mov	ip, r6
     6e0:	4097      	lsls	r7, r2
				}
			}
		}
	}
	return count;
}
     6e2:	4666      	mov	r6, ip
     6e4:	003b      	movs	r3, r7
     6e6:	4333      	orrs	r3, r6
     6e8:	e7c9      	b.n	67e <__udivmoddi4+0x112>
     6ea:	46c0      	nop			; (mov r8, r8)

000006ec <__clzdi2>:
     6ec:	b510      	push	{r4, lr}
     6ee:	2900      	cmp	r1, #0
     6f0:	d103      	bne.n	6fa <__clzdi2+0xe>
     6f2:	f000 f827 	bl	744 <__clzsi2>
     6f6:	3020      	adds	r0, #32
     6f8:	e002      	b.n	700 <__clzdi2+0x14>
     6fa:	1c08      	adds	r0, r1, #0
     6fc:	f000 f822 	bl	744 <__clzsi2>
     700:	bd10      	pop	{r4, pc}
     702:	46c0      	nop			; (mov r8, r8)

00000704 <__ctzsi2>:
     704:	4241      	negs	r1, r0
     706:	4008      	ands	r0, r1
     708:	211c      	movs	r1, #28
     70a:	2301      	movs	r3, #1
     70c:	041b      	lsls	r3, r3, #16
     70e:	4298      	cmp	r0, r3
     710:	d301      	bcc.n	716 <__ctzsi2+0x12>
     712:	0c00      	lsrs	r0, r0, #16
     714:	3910      	subs	r1, #16
     716:	0a1b      	lsrs	r3, r3, #8
     718:	4298      	cmp	r0, r3
     71a:	d301      	bcc.n	720 <__ctzsi2+0x1c>
     71c:	0a00      	lsrs	r0, r0, #8
     71e:	3908      	subs	r1, #8
     720:	091b      	lsrs	r3, r3, #4
     722:	4298      	cmp	r0, r3
     724:	d301      	bcc.n	72a <__ctzsi2+0x26>
     726:	0900      	lsrs	r0, r0, #4
     728:	3904      	subs	r1, #4
     72a:	a202      	add	r2, pc, #8	; (adr r2, 734 <__ctzsi2+0x30>)
     72c:	5c10      	ldrb	r0, [r2, r0]
     72e:	1a40      	subs	r0, r0, r1
     730:	4770      	bx	lr
     732:	46c0      	nop			; (mov r8, r8)
     734:	1d1d1c1b 	.word	0x1d1d1c1b
     738:	1e1e1e1e 	.word	0x1e1e1e1e
     73c:	1f1f1f1f 	.word	0x1f1f1f1f
     740:	1f1f1f1f 	.word	0x1f1f1f1f

00000744 <__clzsi2>:
     744:	211c      	movs	r1, #28
     746:	2301      	movs	r3, #1
     748:	041b      	lsls	r3, r3, #16
     74a:	4298      	cmp	r0, r3
     74c:	d301      	bcc.n	752 <__clzsi2+0xe>
     74e:	0c00      	lsrs	r0, r0, #16
     750:	3910      	subs	r1, #16
     752:	0a1b      	lsrs	r3, r3, #8
     754:	4298      	cmp	r0, r3
     756:	d301      	bcc.n	75c <__clzsi2+0x18>
     758:	0a00      	lsrs	r0, r0, #8
     75a:	3908      	subs	r1, #8
     75c:	091b      	lsrs	r3, r3, #4
     75e:	4298      	cmp	r0, r3
     760:	d301      	bcc.n	766 <__clzsi2+0x22>
     762:	0900      	lsrs	r0, r0, #4
     764:	3904      	subs	r1, #4
     766:	a202      	add	r2, pc, #8	; (adr r2, 770 <__clzsi2+0x2c>)
     768:	5c10      	ldrb	r0, [r2, r0]
     76a:	1840      	adds	r0, r0, r1
     76c:	4770      	bx	lr
     76e:	46c0      	nop			; (mov r8, r8)
     770:	02020304 	.word	0x02020304
     774:	01010101 	.word	0x01010101
	...

00000780 <disconnected>:
		printk("Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     780:	b510      	push	{r4, lr}
	printk("Disconnected (reason %u)\n", reason);
     782:	4806      	ldr	r0, [pc, #24]	; (79c <disconnected+0x1c>)
     784:	f000 fff0 	bl	1768 <printk>

	if (default_conn) {
     788:	4c05      	ldr	r4, [pc, #20]	; (7a0 <disconnected+0x20>)
     78a:	6820      	ldr	r0, [r4, #0]
     78c:	2800      	cmp	r0, #0
     78e:	d003      	beq.n	798 <disconnected+0x18>
		bt_conn_unref(default_conn);
     790:	f004 f95b 	bl	4a4a <bt_conn_unref>
		default_conn = NULL;
     794:	2300      	movs	r3, #0
     796:	6023      	str	r3, [r4, #0]
	}
}
     798:	bd10      	pop	{r4, pc}
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	000141fc 	.word	0x000141fc
     7a0:	20001ee4 	.word	0x20001ee4

000007a4 <connected>:
static const struct bt_data sd[] = {
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};

static void connected(struct bt_conn *conn, u8_t err)
{
     7a4:	b510      	push	{r4, lr}
	if (err) {
     7a6:	2900      	cmp	r1, #0
     7a8:	d003      	beq.n	7b2 <connected+0xe>
		printk("Connection failed (err %u)\n", err);
     7aa:	4806      	ldr	r0, [pc, #24]	; (7c4 <connected+0x20>)
     7ac:	f000 ffdc 	bl	1768 <printk>
     7b0:	e006      	b.n	7c0 <connected+0x1c>
	} else {
		default_conn = bt_conn_ref(conn);
     7b2:	f004 f943 	bl	4a3c <bt_conn_ref>
     7b6:	4b04      	ldr	r3, [pc, #16]	; (7c8 <connected+0x24>)
     7b8:	6018      	str	r0, [r3, #0]
		printk("Connected\n");
     7ba:	4804      	ldr	r0, [pc, #16]	; (7cc <connected+0x28>)
     7bc:	f000 ffd4 	bl	1768 <printk>
	}
}
     7c0:	bd10      	pop	{r4, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	00014216 	.word	0x00014216
     7c8:	20001ee4 	.word	0x20001ee4
     7cc:	00014232 	.word	0x00014232

000007d0 <bt_ready>:
	.connected = connected,
	.disconnected = disconnected,
};

static void bt_ready(int err)
{
     7d0:	b530      	push	{r4, r5, lr}
     7d2:	0005      	movs	r5, r0
     7d4:	b087      	sub	sp, #28
	if (err) {
     7d6:	2800      	cmp	r0, #0
     7d8:	d002      	beq.n	7e0 <bt_ready+0x10>
		printk("Bluetooth init failed (err %d)\n", err);
     7da:	0001      	movs	r1, r0
     7dc:	4815      	ldr	r0, [pc, #84]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     7de:	e021      	b.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
		return;
	}

	printk("Bluetooth initialized\n");
     7e0:	4815      	ldr	r0, [pc, #84]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     7e2:	f000 ffc1 	bl	1768 <printk>

	hrs_init(0x01);
     7e6:	2001      	movs	r0, #1
     7e8:	f000 f8a6 	bl	938 <hrs_init>
	bas_init();
	dis_init(CONFIG_SOC, "Manufacturer");

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     7ec:	ac03      	add	r4, sp, #12
	}

	printk("Bluetooth initialized\n");

	hrs_init(0x01);
	bas_init();
     7ee:	f000 f92f 	bl	a50 <bas_init>
	dis_init(CONFIG_SOC, "Manufacturer");
     7f2:	4912      	ldr	r1, [pc, #72]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)
     7f4:	4812      	ldr	r0, [pc, #72]	; (840 <CONFIG_ISR_STACK_SIZE+0x40>)
     7f6:	f000 f905 	bl	a04 <dis_init>

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     7fa:	220c      	movs	r2, #12
     7fc:	0029      	movs	r1, r5
     7fe:	0020      	movs	r0, r4
     800:	f000 fdda 	bl	13b8 <memset>
     804:	22a0      	movs	r2, #160	; 0xa0
     806:	2301      	movs	r3, #1
     808:	8062      	strh	r2, [r4, #2]
     80a:	3250      	adds	r2, #80	; 0x50
     80c:	7023      	strb	r3, [r4, #0]
     80e:	80a2      	strh	r2, [r4, #4]
     810:	490c      	ldr	r1, [pc, #48]	; (844 <CONFIG_ISR_STACK_SIZE+0x44>)
     812:	9300      	str	r3, [sp, #0]
     814:	3aee      	subs	r2, #238	; 0xee
     816:	4b0c      	ldr	r3, [pc, #48]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
     818:	0020      	movs	r0, r4
     81a:	f003 fbab 	bl	3f74 <bt_le_adv_start>
     81e:	1e01      	subs	r1, r0, #0
			      sd, ARRAY_SIZE(sd));
	if (err) {
     820:	d003      	beq.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
		printk("Advertising failed to start (err %d)\n", err);
     822:	480a      	ldr	r0, [pc, #40]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     824:	f000 ffa0 	bl	1768 <printk>
     828:	e002      	b.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
		return;
	}

	printk("Advertising successfully started\n");
     82a:	4809      	ldr	r0, [pc, #36]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     82c:	f000 ff9c 	bl	1768 <printk>
}
     830:	b007      	add	sp, #28
     832:	bd30      	pop	{r4, r5, pc}
     834:	0001423d 	.word	0x0001423d
     838:	0001425d 	.word	0x0001425d
     83c:	00014274 	.word	0x00014274
     840:	00014281 	.word	0x00014281
     844:	00014348 	.word	0x00014348
     848:	00014340 	.word	0x00014340
     84c:	0001428f 	.word	0x0001428f
     850:	000142b5 	.word	0x000142b5

00000854 <auth_cancel>:

static void auth_cancel(struct bt_conn *conn)
{
     854:	b530      	push	{r4, r5, lr}
     856:	b091      	sub	sp, #68	; 0x44
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     858:	f004 f8fc 	bl	4a54 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[7];

	switch (addr->type) {
     85c:	7803      	ldrb	r3, [r0, #0]
     85e:	0004      	movs	r4, r0
     860:	ad07      	add	r5, sp, #28
     862:	2b00      	cmp	r3, #0
     864:	d003      	beq.n	86e <auth_cancel+0x1a>
     866:	2b01      	cmp	r3, #1
     868:	d106      	bne.n	878 <auth_cancel+0x24>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     86a:	4911      	ldr	r1, [pc, #68]	; (8b0 <auth_cancel+0x5c>)
     86c:	e000      	b.n	870 <auth_cancel+0x1c>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     86e:	4911      	ldr	r1, [pc, #68]	; (8b4 <auth_cancel+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     870:	0028      	movs	r0, r5
     872:	f000 fd31 	bl	12d8 <strcpy>
     876:	e004      	b.n	882 <auth_cancel+0x2e>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     878:	4a0f      	ldr	r2, [pc, #60]	; (8b8 <auth_cancel+0x64>)
     87a:	2107      	movs	r1, #7
     87c:	0028      	movs	r0, r5
     87e:	f000 ff7f 	bl	1780 <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     882:	79a3      	ldrb	r3, [r4, #6]
     884:	9505      	str	r5, [sp, #20]
     886:	7862      	ldrb	r2, [r4, #1]
     888:	211b      	movs	r1, #27
     88a:	9204      	str	r2, [sp, #16]
     88c:	78a2      	ldrb	r2, [r4, #2]
     88e:	a809      	add	r0, sp, #36	; 0x24
     890:	9203      	str	r2, [sp, #12]
     892:	78e2      	ldrb	r2, [r4, #3]
     894:	9202      	str	r2, [sp, #8]
     896:	7922      	ldrb	r2, [r4, #4]
     898:	9201      	str	r2, [sp, #4]
     89a:	7962      	ldrb	r2, [r4, #5]
     89c:	9200      	str	r2, [sp, #0]
     89e:	4a07      	ldr	r2, [pc, #28]	; (8bc <auth_cancel+0x68>)
     8a0:	f000 ff6e 	bl	1780 <snprintk>

	printk("Pairing cancelled: %s\n", addr);
     8a4:	a909      	add	r1, sp, #36	; 0x24
     8a6:	4806      	ldr	r0, [pc, #24]	; (8c0 <auth_cancel+0x6c>)
     8a8:	f000 ff5e 	bl	1768 <printk>
}
     8ac:	b011      	add	sp, #68	; 0x44
     8ae:	bd30      	pop	{r4, r5, pc}
     8b0:	000142de 	.word	0x000142de
     8b4:	000142d7 	.word	0x000142d7
     8b8:	000142e5 	.word	0x000142e5
     8bc:	000142ec 	.word	0x000142ec
     8c0:	0001430f 	.word	0x0001430f

000008c4 <main>:
static struct bt_conn_auth_cb auth_cb_display = {
	.cancel = auth_cancel,
};

void main(void)
{
     8c4:	b510      	push	{r4, lr}
	int err;

	err = bt_enable(bt_ready);
     8c6:	480c      	ldr	r0, [pc, #48]	; (8f8 <main+0x34>)
     8c8:	f003 fad2 	bl	3e70 <bt_enable>
     8cc:	1e01      	subs	r1, r0, #0
	if (err) {
     8ce:	d003      	beq.n	8d8 <main+0x14>
		printk("Bluetooth init failed (err %d)\n", err);
     8d0:	480a      	ldr	r0, [pc, #40]	; (8fc <main+0x38>)
     8d2:	f000 ff49 	bl	1768 <printk>
		hrs_notify();

		/* Battery level simulation */
		bas_notify();
	}
}
     8d6:	bd10      	pop	{r4, pc}
	if (err) {
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	bt_conn_cb_register(&conn_callbacks);
     8d8:	4809      	ldr	r0, [pc, #36]	; (900 <main+0x3c>)
     8da:	f003 fd85 	bl	43e8 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
     8de:	4809      	ldr	r0, [pc, #36]	; (904 <main+0x40>)
     8e0:	f004 fa26 	bl	4d30 <bt_conn_auth_cb_register>

	/* Implement notification. At the moment there is no suitable way
	 * of starting delayed work so we do it here
	 */
	while (1) {
		k_sleep(MSEC_PER_SEC);
     8e4:	20fa      	movs	r0, #250	; 0xfa
     8e6:	0080      	lsls	r0, r0, #2
     8e8:	f012 ffe0 	bl	138ac <k_sleep>

		/* Heartrate measurements simulation */
		hrs_notify();
     8ec:	f000 f830 	bl	950 <hrs_notify>

		/* Battery level simulation */
		bas_notify();
     8f0:	f000 f8b6 	bl	a60 <bas_notify>
     8f4:	e7f6      	b.n	8e4 <main+0x20>
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	000007d1 	.word	0x000007d1
     8fc:	0001423d 	.word	0x0001423d
     900:	20000010 	.word	0x20000010
     904:	20000040 	.word	0x20000040

00000908 <hrmc_ccc_cfg_changed>:
static u8_t hrs_blsc;

static void hrmc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 u16_t value)
{
	simulate_hrm = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
     908:	3901      	subs	r1, #1
     90a:	424b      	negs	r3, r1
     90c:	414b      	adcs	r3, r1
     90e:	4a01      	ldr	r2, [pc, #4]	; (914 <hrmc_ccc_cfg_changed+0xc>)
     910:	7013      	strb	r3, [r2, #0]
}
     912:	4770      	bx	lr
     914:	200007b8 	.word	0x200007b8

00000918 <read_blsc>:

static ssize_t read_blsc(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     918:	b530      	push	{r4, r5, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
     91a:	2501      	movs	r5, #1
	simulate_hrm = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
}

static ssize_t read_blsc(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     91c:	b085      	sub	sp, #20
     91e:	ac08      	add	r4, sp, #32
     920:	8824      	ldrh	r4, [r4, #0]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
     922:	9502      	str	r5, [sp, #8]
     924:	4d03      	ldr	r5, [pc, #12]	; (934 <read_blsc+0x1c>)
     926:	9400      	str	r4, [sp, #0]
     928:	9501      	str	r5, [sp, #4]
     92a:	f006 f8db 	bl	6ae4 <bt_gatt_attr_read>
				 sizeof(hrs_blsc));
}
     92e:	b005      	add	sp, #20
     930:	bd30      	pop	{r4, r5, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	200007b9 	.word	0x200007b9

00000938 <hrs_init>:
};

static struct bt_gatt_service hrs_svc = BT_GATT_SERVICE(attrs);

void hrs_init(u8_t blsc)
{
     938:	b510      	push	{r4, lr}
	hrs_blsc = blsc;
     93a:	4b03      	ldr	r3, [pc, #12]	; (948 <hrs_init+0x10>)
     93c:	7018      	strb	r0, [r3, #0]

	bt_gatt_service_register(&hrs_svc);
     93e:	4803      	ldr	r0, [pc, #12]	; (94c <hrs_init+0x14>)
     940:	f006 f9d4 	bl	6cec <bt_gatt_service_register>
}
     944:	bd10      	pop	{r4, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	200007b9 	.word	0x200007b9
     94c:	2000024c 	.word	0x2000024c

00000950 <hrs_notify>:

void hrs_notify(void)
{
     950:	b510      	push	{r4, lr}
	static u8_t hrm[2];

	/* Heartrate measurements simulation */
	if (!simulate_hrm) {
     952:	4b0c      	ldr	r3, [pc, #48]	; (984 <hrs_notify+0x34>)
     954:	781b      	ldrb	r3, [r3, #0]
     956:	2b00      	cmp	r3, #0
     958:	d012      	beq.n	980 <hrs_notify+0x30>
		return;
	}

	heartrate++;
     95a:	4b0b      	ldr	r3, [pc, #44]	; (988 <hrs_notify+0x38>)
     95c:	781a      	ldrb	r2, [r3, #0]
     95e:	3201      	adds	r2, #1
     960:	b2d2      	uxtb	r2, r2
	if (heartrate == 160) {
     962:	2aa0      	cmp	r2, #160	; 0xa0
     964:	d100      	bne.n	968 <hrs_notify+0x18>
		heartrate = 90;
     966:	225a      	movs	r2, #90	; 0x5a
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
     968:	2106      	movs	r1, #6
		return;
	}

	heartrate++;
	if (heartrate == 160) {
		heartrate = 90;
     96a:	701a      	strb	r2, [r3, #0]
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
     96c:	4a07      	ldr	r2, [pc, #28]	; (98c <hrs_notify+0x3c>)
	hrm[1] = heartrate;
     96e:	781b      	ldrb	r3, [r3, #0]
	heartrate++;
	if (heartrate == 160) {
		heartrate = 90;
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
     970:	7011      	strb	r1, [r2, #0]
	hrm[1] = heartrate;

	bt_gatt_notify(NULL, &attrs[2], &hrm, sizeof(hrm));
     972:	4907      	ldr	r1, [pc, #28]	; (990 <hrs_notify+0x40>)
	if (heartrate == 160) {
		heartrate = 90;
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
	hrm[1] = heartrate;
     974:	7053      	strb	r3, [r2, #1]

	bt_gatt_notify(NULL, &attrs[2], &hrm, sizeof(hrm));
     976:	3128      	adds	r1, #40	; 0x28
     978:	2302      	movs	r3, #2
     97a:	2000      	movs	r0, #0
     97c:	f006 fa4c 	bl	6e18 <bt_gatt_notify>
}
     980:	bd10      	pop	{r4, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	200007b8 	.word	0x200007b8
     988:	20000054 	.word	0x20000054
     98c:	200007ba 	.word	0x200007ba
     990:	200000f4 	.word	0x200000f4

00000994 <read_manuf>:
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     994:	b5f0      	push	{r4, r5, r6, r7, lr}
     996:	b087      	sub	sp, #28
     998:	001e      	movs	r6, r3
     99a:	ab0c      	add	r3, sp, #48	; 0x30
     99c:	881f      	ldrh	r7, [r3, #0]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     99e:	4b0a      	ldr	r3, [pc, #40]	; (9c8 <read_manuf+0x34>)
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     9a0:	0005      	movs	r5, r0
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     9a2:	681c      	ldr	r4, [r3, #0]
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     9a4:	9104      	str	r1, [sp, #16]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     9a6:	0020      	movs	r0, r4
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     9a8:	9205      	str	r2, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
				 strlen(dis_manuf));
     9aa:	f000 fc9e 	bl	12ea <strlen>

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
     9ae:	b280      	uxth	r0, r0
     9b0:	9002      	str	r0, [sp, #8]
     9b2:	9401      	str	r4, [sp, #4]
     9b4:	9700      	str	r7, [sp, #0]
     9b6:	0033      	movs	r3, r6
     9b8:	9a05      	ldr	r2, [sp, #20]
     9ba:	9904      	ldr	r1, [sp, #16]
     9bc:	0028      	movs	r0, r5
     9be:	f006 f891 	bl	6ae4 <bt_gatt_attr_read>
				 strlen(dis_manuf));
}
     9c2:	b007      	add	sp, #28
     9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	200007c8 	.word	0x200007c8

000009cc <read_model>:
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ce:	b087      	sub	sp, #28
     9d0:	001e      	movs	r6, r3
     9d2:	ab0c      	add	r3, sp, #48	; 0x30
     9d4:	881f      	ldrh	r7, [r3, #0]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     9d6:	4b0a      	ldr	r3, [pc, #40]	; (a00 <read_model+0x34>)
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     9d8:	0005      	movs	r5, r0
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     9da:	681c      	ldr	r4, [r3, #0]
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     9dc:	9104      	str	r1, [sp, #16]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     9de:	0020      	movs	r0, r4
static const char *dis_manuf;

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     9e0:	9205      	str	r2, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
				 strlen(dis_model));
     9e2:	f000 fc82 	bl	12ea <strlen>

static ssize_t read_model(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
     9e6:	b280      	uxth	r0, r0
     9e8:	9002      	str	r0, [sp, #8]
     9ea:	9401      	str	r4, [sp, #4]
     9ec:	9700      	str	r7, [sp, #0]
     9ee:	0033      	movs	r3, r6
     9f0:	9a05      	ldr	r2, [sp, #20]
     9f2:	9904      	ldr	r1, [sp, #16]
     9f4:	0028      	movs	r0, r5
     9f6:	f006 f875 	bl	6ae4 <bt_gatt_attr_read>
				 strlen(dis_model));
}
     9fa:	b007      	add	sp, #28
     9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	200007cc 	.word	0x200007cc

00000a04 <dis_init>:
};

static struct bt_gatt_service dis_svc = BT_GATT_SERVICE(attrs);

void dis_init(const char *model, const char *manuf)
{
     a04:	b510      	push	{r4, lr}
	dis_model = model;
     a06:	4b04      	ldr	r3, [pc, #16]	; (a18 <dis_init+0x14>)
     a08:	6018      	str	r0, [r3, #0]
	dis_manuf = manuf;
     a0a:	4b04      	ldr	r3, [pc, #16]	; (a1c <dis_init+0x18>)

	bt_gatt_service_register(&dis_svc);
     a0c:	4804      	ldr	r0, [pc, #16]	; (a20 <dis_init+0x1c>)
static struct bt_gatt_service dis_svc = BT_GATT_SERVICE(attrs);

void dis_init(const char *model, const char *manuf)
{
	dis_model = model;
	dis_manuf = manuf;
     a0e:	6019      	str	r1, [r3, #0]

	bt_gatt_service_register(&dis_svc);
     a10:	f006 f96c 	bl	6cec <bt_gatt_service_register>
}
     a14:	bd10      	pop	{r4, pc}
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	200007cc 	.word	0x200007cc
     a1c:	200007c8 	.word	0x200007c8
     a20:	20000258 	.word	0x20000258

00000a24 <blvl_ccc_cfg_changed>:
static u8_t battery = 100;

static void blvl_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 u16_t value)
{
	simulate_blvl = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
     a24:	3901      	subs	r1, #1
     a26:	424b      	negs	r3, r1
     a28:	414b      	adcs	r3, r1
     a2a:	4a01      	ldr	r2, [pc, #4]	; (a30 <blvl_ccc_cfg_changed+0xc>)
     a2c:	7013      	strb	r3, [r2, #0]
}
     a2e:	4770      	bx	lr
     a30:	200007dc 	.word	0x200007dc

00000a34 <read_blvl>:

static ssize_t read_blvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     a34:	b530      	push	{r4, r5, lr}
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     a36:	2501      	movs	r5, #1
	simulate_blvl = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
}

static ssize_t read_blvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     a38:	b085      	sub	sp, #20
     a3a:	ac08      	add	r4, sp, #32
     a3c:	8824      	ldrh	r4, [r4, #0]
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     a3e:	9502      	str	r5, [sp, #8]
     a40:	68cd      	ldr	r5, [r1, #12]
     a42:	9400      	str	r4, [sp, #0]
     a44:	9501      	str	r5, [sp, #4]
     a46:	f006 f84d 	bl	6ae4 <bt_gatt_attr_read>
				 sizeof(*value));
}
     a4a:	b005      	add	sp, #20
     a4c:	bd30      	pop	{r4, r5, pc}
	...

00000a50 <bas_init>:
};

static struct bt_gatt_service bas_svc = BT_GATT_SERVICE(attrs);

void bas_init(void)
{
     a50:	b510      	push	{r4, lr}
	bt_gatt_service_register(&bas_svc);
     a52:	4802      	ldr	r0, [pc, #8]	; (a5c <bas_init+0xc>)
     a54:	f006 f94a 	bl	6cec <bt_gatt_service_register>
}
     a58:	bd10      	pop	{r4, pc}
     a5a:	46c0      	nop			; (mov r8, r8)
     a5c:	20000268 	.word	0x20000268

00000a60 <bas_notify>:

void bas_notify(void)
{
     a60:	b510      	push	{r4, lr}
	if (!simulate_blvl) {
     a62:	4b09      	ldr	r3, [pc, #36]	; (a88 <bas_notify+0x28>)
     a64:	781b      	ldrb	r3, [r3, #0]
     a66:	2b00      	cmp	r3, #0
     a68:	d00d      	beq.n	a86 <bas_notify+0x26>
		return;
	}

	battery--;
     a6a:	4a08      	ldr	r2, [pc, #32]	; (a8c <bas_notify+0x2c>)
     a6c:	7813      	ldrb	r3, [r2, #0]
     a6e:	3b01      	subs	r3, #1
     a70:	b2db      	uxtb	r3, r3
	if (!battery) {
     a72:	2b00      	cmp	r3, #0
     a74:	d100      	bne.n	a78 <bas_notify+0x18>
		/* Software eco battery charger */
		battery = 100;
     a76:	2364      	movs	r3, #100	; 0x64
	}

	bt_gatt_notify(NULL, &attrs[2], &battery, sizeof(battery));
     a78:	4905      	ldr	r1, [pc, #20]	; (a90 <bas_notify+0x30>)
	}

	battery--;
	if (!battery) {
		/* Software eco battery charger */
		battery = 100;
     a7a:	7013      	strb	r3, [r2, #0]
	}

	bt_gatt_notify(NULL, &attrs[2], &battery, sizeof(battery));
     a7c:	3128      	adds	r1, #40	; 0x28
     a7e:	2301      	movs	r3, #1
     a80:	2000      	movs	r0, #0
     a82:	f006 f9c9 	bl	6e18 <bt_gatt_notify>
}
     a86:	bd10      	pop	{r4, pc}
     a88:	200007dc 	.word	0x200007dc
     a8c:	20000264 	.word	0x20000264
     a90:	200001f8 	.word	0x200001f8

00000a94 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
     a94:	b570      	push	{r4, r5, r6, lr}
     a96:	0004      	movs	r4, r0
     a98:	4d07      	ldr	r5, [pc, #28]	; (ab8 <console_out+0x24>)
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     a9a:	280a      	cmp	r0, #10
     a9c:	d104      	bne.n	aa8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
     a9e:	6828      	ldr	r0, [r5, #0]
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
     aa0:	210d      	movs	r1, #13
     aa2:	6843      	ldr	r3, [r0, #4]
     aa4:	685b      	ldr	r3, [r3, #4]
     aa6:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
     aa8:	6828      	ldr	r0, [r5, #0]
     aaa:	b2e1      	uxtb	r1, r4
     aac:	6843      	ldr	r3, [r0, #4]
     aae:	685b      	ldr	r3, [r3, #4]
     ab0:	4798      	blx	r3

	return c;
}
     ab2:	0020      	movs	r0, r4
     ab4:	bd70      	pop	{r4, r5, r6, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	200007e0 	.word	0x200007e0

00000abc <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     abc:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
     abe:	4802      	ldr	r0, [pc, #8]	; (ac8 <uart_console_hook_install+0xc>)
     ac0:	f000 fd1a 	bl	14f8 <__printk_hook_install>
}
     ac4:	bd10      	pop	{r4, pc}
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	00000a95 	.word	0x00000a95

00000acc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     acc:	b510      	push	{r4, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     ace:	4804      	ldr	r0, [pc, #16]	; (ae0 <uart_console_init+0x14>)
     ad0:	f012 f912 	bl	12cf8 <device_get_binding>
     ad4:	4b03      	ldr	r3, [pc, #12]	; (ae4 <uart_console_init+0x18>)
     ad6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     ad8:	f7ff fff0 	bl	abc <uart_console_hook_install>

	return 0;
}
     adc:	2000      	movs	r0, #0
     ade:	bd10      	pop	{r4, pc}
     ae0:	00014358 	.word	0x00014358
     ae4:	200007e0 	.word	0x200007e0

00000ae8 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     ae8:	6803      	ldr	r3, [r0, #0]
     aea:	689b      	ldr	r3, [r3, #8]
     aec:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
     aee:	001a      	movs	r2, r3
     af0:	32fc      	adds	r2, #252	; 0xfc
     af2:	68d0      	ldr	r0, [r2, #12]
     af4:	2800      	cmp	r0, #0
     af6:	d006      	beq.n	b06 <uart_nrf5_poll_in+0x1e>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
     af8:	2000      	movs	r0, #0
     afa:	60d0      	str	r0, [r2, #12]

	/* got a character */
	*c = (unsigned char)uart->RXD;
     afc:	22a3      	movs	r2, #163	; 0xa3
     afe:	00d2      	lsls	r2, r2, #3
     b00:	589b      	ldr	r3, [r3, r2]
     b02:	700b      	strb	r3, [r1, #0]

	return 0;
     b04:	e001      	b.n	b0a <uart_nrf5_poll_in+0x22>
static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);

	if (!uart->EVENTS_RXDRDY) {
		return -1;
     b06:	2001      	movs	r0, #1
     b08:	4240      	negs	r0, r0

	/* got a character */
	*c = (unsigned char)uart->RXD;

	return 0;
}
     b0a:	4770      	bx	lr

00000b0c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     b0c:	6803      	ldr	r3, [r0, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
     b0e:	4a06      	ldr	r2, [pc, #24]	; (b28 <uart_nrf5_poll_out+0x1c>)
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     b10:	689b      	ldr	r3, [r3, #8]
     b12:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
     b14:	5099      	str	r1, [r3, r2]

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
     b16:	33fc      	adds	r3, #252	; 0xfc
     b18:	6a1a      	ldr	r2, [r3, #32]
     b1a:	2a00      	cmp	r2, #0
     b1c:	d0fc      	beq.n	b18 <uart_nrf5_poll_out+0xc>
	}

	uart->EVENTS_TXDRDY = 0;
     b1e:	2200      	movs	r2, #0

	return c;
}
     b20:	0008      	movs	r0, r1

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
	}

	uart->EVENTS_TXDRDY = 0;
     b22:	621a      	str	r2, [r3, #32]

	return c;
}
     b24:	4770      	bx	lr
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	0000051c 	.word	0x0000051c

00000b2c <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     b2c:	6803      	ldr	r3, [r0, #0]
	u32_t error = 0;
     b2e:	2000      	movs	r0, #0
}

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     b30:	689b      	ldr	r3, [r3, #8]
     b32:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
     b34:	001a      	movs	r2, r3
     b36:	32fc      	adds	r2, #252	; 0xfc
     b38:	6a92      	ldr	r2, [r2, #40]	; 0x28
     b3a:	4282      	cmp	r2, r0
     b3c:	d003      	beq.n	b46 <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
     b3e:	2290      	movs	r2, #144	; 0x90
     b40:	00d2      	lsls	r2, r2, #3
     b42:	5898      	ldr	r0, [r3, r2]

		/* Clear the register */
		uart->ERRORSRC = error;
     b44:	5098      	str	r0, [r3, r2]
	}

	error = error & 0x0F;

	return error;
     b46:	230f      	movs	r3, #15
     b48:	4018      	ands	r0, r3
}
     b4a:	4770      	bx	lr

00000b4c <uart_nrf5_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
     b4e:	6803      	ldr	r3, [r0, #0]
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     b50:	0005      	movs	r5, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
     b52:	689b      	ldr	r3, [r3, #8]
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     b54:	4818      	ldr	r0, [pc, #96]	; (bb8 <uart_nrf5_init+0x6c>)
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     b56:	681c      	ldr	r4, [r3, #0]
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     b58:	f012 f8ce 	bl	12cf8 <device_get_binding>
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
     b5c:	6843      	ldr	r3, [r0, #4]
     b5e:	0006      	movs	r6, r0
     b60:	681f      	ldr	r7, [r3, #0]
     b62:	2302      	movs	r3, #2
     b64:	2209      	movs	r2, #9
     b66:	33ff      	adds	r3, #255	; 0xff
     b68:	2100      	movs	r1, #0
     b6a:	47b8      	blx	r7
     b6c:	6873      	ldr	r3, [r6, #4]
     b6e:	0030      	movs	r0, r6
     b70:	681f      	ldr	r7, [r3, #0]
     b72:	2300      	movs	r3, #0
     b74:	220b      	movs	r2, #11
     b76:	0019      	movs	r1, r3
     b78:	47b8      	blx	r7
				  (GPIO_DIR_OUT | GPIO_PUD_PULL_UP));
	(void) gpio_pin_configure(gpio_dev,
				  CONFIG_UART_NRF5_GPIO_RX_PIN,
				  (GPIO_DIR_IN));

	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
     b7a:	2209      	movs	r2, #9
     b7c:	4b0f      	ldr	r3, [pc, #60]	; (bbc <uart_nrf5_init+0x70>)
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     b7e:	21eb      	movs	r1, #235	; 0xeb
				  (GPIO_DIR_OUT | GPIO_PUD_PULL_UP));
	(void) gpio_pin_configure(gpio_dev,
				  CONFIG_UART_NRF5_GPIO_RX_PIN,
				  (GPIO_DIR_IN));

	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
     b80:	50e2      	str	r2, [r4, r3]
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
     b82:	4b0f      	ldr	r3, [pc, #60]	; (bc0 <uart_nrf5_init+0x74>)
     b84:	3202      	adds	r2, #2
     b86:	50e2      	str	r2, [r4, r3]
	uart->PSELCTS = CONFIG_UART_NRF5_GPIO_CTS_PIN;
	uart->CONFIG = (UART_CONFIG_HWFC_Enabled << UART_CONFIG_HWFC_Pos);

#endif /* CONFIG_UART_NRF5_FLOW_CONTROL */

	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
     b88:	22e1      	movs	r2, #225	; 0xe1
     b8a:	68ab      	ldr	r3, [r5, #8]
     b8c:	0252      	lsls	r2, r2, #9
     b8e:	601a      	str	r2, [r3, #0]
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     b90:	682b      	ldr	r3, [r5, #0]
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     b92:	0449      	lsls	r1, r1, #17
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     b94:	689b      	ldr	r3, [r3, #8]
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);

	uart->EVENTS_TXDRDY = 0;
     b96:	2000      	movs	r0, #0
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     b98:	681a      	ldr	r2, [r3, #0]
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     b9a:	4b0a      	ldr	r3, [pc, #40]	; (bc4 <uart_nrf5_init+0x78>)
     b9c:	50d1      	str	r1, [r2, r3]
	if (err) {
		return err;
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
     b9e:	2204      	movs	r2, #4
     ba0:	3b24      	subs	r3, #36	; 0x24
     ba2:	50e2      	str	r2, [r4, r3]

	uart->EVENTS_TXDRDY = 0;
     ba4:	0023      	movs	r3, r4
     ba6:	33fc      	adds	r3, #252	; 0xfc
     ba8:	6218      	str	r0, [r3, #32]
	uart->EVENTS_RXDRDY = 0;
     baa:	60d8      	str	r0, [r3, #12]

	uart->TASKS_STARTTX = 1;
     bac:	2301      	movs	r3, #1
     bae:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
     bb0:	6023      	str	r3, [r4, #0]

	dev->driver_api = &uart_nrf5_driver_api;
     bb2:	4b05      	ldr	r3, [pc, #20]	; (bc8 <uart_nrf5_init+0x7c>)
     bb4:	606b      	str	r3, [r5, #4]
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->irq_config_func(dev);
#endif

	return 0;
}
     bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bb8:	0001435f 	.word	0x0001435f
     bbc:	0000050c 	.word	0x0000050c
     bc0:	00000514 	.word	0x00000514
     bc4:	00000524 	.word	0x00000524
     bc8:	00014388 	.word	0x00014388

00000bcc <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
     bcc:	22a8      	movs	r2, #168	; 0xa8
     bce:	4b08      	ldr	r3, [pc, #32]	; (bf0 <rtc_compare_set+0x24>)
     bd0:	00d2      	lsls	r2, r2, #3
     bd2:	5098      	str	r0, [r3, r2]
	rtc_now = RTC_COUNTER;
     bd4:	4a07      	ldr	r2, [pc, #28]	; (bf4 <rtc_compare_set+0x28>)
     bd6:	589b      	ldr	r3, [r3, r2]
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
     bd8:	1ac0      	subs	r0, r0, r3
     bda:	0200      	lsls	r0, r0, #8
     bdc:	0a00      	lsrs	r0, r0, #8
     bde:	4b06      	ldr	r3, [pc, #24]	; (bf8 <rtc_compare_set+0x2c>)
     be0:	3802      	subs	r0, #2
     be2:	4298      	cmp	r0, r3
     be4:	d903      	bls.n	bee <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     be6:	2280      	movs	r2, #128	; 0x80
     be8:	4b04      	ldr	r3, [pc, #16]	; (bfc <rtc_compare_set+0x30>)
     bea:	0292      	lsls	r2, r2, #10
     bec:	605a      	str	r2, [r3, #4]
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
     bee:	4770      	bx	lr
     bf0:	40011000 	.word	0x40011000
     bf4:	00000504 	.word	0x00000504
     bf8:	007ffffd 	.word	0x007ffffd
     bfc:	e000e1fc 	.word	0xe000e1fc

00000c00 <rtc_announce_set_next>:

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     c00:	4b13      	ldr	r3, [pc, #76]	; (c50 <rtc_announce_set_next+0x50>)
     c02:	4a14      	ldr	r2, [pc, #80]	; (c54 <rtc_announce_set_next+0x54>)
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
     c04:	b570      	push	{r4, r5, r6, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
     c06:	58d0      	ldr	r0, [r2, r3]
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     c08:	23a3      	movs	r3, #163	; 0xa3
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     c0a:	4d13      	ldr	r5, [pc, #76]	; (c58 <rtc_announce_set_next+0x58>)

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     c0c:	005b      	lsls	r3, r3, #1
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
     c0e:	682c      	ldr	r4, [r5, #0]
     c10:	1b00      	subs	r0, r0, r4
     c12:	0200      	lsls	r0, r0, #8
     c14:	0a00      	lsrs	r0, r0, #8

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
     c16:	4298      	cmp	r0, r3
     c18:	d913      	bls.n	c42 <rtc_announce_set_next+0x42>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
     c1a:	2148      	movs	r1, #72	; 0x48
     c1c:	31ff      	adds	r1, #255	; 0xff
     c1e:	f7ff fabf 	bl	1a0 <__aeabi_uidiv>

		if (sys_elapsed > expected_sys_ticks) {
     c22:	4b0e      	ldr	r3, [pc, #56]	; (c5c <rtc_announce_set_next+0x5c>)
     c24:	681b      	ldr	r3, [r3, #0]
     c26:	4298      	cmp	r0, r3
     c28:	d900      	bls.n	c2c <rtc_announce_set_next+0x2c>
     c2a:	0018      	movs	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     c2c:	2348      	movs	r3, #72	; 0x48
     c2e:	33ff      	adds	r3, #255	; 0xff
     c30:	4343      	muls	r3, r0
     c32:	191c      	adds	r4, r3, r4
     c34:	0224      	lsls	r4, r4, #8
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     c36:	4b0a      	ldr	r3, [pc, #40]	; (c60 <rtc_announce_set_next+0x60>)

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
     c38:	0a24      	lsrs	r4, r4, #8
     c3a:	602c      	str	r4, [r5, #0]
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;

		_sys_idle_elapsed_ticks = sys_elapsed;
     c3c:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
     c3e:	f012 ff5d 	bl	13afc <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
     c42:	6828      	ldr	r0, [r5, #0]
     c44:	3048      	adds	r0, #72	; 0x48
     c46:	30ff      	adds	r0, #255	; 0xff
     c48:	f7ff ffc0 	bl	bcc <rtc_compare_set>
}
     c4c:	bd70      	pop	{r4, r5, r6, pc}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	00000504 	.word	0x00000504
     c54:	40011000 	.word	0x40011000
     c58:	200007e4 	.word	0x200007e4
     c5c:	200007e8 	.word	0x200007e8
     c60:	2000069c 	.word	0x2000069c

00000c64 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     c64:	2200      	movs	r2, #0
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
     c66:	b510      	push	{r4, lr}
	ARG_UNUSED(arg);

	RTC_CC_EVENT = 0;
     c68:	4b02      	ldr	r3, [pc, #8]	; (c74 <rtc1_nrf5_isr+0x10>)
     c6a:	645a      	str	r2, [r3, #68]	; 0x44
	rtc_announce_set_next();
     c6c:	f7ff ffc8 	bl	c00 <rtc_announce_set_next>
}
     c70:	bd10      	pop	{r4, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	400110fc 	.word	0x400110fc

00000c78 <_timer_idle_enter>:
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     c78:	4b07      	ldr	r3, [pc, #28]	; (c98 <_timer_idle_enter+0x20>)
 * c) The RTC is programmed to fire at sys tick 1 + 3 = 4 (RTC tick 400)
 *
 * @return N/A
 */
void _timer_idle_enter(s32_t sys_ticks)
{
     c7a:	b510      	push	{r4, lr}
	/* Restrict ticks to max supported by RTC without risking overflow. */
	if ((sys_ticks < 0) ||
     c7c:	4298      	cmp	r0, r3
     c7e:	d900      	bls.n	c82 <_timer_idle_enter+0xa>
	    (sys_ticks > (RTC_HALF / RTC_TICKS_PER_SYS_TICK))) {
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
     c80:	0018      	movs	r0, r3
	}

	expected_sys_ticks = sys_ticks;
     c82:	4b06      	ldr	r3, [pc, #24]	; (c9c <_timer_idle_enter+0x24>)
     c84:	6018      	str	r0, [r3, #0]

	/* If ticks is 0, the RTC interrupt handler will be set pending
	 * immediately, meaning that we will not go to sleep.
	 */
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
     c86:	2348      	movs	r3, #72	; 0x48
     c88:	33ff      	adds	r3, #255	; 0xff
     c8a:	4358      	muls	r0, r3
     c8c:	4b04      	ldr	r3, [pc, #16]	; (ca0 <_timer_idle_enter+0x28>)
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	18c0      	adds	r0, r0, r3
     c92:	f7ff ff9b 	bl	bcc <rtc_compare_set>
}
     c96:	bd10      	pop	{r4, pc}
     c98:	00006435 	.word	0x00006435
     c9c:	200007e8 	.word	0x200007e8
     ca0:	200007e4 	.word	0x200007e4

00000ca4 <_timer_idle_exit>:
{
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     ca4:	2200      	movs	r2, #0
     ca6:	4b07      	ldr	r3, [pc, #28]	; (cc4 <_timer_idle_exit+0x20>)
 * a) Notify how many sys ticks have passed, i.e., 350 - 150 / 100 = 2.
 * b) Schedule next sys tick at 400.
 *
 */
void _timer_idle_exit(void)
{
     ca8:	b510      	push	{r4, lr}
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     caa:	2180      	movs	r1, #128	; 0x80
	/* Clear the event flag and interrupt in case we woke up on the RTC
	 * interrupt. No need to run the RTC ISR since everything that needs
	 * to run in the ISR will be done in this call.
	 */
	RTC_CC_EVENT = 0;
     cac:	645a      	str	r2, [r3, #68]	; 0x44
     cae:	23c0      	movs	r3, #192	; 0xc0
     cb0:	4a05      	ldr	r2, [pc, #20]	; (cc8 <_timer_idle_exit+0x24>)
     cb2:	005b      	lsls	r3, r3, #1
     cb4:	0289      	lsls	r1, r1, #10
     cb6:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	rtc_announce_set_next();
     cb8:	f7ff ffa2 	bl	c00 <rtc_announce_set_next>

	/* After exiting idle, the kernel no longer expects more than one sys
	 * ticks to have passed when _sys_clock_tick_announce() is called.
	 */
	expected_sys_ticks = 1;
     cbc:	2201      	movs	r2, #1
     cbe:	4b03      	ldr	r3, [pc, #12]	; (ccc <_timer_idle_exit+0x28>)
     cc0:	601a      	str	r2, [r3, #0]
}
     cc2:	bd10      	pop	{r4, pc}
     cc4:	400110fc 	.word	0x400110fc
     cc8:	e000e100 	.word	0xe000e100
     ccc:	200007e8 	.word	0x200007e8

00000cd0 <_sys_clock_driver_init>:
	RTC_CC_EVENT = 0;
	rtc_announce_set_next();
}

int _sys_clock_driver_init(struct device *device)
{
     cd0:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
     cd2:	481a      	ldr	r0, [pc, #104]	; (d3c <_sys_clock_driver_init+0x6c>)
     cd4:	f012 f810 	bl	12cf8 <device_get_binding>
	if (!clock) {
     cd8:	2800      	cmp	r0, #0
     cda:	d02c      	beq.n	d36 <_sys_clock_driver_init+0x66>
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     cdc:	2400      	movs	r4, #0

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     cde:	2601      	movs	r6, #1
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
     ce0:	6843      	ldr	r3, [r0, #4]
     ce2:	2101      	movs	r1, #1
     ce4:	681b      	ldr	r3, [r3, #0]
     ce6:	4798      	blx	r3
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     ce8:	4b15      	ldr	r3, [pc, #84]	; (d40 <_sys_clock_driver_init+0x70>)
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
     cea:	2248      	movs	r2, #72	; 0x48
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
     cec:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     cee:	4b15      	ldr	r3, [pc, #84]	; (d44 <_sys_clock_driver_init+0x74>)
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
     cf0:	4d15      	ldr	r5, [pc, #84]	; (d48 <_sys_clock_driver_init+0x78>)
	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
     cf2:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
     cf4:	23a1      	movs	r3, #161	; 0xa1
     cf6:	00db      	lsls	r3, r3, #3
     cf8:	50ec      	str	r4, [r5, r3]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
     cfa:	32ff      	adds	r2, #255	; 0xff
     cfc:	3338      	adds	r3, #56	; 0x38
     cfe:	50ea      	str	r2, [r5, r3]
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
     d00:	2380      	movs	r3, #128	; 0x80
     d02:	32fe      	adds	r2, #254	; 0xfe
     d04:	025b      	lsls	r3, r3, #9
     d06:	32ff      	adds	r2, #255	; 0xff
     d08:	50ab      	str	r3, [r5, r2]
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
     d0a:	3a40      	subs	r2, #64	; 0x40
     d0c:	50ab      	str	r3, [r5, r2]

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
     d0e:	4b0f      	ldr	r3, [pc, #60]	; (d4c <_sys_clock_driver_init+0x7c>)
     d10:	2180      	movs	r1, #128	; 0x80
     d12:	645c      	str	r4, [r3, #68]	; 0x44
     d14:	23c0      	movs	r3, #192	; 0xc0
     d16:	4a0e      	ldr	r2, [pc, #56]	; (d50 <_sys_clock_driver_init+0x80>)
     d18:	005b      	lsls	r3, r3, #1
     d1a:	0289      	lsls	r1, r1, #10
     d1c:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
     d1e:	2011      	movs	r0, #17
     d20:	0022      	movs	r2, r4
     d22:	0031      	movs	r1, r6
     d24:	f011 fe5a 	bl	129dc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
     d28:	2011      	movs	r0, #17
     d2a:	f011 fe37 	bl	1299c <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
     d2e:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
     d30:	0020      	movs	r0, r4

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
	irq_enable(NRF5_IRQ_RTC1_IRQn);

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;
     d32:	602e      	str	r6, [r5, #0]

	return 0;
     d34:	e001      	b.n	d3a <_sys_clock_driver_init+0x6a>

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
	if (!clock) {
		return -1;
     d36:	2001      	movs	r0, #1
     d38:	4240      	negs	r0, r0

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
}
     d3a:	bd70      	pop	{r4, r5, r6, pc}
     d3c:	00014366 	.word	0x00014366
     d40:	200007e4 	.word	0x200007e4
     d44:	200007e8 	.word	0x200007e8
     d48:	40011000 	.word	0x40011000
     d4c:	400110fc 	.word	0x400110fc
     d50:	e000e100 	.word	0xe000e100

00000d54 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     d54:	6803      	ldr	r3, [r0, #0]
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
     d56:	b570      	push	{r4, r5, r6, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     d58:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     d5a:	2501      	movs	r5, #1
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     d5c:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     d5e:	261f      	movs	r6, #31
     d60:	6883      	ldr	r3, [r0, #8]
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     d62:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
     d64:	68dc      	ldr	r4, [r3, #12]
     d66:	0023      	movs	r3, r4
     d68:	40c3      	lsrs	r3, r0
     d6a:	422b      	tst	r3, r5
     d6c:	d008      	beq.n	d80 <gpiote_find_channel+0x2c>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
     d6e:	0003      	movs	r3, r0
     d70:	3345      	adds	r3, #69	; 0x45
     d72:	33ff      	adds	r3, #255	; 0xff
     d74:	009b      	lsls	r3, r3, #2
     d76:	589b      	ldr	r3, [r3, r2]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     d78:	0a1b      	lsrs	r3, r3, #8
     d7a:	4033      	ands	r3, r6
     d7c:	428b      	cmp	r3, r1
     d7e:	d003      	beq.n	d88 <gpiote_find_channel+0x34>
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     d80:	3001      	adds	r0, #1
     d82:	2804      	cmp	r0, #4
     d84:	d1ef      	bne.n	d66 <gpiote_find_channel+0x12>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
			return i;
		}
	}

	return -ENODEV;
     d86:	3817      	subs	r0, #23
}
     d88:	bd70      	pop	{r4, r5, r6, pc}

00000d8a <gpio_nrf5_read>:
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
     d8a:	b530      	push	{r4, r5, lr}
     d8c:	0015      	movs	r5, r2
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     d8e:	6802      	ldr	r2, [r0, #0]
     d90:	20a2      	movs	r0, #162	; 0xa2
     d92:	6892      	ldr	r2, [r2, #8]
     d94:	00c0      	lsls	r0, r0, #3
     d96:	6814      	ldr	r4, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
     d98:	5822      	ldr	r2, [r4, r0]
static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
     d9a:	2900      	cmp	r1, #0
     d9c:	d102      	bne.n	da4 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
     d9e:	40ea      	lsrs	r2, r5
     da0:	3101      	adds	r1, #1
     da2:	400a      	ands	r2, r1
	} else {
		*value = gpio->IN;
	}
	return 0;
}
     da4:	2000      	movs	r0, #0
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
     da6:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
     da8:	bd30      	pop	{r4, r5, pc}
	...

00000dac <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     dac:	6800      	ldr	r0, [r0, #0]
     dae:	6880      	ldr	r0, [r0, #8]
     db0:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
     db2:	2900      	cmp	r1, #0
     db4:	d109      	bne.n	dca <gpio_nrf5_write+0x1e>
     db6:	3101      	adds	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
     db8:	4091      	lsls	r1, r2
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		if (value) { /* 1 */
     dba:	2b00      	cmp	r3, #0
     dbc:	d002      	beq.n	dc4 <gpio_nrf5_write+0x18>
			gpio->OUTSET = BIT(pin);
     dbe:	23a1      	movs	r3, #161	; 0xa1
     dc0:	00db      	lsls	r3, r3, #3
     dc2:	e000      	b.n	dc6 <gpio_nrf5_write+0x1a>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
     dc4:	4b03      	ldr	r3, [pc, #12]	; (dd4 <gpio_nrf5_write+0x28>)
     dc6:	50c1      	str	r1, [r0, r3]
     dc8:	e001      	b.n	dce <gpio_nrf5_write+0x22>
		}
	} else {
		gpio->OUT = value;
     dca:	4a03      	ldr	r2, [pc, #12]	; (dd8 <gpio_nrf5_write+0x2c>)
     dcc:	5083      	str	r3, [r0, r2]
	}
	return 0;
}
     dce:	2000      	movs	r0, #0
     dd0:	4770      	bx	lr
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	0000050c 	.word	0x0000050c
     dd8:	00000504 	.word	0x00000504

00000ddc <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
     ddc:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     dde:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
     de0:	2a00      	cmp	r2, #0
     de2:	d007      	beq.n	df4 <gpio_nrf5_manage_callback+0x18>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
     de4:	681a      	ldr	r2, [r3, #0]
     de6:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
     de8:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
     dea:	6019      	str	r1, [r3, #0]

	if (!list->tail) {
     dec:	2a00      	cmp	r2, #0
     dee:	d119      	bne.n	e24 <gpio_nrf5_manage_callback+0x48>
		list->tail = list->head;
     df0:	6059      	str	r1, [r3, #4]
     df2:	e017      	b.n	e24 <gpio_nrf5_manage_callback+0x48>
     df4:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
     df6:	2800      	cmp	r0, #0
     df8:	d014      	beq.n	e24 <gpio_nrf5_manage_callback+0x48>
		if (test == node) {
     dfa:	4281      	cmp	r1, r0
     dfc:	d10f      	bne.n	e1e <gpio_nrf5_manage_callback+0x42>
     dfe:	685c      	ldr	r4, [r3, #4]
     e00:	6808      	ldr	r0, [r1, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
     e02:	2a00      	cmp	r2, #0
     e04:	d104      	bne.n	e10 <gpio_nrf5_manage_callback+0x34>
		list->head = node->next;
     e06:	6018      	str	r0, [r3, #0]

		/* Was node also the tail? */
		if (list->tail == node) {
     e08:	42a1      	cmp	r1, r4
     e0a:	d105      	bne.n	e18 <gpio_nrf5_manage_callback+0x3c>
			list->tail = list->head;
     e0c:	6058      	str	r0, [r3, #4]
     e0e:	e003      	b.n	e18 <gpio_nrf5_manage_callback+0x3c>
		}
	} else {
		prev_node->next = node->next;
     e10:	6010      	str	r0, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
     e12:	42a1      	cmp	r1, r4
     e14:	d100      	bne.n	e18 <gpio_nrf5_manage_callback+0x3c>
			list->tail = prev_node;
     e16:	605a      	str	r2, [r3, #4]
		}
	}

	node->next = NULL;
     e18:	2300      	movs	r3, #0
     e1a:	600b      	str	r3, [r1, #0]
     e1c:	e002      	b.n	e24 <gpio_nrf5_manage_callback+0x48>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
     e1e:	0002      	movs	r2, r0
     e20:	6800      	ldr	r0, [r0, #0]
     e22:	e7e8      	b.n	df6 <gpio_nrf5_manage_callback+0x1a>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
     e24:	2000      	movs	r0, #0
     e26:	bd10      	pop	{r4, pc}

00000e28 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
     e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     e2a:	6803      	ldr	r3, [r0, #0]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
     e2c:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     e2e:	689b      	ldr	r3, [r3, #8]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
     e30:	0017      	movs	r7, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     e32:	689d      	ldr	r5, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     e34:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
     e36:	2900      	cmp	r1, #0
     e38:	d114      	bne.n	e64 <gpio_nrf5_enable_callback+0x3c>

		i = gpiote_find_channel(dev, pin);
     e3a:	0011      	movs	r1, r2
     e3c:	f7ff ff8a 	bl	d54 <gpiote_find_channel>
     e40:	1e02      	subs	r2, r0, #0
		if (i < 0) {
     e42:	db11      	blt.n	e68 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
     e44:	2301      	movs	r3, #1
     e46:	0019      	movs	r1, r3
     e48:	40b9      	lsls	r1, r7
     e4a:	68b0      	ldr	r0, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
     e4c:	4093      	lsls	r3, r2
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
     e4e:	4301      	orrs	r1, r0
     e50:	60b1      	str	r1, [r6, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
     e52:	0011      	movs	r1, r2
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
     e54:	22c1      	movs	r2, #193	; 0xc1
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
     e56:	3140      	adds	r1, #64	; 0x40
     e58:	0089      	lsls	r1, r1, #2
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
     e5a:	0092      	lsls	r2, r2, #2
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
     e5c:	514c      	str	r4, [r1, r5]
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
	}

	return 0;
     e5e:	0020      	movs	r0, r4

		data->pin_callback_enables |= BIT(pin);
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
     e60:	50ab      	str	r3, [r5, r2]
	} else {
		return -ENOTSUP;
	}

	return 0;
     e62:	e001      	b.n	e68 <gpio_nrf5_enable_callback+0x40>
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
	} else {
		return -ENOTSUP;
     e64:	2023      	movs	r0, #35	; 0x23
     e66:	4240      	negs	r0, r0
	}

	return 0;
}
     e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000e6a <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
     e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     e6c:	6803      	ldr	r3, [r0, #0]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
     e6e:	000c      	movs	r4, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     e70:	689b      	ldr	r3, [r3, #8]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
     e72:	0016      	movs	r6, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     e74:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     e76:	6885      	ldr	r5, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
     e78:	2900      	cmp	r1, #0
     e7a:	d110      	bne.n	e9e <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
     e7c:	0011      	movs	r1, r2
     e7e:	f7ff ff69 	bl	d54 <gpiote_find_channel>
     e82:	1e03      	subs	r3, r0, #0
		if (i < 0) {
     e84:	db0d      	blt.n	ea2 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
     e86:	2301      	movs	r3, #1
     e88:	001a      	movs	r2, r3
     e8a:	40b2      	lsls	r2, r6
     e8c:	68a9      	ldr	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
     e8e:	4083      	lsls	r3, r0
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
     e90:	4391      	bics	r1, r2
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
     e92:	22c2      	movs	r2, #194	; 0xc2
     e94:	0092      	lsls	r2, r2, #2
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
     e96:	60a9      	str	r1, [r5, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
     e98:	50bb      	str	r3, [r7, r2]
	} else {
		return -ENOTSUP;
	}

	return 0;
     e9a:	0023      	movs	r3, r4
     e9c:	e001      	b.n	ea2 <gpio_nrf5_disable_callback+0x38>

		data->pin_callback_enables &= ~(BIT(pin));
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
	} else {
		return -ENOTSUP;
     e9e:	2323      	movs	r3, #35	; 0x23
     ea0:	425b      	negs	r3, r3
	}

	return 0;
}
     ea2:	0018      	movs	r0, r3
     ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000ea6 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
     ea6:	b510      	push	{r4, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
     ea8:	2200      	movs	r2, #0
     eaa:	2101      	movs	r1, #1
     eac:	2006      	movs	r0, #6
     eae:	f011 fd95 	bl	129dc <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
     eb2:	2006      	movs	r0, #6
     eb4:	f011 fd72 	bl	1299c <_arch_irq_enable>

	return 0;
}
     eb8:	2000      	movs	r0, #0
     eba:	bd10      	pop	{r4, pc}

00000ebc <gpio_nrf5_port_isr>:
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     ebc:	6803      	ldr	r3, [r0, #0]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
     ebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     ec0:	689b      	ldr	r3, [r3, #8]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
     ec2:	0004      	movs	r4, r0
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     ec4:	689b      	ldr	r3, [r3, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
     ec6:	2701      	movs	r7, #1
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     ec8:	9301      	str	r3, [sp, #4]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     eca:	2300      	movs	r3, #0
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
     ecc:	001a      	movs	r2, r3
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     ece:	6885      	ldr	r5, [r0, #8]
     ed0:	9801      	ldr	r0, [sp, #4]
     ed2:	0099      	lsls	r1, r3, #2
     ed4:	1841      	adds	r1, r0, r1
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
     ed6:	0008      	movs	r0, r1
     ed8:	30fc      	adds	r0, #252	; 0xfc
     eda:	6846      	ldr	r6, [r0, #4]
     edc:	2e00      	cmp	r6, #0
     ede:	d00a      	beq.n	ef6 <gpio_nrf5_port_isr+0x3a>
			gpiote->EVENTS_IN[i] = 0;
     ee0:	2600      	movs	r6, #0
     ee2:	6046      	str	r6, [r0, #4]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
     ee4:	20a2      	movs	r0, #162	; 0xa2
     ee6:	00c0      	lsls	r0, r0, #3
     ee8:	5809      	ldr	r1, [r1, r0]
     eea:	201f      	movs	r0, #31
     eec:	0a09      	lsrs	r1, r1, #8
     eee:	4001      	ands	r1, r0
     ef0:	0038      	movs	r0, r7
     ef2:	4088      	lsls	r0, r1
     ef4:	4302      	orrs	r2, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	u32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     ef6:	3301      	adds	r3, #1
     ef8:	2b04      	cmp	r3, #4
     efa:	d1e9      	bne.n	ed0 <gpio_nrf5_port_isr+0x14>
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
     efc:	68ae      	ldr	r6, [r5, #8]

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
     efe:	2006      	movs	r0, #6
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
     f00:	4016      	ands	r6, r2

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
     f02:	f011 fd55 	bl	129b0 <_arch_irq_disable>
     f06:	682d      	ldr	r5, [r5, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
     f08:	2d00      	cmp	r5, #0
     f0a:	d103      	bne.n	f14 <gpio_nrf5_port_isr+0x58>

	/* Call the registered callbacks */
	_gpio_fire_callbacks(&data->callbacks, (struct device *)dev,
			     enabled_int);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
     f0c:	2006      	movs	r0, #6
     f0e:	f011 fd45 	bl	1299c <_arch_irq_enable>
}
     f12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if (cb->pin_mask & pins) {
     f14:	68ab      	ldr	r3, [r5, #8]
     f16:	4233      	tst	r3, r6
     f18:	d0f5      	beq.n	f06 <gpio_nrf5_port_isr+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
     f1a:	0032      	movs	r2, r6
     f1c:	0029      	movs	r1, r5
     f1e:	0020      	movs	r0, r4
     f20:	686b      	ldr	r3, [r5, #4]
     f22:	4798      	blx	r3
     f24:	e7ef      	b.n	f06 <gpio_nrf5_port_isr+0x4a>
	...

00000f28 <gpio_nrf5_config>:
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
     f28:	b5f0      	push	{r4, r5, r6, r7, lr}
     f2a:	0006      	movs	r6, r0
     f2c:	0014      	movs	r4, r2
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     f2e:	6802      	ldr	r2, [r0, #0]
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, u32_t pin, int flags)
{
     f30:	b085      	sub	sp, #20
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     f32:	6892      	ldr	r2, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     f34:	68b5      	ldr	r5, [r6, #8]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     f36:	6890      	ldr	r0, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     f38:	6817      	ldr	r7, [r2, #0]
		{GPIO_DRIVE_S0S1, GPIO_DRIVE_S0H1, 0, GPIO_DRIVE_S0D1},
		{GPIO_DRIVE_H0S1, GPIO_DRIVE_H0H1, 0, GPIO_DRIVE_H0D1},
		{0, 0, 0, 0},
		{GPIO_DRIVE_D0S1, GPIO_DRIVE_D0H1, 0, GPIO_DRIVE_S0S1}
	};
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     f3a:	9003      	str	r0, [sp, #12]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
     f3c:	2900      	cmp	r1, #0
     f3e:	d001      	beq.n	f44 <gpio_nrf5_config+0x1c>
					      pull |
					      GPIO_INPUT_CONNECT |
					      GPIO_DIR_INPUT);
		}
	} else {
		return -ENOTSUP;
     f40:	2023      	movs	r0, #35	; 0x23
     f42:	e069      	b.n	1018 <gpio_nrf5_config+0xf0>

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
     f44:	2103      	movs	r1, #3
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
     f46:	1398      	asrs	r0, r3, #14
     f48:	4008      	ands	r0, r1

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
     f4a:	131a      	asrs	r2, r3, #12
     f4c:	400a      	ands	r2, r1
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
     f4e:	9001      	str	r0, [sp, #4]

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
     f50:	31fd      	adds	r1, #253	; 0xfd
     f52:	20c0      	movs	r0, #192	; 0xc0
     f54:	468c      	mov	ip, r1
     f56:	0080      	lsls	r0, r0, #2
     f58:	4018      	ands	r0, r3
			pull = GPIO_PULL_UP;
     f5a:	39f4      	subs	r1, #244	; 0xf4
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;

		__ASSERT_NO_MSG(ds_low != 2);
		__ASSERT_NO_MSG(ds_high != 2);

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
     f5c:	4560      	cmp	r0, ip
     f5e:	d004      	beq.n	f6a <gpio_nrf5_config+0x42>
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		u8_t pull = GPIO_PULL_DISABLE;
     f60:	492f      	ldr	r1, [pc, #188]	; (1020 <gpio_nrf5_config+0xf8>)
     f62:	1840      	adds	r0, r0, r1
     f64:	4241      	negs	r1, r0
     f66:	4141      	adcs	r1, r0
     f68:	0089      	lsls	r1, r1, #2
			pull = GPIO_PULL_UP;
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
			pull = GPIO_PULL_DOWN;
		}

		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
     f6a:	2001      	movs	r0, #1
     f6c:	0092      	lsls	r2, r2, #2
     f6e:	9202      	str	r2, [sp, #8]
     f70:	4203      	tst	r3, r0
     f72:	d013      	beq.n	f9c <gpio_nrf5_config+0x74>
			/* Set initial output value */
			if (pull == GPIO_PULL_UP) {
     f74:	290c      	cmp	r1, #12
     f76:	d103      	bne.n	f80 <gpio_nrf5_config+0x58>
				gpio->OUTSET = BIT(pin);
     f78:	22a1      	movs	r2, #161	; 0xa1
     f7a:	40a0      	lsls	r0, r4
     f7c:	00d2      	lsls	r2, r2, #3
     f7e:	e003      	b.n	f88 <gpio_nrf5_config+0x60>
			} else if (pull == GPIO_PULL_DOWN) {
     f80:	2904      	cmp	r1, #4
     f82:	d102      	bne.n	f8a <gpio_nrf5_config+0x62>
				gpio->OUTCLR = BIT(pin);
     f84:	40a0      	lsls	r0, r4
     f86:	4a27      	ldr	r2, [pc, #156]	; (1024 <gpio_nrf5_config+0xfc>)
     f88:	50b8      	str	r0, [r7, r2]
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
     f8a:	9802      	ldr	r0, [sp, #8]
     f8c:	9a01      	ldr	r2, [sp, #4]
     f8e:	1882      	adds	r2, r0, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
     f90:	4825      	ldr	r0, [pc, #148]	; (1028 <gpio_nrf5_config+0x100>)
			} else if (pull == GPIO_PULL_DOWN) {
				gpio->OUTCLR = BIT(pin);
			}
			/* Config as output */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
     f92:	0092      	lsls	r2, r2, #2
					      pull |
					      GPIO_INPUT_DISCONNECT |
     f94:	5812      	ldr	r2, [r2, r0]
     f96:	2003      	movs	r0, #3
     f98:	4302      	orrs	r2, r0
     f9a:	e005      	b.n	fa8 <gpio_nrf5_config+0x80>
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
     f9c:	9802      	ldr	r0, [sp, #8]
     f9e:	9a01      	ldr	r2, [sp, #4]
     fa0:	1882      	adds	r2, r0, r2
					      pull |
					      GPIO_INPUT_CONNECT |
     fa2:	4821      	ldr	r0, [pc, #132]	; (1028 <gpio_nrf5_config+0x100>)
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
					      drive_strength[ds_low][ds_high] |
     fa4:	0092      	lsls	r2, r2, #2
					      pull |
					      GPIO_INPUT_CONNECT |
     fa6:	5812      	ldr	r2, [r2, r0]
     fa8:	4311      	orrs	r1, r2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
     faa:	0022      	movs	r2, r4
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
     fac:	2002      	movs	r0, #2
					      pull |
					      GPIO_INPUT_DISCONNECT |
					      GPIO_DIR_OUTPUT);
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
     fae:	32c1      	adds	r2, #193	; 0xc1
     fb0:	32ff      	adds	r2, #255	; 0xff
     fb2:	0092      	lsls	r2, r2, #2
     fb4:	51d1      	str	r1, [r2, r7]
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
     fb6:	4018      	ands	r0, r3
     fb8:	d02f      	beq.n	101a <gpio_nrf5_config+0xf2>
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
     fba:	069a      	lsls	r2, r3, #26
     fbc:	d5c0      	bpl.n	f40 <gpio_nrf5_config+0x18>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
     fbe:	065a      	lsls	r2, r3, #25
     fc0:	d403      	bmi.n	fca <gpio_nrf5_config+0xa2>
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
     fc2:	2780      	movs	r7, #128	; 0x80
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
     fc4:	075b      	lsls	r3, r3, #29
     fc6:	d403      	bmi.n	fd0 <gpio_nrf5_config+0xa8>
     fc8:	e000      	b.n	fcc <gpio_nrf5_config+0xa4>
	if (flags & GPIO_INT) {
		u32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
     fca:	27c0      	movs	r7, #192	; 0xc0
     fcc:	02bf      	lsls	r7, r7, #10
     fce:	e000      	b.n	fd2 <gpio_nrf5_config+0xaa>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
     fd0:	027f      	lsls	r7, r7, #9
			}
		} else { /* GPIO_INT_LEVEL */
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
     fd2:	68e8      	ldr	r0, [r5, #12]
     fd4:	f7ff fab0 	bl	538 <__popcountsi2>
     fd8:	2804      	cmp	r0, #4
     fda:	d01c      	beq.n	1016 <gpio_nrf5_config+0xee>
				GPIOTE_CHAN_COUNT) {
			return -EIO;
		}

		/* check if already allocated to replace */
		int i = gpiote_find_channel(dev, pin);
     fdc:	0030      	movs	r0, r6
     fde:	0021      	movs	r1, r4
     fe0:	f7ff feb8 	bl	d54 <gpiote_find_channel>
     fe4:	68ee      	ldr	r6, [r5, #12]

		if (i < 0) {
     fe6:	2800      	cmp	r0, #0
     fe8:	da03      	bge.n	ff2 <gpio_nrf5_config+0xca>
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
     fea:	43f0      	mvns	r0, r6
     fec:	f7ff fa9a 	bl	524 <__ffssi2>
     ff0:	3801      	subs	r0, #1
		}

		data->gpiote_chan_mask |= BIT(i);
     ff2:	2201      	movs	r2, #1
     ff4:	0013      	movs	r3, r2
     ff6:	4083      	lsls	r3, r0
     ff8:	431e      	orrs	r6, r3

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     ffa:	23f8      	movs	r3, #248	; 0xf8
     ffc:	0224      	lsls	r4, r4, #8
     ffe:	015b      	lsls	r3, r3, #5
    1000:	401c      	ands	r4, r3

		gpiote->CONFIG[i] = config;
    1002:	3045      	adds	r0, #69	; 0x45

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    1004:	4314      	orrs	r4, r2

		gpiote->CONFIG[i] = config;
    1006:	30ff      	adds	r0, #255	; 0xff
    1008:	9b03      	ldr	r3, [sp, #12]
    100a:	0080      	lsls	r0, r0, #2

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
    100c:	4327      	orrs	r7, r4
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
    100e:	60ee      	str	r6, [r5, #12]

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);

		gpiote->CONFIG[i] = config;
    1010:	50c7      	str	r7, [r0, r3]
	}


	return 0;
    1012:	2000      	movs	r0, #0
    1014:	e001      	b.n	101a <gpio_nrf5_config+0xf2>
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
				GPIOTE_CHAN_COUNT) {
			return -EIO;
    1016:	2005      	movs	r0, #5
    1018:	4240      	negs	r0, r0
		gpiote->CONFIG[i] = config;
	}


	return 0;
}
    101a:	b005      	add	sp, #20
    101c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	fffffe00 	.word	0xfffffe00
    1024:	0000050c 	.word	0x0000050c
    1028:	000143c4 	.word	0x000143c4

0000102c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    102c:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    102e:	f3ef 8110 	mrs	r1, PRIMASK
    1032:	b672      	cpsid	i
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1034:	4a15      	ldr	r2, [pc, #84]	; (108c <_m16src_stop+0x60>)
    1036:	7810      	ldrb	r0, [r2, #0]
    1038:	2800      	cmp	r0, #0
    103a:	d104      	bne.n	1046 <_m16src_stop+0x1a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    103c:	2900      	cmp	r1, #0
    103e:	d120      	bne.n	1082 <_m16src_stop+0x56>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1040:	b662      	cpsie	i
		irq_unlock(imask);
		return -EALREADY;
    1042:	3845      	subs	r0, #69	; 0x45
    1044:	e021      	b.n	108a <_m16src_stop+0x5e>
	}

	if (--m16src_ref) {
    1046:	1e43      	subs	r3, r0, #1
    1048:	b2db      	uxtb	r3, r3
    104a:	7013      	strb	r3, [r2, #0]
    104c:	2b00      	cmp	r3, #0
    104e:	d004      	beq.n	105a <_m16src_stop+0x2e>
		irq_unlock(imask);
		return 0;
    1050:	2000      	movs	r0, #0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1052:	4281      	cmp	r1, r0
    1054:	d119      	bne.n	108a <_m16src_stop+0x5e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1056:	b662      	cpsie	i
    1058:	e017      	b.n	108a <_m16src_stop+0x5e>
	}

	if (m16src_grd) {
    105a:	4b0d      	ldr	r3, [pc, #52]	; (1090 <_m16src_stop+0x64>)
    105c:	781c      	ldrb	r4, [r3, #0]
    105e:	2c00      	cmp	r4, #0
    1060:	d004      	beq.n	106c <_m16src_stop+0x40>
		m16src_ref++;
    1062:	7010      	strb	r0, [r2, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1064:	2900      	cmp	r1, #0
    1066:	d10e      	bne.n	1086 <_m16src_stop+0x5a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1068:	b662      	cpsie	i
    106a:	e00c      	b.n	1086 <_m16src_stop+0x5a>
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    106c:	2201      	movs	r2, #1
    106e:	701a      	strb	r2, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1070:	2900      	cmp	r1, #0
    1072:	d100      	bne.n	1076 <_m16src_stop+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1074:	b662      	cpsie	i

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    1076:	2180      	movs	r1, #128	; 0x80

	/* release resource guard */
	m16src_grd = 0;
    1078:	2000      	movs	r0, #0

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    107a:	05c9      	lsls	r1, r1, #23
    107c:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    107e:	7018      	strb	r0, [r3, #0]

	return 0;
    1080:	e003      	b.n	108a <_m16src_stop+0x5e>
	 */
	imask = irq_lock();

	if (!m16src_ref) {
		irq_unlock(imask);
		return -EALREADY;
    1082:	2045      	movs	r0, #69	; 0x45
    1084:	e000      	b.n	1088 <_m16src_stop+0x5c>
	}

	if (m16src_grd) {
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
    1086:	200b      	movs	r0, #11
    1088:	4240      	negs	r0, r0

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    108a:	bd10      	pop	{r4, pc}
    108c:	200007fc 	.word	0x200007fc
    1090:	200007fd 	.word	0x200007fd

00001094 <_clock_control_init>:
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1094:	2200      	movs	r2, #0
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    1096:	b510      	push	{r4, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1098:	0010      	movs	r0, r2
    109a:	2101      	movs	r1, #1
    109c:	f011 fc9e 	bl	129dc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10a0:	2000      	movs	r0, #0
    10a2:	f011 fc7b 	bl	1299c <_arch_irq_enable>

	return 0;
}
    10a6:	2000      	movs	r0, #0
    10a8:	bd10      	pop	{r4, pc}
	...

000010ac <_m16src_start>:

static u8_t m16src_ref;
static u8_t m16src_grd;

static int _m16src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    10ac:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    10ae:	f3ef 8310 	mrs	r3, PRIMASK
    10b2:	b672      	cpsid	i

	/* Test for reference increment from zero and resource guard not taken.
	 */
	imask = irq_lock();

	if (m16src_ref++) {
    10b4:	4a29      	ldr	r2, [pc, #164]	; (115c <_m16src_start+0xb0>)
    10b6:	7810      	ldrb	r0, [r2, #0]
    10b8:	1c44      	adds	r4, r0, #1
    10ba:	7014      	strb	r4, [r2, #0]
    10bc:	2800      	cmp	r0, #0
    10be:	d003      	beq.n	10c8 <_m16src_start+0x1c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    10c0:	2b00      	cmp	r3, #0
    10c2:	d13f      	bne.n	1144 <_m16src_start+0x98>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    10c4:	b662      	cpsie	i
    10c6:	e03d      	b.n	1144 <_m16src_start+0x98>
		irq_unlock(imask);
		goto hf_already_started;
	}

	if (m16src_grd) {
    10c8:	4c25      	ldr	r4, [pc, #148]	; (1160 <_m16src_start+0xb4>)
    10ca:	7825      	ldrb	r5, [r4, #0]
    10cc:	2d00      	cmp	r5, #0
    10ce:	d004      	beq.n	10da <_m16src_start+0x2e>
		m16src_ref--;
    10d0:	7010      	strb	r0, [r2, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    10d2:	2b00      	cmp	r3, #0
    10d4:	d13f      	bne.n	1156 <_m16src_start+0xaa>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    10d6:	b662      	cpsie	i
    10d8:	e03d      	b.n	1156 <_m16src_start+0xaa>
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    10da:	2201      	movs	r2, #1
    10dc:	7022      	strb	r2, [r4, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    10de:	2b00      	cmp	r3, #0
    10e0:	d100      	bne.n	10e4 <_m16src_start+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    10e2:	b662      	cpsie	i
    10e4:	2580      	movs	r5, #128	; 0x80
    10e6:	4e1f      	ldr	r6, [pc, #124]	; (1164 <_m16src_start+0xb8>)
    10e8:	05ed      	lsls	r5, r5, #23

	irq_unlock(imask);

	/* If blocking then spin-wait in CPU sleep until 16MHz clock settles. */
	blocking = POINTER_TO_UINT(sub_system);
	if (blocking) {
    10ea:	2900      	cmp	r1, #0
    10ec:	d025      	beq.n	113a <_m16src_start+0x8e>
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);
    10ee:	2000      	movs	r0, #0
    10f0:	f011 fc5e 	bl	129b0 <_arch_irq_disable>

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    10f4:	2300      	movs	r3, #0

		intenset = NRF_CLOCK->INTENSET;
    10f6:	22c1      	movs	r2, #193	; 0xc1
	if (blocking) {
		u32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    10f8:	6073      	str	r3, [r6, #4]

		intenset = NRF_CLOCK->INTENSET;
    10fa:	0092      	lsls	r2, r2, #2
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    10fc:	3301      	adds	r3, #1

		irq_disable(POWER_CLOCK_IRQn);

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		intenset = NRF_CLOCK->INTENSET;
    10fe:	58a9      	ldr	r1, [r5, r2]
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1100:	50ab      	str	r3, [r5, r2]

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1102:	602b      	str	r3, [r5, #0]

		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1104:	6873      	ldr	r3, [r6, #4]
    1106:	2b00      	cmp	r3, #0
    1108:	d103      	bne.n	1112 <_m16src_start+0x66>
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    110a:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    110c:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    110e:	bf20      	wfe
    1110:	e7f8      	b.n	1104 <_m16src_start+0x58>
			__WFE();
			__SEV();
			__WFE();
		}

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1112:	2200      	movs	r2, #0
    1114:	4b13      	ldr	r3, [pc, #76]	; (1164 <_m16src_start+0xb8>)
    1116:	605a      	str	r2, [r3, #4]

		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1118:	2301      	movs	r3, #1
    111a:	4219      	tst	r1, r3
    111c:	d104      	bne.n	1128 <_m16src_start+0x7c>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    111e:	22c2      	movs	r2, #194	; 0xc2
    1120:	2180      	movs	r1, #128	; 0x80
    1122:	0092      	lsls	r2, r2, #2
    1124:	05c9      	lsls	r1, r1, #23
    1126:	508b      	str	r3, [r1, r2]
    1128:	23c0      	movs	r3, #192	; 0xc0
    112a:	2101      	movs	r1, #1
    112c:	4a0e      	ldr	r2, [pc, #56]	; (1168 <_m16src_start+0xbc>)
    112e:	005b      	lsls	r3, r3, #1
    1130:	50d1      	str	r1, [r2, r3]
		}

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
    1132:	2000      	movs	r0, #0
    1134:	f011 fc32 	bl	1299c <_arch_irq_enable>
    1138:	e002      	b.n	1140 <_m16src_start+0x94>
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    113a:	2301      	movs	r3, #1

		NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    113c:	6071      	str	r1, [r6, #4]

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    113e:	602b      	str	r3, [r5, #0]
	}

	/* release resource guard */
	m16src_grd = 0;
    1140:	2300      	movs	r3, #0
    1142:	7023      	strb	r3, [r4, #0]
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1144:	2280      	movs	r2, #128	; 0x80
    1146:	4b09      	ldr	r3, [pc, #36]	; (116c <_m16src_start+0xc0>)
    1148:	05d2      	lsls	r2, r2, #23
    114a:	58d3      	ldr	r3, [r2, r3]
		return 0;
    114c:	2000      	movs	r0, #0
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    114e:	03db      	lsls	r3, r3, #15
    1150:	d403      	bmi.n	115a <_m16src_start+0xae>
		return 0;
	} else {
		return -EINPROGRESS;
    1152:	3844      	subs	r0, #68	; 0x44
    1154:	e001      	b.n	115a <_m16src_start+0xae>
	}

	if (m16src_grd) {
		m16src_ref--;
		irq_unlock(imask);
		return -EAGAIN;
    1156:	200b      	movs	r0, #11
    1158:	4240      	negs	r0, r0
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
		return 0;
	} else {
		return -EINPROGRESS;
	}
}
    115a:	bd70      	pop	{r4, r5, r6, pc}
    115c:	200007fc 	.word	0x200007fc
    1160:	200007fd 	.word	0x200007fd
    1164:	400000fc 	.word	0x400000fc
    1168:	e000e100 	.word	0xe000e100
    116c:	0000040c 	.word	0x0000040c

00001170 <_power_clock_isr>:

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
    1170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t pof, hf_intenset, hf_stat, hf, lf, done, ctto;
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1172:	4c24      	ldr	r4, [pc, #144]	; (1204 <_power_clock_isr+0x94>)
    1174:	2380      	movs	r3, #128	; 0x80
    1176:	68e2      	ldr	r2, [r4, #12]
    1178:	05db      	lsls	r3, r3, #23
    117a:	4694      	mov	ip, r2

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    117c:	22c1      	movs	r2, #193	; 0xc1
    117e:	0092      	lsls	r2, r2, #2
    1180:	5899      	ldr	r1, [r3, r2]
    1182:	2201      	movs	r2, #1
    1184:	400a      	ands	r2, r1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1186:	4920      	ldr	r1, [pc, #128]	; (1208 <_power_clock_isr+0x98>)

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
    1188:	0005      	movs	r5, r0

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    118a:	585e      	ldr	r6, [r3, r1]
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    118c:	9200      	str	r2, [sp, #0]
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    118e:	6867      	ldr	r7, [r4, #4]

	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1190:	68a0      	ldr	r0, [r4, #8]

	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1192:	6921      	ldr	r1, [r4, #16]
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1194:	6962      	ldr	r2, [r4, #20]
    1196:	9201      	str	r2, [sp, #4]

	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);

	if (pof) {
    1198:	4662      	mov	r2, ip
    119a:	2a00      	cmp	r2, #0
    119c:	d001      	beq.n	11a2 <_power_clock_isr+0x32>
		NRF_POWER->EVENTS_POFWARN = 0;
    119e:	2200      	movs	r2, #0
    11a0:	60e2      	str	r2, [r4, #12]
	}

	if (hf) {
    11a2:	2f00      	cmp	r7, #0
    11a4:	d001      	beq.n	11aa <_power_clock_isr+0x3a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    11a6:	2700      	movs	r7, #0
    11a8:	6067      	str	r7, [r4, #4]
	}

	if (hf_intenset && hf_stat) {
    11aa:	9a00      	ldr	r2, [sp, #0]
    11ac:	2a00      	cmp	r2, #0
    11ae:	d006      	beq.n	11be <_power_clock_isr+0x4e>
    11b0:	03f2      	lsls	r2, r6, #15
    11b2:	d504      	bpl.n	11be <_power_clock_isr+0x4e>
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    11b4:	26c2      	movs	r6, #194	; 0xc2
    11b6:	2201      	movs	r2, #1
    11b8:	00b6      	lsls	r6, r6, #2
    11ba:	519a      	str	r2, [r3, r6]

		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
    11bc:	611a      	str	r2, [r3, #16]
	}

	if (lf) {
    11be:	2800      	cmp	r0, #0
    11c0:	d001      	beq.n	11c6 <_power_clock_isr+0x56>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11c2:	2300      	movs	r3, #0
    11c4:	60a3      	str	r3, [r4, #8]

		__ASSERT_NO_MSG(0);
	}

	if (done) {
    11c6:	2900      	cmp	r1, #0
    11c8:	d008      	beq.n	11dc <_power_clock_isr+0x6c>
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
    11ca:	2100      	movs	r1, #0

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    11cc:	0028      	movs	r0, r5
	}

	if (done) {
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
    11ce:	6121      	str	r1, [r4, #16]

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
    11d0:	f7ff ff2c 	bl	102c <_m16src_stop>
		__ASSERT_NO_MSG(!err);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
    11d4:	2380      	movs	r3, #128	; 0x80
    11d6:	2201      	movs	r2, #1
    11d8:	05db      	lsls	r3, r3, #23
    11da:	615a      	str	r2, [r3, #20]
	}

	if (ctto) {
    11dc:	9b01      	ldr	r3, [sp, #4]
    11de:	2b00      	cmp	r3, #0
    11e0:	d00e      	beq.n	1200 <_power_clock_isr+0x90>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    11e2:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    11e4:	23c1      	movs	r3, #193	; 0xc1
    11e6:	2280      	movs	r2, #128	; 0x80
	}

	if (ctto) {
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
    11e8:	6161      	str	r1, [r4, #20]

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    11ea:	2401      	movs	r4, #1
    11ec:	009b      	lsls	r3, r3, #2
    11ee:	05d2      	lsls	r2, r2, #23
    11f0:	50d4      	str	r4, [r2, r3]

		err = _m16src_start(dev, false);
    11f2:	0028      	movs	r0, r5
    11f4:	f7ff ff5a 	bl	10ac <_m16src_start>
		if (!err) {
    11f8:	2800      	cmp	r0, #0
    11fa:	d101      	bne.n	1200 <_power_clock_isr+0x90>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    11fc:	4b03      	ldr	r3, [pc, #12]	; (120c <_power_clock_isr+0x9c>)
    11fe:	605c      	str	r4, [r3, #4]
			NVIC_SetPendingIRQ(POWER_CLOCK_IRQn);
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}
}
    1200:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	400000fc 	.word	0x400000fc
    1208:	0000040c 	.word	0x0000040c
    120c:	e000e1fc 	.word	0xe000e1fc

00001210 <_k32src_start>:

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    1210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    1212:	2580      	movs	r5, #128	; 0x80
    1214:	2383      	movs	r3, #131	; 0x83
    1216:	05ed      	lsls	r5, r5, #23
    1218:	00db      	lsls	r3, r3, #3
    121a:	58ec      	ldr	r4, [r5, r3]
    121c:	2380      	movs	r3, #128	; 0x80

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    121e:	0007      	movs	r7, r0
	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
		return 0;
    1220:	2000      	movs	r0, #0

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    1222:	025b      	lsls	r3, r3, #9

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
    1224:	000e      	movs	r6, r1

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
    1226:	401c      	ands	r4, r3
    1228:	4284      	cmp	r4, r0
    122a:	d14d      	bne.n	12c8 <_k32src_start+0xb8>
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);
    122c:	0020      	movs	r0, r4
    122e:	f011 fbbf 	bl	129b0 <_arch_irq_disable>

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;

	intenset = NRF_CLOCK->INTENSET;
    1232:	22c1      	movs	r2, #193	; 0xc1
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1234:	2002      	movs	r0, #2
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1236:	4b25      	ldr	r3, [pc, #148]	; (12cc <_k32src_start+0xbc>)

	intenset = NRF_CLOCK->INTENSET;
    1238:	0092      	lsls	r2, r2, #2
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    123a:	609c      	str	r4, [r3, #8]

	intenset = NRF_CLOCK->INTENSET;
    123c:	58a9      	ldr	r1, [r5, r2]
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    123e:	50a8      	str	r0, [r5, r2]

	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1240:	22a3      	movs	r2, #163	; 0xa3
    1242:	00d2      	lsls	r2, r2, #3
    1244:	50ae      	str	r6, [r5, r2]

	/* Start and spin-wait until clock settles */
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1246:	2201      	movs	r2, #1
    1248:	001c      	movs	r4, r3
    124a:	60aa      	str	r2, [r5, #8]

	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    124c:	68a3      	ldr	r3, [r4, #8]
    124e:	2b00      	cmp	r3, #0
    1250:	d103      	bne.n	125a <_k32src_start+0x4a>
    1252:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    1254:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    1256:	bf20      	wfe
    1258:	e7f8      	b.n	124c <_k32src_start+0x3c>
		__WFE();
		__SEV();
		__WFE();
	}

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    125a:	2200      	movs	r2, #0
    125c:	4b1b      	ldr	r3, [pc, #108]	; (12cc <_k32src_start+0xbc>)
    125e:	609a      	str	r2, [r3, #8]

	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1260:	2302      	movs	r3, #2
    1262:	4219      	tst	r1, r3
    1264:	d104      	bne.n	1270 <_k32src_start+0x60>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1266:	22c2      	movs	r2, #194	; 0xc2
    1268:	2180      	movs	r1, #128	; 0x80
    126a:	0092      	lsls	r2, r2, #2
    126c:	05c9      	lsls	r1, r1, #23
    126e:	508b      	str	r3, [r1, r2]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1270:	23c0      	movs	r3, #192	; 0xc0
    1272:	2501      	movs	r5, #1
    1274:	4a16      	ldr	r2, [pc, #88]	; (12d0 <_k32src_start+0xc0>)
    1276:	005b      	lsls	r3, r3, #1
    1278:	50d5      	str	r5, [r2, r3]
	}

	NVIC_ClearPendingIRQ(POWER_CLOCK_IRQn);

	irq_enable(POWER_CLOCK_IRQn);
    127a:	2000      	movs	r0, #0
    127c:	f011 fb8e 	bl	1299c <_arch_irq_enable>

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1280:	2380      	movs	r3, #128	; 0x80
    1282:	22c2      	movs	r2, #194	; 0xc2
    1284:	2018      	movs	r0, #24
    1286:	0092      	lsls	r2, r2, #2
    1288:	05db      	lsls	r3, r3, #23
    128a:	5098      	str	r0, [r3, r2]
	NRF_CLOCK->EVENTS_DONE = 0;
	NRF_CLOCK->EVENTS_CTTO = 0;

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    128c:	2103      	movs	r1, #3

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
	NRF_CLOCK->EVENTS_DONE = 0;
    128e:	2200      	movs	r2, #0
	NRF_CLOCK->EVENTS_CTTO = 0;

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1290:	4031      	ands	r1, r6

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
	NRF_CLOCK->EVENTS_DONE = 0;
    1292:	6122      	str	r2, [r4, #16]
	NRF_CLOCK->EVENTS_CTTO = 0;
    1294:	6162      	str	r2, [r4, #20]

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1296:	4291      	cmp	r1, r2
    1298:	d10e      	bne.n	12b8 <_k32src_start+0xa8>
		int err;

		/* Set the Calibration Timer Initial Value */
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    129a:	22a7      	movs	r2, #167	; 0xa7
    129c:	2410      	movs	r4, #16
    129e:	00d2      	lsls	r2, r2, #3
    12a0:	509c      	str	r4, [r3, r2]

		/* Enable DONE and CTTO IRQs */
		NRF_CLOCK->INTENSET =
    12a2:	22c1      	movs	r2, #193	; 0xc1
    12a4:	0092      	lsls	r2, r2, #2
    12a6:	5098      	str	r0, [r3, r2]
		/* Start HF clock, if already started then explicitly
		 * assert IRQ.
		 * NOTE: The INTENSET is used as state flag to start
		 * calibration in ISR.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12a8:	509d      	str	r5, [r3, r2]

		err = _m16src_start(dev, false);
    12aa:	0038      	movs	r0, r7
    12ac:	f7ff fefe 	bl	10ac <_m16src_start>
		if (!err) {
    12b0:	2800      	cmp	r0, #0
    12b2:	d101      	bne.n	12b8 <_k32src_start+0xa8>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    12b4:	4b07      	ldr	r3, [pc, #28]	; (12d4 <_k32src_start+0xc4>)
    12b6:	605d      	str	r5, [r3, #4]
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
    12b8:	2383      	movs	r3, #131	; 0x83
    12ba:	2280      	movs	r2, #128	; 0x80
    12bc:	2001      	movs	r0, #1
    12be:	00db      	lsls	r3, r3, #3
    12c0:	05d2      	lsls	r2, r2, #23
    12c2:	58d3      	ldr	r3, [r2, r3]
    12c4:	0c1b      	lsrs	r3, r3, #16
    12c6:	4398      	bics	r0, r3
}
    12c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	400000fc 	.word	0x400000fc
    12d0:	e000e100 	.word	0xe000e100
    12d4:	e000e1fc 	.word	0xe000e1fc

000012d8 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    12d8:	0003      	movs	r3, r0
    12da:	780a      	ldrb	r2, [r1, #0]
		*d = *s;
    12dc:	701a      	strb	r2, [r3, #0]

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    12de:	2a00      	cmp	r2, #0
    12e0:	d002      	beq.n	12e8 <strcpy+0x10>
		*d = *s;
		d++;
    12e2:	3301      	adds	r3, #1
		s++;
    12e4:	3101      	adds	r1, #1
    12e6:	e7f8      	b.n	12da <strcpy+0x2>
	}

	*d = '\0';

	return dest;
}
    12e8:	4770      	bx	lr

000012ea <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    12ea:	0002      	movs	r2, r0
	size_t n = 0;

	while (*s != '\0') {
    12ec:	0003      	movs	r3, r0
    12ee:	7819      	ldrb	r1, [r3, #0]
    12f0:	1a98      	subs	r0, r3, r2
    12f2:	2900      	cmp	r1, #0
    12f4:	d001      	beq.n	12fa <strlen+0x10>
		s++;
    12f6:	3301      	adds	r3, #1
    12f8:	e7f9      	b.n	12ee <strlen+0x4>
		n++;
	}

	return n;
}
    12fa:	4770      	bx	lr

000012fc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    12fc:	7803      	ldrb	r3, [r0, #0]
    12fe:	780a      	ldrb	r2, [r1, #0]
    1300:	4293      	cmp	r3, r2
    1302:	d105      	bne.n	1310 <strcmp+0x14>
    1304:	2b00      	cmp	r3, #0
    1306:	d002      	beq.n	130e <strcmp+0x12>
		s1++;
    1308:	3001      	adds	r0, #1
		s2++;
    130a:	3101      	adds	r1, #1
    130c:	e7f6      	b.n	12fc <strcmp>
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    130e:	001a      	movs	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
    1310:	1a98      	subs	r0, r3, r2
}
    1312:	4770      	bx	lr

00001314 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1314:	0003      	movs	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
    1316:	2000      	movs	r0, #0
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    1318:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
    131a:	4282      	cmp	r2, r0
    131c:	d00e      	beq.n	133c <memcmp+0x28>
    131e:	3a01      	subs	r2, #1
    1320:	189a      	adds	r2, r3, r2
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    1322:	4293      	cmp	r3, r2
    1324:	d103      	bne.n	132e <memcmp+0x1a>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    1326:	781b      	ldrb	r3, [r3, #0]
    1328:	7808      	ldrb	r0, [r1, #0]
    132a:	1a18      	subs	r0, r3, r0
    132c:	e006      	b.n	133c <memcmp+0x28>
	const char *c2 = m2;

	if (!n)
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
    132e:	781c      	ldrb	r4, [r3, #0]
    1330:	7808      	ldrb	r0, [r1, #0]
    1332:	4284      	cmp	r4, r0
    1334:	d1f7      	bne.n	1326 <memcmp+0x12>
		c1++;
    1336:	3301      	adds	r3, #1
		c2++;
    1338:	3101      	adds	r1, #1
    133a:	e7f2      	b.n	1322 <memcmp+0xe>
	}

	return *c1 - *c2;
}
    133c:	bd10      	pop	{r4, pc}

0000133e <memmove>:
 *
 * @return pointer to destination buffer <d>
 */

void *memmove(void *d, const void *s, size_t n)
{
    133e:	b510      	push	{r4, lr}
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
    1340:	1a43      	subs	r3, r0, r1
    1342:	4293      	cmp	r3, r2
    1344:	d301      	bcc.n	134a <memmove+0xc>
    1346:	2300      	movs	r3, #0
    1348:	e005      	b.n	1356 <memmove+0x18>
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
    134a:	3a01      	subs	r2, #1
			dest[n] = src[n];
    134c:	5c8b      	ldrb	r3, [r1, r2]
    134e:	5483      	strb	r3, [r0, r2]
		/*
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
    1350:	2a00      	cmp	r2, #0
    1352:	d1fa      	bne.n	134a <memmove+0xc>
    1354:	e005      	b.n	1362 <memmove+0x24>
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    1356:	429a      	cmp	r2, r3
    1358:	d003      	beq.n	1362 <memmove+0x24>
			*dest = *src;
    135a:	5ccc      	ldrb	r4, [r1, r3]
    135c:	54c4      	strb	r4, [r0, r3]
    135e:	3301      	adds	r3, #1
    1360:	e7f9      	b.n	1356 <memmove+0x18>
			n--;
		}
	}

	return d;
}
    1362:	bd10      	pop	{r4, pc}

00001364 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    1364:	b530      	push	{r4, r5, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    1366:	0004      	movs	r4, r0
    1368:	2303      	movs	r3, #3
    136a:	404c      	eors	r4, r1
    136c:	421c      	tst	r4, r3
    136e:	d002      	beq.n	1376 <memcpy+0x12>

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
    1370:	0004      	movs	r4, r0
    1372:	2300      	movs	r3, #0
    1374:	e019      	b.n	13aa <memcpy+0x46>
    1376:	0004      	movs	r4, r0

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
    1378:	001d      	movs	r5, r3
    137a:	0023      	movs	r3, r4
    137c:	402b      	ands	r3, r5
    137e:	d007      	beq.n	1390 <memcpy+0x2c>
			if (n == 0) {
    1380:	2a00      	cmp	r2, #0
    1382:	d018      	beq.n	13b6 <memcpy+0x52>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    1384:	780b      	ldrb	r3, [r1, #0]
			n--;
    1386:	3a01      	subs	r2, #1

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
				return d;
			}
			*(d_byte++) = *(s_byte++);
    1388:	7023      	strb	r3, [r4, #0]
    138a:	3101      	adds	r1, #1
    138c:	3401      	adds	r4, #1
    138e:	e7f4      	b.n	137a <memcpy+0x16>
		/* do word-sized copying as long as possible */

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
    1390:	1ad5      	subs	r5, r2, r3
    1392:	2d03      	cmp	r5, #3
    1394:	d903      	bls.n	139e <memcpy+0x3a>
			*(d_word++) = *(s_word++);
    1396:	58cd      	ldr	r5, [r1, r3]
    1398:	50e5      	str	r5, [r4, r3]
    139a:	3304      	adds	r3, #4
    139c:	e7f8      	b.n	1390 <memcpy+0x2c>
    139e:	0893      	lsrs	r3, r2, #2
    13a0:	009b      	lsls	r3, r3, #2
    13a2:	1ad2      	subs	r2, r2, r3
    13a4:	18e4      	adds	r4, r4, r3
    13a6:	18c9      	adds	r1, r1, r3
    13a8:	e7e3      	b.n	1372 <memcpy+0xe>
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    13aa:	429a      	cmp	r2, r3
    13ac:	d003      	beq.n	13b6 <memcpy+0x52>
		*(d_byte++) = *(s_byte++);
    13ae:	5ccd      	ldrb	r5, [r1, r3]
    13b0:	54e5      	strb	r5, [r4, r3]
    13b2:	3301      	adds	r3, #1
    13b4:	e7f9      	b.n	13aa <memcpy+0x46>
		n--;
	}

	return d;
}
    13b6:	bd30      	pop	{r4, r5, pc}

000013b8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ba:	0003      	movs	r3, r0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
    13bc:	2603      	movs	r6, #3
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    13be:	b2cc      	uxtb	r4, r1
    13c0:	001d      	movs	r5, r3

	while (((unsigned int)d_byte) & 0x3) {
    13c2:	4233      	tst	r3, r6
    13c4:	d005      	beq.n	13d2 <memset+0x1a>
		if (n == 0) {
    13c6:	2a00      	cmp	r2, #0
    13c8:	d01a      	beq.n	1400 <memset+0x48>
			return buf;
		}
		*(d_byte++) = c_byte;
    13ca:	701c      	strb	r4, [r3, #0]
		n--;
    13cc:	3a01      	subs	r2, #1
    13ce:	3301      	adds	r3, #1
    13d0:	e7f6      	b.n	13c0 <memset+0x8>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
    13d2:	27ff      	movs	r7, #255	; 0xff
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
    13d4:	b2ce      	uxtb	r6, r1

	c_word |= c_word << 8;
    13d6:	023f      	lsls	r7, r7, #8
    13d8:	0209      	lsls	r1, r1, #8
    13da:	4039      	ands	r1, r7
    13dc:	4331      	orrs	r1, r6
	c_word |= c_word << 16;
    13de:	040e      	lsls	r6, r1, #16
    13e0:	4331      	orrs	r1, r6

	while (n >= sizeof(unsigned int)) {
    13e2:	0016      	movs	r6, r2
    13e4:	2e03      	cmp	r6, #3
    13e6:	d902      	bls.n	13ee <memset+0x36>
		*(d_word++) = c_word;
    13e8:	c302      	stmia	r3!, {r1}
		n -= sizeof(unsigned int);
    13ea:	3e04      	subs	r6, #4
    13ec:	e7fa      	b.n	13e4 <memset+0x2c>
    13ee:	0893      	lsrs	r3, r2, #2
    13f0:	009b      	lsls	r3, r3, #2
    13f2:	18eb      	adds	r3, r5, r3
    13f4:	18aa      	adds	r2, r5, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    13f6:	4293      	cmp	r3, r2
    13f8:	d002      	beq.n	1400 <memset+0x48>
		*(d_byte++) = c_byte;
    13fa:	701c      	strb	r4, [r3, #0]
    13fc:	3301      	adds	r3, #1
    13fe:	e7fa      	b.n	13f6 <memset+0x3e>
		n--;
	}

	return buf;
}
    1400:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001402 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1402:	2000      	movs	r0, #0
    1404:	4770      	bx	lr
	...

00001408 <char_out>:
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
	ctx->count++;
    1408:	680b      	ldr	r3, [r1, #0]
struct out_context {
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
    140a:	b510      	push	{r4, lr}
	ctx->count++;
    140c:	3301      	adds	r3, #1
    140e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1410:	4b01      	ldr	r3, [pc, #4]	; (1418 <char_out+0x10>)
    1412:	681b      	ldr	r3, [r3, #0]
    1414:	4798      	blx	r3
}
    1416:	bd10      	pop	{r4, pc}
    1418:	20000278 	.word	0x20000278

0000141c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    141c:	b5f0      	push	{r4, r5, r6, r7, lr}
    141e:	b087      	sub	sp, #28
    1420:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    1422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1424:	0007      	movs	r7, r0
    1426:	9102      	str	r1, [sp, #8]
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    1428:	2b00      	cmp	r3, #0
    142a:	dc01      	bgt.n	1430 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD>
		min_width = 1;
    142c:	2301      	movs	r3, #1
    142e:	930c      	str	r3, [sp, #48]	; 0x30
    1430:	2320      	movs	r3, #32
    1432:	9305      	str	r3, [sp, #20]
    1434:	9b03      	ldr	r3, [sp, #12]
    1436:	2b01      	cmp	r3, #1
    1438:	d101      	bne.n	143e <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0xe>
    143a:	332f      	adds	r3, #47	; 0x2f
    143c:	9305      	str	r3, [sp, #20]
    143e:	230a      	movs	r3, #10
    1440:	9301      	str	r3, [sp, #4]
    1442:	2300      	movs	r3, #0
    1444:	0016      	movs	r6, r2
    1446:	2401      	movs	r4, #1
    1448:	4d1f      	ldr	r5, [pc, #124]	; (14c8 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x98>)
    144a:	9304      	str	r3, [sp, #16]
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    144c:	9b04      	ldr	r3, [sp, #16]
    144e:	2b00      	cmp	r3, #0
    1450:	d101      	bne.n	1456 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x26>
    1452:	42b5      	cmp	r5, r6
    1454:	d20a      	bcs.n	146c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x3c>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    1456:	1c69      	adds	r1, r5, #1
    1458:	0030      	movs	r0, r6
    145a:	f7fe fea1 	bl	1a0 <__aeabi_uidiv>
    145e:	9902      	ldr	r1, [sp, #8]
    1460:	3030      	adds	r0, #48	; 0x30
    1462:	47b8      	blx	r7
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    1464:	2301      	movs	r3, #1
			out((int)((remainder / (pos + 1)) + 48), ctx);
			digits++;
    1466:	3401      	adds	r4, #1
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    1468:	9304      	str	r3, [sp, #16]
			out((int)((remainder / (pos + 1)) + 48), ctx);
			digits++;
    146a:	e00a      	b.n	1482 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x52>
		} else if (remaining <= min_width
    146c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    146e:	9a01      	ldr	r2, [sp, #4]
    1470:	4293      	cmp	r3, r2
    1472:	db06      	blt.n	1482 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x52>
				&& padding < PAD_SPACE_AFTER) {
    1474:	9b03      	ldr	r3, [sp, #12]
    1476:	2b02      	cmp	r3, #2
    1478:	d803      	bhi.n	1482 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x52>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    147a:	9902      	ldr	r1, [sp, #8]
    147c:	9805      	ldr	r0, [sp, #20]
    147e:	47b8      	blx	r7
			digits++;
    1480:	3401      	adds	r4, #1
		}
		remaining--;
    1482:	9b01      	ldr	r3, [sp, #4]
		remainder %= (pos + 1);
    1484:	1c69      	adds	r1, r5, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1486:	3b01      	subs	r3, #1
		remainder %= (pos + 1);
    1488:	0030      	movs	r0, r6
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    148a:	9301      	str	r3, [sp, #4]
		remainder %= (pos + 1);
    148c:	f7fe ff0e 	bl	2ac <__aeabi_uidivmod>
		pos /= 10;
    1490:	0028      	movs	r0, r5
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
    1492:	000e      	movs	r6, r1
		pos /= 10;
    1494:	210a      	movs	r1, #10
    1496:	f7fe fe83 	bl	1a0 <__aeabi_uidiv>
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
    149a:	9b01      	ldr	r3, [sp, #4]
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
    149c:	0005      	movs	r5, r0
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
    149e:	2b01      	cmp	r3, #1
    14a0:	d1d4      	bne.n	144c <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x1c>
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
	}
	out((int)(remainder + 48), ctx);
    14a2:	0030      	movs	r0, r6
    14a4:	9902      	ldr	r1, [sp, #8]
    14a6:	3030      	adds	r0, #48	; 0x30
    14a8:	47b8      	blx	r7

	if (padding == PAD_SPACE_AFTER) {
    14aa:	9b03      	ldr	r3, [sp, #12]
    14ac:	2b03      	cmp	r3, #3
    14ae:	d108      	bne.n	14c2 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x92>
    14b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    14b2:	1b1c      	subs	r4, r3, r4
		remaining = min_width - digits;
		while (remaining-- > 0) {
    14b4:	2c00      	cmp	r4, #0
    14b6:	dd04      	ble.n	14c2 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x92>
			out(' ', ctx);
    14b8:	9902      	ldr	r1, [sp, #8]
    14ba:	2020      	movs	r0, #32
    14bc:	47b8      	blx	r7
    14be:	3c01      	subs	r4, #1
    14c0:	e7f8      	b.n	14b4 <CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD+0x84>
		}
	}
}
    14c2:	b007      	add	sp, #28
    14c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14c6:	46c0      	nop			; (mov r8, r8)
    14c8:	3b9ac9ff 	.word	0x3b9ac9ff

000014cc <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    14cc:	680a      	ldr	r2, [r1, #0]
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    14ce:	b530      	push	{r4, r5, lr}
    14d0:	688b      	ldr	r3, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
    14d2:	2a00      	cmp	r2, #0
    14d4:	d002      	beq.n	14dc <str_out+0x10>
    14d6:	684c      	ldr	r4, [r1, #4]
    14d8:	42a3      	cmp	r3, r4
    14da:	db02      	blt.n	14e2 <str_out+0x16>
		ctx->count++;
    14dc:	3301      	adds	r3, #1
    14de:	608b      	str	r3, [r1, #8]
		return c;
    14e0:	e009      	b.n	14f6 <str_out+0x2a>
	}

	if (ctx->count == ctx->max - 1) {
    14e2:	1e65      	subs	r5, r4, #1
    14e4:	42ab      	cmp	r3, r5
    14e6:	d103      	bne.n	14f0 <str_out+0x24>
		ctx->str[ctx->count++] = '\0';
    14e8:	608c      	str	r4, [r1, #8]
    14ea:	2100      	movs	r1, #0
    14ec:	54d1      	strb	r1, [r2, r3]
    14ee:	e002      	b.n	14f6 <str_out+0x2a>
	} else {
		ctx->str[ctx->count++] = c;
    14f0:	1c5c      	adds	r4, r3, #1
    14f2:	608c      	str	r4, [r1, #8]
    14f4:	54d0      	strb	r0, [r2, r3]
	}

	return c;
}
    14f6:	bd30      	pop	{r4, r5, pc}

000014f8 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    14f8:	4b01      	ldr	r3, [pc, #4]	; (1500 <__printk_hook_install+0x8>)
    14fa:	6018      	str	r0, [r3, #0]
}
    14fc:	4770      	bx	lr
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	20000278 	.word	0x20000278

00001504 <_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    1504:	b5f0      	push	{r4, r5, r6, r7, lr}
    1506:	001c      	movs	r4, r3
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	int long_ctr = 0;
    1508:	2300      	movs	r3, #0
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    150a:	b08d      	sub	sp, #52	; 0x34
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
	int long_ctr = 0;
    150c:	9305      	str	r3, [sp, #20]
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int min_width = -1;
    150e:	3b01      	subs	r3, #1
    1510:	9304      	str	r3, [sp, #16]
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
    1512:	2300      	movs	r3, #0
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    1514:	0005      	movs	r5, r0
    1516:	000e      	movs	r6, r1
	int might_format = 0; /* 1 if encountered a '%' */
    1518:	001f      	movs	r7, r3
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
    151a:	9207      	str	r2, [sp, #28]
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
    151c:	9303      	str	r3, [sp, #12]
	int min_width = -1;
	int long_ctr = 0;

	/* fmt has already been adjusted if needed */

	while (*fmt) {
    151e:	9b07      	ldr	r3, [sp, #28]
    1520:	7818      	ldrb	r0, [r3, #0]
    1522:	2800      	cmp	r0, #0
    1524:	d100      	bne.n	1528 <_vprintk+0x24>
    1526:	e10f      	b.n	1748 <_vprintk+0x244>
		if (!might_format) {
    1528:	2f00      	cmp	r7, #0
    152a:	d105      	bne.n	1538 <_vprintk+0x34>
			if (*fmt != '%') {
    152c:	2825      	cmp	r0, #37	; 0x25
    152e:	d100      	bne.n	1532 <_vprintk+0x2e>
    1530:	e0fb      	b.n	172a <_vprintk+0x226>
				out((int)*fmt, ctx);
    1532:	0031      	movs	r1, r6
    1534:	47a8      	blx	r5
    1536:	e103      	b.n	1740 <_vprintk+0x23c>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1538:	2864      	cmp	r0, #100	; 0x64
    153a:	d050      	beq.n	15de <_vprintk+0xda>
    153c:	d816      	bhi.n	156c <_vprintk+0x68>
    153e:	2839      	cmp	r0, #57	; 0x39
    1540:	d809      	bhi.n	1556 <_vprintk+0x52>
    1542:	2831      	cmp	r0, #49	; 0x31
    1544:	d236      	bcs.n	15b4 <_vprintk+0xb0>
    1546:	282d      	cmp	r0, #45	; 0x2d
    1548:	d02a      	beq.n	15a0 <_vprintk+0x9c>
    154a:	2830      	cmp	r0, #48	; 0x30
    154c:	d02a      	beq.n	15a4 <_vprintk+0xa0>
    154e:	2825      	cmp	r0, #37	; 0x25
    1550:	d000      	beq.n	1554 <_vprintk+0x50>
    1552:	e0e1      	b.n	1718 <_vprintk+0x214>
    1554:	e0e5      	b.n	1722 <_vprintk+0x21e>
    1556:	2858      	cmp	r0, #88	; 0x58
    1558:	d07b      	beq.n	1652 <_vprintk+0x14e>
    155a:	2863      	cmp	r0, #99	; 0x63
    155c:	d000      	beq.n	1560 <_vprintk+0x5c>
    155e:	e0db      	b.n	1718 <_vprintk+0x214>
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);

				out(c, ctx);
    1560:	6820      	ldr	r0, [r4, #0]
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    1562:	1d27      	adds	r7, r4, #4

				out(c, ctx);
    1564:	0031      	movs	r1, r6
    1566:	47a8      	blx	r5
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    1568:	003c      	movs	r4, r7
    156a:	e0dc      	b.n	1726 <_vprintk+0x222>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    156c:	2870      	cmp	r0, #112	; 0x70
    156e:	d066      	beq.n	163e <_vprintk+0x13a>
    1570:	d807      	bhi.n	1582 <_vprintk+0x7e>
    1572:	2869      	cmp	r0, #105	; 0x69
    1574:	d033      	beq.n	15de <_vprintk+0xda>
    1576:	286c      	cmp	r0, #108	; 0x6c
    1578:	d02d      	beq.n	15d6 <_vprintk+0xd2>
    157a:	2868      	cmp	r0, #104	; 0x68
    157c:	d000      	beq.n	1580 <_vprintk+0x7c>
    157e:	e0cb      	b.n	1718 <_vprintk+0x214>
    1580:	e0d9      	b.n	1736 <_vprintk+0x232>
    1582:	2875      	cmp	r0, #117	; 0x75
    1584:	d046      	beq.n	1614 <_vprintk+0x110>
    1586:	d805      	bhi.n	1594 <_vprintk+0x90>
    1588:	2873      	cmp	r0, #115	; 0x73
    158a:	d000      	beq.n	158e <_vprintk+0x8a>
    158c:	e0c4      	b.n	1718 <_vprintk+0x214>
				_printk_hex_ulong(out, ctx, x, padding,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    158e:	1d27      	adds	r7, r4, #4
    1590:	6824      	ldr	r4, [r4, #0]

				while (*s)
    1592:	e0b7      	b.n	1704 <_vprintk+0x200>
				min_width = -1;
				padding = PAD_NONE;
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1594:	2878      	cmp	r0, #120	; 0x78
    1596:	d05c      	beq.n	1652 <_vprintk+0x14e>
    1598:	287a      	cmp	r0, #122	; 0x7a
    159a:	d100      	bne.n	159e <_vprintk+0x9a>
    159c:	e0cb      	b.n	1736 <_vprintk+0x232>
    159e:	e0bb      	b.n	1718 <_vprintk+0x214>
			case '-':
				padding = PAD_SPACE_AFTER;
    15a0:	2303      	movs	r3, #3
    15a2:	e0c7      	b.n	1734 <_vprintk+0x230>
				goto still_might_format;
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
    15a4:	9b04      	ldr	r3, [sp, #16]
    15a6:	2b00      	cmp	r3, #0
    15a8:	da07      	bge.n	15ba <_vprintk+0xb6>
    15aa:	9b03      	ldr	r3, [sp, #12]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d100      	bne.n	15b2 <_vprintk+0xae>
    15b0:	e0c3      	b.n	173a <_vprintk+0x236>
    15b2:	e006      	b.n	15c2 <_vprintk+0xbe>
					padding = PAD_ZERO_BEFORE;
					goto still_might_format;
				}
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
    15b4:	9b04      	ldr	r3, [sp, #16]
    15b6:	2b00      	cmp	r3, #0
    15b8:	db03      	blt.n	15c2 <_vprintk+0xbe>
					min_width = *fmt - '0';
				} else {
					min_width = 10 * min_width + *fmt - '0';
    15ba:	230a      	movs	r3, #10
    15bc:	9a04      	ldr	r2, [sp, #16]
    15be:	4353      	muls	r3, r2
    15c0:	1818      	adds	r0, r3, r0
				}

				if (padding == PAD_NONE) {
    15c2:	9b03      	ldr	r3, [sp, #12]
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
					min_width = *fmt - '0';
				} else {
					min_width = 10 * min_width + *fmt - '0';
    15c4:	3830      	subs	r0, #48	; 0x30
    15c6:	9004      	str	r0, [sp, #16]
    15c8:	2701      	movs	r7, #1
				}

				if (padding == PAD_NONE) {
    15ca:	2b00      	cmp	r3, #0
    15cc:	d000      	beq.n	15d0 <_vprintk+0xcc>
    15ce:	e0b7      	b.n	1740 <_vprintk+0x23c>
					padding = PAD_SPACE_BEFORE;
    15d0:	3302      	adds	r3, #2
    15d2:	9303      	str	r3, [sp, #12]
    15d4:	e0b4      	b.n	1740 <_vprintk+0x23c>
				}
				goto still_might_format;
			case 'l':
				long_ctr++;
    15d6:	9b05      	ldr	r3, [sp, #20]
    15d8:	3301      	adds	r3, #1
    15da:	9305      	str	r3, [sp, #20]
    15dc:	e0ab      	b.n	1736 <_vprintk+0x232>
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d;
				if (long_ctr < 2) {
    15de:	9b05      	ldr	r3, [sp, #20]
    15e0:	2b01      	cmp	r3, #1
    15e2:	dc02      	bgt.n	15ea <_vprintk+0xe6>
					d = va_arg(ap, long);
    15e4:	6827      	ldr	r7, [r4, #0]
    15e6:	3404      	adds	r4, #4
    15e8:	e006      	b.n	15f8 <_vprintk+0xf4>
				} else {
					d = (long)va_arg(ap, long long);
    15ea:	3407      	adds	r4, #7
    15ec:	0023      	movs	r3, r4
    15ee:	2207      	movs	r2, #7
    15f0:	4393      	bics	r3, r2
    15f2:	001c      	movs	r4, r3
    15f4:	681f      	ldr	r7, [r3, #0]
    15f6:	3408      	adds	r4, #8
				}

				if (d < 0) {
    15f8:	2f00      	cmp	r7, #0
    15fa:	da06      	bge.n	160a <_vprintk+0x106>
					out((int)'-', ctx);
    15fc:	0031      	movs	r1, r6
    15fe:	202d      	movs	r0, #45	; 0x2d
    1600:	47a8      	blx	r5
					d = -d;
					min_width--;
    1602:	9b04      	ldr	r3, [sp, #16]
					d = (long)va_arg(ap, long long);
				}

				if (d < 0) {
					out((int)'-', ctx);
					d = -d;
    1604:	427f      	negs	r7, r7
					min_width--;
    1606:	3b01      	subs	r3, #1
    1608:	9304      	str	r3, [sp, #16]
				}
				_printk_dec_ulong(out, ctx, d, padding,
    160a:	9b04      	ldr	r3, [sp, #16]
    160c:	003a      	movs	r2, r7
    160e:	9300      	str	r3, [sp, #0]
    1610:	9b03      	ldr	r3, [sp, #12]
    1612:	e00f      	b.n	1634 <_vprintk+0x130>
				break;
			}
			case 'u': {
				unsigned long u;

				if (long_ctr < 2) {
    1614:	9b05      	ldr	r3, [sp, #20]
    1616:	2b01      	cmp	r3, #1
    1618:	dc02      	bgt.n	1620 <_vprintk+0x11c>
					u = va_arg(ap, unsigned long);
    161a:	6822      	ldr	r2, [r4, #0]
    161c:	3404      	adds	r4, #4
    161e:	e006      	b.n	162e <_vprintk+0x12a>
				} else {
					u = (unsigned long)va_arg(ap,
    1620:	3407      	adds	r4, #7
    1622:	0023      	movs	r3, r4
    1624:	2207      	movs	r2, #7
    1626:	4393      	bics	r3, r2
    1628:	001c      	movs	r4, r3
    162a:	681a      	ldr	r2, [r3, #0]
    162c:	3408      	adds	r4, #8
							unsigned long long);
				}
				_printk_dec_ulong(out, ctx, u, padding,
    162e:	9b04      	ldr	r3, [sp, #16]
    1630:	9300      	str	r3, [sp, #0]
    1632:	9b03      	ldr	r3, [sp, #12]
    1634:	0031      	movs	r1, r6
    1636:	0028      	movs	r0, r5
    1638:	f7ff fef0 	bl	141c <_printk_dec_ulong>
    163c:	e073      	b.n	1726 <_vprintk+0x222>
						  min_width);
				break;
			}
			case 'p':
				  out('0', ctx);
    163e:	0031      	movs	r1, r6
    1640:	2030      	movs	r0, #48	; 0x30
    1642:	47a8      	blx	r5
				  out('x', ctx);
    1644:	0031      	movs	r1, r6
    1646:	2078      	movs	r0, #120	; 0x78
    1648:	47a8      	blx	r5
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
				  min_width = 8;
    164a:	2308      	movs	r3, #8
    164c:	9304      	str	r3, [sp, #16]
			}
			case 'p':
				  out('0', ctx);
				  out('x', ctx);
				  /* left-pad pointers with zeros */
				  padding = PAD_ZERO_BEFORE;
    164e:	3b07      	subs	r3, #7
    1650:	9303      	str	r3, [sp, #12]
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x;

				if (long_ctr < 2) {
    1652:	9b05      	ldr	r3, [sp, #20]
    1654:	2b01      	cmp	r3, #1
    1656:	dc03      	bgt.n	1660 <_vprintk+0x15c>
					x = va_arg(ap, unsigned long);
    1658:	6823      	ldr	r3, [r4, #0]
    165a:	3404      	adds	r4, #4
    165c:	9309      	str	r3, [sp, #36]	; 0x24
    165e:	e007      	b.n	1670 <_vprintk+0x16c>
				} else {
					x = (unsigned long)va_arg(ap,
    1660:	3407      	adds	r4, #7
    1662:	0023      	movs	r3, r4
    1664:	2207      	movs	r2, #7
    1666:	4393      	bics	r3, r2
    1668:	001c      	movs	r4, r3
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	3408      	adds	r4, #8
    166e:	9309      	str	r3, [sp, #36]	; 0x24
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
    1670:	2308      	movs	r3, #8
    1672:	9306      	str	r3, [sp, #24]
	int digits = 0;
    1674:	2300      	movs	r3, #0
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
    1676:	2708      	movs	r7, #8
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    1678:	9308      	str	r3, [sp, #32]
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
    167a:	930b      	str	r3, [sp, #44]	; 0x2c
	int remaining = 8; /* 8 digits max */
	int digits = 0;

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    167c:	3f01      	subs	r7, #1
    167e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1680:	00bb      	lsls	r3, r7, #2
    1682:	40d8      	lsrs	r0, r3
    1684:	230f      	movs	r3, #15
    1686:	4018      	ands	r0, r3

		if (nibble || found_largest_digit || size == 1) {
    1688:	d105      	bne.n	1696 <_vprintk+0x192>
    168a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    168c:	2b00      	cmp	r3, #0
    168e:	d107      	bne.n	16a0 <_vprintk+0x19c>
    1690:	2f00      	cmp	r7, #0
    1692:	d111      	bne.n	16b8 <_vprintk+0x1b4>
    1694:	e004      	b.n	16a0 <_vprintk+0x19c>
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    1696:	2357      	movs	r3, #87	; 0x57
    1698:	2809      	cmp	r0, #9
    169a:	d802      	bhi.n	16a2 <_vprintk+0x19e>
    169c:	3b27      	subs	r3, #39	; 0x27
    169e:	e000      	b.n	16a2 <_vprintk+0x19e>
    16a0:	2330      	movs	r3, #48	; 0x30
			out((int)nibble, ctx);
    16a2:	18c0      	adds	r0, r0, r3
    16a4:	0031      	movs	r1, r6
    16a6:	47a8      	blx	r5
			digits++;
    16a8:	9b08      	ldr	r3, [sp, #32]
    16aa:	3301      	adds	r3, #1
    16ac:	9308      	str	r3, [sp, #32]
    16ae:	9b06      	ldr	r3, [sp, #24]
    16b0:	930a      	str	r3, [sp, #40]	; 0x28

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
    16b2:	2301      	movs	r3, #1
    16b4:	930b      	str	r3, [sp, #44]	; 0x2c
    16b6:	e012      	b.n	16de <_vprintk+0x1da>
			out((int)nibble, ctx);
			digits++;
			continue;
		}

		if (remaining-- <= min_width) {
    16b8:	9b06      	ldr	r3, [sp, #24]
    16ba:	9a06      	ldr	r2, [sp, #24]
    16bc:	3b01      	subs	r3, #1
    16be:	930a      	str	r3, [sp, #40]	; 0x28
    16c0:	9b04      	ldr	r3, [sp, #16]
    16c2:	4293      	cmp	r3, r2
    16c4:	db0b      	blt.n	16de <_vprintk+0x1da>
			if (padding == PAD_ZERO_BEFORE) {
    16c6:	9b03      	ldr	r3, [sp, #12]
    16c8:	2b01      	cmp	r3, #1
    16ca:	d102      	bne.n	16d2 <_vprintk+0x1ce>
				out('0', ctx);
    16cc:	0031      	movs	r1, r6
    16ce:	2030      	movs	r0, #48	; 0x30
    16d0:	e004      	b.n	16dc <_vprintk+0x1d8>
			} else if (padding == PAD_SPACE_BEFORE) {
    16d2:	9b03      	ldr	r3, [sp, #12]
    16d4:	2b02      	cmp	r3, #2
    16d6:	d102      	bne.n	16de <_vprintk+0x1da>
				out(' ', ctx);
    16d8:	0031      	movs	r1, r6
    16da:	2020      	movs	r0, #32
    16dc:	47a8      	blx	r5
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;

	for (; size; size--) {
    16de:	2f00      	cmp	r7, #0
    16e0:	d002      	beq.n	16e8 <_vprintk+0x1e4>
    16e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    16e4:	9306      	str	r3, [sp, #24]
    16e6:	e7c9      	b.n	167c <_vprintk+0x178>
				out(' ', ctx);
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    16e8:	9b03      	ldr	r3, [sp, #12]
    16ea:	2b03      	cmp	r3, #3
    16ec:	d128      	bne.n	1740 <_vprintk+0x23c>
    16ee:	9b04      	ldr	r3, [sp, #16]
    16f0:	005f      	lsls	r7, r3, #1
    16f2:	9b08      	ldr	r3, [sp, #32]
    16f4:	1aff      	subs	r7, r7, r3
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
    16f6:	2f00      	cmp	r7, #0
    16f8:	dd15      	ble.n	1726 <_vprintk+0x222>
			out(' ', ctx);
    16fa:	0031      	movs	r1, r6
    16fc:	2020      	movs	r0, #32
    16fe:	47a8      	blx	r5
    1700:	3f01      	subs	r7, #1
    1702:	e7f8      	b.n	16f6 <_vprintk+0x1f2>
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);

				while (*s)
    1704:	7820      	ldrb	r0, [r4, #0]
    1706:	2800      	cmp	r0, #0
    1708:	d003      	beq.n	1712 <_vprintk+0x20e>
					out((int)(*s++), ctx);
    170a:	0031      	movs	r1, r6
    170c:	3401      	adds	r4, #1
    170e:	47a8      	blx	r5
    1710:	e7f8      	b.n	1704 <_vprintk+0x200>
				_printk_hex_ulong(out, ctx, x, padding,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    1712:	003c      	movs	r4, r7
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
    1714:	0007      	movs	r7, r0
    1716:	e013      	b.n	1740 <_vprintk+0x23c>
			case '%': {
				out((int)'%', ctx);
				break;
			}
			default:
				out((int)'%', ctx);
    1718:	0031      	movs	r1, r6
    171a:	2025      	movs	r0, #37	; 0x25
    171c:	47a8      	blx	r5
				out((int)*fmt, ctx);
    171e:	9b07      	ldr	r3, [sp, #28]
    1720:	7818      	ldrb	r0, [r3, #0]
    1722:	0031      	movs	r1, r6
    1724:	47a8      	blx	r5
				break;
			}
			might_format = 0;
    1726:	2700      	movs	r7, #0
				break;
			}
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
    1728:	e00a      	b.n	1740 <_vprintk+0x23c>
		if (!might_format) {
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
    172a:	2301      	movs	r3, #1
    172c:	425b      	negs	r3, r3
    172e:	9304      	str	r3, [sp, #16]
				padding = PAD_NONE;
    1730:	003b      	movs	r3, r7
				long_ctr = 0;
    1732:	9705      	str	r7, [sp, #20]
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
				padding = PAD_NONE;
    1734:	9303      	str	r3, [sp, #12]
				long_ctr = 0;
			}
		} else {
			switch (*fmt) {
    1736:	2701      	movs	r7, #1
    1738:	e002      	b.n	1740 <_vprintk+0x23c>
			case '-':
				padding = PAD_SPACE_AFTER;
				goto still_might_format;
			case '0':
				if (min_width < 0 && padding == PAD_NONE) {
					padding = PAD_ZERO_BEFORE;
    173a:	2301      	movs	r3, #1
    173c:	001f      	movs	r7, r3
    173e:	9303      	str	r3, [sp, #12]
				break;
			}
			might_format = 0;
		}
still_might_format:
		++fmt;
    1740:	9b07      	ldr	r3, [sp, #28]
    1742:	3301      	adds	r3, #1
    1744:	9307      	str	r3, [sp, #28]
    1746:	e6ea      	b.n	151e <_vprintk+0x1a>
	}
}
    1748:	b00d      	add	sp, #52	; 0x34
    174a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000174c <vprintk>:
	ctx->count++;
	return _char_out(c);
}

int vprintk(const char *fmt, va_list ap)
{
    174c:	b507      	push	{r0, r1, r2, lr}
    174e:	000b      	movs	r3, r1
	struct out_context ctx = { 0 };
    1750:	2100      	movs	r1, #0
	ctx->count++;
	return _char_out(c);
}

int vprintk(const char *fmt, va_list ap)
{
    1752:	0002      	movs	r2, r0
	struct out_context ctx = { 0 };
    1754:	9101      	str	r1, [sp, #4]

	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
    1756:	4803      	ldr	r0, [pc, #12]	; (1764 <vprintk+0x18>)
    1758:	a901      	add	r1, sp, #4
    175a:	f7ff fed3 	bl	1504 <_vprintk>
	return ctx.count;
}
    175e:	9801      	ldr	r0, [sp, #4]
    1760:	bd0e      	pop	{r1, r2, r3, pc}
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	00001409 	.word	0x00001409

00001768 <printk>:
 * @param fmt formatted string to output
 *
 * @return Number of characters printed
 */
int printk(const char *fmt, ...)
{
    1768:	b40f      	push	{r0, r1, r2, r3}
    176a:	b507      	push	{r0, r1, r2, lr}
    176c:	a904      	add	r1, sp, #16
    176e:	c901      	ldmia	r1!, {r0}
	int ret;
	va_list ap;

	va_start(ap, fmt);
    1770:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    1772:	f7ff ffeb 	bl	174c <vprintk>
	va_end(ap);

	return ret;
}
    1776:	b003      	add	sp, #12
    1778:	bc08      	pop	{r3}
    177a:	b004      	add	sp, #16
    177c:	4718      	bx	r3
	...

00001780 <snprintk>:

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1780:	b40c      	push	{r2, r3}
    1782:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    1784:	2500      	movs	r5, #0

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1786:	b085      	sub	sp, #20
    1788:	ab08      	add	r3, sp, #32
    178a:	cb04      	ldmia	r3!, {r2}
	struct str_context ctx = { str, size, 0 };
    178c:	9001      	str	r0, [sp, #4]
    178e:	9102      	str	r1, [sp, #8]

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1790:	0004      	movs	r4, r0
	struct str_context ctx = { str, size, 0 };
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1792:	a901      	add	r1, sp, #4
    1794:	4807      	ldr	r0, [pc, #28]	; (17b4 <snprintk+0x34>)
int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
	va_list ap;

	va_start(ap, fmt);
    1796:	9300      	str	r3, [sp, #0]
	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
    1798:	9503      	str	r5, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    179a:	f7ff feb3 	bl	1504 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    179e:	9803      	ldr	r0, [sp, #12]
    17a0:	9b02      	ldr	r3, [sp, #8]
    17a2:	4298      	cmp	r0, r3
    17a4:	da00      	bge.n	17a8 <snprintk+0x28>
		str[ctx.count] = '\0';
    17a6:	5425      	strb	r5, [r4, r0]
	}

	return ctx.count;
}
    17a8:	b005      	add	sp, #20
    17aa:	bc30      	pop	{r4, r5}
    17ac:	bc08      	pop	{r3}
    17ae:	b002      	add	sp, #8
    17b0:	4718      	bx	r3
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	000014cd 	.word	0x000014cd

000017b8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE, 448);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_MAX, 27);

GEN_ABS_SYM_END
    17b8:	4770      	bx	lr

000017ba <_copy>:
#define MASK_MOST_SIG_BIT 0x80
#define MASK_TWENTY_SEVEN 0x1b

uint32_t _copy(uint8_t *to, uint32_t to_len,
	       const uint8_t *from, uint32_t from_len)
{
    17ba:	b570      	push	{r4, r5, r6, lr}
    17bc:	000d      	movs	r5, r1
    17be:	001c      	movs	r4, r3
    17c0:	0011      	movs	r1, r2
	if (from_len <= to_len) {
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    17c2:	2300      	movs	r3, #0
#define MASK_TWENTY_SEVEN 0x1b

uint32_t _copy(uint8_t *to, uint32_t to_len,
	       const uint8_t *from, uint32_t from_len)
{
	if (from_len <= to_len) {
    17c4:	42ac      	cmp	r4, r5
    17c6:	d803      	bhi.n	17d0 <_copy+0x16>
		(void)memcpy(to, from, from_len);
    17c8:	0022      	movs	r2, r4
    17ca:	f7ff fdcb 	bl	1364 <memcpy>
		return from_len;
    17ce:	0023      	movs	r3, r4
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    17d0:	0018      	movs	r0, r3
    17d2:	bd70      	pop	{r4, r5, r6, pc}

000017d4 <_set>:

void _set(void *to, uint8_t val, uint32_t len)
{
    17d4:	b510      	push	{r4, lr}
	(void)memset(to, val, len);
    17d6:	f7ff fdef 	bl	13b8 <memset>
}
    17da:	bd10      	pop	{r4, pc}

000017dc <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    17dc:	231b      	movs	r3, #27
    17de:	09c2      	lsrs	r2, r0, #7
    17e0:	4353      	muls	r3, r2
    17e2:	0040      	lsls	r0, r0, #1
    17e4:	4058      	eors	r0, r3
    17e6:	b2c0      	uxtb	r0, r0
}
    17e8:	4770      	bx	lr

000017ea <add_round_key>:
	(void)_copy(s, sizeof(t), t, sizeof(t));
}

static inline void add_round_key(uint8_t *s, const uint32_t *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    17ea:	680b      	ldr	r3, [r1, #0]
    17ec:	0e1a      	lsrs	r2, r3, #24
    17ee:	7803      	ldrb	r3, [r0, #0]
    17f0:	4053      	eors	r3, r2
    17f2:	7003      	strb	r3, [r0, #0]
    17f4:	680b      	ldr	r3, [r1, #0]
    17f6:	0c1a      	lsrs	r2, r3, #16
    17f8:	7843      	ldrb	r3, [r0, #1]
    17fa:	4053      	eors	r3, r2
    17fc:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    17fe:	680b      	ldr	r3, [r1, #0]
    1800:	0a1a      	lsrs	r2, r3, #8
    1802:	7883      	ldrb	r3, [r0, #2]
    1804:	4053      	eors	r3, r2
    1806:	7083      	strb	r3, [r0, #2]
    1808:	680a      	ldr	r2, [r1, #0]
    180a:	78c3      	ldrb	r3, [r0, #3]
    180c:	4053      	eors	r3, r2
    180e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    1810:	684b      	ldr	r3, [r1, #4]
    1812:	0e1a      	lsrs	r2, r3, #24
    1814:	7903      	ldrb	r3, [r0, #4]
    1816:	4053      	eors	r3, r2
    1818:	7103      	strb	r3, [r0, #4]
    181a:	684b      	ldr	r3, [r1, #4]
    181c:	0c1a      	lsrs	r2, r3, #16
    181e:	7943      	ldrb	r3, [r0, #5]
    1820:	4053      	eors	r3, r2
    1822:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    1824:	684b      	ldr	r3, [r1, #4]
    1826:	0a1a      	lsrs	r2, r3, #8
    1828:	7983      	ldrb	r3, [r0, #6]
    182a:	4053      	eors	r3, r2
    182c:	7183      	strb	r3, [r0, #6]
    182e:	684a      	ldr	r2, [r1, #4]
    1830:	79c3      	ldrb	r3, [r0, #7]
    1832:	4053      	eors	r3, r2
    1834:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    1836:	688b      	ldr	r3, [r1, #8]
    1838:	0e1a      	lsrs	r2, r3, #24
    183a:	7a03      	ldrb	r3, [r0, #8]
    183c:	4053      	eors	r3, r2
    183e:	7203      	strb	r3, [r0, #8]
    1840:	688b      	ldr	r3, [r1, #8]
    1842:	0c1a      	lsrs	r2, r3, #16
    1844:	7a43      	ldrb	r3, [r0, #9]
    1846:	4053      	eors	r3, r2
    1848:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    184a:	688b      	ldr	r3, [r1, #8]
    184c:	0a1a      	lsrs	r2, r3, #8
    184e:	7a83      	ldrb	r3, [r0, #10]
    1850:	4053      	eors	r3, r2
    1852:	7283      	strb	r3, [r0, #10]
    1854:	688a      	ldr	r2, [r1, #8]
    1856:	7ac3      	ldrb	r3, [r0, #11]
    1858:	4053      	eors	r3, r2
    185a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    185c:	68cb      	ldr	r3, [r1, #12]
    185e:	0e1a      	lsrs	r2, r3, #24
    1860:	7b03      	ldrb	r3, [r0, #12]
    1862:	4053      	eors	r3, r2
    1864:	7303      	strb	r3, [r0, #12]
    1866:	68cb      	ldr	r3, [r1, #12]
    1868:	0c1a      	lsrs	r2, r3, #16
    186a:	7b43      	ldrb	r3, [r0, #13]
    186c:	4053      	eors	r3, r2
    186e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    1870:	68cb      	ldr	r3, [r1, #12]
    1872:	0a1a      	lsrs	r2, r3, #8
    1874:	7b83      	ldrb	r3, [r0, #14]
    1876:	4053      	eors	r3, r2
    1878:	7383      	strb	r3, [r0, #14]
    187a:	68ca      	ldr	r2, [r1, #12]
    187c:	7bc3      	ldrb	r3, [r0, #15]
    187e:	4053      	eors	r3, r2
    1880:	73c3      	strb	r3, [r0, #15]
}
    1882:	4770      	bx	lr

00001884 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const uint32_t *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    1884:	680b      	ldr	r3, [r1, #0]
    1886:	0e1a      	lsrs	r2, r3, #24
    1888:	7803      	ldrb	r3, [r0, #0]
    188a:	4053      	eors	r3, r2
    188c:	7003      	strb	r3, [r0, #0]
    188e:	680b      	ldr	r3, [r1, #0]
    1890:	0c1a      	lsrs	r2, r3, #16
    1892:	7843      	ldrb	r3, [r0, #1]
    1894:	4053      	eors	r3, r2
    1896:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    1898:	680b      	ldr	r3, [r1, #0]
    189a:	0a1a      	lsrs	r2, r3, #8
    189c:	7883      	ldrb	r3, [r0, #2]
    189e:	4053      	eors	r3, r2
    18a0:	7083      	strb	r3, [r0, #2]
    18a2:	680a      	ldr	r2, [r1, #0]
    18a4:	78c3      	ldrb	r3, [r0, #3]
    18a6:	4053      	eors	r3, r2
    18a8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    18aa:	684b      	ldr	r3, [r1, #4]
    18ac:	0e1a      	lsrs	r2, r3, #24
    18ae:	7903      	ldrb	r3, [r0, #4]
    18b0:	4053      	eors	r3, r2
    18b2:	7103      	strb	r3, [r0, #4]
    18b4:	684b      	ldr	r3, [r1, #4]
    18b6:	0c1a      	lsrs	r2, r3, #16
    18b8:	7943      	ldrb	r3, [r0, #5]
    18ba:	4053      	eors	r3, r2
    18bc:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    18be:	684b      	ldr	r3, [r1, #4]
    18c0:	0a1a      	lsrs	r2, r3, #8
    18c2:	7983      	ldrb	r3, [r0, #6]
    18c4:	4053      	eors	r3, r2
    18c6:	7183      	strb	r3, [r0, #6]
    18c8:	684a      	ldr	r2, [r1, #4]
    18ca:	79c3      	ldrb	r3, [r0, #7]
    18cc:	4053      	eors	r3, r2
    18ce:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    18d0:	688b      	ldr	r3, [r1, #8]
    18d2:	0e1a      	lsrs	r2, r3, #24
    18d4:	7a03      	ldrb	r3, [r0, #8]
    18d6:	4053      	eors	r3, r2
    18d8:	7203      	strb	r3, [r0, #8]
    18da:	688b      	ldr	r3, [r1, #8]
    18dc:	0c1a      	lsrs	r2, r3, #16
    18de:	7a43      	ldrb	r3, [r0, #9]
    18e0:	4053      	eors	r3, r2
    18e2:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    18e4:	688b      	ldr	r3, [r1, #8]
    18e6:	0a1a      	lsrs	r2, r3, #8
    18e8:	7a83      	ldrb	r3, [r0, #10]
    18ea:	4053      	eors	r3, r2
    18ec:	7283      	strb	r3, [r0, #10]
    18ee:	688a      	ldr	r2, [r1, #8]
    18f0:	7ac3      	ldrb	r3, [r0, #11]
    18f2:	4053      	eors	r3, r2
    18f4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    18f6:	68cb      	ldr	r3, [r1, #12]
    18f8:	0e1a      	lsrs	r2, r3, #24
    18fa:	7b03      	ldrb	r3, [r0, #12]
    18fc:	4053      	eors	r3, r2
    18fe:	7303      	strb	r3, [r0, #12]
    1900:	68cb      	ldr	r3, [r1, #12]
    1902:	0c1a      	lsrs	r2, r3, #16
    1904:	7b43      	ldrb	r3, [r0, #13]
    1906:	4053      	eors	r3, r2
    1908:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    190a:	68cb      	ldr	r3, [r1, #12]
    190c:	0a1a      	lsrs	r2, r3, #8
    190e:	7b83      	ldrb	r3, [r0, #14]
    1910:	4053      	eors	r3, r2
    1912:	7383      	strb	r3, [r0, #14]
    1914:	68ca      	ldr	r2, [r1, #12]
    1916:	7bc3      	ldrb	r3, [r0, #15]
    1918:	4053      	eors	r3, r2
    191a:	73c3      	strb	r3, [r0, #15]
}
    191c:	4770      	bx	lr

0000191e <mult_row_column>:
#define multb(a)(mult8(a)^_double_byte(a)^(a))
#define multd(a)(mult8(a)^_double_byte(_double_byte(a))^(a))
#define multe(a)(mult8(a)^_double_byte(_double_byte(a))^_double_byte(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    191e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1920:	b087      	sub	sp, #28
    1922:	9000      	str	r0, [sp, #0]
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
    1924:	7808      	ldrb	r0, [r1, #0]
#define multb(a)(mult8(a)^_double_byte(a)^(a))
#define multd(a)(mult8(a)^_double_byte(_double_byte(a))^(a))
#define multe(a)(mult8(a)^_double_byte(_double_byte(a))^_double_byte(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    1926:	000e      	movs	r6, r1
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
    1928:	f7ff ff58 	bl	17dc <_double_byte>
    192c:	f7ff ff56 	bl	17dc <_double_byte>
    1930:	f7ff ff54 	bl	17dc <_double_byte>
    1934:	0007      	movs	r7, r0
    1936:	7830      	ldrb	r0, [r6, #0]
    1938:	f7ff ff50 	bl	17dc <_double_byte>
    193c:	f7ff ff4e 	bl	17dc <_double_byte>
    1940:	9001      	str	r0, [sp, #4]
    1942:	7830      	ldrb	r0, [r6, #0]
    1944:	f7ff ff4a 	bl	17dc <_double_byte>
    1948:	9002      	str	r0, [sp, #8]
    194a:	7870      	ldrb	r0, [r6, #1]
    194c:	f7ff ff46 	bl	17dc <_double_byte>
    1950:	f7ff ff44 	bl	17dc <_double_byte>
    1954:	f7ff ff42 	bl	17dc <_double_byte>
    1958:	9003      	str	r0, [sp, #12]
    195a:	7870      	ldrb	r0, [r6, #1]
    195c:	f7ff ff3e 	bl	17dc <_double_byte>
    1960:	9004      	str	r0, [sp, #16]
    1962:	78b0      	ldrb	r0, [r6, #2]
    1964:	7874      	ldrb	r4, [r6, #1]
    1966:	f7ff ff39 	bl	17dc <_double_byte>
    196a:	f7ff ff37 	bl	17dc <_double_byte>
    196e:	f7ff ff35 	bl	17dc <_double_byte>
    1972:	9005      	str	r0, [sp, #20]
    1974:	78b0      	ldrb	r0, [r6, #2]
    1976:	f7ff ff31 	bl	17dc <_double_byte>
    197a:	f7ff ff2f 	bl	17dc <_double_byte>
    197e:	78b3      	ldrb	r3, [r6, #2]
    1980:	0005      	movs	r5, r0
    1982:	78f0      	ldrb	r0, [r6, #3]
    1984:	405c      	eors	r4, r3
    1986:	f7ff ff29 	bl	17dc <_double_byte>
    198a:	f7ff ff27 	bl	17dc <_double_byte>
    198e:	f7ff ff25 	bl	17dc <_double_byte>
    1992:	78f3      	ldrb	r3, [r6, #3]
    1994:	405c      	eors	r4, r3
    1996:	9b01      	ldr	r3, [sp, #4]
    1998:	4067      	eors	r7, r4
    199a:	407b      	eors	r3, r7
    199c:	001f      	movs	r7, r3
    199e:	9b02      	ldr	r3, [sp, #8]
    19a0:	407b      	eors	r3, r7
    19a2:	001f      	movs	r7, r3
    19a4:	9b03      	ldr	r3, [sp, #12]
    19a6:	407b      	eors	r3, r7
    19a8:	001f      	movs	r7, r3
    19aa:	9b04      	ldr	r3, [sp, #16]
    19ac:	407b      	eors	r3, r7
    19ae:	001f      	movs	r7, r3
    19b0:	9b05      	ldr	r3, [sp, #20]
    19b2:	407b      	eors	r3, r7
    19b4:	405d      	eors	r5, r3
    19b6:	9b00      	ldr	r3, [sp, #0]
    19b8:	4068      	eors	r0, r5
    19ba:	7018      	strb	r0, [r3, #0]
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
    19bc:	7830      	ldrb	r0, [r6, #0]
    19be:	f7ff ff0d 	bl	17dc <_double_byte>
    19c2:	f7ff ff0b 	bl	17dc <_double_byte>
    19c6:	f7ff ff09 	bl	17dc <_double_byte>
    19ca:	9002      	str	r0, [sp, #8]
    19cc:	7870      	ldrb	r0, [r6, #1]
    19ce:	7834      	ldrb	r4, [r6, #0]
    19d0:	f7ff ff04 	bl	17dc <_double_byte>
    19d4:	f7ff ff02 	bl	17dc <_double_byte>
    19d8:	f7ff ff00 	bl	17dc <_double_byte>
    19dc:	0007      	movs	r7, r0
    19de:	7870      	ldrb	r0, [r6, #1]
    19e0:	f7ff fefc 	bl	17dc <_double_byte>
    19e4:	f7ff fefa 	bl	17dc <_double_byte>
    19e8:	9003      	str	r0, [sp, #12]
    19ea:	7870      	ldrb	r0, [r6, #1]
    19ec:	f7ff fef6 	bl	17dc <_double_byte>
    19f0:	9004      	str	r0, [sp, #16]
    19f2:	78b0      	ldrb	r0, [r6, #2]
    19f4:	f7ff fef2 	bl	17dc <_double_byte>
    19f8:	f7ff fef0 	bl	17dc <_double_byte>
    19fc:	f7ff feee 	bl	17dc <_double_byte>
    1a00:	9005      	str	r0, [sp, #20]
    1a02:	78b0      	ldrb	r0, [r6, #2]
    1a04:	f7ff feea 	bl	17dc <_double_byte>
    1a08:	78b3      	ldrb	r3, [r6, #2]
    1a0a:	0005      	movs	r5, r0
    1a0c:	405c      	eors	r4, r3
    1a0e:	78f0      	ldrb	r0, [r6, #3]
    1a10:	9401      	str	r4, [sp, #4]
    1a12:	f7ff fee3 	bl	17dc <_double_byte>
    1a16:	f7ff fee1 	bl	17dc <_double_byte>
    1a1a:	f7ff fedf 	bl	17dc <_double_byte>
    1a1e:	0004      	movs	r4, r0
    1a20:	78f0      	ldrb	r0, [r6, #3]
    1a22:	f7ff fedb 	bl	17dc <_double_byte>
    1a26:	f7ff fed9 	bl	17dc <_double_byte>
    1a2a:	78f3      	ldrb	r3, [r6, #3]
    1a2c:	9a01      	ldr	r2, [sp, #4]
    1a2e:	4053      	eors	r3, r2
    1a30:	9a02      	ldr	r2, [sp, #8]
    1a32:	405a      	eors	r2, r3
    1a34:	9b03      	ldr	r3, [sp, #12]
    1a36:	4057      	eors	r7, r2
    1a38:	407b      	eors	r3, r7
    1a3a:	001f      	movs	r7, r3
    1a3c:	9b04      	ldr	r3, [sp, #16]
    1a3e:	407b      	eors	r3, r7
    1a40:	001f      	movs	r7, r3
    1a42:	9b05      	ldr	r3, [sp, #20]
    1a44:	407b      	eors	r3, r7
    1a46:	405d      	eors	r5, r3
    1a48:	406c      	eors	r4, r5
    1a4a:	9b00      	ldr	r3, [sp, #0]
    1a4c:	4060      	eors	r0, r4
    1a4e:	7058      	strb	r0, [r3, #1]
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
    1a50:	7830      	ldrb	r0, [r6, #0]
    1a52:	f7ff fec3 	bl	17dc <_double_byte>
    1a56:	f7ff fec1 	bl	17dc <_double_byte>
    1a5a:	f7ff febf 	bl	17dc <_double_byte>
    1a5e:	9002      	str	r0, [sp, #8]
    1a60:	7830      	ldrb	r0, [r6, #0]
    1a62:	f7ff febb 	bl	17dc <_double_byte>
    1a66:	f7ff feb9 	bl	17dc <_double_byte>
    1a6a:	0007      	movs	r7, r0
    1a6c:	7870      	ldrb	r0, [r6, #1]
    1a6e:	7834      	ldrb	r4, [r6, #0]
    1a70:	f7ff feb4 	bl	17dc <_double_byte>
    1a74:	f7ff feb2 	bl	17dc <_double_byte>
    1a78:	f7ff feb0 	bl	17dc <_double_byte>
    1a7c:	7873      	ldrb	r3, [r6, #1]
    1a7e:	9003      	str	r0, [sp, #12]
    1a80:	405c      	eors	r4, r3
    1a82:	78b0      	ldrb	r0, [r6, #2]
    1a84:	9401      	str	r4, [sp, #4]
    1a86:	f7ff fea9 	bl	17dc <_double_byte>
    1a8a:	f7ff fea7 	bl	17dc <_double_byte>
    1a8e:	f7ff fea5 	bl	17dc <_double_byte>
    1a92:	9004      	str	r0, [sp, #16]
    1a94:	78b0      	ldrb	r0, [r6, #2]
    1a96:	f7ff fea1 	bl	17dc <_double_byte>
    1a9a:	f7ff fe9f 	bl	17dc <_double_byte>
    1a9e:	9005      	str	r0, [sp, #20]
    1aa0:	78b0      	ldrb	r0, [r6, #2]
    1aa2:	f7ff fe9b 	bl	17dc <_double_byte>
    1aa6:	0005      	movs	r5, r0
    1aa8:	78f0      	ldrb	r0, [r6, #3]
    1aaa:	f7ff fe97 	bl	17dc <_double_byte>
    1aae:	f7ff fe95 	bl	17dc <_double_byte>
    1ab2:	f7ff fe93 	bl	17dc <_double_byte>
    1ab6:	0004      	movs	r4, r0
    1ab8:	78f0      	ldrb	r0, [r6, #3]
    1aba:	f7ff fe8f 	bl	17dc <_double_byte>
    1abe:	78f3      	ldrb	r3, [r6, #3]
    1ac0:	9a01      	ldr	r2, [sp, #4]
    1ac2:	4053      	eors	r3, r2
    1ac4:	9a02      	ldr	r2, [sp, #8]
    1ac6:	405a      	eors	r2, r3
    1ac8:	9b03      	ldr	r3, [sp, #12]
    1aca:	4057      	eors	r7, r2
    1acc:	407b      	eors	r3, r7
    1ace:	001f      	movs	r7, r3
    1ad0:	9b04      	ldr	r3, [sp, #16]
    1ad2:	407b      	eors	r3, r7
    1ad4:	001f      	movs	r7, r3
    1ad6:	9b05      	ldr	r3, [sp, #20]
    1ad8:	407b      	eors	r3, r7
    1ada:	405d      	eors	r5, r3
    1adc:	406c      	eors	r4, r5
    1ade:	9b00      	ldr	r3, [sp, #0]
    1ae0:	4060      	eors	r0, r4
    1ae2:	7098      	strb	r0, [r3, #2]
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
    1ae4:	7830      	ldrb	r0, [r6, #0]
    1ae6:	f7ff fe79 	bl	17dc <_double_byte>
    1aea:	f7ff fe77 	bl	17dc <_double_byte>
    1aee:	f7ff fe75 	bl	17dc <_double_byte>
    1af2:	0007      	movs	r7, r0
    1af4:	7830      	ldrb	r0, [r6, #0]
    1af6:	f7ff fe71 	bl	17dc <_double_byte>
    1afa:	7833      	ldrb	r3, [r6, #0]
    1afc:	9002      	str	r0, [sp, #8]
    1afe:	7870      	ldrb	r0, [r6, #1]
    1b00:	9301      	str	r3, [sp, #4]
    1b02:	f7ff fe6b 	bl	17dc <_double_byte>
    1b06:	f7ff fe69 	bl	17dc <_double_byte>
    1b0a:	f7ff fe67 	bl	17dc <_double_byte>
    1b0e:	0005      	movs	r5, r0
    1b10:	7870      	ldrb	r0, [r6, #1]
    1b12:	f7ff fe63 	bl	17dc <_double_byte>
    1b16:	f7ff fe61 	bl	17dc <_double_byte>
    1b1a:	7873      	ldrb	r3, [r6, #1]
    1b1c:	9a01      	ldr	r2, [sp, #4]
    1b1e:	0004      	movs	r4, r0
    1b20:	405a      	eors	r2, r3
    1b22:	78b0      	ldrb	r0, [r6, #2]
    1b24:	9201      	str	r2, [sp, #4]
    1b26:	f7ff fe59 	bl	17dc <_double_byte>
    1b2a:	f7ff fe57 	bl	17dc <_double_byte>
    1b2e:	f7ff fe55 	bl	17dc <_double_byte>
    1b32:	9a01      	ldr	r2, [sp, #4]
    1b34:	78b3      	ldrb	r3, [r6, #2]
    1b36:	4053      	eors	r3, r2
    1b38:	405f      	eors	r7, r3
    1b3a:	9b02      	ldr	r3, [sp, #8]
    1b3c:	407b      	eors	r3, r7
    1b3e:	405d      	eors	r5, r3
    1b40:	406c      	eors	r4, r5
    1b42:	4044      	eors	r4, r0
    1b44:	78f0      	ldrb	r0, [r6, #3]
    1b46:	f7ff fe49 	bl	17dc <_double_byte>
    1b4a:	f7ff fe47 	bl	17dc <_double_byte>
    1b4e:	f7ff fe45 	bl	17dc <_double_byte>
    1b52:	0005      	movs	r5, r0
    1b54:	78f0      	ldrb	r0, [r6, #3]
    1b56:	f7ff fe41 	bl	17dc <_double_byte>
    1b5a:	f7ff fe3f 	bl	17dc <_double_byte>
    1b5e:	0007      	movs	r7, r0
    1b60:	78f0      	ldrb	r0, [r6, #3]
    1b62:	f7ff fe3b 	bl	17dc <_double_byte>
    1b66:	b2e4      	uxtb	r4, r4
    1b68:	406c      	eors	r4, r5
    1b6a:	4067      	eors	r7, r4
    1b6c:	9b00      	ldr	r3, [sp, #0]
    1b6e:	4078      	eors	r0, r7
    1b70:	70d8      	strb	r0, [r3, #3]
}
    1b72:	b007      	add	sp, #28
    1b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001b76 <mult_row_column>:
}

#define triple(a)(_double_byte(a)^(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    1b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b78:	0006      	movs	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    1b7a:	7808      	ldrb	r0, [r1, #0]
}

#define triple(a)(_double_byte(a)^(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
    1b7c:	000c      	movs	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    1b7e:	f7ff fe2d 	bl	17dc <_double_byte>
    1b82:	0005      	movs	r5, r0
    1b84:	7860      	ldrb	r0, [r4, #1]
    1b86:	f7ff fe29 	bl	17dc <_double_byte>
    1b8a:	7862      	ldrb	r2, [r4, #1]
    1b8c:	78a3      	ldrb	r3, [r4, #2]
    1b8e:	4053      	eors	r3, r2
    1b90:	78e2      	ldrb	r2, [r4, #3]
    1b92:	4053      	eors	r3, r2
    1b94:	406b      	eors	r3, r5
    1b96:	4058      	eors	r0, r3
    1b98:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    1b9a:	7860      	ldrb	r0, [r4, #1]
    1b9c:	7827      	ldrb	r7, [r4, #0]
    1b9e:	f7ff fe1d 	bl	17dc <_double_byte>
    1ba2:	0005      	movs	r5, r0
    1ba4:	78a0      	ldrb	r0, [r4, #2]
    1ba6:	f7ff fe19 	bl	17dc <_double_byte>
    1baa:	78a3      	ldrb	r3, [r4, #2]
    1bac:	78e2      	ldrb	r2, [r4, #3]
    1bae:	407b      	eors	r3, r7
    1bb0:	4053      	eors	r3, r2
    1bb2:	406b      	eors	r3, r5
    1bb4:	4058      	eors	r0, r3
    1bb6:	7070      	strb	r0, [r6, #1]
    1bb8:	7863      	ldrb	r3, [r4, #1]
    1bba:	7827      	ldrb	r7, [r4, #0]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    1bbc:	78a0      	ldrb	r0, [r4, #2]
    1bbe:	405f      	eors	r7, r3
    1bc0:	f7ff fe0c 	bl	17dc <_double_byte>
    1bc4:	0005      	movs	r5, r0
    1bc6:	78e0      	ldrb	r0, [r4, #3]
    1bc8:	f7ff fe08 	bl	17dc <_double_byte>
    1bcc:	78e3      	ldrb	r3, [r4, #3]
    1bce:	407b      	eors	r3, r7
    1bd0:	406b      	eors	r3, r5
    1bd2:	4058      	eors	r0, r3
    1bd4:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    1bd6:	7820      	ldrb	r0, [r4, #0]
    1bd8:	f7ff fe00 	bl	17dc <_double_byte>
    1bdc:	7863      	ldrb	r3, [r4, #1]
    1bde:	7825      	ldrb	r5, [r4, #0]
    1be0:	405d      	eors	r5, r3
    1be2:	78a3      	ldrb	r3, [r4, #2]
    1be4:	405d      	eors	r5, r3
    1be6:	4068      	eors	r0, r5
    1be8:	b2c5      	uxtb	r5, r0
    1bea:	78e0      	ldrb	r0, [r4, #3]
    1bec:	f7ff fdf6 	bl	17dc <_double_byte>
    1bf0:	4045      	eors	r5, r0
    1bf2:	70f5      	strb	r5, [r6, #3]
}
    1bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001bf6 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    1bf6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb*Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    1bf8:	466a      	mov	r2, sp
    1bfa:	7803      	ldrb	r3, [r0, #0]
    1bfc:	7013      	strb	r3, [r2, #0]
    1bfe:	7943      	ldrb	r3, [r0, #5]
    1c00:	7053      	strb	r3, [r2, #1]
    1c02:	7a83      	ldrb	r3, [r0, #10]
    1c04:	7093      	strb	r3, [r2, #2]
    1c06:	7bc3      	ldrb	r3, [r0, #15]
    1c08:	70d3      	strb	r3, [r2, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    1c0a:	7903      	ldrb	r3, [r0, #4]
    1c0c:	7113      	strb	r3, [r2, #4]
    1c0e:	7a43      	ldrb	r3, [r0, #9]
    1c10:	7153      	strb	r3, [r2, #5]
    1c12:	7b83      	ldrb	r3, [r0, #14]
    1c14:	7193      	strb	r3, [r2, #6]
    1c16:	78c3      	ldrb	r3, [r0, #3]
    1c18:	71d3      	strb	r3, [r2, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    1c1a:	7a03      	ldrb	r3, [r0, #8]
    1c1c:	7213      	strb	r3, [r2, #8]
    1c1e:	7b43      	ldrb	r3, [r0, #13]
    1c20:	7253      	strb	r3, [r2, #9]
    1c22:	7883      	ldrb	r3, [r0, #2]
    1c24:	7293      	strb	r3, [r2, #10]
    1c26:	79c3      	ldrb	r3, [r0, #7]
    1c28:	72d3      	strb	r3, [r2, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    1c2a:	7b03      	ldrb	r3, [r0, #12]
    1c2c:	7313      	strb	r3, [r2, #12]
    1c2e:	7843      	ldrb	r3, [r0, #1]
    1c30:	7353      	strb	r3, [r2, #13]
    1c32:	7983      	ldrb	r3, [r0, #6]
    1c34:	7393      	strb	r3, [r2, #14]
    1c36:	7ac3      	ldrb	r3, [r0, #11]
    1c38:	73d3      	strb	r3, [r2, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1c3a:	2310      	movs	r3, #16
    1c3c:	0019      	movs	r1, r3
    1c3e:	f7ff fdbc 	bl	17ba <_copy>
}
    1c42:	b005      	add	sp, #20
    1c44:	bd00      	pop	{pc}
	...

00001c48 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int32_t tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    1c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c4a:	b08d      	sub	sp, #52	; 0x34
	const uint32_t rconst[11] = {
    1c4c:	ac01      	add	r4, sp, #4
    1c4e:	0022      	movs	r2, r4
    1c50:	4b24      	ldr	r3, [pc, #144]	; (1ce4 <tc_aes128_set_encrypt_key+0x9c>)
    1c52:	cbe0      	ldmia	r3!, {r5, r6, r7}
    1c54:	c2e0      	stmia	r2!, {r5, r6, r7}
    1c56:	cbe0      	ldmia	r3!, {r5, r6, r7}
    1c58:	c2e0      	stmia	r2!, {r5, r6, r7}
    1c5a:	cbe0      	ldmia	r3!, {r5, r6, r7}
    1c5c:	c2e0      	stmia	r2!, {r5, r6, r7}
    1c5e:	cb60      	ldmia	r3!, {r5, r6}
    1c60:	c260      	stmia	r2!, {r5, r6}
	};
	uint32_t i;
	uint32_t t;

	if (s == (TCAesKeySched_t) 0) {
		return TC_CRYPTO_FAIL;
    1c62:	1e03      	subs	r3, r0, #0
	0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	uint32_t i;
	uint32_t t;

	if (s == (TCAesKeySched_t) 0) {
    1c64:	d03a      	beq.n	1cdc <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
    1c66:	1e0b      	subs	r3, r1, #0
	} else if (k == (const uint8_t *) 0) {
    1c68:	d038      	beq.n	1cdc <tc_aes128_set_encrypt_key+0x94>
    1c6a:	000e      	movs	r6, r1
    1c6c:	0005      	movs	r5, r0
    1c6e:	3610      	adds	r6, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    1c70:	780b      	ldrb	r3, [r1, #0]
    1c72:	061a      	lsls	r2, r3, #24
    1c74:	784b      	ldrb	r3, [r1, #1]
    1c76:	041b      	lsls	r3, r3, #16
    1c78:	4313      	orrs	r3, r2
    1c7a:	78ca      	ldrb	r2, [r1, #3]
    1c7c:	4313      	orrs	r3, r2
    1c7e:	788a      	ldrb	r2, [r1, #2]
    1c80:	3104      	adds	r1, #4
    1c82:	0212      	lsls	r2, r2, #8
    1c84:	4313      	orrs	r3, r2
    1c86:	c508      	stmia	r5!, {r3}
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
    1c88:	428e      	cmp	r6, r1
    1c8a:	d1f1      	bne.n	1c70 <tc_aes128_set_encrypt_key+0x28>
	0xb0, 0x54, 0xbb, 0x16
};

static inline uint32_t rotword(uint32_t a)
{
	return (((a) >> 24)|((a) << 8));
    1c8c:	2318      	movs	r3, #24
    1c8e:	2204      	movs	r2, #4
    1c90:	469c      	mov	ip, r3
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    1c92:	26ff      	movs	r6, #255	; 0xff
    1c94:	4d14      	ldr	r5, [pc, #80]	; (1ce8 <tc_aes128_set_encrypt_key+0xa0>)
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
    1c96:	2103      	movs	r1, #3
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
    1c98:	68c3      	ldr	r3, [r0, #12]
		if ((i % Nk) == 0) {
    1c9a:	420a      	tst	r2, r1
    1c9c:	d116      	bne.n	1ccc <tc_aes128_set_encrypt_key+0x84>
	0xb0, 0x54, 0xbb, 0x16
};

static inline uint32_t rotword(uint32_t a)
{
	return (((a) >> 24)|((a) << 8));
    1c9e:	4661      	mov	r1, ip
    1ca0:	41cb      	rors	r3, r1
	}

	for (; i < (Nb*(Nr+1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    1ca2:	0e19      	lsrs	r1, r3, #24
    1ca4:	5c6f      	ldrb	r7, [r5, r1]
    1ca6:	0019      	movs	r1, r3
    1ca8:	4031      	ands	r1, r6
    1caa:	5c69      	ldrb	r1, [r5, r1]
    1cac:	063f      	lsls	r7, r7, #24
    1cae:	430f      	orrs	r7, r1
    1cb0:	0c19      	lsrs	r1, r3, #16
    1cb2:	4031      	ands	r1, r6
    1cb4:	0a1b      	lsrs	r3, r3, #8
    1cb6:	5c69      	ldrb	r1, [r5, r1]
    1cb8:	4033      	ands	r3, r6
    1cba:	5ceb      	ldrb	r3, [r5, r3]
    1cbc:	0409      	lsls	r1, r1, #16
    1cbe:	021b      	lsls	r3, r3, #8
    1cc0:	4339      	orrs	r1, r7
    1cc2:	4319      	orrs	r1, r3
    1cc4:	0893      	lsrs	r3, r2, #2
    1cc6:	009b      	lsls	r3, r3, #2
    1cc8:	58e3      	ldr	r3, [r4, r3]
    1cca:	404b      	eors	r3, r1
		}
		s->words[i] = s->words[i-Nk] ^ t;
    1ccc:	6801      	ldr	r1, [r0, #0]
	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
    1cce:	3201      	adds	r2, #1
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    1cd0:	404b      	eors	r3, r1
    1cd2:	6103      	str	r3, [r0, #16]
    1cd4:	3004      	adds	r0, #4
	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
	}

	for (; i < (Nb*(Nr+1)); ++i) {
    1cd6:	2a2c      	cmp	r2, #44	; 0x2c
    1cd8:	d1dd      	bne.n	1c96 <tc_aes128_set_encrypt_key+0x4e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
	}

	return TC_CRYPTO_SUCCESS;
    1cda:	2301      	movs	r3, #1
}
    1cdc:	0018      	movs	r0, r3
    1cde:	b00d      	add	sp, #52	; 0x34
    1ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	00014180 	.word	0x00014180
    1ce8:	0001441c 	.word	0x0001441c

00001cec <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int32_t tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cee:	0007      	movs	r7, r0
    1cf0:	b08b      	sub	sp, #44	; 0x2c
    1cf2:	0014      	movs	r4, r2
	uint8_t state[Nk*Nb];
	uint32_t i;

	if (out == (uint8_t *) 0) {
    1cf4:	2800      	cmp	r0, #0
    1cf6:	d05b      	beq.n	1db0 <tc_aes_encrypt+0xc4>
		return TC_CRYPTO_FAIL;
    1cf8:	1e08      	subs	r0, r1, #0
	} else if (in == (const uint8_t *) 0) {
    1cfa:	d059      	beq.n	1db0 <tc_aes_encrypt+0xc4>
{
	uint8_t state[Nk*Nb];
	uint32_t i;

	if (out == (uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
    1cfc:	1e10      	subs	r0, r2, #0
	} else if (in == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    1cfe:	d057      	beq.n	1db0 <tc_aes_encrypt+0xc4>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    1d00:	2310      	movs	r3, #16
    1d02:	000a      	movs	r2, r1
    1d04:	a802      	add	r0, sp, #8
    1d06:	0019      	movs	r1, r3
    1d08:	f7ff fd57 	bl	17ba <_copy>
	add_round_key(state, s->words);
    1d0c:	0021      	movs	r1, r4
    1d0e:	a802      	add	r0, sp, #8
    1d10:	f7ff fdb8 	bl	1884 <add_round_key>
    1d14:	0023      	movs	r3, r4
    1d16:	0026      	movs	r6, r4
    1d18:	33a0      	adds	r3, #160	; 0xa0
    1d1a:	3610      	adds	r6, #16
    1d1c:	9301      	str	r3, [sp, #4]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int32_t tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1d1e:	2500      	movs	r5, #0
static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
		s[i] = sbox[s[i]];
    1d20:	4b24      	ldr	r3, [pc, #144]	; (1db4 <tc_aes_encrypt+0xc8>)
    1d22:	aa02      	add	r2, sp, #8
    1d24:	5caa      	ldrb	r2, [r5, r2]
    1d26:	a902      	add	r1, sp, #8
    1d28:	5c9a      	ldrb	r2, [r3, r2]
    1d2a:	546a      	strb	r2, [r5, r1]

static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
    1d2c:	3501      	adds	r5, #1
    1d2e:	2d10      	cmp	r5, #16
    1d30:	d1f7      	bne.n	1d22 <tc_aes_encrypt+0x36>
	(void)_copy(state, sizeof(state), in, sizeof(state));
	add_round_key(state, s->words);

	for (i = 0; i < (Nr-1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    1d32:	0008      	movs	r0, r1
    1d34:	f7ff ff5f 	bl	1bf6 <shift_rows>

static inline void mix_columns(uint8_t *s)
{
	uint8_t t[Nb*Nk];

	mult_row_column(t, s);
    1d38:	a902      	add	r1, sp, #8
    1d3a:	a806      	add	r0, sp, #24
    1d3c:	f7ff ff1b 	bl	1b76 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    1d40:	a903      	add	r1, sp, #12
    1d42:	a807      	add	r0, sp, #28
    1d44:	f7ff ff17 	bl	1b76 <mult_row_column>
	mult_row_column(&t[2*Nb], s+(2*Nb));
    1d48:	a904      	add	r1, sp, #16
    1d4a:	a808      	add	r0, sp, #32
    1d4c:	f7ff ff13 	bl	1b76 <mult_row_column>
	mult_row_column(&t[3*Nb], s+(3*Nb));
    1d50:	a905      	add	r1, sp, #20
    1d52:	a809      	add	r0, sp, #36	; 0x24
    1d54:	f7ff ff0f 	bl	1b76 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1d58:	002b      	movs	r3, r5
    1d5a:	aa06      	add	r2, sp, #24
    1d5c:	0029      	movs	r1, r5
    1d5e:	a802      	add	r0, sp, #8
    1d60:	f7ff fd2b 	bl	17ba <_copy>

	for (i = 0; i < (Nr-1); ++i) {
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    1d64:	0031      	movs	r1, r6
    1d66:	a802      	add	r0, sp, #8
    1d68:	f7ff fd8c 	bl	1884 <add_round_key>
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
	add_round_key(state, s->words);

	for (i = 0; i < (Nr-1); ++i) {
    1d6c:	9b01      	ldr	r3, [sp, #4]
    1d6e:	3610      	adds	r6, #16
    1d70:	42b3      	cmp	r3, r6
    1d72:	d1d4      	bne.n	1d1e <tc_aes_encrypt+0x32>
    1d74:	2500      	movs	r5, #0
static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
		s[i] = sbox[s[i]];
    1d76:	4a0f      	ldr	r2, [pc, #60]	; (1db4 <tc_aes_encrypt+0xc8>)
    1d78:	ab02      	add	r3, sp, #8
    1d7a:	5ceb      	ldrb	r3, [r5, r3]
    1d7c:	a902      	add	r1, sp, #8
    1d7e:	5cd3      	ldrb	r3, [r2, r3]
    1d80:	546b      	strb	r3, [r5, r1]

static inline void sub_bytes(uint8_t *s)
{
	uint32_t i;

	for (i = 0; i < (Nb*Nk); ++i) {
    1d82:	3501      	adds	r5, #1
    1d84:	2d10      	cmp	r5, #16
    1d86:	d1f7      	bne.n	1d78 <tc_aes_encrypt+0x8c>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
	}

	sub_bytes(state);
	shift_rows(state);
    1d88:	0008      	movs	r0, r1
    1d8a:	f7ff ff34 	bl	1bf6 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    1d8e:	0021      	movs	r1, r4
    1d90:	a802      	add	r0, sp, #8
    1d92:	31a0      	adds	r1, #160	; 0xa0
    1d94:	f7ff fd76 	bl	1884 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    1d98:	002b      	movs	r3, r5
    1d9a:	aa02      	add	r2, sp, #8
    1d9c:	0029      	movs	r1, r5
    1d9e:	0038      	movs	r0, r7
    1da0:	f7ff fd0b 	bl	17ba <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    1da4:	a802      	add	r0, sp, #8
    1da6:	002a      	movs	r2, r5
    1da8:	2100      	movs	r1, #0
    1daa:	f7ff fd13 	bl	17d4 <_set>

	return TC_CRYPTO_SUCCESS;
    1dae:	2001      	movs	r0, #1
}
    1db0:	b00b      	add	sp, #44	; 0x2c
    1db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1db4:	0001441c 	.word	0x0001441c

00001db8 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1db8:	780a      	ldrb	r2, [r1, #0]
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    1dba:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1dbc:	2387      	movs	r3, #135	; 0x87
    1dbe:	2a7f      	cmp	r2, #127	; 0x7f
    1dc0:	d800      	bhi.n	1dc4 <gf_double+0xc>
    1dc2:	2300      	movs	r3, #0
    1dc4:	220f      	movs	r2, #15

	out += (TC_AES_BLOCK_SIZE - 1);
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    1dc6:	5c8c      	ldrb	r4, [r1, r2]
    1dc8:	0064      	lsls	r4, r4, #1
    1dca:	4063      	eors	r3, r4
    1dcc:	5483      	strb	r3, [r0, r2]
		if (x == in) {
    1dce:	2a00      	cmp	r2, #0
    1dd0:	d003      	beq.n	1dda <gf_double+0x22>
			break;
		}
		carry = *x-- >> 7;
    1dd2:	5c8b      	ldrb	r3, [r1, r2]
    1dd4:	3a01      	subs	r2, #1
    1dd6:	09db      	lsrs	r3, r3, #7
	}
    1dd8:	e7f5      	b.n	1dc6 <gf_double+0xe>
}
    1dda:	bd10      	pop	{r4, pc}

00001ddc <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int32_t tc_cmac_erase(TCCmacState_t s)
{
    1ddc:	b510      	push	{r4, lr}
	if (s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    1dde:	1e03      	subs	r3, r0, #0
	return TC_CRYPTO_SUCCESS;
}

int32_t tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    1de0:	d004      	beq.n	1dec <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    1de2:	2258      	movs	r2, #88	; 0x58
    1de4:	2100      	movs	r1, #0
    1de6:	f7ff fcf5 	bl	17d4 <_set>

	return TC_CRYPTO_SUCCESS;
    1dea:	2301      	movs	r3, #1
}
    1dec:	0018      	movs	r0, r3
    1dee:	bd10      	pop	{r4, pc}

00001df0 <tc_cmac_init>:

int32_t tc_cmac_init(TCCmacState_t s)
{
    1df0:	b510      	push	{r4, lr}
    1df2:	1e04      	subs	r4, r0, #0
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1df4:	d011      	beq.n	1e1a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1df6:	2210      	movs	r2, #16
    1df8:	2100      	movs	r1, #0
    1dfa:	f7ff fceb 	bl	17d4 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    1dfe:	0020      	movs	r0, r4
    1e00:	2210      	movs	r2, #16
    1e02:	3030      	adds	r0, #48	; 0x30
    1e04:	2100      	movs	r1, #0
    1e06:	f7ff fce5 	bl	17d4 <_set>
	s->leftover_offset = 0;
    1e0a:	2300      	movs	r3, #0
    1e0c:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    1e0e:	2380      	movs	r3, #128	; 0x80
    1e10:	2200      	movs	r2, #0

	return TC_CRYPTO_SUCCESS;
    1e12:	2001      	movs	r0, #1
	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
	s->leftover_offset = 0;

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    1e14:	025b      	lsls	r3, r3, #9
    1e16:	6522      	str	r2, [r4, #80]	; 0x50
    1e18:	6563      	str	r3, [r4, #84]	; 0x54

	return TC_CRYPTO_SUCCESS;
}
    1e1a:	bd10      	pop	{r4, pc}

00001e1c <tc_cmac_setup>:
		carry = *x-- >> 7;
	}
}

int32_t tc_cmac_setup(TCCmacState_t s, const uint8_t *key, TCAesKeySched_t sched)
{
    1e1c:	b570      	push	{r4, r5, r6, lr}
    1e1e:	0004      	movs	r4, r0
    1e20:	000d      	movs	r5, r1
    1e22:	0016      	movs	r6, r2

	/* input sanity check: */
	if (s == (TCCmacState_t) 0 ||
    1e24:	2800      	cmp	r0, #0
    1e26:	d024      	beq.n	1e72 <tc_cmac_setup+0x56>
	    key == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
    1e28:	1e08      	subs	r0, r1, #0

int32_t tc_cmac_setup(TCCmacState_t s, const uint8_t *key, TCAesKeySched_t sched)
{

	/* input sanity check: */
	if (s == (TCCmacState_t) 0 ||
    1e2a:	d022      	beq.n	1e72 <tc_cmac_setup+0x56>
	    key == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	}

	/* put s into a known state */
	_set(s, 0, sizeof(*s));
    1e2c:	2258      	movs	r2, #88	; 0x58
    1e2e:	2100      	movs	r1, #0
    1e30:	0020      	movs	r0, r4
    1e32:	f7ff fccf 	bl	17d4 <_set>
	s->sched = sched;

	/* configure the encryption key used by the underlying block cipher */
	tc_aes128_set_encrypt_key(s->sched, key);
    1e36:	0029      	movs	r1, r5

	/* compute s->K1 and s->K2 from s->iv using s->keyid */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
	tc_aes_encrypt(s->iv, s->iv, s->sched);
	gf_double (s->K1, s->iv);
    1e38:	0025      	movs	r5, r4
		return TC_CRYPTO_FAIL;
	}

	/* put s into a known state */
	_set(s, 0, sizeof(*s));
	s->sched = sched;
    1e3a:	64a6      	str	r6, [r4, #72]	; 0x48

	/* configure the encryption key used by the underlying block cipher */
	tc_aes128_set_encrypt_key(s->sched, key);
    1e3c:	0030      	movs	r0, r6
    1e3e:	f7ff ff03 	bl	1c48 <tc_aes128_set_encrypt_key>

	/* compute s->K1 and s->K2 from s->iv using s->keyid */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1e42:	2210      	movs	r2, #16
    1e44:	2100      	movs	r1, #0
    1e46:	0020      	movs	r0, r4
    1e48:	f7ff fcc4 	bl	17d4 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
	gf_double (s->K1, s->iv);
    1e4c:	3510      	adds	r5, #16
	/* configure the encryption key used by the underlying block cipher */
	tc_aes128_set_encrypt_key(s->sched, key);

	/* compute s->K1 and s->K2 from s->iv using s->keyid */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    1e4e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1e50:	0021      	movs	r1, r4
    1e52:	0020      	movs	r0, r4
    1e54:	f7ff ff4a 	bl	1cec <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    1e58:	0021      	movs	r1, r4
    1e5a:	0028      	movs	r0, r5
    1e5c:	f7ff ffac 	bl	1db8 <gf_double>
	gf_double (s->K2, s->K1);
    1e60:	0020      	movs	r0, r4
    1e62:	0029      	movs	r1, r5
    1e64:	3020      	adds	r0, #32
    1e66:	f7ff ffa7 	bl	1db8 <gf_double>

	/* reset s->iv to 0 in case someone wants to compute now */
	tc_cmac_init(s);
    1e6a:	0020      	movs	r0, r4
    1e6c:	f7ff ffc0 	bl	1df0 <tc_cmac_init>

	return TC_CRYPTO_SUCCESS;
    1e70:	2001      	movs	r0, #1
}
    1e72:	bd70      	pop	{r4, r5, r6, pc}

00001e74 <tc_cmac_update>:

	return TC_CRYPTO_SUCCESS;
}

int32_t tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    1e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e76:	0004      	movs	r4, r0
    1e78:	000e      	movs	r6, r1
    1e7a:	0015      	movs	r5, r2
	uint32_t i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    1e7c:	1e07      	subs	r7, r0, #0
int32_t tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	uint32_t i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1e7e:	d05d      	beq.n	1f3c <tc_cmac_update+0xc8>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    1e80:	2a00      	cmp	r2, #0
    1e82:	d05a      	beq.n	1f3a <tc_cmac_update+0xc6>
{
	uint32_t i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    1e84:	1e0f      	subs	r7, r1, #0
	}
	if (data_length == 0) {
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    1e86:	d059      	beq.n	1f3c <tc_cmac_update+0xc8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    1e88:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1e8a:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
	uint32_t i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    1e8c:	2700      	movs	r7, #0
	}
	if (data == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    1e8e:	0003      	movs	r3, r0
    1e90:	430b      	orrs	r3, r1
    1e92:	42bb      	cmp	r3, r7
    1e94:	d052      	beq.n	1f3c <tc_cmac_update+0xc8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    1e96:	2201      	movs	r2, #1
    1e98:	4252      	negs	r2, r2
    1e9a:	17d3      	asrs	r3, r2, #31
    1e9c:	1812      	adds	r2, r2, r0
    1e9e:	414b      	adcs	r3, r1

	if (s->leftover_offset > 0) {
    1ea0:	6c60      	ldr	r0, [r4, #68]	; 0x44

	if (s->countdown == 0) {
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    1ea2:	6522      	str	r2, [r4, #80]	; 0x50
    1ea4:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
    1ea6:	42b8      	cmp	r0, r7
    1ea8:	d02a      	beq.n	1f00 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    1eaa:	2310      	movs	r3, #16
    1eac:	1a1b      	subs	r3, r3, r0
    1eae:	3030      	adds	r0, #48	; 0x30
    1eb0:	9301      	str	r3, [sp, #4]

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    1eb2:	1820      	adds	r0, r4, r0

	if (s->leftover_offset > 0) {
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;

		if (data_length < remaining_space) {
    1eb4:	429d      	cmp	r5, r3
    1eb6:	d209      	bcs.n	1ecc <tc_cmac_update+0x58>
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    1eb8:	002b      	movs	r3, r5
    1eba:	0029      	movs	r1, r5
    1ebc:	0032      	movs	r2, r6
    1ebe:	f7ff fc7c 	bl	17ba <_copy>
			s->leftover_offset += data_length;
    1ec2:	6c63      	ldr	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    1ec4:	3701      	adds	r7, #1
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
    1ec6:	195d      	adds	r5, r3, r5
    1ec8:	6465      	str	r5, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    1eca:	e037      	b.n	1f3c <tc_cmac_update+0xc8>
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    1ecc:	9b01      	ldr	r3, [sp, #4]
    1ece:	0032      	movs	r2, r6
    1ed0:	0019      	movs	r1, r3
    1ed2:	f7ff fc72 	bl	17ba <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    1ed6:	9b01      	ldr	r3, [sp, #4]
    1ed8:	0021      	movs	r1, r4
    1eda:	1aed      	subs	r5, r5, r3
		data += remaining_space;
    1edc:	18f6      	adds	r6, r6, r3
    1ede:	0023      	movs	r3, r4
		s->leftover_offset = 0;
    1ee0:	6467      	str	r7, [r4, #68]	; 0x44
    1ee2:	3110      	adds	r1, #16

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= s->leftover[i];
    1ee4:	001a      	movs	r2, r3
    1ee6:	3230      	adds	r2, #48	; 0x30
    1ee8:	7810      	ldrb	r0, [r2, #0]
    1eea:	781a      	ldrb	r2, [r3, #0]
    1eec:	4042      	eors	r2, r0
    1eee:	701a      	strb	r2, [r3, #0]
    1ef0:	3301      	adds	r3, #1
		      remaining_space);
		data_length -= remaining_space;
		data += remaining_space;
		s->leftover_offset = 0;

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1ef2:	428b      	cmp	r3, r1
    1ef4:	d1f6      	bne.n	1ee4 <tc_cmac_update+0x70>
			s->iv[i] ^= s->leftover[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1ef6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1ef8:	0021      	movs	r1, r4
    1efa:	0020      	movs	r0, r4
    1efc:	f7ff fef6 	bl	1cec <tc_aes_encrypt>
    1f00:	002f      	movs	r7, r5
    1f02:	1bea      	subs	r2, r5, r7
    1f04:	18b2      	adds	r2, r6, r2
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
    1f06:	2f10      	cmp	r7, #16
    1f08:	d90e      	bls.n	1f28 <tc_cmac_update+0xb4>
    1f0a:	2300      	movs	r3, #0
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    1f0c:	5ce0      	ldrb	r0, [r4, r3]
    1f0e:	5cd1      	ldrb	r1, [r2, r3]
    1f10:	4041      	eors	r1, r0
    1f12:	54e1      	strb	r1, [r4, r3]
		tc_aes_encrypt(s->iv, s->iv, s->sched);
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1f14:	3301      	adds	r3, #1
    1f16:	2b10      	cmp	r3, #16
    1f18:	d1f8      	bne.n	1f0c <tc_cmac_update+0x98>
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1f1a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1f1c:	0021      	movs	r1, r4
    1f1e:	0020      	movs	r0, r4
    1f20:	f7ff fee4 	bl	1cec <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
		data_length  -= TC_AES_BLOCK_SIZE;
    1f24:	3f10      	subs	r7, #16
    1f26:	e7ec      	b.n	1f02 <tc_cmac_update+0x8e>
	}

	if (data_length > 0) {
    1f28:	2f00      	cmp	r7, #0
    1f2a:	d006      	beq.n	1f3a <tc_cmac_update+0xc6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
    1f2c:	0020      	movs	r0, r4
    1f2e:	003b      	movs	r3, r7
    1f30:	3030      	adds	r0, #48	; 0x30
    1f32:	0039      	movs	r1, r7
    1f34:	f7ff fc41 	bl	17ba <_copy>
		s->leftover_offset = data_length;
    1f38:	6467      	str	r7, [r4, #68]	; 0x44
	}

	return TC_CRYPTO_SUCCESS;
    1f3a:	2701      	movs	r7, #1
}
    1f3c:	0038      	movs	r0, r7
    1f3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001f40 <tc_cmac_final>:

int32_t tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    1f40:	b570      	push	{r4, r5, r6, lr}
    1f42:	0005      	movs	r5, r0
    1f44:	000c      	movs	r4, r1
	uint8_t *k;
	uint32_t i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    1f46:	2800      	cmp	r0, #0
    1f48:	d028      	beq.n	1f9c <tc_cmac_final+0x5c>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    1f4a:	1e08      	subs	r0, r1, #0
{
	uint8_t *k;
	uint32_t i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    1f4c:	d026      	beq.n	1f9c <tc_cmac_final+0x5c>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    1f4e:	6c48      	ldr	r0, [r1, #68]	; 0x44
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    1f50:	3110      	adds	r1, #16
	if (tag == (uint8_t *) 0 ||
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    1f52:	2810      	cmp	r0, #16
    1f54:	d00d      	beq.n	1f72 <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    1f56:	2210      	movs	r2, #16
    1f58:	1a12      	subs	r2, r2, r0
    1f5a:	3030      	adds	r0, #48	; 0x30
    1f5c:	2100      	movs	r1, #0
    1f5e:	1820      	adds	r0, r4, r0
    1f60:	f7ff fc38 	bl	17d4 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    1f64:	2280      	movs	r2, #128	; 0x80
		k = (uint8_t *) s->K2;
    1f66:	0021      	movs	r1, r4
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    1f68:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
    1f6a:	3120      	adds	r1, #32
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    1f6c:	18e3      	adds	r3, r4, r3
    1f6e:	3330      	adds	r3, #48	; 0x30
    1f70:	701a      	strb	r2, [r3, #0]
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1f72:	2300      	movs	r3, #0
		s->iv[i] ^= s->leftover[i] ^ k[i];
    1f74:	0018      	movs	r0, r3
    1f76:	5ce6      	ldrb	r6, [r4, r3]
    1f78:	5cca      	ldrb	r2, [r1, r3]
    1f7a:	3030      	adds	r0, #48	; 0x30
    1f7c:	5c20      	ldrb	r0, [r4, r0]
    1f7e:	4072      	eors	r2, r6
    1f80:	4042      	eors	r2, r0
    1f82:	54e2      	strb	r2, [r4, r3]

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1f84:	3301      	adds	r3, #1
    1f86:	2b10      	cmp	r3, #16
    1f88:	d1f4      	bne.n	1f74 <tc_cmac_final+0x34>
		s->iv[i] ^= s->leftover[i] ^ k[i];
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    1f8a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1f8c:	0021      	movs	r1, r4
    1f8e:	0028      	movs	r0, r5
    1f90:	f7ff feac 	bl	1cec <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    1f94:	0020      	movs	r0, r4
    1f96:	f7ff ff21 	bl	1ddc <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    1f9a:	2001      	movs	r0, #1
}
    1f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

00001fa0 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    1fa2:	f3ef 8310 	mrs	r3, PRIMASK
    1fa6:	b672      	cpsid	i
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1fa8:	2281      	movs	r2, #129	; 0x81
    1faa:	4e13      	ldr	r6, [pc, #76]	; (1ff8 <bt_hex+0x58>)
    1fac:	4d13      	ldr	r5, [pc, #76]	; (1ffc <bt_hex+0x5c>)
    1fae:	7834      	ldrb	r4, [r6, #0]
    1fb0:	4362      	muls	r2, r4
    1fb2:	18aa      	adds	r2, r5, r2
	curbuf %= ARRAY_SIZE(hexbufs);
    1fb4:	2503      	movs	r5, #3
    1fb6:	3401      	adds	r4, #1
    1fb8:	402c      	ands	r4, r5
    1fba:	7034      	strb	r4, [r6, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d100      	bne.n	1fc2 <bt_hex+0x22>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    1fc0:	b662      	cpsie	i
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1fc2:	2940      	cmp	r1, #64	; 0x40
    1fc4:	d900      	bls.n	1fc8 <bt_hex+0x28>
    1fc6:	2140      	movs	r1, #64	; 0x40
    1fc8:	0003      	movs	r3, r0

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1fca:	270f      	movs	r7, #15
    1fcc:	0010      	movs	r0, r2
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1fce:	4d0c      	ldr	r5, [pc, #48]	; (2000 <bt_hex+0x60>)
    1fd0:	185e      	adds	r6, r3, r1
	curbuf %= ARRAY_SIZE(hexbufs);
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);

	for (i = 0; i < len; i++) {
    1fd2:	42b3      	cmp	r3, r6
    1fd4:	d00a      	beq.n	1fec <bt_hex+0x4c>
		str[i * 2]     = hex[b[i] >> 4];
    1fd6:	781c      	ldrb	r4, [r3, #0]
    1fd8:	0924      	lsrs	r4, r4, #4
    1fda:	5d2c      	ldrb	r4, [r5, r4]
    1fdc:	7004      	strb	r4, [r0, #0]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1fde:	781c      	ldrb	r4, [r3, #0]
    1fe0:	3301      	adds	r3, #1
    1fe2:	403c      	ands	r4, r7
    1fe4:	5d2c      	ldrb	r4, [r5, r4]
    1fe6:	7044      	strb	r4, [r0, #1]
    1fe8:	3002      	adds	r0, #2
    1fea:	e7f2      	b.n	1fd2 <bt_hex+0x32>
	}

	str[i * 2] = '\0';
    1fec:	2300      	movs	r3, #0
    1fee:	0049      	lsls	r1, r1, #1

	return str;
}
    1ff0:	0010      	movs	r0, r2
	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1ff2:	548b      	strb	r3, [r1, r2]

	return str;
}
    1ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	20000a02 	.word	0x20000a02
    1ffc:	200007fe 	.word	0x200007fe
    2000:	0001451c 	.word	0x0001451c

00002004 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    2004:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][27];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    2006:	251b      	movs	r5, #27
    2008:	4918      	ldr	r1, [pc, #96]	; (206c <bt_addr_le_str+0x68>)
    200a:	4a19      	ldr	r2, [pc, #100]	; (2070 <bt_addr_le_str+0x6c>)
    200c:	780b      	ldrb	r3, [r1, #0]

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    200e:	b088      	sub	sp, #32
	static char bufs[2][27];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    2010:	435d      	muls	r5, r3
    2012:	1955      	adds	r5, r2, r5
	cur %= ARRAY_SIZE(bufs);
    2014:	2201      	movs	r2, #1
    2016:	3301      	adds	r3, #1
    2018:	4013      	ands	r3, r2
    201a:	700b      	strb	r3, [r1, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    201c:	7803      	ldrb	r3, [r0, #0]

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    201e:	0004      	movs	r4, r0
    2020:	ae06      	add	r6, sp, #24
    2022:	2b00      	cmp	r3, #0
    2024:	d003      	beq.n	202e <bt_addr_le_str+0x2a>
    2026:	4293      	cmp	r3, r2
    2028:	d106      	bne.n	2038 <bt_addr_le_str+0x34>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    202a:	4912      	ldr	r1, [pc, #72]	; (2074 <bt_addr_le_str+0x70>)
    202c:	e000      	b.n	2030 <bt_addr_le_str+0x2c>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    202e:	4912      	ldr	r1, [pc, #72]	; (2078 <bt_addr_le_str+0x74>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2030:	0030      	movs	r0, r6
    2032:	f7ff f951 	bl	12d8 <strcpy>
    2036:	e004      	b.n	2042 <bt_addr_le_str+0x3e>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2038:	4a10      	ldr	r2, [pc, #64]	; (207c <bt_addr_le_str+0x78>)
    203a:	2107      	movs	r1, #7
    203c:	0030      	movs	r0, r6
    203e:	f7ff fb9f 	bl	1780 <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2042:	7862      	ldrb	r2, [r4, #1]
    2044:	79a3      	ldrb	r3, [r4, #6]
    2046:	9204      	str	r2, [sp, #16]
    2048:	78a2      	ldrb	r2, [r4, #2]
    204a:	9605      	str	r6, [sp, #20]
    204c:	9203      	str	r2, [sp, #12]
    204e:	78e2      	ldrb	r2, [r4, #3]
    2050:	211b      	movs	r1, #27
    2052:	9202      	str	r2, [sp, #8]
    2054:	7922      	ldrb	r2, [r4, #4]
    2056:	0028      	movs	r0, r5
    2058:	9201      	str	r2, [sp, #4]
    205a:	7962      	ldrb	r2, [r4, #5]
    205c:	9200      	str	r2, [sp, #0]
    205e:	4a08      	ldr	r2, [pc, #32]	; (2080 <bt_addr_le_str+0x7c>)
    2060:	f7ff fb8e 	bl	1780 <snprintk>
	str = bufs[cur++];
	cur %= ARRAY_SIZE(bufs);
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    2064:	0028      	movs	r0, r5
    2066:	b008      	add	sp, #32
    2068:	bd70      	pop	{r4, r5, r6, pc}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	20000a03 	.word	0x20000a03
    2070:	20000a04 	.word	0x20000a04
    2074:	000142de 	.word	0x000142de
    2078:	000142d7 	.word	0x000142d7
    207c:	000142e5 	.word	0x000142e5
    2080:	000142ec 	.word	0x000142ec

00002084 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BLUETOOTH_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    2084:	b530      	push	{r4, r5, lr}
    2086:	b085      	sub	sp, #20
    2088:	0004      	movs	r4, r0
    208a:	0015      	movs	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    208c:	4668      	mov	r0, sp
    208e:	2203      	movs	r2, #3
    2090:	f7ff f968 	bl	1364 <memcpy>
	memset(res + 3, 0, 13);
    2094:	466b      	mov	r3, sp
    2096:	220d      	movs	r2, #13
    2098:	2100      	movs	r1, #0
    209a:	1cd8      	adds	r0, r3, #3
    209c:	f7ff f98c 	bl	13b8 <memset>

	err = bt_encrypt_le(irk, res, res);
    20a0:	0020      	movs	r0, r4
    20a2:	466a      	mov	r2, sp
    20a4:	4669      	mov	r1, sp
    20a6:	f009 fb09 	bl	b6bc <bt_encrypt_le>
    20aa:	1e04      	subs	r4, r0, #0
	if (err) {
    20ac:	d104      	bne.n	20b8 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    20ae:	2203      	movs	r2, #3
    20b0:	4669      	mov	r1, sp
    20b2:	0028      	movs	r0, r5
    20b4:	f7ff f956 	bl	1364 <memcpy>

	return 0;
}
    20b8:	0020      	movs	r0, r4
    20ba:	b005      	add	sp, #20
    20bc:	bd30      	pop	{r4, r5, pc}

000020be <bt_rpa_irk_matches>:

#if defined(CONFIG_BLUETOOTH_SMP)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    20be:	b513      	push	{r0, r1, r4, lr}
    20c0:	000c      	movs	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    20c2:	aa01      	add	r2, sp, #4
    20c4:	3103      	adds	r1, #3
    20c6:	f7ff ffdd 	bl	2084 <ah>
    20ca:	0003      	movs	r3, r0
	if (err) {
		return false;
    20cc:	2000      	movs	r0, #0
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
    20ce:	4283      	cmp	r3, r0
    20d0:	d107      	bne.n	20e2 <bt_rpa_irk_matches+0x24>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    20d2:	2203      	movs	r2, #3
    20d4:	a901      	add	r1, sp, #4
    20d6:	0020      	movs	r0, r4
    20d8:	f7ff f91c 	bl	1314 <memcmp>
    20dc:	4243      	negs	r3, r0
    20de:	4158      	adcs	r0, r3
    20e0:	b2c0      	uxtb	r0, r0
}
    20e2:	bd16      	pop	{r1, r2, r4, pc}

000020e4 <bt_rpa_create>:
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY) || \
	defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    20e4:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    20e6:	1ccd      	adds	r5, r1, #3
#endif

#if defined(CONFIG_BLUETOOTH_PRIVACY) || \
	defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    20e8:	0006      	movs	r6, r0
    20ea:	000c      	movs	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    20ec:	0028      	movs	r0, r5
    20ee:	2103      	movs	r1, #3
    20f0:	f009 fac6 	bl	b680 <bt_rand>
	if (err) {
    20f4:	2800      	cmp	r0, #0
    20f6:	d10a      	bne.n	210e <bt_rpa_create+0x2a>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    20f8:	233f      	movs	r3, #63	; 0x3f
    20fa:	7962      	ldrb	r2, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    20fc:	0029      	movs	r1, r5
	err = bt_rand(rpa->val + 3, 3);
	if (err) {
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    20fe:	4013      	ands	r3, r2
    2100:	2240      	movs	r2, #64	; 0x40
    2102:	4313      	orrs	r3, r2
    2104:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    2106:	0022      	movs	r2, r4
    2108:	0030      	movs	r0, r6
    210a:	f7ff ffbb 	bl	2084 <ah>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    210e:	bd70      	pop	{r4, r5, r6, pc}

00002110 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    2110:	b570      	push	{r4, r5, r6, lr}
	switch (src->type) {
    2112:	7803      	ldrb	r3, [r0, #0]
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    2114:	0005      	movs	r5, r0
    2116:	000c      	movs	r4, r1
	switch (src->type) {
    2118:	2b01      	cmp	r3, #1
    211a:	d013      	beq.n	2144 <uuid_to_uuid128+0x34>
    211c:	2b00      	cmp	r3, #0
    211e:	d007      	beq.n	2130 <uuid_to_uuid128+0x20>
    2120:	2b02      	cmp	r3, #2
    2122:	d11c      	bne.n	215e <uuid_to_uuid128+0x4e>
		*dst = uuid128_base;
		sys_put_le32(BT_UUID_32(src)->val,
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    2124:	0001      	movs	r1, r0
    2126:	2211      	movs	r2, #17
    2128:	0020      	movs	r0, r4
    212a:	f7ff f91b 	bl	1364 <memcpy>
		return;
    212e:	e016      	b.n	215e <uuid_to_uuid128+0x4e>

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    2130:	2211      	movs	r2, #17
    2132:	490b      	ldr	r1, [pc, #44]	; (2160 <uuid_to_uuid128+0x50>)
    2134:	0020      	movs	r0, r4
    2136:	f7ff f915 	bl	1364 <memcpy>
		sys_put_le16(BT_UUID_16(src)->val,
    213a:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    213c:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    213e:	0a1b      	lsrs	r3, r3, #8
    2140:	73a3      	strb	r3, [r4, #14]
    2142:	e00c      	b.n	215e <uuid_to_uuid128+0x4e>
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    2144:	2211      	movs	r2, #17
    2146:	4906      	ldr	r1, [pc, #24]	; (2160 <uuid_to_uuid128+0x50>)
    2148:	0020      	movs	r0, r4
    214a:	f7ff f90b 	bl	1364 <memcpy>
		sys_put_le32(BT_UUID_32(src)->val,
    214e:	686b      	ldr	r3, [r5, #4]
    2150:	0a1a      	lsrs	r2, r3, #8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2152:	7363      	strb	r3, [r4, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    2154:	0c1b      	lsrs	r3, r3, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2156:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    2158:	0a1b      	lsrs	r3, r3, #8
    215a:	73a2      	strb	r2, [r4, #14]
    215c:	7423      	strb	r3, [r4, #16]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    215e:	bd70      	pop	{r4, r5, r6, pc}
    2160:	000166f6 	.word	0x000166f6

00002164 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    2164:	b510      	push	{r4, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    2166:	7802      	ldrb	r2, [r0, #0]
    2168:	780b      	ldrb	r3, [r1, #0]

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    216a:	b08a      	sub	sp, #40	; 0x28
    216c:	000c      	movs	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    216e:	4293      	cmp	r3, r2
    2170:	d00c      	beq.n	218c <bt_uuid_cmp+0x28>

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    2172:	4669      	mov	r1, sp
    2174:	f7ff ffcc 	bl	2110 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    2178:	a905      	add	r1, sp, #20
    217a:	0020      	movs	r0, r4
    217c:	f7ff ffc8 	bl	2110 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    2180:	2115      	movs	r1, #21
    2182:	466b      	mov	r3, sp
    2184:	2210      	movs	r2, #16
    2186:	4469      	add	r1, sp
    2188:	1c58      	adds	r0, r3, #1
    218a:	e010      	b.n	21ae <bt_uuid_cmp+0x4a>
{
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    218c:	2b01      	cmp	r3, #1
    218e:	d00a      	beq.n	21a6 <bt_uuid_cmp+0x42>
    2190:	2b00      	cmp	r3, #0
    2192:	d005      	beq.n	21a0 <bt_uuid_cmp+0x3c>
    2194:	2b02      	cmp	r3, #2
    2196:	d10d      	bne.n	21b4 <bt_uuid_cmp+0x50>
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    2198:	3101      	adds	r1, #1
    219a:	3001      	adds	r0, #1
    219c:	2210      	movs	r2, #16
    219e:	e006      	b.n	21ae <bt_uuid_cmp+0x4a>
	if (u1->type != u2->type)
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    21a0:	8843      	ldrh	r3, [r0, #2]
    21a2:	8848      	ldrh	r0, [r1, #2]
    21a4:	e001      	b.n	21aa <bt_uuid_cmp+0x46>
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    21a6:	6843      	ldr	r3, [r0, #4]
    21a8:	6848      	ldr	r0, [r1, #4]
    21aa:	1a18      	subs	r0, r3, r0
    21ac:	e004      	b.n	21b8 <bt_uuid_cmp+0x54>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    21ae:	f7ff f8b1 	bl	1314 <memcmp>
    21b2:	e001      	b.n	21b8 <bt_uuid_cmp+0x54>
	}

	return -EINVAL;
    21b4:	2016      	movs	r0, #22
    21b6:	4240      	negs	r0, r0
}
    21b8:	b00a      	add	sp, #40	; 0x28
    21ba:	bd10      	pop	{r4, pc}

000021bc <net_buf_user_data>:
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    21bc:	89c3      	ldrh	r3, [r0, #14]
    21be:	18c0      	adds	r0, r0, r3
    21c0:	2303      	movs	r3, #3
    21c2:	3013      	adds	r0, #19
    21c4:	4398      	bics	r0, r3
}
    21c6:	4770      	bx	lr

000021c8 <ver_str>:
	return 0;
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(u8_t ver)
{
    21c8:	b570      	push	{r4, r5, r6, lr}
    21ca:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    21cc:	466a      	mov	r2, sp
    21ce:	4b09      	ldr	r3, [pc, #36]	; (21f4 <ver_str+0x2c>)
    21d0:	4669      	mov	r1, sp
    21d2:	cb70      	ldmia	r3!, {r4, r5, r6}
    21d4:	c270      	stmia	r2!, {r4, r5, r6}
    21d6:	cb70      	ldmia	r3!, {r4, r5, r6}
    21d8:	c270      	stmia	r2!, {r4, r5, r6}
    21da:	cb70      	ldmia	r3!, {r4, r5, r6}
    21dc:	c270      	stmia	r2!, {r4, r5, r6}
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	6013      	str	r3, [r2, #0]

	if (ver < ARRAY_SIZE(str)) {
		return str[ver];
	}

	return "unknown";
    21e2:	4b05      	ldr	r3, [pc, #20]	; (21f8 <ver_str+0x30>)
	const char * const str[] = {
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    21e4:	2809      	cmp	r0, #9
    21e6:	d801      	bhi.n	21ec <ver_str+0x24>
		return str[ver];
    21e8:	0080      	lsls	r0, r0, #2
    21ea:	5843      	ldr	r3, [r0, r1]
	}

	return "unknown";
}
    21ec:	0018      	movs	r0, r3
    21ee:	b00a      	add	sp, #40	; 0x28
    21f0:	bd70      	pop	{r4, r5, r6, pc}
    21f2:	46c0      	nop			; (mov r8, r8)
    21f4:	000141ac 	.word	0x000141ac
    21f8:	00014568 	.word	0x00014568

000021fc <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    21fc:	094b      	lsrs	r3, r1, #5
    21fe:	009b      	lsls	r3, r3, #2
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    2200:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2202:	18c0      	adds	r0, r0, r3
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    2204:	000c      	movs	r4, r1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2206:	f010 fd42 	bl	12c8e <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    220a:	231f      	movs	r3, #31
    220c:	401c      	ands	r4, r3
    220e:	4120      	asrs	r0, r4
    2210:	3b1e      	subs	r3, #30
    2212:	4018      	ands	r0, r3
}
    2214:	bd10      	pop	{r4, pc}

00002216 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2216:	094b      	lsrs	r3, r1, #5
    2218:	009b      	lsls	r3, r3, #2
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    221a:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    221c:	18c0      	adds	r0, r0, r3
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
    221e:	000c      	movs	r4, r1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2220:	f010 fd35 	bl	12c8e <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    2224:	231f      	movs	r3, #31
    2226:	401c      	ands	r4, r3
    2228:	4120      	asrs	r0, r4
    222a:	3b1e      	subs	r3, #30
    222c:	4018      	ands	r0, r3
}
    222e:	bd10      	pop	{r4, pc}

00002230 <update_conn_param>:
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    2230:	0001      	movs	r1, r0
    2232:	2200      	movs	r2, #0

	return 0;
}

static void update_conn_param(struct bt_conn *conn)
{
    2234:	b510      	push	{r4, lr}
	/*
	 * Core 4.2 Vol 3, Part C, 9.3.12.2
	 * The Peripheral device should not perform a Connection Parameter
	 * Update procedure within 5 s after establishing a connection.
	 */
	k_delayed_work_submit(&conn->le.update_work,
    2236:	78c3      	ldrb	r3, [r0, #3]
    2238:	3180      	adds	r1, #128	; 0x80
    223a:	4293      	cmp	r3, r2
    223c:	d000      	beq.n	2240 <update_conn_param+0x10>
    223e:	4a02      	ldr	r2, [pc, #8]	; (2248 <update_conn_param+0x18>)
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    2240:	4802      	ldr	r0, [pc, #8]	; (224c <update_conn_param+0x1c>)
    2242:	f011 ff05 	bl	14050 <k_delayed_work_submit_to_queue>
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
				 CONN_UPDATE_TIMEOUT);
}
    2246:	bd10      	pop	{r4, pc}
    2248:	00001388 	.word	0x00001388
    224c:	20002000 	.word	0x20002000

00002250 <update_sec_level>:
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
static void update_sec_level(struct bt_conn *conn)
{
    2250:	b513      	push	{r0, r1, r4, lr}
	if (!conn->encrypt) {
    2252:	7a83      	ldrb	r3, [r0, #10]
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
static void update_sec_level(struct bt_conn *conn)
{
    2254:	0004      	movs	r4, r0
	if (!conn->encrypt) {
    2256:	2b00      	cmp	r3, #0
    2258:	d102      	bne.n	2260 <update_sec_level+0x10>
		conn->sec_level = BT_SECURITY_LOW;
    225a:	3301      	adds	r3, #1
    225c:	7203      	strb	r3, [r0, #8]
		return;
    225e:	e024      	b.n	22aa <update_sec_level+0x5a>
	}

	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    2260:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    2262:	2800      	cmp	r0, #0
    2264:	d00d      	beq.n	2282 <update_sec_level+0x32>
    2266:	3008      	adds	r0, #8
    2268:	2100      	movs	r1, #0
    226a:	f7ff ffc7 	bl	21fc <atomic_test_bit>
    226e:	2800      	cmp	r0, #0
    2270:	d007      	beq.n	2282 <update_sec_level+0x32>
					     BT_KEYS_AUTHENTICATED)) {
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    2272:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2274:	899b      	ldrh	r3, [r3, #12]
    2276:	069b      	lsls	r3, r3, #26
    2278:	d501      	bpl.n	227e <update_sec_level+0x2e>
			conn->sec_level = BT_SECURITY_FIPS;
    227a:	2304      	movs	r3, #4
    227c:	e002      	b.n	2284 <update_sec_level+0x34>
		} else {
			conn->sec_level = BT_SECURITY_HIGH;
    227e:	2303      	movs	r3, #3
    2280:	e000      	b.n	2284 <update_sec_level+0x34>
		}
	} else {
		conn->sec_level = BT_SECURITY_MEDIUM;
    2282:	2302      	movs	r3, #2
    2284:	7223      	strb	r3, [r4, #8]
	}

	if (conn->required_sec_level > conn->sec_level) {
    2286:	7a62      	ldrb	r2, [r4, #9]
    2288:	7a23      	ldrb	r3, [r4, #8]
    228a:	429a      	cmp	r2, r3
    228c:	d90d      	bls.n	22aa <update_sec_level+0x5a>
		BT_ERR("Failed to set required security level");
    228e:	4b07      	ldr	r3, [pc, #28]	; (22ac <update_sec_level+0x5c>)
    2290:	4907      	ldr	r1, [pc, #28]	; (22b0 <update_sec_level+0x60>)
    2292:	9301      	str	r3, [sp, #4]
    2294:	4b07      	ldr	r3, [pc, #28]	; (22b4 <update_sec_level+0x64>)
    2296:	4a08      	ldr	r2, [pc, #32]	; (22b8 <update_sec_level+0x68>)
    2298:	9300      	str	r3, [sp, #0]
    229a:	4808      	ldr	r0, [pc, #32]	; (22bc <update_sec_level+0x6c>)
    229c:	4b08      	ldr	r3, [pc, #32]	; (22c0 <update_sec_level+0x70>)
    229e:	f7ff fa63 	bl	1768 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    22a2:	2105      	movs	r1, #5
    22a4:	0020      	movs	r0, r4
    22a6:	f002 fbd7 	bl	4a58 <bt_conn_disconnect>
	}
}
    22aa:	bd13      	pop	{r0, r1, r4, pc}
    22ac:	000145b0 	.word	0x000145b0
    22b0:	00014577 	.word	0x00014577
    22b4:	000145b5 	.word	0x000145b5
    22b8:	00014570 	.word	0x00014570
    22bc:	0001457a 	.word	0x0001457a
    22c0:	00016745 	.word	0x00016745

000022c4 <hci_cmd_done>:
	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
{
    22c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22c6:	0005      	movs	r5, r0
    22c8:	b087      	sub	sp, #28
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    22ca:	7990      	ldrb	r0, [r2, #6]
	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
{
    22cc:	000e      	movs	r6, r1
    22ce:	0014      	movs	r4, r2
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    22d0:	f010 f97a 	bl	125c8 <net_buf_pool_get>
    22d4:	4f1a      	ldr	r7, [pc, #104]	; (2340 <hci_cmd_done+0x7c>)
    22d6:	42b8      	cmp	r0, r7
    22d8:	d011      	beq.n	22fe <hci_cmd_done+0x3a>
		BT_WARN("pool id %u pool %p != &hci_cmd_pool %p",
    22da:	79a4      	ldrb	r4, [r4, #6]
    22dc:	0020      	movs	r0, r4
    22de:	f010 f973 	bl	125c8 <net_buf_pool_get>
    22e2:	4b18      	ldr	r3, [pc, #96]	; (2344 <hci_cmd_done+0x80>)
    22e4:	9002      	str	r0, [sp, #8]
    22e6:	9304      	str	r3, [sp, #16]
    22e8:	4b17      	ldr	r3, [pc, #92]	; (2348 <hci_cmd_done+0x84>)
    22ea:	9703      	str	r7, [sp, #12]
    22ec:	9300      	str	r3, [sp, #0]
    22ee:	9401      	str	r4, [sp, #4]
    22f0:	4b16      	ldr	r3, [pc, #88]	; (234c <hci_cmd_done+0x88>)
    22f2:	4a17      	ldr	r2, [pc, #92]	; (2350 <hci_cmd_done+0x8c>)
    22f4:	4917      	ldr	r1, [pc, #92]	; (2354 <hci_cmd_done+0x90>)
    22f6:	4818      	ldr	r0, [pc, #96]	; (2358 <hci_cmd_done+0x94>)
    22f8:	f7ff fa36 	bl	1768 <printk>
			buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
    22fc:	e01e      	b.n	233c <hci_cmd_done+0x78>
	}

	if (cmd(buf)->opcode != opcode) {
    22fe:	0020      	movs	r0, r4
    2300:	f7ff ff5c 	bl	21bc <net_buf_user_data>
    2304:	8843      	ldrh	r3, [r0, #2]
    2306:	429d      	cmp	r5, r3
    2308:	d00b      	beq.n	2322 <hci_cmd_done+0x5e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    230a:	4a0e      	ldr	r2, [pc, #56]	; (2344 <hci_cmd_done+0x80>)
    230c:	9302      	str	r3, [sp, #8]
    230e:	4b0e      	ldr	r3, [pc, #56]	; (2348 <hci_cmd_done+0x84>)
    2310:	9203      	str	r2, [sp, #12]
    2312:	9300      	str	r3, [sp, #0]
    2314:	9501      	str	r5, [sp, #4]
    2316:	4b0d      	ldr	r3, [pc, #52]	; (234c <hci_cmd_done+0x88>)
    2318:	4a0d      	ldr	r2, [pc, #52]	; (2350 <hci_cmd_done+0x8c>)
    231a:	490e      	ldr	r1, [pc, #56]	; (2354 <hci_cmd_done+0x90>)
    231c:	480f      	ldr	r0, [pc, #60]	; (235c <hci_cmd_done+0x98>)
    231e:	f7ff fa23 	bl	1768 <printk>
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    2322:	0020      	movs	r0, r4
    2324:	f7ff ff4a 	bl	21bc <net_buf_user_data>
    2328:	6843      	ldr	r3, [r0, #4]
    232a:	2b00      	cmp	r3, #0
    232c:	d006      	beq.n	233c <hci_cmd_done+0x78>
		cmd(buf)->status = status;
    232e:	7046      	strb	r6, [r0, #1]
		k_sem_give(cmd(buf)->sync);
    2330:	0020      	movs	r0, r4
    2332:	f7ff ff43 	bl	21bc <net_buf_user_data>
    2336:	6840      	ldr	r0, [r0, #4]
    2338:	f011 fb70 	bl	13a1c <k_sem_give>
	}
}
    233c:	b007      	add	sp, #28
    233e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2340:	2000076c 	.word	0x2000076c
    2344:	000145b0 	.word	0x000145b0
    2348:	000145fb 	.word	0x000145fb
    234c:	0001678f 	.word	0x0001678f
    2350:	000145bd 	.word	0x000145bd
    2354:	00014577 	.word	0x00014577
    2358:	000145c4 	.word	0x000145c4
    235c:	00014603 	.word	0x00014603

00002360 <sys_put_le64>:
    2360:	0a03      	lsrs	r3, r0, #8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2362:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    2364:	7053      	strb	r3, [r2, #1]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    2366:	0c00      	lsrs	r0, r0, #16
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
	dst[1] = val >> 8;
    2368:	0a0b      	lsrs	r3, r1, #8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    236a:	7111      	strb	r1, [r2, #4]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    236c:	0c09      	lsrs	r1, r1, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    236e:	7090      	strb	r0, [r2, #2]
    2370:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
    2372:	0a00      	lsrs	r0, r0, #8
    2374:	0a09      	lsrs	r1, r1, #8
    2376:	70d0      	strb	r0, [r2, #3]
    2378:	7153      	strb	r3, [r2, #5]
    237a:	71d1      	strb	r1, [r2, #7]
 */
static inline void sys_put_le64(u64_t val, u8_t dst[8])
{
	sys_put_le32(val, dst);
	sys_put_le32(val >> 32, &dst[4]);
}
    237c:	4770      	bx	lr
	...

00002380 <bt_hci_cmd_create>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    2380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2382:	000e      	movs	r6, r1
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2384:	2101      	movs	r1, #1
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BLUETOOTH_ACL_RX_COUNT, ACL_IN_SIZE,
		    BT_BUF_USER_DATA_MIN, report_completed_packet);
#endif /* CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_hci_cmd_create(u16_t opcode, u8_t param_len)
{
    2386:	0005      	movs	r5, r0
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2388:	4249      	negs	r1, r1
    238a:	480f      	ldr	r0, [pc, #60]	; (23c8 <bt_hci_cmd_create+0x48>)
    238c:	f010 f924 	bl	125d8 <net_buf_alloc>
    2390:	0004      	movs	r4, r0
	__ASSERT_NO_MSG(buf);

	BT_DBG("buf %p", buf);

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    2392:	2100      	movs	r1, #0
    2394:	f010 f980 	bl	12698 <net_buf_reserve>

	cmd(buf)->type = BT_BUF_CMD;
    2398:	0020      	movs	r0, r4
    239a:	f7ff ff0f 	bl	21bc <net_buf_user_data>
    239e:	2700      	movs	r7, #0
    23a0:	7007      	strb	r7, [r0, #0]
	cmd(buf)->opcode = opcode;
    23a2:	0020      	movs	r0, r4
    23a4:	f7ff ff0a 	bl	21bc <net_buf_user_data>
    23a8:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    23aa:	0020      	movs	r0, r4
    23ac:	f7ff ff06 	bl	21bc <net_buf_user_data>
    23b0:	6047      	str	r7, [r0, #4]

	hdr = net_buf_add(buf, sizeof(*hdr));
    23b2:	0020      	movs	r0, r4
    23b4:	2103      	movs	r1, #3
    23b6:	3008      	adds	r0, #8
    23b8:	f010 f9a4 	bl	12704 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    23bc:	7005      	strb	r5, [r0, #0]
    23be:	0a2d      	lsrs	r5, r5, #8
    23c0:	7045      	strb	r5, [r0, #1]
	hdr->param_len = param_len;
    23c2:	7086      	strb	r6, [r0, #2]

	return buf;
}
    23c4:	0020      	movs	r0, r4
    23c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23c8:	2000076c 	.word	0x2000076c

000023cc <bt_hci_cmd_send_sync>:
	return 0;
}

int bt_hci_cmd_send_sync(u16_t opcode, struct net_buf *buf,
			 struct net_buf **rsp)
{
    23cc:	b570      	push	{r4, r5, r6, lr}
    23ce:	000c      	movs	r4, r1
    23d0:	b086      	sub	sp, #24
    23d2:	0015      	movs	r5, r2
	struct k_sem sync_sem;
	int err;

	if (!buf) {
    23d4:	2900      	cmp	r1, #0
    23d6:	d103      	bne.n	23e0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    23d8:	f7ff ffd2 	bl	2380 <bt_hci_cmd_create>
    23dc:	1e04      	subs	r4, r0, #0
		if (!buf) {
    23de:	d029      	beq.n	2434 <bt_hci_cmd_send_sync+0x68>
		}
	}

	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);

	k_sem_init(&sync_sem, 0, 1);
    23e0:	ae01      	add	r6, sp, #4
    23e2:	2201      	movs	r2, #1
    23e4:	2100      	movs	r1, #0
    23e6:	0030      	movs	r0, r6
    23e8:	f011 fb10 	bl	13a0c <k_sem_init>
	cmd(buf)->sync = &sync_sem;
    23ec:	0020      	movs	r0, r4
    23ee:	f7ff fee5 	bl	21bc <net_buf_user_data>
    23f2:	6046      	str	r6, [r0, #4]

	/* Make sure the buffer stays around until the command completes */
	net_buf_ref(buf);
    23f4:	0020      	movs	r0, r4
    23f6:	f010 f981 	bl	126fc <net_buf_ref>

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    23fa:	4810      	ldr	r0, [pc, #64]	; (243c <bt_hci_cmd_send_sync+0x70>)
    23fc:	0021      	movs	r1, r4
    23fe:	30c4      	adds	r0, #196	; 0xc4
    2400:	f010 f94f 	bl	126a2 <net_buf_put>

	err = k_sem_take(&sync_sem, HCI_CMD_TIMEOUT);
    2404:	490e      	ldr	r1, [pc, #56]	; (2440 <bt_hci_cmd_send_sync+0x74>)
    2406:	0030      	movs	r0, r6
    2408:	f011 fb44 	bl	13a94 <k_sem_take>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
    240c:	0020      	movs	r0, r4
    240e:	f7ff fed5 	bl	21bc <net_buf_user_data>
    2412:	7840      	ldrb	r0, [r0, #1]
    2414:	2800      	cmp	r0, #0
    2416:	d004      	beq.n	2422 <bt_hci_cmd_send_sync+0x56>
		err = -EIO;
		net_buf_unref(buf);
    2418:	0020      	movs	r0, r4
    241a:	f010 f951 	bl	126c0 <net_buf_unref>
	__ASSERT(err == 0, "k_sem_take failed with err %d", err);

	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);

	if (cmd(buf)->status) {
		err = -EIO;
    241e:	2005      	movs	r0, #5
    2420:	e009      	b.n	2436 <bt_hci_cmd_send_sync+0x6a>
		net_buf_unref(buf);
	} else {
		err = 0;
		if (rsp) {
    2422:	2d00      	cmp	r5, #0
    2424:	d001      	beq.n	242a <bt_hci_cmd_send_sync+0x5e>
			*rsp = buf;
    2426:	602c      	str	r4, [r5, #0]
    2428:	e006      	b.n	2438 <bt_hci_cmd_send_sync+0x6c>
		} else {
			net_buf_unref(buf);
    242a:	0020      	movs	r0, r4
    242c:	f010 f948 	bl	126c0 <net_buf_unref>

	if (cmd(buf)->status) {
		err = -EIO;
		net_buf_unref(buf);
	} else {
		err = 0;
    2430:	0028      	movs	r0, r5
    2432:	e001      	b.n	2438 <bt_hci_cmd_send_sync+0x6c>
	int err;

	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    2434:	2037      	movs	r0, #55	; 0x37
    2436:	4240      	negs	r0, r0
			net_buf_unref(buf);
		}
	}

	return err;
}
    2438:	b006      	add	sp, #24
    243a:	bd70      	pop	{r4, r5, r6, pc}
    243c:	200002b0 	.word	0x200002b0
    2440:	00002710 	.word	0x00002710

00002444 <set_random_address>:

	return 0;
}

static int set_random_address(const bt_addr_t *addr)
{
    2444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    2446:	4e14      	ldr	r6, [pc, #80]	; (2498 <set_random_address+0x54>)
    2448:	2206      	movs	r2, #6
    244a:	0037      	movs	r7, r6
    244c:	3708      	adds	r7, #8
    244e:	0039      	movs	r1, r7
    2450:	0005      	movs	r5, r0
    2452:	f7fe ff5f 	bl	1314 <memcmp>
    2456:	1e04      	subs	r4, r0, #0
	int err;

	BT_DBG("%s", bt_addr_str(addr));

	/* Do nothing if we already have the right address */
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2458:	d01b      	beq.n	2492 <set_random_address+0x4e>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    245a:	2106      	movs	r1, #6
    245c:	480f      	ldr	r0, [pc, #60]	; (249c <set_random_address+0x58>)
    245e:	f7ff ff8f 	bl	2380 <bt_hci_cmd_create>
    2462:	1e04      	subs	r4, r0, #0
	if (!buf) {
    2464:	d013      	beq.n	248e <set_random_address+0x4a>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, addr, sizeof(*addr));
    2466:	2206      	movs	r2, #6
    2468:	0029      	movs	r1, r5
    246a:	3008      	adds	r0, #8
    246c:	f010 f951 	bl	12712 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2470:	0021      	movs	r1, r4
    2472:	2200      	movs	r2, #0
    2474:	4809      	ldr	r0, [pc, #36]	; (249c <set_random_address+0x58>)
    2476:	f7ff ffa9 	bl	23cc <bt_hci_cmd_send_sync>
    247a:	1e04      	subs	r4, r0, #0
	if (err) {
    247c:	d109      	bne.n	2492 <set_random_address+0x4e>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    247e:	2206      	movs	r2, #6
    2480:	0029      	movs	r1, r5
    2482:	0038      	movs	r0, r7
    2484:	f7fe ff6e 	bl	1364 <memcpy>
		return err;
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2488:	2301      	movs	r3, #1
    248a:	71f3      	strb	r3, [r6, #7]
    248c:	e001      	b.n	2492 <set_random_address+0x4e>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
	if (!buf) {
		return -ENOBUFS;
    248e:	2437      	movs	r4, #55	; 0x37
    2490:	4264      	negs	r4, r4
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
	return 0;
}
    2492:	0020      	movs	r0, r4
    2494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	200002b0 	.word	0x200002b0
    249c:	00002005 	.word	0x00002005

000024a0 <le_set_private_addr>:
		le_set_private_addr();
	}
}
#else
static int le_set_private_addr(void)
{
    24a0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_t nrpa;
	int err;

	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    24a2:	2106      	movs	r1, #6
    24a4:	4668      	mov	r0, sp
    24a6:	f009 f8eb 	bl	b680 <bt_rand>
	if (err) {
    24aa:	2800      	cmp	r0, #0
    24ac:	d108      	bne.n	24c0 <le_set_private_addr+0x20>
		return err;
	}

	nrpa.val[5] &= 0x3f;
    24ae:	466b      	mov	r3, sp
    24b0:	795a      	ldrb	r2, [r3, #5]
    24b2:	233f      	movs	r3, #63	; 0x3f
    24b4:	4013      	ands	r3, r2
    24b6:	466a      	mov	r2, sp

	return set_random_address(&nrpa);
    24b8:	4668      	mov	r0, sp
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
	if (err) {
		return err;
	}

	nrpa.val[5] &= 0x3f;
    24ba:	7153      	strb	r3, [r2, #5]

	return set_random_address(&nrpa);
    24bc:	f7ff ffc2 	bl	2444 <set_random_address>
}
    24c0:	bd0e      	pop	{r1, r2, r3, pc}
	...

000024c4 <bt_hci_stop_scanning>:

	return err;
}

static int bt_hci_stop_scanning(void)
{
    24c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    24c6:	4d1c      	ldr	r5, [pc, #112]	; (2538 <bt_hci_stop_scanning+0x74>)
    24c8:	2107      	movs	r1, #7
    24ca:	356c      	adds	r5, #108	; 0x6c
    24cc:	0028      	movs	r0, r5
    24ce:	f7ff fe95 	bl	21fc <atomic_test_bit>
    24d2:	2800      	cmp	r0, #0
    24d4:	d02b      	beq.n	252e <bt_hci_stop_scanning+0x6a>
		return -EALREADY;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    24d6:	2102      	movs	r1, #2
    24d8:	4818      	ldr	r0, [pc, #96]	; (253c <bt_hci_stop_scanning+0x78>)
    24da:	f7ff ff51 	bl	2380 <bt_hci_cmd_create>
    24de:	1e04      	subs	r4, r0, #0
				sizeof(*scan_enable));
	if (!buf) {
    24e0:	d027      	beq.n	2532 <bt_hci_stop_scanning+0x6e>
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    24e2:	2102      	movs	r1, #2
    24e4:	3008      	adds	r0, #8
    24e6:	f010 f90d 	bl	12704 <net_buf_simple_add>
	memset(scan_enable, 0, sizeof(*scan_enable));
    24ea:	2202      	movs	r2, #2
    24ec:	2100      	movs	r1, #0
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    24ee:	0006      	movs	r6, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    24f0:	f7fe ff62 	bl	13b8 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    24f4:	2300      	movs	r3, #0
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    24f6:	aa01      	add	r2, sp, #4
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
	memset(scan_enable, 0, sizeof(*scan_enable));
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    24f8:	7073      	strb	r3, [r6, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    24fa:	7033      	strb	r3, [r6, #0]

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    24fc:	0021      	movs	r1, r4
    24fe:	480f      	ldr	r0, [pc, #60]	; (253c <bt_hci_stop_scanning+0x78>)
    2500:	f7ff ff64 	bl	23cc <bt_hci_cmd_send_sync>
	if (err) {
    2504:	2800      	cmp	r0, #0
    2506:	d116      	bne.n	2536 <bt_hci_stop_scanning+0x72>
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    2508:	9b01      	ldr	r3, [sp, #4]
    250a:	689b      	ldr	r3, [r3, #8]
    250c:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    250e:	2c00      	cmp	r4, #0
    2510:	d108      	bne.n	2524 <bt_hci_stop_scanning+0x60>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2512:	2181      	movs	r1, #129	; 0x81
    2514:	0028      	movs	r0, r5
    2516:	4249      	negs	r1, r1
    2518:	f010 fbd0 	bl	12cbc <atomic_and>
    251c:	4908      	ldr	r1, [pc, #32]	; (2540 <bt_hci_stop_scanning+0x7c>)
    251e:	0028      	movs	r0, r5
    2520:	f010 fbcc 	bl	12cbc <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_SCANNING);
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);
    2524:	9801      	ldr	r0, [sp, #4]
    2526:	f010 f8cb 	bl	126c0 <net_buf_unref>
	if (err) {
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    252a:	0020      	movs	r0, r4
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);

	return err;
    252c:	e003      	b.n	2536 <bt_hci_stop_scanning+0x72>
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
		return -EALREADY;
    252e:	2045      	movs	r0, #69	; 0x45
    2530:	e000      	b.n	2534 <bt_hci_stop_scanning+0x70>
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
    2532:	2037      	movs	r0, #55	; 0x37
    2534:	4240      	negs	r0, r0
	}

	net_buf_unref(rsp);

	return err;
}
    2536:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    2538:	200002b0 	.word	0x200002b0
    253c:	0000200c 	.word	0x0000200c
    2540:	fffffdff 	.word	0xfffffdff

00002544 <set_advertise_enable>:

	return addr;
}

static int set_advertise_enable(bool enable)
{
    2544:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2546:	2101      	movs	r1, #1

	return addr;
}

static int set_advertise_enable(bool enable)
{
    2548:	0005      	movs	r5, r0
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    254a:	4812      	ldr	r0, [pc, #72]	; (2594 <set_advertise_enable+0x50>)
    254c:	f7ff ff18 	bl	2380 <bt_hci_cmd_create>
    2550:	1e04      	subs	r4, r0, #0
	if (!buf) {
    2552:	d01a      	beq.n	258a <set_advertise_enable+0x46>
    2554:	3008      	adds	r0, #8
		return -ENOBUFS;
	}

	if (enable) {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    2556:	2101      	movs	r1, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
	if (!buf) {
		return -ENOBUFS;
	}

	if (enable) {
    2558:	2d00      	cmp	r5, #0
    255a:	d100      	bne.n	255e <set_advertise_enable+0x1a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
	} else {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    255c:	0029      	movs	r1, r5
    255e:	f010 f8e2 	bl	12726 <net_buf_simple_add_u8>
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2562:	0021      	movs	r1, r4
    2564:	2200      	movs	r2, #0
    2566:	480b      	ldr	r0, [pc, #44]	; (2594 <set_advertise_enable+0x50>)
    2568:	f7ff ff30 	bl	23cc <bt_hci_cmd_send_sync>
    256c:	1e04      	subs	r4, r0, #0
	if (err) {
    256e:	d10e      	bne.n	258e <set_advertise_enable+0x4a>
    2570:	4809      	ldr	r0, [pc, #36]	; (2598 <set_advertise_enable+0x54>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2572:	306c      	adds	r0, #108	; 0x6c
		return err;
	}

	if (enable) {
    2574:	2d00      	cmp	r5, #0
    2576:	d003      	beq.n	2580 <set_advertise_enable+0x3c>
    2578:	2120      	movs	r1, #32
    257a:	f010 fb94 	bl	12ca6 <atomic_or>
    257e:	e006      	b.n	258e <set_advertise_enable+0x4a>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2580:	2121      	movs	r1, #33	; 0x21
    2582:	4249      	negs	r1, r1
    2584:	f010 fb9a 	bl	12cbc <atomic_and>
    2588:	e001      	b.n	258e <set_advertise_enable+0x4a>
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
	if (!buf) {
		return -ENOBUFS;
    258a:	2437      	movs	r4, #55	; 0x37
    258c:	4264      	negs	r4, r4
	} else {
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);
	}

	return 0;
}
    258e:	0020      	movs	r0, r4
    2590:	bd70      	pop	{r4, r5, r6, pc}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	0000200a 	.word	0x0000200a
    2598:	200002b0 	.word	0x200002b0

0000259c <set_ad>:

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    259c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    259e:	000c      	movs	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    25a0:	2120      	movs	r1, #32

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    25a2:	9000      	str	r0, [sp, #0]
    25a4:	9201      	str	r2, [sp, #4]
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    25a6:	f7ff feeb 	bl	2380 <bt_hci_cmd_create>
    25aa:	1e06      	subs	r6, r0, #0
	if (!buf) {
    25ac:	d037      	beq.n	261e <set_ad+0x82>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    25ae:	2120      	movs	r1, #32
    25b0:	3008      	adds	r0, #8
    25b2:	f010 f8a7 	bl	12704 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    25b6:	2220      	movs	r2, #32
    25b8:	2100      	movs	r1, #0
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    25ba:	0005      	movs	r5, r0

	memset(set_data, 0, sizeof(*set_data));

	for (i = 0; i < ad_len; i++) {
    25bc:	2700      	movs	r7, #0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));

	memset(set_data, 0, sizeof(*set_data));
    25be:	f7fe fefb 	bl	13b8 <memset>

	for (i = 0; i < ad_len; i++) {
    25c2:	9b01      	ldr	r3, [sp, #4]
    25c4:	429f      	cmp	r7, r3
    25c6:	d024      	beq.n	2612 <set_ad+0x76>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    25c8:	7828      	ldrb	r0, [r5, #0]
    25ca:	7863      	ldrb	r3, [r4, #1]
    25cc:	181b      	adds	r3, r3, r0
    25ce:	3302      	adds	r3, #2
    25d0:	2b1f      	cmp	r3, #31
    25d2:	dd04      	ble.n	25de <set_ad+0x42>
			net_buf_unref(buf);
    25d4:	0030      	movs	r0, r6
    25d6:	f010 f873 	bl	126c0 <net_buf_unref>
			return -EINVAL;
    25da:	2016      	movs	r0, #22
    25dc:	e020      	b.n	2620 <set_ad+0x84>
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    25de:	1c43      	adds	r3, r0, #1
    25e0:	b2db      	uxtb	r3, r3
    25e2:	702b      	strb	r3, [r5, #0]
    25e4:	7862      	ldrb	r2, [r4, #1]
    25e6:	1829      	adds	r1, r5, r0
		set_data->data[set_data->len++] = ad[i].type;
    25e8:	3002      	adds	r0, #2
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    25ea:	3201      	adds	r2, #1
		set_data->data[set_data->len++] = ad[i].type;
    25ec:	b2c0      	uxtb	r0, r0
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    25ee:	704a      	strb	r2, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    25f0:	7028      	strb	r0, [r5, #0]
    25f2:	7822      	ldrb	r2, [r4, #0]
    25f4:	18eb      	adds	r3, r5, r3
    25f6:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    25f8:	1828      	adds	r0, r5, r0
    25fa:	7862      	ldrb	r2, [r4, #1]
    25fc:	6861      	ldr	r1, [r4, #4]
    25fe:	3001      	adds	r0, #1
    2600:	f7fe feb0 	bl	1364 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    2604:	7863      	ldrb	r3, [r4, #1]
    2606:	782a      	ldrb	r2, [r5, #0]

	set_data = net_buf_add(buf, sizeof(*set_data));

	memset(set_data, 0, sizeof(*set_data));

	for (i = 0; i < ad_len; i++) {
    2608:	3701      	adds	r7, #1
		set_data->data[set_data->len++] = ad[i].data_len + 1;
		set_data->data[set_data->len++] = ad[i].type;

		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    260a:	18d3      	adds	r3, r2, r3
    260c:	702b      	strb	r3, [r5, #0]
    260e:	3408      	adds	r4, #8
    2610:	e7d7      	b.n	25c2 <set_ad+0x26>
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2612:	2200      	movs	r2, #0
    2614:	0031      	movs	r1, r6
    2616:	9800      	ldr	r0, [sp, #0]
    2618:	f7ff fed8 	bl	23cc <bt_hci_cmd_send_sync>
    261c:	e001      	b.n	2622 <set_ad+0x86>
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
    261e:	2037      	movs	r0, #55	; 0x37
    2620:	4240      	negs	r0, r0
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
}
    2622:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00002624 <bt_le_conn_params_valid>:
done:
	bt_conn_unref(conn);
}

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
    2624:	b530      	push	{r4, r5, lr}
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
    2626:	8801      	ldrh	r1, [r0, #0]
    2628:	8843      	ldrh	r3, [r0, #2]
done:
	bt_conn_unref(conn);
}

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
    262a:	0002      	movs	r2, r0
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
	    param->interval_min < 6 || param->interval_max > 3200) {
		return false;
    262c:	2000      	movs	r0, #0

bool bt_le_conn_params_valid(const struct bt_le_conn_param *param)
{
	/* All limits according to BT Core spec 5.0 [Vol 2, Part E, 7.8.12] */

	if (param->interval_min > param->interval_max ||
    262e:	4299      	cmp	r1, r3
    2630:	d819      	bhi.n	2666 <bt_le_conn_params_valid+0x42>
    2632:	2905      	cmp	r1, #5
    2634:	d917      	bls.n	2666 <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    2636:	21c8      	movs	r1, #200	; 0xc8
    2638:	0109      	lsls	r1, r1, #4
    263a:	428b      	cmp	r3, r1
    263c:	d813      	bhi.n	2666 <bt_le_conn_params_valid+0x42>
		return false;
	}

	if (param->latency > 499) {
    263e:	24f4      	movs	r4, #244	; 0xf4
    2640:	8891      	ldrh	r1, [r2, #4]
    2642:	34ff      	adds	r4, #255	; 0xff
    2644:	42a1      	cmp	r1, r4
    2646:	d80e      	bhi.n	2666 <bt_le_conn_params_valid+0x42>
		return false;
	}

	if (param->timeout < 10 || param->timeout > 3200 ||
    2648:	88d2      	ldrh	r2, [r2, #6]
    264a:	4d07      	ldr	r5, [pc, #28]	; (2668 <bt_le_conn_params_valid+0x44>)
    264c:	0014      	movs	r4, r2
    264e:	3c0a      	subs	r4, #10
    2650:	b2a4      	uxth	r4, r4
    2652:	42ac      	cmp	r4, r5
    2654:	d807      	bhi.n	2666 <bt_le_conn_params_valid+0x42>
    2656:	3101      	adds	r1, #1
    2658:	434b      	muls	r3, r1
    265a:	0092      	lsls	r2, r2, #2
    265c:	2101      	movs	r1, #1
    265e:	429a      	cmp	r2, r3
    2660:	dc00      	bgt.n	2664 <bt_le_conn_params_valid+0x40>
    2662:	1c01      	adds	r1, r0, #0
    2664:	b2c8      	uxtb	r0, r1
	     ((1 + param->latency) * param->interval_max))) {
		return false;
	}

	return true;
}
    2666:	bd30      	pop	{r4, r5, pc}
    2668:	00000c76 	.word	0x00000c76

0000266c <bt_le_scan_update>:

	return err;
}

int bt_le_scan_update(bool fast_scan)
{
    266c:	b510      	push	{r4, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    266e:	4c09      	ldr	r4, [pc, #36]	; (2694 <bt_le_scan_update+0x28>)
    2670:	2108      	movs	r1, #8
    2672:	346c      	adds	r4, #108	; 0x6c
    2674:	0020      	movs	r0, r4
    2676:	f7ff fdc1 	bl	21fc <atomic_test_bit>
    267a:	2800      	cmp	r0, #0
    267c:	d001      	beq.n	2682 <bt_le_scan_update+0x16>
		return 0;
    267e:	2000      	movs	r0, #0
    2680:	e007      	b.n	2692 <bt_le_scan_update+0x26>
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2682:	2107      	movs	r1, #7
    2684:	0020      	movs	r0, r4
    2686:	f7ff fdb9 	bl	21fc <atomic_test_bit>
    268a:	2800      	cmp	r0, #0
    268c:	d0f7      	beq.n	267e <bt_le_scan_update+0x12>
		int err;

		err = bt_hci_stop_scanning();
    268e:	f7ff ff19 	bl	24c4 <bt_hci_stop_scanning>
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
				     0x01);
	}

	return 0;
}
    2692:	bd10      	pop	{r4, pc}
    2694:	200002b0 	.word	0x200002b0

00002698 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    2698:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    269a:	b510      	push	{r4, lr}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;

	return bt_rand(addr->a.val, 6);
    269c:	2106      	movs	r1, #6

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    269e:	0004      	movs	r4, r0
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    26a0:	7003      	strb	r3, [r0, #0]

	return bt_rand(addr->a.val, 6);
    26a2:	18c0      	adds	r0, r0, r3
    26a4:	f008 ffec 	bl	b680 <bt_rand>
int bt_addr_le_create_static(bt_addr_le_t *addr)
{
	int err;

	err = create_random_addr(addr);
	if (err) {
    26a8:	2800      	cmp	r0, #0
    26aa:	d104      	bne.n	26b6 <bt_addr_le_create_static+0x1e>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    26ac:	2240      	movs	r2, #64	; 0x40
    26ae:	79a3      	ldrb	r3, [r4, #6]
    26b0:	4252      	negs	r2, r2
    26b2:	4313      	orrs	r3, r2
    26b4:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    26b6:	bd10      	pop	{r4, pc}

000026b8 <bt_init>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PRIVACY */

static int bt_init(void)
{
    26b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ba:	b097      	sub	sp, #92	; 0x5c
{
	struct net_buf *rsp;
	int err;

	/* Send HCI_RESET */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    26bc:	ae0f      	add	r6, sp, #60	; 0x3c
    26be:	0032      	movs	r2, r6
    26c0:	2100      	movs	r1, #0
    26c2:	48d0      	ldr	r0, [pc, #832]	; (2a04 <bt_init+0x34c>)
    26c4:	f7ff fe82 	bl	23cc <bt_hci_cmd_send_sync>
	if (err) {
    26c8:	1e04      	subs	r4, r0, #0
    26ca:	d167      	bne.n	279c <bt_init+0xe4>
    26cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	}
}

static void hci_reset_complete(struct net_buf *buf)
{
	u8_t status = buf->data[0];
    26ce:	689b      	ldr	r3, [r3, #8]

	BT_DBG("status %u", status);

	if (status) {
    26d0:	781b      	ldrb	r3, [r3, #0]
    26d2:	2b00      	cmp	r3, #0
    26d4:	d106      	bne.n	26e4 <bt_init+0x2c>
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    26d6:	48cc      	ldr	r0, [pc, #816]	; (2a08 <bt_init+0x350>)

	if (status) {
		return;
	}

	scan_dev_found_cb = NULL;
    26d8:	4acc      	ldr	r2, [pc, #816]	; (2a0c <bt_init+0x354>)
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    26da:	2101      	movs	r1, #1
    26dc:	306c      	adds	r0, #108	; 0x6c

	if (status) {
		return;
	}

	scan_dev_found_cb = NULL;
    26de:	6013      	str	r3, [r2, #0]
	discovery_results_size = 0;
	discovery_results_count = 0;
#endif /* CONFIG_BLUETOOTH_BREDR */

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
    26e0:	f010 fad7 	bl	12c92 <atomic_set>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
	if (err) {
		return err;
	}
	hci_reset_complete(rsp);
	net_buf_unref(rsp);
    26e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    26e6:	f00f ffeb 	bl	126c0 <net_buf_unref>
		return err;
	}
#endif

	/* Read Local Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    26ea:	0032      	movs	r2, r6
    26ec:	2100      	movs	r1, #0
    26ee:	48c8      	ldr	r0, [pc, #800]	; (2a10 <bt_init+0x358>)
    26f0:	f7ff fe6c 	bl	23cc <bt_hci_cmd_send_sync>
    26f4:	0007      	movs	r7, r0
	if (err) {
    26f6:	1e04      	subs	r4, r0, #0
    26f8:	d150      	bne.n	279c <bt_init+0xe4>
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    26fa:	4dc3      	ldr	r5, [pc, #780]	; (2a08 <bt_init+0x350>)
    26fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    26fe:	0028      	movs	r0, r5
    2700:	6899      	ldr	r1, [r3, #8]
    2702:	2208      	movs	r2, #8
    2704:	3101      	adds	r1, #1
    2706:	3016      	adds	r0, #22
    2708:	f7fe fe2c 	bl	1364 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
	if (err) {
		return err;
	}
	read_local_features_complete(rsp);
	net_buf_unref(rsp);
    270c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    270e:	f00f ffd7 	bl	126c0 <net_buf_unref>

	/* Read Local Version Information */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2712:	0039      	movs	r1, r7
    2714:	0032      	movs	r2, r6
    2716:	48bf      	ldr	r0, [pc, #764]	; (2a14 <bt_init+0x35c>)
    2718:	f7ff fe58 	bl	23cc <bt_hci_cmd_send_sync>
    271c:	0007      	movs	r7, r0
				   &rsp);
	if (err) {
    271e:	1e04      	subs	r4, r0, #0
    2720:	d13c      	bne.n	279c <bt_init+0xe4>
		return err;
	}
	read_local_ver_complete(rsp);
    2722:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2724:	6883      	ldr	r3, [r0, #8]
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    2726:	785a      	ldrb	r2, [r3, #1]
    2728:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    272a:	78da      	ldrb	r2, [r3, #3]
    272c:	7899      	ldrb	r1, [r3, #2]
    272e:	0212      	lsls	r2, r2, #8
    2730:	430a      	orrs	r2, r1
    2732:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2734:	791a      	ldrb	r2, [r3, #4]
    2736:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2738:	7a1a      	ldrb	r2, [r3, #8]
    273a:	79d9      	ldrb	r1, [r3, #7]
    273c:	0212      	lsls	r2, r2, #8
    273e:	430a      	orrs	r2, r1
    2740:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2742:	795a      	ldrb	r2, [r3, #5]
    2744:	799b      	ldrb	r3, [r3, #6]
    2746:	021b      	lsls	r3, r3, #8
    2748:	4313      	orrs	r3, r2
    274a:	82ab      	strh	r3, [r5, #20]
				   &rsp);
	if (err) {
		return err;
	}
	read_local_ver_complete(rsp);
	net_buf_unref(rsp);
    274c:	f00f ffb8 	bl	126c0 <net_buf_unref>

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2750:	0039      	movs	r1, r7
    2752:	0032      	movs	r2, r6
    2754:	48b0      	ldr	r0, [pc, #704]	; (2a18 <bt_init+0x360>)
    2756:	f7ff fe39 	bl	23cc <bt_hci_cmd_send_sync>
    275a:	0007      	movs	r7, r0
	if (err) {
    275c:	1e04      	subs	r4, r0, #0
    275e:	d11d      	bne.n	279c <bt_init+0xe4>
    2760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2762:	2206      	movs	r2, #6
{
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    2764:	6899      	ldr	r1, [r3, #8]
    2766:	1c68      	adds	r0, r5, #1
    2768:	3101      	adds	r1, #1
    276a:	f7fe fdfb 	bl	1364 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    276e:	980f      	ldr	r0, [sp, #60]	; 0x3c
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2770:	702f      	strb	r7, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    2772:	f00f ffa5 	bl	126c0 <net_buf_unref>

	/* Read Local Supported Commands */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2776:	0032      	movs	r2, r6
    2778:	0039      	movs	r1, r7
    277a:	48a8      	ldr	r0, [pc, #672]	; (2a1c <bt_init+0x364>)
    277c:	f7ff fe26 	bl	23cc <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    2780:	1e04      	subs	r4, r0, #0
    2782:	d10b      	bne.n	279c <bt_init+0xe4>
{
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
    2784:	0028      	movs	r0, r5
    2786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2788:	2240      	movs	r2, #64	; 0x40
    278a:	6899      	ldr	r1, [r3, #8]
    278c:	301e      	adds	r0, #30
    278e:	3101      	adds	r1, #1
    2790:	f7fe fde8 	bl	1364 <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_supported_commands_complete(rsp);
	net_buf_unref(rsp);
    2794:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2796:	f00f ff93 	bl	126c0 <net_buf_unref>
    279a:	e002      	b.n	27a2 <bt_init+0xea>
static int hci_init(void)
{
	int err;

	err = common_init();
	if (err) {
    279c:	2c00      	cmp	r4, #0
    279e:	d000      	beq.n	27a2 <bt_init+0xea>
    27a0:	e26f      	b.n	2c82 <bt_init+0x5ca>
	struct net_buf *buf;
	struct net_buf *rsp;
	int err;

	/* For now we only support LE capable controllers */
	if (!BT_FEAT_LE(bt_dev.features)) {
    27a2:	4d99      	ldr	r5, [pc, #612]	; (2a08 <bt_init+0x350>)
    27a4:	7eab      	ldrb	r3, [r5, #26]
    27a6:	065b      	lsls	r3, r3, #25
    27a8:	d40b      	bmi.n	27c2 <bt_init+0x10a>
		BT_ERR("Non-LE capable controller detected!");
    27aa:	4b9d      	ldr	r3, [pc, #628]	; (2a20 <bt_init+0x368>)
    27ac:	4a9d      	ldr	r2, [pc, #628]	; (2a24 <bt_init+0x36c>)
    27ae:	9301      	str	r3, [sp, #4]
    27b0:	4b9d      	ldr	r3, [pc, #628]	; (2a28 <bt_init+0x370>)
    27b2:	499e      	ldr	r1, [pc, #632]	; (2a2c <bt_init+0x374>)
    27b4:	9300      	str	r3, [sp, #0]
    27b6:	489e      	ldr	r0, [pc, #632]	; (2a30 <bt_init+0x378>)
    27b8:	4b9e      	ldr	r3, [pc, #632]	; (2a34 <bt_init+0x37c>)
    27ba:	f7fe ffd5 	bl	1768 <printk>
		return -ENODEV;
    27be:	2413      	movs	r4, #19
    27c0:	e25e      	b.n	2c80 <bt_init+0x5c8>
	}

	/* Read Low Energy Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    27c2:	aa0d      	add	r2, sp, #52	; 0x34
    27c4:	2100      	movs	r1, #0
    27c6:	489c      	ldr	r0, [pc, #624]	; (2a38 <bt_init+0x380>)
    27c8:	f7ff fe00 	bl	23cc <bt_hci_cmd_send_sync>
    27cc:	0007      	movs	r7, r0
				   &rsp);
	if (err) {
    27ce:	1e04      	subs	r4, r0, #0
    27d0:	d000      	beq.n	27d4 <bt_init+0x11c>
    27d2:	e0e1      	b.n	2998 <bt_init+0x2e0>
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    27d4:	0028      	movs	r0, r5
    27d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    27d8:	2208      	movs	r2, #8
    27da:	6899      	ldr	r1, [r3, #8]
    27dc:	3070      	adds	r0, #112	; 0x70
    27de:	3101      	adds	r1, #1
    27e0:	f7fe fdc0 	bl	1364 <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_le_features_complete(rsp);
	net_buf_unref(rsp);
    27e4:	980d      	ldr	r0, [sp, #52]	; 0x34
    27e6:	f00f ff6b 	bl	126c0 <net_buf_unref>

#if defined(CONFIG_BLUETOOTH_CONN)
	/* Read LE Buffer Size */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    27ea:	aa0d      	add	r2, sp, #52	; 0x34
    27ec:	0039      	movs	r1, r7
    27ee:	4893      	ldr	r0, [pc, #588]	; (2a3c <bt_init+0x384>)
    27f0:	f7ff fdec 	bl	23cc <bt_hci_cmd_send_sync>
				   NULL, &rsp);
	if (err) {
    27f4:	1e04      	subs	r4, r0, #0
    27f6:	d000      	beq.n	27fa <bt_init+0x142>
    27f8:	e0ce      	b.n	2998 <bt_init+0x2e0>
    27fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    27fc:	6899      	ldr	r1, [r3, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
	u8_t le_max_num;

	BT_DBG("status %u", rp->status);

	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    27fe:	788b      	ldrb	r3, [r1, #2]
    2800:	784a      	ldrb	r2, [r1, #1]
    2802:	021b      	lsls	r3, r3, #8
    2804:	4313      	orrs	r3, r2
    2806:	002a      	movs	r2, r5
    2808:	3280      	adds	r2, #128	; 0x80
    280a:	8013      	strh	r3, [r2, #0]
	if (!bt_dev.le.mtu) {
    280c:	2b00      	cmp	r3, #0
    280e:	d00a      	beq.n	2826 <bt_init+0x16e>
	}

	BT_DBG("ACL LE buffers: pkts %u mtu %u", rp->le_max_num, bt_dev.le.mtu);

	le_max_num = min(rp->le_max_num, CONFIG_BLUETOOTH_CONN_TX_MAX);
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2810:	78cb      	ldrb	r3, [r1, #3]
    2812:	1c19      	adds	r1, r3, #0
    2814:	2b02      	cmp	r3, #2
    2816:	d900      	bls.n	281a <bt_init+0x162>
    2818:	2102      	movs	r1, #2
    281a:	0028      	movs	r0, r5
    281c:	b2c9      	uxtb	r1, r1
    281e:	3084      	adds	r0, #132	; 0x84
    2820:	000a      	movs	r2, r1
    2822:	f011 f8f3 	bl	13a0c <k_sem_init>
				   NULL, &rsp);
	if (err) {
		return err;
	}
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    2826:	980d      	ldr	r0, [sp, #52]	; 0x34
    2828:	f00f ff4a 	bl	126c0 <net_buf_unref>
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
    282c:	2320      	movs	r3, #32
    282e:	7eac      	ldrb	r4, [r5, #26]
    2830:	401c      	ands	r4, r3
    2832:	d005      	beq.n	2840 <bt_init+0x188>
			return err;
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2834:	002b      	movs	r3, r5
    2836:	333a      	adds	r3, #58	; 0x3a
    2838:	781b      	ldrb	r3, [r3, #0]
    283a:	071b      	lsls	r3, r3, #28
    283c:	d53c      	bpl.n	28b8 <bt_init+0x200>
    283e:	e015      	b.n	286c <bt_init+0x1b4>
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
#endif

	if (BT_FEAT_BREDR(bt_dev.features)) {
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2840:	2102      	movs	r1, #2
    2842:	487f      	ldr	r0, [pc, #508]	; (2a40 <bt_init+0x388>)
    2844:	f7ff fd9c 	bl	2380 <bt_hci_cmd_create>
    2848:	1e07      	subs	r7, r0, #0
					sizeof(*cp_le));
		if (!buf) {
    284a:	d100      	bne.n	284e <bt_init+0x196>
    284c:	e217      	b.n	2c7e <bt_init+0x5c6>
			return -ENOBUFS;
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));
    284e:	2102      	movs	r1, #2
    2850:	3008      	adds	r0, #8
    2852:	f00f ff57 	bl	12704 <net_buf_simple_add>

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    2856:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2858:	7044      	strb	r4, [r0, #1]
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    285a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    285c:	0022      	movs	r2, r4
    285e:	0039      	movs	r1, r7
    2860:	4877      	ldr	r0, [pc, #476]	; (2a40 <bt_init+0x388>)
    2862:	f7ff fdb3 	bl	23cc <bt_hci_cmd_send_sync>
					   NULL);
		if (err) {
    2866:	2800      	cmp	r0, #0
    2868:	d0e4      	beq.n	2834 <bt_init+0x17c>
    286a:	e094      	b.n	2996 <bt_init+0x2de>
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    286c:	aa0d      	add	r2, sp, #52	; 0x34
    286e:	2100      	movs	r1, #0
    2870:	4874      	ldr	r0, [pc, #464]	; (2a44 <bt_init+0x38c>)
    2872:	f7ff fdab 	bl	23cc <bt_hci_cmd_send_sync>
					   &rsp);
		if (err) {
    2876:	1e04      	subs	r4, r0, #0
    2878:	d000      	beq.n	287c <bt_init+0x1c4>
    287a:	e08d      	b.n	2998 <bt_init+0x2e0>
			return err;
		}
		le_read_supp_states_complete(rsp);
    287c:	980d      	ldr	r0, [sp, #52]	; 0x34
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    287e:	6883      	ldr	r3, [r0, #8]
    2880:	1c5c      	adds	r4, r3, #1
    2882:	7859      	ldrb	r1, [r3, #1]
    2884:	789b      	ldrb	r3, [r3, #2]
    2886:	78a7      	ldrb	r7, [r4, #2]
    2888:	021b      	lsls	r3, r3, #8
    288a:	430b      	orrs	r3, r1
    288c:	043f      	lsls	r7, r7, #16
    288e:	001a      	movs	r2, r3
    2890:	003b      	movs	r3, r7
    2892:	78e7      	ldrb	r7, [r4, #3]
    2894:	4313      	orrs	r3, r2
    2896:	063f      	lsls	r7, r7, #24
    2898:	7962      	ldrb	r2, [r4, #5]
    289a:	431f      	orrs	r7, r3
    289c:	7923      	ldrb	r3, [r4, #4]
    289e:	0212      	lsls	r2, r2, #8
    28a0:	431a      	orrs	r2, r3
    28a2:	79a3      	ldrb	r3, [r4, #6]
    28a4:	041b      	lsls	r3, r3, #16
    28a6:	4313      	orrs	r3, r2
    28a8:	001a      	movs	r2, r3
    28aa:	79e3      	ldrb	r3, [r4, #7]
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    28ac:	67af      	str	r7, [r5, #120]	; 0x78
    28ae:	061b      	lsls	r3, r3, #24
    28b0:	4313      	orrs	r3, r2
    28b2:	67eb      	str	r3, [r5, #124]	; 0x7c
					   &rsp);
		if (err) {
			return err;
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
    28b4:	f00f ff04 	bl	126c0 <net_buf_unref>
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN) &&
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    28b8:	002b      	movs	r3, r5
    28ba:	3370      	adds	r3, #112	; 0x70
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN) &&
    28bc:	781b      	ldrb	r3, [r3, #0]
    28be:	069b      	lsls	r3, r3, #26
    28c0:	d532      	bpl.n	2928 <bt_init+0x270>
		struct bt_hci_cp_le_write_default_data_len *cp;
		struct bt_hci_rp_le_read_max_data_len *rp;
		struct net_buf *buf, *rsp;
		u16_t tx_octets, tx_time;

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    28c2:	0032      	movs	r2, r6
    28c4:	2100      	movs	r1, #0
    28c6:	4860      	ldr	r0, [pc, #384]	; (2a48 <bt_init+0x390>)
    28c8:	f7ff fd80 	bl	23cc <bt_hci_cmd_send_sync>
    28cc:	1e04      	subs	r4, r0, #0
					   &rsp);
		if (err) {
    28ce:	d163      	bne.n	2998 <bt_init+0x2e0>
			return err;
		}

		rp = (void *)rsp->data;
    28d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    28d2:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    28d4:	789a      	ldrb	r2, [r3, #2]
    28d6:	7859      	ldrb	r1, [r3, #1]
    28d8:	0212      	lsls	r2, r2, #8
    28da:	430a      	orrs	r2, r1
    28dc:	9206      	str	r2, [sp, #24]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    28de:	78da      	ldrb	r2, [r3, #3]
    28e0:	791b      	ldrb	r3, [r3, #4]
    28e2:	021b      	lsls	r3, r3, #8
    28e4:	4313      	orrs	r3, r2
    28e6:	9307      	str	r3, [sp, #28]
		net_buf_unref(rsp);
    28e8:	f00f feea 	bl	126c0 <net_buf_unref>

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    28ec:	2104      	movs	r1, #4
    28ee:	4857      	ldr	r0, [pc, #348]	; (2a4c <bt_init+0x394>)
    28f0:	f7ff fd46 	bl	2380 <bt_hci_cmd_create>
    28f4:	1e07      	subs	r7, r0, #0
					sizeof(*cp));
		if (!buf) {
    28f6:	d100      	bne.n	28fa <bt_init+0x242>
    28f8:	e1c1      	b.n	2c7e <bt_init+0x5c6>
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    28fa:	2104      	movs	r1, #4
    28fc:	3008      	adds	r0, #8
    28fe:	f00f ff01 	bl	12704 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2902:	466b      	mov	r3, sp
    2904:	7e1b      	ldrb	r3, [r3, #24]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2906:	0022      	movs	r2, r4
		if (!buf) {
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2908:	7003      	strb	r3, [r0, #0]
    290a:	9b06      	ldr	r3, [sp, #24]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    290c:	0039      	movs	r1, r7
		if (!buf) {
			return -ENOBUFS;
		}

		cp = net_buf_add(buf, sizeof(*cp));
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    290e:	0a1b      	lsrs	r3, r3, #8
    2910:	7043      	strb	r3, [r0, #1]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2912:	466b      	mov	r3, sp
    2914:	7f1b      	ldrb	r3, [r3, #28]
    2916:	7083      	strb	r3, [r0, #2]
    2918:	9b07      	ldr	r3, [sp, #28]
    291a:	0a1b      	lsrs	r3, r3, #8
    291c:	70c3      	strb	r3, [r0, #3]

		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    291e:	484b      	ldr	r0, [pc, #300]	; (2a4c <bt_init+0x394>)
    2920:	f7ff fd54 	bl	23cc <bt_hci_cmd_send_sync>
					   buf, NULL);
		if (err) {
    2924:	2800      	cmp	r0, #0
    2926:	d136      	bne.n	2996 <bt_init+0x2de>
	struct bt_hci_cp_le_set_event_mask *cp_mask;
	struct net_buf *buf;
	u64_t mask = 0;

	/* Set LE event mask */
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2928:	2108      	movs	r1, #8
    292a:	4849      	ldr	r0, [pc, #292]	; (2a50 <bt_init+0x398>)
    292c:	f7ff fd28 	bl	2380 <bt_hci_cmd_create>
    2930:	1e04      	subs	r4, r0, #0
	if (!buf) {
    2932:	d100      	bne.n	2936 <bt_init+0x27e>
    2934:	e1a3      	b.n	2c7e <bt_init+0x5c6>
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2936:	2108      	movs	r1, #8
    2938:	1840      	adds	r0, r0, r1
    293a:	f00f fee3 	bl	12704 <net_buf_simple_add>

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    293e:	002b      	movs	r3, r5
    2940:	3370      	adds	r3, #112	; 0x70
    2942:	7819      	ldrb	r1, [r3, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
	if (!buf) {
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2944:	0002      	movs	r2, r0
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
		mask |= BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE;
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2946:	230f      	movs	r3, #15
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    2948:	0788      	lsls	r0, r1, #30
    294a:	d500      	bpl.n	294e <bt_init+0x296>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    294c:	3320      	adds	r3, #32
		}
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    294e:	0688      	lsls	r0, r1, #26
    2950:	d501      	bpl.n	2956 <bt_init+0x29e>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    2952:	2040      	movs	r0, #64	; 0x40
    2954:	4303      	orrs	r3, r0
		}
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    2956:	0028      	movs	r0, r5
    2958:	3071      	adds	r0, #113	; 0x71
    295a:	7807      	ldrb	r7, [r0, #0]
    295c:	2009      	movs	r0, #9
    295e:	4207      	tst	r7, r0
    2960:	d002      	beq.n	2968 <bt_init+0x2b0>
		    BT_FEAT_LE_PHY_CODED(bt_dev.le.features)) {
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    2962:	2080      	movs	r0, #128	; 0x80
    2964:	0100      	lsls	r0, r0, #4
    2966:	4303      	orrs	r3, r0
		}
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
    2968:	07c9      	lsls	r1, r1, #31
    296a:	d501      	bpl.n	2970 <bt_init+0x2b8>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    296c:	2110      	movs	r1, #16
    296e:	430b      	orrs	r3, r1

	/*
	 * If "LE Read Local P-256 Public Key" and "LE Generate DH Key" are
	 * supported we need to enable events generated by those commands.
	 */
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2970:	0029      	movs	r1, r5
    2972:	3140      	adds	r1, #64	; 0x40
    2974:	7808      	ldrb	r0, [r1, #0]
    2976:	2106      	movs	r1, #6
    2978:	4001      	ands	r1, r0
    297a:	2906      	cmp	r1, #6
    297c:	d102      	bne.n	2984 <bt_init+0x2cc>
	    (bt_dev.supported_commands[34] & 0x04)) {
		mask |= BT_EVT_MASK_LE_P256_PUBLIC_KEY_COMPLETE;
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    297e:	317b      	adds	r1, #123	; 0x7b
    2980:	31ff      	adds	r1, #255	; 0xff
    2982:	430b      	orrs	r3, r1
	}

	sys_put_le64(mask, cp_mask->events);
    2984:	0018      	movs	r0, r3
    2986:	2100      	movs	r1, #0
    2988:	f7ff fcea 	bl	2360 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    298c:	2200      	movs	r2, #0
    298e:	0021      	movs	r1, r4
    2990:	482f      	ldr	r0, [pc, #188]	; (2a50 <bt_init+0x398>)
    2992:	f7ff fd1b 	bl	23cc <bt_hci_cmd_send_sync>
		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
		cp_le->simul = 0x00;
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
					   NULL);
		if (err) {
    2996:	0004      	movs	r4, r0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    2998:	2c00      	cmp	r4, #0
    299a:	d000      	beq.n	299e <bt_init+0x2e6>
    299c:	e171      	b.n	2c82 <bt_init+0x5ca>
		return err;
	}

	if (BT_FEAT_BREDR(bt_dev.features)) {
    299e:	7eab      	ldrb	r3, [r5, #26]
    29a0:	069b      	lsls	r3, r3, #26
    29a2:	d506      	bpl.n	29b2 <bt_init+0x2fa>
{
	struct bt_hci_cp_set_event_mask *ev;
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    29a4:	2108      	movs	r1, #8
    29a6:	482b      	ldr	r0, [pc, #172]	; (2a54 <bt_init+0x39c>)
    29a8:	f7ff fcea 	bl	2380 <bt_hci_cmd_create>
    29ac:	1e04      	subs	r4, r0, #0
	if (!buf) {
    29ae:	d155      	bne.n	2a5c <bt_init+0x3a4>
    29b0:	e165      	b.n	2c7e <bt_init+0x5c6>
{
#if defined(CONFIG_BLUETOOTH_CONN)
	struct net_buf *rsp;
	int err;

	if (bt_dev.le.mtu) {
    29b2:	002f      	movs	r7, r5
    29b4:	3780      	adds	r7, #128	; 0x80
    29b6:	883b      	ldrh	r3, [r7, #0]
    29b8:	2b00      	cmp	r3, #0
    29ba:	d1f3      	bne.n	29a4 <bt_init+0x2ec>
		return 0;
	}

	/* Use BR/EDR buffer size if LE reports zero buffers */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    29bc:	0021      	movs	r1, r4
    29be:	0032      	movs	r2, r6
    29c0:	4825      	ldr	r0, [pc, #148]	; (2a58 <bt_init+0x3a0>)
    29c2:	f7ff fd03 	bl	23cc <bt_hci_cmd_send_sync>
	if (err) {
    29c6:	1e04      	subs	r4, r0, #0
    29c8:	d000      	beq.n	29cc <bt_init+0x314>
    29ca:	e15a      	b.n	2c82 <bt_init+0x5ca>
	u16_t pkts;

	BT_DBG("status %u", rp->status);

	/* If LE-side has buffers we can ignore the BR/EDR values */
	if (bt_dev.le.mtu) {
    29cc:	883b      	ldrh	r3, [r7, #0]
    29ce:	2b00      	cmp	r3, #0
    29d0:	d114      	bne.n	29fc <bt_init+0x344>
    29d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    29d4:	689b      	ldr	r3, [r3, #8]
		return;
	}

	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    29d6:	789a      	ldrb	r2, [r3, #2]
    29d8:	7859      	ldrb	r1, [r3, #1]
    29da:	0212      	lsls	r2, r2, #8
    29dc:	430a      	orrs	r2, r1
    29de:	803a      	strh	r2, [r7, #0]
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    29e0:	791a      	ldrb	r2, [r3, #4]
    29e2:	795b      	ldrb	r3, [r3, #5]
    29e4:	021b      	lsls	r3, r3, #8
    29e6:	4313      	orrs	r3, r2

	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);

	pkts = min(pkts, CONFIG_BLUETOOTH_CONN_TX_MAX);

	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    29e8:	1c19      	adds	r1, r3, #0
    29ea:	2b02      	cmp	r3, #2
    29ec:	d900      	bls.n	29f0 <bt_init+0x338>
    29ee:	2102      	movs	r1, #2
    29f0:	0028      	movs	r0, r5
    29f2:	b289      	uxth	r1, r1
    29f4:	3084      	adds	r0, #132	; 0x84
    29f6:	000a      	movs	r2, r1
    29f8:	f011 f808 	bl	13a0c <k_sem_init>
	if (err) {
		return err;
	}

	read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    29fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    29fe:	f00f fe5f 	bl	126c0 <net_buf_unref>
    2a02:	e7cf      	b.n	29a4 <bt_init+0x2ec>
    2a04:	00000c03 	.word	0x00000c03
    2a08:	200002b0 	.word	0x200002b0
    2a0c:	20000a48 	.word	0x20000a48
    2a10:	00001003 	.word	0x00001003
    2a14:	00001001 	.word	0x00001001
    2a18:	00001009 	.word	0x00001009
    2a1c:	00001002 	.word	0x00001002
    2a20:	000145b0 	.word	0x000145b0
    2a24:	00014570 	.word	0x00014570
    2a28:	000145b5 	.word	0x000145b5
    2a2c:	00014577 	.word	0x00014577
    2a30:	00014646 	.word	0x00014646
    2a34:	0001673d 	.word	0x0001673d
    2a38:	00002003 	.word	0x00002003
    2a3c:	00002002 	.word	0x00002002
    2a40:	00000c6d 	.word	0x00000c6d
    2a44:	0000201c 	.word	0x0000201c
    2a48:	0000202f 	.word	0x0000202f
    2a4c:	00002024 	.word	0x00002024
    2a50:	00002001 	.word	0x00002001
    2a54:	00000c01 	.word	0x00000c01
    2a58:	00001005 	.word	0x00001005
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
	}

	ev = net_buf_add(buf, sizeof(*ev));
    2a5c:	2108      	movs	r1, #8
    2a5e:	1840      	adds	r0, r0, r1
    2a60:	f00f fe50 	bl	12704 <net_buf_simple_add>
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    2a64:	002b      	movs	r3, r5
    2a66:	3370      	adds	r3, #112	; 0x70
	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
    2a68:	781b      	ldrb	r3, [r3, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
	}

	ev = net_buf_add(buf, sizeof(*ev));
    2a6a:	0002      	movs	r2, r0
	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP) &&
    2a6c:	07db      	lsls	r3, r3, #31
    2a6e:	d502      	bpl.n	2a76 <bt_init+0x3be>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    2a70:	4885      	ldr	r0, [pc, #532]	; (2c88 <bt_init+0x5d0>)
    2a72:	4986      	ldr	r1, [pc, #536]	; (2c8c <bt_init+0x5d4>)
    2a74:	e002      	b.n	2a7c <bt_init+0x3c4>
	mask |= BT_EVT_MASK_DATA_BUFFER_OVERFLOW;
	mask |= BT_EVT_MASK_LE_META_EVENT;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    2a76:	2180      	movs	r1, #128	; 0x80
    2a78:	4885      	ldr	r0, [pc, #532]	; (2c90 <bt_init+0x5d8>)
    2a7a:	0589      	lsls	r1, r1, #22
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
	}

	sys_put_le64(mask, ev->events);
    2a7c:	f7ff fc70 	bl	2360 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2a80:	0021      	movs	r1, r4
    2a82:	2200      	movs	r2, #0
    2a84:	4883      	ldr	r0, [pc, #524]	; (2c94 <bt_init+0x5dc>)
    2a86:	f7ff fca1 	bl	23cc <bt_hci_cmd_send_sync>
    2a8a:	1e04      	subs	r4, r0, #0
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    2a8c:	d000      	beq.n	2a90 <bt_init+0x3d8>
    2a8e:	e0f8      	b.n	2c82 <bt_init+0x5ca>
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2a90:	0001      	movs	r1, r0
    2a92:	2207      	movs	r2, #7
    2a94:	a80b      	add	r0, sp, #44	; 0x2c
    2a96:	f7fe fc8f 	bl	13b8 <memset>
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    2a9a:	2207      	movs	r2, #7
    2a9c:	a90b      	add	r1, sp, #44	; 0x2c
    2a9e:	0028      	movs	r0, r5
    2aa0:	f7fe fc38 	bl	1314 <memcmp>
    2aa4:	2800      	cmp	r0, #0
    2aa6:	d105      	bne.n	2ab4 <bt_init+0x3fc>

static int set_static_addr(void)
{
	int err;

	if (bt_storage) {
    2aa8:	4b7b      	ldr	r3, [pc, #492]	; (2c98 <bt_init+0x5e0>)
    2aaa:	4f7c      	ldr	r7, [pc, #496]	; (2c9c <bt_init+0x5e4>)
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d10e      	bne.n	2ad0 <bt_init+0x418>
    2ab2:	e015      	b.n	2ae0 <bt_init+0x428>
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2ab4:	497a      	ldr	r1, [pc, #488]	; (2ca0 <bt_init+0x5e8>)
    2ab6:	2207      	movs	r2, #7
    2ab8:	3128      	adds	r1, #40	; 0x28
    2aba:	a809      	add	r0, sp, #36	; 0x24
    2abc:	f7fe fc52 	bl	1364 <memcpy>
    2ac0:	2207      	movs	r2, #7
    2ac2:	a909      	add	r1, sp, #36	; 0x24
    2ac4:	0028      	movs	r0, r5
    2ac6:	f7fe fc25 	bl	1314 <memcmp>
	err = set_event_mask();
	if (err) {
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2aca:	2800      	cmp	r0, #0
    2acc:	d0ec      	beq.n	2aa8 <bt_init+0x3f0>
    2ace:	e06d      	b.n	2bac <bt_init+0x4f4>
	int err;

	if (bt_storage) {
		ssize_t ret;

		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    2ad0:	2100      	movs	r1, #0
    2ad2:	681c      	ldr	r4, [r3, #0]
    2ad4:	002a      	movs	r2, r5
    2ad6:	2307      	movs	r3, #7
    2ad8:	0008      	movs	r0, r1
    2ada:	47a0      	blx	r4
				       &bt_dev.id_addr, sizeof(bt_dev.id_addr));
		if (ret == sizeof(bt_dev.id_addr)) {
    2adc:	2807      	cmp	r0, #7
    2ade:	d046      	beq.n	2b6e <bt_init+0x4b6>
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    2ae0:	4b70      	ldr	r3, [pc, #448]	; (2ca4 <bt_init+0x5ec>)
    2ae2:	6819      	ldr	r1, [r3, #0]
    2ae4:	001a      	movs	r2, r3
    2ae6:	1c4b      	adds	r3, r1, #1
    2ae8:	d105      	bne.n	2af6 <bt_init+0x43e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    2aea:	4b6f      	ldr	r3, [pc, #444]	; (2ca8 <bt_init+0x5f0>)
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    2aec:	496f      	ldr	r1, [pc, #444]	; (2cac <bt_init+0x5f4>)
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    2aee:	681b      	ldr	r3, [r3, #0]
	/* Read address from nRF5-specific storage
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    2af0:	b29b      	uxth	r3, r3
    2af2:	428b      	cmp	r3, r1
    2af4:	d017      	beq.n	2b26 <bt_init+0x46e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    2af6:	4b6e      	ldr	r3, [pc, #440]	; (2cb0 <bt_init+0x5f8>)
    2af8:	6819      	ldr	r1, [r3, #0]
	 * Non-initialized FICR values default to 0xFF, skip if no address
	 * present. Also if a public address lives in FICR, do not use in this
	 * function.
	 */
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    2afa:	2301      	movs	r3, #1
    2afc:	4219      	tst	r1, r3
    2afe:	d012      	beq.n	2b26 <bt_init+0x46e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2b00:	702b      	strb	r3, [r5, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
    2b02:	6813      	ldr	r3, [r2, #0]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
	dst[1] = val >> 8;
    2b04:	0a1a      	lsrs	r2, r3, #8
    2b06:	70aa      	strb	r2, [r5, #2]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    2b08:	2240      	movs	r2, #64	; 0x40
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2b0a:	706b      	strb	r3, [r5, #1]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    2b0c:	0c1b      	lsrs	r3, r3, #16
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2b0e:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    2b10:	0a1b      	lsrs	r3, r3, #8
    2b12:	712b      	strb	r3, [r5, #4]
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    2b14:	4b64      	ldr	r3, [pc, #400]	; (2ca8 <bt_init+0x5f0>)
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    2b16:	4252      	negs	r2, r2
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {

		bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &bt_dev.id_addr.a.val[0]);
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &bt_dev.id_addr.a.val[4]);
    2b18:	681b      	ldr	r3, [r3, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2b1a:	716b      	strb	r3, [r5, #5]
		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&bt_dev.id_addr.a);
    2b1c:	b29b      	uxth	r3, r3
    2b1e:	0a1b      	lsrs	r3, r3, #8
    2b20:	4313      	orrs	r3, r2
    2b22:	71ab      	strb	r3, [r5, #6]
    2b24:	e023      	b.n	2b6e <bt_init+0x4b6>
	}
#endif /* CONFIG_SOC_FAMILY_NRF5 */

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2b26:	0028      	movs	r0, r5
    2b28:	f7ff fdb6 	bl	2698 <bt_addr_le_create_static>
	if (err) {
    2b2c:	2800      	cmp	r0, #0
    2b2e:	d000      	beq.n	2b32 <bt_init+0x47a>
    2b30:	e099      	b.n	2c66 <bt_init+0x5ae>
		return err;
	}

	if (bt_storage) {
    2b32:	4b59      	ldr	r3, [pc, #356]	; (2c98 <bt_init+0x5e0>)
    2b34:	681b      	ldr	r3, [r3, #0]
    2b36:	2b00      	cmp	r3, #0
    2b38:	d00f      	beq.n	2b5a <bt_init+0x4a2>
		ssize_t ret;

		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2b3a:	685c      	ldr	r4, [r3, #4]
    2b3c:	002a      	movs	r2, r5
    2b3e:	2307      	movs	r3, #7
    2b40:	0001      	movs	r1, r0
    2b42:	47a0      	blx	r4
					&bt_dev.id_addr,
					sizeof(bt_dev.id_addr));
		if (ret != sizeof(bt_dev.id_addr)) {
    2b44:	2807      	cmp	r0, #7
    2b46:	d012      	beq.n	2b6e <bt_init+0x4b6>
			BT_ERR("Unable to store static address");
    2b48:	4b5a      	ldr	r3, [pc, #360]	; (2cb4 <bt_init+0x5fc>)
    2b4a:	4a5b      	ldr	r2, [pc, #364]	; (2cb8 <bt_init+0x600>)
    2b4c:	9301      	str	r3, [sp, #4]
    2b4e:	4b5b      	ldr	r3, [pc, #364]	; (2cbc <bt_init+0x604>)
    2b50:	0039      	movs	r1, r7
    2b52:	9300      	str	r3, [sp, #0]
    2b54:	485a      	ldr	r0, [pc, #360]	; (2cc0 <bt_init+0x608>)
    2b56:	4b5b      	ldr	r3, [pc, #364]	; (2cc4 <bt_init+0x60c>)
    2b58:	e007      	b.n	2b6a <bt_init+0x4b2>
		}
	} else {
		BT_WARN("Using temporary static random address");
    2b5a:	0039      	movs	r1, r7
    2b5c:	4b55      	ldr	r3, [pc, #340]	; (2cb4 <bt_init+0x5fc>)
    2b5e:	4a5a      	ldr	r2, [pc, #360]	; (2cc8 <bt_init+0x610>)
    2b60:	9301      	str	r3, [sp, #4]
    2b62:	4b5a      	ldr	r3, [pc, #360]	; (2ccc <bt_init+0x614>)
    2b64:	485a      	ldr	r0, [pc, #360]	; (2cd0 <bt_init+0x618>)
    2b66:	9300      	str	r3, [sp, #0]
    2b68:	4b56      	ldr	r3, [pc, #344]	; (2cc4 <bt_init+0x60c>)
    2b6a:	f7fe fdfd 	bl	1768 <printk>
	}

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2b6e:	782b      	ldrb	r3, [r5, #0]
    2b70:	2b01      	cmp	r3, #1
    2b72:	d104      	bne.n	2b7e <bt_init+0x4c6>
    2b74:	223f      	movs	r2, #63	; 0x3f
    2b76:	79ab      	ldrb	r3, [r5, #6]
    2b78:	4393      	bics	r3, r2
    2b7a:	2bc0      	cmp	r3, #192	; 0xc0
    2b7c:	d00c      	beq.n	2b98 <bt_init+0x4e0>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
    2b7e:	2416      	movs	r4, #22
	}

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
    2b80:	4b4c      	ldr	r3, [pc, #304]	; (2cb4 <bt_init+0x5fc>)
    2b82:	4a4d      	ldr	r2, [pc, #308]	; (2cb8 <bt_init+0x600>)
    2b84:	9301      	str	r3, [sp, #4]
    2b86:	4b4d      	ldr	r3, [pc, #308]	; (2cbc <bt_init+0x604>)
    2b88:	0039      	movs	r1, r7
    2b8a:	9300      	str	r3, [sp, #0]
    2b8c:	4851      	ldr	r0, [pc, #324]	; (2cd4 <bt_init+0x61c>)
    2b8e:	4b4d      	ldr	r3, [pc, #308]	; (2cc4 <bt_init+0x60c>)
    2b90:	f7fe fdea 	bl	1768 <printk>
		return -EINVAL;
    2b94:	4264      	negs	r4, r4
    2b96:	e067      	b.n	2c68 <bt_init+0x5b0>
	}

	err = set_random_address(&bt_dev.id_addr.a);
    2b98:	1c68      	adds	r0, r5, #1
    2b9a:	f7ff fc53 	bl	2444 <set_random_address>
	if (err) {
    2b9e:	1e04      	subs	r4, r0, #0
    2ba0:	d162      	bne.n	2c68 <bt_init+0x5b0>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2ba2:	0028      	movs	r0, r5
    2ba4:	2104      	movs	r1, #4
    2ba6:	306c      	adds	r0, #108	; 0x6c
    2ba8:	f010 f87d 	bl	12ca6 <atomic_or>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    2bac:	782b      	ldrb	r3, [r5, #0]
    2bae:	2b00      	cmp	r3, #0
    2bb0:	d003      	beq.n	2bba <bt_init+0x502>
    2bb2:	2b01      	cmp	r3, #1
    2bb4:	d106      	bne.n	2bc4 <bt_init+0x50c>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2bb6:	4948      	ldr	r1, [pc, #288]	; (2cd8 <bt_init+0x620>)
    2bb8:	e000      	b.n	2bbc <bt_init+0x504>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2bba:	4948      	ldr	r1, [pc, #288]	; (2cdc <bt_init+0x624>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2bbc:	a80d      	add	r0, sp, #52	; 0x34
    2bbe:	f7fe fb8b 	bl	12d8 <strcpy>
    2bc2:	e004      	b.n	2bce <bt_init+0x516>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2bc4:	4a46      	ldr	r2, [pc, #280]	; (2ce0 <bt_init+0x628>)
    2bc6:	2107      	movs	r1, #7
    2bc8:	a80d      	add	r0, sp, #52	; 0x34
    2bca:	f7fe fdd9 	bl	1780 <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2bce:	aa0d      	add	r2, sp, #52	; 0x34
    2bd0:	79ab      	ldrb	r3, [r5, #6]
    2bd2:	9205      	str	r2, [sp, #20]
    2bd4:	786a      	ldrb	r2, [r5, #1]
    2bd6:	211b      	movs	r1, #27
    2bd8:	9204      	str	r2, [sp, #16]
    2bda:	78aa      	ldrb	r2, [r5, #2]
    2bdc:	0030      	movs	r0, r6
    2bde:	9203      	str	r2, [sp, #12]
    2be0:	78ea      	ldrb	r2, [r5, #3]
    2be2:	9202      	str	r2, [sp, #8]
    2be4:	792a      	ldrb	r2, [r5, #4]
    2be6:	9201      	str	r2, [sp, #4]
    2be8:	796a      	ldrb	r2, [r5, #5]
    2bea:	9200      	str	r2, [sp, #0]
    2bec:	4a3d      	ldr	r2, [pc, #244]	; (2ce4 <bt_init+0x62c>)
    2bee:	f7fe fdc7 	bl	1780 <snprintk>
{
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(&bt_dev.id_addr, addr, sizeof(addr));

	BT_INFO("Identity: %s", addr);
    2bf2:	4c3d      	ldr	r4, [pc, #244]	; (2ce8 <bt_init+0x630>)
    2bf4:	4f3d      	ldr	r7, [pc, #244]	; (2cec <bt_init+0x634>)
    2bf6:	4a3e      	ldr	r2, [pc, #248]	; (2cf0 <bt_init+0x638>)
    2bf8:	003b      	movs	r3, r7
    2bfa:	4928      	ldr	r1, [pc, #160]	; (2c9c <bt_init+0x5e4>)
    2bfc:	9402      	str	r4, [sp, #8]
    2bfe:	9601      	str	r6, [sp, #4]
    2c00:	9400      	str	r4, [sp, #0]
    2c02:	483c      	ldr	r0, [pc, #240]	; (2cf4 <bt_init+0x63c>)
    2c04:	f7fe fdb0 	bl	1768 <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2c08:	7bae      	ldrb	r6, [r5, #14]
    2c0a:	0030      	movs	r0, r6
    2c0c:	f7ff fadc 	bl	21c8 <ver_str>
    2c10:	9405      	str	r4, [sp, #20]
    2c12:	8aab      	ldrh	r3, [r5, #20]
    2c14:	4a36      	ldr	r2, [pc, #216]	; (2cf0 <bt_init+0x638>)
    2c16:	9304      	str	r3, [sp, #16]
    2c18:	8a2b      	ldrh	r3, [r5, #16]
    2c1a:	4920      	ldr	r1, [pc, #128]	; (2c9c <bt_init+0x5e4>)
    2c1c:	9303      	str	r3, [sp, #12]
    2c1e:	9602      	str	r6, [sp, #8]
    2c20:	003b      	movs	r3, r7
    2c22:	9001      	str	r0, [sp, #4]
    2c24:	9400      	str	r4, [sp, #0]
    2c26:	4834      	ldr	r0, [pc, #208]	; (2cf8 <bt_init+0x640>)
    2c28:	f7fe fd9e 	bl	1768 <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2c2c:	7bee      	ldrb	r6, [r5, #15]
    2c2e:	0030      	movs	r0, r6
    2c30:	f7ff faca 	bl	21c8 <ver_str>
    2c34:	9404      	str	r4, [sp, #16]
    2c36:	8a6b      	ldrh	r3, [r5, #18]
    2c38:	4a2d      	ldr	r2, [pc, #180]	; (2cf0 <bt_init+0x638>)
    2c3a:	9303      	str	r3, [sp, #12]
    2c3c:	9001      	str	r0, [sp, #4]
    2c3e:	9400      	str	r4, [sp, #0]
    2c40:	003b      	movs	r3, r7
    2c42:	4916      	ldr	r1, [pc, #88]	; (2c9c <bt_init+0x5e4>)
    2c44:	9602      	str	r6, [sp, #8]
    2c46:	482d      	ldr	r0, [pc, #180]	; (2cfc <bt_init+0x644>)
    2c48:	f7fe fd8e 	bl	1768 <printk>
	if (err) {
		return err;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
		err = bt_conn_init();
    2c4c:	f002 f886 	bl	4d5c <bt_conn_init>
    2c50:	1e04      	subs	r4, r0, #0
		if (err) {
    2c52:	d116      	bne.n	2c82 <bt_init+0x5ca>
    2c54:	0028      	movs	r0, r5
    2c56:	2102      	movs	r1, #2
    2c58:	306c      	adds	r0, #108	; 0x6c
    2c5a:	f010 f824 	bl	12ca6 <atomic_or>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);
    2c5e:	0020      	movs	r0, r4
    2c60:	f7ff fd04 	bl	266c <bt_le_scan_update>
    2c64:	e00d      	b.n	2c82 <bt_init+0x5ca>
#endif /* CONFIG_SOC_FAMILY_NRF5 */

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
	if (err) {
    2c66:	0004      	movs	r4, r0
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
		BT_DBG("No public address. Trying to set static random.");
		err = set_static_addr();
		if (err) {
			BT_ERR("Unable to set identity address");
    2c68:	4b12      	ldr	r3, [pc, #72]	; (2cb4 <bt_init+0x5fc>)
    2c6a:	4a13      	ldr	r2, [pc, #76]	; (2cb8 <bt_init+0x600>)
    2c6c:	9301      	str	r3, [sp, #4]
    2c6e:	4b13      	ldr	r3, [pc, #76]	; (2cbc <bt_init+0x604>)
    2c70:	0039      	movs	r1, r7
    2c72:	9300      	str	r3, [sp, #0]
    2c74:	4822      	ldr	r0, [pc, #136]	; (2d00 <bt_init+0x648>)
    2c76:	4b23      	ldr	r3, [pc, #140]	; (2d04 <bt_init+0x64c>)
    2c78:	f7fe fd76 	bl	1768 <printk>
    2c7c:	e001      	b.n	2c82 <bt_init+0x5ca>
	struct net_buf *buf;
	u64_t mask = 0;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
    2c7e:	2437      	movs	r4, #55	; 0x37
    2c80:	4264      	negs	r4, r4
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    2c82:	0020      	movs	r0, r4
    2c84:	b017      	add	sp, #92	; 0x5c
    2c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c88:	02008890 	.word	0x02008890
    2c8c:	20008000 	.word	0x20008000
    2c90:	02008810 	.word	0x02008810
    2c94:	00000c01 	.word	0x00000c01
    2c98:	20001efc 	.word	0x20001efc
    2c9c:	00014577 	.word	0x00014577
    2ca0:	000141ac 	.word	0x000141ac
    2ca4:	100000a4 	.word	0x100000a4
    2ca8:	100000a8 	.word	0x100000a8
    2cac:	0000ffff 	.word	0x0000ffff
    2cb0:	100000a0 	.word	0x100000a0
    2cb4:	000145b0 	.word	0x000145b0
    2cb8:	00014570 	.word	0x00014570
    2cbc:	000145b5 	.word	0x000145b5
    2cc0:	0001467a 	.word	0x0001467a
    2cc4:	000167ad 	.word	0x000167ad
    2cc8:	000145bd 	.word	0x000145bd
    2ccc:	000145fb 	.word	0x000145fb
    2cd0:	000146a9 	.word	0x000146a9
    2cd4:	000146df 	.word	0x000146df
    2cd8:	000142de 	.word	0x000142de
    2cdc:	000142d7 	.word	0x000142d7
    2ce0:	000142e5 	.word	0x000142e5
    2ce4:	000142ec 	.word	0x000142ec
    2ce8:	0001425c 	.word	0x0001425c
    2cec:	00016827 	.word	0x00016827
    2cf0:	00014720 	.word	0x00014720
    2cf4:	00014727 	.word	0x00014727
    2cf8:	00014744 	.word	0x00014744
    2cfc:	00014792 	.word	0x00014792
    2d00:	000147c9 	.word	0x000147c9
    2d04:	00016835 	.word	0x00016835

00002d08 <init_work>:

static void init_work(struct k_work *work)
{
    2d08:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    2d0a:	f7ff fcd5 	bl	26b8 <bt_init>
	if (ready_cb) {
    2d0e:	4b03      	ldr	r3, [pc, #12]	; (2d1c <init_work+0x14>)
    2d10:	681b      	ldr	r3, [r3, #0]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d000      	beq.n	2d18 <init_work+0x10>
		ready_cb(err);
    2d16:	4798      	blx	r3
	}
}
    2d18:	bd10      	pop	{r4, pc}
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	20000a44 	.word	0x20000a44

00002d20 <bt_send>:

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2d20:	4b03      	ldr	r3, [pc, #12]	; (2d30 <bt_send+0x10>)

	return 0;
}

int bt_send(struct net_buf *buf)
{
    2d22:	b510      	push	{r4, lr}

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2d24:	33d8      	adds	r3, #216	; 0xd8
    2d26:	681b      	ldr	r3, [r3, #0]
    2d28:	68db      	ldr	r3, [r3, #12]
    2d2a:	4798      	blx	r3
}
    2d2c:	bd10      	pop	{r4, pc}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	200002b0 	.word	0x200002b0

00002d34 <bt_hci_cmd_send>:

	return buf;
}

int bt_hci_cmd_send(u16_t opcode, struct net_buf *buf)
{
    2d34:	b530      	push	{r4, r5, lr}
    2d36:	0005      	movs	r5, r0
    2d38:	b085      	sub	sp, #20
    2d3a:	1e0c      	subs	r4, r1, #0
	if (!buf) {
    2d3c:	d103      	bne.n	2d46 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    2d3e:	f7ff fb1f 	bl	2380 <bt_hci_cmd_create>
    2d42:	1e04      	subs	r4, r0, #0
		if (!buf) {
    2d44:	d020      	beq.n	2d88 <bt_hci_cmd_send+0x54>
	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);

	/* Host Number of Completed Packets can ignore the ncmd value
	 * and does not generate any cmd complete/status events.
	 */
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2d46:	4b12      	ldr	r3, [pc, #72]	; (2d90 <bt_hci_cmd_send+0x5c>)
    2d48:	429d      	cmp	r5, r3
    2d4a:	d116      	bne.n	2d7a <bt_hci_cmd_send+0x46>
		int err;

		err = bt_send(buf);
    2d4c:	0020      	movs	r0, r4
    2d4e:	f7ff ffe7 	bl	2d20 <bt_send>
    2d52:	0005      	movs	r5, r0
    2d54:	2000      	movs	r0, #0
		if (err) {
    2d56:	4285      	cmp	r5, r0
    2d58:	d018      	beq.n	2d8c <bt_hci_cmd_send+0x58>
			BT_ERR("Unable to send to driver (err %d)", err);
    2d5a:	4b0e      	ldr	r3, [pc, #56]	; (2d94 <bt_hci_cmd_send+0x60>)
    2d5c:	4a0e      	ldr	r2, [pc, #56]	; (2d98 <bt_hci_cmd_send+0x64>)
    2d5e:	9302      	str	r3, [sp, #8]
    2d60:	4b0e      	ldr	r3, [pc, #56]	; (2d9c <bt_hci_cmd_send+0x68>)
    2d62:	490f      	ldr	r1, [pc, #60]	; (2da0 <bt_hci_cmd_send+0x6c>)
    2d64:	9300      	str	r3, [sp, #0]
    2d66:	9501      	str	r5, [sp, #4]
    2d68:	4b0e      	ldr	r3, [pc, #56]	; (2da4 <bt_hci_cmd_send+0x70>)
    2d6a:	480f      	ldr	r0, [pc, #60]	; (2da8 <bt_hci_cmd_send+0x74>)
    2d6c:	f7fe fcfc 	bl	1768 <printk>
			net_buf_unref(buf);
    2d70:	0020      	movs	r0, r4
    2d72:	f00f fca5 	bl	126c0 <net_buf_unref>
    2d76:	0028      	movs	r0, r5
    2d78:	e008      	b.n	2d8c <bt_hci_cmd_send+0x58>
		}

		return err;
	}

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2d7a:	480c      	ldr	r0, [pc, #48]	; (2dac <bt_hci_cmd_send+0x78>)
    2d7c:	0021      	movs	r1, r4
    2d7e:	30c4      	adds	r0, #196	; 0xc4
    2d80:	f00f fc8f 	bl	126a2 <net_buf_put>

	return 0;
    2d84:	2000      	movs	r0, #0
    2d86:	e001      	b.n	2d8c <bt_hci_cmd_send+0x58>
int bt_hci_cmd_send(u16_t opcode, struct net_buf *buf)
{
	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    2d88:	2037      	movs	r0, #55	; 0x37
    2d8a:	4240      	negs	r0, r0
	}

	net_buf_put(&bt_dev.cmd_tx_queue, buf);

	return 0;
}
    2d8c:	b005      	add	sp, #20
    2d8e:	bd30      	pop	{r4, r5, pc}
    2d90:	00000c35 	.word	0x00000c35
    2d94:	000145b0 	.word	0x000145b0
    2d98:	00014570 	.word	0x00014570
    2d9c:	000145b5 	.word	0x000145b5
    2da0:	00014577 	.word	0x00014577
    2da4:	00016893 	.word	0x00016893
    2da8:	000147f8 	.word	0x000147f8
    2dac:	200002b0 	.word	0x200002b0

00002db0 <hci_le_set_phy.isra.26>:
	}

	return 0;
}

static int hci_le_set_phy(struct bt_conn *conn)
    2db0:	b570      	push	{r4, r5, r6, lr}
{
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2db2:	2107      	movs	r1, #7
	}

	return 0;
}

static int hci_le_set_phy(struct bt_conn *conn)
    2db4:	0004      	movs	r4, r0
{
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2db6:	480e      	ldr	r0, [pc, #56]	; (2df0 <hci_le_set_phy.isra.26+0x40>)
    2db8:	f7ff fae2 	bl	2380 <bt_hci_cmd_create>
    2dbc:	1e05      	subs	r5, r0, #0
	if (!buf) {
    2dbe:	d014      	beq.n	2dea <hci_le_set_phy.isra.26+0x3a>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2dc0:	2107      	movs	r1, #7
    2dc2:	3008      	adds	r0, #8
    2dc4:	f00f fc9e 	bl	12704 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2dc8:	8823      	ldrh	r3, [r4, #0]
    2dca:	2400      	movs	r4, #0
    2dcc:	7003      	strb	r3, [r0, #0]
    2dce:	0a1b      	lsrs	r3, r3, #8
    2dd0:	7043      	strb	r3, [r0, #1]
	cp->all_phys = 0;
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2dd2:	2302      	movs	r3, #2
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
	cp->all_phys = 0;
    2dd4:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2dd6:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2dd8:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2dda:	7144      	strb	r4, [r0, #5]
    2ddc:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2dde:	0029      	movs	r1, r5
    2de0:	4803      	ldr	r0, [pc, #12]	; (2df0 <hci_le_set_phy.isra.26+0x40>)
    2de2:	f7ff ffa7 	bl	2d34 <bt_hci_cmd_send>

	return 0;
    2de6:	0020      	movs	r0, r4
    2de8:	e001      	b.n	2dee <hci_le_set_phy.isra.26+0x3e>
	struct bt_hci_cp_le_set_phy *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    2dea:	2037      	movs	r0, #55	; 0x37
    2dec:	4240      	negs	r0, r0
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);

	return 0;
}
    2dee:	bd70      	pop	{r4, r5, r6, pc}
    2df0:	00002032 	.word	0x00002032

00002df4 <hci_le_set_data_len.isra.27>:
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);

	return 0;
}

static int hci_le_set_data_len(struct bt_conn *conn)
    2df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2df6:	0007      	movs	r7, r0
	struct bt_hci_cp_le_set_data_len *cp;
	struct net_buf *buf, *rsp;
	u16_t tx_octets, tx_time;
	int err;

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2df8:	aa01      	add	r2, sp, #4
    2dfa:	2100      	movs	r1, #0
    2dfc:	4816      	ldr	r0, [pc, #88]	; (2e58 <hci_le_set_data_len.isra.27+0x64>)
    2dfe:	f7ff fae5 	bl	23cc <bt_hci_cmd_send_sync>
	if (err) {
    2e02:	2800      	cmp	r0, #0
    2e04:	d126      	bne.n	2e54 <hci_le_set_data_len.isra.27+0x60>
		return err;
	}

	rp = (void *)rsp->data;
    2e06:	9801      	ldr	r0, [sp, #4]
    2e08:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2e0a:	789d      	ldrb	r5, [r3, #2]
    2e0c:	785a      	ldrb	r2, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2e0e:	791c      	ldrb	r4, [r3, #4]
	if (err) {
		return err;
	}

	rp = (void *)rsp->data;
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2e10:	022d      	lsls	r5, r5, #8
    2e12:	4315      	orrs	r5, r2
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2e14:	78da      	ldrb	r2, [r3, #3]
    2e16:	0224      	lsls	r4, r4, #8
    2e18:	4314      	orrs	r4, r2
	net_buf_unref(rsp);
    2e1a:	f00f fc51 	bl	126c0 <net_buf_unref>

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2e1e:	2106      	movs	r1, #6
    2e20:	480e      	ldr	r0, [pc, #56]	; (2e5c <hci_le_set_data_len.isra.27+0x68>)
    2e22:	f7ff faad 	bl	2380 <bt_hci_cmd_create>
    2e26:	1e06      	subs	r6, r0, #0
	if (!buf) {
    2e28:	d012      	beq.n	2e50 <hci_le_set_data_len.isra.27+0x5c>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2e2a:	2106      	movs	r1, #6
    2e2c:	3008      	adds	r0, #8
    2e2e:	f00f fc69 	bl	12704 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2e32:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2e34:	7085      	strb	r5, [r0, #2]
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    2e36:	7003      	strb	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2e38:	0a2d      	lsrs	r5, r5, #8
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    2e3a:	0a1b      	lsrs	r3, r3, #8
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2e3c:	7104      	strb	r4, [r0, #4]
    2e3e:	0a24      	lsrs	r4, r4, #8
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    2e40:	7043      	strb	r3, [r0, #1]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2e42:	70c5      	strb	r5, [r0, #3]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2e44:	7144      	strb	r4, [r0, #5]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2e46:	0031      	movs	r1, r6
    2e48:	4804      	ldr	r0, [pc, #16]	; (2e5c <hci_le_set_data_len.isra.27+0x68>)
    2e4a:	f7ff ff73 	bl	2d34 <bt_hci_cmd_send>
    2e4e:	e001      	b.n	2e54 <hci_le_set_data_len.isra.27+0x60>
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
	net_buf_unref(rsp);

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    2e50:	2037      	movs	r0, #55	; 0x37
    2e52:	4240      	negs	r0, r0
	if (err) {
		return err;
	}

	return 0;
}
    2e54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	0000202f 	.word	0x0000202f
    2e5c:	00002022 	.word	0x00002022

00002e60 <le_conn_param_neg_reply>:

	return true;
}

static int le_conn_param_neg_reply(u16_t handle, u8_t reason)
{
    2e60:	b570      	push	{r4, r5, r6, lr}
    2e62:	0004      	movs	r4, r0
    2e64:	000e      	movs	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2e66:	480b      	ldr	r0, [pc, #44]	; (2e94 <le_conn_param_neg_reply+0x34>)
    2e68:	2103      	movs	r1, #3
    2e6a:	f7ff fa89 	bl	2380 <bt_hci_cmd_create>
    2e6e:	1e05      	subs	r5, r0, #0
				sizeof(*cp));
	if (!buf) {
    2e70:	d00c      	beq.n	2e8c <le_conn_param_neg_reply+0x2c>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    2e72:	2103      	movs	r1, #3
    2e74:	3008      	adds	r0, #8
    2e76:	f00f fc45 	bl	12704 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    2e7a:	7004      	strb	r4, [r0, #0]
    2e7c:	0a24      	lsrs	r4, r4, #8
    2e7e:	7044      	strb	r4, [r0, #1]
	cp->reason = sys_cpu_to_le16(reason);
    2e80:	7086      	strb	r6, [r0, #2]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2e82:	0029      	movs	r1, r5
    2e84:	4803      	ldr	r0, [pc, #12]	; (2e94 <le_conn_param_neg_reply+0x34>)
    2e86:	f7ff ff55 	bl	2d34 <bt_hci_cmd_send>
    2e8a:	e001      	b.n	2e90 <le_conn_param_neg_reply+0x30>
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
    2e8c:	2037      	movs	r0, #55	; 0x37
    2e8e:	4240      	negs	r0, r0
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
    2e90:	bd70      	pop	{r4, r5, r6, pc}
    2e92:	46c0      	nop			; (mov r8, r8)
    2e94:	00002021 	.word	0x00002021

00002e98 <hci_tx_thread>:
/* command FIFO */
#define EV_COUNT 1
#endif

static void hci_tx_thread(void *p1, void *p2, void *p3)
{
    2e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e9a:	b087      	sub	sp, #28
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    2e9c:	4c53      	ldr	r4, [pc, #332]	; (2fec <hci_tx_thread+0x154>)
    2e9e:	4b54      	ldr	r3, [pc, #336]	; (2ff0 <hci_tx_thread+0x158>)
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2ea0:	0020      	movs	r0, r4
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    2ea2:	6862      	ldr	r2, [r4, #4]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2ea4:	300c      	adds	r0, #12
	BT_DBG("Started");

	while (1) {
		int ev_count, err;

		events[0].state = K_POLL_STATE_NOT_READY;
    2ea6:	4013      	ands	r3, r2
    2ea8:	6063      	str	r3, [r4, #4]
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2eaa:	f001 fc27 	bl	46fc <bt_conn_prepare_events>
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    2eae:	2201      	movs	r2, #1

		events[0].state = K_POLL_STATE_NOT_READY;
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2eb0:	1c43      	adds	r3, r0, #1
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    2eb2:	4252      	negs	r2, r2
    2eb4:	0019      	movs	r1, r3
    2eb6:	0020      	movs	r0, r4

		events[0].state = K_POLL_STATE_NOT_READY;
		ev_count = 1;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
			ev_count += bt_conn_prepare_events(&events[1]);
    2eb8:	9305      	str	r3, [sp, #20]
		}

		BT_DBG("Calling k_poll with %d events", ev_count);

		err = k_poll(events, ev_count, K_FOREVER);
    2eba:	f010 f99f 	bl	131fc <k_poll>
		BT_ASSERT(err == 0);
    2ebe:	2800      	cmp	r0, #0
    2ec0:	d101      	bne.n	2ec6 <hci_tx_thread+0x2e>
    2ec2:	3408      	adds	r4, #8
    2ec4:	e04f      	b.n	2f66 <hci_tx_thread+0xce>
    2ec6:	4b4b      	ldr	r3, [pc, #300]	; (2ff4 <hci_tx_thread+0x15c>)
    2ec8:	4a4b      	ldr	r2, [pc, #300]	; (2ff8 <hci_tx_thread+0x160>)
    2eca:	9301      	str	r3, [sp, #4]
    2ecc:	4b4b      	ldr	r3, [pc, #300]	; (2ffc <hci_tx_thread+0x164>)
    2ece:	494c      	ldr	r1, [pc, #304]	; (3000 <hci_tx_thread+0x168>)
    2ed0:	9300      	str	r3, [sp, #0]
    2ed2:	484c      	ldr	r0, [pc, #304]	; (3004 <hci_tx_thread+0x16c>)
    2ed4:	4b4c      	ldr	r3, [pc, #304]	; (3008 <hci_tx_thread+0x170>)
    2ed6:	e065      	b.n	2fa4 <hci_tx_thread+0x10c>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);

	/* Wait until ncmd > 0 */
	BT_DBG("calling sem_take_wait");
	k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    2ed8:	0028      	movs	r0, r5
    2eda:	2101      	movs	r1, #1
    2edc:	3098      	adds	r0, #152	; 0x98
    2ede:	4249      	negs	r1, r1

	/* Clear out any existing sent command */
	if (bt_dev.sent_cmd) {
    2ee0:	35ac      	adds	r5, #172	; 0xac
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);

	/* Wait until ncmd > 0 */
	BT_DBG("calling sem_take_wait");
	k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    2ee2:	f010 fdd7 	bl	13a94 <k_sem_take>

	/* Clear out any existing sent command */
	if (bt_dev.sent_cmd) {
    2ee6:	682b      	ldr	r3, [r5, #0]
    2ee8:	2b00      	cmp	r3, #0
    2eea:	d00d      	beq.n	2f08 <hci_tx_thread+0x70>
		BT_ERR("Uncleared pending sent_cmd");
    2eec:	4b41      	ldr	r3, [pc, #260]	; (2ff4 <hci_tx_thread+0x15c>)
    2eee:	4a42      	ldr	r2, [pc, #264]	; (2ff8 <hci_tx_thread+0x160>)
    2ef0:	9301      	str	r3, [sp, #4]
    2ef2:	4b42      	ldr	r3, [pc, #264]	; (2ffc <hci_tx_thread+0x164>)
    2ef4:	4942      	ldr	r1, [pc, #264]	; (3000 <hci_tx_thread+0x168>)
    2ef6:	9300      	str	r3, [sp, #0]
    2ef8:	4844      	ldr	r0, [pc, #272]	; (300c <hci_tx_thread+0x174>)
    2efa:	4b45      	ldr	r3, [pc, #276]	; (3010 <hci_tx_thread+0x178>)
    2efc:	f7fe fc34 	bl	1768 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    2f00:	6828      	ldr	r0, [r5, #0]
    2f02:	f00f fbdd 	bl	126c0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2f06:	602e      	str	r6, [r5, #0]
	}

	bt_dev.sent_cmd = net_buf_ref(buf);
    2f08:	0038      	movs	r0, r7
    2f0a:	f00f fbf7 	bl	126fc <net_buf_ref>
    2f0e:	4e41      	ldr	r6, [pc, #260]	; (3014 <hci_tx_thread+0x17c>)
    2f10:	0035      	movs	r5, r6
    2f12:	35ac      	adds	r5, #172	; 0xac
    2f14:	6028      	str	r0, [r5, #0]

	BT_DBG("Sending command 0x%04x (buf %p) to driver",
	       cmd(buf)->opcode, buf);

	err = bt_send(buf);
    2f16:	0038      	movs	r0, r7
    2f18:	f7ff ff02 	bl	2d20 <bt_send>
	if (err) {
    2f1c:	2800      	cmp	r0, #0
    2f1e:	d01e      	beq.n	2f5e <hci_tx_thread+0xc6>
		BT_ERR("Unable to send to driver (err %d)", err);
    2f20:	4b34      	ldr	r3, [pc, #208]	; (2ff4 <hci_tx_thread+0x15c>)
    2f22:	4a35      	ldr	r2, [pc, #212]	; (2ff8 <hci_tx_thread+0x160>)
    2f24:	9302      	str	r3, [sp, #8]
    2f26:	4b35      	ldr	r3, [pc, #212]	; (2ffc <hci_tx_thread+0x164>)
    2f28:	4935      	ldr	r1, [pc, #212]	; (3000 <hci_tx_thread+0x168>)
    2f2a:	9001      	str	r0, [sp, #4]
    2f2c:	9300      	str	r3, [sp, #0]
    2f2e:	483a      	ldr	r0, [pc, #232]	; (3018 <hci_tx_thread+0x180>)
    2f30:	4b37      	ldr	r3, [pc, #220]	; (3010 <hci_tx_thread+0x178>)
    2f32:	f7fe fc19 	bl	1768 <printk>
		k_sem_give(&bt_dev.ncmd_sem);
    2f36:	0030      	movs	r0, r6
    2f38:	3098      	adds	r0, #152	; 0x98
    2f3a:	f010 fd6f 	bl	13a1c <k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2f3e:	0038      	movs	r0, r7
    2f40:	f7ff f93c 	bl	21bc <net_buf_user_data>
    2f44:	2200      	movs	r2, #0
    2f46:	8840      	ldrh	r0, [r0, #2]
    2f48:	211f      	movs	r1, #31
    2f4a:	f7ff f9bb 	bl	22c4 <hci_cmd_done>
			     NULL);
		net_buf_unref(bt_dev.sent_cmd);
    2f4e:	6828      	ldr	r0, [r5, #0]
    2f50:	f00f fbb6 	bl	126c0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2f54:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2f56:	0038      	movs	r0, r7
		BT_ERR("Unable to send to driver (err %d)", err);
		k_sem_give(&bt_dev.ncmd_sem);
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
			     NULL);
		net_buf_unref(bt_dev.sent_cmd);
		bt_dev.sent_cmd = NULL;
    2f58:	602b      	str	r3, [r5, #0]
		net_buf_unref(buf);
    2f5a:	f00f fbb1 	bl	126c0 <net_buf_unref>

static void process_events(struct k_poll_event *ev, int count)
{
	BT_DBG("count %d", count);

	for (; count; ev++, count--) {
    2f5e:	9b05      	ldr	r3, [sp, #20]
    2f60:	340c      	adds	r4, #12
    2f62:	3b01      	subs	r3, #1
    2f64:	9305      	str	r3, [sp, #20]
    2f66:	0022      	movs	r2, r4
    2f68:	9b05      	ldr	r3, [sp, #20]
    2f6a:	3a08      	subs	r2, #8
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d03a      	beq.n	2fe6 <hci_tx_thread+0x14e>
		BT_DBG("ev->state %u", ev->state);

		switch (ev->state) {
    2f70:	6853      	ldr	r3, [r2, #4]
    2f72:	03db      	lsls	r3, r3, #15
    2f74:	0edb      	lsrs	r3, r3, #27
    2f76:	2b02      	cmp	r3, #2
    2f78:	d0f1      	beq.n	2f5e <hci_tx_thread+0xc6>
    2f7a:	2b08      	cmp	r3, #8
    2f7c:	d117      	bne.n	2fae <hci_tx_thread+0x116>
		case K_POLL_STATE_SIGNALED:
			break;
		case K_POLL_STATE_FIFO_DATA_AVAILABLE:
			if (ev->tag == BT_EVENT_CMD_TX) {
    2f7e:	7916      	ldrb	r6, [r2, #4]
    2f80:	2e00      	cmp	r6, #0
    2f82:	d122      	bne.n	2fca <hci_tx_thread+0x132>
	struct net_buf *buf;
	int err;

	/* Get next command */
	BT_DBG("calling net_buf_get");
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2f84:	4d23      	ldr	r5, [pc, #140]	; (3014 <hci_tx_thread+0x17c>)
    2f86:	0031      	movs	r1, r6
    2f88:	0028      	movs	r0, r5
    2f8a:	30c4      	adds	r0, #196	; 0xc4
    2f8c:	f00f fb6c 	bl	12668 <net_buf_get>
    2f90:	1e07      	subs	r7, r0, #0
	BT_ASSERT(buf);
    2f92:	d1a1      	bne.n	2ed8 <hci_tx_thread+0x40>
    2f94:	4b17      	ldr	r3, [pc, #92]	; (2ff4 <hci_tx_thread+0x15c>)
    2f96:	4a18      	ldr	r2, [pc, #96]	; (2ff8 <hci_tx_thread+0x160>)
    2f98:	9301      	str	r3, [sp, #4]
    2f9a:	4b18      	ldr	r3, [pc, #96]	; (2ffc <hci_tx_thread+0x164>)
    2f9c:	4918      	ldr	r1, [pc, #96]	; (3000 <hci_tx_thread+0x168>)
    2f9e:	9300      	str	r3, [sp, #0]
    2fa0:	481e      	ldr	r0, [pc, #120]	; (301c <hci_tx_thread+0x184>)
    2fa2:	4b1b      	ldr	r3, [pc, #108]	; (3010 <hci_tx_thread+0x178>)
    2fa4:	f7fe fbe0 	bl	1768 <printk>
    2fa8:	b662      	cpsie	i
    2faa:	2004      	movs	r0, #4
    2fac:	df02      	svc	2
	BT_DBG("count %d", count);

	for (; count; ev++, count--) {
		BT_DBG("ev->state %u", ev->state);

		switch (ev->state) {
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d0d5      	beq.n	2f5e <hci_tx_thread+0xc6>
			}
			break;
		case K_POLL_STATE_NOT_READY:
			break;
		default:
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2fb2:	4a10      	ldr	r2, [pc, #64]	; (2ff4 <hci_tx_thread+0x15c>)
    2fb4:	9301      	str	r3, [sp, #4]
    2fb6:	4b1a      	ldr	r3, [pc, #104]	; (3020 <hci_tx_thread+0x188>)
    2fb8:	9202      	str	r2, [sp, #8]
    2fba:	9300      	str	r3, [sp, #0]
    2fbc:	4a19      	ldr	r2, [pc, #100]	; (3024 <hci_tx_thread+0x18c>)
    2fbe:	4b1a      	ldr	r3, [pc, #104]	; (3028 <hci_tx_thread+0x190>)
    2fc0:	490f      	ldr	r1, [pc, #60]	; (3000 <hci_tx_thread+0x168>)
    2fc2:	481a      	ldr	r0, [pc, #104]	; (302c <hci_tx_thread+0x194>)
    2fc4:	f7fe fbd0 	bl	1768 <printk>
    2fc8:	e7c9      	b.n	2f5e <hci_tx_thread+0xc6>
			if (ev->tag == BT_EVENT_CMD_TX) {
				send_cmd();
			} else if (IS_ENABLED(CONFIG_BLUETOOTH_CONN)) {
				struct bt_conn *conn;

				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2fca:	2e01      	cmp	r6, #1
    2fcc:	d104      	bne.n	2fd8 <hci_tx_thread+0x140>
					conn = CONTAINER_OF(ev->fifo,
							    struct bt_conn,
							    tx_notify);
					bt_conn_notify_tx(conn);
    2fce:	6820      	ldr	r0, [r4, #0]
    2fd0:	381c      	subs	r0, #28
    2fd2:	f001 faff 	bl	45d4 <bt_conn_notify_tx>
    2fd6:	e7c2      	b.n	2f5e <hci_tx_thread+0xc6>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    2fd8:	2e02      	cmp	r6, #2
    2fda:	d1c0      	bne.n	2f5e <hci_tx_thread+0xc6>
					conn = CONTAINER_OF(ev->fifo,
							    struct bt_conn,
							    tx_queue);
					bt_conn_process_tx(conn);
    2fdc:	6820      	ldr	r0, [r4, #0]
    2fde:	3830      	subs	r0, #48	; 0x30
    2fe0:	f001 fe40 	bl	4c64 <bt_conn_process_tx>
    2fe4:	e7bb      	b.n	2f5e <hci_tx_thread+0xc6>
		process_events(events, ev_count);

		/* Make sure we don't hog the CPU if there's all the time
		 * some ready events.
		 */
		k_yield();
    2fe6:	f010 fc45 	bl	13874 <k_yield>
	}
    2fea:	e757      	b.n	2e9c <hci_tx_thread+0x4>
    2fec:	2000027c 	.word	0x2000027c
    2ff0:	fffe0fff 	.word	0xfffe0fff
    2ff4:	000145b0 	.word	0x000145b0
    2ff8:	00014570 	.word	0x00014570
    2ffc:	000145b5 	.word	0x000145b5
    3000:	00014577 	.word	0x00014577
    3004:	0001482a 	.word	0x0001482a
    3008:	000168b5 	.word	0x000168b5
    300c:	00014879 	.word	0x00014879
    3010:	0001687b 	.word	0x0001687b
    3014:	200002b0 	.word	0x200002b0
    3018:	000147f8 	.word	0x000147f8
    301c:	00014854 	.word	0x00014854
    3020:	000145fb 	.word	0x000145fb
    3024:	000145bd 	.word	0x000145bd
    3028:	00016884 	.word	0x00016884
    302c:	000148a4 	.word	0x000148a4

00003030 <bt_recv>:

	return bt_dev.drv->send(buf);
}

int bt_recv(struct net_buf *buf)
{
    3030:	b5f0      	push	{r4, r5, r6, r7, lr}
    3032:	0007      	movs	r7, r0
    3034:	b091      	sub	sp, #68	; 0x44

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	pool = net_buf_pool_get(buf->pool_id);
    3036:	7980      	ldrb	r0, [r0, #6]
    3038:	f00f fac6 	bl	125c8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    303c:	8b43      	ldrh	r3, [r0, #26]
    303e:	2b03      	cmp	r3, #3
    3040:	d80a      	bhi.n	3058 <bt_recv+0x28>
		BT_ERR("Too small user data size");
    3042:	4bc5      	ldr	r3, [pc, #788]	; (3358 <bt_recv+0x328>)
    3044:	4ac5      	ldr	r2, [pc, #788]	; (335c <bt_recv+0x32c>)
    3046:	9301      	str	r3, [sp, #4]
    3048:	4bc5      	ldr	r3, [pc, #788]	; (3360 <bt_recv+0x330>)
    304a:	49c6      	ldr	r1, [pc, #792]	; (3364 <bt_recv+0x334>)
    304c:	9300      	str	r3, [sp, #0]
    304e:	48c6      	ldr	r0, [pc, #792]	; (3368 <bt_recv+0x338>)
    3050:	4bc6      	ldr	r3, [pc, #792]	; (336c <bt_recv+0x33c>)
    3052:	f7fe fb89 	bl	1768 <printk>
    3056:	e08a      	b.n	316e <bt_recv+0x13e>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    3058:	0038      	movs	r0, r7
    305a:	f7ff f8af 	bl	21bc <net_buf_user_data>
    305e:	7803      	ldrb	r3, [r0, #0]
		net_buf_unref(buf);
		return -EINVAL;
	}

	switch (bt_buf_get_type(buf)) {
    3060:	2b01      	cmp	r3, #1
    3062:	d049      	beq.n	30f8 <bt_recv+0xc8>
    3064:	2b03      	cmp	r3, #3
    3066:	d000      	beq.n	306a <bt_recv+0x3a>
    3068:	e076      	b.n	3158 <bt_recv+0x128>
#endif

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    306a:	68bb      	ldr	r3, [r7, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    306c:	78dc      	ldrb	r4, [r3, #3]
    306e:	789a      	ldrb	r2, [r3, #2]
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    3070:	785d      	ldrb	r5, [r3, #1]
    3072:	7819      	ldrb	r1, [r3, #0]

#if defined(CONFIG_BLUETOOTH_CONN)
static void hci_acl(struct net_buf *buf)
{
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    3074:	0224      	lsls	r4, r4, #8
    3076:	4314      	orrs	r4, r2
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    3078:	022a      	lsls	r2, r5, #8
    307a:	430a      	orrs	r2, r1
	flags = bt_acl_flags(handle);

	acl(buf)->handle = bt_acl_handle(handle);
    307c:	0513      	lsls	r3, r2, #20
    307e:	0d1b      	lsrs	r3, r3, #20
    3080:	8043      	strh	r3, [r0, #2]

	net_buf_pull(buf, sizeof(*hdr));
    3082:	0038      	movs	r0, r7
    3084:	2104      	movs	r1, #4
    3086:	3008      	adds	r0, #8
	struct bt_conn *conn;
	u8_t flags;

	BT_DBG("buf %p", buf);

	handle = sys_le16_to_cpu(hdr->handle);
    3088:	0015      	movs	r5, r2
	flags = bt_acl_flags(handle);

	acl(buf)->handle = bt_acl_handle(handle);

	net_buf_pull(buf, sizeof(*hdr));
    308a:	f00f fb5c 	bl	12746 <net_buf_simple_pull>

	BT_DBG("handle %u len %u flags %u", acl(buf)->handle, len, flags);

	if (buf->len != len) {
    308e:	89bb      	ldrh	r3, [r7, #12]
    3090:	429c      	cmp	r4, r3
    3092:	d00c      	beq.n	30ae <bt_recv+0x7e>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    3094:	4ab0      	ldr	r2, [pc, #704]	; (3358 <bt_recv+0x328>)
    3096:	9301      	str	r3, [sp, #4]
    3098:	4bb1      	ldr	r3, [pc, #708]	; (3360 <bt_recv+0x330>)
    309a:	9203      	str	r2, [sp, #12]
    309c:	9300      	str	r3, [sp, #0]
    309e:	9402      	str	r4, [sp, #8]
    30a0:	4bb3      	ldr	r3, [pc, #716]	; (3370 <bt_recv+0x340>)
    30a2:	4aae      	ldr	r2, [pc, #696]	; (335c <bt_recv+0x32c>)
    30a4:	49af      	ldr	r1, [pc, #700]	; (3364 <bt_recv+0x334>)
    30a6:	48b3      	ldr	r0, [pc, #716]	; (3374 <bt_recv+0x344>)
    30a8:	f7fe fb5e 	bl	1768 <printk>
    30ac:	e04e      	b.n	314c <bt_recv+0x11c>
		net_buf_unref(buf);
		return;
	}

	conn = bt_conn_lookup_handle(acl(buf)->handle);
    30ae:	0038      	movs	r0, r7
    30b0:	f7ff f884 	bl	21bc <net_buf_user_data>
    30b4:	8840      	ldrh	r0, [r0, #2]
    30b6:	f001 fc4d 	bl	4954 <bt_conn_lookup_handle>
    30ba:	1e04      	subs	r4, r0, #0
	if (!conn) {
    30bc:	d114      	bne.n	30e8 <bt_recv+0xb8>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    30be:	0038      	movs	r0, r7
    30c0:	f7ff f87c 	bl	21bc <net_buf_user_data>
    30c4:	4ba4      	ldr	r3, [pc, #656]	; (3358 <bt_recv+0x328>)
    30c6:	4aa5      	ldr	r2, [pc, #660]	; (335c <bt_recv+0x32c>)
    30c8:	9302      	str	r3, [sp, #8]
    30ca:	8843      	ldrh	r3, [r0, #2]
    30cc:	49a5      	ldr	r1, [pc, #660]	; (3364 <bt_recv+0x334>)
    30ce:	9301      	str	r3, [sp, #4]
    30d0:	4ba3      	ldr	r3, [pc, #652]	; (3360 <bt_recv+0x330>)
    30d2:	48a9      	ldr	r0, [pc, #676]	; (3378 <bt_recv+0x348>)
    30d4:	9300      	str	r3, [sp, #0]
    30d6:	4ba6      	ldr	r3, [pc, #664]	; (3370 <bt_recv+0x340>)
    30d8:	f7fe fb46 	bl	1768 <printk>
		net_buf_unref(buf);
    30dc:	0038      	movs	r0, r7
    30de:	f00f faef 	bl	126c0 <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_acl(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    30e2:	0020      	movs	r0, r4
    30e4:	f000 fd9b 	bl	3c1e <bt_recv+0xbee>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
		net_buf_unref(buf);
		return;
	}

	bt_conn_recv(conn, buf, flags);
    30e8:	0b2a      	lsrs	r2, r5, #12
    30ea:	0039      	movs	r1, r7
    30ec:	f001 f984 	bl	43f8 <bt_conn_recv>
	bt_conn_unref(conn);
    30f0:	0020      	movs	r0, r4
    30f2:	f001 fcaa 	bl	4a4a <bt_conn_unref>
    30f6:	e02c      	b.n	3152 <bt_recv+0x122>
	}
}

static void hci_event(struct net_buf *buf)
{
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    30f8:	68bc      	ldr	r4, [r7, #8]

	BT_DBG("event 0x%02x", hdr->evt);

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    30fa:	7822      	ldrb	r2, [r4, #0]
    30fc:	2a13      	cmp	r2, #19
    30fe:	d811      	bhi.n	3124 <bt_recv+0xf4>
    3100:	4093      	lsls	r3, r2
    3102:	228c      	movs	r2, #140	; 0x8c
    3104:	0312      	lsls	r2, r2, #12
    3106:	4213      	tst	r3, r2
    3108:	d00c      	beq.n	3124 <bt_recv+0xf4>
    310a:	4b93      	ldr	r3, [pc, #588]	; (3358 <bt_recv+0x328>)
    310c:	4a93      	ldr	r2, [pc, #588]	; (335c <bt_recv+0x32c>)
    310e:	9301      	str	r3, [sp, #4]
    3110:	4b93      	ldr	r3, [pc, #588]	; (3360 <bt_recv+0x330>)
    3112:	4994      	ldr	r1, [pc, #592]	; (3364 <bt_recv+0x334>)
    3114:	9300      	str	r3, [sp, #0]
    3116:	4899      	ldr	r0, [pc, #612]	; (337c <bt_recv+0x34c>)
    3118:	4b99      	ldr	r3, [pc, #612]	; (3380 <bt_recv+0x350>)
    311a:	f7fe fb25 	bl	1768 <printk>
    311e:	b662      	cpsie	i
    3120:	2004      	movs	r0, #4
    3122:	df02      	svc	2

	net_buf_pull(buf, sizeof(*hdr));
    3124:	003b      	movs	r3, r7
    3126:	3308      	adds	r3, #8
    3128:	2102      	movs	r1, #2
    312a:	0018      	movs	r0, r3
    312c:	9306      	str	r3, [sp, #24]
    312e:	f00f fb0a 	bl	12746 <net_buf_simple_pull>

	switch (hdr->evt) {
    3132:	7824      	ldrb	r4, [r4, #0]
    3134:	2c08      	cmp	r4, #8
    3136:	d021      	beq.n	317c <bt_recv+0x14c>
    3138:	d841      	bhi.n	31be <bt_recv+0x18e>
    313a:	2c05      	cmp	r4, #5
    313c:	d000      	beq.n	3140 <bt_recv+0x110>
    313e:	e0c5      	b.n	32cc <bt_recv+0x29c>
    3140:	68bd      	ldr	r5, [r7, #8]
	struct bt_conn *conn;

	BT_DBG("status %u handle %u reason %u", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    3142:	782b      	ldrb	r3, [r5, #0]
    3144:	9306      	str	r3, [sp, #24]
    3146:	2b00      	cmp	r3, #0
    3148:	d100      	bne.n	314c <bt_recv+0x11c>
    314a:	e084      	b.n	3256 <bt_recv+0x226>
			buf->len, bt_hex(buf->data, buf->len));
		break;

	}

	net_buf_unref(buf);
    314c:	0038      	movs	r0, r7
    314e:	f00f fab7 	bl	126c0 <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_event(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    3152:	2000      	movs	r0, #0
    3154:	f000 fd63 	bl	3c1e <bt_recv+0xbee>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3158:	4a7f      	ldr	r2, [pc, #508]	; (3358 <bt_recv+0x328>)
    315a:	9301      	str	r3, [sp, #4]
    315c:	4b80      	ldr	r3, [pc, #512]	; (3360 <bt_recv+0x330>)
    315e:	9202      	str	r2, [sp, #8]
    3160:	9300      	str	r3, [sp, #0]
    3162:	4a7e      	ldr	r2, [pc, #504]	; (335c <bt_recv+0x32c>)
    3164:	4b81      	ldr	r3, [pc, #516]	; (336c <bt_recv+0x33c>)
    3166:	497f      	ldr	r1, [pc, #508]	; (3364 <bt_recv+0x334>)
    3168:	4886      	ldr	r0, [pc, #536]	; (3384 <bt_recv+0x354>)
    316a:	f7fe fafd 	bl	1768 <printk>
		net_buf_unref(buf);
    316e:	0038      	movs	r0, r7
    3170:	f00f faa6 	bl	126c0 <net_buf_unref>
		return -EINVAL;
    3174:	2016      	movs	r0, #22
    3176:	4240      	negs	r0, r0
    3178:	f000 fd51 	bl	3c1e <bt_recv+0xbee>
    317c:	68be      	ldr	r6, [r7, #8]

#if defined(CONFIG_BLUETOOTH_SMP) || defined(CONFIG_BLUETOOTH_BREDR)
static void hci_encrypt_change(struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    317e:	78b5      	ldrb	r5, [r6, #2]
    3180:	7873      	ldrb	r3, [r6, #1]
    3182:	022d      	lsls	r5, r5, #8
    3184:	431d      	orrs	r5, r3
	struct bt_conn *conn;

	BT_DBG("status %u handle %u encrypt 0x%02x", evt->status, handle,
	       evt->encrypt);

	conn = bt_conn_lookup_handle(handle);
    3186:	0028      	movs	r0, r5
    3188:	f001 fbe4 	bl	4954 <bt_conn_lookup_handle>
    318c:	1e04      	subs	r4, r0, #0
	if (!conn) {
    318e:	d106      	bne.n	319e <bt_recv+0x16e>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3190:	4b71      	ldr	r3, [pc, #452]	; (3358 <bt_recv+0x328>)
    3192:	9501      	str	r5, [sp, #4]
    3194:	9302      	str	r3, [sp, #8]
    3196:	4b72      	ldr	r3, [pc, #456]	; (3360 <bt_recv+0x330>)
    3198:	9300      	str	r3, [sp, #0]
    319a:	4b7b      	ldr	r3, [pc, #492]	; (3388 <bt_recv+0x358>)
    319c:	e023      	b.n	31e6 <bt_recv+0x1b6>
		return;
	}

	if (evt->status) {
    319e:	7833      	ldrb	r3, [r6, #0]
    31a0:	7882      	ldrb	r2, [r0, #2]
    31a2:	2b00      	cmp	r3, #0
    31a4:	d004      	beq.n	31b0 <bt_recv+0x180>
		/* TODO report error */
		if (conn->type == BT_CONN_TYPE_LE) {
    31a6:	2a00      	cmp	r2, #0
    31a8:	d144      	bne.n	3234 <bt_recv+0x204>
			/* reset required security level in case of error */
			conn->required_sec_level = conn->sec_level;
    31aa:	7a03      	ldrb	r3, [r0, #8]
    31ac:	7243      	strb	r3, [r0, #9]
    31ae:	e041      	b.n	3234 <bt_recv+0x204>
		}
		bt_conn_unref(conn);
		return;
	}

	conn->encrypt = evt->encrypt;
    31b0:	78f3      	ldrb	r3, [r6, #3]
    31b2:	7283      	strb	r3, [r0, #10]

#if defined(CONFIG_BLUETOOTH_SMP)
	if (conn->type == BT_CONN_TYPE_LE) {
    31b4:	2a00      	cmp	r2, #0
    31b6:	d125      	bne.n	3204 <bt_recv+0x1d4>
		 *
		 * Update keys with last pairing info for proper sec level
		 * update. This is done only for LE transport, for BR/EDR keys
		 * are updated on HCI 'Link Key Notification Event'
		 */
		if (conn->encrypt) {
    31b8:	2b00      	cmp	r3, #0
    31ba:	d020      	beq.n	31fe <bt_recv+0x1ce>
    31bc:	e01c      	b.n	31f8 <bt_recv+0x1c8>

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    31be:	2c30      	cmp	r4, #48	; 0x30
    31c0:	d000      	beq.n	31c4 <bt_recv+0x194>
    31c2:	e081      	b.n	32c8 <bt_recv+0x298>
    31c4:	68be      	ldr	r6, [r7, #8]
{
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
	struct bt_conn *conn;
	u16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    31c6:	78b5      	ldrb	r5, [r6, #2]
    31c8:	7873      	ldrb	r3, [r6, #1]
    31ca:	022d      	lsls	r5, r5, #8
    31cc:	431d      	orrs	r5, r3

	BT_DBG("status %u handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    31ce:	0028      	movs	r0, r5
    31d0:	f001 fbc0 	bl	4954 <bt_conn_lookup_handle>
    31d4:	1e04      	subs	r4, r0, #0
	if (!conn) {
    31d6:	d000      	beq.n	31da <bt_recv+0x1aa>
    31d8:	e08b      	b.n	32f2 <bt_recv+0x2c2>
		BT_ERR("Unable to look up conn with handle %u", handle);
    31da:	4b5f      	ldr	r3, [pc, #380]	; (3358 <bt_recv+0x328>)
    31dc:	9501      	str	r5, [sp, #4]
    31de:	9302      	str	r3, [sp, #8]
    31e0:	4b5f      	ldr	r3, [pc, #380]	; (3360 <bt_recv+0x330>)
    31e2:	9300      	str	r3, [sp, #0]
    31e4:	4b69      	ldr	r3, [pc, #420]	; (338c <bt_recv+0x35c>)
    31e6:	4a5d      	ldr	r2, [pc, #372]	; (335c <bt_recv+0x32c>)
    31e8:	495e      	ldr	r1, [pc, #376]	; (3364 <bt_recv+0x334>)
    31ea:	4869      	ldr	r0, [pc, #420]	; (3390 <bt_recv+0x360>)
    31ec:	f7fe fabc 	bl	1768 <printk>
    31f0:	e7ac      	b.n	314c <bt_recv+0x11c>
	 * This is done only for LE transport. For BR/EDR transport keys are
	 * updated on HCI 'Link Key Notification Event', therefore update here
	 * only security level based on available keys and encryption state.
	 */
#if defined(CONFIG_BLUETOOTH_SMP)
	if (conn->type == BT_CONN_TYPE_LE) {
    31f2:	7883      	ldrb	r3, [r0, #2]
    31f4:	2b00      	cmp	r3, #0
    31f6:	d105      	bne.n	3204 <bt_recv+0x1d4>
		bt_smp_update_keys(conn);
    31f8:	0020      	movs	r0, r4
    31fa:	f005 fa1d 	bl	8638 <bt_smp_update_keys>
		update_sec_level(conn);
    31fe:	0020      	movs	r0, r4
    3200:	f7ff f826 	bl	2250 <update_sec_level>
	if (conn->type == BT_CONN_TYPE_BR) {
		update_sec_level_br(conn);
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	bt_l2cap_encrypt_change(conn, evt->status);
    3204:	0020      	movs	r0, r4
    3206:	7831      	ldrb	r1, [r6, #0]
    3208:	f001 feb3 	bl	4f72 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    320c:	0020      	movs	r0, r4
    320e:	f001 f8b9 	bl	4384 <bt_conn_security_changed>
    3212:	e00f      	b.n	3234 <bt_recv+0x204>
	if (!conn) {
		BT_ERR("Unable to look up conn with handle %u", handle);
		goto advertise;
	}

	conn->err = evt->reason;
    3214:	0003      	movs	r3, r0
    3216:	78ea      	ldrb	r2, [r5, #3]
    3218:	3350      	adds	r3, #80	; 0x50
    321a:	701a      	strb	r2, [r3, #0]

	/* Check stacks usage (no-ops if not enabled) */
	k_call_stacks_analyze();
    321c:	f00f fdb4 	bl	12d88 <k_call_stacks_analyze>
#if !defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
	STACK_ANALYZE("rx stack", rx_thread_stack);
#endif
	STACK_ANALYZE("tx stack", tx_thread_stack);

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3220:	9906      	ldr	r1, [sp, #24]
    3222:	0020      	movs	r0, r4
    3224:	f001 fadc 	bl	47e0 <bt_conn_set_state>
	conn->handle = 0;
    3228:	466b      	mov	r3, sp

	if (conn->type != BT_CONN_TYPE_LE) {
    322a:	78a5      	ldrb	r5, [r4, #2]
	STACK_ANALYZE("rx stack", rx_thread_stack);
#endif
	STACK_ANALYZE("tx stack", tx_thread_stack);

	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	conn->handle = 0;
    322c:	8b1b      	ldrh	r3, [r3, #24]
    322e:	8023      	strh	r3, [r4, #0]

	if (conn->type != BT_CONN_TYPE_LE) {
    3230:	2d00      	cmp	r5, #0
    3232:	d025      	beq.n	3280 <bt_recv+0x250>
	}

	update_conn_param(conn);

done:
	bt_conn_unref(conn);
    3234:	0020      	movs	r0, r4
    3236:	e00b      	b.n	3250 <bt_recv+0x220>
		BT_ERR("Unable to lookup conn for handle %u", handle);
		return le_conn_param_neg_reply(handle,
					       BT_HCI_ERR_UNKNOWN_CONN_ID);
	}

	if (!le_param_req(conn, &param)) {
    3238:	0021      	movs	r1, r4
    323a:	9806      	ldr	r0, [sp, #24]
    323c:	f001 f866 	bl	430c <le_param_req>
    3240:	2800      	cmp	r0, #0
    3242:	d000      	beq.n	3246 <bt_recv+0x216>
    3244:	e214      	b.n	3670 <bt_recv+0x640>
		err = le_conn_param_neg_reply(handle,
    3246:	211e      	movs	r1, #30
    3248:	0030      	movs	r0, r6
    324a:	f7ff fe09 	bl	2e60 <le_conn_param_neg_reply>
					      BT_HCI_ERR_INVALID_LL_PARAM);
	} else {
		err = le_conn_param_req_reply(handle, &param);
	}

	bt_conn_unref(conn);
    324e:	9806      	ldr	r0, [sp, #24]
	cp->handle = evt->handle;

	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);

done:
	bt_conn_unref(conn);
    3250:	f001 fbfb 	bl	4a4a <bt_conn_unref>
    3254:	e77a      	b.n	314c <bt_recv+0x11c>
}

static void hci_disconn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3256:	78ae      	ldrb	r6, [r5, #2]
    3258:	786b      	ldrb	r3, [r5, #1]
    325a:	0236      	lsls	r6, r6, #8
    325c:	431e      	orrs	r6, r3

	if (evt->status) {
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    325e:	0030      	movs	r0, r6
    3260:	f001 fb78 	bl	4954 <bt_conn_lookup_handle>
    3264:	1e04      	subs	r4, r0, #0
	if (!conn) {
    3266:	d1d5      	bne.n	3214 <bt_recv+0x1e4>
		BT_ERR("Unable to look up conn with handle %u", handle);
    3268:	4b3b      	ldr	r3, [pc, #236]	; (3358 <bt_recv+0x328>)
    326a:	9601      	str	r6, [sp, #4]
    326c:	9302      	str	r3, [sp, #8]
    326e:	4b3c      	ldr	r3, [pc, #240]	; (3360 <bt_recv+0x330>)
    3270:	4a3a      	ldr	r2, [pc, #232]	; (335c <bt_recv+0x32c>)
    3272:	9300      	str	r3, [sp, #0]
    3274:	493b      	ldr	r1, [pc, #236]	; (3364 <bt_recv+0x334>)
    3276:	4b47      	ldr	r3, [pc, #284]	; (3394 <bt_recv+0x364>)
    3278:	4845      	ldr	r0, [pc, #276]	; (3390 <bt_recv+0x360>)
    327a:	f7fe fa75 	bl	1768 <printk>
    327e:	e00f      	b.n	32a0 <bt_recv+0x270>
#endif
		bt_conn_unref(conn);
		return;
	}

	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    3280:	1d20      	adds	r0, r4, #4
    3282:	0029      	movs	r1, r5
    3284:	f7fe ffba 	bl	21fc <atomic_test_bit>
    3288:	2800      	cmp	r0, #0
    328a:	d006      	beq.n	329a <bt_recv+0x26a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    328c:	0020      	movs	r0, r4
    328e:	2101      	movs	r1, #1
    3290:	f001 faa6 	bl	47e0 <bt_conn_set_state>
		bt_le_scan_update(false);
    3294:	0028      	movs	r0, r5
    3296:	f7ff f9e9 	bl	266c <bt_le_scan_update>
	}

	bt_conn_unref(conn);
    329a:	0020      	movs	r0, r4
    329c:	f001 fbd5 	bl	4a4a <bt_conn_unref>

advertise:
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    32a0:	4c3d      	ldr	r4, [pc, #244]	; (3398 <bt_recv+0x368>)
    32a2:	2106      	movs	r1, #6
    32a4:	346c      	adds	r4, #108	; 0x6c
    32a6:	0020      	movs	r0, r4
    32a8:	f7fe ffa8 	bl	21fc <atomic_test_bit>
    32ac:	2800      	cmp	r0, #0
    32ae:	d100      	bne.n	32b2 <bt_recv+0x282>
    32b0:	e74c      	b.n	314c <bt_recv+0x11c>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    32b2:	2105      	movs	r1, #5
    32b4:	0020      	movs	r0, r4
    32b6:	f7fe ffa1 	bl	21fc <atomic_test_bit>
	}

	bt_conn_unref(conn);

advertise:
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    32ba:	2800      	cmp	r0, #0
    32bc:	d000      	beq.n	32c0 <bt_recv+0x290>
    32be:	e745      	b.n	314c <bt_recv+0x11c>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
			le_set_private_addr();
		}

		set_advertise_enable(true);
    32c0:	3001      	adds	r0, #1
    32c2:	f7ff f93f 	bl	2544 <set_advertise_enable>
    32c6:	e741      	b.n	314c <bt_recv+0x11c>

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    32c8:	2c3e      	cmp	r4, #62	; 0x3e
    32ca:	d019      	beq.n	3300 <bt_recv+0x2d0>
#endif /* CONFIG_BLUETOOTH_SMP || CONFIG_BLUETOOTH_BREDR */
	case BT_HCI_EVT_LE_META_EVENT:
		hci_le_meta_event(buf);
		break;
	default:
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    32cc:	89bd      	ldrh	r5, [r7, #12]
    32ce:	68b8      	ldr	r0, [r7, #8]
    32d0:	0029      	movs	r1, r5
    32d2:	f7fe fe65 	bl	1fa0 <bt_hex>
    32d6:	4b20      	ldr	r3, [pc, #128]	; (3358 <bt_recv+0x328>)
    32d8:	9003      	str	r0, [sp, #12]
    32da:	9304      	str	r3, [sp, #16]
    32dc:	4b2f      	ldr	r3, [pc, #188]	; (339c <bt_recv+0x36c>)
    32de:	4a30      	ldr	r2, [pc, #192]	; (33a0 <bt_recv+0x370>)
    32e0:	9300      	str	r3, [sp, #0]
    32e2:	4920      	ldr	r1, [pc, #128]	; (3364 <bt_recv+0x334>)
    32e4:	4b26      	ldr	r3, [pc, #152]	; (3380 <bt_recv+0x350>)
    32e6:	482f      	ldr	r0, [pc, #188]	; (33a4 <bt_recv+0x374>)
    32e8:	9502      	str	r5, [sp, #8]
    32ea:	9401      	str	r4, [sp, #4]
    32ec:	f7fe fa3c 	bl	1768 <printk>
    32f0:	e72c      	b.n	314c <bt_recv+0x11c>
	if (!conn) {
		BT_ERR("Unable to look up conn with handle %u", handle);
		return;
	}

	if (evt->status) {
    32f2:	7831      	ldrb	r1, [r6, #0]
    32f4:	2900      	cmp	r1, #0
    32f6:	d100      	bne.n	32fa <bt_recv+0x2ca>
    32f8:	e77b      	b.n	31f2 <bt_recv+0x1c2>
		bt_l2cap_encrypt_change(conn, evt->status);
    32fa:	f001 fe3a 	bl	4f72 <bt_l2cap_encrypt_change>
    32fe:	e725      	b.n	314c <bt_recv+0x11c>
	}
}

static void hci_le_meta_event(struct net_buf *buf)
{
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3300:	68bc      	ldr	r4, [r7, #8]

	BT_DBG("subevent 0x%02x", evt->subevent);

	net_buf_pull(buf, sizeof(*evt));
    3302:	2101      	movs	r1, #1
    3304:	9806      	ldr	r0, [sp, #24]
    3306:	f00f fa1e 	bl	12746 <net_buf_simple_pull>

	switch (evt->subevent) {
    330a:	7824      	ldrb	r4, [r4, #0]
    330c:	1e60      	subs	r0, r4, #1
    330e:	280b      	cmp	r0, #11
    3310:	d901      	bls.n	3316 <bt_recv+0x2e6>
    3312:	f000 fc70 	bl	3bf6 <bt_recv+0xbc6>
    3316:	f7fc ff39 	bl	18c <__gnu_thumb1_case_uhi>
    331a:	000c      	.short	0x000c
    331c:	010303a5 	.word	0x010303a5
    3320:	02420130 	.word	0x02420130
    3324:	01d4017a 	.word	0x01d4017a
    3328:	037c0359 	.word	0x037c0359
    332c:	046e046e 	.word	0x046e046e
    3330:	01f0      	.short	0x01f0
    3332:	68bd      	ldr	r5, [r7, #8]
	int err;

	BT_DBG("status %u handle %u role %u %s", evt->status, handle,
	       evt->role, bt_addr_le_str(&evt->peer_addr));

	if (evt->status) {
    3334:	782b      	ldrb	r3, [r5, #0]
    3336:	2b00      	cmp	r3, #0
    3338:	d036      	beq.n	33a8 <bt_recv+0x378>
		 * connection so there is no need to check ID address as
		 * only one connection can be in that state
		 *
		 * Depending on error code address might not be valid anyway.
		 */
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    333a:	2102      	movs	r1, #2
    333c:	2000      	movs	r0, #0
    333e:	f001 fb59 	bl	49f4 <bt_conn_lookup_state_le>
    3342:	1e04      	subs	r4, r0, #0
		if (!conn) {
    3344:	d100      	bne.n	3348 <bt_recv+0x318>
    3346:	e701      	b.n	314c <bt_recv+0x11c>
			return;
		}

		conn->err = evt->status;
    3348:	0003      	movs	r3, r0
    334a:	782a      	ldrb	r2, [r5, #0]
    334c:	3350      	adds	r3, #80	; 0x50
    334e:	701a      	strb	r2, [r3, #0]

		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3350:	2100      	movs	r1, #0
    3352:	f001 fa45 	bl	47e0 <bt_conn_set_state>
    3356:	e76d      	b.n	3234 <bt_recv+0x204>
    3358:	000145b0 	.word	0x000145b0
    335c:	00014570 	.word	0x00014570
    3360:	000145b5 	.word	0x000145b5
    3364:	00014577 	.word	0x00014577
    3368:	000148d5 	.word	0x000148d5
    336c:	0001675e 	.word	0x0001675e
    3370:	00016756 	.word	0x00016756
    3374:	000148fe 	.word	0x000148fe
    3378:	00014932 	.word	0x00014932
    337c:	00014ab5 	.word	0x00014ab5
    3380:	0001681d 	.word	0x0001681d
    3384:	00014a91 	.word	0x00014a91
    3388:	0001683e 	.word	0x0001683e
    338c:	000168c3 	.word	0x000168c3
    3390:	00014964 	.word	0x00014964
    3394:	000167f0 	.word	0x000167f0
    3398:	200002b0 	.word	0x200002b0
    339c:	000145fb 	.word	0x000145fb
    33a0:	000145bd 	.word	0x000145bd
    33a4:	00014a5f 	.word	0x00014a5f
}

static void le_conn_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    33a8:	78ab      	ldrb	r3, [r5, #2]
    33aa:	786a      	ldrb	r2, [r5, #1]
    33ac:	021b      	lsls	r3, r3, #8
    33ae:	4313      	orrs	r3, r2
    33b0:	9306      	str	r3, [sp, #24]
		bt_conn_unref(conn);

		return;
	}

	id_addr = find_id_addr(&evt->peer_addr);
    33b2:	1d2b      	adds	r3, r5, #4
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    33b4:	0018      	movs	r0, r3
		bt_conn_unref(conn);

		return;
	}

	id_addr = find_id_addr(&evt->peer_addr);
    33b6:	9307      	str	r3, [sp, #28]
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    33b8:	f005 fa48 	bl	884c <bt_keys_find_irk>
			       bt_addr_le_str(addr));
			return &keys->addr;
		}
	}

	return addr;
    33bc:	1d2e      	adds	r6, r5, #4
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
		if (keys) {
    33be:	2800      	cmp	r0, #0
    33c0:	d000      	beq.n	33c4 <bt_recv+0x394>
			BT_DBG("Identity %s matched RPA %s",
			       bt_addr_le_str(&keys->addr),
			       bt_addr_le_str(addr));
			return &keys->addr;
    33c2:	0006      	movs	r6, r0

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    33c4:	2102      	movs	r1, #2
    33c6:	0030      	movs	r0, r6
    33c8:	f001 fb14 	bl	49f4 <bt_conn_lookup_state_le>

	if (evt->role == BT_CONN_ROLE_SLAVE) {
    33cc:	78eb      	ldrb	r3, [r5, #3]

	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT state associated with passed peer LE address.
	 */
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    33ce:	0004      	movs	r4, r0

	if (evt->role == BT_CONN_ROLE_SLAVE) {
    33d0:	2b01      	cmp	r3, #1
    33d2:	d10b      	bne.n	33ec <bt_recv+0x3bc>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    33d4:	2121      	movs	r1, #33	; 0x21
    33d6:	48d1      	ldr	r0, [pc, #836]	; (371c <bt_recv+0x6ec>)
    33d8:	4249      	negs	r1, r1
    33da:	306c      	adds	r0, #108	; 0x6c
    33dc:	f00f fc6e 	bl	12cbc <atomic_and>
		 * object to keep host in sync with controller state
		 */
		atomic_clear_bit(bt_dev.flags, BT_DEV_ADVERTISING);

		/* only for slave we may need to add new connection */
		if (!conn) {
    33e0:	2c00      	cmp	r4, #0
    33e2:	d110      	bne.n	3406 <bt_recv+0x3d6>
			conn = bt_conn_add_le(id_addr);
    33e4:	0030      	movs	r0, r6
    33e6:	f001 f9c9 	bl	477c <bt_conn_add_le>
    33ea:	0004      	movs	r4, r0
		}
	}

	if (!conn) {
    33ec:	2c00      	cmp	r4, #0
    33ee:	d10a      	bne.n	3406 <bt_recv+0x3d6>
		BT_ERR("Unable to add new conn for handle %u", handle);
    33f0:	4bcb      	ldr	r3, [pc, #812]	; (3720 <bt_recv+0x6f0>)
    33f2:	4acc      	ldr	r2, [pc, #816]	; (3724 <bt_recv+0x6f4>)
    33f4:	9302      	str	r3, [sp, #8]
    33f6:	9b06      	ldr	r3, [sp, #24]
    33f8:	49cb      	ldr	r1, [pc, #812]	; (3728 <bt_recv+0x6f8>)
    33fa:	9301      	str	r3, [sp, #4]
    33fc:	4bcb      	ldr	r3, [pc, #812]	; (372c <bt_recv+0x6fc>)
    33fe:	48cc      	ldr	r0, [pc, #816]	; (3730 <bt_recv+0x700>)
    3400:	9300      	str	r3, [sp, #0]
    3402:	4bcc      	ldr	r3, [pc, #816]	; (3734 <bt_recv+0x704>)
    3404:	e6f2      	b.n	31ec <bt_recv+0x1bc>
		return;
	}

	conn->handle   = handle;
    3406:	466b      	mov	r3, sp
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3408:	0020      	movs	r0, r4
    340a:	8b1b      	ldrh	r3, [r3, #24]
    340c:	2207      	movs	r2, #7
    340e:	8023      	strh	r3, [r4, #0]
    3410:	0031      	movs	r1, r6
    3412:	3054      	adds	r0, #84	; 0x54
    3414:	f7fd ffa6 	bl	1364 <memcpy>
	bt_addr_le_copy(&conn->le.dst, id_addr);
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    3418:	7b2b      	ldrb	r3, [r5, #12]
    341a:	7aea      	ldrb	r2, [r5, #11]
    341c:	021b      	lsls	r3, r3, #8
    341e:	4313      	orrs	r3, r2
    3420:	0022      	movs	r2, r4
    3422:	326a      	adds	r2, #106	; 0x6a
    3424:	8013      	strh	r3, [r2, #0]
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    3426:	7bab      	ldrb	r3, [r5, #14]
    3428:	7b6a      	ldrb	r2, [r5, #13]
    342a:	021b      	lsls	r3, r3, #8
    342c:	4313      	orrs	r3, r2
    342e:	0022      	movs	r2, r4
    3430:	3270      	adds	r2, #112	; 0x70
    3432:	8013      	strh	r3, [r2, #0]
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3434:	7c2b      	ldrb	r3, [r5, #16]
    3436:	7bea      	ldrb	r2, [r5, #15]
    3438:	021b      	lsls	r3, r3, #8
    343a:	4313      	orrs	r3, r2
    343c:	0022      	movs	r2, r4
    343e:	3272      	adds	r2, #114	; 0x72
    3440:	8013      	strh	r3, [r2, #0]
	conn->role = evt->role;
    3442:	78eb      	ldrb	r3, [r5, #3]
    3444:	9306      	str	r3, [sp, #24]
    3446:	466b      	mov	r3, sp
    3448:	7e1b      	ldrb	r3, [r3, #24]
    344a:	70e3      	strb	r3, [r4, #3]
	/*
	 * Use connection address (instead of identity address) as initiator
	 * or responder address. Only slave needs to be updated. For master all
	 * was set during outgoing connection creation.
	 */
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    344c:	9b06      	ldr	r3, [sp, #24]
    344e:	2b01      	cmp	r3, #1
    3450:	d119      	bne.n	3486 <bt_recv+0x456>
    3452:	0020      	movs	r0, r4
    3454:	2207      	movs	r2, #7
    3456:	1d29      	adds	r1, r5, #4
    3458:	305b      	adds	r0, #91	; 0x5b
    345a:	f7fd ff83 	bl	1364 <memcpy>
    345e:	0020      	movs	r0, r4
    3460:	4eae      	ldr	r6, [pc, #696]	; (371c <bt_recv+0x6ec>)
    3462:	2207      	movs	r2, #7
    3464:	0031      	movs	r1, r6
    3466:	3062      	adds	r0, #98	; 0x62
    3468:	f7fd ff7c 	bl	1364 <memcpy>
		/* if the controller supports, lets advertise for another
		 * slave connection.
		 * check for connectable advertising state is sufficient as
		 * this is how this le connection complete for slave occurred.
		 */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    346c:	0030      	movs	r0, r6
    346e:	2106      	movs	r1, #6
    3470:	306c      	adds	r0, #108	; 0x6c
    3472:	f7fe fec3 	bl	21fc <atomic_test_bit>
    3476:	2800      	cmp	r0, #0
    3478:	d005      	beq.n	3486 <bt_recv+0x456>
    347a:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    347c:	065b      	lsls	r3, r3, #25
    347e:	d502      	bpl.n	3486 <bt_recv+0x456>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
			if (IS_ENABLED(CONFIG_BLUETOOTH_PRIVACY)) {
				le_set_private_addr();
			}

			set_advertise_enable(true);
    3480:	9806      	ldr	r0, [sp, #24]
    3482:	f7ff f85f 	bl	2544 <set_advertise_enable>
		}

	}

	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    3486:	2103      	movs	r1, #3
    3488:	0020      	movs	r0, r4
    348a:	f001 f9a9 	bl	47e0 <bt_conn_set_state>
	/*
	 * it is possible that connection was disconnected directly from
	 * connected callback so we must check state before doing connection
	 * parameters update
	 */
	if (conn->state != BT_CONN_CONNECTED) {
    348e:	0023      	movs	r3, r4
    3490:	3351      	adds	r3, #81	; 0x51
    3492:	781b      	ldrb	r3, [r3, #0]
    3494:	2b03      	cmp	r3, #3
    3496:	d13c      	bne.n	3512 <bt_recv+0x4e2>
		goto done;
	}

	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3498:	78eb      	ldrb	r3, [r5, #3]
    349a:	2b00      	cmp	r3, #0
    349c:	d004      	beq.n	34a8 <bt_recv+0x478>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    349e:	4b9f      	ldr	r3, [pc, #636]	; (371c <bt_recv+0x6ec>)
    34a0:	3370      	adds	r3, #112	; 0x70
	 */
	if (conn->state != BT_CONN_CONNECTED) {
		goto done;
	}

	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	071b      	lsls	r3, r3, #28
    34a6:	d512      	bpl.n	34ce <bt_recv+0x49e>
static int hci_le_read_remote_features(struct bt_conn *conn)
{
	struct bt_hci_cp_le_read_remote_features *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    34a8:	2102      	movs	r1, #2
    34aa:	48a3      	ldr	r0, [pc, #652]	; (3738 <bt_recv+0x708>)
    34ac:	f7fe ff68 	bl	2380 <bt_hci_cmd_create>
    34b0:	1e05      	subs	r5, r0, #0
				sizeof(*cp));
	if (!buf) {
    34b2:	d00c      	beq.n	34ce <bt_recv+0x49e>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    34b4:	2102      	movs	r1, #2
    34b6:	3008      	adds	r0, #8
    34b8:	f00f f924 	bl	12704 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    34bc:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    34be:	0029      	movs	r1, r5
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(conn->handle);
    34c0:	7003      	strb	r3, [r0, #0]
    34c2:	0a1b      	lsrs	r3, r3, #8
    34c4:	7043      	strb	r3, [r0, #1]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    34c6:	489c      	ldr	r0, [pc, #624]	; (3738 <bt_recv+0x708>)
    34c8:	f7ff fc34 	bl	2d34 <bt_hci_cmd_send>
    34cc:	e021      	b.n	3512 <bt_recv+0x4e2>
		if (!err) {
			goto done;
		}
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    34ce:	4b93      	ldr	r3, [pc, #588]	; (371c <bt_recv+0x6ec>)
    34d0:	001a      	movs	r2, r3
    34d2:	3271      	adds	r2, #113	; 0x71
    34d4:	7812      	ldrb	r2, [r2, #0]
    34d6:	001d      	movs	r5, r3
    34d8:	07d3      	lsls	r3, r2, #31
    34da:	d507      	bpl.n	34ec <bt_recv+0x4bc>
		err = hci_le_set_phy(conn);
    34dc:	0020      	movs	r0, r4
    34de:	f7ff fc67 	bl	2db0 <hci_le_set_phy.isra.26>
		if (!err) {
    34e2:	2800      	cmp	r0, #0
    34e4:	d102      	bne.n	34ec <bt_recv+0x4bc>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    34e6:	1d20      	adds	r0, r4, #4
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    34e8:	2180      	movs	r1, #128	; 0x80
    34ea:	e00c      	b.n	3506 <bt_recv+0x4d6>
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    34ec:	002b      	movs	r3, r5
    34ee:	3370      	adds	r3, #112	; 0x70
    34f0:	781b      	ldrb	r3, [r3, #0]
    34f2:	069b      	lsls	r3, r3, #26
    34f4:	d50a      	bpl.n	350c <bt_recv+0x4dc>
		err = hci_le_set_data_len(conn);
    34f6:	0020      	movs	r0, r4
    34f8:	f7ff fc7c 	bl	2df4 <hci_le_set_data_len.isra.27>
		if (!err) {
    34fc:	2800      	cmp	r0, #0
    34fe:	d105      	bne.n	350c <bt_recv+0x4dc>
    3500:	2180      	movs	r1, #128	; 0x80
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    3502:	1d20      	adds	r0, r4, #4
    3504:	0049      	lsls	r1, r1, #1
    3506:	f00f fbce 	bl	12ca6 <atomic_or>
    350a:	e002      	b.n	3512 <bt_recv+0x4e2>
			goto done;
		}
	}

	update_conn_param(conn);
    350c:	0020      	movs	r0, r4
    350e:	f7fe fe8f 	bl	2230 <update_conn_param>

done:
	bt_conn_unref(conn);
    3512:	0020      	movs	r0, r4
    3514:	f001 fa99 	bl	4a4a <bt_conn_unref>
	bt_le_scan_update(false);
    3518:	2000      	movs	r0, #0
    351a:	f7ff f8a7 	bl	266c <bt_le_scan_update>
    351e:	e615      	b.n	314c <bt_recv+0x11c>
    3520:	68bc      	ldr	r4, [r7, #8]
{
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
	struct bt_conn *conn;
	u16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
    3522:	78a3      	ldrb	r3, [r4, #2]
    3524:	7866      	ldrb	r6, [r4, #1]
    3526:	021b      	lsls	r3, r3, #8
    3528:	431e      	orrs	r6, r3

	BT_DBG("status %u, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
    352a:	0030      	movs	r0, r6
    352c:	f001 fa12 	bl	4954 <bt_conn_lookup_handle>
    3530:	1e05      	subs	r5, r0, #0
	if (!conn) {
    3532:	d106      	bne.n	3542 <bt_recv+0x512>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3534:	4b7a      	ldr	r3, [pc, #488]	; (3720 <bt_recv+0x6f0>)
    3536:	9601      	str	r6, [sp, #4]
    3538:	9302      	str	r3, [sp, #8]
    353a:	4b7c      	ldr	r3, [pc, #496]	; (372c <bt_recv+0x6fc>)
    353c:	9300      	str	r3, [sp, #0]
    353e:	4b7f      	ldr	r3, [pc, #508]	; (373c <bt_recv+0x70c>)
    3540:	e02b      	b.n	359a <bt_recv+0x56a>
		return;
	}

	if (!evt->status) {
    3542:	7823      	ldrb	r3, [r4, #0]
    3544:	2b00      	cmp	r3, #0
    3546:	d000      	beq.n	354a <bt_recv+0x51a>
    3548:	e23e      	b.n	39c8 <bt_recv+0x998>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    354a:	7923      	ldrb	r3, [r4, #4]
    354c:	78e2      	ldrb	r2, [r4, #3]
    354e:	021b      	lsls	r3, r3, #8
    3550:	4313      	orrs	r3, r2
    3552:	0002      	movs	r2, r0
    3554:	326a      	adds	r2, #106	; 0x6a
    3556:	8013      	strh	r3, [r2, #0]
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3558:	79a3      	ldrb	r3, [r4, #6]
    355a:	7962      	ldrb	r2, [r4, #5]
    355c:	021b      	lsls	r3, r3, #8
    355e:	4313      	orrs	r3, r2
    3560:	0002      	movs	r2, r0
    3562:	3270      	adds	r2, #112	; 0x70
    3564:	8013      	strh	r3, [r2, #0]
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3566:	7a23      	ldrb	r3, [r4, #8]
    3568:	79e2      	ldrb	r2, [r4, #7]
    356a:	021b      	lsls	r3, r3, #8
    356c:	4313      	orrs	r3, r2
    356e:	0002      	movs	r2, r0
    3570:	3272      	adds	r2, #114	; 0x72
    3572:	8013      	strh	r3, [r2, #0]
		notify_le_param_updated(conn);
    3574:	f000 feb0 	bl	42d8 <notify_le_param_updated>
    3578:	e226      	b.n	39c8 <bt_recv+0x998>
    357a:	68bd      	ldr	r5, [r7, #8]
}

static void le_remote_feat_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    357c:	78ab      	ldrb	r3, [r5, #2]
    357e:	786e      	ldrb	r6, [r5, #1]
    3580:	021b      	lsls	r3, r3, #8
    3582:	431e      	orrs	r6, r3
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    3584:	0030      	movs	r0, r6
    3586:	f001 f9e5 	bl	4954 <bt_conn_lookup_handle>
    358a:	1e04      	subs	r4, r0, #0
	if (!conn) {
    358c:	d109      	bne.n	35a2 <bt_recv+0x572>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    358e:	4b64      	ldr	r3, [pc, #400]	; (3720 <bt_recv+0x6f0>)
    3590:	9601      	str	r6, [sp, #4]
    3592:	9302      	str	r3, [sp, #8]
    3594:	4b65      	ldr	r3, [pc, #404]	; (372c <bt_recv+0x6fc>)
    3596:	9300      	str	r3, [sp, #0]
    3598:	4b69      	ldr	r3, [pc, #420]	; (3740 <bt_recv+0x710>)
    359a:	4a62      	ldr	r2, [pc, #392]	; (3724 <bt_recv+0x6f4>)
    359c:	4962      	ldr	r1, [pc, #392]	; (3728 <bt_recv+0x6f8>)
    359e:	4869      	ldr	r0, [pc, #420]	; (3744 <bt_recv+0x714>)
    35a0:	e624      	b.n	31ec <bt_recv+0x1bc>
		return;
	}

	if (!evt->status) {
    35a2:	782b      	ldrb	r3, [r5, #0]
    35a4:	2b00      	cmp	r3, #0
    35a6:	d104      	bne.n	35b2 <bt_recv+0x582>
		memcpy(conn->le.features, evt->features,
    35a8:	1ce9      	adds	r1, r5, #3
    35aa:	2208      	movs	r2, #8
    35ac:	3074      	adds	r0, #116	; 0x74
    35ae:	f7fd fed9 	bl	1364 <memcpy>
		       sizeof(conn->le.features));
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    35b2:	4b5a      	ldr	r3, [pc, #360]	; (371c <bt_recv+0x6ec>)
    35b4:	001a      	movs	r2, r3
    35b6:	3271      	adds	r2, #113	; 0x71
    35b8:	7811      	ldrb	r1, [r2, #0]
    35ba:	2201      	movs	r2, #1
    35bc:	001d      	movs	r5, r3
    35be:	4211      	tst	r1, r2
    35c0:	d00c      	beq.n	35dc <bt_recv+0x5ac>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    35c2:	0023      	movs	r3, r4
    35c4:	3375      	adds	r3, #117	; 0x75
	if (!evt->status) {
		memcpy(conn->le.features, evt->features,
		       sizeof(conn->le.features));
	}

	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    35c6:	781b      	ldrb	r3, [r3, #0]
    35c8:	4213      	tst	r3, r2
    35ca:	d007      	beq.n	35dc <bt_recv+0x5ac>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
		int err;

		err = hci_le_set_phy(conn);
    35cc:	0020      	movs	r0, r4
    35ce:	f7ff fbef 	bl	2db0 <hci_le_set_phy.isra.26>
		if (!err) {
    35d2:	2800      	cmp	r0, #0
    35d4:	d102      	bne.n	35dc <bt_recv+0x5ac>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    35d6:	1d20      	adds	r0, r4, #4
    35d8:	2180      	movs	r1, #128	; 0x80
    35da:	e015      	b.n	3608 <bt_recv+0x5d8>
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    35dc:	002b      	movs	r3, r5
    35de:	3370      	adds	r3, #112	; 0x70
    35e0:	781a      	ldrb	r2, [r3, #0]
    35e2:	2320      	movs	r3, #32
    35e4:	421a      	tst	r2, r3
    35e6:	d100      	bne.n	35ea <bt_recv+0x5ba>
    35e8:	e0d5      	b.n	3796 <bt_recv+0x766>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    35ea:	0022      	movs	r2, r4
    35ec:	3274      	adds	r2, #116	; 0x74
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
			goto done;
		}
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    35ee:	7812      	ldrb	r2, [r2, #0]
    35f0:	421a      	tst	r2, r3
    35f2:	d100      	bne.n	35f6 <bt_recv+0x5c6>
    35f4:	e0cf      	b.n	3796 <bt_recv+0x766>
	    BT_FEAT_LE_DLE(conn->le.features)) {
		int err;

		err = hci_le_set_data_len(conn);
    35f6:	0020      	movs	r0, r4
    35f8:	f7ff fbfc 	bl	2df4 <hci_le_set_data_len.isra.27>
		if (!err) {
    35fc:	2800      	cmp	r0, #0
    35fe:	d000      	beq.n	3602 <bt_recv+0x5d2>
    3600:	e0c9      	b.n	3796 <bt_recv+0x766>
    3602:	2180      	movs	r1, #128	; 0x80
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    3604:	1d20      	adds	r0, r4, #4
    3606:	0049      	lsls	r1, r1, #1
    3608:	f00f fb4d 	bl	12ca6 <atomic_or>
    360c:	e612      	b.n	3234 <bt_recv+0x204>
    360e:	68bb      	ldr	r3, [r7, #8]
	struct bt_conn *conn;
	u16_t handle;
	int err;

	handle = sys_le16_to_cpu(evt->handle);
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3610:	ac0c      	add	r4, sp, #48	; 0x30
	struct bt_le_conn_param param;
	struct bt_conn *conn;
	u16_t handle;
	int err;

	handle = sys_le16_to_cpu(evt->handle);
    3612:	785e      	ldrb	r6, [r3, #1]
    3614:	781a      	ldrb	r2, [r3, #0]
    3616:	0236      	lsls	r6, r6, #8
    3618:	4316      	orrs	r6, r2
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    361a:	78da      	ldrb	r2, [r3, #3]
    361c:	7899      	ldrb	r1, [r3, #2]
    361e:	0212      	lsls	r2, r2, #8
    3620:	430a      	orrs	r2, r1
    3622:	8022      	strh	r2, [r4, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    3624:	795a      	ldrb	r2, [r3, #5]
    3626:	7919      	ldrb	r1, [r3, #4]
    3628:	0212      	lsls	r2, r2, #8
    362a:	430a      	orrs	r2, r1
    362c:	8062      	strh	r2, [r4, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    362e:	79da      	ldrb	r2, [r3, #7]
    3630:	7999      	ldrb	r1, [r3, #6]
    3632:	0212      	lsls	r2, r2, #8
    3634:	430a      	orrs	r2, r1
    3636:	80a2      	strh	r2, [r4, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3638:	7a1a      	ldrb	r2, [r3, #8]
    363a:	7a5b      	ldrb	r3, [r3, #9]

	conn = bt_conn_lookup_handle(handle);
    363c:	0030      	movs	r0, r6

	handle = sys_le16_to_cpu(evt->handle);
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
	param.latency = sys_le16_to_cpu(evt->latency);
	param.timeout = sys_le16_to_cpu(evt->timeout);
    363e:	021b      	lsls	r3, r3, #8
    3640:	4313      	orrs	r3, r2
    3642:	80e3      	strh	r3, [r4, #6]

	conn = bt_conn_lookup_handle(handle);
    3644:	f001 f986 	bl	4954 <bt_conn_lookup_handle>
    3648:	9006      	str	r0, [sp, #24]
	if (!conn) {
    364a:	2800      	cmp	r0, #0
    364c:	d000      	beq.n	3650 <bt_recv+0x620>
    364e:	e5f3      	b.n	3238 <bt_recv+0x208>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    3650:	4b33      	ldr	r3, [pc, #204]	; (3720 <bt_recv+0x6f0>)
    3652:	9601      	str	r6, [sp, #4]
    3654:	9302      	str	r3, [sp, #8]
    3656:	4b35      	ldr	r3, [pc, #212]	; (372c <bt_recv+0x6fc>)
    3658:	4a32      	ldr	r2, [pc, #200]	; (3724 <bt_recv+0x6f4>)
    365a:	9300      	str	r3, [sp, #0]
    365c:	4932      	ldr	r1, [pc, #200]	; (3728 <bt_recv+0x6f8>)
    365e:	4b3a      	ldr	r3, [pc, #232]	; (3748 <bt_recv+0x718>)
    3660:	4838      	ldr	r0, [pc, #224]	; (3744 <bt_recv+0x714>)
    3662:	f7fe f881 	bl	1768 <printk>
		return le_conn_param_neg_reply(handle,
    3666:	2102      	movs	r1, #2
    3668:	0030      	movs	r0, r6
    366a:	f7ff fbf9 	bl	2e60 <le_conn_param_neg_reply>
    366e:	e56d      	b.n	314c <bt_recv+0x11c>
				   const struct bt_le_conn_param *param)
{
	struct bt_hci_cp_le_conn_param_req_reply *cp;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    3670:	210e      	movs	r1, #14
    3672:	4836      	ldr	r0, [pc, #216]	; (374c <bt_recv+0x71c>)
    3674:	f7fe fe84 	bl	2380 <bt_hci_cmd_create>
    3678:	9007      	str	r0, [sp, #28]
	if (!buf) {
    367a:	2800      	cmp	r0, #0
    367c:	d100      	bne.n	3680 <bt_recv+0x650>
    367e:	e5e6      	b.n	324e <bt_recv+0x21e>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3680:	210e      	movs	r1, #14
    3682:	3008      	adds	r0, #8
    3684:	f00f f83e 	bl	12704 <net_buf_simple_add>
    3688:	0005      	movs	r5, r0
	memset(cp, 0, sizeof(*cp));
    368a:	220e      	movs	r2, #14
    368c:	2100      	movs	r1, #0
    368e:	f7fd fe93 	bl	13b8 <memset>

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3692:	7823      	ldrb	r3, [r4, #0]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
    3694:	702e      	strb	r6, [r5, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    3696:	70ab      	strb	r3, [r5, #2]
    3698:	7863      	ldrb	r3, [r4, #1]
	}

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
    369a:	0a36      	lsrs	r6, r6, #8
    369c:	706e      	strb	r6, [r5, #1]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    369e:	70eb      	strb	r3, [r5, #3]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    36a0:	78a3      	ldrb	r3, [r4, #2]
	cp->latency = sys_cpu_to_le16(param->latency);
	cp->timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    36a2:	9907      	ldr	r1, [sp, #28]
	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    36a4:	712b      	strb	r3, [r5, #4]
    36a6:	78e3      	ldrb	r3, [r4, #3]
	cp->latency = sys_cpu_to_le16(param->latency);
	cp->timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    36a8:	4828      	ldr	r0, [pc, #160]	; (374c <bt_recv+0x71c>)
	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	cp->handle = sys_cpu_to_le16(handle);
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    36aa:	716b      	strb	r3, [r5, #5]
	cp->latency = sys_cpu_to_le16(param->latency);
    36ac:	7923      	ldrb	r3, [r4, #4]
    36ae:	71ab      	strb	r3, [r5, #6]
    36b0:	7963      	ldrb	r3, [r4, #5]
    36b2:	71eb      	strb	r3, [r5, #7]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    36b4:	79a3      	ldrb	r3, [r4, #6]
    36b6:	722b      	strb	r3, [r5, #8]
    36b8:	79e3      	ldrb	r3, [r4, #7]
    36ba:	726b      	strb	r3, [r5, #9]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    36bc:	f7ff fb3a 	bl	2d34 <bt_hci_cmd_send>
    36c0:	e5c5      	b.n	324e <bt_recv+0x21e>
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	u16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
	u16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
	u16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
	u16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
	u16_t handle = sys_le16_to_cpu(evt->handle);
    36c2:	68ba      	ldr	r2, [r7, #8]
    36c4:	7854      	ldrb	r4, [r2, #1]
    36c6:	7813      	ldrb	r3, [r2, #0]
    36c8:	0224      	lsls	r4, r4, #8
    36ca:	431c      	orrs	r4, r3
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    36cc:	0020      	movs	r0, r4
    36ce:	f001 f941 	bl	4954 <bt_conn_lookup_handle>
    36d2:	1e05      	subs	r5, r0, #0
	if (!conn) {
    36d4:	d106      	bne.n	36e4 <bt_recv+0x6b4>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    36d6:	4b12      	ldr	r3, [pc, #72]	; (3720 <bt_recv+0x6f0>)
    36d8:	9401      	str	r4, [sp, #4]
    36da:	9302      	str	r3, [sp, #8]
    36dc:	4b13      	ldr	r3, [pc, #76]	; (372c <bt_recv+0x6fc>)
    36de:	9300      	str	r3, [sp, #0]
    36e0:	4b1b      	ldr	r3, [pc, #108]	; (3750 <bt_recv+0x720>)
    36e2:	e75a      	b.n	359a <bt_recv+0x56a>
	}

	BT_DBG("max. tx: %u (%uus), max. rx: %u (%uus)", max_tx_octets,
	       max_tx_time, max_rx_octets, max_rx_time);

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    36e4:	3004      	adds	r0, #4
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    36e6:	491b      	ldr	r1, [pc, #108]	; (3754 <bt_recv+0x724>)
    36e8:	f00f fae8 	bl	12cbc <atomic_and>
    36ec:	05c3      	lsls	r3, r0, #23
    36ee:	d400      	bmi.n	36f2 <bt_recv+0x6c2>
    36f0:	e16a      	b.n	39c8 <bt_recv+0x998>
		goto done;
	}

	update_conn_param(conn);
    36f2:	0028      	movs	r0, r5
    36f4:	f7fe fd9c 	bl	2230 <update_conn_param>
    36f8:	e166      	b.n	39c8 <bt_recv+0x998>
}

static void le_phy_update_complete(struct net_buf *buf)
{
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
	u16_t handle = sys_le16_to_cpu(evt->handle);
    36fa:	68ba      	ldr	r2, [r7, #8]
    36fc:	7895      	ldrb	r5, [r2, #2]
    36fe:	7853      	ldrb	r3, [r2, #1]
    3700:	022d      	lsls	r5, r5, #8
    3702:	431d      	orrs	r5, r3
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    3704:	0028      	movs	r0, r5
    3706:	f001 f925 	bl	4954 <bt_conn_lookup_handle>
    370a:	1e04      	subs	r4, r0, #0
	if (!conn) {
    370c:	d126      	bne.n	375c <bt_recv+0x72c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    370e:	4b04      	ldr	r3, [pc, #16]	; (3720 <bt_recv+0x6f0>)
    3710:	9501      	str	r5, [sp, #4]
    3712:	9302      	str	r3, [sp, #8]
    3714:	4b05      	ldr	r3, [pc, #20]	; (372c <bt_recv+0x6fc>)
    3716:	9300      	str	r3, [sp, #0]
    3718:	4b0f      	ldr	r3, [pc, #60]	; (3758 <bt_recv+0x728>)
    371a:	e73e      	b.n	359a <bt_recv+0x56a>
    371c:	200002b0 	.word	0x200002b0
    3720:	000145b0 	.word	0x000145b0
    3724:	00014570 	.word	0x00014570
    3728:	00014577 	.word	0x00014577
    372c:	000145b5 	.word	0x000145b5
    3730:	0001499a 	.word	0x0001499a
    3734:	0001679c 	.word	0x0001679c
    3738:	00002016 	.word	0x00002016
    373c:	00016725 	.word	0x00016725
    3740:	00016805 	.word	0x00016805
    3744:	000149cf 	.word	0x000149cf
    3748:	0001677d 	.word	0x0001677d
    374c:	00002020 	.word	0x00002020
    3750:	00016851 	.word	0x00016851
    3754:	fffffeff 	.word	0xfffffeff
    3758:	00016864 	.word	0x00016864
    375c:	2181      	movs	r1, #129	; 0x81
	}

	BT_DBG("PHY updated: status: 0x%x, tx: %u, rx: %u",
	       evt->status, evt->tx_phy, evt->rx_phy);

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    375e:	1d05      	adds	r5, r0, #4
    3760:	4249      	negs	r1, r1
    3762:	0028      	movs	r0, r5
    3764:	f00f faaa 	bl	12cbc <atomic_and>
    3768:	0603      	lsls	r3, r0, #24
    376a:	d400      	bmi.n	376e <bt_recv+0x73e>
    376c:	e562      	b.n	3234 <bt_recv+0x204>
		goto done;
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    376e:	4bb1      	ldr	r3, [pc, #708]	; (3a34 <bt_recv+0xa04>)
    3770:	3370      	adds	r3, #112	; 0x70
    3772:	781a      	ldrb	r2, [r3, #0]
    3774:	2320      	movs	r3, #32
    3776:	421a      	tst	r2, r3
    3778:	d00d      	beq.n	3796 <bt_recv+0x766>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    377a:	0022      	movs	r2, r4
    377c:	3274      	adds	r2, #116	; 0x74

	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
		goto done;
	}

	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    377e:	7812      	ldrb	r2, [r2, #0]
    3780:	421a      	tst	r2, r3
    3782:	d008      	beq.n	3796 <bt_recv+0x766>
	    BT_FEAT_LE_DLE(conn->le.features)) {
		int err;

		err = hci_le_set_data_len(conn);
    3784:	0020      	movs	r0, r4
    3786:	f7ff fb35 	bl	2df4 <hci_le_set_data_len.isra.27>
		if (!err) {
    378a:	2800      	cmp	r0, #0
    378c:	d103      	bne.n	3796 <bt_recv+0x766>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    378e:	2180      	movs	r1, #128	; 0x80
    3790:	0028      	movs	r0, r5
    3792:	0049      	lsls	r1, r1, #1
    3794:	e738      	b.n	3608 <bt_recv+0x5d8>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
			goto done;
		}
	}

	update_conn_param(conn);
    3796:	0020      	movs	r0, r4
    3798:	f7fe fd4a 	bl	2230 <update_conn_param>
    379c:	e54a      	b.n	3234 <bt_recv+0x204>
    379e:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_cp_le_ltk_req_neg_reply *cp;
	struct bt_conn *conn;
	u16_t handle;
	u8_t tk[16];

	handle = sys_le16_to_cpu(evt->handle);
    37a0:	7863      	ldrb	r3, [r4, #1]
    37a2:	7826      	ldrb	r6, [r4, #0]
    37a4:	021b      	lsls	r3, r3, #8
    37a6:	431e      	orrs	r6, r3

	BT_DBG("handle %u", handle);

	conn = bt_conn_lookup_handle(handle);
    37a8:	0030      	movs	r0, r6
    37aa:	f001 f8d3 	bl	4954 <bt_conn_lookup_handle>
    37ae:	1e05      	subs	r5, r0, #0
	if (!conn) {
    37b0:	d106      	bne.n	37c0 <bt_recv+0x790>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    37b2:	4ba1      	ldr	r3, [pc, #644]	; (3a38 <bt_recv+0xa08>)
    37b4:	9601      	str	r6, [sp, #4]
    37b6:	9302      	str	r3, [sp, #8]
    37b8:	4ba0      	ldr	r3, [pc, #640]	; (3a3c <bt_recv+0xa0c>)
    37ba:	9300      	str	r3, [sp, #0]
    37bc:	4ba0      	ldr	r3, [pc, #640]	; (3a40 <bt_recv+0xa10>)
    37be:	e6ec      	b.n	359a <bt_recv+0x56a>
	 * if TK is present use it, that means pairing is in progress and
	 * we should use new TK for encryption
	 *
	 * Both legacy STK and LE SC LTK have rand and ediv equal to zero.
	 */
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    37c0:	78e2      	ldrb	r2, [r4, #3]
    37c2:	78a0      	ldrb	r0, [r4, #2]
    37c4:	7926      	ldrb	r6, [r4, #4]
    37c6:	0212      	lsls	r2, r2, #8
    37c8:	4302      	orrs	r2, r0
    37ca:	0436      	lsls	r6, r6, #16
    37cc:	0011      	movs	r1, r2
    37ce:	0032      	movs	r2, r6
    37d0:	7963      	ldrb	r3, [r4, #5]
    37d2:	430a      	orrs	r2, r1
    37d4:	061b      	lsls	r3, r3, #24
    37d6:	4313      	orrs	r3, r2
    37d8:	79e2      	ldrb	r2, [r4, #7]
    37da:	001e      	movs	r6, r3
    37dc:	79a0      	ldrb	r0, [r4, #6]
    37de:	7a23      	ldrb	r3, [r4, #8]
    37e0:	0212      	lsls	r2, r2, #8
    37e2:	4302      	orrs	r2, r0
    37e4:	041b      	lsls	r3, r3, #16
    37e6:	4313      	orrs	r3, r2
    37e8:	001a      	movs	r2, r3
    37ea:	7a63      	ldrb	r3, [r4, #9]
    37ec:	061b      	lsls	r3, r3, #24
    37ee:	4313      	orrs	r3, r2
    37f0:	4333      	orrs	r3, r6
    37f2:	d12c      	bne.n	384e <bt_recv+0x81e>
    37f4:	7ae3      	ldrb	r3, [r4, #11]
    37f6:	7aa2      	ldrb	r2, [r4, #10]
    37f8:	021b      	lsls	r3, r3, #8
    37fa:	4313      	orrs	r3, r2
    37fc:	d127      	bne.n	384e <bt_recv+0x81e>
    37fe:	a90c      	add	r1, sp, #48	; 0x30
    3800:	0028      	movs	r0, r5
    3802:	f004 ff97 	bl	8734 <bt_smp_get_tk>
    3806:	2800      	cmp	r0, #0
    3808:	d021      	beq.n	384e <bt_recv+0x81e>
		struct bt_hci_cp_le_ltk_req_reply *cp;

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    380a:	2112      	movs	r1, #18
    380c:	488d      	ldr	r0, [pc, #564]	; (3a44 <bt_recv+0xa14>)
    380e:	f7fe fdb7 	bl	2380 <bt_hci_cmd_create>
    3812:	1e06      	subs	r6, r0, #0
					sizeof(*cp));
		if (!buf) {
    3814:	d10a      	bne.n	382c <bt_recv+0x7fc>
			BT_ERR("Out of command buffers");
    3816:	4b88      	ldr	r3, [pc, #544]	; (3a38 <bt_recv+0xa08>)
    3818:	4a8b      	ldr	r2, [pc, #556]	; (3a48 <bt_recv+0xa18>)
    381a:	9301      	str	r3, [sp, #4]
    381c:	4b87      	ldr	r3, [pc, #540]	; (3a3c <bt_recv+0xa0c>)
    381e:	498b      	ldr	r1, [pc, #556]	; (3a4c <bt_recv+0xa1c>)
    3820:	9300      	str	r3, [sp, #0]
    3822:	488b      	ldr	r0, [pc, #556]	; (3a50 <bt_recv+0xa20>)
    3824:	4b86      	ldr	r3, [pc, #536]	; (3a40 <bt_recv+0xa10>)
    3826:	f7fd ff9f 	bl	1768 <printk>
    382a:	e0cd      	b.n	39c8 <bt_recv+0x998>
			goto done;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    382c:	2112      	movs	r1, #18
    382e:	3008      	adds	r0, #8
    3830:	f00e ff68 	bl	12704 <net_buf_simple_add>
		cp->handle = evt->handle;
    3834:	7863      	ldrb	r3, [r4, #1]
    3836:	7822      	ldrb	r2, [r4, #0]
    3838:	021b      	lsls	r3, r3, #8
    383a:	4313      	orrs	r3, r2
    383c:	7003      	strb	r3, [r0, #0]
    383e:	0a1b      	lsrs	r3, r3, #8
    3840:	7043      	strb	r3, [r0, #1]
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    3842:	2210      	movs	r2, #16
    3844:	a90c      	add	r1, sp, #48	; 0x30
    3846:	3002      	adds	r0, #2
    3848:	f7fd fd8c 	bl	1364 <memcpy>
    384c:	e0a3      	b.n	3996 <bt_recv+0x966>

		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
		goto done;
	}

	if (!conn->le.keys) {
    384e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    3850:	2b00      	cmp	r3, #0
    3852:	d000      	beq.n	3856 <bt_recv+0x826>
    3854:	e1e1      	b.n	3c1a <bt_recv+0xbea>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    3856:	002e      	movs	r6, r5
    3858:	3654      	adds	r6, #84	; 0x54
    385a:	0031      	movs	r1, r6
    385c:	2020      	movs	r0, #32
    385e:	f004 ffd1 	bl	8804 <bt_keys_find>
    3862:	67e8      	str	r0, [r5, #124]	; 0x7c
		if (!conn->le.keys) {
    3864:	2800      	cmp	r0, #0
    3866:	d000      	beq.n	386a <bt_recv+0x83a>
    3868:	e1d7      	b.n	3c1a <bt_recv+0xbea>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    386a:	0031      	movs	r1, r6
    386c:	3001      	adds	r0, #1
    386e:	f004 ffc9 	bl	8804 <bt_keys_find>
    3872:	67e8      	str	r0, [r5, #124]	; 0x7c
						     &conn->le.dst);
		}
	}

	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    3874:	2800      	cmp	r0, #0
    3876:	d100      	bne.n	387a <bt_recv+0x84a>
    3878:	e090      	b.n	399c <bt_recv+0x96c>
    387a:	8981      	ldrh	r1, [r0, #12]
    387c:	068b      	lsls	r3, r1, #26
    387e:	d540      	bpl.n	3902 <bt_recv+0x8d2>
	    evt->rand == 0 && evt->ediv == 0) {
    3880:	78e2      	ldrb	r2, [r4, #3]
    3882:	78a3      	ldrb	r3, [r4, #2]
    3884:	0212      	lsls	r2, r2, #8
    3886:	431a      	orrs	r2, r3
    3888:	7923      	ldrb	r3, [r4, #4]
    388a:	041b      	lsls	r3, r3, #16
    388c:	4313      	orrs	r3, r2
    388e:	001a      	movs	r2, r3
    3890:	7963      	ldrb	r3, [r4, #5]
    3892:	061b      	lsls	r3, r3, #24
    3894:	4313      	orrs	r3, r2
    3896:	79e2      	ldrb	r2, [r4, #7]
    3898:	469c      	mov	ip, r3
    389a:	79a3      	ldrb	r3, [r4, #6]
    389c:	0212      	lsls	r2, r2, #8
    389e:	431a      	orrs	r2, r3
    38a0:	7a23      	ldrb	r3, [r4, #8]
    38a2:	041b      	lsls	r3, r3, #16
    38a4:	4313      	orrs	r3, r2
    38a6:	001a      	movs	r2, r3
    38a8:	7a63      	ldrb	r3, [r4, #9]
    38aa:	061b      	lsls	r3, r3, #24
    38ac:	4313      	orrs	r3, r2
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
						     &conn->le.dst);
		}
	}

	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    38ae:	4662      	mov	r2, ip
    38b0:	4313      	orrs	r3, r2
    38b2:	d126      	bne.n	3902 <bt_recv+0x8d2>
	    evt->rand == 0 && evt->ediv == 0) {
    38b4:	7ae6      	ldrb	r6, [r4, #11]
    38b6:	7aa3      	ldrb	r3, [r4, #10]
    38b8:	0236      	lsls	r6, r6, #8
    38ba:	431e      	orrs	r6, r3
    38bc:	9606      	str	r6, [sp, #24]
    38be:	d120      	bne.n	3902 <bt_recv+0x8d2>
		struct bt_hci_cp_le_ltk_req_reply *cp;

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    38c0:	2112      	movs	r1, #18
    38c2:	4860      	ldr	r0, [pc, #384]	; (3a44 <bt_recv+0xa14>)
    38c4:	f7fe fd5c 	bl	2380 <bt_hci_cmd_create>
    38c8:	1e06      	subs	r6, r0, #0
					sizeof(*cp));
		if (!buf) {
    38ca:	d0a4      	beq.n	3816 <bt_recv+0x7e6>
			BT_ERR("Out of command buffers");
			goto done;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    38cc:	2112      	movs	r1, #18
    38ce:	3008      	adds	r0, #8
    38d0:	f00e ff18 	bl	12704 <net_buf_simple_add>
		cp->handle = evt->handle;
    38d4:	7863      	ldrb	r3, [r4, #1]
    38d6:	7822      	ldrb	r2, [r4, #0]
    38d8:	021b      	lsls	r3, r3, #8
    38da:	4313      	orrs	r3, r2
    38dc:	7003      	strb	r3, [r0, #0]
    38de:	0a1b      	lsrs	r3, r3, #8
    38e0:	7043      	strb	r3, [r0, #1]

		/* use only enc_size bytes of key for encryption */
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    38e2:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
    38e4:	1c84      	adds	r4, r0, #2
    38e6:	79ca      	ldrb	r2, [r1, #7]
    38e8:	0020      	movs	r0, r4
    38ea:	311a      	adds	r1, #26
    38ec:	f7fd fd3a 	bl	1364 <memcpy>
		       conn->le.keys->enc_size);
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    38f0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    38f2:	79d8      	ldrb	r0, [r3, #7]
    38f4:	280f      	cmp	r0, #15
    38f6:	d84e      	bhi.n	3996 <bt_recv+0x966>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    38f8:	2210      	movs	r2, #16
    38fa:	9906      	ldr	r1, [sp, #24]
    38fc:	1a12      	subs	r2, r2, r0
    38fe:	1820      	adds	r0, r4, r0
    3900:	e047      	b.n	3992 <bt_recv+0x962>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
		goto done;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    3902:	07cb      	lsls	r3, r1, #31
    3904:	d54a      	bpl.n	399c <bt_recv+0x96c>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    3906:	78e3      	ldrb	r3, [r4, #3]
    3908:	78a1      	ldrb	r1, [r4, #2]
    390a:	021b      	lsls	r3, r3, #8
    390c:	430b      	orrs	r3, r1
    390e:	001a      	movs	r2, r3
    3910:	7923      	ldrb	r3, [r4, #4]
    3912:	79a6      	ldrb	r6, [r4, #6]
    3914:	041b      	lsls	r3, r3, #16
    3916:	4313      	orrs	r3, r2
    3918:	7962      	ldrb	r2, [r4, #5]
    391a:	0612      	lsls	r2, r2, #24
    391c:	431a      	orrs	r2, r3
    391e:	4694      	mov	ip, r2
    3920:	79e2      	ldrb	r2, [r4, #7]
    3922:	7a23      	ldrb	r3, [r4, #8]
    3924:	0212      	lsls	r2, r2, #8
    3926:	4332      	orrs	r2, r6
    3928:	041b      	lsls	r3, r3, #16
    392a:	4313      	orrs	r3, r2
    392c:	001a      	movs	r2, r3
    392e:	7a63      	ldrb	r3, [r4, #9]
    3930:	061b      	lsls	r3, r3, #24
    3932:	4313      	orrs	r3, r2
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
		goto done;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    3934:	6c82      	ldr	r2, [r0, #72]	; 0x48
    3936:	4562      	cmp	r2, ip
    3938:	d130      	bne.n	399c <bt_recv+0x96c>
    393a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    393c:	429a      	cmp	r2, r3
    393e:	d12d      	bne.n	399c <bt_recv+0x96c>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    3940:	3050      	adds	r0, #80	; 0x50
    3942:	7ae3      	ldrb	r3, [r4, #11]
    3944:	7aa2      	ldrb	r2, [r4, #10]
		goto done;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    3946:	8801      	ldrh	r1, [r0, #0]
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    3948:	021b      	lsls	r3, r3, #8
		goto done;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    394a:	4313      	orrs	r3, r2
    394c:	4299      	cmp	r1, r3
    394e:	d125      	bne.n	399c <bt_recv+0x96c>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
		struct bt_hci_cp_le_ltk_req_reply *cp;
		struct net_buf *buf;

		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    3950:	2112      	movs	r1, #18
    3952:	483c      	ldr	r0, [pc, #240]	; (3a44 <bt_recv+0xa14>)
    3954:	f7fe fd14 	bl	2380 <bt_hci_cmd_create>
    3958:	1e06      	subs	r6, r0, #0
					sizeof(*cp));
		if (!buf) {
    395a:	d100      	bne.n	395e <bt_recv+0x92e>
    395c:	e75b      	b.n	3816 <bt_recv+0x7e6>
			BT_ERR("Out of command buffers");
			goto done;
		}

		cp = net_buf_add(buf, sizeof(*cp));
    395e:	2112      	movs	r1, #18
    3960:	3008      	adds	r0, #8
    3962:	f00e fecf 	bl	12704 <net_buf_simple_add>
		cp->handle = evt->handle;
    3966:	7863      	ldrb	r3, [r4, #1]
    3968:	7822      	ldrb	r2, [r4, #0]
    396a:	021b      	lsls	r3, r3, #8
    396c:	4313      	orrs	r3, r2
    396e:	7003      	strb	r3, [r0, #0]
    3970:	0a1b      	lsrs	r3, r3, #8
    3972:	7043      	strb	r3, [r0, #1]

		/* use only enc_size bytes of key for encryption */
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    3974:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
    3976:	1c84      	adds	r4, r0, #2
    3978:	79ca      	ldrb	r2, [r1, #7]
    397a:	0020      	movs	r0, r4
    397c:	3152      	adds	r1, #82	; 0x52
    397e:	f7fd fcf1 	bl	1364 <memcpy>
		       conn->le.keys->enc_size);
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    3982:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    3984:	79d8      	ldrb	r0, [r3, #7]
    3986:	280f      	cmp	r0, #15
    3988:	d805      	bhi.n	3996 <bt_recv+0x966>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    398a:	2210      	movs	r2, #16
    398c:	2100      	movs	r1, #0
    398e:	1a12      	subs	r2, r2, r0
    3990:	1820      	adds	r0, r4, r0
    3992:	f7fd fd11 	bl	13b8 <memset>
			       sizeof(cp->ltk) - conn->le.keys->enc_size);
		}

		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    3996:	0031      	movs	r1, r6
    3998:	482a      	ldr	r0, [pc, #168]	; (3a44 <bt_recv+0xa14>)
    399a:	e013      	b.n	39c4 <bt_recv+0x994>
		goto done;
	}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    399c:	2102      	movs	r1, #2
    399e:	482d      	ldr	r0, [pc, #180]	; (3a54 <bt_recv+0xa24>)
    39a0:	f7fe fcee 	bl	2380 <bt_hci_cmd_create>
    39a4:	1e06      	subs	r6, r0, #0
	if (!buf) {
    39a6:	d100      	bne.n	39aa <bt_recv+0x97a>
    39a8:	e735      	b.n	3816 <bt_recv+0x7e6>
		BT_ERR("Out of command buffers");
		goto done;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    39aa:	2102      	movs	r1, #2
    39ac:	3008      	adds	r0, #8
    39ae:	f00e fea9 	bl	12704 <net_buf_simple_add>
	cp->handle = evt->handle;

	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    39b2:	0031      	movs	r1, r6
		BT_ERR("Out of command buffers");
		goto done;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = evt->handle;
    39b4:	7863      	ldrb	r3, [r4, #1]
    39b6:	7822      	ldrb	r2, [r4, #0]
    39b8:	021b      	lsls	r3, r3, #8
    39ba:	4313      	orrs	r3, r2
    39bc:	7003      	strb	r3, [r0, #0]
    39be:	0a1b      	lsrs	r3, r3, #8
    39c0:	7043      	strb	r3, [r0, #1]

	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    39c2:	4824      	ldr	r0, [pc, #144]	; (3a54 <bt_recv+0xa24>)
    39c4:	f7ff f9b6 	bl	2d34 <bt_hci_cmd_send>

done:
	bt_conn_unref(conn);
    39c8:	0028      	movs	r0, r5
    39ca:	e441      	b.n	3250 <bt_recv+0x220>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    39cc:	2111      	movs	r1, #17
    39ce:	4d19      	ldr	r5, [pc, #100]	; (3a34 <bt_recv+0xa04>)
    39d0:	68bc      	ldr	r4, [r7, #8]
    39d2:	356c      	adds	r5, #108	; 0x6c
    39d4:	4249      	negs	r1, r1
    39d6:	0028      	movs	r0, r5
    39d8:	f00f f970 	bl	12cbc <atomic_and>

	BT_DBG("status: 0x%x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    39dc:	7823      	ldrb	r3, [r4, #0]
    39de:	2b00      	cmp	r3, #0
    39e0:	d108      	bne.n	39f4 <bt_recv+0x9c4>
		memcpy(pub_key, evt->key, 64);
    39e2:	1c61      	adds	r1, r4, #1
    39e4:	2240      	movs	r2, #64	; 0x40
    39e6:	481c      	ldr	r0, [pc, #112]	; (3a58 <bt_recv+0xa28>)
    39e8:	f7fd fcbc 	bl	1364 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    39ec:	2108      	movs	r1, #8
    39ee:	0028      	movs	r0, r5
    39f0:	f00f f959 	bl	12ca6 <atomic_or>
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    39f4:	4b19      	ldr	r3, [pc, #100]	; (3a5c <bt_recv+0xa2c>)
    39f6:	681d      	ldr	r5, [r3, #0]
    39f8:	2d00      	cmp	r5, #0
    39fa:	d101      	bne.n	3a00 <bt_recv+0x9d0>
    39fc:	f7ff fba6 	bl	314c <bt_recv+0x11c>
		cb->func(evt->status ? NULL : evt->key);
    3a00:	2000      	movs	r0, #0
    3a02:	7822      	ldrb	r2, [r4, #0]
    3a04:	682b      	ldr	r3, [r5, #0]
    3a06:	4282      	cmp	r2, r0
    3a08:	d100      	bne.n	3a0c <bt_recv+0x9dc>
    3a0a:	1c60      	adds	r0, r4, #1
    3a0c:	4798      	blx	r3
	if (!evt->status) {
		memcpy(pub_key, evt->key, 64);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3a0e:	686d      	ldr	r5, [r5, #4]
    3a10:	e7f2      	b.n	39f8 <bt_recv+0x9c8>
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    3a12:	4c13      	ldr	r4, [pc, #76]	; (3a60 <bt_recv+0xa30>)
    3a14:	68ba      	ldr	r2, [r7, #8]
    3a16:	6823      	ldr	r3, [r4, #0]
    3a18:	2b00      	cmp	r3, #0
    3a1a:	d101      	bne.n	3a20 <bt_recv+0x9f0>
    3a1c:	f7ff fb96 	bl	314c <bt_recv+0x11c>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3a20:	2000      	movs	r0, #0
    3a22:	7811      	ldrb	r1, [r2, #0]
    3a24:	4281      	cmp	r1, r0
    3a26:	d100      	bne.n	3a2a <bt_recv+0x9fa>
    3a28:	1c50      	adds	r0, r2, #1
    3a2a:	4798      	blx	r3
		dh_key_cb = NULL;
    3a2c:	2300      	movs	r3, #0
    3a2e:	6023      	str	r3, [r4, #0]
    3a30:	f7ff fb8c 	bl	314c <bt_recv+0x11c>
    3a34:	200002b0 	.word	0x200002b0
    3a38:	000145b0 	.word	0x000145b0
    3a3c:	000145b5 	.word	0x000145b5
    3a40:	00016707 	.word	0x00016707
    3a44:	0000201a 	.word	0x0000201a
    3a48:	00014570 	.word	0x00014570
    3a4c:	00014577 	.word	0x00014577
    3a50:	00014a03 	.word	0x00014a03
    3a54:	0000201b 	.word	0x0000201b
    3a58:	20000a4c 	.word	0x20000a4c
    3a5c:	20000a40 	.word	0x20000a40
    3a60:	20000a3c 	.word	0x20000a3c
	return 0;
}

static void le_adv_report(struct net_buf *buf)
{
	u8_t num_reports = net_buf_pull_u8(buf);
    3a64:	9806      	ldr	r0, [sp, #24]
    3a66:	f00e fe76 	bl	12756 <net_buf_simple_pull_u8>
    3a6a:	900a      	str	r0, [sp, #40]	; 0x28
	struct bt_hci_evt_le_advertising_info *info;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    3a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d101      	bne.n	3a76 <bt_recv+0xa46>
    3a72:	f7ff fb6b 	bl	314c <bt_recv+0x11c>
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
    3a76:	68bb      	ldr	r3, [r7, #8]
		net_buf_pull(buf, sizeof(*info));
    3a78:	2109      	movs	r1, #9
    3a7a:	9806      	ldr	r0, [sp, #24]

	while (num_reports--) {
		const bt_addr_le_t *addr;
		s8_t rssi;

		info = (void *)buf->data;
    3a7c:	9307      	str	r3, [sp, #28]
		net_buf_pull(buf, sizeof(*info));
    3a7e:	f00e fe62 	bl	12746 <net_buf_simple_pull>

		rssi = info->data[info->length];
    3a82:	9b07      	ldr	r3, [sp, #28]
    3a84:	9a07      	ldr	r2, [sp, #28]
    3a86:	7a1b      	ldrb	r3, [r3, #8]
    3a88:	18d3      	adds	r3, r2, r3
    3a8a:	7a5d      	ldrb	r5, [r3, #9]

		BT_DBG("%s event %u, len %u, rssi %d dBm",
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);
    3a8c:	0013      	movs	r3, r2
    3a8e:	3301      	adds	r3, #1
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    3a90:	0018      	movs	r0, r3

		BT_DBG("%s event %u, len %u, rssi %d dBm",
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);
    3a92:	9308      	str	r3, [sp, #32]
static const bt_addr_le_t *find_id_addr(const bt_addr_le_t *addr)
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
    3a94:	f004 feda 	bl	884c <bt_keys_find_irk>
			       bt_addr_le_str(addr));
			return &keys->addr;
		}
	}

	return addr;
    3a98:	9b08      	ldr	r3, [sp, #32]
    3a9a:	9309      	str	r3, [sp, #36]	; 0x24
{
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys;

		keys = bt_keys_find_irk(addr);
		if (keys) {
    3a9c:	2800      	cmp	r0, #0
    3a9e:	d000      	beq.n	3aa2 <bt_recv+0xa72>
			BT_DBG("Identity %s matched RPA %s",
			       bt_addr_le_str(&keys->addr),
			       bt_addr_le_str(addr));
			return &keys->addr;
    3aa0:	9009      	str	r0, [sp, #36]	; 0x24
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);

		if (scan_dev_found_cb) {
    3aa2:	4e60      	ldr	r6, [pc, #384]	; (3c24 <bt_recv+0xbf4>)
    3aa4:	6833      	ldr	r3, [r6, #0]
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d017      	beq.n	3ada <bt_recv+0xaaa>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3aaa:	9806      	ldr	r0, [sp, #24]
    3aac:	f00e fe66 	bl	1277c <net_buf_simple_headroom>
	state->len = buf->len;
    3ab0:	89bb      	ldrh	r3, [r7, #12]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3ab2:	0004      	movs	r4, r0
	state->len = buf->len;
    3ab4:	930b      	str	r3, [sp, #44]	; 0x2c
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    3ab6:	9b07      	ldr	r3, [sp, #28]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    3ab8:	b269      	sxtb	r1, r5
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    3aba:	7a1b      	ldrb	r3, [r3, #8]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    3abc:	6836      	ldr	r6, [r6, #0]
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    3abe:	81bb      	strh	r3, [r7, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    3ac0:	9b07      	ldr	r3, [sp, #28]
    3ac2:	9809      	ldr	r0, [sp, #36]	; 0x24
    3ac4:	781a      	ldrb	r2, [r3, #0]
    3ac6:	9b06      	ldr	r3, [sp, #24]
    3ac8:	47b0      	blx	r6
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3aca:	003b      	movs	r3, r7
    3acc:	b2a4      	uxth	r4, r4
    3ace:	3310      	adds	r3, #16
    3ad0:	191c      	adds	r4, r3, r4
	buf->len = state->len;
    3ad2:	466b      	mov	r3, sp
    3ad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3ad6:	60bc      	str	r4, [r7, #8]
	buf->len = state->len;
    3ad8:	81bb      	strh	r3, [r7, #12]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3ada:	4e53      	ldr	r6, [pc, #332]	; (3c28 <bt_recv+0xbf8>)

			net_buf_simple_restore(&buf->b, &state);
		}

#if defined(CONFIG_BLUETOOTH_CONN)
		check_pending_conn(addr, &info->addr, info->evt_type);
    3adc:	9b07      	ldr	r3, [sp, #28]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3ade:	0034      	movs	r4, r6
    3ae0:	346c      	adds	r4, #108	; 0x6c
    3ae2:	2108      	movs	r1, #8
    3ae4:	0020      	movs	r0, r4

			net_buf_simple_restore(&buf->b, &state);
		}

#if defined(CONFIG_BLUETOOTH_CONN)
		check_pending_conn(addr, &info->addr, info->evt_type);
    3ae6:	781d      	ldrb	r5, [r3, #0]
			       const bt_addr_le_t *addr, u8_t evtype)
{
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3ae8:	f7fe fb88 	bl	21fc <atomic_test_bit>
    3aec:	2800      	cmp	r0, #0
    3aee:	d177      	bne.n	3be0 <bt_recv+0xbb0>
		return;
	}

	/* Return if event is not connectable */
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3af0:	2d01      	cmp	r5, #1
    3af2:	d875      	bhi.n	3be0 <bt_recv+0xbb0>
		return;
	}

	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3af4:	2101      	movs	r1, #1
    3af6:	9809      	ldr	r0, [sp, #36]	; 0x24
    3af8:	f000 ff7c 	bl	49f4 <bt_conn_lookup_state_le>
    3afc:	1e05      	subs	r5, r0, #0
	if (!conn) {
    3afe:	d06f      	beq.n	3be0 <bt_recv+0xbb0>
		return;
	}

	if (bt_hci_stop_scanning()) {
    3b00:	f7fe fce0 	bl	24c4 <bt_hci_stop_scanning>
    3b04:	2800      	cmp	r0, #0
    3b06:	d15d      	bne.n	3bc4 <bt_recv+0xb94>
	} else {
		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3b08:	2102      	movs	r1, #2
    3b0a:	0020      	movs	r0, r4
    3b0c:	f7fe fb76 	bl	21fc <atomic_test_bit>
    3b10:	2800      	cmp	r0, #0
    3b12:	d002      	beq.n	3b1a <bt_recv+0xaea>
			set_random_address(&bt_dev.id_addr.a);
    3b14:	1c70      	adds	r0, r6, #1
    3b16:	f7fe fc95 	bl	2444 <set_random_address>
		}

		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3b1a:	002b      	movs	r3, r5
    3b1c:	335b      	adds	r3, #91	; 0x5b
    3b1e:	2207      	movs	r2, #7
    3b20:	4941      	ldr	r1, [pc, #260]	; (3c28 <bt_recv+0xbf8>)
    3b22:	0018      	movs	r0, r3
    3b24:	930b      	str	r3, [sp, #44]	; 0x2c
    3b26:	f7fd fc1d 	bl	1364 <memcpy>
	}

	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3b2a:	002b      	movs	r3, r5
    3b2c:	3362      	adds	r3, #98	; 0x62
    3b2e:	2207      	movs	r2, #7
    3b30:	9908      	ldr	r1, [sp, #32]
    3b32:	0018      	movs	r0, r3
    3b34:	9309      	str	r3, [sp, #36]	; 0x24
    3b36:	f7fd fc15 	bl	1364 <memcpy>
static int hci_le_create_conn(const struct bt_conn *conn)
{
	struct net_buf *buf;
	struct bt_hci_cp_le_create_conn *cp;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3b3a:	2119      	movs	r1, #25
    3b3c:	483b      	ldr	r0, [pc, #236]	; (3c2c <bt_recv+0xbfc>)
    3b3e:	f7fe fc1f 	bl	2380 <bt_hci_cmd_create>
    3b42:	1e06      	subs	r6, r0, #0
	if (!buf) {
    3b44:	d03e      	beq.n	3bc4 <bt_recv+0xb94>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3b46:	2119      	movs	r1, #25
    3b48:	3008      	adds	r0, #8
    3b4a:	f00e fddb 	bl	12704 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3b4e:	2219      	movs	r2, #25
    3b50:	2100      	movs	r1, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
	if (!buf) {
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3b52:	0004      	movs	r4, r0
	memset(cp, 0, sizeof(*cp));
    3b54:	f7fd fc30 	bl	13b8 <memset>

	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3b58:	2360      	movs	r3, #96	; 0x60
    3b5a:	2200      	movs	r2, #0
    3b5c:	7023      	strb	r3, [r4, #0]
	cp->scan_window = cp->scan_interval;
    3b5e:	70a3      	strb	r3, [r4, #2]
    3b60:	2300      	movs	r3, #0

	cp = net_buf_add(buf, sizeof(*cp));
	memset(cp, 0, sizeof(*cp));

	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3b62:	7062      	strb	r2, [r4, #1]
	cp->scan_window = cp->scan_interval;
    3b64:	70e3      	strb	r3, [r4, #3]
    3b66:	2207      	movs	r2, #7
    3b68:	9909      	ldr	r1, [sp, #36]	; 0x24

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3b6a:	1d60      	adds	r0, r4, #5
    3b6c:	f7fd fbfa 	bl	1364 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    3b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3b72:	2200      	movs	r2, #0
	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
    3b74:	781b      	ldrb	r3, [r3, #0]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3b76:	0031      	movs	r1, r6
	/* Interval == window for continuous scanning */
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
    3b78:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3b7a:	002b      	movs	r3, r5
    3b7c:	336c      	adds	r3, #108	; 0x6c
    3b7e:	881b      	ldrh	r3, [r3, #0]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3b80:	482a      	ldr	r0, [pc, #168]	; (3c2c <bt_recv+0xbfc>)
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
	cp->scan_window = cp->scan_interval;

	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
	cp->own_addr_type = conn->le.init_addr.type;
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3b82:	7363      	strb	r3, [r4, #13]
    3b84:	0a1b      	lsrs	r3, r3, #8
    3b86:	73a3      	strb	r3, [r4, #14]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3b88:	002b      	movs	r3, r5
    3b8a:	336e      	adds	r3, #110	; 0x6e
    3b8c:	881b      	ldrh	r3, [r3, #0]
    3b8e:	73e3      	strb	r3, [r4, #15]
    3b90:	0a1b      	lsrs	r3, r3, #8
    3b92:	7423      	strb	r3, [r4, #16]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3b94:	002b      	movs	r3, r5
    3b96:	3370      	adds	r3, #112	; 0x70
    3b98:	881b      	ldrh	r3, [r3, #0]
    3b9a:	7463      	strb	r3, [r4, #17]
    3b9c:	0a1b      	lsrs	r3, r3, #8
    3b9e:	74a3      	strb	r3, [r4, #18]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3ba0:	002b      	movs	r3, r5
    3ba2:	3372      	adds	r3, #114	; 0x72
    3ba4:	881b      	ldrh	r3, [r3, #0]
    3ba6:	74e3      	strb	r3, [r4, #19]
    3ba8:	0a1b      	lsrs	r3, r3, #8
    3baa:	7523      	strb	r3, [r4, #20]

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3bac:	f7fe fc0e 	bl	23cc <bt_hci_cmd_send_sync>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
	}

	bt_addr_le_copy(&conn->le.resp_addr, addr);

	if (hci_le_create_conn(conn)) {
    3bb0:	2800      	cmp	r0, #0
    3bb2:	d107      	bne.n	3bc4 <bt_recv+0xb94>
		goto failed;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3bb4:	0028      	movs	r0, r5
    3bb6:	2102      	movs	r1, #2
    3bb8:	f000 fe12 	bl	47e0 <bt_conn_set_state>
	bt_conn_unref(conn);
    3bbc:	0028      	movs	r0, r5
    3bbe:	f000 ff44 	bl	4a4a <bt_conn_unref>
    3bc2:	e00d      	b.n	3be0 <bt_recv+0xbb0>
	return;

failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3bc4:	002b      	movs	r3, r5
    3bc6:	221f      	movs	r2, #31
    3bc8:	3350      	adds	r3, #80	; 0x50
    3bca:	701a      	strb	r2, [r3, #0]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3bcc:	2100      	movs	r1, #0
    3bce:	0028      	movs	r0, r5
    3bd0:	f000 fe06 	bl	47e0 <bt_conn_set_state>
	bt_conn_unref(conn);
    3bd4:	0028      	movs	r0, r5
    3bd6:	f000 ff38 	bl	4a4a <bt_conn_unref>
	bt_le_scan_update(false);
    3bda:	2000      	movs	r0, #0
    3bdc:	f7fe fd46 	bl	266c <bt_le_scan_update>
#endif /* CONFIG_BLUETOOTH_CONN */

		/* Get next report iteration by moving pointer to right offset
		 * in buf according to spec 4.2, Vol 2, Part E, 7.7.65.2.
		 */
		net_buf_pull(buf, info->length + sizeof(rssi));
    3be0:	9b07      	ldr	r3, [sp, #28]
    3be2:	9806      	ldr	r0, [sp, #24]
    3be4:	7a19      	ldrb	r1, [r3, #8]
    3be6:	3101      	adds	r1, #1
    3be8:	f00e fdad 	bl	12746 <net_buf_simple_pull>
    3bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3bee:	3b01      	subs	r3, #1
    3bf0:	b2db      	uxtb	r3, r3
    3bf2:	930a      	str	r3, [sp, #40]	; 0x28
    3bf4:	e73a      	b.n	3a6c <bt_recv+0xa3c>
		break;
	case BT_HCI_EVT_LE_ADVERTISING_REPORT:
		le_adv_report(buf);
		break;
	default:
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3bf6:	89bd      	ldrh	r5, [r7, #12]
    3bf8:	68b8      	ldr	r0, [r7, #8]
    3bfa:	0029      	movs	r1, r5
    3bfc:	f7fe f9d0 	bl	1fa0 <bt_hex>
    3c00:	4b0b      	ldr	r3, [pc, #44]	; (3c30 <bt_recv+0xc00>)
    3c02:	9003      	str	r0, [sp, #12]
    3c04:	9304      	str	r3, [sp, #16]
    3c06:	4b0b      	ldr	r3, [pc, #44]	; (3c34 <bt_recv+0xc04>)
    3c08:	9502      	str	r5, [sp, #8]
    3c0a:	9300      	str	r3, [sp, #0]
    3c0c:	9401      	str	r4, [sp, #4]
    3c0e:	4b0a      	ldr	r3, [pc, #40]	; (3c38 <bt_recv+0xc08>)
    3c10:	4a0a      	ldr	r2, [pc, #40]	; (3c3c <bt_recv+0xc0c>)
    3c12:	490b      	ldr	r1, [pc, #44]	; (3c40 <bt_recv+0xc10>)
    3c14:	480b      	ldr	r0, [pc, #44]	; (3c44 <bt_recv+0xc14>)
    3c16:	f7ff fb69 	bl	32ec <bt_recv+0x2bc>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
						     &conn->le.dst);
		}
	}

	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    3c1a:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    3c1c:	e62d      	b.n	387a <bt_recv+0x84a>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    3c1e:	b011      	add	sp, #68	; 0x44
    3c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c22:	46c0      	nop			; (mov r8, r8)
    3c24:	20000a48 	.word	0x20000a48
    3c28:	200002b0 	.word	0x200002b0
    3c2c:	0000200d 	.word	0x0000200d
    3c30:	000145b0 	.word	0x000145b0
    3c34:	000145fb 	.word	0x000145fb
    3c38:	000168a3 	.word	0x000168a3
    3c3c:	000145bd 	.word	0x000145bd
    3c40:	00014577 	.word	0x00014577
    3c44:	00014a2a 	.word	0x00014a2a

00003c48 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    3c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c4a:	b089      	sub	sp, #36	; 0x24
    3c4c:	0004      	movs	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3c4e:	6885      	ldr	r5, [r0, #8]
    3c50:	f7fe fab4 	bl	21bc <net_buf_user_data>

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    3c54:	7803      	ldrb	r3, [r0, #0]
    3c56:	2b01      	cmp	r3, #1
    3c58:	d008      	beq.n	3c6c <bt_recv_prio+0x24>
    3c5a:	4b6d      	ldr	r3, [pc, #436]	; (3e10 <bt_recv_prio+0x1c8>)
    3c5c:	4a6d      	ldr	r2, [pc, #436]	; (3e14 <bt_recv_prio+0x1cc>)
    3c5e:	9301      	str	r3, [sp, #4]
    3c60:	4b6d      	ldr	r3, [pc, #436]	; (3e18 <bt_recv_prio+0x1d0>)
    3c62:	496e      	ldr	r1, [pc, #440]	; (3e1c <bt_recv_prio+0x1d4>)
    3c64:	9300      	str	r3, [sp, #0]
    3c66:	486e      	ldr	r0, [pc, #440]	; (3e20 <bt_recv_prio+0x1d8>)
    3c68:	4b6e      	ldr	r3, [pc, #440]	; (3e24 <bt_recv_prio+0x1dc>)
    3c6a:	e00a      	b.n	3c82 <bt_recv_prio+0x3a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3c6c:	89a2      	ldrh	r2, [r4, #12]
    3c6e:	2a01      	cmp	r2, #1
    3c70:	d80c      	bhi.n	3c8c <bt_recv_prio+0x44>
    3c72:	4b67      	ldr	r3, [pc, #412]	; (3e10 <bt_recv_prio+0x1c8>)
    3c74:	4a67      	ldr	r2, [pc, #412]	; (3e14 <bt_recv_prio+0x1cc>)
    3c76:	9301      	str	r3, [sp, #4]
    3c78:	4b67      	ldr	r3, [pc, #412]	; (3e18 <bt_recv_prio+0x1d0>)
    3c7a:	4968      	ldr	r1, [pc, #416]	; (3e1c <bt_recv_prio+0x1d4>)
    3c7c:	9300      	str	r3, [sp, #0]
    3c7e:	486a      	ldr	r0, [pc, #424]	; (3e28 <bt_recv_prio+0x1e0>)
    3c80:	4b68      	ldr	r3, [pc, #416]	; (3e24 <bt_recv_prio+0x1dc>)
    3c82:	f7fd fd71 	bl	1768 <printk>
    3c86:	b662      	cpsie	i
    3c88:	2004      	movs	r0, #4
    3c8a:	df02      	svc	2
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3c8c:	782a      	ldrb	r2, [r5, #0]
    3c8e:	2a13      	cmp	r2, #19
    3c90:	d804      	bhi.n	3c9c <bt_recv_prio+0x54>
    3c92:	4093      	lsls	r3, r2
    3c94:	228c      	movs	r2, #140	; 0x8c
    3c96:	0312      	lsls	r2, r2, #12
    3c98:	4213      	tst	r3, r2
    3c9a:	d108      	bne.n	3cae <bt_recv_prio+0x66>
    3c9c:	4b5c      	ldr	r3, [pc, #368]	; (3e10 <bt_recv_prio+0x1c8>)
    3c9e:	4a5d      	ldr	r2, [pc, #372]	; (3e14 <bt_recv_prio+0x1cc>)
    3ca0:	9301      	str	r3, [sp, #4]
    3ca2:	4b5d      	ldr	r3, [pc, #372]	; (3e18 <bt_recv_prio+0x1d0>)
    3ca4:	495d      	ldr	r1, [pc, #372]	; (3e1c <bt_recv_prio+0x1d4>)
    3ca6:	9300      	str	r3, [sp, #0]
    3ca8:	4860      	ldr	r0, [pc, #384]	; (3e2c <bt_recv_prio+0x1e4>)
    3caa:	4b5e      	ldr	r3, [pc, #376]	; (3e24 <bt_recv_prio+0x1dc>)
    3cac:	e7e9      	b.n	3c82 <bt_recv_prio+0x3a>

	net_buf_pull(buf, sizeof(*hdr));
    3cae:	0026      	movs	r6, r4
    3cb0:	3608      	adds	r6, #8
    3cb2:	2102      	movs	r1, #2
    3cb4:	0030      	movs	r0, r6
    3cb6:	f00e fd46 	bl	12746 <net_buf_simple_pull>

	switch (hdr->evt) {
    3cba:	782b      	ldrb	r3, [r5, #0]
    3cbc:	2b0f      	cmp	r3, #15
    3cbe:	d118      	bne.n	3cf2 <bt_recv_prio+0xaa>
	}
}

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3cc0:	68a5      	ldr	r5, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    3cc2:	2104      	movs	r1, #4
}

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3cc4:	78ef      	ldrb	r7, [r5, #3]
    3cc6:	78ab      	ldrb	r3, [r5, #2]
    3cc8:	023f      	lsls	r7, r7, #8
    3cca:	431f      	orrs	r7, r3
	u8_t ncmd = evt->ncmd;
    3ccc:	786b      	ldrb	r3, [r5, #1]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    3cce:	0030      	movs	r0, r6

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t ncmd = evt->ncmd;
    3cd0:	9304      	str	r3, [sp, #16]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    3cd2:	f00e fd38 	bl	12746 <net_buf_simple_pull>

	hci_cmd_done(opcode, evt->status, buf);
    3cd6:	7829      	ldrb	r1, [r5, #0]
    3cd8:	0022      	movs	r2, r4
    3cda:	0038      	movs	r0, r7
    3cdc:	f7fe faf2 	bl	22c4 <hci_cmd_done>

	/* Allow next command to be sent */
	if (ncmd) {
    3ce0:	9b04      	ldr	r3, [sp, #16]
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	d100      	bne.n	3ce8 <bt_recv_prio+0xa0>
    3ce6:	e08d      	b.n	3e04 <bt_recv_prio+0x1bc>

	hci_cmd_done(opcode, status, buf);

	/* Allow next command to be sent */
	if (ncmd) {
		k_sem_give(&bt_dev.ncmd_sem);
    3ce8:	4851      	ldr	r0, [pc, #324]	; (3e30 <bt_recv_prio+0x1e8>)
    3cea:	3098      	adds	r0, #152	; 0x98
    3cec:	f00f fe96 	bl	13a1c <k_sem_give>
    3cf0:	e088      	b.n	3e04 <bt_recv_prio+0x1bc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    3cf2:	2b13      	cmp	r3, #19
    3cf4:	d157      	bne.n	3da6 <bt_recv_prio+0x15e>
    3cf6:	68a3      	ldr	r3, [r4, #8]
    3cf8:	9305      	str	r3, [sp, #20]
}

static void hci_num_completed_packets(struct net_buf *buf)
{
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
	u16_t i, num_handles = sys_le16_to_cpu(evt->num_handles);
    3cfa:	781b      	ldrb	r3, [r3, #0]
    3cfc:	9306      	str	r3, [sp, #24]
    3cfe:	2300      	movs	r3, #0
    3d00:	9304      	str	r3, [sp, #16]

	BT_DBG("num_handles %u", num_handles);

	for (i = 0; i < num_handles; i++) {
    3d02:	466b      	mov	r3, sp
    3d04:	9a06      	ldr	r2, [sp, #24]
    3d06:	8a1b      	ldrh	r3, [r3, #16]
    3d08:	4293      	cmp	r3, r2
    3d0a:	d300      	bcc.n	3d0e <bt_recv_prio+0xc6>
    3d0c:	e07a      	b.n	3e04 <bt_recv_prio+0x1bc>
    3d0e:	9b04      	ldr	r3, [sp, #16]
    3d10:	9a05      	ldr	r2, [sp, #20]
    3d12:	009b      	lsls	r3, r3, #2
    3d14:	18d3      	adds	r3, r2, r3
		u16_t handle, count;
		struct bt_conn *conn;
		unsigned int key;

		handle = sys_le16_to_cpu(evt->h[i].handle);
    3d16:	789f      	ldrb	r7, [r3, #2]
    3d18:	785a      	ldrb	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    3d1a:	791d      	ldrb	r5, [r3, #4]
	for (i = 0; i < num_handles; i++) {
		u16_t handle, count;
		struct bt_conn *conn;
		unsigned int key;

		handle = sys_le16_to_cpu(evt->h[i].handle);
    3d1c:	023f      	lsls	r7, r7, #8
    3d1e:	4317      	orrs	r7, r2
		count = sys_le16_to_cpu(evt->h[i].count);
    3d20:	78da      	ldrb	r2, [r3, #3]
    3d22:	022d      	lsls	r5, r5, #8
    3d24:	4315      	orrs	r5, r2
    3d26:	9507      	str	r5, [sp, #28]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    3d28:	f3ef 8510 	mrs	r5, PRIMASK
    3d2c:	b672      	cpsid	i

		BT_DBG("handle %u count %u", handle, count);

		key = irq_lock();

		conn = bt_conn_lookup_handle(handle);
    3d2e:	0038      	movs	r0, r7
    3d30:	f000 fe10 	bl	4954 <bt_conn_lookup_handle>
    3d34:	1e06      	subs	r6, r0, #0
		if (!conn) {
    3d36:	d10e      	bne.n	3d56 <bt_recv_prio+0x10e>
			BT_ERR("No connection for handle %u", handle);
    3d38:	4b35      	ldr	r3, [pc, #212]	; (3e10 <bt_recv_prio+0x1c8>)
    3d3a:	9701      	str	r7, [sp, #4]
    3d3c:	9302      	str	r3, [sp, #8]
    3d3e:	4b36      	ldr	r3, [pc, #216]	; (3e18 <bt_recv_prio+0x1d0>)
    3d40:	4a34      	ldr	r2, [pc, #208]	; (3e14 <bt_recv_prio+0x1cc>)
    3d42:	9300      	str	r3, [sp, #0]
    3d44:	4935      	ldr	r1, [pc, #212]	; (3e1c <bt_recv_prio+0x1d4>)
    3d46:	4b3b      	ldr	r3, [pc, #236]	; (3e34 <bt_recv_prio+0x1ec>)
    3d48:	483b      	ldr	r0, [pc, #236]	; (3e38 <bt_recv_prio+0x1f0>)
    3d4a:	f7fd fd0d 	bl	1768 <printk>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3d4e:	2d00      	cmp	r5, #0
    3d50:	d126      	bne.n	3da0 <bt_recv_prio+0x158>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    3d52:	b662      	cpsie	i
    3d54:	e024      	b.n	3da0 <bt_recv_prio+0x158>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3d56:	2d00      	cmp	r5, #0
    3d58:	d100      	bne.n	3d5c <bt_recv_prio+0x114>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    3d5a:	b662      	cpsie	i
		return -EINVAL;
	}
}

int bt_recv_prio(struct net_buf *buf)
{
    3d5c:	9d07      	ldr	r5, [sp, #28]
			continue;
		}

		irq_unlock(key);

		while (count--) {
    3d5e:	2d00      	cmp	r5, #0
    3d60:	d01b      	beq.n	3d9a <bt_recv_prio+0x152>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    3d62:	f3ef 8310 	mrs	r3, PRIMASK
    3d66:	b672      	cpsid	i
    3d68:	6971      	ldr	r1, [r6, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    3d6a:	2900      	cmp	r1, #0
    3d6c:	d006      	beq.n	3d7c <bt_recv_prio+0x134>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    3d6e:	680a      	ldr	r2, [r1, #0]
	if (list->tail == node) {
    3d70:	69b0      	ldr	r0, [r6, #24]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    3d72:	6172      	str	r2, [r6, #20]
	if (list->tail == node) {
    3d74:	4281      	cmp	r1, r0
    3d76:	d137      	bne.n	3de8 <bt_recv_prio+0x1a0>
		list->tail = list->head;
    3d78:	61b2      	str	r2, [r6, #24]
    3d7a:	e035      	b.n	3de8 <bt_recv_prio+0x1a0>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	d102      	bne.n	3d86 <bt_recv_prio+0x13e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    3d80:	b662      	cpsie	i

			key = irq_lock();
			node = sys_slist_get(&conn->tx_pending);
			irq_unlock(key);

			if (!node) {
    3d82:	2900      	cmp	r1, #0
    3d84:	d132      	bne.n	3dec <bt_recv_prio+0x1a4>
				BT_ERR("packets count mismatch");
    3d86:	4b22      	ldr	r3, [pc, #136]	; (3e10 <bt_recv_prio+0x1c8>)
    3d88:	4a22      	ldr	r2, [pc, #136]	; (3e14 <bt_recv_prio+0x1cc>)
    3d8a:	9301      	str	r3, [sp, #4]
    3d8c:	4b22      	ldr	r3, [pc, #136]	; (3e18 <bt_recv_prio+0x1d0>)
    3d8e:	4923      	ldr	r1, [pc, #140]	; (3e1c <bt_recv_prio+0x1d4>)
    3d90:	9300      	str	r3, [sp, #0]
    3d92:	482a      	ldr	r0, [pc, #168]	; (3e3c <bt_recv_prio+0x1f4>)
    3d94:	4b27      	ldr	r3, [pc, #156]	; (3e34 <bt_recv_prio+0x1ec>)
    3d96:	f7fd fce7 	bl	1768 <printk>

			k_fifo_put(&conn->tx_notify, node);
			k_sem_give(bt_conn_get_pkts(conn));
		}

		bt_conn_unref(conn);
    3d9a:	0030      	movs	r0, r6
    3d9c:	f000 fe55 	bl	4a4a <bt_conn_unref>
    3da0:	9b04      	ldr	r3, [sp, #16]
    3da2:	3301      	adds	r3, #1
    3da4:	e7ac      	b.n	3d00 <bt_recv_prio+0xb8>
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));

	switch (hdr->evt) {
    3da6:	2b0e      	cmp	r3, #14
    3da8:	d112      	bne.n	3dd0 <bt_recv_prio+0x188>
	}
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3daa:	68a3      	ldr	r3, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
	u8_t status, ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    3dac:	2103      	movs	r1, #3
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3dae:	789d      	ldrb	r5, [r3, #2]
    3db0:	785a      	ldrb	r2, [r3, #1]
    3db2:	022d      	lsls	r5, r5, #8
	u8_t status, ncmd = evt->ncmd;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    3db4:	0030      	movs	r0, r6
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3db6:	4315      	orrs	r5, r2
	u8_t status, ncmd = evt->ncmd;
    3db8:	781f      	ldrb	r7, [r3, #0]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    3dba:	f00e fcc4 	bl	12746 <net_buf_simple_pull>
	/* All command return parameters have a 1-byte status in the
	 * beginning, so we can safely make this generalization.
	 */
	status = buf->data[0];

	hci_cmd_done(opcode, status, buf);
    3dbe:	68a3      	ldr	r3, [r4, #8]
    3dc0:	0022      	movs	r2, r4
    3dc2:	7819      	ldrb	r1, [r3, #0]
    3dc4:	0028      	movs	r0, r5
    3dc6:	f7fe fa7d 	bl	22c4 <hci_cmd_done>

	/* Allow next command to be sent */
	if (ncmd) {
    3dca:	2f00      	cmp	r7, #0
    3dcc:	d01a      	beq.n	3e04 <bt_recv_prio+0x1bc>
    3dce:	e78b      	b.n	3ce8 <bt_recv_prio+0xa0>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		hci_num_completed_packets(buf);
		break;
#endif /* CONFIG_BLUETOOTH_CONN */
	default:
		net_buf_unref(buf);
    3dd0:	0020      	movs	r0, r4
    3dd2:	f00e fc75 	bl	126c0 <net_buf_unref>
		BT_ASSERT(0);
    3dd6:	4b0e      	ldr	r3, [pc, #56]	; (3e10 <bt_recv_prio+0x1c8>)
    3dd8:	4a0e      	ldr	r2, [pc, #56]	; (3e14 <bt_recv_prio+0x1cc>)
    3dda:	9301      	str	r3, [sp, #4]
    3ddc:	4b0e      	ldr	r3, [pc, #56]	; (3e18 <bt_recv_prio+0x1d0>)
    3dde:	490f      	ldr	r1, [pc, #60]	; (3e1c <bt_recv_prio+0x1d4>)
    3de0:	9300      	str	r3, [sp, #0]
    3de2:	4817      	ldr	r0, [pc, #92]	; (3e40 <bt_recv_prio+0x1f8>)
    3de4:	4b0f      	ldr	r3, [pc, #60]	; (3e24 <bt_recv_prio+0x1dc>)
    3de6:	e74c      	b.n	3c82 <bt_recv_prio+0x3a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    3de8:	2b00      	cmp	r3, #0
    3dea:	d0c9      	beq.n	3d80 <bt_recv_prio+0x138>
			if (!node) {
				BT_ERR("packets count mismatch");
				break;
			}

			k_fifo_put(&conn->tx_notify, node);
    3dec:	0030      	movs	r0, r6
    3dee:	301c      	adds	r0, #28
    3df0:	f00f fba6 	bl	13540 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    3df4:	0030      	movs	r0, r6
    3df6:	f000 fa6b 	bl	42d0 <bt_conn_get_pkts>
    3dfa:	3d01      	subs	r5, #1
    3dfc:	f00f fe0e 	bl	13a1c <k_sem_give>
    3e00:	b2ad      	uxth	r5, r5
    3e02:	e7ac      	b.n	3d5e <bt_recv_prio+0x116>
		net_buf_unref(buf);
		BT_ASSERT(0);
		return -EINVAL;
	}

	net_buf_unref(buf);
    3e04:	0020      	movs	r0, r4
    3e06:	f00e fc5b 	bl	126c0 <net_buf_unref>

	return 0;
}
    3e0a:	2000      	movs	r0, #0
    3e0c:	b009      	add	sp, #36	; 0x24
    3e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e10:	000145b0 	.word	0x000145b0
    3e14:	00014570 	.word	0x00014570
    3e18:	000145b5 	.word	0x000145b5
    3e1c:	00014577 	.word	0x00014577
    3e20:	00014af4 	.word	0x00014af4
    3e24:	00016770 	.word	0x00016770
    3e28:	00014b38 	.word	0x00014b38
    3e2c:	00014be8 	.word	0x00014be8
    3e30:	200002b0 	.word	0x200002b0
    3e34:	000167d6 	.word	0x000167d6
    3e38:	00014b72 	.word	0x00014b72
    3e3c:	00014b9e 	.word	0x00014b9e
    3e40:	00014bc5 	.word	0x00014bc5

00003e44 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    3e44:	4a09      	ldr	r2, [pc, #36]	; (3e6c <bt_hci_driver_register+0x28>)
    3e46:	32d8      	adds	r2, #216	; 0xd8
    3e48:	6813      	ldr	r3, [r2, #0]
    3e4a:	2b00      	cmp	r3, #0
    3e4c:	d108      	bne.n	3e60 <bt_hci_driver_register+0x1c>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    3e4e:	6881      	ldr	r1, [r0, #8]
    3e50:	2900      	cmp	r1, #0
    3e52:	d007      	beq.n	3e64 <bt_hci_driver_register+0x20>
    3e54:	68c1      	ldr	r1, [r0, #12]
    3e56:	2900      	cmp	r1, #0
    3e58:	d004      	beq.n	3e64 <bt_hci_driver_register+0x20>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    3e5a:	6010      	str	r0, [r2, #0]
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    3e5c:	0018      	movs	r0, r3
    3e5e:	e003      	b.n	3e68 <bt_hci_driver_register+0x24>
}

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
		return -EALREADY;
    3e60:	2045      	movs	r0, #69	; 0x45
    3e62:	e000      	b.n	3e66 <bt_hci_driver_register+0x22>
	}

	if (!drv->open || !drv->send) {
		return -EINVAL;
    3e64:	2016      	movs	r0, #22
    3e66:	4240      	negs	r0, r0

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
}
    3e68:	4770      	bx	lr
    3e6a:	46c0      	nop			; (mov r8, r8)
    3e6c:	200002b0 	.word	0x200002b0

00003e70 <bt_enable>:
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3e70:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
    3e72:	4d2d      	ldr	r5, [pc, #180]	; (3f28 <bt_enable+0xb8>)
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3e74:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
    3e76:	002e      	movs	r6, r5
    3e78:	36d8      	adds	r6, #216	; 0xd8
    3e7a:	6833      	ldr	r3, [r6, #0]
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    3e7c:	9007      	str	r0, [sp, #28]
	int err;

	if (!bt_dev.drv) {
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d10b      	bne.n	3e9a <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    3e82:	4b2a      	ldr	r3, [pc, #168]	; (3f2c <bt_enable+0xbc>)
    3e84:	4a2a      	ldr	r2, [pc, #168]	; (3f30 <bt_enable+0xc0>)
    3e86:	9301      	str	r3, [sp, #4]
    3e88:	4b2a      	ldr	r3, [pc, #168]	; (3f34 <bt_enable+0xc4>)
    3e8a:	492b      	ldr	r1, [pc, #172]	; (3f38 <bt_enable+0xc8>)
    3e8c:	9300      	str	r3, [sp, #0]
    3e8e:	482b      	ldr	r0, [pc, #172]	; (3f3c <bt_enable+0xcc>)
    3e90:	4b2b      	ldr	r3, [pc, #172]	; (3f40 <bt_enable+0xd0>)
    3e92:	f7fd fc69 	bl	1768 <printk>
		return -ENODEV;
    3e96:	2413      	movs	r4, #19
    3e98:	e041      	b.n	3f1e <bt_enable+0xae>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3e9a:	0028      	movs	r0, r5
    3e9c:	2101      	movs	r1, #1
    3e9e:	306c      	adds	r0, #108	; 0x6c
    3ea0:	f00e ff01 	bl	12ca6 <atomic_or>

	return (old & mask) != 0;
    3ea4:	2701      	movs	r7, #1
    3ea6:	4038      	ands	r0, r7
    3ea8:	1e04      	subs	r4, r0, #0
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3eaa:	d137      	bne.n	3f1c <bt_enable+0xac>
		return -EALREADY;
	}

	ready_cb = cb;
    3eac:	4b25      	ldr	r3, [pc, #148]	; (3f44 <bt_enable+0xd4>)
    3eae:	9a07      	ldr	r2, [sp, #28]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    3eb0:	4925      	ldr	r1, [pc, #148]	; (3f48 <bt_enable+0xd8>)

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
	}

	ready_cb = cb;
    3eb2:	601a      	str	r2, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
    3eb4:	2309      	movs	r3, #9
    3eb6:	22eb      	movs	r2, #235	; 0xeb
    3eb8:	425b      	negs	r3, r3
    3eba:	9005      	str	r0, [sp, #20]
    3ebc:	9004      	str	r0, [sp, #16]
    3ebe:	9303      	str	r3, [sp, #12]
    3ec0:	9002      	str	r0, [sp, #8]
    3ec2:	9001      	str	r0, [sp, #4]
    3ec4:	9000      	str	r0, [sp, #0]
    3ec6:	4b21      	ldr	r3, [pc, #132]	; (3f4c <bt_enable+0xdc>)
    3ec8:	0092      	lsls	r2, r2, #2
    3eca:	4821      	ldr	r0, [pc, #132]	; (3f50 <bt_enable+0xe0>)
    3ecc:	f00f ff98 	bl	13e00 <k_thread_create>

	if (IS_ENABLED(CONFIG_BLUETOOTH_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    3ed0:	6833      	ldr	r3, [r6, #0]
    3ed2:	689b      	ldr	r3, [r3, #8]
    3ed4:	4798      	blx	r3
    3ed6:	1e06      	subs	r6, r0, #0
	if (err) {
    3ed8:	d00c      	beq.n	3ef4 <bt_enable+0x84>
		BT_ERR("HCI driver open failed (%d)", err);
    3eda:	4b14      	ldr	r3, [pc, #80]	; (3f2c <bt_enable+0xbc>)
    3edc:	9001      	str	r0, [sp, #4]
    3ede:	9302      	str	r3, [sp, #8]
    3ee0:	4b14      	ldr	r3, [pc, #80]	; (3f34 <bt_enable+0xc4>)
    3ee2:	4a13      	ldr	r2, [pc, #76]	; (3f30 <bt_enable+0xc0>)
    3ee4:	9300      	str	r3, [sp, #0]
    3ee6:	4914      	ldr	r1, [pc, #80]	; (3f38 <bt_enable+0xc8>)
    3ee8:	4b15      	ldr	r3, [pc, #84]	; (3f40 <bt_enable+0xd0>)
    3eea:	481a      	ldr	r0, [pc, #104]	; (3f54 <bt_enable+0xe4>)
    3eec:	f7fd fc3c 	bl	1768 <printk>
		return err;
    3ef0:	0034      	movs	r4, r6
    3ef2:	e015      	b.n	3f20 <bt_enable+0xb0>
	}

	if (!cb) {
    3ef4:	9b07      	ldr	r3, [sp, #28]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d103      	bne.n	3f02 <bt_enable+0x92>
		return bt_init();
    3efa:	f7fe fbdd 	bl	26b8 <bt_init>
    3efe:	0004      	movs	r4, r0
    3f00:	e00e      	b.n	3f20 <bt_enable+0xb0>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3f02:	0028      	movs	r0, r5
    3f04:	0039      	movs	r1, r7
    3f06:	3068      	adds	r0, #104	; 0x68
    3f08:	f00e fecd 	bl	12ca6 <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3f0c:	4238      	tst	r0, r7
    3f0e:	d107      	bne.n	3f20 <bt_enable+0xb0>
		k_fifo_put(&work_q->fifo, work);
    3f10:	0029      	movs	r1, r5
    3f12:	4811      	ldr	r0, [pc, #68]	; (3f58 <bt_enable+0xe8>)
    3f14:	3160      	adds	r1, #96	; 0x60
    3f16:	f00f fb13 	bl	13540 <k_queue_append>
    3f1a:	e001      	b.n	3f20 <bt_enable+0xb0>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
    3f1c:	2445      	movs	r4, #69	; 0x45
    3f1e:	4264      	negs	r4, r4
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    3f20:	0020      	movs	r0, r4
    3f22:	b009      	add	sp, #36	; 0x24
    3f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	200002b0 	.word	0x200002b0
    3f2c:	000145b0 	.word	0x000145b0
    3f30:	00014570 	.word	0x00014570
    3f34:	000145b5 	.word	0x000145b5
    3f38:	00014577 	.word	0x00014577
    3f3c:	00014c26 	.word	0x00014c26
    3f40:	00016766 	.word	0x00016766
    3f44:	20000a44 	.word	0x20000a44
    3f48:	20002788 	.word	0x20002788
    3f4c:	00002e99 	.word	0x00002e99
    3f50:	20000a8c 	.word	0x20000a8c
    3f54:	00014c4f 	.word	0x00014c4f
    3f58:	20002000 	.word	0x20002000

00003f5c <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(const bt_addr_le_t *addr)
{
    3f5c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(addr);
    3f5e:	f004 fca7 	bl	88b0 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
    3f62:	1e03      	subs	r3, r0, #0
    3f64:	d002      	beq.n	3f6c <bt_addr_le_is_bonded+0x10>
    3f66:	8983      	ldrh	r3, [r0, #12]
    3f68:	1e58      	subs	r0, r3, #1
    3f6a:	4183      	sbcs	r3, r0
    3f6c:	2001      	movs	r0, #1
	} else {
		return false;
	}
}
    3f6e:	4018      	ands	r0, r3
    3f70:	bd10      	pop	{r4, pc}
	...

00003f74 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    3f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f76:	0017      	movs	r7, r2
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3f78:	7802      	ldrb	r2, [r0, #0]
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    3f7a:	9301      	str	r3, [sp, #4]
    3f7c:	0004      	movs	r4, r0
    3f7e:	000d      	movs	r5, r1
    3f80:	8843      	ldrh	r3, [r0, #2]
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3f82:	07d2      	lsls	r2, r2, #31
    3f84:	d407      	bmi.n	3f96 <bt_le_adv_start+0x22>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3f86:	4a46      	ldr	r2, [pc, #280]	; (40a0 <bt_le_adv_start+0x12c>)
    3f88:	7b92      	ldrb	r2, [r2, #14]
    3f8a:	2a08      	cmp	r2, #8
    3f8c:	d803      	bhi.n	3f96 <bt_le_adv_start+0x22>
    3f8e:	2b9f      	cmp	r3, #159	; 0x9f
    3f90:	d801      	bhi.n	3f96 <bt_le_adv_start+0x22>
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
    3f92:	2516      	movs	r5, #22
    3f94:	e024      	b.n	3fe0 <bt_le_adv_start+0x6c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    3f96:	88a2      	ldrh	r2, [r4, #4]
    3f98:	4293      	cmp	r3, r2
    3f9a:	d8fa      	bhi.n	3f92 <bt_le_adv_start+0x1e>
    3f9c:	2b1f      	cmp	r3, #31
    3f9e:	d9f8      	bls.n	3f92 <bt_le_adv_start+0x1e>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    3fa0:	2380      	movs	r3, #128	; 0x80
    3fa2:	01db      	lsls	r3, r3, #7
    3fa4:	429a      	cmp	r2, r3
    3fa6:	d8f4      	bhi.n	3f92 <bt_le_adv_start+0x1e>

	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3fa8:	4e3d      	ldr	r6, [pc, #244]	; (40a0 <bt_le_adv_start+0x12c>)
    3faa:	2105      	movs	r1, #5
    3fac:	0030      	movs	r0, r6
    3fae:	306c      	adds	r0, #108	; 0x6c
    3fb0:	f7fe f924 	bl	21fc <atomic_test_bit>
    3fb4:	2800      	cmp	r0, #0
    3fb6:	d16f      	bne.n	4098 <bt_le_adv_start+0x124>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    3fb8:	0029      	movs	r1, r5
    3fba:	003a      	movs	r2, r7
    3fbc:	4839      	ldr	r0, [pc, #228]	; (40a4 <bt_le_adv_start+0x130>)
    3fbe:	f7fe faed 	bl	259c <set_ad>
    3fc2:	1e05      	subs	r5, r0, #0
	if (err) {
    3fc4:	d16a      	bne.n	409c <bt_le_adv_start+0x128>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3fc6:	9b01      	ldr	r3, [sp, #4]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d10b      	bne.n	3fe4 <bt_le_adv_start+0x70>
    3fcc:	7823      	ldrb	r3, [r4, #0]
    3fce:	07db      	lsls	r3, r3, #31
    3fd0:	d408      	bmi.n	3fe4 <bt_le_adv_start+0x70>
		if (err) {
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    3fd2:	210f      	movs	r1, #15
    3fd4:	4834      	ldr	r0, [pc, #208]	; (40a8 <bt_le_adv_start+0x134>)
    3fd6:	f7fe f9d3 	bl	2380 <bt_hci_cmd_create>
    3fda:	1e07      	subs	r7, r0, #0
				sizeof(*set_param));
	if (!buf) {
    3fdc:	d10a      	bne.n	3ff4 <bt_le_adv_start+0x80>
		return -ENOBUFS;
    3fde:	2537      	movs	r5, #55	; 0x37
	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
    3fe0:	426d      	negs	r5, r5
    3fe2:	e05b      	b.n	409c <bt_le_adv_start+0x128>
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    3fe4:	9a08      	ldr	r2, [sp, #32]
    3fe6:	9901      	ldr	r1, [sp, #4]
    3fe8:	4830      	ldr	r0, [pc, #192]	; (40ac <bt_le_adv_start+0x138>)
    3fea:	f7fe fad7 	bl	259c <set_ad>
    3fee:	1e05      	subs	r5, r0, #0
		if (err) {
    3ff0:	d0ef      	beq.n	3fd2 <bt_le_adv_start+0x5e>
    3ff2:	e053      	b.n	409c <bt_le_adv_start+0x128>
				sizeof(*set_param));
	if (!buf) {
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    3ff4:	210f      	movs	r1, #15
    3ff6:	3008      	adds	r0, #8
    3ff8:	f00e fb84 	bl	12704 <net_buf_simple_add>
    3ffc:	0005      	movs	r5, r0

	memset(set_param, 0, sizeof(*set_param));
    3ffe:	220f      	movs	r2, #15
    4000:	2100      	movs	r1, #0
    4002:	f7fd f9d9 	bl	13b8 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    4006:	78a3      	ldrb	r3, [r4, #2]
    4008:	702b      	strb	r3, [r5, #0]
    400a:	78e3      	ldrb	r3, [r4, #3]
    400c:	706b      	strb	r3, [r5, #1]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    400e:	7923      	ldrb	r3, [r4, #4]
    4010:	70ab      	strb	r3, [r5, #2]
    4012:	7963      	ldrb	r3, [r4, #5]
    4014:	70eb      	strb	r3, [r5, #3]
	set_param->channel_map  = 0x07;
    4016:	2307      	movs	r3, #7
    4018:	736b      	strb	r3, [r5, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    401a:	7823      	ldrb	r3, [r4, #0]
    401c:	07db      	lsls	r3, r3, #31
    401e:	d50d      	bpl.n	403c <bt_le_adv_start+0xc8>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (atomic_test_bit(bt_dev.flags,
    4020:	0030      	movs	r0, r6
    4022:	2102      	movs	r1, #2
    4024:	306c      	adds	r0, #108	; 0x6c
    4026:	f7fe f8e9 	bl	21fc <atomic_test_bit>
    402a:	2800      	cmp	r0, #0
    402c:	d002      	beq.n	4034 <bt_le_adv_start+0xc0>
					    BT_DEV_ID_STATIC_RANDOM)) {
				set_random_address(&bt_dev.id_addr.a);
    402e:	1c70      	adds	r0, r6, #1
    4030:	f7fe fa08 	bl	2444 <set_random_address>
			}

			set_param->own_addr_type = bt_dev.id_addr.type;
    4034:	7833      	ldrb	r3, [r6, #0]
    4036:	716b      	strb	r3, [r5, #5]
		}

		set_param->type = BT_LE_ADV_IND;
    4038:	2300      	movs	r3, #0
    403a:	e01a      	b.n	4072 <bt_le_adv_start+0xfe>
	} else {
		if (param->own_addr) {
    403c:	68a0      	ldr	r0, [r4, #8]
    403e:	2800      	cmp	r0, #0
    4040:	d006      	beq.n	4050 <bt_le_adv_start+0xdc>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    4042:	223f      	movs	r2, #63	; 0x3f
    4044:	7943      	ldrb	r3, [r0, #5]
    4046:	4393      	bics	r3, r2
    4048:	d1a3      	bne.n	3f92 <bt_le_adv_start+0x1e>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    404a:	f7fe f9fb 	bl	2444 <set_random_address>
    404e:	e001      	b.n	4054 <bt_le_adv_start+0xe0>
		} else {
			err = le_set_private_addr();
    4050:	f7fe fa26 	bl	24a0 <le_set_private_addr>
    4054:	1e04      	subs	r4, r0, #0
		}

		if (err) {
    4056:	d004      	beq.n	4062 <bt_le_adv_start+0xee>
			net_buf_unref(buf);
    4058:	0038      	movs	r0, r7
    405a:	f00e fb31 	bl	126c0 <net_buf_unref>
			return err;
    405e:	0025      	movs	r5, r4
    4060:	e01c      	b.n	409c <bt_le_adv_start+0x128>
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    4062:	2301      	movs	r3, #1
    4064:	716b      	strb	r3, [r5, #5]

		if (sd) {
    4066:	9b01      	ldr	r3, [sp, #4]
    4068:	2b00      	cmp	r3, #0
    406a:	d001      	beq.n	4070 <bt_le_adv_start+0xfc>
			set_param->type = BT_LE_ADV_SCAN_IND;
    406c:	2302      	movs	r3, #2
    406e:	e000      	b.n	4072 <bt_le_adv_start+0xfe>
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
    4070:	2303      	movs	r3, #3
    4072:	712b      	strb	r3, [r5, #4]
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    4074:	2200      	movs	r2, #0
    4076:	0039      	movs	r1, r7
    4078:	480b      	ldr	r0, [pc, #44]	; (40a8 <bt_le_adv_start+0x134>)
    407a:	f7fe f9a7 	bl	23cc <bt_hci_cmd_send_sync>
    407e:	1e05      	subs	r5, r0, #0
	if (err) {
    4080:	d10c      	bne.n	409c <bt_le_adv_start+0x128>
		return err;
	}

	err = set_advertise_enable(true);
    4082:	2001      	movs	r0, #1
    4084:	f7fe fa5e 	bl	2544 <set_advertise_enable>
    4088:	1e05      	subs	r5, r0, #0
	if (err) {
    408a:	d107      	bne.n	409c <bt_le_adv_start+0x128>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    408c:	0030      	movs	r0, r6
    408e:	2140      	movs	r1, #64	; 0x40
    4090:	306c      	adds	r0, #108	; 0x6c
    4092:	f00e fe08 	bl	12ca6 <atomic_or>
		return err;
	}

	atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	return 0;
    4096:	e001      	b.n	409c <bt_le_adv_start+0x128>
	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
    4098:	2545      	movs	r5, #69	; 0x45
    409a:	e7a1      	b.n	3fe0 <bt_le_adv_start+0x6c>
	}

	atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	return 0;
}
    409c:	0028      	movs	r0, r5
    409e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    40a0:	200002b0 	.word	0x200002b0
    40a4:	00002008 	.word	0x00002008
    40a8:	00002006 	.word	0x00002006
    40ac:	00002009 	.word	0x00002009

000040b0 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    40b0:	b570      	push	{r4, r5, r6, lr}
    40b2:	0005      	movs	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    40b4:	4806      	ldr	r0, [pc, #24]	; (40d0 <bt_buf_get_rx+0x20>)
    40b6:	f00e fa8f 	bl	125d8 <net_buf_alloc>
    40ba:	1e04      	subs	r4, r0, #0
#endif

	if (buf) {
    40bc:	d006      	beq.n	40cc <bt_buf_get_rx+0x1c>
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    40be:	2100      	movs	r1, #0
    40c0:	f00e faea 	bl	12698 <net_buf_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    40c4:	0020      	movs	r0, r4
    40c6:	f7fe f879 	bl	21bc <net_buf_user_data>
    40ca:	7005      	strb	r5, [r0, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    40cc:	0020      	movs	r0, r4
    40ce:	bd70      	pop	{r4, r5, r6, pc}
    40d0:	20000790 	.word	0x20000790

000040d4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    40d4:	b510      	push	{r4, lr}
    40d6:	0001      	movs	r1, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    40d8:	f3ef 8210 	mrs	r2, PRIMASK
    40dc:	b672      	cpsid	i
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    40de:	2000      	movs	r0, #0
{
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    40e0:	4b0c      	ldr	r3, [pc, #48]	; (4114 <bt_buf_get_cmd_complete+0x40>)
    40e2:	33ac      	adds	r3, #172	; 0xac
    40e4:	681c      	ldr	r4, [r3, #0]
	bt_dev.sent_cmd = NULL;
    40e6:	6018      	str	r0, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    40e8:	4282      	cmp	r2, r0
    40ea:	d100      	bne.n	40ee <bt_buf_get_cmd_complete+0x1a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    40ec:	b662      	cpsie	i
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    40ee:	2c00      	cmp	r4, #0
    40f0:	d00b      	beq.n	410a <bt_buf_get_cmd_complete+0x36>
    40f2:	0020      	movs	r0, r4
    40f4:	f7fe f862 	bl	21bc <net_buf_user_data>
    40f8:	2301      	movs	r3, #1
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    40fa:	2100      	movs	r1, #0
    40fc:	7003      	strb	r3, [r0, #0]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    40fe:	0020      	movs	r0, r4

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    4100:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RESERVE);
    4102:	f00e fac9 	bl	12698 <net_buf_reserve>

		return buf;
    4106:	0020      	movs	r0, r4
    4108:	e002      	b.n	4110 <bt_buf_get_cmd_complete+0x3c>
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    410a:	2001      	movs	r0, #1
    410c:	f7ff ffd0 	bl	40b0 <bt_buf_get_rx>
}
    4110:	bd10      	pop	{r4, pc}
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	200002b0 	.word	0x200002b0

00004118 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    4118:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    411a:	4d28      	ldr	r5, [pc, #160]	; (41bc <bt_pub_key_gen+0xa4>)
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    411c:	b085      	sub	sp, #20
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    411e:	002b      	movs	r3, r5
    4120:	3340      	adds	r3, #64	; 0x40
    4122:	781a      	ldrb	r2, [r3, #0]
    4124:	2306      	movs	r3, #6
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    4126:	0007      	movs	r7, r0
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    4128:	4013      	ands	r3, r2
    412a:	2b06      	cmp	r3, #6
    412c:	d00c      	beq.n	4148 <bt_pub_key_gen+0x30>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
    412e:	4b24      	ldr	r3, [pc, #144]	; (41c0 <bt_pub_key_gen+0xa8>)
    4130:	4a24      	ldr	r2, [pc, #144]	; (41c4 <bt_pub_key_gen+0xac>)
    4132:	9301      	str	r3, [sp, #4]
    4134:	4b24      	ldr	r3, [pc, #144]	; (41c8 <bt_pub_key_gen+0xb0>)
    4136:	4925      	ldr	r1, [pc, #148]	; (41cc <bt_pub_key_gen+0xb4>)
    4138:	9300      	str	r3, [sp, #0]
    413a:	4825      	ldr	r0, [pc, #148]	; (41d0 <bt_pub_key_gen+0xb8>)
    413c:	4b25      	ldr	r3, [pc, #148]	; (41d4 <bt_pub_key_gen+0xbc>)
    413e:	f7fd fb13 	bl	1768 <printk>
		return -ENOTSUP;
    4142:	2023      	movs	r0, #35	; 0x23
    4144:	4240      	negs	r0, r0
    4146:	e037      	b.n	41b8 <bt_pub_key_gen+0xa0>
	}

	new_cb->_next = pub_key_cb;
    4148:	4e23      	ldr	r6, [pc, #140]	; (41d8 <bt_pub_key_gen+0xc0>)
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    414a:	356c      	adds	r5, #108	; 0x6c
    414c:	6833      	ldr	r3, [r6, #0]
    414e:	2110      	movs	r1, #16
    4150:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    4152:	6030      	str	r0, [r6, #0]
    4154:	0028      	movs	r0, r5
    4156:	f00e fda6 	bl	12ca6 <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    415a:	2310      	movs	r3, #16
    415c:	4018      	ands	r0, r3
    415e:	1e04      	subs	r4, r0, #0
    4160:	d001      	beq.n	4166 <bt_pub_key_gen+0x4e>
		return 0;
    4162:	2000      	movs	r0, #0
    4164:	e028      	b.n	41b8 <bt_pub_key_gen+0xa0>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4166:	2109      	movs	r1, #9
    4168:	0028      	movs	r0, r5
    416a:	4249      	negs	r1, r1
    416c:	f00e fda6 	bl	12cbc <atomic_and>
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    4170:	0022      	movs	r2, r4
    4172:	0021      	movs	r1, r4
    4174:	4819      	ldr	r0, [pc, #100]	; (41dc <bt_pub_key_gen+0xc4>)
    4176:	f7fe f929 	bl	23cc <bt_hci_cmd_send_sync>
    417a:	9003      	str	r0, [sp, #12]
	if (err) {
    417c:	2800      	cmp	r0, #0
    417e:	d011      	beq.n	41a4 <bt_pub_key_gen+0x8c>
		BT_ERR("Sending LE P256 Public Key command failed");
    4180:	4b0f      	ldr	r3, [pc, #60]	; (41c0 <bt_pub_key_gen+0xa8>)
    4182:	4a17      	ldr	r2, [pc, #92]	; (41e0 <bt_pub_key_gen+0xc8>)
    4184:	9301      	str	r3, [sp, #4]
    4186:	4b17      	ldr	r3, [pc, #92]	; (41e4 <bt_pub_key_gen+0xcc>)
    4188:	4910      	ldr	r1, [pc, #64]	; (41cc <bt_pub_key_gen+0xb4>)
    418a:	9300      	str	r3, [sp, #0]
    418c:	4816      	ldr	r0, [pc, #88]	; (41e8 <bt_pub_key_gen+0xd0>)
    418e:	4b11      	ldr	r3, [pc, #68]	; (41d4 <bt_pub_key_gen+0xbc>)
    4190:	f7fd faea 	bl	1768 <printk>
    4194:	2111      	movs	r1, #17
    4196:	0028      	movs	r0, r5
    4198:	4249      	negs	r1, r1
    419a:	f00e fd8f 	bl	12cbc <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
    419e:	6034      	str	r4, [r6, #0]
		return err;
    41a0:	9803      	ldr	r0, [sp, #12]
    41a2:	e009      	b.n	41b8 <bt_pub_key_gen+0xa0>
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    41a4:	6834      	ldr	r4, [r6, #0]
    41a6:	2c00      	cmp	r4, #0
    41a8:	d0db      	beq.n	4162 <bt_pub_key_gen+0x4a>
		if (cb != new_cb) {
    41aa:	42bc      	cmp	r4, r7
    41ac:	d002      	beq.n	41b4 <bt_pub_key_gen+0x9c>
			cb->func(NULL);
    41ae:	2000      	movs	r0, #0
    41b0:	6823      	ldr	r3, [r4, #0]
    41b2:	4798      	blx	r3
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
		return err;
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    41b4:	6864      	ldr	r4, [r4, #4]
    41b6:	e7f6      	b.n	41a6 <bt_pub_key_gen+0x8e>
			cb->func(NULL);
		}
	}

	return 0;
}
    41b8:	b005      	add	sp, #20
    41ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41bc:	200002b0 	.word	0x200002b0
    41c0:	000145b0 	.word	0x000145b0
    41c4:	000145bd 	.word	0x000145bd
    41c8:	000145fb 	.word	0x000145fb
    41cc:	00014577 	.word	0x00014577
    41d0:	00014c7b 	.word	0x00014c7b
    41d4:	00016716 	.word	0x00016716
    41d8:	20000a40 	.word	0x20000a40
    41dc:	00002025 	.word	0x00002025
    41e0:	00014570 	.word	0x00014570
    41e4:	000145b5 	.word	0x000145b5
    41e8:	00014caa 	.word	0x00014caa

000041ec <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    41ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    41ee:	4d1b      	ldr	r5, [pc, #108]	; (425c <bt_dh_key_gen+0x70>)

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    41f0:	9001      	str	r0, [sp, #4]
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    41f2:	682b      	ldr	r3, [r5, #0]

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    41f4:	000f      	movs	r7, r1
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    41f6:	2b00      	cmp	r3, #0
    41f8:	d001      	beq.n	41fe <bt_dh_key_gen+0x12>
		return -EBUSY;
    41fa:	2410      	movs	r4, #16
    41fc:	e02a      	b.n	4254 <bt_dh_key_gen+0x68>
{
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    41fe:	4e18      	ldr	r6, [pc, #96]	; (4260 <bt_dh_key_gen+0x74>)
    4200:	2104      	movs	r1, #4
    4202:	366c      	adds	r6, #108	; 0x6c
    4204:	0030      	movs	r0, r6
    4206:	f7fd fff9 	bl	21fc <atomic_test_bit>
    420a:	1e04      	subs	r4, r0, #0
    420c:	d1f5      	bne.n	41fa <bt_dh_key_gen+0xe>
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    420e:	2103      	movs	r1, #3
    4210:	0030      	movs	r0, r6
    4212:	f7fd fff3 	bl	21fc <atomic_test_bit>
    4216:	2800      	cmp	r0, #0
    4218:	d01b      	beq.n	4252 <bt_dh_key_gen+0x66>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    421a:	2140      	movs	r1, #64	; 0x40
    421c:	4811      	ldr	r0, [pc, #68]	; (4264 <bt_dh_key_gen+0x78>)

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    421e:	602f      	str	r7, [r5, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    4220:	f7fe f8ae 	bl	2380 <bt_hci_cmd_create>
    4224:	1e06      	subs	r6, r0, #0
	if (!buf) {
    4226:	d102      	bne.n	422e <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    4228:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    422a:	3c37      	subs	r4, #55	; 0x37
    422c:	e013      	b.n	4256 <bt_dh_key_gen+0x6a>
	}

	cp = net_buf_add(buf, sizeof(*cp));
    422e:	2140      	movs	r1, #64	; 0x40
    4230:	3008      	adds	r0, #8
    4232:	f00e fa67 	bl	12704 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    4236:	2240      	movs	r2, #64	; 0x40
    4238:	9901      	ldr	r1, [sp, #4]
    423a:	f7fd f893 	bl	1364 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    423e:	0022      	movs	r2, r4
    4240:	0031      	movs	r1, r6
    4242:	4808      	ldr	r0, [pc, #32]	; (4264 <bt_dh_key_gen+0x78>)
    4244:	f7fe f8c2 	bl	23cc <bt_hci_cmd_send_sync>
	if (err) {
    4248:	2800      	cmp	r0, #0
    424a:	d004      	beq.n	4256 <bt_dh_key_gen+0x6a>
		dh_key_cb = NULL;
    424c:	602c      	str	r4, [r5, #0]
		return err;
    424e:	0004      	movs	r4, r0
    4250:	e001      	b.n	4256 <bt_dh_key_gen+0x6a>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return -EADDRNOTAVAIL;
    4252:	2431      	movs	r4, #49	; 0x31
    4254:	4264      	negs	r4, r4
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    4256:	0020      	movs	r0, r4
    4258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    425a:	46c0      	nop			; (mov r8, r8)
    425c:	20000a3c 	.word	0x20000a3c
    4260:	200002b0 	.word	0x200002b0
    4264:	00002026 	.word	0x00002026

00004268 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    4268:	b570      	push	{r4, r5, r6, lr}
    426a:	0005      	movs	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    426c:	4b07      	ldr	r3, [pc, #28]	; (428c <notify_connected+0x24>)
    426e:	681c      	ldr	r4, [r3, #0]
    4270:	2c00      	cmp	r4, #0
    4272:	d009      	beq.n	4288 <notify_connected+0x20>
		if (cb->connected) {
    4274:	6823      	ldr	r3, [r4, #0]
    4276:	2b00      	cmp	r3, #0
    4278:	d004      	beq.n	4284 <notify_connected+0x1c>
			cb->connected(conn, conn->err);
    427a:	002a      	movs	r2, r5
    427c:	3250      	adds	r2, #80	; 0x50
    427e:	7811      	ldrb	r1, [r2, #0]
    4280:	0028      	movs	r0, r5
    4282:	4798      	blx	r3

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4284:	69a4      	ldr	r4, [r4, #24]
    4286:	e7f3      	b.n	4270 <notify_connected+0x8>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    4288:	bd70      	pop	{r4, r5, r6, pc}
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	20000b10 	.word	0x20000b10

00004290 <bt_conn_reset_rx_state>:
	cb->_next = callback_list;
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
    4290:	b510      	push	{r4, lr}
	if (!conn->rx_len) {
    4292:	8983      	ldrh	r3, [r0, #12]
	cb->_next = callback_list;
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
    4294:	0004      	movs	r4, r0
	if (!conn->rx_len) {
    4296:	2b00      	cmp	r3, #0
    4298:	d005      	beq.n	42a6 <bt_conn_reset_rx_state+0x16>
		return;
	}

	net_buf_unref(conn->rx);
    429a:	6900      	ldr	r0, [r0, #16]
    429c:	f00e fa10 	bl	126c0 <net_buf_unref>
	conn->rx = NULL;
    42a0:	2300      	movs	r3, #0
    42a2:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    42a4:	81a3      	strh	r3, [r4, #12]
}
    42a6:	bd10      	pop	{r4, pc}

000042a8 <conn_cleanup>:
}

static struct k_poll_signal conn_change = K_POLL_SIGNAL_INITIALIZER();

static void conn_cleanup(struct bt_conn *conn)
{
    42a8:	b510      	push	{r4, lr}
    42aa:	0004      	movs	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    42ac:	0020      	movs	r0, r4
    42ae:	2100      	movs	r1, #0
    42b0:	3030      	adds	r0, #48	; 0x30
    42b2:	f00e f9d9 	bl	12668 <net_buf_get>
    42b6:	2800      	cmp	r0, #0
    42b8:	d002      	beq.n	42c0 <conn_cleanup+0x18>
		net_buf_unref(buf);
    42ba:	f00e fa01 	bl	126c0 <net_buf_unref>
    42be:	e7f5      	b.n	42ac <conn_cleanup+0x4>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_reset_rx_state(conn);
    42c0:	0020      	movs	r0, r4
    42c2:	f7ff ffe5 	bl	4290 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    42c6:	0020      	movs	r0, r4
    42c8:	304c      	adds	r0, #76	; 0x4c
    42ca:	f00e fcd5 	bl	12c78 <atomic_dec>

	/* Release the reference we took for the very first
	 * state transition.
	 */
	bt_conn_unref(conn);
}
    42ce:	bd10      	pop	{r4, pc}

000042d0 <bt_conn_get_pkts>:
		return &bt_dev.br.pkts;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return &bt_dev.le.pkts;
}
    42d0:	4800      	ldr	r0, [pc, #0]	; (42d4 <bt_conn_get_pkts+0x4>)
    42d2:	4770      	bx	lr
    42d4:	20000334 	.word	0x20000334

000042d8 <notify_le_param_updated>:
		}
	}
}

void notify_le_param_updated(struct bt_conn *conn)
{
    42d8:	b570      	push	{r4, r5, r6, lr}
    42da:	0005      	movs	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    42dc:	4b0a      	ldr	r3, [pc, #40]	; (4308 <notify_le_param_updated+0x30>)
    42de:	681c      	ldr	r4, [r3, #0]
    42e0:	2c00      	cmp	r4, #0
    42e2:	d00f      	beq.n	4304 <notify_le_param_updated+0x2c>
		if (cb->le_param_updated) {
    42e4:	68e6      	ldr	r6, [r4, #12]
    42e6:	2e00      	cmp	r6, #0
    42e8:	d00a      	beq.n	4300 <notify_le_param_updated+0x28>
			cb->le_param_updated(conn, conn->le.interval,
    42ea:	002b      	movs	r3, r5
    42ec:	002a      	movs	r2, r5
    42ee:	0029      	movs	r1, r5
    42f0:	3372      	adds	r3, #114	; 0x72
    42f2:	3270      	adds	r2, #112	; 0x70
    42f4:	316a      	adds	r1, #106	; 0x6a
    42f6:	881b      	ldrh	r3, [r3, #0]
    42f8:	8812      	ldrh	r2, [r2, #0]
    42fa:	8809      	ldrh	r1, [r1, #0]
    42fc:	0028      	movs	r0, r5
    42fe:	47b0      	blx	r6

void notify_le_param_updated(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4300:	69a4      	ldr	r4, [r4, #24]
    4302:	e7ed      	b.n	42e0 <notify_le_param_updated+0x8>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    4304:	bd70      	pop	{r4, r5, r6, pc}
    4306:	46c0      	nop			; (mov r8, r8)
    4308:	20000b10 	.word	0x20000b10

0000430c <le_param_req>:

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    430e:	0007      	movs	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    4310:	0008      	movs	r0, r1
		}
	}
}

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    4312:	000e      	movs	r6, r1
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    4314:	f7fe f986 	bl	2624 <bt_le_conn_params_valid>
    4318:	1e05      	subs	r5, r0, #0
    431a:	d101      	bne.n	4320 <le_param_req+0x14>
		return false;
    431c:	2500      	movs	r5, #0
    431e:	e013      	b.n	4348 <le_param_req+0x3c>
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    4320:	4b0a      	ldr	r3, [pc, #40]	; (434c <le_param_req+0x40>)
    4322:	681c      	ldr	r4, [r3, #0]
    4324:	2c00      	cmp	r4, #0
    4326:	d00f      	beq.n	4348 <le_param_req+0x3c>
		if (!cb->le_param_req) {
    4328:	68a3      	ldr	r3, [r4, #8]
    432a:	2b00      	cmp	r3, #0
    432c:	d101      	bne.n	4332 <le_param_req+0x26>

	if (!bt_le_conn_params_valid(param)) {
		return false;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    432e:	69a4      	ldr	r4, [r4, #24]
    4330:	e7f8      	b.n	4324 <le_param_req+0x18>
		if (!cb->le_param_req) {
			continue;
		}

		if (!cb->le_param_req(conn, param)) {
    4332:	0031      	movs	r1, r6
    4334:	0038      	movs	r0, r7
    4336:	4798      	blx	r3
    4338:	2800      	cmp	r0, #0
    433a:	d0ef      	beq.n	431c <le_param_req+0x10>
		}

		/* The callback may modify the parameters so we need to
		 * double-check that it returned valid parameters.
		 */
		if (!bt_le_conn_params_valid(param)) {
    433c:	0030      	movs	r0, r6
    433e:	f7fe f971 	bl	2624 <bt_le_conn_params_valid>
    4342:	2800      	cmp	r0, #0
    4344:	d1f3      	bne.n	432e <le_param_req+0x22>
    4346:	e7e9      	b.n	431c <le_param_req+0x10>
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    4348:	0028      	movs	r0, r5
    434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    434c:	20000b10 	.word	0x20000b10

00004350 <bt_conn_identity_resolved>:
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    4350:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
		rpa = &conn->le.resp_addr;
	} else {
		rpa = &conn->le.init_addr;
    4352:	0006      	movs	r6, r0
void bt_conn_identity_resolved(struct bt_conn *conn)
{
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
    4354:	78c3      	ldrb	r3, [r0, #3]
}
#endif /* CONFIG_BLUETOOTH_BREDR */

#if defined(CONFIG_BLUETOOTH_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    4356:	0004      	movs	r4, r0
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
		rpa = &conn->le.resp_addr;
	} else {
		rpa = &conn->le.init_addr;
    4358:	365b      	adds	r6, #91	; 0x5b
void bt_conn_identity_resolved(struct bt_conn *conn)
{
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
    435a:	2b00      	cmp	r3, #0
    435c:	d100      	bne.n	4360 <bt_conn_identity_resolved+0x10>
		rpa = &conn->le.resp_addr;
    435e:	3607      	adds	r6, #7
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    4360:	4b07      	ldr	r3, [pc, #28]	; (4380 <bt_conn_identity_resolved+0x30>)
    4362:	681d      	ldr	r5, [r3, #0]
    4364:	2d00      	cmp	r5, #0
    4366:	d009      	beq.n	437c <bt_conn_identity_resolved+0x2c>
		if (cb->identity_resolved) {
    4368:	692b      	ldr	r3, [r5, #16]
    436a:	2b00      	cmp	r3, #0
    436c:	d004      	beq.n	4378 <bt_conn_identity_resolved+0x28>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    436e:	0022      	movs	r2, r4
    4370:	0031      	movs	r1, r6
    4372:	3254      	adds	r2, #84	; 0x54
    4374:	0020      	movs	r0, r4
    4376:	4798      	blx	r3
		rpa = &conn->le.resp_addr;
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    4378:	69ad      	ldr	r5, [r5, #24]
    437a:	e7f3      	b.n	4364 <bt_conn_identity_resolved+0x14>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
		}
	}
}
    437c:	bd70      	pop	{r4, r5, r6, pc}
    437e:	46c0      	nop			; (mov r8, r8)
    4380:	20000b10 	.word	0x20000b10

00004384 <bt_conn_security_changed>:

	return 0;
}

void bt_conn_security_changed(struct bt_conn *conn)
{
    4384:	b570      	push	{r4, r5, r6, lr}
    4386:	0005      	movs	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4388:	4b06      	ldr	r3, [pc, #24]	; (43a4 <bt_conn_security_changed+0x20>)
    438a:	681c      	ldr	r4, [r3, #0]
    438c:	2c00      	cmp	r4, #0
    438e:	d007      	beq.n	43a0 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    4390:	6963      	ldr	r3, [r4, #20]
    4392:	2b00      	cmp	r3, #0
    4394:	d002      	beq.n	439c <bt_conn_security_changed+0x18>
			cb->security_changed(conn, conn->sec_level);
    4396:	7a29      	ldrb	r1, [r5, #8]
    4398:	0028      	movs	r0, r5
    439a:	4798      	blx	r3

void bt_conn_security_changed(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    439c:	69a4      	ldr	r4, [r4, #24]
    439e:	e7f5      	b.n	438c <bt_conn_security_changed+0x8>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level);
		}
	}
}
    43a0:	bd70      	pop	{r4, r5, r6, pc}
    43a2:	46c0      	nop			; (mov r8, r8)
    43a4:	20000b10 	.word	0x20000b10

000043a8 <bt_conn_security>:

int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
    43a8:	0003      	movs	r3, r0
		return -EINVAL;
	}
}

int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
    43aa:	b510      	push	{r4, lr}
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
    43ac:	3351      	adds	r3, #81	; 0x51
    43ae:	781b      	ldrb	r3, [r3, #0]
		return -EINVAL;
	}
}

int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
    43b0:	0004      	movs	r4, r0
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
    43b2:	2b03      	cmp	r3, #3
    43b4:	d115      	bne.n	43e2 <bt_conn_security+0x3a>
	    sec < BT_SECURITY_FIPS) {
		return -EOPNOTSUPP;
	}

	/* nothing to do */
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    43b6:	7a03      	ldrb	r3, [r0, #8]
    43b8:	428b      	cmp	r3, r1
    43ba:	d301      	bcc.n	43c0 <bt_conn_security+0x18>
		return 0;
    43bc:	2000      	movs	r0, #0
    43be:	e012      	b.n	43e6 <bt_conn_security+0x3e>
	    sec < BT_SECURITY_FIPS) {
		return -EOPNOTSUPP;
	}

	/* nothing to do */
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    43c0:	7a43      	ldrb	r3, [r0, #9]
    43c2:	428b      	cmp	r3, r1
    43c4:	d2fa      	bcs.n	43bc <bt_conn_security+0x14>

		return conn_auth(conn);
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	switch (conn->role) {
    43c6:	78c3      	ldrb	r3, [r0, #3]
	/* nothing to do */
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
		return 0;
	}

	conn->required_sec_level = sec;
    43c8:	7241      	strb	r1, [r0, #9]

		return conn_auth(conn);
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	switch (conn->role) {
    43ca:	2b01      	cmp	r3, #1
    43cc:	d104      	bne.n	43d8 <bt_conn_security+0x30>
						   conn->le.keys->enc_size);
	}
#endif /* CONFIG_BLUETOOTH_CENTRAL && CONFIG_BLUETOOTH_SMP */
#if defined(CONFIG_BLUETOOTH_PERIPHERAL) && defined(CONFIG_BLUETOOTH_SMP)
	case BT_HCI_ROLE_SLAVE:
		return bt_smp_send_security_req(conn);
    43ce:	f004 f8c9 	bl	8564 <bt_smp_send_security_req>
	conn->required_sec_level = sec;

	err = start_security(conn);

	/* reset required security level in case of error */
	if (err) {
    43d2:	2800      	cmp	r0, #0
    43d4:	d102      	bne.n	43dc <bt_conn_security+0x34>
    43d6:	e7f1      	b.n	43bc <bt_conn_security+0x14>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL) && defined(CONFIG_BLUETOOTH_SMP)
	case BT_HCI_ROLE_SLAVE:
		return bt_smp_send_security_req(conn);
#endif /* CONFIG_BLUETOOTH_PERIPHERAL && CONFIG_BLUETOOTH_SMP */
	default:
		return -EINVAL;
    43d8:	2016      	movs	r0, #22
    43da:	4240      	negs	r0, r0

	err = start_security(conn);

	/* reset required security level in case of error */
	if (err) {
		conn->required_sec_level = conn->sec_level;
    43dc:	7a23      	ldrb	r3, [r4, #8]
    43de:	7263      	strb	r3, [r4, #9]
    43e0:	e001      	b.n	43e6 <bt_conn_security+0x3e>
int bt_conn_security(struct bt_conn *conn, bt_security_t sec)
{
	int err;

	if (conn->state != BT_CONN_CONNECTED) {
		return -ENOTCONN;
    43e2:	2039      	movs	r0, #57	; 0x39
    43e4:	4240      	negs	r0, r0
	if (err) {
		conn->required_sec_level = conn->sec_level;
	}

	return err;
}
    43e6:	bd10      	pop	{r4, pc}

000043e8 <bt_conn_cb_register>:
#endif /* CONFIG_BLUETOOTH_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    43e8:	4b02      	ldr	r3, [pc, #8]	; (43f4 <bt_conn_cb_register+0xc>)
    43ea:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
    43ec:	6018      	str	r0, [r3, #0]
}
#endif /* CONFIG_BLUETOOTH_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    43ee:	6182      	str	r2, [r0, #24]
	callback_list = cb;
}
    43f0:	4770      	bx	lr
    43f2:	46c0      	nop			; (mov r8, r8)
    43f4:	20000b10 	.word	0x20000b10

000043f8 <bt_conn_recv>:
	conn->rx = NULL;
	conn->rx_len = 0;
}

void bt_conn_recv(struct bt_conn *conn, struct net_buf *buf, u8_t flags)
{
    43f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    43fa:	0004      	movs	r4, r0
    43fc:	000d      	movs	r5, r1
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    43fe:	2a01      	cmp	r2, #1
    4400:	d01f      	beq.n	4442 <bt_conn_recv+0x4a>
    4402:	2a02      	cmp	r2, #2
    4404:	d15a      	bne.n	44bc <bt_conn_recv+0xc4>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    4406:	688a      	ldr	r2, [r1, #8]
    4408:	7856      	ldrb	r6, [r2, #1]
    440a:	7813      	ldrb	r3, [r2, #0]
    440c:	0236      	lsls	r6, r6, #8
    440e:	431e      	orrs	r6, r3

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    4410:	8983      	ldrh	r3, [r0, #12]
    4412:	2b00      	cmp	r3, #0
    4414:	d00c      	beq.n	4430 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
    4416:	4b40      	ldr	r3, [pc, #256]	; (4518 <bt_conn_recv+0x120>)
    4418:	4a40      	ldr	r2, [pc, #256]	; (451c <bt_conn_recv+0x124>)
    441a:	9301      	str	r3, [sp, #4]
    441c:	4b40      	ldr	r3, [pc, #256]	; (4520 <bt_conn_recv+0x128>)
    441e:	4941      	ldr	r1, [pc, #260]	; (4524 <bt_conn_recv+0x12c>)
    4420:	9300      	str	r3, [sp, #0]
    4422:	4841      	ldr	r0, [pc, #260]	; (4528 <bt_conn_recv+0x130>)
    4424:	4b41      	ldr	r3, [pc, #260]	; (452c <bt_conn_recv+0x134>)
    4426:	f7fd f99f 	bl	1768 <printk>
			bt_conn_reset_rx_state(conn);
    442a:	0020      	movs	r0, r4
    442c:	f7ff ff30 	bl	4290 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    4430:	89ab      	ldrh	r3, [r5, #12]
    4432:	3604      	adds	r6, #4
    4434:	1af3      	subs	r3, r6, r3
    4436:	b29b      	uxth	r3, r3
    4438:	81a3      	strh	r3, [r4, #12]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    443a:	2b00      	cmp	r3, #0
    443c:	d04d      	beq.n	44da <bt_conn_recv+0xe2>
			conn->rx = buf;
    443e:	6125      	str	r5, [r4, #16]
			return;
    4440:	e068      	b.n	4514 <bt_conn_recv+0x11c>
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    4442:	8983      	ldrh	r3, [r0, #12]
    4444:	2b00      	cmp	r3, #0
    4446:	d108      	bne.n	445a <bt_conn_recv+0x62>
			BT_ERR("Unexpected L2CAP continuation");
    4448:	4b33      	ldr	r3, [pc, #204]	; (4518 <bt_conn_recv+0x120>)
    444a:	4a34      	ldr	r2, [pc, #208]	; (451c <bt_conn_recv+0x124>)
    444c:	9301      	str	r3, [sp, #4]
    444e:	4b34      	ldr	r3, [pc, #208]	; (4520 <bt_conn_recv+0x128>)
    4450:	4934      	ldr	r1, [pc, #208]	; (4524 <bt_conn_recv+0x12c>)
    4452:	9300      	str	r3, [sp, #0]
    4454:	4836      	ldr	r0, [pc, #216]	; (4530 <bt_conn_recv+0x138>)
    4456:	4b35      	ldr	r3, [pc, #212]	; (452c <bt_conn_recv+0x134>)
    4458:	e00a      	b.n	4470 <bt_conn_recv+0x78>
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
			return;
		}

		if (buf->len > conn->rx_len) {
    445a:	898e      	ldrh	r6, [r1, #12]
    445c:	42b3      	cmp	r3, r6
    445e:	d20a      	bcs.n	4476 <bt_conn_recv+0x7e>
			BT_ERR("L2CAP data overflow");
    4460:	4b2d      	ldr	r3, [pc, #180]	; (4518 <bt_conn_recv+0x120>)
    4462:	4a2e      	ldr	r2, [pc, #184]	; (451c <bt_conn_recv+0x124>)
    4464:	9301      	str	r3, [sp, #4]
    4466:	4b2e      	ldr	r3, [pc, #184]	; (4520 <bt_conn_recv+0x128>)
    4468:	492e      	ldr	r1, [pc, #184]	; (4524 <bt_conn_recv+0x12c>)
    446a:	9300      	str	r3, [sp, #0]
    446c:	4831      	ldr	r0, [pc, #196]	; (4534 <bt_conn_recv+0x13c>)
    446e:	4b2f      	ldr	r3, [pc, #188]	; (452c <bt_conn_recv+0x134>)
    4470:	f7fd f97a 	bl	1768 <printk>
    4474:	e02d      	b.n	44d2 <bt_conn_recv+0xda>
			return;
		}

		BT_DBG("Cont, len %u rx_len %u", buf->len, conn->rx_len);

		if (buf->len > net_buf_tailroom(conn->rx)) {
    4476:	6900      	ldr	r0, [r0, #16]
    4478:	3008      	adds	r0, #8
    447a:	f00e f984 	bl	12786 <net_buf_simple_tailroom>
    447e:	4286      	cmp	r6, r0
    4480:	d908      	bls.n	4494 <bt_conn_recv+0x9c>
			BT_ERR("Not enough buffer space for L2CAP data");
    4482:	4b25      	ldr	r3, [pc, #148]	; (4518 <bt_conn_recv+0x120>)
    4484:	4a25      	ldr	r2, [pc, #148]	; (451c <bt_conn_recv+0x124>)
    4486:	9301      	str	r3, [sp, #4]
    4488:	4b25      	ldr	r3, [pc, #148]	; (4520 <bt_conn_recv+0x128>)
    448a:	4926      	ldr	r1, [pc, #152]	; (4524 <bt_conn_recv+0x12c>)
    448c:	9300      	str	r3, [sp, #0]
    448e:	482a      	ldr	r0, [pc, #168]	; (4538 <bt_conn_recv+0x140>)
    4490:	4b26      	ldr	r3, [pc, #152]	; (452c <bt_conn_recv+0x134>)
    4492:	e7ed      	b.n	4470 <bt_conn_recv+0x78>
			bt_conn_reset_rx_state(conn);
			net_buf_unref(buf);
			return;
		}

		net_buf_add_mem(conn->rx, buf->data, buf->len);
    4494:	6920      	ldr	r0, [r4, #16]
    4496:	89aa      	ldrh	r2, [r5, #12]
    4498:	68a9      	ldr	r1, [r5, #8]
    449a:	3008      	adds	r0, #8
    449c:	f00e f939 	bl	12712 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    44a0:	89a3      	ldrh	r3, [r4, #12]
    44a2:	89aa      	ldrh	r2, [r5, #12]
		net_buf_unref(buf);
    44a4:	0028      	movs	r0, r5
			net_buf_unref(buf);
			return;
		}

		net_buf_add_mem(conn->rx, buf->data, buf->len);
		conn->rx_len -= buf->len;
    44a6:	1a9b      	subs	r3, r3, r2
    44a8:	81a3      	strh	r3, [r4, #12]
		net_buf_unref(buf);
    44aa:	f00e f909 	bl	126c0 <net_buf_unref>

		if (conn->rx_len) {
    44ae:	89a3      	ldrh	r3, [r4, #12]
    44b0:	2b00      	cmp	r3, #0
    44b2:	d12f      	bne.n	4514 <bt_conn_recv+0x11c>
			return;
		}

		buf = conn->rx;
    44b4:	6925      	ldr	r5, [r4, #16]
		conn->rx = NULL;
		conn->rx_len = 0;
    44b6:	81a3      	strh	r3, [r4, #12]
		if (conn->rx_len) {
			return;
		}

		buf = conn->rx;
		conn->rx = NULL;
    44b8:	6123      	str	r3, [r4, #16]
		conn->rx_len = 0;

		break;
    44ba:	e00e      	b.n	44da <bt_conn_recv+0xe2>
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    44bc:	4b16      	ldr	r3, [pc, #88]	; (4518 <bt_conn_recv+0x120>)
    44be:	9201      	str	r2, [sp, #4]
    44c0:	9302      	str	r3, [sp, #8]
    44c2:	4b17      	ldr	r3, [pc, #92]	; (4520 <bt_conn_recv+0x128>)
    44c4:	4a15      	ldr	r2, [pc, #84]	; (451c <bt_conn_recv+0x124>)
    44c6:	9300      	str	r3, [sp, #0]
    44c8:	4916      	ldr	r1, [pc, #88]	; (4524 <bt_conn_recv+0x12c>)
    44ca:	4b18      	ldr	r3, [pc, #96]	; (452c <bt_conn_recv+0x134>)
    44cc:	481b      	ldr	r0, [pc, #108]	; (453c <bt_conn_recv+0x144>)
    44ce:	f7fd f94b 	bl	1768 <printk>
		bt_conn_reset_rx_state(conn);
    44d2:	0020      	movs	r0, r4
    44d4:	f7ff fedc 	bl	4290 <bt_conn_reset_rx_state>
    44d8:	e014      	b.n	4504 <bt_conn_recv+0x10c>
		net_buf_unref(buf);
		return;
	}

	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);
    44da:	68ab      	ldr	r3, [r5, #8]
    44dc:	781a      	ldrb	r2, [r3, #0]
    44de:	785b      	ldrb	r3, [r3, #1]
    44e0:	021b      	lsls	r3, r3, #8
    44e2:	4313      	orrs	r3, r2

	if (sizeof(*hdr) + len != buf->len) {
    44e4:	89aa      	ldrh	r2, [r5, #12]
    44e6:	1d19      	adds	r1, r3, #4
    44e8:	4291      	cmp	r1, r2
    44ea:	d00f      	beq.n	450c <bt_conn_recv+0x114>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    44ec:	490a      	ldr	r1, [pc, #40]	; (4518 <bt_conn_recv+0x120>)
    44ee:	9301      	str	r3, [sp, #4]
    44f0:	4b0b      	ldr	r3, [pc, #44]	; (4520 <bt_conn_recv+0x128>)
    44f2:	9103      	str	r1, [sp, #12]
    44f4:	9202      	str	r2, [sp, #8]
    44f6:	9300      	str	r3, [sp, #0]
    44f8:	4a08      	ldr	r2, [pc, #32]	; (451c <bt_conn_recv+0x124>)
    44fa:	4b0c      	ldr	r3, [pc, #48]	; (452c <bt_conn_recv+0x134>)
    44fc:	4909      	ldr	r1, [pc, #36]	; (4524 <bt_conn_recv+0x12c>)
    44fe:	4810      	ldr	r0, [pc, #64]	; (4540 <bt_conn_recv+0x148>)
    4500:	f7fd f932 	bl	1768 <printk>
		net_buf_unref(buf);
    4504:	0028      	movs	r0, r5
    4506:	f00e f8db 	bl	126c0 <net_buf_unref>
		return;
    450a:	e003      	b.n	4514 <bt_conn_recv+0x11c>
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
    450c:	0029      	movs	r1, r5
    450e:	0020      	movs	r0, r4
    4510:	f000 fe14 	bl	513c <bt_l2cap_recv>
}
    4514:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    4516:	46c0      	nop			; (mov r8, r8)
    4518:	000145b0 	.word	0x000145b0
    451c:	00014570 	.word	0x00014570
    4520:	000145b5 	.word	0x000145b5
    4524:	00014577 	.word	0x00014577
    4528:	00014d0d 	.word	0x00014d0d
    452c:	00016924 	.word	0x00016924
    4530:	00014d3a 	.word	0x00014d3a
    4534:	00014d68 	.word	0x00014d68
    4538:	00014d8c 	.word	0x00014d8c
    453c:	00014dc3 	.word	0x00014dc3
    4540:	00014df1 	.word	0x00014df1

00004544 <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    4544:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4546:	0005      	movs	r5, r0
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    4548:	7988      	ldrb	r0, [r1, #6]
	bt_l2cap_recv(conn, buf);
}

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    454a:	000c      	movs	r4, r1
    454c:	0016      	movs	r6, r2
	struct net_buf_pool *pool;

	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	pool = net_buf_pool_get(buf->pool_id);
    454e:	f00e f83b 	bl	125c8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    4552:	8b43      	ldrh	r3, [r0, #26]
    4554:	2b03      	cmp	r3, #3
    4556:	d80e      	bhi.n	4576 <bt_conn_send_cb+0x32>
		BT_ERR("Too small user data size");
    4558:	4b17      	ldr	r3, [pc, #92]	; (45b8 <bt_conn_send_cb+0x74>)
    455a:	4a18      	ldr	r2, [pc, #96]	; (45bc <bt_conn_send_cb+0x78>)
    455c:	9301      	str	r3, [sp, #4]
    455e:	4b18      	ldr	r3, [pc, #96]	; (45c0 <bt_conn_send_cb+0x7c>)
    4560:	4918      	ldr	r1, [pc, #96]	; (45c4 <bt_conn_send_cb+0x80>)
    4562:	9300      	str	r3, [sp, #0]
    4564:	4818      	ldr	r0, [pc, #96]	; (45c8 <bt_conn_send_cb+0x84>)
    4566:	4b19      	ldr	r3, [pc, #100]	; (45cc <bt_conn_send_cb+0x88>)
    4568:	f7fd f8fe 	bl	1768 <printk>
		net_buf_unref(buf);
    456c:	0020      	movs	r0, r4
    456e:	f00e f8a7 	bl	126c0 <net_buf_unref>
		return -EINVAL;
    4572:	2016      	movs	r0, #22
    4574:	e012      	b.n	459c <bt_conn_send_cb+0x58>
	}

	if (conn->state != BT_CONN_CONNECTED) {
    4576:	002b      	movs	r3, r5
    4578:	3351      	adds	r3, #81	; 0x51
    457a:	781a      	ldrb	r2, [r3, #0]
    457c:	2a03      	cmp	r2, #3
    457e:	d00f      	beq.n	45a0 <bt_conn_send_cb+0x5c>
		BT_ERR("not connected!");
    4580:	4b0d      	ldr	r3, [pc, #52]	; (45b8 <bt_conn_send_cb+0x74>)
    4582:	4a0e      	ldr	r2, [pc, #56]	; (45bc <bt_conn_send_cb+0x78>)
    4584:	9301      	str	r3, [sp, #4]
    4586:	4b0e      	ldr	r3, [pc, #56]	; (45c0 <bt_conn_send_cb+0x7c>)
    4588:	490e      	ldr	r1, [pc, #56]	; (45c4 <bt_conn_send_cb+0x80>)
    458a:	9300      	str	r3, [sp, #0]
    458c:	4810      	ldr	r0, [pc, #64]	; (45d0 <bt_conn_send_cb+0x8c>)
    458e:	4b0f      	ldr	r3, [pc, #60]	; (45cc <bt_conn_send_cb+0x88>)
    4590:	f7fd f8ea 	bl	1768 <printk>
		net_buf_unref(buf);
    4594:	0020      	movs	r0, r4
    4596:	f00e f893 	bl	126c0 <net_buf_unref>
		return -ENOTCONN;
    459a:	2039      	movs	r0, #57	; 0x39
    459c:	4240      	negs	r0, r0
    459e:	e00a      	b.n	45b6 <bt_conn_send_cb+0x72>
	}

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
    45a0:	0028      	movs	r0, r5
		BT_ERR("not connected!");
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	conn_tx(buf)->cb = cb;
    45a2:	89e3      	ldrh	r3, [r4, #14]

	net_buf_put(&conn->tx_queue, buf);
    45a4:	3030      	adds	r0, #48	; 0x30
		BT_ERR("not connected!");
		net_buf_unref(buf);
		return -ENOTCONN;
	}

	conn_tx(buf)->cb = cb;
    45a6:	18e3      	adds	r3, r4, r3
    45a8:	3313      	adds	r3, #19
    45aa:	4393      	bics	r3, r2
    45ac:	601e      	str	r6, [r3, #0]

	net_buf_put(&conn->tx_queue, buf);
    45ae:	0021      	movs	r1, r4
    45b0:	f00e f877 	bl	126a2 <net_buf_put>
	return 0;
    45b4:	2000      	movs	r0, #0
}
    45b6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    45b8:	000145b0 	.word	0x000145b0
    45bc:	00014570 	.word	0x00014570
    45c0:	000145b5 	.word	0x000145b5
    45c4:	00014577 	.word	0x00014577
    45c8:	000148d5 	.word	0x000148d5
    45cc:	00016931 	.word	0x00016931
    45d0:	00014e1d 	.word	0x00014e1d

000045d4 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    45d4:	b570      	push	{r4, r5, r6, lr}
    45d6:	0005      	movs	r5, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    45d8:	0028      	movs	r0, r5
    45da:	2100      	movs	r1, #0
    45dc:	301c      	adds	r0, #28
    45de:	f00e ffff 	bl	135e0 <k_queue_get>
    45e2:	1e04      	subs	r4, r0, #0
    45e4:	d00f      	beq.n	4606 <bt_conn_notify_tx+0x32>
		if (tx->cb) {
    45e6:	6863      	ldr	r3, [r4, #4]
    45e8:	2b00      	cmp	r3, #0
    45ea:	d001      	beq.n	45f0 <bt_conn_notify_tx+0x1c>
			tx->cb(conn);
    45ec:	0028      	movs	r0, r5
    45ee:	4798      	blx	r3
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    45f0:	2300      	movs	r3, #0
    45f2:	6063      	str	r3, [r4, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    45f4:	4b04      	ldr	r3, [pc, #16]	; (4608 <bt_conn_notify_tx+0x34>)
    45f6:	681a      	ldr	r2, [r3, #0]
    45f8:	6022      	str	r2, [r4, #0]
	list->head = node;

	if (!list->tail) {
    45fa:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    45fc:	601c      	str	r4, [r3, #0]

	if (!list->tail) {
    45fe:	2a00      	cmp	r2, #0
    4600:	d1ea      	bne.n	45d8 <bt_conn_notify_tx+0x4>
		list->tail = list->head;
    4602:	605c      	str	r4, [r3, #4]
    4604:	e7e8      	b.n	45d8 <bt_conn_notify_tx+0x4>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    4606:	bd70      	pop	{r4, r5, r6, pc}
    4608:	20000aec 	.word	0x20000aec

0000460c <send_frag>:
	irq_unlock(key);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    460c:	b5f0      	push	{r4, r5, r6, r7, lr}
    460e:	000d      	movs	r5, r1

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    4610:	2101      	movs	r1, #1
	irq_unlock(key);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    4612:	0004      	movs	r4, r0

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    4614:	4e31      	ldr	r6, [pc, #196]	; (46dc <send_frag+0xd0>)
	irq_unlock(key);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    4616:	b087      	sub	sp, #28

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    4618:	4249      	negs	r1, r1
    461a:	0030      	movs	r0, r6
	irq_unlock(key);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    461c:	9305      	str	r3, [sp, #20]
    461e:	9204      	str	r2, [sp, #16]

	BT_DBG("conn %p buf %p len %u flags 0x%02x", conn, buf, buf->len,
	       flags);

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    4620:	f00f fa38 	bl	13a94 <k_sem_take>

	/* Make sure we notify and free up any pending tx contexts */
	bt_conn_notify_tx(conn);
    4624:	0020      	movs	r0, r4
    4626:	f7ff ffd5 	bl	45d4 <bt_conn_notify_tx>

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    462a:	0023      	movs	r3, r4
    462c:	3351      	adds	r3, #81	; 0x51
    462e:	781f      	ldrb	r7, [r3, #0]
    4630:	2f03      	cmp	r7, #3
    4632:	d145      	bne.n	46c0 <send_frag+0xb4>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    4634:	0028      	movs	r0, r5
    4636:	2104      	movs	r1, #4
    4638:	3008      	adds	r0, #8
    463a:	f00e f87c 	bl	12736 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    463e:	9b04      	ldr	r3, [sp, #16]
    4640:	8822      	ldrh	r2, [r4, #0]
    4642:	031b      	lsls	r3, r3, #12
    4644:	4313      	orrs	r3, r2
    4646:	2202      	movs	r2, #2
    4648:	b29b      	uxth	r3, r3
    464a:	7003      	strb	r3, [r0, #0]
    464c:	0a1b      	lsrs	r3, r3, #8
    464e:	7043      	strb	r3, [r0, #1]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4650:	89ab      	ldrh	r3, [r5, #12]
    4652:	3b04      	subs	r3, #4
    4654:	b29b      	uxth	r3, r3
    4656:	7083      	strb	r3, [r0, #2]
    4658:	0a1b      	lsrs	r3, r3, #8
    465a:	70c3      	strb	r3, [r0, #3]
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    465c:	89eb      	ldrh	r3, [r5, #14]

	cb = conn_tx(buf)->cb;
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    465e:	0028      	movs	r0, r5
    4660:	18eb      	adds	r3, r5, r3
    4662:	3313      	adds	r3, #19
    4664:	43bb      	bics	r3, r7

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));

	cb = conn_tx(buf)->cb;
    4666:	681f      	ldr	r7, [r3, #0]
    4668:	701a      	strb	r2, [r3, #0]
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	err = bt_send(buf);
    466a:	f7fe fb59 	bl	2d20 <bt_send>
	if (err) {
    466e:	2800      	cmp	r0, #0
    4670:	d00b      	beq.n	468a <send_frag+0x7e>
		BT_ERR("Unable to send to driver (err %d)", err);
    4672:	4b1b      	ldr	r3, [pc, #108]	; (46e0 <send_frag+0xd4>)
    4674:	9001      	str	r0, [sp, #4]
    4676:	9302      	str	r3, [sp, #8]
    4678:	4b1a      	ldr	r3, [pc, #104]	; (46e4 <send_frag+0xd8>)
    467a:	4a1b      	ldr	r2, [pc, #108]	; (46e8 <send_frag+0xdc>)
    467c:	9300      	str	r3, [sp, #0]
    467e:	491b      	ldr	r1, [pc, #108]	; (46ec <send_frag+0xe0>)
    4680:	4b1b      	ldr	r3, [pc, #108]	; (46f0 <send_frag+0xe4>)
    4682:	481c      	ldr	r0, [pc, #112]	; (46f4 <send_frag+0xe8>)
    4684:	f7fd f870 	bl	1768 <printk>
		goto fail;
    4688:	e01a      	b.n	46c0 <send_frag+0xb4>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;
    468a:	4a1b      	ldr	r2, [pc, #108]	; (46f8 <send_frag+0xec>)
    468c:	6813      	ldr	r3, [r2, #0]

	list->head = node->next;
	if (list->tail == node) {
    468e:	6850      	ldr	r0, [r2, #4]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    4690:	6819      	ldr	r1, [r3, #0]
    4692:	6011      	str	r1, [r2, #0]
	if (list->tail == node) {
    4694:	4283      	cmp	r3, r0
    4696:	d100      	bne.n	469a <send_frag+0x8e>
		list->tail = list->head;
    4698:	6051      	str	r1, [r2, #4]
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    469a:	605f      	str	r7, [r3, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    469c:	f3ef 8110 	mrs	r1, PRIMASK
    46a0:	b672      	cpsid	i
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    46a2:	2200      	movs	r2, #0
    46a4:	601a      	str	r2, [r3, #0]

	if (!list->tail) {
    46a6:	69a2      	ldr	r2, [r4, #24]
    46a8:	2a00      	cmp	r2, #0
    46aa:	d102      	bne.n	46b2 <send_frag+0xa6>
		list->tail = node;
    46ac:	61a3      	str	r3, [r4, #24]
		list->head = node;
    46ae:	6163      	str	r3, [r4, #20]
    46b0:	e001      	b.n	46b6 <send_frag+0xaa>
	} else {
		list->tail->next = node;
    46b2:	6013      	str	r3, [r2, #0]
		list->tail = node;
    46b4:	61a3      	str	r3, [r4, #24]
		BT_ERR("Unable to send to driver (err %d)", err);
		goto fail;
	}

	add_pending_tx(conn, cb);
	return true;
    46b6:	2401      	movs	r4, #1
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    46b8:	2900      	cmp	r1, #0
    46ba:	d10b      	bne.n	46d4 <send_frag+0xc8>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    46bc:	b662      	cpsie	i
    46be:	e009      	b.n	46d4 <send_frag+0xc8>
fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
		net_buf_unref(buf);
	}
	return false;
    46c0:	2400      	movs	r4, #0

	add_pending_tx(conn, cb);
	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
    46c2:	0030      	movs	r0, r6
    46c4:	f00f f9aa 	bl	13a1c <k_sem_give>
	if (always_consume) {
    46c8:	9b05      	ldr	r3, [sp, #20]
    46ca:	42a3      	cmp	r3, r4
    46cc:	d002      	beq.n	46d4 <send_frag+0xc8>
		net_buf_unref(buf);
    46ce:	0028      	movs	r0, r5
    46d0:	f00d fff6 	bl	126c0 <net_buf_unref>
	}
	return false;
}
    46d4:	0020      	movs	r0, r4
    46d6:	b007      	add	sp, #28
    46d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46da:	46c0      	nop			; (mov r8, r8)
    46dc:	20000334 	.word	0x20000334
    46e0:	000145b0 	.word	0x000145b0
    46e4:	000145b5 	.word	0x000145b5
    46e8:	00014570 	.word	0x00014570
    46ec:	00014577 	.word	0x00014577
    46f0:	0001691a 	.word	0x0001691a
    46f4:	000147f8 	.word	0x000147f8
    46f8:	20000aec 	.word	0x20000aec

000046fc <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    46fc:	2200      	movs	r2, #0
    46fe:	4b1d      	ldr	r3, [pc, #116]	; (4774 <bt_conn_prepare_events+0x78>)
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    4700:	b570      	push	{r4, r5, r6, lr}
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4702:	2101      	movs	r1, #1
	 */
	bt_conn_unref(conn);
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    4704:	0005      	movs	r5, r0
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0;
    4706:	605a      	str	r2, [r3, #4]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    4708:	f00e fd5a 	bl	131c0 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    470c:	4c1a      	ldr	r4, [pc, #104]	; (4778 <bt_conn_prepare_events+0x7c>)
    470e:	0020      	movs	r0, r4
    4710:	304c      	adds	r0, #76	; 0x4c
    4712:	f00e fabc 	bl	12c8e <atomic_get>
    4716:	0026      	movs	r6, r4
    4718:	2800      	cmp	r0, #0
    471a:	d00e      	beq.n	473a <bt_conn_prepare_events+0x3e>
			continue;
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
    471c:	0023      	movs	r3, r4
    471e:	3351      	adds	r3, #81	; 0x51
    4720:	781b      	ldrb	r3, [r3, #0]
    4722:	2b00      	cmp	r3, #0
    4724:	d10b      	bne.n	473e <bt_conn_prepare_events+0x42>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4726:	2141      	movs	r1, #65	; 0x41
    4728:	1d20      	adds	r0, r4, #4
    472a:	4249      	negs	r1, r1
    472c:	f00e fac6 	bl	12cbc <atomic_and>
    4730:	0643      	lsls	r3, r0, #25
    4732:	d504      	bpl.n	473e <bt_conn_prepare_events+0x42>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
    4734:	0020      	movs	r0, r4
    4736:	f7ff fdb7 	bl	42a8 <conn_cleanup>
			continue;
    473a:	2001      	movs	r0, #1
    473c:	e019      	b.n	4772 <bt_conn_prepare_events+0x76>
		}

		if (conn->state != BT_CONN_CONNECTED) {
    473e:	0033      	movs	r3, r6
    4740:	3351      	adds	r3, #81	; 0x51
    4742:	781c      	ldrb	r4, [r3, #0]
    4744:	2c03      	cmp	r4, #3
    4746:	d1f8      	bne.n	473a <bt_conn_prepare_events+0x3e>
			continue;
		}

		BT_DBG("Adding conn %p to poll list", conn);

		k_poll_event_init(&events[ev_count],
    4748:	0033      	movs	r3, r6
    474a:	0028      	movs	r0, r5
    474c:	3330      	adds	r3, #48	; 0x30
    474e:	300c      	adds	r0, #12
    4750:	2200      	movs	r2, #0
    4752:	2104      	movs	r1, #4
    4754:	f00e fd34 	bl	131c0 <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    4758:	2302      	movs	r3, #2

		k_poll_event_init(&events[ev_count],
    475a:	0028      	movs	r0, r5

		k_poll_event_init(&events[ev_count],
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    475c:	742b      	strb	r3, [r5, #16]

		k_poll_event_init(&events[ev_count],
    475e:	0033      	movs	r3, r6
    4760:	3018      	adds	r0, #24
    4762:	331c      	adds	r3, #28
    4764:	2200      	movs	r2, #0
    4766:	2104      	movs	r1, #4
    4768:	f00e fd2a 	bl	131c0 <k_poll_event_init>
				  K_POLL_TYPE_FIFO_DATA_AVAILABLE,
				  K_POLL_MODE_NOTIFY_ONLY,
				  &conn->tx_notify);
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    476c:	2301      	movs	r3, #1
    476e:	0020      	movs	r0, r4
    4770:	772b      	strb	r3, [r5, #28]
	}

	return ev_count;
}
    4772:	bd70      	pop	{r4, r5, r6, pc}
    4774:	20000af4 	.word	0x20000af4
    4778:	20000b14 	.word	0x20000b14

0000477c <bt_conn_add_le>:
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    477e:	4c16      	ldr	r4, [pc, #88]	; (47d8 <bt_conn_add_le+0x5c>)
		net_buf_unref(buf);
	}
}

struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
    4780:	0007      	movs	r7, r0
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4782:	0026      	movs	r6, r4
    4784:	364c      	adds	r6, #76	; 0x4c
    4786:	0030      	movs	r0, r6
    4788:	f00e fa81 	bl	12c8e <atomic_get>
    478c:	0005      	movs	r5, r0
struct bt_conn *bt_conn_add_le(const bt_addr_le_t *peer)
{
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    478e:	2000      	movs	r0, #0
{
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4790:	2d00      	cmp	r5, #0
    4792:	d120      	bne.n	47d6 <bt_conn_add_le+0x5a>

	if (!conn) {
		return NULL;
	}

	memset(conn, 0, sizeof(*conn));
    4794:	22a8      	movs	r2, #168	; 0xa8
    4796:	0029      	movs	r1, r5
    4798:	0020      	movs	r0, r4
    479a:	f7fc fe0d 	bl	13b8 <memset>

	atomic_set(&conn->ref, 1);
    479e:	2101      	movs	r1, #1
    47a0:	0030      	movs	r0, r6
    47a2:	f00e fa76 	bl	12c92 <atomic_set>
    47a6:	0020      	movs	r0, r4
    47a8:	2207      	movs	r2, #7
    47aa:	0039      	movs	r1, r7
    47ac:	3054      	adds	r0, #84	; 0x54
    47ae:	f7fc fdd9 	bl	1364 <memcpy>
		return NULL;
	}

	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BLUETOOTH_SMP)
	conn->sec_level = BT_SECURITY_LOW;
    47b2:	2301      	movs	r3, #1
    47b4:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    47b6:	7263      	strb	r3, [r4, #9]
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    47b8:	0023      	movs	r3, r4
    47ba:	2218      	movs	r2, #24
    47bc:	336c      	adds	r3, #108	; 0x6c
    47be:	801a      	strh	r2, [r3, #0]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    47c0:	0023      	movs	r3, r4
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    47c2:	0020      	movs	r0, r4
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    47c4:	336e      	adds	r3, #110	; 0x6e
    47c6:	3210      	adds	r2, #16
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    47c8:	3080      	adds	r0, #128	; 0x80
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BLUETOOTH_SMP)
	conn->sec_level = BT_SECURITY_LOW;
	conn->required_sec_level = BT_SECURITY_LOW;
#endif /* CONFIG_BLUETOOTH_SMP */
	conn->type = BT_CONN_TYPE_LE;
    47ca:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    47cc:	801a      	strh	r2, [r3, #0]
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    47ce:	4903      	ldr	r1, [pc, #12]	; (47dc <bt_conn_add_le+0x60>)
    47d0:	f00f fbf0 	bl	13fb4 <k_delayed_work_init>
	struct bt_conn *conn = NULL;
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
			conn = &conns[i];
    47d4:	0020      	movs	r0, r4
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
	k_delayed_work_init(&conn->le.update_work, le_conn_update);

	return conn;
}
    47d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47d8:	20000b14 	.word	0x20000b14
    47dc:	00004ba5 	.word	0x00004ba5

000047e0 <bt_conn_set_state>:
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    47e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    47e2:	0007      	movs	r7, r0
    47e4:	3751      	adds	r7, #81	; 0x51
    47e6:	783d      	ldrb	r5, [r7, #0]
		k_sem_give(bt_conn_get_pkts(conn));
	}
}

void bt_conn_set_state(struct bt_conn *conn, bt_conn_state_t state)
{
    47e8:	b085      	sub	sp, #20
    47ea:	0004      	movs	r4, r0
    47ec:	000e      	movs	r6, r1
	bt_conn_state_t old_state;

	BT_DBG("%s -> %s", state2str(conn->state), state2str(state));

	if (conn->state == state) {
    47ee:	428d      	cmp	r5, r1
    47f0:	d10a      	bne.n	4808 <bt_conn_set_state+0x28>
		BT_WARN("no transition");
    47f2:	4b4d      	ldr	r3, [pc, #308]	; (4928 <bt_conn_set_state+0x148>)
    47f4:	4a4d      	ldr	r2, [pc, #308]	; (492c <bt_conn_set_state+0x14c>)
    47f6:	9301      	str	r3, [sp, #4]
    47f8:	4b4d      	ldr	r3, [pc, #308]	; (4930 <bt_conn_set_state+0x150>)
    47fa:	494e      	ldr	r1, [pc, #312]	; (4934 <bt_conn_set_state+0x154>)
    47fc:	9300      	str	r3, [sp, #0]
    47fe:	484e      	ldr	r0, [pc, #312]	; (4938 <bt_conn_set_state+0x158>)
    4800:	4b4e      	ldr	r3, [pc, #312]	; (493c <bt_conn_set_state+0x15c>)
    4802:	f7fc ffb1 	bl	1768 <printk>
		return;
    4806:	e08d      	b.n	4924 <bt_conn_set_state+0x144>
	}

	old_state = conn->state;
	conn->state = state;
    4808:	7039      	strb	r1, [r7, #0]

	/* Actions needed for exiting the old state */
	switch (old_state) {
    480a:	2d00      	cmp	r5, #0
    480c:	d102      	bne.n	4814 <bt_conn_set_state+0x34>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    480e:	304c      	adds	r0, #76	; 0x4c
    4810:	f00e fa27 	bl	12c62 <atomic_inc>
	default:
		break;
	}

	/* Actions needed for entering the new state */
	switch (conn->state) {
    4814:	7838      	ldrb	r0, [r7, #0]
    4816:	2804      	cmp	r0, #4
    4818:	d865      	bhi.n	48e6 <bt_conn_set_state+0x106>
    481a:	f7fb fcad 	bl	178 <__gnu_thumb1_case_uqi>
    481e:	831c      	.short	0x831c
    4820:	0383      	.short	0x0383
    4822:	83          	.byte	0x83
    4823:	00          	.byte	0x00
	case BT_CONN_CONNECTED:
		if (conn->type == BT_CONN_TYPE_SCO) {
    4824:	78a3      	ldrb	r3, [r4, #2]
    4826:	2b02      	cmp	r3, #2
    4828:	d07c      	beq.n	4924 <bt_conn_set_state+0x144>
			/* TODO: Notify sco connected */
			break;
		}
		k_fifo_init(&conn->tx_queue);
    482a:	0020      	movs	r0, r4
    482c:	3030      	adds	r0, #48	; 0x30
    482e:	f00e fe3b 	bl	134a8 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    4832:	0020      	movs	r0, r4
    4834:	301c      	adds	r0, #28
    4836:	f00e fe37 	bl	134a8 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    483a:	2100      	movs	r1, #0
    483c:	4840      	ldr	r0, [pc, #256]	; (4940 <bt_conn_set_state+0x160>)
    483e:	f00e fda1 	bl	13384 <k_poll_signal>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    4842:	2300      	movs	r3, #0

		sys_slist_init(&conn->channels);

		bt_l2cap_connected(conn);
    4844:	0020      	movs	r0, r4
    4846:	6463      	str	r3, [r4, #68]	; 0x44
	list->tail = NULL;
    4848:	64a3      	str	r3, [r4, #72]	; 0x48
    484a:	f000 fb3d 	bl	4ec8 <bt_l2cap_connected>
		notify_connected(conn);
    484e:	0020      	movs	r0, r4
    4850:	f7ff fd0a 	bl	4268 <notify_connected>
		break;
    4854:	e066      	b.n	4924 <bt_conn_set_state+0x144>
	case BT_CONN_DISCONNECTED:
		if (conn->type == BT_CONN_TYPE_SCO) {
    4856:	78a3      	ldrb	r3, [r4, #2]
    4858:	2b02      	cmp	r3, #2
    485a:	d037      	beq.n	48cc <bt_conn_set_state+0xec>
		}
		/* Notify disconnection and queue a dummy buffer to wake
		 * up and stop the tx thread for states where it was
		 * running.
		 */
		if (old_state == BT_CONN_CONNECTED ||
    485c:	1eeb      	subs	r3, r5, #3
    485e:	2b01      	cmp	r3, #1
    4860:	d82f      	bhi.n	48c2 <bt_conn_set_state+0xe2>
		    old_state == BT_CONN_DISCONNECT) {
			bt_l2cap_disconnected(conn);
    4862:	0020      	movs	r0, r4
    4864:	f000 fb6a 	bl	4f3c <bt_l2cap_disconnected>

static void notify_disconnected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4868:	4b36      	ldr	r3, [pc, #216]	; (4944 <bt_conn_set_state+0x164>)
    486a:	681d      	ldr	r5, [r3, #0]
    486c:	2d00      	cmp	r5, #0
    486e:	d01b      	beq.n	48a8 <bt_conn_set_state+0xc8>
		if (cb->disconnected) {
    4870:	686b      	ldr	r3, [r5, #4]
    4872:	2b00      	cmp	r3, #0
    4874:	d004      	beq.n	4880 <bt_conn_set_state+0xa0>
			cb->disconnected(conn, conn->err);
    4876:	0022      	movs	r2, r4
    4878:	3250      	adds	r2, #80	; 0x50
    487a:	7811      	ldrb	r1, [r2, #0]
    487c:	0020      	movs	r0, r4
    487e:	4798      	blx	r3

static void notify_disconnected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4880:	69ad      	ldr	r5, [r5, #24]
    4882:	e7f3      	b.n	486c <bt_conn_set_state+0x8c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    4884:	2a00      	cmp	r2, #0
    4886:	d13a      	bne.n	48fe <bt_conn_set_state+0x11e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
    4888:	b662      	cpsie	i

		key = irq_lock();
		node = sys_slist_get(&conn->tx_pending);
		irq_unlock(key);

		if (!node) {
    488a:	2b00      	cmp	r3, #0
    488c:	d037      	beq.n	48fe <bt_conn_set_state+0x11e>
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    488e:	2200      	movs	r2, #0
    4890:	605a      	str	r2, [r3, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    4892:	4a2d      	ldr	r2, [pc, #180]	; (4948 <bt_conn_set_state+0x168>)
    4894:	6811      	ldr	r1, [r2, #0]
    4896:	6019      	str	r1, [r3, #0]
	list->head = node;

	if (!list->tail) {
    4898:	6851      	ldr	r1, [r2, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
    489a:	6013      	str	r3, [r2, #0]

	if (!list->tail) {
    489c:	2900      	cmp	r1, #0
    489e:	d100      	bne.n	48a2 <bt_conn_set_state+0xc2>
		list->tail = list->head;
    48a0:	6053      	str	r3, [r2, #4]
			break;
		}

		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));

		k_sem_give(bt_conn_get_pkts(conn));
    48a2:	482a      	ldr	r0, [pc, #168]	; (494c <bt_conn_set_state+0x16c>)
    48a4:	f00f f8ba 	bl	13a1c <k_sem_give>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
    48a8:	f3ef 8210 	mrs	r2, PRIMASK
    48ac:	b672      	cpsid	i
    48ae:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    48b0:	2b00      	cmp	r3, #0
    48b2:	d0e7      	beq.n	4884 <bt_conn_set_state+0xa4>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    48b4:	6819      	ldr	r1, [r3, #0]
	if (list->tail == node) {
    48b6:	69a0      	ldr	r0, [r4, #24]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    48b8:	6161      	str	r1, [r4, #20]
	if (list->tail == node) {
    48ba:	4283      	cmp	r3, r0
    48bc:	d12f      	bne.n	491e <bt_conn_set_state+0x13e>
		list->tail = list->head;
    48be:	61a1      	str	r1, [r4, #24]
    48c0:	e02d      	b.n	491e <bt_conn_set_state+0x13e>
			}

			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
			k_poll_signal(&conn_change, 0);
			/* The last ref will be dropped by the tx_thread */
		} else if (old_state == BT_CONN_CONNECT) {
    48c2:	2d02      	cmp	r5, #2
    48c4:	d107      	bne.n	48d6 <bt_conn_set_state+0xf6>
			/* conn->err will be set in this case */
			notify_connected(conn);
    48c6:	0020      	movs	r0, r4
    48c8:	f7ff fcce 	bl	4268 <notify_connected>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    48cc:	0020      	movs	r0, r4
    48ce:	304c      	adds	r0, #76	; 0x4c
    48d0:	f00e f9d2 	bl	12c78 <atomic_dec>
    48d4:	e026      	b.n	4924 <bt_conn_set_state+0x144>
			/* The last ref will be dropped by the tx_thread */
		} else if (old_state == BT_CONN_CONNECT) {
			/* conn->err will be set in this case */
			notify_connected(conn);
			bt_conn_unref(conn);
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    48d6:	2d01      	cmp	r5, #1
    48d8:	d124      	bne.n	4924 <bt_conn_set_state+0x144>
			/* this indicate LE Create Connection failed */
			if (conn->err) {
    48da:	0023      	movs	r3, r4
    48dc:	3350      	adds	r3, #80	; 0x50
    48de:	781b      	ldrb	r3, [r3, #0]
    48e0:	2b00      	cmp	r3, #0
    48e2:	d0f3      	beq.n	48cc <bt_conn_set_state+0xec>
    48e4:	e7ef      	b.n	48c6 <bt_conn_set_state+0xe6>

		break;
	case BT_CONN_DISCONNECT:
		break;
	default:
		BT_WARN("no valid (%u) state was set", state);
    48e6:	4b10      	ldr	r3, [pc, #64]	; (4928 <bt_conn_set_state+0x148>)
    48e8:	9601      	str	r6, [sp, #4]
    48ea:	9302      	str	r3, [sp, #8]
    48ec:	4b10      	ldr	r3, [pc, #64]	; (4930 <bt_conn_set_state+0x150>)
    48ee:	4a0f      	ldr	r2, [pc, #60]	; (492c <bt_conn_set_state+0x14c>)
    48f0:	9300      	str	r3, [sp, #0]
    48f2:	4910      	ldr	r1, [pc, #64]	; (4934 <bt_conn_set_state+0x154>)
    48f4:	4b11      	ldr	r3, [pc, #68]	; (493c <bt_conn_set_state+0x15c>)
    48f6:	4816      	ldr	r0, [pc, #88]	; (4950 <bt_conn_set_state+0x170>)
    48f8:	f7fc ff36 	bl	1768 <printk>

		break;
    48fc:	e012      	b.n	4924 <bt_conn_set_state+0x144>
			bt_l2cap_disconnected(conn);
			notify_disconnected(conn);
			process_unack_tx(conn);

			/* Cancel Connection Update if it is pending */
			if (conn->type == BT_CONN_TYPE_LE) {
    48fe:	78a3      	ldrb	r3, [r4, #2]
    4900:	2b00      	cmp	r3, #0
    4902:	d103      	bne.n	490c <bt_conn_set_state+0x12c>
				k_delayed_work_cancel(&conn->le.update_work);
    4904:	0020      	movs	r0, r4
    4906:	3080      	adds	r0, #128	; 0x80
    4908:	f00f fb6a 	bl	13fe0 <k_delayed_work_cancel>
			}

			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    490c:	1d20      	adds	r0, r4, #4
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    490e:	2140      	movs	r1, #64	; 0x40
    4910:	f00e f9c9 	bl	12ca6 <atomic_or>
			k_poll_signal(&conn_change, 0);
    4914:	2100      	movs	r1, #0
    4916:	480a      	ldr	r0, [pc, #40]	; (4940 <bt_conn_set_state+0x160>)
    4918:	f00e fd34 	bl	13384 <k_poll_signal>
    491c:	e002      	b.n	4924 <bt_conn_set_state+0x144>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
    491e:	2a00      	cmp	r2, #0
    4920:	d1b5      	bne.n	488e <bt_conn_set_state+0xae>
    4922:	e7b1      	b.n	4888 <bt_conn_set_state+0xa8>
	default:
		BT_WARN("no valid (%u) state was set", state);

		break;
	}
}
    4924:	b005      	add	sp, #20
    4926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4928:	000145b0 	.word	0x000145b0
    492c:	000145bd 	.word	0x000145bd
    4930:	000145fb 	.word	0x000145fb
    4934:	00014577 	.word	0x00014577
    4938:	00014e3c 	.word	0x00014e3c
    493c:	000168e4 	.word	0x000168e4
    4940:	20000af4 	.word	0x20000af4
    4944:	20000b10 	.word	0x20000b10
    4948:	20000aec 	.word	0x20000aec
    494c:	20000334 	.word	0x20000334
    4950:	00014e5a 	.word	0x00014e5a

00004954 <bt_conn_lookup_handle>:

struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
    4954:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4956:	4c0c      	ldr	r4, [pc, #48]	; (4988 <bt_conn_lookup_handle+0x34>)
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
    4958:	0006      	movs	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    495a:	0025      	movs	r5, r4
    495c:	354c      	adds	r5, #76	; 0x4c
    495e:	0028      	movs	r0, r5
    4960:	f00e f995 	bl	12c8e <atomic_get>
			return bt_conn_ref(&sco_conns[i]);
		}
	}
#endif

	return NULL;
    4964:	2200      	movs	r2, #0
struct bt_conn *bt_conn_lookup_handle(u16_t handle)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4966:	4290      	cmp	r0, r2
    4968:	d00c      	beq.n	4984 <bt_conn_lookup_handle+0x30>
			continue;
		}

		/* We only care about connections with a valid handle */
		if (conns[i].state != BT_CONN_CONNECTED &&
    496a:	0023      	movs	r3, r4
    496c:	3351      	adds	r3, #81	; 0x51
    496e:	781b      	ldrb	r3, [r3, #0]
    4970:	3b03      	subs	r3, #3
    4972:	2b01      	cmp	r3, #1
    4974:	d806      	bhi.n	4984 <bt_conn_lookup_handle+0x30>
		    conns[i].state != BT_CONN_DISCONNECT) {
			continue;
		}

		if (conns[i].handle == handle) {
    4976:	8823      	ldrh	r3, [r4, #0]
    4978:	42b3      	cmp	r3, r6
    497a:	d103      	bne.n	4984 <bt_conn_lookup_handle+0x30>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    497c:	0028      	movs	r0, r5
    497e:	f00e f970 	bl	12c62 <atomic_inc>
		    conns[i].state != BT_CONN_DISCONNECT) {
			continue;
		}

		if (conns[i].handle == handle) {
			return bt_conn_ref(&conns[i]);
    4982:	0022      	movs	r2, r4
		}
	}
#endif

	return NULL;
}
    4984:	0010      	movs	r0, r2
    4986:	bd70      	pop	{r4, r5, r6, pc}
    4988:	20000b14 	.word	0x20000b14

0000498c <bt_conn_addr_le_cmp>:

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    498c:	b570      	push	{r4, r5, r6, lr}
    498e:	000d      	movs	r5, r1
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    4990:	0001      	movs	r1, r0

	return NULL;
}

int bt_conn_addr_le_cmp(const struct bt_conn *conn, const bt_addr_le_t *peer)
{
    4992:	0004      	movs	r4, r0
	/* Check against conn dst address as it may be the identity address */
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    4994:	3154      	adds	r1, #84	; 0x54
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    4996:	2207      	movs	r2, #7
    4998:	0028      	movs	r0, r5
    499a:	f7fc fcbb 	bl	1314 <memcmp>
    499e:	2800      	cmp	r0, #0
    49a0:	d00a      	beq.n	49b8 <bt_conn_addr_le_cmp+0x2c>
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    49a2:	78e3      	ldrb	r3, [r4, #3]
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    49a4:	0021      	movs	r1, r4
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
		return 0;
	}

	/* Check against initial connection address */
	if (conn->role == BT_HCI_ROLE_MASTER) {
    49a6:	2b00      	cmp	r3, #0
    49a8:	d101      	bne.n	49ae <bt_conn_addr_le_cmp+0x22>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    49aa:	3162      	adds	r1, #98	; 0x62
    49ac:	e000      	b.n	49b0 <bt_conn_addr_le_cmp+0x24>
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
    49ae:	315b      	adds	r1, #91	; 0x5b
    49b0:	2207      	movs	r2, #7
    49b2:	0028      	movs	r0, r5
    49b4:	f7fc fcae 	bl	1314 <memcmp>
}
    49b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000049bc <bt_conn_lookup_addr_le>:

struct bt_conn *bt_conn_lookup_addr_le(const bt_addr_le_t *peer)
{
    49bc:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    49be:	4c0c      	ldr	r4, [pc, #48]	; (49f0 <bt_conn_lookup_addr_le+0x34>)

	return bt_addr_le_cmp(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(const bt_addr_le_t *peer)
{
    49c0:	0006      	movs	r6, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    49c2:	0025      	movs	r5, r4
    49c4:	354c      	adds	r5, #76	; 0x4c
    49c6:	0028      	movs	r0, r5
    49c8:	f00e f961 	bl	12c8e <atomic_get>
    49cc:	2800      	cmp	r0, #0
    49ce:	d00d      	beq.n	49ec <bt_conn_lookup_addr_le+0x30>
			continue;
		}

		if (conns[i].type != BT_CONN_TYPE_LE) {
    49d0:	78a3      	ldrb	r3, [r4, #2]
    49d2:	2b00      	cmp	r3, #0
    49d4:	d10a      	bne.n	49ec <bt_conn_lookup_addr_le+0x30>
			continue;
		}

		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    49d6:	0031      	movs	r1, r6
    49d8:	0020      	movs	r0, r4
    49da:	f7ff ffd7 	bl	498c <bt_conn_addr_le_cmp>
    49de:	2800      	cmp	r0, #0
    49e0:	d104      	bne.n	49ec <bt_conn_lookup_addr_le+0x30>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    49e2:	0028      	movs	r0, r5
    49e4:	f00e f93d 	bl	12c62 <atomic_inc>

		if (conns[i].type != BT_CONN_TYPE_LE) {
			continue;
		}

		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    49e8:	0020      	movs	r0, r4
			return bt_conn_ref(&conns[i]);
    49ea:	e000      	b.n	49ee <bt_conn_lookup_addr_le+0x32>
		}
	}

	return NULL;
    49ec:	2000      	movs	r0, #0
}
    49ee:	bd70      	pop	{r4, r5, r6, pc}
    49f0:	20000b14 	.word	0x20000b14

000049f4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    49f4:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    49f6:	4c10      	ldr	r4, [pc, #64]	; (4a38 <bt_conn_lookup_state_le+0x44>)
	return NULL;
}

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    49f8:	0005      	movs	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    49fa:	0020      	movs	r0, r4
    49fc:	304c      	adds	r0, #76	; 0x4c
	return NULL;
}

struct bt_conn *bt_conn_lookup_state_le(const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    49fe:	000e      	movs	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    4a00:	f00e f945 	bl	12c8e <atomic_get>
    4a04:	2800      	cmp	r0, #0
    4a06:	d015      	beq.n	4a34 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conns[i].type != BT_CONN_TYPE_LE) {
    4a08:	78a3      	ldrb	r3, [r4, #2]
    4a0a:	2b00      	cmp	r3, #0
    4a0c:	d112      	bne.n	4a34 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4a0e:	2d00      	cmp	r5, #0
    4a10:	d10a      	bne.n	4a28 <bt_conn_lookup_state_le+0x34>
			continue;
		}

		if (conns[i].state == state) {
    4a12:	0023      	movs	r3, r4
    4a14:	3351      	adds	r3, #81	; 0x51
    4a16:	781b      	ldrb	r3, [r3, #0]
    4a18:	42b3      	cmp	r3, r6
    4a1a:	d10b      	bne.n	4a34 <bt_conn_lookup_state_le+0x40>
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_inc(&conn->ref);
    4a1c:	0020      	movs	r0, r4
    4a1e:	304c      	adds	r0, #76	; 0x4c
    4a20:	f00e f91f 	bl	12c62 <atomic_inc>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
			continue;
		}

		if (conns[i].state == state) {
			return bt_conn_ref(&conns[i]);
    4a24:	0020      	movs	r0, r4
    4a26:	e006      	b.n	4a36 <bt_conn_lookup_state_le+0x42>

		if (conns[i].type != BT_CONN_TYPE_LE) {
			continue;
		}

		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    4a28:	0029      	movs	r1, r5
    4a2a:	0020      	movs	r0, r4
    4a2c:	f7ff ffae 	bl	498c <bt_conn_addr_le_cmp>
    4a30:	2800      	cmp	r0, #0
    4a32:	d0ee      	beq.n	4a12 <bt_conn_lookup_state_le+0x1e>
		if (conns[i].state == state) {
			return bt_conn_ref(&conns[i]);
		}
	}

	return NULL;
    4a34:	2000      	movs	r0, #0
}
    4a36:	bd70      	pop	{r4, r5, r6, pc}
    4a38:	20000b14 	.word	0x20000b14

00004a3c <bt_conn_ref>:
		}
	}
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
    4a3c:	b510      	push	{r4, lr}
    4a3e:	0004      	movs	r4, r0
	atomic_inc(&conn->ref);
    4a40:	304c      	adds	r0, #76	; 0x4c
    4a42:	f00e f90e 	bl	12c62 <atomic_inc>

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));

	return conn;
}
    4a46:	0020      	movs	r0, r4
    4a48:	bd10      	pop	{r4, pc}

00004a4a <bt_conn_unref>:

void bt_conn_unref(struct bt_conn *conn)
{
    4a4a:	b510      	push	{r4, lr}
	atomic_dec(&conn->ref);
    4a4c:	304c      	adds	r0, #76	; 0x4c
    4a4e:	f00e f913 	bl	12c78 <atomic_dec>

	BT_DBG("handle %u ref %u", conn->handle, atomic_get(&conn->ref));
}
    4a52:	bd10      	pop	{r4, pc}

00004a54 <bt_conn_get_dst>:

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
    4a54:	3054      	adds	r0, #84	; 0x54
}
    4a56:	4770      	bx	lr

00004a58 <bt_conn_disconnect>:
	if (IS_ENABLED(CONFIG_BLUETOOTH_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4a58:	0003      	movs	r3, r0
	 */
	return bt_l2cap_update_conn_param(conn, param);
}

int bt_conn_disconnect(struct bt_conn *conn, u8_t reason)
{
    4a5a:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BLUETOOTH_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4a5c:	3351      	adds	r3, #81	; 0x51
	 */
	return bt_l2cap_update_conn_param(conn, param);
}

int bt_conn_disconnect(struct bt_conn *conn, u8_t reason)
{
    4a5e:	0005      	movs	r5, r0
	if (IS_ENABLED(CONFIG_BLUETOOTH_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4a60:	7818      	ldrb	r0, [r3, #0]
	 */
	return bt_l2cap_update_conn_param(conn, param);
}

int bt_conn_disconnect(struct bt_conn *conn, u8_t reason)
{
    4a62:	000c      	movs	r4, r1
	if (IS_ENABLED(CONFIG_BLUETOOTH_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4a64:	3801      	subs	r0, #1
    4a66:	2803      	cmp	r0, #3
    4a68:	d803      	bhi.n	4a72 <bt_conn_disconnect+0x1a>
    4a6a:	f7fb fb85 	bl	178 <__gnu_thumb1_case_uqi>
    4a6e:	2904      	.short	0x2904
    4a70:	290f      	.short	0x290f
		return bt_hci_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
    4a72:	2439      	movs	r4, #57	; 0x39
    4a74:	e027      	b.n	4ac6 <bt_conn_disconnect+0x6e>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
	case BT_CONN_CONNECT_SCAN:
		conn->err = reason;
    4a76:	002b      	movs	r3, r5
    4a78:	3350      	adds	r3, #80	; 0x50
    4a7a:	7019      	strb	r1, [r3, #0]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4a7c:	0028      	movs	r0, r5
    4a7e:	2100      	movs	r1, #0
    4a80:	f7ff feae 	bl	47e0 <bt_conn_set_state>
		bt_le_scan_update(false);
    4a84:	2000      	movs	r0, #0
    4a86:	f7fd fdf1 	bl	266c <bt_le_scan_update>
    4a8a:	e019      	b.n	4ac0 <bt_conn_disconnect+0x68>
{
	struct net_buf *buf;
	struct bt_hci_cp_disconnect *disconn;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    4a8c:	2103      	movs	r1, #3
    4a8e:	480f      	ldr	r0, [pc, #60]	; (4acc <bt_conn_disconnect+0x74>)
    4a90:	f7fd fc76 	bl	2380 <bt_hci_cmd_create>
    4a94:	1e06      	subs	r6, r0, #0
	if (!buf) {
    4a96:	d015      	beq.n	4ac4 <bt_conn_disconnect+0x6c>
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
    4a98:	2103      	movs	r1, #3
    4a9a:	3008      	adds	r0, #8
    4a9c:	f00d fe32 	bl	12704 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4aa0:	782b      	ldrb	r3, [r5, #0]
	disconn->reason = reason;

	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4aa2:	0031      	movs	r1, r6
	if (!buf) {
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4aa4:	7003      	strb	r3, [r0, #0]
    4aa6:	786b      	ldrb	r3, [r5, #1]
	disconn->reason = reason;
    4aa8:	7084      	strb	r4, [r0, #2]
	if (!buf) {
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4aaa:	7043      	strb	r3, [r0, #1]
	disconn->reason = reason;

	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4aac:	4807      	ldr	r0, [pc, #28]	; (4acc <bt_conn_disconnect+0x74>)
    4aae:	f7fe f941 	bl	2d34 <bt_hci_cmd_send>
    4ab2:	1e04      	subs	r4, r0, #0
	if (err) {
    4ab4:	d108      	bne.n	4ac8 <bt_conn_disconnect+0x70>
		return err;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4ab6:	2104      	movs	r1, #4
    4ab8:	0028      	movs	r0, r5
    4aba:	f7ff fe91 	bl	47e0 <bt_conn_set_state>
    4abe:	e003      	b.n	4ac8 <bt_conn_disconnect+0x70>
			k_delayed_work_cancel(&conn->le.update_work);
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
					       NULL);
		}

		return 0;
    4ac0:	2400      	movs	r4, #0
    4ac2:	e001      	b.n	4ac8 <bt_conn_disconnect+0x70>
	struct bt_hci_cp_disconnect *disconn;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
	if (!buf) {
		return -ENOBUFS;
    4ac4:	2437      	movs	r4, #55	; 0x37
    4ac6:	4264      	negs	r4, r4
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
	}
}
    4ac8:	0020      	movs	r0, r4
    4aca:	bd70      	pop	{r4, r5, r6, pc}
    4acc:	00000406 	.word	0x00000406

00004ad0 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ad2:	0007      	movs	r7, r0
    4ad4:	000d      	movs	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    4ad6:	4815      	ldr	r0, [pc, #84]	; (4b2c <bt_conn_le_conn_update+0x5c>)
    4ad8:	210e      	movs	r1, #14
    4ada:	f7fd fc51 	bl	2380 <bt_hci_cmd_create>
    4ade:	1e06      	subs	r6, r0, #0
				sizeof(*conn_update));
	if (!buf) {
    4ae0:	d021      	beq.n	4b26 <bt_conn_le_conn_update+0x56>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    4ae2:	210e      	movs	r1, #14
    4ae4:	3008      	adds	r0, #8
    4ae6:	f00d fe0d 	bl	12704 <net_buf_simple_add>
    4aea:	0004      	movs	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    4aec:	220e      	movs	r2, #14
    4aee:	2100      	movs	r1, #0
    4af0:	f7fc fc62 	bl	13b8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4af4:	783b      	ldrb	r3, [r7, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4af6:	0031      	movs	r1, r6
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
	memset(conn_update, 0, sizeof(*conn_update));
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4af8:	7023      	strb	r3, [r4, #0]
    4afa:	787b      	ldrb	r3, [r7, #1]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4afc:	480b      	ldr	r0, [pc, #44]	; (4b2c <bt_conn_le_conn_update+0x5c>)
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
	memset(conn_update, 0, sizeof(*conn_update));
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    4afe:	7063      	strb	r3, [r4, #1]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    4b00:	782b      	ldrb	r3, [r5, #0]
    4b02:	70a3      	strb	r3, [r4, #2]
    4b04:	786b      	ldrb	r3, [r5, #1]
    4b06:	70e3      	strb	r3, [r4, #3]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    4b08:	78ab      	ldrb	r3, [r5, #2]
    4b0a:	7123      	strb	r3, [r4, #4]
    4b0c:	78eb      	ldrb	r3, [r5, #3]
    4b0e:	7163      	strb	r3, [r4, #5]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    4b10:	792b      	ldrb	r3, [r5, #4]
    4b12:	71a3      	strb	r3, [r4, #6]
    4b14:	796b      	ldrb	r3, [r5, #5]
    4b16:	71e3      	strb	r3, [r4, #7]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    4b18:	79ab      	ldrb	r3, [r5, #6]
    4b1a:	7223      	strb	r3, [r4, #8]
    4b1c:	79eb      	ldrb	r3, [r5, #7]
    4b1e:	7263      	strb	r3, [r4, #9]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    4b20:	f7fe f908 	bl	2d34 <bt_hci_cmd_send>
    4b24:	e001      	b.n	4b2a <bt_conn_le_conn_update+0x5a>
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
				sizeof(*conn_update));
	if (!buf) {
		return -ENOBUFS;
    4b26:	2037      	movs	r0, #55	; 0x37
    4b28:	4240      	negs	r0, r0
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}
    4b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b2c:	00002013 	.word	0x00002013

00004b30 <bt_conn_le_param_update>:
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    4b30:	0003      	movs	r3, r0
	return 0;
}

int bt_conn_le_param_update(struct bt_conn *conn,
			    const struct bt_le_conn_param *param)
{
    4b32:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    4b34:	336a      	adds	r3, #106	; 0x6a
    4b36:	881b      	ldrh	r3, [r3, #0]
    4b38:	880a      	ldrh	r2, [r1, #0]
	return 0;
}

int bt_conn_le_param_update(struct bt_conn *conn,
			    const struct bt_le_conn_param *param)
{
    4b3a:	0004      	movs	r4, r0
    4b3c:	000d      	movs	r5, r1
	BT_DBG("conn %p features 0x%02x params (%d-%d %d %d)", conn,
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
    4b3e:	429a      	cmp	r2, r3
    4b40:	d80e      	bhi.n	4b60 <bt_conn_le_param_update+0x30>
    4b42:	884a      	ldrh	r2, [r1, #2]
    4b44:	429a      	cmp	r2, r3
    4b46:	d30b      	bcc.n	4b60 <bt_conn_le_param_update+0x30>
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
    4b48:	0003      	movs	r3, r0
    4b4a:	3370      	adds	r3, #112	; 0x70
	       conn->le.features[0], param->interval_min,
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
    4b4c:	881a      	ldrh	r2, [r3, #0]
    4b4e:	888b      	ldrh	r3, [r1, #4]
    4b50:	429a      	cmp	r2, r3
    4b52:	d105      	bne.n	4b60 <bt_conn_le_param_update+0x30>
	    conn->le.latency == param->latency &&
	    conn->le.timeout == param->timeout) {
    4b54:	0003      	movs	r3, r0
    4b56:	3372      	adds	r3, #114	; 0x72
	       param->interval_max, param->latency, param->timeout);

	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
    4b58:	881a      	ldrh	r2, [r3, #0]
    4b5a:	88cb      	ldrh	r3, [r1, #6]
    4b5c:	429a      	cmp	r2, r3
    4b5e:	d01b      	beq.n	4b98 <bt_conn_le_param_update+0x68>
	    conn->le.timeout == param->timeout) {
		return -EALREADY;
	}

	/* Cancel any pending update */
	k_delayed_work_cancel(&conn->le.update_work);
    4b60:	0020      	movs	r0, r4
    4b62:	3080      	adds	r0, #128	; 0x80
    4b64:	f00f fa3c 	bl	13fe0 <k_delayed_work_cancel>

	/* Use LE connection parameter request if both local and remote support
	 * it; or if local role is master then use LE connection update.
	 */
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4b68:	4b0d      	ldr	r3, [pc, #52]	; (4ba0 <bt_conn_le_param_update+0x70>)
    4b6a:	3370      	adds	r3, #112	; 0x70
    4b6c:	781a      	ldrb	r2, [r3, #0]
    4b6e:	2302      	movs	r3, #2
    4b70:	421a      	tst	r2, r3
    4b72:	d004      	beq.n	4b7e <bt_conn_le_param_update+0x4e>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4b74:	0022      	movs	r2, r4
    4b76:	3274      	adds	r2, #116	; 0x74
	k_delayed_work_cancel(&conn->le.update_work);

	/* Use LE connection parameter request if both local and remote support
	 * it; or if local role is master then use LE connection update.
	 */
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    4b78:	7812      	ldrb	r2, [r2, #0]
    4b7a:	421a      	tst	r2, r3
    4b7c:	d102      	bne.n	4b84 <bt_conn_le_param_update+0x54>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    4b7e:	78e3      	ldrb	r3, [r4, #3]
    4b80:	2b00      	cmp	r3, #0
    4b82:	d104      	bne.n	4b8e <bt_conn_le_param_update+0x5e>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
		return bt_conn_le_conn_update(conn, param);
    4b84:	0029      	movs	r1, r5
    4b86:	0020      	movs	r0, r4
    4b88:	f7ff ffa2 	bl	4ad0 <bt_conn_le_conn_update>
    4b8c:	e006      	b.n	4b9c <bt_conn_le_param_update+0x6c>
	}

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
    4b8e:	0029      	movs	r1, r5
    4b90:	0020      	movs	r0, r4
    4b92:	f000 fb1b 	bl	51cc <bt_l2cap_update_conn_param>
    4b96:	e001      	b.n	4b9c <bt_conn_le_param_update+0x6c>
	/* Check if there's a need to update conn params */
	if (conn->le.interval >= param->interval_min &&
	    conn->le.interval <= param->interval_max &&
	    conn->le.latency == param->latency &&
	    conn->le.timeout == param->timeout) {
		return -EALREADY;
    4b98:	2045      	movs	r0, #69	; 0x45
    4b9a:	4240      	negs	r0, r0

	/* If remote master does not support LL Connection Parameters Request
	 * Procedure
	 */
	return bt_l2cap_update_conn_param(conn, param);
}
    4b9c:	bd70      	pop	{r4, r5, r6, pc}
    4b9e:	46c0      	nop			; (mov r8, r8)
    4ba0:	200002b0 	.word	0x200002b0

00004ba4 <le_conn_update>:
	/* Default to accepting if there's no app callback */
	return true;
}

static void le_conn_update(struct k_work *work)
{
    4ba4:	b507      	push	{r0, r1, r2, lr}
	    conn->state == BT_CONN_CONNECT) {
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
		return;
	}

	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4ba6:	0003      	movs	r3, r0
    4ba8:	4669      	mov	r1, sp
    4baa:	3b14      	subs	r3, #20
    4bac:	881b      	ldrh	r3, [r3, #0]
    4bae:	0002      	movs	r2, r0
    4bb0:	800b      	strh	r3, [r1, #0]
    4bb2:	0003      	movs	r3, r0
    4bb4:	3b12      	subs	r3, #18
    4bb6:	881b      	ldrh	r3, [r3, #0]
    4bb8:	3a80      	subs	r2, #128	; 0x80
    4bba:	804b      	strh	r3, [r1, #2]
    4bbc:	0003      	movs	r3, r0
    4bbe:	3b10      	subs	r3, #16
    4bc0:	881b      	ldrh	r3, [r3, #0]
    4bc2:	808b      	strh	r3, [r1, #4]
    4bc4:	0003      	movs	r3, r0
    4bc6:	3b0e      	subs	r3, #14
    4bc8:	881b      	ldrh	r3, [r3, #0]
				 conn->le.interval_max,
				 conn->le.latency,
				 conn->le.timeout);

	bt_conn_le_param_update(conn, param);
    4bca:	0010      	movs	r0, r2
	    conn->state == BT_CONN_CONNECT) {
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
		return;
	}

	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4bcc:	80cb      	strh	r3, [r1, #6]
				 conn->le.interval_max,
				 conn->le.latency,
				 conn->le.timeout);

	bt_conn_le_param_update(conn, param);
    4bce:	f7ff ffaf 	bl	4b30 <bt_conn_le_param_update>
}
    4bd2:	bd07      	pop	{r0, r1, r2, pc}

00004bd4 <bt_conn_create_pdu>:

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
}

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4bd4:	b570      	push	{r4, r5, r6, lr}
    4bd6:	000c      	movs	r4, r1
	struct net_buf *buf;

	if (!pool) {
    4bd8:	2800      	cmp	r0, #0
    4bda:	d100      	bne.n	4bde <bt_conn_create_pdu+0xa>
		pool = &acl_tx_pool;
    4bdc:	4805      	ldr	r0, [pc, #20]	; (4bf4 <bt_conn_create_pdu+0x20>)
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4bde:	2101      	movs	r1, #1
    4be0:	4249      	negs	r1, r1
    4be2:	f00d fcf9 	bl	125d8 <net_buf_alloc>
    4be6:	0005      	movs	r5, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BLUETOOTH_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4be8:	1d21      	adds	r1, r4, #4
    4bea:	f00d fd55 	bl	12698 <net_buf_reserve>

	return buf;
}
    4bee:	0028      	movs	r0, r5
    4bf0:	bd70      	pop	{r4, r5, r6, pc}
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	20000748 	.word	0x20000748

00004bf8 <create_frag.isra.5>:
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
}

static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4bfa:	000f      	movs	r7, r1
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    4bfc:	2100      	movs	r1, #0
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
}

static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    4bfe:	0005      	movs	r5, r0
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    4c00:	0008      	movs	r0, r1
    4c02:	f7ff ffe7 	bl	4bd4 <bt_conn_create_pdu>

	if (conn->state != BT_CONN_CONNECTED) {
    4c06:	782a      	ldrb	r2, [r5, #0]
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
{
	struct net_buf *frag;
	u16_t frag_len;

	frag = bt_conn_create_pdu(NULL, 0);
    4c08:	0004      	movs	r4, r0

	if (conn->state != BT_CONN_CONNECTED) {
    4c0a:	2a03      	cmp	r2, #3
    4c0c:	d003      	beq.n	4c16 <create_frag.isra.5+0x1e>
		net_buf_unref(frag);
    4c0e:	f00d fd57 	bl	126c0 <net_buf_unref>
		return NULL;
    4c12:	2000      	movs	r0, #0
    4c14:	e022      	b.n	4c5c <create_frag.isra.5+0x64>
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    4c16:	89c3      	ldrh	r3, [r0, #14]

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4c18:	0006      	movs	r6, r0
		net_buf_unref(frag);
		return NULL;
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    4c1a:	18c3      	adds	r3, r0, r3
    4c1c:	3313      	adds	r3, #19
    4c1e:	4393      	bics	r3, r2
    4c20:	2200      	movs	r2, #0
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    4c22:	4d0f      	ldr	r5, [pc, #60]	; (4c60 <create_frag.isra.5+0x68>)
		net_buf_unref(frag);
		return NULL;
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;
    4c24:	601a      	str	r2, [r3, #0]
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    4c26:	3580      	adds	r5, #128	; 0x80
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4c28:	882b      	ldrh	r3, [r5, #0]
    4c2a:	3608      	adds	r6, #8
    4c2c:	0030      	movs	r0, r6
    4c2e:	9301      	str	r3, [sp, #4]
    4c30:	f00d fda9 	bl	12786 <net_buf_simple_tailroom>
    4c34:	9b01      	ldr	r3, [sp, #4]
    4c36:	4283      	cmp	r3, r0
    4c38:	d201      	bcs.n	4c3e <create_frag.isra.5+0x46>
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    4c3a:	882d      	ldrh	r5, [r5, #0]
    4c3c:	e003      	b.n	4c46 <create_frag.isra.5+0x4e>
	}

	/* Fragments never have a TX completion callback */
	conn_tx(frag)->cb = NULL;

	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    4c3e:	0030      	movs	r0, r6
    4c40:	f00d fda1 	bl	12786 <net_buf_simple_tailroom>
    4c44:	b285      	uxth	r5, r0

	net_buf_add_mem(frag, buf->data, frag_len);
    4c46:	002a      	movs	r2, r5
    4c48:	68b9      	ldr	r1, [r7, #8]
    4c4a:	0030      	movs	r0, r6
    4c4c:	f00d fd61 	bl	12712 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    4c50:	0038      	movs	r0, r7
    4c52:	0029      	movs	r1, r5
    4c54:	3008      	adds	r0, #8
    4c56:	f00d fd76 	bl	12746 <net_buf_simple_pull>
    4c5a:	0020      	movs	r0, r4

	return frag;
}
    4c5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4c5e:	46c0      	nop			; (mov r8, r8)
    4c60:	200002b0 	.word	0x200002b0

00004c64 <bt_conn_process_tx>:

	return ev_count;
}

void bt_conn_process_tx(struct bt_conn *conn)
{
    4c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    4c66:	0007      	movs	r7, r0
    4c68:	3751      	adds	r7, #81	; 0x51
    4c6a:	783b      	ldrb	r3, [r7, #0]

	return ev_count;
}

void bt_conn_process_tx(struct bt_conn *conn)
{
    4c6c:	0005      	movs	r5, r0
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d10a      	bne.n	4c88 <bt_conn_process_tx+0x24>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4c72:	2141      	movs	r1, #65	; 0x41
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    4c74:	3004      	adds	r0, #4
    4c76:	4249      	negs	r1, r1
    4c78:	f00e f820 	bl	12cbc <atomic_and>
{
	struct net_buf *buf;

	BT_DBG("conn %p", conn);

	if (conn->state == BT_CONN_DISCONNECTED &&
    4c7c:	0643      	lsls	r3, r0, #25
    4c7e:	d503      	bpl.n	4c88 <bt_conn_process_tx+0x24>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
		BT_DBG("handle %u disconnected - cleaning up", conn->handle);
		conn_cleanup(conn);
    4c80:	0028      	movs	r0, r5
    4c82:	f7ff fb11 	bl	42a8 <conn_cleanup>
		return;
    4c86:	e044      	b.n	4d12 <bt_conn_process_tx+0xae>
	}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    4c88:	0028      	movs	r0, r5
    4c8a:	2100      	movs	r1, #0
    4c8c:	3030      	adds	r0, #48	; 0x30
    4c8e:	f00d fceb 	bl	12668 <net_buf_get>
    4c92:	1e04      	subs	r4, r0, #0
	BT_ASSERT(buf);
    4c94:	d10c      	bne.n	4cb0 <bt_conn_process_tx+0x4c>
    4c96:	4b1f      	ldr	r3, [pc, #124]	; (4d14 <bt_conn_process_tx+0xb0>)
    4c98:	4a1f      	ldr	r2, [pc, #124]	; (4d18 <bt_conn_process_tx+0xb4>)
    4c9a:	9301      	str	r3, [sp, #4]
    4c9c:	4b1f      	ldr	r3, [pc, #124]	; (4d1c <bt_conn_process_tx+0xb8>)
    4c9e:	4920      	ldr	r1, [pc, #128]	; (4d20 <bt_conn_process_tx+0xbc>)
    4ca0:	9300      	str	r3, [sp, #0]
    4ca2:	4820      	ldr	r0, [pc, #128]	; (4d24 <bt_conn_process_tx+0xc0>)
    4ca4:	4b20      	ldr	r3, [pc, #128]	; (4d28 <bt_conn_process_tx+0xc4>)
    4ca6:	f7fc fd5f 	bl	1768 <printk>
    4caa:	b662      	cpsie	i
    4cac:	2004      	movs	r0, #4
    4cae:	df02      	svc	2
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    4cb0:	4e1e      	ldr	r6, [pc, #120]	; (4d2c <bt_conn_process_tx+0xc8>)
	struct net_buf *frag;

	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);

	/* Send directly if the packet fits the ACL MTU */
	if (buf->len <= conn_mtu(conn)) {
    4cb2:	8982      	ldrh	r2, [r0, #12]
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    4cb4:	0033      	movs	r3, r6
    4cb6:	3380      	adds	r3, #128	; 0x80
	struct net_buf *frag;

	BT_DBG("conn %p buf %p len %u", conn, buf, buf->len);

	/* Send directly if the packet fits the ACL MTU */
	if (buf->len <= conn_mtu(conn)) {
    4cb8:	881b      	ldrh	r3, [r3, #0]
    4cba:	429a      	cmp	r2, r3
    4cbc:	d802      	bhi.n	4cc4 <bt_conn_process_tx+0x60>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    4cbe:	2300      	movs	r3, #0
    4cc0:	001a      	movs	r2, r3
    4cc2:	e01d      	b.n	4d00 <bt_conn_process_tx+0x9c>
	}

	/* Create & enqueue first fragment */
	frag = create_frag(conn, buf);
    4cc4:	0001      	movs	r1, r0
    4cc6:	0038      	movs	r0, r7
    4cc8:	f7ff ff96 	bl	4bf8 <create_frag.isra.5>
    4ccc:	1e01      	subs	r1, r0, #0
	if (!frag) {
    4cce:	d01d      	beq.n	4d0c <bt_conn_process_tx+0xa8>
		return false;
	}

	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    4cd0:	2301      	movs	r3, #1
    4cd2:	2200      	movs	r2, #0
		frag = create_frag(conn, buf);
		if (!frag) {
			return false;
		}

		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4cd4:	0028      	movs	r0, r5
    4cd6:	f7ff fc99 	bl	460c <send_frag>
    4cda:	2800      	cmp	r0, #0
    4cdc:	d016      	beq.n	4d0c <bt_conn_process_tx+0xa8>
	if (conn->type == BT_CONN_TYPE_BR || !bt_dev.le.mtu) {
		return bt_dev.br.mtu;
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	return bt_dev.le.mtu;
    4cde:	0033      	movs	r3, r6
    4ce0:	3380      	adds	r3, #128	; 0x80

	/*
	 * Send the fragments. For the last one simply use the original
	 * buffer (which works since we've used net_buf_pull on it.
	 */
	while (buf->len > conn_mtu(conn)) {
    4ce2:	89a2      	ldrh	r2, [r4, #12]
    4ce4:	881b      	ldrh	r3, [r3, #0]
    4ce6:	429a      	cmp	r2, r3
    4ce8:	d908      	bls.n	4cfc <bt_conn_process_tx+0x98>
		frag = create_frag(conn, buf);
    4cea:	0021      	movs	r1, r4
    4cec:	0038      	movs	r0, r7
    4cee:	f7ff ff83 	bl	4bf8 <create_frag.isra.5>
    4cf2:	1e01      	subs	r1, r0, #0
		if (!frag) {
    4cf4:	d00a      	beq.n	4d0c <bt_conn_process_tx+0xa8>
			return false;
		}

		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    4cf6:	2301      	movs	r3, #1
    4cf8:	001a      	movs	r2, r3
    4cfa:	e7eb      	b.n	4cd4 <bt_conn_process_tx+0x70>
			return false;
		}
	}

	return send_frag(conn, buf, BT_ACL_CONT, false);
    4cfc:	2300      	movs	r3, #0
    4cfe:	2201      	movs	r2, #1
    4d00:	0021      	movs	r1, r4
    4d02:	0028      	movs	r0, r5
    4d04:	f7ff fc82 	bl	460c <send_frag>
	}

	/* Get next ACL packet for connection */
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
	BT_ASSERT(buf);
	if (!send_buf(conn, buf)) {
    4d08:	2800      	cmp	r0, #0
    4d0a:	d102      	bne.n	4d12 <bt_conn_process_tx+0xae>
		net_buf_unref(buf);
    4d0c:	0020      	movs	r0, r4
    4d0e:	f00d fcd7 	bl	126c0 <net_buf_unref>
	}
}
    4d12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4d14:	000145b0 	.word	0x000145b0
    4d18:	00014570 	.word	0x00014570
    4d1c:	000145b5 	.word	0x000145b5
    4d20:	00014577 	.word	0x00014577
    4d24:	00014854 	.word	0x00014854
    4d28:	000168f6 	.word	0x000168f6
    4d2c:	200002b0 	.word	0x200002b0

00004d30 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BLUETOOTH_SMP) || defined(CONFIG_BLUETOOTH_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    4d30:	2800      	cmp	r0, #0
    4d32:	d102      	bne.n	4d3a <bt_conn_auth_cb_register+0xa>
		bt_auth = NULL;
    4d34:	4b08      	ldr	r3, [pc, #32]	; (4d58 <bt_conn_auth_cb_register+0x28>)
    4d36:	6018      	str	r0, [r3, #0]
		return 0;
    4d38:	e00d      	b.n	4d56 <bt_conn_auth_cb_register+0x26>
	}

	/* cancel callback should always be provided */
	if (!cb->cancel) {
    4d3a:	68c3      	ldr	r3, [r0, #12]
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d006      	beq.n	4d4e <bt_conn_auth_cb_register+0x1e>
		return -EINVAL;
	}

	if (bt_auth) {
    4d40:	4a05      	ldr	r2, [pc, #20]	; (4d58 <bt_conn_auth_cb_register+0x28>)
    4d42:	6813      	ldr	r3, [r2, #0]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d104      	bne.n	4d52 <bt_conn_auth_cb_register+0x22>
		return -EALREADY;
	}

	bt_auth = cb;
    4d48:	6010      	str	r0, [r2, #0]
	return 0;
    4d4a:	0018      	movs	r0, r3
    4d4c:	e003      	b.n	4d56 <bt_conn_auth_cb_register+0x26>
		return 0;
	}

	/* cancel callback should always be provided */
	if (!cb->cancel) {
		return -EINVAL;
    4d4e:	2016      	movs	r0, #22
    4d50:	e000      	b.n	4d54 <bt_conn_auth_cb_register+0x24>
	}

	if (bt_auth) {
		return -EALREADY;
    4d52:	2045      	movs	r0, #69	; 0x45
    4d54:	4240      	negs	r0, r0
	}

	bt_auth = cb;
	return 0;
}
    4d56:	4770      	bx	lr
    4d58:	20001ee8 	.word	0x20001ee8

00004d5c <bt_conn_init>:
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    4d5c:	4a0c      	ldr	r2, [pc, #48]	; (4d90 <bt_conn_init+0x34>)
    4d5e:	4b0d      	ldr	r3, [pc, #52]	; (4d94 <bt_conn_init+0x38>)
    4d60:	6811      	ldr	r1, [r2, #0]
	}
}
#endif /* CONFIG_BLUETOOTH_SMP || CONFIG_BLUETOOTH_BREDR */

int bt_conn_init(void)
{
    4d62:	b510      	push	{r4, lr}
    4d64:	6019      	str	r1, [r3, #0]
	list->head = node;

	if (!list->tail) {
    4d66:	6851      	ldr	r1, [r2, #4]
    4d68:	2900      	cmp	r1, #0
    4d6a:	d100      	bne.n	4d6e <bt_conn_init+0x12>
		list->tail = list->head;
    4d6c:	6053      	str	r3, [r2, #4]
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;

	if (!list->tail) {
    4d6e:	6851      	ldr	r1, [r2, #4]
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    4d70:	609b      	str	r3, [r3, #8]
	list->head = node;
    4d72:	3308      	adds	r3, #8
    4d74:	6013      	str	r3, [r2, #0]

	if (!list->tail) {
    4d76:	2900      	cmp	r1, #0
    4d78:	d100      	bne.n	4d7c <bt_conn_init+0x20>
		list->tail = list->head;
    4d7a:	6053      	str	r3, [r2, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    4d7c:	f001 fbf8 	bl	6570 <bt_att_init>

	err = bt_smp_init();
    4d80:	f003 fd02 	bl	8788 <bt_smp_init>
    4d84:	1e04      	subs	r4, r0, #0
	if (err) {
    4d86:	d101      	bne.n	4d8c <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
    4d88:	f000 fa5e 	bl	5248 <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    4d8c:	0020      	movs	r0, r4
    4d8e:	bd10      	pop	{r4, pc}
    4d90:	20000aec 	.word	0x20000aec
    4d94:	20000b00 	.word	0x20000b00

00004d98 <l2cap_disconnected>:

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}
    4d98:	4770      	bx	lr
	...

00004d9c <l2cap_accept>:

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4d9e:	4a0c      	ldr	r2, [pc, #48]	; (4dd0 <l2cap_accept+0x34>)
    4da0:	6813      	ldr	r3, [r2, #0]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d104      	bne.n	4db0 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4da6:	480b      	ldr	r0, [pc, #44]	; (4dd4 <l2cap_accept+0x38>)
    4da8:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    4daa:	600a      	str	r2, [r1, #0]

		return 0;
    4dac:	0018      	movs	r0, r3
    4dae:	e00c      	b.n	4dca <l2cap_accept+0x2e>
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
    4db0:	4b09      	ldr	r3, [pc, #36]	; (4dd8 <l2cap_accept+0x3c>)
    4db2:	9001      	str	r0, [sp, #4]
    4db4:	9302      	str	r3, [sp, #8]
    4db6:	4b09      	ldr	r3, [pc, #36]	; (4ddc <l2cap_accept+0x40>)
    4db8:	4a09      	ldr	r2, [pc, #36]	; (4de0 <l2cap_accept+0x44>)
    4dba:	9300      	str	r3, [sp, #0]
    4dbc:	4909      	ldr	r1, [pc, #36]	; (4de4 <l2cap_accept+0x48>)
    4dbe:	4b0a      	ldr	r3, [pc, #40]	; (4de8 <l2cap_accept+0x4c>)
    4dc0:	480a      	ldr	r0, [pc, #40]	; (4dec <l2cap_accept+0x50>)
    4dc2:	f7fc fcd1 	bl	1768 <printk>

	return -ENOMEM;
    4dc6:	200c      	movs	r0, #12
    4dc8:	4240      	negs	r0, r0
}
    4dca:	b005      	add	sp, #20
    4dcc:	bd00      	pop	{pc}
    4dce:	46c0      	nop			; (mov r8, r8)
    4dd0:	20000bc4 	.word	0x20000bc4
    4dd4:	2000039c 	.word	0x2000039c
    4dd8:	000145b0 	.word	0x000145b0
    4ddc:	000145b5 	.word	0x000145b5
    4de0:	00014570 	.word	0x00014570
    4de4:	00014577 	.word	0x00014577
    4de8:	00016983 	.word	0x00016983
    4dec:	00014e86 	.word	0x00014e86

00004df0 <l2cap_connected>:
    4df0:	4770      	bx	lr
	...

00004df4 <bt_l2cap_le_fixed_chan_register>:
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    4df4:	2300      	movs	r3, #0

void bt_l2cap_le_fixed_chan_register(struct bt_l2cap_fixed_chan *chan)
{
	BT_DBG("CID 0x%04x", chan->cid);

	sys_slist_append(&le_channels, &chan->node);
    4df6:	0002      	movs	r2, r0
    4df8:	6083      	str	r3, [r0, #8]

	if (!list->tail) {
    4dfa:	4b05      	ldr	r3, [pc, #20]	; (4e10 <bt_l2cap_le_fixed_chan_register+0x1c>)
    4dfc:	3208      	adds	r2, #8
    4dfe:	6859      	ldr	r1, [r3, #4]
    4e00:	2900      	cmp	r1, #0
    4e02:	d102      	bne.n	4e0a <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail = node;
    4e04:	605a      	str	r2, [r3, #4]
		list->head = node;
    4e06:	601a      	str	r2, [r3, #0]
    4e08:	e001      	b.n	4e0e <bt_l2cap_le_fixed_chan_register+0x1a>
	} else {
		list->tail->next = node;
    4e0a:	600a      	str	r2, [r1, #0]
		list->tail = node;
    4e0c:	605a      	str	r2, [r3, #4]
}
    4e0e:	4770      	bx	lr
    4e10:	20000bbc 	.word	0x20000bbc

00004e14 <bt_l2cap_chan_remove>:
	return NULL;
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_chan_remove(struct bt_conn *conn, struct bt_l2cap_chan *ch)
{
    4e14:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4e16:	b530      	push	{r4, r5, lr}
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4e18:	2b00      	cmp	r3, #0
    4e1a:	d020      	beq.n	4e5e <bt_l2cap_chan_remove+0x4a>
    4e1c:	2200      	movs	r2, #0
    4e1e:	3b08      	subs	r3, #8
    4e20:	2b00      	cmp	r3, #0
    4e22:	d01c      	beq.n	4e5e <bt_l2cap_chan_remove+0x4a>
		if (chan == ch) {
    4e24:	428b      	cmp	r3, r1
    4e26:	d111      	bne.n	4e4c <bt_l2cap_chan_remove+0x38>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    4e28:	000d      	movs	r5, r1
    4e2a:	688b      	ldr	r3, [r1, #8]
    4e2c:	3508      	adds	r5, #8
    4e2e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    4e30:	2a00      	cmp	r2, #0
    4e32:	d104      	bne.n	4e3e <bt_l2cap_chan_remove+0x2a>
		list->head = node->next;
    4e34:	6443      	str	r3, [r0, #68]	; 0x44

		/* Was node also the tail? */
		if (list->tail == node) {
    4e36:	42a5      	cmp	r5, r4
    4e38:	d105      	bne.n	4e46 <bt_l2cap_chan_remove+0x32>
			list->tail = list->head;
    4e3a:	6483      	str	r3, [r0, #72]	; 0x48
    4e3c:	e003      	b.n	4e46 <bt_l2cap_chan_remove+0x32>
		}
	} else {
		prev_node->next = node->next;
    4e3e:	6013      	str	r3, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    4e40:	42a5      	cmp	r5, r4
    4e42:	d100      	bne.n	4e46 <bt_l2cap_chan_remove+0x32>
			list->tail = prev_node;
    4e44:	6482      	str	r2, [r0, #72]	; 0x48
		}
	}

	node->next = NULL;
    4e46:	2300      	movs	r3, #0
    4e48:	608b      	str	r3, [r1, #8]
    4e4a:	e008      	b.n	4e5e <bt_l2cap_chan_remove+0x4a>
			return;
		}

		prev = &chan->node;
    4e4c:	001a      	movs	r2, r3
    4e4e:	3208      	adds	r2, #8
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    4e50:	2a00      	cmp	r2, #0
    4e52:	d004      	beq.n	4e5e <bt_l2cap_chan_remove+0x4a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    4e54:	689b      	ldr	r3, [r3, #8]
void bt_l2cap_chan_remove(struct bt_conn *conn, struct bt_l2cap_chan *ch)
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4e56:	2b00      	cmp	r3, #0
    4e58:	d001      	beq.n	4e5e <bt_l2cap_chan_remove+0x4a>
    4e5a:	3b08      	subs	r3, #8
    4e5c:	e7e0      	b.n	4e20 <bt_l2cap_chan_remove+0xc>
			return;
		}

		prev = &chan->node;
	}
}
    4e5e:	bd30      	pop	{r4, r5, pc}

00004e60 <bt_l2cap_chan_del>:

void bt_l2cap_chan_del(struct bt_l2cap_chan *chan)
{
	BT_DBG("conn %p chan %p", chan->conn, chan);

	if (!chan->conn) {
    4e60:	6803      	ldr	r3, [r0, #0]
}
#endif /* CONFIG_BLUETOOTH_DEBUG_L2CAP */
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_chan_del(struct bt_l2cap_chan *chan)
{
    4e62:	b510      	push	{r4, lr}
    4e64:	0004      	movs	r4, r0
	BT_DBG("conn %p chan %p", chan->conn, chan);

	if (!chan->conn) {
    4e66:	2b00      	cmp	r3, #0
    4e68:	d006      	beq.n	4e78 <bt_l2cap_chan_del+0x18>
		goto destroy;
	}

	if (chan->ops->disconnected) {
    4e6a:	6843      	ldr	r3, [r0, #4]
    4e6c:	685b      	ldr	r3, [r3, #4]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	d000      	beq.n	4e74 <bt_l2cap_chan_del+0x14>
		chan->ops->disconnected(chan);
    4e72:	4798      	blx	r3
	}

	chan->conn = NULL;
    4e74:	2300      	movs	r3, #0
    4e76:	6023      	str	r3, [r4, #0]
	/* Reset internal members of common channel */
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
	chan->psm = 0;
#endif

	if (chan->destroy) {
    4e78:	68e3      	ldr	r3, [r4, #12]
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d001      	beq.n	4e82 <bt_l2cap_chan_del+0x22>
		chan->destroy(chan);
    4e7e:	0020      	movs	r0, r4
    4e80:	4798      	blx	r3
	}
}
    4e82:	bd10      	pop	{r4, pc}

00004e84 <l2cap_rtx_timeout>:

static void l2cap_rtx_timeout(struct k_work *work)
{
    4e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);

	BT_ERR("chan %p timeout", chan);
    4e86:	3810      	subs	r0, #16
    4e88:	0004      	movs	r4, r0
    4e8a:	4b09      	ldr	r3, [pc, #36]	; (4eb0 <l2cap_rtx_timeout+0x2c>)
    4e8c:	4a09      	ldr	r2, [pc, #36]	; (4eb4 <l2cap_rtx_timeout+0x30>)
    4e8e:	9302      	str	r3, [sp, #8]
    4e90:	4b09      	ldr	r3, [pc, #36]	; (4eb8 <l2cap_rtx_timeout+0x34>)
    4e92:	9001      	str	r0, [sp, #4]
    4e94:	9300      	str	r3, [sp, #0]
    4e96:	4909      	ldr	r1, [pc, #36]	; (4ebc <l2cap_rtx_timeout+0x38>)
    4e98:	4b09      	ldr	r3, [pc, #36]	; (4ec0 <l2cap_rtx_timeout+0x3c>)
    4e9a:	480a      	ldr	r0, [pc, #40]	; (4ec4 <l2cap_rtx_timeout+0x40>)
    4e9c:	f7fc fc64 	bl	1768 <printk>

	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    4ea0:	0021      	movs	r1, r4
    4ea2:	6820      	ldr	r0, [r4, #0]
    4ea4:	f7ff ffb6 	bl	4e14 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    4ea8:	0020      	movs	r0, r4
    4eaa:	f7ff ffd9 	bl	4e60 <bt_l2cap_chan_del>
}
    4eae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4eb0:	000145b0 	.word	0x000145b0
    4eb4:	00014570 	.word	0x00014570
    4eb8:	000145b5 	.word	0x000145b5
    4ebc:	00014577 	.word	0x00014577
    4ec0:	00016941 	.word	0x00016941
    4ec4:	00014ebd 	.word	0x00014ebd

00004ec8 <bt_l2cap_connected>:

	return true;
}

void bt_l2cap_connected(struct bt_conn *conn)
{
    4ec8:	4b1a      	ldr	r3, [pc, #104]	; (4f34 <bt_l2cap_connected+0x6c>)
    4eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4ecc:	681b      	ldr	r3, [r3, #0]
    4ece:	0006      	movs	r6, r0
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_connected(conn);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4ed0:	001c      	movs	r4, r3
    4ed2:	3c08      	subs	r4, #8
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d02b      	beq.n	4f30 <bt_l2cap_connected+0x68>
    4ed8:	2c00      	cmp	r4, #0
    4eda:	d029      	beq.n	4f30 <bt_l2cap_connected+0x68>
		struct bt_l2cap_le_chan *ch;

		if (fchan->accept(conn, &chan) < 0) {
    4edc:	a901      	add	r1, sp, #4
    4ede:	0030      	movs	r0, r6
    4ee0:	6863      	ldr	r3, [r4, #4]
    4ee2:	4798      	blx	r3
    4ee4:	2800      	cmp	r0, #0
    4ee6:	db1e      	blt.n	4f26 <bt_l2cap_connected+0x5e>
			continue;
		}

		ch = BT_L2CAP_LE_CHAN(chan);
    4ee8:	9d01      	ldr	r5, [sp, #4]

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
    4eea:	8823      	ldrh	r3, [r4, #0]
		ch->tx.cid = fchan->cid;
    4eec:	002a      	movs	r2, r5
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4eee:	0028      	movs	r0, r5

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
		ch->tx.cid = fchan->cid;
    4ef0:	3254      	adds	r2, #84	; 0x54
		ch = BT_L2CAP_LE_CHAN(chan);

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
    4ef2:	872b      	strh	r3, [r5, #56]	; 0x38
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4ef4:	4910      	ldr	r1, [pc, #64]	; (4f38 <bt_l2cap_connected+0x70>)

		/* Fill up remaining fixed channel context attached in
		 * fchan->accept()
		 */
		ch->rx.cid = fchan->cid;
		ch->tx.cid = fchan->cid;
    4ef6:	8013      	strh	r3, [r2, #0]
	if (!ch) {
		BT_ERR("Unable to allocate L2CAP CID");
		return false;
	}

	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4ef8:	3010      	adds	r0, #16
    4efa:	f00f f85b 	bl	13fb4 <k_delayed_work_init>

void bt_l2cap_chan_add(struct bt_conn *conn, struct bt_l2cap_chan *chan,
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
    4efe:	002a      	movs	r2, r5
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    4f00:	2300      	movs	r3, #0

	if (!list->tail) {
    4f02:	6cb1      	ldr	r1, [r6, #72]	; 0x48
    4f04:	3208      	adds	r2, #8
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    4f06:	60ab      	str	r3, [r5, #8]

	if (!list->tail) {
    4f08:	4299      	cmp	r1, r3
    4f0a:	d102      	bne.n	4f12 <bt_l2cap_connected+0x4a>
		list->tail = node;
    4f0c:	64b2      	str	r2, [r6, #72]	; 0x48
		list->head = node;
    4f0e:	6472      	str	r2, [r6, #68]	; 0x44
    4f10:	e001      	b.n	4f16 <bt_l2cap_connected+0x4e>
	} else {
		list->tail->next = node;
    4f12:	600a      	str	r2, [r1, #0]
		list->tail = node;
    4f14:	64b2      	str	r2, [r6, #72]	; 0x48

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    4f16:	9801      	ldr	r0, [sp, #4]
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
	chan->conn = conn;
	chan->destroy = destroy;
    4f18:	60eb      	str	r3, [r5, #12]

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    4f1a:	6843      	ldr	r3, [r0, #4]
void bt_l2cap_chan_add(struct bt_conn *conn, struct bt_l2cap_chan *chan,
		       bt_l2cap_chan_destroy_t destroy)
{
	/* Attach channel to the connection */
	sys_slist_append(&conn->channels, &chan->node);
	chan->conn = conn;
    4f1c:	602e      	str	r6, [r5, #0]

		if (!l2cap_chan_add(conn, chan, NULL)) {
			return;
		}

		if (chan->ops->connected) {
    4f1e:	681b      	ldr	r3, [r3, #0]
    4f20:	2b00      	cmp	r3, #0
    4f22:	d000      	beq.n	4f26 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
    4f24:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    4f26:	68a4      	ldr	r4, [r4, #8]
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_connected(conn);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4f28:	2c00      	cmp	r4, #0
    4f2a:	d001      	beq.n	4f30 <bt_l2cap_connected+0x68>
    4f2c:	3c08      	subs	r4, #8
    4f2e:	e7d3      	b.n	4ed8 <bt_l2cap_connected+0x10>

		if (chan->ops->connected) {
			chan->ops->connected(chan);
		}
	}
}
    4f30:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    4f32:	46c0      	nop			; (mov r8, r8)
    4f34:	20000bbc 	.word	0x20000bbc
    4f38:	00004e85 	.word	0x00004e85

00004f3c <bt_l2cap_disconnected>:

void bt_l2cap_disconnected(struct bt_conn *conn)
{
    4f3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4f3e:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4f40:	2b00      	cmp	r3, #0
    4f42:	d015      	beq.n	4f70 <bt_l2cap_disconnected+0x34>
    4f44:	0018      	movs	r0, r3
    4f46:	3808      	subs	r0, #8
    4f48:	2800      	cmp	r0, #0
    4f4a:	d011      	beq.n	4f70 <bt_l2cap_disconnected+0x34>
    4f4c:	681b      	ldr	r3, [r3, #0]
    4f4e:	001c      	movs	r4, r3
    4f50:	3c08      	subs	r4, #8
    4f52:	2b00      	cmp	r3, #0
    4f54:	d00a      	beq.n	4f6c <bt_l2cap_disconnected+0x30>
		bt_l2cap_chan_del(chan);
    4f56:	f7ff ff83 	bl	4e60 <bt_l2cap_chan_del>

void bt_l2cap_disconnected(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan, *next;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    4f5a:	2c00      	cmp	r4, #0
    4f5c:	d008      	beq.n	4f70 <bt_l2cap_disconnected+0x34>
    4f5e:	68a3      	ldr	r3, [r4, #8]
    4f60:	0020      	movs	r0, r4
    4f62:	2b00      	cmp	r3, #0
    4f64:	d002      	beq.n	4f6c <bt_l2cap_disconnected+0x30>
    4f66:	3b08      	subs	r3, #8
    4f68:	001c      	movs	r4, r3
    4f6a:	e7f4      	b.n	4f56 <bt_l2cap_disconnected+0x1a>
		bt_l2cap_chan_del(chan);
    4f6c:	f7ff ff78 	bl	4e60 <bt_l2cap_chan_del>
	}
}
    4f70:	bd10      	pop	{r4, pc}

00004f72 <bt_l2cap_encrypt_change>:
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_encrypt_change(struct bt_conn *conn, u8_t hci_status)
{
    4f72:	6c43      	ldr	r3, [r0, #68]	; 0x44
    4f74:	b570      	push	{r4, r5, r6, lr}
	    conn->type == BT_CONN_TYPE_BR) {
		l2cap_br_encrypt_change(conn, hci_status);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f76:	001c      	movs	r4, r3
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

void bt_l2cap_encrypt_change(struct bt_conn *conn, u8_t hci_status)
{
    4f78:	000d      	movs	r5, r1
	    conn->type == BT_CONN_TYPE_BR) {
		l2cap_br_encrypt_change(conn, hci_status);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f7a:	3c08      	subs	r4, #8
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	d00d      	beq.n	4f9c <bt_l2cap_encrypt_change+0x2a>
    4f80:	2c00      	cmp	r4, #0
    4f82:	d00b      	beq.n	4f9c <bt_l2cap_encrypt_change+0x2a>
#if defined(CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL)
		l2cap_le_encrypt_change(chan, hci_status);
#endif

		if (chan->ops->encrypt_change) {
    4f84:	6863      	ldr	r3, [r4, #4]
    4f86:	689b      	ldr	r3, [r3, #8]
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d002      	beq.n	4f92 <bt_l2cap_encrypt_change+0x20>
			chan->ops->encrypt_change(chan, hci_status);
    4f8c:	0029      	movs	r1, r5
    4f8e:	0020      	movs	r0, r4
    4f90:	4798      	blx	r3
    4f92:	68a4      	ldr	r4, [r4, #8]
	    conn->type == BT_CONN_TYPE_BR) {
		l2cap_br_encrypt_change(conn, hci_status);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4f94:	2c00      	cmp	r4, #0
    4f96:	d001      	beq.n	4f9c <bt_l2cap_encrypt_change+0x2a>
    4f98:	3c08      	subs	r4, #8
    4f9a:	e7f1      	b.n	4f80 <bt_l2cap_encrypt_change+0xe>

		if (chan->ops->encrypt_change) {
			chan->ops->encrypt_change(chan, hci_status);
		}
	}
}
    4f9c:	bd70      	pop	{r4, r5, r6, pc}

00004f9e <bt_l2cap_create_pdu>:

	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4f9e:	b510      	push	{r4, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4fa0:	3104      	adds	r1, #4
    4fa2:	f7ff fe17 	bl	4bd4 <bt_conn_create_pdu>
}
    4fa6:	bd10      	pop	{r4, pc}

00004fa8 <bt_l2cap_send_cb>:

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    4fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4faa:	0006      	movs	r6, r0
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    4fac:	0010      	movs	r0, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
}

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    4fae:	0015      	movs	r5, r2
    4fb0:	000c      	movs	r4, r1
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    4fb2:	3008      	adds	r0, #8
    4fb4:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
}

void bt_l2cap_send_cb(struct bt_conn *conn, u16_t cid, struct net_buf *buf,
		      bt_conn_tx_cb_t cb)
{
    4fb6:	001f      	movs	r7, r3
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
    4fb8:	f00d fbbd 	bl	12736 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4fbc:	89ab      	ldrh	r3, [r5, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    4fbe:	7084      	strb	r4, [r0, #2]
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4fc0:	3b04      	subs	r3, #4
    4fc2:	b29b      	uxth	r3, r3
    4fc4:	7003      	strb	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    4fc6:	0a24      	lsrs	r4, r4, #8
	struct bt_l2cap_hdr *hdr;

	BT_DBG("conn %p cid %u len %zu", conn, cid, net_buf_frags_len(buf));

	hdr = net_buf_push(buf, sizeof(*hdr));
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4fc8:	0a1b      	lsrs	r3, r3, #8
    4fca:	7043      	strb	r3, [r0, #1]
	hdr->cid = sys_cpu_to_le16(cid);
    4fcc:	70c4      	strb	r4, [r0, #3]

	bt_conn_send_cb(conn, buf, cb);
    4fce:	003a      	movs	r2, r7
    4fd0:	0029      	movs	r1, r5
    4fd2:	0030      	movs	r0, r6
    4fd4:	f7ff fab6 	bl	4544 <bt_conn_send_cb>
}
    4fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004fdc <l2cap_recv>:
	bt_l2cap_chan_del(&chan->chan);
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    4fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
	u16_t len;

	if (buf->len < sizeof(*hdr)) {
    4fde:	898b      	ldrh	r3, [r1, #12]
	bt_l2cap_chan_del(&chan->chan);
}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    4fe0:	b085      	sub	sp, #20
    4fe2:	0007      	movs	r7, r0
    4fe4:	000e      	movs	r6, r1
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
	u16_t len;

	if (buf->len < sizeof(*hdr)) {
    4fe6:	2b03      	cmp	r3, #3
    4fe8:	d808      	bhi.n	4ffc <l2cap_recv+0x20>
		BT_ERR("Too small L2CAP signaling PDU");
    4fea:	4b36      	ldr	r3, [pc, #216]	; (50c4 <l2cap_recv+0xe8>)
    4fec:	4a36      	ldr	r2, [pc, #216]	; (50c8 <l2cap_recv+0xec>)
    4fee:	9301      	str	r3, [sp, #4]
    4ff0:	4b36      	ldr	r3, [pc, #216]	; (50cc <l2cap_recv+0xf0>)
    4ff2:	4937      	ldr	r1, [pc, #220]	; (50d0 <l2cap_recv+0xf4>)
    4ff4:	9300      	str	r3, [sp, #0]
    4ff6:	4837      	ldr	r0, [pc, #220]	; (50d4 <l2cap_recv+0xf8>)
    4ff8:	4b37      	ldr	r3, [pc, #220]	; (50d8 <l2cap_recv+0xfc>)
    4ffa:	e034      	b.n	5066 <l2cap_recv+0x8a>
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
	net_buf_pull(buf, sizeof(*hdr));
    4ffc:	0008      	movs	r0, r1
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

static void l2cap_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_l2cap *l2cap = CONTAINER_OF(chan, struct bt_l2cap, chan);
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4ffe:	688c      	ldr	r4, [r1, #8]
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
	net_buf_pull(buf, sizeof(*hdr));
    5000:	3008      	adds	r0, #8
	if (buf->len < sizeof(*hdr)) {
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
    5002:	78e5      	ldrb	r5, [r4, #3]
    5004:	78a3      	ldrb	r3, [r4, #2]
    5006:	022d      	lsls	r5, r5, #8
	net_buf_pull(buf, sizeof(*hdr));
    5008:	2104      	movs	r1, #4
	if (buf->len < sizeof(*hdr)) {
		BT_ERR("Too small L2CAP signaling PDU");
		return;
	}

	len = sys_le16_to_cpu(hdr->len);
    500a:	431d      	orrs	r5, r3
	net_buf_pull(buf, sizeof(*hdr));
    500c:	f00d fb9b 	bl	12746 <net_buf_simple_pull>

	BT_DBG("Signaling code 0x%02x ident %u len %u", hdr->code,
	       hdr->ident, len);

	if (buf->len != len) {
    5010:	89b3      	ldrh	r3, [r6, #12]
    5012:	429d      	cmp	r5, r3
    5014:	d00c      	beq.n	5030 <l2cap_recv+0x54>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    5016:	4a2b      	ldr	r2, [pc, #172]	; (50c4 <l2cap_recv+0xe8>)
    5018:	9301      	str	r3, [sp, #4]
    501a:	4b2c      	ldr	r3, [pc, #176]	; (50cc <l2cap_recv+0xf0>)
    501c:	9203      	str	r2, [sp, #12]
    501e:	9300      	str	r3, [sp, #0]
    5020:	9502      	str	r5, [sp, #8]
    5022:	4b2d      	ldr	r3, [pc, #180]	; (50d8 <l2cap_recv+0xfc>)
    5024:	4a28      	ldr	r2, [pc, #160]	; (50c8 <l2cap_recv+0xec>)
    5026:	492a      	ldr	r1, [pc, #168]	; (50d0 <l2cap_recv+0xf4>)
    5028:	482c      	ldr	r0, [pc, #176]	; (50dc <l2cap_recv+0x100>)
    502a:	f7fc fb9d 	bl	1768 <printk>
		return;
    502e:	e047      	b.n	50c0 <l2cap_recv+0xe4>
	}

	if (!hdr->ident) {
    5030:	7863      	ldrb	r3, [r4, #1]
    5032:	2b00      	cmp	r3, #0
    5034:	d108      	bne.n	5048 <l2cap_recv+0x6c>
		BT_ERR("Invalid ident value in L2CAP PDU");
    5036:	4b23      	ldr	r3, [pc, #140]	; (50c4 <l2cap_recv+0xe8>)
    5038:	4a23      	ldr	r2, [pc, #140]	; (50c8 <l2cap_recv+0xec>)
    503a:	9301      	str	r3, [sp, #4]
    503c:	4b23      	ldr	r3, [pc, #140]	; (50cc <l2cap_recv+0xf0>)
    503e:	4924      	ldr	r1, [pc, #144]	; (50d0 <l2cap_recv+0xf4>)
    5040:	9300      	str	r3, [sp, #0]
    5042:	4827      	ldr	r0, [pc, #156]	; (50e0 <l2cap_recv+0x104>)
    5044:	4b24      	ldr	r3, [pc, #144]	; (50d8 <l2cap_recv+0xfc>)
    5046:	e00e      	b.n	5066 <l2cap_recv+0x8a>
		return;
	}

	switch (hdr->code) {
    5048:	7823      	ldrb	r3, [r4, #0]
    504a:	2b01      	cmp	r3, #1
    504c:	d038      	beq.n	50c0 <l2cap_recv+0xe4>
    504e:	2b13      	cmp	r3, #19
    5050:	d10c      	bne.n	506c <l2cap_recv+0x90>

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
    5052:	2d01      	cmp	r5, #1
    5054:	d834      	bhi.n	50c0 <l2cap_recv+0xe4>
		BT_ERR("Too small LE conn param rsp");
    5056:	4b1b      	ldr	r3, [pc, #108]	; (50c4 <l2cap_recv+0xe8>)
    5058:	4a1b      	ldr	r2, [pc, #108]	; (50c8 <l2cap_recv+0xec>)
    505a:	9301      	str	r3, [sp, #4]
    505c:	4b1b      	ldr	r3, [pc, #108]	; (50cc <l2cap_recv+0xf0>)
    505e:	491c      	ldr	r1, [pc, #112]	; (50d0 <l2cap_recv+0xf4>)
    5060:	9300      	str	r3, [sp, #0]
    5062:	4820      	ldr	r0, [pc, #128]	; (50e4 <l2cap_recv+0x108>)
    5064:	4b20      	ldr	r3, [pc, #128]	; (50e8 <l2cap_recv+0x10c>)
    5066:	f7fc fb7f 	bl	1768 <printk>
    506a:	e029      	b.n	50c0 <l2cap_recv+0xe4>
	case BT_L2CAP_CMD_REJECT:
		/* Ignored */
		break;
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */
	default:
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    506c:	4a15      	ldr	r2, [pc, #84]	; (50c4 <l2cap_recv+0xe8>)
    506e:	9301      	str	r3, [sp, #4]
    5070:	4b1e      	ldr	r3, [pc, #120]	; (50ec <l2cap_recv+0x110>)
    5072:	9202      	str	r2, [sp, #8]
    5074:	9300      	str	r3, [sp, #0]
    5076:	4a1e      	ldr	r2, [pc, #120]	; (50f0 <l2cap_recv+0x114>)
    5078:	4b17      	ldr	r3, [pc, #92]	; (50d8 <l2cap_recv+0xfc>)
    507a:	4915      	ldr	r1, [pc, #84]	; (50d0 <l2cap_recv+0xf4>)
    507c:	481d      	ldr	r0, [pc, #116]	; (50f4 <l2cap_recv+0x118>)
    507e:	f7fc fb73 	bl	1768 <printk>
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5082:	2104      	movs	r1, #4
    5084:	2000      	movs	r0, #0
		/* Ignored */
		break;
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */
	default:
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
		l2cap_send_reject(chan->conn, hdr->ident,
    5086:	683e      	ldr	r6, [r7, #0]
    5088:	7864      	ldrb	r4, [r4, #1]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    508a:	f7ff fda3 	bl	4bd4 <bt_conn_create_pdu>
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    508e:	0007      	movs	r7, r0
    5090:	3708      	adds	r7, #8
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5092:	0005      	movs	r5, r0
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    5094:	2104      	movs	r1, #4
    5096:	0038      	movs	r0, r7
    5098:	f00d fb34 	bl	12704 <net_buf_simple_add>
	hdr->code = code;
    509c:	2301      	movs	r3, #1
	hdr->ident = ident;
    509e:	7044      	strb	r4, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    50a0:	2102      	movs	r1, #2
    50a2:	2400      	movs	r4, #0
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = code;
    50a4:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);
    50a6:	7081      	strb	r1, [r0, #2]
    50a8:	70c4      	strb	r4, [r0, #3]
	struct net_buf *buf;

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
				      sizeof(*rej) + data_len);

	rej = net_buf_add(buf, sizeof(*rej));
    50aa:	0038      	movs	r0, r7
    50ac:	f00d fb2a 	bl	12704 <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    50b0:	0023      	movs	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
    50b2:	7004      	strb	r4, [r0, #0]
    50b4:	7044      	strb	r4, [r0, #1]
    50b6:	002a      	movs	r2, r5
    50b8:	2105      	movs	r1, #5
    50ba:	0030      	movs	r0, r6
    50bc:	f7ff ff74 	bl	4fa8 <bt_l2cap_send_cb>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
		l2cap_send_reject(chan->conn, hdr->ident,
				  BT_L2CAP_REJ_NOT_UNDERSTOOD, NULL, 0);
		break;
	}
}
    50c0:	b005      	add	sp, #20
    50c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50c4:	000145b0 	.word	0x000145b0
    50c8:	00014570 	.word	0x00014570
    50cc:	000145b5 	.word	0x000145b5
    50d0:	00014577 	.word	0x00014577
    50d4:	00014edd 	.word	0x00014edd
    50d8:	00016990 	.word	0x00016990
    50dc:	00014f0b 	.word	0x00014f0b
    50e0:	00014f3c 	.word	0x00014f3c
    50e4:	00014f6d 	.word	0x00014f6d
    50e8:	00016963 	.word	0x00016963
    50ec:	000145fb 	.word	0x000145fb
    50f0:	000145bd 	.word	0x000145bd
    50f4:	00014f99 	.word	0x00014f99

000050f8 <bt_l2cap_le_lookup_tx_cid>:
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
    50f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
			return chan;
		}
	}

	return NULL;
    50fa:	1e18      	subs	r0, r3, #0
struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    50fc:	d00d      	beq.n	511a <bt_l2cap_le_lookup_tx_cid+0x22>
    50fe:	3b08      	subs	r3, #8
    5100:	0018      	movs	r0, r3
    5102:	2800      	cmp	r0, #0
    5104:	d009      	beq.n	511a <bt_l2cap_le_lookup_tx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    5106:	0003      	movs	r3, r0
    5108:	3354      	adds	r3, #84	; 0x54
    510a:	881b      	ldrh	r3, [r3, #0]
    510c:	428b      	cmp	r3, r1
    510e:	d004      	beq.n	511a <bt_l2cap_le_lookup_tx_cid+0x22>
    5110:	6880      	ldr	r0, [r0, #8]
struct bt_l2cap_chan *bt_l2cap_le_lookup_tx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5112:	2800      	cmp	r0, #0
    5114:	d001      	beq.n	511a <bt_l2cap_le_lookup_tx_cid+0x22>
    5116:	3808      	subs	r0, #8
    5118:	e7f3      	b.n	5102 <bt_l2cap_le_lookup_tx_cid+0xa>
			return chan;
		}
	}

	return NULL;
}
    511a:	4770      	bx	lr

0000511c <bt_l2cap_le_lookup_rx_cid>:

struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
    511c:	6c43      	ldr	r3, [r0, #68]	; 0x44
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			return chan;
		}
	}

	return NULL;
    511e:	1e18      	subs	r0, r3, #0
struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5120:	d00b      	beq.n	513a <bt_l2cap_le_lookup_rx_cid+0x1e>
    5122:	3b08      	subs	r3, #8
    5124:	0018      	movs	r0, r3
    5126:	2800      	cmp	r0, #0
    5128:	d007      	beq.n	513a <bt_l2cap_le_lookup_rx_cid+0x1e>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    512a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    512c:	428b      	cmp	r3, r1
    512e:	d004      	beq.n	513a <bt_l2cap_le_lookup_rx_cid+0x1e>
    5130:	6880      	ldr	r0, [r0, #8]
struct bt_l2cap_chan *bt_l2cap_le_lookup_rx_cid(struct bt_conn *conn,
						u16_t cid)
{
	struct bt_l2cap_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5132:	2800      	cmp	r0, #0
    5134:	d001      	beq.n	513a <bt_l2cap_le_lookup_rx_cid+0x1e>
    5136:	3808      	subs	r0, #8
    5138:	e7f5      	b.n	5126 <bt_l2cap_le_lookup_rx_cid+0xa>
			return chan;
		}
	}

	return NULL;
}
    513a:	4770      	bx	lr

0000513c <bt_l2cap_recv>:

	chan->ops->recv(chan, buf);
}

void bt_l2cap_recv(struct bt_conn *conn, struct net_buf *buf)
{
    513c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_recv(conn, buf);
		return;
	}

	if (buf->len < sizeof(*hdr)) {
    513e:	898b      	ldrh	r3, [r1, #12]

	chan->ops->recv(chan, buf);
}

void bt_l2cap_recv(struct bt_conn *conn, struct net_buf *buf)
{
    5140:	0006      	movs	r6, r0
    5142:	000c      	movs	r4, r1
	    conn->type == BT_CONN_TYPE_BR) {
		bt_l2cap_br_recv(conn, buf);
		return;
	}

	if (buf->len < sizeof(*hdr)) {
    5144:	2b03      	cmp	r3, #3
    5146:	d80a      	bhi.n	515e <bt_l2cap_recv+0x22>
		BT_ERR("Too small L2CAP PDU received");
    5148:	4b17      	ldr	r3, [pc, #92]	; (51a8 <bt_l2cap_recv+0x6c>)
    514a:	4a18      	ldr	r2, [pc, #96]	; (51ac <bt_l2cap_recv+0x70>)
    514c:	9301      	str	r3, [sp, #4]
    514e:	4b18      	ldr	r3, [pc, #96]	; (51b0 <bt_l2cap_recv+0x74>)
    5150:	4918      	ldr	r1, [pc, #96]	; (51b4 <bt_l2cap_recv+0x78>)
    5152:	9300      	str	r3, [sp, #0]
    5154:	4818      	ldr	r0, [pc, #96]	; (51b8 <bt_l2cap_recv+0x7c>)
    5156:	4b19      	ldr	r3, [pc, #100]	; (51bc <bt_l2cap_recv+0x80>)
    5158:	f7fc fb06 	bl	1768 <printk>
    515c:	e01f      	b.n	519e <bt_l2cap_recv+0x62>
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
	net_buf_pull(buf, sizeof(*hdr));
    515e:	0020      	movs	r0, r4
		BT_ERR("Too small L2CAP PDU received");
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
    5160:	688b      	ldr	r3, [r1, #8]
	net_buf_pull(buf, sizeof(*hdr));
    5162:	3008      	adds	r0, #8
		BT_ERR("Too small L2CAP PDU received");
		net_buf_unref(buf);
		return;
	}

	cid = sys_le16_to_cpu(hdr->cid);
    5164:	78dd      	ldrb	r5, [r3, #3]
    5166:	789a      	ldrb	r2, [r3, #2]
    5168:	022d      	lsls	r5, r5, #8
    516a:	4315      	orrs	r5, r2
	net_buf_pull(buf, sizeof(*hdr));
    516c:	2104      	movs	r1, #4
    516e:	f00d faea 	bl	12746 <net_buf_simple_pull>

	BT_DBG("Packet for CID %u len %u", cid, buf->len);

	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    5172:	0029      	movs	r1, r5
    5174:	0030      	movs	r0, r6
    5176:	f7ff ffd1 	bl	511c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    517a:	2800      	cmp	r0, #0
    517c:	d10b      	bne.n	5196 <bt_l2cap_recv+0x5a>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    517e:	4b0a      	ldr	r3, [pc, #40]	; (51a8 <bt_l2cap_recv+0x6c>)
    5180:	9501      	str	r5, [sp, #4]
    5182:	9302      	str	r3, [sp, #8]
    5184:	4b0e      	ldr	r3, [pc, #56]	; (51c0 <bt_l2cap_recv+0x84>)
    5186:	4a0f      	ldr	r2, [pc, #60]	; (51c4 <bt_l2cap_recv+0x88>)
    5188:	9300      	str	r3, [sp, #0]
    518a:	490a      	ldr	r1, [pc, #40]	; (51b4 <bt_l2cap_recv+0x78>)
    518c:	4b0b      	ldr	r3, [pc, #44]	; (51bc <bt_l2cap_recv+0x80>)
    518e:	480e      	ldr	r0, [pc, #56]	; (51c8 <bt_l2cap_recv+0x8c>)
    5190:	f7fc faea 	bl	1768 <printk>
    5194:	e003      	b.n	519e <bt_l2cap_recv+0x62>
	}
#endif /* CONFIG_BLUETOOTH_L2CAP_DYNAMIC_CHANNEL */

	BT_DBG("chan %p len %u", chan, buf->len);

	chan->ops->recv(chan, buf);
    5196:	6843      	ldr	r3, [r0, #4]
    5198:	0021      	movs	r1, r4
    519a:	691b      	ldr	r3, [r3, #16]
    519c:	4798      	blx	r3
		net_buf_unref(buf);
		return;
	}

	l2cap_chan_recv(chan, buf);
	net_buf_unref(buf);
    519e:	0020      	movs	r0, r4
    51a0:	f00d fa8e 	bl	126c0 <net_buf_unref>
}
    51a4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    51a6:	46c0      	nop			; (mov r8, r8)
    51a8:	000145b0 	.word	0x000145b0
    51ac:	00014570 	.word	0x00014570
    51b0:	000145b5 	.word	0x000145b5
    51b4:	00014577 	.word	0x00014577
    51b8:	00014fc7 	.word	0x00014fc7
    51bc:	00016975 	.word	0x00016975
    51c0:	000145fb 	.word	0x000145fb
    51c4:	000145bd 	.word	0x000145bd
    51c8:	00014ff4 	.word	0x00014ff4

000051cc <bt_l2cap_update_conn_param>:

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    51cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    51ce:	4b1d      	ldr	r3, [pc, #116]	; (5244 <bt_l2cap_update_conn_param+0x78>)
	net_buf_unref(buf);
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    51d0:	000c      	movs	r4, r1

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    51d2:	781a      	ldrb	r2, [r3, #0]
	net_buf_unref(buf);
}

int bt_l2cap_update_conn_param(struct bt_conn *conn,
			       const struct bt_le_conn_param *param)
{
    51d4:	9001      	str	r0, [sp, #4]

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    51d6:	1c51      	adds	r1, r2, #1
    51d8:	b2c9      	uxtb	r1, r1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    51da:	2900      	cmp	r1, #0
    51dc:	d001      	beq.n	51e2 <bt_l2cap_update_conn_param+0x16>

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    51de:	7019      	strb	r1, [r3, #0]
    51e0:	e001      	b.n	51e6 <bt_l2cap_update_conn_param+0x1a>
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
		ident++;
    51e2:	3202      	adds	r2, #2
    51e4:	701a      	strb	r2, [r3, #0]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    51e6:	2104      	movs	r1, #4
    51e8:	2000      	movs	r0, #0
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
		ident++;
	}

	return ident;
    51ea:	781d      	ldrb	r5, [r3, #0]
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    51ec:	f7ff fcf2 	bl	4bd4 <bt_conn_create_pdu>
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    51f0:	0007      	movs	r7, r0
    51f2:	3708      	adds	r7, #8
	return buf;
}

struct net_buf *bt_l2cap_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    51f4:	0006      	movs	r6, r0
{
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
    51f6:	2104      	movs	r1, #4
    51f8:	0038      	movs	r0, r7
    51fa:	f00d fa83 	bl	12704 <net_buf_simple_add>
	hdr->code = code;
    51fe:	2312      	movs	r3, #18
	hdr->ident = ident;
    5200:	7045      	strb	r5, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    5202:	2108      	movs	r1, #8
    5204:	2500      	movs	r5, #0
	struct bt_l2cap_sig_hdr *hdr;

	buf = bt_l2cap_create_rsp(buf, 0);

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->code = code;
    5206:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);
    5208:	70c5      	strb	r5, [r0, #3]
    520a:	7081      	strb	r1, [r0, #2]
	struct net_buf *buf;

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
				      get_ident(), sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    520c:	0038      	movs	r0, r7
    520e:	f00d fa79 	bl	12704 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    5212:	7823      	ldrb	r3, [r4, #0]
    5214:	0032      	movs	r2, r6
    5216:	7003      	strb	r3, [r0, #0]
    5218:	7863      	ldrb	r3, [r4, #1]
    521a:	2105      	movs	r1, #5
    521c:	7043      	strb	r3, [r0, #1]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    521e:	78a3      	ldrb	r3, [r4, #2]
    5220:	7083      	strb	r3, [r0, #2]
    5222:	78e3      	ldrb	r3, [r4, #3]
    5224:	70c3      	strb	r3, [r0, #3]
	req->latency = sys_cpu_to_le16(param->latency);
    5226:	7923      	ldrb	r3, [r4, #4]
    5228:	7103      	strb	r3, [r0, #4]
    522a:	7963      	ldrb	r3, [r4, #5]
    522c:	7143      	strb	r3, [r0, #5]
	req->timeout = sys_cpu_to_le16(param->timeout);
    522e:	79a3      	ldrb	r3, [r4, #6]
    5230:	7183      	strb	r3, [r0, #6]
    5232:	79e3      	ldrb	r3, [r4, #7]
    5234:	71c3      	strb	r3, [r0, #7]
    5236:	002b      	movs	r3, r5
    5238:	9801      	ldr	r0, [sp, #4]
    523a:	f7ff feb5 	bl	4fa8 <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);

	return 0;
}
    523e:	0028      	movs	r0, r5
    5240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5242:	46c0      	nop			; (mov r8, r8)
    5244:	20000c54 	.word	0x20000c54

00005248 <bt_l2cap_init>:

	return -ENOMEM;
}

void bt_l2cap_init(void)
{
    5248:	b510      	push	{r4, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    524a:	4802      	ldr	r0, [pc, #8]	; (5254 <bt_l2cap_init+0xc>)
    524c:	f7ff fdd2 	bl	4df4 <bt_l2cap_le_fixed_chan_register>

	if (IS_ENABLED(CONFIG_BLUETOOTH_BREDR)) {
		bt_l2cap_br_init();
	}
}
    5250:	bd10      	pop	{r4, pc}
    5252:	46c0      	nop			; (mov r8, r8)
    5254:	20000390 	.word	0x20000390

00005258 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}
    5258:	2006      	movs	r0, #6
    525a:	4770      	bx	lr

0000525c <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    525c:	2300      	movs	r3, #0
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    525e:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    5260:	4908      	ldr	r1, [pc, #32]	; (5284 <att_op_get_type+0x28>)
    5262:	00da      	lsls	r2, r3, #3
    5264:	5c54      	ldrb	r4, [r2, r1]
    5266:	4284      	cmp	r4, r0
    5268:	d102      	bne.n	5270 <att_op_get_type+0x14>
			return handlers[i].type;
    526a:	188a      	adds	r2, r1, r2
    526c:	7893      	ldrb	r3, [r2, #2]
    526e:	e006      	b.n	527e <att_op_get_type+0x22>
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5270:	3301      	adds	r3, #1
    5272:	2b1b      	cmp	r3, #27
    5274:	d1f5      	bne.n	5262 <att_op_get_type+0x6>
			return handlers[i].type;
		}
	}

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
    5276:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
			return handlers[i].type;
		}
	}

	if (op & ATT_CMD_MASK) {
    5278:	0642      	lsls	r2, r0, #25
    527a:	d400      	bmi.n	527e <att_op_get_type+0x22>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    527c:	3306      	adds	r3, #6
}
    527e:	0018      	movs	r0, r3
    5280:	bd10      	pop	{r4, pc}
    5282:	46c0      	nop			; (mov r8, r8)
    5284:	000169c4 	.word	0x000169c4

00005288 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BLUETOOTH_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    528a:	4d12      	ldr	r5, [pc, #72]	; (52d4 <bt_att_accept+0x4c>)
	att->req->buf = NULL;
}
#endif /* CONFIG_BLUETOOTH_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    528c:	000e      	movs	r6, r1
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    528e:	682c      	ldr	r4, [r5, #0]
    5290:	2c00      	cmp	r4, #0
    5292:	d10f      	bne.n	52b4 <bt_att_accept+0x2c>
			continue;
		}

		att->chan.chan.ops = &ops;
		atomic_set(att->flags, 0);
    5294:	0028      	movs	r0, r5

		if (att->chan.chan.conn) {
			continue;
		}

		att->chan.chan.ops = &ops;
    5296:	4b10      	ldr	r3, [pc, #64]	; (52d8 <bt_att_accept+0x50>)
		atomic_set(att->flags, 0);
    5298:	0021      	movs	r1, r4

		if (att->chan.chan.conn) {
			continue;
		}

		att->chan.chan.ops = &ops;
    529a:	606b      	str	r3, [r5, #4]
		atomic_set(att->flags, 0);
    529c:	3090      	adds	r0, #144	; 0x90
    529e:	f00d fcf8 	bl	12c92 <atomic_set>
		k_sem_init(&att->tx_sem, CONFIG_BLUETOOTH_ATT_TX_MAX,
    52a2:	2202      	movs	r2, #2
    52a4:	0028      	movs	r0, r5
    52a6:	0011      	movs	r1, r2
    52a8:	30c8      	adds	r0, #200	; 0xc8
    52aa:	f00e fbaf 	bl	13a0c <k_sem_init>
			   CONFIG_BLUETOOTH_ATT_TX_MAX);

		*chan = &att->chan.chan;
    52ae:	6035      	str	r5, [r6, #0]

		return 0;
    52b0:	0020      	movs	r0, r4
    52b2:	e00c      	b.n	52ce <bt_att_accept+0x46>
	}

	BT_ERR("No available ATT context for conn %p", conn);
    52b4:	4b09      	ldr	r3, [pc, #36]	; (52dc <bt_att_accept+0x54>)
    52b6:	9001      	str	r0, [sp, #4]
    52b8:	9302      	str	r3, [sp, #8]
    52ba:	4b09      	ldr	r3, [pc, #36]	; (52e0 <bt_att_accept+0x58>)
    52bc:	4a09      	ldr	r2, [pc, #36]	; (52e4 <bt_att_accept+0x5c>)
    52be:	9300      	str	r3, [sp, #0]
    52c0:	4909      	ldr	r1, [pc, #36]	; (52e8 <bt_att_accept+0x60>)
    52c2:	4b0a      	ldr	r3, [pc, #40]	; (52ec <bt_att_accept+0x64>)
    52c4:	480a      	ldr	r0, [pc, #40]	; (52f0 <bt_att_accept+0x68>)
    52c6:	f7fc fa4f 	bl	1768 <printk>

	return -ENOMEM;
    52ca:	200c      	movs	r0, #12
    52cc:	4240      	negs	r0, r0
}
    52ce:	b004      	add	sp, #16
    52d0:	bd70      	pop	{r4, r5, r6, pc}
    52d2:	46c0      	nop			; (mov r8, r8)
    52d4:	20000c58 	.word	0x20000c58
    52d8:	200003bc 	.word	0x200003bc
    52dc:	000145b0 	.word	0x000145b0
    52e0:	000145b5 	.word	0x000145b5
    52e4:	00014570 	.word	0x00014570
    52e8:	00014577 	.word	0x00014577
    52ec:	00016b37 	.word	0x00016b37
    52f0:	00015029 	.word	0x00015029

000052f4 <att_req_destroy>:
};

static struct bt_att bt_req_pool[CONFIG_BLUETOOTH_MAX_CONN];

static void att_req_destroy(struct bt_att_req *req)
{
    52f4:	b510      	push	{r4, lr}
    52f6:	0004      	movs	r4, r0
	BT_DBG("req %p", req);

	if (req->buf) {
    52f8:	6900      	ldr	r0, [r0, #16]
    52fa:	2800      	cmp	r0, #0
    52fc:	d001      	beq.n	5302 <att_req_destroy+0xe>
		net_buf_unref(req->buf);
    52fe:	f00d f9df 	bl	126c0 <net_buf_unref>
	}

	if (req->destroy) {
    5302:	68a3      	ldr	r3, [r4, #8]
    5304:	2b00      	cmp	r3, #0
    5306:	d001      	beq.n	530c <att_req_destroy+0x18>
		req->destroy(req);
    5308:	0020      	movs	r0, r4
    530a:	4798      	blx	r3
	}

	memset(req, 0, sizeof(*req));
    530c:	2218      	movs	r2, #24
    530e:	2100      	movs	r1, #0
    5310:	0020      	movs	r0, r4
    5312:	f7fc f851 	bl	13b8 <memset>
}
    5316:	bd10      	pop	{r4, pc}

00005318 <att_notify>:

	return att_handle_rsp(att, buf->data, buf->len, 0);
}

static u8_t att_notify(struct bt_att *att, struct net_buf *buf)
{
    5318:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    531a:	3108      	adds	r1, #8
    531c:	0008      	movs	r0, r1
    531e:	f00d fa22 	bl	12766 <net_buf_simple_pull_le16>
	BT_DBG("handle 0x%04x", handle);

	bt_gatt_notification(conn, handle, buf->data, buf->len);

	return 0;
}
    5322:	2000      	movs	r0, #0
    5324:	bd10      	pop	{r4, pc}
	...

00005328 <read_group_cb>:
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5328:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
    532a:	680e      	ldr	r6, [r1, #0]
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    532c:	b087      	sub	sp, #28
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    532e:	6833      	ldr	r3, [r6, #0]
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5330:	2700      	movs	r7, #0

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_group_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    5332:	9303      	str	r3, [sp, #12]
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5334:	23a0      	movs	r3, #160	; 0xa0
	struct bt_att_read_group_rsp *rsp;
	struct bt_att_group_data *group;
};

static u8_t read_group_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5336:	0005      	movs	r5, r0
    5338:	000c      	movs	r4, r1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    533a:	019b      	lsls	r3, r3, #6
    533c:	a904      	add	r1, sp, #16
    533e:	6800      	ldr	r0, [r0, #0]
    5340:	700f      	strb	r7, [r1, #0]
    5342:	804b      	strh	r3, [r1, #2]
    5344:	f7fc ff0e 	bl	2164 <bt_uuid_cmp>
    5348:	42b8      	cmp	r0, r7
    534a:	d018      	beq.n	537e <read_group_cb+0x56>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    534c:	4b30      	ldr	r3, [pc, #192]	; (5410 <read_group_cb+0xe8>)
    534e:	a905      	add	r1, sp, #20
    5350:	6828      	ldr	r0, [r5, #0]
    5352:	700f      	strb	r7, [r1, #0]
    5354:	804b      	strh	r3, [r1, #2]
    5356:	f7fc ff05 	bl	2164 <bt_uuid_cmp>
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    535a:	42b8      	cmp	r0, r7
    535c:	d00f      	beq.n	537e <read_group_cb+0x56>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    535e:	6923      	ldr	r3, [r4, #16]
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    5360:	2001      	movs	r0, #1
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    5362:	42bb      	cmp	r3, r7
    5364:	d051      	beq.n	540a <read_group_cb+0xe2>
    5366:	78d9      	ldrb	r1, [r3, #3]
    5368:	7898      	ldrb	r0, [r3, #2]
    536a:	8a2a      	ldrh	r2, [r5, #16]
    536c:	0209      	lsls	r1, r1, #8
    536e:	4301      	orrs	r1, r0
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    5370:	2001      	movs	r0, #1
	int read;

	/* Update group end_handle if attribute is not a service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    5372:	428a      	cmp	r2, r1
    5374:	d949      	bls.n	540a <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5376:	709a      	strb	r2, [r3, #2]
    5378:	0a12      	lsrs	r2, r2, #8
    537a:	70da      	strb	r2, [r3, #3]
    537c:	e045      	b.n	540a <read_group_cb+0xe2>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* If Group Type don't match skip */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    537e:	6861      	ldr	r1, [r4, #4]
    5380:	6828      	ldr	r0, [r5, #0]
    5382:	f7fc feef 	bl	2164 <bt_uuid_cmp>
    5386:	2800      	cmp	r0, #0
    5388:	d002      	beq.n	5390 <read_group_cb+0x68>
		data->group = NULL;
    538a:	2300      	movs	r3, #0
    538c:	6123      	str	r3, [r4, #16]
    538e:	e03b      	b.n	5408 <read_group_cb+0xe0>
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* Stop if there is no space left */
	if (data->rsp->len &&
    5390:	68e3      	ldr	r3, [r4, #12]
    5392:	3656      	adds	r6, #86	; 0x56
    5394:	781a      	ldrb	r2, [r3, #0]
    5396:	68a0      	ldr	r0, [r4, #8]
    5398:	2a00      	cmp	r2, #0
    539a:	d006      	beq.n	53aa <read_group_cb+0x82>
    539c:	8833      	ldrh	r3, [r6, #0]
    539e:	8981      	ldrh	r1, [r0, #12]
    53a0:	1a5b      	subs	r3, r3, r1
    53a2:	4293      	cmp	r3, r2
    53a4:	da01      	bge.n	53aa <read_group_cb+0x82>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
		return BT_GATT_ITER_STOP;
    53a6:	2000      	movs	r0, #0
    53a8:	e02f      	b.n	540a <read_group_cb+0xe2>
	}

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    53aa:	2104      	movs	r1, #4
    53ac:	3008      	adds	r0, #8
    53ae:	f00d f9a9 	bl	12704 <net_buf_simple_add>

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    53b2:	2700      	movs	r7, #0
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
		return BT_GATT_ITER_STOP;
	}

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    53b4:	6120      	str	r0, [r4, #16]

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    53b6:	8a2b      	ldrh	r3, [r5, #16]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    53b8:	68a1      	ldr	r1, [r4, #8]

	/* Fast foward to next group position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));

	/* Initialize group handle range */
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    53ba:	b2da      	uxtb	r2, r3
    53bc:	0a1b      	lsrs	r3, r3, #8
    53be:	7002      	strb	r2, [r0, #0]
    53c0:	7043      	strb	r3, [r0, #1]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    53c2:	7082      	strb	r2, [r0, #2]
    53c4:	70c3      	strb	r3, [r0, #3]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    53c6:	898a      	ldrh	r2, [r1, #12]
    53c8:	8833      	ldrh	r3, [r6, #0]
    53ca:	6889      	ldr	r1, [r1, #8]
    53cc:	1a9b      	subs	r3, r3, r2
    53ce:	b29b      	uxth	r3, r3
    53d0:	188a      	adds	r2, r1, r2
    53d2:	9700      	str	r7, [sp, #0]
    53d4:	0029      	movs	r1, r5
    53d6:	686e      	ldr	r6, [r5, #4]
    53d8:	9803      	ldr	r0, [sp, #12]
    53da:	47b0      	blx	r6
    53dc:	0001      	movs	r1, r0
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
    53de:	42b8      	cmp	r0, r7
    53e0:	dbe1      	blt.n	53a6 <read_group_cb+0x7e>
		/* TODO: Handle read errors */
		return BT_GATT_ITER_STOP;
	}

	if (!data->rsp->len) {
    53e2:	68e0      	ldr	r0, [r4, #12]
    53e4:	1d0b      	adds	r3, r1, #4
    53e6:	7802      	ldrb	r2, [r0, #0]
    53e8:	42ba      	cmp	r2, r7
    53ea:	d101      	bne.n	53f0 <read_group_cb+0xc8>
		/* Set len to be the first group found */
		data->rsp->len = read + sizeof(*data->group);
    53ec:	7003      	strb	r3, [r0, #0]
    53ee:	e006      	b.n	53fe <read_group_cb+0xd6>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    53f0:	429a      	cmp	r2, r3
    53f2:	d004      	beq.n	53fe <read_group_cb+0xd6>
		/* All groups entries should have the same size */
		data->buf->len -= sizeof(*data->group);
    53f4:	68a2      	ldr	r2, [r4, #8]
    53f6:	8993      	ldrh	r3, [r2, #12]
    53f8:	3b04      	subs	r3, #4
    53fa:	8193      	strh	r3, [r2, #12]
    53fc:	e7d3      	b.n	53a6 <read_group_cb+0x7e>
		return false;
	}

	net_buf_add(data->buf, read);
    53fe:	68a3      	ldr	r3, [r4, #8]
    5400:	3308      	adds	r3, #8
    5402:	0018      	movs	r0, r3
    5404:	f00d f97e 	bl	12704 <net_buf_simple_add>

	/* Continue to find the end handle */
	return BT_GATT_ITER_CONTINUE;
    5408:	2001      	movs	r0, #1
}
    540a:	b007      	add	sp, #28
    540c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    540e:	46c0      	nop			; (mov r8, r8)
    5410:	00002801 	.word	0x00002801

00005414 <find_info_cb>:
	struct bt_att *att = data->att;

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
    5414:	688b      	ldr	r3, [r1, #8]
		struct bt_att_info_128 *info128;
	};
};

static u8_t find_info_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5416:	b570      	push	{r4, r5, r6, lr}
    5418:	0005      	movs	r5, r0
    541a:	000c      	movs	r4, r1
	struct find_info_data *data = user_data;
	struct bt_att *att = data->att;
    541c:	680e      	ldr	r6, [r1, #0]

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
    541e:	2b00      	cmp	r3, #0
    5420:	d10c      	bne.n	543c <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5422:	6848      	ldr	r0, [r1, #4]
    5424:	2101      	movs	r1, #1
    5426:	3008      	adds	r0, #8
    5428:	f00d f96c 	bl	12704 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    542c:	682b      	ldr	r3, [r5, #0]

	BT_DBG("handle 0x%04x", attr->handle);

	/* Initialize rsp at first entry */
	if (!data->rsp) {
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    542e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    5430:	781a      	ldrb	r2, [r3, #0]
    5432:	4253      	negs	r3, r2
    5434:	4153      	adcs	r3, r2
    5436:	2202      	movs	r2, #2
    5438:	1ad3      	subs	r3, r2, r3
    543a:	7003      	strb	r3, [r0, #0]
				    BT_ATT_INFO_16 : BT_ATT_INFO_128;
	}

	switch (data->rsp->format) {
    543c:	68a3      	ldr	r3, [r4, #8]
    543e:	781b      	ldrb	r3, [r3, #0]
    5440:	2b01      	cmp	r3, #1
    5442:	d002      	beq.n	544a <find_info_cb+0x36>
    5444:	2b02      	cmp	r3, #2
    5446:	d01b      	beq.n	5480 <find_info_cb+0x6c>
    5448:	e03a      	b.n	54c0 <find_info_cb+0xac>
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    544a:	2000      	movs	r0, #0
				    BT_ATT_INFO_16 : BT_ATT_INFO_128;
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    544c:	682b      	ldr	r3, [r5, #0]
    544e:	781b      	ldrb	r3, [r3, #0]
    5450:	4283      	cmp	r3, r0
    5452:	d136      	bne.n	54c2 <find_info_cb+0xae>
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    5454:	6860      	ldr	r0, [r4, #4]
    5456:	2104      	movs	r1, #4
    5458:	3008      	adds	r0, #8
    545a:	f00d f953 	bl	12704 <net_buf_simple_add>
    545e:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5460:	7c2b      	ldrb	r3, [r5, #16]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);

		if (att->chan.tx.mtu - data->buf->len >
    5462:	3656      	adds	r6, #86	; 0x56
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    5464:	7003      	strb	r3, [r0, #0]
    5466:	7c6b      	ldrb	r3, [r5, #17]
    5468:	7043      	strb	r3, [r0, #1]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    546a:	682b      	ldr	r3, [r5, #0]
    546c:	789a      	ldrb	r2, [r3, #2]
    546e:	7082      	strb	r2, [r0, #2]
    5470:	78db      	ldrb	r3, [r3, #3]

		if (att->chan.tx.mtu - data->buf->len >
    5472:	6862      	ldr	r2, [r4, #4]
		}

		/* Fast foward to next item position */
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
		data->info16->handle = sys_cpu_to_le16(attr->handle);
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    5474:	70c3      	strb	r3, [r0, #3]
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    5476:	8833      	ldrh	r3, [r6, #0]
    5478:	8990      	ldrh	r0, [r2, #12]
    547a:	1a18      	subs	r0, r3, r0
    547c:	2304      	movs	r3, #4
    547e:	e01b      	b.n	54b8 <find_info_cb+0xa4>
			return BT_GATT_ITER_CONTINUE;
		}

		break;
	case BT_ATT_INFO_128:
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    5480:	682b      	ldr	r3, [r5, #0]
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    5482:	2000      	movs	r0, #0
			return BT_GATT_ITER_CONTINUE;
		}

		break;
	case BT_ATT_INFO_128:
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    5484:	781b      	ldrb	r3, [r3, #0]
    5486:	2b02      	cmp	r3, #2
    5488:	d11b      	bne.n	54c2 <find_info_cb+0xae>
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    548a:	6860      	ldr	r0, [r4, #4]
    548c:	2112      	movs	r1, #18
    548e:	3008      	adds	r0, #8
    5490:	f00d f938 	bl	12704 <net_buf_simple_add>
    5494:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    5496:	7c2b      	ldrb	r3, [r5, #16]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    5498:	6829      	ldr	r1, [r5, #0]
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    549a:	7003      	strb	r3, [r0, #0]
    549c:	7c6b      	ldrb	r3, [r5, #17]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    549e:	2210      	movs	r2, #16
			return BT_GATT_ITER_STOP;
		}

		/* Fast foward to next item position */
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    54a0:	7043      	strb	r3, [r0, #1]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    54a2:	68e3      	ldr	r3, [r4, #12]
    54a4:	3101      	adds	r1, #1
    54a6:	1c98      	adds	r0, r3, #2
    54a8:	f7fb ff5c 	bl	1364 <memcpy>
		       sizeof(data->info128->uuid));

		if (att->chan.tx.mtu - data->buf->len >
    54ac:	6862      	ldr	r2, [r4, #4]
    54ae:	3656      	adds	r6, #86	; 0x56
	}

	switch (data->rsp->format) {
	case BT_ATT_INFO_16:
		if (attr->uuid->type != BT_UUID_TYPE_16) {
			return BT_GATT_ITER_STOP;
    54b0:	8833      	ldrh	r3, [r6, #0]
    54b2:	8990      	ldrh	r0, [r2, #12]
    54b4:	1a18      	subs	r0, r3, r0
    54b6:	2312      	movs	r3, #18
    54b8:	4283      	cmp	r3, r0
    54ba:	4180      	sbcs	r0, r0
    54bc:	4240      	negs	r0, r0
    54be:	e000      	b.n	54c2 <find_info_cb+0xae>
		    sizeof(*data->info128)) {
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_STOP;
    54c0:	2000      	movs	r0, #0
}
    54c2:	bd70      	pop	{r4, r5, r6, pc}

000054c4 <find_type_cb>:
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    54c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    54c6:	2700      	movs	r7, #0
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
    54c8:	680e      	ldr	r6, [r1, #0]
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    54ca:	b08b      	sub	sp, #44	; 0x2c
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    54cc:	6833      	ldr	r3, [r6, #0]
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    54ce:	0005      	movs	r5, r0
	struct find_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    54d0:	9303      	str	r3, [sp, #12]
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    54d2:	4b29      	ldr	r3, [pc, #164]	; (5578 <find_type_cb+0xb4>)
	u8_t value_len;
	u8_t err;
};

static u8_t find_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    54d4:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;
	u8_t uuid[16];

	/* Skip secondary services */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    54d6:	6800      	ldr	r0, [r0, #0]
    54d8:	a904      	add	r1, sp, #16
    54da:	700f      	strb	r7, [r1, #0]
    54dc:	804b      	strh	r3, [r1, #2]
    54de:	f7fc fe41 	bl	2164 <bt_uuid_cmp>
    54e2:	42b8      	cmp	r0, r7
    54e4:	d102      	bne.n	54ec <find_type_cb+0x28>
		data->group = NULL;
    54e6:	2300      	movs	r3, #0
    54e8:	60a3      	str	r3, [r4, #8]
    54ea:	e041      	b.n	5570 <find_type_cb+0xac>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    54ec:	23a0      	movs	r3, #160	; 0xa0
    54ee:	a905      	add	r1, sp, #20
    54f0:	019b      	lsls	r3, r3, #6
    54f2:	6828      	ldr	r0, [r5, #0]
    54f4:	700f      	strb	r7, [r1, #0]
    54f6:	804b      	strh	r3, [r1, #2]
    54f8:	f7fc fe34 	bl	2164 <bt_uuid_cmp>
    54fc:	2800      	cmp	r0, #0
    54fe:	d00e      	beq.n	551e <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    5500:	68a3      	ldr	r3, [r4, #8]
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
		}
		return BT_GATT_ITER_CONTINUE;
    5502:	2601      	movs	r6, #1
		return BT_GATT_ITER_CONTINUE;
	}

	/* Update group end_handle if not a primary service */
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
		if (data->group && attr->handle > data->group->end_handle) {
    5504:	2b00      	cmp	r3, #0
    5506:	d034      	beq.n	5572 <find_type_cb+0xae>
    5508:	78d9      	ldrb	r1, [r3, #3]
    550a:	7898      	ldrb	r0, [r3, #2]
    550c:	8a2a      	ldrh	r2, [r5, #16]
    550e:	0209      	lsls	r1, r1, #8
    5510:	4301      	orrs	r1, r0
    5512:	428a      	cmp	r2, r1
    5514:	d92d      	bls.n	5572 <find_type_cb+0xae>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    5516:	709a      	strb	r2, [r3, #2]
    5518:	0a12      	lsrs	r2, r2, #8
    551a:	70da      	strb	r2, [r3, #3]
    551c:	e029      	b.n	5572 <find_type_cb+0xae>
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* stop if there is no space left */
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    551e:	0033      	movs	r3, r6
    5520:	6862      	ldr	r2, [r4, #4]
    5522:	3356      	adds	r3, #86	; 0x56
    5524:	881b      	ldrh	r3, [r3, #0]
    5526:	8992      	ldrh	r2, [r2, #12]
		return BT_GATT_ITER_STOP;
    5528:	0006      	movs	r6, r0
	}

	BT_DBG("handle 0x%04x", attr->handle);

	/* stop if there is no space left */
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    552a:	1a9b      	subs	r3, r3, r2
    552c:	2b03      	cmp	r3, #3
    552e:	d920      	bls.n	5572 <find_type_cb+0xae>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    5530:	9000      	str	r0, [sp, #0]
    5532:	aa06      	add	r2, sp, #24
    5534:	2310      	movs	r3, #16
    5536:	0029      	movs	r1, r5
    5538:	9803      	ldr	r0, [sp, #12]
    553a:	686f      	ldr	r7, [r5, #4]
    553c:	47b8      	blx	r7
    553e:	1e02      	subs	r2, r0, #0
	if (read < 0) {
    5540:	dbd1      	blt.n	54e6 <find_type_cb+0x22>
		data->group = NULL;
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check if data matches */
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    5542:	7c23      	ldrb	r3, [r4, #16]
    5544:	4298      	cmp	r0, r3
    5546:	d1ce      	bne.n	54e6 <find_type_cb+0x22>
    5548:	a906      	add	r1, sp, #24
    554a:	68e0      	ldr	r0, [r4, #12]
    554c:	f7fb fee2 	bl	1314 <memcmp>
    5550:	2800      	cmp	r0, #0
    5552:	d1c8      	bne.n	54e6 <find_type_cb+0x22>

	/* If service has been found, error should be cleared */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5554:	6860      	ldr	r0, [r4, #4]
		data->group = NULL;
		return BT_GATT_ITER_CONTINUE;
	}

	/* If service has been found, error should be cleared */
	data->err = 0x00;
    5556:	7466      	strb	r6, [r4, #17]

	/* Fast foward to next item position */
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5558:	3008      	adds	r0, #8
    555a:	2104      	movs	r1, #4
    555c:	f00d f8d2 	bl	12704 <net_buf_simple_add>
    5560:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    5562:	8a2b      	ldrh	r3, [r5, #16]
    5564:	b2da      	uxtb	r2, r3
    5566:	0a1b      	lsrs	r3, r3, #8
    5568:	7002      	strb	r2, [r0, #0]
    556a:	7043      	strb	r3, [r0, #1]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    556c:	7082      	strb	r2, [r0, #2]
    556e:	70c3      	strb	r3, [r0, #3]

	/* continue to find the end_handle */
	return BT_GATT_ITER_CONTINUE;
    5570:	2601      	movs	r6, #1
}
    5572:	0030      	movs	r0, r6
    5574:	b00b      	add	sp, #44	; 0x2c
    5576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5578:	00002801 	.word	0x00002801

0000557c <bt_att_connected>:

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    557c:	0002      	movs	r2, r0
    557e:	2317      	movs	r3, #23
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    5580:	b510      	push	{r4, lr}
    5582:	0004      	movs	r4, r0

#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5584:	3256      	adds	r2, #86	; 0x56
    5586:	8013      	strh	r3, [r2, #0]
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;

	k_delayed_work_init(&att->timeout_work, att_timeout);
    5588:	4906      	ldr	r1, [pc, #24]	; (55a4 <bt_att_connected+0x28>)
#if CONFIG_BLUETOOTH_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    558a:	8743      	strh	r3, [r0, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
    558c:	30a0      	adds	r0, #160	; 0xa0
    558e:	f00e fd11 	bl	13fb4 <k_delayed_work_init>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    5592:	0023      	movs	r3, r4
    5594:	2200      	movs	r2, #0
    5596:	3398      	adds	r3, #152	; 0x98
    5598:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
    559a:	605a      	str	r2, [r3, #4]
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    559c:	6820      	ldr	r0, [r4, #0]
    559e:	f001 fc5b 	bl	6e58 <bt_gatt_connected>
}
    55a2:	bd10      	pop	{r4, pc}
    55a4:	00005a2d 	.word	0x00005a2d

000055a8 <check_perm>:
	return false;
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
    55a8:	b530      	push	{r4, r5, lr}
    55aa:	0004      	movs	r4, r0
    55ac:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    55ae:	07d0      	lsls	r0, r2, #31
    55b0:	d506      	bpl.n	55c0 <check_perm+0x18>
    55b2:	2515      	movs	r5, #21
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    55b4:	2002      	movs	r0, #2
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    55b6:	422b      	tst	r3, r5
    55b8:	d01c      	beq.n	55f4 <check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    55ba:	684d      	ldr	r5, [r1, #4]
    55bc:	2d00      	cmp	r5, #0
    55be:	d019      	beq.n	55f4 <check_perm+0x4c>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    55c0:	0790      	lsls	r0, r2, #30
    55c2:	d506      	bpl.n	55d2 <check_perm+0x2a>
    55c4:	252a      	movs	r5, #42	; 0x2a
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    55c6:	2003      	movs	r0, #3
	if ((mask & BT_GATT_PERM_READ) &&
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
		return BT_ATT_ERR_READ_NOT_PERMITTED;
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    55c8:	422b      	tst	r3, r5
    55ca:	d013      	beq.n	55f4 <check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    55cc:	6889      	ldr	r1, [r1, #8]
    55ce:	2900      	cmp	r1, #0
    55d0:	d010      	beq.n	55f4 <check_perm+0x4c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
	}

	mask &= attr->perm;
    55d2:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    55d4:	2330      	movs	r3, #48	; 0x30
    55d6:	421a      	tst	r2, r3
    55d8:	d003      	beq.n	55e2 <check_perm+0x3a>
#if defined(CONFIG_BLUETOOTH_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    55da:	7a23      	ldrb	r3, [r4, #8]
			return BT_ATT_ERR_AUTHENTICATION;
    55dc:	2005      	movs	r0, #5
	}

	mask &= attr->perm;
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
#if defined(CONFIG_BLUETOOTH_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    55de:	2b02      	cmp	r3, #2
    55e0:	d908      	bls.n	55f4 <check_perm+0x4c>
    55e2:	230c      	movs	r3, #12
    55e4:	401a      	ands	r2, r3
    55e6:	1e10      	subs	r0, r2, #0
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    55e8:	d004      	beq.n	55f4 <check_perm+0x4c>
#else
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	return 0;
    55ea:	2000      	movs	r0, #0
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
#if defined(CONFIG_BLUETOOTH_SMP)
		if (!conn->encrypt) {
    55ec:	7aa3      	ldrb	r3, [r4, #10]
    55ee:	4283      	cmp	r3, r0
    55f0:	d100      	bne.n	55f4 <check_perm+0x4c>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    55f2:	300f      	adds	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BLUETOOTH_SMP */
	}

	return 0;
}
    55f4:	bd30      	pop	{r4, r5, pc}

000055f6 <read_type_cb>:
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    55f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
    55f8:	680b      	ldr	r3, [r1, #0]
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    55fa:	b085      	sub	sp, #20
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
    55fc:	9302      	str	r3, [sp, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    55fe:	681b      	ldr	r3, [r3, #0]
	struct bt_att_data *item;
	u8_t err;
};

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5600:	0006      	movs	r6, r0
    5602:	000c      	movs	r4, r1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5604:	6800      	ldr	r0, [r0, #0]
    5606:	6849      	ldr	r1, [r1, #4]

static u8_t read_type_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_type_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    5608:	9303      	str	r3, [sp, #12]
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    560a:	f7fc fdab 	bl	2164 <bt_uuid_cmp>
		return BT_GATT_ITER_CONTINUE;
    560e:	2501      	movs	r5, #1
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	/* Skip if doesn't match */
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5610:	1e07      	subs	r7, r0, #0
    5612:	d151      	bne.n	56b8 <read_type_cb+0xc2>
	 *
	 * If the first attribute in the set of requested attributes would
	 * cause an Error Response then no other attributes in the requested
	 * attributes can be considered.
	 */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5614:	2215      	movs	r2, #21
    5616:	0031      	movs	r1, r6
    5618:	9803      	ldr	r0, [sp, #12]
    561a:	f7ff ffc5 	bl	55a8 <check_perm>
    561e:	1e05      	subs	r5, r0, #0
    5620:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5622:	d006      	beq.n	5632 <read_type_cb+0x3c>
		if (data->rsp->len) {
    5624:	68e3      	ldr	r3, [r4, #12]
    5626:	781d      	ldrb	r5, [r3, #0]
    5628:	2d00      	cmp	r5, #0
    562a:	d045      	beq.n	56b8 <read_type_cb+0xc2>
			data->err = 0x00;
    562c:	7527      	strb	r7, [r4, #20]
		}
		return BT_GATT_ITER_STOP;
    562e:	003d      	movs	r5, r7
    5630:	e042      	b.n	56b8 <read_type_cb+0xc2>

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: attr not found error to no error.
	 */
	data->err = 0x00;
    5632:	7520      	strb	r0, [r4, #20]

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    5634:	68a0      	ldr	r0, [r4, #8]
    5636:	2102      	movs	r1, #2
    5638:	3008      	adds	r0, #8
    563a:	f00d f863 	bl	12704 <net_buf_simple_add>
    563e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5640:	7c33      	ldrb	r3, [r6, #16]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
    5642:	9f02      	ldr	r7, [sp, #8]
	 */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);
    5644:	7003      	strb	r3, [r0, #0]
    5646:	7c73      	ldrb	r3, [r6, #17]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5648:	68a1      	ldr	r1, [r4, #8]
	 */
	data->err = 0x00;

	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);
    564a:	7043      	strb	r3, [r0, #1]

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
    564c:	3756      	adds	r7, #86	; 0x56
	/* Fast foward to next item position */
	data->item = net_buf_add(data->buf, sizeof(*data->item));
	data->item->handle = sys_cpu_to_le16(attr->handle);

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    564e:	898a      	ldrh	r2, [r1, #12]
    5650:	883b      	ldrh	r3, [r7, #0]
    5652:	6889      	ldr	r1, [r1, #8]
    5654:	9500      	str	r5, [sp, #0]
    5656:	1a9b      	subs	r3, r3, r2
    5658:	188a      	adds	r2, r1, r2
    565a:	6871      	ldr	r1, [r6, #4]
    565c:	b29b      	uxth	r3, r3
    565e:	468c      	mov	ip, r1
    5660:	9803      	ldr	r0, [sp, #12]
    5662:	0031      	movs	r1, r6
    5664:	4666      	mov	r6, ip
    5666:	47b0      	blx	r6
    5668:	1e01      	subs	r1, r0, #0
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
    566a:	da08      	bge.n	567e <read_type_cb+0x88>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    566c:	000b      	movs	r3, r1
    566e:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    5670:	200e      	movs	r0, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5672:	2bfe      	cmp	r3, #254	; 0xfe
    5674:	d801      	bhi.n	567a <read_type_cb+0x84>
		return -err;
    5676:	4249      	negs	r1, r1
    5678:	b2c8      	uxtb	r0, r1

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, 0);
	if (read < 0) {
		data->err = err_to_att(read);
    567a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    567c:	e01c      	b.n	56b8 <read_type_cb+0xc2>
	}

	if (!data->rsp->len) {
    567e:	68e0      	ldr	r0, [r4, #12]
    5680:	1c8b      	adds	r3, r1, #2
    5682:	7802      	ldrb	r2, [r0, #0]
    5684:	2a00      	cmp	r2, #0
    5686:	d101      	bne.n	568c <read_type_cb+0x96>
		/* Set len to be the first item found */
		data->rsp->len = read + sizeof(*data->item);
    5688:	7003      	strb	r3, [r0, #0]
    568a:	e006      	b.n	569a <read_type_cb+0xa4>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    568c:	429a      	cmp	r2, r3
    568e:	d004      	beq.n	569a <read_type_cb+0xa4>
		/* All items should have the same size */
		data->buf->len -= sizeof(*data->item);
    5690:	68a2      	ldr	r2, [r4, #8]
    5692:	8993      	ldrh	r3, [r2, #12]
    5694:	3b02      	subs	r3, #2
    5696:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    5698:	e00e      	b.n	56b8 <read_type_cb+0xc2>
	}

	net_buf_add(data->buf, read);
    569a:	68a0      	ldr	r0, [r4, #8]

	/* return true only if there are still space for more items */
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    569c:	2501      	movs	r5, #1
		/* All items should have the same size */
		data->buf->len -= sizeof(*data->item);
		return BT_GATT_ITER_STOP;
	}

	net_buf_add(data->buf, read);
    569e:	3008      	adds	r0, #8
    56a0:	f00d f830 	bl	12704 <net_buf_simple_add>

	/* return true only if there are still space for more items */
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    56a4:	68a2      	ldr	r2, [r4, #8]
    56a6:	883b      	ldrh	r3, [r7, #0]
    56a8:	8992      	ldrh	r2, [r2, #12]
    56aa:	1a9b      	subs	r3, r3, r2
    56ac:	68e2      	ldr	r2, [r4, #12]
    56ae:	7812      	ldrb	r2, [r2, #0]
    56b0:	4293      	cmp	r3, r2
    56b2:	dc00      	bgt.n	56b6 <read_type_cb+0xc0>
    56b4:	2500      	movs	r5, #0
    56b6:	b2ed      	uxtb	r5, r5
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
}
    56b8:	0028      	movs	r0, r5
    56ba:	b005      	add	sp, #20
    56bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000056c0 <att_cb.isra.4>:
	BT_DBG("conn %p att %p", conn, att);

	k_sem_give(&att->tx_sem);
}

static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    56c0:	b510      	push	{r4, lr}
{
	switch (att_op_get_type(buf->data[0])) {
    56c2:	7800      	ldrb	r0, [r0, #0]
    56c4:	f7ff fdca 	bl	525c <att_op_get_type>
    56c8:	3801      	subs	r0, #1
    56ca:	b2c3      	uxtb	r3, r0
    56cc:	4803      	ldr	r0, [pc, #12]	; (56dc <att_cb.isra.4+0x1c>)
    56ce:	2b04      	cmp	r3, #4
    56d0:	d802      	bhi.n	56d8 <att_cb.isra.4+0x18>
    56d2:	4a03      	ldr	r2, [pc, #12]	; (56e0 <att_cb.isra.4+0x20>)
    56d4:	009b      	lsls	r3, r3, #2
    56d6:	5898      	ldr	r0, [r3, r2]
	case ATT_INDICATION:
		return att_req_sent;
	default:
		return att_pdu_sent;
	}
}
    56d8:	bd10      	pop	{r4, pc}
    56da:	46c0      	nop			; (mov r8, r8)
    56dc:	00005b11 	.word	0x00005b11
    56e0:	00016b64 	.word	0x00016b64

000056e4 <uuid_create>:
	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
    56e4:	b510      	push	{r4, lr}
	switch (buf->len) {
    56e6:	898b      	ldrh	r3, [r1, #12]
	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
    56e8:	0004      	movs	r4, r0
	switch (buf->len) {
    56ea:	2b02      	cmp	r3, #2
    56ec:	d009      	beq.n	5702 <uuid_create+0x1e>
    56ee:	2b10      	cmp	r3, #16
    56f0:	d110      	bne.n	5714 <uuid_create+0x30>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
		return true;
	case 16:
		uuid->type = BT_UUID_TYPE_128;
    56f2:	2302      	movs	r3, #2
    56f4:	7003      	strb	r3, [r0, #0]
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    56f6:	898a      	ldrh	r2, [r1, #12]
    56f8:	3001      	adds	r0, #1
    56fa:	6889      	ldr	r1, [r1, #8]
    56fc:	f7fb fe32 	bl	1364 <memcpy>
    5700:	e006      	b.n	5710 <uuid_create+0x2c>

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
	switch (buf->len) {
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    5702:	2300      	movs	r3, #0
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    5704:	3108      	adds	r1, #8

static bool uuid_create(struct bt_uuid *uuid, struct net_buf *buf)
{
	switch (buf->len) {
	case 2:
		uuid->type = BT_UUID_TYPE_16;
    5706:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    5708:	0008      	movs	r0, r1
    570a:	f00d f82c 	bl	12766 <net_buf_simple_pull_le16>
    570e:	8060      	strh	r0, [r4, #2]
		return true;
	case 16:
		uuid->type = BT_UUID_TYPE_128;
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    5710:	2001      	movs	r0, #1
    5712:	e000      	b.n	5716 <uuid_create+0x32>
		return true;
	}

	return false;
    5714:	2000      	movs	r0, #0
}
    5716:	bd10      	pop	{r4, pc}

00005718 <att_req_sent>:

	k_sem_give(&att->tx_sem);
}

static void att_req_sent(struct bt_conn *conn)
{
    5718:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    571a:	2104      	movs	r1, #4
    571c:	f7ff fcec 	bl	50f8 <bt_l2cap_le_lookup_tx_cid>
    5720:	0004      	movs	r4, r0
{
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p att->req %p", conn, att, att->req);

	k_sem_give(&att->tx_sem);
    5722:	30c8      	adds	r0, #200	; 0xc8
    5724:	f00e f97a 	bl	13a1c <k_sem_give>

	/* Start timeout work */
	if (att->req) {
    5728:	0023      	movs	r3, r4
    572a:	3394      	adds	r3, #148	; 0x94
    572c:	681b      	ldr	r3, [r3, #0]
    572e:	2b00      	cmp	r3, #0
    5730:	d005      	beq.n	573e <att_req_sent+0x26>
		k_delayed_work_submit(&att->timeout_work, ATT_TIMEOUT);
    5732:	0021      	movs	r1, r4
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    5734:	4a02      	ldr	r2, [pc, #8]	; (5740 <att_req_sent+0x28>)
    5736:	31a0      	adds	r1, #160	; 0xa0
    5738:	4802      	ldr	r0, [pc, #8]	; (5744 <att_req_sent+0x2c>)
    573a:	f00e fc89 	bl	14050 <k_delayed_work_submit_to_queue>
	}
}
    573e:	bd10      	pop	{r4, pc}
    5740:	00007530 	.word	0x00007530
    5744:	20002000 	.word	0x20002000

00005748 <att_is_connected>:
	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
}

static inline bool att_is_connected(struct bt_att *att)
{
    5748:	b510      	push	{r4, lr}
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    574a:	6803      	ldr	r3, [r0, #0]
    574c:	2401      	movs	r4, #1
    574e:	3351      	adds	r3, #81	; 0x51
    5750:	781b      	ldrb	r3, [r3, #0]
    5752:	2b03      	cmp	r3, #3
    5754:	d104      	bne.n	5760 <att_is_connected+0x18>
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
    5756:	3090      	adds	r0, #144	; 0x90
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5758:	f00d fa99 	bl	12c8e <atomic_get>
    575c:	1080      	asrs	r0, r0, #2
	return 0;
}

static inline bool att_is_connected(struct bt_att *att)
{
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    575e:	4384      	bics	r4, r0
    5760:	0020      	movs	r0, r4
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}
    5762:	bd10      	pop	{r4, pc}

00005764 <att_send_req>:

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
	BT_DBG("req %p", req);

	att->req = req;
    5764:	0003      	movs	r3, r0
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    5766:	b573      	push	{r0, r1, r4, r5, r6, lr}
	BT_DBG("req %p", req);

	att->req = req;
    5768:	3394      	adds	r3, #148	; 0x94

	k_sem_take(&att->tx_sem, K_FOREVER);
    576a:	0006      	movs	r6, r0

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
	BT_DBG("req %p", req);

	att->req = req;
    576c:	6019      	str	r1, [r3, #0]
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    576e:	000c      	movs	r4, r1
	BT_DBG("req %p", req);

	att->req = req;

	k_sem_take(&att->tx_sem, K_FOREVER);
    5770:	2101      	movs	r1, #1
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
		!atomic_test_bit(att->flags, ATT_DISCONNECTED));
}

static int att_send_req(struct bt_att *att, struct bt_att_req *req)
{
    5772:	0005      	movs	r5, r0
	BT_DBG("req %p", req);

	att->req = req;

	k_sem_take(&att->tx_sem, K_FOREVER);
    5774:	36c8      	adds	r6, #200	; 0xc8
    5776:	4249      	negs	r1, r1
    5778:	0030      	movs	r0, r6
    577a:	f00e f98b 	bl	13a94 <k_sem_take>
	if (!att_is_connected(att)) {
    577e:	0028      	movs	r0, r5
    5780:	f7ff ffe2 	bl	5748 <att_is_connected>
    5784:	2800      	cmp	r0, #0
    5786:	d10f      	bne.n	57a8 <att_send_req+0x44>
		BT_WARN("Disconnected");
    5788:	4b14      	ldr	r3, [pc, #80]	; (57dc <att_send_req+0x78>)
    578a:	4a15      	ldr	r2, [pc, #84]	; (57e0 <att_send_req+0x7c>)
    578c:	9301      	str	r3, [sp, #4]
    578e:	4b15      	ldr	r3, [pc, #84]	; (57e4 <att_send_req+0x80>)
    5790:	4915      	ldr	r1, [pc, #84]	; (57e8 <att_send_req+0x84>)
    5792:	9300      	str	r3, [sp, #0]
    5794:	4815      	ldr	r0, [pc, #84]	; (57ec <att_send_req+0x88>)
    5796:	4b16      	ldr	r3, [pc, #88]	; (57f0 <att_send_req+0x8c>)
    5798:	f7fb ffe6 	bl	1768 <printk>
		k_sem_give(&att->tx_sem);
    579c:	0030      	movs	r0, r6
    579e:	f00e f93d 	bl	13a1c <k_sem_give>
		return -ENOTCONN;
    57a2:	2039      	movs	r0, #57	; 0x39
    57a4:	4240      	negs	r0, r0
    57a6:	e017      	b.n	57d8 <att_send_req+0x74>
	}

	/* Save request state so it can be resent */
	net_buf_simple_save(&req->buf->b, &req->state);
    57a8:	6926      	ldr	r6, [r4, #16]
    57aa:	0030      	movs	r0, r6
    57ac:	3008      	adds	r0, #8
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    57ae:	f00c ffe5 	bl	1277c <net_buf_simple_headroom>
    57b2:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    57b4:	89b3      	ldrh	r3, [r6, #12]

	/* Keep a reference for resending in case of an error */
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    57b6:	6920      	ldr	r0, [r4, #16]
    57b8:	81e3      	strh	r3, [r4, #14]
    57ba:	682d      	ldr	r5, [r5, #0]
    57bc:	f00c ff9e 	bl	126fc <net_buf_ref>
    57c0:	6923      	ldr	r3, [r4, #16]
    57c2:	0006      	movs	r6, r0
    57c4:	6898      	ldr	r0, [r3, #8]
    57c6:	f7ff ff7b 	bl	56c0 <att_cb.isra.4>
    57ca:	0032      	movs	r2, r6
    57cc:	0003      	movs	r3, r0
    57ce:	2104      	movs	r1, #4
    57d0:	0028      	movs	r0, r5
    57d2:	f7ff fbe9 	bl	4fa8 <bt_l2cap_send_cb>
			 net_buf_ref(req->buf), att_cb(req->buf));

	return 0;
    57d6:	2000      	movs	r0, #0
}
    57d8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    57da:	46c0      	nop			; (mov r8, r8)
    57dc:	000145b0 	.word	0x000145b0
    57e0:	000145bd 	.word	0x000145bd
    57e4:	000145fb 	.word	0x000145fb
    57e8:	00014577 	.word	0x00014577
    57ec:	0001505e 	.word	0x0001505e
    57f0:	000169a7 	.word	0x000169a7

000057f4 <att_handle_rsp>:

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    57f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    57f6:	0004      	movs	r4, r0
	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);

	if (!att->req) {
    57f8:	0025      	movs	r5, r4

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    57fa:	b085      	sub	sp, #20
	bt_att_func_t func;

	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);
    57fc:	30a0      	adds	r0, #160	; 0xa0

	if (!att->req) {
    57fe:	3594      	adds	r5, #148	; 0x94

	att_send_req(att, ATT_REQ(node));
}

static u8_t att_handle_rsp(struct bt_att *att, void *pdu, u16_t len, u8_t err)
{
    5800:	9303      	str	r3, [sp, #12]
    5802:	9102      	str	r1, [sp, #8]
    5804:	0017      	movs	r7, r2
	bt_att_func_t func;

	BT_DBG("err %u len %u: %s", err, len, bt_hex(pdu, len));

	/* Cancel timeout if ongoing */
	k_delayed_work_cancel(&att->timeout_work);
    5806:	f00e fbeb 	bl	13fe0 <k_delayed_work_cancel>

	if (!att->req) {
    580a:	682b      	ldr	r3, [r5, #0]
    580c:	2b00      	cmp	r3, #0
    580e:	d10a      	bne.n	5826 <att_handle_rsp+0x32>
		BT_WARN("No pending ATT request");
    5810:	4b1b      	ldr	r3, [pc, #108]	; (5880 <att_handle_rsp+0x8c>)
    5812:	4a1c      	ldr	r2, [pc, #112]	; (5884 <att_handle_rsp+0x90>)
    5814:	9301      	str	r3, [sp, #4]
    5816:	4b1c      	ldr	r3, [pc, #112]	; (5888 <att_handle_rsp+0x94>)
    5818:	491c      	ldr	r1, [pc, #112]	; (588c <att_handle_rsp+0x98>)
    581a:	9300      	str	r3, [sp, #0]
    581c:	481c      	ldr	r0, [pc, #112]	; (5890 <att_handle_rsp+0x9c>)
    581e:	4b1d      	ldr	r3, [pc, #116]	; (5894 <att_handle_rsp+0xa0>)
    5820:	f7fb ffa2 	bl	1768 <printk>
		goto process;
    5824:	e01a      	b.n	585c <att_handle_rsp+0x68>
	}

	/* Release original buffer */
	if (att->req->buf) {
    5826:	6918      	ldr	r0, [r3, #16]
    5828:	2800      	cmp	r0, #0
    582a:	d004      	beq.n	5836 <att_handle_rsp+0x42>
		net_buf_unref(att->req->buf);
    582c:	f00c ff48 	bl	126c0 <net_buf_unref>
		att->req->buf = NULL;
    5830:	2200      	movs	r2, #0
    5832:	682b      	ldr	r3, [r5, #0]
    5834:	611a      	str	r2, [r3, #16]
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    5836:	682b      	ldr	r3, [r5, #0]
	att->req->func = NULL;
    5838:	2600      	movs	r6, #0
		net_buf_unref(att->req->buf);
		att->req->buf = NULL;
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    583a:	685a      	ldr	r2, [r3, #4]
	att->req->func = NULL;

	func(att->chan.chan.conn, err, pdu, len, att->req);
    583c:	6820      	ldr	r0, [r4, #0]
		net_buf_unref(att->req->buf);
		att->req->buf = NULL;
	}

	/* Reset func so it can be reused by the callback */
	func = att->req->func;
    583e:	4694      	mov	ip, r2
	att->req->func = NULL;
    5840:	605e      	str	r6, [r3, #4]

	func(att->chan.chan.conn, err, pdu, len, att->req);
    5842:	9a02      	ldr	r2, [sp, #8]
    5844:	9300      	str	r3, [sp, #0]
    5846:	9903      	ldr	r1, [sp, #12]
    5848:	003b      	movs	r3, r7
    584a:	4667      	mov	r7, ip
    584c:	47b8      	blx	r7

	/* Don't destroy if callback had reused the request */
	if (!att->req->func) {
    584e:	6828      	ldr	r0, [r5, #0]
    5850:	6843      	ldr	r3, [r0, #4]
    5852:	42b3      	cmp	r3, r6
    5854:	d101      	bne.n	585a <att_handle_rsp+0x66>
		att_req_destroy(att->req);
    5856:	f7ff fd4d 	bl	52f4 <att_req_destroy>
	}

	att->req = NULL;
    585a:	602e      	str	r6, [r5, #0]
    585c:	0023      	movs	r3, r4
    585e:	3398      	adds	r3, #152	; 0x98
    5860:	6819      	ldr	r1, [r3, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    5862:	2900      	cmp	r1, #0
    5864:	d008      	beq.n	5878 <att_handle_rsp+0x84>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    5866:	680a      	ldr	r2, [r1, #0]
	if (list->tail == node) {
    5868:	6858      	ldr	r0, [r3, #4]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    586a:	601a      	str	r2, [r3, #0]
	if (list->tail == node) {
    586c:	4281      	cmp	r1, r0
    586e:	d100      	bne.n	5872 <att_handle_rsp+0x7e>
		list->tail = list->head;
    5870:	605a      	str	r2, [r3, #4]
	node = sys_slist_get(&att->reqs);
	if (!node) {
		return;
	}

	att_send_req(att, ATT_REQ(node));
    5872:	0020      	movs	r0, r4
    5874:	f7ff ff76 	bl	5764 <att_send_req>
process:
	/* Process pending requests */
	att_process(att);

	return 0;
}
    5878:	2000      	movs	r0, #0
    587a:	b005      	add	sp, #20
    587c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    587e:	46c0      	nop			; (mov r8, r8)
    5880:	000145b0 	.word	0x000145b0
    5884:	000145bd 	.word	0x000145bd
    5888:	000145fb 	.word	0x000145fb
    588c:	00014577 	.word	0x00014577
    5890:	0001507b 	.word	0x0001507b
    5894:	000169b4 	.word	0x000169b4

00005898 <att_confirm>:

	return 0;
}

static u8_t att_confirm(struct bt_att *att, struct net_buf *buf)
{
    5898:	b510      	push	{r4, lr}
	BT_DBG("");

	return att_handle_rsp(att, buf->data, buf->len, 0);
    589a:	2300      	movs	r3, #0
    589c:	898a      	ldrh	r2, [r1, #12]
    589e:	6889      	ldr	r1, [r1, #8]
    58a0:	f7ff ffa8 	bl	57f4 <att_handle_rsp>
}
    58a4:	bd10      	pop	{r4, pc}

000058a6 <att_handle_exec_write_rsp>:
    58a6:	b510      	push	{r4, lr}
    58a8:	f7ff fff6 	bl	5898 <att_confirm>
    58ac:	bd10      	pop	{r4, pc}

000058ae <att_handle_prepare_write_rsp>:
    58ae:	b510      	push	{r4, lr}
    58b0:	f7ff fff2 	bl	5898 <att_confirm>
    58b4:	bd10      	pop	{r4, pc}

000058b6 <att_handle_write_rsp>:
    58b6:	b510      	push	{r4, lr}
    58b8:	f7ff ffee 	bl	5898 <att_confirm>
    58bc:	bd10      	pop	{r4, pc}

000058be <att_handle_read_mult_rsp>:
    58be:	b510      	push	{r4, lr}
    58c0:	f7ff ffea 	bl	5898 <att_confirm>
    58c4:	bd10      	pop	{r4, pc}

000058c6 <att_handle_read_blob_rsp>:
    58c6:	b510      	push	{r4, lr}
    58c8:	f7ff ffe6 	bl	5898 <att_confirm>
    58cc:	bd10      	pop	{r4, pc}

000058ce <att_handle_read_rsp>:
    58ce:	b510      	push	{r4, lr}
    58d0:	f7ff ffe2 	bl	5898 <att_confirm>
    58d4:	bd10      	pop	{r4, pc}

000058d6 <att_handle_read_type_rsp>:
    58d6:	b510      	push	{r4, lr}
    58d8:	f7ff ffde 	bl	5898 <att_confirm>
    58dc:	bd10      	pop	{r4, pc}

000058de <att_handle_find_type_rsp>:
    58de:	b510      	push	{r4, lr}
    58e0:	f7ff ffda 	bl	5898 <att_confirm>
    58e4:	bd10      	pop	{r4, pc}

000058e6 <att_handle_find_info_rsp>:
    58e6:	b510      	push	{r4, lr}
    58e8:	f7ff ffd6 	bl	5898 <att_confirm>
    58ec:	bd10      	pop	{r4, pc}

000058ee <att_mtu_rsp>:

	return 0;
}

static u8_t att_mtu_rsp(struct bt_att *att, struct net_buf *buf)
{
    58ee:	b510      	push	{r4, lr}
	struct bt_att_exchange_mtu_rsp *rsp;
	u16_t mtu;

	if (!att) {
		return 0;
    58f0:	0003      	movs	r3, r0

	return 0;
}

static u8_t att_mtu_rsp(struct bt_att *att, struct net_buf *buf)
{
    58f2:	000c      	movs	r4, r1
	struct bt_att_exchange_mtu_rsp *rsp;
	u16_t mtu;

	if (!att) {
    58f4:	2800      	cmp	r0, #0
    58f6:	d017      	beq.n	5928 <att_mtu_rsp+0x3a>
		return 0;
	}

	rsp = (void *)buf->data;
    58f8:	6889      	ldr	r1, [r1, #8]

	mtu = sys_le16_to_cpu(rsp->mtu);
    58fa:	784b      	ldrb	r3, [r1, #1]
    58fc:	780a      	ldrb	r2, [r1, #0]
    58fe:	021b      	lsls	r3, r3, #8
    5900:	4313      	orrs	r3, r2

	BT_DBG("Server MTU %u", mtu);

	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    5902:	2b16      	cmp	r3, #22
    5904:	d803      	bhi.n	590e <att_mtu_rsp+0x20>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    5906:	2200      	movs	r2, #0
    5908:	2304      	movs	r3, #4
    590a:	0011      	movs	r1, r2
    590c:	e009      	b.n	5922 <att_mtu_rsp+0x34>
	}

	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    590e:	1c1a      	adds	r2, r3, #0
    5910:	2b41      	cmp	r3, #65	; 0x41
    5912:	d900      	bls.n	5916 <att_mtu_rsp+0x28>
    5914:	2241      	movs	r2, #65	; 0x41
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    5916:	0003      	movs	r3, r0
    5918:	3356      	adds	r3, #86	; 0x56
	/* Check if MTU is valid */
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
	}

	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    591a:	8742      	strh	r2, [r0, #58]	; 0x3a
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.tx.mtu = att->chan.rx.mtu;
    591c:	801a      	strh	r2, [r3, #0]

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);

	return att_handle_rsp(att, rsp, buf->len, 0);
    591e:	2300      	movs	r3, #0
    5920:	89a2      	ldrh	r2, [r4, #12]
    5922:	f7ff ff67 	bl	57f4 <att_handle_rsp>
    5926:	0003      	movs	r3, r0
}
    5928:	0018      	movs	r0, r3
    592a:	bd10      	pop	{r4, pc}

0000592c <att_error_rsp>:
	return bt_conn_security(conn, sec);
}
#endif /* CONFIG_BLUETOOTH_SMP */

static u8_t att_error_rsp(struct bt_att *att, struct net_buf *buf)
{
    592c:	b570      	push	{r4, r5, r6, lr}
    592e:	0005      	movs	r5, r0
	rsp = (void *)buf->data;

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    5930:	002e      	movs	r6, r5
    5932:	3694      	adds	r6, #148	; 0x94
    5934:	6833      	ldr	r3, [r6, #0]
static u8_t att_error_rsp(struct bt_att *att, struct net_buf *buf)
{
	struct bt_att_error_rsp *rsp;
	u8_t err;

	rsp = (void *)buf->data;
    5936:	6888      	ldr	r0, [r1, #8]

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
    5938:	2b00      	cmp	r3, #0
    593a:	d02a      	beq.n	5992 <att_error_rsp+0x66>
		err = BT_ATT_ERR_UNLIKELY;
		goto done;
	}

	if (att->req->buf) {
    593c:	691a      	ldr	r2, [r3, #16]
    593e:	2a00      	cmp	r2, #0
    5940:	d006      	beq.n	5950 <att_error_rsp+0x24>
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    5942:	0014      	movs	r4, r2
    5944:	8999      	ldrh	r1, [r3, #12]
    5946:	3410      	adds	r4, #16
    5948:	1861      	adds	r1, r4, r1
    594a:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    594c:	89d9      	ldrh	r1, [r3, #14]
    594e:	8191      	strh	r1, [r2, #12]
		net_buf_simple_restore(&att->req->buf->b, &att->req->state);
	}

	err = rsp->error;
#if defined(CONFIG_BLUETOOTH_SMP)
	if (att->req->retrying) {
    5950:	7d1b      	ldrb	r3, [r3, #20]
	if (att->req->buf) {
		/* Restore state to be resent */
		net_buf_simple_restore(&att->req->buf->b, &att->req->state);
	}

	err = rsp->error;
    5952:	78c4      	ldrb	r4, [r0, #3]
#if defined(CONFIG_BLUETOOTH_SMP)
	if (att->req->retrying) {
    5954:	2b00      	cmp	r3, #0
    5956:	d11d      	bne.n	5994 <att_error_rsp+0x68>
		goto done;
	}

	/* Check if security needs to be changed */
	if (!att_change_security(att->chan.chan.conn, err)) {
    5958:	6828      	ldr	r0, [r5, #0]
#if defined(CONFIG_BLUETOOTH_SMP)
static int att_change_security(struct bt_conn *conn, u8_t err)
{
	bt_security_t sec;

	switch (err) {
    595a:	2c05      	cmp	r4, #5
    595c:	d005      	beq.n	596a <att_error_rsp+0x3e>
    595e:	2c0f      	cmp	r4, #15
    5960:	d118      	bne.n	5994 <att_error_rsp+0x68>
	case BT_ATT_ERR_INSUFFICIENT_ENCRYPTION:
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    5962:	7a03      	ldrb	r3, [r0, #8]
    5964:	2b01      	cmp	r3, #1
    5966:	d909      	bls.n	597c <att_error_rsp+0x50>
    5968:	e014      	b.n	5994 <att_error_rsp+0x68>
			return -EALREADY;
		sec = BT_SECURITY_MEDIUM;
		break;
	case BT_ATT_ERR_AUTHENTICATION:
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    596a:	7a03      	ldrb	r3, [r0, #8]
    596c:	2b01      	cmp	r3, #1
    596e:	d905      	bls.n	597c <att_error_rsp+0x50>
			 * Note: When the link is not encrypted, the error code
			 * "Insufficient Authentication" does not indicate that
			 * MITM protection is required.
			 */
			sec = BT_SECURITY_MEDIUM;
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    5970:	2b02      	cmp	r3, #2
    5972:	d005      	beq.n	5980 <att_error_rsp+0x54>
			 * required but LE legacy pairing has occurred and the
			 * link is currently encrypted, the service request
			 * shall be rejected with the error code ''Insufficient
			 * Authentication'.
			 */
			sec = BT_SECURITY_FIPS;
    5974:	2104      	movs	r1, #4
			 * the link is currently encrypted, the error code
			 * 'Insufficient Authentication' indicates that MITM
			 * protection is required.
			 */
			sec = BT_SECURITY_HIGH;
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    5976:	2b03      	cmp	r3, #3
    5978:	d003      	beq.n	5982 <att_error_rsp+0x56>
    597a:	e00b      	b.n	5994 <att_error_rsp+0x68>

	switch (err) {
	case BT_ATT_ERR_INSUFFICIENT_ENCRYPTION:
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
			return -EALREADY;
		sec = BT_SECURITY_MEDIUM;
    597c:	2102      	movs	r1, #2
    597e:	e000      	b.n	5982 <att_error_rsp+0x56>
			 * Note: When unauthenticated pairing has occurred and
			 * the link is currently encrypted, the error code
			 * 'Insufficient Authentication' indicates that MITM
			 * protection is required.
			 */
			sec = BT_SECURITY_HIGH;
    5980:	2103      	movs	r1, #3
		break;
	default:
		return -EINVAL;
	}

	return bt_conn_security(conn, sec);
    5982:	f7fe fd11 	bl	43a8 <bt_conn_security>
	if (att->req->retrying) {
		goto done;
	}

	/* Check if security needs to be changed */
	if (!att_change_security(att->chan.chan.conn, err)) {
    5986:	2800      	cmp	r0, #0
    5988:	d104      	bne.n	5994 <att_error_rsp+0x68>
		att->req->retrying = true;
    598a:	2201      	movs	r2, #1
    598c:	6833      	ldr	r3, [r6, #0]
    598e:	751a      	strb	r2, [r3, #20]
		/* Wait security_changed: TODO: Handle fail case */
		return 0;
    5990:	e006      	b.n	59a0 <att_error_rsp+0x74>

	BT_DBG("request 0x%02x handle 0x%04x error 0x%02x", rsp->request,
	       sys_le16_to_cpu(rsp->handle), rsp->error);

	if (!att->req) {
		err = BT_ATT_ERR_UNLIKELY;
    5992:	240e      	movs	r4, #14
		return 0;
	}
#endif /* CONFIG_BLUETOOTH_SMP */

done:
	return att_handle_rsp(att, NULL, 0, err);
    5994:	2200      	movs	r2, #0
    5996:	0023      	movs	r3, r4
    5998:	0011      	movs	r1, r2
    599a:	0028      	movs	r0, r5
    599c:	f7ff ff2a 	bl	57f4 <att_handle_rsp>
}
    59a0:	bd70      	pop	{r4, r5, r6, pc}

000059a2 <att_reset>:

	return buf;
}

static void att_reset(struct bt_att *att)
{
    59a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    59a4:	0005      	movs	r5, r0

	atomic_set_bit(att->flags, ATT_DISCONNECTED);

	/* Ensure that any waiters are woken up */
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
    59a6:	002c      	movs	r4, r5
    59a8:	002e      	movs	r6, r5

	return buf;
}

static void att_reset(struct bt_att *att)
{
    59aa:	b085      	sub	sp, #20
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    59ac:	2104      	movs	r1, #4

	atomic_set_bit(att->flags, ATT_DISCONNECTED);

	/* Ensure that any waiters are woken up */
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
    59ae:	34c8      	adds	r4, #200	; 0xc8
	while ((buf = k_fifo_get(&att->prep_queue, K_NO_WAIT))) {
		net_buf_unref(buf);
	}
#endif

	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    59b0:	3090      	adds	r0, #144	; 0x90
    59b2:	f00d f978 	bl	12ca6 <atomic_or>

	/* Ensure that any waiters are woken up */
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
    59b6:	0020      	movs	r0, r4
    59b8:	f00e f830 	bl	13a1c <k_sem_give>
    59bc:	3698      	adds	r6, #152	; 0x98
    59be:	0020      	movs	r0, r4
    59c0:	f00e f82c 	bl	13a1c <k_sem_give>
    59c4:	6834      	ldr	r4, [r6, #0]
    59c6:	9603      	str	r6, [sp, #12]
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    59c8:	2c00      	cmp	r4, #0
    59ca:	d10e      	bne.n	59ea <att_reset+0x48>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    59cc:	2100      	movs	r1, #0
    59ce:	9b03      	ldr	r3, [sp, #12]
    59d0:	6019      	str	r1, [r3, #0]
	list->tail = NULL;
    59d2:	6059      	str	r1, [r3, #4]
	}

	/* Reset list */
	sys_slist_init(&att->reqs);

	if (!att->req) {
    59d4:	002b      	movs	r3, r5
    59d6:	3394      	adds	r3, #148	; 0x94
    59d8:	681b      	ldr	r3, [r3, #0]
    59da:	428b      	cmp	r3, r1
    59dc:	d017      	beq.n	5a0e <att_reset+0x6c>
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    59de:	230e      	movs	r3, #14
    59e0:	000a      	movs	r2, r1
    59e2:	0028      	movs	r0, r5
    59e4:	f7ff ff06 	bl	57f4 <att_handle_rsp>
    59e8:	e011      	b.n	5a0e <att_reset+0x6c>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    59ea:	6827      	ldr	r7, [r4, #0]
		k_sem_give(&att->tx_sem);
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
		if (req->func) {
    59ec:	6863      	ldr	r3, [r4, #4]
    59ee:	1e1e      	subs	r6, r3, #0
    59f0:	d005      	beq.n	59fe <att_reset+0x5c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    59f2:	2300      	movs	r3, #0
    59f4:	9400      	str	r4, [sp, #0]
    59f6:	001a      	movs	r2, r3
    59f8:	210e      	movs	r1, #14
    59fa:	0018      	movs	r0, r3
    59fc:	47b0      	blx	r6
		}

		att_req_destroy(req);
    59fe:	0020      	movs	r0, r4
    5a00:	f7ff fc78 	bl	52f4 <att_req_destroy>
	for (i = 0; i < CONFIG_BLUETOOTH_ATT_TX_MAX; i++) {
		k_sem_give(&att->tx_sem);
	}

	/* Notify pending requests */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    5a04:	2f00      	cmp	r7, #0
    5a06:	d0e1      	beq.n	59cc <att_reset+0x2a>
    5a08:	003c      	movs	r4, r7
    5a0a:	683f      	ldr	r7, [r7, #0]
    5a0c:	e7ee      	b.n	59ec <att_reset+0x4a>
		return;
	}

	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}
    5a0e:	b005      	add	sp, #20
    5a10:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005a12 <bt_att_disconnected>:

	bt_gatt_connected(ch->chan.conn);
}

static void bt_att_disconnected(struct bt_l2cap_chan *chan)
{
    5a12:	b510      	push	{r4, lr}
    5a14:	0004      	movs	r4, r0
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p cid 0x%04x", ch, ch->tx.cid);

	att_reset(att);
    5a16:	f7ff ffc4 	bl	59a2 <att_reset>

	bt_gatt_disconnected(ch->chan.conn);
    5a1a:	6820      	ldr	r0, [r4, #0]
    5a1c:	f001 fa28 	bl	6e70 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    5a20:	22dc      	movs	r2, #220	; 0xdc
    5a22:	2100      	movs	r1, #0
    5a24:	0020      	movs	r0, r4
    5a26:	f7fb fcc7 	bl	13b8 <memset>
}
    5a2a:	bd10      	pop	{r4, pc}

00005a2c <att_timeout>:
	/* Notify outstanding request */
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
}

static void att_timeout(struct k_work *work)
{
    5a2c:	b513      	push	{r0, r1, r4, lr}
    5a2e:	0004      	movs	r4, r0
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
	struct bt_l2cap_le_chan *ch = &att->chan;

	BT_ERR("ATT Timeout");
    5a30:	4b09      	ldr	r3, [pc, #36]	; (5a58 <att_timeout+0x2c>)
    5a32:	4a0a      	ldr	r2, [pc, #40]	; (5a5c <att_timeout+0x30>)
    5a34:	9301      	str	r3, [sp, #4]
    5a36:	4b0a      	ldr	r3, [pc, #40]	; (5a60 <att_timeout+0x34>)
    5a38:	490a      	ldr	r1, [pc, #40]	; (5a64 <att_timeout+0x38>)
	 * transaction shall be considered to have failed and the local higher
	 * layers shall be informed of this failure. No more attribute protocol
	 * requests, commands, indications or notifications shall be sent to the
	 * target device on this ATT Bearer.
	 */
	att_reset(att);
    5a3a:	3ca0      	subs	r4, #160	; 0xa0
static void att_timeout(struct k_work *work)
{
	struct bt_att *att = CONTAINER_OF(work, struct bt_att, timeout_work);
	struct bt_l2cap_le_chan *ch = &att->chan;

	BT_ERR("ATT Timeout");
    5a3c:	9300      	str	r3, [sp, #0]
    5a3e:	480a      	ldr	r0, [pc, #40]	; (5a68 <att_timeout+0x3c>)
    5a40:	4b0a      	ldr	r3, [pc, #40]	; (5a6c <att_timeout+0x40>)
    5a42:	f7fb fe91 	bl	1768 <printk>
	 * transaction shall be considered to have failed and the local higher
	 * layers shall be informed of this failure. No more attribute protocol
	 * requests, commands, indications or notifications shall be sent to the
	 * target device on this ATT Bearer.
	 */
	att_reset(att);
    5a46:	0020      	movs	r0, r4
    5a48:	f7ff ffab 	bl	59a2 <att_reset>

	/* Consider the channel disconnected */
	bt_gatt_disconnected(ch->chan.conn);
    5a4c:	6820      	ldr	r0, [r4, #0]
    5a4e:	f001 fa0f 	bl	6e70 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    5a52:	2300      	movs	r3, #0
    5a54:	6023      	str	r3, [r4, #0]
}
    5a56:	bd13      	pop	{r0, r1, r4, pc}
    5a58:	000145b0 	.word	0x000145b0
    5a5c:	00014570 	.word	0x00014570
    5a60:	000145b5 	.word	0x000145b5
    5a64:	00014577 	.word	0x00014577
    5a68:	000150a2 	.word	0x000150a2
    5a6c:	00016b78 	.word	0x00016b78

00005a70 <bt_att_encrypt_change>:
}

#if defined(CONFIG_BLUETOOTH_SMP)
static void bt_att_encrypt_change(struct bt_l2cap_chan *chan,
				  u8_t hci_status)
{
    5a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a72:	b085      	sub	sp, #20
    5a74:	0004      	movs	r4, r0
    5a76:	9103      	str	r1, [sp, #12]

	/*
	 * If status (HCI status of security procedure) is non-zero, notify
	 * outstanding request about security failure.
	 */
	if (hci_status) {
    5a78:	2900      	cmp	r1, #0
    5a7a:	d005      	beq.n	5a88 <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    5a7c:	2200      	movs	r2, #0
    5a7e:	2305      	movs	r3, #5
    5a80:	0011      	movs	r1, r2
    5a82:	f7ff feb7 	bl	57f4 <att_handle_rsp>
		return;
    5a86:	e033      	b.n	5af0 <bt_att_encrypt_change+0x80>
static void bt_att_encrypt_change(struct bt_l2cap_chan *chan,
				  u8_t hci_status)
{
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
	struct bt_conn *conn = ch->chan.conn;
    5a88:	6806      	ldr	r6, [r0, #0]
	if (hci_status) {
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
		return;
	}

	if (conn->sec_level == BT_SECURITY_LOW) {
    5a8a:	7a33      	ldrb	r3, [r6, #8]
    5a8c:	2b01      	cmp	r3, #1
    5a8e:	d02f      	beq.n	5af0 <bt_att_encrypt_change+0x80>
		return;
	}

	if (!att->req || !att->req->retrying) {
    5a90:	0005      	movs	r5, r0
    5a92:	3594      	adds	r5, #148	; 0x94
    5a94:	682b      	ldr	r3, [r5, #0]
    5a96:	2b00      	cmp	r3, #0
    5a98:	d02a      	beq.n	5af0 <bt_att_encrypt_change+0x80>
    5a9a:	7d1b      	ldrb	r3, [r3, #20]
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d027      	beq.n	5af0 <bt_att_encrypt_change+0x80>
		return;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    5aa0:	0007      	movs	r7, r0
    5aa2:	2101      	movs	r1, #1
    5aa4:	37c8      	adds	r7, #200	; 0xc8
    5aa6:	4249      	negs	r1, r1
    5aa8:	0038      	movs	r0, r7
    5aaa:	f00d fff3 	bl	13a94 <k_sem_take>
	if (!att_is_connected(att)) {
    5aae:	0020      	movs	r0, r4
    5ab0:	f7ff fe4a 	bl	5748 <att_is_connected>
    5ab4:	2800      	cmp	r0, #0
    5ab6:	d10d      	bne.n	5ad4 <bt_att_encrypt_change+0x64>
		BT_WARN("Disconnected");
    5ab8:	4b0e      	ldr	r3, [pc, #56]	; (5af4 <bt_att_encrypt_change+0x84>)
    5aba:	4a0f      	ldr	r2, [pc, #60]	; (5af8 <bt_att_encrypt_change+0x88>)
    5abc:	9301      	str	r3, [sp, #4]
    5abe:	4b0f      	ldr	r3, [pc, #60]	; (5afc <bt_att_encrypt_change+0x8c>)
    5ac0:	490f      	ldr	r1, [pc, #60]	; (5b00 <bt_att_encrypt_change+0x90>)
    5ac2:	9300      	str	r3, [sp, #0]
    5ac4:	480f      	ldr	r0, [pc, #60]	; (5b04 <bt_att_encrypt_change+0x94>)
    5ac6:	4b10      	ldr	r3, [pc, #64]	; (5b08 <bt_att_encrypt_change+0x98>)
    5ac8:	f7fb fe4e 	bl	1768 <printk>
		k_sem_give(&att->tx_sem);
    5acc:	0038      	movs	r0, r7
    5ace:	f00d ffa5 	bl	13a1c <k_sem_give>
		return;
    5ad2:	e00d      	b.n	5af0 <bt_att_encrypt_change+0x80>
	}

	BT_DBG("Retrying");

	/* Resend buffer */
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    5ad4:	682b      	ldr	r3, [r5, #0]
    5ad6:	691c      	ldr	r4, [r3, #16]
    5ad8:	68a0      	ldr	r0, [r4, #8]
    5ada:	f7ff fdf1 	bl	56c0 <att_cb.isra.4>
    5ade:	0022      	movs	r2, r4
    5ae0:	0003      	movs	r3, r0
    5ae2:	2104      	movs	r1, #4
    5ae4:	0030      	movs	r0, r6
    5ae6:	f7ff fa5f 	bl	4fa8 <bt_l2cap_send_cb>
			 att_cb(att->req->buf));
	att->req->buf = NULL;
    5aea:	682b      	ldr	r3, [r5, #0]
    5aec:	9a03      	ldr	r2, [sp, #12]
    5aee:	611a      	str	r2, [r3, #16]
}
    5af0:	b005      	add	sp, #20
    5af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5af4:	000145b0 	.word	0x000145b0
    5af8:	000145bd 	.word	0x000145bd
    5afc:	000145fb 	.word	0x000145fb
    5b00:	00014577 	.word	0x00014577
    5b04:	0001505e 	.word	0x0001505e
    5b08:	00016b0c 	.word	0x00016b0c

00005b0c <att_prepare_write_req>:
    5b0c:	2006      	movs	r0, #6
    5b0e:	4770      	bx	lr

00005b10 <att_pdu_sent>:
		k_delayed_work_submit(&att->timeout_work, ATT_TIMEOUT);
	}
}

static void att_pdu_sent(struct bt_conn *conn)
{
    5b10:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5b12:	2104      	movs	r1, #4
    5b14:	f7ff faf0 	bl	50f8 <bt_l2cap_le_lookup_tx_cid>
{
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

	k_sem_give(&att->tx_sem);
    5b18:	30c8      	adds	r0, #200	; 0xc8
    5b1a:	f00d ff7f 	bl	13a1c <k_sem_give>
}
    5b1e:	bd10      	pop	{r4, pc}

00005b20 <att_chan_get>:
static struct bt_att *att_chan_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    5b20:	0003      	movs	r3, r0
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    5b22:	b513      	push	{r0, r1, r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    5b24:	3351      	adds	r3, #81	; 0x51
    5b26:	781b      	ldrb	r3, [r3, #0]
    5b28:	2b03      	cmp	r3, #3
    5b2a:	d008      	beq.n	5b3e <att_chan_get+0x1e>
		BT_WARN("Not connected");
    5b2c:	4b15      	ldr	r3, [pc, #84]	; (5b84 <att_chan_get+0x64>)
    5b2e:	4a16      	ldr	r2, [pc, #88]	; (5b88 <att_chan_get+0x68>)
    5b30:	9301      	str	r3, [sp, #4]
    5b32:	4b16      	ldr	r3, [pc, #88]	; (5b8c <att_chan_get+0x6c>)
    5b34:	4916      	ldr	r1, [pc, #88]	; (5b90 <att_chan_get+0x70>)
    5b36:	9300      	str	r3, [sp, #0]
    5b38:	4816      	ldr	r0, [pc, #88]	; (5b94 <att_chan_get+0x74>)
    5b3a:	4b17      	ldr	r3, [pc, #92]	; (5b98 <att_chan_get+0x78>)
    5b3c:	e01c      	b.n	5b78 <att_chan_get+0x58>
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    5b3e:	2104      	movs	r1, #4
    5b40:	f7ff faec 	bl	511c <bt_l2cap_le_lookup_rx_cid>
    5b44:	1e04      	subs	r4, r0, #0
	if (!chan) {
    5b46:	d10a      	bne.n	5b5e <att_chan_get+0x3e>
		BT_ERR("Unable to find ATT channel");
    5b48:	4b0e      	ldr	r3, [pc, #56]	; (5b84 <att_chan_get+0x64>)
    5b4a:	4a14      	ldr	r2, [pc, #80]	; (5b9c <att_chan_get+0x7c>)
    5b4c:	9301      	str	r3, [sp, #4]
    5b4e:	4b14      	ldr	r3, [pc, #80]	; (5ba0 <att_chan_get+0x80>)
    5b50:	490f      	ldr	r1, [pc, #60]	; (5b90 <att_chan_get+0x70>)
    5b52:	9300      	str	r3, [sp, #0]
    5b54:	4813      	ldr	r0, [pc, #76]	; (5ba4 <att_chan_get+0x84>)
    5b56:	4b10      	ldr	r3, [pc, #64]	; (5b98 <att_chan_get+0x78>)
    5b58:	f7fb fe06 	bl	1768 <printk>
    5b5c:	e00f      	b.n	5b7e <att_chan_get+0x5e>
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    5b5e:	3090      	adds	r0, #144	; 0x90
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5b60:	f00d f895 	bl	12c8e <atomic_get>
    5b64:	0743      	lsls	r3, r0, #29
    5b66:	d50a      	bpl.n	5b7e <att_chan_get+0x5e>
		BT_WARN("ATT context flagged as disconnected");
    5b68:	4b06      	ldr	r3, [pc, #24]	; (5b84 <att_chan_get+0x64>)
    5b6a:	4a07      	ldr	r2, [pc, #28]	; (5b88 <att_chan_get+0x68>)
    5b6c:	9301      	str	r3, [sp, #4]
    5b6e:	4b07      	ldr	r3, [pc, #28]	; (5b8c <att_chan_get+0x6c>)
    5b70:	4907      	ldr	r1, [pc, #28]	; (5b90 <att_chan_get+0x70>)
    5b72:	9300      	str	r3, [sp, #0]
    5b74:	480c      	ldr	r0, [pc, #48]	; (5ba8 <att_chan_get+0x88>)
    5b76:	4b08      	ldr	r3, [pc, #32]	; (5b98 <att_chan_get+0x78>)
    5b78:	f7fb fdf6 	bl	1768 <printk>
		return NULL;
    5b7c:	2400      	movs	r4, #0
	}

	return att;
}
    5b7e:	0020      	movs	r0, r4
    5b80:	bd16      	pop	{r1, r2, r4, pc}
    5b82:	46c0      	nop			; (mov r8, r8)
    5b84:	000145b0 	.word	0x000145b0
    5b88:	000145bd 	.word	0x000145bd
    5b8c:	000145fb 	.word	0x000145fb
    5b90:	00014577 	.word	0x00014577
    5b94:	000150be 	.word	0x000150be
    5b98:	00016b45 	.word	0x00016b45
    5b9c:	00014570 	.word	0x00014570
    5ba0:	000145b5 	.word	0x000145b5
    5ba4:	000150dc 	.word	0x000150dc
    5ba8:	00015107 	.word	0x00015107

00005bac <att_rsp_sent>:

	k_sem_give(&att->tx_sem);
}

static void att_rsp_sent(struct bt_conn *conn)
{
    5bac:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5bae:	2104      	movs	r1, #4
    5bb0:	f7ff faa2 	bl	50f8 <bt_l2cap_le_lookup_tx_cid>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5bb4:	2102      	movs	r1, #2
    5bb6:	0004      	movs	r4, r0
    5bb8:	4249      	negs	r1, r1
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    5bba:	3090      	adds	r0, #144	; 0x90
    5bbc:	f00d f87e 	bl	12cbc <atomic_and>
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    5bc0:	0020      	movs	r0, r4
    5bc2:	30c8      	adds	r0, #200	; 0xc8
    5bc4:	f00d ff2a 	bl	13a1c <k_sem_give>
}
    5bc8:	bd10      	pop	{r4, pc}

00005bca <att_cfm_sent>:

	return CONTAINER_OF(chan, struct bt_att, chan);
}

static void att_cfm_sent(struct bt_conn *conn)
{
    5bca:	b510      	push	{r4, lr}

static struct bt_att *att_get(struct bt_conn *conn)
{
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5bcc:	2104      	movs	r1, #4
    5bce:	f7ff fa93 	bl	50f8 <bt_l2cap_le_lookup_tx_cid>
    5bd2:	2103      	movs	r1, #3
    5bd4:	0004      	movs	r4, r0
    5bd6:	4249      	negs	r1, r1
	struct bt_att *att = att_get(conn);

	BT_DBG("conn %p att %p", conn, att);

#if defined(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    5bd8:	3090      	adds	r0, #144	; 0x90
    5bda:	f00d f86f 	bl	12cbc <atomic_and>
#endif /* CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW */

	k_sem_give(&att->tx_sem);
    5bde:	0020      	movs	r0, r4
    5be0:	30c8      	adds	r0, #200	; 0xc8
    5be2:	f00d ff1b 	bl	13a1c <k_sem_give>
}
    5be6:	bd10      	pop	{r4, pc}

00005be8 <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5bea:	680f      	ldr	r7, [r1, #0]
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5bec:	000c      	movs	r4, r1
    5bee:	0006      	movs	r6, r0
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    5bf0:	0001      	movs	r1, r0
    5bf2:	222a      	movs	r2, #42	; 0x2a
    5bf4:	0038      	movs	r0, r7
    5bf6:	f7ff fcd7 	bl	55a8 <check_perm>
    5bfa:	1e05      	subs	r5, r0, #0
    5bfc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5bfe:	d11b      	bne.n	5c38 <write_cb+0x50>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	write = attr->write(data->conn, attr, data->value, data->len,
    5c00:	8a62      	ldrh	r2, [r4, #18]
    5c02:	9001      	str	r0, [sp, #4]
    5c04:	9200      	str	r2, [sp, #0]
    5c06:	68b2      	ldr	r2, [r6, #8]
    5c08:	0031      	movs	r1, r6
    5c0a:	4694      	mov	ip, r2
    5c0c:	7c23      	ldrb	r3, [r4, #16]
    5c0e:	68e2      	ldr	r2, [r4, #12]
    5c10:	0038      	movs	r0, r7
    5c12:	4666      	mov	r6, ip
    5c14:	47b0      	blx	r6
			    data->offset, 0);
	if (write < 0 || write != data->len) {
    5c16:	2800      	cmp	r0, #0
    5c18:	db02      	blt.n	5c20 <write_cb+0x38>
    5c1a:	7c23      	ldrb	r3, [r4, #16]
    5c1c:	4298      	cmp	r0, r3
    5c1e:	d008      	beq.n	5c32 <write_cb+0x4a>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5c20:	0003      	movs	r3, r0
    5c22:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    5c24:	220e      	movs	r2, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5c26:	2bfe      	cmp	r3, #254	; 0xfe
    5c28:	d801      	bhi.n	5c2e <write_cb+0x46>
		return -err;
    5c2a:	4240      	negs	r0, r0
    5c2c:	b2c2      	uxtb	r2, r0

	/* Read attribute value and store in the buffer */
	write = attr->write(data->conn, attr, data->value, data->len,
			    data->offset, 0);
	if (write < 0 || write != data->len) {
		data->err = err_to_att(write);
    5c2e:	7522      	strb	r2, [r4, #20]
		return BT_GATT_ITER_STOP;
    5c30:	e003      	b.n	5c3a <write_cb+0x52>
	}

	data->err = 0;
    5c32:	7525      	strb	r5, [r4, #20]

	return BT_GATT_ITER_CONTINUE;
    5c34:	2501      	movs	r5, #1
    5c36:	e000      	b.n	5c3a <write_cb+0x52>
	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    5c38:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    5c3a:	0028      	movs	r0, r5
    5c3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005c3e <read_cb>:
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
    5c40:	680f      	ldr	r7, [r1, #0]
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5c42:	0006      	movs	r6, r0
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5c44:	6888      	ldr	r0, [r1, #8]

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    5c46:	683b      	ldr	r3, [r7, #0]
	struct bt_att_read_rsp *rsp;
	u8_t err;
};

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5c48:	b085      	sub	sp, #20
    5c4a:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5c4c:	3008      	adds	r0, #8
    5c4e:	2100      	movs	r1, #0

static u8_t read_cb(const struct bt_gatt_attr *attr, void *user_data)
{
	struct read_data *data = user_data;
	struct bt_att *att = data->att;
	struct bt_conn *conn = att->chan.chan.conn;
    5c50:	9303      	str	r3, [sp, #12]
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5c52:	f00c fd57 	bl	12704 <net_buf_simple_add>

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: invalid handle error to no error.
	 */
	data->err = 0x00;
    5c56:	2300      	movs	r3, #0
	struct bt_conn *conn = att->chan.chan.conn;
	int read;

	BT_DBG("handle 0x%04x", attr->handle);

	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    5c58:	60e0      	str	r0, [r4, #12]

	/*
	 * If any attribute is founded in handle range it means that error
	 * should be changed from pre-set: invalid handle error to no error.
	 */
	data->err = 0x00;
    5c5a:	7423      	strb	r3, [r4, #16]

	/* Check attribute permissions */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5c5c:	2215      	movs	r2, #21
    5c5e:	0031      	movs	r1, r6
    5c60:	9803      	ldr	r0, [sp, #12]
    5c62:	f7ff fca1 	bl	55a8 <check_perm>
    5c66:	1e05      	subs	r5, r0, #0
    5c68:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    5c6a:	d11e      	bne.n	5caa <read_cb+0x6c>
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5c6c:	68a1      	ldr	r1, [r4, #8]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    5c6e:	3756      	adds	r7, #86	; 0x56
	if (data->err) {
		return BT_GATT_ITER_STOP;
	}

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    5c70:	898a      	ldrh	r2, [r1, #12]
    5c72:	883b      	ldrh	r3, [r7, #0]
    5c74:	6889      	ldr	r1, [r1, #8]
    5c76:	1a9b      	subs	r3, r3, r2
    5c78:	188a      	adds	r2, r1, r2
    5c7a:	88a1      	ldrh	r1, [r4, #4]
    5c7c:	b29b      	uxth	r3, r3
    5c7e:	9100      	str	r1, [sp, #0]
    5c80:	6877      	ldr	r7, [r6, #4]
    5c82:	0031      	movs	r1, r6
    5c84:	9803      	ldr	r0, [sp, #12]
    5c86:	47b8      	blx	r7
    5c88:	1e01      	subs	r1, r0, #0
			  att->chan.tx.mtu - data->buf->len, data->offset);
	if (read < 0) {
    5c8a:	da08      	bge.n	5c9e <read_cb+0x60>

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5c8c:	000b      	movs	r3, r1
    5c8e:	33ff      	adds	r3, #255	; 0xff
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    5c90:	200e      	movs	r0, #14

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    5c92:	2bfe      	cmp	r3, #254	; 0xfe
    5c94:	d801      	bhi.n	5c9a <read_cb+0x5c>
		return -err;
    5c96:	4249      	negs	r1, r1
    5c98:	b2c8      	uxtb	r0, r1

	/* Read attribute value and store in the buffer */
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
			  att->chan.tx.mtu - data->buf->len, data->offset);
	if (read < 0) {
		data->err = err_to_att(read);
    5c9a:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    5c9c:	e006      	b.n	5cac <read_cb+0x6e>
	}

	net_buf_add(data->buf, read);
    5c9e:	68a0      	ldr	r0, [r4, #8]

	return BT_GATT_ITER_CONTINUE;
    5ca0:	2501      	movs	r5, #1
	if (read < 0) {
		data->err = err_to_att(read);
		return BT_GATT_ITER_STOP;
	}

	net_buf_add(data->buf, read);
    5ca2:	3008      	adds	r0, #8
    5ca4:	f00c fd2e 	bl	12704 <net_buf_simple_add>

	return BT_GATT_ITER_CONTINUE;
    5ca8:	e000      	b.n	5cac <read_cb+0x6e>
	data->err = 0x00;

	/* Check attribute permissions */
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
	if (data->err) {
		return BT_GATT_ITER_STOP;
    5caa:	2500      	movs	r5, #0
	}

	net_buf_add(data->buf, read);

	return BT_GATT_ITER_CONTINUE;
}
    5cac:	0028      	movs	r0, r5
    5cae:	b005      	add	sp, #20
    5cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00005cb4 <bt_att_create_pdu>:

	return att;
}

struct net_buf *bt_att_create_pdu(struct bt_conn *conn, u8_t op, size_t len)
{
    5cb4:	b530      	push	{r4, r5, lr}
    5cb6:	b085      	sub	sp, #20
    5cb8:	000d      	movs	r5, r1
    5cba:	0014      	movs	r4, r2
	struct bt_att_hdr *hdr;
	struct net_buf *buf;
	struct bt_att *att;

	att = att_chan_get(conn);
    5cbc:	f7ff ff30 	bl	5b20 <att_chan_get>
    5cc0:	1e03      	subs	r3, r0, #0
	if (!att) {
    5cc2:	d01d      	beq.n	5d00 <bt_att_create_pdu+0x4c>
		return NULL;
	}

	if (len + sizeof(op) > att->chan.tx.mtu) {
    5cc4:	3356      	adds	r3, #86	; 0x56
    5cc6:	881b      	ldrh	r3, [r3, #0]
    5cc8:	1c62      	adds	r2, r4, #1
    5cca:	429a      	cmp	r2, r3
    5ccc:	d90d      	bls.n	5cea <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    5cce:	490d      	ldr	r1, [pc, #52]	; (5d04 <bt_att_create_pdu+0x50>)
    5cd0:	9301      	str	r3, [sp, #4]
    5cd2:	4b0d      	ldr	r3, [pc, #52]	; (5d08 <bt_att_create_pdu+0x54>)
    5cd4:	9103      	str	r1, [sp, #12]
    5cd6:	9202      	str	r2, [sp, #8]
    5cd8:	9300      	str	r3, [sp, #0]
    5cda:	4a0c      	ldr	r2, [pc, #48]	; (5d0c <bt_att_create_pdu+0x58>)
    5cdc:	4b0c      	ldr	r3, [pc, #48]	; (5d10 <bt_att_create_pdu+0x5c>)
    5cde:	490d      	ldr	r1, [pc, #52]	; (5d14 <bt_att_create_pdu+0x60>)
    5ce0:	480d      	ldr	r0, [pc, #52]	; (5d18 <bt_att_create_pdu+0x64>)
    5ce2:	f7fb fd41 	bl	1768 <printk>
			att->chan.tx.mtu, len + sizeof(op));
		return NULL;
    5ce6:	2000      	movs	r0, #0
    5ce8:	e00a      	b.n	5d00 <bt_att_create_pdu+0x4c>
	}

	buf = bt_l2cap_create_pdu(NULL, 0);
    5cea:	2100      	movs	r1, #0
    5cec:	0008      	movs	r0, r1
    5cee:	f7ff f956 	bl	4f9e <bt_l2cap_create_pdu>

	hdr = net_buf_add(buf, sizeof(*hdr));
    5cf2:	2101      	movs	r1, #1
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
			att->chan.tx.mtu, len + sizeof(op));
		return NULL;
	}

	buf = bt_l2cap_create_pdu(NULL, 0);
    5cf4:	0004      	movs	r4, r0

	hdr = net_buf_add(buf, sizeof(*hdr));
    5cf6:	3008      	adds	r0, #8
    5cf8:	f00c fd04 	bl	12704 <net_buf_simple_add>
	hdr->code = op;
    5cfc:	7005      	strb	r5, [r0, #0]

	return buf;
    5cfe:	0020      	movs	r0, r4
}
    5d00:	b005      	add	sp, #20
    5d02:	bd30      	pop	{r4, r5, pc}
    5d04:	000145b0 	.word	0x000145b0
    5d08:	000145fb 	.word	0x000145fb
    5d0c:	000145bd 	.word	0x000145bd
    5d10:	00016b52 	.word	0x00016b52
    5d14:	00014577 	.word	0x00014577
    5d18:	0001513b 	.word	0x0001513b

00005d1c <att_indicate>:

	return 0;
}

static u8_t att_indicate(struct bt_att *att, struct net_buf *buf)
{
    5d1c:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    5d1e:	3108      	adds	r1, #8
	return 0;
}

static u8_t att_indicate(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5d20:	6804      	ldr	r4, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    5d22:	0008      	movs	r0, r1
    5d24:	f00c fd1f 	bl	12766 <net_buf_simple_pull_le16>

	BT_DBG("handle 0x%04x", handle);

	bt_gatt_notification(conn, handle, buf->data, buf->len);

	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    5d28:	2200      	movs	r2, #0
    5d2a:	211e      	movs	r1, #30
    5d2c:	0020      	movs	r0, r4
    5d2e:	f7ff ffc1 	bl	5cb4 <bt_att_create_pdu>
    5d32:	1e02      	subs	r2, r0, #0
	if (!buf) {
    5d34:	d004      	beq.n	5d40 <att_indicate+0x24>
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    5d36:	4b03      	ldr	r3, [pc, #12]	; (5d44 <att_indicate+0x28>)
    5d38:	2104      	movs	r1, #4
    5d3a:	0020      	movs	r0, r4
    5d3c:	f7ff f934 	bl	4fa8 <bt_l2cap_send_cb>

	return 0;
}
    5d40:	2000      	movs	r0, #0
    5d42:	bd10      	pop	{r4, pc}
    5d44:	00005bcb 	.word	0x00005bcb

00005d48 <att_mtu_req>:

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
    5d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    5d4a:	688b      	ldr	r3, [r1, #8]

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
    5d4c:	0004      	movs	r4, r0
	struct net_buf *pdu;
	u16_t mtu_client, mtu_server;

	req = (void *)buf->data;

	mtu_client = sys_le16_to_cpu(req->mtu);
    5d4e:	785d      	ldrb	r5, [r3, #1]
    5d50:	781a      	ldrb	r2, [r3, #0]
    5d52:	022d      	lsls	r5, r5, #8
    5d54:	4315      	orrs	r5, r2

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
    5d56:	2004      	movs	r0, #4
	mtu_client = sys_le16_to_cpu(req->mtu);

	BT_DBG("Client MTU %u", mtu_client);

	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5d58:	2d16      	cmp	r5, #22
    5d5a:	d920      	bls.n	5d9e <att_mtu_req+0x56>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
}

static u8_t att_mtu_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5d5c:	6827      	ldr	r7, [r4, #0]
	/* Check if MTU is valid */
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    5d5e:	2202      	movs	r2, #2
    5d60:	2103      	movs	r1, #3
    5d62:	0038      	movs	r0, r7
    5d64:	f7ff ffa6 	bl	5cb4 <bt_att_create_pdu>
    5d68:	0006      	movs	r6, r0
	if (!pdu) {
		return BT_ATT_ERR_UNLIKELY;
    5d6a:	200e      	movs	r0, #14
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
	if (!pdu) {
    5d6c:	2e00      	cmp	r6, #0
    5d6e:	d016      	beq.n	5d9e <att_mtu_req+0x56>

	mtu_server = BT_ATT_MTU;

	BT_DBG("Server MTU %u", mtu_server);

	rsp = net_buf_add(pdu, sizeof(*rsp));
    5d70:	0030      	movs	r0, r6
    5d72:	2102      	movs	r1, #2
    5d74:	3008      	adds	r0, #8
    5d76:	f00c fcc5 	bl	12704 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    5d7a:	2341      	movs	r3, #65	; 0x41
    5d7c:	7003      	strb	r3, [r0, #0]
    5d7e:	2300      	movs	r3, #0

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5d80:	0032      	movs	r2, r6
	mtu_server = BT_ATT_MTU;

	BT_DBG("Server MTU %u", mtu_server);

	rsp = net_buf_add(pdu, sizeof(*rsp));
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    5d82:	7043      	strb	r3, [r0, #1]

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    5d84:	2104      	movs	r1, #4
    5d86:	4b06      	ldr	r3, [pc, #24]	; (5da0 <att_mtu_req+0x58>)
    5d88:	0038      	movs	r0, r7
    5d8a:	f7ff f90d 	bl	4fa8 <bt_l2cap_send_cb>
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    5d8e:	1c2b      	adds	r3, r5, #0
    5d90:	2d41      	cmp	r5, #65	; 0x41
    5d92:	d900      	bls.n	5d96 <att_mtu_req+0x4e>
    5d94:	2341      	movs	r3, #65	; 0x41
	att->chan.tx.mtu = att->chan.rx.mtu;

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
    5d96:	2000      	movs	r0, #0
	/* BLUETOOTH SPECIFICATION Version 4.2 [Vol 3, Part F] page 484:
	 *
	 * A device's Exchange MTU Request shall contain the same MTU as the
	 * device's Exchange MTU Response (i.e. the MTU shall be symmetric).
	 */
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    5d98:	8763      	strh	r3, [r4, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    5d9a:	3456      	adds	r4, #86	; 0x56
    5d9c:	8023      	strh	r3, [r4, #0]

	BT_DBG("Negotiated MTU %u", att->chan.rx.mtu);
	return 0;
}
    5d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5da0:	00005bad 	.word	0x00005bad

00005da4 <send_err_rsp.part.8>:
	default:
		return att_pdu_sent;
	}
}

static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5da6:	000f      	movs	r7, r1
    5da8:	0014      	movs	r4, r2
	/* Ignore opcode 0x00 */
	if (!req) {
		return;
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5daa:	2101      	movs	r1, #1
    5dac:	2204      	movs	r2, #4
	default:
		return att_pdu_sent;
	}
}

static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    5dae:	0006      	movs	r6, r0
    5db0:	9301      	str	r3, [sp, #4]
	/* Ignore opcode 0x00 */
	if (!req) {
		return;
	}

	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5db2:	f7ff ff7f 	bl	5cb4 <bt_att_create_pdu>
    5db6:	1e05      	subs	r5, r0, #0
	if (!buf) {
    5db8:	d010      	beq.n	5ddc <send_err_rsp.part.8+0x38>
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
    5dba:	2104      	movs	r1, #4
    5dbc:	3008      	adds	r0, #8
    5dbe:	f00c fca1 	bl	12704 <net_buf_simple_add>
	rsp->request = req;
	rsp->handle = sys_cpu_to_le16(handle);
	rsp->error = err;
    5dc2:	466b      	mov	r3, sp
    5dc4:	791b      	ldrb	r3, [r3, #4]
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
	rsp->request = req;
	rsp->handle = sys_cpu_to_le16(handle);
    5dc6:	7044      	strb	r4, [r0, #1]
    5dc8:	0a24      	lsrs	r4, r4, #8
	rsp->error = err;
    5dca:	70c3      	strb	r3, [r0, #3]
	if (!buf) {
		return;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
	rsp->request = req;
    5dcc:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    5dce:	7084      	strb	r4, [r0, #2]
	rsp->error = err;

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5dd0:	4b03      	ldr	r3, [pc, #12]	; (5de0 <send_err_rsp.part.8+0x3c>)
    5dd2:	002a      	movs	r2, r5
    5dd4:	2104      	movs	r1, #4
    5dd6:	0030      	movs	r0, r6
    5dd8:	f7ff f8e6 	bl	4fa8 <bt_l2cap_send_cb>
}
    5ddc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5dde:	46c0      	nop			; (mov r8, r8)
    5de0:	00005bad 	.word	0x00005bad

00005de4 <bt_att_recv>:

	return ATT_UNKNOWN;
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    5de4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
	const struct att_handler *handler;
	u8_t err;
	size_t i;

	if (buf->len < sizeof(*hdr)) {
    5de6:	898b      	ldrh	r3, [r1, #12]

	return ATT_UNKNOWN;
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    5de8:	b087      	sub	sp, #28
    5dea:	0005      	movs	r5, r0
    5dec:	000e      	movs	r6, r1
	struct bt_att_hdr *hdr = (void *)buf->data;
	const struct att_handler *handler;
	u8_t err;
	size_t i;

	if (buf->len < sizeof(*hdr)) {
    5dee:	2b00      	cmp	r3, #0
    5df0:	d108      	bne.n	5e04 <bt_att_recv+0x20>
		BT_ERR("Too small ATT PDU received");
    5df2:	4b44      	ldr	r3, [pc, #272]	; (5f04 <bt_att_recv+0x120>)
    5df4:	4a44      	ldr	r2, [pc, #272]	; (5f08 <bt_att_recv+0x124>)
    5df6:	9301      	str	r3, [sp, #4]
    5df8:	4b44      	ldr	r3, [pc, #272]	; (5f0c <bt_att_recv+0x128>)
    5dfa:	4945      	ldr	r1, [pc, #276]	; (5f10 <bt_att_recv+0x12c>)
    5dfc:	9300      	str	r3, [sp, #0]
    5dfe:	4845      	ldr	r0, [pc, #276]	; (5f14 <bt_att_recv+0x130>)
    5e00:	4b45      	ldr	r3, [pc, #276]	; (5f18 <bt_att_recv+0x134>)
    5e02:	e038      	b.n	5e76 <bt_att_recv+0x92>
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    5e04:	0030      	movs	r0, r6
}

static void bt_att_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_att *att = ATT_CHAN(chan);
	struct bt_att_hdr *hdr = (void *)buf->data;
    5e06:	688f      	ldr	r7, [r1, #8]
		return;
	}

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    5e08:	3008      	adds	r0, #8
    5e0a:	2101      	movs	r1, #1
    5e0c:	f00c fc9b 	bl	12746 <net_buf_simple_pull>

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5e10:	2200      	movs	r2, #0
		if (hdr->code == handlers[i].op) {
    5e12:	7839      	ldrb	r1, [r7, #0]
    5e14:	4b41      	ldr	r3, [pc, #260]	; (5f1c <bt_att_recv+0x138>)
    5e16:	00d0      	lsls	r0, r2, #3
    5e18:	9005      	str	r0, [sp, #20]
    5e1a:	5cc0      	ldrb	r0, [r0, r3]
    5e1c:	4288      	cmp	r0, r1
    5e1e:	d105      	bne.n	5e2c <bt_att_recv+0x48>
		}
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
    5e20:	9a05      	ldr	r2, [sp, #20]
    5e22:	189b      	adds	r3, r3, r2
    5e24:	789c      	ldrb	r4, [r3, #2]
    5e26:	2c01      	cmp	r4, #1
    5e28:	d114      	bne.n	5e54 <bt_att_recv+0x70>
    5e2a:	e003      	b.n	5e34 <bt_att_recv+0x50>

	BT_DBG("Received ATT code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5e2c:	3201      	adds	r2, #1
    5e2e:	2a1b      	cmp	r2, #27
    5e30:	d1f1      	bne.n	5e16 <bt_att_recv+0x32>
    5e32:	e04d      	b.n	5ed0 <bt_att_recv+0xec>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    5e34:	0028      	movs	r0, r5
    5e36:	0021      	movs	r1, r4
    5e38:	3090      	adds	r0, #144	; 0x90
    5e3a:	f00c ff34 	bl	12ca6 <atomic_or>
		}
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_ATT_ENFORCE_FLOW)) {
		if (handler->type == ATT_REQUEST &&
    5e3e:	4220      	tst	r0, r4
    5e40:	d01c      	beq.n	5e7c <bt_att_recv+0x98>
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
			BT_WARN("Ignoring unexpected request");
    5e42:	4b30      	ldr	r3, [pc, #192]	; (5f04 <bt_att_recv+0x120>)
    5e44:	4a36      	ldr	r2, [pc, #216]	; (5f20 <bt_att_recv+0x13c>)
    5e46:	9301      	str	r3, [sp, #4]
    5e48:	4b36      	ldr	r3, [pc, #216]	; (5f24 <bt_att_recv+0x140>)
    5e4a:	4931      	ldr	r1, [pc, #196]	; (5f10 <bt_att_recv+0x12c>)
    5e4c:	9300      	str	r3, [sp, #0]
    5e4e:	4836      	ldr	r0, [pc, #216]	; (5f28 <bt_att_recv+0x144>)
    5e50:	4b31      	ldr	r3, [pc, #196]	; (5f18 <bt_att_recv+0x134>)
    5e52:	e010      	b.n	5e76 <bt_att_recv+0x92>
			return;
		} else if (handler->type == ATT_INDICATION &&
    5e54:	2c05      	cmp	r4, #5
    5e56:	d111      	bne.n	5e7c <bt_att_recv+0x98>
    5e58:	0028      	movs	r0, r5
    5e5a:	2102      	movs	r1, #2
    5e5c:	3090      	adds	r0, #144	; 0x90
    5e5e:	f00c ff22 	bl	12ca6 <atomic_or>
    5e62:	0783      	lsls	r3, r0, #30
    5e64:	d50a      	bpl.n	5e7c <bt_att_recv+0x98>
			   atomic_test_and_set_bit(att->flags,
						   ATT_PENDING_CFM)) {
			BT_WARN("Ignoring unexpected indication");
    5e66:	4b27      	ldr	r3, [pc, #156]	; (5f04 <bt_att_recv+0x120>)
    5e68:	4a2d      	ldr	r2, [pc, #180]	; (5f20 <bt_att_recv+0x13c>)
    5e6a:	9301      	str	r3, [sp, #4]
    5e6c:	4b2d      	ldr	r3, [pc, #180]	; (5f24 <bt_att_recv+0x140>)
    5e6e:	4928      	ldr	r1, [pc, #160]	; (5f10 <bt_att_recv+0x12c>)
    5e70:	9300      	str	r3, [sp, #0]
    5e72:	482e      	ldr	r0, [pc, #184]	; (5f2c <bt_att_recv+0x148>)
    5e74:	4b28      	ldr	r3, [pc, #160]	; (5f18 <bt_att_recv+0x134>)
    5e76:	f7fb fc77 	bl	1768 <printk>
			return;
    5e7a:	e040      	b.n	5efe <bt_att_recv+0x11a>
		}
	}

	if (buf->len < handler->expect_len) {
    5e7c:	4927      	ldr	r1, [pc, #156]	; (5f1c <bt_att_recv+0x138>)
    5e7e:	9b05      	ldr	r3, [sp, #20]
    5e80:	468c      	mov	ip, r1
    5e82:	4463      	add	r3, ip
    5e84:	89b2      	ldrh	r2, [r6, #12]
    5e86:	7859      	ldrb	r1, [r3, #1]
    5e88:	4291      	cmp	r1, r2
    5e8a:	d910      	bls.n	5eae <bt_att_recv+0xca>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    5e8c:	4b1d      	ldr	r3, [pc, #116]	; (5f04 <bt_att_recv+0x120>)
    5e8e:	4920      	ldr	r1, [pc, #128]	; (5f10 <bt_att_recv+0x12c>)
    5e90:	9303      	str	r3, [sp, #12]
    5e92:	783b      	ldrb	r3, [r7, #0]
    5e94:	4826      	ldr	r0, [pc, #152]	; (5f30 <bt_att_recv+0x14c>)
    5e96:	9302      	str	r3, [sp, #8]
    5e98:	4b1c      	ldr	r3, [pc, #112]	; (5f0c <bt_att_recv+0x128>)
    5e9a:	9201      	str	r2, [sp, #4]
    5e9c:	9300      	str	r3, [sp, #0]
    5e9e:	4a1a      	ldr	r2, [pc, #104]	; (5f08 <bt_att_recv+0x124>)
    5ea0:	4b1d      	ldr	r3, [pc, #116]	; (5f18 <bt_att_recv+0x134>)
    5ea2:	f7fb fc61 	bl	1768 <printk>
		err = BT_ATT_ERR_INVALID_PDU;
	} else {
		err = handler->func(att, buf);
	}

	if (handler->type == ATT_REQUEST && err) {
    5ea6:	2c01      	cmp	r4, #1
    5ea8:	d129      	bne.n	5efe <bt_att_recv+0x11a>
		}
	}

	if (buf->len < handler->expect_len) {
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
		err = BT_ATT_ERR_INVALID_PDU;
    5eaa:	2304      	movs	r3, #4
    5eac:	e008      	b.n	5ec0 <bt_att_recv+0xdc>
	} else {
		err = handler->func(att, buf);
    5eae:	685b      	ldr	r3, [r3, #4]
    5eb0:	0031      	movs	r1, r6
    5eb2:	0028      	movs	r0, r5
    5eb4:	4798      	blx	r3
    5eb6:	0003      	movs	r3, r0
	}

	if (handler->type == ATT_REQUEST && err) {
    5eb8:	2c01      	cmp	r4, #1
    5eba:	d120      	bne.n	5efe <bt_att_recv+0x11a>
    5ebc:	2800      	cmp	r0, #0
    5ebe:	d01e      	beq.n	5efe <bt_att_recv+0x11a>
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
    5ec0:	7839      	ldrb	r1, [r7, #0]
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    5ec2:	2900      	cmp	r1, #0
    5ec4:	d01b      	beq.n	5efe <bt_att_recv+0x11a>
    5ec6:	2200      	movs	r2, #0
    5ec8:	6828      	ldr	r0, [r5, #0]
    5eca:	f7ff ff6b 	bl	5da4 <send_err_rsp.part.8>
    5ece:	e016      	b.n	5efe <bt_att_recv+0x11a>
			break;
		}
	}

	if (!handler) {
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    5ed0:	4b0c      	ldr	r3, [pc, #48]	; (5f04 <bt_att_recv+0x120>)
    5ed2:	9101      	str	r1, [sp, #4]
    5ed4:	9302      	str	r3, [sp, #8]
    5ed6:	4b13      	ldr	r3, [pc, #76]	; (5f24 <bt_att_recv+0x140>)
    5ed8:	4a11      	ldr	r2, [pc, #68]	; (5f20 <bt_att_recv+0x13c>)
    5eda:	9300      	str	r3, [sp, #0]
    5edc:	490c      	ldr	r1, [pc, #48]	; (5f10 <bt_att_recv+0x12c>)
    5ede:	4b0e      	ldr	r3, [pc, #56]	; (5f18 <bt_att_recv+0x134>)
    5ee0:	4814      	ldr	r0, [pc, #80]	; (5f34 <bt_att_recv+0x150>)
    5ee2:	f7fb fc41 	bl	1768 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    5ee6:	783c      	ldrb	r4, [r7, #0]
    5ee8:	0020      	movs	r0, r4
    5eea:	f7ff f9b7 	bl	525c <att_op_get_type>
    5eee:	2800      	cmp	r0, #0
    5ef0:	d005      	beq.n	5efe <bt_att_recv+0x11a>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    5ef2:	2c00      	cmp	r4, #0
    5ef4:	d003      	beq.n	5efe <bt_att_recv+0x11a>
    5ef6:	2306      	movs	r3, #6
    5ef8:	2200      	movs	r2, #0
    5efa:	0021      	movs	r1, r4
    5efc:	e7e4      	b.n	5ec8 <bt_att_recv+0xe4>

	if (handler->type == ATT_REQUEST && err) {
		BT_DBG("ATT error 0x%02x", err);
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}
    5efe:	b007      	add	sp, #28
    5f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f02:	46c0      	nop			; (mov r8, r8)
    5f04:	000145b0 	.word	0x000145b0
    5f08:	00014570 	.word	0x00014570
    5f0c:	000145b5 	.word	0x000145b5
    5f10:	00014577 	.word	0x00014577
    5f14:	00015170 	.word	0x00015170
    5f18:	0001699b 	.word	0x0001699b
    5f1c:	000169c4 	.word	0x000169c4
    5f20:	000145bd 	.word	0x000145bd
    5f24:	000145fb 	.word	0x000145fb
    5f28:	0001519b 	.word	0x0001519b
    5f2c:	000151c7 	.word	0x000151c7
    5f30:	000151f6 	.word	0x000151f6
    5f34:	00015225 	.word	0x00015225

00005f38 <att_read_group_req>:

	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
    5f38:	b5f0      	push	{r4, r5, r6, r7, lr}
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5f3a:	898b      	ldrh	r3, [r1, #12]

	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
    5f3c:	b08f      	sub	sp, #60	; 0x3c
    5f3e:	0007      	movs	r7, r0
    5f40:	000e      	movs	r6, r1
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5f42:	2b06      	cmp	r3, #6
    5f44:	d002      	beq.n	5f4c <att_read_group_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    5f46:	2504      	movs	r5, #4
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5f48:	2b14      	cmp	r3, #20
    5f4a:	d179      	bne.n	6040 <att_read_group_req+0x108>

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5f4c:	0030      	movs	r0, r6
	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5f4e:	683b      	ldr	r3, [r7, #0]

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5f50:	2104      	movs	r1, #4
	return 0;
}

static u8_t att_read_group_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5f52:	9301      	str	r3, [sp, #4]
	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    5f54:	68b3      	ldr	r3, [r6, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    5f56:	3008      	adds	r0, #8
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    5f58:	785c      	ldrb	r4, [r3, #1]
    5f5a:	781a      	ldrb	r2, [r3, #0]
    5f5c:	0224      	lsls	r4, r4, #8
    5f5e:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    5f60:	789a      	ldrb	r2, [r3, #2]
    5f62:	78db      	ldrb	r3, [r3, #3]
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
		return BT_ATT_ERR_UNLIKELY;
    5f64:	250e      	movs	r5, #14
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    5f66:	021b      	lsls	r3, r3, #8
    5f68:	4313      	orrs	r3, r2
    5f6a:	9300      	str	r3, [sp, #0]
	net_buf_pull(buf, sizeof(*req));
    5f6c:	f00c fbeb 	bl	12746 <net_buf_simple_pull>

	if (!uuid_create(&u.uuid, buf)) {
    5f70:	0031      	movs	r1, r6
    5f72:	a804      	add	r0, sp, #16
    5f74:	f7ff fbb6 	bl	56e4 <uuid_create>
    5f78:	2800      	cmp	r0, #0
    5f7a:	d061      	beq.n	6040 <att_read_group_req+0x108>
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    5f7c:	2c00      	cmp	r4, #0
    5f7e:	d007      	beq.n	5f90 <att_read_group_req+0x58>
    5f80:	2500      	movs	r5, #0
    5f82:	9b00      	ldr	r3, [sp, #0]
    5f84:	42ab      	cmp	r3, r5
    5f86:	d002      	beq.n	5f8e <att_read_group_req+0x56>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    5f88:	429c      	cmp	r4, r3
    5f8a:	d801      	bhi.n	5f90 <att_read_group_req+0x58>
    5f8c:	e008      	b.n	5fa0 <att_read_group_req+0x68>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    5f8e:	9c00      	ldr	r4, [sp, #0]
    5f90:	2301      	movs	r3, #1
    5f92:	0022      	movs	r2, r4
    5f94:	2110      	movs	r1, #16
    5f96:	9801      	ldr	r0, [sp, #4]
    5f98:	f7ff ff04 	bl	5da4 <send_err_rsp.part.8>
	       start_handle, end_handle, bt_uuid_str(&u.uuid));

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    5f9c:	2500      	movs	r5, #0
    5f9e:	e04f      	b.n	6040 <att_read_group_req+0x108>
	 * Read By Group Type Request. The "Primary Service" and "Secondary
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5fa0:	ab02      	add	r3, sp, #8
    5fa2:	701d      	strb	r5, [r3, #0]
    5fa4:	23a0      	movs	r3, #160	; 0xa0
    5fa6:	aa02      	add	r2, sp, #8
    5fa8:	019b      	lsls	r3, r3, #6
    5faa:	0011      	movs	r1, r2
    5fac:	a804      	add	r0, sp, #16
    5fae:	8053      	strh	r3, [r2, #2]
    5fb0:	f7fc f8d8 	bl	2164 <bt_uuid_cmp>
    5fb4:	2800      	cmp	r0, #0
    5fb6:	d00d      	beq.n	5fd4 <att_read_group_req+0x9c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    5fb8:	4b23      	ldr	r3, [pc, #140]	; (6048 <att_read_group_req+0x110>)
    5fba:	a903      	add	r1, sp, #12
    5fbc:	a804      	add	r0, sp, #16
    5fbe:	700d      	strb	r5, [r1, #0]
    5fc0:	804b      	strh	r3, [r1, #2]
    5fc2:	f7fc f8cf 	bl	2164 <bt_uuid_cmp>
	 * Read By Group Type Request. The "Primary Service" and "Secondary
	 * Service" grouping types may be used in the Read By Group Type
	 * Request. The "Characteristic" grouping type shall not be used in
	 * the ATT Read By Group Type Request.
	 */
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5fc6:	2800      	cmp	r0, #0
    5fc8:	d004      	beq.n	5fd4 <att_read_group_req+0x9c>
    5fca:	2310      	movs	r3, #16
    5fcc:	0022      	movs	r2, r4
    5fce:	0019      	movs	r1, r3
    5fd0:	9801      	ldr	r0, [sp, #4]
    5fd2:	e02b      	b.n	602c <att_read_group_req+0xf4>
}

static u8_t att_read_group_rsp(struct bt_att *att, struct bt_uuid *uuid,
			       u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    5fd4:	683e      	ldr	r6, [r7, #0]
	struct read_group_data data;

	memset(&data, 0, sizeof(data));
    5fd6:	2214      	movs	r2, #20
    5fd8:	2100      	movs	r1, #0
    5fda:	a809      	add	r0, sp, #36	; 0x24
    5fdc:	f7fb f9ec 	bl	13b8 <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5fe0:	2201      	movs	r2, #1
    5fe2:	2111      	movs	r1, #17
    5fe4:	0030      	movs	r0, r6
    5fe6:	f7ff fe65 	bl	5cb4 <bt_att_create_pdu>
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    5fea:	250e      	movs	r5, #14
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_group_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5fec:	900b      	str	r0, [sp, #44]	; 0x2c
				     sizeof(*data.rsp));
	if (!data.buf) {
    5fee:	2800      	cmp	r0, #0
    5ff0:	d026      	beq.n	6040 <att_read_group_req+0x108>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
    5ff2:	ab04      	add	r3, sp, #16
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ff4:	2101      	movs	r1, #1
    5ff6:	3008      	adds	r0, #8
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    5ff8:	9709      	str	r7, [sp, #36]	; 0x24
	data.uuid = uuid;
    5ffa:	930a      	str	r3, [sp, #40]	; 0x28
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
    5ffc:	2700      	movs	r7, #0
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ffe:	f00c fb81 	bl	12704 <net_buf_simple_add>
	data.rsp->len = 0;
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6002:	ab09      	add	r3, sp, #36	; 0x24
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6004:	900c      	str	r0, [sp, #48]	; 0x30
	data.rsp->len = 0;
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6006:	4a11      	ldr	r2, [pc, #68]	; (604c <att_read_group_req+0x114>)
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
    6008:	7007      	strb	r7, [r0, #0]
	data.group = NULL;

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    600a:	9900      	ldr	r1, [sp, #0]
    600c:	0020      	movs	r0, r4

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;
	data.group = NULL;
    600e:	970d      	str	r7, [sp, #52]	; 0x34

	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6010:	f000 fdfe 	bl	6c10 <bt_gatt_foreach_attr>

	if (!data.rsp->len) {
    6014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6016:	781d      	ldrb	r5, [r3, #0]
    6018:	9300      	str	r3, [sp, #0]
    601a:	42bd      	cmp	r5, r7
    601c:	d109      	bne.n	6032 <att_read_group_req+0xfa>
		net_buf_unref(data.buf);
    601e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6020:	f00c fb4e 	bl	126c0 <net_buf_unref>
    6024:	230a      	movs	r3, #10
    6026:	0022      	movs	r2, r4
    6028:	2110      	movs	r1, #16
    602a:	0030      	movs	r0, r6
    602c:	f7ff feba 	bl	5da4 <send_err_rsp.part.8>
    6030:	e006      	b.n	6040 <att_read_group_req+0x108>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6032:	4b07      	ldr	r3, [pc, #28]	; (6050 <att_read_group_req+0x118>)
    6034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6036:	2104      	movs	r1, #4
    6038:	0030      	movs	r0, r6
    603a:	f7fe ffb5 	bl	4fa8 <bt_l2cap_send_cb>

	return 0;
    603e:	003d      	movs	r5, r7
			     BT_ATT_ERR_UNSUPPORTED_GROUP_TYPE);
		return 0;
	}

	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
}
    6040:	0028      	movs	r0, r5
    6042:	b00f      	add	sp, #60	; 0x3c
    6044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6046:	46c0      	nop			; (mov r8, r8)
    6048:	00002801 	.word	0x00002801
    604c:	00005329 	.word	0x00005329
    6050:	00005bad 	.word	0x00005bad

00006054 <att_read_mult_req>:
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    6054:	b5f0      	push	{r4, r5, r6, r7, lr}
    6056:	b087      	sub	sp, #28
	struct bt_conn *conn = att->chan.chan.conn;
    6058:	6805      	ldr	r5, [r0, #0]
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));
    605a:	ac01      	add	r4, sp, #4
    605c:	2214      	movs	r2, #20
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}

static u8_t att_read_mult_req(struct bt_att *att, struct net_buf *buf)
{
    605e:	0006      	movs	r6, r0
    6060:	000f      	movs	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));
    6062:	0020      	movs	r0, r4
    6064:	2100      	movs	r1, #0
    6066:	f7fb f9a7 	bl	13b8 <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    606a:	2200      	movs	r2, #0
    606c:	210f      	movs	r1, #15
    606e:	0028      	movs	r0, r5
    6070:	f7ff fe20 	bl	5cb4 <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    6074:	230e      	movs	r3, #14
	struct read_data data;
	u16_t handle;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    6076:	60a0      	str	r0, [r4, #8]
	if (!data.buf) {
    6078:	2800      	cmp	r0, #0
    607a:	d023      	beq.n	60c4 <att_read_mult_req+0x70>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    607c:	9601      	str	r6, [sp, #4]

	while (buf->len >= sizeof(u16_t)) {
    607e:	89bb      	ldrh	r3, [r7, #12]
    6080:	2b01      	cmp	r3, #1
    6082:	d918      	bls.n	60b6 <att_read_mult_req+0x62>
		handle = net_buf_pull_le16(buf);
    6084:	0038      	movs	r0, r7
    6086:	3008      	adds	r0, #8
    6088:	f00c fb6d 	bl	12766 <net_buf_simple_pull_le16>
		 * permitted on any of the Characteristic Values.
		 *
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    608c:	2301      	movs	r3, #1

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    608e:	4a0f      	ldr	r2, [pc, #60]	; (60cc <att_read_mult_req+0x78>)
		 * permitted on any of the Characteristic Values.
		 *
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    6090:	7423      	strb	r3, [r4, #16]

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6092:	0001      	movs	r1, r0
    6094:	0023      	movs	r3, r4
	}

	data.att = att;

	while (buf->len >= sizeof(u16_t)) {
		handle = net_buf_pull_le16(buf);
    6096:	0006      	movs	r6, r0
		 * If handle is not valid then return invalid handle error.
		 * If handle is found error will be cleared by read_cb.
		 */
		data.err = BT_ATT_ERR_INVALID_HANDLE;

		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6098:	f000 fdba 	bl	6c10 <bt_gatt_foreach_attr>

		/* Stop reading in case of error */
		if (data.err) {
    609c:	7c23      	ldrb	r3, [r4, #16]
    609e:	2b00      	cmp	r3, #0
    60a0:	d0ed      	beq.n	607e <att_read_mult_req+0x2a>
			net_buf_unref(data.buf);
    60a2:	68a0      	ldr	r0, [r4, #8]
    60a4:	f00c fb0c 	bl	126c0 <net_buf_unref>
    60a8:	7c23      	ldrb	r3, [r4, #16]
    60aa:	0032      	movs	r2, r6
    60ac:	210e      	movs	r1, #14
    60ae:	0028      	movs	r0, r5
    60b0:	f7ff fe78 	bl	5da4 <send_err_rsp.part.8>
    60b4:	e005      	b.n	60c2 <att_read_mult_req+0x6e>
				     data.err);
			return 0;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    60b6:	4b06      	ldr	r3, [pc, #24]	; (60d0 <att_read_mult_req+0x7c>)
    60b8:	68a2      	ldr	r2, [r4, #8]
    60ba:	2104      	movs	r1, #4
    60bc:	0028      	movs	r0, r5
    60be:	f7fe ff73 	bl	4fa8 <bt_l2cap_send_cb>

	return 0;
    60c2:	2300      	movs	r3, #0
}
    60c4:	0018      	movs	r0, r3
    60c6:	b007      	add	sp, #28
    60c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60ca:	46c0      	nop			; (mov r8, r8)
    60cc:	00005c3f 	.word	0x00005c3f
    60d0:	00005bad 	.word	0x00005bad

000060d4 <att_read_rsp>:
	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_read_rsp(struct bt_att *att, u8_t op, u8_t rsp, u16_t handle,
			 u16_t offset)
{
    60d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    60d6:	b08b      	sub	sp, #44	; 0x2c
    60d8:	001e      	movs	r6, r3
    60da:	ab10      	add	r3, sp, #64	; 0x40
    60dc:	881b      	ldrh	r3, [r3, #0]
    60de:	9000      	str	r0, [sp, #0]
    60e0:	9101      	str	r1, [sp, #4]
    60e2:	9202      	str	r2, [sp, #8]
    60e4:	9303      	str	r3, [sp, #12]
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    60e6:	2501      	movs	r5, #1
			 u16_t offset)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct read_data data;

	if (!handle) {
    60e8:	2e00      	cmp	r6, #0
    60ea:	d033      	beq.n	6154 <att_read_rsp+0x80>
}

static u8_t att_read_rsp(struct bt_att *att, u8_t op, u8_t rsp, u16_t handle,
			 u16_t offset)
{
	struct bt_conn *conn = att->chan.chan.conn;
    60ec:	6807      	ldr	r7, [r0, #0]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    60ee:	ac05      	add	r4, sp, #20
    60f0:	2214      	movs	r2, #20
    60f2:	2100      	movs	r1, #0
    60f4:	0020      	movs	r0, r4
    60f6:	f7fb f95f 	bl	13b8 <memset>

	data.buf = bt_att_create_pdu(conn, rsp, 0);
    60fa:	2200      	movs	r2, #0
    60fc:	9902      	ldr	r1, [sp, #8]
    60fe:	0038      	movs	r0, r7
    6100:	f7ff fdd8 	bl	5cb4 <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    6104:	350d      	adds	r5, #13
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6106:	60a0      	str	r0, [r4, #8]
	if (!data.buf) {
    6108:	2800      	cmp	r0, #0
    610a:	d023      	beq.n	6154 <att_read_rsp+0x80>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    610c:	9b00      	ldr	r3, [sp, #0]
	data.offset = offset;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    610e:	4a13      	ldr	r2, [pc, #76]	; (615c <att_read_rsp+0x88>)
	data.buf = bt_att_create_pdu(conn, rsp, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    6110:	9305      	str	r3, [sp, #20]
	data.offset = offset;
    6112:	466b      	mov	r3, sp
    6114:	899b      	ldrh	r3, [r3, #12]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6116:	0031      	movs	r1, r6
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.offset = offset;
    6118:	80a3      	strh	r3, [r4, #4]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    611a:	2301      	movs	r3, #1

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    611c:	0030      	movs	r0, r6

	data.att = att;
	data.offset = offset;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    611e:	7423      	strb	r3, [r4, #16]

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6120:	0023      	movs	r3, r4
    6122:	f000 fd75 	bl	6c10 <bt_gatt_foreach_attr>

	/* In case of error discard data and respond with an error */
	if (data.err) {
    6126:	7c25      	ldrb	r5, [r4, #16]
    6128:	2d00      	cmp	r5, #0
    612a:	d00d      	beq.n	6148 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
		/* Respond here since handle is set */
		send_err_rsp(conn, op, handle, data.err);
		return 0;
    612c:	2500      	movs	r5, #0

	bt_gatt_foreach_attr(handle, handle, read_cb, &data);

	/* In case of error discard data and respond with an error */
	if (data.err) {
		net_buf_unref(data.buf);
    612e:	68a0      	ldr	r0, [r4, #8]
    6130:	f00c fac6 	bl	126c0 <net_buf_unref>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    6134:	9b01      	ldr	r3, [sp, #4]
    6136:	42ab      	cmp	r3, r5
    6138:	d00c      	beq.n	6154 <att_read_rsp+0x80>
    613a:	7c23      	ldrb	r3, [r4, #16]
    613c:	0032      	movs	r2, r6
    613e:	9901      	ldr	r1, [sp, #4]
    6140:	0038      	movs	r0, r7
    6142:	f7ff fe2f 	bl	5da4 <send_err_rsp.part.8>
    6146:	e005      	b.n	6154 <att_read_rsp+0x80>
		/* Respond here since handle is set */
		send_err_rsp(conn, op, handle, data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6148:	4b05      	ldr	r3, [pc, #20]	; (6160 <att_read_rsp+0x8c>)
    614a:	68a2      	ldr	r2, [r4, #8]
    614c:	2104      	movs	r1, #4
    614e:	0038      	movs	r0, r7
    6150:	f7fe ff2a 	bl	4fa8 <bt_l2cap_send_cb>

	return 0;
}
    6154:	0028      	movs	r0, r5
    6156:	b00b      	add	sp, #44	; 0x2c
    6158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    615a:	46c0      	nop			; (mov r8, r8)
    615c:	00005c3f 	.word	0x00005c3f
    6160:	00005bad 	.word	0x00005bad

00006164 <att_read_blob_req>:
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
			    handle, 0);
}

static u8_t att_read_blob_req(struct bt_att *att, struct net_buf *buf)
{
    6164:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_read_blob_req *req;
	u16_t handle, offset;

	req = (void *)buf->data;
    6166:	688a      	ldr	r2, [r1, #8]

	handle = sys_le16_to_cpu(req->handle);
    6168:	7853      	ldrb	r3, [r2, #1]
    616a:	7811      	ldrb	r1, [r2, #0]
    616c:	021b      	lsls	r3, r3, #8
	offset = sys_le16_to_cpu(req->offset);

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    616e:	430b      	orrs	r3, r1
	u16_t handle, offset;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
	offset = sys_le16_to_cpu(req->offset);
    6170:	7891      	ldrb	r1, [r2, #2]
    6172:	78d2      	ldrb	r2, [r2, #3]
    6174:	0212      	lsls	r2, r2, #8

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    6176:	430a      	orrs	r2, r1
    6178:	9200      	str	r2, [sp, #0]
    617a:	210c      	movs	r1, #12
    617c:	220d      	movs	r2, #13
    617e:	f7ff ffa9 	bl	60d4 <att_read_rsp>
			    BT_ATT_OP_READ_BLOB_RSP, handle, offset);
}
    6182:	bd0e      	pop	{r1, r2, r3, pc}

00006184 <att_read_req>:

	return 0;
}

static u8_t att_read_req(struct bt_att *att, struct net_buf *buf)
{
    6184:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_read_req *req;
	u16_t handle;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    6186:	688b      	ldr	r3, [r1, #8]

	BT_DBG("handle 0x%04x", handle);

	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    6188:	210a      	movs	r1, #10
	struct bt_att_read_req *req;
	u16_t handle;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    618a:	781a      	ldrb	r2, [r3, #0]
    618c:	785b      	ldrb	r3, [r3, #1]
    618e:	021b      	lsls	r3, r3, #8

	BT_DBG("handle 0x%04x", handle);

	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    6190:	4313      	orrs	r3, r2
    6192:	2200      	movs	r2, #0
    6194:	9200      	str	r2, [sp, #0]
    6196:	320b      	adds	r2, #11
    6198:	f7ff ff9c 	bl	60d4 <att_read_rsp>
			    handle, 0);
}
    619c:	bd0e      	pop	{r1, r2, r3, pc}
	...

000061a0 <att_read_type_req>:

	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
    61a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61a2:	b08f      	sub	sp, #60	; 0x3c
    61a4:	9001      	str	r0, [sp, #4]
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    61a6:	898b      	ldrh	r3, [r1, #12]

	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
    61a8:	000e      	movs	r6, r1
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    61aa:	2b06      	cmp	r3, #6
    61ac:	d002      	beq.n	61b4 <att_read_type_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    61ae:	2504      	movs	r5, #4
		struct bt_uuid_16 u16;
		struct bt_uuid_128 u128;
	} u;

	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    61b0:	2b14      	cmp	r3, #20
    61b2:	d159      	bne.n	6268 <att_read_type_req+0xc8>

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    61b4:	0030      	movs	r0, r6
	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    61b6:	9b01      	ldr	r3, [sp, #4]

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    61b8:	2104      	movs	r1, #4
	return 0;
}

static u8_t att_read_type_req(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    61ba:	681f      	ldr	r7, [r3, #0]
	/* Type can only be UUID16 or UUID128 */
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;
    61bc:	68b3      	ldr	r3, [r6, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	net_buf_pull(buf, sizeof(*req));
    61be:	3008      	adds	r0, #8
		return BT_ATT_ERR_INVALID_PDU;
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    61c0:	785c      	ldrb	r4, [r3, #1]
    61c2:	781a      	ldrb	r2, [r3, #0]
    61c4:	0224      	lsls	r4, r4, #8
    61c6:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    61c8:	789a      	ldrb	r2, [r3, #2]
    61ca:	78db      	ldrb	r3, [r3, #3]
	net_buf_pull(buf, sizeof(*req));

	if (!uuid_create(&u.uuid, buf)) {
		return BT_ATT_ERR_UNLIKELY;
    61cc:	250e      	movs	r5, #14
	}

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    61ce:	021b      	lsls	r3, r3, #8
    61d0:	4313      	orrs	r3, r2
    61d2:	9300      	str	r3, [sp, #0]
	net_buf_pull(buf, sizeof(*req));
    61d4:	f00c fab7 	bl	12746 <net_buf_simple_pull>

	if (!uuid_create(&u.uuid, buf)) {
    61d8:	0031      	movs	r1, r6
    61da:	a803      	add	r0, sp, #12
    61dc:	f7ff fa82 	bl	56e4 <uuid_create>
    61e0:	2800      	cmp	r0, #0
    61e2:	d041      	beq.n	6268 <att_read_type_req+0xc8>
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    61e4:	2c00      	cmp	r4, #0
    61e6:	d006      	beq.n	61f6 <att_read_type_req+0x56>
    61e8:	9b00      	ldr	r3, [sp, #0]
    61ea:	2b00      	cmp	r3, #0
    61ec:	d002      	beq.n	61f4 <att_read_type_req+0x54>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    61ee:	429c      	cmp	r4, r3
    61f0:	d801      	bhi.n	61f6 <att_read_type_req+0x56>
    61f2:	e008      	b.n	6206 <att_read_type_req+0x66>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    61f4:	9c00      	ldr	r4, [sp, #0]
    61f6:	2301      	movs	r3, #1
    61f8:	0022      	movs	r2, r4
    61fa:	2108      	movs	r1, #8
    61fc:	0038      	movs	r0, r7
    61fe:	f7ff fdd1 	bl	5da4 <send_err_rsp.part.8>
	       start_handle, end_handle, bt_uuid_str(&u.uuid));

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    6202:	2500      	movs	r5, #0
    6204:	e030      	b.n	6268 <att_read_type_req+0xc8>
}

static u8_t att_read_type_rsp(struct bt_att *att, struct bt_uuid *uuid,
			      u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    6206:	9b01      	ldr	r3, [sp, #4]
	struct read_type_data data;

	memset(&data, 0, sizeof(data));
    6208:	ae08      	add	r6, sp, #32
}

static u8_t att_read_type_rsp(struct bt_att *att, struct bt_uuid *uuid,
			      u16_t start_handle, u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
    620a:	681f      	ldr	r7, [r3, #0]
	struct read_type_data data;

	memset(&data, 0, sizeof(data));
    620c:	2218      	movs	r2, #24
    620e:	2100      	movs	r1, #0
    6210:	0030      	movs	r0, r6
    6212:	f7fb f8d1 	bl	13b8 <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    6216:	2201      	movs	r2, #1
    6218:	2109      	movs	r1, #9
    621a:	0038      	movs	r0, r7
    621c:	f7ff fd4a 	bl	5cb4 <bt_att_create_pdu>
    6220:	60b0      	str	r0, [r6, #8]
				     sizeof(*data.rsp));
	if (!data.buf) {
    6222:	2800      	cmp	r0, #0
    6224:	d020      	beq.n	6268 <att_read_type_req+0xc8>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    6226:	9b01      	ldr	r3, [sp, #4]
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6228:	2101      	movs	r1, #1
				     sizeof(*data.rsp));
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    622a:	9308      	str	r3, [sp, #32]
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    622c:	3008      	adds	r0, #8
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
    622e:	ab03      	add	r3, sp, #12
    6230:	6073      	str	r3, [r6, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6232:	f00c fa67 	bl	12704 <net_buf_simple_add>
	data.rsp->len = 0;
    6236:	2300      	movs	r3, #0
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6238:	60f0      	str	r0, [r6, #12]
	data.rsp->len = 0;
    623a:	7003      	strb	r3, [r0, #0]

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    623c:	230a      	movs	r3, #10

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    623e:	4a0c      	ldr	r2, [pc, #48]	; (6270 <att_read_type_req+0xd0>)
	data.uuid = uuid;
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
	data.rsp->len = 0;

	/* Pre-set error if no attr will be found in handle */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6240:	7533      	strb	r3, [r6, #20]

	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6242:	9900      	ldr	r1, [sp, #0]
    6244:	0033      	movs	r3, r6
    6246:	0020      	movs	r0, r4
    6248:	f000 fce2 	bl	6c10 <bt_gatt_foreach_attr>

	if (data.err) {
    624c:	7d35      	ldrb	r5, [r6, #20]
    624e:	2d00      	cmp	r5, #0
    6250:	d004      	beq.n	625c <att_read_type_req+0xbc>
		net_buf_unref(data.buf);
    6252:	68b0      	ldr	r0, [r6, #8]
    6254:	f00c fa34 	bl	126c0 <net_buf_unref>
    6258:	7d33      	ldrb	r3, [r6, #20]
    625a:	e7cd      	b.n	61f8 <att_read_type_req+0x58>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
			     data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    625c:	4b05      	ldr	r3, [pc, #20]	; (6274 <att_read_type_req+0xd4>)
    625e:	68b2      	ldr	r2, [r6, #8]
    6260:	2104      	movs	r1, #4
    6262:	0038      	movs	r0, r7
    6264:	f7fe fea0 	bl	4fa8 <bt_l2cap_send_cb>
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
	}

	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
}
    6268:	0028      	movs	r0, r5
    626a:	b00f      	add	sp, #60	; 0x3c
    626c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    626e:	46c0      	nop			; (mov r8, r8)
    6270:	000055f7 	.word	0x000055f7
    6274:	00005bad 	.word	0x00005bad

00006278 <att_find_type_req>:

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    6278:	b5f0      	push	{r4, r5, r6, r7, lr}
    627a:	000d      	movs	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    627c:	6803      	ldr	r3, [r0, #0]

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    627e:	0007      	movs	r7, r0
	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
	value = net_buf_pull(buf, sizeof(*req));
    6280:	0028      	movs	r0, r5

	return 0;
}

static u8_t att_find_type_req(struct bt_att *att, struct net_buf *buf)
{
    6282:	b08b      	sub	sp, #44	; 0x2c
	struct bt_conn *conn = att->chan.chan.conn;
    6284:	9301      	str	r3, [sp, #4]
	struct bt_att_find_type_req *req;
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;
    6286:	688b      	ldr	r3, [r1, #8]

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
	value = net_buf_pull(buf, sizeof(*req));
    6288:	3008      	adds	r0, #8
	u16_t start_handle, end_handle, err_handle, type;
	u8_t *value;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    628a:	785c      	ldrb	r4, [r3, #1]
    628c:	781a      	ldrb	r2, [r3, #0]
    628e:	0224      	lsls	r4, r4, #8
    6290:	4314      	orrs	r4, r2
	end_handle = sys_le16_to_cpu(req->end_handle);
    6292:	78da      	ldrb	r2, [r3, #3]
    6294:	7899      	ldrb	r1, [r3, #2]
    6296:	0212      	lsls	r2, r2, #8
    6298:	430a      	orrs	r2, r1
    629a:	9200      	str	r2, [sp, #0]
	type = sys_le16_to_cpu(req->type);
    629c:	795e      	ldrb	r6, [r3, #5]
    629e:	791a      	ldrb	r2, [r3, #4]
    62a0:	0236      	lsls	r6, r6, #8
	value = net_buf_pull(buf, sizeof(*req));
    62a2:	2106      	movs	r1, #6

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
	type = sys_le16_to_cpu(req->type);
    62a4:	4316      	orrs	r6, r2
	value = net_buf_pull(buf, sizeof(*req));
    62a6:	f00c fa4e 	bl	12746 <net_buf_simple_pull>
    62aa:	9002      	str	r0, [sp, #8]
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    62ac:	2c00      	cmp	r4, #0
    62ae:	d006      	beq.n	62be <att_find_type_req+0x46>
    62b0:	9b00      	ldr	r3, [sp, #0]
    62b2:	2b00      	cmp	r3, #0
    62b4:	d002      	beq.n	62bc <att_find_type_req+0x44>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    62b6:	429c      	cmp	r4, r3
    62b8:	d801      	bhi.n	62be <att_find_type_req+0x46>
    62ba:	e008      	b.n	62ce <att_find_type_req+0x56>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    62bc:	9c00      	ldr	r4, [sp, #0]
    62be:	2301      	movs	r3, #1
    62c0:	0022      	movs	r2, r4
    62c2:	2106      	movs	r1, #6
    62c4:	9801      	ldr	r0, [sp, #4]
    62c6:	f7ff fd6d 	bl	5da4 <send_err_rsp.part.8>
	 * UUID for the specific primary service.
	 */
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
    62ca:	2600      	movs	r6, #0
    62cc:	e036      	b.n	633c <att_find_type_req+0xc4>
	/* The Attribute Protocol Find By Type Value Request shall be used with
	 * the Attribute Type parameter set to the UUID for "Primary Service"
	 * and the Attribute Value set to the 16-bit Bluetooth UUID or 128-bit
	 * UUID for the specific primary service.
	 */
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    62ce:	23a0      	movs	r3, #160	; 0xa0
    62d0:	019b      	lsls	r3, r3, #6
    62d2:	429e      	cmp	r6, r3
    62d4:	d001      	beq.n	62da <att_find_type_req+0x62>
    62d6:	230a      	movs	r3, #10
    62d8:	e7f2      	b.n	62c0 <att_find_type_req+0x48>
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
    62da:	89ab      	ldrh	r3, [r5, #12]
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    62dc:	ad05      	add	r5, sp, #20
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
    62de:	9303      	str	r3, [sp, #12]

static u8_t att_find_type_rsp(struct bt_att *att, u16_t start_handle,
			      u16_t end_handle, const void *value,
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    62e0:	683b      	ldr	r3, [r7, #0]
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    62e2:	2214      	movs	r2, #20
    62e4:	2100      	movs	r1, #0
    62e6:	0028      	movs	r0, r5

static u8_t att_find_type_rsp(struct bt_att *att, u16_t start_handle,
			      u16_t end_handle, const void *value,
			      u8_t value_len)
{
	struct bt_conn *conn = att->chan.chan.conn;
    62e8:	9301      	str	r3, [sp, #4]
	struct find_type_data data;

	memset(&data, 0, sizeof(data));
    62ea:	f7fb f865 	bl	13b8 <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    62ee:	2200      	movs	r2, #0
    62f0:	2107      	movs	r1, #7
    62f2:	9801      	ldr	r0, [sp, #4]
    62f4:	f7ff fcde 	bl	5cb4 <bt_att_create_pdu>
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    62f8:	260e      	movs	r6, #14
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_type_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    62fa:	6068      	str	r0, [r5, #4]
	if (!data.buf) {
    62fc:	2800      	cmp	r0, #0
    62fe:	d01d      	beq.n	633c <att_find_type_req+0xc4>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
	data.value = value;
    6300:	9b02      	ldr	r3, [sp, #8]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    6302:	9705      	str	r7, [sp, #20]
	data.group = NULL;
	data.value = value;
    6304:	60eb      	str	r3, [r5, #12]
	data.value_len = value_len;
    6306:	466b      	mov	r3, sp
    6308:	7b1b      	ldrb	r3, [r3, #12]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
    630a:	2700      	movs	r7, #0
	data.value = value;
	data.value_len = value_len;
    630c:	742b      	strb	r3, [r5, #16]

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    630e:	230a      	movs	r3, #10

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6310:	4a0c      	ldr	r2, [pc, #48]	; (6344 <att_find_type_req+0xcc>)
	data.group = NULL;
	data.value = value;
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6312:	746b      	strb	r3, [r5, #17]

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    6314:	9900      	ldr	r1, [sp, #0]
    6316:	002b      	movs	r3, r5
    6318:	0020      	movs	r0, r4
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	data.group = NULL;
    631a:	60af      	str	r7, [r5, #8]
	data.value_len = value_len;

	/* Pre-set error in case no service will be found */
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;

	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    631c:	f000 fc78 	bl	6c10 <bt_gatt_foreach_attr>

	/* If error has not been cleared, no service has been found */
	if (data.err) {
    6320:	7c6e      	ldrb	r6, [r5, #17]
    6322:	42be      	cmp	r6, r7
    6324:	d004      	beq.n	6330 <att_find_type_req+0xb8>
		net_buf_unref(data.buf);
    6326:	6868      	ldr	r0, [r5, #4]
    6328:	f00c f9ca 	bl	126c0 <net_buf_unref>
    632c:	7c6b      	ldrb	r3, [r5, #17]
    632e:	e7c7      	b.n	62c0 <att_find_type_req+0x48>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
			     data.err);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6330:	4b05      	ldr	r3, [pc, #20]	; (6348 <att_find_type_req+0xd0>)
    6332:	686a      	ldr	r2, [r5, #4]
    6334:	2104      	movs	r1, #4
    6336:	9801      	ldr	r0, [sp, #4]
    6338:	f7fe fe36 	bl	4fa8 <bt_l2cap_send_cb>
		return 0;
	}

	return att_find_type_rsp(att, start_handle, end_handle, value,
				 buf->len);
}
    633c:	0030      	movs	r0, r6
    633e:	b00b      	add	sp, #44	; 0x2c
    6340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6342:	46c0      	nop			; (mov r8, r8)
    6344:	000054c5 	.word	0x000054c5
    6348:	00005bad 	.word	0x00005bad

0000634c <att_find_info_req>:

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    634c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = att->chan.chan.conn;
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;
    634e:	688b      	ldr	r3, [r1, #8]

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    6350:	b085      	sub	sp, #20
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    6352:	785c      	ldrb	r4, [r3, #1]
    6354:	781a      	ldrb	r2, [r3, #0]
    6356:	0224      	lsls	r4, r4, #8

	return 0;
}

static u8_t att_find_info_req(struct bt_att *att, struct net_buf *buf)
{
    6358:	0007      	movs	r7, r0
	struct bt_conn *conn = att->chan.chan.conn;
    635a:	6806      	ldr	r6, [r0, #0]
	struct bt_att_find_info_req *req;
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
    635c:	4314      	orrs	r4, r2
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    635e:	d008      	beq.n	6372 <att_find_info_req+0x26>
	u16_t start_handle, end_handle, err_handle;

	req = (void *)buf->data;

	start_handle = sys_le16_to_cpu(req->start_handle);
	end_handle = sys_le16_to_cpu(req->end_handle);
    6360:	78dd      	ldrb	r5, [r3, #3]
    6362:	789a      	ldrb	r2, [r3, #2]
    6364:	022d      	lsls	r5, r5, #8
    6366:	4315      	orrs	r5, r2
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    6368:	d002      	beq.n	6370 <att_find_info_req+0x24>
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    636a:	42ac      	cmp	r4, r5
    636c:	d801      	bhi.n	6372 <att_find_info_req+0x26>
    636e:	e008      	b.n	6382 <att_find_info_req+0x36>
static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
		if (err) {
			*err = 0;
    6370:	002c      	movs	r4, r5
    6372:	2301      	movs	r3, #1
    6374:	0022      	movs	r2, r4
    6376:	2104      	movs	r1, #4
    6378:	0030      	movs	r0, r6
    637a:	f7ff fd13 	bl	5da4 <send_err_rsp.part.8>
	       end_handle);

	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
    637e:	2000      	movs	r0, #0
    6380:	e024      	b.n	63cc <att_find_info_req+0x80>
			      u16_t end_handle)
{
	struct bt_conn *conn = att->chan.chan.conn;
	struct find_info_data data;

	memset(&data, 0, sizeof(data));
    6382:	2210      	movs	r2, #16
    6384:	2100      	movs	r1, #0
    6386:	4668      	mov	r0, sp
    6388:	f7fb f816 	bl	13b8 <memset>

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    638c:	2200      	movs	r2, #0
    638e:	2105      	movs	r1, #5
    6390:	0030      	movs	r0, r6
    6392:	f7ff fc8f 	bl	5cb4 <bt_att_create_pdu>
    6396:	0003      	movs	r3, r0
    6398:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
    639a:	200e      	movs	r0, #14
	struct find_info_data data;

	memset(&data, 0, sizeof(data));

	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
	if (!data.buf) {
    639c:	2b00      	cmp	r3, #0
    639e:	d015      	beq.n	63cc <att_find_info_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    63a0:	0029      	movs	r1, r5
    63a2:	466b      	mov	r3, sp
    63a4:	4a0a      	ldr	r2, [pc, #40]	; (63d0 <att_find_info_req+0x84>)
    63a6:	0020      	movs	r0, r4
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
	if (!data.buf) {
		return BT_ATT_ERR_UNLIKELY;
	}

	data.att = att;
    63a8:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    63aa:	f000 fc31 	bl	6c10 <bt_gatt_foreach_attr>

	if (!data.rsp) {
    63ae:	9d02      	ldr	r5, [sp, #8]
    63b0:	2d00      	cmp	r5, #0
    63b2:	d104      	bne.n	63be <att_find_info_req+0x72>
		net_buf_unref(data.buf);
    63b4:	9801      	ldr	r0, [sp, #4]
    63b6:	f00c f983 	bl	126c0 <net_buf_unref>
    63ba:	230a      	movs	r3, #10
    63bc:	e7da      	b.n	6374 <att_find_info_req+0x28>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
			     BT_ATT_ERR_ATTRIBUTE_NOT_FOUND);
		return 0;
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    63be:	4b05      	ldr	r3, [pc, #20]	; (63d4 <att_find_info_req+0x88>)
    63c0:	9a01      	ldr	r2, [sp, #4]
    63c2:	2104      	movs	r1, #4
    63c4:	0030      	movs	r0, r6
    63c6:	f7fe fdef 	bl	4fa8 <bt_l2cap_send_cb>
    63ca:	e7d8      	b.n	637e <att_find_info_req+0x32>
			     BT_ATT_ERR_INVALID_HANDLE);
		return 0;
	}

	return att_find_info_rsp(att, start_handle, end_handle);
}
    63cc:	b005      	add	sp, #20
    63ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63d0:	00005415 	.word	0x00005415
    63d4:	00005bad 	.word	0x00005bad

000063d8 <att_write_rsp.part.9.constprop.13>:
	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    63d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63da:	b08b      	sub	sp, #44	; 0x2c
    63dc:	9301      	str	r3, [sp, #4]
    63de:	ab10      	add	r3, sp, #64	; 0x40
    63e0:	0017      	movs	r7, r2
    63e2:	cb04      	ldmia	r3!, {r2}
    63e4:	0005      	movs	r5, r0
    63e6:	781b      	ldrb	r3, [r3, #0]
    63e8:	000e      	movs	r6, r1
    63ea:	9202      	str	r2, [sp, #8]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    63ec:	2100      	movs	r1, #0
    63ee:	2218      	movs	r2, #24
    63f0:	a804      	add	r0, sp, #16
	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}

static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    63f2:	9303      	str	r3, [sp, #12]

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
	}

	memset(&data, 0, sizeof(data));
    63f4:	f7fa ffe0 	bl	13b8 <memset>

	/* Only allocate buf if required to respond */
	if (rsp) {
    63f8:	2f00      	cmp	r7, #0
    63fa:	d119      	bne.n	6430 <att_write_rsp.part.9.constprop.13+0x58>
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
	data.op = op;
    63fc:	ab04      	add	r3, sp, #16
    63fe:	721e      	strb	r6, [r3, #8]
	data.offset = offset;
    6400:	2300      	movs	r3, #0
    6402:	aa04      	add	r2, sp, #16
    6404:	8253      	strh	r3, [r2, #18]
	data.value = value;
    6406:	9b02      	ldr	r3, [sp, #8]
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6408:	9901      	ldr	r1, [sp, #4]
	}

	data.conn = conn;
	data.op = op;
	data.offset = offset;
	data.value = value;
    640a:	9307      	str	r3, [sp, #28]
	data.len = len;
    640c:	0013      	movs	r3, r2
    640e:	466a      	mov	r2, sp
    6410:	7b12      	ldrb	r2, [r2, #12]
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6412:	0008      	movs	r0, r1

	data.conn = conn;
	data.op = op;
	data.offset = offset;
	data.value = value;
	data.len = len;
    6414:	741a      	strb	r2, [r3, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    6416:	2301      	movs	r3, #1
    6418:	aa04      	add	r2, sp, #16
    641a:	7513      	strb	r3, [r2, #20]

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    641c:	0013      	movs	r3, r2
    641e:	4a19      	ldr	r2, [pc, #100]	; (6484 <att_write_rsp.part.9.constprop.13+0xac>)
		if (!data.buf) {
			return BT_ATT_ERR_UNLIKELY;
		}
	}

	data.conn = conn;
    6420:	9504      	str	r5, [sp, #16]
	data.offset = offset;
	data.value = value;
	data.len = len;
	data.err = BT_ATT_ERR_INVALID_HANDLE;

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    6422:	f000 fbf5 	bl	6c10 <bt_gatt_foreach_attr>

	if (data.err) {
    6426:	ab04      	add	r3, sp, #16
    6428:	7d1c      	ldrb	r4, [r3, #20]
    642a:	2c00      	cmp	r4, #0
    642c:	d10a      	bne.n	6444 <att_write_rsp.part.9.constprop.13+0x6c>
    642e:	e01e      	b.n	646e <att_write_rsp.part.9.constprop.13+0x96>

	memset(&data, 0, sizeof(data));

	/* Only allocate buf if required to respond */
	if (rsp) {
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    6430:	2200      	movs	r2, #0
    6432:	0039      	movs	r1, r7
    6434:	0028      	movs	r0, r5
    6436:	f7ff fc3d 	bl	5cb4 <bt_att_create_pdu>
		if (!data.buf) {
			return BT_ATT_ERR_UNLIKELY;
    643a:	240e      	movs	r4, #14

	memset(&data, 0, sizeof(data));

	/* Only allocate buf if required to respond */
	if (rsp) {
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    643c:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
    643e:	2800      	cmp	r0, #0
    6440:	d1dc      	bne.n	63fc <att_write_rsp.part.9.constprop.13+0x24>
    6442:	e01c      	b.n	647e <att_write_rsp.part.9.constprop.13+0xa6>

	bt_gatt_foreach_attr(handle, handle, write_cb, &data);

	if (data.err) {
		/* In case of error discard data and respond with an error */
		if (rsp) {
    6444:	2f00      	cmp	r7, #0
    6446:	d00d      	beq.n	6464 <att_write_rsp.part.9.constprop.13+0x8c>
			net_buf_unref(data.buf);
    6448:	9805      	ldr	r0, [sp, #20]
    644a:	f00c f939 	bl	126c0 <net_buf_unref>
{
	struct bt_att_error_rsp *rsp;
	struct net_buf *buf;

	/* Ignore opcode 0x00 */
	if (!req) {
    644e:	2e00      	cmp	r6, #0
    6450:	d101      	bne.n	6456 <att_write_rsp.part.9.constprop.13+0x7e>
		if (rsp) {
			net_buf_unref(data.buf);
			/* Respond here since handle is set */
			send_err_rsp(conn, op, handle, data.err);
		}
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    6452:	2400      	movs	r4, #0
    6454:	e013      	b.n	647e <att_write_rsp.part.9.constprop.13+0xa6>
    6456:	ab04      	add	r3, sp, #16
    6458:	7d1b      	ldrb	r3, [r3, #20]
    645a:	9a01      	ldr	r2, [sp, #4]
    645c:	0031      	movs	r1, r6
    645e:	0028      	movs	r0, r5
    6460:	f7ff fca0 	bl	5da4 <send_err_rsp.part.8>
    6464:	2e18      	cmp	r6, #24
    6466:	d1f4      	bne.n	6452 <att_write_rsp.part.9.constprop.13+0x7a>
    6468:	ab04      	add	r3, sp, #16
    646a:	7d1c      	ldrb	r4, [r3, #20]
    646c:	e007      	b.n	647e <att_write_rsp.part.9.constprop.13+0xa6>
	}

	if (data.buf) {
    646e:	9a05      	ldr	r2, [sp, #20]
    6470:	2a00      	cmp	r2, #0
    6472:	d0ee      	beq.n	6452 <att_write_rsp.part.9.constprop.13+0x7a>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    6474:	4b04      	ldr	r3, [pc, #16]	; (6488 <att_write_rsp.part.9.constprop.13+0xb0>)
    6476:	2104      	movs	r1, #4
    6478:	0028      	movs	r0, r5
    647a:	f7fe fd95 	bl	4fa8 <bt_l2cap_send_cb>
				 att_rsp_sent);
	}

	return 0;
}
    647e:	0020      	movs	r0, r4
    6480:	b00b      	add	sp, #44	; 0x2c
    6482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6484:	00005be9 	.word	0x00005be9
    6488:	00005bad 	.word	0x00005bad

0000648c <att_signed_write_cmd>:

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    648c:	b5f0      	push	{r4, r5, r6, r7, lr}
	handle = sys_le16_to_cpu(req->handle);

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    648e:	000e      	movs	r6, r1

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    6490:	000c      	movs	r4, r1
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    6492:	688b      	ldr	r3, [r1, #8]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
	struct bt_conn *conn = att->chan.chan.conn;
    6494:	6807      	ldr	r7, [r0, #0]
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    6496:	781a      	ldrb	r2, [r3, #0]
    6498:	785b      	ldrb	r3, [r3, #1]

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    649a:	3608      	adds	r6, #8
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    649c:	021b      	lsls	r3, r3, #8

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}

static u8_t att_signed_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    649e:	b085      	sub	sp, #20
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    64a0:	4313      	orrs	r3, r2

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    64a2:	2101      	movs	r1, #1
    64a4:	0030      	movs	r0, r6
	u16_t handle;
	int err;

	req = (void *)buf->data;

	handle = sys_le16_to_cpu(req->handle);
    64a6:	9303      	str	r3, [sp, #12]

	BT_DBG("handle 0x%04x", handle);

	/* Verifying data requires full buffer including attribute header */
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    64a8:	f00c f945 	bl	12736 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    64ac:	0021      	movs	r1, r4
    64ae:	0038      	movs	r0, r7
    64b0:	f002 f8be 	bl	8630 <bt_smp_sign_verify>
    64b4:	1e05      	subs	r5, r0, #0
	if (err) {
    64b6:	d00b      	beq.n	64d0 <att_signed_write_cmd+0x44>
		BT_ERR("Error verifying data");
    64b8:	4b12      	ldr	r3, [pc, #72]	; (6504 <att_signed_write_cmd+0x78>)
    64ba:	4a13      	ldr	r2, [pc, #76]	; (6508 <att_signed_write_cmd+0x7c>)
    64bc:	9301      	str	r3, [sp, #4]
    64be:	4b13      	ldr	r3, [pc, #76]	; (650c <att_signed_write_cmd+0x80>)
    64c0:	4913      	ldr	r1, [pc, #76]	; (6510 <att_signed_write_cmd+0x84>)
    64c2:	9300      	str	r3, [sp, #0]
    64c4:	4813      	ldr	r0, [pc, #76]	; (6514 <att_signed_write_cmd+0x88>)
    64c6:	4b14      	ldr	r3, [pc, #80]	; (6518 <att_signed_write_cmd+0x8c>)
    64c8:	f7fb f94e 	bl	1768 <printk>
    64cc:	2000      	movs	r0, #0
    64ce:	e017      	b.n	6500 <att_signed_write_cmd+0x74>
		/* No response for this command */
		return 0;
	}

	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    64d0:	2101      	movs	r1, #1
    64d2:	0030      	movs	r0, r6
    64d4:	f00c f937 	bl	12746 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    64d8:	2102      	movs	r1, #2
    64da:	0030      	movs	r0, r6
    64dc:	f00c f933 	bl	12746 <net_buf_simple_pull>
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    64e0:	9b03      	ldr	r3, [sp, #12]
		return BT_ATT_ERR_INVALID_HANDLE;
    64e2:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    64e4:	2b00      	cmp	r3, #0
    64e6:	d00b      	beq.n	6500 <att_signed_write_cmd+0x74>
    64e8:	89a3      	ldrh	r3, [r4, #12]
    64ea:	002a      	movs	r2, r5
    64ec:	3b0c      	subs	r3, #12
    64ee:	b2db      	uxtb	r3, r3
    64f0:	9301      	str	r3, [sp, #4]
    64f2:	68a3      	ldr	r3, [r4, #8]
    64f4:	0029      	movs	r1, r5
    64f6:	9300      	str	r3, [sp, #0]
    64f8:	0038      	movs	r0, r7
    64fa:	9b03      	ldr	r3, [sp, #12]
    64fc:	f7ff ff6c 	bl	63d8 <att_write_rsp.part.9.constprop.13>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
	net_buf_pull(buf, sizeof(*req));

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
			     buf->len - sizeof(struct bt_att_signature));
}
    6500:	b005      	add	sp, #20
    6502:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6504:	000145b0 	.word	0x000145b0
    6508:	00014570 	.word	0x00014570
    650c:	000145b5 	.word	0x000145b5
    6510:	00014577 	.word	0x00014577
    6514:	0001524d 	.word	0x0001524d
    6518:	00016b22 	.word	0x00016b22

0000651c <att_write_cmd>:
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    651c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    651e:	6805      	ldr	r5, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6520:	0008      	movs	r0, r1
    6522:	3008      	adds	r0, #8
	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BLUETOOTH_ATT_PREPARE_COUNT */
}

static u8_t att_write_cmd(struct bt_att *att, struct net_buf *buf)
{
    6524:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6526:	f00c f91e 	bl	12766 <net_buf_simple_pull_le16>
    652a:	0003      	movs	r3, r0
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    652c:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    652e:	2b00      	cmp	r3, #0
    6530:	d008      	beq.n	6544 <att_write_cmd+0x28>
    6532:	7b22      	ldrb	r2, [r4, #12]
    6534:	0028      	movs	r0, r5
    6536:	9201      	str	r2, [sp, #4]
    6538:	68a2      	ldr	r2, [r4, #8]
    653a:	9200      	str	r2, [sp, #0]
    653c:	2200      	movs	r2, #0
    653e:	0011      	movs	r1, r2
    6540:	f7ff ff4a 	bl	63d8 <att_write_rsp.part.9.constprop.13>
	handle = net_buf_pull_le16(buf);

	BT_DBG("handle 0x%04x", handle);

	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
}
    6544:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00006546 <att_write_req>:

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    6546:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6548:	6805      	ldr	r5, [r0, #0]
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    654a:	0008      	movs	r0, r1
    654c:	3008      	adds	r0, #8

	return 0;
}

static u8_t att_write_req(struct bt_att *att, struct net_buf *buf)
{
    654e:	000c      	movs	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
	u16_t handle;

	handle = net_buf_pull_le16(buf);
    6550:	f00c f909 	bl	12766 <net_buf_simple_pull_le16>
    6554:	0003      	movs	r3, r0
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
		return BT_ATT_ERR_INVALID_HANDLE;
    6556:	2001      	movs	r0, #1
			  u16_t handle, u16_t offset, const void *value,
			  u8_t len)
{
	struct write_data data;

	if (!handle) {
    6558:	2b00      	cmp	r3, #0
    655a:	d008      	beq.n	656e <att_write_req+0x28>
    655c:	7b22      	ldrb	r2, [r4, #12]
    655e:	2112      	movs	r1, #18
    6560:	9201      	str	r2, [sp, #4]
    6562:	68a2      	ldr	r2, [r4, #8]
    6564:	0028      	movs	r0, r5
    6566:	9200      	str	r2, [sp, #0]
    6568:	2213      	movs	r2, #19
    656a:	f7ff ff35 	bl	63d8 <att_write_rsp.part.9.constprop.13>

	BT_DBG("handle 0x%04x", handle);

	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
			     handle, 0, buf->data, buf->len);
}
    656e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00006570 <bt_att_init>:

	return -ENOMEM;
}

void bt_att_init(void)
{
    6570:	b510      	push	{r4, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6572:	4803      	ldr	r0, [pc, #12]	; (6580 <bt_att_init+0x10>)
    6574:	f7fe fc3e 	bl	4df4 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    6578:	f000 faa8 	bl	6acc <bt_gatt_init>
}
    657c:	bd10      	pop	{r4, pc}
    657e:	46c0      	nop			; (mov r8, r8)
    6580:	200003b0 	.word	0x200003b0

00006584 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    6584:	b510      	push	{r4, lr}
    6586:	000c      	movs	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    6588:	2800      	cmp	r0, #0
    658a:	d01c      	beq.n	65c6 <bt_att_req_send+0x42>
    658c:	2900      	cmp	r1, #0
    658e:	d01a      	beq.n	65c6 <bt_att_req_send+0x42>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    6590:	f7ff fac6 	bl	5b20 <att_chan_get>
	if (!att) {
    6594:	2800      	cmp	r0, #0
    6596:	d018      	beq.n	65ca <bt_att_req_send+0x46>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    6598:	0003      	movs	r3, r0
    659a:	3394      	adds	r3, #148	; 0x94
    659c:	681b      	ldr	r3, [r3, #0]
    659e:	2b00      	cmp	r3, #0
    65a0:	d00d      	beq.n	65be <bt_att_req_send+0x3a>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
    65a2:	0002      	movs	r2, r0
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    65a4:	2300      	movs	r3, #0

	if (!list->tail) {
    65a6:	3298      	adds	r2, #152	; 0x98
    65a8:	6850      	ldr	r0, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    65aa:	6023      	str	r3, [r4, #0]

	if (!list->tail) {
    65ac:	4298      	cmp	r0, r3
    65ae:	d102      	bne.n	65b6 <bt_att_req_send+0x32>
		list->tail = node;
    65b0:	6054      	str	r4, [r2, #4]
		list->head = node;
    65b2:	6014      	str	r4, [r2, #0]
    65b4:	e00b      	b.n	65ce <bt_att_req_send+0x4a>
	} else {
		list->tail->next = node;
    65b6:	6004      	str	r4, [r0, #0]
		list->tail = node;
    65b8:	6054      	str	r4, [r2, #4]
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    65ba:	0018      	movs	r0, r3
    65bc:	e007      	b.n	65ce <bt_att_req_send+0x4a>
	}

	return att_send_req(att, req);
    65be:	0021      	movs	r1, r4
    65c0:	f7ff f8d0 	bl	5764 <att_send_req>
    65c4:	e003      	b.n	65ce <bt_att_req_send+0x4a>
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
		return -EINVAL;
    65c6:	2016      	movs	r0, #22
    65c8:	e000      	b.n	65cc <bt_att_req_send+0x48>
	}

	att = att_chan_get(conn);
	if (!att) {
		return -ENOTCONN;
    65ca:	2039      	movs	r0, #57	; 0x39
    65cc:	4240      	negs	r0, r0
		sys_slist_append(&att->reqs, &req->node);
		return 0;
	}

	return att_send_req(att, req);
}
    65ce:	bd10      	pop	{r4, pc}

000065d0 <sc_ccc_cfg_changed>:

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
	BT_DBG("value 0x%04x", value);
}
    65d0:	4770      	bx	lr

000065d2 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    65d2:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    65d4:	2000      	movs	r0, #0
    65d6:	4770      	bx	lr

000065d8 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    65d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;
	u16_t value = 0x0000;
    65da:	2300      	movs	r3, #0

	for (i = 0; i < ccc->cfg_len; i++) {
		if (ccc->cfg[i].value > value) {
    65dc:	260c      	movs	r6, #12
			     struct _bt_gatt_ccc *ccc)
{
	int i;
	u16_t value = 0x0000;

	for (i = 0; i < ccc->cfg_len; i++) {
    65de:	001a      	movs	r2, r3
    65e0:	684d      	ldr	r5, [r1, #4]
    65e2:	42aa      	cmp	r2, r5
    65e4:	d00b      	beq.n	65fe <gatt_ccc_changed+0x26>
		if (ccc->cfg[i].value > value) {
    65e6:	0034      	movs	r4, r6
    65e8:	4354      	muls	r4, r2
    65ea:	680f      	ldr	r7, [r1, #0]
    65ec:	193c      	adds	r4, r7, r4
    65ee:	8927      	ldrh	r7, [r4, #8]
    65f0:	1c1c      	adds	r4, r3, #0
    65f2:	42bb      	cmp	r3, r7
    65f4:	d200      	bcs.n	65f8 <gatt_ccc_changed+0x20>
    65f6:	1c3c      	adds	r4, r7, #0
    65f8:	b2a3      	uxth	r3, r4
			     struct _bt_gatt_ccc *ccc)
{
	int i;
	u16_t value = 0x0000;

	for (i = 0; i < ccc->cfg_len; i++) {
    65fa:	3201      	adds	r2, #1
    65fc:	e7f1      	b.n	65e2 <gatt_ccc_changed+0xa>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    65fe:	890a      	ldrh	r2, [r1, #8]
    6600:	429a      	cmp	r2, r3
    6602:	d003      	beq.n	660c <gatt_ccc_changed+0x34>
		ccc->value = value;
    6604:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    6606:	68ca      	ldr	r2, [r1, #12]
    6608:	0019      	movs	r1, r3
    660a:	4790      	blx	r2
	}
}
    660c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000660e <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    660e:	b510      	push	{r4, lr}
    6610:	9b02      	ldr	r3, [sp, #8]
    6612:	000a      	movs	r2, r1
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    6614:	69dc      	ldr	r4, [r3, #28]
    6616:	6999      	ldr	r1, [r3, #24]
    6618:	47a0      	blx	r4
}
    661a:	bd10      	pop	{r4, pc}

0000661c <sc_indicate_rsp>:

static struct k_sem sc_sem = K_SEM_INITIALIZER(sc_sem, 1, 1);

static void sc_indicate_rsp(struct bt_conn *conn,
			    const struct bt_gatt_attr *attr, u8_t err)
{
    661c:	b510      	push	{r4, lr}
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
    661e:	4802      	ldr	r0, [pc, #8]	; (6628 <sc_indicate_rsp+0xc>)
    6620:	f00d f9fc 	bl	13a1c <k_sem_give>
}
    6624:	bd10      	pop	{r4, pc}
    6626:	46c0      	nop			; (mov r8, r8)
    6628:	200004d4 	.word	0x200004d4

0000662c <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       u16_t len, u16_t offset, u8_t flags)
{
    662c:	b5f0      	push	{r4, r5, r6, r7, lr}
    662e:	b087      	sub	sp, #28
    6630:	9105      	str	r1, [sp, #20]
    6632:	a90c      	add	r1, sp, #48	; 0x30
    6634:	9004      	str	r0, [sp, #16]
    6636:	8809      	ldrh	r1, [r1, #0]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6638:	9805      	ldr	r0, [sp, #20]
    663a:	68c5      	ldr	r5, [r0, #12]
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
    663c:	2902      	cmp	r1, #2
    663e:	d85e      	bhi.n	66fe <bt_gatt_attr_write_ccc+0xd2>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(u16_t)) {
    6640:	18c9      	adds	r1, r1, r3
    6642:	001e      	movs	r6, r3
    6644:	2902      	cmp	r1, #2
    6646:	dc5c      	bgt.n	6702 <bt_gatt_attr_write_ccc+0xd6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    6648:	2400      	movs	r4, #0
		/* Check for existing configuration */
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    664a:	270c      	movs	r7, #12
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    664c:	7853      	ldrb	r3, [r2, #1]
    664e:	7812      	ldrb	r2, [r2, #0]
    6650:	021b      	lsls	r3, r3, #8
    6652:	431a      	orrs	r2, r3
    6654:	9203      	str	r2, [sp, #12]
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    6656:	686b      	ldr	r3, [r5, #4]
    6658:	429c      	cmp	r4, r3
    665a:	d208      	bcs.n	666e <bt_gatt_attr_write_ccc+0x42>
		/* Check for existing configuration */
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    665c:	0039      	movs	r1, r7
    665e:	4361      	muls	r1, r4
    6660:	682b      	ldr	r3, [r5, #0]
    6662:	9804      	ldr	r0, [sp, #16]
    6664:	1859      	adds	r1, r3, r1
    6666:	f7fe f991 	bl	498c <bt_conn_addr_le_cmp>
    666a:	2800      	cmp	r0, #0
    666c:	d105      	bne.n	667a <bt_gatt_attr_write_ccc+0x4e>
			break;
		}
	}

	if (i == ccc->cfg_len) {
    666e:	686b      	ldr	r3, [r5, #4]
    6670:	429c      	cmp	r4, r3
    6672:	d12a      	bne.n	66ca <bt_gatt_attr_write_ccc+0x9e>
    6674:	2400      	movs	r4, #0
    6676:	220c      	movs	r2, #12
    6678:	e009      	b.n	668e <bt_gatt_attr_write_ccc+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	value = sys_get_le16(buf);

	for (i = 0; i < ccc->cfg_len; i++) {
    667a:	3401      	adds	r4, #1
    667c:	e7eb      	b.n	6656 <bt_gatt_attr_write_ccc+0x2a>
    667e:	0017      	movs	r7, r2
    6680:	4367      	muls	r7, r4
	}

	if (i == ccc->cfg_len) {
		for (i = 0; i < ccc->cfg_len; i++) {
			/* Check for unused configuration */
			if (ccc->cfg[i].valid) {
    6682:	6829      	ldr	r1, [r5, #0]
    6684:	19c8      	adds	r0, r1, r7
    6686:	7a81      	ldrb	r1, [r0, #10]
    6688:	2900      	cmp	r1, #0
    668a:	d003      	beq.n	6694 <bt_gatt_attr_write_ccc+0x68>
			break;
		}
	}

	if (i == ccc->cfg_len) {
		for (i = 0; i < ccc->cfg_len; i++) {
    668c:	3401      	adds	r4, #1
    668e:	429c      	cmp	r4, r3
    6690:	d1f5      	bne.n	667e <bt_gatt_attr_write_ccc+0x52>
    6692:	e00e      	b.n	66b2 <bt_gatt_attr_write_ccc+0x86>
			/* Check for unused configuration */
			if (ccc->cfg[i].valid) {
				continue;
			}

			bt_addr_le_copy(&ccc->cfg[i].peer, &conn->le.dst);
    6694:	9904      	ldr	r1, [sp, #16]
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    6696:	2207      	movs	r2, #7
    6698:	3154      	adds	r1, #84	; 0x54
    669a:	f7fa fe63 	bl	1364 <memcpy>

			if (value) {
    669e:	9b03      	ldr	r3, [sp, #12]
    66a0:	2b00      	cmp	r3, #0
    66a2:	d003      	beq.n	66ac <bt_gatt_attr_write_ccc+0x80>
				ccc->cfg[i].valid = true;
    66a4:	682b      	ldr	r3, [r5, #0]
    66a6:	19df      	adds	r7, r3, r7
    66a8:	2301      	movs	r3, #1
    66aa:	72bb      	strb	r3, [r7, #10]
			}

			break;
		}

		if (i == ccc->cfg_len) {
    66ac:	686b      	ldr	r3, [r5, #4]
    66ae:	429c      	cmp	r4, r3
    66b0:	d115      	bne.n	66de <bt_gatt_attr_write_ccc+0xb2>
			BT_WARN("No space to store CCC cfg");
    66b2:	4b16      	ldr	r3, [pc, #88]	; (670c <bt_gatt_attr_write_ccc+0xe0>)
    66b4:	4a16      	ldr	r2, [pc, #88]	; (6710 <bt_gatt_attr_write_ccc+0xe4>)
    66b6:	9301      	str	r3, [sp, #4]
    66b8:	4b16      	ldr	r3, [pc, #88]	; (6714 <bt_gatt_attr_write_ccc+0xe8>)
    66ba:	4917      	ldr	r1, [pc, #92]	; (6718 <bt_gatt_attr_write_ccc+0xec>)
    66bc:	9300      	str	r3, [sp, #0]
    66be:	4817      	ldr	r0, [pc, #92]	; (671c <bt_gatt_attr_write_ccc+0xf0>)
    66c0:	4b17      	ldr	r3, [pc, #92]	; (6720 <bt_gatt_attr_write_ccc+0xf4>)
    66c2:	f7fb f851 	bl	1768 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    66c6:	2611      	movs	r6, #17
    66c8:	e01c      	b.n	6704 <bt_gatt_attr_write_ccc+0xd8>
		}
	} else if (!value) {
    66ca:	9b03      	ldr	r3, [sp, #12]
    66cc:	2b00      	cmp	r3, #0
    66ce:	d106      	bne.n	66de <bt_gatt_attr_write_ccc+0xb2>
		/* free existing configuration for default value */
		ccc->cfg[i].valid = false;
    66d0:	330c      	adds	r3, #12
    66d2:	4363      	muls	r3, r4
    66d4:	682a      	ldr	r2, [r5, #0]
    66d6:	18d3      	adds	r3, r2, r3
    66d8:	466a      	mov	r2, sp
    66da:	7b12      	ldrb	r2, [r2, #12]
    66dc:	729a      	strb	r2, [r3, #10]
	}

	ccc->cfg[i].value = value;
    66de:	230c      	movs	r3, #12
    66e0:	435c      	muls	r4, r3
    66e2:	682b      	ldr	r3, [r5, #0]

	BT_DBG("handle 0x%04x value %u", attr->handle, ccc->cfg[i].value);

	/* Update cfg if don't match */
	if (ccc->cfg[i].value != ccc->value) {
    66e4:	9a03      	ldr	r2, [sp, #12]
	} else if (!value) {
		/* free existing configuration for default value */
		ccc->cfg[i].valid = false;
	}

	ccc->cfg[i].value = value;
    66e6:	191c      	adds	r4, r3, r4
    66e8:	466b      	mov	r3, sp
    66ea:	899b      	ldrh	r3, [r3, #12]
    66ec:	8123      	strh	r3, [r4, #8]

	BT_DBG("handle 0x%04x value %u", attr->handle, ccc->cfg[i].value);

	/* Update cfg if don't match */
	if (ccc->cfg[i].value != ccc->value) {
    66ee:	892b      	ldrh	r3, [r5, #8]
    66f0:	4293      	cmp	r3, r2
    66f2:	d008      	beq.n	6706 <bt_gatt_attr_write_ccc+0xda>
		gatt_ccc_changed(attr, ccc);
    66f4:	0029      	movs	r1, r5
    66f6:	9805      	ldr	r0, [sp, #20]
    66f8:	f7ff ff6e 	bl	65d8 <gatt_ccc_changed>
    66fc:	e003      	b.n	6706 <bt_gatt_attr_write_ccc+0xda>
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	if (offset > sizeof(u16_t)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    66fe:	2607      	movs	r6, #7
    6700:	e000      	b.n	6704 <bt_gatt_attr_write_ccc+0xd8>
	}

	if (offset + len > sizeof(u16_t)) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    6702:	260d      	movs	r6, #13
    6704:	4276      	negs	r6, r6
	if (ccc->cfg[i].value != ccc->value) {
		gatt_ccc_changed(attr, ccc);
	}

	return len;
}
    6706:	0030      	movs	r0, r6
    6708:	b007      	add	sp, #28
    670a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    670c:	000145b0 	.word	0x000145b0
    6710:	000145bd 	.word	0x000145bd
    6714:	000145fb 	.word	0x000145fb
    6718:	00014577 	.word	0x00014577
    671c:	00015295 	.word	0x00015295
    6720:	00016baa 	.word	0x00016baa

00006724 <connected_cb>:
{
	return bt_att_get_mtu(conn);
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6726:	4b12      	ldr	r3, [pc, #72]	; (6770 <connected_cb+0x4c>)
    6728:	6882      	ldr	r2, [r0, #8]
{
	return bt_att_get_mtu(conn);
}

static u8_t connected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    672a:	0007      	movs	r7, r0
    672c:	9101      	str	r1, [sp, #4]
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    672e:	429a      	cmp	r2, r3
    6730:	d11b      	bne.n	676a <connected_cb+0x46>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6732:	68c5      	ldr	r5, [r0, #12]

	/* If already enabled skip */
	if (ccc->value) {
    6734:	892c      	ldrh	r4, [r5, #8]
    6736:	2c00      	cmp	r4, #0
    6738:	d117      	bne.n	676a <connected_cb+0x46>
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    673a:	686b      	ldr	r3, [r5, #4]
    673c:	429c      	cmp	r4, r3
    673e:	d214      	bcs.n	676a <connected_cb+0x46>
    6740:	260c      	movs	r6, #12
    6742:	4366      	muls	r6, r4
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6744:	682b      	ldr	r3, [r5, #0]
    6746:	9801      	ldr	r0, [sp, #4]
    6748:	1999      	adds	r1, r3, r6
    674a:	f7fe f91f 	bl	498c <bt_conn_addr_le_cmp>
    674e:	2800      	cmp	r0, #0
    6750:	d109      	bne.n	6766 <connected_cb+0x42>
			continue;
		}

		if (ccc->cfg[i].value) {
    6752:	682b      	ldr	r3, [r5, #0]
    6754:	199e      	adds	r6, r3, r6
    6756:	8933      	ldrh	r3, [r6, #8]
    6758:	2b00      	cmp	r3, #0
    675a:	d004      	beq.n	6766 <connected_cb+0x42>
			gatt_ccc_changed(attr, ccc);
    675c:	0029      	movs	r1, r5
    675e:	0038      	movs	r0, r7
    6760:	f7ff ff3a 	bl	65d8 <gatt_ccc_changed>
    6764:	e001      	b.n	676a <connected_cb+0x46>
	/* If already enabled skip */
	if (ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    6766:	3401      	adds	r4, #1
    6768:	e7e7      	b.n	673a <connected_cb+0x16>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    676a:	2001      	movs	r0, #1
    676c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    676e:	46c0      	nop			; (mov r8, r8)
    6770:	0000662d 	.word	0x0000662d

00006774 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    6774:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6776:	4a22      	ldr	r2, [pc, #136]	; (6800 <gatt_register+0x8c>)
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    6778:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;

	if (sys_slist_is_empty(&db)) {
    677a:	6813      	ldr	r3, [r2, #0]
static int gatt_register(struct bt_gatt_service *svc)
{
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
	u16_t count = svc->attr_count;
    677c:	8881      	ldrh	r1, [r0, #4]

	if (sys_slist_is_empty(&db)) {
    677e:	2b00      	cmp	r3, #0
    6780:	d018      	beq.n	67b4 <gatt_register+0x40>
    6782:	6853      	ldr	r3, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    6784:	2b00      	cmp	r3, #0
    6786:	d036      	beq.n	67f6 <gatt_register+0x82>
	handle = last->attrs[last->attr_count - 1].handle;
    6788:	3b08      	subs	r3, #8
    678a:	001d      	movs	r5, r3
    678c:	682e      	ldr	r6, [r5, #0]
    678e:	2514      	movs	r5, #20
    6790:	889b      	ldrh	r3, [r3, #4]
    6792:	436b      	muls	r3, r5
    6794:	18f3      	adds	r3, r6, r3
    6796:	3b14      	subs	r3, #20
    6798:	8a1b      	ldrh	r3, [r3, #16]
    679a:	e00b      	b.n	67b4 <gatt_register+0x40>

populate:
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
    679c:	2900      	cmp	r1, #0
    679e:	d01c      	beq.n	67da <gatt_register+0x66>
		if (!attrs->handle) {
    67a0:	8a25      	ldrh	r5, [r4, #16]
    67a2:	2d00      	cmp	r5, #0
    67a4:	d109      	bne.n	67ba <gatt_register+0x46>
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
    67a6:	3301      	adds	r3, #1
    67a8:	b29d      	uxth	r5, r3
    67aa:	8225      	strh	r5, [r4, #16]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
	handle = last->attrs[last->attr_count - 1].handle;

populate:
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
    67ac:	002b      	movs	r3, r5
    67ae:	3901      	subs	r1, #1
    67b0:	3414      	adds	r4, #20
    67b2:	b289      	uxth	r1, r1
    67b4:	2c00      	cmp	r4, #0
    67b6:	d1f1      	bne.n	679c <gatt_register+0x28>
    67b8:	e00f      	b.n	67da <gatt_register+0x66>
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    67ba:	42ab      	cmp	r3, r5
    67bc:	d3f6      	bcc.n	67ac <gatt_register+0x38>
			/* Use existing handle if valid */
			handle = attrs->handle;
		} else {
			/* Service has conflicting handles */
			BT_ERR("Unable to register handle 0x%04x",
    67be:	4b11      	ldr	r3, [pc, #68]	; (6804 <gatt_register+0x90>)
    67c0:	9501      	str	r5, [sp, #4]
    67c2:	9302      	str	r3, [sp, #8]
    67c4:	4b10      	ldr	r3, [pc, #64]	; (6808 <gatt_register+0x94>)
    67c6:	4a11      	ldr	r2, [pc, #68]	; (680c <gatt_register+0x98>)
    67c8:	9300      	str	r3, [sp, #0]
    67ca:	4911      	ldr	r1, [pc, #68]	; (6810 <gatt_register+0x9c>)
    67cc:	4b11      	ldr	r3, [pc, #68]	; (6814 <gatt_register+0xa0>)
    67ce:	4812      	ldr	r0, [pc, #72]	; (6818 <gatt_register+0xa4>)
    67d0:	f7fa ffca 	bl	1768 <printk>
			       attrs->handle);
			return -EINVAL;
    67d4:	2016      	movs	r0, #22
    67d6:	4240      	negs	r0, r0
    67d8:	e00f      	b.n	67fa <gatt_register+0x86>
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    67da:	2300      	movs	r3, #0
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    67dc:	0001      	movs	r1, r0
    67de:	6083      	str	r3, [r0, #8]

	if (!list->tail) {
    67e0:	6850      	ldr	r0, [r2, #4]
    67e2:	3108      	adds	r1, #8
    67e4:	4298      	cmp	r0, r3
    67e6:	d102      	bne.n	67ee <gatt_register+0x7a>
		list->tail = node;
    67e8:	6051      	str	r1, [r2, #4]
		list->head = node;
    67ea:	6011      	str	r1, [r2, #0]
    67ec:	e005      	b.n	67fa <gatt_register+0x86>
	} else {
		list->tail->next = node;
    67ee:	6001      	str	r1, [r0, #0]
		list->tail = node;
    67f0:	6051      	str	r1, [r2, #4]

	return 0;
    67f2:	0018      	movs	r0, r3
    67f4:	e001      	b.n	67fa <gatt_register+0x86>
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
	handle = last->attrs[last->attr_count - 1].handle;
    67f6:	681b      	ldr	r3, [r3, #0]
    67f8:	deff      	udf	#255	; 0xff
	}

	sys_slist_append(&db, &svc->node);

	return 0;
}
    67fa:	b004      	add	sp, #16
    67fc:	bd70      	pop	{r4, r5, r6, pc}
    67fe:	46c0      	nop			; (mov r8, r8)
    6800:	20000d34 	.word	0x20000d34
    6804:	000145b0 	.word	0x000145b0
    6808:	000145b5 	.word	0x000145b5
    680c:	00014570 	.word	0x00014570
    6810:	00014577 	.word	0x00014577
    6814:	00016b84 	.word	0x00016b84
    6818:	000152bf 	.word	0x000152bf

0000681c <gatt_notify>:
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len)
{
    681c:	b5f0      	push	{r4, r5, r6, r7, lr}
    681e:	b087      	sub	sp, #28
    6820:	9104      	str	r1, [sp, #16]
    6822:	9205      	str	r2, [sp, #20]
	struct net_buf *buf;
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    6824:	211b      	movs	r1, #27
    6826:	1c9a      	adds	r2, r3, #2
	struct bt_gatt_indicate_params *params;
};

static int gatt_notify(struct bt_conn *conn, u16_t handle, const void *data,
		       size_t len)
{
    6828:	0007      	movs	r7, r0
    682a:	001e      	movs	r6, r3
	struct net_buf *buf;
	struct bt_att_notify *nfy;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    682c:	f7ff fa42 	bl	5cb4 <bt_att_create_pdu>
    6830:	1e05      	subs	r5, r0, #0
	if (!buf) {
    6832:	d10c      	bne.n	684e <gatt_notify+0x32>
		BT_WARN("No buffer available to send notification");
    6834:	4b16      	ldr	r3, [pc, #88]	; (6890 <gatt_notify+0x74>)
    6836:	4a17      	ldr	r2, [pc, #92]	; (6894 <gatt_notify+0x78>)
    6838:	9301      	str	r3, [sp, #4]
    683a:	4b17      	ldr	r3, [pc, #92]	; (6898 <gatt_notify+0x7c>)
    683c:	4917      	ldr	r1, [pc, #92]	; (689c <gatt_notify+0x80>)
    683e:	9300      	str	r3, [sp, #0]
    6840:	4817      	ldr	r0, [pc, #92]	; (68a0 <gatt_notify+0x84>)
    6842:	4b18      	ldr	r3, [pc, #96]	; (68a4 <gatt_notify+0x88>)
    6844:	f7fa ff90 	bl	1768 <printk>
    6848:	200c      	movs	r0, #12
    684a:	4240      	negs	r0, r0
    684c:	e01d      	b.n	688a <gatt_notify+0x6e>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    684e:	0003      	movs	r3, r0
    6850:	3308      	adds	r3, #8
    6852:	2102      	movs	r1, #2
    6854:	0018      	movs	r0, r3
    6856:	9303      	str	r3, [sp, #12]
    6858:	f00b ff54 	bl	12704 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    685c:	466b      	mov	r3, sp
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
    685e:	0004      	movs	r4, r0
	nfy->handle = sys_cpu_to_le16(handle);
    6860:	7c1b      	ldrb	r3, [r3, #16]

	net_buf_add(buf, len);
    6862:	0031      	movs	r1, r6
	}

	BT_DBG("conn %p handle 0x%04x", conn, handle);

	nfy = net_buf_add(buf, sizeof(*nfy));
	nfy->handle = sys_cpu_to_le16(handle);
    6864:	7003      	strb	r3, [r0, #0]
    6866:	9b04      	ldr	r3, [sp, #16]
    6868:	0a1b      	lsrs	r3, r3, #8
    686a:	7043      	strb	r3, [r0, #1]

	net_buf_add(buf, len);
    686c:	9803      	ldr	r0, [sp, #12]
    686e:	f00b ff49 	bl	12704 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    6872:	0032      	movs	r2, r6
    6874:	9905      	ldr	r1, [sp, #20]
    6876:	1ca0      	adds	r0, r4, #2
    6878:	f7fa fd74 	bl	1364 <memcpy>
    687c:	0038      	movs	r0, r7
    687e:	2300      	movs	r3, #0
    6880:	002a      	movs	r2, r5
    6882:	2104      	movs	r1, #4
    6884:	f7fe fb90 	bl	4fa8 <bt_l2cap_send_cb>

	bt_l2cap_send(conn, BT_L2CAP_CID_ATT, buf);

	return 0;
    6888:	2000      	movs	r0, #0
}
    688a:	b007      	add	sp, #28
    688c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    688e:	46c0      	nop			; (mov r8, r8)
    6890:	000145b0 	.word	0x000145b0
    6894:	000145bd 	.word	0x000145bd
    6898:	000145fb 	.word	0x000145fb
    689c:	00014577 	.word	0x00014577
    68a0:	000152f0 	.word	0x000152f0
    68a4:	00016bd8 	.word	0x00016bd8

000068a8 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    68a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    68aa:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    68ac:	b087      	sub	sp, #28
    68ae:	000c      	movs	r4, r1
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    68b0:	3202      	adds	r2, #2
    68b2:	211d      	movs	r1, #29
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    68b4:	0007      	movs	r7, r0
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    68b6:	f7ff f9fd 	bl	5cb4 <bt_att_create_pdu>
    68ba:	1e06      	subs	r6, r0, #0
				sizeof(*ind) + params->len);
	if (!buf) {
    68bc:	d10c      	bne.n	68d8 <gatt_indicate+0x30>
		BT_WARN("No buffer available to send indication");
    68be:	4b20      	ldr	r3, [pc, #128]	; (6940 <gatt_indicate+0x98>)
    68c0:	4a20      	ldr	r2, [pc, #128]	; (6944 <gatt_indicate+0x9c>)
    68c2:	9301      	str	r3, [sp, #4]
    68c4:	4b20      	ldr	r3, [pc, #128]	; (6948 <gatt_indicate+0xa0>)
    68c6:	4921      	ldr	r1, [pc, #132]	; (694c <gatt_indicate+0xa4>)
    68c8:	9300      	str	r3, [sp, #0]
    68ca:	4821      	ldr	r0, [pc, #132]	; (6950 <gatt_indicate+0xa8>)
    68cc:	4b21      	ldr	r3, [pc, #132]	; (6954 <gatt_indicate+0xac>)
    68ce:	f7fa ff4b 	bl	1768 <printk>
    68d2:	200c      	movs	r0, #12
    68d4:	4240      	negs	r0, r0
    68d6:	e031      	b.n	693c <gatt_indicate+0x94>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
    68d8:	0003      	movs	r3, r0
    68da:	3308      	adds	r3, #8
    68dc:	2102      	movs	r1, #2
    68de:	0018      	movs	r0, r3
    68e0:	9305      	str	r3, [sp, #20]
    68e2:	f00b ff0f 	bl	12704 <net_buf_simple_add>
    68e6:	0005      	movs	r5, r0
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    68e8:	69a3      	ldr	r3, [r4, #24]
    68ea:	7c1a      	ldrb	r2, [r3, #16]
    68ec:	7002      	strb	r2, [r0, #0]
    68ee:	7c5b      	ldrb	r3, [r3, #17]
    68f0:	7043      	strb	r3, [r0, #1]

	net_buf_add(buf, params->len);
    68f2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    68f4:	9805      	ldr	r0, [sp, #20]
    68f6:	f00b ff05 	bl	12704 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    68fa:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    68fc:	6a21      	ldr	r1, [r4, #32]
    68fe:	1ca8      	adds	r0, r5, #2
    6900:	f7fa fd30 	bl	1364 <memcpy>

	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
		req->func = func;
    6904:	4b14      	ldr	r3, [pc, #80]	; (6958 <gatt_indicate+0xb0>)
	int err;

	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
    6906:	6126      	str	r6, [r4, #16]
		req->func = func;
    6908:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    690a:	2300      	movs	r3, #0

		err = bt_att_req_send(conn, req);
    690c:	0021      	movs	r1, r4
	if (params) {
		struct bt_att_req *req = params;

		req->buf = buf;
		req->func = func;
		req->destroy = destroy;
    690e:	60a3      	str	r3, [r4, #8]

		err = bt_att_req_send(conn, req);
    6910:	0038      	movs	r0, r7
    6912:	f7ff fe37 	bl	6584 <bt_att_req_send>
    6916:	0004      	movs	r4, r0
	} else {
		err = bt_att_send(conn, buf);
	}

	if (err) {
    6918:	2000      	movs	r0, #0
    691a:	4284      	cmp	r4, r0
    691c:	d00e      	beq.n	693c <gatt_indicate+0x94>
		BT_ERR("Error sending ATT PDU: %d", err);
    691e:	4b08      	ldr	r3, [pc, #32]	; (6940 <gatt_indicate+0x98>)
    6920:	4a0e      	ldr	r2, [pc, #56]	; (695c <gatt_indicate+0xb4>)
    6922:	9302      	str	r3, [sp, #8]
    6924:	4b0e      	ldr	r3, [pc, #56]	; (6960 <gatt_indicate+0xb8>)
    6926:	4909      	ldr	r1, [pc, #36]	; (694c <gatt_indicate+0xa4>)
    6928:	9300      	str	r3, [sp, #0]
    692a:	9401      	str	r4, [sp, #4]
    692c:	4b0d      	ldr	r3, [pc, #52]	; (6964 <gatt_indicate+0xbc>)
    692e:	480e      	ldr	r0, [pc, #56]	; (6968 <gatt_indicate+0xc0>)
    6930:	f7fa ff1a 	bl	1768 <printk>
		net_buf_unref(buf);
    6934:	0030      	movs	r0, r6
    6936:	f00b fec3 	bl	126c0 <net_buf_unref>
    693a:	0020      	movs	r0, r4

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    693c:	b007      	add	sp, #28
    693e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6940:	000145b0 	.word	0x000145b0
    6944:	000145bd 	.word	0x000145bd
    6948:	000145fb 	.word	0x000145fb
    694c:	00014577 	.word	0x00014577
    6950:	00015329 	.word	0x00015329
    6954:	00016b9c 	.word	0x00016b9c
    6958:	0000660f 	.word	0x0000660f
    695c:	00014570 	.word	0x00014570
    6960:	000145b5 	.word	0x000145b5
    6964:	00016b92 	.word	0x00016b92
    6968:	00015360 	.word	0x00015360

0000696c <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    696c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    696e:	2600      	movs	r6, #0

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6970:	b085      	sub	sp, #20
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    6972:	ab02      	add	r3, sp, #8
    6974:	aa02      	add	r2, sp, #8
    6976:	701e      	strb	r6, [r3, #0]
    6978:	4b26      	ldr	r3, [pc, #152]	; (6a14 <notify_cb+0xa8>)

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    697a:	0005      	movs	r5, r0
    697c:	000c      	movs	r4, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    697e:	6800      	ldr	r0, [r0, #0]
    6980:	0011      	movs	r1, r2
    6982:	8053      	strh	r3, [r2, #2]
    6984:	f7fb fbee 	bl	2164 <bt_uuid_cmp>
    6988:	42b0      	cmp	r0, r6
    698a:	d00a      	beq.n	69a2 <notify_cb+0x36>
		/* Stop if we reach the next characteristic */
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    698c:	4b22      	ldr	r3, [pc, #136]	; (6a18 <notify_cb+0xac>)
    698e:	a903      	add	r1, sp, #12
    6990:	6828      	ldr	r0, [r5, #0]
    6992:	804b      	strh	r3, [r1, #2]
    6994:	700e      	strb	r6, [r1, #0]
    6996:	f7fb fbe5 	bl	2164 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    699a:	1e43      	subs	r3, r0, #1
    699c:	4198      	sbcs	r0, r3
    699e:	b2c0      	uxtb	r0, r0
    69a0:	e036      	b.n	6a10 <notify_cb+0xa4>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    69a2:	4b1e      	ldr	r3, [pc, #120]	; (6a1c <notify_cb+0xb0>)
    69a4:	68aa      	ldr	r2, [r5, #8]
    69a6:	429a      	cmp	r2, r3
    69a8:	d001      	beq.n	69ae <notify_cb+0x42>
		return BT_GATT_ITER_CONTINUE;
    69aa:	2001      	movs	r0, #1
    69ac:	e030      	b.n	6a10 <notify_cb+0xa4>
	}

	ccc = attr->user_data;

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    69ae:	0007      	movs	r7, r0
	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    69b0:	68ee      	ldr	r6, [r5, #12]

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    69b2:	6873      	ldr	r3, [r6, #4]
    69b4:	429f      	cmp	r7, r3
    69b6:	d2f8      	bcs.n	69aa <notify_cb+0x3e>
		struct bt_conn *conn;
		int err;

		if (ccc->value != data->type) {
    69b8:	8932      	ldrh	r2, [r6, #8]
    69ba:	88a3      	ldrh	r3, [r4, #4]
    69bc:	429a      	cmp	r2, r3
    69be:	d125      	bne.n	6a0c <notify_cb+0xa0>
			continue;
		}

		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    69c0:	200c      	movs	r0, #12
    69c2:	4378      	muls	r0, r7
    69c4:	6833      	ldr	r3, [r6, #0]
    69c6:	1818      	adds	r0, r3, r0
    69c8:	f7fd fff8 	bl	49bc <bt_conn_lookup_addr_le>
    69cc:	1e05      	subs	r5, r0, #0
		if (!conn) {
    69ce:	d01d      	beq.n	6a0c <notify_cb+0xa0>
			continue;
		}

		if (conn->state != BT_CONN_CONNECTED) {
    69d0:	0003      	movs	r3, r0
    69d2:	3351      	adds	r3, #81	; 0x51
    69d4:	781b      	ldrb	r3, [r3, #0]
    69d6:	2b03      	cmp	r3, #3
    69d8:	d002      	beq.n	69e0 <notify_cb+0x74>
			bt_conn_unref(conn);
    69da:	f7fe f836 	bl	4a4a <bt_conn_unref>
    69de:	e015      	b.n	6a0c <notify_cb+0xa0>
			continue;
		}

		if (data->type == BT_GATT_CCC_INDICATE) {
    69e0:	88a3      	ldrh	r3, [r4, #4]
    69e2:	2b02      	cmp	r3, #2
    69e4:	d103      	bne.n	69ee <notify_cb+0x82>
			err = gatt_indicate(conn, data->params);
    69e6:	6961      	ldr	r1, [r4, #20]
    69e8:	f7ff ff5e 	bl	68a8 <gatt_indicate>
    69ec:	e005      	b.n	69fa <notify_cb+0x8e>
		} else {
			err = gatt_notify(conn, data->attr->handle, data->data,
    69ee:	68a2      	ldr	r2, [r4, #8]
    69f0:	8a23      	ldrh	r3, [r4, #16]
    69f2:	8a11      	ldrh	r1, [r2, #16]
    69f4:	68e2      	ldr	r2, [r4, #12]
    69f6:	f7ff ff11 	bl	681c <gatt_notify>
    69fa:	9001      	str	r0, [sp, #4]
					 data->len);
		}

		bt_conn_unref(conn);
    69fc:	0028      	movs	r0, r5
    69fe:	f7fe f824 	bl	4a4a <bt_conn_unref>
    6a02:	2000      	movs	r0, #0

		if (err < 0) {
    6a04:	9b01      	ldr	r3, [sp, #4]
    6a06:	4283      	cmp	r3, r0
    6a08:	db02      	blt.n	6a10 <notify_cb+0xa4>
			return BT_GATT_ITER_STOP;
		}

		data->err = 0;
    6a0a:	6020      	str	r0, [r4, #0]
	}

	ccc = attr->user_data;

	/* Notify all peers configured */
	for (i = 0; i < ccc->cfg_len; i++) {
    6a0c:	3701      	adds	r7, #1
    6a0e:	e7d0      	b.n	69b2 <notify_cb+0x46>

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    6a10:	b005      	add	sp, #20
    6a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a14:	00002902 	.word	0x00002902
    6a18:	00002803 	.word	0x00002803
    6a1c:	0000662d 	.word	0x0000662d

00006a20 <disconnected_cb>:

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6a22:	4b29      	ldr	r3, [pc, #164]	; (6ac8 <disconnected_cb+0xa8>)
    6a24:	6882      	ldr	r2, [r0, #8]

	return BT_GATT_ITER_CONTINUE;
}

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    6a26:	0007      	movs	r7, r0
    6a28:	9101      	str	r1, [sp, #4]
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    6a2a:	429a      	cmp	r2, r3
    6a2c:	d14a      	bne.n	6ac4 <disconnected_cb+0xa4>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6a2e:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    6a30:	2600      	movs	r6, #0
    6a32:	8923      	ldrh	r3, [r4, #8]
    6a34:	2b00      	cmp	r3, #0
    6a36:	d045      	beq.n	6ac4 <disconnected_cb+0xa4>
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    6a38:	6863      	ldr	r3, [r4, #4]
    6a3a:	429e      	cmp	r6, r3
    6a3c:	d236      	bcs.n	6aac <disconnected_cb+0x8c>
    6a3e:	250c      	movs	r5, #12
    6a40:	4375      	muls	r5, r6
		/* Ignore configurations with disabled value */
		if (!ccc->cfg[i].value) {
    6a42:	6823      	ldr	r3, [r4, #0]
    6a44:	1959      	adds	r1, r3, r5
    6a46:	890b      	ldrh	r3, [r1, #8]
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d02d      	beq.n	6aa8 <disconnected_cb+0x88>
			continue;
		}

		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6a4c:	9801      	ldr	r0, [sp, #4]
    6a4e:	f7fd ff9d 	bl	498c <bt_conn_addr_le_cmp>
    6a52:	2800      	cmp	r0, #0
    6a54:	d010      	beq.n	6a78 <disconnected_cb+0x58>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    6a56:	6823      	ldr	r3, [r4, #0]
    6a58:	1958      	adds	r0, r3, r5
    6a5a:	f7fd ffaf 	bl	49bc <bt_conn_lookup_addr_le>
			if (tmp) {
    6a5e:	2800      	cmp	r0, #0
    6a60:	d022      	beq.n	6aa8 <disconnected_cb+0x88>
				if (tmp->state == BT_CONN_CONNECTED) {
    6a62:	0003      	movs	r3, r0
    6a64:	3351      	adds	r3, #81	; 0x51
    6a66:	781b      	ldrb	r3, [r3, #0]
    6a68:	2b03      	cmp	r3, #3
    6a6a:	d102      	bne.n	6a72 <disconnected_cb+0x52>
					bt_conn_unref(tmp);
    6a6c:	f7fd ffed 	bl	4a4a <bt_conn_unref>
    6a70:	e028      	b.n	6ac4 <disconnected_cb+0xa4>
					return BT_GATT_ITER_CONTINUE;
				}

				bt_conn_unref(tmp);
    6a72:	f7fd ffea 	bl	4a4a <bt_conn_unref>
    6a76:	e017      	b.n	6aa8 <disconnected_cb+0x88>
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6a78:	9b01      	ldr	r3, [sp, #4]
    6a7a:	3354      	adds	r3, #84	; 0x54
    6a7c:	0018      	movs	r0, r3
    6a7e:	9300      	str	r3, [sp, #0]
    6a80:	f7fd fa6c 	bl	3f5c <bt_addr_le_is_bonded>
    6a84:	6823      	ldr	r3, [r4, #0]
    6a86:	0001      	movs	r1, r0
				ccc->cfg[i].valid = false;
    6a88:	1958      	adds	r0, r3, r5

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    6a8a:	2900      	cmp	r1, #0
    6a8c:	d108      	bne.n	6aa0 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    6a8e:	7281      	strb	r1, [r0, #10]
				memset(&ccc->cfg[i].value, 0,
    6a90:	6823      	ldr	r3, [r4, #0]
    6a92:	2202      	movs	r2, #2
    6a94:	195d      	adds	r5, r3, r5
    6a96:	0028      	movs	r0, r5
    6a98:	3008      	adds	r0, #8
    6a9a:	f7fa fc8d 	bl	13b8 <memset>
    6a9e:	e003      	b.n	6aa8 <disconnected_cb+0x88>
    6aa0:	2207      	movs	r2, #7
    6aa2:	9900      	ldr	r1, [sp, #0]
    6aa4:	f7fa fc5e 	bl	1364 <memcpy>
	/* If already disabled skip */
	if (!ccc->value) {
		return BT_GATT_ITER_CONTINUE;
	}

	for (i = 0; i < ccc->cfg_len; i++) {
    6aa8:	3601      	adds	r6, #1
    6aaa:	e7c5      	b.n	6a38 <disconnected_cb+0x18>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    6aac:	0020      	movs	r0, r4
    6aae:	2202      	movs	r2, #2
    6ab0:	2100      	movs	r1, #0
    6ab2:	3008      	adds	r0, #8
    6ab4:	f7fa fc80 	bl	13b8 <memset>
	if (ccc->cfg_changed) {
    6ab8:	68e3      	ldr	r3, [r4, #12]
    6aba:	2b00      	cmp	r3, #0
    6abc:	d002      	beq.n	6ac4 <disconnected_cb+0xa4>
		ccc->cfg_changed(attr, ccc->value);
    6abe:	8921      	ldrh	r1, [r4, #8]
    6ac0:	0038      	movs	r0, r7
    6ac2:	4798      	blx	r3
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    6ac4:	2001      	movs	r0, #1
    6ac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6ac8:	0000662d 	.word	0x0000662d

00006acc <bt_gatt_init>:

	return 0;
}

void bt_gatt_init(void)
{
    6acc:	b510      	push	{r4, lr}
	/* Register mandatory services */
	gatt_register(&gap_svc);
    6ace:	4803      	ldr	r0, [pc, #12]	; (6adc <bt_gatt_init+0x10>)
    6ad0:	f7ff fe50 	bl	6774 <gatt_register>
	gatt_register(&gatt_svc);
    6ad4:	4802      	ldr	r0, [pc, #8]	; (6ae0 <bt_gatt_init+0x14>)
    6ad6:	f7ff fe4d 	bl	6774 <gatt_register>
}
    6ada:	bd10      	pop	{r4, pc}
    6adc:	20000504 	.word	0x20000504
    6ae0:	200004c8 	.word	0x200004c8

00006ae4 <bt_gatt_attr_read>:
}

ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			  void *buf, u16_t buf_len, u16_t offset,
			  const void *value, u16_t value_len)
{
    6ae4:	b510      	push	{r4, lr}
    6ae6:	0010      	movs	r0, r2
    6ae8:	aa02      	add	r2, sp, #8
    6aea:	8811      	ldrh	r1, [r2, #0]
    6aec:	aa04      	add	r2, sp, #16
    6aee:	8814      	ldrh	r4, [r2, #0]
	u16_t len;

	if (offset > value_len) {
    6af0:	42a1      	cmp	r1, r4
    6af2:	d80a      	bhi.n	6b0a <bt_gatt_attr_read+0x26>
    6af4:	1a64      	subs	r4, r4, r1
    6af6:	429c      	cmp	r4, r3
    6af8:	dd00      	ble.n	6afc <bt_gatt_attr_read+0x18>
    6afa:	001c      	movs	r4, r3
	len = min(buf_len, value_len - offset);

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, value + offset, len);
    6afc:	9b03      	ldr	r3, [sp, #12]
    6afe:	b2a4      	uxth	r4, r4
    6b00:	1859      	adds	r1, r3, r1
    6b02:	0022      	movs	r2, r4
    6b04:	f7fa fc2e 	bl	1364 <memcpy>

	return len;
    6b08:	e001      	b.n	6b0e <bt_gatt_attr_read+0x2a>
			  const void *value, u16_t value_len)
{
	u16_t len;

	if (offset > value_len) {
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6b0a:	2407      	movs	r4, #7
    6b0c:	4264      	negs	r4, r4
	       len);

	memcpy(buf, value + offset, len);

	return len;
}
    6b0e:	0020      	movs	r0, r4
    6b10:	bd10      	pop	{r4, pc}
	...

00006b14 <read_appearance>:
}

static ssize_t read_appearance(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    6b14:	b570      	push	{r4, r5, r6, lr}
    6b16:	b086      	sub	sp, #24
    6b18:	ac0a      	add	r4, sp, #40	; 0x28
    6b1a:	8825      	ldrh	r5, [r4, #0]
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    6b1c:	2416      	movs	r4, #22
    6b1e:	4e05      	ldr	r6, [pc, #20]	; (6b34 <read_appearance+0x20>)
    6b20:	446c      	add	r4, sp
    6b22:	8026      	strh	r6, [r4, #0]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    6b24:	2602      	movs	r6, #2
    6b26:	9401      	str	r4, [sp, #4]
    6b28:	9602      	str	r6, [sp, #8]
    6b2a:	9500      	str	r5, [sp, #0]
    6b2c:	f7ff ffda 	bl	6ae4 <bt_gatt_attr_read>
				 sizeof(appearance));
}
    6b30:	b006      	add	sp, #24
    6b32:	bd70      	pop	{r4, r5, r6, pc}
    6b34:	00000341 	.word	0x00000341

00006b38 <read_name>:

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    6b38:	b5f0      	push	{r4, r5, r6, r7, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    6b3a:	4c0b      	ldr	r4, [pc, #44]	; (6b68 <read_name+0x30>)

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    6b3c:	b087      	sub	sp, #28
    6b3e:	0005      	movs	r5, r0
    6b40:	001e      	movs	r6, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    6b42:	0020      	movs	r0, r4

static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
    6b44:	ab0c      	add	r3, sp, #48	; 0x30
    6b46:	881f      	ldrh	r7, [r3, #0]
    6b48:	9104      	str	r1, [sp, #16]
    6b4a:	9205      	str	r2, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
				 strlen(gap_name));
    6b4c:	f7fa fbcd 	bl	12ea <strlen>
static sys_slist_t db;

static ssize_t read_name(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    6b50:	b280      	uxth	r0, r0
    6b52:	9002      	str	r0, [sp, #8]
    6b54:	9401      	str	r4, [sp, #4]
    6b56:	9700      	str	r7, [sp, #0]
    6b58:	0033      	movs	r3, r6
    6b5a:	9a05      	ldr	r2, [sp, #20]
    6b5c:	9904      	ldr	r1, [sp, #16]
    6b5e:	0028      	movs	r0, r5
    6b60:	f7ff ffc0 	bl	6ae4 <bt_gatt_attr_read>
				 strlen(gap_name));
}
    6b64:	b007      	add	sp, #28
    6b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b68:	00014326 	.word	0x00014326

00006b6c <bt_gatt_attr_read_service>:
}

ssize_t bt_gatt_attr_read_service(struct bt_conn *conn,
				  const struct bt_gatt_attr *attr,
				  void *buf, u16_t len, u16_t offset)
{
    6b6c:	b570      	push	{r4, r5, r6, lr}
    6b6e:	b086      	sub	sp, #24
    6b70:	ac0a      	add	r4, sp, #40	; 0x28
    6b72:	8825      	ldrh	r5, [r4, #0]
	struct bt_uuid *uuid = attr->user_data;
    6b74:	68cc      	ldr	r4, [r1, #12]

	if (uuid->type == BT_UUID_TYPE_16) {
    6b76:	7826      	ldrb	r6, [r4, #0]
    6b78:	2e00      	cmp	r6, #0
    6b7a:	d107      	bne.n	6b8c <bt_gatt_attr_read_service+0x20>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    6b7c:	8864      	ldrh	r4, [r4, #2]
    6b7e:	3616      	adds	r6, #22
    6b80:	446e      	add	r6, sp
    6b82:	8034      	strh	r4, [r6, #0]

		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    6b84:	2402      	movs	r4, #2
    6b86:	9601      	str	r6, [sp, #4]
    6b88:	9402      	str	r4, [sp, #8]
    6b8a:	e003      	b.n	6b94 <bt_gatt_attr_read_service+0x28>
					 &uuid16, 2);
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    6b8c:	2610      	movs	r6, #16
				 BT_UUID_128(uuid)->val, 16);
    6b8e:	3401      	adds	r4, #1

		return bt_gatt_attr_read(conn, attr, buf, len, offset,
					 &uuid16, 2);
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    6b90:	9602      	str	r6, [sp, #8]
    6b92:	9401      	str	r4, [sp, #4]
    6b94:	9500      	str	r5, [sp, #0]
    6b96:	f7ff ffa5 	bl	6ae4 <bt_gatt_attr_read>
				 BT_UUID_128(uuid)->val, 16);
}
    6b9a:	b006      	add	sp, #24
    6b9c:	bd70      	pop	{r4, r5, r6, pc}

00006b9e <bt_gatt_attr_read_ccc>:
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    6b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ba0:	0006      	movs	r6, r0
    6ba2:	000f      	movs	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    6ba4:	2400      	movs	r4, #0
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    6ba6:	b08b      	sub	sp, #44	; 0x2c
    6ba8:	9306      	str	r3, [sp, #24]
    6baa:	ab10      	add	r3, sp, #64	; 0x40
    6bac:	881b      	ldrh	r3, [r3, #0]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    6bae:	68cd      	ldr	r5, [r1, #12]
}

ssize_t bt_gatt_attr_read_ccc(struct bt_conn *conn,
			      const struct bt_gatt_attr *attr, void *buf,
			      u16_t len, u16_t offset)
{
    6bb0:	9205      	str	r2, [sp, #20]
    6bb2:	9307      	str	r3, [sp, #28]
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    6bb4:	686b      	ldr	r3, [r5, #4]
    6bb6:	429c      	cmp	r4, r3
    6bb8:	d215      	bcs.n	6be6 <bt_gatt_attr_read_ccc+0x48>
    6bba:	230c      	movs	r3, #12
    6bbc:	4363      	muls	r3, r4
    6bbe:	9304      	str	r3, [sp, #16]
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    6bc0:	9a04      	ldr	r2, [sp, #16]
    6bc2:	682b      	ldr	r3, [r5, #0]
    6bc4:	0030      	movs	r0, r6
    6bc6:	1899      	adds	r1, r3, r2
    6bc8:	f7fd fee0 	bl	498c <bt_conn_addr_le_cmp>
    6bcc:	2800      	cmp	r0, #0
    6bce:	d001      	beq.n	6bd4 <bt_gatt_attr_read_ccc+0x36>
{
	struct _bt_gatt_ccc *ccc = attr->user_data;
	u16_t value;
	size_t i;

	for (i = 0; i < ccc->cfg_len; i++) {
    6bd0:	3401      	adds	r4, #1
    6bd2:	e7ef      	b.n	6bb4 <bt_gatt_attr_read_ccc+0x16>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
			continue;
		}

		value = sys_cpu_to_le16(ccc->cfg[i].value);
    6bd4:	682a      	ldr	r2, [r5, #0]
    6bd6:	9b04      	ldr	r3, [sp, #16]
    6bd8:	4694      	mov	ip, r2
    6bda:	4463      	add	r3, ip
    6bdc:	891a      	ldrh	r2, [r3, #8]
    6bde:	2316      	movs	r3, #22
    6be0:	a904      	add	r1, sp, #16
    6be2:	185b      	adds	r3, r3, r1
    6be4:	801a      	strh	r2, [r3, #0]
    6be6:	2316      	movs	r3, #22
		break;
	}

	/* Default to disable if there is no cfg for the peer */
	if (i == ccc->cfg_len) {
    6be8:	686a      	ldr	r2, [r5, #4]
    6bea:	a904      	add	r1, sp, #16
    6bec:	185b      	adds	r3, r3, r1
    6bee:	4294      	cmp	r4, r2
    6bf0:	d101      	bne.n	6bf6 <bt_gatt_attr_read_ccc+0x58>
		value = 0x0000;
    6bf2:	2200      	movs	r2, #0
    6bf4:	801a      	strh	r2, [r3, #0]
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    6bf6:	2202      	movs	r2, #2
    6bf8:	9301      	str	r3, [sp, #4]
    6bfa:	9b07      	ldr	r3, [sp, #28]
    6bfc:	9202      	str	r2, [sp, #8]
    6bfe:	9300      	str	r3, [sp, #0]
    6c00:	9a05      	ldr	r2, [sp, #20]
    6c02:	9b06      	ldr	r3, [sp, #24]
    6c04:	0039      	movs	r1, r7
    6c06:	0030      	movs	r0, r6
    6c08:	f7ff ff6c 	bl	6ae4 <bt_gatt_attr_read>
				 sizeof(value));
}
    6c0c:	b00b      	add	sp, #44	; 0x2c
    6c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006c10 <bt_gatt_foreach_attr>:
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
}

void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
    6c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6c12:	9301      	str	r3, [sp, #4]
    6c14:	4b12      	ldr	r3, [pc, #72]	; (6c60 <bt_gatt_foreach_attr+0x50>)
    6c16:	0006      	movs	r6, r0
    6c18:	681b      	ldr	r3, [r3, #0]
    6c1a:	000f      	movs	r7, r1
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6c1c:	001c      	movs	r4, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
}

void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
    6c1e:	9200      	str	r2, [sp, #0]
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6c20:	3c08      	subs	r4, #8
    6c22:	2b00      	cmp	r3, #0
    6c24:	d01b      	beq.n	6c5e <bt_gatt_foreach_attr+0x4e>
    6c26:	2c00      	cmp	r4, #0
    6c28:	d019      	beq.n	6c5e <bt_gatt_foreach_attr+0x4e>
    6c2a:	2500      	movs	r5, #0
		int i;

		for (i = 0; i < svc->attr_count; i++) {
    6c2c:	88a3      	ldrh	r3, [r4, #4]
    6c2e:	429d      	cmp	r5, r3
    6c30:	da10      	bge.n	6c54 <bt_gatt_foreach_attr+0x44>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    6c32:	2014      	movs	r0, #20
    6c34:	4368      	muls	r0, r5
    6c36:	6823      	ldr	r3, [r4, #0]
    6c38:	1818      	adds	r0, r3, r0

			/* Check if attribute handle is within range */
			if (attr->handle < start_handle ||
    6c3a:	8a03      	ldrh	r3, [r0, #16]
    6c3c:	42b3      	cmp	r3, r6
    6c3e:	d201      	bcs.n	6c44 <bt_gatt_foreach_attr+0x34>
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
		int i;

		for (i = 0; i < svc->attr_count; i++) {
    6c40:	3501      	adds	r5, #1
    6c42:	e7f3      	b.n	6c2c <bt_gatt_foreach_attr+0x1c>
			struct bt_gatt_attr *attr = &svc->attrs[i];

			/* Check if attribute handle is within range */
			if (attr->handle < start_handle ||
    6c44:	42bb      	cmp	r3, r7
    6c46:	d8fb      	bhi.n	6c40 <bt_gatt_foreach_attr+0x30>
			    attr->handle > end_handle) {
				continue;
			}

			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    6c48:	9901      	ldr	r1, [sp, #4]
    6c4a:	9b00      	ldr	r3, [sp, #0]
    6c4c:	4798      	blx	r3
    6c4e:	2800      	cmp	r0, #0
    6c50:	d1f6      	bne.n	6c40 <bt_gatt_foreach_attr+0x30>
    6c52:	e004      	b.n	6c5e <bt_gatt_foreach_attr+0x4e>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node)
{
	return node->next;
    6c54:	68a4      	ldr	r4, [r4, #8]
void bt_gatt_foreach_attr(u16_t start_handle, u16_t end_handle,
			  bt_gatt_attr_func_t func, void *user_data)
{
	struct bt_gatt_service *svc;

	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    6c56:	2c00      	cmp	r4, #0
    6c58:	d001      	beq.n	6c5e <bt_gatt_foreach_attr+0x4e>
    6c5a:	3c08      	subs	r4, #8
    6c5c:	e7e3      	b.n	6c26 <bt_gatt_foreach_attr+0x16>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
				return;
			}
		}
	}
}
    6c5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    6c60:	20000d34 	.word	0x20000d34

00006c64 <bt_gatt_indicate.part.9>:
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);

	return nfy.err;
}

int bt_gatt_indicate(struct bt_conn *conn,
    6c64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if (conn) {
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
    6c66:	2339      	movs	r3, #57	; 0x39
	nfy.type = BT_GATT_CCC_INDICATE;
    6c68:	466a      	mov	r2, sp

	if (conn) {
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
    6c6a:	425b      	negs	r3, r3
    6c6c:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    6c6e:	333b      	adds	r3, #59	; 0x3b
    6c70:	8093      	strh	r3, [r2, #4]
	nfy.params = params;

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6c72:	6983      	ldr	r3, [r0, #24]
		return gatt_indicate(conn, params);
	}

	nfy.err = -ENOTCONN;
	nfy.type = BT_GATT_CCC_INDICATE;
	nfy.params = params;
    6c74:	9005      	str	r0, [sp, #20]

	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    6c76:	8a18      	ldrh	r0, [r3, #16]
    6c78:	4a03      	ldr	r2, [pc, #12]	; (6c88 <bt_gatt_indicate.part.9+0x24>)
    6c7a:	466b      	mov	r3, sp
    6c7c:	4903      	ldr	r1, [pc, #12]	; (6c8c <bt_gatt_indicate.part.9+0x28>)
    6c7e:	f7ff ffc7 	bl	6c10 <bt_gatt_foreach_attr>

	return nfy.err;
}
    6c82:	9800      	ldr	r0, [sp, #0]
    6c84:	b007      	add	sp, #28
    6c86:	bd00      	pop	{pc}
    6c88:	0000696d 	.word	0x0000696d
    6c8c:	0000ffff 	.word	0x0000ffff

00006c90 <sc_indicate.isra.10>:
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
}

static void sc_indicate(struct bt_gatt_attr *start, struct bt_gatt_attr *end)
    6c90:	b573      	push	{r0, r1, r4, r5, r6, lr}
{
	static struct bt_gatt_indicate_params params;
	u16_t sc_range[2];

	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
    6c92:	4c12      	ldr	r4, [pc, #72]	; (6cdc <sc_indicate.isra.10+0x4c>)
	BT_DBG("err 0x%02x", err);

	k_sem_give(&sc_sem);
}

static void sc_indicate(struct bt_gatt_attr *start, struct bt_gatt_attr *end)
    6c94:	0006      	movs	r6, r0
    6c96:	000d      	movs	r5, r1
{
	static struct bt_gatt_indicate_params params;
	u16_t sc_range[2];

	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
    6c98:	0020      	movs	r0, r4
    6c9a:	2100      	movs	r1, #0
    6c9c:	f00c fefa 	bl	13a94 <k_sem_take>
    6ca0:	2800      	cmp	r0, #0
    6ca2:	d004      	beq.n	6cae <sc_indicate.isra.10+0x1e>
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
    6ca4:	2101      	movs	r1, #1
    6ca6:	0020      	movs	r0, r4
    6ca8:	4249      	negs	r1, r1
    6caa:	f00c fef3 	bl	13a94 <k_sem_take>
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
    6cae:	8832      	ldrh	r2, [r6, #0]
    6cb0:	ab01      	add	r3, sp, #4
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    6cb2:	480b      	ldr	r0, [pc, #44]	; (6ce0 <sc_indicate.isra.10+0x50>)
	if (k_sem_take(&sc_sem, K_NO_WAIT)) {
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
    6cb4:	801a      	strh	r2, [r3, #0]
	sc_range[1] = sys_cpu_to_le16(end->handle);
    6cb6:	882a      	ldrh	r2, [r5, #0]

	params.attr = &gatt_attrs[2];
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
    6cb8:	6203      	str	r3, [r0, #32]
		BT_DBG("Service Changed indicating, waiting until complete...");
		k_sem_take(&sc_sem, K_FOREVER);
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);
    6cba:	805a      	strh	r2, [r3, #2]

	params.attr = &gatt_attrs[2];
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);
    6cbc:	2304      	movs	r3, #4
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    6cbe:	4a09      	ldr	r2, [pc, #36]	; (6ce4 <sc_indicate.isra.10+0x54>)
	params.func = sc_indicate_rsp;
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);
    6cc0:	8483      	strh	r3, [r0, #36]	; 0x24
	}

	sc_range[0] = sys_cpu_to_le16(start->handle);
	sc_range[1] = sys_cpu_to_le16(end->handle);

	params.attr = &gatt_attrs[2];
    6cc2:	3228      	adds	r2, #40	; 0x28
    6cc4:	6182      	str	r2, [r0, #24]
	params.func = sc_indicate_rsp;
    6cc6:	4a08      	ldr	r2, [pc, #32]	; (6ce8 <sc_indicate.isra.10+0x58>)
    6cc8:	61c2      	str	r2, [r0, #28]
    6cca:	f7ff ffcb 	bl	6c64 <bt_gatt_indicate.part.9>
	params.data = &sc_range[0];
	params.len = sizeof(sc_range);

	if (!bt_gatt_indicate(NULL, &params)) {
    6cce:	2800      	cmp	r0, #0
    6cd0:	d002      	beq.n	6cd8 <sc_indicate.isra.10+0x48>
		return;
	}

	k_sem_give(&sc_sem);
    6cd2:	0020      	movs	r0, r4
    6cd4:	f00c fea2 	bl	13a1c <k_sem_give>
}
    6cd8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    6cda:	46c0      	nop			; (mov r8, r8)
    6cdc:	200004d4 	.word	0x200004d4
    6ce0:	20000d3c 	.word	0x20000d3c
    6ce4:	200003d0 	.word	0x200003d0
    6ce8:	0000661d 	.word	0x0000661d

00006cec <bt_gatt_service_register>:

int bt_gatt_service_register(struct bt_gatt_service *svc)
{
    6cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    6cee:	6803      	ldr	r3, [r0, #0]
    6cf0:	2400      	movs	r4, #0

	k_sem_give(&sc_sem);
}

int bt_gatt_service_register(struct bt_gatt_service *svc)
{
    6cf2:	0005      	movs	r5, r0
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    6cf4:	6818      	ldr	r0, [r3, #0]
    6cf6:	466b      	mov	r3, sp
    6cf8:	701c      	strb	r4, [r3, #0]
    6cfa:	23c0      	movs	r3, #192	; 0xc0
    6cfc:	466a      	mov	r2, sp
    6cfe:	015b      	lsls	r3, r3, #5
    6d00:	4669      	mov	r1, sp
    6d02:	8053      	strh	r3, [r2, #2]
    6d04:	f7fb fa2e 	bl	2164 <bt_uuid_cmp>
    6d08:	42a0      	cmp	r0, r4
    6d0a:	d102      	bne.n	6d12 <bt_gatt_service_register+0x26>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
		return -EALREADY;
    6d0c:	2345      	movs	r3, #69	; 0x45
    6d0e:	425b      	negs	r3, r3
    6d10:	e018      	b.n	6d44 <bt_gatt_service_register+0x58>
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    6d12:	682b      	ldr	r3, [r5, #0]
    6d14:	a901      	add	r1, sp, #4
    6d16:	6818      	ldr	r0, [r3, #0]
    6d18:	4b0b      	ldr	r3, [pc, #44]	; (6d48 <bt_gatt_service_register+0x5c>)
    6d1a:	700c      	strb	r4, [r1, #0]
    6d1c:	804b      	strh	r3, [r1, #2]
    6d1e:	f7fb fa21 	bl	2164 <bt_uuid_cmp>
	__ASSERT(svc, "invalid parameters\n");
	__ASSERT(svc->attrs, "invalid parameters\n");
	__ASSERT(svc->attr_count, "invalid parameters\n");

	/* Do no allow to register mandatory services twice */
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    6d22:	2800      	cmp	r0, #0
    6d24:	d0f2      	beq.n	6d0c <bt_gatt_service_register+0x20>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
		return -EALREADY;
	}

	err = gatt_register(svc);
    6d26:	0028      	movs	r0, r5
    6d28:	f7ff fd24 	bl	6774 <gatt_register>
    6d2c:	1e03      	subs	r3, r0, #0
	if (err < 0) {
    6d2e:	db09      	blt.n	6d44 <bt_gatt_service_register+0x58>
    6d30:	2314      	movs	r3, #20
    6d32:	88a9      	ldrh	r1, [r5, #4]
		return err;
	}

	sc_indicate(&svc->attrs[0], &svc->attrs[svc->attr_count - 1]);
    6d34:	6828      	ldr	r0, [r5, #0]
    6d36:	4359      	muls	r1, r3
    6d38:	1841      	adds	r1, r0, r1
    6d3a:	3904      	subs	r1, #4
    6d3c:	3010      	adds	r0, #16
    6d3e:	f7ff ffa7 	bl	6c90 <sc_indicate.isra.10>

	return 0;
    6d42:	0023      	movs	r3, r4
}
    6d44:	0018      	movs	r0, r3
    6d46:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6d48:	00001801 	.word	0x00001801

00006d4c <bt_gatt_attr_next>:
	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
	struct bt_gatt_attr *next = NULL;
    6d4c:	2300      	movs	r3, #0

	return BT_GATT_ITER_STOP;
}

struct bt_gatt_attr *bt_gatt_attr_next(const struct bt_gatt_attr *attr)
{
    6d4e:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
    6d50:	9301      	str	r3, [sp, #4]

	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6d52:	8a00      	ldrh	r0, [r0, #16]
    6d54:	ab01      	add	r3, sp, #4
    6d56:	3001      	adds	r0, #1
    6d58:	b280      	uxth	r0, r0
    6d5a:	0001      	movs	r1, r0
    6d5c:	4a02      	ldr	r2, [pc, #8]	; (6d68 <bt_gatt_attr_next+0x1c>)
    6d5e:	f7ff ff57 	bl	6c10 <bt_gatt_foreach_attr>
			     &next);

	return next;
}
    6d62:	9801      	ldr	r0, [sp, #4]
    6d64:	bd0e      	pop	{r1, r2, r3, pc}
    6d66:	46c0      	nop			; (mov r8, r8)
    6d68:	000065d3 	.word	0x000065d3

00006d6c <bt_gatt_attr_read_chrc>:
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    6d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d6e:	b08f      	sub	sp, #60	; 0x3c
    6d70:	001f      	movs	r7, r3
    6d72:	ab14      	add	r3, sp, #80	; 0x50
    6d74:	881b      	ldrh	r3, [r3, #0]
	struct bt_gatt_chrc *chrc = attr->user_data;
    6d76:	68ce      	ldr	r6, [r1, #12]
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    6d78:	9005      	str	r0, [sp, #20]
    6d7a:	9307      	str	r3, [sp, #28]
    6d7c:	9206      	str	r2, [sp, #24]
	struct bt_gatt_chrc *chrc = attr->user_data;
	struct gatt_chrc pdu;
	const struct bt_gatt_attr *next;
	u8_t value_len;

	pdu.properties = chrc->properties;
    6d7e:	7932      	ldrb	r2, [r6, #4]
    6d80:	ab09      	add	r3, sp, #36	; 0x24
	 * The Characteristic Value declaration contains the value of the
	 * characteristic. It is the first Attribute after the characteristic
	 * declaration. All characteristic definitions shall have a
	 * Characteristic Value declaration.
	 */
	next = bt_gatt_attr_next(attr);
    6d82:	0008      	movs	r0, r1
} __packed;

ssize_t bt_gatt_attr_read_chrc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       u16_t len, u16_t offset)
{
    6d84:	000d      	movs	r5, r1
	struct bt_gatt_chrc *chrc = attr->user_data;
	struct gatt_chrc pdu;
	const struct bt_gatt_attr *next;
	u8_t value_len;

	pdu.properties = chrc->properties;
    6d86:	701a      	strb	r2, [r3, #0]
	 * The Characteristic Value declaration contains the value of the
	 * characteristic. It is the first Attribute after the characteristic
	 * declaration. All characteristic definitions shall have a
	 * Characteristic Value declaration.
	 */
	next = bt_gatt_attr_next(attr);
    6d88:	f7ff ffe0 	bl	6d4c <bt_gatt_attr_next>
    6d8c:	1e04      	subs	r4, r0, #0
	if (!next) {
    6d8e:	d111      	bne.n	6db4 <bt_gatt_attr_read_chrc+0x48>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    6d90:	4b1b      	ldr	r3, [pc, #108]	; (6e00 <bt_gatt_attr_read_chrc+0x94>)
    6d92:	4a1c      	ldr	r2, [pc, #112]	; (6e04 <bt_gatt_attr_read_chrc+0x98>)
    6d94:	9302      	str	r3, [sp, #8]
    6d96:	8a2b      	ldrh	r3, [r5, #16]
    6d98:	491b      	ldr	r1, [pc, #108]	; (6e08 <bt_gatt_attr_read_chrc+0x9c>)
    6d9a:	9301      	str	r3, [sp, #4]
    6d9c:	4b1b      	ldr	r3, [pc, #108]	; (6e0c <bt_gatt_attr_read_chrc+0xa0>)
    6d9e:	481c      	ldr	r0, [pc, #112]	; (6e10 <bt_gatt_attr_read_chrc+0xa4>)
    6da0:	9300      	str	r3, [sp, #0]
    6da2:	4b1c      	ldr	r3, [pc, #112]	; (6e14 <bt_gatt_attr_read_chrc+0xa8>)
    6da4:	f7fa fce0 	bl	1768 <printk>
		pdu.value_handle = 0x0000;
    6da8:	2315      	movs	r3, #21
    6daa:	aa04      	add	r2, sp, #16
    6dac:	189b      	adds	r3, r3, r2
    6dae:	701c      	strb	r4, [r3, #0]
    6db0:	705c      	strb	r4, [r3, #1]
    6db2:	e006      	b.n	6dc2 <bt_gatt_attr_read_chrc+0x56>
	} else {
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    6db4:	2315      	movs	r3, #21
    6db6:	aa04      	add	r2, sp, #16
    6db8:	189b      	adds	r3, r3, r2
    6dba:	7c02      	ldrb	r2, [r0, #16]
    6dbc:	701a      	strb	r2, [r3, #0]
    6dbe:	7c42      	ldrb	r2, [r0, #17]
    6dc0:	705a      	strb	r2, [r3, #1]
    6dc2:	2017      	movs	r0, #23
	}
	value_len = sizeof(pdu.properties) + sizeof(pdu.value_handle);

	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6dc4:	6831      	ldr	r1, [r6, #0]
    6dc6:	aa04      	add	r2, sp, #16
    6dc8:	780b      	ldrb	r3, [r1, #0]
    6dca:	1880      	adds	r0, r0, r2
    6dcc:	2b00      	cmp	r3, #0
    6dce:	d105      	bne.n	6ddc <bt_gatt_attr_read_chrc+0x70>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    6dd0:	884b      	ldrh	r3, [r1, #2]
    6dd2:	7003      	strb	r3, [r0, #0]
    6dd4:	0a1b      	lsrs	r3, r3, #8
    6dd6:	7043      	strb	r3, [r0, #1]
		value_len += 2;
    6dd8:	2305      	movs	r3, #5
    6dda:	e004      	b.n	6de6 <bt_gatt_attr_read_chrc+0x7a>
	} else {
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    6ddc:	3101      	adds	r1, #1
    6dde:	2210      	movs	r2, #16
    6de0:	f7fa fac0 	bl	1364 <memcpy>
		value_len += 16;
    6de4:	2313      	movs	r3, #19
	}

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    6de6:	9302      	str	r3, [sp, #8]
    6de8:	ab09      	add	r3, sp, #36	; 0x24
    6dea:	9301      	str	r3, [sp, #4]
    6dec:	9b07      	ldr	r3, [sp, #28]
    6dee:	9a06      	ldr	r2, [sp, #24]
    6df0:	9300      	str	r3, [sp, #0]
    6df2:	0029      	movs	r1, r5
    6df4:	003b      	movs	r3, r7
    6df6:	9805      	ldr	r0, [sp, #20]
    6df8:	f7ff fe74 	bl	6ae4 <bt_gatt_attr_read>
}
    6dfc:	b00f      	add	sp, #60	; 0x3c
    6dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e00:	000145b0 	.word	0x000145b0
    6e04:	000145bd 	.word	0x000145bd
    6e08:	00014577 	.word	0x00014577
    6e0c:	000145fb 	.word	0x000145fb
    6e10:	0001538a 	.word	0x0001538a
    6e14:	00016bc1 	.word	0x00016bc1

00006e18 <bt_gatt_notify>:
	return BT_GATT_ITER_CONTINUE;
}

int bt_gatt_notify(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		   const void *data, u16_t len)
{
    6e18:	b510      	push	{r4, lr}
    6e1a:	b086      	sub	sp, #24
    6e1c:	8a0c      	ldrh	r4, [r1, #16]
	struct notify_data nfy;

	__ASSERT(attr && attr->handle, "invalid parameters\n");

	if (conn) {
    6e1e:	2800      	cmp	r0, #0
    6e20:	d003      	beq.n	6e2a <bt_gatt_notify+0x12>
		return gatt_notify(conn, attr->handle, data, len);
    6e22:	0021      	movs	r1, r4
    6e24:	f7ff fcfa 	bl	681c <gatt_notify>
    6e28:	e00f      	b.n	6e4a <bt_gatt_notify+0x32>
	}

	nfy.err = -ENOTCONN;
    6e2a:	2039      	movs	r0, #57	; 0x39
    6e2c:	4240      	negs	r0, r0
    6e2e:	9000      	str	r0, [sp, #0]
	nfy.attr = attr;
    6e30:	9102      	str	r1, [sp, #8]
	nfy.type = BT_GATT_CCC_NOTIFY;
    6e32:	4668      	mov	r0, sp
    6e34:	2101      	movs	r1, #1
	nfy.data = data;
	nfy.len = len;
    6e36:	8203      	strh	r3, [r0, #16]
		return gatt_notify(conn, attr->handle, data, len);
	}

	nfy.err = -ENOTCONN;
	nfy.attr = attr;
	nfy.type = BT_GATT_CCC_NOTIFY;
    6e38:	8081      	strh	r1, [r0, #4]
	nfy.data = data;
    6e3a:	9203      	str	r2, [sp, #12]
	nfy.len = len;

	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    6e3c:	0020      	movs	r0, r4
    6e3e:	466b      	mov	r3, sp
    6e40:	4a03      	ldr	r2, [pc, #12]	; (6e50 <bt_gatt_notify+0x38>)
    6e42:	4904      	ldr	r1, [pc, #16]	; (6e54 <bt_gatt_notify+0x3c>)
    6e44:	f7ff fee4 	bl	6c10 <bt_gatt_foreach_attr>

	return nfy.err;
    6e48:	9800      	ldr	r0, [sp, #0]
}
    6e4a:	b006      	add	sp, #24
    6e4c:	bd10      	pop	{r4, pc}
    6e4e:	46c0      	nop			; (mov r8, r8)
    6e50:	0000696d 	.word	0x0000696d
    6e54:	0000ffff 	.word	0x0000ffff

00006e58 <bt_gatt_connected>:
}

#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    6e58:	b510      	push	{r4, lr}
    6e5a:	0003      	movs	r3, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6e5c:	4a02      	ldr	r2, [pc, #8]	; (6e68 <bt_gatt_connected+0x10>)
    6e5e:	4903      	ldr	r1, [pc, #12]	; (6e6c <bt_gatt_connected+0x14>)
    6e60:	2001      	movs	r0, #1
    6e62:	f7ff fed5 	bl	6c10 <bt_gatt_foreach_attr>
#if defined(CONFIG_BLUETOOTH_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */
}
    6e66:	bd10      	pop	{r4, pc}
    6e68:	00006725 	.word	0x00006725
    6e6c:	0000ffff 	.word	0x0000ffff

00006e70 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    6e70:	b510      	push	{r4, lr}
    6e72:	0003      	movs	r3, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6e74:	4a02      	ldr	r2, [pc, #8]	; (6e80 <bt_gatt_disconnected+0x10>)
    6e76:	4903      	ldr	r1, [pc, #12]	; (6e84 <bt_gatt_disconnected+0x14>)
    6e78:	2001      	movs	r0, #1
    6e7a:	f7ff fec9 	bl	6c10 <bt_gatt_foreach_attr>

#if defined(CONFIG_BLUETOOTH_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BLUETOOTH_GATT_CLIENT */
}
    6e7e:	bd10      	pop	{r4, pc}
    6e80:	00006a21 	.word	0x00006a21
    6e84:	0000ffff 	.word	0x0000ffff

00006e88 <sys_memcpy_swap>:
		 "Source and destination buffers must not overlap");

	src += length - 1;

	for (; length > 0; length--) {
		*((u8_t *)dst++) = *((u8_t *)src--);
    6e88:	3901      	subs	r1, #1
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;

	for (; length > 0; length--) {
    6e8a:	2a00      	cmp	r2, #0
    6e8c:	d004      	beq.n	6e98 <sys_memcpy_swap+0x10>
		*((u8_t *)dst++) = *((u8_t *)src--);
    6e8e:	5c8b      	ldrb	r3, [r1, r2]
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;

	for (; length > 0; length--) {
    6e90:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    6e92:	7003      	strb	r3, [r0, #0]
    6e94:	3001      	adds	r0, #1
    6e96:	e7f8      	b.n	6e8a <sys_memcpy_swap+0x2>
	}
}
    6e98:	4770      	bx	lr
	...

00006e9c <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    6e9c:	4b12      	ldr	r3, [pc, #72]	; (6ee8 <get_io_capa+0x4c>)

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    6e9e:	2003      	movs	r0, #3
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    6ea0:	681b      	ldr	r3, [r3, #0]
    6ea2:	2b00      	cmp	r3, #0
    6ea4:	d01f      	beq.n	6ee6 <get_io_capa+0x4a>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    6ea6:	681a      	ldr	r2, [r3, #0]
    6ea8:	2a00      	cmp	r2, #0
    6eaa:	d00a      	beq.n	6ec2 <get_io_capa+0x26>
    6eac:	6859      	ldr	r1, [r3, #4]
    6eae:	2900      	cmp	r1, #0
    6eb0:	d007      	beq.n	6ec2 <get_io_capa+0x26>
    6eb2:	6899      	ldr	r1, [r3, #8]
	    (bt_auth->passkey_confirm || !sc_supported)) {
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    6eb4:	3001      	adds	r0, #1
	if (!bt_auth) {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    6eb6:	2900      	cmp	r1, #0
    6eb8:	d115      	bne.n	6ee6 <get_io_capa+0x4a>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    6eba:	490c      	ldr	r1, [pc, #48]	; (6eec <get_io_capa+0x50>)
    6ebc:	7809      	ldrb	r1, [r1, #0]
    6ebe:	2900      	cmp	r1, #0
    6ec0:	d011      	beq.n	6ee6 <get_io_capa+0x4a>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    6ec2:	490a      	ldr	r1, [pc, #40]	; (6eec <get_io_capa+0x50>)
    6ec4:	7809      	ldrb	r1, [r1, #0]
    6ec6:	2900      	cmp	r1, #0
    6ec8:	d005      	beq.n	6ed6 <get_io_capa+0x3a>
    6eca:	2a00      	cmp	r2, #0
    6ecc:	d003      	beq.n	6ed6 <get_io_capa+0x3a>
    6ece:	6899      	ldr	r1, [r3, #8]
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
    6ed0:	2001      	movs	r0, #1
	    (bt_auth->passkey_confirm || !sc_supported)) {
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    6ed2:	2900      	cmp	r1, #0
    6ed4:	d107      	bne.n	6ee6 <get_io_capa+0x4a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    6ed6:	685b      	ldr	r3, [r3, #4]
		return BT_SMP_IO_KEYBOARD_ONLY;
    6ed8:	2002      	movs	r0, #2
	if (sc_supported && bt_auth->passkey_display &&
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    6eda:	2b00      	cmp	r3, #0
    6edc:	d103      	bne.n	6ee6 <get_io_capa+0x4a>

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    6ede:	3001      	adds	r0, #1

	if (bt_auth->passkey_entry) {
		return BT_SMP_IO_KEYBOARD_ONLY;
	}

	if (bt_auth->passkey_display) {
    6ee0:	2a00      	cmp	r2, #0
    6ee2:	d000      	beq.n	6ee6 <get_io_capa+0x4a>
		return BT_SMP_IO_DISPLAY_ONLY;
    6ee4:	0018      	movs	r0, r3
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
}
    6ee6:	4770      	bx	lr
    6ee8:	20001ee8 	.word	0x20001ee8
    6eec:	20000d70 	.word	0x20000d70

00006ef0 <smp_security_request>:
}
#else
static u8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
{
	return BT_SMP_ERR_CMD_NOTSUPP;
}
    6ef0:	2007      	movs	r0, #7
    6ef2:	4770      	bx	lr

00006ef4 <bt_smp_accept>:

	return true;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    6ef6:	4a0c      	ldr	r2, [pc, #48]	; (6f28 <bt_smp_accept+0x34>)
    6ef8:	6813      	ldr	r3, [r2, #0]
    6efa:	2b00      	cmp	r3, #0
    6efc:	d104      	bne.n	6f08 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.chan.ops = &ops;
    6efe:	480b      	ldr	r0, [pc, #44]	; (6f2c <bt_smp_accept+0x38>)
    6f00:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan.chan;
    6f02:	600a      	str	r2, [r1, #0]

		return 0;
    6f04:	0018      	movs	r0, r3
    6f06:	e00c      	b.n	6f22 <bt_smp_accept+0x2e>
	}

	BT_ERR("No available SMP context for conn %p", conn);
    6f08:	4b09      	ldr	r3, [pc, #36]	; (6f30 <bt_smp_accept+0x3c>)
    6f0a:	9001      	str	r0, [sp, #4]
    6f0c:	9302      	str	r3, [sp, #8]
    6f0e:	4b09      	ldr	r3, [pc, #36]	; (6f34 <bt_smp_accept+0x40>)
    6f10:	4a09      	ldr	r2, [pc, #36]	; (6f38 <bt_smp_accept+0x44>)
    6f12:	9300      	str	r3, [sp, #0]
    6f14:	4909      	ldr	r1, [pc, #36]	; (6f3c <bt_smp_accept+0x48>)
    6f16:	4b0a      	ldr	r3, [pc, #40]	; (6f40 <bt_smp_accept+0x4c>)
    6f18:	480a      	ldr	r0, [pc, #40]	; (6f44 <bt_smp_accept+0x50>)
    6f1a:	f7fa fc25 	bl	1768 <printk>

	return -ENOMEM;
    6f1e:	200c      	movs	r0, #12
    6f20:	4240      	negs	r0, r0
}
    6f22:	b005      	add	sp, #20
    6f24:	bd00      	pop	{pc}
    6f26:	46c0      	nop			; (mov r8, r8)
    6f28:	20000db4 	.word	0x20000db4
    6f2c:	20000510 	.word	0x20000510
    6f30:	000145b0 	.word	0x000145b0
    6f34:	000145b5 	.word	0x000145b5
    6f38:	00014570 	.word	0x00014570
    6f3c:	00014577 	.word	0x00014577
    6f40:	00016cd6 	.word	0x00016cd6
    6f44:	000153c0 	.word	0x000153c0

00006f48 <atomic_set_bit>:
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    6f48:	221f      	movs	r2, #31
 * @param bit Bit number (starting from 0).
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
    6f4a:	000b      	movs	r3, r1
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    6f4c:	400a      	ands	r2, r1
    6f4e:	2101      	movs	r1, #1
 * @param bit Bit number (starting from 0).
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
    6f50:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    6f52:	095b      	lsrs	r3, r3, #5
    6f54:	009b      	lsls	r3, r3, #2
    6f56:	4091      	lsls	r1, r2
    6f58:	18c0      	adds	r0, r0, r3
    6f5a:	f00b fea4 	bl	12ca6 <atomic_or>
}
    6f5e:	bd10      	pop	{r4, pc}

00006f60 <atomic_test_and_clear_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    6f60:	231f      	movs	r3, #31
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    6f62:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    6f64:	2401      	movs	r4, #1
    6f66:	400b      	ands	r3, r1
    6f68:	409c      	lsls	r4, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6f6a:	43e2      	mvns	r2, r4
    6f6c:	094b      	lsrs	r3, r1, #5
    6f6e:	009b      	lsls	r3, r3, #2
    6f70:	18c0      	adds	r0, r0, r3
    6f72:	0011      	movs	r1, r2
    6f74:	f00b fea2 	bl	12cbc <atomic_and>

	return (old & mask) != 0;
    6f78:	4020      	ands	r0, r4
    6f7a:	1e44      	subs	r4, r0, #1
    6f7c:	41a0      	sbcs	r0, r4
}
    6f7e:	bd10      	pop	{r4, pc}

00006f80 <bt_smp_aes_cmac>:
 *          : len    ( length of the message in octets )
 * Output   : out    ( message authentication code )
 */
static int bt_smp_aes_cmac(const u8_t *key, const u8_t *in, size_t len,
			   u8_t *out)
{
    6f80:	b570      	push	{r4, r5, r6, lr}
    6f82:	b0c2      	sub	sp, #264	; 0x108
    6f84:	000d      	movs	r5, r1
    6f86:	0016      	movs	r6, r2
	struct tc_aes_key_sched_struct sched;
	struct tc_cmac_struct state;

	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    6f88:	0001      	movs	r1, r0
    6f8a:	aa16      	add	r2, sp, #88	; 0x58
    6f8c:	4668      	mov	r0, sp
 *          : len    ( length of the message in octets )
 * Output   : out    ( message authentication code )
 */
static int bt_smp_aes_cmac(const u8_t *key, const u8_t *in, size_t len,
			   u8_t *out)
{
    6f8e:	001c      	movs	r4, r3
	struct tc_aes_key_sched_struct sched;
	struct tc_cmac_struct state;

	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    6f90:	f7fa ff44 	bl	1e1c <tc_cmac_setup>
    6f94:	2800      	cmp	r0, #0
    6f96:	d102      	bne.n	6f9e <bt_smp_aes_cmac+0x1e>
		return -EIO;
    6f98:	2005      	movs	r0, #5
    6f9a:	4240      	negs	r0, r0
    6f9c:	e00d      	b.n	6fba <bt_smp_aes_cmac+0x3a>
	}

	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    6f9e:	0032      	movs	r2, r6
    6fa0:	0029      	movs	r1, r5
    6fa2:	4668      	mov	r0, sp
    6fa4:	f7fa ff66 	bl	1e74 <tc_cmac_update>
    6fa8:	2800      	cmp	r0, #0
    6faa:	d0f5      	beq.n	6f98 <bt_smp_aes_cmac+0x18>
		return -EIO;
	}

	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    6fac:	4669      	mov	r1, sp
    6fae:	0020      	movs	r0, r4
    6fb0:	f7fa ffc6 	bl	1f40 <tc_cmac_final>
    6fb4:	2800      	cmp	r0, #0
    6fb6:	d0ef      	beq.n	6f98 <bt_smp_aes_cmac+0x18>
		return -EIO;
	}

	return 0;
    6fb8:	2000      	movs	r0, #0
}
    6fba:	b042      	add	sp, #264	; 0x108
    6fbc:	bd70      	pop	{r4, r5, r6, pc}

00006fbe <smp_reset>:
	return BT_FEAT_SC(bt_dev.features);
}
#endif /* CONFIG_BLUETOOTH_BREDR */

static void smp_reset(struct bt_smp *smp)
{
    6fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fc0:	0004      	movs	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    6fc2:	6805      	ldr	r5, [r0, #0]

	k_delayed_work_cancel(&smp->work);
    6fc4:	3071      	adds	r0, #113	; 0x71
    6fc6:	30ff      	adds	r0, #255	; 0xff
    6fc8:	f00d f80a 	bl	13fe0 <k_delayed_work_cancel>

	smp->method = JUST_WORKS;
	atomic_set(&smp->allowed_cmds, 0);
    6fcc:	0027      	movs	r7, r4
{
	struct bt_conn *conn = smp->chan.chan.conn;

	k_delayed_work_cancel(&smp->work);

	smp->method = JUST_WORKS;
    6fce:	0023      	movs	r3, r4
    6fd0:	2600      	movs	r6, #0
    6fd2:	3398      	adds	r3, #152	; 0x98
	atomic_set(&smp->allowed_cmds, 0);
    6fd4:	3790      	adds	r7, #144	; 0x90
{
	struct bt_conn *conn = smp->chan.chan.conn;

	k_delayed_work_cancel(&smp->work);

	smp->method = JUST_WORKS;
    6fd6:	701e      	strb	r6, [r3, #0]
	atomic_set(&smp->allowed_cmds, 0);
    6fd8:	0031      	movs	r1, r6
    6fda:	0038      	movs	r0, r7
    6fdc:	f00b fe59 	bl	12c92 <atomic_set>
	atomic_set(smp->flags, 0);
    6fe0:	0020      	movs	r0, r4
    6fe2:	0031      	movs	r1, r6
    6fe4:	3094      	adds	r0, #148	; 0x94
    6fe6:	f00b fe54 	bl	12c92 <atomic_set>

	if (conn->required_sec_level != conn->sec_level) {
    6fea:	7a2b      	ldrb	r3, [r5, #8]
    6fec:	7a6a      	ldrb	r2, [r5, #9]
    6fee:	429a      	cmp	r2, r3
    6ff0:	d000      	beq.n	6ff4 <smp_reset+0x36>
		/* TODO report error */
		/* reset required security level in case of error */
		conn->required_sec_level = conn->sec_level;
    6ff2:	726b      	strb	r3, [r5, #9]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
		return;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    6ff4:	0038      	movs	r0, r7
    6ff6:	2101      	movs	r1, #1
    6ff8:	f7ff ffa6 	bl	6f48 <atomic_set_bit>
	}
}
    6ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007000 <smp_pairing_failed>:

	return 0;
}

static u8_t smp_pairing_failed(struct bt_smp *smp, struct net_buf *buf)
{
    7000:	b530      	push	{r4, r5, lr}
    7002:	0004      	movs	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_fail *req = (void *)buf->data;

	BT_ERR("reason 0x%x", req->reason);
    7004:	4b16      	ldr	r3, [pc, #88]	; (7060 <smp_pairing_failed+0x60>)

	return 0;
}

static u8_t smp_pairing_failed(struct bt_smp *smp, struct net_buf *buf)
{
    7006:	b085      	sub	sp, #20
	struct bt_conn *conn = smp->chan.chan.conn;
    7008:	6805      	ldr	r5, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;

	BT_ERR("reason 0x%x", req->reason);
    700a:	9302      	str	r3, [sp, #8]
    700c:	688b      	ldr	r3, [r1, #8]
    700e:	4a15      	ldr	r2, [pc, #84]	; (7064 <smp_pairing_failed+0x64>)
    7010:	781b      	ldrb	r3, [r3, #0]
    7012:	4915      	ldr	r1, [pc, #84]	; (7068 <smp_pairing_failed+0x68>)
    7014:	9301      	str	r3, [sp, #4]
    7016:	4b15      	ldr	r3, [pc, #84]	; (706c <smp_pairing_failed+0x6c>)
    7018:	4815      	ldr	r0, [pc, #84]	; (7070 <smp_pairing_failed+0x70>)
    701a:	9300      	str	r3, [sp, #0]
    701c:	4b15      	ldr	r3, [pc, #84]	; (7074 <smp_pairing_failed+0x74>)
    701e:	f7fa fba3 	bl	1768 <printk>
	 * for now this to avoid warning about unused variable when debugs are
	 * disabled
	 */
	ARG_UNUSED(req);

	switch (smp->method) {
    7022:	0023      	movs	r3, r4
    7024:	3398      	adds	r3, #152	; 0x98
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	3b01      	subs	r3, #1
    702a:	2b02      	cmp	r3, #2
    702c:	d804      	bhi.n	7038 <smp_pairing_failed+0x38>
	case PASSKEY_INPUT:
	case PASSKEY_DISPLAY:
	case PASSKEY_CONFIRM:
		bt_auth->cancel(conn);
    702e:	4b12      	ldr	r3, [pc, #72]	; (7078 <smp_pairing_failed+0x78>)
    7030:	0028      	movs	r0, r5
    7032:	681b      	ldr	r3, [r3, #0]
    7034:	68db      	ldr	r3, [r3, #12]
    7036:	4798      	blx	r3

	/*
	 * Pairing Failed command may be sent at any time during the pairing,
	 * so if there are any keys distributed, shall be cleared.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    7038:	0020      	movs	r0, r4
    703a:	2102      	movs	r1, #2
    703c:	3094      	adds	r0, #148	; 0x94
    703e:	f7fb f8ea 	bl	2216 <atomic_test_bit>
    7042:	2800      	cmp	r0, #0
    7044:	d005      	beq.n	7052 <smp_pairing_failed+0x52>
	    smp->chan.chan.conn->le.keys) {
    7046:	6823      	ldr	r3, [r4, #0]
    7048:	6fd8      	ldr	r0, [r3, #124]	; 0x7c

	/*
	 * Pairing Failed command may be sent at any time during the pairing,
	 * so if there are any keys distributed, shall be cleared.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    704a:	2800      	cmp	r0, #0
    704c:	d001      	beq.n	7052 <smp_pairing_failed+0x52>
	    smp->chan.chan.conn->le.keys) {
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    704e:	f001 fc43 	bl	88d8 <bt_keys_clear>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    7052:	0020      	movs	r0, r4
    7054:	f7ff ffb3 	bl	6fbe <smp_reset>

	smp_pairing_complete(smp, req->reason);

	/* return no error to avoid sending Pairing Failed in response */
	return 0;
}
    7058:	2000      	movs	r0, #0
    705a:	b005      	add	sp, #20
    705c:	bd30      	pop	{r4, r5, pc}
    705e:	46c0      	nop			; (mov r8, r8)
    7060:	000145b0 	.word	0x000145b0
    7064:	00014570 	.word	0x00014570
    7068:	00014577 	.word	0x00014577
    706c:	000145b5 	.word	0x000145b5
    7070:	000153f5 	.word	0x000153f5
    7074:	00016be4 	.word	0x00016be4
    7078:	20001ee8 	.word	0x20001ee8

0000707c <bt_smp_disconnected>:
	k_delayed_work_init(&smp->work, smp_timeout);
	smp_reset(smp);
}

static void bt_smp_disconnected(struct bt_l2cap_chan *chan)
{
    707c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_keys *keys = chan->conn->le.keys;
    707e:	6803      	ldr	r3, [r0, #0]
	k_delayed_work_init(&smp->work, smp_timeout);
	smp_reset(smp);
}

static void bt_smp_disconnected(struct bt_l2cap_chan *chan)
{
    7080:	0005      	movs	r5, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_keys *keys = chan->conn->le.keys;
    7082:	6fdc      	ldr	r4, [r3, #124]	; 0x7c

	BT_DBG("chan %p cid 0x%04x", chan,
	       CONTAINER_OF(chan, struct bt_l2cap_le_chan, chan)->tx.cid);

	k_delayed_work_cancel(&smp->work);
    7084:	3071      	adds	r0, #113	; 0x71
    7086:	30ff      	adds	r0, #255	; 0xff
    7088:	f00c ffaa 	bl	13fe0 <k_delayed_work_cancel>

	if (keys) {
    708c:	2c00      	cmp	r4, #0
    708e:	d00d      	beq.n	70ac <bt_smp_disconnected+0x30>
		/*
		 * If debug keys were used for pairing remove them.
		 * No keys indicate no bonding so free keys storage.
		 */
		if (!keys->keys ||
    7090:	89a3      	ldrh	r3, [r4, #12]
    7092:	2b00      	cmp	r3, #0
    7094:	d103      	bne.n	709e <bt_smp_disconnected+0x22>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
			bt_keys_clear(keys);
    7096:	0020      	movs	r0, r4
    7098:	f001 fc1e 	bl	88d8 <bt_keys_clear>
    709c:	e006      	b.n	70ac <bt_smp_disconnected+0x30>
		/*
		 * If debug keys were used for pairing remove them.
		 * No keys indicate no bonding so free keys storage.
		 */
		if (!keys->keys ||
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
    709e:	0020      	movs	r0, r4
    70a0:	2101      	movs	r1, #1
    70a2:	3008      	adds	r0, #8
    70a4:	f7fb f8b7 	bl	2216 <atomic_test_bit>
	if (keys) {
		/*
		 * If debug keys were used for pairing remove them.
		 * No keys indicate no bonding so free keys storage.
		 */
		if (!keys->keys ||
    70a8:	2800      	cmp	r0, #0
    70aa:	d1f4      	bne.n	7096 <bt_smp_disconnected+0x1a>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
			bt_keys_clear(keys);
		}
	}

	memset(smp, 0, sizeof(*smp));
    70ac:	22cc      	movs	r2, #204	; 0xcc
    70ae:	0028      	movs	r0, r5
    70b0:	0052      	lsls	r2, r2, #1
    70b2:	2100      	movs	r1, #0
    70b4:	f7fa f980 	bl	13b8 <memset>
}
    70b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000070bc <smp_timeout>:

	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
    70bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    70be:	0004      	movs	r4, r0

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    70c0:	0025      	movs	r5, r4
	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    70c2:	0006      	movs	r6, r0

	BT_ERR("SMP Timeout");
    70c4:	4b10      	ldr	r3, [pc, #64]	; (7108 <smp_timeout+0x4c>)
    70c6:	4911      	ldr	r1, [pc, #68]	; (710c <smp_timeout+0x50>)
    70c8:	9301      	str	r3, [sp, #4]
    70ca:	4b11      	ldr	r3, [pc, #68]	; (7110 <smp_timeout+0x54>)
    70cc:	4a11      	ldr	r2, [pc, #68]	; (7114 <smp_timeout+0x58>)
    70ce:	9300      	str	r3, [sp, #0]
    70d0:	4811      	ldr	r0, [pc, #68]	; (7118 <smp_timeout+0x5c>)
    70d2:	4b12      	ldr	r3, [pc, #72]	; (711c <smp_timeout+0x60>)

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    70d4:	3ddc      	subs	r5, #220	; 0xdc

static void smp_timeout(struct k_work *work)
{
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);

	BT_ERR("SMP Timeout");
    70d6:	f7fa fb47 	bl	1768 <printk>
	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    70da:	3e71      	subs	r6, #113	; 0x71

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    70dc:	2102      	movs	r1, #2
    70de:	0028      	movs	r0, r5
	smp_reset(smp);
}

static void smp_timeout(struct k_work *work)
{
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    70e0:	3eff      	subs	r6, #255	; 0xff

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    70e2:	f7fb f898 	bl	2216 <atomic_test_bit>
    70e6:	2800      	cmp	r0, #0
    70e8:	d006      	beq.n	70f8 <smp_timeout+0x3c>
	    smp->chan.chan.conn->le.keys) {
    70ea:	4b0d      	ldr	r3, [pc, #52]	; (7120 <smp_timeout+0x64>)
    70ec:	58e3      	ldr	r3, [r4, r3]
    70ee:	6fd8      	ldr	r0, [r3, #124]	; 0x7c

	/*
	 * If SMP timeout occurred during key distribution we should assume
	 * pairing failed and don't store any keys from this pairing.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    70f0:	2800      	cmp	r0, #0
    70f2:	d001      	beq.n	70f8 <smp_timeout+0x3c>
	    smp->chan.chan.conn->le.keys) {
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    70f4:	f001 fbf0 	bl	88d8 <bt_keys_clear>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    70f8:	0030      	movs	r0, r6
    70fa:	f7ff ff60 	bl	6fbe <smp_reset>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
	}

	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);

	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    70fe:	0028      	movs	r0, r5
    7100:	2104      	movs	r1, #4
    7102:	f7ff ff21 	bl	6f48 <atomic_set_bit>
}
    7106:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    7108:	000145b0 	.word	0x000145b0
    710c:	00014577 	.word	0x00014577
    7110:	000145b5 	.word	0x000145b5
    7114:	00014570 	.word	0x00014570
    7118:	00015411 	.word	0x00015411
    711c:	00016cca 	.word	0x00016cca
    7120:	fffffe90 	.word	0xfffffe90

00007124 <smp_ident_info>:
	/* return no error to avoid sending Pairing Failed in response */
	return 0;
}

static u8_t smp_ident_info(struct bt_smp *smp, struct net_buf *buf)
{
    7124:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7126:	0004      	movs	r4, r0
    7128:	000d      	movs	r5, r1
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    712a:	3094      	adds	r0, #148	; 0x94
    712c:	210a      	movs	r1, #10
    712e:	f7fb f872 	bl	2216 <atomic_test_bit>
    7132:	2800      	cmp	r0, #0
    7134:	d01d      	beq.n	7172 <smp_ident_info+0x4e>
		struct bt_smp_ident_info *req = (void *)buf->data;
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    7136:	6826      	ldr	r6, [r4, #0]
    7138:	2002      	movs	r0, #2
    713a:	3654      	adds	r6, #84	; 0x54
    713c:	0031      	movs	r1, r6
static u8_t smp_ident_info(struct bt_smp *smp, struct net_buf *buf)
{
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		struct bt_smp_ident_info *req = (void *)buf->data;
    713e:	68ad      	ldr	r5, [r5, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    7140:	f001 fb72 	bl	8828 <bt_keys_get_type>
		if (!keys) {
    7144:	2800      	cmp	r0, #0
    7146:	d10f      	bne.n	7168 <smp_ident_info+0x44>
			BT_ERR("Unable to get keys for %s",
    7148:	0030      	movs	r0, r6
    714a:	f7fa ff5b 	bl	2004 <bt_addr_le_str>
    714e:	4b0d      	ldr	r3, [pc, #52]	; (7184 <smp_ident_info+0x60>)
    7150:	9001      	str	r0, [sp, #4]
    7152:	9302      	str	r3, [sp, #8]
    7154:	4b0c      	ldr	r3, [pc, #48]	; (7188 <smp_ident_info+0x64>)
    7156:	4a0d      	ldr	r2, [pc, #52]	; (718c <smp_ident_info+0x68>)
    7158:	9300      	str	r3, [sp, #0]
    715a:	490d      	ldr	r1, [pc, #52]	; (7190 <smp_ident_info+0x6c>)
    715c:	4b0d      	ldr	r3, [pc, #52]	; (7194 <smp_ident_info+0x70>)
    715e:	480e      	ldr	r0, [pc, #56]	; (7198 <smp_ident_info+0x74>)
    7160:	f7fa fb02 	bl	1768 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    7164:	2008      	movs	r0, #8
    7166:	e00a      	b.n	717e <smp_ident_info+0x5a>
		}

		memcpy(keys->irk.val, req->irk, 16);
    7168:	3030      	adds	r0, #48	; 0x30
    716a:	2210      	movs	r2, #16
    716c:	0029      	movs	r1, r5
    716e:	f7fa f8f9 	bl	1364 <memcpy>
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    7172:	0020      	movs	r0, r4
    7174:	2109      	movs	r1, #9
    7176:	3090      	adds	r0, #144	; 0x90
    7178:	f7ff fee6 	bl	6f48 <atomic_set_bit>

	return 0;
    717c:	2000      	movs	r0, #0
}
    717e:	b004      	add	sp, #16
    7180:	bd70      	pop	{r4, r5, r6, pc}
    7182:	46c0      	nop			; (mov r8, r8)
    7184:	000145b0 	.word	0x000145b0
    7188:	000145b5 	.word	0x000145b5
    718c:	00014570 	.word	0x00014570
    7190:	00014577 	.word	0x00014577
    7194:	00016d03 	.word	0x00016d03
    7198:	0001542d 	.word	0x0001542d

0000719c <smp_master_ident>:

	return 0;
}

static u8_t smp_master_ident(struct bt_smp *smp, struct net_buf *buf)
{
    719c:	b5f0      	push	{r4, r5, r6, r7, lr}
    719e:	0005      	movs	r5, r0
    71a0:	b085      	sub	sp, #20
    71a2:	000c      	movs	r4, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    71a4:	6806      	ldr	r6, [r0, #0]

	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    71a6:	210a      	movs	r1, #10
    71a8:	3094      	adds	r0, #148	; 0x94
    71aa:	f7fb f834 	bl	2216 <atomic_test_bit>
    71ae:	2800      	cmp	r0, #0
    71b0:	d03b      	beq.n	722a <smp_master_ident+0x8e>
		struct bt_smp_master_ident *req = (void *)buf->data;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    71b2:	3654      	adds	r6, #84	; 0x54
    71b4:	0031      	movs	r1, r6
    71b6:	2004      	movs	r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;

	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		struct bt_smp_master_ident *req = (void *)buf->data;
    71b8:	68a4      	ldr	r4, [r4, #8]
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    71ba:	f001 fb35 	bl	8828 <bt_keys_get_type>
		if (!keys) {
    71be:	2800      	cmp	r0, #0
    71c0:	d10f      	bne.n	71e2 <smp_master_ident+0x46>
			BT_ERR("Unable to get keys for %s",
    71c2:	0030      	movs	r0, r6
    71c4:	f7fa ff1e 	bl	2004 <bt_addr_le_str>
    71c8:	4b25      	ldr	r3, [pc, #148]	; (7260 <smp_master_ident+0xc4>)
    71ca:	9001      	str	r0, [sp, #4]
    71cc:	9302      	str	r3, [sp, #8]
    71ce:	4b25      	ldr	r3, [pc, #148]	; (7264 <smp_master_ident+0xc8>)
    71d0:	4a25      	ldr	r2, [pc, #148]	; (7268 <smp_master_ident+0xcc>)
    71d2:	9300      	str	r3, [sp, #0]
    71d4:	4925      	ldr	r1, [pc, #148]	; (726c <smp_master_ident+0xd0>)
    71d6:	4b26      	ldr	r3, [pc, #152]	; (7270 <smp_master_ident+0xd4>)
    71d8:	4826      	ldr	r0, [pc, #152]	; (7274 <smp_master_ident+0xd8>)
    71da:	f7fa fac5 	bl	1768 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    71de:	2408      	movs	r4, #8
    71e0:	e03a      	b.n	7258 <smp_master_ident+0xbc>
		}

		keys->ltk.ediv = req->ediv;
    71e2:	7863      	ldrb	r3, [r4, #1]
    71e4:	7822      	ldrb	r2, [r4, #0]
    71e6:	021b      	lsls	r3, r3, #8
    71e8:	4313      	orrs	r3, r2
    71ea:	8303      	strh	r3, [r0, #24]
		keys->ltk.rand = req->rand;
    71ec:	78e3      	ldrb	r3, [r4, #3]
    71ee:	78a1      	ldrb	r1, [r4, #2]
    71f0:	7927      	ldrb	r7, [r4, #4]
    71f2:	021b      	lsls	r3, r3, #8
    71f4:	430b      	orrs	r3, r1
    71f6:	043f      	lsls	r7, r7, #16
    71f8:	001a      	movs	r2, r3
    71fa:	003b      	movs	r3, r7
    71fc:	7967      	ldrb	r7, [r4, #5]
    71fe:	4313      	orrs	r3, r2
    7200:	063f      	lsls	r7, r7, #24
    7202:	79e2      	ldrb	r2, [r4, #7]
    7204:	79a6      	ldrb	r6, [r4, #6]
    7206:	431f      	orrs	r7, r3
    7208:	7a23      	ldrb	r3, [r4, #8]
    720a:	0212      	lsls	r2, r2, #8
    720c:	4332      	orrs	r2, r6
    720e:	041b      	lsls	r3, r3, #16
    7210:	4313      	orrs	r3, r2
    7212:	001a      	movs	r2, r3
    7214:	7a63      	ldrb	r3, [r4, #9]

		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    7216:	2101      	movs	r1, #1
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
		}

		keys->ltk.ediv = req->ediv;
		keys->ltk.rand = req->rand;
    7218:	061b      	lsls	r3, r3, #24
    721a:	4313      	orrs	r3, r2

		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    721c:	22b7      	movs	r2, #183	; 0xb7
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
		}

		keys->ltk.ediv = req->ediv;
		keys->ltk.rand = req->rand;
    721e:	6107      	str	r7, [r0, #16]
    7220:	6143      	str	r3, [r0, #20]

		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    7222:	0052      	lsls	r2, r2, #1
    7224:	5cab      	ldrb	r3, [r5, r2]
    7226:	438b      	bics	r3, r1
    7228:	54ab      	strb	r3, [r5, r2]
	}

	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    722a:	23b7      	movs	r3, #183	; 0xb7
    722c:	005b      	lsls	r3, r3, #1
    722e:	5ceb      	ldrb	r3, [r5, r3]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    7230:	2108      	movs	r1, #8
		keys->ltk.rand = req->rand;

		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
	}

	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    7232:	079a      	lsls	r2, r3, #30
    7234:	d402      	bmi.n	723c <smp_master_ident+0xa0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    7236:	075b      	lsls	r3, r3, #29
    7238:	d504      	bpl.n	7244 <smp_master_ident+0xa8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    723a:	210a      	movs	r1, #10
    723c:	0028      	movs	r0, r5
    723e:	3090      	adds	r0, #144	; 0x90
    7240:	f7ff fe82 	bl	6f48 <atomic_set_bit>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    7244:	002b      	movs	r3, r5
    7246:	33fc      	adds	r3, #252	; 0xfc
    7248:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    724a:	4b0b      	ldr	r3, [pc, #44]	; (7278 <smp_master_ident+0xdc>)
		smp_pairing_complete(smp, 0);
	}

	return 0;
    724c:	2400      	movs	r4, #0
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    724e:	421a      	tst	r2, r3
    7250:	d102      	bne.n	7258 <smp_master_ident+0xbc>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    7252:	0028      	movs	r0, r5
    7254:	f7ff feb3 	bl	6fbe <smp_reset>
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}

	return 0;
}
    7258:	0020      	movs	r0, r4
    725a:	b005      	add	sp, #20
    725c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    725e:	46c0      	nop			; (mov r8, r8)
    7260:	000145b0 	.word	0x000145b0
    7264:	000145b5 	.word	0x000145b5
    7268:	00014570 	.word	0x00014570
    726c:	00014577 	.word	0x00014577
    7270:	00016c4d 	.word	0x00016c4d
    7274:	0001542d 	.word	0x0001542d
    7278:	00ffff00 	.word	0x00ffff00

0000727c <smp_encrypt_info>:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
	}
}

static u8_t smp_encrypt_info(struct bt_smp *smp, struct net_buf *buf)
{
    727c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    727e:	0004      	movs	r4, r0
    7280:	000d      	movs	r5, r1
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    7282:	3094      	adds	r0, #148	; 0x94
    7284:	210a      	movs	r1, #10
    7286:	f7fa ffc6 	bl	2216 <atomic_test_bit>
    728a:	2800      	cmp	r0, #0
    728c:	d01d      	beq.n	72ca <smp_encrypt_info+0x4e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    728e:	6826      	ldr	r6, [r4, #0]
    7290:	2004      	movs	r0, #4
    7292:	3654      	adds	r6, #84	; 0x54
    7294:	0031      	movs	r1, r6
static u8_t smp_encrypt_info(struct bt_smp *smp, struct net_buf *buf)
{
	BT_DBG("");

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    7296:	68ad      	ldr	r5, [r5, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    7298:	f001 fac6 	bl	8828 <bt_keys_get_type>
		if (!keys) {
    729c:	2800      	cmp	r0, #0
    729e:	d10f      	bne.n	72c0 <smp_encrypt_info+0x44>
			BT_ERR("Unable to get keys for %s",
    72a0:	0030      	movs	r0, r6
    72a2:	f7fa feaf 	bl	2004 <bt_addr_le_str>
    72a6:	4b0d      	ldr	r3, [pc, #52]	; (72dc <smp_encrypt_info+0x60>)
    72a8:	9001      	str	r0, [sp, #4]
    72aa:	9302      	str	r3, [sp, #8]
    72ac:	4b0c      	ldr	r3, [pc, #48]	; (72e0 <smp_encrypt_info+0x64>)
    72ae:	4a0d      	ldr	r2, [pc, #52]	; (72e4 <smp_encrypt_info+0x68>)
    72b0:	9300      	str	r3, [sp, #0]
    72b2:	490d      	ldr	r1, [pc, #52]	; (72e8 <smp_encrypt_info+0x6c>)
    72b4:	4b0d      	ldr	r3, [pc, #52]	; (72ec <smp_encrypt_info+0x70>)
    72b6:	480e      	ldr	r0, [pc, #56]	; (72f0 <smp_encrypt_info+0x74>)
    72b8:	f7fa fa56 	bl	1768 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    72bc:	2008      	movs	r0, #8
    72be:	e00a      	b.n	72d6 <smp_encrypt_info+0x5a>
		}

		memcpy(keys->ltk.val, req->ltk, 16);
    72c0:	301a      	adds	r0, #26
    72c2:	2210      	movs	r2, #16
    72c4:	0029      	movs	r1, r5
    72c6:	f7fa f84d 	bl	1364 <memcpy>
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    72ca:	0020      	movs	r0, r4
    72cc:	2107      	movs	r1, #7
    72ce:	3090      	adds	r0, #144	; 0x90
    72d0:	f7ff fe3a 	bl	6f48 <atomic_set_bit>

	return 0;
    72d4:	2000      	movs	r0, #0
}
    72d6:	b004      	add	sp, #16
    72d8:	bd70      	pop	{r4, r5, r6, pc}
    72da:	46c0      	nop			; (mov r8, r8)
    72dc:	000145b0 	.word	0x000145b0
    72e0:	000145b5 	.word	0x000145b5
    72e4:	00014570 	.word	0x00014570
    72e8:	00014577 	.word	0x00014577
    72ec:	00016909 	.word	0x00016909
    72f0:	0001542d 	.word	0x0001542d

000072f4 <bt_smp_connected>:
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}

static void bt_smp_connected(struct bt_l2cap_chan *chan)
{
    72f4:	b510      	push	{r4, lr}
    72f6:	0004      	movs	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);

	BT_DBG("chan %p cid 0x%04x", chan,
	       CONTAINER_OF(chan, struct bt_l2cap_le_chan, chan)->tx.cid);

	k_delayed_work_init(&smp->work, smp_timeout);
    72f8:	3071      	adds	r0, #113	; 0x71
    72fa:	4904      	ldr	r1, [pc, #16]	; (730c <bt_smp_connected+0x18>)
    72fc:	30ff      	adds	r0, #255	; 0xff
    72fe:	f00c fe59 	bl	13fb4 <k_delayed_work_init>
	smp_reset(smp);
    7302:	0020      	movs	r0, r4
    7304:	f7ff fe5b 	bl	6fbe <smp_reset>
}
    7308:	bd10      	pop	{r4, pc}
    730a:	46c0      	nop			; (mov r8, r8)
    730c:	000070bd 	.word	0x000070bd

00007310 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
    7310:	b513      	push	{r0, r1, r4, lr}
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    7312:	2106      	movs	r1, #6
    7314:	f7fd ff02 	bl	511c <bt_l2cap_le_lookup_rx_cid>
    7318:	1e04      	subs	r4, r0, #0
	if (!chan) {
    731a:	d109      	bne.n	7330 <smp_chan_get+0x20>
		BT_ERR("Unable to find SMP channel");
    731c:	4b05      	ldr	r3, [pc, #20]	; (7334 <smp_chan_get+0x24>)
    731e:	4a06      	ldr	r2, [pc, #24]	; (7338 <smp_chan_get+0x28>)
    7320:	9301      	str	r3, [sp, #4]
    7322:	4b06      	ldr	r3, [pc, #24]	; (733c <smp_chan_get+0x2c>)
    7324:	4906      	ldr	r1, [pc, #24]	; (7340 <smp_chan_get+0x30>)
    7326:	9300      	str	r3, [sp, #0]
    7328:	4806      	ldr	r0, [pc, #24]	; (7344 <smp_chan_get+0x34>)
    732a:	4b07      	ldr	r3, [pc, #28]	; (7348 <smp_chan_get+0x38>)
    732c:	f7fa fa1c 	bl	1768 <printk>
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
}
    7330:	0020      	movs	r0, r4
    7332:	bd16      	pop	{r1, r2, r4, pc}
    7334:	000145b0 	.word	0x000145b0
    7338:	00014570 	.word	0x00014570
    733c:	000145b5 	.word	0x000145b5
    7340:	00014577 	.word	0x00014577
    7344:	00015457 	.word	0x00015457
    7348:	00016c10 	.word	0x00016c10

0000734c <smp_create_pdu.isra.2>:
				      size_t len)
{
	struct bt_smp_hdr *hdr;
	struct net_buf *buf;

	buf = bt_l2cap_create_pdu(NULL, 0);
    734c:	2100      	movs	r1, #0
	}

	return gen_method_sc[remote_io][get_io_capa()];
}

static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    734e:	b570      	push	{r4, r5, r6, lr}
    7350:	0005      	movs	r5, r0
				      size_t len)
{
	struct bt_smp_hdr *hdr;
	struct net_buf *buf;

	buf = bt_l2cap_create_pdu(NULL, 0);
    7352:	0008      	movs	r0, r1
    7354:	f7fd fe23 	bl	4f9e <bt_l2cap_create_pdu>
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
    7358:	2101      	movs	r1, #1
				      size_t len)
{
	struct bt_smp_hdr *hdr;
	struct net_buf *buf;

	buf = bt_l2cap_create_pdu(NULL, 0);
    735a:	0004      	movs	r4, r0
	/* NULL is not a possible return due to K_FOREVER */

	hdr = net_buf_add(buf, sizeof(*hdr));
    735c:	3008      	adds	r0, #8
    735e:	f00b f9d1 	bl	12704 <net_buf_simple_add>
	hdr->code = op;
    7362:	7005      	strb	r5, [r0, #0]

	return buf;
}
    7364:	0020      	movs	r0, r4
    7366:	bd70      	pop	{r4, r5, r6, pc}

00007368 <ident_sent>:
	return 0;
}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void ident_sent(struct bt_conn *conn)
{
    7368:	b510      	push	{r4, lr}

static void smp_check_complete(struct bt_conn *conn, u8_t dist_complete)
{
	struct bt_l2cap_chan *chan;

	if (conn->type == BT_CONN_TYPE_LE) {
    736a:	7883      	ldrb	r3, [r0, #2]
    736c:	2b00      	cmp	r3, #0
    736e:	d110      	bne.n	7392 <ident_sent+0x2a>
		struct bt_smp *smp;

		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    7370:	2106      	movs	r1, #6
    7372:	f7fd fec1 	bl	50f8 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");

		smp = CONTAINER_OF(chan, struct bt_smp, chan);
		smp->local_dist &= ~dist_complete;
    7376:	226e      	movs	r2, #110	; 0x6e
    7378:	2101      	movs	r1, #1
    737a:	32ff      	adds	r2, #255	; 0xff
    737c:	5c83      	ldrb	r3, [r0, r2]
    737e:	438b      	bics	r3, r1
    7380:	5483      	strb	r3, [r0, r2]

		/* if all keys were distributed, pairing is done */
		if (!smp->local_dist && !smp->remote_dist) {
    7382:	0003      	movs	r3, r0
    7384:	33fc      	adds	r3, #252	; 0xfc
    7386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    7388:	4b02      	ldr	r3, [pc, #8]	; (7394 <ident_sent+0x2c>)
    738a:	421a      	tst	r2, r3
    738c:	d101      	bne.n	7392 <ident_sent+0x2a>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    738e:	f7ff fe16 	bl	6fbe <smp_reset>

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void ident_sent(struct bt_conn *conn)
{
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
}
    7392:	bd10      	pop	{r4, pc}
    7394:	00ffff00 	.word	0x00ffff00

00007398 <sys_mem_swap.constprop.13>:
 * Where n is an index and 'end' the last index of buf.
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
    7398:	0003      	movs	r3, r0
    739a:	b510      	push	{r4, lr}
    739c:	330f      	adds	r3, #15
    739e:	1dc2      	adds	r2, r0, #7
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];
    73a0:	7801      	ldrb	r1, [r0, #0]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    73a2:	781c      	ldrb	r4, [r3, #0]
    73a4:	3b01      	subs	r3, #1
    73a6:	7004      	strb	r4, [r0, #0]
		((u8_t *)buf)[length - 1 - i] = tmp;
    73a8:	7059      	strb	r1, [r3, #1]
    73aa:	3001      	adds	r0, #1
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    73ac:	4293      	cmp	r3, r2
    73ae:	d1f7      	bne.n	73a0 <sys_mem_swap.constprop.13+0x8>
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
		((u8_t *)buf)[length - 1 - i] = tmp;
	}
}
    73b0:	bd10      	pop	{r4, pc}

000073b2 <smp_f6>:
}

static int smp_f6(const u8_t *w, const u8_t *n1, const u8_t *n2,
		  const u8_t *r, const u8_t *iocap, const bt_addr_le_t *a1,
		  const bt_addr_le_t *a2, u8_t *check)
{
    73b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    73b4:	0017      	movs	r7, r2
    73b6:	001e      	movs	r6, r3
    73b8:	b099      	sub	sp, #100	; 0x64
    73ba:	9001      	str	r0, [sp, #4]
	BT_DBG("w %s", bt_hex(w, 16));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));
	BT_DBG("r %s io_cap %s", bt_hex(r, 16), bt_hex(iocap, 3));
	BT_DBG("a1 %s a2 %s", bt_hex(a1, 7), bt_hex(a2, 7));

	sys_memcpy_swap(m, n1, 16);
    73bc:	2210      	movs	r2, #16
    73be:	a807      	add	r0, sp, #28
}

static int smp_f6(const u8_t *w, const u8_t *n1, const u8_t *n2,
		  const u8_t *r, const u8_t *iocap, const bt_addr_le_t *a1,
		  const bt_addr_le_t *a2, u8_t *check)
{
    73c0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    73c2:	9c20      	ldr	r4, [sp, #128]	; 0x80
	BT_DBG("w %s", bt_hex(w, 16));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));
	BT_DBG("r %s io_cap %s", bt_hex(r, 16), bt_hex(iocap, 3));
	BT_DBG("a1 %s a2 %s", bt_hex(a1, 7), bt_hex(a2, 7));

	sys_memcpy_swap(m, n1, 16);
    73c4:	f7ff fd60 	bl	6e88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    73c8:	2210      	movs	r2, #16
    73ca:	0039      	movs	r1, r7
    73cc:	a80b      	add	r0, sp, #44	; 0x2c
    73ce:	f7ff fd5b 	bl	6e88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    73d2:	2210      	movs	r2, #16
    73d4:	0031      	movs	r1, r6
    73d6:	a80f      	add	r0, sp, #60	; 0x3c
    73d8:	f7ff fd56 	bl	6e88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    73dc:	2203      	movs	r2, #3
    73de:	991e      	ldr	r1, [sp, #120]	; 0x78
    73e0:	a813      	add	r0, sp, #76	; 0x4c
    73e2:	f7ff fd51 	bl	6e88 <sys_memcpy_swap>

	m[51] = a1->type;
    73e6:	2347      	movs	r3, #71	; 0x47
    73e8:	782a      	ldrb	r2, [r5, #0]
    73ea:	a902      	add	r1, sp, #8
    73ec:	185b      	adds	r3, r3, r1
	memcpy(m + 52, a1->a.val, 6);
    73ee:	3501      	adds	r5, #1
	sys_memcpy_swap(m, n1, 16);
	sys_memcpy_swap(m + 16, n2, 16);
	sys_memcpy_swap(m + 32, r, 16);
	sys_memcpy_swap(m + 48, iocap, 3);

	m[51] = a1->type;
    73f0:	701a      	strb	r2, [r3, #0]
	memcpy(m + 52, a1->a.val, 6);
    73f2:	0029      	movs	r1, r5
    73f4:	2206      	movs	r2, #6
    73f6:	a814      	add	r0, sp, #80	; 0x50
    73f8:	f7f9 ffb4 	bl	1364 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    73fc:	2206      	movs	r2, #6
    73fe:	0029      	movs	r1, r5
    7400:	a814      	add	r0, sp, #80	; 0x50
    7402:	f7ff fd41 	bl	6e88 <sys_memcpy_swap>

	m[58] = a2->type;
    7406:	234e      	movs	r3, #78	; 0x4e
    7408:	7822      	ldrb	r2, [r4, #0]
    740a:	a902      	add	r1, sp, #8
    740c:	185b      	adds	r3, r3, r1
    740e:	701a      	strb	r2, [r3, #0]
	memcpy(m + 59, a2->a.val, 6);
    7410:	234f      	movs	r3, #79	; 0x4f
    7412:	a802      	add	r0, sp, #8
    7414:	3401      	adds	r4, #1
    7416:	181b      	adds	r3, r3, r0
    7418:	0021      	movs	r1, r4
    741a:	2206      	movs	r2, #6
    741c:	0018      	movs	r0, r3
    741e:	f7f9 ffa1 	bl	1364 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    7422:	234f      	movs	r3, #79	; 0x4f
    7424:	a802      	add	r0, sp, #8
    7426:	181b      	adds	r3, r3, r0
    7428:	0018      	movs	r0, r3
    742a:	0021      	movs	r1, r4
    742c:	2206      	movs	r2, #6
    742e:	f7ff fd2b 	bl	6e88 <sys_memcpy_swap>

	sys_memcpy_swap(ws, w, 16);
    7432:	2210      	movs	r2, #16
    7434:	9901      	ldr	r1, [sp, #4]
    7436:	a803      	add	r0, sp, #12
    7438:	f7ff fd26 	bl	6e88 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    743c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    743e:	2241      	movs	r2, #65	; 0x41
    7440:	a907      	add	r1, sp, #28
    7442:	a803      	add	r0, sp, #12
    7444:	f7ff fd9c 	bl	6f80 <bt_smp_aes_cmac>
    7448:	1e04      	subs	r4, r0, #0
	if (err) {
    744a:	d102      	bne.n	7452 <smp_f6+0xa0>
		return err;
	}

	BT_DBG("res %s", bt_hex(check, 16));

	sys_mem_swap(check, 16);
    744c:	9821      	ldr	r0, [sp, #132]	; 0x84
    744e:	f7ff ffa3 	bl	7398 <sys_mem_swap.constprop.13>

	return 0;
}
    7452:	0020      	movs	r0, r4
    7454:	b019      	add	sp, #100	; 0x64
    7456:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007458 <smp_f4>:
	return 0;
}

static int smp_f4(const u8_t *u, const u8_t *v, const u8_t *x,
		  u8_t z, u8_t res[16])
{
    7458:	b570      	push	{r4, r5, r6, lr}
    745a:	000e      	movs	r6, r1
    745c:	0014      	movs	r4, r2
    745e:	001d      	movs	r5, r3
    7460:	b096      	sub	sp, #88	; 0x58
	 * Core Spec 4.2 Vol 3 Part H 2.2.5
	 *
	 * note:
	 * bt_smp_aes_cmac uses BE data and smp_f4 accept LE so we swap
	 */
	sys_memcpy_swap(m, u, 32);
    7462:	0001      	movs	r1, r0
    7464:	2220      	movs	r2, #32
    7466:	a805      	add	r0, sp, #20
    7468:	f7ff fd0e 	bl	6e88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    746c:	2220      	movs	r2, #32
    746e:	0031      	movs	r1, r6
    7470:	a80d      	add	r0, sp, #52	; 0x34
    7472:	f7ff fd09 	bl	6e88 <sys_memcpy_swap>
	m[64] = z;
    7476:	ab15      	add	r3, sp, #84	; 0x54

	sys_memcpy_swap(xs, x, 16);
    7478:	0021      	movs	r1, r4
    747a:	2210      	movs	r2, #16
    747c:	a801      	add	r0, sp, #4
	 * note:
	 * bt_smp_aes_cmac uses BE data and smp_f4 accept LE so we swap
	 */
	sys_memcpy_swap(m, u, 32);
	sys_memcpy_swap(m + 32, v, 32);
	m[64] = z;
    747e:	701d      	strb	r5, [r3, #0]

	sys_memcpy_swap(xs, x, 16);
    7480:	f7ff fd02 	bl	6e88 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    7484:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    7486:	2241      	movs	r2, #65	; 0x41
    7488:	a905      	add	r1, sp, #20
    748a:	a801      	add	r0, sp, #4
    748c:	f7ff fd78 	bl	6f80 <bt_smp_aes_cmac>
    7490:	1e04      	subs	r4, r0, #0
	if (err) {
    7492:	d102      	bne.n	749a <smp_f4+0x42>
		return err;
	}

	sys_mem_swap(res, 16);
    7494:	981a      	ldr	r0, [sp, #104]	; 0x68
    7496:	f7ff ff7f 	bl	7398 <sys_mem_swap.constprop.13>

	BT_DBG("res %s", bt_hex(res, 16));

	return err;
}
    749a:	0020      	movs	r0, r4
    749c:	b016      	add	sp, #88	; 0x58
    749e:	bd70      	pop	{r4, r5, r6, pc}

000074a0 <smp_send>:
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
}

static void smp_send(struct bt_smp *smp, struct net_buf *buf,
		     bt_conn_tx_cb_t cb)
{
    74a0:	b510      	push	{r4, lr}
    74a2:	0004      	movs	r4, r0
    74a4:	0013      	movs	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    74a6:	6800      	ldr	r0, [r0, #0]
    74a8:	000a      	movs	r2, r1
    74aa:	2106      	movs	r1, #6
    74ac:	f7fd fd7c 	bl	4fa8 <bt_l2cap_send_cb>
	k_delayed_work_submit(&smp->work, SMP_TIMEOUT);
    74b0:	0021      	movs	r1, r4
    74b2:	3171      	adds	r1, #113	; 0x71
    74b4:	31ff      	adds	r1, #255	; 0xff
    74b6:	4a02      	ldr	r2, [pc, #8]	; (74c0 <smp_send+0x20>)
    74b8:	4802      	ldr	r0, [pc, #8]	; (74c4 <smp_send+0x24>)
    74ba:	f00c fdc9 	bl	14050 <k_delayed_work_submit_to_queue>
}
    74be:	bd10      	pop	{r4, pc}
    74c0:	00007530 	.word	0x00007530
    74c4:	20002000 	.word	0x20002000

000074c8 <compute_and_check_and_send_slave_dhcheck>:
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t compute_and_check_and_send_slave_dhcheck(struct bt_smp *smp)
{
    74c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    74ca:	0004      	movs	r4, r0
    74cc:	b0a5      	sub	sp, #148	; 0x94
	u8_t re[16], e[16], r[16];

	memset(r, 0, sizeof(r));
    74ce:	2210      	movs	r2, #16
    74d0:	2100      	movs	r1, #0
    74d2:	a806      	add	r0, sp, #24
    74d4:	f7f9 ff70 	bl	13b8 <memset>

	switch (smp->method) {
    74d8:	0023      	movs	r3, r4
    74da:	3398      	adds	r3, #152	; 0x98
    74dc:	7818      	ldrb	r0, [r3, #0]
	case PASSKEY_DISPLAY:
	case PASSKEY_INPUT:
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    74de:	2308      	movs	r3, #8
{
	u8_t re[16], e[16], r[16];

	memset(r, 0, sizeof(r));

	switch (smp->method) {
    74e0:	2803      	cmp	r0, #3
    74e2:	d900      	bls.n	74e6 <compute_and_check_and_send_slave_dhcheck+0x1e>
    74e4:	e0c6      	b.n	7674 <compute_and_check_and_send_slave_dhcheck+0x1ac>
    74e6:	f7f8 fe47 	bl	178 <__gnu_thumb1_case_uqi>
    74ea:	0209      	.short	0x0209
    74ec:	0902      	.short	0x0902
	case JUST_WORKS:
	case PASSKEY_CONFIRM:
		break;
	case PASSKEY_DISPLAY:
	case PASSKEY_INPUT:
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    74ee:	0021      	movs	r1, r4
    74f0:	3169      	adds	r1, #105	; 0x69
    74f2:	2204      	movs	r2, #4
    74f4:	31ff      	adds	r1, #255	; 0xff
    74f6:	a806      	add	r0, sp, #24
    74f8:	f7f9 ff34 	bl	1364 <memcpy>
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    74fc:	0023      	movs	r3, r4
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    74fe:	ad16      	add	r5, sp, #88	; 0x58
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    7500:	33c7      	adds	r3, #199	; 0xc7
    7502:	9304      	str	r3, [sp, #16]
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    7504:	2235      	movs	r2, #53	; 0x35
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    7506:	3b10      	subs	r3, #16
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    7508:	2100      	movs	r1, #0
    750a:	0028      	movs	r0, r5
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    750c:	9305      	str	r3, [sp, #20]
		   &smp->chan.chan.conn->le.init_addr,
    750e:	6826      	ldr	r6, [r4, #0]
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    7510:	f7f9 ff52 	bl	13b8 <memset>
    7514:	2362      	movs	r3, #98	; 0x62
    7516:	706b      	strb	r3, [r5, #1]
    7518:	3312      	adds	r3, #18
    751a:	70ab      	strb	r3, [r5, #2]
    751c:	3b08      	subs	r3, #8
    751e:	70eb      	strb	r3, [r5, #3]
    7520:	3b07      	subs	r3, #7
    7522:	712b      	strb	r3, [r5, #4]
    7524:	aa02      	add	r2, sp, #8
    7526:	331e      	adds	r3, #30
	int err;

	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
    7528:	0021      	movs	r1, r4
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    752a:	189b      	adds	r3, r3, r2
    752c:	2201      	movs	r2, #1
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    752e:	0027      	movs	r7, r4
	int err;

	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
    7530:	3128      	adds	r1, #40	; 0x28
		  u8_t *ltk)
{
	static const u8_t salt[16] = { 0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5,
					  0xa5, 0x38, 0x60, 0x37, 0x0b, 0xdb,
					  0x5a, 0x60, 0x83, 0xbe };
	u8_t m[53] = { 0x00, /* counter */
    7532:	701a      	strb	r2, [r3, #0]
	int err;

	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
    7534:	31ff      	adds	r1, #255	; 0xff
    7536:	2220      	movs	r2, #32
    7538:	a80e      	add	r0, sp, #56	; 0x38
    753a:	f7ff fca5 	bl	6e88 <sys_memcpy_swap>
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    753e:	3758      	adds	r7, #88	; 0x58
	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);

	err = bt_smp_aes_cmac(salt, ws, 32, t);
    7540:	ab0a      	add	r3, sp, #40	; 0x28
    7542:	2220      	movs	r2, #32
    7544:	a90e      	add	r1, sp, #56	; 0x38
    7546:	484d      	ldr	r0, [pc, #308]	; (767c <compute_and_check_and_send_slave_dhcheck+0x1b4>)
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    7548:	37ff      	adds	r7, #255	; 0xff
	BT_DBG("w %s", bt_hex(w, 32));
	BT_DBG("n1 %s n2 %s", bt_hex(n1, 16), bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);

	err = bt_smp_aes_cmac(salt, ws, 32, t);
    754a:	f7ff fd19 	bl	6f80 <bt_smp_aes_cmac>
	if (err) {
    754e:	2800      	cmp	r0, #0
    7550:	d144      	bne.n	75dc <compute_and_check_and_send_slave_dhcheck+0x114>
		return err;
	}

	BT_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
    7552:	ab02      	add	r3, sp, #8
    7554:	3055      	adds	r0, #85	; 0x55
    7556:	18c0      	adds	r0, r0, r3
    7558:	2210      	movs	r2, #16
    755a:	9904      	ldr	r1, [sp, #16]
    755c:	f7ff fc94 	bl	6e88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    7560:	2065      	movs	r0, #101	; 0x65
    7562:	ab02      	add	r3, sp, #8
    7564:	18c0      	adds	r0, r0, r3
    7566:	2210      	movs	r2, #16
    7568:	9905      	ldr	r1, [sp, #20]
    756a:	f7ff fc8d 	bl	6e88 <sys_memcpy_swap>
	m[37] = a1->type;
    756e:	0033      	movs	r3, r6
    7570:	335b      	adds	r3, #91	; 0x5b
    7572:	781a      	ldrb	r2, [r3, #0]
    7574:	2356      	movs	r3, #86	; 0x56
    7576:	a902      	add	r1, sp, #8
    7578:	185b      	adds	r3, r3, r1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    757a:	2076      	movs	r0, #118	; 0x76
    757c:	0031      	movs	r1, r6

	BT_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
	sys_memcpy_swap(m + 21, n2, 16);
	m[37] = a1->type;
    757e:	77da      	strb	r2, [r3, #31]
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    7580:	ab02      	add	r3, sp, #8
    7582:	18c0      	adds	r0, r0, r3
    7584:	315c      	adds	r1, #92	; 0x5c
    7586:	2206      	movs	r2, #6
    7588:	f7ff fc7e 	bl	6e88 <sys_memcpy_swap>
	m[44] = a2->type;
    758c:	0033      	movs	r3, r6
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    758e:	0031      	movs	r1, r6
    7590:	207d      	movs	r0, #125	; 0x7d

	sys_memcpy_swap(m + 5, n1, 16);
	sys_memcpy_swap(m + 21, n2, 16);
	m[37] = a1->type;
	sys_memcpy_swap(m + 38, a1->a.val, 6);
	m[44] = a2->type;
    7592:	3362      	adds	r3, #98	; 0x62
    7594:	781a      	ldrb	r2, [r3, #0]
    7596:	ab21      	add	r3, sp, #132	; 0x84
    7598:	701a      	strb	r2, [r3, #0]
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    759a:	ab02      	add	r3, sp, #8
    759c:	18c0      	adds	r0, r0, r3
    759e:	3163      	adds	r1, #99	; 0x63
    75a0:	2206      	movs	r2, #6
    75a2:	f7ff fc71 	bl	6e88 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    75a6:	003b      	movs	r3, r7
    75a8:	2235      	movs	r2, #53	; 0x35
    75aa:	0029      	movs	r1, r5
    75ac:	a80a      	add	r0, sp, #40	; 0x28
    75ae:	f7ff fce7 	bl	6f80 <bt_smp_aes_cmac>
	if (err) {
    75b2:	2800      	cmp	r0, #0
    75b4:	d112      	bne.n	75dc <compute_and_check_and_send_slave_dhcheck+0x114>
		return err;
	}

	BT_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
    75b6:	0038      	movs	r0, r7

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
		   smp->tk)) {
    75b8:	0026      	movs	r6, r4
		return err;
	}

	BT_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
    75ba:	f7ff feed 	bl	7398 <sys_mem_swap.constprop.13>

	/* counter for ltk is 1 */
	m[0] = 0x01;
    75be:	2301      	movs	r3, #1

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
		   smp->tk)) {
    75c0:	36d7      	adds	r6, #215	; 0xd7
	BT_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);

	/* counter for ltk is 1 */
	m[0] = 0x01;
    75c2:	702b      	strb	r3, [r5, #0]

	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    75c4:	2235      	movs	r2, #53	; 0x35
    75c6:	0033      	movs	r3, r6
    75c8:	0029      	movs	r1, r5
    75ca:	a80a      	add	r0, sp, #40	; 0x28
    75cc:	f7ff fcd8 	bl	6f80 <bt_smp_aes_cmac>
	if (err) {
    75d0:	2800      	cmp	r0, #0
    75d2:	d103      	bne.n	75dc <compute_and_check_and_send_slave_dhcheck+0x114>
		return err;
	}

	BT_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
    75d4:	0030      	movs	r0, r6
    75d6:	f7ff fedf 	bl	7398 <sys_mem_swap.constprop.13>
    75da:	e003      	b.n	75e4 <compute_and_check_and_send_slave_dhcheck+0x11c>
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate LTK and mackey */
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    75dc:	2800      	cmp	r0, #0
    75de:	d001      	beq.n	75e4 <compute_and_check_and_send_slave_dhcheck+0x11c>
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
    75e0:	2308      	movs	r3, #8
    75e2:	e047      	b.n	7674 <compute_and_check_and_send_slave_dhcheck+0x1ac>
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
		   &smp->chan.chan.conn->le.resp_addr,
    75e4:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    75e6:	ad16      	add	r5, sp, #88	; 0x58
		   &smp->chan.chan.conn->le.resp_addr,
		   &smp->chan.chan.conn->le.init_addr, e)) {
    75e8:	001a      	movs	r2, r3
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
		   &smp->chan.chan.conn->le.resp_addr,
    75ea:	3362      	adds	r3, #98	; 0x62
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    75ec:	9301      	str	r3, [sp, #4]
    75ee:	0023      	movs	r3, r4
		   &smp->chan.chan.conn->le.resp_addr,
		   &smp->chan.chan.conn->le.init_addr, e)) {
    75f0:	325b      	adds	r2, #91	; 0x5b
		   smp->tk)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate local DHKey check */
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    75f2:	33a1      	adds	r3, #161	; 0xa1
    75f4:	9202      	str	r2, [sp, #8]
    75f6:	9300      	str	r3, [sp, #0]
    75f8:	9503      	str	r5, [sp, #12]
    75fa:	ab06      	add	r3, sp, #24
    75fc:	9a04      	ldr	r2, [sp, #16]
    75fe:	9905      	ldr	r1, [sp, #20]
    7600:	0038      	movs	r0, r7
    7602:	f7ff fed6 	bl	73b2 <smp_f6>
    7606:	2800      	cmp	r0, #0
    7608:	d1ea      	bne.n	75e0 <compute_and_check_and_send_slave_dhcheck+0x118>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
		   &smp->chan.chan.conn->le.init_addr,
    760a:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.init_addr, e)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    760c:	ae0e      	add	r6, sp, #56	; 0x38
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    760e:	001a      	movs	r2, r3
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
		   &smp->chan.chan.conn->le.init_addr,
    7610:	335b      	adds	r3, #91	; 0x5b
		   &smp->chan.chan.conn->le.init_addr, e)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    7612:	9301      	str	r3, [sp, #4]
    7614:	0023      	movs	r3, r4
		   &smp->chan.chan.conn->le.init_addr,
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    7616:	3262      	adds	r2, #98	; 0x62
		   &smp->chan.chan.conn->le.init_addr, e)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* calculate remote DHKey check */
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    7618:	339a      	adds	r3, #154	; 0x9a
    761a:	9202      	str	r2, [sp, #8]
    761c:	9300      	str	r3, [sp, #0]
    761e:	9603      	str	r6, [sp, #12]
    7620:	ab06      	add	r3, sp, #24
    7622:	9a05      	ldr	r2, [sp, #20]
    7624:	9904      	ldr	r1, [sp, #16]
    7626:	0038      	movs	r0, r7
    7628:	f7ff fec3 	bl	73b2 <smp_f6>
    762c:	2800      	cmp	r0, #0
    762e:	d1d7      	bne.n	75e0 <compute_and_check_and_send_slave_dhcheck+0x118>
		   &smp->chan.chan.conn->le.resp_addr, re)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* compare received E with calculated remote */
	if (memcmp(smp->e, re, 16)) {
    7630:	0020      	movs	r0, r4
    7632:	3048      	adds	r0, #72	; 0x48
    7634:	0031      	movs	r1, r6
    7636:	2210      	movs	r2, #16
    7638:	30ff      	adds	r0, #255	; 0xff
    763a:	f7f9 fe6b 	bl	1314 <memcmp>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    763e:	230b      	movs	r3, #11
		   &smp->chan.chan.conn->le.resp_addr, re)) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	/* compare received E with calculated remote */
	if (memcmp(smp->e, re, 16)) {
    7640:	1e06      	subs	r6, r0, #0
    7642:	d117      	bne.n	7674 <compute_and_check_and_send_slave_dhcheck+0x1ac>
	struct bt_smp_dhkey_check *req;
	struct net_buf *buf;

	BT_DBG("");

	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    7644:	200d      	movs	r0, #13
    7646:	f7ff fe81 	bl	734c <smp_create_pdu.isra.2>
    764a:	1e07      	subs	r7, r0, #0
			     sizeof(*req));
	if (!buf) {
    764c:	d00c      	beq.n	7668 <compute_and_check_and_send_slave_dhcheck+0x1a0>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));
    764e:	2110      	movs	r1, #16
    7650:	3008      	adds	r0, #8
    7652:	f00b f857 	bl	12704 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    7656:	2210      	movs	r2, #16
    7658:	0029      	movs	r1, r5
    765a:	f7f9 fe83 	bl	1364 <memcpy>

	smp_send(smp, buf, NULL);
    765e:	0032      	movs	r2, r6
    7660:	0039      	movs	r1, r7
    7662:	0020      	movs	r0, r4
    7664:	f7ff ff1c 	bl	74a0 <smp_send>
	}

	/* send local e */
	sc_smp_send_dhkey_check(smp, e);

	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    7668:	0020      	movs	r0, r4
    766a:	2101      	movs	r1, #1
    766c:	3094      	adds	r0, #148	; 0x94
    766e:	f7ff fc6b 	bl	6f48 <atomic_set_bit>
	return 0;
    7672:	2300      	movs	r3, #0
}
    7674:	0018      	movs	r0, r3
    7676:	b025      	add	sp, #148	; 0x94
    7678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    767a:	46c0      	nop			; (mov r8, r8)
    767c:	00016ce4 	.word	0x00016ce4

00007680 <send_pairing_rsp>:
#endif /* CONFIG_BLUETOOTH_SIGNING */
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t send_pairing_rsp(struct bt_smp *smp)
{
    7680:	b570      	push	{r4, r5, r6, lr}
    7682:	0005      	movs	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing *rsp;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    7684:	2002      	movs	r0, #2
    7686:	f7ff fe61 	bl	734c <smp_create_pdu.isra.2>
    768a:	0004      	movs	r4, r0
	if (!rsp_buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    768c:	2008      	movs	r0, #8
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing *rsp;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
	if (!rsp_buf) {
    768e:	2c00      	cmp	r4, #0
    7690:	d00f      	beq.n	76b2 <send_pairing_rsp+0x32>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    7692:	0020      	movs	r0, r4
    7694:	2106      	movs	r1, #6
    7696:	3008      	adds	r0, #8
    7698:	f00b f834 	bl	12704 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    769c:	0029      	movs	r1, r5
    769e:	2206      	movs	r2, #6
    76a0:	31a1      	adds	r1, #161	; 0xa1
    76a2:	f7f9 fe5f 	bl	1364 <memcpy>

	smp_send(smp, rsp_buf, NULL);
    76a6:	0028      	movs	r0, r5
    76a8:	2200      	movs	r2, #0
    76aa:	0021      	movs	r1, r4
    76ac:	f7ff fef8 	bl	74a0 <smp_send>

	return 0;
    76b0:	2000      	movs	r0, #0
}
    76b2:	bd70      	pop	{r4, r5, r6, pc}

000076b4 <smp_pairing_req>:

	return 0;
}

static u8_t smp_pairing_req(struct bt_smp *smp, struct net_buf *buf)
{
    76b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    76b6:	688b      	ldr	r3, [r1, #8]

	return 0;
}

static u8_t smp_pairing_req(struct bt_smp *smp, struct net_buf *buf)
{
    76b8:	b08b      	sub	sp, #44	; 0x2c
	struct bt_smp_pairing *req = (void *)buf->data;
    76ba:	9304      	str	r3, [sp, #16]
	struct bt_smp_pairing *rsp;
	int ret;

	BT_DBG("");

	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    76bc:	78db      	ldrb	r3, [r3, #3]

	return 0;
}

static u8_t smp_pairing_req(struct bt_smp *smp, struct net_buf *buf)
{
    76be:	0005      	movs	r5, r0
	struct bt_smp_pairing *rsp;
	int ret;

	BT_DBG("");

	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    76c0:	3b07      	subs	r3, #7
	    (req->max_key_size < BT_SMP_MIN_ENC_KEY_SIZE)) {
		return BT_SMP_ERR_ENC_KEY_SIZE;
    76c2:	2406      	movs	r4, #6
	struct bt_smp_pairing *rsp;
	int ret;

	BT_DBG("");

	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    76c4:	2b09      	cmp	r3, #9
    76c6:	d900      	bls.n	76ca <smp_pairing_req+0x16>
    76c8:	e14e      	b.n	7968 <smp_pairing_req+0x2b4>
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static int smp_init(struct bt_smp *smp)
{
	/* Initialize SMP context without clearing L2CAP channel context */
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    76ca:	0003      	movs	r3, r0
    76cc:	3390      	adds	r3, #144	; 0x90
    76ce:	22e0      	movs	r2, #224	; 0xe0
    76d0:	2100      	movs	r1, #0
    76d2:	0018      	movs	r0, r3
    76d4:	9305      	str	r3, [sp, #20]
    76d6:	f7f9 fe6f 	bl	13b8 <memset>
	       sizeof(*smp) - (sizeof(smp->chan) + sizeof(smp->work)));

	/* Generate local random number */
	if (bt_rand(smp->prnd, 16)) {
    76da:	0028      	movs	r0, r5
    76dc:	2110      	movs	r1, #16
    76de:	30b7      	adds	r0, #183	; 0xb7
    76e0:	f003 ffce 	bl	b680 <bt_rand>
		return BT_SMP_ERR_ENC_KEY_SIZE;
	}

	ret = smp_init(smp);
	if (ret) {
		return ret;
    76e4:	3402      	adds	r4, #2
	/* Initialize SMP context without clearing L2CAP channel context */
	memset((u8_t *)smp + sizeof(smp->chan), 0,
	       sizeof(*smp) - (sizeof(smp->chan) + sizeof(smp->work)));

	/* Generate local random number */
	if (bt_rand(smp->prnd, 16)) {
    76e6:	2800      	cmp	r0, #0
    76e8:	d000      	beq.n	76ec <smp_pairing_req+0x38>
    76ea:	e13d      	b.n	7968 <smp_pairing_req+0x2b4>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("prnd %s", bt_hex(smp->prnd, 16));

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    76ec:	2105      	movs	r1, #5
    76ee:	9805      	ldr	r0, [sp, #20]
    76f0:	f7ff fc2a 	bl	6f48 <atomic_set_bit>
	if (ret) {
		return ret;
	}

	/* Store req for later use */
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    76f4:	002b      	movs	r3, r5
    76f6:	2201      	movs	r2, #1
    76f8:	3399      	adds	r3, #153	; 0x99
    76fa:	701a      	strb	r2, [r3, #0]
	memcpy(smp->preq + 1, req, sizeof(*req));
    76fc:	189b      	adds	r3, r3, r2
    76fe:	0018      	movs	r0, r3
    7700:	3205      	adds	r2, #5
    7702:	9904      	ldr	r1, [sp, #16]
    7704:	9307      	str	r3, [sp, #28]
    7706:	f7f9 fe2d 	bl	1364 <memcpy>

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    770a:	002b      	movs	r3, r5
    770c:	2202      	movs	r2, #2
    770e:	33a0      	adds	r3, #160	; 0xa0
    7710:	701a      	strb	r2, [r3, #0]
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    7712:	4a97      	ldr	r2, [pc, #604]	; (7970 <smp_pairing_req+0x2bc>)

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
    7714:	9b04      	ldr	r3, [sp, #16]
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    7716:	7812      	ldrb	r2, [r2, #0]

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
    7718:	789b      	ldrb	r3, [r3, #2]
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
		auth &= BT_SMP_AUTH_MASK_SC;
    771a:	3407      	adds	r4, #7
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    771c:	2a00      	cmp	r2, #0
    771e:	d100      	bne.n	7722 <smp_pairing_req+0x6e>
		auth &= BT_SMP_AUTH_MASK_SC;
	} else {
		auth &= BT_SMP_AUTH_MASK;
    7720:	2407      	movs	r4, #7
    7722:	401c      	ands	r4, r3
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    7724:	f7ff fbba 	bl	6e9c <get_io_capa>
    7728:	2304      	movs	r3, #4
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    772a:	001f      	movs	r7, r3
    772c:	4327      	orrs	r7, r4
		auth &= BT_SMP_AUTH_MASK_SC;
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    772e:	2803      	cmp	r0, #3
    7730:	d101      	bne.n	7736 <smp_pairing_req+0x82>
		auth &= ~(BT_SMP_AUTH_MITM);
    7732:	439c      	bics	r4, r3
    7734:	0027      	movs	r7, r4

	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
    7736:	002e      	movs	r6, r5
    7738:	36a1      	adds	r6, #161	; 0xa1
    773a:	70b7      	strb	r7, [r6, #2]
	rsp->io_capability = get_io_capa();
    773c:	f7ff fbae 	bl	6e9c <get_io_capa>
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    7740:	2310      	movs	r3, #16
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
	rsp->io_capability = get_io_capa();
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    7742:	2400      	movs	r4, #0
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    7744:	70f3      	strb	r3, [r6, #3]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    7746:	9b04      	ldr	r3, [sp, #16]
	/* create rsp, it will be used later on */
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	rsp->auth_req = get_auth(req->auth_req);
	rsp->io_capability = get_io_capa();
    7748:	7030      	strb	r0, [r6, #0]
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    774a:	7074      	strb	r4, [r6, #1]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    774c:	791a      	ldrb	r2, [r3, #4]
    774e:	2303      	movs	r3, #3
    7750:	4013      	ands	r3, r2
    7752:	7133      	strb	r3, [r6, #4]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    7754:	9b04      	ldr	r3, [sp, #16]
    7756:	795a      	ldrb	r2, [r3, #5]
    7758:	2301      	movs	r3, #1
    775a:	4013      	ands	r3, r2
    775c:	7173      	strb	r3, [r6, #5]

	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    775e:	2308      	movs	r3, #8
    7760:	421f      	tst	r7, r3
    7762:	d00d      	beq.n	7780 <smp_pairing_req+0xcc>
    7764:	9a04      	ldr	r2, [sp, #16]
    7766:	7892      	ldrb	r2, [r2, #2]
    7768:	421a      	tst	r2, r3
    776a:	d009      	beq.n	7780 <smp_pairing_req+0xcc>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    776c:	0028      	movs	r0, r5
    776e:	2105      	movs	r1, #5
    7770:	3094      	adds	r0, #148	; 0x94
    7772:	f7ff fbe9 	bl	6f48 <atomic_set_bit>

		rsp->init_key_dist &= RECV_KEYS_SC;
    7776:	2302      	movs	r3, #2
    7778:	7932      	ldrb	r2, [r6, #4]
		rsp->resp_key_dist &= SEND_KEYS_SC;
    777a:	7174      	strb	r4, [r6, #5]

	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
	    (req->auth_req & BT_SMP_AUTH_SC)) {
		atomic_set_bit(smp->flags, SMP_FLAG_SC);

		rsp->init_key_dist &= RECV_KEYS_SC;
    777c:	4013      	ands	r3, r2
    777e:	7133      	strb	r3, [r6, #4]
    7780:	002f      	movs	r7, r5
		rsp->resp_key_dist &= SEND_KEYS_SC;
	}

	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    7782:	2320      	movs	r3, #32
    7784:	78b2      	ldrb	r2, [r6, #2]
    7786:	3794      	adds	r7, #148	; 0x94
    7788:	421a      	tst	r2, r3
    778a:	d007      	beq.n	779c <smp_pairing_req+0xe8>
    778c:	9a04      	ldr	r2, [sp, #16]
    778e:	7892      	ldrb	r2, [r2, #2]
    7790:	421a      	tst	r2, r3
    7792:	d003      	beq.n	779c <smp_pairing_req+0xe8>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    7794:	2111      	movs	r1, #17
    7796:	0038      	movs	r0, r7
    7798:	f7ff fbd6 	bl	6f48 <atomic_set_bit>
	}

	smp->local_dist = rsp->resp_key_dist;
    779c:	236e      	movs	r3, #110	; 0x6e
    779e:	7972      	ldrb	r2, [r6, #5]
    77a0:	33ff      	adds	r3, #255	; 0xff
    77a2:	54ea      	strb	r2, [r5, r3]
	smp->remote_dist = rsp->init_key_dist;
    77a4:	7932      	ldrb	r2, [r6, #4]
    77a6:	3301      	adds	r3, #1
    77a8:	54ea      	strb	r2, [r5, r3]

	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    77aa:	78b2      	ldrb	r2, [r6, #2]
    77ac:	3b6e      	subs	r3, #110	; 0x6e
    77ae:	3bff      	subs	r3, #255	; 0xff
    77b0:	421a      	tst	r2, r3
    77b2:	d007      	beq.n	77c4 <smp_pairing_req+0x110>
    77b4:	9a04      	ldr	r2, [sp, #16]
    77b6:	7892      	ldrb	r2, [r2, #2]
    77b8:	421a      	tst	r2, r3
    77ba:	d003      	beq.n	77c4 <smp_pairing_req+0x110>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    77bc:	210a      	movs	r1, #10
    77be:	0038      	movs	r0, r7
    77c0:	f7ff fbc2 	bl	6f48 <atomic_set_bit>
	}

	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    77c4:	2103      	movs	r1, #3
    77c6:	0038      	movs	r0, r7
    77c8:	f7ff fbbe 	bl	6f48 <atomic_set_bit>

	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    77cc:	2105      	movs	r1, #5
    77ce:	0038      	movs	r0, r7
    77d0:	f7fa fd21 	bl	2216 <atomic_test_bit>
    77d4:	9b04      	ldr	r3, [sp, #16]
    77d6:	781b      	ldrb	r3, [r3, #0]
    77d8:	9304      	str	r3, [sp, #16]
    77da:	002b      	movs	r3, r5
    77dc:	3398      	adds	r3, #152	; 0x98
    77de:	9306      	str	r3, [sp, #24]
    77e0:	2800      	cmp	r0, #0
    77e2:	d000      	beq.n	77e6 <smp_pairing_req+0x132>
    77e4:	e08b      	b.n	78fe <smp_pairing_req+0x24a>
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    77e6:	9b04      	ldr	r3, [sp, #16]
		return JUST_WORKS;
    77e8:	0004      	movs	r4, r0
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    77ea:	2b04      	cmp	r3, #4
    77ec:	d815      	bhi.n	781a <smp_pairing_req+0x166>
    77ee:	9b07      	ldr	r3, [sp, #28]
    77f0:	3004      	adds	r0, #4
    77f2:	789c      	ldrb	r4, [r3, #2]
    77f4:	78b3      	ldrb	r3, [r6, #2]
    77f6:	431c      	orrs	r4, r3
    77f8:	4004      	ands	r4, r0

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    77fa:	d00e      	beq.n	781a <smp_pairing_req+0x166>
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    77fc:	f7ff fb4e 	bl	6e9c <get_io_capa>
    7800:	2305      	movs	r3, #5
    7802:	9a04      	ldr	r2, [sp, #16]
    7804:	4353      	muls	r3, r2
    7806:	4a5b      	ldr	r2, [pc, #364]	; (7974 <smp_pairing_req+0x2c0>)
    7808:	18d3      	adds	r3, r2, r3
    780a:	5c1c      	ldrb	r4, [r3, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    780c:	2c04      	cmp	r4, #4
    780e:	d104      	bne.n	781a <smp_pairing_req+0x166>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    7810:	682b      	ldr	r3, [r5, #0]
    7812:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
		} else {
			method = PASSKEY_INPUT;
    7814:	425c      	negs	r4, r3
    7816:	415c      	adcs	r4, r3
    7818:	3401      	adds	r4, #1
{
	u8_t ret;

	BT_DBG("");

	smp->method = legacy_get_pair_method(smp, remote_io);
    781a:	9b06      	ldr	r3, [sp, #24]
    781c:	701c      	strb	r4, [r3, #0]

	/* ask for consent if pairing is not due to sending SecReq*/
	if (smp->method == JUST_WORKS &&
    781e:	2c00      	cmp	r4, #0
    7820:	d10d      	bne.n	783e <smp_pairing_req+0x18a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    7822:	210c      	movs	r1, #12
    7824:	0038      	movs	r0, r7
    7826:	f7fa fcf6 	bl	2216 <atomic_test_bit>
	BT_DBG("");

	smp->method = legacy_get_pair_method(smp, remote_io);

	/* ask for consent if pairing is not due to sending SecReq*/
	if (smp->method == JUST_WORKS &&
    782a:	2800      	cmp	r0, #0
    782c:	d107      	bne.n	783e <smp_pairing_req+0x18a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    782e:	4e52      	ldr	r6, [pc, #328]	; (7978 <smp_pairing_req+0x2c4>)
    7830:	6833      	ldr	r3, [r6, #0]
    7832:	2b00      	cmp	r3, #0
    7834:	d003      	beq.n	783e <smp_pairing_req+0x18a>
	    bt_auth && bt_auth->pairing_confirm) {
    7836:	691b      	ldr	r3, [r3, #16]
    7838:	2b00      	cmp	r3, #0
    783a:	d000      	beq.n	783e <smp_pairing_req+0x18a>
    783c:	e083      	b.n	7946 <smp_pairing_req+0x292>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
		bt_auth->pairing_confirm(smp->chan.chan.conn);
		return 0;
	}

	ret = send_pairing_rsp(smp);
    783e:	0028      	movs	r0, r5
    7840:	f7ff ff1e 	bl	7680 <send_pairing_rsp>
    7844:	1e04      	subs	r4, r0, #0
	if (ret) {
    7846:	d000      	beq.n	784a <smp_pairing_req+0x196>
    7848:	e08e      	b.n	7968 <smp_pairing_req+0x2b4>
		return ret;
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    784a:	9805      	ldr	r0, [sp, #20]
    784c:	2103      	movs	r1, #3
    784e:	f7ff fb7b 	bl	6f48 <atomic_set_bit>
	return method;
}

static u8_t legacy_request_tk(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    7852:	682e      	ldr	r6, [r5, #0]
	/*
	 * Fail if we have keys that are stronger than keys that will be
	 * distributed in new pairing. This is to avoid replacing authenticated
	 * keys with unauthenticated ones.
	  */
	keys = bt_keys_find_addr(&conn->le.dst);
    7854:	0030      	movs	r0, r6
    7856:	3054      	adds	r0, #84	; 0x54
    7858:	f001 f82a 	bl	88b0 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    785c:	2800      	cmp	r0, #0
    785e:	d015      	beq.n	788c <smp_pairing_req+0x1d8>
    7860:	3008      	adds	r0, #8
    7862:	0021      	movs	r1, r4
    7864:	f7fa fcd7 	bl	2216 <atomic_test_bit>
    7868:	2800      	cmp	r0, #0
    786a:	d00f      	beq.n	788c <smp_pairing_req+0x1d8>
    786c:	9b06      	ldr	r3, [sp, #24]
    786e:	781b      	ldrb	r3, [r3, #0]
    7870:	2b00      	cmp	r3, #0
    7872:	d10b      	bne.n	788c <smp_pairing_req+0x1d8>
	    smp->method == JUST_WORKS) {
		BT_ERR("JustWorks failed, authenticated keys present");
    7874:	4b41      	ldr	r3, [pc, #260]	; (797c <smp_pairing_req+0x2c8>)
    7876:	4a42      	ldr	r2, [pc, #264]	; (7980 <smp_pairing_req+0x2cc>)
    7878:	9301      	str	r3, [sp, #4]
    787a:	4b42      	ldr	r3, [pc, #264]	; (7984 <smp_pairing_req+0x2d0>)
    787c:	4942      	ldr	r1, [pc, #264]	; (7988 <smp_pairing_req+0x2d4>)
    787e:	9300      	str	r3, [sp, #0]
    7880:	4842      	ldr	r0, [pc, #264]	; (798c <smp_pairing_req+0x2d8>)
    7882:	4b43      	ldr	r3, [pc, #268]	; (7990 <smp_pairing_req+0x2dc>)
    7884:	f7f9 ff70 	bl	1768 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
    7888:	3408      	adds	r4, #8
    788a:	e06d      	b.n	7968 <smp_pairing_req+0x2b4>
	}

	switch (smp->method) {
    788c:	9b06      	ldr	r3, [sp, #24]
    788e:	781c      	ldrb	r4, [r3, #0]
    7890:	2c01      	cmp	r4, #1
    7892:	d01c      	beq.n	78ce <smp_pairing_req+0x21a>
    7894:	2c00      	cmp	r4, #0
    7896:	d067      	beq.n	7968 <smp_pairing_req+0x2b4>
    7898:	2c02      	cmp	r4, #2
    789a:	d123      	bne.n	78e4 <smp_pairing_req+0x230>
	case PASSKEY_DISPLAY:
		if (bt_rand(&passkey, sizeof(passkey))) {
    789c:	2104      	movs	r1, #4
    789e:	a809      	add	r0, sp, #36	; 0x24
    78a0:	f003 feee 	bl	b680 <bt_rand>
			return BT_SMP_ERR_UNSPECIFIED;
    78a4:	3406      	adds	r4, #6
		return BT_SMP_ERR_UNSPECIFIED;
	}

	switch (smp->method) {
	case PASSKEY_DISPLAY:
		if (bt_rand(&passkey, sizeof(passkey))) {
    78a6:	1e07      	subs	r7, r0, #0
    78a8:	d15e      	bne.n	7968 <smp_pairing_req+0x2b4>
			return BT_SMP_ERR_UNSPECIFIED;
		}

		passkey %= 1000000;
    78aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    78ac:	4939      	ldr	r1, [pc, #228]	; (7994 <smp_pairing_req+0x2e0>)
    78ae:	f7f8 fcfd 	bl	2ac <__aeabi_uidivmod>

		bt_auth->passkey_display(conn, passkey);
    78b2:	4b31      	ldr	r3, [pc, #196]	; (7978 <smp_pairing_req+0x2c4>)
	case PASSKEY_DISPLAY:
		if (bt_rand(&passkey, sizeof(passkey))) {
			return BT_SMP_ERR_UNSPECIFIED;
		}

		passkey %= 1000000;
    78b4:	9109      	str	r1, [sp, #36]	; 0x24

		bt_auth->passkey_display(conn, passkey);
    78b6:	681b      	ldr	r3, [r3, #0]
    78b8:	0030      	movs	r0, r6
    78ba:	681b      	ldr	r3, [r3, #0]
    78bc:	4798      	blx	r3

		passkey = sys_cpu_to_le32(passkey);
		memcpy(smp->tk, &passkey, sizeof(passkey));
    78be:	0028      	movs	r0, r5
    78c0:	2204      	movs	r2, #4
    78c2:	30d7      	adds	r0, #215	; 0xd7
    78c4:	a909      	add	r1, sp, #36	; 0x24
    78c6:	f7f9 fd4d 	bl	1364 <memcpy>
	default:
		BT_ERR("Unknown pairing method (%u)", smp->method);
		return BT_SMP_ERR_UNSPECIFIED;
	}

	return 0;
    78ca:	003c      	movs	r4, r7
    78cc:	e04c      	b.n	7968 <smp_pairing_req+0x2b4>
		passkey = sys_cpu_to_le32(passkey);
		memcpy(smp->tk, &passkey, sizeof(passkey));

		break;
	case PASSKEY_INPUT:
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    78ce:	2109      	movs	r1, #9
    78d0:	0038      	movs	r0, r7
    78d2:	f7ff fb39 	bl	6f48 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    78d6:	4b28      	ldr	r3, [pc, #160]	; (7978 <smp_pairing_req+0x2c4>)
    78d8:	0030      	movs	r0, r6
    78da:	681b      	ldr	r3, [r3, #0]
	default:
		BT_ERR("Unknown pairing method (%u)", smp->method);
		return BT_SMP_ERR_UNSPECIFIED;
	}

	return 0;
    78dc:	2400      	movs	r4, #0
		memcpy(smp->tk, &passkey, sizeof(passkey));

		break;
	case PASSKEY_INPUT:
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
		bt_auth->passkey_entry(conn);
    78de:	685b      	ldr	r3, [r3, #4]
    78e0:	4798      	blx	r3
    78e2:	e041      	b.n	7968 <smp_pairing_req+0x2b4>
		break;
	case JUST_WORKS:
		break;
	default:
		BT_ERR("Unknown pairing method (%u)", smp->method);
    78e4:	4b25      	ldr	r3, [pc, #148]	; (797c <smp_pairing_req+0x2c8>)
    78e6:	9401      	str	r4, [sp, #4]
    78e8:	9302      	str	r3, [sp, #8]
    78ea:	4b26      	ldr	r3, [pc, #152]	; (7984 <smp_pairing_req+0x2d0>)
    78ec:	4a24      	ldr	r2, [pc, #144]	; (7980 <smp_pairing_req+0x2cc>)
    78ee:	9300      	str	r3, [sp, #0]
    78f0:	4925      	ldr	r1, [pc, #148]	; (7988 <smp_pairing_req+0x2d4>)
    78f2:	4b27      	ldr	r3, [pc, #156]	; (7990 <smp_pairing_req+0x2dc>)
    78f4:	4828      	ldr	r0, [pc, #160]	; (7998 <smp_pairing_req+0x2e4>)
    78f6:	f7f9 ff37 	bl	1768 <printk>
		return BT_SMP_ERR_UNSPECIFIED;
    78fa:	2408      	movs	r4, #8
    78fc:	e034      	b.n	7968 <smp_pairing_req+0x2b4>

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    78fe:	9b04      	ldr	r3, [sp, #16]
		return JUST_WORKS;
    7900:	2400      	movs	r4, #0

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    7902:	2b04      	cmp	r3, #4
    7904:	d80e      	bhi.n	7924 <smp_pairing_req+0x270>
    7906:	2004      	movs	r0, #4
    7908:	9b07      	ldr	r3, [sp, #28]
    790a:	789c      	ldrb	r4, [r3, #2]
    790c:	78b3      	ldrb	r3, [r6, #2]
    790e:	431c      	orrs	r4, r3
    7910:	4004      	ands	r4, r0

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    7912:	d007      	beq.n	7924 <smp_pairing_req+0x270>
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    7914:	f7ff fac2 	bl	6e9c <get_io_capa>
    7918:	2305      	movs	r3, #5
    791a:	9a04      	ldr	r2, [sp, #16]
    791c:	4353      	muls	r3, r2
    791e:	4a1f      	ldr	r2, [pc, #124]	; (799c <smp_pairing_req+0x2e8>)
    7920:	18d3      	adds	r3, r2, r3
    7922:	5c1c      	ldrb	r4, [r3, r0]
#else
		return legacy_pairing_req(smp, req->io_capability);
#endif /* CONFIG_BLUETOOTH_SMP_SC_ONLY */
	}

	smp->method = get_pair_method(smp, req->io_capability);
    7924:	9b06      	ldr	r3, [sp, #24]
    7926:	701c      	strb	r4, [r3, #0]
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY) &&
	    smp->method == JUST_WORKS) {
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
	}

	if (smp->method == JUST_WORKS) {
    7928:	2c00      	cmp	r4, #0
    792a:	d115      	bne.n	7958 <smp_pairing_req+0x2a4>
		if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY)) {
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
		}

		/* ask for consent if pairing is not due to sending SecReq*/
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    792c:	210c      	movs	r1, #12
    792e:	0038      	movs	r0, r7
    7930:	f7fa fc71 	bl	2216 <atomic_test_bit>
    7934:	2800      	cmp	r0, #0
    7936:	d10f      	bne.n	7958 <smp_pairing_req+0x2a4>
    7938:	4e0f      	ldr	r6, [pc, #60]	; (7978 <smp_pairing_req+0x2c4>)
    793a:	6833      	ldr	r3, [r6, #0]
    793c:	2b00      	cmp	r3, #0
    793e:	d00b      	beq.n	7958 <smp_pairing_req+0x2a4>
		    bt_auth && bt_auth->pairing_confirm) {
    7940:	691b      	ldr	r3, [r3, #16]
    7942:	2b00      	cmp	r3, #0
    7944:	d008      	beq.n	7958 <smp_pairing_req+0x2a4>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    7946:	0038      	movs	r0, r7
    7948:	2109      	movs	r1, #9
    794a:	f7ff fafd 	bl	6f48 <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    794e:	6833      	ldr	r3, [r6, #0]
    7950:	6828      	ldr	r0, [r5, #0]
    7952:	691b      	ldr	r3, [r3, #16]
    7954:	4798      	blx	r3
			return 0;
    7956:	e007      	b.n	7968 <smp_pairing_req+0x2b4>
		}
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    7958:	210c      	movs	r1, #12
    795a:	9805      	ldr	r0, [sp, #20]
    795c:	f7ff faf4 	bl	6f48 <atomic_set_bit>
	return send_pairing_rsp(smp);
    7960:	0028      	movs	r0, r5
    7962:	f7ff fe8d 	bl	7680 <send_pairing_rsp>
    7966:	0004      	movs	r4, r0
}
    7968:	0020      	movs	r0, r4
    796a:	b00b      	add	sp, #44	; 0x2c
    796c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    796e:	46c0      	nop			; (mov r8, r8)
    7970:	20000d70 	.word	0x20000d70
    7974:	00016bf7 	.word	0x00016bf7
    7978:	20001ee8 	.word	0x20001ee8
    797c:	000145b0 	.word	0x000145b0
    7980:	00014570 	.word	0x00014570
    7984:	000145b5 	.word	0x000145b5
    7988:	00014577 	.word	0x00014577
    798c:	00015482 	.word	0x00015482
    7990:	00016c3b 	.word	0x00016c3b
    7994:	000f4240 	.word	0x000f4240
    7998:	000154bf 	.word	0x000154bf
    799c:	00016c5e 	.word	0x00016c5e

000079a0 <sc_send_public_key>:
	return BT_SMP_ERR_CMD_NOTSUPP;
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t sc_send_public_key(struct bt_smp *smp)
{
    79a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79a2:	0006      	movs	r6, r0
	struct bt_smp_public_key *req;
	struct net_buf *req_buf;

	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    79a4:	200c      	movs	r0, #12
    79a6:	f7ff fcd1 	bl	734c <smp_create_pdu.isra.2>
    79aa:	0005      	movs	r5, r0
				 sizeof(*req));
	if (!req_buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    79ac:	2008      	movs	r0, #8
	struct bt_smp_public_key *req;
	struct net_buf *req_buf;

	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
				 sizeof(*req));
	if (!req_buf) {
    79ae:	2d00      	cmp	r5, #0
    79b0:	d017      	beq.n	79e2 <sc_send_public_key+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(req_buf, sizeof(*req));
    79b2:	0028      	movs	r0, r5
    79b4:	2140      	movs	r1, #64	; 0x40
    79b6:	3008      	adds	r0, #8
    79b8:	f00a fea4 	bl	12704 <net_buf_simple_add>
    79bc:	0004      	movs	r4, r0

	memcpy(req->x, sc_public_key, sizeof(req->x));
    79be:	4f09      	ldr	r7, [pc, #36]	; (79e4 <sc_send_public_key+0x44>)
    79c0:	2220      	movs	r2, #32
    79c2:	0039      	movs	r1, r7
    79c4:	f7f9 fcce 	bl	1364 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    79c8:	0039      	movs	r1, r7
    79ca:	0020      	movs	r0, r4
    79cc:	3120      	adds	r1, #32
    79ce:	2220      	movs	r2, #32
    79d0:	3020      	adds	r0, #32
    79d2:	f7f9 fcc7 	bl	1364 <memcpy>

	smp_send(smp, req_buf, NULL);
    79d6:	0030      	movs	r0, r6
    79d8:	2200      	movs	r2, #0
    79da:	0029      	movs	r1, r5
    79dc:	f7ff fd60 	bl	74a0 <smp_send>

	if (IS_ENABLED(CONFIG_BLUETOOTH_USE_DEBUG_KEYS)) {
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
	}

	return 0;
    79e0:	2000      	movs	r0, #0
}
    79e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79e4:	20000d71 	.word	0x20000d71

000079e8 <smp_send_pairing_random>:

	return 0;
}

static u8_t smp_send_pairing_random(struct bt_smp *smp)
{
    79e8:	b570      	push	{r4, r5, r6, lr}
    79ea:	0005      	movs	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_random *req;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    79ec:	2004      	movs	r0, #4
    79ee:	f7ff fcad 	bl	734c <smp_create_pdu.isra.2>
    79f2:	0004      	movs	r4, r0
	if (!rsp_buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    79f4:	2008      	movs	r0, #8
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_random *req;
	struct net_buf *rsp_buf;

	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
	if (!rsp_buf) {
    79f6:	2c00      	cmp	r4, #0
    79f8:	d00f      	beq.n	7a1a <smp_send_pairing_random+0x32>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(rsp_buf, sizeof(*req));
    79fa:	0020      	movs	r0, r4
    79fc:	2110      	movs	r1, #16
    79fe:	3008      	adds	r0, #8
    7a00:	f00a fe80 	bl	12704 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    7a04:	0029      	movs	r1, r5
    7a06:	2210      	movs	r2, #16
    7a08:	31b7      	adds	r1, #183	; 0xb7
    7a0a:	f7f9 fcab 	bl	1364 <memcpy>

	smp_send(smp, rsp_buf, NULL);
    7a0e:	0028      	movs	r0, r5
    7a10:	2200      	movs	r2, #0
    7a12:	0021      	movs	r1, r4
    7a14:	f7ff fd44 	bl	74a0 <smp_send>

	return 0;
    7a18:	2000      	movs	r0, #0
}
    7a1a:	bd70      	pop	{r4, r5, r6, pc}

00007a1c <bt_smp_encrypt_change>:
	memset(smp, 0, sizeof(*smp));
}

static void bt_smp_encrypt_change(struct bt_l2cap_chan *chan,
				  u8_t hci_status)
{
    7a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a1e:	0004      	movs	r4, r0
    7a20:	b08f      	sub	sp, #60	; 0x3c
	struct bt_conn *conn = chan->conn;

	BT_DBG("chan %p conn %p handle %u encrypt 0x%02x hci status 0x%02x",
	       chan, conn, conn->handle, conn->encrypt, hci_status);

	if (hci_status) {
    7a22:	2900      	cmp	r1, #0
    7a24:	d000      	beq.n	7a28 <bt_smp_encrypt_change+0xc>
    7a26:	e103      	b.n	7c30 <bt_smp_encrypt_change+0x214>
		return;
	}

	if (!smp || !conn->encrypt) {
    7a28:	6803      	ldr	r3, [r0, #0]
    7a2a:	7a9b      	ldrb	r3, [r3, #10]
    7a2c:	2b00      	cmp	r3, #0
    7a2e:	d100      	bne.n	7a32 <bt_smp_encrypt_change+0x16>
    7a30:	e0fe      	b.n	7c30 <bt_smp_encrypt_change+0x214>
		return;
	}

	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    7a32:	0005      	movs	r5, r0
    7a34:	3594      	adds	r5, #148	; 0x94
    7a36:	3101      	adds	r1, #1
    7a38:	0028      	movs	r0, r5
    7a3a:	f7ff fa91 	bl	6f60 <atomic_test_and_clear_bit>
    7a3e:	2800      	cmp	r0, #0
    7a40:	d100      	bne.n	7a44 <bt_smp_encrypt_change+0x28>
    7a42:	e0f5      	b.n	7c30 <bt_smp_encrypt_change+0x214>
	 * enabled encryption.
	 *
	 * Since it is possible that slave might sent another Security Request
	 * eg with different AuthReq we should allow it.
	 */
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    7a44:	2103      	movs	r1, #3
    7a46:	0028      	movs	r0, r5
    7a48:	f7fa fbe5 	bl	2216 <atomic_test_bit>
    7a4c:	2800      	cmp	r0, #0
    7a4e:	d105      	bne.n	7a5c <bt_smp_encrypt_change+0x40>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    7a50:	0020      	movs	r0, r4
    7a52:	210b      	movs	r1, #11
    7a54:	3090      	adds	r0, #144	; 0x90
    7a56:	f7ff fa77 	bl	6f48 <atomic_set_bit>
    7a5a:	e0e9      	b.n	7c30 <bt_smp_encrypt_change+0x214>
		return;
	}

	/* derive BR/EDR LinkKey if supported by both sides */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    7a5c:	2105      	movs	r1, #5
    7a5e:	0028      	movs	r0, r5
    7a60:	f7fa fbd9 	bl	2216 <atomic_test_bit>
    7a64:	2800      	cmp	r0, #0
    7a66:	d017      	beq.n	7a98 <bt_smp_encrypt_change+0x7c>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    7a68:	266e      	movs	r6, #110	; 0x6e
    7a6a:	2308      	movs	r3, #8
    7a6c:	36ff      	adds	r6, #255	; 0xff
    7a6e:	5da2      	ldrb	r2, [r4, r6]
    7a70:	421a      	tst	r2, r3
    7a72:	d008      	beq.n	7a86 <bt_smp_encrypt_change+0x6a>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    7a74:	22b7      	movs	r2, #183	; 0xb7
    7a76:	0052      	lsls	r2, r2, #1
		return;
	}

	/* derive BR/EDR LinkKey if supported by both sides */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    7a78:	5ca2      	ldrb	r2, [r4, r2]
    7a7a:	421a      	tst	r2, r3
    7a7c:	d003      	beq.n	7a86 <bt_smp_encrypt_change+0x6a>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
			/*
			 * Link Key will be derived after key distribution to
			 * make sure remote device identity is known
			 */
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    7a7e:	210e      	movs	r1, #14
    7a80:	0028      	movs	r0, r5
    7a82:	f7ff fa61 	bl	6f48 <atomic_set_bit>
		}
		/*
		 * Those are used as pairing finished indicator so generated
		 * but not distributed keys must be cleared here.
		 */
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    7a86:	2108      	movs	r1, #8
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    7a88:	22b7      	movs	r2, #183	; 0xb7
		}
		/*
		 * Those are used as pairing finished indicator so generated
		 * but not distributed keys must be cleared here.
		 */
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    7a8a:	5da3      	ldrb	r3, [r4, r6]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    7a8c:	0052      	lsls	r2, r2, #1
		}
		/*
		 * Those are used as pairing finished indicator so generated
		 * but not distributed keys must be cleared here.
		 */
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    7a8e:	438b      	bics	r3, r1
    7a90:	55a3      	strb	r3, [r4, r6]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    7a92:	5ca3      	ldrb	r3, [r4, r2]
    7a94:	438b      	bics	r3, r1
    7a96:	54a3      	strb	r3, [r4, r2]
	}

	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    7a98:	23b7      	movs	r3, #183	; 0xb7
    7a9a:	005b      	lsls	r3, r3, #1
    7a9c:	5ce3      	ldrb	r3, [r4, r3]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    7a9e:	2106      	movs	r1, #6
		 */
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
	}

	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    7aa0:	07da      	lsls	r2, r3, #31
    7aa2:	d405      	bmi.n	7ab0 <bt_smp_encrypt_change+0x94>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    7aa4:	2108      	movs	r1, #8
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
	}

	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    7aa6:	079a      	lsls	r2, r3, #30
    7aa8:	d402      	bmi.n	7ab0 <bt_smp_encrypt_change+0x94>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    7aaa:	075b      	lsls	r3, r3, #29
    7aac:	d504      	bpl.n	7ab8 <bt_smp_encrypt_change+0x9c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    7aae:	210a      	movs	r1, #10
    7ab0:	0020      	movs	r0, r4
    7ab2:	3090      	adds	r0, #144	; 0x90
    7ab4:	f7ff fa48 	bl	6f48 <atomic_set_bit>
	}

	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    7ab8:	0028      	movs	r0, r5
    7aba:	2102      	movs	r1, #2
    7abc:	f7ff fa44 	bl	6f48 <atomic_set_bit>
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static void bt_smp_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    7ac0:	6820      	ldr	r0, [r4, #0]
	struct bt_keys *keys = conn->le.keys;

	if (!keys) {
    7ac2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    7ac4:	2b00      	cmp	r3, #0
    7ac6:	d10e      	bne.n	7ae6 <bt_smp_encrypt_change+0xca>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    7ac8:	3054      	adds	r0, #84	; 0x54
    7aca:	f7fa fa9b 	bl	2004 <bt_addr_le_str>
    7ace:	4b59      	ldr	r3, [pc, #356]	; (7c34 <bt_smp_encrypt_change+0x218>)
    7ad0:	9001      	str	r0, [sp, #4]
    7ad2:	9302      	str	r3, [sp, #8]
    7ad4:	4b58      	ldr	r3, [pc, #352]	; (7c38 <bt_smp_encrypt_change+0x21c>)
    7ad6:	4a59      	ldr	r2, [pc, #356]	; (7c3c <bt_smp_encrypt_change+0x220>)
    7ad8:	9300      	str	r3, [sp, #0]
    7ada:	4959      	ldr	r1, [pc, #356]	; (7c40 <bt_smp_encrypt_change+0x224>)
    7adc:	4b59      	ldr	r3, [pc, #356]	; (7c44 <bt_smp_encrypt_change+0x228>)
    7ade:	485a      	ldr	r0, [pc, #360]	; (7c48 <bt_smp_encrypt_change+0x22c>)
    7ae0:	f7f9 fe42 	bl	1768 <printk>
    7ae4:	e09b      	b.n	7c1e <bt_smp_encrypt_change+0x202>
		return;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	/* Distribute legacy pairing specific keys */
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    7ae6:	2105      	movs	r1, #5
    7ae8:	0028      	movs	r0, r5
    7aea:	f7fa fb94 	bl	2216 <atomic_test_bit>
    7aee:	9004      	str	r0, [sp, #16]
    7af0:	2800      	cmp	r0, #0
    7af2:	d000      	beq.n	7af6 <bt_smp_encrypt_change+0xda>
    7af4:	e093      	b.n	7c1e <bt_smp_encrypt_change+0x202>
static void legacy_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_keys *keys = conn->le.keys;

	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    7af6:	236e      	movs	r3, #110	; 0x6e
    7af8:	33ff      	adds	r3, #255	; 0xff
    7afa:	5ce3      	ldrb	r3, [r4, r3]
    7afc:	07db      	lsls	r3, r3, #31
    7afe:	d400      	bmi.n	7b02 <bt_smp_encrypt_change+0xe6>
    7b00:	e08d      	b.n	7c1e <bt_smp_encrypt_change+0x202>
}

static void legacy_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_keys *keys = conn->le.keys;
    7b02:	6823      	ldr	r3, [r4, #0]
		struct net_buf *buf;
		u8_t key[16];
		u64_t rand;
		u16_t ediv;

		bt_rand(key, sizeof(key));
    7b04:	2110      	movs	r1, #16
    7b06:	a80a      	add	r0, sp, #40	; 0x28
}

static void legacy_distribute_keys(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_keys *keys = conn->le.keys;
    7b08:	6fdf      	ldr	r7, [r3, #124]	; 0x7c
		struct net_buf *buf;
		u8_t key[16];
		u64_t rand;
		u16_t ediv;

		bt_rand(key, sizeof(key));
    7b0a:	f003 fdb9 	bl	b680 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    7b0e:	2108      	movs	r1, #8
    7b10:	a808      	add	r0, sp, #32
    7b12:	f003 fdb5 	bl	b680 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    7b16:	2016      	movs	r0, #22
    7b18:	ab02      	add	r3, sp, #8
    7b1a:	2102      	movs	r1, #2
    7b1c:	18c0      	adds	r0, r0, r3
    7b1e:	f003 fdaf 	bl	b680 <bt_rand>

		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    7b22:	2006      	movs	r0, #6
    7b24:	f7ff fc12 	bl	734c <smp_create_pdu.isra.2>
    7b28:	1e06      	subs	r6, r0, #0
				     sizeof(*info));
		if (!buf) {
    7b2a:	d108      	bne.n	7b3e <bt_smp_encrypt_change+0x122>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    7b2c:	4b41      	ldr	r3, [pc, #260]	; (7c34 <bt_smp_encrypt_change+0x218>)
    7b2e:	4a43      	ldr	r2, [pc, #268]	; (7c3c <bt_smp_encrypt_change+0x220>)
    7b30:	9301      	str	r3, [sp, #4]
    7b32:	4b41      	ldr	r3, [pc, #260]	; (7c38 <bt_smp_encrypt_change+0x21c>)
    7b34:	4942      	ldr	r1, [pc, #264]	; (7c40 <bt_smp_encrypt_change+0x224>)
    7b36:	9300      	str	r3, [sp, #0]
    7b38:	4844      	ldr	r0, [pc, #272]	; (7c4c <bt_smp_encrypt_change+0x230>)
    7b3a:	4b45      	ldr	r3, [pc, #276]	; (7c50 <bt_smp_encrypt_change+0x234>)
    7b3c:	e025      	b.n	7b8a <bt_smp_encrypt_change+0x16e>
			return;
		}

		info = net_buf_add(buf, sizeof(*info));
    7b3e:	2110      	movs	r1, #16
    7b40:	3008      	adds	r0, #8
    7b42:	f00a fddf 	bl	12704 <net_buf_simple_add>
    7b46:	9005      	str	r0, [sp, #20]

		/* distributed only enc_size bytes of key */
		memcpy(info->ltk, key, keys->enc_size);
    7b48:	79fa      	ldrb	r2, [r7, #7]
    7b4a:	a90a      	add	r1, sp, #40	; 0x28
    7b4c:	f7f9 fc0a 	bl	1364 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    7b50:	79f8      	ldrb	r0, [r7, #7]
    7b52:	280f      	cmp	r0, #15
    7b54:	d806      	bhi.n	7b64 <bt_smp_encrypt_change+0x148>
			memset(info->ltk + keys->enc_size, 0,
    7b56:	2210      	movs	r2, #16
    7b58:	9b05      	ldr	r3, [sp, #20]
    7b5a:	1a12      	subs	r2, r2, r0
    7b5c:	9904      	ldr	r1, [sp, #16]
    7b5e:	1818      	adds	r0, r3, r0
    7b60:	f7f9 fc2a 	bl	13b8 <memset>
			       sizeof(info->ltk) - keys->enc_size);
		}

		smp_send(smp, buf, NULL);
    7b64:	2200      	movs	r2, #0
    7b66:	0031      	movs	r1, r6
    7b68:	0020      	movs	r0, r4
    7b6a:	f7ff fc99 	bl	74a0 <smp_send>

		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    7b6e:	2007      	movs	r0, #7
    7b70:	f7ff fbec 	bl	734c <smp_create_pdu.isra.2>
    7b74:	9004      	str	r0, [sp, #16]
				     sizeof(*ident));
		if (!buf) {
    7b76:	2800      	cmp	r0, #0
    7b78:	d10a      	bne.n	7b90 <bt_smp_encrypt_change+0x174>
			BT_ERR("Unable to allocate Master Ident buffer");
    7b7a:	4b2e      	ldr	r3, [pc, #184]	; (7c34 <bt_smp_encrypt_change+0x218>)
    7b7c:	4a2f      	ldr	r2, [pc, #188]	; (7c3c <bt_smp_encrypt_change+0x220>)
    7b7e:	9301      	str	r3, [sp, #4]
    7b80:	4b2d      	ldr	r3, [pc, #180]	; (7c38 <bt_smp_encrypt_change+0x21c>)
    7b82:	492f      	ldr	r1, [pc, #188]	; (7c40 <bt_smp_encrypt_change+0x224>)
    7b84:	9300      	str	r3, [sp, #0]
    7b86:	4833      	ldr	r0, [pc, #204]	; (7c54 <bt_smp_encrypt_change+0x238>)
    7b88:	4b31      	ldr	r3, [pc, #196]	; (7c50 <bt_smp_encrypt_change+0x234>)
    7b8a:	f7f9 fded 	bl	1768 <printk>
    7b8e:	e046      	b.n	7c1e <bt_smp_encrypt_change+0x202>
			return;
		}

		ident = net_buf_add(buf, sizeof(*ident));
    7b90:	9804      	ldr	r0, [sp, #16]
    7b92:	210a      	movs	r1, #10
    7b94:	3008      	adds	r0, #8
    7b96:	f00a fdb5 	bl	12704 <net_buf_simple_add>
		ident->rand = rand;
    7b9a:	aa02      	add	r2, sp, #8
    7b9c:	7e12      	ldrb	r2, [r2, #24]
    7b9e:	a902      	add	r1, sp, #8
    7ba0:	7082      	strb	r2, [r0, #2]
    7ba2:	2219      	movs	r2, #25
    7ba4:	1852      	adds	r2, r2, r1
    7ba6:	7812      	ldrb	r2, [r2, #0]
		ident->ediv = ediv;
    7ba8:	2616      	movs	r6, #22
			BT_ERR("Unable to allocate Master Ident buffer");
			return;
		}

		ident = net_buf_add(buf, sizeof(*ident));
		ident->rand = rand;
    7baa:	70c2      	strb	r2, [r0, #3]
    7bac:	221a      	movs	r2, #26
    7bae:	1852      	adds	r2, r2, r1
    7bb0:	7812      	ldrb	r2, [r2, #0]
		ident->ediv = ediv;
    7bb2:	1876      	adds	r6, r6, r1
			BT_ERR("Unable to allocate Master Ident buffer");
			return;
		}

		ident = net_buf_add(buf, sizeof(*ident));
		ident->rand = rand;
    7bb4:	7102      	strb	r2, [r0, #4]
    7bb6:	221b      	movs	r2, #27
    7bb8:	1852      	adds	r2, r2, r1
    7bba:	7812      	ldrb	r2, [r2, #0]
		ident->ediv = ediv;
    7bbc:	7833      	ldrb	r3, [r6, #0]
			BT_ERR("Unable to allocate Master Ident buffer");
			return;
		}

		ident = net_buf_add(buf, sizeof(*ident));
		ident->rand = rand;
    7bbe:	7142      	strb	r2, [r0, #5]
    7bc0:	aa09      	add	r2, sp, #36	; 0x24
    7bc2:	7812      	ldrb	r2, [r2, #0]
    7bc4:	7182      	strb	r2, [r0, #6]
    7bc6:	221d      	movs	r2, #29
    7bc8:	1852      	adds	r2, r2, r1
    7bca:	7812      	ldrb	r2, [r2, #0]
    7bcc:	71c2      	strb	r2, [r0, #7]
    7bce:	221e      	movs	r2, #30
    7bd0:	1852      	adds	r2, r2, r1
    7bd2:	7812      	ldrb	r2, [r2, #0]
    7bd4:	7202      	strb	r2, [r0, #8]
    7bd6:	221f      	movs	r2, #31
    7bd8:	1852      	adds	r2, r2, r1
    7bda:	7812      	ldrb	r2, [r2, #0]
		ident->ediv = ediv;
    7bdc:	7003      	strb	r3, [r0, #0]
    7bde:	7873      	ldrb	r3, [r6, #1]
			BT_ERR("Unable to allocate Master Ident buffer");
			return;
		}

		ident = net_buf_add(buf, sizeof(*ident));
		ident->rand = rand;
    7be0:	7242      	strb	r2, [r0, #9]
		ident->ediv = ediv;
    7be2:	7043      	strb	r3, [r0, #1]

		smp_send(smp, buf, ident_sent);
    7be4:	9904      	ldr	r1, [sp, #16]
    7be6:	0020      	movs	r0, r4
    7be8:	4a1b      	ldr	r2, [pc, #108]	; (7c58 <bt_smp_encrypt_change+0x23c>)
    7bea:	f7ff fc59 	bl	74a0 <smp_send>

		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    7bee:	210a      	movs	r1, #10
    7bf0:	0028      	movs	r0, r5
    7bf2:	f7fa fb10 	bl	2216 <atomic_test_bit>
    7bf6:	2800      	cmp	r0, #0
    7bf8:	d011      	beq.n	7c1e <bt_smp_encrypt_change+0x202>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    7bfa:	2101      	movs	r1, #1
    7bfc:	0038      	movs	r0, r7
    7bfe:	f000 fe67 	bl	88d0 <bt_keys_add_type>

			memcpy(keys->slave_ltk.val, key,
    7c02:	0038      	movs	r0, r7
    7c04:	2210      	movs	r2, #16
    7c06:	3052      	adds	r0, #82	; 0x52
    7c08:	a90a      	add	r1, sp, #40	; 0x28
    7c0a:	f7f9 fbab 	bl	1364 <memcpy>
			       sizeof(keys->slave_ltk.val));
			keys->slave_ltk.rand = rand;
    7c0e:	9a08      	ldr	r2, [sp, #32]
    7c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c12:	64ba      	str	r2, [r7, #72]	; 0x48
    7c14:	64fb      	str	r3, [r7, #76]	; 0x4c
			keys->slave_ltk.ediv = ediv;
    7c16:	003b      	movs	r3, r7
    7c18:	8832      	ldrh	r2, [r6, #0]
    7c1a:	3350      	adds	r3, #80	; 0x50
    7c1c:	801a      	strh	r2, [r3, #0]
	}

	bt_smp_distribute_keys(smp);

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    7c1e:	0023      	movs	r3, r4
    7c20:	33fc      	adds	r3, #252	; 0xfc
    7c22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    7c24:	4b0d      	ldr	r3, [pc, #52]	; (7c5c <bt_smp_encrypt_change+0x240>)
    7c26:	421a      	tst	r2, r3
    7c28:	d102      	bne.n	7c30 <bt_smp_encrypt_change+0x214>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    7c2a:	0020      	movs	r0, r4
    7c2c:	f7ff f9c7 	bl	6fbe <smp_reset>

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}
}
    7c30:	b00f      	add	sp, #60	; 0x3c
    7c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c34:	000145b0 	.word	0x000145b0
    7c38:	000145b5 	.word	0x000145b5
    7c3c:	00014570 	.word	0x00014570
    7c40:	00014577 	.word	0x00014577
    7c44:	00016d29 	.word	0x00016d29
    7c48:	000154eb 	.word	0x000154eb
    7c4c:	00015510 	.word	0x00015510
    7c50:	00016d12 	.word	0x00016d12
    7c54:	00015547 	.word	0x00015547
    7c58:	00007369 	.word	0x00007369
    7c5c:	00ffff00 	.word	0x00ffff00

00007c60 <smp_pairing_rsp>:
    7c60:	2007      	movs	r0, #7
    7c62:	4770      	bx	lr

00007c64 <smp_signing_info>:
    7c64:	2007      	movs	r0, #7
    7c66:	4770      	bx	lr

00007c68 <smp_error>:
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
	k_delayed_work_submit(&smp->work, SMP_TIMEOUT);
}

static int smp_error(struct bt_smp *smp, u8_t reason)
{
    7c68:	b570      	push	{r4, r5, r6, lr}
    7c6a:	0005      	movs	r5, r0
    7c6c:	000e      	movs	r6, r1
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    7c6e:	f7ff f9a6 	bl	6fbe <smp_reset>
	struct net_buf *buf;

	/* reset context and report */
	smp_pairing_complete(smp, reason);

	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    7c72:	2005      	movs	r0, #5
    7c74:	f7ff fb6a 	bl	734c <smp_create_pdu.isra.2>
    7c78:	1e04      	subs	r4, r0, #0
			     sizeof(*rsp));
	if (!buf) {
    7c7a:	d00c      	beq.n	7c96 <smp_error+0x2e>
		return -ENOBUFS;
	}

	rsp = net_buf_add(buf, sizeof(*rsp));
    7c7c:	2101      	movs	r1, #1
    7c7e:	3008      	adds	r0, #8
    7c80:	f00a fd40 	bl	12704 <net_buf_simple_add>
	rsp->reason = reason;
    7c84:	7006      	strb	r6, [r0, #0]
    7c86:	6828      	ldr	r0, [r5, #0]
    7c88:	2300      	movs	r3, #0
    7c8a:	0022      	movs	r2, r4
    7c8c:	2106      	movs	r1, #6
    7c8e:	f7fd f98b 	bl	4fa8 <bt_l2cap_send_cb>

	/* SMP timer is not restarted for PairingFailed so don't use smp_send */
	bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf);

	return 0;
    7c92:	2000      	movs	r0, #0
    7c94:	e001      	b.n	7c9a <smp_error+0x32>
	smp_pairing_complete(smp, reason);

	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
			     sizeof(*rsp));
	if (!buf) {
		return -ENOBUFS;
    7c96:	2037      	movs	r0, #55	; 0x37
    7c98:	4240      	negs	r0, r0

	/* SMP timer is not restarted for PairingFailed so don't use smp_send */
	bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf);

	return 0;
}
    7c9a:	bd70      	pop	{r4, r5, r6, pc}

00007c9c <bt_smp_dhkey_ready>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static void bt_smp_dhkey_ready(const u8_t *dhkey)
{
    7c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	BT_DBG("%p", dhkey);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    7c9e:	4c1b      	ldr	r4, [pc, #108]	; (7d0c <bt_smp_dhkey_ready+0x70>)
	return 0;
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static void bt_smp_dhkey_ready(const u8_t *dhkey)
{
    7ca0:	0007      	movs	r7, r0
	int i;

	BT_DBG("%p", dhkey);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    7ca2:	0025      	movs	r5, r4
    7ca4:	3594      	adds	r5, #148	; 0x94
    7ca6:	2107      	movs	r1, #7
    7ca8:	0028      	movs	r0, r5
    7caa:	f7ff f959 	bl	6f60 <atomic_test_and_clear_bit>
    7cae:	0026      	movs	r6, r4
    7cb0:	2800      	cmp	r0, #0
    7cb2:	d02a      	beq.n	7d0a <bt_smp_dhkey_ready+0x6e>

	if (!smp) {
		return;
	}

	if (!dhkey) {
    7cb4:	2f00      	cmp	r7, #0
    7cb6:	d101      	bne.n	7cbc <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    7cb8:	210b      	movs	r1, #11
    7cba:	e023      	b.n	7d04 <bt_smp_dhkey_ready+0x68>
		return;
	}

	memcpy(smp->dhkey, dhkey, 32);
    7cbc:	0020      	movs	r0, r4
    7cbe:	3028      	adds	r0, #40	; 0x28
    7cc0:	0039      	movs	r1, r7
    7cc2:	30ff      	adds	r0, #255	; 0xff
    7cc4:	2220      	movs	r2, #32
    7cc6:	f7f9 fb4d 	bl	1364 <memcpy>

	/* wait for user passkey confirmation */
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    7cca:	2109      	movs	r1, #9
    7ccc:	0028      	movs	r0, r5
    7cce:	f7fa faa2 	bl	2216 <atomic_test_bit>
    7cd2:	2800      	cmp	r0, #0
    7cd4:	d005      	beq.n	7ce2 <bt_smp_dhkey_ready+0x46>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    7cd6:	0030      	movs	r0, r6
    7cd8:	2108      	movs	r1, #8
    7cda:	3094      	adds	r0, #148	; 0x94
    7cdc:	f7ff f934 	bl	6f48 <atomic_set_bit>
		return;
    7ce0:	e013      	b.n	7d0a <bt_smp_dhkey_ready+0x6e>
	}

	/* wait for remote DHKey Check */
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    7ce2:	210d      	movs	r1, #13
    7ce4:	0028      	movs	r0, r5
    7ce6:	f7fa fa96 	bl	2216 <atomic_test_bit>
    7cea:	2800      	cmp	r0, #0
    7cec:	d1f3      	bne.n	7cd6 <bt_smp_dhkey_ready+0x3a>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
		return;
	}

	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    7cee:	2108      	movs	r1, #8
    7cf0:	0028      	movs	r0, r5
    7cf2:	f7fa fa90 	bl	2216 <atomic_test_bit>
    7cf6:	2800      	cmp	r0, #0
    7cf8:	d007      	beq.n	7d0a <bt_smp_dhkey_ready+0x6e>
			return;
		}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
		err = compute_and_check_and_send_slave_dhcheck(smp);
    7cfa:	0020      	movs	r0, r4
    7cfc:	f7ff fbe4 	bl	74c8 <compute_and_check_and_send_slave_dhcheck>
    7d00:	1e01      	subs	r1, r0, #0
		if (err) {
    7d02:	d002      	beq.n	7d0a <bt_smp_dhkey_ready+0x6e>
			smp_error(smp, err);
    7d04:	0020      	movs	r0, r4
    7d06:	f7ff ffaf 	bl	7c68 <smp_error>
		}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}
    7d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d0c:	20000db4 	.word	0x20000db4

00007d10 <bt_smp_recv>:
	{ smp_public_key,          sizeof(struct bt_smp_public_key) },
	{ smp_dhkey_check,         sizeof(struct bt_smp_dhkey_check) },
};

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    7d10:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_smp_hdr *hdr = (void *)buf->data;
	u8_t err;

	if (buf->len < sizeof(*hdr)) {
    7d12:	898b      	ldrh	r3, [r1, #12]
	{ smp_public_key,          sizeof(struct bt_smp_public_key) },
	{ smp_dhkey_check,         sizeof(struct bt_smp_dhkey_check) },
};

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    7d14:	b085      	sub	sp, #20
    7d16:	0004      	movs	r4, r0
    7d18:	000d      	movs	r5, r1
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_smp_hdr *hdr = (void *)buf->data;
	u8_t err;

	if (buf->len < sizeof(*hdr)) {
    7d1a:	2b00      	cmp	r3, #0
    7d1c:	d10a      	bne.n	7d34 <bt_smp_recv+0x24>
		BT_ERR("Too small SMP PDU received");
    7d1e:	4b37      	ldr	r3, [pc, #220]	; (7dfc <bt_smp_recv+0xec>)
    7d20:	4a37      	ldr	r2, [pc, #220]	; (7e00 <bt_smp_recv+0xf0>)
    7d22:	9301      	str	r3, [sp, #4]
    7d24:	4b37      	ldr	r3, [pc, #220]	; (7e04 <bt_smp_recv+0xf4>)
    7d26:	4938      	ldr	r1, [pc, #224]	; (7e08 <bt_smp_recv+0xf8>)
    7d28:	9300      	str	r3, [sp, #0]
    7d2a:	4838      	ldr	r0, [pc, #224]	; (7e0c <bt_smp_recv+0xfc>)
    7d2c:	4b38      	ldr	r3, [pc, #224]	; (7e10 <bt_smp_recv+0x100>)
    7d2e:	f7f9 fd1b 	bl	1768 <printk>
		return;
    7d32:	e060      	b.n	7df6 <bt_smp_recv+0xe6>
	}

	BT_DBG("Received SMP code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    7d34:	0028      	movs	r0, r5
};

static void bt_smp_recv(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
	struct bt_smp_hdr *hdr = (void *)buf->data;
    7d36:	688e      	ldr	r6, [r1, #8]
		return;
	}

	BT_DBG("Received SMP code 0x%02x len %u", hdr->code, buf->len);

	net_buf_pull(buf, sizeof(*hdr));
    7d38:	3008      	adds	r0, #8
    7d3a:	2101      	movs	r1, #1
    7d3c:	f00a fd03 	bl	12746 <net_buf_simple_pull>
	/*
	 * If SMP timeout occurred "no further SMP commands shall be sent over
	 * the L2CAP Security Manager Channel. A new SM procedure shall only be
	 * performed when a new physical link has been established."
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    7d40:	0020      	movs	r0, r4
    7d42:	2104      	movs	r1, #4
    7d44:	3094      	adds	r0, #148	; 0x94
    7d46:	f7fa fa66 	bl	2216 <atomic_test_bit>
    7d4a:	2800      	cmp	r0, #0
    7d4c:	d00c      	beq.n	7d68 <bt_smp_recv+0x58>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    7d4e:	4b2b      	ldr	r3, [pc, #172]	; (7dfc <bt_smp_recv+0xec>)
    7d50:	4a30      	ldr	r2, [pc, #192]	; (7e14 <bt_smp_recv+0x104>)
    7d52:	9302      	str	r3, [sp, #8]
    7d54:	7833      	ldrb	r3, [r6, #0]
    7d56:	492c      	ldr	r1, [pc, #176]	; (7e08 <bt_smp_recv+0xf8>)
    7d58:	9301      	str	r3, [sp, #4]
    7d5a:	4b2f      	ldr	r3, [pc, #188]	; (7e18 <bt_smp_recv+0x108>)
    7d5c:	482f      	ldr	r0, [pc, #188]	; (7e1c <bt_smp_recv+0x10c>)
    7d5e:	9300      	str	r3, [sp, #0]
    7d60:	4b2b      	ldr	r3, [pc, #172]	; (7e10 <bt_smp_recv+0x100>)
    7d62:	f7f9 fd01 	bl	1768 <printk>
			hdr->code);
		return;
    7d66:	e046      	b.n	7df6 <bt_smp_recv+0xe6>
	}

	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    7d68:	7831      	ldrb	r1, [r6, #0]
    7d6a:	290d      	cmp	r1, #13
    7d6c:	d804      	bhi.n	7d78 <bt_smp_recv+0x68>
    7d6e:	4f2c      	ldr	r7, [pc, #176]	; (7e20 <bt_smp_recv+0x110>)
    7d70:	00cb      	lsls	r3, r1, #3
    7d72:	59db      	ldr	r3, [r3, r7]
    7d74:	2b00      	cmp	r3, #0
    7d76:	d10c      	bne.n	7d92 <bt_smp_recv+0x82>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    7d78:	4b20      	ldr	r3, [pc, #128]	; (7dfc <bt_smp_recv+0xec>)
    7d7a:	9101      	str	r1, [sp, #4]
    7d7c:	9302      	str	r3, [sp, #8]
    7d7e:	4b26      	ldr	r3, [pc, #152]	; (7e18 <bt_smp_recv+0x108>)
    7d80:	4921      	ldr	r1, [pc, #132]	; (7e08 <bt_smp_recv+0xf8>)
    7d82:	9300      	str	r3, [sp, #0]
    7d84:	4a23      	ldr	r2, [pc, #140]	; (7e14 <bt_smp_recv+0x104>)
    7d86:	4b22      	ldr	r3, [pc, #136]	; (7e10 <bt_smp_recv+0x100>)
    7d88:	4826      	ldr	r0, [pc, #152]	; (7e24 <bt_smp_recv+0x114>)
    7d8a:	f7f9 fced 	bl	1768 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    7d8e:	2107      	movs	r1, #7
    7d90:	e02e      	b.n	7df0 <bt_smp_recv+0xe0>
		return;
	}

	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    7d92:	0020      	movs	r0, r4
    7d94:	3090      	adds	r0, #144	; 0x90
    7d96:	f7ff f8e3 	bl	6f60 <atomic_test_and_clear_bit>
    7d9a:	2800      	cmp	r0, #0
    7d9c:	d10d      	bne.n	7dba <bt_smp_recv+0xaa>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    7d9e:	4b17      	ldr	r3, [pc, #92]	; (7dfc <bt_smp_recv+0xec>)
    7da0:	4919      	ldr	r1, [pc, #100]	; (7e08 <bt_smp_recv+0xf8>)
    7da2:	9302      	str	r3, [sp, #8]
    7da4:	7833      	ldrb	r3, [r6, #0]
    7da6:	4a1b      	ldr	r2, [pc, #108]	; (7e14 <bt_smp_recv+0x104>)
    7da8:	9301      	str	r3, [sp, #4]
    7daa:	4b1b      	ldr	r3, [pc, #108]	; (7e18 <bt_smp_recv+0x108>)
    7dac:	481e      	ldr	r0, [pc, #120]	; (7e28 <bt_smp_recv+0x118>)
    7dae:	9300      	str	r3, [sp, #0]
    7db0:	4b17      	ldr	r3, [pc, #92]	; (7e10 <bt_smp_recv+0x100>)
    7db2:	f7f9 fcd9 	bl	1768 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    7db6:	2108      	movs	r1, #8
    7db8:	e01a      	b.n	7df0 <bt_smp_recv+0xe0>
		return;
	}

	if (buf->len != handlers[hdr->code].expect_len) {
    7dba:	7831      	ldrb	r1, [r6, #0]
    7dbc:	89aa      	ldrh	r2, [r5, #12]
    7dbe:	00cb      	lsls	r3, r1, #3
    7dc0:	18f8      	adds	r0, r7, r3
    7dc2:	7900      	ldrb	r0, [r0, #4]
    7dc4:	4290      	cmp	r0, r2
    7dc6:	d00d      	beq.n	7de4 <bt_smp_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    7dc8:	4b0c      	ldr	r3, [pc, #48]	; (7dfc <bt_smp_recv+0xec>)
    7dca:	9102      	str	r1, [sp, #8]
    7dcc:	9303      	str	r3, [sp, #12]
    7dce:	4b0d      	ldr	r3, [pc, #52]	; (7e04 <bt_smp_recv+0xf4>)
    7dd0:	9201      	str	r2, [sp, #4]
    7dd2:	9300      	str	r3, [sp, #0]
    7dd4:	490c      	ldr	r1, [pc, #48]	; (7e08 <bt_smp_recv+0xf8>)
    7dd6:	4b0e      	ldr	r3, [pc, #56]	; (7e10 <bt_smp_recv+0x100>)
    7dd8:	4a09      	ldr	r2, [pc, #36]	; (7e00 <bt_smp_recv+0xf0>)
    7dda:	4814      	ldr	r0, [pc, #80]	; (7e2c <bt_smp_recv+0x11c>)
    7ddc:	f7f9 fcc4 	bl	1768 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    7de0:	210a      	movs	r1, #10
    7de2:	e005      	b.n	7df0 <bt_smp_recv+0xe0>
		return;
	}

	err = handlers[hdr->code].func(smp, buf);
    7de4:	0029      	movs	r1, r5
    7de6:	59db      	ldr	r3, [r3, r7]
    7de8:	0020      	movs	r0, r4
    7dea:	4798      	blx	r3
    7dec:	1e01      	subs	r1, r0, #0
	if (err) {
    7dee:	d002      	beq.n	7df6 <bt_smp_recv+0xe6>
		smp_error(smp, err);
    7df0:	0020      	movs	r0, r4
    7df2:	f7ff ff39 	bl	7c68 <smp_error>
	}
}
    7df6:	b005      	add	sp, #20
    7df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dfa:	46c0      	nop			; (mov r8, r8)
    7dfc:	000145b0 	.word	0x000145b0
    7e00:	00014570 	.word	0x00014570
    7e04:	000145b5 	.word	0x000145b5
    7e08:	00014577 	.word	0x00014577
    7e0c:	0001557e 	.word	0x0001557e
    7e10:	00016c1d 	.word	0x00016c1d
    7e14:	000145bd 	.word	0x000145bd
    7e18:	000145fb 	.word	0x000145fb
    7e1c:	000155a9 	.word	0x000155a9
    7e20:	00016a9c 	.word	0x00016a9c
    7e24:	000155ea 	.word	0x000155ea
    7e28:	00015614 	.word	0x00015614
    7e2c:	000151f6 	.word	0x000151f6

00007e30 <smp_dhkey_check>:

	return 0;
}

static u8_t smp_dhkey_check(struct bt_smp *smp, struct net_buf *buf)
{
    7e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
		return 0;
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    7e32:	6803      	ldr	r3, [r0, #0]

	return 0;
}

static u8_t smp_dhkey_check(struct bt_smp *smp, struct net_buf *buf)
{
    7e34:	0005      	movs	r5, r0
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
		return 0;
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    7e36:	78db      	ldrb	r3, [r3, #3]

		return compute_and_check_and_send_slave_dhcheck(smp);
	}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
    7e38:	2600      	movs	r6, #0
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
		return 0;
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    7e3a:	2b01      	cmp	r3, #1
    7e3c:	d122      	bne.n	7e84 <smp_dhkey_check+0x54>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    7e3e:	0004      	movs	r4, r0
    7e40:	3494      	adds	r4, #148	; 0x94
	return 0;
}

static u8_t smp_dhkey_check(struct bt_smp *smp, struct net_buf *buf)
{
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    7e42:	688f      	ldr	r7, [r1, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7e44:	0020      	movs	r0, r4
    7e46:	4910      	ldr	r1, [pc, #64]	; (7e88 <smp_dhkey_check+0x58>)
    7e48:	f00a ff38 	bl	12cbc <atomic_and>
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
		memcpy(smp->e, req->e, sizeof(smp->e));
    7e4c:	0028      	movs	r0, r5
    7e4e:	3048      	adds	r0, #72	; 0x48
    7e50:	0039      	movs	r1, r7
    7e52:	2210      	movs	r2, #16
    7e54:	30ff      	adds	r0, #255	; 0xff
    7e56:	f7f9 fa85 	bl	1364 <memcpy>

		/* wait for DHKey being generated */
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    7e5a:	2107      	movs	r1, #7
    7e5c:	0020      	movs	r0, r4
    7e5e:	f7fa f9da 	bl	2216 <atomic_test_bit>
    7e62:	42b0      	cmp	r0, r6
    7e64:	d105      	bne.n	7e72 <smp_dhkey_check+0x42>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
			return 0;
		}

		/* waiting for user to confirm passkey */
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    7e66:	2109      	movs	r1, #9
    7e68:	0020      	movs	r0, r4
    7e6a:	f7fa f9d4 	bl	2216 <atomic_test_bit>
    7e6e:	2800      	cmp	r0, #0
    7e70:	d004      	beq.n	7e7c <smp_dhkey_check+0x4c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    7e72:	2108      	movs	r1, #8
    7e74:	0020      	movs	r0, r4
    7e76:	f7ff f867 	bl	6f48 <atomic_set_bit>
			return 0;
    7e7a:	e003      	b.n	7e84 <smp_dhkey_check+0x54>
		}

		return compute_and_check_and_send_slave_dhcheck(smp);
    7e7c:	0028      	movs	r0, r5
    7e7e:	f7ff fb23 	bl	74c8 <compute_and_check_and_send_slave_dhcheck>
    7e82:	0006      	movs	r6, r0
	}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
}
    7e84:	0030      	movs	r0, r6
    7e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e88:	ffffdfff 	.word	0xffffdfff

00007e8c <smp_send_pairing_confirm>:
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;
	u8_t r;

	switch (smp->method) {
    7e8c:	0003      	movs	r3, r0
	return bt_encrypt_le(k, enc_data, enc_data);
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static u8_t smp_send_pairing_confirm(struct bt_smp *smp)
{
    7e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;
	u8_t r;

	switch (smp->method) {
    7e90:	3398      	adds	r3, #152	; 0x98
	return bt_encrypt_le(k, enc_data, enc_data);
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

static u8_t smp_send_pairing_confirm(struct bt_smp *smp)
{
    7e92:	0004      	movs	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;
	u8_t r;

	switch (smp->method) {
    7e94:	7818      	ldrb	r0, [r3, #0]
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
		r |= 0x80;
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    7e96:	2708      	movs	r7, #8
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;
	u8_t r;

	switch (smp->method) {
    7e98:	2803      	cmp	r0, #3
    7e9a:	d835      	bhi.n	7f08 <smp_send_pairing_confirm+0x7c>
    7e9c:	f7f8 f96c 	bl	178 <__gnu_thumb1_case_uqi>
    7ea0:	0e02020e 	.word	0x0e02020e
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    7ea4:	23b6      	movs	r3, #182	; 0xb6
    7ea6:	005b      	lsls	r3, r3, #1
    7ea8:	5ce2      	ldrb	r2, [r4, r3]
    7eaa:	0023      	movs	r3, r4
    7eac:	33fc      	adds	r3, #252	; 0xfc
    7eae:	6ede      	ldr	r6, [r3, #108]	; 0x6c
    7eb0:	2301      	movs	r3, #1
    7eb2:	40d6      	lsrs	r6, r2
    7eb4:	401e      	ands	r6, r3
		r |= 0x80;
    7eb6:	337f      	adds	r3, #127	; 0x7f
    7eb8:	431e      	orrs	r6, r3
		break;
    7eba:	e000      	b.n	7ebe <smp_send_pairing_confirm+0x32>
	u8_t r;

	switch (smp->method) {
	case PASSKEY_CONFIRM:
	case JUST_WORKS:
		r = 0;
    7ebc:	2600      	movs	r6, #0
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    7ebe:	2003      	movs	r0, #3
    7ec0:	f7ff fa44 	bl	734c <smp_create_pdu.isra.2>
	if (!buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    7ec4:	2708      	movs	r7, #8
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    7ec6:	1e05      	subs	r5, r0, #0
	if (!buf) {
    7ec8:	d01e      	beq.n	7f08 <smp_send_pairing_confirm+0x7c>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));
    7eca:	2110      	movs	r1, #16
    7ecc:	19c0      	adds	r0, r0, r7
    7ece:	f00a fc19 	bl	12704 <net_buf_simple_add>

	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    7ed2:	0022      	movs	r2, r4
    7ed4:	0021      	movs	r1, r4
    7ed6:	9000      	str	r0, [sp, #0]
    7ed8:	0033      	movs	r3, r6
    7eda:	32b7      	adds	r2, #183	; 0xb7
    7edc:	31e7      	adds	r1, #231	; 0xe7
    7ede:	480b      	ldr	r0, [pc, #44]	; (7f0c <smp_send_pairing_confirm+0x80>)
    7ee0:	f7ff faba 	bl	7458 <smp_f4>
    7ee4:	1e06      	subs	r6, r0, #0
    7ee6:	d003      	beq.n	7ef0 <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    7ee8:	0028      	movs	r0, r5
    7eea:	f00a fbe9 	bl	126c0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    7eee:	e00b      	b.n	7f08 <smp_send_pairing_confirm+0x7c>
	}

	smp_send(smp, buf, NULL);
    7ef0:	0002      	movs	r2, r0
    7ef2:	0029      	movs	r1, r5
    7ef4:	0020      	movs	r0, r4
    7ef6:	f7ff fad3 	bl	74a0 <smp_send>

	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    7efa:	0020      	movs	r0, r4
    7efc:	2102      	movs	r1, #2
    7efe:	3094      	adds	r0, #148	; 0x94
    7f00:	4249      	negs	r1, r1
    7f02:	f00a fedb 	bl	12cbc <atomic_and>

	return 0;
    7f06:	0037      	movs	r7, r6
}
    7f08:	0038      	movs	r0, r7
    7f0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7f0c:	20000d71 	.word	0x20000d71

00007f10 <smp_public_key_slave.part.7>:
	err = sc_send_public_key(smp);
	if (err) {
		return err;
	}

	switch (smp->method) {
    7f10:	0003      	movs	r3, r0

	return 0;
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
    7f12:	b570      	push	{r4, r5, r6, lr}
	err = sc_send_public_key(smp);
	if (err) {
		return err;
	}

	switch (smp->method) {
    7f14:	3398      	adds	r3, #152	; 0x98
    7f16:	781b      	ldrb	r3, [r3, #0]

	return 0;
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
    7f18:	0004      	movs	r4, r0
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
		bt_auth->passkey_entry(smp->chan.chan.conn);
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    7f1a:	2008      	movs	r0, #8
	err = sc_send_public_key(smp);
	if (err) {
		return err;
	}

	switch (smp->method) {
    7f1c:	2b03      	cmp	r3, #3
    7f1e:	d84a      	bhi.n	7fb6 <smp_public_key_slave.part.7+0xa6>
    7f20:	0018      	movs	r0, r3
    7f22:	f7f8 f929 	bl	178 <__gnu_thumb1_case_uqi>
    7f26:	2c02      	.short	0x2c02
    7f28:	020d      	.short	0x020d
	case PASSKEY_CONFIRM:
	case JUST_WORKS:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    7f2a:	0020      	movs	r0, r4
    7f2c:	2104      	movs	r1, #4
    7f2e:	3090      	adds	r0, #144	; 0x90
    7f30:	f7ff f80a 	bl	6f48 <atomic_set_bit>

		err = smp_send_pairing_confirm(smp);
    7f34:	0020      	movs	r0, r4
    7f36:	f7ff ffa9 	bl	7e8c <smp_send_pairing_confirm>
		if (err) {
    7f3a:	2800      	cmp	r0, #0
    7f3c:	d02e      	beq.n	7f9c <smp_public_key_slave.part.7+0x8c>
    7f3e:	e03a      	b.n	7fb6 <smp_public_key_slave.part.7+0xa6>
	return 0;
}

static u8_t display_passkey(struct bt_smp *smp)
{
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    7f40:	0020      	movs	r0, r4
    7f42:	3069      	adds	r0, #105	; 0x69
    7f44:	2104      	movs	r1, #4
    7f46:	30ff      	adds	r0, #255	; 0xff
    7f48:	f003 fb9a 	bl	b680 <bt_rand>
    7f4c:	1e05      	subs	r5, r0, #0
    7f4e:	d001      	beq.n	7f54 <smp_public_key_slave.part.7+0x44>
		return BT_SMP_ERR_UNSPECIFIED;
    7f50:	2008      	movs	r0, #8
    7f52:	e030      	b.n	7fb6 <smp_public_key_slave.part.7+0xa6>
	}

	smp->passkey %= 1000000;
    7f54:	0026      	movs	r6, r4
    7f56:	36fc      	adds	r6, #252	; 0xfc
    7f58:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
    7f5a:	4917      	ldr	r1, [pc, #92]	; (7fb8 <smp_public_key_slave.part.7+0xa8>)
    7f5c:	f7f8 f9a6 	bl	2ac <__aeabi_uidivmod>
	smp->passkey_round = 0;
    7f60:	23b6      	movs	r3, #182	; 0xb6
    7f62:	005b      	lsls	r3, r3, #1
{
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
		return BT_SMP_ERR_UNSPECIFIED;
	}

	smp->passkey %= 1000000;
    7f64:	66f1      	str	r1, [r6, #108]	; 0x6c
	smp->passkey_round = 0;
    7f66:	54e5      	strb	r5, [r4, r3]

	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    7f68:	4b14      	ldr	r3, [pc, #80]	; (7fbc <smp_public_key_slave.part.7+0xac>)
    7f6a:	6820      	ldr	r0, [r4, #0]
    7f6c:	681b      	ldr	r3, [r3, #0]
    7f6e:	681b      	ldr	r3, [r3, #0]
    7f70:	4798      	blx	r3
		err = display_passkey(smp);
		if (err) {
			return err;
		}

		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    7f72:	0020      	movs	r0, r4
    7f74:	2103      	movs	r1, #3
    7f76:	3090      	adds	r0, #144	; 0x90
    7f78:	f7fe ffe6 	bl	6f48 <atomic_set_bit>
    7f7c:	e00e      	b.n	7f9c <smp_public_key_slave.part.7+0x8c>
		break;
	case PASSKEY_INPUT:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    7f7e:	0020      	movs	r0, r4
    7f80:	2103      	movs	r1, #3
    7f82:	3090      	adds	r0, #144	; 0x90
    7f84:	f7fe ffe0 	bl	6f48 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    7f88:	0020      	movs	r0, r4
    7f8a:	2109      	movs	r1, #9
    7f8c:	3094      	adds	r0, #148	; 0x94
    7f8e:	f7fe ffdb 	bl	6f48 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    7f92:	4b0a      	ldr	r3, [pc, #40]	; (7fbc <smp_public_key_slave.part.7+0xac>)
    7f94:	6820      	ldr	r0, [r4, #0]
    7f96:	681b      	ldr	r3, [r3, #0]
    7f98:	685b      	ldr	r3, [r3, #4]
    7f9a:	4798      	blx	r3
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

static u8_t generate_dhkey(struct bt_smp *smp)
{
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    7f9c:	0020      	movs	r0, r4
    7f9e:	4908      	ldr	r1, [pc, #32]	; (7fc0 <smp_public_key_slave.part.7+0xb0>)
    7fa0:	30e7      	adds	r0, #231	; 0xe7
    7fa2:	f7fc f923 	bl	41ec <bt_dh_key_gen>
    7fa6:	1e05      	subs	r5, r0, #0
    7fa8:	d1d2      	bne.n	7f50 <smp_public_key_slave.part.7+0x40>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    7faa:	0020      	movs	r0, r4
    7fac:	2107      	movs	r1, #7
    7fae:	3094      	adds	r0, #148	; 0x94
    7fb0:	f7fe ffca 	bl	6f48 <atomic_set_bit>
	return 0;
    7fb4:	0028      	movs	r0, r5
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	return generate_dhkey(smp);
}
    7fb6:	bd70      	pop	{r4, r5, r6, pc}
    7fb8:	000f4240 	.word	0x000f4240
    7fbc:	20001ee8 	.word	0x20001ee8
    7fc0:	00007c9d 	.word	0x00007c9d

00007fc4 <bt_smp_pkey_ready>:
		smp_error(smp, err);
	}
}

static void bt_smp_pkey_ready(const u8_t *pkey)
{
    7fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7fc6:	1e04      	subs	r4, r0, #0
    7fc8:	4d15      	ldr	r5, [pc, #84]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
	int i;

	BT_DBG("");

	if (!pkey) {
    7fca:	d10b      	bne.n	7fe4 <bt_smp_pkey_ready+0x20>
		BT_WARN("Public key not available");
    7fcc:	4b15      	ldr	r3, [pc, #84]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    7fce:	4a16      	ldr	r2, [pc, #88]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
    7fd0:	9301      	str	r3, [sp, #4]
    7fd2:	4b16      	ldr	r3, [pc, #88]	; (802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>)
    7fd4:	4916      	ldr	r1, [pc, #88]	; (8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>)
    7fd6:	9300      	str	r3, [sp, #0]
    7fd8:	4816      	ldr	r0, [pc, #88]	; (8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>)
    7fda:	4b17      	ldr	r3, [pc, #92]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    7fdc:	f7f9 fbc4 	bl	1768 <printk>
		sc_local_pkey_valid = false;
    7fe0:	702c      	strb	r4, [r5, #0]
    7fe2:	e01c      	b.n	801e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e>
		return;
	}

	memcpy(sc_public_key, pkey, 64);
    7fe4:	0001      	movs	r1, r0
    7fe6:	2240      	movs	r2, #64	; 0x40
    7fe8:	4814      	ldr	r0, [pc, #80]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    7fea:	f7f9 f9bb 	bl	1364 <memcpy>

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];
		u8_t err;

		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    7fee:	4c14      	ldr	r4, [pc, #80]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
		sc_local_pkey_valid = false;
		return;
	}

	memcpy(sc_public_key, pkey, 64);
	sc_local_pkey_valid = true;
    7ff0:	2301      	movs	r3, #1

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];
		u8_t err;

		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    7ff2:	0020      	movs	r0, r4
    7ff4:	2106      	movs	r1, #6
    7ff6:	3094      	adds	r0, #148	; 0x94
		sc_local_pkey_valid = false;
		return;
	}

	memcpy(sc_public_key, pkey, 64);
	sc_local_pkey_valid = true;
    7ff8:	702b      	strb	r3, [r5, #0]

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];
		u8_t err;

		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    7ffa:	f7fa f90c 	bl	2216 <atomic_test_bit>
    7ffe:	2800      	cmp	r0, #0
    8000:	d00d      	beq.n	801e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
{
	u8_t err;

	err = sc_send_public_key(smp);
    8002:	0020      	movs	r0, r4
    8004:	f7ff fccc 	bl	79a0 <sc_send_public_key>
	if (err) {
    8008:	2800      	cmp	r0, #0
    800a:	d104      	bne.n	8016 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16>
    800c:	0020      	movs	r0, r4
    800e:	f7ff ff7f 	bl	7f10 <smp_public_key_slave.part.7>
			continue;
		}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
		err = smp_public_key_slave(smp);
		if (err) {
    8012:	2800      	cmp	r0, #0
    8014:	d003      	beq.n	801e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e>
			smp_error(smp, err);
    8016:	0001      	movs	r1, r0
    8018:	0020      	movs	r0, r4
    801a:	f7ff fe25 	bl	7c68 <smp_error>
		}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */
	}
}
    801e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    8020:	20000db1 	.word	0x20000db1
    8024:	000145b0 	.word	0x000145b0
    8028:	000145bd 	.word	0x000145bd
    802c:	000145fb 	.word	0x000145fb
    8030:	00014577 	.word	0x00014577
    8034:	0001563f 	.word	0x0001563f
    8038:	00016c29 	.word	0x00016c29
    803c:	20000d71 	.word	0x20000d71
    8040:	20000db4 	.word	0x20000db4

00008044 <smp_public_key>:
	return generate_dhkey(smp);
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t smp_public_key(struct bt_smp *smp, struct net_buf *buf)
{
    8044:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
	u8_t err;

	BT_DBG("");

	memcpy(smp->pkey, req->x, 32);
    8046:	0006      	movs	r6, r0
	return generate_dhkey(smp);
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t smp_public_key(struct bt_smp *smp, struct net_buf *buf)
{
    8048:	0004      	movs	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    804a:	688d      	ldr	r5, [r1, #8]
	u8_t err;

	BT_DBG("");

	memcpy(smp->pkey, req->x, 32);
    804c:	36e7      	adds	r6, #231	; 0xe7
    804e:	2220      	movs	r2, #32
    8050:	0029      	movs	r1, r5
    8052:	0030      	movs	r0, r6
    8054:	f7f9 f986 	bl	1364 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    8058:	0020      	movs	r0, r4
    805a:	0029      	movs	r1, r5
    805c:	3008      	adds	r0, #8
    805e:	3120      	adds	r1, #32
    8060:	2220      	movs	r2, #32
    8062:	30ff      	adds	r0, #255	; 0xff
    8064:	f7f9 f97e 	bl	1364 <memcpy>

	/* mark key as debug if remote is using it */
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    8068:	2240      	movs	r2, #64	; 0x40
    806a:	4913      	ldr	r1, [pc, #76]	; (80b8 <smp_public_key+0x74>)
    806c:	0030      	movs	r0, r6
    806e:	f7f9 f951 	bl	1314 <memcmp>
    8072:	2800      	cmp	r0, #0
    8074:	d10d      	bne.n	8092 <smp_public_key+0x4e>
		BT_INFO("Remote is using Debug Public key");
    8076:	4b11      	ldr	r3, [pc, #68]	; (80bc <smp_public_key+0x78>)
    8078:	4911      	ldr	r1, [pc, #68]	; (80c0 <smp_public_key+0x7c>)
    807a:	9301      	str	r3, [sp, #4]
    807c:	9300      	str	r3, [sp, #0]
    807e:	4a11      	ldr	r2, [pc, #68]	; (80c4 <smp_public_key+0x80>)
    8080:	4b11      	ldr	r3, [pc, #68]	; (80c8 <smp_public_key+0x84>)
    8082:	4812      	ldr	r0, [pc, #72]	; (80cc <smp_public_key+0x88>)
    8084:	f7f9 fb70 	bl	1768 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    8088:	0020      	movs	r0, r4
    808a:	210b      	movs	r1, #11
    808c:	3094      	adds	r0, #148	; 0x94
    808e:	f7fe ff5b 	bl	6f48 <atomic_set_bit>

		return generate_dhkey(smp);
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (!sc_local_pkey_valid) {
    8092:	4b0f      	ldr	r3, [pc, #60]	; (80d0 <smp_public_key+0x8c>)
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    8094:	0020      	movs	r0, r4

		return generate_dhkey(smp);
	}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	if (!sc_local_pkey_valid) {
    8096:	781d      	ldrb	r5, [r3, #0]
    8098:	2d00      	cmp	r5, #0
    809a:	d105      	bne.n	80a8 <smp_public_key+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    809c:	3094      	adds	r0, #148	; 0x94
    809e:	2106      	movs	r1, #6
    80a0:	f7fe ff52 	bl	6f48 <atomic_set_bit>
		return 0;
    80a4:	0028      	movs	r0, r5
    80a6:	e006      	b.n	80b6 <smp_public_key+0x72>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
static u8_t smp_public_key_slave(struct bt_smp *smp)
{
	u8_t err;

	err = sc_send_public_key(smp);
    80a8:	f7ff fc7a 	bl	79a0 <sc_send_public_key>
	if (err) {
    80ac:	2800      	cmp	r0, #0
    80ae:	d102      	bne.n	80b6 <smp_public_key+0x72>
    80b0:	0020      	movs	r0, r4
    80b2:	f7ff ff2d 	bl	7f10 <smp_public_key_slave.part.7>
		return err;
	}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
}
    80b6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    80b8:	00016c8a 	.word	0x00016c8a
    80bc:	0001425c 	.word	0x0001425c
    80c0:	00014577 	.word	0x00014577
    80c4:	00014720 	.word	0x00014720
    80c8:	00016cf4 	.word	0x00016cf4
    80cc:	00015668 	.word	0x00015668
    80d0:	20000db1 	.word	0x20000db1

000080d4 <smp_c1>:

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    80d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    80d6:	b089      	sub	sp, #36	; 0x24
    80d8:	000f      	movs	r7, r1
    80da:	0011      	movs	r1, r2
	BT_DBG("k %s r %s", bt_hex(k, 16), bt_hex(r, 16));
	BT_DBG("ia %s ra %s", bt_addr_le_str(ia), bt_addr_le_str(ra));
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
    80dc:	466a      	mov	r2, sp

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    80de:	001c      	movs	r4, r3
	BT_DBG("k %s r %s", bt_hex(k, 16), bt_hex(r, 16));
	BT_DBG("ia %s ra %s", bt_addr_le_str(ia), bt_addr_le_str(ra));
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
    80e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    80e2:	0006      	movs	r6, r0
	BT_DBG("k %s r %s", bt_hex(k, 16), bt_hex(r, 16));
	BT_DBG("ia %s ra %s", bt_addr_le_str(ia), bt_addr_le_str(ra));
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
    80e4:	781b      	ldrb	r3, [r3, #0]

static int smp_c1(const u8_t k[16], const u8_t r[16],
		  const u8_t preq[7], const u8_t pres[7],
		  const bt_addr_le_t *ia, const bt_addr_le_t *ra,
		  u8_t enc_data[16])
{
    80e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
	BT_DBG("k %s r %s", bt_hex(k, 16), bt_hex(r, 16));
	BT_DBG("ia %s ra %s", bt_addr_le_str(ia), bt_addr_le_str(ra));
	BT_DBG("preq %s pres %s", bt_hex(preq, 7), bt_hex(pres, 7));

	/* pres, preq, rat and iat are concatenated to generate p1 */
	p1[0] = ia->type;
    80e8:	7013      	strb	r3, [r2, #0]
	p1[1] = ra->type;
    80ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    80ec:	781b      	ldrb	r3, [r3, #0]
    80ee:	7053      	strb	r3, [r2, #1]
	memcpy(p1 + 2, preq, 7);
    80f0:	466b      	mov	r3, sp
    80f2:	2207      	movs	r2, #7
    80f4:	1c98      	adds	r0, r3, #2
    80f6:	f7f9 f935 	bl	1364 <memcpy>
	memcpy(p1 + 9, pres, 7);
    80fa:	2009      	movs	r0, #9
    80fc:	2207      	movs	r2, #7
    80fe:	0021      	movs	r1, r4
    8100:	4468      	add	r0, sp
    8102:	f7f9 f92f 	bl	1364 <memcpy>
    8106:	2300      	movs	r3, #0
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
		*r++ = *p++ ^ *q++;
    8108:	466a      	mov	r2, sp
    810a:	5cf9      	ldrb	r1, [r7, r3]
    810c:	5c9a      	ldrb	r2, [r3, r2]
    810e:	404a      	eors	r2, r1
    8110:	54ea      	strb	r2, [r5, r3]
    8112:	3301      	adds	r3, #1
#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
    8114:	2b10      	cmp	r3, #16
    8116:	d1f7      	bne.n	8108 <smp_c1+0x34>
	/* c1 = e(k, e(k, r XOR p1) XOR p2) */

	/* Using enc_data as temporary output buffer */
	xor_128(r, p1, enc_data);

	err = bt_encrypt_le(k, enc_data, enc_data);
    8118:	002a      	movs	r2, r5
    811a:	0029      	movs	r1, r5
    811c:	0030      	movs	r0, r6
    811e:	f003 facd 	bl	b6bc <bt_encrypt_le>
    8122:	1e04      	subs	r4, r0, #0
	if (err) {
    8124:	d11e      	bne.n	8164 <smp_c1+0x90>
		return err;
	}

	/* ra is concatenated with ia and padding to generate p2 */
	memcpy(p2, ra->a.val, 6);
    8126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8128:	af04      	add	r7, sp, #16
    812a:	1c59      	adds	r1, r3, #1
    812c:	2206      	movs	r2, #6
    812e:	0038      	movs	r0, r7
    8130:	f7f9 f918 	bl	1364 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    8134:	2016      	movs	r0, #22
    8136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8138:	2206      	movs	r2, #6
    813a:	1c59      	adds	r1, r3, #1
    813c:	4468      	add	r0, sp
    813e:	f7f9 f911 	bl	1364 <memcpy>
	memset(p2 + 12, 0, 4);
    8142:	2204      	movs	r2, #4
    8144:	0021      	movs	r1, r4
    8146:	a807      	add	r0, sp, #28
    8148:	f7f9 f936 	bl	13b8 <memset>
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
		*r++ = *p++ ^ *q++;
    814c:	5d2a      	ldrb	r2, [r5, r4]
    814e:	5d3b      	ldrb	r3, [r7, r4]
    8150:	4053      	eors	r3, r2
    8152:	552b      	strb	r3, [r5, r4]
    8154:	3401      	adds	r4, #1
#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
	size_t len = 16;

	while (len--) {
    8156:	2c10      	cmp	r4, #16
    8158:	d1f8      	bne.n	814c <smp_c1+0x78>

	BT_DBG("p2 %s", bt_hex(p2, 16));

	xor_128(enc_data, p2, enc_data);

	return bt_encrypt_le(k, enc_data, enc_data);
    815a:	002a      	movs	r2, r5
    815c:	0029      	movs	r1, r5
    815e:	0030      	movs	r0, r6
    8160:	f003 faac 	bl	b6bc <bt_encrypt_le>
}
    8164:	b009      	add	sp, #36	; 0x24
    8166:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008168 <legacy_pairing_confirm>:

	return 0;
}

static u8_t legacy_pairing_confirm(struct bt_smp *smp)
{
    8168:	b5f0      	push	{r4, r5, r6, r7, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
		return legacy_send_pairing_confirm(smp);
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    816a:	0006      	movs	r6, r0
    816c:	3694      	adds	r6, #148	; 0x94

	return 0;
}

static u8_t legacy_pairing_confirm(struct bt_smp *smp)
{
    816e:	b087      	sub	sp, #28
    8170:	0004      	movs	r4, r0
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
		return legacy_send_pairing_confirm(smp);
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    8172:	2109      	movs	r1, #9
    8174:	0030      	movs	r0, r6
    8176:	f7fa f84e 	bl	2216 <atomic_test_bit>
    817a:	2800      	cmp	r0, #0
    817c:	d132      	bne.n	81e4 <legacy_pairing_confirm+0x7c>
			atomic_set_bit(&smp->allowed_cmds,
    817e:	0020      	movs	r0, r4
    8180:	2104      	movs	r1, #4
    8182:	3090      	adds	r0, #144	; 0x90
    8184:	f7fe fee0 	bl	6f48 <atomic_set_bit>
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    8188:	2003      	movs	r0, #3
	return 0;
}

static u8_t legacy_send_pairing_confirm(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    818a:	6827      	ldr	r7, [r4, #0]
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    818c:	f7ff f8de 	bl	734c <smp_create_pdu.isra.2>
	if (!buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    8190:	2308      	movs	r3, #8
{
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    8192:	1e05      	subs	r5, r0, #0
	if (!buf) {
		return BT_SMP_ERR_UNSPECIFIED;
    8194:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_pairing_confirm *req;
	struct net_buf *buf;

	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
	if (!buf) {
    8196:	d02b      	beq.n	81f0 <legacy_pairing_confirm+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));
    8198:	2110      	movs	r1, #16
    819a:	18c0      	adds	r0, r0, r3
    819c:	f00a fab2 	bl	12704 <net_buf_simple_add>

	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    81a0:	003b      	movs	r3, r7
    81a2:	3362      	adds	r3, #98	; 0x62
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));

	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    81a4:	9002      	str	r0, [sp, #8]
    81a6:	9301      	str	r3, [sp, #4]
    81a8:	0022      	movs	r2, r4
    81aa:	0023      	movs	r3, r4
    81ac:	0021      	movs	r1, r4
    81ae:	0020      	movs	r0, r4
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    81b0:	375b      	adds	r7, #91	; 0x5b
		return BT_SMP_ERR_UNSPECIFIED;
	}

	req = net_buf_add(buf, sizeof(*req));

	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    81b2:	9700      	str	r7, [sp, #0]
    81b4:	33a0      	adds	r3, #160	; 0xa0
    81b6:	3299      	adds	r2, #153	; 0x99
    81b8:	31b7      	adds	r1, #183	; 0xb7
    81ba:	30d7      	adds	r0, #215	; 0xd7
    81bc:	f7ff ff8a 	bl	80d4 <smp_c1>
    81c0:	1e07      	subs	r7, r0, #0
    81c2:	d003      	beq.n	81cc <legacy_pairing_confirm+0x64>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
		net_buf_unref(buf);
    81c4:	0028      	movs	r0, r5
    81c6:	f00a fa7b 	bl	126c0 <net_buf_unref>
    81ca:	e011      	b.n	81f0 <legacy_pairing_confirm+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	smp_send(smp, buf, NULL);
    81cc:	0002      	movs	r2, r0
    81ce:	0029      	movs	r1, r5
    81d0:	0020      	movs	r0, r4
    81d2:	f7ff f965 	bl	74a0 <smp_send>
    81d6:	2102      	movs	r1, #2
    81d8:	0030      	movs	r0, r6
    81da:	4249      	negs	r1, r1
    81dc:	f00a fd6e 	bl	12cbc <atomic_and>

	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);

	return 0;
    81e0:	9705      	str	r7, [sp, #20]
    81e2:	e005      	b.n	81f0 <legacy_pairing_confirm+0x88>
			atomic_set_bit(&smp->allowed_cmds,
				       BT_SMP_CMD_PAIRING_RANDOM);
			return legacy_send_pairing_confirm(smp);
		}

		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    81e4:	2100      	movs	r1, #0
    81e6:	0030      	movs	r0, r6
    81e8:	f7fe feae 	bl	6f48 <atomic_set_bit>
	}

	return 0;
    81ec:	2300      	movs	r3, #0
    81ee:	9305      	str	r3, [sp, #20]
}
    81f0:	9805      	ldr	r0, [sp, #20]
    81f2:	b007      	add	sp, #28
    81f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000081f6 <smp_pairing_confirm>:
	return BT_SMP_ERR_CMD_NOTSUPP;
}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

static u8_t smp_pairing_confirm(struct bt_smp *smp, struct net_buf *buf)
{
    81f6:	b570      	push	{r4, r5, r6, lr}
    81f8:	0004      	movs	r4, r0
	if (!IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		return 0;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    81fa:	0025      	movs	r5, r4
{
	struct bt_smp_pairing_confirm *req = (void *)buf->data;

	BT_DBG("");

	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    81fc:	6889      	ldr	r1, [r1, #8]
    81fe:	30a7      	adds	r0, #167	; 0xa7
    8200:	2210      	movs	r2, #16
	if (!IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		return 0;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8202:	3594      	adds	r5, #148	; 0x94
{
	struct bt_smp_pairing_confirm *req = (void *)buf->data;

	BT_DBG("");

	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    8204:	f7f9 f8ae 	bl	1364 <memcpy>
	if (!IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		return 0;
	}

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8208:	2105      	movs	r1, #5
    820a:	0028      	movs	r0, r5
    820c:	f7fa f803 	bl	2216 <atomic_test_bit>
    8210:	2800      	cmp	r0, #0
    8212:	d103      	bne.n	821c <smp_pairing_confirm+0x26>
		return legacy_pairing_confirm(smp);
    8214:	0020      	movs	r0, r4
    8216:	f7ff ffa7 	bl	8168 <legacy_pairing_confirm>
    821a:	e01c      	b.n	8256 <smp_pairing_confirm+0x60>
	}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

	switch (smp->method) {
    821c:	0023      	movs	r3, r4
    821e:	3398      	adds	r3, #152	; 0x98
    8220:	781b      	ldrb	r3, [r3, #0]
    8222:	2b01      	cmp	r3, #1
    8224:	d003      	beq.n	822e <smp_pairing_confirm+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
		return smp_send_pairing_confirm(smp);
	case JUST_WORKS:
	case PASSKEY_CONFIRM:
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    8226:	2008      	movs	r0, #8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
		return legacy_pairing_confirm(smp);
	}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

	switch (smp->method) {
    8228:	2b02      	cmp	r3, #2
    822a:	d114      	bne.n	8256 <smp_pairing_confirm+0x60>
    822c:	e00b      	b.n	8246 <smp_pairing_confirm+0x50>
	case PASSKEY_DISPLAY:
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
		return smp_send_pairing_confirm(smp);
	case PASSKEY_INPUT:
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    822e:	2109      	movs	r1, #9
    8230:	0028      	movs	r0, r5
    8232:	f7f9 fff0 	bl	2216 <atomic_test_bit>
    8236:	2800      	cmp	r0, #0
    8238:	d005      	beq.n	8246 <smp_pairing_confirm+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    823a:	0028      	movs	r0, r5
    823c:	2100      	movs	r1, #0
    823e:	f7fe fe83 	bl	6f48 <atomic_set_bit>
			return 0;
    8242:	2000      	movs	r0, #0
    8244:	e007      	b.n	8256 <smp_pairing_confirm+0x60>
		}

		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    8246:	0020      	movs	r0, r4
    8248:	2104      	movs	r1, #4
    824a:	3090      	adds	r0, #144	; 0x90
    824c:	f7fe fe7c 	bl	6f48 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    8250:	0020      	movs	r0, r4
    8252:	f7ff fe1b 	bl	7e8c <smp_send_pairing_confirm>
	case JUST_WORKS:
	case PASSKEY_CONFIRM:
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}
}
    8256:	bd70      	pop	{r4, r5, r6, pc}

00008258 <smp_pairing_random>:

	return 0;
}

static u8_t smp_pairing_random(struct bt_smp *smp, struct net_buf *buf)
{
    8258:	b5f0      	push	{r4, r5, r6, r7, lr}
    825a:	0004      	movs	r4, r0
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    825c:	0003      	movs	r3, r0

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    825e:	0027      	movs	r7, r4
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    8260:	33c7      	adds	r3, #199	; 0xc7

	return 0;
}

static u8_t smp_pairing_random(struct bt_smp *smp, struct net_buf *buf)
{
    8262:	b0a1      	sub	sp, #132	; 0x84
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    8264:	6889      	ldr	r1, [r1, #8]
    8266:	2210      	movs	r2, #16
    8268:	0018      	movs	r0, r3

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    826a:	3794      	adds	r7, #148	; 0x94
	u32_t passkey;
	u8_t err;

	BT_DBG("");

	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    826c:	9304      	str	r3, [sp, #16]
    826e:	f7f9 f879 	bl	1364 <memcpy>

#if !defined(CONFIG_BLUETOOTH_SMP_SC_ONLY)
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8272:	2105      	movs	r1, #5
    8274:	0038      	movs	r0, r7
    8276:	f7f9 ffce 	bl	2216 <atomic_test_bit>
    827a:	2800      	cmp	r0, #0
    827c:	d13d      	bne.n	82fa <smp_pairing_random+0xa2>
	int err;

	BT_DBG("");

	/* calculate confirmation */
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    827e:	0022      	movs	r2, r4
}
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

static u8_t legacy_pairing_random(struct bt_smp *smp)
{
	struct bt_conn *conn = smp->chan.chan.conn;
    8280:	6823      	ldr	r3, [r4, #0]
	int err;

	BT_DBG("");

	/* calculate confirmation */
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    8282:	32d7      	adds	r2, #215	; 0xd7
    8284:	9205      	str	r2, [sp, #20]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    8286:	001a      	movs	r2, r3
    8288:	335b      	adds	r3, #91	; 0x5b
    828a:	3262      	adds	r2, #98	; 0x62
	int err;

	BT_DBG("");

	/* calculate confirmation */
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    828c:	9201      	str	r2, [sp, #4]
    828e:	9300      	str	r3, [sp, #0]
    8290:	0022      	movs	r2, r4
    8292:	0023      	movs	r3, r4
    8294:	ae0c      	add	r6, sp, #48	; 0x30
    8296:	9602      	str	r6, [sp, #8]
    8298:	33a0      	adds	r3, #160	; 0xa0
    829a:	3299      	adds	r2, #153	; 0x99
    829c:	9904      	ldr	r1, [sp, #16]
    829e:	9805      	ldr	r0, [sp, #20]
    82a0:	f7ff ff18 	bl	80d4 <smp_c1>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
	if (err) {
    82a4:	2800      	cmp	r0, #0
    82a6:	d16e      	bne.n	8386 <smp_pairing_random+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("pcnf %s cfm %s", bt_hex(smp->pcnf, 16), bt_hex(tmp, 16));

	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    82a8:	0020      	movs	r0, r4
    82aa:	2210      	movs	r2, #16
    82ac:	0031      	movs	r1, r6
    82ae:	30a7      	adds	r0, #167	; 0xa7
    82b0:	f7f9 f830 	bl	1314 <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
    82b4:	2504      	movs	r5, #4
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("pcnf %s cfm %s", bt_hex(smp->pcnf, 16), bt_hex(tmp, 16));

	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    82b6:	2800      	cmp	r0, #0
    82b8:	d000      	beq.n	82bc <smp_pairing_random+0x64>
    82ba:	e0af      	b.n	841c <smp_pairing_random+0x1c4>
	 * r1' is concatenated with r2' to generate r' which is used as
	 * the 128-bit input parameter plaintextData to security function e:
	 *
	 *    r' = r1' || r2'
	 */
	memcpy(out, r2, 8);
    82bc:	2208      	movs	r2, #8
    82be:	9904      	ldr	r1, [sp, #16]
    82c0:	0030      	movs	r0, r6
    82c2:	f7f9 f84f 	bl	1364 <memcpy>
	memcpy(out + 8, r1, 8);
    82c6:	0021      	movs	r1, r4
    82c8:	2208      	movs	r2, #8
    82ca:	31b7      	adds	r1, #183	; 0xb7
    82cc:	a80e      	add	r0, sp, #56	; 0x38
    82ce:	f7f9 f849 	bl	1364 <memcpy>

	/* s1(k, r1 , r2) = e(k, r') */
	return bt_encrypt_le(k, out, out);
    82d2:	0032      	movs	r2, r6
    82d4:	0031      	movs	r1, r6
    82d6:	9805      	ldr	r0, [sp, #20]
    82d8:	f003 f9f0 	bl	b6bc <bt_encrypt_le>
    82dc:	1e05      	subs	r5, r0, #0
		return 0;
	}

	if (IS_ENABLED(CONFIG_BLUETOOTH_PERIPHERAL)) {
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
		if (err) {
    82de:	d152      	bne.n	8386 <smp_pairing_random+0x12e>
			return BT_SMP_ERR_UNSPECIFIED;
		}

		memcpy(smp->tk, tmp, sizeof(smp->tk));
    82e0:	2210      	movs	r2, #16
    82e2:	0031      	movs	r1, r6
    82e4:	9805      	ldr	r0, [sp, #20]
    82e6:	f7f9 f83d 	bl	1364 <memcpy>
		BT_DBG("generated STK %s", bt_hex(smp->tk, 16));

		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    82ea:	0038      	movs	r0, r7
    82ec:	2101      	movs	r1, #1
    82ee:	f7fe fe2b 	bl	6f48 <atomic_set_bit>

		smp_send_pairing_random(smp);
    82f2:	0020      	movs	r0, r4
    82f4:	f7ff fb78 	bl	79e8 <smp_send_pairing_random>
    82f8:	e090      	b.n	841c <smp_pairing_random+0x1c4>
		return compute_and_send_master_dhcheck(smp);
	}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	switch (smp->method) {
    82fa:	0023      	movs	r3, r4
    82fc:	3398      	adds	r3, #152	; 0x98
    82fe:	7818      	ldrb	r0, [r3, #0]
			return BT_SMP_ERR_UNSPECIFIED;
		}

		return 0;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
    8300:	2508      	movs	r5, #8
		return compute_and_send_master_dhcheck(smp);
	}
#endif /* CONFIG_BLUETOOTH_CENTRAL */

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	switch (smp->method) {
    8302:	2803      	cmp	r0, #3
    8304:	d900      	bls.n	8308 <smp_pairing_random+0xb0>
    8306:	e089      	b.n	841c <smp_pairing_random+0x1c4>
    8308:	f7f7 ff36 	bl	178 <__gnu_thumb1_case_uqi>
    830c:	023f3f7b 	.word	0x023f3f7b

	BT_DBG("u %s", bt_hex(u, 32));
	BT_DBG("v %s", bt_hex(v, 32));
	BT_DBG("x %s y %s", bt_hex(x, 16), bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
    8310:	0021      	movs	r1, r4
    8312:	2220      	movs	r2, #32
    8314:	31e7      	adds	r1, #231	; 0xe7
    8316:	a80c      	add	r0, sp, #48	; 0x30
    8318:	f7fe fdb6 	bl	6e88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    831c:	2220      	movs	r2, #32
    831e:	4941      	ldr	r1, [pc, #260]	; (8424 <smp_pairing_random+0x1cc>)
    8320:	a814      	add	r0, sp, #80	; 0x50
    8322:	f7fe fdb1 	bl	6e88 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    8326:	0021      	movs	r1, r4
    8328:	2210      	movs	r2, #16
    832a:	31b7      	adds	r1, #183	; 0xb7
    832c:	a81c      	add	r0, sp, #112	; 0x70
    832e:	f7fe fdab 	bl	6e88 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
    8332:	2210      	movs	r2, #16
    8334:	9904      	ldr	r1, [sp, #16]
    8336:	a808      	add	r0, sp, #32
    8338:	f7fe fda6 	bl	6e88 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    833c:	ab08      	add	r3, sp, #32
    833e:	2250      	movs	r2, #80	; 0x50
    8340:	a90c      	add	r1, sp, #48	; 0x30
    8342:	0018      	movs	r0, r3
    8344:	f7fe fe1c 	bl	6f80 <bt_smp_aes_cmac>
	if (err) {
    8348:	2800      	cmp	r0, #0
    834a:	d11c      	bne.n	8386 <smp_pairing_random+0x12e>
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
    834c:	2204      	movs	r2, #4
    834e:	a90b      	add	r1, sp, #44	; 0x2c
    8350:	a807      	add	r0, sp, #28
    8352:	f7f9 f807 	bl	1364 <memcpy>
    8356:	9b07      	ldr	r3, [sp, #28]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    8358:	4933      	ldr	r1, [pc, #204]	; (8428 <smp_pairing_random+0x1d0>)
    835a:	ba18      	rev	r0, r3
    835c:	f7f7 ffa6 	bl	2ac <__aeabi_uidivmod>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
			   &passkey)) {
			return BT_SMP_ERR_UNSPECIFIED;
		}

		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8360:	0038      	movs	r0, r7
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    8362:	9107      	str	r1, [sp, #28]
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
			   &passkey)) {
			return BT_SMP_ERR_UNSPECIFIED;
		}

		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    8364:	2109      	movs	r1, #9
    8366:	f7fe fdef 	bl	6f48 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    836a:	4b30      	ldr	r3, [pc, #192]	; (842c <smp_pairing_random+0x1d4>)
    836c:	9907      	ldr	r1, [sp, #28]
    836e:	681b      	ldr	r3, [r3, #0]
    8370:	6820      	ldr	r0, [r4, #0]
    8372:	689b      	ldr	r3, [r3, #8]
    8374:	4798      	blx	r3
		break;
    8376:	e044      	b.n	8402 <smp_pairing_random+0x1aa>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
			return 0;
		}

		if (bt_rand(smp->prnd, 16)) {
    8378:	0020      	movs	r0, r4
    837a:	2110      	movs	r1, #16
    837c:	30b7      	adds	r0, #183	; 0xb7
    837e:	f003 f97f 	bl	b680 <bt_rand>
    8382:	2800      	cmp	r0, #0
    8384:	d04a      	beq.n	841c <smp_pairing_random+0x1c4>
#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
	switch (smp->method) {
	case PASSKEY_CONFIRM:
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
			   &passkey)) {
			return BT_SMP_ERR_UNSPECIFIED;
    8386:	2508      	movs	r5, #8
    8388:	e048      	b.n	841c <smp_pairing_random+0x1c4>
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    838a:	23b6      	movs	r3, #182	; 0xb6
    838c:	005b      	lsls	r3, r3, #1
    838e:	5ce2      	ldrb	r2, [r4, r3]
    8390:	0023      	movs	r3, r4
    8392:	33fc      	adds	r3, #252	; 0xfc
    8394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    8396:	0020      	movs	r0, r4
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    8398:	40d3      	lsrs	r3, r2
    839a:	2201      	movs	r2, #1
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    839c:	ae0c      	add	r6, sp, #48	; 0x30
		 * bit of Z is set equal to one and the least
		 * significant bit is made up from one bit of the
		 * passkey e.g. if the passkey bit is 1, then Z = 0x81
		 * and if the passkey bit is 0, then Z = 0x80.
		 */
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    839e:	4013      	ands	r3, r2
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    83a0:	327f      	adds	r2, #127	; 0x7f
    83a2:	4313      	orrs	r3, r2
    83a4:	9600      	str	r6, [sp, #0]
    83a6:	9a04      	ldr	r2, [sp, #16]
    83a8:	491e      	ldr	r1, [pc, #120]	; (8424 <smp_pairing_random+0x1cc>)
    83aa:	30e7      	adds	r0, #231	; 0xe7
    83ac:	f7ff f854 	bl	7458 <smp_f4>
		return BT_SMP_ERR_UNSPECIFIED;
    83b0:	2508      	movs	r5, #8
		break;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    83b2:	2800      	cmp	r0, #0
    83b4:	d132      	bne.n	841c <smp_pairing_random+0x1c4>
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("pcnf %s cfm %s", bt_hex(smp->pcnf, 16), bt_hex(cfm, 16));

	if (memcmp(smp->pcnf, cfm, 16)) {
    83b6:	0020      	movs	r0, r4
    83b8:	2210      	movs	r2, #16
    83ba:	0031      	movs	r1, r6
    83bc:	30a7      	adds	r0, #167	; 0xa7
    83be:	f7f8 ffa9 	bl	1314 <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
    83c2:	3d04      	subs	r5, #4
		return BT_SMP_ERR_UNSPECIFIED;
	}

	BT_DBG("pcnf %s cfm %s", bt_hex(smp->pcnf, 16), bt_hex(cfm, 16));

	if (memcmp(smp->pcnf, cfm, 16)) {
    83c4:	2800      	cmp	r0, #0
    83c6:	d129      	bne.n	841c <smp_pairing_random+0x1c4>
		err = sc_smp_check_confirm(smp);
		if (err) {
			return err;
		}

		atomic_set_bit(&smp->allowed_cmds,
    83c8:	0026      	movs	r6, r4
    83ca:	3690      	adds	r6, #144	; 0x90
    83cc:	2103      	movs	r1, #3

	if (memcmp(smp->pcnf, cfm, 16)) {
		return BT_SMP_ERR_CONFIRM_FAILED;
	}

	return 0;
    83ce:	0005      	movs	r5, r0
		err = sc_smp_check_confirm(smp);
		if (err) {
			return err;
		}

		atomic_set_bit(&smp->allowed_cmds,
    83d0:	0030      	movs	r0, r6
    83d2:	f7fe fdb9 	bl	6f48 <atomic_set_bit>
			       BT_SMP_CMD_PAIRING_CONFIRM);
		smp_send_pairing_random(smp);
    83d6:	0020      	movs	r0, r4
    83d8:	f7ff fb06 	bl	79e8 <smp_send_pairing_random>

		smp->passkey_round++;
    83dc:	23b6      	movs	r3, #182	; 0xb6
    83de:	22b6      	movs	r2, #182	; 0xb6
    83e0:	005b      	lsls	r3, r3, #1
    83e2:	5ce3      	ldrb	r3, [r4, r3]
    83e4:	0052      	lsls	r2, r2, #1
    83e6:	3301      	adds	r3, #1
    83e8:	b2db      	uxtb	r3, r3
    83ea:	54a3      	strb	r3, [r4, r2]
		if (smp->passkey_round == 20) {
    83ec:	2b14      	cmp	r3, #20
    83ee:	d1c3      	bne.n	8378 <smp_pairing_random+0x120>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    83f0:	0030      	movs	r0, r6
    83f2:	210d      	movs	r1, #13
    83f4:	f7fe fda8 	bl	6f48 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    83f8:	210d      	movs	r1, #13
    83fa:	0038      	movs	r0, r7
    83fc:	f7fe fda4 	bl	6f48 <atomic_set_bit>
			return 0;
    8400:	e00c      	b.n	841c <smp_pairing_random+0x1c4>
		return 0;
	default:
		return BT_SMP_ERR_UNSPECIFIED;
	}

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    8402:	0020      	movs	r0, r4
    8404:	210d      	movs	r1, #13
    8406:	3090      	adds	r0, #144	; 0x90
    8408:	f7fe fd9e 	bl	6f48 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    840c:	210d      	movs	r1, #13
    840e:	0038      	movs	r0, r7
    8410:	f7fe fd9a 	bl	6f48 <atomic_set_bit>
	smp_send_pairing_random(smp);
    8414:	0020      	movs	r0, r4
    8416:	f7ff fae7 	bl	79e8 <smp_send_pairing_random>
#endif /* CONFIG_BLUETOOTH_PERIPHERAL */

	return 0;
    841a:	2500      	movs	r5, #0
}
    841c:	0028      	movs	r0, r5
    841e:	b021      	add	sp, #132	; 0x84
    8420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8422:	46c0      	nop			; (mov r8, r8)
    8424:	20000d71 	.word	0x20000d71
    8428:	000f4240 	.word	0x000f4240
    842c:	20001ee8 	.word	0x20001ee8

00008430 <smp_ident_addr_info>:

	return 0;
}

static u8_t smp_ident_addr_info(struct bt_smp *smp, struct net_buf *buf)
{
    8430:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    8432:	688e      	ldr	r6, [r1, #8]

	return 0;
}

static u8_t smp_ident_addr_info(struct bt_smp *smp, struct net_buf *buf)
{
    8434:	b087      	sub	sp, #28
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    8436:	7833      	ldrb	r3, [r6, #0]
    8438:	0005      	movs	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    843a:	6804      	ldr	r4, [r0, #0]
    843c:	2b00      	cmp	r3, #0
    843e:	d01a      	beq.n	8476 <smp_ident_addr_info+0x46>
	struct bt_smp_ident_addr_info *req = (void *)buf->data;

	BT_DBG("identity %s", bt_addr_le_str(&req->addr));

	if (!bt_addr_le_is_identity(&req->addr)) {
    8440:	223f      	movs	r2, #63	; 0x3f
    8442:	79b3      	ldrb	r3, [r6, #6]
    8444:	4393      	bics	r3, r2
    8446:	2bc0      	cmp	r3, #192	; 0xc0
    8448:	d015      	beq.n	8476 <smp_ident_addr_info+0x46>
		BT_ERR("Invalid identity %s for %s",
    844a:	0030      	movs	r0, r6
    844c:	f7f9 fdda 	bl	2004 <bt_addr_le_str>
    8450:	0005      	movs	r5, r0
    8452:	0020      	movs	r0, r4
    8454:	3054      	adds	r0, #84	; 0x54
    8456:	f7f9 fdd5 	bl	2004 <bt_addr_le_str>
    845a:	4b3a      	ldr	r3, [pc, #232]	; (8544 <smp_ident_addr_info+0x114>)
    845c:	9002      	str	r0, [sp, #8]
    845e:	9303      	str	r3, [sp, #12]
    8460:	4b39      	ldr	r3, [pc, #228]	; (8548 <smp_ident_addr_info+0x118>)
    8462:	9501      	str	r5, [sp, #4]
    8464:	9300      	str	r3, [sp, #0]
    8466:	4a39      	ldr	r2, [pc, #228]	; (854c <smp_ident_addr_info+0x11c>)
    8468:	4b39      	ldr	r3, [pc, #228]	; (8550 <smp_ident_addr_info+0x120>)
    846a:	493a      	ldr	r1, [pc, #232]	; (8554 <smp_ident_addr_info+0x124>)
    846c:	483a      	ldr	r0, [pc, #232]	; (8558 <smp_ident_addr_info+0x128>)
    846e:	f7f9 f97b 	bl	1768 <printk>
		       bt_addr_le_str(&req->addr), bt_addr_le_str(&conn->le.dst));
		return BT_SMP_ERR_INVALID_PARAMS;
    8472:	240a      	movs	r4, #10
    8474:	e062      	b.n	853c <smp_ident_addr_info+0x10c>
	}

	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    8476:	0028      	movs	r0, r5
    8478:	210a      	movs	r1, #10
    847a:	3094      	adds	r0, #148	; 0x94
    847c:	f7f9 fecb 	bl	2216 <atomic_test_bit>
    8480:	2800      	cmp	r0, #0
    8482:	d043      	beq.n	850c <smp_ident_addr_info+0xdc>
		const bt_addr_le_t *dst;
		struct bt_keys *keys;

		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    8484:	0023      	movs	r3, r4
    8486:	3354      	adds	r3, #84	; 0x54
    8488:	0019      	movs	r1, r3
    848a:	2002      	movs	r0, #2
    848c:	9305      	str	r3, [sp, #20]
    848e:	f000 f9cb 	bl	8828 <bt_keys_get_type>
    8492:	1e07      	subs	r7, r0, #0
		if (!keys) {
    8494:	d10f      	bne.n	84b6 <smp_ident_addr_info+0x86>
			BT_ERR("Unable to get keys for %s",
    8496:	9805      	ldr	r0, [sp, #20]
    8498:	f7f9 fdb4 	bl	2004 <bt_addr_le_str>
    849c:	4b29      	ldr	r3, [pc, #164]	; (8544 <smp_ident_addr_info+0x114>)
    849e:	9001      	str	r0, [sp, #4]
    84a0:	9302      	str	r3, [sp, #8]
    84a2:	4b29      	ldr	r3, [pc, #164]	; (8548 <smp_ident_addr_info+0x118>)
    84a4:	4a29      	ldr	r2, [pc, #164]	; (854c <smp_ident_addr_info+0x11c>)
    84a6:	9300      	str	r3, [sp, #0]
    84a8:	492a      	ldr	r1, [pc, #168]	; (8554 <smp_ident_addr_info+0x124>)
    84aa:	4b29      	ldr	r3, [pc, #164]	; (8550 <smp_ident_addr_info+0x120>)
    84ac:	482b      	ldr	r0, [pc, #172]	; (855c <smp_ident_addr_info+0x12c>)
    84ae:	f7f9 f95b 	bl	1768 <printk>
			       bt_addr_le_str(&conn->le.dst));
			return BT_SMP_ERR_UNSPECIFIED;
    84b2:	2408      	movs	r4, #8
    84b4:	e042      	b.n	853c <smp_ident_addr_info+0x10c>
		 * in new pairing.
		 */
		if (conn->role == BT_HCI_ROLE_MASTER) {
			dst = &conn->le.resp_addr;
		} else {
			dst = &conn->le.init_addr;
    84b6:	0021      	movs	r1, r4
		 * We can't use conn->dst here as this might already contain
		 * identity address known from previous pairing. Since all keys
		 * are cleared on re-pairing we wouldn't store IRK distributed
		 * in new pairing.
		 */
		if (conn->role == BT_HCI_ROLE_MASTER) {
    84b8:	78e3      	ldrb	r3, [r4, #3]
			dst = &conn->le.resp_addr;
		} else {
			dst = &conn->le.init_addr;
    84ba:	315b      	adds	r1, #91	; 0x5b
		 * We can't use conn->dst here as this might already contain
		 * identity address known from previous pairing. Since all keys
		 * are cleared on re-pairing we wouldn't store IRK distributed
		 * in new pairing.
		 */
		if (conn->role == BT_HCI_ROLE_MASTER) {
    84bc:	2b00      	cmp	r3, #0
    84be:	d100      	bne.n	84c2 <smp_ident_addr_info+0x92>
			dst = &conn->le.resp_addr;
    84c0:	3107      	adds	r1, #7
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
    84c2:	780b      	ldrb	r3, [r1, #0]
    84c4:	2b01      	cmp	r3, #1
    84c6:	d121      	bne.n	850c <smp_ident_addr_info+0xdc>
		} else {
			dst = &conn->le.init_addr;
		}

		if (bt_addr_le_is_rpa(dst)) {
    84c8:	223f      	movs	r2, #63	; 0x3f
    84ca:	798b      	ldrb	r3, [r1, #6]
    84cc:	4393      	bics	r3, r2
    84ce:	2b40      	cmp	r3, #64	; 0x40
    84d0:	d11c      	bne.n	850c <smp_ident_addr_info+0xdc>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    84d2:	0038      	movs	r0, r7
    84d4:	3a39      	subs	r2, #57	; 0x39
			/* always update last use RPA */
			bt_addr_copy(&keys->irk.rpa, &dst->a);
    84d6:	3101      	adds	r1, #1
    84d8:	3040      	adds	r0, #64	; 0x40
    84da:	f7f8 ff43 	bl	1364 <memcpy>
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    84de:	0023      	movs	r3, r4
    84e0:	3354      	adds	r3, #84	; 0x54
    84e2:	781a      	ldrb	r2, [r3, #0]
    84e4:	2a00      	cmp	r2, #0
    84e6:	d011      	beq.n	850c <smp_ident_addr_info+0xdc>
			 * Update connection address and notify about identity
			 * resolved only if connection wasn't already reported
			 * with identity address. This may happen if IRK was
			 * present before ie. due to re-pairing.
			 */
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    84e8:	223f      	movs	r2, #63	; 0x3f
    84ea:	799b      	ldrb	r3, [r3, #6]
    84ec:	4393      	bics	r3, r2
    84ee:	2bc0      	cmp	r3, #192	; 0xc0
    84f0:	d00c      	beq.n	850c <smp_ident_addr_info+0xdc>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    84f2:	3a38      	subs	r2, #56	; 0x38
    84f4:	0031      	movs	r1, r6
    84f6:	0038      	movs	r0, r7
    84f8:	f7f8 ff34 	bl	1364 <memcpy>
    84fc:	2207      	movs	r2, #7
    84fe:	0031      	movs	r1, r6
    8500:	9805      	ldr	r0, [sp, #20]
    8502:	f7f8 ff2f 	bl	1364 <memcpy>
				bt_addr_le_copy(&keys->addr, &req->addr);
				bt_addr_le_copy(&conn->le.dst, &req->addr);

				bt_conn_identity_resolved(conn);
    8506:	0020      	movs	r0, r4
    8508:	f7fb ff22 	bl	4350 <bt_conn_identity_resolved>
			}
		}
	}

	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    850c:	22b7      	movs	r2, #183	; 0xb7
    850e:	0052      	lsls	r2, r2, #1
    8510:	5cab      	ldrb	r3, [r5, r2]
    8512:	2102      	movs	r1, #2
    8514:	0018      	movs	r0, r3
    8516:	4388      	bics	r0, r1
    8518:	54a8      	strb	r0, [r5, r2]

	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    851a:	075b      	lsls	r3, r3, #29
    851c:	d504      	bpl.n	8528 <smp_ident_addr_info+0xf8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    851e:	0028      	movs	r0, r5
    8520:	210a      	movs	r1, #10
    8522:	3090      	adds	r0, #144	; 0x90
    8524:	f7fe fd10 	bl	6f48 <atomic_set_bit>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    8528:	002b      	movs	r3, r5
    852a:	33fc      	adds	r3, #252	; 0xfc
    852c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    852e:	4b0c      	ldr	r3, [pc, #48]	; (8560 <smp_ident_addr_info+0x130>)
		smp_pairing_complete(smp, 0);
	}

	return 0;
    8530:	2400      	movs	r4, #0
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
		bt_smp_distribute_keys(smp);
	}

	/* if all keys were distributed, pairing is done */
	if (!smp->local_dist && !smp->remote_dist) {
    8532:	421a      	tst	r2, r3
    8534:	d102      	bne.n	853c <smp_ident_addr_info+0x10c>
			sc_derive_link_key(smp);
		}
	}
#endif /* CONFIG_BLUETOOTH_BREDR */

	smp_reset(smp);
    8536:	0028      	movs	r0, r5
    8538:	f7fe fd41 	bl	6fbe <smp_reset>
	if (!smp->local_dist && !smp->remote_dist) {
		smp_pairing_complete(smp, 0);
	}

	return 0;
}
    853c:	0020      	movs	r0, r4
    853e:	b007      	add	sp, #28
    8540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8542:	46c0      	nop			; (mov r8, r8)
    8544:	000145b0 	.word	0x000145b0
    8548:	000145b5 	.word	0x000145b5
    854c:	00014570 	.word	0x00014570
    8550:	00016d40 	.word	0x00016d40
    8554:	00014577 	.word	0x00014577
    8558:	00015699 	.word	0x00015699
    855c:	0001542d 	.word	0x0001542d
    8560:	00ffff00 	.word	0x00ffff00

00008564 <bt_smp_send_security_req>:
	return CONTAINER_OF(chan, struct bt_smp, chan);
}

#if defined(CONFIG_BLUETOOTH_PERIPHERAL)
int bt_smp_send_security_req(struct bt_conn *conn)
{
    8564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8566:	0006      	movs	r6, r0
	struct bt_smp *smp;
	struct bt_smp_security_request *req;
	struct net_buf *req_buf;

	BT_DBG("");
	smp = smp_chan_get(conn);
    8568:	f7fe fed2 	bl	7310 <smp_chan_get>
    856c:	1e05      	subs	r5, r0, #0
	if (!smp) {
    856e:	d051      	beq.n	8614 <bt_smp_send_security_req+0xb0>
		return -ENOTCONN;
	}

	/* SMP Timeout */
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    8570:	0004      	movs	r4, r0
    8572:	3494      	adds	r4, #148	; 0x94
    8574:	2104      	movs	r1, #4
    8576:	0020      	movs	r0, r4
    8578:	f7f9 fe4d 	bl	2216 <atomic_test_bit>
    857c:	2800      	cmp	r0, #0
    857e:	d14b      	bne.n	8618 <bt_smp_send_security_req+0xb4>
		return -EIO;
	}

	/* pairing is in progress */
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    8580:	0020      	movs	r0, r4
    8582:	2103      	movs	r1, #3
    8584:	f7f9 fe47 	bl	2216 <atomic_test_bit>
    8588:	1e04      	subs	r4, r0, #0
    858a:	d147      	bne.n	861c <bt_smp_send_security_req+0xb8>
	return auth;
}

static bool sec_level_reachable(struct bt_conn *conn)
{
	switch (conn->required_sec_level) {
    858c:	7a70      	ldrb	r0, [r6, #9]
    858e:	3801      	subs	r0, #1
    8590:	2803      	cmp	r0, #3
    8592:	d845      	bhi.n	8620 <bt_smp_send_security_req+0xbc>
    8594:	f7f7 fdf0 	bl	178 <__gnu_thumb1_case_uqi>
    8598:	09021515 	.word	0x09021515
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    859c:	f7fe fc7e 	bl	6e9c <get_io_capa>
    85a0:	3803      	subs	r0, #3
    85a2:	1e43      	subs	r3, r0, #1
    85a4:	4198      	sbcs	r0, r3
    85a6:	b2c0      	uxtb	r0, r0
    85a8:	e009      	b.n	85be <bt_smp_send_security_req+0x5a>
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    85aa:	f7fe fc77 	bl	6e9c <get_io_capa>
    85ae:	2200      	movs	r2, #0
    85b0:	2803      	cmp	r0, #3
    85b2:	d001      	beq.n	85b8 <bt_smp_send_security_req+0x54>
    85b4:	4b1d      	ldr	r3, [pc, #116]	; (862c <bt_smp_send_security_req+0xc8>)
    85b6:	781a      	ldrb	r2, [r3, #0]
    85b8:	2301      	movs	r3, #1
    85ba:	401a      	ands	r2, r3
    85bc:	0010      	movs	r0, r2
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
		return -EBUSY;
	}

	/* early verify if required sec level if reachable */
	if (!sec_level_reachable(conn)) {
    85be:	2800      	cmp	r0, #0
    85c0:	d02e      	beq.n	8620 <bt_smp_send_security_req+0xbc>
		return -EINVAL;
	}

	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    85c2:	200b      	movs	r0, #11
    85c4:	f7fe fec2 	bl	734c <smp_create_pdu.isra.2>
    85c8:	1e07      	subs	r7, r0, #0
				 sizeof(*req));
	if (!req_buf) {
    85ca:	d02b      	beq.n	8624 <bt_smp_send_security_req+0xc0>
		return -ENOBUFS;
	}

	req = net_buf_add(req_buf, sizeof(*req));
    85cc:	2101      	movs	r1, #1
    85ce:	3008      	adds	r0, #8
    85d0:	f00a f898 	bl	12704 <net_buf_simple_add>
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
		auth &= BT_SMP_AUTH_MASK_SC;
    85d4:	2209      	movs	r2, #9
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    85d6:	4b15      	ldr	r3, [pc, #84]	; (862c <bt_smp_send_security_req+0xc8>)
				 sizeof(*req));
	if (!req_buf) {
		return -ENOBUFS;
	}

	req = net_buf_add(req_buf, sizeof(*req));
    85d8:	9001      	str	r0, [sp, #4]
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    85da:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK_SC;
    85dc:	9200      	str	r2, [sp, #0]
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    85de:	2b00      	cmp	r3, #0
    85e0:	d101      	bne.n	85e6 <bt_smp_send_security_req+0x82>
		auth &= BT_SMP_AUTH_MASK_SC;
	} else {
		auth &= BT_SMP_AUTH_MASK;
    85e2:	3301      	adds	r3, #1
    85e4:	9300      	str	r3, [sp, #0]
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    85e6:	f7fe fc59 	bl	6e9c <get_io_capa>
    85ea:	2204      	movs	r2, #4
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    85ec:	9b00      	ldr	r3, [sp, #0]
    85ee:	4313      	orrs	r3, r2
		auth &= BT_SMP_AUTH_MASK_SC;
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    85f0:	2803      	cmp	r0, #3
    85f2:	d101      	bne.n	85f8 <bt_smp_send_security_req+0x94>
		auth &= ~(BT_SMP_AUTH_MITM);
    85f4:	9b00      	ldr	r3, [sp, #0]
    85f6:	4393      	bics	r3, r2
	if (!req_buf) {
		return -ENOBUFS;
	}

	req = net_buf_add(req_buf, sizeof(*req));
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    85f8:	9a01      	ldr	r2, [sp, #4]
    85fa:	0030      	movs	r0, r6
    85fc:	7013      	strb	r3, [r2, #0]
    85fe:	2106      	movs	r1, #6
    8600:	2300      	movs	r3, #0
    8602:	003a      	movs	r2, r7
    8604:	f7fc fcd0 	bl	4fa8 <bt_l2cap_send_cb>

	/* SMP timer is not restarted for SecRequest so don't use smp_send */
	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, req_buf);

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    8608:	0028      	movs	r0, r5
    860a:	2105      	movs	r1, #5
    860c:	3090      	adds	r0, #144	; 0x90
    860e:	f7fe fc9b 	bl	6f48 <atomic_set_bit>

	return 0;
    8612:	e009      	b.n	8628 <bt_smp_send_security_req+0xc4>
	struct net_buf *req_buf;

	BT_DBG("");
	smp = smp_chan_get(conn);
	if (!smp) {
		return -ENOTCONN;
    8614:	2439      	movs	r4, #57	; 0x39
    8616:	e006      	b.n	8626 <bt_smp_send_security_req+0xc2>
	}

	/* SMP Timeout */
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
		return -EIO;
    8618:	2405      	movs	r4, #5
    861a:	e004      	b.n	8626 <bt_smp_send_security_req+0xc2>
	}

	/* pairing is in progress */
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
		return -EBUSY;
    861c:	2410      	movs	r4, #16
    861e:	e002      	b.n	8626 <bt_smp_send_security_req+0xc2>
	}

	/* early verify if required sec level if reachable */
	if (!sec_level_reachable(conn)) {
		return -EINVAL;
    8620:	2416      	movs	r4, #22
    8622:	e000      	b.n	8626 <bt_smp_send_security_req+0xc2>
	}

	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
				 sizeof(*req));
	if (!req_buf) {
		return -ENOBUFS;
    8624:	2437      	movs	r4, #55	; 0x37
    8626:	4264      	negs	r4, r4
	bt_l2cap_send(conn, BT_L2CAP_CID_SMP, req_buf);

	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);

	return 0;
}
    8628:	0020      	movs	r0, r4
    862a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    862c:	20000d70 	.word	0x20000d70

00008630 <bt_smp_sign_verify>:
    8630:	2023      	movs	r0, #35	; 0x23
    8632:	4240      	negs	r0, r0
    8634:	4770      	bx	lr
	...

00008638 <bt_smp_update_keys>:
	return -EINVAL;
}
#endif /* !CONFIG_BLUETOOTH_SMP_SC_ONLY */

void bt_smp_update_keys(struct bt_conn *conn)
{
    8638:	b5f0      	push	{r4, r5, r6, r7, lr}
    863a:	b085      	sub	sp, #20
    863c:	0004      	movs	r4, r0
	struct bt_smp *smp;

	smp = smp_chan_get(conn);
    863e:	f7fe fe67 	bl	7310 <smp_chan_get>
    8642:	1e05      	subs	r5, r0, #0
	if (!smp) {
    8644:	d067      	beq.n	8716 <bt_smp_update_keys+0xde>
		return;
	}

	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    8646:	0006      	movs	r6, r0
    8648:	3694      	adds	r6, #148	; 0x94
    864a:	2103      	movs	r1, #3
    864c:	0030      	movs	r0, r6
    864e:	f7f9 fde2 	bl	2216 <atomic_test_bit>
    8652:	2800      	cmp	r0, #0
    8654:	d05f      	beq.n	8716 <bt_smp_update_keys+0xde>

	/*
	 * If link was successfully encrypted cleanup old keys as from now on
	 * only keys distributed in this pairing or LTK from LE SC will be used.
	 */
	if (conn->le.keys) {
    8656:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    8658:	2800      	cmp	r0, #0
    865a:	d001      	beq.n	8660 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    865c:	f000 f93c 	bl	88d8 <bt_keys_clear>
	}

	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    8660:	0027      	movs	r7, r4
    8662:	3754      	adds	r7, #84	; 0x54
    8664:	0038      	movs	r0, r7
    8666:	f000 f8ab 	bl	87c0 <bt_keys_get_addr>
    866a:	67e0      	str	r0, [r4, #124]	; 0x7c
	if (!conn->le.keys) {
    866c:	2800      	cmp	r0, #0
    866e:	d10e      	bne.n	868e <bt_smp_update_keys+0x56>
		BT_ERR("Unable to get keys for %s",
    8670:	0038      	movs	r0, r7
    8672:	f7f9 fcc7 	bl	2004 <bt_addr_le_str>
    8676:	4b29      	ldr	r3, [pc, #164]	; (871c <bt_smp_update_keys+0xe4>)
    8678:	9001      	str	r0, [sp, #4]
    867a:	9302      	str	r3, [sp, #8]
    867c:	4b28      	ldr	r3, [pc, #160]	; (8720 <bt_smp_update_keys+0xe8>)
    867e:	4a29      	ldr	r2, [pc, #164]	; (8724 <bt_smp_update_keys+0xec>)
    8680:	9300      	str	r3, [sp, #0]
    8682:	4929      	ldr	r1, [pc, #164]	; (8728 <bt_smp_update_keys+0xf0>)
    8684:	4b29      	ldr	r3, [pc, #164]	; (872c <bt_smp_update_keys+0xf4>)
    8686:	482a      	ldr	r0, [pc, #168]	; (8730 <bt_smp_update_keys+0xf8>)
    8688:	f7f9 f86e 	bl	1768 <printk>
		       bt_addr_le_str(&conn->le.dst));
		return;
    868c:	e043      	b.n	8716 <bt_smp_update_keys+0xde>
	}

	/* mark keys as debug */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    868e:	210b      	movs	r1, #11
    8690:	0030      	movs	r0, r6
    8692:	f7f9 fdc0 	bl	2216 <atomic_test_bit>
    8696:	2800      	cmp	r0, #0
    8698:	d004      	beq.n	86a4 <bt_smp_update_keys+0x6c>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    869a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    869c:	2101      	movs	r1, #1
    869e:	3008      	adds	r0, #8
    86a0:	f7fe fc52 	bl	6f48 <atomic_set_bit>
	/*
	 * store key type deducted from pairing method used
	 * it is important to store it since type is used to determine
	 * security level upon encryption
	 */
	switch (smp->method) {
    86a4:	002b      	movs	r3, r5
    86a6:	3398      	adds	r3, #152	; 0x98
    86a8:	781b      	ldrb	r3, [r3, #0]
    86aa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    86ac:	3b01      	subs	r3, #1
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
		break;
	case JUST_WORKS:
	default:
		/* unauthenticated key, clear it */
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    86ae:	3008      	adds	r0, #8
	/*
	 * store key type deducted from pairing method used
	 * it is important to store it since type is used to determine
	 * security level upon encryption
	 */
	switch (smp->method) {
    86b0:	2b02      	cmp	r3, #2
    86b2:	d803      	bhi.n	86bc <bt_smp_update_keys+0x84>
	case PASSKEY_DISPLAY:
	case PASSKEY_INPUT:
	case PASSKEY_CONFIRM:
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    86b4:	2100      	movs	r1, #0
    86b6:	f7fe fc47 	bl	6f48 <atomic_set_bit>
		break;
    86ba:	e003      	b.n	86c4 <bt_smp_update_keys+0x8c>
    86bc:	2102      	movs	r1, #2
    86be:	4249      	negs	r1, r1
    86c0:	f00a fafc 	bl	12cbc <atomic_and>
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    86c4:	002b      	movs	r3, r5
    86c6:	339a      	adds	r3, #154	; 0x9a
		/* unauthenticated key, clear it */
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
		break;
	}

	conn->le.keys->enc_size = get_encryption_key_size(smp);
    86c8:	78da      	ldrb	r2, [r3, #3]
    86ca:	7a99      	ldrb	r1, [r3, #10]
    86cc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    86ce:	1c0b      	adds	r3, r1, #0
    86d0:	4291      	cmp	r1, r2
    86d2:	d900      	bls.n	86d6 <bt_smp_update_keys+0x9e>
    86d4:	1c13      	adds	r3, r2, #0
    86d6:	71c3      	strb	r3, [r0, #7]
	/*
	 * Store LTK if LE SC is used, this is safe since LE SC is mutually
	 * exclusive with legacy pairing. Other keys are added on keys
	 * distribution.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    86d8:	2105      	movs	r1, #5
    86da:	0030      	movs	r0, r6
    86dc:	f7f9 fd9b 	bl	2216 <atomic_test_bit>
    86e0:	2800      	cmp	r0, #0
    86e2:	d018      	beq.n	8716 <bt_smp_update_keys+0xde>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    86e4:	210a      	movs	r1, #10
    86e6:	0030      	movs	r0, r6
    86e8:	f7f9 fd95 	bl	2216 <atomic_test_bit>
	/*
	 * Store LTK if LE SC is used, this is safe since LE SC is mutually
	 * exclusive with legacy pairing. Other keys are added on keys
	 * distribution.
	 */
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    86ec:	2800      	cmp	r0, #0
    86ee:	d012      	beq.n	8716 <bt_smp_update_keys+0xde>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    86f0:	2120      	movs	r1, #32
    86f2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    86f4:	f000 f8ec 	bl	88d0 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    86f8:	0029      	movs	r1, r5
    86fa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    86fc:	31d7      	adds	r1, #215	; 0xd7
    86fe:	2210      	movs	r2, #16
    8700:	301a      	adds	r0, #26
    8702:	f7f8 fe2f 	bl	1364 <memcpy>
		       sizeof(conn->le.keys->ltk.val));
		conn->le.keys->ltk.rand = 0;
    8706:	2000      	movs	r0, #0
    8708:	2100      	movs	r1, #0
		conn->le.keys->ltk.ediv = 0;
    870a:	2200      	movs	r2, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
		memcpy(conn->le.keys->ltk.val, smp->tk,
		       sizeof(conn->le.keys->ltk.val));
		conn->le.keys->ltk.rand = 0;
    870c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    870e:	6118      	str	r0, [r3, #16]
    8710:	6159      	str	r1, [r3, #20]
		conn->le.keys->ltk.ediv = 0;
    8712:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    8714:	831a      	strh	r2, [r3, #24]
	}
}
    8716:	b005      	add	sp, #20
    8718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    871a:	46c0      	nop			; (mov r8, r8)
    871c:	000145b0 	.word	0x000145b0
    8720:	000145b5 	.word	0x000145b5
    8724:	00014570 	.word	0x00014570
    8728:	00014577 	.word	0x00014577
    872c:	00016c77 	.word	0x00016c77
    8730:	0001542d 	.word	0x0001542d

00008734 <bt_smp_get_tk>:

bool bt_smp_get_tk(struct bt_conn *conn, u8_t *tk)
{
    8734:	b570      	push	{r4, r5, r6, lr}
    8736:	000e      	movs	r6, r1
	struct bt_smp *smp;
	u8_t enc_size;

	smp = smp_chan_get(conn);
    8738:	f7fe fdea 	bl	7310 <smp_chan_get>
    873c:	1e05      	subs	r5, r0, #0
	if (!smp) {
    873e:	d101      	bne.n	8744 <bt_smp_get_tk+0x10>
		return false;
    8740:	2500      	movs	r5, #0
    8742:	e01e      	b.n	8782 <bt_smp_get_tk+0x4e>
	}

	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    8744:	2103      	movs	r1, #3
    8746:	3094      	adds	r0, #148	; 0x94
    8748:	f7f9 fd65 	bl	2216 <atomic_test_bit>
    874c:	2800      	cmp	r0, #0
    874e:	d0f7      	beq.n	8740 <bt_smp_get_tk+0xc>
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    8750:	002b      	movs	r3, r5
    8752:	339a      	adds	r3, #154	; 0x9a
    8754:	78da      	ldrb	r2, [r3, #3]
    8756:	3307      	adds	r3, #7
    8758:	78db      	ldrb	r3, [r3, #3]
    875a:	1c1c      	adds	r4, r3, #0
    875c:	4293      	cmp	r3, r2
    875e:	d900      	bls.n	8762 <bt_smp_get_tk+0x2e>
    8760:	1c14      	adds	r4, r2, #0

	/*
	 * We keep both legacy STK and LE SC LTK in TK.
	 * Also use only enc_size bytes of key for encryption.
	 */
	memcpy(tk, smp->tk, enc_size);
    8762:	0029      	movs	r1, r5
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    8764:	b2e4      	uxtb	r4, r4

	/*
	 * We keep both legacy STK and LE SC LTK in TK.
	 * Also use only enc_size bytes of key for encryption.
	 */
	memcpy(tk, smp->tk, enc_size);
    8766:	31d7      	adds	r1, #215	; 0xd7
    8768:	0022      	movs	r2, r4
    876a:	0030      	movs	r0, r6
    876c:	f7f8 fdfa 	bl	1364 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
	}

	return true;
    8770:	2501      	movs	r5, #1
	/*
	 * We keep both legacy STK and LE SC LTK in TK.
	 * Also use only enc_size bytes of key for encryption.
	 */
	memcpy(tk, smp->tk, enc_size);
	if (enc_size < sizeof(smp->tk)) {
    8772:	2c0f      	cmp	r4, #15
    8774:	d805      	bhi.n	8782 <bt_smp_get_tk+0x4e>
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    8776:	2210      	movs	r2, #16
    8778:	1930      	adds	r0, r6, r4
    877a:	1b12      	subs	r2, r2, r4
    877c:	2100      	movs	r1, #0
    877e:	f7f8 fe1b 	bl	13b8 <memset>
	}

	return true;
}
    8782:	0028      	movs	r0, r5
    8784:	bd70      	pop	{r4, r5, r6, pc}
	...

00008788 <bt_smp_init>:
	return (bt_dev.supported_commands[34] & 0x02) &&
	       (bt_dev.supported_commands[34] & 0x04);
}

int bt_smp_init(void)
{
    8788:	b510      	push	{r4, lr}
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    878a:	4b09      	ldr	r3, [pc, #36]	; (87b0 <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    878c:	4809      	ldr	r0, [pc, #36]	; (87b4 <bt_smp_init+0x2c>)
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    878e:	3340      	adds	r3, #64	; 0x40
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    8790:	781a      	ldrb	r2, [r3, #0]
    8792:	2306      	movs	r3, #6
    8794:	4013      	ands	r3, r2
    8796:	3b06      	subs	r3, #6
    8798:	425a      	negs	r2, r3
    879a:	4153      	adcs	r3, r2
    879c:	4a06      	ldr	r2, [pc, #24]	; (87b8 <bt_smp_init+0x30>)
    879e:	7013      	strb	r3, [r2, #0]
	if (IS_ENABLED(CONFIG_BLUETOOTH_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    87a0:	f7fc fb28 	bl	4df4 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    87a4:	4805      	ldr	r0, [pc, #20]	; (87bc <bt_smp_init+0x34>)
    87a6:	f7fb fcb7 	bl	4118 <bt_pub_key_gen>

	return smp_self_test();
}
    87aa:	2000      	movs	r0, #0
    87ac:	bd10      	pop	{r4, pc}
    87ae:	46c0      	nop			; (mov r8, r8)
    87b0:	200002b0 	.word	0x200002b0
    87b4:	2000052c 	.word	0x2000052c
    87b8:	20000d70 	.word	0x20000d70
    87bc:	20000524 	.word	0x20000524

000087c0 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BLUETOOTH_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    87c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    87c2:	4c0f      	ldr	r4, [pc, #60]	; (8800 <bt_keys_get_addr+0x40>)
    87c4:	0001      	movs	r1, r0
    87c6:	0005      	movs	r5, r0
    87c8:	2207      	movs	r2, #7
    87ca:	0020      	movs	r0, r4
    87cc:	f7f8 fda2 	bl	1314 <memcmp>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];
    87d0:	0023      	movs	r3, r4

		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    87d2:	2800      	cmp	r0, #0
    87d4:	d012      	beq.n	87fc <bt_keys_get_addr+0x3c>
			return keys;
		}

		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    87d6:	2207      	movs	r2, #7
    87d8:	2100      	movs	r1, #0
    87da:	4668      	mov	r0, sp
    87dc:	f7f8 fdec 	bl	13b8 <memset>
    87e0:	2207      	movs	r2, #7
    87e2:	4669      	mov	r1, sp
    87e4:	0020      	movs	r0, r4
    87e6:	f7f8 fd95 	bl	1314 <memcmp>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    87ea:	2300      	movs	r3, #0

		if (!bt_addr_le_cmp(&keys->addr, addr)) {
			return keys;
		}

		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    87ec:	4298      	cmp	r0, r3
    87ee:	d105      	bne.n	87fc <bt_keys_get_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    87f0:	2207      	movs	r2, #7
    87f2:	0029      	movs	r1, r5
    87f4:	0020      	movs	r0, r4
    87f6:	f7f8 fdb5 	bl	1364 <memcpy>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];
    87fa:	0023      	movs	r3, r4
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
    87fc:	0018      	movs	r0, r3
    87fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    8800:	20000f50 	.word	0x20000f50

00008804 <bt_keys_find>:
struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    8804:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) &&
    8806:	4c07      	ldr	r4, [pc, #28]	; (8824 <bt_keys_find+0x20>)
    8808:	89a3      	ldrh	r3, [r4, #12]
    880a:	4218      	tst	r0, r3
    880c:	d101      	bne.n	8812 <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    880e:	2000      	movs	r0, #0
    8810:	e006      	b.n	8820 <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    8812:	2207      	movs	r2, #7
    8814:	0020      	movs	r0, r4
    8816:	f7f8 fd7d 	bl	1314 <memcmp>
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) &&
    881a:	2800      	cmp	r0, #0
    881c:	d1f7      	bne.n	880e <bt_keys_find+0xa>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
    881e:	0020      	movs	r0, r4
		}
	}

	return NULL;
}
    8820:	bd10      	pop	{r4, pc}
    8822:	46c0      	nop			; (mov r8, r8)
    8824:	20000f50 	.word	0x20000f50

00008828 <bt_keys_get_type>:

struct bt_keys *bt_keys_get_type(int type, const bt_addr_le_t *addr)
{
    8828:	b570      	push	{r4, r5, r6, lr}
    882a:	0004      	movs	r4, r0
    882c:	000e      	movs	r6, r1
	struct bt_keys *keys;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	keys = bt_keys_find(type, addr);
    882e:	f7ff ffe9 	bl	8804 <bt_keys_find>
    8832:	1e05      	subs	r5, r0, #0
	if (keys) {
    8834:	d108      	bne.n	8848 <bt_keys_get_type+0x20>
		return keys;
	}

	keys = bt_keys_get_addr(addr);
    8836:	0030      	movs	r0, r6
    8838:	f7ff ffc2 	bl	87c0 <bt_keys_get_addr>
	if (!keys) {
    883c:	2800      	cmp	r0, #0
    883e:	d003      	beq.n	8848 <bt_keys_get_type+0x20>
		return NULL;
	}

	bt_keys_add_type(keys, type);

	return keys;
    8840:	0005      	movs	r5, r0
	return NULL;
}

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    8842:	8983      	ldrh	r3, [r0, #12]
    8844:	431c      	orrs	r4, r3
    8846:	8184      	strh	r4, [r0, #12]
	}

	bt_keys_add_type(keys, type);

	return keys;
}
    8848:	0028      	movs	r0, r5
    884a:	bd70      	pop	{r4, r5, r6, pc}

0000884c <bt_keys_find_irk>:

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    884c:	b570      	push	{r4, r5, r6, lr}
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
    884e:	7803      	ldrb	r3, [r0, #0]
    8850:	0005      	movs	r5, r0
    8852:	2b01      	cmp	r3, #1
    8854:	d001      	beq.n	885a <bt_keys_find_irk+0xe>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    8856:	2400      	movs	r4, #0
    8858:	e025      	b.n	88a6 <bt_keys_find_irk+0x5a>
{
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    885a:	223f      	movs	r2, #63	; 0x3f
    885c:	7983      	ldrb	r3, [r0, #6]
    885e:	4393      	bics	r3, r2
    8860:	2b40      	cmp	r3, #64	; 0x40
    8862:	d1f8      	bne.n	8856 <bt_keys_find_irk+0xa>
		return NULL;
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    8864:	4c11      	ldr	r4, [pc, #68]	; (88ac <bt_keys_find_irk+0x60>)
    8866:	89a3      	ldrh	r3, [r4, #12]
    8868:	0026      	movs	r6, r4
    886a:	079b      	lsls	r3, r3, #30
    886c:	d403      	bmi.n	8876 <bt_keys_find_irk+0x2a>
			return &key_pool[i];
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    886e:	89b3      	ldrh	r3, [r6, #12]
    8870:	079b      	lsls	r3, r3, #30
    8872:	d5f0      	bpl.n	8856 <bt_keys_find_irk+0xa>
    8874:	e008      	b.n	8888 <bt_keys_find_irk+0x3c>
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    8876:	0021      	movs	r1, r4
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    8878:	3001      	adds	r0, #1
    887a:	3140      	adds	r1, #64	; 0x40
    887c:	2206      	movs	r2, #6
    887e:	f7f8 fd49 	bl	1314 <memcmp>
    8882:	2800      	cmp	r0, #0
    8884:	d1f3      	bne.n	886e <bt_keys_find_irk+0x22>
    8886:	e00e      	b.n	88a6 <bt_keys_find_irk+0x5a>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    8888:	0030      	movs	r0, r6
    888a:	3501      	adds	r5, #1
    888c:	3030      	adds	r0, #48	; 0x30
    888e:	0029      	movs	r1, r5
    8890:	f7f9 fc15 	bl	20be <bt_rpa_irk_matches>
    8894:	2800      	cmp	r0, #0
    8896:	d0de      	beq.n	8856 <bt_keys_find_irk+0xa>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    8898:	0030      	movs	r0, r6
    889a:	2206      	movs	r2, #6
    889c:	3040      	adds	r0, #64	; 0x40
    889e:	0029      	movs	r1, r5
    88a0:	f7f8 fd60 	bl	1364 <memcpy>
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);

			return &key_pool[i];
    88a4:	0034      	movs	r4, r6
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    88a6:	0020      	movs	r0, r4
    88a8:	bd70      	pop	{r4, r5, r6, pc}
    88aa:	46c0      	nop			; (mov r8, r8)
    88ac:	20000f50 	.word	0x20000f50

000088b0 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    88b0:	b510      	push	{r4, lr}
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    88b2:	4c06      	ldr	r4, [pc, #24]	; (88cc <bt_keys_find_addr+0x1c>)
    88b4:	0001      	movs	r1, r0
    88b6:	2207      	movs	r2, #7
    88b8:	0020      	movs	r0, r4
    88ba:	f7f8 fd2b 	bl	1314 <memcmp>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    88be:	4242      	negs	r2, r0
    88c0:	4150      	adcs	r0, r2

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
    88c2:	0023      	movs	r3, r4
		}
	}

	return NULL;
    88c4:	4240      	negs	r0, r0
    88c6:	4003      	ands	r3, r0
}
    88c8:	0018      	movs	r0, r3
    88ca:	bd10      	pop	{r4, pc}
    88cc:	20000f50 	.word	0x20000f50

000088d0 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    88d0:	8983      	ldrh	r3, [r0, #12]
    88d2:	4319      	orrs	r1, r3
    88d4:	8181      	strh	r1, [r0, #12]
}
    88d6:	4770      	bx	lr

000088d8 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
    88d8:	b510      	push	{r4, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    88da:	2268      	movs	r2, #104	; 0x68
    88dc:	2100      	movs	r1, #0
    88de:	f7f8 fd6b 	bl	13b8 <memset>
}
    88e2:	bd10      	pop	{r4, pc}

000088e4 <evt_create>:

static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    88e4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    88e6:	3008      	adds	r0, #8

static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    88e8:	000d      	movs	r5, r1
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    88ea:	2102      	movs	r1, #2

static u64_t event_mask = DEFAULT_EVENT_MASK;
static u64_t le_event_mask = DEFAULT_LE_EVENT_MASK;

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    88ec:	0014      	movs	r4, r2
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    88ee:	f009 ff09 	bl	12704 <net_buf_simple_add>
	hdr->evt = evt;
    88f2:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    88f4:	7044      	strb	r4, [r0, #1]
}
    88f6:	bd70      	pop	{r4, r5, r6, pc}

000088f8 <cmd_status>:

	return net_buf_add(*buf, plen);
}

static struct net_buf *cmd_status(u8_t status)
{
    88f8:	b570      	push	{r4, r5, r6, lr}
    88fa:	0005      	movs	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    88fc:	2001      	movs	r0, #1
    88fe:	4240      	negs	r0, r0
    8900:	f7fb fbe8 	bl	40d4 <bt_buf_get_cmd_complete>
    8904:	0004      	movs	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    8906:	2204      	movs	r2, #4
    8908:	210f      	movs	r1, #15
    890a:	f7ff ffeb 	bl	88e4 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    890e:	0020      	movs	r0, r4
    8910:	2104      	movs	r1, #4
    8912:	3008      	adds	r0, #8
    8914:	f009 fef6 	bl	12704 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    8918:	2301      	movs	r3, #1
    891a:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    891c:	4b03      	ldr	r3, [pc, #12]	; (892c <cmd_status+0x34>)

	buf = bt_buf_get_cmd_complete(K_FOREVER);
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
    891e:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
	cs->opcode = sys_cpu_to_le16(_opcode);
    8920:	781a      	ldrb	r2, [r3, #0]
    8922:	785b      	ldrb	r3, [r3, #1]
    8924:	7082      	strb	r2, [r0, #2]
    8926:	70c3      	strb	r3, [r0, #3]

	return buf;
}
    8928:	0020      	movs	r0, r4
    892a:	bd70      	pop	{r4, r5, r6, pc}
    892c:	20000fb8 	.word	0x20000fb8

00008930 <cmd_complete>:
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    8930:	b570      	push	{r4, r5, r6, lr}
    8932:	0004      	movs	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8934:	2001      	movs	r0, #1
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    8936:	000d      	movs	r5, r1
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8938:	4240      	negs	r0, r0
    893a:	f7fb fbcb 	bl	40d4 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    893e:	1cea      	adds	r2, r5, #3

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8940:	6020      	str	r0, [r4, #0]

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8942:	b2d2      	uxtb	r2, r2
    8944:	210e      	movs	r1, #14
    8946:	f7ff ffcd 	bl	88e4 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    894a:	6820      	ldr	r0, [r4, #0]
    894c:	2103      	movs	r1, #3
    894e:	3008      	adds	r0, #8
    8950:	f009 fed8 	bl	12704 <net_buf_simple_add>
	cc->ncmd = 1;
    8954:	2301      	movs	r3, #1
    8956:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    8958:	4b05      	ldr	r3, [pc, #20]	; (8970 <cmd_complete+0x40>)

	return net_buf_add(*buf, plen);
    895a:	0029      	movs	r1, r5

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);

	cc = net_buf_add(*buf, sizeof(*cc));
	cc->ncmd = 1;
	cc->opcode = sys_cpu_to_le16(_opcode);
    895c:	781a      	ldrb	r2, [r3, #0]
    895e:	785b      	ldrb	r3, [r3, #1]
    8960:	7042      	strb	r2, [r0, #1]
    8962:	7083      	strb	r3, [r0, #2]

	return net_buf_add(*buf, plen);
    8964:	6820      	ldr	r0, [r4, #0]
    8966:	3008      	adds	r0, #8
    8968:	f009 fecc 	bl	12704 <net_buf_simple_add>
}
    896c:	bd70      	pop	{r4, r5, r6, pc}
    896e:	46c0      	nop			; (mov r8, r8)
    8970:	20000fb8 	.word	0x20000fb8

00008974 <meta_evt>:

	return buf;
}

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    8974:	b570      	push	{r4, r5, r6, lr}
    8976:	0004      	movs	r4, r0
    8978:	0015      	movs	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    897a:	3201      	adds	r2, #1

	return buf;
}

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    897c:	000e      	movs	r6, r1
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    897e:	b2d2      	uxtb	r2, r2
	me = net_buf_add(buf, sizeof(*me));
    8980:	3408      	adds	r4, #8

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8982:	213e      	movs	r1, #62	; 0x3e
    8984:	f7ff ffae 	bl	88e4 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    8988:	2101      	movs	r1, #1
    898a:	0020      	movs	r0, r4
    898c:	f009 feba 	bl	12704 <net_buf_simple_add>
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    8990:	0029      	movs	r1, r5
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    8992:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    8994:	0020      	movs	r0, r4
    8996:	f009 feb5 	bl	12704 <net_buf_simple_add>
}
    899a:	bd70      	pop	{r4, r5, r6, pc}

0000899c <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    899c:	4b0c      	ldr	r3, [pc, #48]	; (89d0 <encrypt_change+0x34>)
	       sizeof(u16_t));
}

static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
    899e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    89a0:	681b      	ldr	r3, [r3, #0]
	       sizeof(u16_t));
}

static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
    89a2:	0004      	movs	r4, r0
    89a4:	000d      	movs	r5, r1
    89a6:	0016      	movs	r6, r2
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    89a8:	061b      	lsls	r3, r3, #24
    89aa:	d510      	bpl.n	89ce <encrypt_change+0x32>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    89ac:	2204      	movs	r2, #4
    89ae:	2108      	movs	r1, #8
    89b0:	0030      	movs	r0, r6
    89b2:	f7ff ff97 	bl	88e4 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    89b6:	0030      	movs	r0, r6
    89b8:	2104      	movs	r1, #4
    89ba:	3008      	adds	r0, #8
    89bc:	f009 fea2 	bl	12704 <net_buf_simple_add>

	ep->status = err;
    89c0:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    89c2:	4263      	negs	r3, r4
    89c4:	4163      	adcs	r3, r4

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
    89c6:	7045      	strb	r5, [r0, #1]
    89c8:	0a2d      	lsrs	r5, r5, #8
    89ca:	7085      	strb	r5, [r0, #2]
	ep->encrypt = !err ? 1 : 0;
    89cc:	70c3      	strb	r3, [r0, #3]
}
    89ce:	bd70      	pop	{r4, r5, r6, pc}
    89d0:	20000538 	.word	0x20000538

000089d4 <le_remote_feat_complete>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    89d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89d6:	0014      	movs	r4, r2
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    89d8:	4a10      	ldr	r2, [pc, #64]	; (8a1c <le_remote_feat_complete+0x48>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    89da:	0007      	movs	r7, r0
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    89dc:	6852      	ldr	r2, [r2, #4]
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    89de:	000e      	movs	r6, r1
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    89e0:	0092      	lsls	r2, r2, #2
    89e2:	d519      	bpl.n	8a18 <le_remote_feat_complete+0x44>
    89e4:	2508      	movs	r5, #8
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    89e6:	4a0e      	ldr	r2, [pc, #56]	; (8a20 <le_remote_feat_complete+0x4c>)
static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    89e8:	6812      	ldr	r2, [r2, #0]
    89ea:	422a      	tst	r2, r5
    89ec:	d014      	beq.n	8a18 <le_remote_feat_complete+0x44>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    89ee:	220b      	movs	r2, #11
    89f0:	2104      	movs	r1, #4
    89f2:	0018      	movs	r0, r3
    89f4:	f7ff ffbe 	bl	8974 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
    89f8:	7044      	strb	r4, [r0, #1]
    89fa:	40ec      	lsrs	r4, r5
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
    89fc:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    89fe:	7084      	strb	r4, [r0, #2]
    8a00:	3003      	adds	r0, #3
	if (!status) {
    8a02:	2f00      	cmp	r7, #0
    8a04:	d104      	bne.n	8a10 <le_remote_feat_complete+0x3c>
		memcpy(&sep->features[0],
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
    8a06:	1d31      	adds	r1, r6, #4
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8a08:	002a      	movs	r2, r5
    8a0a:	f7f8 fcab 	bl	1364 <memcpy>
    8a0e:	e003      	b.n	8a18 <le_remote_feat_complete+0x44>
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8a10:	002a      	movs	r2, r5
    8a12:	2100      	movs	r1, #0
    8a14:	f7f8 fcd0 	bl	13b8 <memset>
	}
}
    8a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a1a:	46c0      	nop			; (mov r8, r8)
    8a1c:	20000538 	.word	0x20000538
    8a20:	20000540 	.word	0x20000540

00008a24 <bt_addr_le_to_str.constprop.55>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8a24:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    8a26:	7803      	ldrb	r3, [r0, #0]
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8a28:	b088      	sub	sp, #32
    8a2a:	0004      	movs	r4, r0
    8a2c:	000e      	movs	r6, r1
    8a2e:	ad06      	add	r5, sp, #24
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    8a30:	2b00      	cmp	r3, #0
    8a32:	d003      	beq.n	8a3c <bt_addr_le_to_str.constprop.55+0x18>
    8a34:	2b01      	cmp	r3, #1
    8a36:	d106      	bne.n	8a46 <bt_addr_le_to_str.constprop.55+0x22>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    8a38:	490f      	ldr	r1, [pc, #60]	; (8a78 <bt_addr_le_to_str.constprop.55+0x54>)
    8a3a:	e000      	b.n	8a3e <bt_addr_le_to_str.constprop.55+0x1a>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    8a3c:	490f      	ldr	r1, [pc, #60]	; (8a7c <bt_addr_le_to_str.constprop.55+0x58>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    8a3e:	0028      	movs	r0, r5
    8a40:	f7f8 fc4a 	bl	12d8 <strcpy>
    8a44:	e004      	b.n	8a50 <bt_addr_le_to_str.constprop.55+0x2c>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    8a46:	4a0e      	ldr	r2, [pc, #56]	; (8a80 <bt_addr_le_to_str.constprop.55+0x5c>)
    8a48:	2107      	movs	r1, #7
    8a4a:	0028      	movs	r0, r5
    8a4c:	f7f8 fe98 	bl	1780 <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8a50:	7862      	ldrb	r2, [r4, #1]
    8a52:	79a3      	ldrb	r3, [r4, #6]
    8a54:	9204      	str	r2, [sp, #16]
    8a56:	78a2      	ldrb	r2, [r4, #2]
    8a58:	9505      	str	r5, [sp, #20]
    8a5a:	9203      	str	r2, [sp, #12]
    8a5c:	78e2      	ldrb	r2, [r4, #3]
    8a5e:	211b      	movs	r1, #27
    8a60:	9202      	str	r2, [sp, #8]
    8a62:	7922      	ldrb	r2, [r4, #4]
    8a64:	0030      	movs	r0, r6
    8a66:	9201      	str	r2, [sp, #4]
    8a68:	7962      	ldrb	r2, [r4, #5]
    8a6a:	9200      	str	r2, [sp, #0]
    8a6c:	4a05      	ldr	r2, [pc, #20]	; (8a84 <bt_addr_le_to_str.constprop.55+0x60>)
    8a6e:	f7f8 fe87 	bl	1780 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    8a72:	b008      	add	sp, #32
    8a74:	bd70      	pop	{r4, r5, r6, pc}
    8a76:	46c0      	nop			; (mov r8, r8)
    8a78:	000142de 	.word	0x000142de
    8a7c:	000142d7 	.word	0x000142d7
    8a80:	000142e5 	.word	0x000142e5
    8a84:	000142ec 	.word	0x000142ec

00008a88 <le_adv_ext_report.isra.51>:
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a8a:	0004      	movs	r4, r0
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
    8a8c:	4b35      	ldr	r3, [pc, #212]	; (8b64 <le_adv_ext_report.isra.51+0xdc>)
{
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
		 offsetof(struct pdu_adv, payload) + adv->len];
    8a8e:	7840      	ldrb	r0, [r0, #1]
		  offsetof(struct pdu_adv, payload) + adv->len];

}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8a90:	b093      	sub	sp, #76	; 0x4c
			      struct net_buf *buf, u8_t phy)
{
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	u8_t rssi;

	rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8a92:	1809      	adds	r1, r1, r0
		 offsetof(struct pdu_adv, payload) + adv->len];

	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=-%u dB",
    8a94:	9307      	str	r3, [sp, #28]
    8a96:	7a8b      	ldrb	r3, [r1, #10]
    8a98:	4f33      	ldr	r7, [pc, #204]	; (8b68 <le_adv_ext_report.isra.51+0xe0>)
    8a9a:	9306      	str	r3, [sp, #24]
    8a9c:	7823      	ldrb	r3, [r4, #0]
    8a9e:	4e33      	ldr	r6, [pc, #204]	; (8b6c <le_adv_ext_report.isra.51+0xe4>)
    8aa0:	09d9      	lsrs	r1, r3, #7
    8aa2:	9105      	str	r1, [sp, #20]
    8aa4:	0659      	lsls	r1, r3, #25
    8aa6:	071b      	lsls	r3, r3, #28
    8aa8:	0f1b      	lsrs	r3, r3, #28
    8aaa:	9302      	str	r3, [sp, #8]
    8aac:	4b30      	ldr	r3, [pc, #192]	; (8b70 <le_adv_ext_report.isra.51+0xe8>)
    8aae:	0fc9      	lsrs	r1, r1, #31
    8ab0:	9104      	str	r1, [sp, #16]
    8ab2:	9003      	str	r0, [sp, #12]
    8ab4:	9201      	str	r2, [sp, #4]
    8ab6:	9300      	str	r3, [sp, #0]
    8ab8:	003a      	movs	r2, r7
    8aba:	4b2e      	ldr	r3, [pc, #184]	; (8b74 <le_adv_ext_report.isra.51+0xec>)
    8abc:	0031      	movs	r1, r6
    8abe:	482e      	ldr	r0, [pc, #184]	; (8b78 <le_adv_ext_report.isra.51+0xf0>)
    8ac0:	f7f8 fe52 	bl	1768 <printk>
		phy, adv->type, adv->len, adv->tx_addr, adv->rx_addr, rssi);

	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8ac4:	230f      	movs	r3, #15
    8ac6:	7822      	ldrb	r2, [r4, #0]
    8ac8:	4013      	ands	r3, r2
    8aca:	2b07      	cmp	r3, #7
    8acc:	d147      	bne.n	8b5e <le_adv_ext_report.isra.51+0xd6>
    8ace:	7863      	ldrb	r3, [r4, #1]
    8ad0:	2b00      	cmp	r3, #0
    8ad2:	d044      	beq.n	8b5e <le_adv_ext_report.isra.51+0xd6>

		p = (void *)&adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    8ad4:	4b23      	ldr	r3, [pc, #140]	; (8b64 <le_adv_ext_report.isra.51+0xdc>)
    8ad6:	0031      	movs	r1, r6
    8ad8:	9303      	str	r3, [sp, #12]
    8ada:	78a3      	ldrb	r3, [r4, #2]
    8adc:	4827      	ldr	r0, [pc, #156]	; (8b7c <le_adv_ext_report.isra.51+0xf4>)
    8ade:	069a      	lsls	r2, r3, #26
    8ae0:	099b      	lsrs	r3, r3, #6
    8ae2:	9301      	str	r3, [sp, #4]
    8ae4:	4b22      	ldr	r3, [pc, #136]	; (8b70 <le_adv_ext_report.isra.51+0xe8>)
    8ae6:	0e92      	lsrs	r2, r2, #26
    8ae8:	9202      	str	r2, [sp, #8]
    8aea:	9300      	str	r3, [sp, #0]
    8aec:	003a      	movs	r2, r7
    8aee:	4b21      	ldr	r3, [pc, #132]	; (8b74 <le_adv_ext_report.isra.51+0xec>)
    8af0:	f7f8 fe3a 	bl	1768 <printk>
			p->ext_hdr_len);

		if (!p->ext_hdr_len) {
    8af4:	78a3      	ldrb	r3, [r4, #2]
    8af6:	069b      	lsls	r3, r3, #26
    8af8:	d031      	beq.n	8b5e <le_adv_ext_report.isra.51+0xd6>
			goto no_ext_hdr;
		}

		if (h->adv_addr) {
    8afa:	78e3      	ldrb	r3, [r4, #3]
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
    8afc:	1d25      	adds	r5, r4, #4

		if (!p->ext_hdr_len) {
			goto no_ext_hdr;
		}

		if (h->adv_addr) {
    8afe:	07db      	lsls	r3, r3, #31
    8b00:	d51d      	bpl.n	8b3e <le_adv_ext_report.isra.51+0xb6>
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
    8b02:	2124      	movs	r1, #36	; 0x24
    8b04:	466a      	mov	r2, sp
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8b06:	2025      	movs	r0, #37	; 0x25

		if (h->adv_addr) {
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
    8b08:	7823      	ldrb	r3, [r4, #0]
    8b0a:	1852      	adds	r2, r2, r1
    8b0c:	065b      	lsls	r3, r3, #25
    8b0e:	0fdb      	lsrs	r3, r3, #31
    8b10:	7013      	strb	r3, [r2, #0]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8b12:	0029      	movs	r1, r5
    8b14:	2206      	movs	r2, #6
    8b16:	4468      	add	r0, sp
    8b18:	f7f8 fc24 	bl	1364 <memcpy>
			ptr += BDADDR_SIZE;

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8b1c:	a90b      	add	r1, sp, #44	; 0x2c
    8b1e:	a809      	add	r0, sp, #36	; 0x24
    8b20:	f7ff ff80 	bl	8a24 <bt_addr_le_to_str.constprop.55>

			BT_WARN("AdvA: %s", addr_str);
    8b24:	4b0f      	ldr	r3, [pc, #60]	; (8b64 <le_adv_ext_report.isra.51+0xdc>)
    8b26:	003a      	movs	r2, r7
    8b28:	9302      	str	r3, [sp, #8]
    8b2a:	ab0b      	add	r3, sp, #44	; 0x2c
    8b2c:	9301      	str	r3, [sp, #4]
    8b2e:	4b10      	ldr	r3, [pc, #64]	; (8b70 <le_adv_ext_report.isra.51+0xe8>)
    8b30:	0031      	movs	r1, r6
    8b32:	9300      	str	r3, [sp, #0]
    8b34:	4812      	ldr	r0, [pc, #72]	; (8b80 <le_adv_ext_report.isra.51+0xf8>)
    8b36:	4b0f      	ldr	r3, [pc, #60]	; (8b74 <le_adv_ext_report.isra.51+0xec>)
			char addr_str[BT_ADDR_LE_STR_LEN];
			bt_addr_le_t addr;

			addr.type = adv->tx_addr;
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
			ptr += BDADDR_SIZE;
    8b38:	3506      	adds	r5, #6

			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));

			BT_WARN("AdvA: %s", addr_str);
    8b3a:	f7f8 fe15 	bl	1768 <printk>

		}

		if (h->tx_pwr) {
    8b3e:	78e3      	ldrb	r3, [r4, #3]
    8b40:	065b      	lsls	r3, r3, #25
    8b42:	d50c      	bpl.n	8b5e <le_adv_ext_report.isra.51+0xd6>
			s8_t tx_pwr;

			tx_pwr = *(s8_t *)ptr;
			ptr++;

			BT_WARN("Tx pwr= %d dB", tx_pwr);
    8b44:	4b07      	ldr	r3, [pc, #28]	; (8b64 <le_adv_ext_report.isra.51+0xdc>)
    8b46:	4a08      	ldr	r2, [pc, #32]	; (8b68 <le_adv_ext_report.isra.51+0xe0>)
    8b48:	9302      	str	r3, [sp, #8]
    8b4a:	2300      	movs	r3, #0
    8b4c:	56eb      	ldrsb	r3, [r5, r3]
    8b4e:	4907      	ldr	r1, [pc, #28]	; (8b6c <le_adv_ext_report.isra.51+0xe4>)
    8b50:	9301      	str	r3, [sp, #4]
    8b52:	4b07      	ldr	r3, [pc, #28]	; (8b70 <le_adv_ext_report.isra.51+0xe8>)
    8b54:	480b      	ldr	r0, [pc, #44]	; (8b84 <le_adv_ext_report.isra.51+0xfc>)
    8b56:	9300      	str	r3, [sp, #0]
    8b58:	4b06      	ldr	r3, [pc, #24]	; (8b74 <le_adv_ext_report.isra.51+0xec>)
    8b5a:	f7f8 fe05 	bl	1768 <printk>
		/* TODO: length check? */
	}

no_ext_hdr:
	return;
}
    8b5e:	b013      	add	sp, #76	; 0x4c
    8b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b62:	46c0      	nop			; (mov r8, r8)
    8b64:	000145b0 	.word	0x000145b0
    8b68:	000145bd 	.word	0x000145bd
    8b6c:	00014577 	.word	0x00014577
    8b70:	000145fb 	.word	0x000145fb
    8b74:	00016d83 	.word	0x00016d83
    8b78:	000156c4 	.word	0x000156c4
    8b7c:	00015712 	.word	0x00015712
    8b80:	00015743 	.word	0x00015743
    8b84:	0001575c 	.word	0x0001575c

00008b88 <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    8b88:	b530      	push	{r4, r5, lr}
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    8b8a:	7842      	ldrb	r2, [r0, #1]
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    8b8c:	0003      	movs	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    8b8e:	7804      	ldrb	r4, [r0, #0]
    8b90:	7880      	ldrb	r0, [r0, #2]
    8b92:	0212      	lsls	r2, r2, #8
    8b94:	4322      	orrs	r2, r4
    8b96:	0400      	lsls	r0, r0, #16
    8b98:	0011      	movs	r1, r2
    8b9a:	0002      	movs	r2, r0
    8b9c:	78d8      	ldrb	r0, [r3, #3]
    8b9e:	430a      	orrs	r2, r1
    8ba0:	0600      	lsls	r0, r0, #24
    8ba2:	4310      	orrs	r0, r2
    8ba4:	795a      	ldrb	r2, [r3, #5]
    8ba6:	791d      	ldrb	r5, [r3, #4]
    8ba8:	7999      	ldrb	r1, [r3, #6]
    8baa:	0212      	lsls	r2, r2, #8
    8bac:	432a      	orrs	r2, r5
    8bae:	0409      	lsls	r1, r1, #16
    8bb0:	0014      	movs	r4, r2
    8bb2:	000a      	movs	r2, r1
    8bb4:	79d9      	ldrb	r1, [r3, #7]
    8bb6:	4322      	orrs	r2, r4
    8bb8:	0609      	lsls	r1, r1, #24
    8bba:	4311      	orrs	r1, r2
}
    8bbc:	bd30      	pop	{r4, r5, pc}
	...

00008bc0 <hci_cmd_handle>:

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    8bc0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    8bc2:	2500      	movs	r5, #0

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    8bc4:	b092      	sub	sp, #72	; 0x48
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
    8bc6:	950d      	str	r5, [sp, #52]	; 0x34

	return 0;
}

struct net_buf *hci_cmd_handle(struct net_buf *cmd)
{
    8bc8:	0004      	movs	r4, r0
	struct bt_hci_cmd_hdr *chdr;
	struct net_buf *evt = NULL;
	u16_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    8bca:	8980      	ldrh	r0, [r0, #12]
    8bcc:	2802      	cmp	r0, #2
    8bce:	d808      	bhi.n	8be2 <hci_cmd_handle+0x22>
		BT_ERR("No HCI Command header");
    8bd0:	4bc7      	ldr	r3, [pc, #796]	; (8ef0 <hci_cmd_handle+0x330>)
    8bd2:	4ac8      	ldr	r2, [pc, #800]	; (8ef4 <hci_cmd_handle+0x334>)
    8bd4:	9301      	str	r3, [sp, #4]
    8bd6:	4bc8      	ldr	r3, [pc, #800]	; (8ef8 <hci_cmd_handle+0x338>)
    8bd8:	49c8      	ldr	r1, [pc, #800]	; (8efc <hci_cmd_handle+0x33c>)
    8bda:	9300      	str	r3, [sp, #0]
    8bdc:	48c8      	ldr	r0, [pc, #800]	; (8f00 <hci_cmd_handle+0x340>)
    8bde:	4bc9      	ldr	r3, [pc, #804]	; (8f04 <hci_cmd_handle+0x344>)
    8be0:	e011      	b.n	8c06 <hci_cmd_handle+0x46>
		return NULL;
	}

	chdr = (void *)cmd->data;
    8be2:	68a3      	ldr	r3, [r4, #8]
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8be4:	4ec8      	ldr	r6, [pc, #800]	; (8f08 <hci_cmd_handle+0x348>)
    8be6:	785a      	ldrb	r2, [r3, #1]
    8be8:	7819      	ldrb	r1, [r3, #0]
    8bea:	0212      	lsls	r2, r2, #8
    8bec:	430a      	orrs	r2, r1
    8bee:	8032      	strh	r2, [r6, #0]

	if (cmd->len < chdr->param_len) {
    8bf0:	789b      	ldrb	r3, [r3, #2]
    8bf2:	4283      	cmp	r3, r0
    8bf4:	d90b      	bls.n	8c0e <hci_cmd_handle+0x4e>
		BT_ERR("Invalid HCI CMD packet length");
    8bf6:	4bbe      	ldr	r3, [pc, #760]	; (8ef0 <hci_cmd_handle+0x330>)
    8bf8:	4abe      	ldr	r2, [pc, #760]	; (8ef4 <hci_cmd_handle+0x334>)
    8bfa:	9301      	str	r3, [sp, #4]
    8bfc:	4bbe      	ldr	r3, [pc, #760]	; (8ef8 <hci_cmd_handle+0x338>)
    8bfe:	49bf      	ldr	r1, [pc, #764]	; (8efc <hci_cmd_handle+0x33c>)
    8c00:	9300      	str	r3, [sp, #0]
    8c02:	48c2      	ldr	r0, [pc, #776]	; (8f0c <hci_cmd_handle+0x34c>)
    8c04:	4bbf      	ldr	r3, [pc, #764]	; (8f04 <hci_cmd_handle+0x344>)
    8c06:	f7f8 fdaf 	bl	1768 <printk>
		return NULL;
    8c0a:	0028      	movs	r0, r5
    8c0c:	e30d      	b.n	922a <hci_cmd_handle+0x66a>
	}

	net_buf_pull(cmd, sizeof(*chdr));
    8c0e:	0020      	movs	r0, r4
    8c10:	2103      	movs	r1, #3
    8c12:	3008      	adds	r0, #8
    8c14:	f009 fd97 	bl	12746 <net_buf_simple_pull>

	ocf = BT_OCF(_opcode);
    8c18:	8833      	ldrh	r3, [r6, #0]

	switch (BT_OGF(_opcode)) {
    8c1a:	0a98      	lsrs	r0, r3, #10
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));

	ocf = BT_OCF(_opcode);
    8c1c:	059d      	lsls	r5, r3, #22

	switch (BT_OGF(_opcode)) {
    8c1e:	3801      	subs	r0, #1
		return NULL;
	}

	net_buf_pull(cmd, sizeof(*chdr));

	ocf = BT_OCF(_opcode);
    8c20:	0dad      	lsrs	r5, r5, #22

	switch (BT_OGF(_opcode)) {
    8c22:	2807      	cmp	r0, #7
    8c24:	d900      	bls.n	8c28 <hci_cmd_handle+0x68>
    8c26:	e2f9      	b.n	921c <hci_cmd_handle+0x65c>
    8c28:	f7f7 fab0 	bl	18c <__gnu_thumb1_case_uhi>
    8c2c:	02f80008 	.word	0x02f80008
    8c30:	0039001e 	.word	0x0039001e
    8c34:	02f802f8 	.word	0x02f802f8
    8c38:	009a02f8 	.word	0x009a02f8
}

static int link_control_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				   struct net_buf **evt)
{
	switch (ocf) {
    8c3c:	2d06      	cmp	r5, #6
    8c3e:	d00a      	beq.n	8c56 <hci_cmd_handle+0x96>
    8c40:	2d1d      	cmp	r5, #29
    8c42:	d000      	beq.n	8c46 <hci_cmd_handle+0x86>
    8c44:	e2ea      	b.n	921c <hci_cmd_handle+0x65c>
{
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    8c46:	68a2      	ldr	r2, [r4, #8]
    8c48:	7850      	ldrb	r0, [r2, #1]
    8c4a:	7813      	ldrb	r3, [r2, #0]
    8c4c:	0200      	lsls	r0, r0, #8
	status = ll_version_ind_send(handle);
    8c4e:	4318      	orrs	r0, r3
    8c50:	f008 f905 	bl	10e5e <ll_version_ind_send>
    8c54:	e2d8      	b.n	9208 <hci_cmd_handle+0x648>
    8c56:	68a2      	ldr	r2, [r4, #8]
{
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    8c58:	7850      	ldrb	r0, [r2, #1]
    8c5a:	7813      	ldrb	r3, [r2, #0]
    8c5c:	0200      	lsls	r0, r0, #8
	status = ll_terminate_ind_send(handle, cmd->reason);
    8c5e:	7891      	ldrb	r1, [r2, #2]
    8c60:	4318      	orrs	r0, r3
    8c62:	f008 f912 	bl	10e8a <ll_terminate_ind_send>
    8c66:	e2cf      	b.n	9208 <hci_cmd_handle+0x648>
#endif

static int ctrl_bb_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			      struct net_buf **evt)
{
	switch (ocf) {
    8c68:	2d01      	cmp	r5, #1
    8c6a:	d010      	beq.n	8c8e <hci_cmd_handle+0xce>
    8c6c:	2d03      	cmp	r5, #3
    8c6e:	d000      	beq.n	8c72 <hci_cmd_handle+0xb2>
    8c70:	e2d4      	b.n	921c <hci_cmd_handle+0x65c>

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    8c72:	2001      	movs	r0, #1
    8c74:	49a6      	ldr	r1, [pc, #664]	; (8f10 <hci_cmd_handle+0x350>)
    8c76:	4ba7      	ldr	r3, [pc, #668]	; (8f14 <hci_cmd_handle+0x354>)
    8c78:	4240      	negs	r0, r0
    8c7a:	6018      	str	r0, [r3, #0]
    8c7c:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8c7e:	201f      	movs	r0, #31
    8c80:	2100      	movs	r1, #0
    8c82:	4ba5      	ldr	r3, [pc, #660]	; (8f18 <hci_cmd_handle+0x358>)
    8c84:	6018      	str	r0, [r3, #0]
    8c86:	6059      	str	r1, [r3, #4]

	if (buf) {
		ll_reset();
    8c88:	f007 ffb2 	bl	10bf0 <ll_reset>
    8c8c:	e261      	b.n	9152 <hci_cmd_handle+0x592>
static void set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	event_mask = sys_get_le64(cmd->events);
    8c8e:	68a0      	ldr	r0, [r4, #8]
    8c90:	f7ff ff7a 	bl	8b88 <sys_get_le64>
    8c94:	4b9f      	ldr	r3, [pc, #636]	; (8f14 <hci_cmd_handle+0x354>)
    8c96:	6018      	str	r0, [r3, #0]
    8c98:	6059      	str	r1, [r3, #4]

	ccst = cmd_complete(evt, sizeof(*ccst));
    8c9a:	0029      	movs	r1, r5
    8c9c:	e25a      	b.n	9154 <hci_cmd_handle+0x594>
}

static int info_cmd_handle(u16_t  ocf, struct net_buf *cmd,
			   struct net_buf **evt)
{
	switch (ocf) {
    8c9e:	1e68      	subs	r0, r5, #1
    8ca0:	2808      	cmp	r0, #8
    8ca2:	d900      	bls.n	8ca6 <hci_cmd_handle+0xe6>
    8ca4:	e2ba      	b.n	921c <hci_cmd_handle+0x65c>
    8ca6:	f7f7 fa71 	bl	18c <__gnu_thumb1_case_uhi>
    8caa:	0009      	.short	0x0009
    8cac:	0042001a 	.word	0x0042001a
    8cb0:	02b902b9 	.word	0x02b902b9
    8cb4:	02b902b9 	.word	0x02b902b9
    8cb8:	005002b9 	.word	0x005002b9

static void read_local_version_info(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8cbc:	2109      	movs	r1, #9
    8cbe:	a80d      	add	r0, sp, #52	; 0x34
    8cc0:	f7ff fe36 	bl	8930 <cmd_complete>

	rp->status = 0x00;
    8cc4:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_5_0;
    8cc6:	2209      	movs	r2, #9
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    8cc8:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
	rp->hci_revision = sys_cpu_to_le16(0);
    8cca:	7083      	strb	r3, [r0, #2]
    8ccc:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8cce:	3b01      	subs	r3, #1
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
	rp->hci_version = BT_HCI_VERSION_5_0;
    8cd0:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    8cd2:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    8cd4:	7143      	strb	r3, [r0, #5]
    8cd6:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    8cd8:	71c3      	strb	r3, [r0, #7]
    8cda:	7203      	strb	r3, [r0, #8]
    8cdc:	e29c      	b.n	9218 <hci_cmd_handle+0x658>

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8cde:	2141      	movs	r1, #65	; 0x41
    8ce0:	a80d      	add	r0, sp, #52	; 0x34
    8ce2:	f7ff fe25 	bl	8930 <cmd_complete>

	rp->status = 0x00;
    8ce6:	2100      	movs	r1, #0

static void read_supported_commands(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8ce8:	0004      	movs	r4, r0

	rp->status = 0x00;
    8cea:	7001      	strb	r1, [r0, #0]
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    8cec:	2240      	movs	r2, #64	; 0x40
    8cee:	3001      	adds	r0, #1
    8cf0:	f7f8 fb62 	bl	13b8 <memset>
	/* Disconnect. */
	rp->commands[0] = (1 << 5);
    8cf4:	2320      	movs	r3, #32
	rp->commands[27] = 0xFF;
	/* LE Start Encryption, LE Long Term Key Req Reply,
	 * LE Long Term Key Req Neg Reply. and
	 * LE Read Supported States.
	 */
	rp->commands[28] = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
    8cf6:	200f      	movs	r0, #15
	rp->commands[35] |= (1 << 0) | (1 << 1) | (1 << 2);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Set Data Length, and LE Read Suggested Data Length. */
	rp->commands[33] |= (1 << 6) | (1 << 7);
    8cf8:	26f0      	movs	r6, #240	; 0xf0
	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
	memset(&rp->commands[0], 0, sizeof(rp->commands));
	/* Disconnect. */
	rp->commands[0] = (1 << 5);
    8cfa:	7063      	strb	r3, [r4, #1]
	/* Set Event Mask, and Reset. */
	rp->commands[5] = (1 << 6) | (1 << 7);
    8cfc:	33a0      	adds	r3, #160	; 0xa0
    8cfe:	71a3      	strb	r3, [r4, #6]
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	/* Set FC, Host Buffer Size and Host Num Completed */
	rp->commands[10] = (1 << 5) | (1 << 6) | (1 << 7);
#endif
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] = (1 << 3) | (1 << 5);
    8d00:	3b98      	subs	r3, #152	; 0x98
    8d02:	73e3      	strb	r3, [r4, #15]
	/* Read BD ADDR. */
	rp->commands[15] = (1 << 1);
    8d04:	3b26      	subs	r3, #38	; 0x26
    8d06:	7423      	strb	r3, [r4, #16]
	/* All LE commands in this octet. */
	rp->commands[25] = 0xF7;
    8d08:	33f5      	adds	r3, #245	; 0xf5
    8d0a:	76a3      	strb	r3, [r4, #26]
	/* All LE commands in this octet. */
	rp->commands[26] = 0xFF;
    8d0c:	3308      	adds	r3, #8
    8d0e:	76e3      	strb	r3, [r4, #27]
	/* All LE commands in this octet,
	 */
	rp->commands[27] = 0xFF;
    8d10:	7723      	strb	r3, [r4, #28]
	/* LE Start Encryption, LE Long Term Key Req Reply,
	 * LE Long Term Key Req Neg Reply. and
	 * LE Read Supported States.
	 */
	rp->commands[28] = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
    8d12:	7760      	strb	r0, [r4, #29]
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] = (1 << 4) | (1 << 5);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= (1 << 3) | (1 << 4) | (1 << 5) | (1 << 6) | (1 << 7);
    8d14:	1d25      	adds	r5, r4, #4
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= (1 << 0) | (1 << 1) | (1 << 2);
    8d16:	1d61      	adds	r1, r4, #5
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Set Data Length, and LE Read Suggested Data Length. */
	rp->commands[33] |= (1 << 6) | (1 << 7);
    8d18:	3403      	adds	r4, #3
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] = (1 << 4) | (1 << 5);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	/* LE resolving list commands, LE Read Peer RPA */
	rp->commands[34] |= (1 << 3) | (1 << 4) | (1 << 5) | (1 << 6) | (1 << 7);
    8d1a:	7fea      	ldrb	r2, [r5, #31]
	/* LE Read Local RPA, LE Set AR Enable, Set RPA Timeout */
	rp->commands[35] |= (1 << 0) | (1 << 1) | (1 << 2);
    8d1c:	7fcb      	ldrb	r3, [r1, #31]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Set Data Length, and LE Read Suggested Data Length. */
	rp->commands[33] |= (1 << 6) | (1 << 7);
    8d1e:	77e6      	strb	r6, [r4, #31]
	/* LE Write Suggested Data Length. */
	rp->commands[34] |= (1 << 0);
    8d20:	2407      	movs	r4, #7
    8d22:	4264      	negs	r4, r4
    8d24:	4322      	orrs	r2, r4
	rp->commands[34] |= (1 << 1) | (1 << 2);
#endif

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Read Maximum Data Length. */
	rp->commands[35] |= (1 << 3);
    8d26:	4303      	orrs	r3, r0

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Set Data Length, and LE Read Suggested Data Length. */
	rp->commands[33] |= (1 << 6) | (1 << 7);
	/* LE Write Suggested Data Length. */
	rp->commands[34] |= (1 << 0);
    8d28:	77ea      	strb	r2, [r5, #31]
	rp->commands[34] |= (1 << 1) | (1 << 2);
#endif

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Read Maximum Data Length. */
	rp->commands[35] |= (1 << 3);
    8d2a:	77cb      	strb	r3, [r1, #31]
    8d2c:	e274      	b.n	9218 <hci_cmd_handle+0x658>

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8d2e:	2109      	movs	r1, #9
    8d30:	a80d      	add	r0, sp, #52	; 0x34
    8d32:	f7ff fdfd 	bl	8930 <cmd_complete>

	rp->status = 0x00;
    8d36:	2100      	movs	r1, #0

static void read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8d38:	0004      	movs	r4, r0

	rp->status = 0x00;
    8d3a:	7001      	strb	r1, [r0, #0]
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8d3c:	2208      	movs	r2, #8
    8d3e:	3001      	adds	r0, #1
    8d40:	f7f8 fb3a 	bl	13b8 <memset>
	/* BR/EDR not supported and LE supported */
	rp->features[4] = (1 << 5) | (1 << 6);
    8d44:	2360      	movs	r3, #96	; 0x60
    8d46:	7163      	strb	r3, [r4, #5]
    8d48:	e266      	b.n	9218 <hci_cmd_handle+0x658>

static void read_bd_addr(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_read_bd_addr *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8d4a:	2107      	movs	r1, #7
    8d4c:	a80d      	add	r0, sp, #52	; 0x34
    8d4e:	f7ff fdef 	bl	8930 <cmd_complete>
    8d52:	0001      	movs	r1, r0

	rp->status = 0x00;
    8d54:	2000      	movs	r0, #0
    8d56:	7008      	strb	r0, [r1, #0]
	ll_addr_get(0, &rp->bdaddr.val[0]);
    8d58:	3101      	adds	r1, #1
    8d5a:	f008 fe8d 	bl	11a78 <ll_addr_get>
    8d5e:	e25b      	b.n	9218 <hci_cmd_handle+0x658>
#endif /* CONFIG_BLUETOOTH_CONN */

static int controller_cmd_handle(u16_t  ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	switch (ocf) {
    8d60:	1e68      	subs	r0, r5, #1
    8d62:	2831      	cmp	r0, #49	; 0x31
    8d64:	d900      	bls.n	8d68 <hci_cmd_handle+0x1a8>
    8d66:	e259      	b.n	921c <hci_cmd_handle+0x65c>
    8d68:	f7f7 fa10 	bl	18c <__gnu_thumb1_case_uhi>
    8d6c:	00390032 	.word	0x00390032
    8d70:	02580045 	.word	0x02580045
    8d74:	00a60057 	.word	0x00a60057
    8d78:	00e000d8 	.word	0x00e000d8
    8d7c:	00ec00e6 	.word	0x00ec00e6
    8d80:	02580258 	.word	0x02580258
    8d84:	02580258 	.word	0x02580258
    8d88:	0067005c 	.word	0x0067005c
    8d8c:	0073006f 	.word	0x0073006f
    8d90:	02580116 	.word	0x02580116
    8d94:	010e0258 	.word	0x010e0258
    8d98:	008a0077 	.word	0x008a0077
    8d9c:	00fb0258 	.word	0x00fb0258
    8da0:	00950103 	.word	0x00950103
    8da4:	02580258 	.word	0x02580258
    8da8:	012e0258 	.word	0x012e0258
    8dac:	01620147 	.word	0x01620147
    8db0:	0186017c 	.word	0x0186017c
    8db4:	02580258 	.word	0x02580258
    8db8:	01a5019e 	.word	0x01a5019e
    8dbc:	01b701af 	.word	0x01b701af
    8dc0:	01d101c2 	.word	0x01d101c2
    8dc4:	01ec01e0 	.word	0x01ec01e0
    8dc8:	01f90192 	.word	0x01f90192
    8dcc:	02310219 	.word	0x02310219
static void le_set_event_mask(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	le_event_mask = sys_get_le64(cmd->events);
    8dd0:	68a0      	ldr	r0, [r4, #8]
    8dd2:	f7ff fed9 	bl	8b88 <sys_get_le64>
    8dd6:	4b50      	ldr	r3, [pc, #320]	; (8f18 <hci_cmd_handle+0x358>)
    8dd8:	6018      	str	r0, [r3, #0]
    8dda:	6059      	str	r1, [r3, #4]
    8ddc:	e1b9      	b.n	9152 <hci_cmd_handle+0x592>

static void le_read_buffer_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8dde:	2104      	movs	r1, #4
    8de0:	a80d      	add	r0, sp, #52	; 0x34
    8de2:	f7ff fda5 	bl	8930 <cmd_complete>

	rp->status = 0x00;
    8de6:	2300      	movs	r3, #0

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8de8:	211b      	movs	r1, #27
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    8dea:	7003      	strb	r3, [r0, #0]

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8dec:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8dee:	3302      	adds	r3, #2

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    8df0:	7041      	strb	r1, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    8df2:	70c3      	strb	r3, [r0, #3]
    8df4:	e210      	b.n	9218 <hci_cmd_handle+0x658>

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8df6:	2109      	movs	r1, #9
    8df8:	a80d      	add	r0, sp, #52	; 0x34
    8dfa:	f7ff fd99 	bl	8930 <cmd_complete>

	rp->status = 0x00;
    8dfe:	2500      	movs	r5, #0

static void le_read_local_features(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8e00:	0004      	movs	r4, r0

	rp->status = 0x00;
    8e02:	7005      	strb	r5, [r0, #0]

	memset(&rp->features[0], 0x00, sizeof(rp->features));
    8e04:	2208      	movs	r2, #8
    8e06:	3001      	adds	r0, #1
    8e08:	0029      	movs	r1, r5
    8e0a:	f7f8 fad5 	bl	13b8 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    8e0e:	237f      	movs	r3, #127	; 0x7f
    8e10:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    8e12:	3b3f      	subs	r3, #63	; 0x3f
    8e14:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    8e16:	70e5      	strb	r5, [r4, #3]
    8e18:	e1fe      	b.n	9218 <hci_cmd_handle+0x658>
static void le_set_random_address(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_random_address *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_addr_set(1, &cmd->bdaddr.val[0]);
    8e1a:	68a1      	ldr	r1, [r4, #8]
    8e1c:	2001      	movs	r0, #1
    8e1e:	f008 fe43 	bl	11aa8 <ll_addr_set>
    8e22:	e196      	b.n	9152 <hci_cmd_handle+0x592>

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8e24:	2102      	movs	r1, #2
    8e26:	a80d      	add	r0, sp, #52	; 0x34
    8e28:	f7ff fd82 	bl	8930 <cmd_complete>
	rp->status = 0x00;
    8e2c:	2300      	movs	r3, #0
    8e2e:	7003      	strb	r3, [r0, #0]

static void le_read_wl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8e30:	0004      	movs	r4, r0
	rp->status = 0x00;

	rp->wl_size = ll_wl_size_get();
    8e32:	f008 fe55 	bl	11ae0 <ll_wl_size_get>
    8e36:	7060      	strb	r0, [r4, #1]
    8e38:	e1ee      	b.n	9218 <hci_cmd_handle+0x658>

static void le_clear_wl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;

	ccst = cmd_complete(evt, sizeof(*ccst));
    8e3a:	2101      	movs	r1, #1
    8e3c:	a80d      	add	r0, sp, #52	; 0x34
    8e3e:	f7ff fd77 	bl	8930 <cmd_complete>
    8e42:	0004      	movs	r4, r0
	ccst->status = ll_wl_clear();
    8e44:	f008 fe4e 	bl	11ae4 <ll_wl_clear>
    8e48:	e17a      	b.n	9140 <hci_cmd_handle+0x580>
{
	struct bt_hci_cp_le_add_dev_to_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_add(&cmd->addr);
    8e4a:	68a0      	ldr	r0, [r4, #8]
    8e4c:	f008 fe60 	bl	11b10 <ll_wl_add>
    8e50:	e134      	b.n	90bc <hci_cmd_handle+0x4fc>
{
	struct bt_hci_cp_le_rem_dev_from_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_wl_remove(&cmd->addr);
    8e52:	68a0      	ldr	r0, [r4, #8]
    8e54:	f008 fe98 	bl	11b88 <ll_wl_remove>
    8e58:	e130      	b.n	90bc <hci_cmd_handle+0x4fc>
    8e5a:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
	struct bt_hci_rp_le_encrypt *rp;
	u8_t enc_data[16];

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    8e5c:	aa0e      	add	r2, sp, #56	; 0x38
    8e5e:	0001      	movs	r1, r0
    8e60:	2300      	movs	r3, #0
    8e62:	3110      	adds	r1, #16
    8e64:	f001 f91a 	bl	a09c <ecb_encrypt>

	rp = cmd_complete(evt, sizeof(*rp));
    8e68:	2111      	movs	r1, #17
    8e6a:	a80d      	add	r0, sp, #52	; 0x34
    8e6c:	f7ff fd60 	bl	8930 <cmd_complete>

	rp->status = 0x00;
    8e70:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    8e72:	2210      	movs	r2, #16

	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    8e74:	7003      	strb	r3, [r0, #0]
	memcpy(rp->enc_data, enc_data, 16);
    8e76:	a90e      	add	r1, sp, #56	; 0x38
    8e78:	3001      	adds	r0, #1
    8e7a:	f7f8 fa73 	bl	1364 <memcpy>
    8e7e:	e1cb      	b.n	9218 <hci_cmd_handle+0x658>
static void le_rand(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
    8e80:	2109      	movs	r1, #9
    8e82:	a80d      	add	r0, sp, #52	; 0x34
    8e84:	f7ff fd54 	bl	8930 <cmd_complete>
	rp->status = 0x00;
    8e88:	2300      	movs	r3, #0

	bt_rand(rp->rand, count);
    8e8a:	2108      	movs	r1, #8
{
	struct bt_hci_rp_le_rand *rp;
	u8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = 0x00;
    8e8c:	7003      	strb	r3, [r0, #0]

	bt_rand(rp->rand, count);
    8e8e:	3001      	adds	r0, #1
    8e90:	f002 fbf6 	bl	b680 <bt_rand>
    8e94:	e1c0      	b.n	9218 <hci_cmd_handle+0x658>

static void le_read_supp_states(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_supp_states *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8e96:	2109      	movs	r1, #9
    8e98:	a80d      	add	r0, sp, #52	; 0x34
    8e9a:	f7ff fd49 	bl	8930 <cmd_complete>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    8e9e:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
    8ea0:	2200      	movs	r2, #0
    8ea2:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    8ea4:	7083      	strb	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    8ea6:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    8ea8:	7103      	strb	r3, [r0, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    8eaa:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    8eac:	3bfc      	subs	r3, #252	; 0xfc
    8eae:	7002      	strb	r2, [r0, #0]
    8eb0:	7183      	strb	r3, [r0, #6]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    8eb2:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    8eb4:	7202      	strb	r2, [r0, #8]
    8eb6:	e1af      	b.n	9218 <hci_cmd_handle+0x658>
    8eb8:	68a1      	ldr	r1, [r4, #8]
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u16_t min_interval;
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);
    8eba:	784a      	ldrb	r2, [r1, #1]
    8ebc:	7808      	ldrb	r0, [r1, #0]
    8ebe:	0212      	lsls	r2, r2, #8

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    8ec0:	4302      	orrs	r2, r0
    8ec2:	2000      	movs	r0, #0
    8ec4:	790b      	ldrb	r3, [r1, #4]
    8ec6:	900a      	str	r0, [sp, #40]	; 0x28
    8ec8:	9009      	str	r0, [sp, #36]	; 0x24
    8eca:	9008      	str	r0, [sp, #32]
    8ecc:	9007      	str	r0, [sp, #28]
    8ece:	9006      	str	r0, [sp, #24]
    8ed0:	9005      	str	r0, [sp, #20]
    8ed2:	7b8c      	ldrb	r4, [r1, #14]
    8ed4:	9404      	str	r4, [sp, #16]
    8ed6:	7b4c      	ldrb	r4, [r1, #13]
    8ed8:	9403      	str	r4, [sp, #12]
				   cmd->own_addr_type, cmd->direct_addr.type,
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    8eda:	1dcc      	adds	r4, r1, #7
	u8_t status;

	min_interval = sys_le16_to_cpu(cmd->min_interval);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    8edc:	9402      	str	r4, [sp, #8]
    8ede:	798c      	ldrb	r4, [r1, #6]
    8ee0:	9401      	str	r4, [sp, #4]
    8ee2:	7949      	ldrb	r1, [r1, #5]
    8ee4:	9100      	str	r1, [sp, #0]
    8ee6:	0001      	movs	r1, r0
    8ee8:	f009 f968 	bl	121bc <ll_adv_params_set>
    8eec:	e0e6      	b.n	90bc <hci_cmd_handle+0x4fc>
    8eee:	46c0      	nop			; (mov r8, r8)
    8ef0:	000145b0 	.word	0x000145b0
    8ef4:	00014570 	.word	0x00014570
    8ef8:	000145b5 	.word	0x000145b5
    8efc:	00014577 	.word	0x00014577
    8f00:	0001577a 	.word	0x0001577a
    8f04:	00016dc3 	.word	0x00016dc3
    8f08:	20000fb8 	.word	0x20000fb8
    8f0c:	000157a0 	.word	0x000157a0
    8f10:	00001fff 	.word	0x00001fff
    8f14:	20000538 	.word	0x20000538
    8f18:	20000540 	.word	0x20000540

static void le_read_adv_chan_tx_power(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_chan_tx_power *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    8f1c:	2102      	movs	r1, #2
    8f1e:	a80d      	add	r0, sp, #52	; 0x34
    8f20:	f7ff fd06 	bl	8930 <cmd_complete>

	rp->status = 0x00;
    8f24:	2300      	movs	r3, #0
    8f26:	7003      	strb	r3, [r0, #0]

	rp->tx_power_level = 0;
    8f28:	7043      	strb	r3, [r0, #1]
    8f2a:	e175      	b.n	9218 <hci_cmd_handle+0x658>
    8f2c:	68a3      	ldr	r3, [r4, #8]
static void le_set_adv_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_adv_data_set(cmd->len, &cmd->data[0]);
    8f2e:	1c59      	adds	r1, r3, #1
    8f30:	7818      	ldrb	r0, [r3, #0]
    8f32:	f009 fa53 	bl	123dc <ll_adv_data_set>
    8f36:	e10c      	b.n	9152 <hci_cmd_handle+0x592>
    8f38:	68a3      	ldr	r3, [r4, #8]
static void le_set_scan_rsp_data(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_scan_data_set(cmd->len, &cmd->data[0]);
    8f3a:	1c59      	adds	r1, r3, #1
    8f3c:	7818      	ldrb	r0, [r3, #0]
    8f3e:	f009 faa3 	bl	12488 <ll_scan_data_set>
    8f42:	e106      	b.n	9152 <hci_cmd_handle+0x592>
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    8f44:	68a3      	ldr	r3, [r4, #8]
    8f46:	7818      	ldrb	r0, [r3, #0]
    8f48:	f009 fada 	bl	12500 <ll_adv_enable>

	ccst = cmd_complete(evt, sizeof(*ccst));
    8f4c:	2101      	movs	r1, #1
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_adv_enable(cmd->enable);
    8f4e:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    8f50:	a80d      	add	r0, sp, #52	; 0x34
    8f52:	f7ff fced 	bl	8930 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8f56:	2300      	movs	r3, #0
    8f58:	429c      	cmp	r4, r3
    8f5a:	d100      	bne.n	8f5e <hci_cmd_handle+0x39e>
    8f5c:	e163      	b.n	9226 <hci_cmd_handle+0x666>
    8f5e:	330c      	adds	r3, #12
    8f60:	e161      	b.n	9226 <hci_cmd_handle+0x666>
    8f62:	68a2      	ldr	r2, [r4, #8]
	struct bt_hci_rp_le_ltk_req_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    8f64:	2100      	movs	r1, #0
	struct bt_hci_cp_le_ltk_req_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    8f66:	7854      	ldrb	r4, [r2, #1]
    8f68:	7813      	ldrb	r3, [r2, #0]
    8f6a:	0224      	lsls	r4, r4, #8
    8f6c:	431c      	orrs	r4, r3
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    8f6e:	3202      	adds	r2, #2
    8f70:	e006      	b.n	8f80 <hci_cmd_handle+0x3c0>
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    8f72:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    8f74:	2106      	movs	r1, #6
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    8f76:	7813      	ldrb	r3, [r2, #0]
    8f78:	7854      	ldrb	r4, [r2, #1]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    8f7a:	2200      	movs	r2, #0
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    8f7c:	0224      	lsls	r4, r4, #8
    8f7e:	431c      	orrs	r4, r3
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    8f80:	0020      	movs	r0, r4
    8f82:	f007 ff0f 	bl	10da4 <ll_start_enc_req_send>
    8f86:	e05f      	b.n	9048 <hci_cmd_handle+0x488>
{
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    8f88:	68a2      	ldr	r2, [r4, #8]
    8f8a:	7850      	ldrb	r0, [r2, #1]
    8f8c:	7813      	ldrb	r3, [r2, #0]
    8f8e:	0200      	lsls	r0, r0, #8
	status = ll_feature_req_send(handle);
    8f90:	4318      	orrs	r0, r3
    8f92:	f007 ff4e 	bl	10e32 <ll_feature_req_send>
    8f96:	e137      	b.n	9208 <hci_cmd_handle+0x648>
    8f98:	68a2      	ldr	r2, [r4, #8]
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    8f9a:	7953      	ldrb	r3, [r2, #5]
    8f9c:	7911      	ldrb	r1, [r2, #4]
	u16_t conn_interval_max;
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    8f9e:	7850      	ldrb	r0, [r2, #1]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    8fa0:	021b      	lsls	r3, r3, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8fa2:	430b      	orrs	r3, r1
	u16_t conn_interval_max;
	u16_t conn_latency;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    8fa4:	7811      	ldrb	r1, [r2, #0]
    8fa6:	0200      	lsls	r0, r0, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8fa8:	4308      	orrs	r0, r1
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    8faa:	7a51      	ldrb	r1, [r2, #9]
    8fac:	7a14      	ldrb	r4, [r2, #8]
    8fae:	0209      	lsls	r1, r1, #8

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8fb0:	4321      	orrs	r1, r4
    8fb2:	9101      	str	r1, [sp, #4]
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    8fb4:	7991      	ldrb	r1, [r2, #6]
    8fb6:	79d2      	ldrb	r2, [r2, #7]
    8fb8:	0212      	lsls	r2, r2, #8
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    8fba:	430a      	orrs	r2, r1
    8fbc:	9200      	str	r2, [sp, #0]
    8fbe:	2200      	movs	r2, #0
    8fc0:	0011      	movs	r1, r2
    8fc2:	f007 fea5 	bl	10d10 <ll_conn_update>
    8fc6:	e11f      	b.n	9208 <hci_cmd_handle+0x648>
    8fc8:	68a2      	ldr	r2, [r4, #8]
	u16_t latency;
	u16_t timeout;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    8fca:	7854      	ldrb	r4, [r2, #1]
    8fcc:	7813      	ldrb	r3, [r2, #0]
    8fce:	0224      	lsls	r4, r4, #8
    8fd0:	431c      	orrs	r4, r3
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    8fd2:	7953      	ldrb	r3, [r2, #5]
    8fd4:	7911      	ldrb	r1, [r2, #4]
    8fd6:	021b      	lsls	r3, r3, #8
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8fd8:	430b      	orrs	r3, r1
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);
    8fda:	7a51      	ldrb	r1, [r2, #9]
    8fdc:	7a10      	ldrb	r0, [r2, #8]
    8fde:	0209      	lsls	r1, r1, #8

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8fe0:	4301      	orrs	r1, r0
    8fe2:	9101      	str	r1, [sp, #4]
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
    8fe4:	7991      	ldrb	r1, [r2, #6]
    8fe6:	79d2      	ldrb	r2, [r2, #7]
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8fe8:	0020      	movs	r0, r4
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
    8fea:	0212      	lsls	r2, r2, #8
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    8fec:	430a      	orrs	r2, r1
    8fee:	9200      	str	r2, [sp, #0]
    8ff0:	2102      	movs	r1, #2
    8ff2:	2200      	movs	r2, #0
    8ff4:	f007 fe8c 	bl	10d10 <ll_conn_update>
    8ff8:	e026      	b.n	9048 <hci_cmd_handle+0x488>
    8ffa:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    8ffc:	2400      	movs	r4, #0
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    8ffe:	785d      	ldrb	r5, [r3, #1]
    9000:	781a      	ldrb	r2, [r3, #0]
    9002:	022d      	lsls	r5, r5, #8
    9004:	4315      	orrs	r5, r2
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9006:	2102      	movs	r1, #2
    9008:	789a      	ldrb	r2, [r3, #2]
    900a:	0028      	movs	r0, r5
    900c:	9401      	str	r4, [sp, #4]
    900e:	9400      	str	r4, [sp, #0]
    9010:	0023      	movs	r3, r4
    9012:	f007 fe7d 	bl	10d10 <ll_conn_update>

	rp = cmd_complete(evt, sizeof(*rp));
    9016:	2103      	movs	r1, #3
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	u32_t status;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    9018:	0006      	movs	r6, r0

	rp = cmd_complete(evt, sizeof(*rp));
    901a:	a80d      	add	r0, sp, #52	; 0x34
    901c:	f7ff fc88 	bl	8930 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9020:	42a6      	cmp	r6, r4
    9022:	d000      	beq.n	9026 <hci_cmd_handle+0x466>
    9024:	340c      	adds	r4, #12
	rp->handle = sys_cpu_to_le16(handle);
    9026:	7045      	strb	r5, [r0, #1]
    9028:	0a2d      	lsrs	r5, r5, #8

	handle = sys_le16_to_cpu(cmd->handle);
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    902a:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    902c:	7085      	strb	r5, [r0, #2]
    902e:	e0f3      	b.n	9218 <hci_cmd_handle+0x658>
    9030:	68a3      	ldr	r3, [r4, #8]
	struct bt_hci_rp_le_set_data_len *rp;
	u32_t status;
	u16_t tx_octets;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    9032:	785c      	ldrb	r4, [r3, #1]
    9034:	781a      	ldrb	r2, [r3, #0]
    9036:	0224      	lsls	r4, r4, #8
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
    9038:	78d9      	ldrb	r1, [r3, #3]
	struct bt_hci_rp_le_set_data_len *rp;
	u32_t status;
	u16_t tx_octets;
	u16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    903a:	4314      	orrs	r4, r2
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
    903c:	789a      	ldrb	r2, [r3, #2]
    903e:	0209      	lsls	r1, r1, #8
	/** @todo add reject_ext_ind support in ctrl.c */
	status = ll_length_req_send(handle, tx_octets);
    9040:	4311      	orrs	r1, r2
    9042:	0020      	movs	r0, r4
    9044:	f007 ff37 	bl	10eb6 <ll_length_req_send>
    9048:	0005      	movs	r5, r0

	rp = cmd_complete(evt, sizeof(*rp));
    904a:	2103      	movs	r1, #3
    904c:	a80d      	add	r0, sp, #52	; 0x34
    904e:	f7ff fc6f 	bl	8930 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9052:	2300      	movs	r3, #0
    9054:	429d      	cmp	r5, r3
    9056:	d000      	beq.n	905a <hci_cmd_handle+0x49a>
    9058:	330c      	adds	r3, #12
	rp->handle = sys_cpu_to_le16(handle);
    905a:	7044      	strb	r4, [r0, #1]
    905c:	0a24      	lsrs	r4, r4, #8
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
	/** @todo add reject_ext_ind support in ctrl.c */
	status = ll_length_req_send(handle, tx_octets);

	rp = cmd_complete(evt, sizeof(*rp));
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    905e:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    9060:	7084      	strb	r4, [r0, #2]
    9062:	e0d9      	b.n	9218 <hci_cmd_handle+0x658>

static void le_read_default_data_len(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_default_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    9064:	2105      	movs	r1, #5
    9066:	a80d      	add	r0, sp, #52	; 0x34
    9068:	f7ff fc62 	bl	8930 <cmd_complete>
    906c:	0004      	movs	r4, r0

	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    906e:	1cc1      	adds	r1, r0, #3
    9070:	3001      	adds	r0, #1
    9072:	f007 ff43 	bl	10efc <ll_length_default_get>
    9076:	e038      	b.n	90ea <hci_cmd_handle+0x52a>
    9078:	68a3      	ldr	r3, [r4, #8]
{
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    907a:	78d9      	ldrb	r1, [r3, #3]
    907c:	789a      	ldrb	r2, [r3, #2]
    907e:	7858      	ldrb	r0, [r3, #1]
    9080:	0209      	lsls	r1, r1, #8
    9082:	4311      	orrs	r1, r2
    9084:	781a      	ldrb	r2, [r3, #0]
    9086:	0200      	lsls	r0, r0, #8
    9088:	4310      	orrs	r0, r2
    908a:	f007 ff43 	bl	10f14 <ll_length_default_set>
    908e:	e094      	b.n	91ba <hci_cmd_handle+0x5fa>

static void le_read_max_data_len(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_max_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    9090:	2109      	movs	r1, #9
    9092:	a80d      	add	r0, sp, #52	; 0x34
    9094:	f7ff fc4c 	bl	8930 <cmd_complete>
    9098:	0004      	movs	r4, r0

	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    909a:	1dc3      	adds	r3, r0, #7
    909c:	1d42      	adds	r2, r0, #5
    909e:	1cc1      	adds	r1, r0, #3
    90a0:	3001      	adds	r0, #1
    90a2:	f007 ff41 	bl	10f28 <ll_length_max_get>
    90a6:	e020      	b.n	90ea <hci_cmd_handle+0x52a>
    90a8:	68a0      	ldr	r0, [r4, #8]
{
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    90aa:	0002      	movs	r2, r0
    90ac:	1dc1      	adds	r1, r0, #7
    90ae:	3217      	adds	r2, #23
    90b0:	f008 ff56 	bl	11f60 <ll_rl_add>
    90b4:	e002      	b.n	90bc <hci_cmd_handle+0x4fc>
{
	struct bt_hci_cp_le_rem_dev_from_rl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	status = ll_rl_remove(&cmd->peer_id_addr);
    90b6:	68a0      	ldr	r0, [r4, #8]
    90b8:	f008 ffc0 	bl	1203c <ll_rl_remove>
    90bc:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    90be:	2101      	movs	r1, #1
    90c0:	a80d      	add	r0, sp, #52	; 0x34
    90c2:	f7ff fc35 	bl	8930 <cmd_complete>
	ccst->status = status;
    90c6:	7004      	strb	r4, [r0, #0]
    90c8:	e0a6      	b.n	9218 <hci_cmd_handle+0x658>
}

static void le_clear_rl(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_evt_cc_status *ccst;
	ccst = cmd_complete(evt, sizeof(*ccst));
    90ca:	2101      	movs	r1, #1
    90cc:	a80d      	add	r0, sp, #52	; 0x34
    90ce:	f7ff fc2f 	bl	8930 <cmd_complete>
    90d2:	0004      	movs	r4, r0

	ccst->status = ll_rl_clear();
    90d4:	f008 ff2c 	bl	11f30 <ll_rl_clear>
    90d8:	e032      	b.n	9140 <hci_cmd_handle+0x580>

static void le_read_rl_size(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_rp_le_read_rl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    90da:	2102      	movs	r1, #2
    90dc:	a80d      	add	r0, sp, #52	; 0x34
    90de:	f7ff fc27 	bl	8930 <cmd_complete>
    90e2:	0004      	movs	r4, r0

	rp->rl_size = ll_rl_size_get();
    90e4:	f008 ff22 	bl	11f2c <ll_rl_size_get>
    90e8:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    90ea:	2300      	movs	r3, #0
    90ec:	7023      	strb	r3, [r4, #0]
    90ee:	e093      	b.n	9218 <hci_cmd_handle+0x658>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    90f0:	2207      	movs	r2, #7
    90f2:	68a1      	ldr	r1, [r4, #8]
    90f4:	a80e      	add	r0, sp, #56	; 0x38
    90f6:	f7f8 f935 	bl	1364 <memcpy>
	struct bt_hci_cp_le_read_peer_rpa *cmd = (void *)buf->data;
	struct bt_hci_rp_le_read_peer_rpa *rp;
	bt_addr_le_t peer_id_addr;

	bt_addr_le_copy(&peer_id_addr, &cmd->peer_id_addr);
	rp = cmd_complete(evt, sizeof(*rp));
    90fa:	2107      	movs	r1, #7
    90fc:	a80d      	add	r0, sp, #52	; 0x34
    90fe:	f7ff fc17 	bl	8930 <cmd_complete>
    9102:	0004      	movs	r4, r0

	rp->status = ll_rl_prpa_get(&peer_id_addr, &rp->peer_rpa);
    9104:	1c41      	adds	r1, r0, #1
    9106:	a80e      	add	r0, sp, #56	; 0x38
    9108:	f008 ffca 	bl	120a0 <ll_rl_prpa_get>
    910c:	e018      	b.n	9140 <hci_cmd_handle+0x580>
    910e:	2207      	movs	r2, #7
    9110:	68a1      	ldr	r1, [r4, #8]
    9112:	a80e      	add	r0, sp, #56	; 0x38
    9114:	f7f8 f926 	bl	1364 <memcpy>
	struct bt_hci_cp_le_read_local_rpa *cmd = (void *)buf->data;
	struct bt_hci_rp_le_read_local_rpa *rp;
	bt_addr_le_t peer_id_addr;

	bt_addr_le_copy(&peer_id_addr, &cmd->peer_id_addr);
	rp = cmd_complete(evt, sizeof(*rp));
    9118:	2107      	movs	r1, #7
    911a:	a80d      	add	r0, sp, #52	; 0x34
    911c:	f7ff fc08 	bl	8930 <cmd_complete>
    9120:	0004      	movs	r4, r0

	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    9122:	1c41      	adds	r1, r0, #1
    9124:	a80e      	add	r0, sp, #56	; 0x38
    9126:	f008 ffd3 	bl	120d0 <ll_rl_lrpa_get>
    912a:	e009      	b.n	9140 <hci_cmd_handle+0x580>

static void le_set_addr_res_enable(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u8_t enable = cmd->enable;
    912c:	68a3      	ldr	r3, [r4, #8]

	ccst = cmd_complete(evt, sizeof(*ccst));
    912e:	2101      	movs	r1, #1
    9130:	a80d      	add	r0, sp, #52	; 0x34

static void le_set_addr_res_enable(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u8_t enable = cmd->enable;
    9132:	781d      	ldrb	r5, [r3, #0]

	ccst = cmd_complete(evt, sizeof(*ccst));
    9134:	f7ff fbfc 	bl	8930 <cmd_complete>
    9138:	0004      	movs	r4, r0
	ccst->status = ll_rl_enable(enable);
    913a:	0028      	movs	r0, r5
    913c:	f008 ffe0 	bl	12100 <ll_rl_enable>
    9140:	7020      	strb	r0, [r4, #0]
    9142:	e069      	b.n	9218 <hci_cmd_handle+0x658>

static void le_set_rpa_timeout(struct net_buf *buf, struct net_buf **evt)
{
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    9144:	68a2      	ldr	r2, [r4, #8]
    9146:	7850      	ldrb	r0, [r2, #1]
    9148:	7813      	ldrb	r3, [r2, #0]
    914a:	0200      	lsls	r0, r0, #8

	ll_rl_timeout_set(timeout);
    914c:	4318      	orrs	r0, r3
    914e:	f008 ffef 	bl	12130 <ll_rl_timeout_set>

	ccst = cmd_complete(evt, sizeof(*ccst));
    9152:	2101      	movs	r1, #1
    9154:	a80d      	add	r0, sp, #52	; 0x34
    9156:	f7ff fbeb 	bl	8930 <cmd_complete>
	ccst->status = 0x00;
    915a:	2300      	movs	r3, #0
    915c:	e063      	b.n	9226 <hci_cmd_handle+0x666>
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    915e:	68a3      	ldr	r3, [r4, #8]

	rp = cmd_complete(evt, sizeof(*rp));
    9160:	2105      	movs	r1, #5
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    9162:	785d      	ldrb	r5, [r3, #1]
    9164:	781a      	ldrb	r2, [r3, #0]
    9166:	022d      	lsls	r5, r5, #8

	rp = cmd_complete(evt, sizeof(*rp));
    9168:	a80d      	add	r0, sp, #52	; 0x34
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
	struct bt_hci_rp_le_read_phy *rp;
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    916a:	4315      	orrs	r5, r2

	rp = cmd_complete(evt, sizeof(*rp));
    916c:	f7ff fbe0 	bl	8930 <cmd_complete>

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9170:	1d02      	adds	r2, r0, #4
    9172:	1cc1      	adds	r1, r0, #3
	u16_t handle;
	u32_t status;

	handle = sys_le16_to_cpu(cmd->handle);

	rp = cmd_complete(evt, sizeof(*rp));
    9174:	0004      	movs	r4, r0

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9176:	0028      	movs	r0, r5
    9178:	f007 fedf 	bl	10f3a <ll_phy_get>

	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    917c:	2300      	movs	r3, #0
    917e:	4298      	cmp	r0, r3
    9180:	d000      	beq.n	9184 <hci_cmd_handle+0x5c4>
    9182:	330c      	adds	r3, #12
	rp->handle = sys_cpu_to_le16(handle);
    9184:	7065      	strb	r5, [r4, #1]
    9186:	0a2d      	lsrs	r5, r5, #8

	rp = cmd_complete(evt, sizeof(*rp));

	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);

	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9188:	7023      	strb	r3, [r4, #0]
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
    918a:	78e0      	ldrb	r0, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    918c:	70a5      	strb	r5, [r4, #2]
    918e:	f7f7 f9c9 	bl	524 <__ffssi2>
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    9192:	70e0      	strb	r0, [r4, #3]
    9194:	7920      	ldrb	r0, [r4, #4]
    9196:	f7f7 f9c5 	bl	524 <__ffssi2>
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    919a:	7120      	strb	r0, [r4, #4]
    919c:	e03c      	b.n	9218 <hci_cmd_handle+0x658>
    919e:	68a3      	ldr	r3, [r4, #8]
{
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	u32_t status;

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    91a0:	781a      	ldrb	r2, [r3, #0]
    91a2:	07d1      	lsls	r1, r2, #31
    91a4:	d501      	bpl.n	91aa <hci_cmd_handle+0x5ea>
		cmd->tx_phys = 0x07;
    91a6:	2107      	movs	r1, #7
    91a8:	7059      	strb	r1, [r3, #1]
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    91aa:	0792      	lsls	r2, r2, #30
    91ac:	d501      	bpl.n	91b2 <hci_cmd_handle+0x5f2>
		cmd->rx_phys = 0x07;
    91ae:	2207      	movs	r2, #7
    91b0:	709a      	strb	r2, [r3, #2]
	}

	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    91b2:	7899      	ldrb	r1, [r3, #2]
    91b4:	7858      	ldrb	r0, [r3, #1]
    91b6:	f007 fed7 	bl	10f68 <ll_phy_default_set>
    91ba:	0004      	movs	r4, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    91bc:	2101      	movs	r1, #1
    91be:	a80d      	add	r0, sp, #52	; 0x34
    91c0:	f7ff fbb6 	bl	8930 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    91c4:	2300      	movs	r3, #0
    91c6:	429c      	cmp	r4, r3
    91c8:	d02d      	beq.n	9226 <hci_cmd_handle+0x666>
    91ca:	331e      	adds	r3, #30
    91cc:	e02b      	b.n	9226 <hci_cmd_handle+0x666>
    91ce:	68a1      	ldr	r1, [r4, #8]
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
	u32_t status;
	u16_t handle;
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
    91d0:	7848      	ldrb	r0, [r1, #1]
    91d2:	780b      	ldrb	r3, [r1, #0]
    91d4:	0200      	lsls	r0, r0, #8
    91d6:	4318      	orrs	r0, r3
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    91d8:	798b      	ldrb	r3, [r1, #6]
    91da:	794c      	ldrb	r4, [r1, #5]

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    91dc:	788a      	ldrb	r2, [r1, #2]
	u32_t status;
	u16_t handle;
	u16_t phy_opts;

	handle = sys_le16_to_cpu(cmd->handle);
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    91de:	021b      	lsls	r3, r3, #8
    91e0:	4323      	orrs	r3, r4

	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    91e2:	07d4      	lsls	r4, r2, #31
    91e4:	d501      	bpl.n	91ea <hci_cmd_handle+0x62a>
		cmd->tx_phys = 0x07;
    91e6:	2407      	movs	r4, #7
    91e8:	70cc      	strb	r4, [r1, #3]
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    91ea:	0792      	lsls	r2, r2, #30
    91ec:	d501      	bpl.n	91f2 <hci_cmd_handle+0x632>
		cmd->rx_phys = 0x07;
    91ee:	2207      	movs	r2, #7
    91f0:	710a      	strb	r2, [r1, #4]
	}
	if (phy_opts & 0x03) {
		phy_opts -= 1;
		phy_opts &= 1;
	} else {
		phy_opts = 0;
    91f2:	2200      	movs	r2, #0
		cmd->tx_phys = 0x07;
	}
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
		cmd->rx_phys = 0x07;
	}
	if (phy_opts & 0x03) {
    91f4:	079c      	lsls	r4, r3, #30
    91f6:	d002      	beq.n	91fe <hci_cmd_handle+0x63e>
		phy_opts -= 1;
    91f8:	1e5a      	subs	r2, r3, #1
		phy_opts &= 1;
    91fa:	2301      	movs	r3, #1
    91fc:	401a      	ands	r2, r3
	} else {
		phy_opts = 0;
	}

	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    91fe:	790b      	ldrb	r3, [r1, #4]
    9200:	b2d2      	uxtb	r2, r2
    9202:	78c9      	ldrb	r1, [r1, #3]
    9204:	f007 feba 	bl	10f7c <ll_phy_req_send>
				 cmd->rx_phys);

	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    9208:	2300      	movs	r3, #0
    920a:	4298      	cmp	r0, r3
    920c:	d000      	beq.n	9210 <hci_cmd_handle+0x650>
    920e:	330c      	adds	r3, #12
    9210:	0018      	movs	r0, r3
    9212:	f7ff fb71 	bl	88f8 <cmd_status>
    9216:	900d      	str	r0, [sp, #52]	; 0x34
	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
	}

	return evt;
    9218:	980d      	ldr	r0, [sp, #52]	; 0x34
    921a:	e006      	b.n	922a <hci_cmd_handle+0x66a>
		err = -EINVAL;
		break;
	}

	if (err == -EINVAL) {
		ccst = cmd_complete(&evt, sizeof(*ccst));
    921c:	2101      	movs	r1, #1
    921e:	a80d      	add	r0, sp, #52	; 0x34
    9220:	f7ff fb86 	bl	8930 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    9224:	2301      	movs	r3, #1
    9226:	7003      	strb	r3, [r0, #0]
    9228:	e7f6      	b.n	9218 <hci_cmd_handle+0x658>
	}

	return evt;
}
    922a:	b012      	add	sp, #72	; 0x48
    922c:	bd70      	pop	{r4, r5, r6, pc}
    922e:	46c0      	nop			; (mov r8, r8)

00009230 <hci_acl_handle>:

int hci_acl_handle(struct net_buf *buf)
{
    9230:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_data *pdu_data;
	u16_t handle;
	u8_t flags;
	u16_t len;

	if (buf->len < sizeof(*acl)) {
    9232:	8983      	ldrh	r3, [r0, #12]

	return evt;
}

int hci_acl_handle(struct net_buf *buf)
{
    9234:	b085      	sub	sp, #20
    9236:	0005      	movs	r5, r0
	struct pdu_data *pdu_data;
	u16_t handle;
	u8_t flags;
	u16_t len;

	if (buf->len < sizeof(*acl)) {
    9238:	2b03      	cmp	r3, #3
    923a:	d808      	bhi.n	924e <hci_acl_handle+0x1e>
		BT_ERR("No HCI ACL header");
    923c:	4b30      	ldr	r3, [pc, #192]	; (9300 <hci_acl_handle+0xd0>)
    923e:	4a31      	ldr	r2, [pc, #196]	; (9304 <hci_acl_handle+0xd4>)
    9240:	9301      	str	r3, [sp, #4]
    9242:	4b31      	ldr	r3, [pc, #196]	; (9308 <hci_acl_handle+0xd8>)
    9244:	4931      	ldr	r1, [pc, #196]	; (930c <hci_acl_handle+0xdc>)
    9246:	9300      	str	r3, [sp, #0]
    9248:	4831      	ldr	r0, [pc, #196]	; (9310 <hci_acl_handle+0xe0>)
    924a:	4b32      	ldr	r3, [pc, #200]	; (9314 <hci_acl_handle+0xe4>)
    924c:	e017      	b.n	927e <hci_acl_handle+0x4e>
		return -EINVAL;
	}

	acl = (void *)buf->data;
    924e:	6883      	ldr	r3, [r0, #8]
	len = sys_le16_to_cpu(acl->len);
	handle = sys_le16_to_cpu(acl->handle);
	net_buf_pull(buf, sizeof(*acl));
    9250:	2104      	movs	r1, #4
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
    9252:	78de      	ldrb	r6, [r3, #3]
    9254:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    9256:	785c      	ldrb	r4, [r3, #1]
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
    9258:	0236      	lsls	r6, r6, #8
    925a:	4316      	orrs	r6, r2
	handle = sys_le16_to_cpu(acl->handle);
    925c:	781a      	ldrb	r2, [r3, #0]
    925e:	0224      	lsls	r4, r4, #8
	net_buf_pull(buf, sizeof(*acl));
    9260:	3008      	adds	r0, #8
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
	handle = sys_le16_to_cpu(acl->handle);
    9262:	4314      	orrs	r4, r2
	net_buf_pull(buf, sizeof(*acl));
    9264:	f009 fa6f 	bl	12746 <net_buf_simple_pull>

	if (buf->len < len) {
    9268:	89ab      	ldrh	r3, [r5, #12]
    926a:	42b3      	cmp	r3, r6
    926c:	d20a      	bcs.n	9284 <hci_acl_handle+0x54>
		BT_ERR("Invalid HCI ACL packet length");
    926e:	4b24      	ldr	r3, [pc, #144]	; (9300 <hci_acl_handle+0xd0>)
    9270:	4a24      	ldr	r2, [pc, #144]	; (9304 <hci_acl_handle+0xd4>)
    9272:	9301      	str	r3, [sp, #4]
    9274:	4b24      	ldr	r3, [pc, #144]	; (9308 <hci_acl_handle+0xd8>)
    9276:	4925      	ldr	r1, [pc, #148]	; (930c <hci_acl_handle+0xdc>)
    9278:	9300      	str	r3, [sp, #0]
    927a:	4827      	ldr	r0, [pc, #156]	; (9318 <hci_acl_handle+0xe8>)
    927c:	4b25      	ldr	r3, [pc, #148]	; (9314 <hci_acl_handle+0xe4>)
    927e:	f7f8 fa73 	bl	1768 <printk>
    9282:	e038      	b.n	92f6 <hci_acl_handle+0xc6>
		return -EINVAL;
	}

	/* assigning flags first because handle will be overwritten */
	flags = bt_acl_flags(handle);
    9284:	0b27      	lsrs	r7, r4, #12
	handle = bt_acl_handle(handle);
    9286:	0524      	lsls	r4, r4, #20
    9288:	0d23      	lsrs	r3, r4, #20
    928a:	9303      	str	r3, [sp, #12]

	radio_pdu_node_tx = radio_tx_mem_acquire();
    928c:	f007 ff96 	bl	111bc <radio_tx_mem_acquire>
    9290:	1e04      	subs	r4, r0, #0
	if (!radio_pdu_node_tx) {
    9292:	d10b      	bne.n	92ac <hci_acl_handle+0x7c>
		BT_ERR("Tx Buffer Overflow");
    9294:	4b1a      	ldr	r3, [pc, #104]	; (9300 <hci_acl_handle+0xd0>)
    9296:	4a1b      	ldr	r2, [pc, #108]	; (9304 <hci_acl_handle+0xd4>)
    9298:	9301      	str	r3, [sp, #4]
    929a:	4b1b      	ldr	r3, [pc, #108]	; (9308 <hci_acl_handle+0xd8>)
    929c:	491b      	ldr	r1, [pc, #108]	; (930c <hci_acl_handle+0xdc>)
    929e:	9300      	str	r3, [sp, #0]
    92a0:	481e      	ldr	r0, [pc, #120]	; (931c <hci_acl_handle+0xec>)
    92a2:	4b1c      	ldr	r3, [pc, #112]	; (9314 <hci_acl_handle+0xe4>)
    92a4:	f7f8 fa60 	bl	1768 <printk>
		return -ENOBUFS;
    92a8:	2337      	movs	r3, #55	; 0x37
    92aa:	e025      	b.n	92f8 <hci_acl_handle+0xc8>
    92ac:	2203      	movs	r2, #3
    92ae:	7903      	ldrb	r3, [r0, #4]
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    92b0:	4393      	bics	r3, r2
		BT_ERR("Tx Buffer Overflow");
		return -ENOBUFS;
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    92b2:	2f00      	cmp	r7, #0
    92b4:	d002      	beq.n	92bc <hci_acl_handle+0x8c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
	} else {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    92b6:	2201      	movs	r2, #1
		BT_ERR("Tx Buffer Overflow");
		return -ENOBUFS;
	}

	pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    92b8:	2f02      	cmp	r7, #2
    92ba:	d100      	bne.n	92be <hci_acl_handle+0x8e>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    92bc:	2202      	movs	r2, #2
	} else {
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    92be:	4313      	orrs	r3, r2
    92c0:	7123      	strb	r3, [r4, #4]
	}
	pdu_data->len = len;
    92c2:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    92c4:	0032      	movs	r2, r6
    92c6:	68a9      	ldr	r1, [r5, #8]
    92c8:	1de0      	adds	r0, r4, #7
    92ca:	f7f8 f84b 	bl	1364 <memcpy>

	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    92ce:	0021      	movs	r1, r4
    92d0:	9803      	ldr	r0, [sp, #12]
    92d2:	f007 ff87 	bl	111e4 <radio_tx_mem_enqueue>
		BT_ERR("Invalid Tx Enqueue");
		radio_tx_mem_release(radio_pdu_node_tx);
		return -EINVAL;
	}

	return 0;
    92d6:	2300      	movs	r3, #0
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
	}
	pdu_data->len = len;
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);

	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    92d8:	4298      	cmp	r0, r3
    92da:	d00e      	beq.n	92fa <hci_acl_handle+0xca>
		BT_ERR("Invalid Tx Enqueue");
    92dc:	4b08      	ldr	r3, [pc, #32]	; (9300 <hci_acl_handle+0xd0>)
    92de:	4a09      	ldr	r2, [pc, #36]	; (9304 <hci_acl_handle+0xd4>)
    92e0:	9301      	str	r3, [sp, #4]
    92e2:	4b09      	ldr	r3, [pc, #36]	; (9308 <hci_acl_handle+0xd8>)
    92e4:	4909      	ldr	r1, [pc, #36]	; (930c <hci_acl_handle+0xdc>)
    92e6:	9300      	str	r3, [sp, #0]
    92e8:	480d      	ldr	r0, [pc, #52]	; (9320 <hci_acl_handle+0xf0>)
    92ea:	4b0a      	ldr	r3, [pc, #40]	; (9314 <hci_acl_handle+0xe4>)
    92ec:	f7f8 fa3c 	bl	1768 <printk>
		radio_tx_mem_release(radio_pdu_node_tx);
    92f0:	0020      	movs	r0, r4
    92f2:	f007 ff6d 	bl	111d0 <radio_tx_mem_release>
		return -EINVAL;
    92f6:	2316      	movs	r3, #22
    92f8:	425b      	negs	r3, r3
	}

	return 0;
}
    92fa:	0018      	movs	r0, r3
    92fc:	b005      	add	sp, #20
    92fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9300:	000145b0 	.word	0x000145b0
    9304:	00014570 	.word	0x00014570
    9308:	000145b5 	.word	0x000145b5
    930c:	00014577 	.word	0x00014577
    9310:	000157ce 	.word	0x000157ce
    9314:	00016de7 	.word	0x00016de7
    9318:	000157f0 	.word	0x000157f0
    931c:	0001581e 	.word	0x0001581e
    9320:	00015841 	.word	0x00015841

00009324 <hci_acl_encode>:
	}
}

#if defined(CONFIG_BLUETOOTH_CONN)
void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9324:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9326:	7a03      	ldrb	r3, [r0, #8]
	}
}

#if defined(CONFIG_BLUETOOTH_CONN)
void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    9328:	0004      	movs	r4, r0
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    932a:	079b      	lsls	r3, r3, #30
    932c:	0f9b      	lsrs	r3, r3, #30
    932e:	3b01      	subs	r3, #1
    9330:	b2db      	uxtb	r3, r3
	u16_t handle_flags;
	u16_t handle;
	u8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;
    9332:	88c5      	ldrh	r5, [r0, #6]

	switch (pdu_data->ll_id) {
    9334:	2b01      	cmp	r3, #1
    9336:	d821      	bhi.n	937c <hci_acl_encode+0x58>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    9338:	3108      	adds	r1, #8
    933a:	000e      	movs	r6, r1
    933c:	2104      	movs	r1, #4
    933e:	0030      	movs	r0, r6
    9340:	f009 f9e0 	bl	12704 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    9344:	2303      	movs	r3, #3
    9346:	7a22      	ldrb	r2, [r4, #8]
    9348:	4013      	ands	r3, r2
    934a:	2b02      	cmp	r3, #2
    934c:	d102      	bne.n	9354 <hci_acl_encode+0x30>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    934e:	2380      	movs	r3, #128	; 0x80
    9350:	019b      	lsls	r3, r3, #6
    9352:	e001      	b.n	9358 <hci_acl_encode+0x34>
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    9354:	2380      	movs	r3, #128	; 0x80
    9356:	015b      	lsls	r3, r3, #5
    9358:	431d      	orrs	r5, r3
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    935a:	7005      	strb	r5, [r0, #0]
    935c:	0a2d      	lsrs	r5, r5, #8
    935e:	7045      	strb	r5, [r0, #1]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    9360:	7a63      	ldrb	r3, [r4, #9]
    9362:	7083      	strb	r3, [r0, #2]
    9364:	2300      	movs	r3, #0
    9366:	70c3      	strb	r3, [r0, #3]
		data = (void *)net_buf_add(buf, pdu_data->len);
    9368:	7a61      	ldrb	r1, [r4, #9]
    936a:	0030      	movs	r0, r6
    936c:	f009 f9ca 	bl	12704 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    9370:	0021      	movs	r1, r4
    9372:	7a62      	ldrb	r2, [r4, #9]
    9374:	310b      	adds	r1, #11
    9376:	f7f7 fff5 	bl	1364 <memcpy>
	default:
		LL_ASSERT(0);
		break;
	}

}
    937a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    937c:	4b06      	ldr	r3, [pc, #24]	; (9398 <hci_acl_encode+0x74>)
    937e:	4a07      	ldr	r2, [pc, #28]	; (939c <hci_acl_encode+0x78>)
    9380:	9301      	str	r3, [sp, #4]
    9382:	4b07      	ldr	r3, [pc, #28]	; (93a0 <hci_acl_encode+0x7c>)
    9384:	4907      	ldr	r1, [pc, #28]	; (93a4 <hci_acl_encode+0x80>)
    9386:	9300      	str	r3, [sp, #0]
    9388:	4807      	ldr	r0, [pc, #28]	; (93a8 <hci_acl_encode+0x84>)
    938a:	4b08      	ldr	r3, [pc, #32]	; (93ac <hci_acl_encode+0x88>)
    938c:	f7f8 f9ec 	bl	1768 <printk>
    9390:	b662      	cpsie	i
    9392:	2004      	movs	r0, #4
    9394:	df02      	svc	2
    9396:	46c0      	nop			; (mov r8, r8)
    9398:	000145b0 	.word	0x000145b0
    939c:	00014570 	.word	0x00014570
    93a0:	000145b5 	.word	0x000145b5
    93a4:	00014577 	.word	0x00014577
    93a8:	00014bc5 	.word	0x00014bc5
    93ac:	00016d63 	.word	0x00016d63

000093b0 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    93b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    93b2:	0004      	movs	r4, r0
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    93b4:	0007      	movs	r7, r0

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    93b6:	7900      	ldrb	r0, [r0, #4]

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    93b8:	b091      	sub	sp, #68	; 0x44
    93ba:	000e      	movs	r6, r1
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    93bc:	3708      	adds	r7, #8
			   struct pdu_data *pdu_data, struct net_buf *buf)
{
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;
    93be:	88e5      	ldrh	r5, [r4, #6]
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    93c0:	2801      	cmp	r0, #1
    93c2:	d100      	bne.n	93c6 <hci_evt_encode+0x16>
    93c4:	e188      	b.n	96d8 <hci_evt_encode+0x328>
	u8_t *b = (u8_t *)node_rx;
	u16_t handle;

	handle = node_rx->hdr.handle;

	switch (node_rx->hdr.type) {
    93c6:	3802      	subs	r0, #2
    93c8:	280a      	cmp	r0, #10
    93ca:	d900      	bls.n	93ce <hci_evt_encode+0x1e>
    93cc:	e17e      	b.n	96cc <hci_evt_encode+0x31c>
    93ce:	f7f6 fedd 	bl	18c <__gnu_thumb1_case_uhi>
    93d2:	000b      	.short	0x000b
    93d4:	004c004a 	.word	0x004c004a
    93d8:	008d0052 	.word	0x008d0052
    93dc:	00e400c9 	.word	0x00e400c9
    93e0:	01250110 	.word	0x01250110
    93e4:	01480133 	.word	0x01480133
}

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    93e8:	2207      	movs	r2, #7
    93ea:	49d9      	ldr	r1, [pc, #868]	; (9750 <hci_evt_encode+0x3a0>)
    93ec:	a809      	add	r0, sp, #36	; 0x24
    93ee:	f7f7 ffb9 	bl	1364 <memcpy>
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    93f2:	4bd8      	ldr	r3, [pc, #864]	; (9754 <hci_evt_encode+0x3a4>)
    93f4:	685b      	ldr	r3, [r3, #4]
    93f6:	009b      	lsls	r3, r3, #2
    93f8:	d400      	bmi.n	93fc <hci_evt_encode+0x4c>
    93fa:	e263      	b.n	98c4 <hci_evt_encode+0x514>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    93fc:	4bd6      	ldr	r3, [pc, #856]	; (9758 <hci_evt_encode+0x3a8>)
	struct bt_hci_evt_le_advertising_info *adv_info;
	u8_t data_len;
	u8_t *rssi;
	u8_t info_len;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    93fe:	681b      	ldr	r3, [r3, #0]
    9400:	079b      	lsls	r3, r3, #30
    9402:	d400      	bmi.n	9406 <hci_evt_encode+0x56>
    9404:	e25e      	b.n	98c4 <hci_evt_encode+0x514>
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    9406:	230f      	movs	r3, #15
    9408:	7a22      	ldrb	r2, [r4, #8]
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    940a:	2500      	movs	r5, #0
		}
	}
fill_report:
#endif

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    940c:	4013      	ands	r3, r2
    940e:	2b01      	cmp	r3, #1
    9410:	d002      	beq.n	9418 <hci_evt_encode+0x68>
		data_len = (adv->len - BDADDR_SIZE);
    9412:	7a65      	ldrb	r5, [r4, #9]
    9414:	3d06      	subs	r5, #6
    9416:	b2ed      	uxtb	r5, r5
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9418:	002a      	movs	r2, r5
    941a:	320b      	adds	r2, #11
    941c:	b2d2      	uxtb	r2, r2
    941e:	2102      	movs	r1, #2
    9420:	0030      	movs	r0, r6
    9422:	f7ff faa7 	bl	8974 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    9426:	2301      	movs	r3, #1
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    9428:	0021      	movs	r1, r4
	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    942a:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    942c:	7a23      	ldrb	r3, [r4, #8]
    942e:	aa09      	add	r2, sp, #36	; 0x24
    9430:	071b      	lsls	r3, r3, #28
    9432:	0f1b      	lsrs	r3, r3, #28
    9434:	5cd3      	ldrb	r3, [r2, r3]
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    9436:	0006      	movs	r6, r0
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    9438:	7043      	strb	r3, [r0, #1]
	adv_info->addr.type = adv->tx_addr;
    943a:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    943c:	310a      	adds	r1, #10

	sep->num_reports = 1;
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
    943e:	065b      	lsls	r3, r3, #25
    9440:	0fdb      	lsrs	r3, r3, #31
    9442:	7083      	strb	r3, [r0, #2]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    9444:	2206      	movs	r2, #6
    9446:	3003      	adds	r0, #3
    9448:	f7f7 ff8c 	bl	1364 <memcpy>
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    944c:	0039      	movs	r1, r7
	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
    944e:	7275      	strb	r5, [r6, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    9450:	360a      	adds	r6, #10
    9452:	3108      	adds	r1, #8
    9454:	002a      	movs	r2, r5
    9456:	0030      	movs	r0, r6
    9458:	f7f7 ff84 	bl	1364 <memcpy>
	/* RSSI */
	rssi = &adv_info->data[0] + data_len;
	*rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    945c:	7a61      	ldrb	r1, [r4, #9]
    945e:	1864      	adds	r4, r4, r1
    9460:	7aa3      	ldrb	r3, [r4, #10]
    9462:	5573      	strb	r3, [r6, r5]
    9464:	e22e      	b.n	98c4 <hci_evt_encode+0x514>
}

static void le_adv_ext_1M_report(struct pdu_data *pdu_data, u8_t *b,
				 struct net_buf *buf)
{
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    9466:	2201      	movs	r2, #1
    9468:	e000      	b.n	946c <hci_evt_encode+0xbc>
}

static void le_adv_ext_coded_report(struct pdu_data *pdu_data, u8_t *b,
				    struct net_buf *buf)
{
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    946a:	2204      	movs	r2, #4
    946c:	0021      	movs	r1, r4
    946e:	0038      	movs	r0, r7
    9470:	f7ff fb0a 	bl	8a88 <le_adv_ext_report.isra.51>
    9474:	e226      	b.n	98c4 <hci_evt_encode+0x514>
    9476:	0025      	movs	r5, r4
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9478:	4bb6      	ldr	r3, [pc, #728]	; (9754 <hci_evt_encode+0x3a4>)
    947a:	350a      	adds	r5, #10
    947c:	685b      	ldr	r3, [r3, #4]
    947e:	009b      	lsls	r3, r3, #2
    9480:	d503      	bpl.n	948a <hci_evt_encode+0xda>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    9482:	4bb5      	ldr	r3, [pc, #724]	; (9758 <hci_evt_encode+0x3a8>)
	struct pdu_adv *adv = (struct pdu_adv *)pdu_data;
	struct bt_hci_evt_le_scan_req_received *sep;

	/* TODO: fill handle when Adv Ext. feature is implemented. */

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9484:	681b      	ldr	r3, [r3, #0]
    9486:	035b      	lsls	r3, r3, #13
    9488:	d421      	bmi.n	94ce <hci_evt_encode+0x11e>
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    948a:	201d      	movs	r0, #29
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    948c:	7a23      	ldrb	r3, [r4, #8]
    948e:	ae07      	add	r6, sp, #28
    9490:	065b      	lsls	r3, r3, #25
    9492:	0fdb      	lsrs	r3, r3, #31
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    9494:	2206      	movs	r2, #6
    9496:	0029      	movs	r1, r5
    9498:	4468      	add	r0, sp
		bt_addr_le_t addr;
		u8_t handle;
		u8_t rssi;

		handle = 0;
		addr.type = adv->tx_addr;
    949a:	7033      	strb	r3, [r6, #0]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    949c:	f7f7 ff62 	bl	1364 <memcpy>
		       sizeof(bt_addr_t));
		rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    94a0:	7a61      	ldrb	r1, [r4, #9]
			 offsetof(struct pdu_adv, payload) + adv->len];

		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    94a2:	0030      	movs	r0, r6

		handle = 0;
		addr.type = adv->tx_addr;
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
		       sizeof(bt_addr_t));
		rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    94a4:	1864      	adds	r4, r4, r1
    94a6:	7aa5      	ldrb	r5, [r4, #10]
			 offsetof(struct pdu_adv, payload) + adv->len];

		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    94a8:	ac09      	add	r4, sp, #36	; 0x24
    94aa:	0021      	movs	r1, r4
    94ac:	f7ff faba 	bl	8a24 <bt_addr_le_to_str.constprop.55>

		BT_WARN("handle: %d, addr: %s, rssi: -%d dB.",
    94b0:	4baa      	ldr	r3, [pc, #680]	; (975c <hci_evt_encode+0x3ac>)
    94b2:	9503      	str	r5, [sp, #12]
    94b4:	9304      	str	r3, [sp, #16]
    94b6:	2300      	movs	r3, #0
    94b8:	9301      	str	r3, [sp, #4]
    94ba:	4ba9      	ldr	r3, [pc, #676]	; (9760 <hci_evt_encode+0x3b0>)
    94bc:	9402      	str	r4, [sp, #8]
    94be:	9300      	str	r3, [sp, #0]
    94c0:	4aa8      	ldr	r2, [pc, #672]	; (9764 <hci_evt_encode+0x3b4>)
    94c2:	4ba9      	ldr	r3, [pc, #676]	; (9768 <hci_evt_encode+0x3b8>)
    94c4:	49a9      	ldr	r1, [pc, #676]	; (976c <hci_evt_encode+0x3bc>)
    94c6:	48aa      	ldr	r0, [pc, #680]	; (9770 <hci_evt_encode+0x3c0>)
    94c8:	f7f8 f94e 	bl	1768 <printk>
    94cc:	e1fa      	b.n	98c4 <hci_evt_encode+0x514>
			handle, addr_str, rssi);

		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    94ce:	2208      	movs	r2, #8
    94d0:	2113      	movs	r1, #19
    94d2:	0030      	movs	r0, r6
    94d4:	f7ff fa4e 	bl	8974 <meta_evt>
	sep->handle = 0;
    94d8:	2300      	movs	r3, #0
    94da:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    94dc:	7a23      	ldrb	r3, [r4, #8]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    94de:	2206      	movs	r2, #6
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
	sep->handle = 0;
	sep->addr.type = adv->tx_addr;
    94e0:	065b      	lsls	r3, r3, #25
    94e2:	0fdb      	lsrs	r3, r3, #31
    94e4:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    94e6:	0029      	movs	r1, r5
    94e8:	3002      	adds	r0, #2
    94ea:	e124      	b.n	9736 <hci_evt_encode+0x386>
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    94ec:	4b99      	ldr	r3, [pc, #612]	; (9754 <hci_evt_encode+0x3a4>)
    94ee:	685b      	ldr	r3, [r3, #4]
    94f0:	009b      	lsls	r3, r3, #2
    94f2:	d400      	bmi.n	94f6 <hci_evt_encode+0x146>
    94f4:	e1e6      	b.n	98c4 <hci_evt_encode+0x514>
    94f6:	2101      	movs	r1, #1
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE)) {
    94f8:	4b97      	ldr	r3, [pc, #604]	; (9758 <hci_evt_encode+0x3a8>)
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    94fa:	681b      	ldr	r3, [r3, #0]
    94fc:	420b      	tst	r3, r1
    94fe:	d100      	bne.n	9502 <hci_evt_encode+0x152>
    9500:	e1e0      	b.n	98c4 <hci_evt_encode+0x514>
		return;
	}

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    9502:	2212      	movs	r2, #18
    9504:	0030      	movs	r0, r6
    9506:	f7ff fa35 	bl	8974 <meta_evt>

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    950a:	0021      	movs	r1, r4
		return;
	}

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    950c:	0006      	movs	r6, r0

	sep->status = radio_cc->status;
    950e:	0027      	movs	r7, r4
    9510:	7ae3      	ldrb	r3, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    9512:	7045      	strb	r5, [r0, #1]
    9514:	0a2d      	lsrs	r5, r5, #8

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
    9516:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9518:	7085      	strb	r5, [r0, #2]
	sep->role = radio_cc->role;
    951a:	7b23      	ldrb	r3, [r4, #12]
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    951c:	2206      	movs	r2, #6

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
    951e:	70c3      	strb	r3, [r0, #3]
	sep->peer_addr.type = radio_cc->peer_addr_type;
    9520:	7b63      	ldrb	r3, [r4, #13]
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    9522:	310e      	adds	r1, #14
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
    9524:	7103      	strb	r3, [r0, #4]
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    9526:	3005      	adds	r0, #5
    9528:	f7f7 ff1c 	bl	1364 <memcpy>
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
    952c:	7f63      	ldrb	r3, [r4, #29]
    952e:	7f22      	ldrb	r2, [r4, #28]
    9530:	021b      	lsls	r3, r3, #8
    9532:	4313      	orrs	r3, r2
    9534:	72f3      	strb	r3, [r6, #11]
    9536:	0a1b      	lsrs	r3, r3, #8
    9538:	7333      	strb	r3, [r6, #12]
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
    953a:	7fe3      	ldrb	r3, [r4, #31]
    953c:	7fa2      	ldrb	r2, [r4, #30]
    953e:	021b      	lsls	r3, r3, #8
    9540:	4313      	orrs	r3, r2
    9542:	7373      	strb	r3, [r6, #13]
    9544:	0a1b      	lsrs	r3, r3, #8

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));

	sep->status = radio_cc->status;
    9546:	370b      	adds	r7, #11
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
    9548:	73b3      	strb	r3, [r6, #14]
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    954a:	7dbb      	ldrb	r3, [r7, #22]
    954c:	7d7a      	ldrb	r2, [r7, #21]
    954e:	021b      	lsls	r3, r3, #8
    9550:	4313      	orrs	r3, r2
    9552:	73f3      	strb	r3, [r6, #15]
    9554:	0a1b      	lsrs	r3, r3, #8
    9556:	7433      	strb	r3, [r6, #16]
	sep->clock_accuracy = radio_cc->mca;
    9558:	7dfb      	ldrb	r3, [r7, #23]

	conn_count++;
    955a:	4a86      	ldr	r2, [pc, #536]	; (9774 <hci_evt_encode+0x3c4>)
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
	sep->clock_accuracy = radio_cc->mca;
    955c:	7473      	strb	r3, [r6, #17]

	conn_count++;
    955e:	6813      	ldr	r3, [r2, #0]
    9560:	3301      	adds	r3, #1
    9562:	e018      	b.n	9596 <hci_evt_encode+0x1e6>
static void disconn_complete(struct pdu_data *pdu_data, u16_t handle,
			     struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *ep;

	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9564:	4b7b      	ldr	r3, [pc, #492]	; (9754 <hci_evt_encode+0x3a4>)
    9566:	681b      	ldr	r3, [r3, #0]
    9568:	06db      	lsls	r3, r3, #27
    956a:	d400      	bmi.n	956e <hci_evt_encode+0x1be>
    956c:	e1aa      	b.n	98c4 <hci_evt_encode+0x514>
		return;
	}

	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    956e:	2204      	movs	r2, #4
    9570:	2105      	movs	r1, #5
    9572:	0030      	movs	r0, r6
    9574:	f7ff f9b6 	bl	88e4 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9578:	0030      	movs	r0, r6
    957a:	2104      	movs	r1, #4
    957c:	3008      	adds	r0, #8
    957e:	f009 f8c1 	bl	12704 <net_buf_simple_add>

	ep->status = 0x00;
    9582:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    9584:	7045      	strb	r5, [r0, #1]
    9586:	0a2d      	lsrs	r5, r5, #8
	}

	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
    9588:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    958a:	7085      	strb	r5, [r0, #2]
	ep->reason = *((u8_t *)pdu_data);
    958c:	7a23      	ldrb	r3, [r4, #8]

	conn_count--;
    958e:	4a79      	ldr	r2, [pc, #484]	; (9774 <hci_evt_encode+0x3c4>)
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->reason = *((u8_t *)pdu_data);
    9590:	70c3      	strb	r3, [r0, #3]

	conn_count--;
    9592:	6813      	ldr	r3, [r2, #0]
    9594:	3b01      	subs	r3, #1
    9596:	6013      	str	r3, [r2, #0]
    9598:	e194      	b.n	98c4 <hci_evt_encode+0x514>
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_update_complete *sep;
	struct radio_le_conn_update_cmplt *radio_cu;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    959a:	4b6e      	ldr	r3, [pc, #440]	; (9754 <hci_evt_encode+0x3a4>)
    959c:	685b      	ldr	r3, [r3, #4]
    959e:	009b      	lsls	r3, r3, #2
    95a0:	d400      	bmi.n	95a4 <hci_evt_encode+0x1f4>
    95a2:	e18f      	b.n	98c4 <hci_evt_encode+0x514>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    95a4:	4b6c      	ldr	r3, [pc, #432]	; (9758 <hci_evt_encode+0x3a8>)
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_update_complete *sep;
	struct radio_le_conn_update_cmplt *radio_cu;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95a6:	681b      	ldr	r3, [r3, #0]
    95a8:	075b      	lsls	r3, r3, #29
    95aa:	d400      	bmi.n	95ae <hci_evt_encode+0x1fe>
    95ac:	e18a      	b.n	98c4 <hci_evt_encode+0x514>
	}

	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    95ae:	2209      	movs	r2, #9
    95b0:	2103      	movs	r1, #3
    95b2:	0030      	movs	r0, r6
    95b4:	f7ff f9de 	bl	8974 <meta_evt>

	sep->status = radio_cu->status;
    95b8:	0023      	movs	r3, r4
    95ba:	7ae2      	ldrb	r2, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    95bc:	7045      	strb	r5, [r0, #1]
    95be:	0a2d      	lsrs	r5, r5, #8
	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_cu->status;
    95c0:	7002      	strb	r2, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    95c2:	7085      	strb	r5, [r0, #2]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    95c4:	7b62      	ldrb	r2, [r4, #13]
    95c6:	7b21      	ldrb	r1, [r4, #12]
    95c8:	0212      	lsls	r2, r2, #8
    95ca:	430a      	orrs	r2, r1
    95cc:	70c2      	strb	r2, [r0, #3]
    95ce:	0a12      	lsrs	r2, r2, #8
    95d0:	7102      	strb	r2, [r0, #4]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    95d2:	7be2      	ldrb	r2, [r4, #15]
    95d4:	7ba1      	ldrb	r1, [r4, #14]
    95d6:	0212      	lsls	r2, r2, #8
    95d8:	430a      	orrs	r2, r1
    95da:	7142      	strb	r2, [r0, #5]
    95dc:	0a12      	lsrs	r2, r2, #8
    95de:	7182      	strb	r2, [r0, #6]
	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_cu->status;
    95e0:	330b      	adds	r3, #11
	sep->handle = sys_cpu_to_le16(handle);
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    95e2:	799b      	ldrb	r3, [r3, #6]
    95e4:	7c22      	ldrb	r2, [r4, #16]
    95e6:	021b      	lsls	r3, r3, #8
    95e8:	4313      	orrs	r3, r2
    95ea:	71c3      	strb	r3, [r0, #7]
    95ec:	0a1b      	lsrs	r3, r3, #8
    95ee:	7203      	strb	r3, [r0, #8]
    95f0:	e168      	b.n	98c4 <hci_evt_encode+0x514>
static void enc_refresh_complete(struct pdu_data *pdu_data, u16_t handle,
				 struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_key_refresh_complete *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    95f2:	4b58      	ldr	r3, [pc, #352]	; (9754 <hci_evt_encode+0x3a4>)
    95f4:	685b      	ldr	r3, [r3, #4]
    95f6:	041b      	lsls	r3, r3, #16
    95f8:	d400      	bmi.n	95fc <hci_evt_encode+0x24c>
    95fa:	e163      	b.n	98c4 <hci_evt_encode+0x514>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    95fc:	2203      	movs	r2, #3
    95fe:	2130      	movs	r1, #48	; 0x30
    9600:	0030      	movs	r0, r6
    9602:	f7ff f96f 	bl	88e4 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9606:	0030      	movs	r0, r6
    9608:	2103      	movs	r1, #3
    960a:	3008      	adds	r0, #8
    960c:	f009 f87a 	bl	12704 <net_buf_simple_add>

	ep->status = 0x00;
    9610:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    9612:	7045      	strb	r5, [r0, #1]
    9614:	0a2d      	lsrs	r5, r5, #8
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
    9616:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9618:	7085      	strb	r5, [r0, #2]
    961a:	e153      	b.n	98c4 <hci_evt_encode+0x514>
static void auth_payload_timeout_exp(struct pdu_data *pdu_data, u16_t handle,
				     struct net_buf *buf)
{
	struct bt_hci_evt_auth_payload_timeout_exp *ep;

	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    961c:	2202      	movs	r2, #2
    961e:	2157      	movs	r1, #87	; 0x57
    9620:	0030      	movs	r0, r6
    9622:	f7ff f95f 	bl	88e4 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9626:	0030      	movs	r0, r6
    9628:	2102      	movs	r1, #2
    962a:	3008      	adds	r0, #8
    962c:	f009 f86a 	bl	12704 <net_buf_simple_add>

	ep->handle = sys_cpu_to_le16(handle);
    9630:	7005      	strb	r5, [r0, #0]
    9632:	0a2d      	lsrs	r5, r5, #8
    9634:	7045      	strb	r5, [r0, #1]
    9636:	e145      	b.n	98c4 <hci_evt_encode+0x514>
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_chan_sel_algo *sep;
	struct radio_le_chan_sel_algo *radio_le_chan_sel_algo;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9638:	4b46      	ldr	r3, [pc, #280]	; (9754 <hci_evt_encode+0x3a4>)
    963a:	685b      	ldr	r3, [r3, #4]
    963c:	009b      	lsls	r3, r3, #2
    963e:	d400      	bmi.n	9642 <hci_evt_encode+0x292>
    9640:	e140      	b.n	98c4 <hci_evt_encode+0x514>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    9642:	4b45      	ldr	r3, [pc, #276]	; (9758 <hci_evt_encode+0x3a8>)
			     struct net_buf *buf)
{
	struct bt_hci_evt_le_chan_sel_algo *sep;
	struct radio_le_chan_sel_algo *radio_le_chan_sel_algo;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9644:	681b      	ldr	r3, [r3, #0]
    9646:	031b      	lsls	r3, r3, #12
    9648:	d400      	bmi.n	964c <hci_evt_encode+0x29c>
    964a:	e13b      	b.n	98c4 <hci_evt_encode+0x514>
	}

	radio_le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
					pdu_data->payload.lldata;

	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    964c:	2203      	movs	r2, #3
    964e:	2114      	movs	r1, #20
    9650:	0030      	movs	r0, r6
    9652:	f7ff f98f 	bl	8974 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    9656:	7005      	strb	r5, [r0, #0]
    9658:	0a2d      	lsrs	r5, r5, #8
    965a:	7045      	strb	r5, [r0, #1]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    965c:	7ae3      	ldrb	r3, [r4, #11]
    965e:	7083      	strb	r3, [r0, #2]
    9660:	e130      	b.n	98c4 <hci_evt_encode+0x514>
    9662:	0027      	movs	r7, r4
	struct radio_le_phy_upd_cmplt *radio_le_phy_upd_cmplt;

	radio_le_phy_upd_cmplt = (struct radio_le_phy_upd_cmplt *)
				 pdu_data->payload.lldata;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9664:	4b3b      	ldr	r3, [pc, #236]	; (9754 <hci_evt_encode+0x3a4>)
    9666:	370b      	adds	r7, #11
    9668:	685b      	ldr	r3, [r3, #4]
    966a:	009b      	lsls	r3, r3, #2
    966c:	d503      	bpl.n	9676 <hci_evt_encode+0x2c6>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    966e:	4b3a      	ldr	r3, [pc, #232]	; (9758 <hci_evt_encode+0x3a8>)
	struct radio_le_phy_upd_cmplt *radio_le_phy_upd_cmplt;

	radio_le_phy_upd_cmplt = (struct radio_le_phy_upd_cmplt *)
				 pdu_data->payload.lldata;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9670:	681b      	ldr	r3, [r3, #0]
    9672:	051b      	lsls	r3, r3, #20
    9674:	d416      	bmi.n	96a4 <hci_evt_encode+0x2f4>
    9676:	7878      	ldrb	r0, [r7, #1]
    9678:	f7f6 ff54 	bl	524 <__ffssi2>
    967c:	0006      	movs	r6, r0
    967e:	78b8      	ldrb	r0, [r7, #2]
    9680:	f7f6 ff50 	bl	524 <__ffssi2>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    9684:	4b35      	ldr	r3, [pc, #212]	; (975c <hci_evt_encode+0x3ac>)
    9686:	9004      	str	r0, [sp, #16]
    9688:	9305      	str	r3, [sp, #20]
    968a:	9603      	str	r6, [sp, #12]
    968c:	7ae3      	ldrb	r3, [r4, #11]
    968e:	4a35      	ldr	r2, [pc, #212]	; (9764 <hci_evt_encode+0x3b4>)
    9690:	9302      	str	r3, [sp, #8]
    9692:	4b33      	ldr	r3, [pc, #204]	; (9760 <hci_evt_encode+0x3b0>)
    9694:	9501      	str	r5, [sp, #4]
    9696:	9300      	str	r3, [sp, #0]
    9698:	4934      	ldr	r1, [pc, #208]	; (976c <hci_evt_encode+0x3bc>)
    969a:	4b37      	ldr	r3, [pc, #220]	; (9778 <hci_evt_encode+0x3c8>)
    969c:	4837      	ldr	r0, [pc, #220]	; (977c <hci_evt_encode+0x3cc>)
    969e:	f7f8 f863 	bl	1768 <printk>
    96a2:	e10f      	b.n	98c4 <hci_evt_encode+0x514>
			find_lsb_set(radio_le_phy_upd_cmplt->tx),
			find_lsb_set(radio_le_phy_upd_cmplt->rx));
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    96a4:	2205      	movs	r2, #5
    96a6:	210c      	movs	r1, #12
    96a8:	0030      	movs	r0, r6
    96aa:	f7ff f963 	bl	8974 <meta_evt>

	sep->status = radio_le_phy_upd_cmplt->status;
    96ae:	7ae3      	ldrb	r3, [r4, #11]
	sep->handle = sys_cpu_to_le16(handle);
    96b0:	7045      	strb	r5, [r0, #1]
    96b2:	0a2d      	lsrs	r5, r5, #8
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));

	sep->status = radio_le_phy_upd_cmplt->status;
    96b4:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    96b6:	7085      	strb	r5, [r0, #2]
			find_lsb_set(radio_le_phy_upd_cmplt->tx),
			find_lsb_set(radio_le_phy_upd_cmplt->rx));
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    96b8:	0006      	movs	r6, r0
    96ba:	7878      	ldrb	r0, [r7, #1]
    96bc:	f7f6 ff32 	bl	524 <__ffssi2>

	sep->status = radio_le_phy_upd_cmplt->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    96c0:	70f0      	strb	r0, [r6, #3]
    96c2:	78b8      	ldrb	r0, [r7, #2]
    96c4:	f7f6 ff2e 	bl	524 <__ffssi2>
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    96c8:	7130      	strb	r0, [r6, #4]
    96ca:	e0fb      	b.n	98c4 <hci_evt_encode+0x514>
			pdu_data->payload.profile.max);
		return;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	default:
		LL_ASSERT(0);
    96cc:	4b23      	ldr	r3, [pc, #140]	; (975c <hci_evt_encode+0x3ac>)
    96ce:	9301      	str	r3, [sp, #4]
    96d0:	4b2b      	ldr	r3, [pc, #172]	; (9780 <hci_evt_encode+0x3d0>)
    96d2:	9300      	str	r3, [sp, #0]
    96d4:	4b2b      	ldr	r3, [pc, #172]	; (9784 <hci_evt_encode+0x3d4>)
    96d6:	e0ed      	b.n	98b4 <hci_evt_encode+0x504>
static void encode_data_ctrl(struct radio_pdu_node_rx *node_rx,
			     struct pdu_data *pdu_data, struct net_buf *buf)
{
	u16_t handle = node_rx->hdr.handle;

	switch (pdu_data->payload.llctrl.opcode) {
    96d8:	7ae0      	ldrb	r0, [r4, #11]
    96da:	3803      	subs	r0, #3
    96dc:	2812      	cmp	r0, #18
    96de:	d900      	bls.n	96e2 <hci_evt_encode+0x332>
    96e0:	e0e3      	b.n	98aa <hci_evt_encode+0x4fa>
    96e2:	f7f6 fd49 	bl	178 <__gnu_thumb1_case_uqi>
    96e6:	e20a      	.short	0xe20a
    96e8:	e2cc2be2 	.word	0xe2cc2be2
    96ec:	51e2e22f 	.word	0x51e2e22f
    96f0:	e277e271 	.word	0xe277e271
    96f4:	9fe2e2e2 	.word	0x9fe2e2e2
    96f8:	9f          	.byte	0x9f
    96f9:	00          	.byte	0x00
static void le_ltk_request(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    96fa:	4b16      	ldr	r3, [pc, #88]	; (9754 <hci_evt_encode+0x3a4>)
    96fc:	685b      	ldr	r3, [r3, #4]
    96fe:	009b      	lsls	r3, r3, #2
    9700:	d400      	bmi.n	9704 <hci_evt_encode+0x354>
    9702:	e0df      	b.n	98c4 <hci_evt_encode+0x514>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    9704:	4b14      	ldr	r3, [pc, #80]	; (9758 <hci_evt_encode+0x3a8>)
static void le_ltk_request(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9706:	681b      	ldr	r3, [r3, #0]
    9708:	06db      	lsls	r3, r3, #27
    970a:	d400      	bmi.n	970e <hci_evt_encode+0x35e>
    970c:	e0da      	b.n	98c4 <hci_evt_encode+0x514>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    970e:	220c      	movs	r2, #12
    9710:	2105      	movs	r1, #5
    9712:	0030      	movs	r0, r6
    9714:	f7ff f92e 	bl	8974 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    9718:	0021      	movs	r1, r4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    971a:	0006      	movs	r6, r0

	sep->handle = sys_cpu_to_le16(handle);
    971c:	7005      	strb	r5, [r0, #0]
    971e:	0a2d      	lsrs	r5, r5, #8
    9720:	7045      	strb	r5, [r0, #1]
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    9722:	310c      	adds	r1, #12
    9724:	2208      	movs	r2, #8
    9726:	3002      	adds	r0, #2
    9728:	f7f7 fe1c 	bl	1364 <memcpy>
	       sizeof(u64_t));
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    972c:	0021      	movs	r1, r4
    972e:	0030      	movs	r0, r6
    9730:	2202      	movs	r2, #2
    9732:	3114      	adds	r1, #20
    9734:	300a      	adds	r0, #10
    9736:	f7f7 fe15 	bl	1364 <memcpy>
    973a:	e0c3      	b.n	98c4 <hci_evt_encode+0x514>
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		le_ltk_request(pdu_data, handle, buf);
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		encrypt_change(0x00, handle, buf);
    973c:	000a      	movs	r2, r1
    973e:	2000      	movs	r0, #0
    9740:	0029      	movs	r1, r5
    9742:	e044      	b.n	97ce <hci_evt_encode+0x41e>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_FEATURE_RSP:
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    9744:	000b      	movs	r3, r1
    9746:	002a      	movs	r2, r5
    9748:	0039      	movs	r1, r7
    974a:	2000      	movs	r0, #0
    974c:	e09e      	b.n	988c <hci_evt_encode+0x4dc>
    974e:	46c0      	nop			; (mov r8, r8)
    9750:	000141db 	.word	0x000141db
    9754:	20000538 	.word	0x20000538
    9758:	20000540 	.word	0x20000540
    975c:	000145b0 	.word	0x000145b0
    9760:	000145fb 	.word	0x000145fb
    9764:	000145bd 	.word	0x000145bd
    9768:	00016dd2 	.word	0x00016dd2
    976c:	00014577 	.word	0x00014577
    9770:	00015864 	.word	0x00015864
    9774:	20000fbc 	.word	0x20000fbc
    9778:	00016daf 	.word	0x00016daf
    977c:	00015898 	.word	0x00015898
    9780:	000145b5 	.word	0x000145b5
    9784:	00016d54 	.word	0x00016d54
static void remote_version_info(struct pdu_data *pdu_data, u16_t handle,
				struct net_buf *buf)
{
	struct bt_hci_evt_remote_version_info *ep;

	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    9788:	4b4f      	ldr	r3, [pc, #316]	; (98c8 <hci_evt_encode+0x518>)
    978a:	681b      	ldr	r3, [r3, #0]
    978c:	051b      	lsls	r3, r3, #20
    978e:	d400      	bmi.n	9792 <hci_evt_encode+0x3e2>
    9790:	e098      	b.n	98c4 <hci_evt_encode+0x514>
		return;
	}

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    9792:	2207      	movs	r2, #7
    9794:	210c      	movs	r1, #12
    9796:	0030      	movs	r0, r6
    9798:	f7ff f8a4 	bl	88e4 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    979c:	0030      	movs	r0, r6
    979e:	2107      	movs	r1, #7
    97a0:	3008      	adds	r0, #8
    97a2:	f008 ffaf 	bl	12704 <net_buf_simple_add>

	ep->status = 0x00;
    97a6:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    97a8:	7045      	strb	r5, [r0, #1]
    97aa:	0a2d      	lsrs	r5, r5, #8
	}

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
    97ac:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    97ae:	7085      	strb	r5, [r0, #2]
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
    97b0:	7b23      	ldrb	r3, [r4, #12]
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
    97b2:	70c3      	strb	r3, [r0, #3]
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
    97b4:	7ba3      	ldrb	r3, [r4, #14]
    97b6:	7b62      	ldrb	r2, [r4, #13]
    97b8:	021b      	lsls	r3, r3, #8
    97ba:	4313      	orrs	r3, r2

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
    97bc:	7103      	strb	r3, [r0, #4]
    97be:	0a1b      	lsrs	r3, r3, #8
    97c0:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
	ep->subversion =
	      pdu_data->payload.llctrl.ctrldata.version_ind.sub_version_number;
    97c2:	7be3      	ldrb	r3, [r4, #15]
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
	ep->subversion =
    97c4:	7183      	strb	r3, [r0, #6]
    97c6:	e07d      	b.n	98c4 <hci_evt_encode+0x514>
		remote_version_info(pdu_data, handle, buf);
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    97c8:	000a      	movs	r2, r1
    97ca:	0029      	movs	r1, r5
    97cc:	7b20      	ldrb	r0, [r4, #12]
    97ce:	f7ff f8e5 	bl	899c <encrypt_change>
    97d2:	e077      	b.n	98c4 <hci_evt_encode+0x514>
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97d4:	4b3c      	ldr	r3, [pc, #240]	; (98c8 <hci_evt_encode+0x518>)
    97d6:	685b      	ldr	r3, [r3, #4]
    97d8:	009b      	lsls	r3, r3, #2
    97da:	d573      	bpl.n	98c4 <hci_evt_encode+0x514>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    97dc:	4b3b      	ldr	r3, [pc, #236]	; (98cc <hci_evt_encode+0x51c>)
static void le_conn_param_req(struct pdu_data *pdu_data, u16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    97de:	681b      	ldr	r3, [r3, #0]
    97e0:	069b      	lsls	r3, r3, #26
    97e2:	d56f      	bpl.n	98c4 <hci_evt_encode+0x514>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    97e4:	220a      	movs	r2, #10
    97e6:	2106      	movs	r1, #6
    97e8:	0030      	movs	r0, r6
    97ea:	f7ff f8c3 	bl	8974 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    97ee:	7005      	strb	r5, [r0, #0]
    97f0:	0a2d      	lsrs	r5, r5, #8
    97f2:	7045      	strb	r5, [r0, #1]
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    97f4:	7b63      	ldrb	r3, [r4, #13]
    97f6:	7b22      	ldrb	r2, [r4, #12]
    97f8:	021b      	lsls	r3, r3, #8
    97fa:	4313      	orrs	r3, r2
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
    97fc:	7083      	strb	r3, [r0, #2]
    97fe:	0a1b      	lsrs	r3, r3, #8
    9800:	70c3      	strb	r3, [r0, #3]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    9802:	7be3      	ldrb	r3, [r4, #15]
    9804:	7ba2      	ldrb	r2, [r4, #14]
    9806:	021b      	lsls	r3, r3, #8
    9808:	4313      	orrs	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
    980a:	7103      	strb	r3, [r0, #4]
    980c:	0a1b      	lsrs	r3, r3, #8
    980e:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    9810:	7c63      	ldrb	r3, [r4, #17]
    9812:	7c22      	ldrb	r2, [r4, #16]
    9814:	021b      	lsls	r3, r3, #8
    9816:	4313      	orrs	r3, r2
    9818:	7183      	strb	r3, [r0, #6]
    981a:	0a1b      	lsrs	r3, r3, #8
    981c:	71c3      	strb	r3, [r0, #7]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    981e:	7ca2      	ldrb	r2, [r4, #18]
    9820:	7ce3      	ldrb	r3, [r4, #19]
    9822:	e026      	b.n	9872 <hci_evt_encode+0x4c2>
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9824:	4b28      	ldr	r3, [pc, #160]	; (98c8 <hci_evt_encode+0x518>)
    9826:	685b      	ldr	r3, [r3, #4]
    9828:	009b      	lsls	r3, r3, #2
    982a:	d54b      	bpl.n	98c4 <hci_evt_encode+0x514>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    982c:	4b27      	ldr	r3, [pc, #156]	; (98cc <hci_evt_encode+0x51c>)
static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    982e:	681b      	ldr	r3, [r3, #0]
    9830:	065b      	lsls	r3, r3, #25
    9832:	d547      	bpl.n	98c4 <hci_evt_encode+0x514>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    9834:	220a      	movs	r2, #10
    9836:	2107      	movs	r1, #7
    9838:	0030      	movs	r0, r6
    983a:	f7ff f89b 	bl	8974 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    983e:	7005      	strb	r5, [r0, #0]
    9840:	0a2d      	lsrs	r5, r5, #8
    9842:	7045      	strb	r5, [r0, #1]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    9844:	7c63      	ldrb	r3, [r4, #17]
    9846:	7c22      	ldrb	r2, [r4, #16]
    9848:	021b      	lsls	r3, r3, #8
    984a:	4313      	orrs	r3, r2
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
    984c:	7083      	strb	r3, [r0, #2]
    984e:	0a1b      	lsrs	r3, r3, #8
    9850:	70c3      	strb	r3, [r0, #3]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    9852:	7ce3      	ldrb	r3, [r4, #19]
    9854:	7ca2      	ldrb	r2, [r4, #18]
    9856:	021b      	lsls	r3, r3, #8
    9858:	4313      	orrs	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
    985a:	7103      	strb	r3, [r0, #4]
    985c:	0a1b      	lsrs	r3, r3, #8
    985e:	7143      	strb	r3, [r0, #5]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    9860:	7b63      	ldrb	r3, [r4, #13]
    9862:	7b22      	ldrb	r2, [r4, #12]
    9864:	021b      	lsls	r3, r3, #8
    9866:	4313      	orrs	r3, r2
	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
    9868:	7183      	strb	r3, [r0, #6]
    986a:	0a1b      	lsrs	r3, r3, #8
    986c:	71c3      	strb	r3, [r0, #7]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    986e:	7ba2      	ldrb	r2, [r4, #14]
    9870:	7be3      	ldrb	r3, [r4, #15]
    9872:	021b      	lsls	r3, r3, #8
    9874:	4313      	orrs	r3, r2
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
    9876:	7203      	strb	r3, [r0, #8]
    9878:	0a1b      	lsrs	r3, r3, #8
    987a:	7243      	strb	r3, [r0, #9]
    987c:	e022      	b.n	98c4 <hci_evt_encode+0x514>
    987e:	7b23      	ldrb	r3, [r4, #12]

static void le_unknown_rsp(struct pdu_data *pdu_data, u16_t handle,
			   struct net_buf *buf)
{

	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    9880:	2b0e      	cmp	r3, #14
    9882:	d106      	bne.n	9892 <hci_evt_encode+0x4e2>
	case PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ:
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9884:	000b      	movs	r3, r1
    9886:	002a      	movs	r2, r5
    9888:	2100      	movs	r1, #0
    988a:	201a      	movs	r0, #26
    988c:	f7ff f8a2 	bl	89d4 <le_remote_feat_complete>
    9890:	e018      	b.n	98c4 <hci_evt_encode+0x514>
					    NULL, handle, buf);
		break;

	default:
		BT_WARN("type: 0x%02x",
    9892:	4a0f      	ldr	r2, [pc, #60]	; (98d0 <hci_evt_encode+0x520>)
    9894:	9301      	str	r3, [sp, #4]
    9896:	4b0f      	ldr	r3, [pc, #60]	; (98d4 <hci_evt_encode+0x524>)
    9898:	9202      	str	r2, [sp, #8]
    989a:	9300      	str	r3, [sp, #0]
    989c:	4a0e      	ldr	r2, [pc, #56]	; (98d8 <hci_evt_encode+0x528>)
    989e:	4b0f      	ldr	r3, [pc, #60]	; (98dc <hci_evt_encode+0x52c>)
    98a0:	490f      	ldr	r1, [pc, #60]	; (98e0 <hci_evt_encode+0x530>)
    98a2:	4810      	ldr	r0, [pc, #64]	; (98e4 <hci_evt_encode+0x534>)
    98a4:	f7f7 ff60 	bl	1768 <printk>
    98a8:	e00c      	b.n	98c4 <hci_evt_encode+0x514>
	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		le_unknown_rsp(pdu_data, handle, buf);
		break;

	default:
		LL_ASSERT(0);
    98aa:	4b09      	ldr	r3, [pc, #36]	; (98d0 <hci_evt_encode+0x520>)
    98ac:	9301      	str	r3, [sp, #4]
    98ae:	4b0e      	ldr	r3, [pc, #56]	; (98e8 <hci_evt_encode+0x538>)
    98b0:	9300      	str	r3, [sp, #0]
    98b2:	4b0e      	ldr	r3, [pc, #56]	; (98ec <hci_evt_encode+0x53c>)
    98b4:	4a0e      	ldr	r2, [pc, #56]	; (98f0 <hci_evt_encode+0x540>)
    98b6:	490a      	ldr	r1, [pc, #40]	; (98e0 <hci_evt_encode+0x530>)
    98b8:	480e      	ldr	r0, [pc, #56]	; (98f4 <hci_evt_encode+0x544>)
    98ba:	f7f7 ff55 	bl	1768 <printk>
    98be:	b662      	cpsie	i
    98c0:	2004      	movs	r0, #4
    98c2:	df02      	svc	2
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    98c4:	b011      	add	sp, #68	; 0x44
    98c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    98c8:	20000538 	.word	0x20000538
    98cc:	20000540 	.word	0x20000540
    98d0:	000145b0 	.word	0x000145b0
    98d4:	000145fb 	.word	0x000145fb
    98d8:	000145bd 	.word	0x000145bd
    98dc:	00016da0 	.word	0x00016da0
    98e0:	00014577 	.word	0x00014577
    98e4:	000158d4 	.word	0x000158d4
    98e8:	000145b5 	.word	0x000145b5
    98ec:	00016d72 	.word	0x00016d72
    98f0:	00014570 	.word	0x00014570
    98f4:	00014bc5 	.word	0x00014bc5

000098f8 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    98f8:	b570      	push	{r4, r5, r6, lr}
    98fa:	0005      	movs	r5, r0
    98fc:	000c      	movs	r4, r1
    98fe:	0016      	movs	r6, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    9900:	2113      	movs	r1, #19
    9902:	2205      	movs	r2, #5
    9904:	f7fe ffee 	bl	88e4 <evt_create>

	ep = net_buf_add(buf, len);
    9908:	0028      	movs	r0, r5
    990a:	2105      	movs	r1, #5
    990c:	3008      	adds	r0, #8
    990e:	f008 fef9 	bl	12704 <net_buf_simple_add>
	ep->num_handles = num_handles;
    9912:	2301      	movs	r3, #1
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
	hc->count = sys_cpu_to_le16(num);
    9914:	2200      	movs	r2, #0

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    9916:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9918:	7044      	strb	r4, [r0, #1]
    991a:	18c3      	adds	r3, r0, r3
	hc->count = sys_cpu_to_le16(num);
    991c:	b2b6      	uxth	r6, r6
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    991e:	0a24      	lsrs	r4, r4, #8
	hc->count = sys_cpu_to_le16(num);
    9920:	709e      	strb	r6, [r3, #2]
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9922:	705c      	strb	r4, [r3, #1]
	hc->count = sys_cpu_to_le16(num);
    9924:	70da      	strb	r2, [r3, #3]
}
    9926:	bd70      	pop	{r4, r5, r6, pc}

00009928 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9928:	7903      	ldrb	r3, [r0, #4]
    992a:	2b01      	cmp	r3, #1
    992c:	d006      	beq.n	993c <hci_get_class+0x14>
    992e:	3b02      	subs	r3, #2
    9930:	b2db      	uxtb	r3, r3
    9932:	2b0a      	cmp	r3, #10
    9934:	d80a      	bhi.n	994c <hci_get_class+0x24>
    9936:	4a07      	ldr	r2, [pc, #28]	; (9954 <hci_get_class+0x2c>)
    9938:	56d0      	ldrsb	r0, [r2, r3]
    993a:	e009      	b.n	9950 <hci_get_class+0x28>
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    993c:	7a03      	ldrb	r3, [r0, #8]
    993e:	2003      	movs	r0, #3
    9940:	4003      	ands	r3, r0
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    9942:	3b03      	subs	r3, #3
    9944:	425a      	negs	r2, r3
    9946:	4153      	adcs	r3, r2
    9948:	1ac0      	subs	r0, r0, r3
    994a:	e001      	b.n	9950 <hci_get_class+0x28>
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    994c:	2001      	movs	r0, #1
    994e:	4240      	negs	r0, r0
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
	}
}
    9950:	4770      	bx	lr
    9952:	46c0      	nop			; (mov r8, r8)
    9954:	00016d95 	.word	0x00016d95

00009958 <hci_init>:

#if CONFIG_BLUETOOTH_CONTROLLER_DUP_FILTER_LEN > 0
	dup_count = -1;
#endif
	/* reset event masks */
	event_mask = DEFAULT_EVENT_MASK;
    9958:	2001      	movs	r0, #1
    995a:	4b05      	ldr	r3, [pc, #20]	; (9970 <hci_init+0x18>)
    995c:	4905      	ldr	r1, [pc, #20]	; (9974 <hci_init+0x1c>)
    995e:	4240      	negs	r0, r0
    9960:	6018      	str	r0, [r3, #0]
    9962:	6059      	str	r1, [r3, #4]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9964:	201f      	movs	r0, #31
    9966:	2100      	movs	r1, #0
    9968:	4b03      	ldr	r3, [pc, #12]	; (9978 <hci_init+0x20>)
    996a:	6018      	str	r0, [r3, #0]
    996c:	6059      	str	r1, [r3, #4]
{
#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    996e:	4770      	bx	lr
    9970:	20000538 	.word	0x20000538
    9974:	00001fff 	.word	0x00001fff
    9978:	20000540 	.word	0x20000540

0000997c <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    997c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    997e:	4802      	ldr	r0, [pc, #8]	; (9988 <_hci_driver_init+0xc>)
    9980:	f7fa fa60 	bl	3e44 <bt_hci_driver_register>

	return 0;
}
    9984:	2000      	movs	r0, #0
    9986:	bd10      	pop	{r4, pc}
    9988:	00016df8 	.word	0x00016df8

0000998c <recv_thread>:
	return buf;
}
#endif

static void recv_thread(void *p1, void *p2, void *p3)
{
    998c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

		/* process host buffers first if any */
		buf = process_hbuf();

#else
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    998e:	2101      	movs	r1, #1
    9990:	4826      	ldr	r0, [pc, #152]	; (9a2c <recv_thread+0xa0>)
    9992:	4249      	negs	r1, r1
    9994:	f009 fe24 	bl	135e0 <k_queue_get>
    9998:	1e04      	subs	r4, r0, #0
#endif
		BT_DBG("unblocked");

		if (node_rx && !buf) {
    999a:	d044      	beq.n	9a26 <recv_thread+0x9a>
	return buf;
}

static inline struct net_buf *process_node(struct radio_pdu_node_rx *node_rx)
{
	s8_t class = hci_get_class(node_rx);
    999c:	f7ff ffc4 	bl	9928 <hci_get_class>
    99a0:	9403      	str	r4, [sp, #12]
					  s8_t class)
{
	struct net_buf *buf = NULL;

	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
    99a2:	2800      	cmp	r0, #0
    99a4:	db1c      	blt.n	99e0 <recv_thread+0x54>
    99a6:	2802      	cmp	r0, #2
    99a8:	dd0b      	ble.n	99c2 <recv_thread+0x36>
    99aa:	2803      	cmp	r0, #3
    99ac:	d118      	bne.n	99e0 <recv_thread+0x54>
		}
		break;
#if defined(CONFIG_BLUETOOTH_CONN)
	case HCI_CLASS_ACL_DATA:
		/* generate ACL data */
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    99ae:	2101      	movs	r1, #1
    99b0:	4249      	negs	r1, r1
    99b2:	f7fa fb7d 	bl	40b0 <bt_buf_get_rx>
    99b6:	0004      	movs	r4, r0
		hci_acl_encode(node_rx, buf);
    99b8:	0001      	movs	r1, r0
    99ba:	9803      	ldr	r0, [sp, #12]
    99bc:	f7ff fcb2 	bl	9324 <hci_acl_encode>
    99c0:	e01b      	b.n	99fa <recv_thread+0x6e>
	switch (class) {
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    99c2:	2100      	movs	r1, #0
	/* Check if we need to generate an HCI event or ACL data */
	switch (class) {
	case HCI_CLASS_EVT_DISCARDABLE:
	case HCI_CLASS_EVT_REQUIRED:
	case HCI_CLASS_EVT_CONNECTION:
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    99c4:	2801      	cmp	r0, #1
    99c6:	d002      	beq.n	99ce <recv_thread+0x42>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
		} else {
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    99c8:	2101      	movs	r1, #1
    99ca:	2001      	movs	r0, #1
    99cc:	4249      	negs	r1, r1
    99ce:	f7fa fb6f 	bl	40b0 <bt_buf_get_rx>
    99d2:	1e04      	subs	r4, r0, #0
		}
		if (buf) {
    99d4:	d011      	beq.n	99fa <recv_thread+0x6e>
			hci_evt_encode(node_rx, buf);
    99d6:	0001      	movs	r1, r0
    99d8:	9803      	ldr	r0, [sp, #12]
    99da:	f7ff fce9 	bl	93b0 <hci_evt_encode>
    99de:	e00c      	b.n	99fa <recv_thread+0x6e>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
		hci_acl_encode(node_rx, buf);
		break;
#endif
	default:
		LL_ASSERT(0);
    99e0:	4b13      	ldr	r3, [pc, #76]	; (9a30 <recv_thread+0xa4>)
    99e2:	4a14      	ldr	r2, [pc, #80]	; (9a34 <recv_thread+0xa8>)
    99e4:	9301      	str	r3, [sp, #4]
    99e6:	4b14      	ldr	r3, [pc, #80]	; (9a38 <recv_thread+0xac>)
    99e8:	4914      	ldr	r1, [pc, #80]	; (9a3c <recv_thread+0xb0>)
    99ea:	9300      	str	r3, [sp, #0]
    99ec:	4814      	ldr	r0, [pc, #80]	; (9a40 <recv_thread+0xb4>)
    99ee:	4b15      	ldr	r3, [pc, #84]	; (9a44 <recv_thread+0xb8>)
    99f0:	f7f7 feba 	bl	1768 <printk>
    99f4:	b662      	cpsie	i
    99f6:	2004      	movs	r0, #4
    99f8:	df02      	svc	2
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
    99fa:	9b03      	ldr	r3, [sp, #12]
    99fc:	2100      	movs	r1, #0
    99fe:	88d8      	ldrh	r0, [r3, #6]
    9a00:	f007 fba8 	bl	11154 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    9a04:	2200      	movs	r2, #0
    9a06:	9b03      	ldr	r3, [sp, #12]
	radio_rx_mem_release(&node_rx);
    9a08:	a803      	add	r0, sp, #12
		LL_ASSERT(0);
		break;
	}

	radio_rx_fc_set(node_rx->hdr.handle, 0);
	node_rx->hdr.onion.next = 0;
    9a0a:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    9a0c:	f007 fb24 	bl	11058 <radio_rx_mem_release>
		if (node_rx && !buf) {
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
    9a10:	2c00      	cmp	r4, #0
    9a12:	d008      	beq.n	9a26 <recv_thread+0x9a>
			if (buf->len) {
    9a14:	89a3      	ldrh	r3, [r4, #12]
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    9a16:	0020      	movs	r0, r4
			/* process regular node from radio */
			buf = process_node(node_rx);
		}

		if (buf) {
			if (buf->len) {
    9a18:	2b00      	cmp	r3, #0
    9a1a:	d002      	beq.n	9a22 <recv_thread+0x96>
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    9a1c:	f7f9 fb08 	bl	3030 <bt_recv>
    9a20:	e001      	b.n	9a26 <recv_thread+0x9a>
			} else {
				net_buf_unref(buf);
    9a22:	f008 fe4d 	bl	126c0 <net_buf_unref>
			}
		}

		k_yield();
    9a26:	f009 ff25 	bl	13874 <k_yield>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
			rx_ts = k_uptime_get_32();
		}
#endif
	}
    9a2a:	e7b0      	b.n	998e <recv_thread+0x2>
    9a2c:	20000734 	.word	0x20000734
    9a30:	000145b0 	.word	0x000145b0
    9a34:	00014570 	.word	0x00014570
    9a38:	000145b5 	.word	0x000145b5
    9a3c:	00014577 	.word	0x00014577
    9a40:	00014bc5 	.word	0x00014bc5
    9a44:	00016e08 	.word	0x00016e08

00009a48 <prio_recv_thread>:
static sys_slist_t hbuf_pend;
static s32_t hbuf_count;
#endif

static void prio_recv_thread(void *p1, void *p2, void *p3)
{
    9a48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    9a4a:	466b      	mov	r3, sp
    9a4c:	1c9d      	adds	r5, r3, #2
    9a4e:	0029      	movs	r1, r5
    9a50:	a801      	add	r0, sp, #4
    9a52:	f007 fac3 	bl	10fdc <radio_rx_get>
    9a56:	1e04      	subs	r4, r0, #0
    9a58:	d00f      	beq.n	9a7a <prio_recv_thread+0x32>
#if defined(CONFIG_BLUETOOTH_CONN)
			struct net_buf *buf;

			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9a5a:	2101      	movs	r1, #1
    9a5c:	2001      	movs	r0, #1
    9a5e:	4249      	negs	r1, r1
    9a60:	f7fa fb26 	bl	40b0 <bt_buf_get_rx>
    9a64:	0006      	movs	r6, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    9a66:	8829      	ldrh	r1, [r5, #0]
    9a68:	0022      	movs	r2, r4
    9a6a:	f7ff ff45 	bl	98f8 <hci_num_cmplt_encode>
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
			bt_recv_prio(buf);
    9a6e:	0030      	movs	r0, r6
    9a70:	f7fa f8ea 	bl	3c48 <bt_recv_prio>
			k_yield();
    9a74:	f009 fefe 	bl	13874 <k_yield>
    9a78:	e7e7      	b.n	9a4a <prio_recv_thread+0x2>
#endif
		}

		if (node_rx) {
    9a7a:	9b01      	ldr	r3, [sp, #4]
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	d006      	beq.n	9a8e <prio_recv_thread+0x46>

			radio_rx_dequeue();
    9a80:	f007 fdf8 	bl	11674 <radio_rx_dequeue>

			BT_DBG("RX node enqueue");
			k_fifo_put(&recv_fifo, node_rx);
    9a84:	9901      	ldr	r1, [sp, #4]
    9a86:	4805      	ldr	r0, [pc, #20]	; (9a9c <prio_recv_thread+0x54>)
    9a88:	f009 fd5a 	bl	13540 <k_queue_append>
    9a8c:	e7dd      	b.n	9a4a <prio_recv_thread+0x2>

			continue;
		}

		BT_DBG("sem take...");
		k_sem_take(&sem_prio_recv, K_FOREVER);
    9a8e:	2101      	movs	r1, #1
    9a90:	4803      	ldr	r0, [pc, #12]	; (9aa0 <prio_recv_thread+0x58>)
    9a92:	4249      	negs	r1, r1
    9a94:	f009 fffe 	bl	13a94 <k_sem_take>
	while (1) {
		struct radio_pdu_node_rx *node_rx;
		u8_t num_cmplt;
		u16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    9a98:	e7d7      	b.n	9a4a <prio_recv_thread+0x2>
    9a9a:	46c0      	nop			; (mov r8, r8)
    9a9c:	20000734 	.word	0x20000734
    9aa0:	2000070c 	.word	0x2000070c

00009aa4 <hci_driver_send>:

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    9aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    9aa6:	8983      	ldrh	r3, [r0, #12]

	return 0;
}

static int hci_driver_send(struct net_buf *buf)
{
    9aa8:	0004      	movs	r4, r0
	u8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    9aaa:	2b00      	cmp	r3, #0
    9aac:	d10a      	bne.n	9ac4 <hci_driver_send+0x20>
		BT_ERR("Empty HCI packet");
    9aae:	4b1a      	ldr	r3, [pc, #104]	; (9b18 <hci_driver_send+0x74>)
    9ab0:	4a1a      	ldr	r2, [pc, #104]	; (9b1c <hci_driver_send+0x78>)
    9ab2:	9301      	str	r3, [sp, #4]
    9ab4:	4b1a      	ldr	r3, [pc, #104]	; (9b20 <hci_driver_send+0x7c>)
    9ab6:	491b      	ldr	r1, [pc, #108]	; (9b24 <hci_driver_send+0x80>)
    9ab8:	9300      	str	r3, [sp, #0]
    9aba:	481b      	ldr	r0, [pc, #108]	; (9b28 <hci_driver_send+0x84>)
    9abc:	4b1b      	ldr	r3, [pc, #108]	; (9b2c <hci_driver_send+0x88>)
    9abe:	f7f7 fe53 	bl	1768 <printk>
    9ac2:	e020      	b.n	9b06 <hci_driver_send+0x62>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    9ac4:	2203      	movs	r2, #3
    9ac6:	89c3      	ldrh	r3, [r0, #14]
    9ac8:	18c3      	adds	r3, r0, r3
    9aca:	3313      	adds	r3, #19
    9acc:	4393      	bics	r3, r2
    9ace:	781b      	ldrb	r3, [r3, #0]
		return -EINVAL;
	}

	type = bt_buf_get_type(buf);
	switch (type) {
    9ad0:	2b00      	cmp	r3, #0
    9ad2:	d006      	beq.n	9ae2 <hci_driver_send+0x3e>
    9ad4:	2b02      	cmp	r3, #2
    9ad6:	d10b      	bne.n	9af0 <hci_driver_send+0x4c>
#if defined(CONFIG_BLUETOOTH_CONN)
	case BT_BUF_ACL_OUT:
		err = hci_acl_handle(buf);
    9ad8:	f7ff fbaa 	bl	9230 <hci_acl_handle>
	default:
		BT_ERR("Unknown HCI type %u", type);
		return -EINVAL;
	}

	if (!err) {
    9adc:	2800      	cmp	r0, #0
    9ade:	d119      	bne.n	9b14 <hci_driver_send+0x70>
    9ae0:	e014      	b.n	9b0c <hci_driver_send+0x68>

static int cmd_handle(struct net_buf *buf)
{
	struct net_buf *evt;

	evt = hci_cmd_handle(buf);
    9ae2:	f7ff f86d 	bl	8bc0 <hci_cmd_handle>
	if (evt) {
    9ae6:	2800      	cmp	r0, #0
    9ae8:	d010      	beq.n	9b0c <hci_driver_send+0x68>
		BT_DBG("Replying with event of %u bytes", evt->len);
		bt_recv_prio(evt);
    9aea:	f7fa f8ad 	bl	3c48 <bt_recv_prio>
    9aee:	e00d      	b.n	9b0c <hci_driver_send+0x68>
#endif
	case BT_BUF_CMD:
		err = cmd_handle(buf);
		break;
	default:
		BT_ERR("Unknown HCI type %u", type);
    9af0:	4a09      	ldr	r2, [pc, #36]	; (9b18 <hci_driver_send+0x74>)
    9af2:	9301      	str	r3, [sp, #4]
    9af4:	4b0a      	ldr	r3, [pc, #40]	; (9b20 <hci_driver_send+0x7c>)
    9af6:	9202      	str	r2, [sp, #8]
    9af8:	9300      	str	r3, [sp, #0]
    9afa:	4a08      	ldr	r2, [pc, #32]	; (9b1c <hci_driver_send+0x78>)
    9afc:	4b0b      	ldr	r3, [pc, #44]	; (9b2c <hci_driver_send+0x88>)
    9afe:	4909      	ldr	r1, [pc, #36]	; (9b24 <hci_driver_send+0x80>)
    9b00:	480b      	ldr	r0, [pc, #44]	; (9b30 <hci_driver_send+0x8c>)
    9b02:	f7f7 fe31 	bl	1768 <printk>
		return -EINVAL;
    9b06:	2016      	movs	r0, #22
    9b08:	4240      	negs	r0, r0
    9b0a:	e003      	b.n	9b14 <hci_driver_send+0x70>
	}

	if (!err) {
		net_buf_unref(buf);
    9b0c:	0020      	movs	r0, r4
    9b0e:	f008 fdd7 	bl	126c0 <net_buf_unref>
    9b12:	2000      	movs	r0, #0
	}

	BT_DBG("exit: %d", err);

	return err;
}
    9b14:	b004      	add	sp, #16
    9b16:	bd10      	pop	{r4, pc}
    9b18:	000145b0 	.word	0x000145b0
    9b1c:	00014570 	.word	0x00014570
    9b20:	000145b5 	.word	0x000145b5
    9b24:	00014577 	.word	0x00014577
    9b28:	000158f1 	.word	0x000158f1
    9b2c:	00016e14 	.word	0x00016e14
    9b30:	00015912 	.word	0x00015912

00009b34 <hci_driver_open>:

static int hci_driver_open(void)
{
    9b34:	b510      	push	{r4, lr}
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    9b36:	481a      	ldr	r0, [pc, #104]	; (9ba0 <hci_driver_open+0x6c>)

	return err;
}

static int hci_driver_open(void)
{
    9b38:	b086      	sub	sp, #24
	u32_t err;

	DEBUG_INIT();

	err = ll_init(&sem_prio_recv);
    9b3a:	f007 ff0d 	bl	11958 <ll_init>
    9b3e:	1e04      	subs	r4, r0, #0
	if (err) {
    9b40:	d00b      	beq.n	9b5a <hci_driver_open+0x26>
		BT_ERR("LL initialization failed: %u", err);
    9b42:	4b18      	ldr	r3, [pc, #96]	; (9ba4 <hci_driver_open+0x70>)
    9b44:	9001      	str	r0, [sp, #4]
    9b46:	9302      	str	r3, [sp, #8]
    9b48:	4b17      	ldr	r3, [pc, #92]	; (9ba8 <hci_driver_open+0x74>)
    9b4a:	4a18      	ldr	r2, [pc, #96]	; (9bac <hci_driver_open+0x78>)
    9b4c:	9300      	str	r3, [sp, #0]
    9b4e:	4918      	ldr	r1, [pc, #96]	; (9bb0 <hci_driver_open+0x7c>)
    9b50:	4b18      	ldr	r3, [pc, #96]	; (9bb4 <hci_driver_open+0x80>)
    9b52:	4819      	ldr	r0, [pc, #100]	; (9bb8 <hci_driver_open+0x84>)
    9b54:	f7f7 fe08 	bl	1768 <printk>
		return err;
    9b58:	e01e      	b.n	9b98 <hci_driver_open+0x64>
	}

#if defined(CONFIG_BLUETOOTH_HCI_ACL_FLOW_CONTROL)
	hci_init(&hbuf_signal);
#else
	hci_init(NULL);
    9b5a:	f7ff fefd 	bl	9958 <hci_init>
#endif

	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    9b5e:	230a      	movs	r3, #10
    9b60:	22bb      	movs	r2, #187	; 0xbb
    9b62:	425b      	negs	r3, r3
    9b64:	9303      	str	r3, [sp, #12]
    9b66:	0092      	lsls	r2, r2, #2
    9b68:	4b14      	ldr	r3, [pc, #80]	; (9bbc <hci_driver_open+0x88>)
    9b6a:	4915      	ldr	r1, [pc, #84]	; (9bc0 <hci_driver_open+0x8c>)
    9b6c:	9405      	str	r4, [sp, #20]
    9b6e:	9404      	str	r4, [sp, #16]
    9b70:	9402      	str	r4, [sp, #8]
    9b72:	9401      	str	r4, [sp, #4]
    9b74:	9400      	str	r4, [sp, #0]
    9b76:	4813      	ldr	r0, [pc, #76]	; (9bc4 <hci_driver_open+0x90>)
    9b78:	f00a f942 	bl	13e00 <k_thread_create>
			K_THREAD_STACK_SIZEOF(prio_recv_thread_stack),
			prio_recv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(6), 0, K_NO_WAIT);

	k_thread_create(&recv_thread_data, recv_thread_stack,
    9b7c:	2309      	movs	r3, #9
    9b7e:	425b      	negs	r3, r3
    9b80:	9303      	str	r3, [sp, #12]
    9b82:	9405      	str	r4, [sp, #20]
    9b84:	9404      	str	r4, [sp, #16]
    9b86:	9402      	str	r4, [sp, #8]
    9b88:	9401      	str	r4, [sp, #4]
    9b8a:	9400      	str	r4, [sp, #0]
    9b8c:	4b0e      	ldr	r3, [pc, #56]	; (9bc8 <hci_driver_open+0x94>)
    9b8e:	4a0f      	ldr	r2, [pc, #60]	; (9bcc <hci_driver_open+0x98>)
    9b90:	490f      	ldr	r1, [pc, #60]	; (9bd0 <hci_driver_open+0x9c>)
    9b92:	4810      	ldr	r0, [pc, #64]	; (9bd4 <hci_driver_open+0xa0>)
    9b94:	f00a f934 	bl	13e00 <k_thread_create>
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	BT_DBG("Success.");

	return 0;
}
    9b98:	0020      	movs	r0, r4
    9b9a:	b006      	add	sp, #24
    9b9c:	bd10      	pop	{r4, pc}
    9b9e:	46c0      	nop			; (mov r8, r8)
    9ba0:	2000070c 	.word	0x2000070c
    9ba4:	000145b0 	.word	0x000145b0
    9ba8:	000145b5 	.word	0x000145b5
    9bac:	00014570 	.word	0x00014570
    9bb0:	00014577 	.word	0x00014577
    9bb4:	00016e24 	.word	0x00016e24
    9bb8:	00015936 	.word	0x00015936
    9bbc:	00009a49 	.word	0x00009a49
    9bc0:	20002c54 	.word	0x20002c54
    9bc4:	20001f88 	.word	0x20001f88
    9bc8:	0000998d 	.word	0x0000998d
    9bcc:	0000052c 	.word	0x0000052c
    9bd0:	2000225c 	.word	0x2000225c
    9bd4:	20001f00 	.word	0x20001f00

00009bd8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    9bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    9bda:	2504      	movs	r5, #4
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    9bdc:	270c      	movs	r7, #12
void mayfly_init(void)
{
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
    9bde:	3d01      	subs	r5, #1
    9be0:	b2ed      	uxtb	r5, r5
    9be2:	2dff      	cmp	r5, #255	; 0xff
    9be4:	d015      	beq.n	9c12 <mayfly_init+0x3a>
    9be6:	2404      	movs	r4, #4
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    9be8:	2630      	movs	r6, #48	; 0x30
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    9bea:	3c01      	subs	r4, #1
    9bec:	b2e4      	uxtb	r4, r4
    9bee:	2cff      	cmp	r4, #255	; 0xff
    9bf0:	d0f5      	beq.n	9bde <mayfly_init+0x6>
			memq_init(mfl[callee_id][caller_id],
    9bf2:	0033      	movs	r3, r6
    9bf4:	0039      	movs	r1, r7
    9bf6:	436b      	muls	r3, r5
    9bf8:	4361      	muls	r1, r4
    9bfa:	18c9      	adds	r1, r1, r3
    9bfc:	4b05      	ldr	r3, [pc, #20]	; (9c14 <mayfly_init+0x3c>)
    9bfe:	00a8      	lsls	r0, r5, #2
    9c00:	1859      	adds	r1, r3, r1
    9c02:	1900      	adds	r0, r0, r4
    9c04:	4b04      	ldr	r3, [pc, #16]	; (9c18 <mayfly_init+0x40>)
    9c06:	00c0      	lsls	r0, r0, #3
    9c08:	1d0a      	adds	r2, r1, #4
    9c0a:	1818      	adds	r0, r3, r0
    9c0c:	f000 f98c 	bl	9f28 <memq_init>
    9c10:	e7eb      	b.n	9bea <mayfly_init+0x12>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    9c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c14:	20001040 	.word	0x20001040
    9c18:	20000fc0 	.word	0x20000fc0

00009c1c <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    9c1c:	b570      	push	{r4, r5, r6, lr}
    9c1e:	250c      	movs	r5, #12
    9c20:	2430      	movs	r4, #48	; 0x30
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    9c22:	002b      	movs	r3, r5
    9c24:	434c      	muls	r4, r1
    9c26:	4343      	muls	r3, r0
    9c28:	4e0b      	ldr	r6, [pc, #44]	; (9c58 <mayfly_enable+0x3c>)
    9c2a:	191c      	adds	r4, r3, r4
    9c2c:	1933      	adds	r3, r6, r4
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	if (enable) {
    9c2e:	2a00      	cmp	r2, #0
    9c30:	d008      	beq.n	9c44 <mayfly_enable+0x28>
		if (mft[callee_id][caller_id].enable_req ==
    9c32:	7a1d      	ldrb	r5, [r3, #8]
    9c34:	7a5c      	ldrb	r4, [r3, #9]
    9c36:	42ac      	cmp	r4, r5
    9c38:	d101      	bne.n	9c3e <mayfly_enable+0x22>
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    9c3a:	3401      	adds	r4, #1
    9c3c:	721c      	strb	r4, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    9c3e:	f007 fe01 	bl	11844 <mayfly_enable_cb>
    9c42:	e007      	b.n	9c54 <mayfly_enable+0x38>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    9c44:	7a9c      	ldrb	r4, [r3, #10]
    9c46:	7ada      	ldrb	r2, [r3, #11]
    9c48:	42a2      	cmp	r2, r4
    9c4a:	d103      	bne.n	9c54 <mayfly_enable+0x38>
		    mft[callee_id][caller_id].disable_ack) {
			mft[callee_id][caller_id].disable_req++;
    9c4c:	3201      	adds	r2, #1
    9c4e:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    9c50:	f007 fe50 	bl	118f4 <mayfly_pend>
		}
	}
}
    9c54:	bd70      	pop	{r4, r5, r6, pc}
    9c56:	46c0      	nop			; (mov r8, r8)
    9c58:	20001040 	.word	0x20001040

00009c5c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    9c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c5e:	0005      	movs	r5, r0
    9c60:	000e      	movs	r6, r1
    9c62:	001c      	movs	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    9c64:	2a00      	cmp	r2, #0
    9c66:	d001      	beq.n	9c6c <mayfly_enqueue+0x10>
    9c68:	2101      	movs	r1, #1
    9c6a:	e017      	b.n	9c9c <mayfly_enqueue+0x40>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    9c6c:	f007 fe34 	bl	118d8 <mayfly_prio_is_equal>
    9c70:	2800      	cmp	r0, #0
    9c72:	d0f9      	beq.n	9c68 <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
    9c74:	0031      	movs	r1, r6
    9c76:	0028      	movs	r0, r5
    9c78:	f007 fe0a 	bl	11890 <mayfly_is_enabled>
			struct mayfly *m)
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    9c7c:	2800      	cmp	r0, #0
    9c7e:	d0f3      	beq.n	9c68 <mayfly_enqueue+0xc>
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
    9c80:	230c      	movs	r3, #12
    9c82:	436b      	muls	r3, r5
    9c84:	001a      	movs	r2, r3
    9c86:	2330      	movs	r3, #48	; 0x30
    9c88:	4373      	muls	r3, r6
    9c8a:	18d3      	adds	r3, r2, r3
    9c8c:	4a1d      	ldr	r2, [pc, #116]	; (9d04 <mayfly_enqueue+0xa8>)
    9c8e:	18d3      	adds	r3, r2, r3
{
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    9c90:	7a9a      	ldrb	r2, [r3, #10]
    9c92:	7adb      	ldrb	r3, [r3, #11]
    9c94:	1ad3      	subs	r3, r2, r3
    9c96:	1e5a      	subs	r2, r3, #1
    9c98:	4193      	sbcs	r3, r2
    9c9a:	0019      	movs	r1, r3

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    9c9c:	2203      	movs	r2, #3
		!mayfly_is_enabled(caller_id, callee_id) ||
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    9c9e:	7863      	ldrb	r3, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    9ca0:	7827      	ldrb	r7, [r4, #0]
    9ca2:	1aff      	subs	r7, r7, r3
    9ca4:	4017      	ands	r7, r2
	if (state != 0) {
    9ca6:	d010      	beq.n	9cca <mayfly_enqueue+0x6e>
		if (chain) {
    9ca8:	2900      	cmp	r1, #0
    9caa:	d00a      	beq.n	9cc2 <mayfly_enqueue+0x66>

				return 0;
			}

			/* already ready */
			return 1;
    9cac:	2001      	movs	r0, #1

	/* already in queue */
	state = (m->_req - ack) & 0x03;
	if (state != 0) {
		if (chain) {
			if (state != 1) {
    9cae:	4287      	cmp	r7, r0
    9cb0:	d026      	beq.n	9d00 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    9cb2:	181b      	adds	r3, r3, r0
    9cb4:	b2db      	uxtb	r3, r3
    9cb6:	7023      	strb	r3, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    9cb8:	0031      	movs	r1, r6
    9cba:	0028      	movs	r0, r5
    9cbc:	f007 fe1a 	bl	118f4 <mayfly_pend>
    9cc0:	e008      	b.n	9cd4 <mayfly_enqueue+0x78>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    9cc2:	3302      	adds	r3, #2
    9cc4:	b2db      	uxtb	r3, r3
    9cc6:	7023      	strb	r3, [r4, #0]
    9cc8:	e001      	b.n	9cce <mayfly_enqueue+0x72>
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    9cca:	2900      	cmp	r1, #0
    9ccc:	d104      	bne.n	9cd8 <mayfly_enqueue+0x7c>
		/* call fp */
		m->fp(m->param);
    9cce:	68e3      	ldr	r3, [r4, #12]
    9cd0:	68a0      	ldr	r0, [r4, #8]
    9cd2:	4798      	blx	r3

		return 0;
    9cd4:	2000      	movs	r0, #0
    9cd6:	e013      	b.n	9d00 <mayfly_enqueue+0xa4>
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    9cd8:	3301      	adds	r3, #1
    9cda:	b2db      	uxtb	r3, r3
    9cdc:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    9cde:	220c      	movs	r2, #12
    9ce0:	2330      	movs	r3, #48	; 0x30
    9ce2:	436a      	muls	r2, r5
    9ce4:	4373      	muls	r3, r6
    9ce6:	18d2      	adds	r2, r2, r3
    9ce8:	4b06      	ldr	r3, [pc, #24]	; (9d04 <mayfly_enqueue+0xa8>)
    9cea:	6861      	ldr	r1, [r4, #4]
    9cec:	189a      	adds	r2, r3, r2
    9cee:	3204      	adds	r2, #4
    9cf0:	0020      	movs	r0, r4
    9cf2:	f000 f91c 	bl	9f2e <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    9cf6:	0028      	movs	r0, r5
    9cf8:	0031      	movs	r1, r6
    9cfa:	f007 fdfb 	bl	118f4 <mayfly_pend>

	return 0;
    9cfe:	0038      	movs	r0, r7
}
    9d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d02:	46c0      	nop			; (mov r8, r8)
    9d04:	20001040 	.word	0x20001040

00009d08 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
	u8_t enable = 0;
    9d08:	2300      	movs	r3, #0

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    9d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d0c:	0005      	movs	r5, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    9d0e:	2404      	movs	r4, #4
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    9d10:	2730      	movs	r7, #48	; 0x30

	return 0;
}

void mayfly_run(u8_t callee_id)
{
    9d12:	b087      	sub	sp, #28
	u8_t disable = 0;
	u8_t enable = 0;
    9d14:	9300      	str	r3, [sp, #0]
	return 0;
}

void mayfly_run(u8_t callee_id)
{
	u8_t disable = 0;
    9d16:	9301      	str	r3, [sp, #4]
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    9d18:	3c01      	subs	r4, #1
    9d1a:	b2e4      	uxtb	r4, r4
    9d1c:	2cff      	cmp	r4, #255	; 0xff
    9d1e:	d070      	beq.n	9e02 <mayfly_run+0xfa>
		void *link;
		struct mayfly *m = 0;
    9d20:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    9d22:	220c      	movs	r2, #12

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;
    9d24:	9305      	str	r3, [sp, #20]

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    9d26:	003b      	movs	r3, r7
    9d28:	4362      	muls	r2, r4
    9d2a:	436b      	muls	r3, r5
    9d2c:	493b      	ldr	r1, [pc, #236]	; (9e1c <mayfly_run+0x114>)
    9d2e:	18d3      	adds	r3, r2, r3
    9d30:	18c8      	adds	r0, r1, r3
    9d32:	aa05      	add	r2, sp, #20
    9d34:	5859      	ldr	r1, [r3, r1]
    9d36:	6840      	ldr	r0, [r0, #4]
    9d38:	f000 f900 	bl	9f3c <memq_peek>
    9d3c:	0006      	movs	r6, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    9d3e:	2e00      	cmp	r6, #0
    9d40:	d042      	beq.n	9dc8 <mayfly_run+0xc0>
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
    9d42:	2003      	movs	r0, #3
		while (link) {
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    9d44:	9b05      	ldr	r3, [sp, #20]
			state = (req - m->_ack) & 0x03;
    9d46:	785a      	ldrb	r2, [r3, #1]
		while (link) {
			u8_t state;
			u8_t req;

			/* execute work if ready */
			req = m->_req;
    9d48:	7819      	ldrb	r1, [r3, #0]
			state = (req - m->_ack) & 0x03;
    9d4a:	1a89      	subs	r1, r1, r2
    9d4c:	4008      	ands	r0, r1
    9d4e:	9002      	str	r0, [sp, #8]
			if (state == 1) {
    9d50:	2801      	cmp	r0, #1
    9d52:	d104      	bne.n	9d5e <mayfly_run+0x56>
				/* mark mayfly as ran */
				m->_ack--;
    9d54:	3a01      	subs	r2, #1
    9d56:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    9d58:	6898      	ldr	r0, [r3, #8]
    9d5a:	68da      	ldr	r2, [r3, #12]
    9d5c:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			req = m->_req;
    9d5e:	9a05      	ldr	r2, [sp, #20]
    9d60:	7813      	ldrb	r3, [r2, #0]
    9d62:	b2db      	uxtb	r3, r3
    9d64:	9303      	str	r3, [sp, #12]
			if (((req - m->_ack) & 0x03) != 1) {
    9d66:	7853      	ldrb	r3, [r2, #1]
    9d68:	9a03      	ldr	r2, [sp, #12]
    9d6a:	1ad3      	subs	r3, r2, r3
    9d6c:	2203      	movs	r2, #3
    9d6e:	4013      	ands	r3, r2
    9d70:	2b01      	cmp	r3, #1
    9d72:	d010      	beq.n	9d96 <mayfly_run+0x8e>
				memq_dequeue(mft[callee_id][caller_id].tail,
    9d74:	003b      	movs	r3, r7
    9d76:	3209      	adds	r2, #9
    9d78:	4362      	muls	r2, r4
    9d7a:	436b      	muls	r3, r5
    9d7c:	18d3      	adds	r3, r2, r3
    9d7e:	4a27      	ldr	r2, [pc, #156]	; (9e1c <mayfly_run+0x114>)
    9d80:	18d3      	adds	r3, r2, r3
    9d82:	0019      	movs	r1, r3
    9d84:	2200      	movs	r2, #0
    9d86:	6858      	ldr	r0, [r3, #4]
    9d88:	f000 f8e3 	bl	9f52 <memq_dequeue>

				/* release link into dequeued mayfly struct */
				m->_link = link;

				/* reset mayfly state to idle */
				m->_ack = req;
    9d8c:	466a      	mov	r2, sp
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    9d8e:	9b05      	ldr	r3, [sp, #20]

				/* reset mayfly state to idle */
				m->_ack = req;
    9d90:	7b12      	ldrb	r2, [r2, #12]
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    9d92:	605e      	str	r6, [r3, #4]

				/* reset mayfly state to idle */
				m->_ack = req;
    9d94:	705a      	strb	r2, [r3, #1]
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    9d96:	003b      	movs	r3, r7
    9d98:	220c      	movs	r2, #12
    9d9a:	436b      	muls	r3, r5
    9d9c:	4362      	muls	r2, r4
    9d9e:	491f      	ldr	r1, [pc, #124]	; (9e1c <mayfly_run+0x114>)
    9da0:	18d3      	adds	r3, r2, r3
    9da2:	18c8      	adds	r0, r1, r3
    9da4:	aa05      	add	r2, sp, #20
    9da6:	5859      	ldr	r1, [r3, r1]
    9da8:	6840      	ldr	r0, [r0, #4]
    9daa:	f000 f8c7 	bl	9f3c <memq_peek>
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    9dae:	9b02      	ldr	r3, [sp, #8]
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    9db0:	0006      	movs	r6, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    9db2:	2b01      	cmp	r3, #1
    9db4:	d1c3      	bne.n	9d3e <mayfly_run+0x36>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    9db6:	2c00      	cmp	r4, #0
    9db8:	d101      	bne.n	9dbe <mayfly_run+0xb6>
    9dba:	2800      	cmp	r0, #0
    9dbc:	d004      	beq.n	9dc8 <mayfly_run+0xc0>
					mayfly_pend(callee_id, callee_id);
    9dbe:	0029      	movs	r1, r5
    9dc0:	0028      	movs	r0, r5
    9dc2:	f007 fd97 	bl	118f4 <mayfly_pend>
    9dc6:	e027      	b.n	9e18 <mayfly_run+0x110>
					return;
				}
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
    9dc8:	003a      	movs	r2, r7
    9dca:	200c      	movs	r0, #12
    9dcc:	436a      	muls	r2, r5
    9dce:	4360      	muls	r0, r4
    9dd0:	4b12      	ldr	r3, [pc, #72]	; (9e1c <mayfly_run+0x114>)
    9dd2:	1882      	adds	r2, r0, r2
    9dd4:	189a      	adds	r2, r3, r2
    9dd6:	7a90      	ldrb	r0, [r2, #10]
    9dd8:	7ad6      	ldrb	r6, [r2, #11]
    9dda:	0019      	movs	r1, r3
    9ddc:	4286      	cmp	r6, r0
    9dde:	d002      	beq.n	9de6 <mayfly_run+0xde>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    9de0:	2301      	movs	r3, #1

			mft[callee_id][caller_id].disable_ack =
    9de2:	72d0      	strb	r0, [r2, #11]
			}
		}

		if (mft[callee_id][caller_id].disable_req !=
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1;
    9de4:	9301      	str	r3, [sp, #4]

			mft[callee_id][caller_id].disable_ack =
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    9de6:	230c      	movs	r3, #12
    9de8:	003a      	movs	r2, r7
    9dea:	4363      	muls	r3, r4
    9dec:	436a      	muls	r2, r5
    9dee:	189b      	adds	r3, r3, r2
    9df0:	18cb      	adds	r3, r1, r3
    9df2:	7a1a      	ldrb	r2, [r3, #8]
    9df4:	7a59      	ldrb	r1, [r3, #9]
    9df6:	4291      	cmp	r1, r2
    9df8:	d08e      	beq.n	9d18 <mayfly_run+0x10>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;

			mft[callee_id][caller_id].enable_ack =
    9dfa:	725a      	strb	r2, [r3, #9]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1;
    9dfc:	2301      	movs	r3, #1
    9dfe:	9300      	str	r3, [sp, #0]
    9e00:	e78a      	b.n	9d18 <mayfly_run+0x10>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    9e02:	9b01      	ldr	r3, [sp, #4]
    9e04:	2b00      	cmp	r3, #0
    9e06:	d007      	beq.n	9e18 <mayfly_run+0x110>
    9e08:	9b00      	ldr	r3, [sp, #0]
    9e0a:	2b00      	cmp	r3, #0
    9e0c:	d104      	bne.n	9e18 <mayfly_run+0x110>
		mayfly_enable_cb(callee_id, callee_id, 0);
    9e0e:	001a      	movs	r2, r3
    9e10:	0029      	movs	r1, r5
    9e12:	0028      	movs	r0, r5
    9e14:	f007 fd16 	bl	11844 <mayfly_enable_cb>
	}
}
    9e18:	b007      	add	sp, #28
    9e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e1c:	20001040 	.word	0x20001040

00009e20 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    9e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9e22:	0014      	movs	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    9e24:	2203      	movs	r2, #3

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    9e26:	0005      	movs	r5, r0
	*mem_head = mem_pool;
    9e28:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    9e2a:	1dc3      	adds	r3, r0, #7

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    9e2c:	1e60      	subs	r0, r4, #1
    9e2e:	b280      	uxth	r0, r0
    9e30:	4348      	muls	r0, r1
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    9e32:	4393      	bics	r3, r2
    9e34:	801c      	strh	r4, [r3, #0]

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    9e36:	000e      	movs	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    9e38:	1828      	adds	r0, r5, r0
    9e3a:	3201      	adds	r2, #1
    9e3c:	2100      	movs	r1, #0
    9e3e:	f7f7 fabb 	bl	13b8 <memset>
    9e42:	3c02      	subs	r4, #2
	       sizeof(mem_pool));
	while (mem_count--) {
    9e44:	4b08      	ldr	r3, [pc, #32]	; (9e68 <mem_init+0x48>)
    9e46:	b2a4      	uxth	r4, r4
    9e48:	429c      	cmp	r4, r3
    9e4a:	d00b      	beq.n	9e64 <mem_init+0x44>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    9e4c:	1c60      	adds	r0, r4, #1
    9e4e:	4370      	muls	r0, r6
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    9e50:	182b      	adds	r3, r5, r0
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    9e52:	1b80      	subs	r0, r0, r6
    9e54:	1828      	adds	r0, r5, r0
    9e56:	2204      	movs	r2, #4
    9e58:	a901      	add	r1, sp, #4
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
    9e5a:	9301      	str	r3, [sp, #4]
    9e5c:	3c01      	subs	r4, #1
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    9e5e:	f7f7 fa81 	bl	1364 <memcpy>
    9e62:	e7ef      	b.n	9e44 <mem_init+0x24>
		       (void *)&next, sizeof(next));
	}
}
    9e64:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    9e66:	46c0      	nop			; (mov r8, r8)
    9e68:	0000ffff 	.word	0x0000ffff

00009e6c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    9e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (*mem_head) {
    9e6e:	6805      	ldr	r5, [r0, #0]
		       (void *)&next, sizeof(next));
	}
}

void *mem_acquire(void **mem_head)
{
    9e70:	0006      	movs	r6, r0
	if (*mem_head) {
    9e72:	2d00      	cmp	r5, #0
    9e74:	d011      	beq.n	9e9a <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    9e76:	2703      	movs	r7, #3
    9e78:	1deb      	adds	r3, r5, #7
    9e7a:	43bb      	bics	r3, r7
    9e7c:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    9e7e:	2204      	movs	r2, #4
    9e80:	0029      	movs	r1, r5
    9e82:	a801      	add	r0, sp, #4
    9e84:	f7f7 fa6e 	bl	1364 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    9e88:	9b01      	ldr	r3, [sp, #4]
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;
    9e8a:	3c01      	subs	r4, #1
    9e8c:	b2a4      	uxth	r4, r4

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));

		/* Store free mem_count after the list's next pointer */
		if (head) {
    9e8e:	2b00      	cmp	r3, #0
    9e90:	d002      	beq.n	9e98 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    9e92:	1dda      	adds	r2, r3, #7
    9e94:	43ba      	bics	r2, r7
    9e96:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    9e98:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    9e9a:	0028      	movs	r0, r5
    9e9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00009e9e <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    9e9e:	680b      	ldr	r3, [r1, #0]

	return NULL;
}

void mem_release(void *mem, void **mem_head)
{
    9ea0:	b570      	push	{r4, r5, r6, lr}
    9ea2:	0005      	movs	r5, r0
    9ea4:	000c      	movs	r4, r1
	u16_t free_count = 0;
    9ea6:	1e1e      	subs	r6, r3, #0

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    9ea8:	d003      	beq.n	9eb2 <mem_release+0x14>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    9eaa:	2203      	movs	r2, #3
    9eac:	3307      	adds	r3, #7
    9eae:	4393      	bics	r3, r2
    9eb0:	881e      	ldrh	r6, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    9eb2:	0028      	movs	r0, r5
    9eb4:	2204      	movs	r2, #4
    9eb6:	0021      	movs	r1, r4
    9eb8:	f7f7 fa54 	bl	1364 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    9ebc:	2203      	movs	r2, #3
    9ebe:	1deb      	adds	r3, r5, #7
    9ec0:	3601      	adds	r6, #1
    9ec2:	4393      	bics	r3, r2
    9ec4:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    9ec6:	6025      	str	r5, [r4, #0]
}
    9ec8:	bd70      	pop	{r4, r5, r6, pc}

00009eca <mem_free_count_get>:

u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;
    9eca:	1e03      	subs	r3, r0, #0

	/* Get the free count from the list */
	if (mem_head) {
    9ecc:	d003      	beq.n	9ed6 <mem_free_count_get+0xc>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    9ece:	2303      	movs	r3, #3
    9ed0:	3007      	adds	r0, #7
    9ed2:	4398      	bics	r0, r3
    9ed4:	8803      	ldrh	r3, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    9ed6:	0018      	movs	r0, r3
    9ed8:	4770      	bx	lr

00009eda <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
    9eda:	434a      	muls	r2, r1
    9edc:	1880      	adds	r0, r0, r2
}
    9ede:	4770      	bx	lr

00009ee0 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    9ee0:	1a40      	subs	r0, r0, r1
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
    9ee2:	b510      	push	{r4, lr}
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    9ee4:	b280      	uxth	r0, r0
    9ee6:	0011      	movs	r1, r2
    9ee8:	f7f6 f95a 	bl	1a0 <__aeabi_uidiv>
    9eec:	b280      	uxth	r0, r0
}
    9eee:	bd10      	pop	{r4, pc}

00009ef0 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    9ef0:	b510      	push	{r4, lr}
	src += len;
	while (len--) {
    9ef2:	4b06      	ldr	r3, [pc, #24]	; (9f0c <mem_rcopy+0x1c>)
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
}

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    9ef4:	1889      	adds	r1, r1, r2
	while (len--) {
    9ef6:	3a01      	subs	r2, #1
    9ef8:	b292      	uxth	r2, r2
    9efa:	429a      	cmp	r2, r3
    9efc:	d004      	beq.n	9f08 <mem_rcopy+0x18>
		*dst++ = *--src;
    9efe:	3901      	subs	r1, #1
    9f00:	780c      	ldrb	r4, [r1, #0]
    9f02:	7004      	strb	r4, [r0, #0]
    9f04:	3001      	adds	r0, #1
    9f06:	e7f6      	b.n	9ef6 <mem_rcopy+0x6>
	}
}
    9f08:	bd10      	pop	{r4, pc}
    9f0a:	46c0      	nop			; (mov r8, r8)
    9f0c:	0000ffff 	.word	0x0000ffff

00009f10 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    9f10:	1841      	adds	r1, r0, r1
	while (len--) {
    9f12:	4288      	cmp	r0, r1
    9f14:	d006      	beq.n	9f24 <mem_nz+0x14>
    9f16:	3001      	adds	r0, #1
		if (*src++) {
    9f18:	1e43      	subs	r3, r0, #1
    9f1a:	781b      	ldrb	r3, [r3, #0]
    9f1c:	2b00      	cmp	r3, #0
    9f1e:	d0f8      	beq.n	9f12 <mem_nz+0x2>
			return 1;
    9f20:	2001      	movs	r0, #1
    9f22:	e000      	b.n	9f26 <mem_nz+0x16>
		}
	}

	return 0;
    9f24:	2000      	movs	r0, #0
}
    9f26:	4770      	bx	lr

00009f28 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    9f28:	6010      	str	r0, [r2, #0]
    9f2a:	6008      	str	r0, [r1, #0]

	return link;
}
    9f2c:	4770      	bx	lr

00009f2e <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    9f2e:	6813      	ldr	r3, [r2, #0]
    9f30:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    9f32:	6813      	ldr	r3, [r2, #0]
    9f34:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;

	return link;
}
    9f36:	0008      	movs	r0, r1

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;

	/* increment the tail! */
	*tail = link;
    9f38:	6011      	str	r1, [r2, #0]

	return link;
}
    9f3a:	4770      	bx	lr

00009f3c <memq_peek>:
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
		return 0;
    9f3c:	2300      	movs	r3, #0
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    9f3e:	4281      	cmp	r1, r0
    9f40:	d005      	beq.n	9f4e <memq_peek+0x12>
    9f42:	000b      	movs	r3, r1

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    9f44:	2a00      	cmp	r2, #0
    9f46:	d002      	beq.n	9f4e <memq_peek+0x12>
		*mem = *((void **)link + 1);
    9f48:	684b      	ldr	r3, [r1, #4]
    9f4a:	6013      	str	r3, [r2, #0]
    9f4c:	000b      	movs	r3, r1
	}

	return link;
}
    9f4e:	0018      	movs	r0, r3
    9f50:	4770      	bx	lr

00009f52 <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    9f52:	680b      	ldr	r3, [r1, #0]
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    9f54:	4283      	cmp	r3, r0
    9f56:	d004      	beq.n	9f62 <memq_dequeue+0x10>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    9f58:	2a00      	cmp	r2, #0
    9f5a:	d005      	beq.n	9f68 <memq_dequeue+0x16>
		*mem = *((void **)link + 1);
    9f5c:	6858      	ldr	r0, [r3, #4]
    9f5e:	6010      	str	r0, [r2, #0]
    9f60:	e002      	b.n	9f68 <memq_dequeue+0x16>

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    9f62:	2300      	movs	r3, #0
    9f64:	681b      	ldr	r3, [r3, #0]
    9f66:	deff      	udf	#255	; 0xff
    9f68:	681a      	ldr	r2, [r3, #0]

	return link;
}
    9f6a:	0018      	movs	r0, r3

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    9f6c:	600a      	str	r2, [r1, #0]

	return link;
}
    9f6e:	4770      	bx	lr

00009f70 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    9f70:	0002      	movs	r2, r0
    9f72:	1841      	adds	r1, r0, r1
	u8_t one_count = 0;
    9f74:	2000      	movs	r0, #0

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    9f76:	b510      	push	{r4, lr}
	u8_t one_count = 0;

	while (octets_len--) {
    9f78:	428a      	cmp	r2, r1
    9f7a:	d009      	beq.n	9f90 <util_ones_count_get+0x20>
		u8_t bite;

		bite = *octets;
    9f7c:	7814      	ldrb	r4, [r2, #0]
		while (bite) {
    9f7e:	2c00      	cmp	r4, #0
    9f80:	d004      	beq.n	9f8c <util_ones_count_get+0x1c>
			bite &= (bite - 1);
    9f82:	1e63      	subs	r3, r4, #1
    9f84:	401c      	ands	r4, r3
			one_count++;
    9f86:	1c43      	adds	r3, r0, #1
    9f88:	b2d8      	uxtb	r0, r3
    9f8a:	e7f8      	b.n	9f7e <util_ones_count_get+0xe>
		}
		octets++;
    9f8c:	3201      	adds	r2, #1
    9f8e:	e7f3      	b.n	9f78 <util_ones_count_get+0x8>
	}

	return one_count;
}
    9f90:	bd10      	pop	{r4, pc}
	...

00009f94 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    9f94:	22a1      	movs	r2, #161	; 0xa1
    9f96:	2100      	movs	r1, #0
    9f98:	4b05      	ldr	r3, [pc, #20]	; (9fb0 <cntr_init+0x1c>)
    9f9a:	00d2      	lsls	r2, r2, #3
    9f9c:	5099      	str	r1, [r3, r2]
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    9f9e:	22c0      	movs	r2, #192	; 0xc0
    9fa0:	21d1      	movs	r1, #209	; 0xd1
    9fa2:	0292      	lsls	r2, r2, #10
    9fa4:	0089      	lsls	r1, r1, #2
    9fa6:	505a      	str	r2, [r3, r1]
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    9fa8:	3940      	subs	r1, #64	; 0x40
    9faa:	505a      	str	r2, [r3, r1]
			     RTC_INTENSET_COMPARE1_Msk);
}
    9fac:	4770      	bx	lr
    9fae:	46c0      	nop			; (mov r8, r8)
    9fb0:	4000b000 	.word	0x4000b000

00009fb4 <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    9fb4:	4a05      	ldr	r2, [pc, #20]	; (9fcc <cntr_start+0x18>)
    9fb6:	2001      	movs	r0, #1
    9fb8:	7813      	ldrb	r3, [r2, #0]
    9fba:	1c59      	adds	r1, r3, #1
    9fbc:	7011      	strb	r1, [r2, #0]
    9fbe:	2b00      	cmp	r3, #0
    9fc0:	d102      	bne.n	9fc8 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    9fc2:	4a03      	ldr	r2, [pc, #12]	; (9fd0 <cntr_start+0x1c>)
    9fc4:	6010      	str	r0, [r2, #0]

	return 0;
    9fc6:	0018      	movs	r0, r3
}
    9fc8:	4770      	bx	lr
    9fca:	46c0      	nop			; (mov r8, r8)
    9fcc:	20001100 	.word	0x20001100
    9fd0:	4000b000 	.word	0x4000b000

00009fd4 <cntr_stop>:

u32_t cntr_stop(void)
{
    9fd4:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
    9fd6:	4a0d      	ldr	r2, [pc, #52]	; (a00c <cntr_stop+0x38>)
    9fd8:	7813      	ldrb	r3, [r2, #0]
    9fda:	2b00      	cmp	r3, #0
    9fdc:	d10c      	bne.n	9ff8 <cntr_stop+0x24>
    9fde:	4b0c      	ldr	r3, [pc, #48]	; (a010 <cntr_stop+0x3c>)
    9fe0:	4a0c      	ldr	r2, [pc, #48]	; (a014 <cntr_stop+0x40>)
    9fe2:	9301      	str	r3, [sp, #4]
    9fe4:	4b0c      	ldr	r3, [pc, #48]	; (a018 <cntr_stop+0x44>)
    9fe6:	490d      	ldr	r1, [pc, #52]	; (a01c <cntr_stop+0x48>)
    9fe8:	9300      	str	r3, [sp, #0]
    9fea:	480d      	ldr	r0, [pc, #52]	; (a020 <cntr_stop+0x4c>)
    9fec:	4b0d      	ldr	r3, [pc, #52]	; (a024 <cntr_stop+0x50>)
    9fee:	f7f7 fbbb 	bl	1768 <printk>
    9ff2:	b662      	cpsie	i
    9ff4:	2004      	movs	r0, #4
    9ff6:	df02      	svc	2

	if (--_refcount) {
    9ff8:	3b01      	subs	r3, #1
    9ffa:	b2db      	uxtb	r3, r3
    9ffc:	7013      	strb	r3, [r2, #0]
    9ffe:	2001      	movs	r0, #1
    a000:	2b00      	cmp	r3, #0
    a002:	d102      	bne.n	a00a <cntr_stop+0x36>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    a004:	4a08      	ldr	r2, [pc, #32]	; (a028 <cntr_stop+0x54>)
    a006:	6050      	str	r0, [r2, #4]

	return 0;
    a008:	0018      	movs	r0, r3
}
    a00a:	bd0e      	pop	{r1, r2, r3, pc}
    a00c:	20001100 	.word	0x20001100
    a010:	000145b0 	.word	0x000145b0
    a014:	00014570 	.word	0x00014570
    a018:	000145b5 	.word	0x000145b5
    a01c:	00014577 	.word	0x00014577
    a020:	0001596e 	.word	0x0001596e
    a024:	00016e34 	.word	0x00016e34
    a028:	4000b000 	.word	0x4000b000

0000a02c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    a02c:	4b01      	ldr	r3, [pc, #4]	; (a034 <cntr_cnt_get+0x8>)
    a02e:	4a02      	ldr	r2, [pc, #8]	; (a038 <cntr_cnt_get+0xc>)
    a030:	58d0      	ldr	r0, [r2, r3]
}
    a032:	4770      	bx	lr
    a034:	00000504 	.word	0x00000504
    a038:	4000b000 	.word	0x4000b000

0000a03c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    a03c:	3051      	adds	r0, #81	; 0x51
    a03e:	4b02      	ldr	r3, [pc, #8]	; (a048 <cntr_cmp_set+0xc>)
    a040:	30ff      	adds	r0, #255	; 0xff
    a042:	0080      	lsls	r0, r0, #2
    a044:	50c1      	str	r1, [r0, r3]
}
    a046:	4770      	bx	lr
    a048:	4000b000 	.word	0x4000b000

0000a04c <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    a04c:	2101      	movs	r1, #1
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    a04e:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    a050:	4b0f      	ldr	r3, [pc, #60]	; (a090 <do_ecb+0x44>)
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    a052:	4c10      	ldr	r4, [pc, #64]	; (a094 <do_ecb+0x48>)
    a054:	2500      	movs	r5, #0

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    a056:	4a10      	ldr	r2, [pc, #64]	; (a098 <do_ecb+0x4c>)
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    a058:	6059      	str	r1, [r3, #4]
    a05a:	0017      	movs	r7, r2
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    a05c:	5098      	str	r0, [r3, r2]
		NRF_ECB->EVENTS_ENDECB = 0;
    a05e:	6065      	str	r5, [r4, #4]
		NRF_ECB->EVENTS_ERRORECB = 0;
    a060:	60a5      	str	r5, [r4, #8]
    a062:	4d0c      	ldr	r5, [pc, #48]	; (a094 <do_ecb+0x48>)
		NRF_ECB->TASKS_STARTECB = 1;
    a064:	6019      	str	r1, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    a066:	686e      	ldr	r6, [r5, #4]
    a068:	2e00      	cmp	r6, #0
    a06a:	d105      	bne.n	a078 <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    a06c:	68a6      	ldr	r6, [r4, #8]
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    a06e:	2e00      	cmp	r6, #0
    a070:	d102      	bne.n	a078 <do_ecb+0x2c>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
    a072:	59de      	ldr	r6, [r3, r7]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    a074:	2e00      	cmp	r6, #0
    a076:	d1f6      	bne.n	a066 <do_ecb+0x1a>
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    a078:	4e05      	ldr	r6, [pc, #20]	; (a090 <do_ecb+0x44>)
    a07a:	6071      	str	r1, [r6, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    a07c:	68ad      	ldr	r5, [r5, #8]
    a07e:	2d00      	cmp	r5, #0
    a080:	d1e8      	bne.n	a054 <do_ecb+0x8>
    a082:	589a      	ldr	r2, [r3, r2]
    a084:	2a00      	cmp	r2, #0
    a086:	d0e5      	beq.n	a054 <do_ecb+0x8>

	NRF_ECB->ECBDATAPTR = 0;
    a088:	4b03      	ldr	r3, [pc, #12]	; (a098 <do_ecb+0x4c>)
    a08a:	50f5      	str	r5, [r6, r3]
}
    a08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a08e:	46c0      	nop			; (mov r8, r8)
    a090:	4000e000 	.word	0x4000e000
    a094:	4000e0fc 	.word	0x4000e0fc
    a098:	00000504 	.word	0x00000504

0000a09c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    a09c:	b570      	push	{r4, r5, r6, lr}
    a09e:	000e      	movs	r6, r1
    a0a0:	b08c      	sub	sp, #48	; 0x30
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    a0a2:	0001      	movs	r1, r0
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    a0a4:	0015      	movs	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    a0a6:	4668      	mov	r0, sp
    a0a8:	2210      	movs	r2, #16
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    a0aa:	001c      	movs	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    a0ac:	f7ff ff20 	bl	9ef0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    a0b0:	a804      	add	r0, sp, #16
    a0b2:	2210      	movs	r2, #16
    a0b4:	0031      	movs	r1, r6
    a0b6:	f7ff ff1b 	bl	9ef0 <mem_rcopy>

	do_ecb(&ecb);
    a0ba:	4668      	mov	r0, sp
    a0bc:	f7ff ffc6 	bl	a04c <do_ecb>

	if (cipher_text_le) {
    a0c0:	2d00      	cmp	r5, #0
    a0c2:	d004      	beq.n	a0ce <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    a0c4:	2210      	movs	r2, #16
    a0c6:	a908      	add	r1, sp, #32
    a0c8:	0028      	movs	r0, r5
    a0ca:	f7ff ff11 	bl	9ef0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    a0ce:	2c00      	cmp	r4, #0
    a0d0:	d004      	beq.n	a0dc <ecb_encrypt+0x40>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    a0d2:	2210      	movs	r2, #16
    a0d4:	a908      	add	r1, sp, #32
    a0d6:	0020      	movs	r0, r4
    a0d8:	f7f7 f944 	bl	1364 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    a0dc:	b00c      	add	sp, #48	; 0x30
    a0de:	bd70      	pop	{r4, r5, r6, pc}

0000a0e0 <isr_radio>:

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
	if (sfp_radio_isr) {
    a0e0:	4b03      	ldr	r3, [pc, #12]	; (a0f0 <isr_radio+0x10>)
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    a0e2:	b510      	push	{r4, lr}
	if (sfp_radio_isr) {
    a0e4:	681b      	ldr	r3, [r3, #0]
    a0e6:	2b00      	cmp	r3, #0
    a0e8:	d000      	beq.n	a0ec <isr_radio+0xc>
		sfp_radio_isr();
    a0ea:	4798      	blx	r3
	}
}
    a0ec:	bd10      	pop	{r4, pc}
    a0ee:	46c0      	nop			; (mov r8, r8)
    a0f0:	2000115c 	.word	0x2000115c

0000a0f4 <radio_isr_set>:

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    a0f4:	4b08      	ldr	r3, [pc, #32]	; (a118 <radio_isr_set+0x24>)
		sfp_radio_isr();
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    a0f6:	b510      	push	{r4, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    a0f8:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    a0fa:	23c1      	movs	r3, #193	; 0xc1
    a0fc:	2110      	movs	r1, #16
    a0fe:	4a07      	ldr	r2, [pc, #28]	; (a11c <radio_isr_set+0x28>)
    a100:	009b      	lsls	r3, r3, #2
    a102:	50d1      	str	r1, [r2, r3]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    a104:	4a06      	ldr	r2, [pc, #24]	; (a120 <radio_isr_set+0x2c>)
    a106:	3b85      	subs	r3, #133	; 0x85
    a108:	390e      	subs	r1, #14
    a10a:	3bff      	subs	r3, #255	; 0xff
    a10c:	50d1      	str	r1, [r2, r3]
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    a10e:	2001      	movs	r0, #1
    a110:	f008 fc44 	bl	1299c <_arch_irq_enable>
}
    a114:	bd10      	pop	{r4, pc}
    a116:	46c0      	nop			; (mov r8, r8)
    a118:	2000115c 	.word	0x2000115c
    a11c:	40001000 	.word	0x40001000
    a120:	e000e100 	.word	0xe000e100

0000a124 <radio_reset>:

void radio_reset(void)
{
    a124:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
    a126:	2001      	movs	r0, #1
    a128:	f008 fc42 	bl	129b0 <_arch_irq_disable>

	NRF_RADIO->POWER =
    a12c:	2100      	movs	r1, #0
    a12e:	4a03      	ldr	r2, [pc, #12]	; (a13c <radio_reset+0x18>)
    a130:	4b03      	ldr	r3, [pc, #12]	; (a140 <radio_reset+0x1c>)
    a132:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    a134:	3101      	adds	r1, #1
    a136:	50d1      	str	r1, [r2, r3]
	    ((RADIO_POWER_POWER_Enabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
}
    a138:	bd10      	pop	{r4, pc}
    a13a:	46c0      	nop			; (mov r8, r8)
    a13c:	40001000 	.word	0x40001000
    a140:	00000ffc 	.word	0x00000ffc

0000a144 <radio_phy_set>:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

#if defined(CONFIG_SOC_SERIES_NRF51X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
    a144:	2301      	movs	r3, #1

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    a146:	2802      	cmp	r0, #2
    a148:	d000      	beq.n	a14c <radio_phy_set+0x8>
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    a14a:	3302      	adds	r3, #2
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    a14c:	22a2      	movs	r2, #162	; 0xa2
    a14e:	4902      	ldr	r1, [pc, #8]	; (a158 <radio_phy_set+0x14>)
    a150:	00d2      	lsls	r2, r2, #3
    a152:	508b      	str	r3, [r1, r2]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_RADIO_ENABLE_FAST)
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
				RADIO_MODECNF0_RU_Pos) &
			       RADIO_MODECNF0_RU_Msk;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_RADIO_ENABLE_FAST */
}
    a154:	4770      	bx	lr
    a156:	46c0      	nop			; (mov r8, r8)
    a158:	40001000 	.word	0x40001000

0000a15c <radio_tx_power_set>:

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    a15c:	4b01      	ldr	r3, [pc, #4]	; (a164 <radio_tx_power_set+0x8>)
    a15e:	4a02      	ldr	r2, [pc, #8]	; (a168 <radio_tx_power_set+0xc>)
    a160:	50d0      	str	r0, [r2, r3]
}
    a162:	4770      	bx	lr
    a164:	0000050c 	.word	0x0000050c
    a168:	40001000 	.word	0x40001000

0000a16c <radio_freq_chan_set>:

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    a16c:	23a1      	movs	r3, #161	; 0xa1
    a16e:	4a02      	ldr	r2, [pc, #8]	; (a178 <radio_freq_chan_set+0xc>)
    a170:	00db      	lsls	r3, r3, #3
    a172:	50d0      	str	r0, [r2, r3]
}
    a174:	4770      	bx	lr
    a176:	46c0      	nop			; (mov r8, r8)
    a178:	40001000 	.word	0x40001000

0000a17c <radio_whiten_iv_set>:

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    a17c:	4b01      	ldr	r3, [pc, #4]	; (a184 <radio_whiten_iv_set+0x8>)
    a17e:	4a02      	ldr	r2, [pc, #8]	; (a188 <radio_whiten_iv_set+0xc>)
    a180:	50d0      	str	r0, [r2, r3]
}
    a182:	4770      	bx	lr
    a184:	00000554 	.word	0x00000554
    a188:	40001000 	.word	0x40001000

0000a18c <radio_aa_set>:

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    a18c:	2200      	movs	r2, #0
    a18e:	490a      	ldr	r1, [pc, #40]	; (a1b8 <radio_aa_set+0x2c>)
    a190:	4b0a      	ldr	r3, [pc, #40]	; (a1bc <radio_aa_set+0x30>)
    a192:	50ca      	str	r2, [r1, r3]
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    a194:	3201      	adds	r2, #1
    a196:	3304      	adds	r3, #4
    a198:	50ca      	str	r2, [r1, r3]
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    a19a:	78c2      	ldrb	r2, [r0, #3]
    a19c:	4b08      	ldr	r3, [pc, #32]	; (a1c0 <radio_aa_set+0x34>)
    a19e:	50ca      	str	r2, [r1, r3]
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    a1a0:	7883      	ldrb	r3, [r0, #2]
    a1a2:	061a      	lsls	r2, r3, #24
    a1a4:	7843      	ldrb	r3, [r0, #1]
    a1a6:	041b      	lsls	r3, r3, #16
    a1a8:	4313      	orrs	r3, r2
    a1aa:	7802      	ldrb	r2, [r0, #0]
    a1ac:	0212      	lsls	r2, r2, #8
    a1ae:	4313      	orrs	r3, r2
    a1b0:	4a04      	ldr	r2, [pc, #16]	; (a1c4 <radio_aa_set+0x38>)
    a1b2:	508b      	str	r3, [r1, r2]
}
    a1b4:	4770      	bx	lr
    a1b6:	46c0      	nop			; (mov r8, r8)
    a1b8:	40001000 	.word	0x40001000
    a1bc:	0000052c 	.word	0x0000052c
    a1c0:	00000524 	.word	0x00000524
    a1c4:	0000051c 	.word	0x0000051c

0000a1c8 <radio_pkt_configure>:
	ARG_UNUSED(phy);

	extra = 0;

	/* nRF51 supports only 27 byte PDU when using h/w CCM for encryption. */
	if (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR) && dc) {
    a1c8:	07d3      	lsls	r3, r2, #31
    a1ca:	d500      	bpl.n	a1ce <radio_pkt_configure+0x6>
		bits_len = 5;
    a1cc:	2005      	movs	r0, #5
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
    a1ce:	2208      	movs	r2, #8
    a1d0:	23f0      	movs	r3, #240	; 0xf0
    a1d2:	1a12      	subs	r2, r2, r0
    a1d4:	031b      	lsls	r3, r3, #12
    a1d6:	0412      	lsls	r2, r2, #16
    a1d8:	401a      	ands	r2, r3
    a1da:	230f      	movs	r3, #15
    a1dc:	4003      	ands	r3, r0
    a1de:	2080      	movs	r0, #128	; 0x80
    a1e0:	0040      	lsls	r0, r0, #1
    a1e2:	4318      	orrs	r0, r3
    a1e4:	4310      	orrs	r0, r2
		extra |= (RADIO_PCNF0_S1INCL_Include <<
			  RADIO_PCNF0_S1INCL_Pos) & RADIO_PCNF0_S1INCL_Msk;
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    a1e6:	4b04      	ldr	r3, [pc, #16]	; (a1f8 <radio_pkt_configure+0x30>)
    a1e8:	4a04      	ldr	r2, [pc, #16]	; (a1fc <radio_pkt_configure+0x34>)
    a1ea:	5098      	str	r0, [r3, r2]
			       RADIO_PCNF1_STATLEN_Msk) |
			     (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			       RADIO_PCNF1_BALEN_Msk) |
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
    a1ec:	4a04      	ldr	r2, [pc, #16]	; (a200 <radio_pkt_configure+0x38>)
    a1ee:	4311      	orrs	r1, r2
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
			    RADIO_PCNF0_S1LEN_Msk) |
			   extra;

	NRF_RADIO->PCNF1 = (((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    a1f0:	22a3      	movs	r2, #163	; 0xa3
    a1f2:	00d2      	lsls	r2, r2, #3
    a1f4:	5099      	str	r1, [r3, r2]
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
			     (((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
			       RADIO_PCNF1_WHITEEN_Msk));
}
    a1f6:	4770      	bx	lr
    a1f8:	40001000 	.word	0x40001000
    a1fc:	00000514 	.word	0x00000514
    a200:	02030000 	.word	0x02030000

0000a204 <radio_pkt_rx_set>:
    a204:	4b01      	ldr	r3, [pc, #4]	; (a20c <radio_pkt_rx_set+0x8>)
    a206:	4a02      	ldr	r2, [pc, #8]	; (a210 <radio_pkt_rx_set+0xc>)
    a208:	50d0      	str	r0, [r2, r3]
    a20a:	4770      	bx	lr
    a20c:	00000504 	.word	0x00000504
    a210:	40001000 	.word	0x40001000

0000a214 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    a214:	4b01      	ldr	r3, [pc, #4]	; (a21c <radio_pkt_tx_set+0x8>)
    a216:	4a02      	ldr	r2, [pc, #8]	; (a220 <radio_pkt_tx_set+0xc>)
    a218:	50d0      	str	r0, [r2, r3]
}
    a21a:	4770      	bx	lr
    a21c:	00000504 	.word	0x00000504
    a220:	40001000 	.word	0x40001000

0000a224 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    a224:	208c      	movs	r0, #140	; 0x8c
    a226:	4770      	bx	lr

0000a228 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    a228:	2001      	movs	r0, #1
    a22a:	4770      	bx	lr

0000a22c <radio_rx_ready_delay_get>:
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    a22c:	208a      	movs	r0, #138	; 0x8a
    a22e:	4770      	bx	lr

0000a230 <radio_rx_chain_delay_get>:
	case BIT(1):
		return 5; /* ceil(5) */
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    a230:	2003      	movs	r0, #3
    a232:	4770      	bx	lr

0000a234 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    a234:	2201      	movs	r2, #1
    a236:	4b01      	ldr	r3, [pc, #4]	; (a23c <radio_rx_enable+0x8>)
    a238:	605a      	str	r2, [r3, #4]
}
    a23a:	4770      	bx	lr
    a23c:	40001000 	.word	0x40001000

0000a240 <radio_tx_enable>:

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    a240:	2201      	movs	r2, #1
    a242:	4b01      	ldr	r3, [pc, #4]	; (a248 <radio_tx_enable+0x8>)
    a244:	601a      	str	r2, [r3, #0]
}
    a246:	4770      	bx	lr
    a248:	40001000 	.word	0x40001000

0000a24c <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    a24c:	2280      	movs	r2, #128	; 0x80
    a24e:	2100      	movs	r1, #0
    a250:	4b02      	ldr	r3, [pc, #8]	; (a25c <radio_disable+0x10>)
    a252:	0092      	lsls	r2, r2, #2
    a254:	5099      	str	r1, [r3, r2]
	NRF_RADIO->TASKS_DISABLE = 1;
    a256:	2201      	movs	r2, #1
    a258:	611a      	str	r2, [r3, #16]
}
    a25a:	4770      	bx	lr
    a25c:	40001000 	.word	0x40001000

0000a260 <radio_status_reset>:

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    a260:	2200      	movs	r2, #0
    a262:	4b03      	ldr	r3, [pc, #12]	; (a270 <radio_status_reset+0x10>)
    a264:	605a      	str	r2, [r3, #4]
	NRF_RADIO->EVENTS_ADDRESS = 0;
    a266:	609a      	str	r2, [r3, #8]
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    a268:	60da      	str	r2, [r3, #12]
	NRF_RADIO->EVENTS_END = 0;
    a26a:	611a      	str	r2, [r3, #16]
	NRF_RADIO->EVENTS_DISABLED = 0;
    a26c:	615a      	str	r2, [r3, #20]
}
    a26e:	4770      	bx	lr
    a270:	400010fc 	.word	0x400010fc

0000a274 <radio_is_ready>:

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    a274:	4b02      	ldr	r3, [pc, #8]	; (a280 <radio_is_ready+0xc>)
    a276:	6858      	ldr	r0, [r3, #4]
    a278:	1e43      	subs	r3, r0, #1
    a27a:	4198      	sbcs	r0, r3
}
    a27c:	4770      	bx	lr
    a27e:	46c0      	nop			; (mov r8, r8)
    a280:	400010fc 	.word	0x400010fc

0000a284 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    a284:	4b02      	ldr	r3, [pc, #8]	; (a290 <radio_is_done+0xc>)
    a286:	6918      	ldr	r0, [r3, #16]
    a288:	1e43      	subs	r3, r0, #1
    a28a:	4198      	sbcs	r0, r3
}
    a28c:	4770      	bx	lr
    a28e:	46c0      	nop			; (mov r8, r8)
    a290:	400010fc 	.word	0x400010fc

0000a294 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    a294:	23aa      	movs	r3, #170	; 0xaa
    a296:	4a03      	ldr	r2, [pc, #12]	; (a2a4 <radio_is_idle+0x10>)
    a298:	00db      	lsls	r3, r3, #3
    a29a:	58d0      	ldr	r0, [r2, r3]
    a29c:	4243      	negs	r3, r0
    a29e:	4158      	adcs	r0, r3
}
    a2a0:	4770      	bx	lr
    a2a2:	46c0      	nop			; (mov r8, r8)
    a2a4:	40001000 	.word	0x40001000

0000a2a8 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
    a2a8:	b510      	push	{r4, lr}
	NRF_RADIO->CRCCNF =
    a2aa:	2404      	movs	r4, #4
    a2ac:	4b04      	ldr	r3, [pc, #16]	; (a2c0 <radio_crc_configure+0x18>)
    a2ae:	4a05      	ldr	r2, [pc, #20]	; (a2c4 <radio_crc_configure+0x1c>)
    a2b0:	34ff      	adds	r4, #255	; 0xff
    a2b2:	509c      	str	r4, [r3, r2]
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    a2b4:	3204      	adds	r2, #4
    a2b6:	5098      	str	r0, [r3, r2]
	NRF_RADIO->CRCINIT = iv;
    a2b8:	4a03      	ldr	r2, [pc, #12]	; (a2c8 <radio_crc_configure+0x20>)
    a2ba:	5099      	str	r1, [r3, r2]
}
    a2bc:	bd10      	pop	{r4, pc}
    a2be:	46c0      	nop			; (mov r8, r8)
    a2c0:	40001000 	.word	0x40001000
    a2c4:	00000534 	.word	0x00000534
    a2c8:	0000053c 	.word	0x0000053c

0000a2cc <radio_crc_is_valid>:

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    a2cc:	2380      	movs	r3, #128	; 0x80
    a2ce:	4a03      	ldr	r2, [pc, #12]	; (a2dc <radio_crc_is_valid+0x10>)
    a2d0:	00db      	lsls	r3, r3, #3
    a2d2:	58d0      	ldr	r0, [r2, r3]
    a2d4:	1e43      	subs	r3, r0, #1
    a2d6:	4198      	sbcs	r0, r3
}
    a2d8:	4770      	bx	lr
    a2da:	46c0      	nop			; (mov r8, r8)
    a2dc:	40001000 	.word	0x40001000

0000a2e0 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    a2e0:	4800      	ldr	r0, [pc, #0]	; (a2e4 <radio_pkt_empty_get+0x4>)
    a2e2:	4770      	bx	lr
    a2e4:	2000112c 	.word	0x2000112c

0000a2e8 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    a2e8:	4800      	ldr	r0, [pc, #0]	; (a2ec <radio_pkt_scratch_get+0x4>)
    a2ea:	4770      	bx	lr
    a2ec:	20001104 	.word	0x20001104

0000a2f0 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a2f0:	2380      	movs	r3, #128	; 0x80
    a2f2:	210b      	movs	r1, #11
    a2f4:	4a01      	ldr	r2, [pc, #4]	; (a2fc <radio_switch_complete_and_rx+0xc>)
    a2f6:	009b      	lsls	r3, r3, #2
    a2f8:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, phy, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    a2fa:	4770      	bx	lr
    a2fc:	40001000 	.word	0x40001000

0000a300 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy, u8_t flags)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a300:	2380      	movs	r3, #128	; 0x80
    a302:	2107      	movs	r1, #7
    a304:	4a01      	ldr	r2, [pc, #4]	; (a30c <radio_switch_complete_and_tx+0xc>)
    a306:	009b      	lsls	r3, r3, #2
    a308:	50d1      	str	r1, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy, flags);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    a30a:	4770      	bx	lr
    a30c:	40001000 	.word	0x40001000

0000a310 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    a310:	2380      	movs	r3, #128	; 0x80
    a312:	2103      	movs	r1, #3
    a314:	4a01      	ldr	r2, [pc, #4]	; (a31c <radio_switch_complete_and_disable+0xc>)
    a316:	009b      	lsls	r3, r3, #2
    a318:	50d1      	str	r1, [r2, r3]
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_PPI->CHENCLR = PPI_CHEN_CH8_Msk | PPI_CHEN_CH11_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    a31a:	4770      	bx	lr
    a31c:	40001000 	.word	0x40001000

0000a320 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    a320:	2280      	movs	r2, #128	; 0x80
    a322:	2088      	movs	r0, #136	; 0x88
    a324:	4903      	ldr	r1, [pc, #12]	; (a334 <radio_rssi_measure+0x14>)
    a326:	0092      	lsls	r2, r2, #2
    a328:	588b      	ldr	r3, [r1, r2]
    a32a:	0040      	lsls	r0, r0, #1
    a32c:	4303      	orrs	r3, r0
    a32e:	508b      	str	r3, [r1, r2]
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    a330:	4770      	bx	lr
    a332:	46c0      	nop			; (mov r8, r8)
    a334:	40001000 	.word	0x40001000

0000a338 <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    a338:	23a9      	movs	r3, #169	; 0xa9
    a33a:	4a02      	ldr	r2, [pc, #8]	; (a344 <radio_rssi_get+0xc>)
    a33c:	00db      	lsls	r3, r3, #3
    a33e:	58d0      	ldr	r0, [r2, r3]
}
    a340:	4770      	bx	lr
    a342:	46c0      	nop			; (mov r8, r8)
    a344:	40001000 	.word	0x40001000

0000a348 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    a348:	2200      	movs	r2, #0
    a34a:	4b01      	ldr	r3, [pc, #4]	; (a350 <radio_rssi_status_reset+0x8>)
    a34c:	621a      	str	r2, [r3, #32]
}
    a34e:	4770      	bx	lr
    a350:	400010fc 	.word	0x400010fc

0000a354 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    a354:	4b02      	ldr	r3, [pc, #8]	; (a360 <radio_rssi_is_ready+0xc>)
    a356:	6a18      	ldr	r0, [r3, #32]
    a358:	1e43      	subs	r3, r0, #1
    a35a:	4198      	sbcs	r0, r3
}
    a35c:	4770      	bx	lr
    a35e:	46c0      	nop			; (mov r8, r8)
    a360:	400010fc 	.word	0x400010fc

0000a364 <radio_filter_configure>:
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    a364:	23c0      	movs	r3, #192	; 0xc0
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
}

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    a366:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    a368:	00db      	lsls	r3, r3, #3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    a36a:	27c4      	movs	r7, #196	; 0xc4
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
}

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    a36c:	2600      	movs	r6, #0
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    a36e:	469c      	mov	ip, r3
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    a370:	00ff      	lsls	r7, r7, #3
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    a372:	7854      	ldrb	r4, [r2, #1]
    a374:	7813      	ldrb	r3, [r2, #0]
    a376:	0224      	lsls	r4, r4, #8
    a378:	431c      	orrs	r4, r3
    a37a:	7893      	ldrb	r3, [r2, #2]
    a37c:	4d0d      	ldr	r5, [pc, #52]	; (a3b4 <radio_filter_configure+0x50>)
    a37e:	041b      	lsls	r3, r3, #16
    a380:	4323      	orrs	r3, r4
    a382:	001c      	movs	r4, r3
    a384:	78d3      	ldrb	r3, [r2, #3]
    a386:	061b      	lsls	r3, r3, #24
    a388:	4323      	orrs	r3, r4
    a38a:	00b4      	lsls	r4, r6, #2
    a38c:	1964      	adds	r4, r4, r5
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    a38e:	4665      	mov	r5, ip
    a390:	5163      	str	r3, [r4, r5]
    a392:	7953      	ldrb	r3, [r2, #5]
    a394:	7915      	ldrb	r5, [r2, #4]
    a396:	021b      	lsls	r3, r3, #8
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    a398:	432b      	orrs	r3, r5
    a39a:	3601      	adds	r6, #1
    a39c:	51e3      	str	r3, [r4, r7]
		bdaddr += 6;
    a39e:	3206      	adds	r2, #6
void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
	u8_t index;

	for (index = 0; index < 8; index++) {
    a3a0:	2e08      	cmp	r6, #8
    a3a2:	d1e6      	bne.n	a372 <radio_filter_configure+0xe>
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    a3a4:	23c8      	movs	r3, #200	; 0xc8
    a3a6:	0209      	lsls	r1, r1, #8
    a3a8:	4a02      	ldr	r2, [pc, #8]	; (a3b4 <radio_filter_configure+0x50>)
    a3aa:	4308      	orrs	r0, r1
    a3ac:	00db      	lsls	r3, r3, #3
    a3ae:	50d0      	str	r0, [r2, r3]
}
    a3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3b2:	46c0      	nop			; (mov r8, r8)
    a3b4:	40001000 	.word	0x40001000

0000a3b8 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    a3b8:	22c8      	movs	r2, #200	; 0xc8
    a3ba:	20ff      	movs	r0, #255	; 0xff
    a3bc:	4902      	ldr	r1, [pc, #8]	; (a3c8 <radio_filter_disable+0x10>)
    a3be:	00d2      	lsls	r2, r2, #3
    a3c0:	588b      	ldr	r3, [r1, r2]
    a3c2:	4383      	bics	r3, r0
    a3c4:	508b      	str	r3, [r1, r2]
}
    a3c6:	4770      	bx	lr
    a3c8:	40001000 	.word	0x40001000

0000a3cc <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    a3cc:	2200      	movs	r2, #0
    a3ce:	4b02      	ldr	r3, [pc, #8]	; (a3d8 <radio_filter_status_reset+0xc>)
    a3d0:	619a      	str	r2, [r3, #24]
	NRF_RADIO->EVENTS_DEVMISS = 0;
    a3d2:	61da      	str	r2, [r3, #28]
}
    a3d4:	4770      	bx	lr
    a3d6:	46c0      	nop			; (mov r8, r8)
    a3d8:	400010fc 	.word	0x400010fc

0000a3dc <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    a3dc:	4b02      	ldr	r3, [pc, #8]	; (a3e8 <radio_filter_has_match+0xc>)
    a3de:	6998      	ldr	r0, [r3, #24]
    a3e0:	1e43      	subs	r3, r0, #1
    a3e2:	4198      	sbcs	r0, r3
}
    a3e4:	4770      	bx	lr
    a3e6:	46c0      	nop			; (mov r8, r8)
    a3e8:	400010fc 	.word	0x400010fc

0000a3ec <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    a3ec:	22ac      	movs	r2, #172	; 0xac
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    a3ee:	2180      	movs	r1, #128	; 0x80
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
}

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    a3f0:	4b04      	ldr	r3, [pc, #16]	; (a404 <radio_bc_configure+0x18>)
    a3f2:	00d2      	lsls	r2, r2, #3
    a3f4:	5098      	str	r0, [r3, r2]
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    a3f6:	2040      	movs	r0, #64	; 0x40
    a3f8:	0089      	lsls	r1, r1, #2
    a3fa:	585a      	ldr	r2, [r3, r1]
    a3fc:	4302      	orrs	r2, r0
    a3fe:	505a      	str	r2, [r3, r1]
}
    a400:	4770      	bx	lr
    a402:	46c0      	nop			; (mov r8, r8)
    a404:	40001000 	.word	0x40001000

0000a408 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    a408:	2180      	movs	r1, #128	; 0x80
    a40a:	23d2      	movs	r3, #210	; 0xd2
    a40c:	4a04      	ldr	r2, [pc, #16]	; (a420 <radio_tmr_status_reset+0x18>)
    a40e:	02c9      	lsls	r1, r1, #11
    a410:	009b      	lsls	r3, r3, #2
    a412:	50d1      	str	r1, [r2, r3]
	NRF_PPI->CHENCLR =
    a414:	21ff      	movs	r1, #255	; 0xff
    a416:	4a03      	ldr	r2, [pc, #12]	; (a424 <radio_tmr_status_reset+0x1c>)
    a418:	33c1      	adds	r3, #193	; 0xc1
    a41a:	33ff      	adds	r3, #255	; 0xff
    a41c:	50d1      	str	r1, [r2, r3]
	    (PPI_CHEN_CH0_Msk | PPI_CHEN_CH1_Msk | PPI_CHEN_CH2_Msk |
	     PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
	     PPI_CHEN_CH6_Msk | PPI_CHEN_CH7_Msk);
}
    a41e:	4770      	bx	lr
    a420:	4000b000 	.word	0x4000b000
    a424:	4001f000 	.word	0x4001f000

0000a428 <radio_tmr_tifs_set>:

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    a428:	4b01      	ldr	r3, [pc, #4]	; (a430 <radio_tmr_tifs_set+0x8>)
    a42a:	4a02      	ldr	r2, [pc, #8]	; (a434 <radio_tmr_tifs_set+0xc>)
    a42c:	50d0      	str	r0, [r2, r3]
#else /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    a42e:	4770      	bx	lr
    a430:	00000544 	.word	0x00000544
    a434:	40001000 	.word	0x40001000

0000a438 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    a438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    a43a:	4b20      	ldr	r3, [pc, #128]	; (a4bc <radio_tmr_start+0x84>)
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    a43c:	000c      	movs	r4, r1
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    a43e:	18d1      	adds	r1, r2, r3
    a440:	4b1f      	ldr	r3, [pc, #124]	; (a4c0 <radio_tmr_start+0x88>)
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    a442:	9001      	str	r0, [sp, #4]
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    a444:	4299      	cmp	r1, r3
    a446:	d902      	bls.n	a44e <radio_tmr_start+0x16>
		ticks_start--;
		remainder += 30517578UL;
    a448:	4b1e      	ldr	r3, [pc, #120]	; (a4c4 <radio_tmr_start+0x8c>)
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
    a44a:	3c01      	subs	r4, #1
		remainder += 30517578UL;
    a44c:	18d2      	adds	r2, r2, r3
	}
	remainder /= 1000000UL;
    a44e:	491e      	ldr	r1, [pc, #120]	; (a4c8 <radio_tmr_start+0x90>)
    a450:	0010      	movs	r0, r2
    a452:	f7f5 fea5 	bl	1a0 <__aeabi_uidiv>

	NRF_TIMER0->TASKS_CLEAR = 1;
    a456:	2201      	movs	r2, #1
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    a458:	25a2      	movs	r5, #162	; 0xa2
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    a45a:	2600      	movs	r6, #0
	NRF_TIMER0->PRESCALER = 4;
    a45c:	2704      	movs	r7, #4
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    a45e:	4b1b      	ldr	r3, [pc, #108]	; (a4cc <radio_tmr_start+0x94>)
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    a460:	00ed      	lsls	r5, r5, #3
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    a462:	60da      	str	r2, [r3, #12]
	NRF_TIMER0->MODE = 0;
    a464:	4a1a      	ldr	r2, [pc, #104]	; (a4d0 <radio_tmr_start+0x98>)
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    a466:	2102      	movs	r1, #2
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    a468:	509e      	str	r6, [r3, r2]
	NRF_TIMER0->PRESCALER = 4;
    a46a:	515f      	str	r7, [r3, r5]
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    a46c:	27a1      	movs	r7, #161	; 0xa1
    a46e:	00ff      	lsls	r7, r7, #3
    a470:	51d9      	str	r1, [r3, r7]

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
    a472:	21a9      	movs	r1, #169	; 0xa9
	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
    a474:	3738      	adds	r7, #56	; 0x38
    a476:	51d8      	str	r0, [r3, r7]
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    a478:	4f16      	ldr	r7, [pc, #88]	; (a4d4 <radio_tmr_start+0x9c>)

	NRF_RTC0->CC[2] = ticks_start;
    a47a:	00c9      	lsls	r1, r1, #3
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    a47c:	647e      	str	r6, [r7, #68]	; 0x44

	NRF_RTC0->CC[2] = ticks_start;
    a47e:	4f16      	ldr	r7, [pc, #88]	; (a4d8 <radio_tmr_start+0xa0>)
    a480:	507c      	str	r4, [r7, r1]
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    a482:	2180      	movs	r1, #128	; 0x80
    a484:	24d1      	movs	r4, #209	; 0xd1
    a486:	02c9      	lsls	r1, r1, #11
    a488:	00a4      	lsls	r4, r4, #2
    a48a:	5139      	str	r1, [r7, r4]
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    a48c:	4c13      	ldr	r4, [pc, #76]	; (a4dc <radio_tmr_start+0xa4>)

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    a48e:	4f14      	ldr	r7, [pc, #80]	; (a4e0 <radio_tmr_start+0xa8>)
	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    a490:	64e6      	str	r6, [r4, #76]	; 0x4c

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    a492:	26a3      	movs	r6, #163	; 0xa3
    a494:	4c13      	ldr	r4, [pc, #76]	; (a4e4 <radio_tmr_start+0xac>)
    a496:	00f6      	lsls	r6, r6, #3
    a498:	51a7      	str	r7, [r4, r6]
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    a49a:	4e13      	ldr	r6, [pc, #76]	; (a4e8 <radio_tmr_start+0xb0>)
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    a49c:	9901      	ldr	r1, [sp, #4]
	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    a49e:	51a3      	str	r3, [r4, r6]
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    a4a0:	2302      	movs	r3, #2
    a4a2:	4e12      	ldr	r6, [pc, #72]	; (a4ec <radio_tmr_start+0xb4>)
    a4a4:	50a3      	str	r3, [r4, r2]
    a4a6:	4b12      	ldr	r3, [pc, #72]	; (a4f0 <radio_tmr_start+0xb8>)

	if (trx) {
		NRF_PPI->CH[0].EEP =
    a4a8:	5166      	str	r6, [r4, r5]

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    a4aa:	2900      	cmp	r1, #0
    a4ac:	d001      	beq.n	a4b2 <radio_tmr_start+0x7a>
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    a4ae:	4d11      	ldr	r5, [pc, #68]	; (a4f4 <radio_tmr_start+0xbc>)
    a4b0:	e000      	b.n	a4b4 <radio_tmr_start+0x7c>
			(u32_t)&(NRF_RADIO->TASKS_TXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
	} else {
		NRF_PPI->CH[0].EEP =
			(u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    a4b2:	4d11      	ldr	r5, [pc, #68]	; (a4f8 <radio_tmr_start+0xc0>)
    a4b4:	50e5      	str	r5, [r4, r3]
			(u32_t)&(NRF_RADIO->TASKS_RXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    a4b6:	2301      	movs	r3, #1
    a4b8:	50a3      	str	r3, [r4, r2]
	NRF_PPI->CHG[0] = PPI_CHG_CH9_Msk | PPI_CHG_CH12_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */

	return remainder;
}
    a4ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a4bc:	fff0bdc0 	.word	0xfff0bdc0
    a4c0:	7ff0bdbf 	.word	0x7ff0bdbf
    a4c4:	01d1a94a 	.word	0x01d1a94a
    a4c8:	000f4240 	.word	0x000f4240
    a4cc:	40008000 	.word	0x40008000
    a4d0:	00000504 	.word	0x00000504
    a4d4:	400080fc 	.word	0x400080fc
    a4d8:	4000b000 	.word	0x4000b000
    a4dc:	4000b0fc 	.word	0x4000b0fc
    a4e0:	4000b148 	.word	0x4000b148
    a4e4:	4001f000 	.word	0x4001f000
    a4e8:	0000051c 	.word	0x0000051c
    a4ec:	40008140 	.word	0x40008140
    a4f0:	00000514 	.word	0x00000514
    a4f4:	40001000 	.word	0x40001000
    a4f8:	40001004 	.word	0x40001004

0000a4fc <radio_tmr_stop>:

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    a4fc:	2201      	movs	r2, #1
    a4fe:	4b02      	ldr	r3, [pc, #8]	; (a508 <radio_tmr_stop+0xc>)
    a500:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    a502:	611a      	str	r2, [r3, #16]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW)
	NRF_TIMER1->TASKS_STOP = 1;
	NRF_TIMER1->TASKS_SHUTDOWN = 1;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_TIFS_HW */
}
    a504:	4770      	bx	lr
    a506:	46c0      	nop			; (mov r8, r8)
    a508:	40008000 	.word	0x40008000

0000a50c <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[2] = hcto;
    a50c:	22a9      	movs	r2, #169	; 0xa9
    a50e:	4b0c      	ldr	r3, [pc, #48]	; (a540 <radio_tmr_hcto_configure+0x34>)
    a510:	00d2      	lsls	r2, r2, #3
    a512:	5098      	str	r0, [r3, r2]
	NRF_TIMER0->EVENTS_COMPARE[2] = 0;
    a514:	2200      	movs	r2, #0
    a516:	33fc      	adds	r3, #252	; 0xfc
    a518:	64da      	str	r2, [r3, #76]	; 0x4c

	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    a51a:	22a6      	movs	r2, #166	; 0xa6
    a51c:	4b09      	ldr	r3, [pc, #36]	; (a544 <radio_tmr_hcto_configure+0x38>)
    a51e:	490a      	ldr	r1, [pc, #40]	; (a548 <radio_tmr_hcto_configure+0x3c>)
    a520:	00d2      	lsls	r2, r2, #3
    a522:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    a524:	4909      	ldr	r1, [pc, #36]	; (a54c <radio_tmr_hcto_configure+0x40>)
    a526:	4a0a      	ldr	r2, [pc, #40]	; (a550 <radio_tmr_hcto_configure+0x44>)
    a528:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[2]);
    a52a:	490a      	ldr	r1, [pc, #40]	; (a554 <radio_tmr_hcto_configure+0x48>)
    a52c:	3204      	adds	r2, #4
    a52e:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    a530:	4909      	ldr	r1, [pc, #36]	; (a558 <radio_tmr_hcto_configure+0x4c>)
    a532:	4a0a      	ldr	r2, [pc, #40]	; (a55c <radio_tmr_hcto_configure+0x50>)
    a534:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
    a536:	2130      	movs	r1, #48	; 0x30
    a538:	4a09      	ldr	r2, [pc, #36]	; (a560 <radio_tmr_hcto_configure+0x54>)
    a53a:	5099      	str	r1, [r3, r2]
}
    a53c:	4770      	bx	lr
    a53e:	46c0      	nop			; (mov r8, r8)
    a540:	40008000 	.word	0x40008000
    a544:	4001f000 	.word	0x4001f000
    a548:	40001104 	.word	0x40001104
    a54c:	40008048 	.word	0x40008048
    a550:	00000534 	.word	0x00000534
    a554:	40008148 	.word	0x40008148
    a558:	40001010 	.word	0x40001010
    a55c:	0000053c 	.word	0x0000053c
    a560:	00000504 	.word	0x00000504

0000a564 <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    a564:	22a4      	movs	r2, #164	; 0xa4
    a566:	4b08      	ldr	r3, [pc, #32]	; (a588 <radio_tmr_aa_capture+0x24>)
    a568:	4908      	ldr	r1, [pc, #32]	; (a58c <radio_tmr_aa_capture+0x28>)
    a56a:	00d2      	lsls	r2, r2, #3
    a56c:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    a56e:	4908      	ldr	r1, [pc, #32]	; (a590 <radio_tmr_aa_capture+0x2c>)
    a570:	4a08      	ldr	r2, [pc, #32]	; (a594 <radio_tmr_aa_capture+0x30>)
    a572:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    a574:	4908      	ldr	r1, [pc, #32]	; (a598 <radio_tmr_aa_capture+0x34>)
    a576:	3204      	adds	r2, #4
    a578:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    a57a:	4908      	ldr	r1, [pc, #32]	; (a59c <radio_tmr_aa_capture+0x38>)
    a57c:	4a08      	ldr	r2, [pc, #32]	; (a5a0 <radio_tmr_aa_capture+0x3c>)
    a57e:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    a580:	210c      	movs	r1, #12
    a582:	4a08      	ldr	r2, [pc, #32]	; (a5a4 <radio_tmr_aa_capture+0x40>)
    a584:	5099      	str	r1, [r3, r2]
}
    a586:	4770      	bx	lr
    a588:	4001f000 	.word	0x4001f000
    a58c:	40001100 	.word	0x40001100
    a590:	40008040 	.word	0x40008040
    a594:	00000524 	.word	0x00000524
    a598:	40001104 	.word	0x40001104
    a59c:	40008044 	.word	0x40008044
    a5a0:	0000052c 	.word	0x0000052c
    a5a4:	00000504 	.word	0x00000504

0000a5a8 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return (NRF_TIMER0->CC[1] - NRF_TIMER0->CC[0]);
    a5a8:	21a8      	movs	r1, #168	; 0xa8
    a5aa:	4a03      	ldr	r2, [pc, #12]	; (a5b8 <radio_tmr_aa_get+0x10>)
    a5ac:	4b03      	ldr	r3, [pc, #12]	; (a5bc <radio_tmr_aa_get+0x14>)
    a5ae:	00c9      	lsls	r1, r1, #3
    a5b0:	58d3      	ldr	r3, [r2, r3]
    a5b2:	5850      	ldr	r0, [r2, r1]
    a5b4:	1a18      	subs	r0, r3, r0
}
    a5b6:	4770      	bx	lr
    a5b8:	40008000 	.word	0x40008000
    a5bc:	00000544 	.word	0x00000544

0000a5c0 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[7].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    a5c0:	22a9      	movs	r2, #169	; 0xa9
    a5c2:	4b05      	ldr	r3, [pc, #20]	; (a5d8 <radio_tmr_end_capture+0x18>)
    a5c4:	4905      	ldr	r1, [pc, #20]	; (a5dc <radio_tmr_end_capture+0x1c>)
    a5c6:	00d2      	lsls	r2, r2, #3
    a5c8:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[7].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    a5ca:	4905      	ldr	r1, [pc, #20]	; (a5e0 <radio_tmr_end_capture+0x20>)
    a5cc:	4a05      	ldr	r2, [pc, #20]	; (a5e4 <radio_tmr_end_capture+0x24>)
    a5ce:	5099      	str	r1, [r3, r2]
	NRF_PPI->CHENSET = PPI_CHEN_CH7_Msk;
    a5d0:	2180      	movs	r1, #128	; 0x80
    a5d2:	4a05      	ldr	r2, [pc, #20]	; (a5e8 <radio_tmr_end_capture+0x28>)
    a5d4:	5099      	str	r1, [r3, r2]
}
    a5d6:	4770      	bx	lr
    a5d8:	4001f000 	.word	0x4001f000
    a5dc:	4000110c 	.word	0x4000110c
    a5e0:	40008048 	.word	0x40008048
    a5e4:	0000054c 	.word	0x0000054c
    a5e8:	00000504 	.word	0x00000504

0000a5ec <radio_tmr_end_get>:

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    a5ec:	23a9      	movs	r3, #169	; 0xa9
    a5ee:	4a02      	ldr	r2, [pc, #8]	; (a5f8 <radio_tmr_end_get+0xc>)
    a5f0:	00db      	lsls	r3, r3, #3
    a5f2:	58d0      	ldr	r0, [r2, r3]
}
    a5f4:	4770      	bx	lr
    a5f6:	46c0      	nop			; (mov r8, r8)
    a5f8:	40008000 	.word	0x40008000

0000a5fc <radio_ccm_rx_pkt_set>:
}

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
    a5fc:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a5fe:	24a0      	movs	r4, #160	; 0xa0
    a600:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a602:	2502      	movs	r5, #2

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a604:	4b12      	ldr	r3, [pc, #72]	; (a650 <radio_ccm_rx_pkt_set+0x54>)
    a606:	00e4      	lsls	r4, r4, #3
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a608:	26a1      	movs	r6, #161	; 0xa1

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a60a:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a60c:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE =
    a60e:	2401      	movs	r4, #1
    a610:	4d10      	ldr	r5, [pc, #64]	; (a654 <radio_ccm_rx_pkt_set+0x58>)
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a612:	00f6      	lsls	r6, r6, #3

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
	NRF_CCM->MODE =
    a614:	515c      	str	r4, [r3, r5]
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a616:	5198      	str	r0, [r3, r6]
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    a618:	480f      	ldr	r0, [pc, #60]	; (a658 <radio_ccm_rx_pkt_set+0x5c>)
    a61a:	4e10      	ldr	r6, [pc, #64]	; (a65c <radio_ccm_rx_pkt_set+0x60>)
    a61c:	5198      	str	r0, [r3, r6]
	NRF_CCM->OUTPTR = (u32_t)pkt;
    a61e:	3604      	adds	r6, #4
    a620:	5199      	str	r1, [r3, r6]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a622:	4e0f      	ldr	r6, [pc, #60]	; (a660 <radio_ccm_rx_pkt_set+0x64>)
    a624:	490f      	ldr	r1, [pc, #60]	; (a664 <radio_ccm_rx_pkt_set+0x68>)
    a626:	505e      	str	r6, [r3, r1]
	NRF_CCM->SHORTS = 0;
    a628:	2180      	movs	r1, #128	; 0x80
    a62a:	0089      	lsls	r1, r1, #2
    a62c:	505a      	str	r2, [r3, r1]
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    a62e:	0019      	movs	r1, r3
    a630:	31fc      	adds	r1, #252	; 0xfc
    a632:	604a      	str	r2, [r1, #4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    a634:	608a      	str	r2, [r1, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    a636:	60ca      	str	r2, [r1, #12]

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    a638:	21a8      	movs	r1, #168	; 0xa8
    a63a:	4a0b      	ldr	r2, [pc, #44]	; (a668 <radio_ccm_rx_pkt_set+0x6c>)
    a63c:	4e0b      	ldr	r6, [pc, #44]	; (a66c <radio_ccm_rx_pkt_set+0x70>)
    a63e:	00c9      	lsls	r1, r1, #3
    a640:	5056      	str	r6, [r2, r1]
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    a642:	4e0b      	ldr	r6, [pc, #44]	; (a670 <radio_ccm_rx_pkt_set+0x74>)
    a644:	490b      	ldr	r1, [pc, #44]	; (a674 <radio_ccm_rx_pkt_set+0x78>)
    a646:	5056      	str	r6, [r2, r1]
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    a648:	2140      	movs	r1, #64	; 0x40
    a64a:	5151      	str	r1, [r2, r5]

	NRF_CCM->TASKS_KSGEN = 1;
    a64c:	601c      	str	r4, [r3, #0]

	return _pkt_scratch;
}
    a64e:	bd70      	pop	{r4, r5, r6, pc}
    a650:	4000f000 	.word	0x4000f000
    a654:	00000504 	.word	0x00000504
    a658:	20001104 	.word	0x20001104
    a65c:	0000050c 	.word	0x0000050c
    a660:	20001130 	.word	0x20001130
    a664:	00000514 	.word	0x00000514
    a668:	4001f000 	.word	0x4001f000
    a66c:	40001104 	.word	0x40001104
    a670:	4000f004 	.word	0x4000f004
    a674:	00000544 	.word	0x00000544

0000a678 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    a678:	b530      	push	{r4, r5, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a67a:	24a0      	movs	r4, #160	; 0xa0
    a67c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a67e:	2502      	movs	r5, #2
	return _pkt_scratch;
}

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a680:	4b0d      	ldr	r3, [pc, #52]	; (a6b8 <radio_ccm_tx_pkt_set+0x40>)
    a682:	00e4      	lsls	r4, r4, #3
    a684:	511a      	str	r2, [r3, r4]
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a686:	511d      	str	r5, [r3, r4]
	NRF_CCM->MODE =
    a688:	4c0c      	ldr	r4, [pc, #48]	; (a6bc <radio_ccm_tx_pkt_set+0x44>)
    a68a:	511a      	str	r2, [r3, r4]
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a68c:	3404      	adds	r4, #4
    a68e:	5118      	str	r0, [r3, r4]
	NRF_CCM->INPTR = (u32_t)pkt;
    a690:	480b      	ldr	r0, [pc, #44]	; (a6c0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a692:	4c0c      	ldr	r4, [pc, #48]	; (a6c4 <radio_ccm_tx_pkt_set+0x4c>)
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (u32_t)ccm;
	NRF_CCM->INPTR = (u32_t)pkt;
    a694:	5019      	str	r1, [r3, r0]
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    a696:	21a2      	movs	r1, #162	; 0xa2
    a698:	480b      	ldr	r0, [pc, #44]	; (a6c8 <radio_ccm_tx_pkt_set+0x50>)
    a69a:	00c9      	lsls	r1, r1, #3
    a69c:	5058      	str	r0, [r3, r1]
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a69e:	490b      	ldr	r1, [pc, #44]	; (a6cc <radio_ccm_tx_pkt_set+0x54>)
    a6a0:	505c      	str	r4, [r3, r1]
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    a6a2:	2180      	movs	r1, #128	; 0x80
    a6a4:	2401      	movs	r4, #1
    a6a6:	0089      	lsls	r1, r1, #2
    a6a8:	505c      	str	r4, [r3, r1]
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    a6aa:	0019      	movs	r1, r3
    a6ac:	31fc      	adds	r1, #252	; 0xfc
    a6ae:	604a      	str	r2, [r1, #4]
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    a6b0:	608a      	str	r2, [r1, #8]
	NRF_CCM->EVENTS_ERROR = 0;
    a6b2:	60ca      	str	r2, [r1, #12]

	NRF_CCM->TASKS_KSGEN = 1;
    a6b4:	601c      	str	r4, [r3, #0]

	return _pkt_scratch;
}
    a6b6:	bd30      	pop	{r4, r5, pc}
    a6b8:	4000f000 	.word	0x4000f000
    a6bc:	00000504 	.word	0x00000504
    a6c0:	0000050c 	.word	0x0000050c
    a6c4:	20001130 	.word	0x20001130
    a6c8:	20001104 	.word	0x20001104
    a6cc:	00000514 	.word	0x00000514

0000a6d0 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    a6d0:	23c1      	movs	r3, #193	; 0xc1
    a6d2:	2102      	movs	r1, #2
    a6d4:	4a0d      	ldr	r2, [pc, #52]	; (a70c <radio_ccm_is_done+0x3c>)
    a6d6:	009b      	lsls	r3, r3, #2
    a6d8:	50d1      	str	r1, [r2, r3]
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    a6da:	4a0d      	ldr	r2, [pc, #52]	; (a710 <radio_ccm_is_done+0x40>)
    a6dc:	6893      	ldr	r3, [r2, #8]
    a6de:	2b00      	cmp	r3, #0
    a6e0:	d103      	bne.n	a6ea <radio_ccm_is_done+0x1a>
    a6e2:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    a6e4:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    a6e6:	bf20      	wfe
    a6e8:	e7f8      	b.n	a6dc <radio_ccm_is_done+0xc>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    a6ea:	23c2      	movs	r3, #194	; 0xc2
    a6ec:	2102      	movs	r1, #2
    a6ee:	4a07      	ldr	r2, [pc, #28]	; (a70c <radio_ccm_is_done+0x3c>)
    a6f0:	009b      	lsls	r3, r3, #2
    a6f2:	50d1      	str	r1, [r2, r3]
    a6f4:	2180      	movs	r1, #128	; 0x80
    a6f6:	4a07      	ldr	r2, [pc, #28]	; (a714 <radio_ccm_is_done+0x44>)
    a6f8:	3b89      	subs	r3, #137	; 0x89
    a6fa:	0209      	lsls	r1, r1, #8
    a6fc:	3bff      	subs	r3, #255	; 0xff
    a6fe:	50d1      	str	r1, [r2, r3]
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    a700:	4b03      	ldr	r3, [pc, #12]	; (a710 <radio_ccm_is_done+0x40>)
    a702:	68d8      	ldr	r0, [r3, #12]
    a704:	4243      	negs	r3, r0
    a706:	4158      	adcs	r0, r3
}
    a708:	4770      	bx	lr
    a70a:	46c0      	nop			; (mov r8, r8)
    a70c:	4000f000 	.word	0x4000f000
    a710:	4000f0fc 	.word	0x4000f0fc
    a714:	e000e100 	.word	0xe000e100

0000a718 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    a718:	2380      	movs	r3, #128	; 0x80
    a71a:	4a03      	ldr	r2, [pc, #12]	; (a728 <radio_ccm_mic_is_valid+0x10>)
    a71c:	00db      	lsls	r3, r3, #3
    a71e:	58d0      	ldr	r0, [r2, r3]
    a720:	1e43      	subs	r3, r0, #1
    a722:	4198      	sbcs	r0, r3
}
    a724:	4770      	bx	lr
    a726:	46c0      	nop			; (mov r8, r8)
    a728:	4000f000 	.word	0x4000f000

0000a72c <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
    a72c:	23a0      	movs	r3, #160	; 0xa0
    a72e:	2201      	movs	r2, #1
}

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    a730:	b570      	push	{r4, r5, r6, lr}
	NRF_AAR->ENABLE = 1;
    a732:	4c0e      	ldr	r4, [pc, #56]	; (a76c <radio_ar_configure+0x40>)
	NRF_AAR->NIRK = nirk;
    a734:	4d0e      	ldr	r5, [pc, #56]	; (a770 <radio_ar_configure+0x44>)

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
    a736:	00db      	lsls	r3, r3, #3
    a738:	50e2      	str	r2, [r4, r3]
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
    a73a:	3308      	adds	r3, #8
static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
    a73c:	5160      	str	r0, [r4, r5]
	NRF_AAR->IRKPTR = (u32_t)irk;
    a73e:	50e1      	str	r1, [r4, r3]
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    a740:	4b0c      	ldr	r3, [pc, #48]	; (a774 <radio_ar_configure+0x48>)
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];

	radio_bc_configure(64);
    a742:	2040      	movs	r0, #64	; 0x40
void radio_ar_configure(u32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR;
    a744:	595a      	ldr	r2, [r3, r5]
    a746:	23a2      	movs	r3, #162	; 0xa2
    a748:	00db      	lsls	r3, r3, #3
    a74a:	50e2      	str	r2, [r4, r3]
	NRF_AAR->SCRATCHPTR = (u32_t)_aar_scratch[0];
    a74c:	2200      	movs	r2, #0
    a74e:	4b0a      	ldr	r3, [pc, #40]	; (a778 <radio_ar_configure+0x4c>)
    a750:	50e2      	str	r2, [r4, r3]

	radio_bc_configure(64);
    a752:	f7ff fe4b 	bl	a3ec <radio_bc_configure>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    a756:	22a8      	movs	r2, #168	; 0xa8
    a758:	4b08      	ldr	r3, [pc, #32]	; (a77c <radio_ar_configure+0x50>)
    a75a:	4909      	ldr	r1, [pc, #36]	; (a780 <radio_ar_configure+0x54>)
    a75c:	00d2      	lsls	r2, r2, #3
    a75e:	5099      	str	r1, [r3, r2]
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    a760:	4a08      	ldr	r2, [pc, #32]	; (a784 <radio_ar_configure+0x58>)
    a762:	509c      	str	r4, [r3, r2]
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    a764:	2240      	movs	r2, #64	; 0x40
    a766:	515a      	str	r2, [r3, r5]
}
    a768:	bd70      	pop	{r4, r5, r6, pc}
    a76a:	46c0      	nop			; (mov r8, r8)
    a76c:	4000f000 	.word	0x4000f000
    a770:	00000504 	.word	0x00000504
    a774:	40001000 	.word	0x40001000
    a778:	00000514 	.word	0x00000514
    a77c:	4001f000 	.word	0x4001f000
    a780:	40001128 	.word	0x40001128
    a784:	00000544 	.word	0x00000544

0000a788 <radio_ar_match_get>:

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    a788:	2380      	movs	r3, #128	; 0x80
    a78a:	4a02      	ldr	r2, [pc, #8]	; (a794 <radio_ar_match_get+0xc>)
    a78c:	00db      	lsls	r3, r3, #3
    a78e:	58d0      	ldr	r0, [r2, r3]
}
    a790:	4770      	bx	lr
    a792:	46c0      	nop			; (mov r8, r8)
    a794:	4000f000 	.word	0x4000f000

0000a798 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    a798:	4b05      	ldr	r3, [pc, #20]	; (a7b0 <radio_ar_status_reset+0x18>)
    a79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	return NRF_AAR->STATUS;
}

void radio_ar_status_reset(void)
{
	if (radio_bc_has_match()) {
    a79c:	2a00      	cmp	r2, #0
    a79e:	d004      	beq.n	a7aa <radio_ar_status_reset+0x12>
		NRF_AAR->EVENTS_END = 0;
    a7a0:	2100      	movs	r1, #0
    a7a2:	4a04      	ldr	r2, [pc, #16]	; (a7b4 <radio_ar_status_reset+0x1c>)
    a7a4:	6051      	str	r1, [r2, #4]
		NRF_AAR->EVENTS_RESOLVED = 0;
    a7a6:	6091      	str	r1, [r2, #8]
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
    a7a8:	60d1      	str	r1, [r2, #12]
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    a7aa:	2200      	movs	r2, #0
    a7ac:	62da      	str	r2, [r3, #44]	; 0x2c
		NRF_AAR->EVENTS_RESOLVED = 0;
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
	}

	radio_bc_status_reset();
}
    a7ae:	4770      	bx	lr
    a7b0:	400010fc 	.word	0x400010fc
    a7b4:	4000f0fc 	.word	0x4000f0fc

0000a7b8 <radio_ar_has_match>:

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    a7b8:	2000      	movs	r0, #0
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    a7ba:	4b06      	ldr	r3, [pc, #24]	; (a7d4 <radio_ar_has_match+0x1c>)
    a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    a7be:	4283      	cmp	r3, r0
    a7c0:	d006      	beq.n	a7d0 <radio_ar_has_match+0x18>
    a7c2:	4b05      	ldr	r3, [pc, #20]	; (a7d8 <radio_ar_has_match+0x20>)
    a7c4:	685a      	ldr	r2, [r3, #4]
	radio_bc_status_reset();
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
    a7c6:	4282      	cmp	r2, r0
    a7c8:	d002      	beq.n	a7d0 <radio_ar_has_match+0x18>
			(NRF_AAR->EVENTS_END) &&
			(NRF_AAR->EVENTS_RESOLVED));
    a7ca:	6898      	ldr	r0, [r3, #8]
}

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    a7cc:	1e43      	subs	r3, r0, #1
    a7ce:	4198      	sbcs	r0, r3
			(NRF_AAR->EVENTS_RESOLVED));
}
    a7d0:	4770      	bx	lr
    a7d2:	46c0      	nop			; (mov r8, r8)
    a7d4:	400010fc 	.word	0x400010fc
    a7d8:	4000f0fc 	.word	0x4000f0fc

0000a7dc <rand_init>:
};

static struct rand *rng;

void rand_init(u8_t *context, u8_t context_len)
{
    a7dc:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(context_len > sizeof(struct rand));
    a7de:	2904      	cmp	r1, #4
    a7e0:	d80c      	bhi.n	a7fc <rand_init+0x20>
    a7e2:	4b0f      	ldr	r3, [pc, #60]	; (a820 <rand_init+0x44>)
    a7e4:	4a0f      	ldr	r2, [pc, #60]	; (a824 <rand_init+0x48>)
    a7e6:	9301      	str	r3, [sp, #4]
    a7e8:	4b0f      	ldr	r3, [pc, #60]	; (a828 <rand_init+0x4c>)
    a7ea:	4910      	ldr	r1, [pc, #64]	; (a82c <rand_init+0x50>)
    a7ec:	9300      	str	r3, [sp, #0]
    a7ee:	4810      	ldr	r0, [pc, #64]	; (a830 <rand_init+0x54>)
    a7f0:	4b10      	ldr	r3, [pc, #64]	; (a834 <rand_init+0x58>)
    a7f2:	f7f6 ffb9 	bl	1768 <printk>
    a7f6:	b662      	cpsie	i
    a7f8:	2004      	movs	r0, #4
    a7fa:	df02      	svc	2

	rng = (struct rand *)context;
	rng->count = context_len - sizeof(struct rand) + 1;
    a7fc:	3903      	subs	r1, #3
    a7fe:	7001      	strb	r1, [r0, #0]
	rng->first = rng->last = 0;
    a800:	2100      	movs	r1, #0

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    a802:	2201      	movs	r2, #1

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    a804:	4b0c      	ldr	r3, [pc, #48]	; (a838 <rand_init+0x5c>)
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    a806:	7081      	strb	r1, [r0, #2]

void rand_init(u8_t *context, u8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
    a808:	6018      	str	r0, [r3, #0]
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    a80a:	7041      	strb	r1, [r0, #1]

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    a80c:	4b0b      	ldr	r3, [pc, #44]	; (a83c <rand_init+0x60>)
    a80e:	480c      	ldr	r0, [pc, #48]	; (a840 <rand_init+0x64>)
    a810:	501a      	str	r2, [r3, r0]
	NRF_RNG->EVENTS_VALRDY = 0;
    a812:	480c      	ldr	r0, [pc, #48]	; (a844 <rand_init+0x68>)
    a814:	6041      	str	r1, [r0, #4]
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    a816:	21c1      	movs	r1, #193	; 0xc1
    a818:	0089      	lsls	r1, r1, #2
    a81a:	505a      	str	r2, [r3, r1]

	NRF_RNG->TASKS_START = 1;
    a81c:	601a      	str	r2, [r3, #0]
}
    a81e:	bd07      	pop	{r0, r1, r2, pc}
    a820:	000145b0 	.word	0x000145b0
    a824:	00014570 	.word	0x00014570
    a828:	000145b5 	.word	0x000145b5
    a82c:	00014577 	.word	0x00014577
    a830:	00015999 	.word	0x00015999
    a834:	00016e3e 	.word	0x00016e3e
    a838:	20001160 	.word	0x20001160
    a83c:	4000d000 	.word	0x4000d000
    a840:	00000504 	.word	0x00000504
    a844:	4000d0fc 	.word	0x4000d0fc

0000a848 <rand_get>:

size_t rand_get(size_t octets, u8_t *rand)
{
    a848:	b510      	push	{r4, lr}
	u8_t reserved;
	u8_t first;

	while (octets) {
		if (rng->first == rng->last) {
    a84a:	4b14      	ldr	r3, [pc, #80]	; (a89c <rand_get+0x54>)
    a84c:	681a      	ldr	r2, [r3, #0]
    a84e:	7853      	ldrb	r3, [r2, #1]
size_t rand_get(size_t octets, u8_t *rand)
{
	u8_t reserved;
	u8_t first;

	while (octets) {
    a850:	2800      	cmp	r0, #0
    a852:	d00f      	beq.n	a874 <rand_get+0x2c>
		if (rng->first == rng->last) {
    a854:	7894      	ldrb	r4, [r2, #2]
    a856:	429c      	cmp	r4, r3
    a858:	d00c      	beq.n	a874 <rand_get+0x2c>
			break;
		}

		rand[--octets] = rng->rand[rng->first];
    a85a:	18d3      	adds	r3, r2, r3
    a85c:	78db      	ldrb	r3, [r3, #3]
    a85e:	3801      	subs	r0, #1
    a860:	540b      	strb	r3, [r1, r0]

		first = rng->first + 1;
    a862:	7853      	ldrb	r3, [r2, #1]
		if (first == rng->count) {
    a864:	7814      	ldrb	r4, [r2, #0]
			break;
		}

		rand[--octets] = rng->rand[rng->first];

		first = rng->first + 1;
    a866:	3301      	adds	r3, #1
    a868:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
    a86a:	429c      	cmp	r4, r3
    a86c:	d100      	bne.n	a870 <rand_get+0x28>
			first = 0;
    a86e:	2300      	movs	r3, #0
		}
		rng->first = first;
    a870:	7053      	strb	r3, [r2, #1]
    a872:	e7ec      	b.n	a84e <rand_get+0x6>
	}

	reserved = RAND_RESERVED;
	first = rng->first;
	while (reserved--) {
    a874:	2105      	movs	r1, #5
    a876:	3901      	subs	r1, #1
    a878:	b2c9      	uxtb	r1, r1
    a87a:	2900      	cmp	r1, #0
    a87c:	d00d      	beq.n	a89a <rand_get+0x52>
		if (first == rng->last) {
    a87e:	7894      	ldrb	r4, [r2, #2]
    a880:	429c      	cmp	r4, r3
    a882:	d103      	bne.n	a88c <rand_get+0x44>
			NRF_RNG->TASKS_START = 1;
    a884:	2201      	movs	r2, #1
    a886:	4b06      	ldr	r3, [pc, #24]	; (a8a0 <rand_get+0x58>)
    a888:	601a      	str	r2, [r3, #0]

			break;
    a88a:	e006      	b.n	a89a <rand_get+0x52>
		}

		first++;
    a88c:	3301      	adds	r3, #1
		if (first == rng->count) {
    a88e:	7814      	ldrb	r4, [r2, #0]
			NRF_RNG->TASKS_START = 1;

			break;
		}

		first++;
    a890:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
    a892:	429c      	cmp	r4, r3
    a894:	d1ef      	bne.n	a876 <rand_get+0x2e>
			first = 0;
    a896:	2300      	movs	r3, #0
    a898:	e7ed      	b.n	a876 <rand_get+0x2e>
		}
	}

	return octets;
}
    a89a:	bd10      	pop	{r4, pc}
    a89c:	20001160 	.word	0x20001160
    a8a0:	4000d000 	.word	0x4000d000

0000a8a4 <isr_rand>:

void isr_rand(void *param)
{
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    a8a4:	4915      	ldr	r1, [pc, #84]	; (a8fc <isr_rand+0x58>)

	return octets;
}

void isr_rand(void *param)
{
    a8a6:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    a8a8:	684b      	ldr	r3, [r1, #4]
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	d024      	beq.n	a8f8 <isr_rand+0x54>
		u8_t last;

		last = rng->last + 1;
    a8ae:	4b14      	ldr	r3, [pc, #80]	; (a900 <isr_rand+0x5c>)
    a8b0:	681a      	ldr	r2, [r3, #0]
    a8b2:	7890      	ldrb	r0, [r2, #2]
		if (last == rng->count) {
    a8b4:	7814      	ldrb	r4, [r2, #0]
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
		u8_t last;

		last = rng->last + 1;
    a8b6:	1c43      	adds	r3, r0, #1
    a8b8:	b2db      	uxtb	r3, r3
		if (last == rng->count) {
    a8ba:	42a3      	cmp	r3, r4
    a8bc:	d100      	bne.n	a8c0 <isr_rand+0x1c>
			last = 0;
    a8be:	2300      	movs	r3, #0
		}

		if (last == rng->first) {
    a8c0:	7856      	ldrb	r6, [r2, #1]
    a8c2:	4d10      	ldr	r5, [pc, #64]	; (a904 <isr_rand+0x60>)
    a8c4:	429e      	cmp	r6, r3
    a8c6:	d104      	bne.n	a8d2 <isr_rand+0x2e>
			/* this condition should not happen
			 * , but due to probable bug in HW
			 * , new value could be generated
			 * before task is stopped.
			 */
			NRF_RNG->TASKS_STOP = 1;
    a8c8:	2301      	movs	r3, #1
    a8ca:	606b      	str	r3, [r5, #4]
			NRF_RNG->EVENTS_VALRDY = 0;
    a8cc:	2300      	movs	r3, #0
    a8ce:	604b      	str	r3, [r1, #4]

			return;
    a8d0:	e012      	b.n	a8f8 <isr_rand+0x54>
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
    a8d2:	26a1      	movs	r6, #161	; 0xa1
    a8d4:	00f6      	lsls	r6, r6, #3
    a8d6:	59ad      	ldr	r5, [r5, r6]
    a8d8:	1810      	adds	r0, r2, r0
    a8da:	70c5      	strb	r5, [r0, #3]
		rng->last = last;
    a8dc:	7093      	strb	r3, [r2, #2]

		last = rng->last + 1;
    a8de:	3301      	adds	r3, #1
    a8e0:	b2db      	uxtb	r3, r3
    a8e2:	2000      	movs	r0, #0
		if (last == rng->count) {
    a8e4:	429c      	cmp	r4, r3
    a8e6:	d100      	bne.n	a8ea <isr_rand+0x46>
			last = 0;
    a8e8:	0003      	movs	r3, r0
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    a8ea:	6048      	str	r0, [r1, #4]

		if (last == rng->first) {
    a8ec:	7852      	ldrb	r2, [r2, #1]
    a8ee:	429a      	cmp	r2, r3
    a8f0:	d102      	bne.n	a8f8 <isr_rand+0x54>
			NRF_RNG->TASKS_STOP = 1;
    a8f2:	2201      	movs	r2, #1
    a8f4:	4b03      	ldr	r3, [pc, #12]	; (a904 <isr_rand+0x60>)
    a8f6:	605a      	str	r2, [r3, #4]
		}
	}
}
    a8f8:	bd70      	pop	{r4, r5, r6, pc}
    a8fa:	46c0      	nop			; (mov r8, r8)
    a8fc:	4000d0fc 	.word	0x4000d0fc
    a900:	20001160 	.word	0x20001160
    a904:	4000d000 	.word	0x4000d000

0000a908 <ticker_dequeue>:
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    a908:	2324      	movs	r3, #36	; 0x24

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    a90a:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t timeout;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    a90c:	7e04      	ldrb	r4, [r0, #24]
	current = previous;
	total = 0;
    a90e:	2500      	movs	r5, #0
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
	current = previous;
    a910:	0022      	movs	r2, r4
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    a912:	469c      	mov	ip, r3
	u8_t current;
	u32_t timeout;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
    a914:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    a916:	2aff      	cmp	r2, #255	; 0xff
    a918:	d00a      	beq.n	a930 <ticker_dequeue+0x28>

		ticker_current = &node[current];
    a91a:	4663      	mov	r3, ip
    a91c:	4353      	muls	r3, r2
    a91e:	18f3      	adds	r3, r6, r3
    a920:	781f      	ldrb	r7, [r3, #0]

		if (current == id) {
    a922:	428a      	cmp	r2, r1
    a924:	d006      	beq.n	a934 <ticker_dequeue+0x2c>
			break;
		}

		total += ticker_current->ticks_to_expire;
    a926:	689b      	ldr	r3, [r3, #8]
		previous = current;
		current = ticker_current->next;
    a928:	0014      	movs	r4, r2

		if (current == id) {
			break;
		}

		total += ticker_current->ticks_to_expire;
    a92a:	18ed      	adds	r5, r5, r3
		previous = current;
		current = ticker_current->next;
    a92c:	003a      	movs	r2, r7
    a92e:	e7f2      	b.n	a916 <ticker_dequeue+0xe>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    a930:	2000      	movs	r0, #0
    a932:	e010      	b.n	a956 <ticker_dequeue+0x4e>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    a934:	4294      	cmp	r4, r2
    a936:	d100      	bne.n	a93a <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    a938:	7607      	strb	r7, [r0, #24]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    a93a:	2224      	movs	r2, #36	; 0x24
    a93c:	4354      	muls	r4, r2
    a93e:	7818      	ldrb	r0, [r3, #0]
	if (previous == current) {
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
    a940:	6899      	ldr	r1, [r3, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    a942:	55a0      	strb	r0, [r4, r6]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    a944:	781b      	ldrb	r3, [r3, #0]
    a946:	2bff      	cmp	r3, #255	; 0xff
    a948:	d004      	beq.n	a954 <ticker_dequeue+0x4c>
		node[ticker_current->next].ticks_to_expire += timeout;
    a94a:	435a      	muls	r2, r3
    a94c:	18b3      	adds	r3, r6, r2
    a94e:	689a      	ldr	r2, [r3, #8]
    a950:	1852      	adds	r2, r2, r1
    a952:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    a954:	1868      	adds	r0, r5, r1
}
    a956:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a958 <prepare_ticks_to_expire>:
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
}

static void prepare_ticks_to_expire(struct ticker_node *ticker,
				    u32_t ticks_current, u32_t ticks_at_start)
{
    a958:	b570      	push	{r4, r5, r6, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & 0x00800000) == 0) {
    a95a:	1a55      	subs	r5, r2, r1
}

static void prepare_ticks_to_expire(struct ticker_node *ticker,
				    u32_t ticks_current, u32_t ticks_at_start)
{
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    a95c:	6883      	ldr	r3, [r0, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    a95e:	8a84      	ldrh	r4, [r0, #20]

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & 0x00800000) == 0) {
    a960:	022e      	lsls	r6, r5, #8
    a962:	d403      	bmi.n	a96c <prepare_ticks_to_expire+0x14>
		ticks_to_expire +=
    a964:	022a      	lsls	r2, r5, #8
    a966:	0a12      	lsrs	r2, r2, #8
    a968:	18d2      	adds	r2, r2, r3
    a96a:	e00a      	b.n	a982 <prepare_ticks_to_expire+0x2a>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    a96c:	1a89      	subs	r1, r1, r2
    a96e:	0209      	lsls	r1, r1, #8
    a970:	0a09      	lsrs	r1, r1, #8
		u32_t delta_current_start;

		delta_current_start =
		    ticker_ticks_diff_get(ticks_current, ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
			ticks_to_expire -= delta_current_start;
    a972:	1a5a      	subs	r2, r3, r1
	} else {
		u32_t delta_current_start;

		delta_current_start =
		    ticker_ticks_diff_get(ticks_current, ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
    a974:	428b      	cmp	r3, r1
    a976:	d804      	bhi.n	a982 <prepare_ticks_to_expire+0x2a>
    a978:	1ae3      	subs	r3, r4, r3
			ticks_to_expire -= delta_current_start;
		} else {
			ticks_to_expire_minus +=
    a97a:	185b      	adds	r3, r3, r1
    a97c:	b29c      	uxth	r4, r3
			    (delta_current_start - ticks_to_expire);
			ticks_to_expire = 0;
    a97e:	2200      	movs	r2, #0
    a980:	e004      	b.n	a98c <prepare_ticks_to_expire+0x34>
		}
	}

	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
    a982:	42a2      	cmp	r2, r4
    a984:	d902      	bls.n	a98c <prepare_ticks_to_expire+0x34>
		ticks_to_expire -= ticks_to_expire_minus;
    a986:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    a988:	2300      	movs	r3, #0
    a98a:	e002      	b.n	a992 <prepare_ticks_to_expire+0x3a>
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    a98c:	1aa3      	subs	r3, r4, r2
		ticks_to_expire = 0;
    a98e:	2200      	movs	r2, #0
	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
		ticks_to_expire -= ticks_to_expire_minus;
		ticks_to_expire_minus = 0;
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    a990:	b29b      	uxth	r3, r3
		ticks_to_expire = 0;
	}

	ticker->ticks_to_expire = ticks_to_expire;
    a992:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    a994:	8283      	strh	r3, [r0, #20]
}
    a996:	bd70      	pop	{r4, r5, r6, pc}

0000a998 <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
    a998:	b510      	push	{r4, lr}
    a99a:	0001      	movs	r1, r0
	cntr_cmp_set(1, value);
    a99c:	2001      	movs	r0, #1
    a99e:	f7ff fb4d 	bl	a03c <cntr_cmp_set>
}
    a9a2:	bd10      	pop	{r4, pc}

0000a9a4 <ticker_instance0_cmp_set>:
		break;
	}
}

static void ticker_instance0_cmp_set(u32_t value)
{
    a9a4:	b510      	push	{r4, lr}
    a9a6:	0001      	movs	r1, r0
	cntr_cmp_set(0, value);
    a9a8:	2000      	movs	r0, #0
    a9aa:	f7ff fb47 	bl	a03c <cntr_cmp_set>
}
    a9ae:	bd10      	pop	{r4, pc}

0000a9b0 <ticker_instance1_sched>:
		break;
	}
}

static void ticker_instance1_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    a9b0:	b513      	push	{r0, r1, r4, lr}
    a9b2:	000c      	movs	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    a9b4:	2803      	cmp	r0, #3
    a9b6:	d821      	bhi.n	a9fc <ticker_instance1_sched+0x4c>
    a9b8:	f7f5 fbde 	bl	178 <__gnu_thumb1_case_uqi>
    a9bc:	190c0802 	.word	0x190c0802
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    a9c0:	2901      	cmp	r1, #1
    a9c2:	d11b      	bne.n	a9fc <ticker_instance1_sched+0x4c>
				0, 0, link,
				&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    a9c4:	4b14      	ldr	r3, [pc, #80]	; (aa18 <ticker_instance1_sched+0x68>)
    a9c6:	2102      	movs	r1, #2
    a9c8:	2000      	movs	r0, #0
    a9ca:	e014      	b.n	a9f6 <ticker_instance1_sched+0x46>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    a9cc:	4b13      	ldr	r3, [pc, #76]	; (aa1c <ticker_instance1_sched+0x6c>)
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    a9ce:	2902      	cmp	r1, #2
    a9d0:	d00a      	beq.n	a9e8 <ticker_instance1_sched+0x38>
    a9d2:	e013      	b.n	a9fc <ticker_instance1_sched+0x4c>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    a9d4:	2901      	cmp	r1, #1
    a9d6:	d003      	beq.n	a9e0 <ticker_instance1_sched+0x30>
    a9d8:	2902      	cmp	r1, #2
    a9da:	d10f      	bne.n	a9fc <ticker_instance1_sched+0x4c>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    a9dc:	4b10      	ldr	r3, [pc, #64]	; (aa20 <ticker_instance1_sched+0x70>)
    a9de:	e003      	b.n	a9e8 <ticker_instance1_sched+0x38>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    a9e0:	2102      	movs	r1, #2
    a9e2:	4b10      	ldr	r3, [pc, #64]	; (aa24 <ticker_instance1_sched+0x74>)
    a9e4:	0008      	movs	r0, r1
    a9e6:	e006      	b.n	a9f6 <ticker_instance1_sched+0x46>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_2,
    a9e8:	0021      	movs	r1, r4
    a9ea:	0020      	movs	r0, r4
    a9ec:	e003      	b.n	a9f6 <ticker_instance1_sched+0x46>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    a9ee:	2902      	cmp	r1, #2
    a9f0:	d104      	bne.n	a9fc <ticker_instance1_sched+0x4c>
				(void *)&_instance[1],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    a9f2:	2003      	movs	r0, #3
    a9f4:	4b0c      	ldr	r3, [pc, #48]	; (aa28 <ticker_instance1_sched+0x78>)
    a9f6:	f7ff f931 	bl	9c5c <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    a9fa:	bd13      	pop	{r0, r1, r4, pc}
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    a9fc:	4b0b      	ldr	r3, [pc, #44]	; (aa2c <ticker_instance1_sched+0x7c>)
    a9fe:	4a0c      	ldr	r2, [pc, #48]	; (aa30 <ticker_instance1_sched+0x80>)
    aa00:	9301      	str	r3, [sp, #4]
    aa02:	4b0c      	ldr	r3, [pc, #48]	; (aa34 <ticker_instance1_sched+0x84>)
    aa04:	490c      	ldr	r1, [pc, #48]	; (aa38 <ticker_instance1_sched+0x88>)
    aa06:	9300      	str	r3, [sp, #0]
    aa08:	480c      	ldr	r0, [pc, #48]	; (aa3c <ticker_instance1_sched+0x8c>)
    aa0a:	4b0d      	ldr	r3, [pc, #52]	; (aa40 <ticker_instance1_sched+0x90>)
    aa0c:	f7f6 feac 	bl	1768 <printk>
    aa10:	b662      	cpsie	i
    aa12:	2004      	movs	r0, #4
    aa14:	df02      	svc	2
    aa16:	46c0      	nop			; (mov r8, r8)
    aa18:	200005c8 	.word	0x200005c8
    aa1c:	200005d8 	.word	0x200005d8
    aa20:	20000568 	.word	0x20000568
    aa24:	20000548 	.word	0x20000548
    aa28:	20000578 	.word	0x20000578
    aa2c:	000145b0 	.word	0x000145b0
    aa30:	00014570 	.word	0x00014570
    aa34:	000145b5 	.word	0x000145b5
    aa38:	00014577 	.word	0x00014577
    aa3c:	00014bc5 	.word	0x00014bc5
    aa40:	00016e5f 	.word	0x00016e5f

0000aa44 <ticker_instance0_sched>:

	return 0;
}

static void ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain)
{
    aa44:	b513      	push	{r0, r1, r4, lr}
    aa46:	000c      	movs	r4, r1
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    aa48:	2803      	cmp	r0, #3
    aa4a:	d823      	bhi.n	aa94 <ticker_instance0_sched+0x50>
    aa4c:	f7f5 fb94 	bl	178 <__gnu_thumb1_case_uqi>
    aa50:	1a0d0702 	.word	0x1a0d0702
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    aa54:	2901      	cmp	r1, #1
    aa56:	d11d      	bne.n	aa94 <ticker_instance0_sched+0x50>
				0, 0, link,
				&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    aa58:	4b15      	ldr	r3, [pc, #84]	; (aab0 <ticker_instance0_sched+0x6c>)
    aa5a:	2100      	movs	r1, #0
    aa5c:	e010      	b.n	aa80 <ticker_instance0_sched+0x3c>
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    aa5e:	2902      	cmp	r1, #2
    aa60:	d118      	bne.n	aa94 <ticker_instance0_sched+0x50>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_0,
    aa62:	4b14      	ldr	r3, [pc, #80]	; (aab4 <ticker_instance0_sched+0x70>)
    aa64:	2101      	movs	r1, #1
    aa66:	2000      	movs	r0, #0
    aa68:	e011      	b.n	aa8e <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    aa6a:	2901      	cmp	r1, #1
    aa6c:	d004      	beq.n	aa78 <ticker_instance0_sched+0x34>
    aa6e:	2902      	cmp	r1, #2
    aa70:	d110      	bne.n	aa94 <ticker_instance0_sched+0x50>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    aa72:	4b11      	ldr	r3, [pc, #68]	; (aab8 <ticker_instance0_sched+0x74>)
    aa74:	2101      	movs	r1, #1
    aa76:	e003      	b.n	aa80 <ticker_instance0_sched+0x3c>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    aa78:	4b10      	ldr	r3, [pc, #64]	; (aabc <ticker_instance0_sched+0x78>)
    aa7a:	2100      	movs	r1, #0
    aa7c:	0020      	movs	r0, r4
    aa7e:	e006      	b.n	aa8e <ticker_instance0_sched+0x4a>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(MAYFLY_CALL_ID_1,
    aa80:	0008      	movs	r0, r1
    aa82:	e004      	b.n	aa8e <ticker_instance0_sched+0x4a>
			break;
		}
		break;

	case CALL_ID_USER:
		switch (callee_id) {
    aa84:	2902      	cmp	r1, #2
    aa86:	d105      	bne.n	aa94 <ticker_instance0_sched+0x50>
				(void *)&_instance[0],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    aa88:	2101      	movs	r1, #1
    aa8a:	2003      	movs	r0, #3
    aa8c:	4b0c      	ldr	r3, [pc, #48]	; (aac0 <ticker_instance0_sched+0x7c>)
    aa8e:	f7ff f8e5 	bl	9c5c <mayfly_enqueue>

	default:
		LL_ASSERT(0);
		break;
	}
}
    aa92:	bd13      	pop	{r0, r1, r4, pc}
			break;
		}
		break;

	default:
		LL_ASSERT(0);
    aa94:	4b0b      	ldr	r3, [pc, #44]	; (aac4 <ticker_instance0_sched+0x80>)
    aa96:	4a0c      	ldr	r2, [pc, #48]	; (aac8 <ticker_instance0_sched+0x84>)
    aa98:	9301      	str	r3, [sp, #4]
    aa9a:	4b0c      	ldr	r3, [pc, #48]	; (aacc <ticker_instance0_sched+0x88>)
    aa9c:	490c      	ldr	r1, [pc, #48]	; (aad0 <ticker_instance0_sched+0x8c>)
    aa9e:	9300      	str	r3, [sp, #0]
    aaa0:	480c      	ldr	r0, [pc, #48]	; (aad4 <ticker_instance0_sched+0x90>)
    aaa2:	4b0d      	ldr	r3, [pc, #52]	; (aad8 <ticker_instance0_sched+0x94>)
    aaa4:	f7f6 fe60 	bl	1768 <printk>
    aaa8:	b662      	cpsie	i
    aaaa:	2004      	movs	r0, #4
    aaac:	df02      	svc	2
    aaae:	46c0      	nop			; (mov r8, r8)
    aab0:	20000588 	.word	0x20000588
    aab4:	20000598 	.word	0x20000598
    aab8:	200005a8 	.word	0x200005a8
    aabc:	20000558 	.word	0x20000558
    aac0:	200005b8 	.word	0x200005b8
    aac4:	000145b0 	.word	0x000145b0
    aac8:	00014570 	.word	0x00014570
    aacc:	000145b5 	.word	0x000145b5
    aad0:	00014577 	.word	0x00014577
    aad4:	00014bc5 	.word	0x00014bc5
    aad8:	00016e48 	.word	0x00016e48

0000aadc <ticker_instance1_caller_id_get>:

	return 0;
}

static u8_t ticker_instance1_caller_id_get(u8_t user_id)
{
    aadc:	b507      	push	{r0, r1, r2, lr}
	switch (user_id) {
    aade:	2802      	cmp	r0, #2
    aae0:	d00e      	beq.n	ab00 <ticker_instance1_caller_id_get+0x24>
    aae2:	2803      	cmp	r0, #3
    aae4:	d00c      	beq.n	ab00 <ticker_instance1_caller_id_get+0x24>
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_0:
	case MAYFLY_CALL_ID_1:
	default:
		LL_ASSERT(0);
    aae6:	4b07      	ldr	r3, [pc, #28]	; (ab04 <ticker_instance1_caller_id_get+0x28>)
    aae8:	4a07      	ldr	r2, [pc, #28]	; (ab08 <ticker_instance1_caller_id_get+0x2c>)
    aaea:	9301      	str	r3, [sp, #4]
    aaec:	4b07      	ldr	r3, [pc, #28]	; (ab0c <ticker_instance1_caller_id_get+0x30>)
    aaee:	4908      	ldr	r1, [pc, #32]	; (ab10 <ticker_instance1_caller_id_get+0x34>)
    aaf0:	9300      	str	r3, [sp, #0]
    aaf2:	4808      	ldr	r0, [pc, #32]	; (ab14 <ticker_instance1_caller_id_get+0x38>)
    aaf4:	4b08      	ldr	r3, [pc, #32]	; (ab18 <ticker_instance1_caller_id_get+0x3c>)
    aaf6:	f7f6 fe37 	bl	1768 <printk>
    aafa:	b662      	cpsie	i
    aafc:	2004      	movs	r0, #4
    aafe:	df02      	svc	2
		break;
	}

	return 0;
}
    ab00:	bd0e      	pop	{r1, r2, r3, pc}
    ab02:	46c0      	nop			; (mov r8, r8)
    ab04:	000145b0 	.word	0x000145b0
    ab08:	00014570 	.word	0x00014570
    ab0c:	000145b5 	.word	0x000145b5
    ab10:	00014577 	.word	0x00014577
    ab14:	00014bc5 	.word	0x00014bc5
    ab18:	00016e95 	.word	0x00016e95

0000ab1c <ticker_instance0_caller_id_get>:
 *       import it.
 ****************************************************************************/
#include "util/mayfly.h"

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
    ab1c:	b507      	push	{r0, r1, r2, lr}
	switch (user_id) {
    ab1e:	2801      	cmp	r0, #1
    ab20:	d010      	beq.n	ab44 <ticker_instance0_caller_id_get+0x28>
    ab22:	2800      	cmp	r0, #0
    ab24:	d010      	beq.n	ab48 <ticker_instance0_caller_id_get+0x2c>
    ab26:	2803      	cmp	r0, #3
    ab28:	d00f      	beq.n	ab4a <ticker_instance0_caller_id_get+0x2e>
	case MAYFLY_CALL_ID_PROGRAM:
		return CALL_ID_USER;

	case MAYFLY_CALL_ID_2:
	default:
		LL_ASSERT(0);
    ab2a:	4b08      	ldr	r3, [pc, #32]	; (ab4c <ticker_instance0_caller_id_get+0x30>)
    ab2c:	4a08      	ldr	r2, [pc, #32]	; (ab50 <ticker_instance0_caller_id_get+0x34>)
    ab2e:	9301      	str	r3, [sp, #4]
    ab30:	4b08      	ldr	r3, [pc, #32]	; (ab54 <ticker_instance0_caller_id_get+0x38>)
    ab32:	4909      	ldr	r1, [pc, #36]	; (ab58 <ticker_instance0_caller_id_get+0x3c>)
    ab34:	9300      	str	r3, [sp, #0]
    ab36:	4809      	ldr	r0, [pc, #36]	; (ab5c <ticker_instance0_caller_id_get+0x40>)
    ab38:	4b09      	ldr	r3, [pc, #36]	; (ab60 <ticker_instance0_caller_id_get+0x44>)
    ab3a:	f7f6 fe15 	bl	1768 <printk>
    ab3e:	b662      	cpsie	i
    ab40:	2004      	movs	r0, #4
    ab42:	df02      	svc	2
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;

	case MAYFLY_CALL_ID_1:
		return CALL_ID_JOB;
    ab44:	2002      	movs	r0, #2
    ab46:	e000      	b.n	ab4a <ticker_instance0_caller_id_get+0x2e>

static u8_t ticker_instance0_caller_id_get(u8_t user_id)
{
	switch (user_id) {
	case MAYFLY_CALL_ID_0:
		return CALL_ID_WORKER;
    ab48:	2001      	movs	r0, #1
		LL_ASSERT(0);
		break;
	}

	return 0;
}
    ab4a:	bd0e      	pop	{r1, r2, r3, pc}
    ab4c:	000145b0 	.word	0x000145b0
    ab50:	00014570 	.word	0x00014570
    ab54:	000145b5 	.word	0x000145b5
    ab58:	00014577 	.word	0x00014577
    ab5c:	00014bc5 	.word	0x00014bc5
    ab60:	00016e76 	.word	0x00016e76

0000ab64 <ticker_worker>:
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    ab64:	2301      	movs	r3, #1

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    ab66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
	if (instance->job_guard) {
    ab68:	7f06      	ldrb	r6, [r0, #28]

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    ab6a:	0004      	movs	r4, r0
	u32_t ticks_elapsed;
	u32_t ticks_expired;
	u8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    ab6c:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
    ab6e:	2e00      	cmp	r6, #0
    ab70:	d14b      	bne.n	ac0a <ticker_worker+0xa6>
		return;
	}

	/* If no tickers to expire, do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    ab72:	7e03      	ldrb	r3, [r0, #24]
    ab74:	2bff      	cmp	r3, #255	; 0xff
    ab76:	d101      	bne.n	ab7c <ticker_worker+0x18>
		instance->worker_trigger = 0;
    ab78:	7746      	strb	r6, [r0, #29]

		return;
    ab7a:	e046      	b.n	ac0a <ticker_worker+0xa6>
	}

	/* ticks_elapsed is collected here, job will use it */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    ab7c:	f7ff fa56 	bl	a02c <cntr_cnt_get>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    ab80:	6963      	ldr	r3, [r4, #20]

	/* initialise actual elapsed ticks being consumed */
	ticks_expired = 0;

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;
    ab82:	7e27      	ldrb	r7, [r4, #24]
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    ab84:	1ac5      	subs	r5, r0, r3
    ab86:	022d      	lsls	r5, r5, #8
    ab88:	0a2b      	lsrs	r3, r5, #8
    ab8a:	9300      	str	r3, [sp, #0]

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;

	/* expire all tickers within ticks_elapsed and collect ticks_expired */
	node = &instance->node[0];
    ab8c:	6823      	ldr	r3, [r4, #0]
    ab8e:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    ab90:	2fff      	cmp	r7, #255	; 0xff
    ab92:	d007      	beq.n	aba4 <ticker_worker+0x40>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    ab94:	2324      	movs	r3, #36	; 0x24
    ab96:	435f      	muls	r7, r3
    ab98:	9b01      	ldr	r3, [sp, #4]

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
		if (ticks_elapsed < ticks_to_expire) {
    ab9a:	9a00      	ldr	r2, [sp, #0]
	while (ticker_id_head != TICKER_NULL) {
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    ab9c:	19d9      	adds	r1, r3, r7

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    ab9e:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    aba0:	4293      	cmp	r3, r2
    aba2:	d904      	bls.n	abae <ticker_worker+0x4a>
			DEBUG_TICKER_TASK(0);
		}
	}

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    aba4:	7aa2      	ldrb	r2, [r4, #10]
    aba6:	7ae3      	ldrb	r3, [r4, #11]
    aba8:	4293      	cmp	r3, r2
    abaa:	d122      	bne.n	abf2 <ticker_worker+0x8e>
    abac:	e01b      	b.n	abe6 <ticker_worker+0x82>

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    abae:	20ff      	movs	r0, #255	; 0xff
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    abb0:	9a00      	ldr	r2, [sp, #0]
		ticks_expired += ticks_to_expire;
    abb2:	18f6      	adds	r6, r6, r3
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    abb4:	1ad2      	subs	r2, r2, r3
    abb6:	9200      	str	r2, [sp, #0]

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    abb8:	788a      	ldrb	r2, [r1, #2]
    abba:	784b      	ldrb	r3, [r1, #1]
		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;

		/* move to next ticker */
		ticker_id_head = ticker->next;
    abbc:	780f      	ldrb	r7, [r1, #0]

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    abbe:	1a9b      	subs	r3, r3, r2
    abc0:	4003      	ands	r3, r0
    abc2:	2b01      	cmp	r3, #1
    abc4:	d1e4      	bne.n	ab90 <ticker_worker+0x2c>
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;

		if (ticker->timeout_func) {
    abc6:	68cb      	ldr	r3, [r1, #12]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
			continue;
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;
    abc8:	3a01      	subs	r2, #1
    abca:	708a      	strb	r2, [r1, #2]

		if (ticker->timeout_func) {
    abcc:	1e1d      	subs	r5, r3, #0
    abce:	d0df      	beq.n	ab90 <ticker_worker+0x2c>
			DEBUG_TICKER_TASK(1);
			ticker->timeout_func(((instance->ticks_current +
    abd0:	6963      	ldr	r3, [r4, #20]
    abd2:	8a88      	ldrh	r0, [r1, #20]
    abd4:	8b4a      	ldrh	r2, [r1, #26]
    abd6:	1a18      	subs	r0, r3, r0
    abd8:	1980      	adds	r0, r0, r6
    abda:	0200      	lsls	r0, r0, #8
    abdc:	690b      	ldr	r3, [r1, #16]
    abde:	0a00      	lsrs	r0, r0, #8
    abe0:	6a09      	ldr	r1, [r1, #32]
    abe2:	47a8      	blx	r5
    abe4:	e7d4      	b.n	ab90 <ticker_worker+0x2c>

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
		u8_t last;

		last = instance->ticks_elapsed_last + 1;
    abe6:	3301      	adds	r3, #1
    abe8:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
    abea:	2b02      	cmp	r3, #2
    abec:	d100      	bne.n	abf0 <ticker_worker+0x8c>
			last = 0;
    abee:	2300      	movs	r3, #0
		}
		instance->ticks_elapsed_last = last;
    abf0:	72e3      	strb	r3, [r4, #11]
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
    abf2:	7ae3      	ldrb	r3, [r4, #11]
	    ticks_expired;

	instance->worker_trigger = 0;

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    abf4:	2201      	movs	r2, #1
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
    abf6:	3302      	adds	r3, #2
    abf8:	009b      	lsls	r3, r3, #2
    abfa:	18e3      	adds	r3, r4, r3
    abfc:	605e      	str	r6, [r3, #4]
	    ticks_expired;

	instance->worker_trigger = 0;
    abfe:	2300      	movs	r3, #0

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    ac00:	2102      	movs	r1, #2
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
	    ticks_expired;

	instance->worker_trigger = 0;
    ac02:	7763      	strb	r3, [r4, #29]

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    ac04:	0010      	movs	r0, r2
    ac06:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ac08:	4798      	blx	r3
}
    ac0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000ac0c <ticker_job>:
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    ac0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    ac0e:	7f42      	ldrb	r2, [r0, #29]
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    ac10:	b095      	sub	sp, #84	; 0x54
    ac12:	0007      	movs	r7, r0
	u8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    ac14:	2a00      	cmp	r2, #0
    ac16:	d000      	beq.n	ac1a <ticker_job+0xe>
    ac18:	e37e      	b.n	b318 <ticker_job+0x70c>
		DEBUG_TICKER_JOB(0);

		return;
	}
	instance->job_guard = 1;
    ac1a:	2301      	movs	r3, #1
    ac1c:	7703      	strb	r3, [r0, #28]

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    ac1e:	6943      	ldr	r3, [r0, #20]
    ac20:	9307      	str	r3, [sp, #28]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    ac22:	7a83      	ldrb	r3, [r0, #10]
    ac24:	7ac1      	ldrb	r1, [r0, #11]
    ac26:	4299      	cmp	r1, r3
    ac28:	d013      	beq.n	ac52 <ticker_job+0x46>
		u8_t first;

		first = instance->ticks_elapsed_first + 1;
    ac2a:	3301      	adds	r3, #1
    ac2c:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    ac2e:	2b02      	cmp	r3, #2
    ac30:	d100      	bne.n	ac34 <ticker_job+0x28>
			first = 0;
    ac32:	0013      	movs	r3, r2
		}
		instance->ticks_elapsed_first = first;
    ac34:	72bb      	strb	r3, [r7, #10]

		ticks_elapsed =
    ac36:	3302      	adds	r3, #2
    ac38:	009b      	lsls	r3, r3, #2
    ac3a:	18fb      	adds	r3, r7, r3
    ac3c:	685b      	ldr	r3, [r3, #4]
    ac3e:	9303      	str	r3, [sp, #12]
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= 0x00FFFFFF;
    ac40:	9a03      	ldr	r2, [sp, #12]
    ac42:	9b07      	ldr	r3, [sp, #28]
    ac44:	189b      	adds	r3, r3, r2
    ac46:	021b      	lsls	r3, r3, #8
    ac48:	0a1b      	lsrs	r3, r3, #8
    ac4a:	617b      	str	r3, [r7, #20]

		flag_elapsed = 1;
    ac4c:	2301      	movs	r3, #1
    ac4e:	9306      	str	r3, [sp, #24]
    ac50:	e001      	b.n	ac56 <ticker_job+0x4a>
	} else {
		/* No elapsed value in queue */
		flag_elapsed = 0;
    ac52:	9206      	str	r2, [sp, #24]
		ticks_elapsed = 0;
    ac54:	9203      	str	r2, [sp, #12]
	flag_compare_update = 0;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    ac56:	7e3b      	ldrb	r3, [r7, #24]
    ac58:	930a      	str	r3, [sp, #40]	; 0x28
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
	node = &instance->node[0];
    ac5a:	683b      	ldr	r3, [r7, #0]
    ac5c:	930c      	str	r3, [sp, #48]	; 0x30
	users = &instance->user[0];
    ac5e:	687b      	ldr	r3, [r7, #4]
    ac60:	930e      	str	r3, [sp, #56]	; 0x38
	count_user = instance->count_user;
    ac62:	7a7b      	ldrb	r3, [r7, #9]
    ac64:	9305      	str	r3, [sp, #20]
		flag_elapsed = 0;
		ticks_elapsed = 0;
	}

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;
    ac66:	23ff      	movs	r3, #255	; 0xff
    ac68:	9302      	str	r3, [sp, #8]
	u8_t pending;
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	pending = 0;
    ac6a:	2300      	movs	r3, #0
				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;

				pending = 1;
    ac6c:	930d      	str	r3, [sp, #52]	; 0x34

	pending = 0;
	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    ac6e:	9b05      	ldr	r3, [sp, #20]
    ac70:	2b00      	cmp	r3, #0
    ac72:	d100      	bne.n	ac76 <ticker_job+0x6a>
    ac74:	e0e3      	b.n	ae3e <ticker_job+0x232>
    ac76:	9b05      	ldr	r3, [sp, #20]
		struct ticker_user *user;
		struct ticker_user_op *user_ops;

		user = &users[count_user];
    ac78:	9a0e      	ldr	r2, [sp, #56]	; 0x38

	pending = 0;
	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    ac7a:	3b01      	subs	r3, #1
    ac7c:	b2db      	uxtb	r3, r3
    ac7e:	9305      	str	r3, [sp, #20]
		struct ticker_user *user;
		struct ticker_user_op *user_ops;

		user = &users[count_user];
    ac80:	00db      	lsls	r3, r3, #3
    ac82:	18d3      	adds	r3, r2, r3
    ac84:	9304      	str	r3, [sp, #16]
		user_ops = &user->user_op[0];
    ac86:	685b      	ldr	r3, [r3, #4]
    ac88:	930f      	str	r3, [sp, #60]	; 0x3c
		while (user->middle != user->last) {
    ac8a:	9b04      	ldr	r3, [sp, #16]
    ac8c:	78d9      	ldrb	r1, [r3, #3]
    ac8e:	9b04      	ldr	r3, [sp, #16]
    ac90:	789e      	ldrb	r6, [r3, #2]
    ac92:	428e      	cmp	r6, r1
    ac94:	d0eb      	beq.n	ac6e <ticker_job+0x62>
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    ac96:	252c      	movs	r5, #44	; 0x2c
    ac98:	4375      	muls	r5, r6
    ac9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    ac9c:	9a04      	ldr	r2, [sp, #16]
			struct ticker_node *ticker;
			u8_t state;
			u8_t prev;
			u8_t middle;

			user_op = &user_ops[user->middle];
    ac9e:	195d      	adds	r5, r3, r5

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    aca0:	7812      	ldrb	r2, [r2, #0]

			user_op = &user_ops[user->middle];

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
    aca2:	1c73      	adds	r3, r6, #1
    aca4:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
    aca6:	429a      	cmp	r2, r3
    aca8:	d100      	bne.n	acac <ticker_job+0xa0>
				middle = 0;
    acaa:	2300      	movs	r3, #0
			}
			user->middle = middle;
    acac:	9a04      	ldr	r2, [sp, #16]
    acae:	7093      	strb	r3, [r2, #2]

			ticker = &node[user_op->id];

			/* if op is start, then skip update and stop ops */
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    acb0:	782a      	ldrb	r2, [r5, #0]
    acb2:	2a03      	cmp	r2, #3
    acb4:	d9eb      	bls.n	ac8e <ticker_job+0x82>
			state = (ticker->req - ticker->ack) & 0xff;

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP)
    acb6:	2a05      	cmp	r2, #5
    acb8:	d815      	bhi.n	ace6 <ticker_job+0xda>
			if (middle == user->count_user_op) {
				middle = 0;
			}
			user->middle = middle;

			ticker = &node[user_op->id];
    acba:	2424      	movs	r4, #36	; 0x24
    acbc:	7869      	ldrb	r1, [r5, #1]
    acbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    acc0:	434c      	muls	r4, r1
    acc2:	191c      	adds	r4, r3, r4
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
				continue;
			}

			/* determine the ticker state */
			state = (ticker->req - ticker->ack) & 0xff;
    acc4:	7863      	ldrb	r3, [r4, #1]
    acc6:	78a0      	ldrb	r0, [r4, #2]
    acc8:	1a1b      	subs	r3, r3, r0
    acca:	b2db      	uxtb	r3, r3

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP)
			    || (state == 0)
    accc:	2b00      	cmp	r3, #0
    acce:	d00a      	beq.n	ace6 <ticker_job+0xda>
			    || ((user_op->op == TICKER_USER_OP_TYPE_UPDATE)
    acd0:	2a04      	cmp	r2, #4
    acd2:	d112      	bne.n	acfa <ticker_job+0xee>
				&&
				(user_op->params.update.ticks_drift_plus == 0)
				&&
    acd4:	686a      	ldr	r2, [r5, #4]
    acd6:	2a00      	cmp	r2, #0
    acd8:	d10f      	bne.n	acfa <ticker_job+0xee>
				(user_op->params.update.ticks_drift_minus ==
				 0)
				&& (user_op->params.update.ticks_slot_plus ==
				    0)
				&& (user_op->params.update.ticks_slot_minus ==
    acda:	68aa      	ldr	r2, [r5, #8]
    acdc:	2a00      	cmp	r2, #0
    acde:	d10c      	bne.n	acfa <ticker_job+0xee>
				    0)
				&& (user_op->params.update.lazy == 0)
				&& (user_op->params.update.force == 0)
    ace0:	68ea      	ldr	r2, [r5, #12]
    ace2:	0212      	lsls	r2, r2, #8
    ace4:	d109      	bne.n	acfa <ticker_job+0xee>
			    )
			    ) {
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    ace6:	2300      	movs	r3, #0
    ace8:	702b      	strb	r3, [r5, #0]
				user_op->status = TICKER_STATUS_FAILURE;
    acea:	3301      	adds	r3, #1
    acec:	622b      	str	r3, [r5, #32]
				if (user_op->fp_op_func) {
    acee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    acf0:	2b00      	cmp	r3, #0
    acf2:	d0ca      	beq.n	ac8a <ticker_job+0x7e>
					user_op->fp_op_func(user_op->status,
    acf4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    acf6:	2001      	movs	r0, #1
    acf8:	e096      	b.n	ae28 <ticker_job+0x21c>

				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
    acfa:	2b01      	cmp	r3, #1
    acfc:	d000      	beq.n	ad00 <ticker_job+0xf4>
    acfe:	e095      	b.n	ae2c <ticker_job+0x220>
				ticker->ticks_to_expire =
				    ticker_dequeue(instance,
    ad00:	0038      	movs	r0, r7
    ad02:	f7ff fe01 	bl	a908 <ticker_dequeue>
				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
				ticker->ticks_to_expire =
    ad06:	60a0      	str	r0, [r4, #8]
						      user_op->id);

				/* Handle drift of ticker by re-inserting
				 * it back.
				 */
				if (user_op->op ==
    ad08:	782b      	ldrb	r3, [r5, #0]
			}

			/* Delete node, if not expired */
			if (state == 1) {
				ticker->ticks_to_expire =
				    ticker_dequeue(instance,
    ad0a:	0006      	movs	r6, r0
						      user_op->id);

				/* Handle drift of ticker by re-inserting
				 * it back.
				 */
				if (user_op->op ==
    ad0c:	2b04      	cmp	r3, #4
    ad0e:	d000      	beq.n	ad12 <ticker_job+0x106>
    ad10:	e078      	b.n	ae04 <ticker_job+0x1f8>
					TICKER_USER_OP_TYPE_UPDATE) {
					ticker_job_node_update(ticker,
    ad12:	697b      	ldr	r3, [r7, #20]
    ad14:	9308      	str	r3, [sp, #32]
					  u8_t *insert_head)
{
	u32_t ticks_now;
	u32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
    ad16:	f7ff f989 	bl	a02c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    ad1a:	9a08      	ldr	r2, [sp, #32]
					  u8_t *insert_head)
{
	u32_t ticks_now;
	u32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
    ad1c:	9009      	str	r0, [sp, #36]	; 0x24
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    ad1e:	1a80      	subs	r0, r0, r2
    ad20:	0200      	lsls	r0, r0, #8
    ad22:	9b03      	ldr	r3, [sp, #12]
    ad24:	0a00      	lsrs	r0, r0, #8
    ad26:	18c3      	adds	r3, r0, r3
	if (ticks_to_expire > ticks_elapsed) {
		ticks_to_expire -= ticks_elapsed;
    ad28:	1af0      	subs	r0, r6, r3
	u32_t ticks_now;
	u32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
	if (ticks_to_expire > ticks_elapsed) {
    ad2a:	429e      	cmp	r6, r3
    ad2c:	d804      	bhi.n	ad38 <ticker_job+0x12c>
		ticks_to_expire -= ticks_elapsed;
	} else {
		ticker->ticks_to_expire_minus +=
    ad2e:	8aa0      	ldrh	r0, [r4, #20]
    ad30:	1b80      	subs	r0, r0, r6
    ad32:	18c0      	adds	r0, r0, r3
    ad34:	82a0      	strh	r0, [r4, #20]
		    (ticks_elapsed - ticks_to_expire);
		ticks_to_expire = 0;
    ad36:	2000      	movs	r0, #0
	}

	if ((ticker->ticks_periodic != 0)
    ad38:	6863      	ldr	r3, [r4, #4]
    ad3a:	2b00      	cmp	r3, #0
    ad3c:	d03d      	beq.n	adba <ticker_job+0x1ae>
	    && (user_op->params.update.lazy != 0)
    ad3e:	89ab      	ldrh	r3, [r5, #12]
    ad40:	2b00      	cmp	r3, #0
    ad42:	d03a      	beq.n	adba <ticker_job+0x1ae>
	    ) {
		user_op->params.update.lazy--;
    ad44:	3b01      	subs	r3, #1
    ad46:	81ab      	strh	r3, [r5, #12]

		while ((ticks_to_expire > ticker->ticks_periodic)
    ad48:	6863      	ldr	r3, [r4, #4]
    ad4a:	469c      	mov	ip, r3
    ad4c:	4584      	cmp	ip, r0
    ad4e:	d301      	bcc.n	ad54 <ticker_job+0x148>
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
    ad50:	49cb      	ldr	r1, [pc, #812]	; (b080 <ticker_job+0x474>)
    ad52:	e027      	b.n	ada4 <ticker_job+0x198>
	    && (user_op->params.update.lazy != 0)
	    ) {
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic)
		       && (ticker->lazy_current >
    ad54:	8b63      	ldrh	r3, [r4, #26]
    ad56:	930b      	str	r3, [sp, #44]	; 0x2c
    ad58:	89aa      	ldrh	r2, [r5, #12]
    ad5a:	429a      	cmp	r2, r3
    ad5c:	d2f8      	bcs.n	ad50 <ticker_job+0x144>

static u8_t ticker_remainder_decrement(struct ticker_node *ticker)
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= 0x80000000)
    ad5e:	6a21      	ldr	r1, [r4, #32]
    ad60:	4ac8      	ldr	r2, [pc, #800]	; (b084 <ticker_job+0x478>)
    ad62:	4bc7      	ldr	r3, [pc, #796]	; (b080 <ticker_job+0x474>)
    ad64:	188a      	adds	r2, r1, r2
    ad66:	0016      	movs	r6, r2
	return 0;
}

static u8_t ticker_remainder_decrement(struct ticker_node *ticker)
{
	u8_t decrement = 0;
    ad68:	2200      	movs	r2, #0

	if ((ticker->remainder_current >= 0x80000000)
    ad6a:	429e      	cmp	r6, r3
    ad6c:	d903      	bls.n	ad76 <ticker_job+0x16a>
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
    ad6e:	4ac6      	ldr	r2, [pc, #792]	; (b088 <ticker_job+0x47c>)
    ad70:	1889      	adds	r1, r1, r2
{
	u8_t decrement = 0;

	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
    ad72:	2201      	movs	r2, #1
		ticker->remainder_current += 30517578UL;
    ad74:	6221      	str	r1, [r4, #32]
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    ad76:	6a21      	ldr	r1, [r4, #32]
    ad78:	69e6      	ldr	r6, [r4, #28]
		       && (ticker->lazy_current >
			   user_op->params.update.lazy)) {
			ticks_to_expire -=
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
    ad7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    ad7c:	1b89      	subs	r1, r1, r6
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic)
		       && (ticker->lazy_current >
			   user_op->params.update.lazy)) {
			ticks_to_expire -=
    ad7e:	4462      	add	r2, ip
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
    ad80:	3b01      	subs	r3, #1
	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    ad82:	6221      	str	r1, [r4, #32]
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic)
		       && (ticker->lazy_current >
			   user_op->params.update.lazy)) {
			ticks_to_expire -=
    ad84:	1a80      	subs	r0, r0, r2
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
    ad86:	8363      	strh	r3, [r4, #26]
    ad88:	e7e0      	b.n	ad4c <ticker_job+0x140>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    ad8a:	69e6      	ldr	r6, [r4, #28]
    ad8c:	6a23      	ldr	r3, [r4, #32]
    ad8e:	199b      	adds	r3, r3, r6
	if ((ticker->remainder_current < 0x80000000)
    ad90:	4ebc      	ldr	r6, [pc, #752]	; (b084 <ticker_job+0x478>)
    ad92:	199e      	adds	r6, r3, r6
    ad94:	428e      	cmp	r6, r1
    ad96:	d90a      	bls.n	adae <ticker_job+0x1a2>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    ad98:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    ad9a:	2300      	movs	r3, #0
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire +=
    ad9c:	4463      	add	r3, ip
			    ticker->ticks_periodic +
			    ticker_remainder_increment(ticker);
			ticker->lazy_current++;
    ad9e:	3201      	adds	r2, #1
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire +=
    ada0:	18c0      	adds	r0, r0, r3
			    ticker->ticks_periodic +
			    ticker_remainder_increment(ticker);
			ticker->lazy_current++;
    ada2:	8362      	strh	r2, [r4, #26]
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
    ada4:	8b62      	ldrh	r2, [r4, #26]
    ada6:	89ab      	ldrh	r3, [r5, #12]
    ada8:	429a      	cmp	r2, r3
    adaa:	d3ee      	bcc.n	ad8a <ticker_job+0x17e>
    adac:	e004      	b.n	adb8 <ticker_job+0x1ac>
static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    adae:	4eb7      	ldr	r6, [pc, #732]	; (b08c <ticker_job+0x480>)
    adb0:	199b      	adds	r3, r3, r6
    adb2:	6223      	str	r3, [r4, #32]
		return 1;
    adb4:	2301      	movs	r3, #1
    adb6:	e7f1      	b.n	ad9c <ticker_job+0x190>
			    ticker->ticks_periodic +
			    ticker_remainder_increment(ticker);
			ticker->lazy_current++;
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
    adb8:	8323      	strh	r3, [r4, #24]
	}

	ticker->ticks_to_expire =
    adba:	88ab      	ldrh	r3, [r5, #4]
	    ticks_to_expire + user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    adbc:	8aa2      	ldrh	r2, [r4, #20]
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire =
    adbe:	1818      	adds	r0, r3, r0
    adc0:	60a0      	str	r0, [r4, #8]
	    ticks_to_expire + user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    adc2:	88eb      	ldrh	r3, [r5, #6]
	    user_op->params.update.ticks_drift_minus;
	prepare_ticks_to_expire(ticker, ticks_current, ticks_now);
    adc4:	9908      	ldr	r1, [sp, #32]
		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire =
	    ticks_to_expire + user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    adc6:	18d3      	adds	r3, r2, r3
    adc8:	82a3      	strh	r3, [r4, #20]
	    user_op->params.update.ticks_drift_minus;
	prepare_ticks_to_expire(ticker, ticks_current, ticks_now);
    adca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    adcc:	0020      	movs	r0, r4
    adce:	f7ff fdc3 	bl	a958 <prepare_ticks_to_expire>

	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    add2:	8ae2      	ldrh	r2, [r4, #22]
    add4:	892b      	ldrh	r3, [r5, #8]
    add6:	18d3      	adds	r3, r2, r3
    add8:	b29b      	uxth	r3, r3
    adda:	82e3      	strh	r3, [r4, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    addc:	896a      	ldrh	r2, [r5, #10]
    adde:	4293      	cmp	r3, r2
    ade0:	d901      	bls.n	ade6 <ticker_job+0x1da>
		ticker->ticks_slot -=
    ade2:	1a9b      	subs	r3, r3, r2
    ade4:	e000      	b.n	ade8 <ticker_job+0x1dc>
		    user_op->params.update.ticks_slot_minus;
	} else {
		ticker->ticks_slot = 0;
    ade6:	2300      	movs	r3, #0
    ade8:	82e3      	strh	r3, [r4, #22]
	}

	if (user_op->params.update.force != 0) {
    adea:	7bab      	ldrb	r3, [r5, #14]
    adec:	2b00      	cmp	r3, #0
    adee:	d000      	beq.n	adf2 <ticker_job+0x1e6>
		ticker->force = user_op->params.update.force;
    adf0:	70e3      	strb	r3, [r4, #3]
	}

	ticker->next = *insert_head;
    adf2:	466b      	mov	r3, sp
    adf4:	7a1b      	ldrb	r3, [r3, #8]
    adf6:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
    adf8:	786b      	ldrb	r3, [r5, #1]
    adfa:	9302      	str	r3, [sp, #8]
							  insert_head);

					/* set schedule status of node
					 * as updating.
					 */
					ticker->req++;
    adfc:	7863      	ldrb	r3, [r4, #1]
    adfe:	3301      	adds	r3, #1
    ae00:	7063      	strb	r3, [r4, #1]
    ae02:	e009      	b.n	ae18 <ticker_job+0x20c>
				} else {
					/* reset schedule status of node */
					ticker->req = ticker->ack;
    ae04:	78a3      	ldrb	r3, [r4, #2]
    ae06:	7063      	strb	r3, [r4, #1]

					if (instance->
    ae08:	7e7a      	ldrb	r2, [r7, #25]
    ae0a:	786b      	ldrb	r3, [r5, #1]
    ae0c:	429a      	cmp	r2, r3
    ae0e:	d103      	bne.n	ae18 <ticker_job+0x20c>
					    ticker_id_slot_previous ==
					    user_op->id) {
						instance->
						    ticker_id_slot_previous =
    ae10:	23ff      	movs	r3, #255	; 0xff
    ae12:	767b      	strb	r3, [r7, #25]
						    TICKER_NULL;
						instance->
						    ticks_slot_previous = 0;
    ae14:	2300      	movs	r3, #0
    ae16:	837b      	strh	r3, [r7, #26]
				}

				/* op success, @todo update may fail during
				 * actual insert! need to design that yet.
				 */
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    ae18:	2000      	movs	r0, #0
				user_op->status = TICKER_STATUS_SUCCESS;
				if (user_op->fp_op_func) {
    ae1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				}

				/* op success, @todo update may fail during
				 * actual insert! need to design that yet.
				 */
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    ae1c:	7028      	strb	r0, [r5, #0]
				user_op->status = TICKER_STATUS_SUCCESS;
    ae1e:	6228      	str	r0, [r5, #32]
				if (user_op->fp_op_func) {
    ae20:	4283      	cmp	r3, r0
    ae22:	d100      	bne.n	ae26 <ticker_job+0x21a>
    ae24:	e731      	b.n	ac8a <ticker_job+0x7e>
					user_op->fp_op_func(
    ae26:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    ae28:	4798      	blx	r3
    ae2a:	e72e      	b.n	ac8a <ticker_job+0x7e>
				/* update on expired node requested, deferi
				 * update until bottom half finishes.
				 */
				/* sched job to run after worker bottom half.
				 */
				instance->fp_sched(CALL_ID_JOB,
    ae2c:	2102      	movs	r1, #2
    ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae30:	2201      	movs	r2, #1
    ae32:	0008      	movs	r0, r1
    ae34:	4798      	blx	r3
						   CALL_ID_JOB, 1);

				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;
    ae36:	9b04      	ldr	r3, [sp, #16]
    ae38:	709e      	strb	r6, [r3, #2]

				pending = 1;
    ae3a:	2301      	movs	r3, #1
    ae3c:	e716      	b.n	ac6c <ticker_job+0x60>

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;

	/* Initialise flag used to update next compare value */
	flag_compare_update = 0;
    ae3e:	7e3b      	ldrb	r3, [r7, #24]
    ae40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ae42:	1a9b      	subs	r3, r3, r2
    ae44:	1e5a      	subs	r2, r3, #1
    ae46:	4193      	sbcs	r3, r2
    ae48:	b2db      	uxtb	r3, r3
    ae4a:	930c      	str	r3, [sp, #48]	; 0x30
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    ae4c:	9b06      	ldr	r3, [sp, #24]
    ae4e:	2b00      	cmp	r3, #0
    ae50:	d063      	beq.n	af1a <ticker_job+0x30e>
					u8_t *insert_head)
{
	struct ticker_node *node;
	u32_t ticks_expired;

	node = &instance->node[0];
    ae52:	683b      	ldr	r3, [r7, #0]
    ae54:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    ae56:	9b05      	ldr	r3, [sp, #20]
    ae58:	9304      	str	r3, [sp, #16]
	while (instance->ticker_id_head != TICKER_NULL) {
    ae5a:	7e3e      	ldrb	r6, [r7, #24]
    ae5c:	2eff      	cmp	r6, #255	; 0xff
    ae5e:	d056      	beq.n	af0e <ticker_job+0x302>
		u8_t id_expired;
		u32_t ticks_to_expire;

		/* auto variable for current ticker node */
		id_expired = instance->ticker_id_head;
		ticker = &node[id_expired];
    ae60:	2424      	movs	r4, #36	; 0x24
    ae62:	4374      	muls	r4, r6
    ae64:	9b06      	ldr	r3, [sp, #24]
    ae66:	191c      	adds	r4, r3, r4

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    ae68:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    ae6a:	9b03      	ldr	r3, [sp, #12]
    ae6c:	429d      	cmp	r5, r3
    ae6e:	d902      	bls.n	ae76 <ticker_job+0x26a>
			ticker->ticks_to_expire -= ticks_elapsed;
    ae70:	1aed      	subs	r5, r5, r3
    ae72:	60a5      	str	r5, [r4, #8]
    ae74:	e04b      	b.n	af0e <ticker_job+0x302>
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;
    ae76:	9b04      	ldr	r3, [sp, #16]
    ae78:	195b      	adds	r3, r3, r5
    ae7a:	9304      	str	r3, [sp, #16]

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
    ae7c:	8b7b      	ldrh	r3, [r7, #26]
    ae7e:	429d      	cmp	r5, r3
    ae80:	d201      	bcs.n	ae86 <ticker_job+0x27a>
			instance->ticks_slot_previous -= ticks_to_expire;
    ae82:	1b5b      	subs	r3, r3, r5
    ae84:	e002      	b.n	ae8c <ticker_job+0x280>
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    ae86:	23ff      	movs	r3, #255	; 0xff
    ae88:	767b      	strb	r3, [r7, #25]
			instance->ticks_slot_previous = 0;
    ae8a:	2300      	movs	r3, #0
    ae8c:	837b      	strh	r3, [r7, #26]
		}

		/* save current ticks_slot_previous */
		if (ticker->ticks_slot != 0) {
    ae8e:	8ae3      	ldrh	r3, [r4, #22]
    ae90:	2b00      	cmp	r3, #0
    ae92:	d002      	beq.n	ae9a <ticker_job+0x28e>
			instance->ticker_id_slot_previous = id_expired;
    ae94:	767e      	strb	r6, [r7, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
    ae96:	8ae3      	ldrh	r3, [r4, #22]
    ae98:	837b      	strh	r3, [r7, #26]
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    ae9a:	2200      	movs	r2, #0

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    ae9c:	7823      	ldrb	r3, [r4, #0]
			instance->ticker_id_slot_previous = id_expired;
			instance->ticks_slot_previous = ticker->ticks_slot;
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    ae9e:	60a2      	str	r2, [r4, #8]

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    aea0:	763b      	strb	r3, [r7, #24]

		/* ticker will be restarted if periodic */
		if (ticker->ticks_periodic != 0) {
    aea2:	6860      	ldr	r0, [r4, #4]
    aea4:	4290      	cmp	r0, r2
    aea6:	d02a      	beq.n	aefe <ticker_job+0x2f2>
    aea8:	8b23      	ldrh	r3, [r4, #24]
    aeaa:	9305      	str	r3, [sp, #20]
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
    aeac:	4b74      	ldr	r3, [pc, #464]	; (b080 <ticker_job+0x474>)
    aeae:	469c      	mov	ip, r3
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    aeb0:	69e1      	ldr	r1, [r4, #28]
    aeb2:	6a23      	ldr	r3, [r4, #32]
    aeb4:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < 0x80000000)
    aeb6:	4973      	ldr	r1, [pc, #460]	; (b084 <ticker_job+0x478>)
    aeb8:	1859      	adds	r1, r3, r1
    aeba:	4561      	cmp	r1, ip
    aebc:	d902      	bls.n	aec4 <ticker_job+0x2b8>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    aebe:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    aec0:	2300      	movs	r3, #0
    aec2:	e003      	b.n	aecc <ticker_job+0x2c0>
static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    aec4:	4971      	ldr	r1, [pc, #452]	; (b08c <ticker_job+0x480>)
    aec6:	185b      	adds	r3, r3, r1
    aec8:	6223      	str	r3, [r4, #32]
		return 1;
    aeca:	2301      	movs	r3, #1

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
				ticks_to_expire +=
    aecc:	181b      	adds	r3, r3, r0
    aece:	18d2      	adds	r2, r2, r3
			u32_t count;

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
    aed0:	9b05      	ldr	r3, [sp, #20]
    aed2:	3b01      	subs	r3, #1
    aed4:	9305      	str	r3, [sp, #20]
    aed6:	d2eb      	bcs.n	aeb0 <ticker_job+0x2a4>
				    ticker->ticks_periodic +
				    ticker_remainder_increment(ticker);
			}

			ticker->ticks_to_expire = ticks_to_expire;
			prepare_ticks_to_expire(ticker,
    aed8:	9b07      	ldr	r3, [sp, #28]
				ticks_to_expire +=
				    ticker->ticks_periodic +
				    ticker_remainder_increment(ticker);
			}

			ticker->ticks_to_expire = ticks_to_expire;
    aeda:	60a2      	str	r2, [r4, #8]
			prepare_ticks_to_expire(ticker,
    aedc:	9a04      	ldr	r2, [sp, #16]
    aede:	6979      	ldr	r1, [r7, #20]
    aee0:	189a      	adds	r2, r3, r2
    aee2:	0020      	movs	r0, r4
    aee4:	f7ff fd38 	bl	a958 <prepare_ticks_to_expire>
						    instance->ticks_current,
						    (ticks_previous +
						     ticks_expired));
			ticker->lazy_current = ticker->lazy_periodic;
    aee8:	8b23      	ldrh	r3, [r4, #24]
    aeea:	8363      	strh	r3, [r4, #26]
			ticker->force = 0;
    aeec:	2300      	movs	r3, #0
    aeee:	70e3      	strb	r3, [r4, #3]

			ticker->next = *insert_head;
    aef0:	466b      	mov	r3, sp
    aef2:	7a1b      	ldrb	r3, [r3, #8]
    aef4:	7023      	strb	r3, [r4, #0]
			*insert_head = id_expired;

			/* set schedule status of node as restarting. */
			ticker->req++;
    aef6:	7863      	ldrb	r3, [r4, #1]
    aef8:	3301      	adds	r3, #1
    aefa:	7063      	strb	r3, [r4, #1]
    aefc:	e002      	b.n	af04 <ticker_job+0x2f8>
		} else {
			/* reset schedule status of node */
			ticker->req = ticker->ack;
    aefe:	78a3      	ldrb	r3, [r4, #2]
    af00:	9e02      	ldr	r6, [sp, #8]
    af02:	7063      	strb	r3, [r4, #1]
			ticker->ticks_to_expire -= ticks_elapsed;
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    af04:	9b03      	ldr	r3, [sp, #12]
    af06:	9602      	str	r6, [sp, #8]
    af08:	1b5b      	subs	r3, r3, r5
    af0a:	9303      	str	r3, [sp, #12]
    af0c:	e7a5      	b.n	ae5a <ticker_job+0x24e>
	if (flag_elapsed) {
		ticker_job_worker_bottom_half(instance, ticks_previous,
						 ticks_elapsed, &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
    af0e:	7e3b      	ldrb	r3, [r7, #24]
    af10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    af12:	4293      	cmp	r3, r2
    af14:	d001      	beq.n	af1a <ticker_job+0x30e>
			flag_compare_update = 1;
    af16:	2301      	movs	r3, #1
    af18:	930c      	str	r3, [sp, #48]	; 0x30
{
	struct ticker_node *node;
	struct ticker_user *users;
	u8_t count_user;

	node = &instance->node[0];
    af1a:	683b      	ldr	r3, [r7, #0]
    af1c:	930e      	str	r3, [sp, #56]	; 0x38
	users = &instance->user[0];
    af1e:	687b      	ldr	r3, [r7, #4]
    af20:	9312      	str	r3, [sp, #72]	; 0x48
	count_user = instance->count_user;
    af22:	7a7b      	ldrb	r3, [r7, #9]
    af24:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    af26:	9b08      	ldr	r3, [sp, #32]
    af28:	2b00      	cmp	r3, #0
    af2a:	d100      	bne.n	af2e <ticker_job+0x322>
    af2c:	e128      	b.n	b180 <ticker_job+0x574>
    af2e:	9b08      	ldr	r3, [sp, #32]
		struct ticker_user *user;
		u8_t user_ops_first;

		user = &users[count_user];
    af30:	9a12      	ldr	r2, [sp, #72]	; 0x48
	u8_t count_user;

	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    af32:	3b01      	subs	r3, #1
    af34:	b2db      	uxtb	r3, r3
    af36:	9308      	str	r3, [sp, #32]
		struct ticker_user *user;
		u8_t user_ops_first;

		user = &users[count_user];
    af38:	00db      	lsls	r3, r3, #3
    af3a:	18d3      	adds	r3, r2, r3
    af3c:	930b      	str	r3, [sp, #44]	; 0x2c
		user_ops_first = user->first;
    af3e:	785b      	ldrb	r3, [r3, #1]
    af40:	9306      	str	r3, [sp, #24]
		while ((insert_head != TICKER_NULL)
    af42:	9b02      	ldr	r3, [sp, #8]
    af44:	2bff      	cmp	r3, #255	; 0xff
    af46:	d013      	beq.n	af70 <ticker_job+0x364>
			struct ticker_node *ticker;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    af48:	2424      	movs	r4, #36	; 0x24
    af4a:	9b02      	ldr	r3, [sp, #8]
				insert_head = ticker->next;

				user_op = 0;
    af4c:	2500      	movs	r5, #0
			struct ticker_node *ticker;
			u32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    af4e:	435c      	muls	r4, r3
    af50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af52:	191c      	adds	r4, r3, r4
				insert_head = ticker->next;
    af54:	9b02      	ldr	r3, [sp, #8]
    af56:	9304      	str	r3, [sp, #16]
    af58:	7823      	ldrb	r3, [r4, #0]
    af5a:	9302      	str	r3, [sp, #8]
    af5c:	e046      	b.n	afec <ticker_job+0x3e0>
				if (_user_op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
					user_op->op = TICKER_USER_OP_TYPE_NONE;
    af5e:	2300      	movs	r3, #0
					user_op->status =
    af60:	2001      	movs	r0, #1
				if (_user_op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
					user_op->op = TICKER_USER_OP_TYPE_NONE;
    af62:	702b      	strb	r3, [r5, #0]
					user_op->status =
					    TICKER_STATUS_FAILURE;

					if (user_op->fp_op_func) {
    af64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
					user_op->op = TICKER_USER_OP_TYPE_NONE;
					user_op->status =
    af66:	6228      	str	r0, [r5, #32]
					    TICKER_STATUS_FAILURE;

					if (user_op->fp_op_func) {
    af68:	2b00      	cmp	r3, #0
    af6a:	d001      	beq.n	af70 <ticker_job+0x364>
						user_op->
    af6c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    af6e:	4798      	blx	r3
		u8_t user_ops_first;

		user = &users[count_user];
		user_ops_first = user->first;
		while ((insert_head != TICKER_NULL)
		       || (user_ops_first != user->middle)
    af70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    af72:	9a06      	ldr	r2, [sp, #24]
    af74:	789b      	ldrb	r3, [r3, #2]
    af76:	4293      	cmp	r3, r2
    af78:	d0d5      	beq.n	af26 <ticker_job+0x31a>
				user_op = 0;
				_user_op = TICKER_USER_OP_TYPE_START;
			} else {
				u8_t first;

				user_op = &user->user_op[user_ops_first];
    af7a:	252c      	movs	r5, #44	; 0x2c
    af7c:	9b06      	ldr	r3, [sp, #24]
    af7e:	435d      	muls	r5, r3
    af80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    af82:	685b      	ldr	r3, [r3, #4]
    af84:	9303      	str	r3, [sp, #12]
    af86:	195d      	adds	r5, r3, r5
				first = user_ops_first + 1;
    af88:	9b06      	ldr	r3, [sp, #24]
    af8a:	3301      	adds	r3, #1
    af8c:	b2db      	uxtb	r3, r3
    af8e:	9306      	str	r3, [sp, #24]
				if (first == user->count_user_op) {
    af90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    af92:	9a06      	ldr	r2, [sp, #24]
    af94:	781b      	ldrb	r3, [r3, #0]
    af96:	4293      	cmp	r3, r2
    af98:	d101      	bne.n	af9e <ticker_job+0x392>
					first = 0;
    af9a:	2300      	movs	r3, #0
    af9c:	9306      	str	r3, [sp, #24]
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
				ticker = &node[id_insert];
				if (_user_op != TICKER_USER_OP_TYPE_START) {
    af9e:	782b      	ldrb	r3, [r5, #0]
    afa0:	2b03      	cmp	r3, #3
    afa2:	d1e5      	bne.n	af70 <ticker_job+0x364>
				}
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
				ticker = &node[id_insert];
    afa4:	2424      	movs	r4, #36	; 0x24
					first = 0;
				}
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
    afa6:	786b      	ldrb	r3, [r5, #1]
				ticker = &node[id_insert];
    afa8:	435c      	muls	r4, r3
					first = 0;
				}
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
    afaa:	9304      	str	r3, [sp, #16]
				ticker = &node[id_insert];
    afac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    afae:	191c      	adds	r4, r3, r4
				if (_user_op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    afb0:	7863      	ldrb	r3, [r4, #1]
    afb2:	78a6      	ldrb	r6, [r4, #2]
    afb4:	1b9e      	subs	r6, r3, r6
    afb6:	b2f6      	uxtb	r6, r6
    afb8:	2e00      	cmp	r6, #0
    afba:	d1d0      	bne.n	af5e <ticker_job+0x352>
					}

					continue;
				}

				ticker->ticks_periodic =
    afbc:	68eb      	ldr	r3, [r5, #12]
				    user_op->params.start.context;

				ticker->ticks_to_expire =
				    user_op->params.start.ticks_first;
				ticker->ticks_to_expire_minus = 0;
				prepare_ticks_to_expire(ticker,
    afbe:	6979      	ldr	r1, [r7, #20]
					}

					continue;
				}

				ticker->ticks_periodic =
    afc0:	6063      	str	r3, [r4, #4]
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
    afc2:	692b      	ldr	r3, [r5, #16]
				    user_op->params.start.context;

				ticker->ticks_to_expire =
				    user_op->params.start.ticks_first;
				ticker->ticks_to_expire_minus = 0;
				prepare_ticks_to_expire(ticker,
    afc4:	0020      	movs	r0, r4
					continue;
				}

				ticker->ticks_periodic =
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
    afc6:	61e3      	str	r3, [r4, #28]
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
				    user_op->params.start.lazy;
    afc8:	8aab      	ldrh	r3, [r5, #20]

				ticker->ticks_periodic =
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
    afca:	8323      	strh	r3, [r4, #24]
				    user_op->params.start.lazy;
				ticker->ticks_slot =
				    user_op->params.start.ticks_slot;
    afcc:	8aeb      	ldrh	r3, [r5, #22]
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
				    user_op->params.start.lazy;
				ticker->ticks_slot =
    afce:	82e3      	strh	r3, [r4, #22]
				    user_op->params.start.ticks_slot;
				ticker->timeout_func =
    afd0:	69ab      	ldr	r3, [r5, #24]
    afd2:	60e3      	str	r3, [r4, #12]
				    user_op->params.start.fp_timeout_func;
				ticker->context =
    afd4:	69eb      	ldr	r3, [r5, #28]
    afd6:	6123      	str	r3, [r4, #16]
				    user_op->params.start.context;

				ticker->ticks_to_expire =
    afd8:	68ab      	ldr	r3, [r5, #8]
				    user_op->params.start.ticks_first;
				ticker->ticks_to_expire_minus = 0;
    afda:	82a6      	strh	r6, [r4, #20]
				ticker->timeout_func =
				    user_op->params.start.fp_timeout_func;
				ticker->context =
				    user_op->params.start.context;

				ticker->ticks_to_expire =
    afdc:	60a3      	str	r3, [r4, #8]
				    user_op->params.start.ticks_first;
				ticker->ticks_to_expire_minus = 0;
				prepare_ticks_to_expire(ticker,
    afde:	686a      	ldr	r2, [r5, #4]
    afe0:	f7ff fcba 	bl	a958 <prepare_ticks_to_expire>
							    start.
							    ticks_at_start);

				ticker->remainder_current = 0;
				ticker->lazy_current = 0;
				ticker->force = 1;
    afe4:	2301      	movs	r3, #1
							    ticks_current,
							    user_op->params.
							    start.
							    ticks_at_start);

				ticker->remainder_current = 0;
    afe6:	6226      	str	r6, [r4, #32]
				ticker->lazy_current = 0;
    afe8:	8366      	strh	r6, [r4, #26]
				ticker->force = 1;
    afea:	70e3      	strb	r3, [r4, #3]
			}

			/* Prepare to insert */
			ticker->next = TICKER_NULL;
    afec:	23ff      	movs	r3, #255	; 0xff
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_current;
	u32_t ticks_slot_previous;

	node = &instance->node[0];
	ticker_new = &node[id];
    afee:	9a04      	ldr	r2, [sp, #16]
				ticker->lazy_current = 0;
				ticker->force = 1;
			}

			/* Prepare to insert */
			ticker->next = TICKER_NULL;
    aff0:	7023      	strb	r3, [r4, #0]
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_current;
	u32_t ticks_slot_previous;

	node = &instance->node[0];
	ticker_new = &node[id];
    aff2:	3bdb      	subs	r3, #219	; 0xdb
    aff4:	4353      	muls	r3, r2
    aff6:	9313      	str	r3, [sp, #76]	; 0x4c
	u8_t collide;
	u32_t ticks_to_expire;
	u32_t ticks_to_expire_current;
	u32_t ticks_slot_previous;

	node = &instance->node[0];
    aff8:	683b      	ldr	r3, [r7, #0]
    affa:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_new = &node[id];
    affc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    affe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b000:	4694      	mov	ip, r2
    b002:	4463      	add	r3, ip
    b004:	469c      	mov	ip, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
    b006:	689b      	ldr	r3, [r3, #8]
    b008:	9305      	str	r3, [sp, #20]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    b00a:	8b7a      	ldrh	r2, [r7, #26]
	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    b00c:	7e3b      	ldrb	r3, [r7, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    b00e:	9207      	str	r2, [sp, #28]

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    b010:	22ff      	movs	r2, #255	; 0xff
	current = instance->ticker_id_head;
	previous = current;
    b012:	930f      	str	r3, [sp, #60]	; 0x3c

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    b014:	9203      	str	r2, [sp, #12]
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
    b016:	2bff      	cmp	r3, #255	; 0xff
    b018:	d01a      	beq.n	b050 <ticker_job+0x444>
	       &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
    b01a:	2224      	movs	r2, #36	; 0x24
    b01c:	435a      	muls	r2, r3
    b01e:	9909      	ldr	r1, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
	       &&
    b020:	9805      	ldr	r0, [sp, #20]
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
    b022:	188a      	adds	r2, r1, r2
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
	       &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
    b024:	6891      	ldr	r1, [r2, #8]
	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
	       &&
    b026:	4288      	cmp	r0, r1
    b028:	d912      	bls.n	b050 <ticker_job+0x444>
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
	    ) {
		ticks_to_expire -= ticks_to_expire_current;
    b02a:	9805      	ldr	r0, [sp, #20]
    b02c:	1a40      	subs	r0, r0, r1
    b02e:	9005      	str	r0, [sp, #20]

		if (ticker_current->ticks_slot != 0) {
    b030:	8ad0      	ldrh	r0, [r2, #22]
    b032:	2800      	cmp	r0, #0
    b034:	d002      	beq.n	b03c <ticker_job+0x430>
			ticks_slot_previous = ticker_current->ticks_slot;
    b036:	9007      	str	r0, [sp, #28]
    b038:	9303      	str	r3, [sp, #12]
    b03a:	e006      	b.n	b04a <ticker_job+0x43e>
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    b03c:	9e07      	ldr	r6, [sp, #28]
    b03e:	42b1      	cmp	r1, r6
    b040:	d202      	bcs.n	b048 <ticker_job+0x43c>
				ticks_slot_previous -= ticks_to_expire_current;
    b042:	1a71      	subs	r1, r6, r1
    b044:	9107      	str	r1, [sp, #28]
    b046:	e000      	b.n	b04a <ticker_job+0x43e>
			} else {
				ticks_slot_previous = 0;
    b048:	9007      	str	r0, [sp, #28]
			}
		}
		previous = current;
		current = ticker_current->next;
    b04a:	930f      	str	r3, [sp, #60]	; 0x3c
    b04c:	7813      	ldrb	r3, [r2, #0]
    b04e:	e7e2      	b.n	b016 <ticker_job+0x40a>
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
				ticker_new->ticks_slot);
    b050:	4662      	mov	r2, ip
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
    b052:	9905      	ldr	r1, [sp, #20]
				ticker_new->ticks_slot);
    b054:	8ad2      	ldrh	r2, [r2, #22]
    b056:	9210      	str	r2, [sp, #64]	; 0x40
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
    b058:	1850      	adds	r0, r2, r1
    b05a:	001a      	movs	r2, r3
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    b05c:	2aff      	cmp	r2, #255	; 0xff
    b05e:	d018      	beq.n	b092 <ticker_job+0x486>
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    b060:	2124      	movs	r1, #36	; 0x24
    b062:	4351      	muls	r1, r2
    b064:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b066:	1871      	adds	r1, r6, r1
		ticks_to_expire = ticker->ticks_to_expire;
    b068:	688e      	ldr	r6, [r1, #8]
    b06a:	9611      	str	r6, [sp, #68]	; 0x44

		if (ticks_slot <= ticks_to_expire) {
    b06c:	4286      	cmp	r6, r0
    b06e:	d20f      	bcs.n	b090 <ticker_job+0x484>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    b070:	8ace      	ldrh	r6, [r1, #22]
    b072:	2e00      	cmp	r6, #0
    b074:	d10d      	bne.n	b092 <ticker_job+0x486>
			break;
		}

		ticks_slot -= ticks_to_expire;
    b076:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b078:	1a80      	subs	r0, r0, r2
		ticker_id_head = ticker->next;
    b07a:	780a      	ldrb	r2, [r1, #0]
    b07c:	e7ee      	b.n	b05c <ticker_job+0x450>
    b07e:	46c0      	nop			; (mov r8, r8)
    b080:	7f172b59 	.word	0x7f172b59
    b084:	ff172b5a 	.word	0xff172b5a
    b088:	01d1a94a 	.word	0x01d1a94a
    b08c:	fe2e56b6 	.word	0xfe2e56b6

		ticker = &node[ticker_id_head];
		ticks_to_expire = ticker->ticks_to_expire;

		if (ticks_slot <= ticks_to_expire) {
			return TICKER_NULL;
    b090:	22ff      	movs	r2, #255	; 0xff
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
				ticker_new->ticks_slot);

	if ((ticker_new->ticks_slot == 0)
    b092:	9910      	ldr	r1, [sp, #64]	; 0x40
    b094:	2900      	cmp	r1, #0
    b096:	d005      	beq.n	b0a4 <ticker_job+0x498>
	    || ((ticks_slot_previous <= ticks_to_expire)
    b098:	9907      	ldr	r1, [sp, #28]
    b09a:	9805      	ldr	r0, [sp, #20]
    b09c:	4288      	cmp	r0, r1
    b09e:	d31f      	bcc.n	b0e0 <ticker_job+0x4d4>
		&& (collide == TICKER_NULL))
    b0a0:	2aff      	cmp	r2, #255	; 0xff
    b0a2:	d126      	bne.n	b0f2 <ticker_job+0x4e6>
	    ) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    b0a4:	4662      	mov	r2, ip
    b0a6:	9905      	ldr	r1, [sp, #20]
		ticker_new->next = current;
    b0a8:	7013      	strb	r3, [r2, #0]

	if ((ticker_new->ticks_slot == 0)
	    || ((ticks_slot_previous <= ticks_to_expire)
		&& (collide == TICKER_NULL))
	    ) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    b0aa:	6091      	str	r1, [r2, #8]
		ticker_new->next = current;

		if (previous == current) {
    b0ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b0ae:	4293      	cmp	r3, r2
    b0b0:	d103      	bne.n	b0ba <ticker_job+0x4ae>
			instance->ticker_id_head = id;
    b0b2:	466a      	mov	r2, sp
    b0b4:	7c12      	ldrb	r2, [r2, #16]
    b0b6:	763a      	strb	r2, [r7, #24]
    b0b8:	e006      	b.n	b0c8 <ticker_job+0x4bc>
		} else {
			node[previous].next = id;
    b0ba:	2124      	movs	r1, #36	; 0x24
    b0bc:	4668      	mov	r0, sp
    b0be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b0c0:	7c00      	ldrb	r0, [r0, #16]
    b0c2:	434a      	muls	r2, r1
    b0c4:	9909      	ldr	r1, [sp, #36]	; 0x24
    b0c6:	5450      	strb	r0, [r2, r1]
		}

		if (current != TICKER_NULL) {
    b0c8:	2bff      	cmp	r3, #255	; 0xff
    b0ca:	d100      	bne.n	b0ce <ticker_job+0x4c2>
    b0cc:	e119      	b.n	b302 <ticker_job+0x6f6>
			node[current].ticks_to_expire -= ticks_to_expire;
    b0ce:	2224      	movs	r2, #36	; 0x24
    b0d0:	4353      	muls	r3, r2
    b0d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b0d4:	9905      	ldr	r1, [sp, #20]
    b0d6:	18d3      	adds	r3, r2, r3
    b0d8:	689a      	ldr	r2, [r3, #8]
    b0da:	1a52      	subs	r2, r2, r1
    b0dc:	609a      	str	r2, [r3, #8]
    b0de:	e110      	b.n	b302 <ticker_job+0x6f6>

			/* Prepare to insert */
			ticker->next = TICKER_NULL;

			/* If insert collides advance to next interval */
			while (id_insert !=
    b0e0:	9b04      	ldr	r3, [sp, #16]
    b0e2:	9a03      	ldr	r2, [sp, #12]
    b0e4:	4293      	cmp	r3, r2
    b0e6:	d100      	bne.n	b0ea <ticker_job+0x4de>
    b0e8:	e10b      	b.n	b302 <ticker_job+0x6f6>
			       (id_collide =
				ticker_enqueue(instance, id_insert))) {
				struct ticker_node *ticker_preempt;

				ticker_preempt = (id_collide != TICKER_NULL) ?
					&node[id_collide] : 0;
    b0ea:	9b03      	ldr	r3, [sp, #12]
    b0ec:	2bff      	cmp	r3, #255	; 0xff
    b0ee:	d105      	bne.n	b0fc <ticker_job+0x4f0>
    b0f0:	e01a      	b.n	b128 <ticker_job+0x51c>

			/* Prepare to insert */
			ticker->next = TICKER_NULL;

			/* If insert collides advance to next interval */
			while (id_insert !=
    b0f2:	9b04      	ldr	r3, [sp, #16]
    b0f4:	4293      	cmp	r3, r2
    b0f6:	d100      	bne.n	b0fa <ticker_job+0x4ee>
    b0f8:	e103      	b.n	b302 <ticker_job+0x6f6>
    b0fa:	9203      	str	r2, [sp, #12]
			       (id_collide =
				ticker_enqueue(instance, id_insert))) {
				struct ticker_node *ticker_preempt;

				ticker_preempt = (id_collide != TICKER_NULL) ?
					&node[id_collide] : 0;
    b0fc:	2624      	movs	r6, #36	; 0x24
    b0fe:	9b03      	ldr	r3, [sp, #12]
    b100:	435e      	muls	r6, r3
    b102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b104:	199e      	adds	r6, r3, r6

				if (ticker_preempt
    b106:	2e00      	cmp	r6, #0
    b108:	d00e      	beq.n	b128 <ticker_job+0x51c>
				    && (ticker->force > ticker_preempt->force)
    b10a:	78e2      	ldrb	r2, [r4, #3]
    b10c:	78f3      	ldrb	r3, [r6, #3]
    b10e:	429a      	cmp	r2, r3
    b110:	d90a      	bls.n	b128 <ticker_job+0x51c>
				    ) {
					/* dequeue and get the reminder of ticks
					 * to expire.
					 */
					ticker_preempt->ticks_to_expire =
					    ticker_dequeue(instance,
    b112:	9903      	ldr	r1, [sp, #12]
    b114:	0038      	movs	r0, r7
    b116:	f7ff fbf7 	bl	a908 <ticker_dequeue>
							      id_collide);

					/* unschedule node */
					ticker_preempt->req =
    b11a:	78b3      	ldrb	r3, [r6, #2]
				    && (ticker->force > ticker_preempt->force)
				    ) {
					/* dequeue and get the reminder of ticks
					 * to expire.
					 */
					ticker_preempt->ticks_to_expire =
    b11c:	60b0      	str	r0, [r6, #8]
					    ticker_dequeue(instance,
							      id_collide);

					/* unschedule node */
					ticker_preempt->req =
    b11e:	7073      	strb	r3, [r6, #1]
					    ticker_preempt->ack;

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
    b120:	466b      	mov	r3, sp
    b122:	7a1b      	ldrb	r3, [r3, #8]
    b124:	7033      	strb	r3, [r6, #0]
    b126:	e01a      	b.n	b15e <ticker_job+0x552>
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
    b128:	6862      	ldr	r2, [r4, #4]
    b12a:	2a00      	cmp	r2, #0
    b12c:	d01a      	beq.n	b164 <ticker_job+0x558>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    b12e:	69e1      	ldr	r1, [r4, #28]
    b130:	6a23      	ldr	r3, [r4, #32]
    b132:	185b      	adds	r3, r3, r1
	if ((ticker->remainder_current < 0x80000000)
    b134:	4979      	ldr	r1, [pc, #484]	; (b31c <ticker_job+0x710>)
    b136:	1858      	adds	r0, r3, r1
    b138:	4979      	ldr	r1, [pc, #484]	; (b320 <ticker_job+0x714>)
    b13a:	4288      	cmp	r0, r1
    b13c:	d902      	bls.n	b144 <ticker_job+0x538>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    b13e:	6223      	str	r3, [r4, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    b140:	2300      	movs	r3, #0
    b142:	e003      	b.n	b14c <ticker_job+0x540>
static u8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    b144:	4977      	ldr	r1, [pc, #476]	; (b324 <ticker_job+0x718>)
    b146:	185b      	adds	r3, r3, r1
    b148:	6223      	str	r3, [r4, #32]
		return 1;
    b14a:	2301      	movs	r3, #1

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
    b14c:	68a1      	ldr	r1, [r4, #8]
    b14e:	1852      	adds	r2, r2, r1
    b150:	18d3      	adds	r3, r2, r3
    b152:	60a3      	str	r3, [r4, #8]
					    ticker->ticks_periodic +
					    ticker_remainder_increment
					    (ticker);
					ticker->lazy_current++;
    b154:	8b63      	ldrh	r3, [r4, #26]
    b156:	3301      	adds	r3, #1
    b158:	8363      	strh	r3, [r4, #26]
    b15a:	9b02      	ldr	r3, [sp, #8]
    b15c:	9303      	str	r3, [sp, #12]
    b15e:	9b03      	ldr	r3, [sp, #12]
    b160:	9302      	str	r3, [sp, #8]
    b162:	e749      	b.n	aff8 <ticker_job+0x3ec>
			if (id_insert == id_collide) {
				ticker->req = ticker->ack + 1;

				status = TICKER_STATUS_SUCCESS;
			} else {
				status = TICKER_STATUS_FAILURE;
    b164:	2001      	movs	r0, #1
			}

			if (user_op) {
    b166:	2d00      	cmp	r5, #0
    b168:	d100      	bne.n	b16c <ticker_job+0x560>
    b16a:	e6ea      	b.n	af42 <ticker_job+0x336>
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    b16c:	2300      	movs	r3, #0
    b16e:	702b      	strb	r3, [r5, #0]
				user_op->status = status;

				if (user_op->fp_op_func) {
    b170:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				status = TICKER_STATUS_FAILURE;
			}

			if (user_op) {
				user_op->op = TICKER_USER_OP_TYPE_NONE;
				user_op->status = status;
    b172:	6228      	str	r0, [r5, #32]

				if (user_op->fp_op_func) {
    b174:	2b00      	cmp	r3, #0
    b176:	d100      	bne.n	b17a <ticker_job+0x56e>
    b178:	e6e3      	b.n	af42 <ticker_job+0x336>
					user_op->fp_op_func(user_op->status,
    b17a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    b17c:	4798      	blx	r3
    b17e:	e6e0      	b.n	af42 <ticker_job+0x336>

	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    b180:	7e3b      	ldrb	r3, [r7, #24]
    b182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b184:	4293      	cmp	r3, r2
    b186:	d103      	bne.n	b190 <ticker_job+0x584>
		flag_compare_update = 1;
	}

	/* Processing any list inquiries */
	if (!pending) {
    b188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b18a:	2b00      	cmp	r3, #0
    b18c:	d162      	bne.n	b254 <ticker_job+0x648>
    b18e:	e005      	b.n	b19c <ticker_job+0x590>
    b190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b192:	2b00      	cmp	r3, #0
    b194:	d000      	beq.n	b198 <ticker_job+0x58c>
    b196:	e0b9      	b.n	b30c <ticker_job+0x700>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
    b198:	2301      	movs	r3, #1
    b19a:	930c      	str	r3, [sp, #48]	; 0x30
static inline void ticker_job_list_inquire(struct ticker_instance *instance)
{
	struct ticker_user *users;
	u8_t count_user;

	users = &instance->user[0];
    b19c:	687b      	ldr	r3, [r7, #4]
    b19e:	9305      	str	r3, [sp, #20]
    b1a0:	7a7b      	ldrb	r3, [r7, #9]
    b1a2:	3b01      	subs	r3, #1
    b1a4:	b2dd      	uxtb	r5, r3
	count_user = instance->count_user;
	while (count_user--) {
    b1a6:	2dff      	cmp	r5, #255	; 0xff
    b1a8:	d054      	beq.n	b254 <ticker_job+0x648>
		struct ticker_user *user;

		user = &users[count_user];
    b1aa:	9b05      	ldr	r3, [sp, #20]
    b1ac:	00ec      	lsls	r4, r5, #3
    b1ae:	191c      	adds	r4, r3, r4
		while (user->first != user->last) {
    b1b0:	7863      	ldrb	r3, [r4, #1]
    b1b2:	78e2      	ldrb	r2, [r4, #3]
    b1b4:	429a      	cmp	r2, r3
    b1b6:	d04b      	beq.n	b250 <ticker_job+0x644>
			struct ticker_user_op *user_op;
			ticker_op_func fp_op_func;
			u8_t first;

			user_op = &user->user_op[user->first];
    b1b8:	222c      	movs	r2, #44	; 0x2c
    b1ba:	4353      	muls	r3, r2
    b1bc:	6862      	ldr	r2, [r4, #4]
    b1be:	18d3      	adds	r3, r2, r3
			fp_op_func = 0;

			switch (user_op->op) {
    b1c0:	781a      	ldrb	r2, [r3, #0]
    b1c2:	2a01      	cmp	r2, #1
    b1c4:	d033      	beq.n	b22e <ticker_job+0x622>
    b1c6:	2a02      	cmp	r2, #2
    b1c8:	d139      	bne.n	b23e <ticker_job+0x632>
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
				break;

			case TICKER_USER_OP_TYPE_SLOT_GET:
				ticker_by_next_slot_get(instance,
    b1ca:	68d9      	ldr	r1, [r3, #12]
    b1cc:	685a      	ldr	r2, [r3, #4]
    b1ce:	9103      	str	r1, [sp, #12]
	struct ticker_node *node;
	u8_t _ticker_id_head;
	struct ticker_node *ticker;
	u32_t _ticks_to_expire;

	node = instance->node;
    b1d0:	6839      	ldr	r1, [r7, #0]
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
				break;

			case TICKER_USER_OP_TYPE_SLOT_GET:
				ticker_by_next_slot_get(instance,
    b1d2:	9202      	str	r2, [sp, #8]
	struct ticker_node *node;
	u8_t _ticker_id_head;
	struct ticker_node *ticker;
	u32_t _ticks_to_expire;

	node = instance->node;
    b1d4:	468c      	mov	ip, r1

	_ticker_id_head = *ticker_id_head;
    b1d6:	9902      	ldr	r1, [sp, #8]
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
				break;

			case TICKER_USER_OP_TYPE_SLOT_GET:
				ticker_by_next_slot_get(instance,
    b1d8:	689a      	ldr	r2, [r3, #8]
	struct ticker_node *ticker;
	u32_t _ticks_to_expire;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
    b1da:	7809      	ldrb	r1, [r1, #0]
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL)
    b1dc:	29ff      	cmp	r1, #255	; 0xff
    b1de:	d004      	beq.n	b1ea <ticker_job+0x5de>
	    || (*ticks_current != instance->ticks_current)) {
    b1e0:	6810      	ldr	r0, [r2, #0]
    b1e2:	0006      	movs	r6, r0
    b1e4:	6978      	ldr	r0, [r7, #20]
    b1e6:	4286      	cmp	r6, r0
    b1e8:	d004      	beq.n	b1f4 <ticker_job+0x5e8>
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
    b1ea:	6978      	ldr	r0, [r7, #20]

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL)
	    || (*ticks_current != instance->ticks_current)) {
		_ticker_id_head = instance->ticker_id_head;
    b1ec:	7e39      	ldrb	r1, [r7, #24]
		*ticks_current = instance->ticks_current;
    b1ee:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0;
    b1f0:	2200      	movs	r2, #0
    b1f2:	e013      	b.n	b21c <ticker_job+0x610>
	} else {
		ticker = &node[_ticker_id_head];
    b1f4:	2024      	movs	r0, #36	; 0x24
    b1f6:	4341      	muls	r1, r0
		_ticker_id_head = ticker->next;
    b1f8:	4660      	mov	r0, ip
	u32_t _ticks_to_expire;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    b1fa:	9a03      	ldr	r2, [sp, #12]
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
		_ticks_to_expire = 0;
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
    b1fc:	5c41      	ldrb	r1, [r0, r1]
	u32_t _ticks_to_expire;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    b1fe:	6812      	ldr	r2, [r2, #0]
    b200:	e00c      	b.n	b21c <ticker_job+0x610>
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL)
	       && ((ticker = &node[_ticker_id_head])->ticks_slot == 0)
    b202:	2024      	movs	r0, #36	; 0x24
    b204:	4348      	muls	r0, r1
    b206:	4460      	add	r0, ip
    b208:	8ac6      	ldrh	r6, [r0, #22]
    b20a:	9606      	str	r6, [sp, #24]
    b20c:	6886      	ldr	r6, [r0, #8]
    b20e:	9604      	str	r6, [sp, #16]
    b210:	9e06      	ldr	r6, [sp, #24]
    b212:	2e00      	cmp	r6, #0
    b214:	d105      	bne.n	b222 <ticker_job+0x616>
	    ) {
		_ticks_to_expire += ticker->ticks_to_expire;
    b216:	9904      	ldr	r1, [sp, #16]
    b218:	1852      	adds	r2, r2, r1
		_ticker_id_head = ticker->next;
    b21a:	7801      	ldrb	r1, [r0, #0]
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL)
    b21c:	29ff      	cmp	r1, #255	; 0xff
    b21e:	d1f0      	bne.n	b202 <ticker_job+0x5f6>
    b220:	e001      	b.n	b226 <ticker_job+0x61a>
		_ticks_to_expire += ticker->ticks_to_expire;
		_ticker_id_head = ticker->next;
	}

	if (_ticker_id_head != TICKER_NULL) {
		_ticks_to_expire += ticker->ticks_to_expire;
    b222:	9804      	ldr	r0, [sp, #16]
    b224:	1812      	adds	r2, r2, r0
	}

	*ticker_id_head = _ticker_id_head;
    b226:	9802      	ldr	r0, [sp, #8]
    b228:	7001      	strb	r1, [r0, #0]
	*ticks_to_expire = _ticks_to_expire;
    b22a:	9903      	ldr	r1, [sp, #12]
    b22c:	600a      	str	r2, [r1, #0]
							   user_op->
							   params.
							   slot_get.
							   ticks_to_expire);

				user_op->status =
    b22e:	2200      	movs	r2, #0
    b230:	621a      	str	r2, [r3, #32]
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
    b232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			default:
				/* do nothing for other ops */
				break;
			}

			if (fp_op_func) {
    b234:	2a00      	cmp	r2, #0
    b236:	d002      	beq.n	b23e <ticker_job+0x632>
				fp_op_func(user_op->status,
    b238:	6a99      	ldr	r1, [r3, #40]	; 0x28
    b23a:	6a18      	ldr	r0, [r3, #32]
    b23c:	4790      	blx	r2
					   user_op->op_context);
			}

			first = user->first + 1;
    b23e:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    b240:	7822      	ldrb	r2, [r4, #0]
			if (fp_op_func) {
				fp_op_func(user_op->status,
					   user_op->op_context);
			}

			first = user->first + 1;
    b242:	3301      	adds	r3, #1
    b244:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
    b246:	429a      	cmp	r2, r3
    b248:	d100      	bne.n	b24c <ticker_job+0x640>
				first = 0;
    b24a:	2300      	movs	r3, #0
			}
			user->first = first;
    b24c:	7063      	strb	r3, [r4, #1]
    b24e:	e7af      	b.n	b1b0 <ticker_job+0x5a4>
    b250:	1e6b      	subs	r3, r5, #1
    b252:	e7a7      	b.n	b1a4 <ticker_job+0x598>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    b254:	2300      	movs	r3, #0
    b256:	773b      	strb	r3, [r7, #28]

	/* update compare if head changed */
	if (flag_compare_update) {
    b258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b25a:	2b00      	cmp	r3, #0
    b25c:	d048      	beq.n	b2f0 <ticker_job+0x6e4>
	u32_t ctr_post;
	u32_t ctr;
	u32_t cc;
	u32_t i;

	if (instance->ticker_id_head == TICKER_NULL) {
    b25e:	7e3b      	ldrb	r3, [r7, #24]
    b260:	2bff      	cmp	r3, #255	; 0xff
    b262:	d105      	bne.n	b270 <ticker_job+0x664>
		if (cntr_stop() == 0) {
    b264:	f7fe feb6 	bl	9fd4 <cntr_stop>
    b268:	2800      	cmp	r0, #0
    b26a:	d141      	bne.n	b2f0 <ticker_job+0x6e4>
			instance->ticks_slot_previous = 0;
    b26c:	8378      	strh	r0, [r7, #26]
    b26e:	e03f      	b.n	b2f0 <ticker_job+0x6e4>
		}

		return;
	}

	if (ticker_id_old_head == TICKER_NULL) {
    b270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b272:	2bff      	cmp	r3, #255	; 0xff
    b274:	d107      	bne.n	b286 <ticker_job+0x67a>
		u32_t ticks_current;

		ticks_current = cntr_cnt_get();
    b276:	f7fe fed9 	bl	a02c <cntr_cnt_get>
    b27a:	0004      	movs	r4, r0

		if (cntr_start() == 0) {
    b27c:	f7fe fe9a 	bl	9fb4 <cntr_start>
    b280:	2800      	cmp	r0, #0
    b282:	d100      	bne.n	b286 <ticker_job+0x67a>
			instance->ticks_current = ticks_current;
    b284:	617c      	str	r4, [r7, #20]
		}
	}

	node = &instance->node[0];
	ticker = &node[instance->ticker_id_head];
	ticks_to_expire = ticker->ticks_to_expire;
    b286:	2324      	movs	r3, #36	; 0x24
    b288:	260a      	movs	r6, #10
    b28a:	7e3a      	ldrb	r2, [r7, #24]
    b28c:	4353      	muls	r3, r2
    b28e:	683a      	ldr	r2, [r7, #0]
    b290:	18d3      	adds	r3, r2, r3
    b292:	689b      	ldr	r3, [r3, #8]
    b294:	9302      	str	r3, [sp, #8]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    b296:	f7fe fec9 	bl	a02c <cntr_cnt_get>
		cc = instance->ticks_current;
    b29a:	697a      	ldr	r2, [r7, #20]
		u32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    b29c:	0005      	movs	r5, r0
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
		       ticks_to_expire : ticks_elapsed);
    b29e:	1a83      	subs	r3, r0, r2
    b2a0:	021b      	lsls	r3, r3, #8
    b2a2:	0a1b      	lsrs	r3, r3, #8
    b2a4:	1cdc      	adds	r4, r3, #3
    b2a6:	9b02      	ldr	r3, [sp, #8]
    b2a8:	429c      	cmp	r4, r3
    b2aa:	d200      	bcs.n	b2ae <ticker_job+0x6a2>
    b2ac:	001c      	movs	r4, r3

		ctr = cntr_cnt_get();
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
    b2ae:	1914      	adds	r4, r2, r4
		       ticks_to_expire : ticks_elapsed);
		cc &= 0x00FFFFFF;
    b2b0:	0224      	lsls	r4, r4, #8
    b2b2:	0a24      	lsrs	r4, r4, #8

		instance->fp_cmp_set(cc);
    b2b4:	0020      	movs	r0, r4
    b2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b2b8:	4798      	blx	r3

		ctr_post = cntr_cnt_get();
    b2ba:	f7fe feb7 	bl	a02c <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    b2be:	1b40      	subs	r0, r0, r5
    b2c0:	0200      	lsls	r0, r0, #8
    b2c2:	0a00      	lsrs	r0, r0, #8
    b2c4:	1b64      	subs	r4, r4, r5
    b2c6:	0224      	lsls	r4, r4, #8
    b2c8:	3003      	adds	r0, #3
    b2ca:	0a24      	lsrs	r4, r4, #8
    b2cc:	42a0      	cmp	r0, r4
    b2ce:	d90f      	bls.n	b2f0 <ticker_job+0x6e4>
    b2d0:	3e01      	subs	r6, #1
	 */
	i = 10;
	do {
		u32_t ticks_elapsed;

		LL_ASSERT(i);
    b2d2:	2e00      	cmp	r6, #0
    b2d4:	d1df      	bne.n	b296 <ticker_job+0x68a>
    b2d6:	4b14      	ldr	r3, [pc, #80]	; (b328 <ticker_job+0x71c>)
    b2d8:	4a14      	ldr	r2, [pc, #80]	; (b32c <ticker_job+0x720>)
    b2da:	9301      	str	r3, [sp, #4]
    b2dc:	4b14      	ldr	r3, [pc, #80]	; (b330 <ticker_job+0x724>)
    b2de:	4915      	ldr	r1, [pc, #84]	; (b334 <ticker_job+0x728>)
    b2e0:	9300      	str	r3, [sp, #0]
    b2e2:	4815      	ldr	r0, [pc, #84]	; (b338 <ticker_job+0x72c>)
    b2e4:	4b15      	ldr	r3, [pc, #84]	; (b33c <ticker_job+0x730>)
    b2e6:	f7f6 fa3f 	bl	1768 <printk>
    b2ea:	b662      	cpsie	i
    b2ec:	2004      	movs	r0, #4
    b2ee:	df02      	svc	2
	if (flag_compare_update) {
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    b2f0:	7f7b      	ldrb	r3, [r7, #29]
    b2f2:	2b00      	cmp	r3, #0
    b2f4:	d010      	beq.n	b318 <ticker_job+0x70c>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
    b2f6:	2201      	movs	r2, #1
    b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b2fa:	0011      	movs	r1, r2
    b2fc:	2002      	movs	r0, #2
    b2fe:	4798      	blx	r3
    b300:	e00a      	b.n	b318 <ticker_job+0x70c>
				}
			}

			/* Update flags */
			if (id_insert == id_collide) {
				ticker->req = ticker->ack + 1;
    b302:	78a3      	ldrb	r3, [r4, #2]

				status = TICKER_STATUS_SUCCESS;
    b304:	2000      	movs	r0, #0
				}
			}

			/* Update flags */
			if (id_insert == id_collide) {
				ticker->req = ticker->ack + 1;
    b306:	3301      	adds	r3, #1
    b308:	7063      	strb	r3, [r4, #1]
    b30a:	e72c      	b.n	b166 <ticker_job+0x55a>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    b30c:	466b      	mov	r3, sp
    b30e:	2220      	movs	r2, #32
    b310:	189b      	adds	r3, r3, r2
    b312:	781b      	ldrb	r3, [r3, #0]
    b314:	773b      	strb	r3, [r7, #28]
    b316:	e7a2      	b.n	b25e <ticker_job+0x652>
	if (instance->worker_trigger) {
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_JOB(0);
}
    b318:	b015      	add	sp, #84	; 0x54
    b31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b31c:	ff172b5a 	.word	0xff172b5a
    b320:	7f172b59 	.word	0x7f172b59
    b324:	fe2e56b6 	.word	0xfe2e56b6
    b328:	000145b0 	.word	0x000145b0
    b32c:	00014570 	.word	0x00014570
    b330:	000145b5 	.word	0x000145b5
    b334:	00014577 	.word	0x00014577
    b338:	000159dc 	.word	0x000159dc
    b33c:	00016eb4 	.word	0x00016eb4

0000b340 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
    b340:	b5f0      	push	{r4, r5, r6, r7, lr}
    b342:	0006      	movs	r6, r0
    b344:	a805      	add	r0, sp, #20
    b346:	c880      	ldmia	r0!, {r7}
    b348:	7804      	ldrb	r4, [r0, #0]
	    || (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)
	    ) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
    b34a:	2e00      	cmp	r6, #0
    b34c:	d009      	beq.n	b362 <ticker_init+0x22>
    b34e:	2e01      	cmp	r6, #1
    b350:	d139      	bne.n	b3c6 <ticker_init+0x86>
		instance->fp_sched = ticker_instance0_sched;
		instance->fp_cmp_set = ticker_instance0_cmp_set;
		break;

	case 1:
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
    b352:	481e      	ldr	r0, [pc, #120]	; (b3cc <ticker_init+0x8c>)
    b354:	4d1e      	ldr	r5, [pc, #120]	; (b3d0 <ticker_init+0x90>)
    b356:	64c5      	str	r5, [r0, #76]	; 0x4c
		instance->fp_sched = ticker_instance1_sched;
    b358:	4d1e      	ldr	r5, [pc, #120]	; (b3d4 <ticker_init+0x94>)
    b35a:	6505      	str	r5, [r0, #80]	; 0x50
		instance->fp_cmp_set = ticker_instance1_cmp_set;
    b35c:	4d1e      	ldr	r5, [pc, #120]	; (b3d8 <ticker_init+0x98>)
    b35e:	6545      	str	r5, [r0, #84]	; 0x54
		break;
    b360:	e006      	b.n	b370 <ticker_init+0x30>
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
	case 0:
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
    b362:	481a      	ldr	r0, [pc, #104]	; (b3cc <ticker_init+0x8c>)
    b364:	4d1d      	ldr	r5, [pc, #116]	; (b3dc <ticker_init+0x9c>)
    b366:	6205      	str	r5, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
    b368:	4d1d      	ldr	r5, [pc, #116]	; (b3e0 <ticker_init+0xa0>)
    b36a:	6245      	str	r5, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
    b36c:	4d1d      	ldr	r5, [pc, #116]	; (b3e4 <ticker_init+0xa4>)
    b36e:	6285      	str	r5, [r0, #40]	; 0x28

	default:
		return TICKER_STATUS_FAILURE;
	}

	instance->count_node = count_node;
    b370:	202c      	movs	r0, #44	; 0x2c
    b372:	4370      	muls	r0, r6
    b374:	4684      	mov	ip, r0
    b376:	4d15      	ldr	r5, [pc, #84]	; (b3cc <ticker_init+0x8c>)
    b378:	1828      	adds	r0, r5, r0
    b37a:	7201      	strb	r1, [r0, #8]
	instance->node = node;
    b37c:	4661      	mov	r1, ip
    b37e:	514a      	str	r2, [r1, r5]
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    b380:	222c      	movs	r2, #44	; 0x2c
    b382:	4694      	mov	ip, r2
	}

	instance->count_node = count_node;
	instance->node = node;

	instance->count_user = count_user;
    b384:	7243      	strb	r3, [r0, #9]
	instance->user = user;
    b386:	6047      	str	r7, [r0, #4]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
    b388:	3b01      	subs	r3, #1
    b38a:	b2db      	uxtb	r3, r3
    b38c:	2bff      	cmp	r3, #255	; 0xff
    b38e:	d00c      	beq.n	b3aa <ticker_init+0x6a>
		users[count_user].user_op = user_op_;
    b390:	9807      	ldr	r0, [sp, #28]
    b392:	00da      	lsls	r2, r3, #3
    b394:	18ba      	adds	r2, r7, r2
    b396:	6050      	str	r0, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    b398:	4660      	mov	r0, ip
    b39a:	7812      	ldrb	r2, [r2, #0]
    b39c:	9907      	ldr	r1, [sp, #28]
    b39e:	4350      	muls	r0, r2
		count_op -= users[count_user].count_user_op;
    b3a0:	1aa4      	subs	r4, r4, r2
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    b3a2:	1808      	adds	r0, r1, r0
    b3a4:	9007      	str	r0, [sp, #28]
		count_op -= users[count_user].count_user_op;
    b3a6:	b2e4      	uxtb	r4, r4
    b3a8:	e7ee      	b.n	b388 <ticker_init+0x48>
	}

	if (count_op) {
		return TICKER_STATUS_FAILURE;
    b3aa:	2001      	movs	r0, #1
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
		count_op -= users[count_user].count_user_op;
	}

	if (count_op) {
    b3ac:	2c00      	cmp	r4, #0
    b3ae:	d10b      	bne.n	b3c8 <ticker_init+0x88>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
    b3b0:	302b      	adds	r0, #43	; 0x2b
    b3b2:	4346      	muls	r6, r0
    b3b4:	19ae      	adds	r6, r5, r6
    b3b6:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
    b3b8:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
    b3ba:	8374      	strh	r4, [r6, #26]
	instance->ticks_current = 0;
    b3bc:	6174      	str	r4, [r6, #20]
	instance->ticks_elapsed_first = 0;
    b3be:	72b4      	strb	r4, [r6, #10]
	instance->ticks_elapsed_last = 0;
    b3c0:	72f4      	strb	r4, [r6, #11]

	return TICKER_STATUS_SUCCESS;
    b3c2:	0020      	movs	r0, r4
    b3c4:	e000      	b.n	b3c8 <ticker_init+0x88>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
    b3c6:	2001      	movs	r0, #1
	instance->ticks_current = 0;
	instance->ticks_elapsed_first = 0;
	instance->ticks_elapsed_last = 0;

	return TICKER_STATUS_SUCCESS;
}
    b3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3ca:	46c0      	nop			; (mov r8, r8)
    b3cc:	200011ac 	.word	0x200011ac
    b3d0:	0000aadd 	.word	0x0000aadd
    b3d4:	0000a9b1 	.word	0x0000a9b1
    b3d8:	0000a999 	.word	0x0000a999
    b3dc:	0000ab1d 	.word	0x0000ab1d
    b3e0:	0000aa45 	.word	0x0000aa45
    b3e4:	0000a9a5 	.word	0x0000a9a5

0000b3e8 <ticker_trigger>:

void ticker_trigger(u8_t instance_index)
{
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    b3e8:	232c      	movs	r3, #44	; 0x2c
    b3ea:	4358      	muls	r0, r3
    b3ec:	4b05      	ldr	r3, [pc, #20]	; (b404 <ticker_trigger+0x1c>)

	return TICKER_STATUS_SUCCESS;
}

void ticker_trigger(u8_t instance_index)
{
    b3ee:	b510      	push	{r4, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    b3f0:	1818      	adds	r0, r3, r0
    b3f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	d003      	beq.n	b400 <ticker_trigger+0x18>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
    b3f8:	2201      	movs	r2, #1
    b3fa:	2000      	movs	r0, #0
    b3fc:	0011      	movs	r1, r2
    b3fe:	4798      	blx	r3
						   CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_ISR(0);
}
    b400:	bd10      	pop	{r4, pc}
    b402:	46c0      	nop			; (mov r8, r8)
    b404:	200011ac 	.word	0x200011ac

0000b408 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    b408:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b40a:	242c      	movs	r4, #44	; 0x2c
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    b40c:	b085      	sub	sp, #20
    b40e:	9301      	str	r3, [sp, #4]
    b410:	ab0d      	add	r3, sp, #52	; 0x34
    b412:	881b      	ldrh	r3, [r3, #0]
	u8_t last;
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b414:	4360      	muls	r0, r4
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    b416:	9302      	str	r3, [sp, #8]
    b418:	ab0e      	add	r3, sp, #56	; 0x38
    b41a:	881b      	ldrh	r3, [r3, #0]
	u8_t last;
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b41c:	00cd      	lsls	r5, r1, #3
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
    b41e:	9303      	str	r3, [sp, #12]
	u8_t last;
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b420:	4b1c      	ldr	r3, [pc, #112]	; (b494 <ticker_start+0x8c>)
    b422:	181b      	adds	r3, r3, r0
    b424:	6858      	ldr	r0, [r3, #4]
    b426:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    b428:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    b42a:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    b42c:	1c77      	adds	r7, r6, #1
    b42e:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    b430:	4287      	cmp	r7, r0
    b432:	4180      	sbcs	r0, r0
    b434:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    b436:	7868      	ldrb	r0, [r5, #1]
    b438:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    b43a:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    b43c:	45bc      	cmp	ip, r7
    b43e:	d026      	beq.n	b48e <ticker_start+0x86>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    b440:	4374      	muls	r4, r6
    b442:	6868      	ldr	r0, [r5, #4]
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    b444:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    b446:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = _ticker_id;
    b448:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
    b44a:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
    b44c:	2003      	movs	r0, #3
	user_op->id = _ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
    b44e:	6062      	str	r2, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    b450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
    b452:	7020      	strb	r0, [r4, #0]
	user_op->id = _ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
    b454:	60a2      	str	r2, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    b456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    b458:	6226      	str	r6, [r4, #32]
	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = _ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
	user_op->params.start.ticks_periodic = ticks_periodic;
    b45a:	60e2      	str	r2, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    b45c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b45e:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = _ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
	user_op->params.start.ticks_first = ticks_first;
	user_op->params.start.ticks_periodic = ticks_periodic;
	user_op->params.start.remainder_periodic = remainder_periodic;
    b460:	6122      	str	r2, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    b462:	466a      	mov	r2, sp
    b464:	8992      	ldrh	r2, [r2, #12]
    b466:	82e2      	strh	r2, [r4, #22]
	user_op->params.start.lazy = lazy;
    b468:	466a      	mov	r2, sp
    b46a:	8912      	ldrh	r2, [r2, #8]
    b46c:	82a2      	strh	r2, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
    b46e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b470:	61a2      	str	r2, [r4, #24]
	user_op->params.start.context = context;
    b472:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b474:	61e2      	str	r2, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    b476:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b478:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    b47a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b47c:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    b47e:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b480:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    b482:	6a1b      	ldr	r3, [r3, #32]
    b484:	4798      	blx	r3
    b486:	2200      	movs	r2, #0
    b488:	0031      	movs	r1, r6
    b48a:	47a8      	blx	r5

	return user_op->status;
    b48c:	6a20      	ldr	r0, [r4, #32]
}
    b48e:	b005      	add	sp, #20
    b490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b492:	46c0      	nop			; (mov r8, r8)
    b494:	200011ac 	.word	0x200011ac

0000b498 <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    b498:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b49a:	242c      	movs	r4, #44	; 0x2c

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    b49c:	b087      	sub	sp, #28
    b49e:	9300      	str	r3, [sp, #0]
    b4a0:	ab0c      	add	r3, sp, #48	; 0x30
    b4a2:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b4a4:	4360      	muls	r0, r4

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    b4a6:	9301      	str	r3, [sp, #4]
    b4a8:	ab0d      	add	r3, sp, #52	; 0x34
    b4aa:	881b      	ldrh	r3, [r3, #0]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b4ac:	00cd      	lsls	r5, r1, #3

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
    b4ae:	9302      	str	r3, [sp, #8]
    b4b0:	ab0e      	add	r3, sp, #56	; 0x38
    b4b2:	881b      	ldrh	r3, [r3, #0]
    b4b4:	9303      	str	r3, [sp, #12]
    b4b6:	ab0f      	add	r3, sp, #60	; 0x3c
    b4b8:	881b      	ldrh	r3, [r3, #0]
    b4ba:	9304      	str	r3, [sp, #16]
    b4bc:	ab10      	add	r3, sp, #64	; 0x40
    b4be:	781b      	ldrb	r3, [r3, #0]
    b4c0:	9305      	str	r3, [sp, #20]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b4c2:	4b1c      	ldr	r3, [pc, #112]	; (b534 <ticker_update+0x9c>)
    b4c4:	181b      	adds	r3, r3, r0
    b4c6:	6858      	ldr	r0, [r3, #4]
    b4c8:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    b4ca:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    b4cc:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    b4ce:	1c77      	adds	r7, r6, #1
    b4d0:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    b4d2:	4287      	cmp	r7, r0
    b4d4:	4180      	sbcs	r0, r0
    b4d6:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    b4d8:	7868      	ldrb	r0, [r5, #1]
    b4da:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    b4dc:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    b4de:	45bc      	cmp	ip, r7
    b4e0:	d026      	beq.n	b530 <ticker_update+0x98>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    b4e2:	4374      	muls	r4, r6
    b4e4:	6868      	ldr	r0, [r5, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    b4e6:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    b4e8:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = _ticker_id;
    b4ea:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    b4ec:	466a      	mov	r2, sp
    b4ee:	8812      	ldrh	r2, [r2, #0]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    b4f0:	2004      	movs	r0, #4
	user_op->id = _ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    b4f2:	80a2      	strh	r2, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    b4f4:	466a      	mov	r2, sp
    b4f6:	8892      	ldrh	r2, [r2, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    b4f8:	7020      	strb	r0, [r4, #0]
	user_op->id = _ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    b4fa:	80e2      	strh	r2, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    b4fc:	466a      	mov	r2, sp
    b4fe:	8912      	ldrh	r2, [r2, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    b500:	6226      	str	r6, [r4, #32]
	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = _ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    b502:	8122      	strh	r2, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    b504:	466a      	mov	r2, sp
    b506:	8992      	ldrh	r2, [r2, #12]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b508:	0008      	movs	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = _ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    b50a:	8162      	strh	r2, [r4, #10]
	user_op->params.update.lazy = lazy;
    b50c:	466a      	mov	r2, sp
    b50e:	8a12      	ldrh	r2, [r2, #16]
    b510:	81a2      	strh	r2, [r4, #12]
	user_op->params.update.force = force;
    b512:	466a      	mov	r2, sp
    b514:	7d12      	ldrb	r2, [r2, #20]
    b516:	73a2      	strb	r2, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    b518:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b51a:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    b51c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b51e:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    b520:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b522:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    b524:	6a1b      	ldr	r3, [r3, #32]
    b526:	4798      	blx	r3
    b528:	2200      	movs	r2, #0
    b52a:	0031      	movs	r1, r6
    b52c:	47a8      	blx	r5

	return user_op->status;
    b52e:	6a20      	ldr	r0, [r4, #32]
}
    b530:	b007      	add	sp, #28
    b532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b534:	200011ac 	.word	0x200011ac

0000b538 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    b538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b53a:	242c      	movs	r4, #44	; 0x2c
    b53c:	4360      	muls	r0, r4
	return user_op->status;
}

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t _ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    b53e:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b540:	4b13      	ldr	r3, [pc, #76]	; (b590 <ticker_stop+0x58>)
    b542:	00cd      	lsls	r5, r1, #3
    b544:	181b      	adds	r3, r3, r0
    b546:	6858      	ldr	r0, [r3, #4]
    b548:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    b54a:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    b54c:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    b54e:	1c77      	adds	r7, r6, #1
    b550:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    b552:	4287      	cmp	r7, r0
    b554:	4180      	sbcs	r0, r0
    b556:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    b558:	7868      	ldrb	r0, [r5, #1]
    b55a:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    b55c:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    b55e:	45bc      	cmp	ip, r7
    b560:	d014      	beq.n	b58c <ticker_stop+0x54>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    b562:	4374      	muls	r4, r6
    b564:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = _ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    b566:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    b568:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    b56a:	2005      	movs	r0, #5
	user_op->id = _ticker_id;
    b56c:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    b56e:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    b570:	7020      	strb	r0, [r4, #0]
	user_op->id = _ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    b572:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    b574:	9a08      	ldr	r2, [sp, #32]
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = _ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    b576:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    b578:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    b57a:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b57c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    b57e:	0008      	movs	r0, r1
    b580:	6a1b      	ldr	r3, [r3, #32]
    b582:	4798      	blx	r3
    b584:	2200      	movs	r2, #0
    b586:	0031      	movs	r1, r6
    b588:	47a8      	blx	r5

	return user_op->status;
    b58a:	6a20      	ldr	r0, [r4, #32]
}
    b58c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b58e:	46c0      	nop			; (mov r8, r8)
    b590:	200011ac 	.word	0x200011ac

0000b594 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *_ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    b594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b596:	242c      	movs	r4, #44	; 0x2c
    b598:	4360      	muls	r0, r4
}

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *_ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
    b59a:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b59c:	4b15      	ldr	r3, [pc, #84]	; (b5f4 <ticker_next_slot_get+0x60>)
    b59e:	00cd      	lsls	r5, r1, #3
    b5a0:	181b      	adds	r3, r3, r0
    b5a2:	6858      	ldr	r0, [r3, #4]
    b5a4:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    b5a6:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    b5a8:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    b5aa:	1c77      	adds	r7, r6, #1
    b5ac:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    b5ae:	4287      	cmp	r7, r0
    b5b0:	4180      	sbcs	r0, r0
    b5b2:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    b5b4:	7868      	ldrb	r0, [r5, #1]
    b5b6:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    b5b8:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    b5ba:	45bc      	cmp	ip, r7
    b5bc:	d019      	beq.n	b5f2 <ticker_next_slot_get+0x5e>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    b5be:	4374      	muls	r4, r6
    b5c0:	6868      	ldr	r0, [r5, #4]
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    b5c2:	2602      	movs	r6, #2

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    b5c4:	1904      	adds	r4, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    b5c6:	20ff      	movs	r0, #255	; 0xff
	user_op->params.slot_get.ticker_id = _ticker_id;
    b5c8:	6062      	str	r2, [r4, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
    b5ca:	9a01      	ldr	r2, [sp, #4]
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    b5cc:	7060      	strb	r0, [r4, #1]
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
    b5ce:	60a2      	str	r2, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    b5d0:	9a08      	ldr	r2, [sp, #32]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    b5d2:	7026      	strb	r6, [r4, #0]
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    b5d4:	60e2      	str	r2, [r4, #12]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    b5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
    b5d8:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    b5da:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    b5dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28

	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b5de:	0008      	movs	r0, r1
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    b5e0:	62a2      	str	r2, [r4, #40]	; 0x28

	user->last = last;
    b5e2:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b5e4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    b5e6:	6a1b      	ldr	r3, [r3, #32]
    b5e8:	4798      	blx	r3
    b5ea:	2200      	movs	r2, #0
    b5ec:	0031      	movs	r1, r6
    b5ee:	47a8      	blx	r5

	return user_op->status;
    b5f0:	6a20      	ldr	r0, [r4, #32]
}
    b5f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b5f4:	200011ac 	.word	0x200011ac

0000b5f8 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    b5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b5fa:	242c      	movs	r4, #44	; 0x2c
    b5fc:	4360      	muls	r0, r4
	return user_op->status;
}

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
    b5fe:	9301      	str	r3, [sp, #4]
	struct ticker_instance *instance = &_instance[instance_index];
	u8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    b600:	4b12      	ldr	r3, [pc, #72]	; (b64c <ticker_job_idle_get+0x54>)
    b602:	00cd      	lsls	r5, r1, #3
    b604:	181b      	adds	r3, r3, r0
    b606:	6858      	ldr	r0, [r3, #4]
    b608:	1945      	adds	r5, r0, r5

	last = user->last + 1;
    b60a:	78ee      	ldrb	r6, [r5, #3]
	if (last >= user->count_user_op) {
    b60c:	7828      	ldrb	r0, [r5, #0]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    b60e:	1c77      	adds	r7, r6, #1
    b610:	b2ff      	uxtb	r7, r7
	if (last >= user->count_user_op) {
		last = 0;
    b612:	4287      	cmp	r7, r0
    b614:	4180      	sbcs	r0, r0
    b616:	4007      	ands	r7, r0
	}

	if (last == user->first) {
    b618:	7868      	ldrb	r0, [r5, #1]
    b61a:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
    b61c:	2001      	movs	r0, #1
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    b61e:	45bc      	cmp	ip, r7
    b620:	d013      	beq.n	b64a <ticker_job_idle_get+0x52>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    b622:	4374      	muls	r4, r6
    b624:	686e      	ldr	r6, [r5, #4]
    b626:	1934      	adds	r4, r6, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    b628:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
    b62a:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    b62c:	9a01      	ldr	r2, [sp, #4]
	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    b62e:	7020      	strb	r0, [r4, #0]
	user_op->id = TICKER_NULL;
    b630:	30fe      	adds	r0, #254	; 0xfe
    b632:	7060      	strb	r0, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    b634:	62a2      	str	r2, [r4, #40]	; 0x28
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    b636:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;

	user->last = last;
    b638:	70ef      	strb	r7, [r5, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b63a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    b63c:	0008      	movs	r0, r1
    b63e:	6a1b      	ldr	r3, [r3, #32]
    b640:	4798      	blx	r3
    b642:	2200      	movs	r2, #0
    b644:	0031      	movs	r1, r6
    b646:	47a8      	blx	r5

	return user_op->status;
    b648:	6a20      	ldr	r0, [r4, #32]
}
    b64a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b64c:	200011ac 	.word	0x200011ac

0000b650 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b650:	232c      	movs	r3, #44	; 0x2c

	return user_op->status;
}

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
    b652:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    b654:	4343      	muls	r3, r0
    b656:	4805      	ldr	r0, [pc, #20]	; (b66c <ticker_job_sched+0x1c>)
    b658:	18c3      	adds	r3, r0, r3
    b65a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    b65c:	0008      	movs	r0, r1
    b65e:	6a1b      	ldr	r3, [r3, #32]
    b660:	4798      	blx	r3
    b662:	2200      	movs	r2, #0
    b664:	2102      	movs	r1, #2
    b666:	47a0      	blx	r4
}
    b668:	bd10      	pop	{r4, pc}
    b66a:	46c0      	nop			; (mov r8, r8)
    b66c:	200011ac 	.word	0x200011ac

0000b670 <ticker_ticks_now_get>:

u32_t ticker_ticks_now_get(void)
{
    b670:	b510      	push	{r4, lr}
	return cntr_cnt_get();
    b672:	f7fe fcdb 	bl	a02c <cntr_cnt_get>
}
    b676:	bd10      	pop	{r4, pc}

0000b678 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b678:	1a40      	subs	r0, r0, r1
    b67a:	0200      	lsls	r0, r0, #8
    b67c:	0a00      	lsrs	r0, r0, #8
}
    b67e:	4770      	bx	lr

0000b680 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
    b680:	b570      	push	{r4, r5, r6, lr}
    b682:	0006      	movs	r6, r0
    b684:	000c      	movs	r4, r1
	while (len) {
    b686:	2c00      	cmp	r4, #0
    b688:	d013      	beq.n	b6b2 <bt_rand+0x32>
		k_mutex_lock(&mutex_rand, K_FOREVER);
    b68a:	2101      	movs	r1, #1
    b68c:	4d0a      	ldr	r5, [pc, #40]	; (b6b8 <bt_rand+0x38>)
    b68e:	4249      	negs	r1, r1
    b690:	0028      	movs	r0, r5
    b692:	f007 fc3f 	bl	12f14 <k_mutex_lock>
		len = rand_get(len, buf);
    b696:	0020      	movs	r0, r4
    b698:	0031      	movs	r1, r6
    b69a:	f7ff f8d5 	bl	a848 <rand_get>
    b69e:	0004      	movs	r4, r0
		k_mutex_unlock(&mutex_rand);
    b6a0:	0028      	movs	r0, r5
    b6a2:	f007 fc99 	bl	12fd8 <k_mutex_unlock>
		if (len) {
    b6a6:	2c00      	cmp	r4, #0
    b6a8:	d003      	beq.n	b6b2 <bt_rand+0x32>
    b6aa:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    b6ac:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    b6ae:	bf20      	wfe
    b6b0:	e7e9      	b.n	b686 <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
    b6b2:	2000      	movs	r0, #0
    b6b4:	bd70      	pop	{r4, r5, r6, pc}
    b6b6:	46c0      	nop			; (mov r8, r8)
    b6b8:	20000720 	.word	0x20000720

0000b6bc <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    b6bc:	b510      	push	{r4, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    b6be:	2300      	movs	r3, #0
    b6c0:	f7fe fcec 	bl	a09c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    b6c4:	2000      	movs	r0, #0
    b6c6:	bd10      	pop	{r4, pc}

0000b6c8 <cpu_sleep>:
    b6c8:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    b6ca:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    b6cc:	bf20      	wfe
static inline void cpu_sleep(void)
{
	__WFE();
	__SEV();
	__WFE();
}
    b6ce:	4770      	bx	lr

0000b6d0 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    b6d0:	6008      	str	r0, [r1, #0]
}
    b6d2:	4770      	bx	lr

0000b6d4 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    b6d4:	2800      	cmp	r0, #0
    b6d6:	d104      	bne.n	b6e2 <prepare_reduced+0xe>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
    b6d8:	2380      	movs	r3, #128	; 0x80
    b6da:	680a      	ldr	r2, [r1, #0]
    b6dc:	061b      	lsls	r3, r3, #24
    b6de:	4313      	orrs	r3, r2
    b6e0:	600b      	str	r3, [r1, #0]
	}
}
    b6e2:	4770      	bx	lr

0000b6e4 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    b6e4:	2800      	cmp	r0, #0
    b6e6:	d103      	bne.n	b6f0 <prepare_normal+0xc>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
    b6e8:	680b      	ldr	r3, [r1, #0]
    b6ea:	005b      	lsls	r3, r3, #1
    b6ec:	085b      	lsrs	r3, r3, #1
    b6ee:	600b      	str	r3, [r1, #0]
	}
}
    b6f0:	4770      	bx	lr

0000b6f2 <chan_sel_remap>:
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    b6f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6f4:	0002      	movs	r2, r0
    b6f6:	1d46      	adds	r6, r0, #5
		u8_t bit_count;

		bite = *chan_map;
		bit_count = 8;
		while (bit_count--) {
			if (bite & 0x01) {
    b6f8:	2701      	movs	r7, #1
static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    b6fa:	2000      	movs	r0, #0
	byte_count = 5;
	while (byte_count--) {
    b6fc:	42b2      	cmp	r2, r6
    b6fe:	d011      	beq.n	b724 <chan_sel_remap+0x32>
    b700:	0004      	movs	r4, r0
		u8_t bite;
		u8_t bit_count;

		bite = *chan_map;
    b702:	7815      	ldrb	r5, [r2, #0]
    b704:	3408      	adds	r4, #8
    b706:	b2e4      	uxtb	r4, r4
		bit_count = 8;
		while (bit_count--) {
    b708:	42a0      	cmp	r0, r4
    b70a:	d009      	beq.n	b720 <chan_sel_remap+0x2e>
			if (bite & 0x01) {
    b70c:	423d      	tst	r5, r7
    b70e:	d003      	beq.n	b718 <chan_sel_remap+0x26>
				if (chan_index == 0) {
    b710:	2900      	cmp	r1, #0
    b712:	d007      	beq.n	b724 <chan_sel_remap+0x32>
					break;
				}
				chan_index--;
    b714:	3901      	subs	r1, #1
    b716:	b2c9      	uxtb	r1, r1
			}
			chan_next++;
    b718:	1c43      	adds	r3, r0, #1
    b71a:	b2d8      	uxtb	r0, r3
			bite >>= 1;
    b71c:	086d      	lsrs	r5, r5, #1
    b71e:	e7f3      	b.n	b708 <chan_sel_remap+0x16>

		if (bit_count < 8) {
			break;
		}

		chan_map++;
    b720:	3201      	adds	r2, #1
    b722:	e7eb      	b.n	b6fc <chan_sel_remap+0xa>
	}

	return chan_next;
}
    b724:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000b728 <packet_rx_acquired_count_get>:
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    b728:	22df      	movs	r2, #223	; 0xdf
    b72a:	4b09      	ldr	r3, [pc, #36]	; (b750 <packet_rx_acquired_count_get+0x28>)
    b72c:	0052      	lsls	r2, r2, #1
    b72e:	5c98      	ldrb	r0, [r3, r2]
	    _radio.packet_rx_last) {
    b730:	22be      	movs	r2, #190	; 0xbe
    b732:	32ff      	adds	r2, #255	; 0xff
    b734:	5c99      	ldrb	r1, [r3, r2]
	}
}

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    b736:	4288      	cmp	r0, r1
    b738:	d302      	bcc.n	b740 <packet_rx_acquired_count_get+0x18>
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    b73a:	5c9b      	ldrb	r3, [r3, r2]

static u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
    b73c:	1ac0      	subs	r0, r0, r3
    b73e:	e005      	b.n	b74c <packet_rx_acquired_count_get+0x24>
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    b740:	21de      	movs	r1, #222	; 0xde
    b742:	0049      	lsls	r1, r1, #1
			_radio.packet_rx_last +
    b744:	5c9a      	ldrb	r2, [r3, r2]
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    b746:	5c5b      	ldrb	r3, [r3, r1]
    b748:	18c0      	adds	r0, r0, r3
    b74a:	1a80      	subs	r0, r0, r2
    b74c:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_last +
			_radio.packet_rx_acquire);
	}
}
    b74e:	4770      	bx	lr
    b750:	20001254 	.word	0x20001254

0000b754 <packet_rx_reserve_get>:

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    b754:	b510      	push	{r4, lr}
    b756:	0004      	movs	r4, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
    b758:	f7ff ffe6 	bl	b728 <packet_rx_acquired_count_get>
    b75c:	0003      	movs	r3, r0
		return 0;
    b75e:	2000      	movs	r0, #0

static struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (count > packet_rx_acquired_count_get()) {
    b760:	42a3      	cmp	r3, r4
    b762:	d30a      	bcc.n	b77a <packet_rx_reserve_get+0x26>
		return 0;
	}

	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    b764:	23be      	movs	r3, #190	; 0xbe
    b766:	21dc      	movs	r1, #220	; 0xdc
    b768:	4a04      	ldr	r2, [pc, #16]	; (b77c <packet_rx_reserve_get+0x28>)
    b76a:	33ff      	adds	r3, #255	; 0xff
    b76c:	5cd3      	ldrb	r3, [r2, r3]
    b76e:	0049      	lsls	r1, r1, #1
    b770:	5852      	ldr	r2, [r2, r1]
    b772:	009b      	lsls	r3, r3, #2
    b774:	5898      	ldr	r0, [r3, r2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    b776:	2301      	movs	r3, #1
    b778:	7103      	strb	r3, [r0, #4]

	return radio_pdu_node_rx;
}
    b77a:	bd10      	pop	{r4, pc}
    b77c:	20001254 	.word	0x20001254

0000b780 <packet_rx_allocate>:

static void packet_rx_allocate(u8_t max)
{
	u8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    b780:	23e8      	movs	r3, #232	; 0xe8

	*pdu_data_tx = _pdu_data_tx;
}

static void packet_rx_allocate(u8_t max)
{
    b782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    b784:	4d22      	ldr	r5, [pc, #136]	; (b810 <packet_rx_allocate+0x90>)
    b786:	005b      	lsls	r3, r3, #1
    b788:	5ceb      	ldrb	r3, [r5, r3]
    b78a:	1c1e      	adds	r6, r3, #0
    b78c:	4283      	cmp	r3, r0
    b78e:	d900      	bls.n	b792 <packet_rx_allocate+0x12>
    b790:	1c06      	adds	r6, r0, #0
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    b792:	23df      	movs	r3, #223	; 0xdf
    b794:	005b      	lsls	r3, r3, #1
    b796:	5cec      	ldrb	r4, [r5, r3]
	if (acquire == _radio.packet_rx_count) {
    b798:	3b02      	subs	r3, #2

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    b79a:	3401      	adds	r4, #1
	if (acquire == _radio.packet_rx_count) {
    b79c:	5ceb      	ldrb	r3, [r5, r3]

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    b79e:	b2e4      	uxtb	r4, r4
    b7a0:	b2f6      	uxtb	r6, r6
	if (acquire == _radio.packet_rx_count) {
    b7a2:	42a3      	cmp	r3, r4
    b7a4:	d11c      	bne.n	b7e0 <packet_rx_allocate+0x60>
		acquire = 0;
    b7a6:	2400      	movs	r4, #0
    b7a8:	e01a      	b.n	b7e0 <packet_rx_allocate+0x60>
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    b7aa:	23df      	movs	r3, #223	; 0xdf
    b7ac:	22dc      	movs	r2, #220	; 0xdc
		if (!radio_pdu_node_rx) {
			mem_release(link, &_radio.link_rx_free);
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;
    b7ae:	6007      	str	r7, [r0, #0]

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    b7b0:	005b      	lsls	r3, r3, #1
    b7b2:	5ceb      	ldrb	r3, [r5, r3]
    b7b4:	0052      	lsls	r2, r2, #1
    b7b6:	58aa      	ldr	r2, [r5, r2]
    b7b8:	009b      	lsls	r3, r3, #2
    b7ba:	5098      	str	r0, [r3, r2]
		_radio.packet_rx_acquire = acquire;
    b7bc:	23df      	movs	r3, #223	; 0xdf
    b7be:	005b      	lsls	r3, r3, #1
    b7c0:	54ec      	strb	r4, [r5, r3]
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    b7c2:	9201      	str	r2, [sp, #4]
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
		if (acquire == _radio.packet_rx_count) {
    b7c4:	3b02      	subs	r3, #2
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    b7c6:	3401      	adds	r4, #1
		if (acquire == _radio.packet_rx_count) {
    b7c8:	5ceb      	ldrb	r3, [r5, r3]
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    b7ca:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
    b7cc:	42a3      	cmp	r3, r4
    b7ce:	d100      	bne.n	b7d2 <packet_rx_allocate+0x52>
			acquire = 0;
    b7d0:	2400      	movs	r4, #0
		}

		_radio.link_rx_data_quota--;
    b7d2:	22e8      	movs	r2, #232	; 0xe8
    b7d4:	0052      	lsls	r2, r2, #1
    b7d6:	5cab      	ldrb	r3, [r5, r2]
    b7d8:	3e01      	subs	r6, #1
    b7da:	3b01      	subs	r3, #1
    b7dc:	54ab      	strb	r3, [r5, r2]
    b7de:	b2f6      	uxtb	r6, r6
	acquire = _radio.packet_rx_acquire + 1;
	if (acquire == _radio.packet_rx_count) {
		acquire = 0;
	}

	while ((max--) && (acquire != _radio.packet_rx_last)) {
    b7e0:	2e00      	cmp	r6, #0
    b7e2:	d014      	beq.n	b80e <packet_rx_allocate+0x8e>
    b7e4:	23be      	movs	r3, #190	; 0xbe
    b7e6:	33ff      	adds	r3, #255	; 0xff
    b7e8:	5ceb      	ldrb	r3, [r5, r3]
    b7ea:	429c      	cmp	r4, r3
    b7ec:	d00f      	beq.n	b80e <packet_rx_allocate+0x8e>
		void *link;
		struct radio_pdu_node_rx *radio_pdu_node_rx;

		link = mem_acquire(&_radio.link_rx_free);
    b7ee:	4809      	ldr	r0, [pc, #36]	; (b814 <packet_rx_allocate+0x94>)
    b7f0:	f7fe fb3c 	bl	9e6c <mem_acquire>
    b7f4:	1e07      	subs	r7, r0, #0
		if (!link) {
    b7f6:	d00a      	beq.n	b80e <packet_rx_allocate+0x8e>
			break;
		}

		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    b7f8:	0028      	movs	r0, r5
    b7fa:	30ad      	adds	r0, #173	; 0xad
    b7fc:	30ff      	adds	r0, #255	; 0xff
    b7fe:	f7fe fb35 	bl	9e6c <mem_acquire>
		if (!radio_pdu_node_rx) {
    b802:	2800      	cmp	r0, #0
    b804:	d1d1      	bne.n	b7aa <packet_rx_allocate+0x2a>
			mem_release(link, &_radio.link_rx_free);
    b806:	4903      	ldr	r1, [pc, #12]	; (b814 <packet_rx_allocate+0x94>)
    b808:	0038      	movs	r0, r7
    b80a:	f7fe fb48 	bl	9e9e <mem_release>
			acquire = 0;
		}

		_radio.link_rx_data_quota--;
	}
}
    b80e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    b810:	20001254 	.word	0x20001254
    b814:	20001418 	.word	0x20001418

0000b818 <common_init>:
static void common_init(void)
{
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    b818:	23c6      	movs	r3, #198	; 0xc6
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    b81a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    b81c:	4c47      	ldr	r4, [pc, #284]	; (b93c <common_init+0x124>)
    b81e:	005b      	lsls	r3, r3, #1
    b820:	5ce2      	ldrb	r2, [r4, r3]
    b822:	2a00      	cmp	r2, #0
    b824:	d00b      	beq.n	b83e <common_init+0x26>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    b826:	0023      	movs	r3, r4
    b828:	20c2      	movs	r0, #194	; 0xc2
    b82a:	218c      	movs	r1, #140	; 0x8c
    b82c:	3389      	adds	r3, #137	; 0x89
    b82e:	0040      	lsls	r0, r0, #1
    b830:	33ff      	adds	r3, #255	; 0xff
    b832:	b292      	uxth	r2, r2
    b834:	0049      	lsls	r1, r1, #1
    b836:	5820      	ldr	r0, [r4, r0]
    b838:	f7fe faf2 	bl	9e20 <mem_init>
    b83c:	e002      	b.n	b844 <common_init+0x2c>
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    b83e:	23c4      	movs	r3, #196	; 0xc4
    b840:	005b      	lsls	r3, r3, #1
    b842:	50e2      	str	r2, [r4, r3]
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
    b844:	0023      	movs	r3, r4
    b846:	22db      	movs	r2, #219	; 0xdb
    b848:	21da      	movs	r1, #218	; 0xda
    b84a:	20d4      	movs	r0, #212	; 0xd4
    b84c:	33ad      	adds	r3, #173	; 0xad
    b84e:	0052      	lsls	r2, r2, #1
    b850:	0049      	lsls	r1, r1, #1
    b852:	0040      	lsls	r0, r0, #1
    b854:	33ff      	adds	r3, #255	; 0xff
    b856:	5ca2      	ldrb	r2, [r4, r2]
    b858:	5a61      	ldrh	r1, [r4, r1]
    b85a:	5820      	ldr	r0, [r4, r0]
    b85c:	f7fe fae0 	bl	9e20 <mem_init>
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    b860:	23de      	movs	r3, #222	; 0xde
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    b862:	0025      	movs	r5, r4
    b864:	20e0      	movs	r0, #224	; 0xe0
		 (_radio.packet_rx_count + _radio.connection_count),
    b866:	005b      	lsls	r3, r3, #1
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    b868:	5ce2      	ldrb	r2, [r4, r3]
		 (_radio.packet_rx_count + _radio.connection_count),
    b86a:	3b30      	subs	r3, #48	; 0x30
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    b86c:	5ce3      	ldrb	r3, [r4, r3]
    b86e:	35c5      	adds	r5, #197	; 0xc5
    b870:	35ff      	adds	r5, #255	; 0xff
    b872:	0040      	lsls	r0, r0, #1
    b874:	18d2      	adds	r2, r2, r3
    b876:	2108      	movs	r1, #8
    b878:	002b      	movs	r3, r5
    b87a:	5820      	ldr	r0, [r4, r0]
    b87c:	f7fe fad0 	bl	9e20 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    b880:	0023      	movs	r3, r4
    b882:	20ea      	movs	r0, #234	; 0xea
    b884:	33d9      	adds	r3, #217	; 0xd9
    b886:	0040      	lsls	r0, r0, #1
    b888:	33ff      	adds	r3, #255	; 0xff
    b88a:	2202      	movs	r2, #2
    b88c:	2124      	movs	r1, #36	; 0x24
    b88e:	5820      	ldr	r0, [r4, r0]
    b890:	f7fe fac6 	bl	9e20 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    b894:	22f8      	movs	r2, #248	; 0xf8
	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    b896:	0023      	movs	r3, r4
    b898:	21f2      	movs	r1, #242	; 0xf2
    b89a:	20ee      	movs	r0, #238	; 0xee
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    b89c:	0052      	lsls	r2, r2, #1
	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    b89e:	5ca2      	ldrb	r2, [r4, r2]
    b8a0:	33e1      	adds	r3, #225	; 0xe1
    b8a2:	3a01      	subs	r2, #1
    b8a4:	0049      	lsls	r1, r1, #1
    b8a6:	0040      	lsls	r0, r0, #1
    b8a8:	5820      	ldr	r0, [r4, r0]
    b8aa:	33ff      	adds	r3, #255	; 0xff
    b8ac:	b292      	uxth	r2, r2
    b8ae:	5a61      	ldrh	r1, [r4, r1]
    b8b0:	f7fe fab6 	bl	9e20 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    b8b4:	0028      	movs	r0, r5
    b8b6:	f7fe fad9 	bl	9e6c <mem_acquire>
	LL_ASSERT(link);
    b8ba:	2800      	cmp	r0, #0
    b8bc:	d10c      	bne.n	b8d8 <common_init+0xc0>
    b8be:	4b20      	ldr	r3, [pc, #128]	; (b940 <common_init+0x128>)
    b8c0:	4a20      	ldr	r2, [pc, #128]	; (b944 <common_init+0x12c>)
    b8c2:	9301      	str	r3, [sp, #4]
    b8c4:	4b20      	ldr	r3, [pc, #128]	; (b948 <common_init+0x130>)
    b8c6:	4921      	ldr	r1, [pc, #132]	; (b94c <common_init+0x134>)
    b8c8:	9300      	str	r3, [sp, #0]
    b8ca:	4821      	ldr	r0, [pc, #132]	; (b950 <common_init+0x138>)
    b8cc:	4b21      	ldr	r3, [pc, #132]	; (b954 <common_init+0x13c>)
    b8ce:	f7f5 ff4b 	bl	1768 <printk>
    b8d2:	b662      	cpsie	i
    b8d4:	2004      	movs	r0, #4
    b8d6:	df02      	svc	2
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    b8d8:	0022      	movs	r2, r4
    b8da:	0021      	movs	r1, r4
    b8dc:	32cd      	adds	r2, #205	; 0xcd
    b8de:	31c9      	adds	r1, #201	; 0xc9
    b8e0:	32ff      	adds	r2, #255	; 0xff
    b8e2:	31ff      	adds	r1, #255	; 0xff
    b8e4:	f7fe fb20 	bl	9f28 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chl_map = 0x07;
    b8e8:	0022      	movs	r2, r4
    b8ea:	2138      	movs	r1, #56	; 0x38
    b8ec:	32a4      	adds	r2, #164	; 0xa4
    b8ee:	7853      	ldrb	r3, [r2, #1]

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    b8f0:	20ff      	movs	r0, #255	; 0xff
	link = mem_acquire(&_radio.link_rx_free);
	LL_ASSERT(link);
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);

	/* initialise advertiser channel map */
	_radio.advertiser.chl_map = 0x07;
    b8f2:	430b      	orrs	r3, r1
    b8f4:	7053      	strb	r3, [r2, #1]

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    b8f6:	23cb      	movs	r3, #203	; 0xcb
    b8f8:	005b      	lsls	r3, r3, #1
    b8fa:	54e0      	strb	r0, [r4, r3]
	_radio.data_chan_map[1] = 0xFF;
    b8fc:	2398      	movs	r3, #152	; 0x98
    b8fe:	33ff      	adds	r3, #255	; 0xff
    b900:	54e0      	strb	r0, [r4, r3]
	_radio.data_chan_map[2] = 0xFF;
    b902:	3301      	adds	r3, #1
    b904:	54e0      	strb	r0, [r4, r3]
	_radio.data_chan_map[3] = 0xFF;
    b906:	239a      	movs	r3, #154	; 0x9a
	_radio.data_chan_map[4] = 0x1F;
    b908:	221f      	movs	r2, #31

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
	_radio.data_chan_map[1] = 0xFF;
	_radio.data_chan_map[2] = 0xFF;
	_radio.data_chan_map[3] = 0xFF;
    b90a:	33ff      	adds	r3, #255	; 0xff
    b90c:	54e0      	strb	r0, [r4, r3]
	_radio.data_chan_map[4] = 0x1F;
    b90e:	3301      	adds	r3, #1
    b910:	54e2      	strb	r2, [r4, r3]
	_radio.data_chan_count = 37;
    b912:	239c      	movs	r3, #156	; 0x9c
    b914:	3206      	adds	r2, #6
    b916:	33ff      	adds	r3, #255	; 0xff
    b918:	54e2      	strb	r2, [r4, r3]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    b91a:	3a0a      	subs	r2, #10
    b91c:	3303      	adds	r3, #3
    b91e:	52e2      	strh	r2, [r4, r3]
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
    b920:	322e      	adds	r2, #46	; 0x2e
    b922:	32ff      	adds	r2, #255	; 0xff
    b924:	3302      	adds	r3, #2
    b926:	52e2      	strh	r2, [r4, r3]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* Initialize the DLE defaults */
	_radio.default_phy_tx = BIT(0);
    b928:	3ba0      	subs	r3, #160	; 0xa0
    b92a:	3bff      	subs	r3, #255	; 0xff
    b92c:	325a      	adds	r2, #90	; 0x5a
    b92e:	52a3      	strh	r3, [r4, r2]
	_radio.default_phy_rx = BIT(0);
    b930:	3202      	adds	r2, #2
    b932:	52a3      	strh	r3, [r4, r2]
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY_CODED */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    b934:	f7ff ff24 	bl	b780 <packet_rx_allocate>
}
    b938:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    b93a:	46c0      	nop			; (mov r8, r8)
    b93c:	20001254 	.word	0x20001254
    b940:	000145b0 	.word	0x000145b0
    b944:	00014570 	.word	0x00014570
    b948:	000145b5 	.word	0x000145b5
    b94c:	00014577 	.word	0x00014577
    b950:	000159ff 	.word	0x000159ff
    b954:	000171ce 	.word	0x000171ce

0000b958 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    b958:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    b95a:	780c      	ldrb	r4, [r1, #0]
	return 0;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    b95c:	b085      	sub	sp, #20
    b95e:	0006      	movs	r6, r0
    b960:	9101      	str	r1, [sp, #4]
    b962:	9202      	str	r2, [sp, #8]
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
		return 0;
    b964:	2000      	movs	r0, #0
{
	u8_t _first;
	u8_t cmplt;

	_first = *first;
	if (_first == last) {
    b966:	4294      	cmp	r4, r2
    b968:	d041      	beq.n	b9ee <tx_cmplt_get+0x96>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    b96a:	23f6      	movs	r3, #246	; 0xf6
	_first = *first;
	if (_first == last) {
		return 0;
	}

	cmplt = 0;
    b96c:	0005      	movs	r5, r0
	*handle = _radio.pkt_release[_first].handle;
    b96e:	4a21      	ldr	r2, [pc, #132]	; (b9f4 <tx_cmplt_get+0x9c>)
    b970:	005b      	lsls	r3, r3, #1
    b972:	58d2      	ldr	r2, [r2, r3]
    b974:	00e1      	lsls	r1, r4, #3
    b976:	5a8a      	ldrh	r2, [r1, r2]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    b978:	9303      	str	r3, [sp, #12]
	if (_first == last) {
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    b97a:	8032      	strh	r2, [r6, #0]
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    b97c:	9903      	ldr	r1, [sp, #12]
    b97e:	4b1d      	ldr	r3, [pc, #116]	; (b9f4 <tx_cmplt_get+0x9c>)
    b980:	00e2      	lsls	r2, r4, #3
    b982:	585b      	ldr	r3, [r3, r1]
    b984:	8831      	ldrh	r1, [r6, #0]
    b986:	189b      	adds	r3, r3, r2
    b988:	881a      	ldrh	r2, [r3, #0]
    b98a:	4291      	cmp	r1, r2
    b98c:	d12c      	bne.n	b9e8 <tx_cmplt_get+0x90>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    b98e:	6858      	ldr	r0, [r3, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
    b990:	2801      	cmp	r0, #1
    b992:	d90d      	bls.n	b9b0 <tx_cmplt_get+0x58>
    b994:	2203      	movs	r2, #3
    b996:	0001      	movs	r1, r0
    b998:	4391      	bics	r1, r2
    b99a:	d00e      	beq.n	b9ba <tx_cmplt_get+0x62>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    b99c:	1d01      	adds	r1, r0, #4
    b99e:	d00c      	beq.n	b9ba <tx_cmplt_get+0x62>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    b9a0:	7941      	ldrb	r1, [r0, #5]
    b9a2:	2900      	cmp	r1, #0
    b9a4:	d009      	beq.n	b9ba <tx_cmplt_get+0x62>
    b9a6:	7901      	ldrb	r1, [r0, #4]
    b9a8:	400a      	ands	r2, r1
    b9aa:	3a01      	subs	r2, #1
    b9ac:	2a01      	cmp	r2, #1
    b9ae:	d804      	bhi.n	b9ba <tx_cmplt_get+0x62>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
    b9b0:	2201      	movs	r2, #1
    b9b2:	605a      	str	r2, [r3, #4]
				(struct radio_pdu_node_tx *)1;

			cmplt++;
    b9b4:	18ab      	adds	r3, r5, r2
    b9b6:	b2dd      	uxtb	r5, r3
    b9b8:	e001      	b.n	b9be <tx_cmplt_get+0x66>
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx =
    b9ba:	2202      	movs	r2, #2
    b9bc:	605a      	str	r2, [r3, #4]
				(struct radio_pdu_node_tx *)2;
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    b9be:	2303      	movs	r3, #3
    b9c0:	0002      	movs	r2, r0
    b9c2:	4f0c      	ldr	r7, [pc, #48]	; (b9f4 <tx_cmplt_get+0x9c>)
    b9c4:	439a      	bics	r2, r3
    b9c6:	d004      	beq.n	b9d2 <tx_cmplt_get+0x7a>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    b9c8:	0039      	movs	r1, r7
    b9ca:	31e1      	adds	r1, #225	; 0xe1
    b9cc:	31ff      	adds	r1, #255	; 0xff
    b9ce:	f7fe fa66 	bl	9e9e <mem_release>
		}

		_first = _first + 1;
		if (_first == _radio.packet_tx_count) {
    b9d2:	23f8      	movs	r3, #248	; 0xf8
    b9d4:	005b      	lsls	r3, r3, #1

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    b9d6:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    b9d8:	5cfb      	ldrb	r3, [r7, r3]

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    b9da:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
    b9dc:	42a3      	cmp	r3, r4
    b9de:	d100      	bne.n	b9e2 <tx_cmplt_get+0x8a>
			_first = 0;
    b9e0:	2400      	movs	r4, #0
		}

	} while (_first != last);
    b9e2:	9b02      	ldr	r3, [sp, #8]
    b9e4:	429c      	cmp	r4, r3
    b9e6:	d1c9      	bne.n	b97c <tx_cmplt_get+0x24>

	*first = _first;

	return cmplt;
    b9e8:	0028      	movs	r0, r5
			_first = 0;
		}

	} while (_first != last);

	*first = _first;
    b9ea:	9b01      	ldr	r3, [sp, #4]
    b9ec:	701c      	strb	r4, [r3, #0]

	return cmplt;
}
    b9ee:	b005      	add	sp, #20
    b9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9f2:	46c0      	nop			; (mov r8, r8)
    b9f4:	20001254 	.word	0x20001254

0000b9f8 <connection_get>:

static struct connection *connection_get(u16_t handle)
{
	struct connection *conn;

	if (handle < _radio.connection_count) {
    b9f8:	22c6      	movs	r2, #198	; 0xc6

	return 0;
}

static struct connection *connection_get(u16_t handle)
{
    b9fa:	b510      	push	{r4, lr}
	struct connection *conn;

	if (handle < _radio.connection_count) {
    b9fc:	4b0a      	ldr	r3, [pc, #40]	; (ba28 <connection_get+0x30>)
    b9fe:	0052      	lsls	r2, r2, #1
    ba00:	5c9a      	ldrb	r2, [r3, r2]

	return 0;
}

static struct connection *connection_get(u16_t handle)
{
    ba02:	0004      	movs	r4, r0
	struct connection *conn;

	if (handle < _radio.connection_count) {
    ba04:	4282      	cmp	r2, r0
    ba06:	d90c      	bls.n	ba22 <connection_get+0x2a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    ba08:	0002      	movs	r2, r0
    ba0a:	20c2      	movs	r0, #194	; 0xc2
    ba0c:	218c      	movs	r1, #140	; 0x8c
    ba0e:	0040      	lsls	r0, r0, #1
    ba10:	0049      	lsls	r1, r1, #1
    ba12:	5818      	ldr	r0, [r3, r0]
    ba14:	f7fe fa61 	bl	9eda <mem_get>
		if ((conn) && (conn->handle == handle)) {
    ba18:	2800      	cmp	r0, #0
    ba1a:	d002      	beq.n	ba22 <connection_get+0x2a>
    ba1c:	8c03      	ldrh	r3, [r0, #32]
    ba1e:	42a3      	cmp	r3, r4
    ba20:	d000      	beq.n	ba24 <connection_get+0x2c>
			return conn;
		}
	}

	return 0;
    ba22:	2000      	movs	r0, #0
}
    ba24:	bd10      	pop	{r4, pc}
    ba26:	46c0      	nop			; (mov r8, r8)
    ba28:	20001254 	.word	0x20001254

0000ba2c <role_disable>:
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ba2c:	2302      	movs	r3, #2
		LL_ASSERT(0);
	}
}

static u32_t role_disable(u8_t ticker_id_primary, u8_t ticker_id_stop)
{
    ba2e:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba30:	b089      	sub	sp, #36	; 0x24
    ba32:	0004      	movs	r4, r0
    ba34:	9103      	str	r1, [sp, #12]
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ba36:	9304      	str	r3, [sp, #16]
	u32_t ret;

	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
    ba38:	2805      	cmp	r0, #5
    ba3a:	d006      	beq.n	ba4a <role_disable+0x1e>
    ba3c:	2806      	cmp	r0, #6
    ba3e:	d128      	bne.n	ba92 <role_disable+0x66>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
			  (ret_cb == TICKER_STATUS_FAILURE));
		break;

	case RADIO_TICKER_ID_SCAN:
		ticks_xtal_to_start =
    ba40:	4b92      	ldr	r3, [pc, #584]	; (bc8c <role_disable+0x260>)
    ba42:	33fc      	adds	r3, #252	; 0xfc
    ba44:	6d1f      	ldr	r7, [r3, #80]	; 0x50
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    ba46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    ba48:	e02e      	b.n	baa8 <role_disable+0x7c>
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    ba4a:	4b90      	ldr	r3, [pc, #576]	; (bc8c <role_disable+0x260>)
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ba4c:	2103      	movs	r1, #3
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    ba4e:	001a      	movs	r2, r3
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    ba50:	3398      	adds	r3, #152	; 0x98
    ba52:	681b      	ldr	r3, [r3, #0]
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    ba54:	3294      	adds	r2, #148	; 0x94
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    ba56:	9302      	str	r3, [sp, #8]
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ba58:	ab04      	add	r3, sp, #16
	/* Determine xtal, active and start ticks. Stop directed adv stop
	 * ticker.
	 */
	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    ba5a:	6817      	ldr	r7, [r2, #0]
			_radio.advertiser.hdr.ticks_active_to_start;

		/* Stop ticker "may" be in use for direct adv,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ba5c:	2000      	movs	r0, #0
    ba5e:	9300      	str	r3, [sp, #0]
    ba60:	9a03      	ldr	r2, [sp, #12]
    ba62:	4b8b      	ldr	r3, [pc, #556]	; (bc90 <role_disable+0x264>)
    ba64:	f7ff fd68 	bl	b538 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
    ba68:	2802      	cmp	r0, #2
    ba6a:	d003      	beq.n	ba74 <role_disable+0x48>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    ba6c:	9b04      	ldr	r3, [sp, #16]
    ba6e:	2b00      	cmp	r3, #0
    ba70:	d106      	bne.n	ba80 <role_disable+0x54>
    ba72:	e028      	b.n	bac6 <role_disable+0x9a>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);
		if (ret == TICKER_STATUS_BUSY) {
			/* wait for ticker to be stopped */
			while (ret_cb == TICKER_STATUS_BUSY) {
    ba74:	9b04      	ldr	r3, [sp, #16]
    ba76:	2b02      	cmp	r3, #2
    ba78:	d1f8      	bne.n	ba6c <role_disable+0x40>
				cpu_sleep();
    ba7a:	f7ff fe25 	bl	b6c8 <cpu_sleep>
    ba7e:	e7f9      	b.n	ba74 <role_disable+0x48>
			}
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    ba80:	9b04      	ldr	r3, [sp, #16]
    ba82:	2b01      	cmp	r3, #1
    ba84:	d01f      	beq.n	bac6 <role_disable+0x9a>
    ba86:	4b83      	ldr	r3, [pc, #524]	; (bc94 <role_disable+0x268>)
    ba88:	9301      	str	r3, [sp, #4]
    ba8a:	4b83      	ldr	r3, [pc, #524]	; (bc98 <role_disable+0x26c>)
    ba8c:	9300      	str	r3, [sp, #0]
    ba8e:	4b83      	ldr	r3, [pc, #524]	; (bc9c <role_disable+0x270>)
    ba90:	e0c9      	b.n	bc26 <role_disable+0x1fa>
			_radio.scanner.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
			_radio.scanner.hdr.ticks_active_to_start;
		break;
	default:
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    ba92:	2806      	cmp	r0, #6
    ba94:	d90a      	bls.n	baac <role_disable+0x80>
			struct connection *conn;
			u16_t conn_handle;

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
    ba96:	3807      	subs	r0, #7
    ba98:	b280      	uxth	r0, r0
    ba9a:	f7ff ffad 	bl	b9f8 <connection_get>
			if (!conn) {
    ba9e:	2800      	cmp	r0, #0
    baa0:	d100      	bne.n	baa4 <role_disable+0x78>
    baa2:	e0ef      	b.n	bc84 <role_disable+0x258>
				return 1;
			}

			ticks_xtal_to_start =
    baa4:	6807      	ldr	r7, [r0, #0]
				conn->hdr.ticks_xtal_to_start;
			ticks_active_to_start =
    baa6:	6843      	ldr	r3, [r0, #4]
    baa8:	9302      	str	r3, [sp, #8]
    baaa:	e00c      	b.n	bac6 <role_disable+0x9a>
				conn->hdr.ticks_active_to_start;
		} else {
			LL_ASSERT(0);
    baac:	4b79      	ldr	r3, [pc, #484]	; (bc94 <role_disable+0x268>)
    baae:	9301      	str	r3, [sp, #4]
    bab0:	4b79      	ldr	r3, [pc, #484]	; (bc98 <role_disable+0x26c>)
    bab2:	9300      	str	r3, [sp, #0]
    bab4:	4b79      	ldr	r3, [pc, #484]	; (bc9c <role_disable+0x270>)
    bab6:	4a7a      	ldr	r2, [pc, #488]	; (bca0 <role_disable+0x274>)
    bab8:	497a      	ldr	r1, [pc, #488]	; (bca4 <role_disable+0x278>)
    baba:	487b      	ldr	r0, [pc, #492]	; (bca8 <role_disable+0x27c>)
    babc:	f7f5 fe54 	bl	1768 <printk>
    bac0:	b662      	cpsie	i
    bac2:	2004      	movs	r0, #4
    bac4:	df02      	svc	2
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
    bac6:	4d71      	ldr	r5, [pc, #452]	; (bc8c <role_disable+0x260>)
    bac8:	7ba8      	ldrb	r0, [r5, #14]
    baca:	b2c0      	uxtb	r0, r0
    bacc:	2800      	cmp	r0, #0
    bace:	d008      	beq.n	bae2 <role_disable+0xb6>
    bad0:	4b70      	ldr	r3, [pc, #448]	; (bc94 <role_disable+0x268>)
    bad2:	4a73      	ldr	r2, [pc, #460]	; (bca0 <role_disable+0x274>)
    bad4:	9301      	str	r3, [sp, #4]
    bad6:	4b70      	ldr	r3, [pc, #448]	; (bc98 <role_disable+0x26c>)
    bad8:	4972      	ldr	r1, [pc, #456]	; (bca4 <role_disable+0x278>)
    bada:	9300      	str	r3, [sp, #0]
    badc:	4873      	ldr	r0, [pc, #460]	; (bcac <role_disable+0x280>)
    bade:	4b6f      	ldr	r3, [pc, #444]	; (bc9c <role_disable+0x270>)
    bae0:	e7ec      	b.n	babc <role_disable+0x90>
	_radio.ticker_id_stop = ticker_id_primary;

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bae2:	4e6b      	ldr	r6, [pc, #428]	; (bc90 <role_disable+0x264>)
    bae4:	ab04      	add	r3, sp, #16
		}
		break;
	}

	LL_ASSERT(!_radio.ticker_id_stop);
	_radio.ticker_id_stop = ticker_id_primary;
    bae6:	73ac      	strb	r4, [r5, #14]

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bae8:	0022      	movs	r2, r4
    baea:	9300      	str	r3, [sp, #0]
    baec:	2103      	movs	r1, #3
    baee:	0033      	movs	r3, r6
    baf0:	f7ff fd22 	bl	b538 <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    baf4:	2802      	cmp	r0, #2
    baf6:	d005      	beq.n	bb04 <role_disable+0xd8>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb != TICKER_STATUS_SUCCESS) {
    baf8:	9b04      	ldr	r3, [sp, #16]
    bafa:	4d64      	ldr	r5, [pc, #400]	; (bc8c <role_disable+0x260>)
    bafc:	2b00      	cmp	r3, #0
    bafe:	d000      	beq.n	bb02 <role_disable+0xd6>
    bb00:	e0bc      	b.n	bc7c <role_disable+0x250>
    bb02:	e00d      	b.n	bb20 <role_disable+0xf4>
			  RADIO_TICKER_USER_ID_APP, ticker_id_primary,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
		/* if inside our event, enable Job. */
		if (_radio.ticker_id_event == ticker_id_primary) {
    bb04:	7b6b      	ldrb	r3, [r5, #13]
    bb06:	429c      	cmp	r4, r3
    bb08:	d104      	bne.n	bb14 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    bb0a:	2201      	movs	r2, #1
    bb0c:	2003      	movs	r0, #3
    bb0e:	0011      	movs	r1, r2
    bb10:	f7fe f884 	bl	9c1c <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);
		}

		/* wait for ticker to be stopped */
		while (ret_cb == TICKER_STATUS_BUSY) {
    bb14:	9b04      	ldr	r3, [sp, #16]
    bb16:	2b02      	cmp	r3, #2
    bb18:	d1ee      	bne.n	baf8 <role_disable+0xcc>
			cpu_sleep();
    bb1a:	f7ff fdd5 	bl	b6c8 <cpu_sleep>
    bb1e:	e7f9      	b.n	bb14 <role_disable+0xe8>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
		goto role_disable_cleanup;
	}

	/* Inside our event, gracefully handle XTAL and Radio actives */
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    bb20:	7b2b      	ldrb	r3, [r5, #12]
    bb22:	429c      	cmp	r4, r3
    bb24:	d003      	beq.n	bb2e <role_disable+0x102>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    bb26:	7b6b      	ldrb	r3, [r5, #13]
    bb28:	429c      	cmp	r4, r3
    bb2a:	d000      	beq.n	bb2e <role_disable+0x102>
    bb2c:	e0a1      	b.n	bc72 <role_disable+0x246>
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    bb2e:	2302      	movs	r3, #2
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bb30:	2200      	movs	r2, #0
				       u32_t ticks_active_to_start)
{
	static void *s_link[2];
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, NULL,
		mayfly_radio_inactive};
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    bb32:	9305      	str	r3, [sp, #20]
	u32_t ret;

	/* Step 2: Is caller before Event? Stop Event */
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bb34:	ab05      	add	r3, sp, #20
    bb36:	9300      	str	r3, [sp, #0]
    bb38:	2103      	movs	r1, #3
    bb3a:	0033      	movs	r3, r6
    bb3c:	0010      	movs	r0, r2
    bb3e:	f7ff fcfb 	bl	b538 <ticker_stop>
			  RADIO_TICKER_USER_ID_APP, RADIO_TICKER_ID_EVENT,
			  ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    bb42:	2802      	cmp	r0, #2
    bb44:	d107      	bne.n	bb56 <role_disable+0x12a>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    bb46:	2201      	movs	r2, #1
    bb48:	0011      	movs	r1, r2
    bb4a:	1880      	adds	r0, r0, r2
    bb4c:	f7fe f866 	bl	9c1c <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 1);

		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    bb50:	9b05      	ldr	r3, [sp, #20]
    bb52:	2b02      	cmp	r3, #2
    bb54:	d053      	beq.n	bbfe <role_disable+0x1d2>
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
    bb56:	9805      	ldr	r0, [sp, #20]
    bb58:	2302      	movs	r3, #2
    bb5a:	2800      	cmp	r0, #0
    bb5c:	d139      	bne.n	bbd2 <role_disable+0x1a6>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop = {0, 0, s_link, NULL,
			mayfly_xtal_stop};
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    bb5e:	9306      	str	r3, [sp, #24]
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
    bb60:	7b2b      	ldrb	r3, [r5, #12]
    bb62:	2b00      	cmp	r3, #0
    bb64:	d108      	bne.n	bb78 <role_disable+0x14c>
    bb66:	4b4b      	ldr	r3, [pc, #300]	; (bc94 <role_disable+0x268>)
    bb68:	4a4d      	ldr	r2, [pc, #308]	; (bca0 <role_disable+0x274>)
    bb6a:	9301      	str	r3, [sp, #4]
    bb6c:	4b4a      	ldr	r3, [pc, #296]	; (bc98 <role_disable+0x26c>)
    bb6e:	494d      	ldr	r1, [pc, #308]	; (bca4 <role_disable+0x278>)
    bb70:	9300      	str	r3, [sp, #0]
    bb72:	484f      	ldr	r0, [pc, #316]	; (bcb0 <role_disable+0x284>)
    bb74:	4b4f      	ldr	r3, [pc, #316]	; (bcb4 <role_disable+0x288>)
    bb76:	e7a1      	b.n	babc <role_disable+0x90>
		_radio.ticker_id_prepare = 0;

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bb78:	ab06      	add	r3, sp, #24
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
		u32_t ret;

		/* Reset the stored ticker id in prepare phase. */
		LL_ASSERT(_radio.ticker_id_prepare);
		_radio.ticker_id_prepare = 0;
    bb7a:	7328      	strb	r0, [r5, #12]

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bb7c:	2201      	movs	r2, #1
    bb7e:	9300      	str	r3, [sp, #0]
    bb80:	2103      	movs	r1, #3
    bb82:	0033      	movs	r3, r6
    bb84:	f7ff fcd8 	bl	b538 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP,
				  RADIO_TICKER_ID_MARKER_0,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    bb88:	2802      	cmp	r0, #2
    bb8a:	d107      	bne.n	bb9c <role_disable+0x170>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    bb8c:	2201      	movs	r2, #1
    bb8e:	0011      	movs	r1, r2
    bb90:	1880      	adds	r0, r0, r2
    bb92:	f7fe f843 	bl	9c1c <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    bb96:	9b06      	ldr	r3, [sp, #24]
    bb98:	2b02      	cmp	r3, #2
    bb9a:	d030      	beq.n	bbfe <role_disable+0x1d2>
		}

		if (ret_cb == TICKER_STATUS_SUCCESS) {
    bb9c:	9906      	ldr	r1, [sp, #24]
    bb9e:	2900      	cmp	r1, #0
    bba0:	d104      	bne.n	bbac <role_disable+0x180>
			/* Step 2.1.1: Check and deassert Radio Active or XTAL
			 * start
			 */
			if (ticks_active_to_start > ticks_xtal_to_start) {
    bba2:	9b02      	ldr	r3, [sp, #8]
    bba4:	42bb      	cmp	r3, r7
    bba6:	d90c      	bls.n	bbc2 <role_disable+0x196>
				u32_t retval;

				/* radio active asserted, handle deasserting
				 * here
				 */
				retval = mayfly_enqueue(
    bba8:	4b43      	ldr	r3, [pc, #268]	; (bcb8 <role_disable+0x28c>)
    bbaa:	e00b      	b.n	bbc4 <role_disable+0x198>
						RADIO_TICKER_USER_ID_APP,
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
				LL_ASSERT(!retval);
			}
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
    bbac:	9b06      	ldr	r3, [sp, #24]
    bbae:	2b01      	cmp	r3, #1
    bbb0:	d159      	bne.n	bc66 <role_disable+0x23a>
			u32_t retval;

			/* Step 2.1.2: Deassert Radio Active and XTAL start */

			/* radio active asserted, handle deasserting here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    bbb2:	2200      	movs	r2, #0
    bbb4:	4b40      	ldr	r3, [pc, #256]	; (bcb8 <role_disable+0x28c>)
    bbb6:	0011      	movs	r1, r2
    bbb8:	2003      	movs	r0, #3
    bbba:	f7fe f84f 	bl	9c5c <mayfly_enqueue>
    bbbe:	1e01      	subs	r1, r0, #0
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_inactive);
			LL_ASSERT(!retval);
    bbc0:	d142      	bne.n	bc48 <role_disable+0x21c>

			/* XTAL started, handle XTAL stop here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    bbc2:	4b3e      	ldr	r3, [pc, #248]	; (bcbc <role_disable+0x290>)
    bbc4:	000a      	movs	r2, r1
    bbc6:	2003      	movs	r0, #3
    bbc8:	f7fe f848 	bl	9c5c <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
			LL_ASSERT(!retval);
    bbcc:	2800      	cmp	r0, #0
    bbce:	d050      	beq.n	bc72 <role_disable+0x246>
    bbd0:	e03a      	b.n	bc48 <role_disable+0x21c>
		} else {
			LL_ASSERT(0);
		}
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
    bbd2:	9c05      	ldr	r4, [sp, #20]
    bbd4:	2c01      	cmp	r4, #1
    bbd6:	d146      	bne.n	bc66 <role_disable+0x23a>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    bbd8:	9307      	str	r3, [sp, #28]
		 * (role dependent)
		 */
		/* Stop ticker "may" be in use for direct adv or scanner,
		 * hence stop may fail if ticker not used.
		 */
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    bbda:	ab07      	add	r3, sp, #28
    bbdc:	9300      	str	r3, [sp, #0]
    bbde:	9a03      	ldr	r2, [sp, #12]
    bbe0:	0033      	movs	r3, r6
    bbe2:	2103      	movs	r1, #3
    bbe4:	2000      	movs	r0, #0
    bbe6:	f7ff fca7 	bl	b538 <ticker_stop>
				  RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				  ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
    bbea:	2802      	cmp	r0, #2
    bbec:	d110      	bne.n	bc10 <role_disable+0x1e4>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    bbee:	0022      	movs	r2, r4
    bbf0:	0021      	movs	r1, r4
    bbf2:	3001      	adds	r0, #1
    bbf4:	f7fe f812 	bl	9c1c <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
    bbf8:	9b07      	ldr	r3, [sp, #28]
    bbfa:	2b02      	cmp	r3, #2
    bbfc:	d108      	bne.n	bc10 <role_disable+0x1e4>
    bbfe:	4b25      	ldr	r3, [pc, #148]	; (bc94 <role_disable+0x268>)
    bc00:	4a27      	ldr	r2, [pc, #156]	; (bca0 <role_disable+0x274>)
    bc02:	9301      	str	r3, [sp, #4]
    bc04:	4b24      	ldr	r3, [pc, #144]	; (bc98 <role_disable+0x26c>)
    bc06:	4927      	ldr	r1, [pc, #156]	; (bca4 <role_disable+0x278>)
    bc08:	9300      	str	r3, [sp, #0]
    bc0a:	482d      	ldr	r0, [pc, #180]	; (bcc0 <role_disable+0x294>)
    bc0c:	4b29      	ldr	r3, [pc, #164]	; (bcb4 <role_disable+0x288>)
    bc0e:	e755      	b.n	babc <role_disable+0x90>
		}

		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    bc10:	9b07      	ldr	r3, [sp, #28]
    bc12:	2b00      	cmp	r3, #0
    bc14:	d00b      	beq.n	bc2e <role_disable+0x202>
    bc16:	9b07      	ldr	r3, [sp, #28]
    bc18:	2b01      	cmp	r3, #1
    bc1a:	d008      	beq.n	bc2e <role_disable+0x202>
    bc1c:	4b1d      	ldr	r3, [pc, #116]	; (bc94 <role_disable+0x268>)
    bc1e:	9301      	str	r3, [sp, #4]
    bc20:	4b1d      	ldr	r3, [pc, #116]	; (bc98 <role_disable+0x26c>)
    bc22:	9300      	str	r3, [sp, #0]
    bc24:	4b23      	ldr	r3, [pc, #140]	; (bcb4 <role_disable+0x288>)
    bc26:	4a1e      	ldr	r2, [pc, #120]	; (bca0 <role_disable+0x274>)
    bc28:	491e      	ldr	r1, [pc, #120]	; (bca4 <role_disable+0x278>)
    bc2a:	4826      	ldr	r0, [pc, #152]	; (bcc4 <role_disable+0x298>)
    bc2c:	e746      	b.n	babc <role_disable+0x90>
			  (ret_cb == TICKER_STATUS_FAILURE));

		if (_radio.role != ROLE_NONE) {
    bc2e:	7beb      	ldrb	r3, [r5, #15]
    bc30:	2b00      	cmp	r3, #0
    bc32:	d01e      	beq.n	bc72 <role_disable+0x246>
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    bc34:	2204      	movs	r2, #4
    bc36:	4b24      	ldr	r3, [pc, #144]	; (bcc8 <role_disable+0x29c>)

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    bc38:	2003      	movs	r0, #3
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				NULL, mayfly_radio_stop};
			u32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    bc3a:	609a      	str	r2, [r3, #8]

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    bc3c:	2200      	movs	r2, #0
    bc3e:	0011      	movs	r1, r2
    bc40:	f7fe f80c 	bl	9c5c <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_stop);
			LL_ASSERT(!retval);
    bc44:	2800      	cmp	r0, #0
    bc46:	d008      	beq.n	bc5a <role_disable+0x22e>
    bc48:	4b12      	ldr	r3, [pc, #72]	; (bc94 <role_disable+0x268>)
    bc4a:	4a15      	ldr	r2, [pc, #84]	; (bca0 <role_disable+0x274>)
    bc4c:	9301      	str	r3, [sp, #4]
    bc4e:	4b12      	ldr	r3, [pc, #72]	; (bc98 <role_disable+0x26c>)
    bc50:	4914      	ldr	r1, [pc, #80]	; (bca4 <role_disable+0x278>)
    bc52:	9300      	str	r3, [sp, #0]
    bc54:	481d      	ldr	r0, [pc, #116]	; (bccc <role_disable+0x2a0>)
    bc56:	4b17      	ldr	r3, [pc, #92]	; (bcb4 <role_disable+0x288>)
    bc58:	e730      	b.n	babc <role_disable+0x90>

			/* wait for radio ISR to exit */
			while (_radio.role != ROLE_NONE) {
    bc5a:	7beb      	ldrb	r3, [r5, #15]
    bc5c:	2b00      	cmp	r3, #0
    bc5e:	d008      	beq.n	bc72 <role_disable+0x246>
				cpu_sleep();
    bc60:	f7ff fd32 	bl	b6c8 <cpu_sleep>
    bc64:	e7f9      	b.n	bc5a <role_disable+0x22e>
			}
		}
	} else {
		LL_ASSERT(0);
    bc66:	4b0b      	ldr	r3, [pc, #44]	; (bc94 <role_disable+0x268>)
    bc68:	9301      	str	r3, [sp, #4]
    bc6a:	4b0b      	ldr	r3, [pc, #44]	; (bc98 <role_disable+0x26c>)
    bc6c:	9300      	str	r3, [sp, #0]
    bc6e:	4b11      	ldr	r3, [pc, #68]	; (bcb4 <role_disable+0x288>)
    bc70:	e721      	b.n	bab6 <role_disable+0x8a>

		role_active_disable(ticker_id_stop,
				    ticks_xtal_to_start, ticks_active_to_start);
	}

	if (!_radio.ticker_id_stop) {
    bc72:	7bab      	ldrb	r3, [r5, #14]
    bc74:	2b00      	cmp	r3, #0
    bc76:	d101      	bne.n	bc7c <role_disable+0x250>
		ret_cb = TICKER_STATUS_FAILURE;
    bc78:	3301      	adds	r3, #1
    bc7a:	9304      	str	r3, [sp, #16]
	}

role_disable_cleanup:
	_radio.ticker_id_stop = 0;
    bc7c:	2300      	movs	r3, #0
    bc7e:	73ab      	strb	r3, [r5, #14]

	return ret_cb;
    bc80:	9804      	ldr	r0, [sp, #16]
    bc82:	e000      	b.n	bc86 <role_disable+0x25a>

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
			if (!conn) {
				return 1;
    bc84:	2001      	movs	r0, #1

role_disable_cleanup:
	_radio.ticker_id_stop = 0;

	return ret_cb;
}
    bc86:	b009      	add	sp, #36	; 0x24
    bc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc8a:	46c0      	nop			; (mov r8, r8)
    bc8c:	20001254 	.word	0x20001254
    bc90:	0000b6d1 	.word	0x0000b6d1
    bc94:	000145b0 	.word	0x000145b0
    bc98:	000145b5 	.word	0x000145b5
    bc9c:	000171c1 	.word	0x000171c1
    bca0:	00014570 	.word	0x00014570
    bca4:	00014577 	.word	0x00014577
    bca8:	00014bc5 	.word	0x00014bc5
    bcac:	00015a65 	.word	0x00015a65
    bcb0:	00015aca 	.word	0x00015aca
    bcb4:	00016f01 	.word	0x00016f01
    bcb8:	200005e8 	.word	0x200005e8
    bcbc:	20000608 	.word	0x20000608
    bcc0:	00015a9d 	.word	0x00015a9d
    bcc4:	00015a25 	.word	0x00015a25
    bcc8:	200005f8 	.word	0x200005f8
    bccc:	00015b04 	.word	0x00015b04

0000bcd0 <mayfly_xtal_retain>:
	DEBUG_RADIO_CLOSE(0);
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED)
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
{
    bcd0:	b507      	push	{r0, r1, r2, lr}
    bcd2:	4b1e      	ldr	r3, [pc, #120]	; (bd4c <mayfly_xtal_retain+0x7c>)
	static u8_t s_xtal_retained;

	if (retain) {
    bcd4:	2900      	cmp	r1, #0
    bcd6:	d021      	beq.n	bd1c <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    bcd8:	7819      	ldrb	r1, [r3, #0]
    bcda:	2900      	cmp	r1, #0
    bcdc:	d134      	bne.n	bd48 <mayfly_xtal_retain+0x78>
			static struct mayfly s_mfy_xtal_start = {0, 0, s_link,
				NULL, mayfly_xtal_start};
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    bcde:	2801      	cmp	r0, #1
    bce0:	d008      	beq.n	bcf4 <mayfly_xtal_retain+0x24>
    bce2:	4b1b      	ldr	r3, [pc, #108]	; (bd50 <mayfly_xtal_retain+0x80>)
    bce4:	4a1b      	ldr	r2, [pc, #108]	; (bd54 <mayfly_xtal_retain+0x84>)
    bce6:	9301      	str	r3, [sp, #4]
    bce8:	4b1b      	ldr	r3, [pc, #108]	; (bd58 <mayfly_xtal_retain+0x88>)
    bcea:	491c      	ldr	r1, [pc, #112]	; (bd5c <mayfly_xtal_retain+0x8c>)
    bcec:	9300      	str	r3, [sp, #0]
    bcee:	481c      	ldr	r0, [pc, #112]	; (bd60 <mayfly_xtal_retain+0x90>)
    bcf0:	4b1c      	ldr	r3, [pc, #112]	; (bd64 <mayfly_xtal_retain+0x94>)
    bcf2:	e00e      	b.n	bd12 <mayfly_xtal_retain+0x42>

			s_xtal_retained = 1;

			retval = mayfly_enqueue(caller_id,
    bcf4:	000a      	movs	r2, r1
			u32_t retval;

			/* Only user id job will try to retain the XTAL. */
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);

			s_xtal_retained = 1;
    bcf6:	7018      	strb	r0, [r3, #0]

			retval = mayfly_enqueue(caller_id,
    bcf8:	4b1b      	ldr	r3, [pc, #108]	; (bd68 <mayfly_xtal_retain+0x98>)
    bcfa:	f7fd ffaf 	bl	9c5c <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
    bcfe:	2800      	cmp	r0, #0
    bd00:	d022      	beq.n	bd48 <mayfly_xtal_retain+0x78>
    bd02:	4b13      	ldr	r3, [pc, #76]	; (bd50 <mayfly_xtal_retain+0x80>)
    bd04:	4a13      	ldr	r2, [pc, #76]	; (bd54 <mayfly_xtal_retain+0x84>)
    bd06:	9301      	str	r3, [sp, #4]
    bd08:	4b13      	ldr	r3, [pc, #76]	; (bd58 <mayfly_xtal_retain+0x88>)
    bd0a:	4914      	ldr	r1, [pc, #80]	; (bd5c <mayfly_xtal_retain+0x8c>)
    bd0c:	9300      	str	r3, [sp, #0]
    bd0e:	4817      	ldr	r0, [pc, #92]	; (bd6c <mayfly_xtal_retain+0x9c>)
    bd10:	4b14      	ldr	r3, [pc, #80]	; (bd64 <mayfly_xtal_retain+0x94>)
    bd12:	f7f5 fd29 	bl	1768 <printk>
    bd16:	b662      	cpsie	i
    bd18:	2004      	movs	r0, #4
    bd1a:	df02      	svc	2
		}
	} else {
		if (s_xtal_retained) {
    bd1c:	781a      	ldrb	r2, [r3, #0]
    bd1e:	2a00      	cmp	r2, #0
    bd20:	d012      	beq.n	bd48 <mayfly_xtal_retain+0x78>
				{0, 0, s_link[1], NULL, mayfly_xtal_stop}
			};
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;
    bd22:	7019      	strb	r1, [r3, #0]
    bd24:	4b12      	ldr	r3, [pc, #72]	; (bd70 <mayfly_xtal_retain+0xa0>)

			switch (caller_id) {
    bd26:	2800      	cmp	r0, #0
    bd28:	d00b      	beq.n	bd42 <mayfly_xtal_retain+0x72>
			case RADIO_TICKER_USER_ID_WORKER:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
				break;

			case RADIO_TICKER_USER_ID_JOB:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    bd2a:	3310      	adds	r3, #16
			struct mayfly *p_mfy_xtal_stop = NULL;
			u32_t retval;

			s_xtal_retained = 0;

			switch (caller_id) {
    bd2c:	2801      	cmp	r0, #1
    bd2e:	d008      	beq.n	bd42 <mayfly_xtal_retain+0x72>
			case RADIO_TICKER_USER_ID_JOB:
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
				break;

			default:
				LL_ASSERT(0);
    bd30:	4b07      	ldr	r3, [pc, #28]	; (bd50 <mayfly_xtal_retain+0x80>)
    bd32:	4a08      	ldr	r2, [pc, #32]	; (bd54 <mayfly_xtal_retain+0x84>)
    bd34:	9301      	str	r3, [sp, #4]
    bd36:	4b08      	ldr	r3, [pc, #32]	; (bd58 <mayfly_xtal_retain+0x88>)
    bd38:	4908      	ldr	r1, [pc, #32]	; (bd5c <mayfly_xtal_retain+0x8c>)
    bd3a:	9300      	str	r3, [sp, #0]
    bd3c:	480d      	ldr	r0, [pc, #52]	; (bd74 <mayfly_xtal_retain+0xa4>)
    bd3e:	4b09      	ldr	r3, [pc, #36]	; (bd64 <mayfly_xtal_retain+0x94>)
    bd40:	e7e7      	b.n	bd12 <mayfly_xtal_retain+0x42>
				break;
			}

			retval = mayfly_enqueue(caller_id,
    bd42:	2200      	movs	r2, #0
    bd44:	0011      	movs	r1, r2
    bd46:	e7d8      	b.n	bcfa <mayfly_xtal_retain+0x2a>
						RADIO_TICKER_USER_ID_WORKER, 0,
						p_mfy_xtal_stop);
			LL_ASSERT(!retval);
		}
	}
}
    bd48:	bd07      	pop	{r0, r1, r2, pc}
    bd4a:	46c0      	nop			; (mov r8, r8)
    bd4c:	20001250 	.word	0x20001250
    bd50:	000145b0 	.word	0x000145b0
    bd54:	00014570 	.word	0x00014570
    bd58:	000145b5 	.word	0x000145b5
    bd5c:	00014577 	.word	0x00014577
    bd60:	00015b2d 	.word	0x00015b2d
    bd64:	00017252 	.word	0x00017252
    bd68:	20000668 	.word	0x20000668
    bd6c:	00015b04 	.word	0x00015b04
    bd70:	20000678 	.word	0x20000678
    bd74:	00014bc5 	.word	0x00014bc5

0000bd78 <rx_packet_set>:

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    bd7a:	0003      	movs	r3, r0

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    bd7c:	0006      	movs	r6, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    bd7e:	3333      	adds	r3, #51	; 0x33
    bd80:	781c      	ldrb	r4, [r3, #0]
{
	u16_t max_rx_octets;
	u8_t phy;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_rx_octets = conn->max_rx_octets;
    bd82:	8e05      	ldrh	r5, [r0, #48]	; 0x30
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_rx;
    bd84:	06a4      	lsls	r4, r4, #26
    bd86:	0f64      	lsrs	r4, r4, #29
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    bd88:	0020      	movs	r0, r4

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    bd8a:	000f      	movs	r7, r1
	phy = conn->phy_rx;
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);
    bd8c:	2100      	movs	r1, #0
    bd8e:	f7fe f9d9 	bl	a144 <radio_phy_set>

	if (conn->enc_rx) {
    bd92:	0033      	movs	r3, r6
    bd94:	2201      	movs	r2, #1
    bd96:	33c0      	adds	r3, #192	; 0xc0
    bd98:	781b      	ldrb	r3, [r3, #0]
    bd9a:	0064      	lsls	r4, r4, #1
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    bd9c:	4322      	orrs	r2, r4
	phy = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, 0);

	if (conn->enc_rx) {
    bd9e:	06db      	lsls	r3, r3, #27
    bda0:	d50a      	bpl.n	bdb8 <rx_packet_set+0x40>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    bda2:	1d29      	adds	r1, r5, #4
    bda4:	b2c9      	uxtb	r1, r1
    bda6:	2008      	movs	r0, #8
    bda8:	f7fe fa0e 	bl	a1c8 <radio_pkt_configure>

		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx,
    bdac:	0030      	movs	r0, r6
    bdae:	0039      	movs	r1, r7
    bdb0:	30c1      	adds	r0, #193	; 0xc1
    bdb2:	f7fe fc23 	bl	a5fc <radio_ccm_rx_pkt_set>
    bdb6:	e004      	b.n	bdc2 <rx_packet_set+0x4a>
						      pdu_data_rx));
	} else {
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    bdb8:	2008      	movs	r0, #8
    bdba:	b2e9      	uxtb	r1, r5
    bdbc:	f7fe fa04 	bl	a1c8 <radio_pkt_configure>

		radio_pkt_rx_set(pdu_data_rx);
    bdc0:	0038      	movs	r0, r7
    bdc2:	f7fe fa1f 	bl	a204 <radio_pkt_rx_set>
	}
}
    bdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bdc8 <prepare_pdu_data_tx>:
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    bdc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    bdca:	0006      	movs	r6, r0
    bdcc:	0004      	movs	r4, r0
    bdce:	36c0      	adds	r6, #192	; 0xc0
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    bdd0:	000d      	movs	r5, r1
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    bdd2:	7831      	ldrb	r1, [r6, #0]
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    bdd4:	0002      	movs	r2, r0
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    bdd6:	09cb      	lsrs	r3, r1, #7
    bdd8:	34fc      	adds	r4, #252	; 0xfc
    bdda:	2b00      	cmp	r3, #0
    bddc:	d133      	bne.n	be46 <prepare_pdu_data_tx+0x7e>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    bdde:	68a3      	ldr	r3, [r4, #8]

	if ((conn->empty != 0) || /* empty packet */
    bde0:	2b00      	cmp	r3, #0
    bde2:	d030      	beq.n	be46 <prepare_pdu_data_tx+0x7e>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    bde4:	1d18      	adds	r0, r3, #4
    bde6:	9001      	str	r0, [sp, #4]

	if ((conn->empty != 0) || /* empty packet */
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
    bde8:	0708      	lsls	r0, r1, #28
    bdea:	d542      	bpl.n	be72 <prepare_pdu_data_tx+0xaa>
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
    bdec:	795f      	ldrb	r7, [r3, #5]
    bdee:	2f00      	cmp	r7, #0
    bdf0:	d03f      	beq.n	be72 <prepare_pdu_data_tx+0xaa>
	    (_pdu_data_tx->len != 0) &&
    bdf2:	791f      	ldrb	r7, [r3, #4]
    bdf4:	43ff      	mvns	r7, r7
    bdf6:	07b8      	lsls	r0, r7, #30
    bdf8:	d125      	bne.n	be46 <prepare_pdu_data_tx+0x7e>
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
	     ((conn->role.master.role == 0) &&
    bdfa:	0017      	movs	r7, r2
    bdfc:	3744      	adds	r7, #68	; 0x44
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
	    (_pdu_data_tx->len != 0) &&
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    bdfe:	783f      	ldrb	r7, [r7, #0]
    be00:	79db      	ldrb	r3, [r3, #7]
    be02:	46bc      	mov	ip, r7
    be04:	4660      	mov	r0, ip
    be06:	2740      	movs	r7, #64	; 0x40
    be08:	07c0      	lsls	r0, r0, #31
    be0a:	d40c      	bmi.n	be26 <prepare_pdu_data_tx+0x5e>
	     ((conn->role.master.role == 0) &&
    be0c:	4239      	tst	r1, r7
    be0e:	d102      	bne.n	be16 <prepare_pdu_data_tx+0x4e>
	      (((conn->refresh == 0) &&
    be10:	2b02      	cmp	r3, #2
    be12:	d105      	bne.n	be20 <prepare_pdu_data_tx+0x58>
    be14:	e02d      	b.n	be72 <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    be16:	1e99      	subs	r1, r3, #2
    be18:	2901      	cmp	r1, #1
    be1a:	d92a      	bls.n	be72 <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    be1c:	2b0b      	cmp	r3, #11
    be1e:	d028      	beq.n	be72 <prepare_pdu_data_tx+0xaa>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    be20:	2b06      	cmp	r3, #6
    be22:	d10c      	bne.n	be3e <prepare_pdu_data_tx+0x76>
    be24:	e025      	b.n	be72 <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
	     ((conn->role.slave.role != 0) &&
    be26:	4239      	tst	r1, r7
    be28:	d102      	bne.n	be30 <prepare_pdu_data_tx+0x68>
	      (((conn->refresh == 0) &&
    be2a:	2b02      	cmp	r3, #2
    be2c:	d104      	bne.n	be38 <prepare_pdu_data_tx+0x70>
    be2e:	e020      	b.n	be72 <prepare_pdu_data_tx+0xaa>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
	       ((conn->refresh != 0) &&
    be30:	27fd      	movs	r7, #253	; 0xfd
    be32:	1e99      	subs	r1, r3, #2
    be34:	4239      	tst	r1, r7
    be36:	d01c      	beq.n	be72 <prepare_pdu_data_tx+0xaa>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    be38:	1f59      	subs	r1, r3, #5
    be3a:	2901      	cmp	r1, #1
    be3c:	d919      	bls.n	be72 <prepare_pdu_data_tx+0xaa>
    be3e:	21fb      	movs	r1, #251	; 0xfb
    be40:	3b0d      	subs	r3, #13
    be42:	420b      	tst	r3, r1
    be44:	d015      	beq.n	be72 <prepare_pdu_data_tx+0xaa>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    be46:	2280      	movs	r2, #128	; 0x80
    be48:	7833      	ldrb	r3, [r6, #0]
    be4a:	4252      	negs	r2, r2
    be4c:	4313      	orrs	r3, r2
    be4e:	7033      	strb	r3, [r6, #0]

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    be50:	f7fe fa46 	bl	a2e0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    be54:	2203      	movs	r2, #3
    be56:	7803      	ldrb	r3, [r0, #0]
    be58:	4393      	bics	r3, r2
    be5a:	3a02      	subs	r2, #2
    be5c:	4313      	orrs	r3, r2
    be5e:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    be60:	2300      	movs	r3, #0
    be62:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    be64:	68a1      	ldr	r1, [r4, #8]
    be66:	7803      	ldrb	r3, [r0, #0]
    be68:	320f      	adds	r2, #15
    be6a:	2900      	cmp	r1, #0
    be6c:	d129      	bne.n	bec2 <prepare_pdu_data_tx+0xfa>
		pdu_data_tx->md = 1;
	} else {
		pdu_data_tx->md = 0;
    be6e:	4393      	bics	r3, r2
    be70:	e028      	b.n	bec4 <prepare_pdu_data_tx+0xfc>
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);
    be72:	0011      	movs	r1, r2
    be74:	31ff      	adds	r1, #255	; 0xff
    be76:	7d8b      	ldrb	r3, [r1, #22]
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    be78:	9801      	ldr	r0, [sp, #4]
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    be7a:	7d4e      	ldrb	r6, [r1, #21]
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		u16_t max_tx_octets;

		_pdu_data_tx =
    be7c:	18c0      	adds	r0, r0, r3
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    be7e:	2e00      	cmp	r6, #0
    be80:	d101      	bne.n	be86 <prepare_pdu_data_tx+0xbe>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    be82:	7846      	ldrb	r6, [r0, #1]
    be84:	754e      	strb	r6, [r1, #21]
		}

		if (conn->packet_tx_head_offset) {
    be86:	2b00      	cmp	r3, #0
    be88:	d005      	beq.n	be96 <prepare_pdu_data_tx+0xce>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    be8a:	2603      	movs	r6, #3
    be8c:	7803      	ldrb	r3, [r0, #0]
    be8e:	43b3      	bics	r3, r6
    be90:	3e02      	subs	r6, #2
    be92:	4333      	orrs	r3, r6
    be94:	7003      	strb	r3, [r0, #0]
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    be96:	2610      	movs	r6, #16

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    be98:	7d4b      	ldrb	r3, [r1, #21]
    be9a:	7d89      	ldrb	r1, [r1, #22]
    be9c:	1a5b      	subs	r3, r3, r1
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    be9e:	7801      	ldrb	r1, [r0, #0]

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    bea0:	b2db      	uxtb	r3, r3
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    bea2:	43b1      	bics	r1, r6

		if (conn->packet_tx_head_offset) {
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    bea4:	7043      	strb	r3, [r0, #1]
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    bea6:	7001      	strb	r1, [r0, #0]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		max_tx_octets = conn->max_tx_octets;
    bea8:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
    beaa:	429a      	cmp	r2, r3
    beac:	d203      	bcs.n	beb6 <prepare_pdu_data_tx+0xee>
			_pdu_data_tx->len = max_tx_octets;
			_pdu_data_tx->md = 1;
    beae:	b2cb      	uxtb	r3, r1
    beb0:	4333      	orrs	r3, r6
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
			_pdu_data_tx->len = max_tx_octets;
    beb2:	7042      	strb	r2, [r0, #1]
			_pdu_data_tx->md = 1;
    beb4:	7003      	strb	r3, [r0, #0]
		}

		if (conn->pkt_tx_head->next) {
    beb6:	68a3      	ldr	r3, [r4, #8]
    beb8:	681b      	ldr	r3, [r3, #0]
    beba:	2b00      	cmp	r3, #0
    bebc:	d003      	beq.n	bec6 <prepare_pdu_data_tx+0xfe>
			_pdu_data_tx->md = 1;
    bebe:	2210      	movs	r2, #16
    bec0:	7803      	ldrb	r3, [r0, #0]
    bec2:	4313      	orrs	r3, r2
    bec4:	7003      	strb	r3, [r0, #0]
		}
	}

	_pdu_data_tx->rfu = 0;
    bec6:	231f      	movs	r3, #31
    bec8:	7802      	ldrb	r2, [r0, #0]
    beca:	4013      	ands	r3, r2
    becc:	7003      	strb	r3, [r0, #0]

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR)
	_pdu_data_tx->resv = 0;
    bece:	2300      	movs	r3, #0
    bed0:	7083      	strb	r3, [r0, #2]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_CLEAR */

	*pdu_data_tx = _pdu_data_tx;
    bed2:	6028      	str	r0, [r5, #0]
}
    bed4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0000bed6 <tx_packet_set>:
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    bed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    bed8:	0003      	movs	r3, r0
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    beda:	0006      	movs	r6, r0
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    bedc:	3332      	adds	r3, #50	; 0x32
		radio_pkt_rx_set(pdu_data_rx);
	}
}

static void tx_packet_set(struct connection *conn, struct pdu_data *pdu_data_tx)
{
    bede:	000f      	movs	r7, r1
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    bee0:	7819      	ldrb	r1, [r3, #0]
{
	u16_t max_tx_octets;
	u8_t phy, flags;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_tx_octets = conn->max_tx_octets;
    bee2:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	phy = conn->phy_tx;
    bee4:	068c      	lsls	r4, r1, #26
    bee6:	0f64      	lsrs	r4, r4, #29
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	phy = 0;
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);
    bee8:	0020      	movs	r0, r4
    beea:	09c9      	lsrs	r1, r1, #7
    beec:	f7fe f92a 	bl	a144 <radio_phy_set>

	if (conn->enc_tx) {
    bef0:	0033      	movs	r3, r6
    bef2:	2201      	movs	r2, #1
    bef4:	33c0      	adds	r3, #192	; 0xc0
    bef6:	781b      	ldrb	r3, [r3, #0]
    bef8:	0064      	lsls	r4, r4, #1
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    befa:	4322      	orrs	r2, r4
	flags = 0;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_phy_set(phy, flags);

	if (conn->enc_tx) {
    befc:	069b      	lsls	r3, r3, #26
    befe:	d50a      	bpl.n	bf16 <tx_packet_set+0x40>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    bf00:	1d29      	adds	r1, r5, #4
    bf02:	b2c9      	uxtb	r1, r1
    bf04:	2008      	movs	r0, #8
    bf06:	f7fe f95f 	bl	a1c8 <radio_pkt_configure>

		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    bf0a:	0030      	movs	r0, r6
    bf0c:	0039      	movs	r1, r7
    bf0e:	30e2      	adds	r0, #226	; 0xe2
    bf10:	f7fe fbb2 	bl	a678 <radio_ccm_tx_pkt_set>
    bf14:	e004      	b.n	bf20 <tx_packet_set+0x4a>
						      pdu_data_tx));
	} else {
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    bf16:	2008      	movs	r0, #8
    bf18:	b2e9      	uxtb	r1, r5
    bf1a:	f7fe f955 	bl	a1c8 <radio_pkt_configure>

		radio_pkt_tx_set(pdu_data_tx);
    bf1e:	0038      	movs	r0, r7
    bf20:	f7fe f978 	bl	a214 <radio_pkt_tx_set>
	}
}
    bf24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000bf28 <packet_rx_enqueue>:
		       &s_mfy_callback);
#endif
}

static void packet_rx_enqueue(void)
{
    bf28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	void *link;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	u8_t last;

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    bf2a:	24be      	movs	r4, #190	; 0xbe
    bf2c:	21df      	movs	r1, #223	; 0xdf
    bf2e:	4a1d      	ldr	r2, [pc, #116]	; (bfa4 <packet_rx_enqueue+0x7c>)
    bf30:	34ff      	adds	r4, #255	; 0xff
    bf32:	0049      	lsls	r1, r1, #1
    bf34:	5d13      	ldrb	r3, [r2, r4]
    bf36:	5c51      	ldrb	r1, [r2, r1]
    bf38:	4299      	cmp	r1, r3
    bf3a:	d108      	bne.n	bf4e <packet_rx_enqueue+0x26>
    bf3c:	4b1a      	ldr	r3, [pc, #104]	; (bfa8 <packet_rx_enqueue+0x80>)
    bf3e:	4a1b      	ldr	r2, [pc, #108]	; (bfac <packet_rx_enqueue+0x84>)
    bf40:	9301      	str	r3, [sp, #4]
    bf42:	4b1b      	ldr	r3, [pc, #108]	; (bfb0 <packet_rx_enqueue+0x88>)
    bf44:	491b      	ldr	r1, [pc, #108]	; (bfb4 <packet_rx_enqueue+0x8c>)
    bf46:	9300      	str	r3, [sp, #0]
    bf48:	481b      	ldr	r0, [pc, #108]	; (bfb8 <packet_rx_enqueue+0x90>)
    bf4a:	4b1c      	ldr	r3, [pc, #112]	; (bfbc <packet_rx_enqueue+0x94>)
    bf4c:	e022      	b.n	bf94 <packet_rx_enqueue+0x6c>

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    bf4e:	21dc      	movs	r1, #220	; 0xdc
    bf50:	5d13      	ldrb	r3, [r2, r4]
    bf52:	0049      	lsls	r1, r1, #1
    bf54:	5851      	ldr	r1, [r2, r1]
    bf56:	009b      	lsls	r3, r3, #2
    bf58:	5858      	ldr	r0, [r3, r1]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    bf5a:	23fa      	movs	r3, #250	; 0xfa

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
	if (last == _radio.packet_rx_count) {
    bf5c:	25de      	movs	r5, #222	; 0xde

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    bf5e:	005b      	lsls	r3, r3, #1
    bf60:	5cd3      	ldrb	r3, [r2, r3]

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	link = radio_pdu_node_rx->hdr.onion.link;
    bf62:	6801      	ldr	r1, [r0, #0]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    bf64:	7003      	strb	r3, [r0, #0]
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    bf66:	5d13      	ldrb	r3, [r2, r4]
	if (last == _radio.packet_rx_count) {
    bf68:	006d      	lsls	r5, r5, #1
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    bf6a:	3301      	adds	r3, #1
	if (last == _radio.packet_rx_count) {
    bf6c:	5d55      	ldrb	r5, [r2, r5]
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    bf6e:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
    bf70:	429d      	cmp	r5, r3
    bf72:	d100      	bne.n	bf76 <packet_rx_enqueue+0x4e>
		last = 0;
    bf74:	2300      	movs	r3, #0
	}
	_radio.packet_rx_last = last;
    bf76:	5513      	strb	r3, [r2, r4]

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    bf78:	32cd      	adds	r2, #205	; 0xcd
    bf7a:	32ff      	adds	r2, #255	; 0xff
    bf7c:	f7fd ffd7 	bl	9f2e <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    bf80:	2800      	cmp	r0, #0
    bf82:	d10c      	bne.n	bf9e <packet_rx_enqueue+0x76>
    bf84:	4b08      	ldr	r3, [pc, #32]	; (bfa8 <packet_rx_enqueue+0x80>)
    bf86:	4a09      	ldr	r2, [pc, #36]	; (bfac <packet_rx_enqueue+0x84>)
    bf88:	9301      	str	r3, [sp, #4]
    bf8a:	4b09      	ldr	r3, [pc, #36]	; (bfb0 <packet_rx_enqueue+0x88>)
    bf8c:	4909      	ldr	r1, [pc, #36]	; (bfb4 <packet_rx_enqueue+0x8c>)
    bf8e:	9300      	str	r3, [sp, #0]
    bf90:	480b      	ldr	r0, [pc, #44]	; (bfc0 <packet_rx_enqueue+0x98>)
    bf92:	4b0a      	ldr	r3, [pc, #40]	; (bfbc <packet_rx_enqueue+0x94>)
    bf94:	f7f5 fbe8 	bl	1768 <printk>
    bf98:	b662      	cpsie	i
    bf9a:	2004      	movs	r0, #4
    bf9c:	df02      	svc	2
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    bf9e:	f005 fcd3 	bl	11948 <radio_event_callback>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);

	/* callback to trigger application action */
	packet_rx_callback();
}
    bfa2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    bfa4:	20001254 	.word	0x20001254
    bfa8:	000145b0 	.word	0x000145b0
    bfac:	00014570 	.word	0x00014570
    bfb0:	000145b5 	.word	0x000145b5
    bfb4:	00014577 	.word	0x00014577
    bfb8:	00015b5d 	.word	0x00015b5d
    bfbc:	000170b0 	.word	0x000170b0
    bfc0:	000159ff 	.word	0x000159ff

0000bfc4 <rx_fc_lock>:

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
    bfc4:	b510      	push	{r4, lr}
	if (_radio.fc_req == _radio.fc_ack) {
    bfc6:	21fe      	movs	r1, #254	; 0xfe
    bfc8:	24fe      	movs	r4, #254	; 0xfe
    bfca:	4b0b      	ldr	r3, [pc, #44]	; (bff8 <rx_fc_lock+0x34>)
    bfcc:	0049      	lsls	r1, r1, #1
    bfce:	34ff      	adds	r4, #255	; 0xff
    bfd0:	5c5a      	ldrb	r2, [r3, r1]
    bfd2:	5d1c      	ldrb	r4, [r3, r4]
    bfd4:	4294      	cmp	r4, r2
    bfd6:	d10d      	bne.n	bff4 <rx_fc_lock+0x30>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    bfd8:	5c5a      	ldrb	r2, [r3, r1]
    bfda:	32f8      	adds	r2, #248	; 0xf8
    bfdc:	0052      	lsls	r2, r2, #1
    bfde:	189a      	adds	r2, r3, r2
    bfe0:	80d0      	strh	r0, [r2, #6]
		req = _radio.fc_req + 1;
    bfe2:	5c5a      	ldrb	r2, [r3, r1]
    bfe4:	3201      	adds	r2, #1
    bfe6:	b2d2      	uxtb	r2, r2
		if (req == TRIPLE_BUFFER_SIZE) {
    bfe8:	2a03      	cmp	r2, #3
    bfea:	d100      	bne.n	bfee <rx_fc_lock+0x2a>
			req = 0;
    bfec:	2200      	movs	r2, #0
		}
		_radio.fc_req = req;
    bfee:	21fe      	movs	r1, #254	; 0xfe
    bff0:	0049      	lsls	r1, r1, #1
    bff2:	545a      	strb	r2, [r3, r1]
	}
}
    bff4:	bd10      	pop	{r4, pc}
    bff6:	46c0      	nop			; (mov r8, r8)
    bff8:	20001254 	.word	0x20001254

0000bffc <ticker_success_assert>:
{
	*((u32_t volatile *)ops_context) = status;
}

static void ticker_success_assert(u32_t status, void *params)
{
    bffc:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    bffe:	2800      	cmp	r0, #0
    c000:	d00c      	beq.n	c01c <ticker_success_assert+0x20>
    c002:	4b07      	ldr	r3, [pc, #28]	; (c020 <ticker_success_assert+0x24>)
    c004:	4a07      	ldr	r2, [pc, #28]	; (c024 <ticker_success_assert+0x28>)
    c006:	9301      	str	r3, [sp, #4]
    c008:	4b07      	ldr	r3, [pc, #28]	; (c028 <ticker_success_assert+0x2c>)
    c00a:	4908      	ldr	r1, [pc, #32]	; (c02c <ticker_success_assert+0x30>)
    c00c:	9300      	str	r3, [sp, #0]
    c00e:	4808      	ldr	r0, [pc, #32]	; (c030 <ticker_success_assert+0x34>)
    c010:	4b08      	ldr	r3, [pc, #32]	; (c034 <ticker_success_assert+0x38>)
    c012:	f7f5 fba9 	bl	1768 <printk>
    c016:	b662      	cpsie	i
    c018:	2004      	movs	r0, #4
    c01a:	df02      	svc	2
}
    c01c:	bd07      	pop	{r0, r1, r2, pc}
    c01e:	46c0      	nop			; (mov r8, r8)
    c020:	000145b0 	.word	0x000145b0
    c024:	00014570 	.word	0x00014570
    c028:	000145b5 	.word	0x000145b5
    c02c:	00014577 	.word	0x00014577
    c030:	00015bb0 	.word	0x00015bb0
    c034:	00017132 	.word	0x00017132

0000c038 <ticker_stop_adv_assert>:

static void ticker_stop_adv_assert(u32_t status, void *params)
{
    c038:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    c03a:	2801      	cmp	r0, #1
    c03c:	d113      	bne.n	c066 <ticker_stop_adv_assert+0x2e>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    c03e:	4b0a      	ldr	r3, [pc, #40]	; (c068 <ticker_stop_adv_assert+0x30>)
    c040:	7b9a      	ldrb	r2, [r3, #14]
    c042:	2a05      	cmp	r2, #5
    c044:	d102      	bne.n	c04c <ticker_stop_adv_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Adv role as it is now transitioned
			 * to Slave role).
			 */
			_radio.ticker_id_stop = 0;
    c046:	2200      	movs	r2, #0
    c048:	739a      	strb	r2, [r3, #14]
    c04a:	e00c      	b.n	c066 <ticker_stop_adv_assert+0x2e>
		} else {
			LL_ASSERT(0);
    c04c:	4b07      	ldr	r3, [pc, #28]	; (c06c <ticker_stop_adv_assert+0x34>)
    c04e:	4a08      	ldr	r2, [pc, #32]	; (c070 <ticker_stop_adv_assert+0x38>)
    c050:	9301      	str	r3, [sp, #4]
    c052:	4b08      	ldr	r3, [pc, #32]	; (c074 <ticker_stop_adv_assert+0x3c>)
    c054:	4908      	ldr	r1, [pc, #32]	; (c078 <ticker_stop_adv_assert+0x40>)
    c056:	9300      	str	r3, [sp, #0]
    c058:	4808      	ldr	r0, [pc, #32]	; (c07c <ticker_stop_adv_assert+0x44>)
    c05a:	4b09      	ldr	r3, [pc, #36]	; (c080 <ticker_stop_adv_assert+0x48>)
    c05c:	f7f5 fb84 	bl	1768 <printk>
    c060:	b662      	cpsie	i
    c062:	2004      	movs	r0, #4
    c064:	df02      	svc	2
		}
	}
}
    c066:	bd07      	pop	{r0, r1, r2, pc}
    c068:	20001254 	.word	0x20001254
    c06c:	000145b0 	.word	0x000145b0
    c070:	00014570 	.word	0x00014570
    c074:	000145b5 	.word	0x000145b5
    c078:	00014577 	.word	0x00014577
    c07c:	00014bc5 	.word	0x00014bc5
    c080:	00016f20 	.word	0x00016f20

0000c084 <ticker_stop_scan_assert>:

static void ticker_stop_scan_assert(u32_t status, void *params)
{
    c084:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	if (status == TICKER_STATUS_FAILURE) {
    c086:	2801      	cmp	r0, #1
    c088:	d113      	bne.n	c0b2 <ticker_stop_scan_assert+0x2e>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    c08a:	4b0a      	ldr	r3, [pc, #40]	; (c0b4 <ticker_stop_scan_assert+0x30>)
    c08c:	7b9a      	ldrb	r2, [r3, #14]
    c08e:	2a06      	cmp	r2, #6
    c090:	d102      	bne.n	c098 <ticker_stop_scan_assert+0x14>
			 * while in role_disable. Let the role_disable
			 * be made aware of, so it can return failure
			 * (to stop Scan role as it is now transitioned
			 * to Master role).
			 */
			_radio.ticker_id_stop = 0;
    c092:	2200      	movs	r2, #0
    c094:	739a      	strb	r2, [r3, #14]
    c096:	e00c      	b.n	c0b2 <ticker_stop_scan_assert+0x2e>
		} else {
			LL_ASSERT(0);
    c098:	4b07      	ldr	r3, [pc, #28]	; (c0b8 <ticker_stop_scan_assert+0x34>)
    c09a:	4a08      	ldr	r2, [pc, #32]	; (c0bc <ticker_stop_scan_assert+0x38>)
    c09c:	9301      	str	r3, [sp, #4]
    c09e:	4b08      	ldr	r3, [pc, #32]	; (c0c0 <ticker_stop_scan_assert+0x3c>)
    c0a0:	4908      	ldr	r1, [pc, #32]	; (c0c4 <ticker_stop_scan_assert+0x40>)
    c0a2:	9300      	str	r3, [sp, #0]
    c0a4:	4808      	ldr	r0, [pc, #32]	; (c0c8 <ticker_stop_scan_assert+0x44>)
    c0a6:	4b09      	ldr	r3, [pc, #36]	; (c0cc <ticker_stop_scan_assert+0x48>)
    c0a8:	f7f5 fb5e 	bl	1768 <printk>
    c0ac:	b662      	cpsie	i
    c0ae:	2004      	movs	r0, #4
    c0b0:	df02      	svc	2
		}
	}
}
    c0b2:	bd07      	pop	{r0, r1, r2, pc}
    c0b4:	20001254 	.word	0x20001254
    c0b8:	000145b0 	.word	0x000145b0
    c0bc:	00014570 	.word	0x00014570
    c0c0:	000145b5 	.word	0x000145b5
    c0c4:	00014577 	.word	0x00014577
    c0c8:	00014bc5 	.word	0x00014bc5
    c0cc:	00016f87 	.word	0x00016f87

0000c0d0 <ticker_update_adv_assert>:

static void ticker_update_adv_assert(u32_t status, void *params)
{
    c0d0:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(params);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    c0d2:	2800      	cmp	r0, #0
    c0d4:	d010      	beq.n	c0f8 <ticker_update_adv_assert+0x28>
    c0d6:	4b09      	ldr	r3, [pc, #36]	; (c0fc <ticker_update_adv_assert+0x2c>)
    c0d8:	7b9b      	ldrb	r3, [r3, #14]
    c0da:	2b05      	cmp	r3, #5
    c0dc:	d00c      	beq.n	c0f8 <ticker_update_adv_assert+0x28>
    c0de:	4b08      	ldr	r3, [pc, #32]	; (c100 <ticker_update_adv_assert+0x30>)
    c0e0:	4a08      	ldr	r2, [pc, #32]	; (c104 <ticker_update_adv_assert+0x34>)
    c0e2:	9301      	str	r3, [sp, #4]
    c0e4:	4b08      	ldr	r3, [pc, #32]	; (c108 <ticker_update_adv_assert+0x38>)
    c0e6:	4909      	ldr	r1, [pc, #36]	; (c10c <ticker_update_adv_assert+0x3c>)
    c0e8:	9300      	str	r3, [sp, #0]
    c0ea:	4809      	ldr	r0, [pc, #36]	; (c110 <ticker_update_adv_assert+0x40>)
    c0ec:	4b09      	ldr	r3, [pc, #36]	; (c114 <ticker_update_adv_assert+0x44>)
    c0ee:	f7f5 fb3b 	bl	1768 <printk>
    c0f2:	b662      	cpsie	i
    c0f4:	2004      	movs	r0, #4
    c0f6:	df02      	svc	2
		  (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV));
}
    c0f8:	bd07      	pop	{r0, r1, r2, pc}
    c0fa:	46c0      	nop			; (mov r8, r8)
    c0fc:	20001254 	.word	0x20001254
    c100:	000145b0 	.word	0x000145b0
    c104:	00014570 	.word	0x00014570
    c108:	000145b5 	.word	0x000145b5
    c10c:	00014577 	.word	0x00014577
    c110:	00015bdd 	.word	0x00015bdd
    c114:	000171a8 	.word	0x000171a8

0000c118 <ticker_update_slave_assert>:

static void ticker_update_slave_assert(u32_t status, void *params)
{
    c118:	b507      	push	{r0, r1, r2, lr}
	u8_t ticker_id = (u32_t)params & 0xFF;

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    c11a:	2800      	cmp	r0, #0
    c11c:	d011      	beq.n	c142 <ticker_update_slave_assert+0x2a>
    c11e:	4b09      	ldr	r3, [pc, #36]	; (c144 <ticker_update_slave_assert+0x2c>)
    c120:	b2c9      	uxtb	r1, r1
    c122:	7b9b      	ldrb	r3, [r3, #14]
    c124:	4299      	cmp	r1, r3
    c126:	d00c      	beq.n	c142 <ticker_update_slave_assert+0x2a>
    c128:	4b07      	ldr	r3, [pc, #28]	; (c148 <ticker_update_slave_assert+0x30>)
    c12a:	4a08      	ldr	r2, [pc, #32]	; (c14c <ticker_update_slave_assert+0x34>)
    c12c:	9301      	str	r3, [sp, #4]
    c12e:	4b08      	ldr	r3, [pc, #32]	; (c150 <ticker_update_slave_assert+0x38>)
    c130:	4908      	ldr	r1, [pc, #32]	; (c154 <ticker_update_slave_assert+0x3c>)
    c132:	9300      	str	r3, [sp, #0]
    c134:	4808      	ldr	r0, [pc, #32]	; (c158 <ticker_update_slave_assert+0x40>)
    c136:	4b09      	ldr	r3, [pc, #36]	; (c15c <ticker_update_slave_assert+0x44>)
    c138:	f7f5 fb16 	bl	1768 <printk>
    c13c:	b662      	cpsie	i
    c13e:	2004      	movs	r0, #4
    c140:	df02      	svc	2
		  (_radio.ticker_id_stop == ticker_id));
}
    c142:	bd07      	pop	{r0, r1, r2, pc}
    c144:	20001254 	.word	0x20001254
    c148:	000145b0 	.word	0x000145b0
    c14c:	00014570 	.word	0x00014570
    c150:	000145b5 	.word	0x000145b5
    c154:	00014577 	.word	0x00014577
    c158:	00015c2c 	.word	0x00015c2c
    c15c:	000171da 	.word	0x000171da

0000c160 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    c160:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    c162:	2800      	cmp	r0, #0
    c164:	d00c      	beq.n	c180 <ticker_op_latency_cancelled+0x20>
    c166:	4b09      	ldr	r3, [pc, #36]	; (c18c <ticker_op_latency_cancelled+0x2c>)
    c168:	4a09      	ldr	r2, [pc, #36]	; (c190 <ticker_op_latency_cancelled+0x30>)
    c16a:	9301      	str	r3, [sp, #4]
    c16c:	4b09      	ldr	r3, [pc, #36]	; (c194 <ticker_op_latency_cancelled+0x34>)
    c16e:	490a      	ldr	r1, [pc, #40]	; (c198 <ticker_op_latency_cancelled+0x38>)
    c170:	9300      	str	r3, [sp, #0]
    c172:	480a      	ldr	r0, [pc, #40]	; (c19c <ticker_op_latency_cancelled+0x3c>)
    c174:	4b0a      	ldr	r3, [pc, #40]	; (c1a0 <ticker_op_latency_cancelled+0x40>)
    c176:	f7f5 faf7 	bl	1768 <printk>
    c17a:	b662      	cpsie	i
    c17c:	2004      	movs	r0, #4
    c17e:	df02      	svc	2

	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
    c180:	2210      	movs	r2, #16
    c182:	3144      	adds	r1, #68	; 0x44
    c184:	780b      	ldrb	r3, [r1, #0]
    c186:	4393      	bics	r3, r2
    c188:	700b      	strb	r3, [r1, #0]
}
    c18a:	bd07      	pop	{r0, r1, r2, pc}
    c18c:	000145b0 	.word	0x000145b0
    c190:	00014570 	.word	0x00014570
    c194:	000145b5 	.word	0x000145b5
    c198:	00014577 	.word	0x00014577
    c19c:	00015c83 	.word	0x00015c83
    c1a0:	000172b9 	.word	0x000172b9

0000c1a4 <ticker_job_disable>:
	DEBUG_RADIO_ISR(0);
}

#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
static void ticker_job_disable(u32_t status, void *op_context)
{
    c1a4:	b510      	push	{r4, lr}
	ARG_UNUSED(status);
	ARG_UNUSED(op_context);

	if (_radio.state != STATE_NONE) {
    c1a6:	4b05      	ldr	r3, [pc, #20]	; (c1bc <ticker_job_disable+0x18>)
    c1a8:	7c1b      	ldrb	r3, [r3, #16]
    c1aa:	2b00      	cmp	r3, #0
    c1ac:	d004      	beq.n	c1b8 <ticker_job_disable+0x14>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    c1ae:	2101      	movs	r1, #1
    c1b0:	2200      	movs	r2, #0
    c1b2:	0008      	movs	r0, r1
    c1b4:	f7fd fd32 	bl	9c1c <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);
	}
}
    c1b8:	bd10      	pop	{r4, pc}
    c1ba:	46c0      	nop			; (mov r8, r8)
    c1bc:	20001254 	.word	0x20001254

0000c1c0 <event_stop>:
	}
}

static void event_stop(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    c1c0:	b507      	push	{r0, r1, r2, lr}
    c1c2:	001a      	movs	r2, r3
	ARG_UNUSED(lazy);

	/* Radio state requested (stop or abort) stored in context is supplied
	 * in params.
	 */
	s_mfy_radio_stop.param = context;
    c1c4:	4b0b      	ldr	r3, [pc, #44]	; (c1f4 <event_stop+0x34>)
    c1c6:	609a      	str	r2, [r3, #8]

	/* Stop Radio Tx/Rx */
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c1c8:	2200      	movs	r2, #0
    c1ca:	0011      	movs	r1, r2
    c1cc:	0010      	movs	r0, r2
    c1ce:	f7fd fd45 	bl	9c5c <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_stop);
	LL_ASSERT(!retval);
    c1d2:	2800      	cmp	r0, #0
    c1d4:	d00c      	beq.n	c1f0 <event_stop+0x30>
    c1d6:	4b08      	ldr	r3, [pc, #32]	; (c1f8 <event_stop+0x38>)
    c1d8:	4a08      	ldr	r2, [pc, #32]	; (c1fc <event_stop+0x3c>)
    c1da:	9301      	str	r3, [sp, #4]
    c1dc:	4b08      	ldr	r3, [pc, #32]	; (c200 <event_stop+0x40>)
    c1de:	4909      	ldr	r1, [pc, #36]	; (c204 <event_stop+0x44>)
    c1e0:	9300      	str	r3, [sp, #0]
    c1e2:	4809      	ldr	r0, [pc, #36]	; (c208 <event_stop+0x48>)
    c1e4:	4b09      	ldr	r3, [pc, #36]	; (c20c <event_stop+0x4c>)
    c1e6:	f7f5 fabf 	bl	1768 <printk>
    c1ea:	b662      	cpsie	i
    c1ec:	2004      	movs	r0, #4
    c1ee:	df02      	svc	2
}
    c1f0:	bd07      	pop	{r0, r1, r2, pc}
    c1f2:	46c0      	nop			; (mov r8, r8)
    c1f4:	20000648 	.word	0x20000648
    c1f8:	000145b0 	.word	0x000145b0
    c1fc:	00014570 	.word	0x00014570
    c200:	000145b5 	.word	0x000145b5
    c204:	00014577 	.word	0x00014577
    c208:	00015b04 	.word	0x00015b04
    c20c:	00016f15 	.word	0x00016f15

0000c210 <event_adv_stop>:
	DEBUG_RADIO_START_A(0);
}

void event_adv_stop(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
		    void *context)
{
    c210:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(context);

	/* Abort an event, if any, to avoid Rx queue corruption used by Radio
	 * ISR.
	 */
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    c212:	2200      	movs	r2, #0
    c214:	2305      	movs	r3, #5
    c216:	0011      	movs	r1, r2
    c218:	0010      	movs	r0, r2
    c21a:	f7ff ffd1 	bl	c1c0 <event_stop>

	/* Stop Direct Adv */
	ticker_status =
    c21e:	2100      	movs	r1, #0
    c220:	4b1a      	ldr	r3, [pc, #104]	; (c28c <event_adv_stop+0x7c>)
    c222:	2205      	movs	r2, #5
    c224:	9300      	str	r3, [sp, #0]
    c226:	0008      	movs	r0, r1
    c228:	4b19      	ldr	r3, [pc, #100]	; (c290 <event_adv_stop+0x80>)
    c22a:	f7ff f985 	bl	b538 <ticker_stop>
	    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_ID_ADV,
			ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c22e:	2302      	movs	r3, #2
    c230:	4398      	bics	r0, r3
    c232:	1e05      	subs	r5, r0, #0
    c234:	d008      	beq.n	c248 <event_adv_stop+0x38>
    c236:	4b17      	ldr	r3, [pc, #92]	; (c294 <event_adv_stop+0x84>)
    c238:	4a17      	ldr	r2, [pc, #92]	; (c298 <event_adv_stop+0x88>)
    c23a:	9301      	str	r3, [sp, #4]
    c23c:	4b17      	ldr	r3, [pc, #92]	; (c29c <event_adv_stop+0x8c>)
    c23e:	4918      	ldr	r1, [pc, #96]	; (c2a0 <event_adv_stop+0x90>)
    c240:	9300      	str	r3, [sp, #0]
    c242:	4818      	ldr	r0, [pc, #96]	; (c2a4 <event_adv_stop+0x94>)
    c244:	4b18      	ldr	r3, [pc, #96]	; (c2a8 <event_adv_stop+0x98>)
    c246:	e00c      	b.n	c262 <event_adv_stop+0x52>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Prepare the rx packet structure */
	radio_pdu_node_rx = packet_rx_reserve_get(1);
    c248:	2001      	movs	r0, #1
    c24a:	f7ff fa83 	bl	b754 <packet_rx_reserve_get>
    c24e:	1e04      	subs	r4, r0, #0
	LL_ASSERT(radio_pdu_node_rx);
    c250:	d10c      	bne.n	c26c <event_adv_stop+0x5c>
    c252:	4b10      	ldr	r3, [pc, #64]	; (c294 <event_adv_stop+0x84>)
    c254:	4a10      	ldr	r2, [pc, #64]	; (c298 <event_adv_stop+0x88>)
    c256:	9301      	str	r3, [sp, #4]
    c258:	4b10      	ldr	r3, [pc, #64]	; (c29c <event_adv_stop+0x8c>)
    c25a:	4911      	ldr	r1, [pc, #68]	; (c2a0 <event_adv_stop+0x90>)
    c25c:	9300      	str	r3, [sp, #0]
    c25e:	4813      	ldr	r0, [pc, #76]	; (c2ac <event_adv_stop+0x9c>)
    c260:	4b11      	ldr	r3, [pc, #68]	; (c2a8 <event_adv_stop+0x98>)
    c262:	f7f5 fa81 	bl	1768 <printk>
    c266:	b662      	cpsie	i
    c268:	2004      	movs	r0, #4
    c26a:	df02      	svc	2

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    c26c:	2301      	movs	r3, #1
    c26e:	425b      	negs	r3, r3
    c270:	80c3      	strh	r3, [r0, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    c272:	3307      	adds	r3, #7

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    c274:	0029      	movs	r1, r5
	radio_pdu_node_rx = packet_rx_reserve_get(1);
	LL_ASSERT(radio_pdu_node_rx);

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    c276:	7103      	strb	r3, [r0, #4]

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    c278:	2218      	movs	r2, #24
	radio_pdu_node_rx->hdr.handle = 0xffff;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
    c27a:	300b      	adds	r0, #11
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    c27c:	f7f5 f89c 	bl	13b8 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    c280:	233c      	movs	r3, #60	; 0x3c
    c282:	72e3      	strb	r3, [r4, #11]

	/* enqueue connection complete structure into queue */
	packet_rx_enqueue();
    c284:	f7ff fe50 	bl	bf28 <packet_rx_enqueue>
}
    c288:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    c28a:	46c0      	nop			; (mov r8, r8)
    c28c:	00001355 	.word	0x00001355
    c290:	0000bffd 	.word	0x0000bffd
    c294:	000145b0 	.word	0x000145b0
    c298:	00014570 	.word	0x00014570
    c29c:	000145b5 	.word	0x000145b5
    c2a0:	00014577 	.word	0x00014577
    c2a4:	00015cb7 	.word	0x00015cb7
    c2a8:	00016fd0 	.word	0x00016fd0
    c2ac:	00015d05 	.word	0x00015d05

0000c2b0 <event_active>:
	}
}

static void event_active(u32_t ticks_at_expire, u32_t remainder,
			 u16_t lazy, void *context)
{
    c2b0:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c2b2:	2200      	movs	r2, #0
    c2b4:	4b0a      	ldr	r3, [pc, #40]	; (c2e0 <event_active+0x30>)
    c2b6:	0011      	movs	r1, r2
    c2b8:	0010      	movs	r0, r2
    c2ba:	f7fd fccf 	bl	9c5c <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
    c2be:	2800      	cmp	r0, #0
    c2c0:	d00c      	beq.n	c2dc <event_active+0x2c>
    c2c2:	4b08      	ldr	r3, [pc, #32]	; (c2e4 <event_active+0x34>)
    c2c4:	4a08      	ldr	r2, [pc, #32]	; (c2e8 <event_active+0x38>)
    c2c6:	9301      	str	r3, [sp, #4]
    c2c8:	4b08      	ldr	r3, [pc, #32]	; (c2ec <event_active+0x3c>)
    c2ca:	4909      	ldr	r1, [pc, #36]	; (c2f0 <event_active+0x40>)
    c2cc:	9300      	str	r3, [sp, #0]
    c2ce:	4809      	ldr	r0, [pc, #36]	; (c2f4 <event_active+0x44>)
    c2d0:	4b09      	ldr	r3, [pc, #36]	; (c2f8 <event_active+0x48>)
    c2d2:	f7f5 fa49 	bl	1768 <printk>
    c2d6:	b662      	cpsie	i
    c2d8:	2004      	movs	r0, #4
    c2da:	df02      	svc	2
}
    c2dc:	bd07      	pop	{r0, r1, r2, pc}
    c2de:	46c0      	nop			; (mov r8, r8)
    c2e0:	20000658 	.word	0x20000658
    c2e4:	000145b0 	.word	0x000145b0
    c2e8:	00014570 	.word	0x00014570
    c2ec:	000145b5 	.word	0x000145b5
    c2f0:	00014577 	.word	0x00014577
    c2f4:	00015b04 	.word	0x00015b04
    c2f8:	00017201 	.word	0x00017201

0000c2fc <event_xtal>:
	clock_control_on(_radio.hf_clock, NULL);
}

static void event_xtal(u32_t ticks_at_expire, u32_t remainder,
		       u16_t lazy, void *context)
{
    c2fc:	b507      	push	{r0, r1, r2, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c2fe:	2200      	movs	r2, #0
    c300:	4b0a      	ldr	r3, [pc, #40]	; (c32c <event_xtal+0x30>)
    c302:	0011      	movs	r1, r2
    c304:	0010      	movs	r0, r2
    c306:	f7fd fca9 	bl	9c5c <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
    c30a:	2800      	cmp	r0, #0
    c30c:	d00c      	beq.n	c328 <event_xtal+0x2c>
    c30e:	4b08      	ldr	r3, [pc, #32]	; (c330 <event_xtal+0x34>)
    c310:	4a08      	ldr	r2, [pc, #32]	; (c334 <event_xtal+0x38>)
    c312:	9301      	str	r3, [sp, #4]
    c314:	4b08      	ldr	r3, [pc, #32]	; (c338 <event_xtal+0x3c>)
    c316:	4909      	ldr	r1, [pc, #36]	; (c33c <event_xtal+0x40>)
    c318:	9300      	str	r3, [sp, #0]
    c31a:	4809      	ldr	r0, [pc, #36]	; (c340 <event_xtal+0x44>)
    c31c:	4b09      	ldr	r3, [pc, #36]	; (c344 <event_xtal+0x48>)
    c31e:	f7f5 fa23 	bl	1768 <printk>
    c322:	b662      	cpsie	i
    c324:	2004      	movs	r0, #4
    c326:	df02      	svc	2
}
    c328:	bd07      	pop	{r0, r1, r2, pc}
    c32a:	46c0      	nop			; (mov r8, r8)
    c32c:	20000638 	.word	0x20000638
    c330:	000145b0 	.word	0x000145b0
    c334:	00014570 	.word	0x00014570
    c338:	000145b5 	.word	0x000145b5
    c33c:	00014577 	.word	0x00014577
    c340:	00015b04 	.word	0x00015b04
    c344:	00017265 	.word	0x00017265

0000c348 <mayfly_radio_active>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
		  (_radio.ticker_id_stop == ticker_id));
}

static void mayfly_radio_active(void *params)
{
    c348:	b507      	push	{r0, r1, r2, lr}
    c34a:	4b11      	ldr	r3, [pc, #68]	; (c390 <mayfly_radio_active+0x48>)
	static u8_t s_active;

	if ((u32_t)params) {
    c34c:	2800      	cmp	r0, #0
    c34e:	d006      	beq.n	c35e <mayfly_radio_active+0x16>
		if (s_active++) {
    c350:	781a      	ldrb	r2, [r3, #0]
			return;
		}

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
    c352:	2001      	movs	r0, #1
static void mayfly_radio_active(void *params)
{
	static u8_t s_active;

	if ((u32_t)params) {
		if (s_active++) {
    c354:	1c51      	adds	r1, r2, #1
    c356:	7019      	strb	r1, [r3, #0]
    c358:	2a00      	cmp	r2, #0
    c35a:	d117      	bne.n	c38c <mayfly_radio_active+0x44>
    c35c:	e014      	b.n	c388 <mayfly_radio_active+0x40>

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
	} else {
		LL_ASSERT(s_active);
    c35e:	7818      	ldrb	r0, [r3, #0]
    c360:	2800      	cmp	r0, #0
    c362:	d10c      	bne.n	c37e <mayfly_radio_active+0x36>
    c364:	4b0b      	ldr	r3, [pc, #44]	; (c394 <mayfly_radio_active+0x4c>)
    c366:	4a0c      	ldr	r2, [pc, #48]	; (c398 <mayfly_radio_active+0x50>)
    c368:	9301      	str	r3, [sp, #4]
    c36a:	4b0c      	ldr	r3, [pc, #48]	; (c39c <mayfly_radio_active+0x54>)
    c36c:	490c      	ldr	r1, [pc, #48]	; (c3a0 <mayfly_radio_active+0x58>)
    c36e:	9300      	str	r3, [sp, #0]
    c370:	480c      	ldr	r0, [pc, #48]	; (c3a4 <mayfly_radio_active+0x5c>)
    c372:	4b0d      	ldr	r3, [pc, #52]	; (c3a8 <mayfly_radio_active+0x60>)
    c374:	f7f5 f9f8 	bl	1768 <printk>
    c378:	b662      	cpsie	i
    c37a:	2004      	movs	r0, #4
    c37c:	df02      	svc	2

		if (--s_active) {
    c37e:	3801      	subs	r0, #1
    c380:	b2c0      	uxtb	r0, r0
    c382:	7018      	strb	r0, [r3, #0]
    c384:	2800      	cmp	r0, #0
    c386:	d101      	bne.n	c38c <mayfly_radio_active+0x44>
			return;
		}

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
    c388:	f005 fadc 	bl	11944 <radio_active_callback>
	}
}
    c38c:	bd07      	pop	{r0, r1, r2, pc}
    c38e:	46c0      	nop			; (mov r8, r8)
    c390:	2000122c 	.word	0x2000122c
    c394:	000145b0 	.word	0x000145b0
    c398:	00014570 	.word	0x00014570
    c39c:	000145b5 	.word	0x000145b5
    c3a0:	00014577 	.word	0x00014577
    c3a4:	00015d38 	.word	0x00015d38
    c3a8:	00016fab 	.word	0x00016fab

0000c3ac <mayfly_radio_inactive>:
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
}

static void mayfly_radio_inactive(void *params)
{
    c3ac:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	mayfly_radio_active(0);
    c3ae:	2000      	movs	r0, #0
    c3b0:	f7ff ffca 	bl	c348 <mayfly_radio_active>

	DEBUG_RADIO_CLOSE(0);
}
    c3b4:	bd10      	pop	{r4, pc}
	...

0000c3b8 <mayfly_radio_stop>:
	}
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
    c3b8:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    c3ba:	b2c0      	uxtb	r0, r0
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    c3bc:	1f03      	subs	r3, r0, #4
    c3be:	2b01      	cmp	r3, #1
    c3c0:	d90c      	bls.n	c3dc <mayfly_radio_stop+0x24>
    c3c2:	4b0e      	ldr	r3, [pc, #56]	; (c3fc <mayfly_radio_stop+0x44>)
    c3c4:	4a0e      	ldr	r2, [pc, #56]	; (c400 <mayfly_radio_stop+0x48>)
    c3c6:	9301      	str	r3, [sp, #4]
    c3c8:	4b0e      	ldr	r3, [pc, #56]	; (c404 <mayfly_radio_stop+0x4c>)
    c3ca:	490f      	ldr	r1, [pc, #60]	; (c408 <mayfly_radio_stop+0x50>)
    c3cc:	9300      	str	r3, [sp, #0]
    c3ce:	480f      	ldr	r0, [pc, #60]	; (c40c <mayfly_radio_stop+0x54>)
    c3d0:	4b0f      	ldr	r3, [pc, #60]	; (c410 <mayfly_radio_stop+0x58>)
    c3d2:	f7f5 f9c9 	bl	1768 <printk>
    c3d6:	b662      	cpsie	i
    c3d8:	2004      	movs	r0, #4
    c3da:	df02      	svc	2

	radio_used = ((_radio.state != STATE_NONE) &&
    c3dc:	4a0d      	ldr	r2, [pc, #52]	; (c414 <mayfly_radio_stop+0x5c>)
    c3de:	7c13      	ldrb	r3, [r2, #16]
		      (_radio.state != STATE_STOP) &&
    c3e0:	2b00      	cmp	r3, #0
    c3e2:	d006      	beq.n	c3f2 <mayfly_radio_stop+0x3a>
	enum state state = (enum state)((u32_t)params & 0xff);
	u32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
    c3e4:	3b04      	subs	r3, #4
    c3e6:	2b01      	cmp	r3, #1
    c3e8:	d903      	bls.n	c3f2 <mayfly_radio_stop+0x3a>
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
		if (radio_used) {
			_radio.state = state;
    c3ea:	7410      	strb	r0, [r2, #16]
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
    c3ec:	f7fd ff2e 	bl	a24c <radio_disable>
	}
}
    c3f0:	e003      	b.n	c3fa <mayfly_radio_stop+0x42>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
    c3f2:	f7fd ff4f 	bl	a294 <radio_is_idle>
    c3f6:	2800      	cmp	r0, #0
    c3f8:	d0f8      	beq.n	c3ec <mayfly_radio_stop+0x34>
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
	}
}
    c3fa:	bd07      	pop	{r0, r1, r2, pc}
    c3fc:	000145b0 	.word	0x000145b0
    c400:	00014570 	.word	0x00014570
    c404:	000145b5 	.word	0x000145b5
    c408:	00014577 	.word	0x00014577
    c40c:	00015d62 	.word	0x00015d62
    c410:	00017196 	.word	0x00017196
    c414:	20001254 	.word	0x20001254

0000c418 <pdu_node_tx_release>:
	}
}

static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
    c418:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u8_t last;

	last = _radio.packet_release_last + 1;
    c41a:	24fa      	movs	r4, #250	; 0xfa
	if (last == _radio.packet_tx_count) {
    c41c:	25f8      	movs	r5, #248	; 0xf8
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    c41e:	4b15      	ldr	r3, [pc, #84]	; (c474 <pdu_node_tx_release+0x5c>)
    c420:	0064      	lsls	r4, r4, #1
    c422:	5d1a      	ldrb	r2, [r3, r4]
	if (last == _radio.packet_tx_count) {
    c424:	006d      	lsls	r5, r5, #1
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    c426:	3201      	adds	r2, #1
	if (last == _radio.packet_tx_count) {
    c428:	5d5d      	ldrb	r5, [r3, r5]
static void pdu_node_tx_release(u16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	u8_t last;

	last = _radio.packet_release_last + 1;
    c42a:	b2d2      	uxtb	r2, r2
	if (last == _radio.packet_tx_count) {
    c42c:	4295      	cmp	r5, r2
    c42e:	d100      	bne.n	c432 <pdu_node_tx_release+0x1a>
		last = 0;
    c430:	2200      	movs	r2, #0
	}

	LL_ASSERT(last != _radio.packet_release_first);
    c432:	25f4      	movs	r5, #244	; 0xf4
    c434:	35ff      	adds	r5, #255	; 0xff
    c436:	5d5d      	ldrb	r5, [r3, r5]
    c438:	4295      	cmp	r5, r2
    c43a:	d10c      	bne.n	c456 <pdu_node_tx_release+0x3e>
    c43c:	4b0e      	ldr	r3, [pc, #56]	; (c478 <pdu_node_tx_release+0x60>)
    c43e:	4a0f      	ldr	r2, [pc, #60]	; (c47c <pdu_node_tx_release+0x64>)
    c440:	9301      	str	r3, [sp, #4]
    c442:	4b0f      	ldr	r3, [pc, #60]	; (c480 <pdu_node_tx_release+0x68>)
    c444:	490f      	ldr	r1, [pc, #60]	; (c484 <pdu_node_tx_release+0x6c>)
    c446:	9300      	str	r3, [sp, #0]
    c448:	480f      	ldr	r0, [pc, #60]	; (c488 <pdu_node_tx_release+0x70>)
    c44a:	4b10      	ldr	r3, [pc, #64]	; (c48c <pdu_node_tx_release+0x74>)
    c44c:	f7f5 f98c 	bl	1768 <printk>
    c450:	b662      	cpsie	i
    c452:	2004      	movs	r0, #4
    c454:	df02      	svc	2

	/* Enqueue app mem for release */
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    c456:	25f6      	movs	r5, #246	; 0xf6
    c458:	006d      	lsls	r5, r5, #1
    c45a:	595e      	ldr	r6, [r3, r5]
    c45c:	5d1d      	ldrb	r5, [r3, r4]
    c45e:	00ed      	lsls	r5, r5, #3
    c460:	53a8      	strh	r0, [r5, r6]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    c462:	5d18      	ldrb	r0, [r3, r4]
    c464:	00c0      	lsls	r0, r0, #3
    c466:	1830      	adds	r0, r6, r0
    c468:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
    c46a:	551a      	strb	r2, [r3, r4]
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    c46c:	f005 fa6c 	bl	11948 <radio_event_callback>
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
	_radio.packet_release_last = last;

	/* callback to trigger application action */
	packet_rx_callback();
}
    c470:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    c472:	46c0      	nop			; (mov r8, r8)
    c474:	20001254 	.word	0x20001254
    c478:	000145b0 	.word	0x000145b0
    c47c:	00014570 	.word	0x00014570
    c480:	000145b5 	.word	0x000145b5
    c484:	00014577 	.word	0x00014577
    c488:	00015db3 	.word	0x00015db3
    c48c:	00016fdf 	.word	0x00016fdf

0000c490 <packet_tx_enqueue>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void packet_tx_enqueue(u8_t max)
{
    c490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c492:	9000      	str	r0, [sp, #0]
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    c494:	9b00      	ldr	r3, [sp, #0]
    c496:	2b00      	cmp	r3, #0
    c498:	d045      	beq.n	c526 <packet_tx_enqueue+0x96>
    c49a:	27f2      	movs	r7, #242	; 0xf2
    c49c:	22f9      	movs	r2, #249	; 0xf9
    c49e:	4c22      	ldr	r4, [pc, #136]	; (c528 <packet_tx_enqueue+0x98>)
    c4a0:	37ff      	adds	r7, #255	; 0xff
    c4a2:	0052      	lsls	r2, r2, #1
    c4a4:	5de3      	ldrb	r3, [r4, r7]
    c4a6:	5ca2      	ldrb	r2, [r4, r2]
    c4a8:	429a      	cmp	r2, r3
    c4aa:	d03c      	beq.n	c526 <packet_tx_enqueue+0x96>
		struct pdu_data_q_tx *pdu_data_q_tx;
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    c4ac:	23f4      	movs	r3, #244	; 0xf4
    c4ae:	5de6      	ldrb	r6, [r4, r7]
    c4b0:	005b      	lsls	r3, r3, #1
    c4b2:	58e3      	ldr	r3, [r4, r3]
    c4b4:	00f6      	lsls	r6, r6, #3
    c4b6:	199e      	adds	r6, r3, r6
    c4b8:	9301      	str	r3, [sp, #4]
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    c4ba:	2300      	movs	r3, #0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    c4bc:	218c      	movs	r1, #140	; 0x8c
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
    c4be:	6875      	ldr	r5, [r6, #4]
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    c4c0:	8832      	ldrh	r2, [r6, #0]
		struct connection *conn;
		u8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    c4c2:	602b      	str	r3, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    c4c4:	3385      	adds	r3, #133	; 0x85
    c4c6:	33ff      	adds	r3, #255	; 0xff
    c4c8:	58e0      	ldr	r0, [r4, r3]
    c4ca:	0049      	lsls	r1, r1, #1
    c4cc:	f7fd fd05 	bl	9eda <mem_get>
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
    c4d0:	8833      	ldrh	r3, [r6, #0]
    c4d2:	8c02      	ldrh	r2, [r0, #32]
    c4d4:	429a      	cmp	r2, r3
    c4d6:	d10f      	bne.n	c4f8 <packet_tx_enqueue+0x68>
			if (conn->pkt_tx_data == 0) {
    c4d8:	30fc      	adds	r0, #252	; 0xfc
    c4da:	6903      	ldr	r3, [r0, #16]
    c4dc:	2b00      	cmp	r3, #0
    c4de:	d105      	bne.n	c4ec <packet_tx_enqueue+0x5c>
				conn->pkt_tx_data = node_tx_new;

				if (conn->pkt_tx_head == 0) {
    c4e0:	6883      	ldr	r3, [r0, #8]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
			if (conn->pkt_tx_data == 0) {
				conn->pkt_tx_data = node_tx_new;
    c4e2:	6105      	str	r5, [r0, #16]

				if (conn->pkt_tx_head == 0) {
    c4e4:	2b00      	cmp	r3, #0
    c4e6:	d101      	bne.n	c4ec <packet_tx_enqueue+0x5c>
					conn->pkt_tx_head = node_tx_new;
    c4e8:	6085      	str	r5, [r0, #8]
					conn->pkt_tx_last = NULL;
    c4ea:	6143      	str	r3, [r0, #20]
				}
			}

			if (conn->pkt_tx_last) {
    c4ec:	6943      	ldr	r3, [r0, #20]
    c4ee:	2b00      	cmp	r3, #0
    c4f0:	d000      	beq.n	c4f4 <packet_tx_enqueue+0x64>
				conn->pkt_tx_last->next = node_tx_new;
    c4f2:	601d      	str	r5, [r3, #0]
			}

			conn->pkt_tx_last = node_tx_new;
    c4f4:	6145      	str	r5, [r0, #20]
    c4f6:	e007      	b.n	c508 <packet_tx_enqueue+0x78>
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c4f8:	2203      	movs	r2, #3
    c4fa:	792b      	ldrb	r3, [r5, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    c4fc:	0029      	movs	r1, r5
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c4fe:	4393      	bics	r3, r2
    c500:	712b      	strb	r3, [r5, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    c502:	8830      	ldrh	r0, [r6, #0]
    c504:	f7ff ff88 	bl	c418 <pdu_node_tx_release>
		}

		first = _radio.packet_tx_first + 1;
		if (first == _radio.packet_tx_count) {
    c508:	22f8      	movs	r2, #248	; 0xf8
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    c50a:	5de3      	ldrb	r3, [r4, r7]
		if (first == _radio.packet_tx_count) {
    c50c:	0052      	lsls	r2, r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    c50e:	3301      	adds	r3, #1
		if (first == _radio.packet_tx_count) {
    c510:	5ca2      	ldrb	r2, [r4, r2]
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    c512:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
    c514:	429a      	cmp	r2, r3
    c516:	d100      	bne.n	c51a <packet_tx_enqueue+0x8a>
			first = 0;
    c518:	2300      	movs	r3, #0
		}
		_radio.packet_tx_first = first;
    c51a:	55e3      	strb	r3, [r4, r7]
    c51c:	9f00      	ldr	r7, [sp, #0]
    c51e:	3f01      	subs	r7, #1
    c520:	b2fb      	uxtb	r3, r7
    c522:	9300      	str	r3, [sp, #0]
    c524:	e7b6      	b.n	c494 <packet_tx_enqueue+0x4>
	}
}
    c526:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    c528:	20001254 	.word	0x20001254

0000c52c <event_common_prepare>:
				 u32_t *ticks_active_to_start,
				 u32_t ticks_preempt_to_start,
				 u8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    c52c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c52e:	0016      	movs	r6, r2
    c530:	b08f      	sub	sp, #60	; 0x3c
    c532:	930c      	str	r3, [sp, #48]	; 0x30
    c534:	ab14      	add	r3, sp, #80	; 0x50
    c536:	cb04      	ldmia	r3!, {r2}
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    c538:	6834      	ldr	r4, [r6, #0]
				 u32_t *ticks_active_to_start,
				 u32_t ticks_preempt_to_start,
				 u8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    c53a:	781b      	ldrb	r3, [r3, #0]
    c53c:	900b      	str	r0, [sp, #44]	; 0x2c
    c53e:	930d      	str	r3, [sp, #52]	; 0x34
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    c540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				 u32_t *ticks_active_to_start,
				 u32_t ticks_preempt_to_start,
				 u8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    c542:	000d      	movs	r5, r1
	u32_t ticker_status;
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    c544:	681f      	ldr	r7, [r3, #0]
	u32_t ticks_to_start;

	/* in case this event is short prepare, xtal to start duration will be
	 * active to start duration.
	 */
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
    c546:	2c00      	cmp	r4, #0
    c548:	da03      	bge.n	c552 <event_common_prepare+0x26>
		_ticks_xtal_to_start =
    c54a:	003c      	movs	r4, r7
    c54c:	4297      	cmp	r7, r2
    c54e:	d200      	bcs.n	c552 <event_common_prepare+0x26>
    c550:	0014      	movs	r4, r2

	/* decide whether its XTAL start or active event that is the current
	 * execution context and accordingly setup the ticker for the other
	 * event (XTAL or active event). These are oneshot ticker.
	 */
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    c552:	42bc      	cmp	r4, r7
    c554:	d919      	bls.n	c58a <event_common_prepare+0x5e>

		/* XTAL is before Active */
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
		ticks_to_start = _ticks_xtal_to_start;

		ticker_status =
    c556:	2000      	movs	r0, #0
    c558:	4b56      	ldr	r3, [pc, #344]	; (c6b4 <event_common_prepare+0x188>)
    c55a:	9006      	str	r0, [sp, #24]
    c55c:	9308      	str	r3, [sp, #32]
    c55e:	4b56      	ldr	r3, [pc, #344]	; (c6b8 <event_common_prepare+0x18c>)
    c560:	9004      	str	r0, [sp, #16]
    c562:	9307      	str	r3, [sp, #28]
    c564:	4b55      	ldr	r3, [pc, #340]	; (c6bc <event_common_prepare+0x190>)
    c566:	9003      	str	r0, [sp, #12]
    c568:	9305      	str	r3, [sp, #20]
    c56a:	1be3      	subs	r3, r4, r7
    c56c:	9300      	str	r3, [sp, #0]
    c56e:	9002      	str	r0, [sp, #8]
    c570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c572:	9001      	str	r0, [sp, #4]
    c574:	2201      	movs	r2, #1
    c576:	0001      	movs	r1, r0
    c578:	f7fe ff46 	bl	b408 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_active, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_active, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c57c:	2302      	movs	r3, #2
    c57e:	4398      	bics	r0, r3
    c580:	d172      	bne.n	c668 <event_common_prepare+0x13c>
			  (ticker_status == TICKER_STATUS_BUSY));

		event_xtal(0, 0, 0, NULL);
    c582:	0003      	movs	r3, r0
    c584:	0002      	movs	r2, r0
    c586:	0001      	movs	r1, r0
    c588:	e029      	b.n	c5de <event_common_prepare+0xb2>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    c58a:	42bc      	cmp	r4, r7
    c58c:	d21d      	bcs.n	c5ca <event_common_prepare+0x9e>

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);
    c58e:	2300      	movs	r3, #0
    c590:	001a      	movs	r2, r3
    c592:	0019      	movs	r1, r3
    c594:	0018      	movs	r0, r3
    c596:	f7ff fe8b 	bl	c2b0 <event_active>

		ticker_status =
    c59a:	2000      	movs	r0, #0
    c59c:	4b48      	ldr	r3, [pc, #288]	; (c6c0 <event_common_prepare+0x194>)
		event_xtal(0, 0, 0, NULL);
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
		u32_t ticks_to_xtal;

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    c59e:	1b3c      	subs	r4, r7, r4
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, NULL);

		ticker_status =
    c5a0:	9308      	str	r3, [sp, #32]
    c5a2:	4b45      	ldr	r3, [pc, #276]	; (c6b8 <event_common_prepare+0x18c>)
    c5a4:	9006      	str	r0, [sp, #24]
    c5a6:	9307      	str	r3, [sp, #28]
    c5a8:	4b46      	ldr	r3, [pc, #280]	; (c6c4 <event_common_prepare+0x198>)
    c5aa:	9004      	str	r0, [sp, #16]
    c5ac:	9305      	str	r3, [sp, #20]
    c5ae:	9003      	str	r0, [sp, #12]
    c5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5b2:	9002      	str	r0, [sp, #8]
    c5b4:	9001      	str	r0, [sp, #4]
    c5b6:	9400      	str	r4, [sp, #0]
    c5b8:	2201      	movs	r2, #1
    c5ba:	0001      	movs	r1, r0
    c5bc:	f7fe ff24 	bl	b408 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_xtal, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_xtal, NULL,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c5c0:	2302      	movs	r3, #2
    c5c2:	4398      	bics	r0, r3
    c5c4:	d150      	bne.n	c668 <event_common_prepare+0x13c>
    c5c6:	003c      	movs	r4, r7
    c5c8:	e00b      	b.n	c5e2 <event_common_prepare+0xb6>
		/* Active and XTAL are at the same time,
		 * no ticker required to be setup.
		 */
		ticks_to_start = _ticks_xtal_to_start;

		event_active(0, 0, 0, NULL);
    c5ca:	2300      	movs	r3, #0
    c5cc:	001a      	movs	r2, r3
    c5ce:	0019      	movs	r1, r3
    c5d0:	0018      	movs	r0, r3
    c5d2:	f7ff fe6d 	bl	c2b0 <event_active>
		event_xtal(0, 0, 0, NULL);
    c5d6:	2300      	movs	r3, #0
    c5d8:	001a      	movs	r2, r3
    c5da:	0019      	movs	r1, r3
    c5dc:	0018      	movs	r0, r3
    c5de:	f7ff fe8d 	bl	c2fc <event_xtal>

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;

	/* setup the start ticker */
	ticker_status =
    c5e2:	2000      	movs	r0, #0
		event_active(0, 0, 0, NULL);
		event_xtal(0, 0, 0, NULL);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    c5e4:	4b38      	ldr	r3, [pc, #224]	; (c6c8 <event_common_prepare+0x19c>)

	/* setup the start ticker */
	ticker_status =
    c5e6:	0002      	movs	r2, r0
		event_active(0, 0, 0, NULL);
		event_xtal(0, 0, 0, NULL);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    c5e8:	609d      	str	r5, [r3, #8]

	/* setup the start ticker */
	ticker_status =
    c5ea:	4b38      	ldr	r3, [pc, #224]	; (c6cc <event_common_prepare+0x1a0>)
    c5ec:	4d32      	ldr	r5, [pc, #200]	; (c6b8 <event_common_prepare+0x18c>)
    c5ee:	9308      	str	r3, [sp, #32]
    c5f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c5f2:	9507      	str	r5, [sp, #28]
    c5f4:	9306      	str	r3, [sp, #24]
    c5f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c5f8:	9004      	str	r0, [sp, #16]
    c5fa:	9305      	str	r3, [sp, #20]
    c5fc:	9003      	str	r0, [sp, #12]
    c5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c600:	9002      	str	r0, [sp, #8]
    c602:	9001      	str	r0, [sp, #4]
    c604:	9400      	str	r4, [sp, #0]
    c606:	0001      	movs	r1, r0
    c608:	f7fe fefe 	bl	b408 <ticker_start>
			     ticks_at_expire, ticks_to_start,
			     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
			     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
			     ticker_timeout_fp, context, ticker_success_assert,
			     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c60c:	2302      	movs	r3, #2
    c60e:	4398      	bics	r0, r3
    c610:	d12a      	bne.n	c668 <event_common_prepare+0x13c>
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#else
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    c612:	2305      	movs	r3, #5
    c614:	0002      	movs	r2, r0
    c616:	0001      	movs	r1, r0
    c618:	f7ff fdd2 	bl	c1c0 <event_stop>
#endif
#undef RADIO_DEFERRED_PREEMPT

	/** Handle change in _ticks_active_to_start */
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    c61c:	2380      	movs	r3, #128	; 0x80
    c61e:	4a2a      	ldr	r2, [pc, #168]	; (c6c8 <event_common_prepare+0x19c>)
    c620:	009b      	lsls	r3, r3, #2
    c622:	58d2      	ldr	r2, [r2, r3]
    c624:	4297      	cmp	r7, r2
    c626:	d028      	beq.n	c67a <event_common_prepare+0x14e>
		u32_t ticks_to_start_new =
    c628:	6833      	ldr	r3, [r6, #0]
    c62a:	005b      	lsls	r3, r3, #1
    c62c:	085b      	lsrs	r3, r3, #1
    c62e:	4293      	cmp	r3, r2
    c630:	d200      	bcs.n	c634 <event_common_prepare+0x108>
    c632:	0013      	movs	r3, r2
			((_radio.ticks_active_to_start <
			  (*ticks_xtal_to_start & ~(((u32_t)1 << 31)))) ?
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;
    c634:	990c      	ldr	r1, [sp, #48]	; 0x30
    c636:	600a      	str	r2, [r1, #0]

		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
    c638:	6832      	ldr	r2, [r6, #0]
    c63a:	2a00      	cmp	r2, #0
    c63c:	da02      	bge.n	c644 <event_common_prepare+0x118>
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
    c63e:	0052      	lsls	r2, r2, #1
    c640:	0852      	lsrs	r2, r2, #1
    c642:	6032      	str	r2, [r6, #0]
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    c644:	2000      	movs	r0, #0
    c646:	4922      	ldr	r1, [pc, #136]	; (c6d0 <event_common_prepare+0x1a4>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c648:	b29a      	uxth	r2, r3
    c64a:	b2a3      	uxth	r3, r4
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    c64c:	9106      	str	r1, [sp, #24]
    c64e:	9302      	str	r3, [sp, #8]
    c650:	9201      	str	r2, [sp, #4]
    c652:	9200      	str	r2, [sp, #0]
    c654:	9505      	str	r5, [sp, #20]
    c656:	9004      	str	r0, [sp, #16]
    c658:	9003      	str	r0, [sp, #12]
    c65a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c65c:	0001      	movs	r1, r0
    c65e:	f7fe ff1b 	bl	b498 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      RADIO_TICKER_USER_ID_WORKER, ticker_id,
				      ticks_to_start, ticks_to_start_new,
				      ticks_to_start_new, ticks_to_start, 0, 0,
				      ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c662:	2302      	movs	r3, #2
    c664:	4398      	bics	r0, r3
    c666:	d008      	beq.n	c67a <event_common_prepare+0x14e>
    c668:	4b1a      	ldr	r3, [pc, #104]	; (c6d4 <event_common_prepare+0x1a8>)
    c66a:	4a1b      	ldr	r2, [pc, #108]	; (c6d8 <event_common_prepare+0x1ac>)
    c66c:	9301      	str	r3, [sp, #4]
    c66e:	4b1b      	ldr	r3, [pc, #108]	; (c6dc <event_common_prepare+0x1b0>)
    c670:	491b      	ldr	r1, [pc, #108]	; (c6e0 <event_common_prepare+0x1b4>)
    c672:	9300      	str	r3, [sp, #0]
    c674:	481b      	ldr	r0, [pc, #108]	; (c6e4 <event_common_prepare+0x1b8>)
    c676:	4b1c      	ldr	r3, [pc, #112]	; (c6e8 <event_common_prepare+0x1bc>)
    c678:	e014      	b.n	c6a4 <event_common_prepare+0x178>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* route all packets queued for connections */
	packet_tx_enqueue(0xFF);
    c67a:	20ff      	movs	r0, #255	; 0xff
    c67c:	f7ff ff08 	bl	c490 <packet_tx_enqueue>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c682:	4b1a      	ldr	r3, [pc, #104]	; (c6ec <event_common_prepare+0x1c0>)

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c684:	2000      	movs	r0, #0
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, NULL,
			mayfly_xtal_stop_calc};
		u32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    c686:	609a      	str	r2, [r3, #8]

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    c688:	2201      	movs	r2, #1
    c68a:	0011      	movs	r1, r2
    c68c:	f7fd fae6 	bl	9c5c <mayfly_enqueue>
					RADIO_TICKER_USER_ID_JOB, 1,
					&s_mfy_xtal_stop_calc);
		LL_ASSERT(!retval);
    c690:	2800      	cmp	r0, #0
    c692:	d00c      	beq.n	c6ae <event_common_prepare+0x182>
    c694:	4b0f      	ldr	r3, [pc, #60]	; (c6d4 <event_common_prepare+0x1a8>)
    c696:	4a10      	ldr	r2, [pc, #64]	; (c6d8 <event_common_prepare+0x1ac>)
    c698:	9301      	str	r3, [sp, #4]
    c69a:	4b10      	ldr	r3, [pc, #64]	; (c6dc <event_common_prepare+0x1b0>)
    c69c:	4910      	ldr	r1, [pc, #64]	; (c6e0 <event_common_prepare+0x1b4>)
    c69e:	9300      	str	r3, [sp, #0]
    c6a0:	4813      	ldr	r0, [pc, #76]	; (c6f0 <event_common_prepare+0x1c4>)
    c6a2:	4b11      	ldr	r3, [pc, #68]	; (c6e8 <event_common_prepare+0x1bc>)
    c6a4:	f7f5 f860 	bl	1768 <printk>
    c6a8:	b662      	cpsie	i
    c6aa:	2004      	movs	r0, #4
    c6ac:	df02      	svc	2
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED */
}
    c6ae:	b00f      	add	sp, #60	; 0x3c
    c6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6b2:	46c0      	nop			; (mov r8, r8)
    c6b4:	00001110 	.word	0x00001110
    c6b8:	0000bffd 	.word	0x0000bffd
    c6bc:	0000c2b1 	.word	0x0000c2b1
    c6c0:	00001125 	.word	0x00001125
    c6c4:	0000c2fd 	.word	0x0000c2fd
    c6c8:	20001254 	.word	0x20001254
    c6cc:	0000113d 	.word	0x0000113d
    c6d0:	0000116a 	.word	0x0000116a
    c6d4:	000145b0 	.word	0x000145b0
    c6d8:	00014570 	.word	0x00014570
    c6dc:	000145b5 	.word	0x000145b5
    c6e0:	00014577 	.word	0x00014577
    c6e4:	00015cb7 	.word	0x00015cb7
    c6e8:	00016f37 	.word	0x00016f37
    c6ec:	20000618 	.word	0x20000618
    c6f0:	00015b04 	.word	0x00015b04

0000c6f4 <connection_release>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    c6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c6f6:	2201      	movs	r2, #1
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    c6f8:	0005      	movs	r5, r0
	u32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    c6fa:	0011      	movs	r1, r2
    c6fc:	2000      	movs	r0, #0
    c6fe:	f7fd fa8d 	bl	9c1c <mayfly_enable>
	/** @todo correctly stop tickers ensuring crystal and radio active are
	 * placed in right states
	 */

	/* Stop Master/Slave role ticker */
	ticker_status =
    c702:	2100      	movs	r1, #0
    c704:	8c2a      	ldrh	r2, [r5, #32]
    c706:	4f39      	ldr	r7, [pc, #228]	; (c7ec <connection_release+0xf8>)
    c708:	4b39      	ldr	r3, [pc, #228]	; (c7f0 <connection_release+0xfc>)
    c70a:	3207      	adds	r2, #7
    c70c:	9300      	str	r3, [sp, #0]
    c70e:	b2d2      	uxtb	r2, r2
    c710:	003b      	movs	r3, r7
    c712:	0008      	movs	r0, r1
    c714:	f7fe ff10 	bl	b538 <ticker_stop>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c718:	2402      	movs	r4, #2
    c71a:	43a0      	bics	r0, r4
    c71c:	d11d      	bne.n	c75a <connection_release+0x66>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    c71e:	4b35      	ldr	r3, [pc, #212]	; (c7f4 <connection_release+0x100>)
    c720:	7c1a      	ldrb	r2, [r3, #16]
    c722:	001e      	movs	r6, r3
    c724:	2a05      	cmp	r2, #5
    c726:	d001      	beq.n	c72c <connection_release+0x38>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c728:	2703      	movs	r7, #3
    c72a:	e02f      	b.n	c78c <connection_release+0x98>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    c72c:	7b1a      	ldrb	r2, [r3, #12]
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    c72e:	8c2b      	ldrh	r3, [r5, #32]
    c730:	3307      	adds	r3, #7
    c732:	429a      	cmp	r2, r3
    c734:	d1f8      	bne.n	c728 <connection_release+0x34>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
					  conn->handle))) {
		ticker_status =
    c736:	4b30      	ldr	r3, [pc, #192]	; (c7f8 <connection_release+0x104>)
    c738:	2201      	movs	r2, #1
    c73a:	9300      	str	r3, [sp, #0]
    c73c:	0001      	movs	r1, r0
    c73e:	003b      	movs	r3, r7
    c740:	f7fe fefa 	bl	b538 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_MARKER_0,
				    ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c744:	43a0      	bics	r0, r4
    c746:	d108      	bne.n	c75a <connection_release+0x66>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    c748:	4b2c      	ldr	r3, [pc, #176]	; (c7fc <connection_release+0x108>)
    c74a:	0002      	movs	r2, r0
    c74c:	9300      	str	r3, [sp, #0]
    c74e:	0001      	movs	r1, r0
    c750:	003b      	movs	r3, r7
    c752:	f7fe fef1 	bl	b538 <ticker_stop>
		    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_ID_EVENT,
				ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c756:	43a0      	bics	r0, r4
    c758:	d0e6      	beq.n	c728 <connection_release+0x34>
    c75a:	4b29      	ldr	r3, [pc, #164]	; (c800 <connection_release+0x10c>)
    c75c:	4a29      	ldr	r2, [pc, #164]	; (c804 <connection_release+0x110>)
    c75e:	9301      	str	r3, [sp, #4]
    c760:	4b29      	ldr	r3, [pc, #164]	; (c808 <connection_release+0x114>)
    c762:	492a      	ldr	r1, [pc, #168]	; (c80c <connection_release+0x118>)
    c764:	9300      	str	r3, [sp, #0]
    c766:	482a      	ldr	r0, [pc, #168]	; (c810 <connection_release+0x11c>)
    c768:	4b2a      	ldr	r3, [pc, #168]	; (c814 <connection_release+0x120>)
    c76a:	f7f4 fffd 	bl	1768 <printk>
    c76e:	b662      	cpsie	i
    c770:	2004      	movs	r0, #4
    c772:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    c774:	6923      	ldr	r3, [r4, #16]
    c776:	4299      	cmp	r1, r3
    c778:	d01a      	beq.n	c7b0 <connection_release+0xbc>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c77a:	790b      	ldrb	r3, [r1, #4]
    c77c:	43bb      	bics	r3, r7
    c77e:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c780:	68a3      	ldr	r3, [r4, #8]
    c782:	681b      	ldr	r3, [r3, #0]
    c784:	60a3      	str	r3, [r4, #8]

		pdu_node_tx_release(conn->handle, node_tx);
    c786:	8c28      	ldrh	r0, [r5, #32]
    c788:	f7ff fe46 	bl	c418 <pdu_node_tx_release>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    c78c:	002c      	movs	r4, r5
    c78e:	34fc      	adds	r4, #252	; 0xfc
    c790:	68a1      	ldr	r1, [r4, #8]
    c792:	68e3      	ldr	r3, [r4, #12]
    c794:	4299      	cmp	r1, r3
    c796:	d1ed      	bne.n	c774 <connection_release+0x80>
    c798:	e00a      	b.n	c7b0 <connection_release+0xbc>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    c79a:	6923      	ldr	r3, [r4, #16]
    c79c:	4298      	cmp	r0, r3
    c79e:	d00a      	beq.n	c7b6 <connection_release+0xc2>

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    c7a0:	0031      	movs	r1, r6
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c7a2:	6803      	ldr	r3, [r0, #0]
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    c7a4:	31d9      	adds	r1, #217	; 0xd9
	while ((conn->pkt_tx_head) &&
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c7a6:	60a3      	str	r3, [r4, #8]
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    c7a8:	60e3      	str	r3, [r4, #12]

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    c7aa:	31ff      	adds	r1, #255	; 0xff
    c7ac:	f7fd fb77 	bl	9e9e <mem_release>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    c7b0:	68a0      	ldr	r0, [r4, #8]
    c7b2:	2800      	cmp	r0, #0
    c7b4:	d1f1      	bne.n	c79a <connection_release+0xa6>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    c7b6:	2300      	movs	r3, #0
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c7b8:	2703      	movs	r7, #3
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    c7ba:	60e3      	str	r3, [r4, #12]

	/* flush and release, rest of data */
	while (conn->pkt_tx_head) {
    c7bc:	68a1      	ldr	r1, [r4, #8]
    c7be:	2900      	cmp	r1, #0
    c7c0:	d00a      	beq.n	c7d8 <connection_release+0xe4>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    c7c2:	790b      	ldrb	r3, [r1, #4]
    c7c4:	43bb      	bics	r3, r7
    c7c6:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    c7c8:	68a3      	ldr	r3, [r4, #8]
    c7ca:	681b      	ldr	r3, [r3, #0]
    c7cc:	60a3      	str	r3, [r4, #8]
		conn->pkt_tx_data = conn->pkt_tx_head;
    c7ce:	6123      	str	r3, [r4, #16]

		pdu_node_tx_release(conn->handle, node_tx);
    c7d0:	8c28      	ldrh	r0, [r5, #32]
    c7d2:	f7ff fe21 	bl	c418 <pdu_node_tx_release>
    c7d6:	e7f1      	b.n	c7bc <connection_release+0xc8>
	}

	conn->handle = 0xffff;
    c7d8:	2301      	movs	r3, #1
    c7da:	425b      	negs	r3, r3
    c7dc:	842b      	strh	r3, [r5, #32]

	/* reset mutex */
	if (_radio.conn_upd == conn) {
    c7de:	2381      	movs	r3, #129	; 0x81
    c7e0:	009b      	lsls	r3, r3, #2
    c7e2:	58f2      	ldr	r2, [r6, r3]
    c7e4:	4295      	cmp	r5, r2
    c7e6:	d100      	bne.n	c7ea <connection_release+0xf6>
		_radio.conn_upd = NULL;
    c7e8:	50f1      	str	r1, [r6, r3]
	}
}
    c7ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    c7ec:	0000bffd 	.word	0x0000bffd
    c7f0:	00001c78 	.word	0x00001c78
    c7f4:	20001254 	.word	0x20001254
    c7f8:	00001c84 	.word	0x00001c84
    c7fc:	00001c8b 	.word	0x00001c8b
    c800:	000145b0 	.word	0x000145b0
    c804:	00014570 	.word	0x00014570
    c808:	000145b5 	.word	0x000145b5
    c80c:	00014577 	.word	0x00014577
    c810:	00015cb7 	.word	0x00015cb7
    c814:	00017157 	.word	0x00017157

0000c818 <chan_set>:
}
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
    c818:	b513      	push	{r0, r1, r4, lr}
    c81a:	0004      	movs	r4, r0
	switch (chan) {
    c81c:	2826      	cmp	r0, #38	; 0x26
    c81e:	d005      	beq.n	c82c <chan_set+0x14>
    c820:	2827      	cmp	r0, #39	; 0x27
    c822:	d005      	beq.n	c830 <chan_set+0x18>
	case 37:
		radio_freq_chan_set(2);
    c824:	2002      	movs	r0, #2
#endif /* RADIO_UNIT_TEST */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

static void chan_set(u32_t chan)
{
	switch (chan) {
    c826:	2c25      	cmp	r4, #37	; 0x25
    c828:	d104      	bne.n	c834 <chan_set+0x1c>
    c82a:	e007      	b.n	c83c <chan_set+0x24>
	case 37:
		radio_freq_chan_set(2);
		break;

	case 38:
		radio_freq_chan_set(26);
    c82c:	201a      	movs	r0, #26
    c82e:	e005      	b.n	c83c <chan_set+0x24>
		break;

	case 39:
		radio_freq_chan_set(80);
    c830:	2050      	movs	r0, #80	; 0x50
    c832:	e003      	b.n	c83c <chan_set+0x24>
		break;

	default:
		if (chan < 11) {
    c834:	2c0a      	cmp	r4, #10
    c836:	d807      	bhi.n	c848 <chan_set+0x30>
			radio_freq_chan_set(4 + (2 * chan));
    c838:	1ca0      	adds	r0, r4, #2
    c83a:	0040      	lsls	r0, r0, #1
    c83c:	f7fd fc96 	bl	a16c <radio_freq_chan_set>
			LL_ASSERT(0);
		}
		break;
	}

	radio_whiten_iv_set(chan);
    c840:	0020      	movs	r0, r4
    c842:	f7fd fc9b 	bl	a17c <radio_whiten_iv_set>
}
    c846:	bd13      	pop	{r0, r1, r4, pc}

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    c848:	1ce0      	adds	r0, r4, #3
		break;

	default:
		if (chan < 11) {
			radio_freq_chan_set(4 + (2 * chan));
		} else if (chan < 40) {
    c84a:	2c27      	cmp	r4, #39	; 0x27
    c84c:	d9f5      	bls.n	c83a <chan_set+0x22>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
		} else {
			LL_ASSERT(0);
    c84e:	4b06      	ldr	r3, [pc, #24]	; (c868 <chan_set+0x50>)
    c850:	4a06      	ldr	r2, [pc, #24]	; (c86c <chan_set+0x54>)
    c852:	9301      	str	r3, [sp, #4]
    c854:	4b06      	ldr	r3, [pc, #24]	; (c870 <chan_set+0x58>)
    c856:	4907      	ldr	r1, [pc, #28]	; (c874 <chan_set+0x5c>)
    c858:	9300      	str	r3, [sp, #0]
    c85a:	4807      	ldr	r0, [pc, #28]	; (c878 <chan_set+0x60>)
    c85c:	4b07      	ldr	r3, [pc, #28]	; (c87c <chan_set+0x64>)
    c85e:	f7f4 ff83 	bl	1768 <printk>
    c862:	b662      	cpsie	i
    c864:	2004      	movs	r0, #4
    c866:	df02      	svc	2
    c868:	000145b0 	.word	0x000145b0
    c86c:	00014570 	.word	0x00014570
    c870:	000145b5 	.word	0x000145b5
    c874:	00014577 	.word	0x00014577
    c878:	00014bc5 	.word	0x00014bc5
    c87c:	000172b0 	.word	0x000172b0

0000c880 <adv_setup>:

	DEBUG_RADIO_PREPARE_A(0);
}

static void adv_setup(void)
{
    c880:	b570      	push	{r4, r5, r6, lr}
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    c882:	4c36      	ldr	r4, [pc, #216]	; (c95c <adv_setup+0xdc>)
    c884:	0023      	movs	r3, r4
	    _radio.advertiser.adv_data.last) {
    c886:	0022      	movs	r2, r4
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    c888:	33f4      	adds	r3, #244	; 0xf4
	    _radio.advertiser.adv_data.last) {
    c88a:	32f5      	adds	r2, #245	; 0xf5
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    c88c:	7811      	ldrb	r1, [r2, #0]
    c88e:	781b      	ldrb	r3, [r3, #0]
static void adv_setup(void)
{
	struct pdu_adv *pdu;
	u8_t bitmap;
	u8_t chan;
	u8_t upd = 0;
    c890:	2200      	movs	r2, #0

	/* Use latest adv data PDU buffer */
	if (_radio.advertiser.adv_data.first !=
    c892:	4299      	cmp	r1, r3
    c894:	d008      	beq.n	c8a8 <adv_setup+0x28>
	    _radio.advertiser.adv_data.last) {
		u8_t first;

		first = _radio.advertiser.adv_data.first + 1;
    c896:	3301      	adds	r3, #1
    c898:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    c89a:	2b02      	cmp	r3, #2
    c89c:	d100      	bne.n	c8a0 <adv_setup+0x20>
			first = 0;
    c89e:	0013      	movs	r3, r2
		}
		_radio.advertiser.adv_data.first = first;
    c8a0:	0022      	movs	r2, r4
    c8a2:	32f4      	adds	r2, #244	; 0xf4
    c8a4:	7013      	strb	r3, [r2, #0]
		upd = 1;
    c8a6:	2201      	movs	r2, #1
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    c8a8:	21a2      	movs	r1, #162	; 0xa2
	    advertiser.scan_data.last) {
    c8aa:	2046      	movs	r0, #70	; 0x46
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    c8ac:	0049      	lsls	r1, r1, #1
	    advertiser.scan_data.last) {
    c8ae:	30ff      	adds	r0, #255	; 0xff
		_radio.advertiser.adv_data.first = first;
		upd = 1;
	}

	/* Use latest scan data PDU buffer */
	if (_radio.advertiser.scan_data.first != _radio.
    c8b0:	5c63      	ldrb	r3, [r4, r1]
    c8b2:	5c20      	ldrb	r0, [r4, r0]
    c8b4:	4298      	cmp	r0, r3
    c8b6:	d006      	beq.n	c8c6 <adv_setup+0x46>
	    advertiser.scan_data.last) {
		u8_t first;

		first = _radio.advertiser.scan_data.first + 1;
    c8b8:	3301      	adds	r3, #1
    c8ba:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
    c8bc:	2b02      	cmp	r3, #2
    c8be:	d100      	bne.n	c8c2 <adv_setup+0x42>
			first = 0;
    c8c0:	2300      	movs	r3, #0
		}
		_radio.advertiser.scan_data.first = first;
		upd = 1;
    c8c2:	2201      	movs	r2, #1

		first = _radio.advertiser.scan_data.first + 1;
		if (first == DOUBLE_BUFFER_SIZE) {
			first = 0;
		}
		_radio.advertiser.scan_data.first = first;
    c8c4:	5463      	strb	r3, [r4, r1]
		upd = 1;
	}

	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
    c8c6:	0023      	movs	r3, r4
    c8c8:	33f4      	adds	r3, #244	; 0xf4
		}
		_radio.advertiser.scan_data.first = first;
		upd = 1;
	}

	pdu = (struct pdu_adv *)
    c8ca:	781d      	ldrb	r5, [r3, #0]
    c8cc:	2327      	movs	r3, #39	; 0x27
    c8ce:	435d      	muls	r5, r3
    c8d0:	35a0      	adds	r5, #160	; 0xa0
    c8d2:	1965      	adds	r5, r4, r5
    c8d4:	1dae      	adds	r6, r5, #6
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
    c8d6:	2a00      	cmp	r2, #0
    c8d8:	d00c      	beq.n	c8f4 <adv_setup+0x74>
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
		_radio.advertiser.scan_data.data[
			_radio.advertiser.scan_data.first];
    c8da:	22a2      	movs	r2, #162	; 0xa2

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    c8dc:	0029      	movs	r1, r5
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
		_radio.advertiser.scan_data.data[
			_radio.advertiser.scan_data.first];
    c8de:	0052      	lsls	r2, r2, #1
	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
    c8e0:	5ca0      	ldrb	r0, [r4, r2]
			_radio.advertiser.scan_data.first];

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    c8e2:	3a3f      	subs	r2, #63	; 0x3f
	pdu = (struct pdu_adv *)
		_radio.advertiser.adv_data.data[
			_radio.advertiser.adv_data.first];
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	if (upd) {
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
    c8e4:	4343      	muls	r3, r0
    c8e6:	18e3      	adds	r3, r4, r3
			_radio.advertiser.scan_data.first];

		/* Copy the address from the adv packet we will send into the
		 * scan response.
		 */
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
    c8e8:	33f8      	adds	r3, #248	; 0xf8
    c8ea:	0018      	movs	r0, r3
    c8ec:	3aff      	subs	r2, #255	; 0xff
    c8ee:	3108      	adds	r1, #8
    c8f0:	f7f4 fd38 	bl	1364 <memcpy>
		       &pdu->payload.adv_ind.addr[0], BDADDR_SIZE);
	}
#else
	ARG_UNUSED(upd);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
    c8f4:	0030      	movs	r0, r6
    c8f6:	f7fd fc8d 	bl	a214 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    c8fa:	230f      	movs	r3, #15
    c8fc:	79aa      	ldrb	r2, [r5, #6]
    c8fe:	4013      	ands	r3, r2
    c900:	2b02      	cmp	r3, #2
    c902:	d00a      	beq.n	c91a <adv_setup+0x9a>
    c904:	2b07      	cmp	r3, #7
    c906:	d008      	beq.n	c91a <adv_setup+0x9a>
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    c908:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    c90a:	2096      	movs	r0, #150	; 0x96
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	radio_pkt_tx_set(pdu);
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
	    (!IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		_radio.state = STATE_TX;
    c90c:	7423      	strb	r3, [r4, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
    c90e:	f7fd fd8b 	bl	a428 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    c912:	2000      	movs	r0, #0
    c914:	f7fd fcec 	bl	a2f0 <radio_switch_complete_and_rx>
    c918:	e003      	b.n	c922 <adv_setup+0xa2>
	} else {
		_radio.state = STATE_CLOSE;
    c91a:	2303      	movs	r3, #3
    c91c:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
    c91e:	f7fd fcf7 	bl	a310 <radio_switch_complete_and_disable>
	}

	bitmap = _radio.advertiser.chl_map_current;
    c922:	0023      	movs	r3, r4
    c924:	33a4      	adds	r3, #164	; 0xa4
    c926:	781b      	ldrb	r3, [r3, #0]
	chan = 0;
    c928:	2000      	movs	r0, #0
	} else {
		_radio.state = STATE_CLOSE;
		radio_switch_complete_and_disable();
	}

	bitmap = _radio.advertiser.chl_map_current;
    c92a:	071b      	lsls	r3, r3, #28
    c92c:	0f5b      	lsrs	r3, r3, #29
    c92e:	b2da      	uxtb	r2, r3
    c930:	0011      	movs	r1, r2
	chan = 0;
	while ((bitmap & 0x01) == 0) {
    c932:	2501      	movs	r5, #1
    c934:	4229      	tst	r1, r5
    c936:	d103      	bne.n	c940 <adv_setup+0xc0>
		chan++;
    c938:	3001      	adds	r0, #1
    c93a:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
    c93c:	0849      	lsrs	r1, r1, #1
    c93e:	e7f9      	b.n	c934 <adv_setup+0xb4>
	}
	_radio.advertiser.chl_map_current &=
    c940:	210e      	movs	r1, #14
    c942:	3207      	adds	r2, #7
    c944:	34a4      	adds	r4, #164	; 0xa4
    c946:	4013      	ands	r3, r2
    c948:	005a      	lsls	r2, r3, #1
    c94a:	7823      	ldrb	r3, [r4, #0]
		(_radio.advertiser.chl_map_current - 1);

	chan_set(37 + chan);
    c94c:	3025      	adds	r0, #37	; 0x25
	chan = 0;
	while ((bitmap & 0x01) == 0) {
		chan++;
		bitmap >>= 1;
	}
	_radio.advertiser.chl_map_current &=
    c94e:	438b      	bics	r3, r1
    c950:	4313      	orrs	r3, r2
    c952:	7023      	strb	r3, [r4, #0]
		(_radio.advertiser.chl_map_current - 1);

	chan_set(37 + chan);
    c954:	f7ff ff60 	bl	c818 <chan_set>
}
    c958:	bd70      	pop	{r4, r5, r6, pc}
    c95a:	46c0      	nop			; (mov r8, r8)
    c95c:	20001254 	.word	0x20001254

0000c960 <isr_rx_scan_report>:

	return 1;
}

static u32_t isr_rx_scan_report(u8_t rssi_ready)
{
    c960:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c962:	0004      	movs	r4, r0
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
    c964:	2003      	movs	r0, #3
    c966:	f7fe fef5 	bl	b754 <packet_rx_reserve_get>
	if (radio_pdu_node_rx == 0) {
    c96a:	2800      	cmp	r0, #0
    c96c:	d02f      	beq.n	c9ce <isr_rx_scan_report+0x6e>
		return 1;
	}

	/* Prepare the report (adv or scan resp) */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    c96e:	2301      	movs	r3, #1
    c970:	425b      	negs	r3, r3
    c972:	80c3      	strh	r3, [r0, #6]
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
    c974:	235e      	movs	r3, #94	; 0x5e
    c976:	4a17      	ldr	r2, [pc, #92]	; (c9d4 <isr_rx_scan_report+0x74>)
    c978:	33ff      	adds	r3, #255	; 0xff
    c97a:	5cd3      	ldrb	r3, [r2, r3]
    c97c:	075a      	lsls	r2, r3, #29
    c97e:	d015      	beq.n	c9ac <isr_rx_scan_report+0x4c>
		switch (_radio.scanner.phy) {
    c980:	075b      	lsls	r3, r3, #29
    c982:	0f5b      	lsrs	r3, r3, #29
    c984:	b2da      	uxtb	r2, r3
    c986:	2a01      	cmp	r2, #1
    c988:	d00e      	beq.n	c9a8 <isr_rx_scan_report+0x48>
    c98a:	2a04      	cmp	r2, #4
    c98c:	d00f      	beq.n	c9ae <isr_rx_scan_report+0x4e>
			radio_pdu_node_rx->hdr.type =
				NODE_RX_TYPE_EXT_CODED_REPORT;
			break;

		default:
			LL_ASSERT(0);
    c98e:	4b12      	ldr	r3, [pc, #72]	; (c9d8 <isr_rx_scan_report+0x78>)
    c990:	4a12      	ldr	r2, [pc, #72]	; (c9dc <isr_rx_scan_report+0x7c>)
    c992:	9301      	str	r3, [sp, #4]
    c994:	4b12      	ldr	r3, [pc, #72]	; (c9e0 <isr_rx_scan_report+0x80>)
    c996:	4913      	ldr	r1, [pc, #76]	; (c9e4 <isr_rx_scan_report+0x84>)
    c998:	9300      	str	r3, [sp, #0]
    c99a:	4813      	ldr	r0, [pc, #76]	; (c9e8 <isr_rx_scan_report+0x88>)
    c99c:	4b13      	ldr	r3, [pc, #76]	; (c9ec <isr_rx_scan_report+0x8c>)
    c99e:	f7f4 fee3 	bl	1768 <printk>
    c9a2:	b662      	cpsie	i
    c9a4:	2004      	movs	r0, #4
    c9a6:	df02      	svc	2
	if (0) {
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (_radio.scanner.phy) {
		switch (_radio.scanner.phy) {
		case BIT(0):
			radio_pdu_node_rx->hdr.type =
    c9a8:	2303      	movs	r3, #3
    c9aa:	e000      	b.n	c9ae <isr_rx_scan_report+0x4e>
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    c9ac:	2302      	movs	r3, #2
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    c9ae:	7a45      	ldrb	r5, [r0, #9]
			LL_ASSERT(0);
			break;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    c9b0:	7103      	strb	r3, [r0, #4]
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    c9b2:	1940      	adds	r0, r0, r5
    c9b4:	300a      	adds	r0, #10
    c9b6:	0005      	movs	r5, r0
    c9b8:	267f      	movs	r6, #127	; 0x7f
			     pdu_adv_rx->len] =
    c9ba:	2c00      	cmp	r4, #0
    c9bc:	d002      	beq.n	c9c4 <isr_rx_scan_report+0x64>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    c9be:	f7fd fcbb 	bl	a338 <radio_rssi_get>
	}

	/* save the RSSI value */
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			     pdu_adv_rx->len] =
    c9c2:	4006      	ands	r6, r0
    c9c4:	702e      	strb	r6, [r5, #0]
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();
    c9c6:	f7ff faaf 	bl	bf28 <packet_rx_enqueue>

	return 0;
    c9ca:	2000      	movs	r0, #0
    c9cc:	e000      	b.n	c9d0 <isr_rx_scan_report+0x70>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
	if (radio_pdu_node_rx == 0) {
		return 1;
    c9ce:	2001      	movs	r0, #1
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();

	return 0;
}
    c9d0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    c9d2:	46c0      	nop			; (mov r8, r8)
    c9d4:	20001254 	.word	0x20001254
    c9d8:	000145b0 	.word	0x000145b0
    c9dc:	00014570 	.word	0x00014570
    c9e0:	000145b5 	.word	0x000145b5
    c9e4:	00014577 	.word	0x00014577
    c9e8:	00014bc5 	.word	0x00014bc5
    c9ec:	000172f5 	.word	0x000172f5

0000c9f0 <isr_rx_scan>:
static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    c9f0:	23be      	movs	r3, #190	; 0xbe
    c9f2:	22dc      	movs	r2, #220	; 0xdc

	return 0;
}

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    c9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    c9f6:	4dd4      	ldr	r5, [pc, #848]	; (cd48 <isr_rx_scan+0x358>)

	return 0;
}

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    c9f8:	b095      	sub	sp, #84	; 0x54
    c9fa:	9012      	str	r0, [sp, #72]	; 0x48
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    c9fc:	33ff      	adds	r3, #255	; 0xff
    c9fe:	5ceb      	ldrb	r3, [r5, r3]
    ca00:	0052      	lsls	r2, r2, #1
    ca02:	58aa      	ldr	r2, [r5, r2]
    ca04:	009b      	lsls	r3, r3, #2
    ca06:	589b      	ldr	r3, [r3, r2]

	return 0;
}

static inline u32_t isr_rx_scan(u8_t irkmatch_id, u8_t rssi_ready)
{
    ca08:	000c      	movs	r4, r1
	struct pdu_adv *pdu_adv_rx;

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    ca0a:	930a      	str	r3, [sp, #40]	; 0x28

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ca0c:	23be      	movs	r3, #190	; 0xbe
    ca0e:	005b      	lsls	r3, r3, #1
    ca10:	58eb      	ldr	r3, [r5, r3]
    ca12:	2b00      	cmp	r3, #0
    ca14:	d100      	bne.n	ca18 <isr_rx_scan+0x28>
    ca16:	e247      	b.n	cea8 <isr_rx_scan+0x4b8>
    ca18:	23ff      	movs	r3, #255	; 0xff
    ca1a:	005b      	lsls	r3, r3, #1
    ca1c:	5ceb      	ldrb	r3, [r5, r3]
    ca1e:	2b00      	cmp	r3, #0
    ca20:	d008      	beq.n	ca34 <isr_rx_scan+0x44>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ca22:	23fe      	movs	r3, #254	; 0xfe
    ca24:	22fe      	movs	r2, #254	; 0xfe
    ca26:	005b      	lsls	r3, r3, #1
    ca28:	32ff      	adds	r2, #255	; 0xff
    ca2a:	5ceb      	ldrb	r3, [r5, r3]

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    ca2c:	5caa      	ldrb	r2, [r5, r2]
    ca2e:	429a      	cmp	r2, r3
    ca30:	d000      	beq.n	ca34 <isr_rx_scan+0x44>
    ca32:	e239      	b.n	cea8 <isr_rx_scan+0x4b8>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ca34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca36:	7a1b      	ldrb	r3, [r3, #8]
    ca38:	071a      	lsls	r2, r3, #28
    ca3a:	d007      	beq.n	ca4c <isr_rx_scan+0x5c>
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
    ca3c:	220f      	movs	r2, #15
    ca3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca40:	7a1b      	ldrb	r3, [r3, #8]
    ca42:	401a      	ands	r2, r3
    ca44:	2a01      	cmp	r2, #1
    ca46:	d000      	beq.n	ca4a <isr_rx_scan+0x5a>
    ca48:	e22e      	b.n	cea8 <isr_rx_scan+0x4b8>
    ca4a:	e02b      	b.n	caa4 <isr_rx_scan+0xb4>

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
    ca4c:	225e      	movs	r2, #94	; 0x5e
    ca4e:	32ff      	adds	r2, #255	; 0xff
    ca50:	5caa      	ldrb	r2, [r5, r2]
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
    ca52:	06d1      	lsls	r1, r2, #27
    ca54:	d515      	bpl.n	ca82 <isr_rx_scan+0x92>
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
	    ((radio_tmr_end_get() + 502) <
    ca56:	f7fd fdc9 	bl	a5ec <radio_tmr_end_get>
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    ca5a:	002b      	movs	r3, r5
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    ca5c:	2700      	movs	r7, #0
    ca5e:	30f7      	adds	r0, #247	; 0xf7
    ca60:	30ff      	adds	r0, #255	; 0xff
	    ((radio_tmr_end_get() + 502) <
	     TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot))) {
    ca62:	33fc      	adds	r3, #252	; 0xfc
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) ==
		 0x40))))) &&
    ca64:	0006      	movs	r6, r0
    ca66:	4ab9      	ldr	r2, [pc, #740]	; (cd4c <isr_rx_scan+0x35c>)
    ca68:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
    ca6a:	0039      	movs	r1, r7
    ca6c:	2307      	movs	r3, #7
    ca6e:	f7f3 fd2d 	bl	4cc <__aeabi_lmul>
    ca72:	4ab7      	ldr	r2, [pc, #732]	; (cd50 <isr_rx_scan+0x360>)
    ca74:	2300      	movs	r3, #0
    ca76:	f7f3 fd09 	bl	48c <__aeabi_uldivmod>
    ca7a:	4286      	cmp	r6, r0
    ca7c:	d300      	bcc.n	ca80 <isr_rx_scan+0x90>
    ca7e:	e213      	b.n	cea8 <isr_rx_scan+0x4b8>
    ca80:	e033      	b.n	caea <isr_rx_scan+0xfa>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    ca82:	0652      	lsls	r2, r2, #25
    ca84:	065b      	lsls	r3, r3, #25

	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
    ca86:	0fd2      	lsrs	r2, r2, #31
    ca88:	0fdb      	lsrs	r3, r3, #31
    ca8a:	429a      	cmp	r2, r3
    ca8c:	d1d6      	bne.n	ca3c <isr_rx_scan+0x4c>
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
    ca8e:	0028      	movs	r0, r5
    ca90:	990a      	ldr	r1, [sp, #40]	; 0x28
    ca92:	305f      	adds	r0, #95	; 0x5f
    ca94:	30ff      	adds	r0, #255	; 0xff
    ca96:	2206      	movs	r2, #6
    ca98:	310a      	adds	r1, #10
    ca9a:	f7f4 fc3b 	bl	1314 <memcmp>
	/* Initiator */
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
				      (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
    ca9e:	2800      	cmp	r0, #0
    caa0:	d0d9      	beq.n	ca56 <isr_rx_scan+0x66>
    caa2:	e7cb      	b.n	ca3c <isr_rx_scan+0x4c>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    caa4:	265e      	movs	r6, #94	; 0x5e
    caa6:	36ff      	adds	r6, #255	; 0xff
    caa8:	5daa      	ldrb	r2, [r5, r6]
	      (((_radio.scanner.filter_policy & 0x01) != 0) ||
	       ((_radio.scanner.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    caaa:	09db      	lsrs	r3, r3, #7
    caac:	09d2      	lsrs	r2, r2, #7
    caae:	429a      	cmp	r2, r3
    cab0:	d003      	beq.n	caba <isr_rx_scan+0xca>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    cab2:	5dab      	ldrb	r3, [r5, r6]
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
    cab4:	069b      	lsls	r3, r3, #26
    cab6:	d40b      	bmi.n	cad0 <isr_rx_scan+0xe0>
    cab8:	e1f6      	b.n	cea8 <isr_rx_scan+0x4b8>
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.scanner.init_addr[0],
    caba:	0028      	movs	r0, r5
    cabc:	990a      	ldr	r1, [sp, #40]	; 0x28
    cabe:	3065      	adds	r0, #101	; 0x65
    cac0:	30ff      	adds	r0, #255	; 0xff
    cac2:	2206      	movs	r2, #6
    cac4:	3110      	adds	r1, #16
    cac6:	f7f4 fc25 	bl	1314 <memcmp>
		(memcmp(&_radio.scanner.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    caca:	2800      	cmp	r0, #0
    cacc:	d0c3      	beq.n	ca56 <isr_rx_scan+0x66>
    cace:	e7f0      	b.n	cab2 <isr_rx_scan+0xc2>
			&pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.scanner.filter_policy & 0x02) != 0) &&
    cad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cad2:	7a1b      	ldrb	r3, [r3, #8]
    cad4:	09db      	lsrs	r3, r3, #7
    cad6:	d100      	bne.n	cada <isr_rx_scan+0xea>
    cad8:	e1e6      	b.n	cea8 <isr_rx_scan+0x4b8>
		(pdu_adv_rx->rx_addr != 0) &&
    cada:	223f      	movs	r2, #63	; 0x3f
    cadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cade:	7d5b      	ldrb	r3, [r3, #21]
    cae0:	4393      	bics	r3, r2
    cae2:	2b40      	cmp	r3, #64	; 0x40
    cae4:	d000      	beq.n	cae8 <isr_rx_scan+0xf8>
    cae6:	e1df      	b.n	cea8 <isr_rx_scan+0x4b8>
    cae8:	e7b5      	b.n	ca56 <isr_rx_scan+0x66>
		u32_t conn_offset_us;
		u32_t ticker_status;
		u32_t conn_space_us;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    caea:	2004      	movs	r0, #4
    caec:	f7fe fe32 	bl	b754 <packet_rx_reserve_get>
    caf0:	900c      	str	r0, [sp, #48]	; 0x30
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    caf2:	2800      	cmp	r0, #0
    caf4:	d100      	bne.n	caf8 <isr_rx_scan+0x108>
    caf6:	e27e      	b.n	cff6 <isr_rx_scan+0x606>
			return 1;
		}

		_radio.state = STATE_STOP;
    caf8:	2304      	movs	r3, #4
    cafa:	742b      	strb	r3, [r5, #16]

		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
    cafc:	23be      	movs	r3, #190	; 0xbe
    cafe:	005b      	lsls	r3, r3, #1
    cb00:	58ee      	ldr	r6, [r5, r3]
		_radio.scanner.conn = NULL;
    cb02:	50ef      	str	r7, [r5, r3]

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    cb04:	f7fd fbf0 	bl	a2e8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    cb08:	220f      	movs	r2, #15
    cb0a:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    cb0c:	2140      	movs	r1, #64	; 0x40
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    cb0e:	4393      	bics	r3, r2

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			pdu_adv_tx->chan_sel = 1;
    cb10:	3216      	adds	r2, #22
    cb12:	4313      	orrs	r3, r2
    cb14:	7003      	strb	r3, [r0, #0]
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    cb16:	235e      	movs	r3, #94	; 0x5e
    cb18:	33ff      	adds	r3, #255	; 0xff
    cb1a:	5ceb      	ldrb	r3, [r5, r3]
		/* acquire the master context from scanner */
		conn = _radio.scanner.conn;
		_radio.scanner.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    cb1c:	0004      	movs	r4, r0
			pdu_adv_tx->chan_sel = 1;
		} else {
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    cb1e:	09db      	lsrs	r3, r3, #7
    cb20:	019a      	lsls	r2, r3, #6
    cb22:	7803      	ldrb	r3, [r0, #0]
    cb24:	438b      	bics	r3, r1
    cb26:	4313      	orrs	r3, r2
    cb28:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    cb2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb2c:	7801      	ldrb	r1, [r0, #0]
    cb2e:	7a1b      	ldrb	r3, [r3, #8]
    cb30:	065b      	lsls	r3, r3, #25
    cb32:	0fdb      	lsrs	r3, r3, #31
    cb34:	01da      	lsls	r2, r3, #7
    cb36:	237f      	movs	r3, #127	; 0x7f
    cb38:	400b      	ands	r3, r1
    cb3a:	4313      	orrs	r3, r2
    cb3c:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    cb3e:	0029      	movs	r1, r5
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    cb40:	2322      	movs	r3, #34	; 0x22
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    cb42:	3165      	adds	r1, #101	; 0x65
			pdu_adv_tx->chan_sel = 0;
		}

		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
    cb44:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
    cb46:	1c83      	adds	r3, r0, #2
    cb48:	31ff      	adds	r1, #255	; 0xff
    cb4a:	2206      	movs	r2, #6
    cb4c:	0018      	movs	r0, r3
    cb4e:	9311      	str	r3, [sp, #68]	; 0x44
    cb50:	f7f4 fc08 	bl	1364 <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
    cb54:	0023      	movs	r3, r4
    cb56:	990a      	ldr	r1, [sp, #40]	; 0x28
    cb58:	3308      	adds	r3, #8
    cb5a:	0018      	movs	r0, r3
    cb5c:	2206      	movs	r2, #6
    cb5e:	310a      	adds	r1, #10
    cb60:	930f      	str	r3, [sp, #60]	; 0x3c
    cb62:	f7f4 fbff 	bl	1364 <memcpy>
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
    cb66:	0031      	movs	r1, r6
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    cb68:	0020      	movs	r0, r4
		       access_addr[0], &conn->access_addr[0], 4);
    cb6a:	3110      	adds	r1, #16
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
		memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
    cb6c:	2204      	movs	r2, #4
    cb6e:	300e      	adds	r0, #14
    cb70:	f7f4 fbf8 	bl	1364 <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
    cb74:	0031      	movs	r1, r6
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    cb76:	0020      	movs	r0, r4
		       &conn->crc_init[0], 3);
    cb78:	3114      	adds	r1, #20
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
    cb7a:	2203      	movs	r2, #3
    cb7c:	3012      	adds	r0, #18
    cb7e:	f7f4 fbf1 	bl	1364 <memcpy>
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;
    cb82:	2301      	movs	r3, #1
    cb84:	7563      	strb	r3, [r4, #21]

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;
    cb86:	3370      	adds	r3, #112	; 0x70
    cb88:	33ff      	adds	r3, #255	; 0xff
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;

		conn_interval_us =
    cb8a:	5aeb      	ldrh	r3, [r5, r3]
    cb8c:	4a71      	ldr	r2, [pc, #452]	; (cd54 <isr_rx_scan+0x364>)
    cb8e:	435a      	muls	r2, r3
    cb90:	9210      	str	r2, [sp, #64]	; 0x40
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    cb92:	f7fd fd2b 	bl	a5ec <radio_tmr_end_get>
    cb96:	23db      	movs	r3, #219	; 0xdb
    cb98:	00db      	lsls	r3, r3, #3
    cb9a:	18c3      	adds	r3, r0, r3
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    cb9c:	0039      	movs	r1, r7
    cb9e:	0038      	movs	r0, r7
		pdu_adv_tx->payload.connect_ind.lldata. win_size = 1;

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    cba0:	930d      	str	r3, [sp, #52]	; 0x34
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    cba2:	f7fd fb41 	bl	a228 <radio_tx_chain_delay_get>
    cba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    cba8:	0039      	movs	r1, r7

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    cbaa:	1a1b      	subs	r3, r3, r0
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    cbac:	0038      	movs	r0, r7

		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    cbae:	930d      	str	r3, [sp, #52]	; 0x34
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    cbb0:	f7fd fb38 	bl	a224 <radio_tx_ready_delay_get>
    cbb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbb6:	1a18      	subs	r0, r3, r0

		if (_radio.scanner.win_offset_us == 0) {
    cbb8:	23c0      	movs	r3, #192	; 0xc0
    cbba:	005b      	lsls	r3, r3, #1
    cbbc:	58ef      	ldr	r7, [r5, r3]
    cbbe:	2f00      	cmp	r7, #0
    cbc0:	d105      	bne.n	cbce <isr_rx_scan+0x1de>
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
    cbc2:	75a7      	strb	r7, [r4, #22]
    cbc4:	75e7      	strb	r7, [r4, #23]
		conn_interval_us =
			(u32_t)_radio.scanner.conn_interval * 1250;

		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
		conn_offset_us -= radio_tx_ready_delay_get(0, 0);
    cbc6:	0007      	movs	r7, r0
    cbc8:	e00d      	b.n	cbe6 <isr_rx_scan+0x1f6>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
    cbca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cbcc:	18ff      	adds	r7, r7, r3
		if (_radio.scanner.win_offset_us == 0) {
			conn_space_us = conn_offset_us;
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
		} else {
			conn_space_us = _radio.scanner.win_offset_us;
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    cbce:	2f00      	cmp	r7, #0
    cbd0:	dbfb      	blt.n	cbca <isr_rx_scan+0x1da>
    cbd2:	4287      	cmp	r7, r0
    cbd4:	d3f9      	bcc.n	cbca <isr_rx_scan+0x1da>
			       (conn_space_us < conn_offset_us)) {
				conn_space_us += conn_interval_us;
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
    cbd6:	1a38      	subs	r0, r7, r0
    cbd8:	495e      	ldr	r1, [pc, #376]	; (cd54 <isr_rx_scan+0x364>)
    cbda:	f7f3 fae1 	bl	1a0 <__aeabi_uidiv>
    cbde:	b280      	uxth	r0, r0
    cbe0:	75a0      	strb	r0, [r4, #22]
    cbe2:	0a00      	lsrs	r0, r0, #8
    cbe4:	75e0      	strb	r0, [r4, #23]
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    cbe6:	23b8      	movs	r3, #184	; 0xb8
			_radio.scanner.conn_interval;
    cbe8:	4d57      	ldr	r5, [pc, #348]	; (cd48 <isr_rx_scan+0x358>)
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    cbea:	005b      	lsls	r3, r3, #1
    cbec:	5ceb      	ldrb	r3, [r5, r3]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    cbee:	0031      	movs	r1, r6
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    cbf0:	7623      	strb	r3, [r4, #24]
    cbf2:	4b59      	ldr	r3, [pc, #356]	; (cd58 <isr_rx_scan+0x368>)
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    cbf4:	0020      	movs	r0, r4
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    cbf6:	785b      	ldrb	r3, [r3, #1]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    cbf8:	2205      	movs	r2, #5
			}
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
    cbfa:	7663      	strb	r3, [r4, #25]
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    cbfc:	23b9      	movs	r3, #185	; 0xb9
    cbfe:	005b      	lsls	r3, r3, #1
    cc00:	5ceb      	ldrb	r3, [r5, r3]
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    cc02:	3117      	adds	r1, #23
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    cc04:	76a3      	strb	r3, [r4, #26]
    cc06:	4b55      	ldr	r3, [pc, #340]	; (cd5c <isr_rx_scan+0x36c>)
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    cc08:	301e      	adds	r0, #30
				(conn_space_us - conn_offset_us) / 1250;
		}

		pdu_adv_tx->payload.connect_ind.lldata.interval =
			_radio.scanner.conn_interval;
		pdu_adv_tx->payload.connect_ind.lldata.latency =
    cc0a:	785b      	ldrb	r3, [r3, #1]
    cc0c:	76e3      	strb	r3, [r4, #27]
			_radio.scanner.conn_latency;
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
    cc0e:	23ba      	movs	r3, #186	; 0xba
    cc10:	005b      	lsls	r3, r3, #1
    cc12:	5ceb      	ldrb	r3, [r5, r3]
    cc14:	7723      	strb	r3, [r4, #28]
    cc16:	4b52      	ldr	r3, [pc, #328]	; (cd60 <isr_rx_scan+0x370>)
    cc18:	785b      	ldrb	r3, [r3, #1]
    cc1a:	7763      	strb	r3, [r4, #29]
			_radio.scanner.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
    cc1c:	f7f4 fba2 	bl	1364 <memcpy>
		       &conn->data_chan_map[0],
		       sizeof(pdu_adv_tx->payload.connect_ind.lldata.chan_map));
		pdu_adv_tx->payload.connect_ind.lldata.hop =
    cc20:	1d23      	adds	r3, r4, #4
    cc22:	9313      	str	r3, [sp, #76]	; 0x4c
    cc24:	231f      	movs	r3, #31
    cc26:	7fb2      	ldrb	r2, [r6, #30]
    cc28:	401a      	ands	r2, r3
    cc2a:	0011      	movs	r1, r2
    cc2c:	1d22      	adds	r2, r4, #4
    cc2e:	7fd2      	ldrb	r2, [r2, #31]
    cc30:	439a      	bics	r2, r3
    cc32:	430a      	orrs	r2, r1
    cc34:	1d21      	adds	r1, r4, #4
    cc36:	77ca      	strb	r2, [r1, #31]
			conn->data_chan_hop;
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
    cc38:	22ce      	movs	r2, #206	; 0xce
    cc3a:	0052      	lsls	r2, r2, #1
    cc3c:	7fc9      	ldrb	r1, [r1, #31]
    cc3e:	5caa      	ldrb	r2, [r5, r2]
    cc40:	400b      	ands	r3, r1
    cc42:	0152      	lsls	r2, r2, #5
    cc44:	4313      	orrs	r3, r2
    cc46:	1d22      	adds	r2, r4, #4
    cc48:	77d3      	strb	r3, [r2, #31]

		radio_switch_complete_and_disable();
    cc4a:	f7fd fb61 	bl	a310 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(pdu_adv_tx);
    cc4e:	0020      	movs	r0, r4
    cc50:	f7fd fae0 	bl	a214 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    cc54:	f7fd fb0e 	bl	a274 <radio_is_ready>
    cc58:	900e      	str	r0, [sp, #56]	; 0x38
    cc5a:	2800      	cmp	r0, #0
    cc5c:	d008      	beq.n	cc70 <isr_rx_scan+0x280>
    cc5e:	4b41      	ldr	r3, [pc, #260]	; (cd64 <isr_rx_scan+0x374>)
    cc60:	4a41      	ldr	r2, [pc, #260]	; (cd68 <isr_rx_scan+0x378>)
    cc62:	9301      	str	r3, [sp, #4]
    cc64:	4b41      	ldr	r3, [pc, #260]	; (cd6c <isr_rx_scan+0x37c>)
    cc66:	4942      	ldr	r1, [pc, #264]	; (cd70 <isr_rx_scan+0x380>)
    cc68:	9300      	str	r3, [sp, #0]
    cc6a:	4842      	ldr	r0, [pc, #264]	; (cd74 <isr_rx_scan+0x384>)
    cc6c:	4b42      	ldr	r3, [pc, #264]	; (cd78 <isr_rx_scan+0x388>)
    cc6e:	e065      	b.n	cd3c <isr_rx_scan+0x34c>

		radio_tmr_end_capture();
    cc70:	f7fd fca6 	bl	a5c0 <radio_tmr_end_capture>
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    cc74:	23c2      	movs	r3, #194	; 0xc2
    cc76:	228c      	movs	r2, #140	; 0x8c
    cc78:	005b      	lsls	r3, r3, #1
    cc7a:	58e9      	ldr	r1, [r5, r3]
    cc7c:	0052      	lsls	r2, r2, #1
    cc7e:	0030      	movs	r0, r6
    cc80:	f7fd f92e 	bl	9ee0 <mem_index_get>
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cc84:	2206      	movs	r2, #6
		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    cc86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    cc88:	8430      	strh	r0, [r6, #32]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    cc8a:	2138      	movs	r1, #56	; 0x38
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    cc8c:	711a      	strb	r2, [r3, #4]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    cc8e:	466a      	mov	r2, sp
		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    cc90:	80d8      	strh	r0, [r3, #6]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    cc92:	1852      	adds	r2, r2, r1
    cc94:	330b      	adds	r3, #11
    cc96:	930d      	str	r3, [sp, #52]	; 0x34
    cc98:	7812      	ldrb	r2, [r2, #0]
    cc9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    cc9c:	980c      	ldr	r0, [sp, #48]	; 0x30

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    cc9e:	72da      	strb	r2, [r3, #11]
		radio_le_conn_cmplt->role = 0x00;
    cca0:	466a      	mov	r2, sp
    cca2:	1852      	adds	r2, r2, r1
    cca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cca6:	7812      	ldrb	r2, [r2, #0]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    cca8:	990f      	ldr	r1, [sp, #60]	; 0x3c
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
    ccaa:	705a      	strb	r2, [r3, #1]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    ccac:	7823      	ldrb	r3, [r4, #0]
    ccae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ccb0:	09db      	lsrs	r3, r3, #7
    ccb2:	7093      	strb	r3, [r2, #2]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ccb4:	300e      	adds	r0, #14
    ccb6:	2206      	movs	r2, #6
    ccb8:	f7f4 fb54 	bl	1364 <memcpy>
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ccbc:	7823      	ldrb	r3, [r4, #0]
    ccbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ccc0:	980c      	ldr	r0, [sp, #48]	; 0x30
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv_tx->payload.connect_ind.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    ccc2:	065b      	lsls	r3, r3, #25
    ccc4:	0fdb      	lsrs	r3, r3, #31
    ccc6:	7253      	strb	r3, [r2, #9]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    ccc8:	9911      	ldr	r1, [sp, #68]	; 0x44
    ccca:	2206      	movs	r2, #6
    cccc:	3015      	adds	r0, #21
    ccce:	f7f4 fb49 	bl	1364 <memcpy>
		       &pdu_adv_tx->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    ccd2:	2148      	movs	r1, #72	; 0x48
    ccd4:	466a      	mov	r2, sp
    ccd6:	1852      	adds	r2, r2, r1
    ccd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ccda:	7812      	ldrb	r2, [r2, #0]
    ccdc:	741a      	strb	r2, [r3, #16]
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    ccde:	23b8      	movs	r3, #184	; 0xb8
    cce0:	005b      	lsls	r3, r3, #1
    cce2:	5ceb      	ldrb	r3, [r5, r3]
    cce4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cce6:	7713      	strb	r3, [r2, #28]
    cce8:	4b1b      	ldr	r3, [pc, #108]	; (cd58 <isr_rx_scan+0x368>)
    ccea:	785b      	ldrb	r3, [r3, #1]
    ccec:	7753      	strb	r3, [r2, #29]
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
    ccee:	23b9      	movs	r3, #185	; 0xb9
    ccf0:	005b      	lsls	r3, r3, #1
    ccf2:	5ceb      	ldrb	r3, [r5, r3]
    ccf4:	7793      	strb	r3, [r2, #30]
    ccf6:	4b19      	ldr	r3, [pc, #100]	; (cd5c <isr_rx_scan+0x36c>)
    ccf8:	785b      	ldrb	r3, [r3, #1]
    ccfa:	77d3      	strb	r3, [r2, #31]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    ccfc:	0013      	movs	r3, r2
    ccfe:	22ba      	movs	r2, #186	; 0xba
    cd00:	0052      	lsls	r2, r2, #1
    cd02:	5caa      	ldrb	r2, [r5, r2]
    cd04:	3320      	adds	r3, #32
    cd06:	701a      	strb	r2, [r3, #0]
    cd08:	4a15      	ldr	r2, [pc, #84]	; (cd60 <isr_rx_scan+0x370>)
    cd0a:	7852      	ldrb	r2, [r2, #1]
    cd0c:	705a      	strb	r2, [r3, #1]
		radio_le_conn_cmplt->mca =
			pdu_adv_tx->payload.connect_ind.lldata.sca;
    cd0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
		radio_le_conn_cmplt->mca =
    cd10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			pdu_adv_tx->payload.connect_ind.lldata.sca;
    cd12:	7fdb      	ldrb	r3, [r3, #31]
    cd14:	095b      	lsrs	r3, r3, #5
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
		radio_le_conn_cmplt->mca =
    cd16:	75d3      	strb	r3, [r2, #23]
			pdu_adv_tx->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    cd18:	8c30      	ldrh	r0, [r6, #32]
    cd1a:	f7ff f953 	bl	bfc4 <rx_fc_lock>
		packet_rx_enqueue();
    cd1e:	f7ff f903 	bl	bf28 <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    cd22:	2003      	movs	r0, #3
    cd24:	f7fe fd16 	bl	b754 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    cd28:	2800      	cmp	r0, #0
    cd2a:	d129      	bne.n	cd80 <isr_rx_scan+0x390>
    cd2c:	4b0d      	ldr	r3, [pc, #52]	; (cd64 <isr_rx_scan+0x374>)
    cd2e:	4a0e      	ldr	r2, [pc, #56]	; (cd68 <isr_rx_scan+0x378>)
    cd30:	9301      	str	r3, [sp, #4]
    cd32:	4b0e      	ldr	r3, [pc, #56]	; (cd6c <isr_rx_scan+0x37c>)
    cd34:	490e      	ldr	r1, [pc, #56]	; (cd70 <isr_rx_scan+0x380>)
    cd36:	9300      	str	r3, [sp, #0]
    cd38:	4810      	ldr	r0, [pc, #64]	; (cd7c <isr_rx_scan+0x38c>)
    cd3a:	4b0f      	ldr	r3, [pc, #60]	; (cd78 <isr_rx_scan+0x388>)
    cd3c:	f7f4 fd14 	bl	1768 <printk>
    cd40:	b662      	cpsie	i
    cd42:	2004      	movs	r0, #4
    cd44:	df02      	svc	2
    cd46:	46c0      	nop			; (mov r8, r8)
    cd48:	20001254 	.word	0x20001254
    cd4c:	1afd498d 	.word	0x1afd498d
    cd50:	3b9aca00 	.word	0x3b9aca00
    cd54:	000004e2 	.word	0x000004e2
    cd58:	200013c4 	.word	0x200013c4
    cd5c:	200013c6 	.word	0x200013c6
    cd60:	200013c8 	.word	0x200013c8
    cd64:	000145b0 	.word	0x000145b0
    cd68:	00014570 	.word	0x00014570
    cd6c:	000145b5 	.word	0x000145b5
    cd70:	00014577 	.word	0x00014577
    cd74:	00015df8 	.word	0x00015df8
    cd78:	0001706c 	.word	0x0001706c
    cd7c:	00015d05 	.word	0x00015d05

			radio_pdu_node_rx->hdr.handle = conn->handle;
    cd80:	8c33      	ldrh	r3, [r6, #32]
    cd82:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    cd84:	230b      	movs	r3, #11
    cd86:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
    cd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd8a:	7a1a      	ldrb	r2, [r3, #8]
    cd8c:	2320      	movs	r3, #32
    cd8e:	4013      	ands	r3, r2
    cd90:	d00e      	beq.n	cdb0 <isr_rx_scan+0x3c0>
				u16_t aa_ls =
    cd92:	7c73      	ldrb	r3, [r6, #17]
    cd94:	7c31      	ldrb	r1, [r6, #16]
    cd96:	021b      	lsls	r3, r3, #8
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    cd98:	7cf2      	ldrb	r2, [r6, #19]
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv_rx->chan_sel) {
				u16_t aa_ls =
    cd9a:	4319      	orrs	r1, r3
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    cd9c:	7cb3      	ldrb	r3, [r6, #18]
    cd9e:	0212      	lsls	r2, r2, #8
    cda0:	4313      	orrs	r3, r2
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    cda2:	2440      	movs	r4, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    cda4:	404b      	eors	r3, r1
    cda6:	83f3      	strh	r3, [r6, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    cda8:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    cdaa:	7f32      	ldrb	r2, [r6, #28]
    cdac:	4322      	orrs	r2, r4
    cdae:	7732      	strb	r2, [r6, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    cdb0:	72c3      	strb	r3, [r0, #11]
			}

			packet_rx_enqueue();
    cdb2:	f7ff f8b9 	bl	bf28 <packet_rx_enqueue>
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    cdb6:	4b92      	ldr	r3, [pc, #584]	; (d000 <isr_rx_scan+0x610>)
    cdb8:	001a      	movs	r2, r3
    cdba:	32fc      	adds	r2, #252	; 0xfc
    cdbc:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
    cdbe:	60f2      	str	r2, [r6, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    cdc0:	2280      	movs	r2, #128	; 0x80
    cdc2:	0092      	lsls	r2, r2, #2
    cdc4:	589c      	ldr	r4, [r3, r2]
		conn->hdr.ticks_xtal_to_start =
    cdc6:	2327      	movs	r3, #39	; 0x27
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    cdc8:	2200      	movs	r2, #0
			packet_rx_enqueue();
		}

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    cdca:	6074      	str	r4, [r6, #4]
		conn->hdr.ticks_xtal_to_start =
    cdcc:	6033      	str	r3, [r6, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    cdce:	60b2      	str	r2, [r6, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    cdd0:	429c      	cmp	r4, r3
    cdd2:	d200      	bcs.n	cdd6 <isr_rx_scan+0x3e6>
    cdd4:	001c      	movs	r4, r3
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;

		/* Stop Scanner */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cdd6:	2100      	movs	r1, #0
    cdd8:	4b8a      	ldr	r3, [pc, #552]	; (d004 <isr_rx_scan+0x614>)
    cdda:	2206      	movs	r2, #6
    cddc:	9300      	str	r3, [sp, #0]
    cdde:	0008      	movs	r0, r1
    cde0:	4b89      	ldr	r3, [pc, #548]	; (d008 <isr_rx_scan+0x618>)
    cde2:	f7fe fba9 	bl	b538 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    cde6:	219b      	movs	r1, #155	; 0x9b

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cde8:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_SCAN,
					    ticker_stop_scan_assert,
					    (void *)__LINE__);
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    cdea:	00c9      	lsls	r1, r1, #3
    cdec:	f7ff f94a 	bl	c084 <ticker_stop_scan_assert>

		/* Scanner stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    cdf0:	002b      	movs	r3, r5
    cdf2:	2204      	movs	r2, #4
    cdf4:	0029      	movs	r1, r5
    cdf6:	9500      	str	r5, [sp, #0]
    cdf8:	0028      	movs	r0, r5
    cdfa:	f7fe fb9d 	bl	b538 <ticker_stop>
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    cdfe:	4a83      	ldr	r2, [pc, #524]	; (d00c <isr_rx_scan+0x61c>)
    ce00:	2300      	movs	r3, #0
    ce02:	9810      	ldr	r0, [sp, #64]	; 0x40
    ce04:	0029      	movs	r1, r5
    ce06:	f7f3 fb61 	bl	4cc <__aeabi_lmul>
    ce0a:	4a81      	ldr	r2, [pc, #516]	; (d010 <isr_rx_scan+0x620>)
    ce0c:	2307      	movs	r3, #7
    ce0e:	900a      	str	r0, [sp, #40]	; 0x28
    ce10:	910b      	str	r1, [sp, #44]	; 0x2c
    ce12:	f7f3 fb3b 	bl	48c <__aeabi_uldivmod>
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
    ce16:	4b7a      	ldr	r3, [pc, #488]	; (d000 <isr_rx_scan+0x610>)
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    ce18:	900c      	str	r0, [sp, #48]	; 0x30
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    RADIO_TICKER_ID_SCAN_STOP, NULL, NULL);

		/* Start master */
		ticker_status =
    ce1a:	685b      	ldr	r3, [r3, #4]
    ce1c:	4a7c      	ldr	r2, [pc, #496]	; (d010 <isr_rx_scan+0x620>)
    ce1e:	1b1b      	subs	r3, r3, r4
    ce20:	930d      	str	r3, [sp, #52]	; 0x34
    ce22:	8c33      	ldrh	r3, [r6, #32]
    ce24:	9606      	str	r6, [sp, #24]
    ce26:	3307      	adds	r3, #7
    ce28:	b2db      	uxtb	r3, r3
    ce2a:	930e      	str	r3, [sp, #56]	; 0x38
    ce2c:	4b79      	ldr	r3, [pc, #484]	; (d014 <isr_rx_scan+0x624>)
    ce2e:	9308      	str	r3, [sp, #32]
    ce30:	4b79      	ldr	r3, [pc, #484]	; (d018 <isr_rx_scan+0x628>)
    ce32:	9307      	str	r3, [sp, #28]
    ce34:	4b79      	ldr	r3, [pc, #484]	; (d01c <isr_rx_scan+0x62c>)
    ce36:	9305      	str	r3, [sp, #20]
    ce38:	68f3      	ldr	r3, [r6, #12]
    ce3a:	9503      	str	r5, [sp, #12]
    ce3c:	191c      	adds	r4, r3, r4
    ce3e:	b2a4      	uxth	r4, r4
    ce40:	2307      	movs	r3, #7
    ce42:	9404      	str	r4, [sp, #16]
    ce44:	f7f3 fb42 	bl	4cc <__aeabi_lmul>
    ce48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ce4c:	22fa      	movs	r2, #250	; 0xfa
    ce4e:	1a1b      	subs	r3, r3, r0
    ce50:	418c      	sbcs	r4, r1
    ce52:	0092      	lsls	r2, r2, #2
    ce54:	0018      	movs	r0, r3
    ce56:	0021      	movs	r1, r4
    ce58:	2300      	movs	r3, #0
    ce5a:	f7f3 fb17 	bl	48c <__aeabi_uldivmod>
    ce5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce60:	9002      	str	r0, [sp, #8]
    ce62:	9301      	str	r3, [sp, #4]
    ce64:	4a69      	ldr	r2, [pc, #420]	; (d00c <isr_rx_scan+0x61c>)
    ce66:	2300      	movs	r3, #0
    ce68:	0038      	movs	r0, r7
    ce6a:	0029      	movs	r1, r5
    ce6c:	f7f3 fb2e 	bl	4cc <__aeabi_lmul>
    ce70:	4a67      	ldr	r2, [pc, #412]	; (d010 <isr_rx_scan+0x620>)
    ce72:	2307      	movs	r3, #7
    ce74:	f7f3 fb0a 	bl	48c <__aeabi_uldivmod>
    ce78:	0200      	lsls	r0, r0, #8
    ce7a:	0a00      	lsrs	r0, r0, #8
    ce7c:	9000      	str	r0, [sp, #0]
    ce7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ce82:	0029      	movs	r1, r5
    ce84:	0028      	movs	r0, r5
    ce86:	f7fe fabf 	bl	b408 <ticker_start>
				     TICKER_REMAINDER(conn_interval_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     event_master_prepare, conn,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ce8a:	2302      	movs	r3, #2
    ce8c:	4398      	bics	r0, r3
    ce8e:	0004      	movs	r4, r0
    ce90:	42a8      	cmp	r0, r5
    ce92:	d100      	bne.n	ce96 <isr_rx_scan+0x4a6>
    ce94:	e0b0      	b.n	cff8 <isr_rx_scan+0x608>
    ce96:	4b62      	ldr	r3, [pc, #392]	; (d020 <isr_rx_scan+0x630>)
    ce98:	4a62      	ldr	r2, [pc, #392]	; (d024 <isr_rx_scan+0x634>)
    ce9a:	9301      	str	r3, [sp, #4]
    ce9c:	4b62      	ldr	r3, [pc, #392]	; (d028 <isr_rx_scan+0x638>)
    ce9e:	4963      	ldr	r1, [pc, #396]	; (d02c <isr_rx_scan+0x63c>)
    cea0:	9300      	str	r3, [sp, #0]
    cea2:	4863      	ldr	r0, [pc, #396]	; (d030 <isr_rx_scan+0x640>)
    cea4:	4b63      	ldr	r3, [pc, #396]	; (d034 <isr_rx_scan+0x644>)
    cea6:	e749      	b.n	cd3c <isr_rx_scan+0x34c>

		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    cea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ceaa:	7a1a      	ldrb	r2, [r3, #8]
    ceac:	230f      	movs	r3, #15
    ceae:	4013      	ands	r3, r2
    ceb0:	d001      	beq.n	ceb6 <isr_rx_scan+0x4c6>
    ceb2:	2b06      	cmp	r3, #6
    ceb4:	d155      	bne.n	cf62 <isr_rx_scan+0x572>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
		 (_radio.scanner.type != 0) &&
    ceb6:	265e      	movs	r6, #94	; 0x5e
    ceb8:	4d51      	ldr	r5, [pc, #324]	; (d000 <isr_rx_scan+0x610>)
    ceba:	36ff      	adds	r6, #255	; 0xff
		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    cebc:	5da9      	ldrb	r1, [r5, r6]
    cebe:	0709      	lsls	r1, r1, #28
    cec0:	d548      	bpl.n	cf54 <isr_rx_scan+0x564>
		 (_radio.scanner.type != 0) &&
		 (_radio.scanner.conn == 0)) {
    cec2:	21be      	movs	r1, #190	; 0xbe
    cec4:	0049      	lsls	r1, r1, #1
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
		 (_radio.scanner.type != 0) &&
    cec6:	5869      	ldr	r1, [r5, r1]
    cec8:	2900      	cmp	r1, #0
    ceca:	d143      	bne.n	cf54 <isr_rx_scan+0x564>
		 (_radio.scanner.conn == 0)) {
		struct pdu_adv *pdu_adv_tx;
		u32_t err;

		/* save the adv packet */
		err = isr_rx_scan_report(rssi_ready);
    cecc:	0020      	movs	r0, r4
    cece:	f7ff fd47 	bl	c960 <isr_rx_scan_report>
    ced2:	1e04      	subs	r4, r0, #0
		if (err) {
    ced4:	d000      	beq.n	ced8 <isr_rx_scan+0x4e8>
    ced6:	e08f      	b.n	cff8 <isr_rx_scan+0x608>
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    ced8:	f7fd fa06 	bl	a2e8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    cedc:	220f      	movs	r2, #15
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    cede:	2140      	movs	r1, #64	; 0x40
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    cee0:	7803      	ldrb	r3, [r0, #0]
		if (err) {
			return err;
		}

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    cee2:	0007      	movs	r7, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    cee4:	4393      	bics	r3, r2
    cee6:	3a0c      	subs	r2, #12
    cee8:	4313      	orrs	r3, r2
    ceea:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ceec:	5dab      	ldrb	r3, [r5, r6]
    ceee:	09db      	lsrs	r3, r3, #7
    cef0:	019a      	lsls	r2, r3, #6
    cef2:	7803      	ldrb	r3, [r0, #0]
    cef4:	438b      	bics	r3, r1
    cef6:	4313      	orrs	r3, r2
    cef8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    cefa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cefc:	7801      	ldrb	r1, [r0, #0]
    cefe:	7a1b      	ldrb	r3, [r3, #8]
    cf00:	065b      	lsls	r3, r3, #25
    cf02:	0fdb      	lsrs	r3, r3, #31
    cf04:	01da      	lsls	r2, r3, #7
    cf06:	237f      	movs	r3, #127	; 0x7f
    cf08:	400b      	ands	r3, r1
    cf0a:	4313      	orrs	r3, r2
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    cf0c:	0029      	movs	r1, r5

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    cf0e:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    cf10:	230c      	movs	r3, #12
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    cf12:	3165      	adds	r1, #101	; 0x65
		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    cf14:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    cf16:	31ff      	adds	r1, #255	; 0xff
    cf18:	2206      	movs	r2, #6
    cf1a:	3002      	adds	r0, #2
    cf1c:	f7f4 fa22 	bl	1364 <memcpy>
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    cf20:	0038      	movs	r0, r7
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
    cf22:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    cf24:	2206      	movs	r2, #6
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
    cf26:	310a      	adds	r1, #10
		pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    cf28:	3008      	adds	r0, #8
    cf2a:	f7f4 fa1b 	bl	1364 <memcpy>
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    cf2e:	21ae      	movs	r1, #174	; 0xae
    cf30:	2202      	movs	r2, #2
    cf32:	0049      	lsls	r1, r1, #1
    cf34:	5c6b      	ldrb	r3, [r5, r1]
		_radio.state = STATE_TX;

		radio_tmr_tifs_set(RADIO_TIFS);
    cf36:	2096      	movs	r0, #150	; 0x96
		       &_radio.scanner.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.scanner.state = 1;
    cf38:	4313      	orrs	r3, r2
    cf3a:	546b      	strb	r3, [r5, r1]
		_radio.state = STATE_TX;
    cf3c:	742a      	strb	r2, [r5, #16]

		radio_tmr_tifs_set(RADIO_TIFS);
    cf3e:	f7fd fa73 	bl	a428 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    cf42:	0020      	movs	r0, r4
    cf44:	f7fd f9d4 	bl	a2f0 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    cf48:	0038      	movs	r0, r7
    cf4a:	f7fd f963 	bl	a214 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    cf4e:	f7fd fb37 	bl	a5c0 <radio_tmr_end_capture>

		return 0;
    cf52:	e051      	b.n	cff8 <isr_rx_scan+0x608>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    cf54:	2b00      	cmp	r3, #0
    cf56:	d104      	bne.n	cf62 <isr_rx_scan+0x572>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    cf58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf5a:	7a5b      	ldrb	r3, [r3, #9]
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d13f      	bne.n	cfe0 <isr_rx_scan+0x5f0>
    cf60:	e049      	b.n	cff6 <isr_rx_scan+0x606>
		radio_tmr_end_capture();

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    cf62:	2b01      	cmp	r3, #1
    cf64:	d006      	beq.n	cf74 <isr_rx_scan+0x584>
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    cf66:	220b      	movs	r2, #11
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    cf68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf6a:	7a19      	ldrb	r1, [r3, #8]
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
    cf6c:	400a      	ands	r2, r1
    cf6e:	2a02      	cmp	r2, #2
    cf70:	d122      	bne.n	cfb8 <isr_rx_scan+0x5c8>
    cf72:	e7f1      	b.n	cf58 <isr_rx_scan+0x568>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    cf74:	265e      	movs	r6, #94	; 0x5e
    cf76:	4d22      	ldr	r5, [pc, #136]	; (d000 <isr_rx_scan+0x610>)
    cf78:	36ff      	adds	r6, #255	; 0xff
    cf7a:	5dab      	ldrb	r3, [r5, r6]

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    cf7c:	09d2      	lsrs	r2, r2, #7
    cf7e:	09db      	lsrs	r3, r3, #7
    cf80:	4293      	cmp	r3, r2
    cf82:	d003      	beq.n	cf8c <isr_rx_scan+0x59c>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    cf84:	5dab      	ldrb	r3, [r5, r6]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
    cf86:	069b      	lsls	r3, r3, #26
    cf88:	d40b      	bmi.n	cfa2 <isr_rx_scan+0x5b2>
    cf8a:	e7ec      	b.n	cf66 <isr_rx_scan+0x576>
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.scanner.init_addr[0],
    cf8c:	0028      	movs	r0, r5
    cf8e:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf90:	3065      	adds	r0, #101	; 0x65
    cf92:	30ff      	adds	r0, #255	; 0xff
    cf94:	2206      	movs	r2, #6
    cf96:	3110      	adds	r1, #16
    cf98:	f7f4 f9bc 	bl	1314 <memcmp>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.scanner.init_addr_type == pdu_adv_rx->rx_addr) &&
    cf9c:	2800      	cmp	r0, #0
    cf9e:	d0db      	beq.n	cf58 <isr_rx_scan+0x568>
    cfa0:	e7f0      	b.n	cf84 <isr_rx_scan+0x594>
			     &pdu_adv_rx->payload.direct_ind.tgt_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.scanner.filter_policy & 0x02) != 0) &&
    cfa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cfa4:	7a1b      	ldrb	r3, [r3, #8]
    cfa6:	09db      	lsrs	r3, r3, #7
    cfa8:	d0dd      	beq.n	cf66 <isr_rx_scan+0x576>
		     (pdu_adv_rx->rx_addr != 0) &&
    cfaa:	223f      	movs	r2, #63	; 0x3f
    cfac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cfae:	7d5b      	ldrb	r3, [r3, #21]
    cfb0:	4393      	bics	r3, r2
    cfb2:	2b40      	cmp	r3, #64	; 0x40
    cfb4:	d1d7      	bne.n	cf66 <isr_rx_scan+0x576>
    cfb6:	e7cf      	b.n	cf58 <isr_rx_scan+0x568>
		     ((pdu_adv_rx->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)))) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    cfb8:	230f      	movs	r3, #15
    cfba:	400b      	ands	r3, r1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    cfbc:	2b07      	cmp	r3, #7
    cfbe:	d106      	bne.n	cfce <isr_rx_scan+0x5de>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    cfc0:	225e      	movs	r2, #94	; 0x5e
    cfc2:	490f      	ldr	r1, [pc, #60]	; (d000 <isr_rx_scan+0x610>)
    cfc4:	32ff      	adds	r2, #255	; 0xff
    cfc6:	5c8a      	ldrb	r2, [r1, r2]
    cfc8:	421a      	tst	r2, r3
    cfca:	d1c5      	bne.n	cf58 <isr_rx_scan+0x568>
    cfcc:	e013      	b.n	cff6 <isr_rx_scan+0x606>
		   (_radio.scanner.phy)) ||
    cfce:	2b04      	cmp	r3, #4
    cfd0:	d111      	bne.n	cff6 <isr_rx_scan+0x606>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (_radio.scanner.state != 0))) &&
    cfd2:	3359      	adds	r3, #89	; 0x59
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    cfd4:	4a0a      	ldr	r2, [pc, #40]	; (d000 <isr_rx_scan+0x610>)
		   (_radio.scanner.state != 0))) &&
    cfd6:	33ff      	adds	r3, #255	; 0xff
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   (_radio.scanner.phy)) ||
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    cfd8:	5cd3      	ldrb	r3, [r2, r3]
    cfda:	079b      	lsls	r3, r3, #30
    cfdc:	d4bc      	bmi.n	cf58 <isr_rx_scan+0x568>
    cfde:	e00a      	b.n	cff6 <isr_rx_scan+0x606>
		   (_radio.scanner.state != 0))) &&
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    cfe0:	23be      	movs	r3, #190	; 0xbe
    cfe2:	4a07      	ldr	r2, [pc, #28]	; (d000 <isr_rx_scan+0x610>)
    cfe4:	005b      	lsls	r3, r3, #1
    cfe6:	58d3      	ldr	r3, [r2, r3]
    cfe8:	2b00      	cmp	r3, #0
    cfea:	d104      	bne.n	cff6 <isr_rx_scan+0x606>
		u32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(rssi_ready);
    cfec:	0020      	movs	r0, r4
    cfee:	f7ff fcb7 	bl	c960 <isr_rx_scan_report>
    cff2:	1e04      	subs	r4, r0, #0
		if (err) {
    cff4:	d100      	bne.n	cff8 <isr_rx_scan+0x608>
	else {
		/* ignore and close this rx/tx chain ( code below ) */
		return 1;
	}

	return 1;
    cff6:	2401      	movs	r4, #1
}
    cff8:	0020      	movs	r0, r4
    cffa:	b015      	add	sp, #84	; 0x54
    cffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cffe:	46c0      	nop			; (mov r8, r8)
    d000:	20001254 	.word	0x20001254
    d004:	000004d7 	.word	0x000004d7
    d008:	0000c085 	.word	0x0000c085
    d00c:	3b9aca00 	.word	0x3b9aca00
    d010:	1afd498d 	.word	0x1afd498d
    d014:	000004ef 	.word	0x000004ef
    d018:	0000bffd 	.word	0x0000bffd
    d01c:	0000ea45 	.word	0x0000ea45
    d020:	000145b0 	.word	0x000145b0
    d024:	00014570 	.word	0x00014570
    d028:	000145b5 	.word	0x000145b5
    d02c:	00014577 	.word	0x00014577
    d030:	00015cb7 	.word	0x00015cb7
    d034:	0001706c 	.word	0x0001706c

0000d038 <terminate_ind_rx_enqueue>:
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    d038:	0003      	movs	r3, r0
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    d03a:	b507      	push	{r0, r1, r2, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    d03c:	33a8      	adds	r3, #168	; 0xa8
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, u8_t reason)
{
    d03e:	000a      	movs	r2, r1
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
    d040:	6819      	ldr	r1, [r3, #0]
    d042:	2900      	cmp	r1, #0
    d044:	d108      	bne.n	d058 <terminate_ind_rx_enqueue+0x20>
    d046:	4b15      	ldr	r3, [pc, #84]	; (d09c <terminate_ind_rx_enqueue+0x64>)
    d048:	4a15      	ldr	r2, [pc, #84]	; (d0a0 <terminate_ind_rx_enqueue+0x68>)
    d04a:	9301      	str	r3, [sp, #4]
    d04c:	4b15      	ldr	r3, [pc, #84]	; (d0a4 <terminate_ind_rx_enqueue+0x6c>)
    d04e:	4916      	ldr	r1, [pc, #88]	; (d0a8 <terminate_ind_rx_enqueue+0x70>)
    d050:	9300      	str	r3, [sp, #0]
    d052:	4816      	ldr	r0, [pc, #88]	; (d0ac <terminate_ind_rx_enqueue+0x74>)
    d054:	4b16      	ldr	r3, [pc, #88]	; (d0b0 <terminate_ind_rx_enqueue+0x78>)
    d056:	e018      	b.n	d08a <terminate_ind_rx_enqueue+0x52>

	radio_pdu_node_rx->hdr.handle = conn->handle;
    d058:	8c00      	ldrh	r0, [r0, #32]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
    d05a:	721a      	strb	r2, [r3, #8]
	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
    d05c:	80d8      	strh	r0, [r3, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    d05e:	2007      	movs	r0, #7

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    d060:	4a14      	ldr	r2, [pc, #80]	; (d0b4 <terminate_ind_rx_enqueue+0x7c>)
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    d062:	7118      	strb	r0, [r3, #4]

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    d064:	30ee      	adds	r0, #238	; 0xee
    d066:	30ff      	adds	r0, #255	; 0xff
    d068:	5c10      	ldrb	r0, [r2, r0]

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    d06a:	32cd      	adds	r2, #205	; 0xcd
	link = radio_pdu_node_rx->hdr.onion.link;

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    d06c:	7018      	strb	r0, [r3, #0]
	    _radio.packet_release_last;

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    d06e:	32ff      	adds	r2, #255	; 0xff
    d070:	0018      	movs	r0, r3
    d072:	f7fc ff5c 	bl	9f2e <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    d076:	2800      	cmp	r0, #0
    d078:	d10c      	bne.n	d094 <terminate_ind_rx_enqueue+0x5c>
    d07a:	4b08      	ldr	r3, [pc, #32]	; (d09c <terminate_ind_rx_enqueue+0x64>)
    d07c:	4a08      	ldr	r2, [pc, #32]	; (d0a0 <terminate_ind_rx_enqueue+0x68>)
    d07e:	9301      	str	r3, [sp, #4]
    d080:	4b08      	ldr	r3, [pc, #32]	; (d0a4 <terminate_ind_rx_enqueue+0x6c>)
    d082:	4909      	ldr	r1, [pc, #36]	; (d0a8 <terminate_ind_rx_enqueue+0x70>)
    d084:	9300      	str	r3, [sp, #0]
    d086:	480c      	ldr	r0, [pc, #48]	; (d0b8 <terminate_ind_rx_enqueue+0x80>)
    d088:	4b09      	ldr	r3, [pc, #36]	; (d0b0 <terminate_ind_rx_enqueue+0x78>)
    d08a:	f7f4 fb6d 	bl	1768 <printk>
    d08e:	b662      	cpsie	i
    d090:	2004      	movs	r0, #4
    d092:	df02      	svc	2
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    d094:	f004 fc58 	bl	11948 <radio_event_callback>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);

	/* callback to trigger application action */
	packet_rx_callback();
}
    d098:	bd07      	pop	{r0, r1, r2, pc}
    d09a:	46c0      	nop			; (mov r8, r8)
    d09c:	000145b0 	.word	0x000145b0
    d0a0:	00014570 	.word	0x00014570
    d0a4:	000145b5 	.word	0x000145b5
    d0a8:	00014577 	.word	0x00014577
    d0ac:	00015e2b 	.word	0x00015e2b
    d0b0:	00017308 	.word	0x00017308
    d0b4:	20001254 	.word	0x20001254
    d0b8:	000159ff 	.word	0x000159ff

0000d0bc <prepare_normal_set>:
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    d0bc:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    d0be:	6803      	ldr	r3, [r0, #0]
	}
}

static void prepare_normal_set(struct shdr *hdr, u8_t ticker_user_id,
			       u8_t ticker_id)
{
    d0c0:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
    d0c2:	2b00      	cmp	r3, #0
    d0c4:	da24      	bge.n	d110 <prepare_normal_set+0x54>
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    d0c6:	6845      	ldr	r5, [r0, #4]
    d0c8:	6884      	ldr	r4, [r0, #8]
    d0ca:	005b      	lsls	r3, r3, #1
    d0cc:	085b      	lsrs	r3, r3, #1
    d0ce:	42ac      	cmp	r4, r5
    d0d0:	d200      	bcs.n	d0d4 <prepare_normal_set+0x18>
    d0d2:	002c      	movs	r4, r5
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    d0d4:	9006      	str	r0, [sp, #24]
    d0d6:	480f      	ldr	r0, [pc, #60]	; (d114 <prepare_normal_set+0x58>)
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    d0d8:	1b1b      	subs	r3, r3, r4
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    d0da:	9005      	str	r0, [sp, #20]
    d0dc:	2000      	movs	r0, #0
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    d0de:	b29b      	uxth	r3, r3
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		u32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    d0e0:	9301      	str	r3, [sp, #4]
    d0e2:	9300      	str	r3, [sp, #0]
    d0e4:	9004      	str	r0, [sp, #16]
    d0e6:	0003      	movs	r3, r0
    d0e8:	9003      	str	r0, [sp, #12]
    d0ea:	9002      	str	r0, [sp, #8]
    d0ec:	f7fe f9d4 	bl	b498 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      ticker_user_id,
				      ticker_id, 0, ticks_drift_minus,
				      ticks_drift_minus, 0, 0, 0,
				      prepare_normal, hdr);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d0f0:	2302      	movs	r3, #2
    d0f2:	4398      	bics	r0, r3
    d0f4:	d00c      	beq.n	d110 <prepare_normal_set+0x54>
    d0f6:	4b08      	ldr	r3, [pc, #32]	; (d118 <prepare_normal_set+0x5c>)
    d0f8:	4a08      	ldr	r2, [pc, #32]	; (d11c <prepare_normal_set+0x60>)
    d0fa:	9301      	str	r3, [sp, #4]
    d0fc:	4b08      	ldr	r3, [pc, #32]	; (d120 <prepare_normal_set+0x64>)
    d0fe:	4909      	ldr	r1, [pc, #36]	; (d124 <prepare_normal_set+0x68>)
    d100:	9300      	str	r3, [sp, #0]
    d102:	4809      	ldr	r0, [pc, #36]	; (d128 <prepare_normal_set+0x6c>)
    d104:	4b09      	ldr	r3, [pc, #36]	; (d12c <prepare_normal_set+0x70>)
    d106:	f7f4 fb2f 	bl	1768 <printk>
    d10a:	b662      	cpsie	i
    d10c:	2004      	movs	r0, #4
    d10e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));
	}
}
    d110:	b009      	add	sp, #36	; 0x24
    d112:	bd30      	pop	{r4, r5, pc}
    d114:	0000b6e5 	.word	0x0000b6e5
    d118:	000145b0 	.word	0x000145b0
    d11c:	00014570 	.word	0x00014570
    d120:	000145b5 	.word	0x000145b5
    d124:	00014577 	.word	0x00014577
    d128:	00015cb7 	.word	0x00015cb7
    d12c:	00017321 	.word	0x00017321

0000d130 <preempt_calc>:

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
    d130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d132:	0014      	movs	r4, r2
    d134:	000f      	movs	r7, r1
    d136:	0006      	movs	r6, r0
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    d138:	f7fe fa9a 	bl	b670 <ticker_ticks_now_get>

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static u32_t preempt_calc(struct shdr *hdr, u8_t ticker_id,
			  u32_t ticks_at_expire)
{
	u32_t diff =
    d13c:	0021      	movs	r1, r4
    d13e:	f7fe fa9b 	bl	b678 <ticker_ticks_diff_get>
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
    d142:	1cc5      	adds	r5, r0, #3
		}

		return 1;
	}

	return 0;
    d144:	2400      	movs	r4, #0
{
	u32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    d146:	2d09      	cmp	r5, #9
    d148:	d90e      	bls.n	d168 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    d14a:	0021      	movs	r1, r4
    d14c:	0020      	movs	r0, r4
    d14e:	f7fe fdbf 	bl	bcd0 <mayfly_xtal_retain>

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    d152:	0021      	movs	r1, r4
    d154:	0030      	movs	r0, r6
    d156:	003a      	movs	r2, r7
    d158:	f7ff ffb0 	bl	d0bc <prepare_normal_set>

		diff += hdr->ticks_preempt_to_start;
    d15c:	68b3      	ldr	r3, [r6, #8]
		if (diff <
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
		}

		return 1;
    d15e:	3401      	adds	r4, #1
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);

		diff += hdr->ticks_preempt_to_start;
    d160:	18e8      	adds	r0, r5, r3
		if (diff <
    d162:	2826      	cmp	r0, #38	; 0x26
    d164:	d800      	bhi.n	d168 <preempt_calc+0x38>
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
    d166:	60b0      	str	r0, [r6, #8]

		return 1;
	}

	return 0;
}
    d168:	0020      	movs	r0, r4
    d16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d16c <mayfly_xtal_stop_calc>:
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    d16c:	b510      	push	{r4, lr}
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    d16e:	2302      	movs	r3, #2
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    d170:	2423      	movs	r4, #35	; 0x23
	ticks_to_expire = 0;
    d172:	2000      	movs	r0, #0
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    d174:	b08c      	sub	sp, #48	; 0x30
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    d176:	446c      	add	r4, sp
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    d178:	9309      	str	r3, [sp, #36]	; 0x24
	u32_t ticks_to_expire;
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
    d17a:	33fd      	adds	r3, #253	; 0xfd
    d17c:	7023      	strb	r3, [r4, #0]
	ticks_to_expire = 0;
	ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    d17e:	ab09      	add	r3, sp, #36	; 0x24
    d180:	9302      	str	r3, [sp, #8]
    d182:	4b46      	ldr	r3, [pc, #280]	; (d29c <mayfly_xtal_stop_calc+0x130>)
    d184:	0022      	movs	r2, r4
    d186:	9301      	str	r3, [sp, #4]
    d188:	ab0a      	add	r3, sp, #40	; 0x28
    d18a:	9300      	str	r3, [sp, #0]
    d18c:	2101      	movs	r1, #1
    d18e:	ab0b      	add	r3, sp, #44	; 0x2c
	u32_t ticks_current;
	u8_t ticker_id;
	u32_t ret;

	ticker_id = 0xff;
	ticks_to_expire = 0;
    d190:	900a      	str	r0, [sp, #40]	; 0x28
	ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    d192:	f7fe f9ff 	bl	b594 <ticker_next_slot_get>
				   RADIO_TICKER_USER_ID_JOB, &ticker_id,
				   &ticks_current, &ticks_to_expire,
				   ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
    d196:	2802      	cmp	r0, #2
    d198:	d00b      	beq.n	d1b2 <mayfly_xtal_stop_calc+0x46>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
					 RADIO_TICKER_USER_ID_JOB);
		}
	}

	LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    d19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d19c:	2b00      	cmp	r3, #0
    d19e:	d010      	beq.n	d1c2 <mayfly_xtal_stop_calc+0x56>
    d1a0:	4b3f      	ldr	r3, [pc, #252]	; (d2a0 <mayfly_xtal_stop_calc+0x134>)
    d1a2:	4a40      	ldr	r2, [pc, #256]	; (d2a4 <mayfly_xtal_stop_calc+0x138>)
    d1a4:	9301      	str	r3, [sp, #4]
    d1a6:	4b40      	ldr	r3, [pc, #256]	; (d2a8 <mayfly_xtal_stop_calc+0x13c>)
    d1a8:	4940      	ldr	r1, [pc, #256]	; (d2ac <mayfly_xtal_stop_calc+0x140>)
    d1aa:	9300      	str	r3, [sp, #0]
    d1ac:	4840      	ldr	r0, [pc, #256]	; (d2b0 <mayfly_xtal_stop_calc+0x144>)
    d1ae:	4b41      	ldr	r3, [pc, #260]	; (d2b4 <mayfly_xtal_stop_calc+0x148>)
    d1b0:	e04c      	b.n	d24c <mayfly_xtal_stop_calc+0xe0>
				   RADIO_TICKER_USER_ID_JOB, &ticker_id,
				   &ticks_current, &ticks_to_expire,
				   ticker_if_done, (void *)&ret_cb);

	if (ret == TICKER_STATUS_BUSY) {
		while (ret_cb == TICKER_STATUS_BUSY) {
    d1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1b4:	2b02      	cmp	r3, #2
    d1b6:	d1f0      	bne.n	d19a <mayfly_xtal_stop_calc+0x2e>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    d1b8:	2101      	movs	r1, #1
    d1ba:	2000      	movs	r0, #0
    d1bc:	f7fe fa48 	bl	b650 <ticker_job_sched>
    d1c0:	e7f7      	b.n	d1b2 <mayfly_xtal_stop_calc+0x46>
		}
	}

	LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);

	if ((ticker_id != 0xff) &&
    d1c2:	7823      	ldrb	r3, [r4, #0]
    d1c4:	2bff      	cmp	r3, #255	; 0xff
    d1c6:	d046      	beq.n	d256 <mayfly_xtal_stop_calc+0xea>
    d1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d1ca:	2ba8      	cmp	r3, #168	; 0xa8
    d1cc:	d843      	bhi.n	d256 <mayfly_xtal_stop_calc+0xea>
	    (ticks_to_expire <
	     TICKER_US_TO_TICKS(CONFIG_BLUETOOTH_CONTROLLER_XTAL_THRESHOLD))) {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    d1ce:	2101      	movs	r1, #1
    d1d0:	0008      	movs	r0, r1
    d1d2:	f7fe fd7d 	bl	bcd0 <mayfly_xtal_retain>

		if (ticker_id >= RADIO_TICKER_ID_ADV) {
    d1d6:	7822      	ldrb	r2, [r4, #0]
    d1d8:	2a04      	cmp	r2, #4
    d1da:	d95d      	bls.n	d298 <mayfly_xtal_stop_calc+0x12c>
    d1dc:	4b36      	ldr	r3, [pc, #216]	; (d2b8 <mayfly_xtal_stop_calc+0x14c>)
			u32_t ticks_prepare_to_start;
			struct connection *conn = NULL;
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    d1de:	2a06      	cmp	r2, #6
    d1e0:	d909      	bls.n	d1f6 <mayfly_xtal_stop_calc+0x8a>
				conn = mem_get(_radio.conn_pool,
    d1e2:	20c2      	movs	r0, #194	; 0xc2
    d1e4:	218c      	movs	r1, #140	; 0x8c
    d1e6:	3a07      	subs	r2, #7
    d1e8:	0040      	lsls	r0, r0, #1
    d1ea:	b292      	uxth	r2, r2
    d1ec:	0049      	lsls	r1, r1, #1
    d1ee:	5818      	ldr	r0, [r3, r0]
    d1f0:	f7fc fe73 	bl	9eda <mem_get>
    d1f4:	e006      	b.n	d204 <mayfly_xtal_stop_calc+0x98>
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    d1f6:	0018      	movs	r0, r3
    d1f8:	3094      	adds	r0, #148	; 0x94
				conn = mem_get(_radio.conn_pool,
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    d1fa:	2a05      	cmp	r2, #5
    d1fc:	d002      	beq.n	d204 <mayfly_xtal_stop_calc+0x98>
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    d1fe:	334d      	adds	r3, #77	; 0x4d
    d200:	33ff      	adds	r3, #255	; 0xff
    d202:	0018      	movs	r0, r3
			}

			/* compensate for reduced next ticker's prepare or
			 * reduce next ticker's prepare.
			 */
			ticks_prepare_to_start =
    d204:	6843      	ldr	r3, [r0, #4]
    d206:	6882      	ldr	r2, [r0, #8]
    d208:	429a      	cmp	r2, r3
    d20a:	d200      	bcs.n	d20e <mayfly_xtal_stop_calc+0xa2>
    d20c:	001a      	movs	r2, r3
				(hdr->ticks_active_to_start >
				 hdr->ticks_preempt_to_start) ?
				hdr->ticks_active_to_start :
				hdr->ticks_preempt_to_start;
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
    d20e:	6803      	ldr	r3, [r0, #0]
    d210:	2b00      	cmp	r3, #0
    d212:	db41      	blt.n	d298 <mayfly_xtal_stop_calc+0x12c>
						    ticks_prepare_to_start);
			} else {
				/* Postpone the primary because we dont have
				 * to start xtal.
				 */
				if (hdr->ticks_xtal_to_start >
    d214:	429a      	cmp	r2, r3
    d216:	d23f      	bcs.n	d298 <mayfly_xtal_stop_calc+0x12c>
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
						ticker_update(
    d218:	1a9b      	subs	r3, r3, r2
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    d21a:	7822      	ldrb	r2, [r4, #0]
    d21c:	9006      	str	r0, [sp, #24]
    d21e:	2000      	movs	r0, #0
    d220:	4926      	ldr	r1, [pc, #152]	; (d2bc <mayfly_xtal_stop_calc+0x150>)
						ticker_update(
    d222:	b29b      	uxth	r3, r3
					u32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;
					u32_t ticker_status;

					ticker_status =
    d224:	9105      	str	r1, [sp, #20]
    d226:	9302      	str	r3, [sp, #8]
    d228:	9004      	str	r0, [sp, #16]
    d22a:	9003      	str	r0, [sp, #12]
    d22c:	9001      	str	r0, [sp, #4]
    d22e:	9000      	str	r0, [sp, #0]
    d230:	2101      	movs	r1, #1
    d232:	f7fe f931 	bl	b498 <ticker_update>
							      ticks_drift_plus, 0,
							      0, ticks_drift_plus,
							      0, 0,
							      prepare_reduced,
							      hdr);
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
    d236:	2302      	movs	r3, #2
    d238:	4398      	bics	r0, r3
    d23a:	d02d      	beq.n	d298 <mayfly_xtal_stop_calc+0x12c>
    d23c:	4b18      	ldr	r3, [pc, #96]	; (d2a0 <mayfly_xtal_stop_calc+0x134>)
    d23e:	4a19      	ldr	r2, [pc, #100]	; (d2a4 <mayfly_xtal_stop_calc+0x138>)
    d240:	9301      	str	r3, [sp, #4]
    d242:	4b19      	ldr	r3, [pc, #100]	; (d2a8 <mayfly_xtal_stop_calc+0x13c>)
    d244:	4919      	ldr	r1, [pc, #100]	; (d2ac <mayfly_xtal_stop_calc+0x140>)
    d246:	9300      	str	r3, [sp, #0]
    d248:	481d      	ldr	r0, [pc, #116]	; (d2c0 <mayfly_xtal_stop_calc+0x154>)
    d24a:	4b1a      	ldr	r3, [pc, #104]	; (d2b4 <mayfly_xtal_stop_calc+0x148>)
    d24c:	f7f4 fa8c 	bl	1768 <printk>
    d250:	b662      	cpsie	i
    d252:	2004      	movs	r0, #4
    d254:	df02      	svc	2
				}
			}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
		}
	} else {
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    d256:	2100      	movs	r1, #0
    d258:	2001      	movs	r0, #1
    d25a:	f7fe fd39 	bl	bcd0 <mayfly_xtal_retain>

		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
    d25e:	7822      	ldrb	r2, [r4, #0]
    d260:	1f53      	subs	r3, r2, #5
    d262:	b2db      	uxtb	r3, r3
    d264:	2bf9      	cmp	r3, #249	; 0xf9
    d266:	d817      	bhi.n	d298 <mayfly_xtal_stop_calc+0x12c>
    d268:	4b13      	ldr	r3, [pc, #76]	; (d2b8 <mayfly_xtal_stop_calc+0x14c>)
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    d26a:	2a06      	cmp	r2, #6
    d26c:	d909      	bls.n	d282 <mayfly_xtal_stop_calc+0x116>
				struct connection *conn;

				conn = mem_get(_radio.conn_pool,
    d26e:	20c2      	movs	r0, #194	; 0xc2
    d270:	218c      	movs	r1, #140	; 0x8c
    d272:	3a07      	subs	r2, #7
    d274:	0040      	lsls	r0, r0, #1
    d276:	b292      	uxth	r2, r2
    d278:	0049      	lsls	r1, r1, #1
    d27a:	5818      	ldr	r0, [r3, r0]
    d27c:	f7fc fe2d 	bl	9eda <mem_get>
    d280:	e006      	b.n	d290 <mayfly_xtal_stop_calc+0x124>
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
    d282:	0018      	movs	r0, r3
    d284:	3094      	adds	r0, #148	; 0x94
				conn = mem_get(_radio.conn_pool,
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    d286:	2a05      	cmp	r2, #5
    d288:	d002      	beq.n	d290 <mayfly_xtal_stop_calc+0x124>
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
				hdr = &_radio.scanner.hdr;
    d28a:	334d      	adds	r3, #77	; 0x4d
    d28c:	33ff      	adds	r3, #255	; 0xff
    d28e:	0018      	movs	r0, r3
			} else {
				LL_ASSERT(0);
			}

			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
    d290:	7822      	ldrb	r2, [r4, #0]
    d292:	2101      	movs	r1, #1
    d294:	f7ff ff12 	bl	d0bc <prepare_normal_set>
					   ticker_id);
		}
	}
}
    d298:	b00c      	add	sp, #48	; 0x30
    d29a:	bd10      	pop	{r4, pc}
    d29c:	0000b6d1 	.word	0x0000b6d1
    d2a0:	000145b0 	.word	0x000145b0
    d2a4:	00014570 	.word	0x00014570
    d2a8:	000145b5 	.word	0x000145b5
    d2ac:	00014577 	.word	0x00014577
    d2b0:	00015e6e 	.word	0x00015e6e
    d2b4:	00017343 	.word	0x00017343
    d2b8:	20001254 	.word	0x20001254
    d2bc:	0000b6d5 	.word	0x0000b6d5
    d2c0:	00015e9b 	.word	0x00015e9b

0000d2c4 <radio_event_adv_prepare>:
			    0x555555);
}

void radio_event_adv_prepare(u32_t ticks_at_expire, u32_t remainder,
			     u16_t lazy, void *context)
{
    d2c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	LL_ASSERT(!_radio.ticker_id_prepare);
    d2c6:	4c11      	ldr	r4, [pc, #68]	; (d30c <radio_event_adv_prepare+0x48>)
    d2c8:	7b25      	ldrb	r5, [r4, #12]
    d2ca:	b2ed      	uxtb	r5, r5
    d2cc:	2d00      	cmp	r5, #0
    d2ce:	d00c      	beq.n	d2ea <radio_event_adv_prepare+0x26>
    d2d0:	4b0f      	ldr	r3, [pc, #60]	; (d310 <radio_event_adv_prepare+0x4c>)
    d2d2:	4a10      	ldr	r2, [pc, #64]	; (d314 <radio_event_adv_prepare+0x50>)
    d2d4:	9301      	str	r3, [sp, #4]
    d2d6:	4b10      	ldr	r3, [pc, #64]	; (d318 <radio_event_adv_prepare+0x54>)
    d2d8:	4910      	ldr	r1, [pc, #64]	; (d31c <radio_event_adv_prepare+0x58>)
    d2da:	9300      	str	r3, [sp, #0]
    d2dc:	4810      	ldr	r0, [pc, #64]	; (d320 <radio_event_adv_prepare+0x5c>)
    d2de:	4b11      	ldr	r3, [pc, #68]	; (d324 <radio_event_adv_prepare+0x60>)
    d2e0:	f7f4 fa42 	bl	1768 <printk>
    d2e4:	b662      	cpsie	i
    d2e6:	2004      	movs	r0, #4
    d2e8:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    d2ea:	2605      	movs	r6, #5

	event_common_prepare(ticks_at_expire, remainder,
    d2ec:	0023      	movs	r3, r4
    d2ee:	0022      	movs	r2, r4
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	LL_ASSERT(!_radio.ticker_id_prepare);
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    d2f0:	7326      	strb	r6, [r4, #12]

	event_common_prepare(ticks_at_expire, remainder,
    d2f2:	9503      	str	r5, [sp, #12]
    d2f4:	4d0c      	ldr	r5, [pc, #48]	; (d328 <radio_event_adv_prepare+0x64>)
    d2f6:	9601      	str	r6, [sp, #4]
    d2f8:	9502      	str	r5, [sp, #8]
    d2fa:	349c      	adds	r4, #156	; 0x9c
    d2fc:	6824      	ldr	r4, [r4, #0]
    d2fe:	3398      	adds	r3, #152	; 0x98
    d300:	3294      	adds	r2, #148	; 0x94
    d302:	9400      	str	r4, [sp, #0]
    d304:	f7ff f912 	bl	c52c <event_common_prepare>
			     &_radio.advertiser.hdr.ticks_active_to_start,
			     _radio.advertiser.hdr.ticks_preempt_to_start,
			     RADIO_TICKER_ID_ADV, event_adv, NULL);

	DEBUG_RADIO_PREPARE_A(0);
}
    d308:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    d30a:	46c0      	nop			; (mov r8, r8)
    d30c:	20001254 	.word	0x20001254
    d310:	000145b0 	.word	0x000145b0
    d314:	00014570 	.word	0x00014570
    d318:	000145b5 	.word	0x000145b5
    d31c:	00014577 	.word	0x00014577
    d320:	00015ee9 	.word	0x00015ee9
    d324:	000170c2 	.word	0x000170c2
    d328:	0000d379 	.word	0x0000d379

0000d32c <adv_scan_configure.constprop.29>:
	radio_reset();
	radio_tx_power_set(0);
	radio_isr_set(isr);
}

static void adv_scan_configure(u8_t phy, u8_t flags)
    d32c:	b513      	push	{r0, r1, r4, lr}
    d32e:	0004      	movs	r4, r0
{
	u32_t aa = 0x8e89bed6;
    d330:	4b0d      	ldr	r3, [pc, #52]	; (d368 <adv_scan_configure.constprop.29+0x3c>)
    d332:	9301      	str	r3, [sp, #4]
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    d334:	f7fc fef6 	bl	a124 <radio_reset>
	radio_tx_power_set(0);
    d338:	2000      	movs	r0, #0
    d33a:	f7fc ff0f 	bl	a15c <radio_tx_power_set>
	radio_isr_set(isr);
    d33e:	480b      	ldr	r0, [pc, #44]	; (d36c <adv_scan_configure.constprop.29+0x40>)
    d340:	f7fc fed8 	bl	a0f4 <radio_isr_set>
static void adv_scan_configure(u8_t phy, u8_t flags)
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
    d344:	2101      	movs	r1, #1
    d346:	0020      	movs	r0, r4
    d348:	f7fc fefc 	bl	a144 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    d34c:	0064      	lsls	r4, r4, #1
{
	u32_t aa = 0x8e89bed6;

	adv_scan_conn_configure();
	radio_phy_set(phy, flags);
	radio_aa_set((u8_t *)&aa);
    d34e:	a801      	add	r0, sp, #4
    d350:	f7fc ff1c 	bl	a18c <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    d354:	b2e2      	uxtb	r2, r4
    d356:	2125      	movs	r1, #37	; 0x25
    d358:	2008      	movs	r0, #8
    d35a:	f7fc ff35 	bl	a1c8 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d35e:	4904      	ldr	r1, [pc, #16]	; (d370 <adv_scan_configure.constprop.29+0x44>)
    d360:	4804      	ldr	r0, [pc, #16]	; (d374 <adv_scan_configure.constprop.29+0x48>)
    d362:	f7fc ffa1 	bl	a2a8 <radio_crc_configure>
			    0x555555);
}
    d366:	bd13      	pop	{r0, r1, r4, pc}
    d368:	8e89bed6 	.word	0x8e89bed6
    d36c:	0000ebf5 	.word	0x0000ebf5
    d370:	00555555 	.word	0x00555555
    d374:	0000065b 	.word	0x0000065b

0000d378 <event_adv>:
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    d378:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    d37a:	4b36      	ldr	r3, [pc, #216]	; (d454 <event_adv+0xdc>)
	chan_set(37 + chan);
}

static void event_adv(u32_t ticks_at_expire, u32_t remainder,
		      u16_t lazy, void *context)
{
    d37c:	0005      	movs	r5, r0
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    d37e:	7bda      	ldrb	r2, [r3, #15]
    d380:	001c      	movs	r4, r3
    d382:	b2d2      	uxtb	r2, r2
    d384:	2a00      	cmp	r2, #0
    d386:	d008      	beq.n	d39a <event_adv+0x22>
    d388:	4b33      	ldr	r3, [pc, #204]	; (d458 <event_adv+0xe0>)
    d38a:	4a34      	ldr	r2, [pc, #208]	; (d45c <event_adv+0xe4>)
    d38c:	9301      	str	r3, [sp, #4]
    d38e:	4b34      	ldr	r3, [pc, #208]	; (d460 <event_adv+0xe8>)
    d390:	4934      	ldr	r1, [pc, #208]	; (d464 <event_adv+0xec>)
    d392:	9300      	str	r3, [sp, #0]
    d394:	4834      	ldr	r0, [pc, #208]	; (d468 <event_adv+0xf0>)
    d396:	4b35      	ldr	r3, [pc, #212]	; (d46c <event_adv+0xf4>)
    d398:	e00b      	b.n	d3b2 <event_adv+0x3a>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    d39a:	7b1b      	ldrb	r3, [r3, #12]
    d39c:	b2db      	uxtb	r3, r3
    d39e:	2b05      	cmp	r3, #5
    d3a0:	d00c      	beq.n	d3bc <event_adv+0x44>
    d3a2:	4b2d      	ldr	r3, [pc, #180]	; (d458 <event_adv+0xe0>)
    d3a4:	4a2d      	ldr	r2, [pc, #180]	; (d45c <event_adv+0xe4>)
    d3a6:	9301      	str	r3, [sp, #4]
    d3a8:	4b2d      	ldr	r3, [pc, #180]	; (d460 <event_adv+0xe8>)
    d3aa:	492e      	ldr	r1, [pc, #184]	; (d464 <event_adv+0xec>)
    d3ac:	9300      	str	r3, [sp, #0]
    d3ae:	4830      	ldr	r0, [pc, #192]	; (d470 <event_adv+0xf8>)
    d3b0:	4b2e      	ldr	r3, [pc, #184]	; (d46c <event_adv+0xf4>)
    d3b2:	f7f4 f9d9 	bl	1768 <printk>
    d3b6:	b662      	cpsie	i
    d3b8:	2004      	movs	r0, #4
    d3ba:	df02      	svc	2
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    d3bc:	0026      	movs	r6, r4
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    d3be:	2101      	movs	r1, #1
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    d3c0:	36a5      	adds	r6, #165	; 0xa5
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;
    d3c2:	6060      	str	r0, [r4, #4]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    d3c4:	7830      	ldrb	r0, [r6, #0]
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    d3c6:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    d3c8:	0740      	lsls	r0, r0, #29
    d3ca:	0f40      	lsrs	r0, r0, #29
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
	_radio.ticker_id_prepare = 0;
    d3cc:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    d3ce:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: if coded we use S8? */
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    d3d0:	f7ff ffac 	bl	d32c <adv_scan_configure.constprop.29>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	adv_scan_configure(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map_current = _radio.advertiser.chl_map;
    d3d4:	0021      	movs	r1, r4
    d3d6:	200e      	movs	r0, #14
    d3d8:	7833      	ldrb	r3, [r6, #0]
    d3da:	31a4      	adds	r1, #164	; 0xa4
    d3dc:	069b      	lsls	r3, r3, #26
    d3de:	0f5b      	lsrs	r3, r3, #29
    d3e0:	005a      	lsls	r2, r3, #1
    d3e2:	780b      	ldrb	r3, [r1, #0]
    d3e4:	4383      	bics	r3, r0
    d3e6:	4313      	orrs	r3, r2
    d3e8:	700b      	strb	r3, [r1, #0]
	adv_setup();
    d3ea:	f7ff fa49 	bl	c880 <adv_setup>

	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {
    d3ee:	223f      	movs	r2, #63	; 0x3f
    d3f0:	7833      	ldrb	r3, [r6, #0]
    d3f2:	4393      	bics	r3, r2
    d3f4:	d006      	beq.n	d404 <event_adv+0x8c>

		struct ll_filter *wl = ctrl_filter_get();
    d3f6:	f004 fb6f 	bl	11ad8 <ctrl_filter_get>

		radio_filter_configure(wl->enable_bitmask,
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
    d3fa:	1c82      	adds	r2, r0, #2
	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {

		struct ll_filter *wl = ctrl_filter_get();

		radio_filter_configure(wl->enable_bitmask,
    d3fc:	7841      	ldrb	r1, [r0, #1]
    d3fe:	7800      	ldrb	r0, [r0, #0]
    d400:	f7fc ffb0 	bl	a364 <radio_filter_configure>
				       wl->addr_type_bitmask,
				       (u8_t *)wl->bdaddr);
	}

	radio_tmr_start(1,
    d404:	0029      	movs	r1, r5
    d406:	68a2      	ldr	r2, [r4, #8]
    d408:	3109      	adds	r1, #9
    d40a:	2001      	movs	r0, #1
    d40c:	f7fd f814 	bl	a438 <radio_tmr_start>
			ticks_at_expire +
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
			_radio.remainder_anchor);
	radio_tmr_end_capture();
    d410:	f7fd f8d6 	bl	a5c0 <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    d414:	0020      	movs	r0, r4
    d416:	002a      	movs	r2, r5
    d418:	3094      	adds	r0, #148	; 0x94
    d41a:	2105      	movs	r1, #5
    d41c:	f7ff fe88 	bl	d130 <preempt_calc>
    d420:	2800      	cmp	r0, #0
    d422:	d004      	beq.n	d42e <event_adv+0xb6>
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    d424:	2304      	movs	r3, #4
    d426:	7423      	strb	r3, [r4, #16]
		radio_disable();
    d428:	f7fc ff10 	bl	a24c <radio_disable>
    d42c:	e010      	b.n	d450 <event_adv+0xd8>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    d42e:	0003      	movs	r3, r0
    d430:	4a10      	ldr	r2, [pc, #64]	; (d474 <event_adv+0xfc>)
    d432:	0001      	movs	r1, r0
    d434:	f7fe f8e0 	bl	b5f8 <ticker_job_idle_get>
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					RADIO_TICKER_USER_ID_WORKER,
					ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d438:	2302      	movs	r3, #2
    d43a:	4398      	bics	r0, r3
    d43c:	d008      	beq.n	d450 <event_adv+0xd8>
    d43e:	4b06      	ldr	r3, [pc, #24]	; (d458 <event_adv+0xe0>)
    d440:	4a06      	ldr	r2, [pc, #24]	; (d45c <event_adv+0xe4>)
    d442:	9301      	str	r3, [sp, #4]
    d444:	4b06      	ldr	r3, [pc, #24]	; (d460 <event_adv+0xe8>)
    d446:	4907      	ldr	r1, [pc, #28]	; (d464 <event_adv+0xec>)
    d448:	9300      	str	r3, [sp, #0]
    d44a:	480b      	ldr	r0, [pc, #44]	; (d478 <event_adv+0x100>)
    d44c:	4b07      	ldr	r3, [pc, #28]	; (d46c <event_adv+0xf4>)
    d44e:	e7b0      	b.n	d3b2 <event_adv+0x3a>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_A(0);
}
    d450:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    d452:	46c0      	nop			; (mov r8, r8)
    d454:	20001254 	.word	0x20001254
    d458:	000145b0 	.word	0x000145b0
    d45c:	00014570 	.word	0x00014570
    d460:	000145b5 	.word	0x000145b5
    d464:	00014577 	.word	0x00014577
    d468:	00015f24 	.word	0x00015f24
    d46c:	00017078 	.word	0x00017078
    d470:	00015f9d 	.word	0x00015f9d
    d474:	0000c1a5 	.word	0x0000c1a5
    d478:	00015cb7 	.word	0x00015cb7

0000d47c <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    d47c:	4b03      	ldr	r3, [pc, #12]	; (d48c <mayfly_xtal_start+0x10>)
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_start(void *params)
{
    d47e:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    d480:	6818      	ldr	r0, [r3, #0]
    d482:	2100      	movs	r1, #0
    d484:	6843      	ldr	r3, [r0, #4]
    d486:	681b      	ldr	r3, [r3, #0]
    d488:	4798      	blx	r3
}
    d48a:	bd10      	pop	{r4, pc}
    d48c:	20001254 	.word	0x20001254

0000d490 <mayfly_xtal_stop>:

static void mayfly_xtal_stop(void *params)
{
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    d490:	4b03      	ldr	r3, [pc, #12]	; (d4a0 <mayfly_xtal_stop+0x10>)
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_stop(void *params)
{
    d492:	b510      	push	{r4, lr}
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    d494:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    d496:	2100      	movs	r1, #0
    d498:	6843      	ldr	r3, [r0, #4]
    d49a:	685b      	ldr	r3, [r3, #4]
    d49c:	4798      	blx	r3

	DEBUG_RADIO_CLOSE(0);
}
    d49e:	bd10      	pop	{r4, pc}
    d4a0:	20001254 	.word	0x20001254

0000d4a4 <chan_sel_2>:
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    d4a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d4a6:	9301      	str	r3, [sp, #4]
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    d4a8:	2301      	movs	r3, #1
	return prn_e;
}

static u8_t chan_sel_2(u16_t counter, u16_t chan_id, u8_t *chan_map,
		       u8_t chan_count)
{
    d4aa:	0014      	movs	r4, r2
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    d4ac:	2603      	movs	r6, #3
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    d4ae:	469c      	mov	ip, r3
static u16_t chan_prn(u16_t counter, u16_t chan_id)
{
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;
    d4b0:	4048      	eors	r0, r1
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    d4b2:	2308      	movs	r3, #8
static u8_t chan_rev_8(u8_t i)
{
	u8_t iterate;
	u8_t o;

	o = 0;
    d4b4:	2200      	movs	r2, #0
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    d4b6:	0a05      	lsrs	r5, r0, #8
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    d4b8:	4667      	mov	r7, ip
    d4ba:	0052      	lsls	r2, r2, #1
    d4bc:	402f      	ands	r7, r5
    d4be:	3b01      	subs	r3, #1
    d4c0:	433a      	orrs	r2, r7
    d4c2:	b2db      	uxtb	r3, r3
    d4c4:	b2d2      	uxtb	r2, r2
		i >>= 1;
    d4c6:	086d      	lsrs	r5, r5, #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    d4c8:	2b00      	cmp	r3, #0
    d4ca:	d1f5      	bne.n	d4b8 <chan_sel_2+0x14>
	return o;
}

static u16_t chan_perm(u16_t i)
{
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    d4cc:	2708      	movs	r7, #8
    d4ce:	0212      	lsls	r2, r2, #8
    d4d0:	b212      	sxth	r2, r2
    d4d2:	b2c0      	uxtb	r0, r0
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
		o <<= 1;
		o |= (i & 1);
    d4d4:	4665      	mov	r5, ip
    d4d6:	005b      	lsls	r3, r3, #1
    d4d8:	4005      	ands	r5, r0
    d4da:	3f01      	subs	r7, #1
    d4dc:	432b      	orrs	r3, r5
    d4de:	b2ff      	uxtb	r7, r7
    d4e0:	b2db      	uxtb	r3, r3
		i >>= 1;
    d4e2:	0840      	lsrs	r0, r0, #1
{
	u8_t iterate;
	u8_t o;

	o = 0;
	for (iterate = 0; iterate < 8; iterate++) {
    d4e4:	2f00      	cmp	r7, #0
    d4e6:	d1f5      	bne.n	d4d4 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
}

static u16_t chan_mam(u16_t a, u16_t b)
{
	return ((u32_t)a * 17 + b) & 0xFFFF;
    d4e8:	431a      	orrs	r2, r3
    d4ea:	0010      	movs	r0, r2
    d4ec:	2311      	movs	r3, #17
    d4ee:	4358      	muls	r0, r3
    d4f0:	3e01      	subs	r6, #1
    d4f2:	1808      	adds	r0, r1, r0
    d4f4:	b2f6      	uxtb	r6, r6
    d4f6:	b280      	uxth	r0, r0
	u8_t iterate;
	u16_t prn_e;

	prn_e = counter ^ chan_id;

	for (iterate = 0; iterate < 3; iterate++) {
    d4f8:	2e00      	cmp	r6, #0
    d4fa:	d1da      	bne.n	d4b2 <chan_sel_2+0xe>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
    d4fc:	4041      	eors	r1, r0
    d4fe:	000e      	movs	r6, r1
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    d500:	2125      	movs	r1, #37	; 0x25
    d502:	0030      	movs	r0, r6
    d504:	f7f2 fed2 	bl	2ac <__aeabi_uidivmod>

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d508:	2207      	movs	r2, #7
{
	u8_t chan_next;
	u16_t prn_e;

	prn_e = chan_prn(counter, chan_id);
	chan_next = prn_e % 37;
    d50a:	b2c8      	uxtb	r0, r1

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d50c:	08c3      	lsrs	r3, r0, #3
    d50e:	5ce3      	ldrb	r3, [r4, r3]
    d510:	4002      	ands	r2, r0
    d512:	4113      	asrs	r3, r2
    d514:	2201      	movs	r2, #1
    d516:	4213      	tst	r3, r2
    d518:	d105      	bne.n	d526 <chan_sel_2+0x82>
		u8_t chan_index;

		chan_index = ((u32_t)chan_count * prn_e) >> 16;
		chan_next = chan_sel_remap(chan_map, chan_index);
    d51a:	9901      	ldr	r1, [sp, #4]
    d51c:	0020      	movs	r0, r4
    d51e:	4371      	muls	r1, r6
    d520:	0c09      	lsrs	r1, r1, #16
    d522:	f7fe f8e6 	bl	b6f2 <chan_sel_remap>
	} else {
		/* channel can be used, return it */
	}

	return chan_next;
}
    d526:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000d528 <connection_configure>:
	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
}

static void connection_configure(struct connection *conn)
{
    d528:	b510      	push	{r4, lr}
    d52a:	0004      	movs	r4, r0
	return access_addr;
}

static void adv_scan_conn_configure(void)
{
	radio_reset();
    d52c:	f7fc fdfa 	bl	a124 <radio_reset>
	radio_tx_power_set(0);
    d530:	2000      	movs	r0, #0
    d532:	f7fc fe13 	bl	a15c <radio_tx_power_set>
	radio_isr_set(isr);
    d536:	4809      	ldr	r0, [pc, #36]	; (d55c <connection_configure+0x34>)
    d538:	f7fc fddc 	bl	a0f4 <radio_isr_set>
}

static void connection_configure(struct connection *conn)
{
	adv_scan_conn_configure();
	radio_aa_set(conn->access_addr);
    d53c:	0020      	movs	r0, r4
    d53e:	3010      	adds	r0, #16
    d540:	f7fc fe24 	bl	a18c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    d544:	7da1      	ldrb	r1, [r4, #22]
    d546:	7d63      	ldrb	r3, [r4, #21]
    d548:	0409      	lsls	r1, r1, #16
    d54a:	021b      	lsls	r3, r3, #8
    d54c:	4319      	orrs	r1, r3
    d54e:	7d23      	ldrb	r3, [r4, #20]
    d550:	4803      	ldr	r0, [pc, #12]	; (d560 <connection_configure+0x38>)
    d552:	4319      	orrs	r1, r3
    d554:	f7fc fea8 	bl	a2a8 <radio_crc_configure>
			    (((u32_t)conn->crc_init[2] << 16) |
			     ((u32_t)conn->crc_init[1] << 8) |
			     ((u32_t)conn->crc_init[0])));
}
    d558:	bd10      	pop	{r4, pc}
    d55a:	46c0      	nop			; (mov r8, r8)
    d55c:	0000ebf5 	.word	0x0000ebf5
    d560:	0000065b 	.word	0x0000065b

0000d564 <event_slave>:
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    d564:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    d566:	4a6d      	ldr	r2, [pc, #436]	; (d71c <event_slave+0x1b8>)
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    d568:	001c      	movs	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    d56a:	7bd3      	ldrb	r3, [r2, #15]
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    d56c:	b085      	sub	sp, #20
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    d56e:	b2db      	uxtb	r3, r3
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			void *context)
{
    d570:	0006      	movs	r6, r0
    d572:	0015      	movs	r5, r2
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    d574:	2b00      	cmp	r3, #0
    d576:	d008      	beq.n	d58a <event_slave+0x26>
    d578:	4b69      	ldr	r3, [pc, #420]	; (d720 <event_slave+0x1bc>)
    d57a:	4a6a      	ldr	r2, [pc, #424]	; (d724 <event_slave+0x1c0>)
    d57c:	9301      	str	r3, [sp, #4]
    d57e:	4b6a      	ldr	r3, [pc, #424]	; (d728 <event_slave+0x1c4>)
    d580:	496a      	ldr	r1, [pc, #424]	; (d72c <event_slave+0x1c8>)
    d582:	9300      	str	r3, [sp, #0]
    d584:	486a      	ldr	r0, [pc, #424]	; (d730 <event_slave+0x1cc>)
    d586:	4b6b      	ldr	r3, [pc, #428]	; (d734 <event_slave+0x1d0>)
    d588:	e00d      	b.n	d5a6 <event_slave+0x42>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    d58a:	7b12      	ldrb	r2, [r2, #12]
    d58c:	8c21      	ldrh	r1, [r4, #32]
    d58e:	b2d2      	uxtb	r2, r2
    d590:	3107      	adds	r1, #7
    d592:	428a      	cmp	r2, r1
    d594:	d00c      	beq.n	d5b0 <event_slave+0x4c>
    d596:	4b62      	ldr	r3, [pc, #392]	; (d720 <event_slave+0x1bc>)
    d598:	4a62      	ldr	r2, [pc, #392]	; (d724 <event_slave+0x1c0>)
    d59a:	9301      	str	r3, [sp, #4]
    d59c:	4b62      	ldr	r3, [pc, #392]	; (d728 <event_slave+0x1c4>)
    d59e:	4963      	ldr	r1, [pc, #396]	; (d72c <event_slave+0x1c8>)
    d5a0:	9300      	str	r3, [sp, #0]
    d5a2:	4865      	ldr	r0, [pc, #404]	; (d738 <event_slave+0x1d4>)
    d5a4:	4b63      	ldr	r3, [pc, #396]	; (d734 <event_slave+0x1d0>)
    d5a6:	f7f4 f8df 	bl	1768 <printk>
    d5aa:	b662      	cpsie	i
    d5ac:	2004      	movs	r0, #4
    d5ae:	df02      	svc	2
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    d5b0:	2103      	movs	r1, #3
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    d5b2:	b2d2      	uxtb	r2, r2

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    d5b4:	73e9      	strb	r1, [r5, #15]
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
    d5b6:	732b      	strb	r3, [r5, #12]
	_radio.ticker_id_event =
    d5b8:	736a      	strb	r2, [r5, #13]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    d5ba:	22ca      	movs	r2, #202	; 0xca
    d5bc:	0052      	lsls	r2, r2, #1
    d5be:	54ab      	strb	r3, [r5, r2]
	_radio.crc_expire = 0;
    d5c0:	2296      	movs	r2, #150	; 0x96
    d5c2:	32ff      	adds	r2, #255	; 0xff
    d5c4:	54ab      	strb	r3, [r5, r2]
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    d5c6:	3902      	subs	r1, #2
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    d5c8:	3a05      	subs	r2, #5
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
    d5ca:	7429      	strb	r1, [r5, #16]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    d5cc:	50ac      	str	r4, [r5, r2]
	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    d5ce:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    d5d0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	conn->latency_prepare = 0;

	connection_configure(conn);
    d5d2:	0020      	movs	r0, r4
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    d5d4:	8562      	strh	r2, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    d5d6:	8523      	strh	r3, [r4, #40]	; 0x28

	connection_configure(conn);
    d5d8:	f7ff ffa6 	bl	d528 <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    d5dc:	2096      	movs	r0, #150	; 0x96
    d5de:	f7fc ff23 	bl	a428 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
    d5e2:	0023      	movs	r3, r4
    d5e4:	3332      	adds	r3, #50	; 0x32
    d5e6:	7818      	ldrb	r0, [r3, #0]
    d5e8:	0027      	movs	r7, r4
    d5ea:	09c1      	lsrs	r1, r0, #7
    d5ec:	0680      	lsls	r0, r0, #26
    d5ee:	0f40      	lsrs	r0, r0, #29
    d5f0:	f7fc fe86 	bl	a300 <radio_switch_complete_and_tx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    d5f4:	23be      	movs	r3, #190	; 0xbe
    d5f6:	22dc      	movs	r2, #220	; 0xdc
    d5f8:	33ff      	adds	r3, #255	; 0xff
    d5fa:	5ceb      	ldrb	r3, [r5, r3]
    d5fc:	0052      	lsls	r2, r2, #1
    d5fe:	58aa      	ldr	r2, [r5, r2]
    d600:	009b      	lsls	r3, r3, #2
    d602:	5899      	ldr	r1, [r3, r2]
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    d604:	0020      	movs	r0, r4
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    d606:	3108      	adds	r1, #8
	radio_switch_complete_and_tx(conn->phy_tx, conn->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	rx_packet_set(conn, (struct pdu_data *)
    d608:	f7fe fbb6 	bl	bd78 <rx_packet_set>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    d60c:	7f22      	ldrb	r2, [r4, #28]
    d60e:	3717      	adds	r7, #23
    d610:	0693      	lsls	r3, r2, #26
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d612:	0e9b      	lsrs	r3, r3, #26

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    d614:	0652      	lsls	r2, r2, #25
    d616:	d507      	bpl.n	d628 <event_slave+0xc4>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    d618:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    d61a:	8be1      	ldrh	r1, [r4, #30]
    d61c:	3801      	subs	r0, #1
    d61e:	003a      	movs	r2, r7
    d620:	b280      	uxth	r0, r0
    d622:	f7ff ff3f 	bl	d4a4 <chan_sel_2>
    d626:	e01a      	b.n	d65e <event_slave+0xfa>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d628:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    d62a:	9303      	str	r3, [sp, #12]
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d62c:	7fa3      	ldrb	r3, [r4, #30]
    d62e:	3001      	adds	r0, #1
    d630:	4358      	muls	r0, r3
    d632:	7fe3      	ldrb	r3, [r4, #31]
    d634:	2125      	movs	r1, #37	; 0x25
    d636:	18c0      	adds	r0, r0, r3
    d638:	f7f2 ff22 	bl	480 <__aeabi_idivmod>
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d63c:	2207      	movs	r2, #7
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    d63e:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    d640:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    d642:	08c3      	lsrs	r3, r0, #3
    d644:	5cfb      	ldrb	r3, [r7, r3]
    d646:	4011      	ands	r1, r2
    d648:	410b      	asrs	r3, r1
    d64a:	3a06      	subs	r2, #6
    d64c:	4213      	tst	r3, r2
    d64e:	d106      	bne.n	d65e <event_slave+0xfa>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    d650:	9903      	ldr	r1, [sp, #12]
    d652:	f7f2 fe2b 	bl	2ac <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    d656:	0038      	movs	r0, r7
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    d658:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    d65a:	f7fe f84a 	bl	b6f2 <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    d65e:	f7ff f8db 	bl	c818 <chan_set>

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    d662:	6d22      	ldr	r2, [r4, #80]	; 0x50
    d664:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d666:	189b      	adds	r3, r3, r2
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
    d668:	2200      	movs	r2, #0
    d66a:	6522      	str	r2, [r4, #80]	; 0x50
	if (conn->role.slave.window_widening_event_us >
	    conn->role.slave.window_widening_max_us) {
    d66c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    d66e:	6563      	str	r3, [r4, #84]	; 0x54
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
	if (conn->role.slave.window_widening_event_us >
    d670:	4293      	cmp	r3, r2
    d672:	d900      	bls.n	d676 <event_slave+0x112>
	    conn->role.slave.window_widening_max_us) {
		conn->role.slave.window_widening_event_us =
    d674:	6562      	str	r2, [r4, #84]	; 0x54
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    d676:	2000      	movs	r0, #0

	remainder_us =
    d678:	0031      	movs	r1, r6
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    d67a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    d67c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    d67e:	3109      	adds	r1, #9
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    d680:	189b      	adds	r3, r3, r2
    d682:	65e3      	str	r3, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    d684:	68aa      	ldr	r2, [r5, #8]
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    d686:	65a0      	str	r0, [r4, #88]	; 0x58

	remainder_us =
    d688:	f7fc fed6 	bl	a438 <radio_tmr_start>
    d68c:	0005      	movs	r5, r0
		radio_tmr_start(0, ticks_at_expire +
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
	radio_tmr_aa_capture();
    d68e:	f7fc ff69 	bl	a564 <radio_tmr_aa_capture>
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
    d692:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d694:	0058      	lsls	r0, r3, #1
    d696:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    d698:	3340      	adds	r3, #64	; 0x40
    d69a:	18c0      	adds	r0, r0, r3
    d69c:	1947      	adds	r7, r0, r5
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    d69e:	0025      	movs	r5, r4
    d6a0:	3533      	adds	r5, #51	; 0x33
    d6a2:	7828      	ldrb	r0, [r5, #0]
    d6a4:	0680      	lsls	r0, r0, #26
    d6a6:	0f40      	lsrs	r0, r0, #29
    d6a8:	f7fc fdc0 	bl	a22c <radio_rx_ready_delay_get>
	hcto += addr_us_get(conn->phy_rx);
    d6ac:	782b      	ldrb	r3, [r5, #0]
	hcto = remainder_us + (RADIO_TICKER_JITTER_US << 2) +
	       (conn->role.slave.window_widening_event_us << 1) +
	       conn->role.slave.window_size_event_us;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
    d6ae:	1838      	adds	r0, r7, r0
	hcto += addr_us_get(conn->phy_rx);
    d6b0:	069b      	lsls	r3, r3, #26
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    d6b2:	0f5b      	lsrs	r3, r3, #29
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
    d6b4:	2218      	movs	r2, #24
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    d6b6:	2b02      	cmp	r3, #2
    d6b8:	d005      	beq.n	d6c6 <event_slave+0x162>
    d6ba:	2b04      	cmp	r3, #4
    d6bc:	d102      	bne.n	d6c4 <event_slave+0x160>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    d6be:	3261      	adds	r2, #97	; 0x61
    d6c0:	32ff      	adds	r2, #255	; 0xff
    d6c2:	e000      	b.n	d6c6 <event_slave+0x162>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
    d6c4:	2228      	movs	r2, #40	; 0x28
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	hcto += radio_rx_ready_delay_get(0);
	hcto += addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	radio_tmr_hcto_configure(hcto);
    d6c6:	1810      	adds	r0, r2, r0
    d6c8:	f7fc ff20 	bl	a50c <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
    d6cc:	f7fc ff78 	bl	a5c0 <radio_tmr_end_capture>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    d6d0:	8c21      	ldrh	r1, [r4, #32]
    d6d2:	0032      	movs	r2, r6
    d6d4:	3107      	adds	r1, #7
    d6d6:	b2c9      	uxtb	r1, r1
    d6d8:	0020      	movs	r0, r4
    d6da:	f7ff fd29 	bl	d130 <preempt_calc>
    d6de:	2800      	cmp	r0, #0
    d6e0:	d005      	beq.n	d6ee <event_slave+0x18a>
				      conn->handle), ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    d6e2:	2204      	movs	r2, #4
    d6e4:	4b0d      	ldr	r3, [pc, #52]	; (d71c <event_slave+0x1b8>)
    d6e6:	741a      	strb	r2, [r3, #16]
		radio_disable();
    d6e8:	f7fc fdb0 	bl	a24c <radio_disable>
    d6ec:	e010      	b.n	d710 <event_slave+0x1ac>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    d6ee:	0003      	movs	r3, r0
    d6f0:	4a12      	ldr	r2, [pc, #72]	; (d73c <event_slave+0x1d8>)
    d6f2:	0001      	movs	r1, r0
    d6f4:	f7fd ff80 	bl	b5f8 <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    d6f8:	2302      	movs	r3, #2
    d6fa:	4398      	bics	r0, r3
    d6fc:	d008      	beq.n	d710 <event_slave+0x1ac>
    d6fe:	4b08      	ldr	r3, [pc, #32]	; (d720 <event_slave+0x1bc>)
    d700:	4a08      	ldr	r2, [pc, #32]	; (d724 <event_slave+0x1c0>)
    d702:	9301      	str	r3, [sp, #4]
    d704:	4b08      	ldr	r3, [pc, #32]	; (d728 <event_slave+0x1c4>)
    d706:	4909      	ldr	r1, [pc, #36]	; (d72c <event_slave+0x1c8>)
    d708:	9300      	str	r3, [sp, #0]
    d70a:	480d      	ldr	r0, [pc, #52]	; (d740 <event_slave+0x1dc>)
    d70c:	4b09      	ldr	r3, [pc, #36]	; (d734 <event_slave+0x1d0>)
    d70e:	e74a      	b.n	d5a6 <event_slave+0x42>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    d710:	2002      	movs	r0, #2
    d712:	f7fe febd 	bl	c490 <packet_tx_enqueue>

	DEBUG_RADIO_START_S(0);
}
    d716:	b005      	add	sp, #20
    d718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d71a:	46c0      	nop			; (mov r8, r8)
    d71c:	20001254 	.word	0x20001254
    d720:	000145b0 	.word	0x000145b0
    d724:	00014570 	.word	0x00014570
    d728:	000145b5 	.word	0x000145b5
    d72c:	00014577 	.word	0x00014577
    d730:	00015f24 	.word	0x00015f24
    d734:	0001720e 	.word	0x0001720e
    d738:	00015fdc 	.word	0x00015fdc
    d73c:	0000c1a5 	.word	0x0000c1a5
    d740:	00015cb7 	.word	0x00015cb7

0000d744 <ctrl_tx_enqueue>:
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    d744:	0003      	movs	r3, r0
	p->next = node_tx;
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
    d746:	b510      	push	{r4, lr}
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    d748:	33c0      	adds	r3, #192	; 0xc0
    d74a:	781a      	ldrb	r2, [r3, #0]
    d74c:	30fc      	adds	r0, #252	; 0xfc

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
    d74e:	09d3      	lsrs	r3, r2, #7
    d750:	d11c      	bne.n	d78c <ctrl_tx_enqueue+0x48>
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    d752:	6883      	ldr	r3, [r0, #8]
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    d754:	2b00      	cmp	r3, #0
    d756:	d019      	beq.n	d78c <ctrl_tx_enqueue+0x48>
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    d758:	0712      	lsls	r2, r2, #28
    d75a:	d502      	bpl.n	d762 <ctrl_tx_enqueue+0x1e>
				    /* data PDU tx is not paused */
				    (conn->pause_tx == 0) ||
    d75c:	68c2      	ldr	r2, [r0, #12]
    d75e:	4293      	cmp	r3, r2
    d760:	d114      	bne.n	d78c <ctrl_tx_enqueue+0x48>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    d762:	6902      	ldr	r2, [r0, #16]
    d764:	4293      	cmp	r3, r2
    d766:	d101      	bne.n	d76c <ctrl_tx_enqueue+0x28>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    d768:	681a      	ldr	r2, [r3, #0]
    d76a:	6102      	str	r2, [r0, #16]
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
    d76c:	68c2      	ldr	r2, [r0, #12]
    d76e:	2a00      	cmp	r2, #0
    d770:	d103      	bne.n	d77a <ctrl_tx_enqueue+0x36>
			node_tx->next = conn->pkt_tx_head->next;
    d772:	681a      	ldr	r2, [r3, #0]
    d774:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    d776:	6019      	str	r1, [r3, #0]
    d778:	e00e      	b.n	d798 <ctrl_tx_enqueue+0x54>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    d77a:	6903      	ldr	r3, [r0, #16]
    d77c:	6814      	ldr	r4, [r2, #0]
    d77e:	429c      	cmp	r4, r3
    d780:	d001      	beq.n	d786 <ctrl_tx_enqueue+0x42>
    d782:	0022      	movs	r2, r4
    d784:	e7fa      	b.n	d77c <ctrl_tx_enqueue+0x38>
		p = p->next;
	}

	node_tx->next = p->next;
    d786:	600b      	str	r3, [r1, #0]
	p->next = node_tx;
    d788:	6011      	str	r1, [r2, #0]
    d78a:	e00f      	b.n	d7ac <ctrl_tx_enqueue+0x68>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
    d78c:	68c3      	ldr	r3, [r0, #12]
    d78e:	2b00      	cmp	r3, #0
    d790:	d104      	bne.n	d79c <ctrl_tx_enqueue+0x58>
			node_tx->next = conn->pkt_tx_head;
    d792:	6883      	ldr	r3, [r0, #8]
    d794:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    d796:	6081      	str	r1, [r0, #8]
			conn->pkt_tx_ctrl = node_tx;
    d798:	60c1      	str	r1, [r0, #12]
    d79a:	e007      	b.n	d7ac <ctrl_tx_enqueue+0x68>
{
	struct radio_pdu_node_tx *p;

	/* TODO: optimise by having a ctrl_last member. */
	p = conn->pkt_tx_ctrl;
	while (p->next != conn->pkt_tx_data) {
    d79c:	6902      	ldr	r2, [r0, #16]
    d79e:	681c      	ldr	r4, [r3, #0]
    d7a0:	4294      	cmp	r4, r2
    d7a2:	d001      	beq.n	d7a8 <ctrl_tx_enqueue+0x64>
    d7a4:	0023      	movs	r3, r4
    d7a6:	e7fa      	b.n	d79e <ctrl_tx_enqueue+0x5a>
		p = p->next;
	}

	node_tx->next = p->next;
    d7a8:	600a      	str	r2, [r1, #0]
	p->next = node_tx;
    d7aa:	6019      	str	r1, [r3, #0]
			ctrl_tx_enqueue_tail(conn, node_tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
    d7ac:	680b      	ldr	r3, [r1, #0]
    d7ae:	2b00      	cmp	r3, #0
    d7b0:	d100      	bne.n	d7b4 <ctrl_tx_enqueue+0x70>
		conn->pkt_tx_last = node_tx;
    d7b2:	6141      	str	r1, [r0, #20]
	}
}
    d7b4:	bd10      	pop	{r4, pc}
	...

0000d7b8 <start_enc_rsp_send>:
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    d7b8:	b513      	push	{r0, r1, r4, lr}
    d7ba:	000b      	movs	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
    d7bc:	2100      	movs	r1, #0
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    d7be:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
    d7c0:	428b      	cmp	r3, r1
    d7c2:	d115      	bne.n	d7f0 <start_enc_rsp_send+0x38>
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d7c4:	4811      	ldr	r0, [pc, #68]	; (d80c <start_enc_rsp_send+0x54>)
    d7c6:	30d9      	adds	r0, #217	; 0xd9
    d7c8:	30ff      	adds	r0, #255	; 0xff
    d7ca:	f7fc fb4f 	bl	9e6c <mem_acquire>
    d7ce:	0001      	movs	r1, r0
		LL_ASSERT(node_tx);

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
    d7d0:	1d03      	adds	r3, r0, #4
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		LL_ASSERT(node_tx);
    d7d2:	2800      	cmp	r0, #0
    d7d4:	d10c      	bne.n	d7f0 <start_enc_rsp_send+0x38>
    d7d6:	4b0e      	ldr	r3, [pc, #56]	; (d810 <start_enc_rsp_send+0x58>)
    d7d8:	4a0e      	ldr	r2, [pc, #56]	; (d814 <start_enc_rsp_send+0x5c>)
    d7da:	9301      	str	r3, [sp, #4]
    d7dc:	4b0e      	ldr	r3, [pc, #56]	; (d818 <start_enc_rsp_send+0x60>)
    d7de:	490f      	ldr	r1, [pc, #60]	; (d81c <start_enc_rsp_send+0x64>)
    d7e0:	9300      	str	r3, [sp, #0]
    d7e2:	480f      	ldr	r0, [pc, #60]	; (d820 <start_enc_rsp_send+0x68>)
    d7e4:	4b0f      	ldr	r3, [pc, #60]	; (d824 <start_enc_rsp_send+0x6c>)
    d7e6:	f7f3 ffbf 	bl	1768 <printk>
    d7ea:	b662      	cpsie	i
    d7ec:	2004      	movs	r0, #4
    d7ee:	df02      	svc	2

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	}

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d7f0:	2003      	movs	r0, #3
    d7f2:	781a      	ldrb	r2, [r3, #0]
    d7f4:	4302      	orrs	r2, r0
    d7f6:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    d7f8:	2201      	movs	r2, #1
    d7fa:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
    d7fc:	3205      	adds	r2, #5
    d7fe:	70da      	strb	r2, [r3, #3]
		PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;

	if (node_tx) {
    d800:	2900      	cmp	r1, #0
    d802:	d002      	beq.n	d80a <start_enc_rsp_send+0x52>
		ctrl_tx_enqueue(conn, node_tx);
    d804:	0020      	movs	r0, r4
    d806:	f7ff ff9d 	bl	d744 <ctrl_tx_enqueue>
	}
}
    d80a:	bd13      	pop	{r0, r1, r4, pc}
    d80c:	20001254 	.word	0x20001254
    d810:	000145b0 	.word	0x000145b0
    d814:	00014570 	.word	0x00014570
    d818:	000145b5 	.word	0x000145b5
    d81c:	00014577 	.word	0x00014577
    d820:	0001602c 	.word	0x0001602c
    d824:	0001723f 	.word	0x0001723f

0000d828 <pause_enc_rsp_send>:

static void pause_enc_rsp_send(struct connection *conn)
{
    d828:	b513      	push	{r0, r1, r4, lr}
    d82a:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d82c:	480f      	ldr	r0, [pc, #60]	; (d86c <pause_enc_rsp_send+0x44>)
    d82e:	30d9      	adds	r0, #217	; 0xd9
    d830:	30ff      	adds	r0, #255	; 0xff
    d832:	f7fc fb1b 	bl	9e6c <mem_acquire>
    d836:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    d838:	d10c      	bne.n	d854 <pause_enc_rsp_send+0x2c>
    d83a:	4b0d      	ldr	r3, [pc, #52]	; (d870 <pause_enc_rsp_send+0x48>)
    d83c:	4a0d      	ldr	r2, [pc, #52]	; (d874 <pause_enc_rsp_send+0x4c>)
    d83e:	9301      	str	r3, [sp, #4]
    d840:	4b0d      	ldr	r3, [pc, #52]	; (d878 <pause_enc_rsp_send+0x50>)
    d842:	490e      	ldr	r1, [pc, #56]	; (d87c <pause_enc_rsp_send+0x54>)
    d844:	9300      	str	r3, [sp, #0]
    d846:	480e      	ldr	r0, [pc, #56]	; (d880 <pause_enc_rsp_send+0x58>)
    d848:	4b0e      	ldr	r3, [pc, #56]	; (d884 <pause_enc_rsp_send+0x5c>)
    d84a:	f7f3 ff8d 	bl	1768 <printk>
    d84e:	b662      	cpsie	i
    d850:	2004      	movs	r0, #4
    d852:	df02      	svc	2

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d854:	2203      	movs	r2, #3
    d856:	7903      	ldrb	r3, [r0, #4]
    d858:	4313      	orrs	r3, r2
    d85a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    d85c:	2301      	movs	r3, #1
    d85e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
    d860:	330a      	adds	r3, #10
    d862:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;

	ctrl_tx_enqueue(conn, node_tx);
    d864:	0020      	movs	r0, r4
    d866:	f7ff ff6d 	bl	d744 <ctrl_tx_enqueue>
}
    d86a:	bd13      	pop	{r0, r1, r4, pc}
    d86c:	20001254 	.word	0x20001254
    d870:	000145b0 	.word	0x000145b0
    d874:	00014570 	.word	0x00014570
    d878:	000145b5 	.word	0x000145b5
    d87c:	00014577 	.word	0x00014577
    d880:	0001602c 	.word	0x0001602c
    d884:	0001727d 	.word	0x0001727d

0000d888 <reject_ind_ext_send>:
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    d888:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d88a:	0004      	movs	r4, r0
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d88c:	4811      	ldr	r0, [pc, #68]	; (d8d4 <reject_ind_ext_send+0x4c>)
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    d88e:	000e      	movs	r6, r1
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d890:	30d9      	adds	r0, #217	; 0xd9
    d892:	30ff      	adds	r0, #255	; 0xff
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

static void reject_ind_ext_send(struct connection *conn,
				u8_t reject_opcode, u8_t error_code)
{
    d894:	0015      	movs	r5, r2
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d896:	f7fc fae9 	bl	9e6c <mem_acquire>
    d89a:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    d89c:	d10c      	bne.n	d8b8 <reject_ind_ext_send+0x30>
    d89e:	4b0e      	ldr	r3, [pc, #56]	; (d8d8 <reject_ind_ext_send+0x50>)
    d8a0:	4a0e      	ldr	r2, [pc, #56]	; (d8dc <reject_ind_ext_send+0x54>)
    d8a2:	9301      	str	r3, [sp, #4]
    d8a4:	4b0e      	ldr	r3, [pc, #56]	; (d8e0 <reject_ind_ext_send+0x58>)
    d8a6:	490f      	ldr	r1, [pc, #60]	; (d8e4 <reject_ind_ext_send+0x5c>)
    d8a8:	9300      	str	r3, [sp, #0]
    d8aa:	480f      	ldr	r0, [pc, #60]	; (d8e8 <reject_ind_ext_send+0x60>)
    d8ac:	4b0f      	ldr	r3, [pc, #60]	; (d8ec <reject_ind_ext_send+0x64>)
    d8ae:	f7f3 ff5b 	bl	1768 <printk>
    d8b2:	b662      	cpsie	i
    d8b4:	2004      	movs	r0, #4
    d8b6:	df02      	svc	2

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d8b8:	2203      	movs	r2, #3
    d8ba:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
    d8bc:	7206      	strb	r6, [r0, #8]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d8be:	4313      	orrs	r3, r2
    d8c0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    d8c2:	2311      	movs	r3, #17
		PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
    d8c4:	7245      	strb	r5, [r0, #9]
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    d8c6:	7142      	strb	r2, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    d8c8:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
		error_code;

	ctrl_tx_enqueue(conn, node_tx);
    d8ca:	0020      	movs	r0, r4
    d8cc:	f7ff ff3a 	bl	d744 <ctrl_tx_enqueue>
}
    d8d0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    d8d2:	46c0      	nop			; (mov r8, r8)
    d8d4:	20001254 	.word	0x20001254
    d8d8:	000145b0 	.word	0x000145b0
    d8dc:	00014570 	.word	0x00014570
    d8e0:	000145b5 	.word	0x000145b5
    d8e4:	00014577 	.word	0x00014577
    d8e8:	0001602c 	.word	0x0001602c
    d8ec:	0001710b 	.word	0x0001710b

0000d8f0 <event_connection_prepare>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    d8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16_t event_counter;

	LL_ASSERT(!_radio.ticker_id_prepare);
    d8f2:	4ebd      	ldr	r6, [pc, #756]	; (dbe8 <event_connection_prepare+0x2f8>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

static void event_connection_prepare(u32_t ticks_at_expire,
				     u32_t remainder, u16_t lazy,
				     struct connection *conn)
{
    d8f4:	b093      	sub	sp, #76	; 0x4c
    d8f6:	900d      	str	r0, [sp, #52]	; 0x34
    d8f8:	9111      	str	r1, [sp, #68]	; 0x44
    d8fa:	001c      	movs	r4, r3
	u16_t event_counter;

	LL_ASSERT(!_radio.ticker_id_prepare);
    d8fc:	7b33      	ldrb	r3, [r6, #12]
    d8fe:	2b00      	cmp	r3, #0
    d900:	d008      	beq.n	d914 <event_connection_prepare+0x24>
    d902:	4bba      	ldr	r3, [pc, #744]	; (dbec <event_connection_prepare+0x2fc>)
    d904:	4aba      	ldr	r2, [pc, #744]	; (dbf0 <event_connection_prepare+0x300>)
    d906:	9301      	str	r3, [sp, #4]
    d908:	4bba      	ldr	r3, [pc, #744]	; (dbf4 <event_connection_prepare+0x304>)
    d90a:	49bb      	ldr	r1, [pc, #748]	; (dbf8 <event_connection_prepare+0x308>)
    d90c:	9300      	str	r3, [sp, #0]
    d90e:	48bb      	ldr	r0, [pc, #748]	; (dbfc <event_connection_prepare+0x30c>)
    d910:	4bbb      	ldr	r3, [pc, #748]	; (dc00 <event_connection_prepare+0x310>)
    d912:	e216      	b.n	dd42 <event_connection_prepare+0x452>
	_radio.ticker_id_prepare =
    d914:	8c23      	ldrh	r3, [r4, #32]
    d916:	3307      	adds	r3, #7
    d918:	b2db      	uxtb	r3, r3
    d91a:	7333      	strb	r3, [r6, #12]
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    d91c:	0023      	movs	r3, r4
    d91e:	3344      	adds	r3, #68	; 0x44
    d920:	781b      	ldrb	r3, [r3, #0]
    d922:	07db      	lsls	r3, r3, #31
    d924:	d509      	bpl.n	d93a <event_connection_prepare+0x4a>
		conn->role.slave.window_widening_prepare_us +=
    d926:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    d928:	1c53      	adds	r3, r2, #1
    d92a:	434b      	muls	r3, r1
    d92c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    d92e:	185b      	adds	r3, r3, r1
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
		    conn->role.slave.window_widening_max_us) {
    d930:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
	_radio.ticker_id_prepare =
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
		conn->role.slave.window_widening_prepare_us +=
    d932:	6523      	str	r3, [r4, #80]	; 0x50
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
    d934:	428b      	cmp	r3, r1
    d936:	d900      	bls.n	d93a <event_connection_prepare+0x4a>
		    conn->role.slave.window_widening_max_us) {
			conn->role.slave.window_widening_prepare_us =
    d938:	6521      	str	r1, [r4, #80]	; 0x50
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    d93a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    d93c:	18d2      	adds	r2, r2, r3

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    d93e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    d940:	b292      	uxth	r2, r2
    d942:	8522      	strh	r2, [r4, #40]	; 0x28

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    d944:	18d2      	adds	r2, r2, r3
    d946:	b293      	uxth	r3, r2
    d948:	930a      	str	r3, [sp, #40]	; 0x28

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    d94a:	0023      	movs	r3, r4
    d94c:	3369      	adds	r3, #105	; 0x69
    d94e:	781a      	ldrb	r2, [r3, #0]
    d950:	3b01      	subs	r3, #1
    d952:	781b      	ldrb	r3, [r3, #0]
    d954:	429a      	cmp	r2, r3
    d956:	d000      	beq.n	d95a <event_connection_prepare+0x6a>
    d958:	e0bd      	b.n	dad6 <event_connection_prepare+0x1e6>
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
    d95a:	0027      	movs	r7, r4

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    d95c:	0023      	movs	r3, r4
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
    d95e:	37bd      	adds	r7, #189	; 0xbd

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	/* check if PHY Req procedure is requested and no other procedure
	 * using instant is active.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    d960:	33bc      	adds	r3, #188	; 0xbc
    d962:	783a      	ldrb	r2, [r7, #0]
    d964:	781b      	ldrb	r3, [r3, #0]
    d966:	429a      	cmp	r2, r3
    d968:	d101      	bne.n	d96e <event_connection_prepare+0x7e>
    d96a:	f000 fe7f 	bl	e66c <event_connection_prepare+0xd7c>
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d96e:	2200      	movs	r2, #0
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    d970:	0025      	movs	r5, r4
	if ((conn->llcp_ack == conn->llcp_req) &&
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d972:	0010      	movs	r0, r2
    d974:	2305      	movs	r3, #5
    d976:	0011      	movs	r1, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    d978:	35be      	adds	r5, #190	; 0xbe
	if ((conn->llcp_ack == conn->llcp_req) &&
	    (conn->llcp_phy.ack != conn->llcp_phy.req)) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    d97a:	f7fe fc21 	bl	c1c0 <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
static inline void event_phy_req_prep(struct connection *conn)
{
	switch (conn->llcp_phy.state) {
    d97e:	7828      	ldrb	r0, [r5, #0]
    d980:	0780      	lsls	r0, r0, #30
    d982:	0f80      	lsrs	r0, r0, #30
    d984:	f7f2 fbf8 	bl	178 <__gnu_thumb1_case_uqi>
    d988:	409e9e02 	.word	0x409e9e02
	{
		struct pdu_data_llctrl_phy_req_rsp *pr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d98c:	0030      	movs	r0, r6
    d98e:	30d9      	adds	r0, #217	; 0xd9
    d990:	30ff      	adds	r0, #255	; 0xff
    d992:	f7fc fa6b 	bl	9e6c <mem_acquire>
    d996:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    d998:	d100      	bne.n	d99c <event_connection_prepare+0xac>
    d99a:	e093      	b.n	dac4 <event_connection_prepare+0x1d4>
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    d99c:	2703      	movs	r7, #3
    d99e:	2201      	movs	r2, #1
    d9a0:	782b      	ldrb	r3, [r5, #0]

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    d9a2:	2607      	movs	r6, #7
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		if (!node_tx) {
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    d9a4:	43bb      	bics	r3, r7
    d9a6:	4313      	orrs	r3, r2

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    d9a8:	0022      	movs	r2, r4
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
		if (!node_tx) {
			break;
		}

		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    d9aa:	702b      	strb	r3, [r5, #0]

		/* update preferred phy */
		conn->phy_pref_tx = conn->llcp_phy.tx;
    d9ac:	3232      	adds	r2, #50	; 0x32
    d9ae:	7810      	ldrb	r0, [r2, #0]
    d9b0:	089b      	lsrs	r3, r3, #2
    d9b2:	43b0      	bics	r0, r6
    d9b4:	4033      	ands	r3, r6
    d9b6:	4303      	orrs	r3, r0
    d9b8:	7013      	strb	r3, [r2, #0]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    d9ba:	782b      	ldrb	r3, [r5, #0]
    d9bc:	7850      	ldrb	r0, [r2, #1]
    d9be:	095b      	lsrs	r3, r3, #5
    d9c0:	43b0      	bics	r0, r6
    d9c2:	4033      	ands	r3, r6
    d9c4:	4303      	orrs	r3, r0
    d9c6:	7053      	strb	r3, [r2, #1]
		conn->phy_pref_flags = conn->llcp_phy.flags;
    d9c8:	0023      	movs	r3, r4
    d9ca:	2001      	movs	r0, #1
    d9cc:	2640      	movs	r6, #64	; 0x40
    d9ce:	33bf      	adds	r3, #191	; 0xbf
    d9d0:	781b      	ldrb	r3, [r3, #0]
    d9d2:	07db      	lsls	r3, r3, #31
    d9d4:	0fdb      	lsrs	r3, r3, #31
    d9d6:	4018      	ands	r0, r3
    d9d8:	7813      	ldrb	r3, [r2, #0]
    d9da:	0180      	lsls	r0, r0, #6
    d9dc:	43b3      	bics	r3, r6
    d9de:	4318      	orrs	r0, r3
    d9e0:	7010      	strb	r0, [r2, #0]

		/* place the phy req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d9e2:	790b      	ldrb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    d9e4:	714f      	strb	r7, [r1, #5]
		conn->phy_pref_rx = conn->llcp_phy.rx;
		conn->phy_pref_flags = conn->llcp_phy.flags;

		/* place the phy req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d9e6:	433b      	orrs	r3, r7
    d9e8:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
				   sizeof(struct pdu_data_llctrl_phy_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    d9ea:	2316      	movs	r3, #22
    d9ec:	71cb      	strb	r3, [r1, #7]
			PDU_DATA_LLCTRL_TYPE_PHY_REQ;

		pr = (struct pdu_data_llctrl_phy_req_rsp *)
		     &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
    d9ee:	782b      	ldrb	r3, [r5, #0]
		pr->rx_phys = conn->llcp_phy.rx;

		ctrl_tx_enqueue(conn, node_tx);
    d9f0:	0020      	movs	r0, r4
		pdu_ctrl_tx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_PHY_REQ;

		pr = (struct pdu_data_llctrl_phy_req_rsp *)
		     &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_req;
		pr->tx_phys = conn->llcp_phy.tx;
    d9f2:	06db      	lsls	r3, r3, #27
    d9f4:	0f5b      	lsrs	r3, r3, #29
    d9f6:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    d9f8:	782b      	ldrb	r3, [r5, #0]
    d9fa:	095b      	lsrs	r3, r3, #5
    d9fc:	724b      	strb	r3, [r1, #9]

		ctrl_tx_enqueue(conn, node_tx);
    d9fe:	f7ff fea1 	bl	d744 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    da02:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    da04:	8763      	strh	r3, [r4, #58]	; 0x3a
    da06:	e05d      	b.n	dac4 <event_connection_prepare+0x1d4>
	break;

	case LLCP_PHY_STATE_UPD:
	{
		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
    da08:	0023      	movs	r3, r4
    da0a:	33bc      	adds	r3, #188	; 0xbc
    da0c:	781b      	ldrb	r3, [r3, #0]
    da0e:	703b      	strb	r3, [r7, #0]

		/* select only one tx phy, prefer 2M */
		if (conn->llcp_phy.tx & BIT(1)) {
    da10:	0023      	movs	r3, r4
    da12:	33be      	adds	r3, #190	; 0xbe
    da14:	781a      	ldrb	r2, [r3, #0]
    da16:	06d1      	lsls	r1, r2, #27
    da18:	0f49      	lsrs	r1, r1, #29
    da1a:	0788      	lsls	r0, r1, #30
    da1c:	d503      	bpl.n	da26 <event_connection_prepare+0x136>
			conn->llcp_phy.tx = BIT(1);
    da1e:	211c      	movs	r1, #28
    da20:	438a      	bics	r2, r1
    da22:	3914      	subs	r1, #20
    da24:	e00b      	b.n	da3e <event_connection_prepare+0x14e>
    da26:	2004      	movs	r0, #4
		} else if (conn->llcp_phy.tx & BIT(0)) {
    da28:	07cd      	lsls	r5, r1, #31
    da2a:	d503      	bpl.n	da34 <event_connection_prepare+0x144>
			conn->llcp_phy.tx = BIT(0);
    da2c:	211c      	movs	r1, #28
    da2e:	438a      	bics	r2, r1
    da30:	4302      	orrs	r2, r0
    da32:	e005      	b.n	da40 <event_connection_prepare+0x150>
    da34:	251c      	movs	r5, #28
		} else if (conn->llcp_phy.tx & BIT(2)) {
			conn->llcp_phy.tx = BIT(2);
    da36:	43aa      	bics	r2, r5
		/* select only one tx phy, prefer 2M */
		if (conn->llcp_phy.tx & BIT(1)) {
			conn->llcp_phy.tx = BIT(1);
		} else if (conn->llcp_phy.tx & BIT(0)) {
			conn->llcp_phy.tx = BIT(0);
		} else if (conn->llcp_phy.tx & BIT(2)) {
    da38:	4201      	tst	r1, r0
    da3a:	d001      	beq.n	da40 <event_connection_prepare+0x150>
			conn->llcp_phy.tx = BIT(2);
    da3c:	2110      	movs	r1, #16
    da3e:	430a      	orrs	r2, r1
		} else {
			conn->llcp_phy.tx = 0;
    da40:	701a      	strb	r2, [r3, #0]
		}

		/* select only one rx phy, prefer 2M */
		if (conn->llcp_phy.rx & BIT(1)) {
    da42:	7818      	ldrb	r0, [r3, #0]
    da44:	0941      	lsrs	r1, r0, #5
    da46:	078a      	lsls	r2, r1, #30
    da48:	d504      	bpl.n	da54 <event_connection_prepare+0x164>
			conn->llcp_phy.rx = BIT(1);
    da4a:	211f      	movs	r1, #31
    da4c:	0002      	movs	r2, r0
    da4e:	400a      	ands	r2, r1
    da50:	3121      	adds	r1, #33	; 0x21
    da52:	e00d      	b.n	da70 <event_connection_prepare+0x180>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    da54:	07ca      	lsls	r2, r1, #31
    da56:	d504      	bpl.n	da62 <event_connection_prepare+0x172>
			conn->llcp_phy.rx = BIT(0);
    da58:	211f      	movs	r1, #31
    da5a:	0002      	movs	r2, r0
    da5c:	400a      	ands	r2, r1
    da5e:	3101      	adds	r1, #1
    da60:	e006      	b.n	da70 <event_connection_prepare+0x180>
    da62:	221f      	movs	r2, #31
		} else if (conn->llcp_phy.rx & BIT(2)) {
    da64:	2504      	movs	r5, #4
			conn->llcp_phy.rx = BIT(2);
    da66:	4002      	ands	r2, r0
		/* select only one rx phy, prefer 2M */
		if (conn->llcp_phy.rx & BIT(1)) {
			conn->llcp_phy.rx = BIT(1);
		} else if (conn->llcp_phy.rx & BIT(0)) {
			conn->llcp_phy.rx = BIT(0);
		} else if (conn->llcp_phy.rx & BIT(2)) {
    da68:	4229      	tst	r1, r5
    da6a:	d002      	beq.n	da72 <event_connection_prepare+0x182>
			conn->llcp_phy.rx = BIT(2);
    da6c:	2180      	movs	r1, #128	; 0x80
    da6e:	4249      	negs	r1, r1
    da70:	430a      	orrs	r2, r1
		} else {
			conn->llcp_phy.rx = 0;
		}

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    da72:	0021      	movs	r1, r4
    da74:	2507      	movs	r5, #7
    da76:	261c      	movs	r6, #28
		} else if (conn->llcp_phy.rx & BIT(0)) {
			conn->llcp_phy.rx = BIT(0);
		} else if (conn->llcp_phy.rx & BIT(2)) {
			conn->llcp_phy.rx = BIT(2);
		} else {
			conn->llcp_phy.rx = 0;
    da78:	701a      	strb	r2, [r3, #0]
		}

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    da7a:	781a      	ldrb	r2, [r3, #0]
    da7c:	316c      	adds	r1, #108	; 0x6c
    da7e:	7808      	ldrb	r0, [r1, #0]
    da80:	0892      	lsrs	r2, r2, #2
    da82:	402a      	ands	r2, r5
    da84:	43b0      	bics	r0, r6
    da86:	0092      	lsls	r2, r2, #2
    da88:	4302      	orrs	r2, r0
    da8a:	700a      	strb	r2, [r1, #0]
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    da8c:	781b      	ldrb	r3, [r3, #0]
    da8e:	7808      	ldrb	r0, [r1, #0]
    da90:	095b      	lsrs	r3, r3, #5
    da92:	015a      	lsls	r2, r3, #5
    da94:	231f      	movs	r3, #31
    da96:	4003      	ands	r3, r0
    da98:	4313      	orrs	r3, r2
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    da9a:	0022      	movs	r2, r4

		/* Initiate PHY Update Ind */
		conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
    da9c:	b2d8      	uxtb	r0, r3
    da9e:	2301      	movs	r3, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    daa0:	32bf      	adds	r2, #191	; 0xbf
    daa2:	7812      	ldrb	r2, [r2, #0]
    daa4:	40da      	lsrs	r2, r3
    daa6:	401a      	ands	r2, r3
    daa8:	409a      	lsls	r2, r3
    daaa:	4303      	orrs	r3, r0
    daac:	2002      	movs	r0, #2
    daae:	4383      	bics	r3, r0
    dab0:	4313      	orrs	r3, r2
    dab2:	700b      	strb	r3, [r1, #0]

		conn->llcp_type = LLCP_PHY_UPD;
    dab4:	0023      	movs	r3, r4
		conn->llcp_ack--;
    dab6:	0022      	movs	r2, r4
		conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
		/* conn->llcp.phy_upd_ind.instant = 0; */
		conn->llcp.phy_upd_ind.initiate = 1;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;

		conn->llcp_type = LLCP_PHY_UPD;
    dab8:	336a      	adds	r3, #106	; 0x6a
    daba:	701d      	strb	r5, [r3, #0]
		conn->llcp_ack--;
    dabc:	3269      	adds	r2, #105	; 0x69
    dabe:	7813      	ldrb	r3, [r2, #0]
    dac0:	3b01      	subs	r3, #1
    dac2:	7013      	strb	r3, [r2, #0]
		event_phy_req_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

	/* check if procedure is requested */
	if (conn->llcp_ack != conn->llcp_req) {
    dac4:	0023      	movs	r3, r4
    dac6:	3369      	adds	r3, #105	; 0x69
    dac8:	781a      	ldrb	r2, [r3, #0]
    daca:	3b01      	subs	r3, #1
    dacc:	781b      	ldrb	r3, [r3, #0]
    dace:	429a      	cmp	r2, r3
    dad0:	d101      	bne.n	dad6 <event_connection_prepare+0x1e6>
    dad2:	f000 fdcb 	bl	e66c <event_connection_prepare+0xd7c>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    dad6:	2200      	movs	r2, #0
    dad8:	2305      	movs	r3, #5
    dada:	0010      	movs	r0, r2
    dadc:	0011      	movs	r1, r2
    dade:	f7fe fb6f 	bl	c1c0 <event_stop>

		switch (conn->llcp_type) {
    dae2:	0023      	movs	r3, r4
    dae4:	336a      	adds	r3, #106	; 0x6a
    dae6:	7818      	ldrb	r0, [r3, #0]
    dae8:	3801      	subs	r0, #1
    daea:	2806      	cmp	r0, #6
    daec:	d901      	bls.n	daf2 <event_connection_prepare+0x202>
    daee:	f000 fdb6 	bl	e65e <event_connection_prepare+0xd6e>
    daf2:	f7f2 fb4b 	bl	18c <__gnu_thumb1_case_uhi>
    daf6:	0007      	.short	0x0007
    daf8:	0354030b 	.word	0x0354030b
    dafc:	04a10473 	.word	0x04a10473
    db00:	051704fd 	.word	0x051704fd
					   u32_t ticks_at_expire)
{
	struct connection *conn_upd;
	u16_t instant_latency;

	conn_upd = _radio.conn_upd;
    db04:	2381      	movs	r3, #129	; 0x81
    db06:	4838      	ldr	r0, [pc, #224]	; (dbe8 <event_connection_prepare+0x2f8>)
    db08:	009b      	lsls	r3, r3, #2
    db0a:	58c2      	ldr	r2, [r0, r3]

	/* set mutex */
	if (!conn_upd) {
    db0c:	2a00      	cmp	r2, #0
    db0e:	d100      	bne.n	db12 <event_connection_prepare+0x222>
		_radio.conn_upd = conn;
    db10:	50c4      	str	r4, [r0, r3]
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
		 0xffff);
	if (conn->llcp.connection_update.state) {
    db12:	0026      	movs	r6, r4
    db14:	2307      	movs	r3, #7
    db16:	3695      	adds	r6, #149	; 0x95
    db18:	7831      	ldrb	r1, [r6, #0]
    db1a:	400b      	ands	r3, r1
    db1c:	d100      	bne.n	db20 <event_connection_prepare+0x230>
    db1e:	e115      	b.n	dd4c <event_connection_prepare+0x45c>
		if (((conn_upd == 0) || (conn_upd == conn)) &&
    db20:	2a00      	cmp	r2, #0
    db22:	d003      	beq.n	db2c <event_connection_prepare+0x23c>
    db24:	4294      	cmp	r4, r2
    db26:	d001      	beq.n	db2c <event_connection_prepare+0x23c>
    db28:	f000 fda0 	bl	e66c <event_connection_prepare+0xd7c>
    db2c:	3b04      	subs	r3, #4
    db2e:	2b01      	cmp	r3, #1
    db30:	d801      	bhi.n	db36 <event_connection_prepare+0x246>
    db32:	f000 fd9b 	bl	e66c <event_connection_prepare+0xd7c>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			struct radio_pdu_node_tx *node_tx;
			struct pdu_data *pdu_ctrl_tx;
			u8_t state;

			node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    db36:	30d9      	adds	r0, #217	; 0xd9
    db38:	30ff      	adds	r0, #255	; 0xff
    db3a:	f7fc f997 	bl	9e6c <mem_acquire>
    db3e:	1e05      	subs	r5, r0, #0
			if (!node_tx) {
    db40:	d101      	bne.n	db46 <event_connection_prepare+0x256>
    db42:	f000 fd93 	bl	e66c <event_connection_prepare+0xd7c>
			pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			state = conn->llcp.connection_update.state;
    db46:	7833      	ldrb	r3, [r6, #0]
    db48:	075b      	lsls	r3, r3, #29
    db4a:	0f5b      	lsrs	r3, r3, #29
			if ((state == LLCP_CONN_STATE_RSP) &&
    db4c:	2b03      	cmp	r3, #3
    db4e:	d105      	bne.n	db5c <event_connection_prepare+0x26c>
			    (conn->role.master.role == 0)) {
    db50:	0023      	movs	r3, r4
    db52:	3344      	adds	r3, #68	; 0x44

#if defined(CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED)
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			state = conn->llcp.connection_update.state;
			if ((state == LLCP_CONN_STATE_RSP) &&
    db54:	781b      	ldrb	r3, [r3, #0]
    db56:	07db      	lsls	r3, r3, #31
    db58:	d508      	bpl.n	db6c <event_connection_prepare+0x27c>
    db5a:	e094      	b.n	dc86 <event_connection_prepare+0x396>
				fp_mayfly_select_or_use =
					mayfly_sched_win_offset_select;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCHED_ADVANCED */
			}

			switch (state) {
    db5c:	2b02      	cmp	r3, #2
    db5e:	d053      	beq.n	dc08 <event_connection_prepare+0x318>
    db60:	2b03      	cmp	r3, #3
    db62:	d100      	bne.n	db66 <event_connection_prepare+0x276>
    db64:	e08f      	b.n	dc86 <event_connection_prepare+0x396>
    db66:	2b01      	cmp	r3, #1
    db68:	d000      	beq.n	db6c <event_connection_prepare+0x27c>
    db6a:	e0e2      	b.n	dd32 <event_connection_prepare+0x442>
			case LLCP_CONN_STATE_INITIATE:
				if (conn->role.master.role == 0) {
    db6c:	0023      	movs	r3, r4
    db6e:	3344      	adds	r3, #68	; 0x44
    db70:	781a      	ldrb	r2, [r3, #0]
    db72:	2301      	movs	r3, #1
    db74:	401a      	ands	r2, r3
    db76:	d147      	bne.n	dc08 <event_connection_prepare+0x318>
			  u32_t ticks_at_expire,
			  struct mayfly *mayfly_sched_offset,
			  void (*fp_mayfly_select_or_use)(void *))
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    db78:	2107      	movs	r1, #7
    db7a:	7833      	ldrb	r3, [r6, #0]
    db7c:	438b      	bics	r3, r1
    db7e:	7033      	strb	r3, [r6, #0]

	/* set instant */
	conn->llcp.connection_update.instant =
    db80:	0026      	movs	r6, r4
    db82:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    db84:	990a      	ldr	r1, [sp, #40]	; 0x28
    db86:	3306      	adds	r3, #6
    db88:	18cb      	adds	r3, r1, r3
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db8a:	2103      	movs	r1, #3
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;

	/* set instant */
	conn->llcp.connection_update.instant =
    db8c:	3674      	adds	r6, #116	; 0x74
    db8e:	8033      	strh	r3, [r6, #0]
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db90:	792b      	ldrb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
    db92:	71ea      	strb	r2, [r5, #7]
	/* set instant */
	conn->llcp.connection_update.instant =
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db94:	430b      	orrs	r3, r1
    db96:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    db98:	230c      	movs	r3, #12
    db9a:	716b      	strb	r3, [r5, #5]
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
    db9c:	0023      	movs	r3, r4
    db9e:	3394      	adds	r3, #148	; 0x94
    dba0:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    dba2:	4918      	ldr	r1, [pc, #96]	; (dc04 <event_connection_prepare+0x314>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_ind);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
    dba4:	722b      	strb	r3, [r5, #8]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    dba6:	0023      	movs	r3, r4
    dba8:	338c      	adds	r3, #140	; 0x8c
    dbaa:	6818      	ldr	r0, [r3, #0]
    dbac:	f7f2 faf8 	bl	1a0 <__aeabi_uidiv>
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
    dbb0:	0023      	movs	r3, r4
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    dbb2:	b280      	uxth	r0, r0
    dbb4:	7268      	strb	r0, [r5, #9]
    dbb6:	0a00      	lsrs	r0, r0, #8
    dbb8:	72a8      	strb	r0, [r5, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
    dbba:	336c      	adds	r3, #108	; 0x6c
    dbbc:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
    dbbe:	72eb      	strb	r3, [r5, #11]
    dbc0:	0a1b      	lsrs	r3, r3, #8
    dbc2:	732b      	strb	r3, [r5, #12]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
    dbc4:	0023      	movs	r3, r4
    dbc6:	336e      	adds	r3, #110	; 0x6e
    dbc8:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
    dbca:	736b      	strb	r3, [r5, #13]
    dbcc:	0a1b      	lsrs	r3, r3, #8
    dbce:	73ab      	strb	r3, [r5, #14]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
		conn->llcp.connection_update.timeout;
    dbd0:	0023      	movs	r3, r4
    dbd2:	3370      	adds	r3, #112	; 0x70
    dbd4:	881b      	ldrh	r3, [r3, #0]
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
    dbd6:	73eb      	strb	r3, [r5, #15]
    dbd8:	0a1b      	lsrs	r3, r3, #8
    dbda:	742b      	strb	r3, [r5, #16]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
		conn->llcp.connection_update.instant;
    dbdc:	8833      	ldrh	r3, [r6, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
    dbde:	746b      	strb	r3, [r5, #17]
    dbe0:	0a1b      	lsrs	r3, r3, #8
    dbe2:	74ab      	strb	r3, [r5, #18]
    dbe4:	e2b8      	b.n	e158 <event_connection_prepare+0x868>
    dbe6:	46c0      	nop			; (mov r8, r8)
    dbe8:	20001254 	.word	0x20001254
    dbec:	000145b0 	.word	0x000145b0
    dbf0:	00014570 	.word	0x00014570
    dbf4:	000145b5 	.word	0x000145b5
    dbf8:	00014577 	.word	0x00014577
    dbfc:	00015ee9 	.word	0x00015ee9
    dc00:	00016f4c 	.word	0x00016f4c
    dc04:	000004e2 	.word	0x000004e2
					    struct pdu_data *pdu_ctrl_tx,
					    u32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    dc08:	2207      	movs	r2, #7
    dc0a:	7833      	ldrb	r3, [r6, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    dc0c:	0021      	movs	r1, r4
					    struct pdu_data *pdu_ctrl_tx,
					    u32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    dc0e:	4393      	bics	r3, r2
    dc10:	3a02      	subs	r2, #2
    dc12:	4313      	orrs	r3, r2
    dc14:	7033      	strb	r3, [r6, #0]

	/* place the conn param req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc16:	792b      	ldrb	r3, [r5, #4]
    dc18:	3a02      	subs	r2, #2
    dc1a:	4313      	orrs	r3, r2
    dc1c:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    dc1e:	2318      	movs	r3, #24
    dc20:	716b      	strb	r3, [r5, #5]
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
    dc22:	3b09      	subs	r3, #9
    dc24:	71eb      	strb	r3, [r5, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    dc26:	316c      	adds	r1, #108	; 0x6c
    dc28:	880b      	ldrh	r3, [r1, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    dc2a:	2200      	movs	r2, #0
    dc2c:	722b      	strb	r3, [r5, #8]
    dc2e:	0a1b      	lsrs	r3, r3, #8
    dc30:	726b      	strb	r3, [r5, #9]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
    dc32:	880b      	ldrh	r3, [r1, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    dc34:	2128      	movs	r1, #40	; 0x28
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    dc36:	72ab      	strb	r3, [r5, #10]
    dc38:	0a1b      	lsrs	r3, r3, #8
    dc3a:	72eb      	strb	r3, [r5, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
    dc3c:	0023      	movs	r3, r4
    dc3e:	336e      	adds	r3, #110	; 0x6e
    dc40:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    dc42:	732b      	strb	r3, [r5, #12]
    dc44:	0a1b      	lsrs	r3, r3, #8
    dc46:	736b      	strb	r3, [r5, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
    dc48:	0023      	movs	r3, r4
    dc4a:	3370      	adds	r3, #112	; 0x70
    dc4c:	881b      	ldrh	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
    dc4e:	742a      	strb	r2, [r5, #16]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    dc50:	73ab      	strb	r3, [r5, #14]
    dc52:	0a1b      	lsrs	r3, r3, #8
    dc54:	73eb      	strb	r3, [r5, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    dc56:	466b      	mov	r3, sp
    dc58:	185b      	adds	r3, r3, r1
    dc5a:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    dc5c:	74ea      	strb	r2, [r5, #19]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    dc5e:	746b      	strb	r3, [r5, #17]
    dc60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    dc62:	752a      	strb	r2, [r5, #20]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    dc64:	0a1b      	lsrs	r3, r3, #8
    dc66:	74ab      	strb	r3, [r5, #18]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 = 0xffff;
    dc68:	2301      	movs	r3, #1
    dc6a:	425b      	negs	r3, r3
    dc6c:	756b      	strb	r3, [r5, #21]
    dc6e:	75ab      	strb	r3, [r5, #22]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 = 0xffff;
    dc70:	75eb      	strb	r3, [r5, #23]
    dc72:	762b      	strb	r3, [r5, #24]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 = 0xffff;
    dc74:	766b      	strb	r3, [r5, #25]
    dc76:	76ab      	strb	r3, [r5, #26]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 = 0xffff;
    dc78:	76eb      	strb	r3, [r5, #27]
    dc7a:	772b      	strb	r3, [r5, #28]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 = 0xffff;
    dc7c:	776b      	strb	r3, [r5, #29]
    dc7e:	77ab      	strb	r3, [r5, #30]

	/* Start Procedure Timeout */
	conn->procedure_expire = conn->procedure_reload;
    dc80:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    dc82:	8763      	strh	r3, [r4, #58]	; 0x3a
    dc84:	e268      	b.n	e158 <event_connection_prepare+0x868>

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    dc86:	0023      	movs	r3, r4
    dc88:	3368      	adds	r3, #104	; 0x68
    dc8a:	781a      	ldrb	r2, [r3, #0]

	/* reset mutex */
	_radio.conn_upd = NULL;
    dc8c:	2100      	movs	r1, #0

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    dc8e:	705a      	strb	r2, [r3, #1]

	/* reset mutex */
	_radio.conn_upd = NULL;
    dc90:	2381      	movs	r3, #129	; 0x81
    dc92:	4abb      	ldr	r2, [pc, #748]	; (df80 <event_connection_prepare+0x690>)
    dc94:	009b      	lsls	r3, r3, #2
    dc96:	50d1      	str	r1, [r2, r3]

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc98:	2203      	movs	r2, #3
    dc9a:	792b      	ldrb	r3, [r5, #4]
    dc9c:	4313      	orrs	r3, r2
    dc9e:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    dca0:	2318      	movs	r3, #24
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    dca2:	0022      	movs	r2, r4

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    dca4:	716b      	strb	r3, [r5, #5]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    dca6:	3b08      	subs	r3, #8
    dca8:	71eb      	strb	r3, [r5, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
    dcaa:	326c      	adds	r2, #108	; 0x6c
    dcac:	8813      	ldrh	r3, [r2, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    dcae:	722b      	strb	r3, [r5, #8]
    dcb0:	0a1b      	lsrs	r3, r3, #8
    dcb2:	726b      	strb	r3, [r5, #9]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
    dcb4:	8813      	ldrh	r3, [r2, #0]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    dcb6:	72ab      	strb	r3, [r5, #10]
    dcb8:	0a1b      	lsrs	r3, r3, #8
    dcba:	72eb      	strb	r3, [r5, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
    dcbc:	0023      	movs	r3, r4
    dcbe:	336e      	adds	r3, #110	; 0x6e
    dcc0:	881b      	ldrh	r3, [r3, #0]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    dcc2:	732b      	strb	r3, [r5, #12]
    dcc4:	0a1b      	lsrs	r3, r3, #8
    dcc6:	736b      	strb	r3, [r5, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
    dcc8:	0023      	movs	r3, r4
    dcca:	3370      	adds	r3, #112	; 0x70
    dccc:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    dcce:	73ab      	strb	r3, [r5, #14]
    dcd0:	0a1b      	lsrs	r3, r3, #8
    dcd2:	73eb      	strb	r3, [r5, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
    dcd4:	0023      	movs	r3, r4
    dcd6:	3372      	adds	r3, #114	; 0x72
    dcd8:	781b      	ldrb	r3, [r3, #0]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
    dcda:	742b      	strb	r3, [r5, #16]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
    dcdc:	0023      	movs	r3, r4
    dcde:	3374      	adds	r3, #116	; 0x74
    dce0:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
    dce2:	746b      	strb	r3, [r5, #17]
    dce4:	0a1b      	lsrs	r3, r3, #8
    dce6:	74ab      	strb	r3, [r5, #18]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
    dce8:	0023      	movs	r3, r4
    dcea:	3376      	adds	r3, #118	; 0x76
    dcec:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
    dcee:	74eb      	strb	r3, [r5, #19]
    dcf0:	0a1b      	lsrs	r3, r3, #8
    dcf2:	752b      	strb	r3, [r5, #20]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
    dcf4:	0023      	movs	r3, r4
    dcf6:	3378      	adds	r3, #120	; 0x78
    dcf8:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
    dcfa:	756b      	strb	r3, [r5, #21]
    dcfc:	0a1b      	lsrs	r3, r3, #8
    dcfe:	75ab      	strb	r3, [r5, #22]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
    dd00:	0023      	movs	r3, r4
    dd02:	337a      	adds	r3, #122	; 0x7a
    dd04:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
    dd06:	75eb      	strb	r3, [r5, #23]
    dd08:	0a1b      	lsrs	r3, r3, #8
    dd0a:	762b      	strb	r3, [r5, #24]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
    dd0c:	0023      	movs	r3, r4
    dd0e:	337c      	adds	r3, #124	; 0x7c
    dd10:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
    dd12:	766b      	strb	r3, [r5, #25]
    dd14:	0a1b      	lsrs	r3, r3, #8
    dd16:	76ab      	strb	r3, [r5, #26]
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
		conn->llcp.connection_update.offset4;
    dd18:	0023      	movs	r3, r4
    dd1a:	337e      	adds	r3, #126	; 0x7e
    dd1c:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
    dd1e:	76eb      	strb	r3, [r5, #27]
    dd20:	0a1b      	lsrs	r3, r3, #8
    dd22:	772b      	strb	r3, [r5, #28]
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
		conn->llcp.connection_update.offset5;
    dd24:	0023      	movs	r3, r4
    dd26:	3380      	adds	r3, #128	; 0x80
    dd28:	881b      	ldrh	r3, [r3, #0]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
    dd2a:	776b      	strb	r3, [r5, #29]
    dd2c:	0a1b      	lsrs	r3, r3, #8
    dd2e:	77ab      	strb	r3, [r5, #30]
    dd30:	e212      	b.n	e158 <event_connection_prepare+0x868>
			case LLCP_CONN_STATE_RSP:
				event_conn_update_st_rsp(conn, pdu_ctrl_tx);
				break;

			default:
				LL_ASSERT(0);
    dd32:	4b94      	ldr	r3, [pc, #592]	; (df84 <event_connection_prepare+0x694>)
    dd34:	9301      	str	r3, [sp, #4]
    dd36:	4b94      	ldr	r3, [pc, #592]	; (df88 <event_connection_prepare+0x698>)
    dd38:	9300      	str	r3, [sp, #0]
    dd3a:	4b94      	ldr	r3, [pc, #592]	; (df8c <event_connection_prepare+0x69c>)
    dd3c:	4a94      	ldr	r2, [pc, #592]	; (df90 <event_connection_prepare+0x6a0>)
    dd3e:	4995      	ldr	r1, [pc, #596]	; (df94 <event_connection_prepare+0x6a4>)
    dd40:	4895      	ldr	r0, [pc, #596]	; (df98 <event_connection_prepare+0x6a8>)
    dd42:	f7f3 fd11 	bl	1768 <printk>
    dd46:	b662      	cpsie	i
    dd48:	2004      	movs	r0, #4
    dd4a:	df02      	svc	2
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
    dd4c:	0022      	movs	r2, r4
    dd4e:	3274      	adds	r2, #116	; 0x74
	/* set mutex */
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
    dd50:	8812      	ldrh	r2, [r2, #0]
    dd52:	990a      	ldr	r1, [sp, #40]	; 0x28
    dd54:	1a8a      	subs	r2, r1, r2
				break;
			}

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (instant_latency <= 0x7FFF) {
    dd56:	b296      	uxth	r6, r2
    dd58:	0412      	lsls	r2, r2, #16
    dd5a:	d501      	bpl.n	dd60 <event_connection_prepare+0x470>
    dd5c:	f000 fc86 	bl	e66c <event_connection_prepare+0xd7c>
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    dd60:	0022      	movs	r2, r4
    dd62:	3268      	adds	r2, #104	; 0x68
    dd64:	7811      	ldrb	r1, [r2, #0]

		/* Reset ticker_id_prepare as role is not continued further
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;
    dd66:	7303      	strb	r3, [r0, #12]
		u16_t conn_interval_new;
		u16_t latency;
		u32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    dd68:	7051      	strb	r1, [r2, #1]
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;

		/* reset mutex */
		if (_radio.conn_upd == conn) {
    dd6a:	2281      	movs	r2, #129	; 0x81
    dd6c:	0092      	lsls	r2, r2, #2
    dd6e:	5881      	ldr	r1, [r0, r2]
    dd70:	428c      	cmp	r4, r1
    dd72:	d100      	bne.n	dd76 <event_connection_prepare+0x486>
			_radio.conn_upd = NULL;
    dd74:	5083      	str	r3, [r0, r2]
    dd76:	0027      	movs	r7, r4
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
    dd78:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    dd7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    dd7c:	376c      	adds	r7, #108	; 0x6c
    dd7e:	4293      	cmp	r3, r2
    dd80:	d10d      	bne.n	dd9e <event_connection_prepare+0x4ae>
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
		    (conn->llcp.connection_update.timeout !=
    dd82:	0023      	movs	r3, r4
    dd84:	3370      	adds	r3, #112	; 0x70
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
    dd86:	881d      	ldrh	r5, [r3, #0]
    dd88:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    dd8a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    dd8c:	21fa      	movs	r1, #250	; 0xfa
    dd8e:	4358      	muls	r0, r3
    dd90:	237d      	movs	r3, #125	; 0x7d
    dd92:	0089      	lsls	r1, r1, #2
    dd94:	4358      	muls	r0, r3
    dd96:	f7f2 fa8d 	bl	2b4 <__aeabi_idiv>
    dd9a:	4285      	cmp	r5, r0
    dd9c:	d022      	beq.n	dde4 <event_connection_prepare+0x4f4>
		    (conn->llcp.connection_update.timeout !=
		     (conn->conn_interval * conn->supervision_reload * 125 / 1000))) {
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    dd9e:	2002      	movs	r0, #2
    dda0:	f7fd fcd8 	bl	b754 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    dda4:	2800      	cmp	r0, #0
    dda6:	d105      	bne.n	ddb4 <event_connection_prepare+0x4c4>
    dda8:	4b76      	ldr	r3, [pc, #472]	; (df84 <event_connection_prepare+0x694>)
    ddaa:	9301      	str	r3, [sp, #4]
    ddac:	4b76      	ldr	r3, [pc, #472]	; (df88 <event_connection_prepare+0x698>)
    ddae:	9300      	str	r3, [sp, #0]
    ddb0:	4b76      	ldr	r3, [pc, #472]	; (df8c <event_connection_prepare+0x69c>)
    ddb2:	e376      	b.n	e4a2 <event_connection_prepare+0xbb2>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    ddb4:	8c23      	ldrh	r3, [r4, #32]
    ddb6:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    ddb8:	2308      	movs	r3, #8
    ddba:	7103      	strb	r3, [r0, #4]
			pdu_data_rx =
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
    ddbc:	2300      	movs	r3, #0
    ddbe:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
    ddc0:	883b      	ldrh	r3, [r7, #0]
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
    ddc2:	7303      	strb	r3, [r0, #12]
    ddc4:	0a1b      	lsrs	r3, r3, #8
    ddc6:	7343      	strb	r3, [r0, #13]
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
				conn->llcp.connection_update.latency;
    ddc8:	0023      	movs	r3, r4
    ddca:	336e      	adds	r3, #110	; 0x6e
    ddcc:	881b      	ldrh	r3, [r3, #0]
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
    ddce:	7383      	strb	r3, [r0, #14]
    ddd0:	0a1b      	lsrs	r3, r3, #8
    ddd2:	73c3      	strb	r3, [r0, #15]
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
				conn->llcp.connection_update.timeout;
    ddd4:	0023      	movs	r3, r4
    ddd6:	3370      	adds	r3, #112	; 0x70
    ddd8:	881b      	ldrh	r3, [r3, #0]
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
    ddda:	7403      	strb	r3, [r0, #16]
    dddc:	0a1b      	lsrs	r3, r3, #8
    ddde:	7443      	strb	r3, [r0, #17]
				conn->llcp.connection_update.timeout;

			/* enqueue connection update complete structure
			 * into queue.
			 */
			packet_rx_enqueue();
    dde0:	f7fe f8a2 	bl	bf28 <packet_rx_enqueue>
		}

		/* restore to normal prepare */
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
    dde4:	6823      	ldr	r3, [r4, #0]
    dde6:	2b00      	cmp	r3, #0
    dde8:	da0b      	bge.n	de02 <event_connection_prepare+0x512>
			u32_t ticks_prepare_to_start =
    ddea:	6861      	ldr	r1, [r4, #4]
    ddec:	68a2      	ldr	r2, [r4, #8]
    ddee:	428a      	cmp	r2, r1
    ddf0:	d200      	bcs.n	ddf4 <event_connection_prepare+0x504>
    ddf2:	000a      	movs	r2, r1
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
    ddf4:	005b      	lsls	r3, r3, #1
    ddf6:	085b      	lsrs	r3, r3, #1
    ddf8:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    ddfa:	1ad3      	subs	r3, r2, r3
    ddfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ddfe:	18d3      	adds	r3, r2, r3
    de00:	930d      	str	r3, [sp, #52]	; 0x34
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    de02:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    de04:	001d      	movs	r5, r3
    de06:	4375      	muls	r5, r6
    de08:	930a      	str	r3, [sp, #40]	; 0x28
		latency = conn_interval_old /
			conn->llcp.connection_update.interval;
    de0a:	883f      	ldrh	r7, [r7, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    de0c:	b2ad      	uxth	r5, r5
		latency = conn_interval_old /
    de0e:	0039      	movs	r1, r7
    de10:	0028      	movs	r0, r5
    de12:	f7f2 f9c5 	bl	1a0 <__aeabi_uidiv>
    de16:	b283      	uxth	r3, r0
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
    de18:	0018      	movs	r0, r3
    de1a:	4378      	muls	r0, r7
    de1c:	b280      	uxth	r0, r0
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
		latency = conn_interval_old /
    de1e:	930e      	str	r3, [sp, #56]	; 0x38
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
			conn->llcp.connection_update.interval;
		if (conn_interval_new > conn_interval_old) {
    de20:	4285      	cmp	r5, r0
    de22:	d20f      	bcs.n	de44 <event_connection_prepare+0x554>
			ticks_at_expire +=
    de24:	2324      	movs	r3, #36	; 0x24
    de26:	1b40      	subs	r0, r0, r5
    de28:	4a5c      	ldr	r2, [pc, #368]	; (df9c <event_connection_prepare+0x6ac>)
    de2a:	33ff      	adds	r3, #255	; 0xff
    de2c:	17c1      	asrs	r1, r0, #31
    de2e:	f7f2 fb4d 	bl	4cc <__aeabi_lmul>
    de32:	2307      	movs	r3, #7
    de34:	4a5a      	ldr	r2, [pc, #360]	; (dfa0 <event_connection_prepare+0x6b0>)
    de36:	f7f2 fb29 	bl	48c <__aeabi_uldivmod>
    de3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de3c:	0200      	lsls	r0, r0, #8
    de3e:	0a00      	lsrs	r0, r0, #8
    de40:	18c3      	adds	r3, r0, r3
    de42:	e00e      	b.n	de62 <event_connection_prepare+0x572>
				TICKER_US_TO_TICKS((conn_interval_new -
						    conn_interval_old) * 1250);
		} else {
			ticks_at_expire -=
    de44:	2324      	movs	r3, #36	; 0x24
    de46:	1a28      	subs	r0, r5, r0
    de48:	4a54      	ldr	r2, [pc, #336]	; (df9c <event_connection_prepare+0x6ac>)
    de4a:	33ff      	adds	r3, #255	; 0xff
    de4c:	17c1      	asrs	r1, r0, #31
    de4e:	f7f2 fb3d 	bl	4cc <__aeabi_lmul>
    de52:	2307      	movs	r3, #7
    de54:	4a52      	ldr	r2, [pc, #328]	; (dfa0 <event_connection_prepare+0x6b0>)
    de56:	f7f2 fb19 	bl	48c <__aeabi_uldivmod>
    de5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de5c:	0200      	lsls	r0, r0, #8
    de5e:	0a00      	lsrs	r0, r0, #8
    de60:	1a1b      	subs	r3, r3, r0
    de62:	930c      	str	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS((conn_interval_old -
						    conn_interval_new) * 1250);
		}
		conn->latency_prepare -= (instant_latency - latency);
    de64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    de66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    de68:	1b9b      	subs	r3, r3, r6
    de6a:	18d3      	adds	r3, r2, r3
    de6c:	8523      	strh	r3, [r4, #40]	; 0x28

		/* calculate the offset, window widening and interval */
		ticks_slot_offset =
    de6e:	6862      	ldr	r2, [r4, #4]
    de70:	6823      	ldr	r3, [r4, #0]
    de72:	920d      	str	r2, [sp, #52]	; 0x34
    de74:	429a      	cmp	r2, r3
    de76:	d200      	bcs.n	de7a <event_connection_prepare+0x58a>
    de78:	930d      	str	r3, [sp, #52]	; 0x34
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    de7a:	0025      	movs	r5, r4
    de7c:	2301      	movs	r3, #1
    de7e:	3544      	adds	r5, #68	; 0x44
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    de80:	4848      	ldr	r0, [pc, #288]	; (dfa4 <event_connection_prepare+0x6b4>)
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    de82:	7829      	ldrb	r1, [r5, #0]
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    de84:	4347      	muls	r7, r0
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    de86:	4019      	ands	r1, r3
    de88:	900f      	str	r0, [sp, #60]	; 0x3c
    de8a:	d100      	bne.n	de8e <event_connection_prepare+0x59e>
    de8c:	e096      	b.n	dfbc <event_connection_prepare+0x6cc>
			conn->role.slave.window_widening_prepare_us -=
    de8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    de90:	493b      	ldr	r1, [pc, #236]	; (df80 <event_connection_prepare+0x690>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    de92:	435e      	muls	r6, r3
    de94:	6d23      	ldr	r3, [r4, #80]	; 0x50
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    de96:	4a44      	ldr	r2, [pc, #272]	; (dfa8 <event_connection_prepare+0x6b8>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    de98:	1b9e      	subs	r6, r3, r6
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    de9a:	23ce      	movs	r3, #206	; 0xce
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    de9c:	6526      	str	r6, [r4, #80]	; 0x50
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    de9e:	005b      	lsls	r3, r3, #1
    dea0:	5ccb      	ldrb	r3, [r1, r3]
				   gc_lookup_ppm[conn->role.slave.sca]) *
    dea2:	7829      	ldrb	r1, [r5, #0]
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    dea4:	005b      	lsls	r3, r3, #1
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    dea6:	5a98      	ldrh	r0, [r3, r2]
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
    dea8:	230e      	movs	r3, #14
    deaa:	400b      	ands	r3, r1
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    deac:	5a9b      	ldrh	r3, [r3, r2]
    deae:	493f      	ldr	r1, [pc, #252]	; (dfac <event_connection_prepare+0x6bc>)
    deb0:	18c0      	adds	r0, r0, r3
    deb2:	4378      	muls	r0, r7
    deb4:	4b3e      	ldr	r3, [pc, #248]	; (dfb0 <event_connection_prepare+0x6c0>)
    deb6:	18c0      	adds	r0, r0, r3
    deb8:	f7f2 f972 	bl	1a0 <__aeabi_uidiv>
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
    debc:	0023      	movs	r3, r4
			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
    debe:	087a      	lsrs	r2, r7, #1
    dec0:	3a96      	subs	r2, #150	; 0x96
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
    dec2:	64a0      	str	r0, [r4, #72]	; 0x48
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
    dec4:	64e2      	str	r2, [r4, #76]	; 0x4c
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
    dec6:	3394      	adds	r3, #148	; 0x94
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    dec8:	781b      	ldrb	r3, [r3, #0]
    deca:	990f      	ldr	r1, [sp, #60]	; 0x3c
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    decc:	0005      	movs	r5, r0
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
    dece:	434b      	muls	r3, r1
    ded0:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    ded2:	2300      	movs	r3, #0

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    ded4:	980e      	ldr	r0, [sp, #56]	; 0x38
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    ded6:	6663      	str	r3, [r4, #100]	; 0x64

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    ded8:	4368      	muls	r0, r5
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    deda:	1836      	adds	r6, r6, r0
				conn->role.slave.window_widening_periodic_us *
				latency;
			if (conn->role.slave.window_widening_prepare_us >
    dedc:	42b2      	cmp	r2, r6
    dede:	d301      	bcc.n	dee4 <event_connection_prepare+0x5f4>
				(conn_interval_us >> 1) - RADIO_TIFS;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    dee0:	6526      	str	r6, [r4, #80]	; 0x50
    dee2:	e000      	b.n	dee6 <event_connection_prepare+0x5f6>
				conn->role.slave.window_widening_periodic_us *
				latency;
			if (conn->role.slave.window_widening_prepare_us >
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
    dee4:	6522      	str	r2, [r4, #80]	; 0x50
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    dee6:	4a33      	ldr	r2, [pc, #204]	; (dfb4 <event_connection_prepare+0x6c4>)
    dee8:	2300      	movs	r3, #0
    deea:	2100      	movs	r1, #0
    deec:	f7f2 faee 	bl	4cc <__aeabi_lmul>
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    def0:	0026      	movs	r6, r4
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    def2:	4a2b      	ldr	r2, [pc, #172]	; (dfa0 <event_connection_prepare+0x6b0>)
    def4:	2307      	movs	r3, #7
    def6:	f7f2 fac9 	bl	48c <__aeabi_uldivmod>
    defa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    defc:	368c      	adds	r6, #140	; 0x8c
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    defe:	1a1b      	subs	r3, r3, r0
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    df00:	4928      	ldr	r1, [pc, #160]	; (dfa4 <event_connection_prepare+0x6b4>)
    df02:	6830      	ldr	r0, [r6, #0]
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    df04:	930c      	str	r3, [sp, #48]	; 0x30
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    df06:	f7f2 f94b 	bl	1a0 <__aeabi_uidiv>
    df0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    df0c:	4a29      	ldr	r2, [pc, #164]	; (dfb4 <event_connection_prepare+0x6c4>)
    df0e:	4343      	muls	r3, r0
    df10:	2100      	movs	r1, #0
    df12:	0018      	movs	r0, r3
    df14:	2300      	movs	r3, #0
    df16:	f7f2 fad9 	bl	4cc <__aeabi_lmul>
    df1a:	4a21      	ldr	r2, [pc, #132]	; (dfa0 <event_connection_prepare+0x6b0>)
    df1c:	2307      	movs	r3, #7
    df1e:	f7f2 fab5 	bl	48c <__aeabi_uldivmod>
    df22:	0200      	lsls	r0, r0, #8
    df24:	0a03      	lsrs	r3, r0, #8
    df26:	930e      	str	r3, [sp, #56]	; 0x38
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    df28:	1b7b      	subs	r3, r7, r5
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    df2a:	0025      	movs	r5, r4
    df2c:	2218      	movs	r2, #24
    df2e:	3595      	adds	r5, #149	; 0x95
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    df30:	930f      	str	r3, [sp, #60]	; 0x3c
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    df32:	782b      	ldrb	r3, [r5, #0]
    df34:	4013      	ands	r3, r2
    df36:	2b10      	cmp	r3, #16
    df38:	d14f      	bne.n	dfda <event_connection_prepare+0x6ea>
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
}

static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
    df3a:	0023      	movs	r3, r4
    df3c:	0022      	movs	r2, r4
    df3e:	3368      	adds	r3, #104	; 0x68
    df40:	3269      	adds	r2, #105	; 0x69
    df42:	781b      	ldrb	r3, [r3, #0]
    df44:	9210      	str	r2, [sp, #64]	; 0x40
    df46:	7812      	ldrb	r2, [r2, #0]
    df48:	9211      	str	r2, [sp, #68]	; 0x44
    df4a:	429a      	cmp	r2, r3
    df4c:	d145      	bne.n	dfda <event_connection_prepare+0x6ea>
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    df4e:	0023      	movs	r3, r4
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    df50:	2202      	movs	r2, #2
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    df52:	339c      	adds	r3, #156	; 0x9c
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    df54:	781b      	ldrb	r3, [r3, #0]
    df56:	4213      	tst	r3, r2
    df58:	d03f      	beq.n	dfda <event_connection_prepare+0x6ea>
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    df5a:	0023      	movs	r3, r4
    df5c:	339d      	adds	r3, #157	; 0x9d
	return 0;
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    df5e:	781b      	ldrb	r3, [r3, #0]
    df60:	2b08      	cmp	r3, #8
    df62:	d93a      	bls.n	dfda <event_connection_prepare+0x6ea>
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    df64:	0023      	movs	r3, r4
    df66:	339e      	adds	r3, #158	; 0x9e
}

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
    df68:	881b      	ldrh	r3, [r3, #0]
    df6a:	4a13      	ldr	r2, [pc, #76]	; (dfb8 <event_connection_prepare+0x6c8>)
    df6c:	4293      	cmp	r3, r2
    df6e:	d134      	bne.n	dfda <event_connection_prepare+0x6ea>
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
    df70:	0022      	movs	r2, r4
    df72:	32a0      	adds	r2, #160	; 0xa0

static u32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    df74:	8812      	ldrh	r2, [r2, #0]
    df76:	429a      	cmp	r2, r3
    df78:	d12f      	bne.n	dfda <event_connection_prepare+0x6ea>
    df7a:	f000 fd1a 	bl	e9b2 <event_connection_prepare+0x10c2>
    df7e:	46c0      	nop			; (mov r8, r8)
    df80:	20001254 	.word	0x20001254
    df84:	000145b0 	.word	0x000145b0
    df88:	000145b5 	.word	0x000145b5
    df8c:	0001716a 	.word	0x0001716a
    df90:	00014570 	.word	0x00014570
    df94:	00014577 	.word	0x00014577
    df98:	00014bc5 	.word	0x00014bc5
    df9c:	09ce5400 	.word	0x09ce5400
    dfa0:	1afd498d 	.word	0x1afd498d
    dfa4:	000004e2 	.word	0x000004e2
    dfa8:	0001705c 	.word	0x0001705c
    dfac:	000f4240 	.word	0x000f4240
    dfb0:	000f423f 	.word	0x000f423f
    dfb4:	3b9aca00 	.word	0x3b9aca00
    dfb8:	0000ffff 	.word	0x0000ffff
			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
    dfbc:	0023      	movs	r3, r4
    dfbe:	338c      	adds	r3, #140	; 0x8c

			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
    dfc0:	6818      	ldr	r0, [r3, #0]
    dfc2:	4ae6      	ldr	r2, [pc, #920]	; (e35c <event_connection_prepare+0xa6c>)
    dfc4:	2300      	movs	r3, #0
    dfc6:	f7f2 fa81 	bl	4cc <__aeabi_lmul>
    dfca:	2307      	movs	r3, #7
    dfcc:	4ae4      	ldr	r2, [pc, #912]	; (e360 <event_connection_prepare+0xa70>)
    dfce:	f7f2 fa5d 	bl	48c <__aeabi_uldivmod>
    dfd2:	0200      	lsls	r0, r0, #8
    dfd4:	0a03      	lsrs	r3, r0, #8
    dfd6:	930e      	str	r3, [sp, #56]	; 0x38
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
    dfd8:	970f      	str	r7, [sp, #60]	; 0x3c
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    dfda:	0023      	movs	r3, r4
    dfdc:	336c      	adds	r3, #108	; 0x6c
    dfde:	881b      	ldrh	r3, [r3, #0]
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    dfe0:	0039      	movs	r1, r7
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    dfe2:	84a3      	strh	r3, [r4, #36]	; 0x24
		conn->latency = conn->llcp.connection_update.latency;
    dfe4:	0023      	movs	r3, r4
    dfe6:	336e      	adds	r3, #110	; 0x6e
    dfe8:	881d      	ldrh	r5, [r3, #0]
    dfea:	84e5      	strh	r5, [r4, #38]	; 0x26
		conn->supervision_reload =
    dfec:	8858      	ldrh	r0, [r3, #2]
    dfee:	4bdd      	ldr	r3, [pc, #884]	; (e364 <event_connection_prepare+0xa74>)
    dff0:	4358      	muls	r0, r3
    dff2:	f7f2 f8d5 	bl	1a0 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    dff6:	0039      	movs	r1, r7
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    dff8:	86a0      	strh	r0, [r4, #52]	; 0x34
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    dffa:	48db      	ldr	r0, [pc, #876]	; (e368 <event_connection_prepare+0xa78>)
    dffc:	f7f2 f8d0 	bl	1a0 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e000:	0039      	movs	r1, r7
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    e002:	8720      	strh	r0, [r4, #56]	; 0x38
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e004:	48d9      	ldr	r0, [pc, #868]	; (e36c <event_connection_prepare+0xa7c>)
    e006:	f7f2 f8cb 	bl	1a0 <__aeabi_uidiv>
    e00a:	1ca2      	adds	r2, r4, #2
    e00c:	b283      	uxth	r3, r0
    e00e:	87d3      	strh	r3, [r2, #62]	; 0x3e
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e010:	1daa      	adds	r2, r5, #6
    e012:	4293      	cmp	r3, r2
    e014:	dd02      	ble.n	e01c <event_connection_prepare+0x72c>
    e016:	1b5b      	subs	r3, r3, r5
    e018:	3b06      	subs	r3, #6
    e01a:	b29b      	uxth	r3, r3
    e01c:	87a3      	strh	r3, [r4, #60]	; 0x3c
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		if (!conn->llcp.connection_update.is_internal) {
    e01e:	0023      	movs	r3, r4
    e020:	3395      	adds	r3, #149	; 0x95
    e022:	781a      	ldrb	r2, [r3, #0]
    e024:	2318      	movs	r3, #24
    e026:	4013      	ands	r3, r2
    e028:	d100      	bne.n	e02c <event_connection_prepare+0x73c>
			conn->supervision_expire = 0;
    e02a:	86e3      	strh	r3, [r4, #54]	; 0x36
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    e02c:	2101      	movs	r1, #1
    e02e:	2000      	movs	r0, #0
    e030:	f003 fc2e 	bl	11890 <mayfly_is_enabled>
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    e034:	2200      	movs	r2, #0
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    e036:	9010      	str	r0, [sp, #64]	; 0x40
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    e038:	2101      	movs	r1, #1
    e03a:	0010      	movs	r0, r2
    e03c:	f7fb fdee 	bl	9c1c <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);

		/* start slave/master with new timings */
		ticker_status =
    e040:	2100      	movs	r1, #0
    e042:	8c22      	ldrh	r2, [r4, #32]
    e044:	4bca      	ldr	r3, [pc, #808]	; (e370 <event_connection_prepare+0xa80>)
    e046:	3207      	adds	r2, #7
    e048:	9300      	str	r3, [sp, #0]
    e04a:	b2d2      	uxtb	r2, r2
    e04c:	4bc9      	ldr	r3, [pc, #804]	; (e374 <event_connection_prepare+0xa84>)
    e04e:	0008      	movs	r0, r1
    e050:	f7fd fa72 	bl	b538 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e054:	2302      	movs	r3, #2
    e056:	4398      	bics	r0, r3
    e058:	1e06      	subs	r6, r0, #0
    e05a:	d143      	bne.n	e0e4 <event_connection_prepare+0x7f4>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
    e05c:	4abf      	ldr	r2, [pc, #764]	; (e35c <event_connection_prepare+0xa6c>)
    e05e:	2300      	movs	r3, #0
    e060:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e062:	0031      	movs	r1, r6
    e064:	f7f2 fa32 	bl	4cc <__aeabi_lmul>
    e068:	4abd      	ldr	r2, [pc, #756]	; (e360 <event_connection_prepare+0xa70>)
    e06a:	2307      	movs	r3, #7
    e06c:	900a      	str	r0, [sp, #40]	; 0x28
    e06e:	910b      	str	r1, [sp, #44]	; 0x2c
    e070:	f7f2 fa0c 	bl	48c <__aeabi_uldivmod>
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e074:	0205      	lsls	r5, r0, #8
    e076:	0a2d      	lsrs	r5, r5, #8
    e078:	4ab9      	ldr	r2, [pc, #740]	; (e360 <event_connection_prepare+0xa70>)
    e07a:	2307      	movs	r3, #7
    e07c:	0028      	movs	r0, r5
    e07e:	0031      	movs	r1, r6
    e080:	f7f2 fa24 	bl	4cc <__aeabi_lmul>
    e084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e088:	1a12      	subs	r2, r2, r0
    e08a:	418b      	sbcs	r3, r1
    e08c:	0010      	movs	r0, r2
    e08e:	22fa      	movs	r2, #250	; 0xfa
    e090:	0019      	movs	r1, r3
    e092:	0092      	lsls	r2, r2, #2
    e094:	2300      	movs	r3, #0
    e096:	f7f2 f9f9 	bl	48c <__aeabi_uldivmod>
    e09a:	68e2      	ldr	r2, [r4, #12]
    e09c:	8c27      	ldrh	r7, [r4, #32]
    e09e:	4694      	mov	ip, r2
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
				     TICKER_REMAINDER(periodic_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
    e0a0:	0022      	movs	r2, r4
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e0a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
				     TICKER_REMAINDER(periodic_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
    e0a4:	3244      	adds	r2, #68	; 0x44
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e0a6:	0001      	movs	r1, r0
    e0a8:	7810      	ldrb	r0, [r2, #0]
    e0aa:	3707      	adds	r7, #7
    e0ac:	4463      	add	r3, ip
    e0ae:	b2ff      	uxtb	r7, r7
    e0b0:	b29b      	uxth	r3, r3
    e0b2:	4ab1      	ldr	r2, [pc, #708]	; (e378 <event_connection_prepare+0xa88>)
    e0b4:	07c0      	lsls	r0, r0, #31
    e0b6:	d400      	bmi.n	e0ba <event_connection_prepare+0x7ca>
    e0b8:	4ab0      	ldr	r2, [pc, #704]	; (e37c <event_connection_prepare+0xa8c>)
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    e0ba:	48b1      	ldr	r0, [pc, #708]	; (e380 <event_connection_prepare+0xa90>)
    e0bc:	9304      	str	r3, [sp, #16]
    e0be:	9008      	str	r0, [sp, #32]
    e0c0:	48ac      	ldr	r0, [pc, #688]	; (e374 <event_connection_prepare+0xa84>)
    e0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e0c4:	9007      	str	r0, [sp, #28]
    e0c6:	2000      	movs	r0, #0
    e0c8:	9205      	str	r2, [sp, #20]
    e0ca:	9102      	str	r1, [sp, #8]
    e0cc:	9300      	str	r3, [sp, #0]
    e0ce:	9406      	str	r4, [sp, #24]
    e0d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e0d2:	9003      	str	r0, [sp, #12]
    e0d4:	9501      	str	r5, [sp, #4]
    e0d6:	003a      	movs	r2, r7
    e0d8:	0001      	movs	r1, r0
    e0da:	f7fd f995 	bl	b408 <ticker_start>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
				     event_slave_prepare : event_master_prepare,
				     conn, ticker_success_assert,
				     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e0de:	2302      	movs	r3, #2
    e0e0:	4398      	bics	r0, r3
    e0e2:	d008      	beq.n	e0f6 <event_connection_prepare+0x806>
    e0e4:	4ba7      	ldr	r3, [pc, #668]	; (e384 <event_connection_prepare+0xa94>)
    e0e6:	4aa8      	ldr	r2, [pc, #672]	; (e388 <event_connection_prepare+0xa98>)
    e0e8:	9301      	str	r3, [sp, #4]
    e0ea:	4ba8      	ldr	r3, [pc, #672]	; (e38c <event_connection_prepare+0xa9c>)
    e0ec:	49a8      	ldr	r1, [pc, #672]	; (e390 <event_connection_prepare+0xaa0>)
    e0ee:	9300      	str	r3, [sp, #0]
    e0f0:	48a8      	ldr	r0, [pc, #672]	; (e394 <event_connection_prepare+0xaa4>)
    e0f2:	4ba9      	ldr	r3, [pc, #676]	; (e398 <event_connection_prepare+0xaa8>)
    e0f4:	e625      	b.n	dd42 <event_connection_prepare+0x452>
			  (ticker_status == TICKER_STATUS_BUSY));

		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    e0f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e0f8:	2b00      	cmp	r3, #0
    e0fa:	d101      	bne.n	e100 <event_connection_prepare+0x810>
    e0fc:	f000 fc87 	bl	ea0e <event_connection_prepare+0x111e>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    e100:	2201      	movs	r2, #1
    e102:	0011      	movs	r1, r2
    e104:	f7fb fd8a 	bl	9c1c <mayfly_enable>
    e108:	f000 fc81 	bl	ea0e <event_connection_prepare+0x111e>
}

static inline void event_ch_map_prep(struct connection *conn,
				     u16_t event_counter)
{
	if (conn->llcp.chan_map.initiate) {
    e10c:	0026      	movs	r6, r4
    e10e:	366c      	adds	r6, #108	; 0x6c
    e110:	7833      	ldrb	r3, [r6, #0]
    e112:	2b00      	cmp	r3, #0
    e114:	d022      	beq.n	e15c <event_connection_prepare+0x86c>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e116:	48a1      	ldr	r0, [pc, #644]	; (e39c <event_connection_prepare+0xaac>)
    e118:	30d9      	adds	r0, #217	; 0xd9
    e11a:	30ff      	adds	r0, #255	; 0xff
    e11c:	f7fb fea6 	bl	9e6c <mem_acquire>
    e120:	1e05      	subs	r5, r0, #0
		if (node_tx) {
    e122:	d100      	bne.n	e126 <event_connection_prepare+0x836>
    e124:	e2a2      	b.n	e66c <event_connection_prepare+0xd7c>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;
    e126:	2300      	movs	r3, #0
    e128:	7033      	strb	r3, [r6, #0]

			/* set instant */
			conn->llcp.chan_map.instant =
    e12a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    e12c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e12e:	3306      	adds	r3, #6
    e130:	18d3      	adds	r3, r2, r3
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e132:	2203      	movs	r2, #3

			/* reset initiate flag */
			conn->llcp.chan_map.initiate = 0;

			/* set instant */
			conn->llcp.chan_map.instant =
    e134:	80f3      	strh	r3, [r6, #6]
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e136:	7903      	ldrb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    e138:	0021      	movs	r1, r4
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e13a:	4313      	orrs	r3, r2
    e13c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    e13e:	2308      	movs	r3, #8
    e140:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_chan_map_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    e142:	3b07      	subs	r3, #7
    e144:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    e146:	3202      	adds	r2, #2
    e148:	3008      	adds	r0, #8
    e14a:	316d      	adds	r1, #109	; 0x6d
    e14c:	f7f3 f90a 	bl	1364 <memcpy>
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
				conn->llcp.chan_map.instant;
    e150:	88f3      	ldrh	r3, [r6, #6]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
			       ctrldata.chan_map_ind.chm[0],
			       &conn->llcp.chan_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.chan_map_ind.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
    e152:	736b      	strb	r3, [r5, #13]
    e154:	0a1b      	lsrs	r3, r3, #8
    e156:	73ab      	strb	r3, [r5, #14]
				conn->llcp.chan_map.instant;

			ctrl_tx_enqueue(conn, node_tx);
    e158:	0029      	movs	r1, r5
    e15a:	e13b      	b.n	e3d4 <event_connection_prepare+0xae4>
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    e15c:	0023      	movs	r3, r4
    e15e:	3372      	adds	r3, #114	; 0x72
    e160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e162:	881b      	ldrh	r3, [r3, #0]
    e164:	1ad3      	subs	r3, r2, r3
    e166:	4a8e      	ldr	r2, [pc, #568]	; (e3a0 <event_connection_prepare+0xab0>)
    e168:	b29b      	uxth	r3, r3
    e16a:	4293      	cmp	r3, r2
    e16c:	dd00      	ble.n	e170 <event_connection_prepare+0x880>
    e16e:	e27d      	b.n	e66c <event_connection_prepare+0xd7c>
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e170:	0023      	movs	r3, r4

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    e172:	0025      	movs	r5, r4
    e174:	0021      	movs	r1, r4
			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e176:	3368      	adds	r3, #104	; 0x68
    e178:	781a      	ldrb	r2, [r3, #0]

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    e17a:	3517      	adds	r5, #23
			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e17c:	705a      	strb	r2, [r3, #1]

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
    e17e:	316d      	adds	r1, #109	; 0x6d
    e180:	2205      	movs	r2, #5
    e182:	0028      	movs	r0, r5
    e184:	f7f3 f8ee 	bl	1364 <memcpy>
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    e188:	2105      	movs	r1, #5
    e18a:	0028      	movs	r0, r5
    e18c:	f7fb fef0 	bl	9f70 <util_ones_count_get>

		/* copy to active channel map */
		memcpy(&conn->data_chan_map[0],
		       &conn->llcp.chan_map.chm[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    e190:	223f      	movs	r2, #63	; 0x3f
    e192:	7f23      	ldrb	r3, [r4, #28]
    e194:	4010      	ands	r0, r2
    e196:	4393      	bics	r3, r2
    e198:	4318      	orrs	r0, r3
    e19a:	7720      	strb	r0, [r4, #28]
    e19c:	e266      	b.n	e66c <event_connection_prepare+0xd7c>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
static inline void event_enc_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e19e:	4f7f      	ldr	r7, [pc, #508]	; (e39c <event_connection_prepare+0xaac>)
    e1a0:	003e      	movs	r6, r7
    e1a2:	36d9      	adds	r6, #217	; 0xd9
    e1a4:	36ff      	adds	r6, #255	; 0xff
    e1a6:	0030      	movs	r0, r6
    e1a8:	f7fb fe60 	bl	9e6c <mem_acquire>
    e1ac:	900c      	str	r0, [sp, #48]	; 0x30
	if (node_tx) {
    e1ae:	2800      	cmp	r0, #0
    e1b0:	d100      	bne.n	e1b4 <event_connection_prepare+0x8c4>
    e1b2:	e25b      	b.n	e66c <event_connection_prepare+0xd7c>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e1b4:	0023      	movs	r3, r4
    e1b6:	3368      	adds	r3, #104	; 0x68
    e1b8:	781a      	ldrb	r2, [r3, #0]
    e1ba:	705a      	strb	r2, [r3, #1]

		/* master sends encrypted enc start rsp in control priority */
		if (conn->role.master.role == 0) {
    e1bc:	3b24      	subs	r3, #36	; 0x24
    e1be:	781d      	ldrb	r5, [r3, #0]
    e1c0:	2301      	movs	r3, #1
    e1c2:	401d      	ands	r5, r3
    e1c4:	d13a      	bne.n	e23c <event_connection_prepare+0x94c>
			/* calc the Session Key */
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    e1c6:	0026      	movs	r6, r4
    e1c8:	0021      	movs	r1, r4
    e1ca:	0020      	movs	r0, r4
    e1cc:	36c1      	adds	r6, #193	; 0xc1
    e1ce:	0033      	movs	r3, r6
    e1d0:	002a      	movs	r2, r5
    e1d2:	3187      	adds	r1, #135	; 0x87
    e1d4:	3077      	adds	r0, #119	; 0x77
    e1d6:	f7fb ff61 	bl	a09c <ecb_encrypt>
				    &conn->llcp.encryption.skd[0],
				    NULL, &conn->ccm_rx.key[0]);

			/* copy the Session Key */
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    e1da:	0020      	movs	r0, r4
    e1dc:	0031      	movs	r1, r6
    e1de:	2210      	movs	r2, #16
    e1e0:	30e2      	adds	r0, #226	; 0xe2
    e1e2:	f7f3 f8bf 	bl	1364 <memcpy>
			       sizeof(conn->ccm_tx.key));

			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    e1e6:	0021      	movs	r1, r4
    e1e8:	0020      	movs	r0, r4
    e1ea:	2208      	movs	r2, #8
    e1ec:	31da      	adds	r1, #218	; 0xda
    e1ee:	30fb      	adds	r0, #251	; 0xfb
    e1f0:	f7f3 f8b8 	bl	1364 <memcpy>
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    e1f4:	0023      	movs	r3, r4
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    e1f6:	0022      	movs	r2, r4
    e1f8:	2101      	movs	r1, #1
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    e1fa:	33d1      	adds	r3, #209	; 0xd1
    e1fc:	701d      	strb	r5, [r3, #0]
    e1fe:	705d      	strb	r5, [r3, #1]
    e200:	709d      	strb	r5, [r3, #2]
    e202:	70dd      	strb	r5, [r3, #3]
    e204:	711d      	strb	r5, [r3, #4]
    e206:	715d      	strb	r5, [r3, #5]
    e208:	719d      	strb	r5, [r3, #6]
    e20a:	71dd      	strb	r5, [r3, #7]
			conn->ccm_tx.counter = 0;
    e20c:	3321      	adds	r3, #33	; 0x21
    e20e:	801d      	strh	r5, [r3, #0]
    e210:	805d      	strh	r5, [r3, #2]
    e212:	809d      	strh	r5, [r3, #4]
    e214:	80dd      	strh	r5, [r3, #6]

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    e216:	32d9      	adds	r2, #217	; 0xd9
    e218:	7813      	ldrb	r3, [r2, #0]
			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;

			/* send enc start resp */
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    e21a:	0020      	movs	r0, r4
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    e21c:	438b      	bics	r3, r1
    e21e:	7013      	strb	r3, [r2, #0]
			conn->ccm_tx.direction = 1;
    e220:	3221      	adds	r2, #33	; 0x21
    e222:	7813      	ldrb	r3, [r2, #0]
    e224:	430b      	orrs	r3, r1
    e226:	7013      	strb	r3, [r2, #0]

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;
    e228:	2330      	movs	r3, #48	; 0x30
			 */
			conn->ccm_rx.direction = 0;
			conn->ccm_tx.direction = 1;

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
    e22a:	3a3a      	subs	r2, #58	; 0x3a
    e22c:	7811      	ldrb	r1, [r2, #0]
			conn->enc_tx = 1;
    e22e:	430b      	orrs	r3, r1
    e230:	7013      	strb	r3, [r2, #0]
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
    e232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e234:	1d19      	adds	r1, r3, #4
			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;

			/* send enc start resp */
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    e236:	f7ff fabf 	bl	d7b8 <start_enc_rsp_send>
    e23a:	e0ca      	b.n	e3d2 <event_connection_prepare+0xae2>
		/* slave send reject ind or start enc req at control priority */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
		else {
#else /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */
		else if (!conn->pause_tx || conn->refresh) {
    e23c:	0023      	movs	r3, r4
    e23e:	33c0      	adds	r3, #192	; 0xc0
    e240:	781d      	ldrb	r5, [r3, #0]
    e242:	930e      	str	r3, [sp, #56]	; 0x38
    e244:	2348      	movs	r3, #72	; 0x48
    e246:	401d      	ands	r5, r3
    e248:	2d08      	cmp	r5, #8
    e24a:	d100      	bne.n	e24e <event_connection_prepare+0x95e>
    e24c:	e0ae      	b.n	e3ac <event_connection_prepare+0xabc>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

			/* ll ctrl packet */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e24e:	2703      	movs	r7, #3
    e250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e254:	791b      	ldrb	r3, [r3, #4]
    e256:	433b      	orrs	r3, r7
    e258:	7113      	strb	r3, [r2, #4]

			/* place the reject ind packet as next in tx queue */
			if (conn->llcp.encryption.error_code) {
    e25a:	0023      	movs	r3, r4
    e25c:	336c      	adds	r3, #108	; 0x6c
    e25e:	781d      	ldrb	r5, [r3, #0]
    e260:	2d00      	cmp	r5, #0
    e262:	d009      	beq.n	e278 <event_connection_prepare+0x988>
				pdu_ctrl_tx->len =
    e264:	2202      	movs	r2, #2
    e266:	990c      	ldr	r1, [sp, #48]	; 0x30
    e268:	714a      	strb	r2, [r1, #5]
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
    e26a:	320b      	adds	r2, #11
    e26c:	71ca      	strb	r2, [r1, #7]
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
					conn->llcp.encryption.error_code;
    e26e:	781a      	ldrb	r2, [r3, #0]
				pdu_ctrl_tx->len =
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
    e270:	720a      	strb	r2, [r1, #8]
					conn->llcp.encryption.error_code;

				conn->llcp.encryption.error_code = 0;
    e272:	2200      	movs	r2, #0
    e274:	701a      	strb	r2, [r3, #0]
    e276:	e0ac      	b.n	e3d2 <event_connection_prepare+0xae2>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e278:	0030      	movs	r0, r6
    e27a:	f7fb fdf7 	bl	9e6c <mem_acquire>
    e27e:	1e06      	subs	r6, r0, #0
	LL_ASSERT(node_tx);
    e280:	d108      	bne.n	e294 <event_connection_prepare+0x9a4>
    e282:	4b40      	ldr	r3, [pc, #256]	; (e384 <event_connection_prepare+0xa94>)
    e284:	4a40      	ldr	r2, [pc, #256]	; (e388 <event_connection_prepare+0xa98>)
    e286:	9301      	str	r3, [sp, #4]
    e288:	4b40      	ldr	r3, [pc, #256]	; (e38c <event_connection_prepare+0xa9c>)
    e28a:	4941      	ldr	r1, [pc, #260]	; (e390 <event_connection_prepare+0xaa0>)
    e28c:	9300      	str	r3, [sp, #0]
    e28e:	4845      	ldr	r0, [pc, #276]	; (e3a4 <event_connection_prepare+0xab4>)
    e290:	4b45      	ldr	r3, [pc, #276]	; (e3a8 <event_connection_prepare+0xab8>)
    e292:	e556      	b.n	dd42 <event_connection_prepare+0x452>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e294:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    e296:	2208      	movs	r2, #8
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e298:	431f      	orrs	r7, r3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    e29a:	230d      	movs	r3, #13
    e29c:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    e29e:	0003      	movs	r3, r0
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2a0:	7107      	strb	r7, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    e2a2:	2704      	movs	r7, #4
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    e2a4:	3308      	adds	r3, #8

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    e2a6:	71c7      	strb	r7, [r0, #7]
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    e2a8:	21aa      	movs	r1, #170	; 0xaa
    e2aa:	0018      	movs	r0, r3
    e2ac:	930f      	str	r3, [sp, #60]	; 0x3c
    e2ae:	f7f3 f883 	bl	13b8 <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 0xbb,
    e2b2:	0033      	movs	r3, r6
    e2b4:	3310      	adds	r3, #16
    e2b6:	0018      	movs	r0, r3
    e2b8:	003a      	movs	r2, r7
    e2ba:	21bb      	movs	r1, #187	; 0xbb
    e2bc:	9310      	str	r3, [sp, #64]	; 0x40
    e2be:	f7f3 f87b 	bl	13b8 <memset>
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    e2c2:	0020      	movs	r0, r4
    e2c4:	2208      	movs	r2, #8
    e2c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e2c8:	308f      	adds	r0, #143	; 0x8f
    e2ca:	f7f3 f84b 	bl	1364 <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
    e2ce:	0020      	movs	r0, r4
    e2d0:	003a      	movs	r2, r7
    e2d2:	9910      	ldr	r1, [sp, #64]	; 0x40
    e2d4:	30de      	adds	r0, #222	; 0xde
    e2d6:	f7f3 f845 	bl	1364 <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    e2da:	0031      	movs	r1, r6
    e2dc:	0020      	movs	r0, r4
				 */
				enc_rsp_send(conn);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    e2de:	0026      	movs	r6, r4
	memcpy(&conn->llcp.encryption.skd[8],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    e2e0:	f7ff fa30 	bl	d744 <ctrl_tx_enqueue>
				 */
				enc_rsp_send(conn);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    e2e4:	0021      	movs	r1, r4
    e2e6:	0020      	movs	r0, r4
    e2e8:	36c1      	adds	r6, #193	; 0xc1
    e2ea:	0033      	movs	r3, r6
    e2ec:	002a      	movs	r2, r5
    e2ee:	3187      	adds	r1, #135	; 0x87
    e2f0:	3077      	adds	r0, #119	; 0x77
    e2f2:	f7fb fed3 	bl	a09c <ecb_encrypt>
					    &conn->llcp.encryption.skd[0], NULL,
					    &conn->ccm_rx.key[0]);

				/* copy the Session Key */
				memcpy(&conn->ccm_tx.key[0],
    e2f6:	0020      	movs	r0, r4
    e2f8:	2210      	movs	r2, #16
    e2fa:	0031      	movs	r1, r6
    e2fc:	30e2      	adds	r0, #226	; 0xe2
    e2fe:	f7f3 f831 	bl	1364 <memcpy>
				       &conn->ccm_rx.key[0],
				       sizeof(conn->ccm_tx.key));

				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    e302:	0021      	movs	r1, r4
    e304:	0020      	movs	r0, r4
    e306:	2208      	movs	r2, #8
    e308:	31da      	adds	r1, #218	; 0xda
    e30a:	30fb      	adds	r0, #251	; 0xfb
    e30c:	f7f3 f82a 	bl	1364 <memcpy>
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    e310:	0023      	movs	r3, r4
				conn->ccm_tx.counter = 0;

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    e312:	0022      	movs	r2, r4
    e314:	2101      	movs	r1, #1
				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    e316:	33d1      	adds	r3, #209	; 0xd1
    e318:	701d      	strb	r5, [r3, #0]
    e31a:	715d      	strb	r5, [r3, #5]
    e31c:	705d      	strb	r5, [r3, #1]
    e31e:	709d      	strb	r5, [r3, #2]
    e320:	70dd      	strb	r5, [r3, #3]
    e322:	711d      	strb	r5, [r3, #4]
    e324:	719d      	strb	r5, [r3, #6]
    e326:	71dd      	strb	r5, [r3, #7]
				conn->ccm_tx.counter = 0;
    e328:	3321      	adds	r3, #33	; 0x21
    e32a:	801d      	strh	r5, [r3, #0]
    e32c:	809d      	strh	r5, [r3, #4]
    e32e:	805d      	strh	r5, [r3, #2]
    e330:	80dd      	strh	r5, [r3, #6]

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    e332:	32d9      	adds	r2, #217	; 0xd9
    e334:	7813      	ldrb	r3, [r2, #0]
    e336:	430b      	orrs	r3, r1
    e338:	7013      	strb	r3, [r2, #0]
				conn->ccm_tx.direction = 0;
    e33a:	3221      	adds	r2, #33	; 0x21
    e33c:	7813      	ldrb	r3, [r2, #0]
    e33e:	438b      	bics	r3, r1
    e340:	7013      	strb	r3, [r2, #0]

				/* enable receive encryption (transmit turned
				 * on when start enc resp from master is
				 * received)
				 */
				conn->enc_rx = 1;
    e342:	2210      	movs	r2, #16
    e344:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e346:	781b      	ldrb	r3, [r3, #0]
    e348:	4313      	orrs	r3, r2
    e34a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e34c:	7013      	strb	r3, [r2, #0]

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    e34e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					offsetof(struct pdu_data_llctrl,
						 ctrldata);
				pdu_ctrl_tx->payload.llctrl.opcode =
    e350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				 * received)
				 */
				conn->enc_rx = 1;

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    e352:	7159      	strb	r1, [r3, #5]
					offsetof(struct pdu_data_llctrl,
						 ctrldata);
				pdu_ctrl_tx->payload.llctrl.opcode =
    e354:	2305      	movs	r3, #5
    e356:	71d3      	strb	r3, [r2, #7]
    e358:	e03b      	b.n	e3d2 <event_connection_prepare+0xae2>
    e35a:	46c0      	nop			; (mov r8, r8)
    e35c:	3b9aca00 	.word	0x3b9aca00
    e360:	1afd498d 	.word	0x1afd498d
    e364:	00002710 	.word	0x00002710
    e368:	02625a00 	.word	0x02625a00
    e36c:	01c9c380 	.word	0x01c9c380
    e370:	000015db 	.word	0x000015db
    e374:	0000bffd 	.word	0x0000bffd
    e378:	0000ea4d 	.word	0x0000ea4d
    e37c:	0000ea45 	.word	0x0000ea45
    e380:	000015eb 	.word	0x000015eb
    e384:	000145b0 	.word	0x000145b0
    e388:	00014570 	.word	0x00014570
    e38c:	000145b5 	.word	0x000145b5
    e390:	00014577 	.word	0x00014577
    e394:	00015cb7 	.word	0x00015cb7
    e398:	0001716a 	.word	0x0001716a
    e39c:	20001254 	.word	0x20001254
    e3a0:	00007fff 	.word	0x00007fff
    e3a4:	0001602c 	.word	0x0001602c
    e3a8:	00017018 	.word	0x00017018
			}

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
		} else {
			/* enable transmit encryption */
			_radio.conn_curr->enc_tx = 1;
    e3ac:	26c8      	movs	r6, #200	; 0xc8
    e3ae:	0076      	lsls	r6, r6, #1
    e3b0:	59b8      	ldr	r0, [r7, r6]
    e3b2:	2120      	movs	r1, #32
    e3b4:	0002      	movs	r2, r0
    e3b6:	32c0      	adds	r2, #192	; 0xc0
    e3b8:	7813      	ldrb	r3, [r2, #0]
    e3ba:	430b      	orrs	r3, r1
    e3bc:	7013      	strb	r3, [r2, #0]

			start_enc_rsp_send(_radio.conn_curr, NULL);
    e3be:	2100      	movs	r1, #0
    e3c0:	f7ff f9fa 	bl	d7b8 <start_enc_rsp_send>

			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
			_radio.conn_curr->pause_tx = 0;
    e3c4:	2104      	movs	r1, #4
			_radio.conn_curr->enc_tx = 1;

			start_enc_rsp_send(_radio.conn_curr, NULL);

			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    e3c6:	59ba      	ldr	r2, [r7, r6]
    e3c8:	32c0      	adds	r2, #192	; 0xc0
    e3ca:	7813      	ldrb	r3, [r2, #0]
			_radio.conn_curr->pause_tx = 0;
    e3cc:	438b      	bics	r3, r1
    e3ce:	43ab      	bics	r3, r5
    e3d0:	7013      	strb	r3, [r2, #0]
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		}

		ctrl_tx_enqueue(conn, node_tx);
    e3d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    e3d4:	0020      	movs	r0, r4
    e3d6:	f7ff f9b5 	bl	d744 <ctrl_tx_enqueue>
    e3da:	e147      	b.n	e66c <event_connection_prepare+0xd7c>

static inline void event_fex_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e3dc:	48c4      	ldr	r0, [pc, #784]	; (e6f0 <event_connection_prepare+0xe00>)
    e3de:	30d9      	adds	r0, #217	; 0xd9
    e3e0:	30ff      	adds	r0, #255	; 0xff
    e3e2:	f7fb fd43 	bl	9e6c <mem_acquire>
    e3e6:	1e05      	subs	r5, r0, #0
	if (node_tx) {
    e3e8:	d100      	bne.n	e3ec <event_connection_prepare+0xafc>
    e3ea:	e13f      	b.n	e66c <event_connection_prepare+0xd7c>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e3ec:	0023      	movs	r3, r4

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    e3ee:	0026      	movs	r6, r4
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e3f0:	3368      	adds	r3, #104	; 0x68
    e3f2:	781a      	ldrb	r2, [r3, #0]

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    e3f4:	3698      	adds	r6, #152	; 0x98
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e3f6:	705a      	strb	r2, [r3, #1]

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e3f8:	2203      	movs	r2, #3

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEAT;
    e3fa:	4bbe      	ldr	r3, [pc, #760]	; (e6f4 <event_connection_prepare+0xe04>)
    e3fc:	6033      	str	r3, [r6, #0]

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e3fe:	7903      	ldrb	r3, [r0, #4]
    e400:	4313      	orrs	r3, r2
    e402:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    e404:	2309      	movs	r3, #9
    e406:	7143      	strb	r3, [r0, #5]
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
			(conn->role.master.role == 0) ?
    e408:	0023      	movs	r3, r4
    e40a:	3344      	adds	r3, #68	; 0x44

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    e40c:	781a      	ldrb	r2, [r3, #0]
    e40e:	2308      	movs	r3, #8
    e410:	07d2      	lsls	r2, r2, #31
    e412:	d500      	bpl.n	e416 <event_connection_prepare+0xb26>
    e414:	3306      	adds	r3, #6
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    e416:	0028      	movs	r0, r5

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    e418:	71eb      	strb	r3, [r5, #7]
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    e41a:	2100      	movs	r1, #0
    e41c:	3008      	adds	r0, #8
    e41e:	2208      	movs	r2, #8
    e420:	f7f2 ffca 	bl	13b8 <memset>
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    e424:	7833      	ldrb	r3, [r6, #0]
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
			(conn->llcp_features >> 16) & 0xFF;

		ctrl_tx_enqueue(conn, node_tx);
    e426:	0029      	movs	r1, r5
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    e428:	722b      	strb	r3, [r5, #8]
			conn->llcp_features & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    e42a:	6833      	ldr	r3, [r6, #0]
    e42c:	0a1b      	lsrs	r3, r3, #8
    e42e:	726b      	strb	r3, [r5, #9]
			(conn->llcp_features >> 8) & 0xFF;
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    e430:	6833      	ldr	r3, [r6, #0]
    e432:	0c1b      	lsrs	r3, r3, #16
    e434:	72ab      	strb	r3, [r5, #10]
    e436:	e06f      	b.n	e518 <event_connection_prepare+0xc28>
}

static inline void event_vex_prep(struct connection *conn)
{

	if (conn->llcp_version.tx == 0) {
    e438:	0026      	movs	r6, r4
    e43a:	2501      	movs	r5, #1
    e43c:	369c      	adds	r6, #156	; 0x9c
    e43e:	7833      	ldrb	r3, [r6, #0]
    e440:	422b      	tst	r3, r5
    e442:	d11e      	bne.n	e482 <event_connection_prepare+0xb92>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e444:	48aa      	ldr	r0, [pc, #680]	; (e6f0 <event_connection_prepare+0xe00>)
    e446:	30d9      	adds	r0, #217	; 0xd9
    e448:	30ff      	adds	r0, #255	; 0xff
    e44a:	f7fb fd0f 	bl	9e6c <mem_acquire>
    e44e:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    e450:	d100      	bne.n	e454 <event_connection_prepare+0xb64>
    e452:	e10b      	b.n	e66c <event_connection_prepare+0xd7c>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    e454:	0023      	movs	r3, r4
    e456:	3368      	adds	r3, #104	; 0x68
    e458:	781a      	ldrb	r2, [r3, #0]
    e45a:	705a      	strb	r2, [r3, #1]

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e45c:	2203      	movs	r2, #3

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;
    e45e:	7833      	ldrb	r3, [r6, #0]
    e460:	431d      	orrs	r5, r3
    e462:	7035      	strb	r5, [r6, #0]

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e464:	7903      	ldrb	r3, [r0, #4]
    e466:	4313      	orrs	r3, r2
    e468:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    e46a:	2306      	movs	r3, #6
    e46c:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_version_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    e46e:	18db      	adds	r3, r3, r3
    e470:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_VERSION_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    e472:	3b03      	subs	r3, #3
    e474:	7203      	strb	r3, [r0, #8]
				RADIO_BLE_VERSION_NUMBER;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    e476:	3b0a      	subs	r3, #10
    e478:	7243      	strb	r3, [r0, #9]
    e47a:	7283      	strb	r3, [r0, #10]
				RADIO_BLE_COMPANY_ID;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    e47c:	72c3      	strb	r3, [r0, #11]
    e47e:	7303      	strb	r3, [r0, #12]
    e480:	e04a      	b.n	e518 <event_connection_prepare+0xc28>
			/* Start Procedure Timeout (@todo this shall not
			 * replace terminate procedure)
			 */
			conn->procedure_expire = conn->procedure_reload;
		}
	} else if (conn->llcp_version.rx != 0) {
    e482:	2002      	movs	r0, #2
    e484:	4203      	tst	r3, r0
    e486:	d02c      	beq.n	e4e2 <event_connection_prepare+0xbf2>
		struct radio_pdu_node_rx *radio_pdu_node_rx;
		struct pdu_data *pdu_ctrl_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e488:	0023      	movs	r3, r4
    e48a:	3368      	adds	r3, #104	; 0x68
    e48c:	781a      	ldrb	r2, [r3, #0]
    e48e:	705a      	strb	r2, [r3, #1]

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
    e490:	f7fd f960 	bl	b754 <packet_rx_reserve_get>
		LL_ASSERT(radio_pdu_node_rx);
    e494:	2800      	cmp	r0, #0
    e496:	d108      	bne.n	e4aa <event_connection_prepare+0xbba>
    e498:	4b97      	ldr	r3, [pc, #604]	; (e6f8 <event_connection_prepare+0xe08>)
    e49a:	9301      	str	r3, [sp, #4]
    e49c:	4b97      	ldr	r3, [pc, #604]	; (e6fc <event_connection_prepare+0xe0c>)
    e49e:	9300      	str	r3, [sp, #0]
    e4a0:	4b97      	ldr	r3, [pc, #604]	; (e700 <event_connection_prepare+0xe10>)
    e4a2:	4a98      	ldr	r2, [pc, #608]	; (e704 <event_connection_prepare+0xe14>)
    e4a4:	4998      	ldr	r1, [pc, #608]	; (e708 <event_connection_prepare+0xe18>)
    e4a6:	4899      	ldr	r0, [pc, #612]	; (e70c <event_connection_prepare+0xe1c>)
    e4a8:	e44b      	b.n	dd42 <event_connection_prepare+0x452>
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    e4aa:	2203      	movs	r2, #3

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(radio_pdu_node_rx);

		radio_pdu_node_rx->hdr.handle = conn->handle;
    e4ac:	8c23      	ldrh	r3, [r4, #32]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e4ae:	7105      	strb	r5, [r0, #4]

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(radio_pdu_node_rx);

		radio_pdu_node_rx->hdr.handle = conn->handle;
    e4b0:	80c3      	strh	r3, [r0, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    e4b2:	7a03      	ldrb	r3, [r0, #8]
    e4b4:	4313      	orrs	r3, r2
    e4b6:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    e4b8:	2306      	movs	r3, #6
    e4ba:	7243      	strb	r3, [r0, #9]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
    e4bc:	18db      	adds	r3, r3, r3
    e4be:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
    e4c0:	0023      	movs	r3, r4
    e4c2:	339d      	adds	r3, #157	; 0x9d
    e4c4:	781b      	ldrb	r3, [r3, #0]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
    e4c6:	7303      	strb	r3, [r0, #12]
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
			conn->llcp_version.company_id;
    e4c8:	0023      	movs	r3, r4
    e4ca:	339e      	adds	r3, #158	; 0x9e
    e4cc:	881b      	ldrh	r3, [r3, #0]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
    e4ce:	7343      	strb	r3, [r0, #13]
    e4d0:	0a1b      	lsrs	r3, r3, #8
    e4d2:	7383      	strb	r3, [r0, #14]
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
			conn->llcp_version.sub_version_number;
    e4d4:	0023      	movs	r3, r4
    e4d6:	33a0      	adds	r3, #160	; 0xa0
    e4d8:	881b      	ldrh	r3, [r3, #0]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    e4da:	73c3      	strb	r3, [r0, #15]
    e4dc:	0a1b      	lsrs	r3, r3, #8
    e4de:	7403      	strb	r3, [r0, #16]
    e4e0:	e0ba      	b.n	e658 <event_connection_prepare+0xd68>

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
    e4e2:	4b85      	ldr	r3, [pc, #532]	; (e6f8 <event_connection_prepare+0xe08>)
    e4e4:	9301      	str	r3, [sp, #4]
    e4e6:	4b85      	ldr	r3, [pc, #532]	; (e6fc <event_connection_prepare+0xe0c>)
    e4e8:	9300      	str	r3, [sp, #0]
    e4ea:	4b85      	ldr	r3, [pc, #532]	; (e700 <event_connection_prepare+0xe10>)
    e4ec:	f7ff fc26 	bl	dd3c <event_connection_prepare+0x44c>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
static inline void event_ping_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e4f0:	487f      	ldr	r0, [pc, #508]	; (e6f0 <event_connection_prepare+0xe00>)
    e4f2:	30d9      	adds	r0, #217	; 0xd9
    e4f4:	30ff      	adds	r0, #255	; 0xff
    e4f6:	f7fb fcb9 	bl	9e6c <mem_acquire>
    e4fa:	1e01      	subs	r1, r0, #0
	if (node_tx) {
    e4fc:	d100      	bne.n	e500 <event_connection_prepare+0xc10>
    e4fe:	e0b5      	b.n	e66c <event_connection_prepare+0xd7c>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e500:	0023      	movs	r3, r4
    e502:	3368      	adds	r3, #104	; 0x68
    e504:	781a      	ldrb	r2, [r3, #0]
    e506:	705a      	strb	r2, [r3, #1]

		/* place the ping req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e508:	2203      	movs	r2, #3
    e50a:	7903      	ldrb	r3, [r0, #4]
    e50c:	4313      	orrs	r3, r2
    e50e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    e510:	2301      	movs	r3, #1
    e512:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
    e514:	3311      	adds	r3, #17
    e516:	71c3      	strb	r3, [r0, #7]
			PDU_DATA_LLCTRL_TYPE_PING_REQ;

		ctrl_tx_enqueue(conn, node_tx);
    e518:	0020      	movs	r0, r4
    e51a:	f7ff f913 	bl	d744 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure)
		 */
		conn->procedure_expire = conn->procedure_reload;
    e51e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    e520:	8763      	strh	r3, [r4, #58]	; 0x3a
    e522:	e0a3      	b.n	e66c <event_connection_prepare+0xd7c>
}

static inline void event_phy_upd_ind_prep(struct connection *conn,
					  u16_t event_counter)
{
	if (conn->llcp.phy_upd_ind.initiate) {
    e524:	0025      	movs	r5, r4
    e526:	2601      	movs	r6, #1
    e528:	356c      	adds	r5, #108	; 0x6c
    e52a:	7829      	ldrb	r1, [r5, #0]
    e52c:	4231      	tst	r1, r6
    e52e:	d031      	beq.n	e594 <event_connection_prepare+0xca4>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e530:	486f      	ldr	r0, [pc, #444]	; (e6f0 <event_connection_prepare+0xe00>)
    e532:	30d9      	adds	r0, #217	; 0xd9
    e534:	30ff      	adds	r0, #255	; 0xff
    e536:	f7fb fc99 	bl	9e6c <mem_acquire>
    e53a:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    e53c:	d100      	bne.n	e540 <event_connection_prepare+0xc50>
    e53e:	e095      	b.n	e66c <event_connection_prepare+0xd7c>
			struct pdu_data *pdu_ctrl_tx = (struct pdu_data *)
						       node_tx->pdu_data;
			struct pdu_data_llctrl_phy_upd_ind *p;

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;
    e540:	782a      	ldrb	r2, [r5, #0]
    e542:	43b2      	bics	r2, r6

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
    e544:	06d3      	lsls	r3, r2, #27
    e546:	0f5b      	lsrs	r3, r3, #29
			struct pdu_data *pdu_ctrl_tx = (struct pdu_data *)
						       node_tx->pdu_data;
			struct pdu_data_llctrl_phy_upd_ind *p;

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;
    e548:	702a      	strb	r2, [r5, #0]

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
			       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    e54a:	0952      	lsrs	r2, r2, #5

			/* reset initiate flag */
			conn->llcp.phy_upd_ind.initiate = 0;

			/* Check if both tx and rx PHY unchanged */
			if (!((conn->llcp.phy_upd_ind.tx |
    e54c:	431a      	orrs	r2, r3
    e54e:	b2d3      	uxtb	r3, r2
    e550:	0022      	movs	r2, r4
    e552:	326e      	adds	r2, #110	; 0x6e
    e554:	2b00      	cmp	r3, #0
    e556:	d104      	bne.n	e562 <event_connection_prepare+0xc72>
			       conn->llcp.phy_upd_ind.rx) & 0x07)) {
				/* Procedure complete */
				conn->llcp_ack = conn->llcp_req;
    e558:	0020      	movs	r0, r4
    e55a:	3068      	adds	r0, #104	; 0x68
    e55c:	7806      	ldrb	r6, [r0, #0]
    e55e:	7046      	strb	r6, [r0, #1]
    e560:	e003      	b.n	e56a <event_connection_prepare+0xc7a>

				/* 0 instant */
				conn->llcp.phy_upd_ind.instant = 0;
			} else {
				/* set instant */
				conn->llcp.phy_upd_ind.instant = event_counter +
    e562:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    e564:	980a      	ldr	r0, [sp, #40]	; 0x28
    e566:	3306      	adds	r3, #6
    e568:	18c3      	adds	r3, r0, r3
			}

			/* place the phy update ind packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e56a:	2003      	movs	r0, #3

				/* 0 instant */
				conn->llcp.phy_upd_ind.instant = 0;
			} else {
				/* set instant */
				conn->llcp.phy_upd_ind.instant = event_counter +
    e56c:	8013      	strh	r3, [r2, #0]
			}

			/* place the phy update ind packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e56e:	790b      	ldrb	r3, [r1, #4]
    e570:	4303      	orrs	r3, r0
    e572:	710b      	strb	r3, [r1, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    e574:	2305      	movs	r3, #5
    e576:	714b      	strb	r3, [r1, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_phy_upd_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    e578:	3313      	adds	r3, #19
    e57a:	71cb      	strb	r3, [r1, #7]
				PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND;
			p = &pdu_ctrl_tx->payload.llctrl.ctrldata.phy_upd_ind;
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    e57c:	782b      	ldrb	r3, [r5, #0]
    e57e:	06db      	lsls	r3, r3, #27
    e580:	0f5b      	lsrs	r3, r3, #29
    e582:	720b      	strb	r3, [r1, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    e584:	782b      	ldrb	r3, [r5, #0]
    e586:	095b      	lsrs	r3, r3, #5
    e588:	724b      	strb	r3, [r1, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
    e58a:	8813      	ldrh	r3, [r2, #0]
    e58c:	728b      	strb	r3, [r1, #10]
    e58e:	0a1b      	lsrs	r3, r3, #8
    e590:	72cb      	strb	r3, [r1, #11]
    e592:	e71f      	b.n	e3d4 <event_connection_prepare+0xae4>

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    e594:	0023      	movs	r3, r4
    e596:	336e      	adds	r3, #110	; 0x6e
    e598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e59a:	881b      	ldrh	r3, [r3, #0]
    e59c:	1ad3      	subs	r3, r2, r3
    e59e:	4a5c      	ldr	r2, [pc, #368]	; (e710 <event_connection_prepare+0xe20>)
    e5a0:	b29b      	uxth	r3, r3
    e5a2:	4293      	cmp	r3, r2
    e5a4:	dc62      	bgt.n	e66c <event_connection_prepare+0xd7c>
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e5a6:	0023      	movs	r3, r4

		/* apply new phy */
		old_tx = conn->phy_tx;
    e5a8:	0027      	movs	r7, r4
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e5aa:	3368      	adds	r3, #104	; 0x68
    e5ac:	781a      	ldrb	r2, [r3, #0]

		/* apply new phy */
		old_tx = conn->phy_tx;
    e5ae:	3732      	adds	r7, #50	; 0x32
		struct radio_le_phy_upd_cmplt *p;
		struct pdu_data *pdu_data;
		u8_t old_tx, old_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    e5b0:	705a      	strb	r2, [r3, #1]

		/* apply new phy */
		old_tx = conn->phy_tx;
		old_rx = conn->phy_rx;
    e5b2:	3b35      	subs	r3, #53	; 0x35
    e5b4:	781a      	ldrb	r2, [r3, #0]
		if (conn->llcp.phy_upd_ind.tx) {
    e5b6:	231c      	movs	r3, #28

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
    e5b8:	783e      	ldrb	r6, [r7, #0]
		old_rx = conn->phy_rx;
    e5ba:	0692      	lsls	r2, r2, #26

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = conn->phy_tx;
    e5bc:	06b0      	lsls	r0, r6, #26
    e5be:	0f40      	lsrs	r0, r0, #29
		old_rx = conn->phy_rx;
    e5c0:	0f52      	lsrs	r2, r2, #29
		if (conn->llcp.phy_upd_ind.tx) {
    e5c2:	4219      	tst	r1, r3
    e5c4:	d007      	beq.n	e5d6 <event_connection_prepare+0xce6>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    e5c6:	782b      	ldrb	r3, [r5, #0]
    e5c8:	2538      	movs	r5, #56	; 0x38
    e5ca:	06db      	lsls	r3, r3, #27
    e5cc:	0f5b      	lsrs	r3, r3, #29
    e5ce:	00db      	lsls	r3, r3, #3
    e5d0:	43ae      	bics	r6, r5
    e5d2:	431e      	orrs	r6, r3
    e5d4:	703e      	strb	r6, [r7, #0]
		}
		if (conn->llcp.phy_upd_ind.rx) {
    e5d6:	231f      	movs	r3, #31
    e5d8:	000d      	movs	r5, r1
    e5da:	439d      	bics	r5, r3
    e5dc:	d00b      	beq.n	e5f6 <event_connection_prepare+0xd06>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    e5de:	0023      	movs	r3, r4
    e5e0:	0025      	movs	r5, r4
    e5e2:	2738      	movs	r7, #56	; 0x38
    e5e4:	336c      	adds	r3, #108	; 0x6c
    e5e6:	781b      	ldrb	r3, [r3, #0]
    e5e8:	3532      	adds	r5, #50	; 0x32
    e5ea:	786e      	ldrb	r6, [r5, #1]
    e5ec:	095b      	lsrs	r3, r3, #5
    e5ee:	00db      	lsls	r3, r3, #3
    e5f0:	43be      	bics	r6, r7
    e5f2:	431e      	orrs	r6, r3
    e5f4:	706e      	strb	r6, [r5, #1]
		}
		conn->phy_flags = conn->phy_pref_flags;
    e5f6:	0025      	movs	r5, r4
    e5f8:	267f      	movs	r6, #127	; 0x7f
    e5fa:	3532      	adds	r5, #50	; 0x32
    e5fc:	782f      	ldrb	r7, [r5, #0]
    e5fe:	067b      	lsls	r3, r7, #25
    e600:	0fdb      	lsrs	r3, r3, #31
    e602:	403e      	ands	r6, r7
    e604:	01db      	lsls	r3, r3, #7
    e606:	4333      	orrs	r3, r6
    e608:	0026      	movs	r6, r4
    e60a:	702b      	strb	r3, [r5, #0]
    e60c:	3633      	adds	r6, #51	; 0x33

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    e60e:	078b      	lsls	r3, r1, #30
    e610:	d409      	bmi.n	e626 <event_connection_prepare+0xd36>
    e612:	782b      	ldrb	r3, [r5, #0]
    e614:	069b      	lsls	r3, r3, #26
    e616:	0f5b      	lsrs	r3, r3, #29
    e618:	4283      	cmp	r3, r0
    e61a:	d104      	bne.n	e626 <event_connection_prepare+0xd36>
		    (conn->phy_rx == old_rx)) {
    e61c:	7833      	ldrb	r3, [r6, #0]
    e61e:	069b      	lsls	r3, r3, #26
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
		}
		conn->phy_flags = conn->phy_pref_flags;

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    e620:	0f5b      	lsrs	r3, r3, #29
    e622:	4293      	cmp	r3, r2
    e624:	d022      	beq.n	e66c <event_connection_prepare+0xd7c>
		    (conn->phy_rx == old_rx)) {
			return;
		}

		node_rx = packet_rx_reserve_get(2);
    e626:	2002      	movs	r0, #2
    e628:	f7fd f894 	bl	b754 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    e62c:	2800      	cmp	r0, #0
    e62e:	d105      	bne.n	e63c <event_connection_prepare+0xd4c>
    e630:	4b31      	ldr	r3, [pc, #196]	; (e6f8 <event_connection_prepare+0xe08>)
    e632:	9301      	str	r3, [sp, #4]
    e634:	4b31      	ldr	r3, [pc, #196]	; (e6fc <event_connection_prepare+0xe0c>)
    e636:	9300      	str	r3, [sp, #0]
    e638:	4b36      	ldr	r3, [pc, #216]	; (e714 <event_connection_prepare+0xe24>)
    e63a:	e17a      	b.n	e932 <event_connection_prepare+0x1042>

		node_rx->hdr.handle = conn->handle;
    e63c:	8c23      	ldrh	r3, [r4, #32]
    e63e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    e640:	230c      	movs	r3, #12
    e642:	7103      	strb	r3, [r0, #4]

		pdu_data = (struct pdu_data *)&node_rx->pdu_data;
		p = (struct radio_le_phy_upd_cmplt *)&pdu_data->payload;
		p->status = 0;
    e644:	2300      	movs	r3, #0
    e646:	72c3      	strb	r3, [r0, #11]
		p->tx = conn->phy_tx;
    e648:	782b      	ldrb	r3, [r5, #0]
    e64a:	069b      	lsls	r3, r3, #26
    e64c:	0f5b      	lsrs	r3, r3, #29
    e64e:	7303      	strb	r3, [r0, #12]
		p->rx = conn->phy_rx;
    e650:	7833      	ldrb	r3, [r6, #0]
    e652:	069b      	lsls	r3, r3, #26
    e654:	0f5b      	lsrs	r3, r3, #29
    e656:	7343      	strb	r3, [r0, #13]

		packet_rx_enqueue();
    e658:	f7fd fc66 	bl	bf28 <packet_rx_enqueue>
    e65c:	e006      	b.n	e66c <event_connection_prepare+0xd7c>
			event_phy_upd_ind_prep(conn, event_counter);
			break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		default:
			LL_ASSERT(0);
    e65e:	4b26      	ldr	r3, [pc, #152]	; (e6f8 <event_connection_prepare+0xe08>)
    e660:	9301      	str	r3, [sp, #4]
    e662:	4b26      	ldr	r3, [pc, #152]	; (e6fc <event_connection_prepare+0xe0c>)
    e664:	9300      	str	r3, [sp, #0]
    e666:	4b2c      	ldr	r3, [pc, #176]	; (e718 <event_connection_prepare+0xe28>)
    e668:	f7ff fb68 	bl	dd3c <event_connection_prepare+0x44c>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    e66c:	0025      	movs	r5, r4
    e66e:	0026      	movs	r6, r4
    e670:	35a5      	adds	r5, #165	; 0xa5
    e672:	36a4      	adds	r6, #164	; 0xa4
    e674:	782a      	ldrb	r2, [r5, #0]
    e676:	7833      	ldrb	r3, [r6, #0]
    e678:	429a      	cmp	r2, r3
    e67a:	d01e      	beq.n	e6ba <event_connection_prepare+0xdca>
		struct radio_pdu_node_tx *node_tx;

		/* Stop previous event, to avoid Radio DMA corrupting the rx
		 * queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    e67c:	2200      	movs	r2, #0
    e67e:	2305      	movs	r3, #5
    e680:	0011      	movs	r1, r2
    e682:	0010      	movs	r0, r2
    e684:	f7fd fd9c 	bl	c1c0 <event_stop>

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e688:	4819      	ldr	r0, [pc, #100]	; (e6f0 <event_connection_prepare+0xe00>)
    e68a:	30d9      	adds	r0, #217	; 0xd9
    e68c:	30ff      	adds	r0, #255	; 0xff
    e68e:	f7fb fbed 	bl	9e6c <mem_acquire>
    e692:	1e01      	subs	r1, r0, #0
		if (node_tx) {
    e694:	d011      	beq.n	e6ba <event_connection_prepare+0xdca>

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e696:	2203      	movs	r2, #3
		if (node_tx) {
			struct pdu_data *pdu_ctrl_tx =
			    (struct pdu_data *)node_tx->pdu_data;

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    e698:	7833      	ldrb	r3, [r6, #0]
    e69a:	702b      	strb	r3, [r5, #0]

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e69c:	7903      	ldrb	r3, [r0, #4]
    e69e:	4313      	orrs	r3, r2
    e6a0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    e6a2:	2302      	movs	r3, #2
    e6a4:	7143      	strb	r3, [r0, #5]
				offsetof(struct pdu_data_llctrl, ctrldata) +
				sizeof(struct pdu_data_llctrl_terminate_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    e6a6:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.terminate_ind.
				error_code = conn->llcp_terminate.reason_own;
    e6a8:	0023      	movs	r3, r4
    e6aa:	33a6      	adds	r3, #166	; 0xa6
    e6ac:	781b      	ldrb	r3, [r3, #0]
    e6ae:	7203      	strb	r3, [r0, #8]

			ctrl_tx_enqueue(conn, node_tx);
    e6b0:	0020      	movs	r0, r4
    e6b2:	f7ff f847 	bl	d744 <ctrl_tx_enqueue>

			/* Terminate Procedure timeout is started, will
			 * replace any other timeout running
			 */
			conn->procedure_expire = conn->procedure_reload;
    e6b6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    e6b8:	8763      	strh	r3, [r4, #58]	; 0x3a
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    e6ba:	0027      	movs	r7, r4
    e6bc:	0023      	movs	r3, r4
    e6be:	37b5      	adds	r7, #181	; 0xb5
    e6c0:	33b4      	adds	r3, #180	; 0xb4
    e6c2:	783a      	ldrb	r2, [r7, #0]
    e6c4:	781b      	ldrb	r3, [r3, #0]
    e6c6:	429a      	cmp	r2, r3
    e6c8:	d100      	bne.n	e6cc <event_connection_prepare+0xddc>
    e6ca:	e159      	b.n	e980 <event_connection_prepare+0x1090>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    e6cc:	2200      	movs	r2, #0
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    e6ce:	0026      	movs	r6, r4
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    e6d0:	0010      	movs	r0, r2
    e6d2:	2305      	movs	r3, #5
    e6d4:	0011      	movs	r1, r2
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    e6d6:	36b6      	adds	r6, #182	; 0xb6
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    e6d8:	f7fd fd72 	bl	c1c0 <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    e6dc:	7830      	ldrb	r0, [r6, #0]
    e6de:	0780      	lsls	r0, r0, #30
    e6e0:	0f80      	lsrs	r0, r0, #30
    e6e2:	f7f1 fd53 	bl	18c <__gnu_thumb1_case_uhi>
    e6e6:	001b      	.short	0x001b
    e6e8:	014d014d 	.word	0x014d014d
    e6ec:	005e      	.short	0x005e
    e6ee:	46c0      	nop			; (mov r8, r8)
    e6f0:	20001254 	.word	0x20001254
    e6f4:	0000407f 	.word	0x0000407f
    e6f8:	000145b0 	.word	0x000145b0
    e6fc:	000145b5 	.word	0x000145b5
    e700:	00017290 	.word	0x00017290
    e704:	00014570 	.word	0x00014570
    e708:	00014577 	.word	0x00014577
    e70c:	00015d05 	.word	0x00015d05
    e710:	00007fff 	.word	0x00007fff
    e714:	00017025 	.word	0x00017025
    e718:	00016f4c 	.word	0x00016f4c
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    e71c:	f7fd f804 	bl	b728 <packet_rx_acquired_count_get>
			mem_free_count_get(_radio.pkt_rx_data_free);
    e720:	23d6      	movs	r3, #214	; 0xd6
    e722:	4fbc      	ldr	r7, [pc, #752]	; (ea14 <event_connection_prepare+0x1124>)
    e724:	005b      	lsls	r3, r3, #1
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    e726:	0005      	movs	r5, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    e728:	58f8      	ldr	r0, [r7, r3]
    e72a:	f7fb fbce 	bl	9eca <mem_free_count_get>
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		u16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    e72e:	1945      	adds	r5, r0, r5
    e730:	b2a8      	uxth	r0, r5
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    e732:	28ff      	cmp	r0, #255	; 0xff
    e734:	d842      	bhi.n	e7bc <event_connection_prepare+0xecc>

		if (_radio.packet_rx_data_count != free_count_rx) {
    e736:	23db      	movs	r3, #219	; 0xdb
    e738:	005b      	lsls	r3, r3, #1
    e73a:	5cfb      	ldrb	r3, [r7, r3]
    e73c:	4283      	cmp	r3, r0
    e73e:	d000      	beq.n	e742 <event_connection_prepare+0xe52>
    e740:	e11e      	b.n	e980 <event_connection_prepare+0x1090>
			break;
		}

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e742:	0038      	movs	r0, r7
    e744:	30d9      	adds	r0, #217	; 0xd9
    e746:	30ff      	adds	r0, #255	; 0xff
    e748:	f7fb fb90 	bl	9e6c <mem_acquire>
    e74c:	1e01      	subs	r1, r0, #0
		if (!node_tx) {
    e74e:	d100      	bne.n	e752 <event_connection_prepare+0xe62>
    e750:	e116      	b.n	e980 <event_connection_prepare+0x1090>
			break;
		}

		/* wait for resp before completing the procedure */
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    e752:	2203      	movs	r2, #3
    e754:	2001      	movs	r0, #1
    e756:	7833      	ldrb	r3, [r6, #0]
    e758:	4393      	bics	r3, r2
    e75a:	4303      	orrs	r3, r0
    e75c:	7033      	strb	r3, [r6, #0]

		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    e75e:	0023      	movs	r3, r4
    e760:	33ba      	adds	r3, #186	; 0xba
    e762:	881b      	ldrh	r3, [r3, #0]
    e764:	85a3      	strh	r3, [r4, #44]	; 0x2c

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e766:	790b      	ldrb	r3, [r1, #4]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    e768:	72c8      	strb	r0, [r1, #11]
		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e76a:	431a      	orrs	r2, r3
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    e76c:	2309      	movs	r3, #9
    e76e:	714b      	strb	r3, [r1, #5]
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    e770:	330b      	adds	r3, #11
    e772:	71cb      	strb	r3, [r1, #7]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    e774:	3307      	adds	r3, #7
    e776:	720b      	strb	r3, [r1, #8]
    e778:	2300      	movs	r3, #0
    e77a:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    e77c:	3348      	adds	r3, #72	; 0x48
		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e77e:	710a      	strb	r2, [r1, #4]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    e780:	728b      	strb	r3, [r1, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    e782:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);

		ctrl_tx_enqueue(conn, node_tx);
    e784:	0020      	movs	r0, r4

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
		lr->max_tx_octets = conn->default_tx_octets;
    e786:	0a1a      	lsrs	r2, r3, #8
    e788:	730b      	strb	r3, [r1, #12]
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);
    e78a:	330e      	adds	r3, #14
    e78c:	00db      	lsls	r3, r3, #3
    e78e:	b29b      	uxth	r3, r3
    e790:	738b      	strb	r3, [r1, #14]
    e792:	0a1b      	lsrs	r3, r3, #8
    e794:	73cb      	strb	r3, [r1, #15]

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
		lr->max_tx_octets = conn->default_tx_octets;
    e796:	734a      	strb	r2, [r1, #13]
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);

		ctrl_tx_enqueue(conn, node_tx);
    e798:	f7fe ffd4 	bl	d744 <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    e79c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    e79e:	8763      	strh	r3, [r4, #58]	; 0x3a
    e7a0:	e0ee      	b.n	e980 <event_connection_prepare+0x1090>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    e7a2:	f7fc ffc1 	bl	b728 <packet_rx_acquired_count_get>
			mem_free_count_get(_radio.pkt_rx_data_free);
    e7a6:	23d6      	movs	r3, #214	; 0xd6
    e7a8:	4d9a      	ldr	r5, [pc, #616]	; (ea14 <event_connection_prepare+0x1124>)
    e7aa:	005b      	lsls	r3, r3, #1
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    e7ac:	0006      	movs	r6, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    e7ae:	58e8      	ldr	r0, [r5, r3]
    e7b0:	f7fb fb8b 	bl	9eca <mem_free_count_get>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    e7b4:	1986      	adds	r6, r0, r6
    e7b6:	b2b0      	uxth	r0, r6
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    e7b8:	28ff      	cmp	r0, #255	; 0xff
    e7ba:	d909      	bls.n	e7d0 <event_connection_prepare+0xee0>
    e7bc:	4b96      	ldr	r3, [pc, #600]	; (ea18 <event_connection_prepare+0x1128>)
    e7be:	4a97      	ldr	r2, [pc, #604]	; (ea1c <event_connection_prepare+0x112c>)
    e7c0:	9301      	str	r3, [sp, #4]
    e7c2:	4b97      	ldr	r3, [pc, #604]	; (ea20 <event_connection_prepare+0x1130>)
    e7c4:	4997      	ldr	r1, [pc, #604]	; (ea24 <event_connection_prepare+0x1134>)
    e7c6:	9300      	str	r3, [sp, #0]
    e7c8:	4897      	ldr	r0, [pc, #604]	; (ea28 <event_connection_prepare+0x1138>)
    e7ca:	4b98      	ldr	r3, [pc, #608]	; (ea2c <event_connection_prepare+0x113c>)
    e7cc:	f7ff fab9 	bl	dd42 <event_connection_prepare+0x452>

		if (_radio.packet_rx_data_count != free_count_rx) {
    e7d0:	23db      	movs	r3, #219	; 0xdb
    e7d2:	005b      	lsls	r3, r3, #1
    e7d4:	5ceb      	ldrb	r3, [r5, r3]
    e7d6:	4283      	cmp	r3, r0
    e7d8:	d006      	beq.n	e7e8 <event_connection_prepare+0xef8>
			/** TODO another role instance has obtained
			 * memory from rx pool.
			 */
			LL_ASSERT(0);
    e7da:	4b8f      	ldr	r3, [pc, #572]	; (ea18 <event_connection_prepare+0x1128>)
    e7dc:	9301      	str	r3, [sp, #4]
    e7de:	4b90      	ldr	r3, [pc, #576]	; (ea20 <event_connection_prepare+0x1130>)
    e7e0:	9300      	str	r3, [sp, #0]
    e7e2:	4b92      	ldr	r3, [pc, #584]	; (ea2c <event_connection_prepare+0x113c>)
    e7e4:	f7ff faaa 	bl	dd3c <event_connection_prepare+0x44c>
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
    e7e8:	0023      	movs	r3, r4
    e7ea:	33b4      	adds	r3, #180	; 0xb4
    e7ec:	781b      	ldrb	r3, [r3, #0]
		conn->procedure_expire = 0;

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    e7ee:	2108      	movs	r1, #8
			 */
			LL_ASSERT(0);
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
    e7f0:	703b      	strb	r3, [r7, #0]
		conn->procedure_expire = 0;
    e7f2:	2300      	movs	r3, #0
    e7f4:	8763      	strh	r3, [r4, #58]	; 0x3a

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    e7f6:	3391      	adds	r3, #145	; 0x91
    e7f8:	33ff      	adds	r3, #255	; 0xff
    e7fa:	58eb      	ldr	r3, [r5, r3]
    e7fc:	33c0      	adds	r3, #192	; 0xc0
    e7fe:	781a      	ldrb	r2, [r3, #0]
    e800:	438a      	bics	r2, r1
    e802:	701a      	strb	r2, [r3, #0]

		/* Use the new rx octets in the connection */
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    e804:	0023      	movs	r3, r4
    e806:	33b8      	adds	r3, #184	; 0xb8
    e808:	881b      	ldrh	r3, [r3, #0]
    e80a:	8623      	strh	r3, [r4, #48]	; 0x30
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    e80c:	23c4      	movs	r3, #196	; 0xc4
    e80e:	005b      	lsls	r3, r3, #1
    e810:	58e8      	ldr	r0, [r5, r3]
		if (_radio.advertiser.conn) {
    e812:	35fc      	adds	r5, #252	; 0xfc
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    e814:	f7fb fb59 	bl	9eca <mem_free_count_get>
		if (_radio.advertiser.conn) {
    e818:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    e81a:	2b00      	cmp	r3, #0
    e81c:	d001      	beq.n	e822 <event_connection_prepare+0xf32>
			free_count_conn++;
    e81e:	3001      	adds	r0, #1
    e820:	b280      	uxth	r0, r0
		}
		if (_radio.scanner.conn) {
    e822:	22be      	movs	r2, #190	; 0xbe
    e824:	4b7b      	ldr	r3, [pc, #492]	; (ea14 <event_connection_prepare+0x1124>)
    e826:	0052      	lsls	r2, r2, #1
    e828:	589a      	ldr	r2, [r3, r2]
    e82a:	2a00      	cmp	r2, #0
    e82c:	d001      	beq.n	e832 <event_connection_prepare+0xf42>
			free_count_conn++;
    e82e:	3001      	adds	r0, #1
    e830:	b280      	uxth	r0, r0
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    e832:	2103      	movs	r1, #3
    e834:	8e22      	ldrh	r2, [r4, #48]	; 0x30
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e836:	3001      	adds	r0, #1
			free_count_conn++;
		}
		if (_radio.scanner.conn) {
			free_count_conn++;
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    e838:	320e      	adds	r2, #14
    e83a:	438a      	bics	r2, r1
    e83c:	b292      	uxth	r2, r2
    e83e:	920c      	str	r2, [sp, #48]	; 0x30
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e840:	22c6      	movs	r2, #198	; 0xc6
    e842:	0052      	lsls	r2, r2, #1
    e844:	5c9a      	ldrb	r2, [r3, r2]
    e846:	4290      	cmp	r0, r2
    e848:	d005      	beq.n	e856 <event_connection_prepare+0xf66>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
    e84a:	22da      	movs	r2, #218	; 0xda
    e84c:	0052      	lsls	r2, r2, #1
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    e84e:	5a9b      	ldrh	r3, [r3, r2]
    e850:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e852:	4293      	cmp	r3, r2
    e854:	d263      	bcs.n	e91e <event_connection_prepare+0x102e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    e856:	27df      	movs	r7, #223	; 0xdf
    e858:	007f      	lsls	r7, r7, #1
				_radio.packet_rx_last) {
    e85a:	22be      	movs	r2, #190	; 0xbe
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    e85c:	4d6d      	ldr	r5, [pc, #436]	; (ea14 <event_connection_prepare+0x1124>)
				_radio.packet_rx_last) {
    e85e:	32ff      	adds	r2, #255	; 0xff
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    e860:	5deb      	ldrb	r3, [r5, r7]
				_radio.packet_rx_last) {
    e862:	5caa      	ldrb	r2, [r5, r2]
    e864:	002e      	movs	r6, r5
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    e866:	4293      	cmp	r3, r2
    e868:	d02a      	beq.n	e8c0 <event_connection_prepare+0xfd0>
				_radio.packet_rx_last) {

				struct radio_pdu_node_rx *node_rx;

				if (_radio.packet_rx_acquire == 0) {
    e86a:	2b00      	cmp	r3, #0
    e86c:	d102      	bne.n	e874 <event_connection_prepare+0xf84>
					_radio.packet_rx_acquire =
    e86e:	33bd      	adds	r3, #189	; 0xbd
    e870:	33ff      	adds	r3, #255	; 0xff
    e872:	5ceb      	ldrb	r3, [r5, r3]
						_radio.packet_rx_count - 1;
				} else {
					_radio.packet_rx_acquire -= 1;
    e874:	3b01      	subs	r3, #1
    e876:	55eb      	strb	r3, [r5, r7]
				}

				node_rx = _radio.packet_rx[
    e878:	23df      	movs	r3, #223	; 0xdf
    e87a:	22dc      	movs	r2, #220	; 0xdc
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    e87c:	0031      	movs	r1, r6
						_radio.packet_rx_count - 1;
				} else {
					_radio.packet_rx_acquire -= 1;
				}

				node_rx = _radio.packet_rx[
    e87e:	005b      	lsls	r3, r3, #1
    e880:	5ceb      	ldrb	r3, [r5, r3]
    e882:	0052      	lsls	r2, r2, #1
    e884:	58aa      	ldr	r2, [r5, r2]
    e886:	009b      	lsls	r3, r3, #2
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    e888:	589b      	ldr	r3, [r3, r2]
    e88a:	31c5      	adds	r1, #197	; 0xc5
    e88c:	31ff      	adds	r1, #255	; 0xff
    e88e:	6818      	ldr	r0, [r3, #0]
    e890:	f7fb fb05 	bl	9e9e <mem_release>
					&_radio.link_rx_free);

				LL_ASSERT(_radio.link_rx_data_quota <
    e894:	22de      	movs	r2, #222	; 0xde
    e896:	21e8      	movs	r1, #232	; 0xe8
    e898:	0052      	lsls	r2, r2, #1
    e89a:	0049      	lsls	r1, r1, #1
    e89c:	5caa      	ldrb	r2, [r5, r2]
    e89e:	5c6b      	ldrb	r3, [r5, r1]
    e8a0:	3a01      	subs	r2, #1
    e8a2:	4293      	cmp	r3, r2
    e8a4:	db09      	blt.n	e8ba <event_connection_prepare+0xfca>
    e8a6:	4b5c      	ldr	r3, [pc, #368]	; (ea18 <event_connection_prepare+0x1128>)
    e8a8:	4a5c      	ldr	r2, [pc, #368]	; (ea1c <event_connection_prepare+0x112c>)
    e8aa:	9301      	str	r3, [sp, #4]
    e8ac:	4b5c      	ldr	r3, [pc, #368]	; (ea20 <event_connection_prepare+0x1130>)
    e8ae:	495d      	ldr	r1, [pc, #372]	; (ea24 <event_connection_prepare+0x1134>)
    e8b0:	9300      	str	r3, [sp, #0]
    e8b2:	485f      	ldr	r0, [pc, #380]	; (ea30 <event_connection_prepare+0x1140>)
    e8b4:	4b5d      	ldr	r3, [pc, #372]	; (ea2c <event_connection_prepare+0x113c>)
    e8b6:	f7ff fa44 	bl	dd42 <event_connection_prepare+0x452>
					  (_radio.packet_rx_count - 1));
				_radio.link_rx_data_quota++;
    e8ba:	3301      	adds	r3, #1
    e8bc:	546b      	strb	r3, [r5, r1]
    e8be:	e7cc      	b.n	e85a <event_connection_prepare+0xf6a>
    e8c0:	23da      	movs	r3, #218	; 0xda
				 * later down in code.
				 */
			}

			/* calculate the new rx node size and new count */
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX + 1)) {
    e8c2:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    e8c4:	005b      	lsls	r3, r3, #1
    e8c6:	2a27      	cmp	r2, #39	; 0x27
    e8c8:	d801      	bhi.n	e8ce <event_connection_prepare+0xfde>
				_radio.packet_rx_data_size =
    e8ca:	2230      	movs	r2, #48	; 0x30
    e8cc:	e001      	b.n	e8d2 <event_connection_prepare+0xfe2>
				    MROUND(offsetof(struct radio_pdu_node_rx,
						    pdu_data) +
					   (PDU_AC_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
    e8ce:	466a      	mov	r2, sp
    e8d0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    e8d2:	52f2      	strh	r2, [r6, r3]
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
    e8d4:	5af5      	ldrh	r5, [r6, r3]
			} else {
				_radio.packet_rx_data_size =
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
				_radio.packet_rx_data_pool_size /
    e8d6:	23d9      	movs	r3, #217	; 0xd9
    e8d8:	005b      	lsls	r3, r3, #1
					   (PDU_AC_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
    e8da:	5af0      	ldrh	r0, [r6, r3]
    e8dc:	0029      	movs	r1, r5
    e8de:	f7f1 fc5f 	bl	1a0 <__aeabi_uidiv>
    e8e2:	21db      	movs	r1, #219	; 0xdb
    e8e4:	b282      	uxth	r2, r0
    e8e6:	b2d3      	uxtb	r3, r2
    e8e8:	0049      	lsls	r1, r1, #1
    e8ea:	5473      	strb	r3, [r6, r1]
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
			LL_ASSERT(_radio.packet_rx_data_count);
    e8ec:	2b00      	cmp	r3, #0
    e8ee:	d109      	bne.n	e904 <event_connection_prepare+0x1014>
    e8f0:	4b49      	ldr	r3, [pc, #292]	; (ea18 <event_connection_prepare+0x1128>)
    e8f2:	4a4a      	ldr	r2, [pc, #296]	; (ea1c <event_connection_prepare+0x112c>)
    e8f4:	9301      	str	r3, [sp, #4]
    e8f6:	4b4a      	ldr	r3, [pc, #296]	; (ea20 <event_connection_prepare+0x1130>)
    e8f8:	494a      	ldr	r1, [pc, #296]	; (ea24 <event_connection_prepare+0x1134>)
    e8fa:	9300      	str	r3, [sp, #0]
    e8fc:	484d      	ldr	r0, [pc, #308]	; (ea34 <event_connection_prepare+0x1144>)
    e8fe:	4b4b      	ldr	r3, [pc, #300]	; (ea2c <event_connection_prepare+0x113c>)
    e900:	f7ff fa1f 	bl	dd42 <event_connection_prepare+0x452>

			/* re-size (re-init) the free rx pool */
			mem_init(_radio.pkt_rx_data_pool,
    e904:	0033      	movs	r3, r6
    e906:	20d4      	movs	r0, #212	; 0xd4
    e908:	33ad      	adds	r3, #173	; 0xad
    e90a:	0040      	lsls	r0, r0, #1
    e90c:	5830      	ldr	r0, [r6, r0]
    e90e:	33ff      	adds	r3, #255	; 0xff
    e910:	b2d2      	uxtb	r2, r2
    e912:	0029      	movs	r1, r5
    e914:	f7fb fa84 	bl	9e20 <mem_init>
				 &_radio.pkt_rx_data_free);

			/* allocate the rx queue include one extra for
			 * generating event in following lines.
			 */
			packet_rx_allocate(4);
    e918:	2004      	movs	r0, #4
    e91a:	f7fc ff31 	bl	b780 <packet_rx_allocate>
		}

		/* Prepare the rx packet structure */
		node_rx = packet_rx_reserve_get(2);
    e91e:	2002      	movs	r0, #2
    e920:	f7fc ff18 	bl	b754 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    e924:	2800      	cmp	r0, #0
    e926:	d109      	bne.n	e93c <event_connection_prepare+0x104c>
    e928:	4b3b      	ldr	r3, [pc, #236]	; (ea18 <event_connection_prepare+0x1128>)
    e92a:	9301      	str	r3, [sp, #4]
    e92c:	4b3c      	ldr	r3, [pc, #240]	; (ea20 <event_connection_prepare+0x1130>)
    e92e:	9300      	str	r3, [sp, #0]
    e930:	4b3e      	ldr	r3, [pc, #248]	; (ea2c <event_connection_prepare+0x113c>)
    e932:	4a3a      	ldr	r2, [pc, #232]	; (ea1c <event_connection_prepare+0x112c>)
    e934:	493b      	ldr	r1, [pc, #236]	; (ea24 <event_connection_prepare+0x1134>)
    e936:	4840      	ldr	r0, [pc, #256]	; (ea38 <event_connection_prepare+0x1148>)
    e938:	f7ff fa03 	bl	dd42 <event_connection_prepare+0x452>
		node_rx->hdr.handle = conn->handle;
    e93c:	8c23      	ldrh	r3, [r4, #32]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		/* prepare length rsp structure */
		pdu_ctrl_rx = (struct pdu_data *) node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    e93e:	2203      	movs	r2, #3
		}

		/* Prepare the rx packet structure */
		node_rx = packet_rx_reserve_get(2);
		LL_ASSERT(node_rx);
		node_rx->hdr.handle = conn->handle;
    e940:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e942:	2301      	movs	r3, #1
    e944:	7103      	strb	r3, [r0, #4]

		/* prepare length rsp structure */
		pdu_ctrl_rx = (struct pdu_data *) node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    e946:	7a03      	ldrb	r3, [r0, #8]
    e948:	4313      	orrs	r3, r2
    e94a:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
    e94c:	2309      	movs	r3, #9
    e94e:	7243      	strb	r3, [r0, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_rx->payload.llctrl.opcode =
    e950:	330c      	adds	r3, #12
    e952:	72c3      	strb	r3, [r0, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
    e954:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e956:	0a1a      	lsrs	r2, r3, #8
    e958:	7303      	strb	r3, [r0, #12]
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
    e95a:	330e      	adds	r3, #14
    e95c:	00db      	lsls	r3, r3, #3
    e95e:	b29b      	uxth	r3, r3
    e960:	7383      	strb	r3, [r0, #14]
    e962:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
    e964:	7342      	strb	r2, [r0, #13]
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
    e966:	73c3      	strb	r3, [r0, #15]
		lr->max_tx_octets = conn->max_tx_octets;
    e968:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    e96a:	0a1a      	lsrs	r2, r3, #8
    e96c:	7403      	strb	r3, [r0, #16]
		lr->max_tx_time = ((conn->max_tx_octets + 14) << 3);
    e96e:	330e      	adds	r3, #14
    e970:	00db      	lsls	r3, r3, #3
    e972:	b29b      	uxth	r3, r3
    e974:	7483      	strb	r3, [r0, #18]
    e976:	0a1b      	lsrs	r3, r3, #8

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
		lr->max_tx_octets = conn->max_tx_octets;
    e978:	7442      	strb	r2, [r0, #17]
		lr->max_tx_time = ((conn->max_tx_octets + 14) << 3);
    e97a:	74c3      	strb	r3, [r0, #19]

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
    e97c:	f7fd fad4 	bl	bf28 <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
			     &conn->hdr.ticks_xtal_to_start,
			     &conn->hdr.ticks_active_to_start,
			     conn->hdr.ticks_preempt_to_start,
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			     (conn->role.slave.role != 0) ? event_slave : event_master,
    e980:	0020      	movs	r0, r4
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* Setup XTAL startup and radio active events */
	event_common_prepare(ticks_at_expire, remainder,
    e982:	8c22      	ldrh	r2, [r4, #32]
			     &conn->hdr.ticks_xtal_to_start,
			     &conn->hdr.ticks_active_to_start,
			     conn->hdr.ticks_preempt_to_start,
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			     (conn->role.slave.role != 0) ? event_slave : event_master,
    e984:	3044      	adds	r0, #68	; 0x44
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* Setup XTAL startup and radio active events */
	event_common_prepare(ticks_at_expire, remainder,
    e986:	7805      	ldrb	r5, [r0, #0]
    e988:	3207      	adds	r2, #7
    e98a:	1d23      	adds	r3, r4, #4
    e98c:	68a1      	ldr	r1, [r4, #8]
    e98e:	b2d2      	uxtb	r2, r2
    e990:	482a      	ldr	r0, [pc, #168]	; (ea3c <event_connection_prepare+0x114c>)
    e992:	07ed      	lsls	r5, r5, #31
    e994:	d400      	bmi.n	e998 <event_connection_prepare+0x10a8>
    e996:	482a      	ldr	r0, [pc, #168]	; (ea40 <event_connection_prepare+0x1150>)
    e998:	9002      	str	r0, [sp, #8]
    e99a:	9201      	str	r2, [sp, #4]
    e99c:	9100      	str	r1, [sp, #0]
    e99e:	0022      	movs	r2, r4
    e9a0:	9403      	str	r4, [sp, #12]
    e9a2:	9911      	ldr	r1, [sp, #68]	; 0x44
    e9a4:	980d      	ldr	r0, [sp, #52]	; 0x34
    e9a6:	f7fd fdc1 	bl	c52c <event_common_prepare>
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			     (conn->role.slave.role != 0) ? event_slave : event_master,
			     conn);

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    e9aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e9ac:	3201      	adds	r2, #1
    e9ae:	8462      	strh	r2, [r4, #34]	; 0x22
    e9b0:	e02d      	b.n	ea0e <event_connection_prepare+0x111e>
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
    e9b2:	0023      	movs	r3, r4
    e9b4:	2201      	movs	r2, #1
    e9b6:	3394      	adds	r3, #148	; 0x94
    e9b8:	701a      	strb	r2, [r3, #0]
		conn->llcp.connection_update.win_offset_us = 0;
    e9ba:	2300      	movs	r3, #0
		conn->llcp.connection_update.interval = conn->conn_interval;
    e9bc:	466a      	mov	r2, sp
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
    e9be:	6033      	str	r3, [r6, #0]
		conn->llcp.connection_update.interval = conn->conn_interval;
    e9c0:	0023      	movs	r3, r4
    e9c2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
    e9c4:	336c      	adds	r3, #108	; 0x6c
    e9c6:	801a      	strh	r2, [r3, #0]
		conn->llcp.connection_update.latency = conn->latency;
    e9c8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		conn->llcp.connection_update.timeout = conn->conn_interval *
    e9ca:	21fa      	movs	r1, #250	; 0xfa
	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
    e9cc:	805a      	strh	r2, [r3, #2]
		conn->llcp.connection_update.timeout = conn->conn_interval *
    e9ce:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
    e9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e9d2:	0089      	lsls	r1, r1, #2
    e9d4:	4343      	muls	r3, r0
    e9d6:	0018      	movs	r0, r3
    e9d8:	237d      	movs	r3, #125	; 0x7d
    e9da:	4358      	muls	r0, r3
    e9dc:	f7f1 fc6a 	bl	2b4 <__aeabi_idiv>
    e9e0:	0023      	movs	r3, r4
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    e9e2:	2207      	movs	r2, #7
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
    e9e4:	3370      	adds	r3, #112	; 0x70
    e9e6:	8018      	strh	r0, [r3, #0]
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    e9e8:	782b      	ldrb	r3, [r5, #0]
    e9ea:	4393      	bics	r3, r2
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    e9ec:	3a05      	subs	r2, #5
    e9ee:	4313      	orrs	r3, r2
    e9f0:	3216      	adds	r2, #22
    e9f2:	4393      	bics	r3, r2
    e9f4:	3a10      	subs	r2, #16
    e9f6:	4313      	orrs	r3, r2
    e9f8:	702b      	strb	r3, [r5, #0]

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
    e9fa:	0023      	movs	r3, r4
    e9fc:	3a07      	subs	r2, #7
    e9fe:	336a      	adds	r3, #106	; 0x6a
    ea00:	701a      	strb	r2, [r3, #0]
		conn->llcp_ack--;
    ea02:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ea04:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ea06:	3b01      	subs	r3, #1
    ea08:	7013      	strb	r3, [r2, #0]
    ea0a:	f7ff fae6 	bl	dfda <event_connection_prepare+0x6ea>
			     (conn->role.slave.role != 0) ? event_slave : event_master,
			     conn);

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
}
    ea0e:	b013      	add	sp, #76	; 0x4c
    ea10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea12:	46c0      	nop			; (mov r8, r8)
    ea14:	20001254 	.word	0x20001254
    ea18:	000145b0 	.word	0x000145b0
    ea1c:	00014570 	.word	0x00014570
    ea20:	000145b5 	.word	0x000145b5
    ea24:	00014577 	.word	0x00014577
    ea28:	0001607e 	.word	0x0001607e
    ea2c:	00017148 	.word	0x00017148
    ea30:	000160b5 	.word	0x000160b5
    ea34:	0001610f 	.word	0x0001610f
    ea38:	00016055 	.word	0x00016055
    ea3c:	0000d565 	.word	0x0000d565
    ea40:	0000ea55 	.word	0x0000ea55

0000ea44 <event_master_prepare>:
	DEBUG_RADIO_START_S(0);
}

static void event_master_prepare(u32_t ticks_at_expire, u32_t remainder,
				 u16_t lazy, void *context)
{
    ea44:	b510      	push	{r4, lr}
	DEBUG_RADIO_PREPARE_M(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    ea46:	f7fe ff53 	bl	d8f0 <event_connection_prepare>

	DEBUG_RADIO_PREPARE_M(0);
}
    ea4a:	bd10      	pop	{r4, pc}

0000ea4c <event_slave_prepare>:
    ea4c:	b510      	push	{r4, lr}
    ea4e:	f7fe ff4f 	bl	d8f0 <event_connection_prepare>
    ea52:	bd10      	pop	{r4, pc}

0000ea54 <event_master>:

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    ea54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea56:	001c      	movs	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    ea58:	4b5c      	ldr	r3, [pc, #368]	; (ebcc <event_master+0x178>)
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    ea5a:	b087      	sub	sp, #28
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    ea5c:	7bd9      	ldrb	r1, [r3, #15]
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(u32_t ticks_at_expire, u32_t remainder, u16_t lazy,
			 void *context)
{
    ea5e:	0005      	movs	r5, r0
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    ea60:	b2c9      	uxtb	r1, r1
    ea62:	2900      	cmp	r1, #0
    ea64:	d008      	beq.n	ea78 <event_master+0x24>
    ea66:	4b5a      	ldr	r3, [pc, #360]	; (ebd0 <event_master+0x17c>)
    ea68:	4a5a      	ldr	r2, [pc, #360]	; (ebd4 <event_master+0x180>)
    ea6a:	9301      	str	r3, [sp, #4]
    ea6c:	4b5a      	ldr	r3, [pc, #360]	; (ebd8 <event_master+0x184>)
    ea6e:	495b      	ldr	r1, [pc, #364]	; (ebdc <event_master+0x188>)
    ea70:	9300      	str	r3, [sp, #0]
    ea72:	485b      	ldr	r0, [pc, #364]	; (ebe0 <event_master+0x18c>)
    ea74:	4b5b      	ldr	r3, [pc, #364]	; (ebe4 <event_master+0x190>)
    ea76:	e00d      	b.n	ea94 <event_master+0x40>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    ea78:	7b1a      	ldrb	r2, [r3, #12]
    ea7a:	8c20      	ldrh	r0, [r4, #32]
    ea7c:	b2d2      	uxtb	r2, r2
    ea7e:	3007      	adds	r0, #7
    ea80:	4282      	cmp	r2, r0
    ea82:	d00c      	beq.n	ea9e <event_master+0x4a>
    ea84:	4b52      	ldr	r3, [pc, #328]	; (ebd0 <event_master+0x17c>)
    ea86:	4a53      	ldr	r2, [pc, #332]	; (ebd4 <event_master+0x180>)
    ea88:	9301      	str	r3, [sp, #4]
    ea8a:	4b53      	ldr	r3, [pc, #332]	; (ebd8 <event_master+0x184>)
    ea8c:	4953      	ldr	r1, [pc, #332]	; (ebdc <event_master+0x188>)
    ea8e:	9300      	str	r3, [sp, #0]
    ea90:	4855      	ldr	r0, [pc, #340]	; (ebe8 <event_master+0x194>)
    ea92:	4b54      	ldr	r3, [pc, #336]	; (ebe4 <event_master+0x190>)
    ea94:	f7f2 fe68 	bl	1768 <printk>
    ea98:	b662      	cpsie	i
    ea9a:	2004      	movs	r0, #4
    ea9c:	df02      	svc	2
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    ea9e:	2604      	movs	r6, #4
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    eaa0:	b2d2      	uxtb	r2, r2

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    eaa2:	73de      	strb	r6, [r3, #15]
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
    eaa4:	7319      	strb	r1, [r3, #12]
	_radio.ticker_id_event =
    eaa6:	735a      	strb	r2, [r3, #13]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    eaa8:	22ca      	movs	r2, #202	; 0xca
    eaaa:	0052      	lsls	r2, r2, #1
    eaac:	5499      	strb	r1, [r3, r2]
	_radio.crc_expire = 0;
    eaae:	2296      	movs	r2, #150	; 0x96
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
    eab0:	2002      	movs	r0, #2
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;
    eab2:	32ff      	adds	r2, #255	; 0xff
    eab4:	5499      	strb	r1, [r3, r2]

	_radio.conn_curr = conn;
    eab6:	3a05      	subs	r2, #5
    eab8:	509c      	str	r4, [r3, r2]
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
    eaba:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    eabc:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    eabe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	conn->latency_prepare = 0;
    eac0:	8521      	strh	r1, [r4, #40]	; 0x28
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    eac2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    eac4:	f7fd fce4 	bl	c490 <packet_tx_enqueue>

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    eac8:	a905      	add	r1, sp, #20
    eaca:	0020      	movs	r0, r4
    eacc:	f7fd f97c 	bl	bdc8 <prepare_pdu_data_tx>

	pdu_data_tx->sn = conn->sn;
    ead0:	0020      	movs	r0, r4
    ead2:	2701      	movs	r7, #1
    ead4:	30c0      	adds	r0, #192	; 0xc0
    ead6:	7803      	ldrb	r3, [r0, #0]
    ead8:	9905      	ldr	r1, [sp, #20]
    eada:	403b      	ands	r3, r7
    eadc:	00db      	lsls	r3, r3, #3
    eade:	9303      	str	r3, [sp, #12]
    eae0:	780b      	ldrb	r3, [r1, #0]
    eae2:	001a      	movs	r2, r3
    eae4:	2308      	movs	r3, #8
    eae6:	439a      	bics	r2, r3
    eae8:	0013      	movs	r3, r2
    eaea:	9a03      	ldr	r2, [sp, #12]
    eaec:	4313      	orrs	r3, r2
    eaee:	700b      	strb	r3, [r1, #0]
	pdu_data_tx->nesn = conn->nesn;
    eaf0:	7803      	ldrb	r3, [r0, #0]

	connection_configure(conn);
    eaf2:	0020      	movs	r0, r4

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);

	pdu_data_tx->sn = conn->sn;
	pdu_data_tx->nesn = conn->nesn;
    eaf4:	40fb      	lsrs	r3, r7
    eaf6:	403b      	ands	r3, r7
    eaf8:	009a      	lsls	r2, r3, #2
    eafa:	780b      	ldrb	r3, [r1, #0]
    eafc:	43b3      	bics	r3, r6
    eafe:	4313      	orrs	r3, r2
    eb00:	700b      	strb	r3, [r1, #0]

	connection_configure(conn);
    eb02:	f7fe fd11 	bl	d528 <connection_configure>

	radio_tmr_tifs_set(RADIO_TIFS);
    eb06:	2096      	movs	r0, #150	; 0x96
    eb08:	f7fb fc8e 	bl	a428 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	radio_switch_complete_and_rx(conn->phy_rx);
    eb0c:	0023      	movs	r3, r4
    eb0e:	0026      	movs	r6, r4
    eb10:	3333      	adds	r3, #51	; 0x33
    eb12:	7818      	ldrb	r0, [r3, #0]
    eb14:	3617      	adds	r6, #23
    eb16:	0680      	lsls	r0, r0, #26
    eb18:	0f40      	lsrs	r0, r0, #29
    eb1a:	f7fb fbe9 	bl	a2f0 <radio_switch_complete_and_rx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	tx_packet_set(conn, pdu_data_tx);
    eb1e:	9905      	ldr	r1, [sp, #20]
    eb20:	0020      	movs	r0, r4
    eb22:	f7fd f9d8 	bl	bed6 <tx_packet_set>

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    eb26:	7f22      	ldrb	r2, [r4, #28]
    eb28:	0693      	lsls	r3, r2, #26
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    eb2a:	0e9b      	lsrs	r3, r3, #26
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

	tx_packet_set(conn, pdu_data_tx);

	/* Setup Radio Channel */
	if (conn->data_chan_sel) {
    eb2c:	0652      	lsls	r2, r2, #25
    eb2e:	d507      	bpl.n	eb40 <event_master+0xec>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    eb30:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    eb32:	8be1      	ldrh	r1, [r4, #30]
    eb34:	3801      	subs	r0, #1
    eb36:	0032      	movs	r2, r6
    eb38:	b280      	uxth	r0, r0
    eb3a:	f7fe fcb3 	bl	d4a4 <chan_sel_2>
    eb3e:	e019      	b.n	eb74 <event_master+0x120>
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    eb40:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
	} else {
		data_chan_use = chan_sel_1(&conn->data_chan_use,
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
    eb42:	9303      	str	r3, [sp, #12]
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    eb44:	7fa3      	ldrb	r3, [r4, #30]
    eb46:	3001      	adds	r0, #1
    eb48:	4358      	muls	r0, r3
    eb4a:	7fe3      	ldrb	r3, [r4, #31]
    eb4c:	2125      	movs	r1, #37	; 0x25
    eb4e:	18c0      	adds	r0, r0, r3
    eb50:	f7f1 fc96 	bl	480 <__aeabi_idivmod>
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    eb54:	2207      	movs	r2, #7
static u8_t chan_sel_1(u8_t *chan_use, u8_t hop, u16_t latency, u8_t *chan_map,
		       u8_t chan_count)
{
	u8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    eb56:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    eb58:	77e0      	strb	r0, [r4, #31]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    eb5a:	08c3      	lsrs	r3, r0, #3
    eb5c:	5cf3      	ldrb	r3, [r6, r3]
    eb5e:	4011      	ands	r1, r2
    eb60:	410b      	asrs	r3, r1
    eb62:	423b      	tst	r3, r7
    eb64:	d106      	bne.n	eb74 <event_master+0x120>
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    eb66:	9903      	ldr	r1, [sp, #12]
    eb68:	f7f1 fba0 	bl	2ac <__aeabi_uidivmod>
		chan_next = chan_sel_remap(chan_map, chan_index);
    eb6c:	0030      	movs	r0, r6
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
		u8_t chan_index;

		chan_index = chan_next % chan_count;
    eb6e:	b2c9      	uxtb	r1, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    eb70:	f7fc fdbf 	bl	b6f2 <chan_sel_remap>
					   conn->data_chan_hop,
					   conn->latency_event,
					   &conn->data_chan_map[0],
					   conn->data_chan_count);
	}
	chan_set(data_chan_use);
    eb74:	f7fd fe50 	bl	c818 <chan_set>
	     (conn->supervision_expire <= 6)) ||
	    ((conn->role.master.connect_expire != 0) &&
	     (conn->role.master.connect_expire <= 6)))
#endif
	{
		radio_tmr_start(1, ticks_at_expire +
    eb78:	0029      	movs	r1, r5
    eb7a:	4e14      	ldr	r6, [pc, #80]	; (ebcc <event_master+0x178>)
    eb7c:	3109      	adds	r1, #9
    eb7e:	68b2      	ldr	r2, [r6, #8]
    eb80:	2001      	movs	r0, #1
    eb82:	f7fb fc59 	bl	a438 <radio_tmr_start>
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
		radio_tmr_end_capture();
    eb86:	f7fb fd1b 	bl	a5c0 <radio_tmr_end_capture>

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    eb8a:	8c21      	ldrh	r1, [r4, #32]
    eb8c:	002a      	movs	r2, r5
    eb8e:	3107      	adds	r1, #7
    eb90:	b2c9      	uxtb	r1, r1
    eb92:	0020      	movs	r0, r4
    eb94:	f7fe facc 	bl	d130 <preempt_calc>
#endif

#if (defined(CONFIG_BLUETOOTH_CONTROLLER_XTAL_ADVANCED) && \
     (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
    eb98:	2800      	cmp	r0, #0
    eb9a:	d004      	beq.n	eba6 <event_master+0x152>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
				      conn->handle), ticks_at_expire)) {
		_radio.state = STATE_STOP;
    eb9c:	2304      	movs	r3, #4
    eb9e:	7433      	strb	r3, [r6, #16]
		radio_disable();
    eba0:	f7fb fb54 	bl	a24c <radio_disable>
    eba4:	e010      	b.n	ebc8 <event_master+0x174>
	{
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		u32_t ticker_status;

		ticker_status =
    eba6:	0003      	movs	r3, r0
    eba8:	4a10      	ldr	r2, [pc, #64]	; (ebec <event_master+0x198>)
    ebaa:	0001      	movs	r1, r0
    ebac:	f7fc fd24 	bl	b5f8 <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, NULL);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ebb0:	2302      	movs	r3, #2
    ebb2:	4398      	bics	r0, r3
    ebb4:	d008      	beq.n	ebc8 <event_master+0x174>
    ebb6:	4b06      	ldr	r3, [pc, #24]	; (ebd0 <event_master+0x17c>)
    ebb8:	4a06      	ldr	r2, [pc, #24]	; (ebd4 <event_master+0x180>)
    ebba:	9301      	str	r3, [sp, #4]
    ebbc:	4b06      	ldr	r3, [pc, #24]	; (ebd8 <event_master+0x184>)
    ebbe:	4907      	ldr	r1, [pc, #28]	; (ebdc <event_master+0x188>)
    ebc0:	9300      	str	r3, [sp, #0]
    ebc2:	480b      	ldr	r0, [pc, #44]	; (ebf0 <event_master+0x19c>)
    ebc4:	4b07      	ldr	r3, [pc, #28]	; (ebe4 <event_master+0x190>)
    ebc6:	e765      	b.n	ea94 <event_master+0x40>
			  (ticker_status == TICKER_STATUS_BUSY));
#endif
	}

	DEBUG_RADIO_START_M(0);
}
    ebc8:	b007      	add	sp, #28
    ebca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebcc:	20001254 	.word	0x20001254
    ebd0:	000145b0 	.word	0x000145b0
    ebd4:	00014570 	.word	0x00014570
    ebd8:	000145b5 	.word	0x000145b5
    ebdc:	00014577 	.word	0x00014577
    ebe0:	00015f24 	.word	0x00015f24
    ebe4:	00017270 	.word	0x00017270
    ebe8:	00015fdc 	.word	0x00015fdc
    ebec:	0000c1a5 	.word	0x0000c1a5
    ebf0:	00015cb7 	.word	0x00015cb7

0000ebf4 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebf6:	b097      	sub	sp, #92	; 0x5c
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    ebf8:	f7fb fb44 	bl	a284 <radio_is_done>
    ebfc:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    ebfe:	2e00      	cmp	r6, #0
    ec00:	d012      	beq.n	ec28 <isr+0x34>
		 * and generate the profiling event at the end of the ISR.
		 */
		radio_tmr_sample();
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

		crc_ok = radio_crc_is_valid();
    ec02:	f7fb fb63 	bl	a2cc <radio_crc_is_valid>
    ec06:	b2c3      	uxtb	r3, r0
    ec08:	9311      	str	r3, [sp, #68]	; 0x44
		devmatch_ok = radio_filter_has_match();
    ec0a:	f7fb fbe7 	bl	a3dc <radio_filter_has_match>
    ec0e:	b2c7      	uxtb	r7, r0
		irkmatch_ok = radio_ar_has_match();
    ec10:	f7fb fdd2 	bl	a7b8 <radio_ar_has_match>
    ec14:	b2c5      	uxtb	r5, r0
		irkmatch_id = radio_ar_match_get();
    ec16:	f7fb fdb7 	bl	a788 <radio_ar_match_get>
    ec1a:	b2c3      	uxtb	r3, r0
    ec1c:	9312      	str	r3, [sp, #72]	; 0x48
		rssi_ready = radio_rssi_is_ready();
    ec1e:	f7fb fb99 	bl	a354 <radio_rssi_is_ready>
    ec22:	b2c3      	uxtb	r3, r0
    ec24:	930a      	str	r3, [sp, #40]	; 0x28
    ec26:	e005      	b.n	ec34 <isr+0x40>
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
		irkmatch_id = 0xFF;
    ec28:	23ff      	movs	r3, #255	; 0xff
		devmatch_ok = radio_filter_has_match();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    ec2a:	0035      	movs	r5, r6
    ec2c:	0037      	movs	r7, r6
    ec2e:	960a      	str	r6, [sp, #40]	; 0x28
		irkmatch_id = 0xFF;
    ec30:	9312      	str	r3, [sp, #72]	; 0x48
		devmatch_ok = radio_filter_has_match();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    ec32:	9611      	str	r6, [sp, #68]	; 0x44
		irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	radio_status_reset();
    ec34:	f7fb fb14 	bl	a260 <radio_status_reset>
	radio_tmr_status_reset();
    ec38:	f7fb fbe6 	bl	a408 <radio_tmr_status_reset>
	radio_filter_status_reset();
    ec3c:	f7fb fbc6 	bl	a3cc <radio_filter_status_reset>
	radio_ar_status_reset();
    ec40:	f7fb fdaa 	bl	a798 <radio_ar_status_reset>
	radio_rssi_status_reset();
    ec44:	f7fb fb80 	bl	a348 <radio_rssi_status_reset>

	switch (_radio.state) {
    ec48:	4ca8      	ldr	r4, [pc, #672]	; (eeec <isr+0x2f8>)
    ec4a:	7c23      	ldrb	r3, [r4, #16]
    ec4c:	2b05      	cmp	r3, #5
    ec4e:	d901      	bls.n	ec54 <isr+0x60>
    ec50:	f001 fecf 	bl	109f2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9f3>
    ec54:	0018      	movs	r0, r3
    ec56:	f7f1 fa99 	bl	18c <__gnu_thumb1_case_uhi>
    ec5a:	0f20      	.short	0x0f20
    ec5c:	000600b3 	.word	0x000600b3
    ec60:	0ca80ca8 	.word	0x0ca80ca8
    ec64:	0ca8      	.short	0x0ca8

static inline void isr_radio_state_tx(void)
{
	u32_t hcto;

	_radio.state = STATE_RX;
    ec66:	2301      	movs	r3, #1
    ec68:	7423      	strb	r3, [r4, #16]

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    ec6a:	f7fb fcbf 	bl	a5ec <radio_tmr_end_get>
    ec6e:	0005      	movs	r5, r0

	radio_tmr_tifs_set(RADIO_TIFS);
    ec70:	2096      	movs	r0, #150	; 0x96
    ec72:	f7fb fbd9 	bl	a428 <radio_tmr_tifs_set>

	switch (_radio.role) {
    ec76:	7be0      	ldrb	r0, [r4, #15]
    ec78:	3801      	subs	r0, #1
    ec7a:	2803      	cmp	r0, #3
    ec7c:	d900      	bls.n	ec80 <isr+0x8c>
    ec7e:	e098      	b.n	edb2 <isr+0x1be>
    ec80:	f7f1 fa7a 	bl	178 <__gnu_thumb1_case_uqi>
    ec84:	4d4d2a02 	.word	0x4d4d2a02
	case ROLE_ADV:
		radio_switch_complete_and_tx(0, 0);
    ec88:	2100      	movs	r1, #0
    ec8a:	0008      	movs	r0, r1
    ec8c:	f7fb fb38 	bl	a300 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    ec90:	f7fb fb2a 	bl	a2e8 <radio_pkt_scratch_get>
    ec94:	f7fb fab6 	bl	a204 <radio_pkt_rx_set>

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    ec98:	f7fb faec 	bl	a274 <radio_is_ready>
    ec9c:	2800      	cmp	r0, #0
    ec9e:	d158      	bne.n	ed52 <isr+0x15e>

		if (_radio.advertiser.filter_policy && _radio.nirk) {
    eca0:	0023      	movs	r3, r4
    eca2:	223f      	movs	r2, #63	; 0x3f
    eca4:	33a5      	adds	r3, #165	; 0xa5
    eca6:	781b      	ldrb	r3, [r3, #0]
    eca8:	4393      	bics	r3, r2
    ecaa:	d006      	beq.n	ecba <isr+0xc6>
    ecac:	7c60      	ldrb	r0, [r4, #17]
    ecae:	2800      	cmp	r0, #0
    ecb0:	d003      	beq.n	ecba <isr+0xc6>
			radio_ar_configure(_radio.nirk, _radio.irk);
    ecb2:	0021      	movs	r1, r4
    ecb4:	3112      	adds	r1, #18
    ecb6:	f7fb fd39 	bl	a72c <radio_ar_configure>
		}

		hcto += radio_rx_chain_delay_get(0, 0);
    ecba:	2100      	movs	r1, #0
    ecbc:	0008      	movs	r0, r1
    ecbe:	f7fb fab7 	bl	a230 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
    ecc2:	2100      	movs	r1, #0
		if (_radio.advertiser.filter_policy && _radio.nirk) {
			radio_ar_configure(_radio.nirk, _radio.irk);
		}

		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
    ecc4:	35c3      	adds	r5, #195	; 0xc3
    ecc6:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    ecc8:	0008      	movs	r0, r1
    ecca:	f7fb faad 	bl	a228 <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    ecce:	1a28      	subs	r0, r5, r0
    ecd0:	f7fb fc1c 	bl	a50c <radio_tmr_hcto_configure>
    ecd4:	f001 fc81 	bl	105da <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5db>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_RSSI */

		break;

	case ROLE_SCAN:
		radio_switch_complete_and_tx(0, 0);
    ecd8:	2100      	movs	r1, #0
    ecda:	0008      	movs	r0, r1
    ecdc:	f7fb fb10 	bl	a300 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    ece0:	23be      	movs	r3, #190	; 0xbe
    ece2:	22dc      	movs	r2, #220	; 0xdc
    ece4:	33ff      	adds	r3, #255	; 0xff
    ece6:	5ce3      	ldrb	r3, [r4, r3]
    ece8:	0052      	lsls	r2, r2, #1
    ecea:	58a2      	ldr	r2, [r4, r2]
    ecec:	009b      	lsls	r3, r3, #2
    ecee:	5898      	ldr	r0, [r3, r2]
    ecf0:	3008      	adds	r0, #8
    ecf2:	f7fb fa87 	bl	a204 <radio_pkt_rx_set>
				    pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    ecf6:	f7fb fabd 	bl	a274 <radio_is_ready>
    ecfa:	1e04      	subs	r4, r0, #0
    ecfc:	d129      	bne.n	ed52 <isr+0x15e>

		hcto += radio_rx_chain_delay_get(0, 0);
    ecfe:	0001      	movs	r1, r0
    ed00:	f7fb fa96 	bl	a230 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    ed04:	35c3      	adds	r5, #195	; 0xc3
    ed06:	182d      	adds	r5, r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    ed08:	0021      	movs	r1, r4
    ed0a:	0020      	movs	r0, r4
    ed0c:	f7fb fa8c 	bl	a228 <radio_tx_chain_delay_get>

		radio_tmr_hcto_configure(hcto);
    ed10:	1a28      	subs	r0, r5, r0
    ed12:	f7fb fbfb 	bl	a50c <radio_tmr_hcto_configure>
		radio_rssi_measure();
    ed16:	f7fb fb03 	bl	a320 <radio_rssi_measure>
    ed1a:	f001 febe 	bl	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>
		/* fall thru */

	case ROLE_SLAVE:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
    ed1e:	26c8      	movs	r6, #200	; 0xc8
    ed20:	0076      	lsls	r6, r6, #1
					     _radio.conn_curr->phy_flags);
    ed22:	59a3      	ldr	r3, [r4, r6]
    ed24:	3332      	adds	r3, #50	; 0x32
    ed26:	7818      	ldrb	r0, [r3, #0]
		/* fall thru */

	case ROLE_SLAVE:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_tx(_radio.conn_curr->phy_tx,
    ed28:	09c1      	lsrs	r1, r0, #7
    ed2a:	0680      	lsls	r0, r0, #26
    ed2c:	0f40      	lsrs	r0, r0, #29
    ed2e:	f7fb fae7 	bl	a300 <radio_switch_complete_and_tx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    ed32:	23be      	movs	r3, #190	; 0xbe
    ed34:	22dc      	movs	r2, #220	; 0xdc
    ed36:	33ff      	adds	r3, #255	; 0xff
    ed38:	5ce3      	ldrb	r3, [r4, r3]
    ed3a:	0052      	lsls	r2, r2, #1
    ed3c:	58a2      	ldr	r2, [r4, r2]
    ed3e:	009b      	lsls	r3, r3, #2
					     _radio.conn_curr->phy_flags);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_tx(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    ed40:	5899      	ldr	r1, [r3, r2]
    ed42:	59a0      	ldr	r0, [r4, r6]
    ed44:	3108      	adds	r1, #8
    ed46:	f7fd f817 	bl	bd78 <rx_packet_set>
			      packet_rx[_radio.packet_rx_last]->pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    ed4a:	f7fb fa93 	bl	a274 <radio_is_ready>
    ed4e:	2800      	cmp	r0, #0
    ed50:	d006      	beq.n	ed60 <isr+0x16c>
    ed52:	4b67      	ldr	r3, [pc, #412]	; (eef0 <isr+0x2fc>)
    ed54:	9301      	str	r3, [sp, #4]
    ed56:	4b67      	ldr	r3, [pc, #412]	; (eef4 <isr+0x300>)
    ed58:	9300      	str	r3, [sp, #0]
    ed5a:	4b67      	ldr	r3, [pc, #412]	; (eef8 <isr+0x304>)
    ed5c:	f000 fcc9 	bl	f6f2 <isr+0xafe>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
    ed60:	59a3      	ldr	r3, [r4, r6]
{
	u32_t hcto;

	_radio.state = STATE_RX;

	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    ed62:	359b      	adds	r5, #155	; 0x9b
		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
    ed64:	3332      	adds	r3, #50	; 0x32
    ed66:	7818      	ldrb	r0, [r3, #0]

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    ed68:	09c1      	lsrs	r1, r0, #7
    ed6a:	0680      	lsls	r0, r0, #26
    ed6c:	0f40      	lsrs	r0, r0, #29
    ed6e:	f7fb fa5f 	bl	a230 <radio_rx_chain_delay_get>
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ed72:	59a3      	ldr	r3, [r4, r6]

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
    ed74:	182d      	adds	r5, r5, r0
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ed76:	001a      	movs	r2, r3
    ed78:	3233      	adds	r2, #51	; 0x33
    ed7a:	7810      	ldrb	r0, [r2, #0]
	switch (phy) {
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
    ed7c:	2218      	movs	r2, #24
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ed7e:	0680      	lsls	r0, r0, #26
    ed80:	0f40      	lsrs	r0, r0, #29
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
    ed82:	2802      	cmp	r0, #2
    ed84:	d005      	beq.n	ed92 <isr+0x19e>
    ed86:	2804      	cmp	r0, #4
    ed88:	d102      	bne.n	ed90 <isr+0x19c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    ed8a:	3261      	adds	r2, #97	; 0x61
    ed8c:	32ff      	adds	r2, #255	; 0xff
    ed8e:	e000      	b.n	ed92 <isr+0x19e>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
    ed90:	2228      	movs	r2, #40	; 0x28
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
						 _radio.conn_curr->phy_flags);
    ed92:	3332      	adds	r3, #50	; 0x32
    ed94:	7819      	ldrb	r1, [r3, #0]
		LL_ASSERT(!radio_is_ready());

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_tx,
						 _radio.conn_curr->phy_flags);
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ed96:	1955      	adds	r5, r2, r5
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_rx,
    ed98:	09c9      	lsrs	r1, r1, #7
    ed9a:	f7fb fa45 	bl	a228 <radio_tx_chain_delay_get>
		hcto += radio_rx_chain_delay_get(0, 0);
		hcto += addr_us_get(0);
		hcto -= radio_tx_chain_delay_get(0, 0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_hcto_configure(hcto);
    ed9e:	1a28      	subs	r0, r5, r0
    eda0:	f7fb fbb4 	bl	a50c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    eda4:	f7fb fc0c 	bl	a5c0 <radio_tmr_end_capture>
		/* TODO: use timebox for tx enqueue (instead of 1 packet
		 * that is routed, which may not be for the current connection)
		 * try to route as much tx packet in queue into corresponding
		 * connection's tx list.
		 */
		packet_tx_enqueue(1);
    eda8:	2001      	movs	r0, #1
    edaa:	f7fd fb71 	bl	c490 <packet_tx_enqueue>
    edae:	f001 fe74 	bl	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>

		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
    edb2:	4b4f      	ldr	r3, [pc, #316]	; (eef0 <isr+0x2fc>)
    edb4:	9301      	str	r3, [sp, #4]
    edb6:	4b4f      	ldr	r3, [pc, #316]	; (eef4 <isr+0x300>)
    edb8:	9300      	str	r3, [sp, #0]
    edba:	4b4f      	ldr	r3, [pc, #316]	; (eef8 <isr+0x304>)
    edbc:	f001 fe1e 	bl	109fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9fd>
				      u8_t devmatch_ok, u8_t irkmatch_ok,
				      u8_t irkmatch_id, u8_t rssi_ready)
{
	u32_t err;

	if (!((trx_done) || ((SILENT_CONNECTION) &&
    edc0:	2e00      	cmp	r6, #0
    edc2:	d105      	bne.n	edd0 <isr+0x1dc>
			     (_radio.role == ROLE_SLAVE)))) {
		_radio.state = STATE_CLOSE;
    edc4:	2303      	movs	r3, #3
    edc6:	7423      	strb	r3, [r4, #16]
		radio_disable();
    edc8:	f7fb fa40 	bl	a24c <radio_disable>
    edcc:	f001 fe65 	bl	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>

		return;
	}

	switch (_radio.role) {
    edd0:	7be0      	ldrb	r0, [r4, #15]
    edd2:	3801      	subs	r0, #1
    edd4:	2803      	cmp	r0, #3
    edd6:	d901      	bls.n	eddc <isr+0x1e8>
    edd8:	f001 fbe1 	bl	1059e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x59f>
    eddc:	f7f1 f9d6 	bl	18c <__gnu_thumb1_case_uhi>
    ede0:	024d0004 	.word	0x024d0004
    ede4:	029a029a 	.word	0x029a029a
	case ROLE_ADV:
		if (crc_ok) {
    ede8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    edea:	2b00      	cmp	r3, #0
    edec:	d0ea      	beq.n	edc4 <isr+0x1d0>
			       u8_t irkmatch_id, u8_t rssi_ready)
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    edee:	f7fb fa7b 	bl	a2e8 <radio_pkt_scratch_get>
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    edf2:	220f      	movs	r2, #15
    edf4:	7803      	ldrb	r3, [r0, #0]
			       u8_t irkmatch_id, u8_t rssi_ready)
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    edf6:	0006      	movs	r6, r0
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    edf8:	401a      	ands	r2, r3
    edfa:	2a03      	cmp	r2, #3
    edfc:	d137      	bne.n	ee6e <isr+0x27a>
    edfe:	7843      	ldrb	r3, [r0, #1]
    ee00:	2b0c      	cmp	r3, #12
    ee02:	d1df      	bne.n	edc4 <isr+0x1d0>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
	    (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    ee04:	0023      	movs	r3, r4
    ee06:	33a5      	adds	r3, #165	; 0xa5
    ee08:	781b      	ldrb	r3, [r3, #0]
	     (devmatch_ok) || (irkmatch_ok)) &&
    ee0a:	065b      	lsls	r3, r3, #25
    ee0c:	d501      	bpl.n	ee12 <isr+0x21e>
    ee0e:	433d      	orrs	r5, r7
    ee10:	d0d8      	beq.n	edc4 <isr+0x1d0>
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct pdu_adv *pdu_adv;
	u8_t pdu_len;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
    ee12:	2003      	movs	r0, #3
    ee14:	f7fc fc9e 	bl	b754 <packet_rx_reserve_get>
	if (radio_pdu_node_rx == 0) {
    ee18:	2800      	cmp	r0, #0
    ee1a:	d0d3      	beq.n	edc4 <isr+0x1d0>
		return 1;
	}

	/* Prepare the report (scan req) */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    ee1c:	2301      	movs	r3, #1
    ee1e:	425b      	negs	r3, r3
    ee20:	80c3      	strh	r3, [r0, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_SCAN_REQ;
    ee22:	3306      	adds	r3, #6
    ee24:	7103      	strb	r3, [r0, #4]

	/* Make a copy of PDU into Rx node (as the received PDU is in the
	 * scratch buffer), and save the RSSI value.
	 */
	pdu_adv = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
    ee26:	3008      	adds	r0, #8
    ee28:	0007      	movs	r7, r0
	pdu_len = offsetof(struct pdu_adv, payload) + pdu_adv_rx->len;
	memcpy(pdu_adv, pdu_adv_rx, pdu_len);
    ee2a:	7875      	ldrb	r5, [r6, #1]
    ee2c:	0031      	movs	r1, r6
    ee2e:	3502      	adds	r5, #2
    ee30:	b2ed      	uxtb	r5, r5
    ee32:	002a      	movs	r2, r5
    ee34:	f7f2 fa96 	bl	1364 <memcpy>
	((u8_t *)pdu_adv)[pdu_len] =
    ee38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee3a:	197d      	adds	r5, r7, r5
    ee3c:	277f      	movs	r7, #127	; 0x7f
    ee3e:	2b00      	cmp	r3, #0
    ee40:	d002      	beq.n	ee48 <isr+0x254>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    ee42:	f7fb fa79 	bl	a338 <radio_rssi_get>
	 * scratch buffer), and save the RSSI value.
	 */
	pdu_adv = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
	pdu_len = offsetof(struct pdu_adv, payload) + pdu_adv_rx->len;
	memcpy(pdu_adv, pdu_adv_rx, pdu_len);
	((u8_t *)pdu_adv)[pdu_len] =
    ee46:	4007      	ands	r7, r0
    ee48:	702f      	strb	r7, [r5, #0]
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

	packet_rx_enqueue();
    ee4a:	f7fd f86d 	bl	bf28 <packet_rx_enqueue>
			/* Scan Response will not be transmitted */
			return err;
		}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_SCAN_REQ_NOTIFY */

		_radio.state = STATE_CLOSE;
    ee4e:	2303      	movs	r3, #3
    ee50:	7423      	strb	r3, [r4, #16]

		radio_switch_complete_and_disable();
    ee52:	f7fb fa5d 	bl	a310 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);
    ee56:	23a2      	movs	r3, #162	; 0xa2
    ee58:	005b      	lsls	r3, r3, #1

		_radio.state = STATE_CLOSE;

		radio_switch_complete_and_disable();

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
    ee5a:	5ce0      	ldrb	r0, [r4, r3]
    ee5c:	3b1e      	subs	r3, #30
    ee5e:	3bff      	subs	r3, #255	; 0xff
    ee60:	4358      	muls	r0, r3
    ee62:	1820      	adds	r0, r4, r0
    ee64:	30f6      	adds	r0, #246	; 0xf6
    ee66:	f7fb f9d5 	bl	a214 <radio_pkt_tx_set>
    ee6a:	f001 fe16 	bl	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    ee6e:	2a05      	cmp	r2, #5
    ee70:	d1a8      	bne.n	edc4 <isr+0x1d0>
    ee72:	7842      	ldrb	r2, [r0, #1]
    ee74:	2a22      	cmp	r2, #34	; 0x22
    ee76:	d1a5      	bne.n	edc4 <isr+0x1d0>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    ee78:	0022      	movs	r2, r4
    ee7a:	32a5      	adds	r2, #165	; 0xa5
    ee7c:	7812      	ldrb	r2, [r2, #0]
    ee7e:	0992      	lsrs	r2, r2, #6
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
    ee80:	0792      	lsls	r2, r2, #30
    ee82:	d501      	bpl.n	ee88 <isr+0x294>
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
    ee84:	433d      	orrs	r5, r7
    ee86:	d09d      	beq.n	edc4 <isr+0x1d0>
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
		[_radio.advertiser.adv_data.first][0];
    ee88:	0022      	movs	r2, r4
    ee8a:	32f4      	adds	r2, #244	; 0xf4
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    ee8c:	7811      	ldrb	r1, [r2, #0]
    ee8e:	2227      	movs	r2, #39	; 0x27
    ee90:	434a      	muls	r2, r1

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
    ee92:	210f      	movs	r1, #15
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    ee94:	32a0      	adds	r2, #160	; 0xa0
    ee96:	18a2      	adds	r2, r4, r2
    ee98:	920e      	str	r2, [sp, #56]	; 0x38

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
    ee9a:	7992      	ldrb	r2, [r2, #6]
    ee9c:	4011      	ands	r1, r2
    ee9e:	2901      	cmp	r1, #1
    eea0:	d005      	beq.n	eeae <isr+0x2ba>
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    eea2:	23ff      	movs	r3, #255	; 0xff
    eea4:	005b      	lsls	r3, r3, #1
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
    eea6:	5ce3      	ldrb	r3, [r4, r3]
    eea8:	2b00      	cmp	r3, #0
    eeaa:	d030      	beq.n	ef0e <isr+0x31a>
    eeac:	e026      	b.n	eefc <isr+0x308>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
    eeae:	0651      	lsls	r1, r2, #25
		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
    eeb0:	0fc9      	lsrs	r1, r1, #31
    eeb2:	09d8      	lsrs	r0, r3, #7
    eeb4:	4281      	cmp	r1, r0
    eeb6:	d185      	bne.n	edc4 <isr+0x1d0>
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
    eeb8:	065b      	lsls	r3, r3, #25
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
    eeba:	09d2      	lsrs	r2, r2, #7
    eebc:	0fdb      	lsrs	r3, r3, #31
    eebe:	429a      	cmp	r2, r3
    eec0:	d000      	beq.n	eec4 <isr+0x2d0>
    eec2:	e77f      	b.n	edc4 <isr+0x1d0>
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
    eec4:	0031      	movs	r1, r6
    eec6:	980e      	ldr	r0, [sp, #56]	; 0x38
    eec8:	2206      	movs	r2, #6
    eeca:	3108      	adds	r1, #8
    eecc:	3008      	adds	r0, #8
    eece:	f7f2 fa21 	bl	1314 <memcmp>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
    eed2:	2800      	cmp	r0, #0
    eed4:	d000      	beq.n	eed8 <isr+0x2e4>
    eed6:	e775      	b.n	edc4 <isr+0x1d0>
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
    eed8:	980e      	ldr	r0, [sp, #56]	; 0x38
			     pdu_adv->payload.connect_ind.init_addr,
    eeda:	1cb1      	adds	r1, r6, #2
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
    eedc:	2206      	movs	r2, #6
    eede:	300e      	adds	r0, #14
    eee0:	f7f2 fa18 	bl	1314 <memcmp>
		   ((_pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) ||
		    ((_pdu_adv->tx_addr == pdu_adv->rx_addr) &&
		     (_pdu_adv->rx_addr == pdu_adv->tx_addr) &&
		     !memcmp(_pdu_adv->payload.direct_ind.adv_addr,
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
    eee4:	2800      	cmp	r0, #0
    eee6:	d0dc      	beq.n	eea2 <isr+0x2ae>
    eee8:	e76c      	b.n	edc4 <isr+0x1d0>
    eeea:	46c0      	nop			; (mov r8, r8)
    eeec:	20001254 	.word	0x20001254
    eef0:	000145b0 	.word	0x000145b0
    eef4:	000145b5 	.word	0x000145b5
    eef8:	000172d5 	.word	0x000172d5
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    eefc:	23fe      	movs	r3, #254	; 0xfe
    eefe:	22fe      	movs	r2, #254	; 0xfe
    ef00:	005b      	lsls	r3, r3, #1
    ef02:	32ff      	adds	r2, #255	; 0xff
    ef04:	5ce3      	ldrb	r3, [r4, r3]
    ef06:	5ca2      	ldrb	r2, [r4, r2]
    ef08:	429a      	cmp	r2, r3
    ef0a:	d000      	beq.n	ef0e <isr+0x31a>
    ef0c:	e75a      	b.n	edc4 <isr+0x1d0>
		   (_radio.advertiser.conn)) {
    ef0e:	0025      	movs	r5, r4
    ef10:	35fc      	adds	r5, #252	; 0xfc
			     pdu_adv->payload.connect_ind.adv_addr,
			     BDADDR_SIZE) &&
		     !memcmp(_pdu_adv->payload.direct_ind.tgt_addr,
			     pdu_adv->payload.connect_ind.init_addr,
			     BDADDR_SIZE))) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    ef12:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    ef14:	2b00      	cmp	r3, #0
    ef16:	d100      	bne.n	ef1a <isr+0x326>
    ef18:	e754      	b.n	edc4 <isr+0x1d0>
		u32_t conn_offset_us;
		u32_t rx_ready_delay;
		u32_t ticker_status;

		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			radio_pdu_node_rx = packet_rx_reserve_get(4);
    ef1a:	2004      	movs	r0, #4
    ef1c:	f7fc fc1a 	bl	b754 <packet_rx_reserve_get>
    ef20:	900a      	str	r0, [sp, #40]	; 0x28
		} else {
			radio_pdu_node_rx = packet_rx_reserve_get(3);
		}

		if (radio_pdu_node_rx == 0) {
    ef22:	2800      	cmp	r0, #0
    ef24:	d100      	bne.n	ef28 <isr+0x334>
    ef26:	e74d      	b.n	edc4 <isr+0x1d0>
			return 1;
		}

		_radio.state = STATE_STOP;
    ef28:	2304      	movs	r3, #4
    ef2a:	7423      	strb	r3, [r4, #16]
		radio_disable();
    ef2c:	f7fb f98e 	bl	a24c <radio_disable>

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    ef30:	2300      	movs	r3, #0

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ef32:	228c      	movs	r2, #140	; 0x8c

		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
    ef34:	6cef      	ldr	r7, [r5, #76]	; 0x4c
		_radio.advertiser.conn = NULL;
    ef36:	64eb      	str	r3, [r5, #76]	; 0x4c

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ef38:	3385      	adds	r3, #133	; 0x85
    ef3a:	33ff      	adds	r3, #255	; 0xff
    ef3c:	58e1      	ldr	r1, [r4, r3]
    ef3e:	0052      	lsls	r2, r2, #1
    ef40:	0038      	movs	r0, r7
    ef42:	f7fa ffcd 	bl	9ee0 <mem_index_get>
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    ef46:	0031      	movs	r1, r6
		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    ef48:	8438      	strh	r0, [r7, #32]
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    ef4a:	0038      	movs	r0, r7
    ef4c:	2203      	movs	r2, #3
    ef4e:	3112      	adds	r1, #18
    ef50:	3014      	adds	r0, #20
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    ef52:	003d      	movs	r5, r7
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    ef54:	f7f2 fa06 	bl	1364 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    ef58:	0031      	movs	r1, r6
    ef5a:	3510      	adds	r5, #16
    ef5c:	2204      	movs	r2, #4
    ef5e:	310e      	adds	r1, #14
    ef60:	0028      	movs	r0, r5
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    ef62:	003c      	movs	r4, r7
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
		       &pdu_adv->payload.connect_ind.lldata.crc_init[0],
		       3);
		memcpy(&conn->access_addr[0],
    ef64:	f7f2 f9fe 	bl	1364 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
    ef68:	0031      	movs	r1, r6
    ef6a:	3417      	adds	r4, #23
    ef6c:	2205      	movs	r2, #5
    ef6e:	311e      	adds	r1, #30
    ef70:	0020      	movs	r0, r4
    ef72:	f7f2 f9f7 	bl	1364 <memcpy>
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
    ef76:	2105      	movs	r1, #5
    ef78:	0020      	movs	r0, r4
    ef7a:	f7fa fff9 	bl	9f70 <util_ones_count_get>
		       &pdu_adv->payload.connect_ind.lldata.access_addr[0],
		       4);
		memcpy(&conn->data_chan_map[0],
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
    ef7e:	223f      	movs	r2, #63	; 0x3f
    ef80:	7f3b      	ldrb	r3, [r7, #28]
    ef82:	4010      	ands	r0, r2
    ef84:	4393      	bics	r3, r2
    ef86:	4318      	orrs	r0, r3
    ef88:	7738      	strb	r0, [r7, #28]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    ef8a:	0038      	movs	r0, r7
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    ef8c:	1d33      	adds	r3, r6, #4
    ef8e:	7fdb      	ldrb	r3, [r3, #31]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    ef90:	4cc9      	ldr	r4, [pc, #804]	; (f2b8 <isr+0x6c4>)
		       &pdu_adv->payload.connect_ind.lldata.chan_map[0],
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
    ef92:	06db      	lsls	r3, r3, #27
    ef94:	0edb      	lsrs	r3, r3, #27
    ef96:	77bb      	strb	r3, [r7, #30]
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    ef98:	7e73      	ldrb	r3, [r6, #25]
    ef9a:	7e32      	ldrb	r2, [r6, #24]
    ef9c:	021b      	lsls	r3, r3, #8
    ef9e:	4313      	orrs	r3, r2
		       sizeof(conn->data_chan_map));
		conn->data_chan_count =
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
    efa0:	84bb      	strh	r3, [r7, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
    efa2:	7e73      	ldrb	r3, [r6, #25]
    efa4:	7e32      	ldrb	r2, [r6, #24]
    efa6:	021b      	lsls	r3, r3, #8
			util_ones_count_get(&conn->data_chan_map[0],
					    sizeof(conn->data_chan_map));
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
		conn->conn_interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		conn_interval_us =
    efa8:	4313      	orrs	r3, r2
    efaa:	4363      	muls	r3, r4
    efac:	930c      	str	r3, [sp, #48]	; 0x30
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
    efae:	7ef3      	ldrb	r3, [r6, #27]
    efb0:	7eb2      	ldrb	r2, [r6, #26]
    efb2:	021b      	lsls	r3, r3, #8
    efb4:	4313      	orrs	r3, r2
    efb6:	84fb      	strh	r3, [r7, #38]	; 0x26
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    efb8:	2204      	movs	r2, #4
    efba:	0029      	movs	r1, r5
    efbc:	3060      	adds	r0, #96	; 0x60
    efbe:	f7f2 f9d1 	bl	1364 <memcpy>
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
    efc2:	7f70      	ldrb	r0, [r6, #29]
    efc4:	7f33      	ldrb	r3, [r6, #28]
    efc6:	0200      	lsls	r0, r0, #8
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    efc8:	4318      	orrs	r0, r3
    efca:	4bbc      	ldr	r3, [pc, #752]	; (f2bc <isr+0x6c8>)
    efcc:	990c      	ldr	r1, [sp, #48]	; 0x30
    efce:	4358      	muls	r0, r3
    efd0:	f7f1 f8e6 	bl	1a0 <__aeabi_uidiv>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    efd4:	990c      	ldr	r1, [sp, #48]	; 0x30
		conn_interval_us =
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
    efd6:	86b8      	strh	r0, [r7, #52]	; 0x34
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    efd8:	48b9      	ldr	r0, [pc, #740]	; (f2c0 <isr+0x6cc>)
    efda:	f7f1 f8e1 	bl	1a0 <__aeabi_uidiv>
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    efde:	990c      	ldr	r1, [sp, #48]	; 0x30
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
		       sizeof(conn->role.slave.force));
		conn->supervision_reload =
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    efe0:	8738      	strh	r0, [r7, #56]	; 0x38
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    efe2:	48b8      	ldr	r0, [pc, #736]	; (f2c4 <isr+0x6d0>)
    efe4:	f7f1 f8dc 	bl	1a0 <__aeabi_uidiv>
    efe8:	1cbb      	adds	r3, r7, #2
    efea:	b282      	uxth	r2, r0
    efec:	87da      	strh	r2, [r3, #62]	; 0x3e
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    efee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    eff0:	9413      	str	r4, [sp, #76]	; 0x4c
    eff2:	1d99      	adds	r1, r3, #6
    eff4:	428a      	cmp	r2, r1
    eff6:	dd02      	ble.n	effe <isr+0x40a>
    eff8:	1ad3      	subs	r3, r2, r3
    effa:	3b06      	subs	r3, #6
    effc:	b29a      	uxth	r2, r3
    effe:	87ba      	strh	r2, [r7, #60]	; 0x3c
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    f000:	8c3b      	ldrh	r3, [r7, #32]
    f002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f004:	2406      	movs	r4, #6
				     (conn->apto_reload - (conn->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    f006:	80d3      	strh	r3, [r2, #6]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    f008:	2300      	movs	r3, #0
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f00a:	0010      	movs	r0, r2

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    f00c:	72d3      	strb	r3, [r2, #11]
		radio_le_conn_cmplt->role = 0x01;
    f00e:	3301      	adds	r3, #1
				     conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f010:	7114      	strb	r4, [r2, #4]
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
    f012:	7313      	strb	r3, [r2, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    f014:	7833      	ldrb	r3, [r6, #0]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    f016:	0015      	movs	r5, r2
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    f018:	065b      	lsls	r3, r3, #25
    f01a:	0fdb      	lsrs	r3, r3, #31
    f01c:	7353      	strb	r3, [r2, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
    f01e:	1cb1      	adds	r1, r6, #2
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    f020:	0022      	movs	r2, r4
    f022:	300e      	adds	r0, #14
    f024:	f7f2 f99e 	bl	1364 <memcpy>
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f028:	0031      	movs	r1, r6
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f02a:	7833      	ldrb	r3, [r6, #0]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f02c:	980a      	ldr	r0, [sp, #40]	; 0x28
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    f02e:	09db      	lsrs	r3, r3, #7
    f030:	752b      	strb	r3, [r5, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    f032:	3108      	adds	r1, #8
    f034:	0022      	movs	r2, r4
    f036:	3015      	adds	r0, #21
    f038:	f7f2 f994 	bl	1364 <memcpy>
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    f03c:	2248      	movs	r2, #72	; 0x48
    f03e:	466b      	mov	r3, sp
    f040:	189b      	adds	r3, r3, r2
    f042:	781b      	ldrb	r3, [r3, #0]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    f044:	350b      	adds	r5, #11
		       &pdu_adv->payload.connect_ind.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    f046:	742b      	strb	r3, [r5, #16]
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
    f048:	7e73      	ldrb	r3, [r6, #25]
    f04a:	7e32      	ldrb	r2, [r6, #24]
    f04c:	021b      	lsls	r3, r3, #8
    f04e:	4313      	orrs	r3, r2
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
    f050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f052:	7713      	strb	r3, [r2, #28]
    f054:	0a1b      	lsrs	r3, r3, #8
    f056:	7753      	strb	r3, [r2, #29]
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
    f058:	7ef3      	ldrb	r3, [r6, #27]
    f05a:	7eb2      	ldrb	r2, [r6, #26]
    f05c:	021b      	lsls	r3, r3, #8
    f05e:	4313      	orrs	r3, r2
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_ind.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
    f060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f062:	7793      	strb	r3, [r2, #30]
    f064:	0a1b      	lsrs	r3, r3, #8
    f066:	77d3      	strb	r3, [r2, #31]
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
    f068:	7f73      	ldrb	r3, [r6, #29]
    f06a:	7f32      	ldrb	r2, [r6, #28]
    f06c:	021b      	lsls	r3, r3, #8
    f06e:	4313      	orrs	r3, r2
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
    f070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f072:	3220      	adds	r2, #32
    f074:	7013      	strb	r3, [r2, #0]
    f076:	0a1b      	lsrs	r3, r3, #8
    f078:	7053      	strb	r3, [r2, #1]
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
			pdu_adv->payload.connect_ind.lldata.sca;
    f07a:	1d33      	adds	r3, r6, #4
    f07c:	7fdb      	ldrb	r3, [r3, #31]
    f07e:	095b      	lsrs	r3, r3, #5
			pdu_adv->payload.connect_ind.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_ind.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_ind.lldata.timeout;
		radio_le_conn_cmplt->mca =
    f080:	75eb      	strb	r3, [r5, #23]
			pdu_adv->payload.connect_ind.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    f082:	8c38      	ldrh	r0, [r7, #32]
    f084:	f7fc ff9e 	bl	bfc4 <rx_fc_lock>
		packet_rx_enqueue();
    f088:	f7fc ff4e 	bl	bf28 <packet_rx_enqueue>
		/* Use Channel Selection Algorithm #2 if peer too supports it */
		if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
			struct radio_le_chan_sel_algo *le_chan_sel_algo;

			/* Generate LE Channel Selection Algorithm event */
			radio_pdu_node_rx = packet_rx_reserve_get(3);
    f08c:	2003      	movs	r0, #3
    f08e:	f7fc fb61 	bl	b754 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    f092:	2800      	cmp	r0, #0
    f094:	d106      	bne.n	f0a4 <isr+0x4b0>
    f096:	4b8c      	ldr	r3, [pc, #560]	; (f2c8 <isr+0x6d4>)
    f098:	9301      	str	r3, [sp, #4]
    f09a:	4b8c      	ldr	r3, [pc, #560]	; (f2cc <isr+0x6d8>)
    f09c:	9300      	str	r3, [sp, #0]
    f09e:	4b8c      	ldr	r3, [pc, #560]	; (f2d0 <isr+0x6dc>)
    f0a0:	f001 fc27 	bl	108f2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8f3>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    f0a4:	8c3b      	ldrh	r3, [r7, #32]
    f0a6:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type =
    f0a8:	230b      	movs	r3, #11
    f0aa:	7103      	strb	r3, [r0, #4]
			pdu_data = (struct pdu_data *)
				radio_pdu_node_rx->pdu_data;
			le_chan_sel_algo = (struct radio_le_chan_sel_algo *)
				&pdu_data->payload;

			if (pdu_adv->chan_sel) {
    f0ac:	7832      	ldrb	r2, [r6, #0]
    f0ae:	3315      	adds	r3, #21
    f0b0:	4013      	ands	r3, r2
    f0b2:	d00e      	beq.n	f0d2 <isr+0x4de>
				u16_t aa_ls =
    f0b4:	7c7b      	ldrb	r3, [r7, #17]
    f0b6:	7c3a      	ldrb	r2, [r7, #16]
    f0b8:	021b      	lsls	r3, r3, #8
    f0ba:	431a      	orrs	r2, r3
					((u16_t)conn->access_addr[1] << 8) |
					conn->access_addr[0];
				u16_t aa_ms =
    f0bc:	7cfb      	ldrb	r3, [r7, #19]
    f0be:	7cb9      	ldrb	r1, [r7, #18]
    f0c0:	021b      	lsls	r3, r3, #8
    f0c2:	430b      	orrs	r3, r1
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    f0c4:	2440      	movs	r4, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    f0c6:	4053      	eors	r3, r2
    f0c8:	83fb      	strh	r3, [r7, #30]

				le_chan_sel_algo->chan_sel_algo = 0x01;
    f0ca:	2301      	movs	r3, #1
					conn->access_addr[0];
				u16_t aa_ms =
					((u16_t)conn->access_addr[3] << 8) |
					 conn->access_addr[2];

				conn->data_chan_sel = 1;
    f0cc:	7f39      	ldrb	r1, [r7, #28]
    f0ce:	4321      	orrs	r1, r4
    f0d0:	7739      	strb	r1, [r7, #28]
				conn->data_chan_id = aa_ms ^ aa_ls;

				le_chan_sel_algo->chan_sel_algo = 0x01;
			} else {
				le_chan_sel_algo->chan_sel_algo = 0x00;
    f0d2:	72c3      	strb	r3, [r0, #11]
			}

			packet_rx_enqueue();
    f0d4:	f7fc ff28 	bl	bf28 <packet_rx_enqueue>
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
    f0d8:	0039      	movs	r1, r7
    f0da:	240e      	movs	r4, #14
    f0dc:	1d33      	adds	r3, r6, #4
    f0de:	7fdb      	ldrb	r3, [r3, #31]
    f0e0:	3144      	adds	r1, #68	; 0x44
    f0e2:	780a      	ldrb	r2, [r1, #0]
    f0e4:	095b      	lsrs	r3, r3, #5
    f0e6:	0058      	lsls	r0, r3, #1
    f0e8:	43a2      	bics	r2, r4
    f0ea:	4302      	orrs	r2, r0
    f0ec:	700a      	strb	r2, [r1, #0]
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    f0ee:	22ce      	movs	r2, #206	; 0xce
    f0f0:	4d78      	ldr	r5, [pc, #480]	; (f2d4 <isr+0x6e0>)
    f0f2:	0052      	lsls	r2, r2, #1
    f0f4:	5caa      	ldrb	r2, [r5, r2]
    f0f6:	4978      	ldr	r1, [pc, #480]	; (f2d8 <isr+0x6e4>)
    f0f8:	0052      	lsls	r2, r2, #1
			   gc_lookup_ppm[conn->role.slave.sca]) *
    f0fa:	005b      	lsls	r3, r3, #1
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    f0fc:	5a50      	ldrh	r0, [r2, r1]
    f0fe:	5a5b      	ldrh	r3, [r3, r1]
    f100:	4976      	ldr	r1, [pc, #472]	; (f2dc <isr+0x6e8>)
    f102:	18c0      	adds	r0, r0, r3
    f104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    f106:	2400      	movs	r4, #0
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    f108:	4358      	muls	r0, r3
    f10a:	4b75      	ldr	r3, [pc, #468]	; (f2e0 <isr+0x6ec>)
    f10c:	18c0      	adds	r0, r0, r3
    f10e:	f7f1 f847 	bl	1a0 <__aeabi_uidiv>
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    f112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			packet_rx_enqueue();
		}

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    f114:	64b8      	str	r0, [r7, #72]	; 0x48
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    f116:	085b      	lsrs	r3, r3, #1
    f118:	3b96      	subs	r3, #150	; 0x96
    f11a:	64fb      	str	r3, [r7, #76]	; 0x4c
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    f11c:	7d73      	ldrb	r3, [r6, #21]
    f11e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    f120:	65bc      	str	r4, [r7, #88]	; 0x58
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    f122:	4353      	muls	r3, r2
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    f124:	0020      	movs	r0, r4
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
    f126:	65fb      	str	r3, [r7, #92]	; 0x5c
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    f128:	f7fb f880 	bl	a22c <radio_rx_ready_delay_get>

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    f12c:	4a6d      	ldr	r2, [pc, #436]	; (f2e4 <isr+0x6f0>)
			(conn_interval_us >> 1) - RADIO_TIFS;
		conn->role.slave.window_size_event_us =
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);
    f12e:	9011      	str	r0, [sp, #68]	; 0x44

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    f130:	2300      	movs	r3, #0
    f132:	1880      	adds	r0, r0, r2
    f134:	0021      	movs	r1, r4
    f136:	4a6c      	ldr	r2, [pc, #432]	; (f2e8 <isr+0x6f4>)
    f138:	f7f1 f9c8 	bl	4cc <__aeabi_lmul>
    f13c:	4a6b      	ldr	r2, [pc, #428]	; (f2ec <isr+0x6f8>)
    f13e:	2307      	movs	r3, #7
    f140:	f7f1 f9a4 	bl	48c <__aeabi_uldivmod>
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f144:	2380      	movs	r3, #128	; 0x80
    f146:	009b      	lsls	r3, r3, #2
    f148:	58ea      	ldr	r2, [r5, r3]
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    f14a:	0200      	lsls	r0, r0, #8
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    f14c:	3bda      	subs	r3, #218	; 0xda
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    f14e:	0a00      	lsrs	r0, r0, #8
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    f150:	3bff      	subs	r3, #255	; 0xff
		conn->role.slave.window_size_prepare_us = 0;

		rx_ready_delay = radio_rx_ready_delay_get(0);

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    f152:	60f8      	str	r0, [r7, #12]
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   rx_ready_delay + 328 + RADIO_TIFS +
					   328);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    f154:	607a      	str	r2, [r7, #4]
		conn->hdr.ticks_xtal_to_start =
    f156:	603b      	str	r3, [r7, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    f158:	60bc      	str	r4, [r7, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    f15a:	920a      	str	r2, [sp, #40]	; 0x28
    f15c:	429a      	cmp	r2, r3
    f15e:	d200      	bcs.n	f162 <isr+0x56e>
    f160:	930a      	str	r3, [sp, #40]	; 0x28
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us -=
    f162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f164:	6cba      	ldr	r2, [r7, #72]	; 0x48
    f166:	2500      	movs	r5, #0
    f168:	1a9b      	subs	r3, r3, r2
    f16a:	930c      	str	r3, [sp, #48]	; 0x30
			conn->role.slave.window_widening_periodic_us;

		conn_offset_us = radio_tmr_end_get();
    f16c:	f7fb fa3e 	bl	a5ec <radio_tmr_end_get>
    f170:	9012      	str	r0, [sp, #72]	; 0x48
		conn_offset_us +=
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
    f172:	7df3      	ldrb	r3, [r6, #23]
    f174:	7db2      	ldrb	r2, [r6, #22]
    f176:	021b      	lsls	r3, r3, #8
    f178:	4313      	orrs	r3, r2
    f17a:	001c      	movs	r4, r3
    f17c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			 1) * 1250;
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    f17e:	0029      	movs	r1, r5
    f180:	3401      	adds	r4, #1
    f182:	0028      	movs	r0, r5
    f184:	435c      	muls	r4, r3
    f186:	f7fb f84f 	bl	a228 <radio_tx_chain_delay_get>
    f18a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f18c:	3c20      	subs	r4, #32
    f18e:	191c      	adds	r4, r3, r4
		conn_offset_us -= rx_ready_delay;
		conn_offset_us -= RADIO_TICKER_JITTER_US << 1;
    f190:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f192:	1a20      	subs	r0, r4, r0
    f194:	1ac3      	subs	r3, r0, r3
    f196:	9311      	str	r3, [sp, #68]	; 0x44

		/* Stop Advertiser */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f198:	4b55      	ldr	r3, [pc, #340]	; (f2f0 <isr+0x6fc>)
    f19a:	2205      	movs	r2, #5
    f19c:	9300      	str	r3, [sp, #0]
    f19e:	0029      	movs	r1, r5
    f1a0:	4b54      	ldr	r3, [pc, #336]	; (f2f4 <isr+0x700>)
    f1a2:	0028      	movs	r0, r5
    f1a4:	f7fc f9c8 	bl	b538 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_ADV,
					    ticker_stop_adv_assert,
					    (void *)__LINE__);
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    f1a8:	4953      	ldr	r1, [pc, #332]	; (f2f8 <isr+0x704>)
    f1aa:	f7fc ff45 	bl	c038 <ticker_stop_adv_assert>

		/* Stop Direct Adv Stopper */
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    f1ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f1b0:	799a      	ldrb	r2, [r3, #6]
    f1b2:	230f      	movs	r3, #15
    f1b4:	4013      	ands	r3, r2
    f1b6:	2b01      	cmp	r3, #1
    f1b8:	d106      	bne.n	f1c8 <isr+0x5d4>
			/* Advertiser stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f1ba:	9500      	str	r5, [sp, #0]
    f1bc:	002b      	movs	r3, r5
    f1be:	2203      	movs	r2, #3
    f1c0:	0029      	movs	r1, r5
    f1c2:	0028      	movs	r0, r5
    f1c4:	f7fc f9b8 	bl	b538 <ticker_stop>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(conn_offset_us),
		     TICKER_US_TO_TICKS(conn_interval_us),
    f1c8:	2400      	movs	r4, #0
    f1ca:	980c      	ldr	r0, [sp, #48]	; 0x30
    f1cc:	4a46      	ldr	r2, [pc, #280]	; (f2e8 <isr+0x6f4>)
    f1ce:	2300      	movs	r3, #0
    f1d0:	0021      	movs	r1, r4
    f1d2:	f7f1 f97b 	bl	4cc <__aeabi_lmul>
    f1d6:	4a45      	ldr	r2, [pc, #276]	; (f2ec <isr+0x6f8>)
    f1d8:	2307      	movs	r3, #7
    f1da:	900c      	str	r0, [sp, #48]	; 0x30
    f1dc:	910d      	str	r1, [sp, #52]	; 0x34
    f1de:	f7f1 f955 	bl	48c <__aeabi_uldivmod>

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
		     (_radio.ticks_anchor - ticks_slot_offset),
    f1e2:	4b3c      	ldr	r3, [pc, #240]	; (f2d4 <isr+0x6e0>)
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_ADV_STOP, NULL, NULL);
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    f1e4:	8c3e      	ldrh	r6, [r7, #32]
    f1e6:	685d      	ldr	r5, [r3, #4]
    f1e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1ea:	9706      	str	r7, [sp, #24]
    f1ec:	1aed      	subs	r5, r5, r3
    f1ee:	4b43      	ldr	r3, [pc, #268]	; (f2fc <isr+0x708>)
    f1f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f1f2:	9308      	str	r3, [sp, #32]
    f1f4:	4b42      	ldr	r3, [pc, #264]	; (f300 <isr+0x70c>)
    f1f6:	0021      	movs	r1, r4
    f1f8:	9307      	str	r3, [sp, #28]
    f1fa:	4b42      	ldr	r3, [pc, #264]	; (f304 <isr+0x710>)
    f1fc:	3607      	adds	r6, #7
    f1fe:	9305      	str	r3, [sp, #20]
    f200:	68fb      	ldr	r3, [r7, #12]
    f202:	0207      	lsls	r7, r0, #8
    f204:	189b      	adds	r3, r3, r2
    f206:	b29b      	uxth	r3, r3
    f208:	0a3f      	lsrs	r7, r7, #8
    f20a:	9304      	str	r3, [sp, #16]
    f20c:	4a37      	ldr	r2, [pc, #220]	; (f2ec <isr+0x6f8>)
    f20e:	2307      	movs	r3, #7
    f210:	0038      	movs	r0, r7
    f212:	9403      	str	r4, [sp, #12]
    f214:	f7f1 f95a 	bl	4cc <__aeabi_lmul>
    f218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f21c:	1a12      	subs	r2, r2, r0
    f21e:	418b      	sbcs	r3, r1
    f220:	0010      	movs	r0, r2
    f222:	22fa      	movs	r2, #250	; 0xfa
    f224:	0019      	movs	r1, r3
    f226:	0092      	lsls	r2, r2, #2
    f228:	2300      	movs	r3, #0
    f22a:	f7f1 f92f 	bl	48c <__aeabi_uldivmod>
    f22e:	4a2e      	ldr	r2, [pc, #184]	; (f2e8 <isr+0x6f4>)
    f230:	9002      	str	r0, [sp, #8]
    f232:	2300      	movs	r3, #0
    f234:	9811      	ldr	r0, [sp, #68]	; 0x44
    f236:	0021      	movs	r1, r4
    f238:	9701      	str	r7, [sp, #4]
    f23a:	f7f1 f947 	bl	4cc <__aeabi_lmul>
    f23e:	4a2b      	ldr	r2, [pc, #172]	; (f2ec <isr+0x6f8>)
    f240:	2307      	movs	r3, #7
    f242:	f7f1 f923 	bl	48c <__aeabi_uldivmod>
    f246:	0200      	lsls	r0, r0, #8
    f248:	0a00      	lsrs	r0, r0, #8
    f24a:	b2f6      	uxtb	r6, r6
    f24c:	9000      	str	r0, [sp, #0]
    f24e:	002b      	movs	r3, r5
    f250:	0032      	movs	r2, r6
    f252:	0021      	movs	r1, r4
    f254:	0020      	movs	r0, r4
    f256:	f7fc f8d7 	bl	b408 <ticker_start>
		     TICKER_US_TO_TICKS(conn_interval_us),
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
		     (ticks_slot_offset + conn->hdr.ticks_slot),
		     event_slave_prepare, conn, ticker_success_assert,
		     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f25a:	2302      	movs	r3, #2
    f25c:	4398      	bics	r0, r3
    f25e:	42a0      	cmp	r0, r4
    f260:	d101      	bne.n	f266 <isr+0x672>
    f262:	f001 fc1a 	bl	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>
    f266:	4b18      	ldr	r3, [pc, #96]	; (f2c8 <isr+0x6d4>)
    f268:	4a27      	ldr	r2, [pc, #156]	; (f308 <isr+0x714>)
    f26a:	9301      	str	r3, [sp, #4]
    f26c:	4b17      	ldr	r3, [pc, #92]	; (f2cc <isr+0x6d8>)
    f26e:	4927      	ldr	r1, [pc, #156]	; (f30c <isr+0x718>)
    f270:	9300      	str	r3, [sp, #0]
    f272:	4827      	ldr	r0, [pc, #156]	; (f310 <isr+0x71c>)
    f274:	4b16      	ldr	r3, [pc, #88]	; (f2d0 <isr+0x6dc>)
    f276:	f001 fbc4 	bl	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    f27a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f27c:	2b00      	cmp	r3, #0
    f27e:	d10b      	bne.n	f298 <isr+0x6a4>
			err = isr_rx_scan(irkmatch_id, rssi_ready);
		} else {
			err = 1;
		}
		if (err) {
			_radio.state = STATE_CLOSE;
    f280:	2303      	movs	r3, #3
    f282:	7423      	strb	r3, [r4, #16]
			radio_disable();
    f284:	f7fa ffe2 	bl	a24c <radio_disable>
			/* switch scanner state to idle */
			_radio.scanner.state = 0;
    f288:	22ae      	movs	r2, #174	; 0xae
    f28a:	2102      	movs	r1, #2
    f28c:	0052      	lsls	r2, r2, #1
    f28e:	5ca3      	ldrb	r3, [r4, r2]
    f290:	438b      	bics	r3, r1
    f292:	54a3      	strb	r3, [r4, r2]
    f294:	f001 fc01 	bl	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
    f298:	235e      	movs	r3, #94	; 0x5e
    f29a:	33ff      	adds	r3, #255	; 0xff
    f29c:	5ce3      	ldrb	r3, [r4, r3]
			radio_disable();
		}
		break;

	case ROLE_SCAN:
		if ((crc_ok) &&
    f29e:	06db      	lsls	r3, r3, #27
    f2a0:	d501      	bpl.n	f2a6 <isr+0x6b2>
		    (((_radio.scanner.filter_policy & 0x01) == 0) ||
		     (devmatch_ok) || (irkmatch_ok))) {
    f2a2:	433d      	orrs	r5, r7
    f2a4:	d0ec      	beq.n	f280 <isr+0x68c>
			err = isr_rx_scan(irkmatch_id, rssi_ready);
    f2a6:	990a      	ldr	r1, [sp, #40]	; 0x28
    f2a8:	9812      	ldr	r0, [sp, #72]	; 0x48
    f2aa:	f7fd fba1 	bl	c9f0 <isr_rx_scan>
		} else {
			err = 1;
		}
		if (err) {
    f2ae:	2800      	cmp	r0, #0
    f2b0:	d101      	bne.n	f2b6 <isr+0x6c2>
    f2b2:	f001 fbf2 	bl	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>
    f2b6:	e7e3      	b.n	f280 <isr+0x68c>
    f2b8:	000004e2 	.word	0x000004e2
    f2bc:	00002710 	.word	0x00002710
    f2c0:	02625a00 	.word	0x02625a00
    f2c4:	01c9c380 	.word	0x01c9c380
    f2c8:	000145b0 	.word	0x000145b0
    f2cc:	000145b5 	.word	0x000145b5
    f2d0:	000170a5 	.word	0x000170a5
    f2d4:	20001254 	.word	0x20001254
    f2d8:	0001705c 	.word	0x0001705c
    f2dc:	000f4240 	.word	0x000f4240
    f2e0:	000f423f 	.word	0x000f423f
    f2e4:	00000452 	.word	0x00000452
    f2e8:	3b9aca00 	.word	0x3b9aca00
    f2ec:	1afd498d 	.word	0x1afd498d
    f2f0:	000003ae 	.word	0x000003ae
    f2f4:	0000c039 	.word	0x0000c039
    f2f8:	000003af 	.word	0x000003af
    f2fc:	000003c6 	.word	0x000003c6
    f300:	0000bffd 	.word	0x0000bffd
    f304:	0000ea4d 	.word	0x0000ea4d
    f308:	00014570 	.word	0x00014570
    f30c:	00014577 	.word	0x00014577
    f310:	00015cb7 	.word	0x00015cb7
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    f314:	22ca      	movs	r2, #202	; 0xca
    f316:	0052      	lsls	r2, r2, #1
    f318:	5ca3      	ldrb	r3, [r4, r2]

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f31a:	2001      	movs	r0, #1
#else /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */
	ARG_UNUSED(rssi_ready);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    f31c:	3301      	adds	r3, #1
    f31e:	54a3      	strb	r3, [r4, r2]

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f320:	23be      	movs	r3, #190	; 0xbe
    f322:	33ff      	adds	r3, #255	; 0xff
    f324:	5ce3      	ldrb	r3, [r4, r3]
    f326:	3224      	adds	r2, #36	; 0x24
    f328:	58a2      	ldr	r2, [r4, r2]
    f32a:	009b      	lsls	r3, r3, #2
    f32c:	589f      	ldr	r7, [r3, r2]
    f32e:	2396      	movs	r3, #150	; 0x96
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

	if (crc_ok) {
    f330:	9a11      	ldr	r2, [sp, #68]	; 0x44
	/* Increment packet counter for this connection event */
	_radio.packet_counter++;

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    f332:	7138      	strb	r0, [r7, #4]
    f334:	33ff      	adds	r3, #255	; 0xff

	if (crc_ok) {
    f336:	2a00      	cmp	r2, #0
    f338:	d101      	bne.n	f33e <isr+0x74a>
    f33a:	f001 f888 	bl	1044e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x44f>
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
	u8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    f33e:	2200      	movs	r2, #0
    f340:	54e2      	strb	r2, [r4, r3]

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    f342:	3b05      	subs	r3, #5
    f344:	58e4      	ldr	r4, [r4, r3]
    f346:	7a3d      	ldrb	r5, [r7, #8]
    f348:	0021      	movs	r1, r4
    f34a:	31c0      	adds	r1, #192	; 0xc0
    f34c:	780b      	ldrb	r3, [r1, #0]
    f34e:	076d      	lsls	r5, r5, #29
    f350:	07da      	lsls	r2, r3, #31
    f352:	0fd2      	lsrs	r2, r2, #31
    f354:	b2d2      	uxtb	r2, r2
    f356:	0fed      	lsrs	r5, r5, #31
    f358:	4295      	cmp	r5, r2
    f35a:	d100      	bne.n	f35e <isr+0x76a>
    f35c:	e12a      	b.n	f5b4 <isr+0x9c0>

		/* Increment serial number */
		_radio.conn_curr->sn++;
    f35e:	1812      	adds	r2, r2, r0
    f360:	4002      	ands	r2, r0
    f362:	4383      	bics	r3, r0
    f364:	4313      	orrs	r3, r2

		if (_radio.conn_curr->empty == 0) {
    f366:	0018      	movs	r0, r3
    f368:	227f      	movs	r2, #127	; 0x7f
	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {

		/* Increment serial number */
		_radio.conn_curr->sn++;
    f36a:	700b      	strb	r3, [r1, #0]

		if (_radio.conn_curr->empty == 0) {
    f36c:	4390      	bics	r0, r2
    f36e:	d000      	beq.n	f372 <isr+0x77e>
    f370:	e110      	b.n	f594 <isr+0x9a0>
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
    f372:	0022      	movs	r2, r4
    f374:	32fc      	adds	r2, #252	; 0xfc
    f376:	6895      	ldr	r5, [r2, #8]
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);
    f378:	3203      	adds	r2, #3
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    f37a:	7d92      	ldrb	r2, [r2, #22]
				(node_tx->pdu_data +
    f37c:	1d29      	adds	r1, r5, #4
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			u8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    f37e:	188a      	adds	r2, r1, r2
    f380:	920a      	str	r2, [sp, #40]	; 0x28
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
    f382:	7852      	ldrb	r2, [r2, #1]
    f384:	920c      	str	r2, [sp, #48]	; 0x30
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;

			if (pdu_data_tx_len != 0) {
    f386:	2a00      	cmp	r2, #0
    f388:	d100      	bne.n	f38c <isr+0x798>
    f38a:	e0d2      	b.n	f532 <isr+0x93e>
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;
    f38c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f38e:	7810      	ldrb	r0, [r2, #0]
    f390:	0780      	lsls	r0, r0, #30
    f392:	0f82      	lsrs	r2, r0, #30
    f394:	4694      	mov	ip, r2

			if (pdu_data_tx_len != 0) {
				/* if encrypted increment tx counter */
				if (_radio.conn_curr->enc_tx) {
    f396:	069b      	lsls	r3, r3, #26
    f398:	d51d      	bpl.n	f3d6 <isr+0x7e2>
					_radio.conn_curr->ccm_tx.counter++;
    f39a:	0023      	movs	r3, r4
    f39c:	0021      	movs	r1, r4
    f39e:	33f4      	adds	r3, #244	; 0xf4
    f3a0:	881b      	ldrh	r3, [r3, #0]
    f3a2:	31f2      	adds	r1, #242	; 0xf2
    f3a4:	880a      	ldrh	r2, [r1, #0]
    f3a6:	041b      	lsls	r3, r3, #16
    f3a8:	4313      	orrs	r3, r2
    f3aa:	930e      	str	r3, [sp, #56]	; 0x38
    f3ac:	0023      	movs	r3, r4
    f3ae:	33f6      	adds	r3, #246	; 0xf6
    f3b0:	881a      	ldrh	r2, [r3, #0]
    f3b2:	3302      	adds	r3, #2
    f3b4:	881b      	ldrh	r3, [r3, #0]
    f3b6:	000e      	movs	r6, r1
    f3b8:	041b      	lsls	r3, r3, #16
    f3ba:	4313      	orrs	r3, r2
    f3bc:	930f      	str	r3, [sp, #60]	; 0x3c
    f3be:	2201      	movs	r2, #1
    f3c0:	980e      	ldr	r0, [sp, #56]	; 0x38
    f3c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f3c4:	2300      	movs	r3, #0
    f3c6:	1880      	adds	r0, r0, r2
    f3c8:	4159      	adcs	r1, r3
    f3ca:	0c02      	lsrs	r2, r0, #16
    f3cc:	0c0b      	lsrs	r3, r1, #16
    f3ce:	8030      	strh	r0, [r6, #0]
    f3d0:	8072      	strh	r2, [r6, #2]
    f3d2:	80b1      	strh	r1, [r6, #4]
    f3d4:	80f3      	strh	r3, [r6, #6]
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    f3d6:	4663      	mov	r3, ip
isr_rx_conn_pkt(struct radio_pdu_node_rx *radio_pdu_node_rx,
		struct radio_pdu_node_tx **tx_release, u8_t *rx_enqueue)
{
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
    f3d8:	2600      	movs	r6, #0
				if (_radio.conn_curr->enc_tx) {
					_radio.conn_curr->ccm_tx.counter++;
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    f3da:	2b03      	cmp	r3, #3
    f3dc:	d000      	beq.n	f3e0 <isr+0x7ec>
    f3de:	e0ab      	b.n	f538 <isr+0x944>
static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;

	switch (pdu_data_tx->payload.llctrl.opcode) {
    f3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3e2:	78d8      	ldrb	r0, [r3, #3]
    f3e4:	3802      	subs	r0, #2
    f3e6:	2814      	cmp	r0, #20
    f3e8:	d900      	bls.n	f3ec <isr+0x7f8>
    f3ea:	e0a4      	b.n	f536 <isr+0x942>
    f3ec:	4ec9      	ldr	r6, [pc, #804]	; (f714 <isr+0xb20>)
    f3ee:	f7f0 fec3 	bl	178 <__gnu_thumb1_case_uqi>
    f3f2:	250b      	.short	0x250b
    f3f4:	a2a2a271 	.word	0xa2a2a271
    f3f8:	4940a2a2 	.word	0x4940a2a2
    f3fc:	a2a275a2 	.word	0xa2a275a2
    f400:	a2a2a2a2 	.word	0xa2a2a2a2
    f404:	a27e      	.short	0xa27e
    f406:	98          	.byte	0x98
    f407:	00          	.byte	0x00
	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		_radio.state = STATE_CLOSE;
    f408:	2303      	movs	r3, #3
    f40a:	7433      	strb	r3, [r6, #16]
		radio_disable();
    f40c:	f7fa ff1e 	bl	a24c <radio_disable>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    f410:	f7fa ff30 	bl	a274 <radio_is_ready>
    f414:	2800      	cmp	r0, #0
    f416:	d005      	beq.n	f424 <isr+0x830>
    f418:	4bbf      	ldr	r3, [pc, #764]	; (f718 <isr+0xb24>)
    f41a:	9301      	str	r3, [sp, #4]
    f41c:	4bbf      	ldr	r3, [pc, #764]	; (f71c <isr+0xb28>)
    f41e:	9300      	str	r3, [sp, #0]
    f420:	4bbf      	ldr	r3, [pc, #764]	; (f720 <isr+0xb2c>)
    f422:	e166      	b.n	f6f2 <isr+0xafe>

		terminate_ind_rx_enqueue(_radio.conn_curr,
    f424:	23c8      	movs	r3, #200	; 0xc8
    f426:	005b      	lsls	r3, r3, #1
    f428:	58f0      	ldr	r0, [r6, r3]
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
    f42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f42c:	7919      	ldrb	r1, [r3, #4]
		radio_disable();

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());

		terminate_ind_rx_enqueue(_radio.conn_curr,
    f42e:	2913      	cmp	r1, #19
    f430:	d100      	bne.n	f434 <isr+0x840>
    f432:	3103      	adds	r1, #3
    f434:	f7fd fe00 	bl	d038 <terminate_ind_rx_enqueue>
		      error_code == 0x13) ?  0x16 :
		     pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
		     error_code);

		/* Ack received, hence terminate */
		terminate = 1;
    f438:	2601      	movs	r6, #1
    f43a:	e07d      	b.n	f538 <isr+0x944>
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f43c:	0020      	movs	r0, r4
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f43e:	24c8      	movs	r4, #200	; 0xc8

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
    f440:	990a      	ldr	r1, [sp, #40]	; 0x28
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f442:	2208      	movs	r2, #8
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
    f444:	310e      	adds	r1, #14
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f446:	3087      	adds	r0, #135	; 0x87
    f448:	f7f1 ff8c 	bl	1364 <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f44c:	4eb1      	ldr	r6, [pc, #708]	; (f714 <isr+0xb20>)
    f44e:	0064      	lsls	r4, r4, #1
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
    f450:	990a      	ldr	r1, [sp, #40]	; 0x28
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f452:	5930      	ldr	r0, [r6, r4]
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
    f454:	3116      	adds	r1, #22
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f456:	2204      	movs	r2, #4
    f458:	30da      	adds	r0, #218	; 0xda
    f45a:	f7f1 ff83 	bl	1364 <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
		       4);

		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    f45e:	5932      	ldr	r2, [r6, r4]
    f460:	2008      	movs	r0, #8
    f462:	0011      	movs	r1, r2
    f464:	31c0      	adds	r1, #192	; 0xc0
    f466:	780b      	ldrb	r3, [r1, #0]
    f468:	4303      	orrs	r3, r0
    f46a:	700b      	strb	r3, [r1, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    f46c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
    f46e:	8753      	strh	r3, [r2, #58]	; 0x3a
    f470:	e061      	b.n	f536 <isr+0x942>
		 */
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    f472:	0022      	movs	r2, r4

		/* key refresh */
		_radio.conn_curr->refresh = 1;
    f474:	2348      	movs	r3, #72	; 0x48
		 */
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    f476:	32c0      	adds	r2, #192	; 0xc0
    f478:	7811      	ldrb	r1, [r2, #0]

		/* key refresh */
		_radio.conn_curr->refresh = 1;
    f47a:	430b      	orrs	r3, r1
    f47c:	7013      	strb	r3, [r2, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    f47e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    f480:	8763      	strh	r3, [r4, #58]	; 0x3a
    f482:	e058      	b.n	f536 <isr+0x942>
			_radio.conn_curr->procedure_reload;
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    f484:	7bf6      	ldrb	r6, [r6, #15]
    f486:	b2f6      	uxtb	r6, r6
    f488:	2e04      	cmp	r6, #4
    f48a:	d123      	bne.n	f4d4 <isr+0x8e0>
				struct radio_pdu_node_tx *node_tx)
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f48c:	2203      	movs	r2, #3
    f48e:	792b      	ldrb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
    f490:	0021      	movs	r1, r4
				struct radio_pdu_node_tx *node_tx)
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f492:	4313      	orrs	r3, r2
    f494:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
    f496:	0028      	movs	r0, r5
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    f498:	2317      	movs	r3, #23
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f49a:	71ea      	strb	r2, [r5, #7]
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    f49c:	716b      	strb	r3, [r5, #5]
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
    f49e:	316d      	adds	r1, #109	; 0x6d
	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
    f4a0:	3205      	adds	r2, #5
    f4a2:	3008      	adds	r0, #8
    f4a4:	f7f1 ff5e 	bl	1364 <memcpy>
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
    f4a8:	0023      	movs	r3, r4
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    f4aa:	0028      	movs	r0, r5
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
    f4ac:	3375      	adds	r3, #117	; 0x75
    f4ae:	781b      	ldrb	r3, [r3, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
    f4b0:	3476      	adds	r4, #118	; 0x76
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
    f4b2:	742b      	strb	r3, [r5, #16]
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
    f4b4:	7823      	ldrb	r3, [r4, #0]
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    f4b6:	2208      	movs	r2, #8
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
    f4b8:	746b      	strb	r3, [r5, #17]
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    f4ba:	21cc      	movs	r1, #204	; 0xcc
    f4bc:	3012      	adds	r0, #18
    f4be:	f7f1 ff7b 	bl	13b8 <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    f4c2:	0028      	movs	r0, r5
		if (_radio.role == ROLE_MASTER) {
			/* reused tx-ed PDU and send enc req */
			enc_req_reused_send(_radio.conn_curr, *node_tx);

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
    f4c4:	2500      	movs	r5, #0
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    f4c6:	0032      	movs	r2, r6
    f4c8:	301a      	adds	r0, #26
    f4ca:	21dd      	movs	r1, #221	; 0xdd
    f4cc:	f7f1 ff74 	bl	13b8 <memset>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    f4d0:	002e      	movs	r6, r5
    f4d2:	e031      	b.n	f538 <isr+0x944>

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
		} else {
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    f4d4:	34c0      	adds	r4, #192	; 0xc0
    f4d6:	7823      	ldrb	r3, [r4, #0]
    f4d8:	2208      	movs	r2, #8
    f4da:	e027      	b.n	f52c <isr+0x938>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    f4dc:	0022      	movs	r2, r4
		_radio.conn_curr->pause_tx = 0;
    f4de:	23f3      	movs	r3, #243	; 0xf3

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    f4e0:	2600      	movs	r6, #0
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    f4e2:	32c0      	adds	r2, #192	; 0xc0
    f4e4:	7811      	ldrb	r1, [r2, #0]
		_radio.conn_curr->pause_tx = 0;
    f4e6:	400b      	ands	r3, r1
    f4e8:	7013      	strb	r3, [r2, #0]

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    f4ea:	8766      	strh	r6, [r4, #58]	; 0x3a
    f4ec:	e024      	b.n	f538 <isr+0x944>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
    f4ee:	0023      	movs	r3, r4
    f4f0:	33b4      	adds	r3, #180	; 0xb4
    f4f2:	781a      	ldrb	r2, [r3, #0]
    f4f4:	3301      	adds	r3, #1
    f4f6:	781b      	ldrb	r3, [r3, #0]
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    f4f8:	2600      	movs	r6, #0
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
    f4fa:	429a      	cmp	r2, r3
    f4fc:	d01c      	beq.n	f538 <isr+0x944>
		     _radio.conn_curr->llcp_length.ack) &&
		    (_radio.conn_curr->llcp_length.state ==
    f4fe:	0022      	movs	r2, r4
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
		     _radio.conn_curr->llcp_length.ack) &&
    f500:	2103      	movs	r1, #3
		    (_radio.conn_curr->llcp_length.state ==
    f502:	32b6      	adds	r2, #182	; 0xb6
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
		     _radio.conn_curr->llcp_length.ack) &&
    f504:	7813      	ldrb	r3, [r2, #0]
    f506:	400b      	ands	r3, r1
    f508:	2b01      	cmp	r3, #1
    f50a:	d115      	bne.n	f538 <isr+0x944>
		    (_radio.conn_curr->llcp_length.state ==
		     LLCP_LENGTH_STATE_ACK_WAIT)){
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    f50c:	2008      	movs	r0, #8
    f50e:	34c0      	adds	r4, #192	; 0xc0
    f510:	7823      	ldrb	r3, [r4, #0]
    f512:	4303      	orrs	r3, r0
    f514:	7023      	strb	r3, [r4, #0]

			/* wait for response */
			_radio.conn_curr->llcp_length.state =
    f516:	7813      	ldrb	r3, [r2, #0]
    f518:	438b      	bics	r3, r1
    f51a:	3901      	subs	r1, #1
    f51c:	430b      	orrs	r3, r1
    f51e:	7013      	strb	r3, [r2, #0]
    f520:	e00a      	b.n	f538 <isr+0x944>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f522:	2203      	movs	r2, #3
    f524:	34be      	adds	r4, #190	; 0xbe
    f526:	7823      	ldrb	r3, [r4, #0]
    f528:	4393      	bics	r3, r2
    f52a:	3a01      	subs	r2, #1
    f52c:	4313      	orrs	r3, r2
    f52e:	7023      	strb	r3, [r4, #0]
    f530:	e001      	b.n	f536 <isr+0x942>
isr_rx_conn_pkt(struct radio_pdu_node_rx *radio_pdu_node_rx,
		struct radio_pdu_node_tx **tx_release, u8_t *rx_enqueue)
{
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t terminate = 0;
    f532:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f534:	e000      	b.n	f538 <isr+0x944>
}

static inline u8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
				       struct radio_pdu_node_tx **node_tx)
{
	u8_t terminate = 0;
    f536:	2600      	movs	r6, #0
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f538:	23c8      	movs	r3, #200	; 0xc8
    f53a:	4c76      	ldr	r4, [pc, #472]	; (f714 <isr+0xb20>)
    f53c:	005b      	lsls	r3, r3, #1
    f53e:	58e3      	ldr	r3, [r4, r3]
    f540:	980c      	ldr	r0, [sp, #48]	; 0x30
    f542:	0019      	movs	r1, r3
    f544:	31ff      	adds	r1, #255	; 0xff
    f546:	7d8a      	ldrb	r2, [r1, #22]
    f548:	1882      	adds	r2, r0, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    f54a:	7d48      	ldrb	r0, [r1, #21]
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f54c:	b2d2      	uxtb	r2, r2
    f54e:	758a      	strb	r2, [r1, #22]
			if (_radio.conn_curr->packet_tx_head_offset ==
    f550:	4290      	cmp	r0, r2
    f552:	d122      	bne.n	f59a <isr+0x9a6>
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    f554:	2000      	movs	r0, #0
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    f556:	33fc      	adds	r3, #252	; 0xfc
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    f558:	7548      	strb	r0, [r1, #21]
	_radio.conn_curr->packet_tx_head_offset = 0;
    f55a:	7588      	strb	r0, [r1, #22]

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    f55c:	689a      	ldr	r2, [r3, #8]
    f55e:	68d9      	ldr	r1, [r3, #12]
    f560:	428a      	cmp	r2, r1
    f562:	d10f      	bne.n	f584 <isr+0x990>
		if (node_tx) {
    f564:	4285      	cmp	r5, r0
    f566:	d018      	beq.n	f59a <isr+0x9a6>
			_radio.conn_curr->pkt_tx_ctrl =
			    _radio.conn_curr->pkt_tx_ctrl->next;
    f568:	6812      	ldr	r2, [r2, #0]
			_radio.conn_curr->pkt_tx_head =
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    f56a:	6919      	ldr	r1, [r3, #16]
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
		if (node_tx) {
			_radio.conn_curr->pkt_tx_ctrl =
    f56c:	60da      	str	r2, [r3, #12]
			    _radio.conn_curr->pkt_tx_ctrl->next;
			_radio.conn_curr->pkt_tx_head =
    f56e:	609a      	str	r2, [r3, #8]
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    f570:	428a      	cmp	r2, r1
    f572:	d100      	bne.n	f576 <isr+0x982>
			    _radio.conn_curr->pkt_tx_data) {
				_radio.conn_curr->pkt_tx_ctrl = NULL;
    f574:	60d8      	str	r0, [r3, #12]
			}

			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
    f576:	0021      	movs	r1, r4
    f578:	31d9      	adds	r1, #217	; 0xd9
    f57a:	31ff      	adds	r1, #255	; 0xff
    f57c:	0028      	movs	r0, r5
    f57e:	f7fa fc8e 	bl	9e9e <mem_release>
    f582:	e00a      	b.n	f59a <isr+0x9a6>
		}
	} else {
		if (_radio.conn_curr->pkt_tx_head ==
    f584:	6918      	ldr	r0, [r3, #16]
    f586:	6811      	ldr	r1, [r2, #0]
    f588:	4282      	cmp	r2, r0
    f58a:	d100      	bne.n	f58e <isr+0x99a>
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
    f58c:	6119      	str	r1, [r3, #16]
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    f58e:	6099      	str	r1, [r3, #8]
    f590:	950c      	str	r5, [sp, #48]	; 0x30
    f592:	e004      	b.n	f59e <isr+0x9aa>
			if (_radio.conn_curr->packet_tx_head_offset ==
			    _radio.conn_curr->packet_tx_head_len) {
				*tx_release = isr_rx_conn_pkt_release(node_tx);
			}
		} else {
			_radio.conn_curr->empty = 0;
    f594:	4013      	ands	r3, r2
    f596:	700b      	strb	r3, [r1, #0]
    f598:	e00c      	b.n	f5b4 <isr+0x9c0>

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    f59a:	2300      	movs	r3, #0
    f59c:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.conn_curr->empty = 0;
		}
	}

	/* local initiated disconnect procedure completed */
	if (terminate) {
    f59e:	2e00      	cmp	r6, #0
    f5a0:	d00a      	beq.n	f5b8 <isr+0x9c4>
		connection_release(_radio.conn_curr);
    f5a2:	25c8      	movs	r5, #200	; 0xc8
    f5a4:	006d      	lsls	r5, r5, #1
    f5a6:	5960      	ldr	r0, [r4, r5]
    f5a8:	f7fd f8a4 	bl	c6f4 <connection_release>
		_radio.conn_curr = NULL;
    f5ac:	2300      	movs	r3, #0
    f5ae:	5163      	str	r3, [r4, r5]
    f5b0:	f001 fa48 	bl	10a44 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa45>
		if (_radio.conn_curr->pkt_tx_head ==
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    f5b4:	2300      	movs	r3, #0
    f5b6:	930c      	str	r3, [sp, #48]	; 0x30

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f5b8:	23c8      	movs	r3, #200	; 0xc8
    f5ba:	4856      	ldr	r0, [pc, #344]	; (f714 <isr+0xb20>)
    f5bc:	005b      	lsls	r3, r3, #1
    f5be:	58c3      	ldr	r3, [r0, r3]
    f5c0:	7a3a      	ldrb	r2, [r7, #8]
    f5c2:	33c0      	adds	r3, #192	; 0xc0
    f5c4:	781b      	ldrb	r3, [r3, #0]
    f5c6:	0712      	lsls	r2, r2, #28
    f5c8:	079b      	lsls	r3, r3, #30
    f5ca:	0fd2      	lsrs	r2, r2, #31
    f5cc:	0fdb      	lsrs	r3, r3, #31
    f5ce:	0006      	movs	r6, r0
    f5d0:	429a      	cmp	r2, r3
    f5d2:	d001      	beq.n	f5d8 <isr+0x9e4>
    f5d4:	f001 fa3c 	bl	10a50 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa51>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    f5d8:	2003      	movs	r0, #3
    f5da:	f7fc f8bb 	bl	b754 <packet_rx_reserve_get>

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f5de:	2800      	cmp	r0, #0
    f5e0:	d101      	bne.n	f5e6 <isr+0x9f2>
    f5e2:	f001 fa35 	bl	10a50 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa51>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
    f5e6:	23ff      	movs	r3, #255	; 0xff
    f5e8:	005b      	lsls	r3, r3, #1
	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    f5ea:	5cf3      	ldrb	r3, [r6, r3]
    f5ec:	2b00      	cmp	r3, #0
    f5ee:	d03d      	beq.n	f66c <isr+0xa78>
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f5f0:	23e4      	movs	r3, #228	; 0xe4
    f5f2:	005b      	lsls	r3, r3, #1
    f5f4:	58f2      	ldr	r2, [r6, r3]
    f5f6:	3304      	adds	r3, #4
    f5f8:	58f1      	ldr	r1, [r6, r3]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
    f5fa:	428a      	cmp	r2, r1
    f5fc:	d107      	bne.n	f60e <isr+0xa1a>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    f5fe:	21fe      	movs	r1, #254	; 0xfe
    f600:	20fe      	movs	r0, #254	; 0xfe
    f602:	0049      	lsls	r1, r1, #1
    f604:	30ff      	adds	r0, #255	; 0xff
    f606:	5c71      	ldrb	r1, [r6, r1]
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f608:	5c30      	ldrb	r0, [r6, r0]
    f60a:	4288      	cmp	r0, r1
    f60c:	d02e      	beq.n	f66c <isr+0xa78>
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f60e:	58f3      	ldr	r3, [r6, r3]
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    f610:	429a      	cmp	r2, r3
    f612:	d101      	bne.n	f618 <isr+0xa24>
    f614:	f001 fa1c 	bl	10a50 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa51>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    f618:	23fe      	movs	r3, #254	; 0xfe
    f61a:	21fe      	movs	r1, #254	; 0xfe
    f61c:	005b      	lsls	r3, r3, #1
    f61e:	31ff      	adds	r1, #255	; 0xff
    f620:	5cf2      	ldrb	r2, [r6, r3]
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f622:	5c71      	ldrb	r1, [r6, r1]
    f624:	4291      	cmp	r1, r2
    f626:	d101      	bne.n	f62c <isr+0xa38>
    f628:	f001 fa12 	bl	10a50 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa51>
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    f62c:	5cf3      	ldrb	r3, [r6, r3]
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    f62e:	2b00      	cmp	r3, #0
    f630:	d108      	bne.n	f644 <isr+0xa50>
		(((_radio.fc_req == 0) &&
    f632:	22fd      	movs	r2, #253	; 0xfd
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    f634:	3391      	adds	r3, #145	; 0x91
    f636:	33ff      	adds	r3, #255	; 0xff
    f638:	58f3      	ldr	r3, [r6, r3]
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    f63a:	0052      	lsls	r2, r2, #1
    f63c:	5ab2      	ldrh	r2, [r6, r2]
    f63e:	8c1b      	ldrh	r3, [r3, #32]
    f640:	429a      	cmp	r2, r3
    f642:	d013      	beq.n	f66c <isr+0xa78>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    f644:	23fe      	movs	r3, #254	; 0xfe
    f646:	005b      	lsls	r3, r3, #1
    f648:	5cf2      	ldrb	r2, [r6, r3]
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    f64a:	2a00      	cmp	r2, #0
    f64c:	d101      	bne.n	f652 <isr+0xa5e>
    f64e:	f001 f9ff 	bl	10a50 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa51>
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
    f652:	22c8      	movs	r2, #200	; 0xc8
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f654:	5cf3      	ldrb	r3, [r6, r3]
		   _radio.conn_curr->handle)))))) {
    f656:	0052      	lsls	r2, r2, #1
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f658:	33f7      	adds	r3, #247	; 0xf7
		   _radio.conn_curr->handle)))))) {
    f65a:	58b1      	ldr	r1, [r6, r2]
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f65c:	005b      	lsls	r3, r3, #1
    f65e:	18f3      	adds	r3, r6, r3
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    f660:	88da      	ldrh	r2, [r3, #6]
    f662:	8c0b      	ldrh	r3, [r1, #32]
    f664:	429a      	cmp	r2, r3
    f666:	d001      	beq.n	f66c <isr+0xa78>
    f668:	f001 f9f2 	bl	10a50 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa51>
    f66c:	23c8      	movs	r3, #200	; 0xc8
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;

		if (pdu_data_rx->len != 0) {
    f66e:	7a79      	ldrb	r1, [r7, #9]
    f670:	005b      	lsls	r3, r3, #1
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    f672:	58f3      	ldr	r3, [r6, r3]
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;

		if (pdu_data_rx->len != 0) {
    f674:	2900      	cmp	r1, #0
    f676:	d101      	bne.n	f67c <isr+0xa88>
    f678:	f000 fe93 	bl	103a2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3a3>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    f67c:	2200      	movs	r2, #0

		if (pdu_data_rx->len != 0) {
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    f67e:	33c0      	adds	r3, #192	; 0xc0
    f680:	781b      	ldrb	r3, [r3, #0]
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
    f682:	9212      	str	r2, [sp, #72]	; 0x48

		if (pdu_data_rx->len != 0) {
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    f684:	06db      	lsls	r3, r3, #27
    f686:	d50f      	bpl.n	f6a8 <isr+0xab4>
				u32_t done;

				done = radio_ccm_is_done();
    f688:	f7fb f822 	bl	a6d0 <radio_ccm_is_done>
				LL_ASSERT(done);

				ccm_rx_increment = 1;
    f68c:	2301      	movs	r3, #1
    f68e:	9312      	str	r3, [sp, #72]	; 0x48
			 */
			if (_radio.conn_curr->enc_rx) {
				u32_t done;

				done = radio_ccm_is_done();
				LL_ASSERT(done);
    f690:	2800      	cmp	r0, #0
    f692:	d109      	bne.n	f6a8 <isr+0xab4>
    f694:	4b20      	ldr	r3, [pc, #128]	; (f718 <isr+0xb24>)
    f696:	4a23      	ldr	r2, [pc, #140]	; (f724 <isr+0xb30>)
    f698:	9301      	str	r3, [sp, #4]
    f69a:	4b20      	ldr	r3, [pc, #128]	; (f71c <isr+0xb28>)
    f69c:	4922      	ldr	r1, [pc, #136]	; (f728 <isr+0xb34>)
    f69e:	9300      	str	r3, [sp, #0]
    f6a0:	4822      	ldr	r0, [pc, #136]	; (f72c <isr+0xb38>)
    f6a2:	4b23      	ldr	r3, [pc, #140]	; (f730 <isr+0xb3c>)
    f6a4:	f001 f9ad 	bl	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    f6a8:	24c8      	movs	r4, #200	; 0xc8
    f6aa:	0064      	lsls	r4, r4, #1
    f6ac:	5933      	ldr	r3, [r6, r4]
    f6ae:	33c0      	adds	r3, #192	; 0xc0
    f6b0:	781b      	ldrb	r3, [r3, #0]
    f6b2:	06db      	lsls	r3, r3, #27
    f6b4:	d406      	bmi.n	f6c4 <isr+0xad0>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    f6b6:	5935      	ldr	r5, [r6, r4]
    f6b8:	002b      	movs	r3, r5
    f6ba:	33c0      	adds	r3, #192	; 0xc0
				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
    f6bc:	781a      	ldrb	r2, [r3, #0]
    f6be:	0752      	lsls	r2, r2, #29
    f6c0:	d412      	bmi.n	f6e8 <isr+0xaf4>
    f6c2:	e039      	b.n	f738 <isr+0xb44>
    f6c4:	f7fb f828 	bl	a718 <radio_ccm_mic_is_valid>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    f6c8:	2800      	cmp	r0, #0
    f6ca:	d1f4      	bne.n	f6b6 <isr+0xac2>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
			     (pdu_data_rx->ll_id != PDU_DATA_LLID_CTRL))) {
				_radio.state = STATE_CLOSE;
    f6cc:	2303      	movs	r3, #3
    f6ce:	7433      	strb	r3, [r6, #16]
				radio_disable();
    f6d0:	f7fa fdbc 	bl	a24c <radio_disable>

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
    f6d4:	f7fa fdce 	bl	a274 <radio_is_ready>
    f6d8:	1e05      	subs	r5, r0, #0
    f6da:	d00f      	beq.n	f6fc <isr+0xb08>
    f6dc:	4b0e      	ldr	r3, [pc, #56]	; (f718 <isr+0xb24>)
    f6de:	9301      	str	r3, [sp, #4]
    f6e0:	4b0e      	ldr	r3, [pc, #56]	; (f71c <isr+0xb28>)
    f6e2:	9300      	str	r3, [sp, #0]
    f6e4:	4b12      	ldr	r3, [pc, #72]	; (f730 <isr+0xb3c>)
    f6e6:	e004      	b.n	f6f2 <isr+0xafe>
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    f6e8:	7a3a      	ldrb	r2, [r7, #8]
    f6ea:	43d2      	mvns	r2, r2
    f6ec:	0792      	lsls	r2, r2, #30
    f6ee:	d1ed      	bne.n	f6cc <isr+0xad8>
    f6f0:	e022      	b.n	f738 <isr+0xb44>
				_radio.state = STATE_CLOSE;
				radio_disable();

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
    f6f2:	4a0c      	ldr	r2, [pc, #48]	; (f724 <isr+0xb30>)
    f6f4:	490c      	ldr	r1, [pc, #48]	; (f728 <isr+0xb34>)
    f6f6:	480f      	ldr	r0, [pc, #60]	; (f734 <isr+0xb40>)
    f6f8:	f001 f983 	bl	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>

				terminate_ind_rx_enqueue(_radio.conn_curr,
    f6fc:	24c8      	movs	r4, #200	; 0xc8
    f6fe:	0064      	lsls	r4, r4, #1
    f700:	213d      	movs	r1, #61	; 0x3d
    f702:	5930      	ldr	r0, [r6, r4]
    f704:	f7fd fc98 	bl	d038 <terminate_ind_rx_enqueue>
							 0x3d);

				connection_release(_radio.conn_curr);
    f708:	5930      	ldr	r0, [r6, r4]
    f70a:	f7fc fff3 	bl	c6f4 <connection_release>
				_radio.conn_curr = NULL;
    f70e:	5135      	str	r5, [r6, r4]
    f710:	f001 f998 	bl	10a44 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa45>
    f714:	20001254 	.word	0x20001254
    f718:	000145b0 	.word	0x000145b0
    f71c:	000145b5 	.word	0x000145b5
    f720:	00017082 	.word	0x00017082
    f724:	00014570 	.word	0x00014570
    f728:	00014577 	.word	0x00014577
    f72c:	0001614c 	.word	0x0001614c
    f730:	0001721a 	.word	0x0001721a
    f734:	00015df8 	.word	0x00015df8
				return 1; /* terminated */
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
    f738:	2400      	movs	r4, #0
			_radio.conn_curr->apto_expire = 0;
    f73a:	1d2a      	adds	r2, r5, #4
				return 1; /* terminated */
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
    f73c:	87ec      	strh	r4, [r5, #62]	; 0x3e
			_radio.conn_curr->apto_expire = 0;
    f73e:	87d4      	strh	r4, [r2, #62]	; 0x3e
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			switch (pdu_data_rx->ll_id) {
    f740:	7a3a      	ldrb	r2, [r7, #8]
    f742:	0792      	lsls	r2, r2, #30
    f744:	0f92      	lsrs	r2, r2, #30
    f746:	42a2      	cmp	r2, r4
    f748:	d101      	bne.n	f74e <isr+0xb5a>
    f74a:	f000 fe24 	bl	10396 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x397>
    f74e:	2a02      	cmp	r2, #2
    f750:	d800      	bhi.n	f754 <isr+0xb60>
    f752:	e191      	b.n	fa78 <isr+0xe84>
{
	struct pdu_data *pdu_data_rx;
	u8_t nack = 0;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
    f754:	7afa      	ldrb	r2, [r7, #11]
    f756:	920e      	str	r2, [sp, #56]	; 0x38
    f758:	2a18      	cmp	r2, #24
    f75a:	d901      	bls.n	f760 <isr+0xb6c>
    f75c:	f000 fdfa 	bl	10354 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x355>
    f760:	0010      	movs	r0, r2
    f762:	0022      	movs	r2, r4
    f764:	3491      	adds	r4, #145	; 0x91
    f766:	34ff      	adds	r4, #255	; 0xff
    f768:	f7f0 fd10 	bl	18c <__gnu_thumb1_case_uhi>
    f76c:	00900019 	.word	0x00900019
    f770:	00c900c5 	.word	0x00c900c5
    f774:	010100e7 	.word	0x010100e7
    f778:	03aa010e 	.word	0x03aa010e
    f77c:	0173013e 	.word	0x0173013e
    f780:	01950189 	.word	0x01950189
    f784:	023101aa 	.word	0x023101aa
    f788:	0236013e 	.word	0x0236013e
    f78c:	02f700fe 	.word	0x02f700fe
    f790:	03a80392 	.word	0x03a80392
    f794:	03ec03ec 	.word	0x03ec03ec
    f798:	054304ce 	.word	0x054304ce
    f79c:	056f      	.short	0x056f
	packet_rx_callback();
}

static u32_t conn_update(struct connection *conn, struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
    f79e:	7dbb      	ldrb	r3, [r7, #22]
    f7a0:	7d7a      	ldrb	r2, [r7, #21]
    f7a2:	021b      	lsls	r3, r3, #8
    f7a4:	4313      	orrs	r3, r2
    f7a6:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    f7a8:	1a9b      	subs	r3, r3, r2
    f7aa:	4ae0      	ldr	r2, [pc, #896]	; (fb2c <isr+0xf38>)
    f7ac:	b29b      	uxth	r3, r3
    f7ae:	4293      	cmp	r3, r2
    f7b0:	dd01      	ble.n	f7b6 <isr+0xbc2>
    f7b2:	f001 f93f 	bl	10a34 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa35>
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
		return 1;
	}

	LL_ASSERT((conn->llcp_req == conn->llcp_ack) ||
    f7b6:	002b      	movs	r3, r5
    f7b8:	002a      	movs	r2, r5
    f7ba:	3369      	adds	r3, #105	; 0x69
    f7bc:	3268      	adds	r2, #104	; 0x68
    f7be:	781b      	ldrb	r3, [r3, #0]
    f7c0:	7812      	ldrb	r2, [r2, #0]
    f7c2:	429a      	cmp	r2, r3
    f7c4:	d015      	beq.n	f7f2 <isr+0xbfe>
    f7c6:	002a      	movs	r2, r5
    f7c8:	326a      	adds	r2, #106	; 0x6a
    f7ca:	7812      	ldrb	r2, [r2, #0]
    f7cc:	2a01      	cmp	r2, #1
    f7ce:	d106      	bne.n	f7de <isr+0xbea>
    f7d0:	002a      	movs	r2, r5
    f7d2:	3295      	adds	r2, #149	; 0x95
    f7d4:	7811      	ldrb	r1, [r2, #0]
    f7d6:	2207      	movs	r2, #7
    f7d8:	400a      	ands	r2, r1
    f7da:	2a05      	cmp	r2, #5
    f7dc:	d009      	beq.n	f7f2 <isr+0xbfe>
    f7de:	4bd4      	ldr	r3, [pc, #848]	; (fb30 <isr+0xf3c>)
    f7e0:	4ad4      	ldr	r2, [pc, #848]	; (fb34 <isr+0xf40>)
    f7e2:	9301      	str	r3, [sp, #4]
    f7e4:	4bd4      	ldr	r3, [pc, #848]	; (fb38 <isr+0xf44>)
    f7e6:	49d5      	ldr	r1, [pc, #852]	; (fb3c <isr+0xf48>)
    f7e8:	9300      	str	r3, [sp, #0]
    f7ea:	48d5      	ldr	r0, [pc, #852]	; (fb40 <isr+0xf4c>)
    f7ec:	4bd5      	ldr	r3, [pc, #852]	; (fb44 <isr+0xf50>)
    f7ee:	f001 f908 	bl	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>
		    LLCP_CONN_STATE_RSP_WAIT)));

	/* set mutex, if only not already set. As a master the mutex shall
	 * be set, but a slave we accept it as new 'set' of mutex.
	 */
	if (_radio.conn_upd == 0) {
    f7f2:	2281      	movs	r2, #129	; 0x81
    f7f4:	0092      	lsls	r2, r2, #2
    f7f6:	58b1      	ldr	r1, [r6, r2]
    f7f8:	2900      	cmp	r1, #0
    f7fa:	d10f      	bne.n	f81c <isr+0xc28>
		LL_ASSERT(conn->role.slave.role != 0);
    f7fc:	0029      	movs	r1, r5
    f7fe:	3144      	adds	r1, #68	; 0x44
    f800:	7809      	ldrb	r1, [r1, #0]
    f802:	07c9      	lsls	r1, r1, #31
    f804:	d409      	bmi.n	f81a <isr+0xc26>
    f806:	4bca      	ldr	r3, [pc, #808]	; (fb30 <isr+0xf3c>)
    f808:	4aca      	ldr	r2, [pc, #808]	; (fb34 <isr+0xf40>)
    f80a:	9301      	str	r3, [sp, #4]
    f80c:	4bca      	ldr	r3, [pc, #808]	; (fb38 <isr+0xf44>)
    f80e:	49cb      	ldr	r1, [pc, #812]	; (fb3c <isr+0xf48>)
    f810:	9300      	str	r3, [sp, #0]
    f812:	48cd      	ldr	r0, [pc, #820]	; (fb48 <isr+0xf54>)
    f814:	4bcb      	ldr	r3, [pc, #812]	; (fb44 <isr+0xf50>)
    f816:	f001 f8f4 	bl	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>

		_radio.conn_upd = conn;
    f81a:	50b5      	str	r5, [r6, r2]
	}

	conn->llcp.connection_update.win_size =
    f81c:	002a      	movs	r2, r5
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
    f81e:	0028      	movs	r0, r5

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
    f820:	7b39      	ldrb	r1, [r7, #12]
		LL_ASSERT(conn->role.slave.role != 0);

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
    f822:	3294      	adds	r2, #148	; 0x94
    f824:	7011      	strb	r1, [r2, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
    f826:	7bba      	ldrb	r2, [r7, #14]
    f828:	7b79      	ldrb	r1, [r7, #13]
    f82a:	0212      	lsls	r2, r2, #8
		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
    f82c:	430a      	orrs	r2, r1
    f82e:	49c7      	ldr	r1, [pc, #796]	; (fb4c <isr+0xf58>)
    f830:	308c      	adds	r0, #140	; 0x8c
    f832:	434a      	muls	r2, r1
    f834:	6002      	str	r2, [r0, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
    f836:	7c3a      	ldrb	r2, [r7, #16]
    f838:	7bf9      	ldrb	r1, [r7, #15]
    f83a:	0212      	lsls	r2, r2, #8
    f83c:	430a      	orrs	r2, r1
	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
    f83e:	0029      	movs	r1, r5
    f840:	316c      	adds	r1, #108	; 0x6c
    f842:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
    f844:	7cba      	ldrb	r2, [r7, #18]
    f846:	7c79      	ldrb	r1, [r7, #17]
    f848:	0212      	lsls	r2, r2, #8
    f84a:	430a      	orrs	r2, r1
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
    f84c:	0029      	movs	r1, r5
    f84e:	316e      	adds	r1, #110	; 0x6e
    f850:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
    f852:	7d3a      	ldrb	r2, [r7, #20]
    f854:	7cf9      	ldrb	r1, [r7, #19]
    f856:	0212      	lsls	r2, r2, #8
    f858:	430a      	orrs	r2, r1
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
    f85a:	0029      	movs	r1, r5
    f85c:	3170      	adds	r1, #112	; 0x70
    f85e:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
    f860:	7dba      	ldrb	r2, [r7, #22]
    f862:	7d79      	ldrb	r1, [r7, #21]
    f864:	0212      	lsls	r2, r2, #8
    f866:	430a      	orrs	r2, r1
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
    f868:	0029      	movs	r1, r5
    f86a:	3174      	adds	r1, #116	; 0x74
    f86c:	800a      	strh	r2, [r1, #0]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;
    f86e:	22e0      	movs	r2, #224	; 0xe0
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    f870:	3121      	adds	r1, #33	; 0x21
    f872:	7808      	ldrb	r0, [r1, #0]
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_ack--;
    f874:	3b01      	subs	r3, #1
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
	conn->llcp.connection_update.is_internal = 0;
    f876:	4002      	ands	r2, r0
    f878:	700a      	strb	r2, [r1, #0]

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    f87a:	002a      	movs	r2, r5
    f87c:	2101      	movs	r1, #1
    f87e:	326a      	adds	r2, #106	; 0x6a
    f880:	7011      	strb	r1, [r2, #0]
	conn->llcp_ack--;
    f882:	3a01      	subs	r2, #1
    f884:	7013      	strb	r3, [r2, #0]
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
			/* conn param req procedure, if any, is complete */
			_radio.conn_curr->procedure_expire = 0;
    f886:	2400      	movs	r4, #0
    f888:	f000 fcdd 	bl	10246 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x247>
}

static u32_t chan_map_update(struct connection *conn,
			     struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
    f88c:	7cbb      	ldrb	r3, [r7, #18]
    f88e:	7c7a      	ldrb	r2, [r7, #17]
    f890:	021b      	lsls	r3, r3, #8
    f892:	4313      	orrs	r3, r2
    f894:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    f896:	1a9b      	subs	r3, r3, r2
    f898:	4aa4      	ldr	r2, [pc, #656]	; (fb2c <isr+0xf38>)
    f89a:	b29b      	uxth	r3, r3
    f89c:	4293      	cmp	r3, r2
    f89e:	dd01      	ble.n	f8a4 <isr+0xcb0>
    f8a0:	f001 f8c8 	bl	10a34 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa35>
	      conn->event_counter) & 0xffff) > 0x7fff) {
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    f8a4:	002e      	movs	r6, r5
    f8a6:	002b      	movs	r3, r5
    f8a8:	3669      	adds	r6, #105	; 0x69
    f8aa:	3368      	adds	r3, #104	; 0x68
    f8ac:	781a      	ldrb	r2, [r3, #0]
    f8ae:	7833      	ldrb	r3, [r6, #0]
    f8b0:	429a      	cmp	r2, r3
    f8b2:	d006      	beq.n	f8c2 <isr+0xcce>
    f8b4:	4b9e      	ldr	r3, [pc, #632]	; (fb30 <isr+0xf3c>)
    f8b6:	9301      	str	r3, [sp, #4]
    f8b8:	4b9f      	ldr	r3, [pc, #636]	; (fb38 <isr+0xf44>)
    f8ba:	9300      	str	r3, [sp, #0]
    f8bc:	4ba4      	ldr	r3, [pc, #656]	; (fb50 <isr+0xf5c>)
    f8be:	f000 fd06 	bl	102ce <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2cf>

	memcpy(&conn->llcp.chan_map.chm[0],
    f8c2:	0028      	movs	r0, r5
    f8c4:	0039      	movs	r1, r7
    f8c6:	2205      	movs	r2, #5
    f8c8:	306d      	adds	r0, #109	; 0x6d
    f8ca:	310c      	adds	r1, #12
    f8cc:	f7f1 fd4a 	bl	1364 <memcpy>
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
    f8d0:	7cbb      	ldrb	r3, [r7, #18]
    f8d2:	7c7a      	ldrb	r2, [r7, #17]
    f8d4:	021b      	lsls	r3, r3, #8
    f8d6:	4313      	orrs	r3, r2
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	memcpy(&conn->llcp.chan_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.chm[0],
	       sizeof(conn->llcp.chan_map.chm));
	conn->llcp.chan_map.instant =
    f8d8:	002a      	movs	r2, r5
    f8da:	3272      	adds	r2, #114	; 0x72
    f8dc:	8013      	strh	r3, [r2, #0]
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
	conn->llcp.chan_map.initiate = 0;
    f8de:	002b      	movs	r3, r5
    f8e0:	2400      	movs	r4, #0
    f8e2:	336c      	adds	r3, #108	; 0x6c
    f8e4:	701c      	strb	r4, [r3, #0]

	conn->llcp_type = LLCP_CHAN_MAP;
    f8e6:	2302      	movs	r3, #2
    f8e8:	356a      	adds	r5, #106	; 0x6a
    f8ea:	702b      	strb	r3, [r5, #0]
	conn->llcp_ack--;
    f8ec:	7833      	ldrb	r3, [r6, #0]
    f8ee:	3b01      	subs	r3, #1
    f8f0:	7033      	strb	r3, [r6, #0]
    f8f2:	f000 fd6b 	bl	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
    f8f6:	7b3b      	ldrb	r3, [r7, #12]
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
    f8f8:	35a7      	adds	r5, #167	; 0xa7
    f8fa:	f001 f89d 	bl	10a38 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa39>
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f8fe:	0028      	movs	r0, r5
    f900:	0039      	movs	r1, r7
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f902:	24c8      	movs	r4, #200	; 0xc8
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f904:	2208      	movs	r2, #8
    f906:	3116      	adds	r1, #22
    f908:	3087      	adds	r0, #135	; 0x87
    f90a:	f7f1 fd2b 	bl	1364 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f90e:	0039      	movs	r1, r7
    f910:	4d90      	ldr	r5, [pc, #576]	; (fb54 <isr+0xf60>)
    f912:	0064      	lsls	r4, r4, #1
    f914:	5928      	ldr	r0, [r5, r4]
    f916:	2204      	movs	r2, #4
    f918:	311e      	adds	r1, #30
    f91a:	30da      	adds	r0, #218	; 0xda
    f91c:	f7f1 fd22 	bl	1364 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.ivm[0], 4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    f920:	5929      	ldr	r1, [r5, r4]
    f922:	2004      	movs	r0, #4
    f924:	000a      	movs	r2, r1
    f926:	32c0      	adds	r2, #192	; 0xc0
    f928:	7813      	ldrb	r3, [r2, #0]
		 */
		enc_rsp_send(_radio.conn_curr);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		/* enqueue the enc req */
		*rx_enqueue = 1;
    f92a:	3c90      	subs	r4, #144	; 0x90
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.ivm[0], 4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    f92c:	4303      	orrs	r3, r0
    f92e:	7013      	strb	r3, [r2, #0]

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design)
		 */
		_radio.conn_curr->procedure_expire =
    f930:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
		 */
		enc_rsp_send(_radio.conn_curr);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		/* enqueue the enc req */
		*rx_enqueue = 1;
    f932:	3cff      	subs	r4, #255	; 0xff

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design)
		 */
		_radio.conn_curr->procedure_expire =
    f934:	874b      	strh	r3, [r1, #58]	; 0x3a
    f936:	f000 fd49 	bl	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		*rx_enqueue = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		/* things sent by slave stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    f93a:	0028      	movs	r0, r5
    f93c:	0039      	movs	r1, r7
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.skds[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    f93e:	24c8      	movs	r4, #200	; 0xc8
		*rx_enqueue = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		/* things sent by slave stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    f940:	2208      	movs	r2, #8
    f942:	310c      	adds	r1, #12
    f944:	308f      	adds	r0, #143	; 0x8f
    f946:	f7f1 fd0d 	bl	1364 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.skds[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    f94a:	0039      	movs	r1, r7
    f94c:	4d81      	ldr	r5, [pc, #516]	; (fb54 <isr+0xf60>)
    f94e:	0064      	lsls	r4, r4, #1
    f950:	5928      	ldr	r0, [r5, r4]
    f952:	2204      	movs	r2, #4
    f954:	3114      	adds	r1, #20
    f956:	30de      	adds	r0, #222	; 0xde
    f958:	f7f1 fd04 	bl	1364 <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.ivs[0],
		       4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    f95c:	2104      	movs	r1, #4
    f95e:	592b      	ldr	r3, [r5, r4]
    f960:	33c0      	adds	r3, #192	; 0xc0
    f962:	781a      	ldrb	r2, [r3, #0]
    f964:	430a      	orrs	r2, r1
    f966:	701a      	strb	r2, [r3, #0]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    f968:	2400      	movs	r4, #0
    f96a:	f000 fd2f 	bl	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_REQ:
		LL_ASSERT(_radio.conn_curr->llcp_req ==
    f96e:	002b      	movs	r3, r5
    f970:	002a      	movs	r2, r5
    f972:	3368      	adds	r3, #104	; 0x68
    f974:	3269      	adds	r2, #105	; 0x69
    f976:	7819      	ldrb	r1, [r3, #0]
    f978:	7813      	ldrb	r3, [r2, #0]
    f97a:	428b      	cmp	r3, r1
    f97c:	d110      	bne.n	f9a0 <isr+0xdac>
			  _radio.conn_curr->llcp_ack);

		/* start enc rsp to be scheduled in master prepare */
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    f97e:	2103      	movs	r1, #3
    f980:	356a      	adds	r5, #106	; 0x6a
    f982:	7029      	strb	r1, [r5, #0]
		_radio.conn_curr->llcp_ack--;
    f984:	3b01      	subs	r3, #1
    f986:	e084      	b.n	fa92 <isr+0xe9e>
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (_radio.role == ROLE_SLAVE) {
    f988:	7bf2      	ldrb	r2, [r6, #15]
    f98a:	b2d2      	uxtb	r2, r2
    f98c:	2a03      	cmp	r2, #3
    f98e:	d116      	bne.n	f9be <isr+0xdca>

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
    f990:	002b      	movs	r3, r5
    f992:	0029      	movs	r1, r5
    f994:	3368      	adds	r3, #104	; 0x68
    f996:	3169      	adds	r1, #105	; 0x69
    f998:	7818      	ldrb	r0, [r3, #0]
    f99a:	780b      	ldrb	r3, [r1, #0]
    f99c:	4283      	cmp	r3, r0
    f99e:	d009      	beq.n	f9b4 <isr+0xdc0>
    f9a0:	4b63      	ldr	r3, [pc, #396]	; (fb30 <isr+0xf3c>)
    f9a2:	4a64      	ldr	r2, [pc, #400]	; (fb34 <isr+0xf40>)
    f9a4:	9301      	str	r3, [sp, #4]
    f9a6:	4b64      	ldr	r3, [pc, #400]	; (fb38 <isr+0xf44>)
    f9a8:	4964      	ldr	r1, [pc, #400]	; (fb3c <isr+0xf48>)
    f9aa:	9300      	str	r3, [sp, #0]
    f9ac:	486a      	ldr	r0, [pc, #424]	; (fb58 <isr+0xf64>)
    f9ae:	4b6b      	ldr	r3, [pc, #428]	; (fb5c <isr+0xf68>)
    f9b0:	f001 f827 	bl	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    f9b4:	356a      	adds	r5, #106	; 0x6a
			_radio.conn_curr->llcp_ack--;
    f9b6:	3b01      	subs	r3, #1
#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    f9b8:	702a      	strb	r2, [r5, #0]
			_radio.conn_curr->llcp_ack--;
    f9ba:	700b      	strb	r3, [r1, #0]
    f9bc:	e003      	b.n	f9c6 <isr+0xdd2>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		} else {
			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
			_radio.conn_curr->pause_tx = 0;
    f9be:	22f3      	movs	r2, #243	; 0xf3
			_radio.conn_curr->pause_tx = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		} else {
			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    f9c0:	7819      	ldrb	r1, [r3, #0]
			_radio.conn_curr->pause_tx = 0;
    f9c2:	400a      	ands	r2, r1
    f9c4:	701a      	strb	r2, [r3, #0]
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (_radio.conn_curr->refresh) {
    f9c6:	23c8      	movs	r3, #200	; 0xc8
    f9c8:	4a62      	ldr	r2, [pc, #392]	; (fb54 <isr+0xf60>)
    f9ca:	005b      	lsls	r3, r3, #1
    f9cc:	58d0      	ldr	r0, [r2, r3]
    f9ce:	2140      	movs	r1, #64	; 0x40
    f9d0:	0002      	movs	r2, r0
    f9d2:	32c0      	adds	r2, #192	; 0xc0
    f9d4:	7813      	ldrb	r3, [r2, #0]
    f9d6:	420b      	tst	r3, r1
    f9d8:	d003      	beq.n	f9e2 <isr+0xdee>
			_radio.conn_curr->refresh = 0;
    f9da:	438b      	bics	r3, r1
    f9dc:	7013      	strb	r3, [r2, #0]

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    f9de:	2309      	movs	r3, #9
    f9e0:	713b      	strb	r3, [r7, #4]
		}
		*rx_enqueue = 1;

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    f9e2:	2300      	movs	r3, #0
    f9e4:	8743      	strh	r3, [r0, #58]	; 0x3a
    f9e6:	e047      	b.n	fa78 <isr+0xe84>
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    f9e8:	7b3b      	ldrb	r3, [r7, #12]
    f9ea:	7b79      	ldrb	r1, [r7, #13]
    f9ec:	4a5c      	ldr	r2, [pc, #368]	; (fb60 <isr+0xf6c>)
    f9ee:	0209      	lsls	r1, r1, #8
    f9f0:	4313      	orrs	r3, r2
    f9f2:	002c      	movs	r4, r5
    f9f4:	430b      	orrs	r3, r1
    f9f6:	7bb9      	ldrb	r1, [r7, #14]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f9f8:	0030      	movs	r0, r6
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    f9fa:	0409      	lsls	r1, r1, #16
    f9fc:	430b      	orrs	r3, r1
    f9fe:	001a      	movs	r2, r3
    fa00:	3498      	adds	r4, #152	; 0x98
    fa02:	6823      	ldr	r3, [r4, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fa04:	30d9      	adds	r0, #217	; 0xd9
		struct pdu_data_llctrl_feature_req *req;

		req = &pdu_data_rx->payload.llctrl.ctrldata.feature_req;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    fa06:	03db      	lsls	r3, r3, #15
    fa08:	0bdb      	lsrs	r3, r3, #15
    fa0a:	4013      	ands	r3, r2
    fa0c:	6023      	str	r3, [r4, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fa0e:	30ff      	adds	r0, #255	; 0xff
    fa10:	f7fa fa2c 	bl	9e6c <mem_acquire>
    fa14:	1e06      	subs	r6, r0, #0
	LL_ASSERT(node_tx);
    fa16:	d106      	bne.n	fa26 <isr+0xe32>
    fa18:	4b45      	ldr	r3, [pc, #276]	; (fb30 <isr+0xf3c>)
    fa1a:	9301      	str	r3, [sp, #4]
    fa1c:	4b46      	ldr	r3, [pc, #280]	; (fb38 <isr+0xf44>)
    fa1e:	9300      	str	r3, [sp, #0]
    fa20:	4b50      	ldr	r3, [pc, #320]	; (fb64 <isr+0xf70>)
    fa22:	f000 fca3 	bl	1036c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36d>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fa26:	2203      	movs	r2, #3
    fa28:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    fa2a:	2100      	movs	r1, #0
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fa2c:	4313      	orrs	r3, r2
    fa2e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    fa30:	2309      	movs	r3, #9
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    fa32:	3205      	adds	r2, #5
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    fa34:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    fa36:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    fa38:	3008      	adds	r0, #8
    fa3a:	f7f1 fcbd 	bl	13b8 <memset>
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    fa3e:	7823      	ldrb	r3, [r4, #0]
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
		(conn->llcp_features >> 16) & 0xFF;

	ctrl_tx_enqueue(conn, node_tx);
    fa40:	0031      	movs	r1, r6
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    fa42:	7233      	strb	r3, [r6, #8]
		conn->llcp_features & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
    fa44:	6823      	ldr	r3, [r4, #0]
    fa46:	0a1b      	lsrs	r3, r3, #8
    fa48:	7273      	strb	r3, [r6, #9]
		(conn->llcp_features >> 8) & 0xFF;
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
    fa4a:	6823      	ldr	r3, [r4, #0]
    fa4c:	0c1b      	lsrs	r3, r3, #16
    fa4e:	72b3      	strb	r3, [r6, #10]
    fa50:	e3ca      	b.n	101e8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1e9>
		struct pdu_data_llctrl_feature_rsp *rsp;

		rsp = &pdu_data_rx->payload.llctrl.ctrldata.feature_rsp;

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    fa52:	7b3b      	ldrb	r3, [r7, #12]
    fa54:	4a42      	ldr	r2, [pc, #264]	; (fb60 <isr+0xf6c>)
    fa56:	7b79      	ldrb	r1, [r7, #13]
    fa58:	4313      	orrs	r3, r2
    fa5a:	0209      	lsls	r1, r1, #8
    fa5c:	0028      	movs	r0, r5
    fa5e:	430b      	orrs	r3, r1
    fa60:	7bb9      	ldrb	r1, [r7, #14]
    fa62:	3098      	adds	r0, #152	; 0x98
    fa64:	0409      	lsls	r1, r1, #16
    fa66:	430b      	orrs	r3, r1
    fa68:	001a      	movs	r2, r3
    fa6a:	6803      	ldr	r3, [r0, #0]
    fa6c:	03db      	lsls	r3, r3, #15
    fa6e:	0bdb      	lsrs	r3, r3, #15
    fa70:	4013      	ands	r3, r2
    fa72:	6003      	str	r3, [r0, #0]

		/* enqueue the feature resp */
		*rx_enqueue = 1;

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    fa74:	2300      	movs	r3, #0
    fa76:	876b      	strh	r3, [r5, #58]	; 0x3a

		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);

		/* enqueue the feature resp */
		*rx_enqueue = 1;
    fa78:	2401      	movs	r4, #1
    fa7a:	f000 fca7 	bl	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
	}
	break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		pause_enc_rsp_send(_radio.conn_curr);
    fa7e:	0028      	movs	r0, r5
    fa80:	f7fd fed2 	bl	d828 <pause_enc_rsp_send>

		/* key refresh */
		_radio.conn_curr->refresh = 1;

		/* disable receive encryption */
		_radio.conn_curr->enc_rx = 0;
    fa84:	2344      	movs	r3, #68	; 0x44
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		pause_enc_rsp_send(_radio.conn_curr);

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    fa86:	5932      	ldr	r2, [r6, r4]
    fa88:	32c0      	adds	r2, #192	; 0xc0
    fa8a:	7811      	ldrb	r1, [r2, #0]

		/* key refresh */
		_radio.conn_curr->refresh = 1;

		/* disable receive encryption */
		_radio.conn_curr->enc_rx = 0;
    fa8c:	430b      	orrs	r3, r1
    fa8e:	2110      	movs	r1, #16
    fa90:	438b      	bics	r3, r1
    fa92:	7013      	strb	r3, [r2, #0]
    fa94:	e768      	b.n	f968 <isr+0xd74>
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    fa96:	7bf3      	ldrb	r3, [r6, #15]
    fa98:	2b04      	cmp	r3, #4
    fa9a:	d108      	bne.n	faae <isr+0xeba>
			/* reply with pause enc rsp */
			pause_enc_rsp_send(_radio.conn_curr);
    fa9c:	0028      	movs	r0, r5
    fa9e:	f7fd fec3 	bl	d828 <pause_enc_rsp_send>

			/* disable receive encryption */
			_radio.conn_curr->enc_rx = 0;
    faa2:	2110      	movs	r1, #16
    faa4:	5933      	ldr	r3, [r6, r4]
    faa6:	33c0      	adds	r3, #192	; 0xc0
    faa8:	781a      	ldrb	r2, [r3, #0]
    faaa:	438a      	bics	r2, r1
    faac:	701a      	strb	r2, [r3, #0]
		}

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    faae:	23c8      	movs	r3, #200	; 0xc8

		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
    fab0:	2104      	movs	r1, #4
			/* disable receive encryption */
			_radio.conn_curr->enc_rx = 0;
		}

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    fab2:	005b      	lsls	r3, r3, #1
    fab4:	58f2      	ldr	r2, [r6, r3]
    fab6:	32c0      	adds	r2, #192	; 0xc0
    fab8:	7813      	ldrb	r3, [r2, #0]

		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
    faba:	430b      	orrs	r3, r1
    fabc:	311c      	adds	r1, #28
    fabe:	e7e7      	b.n	fa90 <isr+0xe9c>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
    fac0:	002b      	movs	r3, r5
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
    fac2:	7b3a      	ldrb	r2, [r7, #12]
		_radio.conn_curr->enc_tx = 0;
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
    fac4:	339d      	adds	r3, #157	; 0x9d
    fac6:	701a      	strb	r2, [r3, #0]
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
    fac8:	7bbb      	ldrb	r3, [r7, #14]
    faca:	7b7a      	ldrb	r2, [r7, #13]
    facc:	021b      	lsls	r3, r3, #8
    face:	4313      	orrs	r3, r2

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
    fad0:	002a      	movs	r2, r5
    fad2:	329e      	adds	r2, #158	; 0x9e
    fad4:	8013      	strh	r3, [r2, #0]
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
    fad6:	7c3b      	ldrb	r3, [r7, #16]
    fad8:	7bfa      	ldrb	r2, [r7, #15]
    fada:	021b      	lsls	r3, r3, #8
    fadc:	4313      	orrs	r3, r2
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
    fade:	002a      	movs	r2, r5
    fae0:	32a0      	adds	r2, #160	; 0xa0
    fae2:	8013      	strh	r3, [r2, #0]
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
    fae4:	2303      	movs	r3, #3
    fae6:	3a04      	subs	r2, #4
    fae8:	7811      	ldrb	r1, [r2, #0]
    faea:	2400      	movs	r4, #0
    faec:	400b      	ands	r3, r1
    faee:	2b01      	cmp	r3, #1
    faf0:	d101      	bne.n	faf6 <isr+0xf02>
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
    faf2:	876c      	strh	r4, [r5, #58]	; 0x3a
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;
    faf4:	001c      	movs	r4, r3

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    faf6:	2102      	movs	r1, #2
    faf8:	7813      	ldrb	r3, [r2, #0]

		if (_radio.conn_curr->llcp_version.tx == 0) {
    fafa:	2601      	movs	r6, #1

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    fafc:	430b      	orrs	r3, r1

		if (_radio.conn_curr->llcp_version.tx == 0) {
    fafe:	0019      	movs	r1, r3
    fb00:	4031      	ands	r1, r6

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    fb02:	7013      	strb	r3, [r2, #0]

		if (_radio.conn_curr->llcp_version.tx == 0) {
    fb04:	910a      	str	r1, [sp, #40]	; 0x28
    fb06:	d001      	beq.n	fb0c <isr+0xf18>
    fb08:	f000 fc60 	bl	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fb0c:	4811      	ldr	r0, [pc, #68]	; (fb54 <isr+0xf60>)
		}

		_radio.conn_curr->llcp_version.rx = 1;

		if (_radio.conn_curr->llcp_version.tx == 0) {
			_radio.conn_curr->llcp_version.tx = 1;
    fb0e:	4333      	orrs	r3, r6
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fb10:	30d9      	adds	r0, #217	; 0xd9
		}

		_radio.conn_curr->llcp_version.rx = 1;

		if (_radio.conn_curr->llcp_version.tx == 0) {
			_radio.conn_curr->llcp_version.tx = 1;
    fb12:	7013      	strb	r3, [r2, #0]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fb14:	30ff      	adds	r0, #255	; 0xff
    fb16:	f7fa f9a9 	bl	9e6c <mem_acquire>
    fb1a:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    fb1c:	d126      	bne.n	fb6c <isr+0xf78>
    fb1e:	4b04      	ldr	r3, [pc, #16]	; (fb30 <isr+0xf3c>)
    fb20:	9301      	str	r3, [sp, #4]
    fb22:	4b05      	ldr	r3, [pc, #20]	; (fb38 <isr+0xf44>)
    fb24:	9300      	str	r3, [sp, #0]
    fb26:	4b10      	ldr	r3, [pc, #64]	; (fb68 <isr+0xf74>)
    fb28:	f000 fc20 	bl	1036c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36d>
    fb2c:	00007fff 	.word	0x00007fff
    fb30:	000145b0 	.word	0x000145b0
    fb34:	00014570 	.word	0x00014570
    fb38:	000145b5 	.word	0x000145b5
    fb3c:	00014577 	.word	0x00014577
    fb40:	00016172 	.word	0x00016172
    fb44:	000171f5 	.word	0x000171f5
    fb48:	00016214 	.word	0x00016214
    fb4c:	000004e2 	.word	0x000004e2
    fb50:	00016ff3 	.word	0x00016ff3
    fb54:	20001254 	.word	0x20001254
    fb58:	00016292 	.word	0x00016292
    fb5c:	0001722a 	.word	0x0001722a
    fb60:	fffe30d0 	.word	0xfffe30d0
    fb64:	000170e9 	.word	0x000170e9
    fb68:	0001729f 	.word	0x0001729f

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fb6c:	2203      	movs	r2, #3
    fb6e:	7903      	ldrb	r3, [r0, #4]
    fb70:	4313      	orrs	r3, r2
    fb72:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    fb74:	2306      	movs	r3, #6
    fb76:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_version_ind);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    fb78:	18db      	adds	r3, r3, r3
    fb7a:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    fb7c:	3b03      	subs	r3, #3
    fb7e:	7203      	strb	r3, [r0, #8]
		RADIO_BLE_VERSION_NUMBER;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    fb80:	3b0a      	subs	r3, #10
    fb82:	7243      	strb	r3, [r0, #9]
    fb84:	7283      	strb	r3, [r0, #10]
		RADIO_BLE_COMPANY_ID;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    fb86:	72c3      	strb	r3, [r0, #11]
    fb88:	7303      	strb	r3, [r0, #12]
		RADIO_BLE_SUB_VERSION_NUMBER;

	ctrl_tx_enqueue(conn, node_tx);
    fb8a:	0028      	movs	r0, r5
    fb8c:	f7fd fdda 	bl	d744 <ctrl_tx_enqueue>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    fb90:	002a      	movs	r2, r5
    fb92:	2180      	movs	r1, #128	; 0x80
    fb94:	32c0      	adds	r2, #192	; 0xc0
    fb96:	7813      	ldrb	r3, [r2, #0]
    fb98:	4249      	negs	r1, r1
    fb9a:	430b      	orrs	r3, r1
    fb9c:	7013      	strb	r3, [r2, #0]

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    fb9e:	f7fa fb9f 	bl	a2e0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    fba2:	2203      	movs	r2, #3
    fba4:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
	if (conn->pkt_tx_head) {
    fba6:	35fc      	adds	r5, #252	; 0xfc
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    fba8:	4393      	bics	r3, r2
    fbaa:	431e      	orrs	r6, r3
	pdu_data_tx->len = 0;
    fbac:	466b      	mov	r3, sp
    fbae:	3225      	adds	r2, #37	; 0x25
    fbb0:	189b      	adds	r3, r3, r2
    fbb2:	781b      	ldrb	r3, [r3, #0]
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    fbb4:	7006      	strb	r6, [r0, #0]
	pdu_data_tx->len = 0;
    fbb6:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    fbb8:	68a9      	ldr	r1, [r5, #8]
    fbba:	3a18      	subs	r2, #24
    fbbc:	b2f3      	uxtb	r3, r6
    fbbe:	2900      	cmp	r1, #0
    fbc0:	d001      	beq.n	fbc6 <isr+0xfd2>
		pdu_data_tx->md = 1;
    fbc2:	4313      	orrs	r3, r2
    fbc4:	e000      	b.n	fbc8 <isr+0xfd4>
	} else {
		pdu_data_tx->md = 0;
    fbc6:	4393      	bics	r3, r2
    fbc8:	7003      	strb	r3, [r0, #0]
    fbca:	f000 fbff 	bl	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
		_radio.conn_curr->pause_tx = 0;
    fbce:	22f3      	movs	r2, #243	; 0xf3
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_ENC)
	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    fbd0:	7819      	ldrb	r1, [r3, #0]
		_radio.conn_curr->pause_tx = 0;
    fbd2:	400a      	ands	r2, r1
    fbd4:	701a      	strb	r2, [r3, #0]
    fbd6:	e74d      	b.n	fa74 <isr+0xe80>
		 */

		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
    fbd8:	002b      	movs	r3, r5
    fbda:	3369      	adds	r3, #105	; 0x69
    fbdc:	781b      	ldrb	r3, [r3, #0]
    fbde:	2281      	movs	r2, #129	; 0x81
    fbe0:	930a      	str	r3, [sp, #40]	; 0x28
    fbe2:	002b      	movs	r3, r5
    fbe4:	3368      	adds	r3, #104	; 0x68
    fbe6:	781b      	ldrb	r3, [r3, #0]
    fbe8:	990a      	ldr	r1, [sp, #40]	; 0x28
    fbea:	0092      	lsls	r2, r2, #2
    fbec:	428b      	cmp	r3, r1
    fbee:	d104      	bne.n	fbfa <isr+0x1006>
    fbf0:	58b3      	ldr	r3, [r6, r2]
    fbf2:	2b00      	cmp	r3, #0
    fbf4:	d000      	beq.n	fbf8 <isr+0x1004>
    fbf6:	e0ad      	b.n	fd54 <isr+0x1160>
    fbf8:	e01c      	b.n	fc34 <isr+0x1040>
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
    fbfa:	002b      	movs	r3, r5
    fbfc:	3344      	adds	r3, #68	; 0x44
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    fbfe:	781c      	ldrb	r4, [r3, #0]
    fc00:	2301      	movs	r3, #1
    fc02:	401c      	ands	r4, r3
    fc04:	002b      	movs	r3, r5
		     (_radio.conn_curr->role.slave.role != 0) &&
    fc06:	58b2      	ldr	r2, [r6, r2]
    fc08:	336a      	adds	r3, #106	; 0x6a
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    fc0a:	2c00      	cmp	r4, #0
    fc0c:	d100      	bne.n	fc10 <isr+0x101c>
    fc0e:	e099      	b.n	fd44 <isr+0x1150>
		     (_radio.conn_curr->role.slave.role != 0) &&
    fc10:	4295      	cmp	r5, r2
    fc12:	d000      	beq.n	fc16 <isr+0x1022>
    fc14:	e15c      	b.n	fed0 <isr+0x12dc>
		     (_radio.conn_curr == _radio.conn_upd) &&
    fc16:	781b      	ldrb	r3, [r3, #0]
    fc18:	2b01      	cmp	r3, #1
    fc1a:	d000      	beq.n	fc1e <isr+0x102a>
    fc1c:	e158      	b.n	fed0 <isr+0x12dc>
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
		     ((_radio.conn_curr->llcp.connection_update.state ==
    fc1e:	002b      	movs	r3, r5
    fc20:	3395      	adds	r3, #149	; 0x95
		       LLCP_CONN_STATE_INITIATE) ||
    fc22:	781a      	ldrb	r2, [r3, #0]
    fc24:	2307      	movs	r3, #7
    fc26:	4013      	ands	r3, r2
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
		     (_radio.conn_curr == _radio.conn_upd) &&
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
    fc28:	1e5a      	subs	r2, r3, #1
    fc2a:	2a01      	cmp	r2, #1
    fc2c:	d902      	bls.n	fc34 <isr+0x1040>
		     ((_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_INITIATE) ||
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_REQ) ||
    fc2e:	2b05      	cmp	r3, #5
    fc30:	d000      	beq.n	fc34 <isr+0x1040>
    fc32:	e14d      	b.n	fed0 <isr+0x12dc>
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_RSP_WAIT)))) {
			/* set mutex */
			if (_radio.conn_upd == 0) {
    fc34:	2381      	movs	r3, #129	; 0x81
    fc36:	009b      	lsls	r3, r3, #2
    fc38:	58f2      	ldr	r2, [r6, r3]
    fc3a:	2a00      	cmp	r2, #0
    fc3c:	d100      	bne.n	fc40 <isr+0x104c>
				_radio.conn_upd = _radio.conn_curr;
    fc3e:	50f5      	str	r5, [r6, r3]

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
    fc40:	7b7b      	ldrb	r3, [r7, #13]
    fc42:	7b3a      	ldrb	r2, [r7, #12]
    fc44:	021b      	lsls	r3, r3, #8
    fc46:	4313      	orrs	r3, r2
			}

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
    fc48:	002a      	movs	r2, r5
    fc4a:	326c      	adds	r2, #108	; 0x6c
    fc4c:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
    fc4e:	7c7b      	ldrb	r3, [r7, #17]
    fc50:	7c3a      	ldrb	r2, [r7, #16]
    fc52:	021b      	lsls	r3, r3, #8
    fc54:	4313      	orrs	r3, r2
			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
    fc56:	002a      	movs	r2, r5
    fc58:	326e      	adds	r2, #110	; 0x6e
    fc5a:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
    fc5c:	7cfc      	ldrb	r4, [r7, #19]
    fc5e:	7cbb      	ldrb	r3, [r7, #18]
    fc60:	0224      	lsls	r4, r4, #8
    fc62:	431c      	orrs	r4, r3
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
    fc64:	002b      	movs	r3, r5
    fc66:	3370      	adds	r3, #112	; 0x70
    fc68:	801c      	strh	r4, [r3, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
    fc6a:	7d3a      	ldrb	r2, [r7, #20]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
    fc6c:	709a      	strb	r2, [r3, #2]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
    fc6e:	7dbb      	ldrb	r3, [r7, #22]
    fc70:	7d7a      	ldrb	r2, [r7, #21]
    fc72:	021b      	lsls	r3, r3, #8
    fc74:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
    fc76:	002a      	movs	r2, r5
    fc78:	3274      	adds	r2, #116	; 0x74
    fc7a:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
    fc7c:	7e3b      	ldrb	r3, [r7, #24]
    fc7e:	7dfa      	ldrb	r2, [r7, #23]
    fc80:	021b      	lsls	r3, r3, #8
    fc82:	4313      	orrs	r3, r2
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
    fc84:	002a      	movs	r2, r5
    fc86:	3276      	adds	r2, #118	; 0x76
    fc88:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
    fc8a:	7ebb      	ldrb	r3, [r7, #26]
    fc8c:	7e7a      	ldrb	r2, [r7, #25]
    fc8e:	021b      	lsls	r3, r3, #8
    fc90:	4313      	orrs	r3, r2
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
    fc92:	002a      	movs	r2, r5
    fc94:	3278      	adds	r2, #120	; 0x78
    fc96:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
    fc98:	7f3b      	ldrb	r3, [r7, #28]
    fc9a:	7efa      	ldrb	r2, [r7, #27]
    fc9c:	021b      	lsls	r3, r3, #8
    fc9e:	4313      	orrs	r3, r2
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
    fca0:	002a      	movs	r2, r5
    fca2:	327a      	adds	r2, #122	; 0x7a
    fca4:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
    fca6:	7fbb      	ldrb	r3, [r7, #30]
    fca8:	7f7a      	ldrb	r2, [r7, #29]
    fcaa:	021b      	lsls	r3, r3, #8
    fcac:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
    fcae:	002a      	movs	r2, r5
    fcb0:	327c      	adds	r2, #124	; 0x7c
    fcb2:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
    fcb4:	1c7b      	adds	r3, r7, #1
    fcb6:	7fdb      	ldrb	r3, [r3, #31]
    fcb8:	7ffa      	ldrb	r2, [r7, #31]
    fcba:	021b      	lsls	r3, r3, #8
    fcbc:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
    fcbe:	002a      	movs	r2, r5
    fcc0:	327e      	adds	r2, #126	; 0x7e
    fcc2:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;
    fcc4:	1cbb      	adds	r3, r7, #2
    fcc6:	7fda      	ldrb	r2, [r3, #31]
    fcc8:	1cfb      	adds	r3, r7, #3
    fcca:	7fdb      	ldrb	r3, [r3, #31]
    fccc:	021b      	lsls	r3, r3, #8
    fcce:	4313      	orrs	r3, r2
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
    fcd0:	002a      	movs	r2, r5
    fcd2:	3280      	adds	r2, #128	; 0x80
    fcd4:	8013      	strh	r3, [r2, #0]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;

			/* enqueue the conn param req, if parameters changed,
			 * else respond
			 */
			if ((_radio.conn_curr->llcp.connection_update.interval !=
    fcd6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    fcd8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fcda:	4293      	cmp	r3, r2
    fcdc:	d10a      	bne.n	fcf4 <isr+0x1100>
			     _radio.conn_curr->conn_interval) ||
			    (_radio.conn_curr->llcp.connection_update.latency
			     != _radio.conn_curr->latency) ||
    fcde:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    fce0:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    fce2:	21fa      	movs	r1, #250	; 0xfa
    fce4:	4358      	muls	r0, r3
    fce6:	237d      	movs	r3, #125	; 0x7d
    fce8:	0089      	lsls	r1, r1, #2
    fcea:	4358      	muls	r0, r3
    fcec:	f7f0 fae2 	bl	2b4 <__aeabi_idiv>
    fcf0:	4284      	cmp	r4, r0
    fcf2:	d00e      	beq.n	fd12 <isr+0x111e>
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
    fcf4:	002a      	movs	r2, r5
    fcf6:	2107      	movs	r1, #7
    fcf8:	3295      	adds	r2, #149	; 0x95
    fcfa:	7813      	ldrb	r3, [r2, #0]
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    fcfc:	2401      	movs	r4, #1
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
    fcfe:	438b      	bics	r3, r1
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    fd00:	3903      	subs	r1, #3
    fd02:	430b      	orrs	r3, r1
    fd04:	3114      	adds	r1, #20
    fd06:	438b      	bics	r3, r1
    fd08:	7013      	strb	r3, [r2, #0]
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    fd0a:	002b      	movs	r3, r5
    fd0c:	336a      	adds	r3, #106	; 0x6a
    fd0e:	701c      	strb	r4, [r3, #0]
    fd10:	e013      	b.n	fd3a <isr+0x1146>
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    fd12:	002b      	movs	r3, r5
    fd14:	2201      	movs	r2, #1
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    fd16:	2400      	movs	r4, #0
				_radio.conn_curr->llcp.connection_update.state =
    fd18:	0029      	movs	r1, r5
    fd1a:	2007      	movs	r0, #7
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    fd1c:	3394      	adds	r3, #148	; 0x94
    fd1e:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    fd20:	3b08      	subs	r3, #8
    fd22:	601c      	str	r4, [r3, #0]
				_radio.conn_curr->llcp.connection_update.state =
    fd24:	3195      	adds	r1, #149	; 0x95
    fd26:	780b      	ldrb	r3, [r1, #0]
    fd28:	4383      	bics	r3, r0
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    fd2a:	3804      	subs	r0, #4
    fd2c:	4303      	orrs	r3, r0
    fd2e:	3015      	adds	r0, #21
    fd30:	4383      	bics	r3, r0
    fd32:	700b      	strb	r3, [r1, #0]

				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    fd34:	002b      	movs	r3, r5
    fd36:	336a      	adds	r3, #106	; 0x6a
    fd38:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_ack--;
    fd3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd3c:	3569      	adds	r5, #105	; 0x69
    fd3e:	3b01      	subs	r3, #1
    fd40:	702b      	strb	r3, [r5, #0]
    fd42:	e343      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		/* master in conn update procedure, master in any state we
		 * ignore this req
		 */
		else if ((_radio.conn_curr->llcp_req !=
			  _radio.conn_curr->llcp_ack) &&
			 (_radio.conn_curr->role.master.role == 0) &&
    fd44:	4295      	cmp	r5, r2
    fd46:	d000      	beq.n	fd4a <isr+0x1156>
    fd48:	e0c2      	b.n	fed0 <isr+0x12dc>
			 (_radio.conn_curr == _radio.conn_upd) &&
    fd4a:	781b      	ldrb	r3, [r3, #0]
    fd4c:	2b01      	cmp	r3, #1
    fd4e:	d000      	beq.n	fd52 <isr+0x115e>
    fd50:	e0be      	b.n	fed0 <isr+0x12dc>
    fd52:	e33b      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		 * set (another connection update in progress), hence reject
		 * this req.
		 */
		else if (_radio.conn_curr->llcp_req ==
			 _radio.conn_curr->llcp_ack) {
			reject_ind_ext_send(_radio.conn_curr,
    fd54:	2220      	movs	r2, #32
    fd56:	210f      	movs	r1, #15
    fd58:	e1e8      	b.n	1012c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x12d>

static inline void
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
    fd5a:	002a      	movs	r2, r5
    fd5c:	3268      	adds	r2, #104	; 0x68
    fd5e:	7811      	ldrb	r1, [r2, #0]
    fd60:	7850      	ldrb	r0, [r2, #1]
    fd62:	3201      	adds	r2, #1
    fd64:	4288      	cmp	r0, r1
    fd66:	d04a      	beq.n	fdfe <isr+0x120a>
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;

		switch (_radio.conn_curr->llcp_type) {
    fd68:	002b      	movs	r3, r5
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 u8_t *rx_enqueue)
{
	if (_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) {
		/* reset ctrl procedure */
		_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    fd6a:	7011      	strb	r1, [r2, #0]

		switch (_radio.conn_curr->llcp_type) {
    fd6c:	336a      	adds	r3, #106	; 0x6a
    fd6e:	7819      	ldrb	r1, [r3, #0]
    fd70:	2901      	cmp	r1, #1
    fd72:	d13d      	bne.n	fdf0 <isr+0x11fc>

static inline void
isr_rx_conn_pkt_ctrl_rej_conn_upd(struct radio_pdu_node_rx *radio_pdu_node_rx,
				  u8_t *rx_enqueue)
{
	LL_ASSERT(_radio.conn_upd == _radio.conn_curr);
    fd74:	2281      	movs	r2, #129	; 0x81
    fd76:	0092      	lsls	r2, r2, #2
    fd78:	58b3      	ldr	r3, [r6, r2]
    fd7a:	429d      	cmp	r5, r3
    fd7c:	d009      	beq.n	fd92 <isr+0x119e>
    fd7e:	4bd5      	ldr	r3, [pc, #852]	; (100d4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd5>)
    fd80:	4ad5      	ldr	r2, [pc, #852]	; (100d8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd9>)
    fd82:	9301      	str	r3, [sp, #4]
    fd84:	4bd5      	ldr	r3, [pc, #852]	; (100dc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdd>)
    fd86:	49d6      	ldr	r1, [pc, #856]	; (100e0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xe1>)
    fd88:	9300      	str	r3, [sp, #0]
    fd8a:	48d6      	ldr	r0, [pc, #856]	; (100e4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xe5>)
    fd8c:	4bd6      	ldr	r3, [pc, #856]	; (100e8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xe9>)
    fd8e:	f000 fe38 	bl	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>

	/* reset mutex */
	_radio.conn_upd = NULL;
    fd92:	2300      	movs	r3, #0
    fd94:	50b3      	str	r3, [r6, r2]

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
    fd96:	002a      	movs	r2, r5
    fd98:	3244      	adds	r2, #68	; 0x44
    fd9a:	7812      	ldrb	r2, [r2, #0]
    fd9c:	420a      	tst	r2, r1
    fd9e:	d003      	beq.n	fda8 <isr+0x11b4>
		_radio.conn_curr->role.slave.ticks_to_offset =
		    _radio.conn_curr->llcp.connection_update.
    fda0:	002a      	movs	r2, r5
    fda2:	3288      	adds	r2, #136	; 0x88
	/* reset mutex */
	_radio.conn_upd = NULL;

	/* update to next ticks offsets */
	if (_radio.conn_curr->role.slave.role != 0) {
		_radio.conn_curr->role.slave.ticks_to_offset =
    fda4:	6812      	ldr	r2, [r2, #0]
    fda6:	666a      	str	r2, [r5, #100]	; 0x64
		    _radio.conn_curr->llcp.connection_update.
			ticks_to_offset_next;
	}

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;
    fda8:	876b      	strh	r3, [r5, #58]	; 0x3a

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    fdaa:	002b      	movs	r3, r5
    fdac:	3395      	adds	r3, #149	; 0x95
    fdae:	781a      	ldrb	r2, [r3, #0]
    fdb0:	2318      	movs	r3, #24
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    fdb2:	2400      	movs	r4, #0

	/* conn param req procedure, if any, is complete */
	_radio.conn_curr->procedure_expire = 0;

	/* enqueue the reject ind ext */
	if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    fdb4:	421a      	tst	r2, r3
    fdb6:	d000      	beq.n	fdba <isr+0x11c6>
    fdb8:	e308      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		struct radio_le_conn_update_cmplt
			*radio_le_conn_update_cmplt;
		struct pdu_data *pdu_data_rx;

		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    fdba:	3b10      	subs	r3, #16
    fdbc:	713b      	strb	r3, [r7, #4]
		/* prepare connection update complete structure */
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
    fdbe:	72fc      	strb	r4, [r7, #11]
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
    fdc0:	8cab      	ldrh	r3, [r5, #36]	; 0x24
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
		radio_le_conn_update_cmplt->timeout =
    fdc2:	21fa      	movs	r1, #250	; 0xfa
		pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_update_cmplt =
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
    fdc4:	0a1a      	lsrs	r2, r3, #8
    fdc6:	733b      	strb	r3, [r7, #12]
    fdc8:	737a      	strb	r2, [r7, #13]
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    fdca:	1dea      	adds	r2, r5, #7
    fdcc:	7fd2      	ldrb	r2, [r2, #31]
		radio_le_conn_update_cmplt->timeout =
    fdce:	0089      	lsls	r1, r1, #2
			(struct radio_le_conn_update_cmplt *)
			&pdu_data_rx->payload;
		radio_le_conn_update_cmplt->status = 0x00;
		radio_le_conn_update_cmplt->interval =
			_radio.conn_curr->conn_interval;
		radio_le_conn_update_cmplt->latency = _radio.conn_curr->latency;
    fdd0:	73ba      	strb	r2, [r7, #14]
    fdd2:	002a      	movs	r2, r5
    fdd4:	3208      	adds	r2, #8
    fdd6:	7fd2      	ldrb	r2, [r2, #31]
    fdd8:	73fa      	strb	r2, [r7, #15]
		radio_le_conn_update_cmplt->timeout =
    fdda:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
    fddc:	4358      	muls	r0, r3
    fdde:	237d      	movs	r3, #125	; 0x7d
    fde0:	4358      	muls	r0, r3
    fde2:	f7f0 fa67 	bl	2b4 <__aeabi_idiv>
    fde6:	b280      	uxth	r0, r0
    fde8:	7438      	strb	r0, [r7, #16]
    fdea:	0a00      	lsrs	r0, r0, #8
    fdec:	7478      	strb	r0, [r7, #17]
    fdee:	e030      	b.n	fe52 <isr+0x125e>
			isr_rx_conn_pkt_ctrl_rej_conn_upd(radio_pdu_node_rx,
							  rx_enqueue);
			break;

		default:
			LL_ASSERT(0);
    fdf0:	4bb8      	ldr	r3, [pc, #736]	; (100d4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd5>)
    fdf2:	9301      	str	r3, [sp, #4]
    fdf4:	4bb9      	ldr	r3, [pc, #740]	; (100dc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdd>)
    fdf6:	9300      	str	r3, [sp, #0]
    fdf8:	4bbc      	ldr	r3, [pc, #752]	; (100ec <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xed>)
    fdfa:	f000 fdff 	bl	109fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9fd>
			break;
		}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	} else if (_radio.conn_curr->llcp_length.ack !=
		   _radio.conn_curr->llcp_length.req) {
    fdfe:	002a      	movs	r2, r5
    fe00:	32b4      	adds	r2, #180	; 0xb4
    fe02:	7811      	ldrb	r1, [r2, #0]
			LL_ASSERT(0);
			break;
		}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	} else if (_radio.conn_curr->llcp_length.ack !=
    fe04:	7850      	ldrb	r0, [r2, #1]
    fe06:	3201      	adds	r2, #1
    fe08:	4288      	cmp	r0, r1
    fe0a:	d024      	beq.n	fe56 <isr+0x1262>
	struct pdu_data *pdu_data_rx;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	rej_ext_ind = (struct pdu_data_llctrl_reject_ext_ind *)
		      &pdu_data_rx->payload.llctrl.ctrldata.reject_ext_ind;
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    fe0c:	7b38      	ldrb	r0, [r7, #12]
    fe0e:	2400      	movs	r4, #0
    fe10:	2814      	cmp	r0, #20
    fe12:	d000      	beq.n	fe16 <isr+0x1222>
    fe14:	e2da      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		struct pdu_data_llctrl_length_req_rsp *lr;

		/* Procedure complete */
		_radio.conn_curr->llcp_length.ack =
    fe16:	7011      	strb	r1, [r2, #0]
			_radio.conn_curr->llcp_length.req;
		_radio.conn_curr->procedure_expire = 0;

		/* Resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    fe18:	2108      	movs	r1, #8
		struct pdu_data_llctrl_length_req_rsp *lr;

		/* Procedure complete */
		_radio.conn_curr->llcp_length.ack =
			_radio.conn_curr->llcp_length.req;
		_radio.conn_curr->procedure_expire = 0;
    fe1a:	876c      	strh	r4, [r5, #58]	; 0x3a

		/* Resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    fe1c:	781a      	ldrb	r2, [r3, #0]
    fe1e:	438a      	bics	r2, r1
    fe20:	701a      	strb	r2, [r3, #0]

		/* prepare length rsp structure */
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    fe22:	2309      	movs	r3, #9
    fe24:	727b      	strb	r3, [r7, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_data_rx->payload.llctrl.opcode =
    fe26:	330c      	adds	r3, #12
    fe28:	72fb      	strb	r3, [r7, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
    fe2a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fe2c:	0a1a      	lsrs	r2, r3, #8
    fe2e:	733b      	strb	r3, [r7, #12]
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
    fe30:	330e      	adds	r3, #14
    fe32:	00db      	lsls	r3, r3, #3
    fe34:	b29b      	uxth	r3, r3
    fe36:	73bb      	strb	r3, [r7, #14]
    fe38:	40cb      	lsrs	r3, r1
		pdu_data_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
    fe3a:	737a      	strb	r2, [r7, #13]
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
    fe3c:	73fb      	strb	r3, [r7, #15]
		lr->max_tx_octets = _radio.conn_curr->max_tx_octets;
    fe3e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    fe40:	0a1a      	lsrs	r2, r3, #8
    fe42:	743b      	strb	r3, [r7, #16]
		lr->max_tx_time = ((_radio.conn_curr->max_tx_octets + 14) << 3);
    fe44:	330e      	adds	r3, #14
    fe46:	00db      	lsls	r3, r3, #3
    fe48:	b29b      	uxth	r3, r3
    fe4a:	74bb      	strb	r3, [r7, #18]
    fe4c:	40cb      	lsrs	r3, r1

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = _radio.conn_curr->max_rx_octets;
		lr->max_rx_time = ((_radio.conn_curr->max_rx_octets + 14) << 3);
		lr->max_tx_octets = _radio.conn_curr->max_tx_octets;
    fe4e:	747a      	strb	r2, [r7, #17]
		lr->max_tx_time = ((_radio.conn_curr->max_tx_octets + 14) << 3);
    fe50:	74fb      	strb	r3, [r7, #19]

		/* enqueue a length rsp */
		*rx_enqueue = 1;
    fe52:	3401      	adds	r4, #1
    fe54:	e2ba      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
		   _radio.conn_curr->llcp_phy.req) {
    fe56:	002b      	movs	r3, r5
    fe58:	33bc      	adds	r3, #188	; 0xbc
    fe5a:	781a      	ldrb	r2, [r3, #0]
		isr_rx_conn_pkt_ctrl_rej_dle(radio_pdu_node_rx,
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
    fe5c:	7859      	ldrb	r1, [r3, #1]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    fe5e:	2400      	movs	r4, #0
		isr_rx_conn_pkt_ctrl_rej_dle(radio_pdu_node_rx,
					     rx_enqueue);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	} else if (_radio.conn_curr->llcp_phy.ack !=
    fe60:	3301      	adds	r3, #1
    fe62:	4291      	cmp	r1, r2
    fe64:	d100      	bne.n	fe68 <isr+0x1274>
    fe66:	e2b1      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
	struct pdu_data *pdu_data_rx;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	rej_ext_ind = (struct pdu_data_llctrl_reject_ext_ind *)
		      &pdu_data_rx->payload.llctrl.ctrldata.reject_ext_ind;
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    fe68:	7b39      	ldrb	r1, [r7, #12]
    fe6a:	2916      	cmp	r1, #22
    fe6c:	d000      	beq.n	fe70 <isr+0x127c>
    fe6e:	e2ad      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		if (rej_ext_ind->error_code == 0x23) {
    fe70:	7b79      	ldrb	r1, [r7, #13]
    fe72:	2923      	cmp	r1, #35	; 0x23
    fe74:	d100      	bne.n	fe78 <isr+0x1284>
    fe76:	e2a9      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		} else {
			/* Different Transaction Collision */
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
    fe78:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_phy.req;
			_radio.conn_curr->procedure_expire = 0;

			/* skip event generation is not cmd initiated */
			if (!_radio.conn_curr->llcp_phy.cmd) {
    fe7a:	3302      	adds	r3, #2
    fe7c:	781b      	ldrb	r3, [r3, #0]
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
				_radio.conn_curr->llcp_phy.req;
			_radio.conn_curr->procedure_expire = 0;
    fe7e:	876c      	strh	r4, [r5, #58]	; 0x3a

			/* skip event generation is not cmd initiated */
			if (!_radio.conn_curr->llcp_phy.cmd) {
    fe80:	079b      	lsls	r3, r3, #30
    fe82:	d400      	bmi.n	fe86 <isr+0x1292>
    fe84:	e2a2      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
				return;
			}

			/* generate phy update complete event with error code */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    fe86:	230c      	movs	r3, #12
    fe88:	713b      	strb	r3, [r7, #4]

			p = (struct radio_le_phy_upd_cmplt *)
			    &pdu_data_rx->payload;
			p->status = rej_ext_ind->error_code;
    fe8a:	7b7b      	ldrb	r3, [r7, #13]
    fe8c:	72fb      	strb	r3, [r7, #11]
    fe8e:	e1fb      	b.n	10288 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x289>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fe90:	0030      	movs	r0, r6
    fe92:	30d9      	adds	r0, #217	; 0xd9
    fe94:	30ff      	adds	r0, #255	; 0xff
    fe96:	f7f9 ffe9 	bl	9e6c <mem_acquire>
    fe9a:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
    fe9c:	d105      	bne.n	feaa <isr+0x12b6>
    fe9e:	4b8d      	ldr	r3, [pc, #564]	; (100d4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd5>)
    fea0:	9301      	str	r3, [sp, #4]
    fea2:	4b8e      	ldr	r3, [pc, #568]	; (100dc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdd>)
    fea4:	9300      	str	r3, [sp, #0]
    fea6:	4b92      	ldr	r3, [pc, #584]	; (100f0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf1>)
    fea8:	e260      	b.n	1036c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36d>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    feaa:	2203      	movs	r2, #3
    feac:	7903      	ldrb	r3, [r0, #4]
    feae:	4313      	orrs	r3, r2
    feb0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    feb2:	2301      	movs	r3, #1
    feb4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    feb6:	3312      	adds	r3, #18
    feb8:	71c3      	strb	r3, [r0, #7]
    feba:	e195      	b.n	101e8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1e9>
		ping_resp_send(_radio.conn_curr);
		break;

	case PDU_DATA_LLCTRL_TYPE_PING_RSP:
		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    febc:	876a      	strh	r2, [r5, #58]	; 0x3a
    febe:	e553      	b.n	f968 <isr+0xd74>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		if (_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) {
    fec0:	002a      	movs	r2, r5
    fec2:	3268      	adds	r2, #104	; 0x68
    fec4:	7811      	ldrb	r1, [r2, #0]
    fec6:	7850      	ldrb	r0, [r2, #1]
    fec8:	3201      	adds	r2, #1
    feca:	4288      	cmp	r0, r1
    fecc:	d007      	beq.n	fede <isr+0x12ea>
			/* reset ctrl procedure */
			_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    fece:	7011      	strb	r1, [r2, #0]

			switch (_radio.conn_curr->llcp_type) {
			default:
				LL_ASSERT(0);
    fed0:	4b80      	ldr	r3, [pc, #512]	; (100d4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd5>)
    fed2:	9301      	str	r3, [sp, #4]
    fed4:	4b81      	ldr	r3, [pc, #516]	; (100dc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdd>)
    fed6:	9300      	str	r3, [sp, #0]
    fed8:	4b86      	ldr	r3, [pc, #536]	; (100f4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf5>)
    feda:	f000 fd8f 	bl	109fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9fd>
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
    fede:	002a      	movs	r2, r5
    fee0:	32b4      	adds	r2, #180	; 0xb4
    fee2:	7811      	ldrb	r1, [r2, #0]
    fee4:	7850      	ldrb	r0, [r2, #1]
			   _radio.conn_curr->llcp_length.ack) {
    fee6:	3201      	adds	r2, #1
				LL_ASSERT(0);
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
    fee8:	4288      	cmp	r0, r1
    feea:	d006      	beq.n	fefa <isr+0x1306>
			   _radio.conn_curr->llcp_length.ack) {
			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
    feec:	7011      	strb	r1, [r2, #0]
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    feee:	2108      	movs	r1, #8
    fef0:	781a      	ldrb	r2, [r3, #0]

			/* propagate the data length procedure to
			 * host
			 */
			*rx_enqueue = 1;
    fef2:	2401      	movs	r4, #1
			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    fef4:	438a      	bics	r2, r1
    fef6:	701a      	strb	r2, [r3, #0]
    fef8:	e021      	b.n	ff3e <isr+0x134a>
			 */
			*rx_enqueue = 1;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		} else if (_radio.conn_curr->llcp_phy.req !=
    fefa:	002b      	movs	r3, r5
    fefc:	33bc      	adds	r3, #188	; 0xbc
    fefe:	781a      	ldrb	r2, [r3, #0]
    ff00:	7859      	ldrb	r1, [r3, #1]
			   _radio.conn_curr->llcp_phy.ack) {
    ff02:	3301      	adds	r3, #1
			 */
			*rx_enqueue = 1;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		} else if (_radio.conn_curr->llcp_phy.req !=
    ff04:	4291      	cmp	r1, r2
    ff06:	d016      	beq.n	ff36 <isr+0x1342>
			   _radio.conn_curr->llcp_phy.ack) {
			struct radio_le_phy_upd_cmplt *p;

			/* Procedure complete */
			_radio.conn_curr->llcp_phy.ack =
    ff08:	701a      	strb	r2, [r3, #0]
				_radio.conn_curr->llcp_phy.req;

			/* skip event generation is not cmd initiated */
			if (_radio.conn_curr->llcp_phy.cmd) {
    ff0a:	3302      	adds	r3, #2
    ff0c:	781b      	ldrb	r3, [r3, #0]
    ff0e:	2400      	movs	r4, #0
    ff10:	079b      	lsls	r3, r3, #30
    ff12:	d514      	bpl.n	ff3e <isr+0x134a>
				/* generate phy update complete event */
				radio_pdu_node_rx->hdr.type =
    ff14:	230c      	movs	r3, #12
    ff16:	713b      	strb	r3, [r7, #4]
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
				p->tx = _radio.conn_curr->phy_tx;
    ff18:	002b      	movs	r3, r5
				radio_pdu_node_rx->hdr.type =
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
    ff1a:	72fc      	strb	r4, [r7, #11]
				p->tx = _radio.conn_curr->phy_tx;
    ff1c:	3332      	adds	r3, #50	; 0x32
    ff1e:	781b      	ldrb	r3, [r3, #0]
				p->rx = _radio.conn_curr->phy_rx;

				/* enqueue the phy update complete */
				*rx_enqueue = 1;
    ff20:	3401      	adds	r4, #1
					NODE_RX_TYPE_PHY_UPDATE;

				p = (struct radio_le_phy_upd_cmplt *)
				    &pdu_data_rx->payload;
				p->status = 0;
				p->tx = _radio.conn_curr->phy_tx;
    ff22:	069b      	lsls	r3, r3, #26
    ff24:	0f5b      	lsrs	r3, r3, #29
    ff26:	733b      	strb	r3, [r7, #12]
				p->rx = _radio.conn_curr->phy_rx;
    ff28:	002b      	movs	r3, r5
    ff2a:	3333      	adds	r3, #51	; 0x33
    ff2c:	781b      	ldrb	r3, [r3, #0]
    ff2e:	069b      	lsls	r3, r3, #26
    ff30:	0f5b      	lsrs	r3, r3, #29
    ff32:	737b      	strb	r3, [r7, #13]
    ff34:	e003      	b.n	ff3e <isr+0x134a>
		} else {
			struct pdu_data_llctrl *llctrl;

			llctrl = (struct pdu_data_llctrl *)
				&pdu_data_rx->payload.llctrl;
			switch (llctrl->ctrldata.unknown_rsp.type) {
    ff36:	7b3c      	ldrb	r4, [r7, #12]
				break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			default:
				/* enqueue the error and let HCI handle it */
				*rx_enqueue = 1;
    ff38:	3c12      	subs	r4, #18
    ff3a:	1e63      	subs	r3, r4, #1
    ff3c:	419c      	sbcs	r4, r3
				break;
			}
		}

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    ff3e:	2300      	movs	r3, #0
    ff40:	876b      	strh	r3, [r5, #58]	; 0x3a
    ff42:	e243      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    ff44:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    ff46:	930a      	str	r3, [sp, #40]	; 0x28
	eff_tx_octets = _radio.conn_curr->max_tx_octets;

	if (/* Local idle, and Peer request then complete the Peer procedure
	     * with response.
	     */
	    ((_radio.conn_curr->llcp_length.req ==
    ff48:	002b      	movs	r3, r5
    ff4a:	33b4      	adds	r3, #180	; 0xb4
    ff4c:	7819      	ldrb	r1, [r3, #0]
	      _radio.conn_curr->llcp_length.ack) &&
    ff4e:	3301      	adds	r3, #1
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
	eff_tx_octets = _radio.conn_curr->max_tx_octets;

	if (/* Local idle, and Peer request then complete the Peer procedure
    ff50:	781b      	ldrb	r3, [r3, #0]
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    ff52:	8dee      	ldrh	r6, [r5, #46]	; 0x2e

	if (/* Local idle, and Peer request then complete the Peer procedure
    ff54:	428b      	cmp	r3, r1
    ff56:	d008      	beq.n	ff6a <isr+0x1376>
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
	     /* with Local requested and Peer request then complete the
	      * Peer procedure with response.
	      */
	     ((((_radio.conn_curr->llcp_length.state ==
    ff58:	002b      	movs	r3, r5
    ff5a:	33b6      	adds	r3, #182	; 0xb6
		 LLCP_LENGTH_STATE_REQ) ||
    ff5c:	781a      	ldrb	r2, [r3, #0]
    ff5e:	2303      	movs	r3, #3
    ff60:	4013      	ands	r3, r2
	      _radio.conn_curr->llcp_length.ack) &&
	     (pdu_data_rx->payload.llctrl.opcode ==
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
	    /* or Local has active... */
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
    ff62:	2b01      	cmp	r3, #1
    ff64:	d901      	bls.n	ff6a <isr+0x1376>
    ff66:	f000 fd51 	bl	10a0c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa0d>
	      * Peer procedure with response.
	      */
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
		(_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
    ff6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ff6c:	2b14      	cmp	r3, #20
    ff6e:	d170      	bne.n	10052 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x53>
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;

		/* use the minimal of our default_tx_octets and
		 * peer max_rx_octets
		 */
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    ff70:	7b7b      	ldrb	r3, [r7, #13]
    ff72:	7b3a      	ldrb	r2, [r7, #12]
    ff74:	021b      	lsls	r3, r3, #8
    ff76:	4313      	orrs	r3, r2
    ff78:	2b1a      	cmp	r3, #26
    ff7a:	d905      	bls.n	ff88 <isr+0x1394>
			eff_tx_octets = min(lr->max_rx_octets,
    ff7c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    ff7e:	1c16      	adds	r6, r2, #0
    ff80:	429a      	cmp	r2, r3
    ff82:	d900      	bls.n	ff86 <isr+0x1392>
    ff84:	1c1e      	adds	r6, r3, #0
    ff86:	b2b6      	uxth	r6, r6
		}

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    ff88:	7c7b      	ldrb	r3, [r7, #17]
    ff8a:	7c3a      	ldrb	r2, [r7, #16]
    ff8c:	021b      	lsls	r3, r3, #8
    ff8e:	4313      	orrs	r3, r2
    ff90:	2b1a      	cmp	r3, #26
    ff92:	d937      	bls.n	10004 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5>
			eff_rx_octets = min(lr->max_tx_octets,
					    RADIO_LL_LENGTH_OCTETS_RX_MAX);
		}

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    ff94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ff96:	2b1b      	cmp	r3, #27
    ff98:	d034      	beq.n	10004 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5>
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    ff9a:	f7fb fbc5 	bl	b728 <packet_rx_acquired_count_get>
				+ mem_free_count_get(_radio.pkt_rx_data_free);
    ff9e:	23d6      	movs	r3, #214	; 0xd6
    ffa0:	4d55      	ldr	r5, [pc, #340]	; (100f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf9>)
    ffa2:	005b      	lsls	r3, r3, #1

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    ffa4:	0004      	movs	r4, r0
				+ mem_free_count_get(_radio.pkt_rx_data_free);
    ffa6:	58e8      	ldr	r0, [r5, r3]
    ffa8:	f7f9 ff8f 	bl	9eca <mem_free_count_get>

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
			u16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    ffac:	1904      	adds	r4, r0, r4
    ffae:	b2a0      	uxth	r0, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
			LL_ASSERT(free_count_rx <= 0xFF);
    ffb0:	28ff      	cmp	r0, #255	; 0xff
    ffb2:	d909      	bls.n	ffc8 <isr+0x13d4>
    ffb4:	4b47      	ldr	r3, [pc, #284]	; (100d4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd5>)
    ffb6:	4a48      	ldr	r2, [pc, #288]	; (100d8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd9>)
    ffb8:	9301      	str	r3, [sp, #4]
    ffba:	4b48      	ldr	r3, [pc, #288]	; (100dc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdd>)
    ffbc:	4948      	ldr	r1, [pc, #288]	; (100e0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xe1>)
    ffbe:	9300      	str	r3, [sp, #0]
    ffc0:	484e      	ldr	r0, [pc, #312]	; (100fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xfd>)
    ffc2:	4b4f      	ldr	r3, [pc, #316]	; (10100 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x101>)
    ffc4:	f000 fd1d 	bl	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>

			if (_radio.packet_rx_data_count == free_count_rx) {
    ffc8:	23db      	movs	r3, #219	; 0xdb
    ffca:	005b      	lsls	r3, r3, #1
    ffcc:	5ceb      	ldrb	r3, [r5, r3]
    ffce:	4283      	cmp	r3, r0
    ffd0:	d142      	bne.n	10058 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x59>

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    ffd2:	23c8      	movs	r3, #200	; 0xc8
    ffd4:	005b      	lsls	r3, r3, #1
    ffd6:	58eb      	ldr	r3, [r5, r3]

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    ffd8:	201b      	movs	r0, #27
    ffda:	001a      	movs	r2, r3
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
    ffdc:	0019      	movs	r1, r3
				_radio.conn_curr->max_tx_octets = eff_tx_octets;

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    ffde:	32b8      	adds	r2, #184	; 0xb8
			LL_ASSERT(free_count_rx <= 0xFF);

			if (_radio.packet_rx_data_count == free_count_rx) {

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    ffe0:	85de      	strh	r6, [r3, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
    ffe2:	3a04      	subs	r2, #4
				_radio.conn_curr->max_tx_octets = eff_tx_octets;

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    ffe4:	8090      	strh	r0, [r2, #4]
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
    ffe6:	80d6      	strh	r6, [r2, #6]
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
    ffe8:	7812      	ldrb	r2, [r2, #0]
    ffea:	31b5      	adds	r1, #181	; 0xb5
    ffec:	3a01      	subs	r2, #1
    ffee:	700a      	strb	r2, [r1, #0]
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    fff0:	2103      	movs	r1, #3
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
    fff2:	2400      	movs	r4, #0
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    fff4:	33b6      	adds	r3, #182	; 0xb6
    fff6:	781a      	ldrb	r2, [r3, #0]
					LLCP_LENGTH_STATE_RESIZE;

				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
    fff8:	7429      	strb	r1, [r5, #16]
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    fffa:	430a      	orrs	r2, r1
    fffc:	701a      	strb	r2, [r3, #0]

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
			eff_rx_octets = min(lr->max_tx_octets,
    fffe:	900a      	str	r0, [sp, #40]	; 0x28
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
   10000:	0023      	movs	r3, r4
   10002:	e02d      	b.n	10060 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x61>
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
   10004:	002a      	movs	r2, r5
   10006:	2008      	movs	r0, #8
   10008:	32c0      	adds	r2, #192	; 0xc0
   1000a:	7813      	ldrb	r3, [r2, #0]
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);

			/* Enqueue data length change event (with no change in
			 * rx length happened), safe to enqueue rx.
			 */
			*rx_enqueue = 1;
   1000c:	2401      	movs	r4, #1
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
   1000e:	4383      	bics	r3, r0
   10010:	7013      	strb	r3, [r2, #0]

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
   10012:	002b      	movs	r3, r5
   10014:	33b5      	adds	r3, #181	; 0xb5
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   10016:	85ee      	strh	r6, [r5, #46]	; 0x2e
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
   10018:	466a      	mov	r2, sp

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
   1001a:	7019      	strb	r1, [r3, #0]
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
   1001c:	2128      	movs	r1, #40	; 0x28
			_radio.conn_curr->max_tx_octets = eff_tx_octets;

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;
   1001e:	2300      	movs	r3, #0

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
   10020:	1852      	adds	r2, r2, r1
   10022:	7812      	ldrb	r2, [r2, #0]
			_radio.conn_curr->max_tx_octets = eff_tx_octets;

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;
   10024:	876b      	strh	r3, [r5, #58]	; 0x3a

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
   10026:	733a      	strb	r2, [r7, #12]
   10028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
			lr->max_tx_octets = eff_tx_octets;
   1002a:	743e      	strb	r6, [r7, #16]
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
   1002c:	40c2      	lsrs	r2, r0
   1002e:	737a      	strb	r2, [r7, #13]
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
   10030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10032:	320e      	adds	r2, #14
   10034:	00d2      	lsls	r2, r2, #3
   10036:	b292      	uxth	r2, r2
   10038:	73ba      	strb	r2, [r7, #14]
   1003a:	40c2      	lsrs	r2, r0
   1003c:	73fa      	strb	r2, [r7, #15]
			lr->max_tx_octets = eff_tx_octets;
   1003e:	0a32      	lsrs	r2, r6, #8
   10040:	747a      	strb	r2, [r7, #17]
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);
   10042:	0032      	movs	r2, r6
   10044:	320e      	adds	r2, #14
   10046:	00d2      	lsls	r2, r2, #3
   10048:	b292      	uxth	r2, r2
   1004a:	74ba      	strb	r2, [r7, #18]
   1004c:	40c2      	lsrs	r2, r0
   1004e:	74fa      	strb	r2, [r7, #19]
   10050:	e006      	b.n	10060 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x61>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10052:	2400      	movs	r4, #0
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
   10054:	0023      	movs	r3, r4
   10056:	e003      	b.n	10060 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x61>

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
			eff_rx_octets = min(lr->max_tx_octets,
   10058:	221b      	movs	r2, #27
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   1005a:	2400      	movs	r4, #0
				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
			} else {
				nack = 1;
   1005c:	2301      	movs	r3, #1

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
			eff_rx_octets = min(lr->max_tx_octets,
   1005e:	920a      	str	r2, [sp, #40]	; 0x28
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   10060:	7afa      	ldrb	r2, [r7, #11]
   10062:	2a14      	cmp	r2, #20
   10064:	d000      	beq.n	10068 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x69>
   10066:	e1ae      	b.n	103c6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3c7>
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
	u8_t crc_close = 0;
   10068:	2500      	movs	r5, #0
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
			  PDU_DATA_LLCTRL_TYPE_LENGTH_RSP);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   1006a:	42ab      	cmp	r3, r5
   1006c:	d000      	beq.n	10070 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x71>
   1006e:	e1fc      	b.n	1046a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x46b>
		length_resp_send(_radio.conn_curr, eff_rx_octets,
   10070:	23c8      	movs	r3, #200	; 0xc8
   10072:	4821      	ldr	r0, [pc, #132]	; (100f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xf9>)
   10074:	005b      	lsls	r3, r3, #1
   10076:	58c5      	ldr	r5, [r0, r3]
			     u16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10078:	30d9      	adds	r0, #217	; 0xd9
   1007a:	30ff      	adds	r0, #255	; 0xff
   1007c:	f7f9 fef6 	bl	9e6c <mem_acquire>
   10080:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
   10082:	d105      	bne.n	10090 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x91>
   10084:	4b13      	ldr	r3, [pc, #76]	; (100d4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xd5>)
   10086:	9301      	str	r3, [sp, #4]
   10088:	4b14      	ldr	r3, [pc, #80]	; (100dc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xdd>)
   1008a:	9300      	str	r3, [sp, #0]
   1008c:	4b1d      	ldr	r3, [pc, #116]	; (10104 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x105>)
   1008e:	e16d      	b.n	1036c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36d>

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10090:	2203      	movs	r2, #3
   10092:	7903      	ldrb	r3, [r0, #4]
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   10094:	7306      	strb	r6, [r0, #12]

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10096:	4313      	orrs	r3, r2
   10098:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1009a:	2309      	movs	r3, #9
   1009c:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
   1009e:	330c      	adds	r3, #12
   100a0:	71c3      	strb	r3, [r0, #7]
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   100a2:	466b      	mov	r3, sp
   100a4:	3225      	adds	r2, #37	; 0x25
   100a6:	189b      	adds	r3, r3, r2
   100a8:	781b      	ldrb	r3, [r3, #0]
   100aa:	7203      	strb	r3, [r0, #8]
   100ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   100ae:	0a1b      	lsrs	r3, r3, #8
   100b0:	7243      	strb	r3, [r0, #9]
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   100b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   100b4:	330e      	adds	r3, #14
   100b6:	00db      	lsls	r3, r3, #3
   100b8:	b29b      	uxth	r3, r3
   100ba:	7283      	strb	r3, [r0, #10]
   100bc:	0a1b      	lsrs	r3, r3, #8
   100be:	72c3      	strb	r3, [r0, #11]
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   100c0:	0a33      	lsrs	r3, r6, #8
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   100c2:	360e      	adds	r6, #14
   100c4:	00f6      	lsls	r6, r6, #3
   100c6:	b2b6      	uxth	r6, r6
   100c8:	7386      	strb	r6, [r0, #14]
   100ca:	0a36      	lsrs	r6, r6, #8
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   100cc:	7343      	strb	r3, [r0, #13]
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   100ce:	73c6      	strb	r6, [r0, #15]
   100d0:	e15d      	b.n	1038e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x38f>
   100d2:	46c0      	nop			; (mov r8, r8)
   100d4:	000145b0 	.word	0x000145b0
   100d8:	00014570 	.word	0x00014570
   100dc:	000145b5 	.word	0x000145b5
   100e0:	00014577 	.word	0x00014577
   100e4:	000162ec 	.word	0x000162ec
   100e8:	00016f65 	.word	0x00016f65
   100ec:	00016ee8 	.word	0x00016ee8
   100f0:	000170da 	.word	0x000170da
   100f4:	0001722a 	.word	0x0001722a
   100f8:	20001254 	.word	0x20001254
   100fc:	0001607e 	.word	0x0001607e
   10100:	000167bd 	.word	0x000167bd
   10104:	000170fa 	.word	0x000170fa
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (_radio.role == ROLE_MASTER) {
   10108:	7bf3      	ldrb	r3, [r6, #15]
   1010a:	2b04      	cmp	r3, #4
   1010c:	d14c      	bne.n	101a8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1a9>
			if ((_radio.conn_curr->llcp_phy.ack !=
   1010e:	002b      	movs	r3, r5
   10110:	33bd      	adds	r3, #189	; 0xbd
   10112:	781a      	ldrb	r2, [r3, #0]
			     _radio.conn_curr->llcp_phy.req) &&
   10114:	3b01      	subs	r3, #1
   10116:	7819      	ldrb	r1, [r3, #0]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (_radio.role == ROLE_MASTER) {
			if ((_radio.conn_curr->llcp_phy.ack !=
   10118:	428a      	cmp	r2, r1
   1011a:	d00b      	beq.n	10134 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x135>
			     _radio.conn_curr->llcp_phy.req) &&
   1011c:	7898      	ldrb	r0, [r3, #2]
   1011e:	2303      	movs	r3, #3
   10120:	4003      	ands	r3, r0
   10122:	3b01      	subs	r3, #1
   10124:	2b02      	cmp	r3, #2
   10126:	d805      	bhi.n	10134 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x135>
			     (_radio.conn_curr->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
			     (_radio.conn_curr->llcp_phy.state ==
			      LLCP_PHY_STATE_UPD))) {
				/* cross-over */
				reject_ind_ext_send(_radio.conn_curr,
   10128:	2223      	movs	r2, #35	; 0x23
   1012a:	2116      	movs	r1, #22
   1012c:	0028      	movs	r0, r5
   1012e:	f7fd fbab 	bl	d888 <reject_ind_ext_send>
   10132:	e419      	b.n	f968 <isr+0xd74>
				struct pdu_data_llctrl *c =
					&pdu_data_rx->payload.llctrl;
				struct pdu_data_llctrl_phy_req_rsp *p =
					&c->ctrldata.phy_req;

				_radio.conn_curr->llcp_phy.state =
   10134:	002b      	movs	r3, r5
   10136:	2403      	movs	r4, #3
   10138:	33be      	adds	r3, #190	; 0xbe
   1013a:	7818      	ldrb	r0, [r3, #0]
   1013c:	4320      	orrs	r0, r4
   1013e:	7018      	strb	r0, [r3, #0]
					LLCP_PHY_STATE_UPD;

				if (_radio.conn_curr->llcp_phy.ack ==
   10140:	428a      	cmp	r2, r1
   10142:	d11c      	bne.n	1017e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x17f>
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;
   10144:	0029      	movs	r1, r5
   10146:	3a01      	subs	r2, #1
   10148:	31bd      	adds	r1, #189	; 0xbd
   1014a:	700a      	strb	r2, [r1, #0]

					_radio.conn_curr->llcp_phy.cmd = 0;
   1014c:	2102      	movs	r1, #2
   1014e:	785a      	ldrb	r2, [r3, #1]

					_radio.conn_curr->llcp_phy.tx =
   10150:	201c      	movs	r0, #28

				if (_radio.conn_curr->llcp_phy.ack ==
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;

					_radio.conn_curr->llcp_phy.cmd = 0;
   10152:	438a      	bics	r2, r1
   10154:	705a      	strb	r2, [r3, #1]

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
   10156:	002a      	movs	r2, r5
   10158:	3232      	adds	r2, #50	; 0x32
   1015a:	7811      	ldrb	r1, [r2, #0]
				    _radio.conn_curr->llcp_phy.req) {
					_radio.conn_curr->llcp_phy.ack--;

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
   1015c:	2207      	movs	r2, #7
   1015e:	400a      	ands	r2, r1
   10160:	0091      	lsls	r1, r2, #2
   10162:	781a      	ldrb	r2, [r3, #0]
   10164:	4382      	bics	r2, r0
   10166:	430a      	orrs	r2, r1
   10168:	701a      	strb	r2, [r3, #0]
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
						_radio.conn_curr->phy_pref_rx;
   1016a:	002a      	movs	r2, r5
   1016c:	3233      	adds	r2, #51	; 0x33
   1016e:	7812      	ldrb	r2, [r2, #0]

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
   10170:	7818      	ldrb	r0, [r3, #0]
						_radio.conn_curr->phy_pref_rx;
   10172:	0752      	lsls	r2, r2, #29

					_radio.conn_curr->llcp_phy.cmd = 0;

					_radio.conn_curr->llcp_phy.tx =
						_radio.conn_curr->phy_pref_tx;
					_radio.conn_curr->llcp_phy.rx =
   10174:	0e11      	lsrs	r1, r2, #24
   10176:	221f      	movs	r2, #31
   10178:	4002      	ands	r2, r0
   1017a:	430a      	orrs	r2, r1
   1017c:	701a      	strb	r2, [r3, #0]
						_radio.conn_curr->phy_pref_rx;
				}

				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1017e:	35be      	adds	r5, #190	; 0xbe
   10180:	7829      	ldrb	r1, [r5, #0]
   10182:	7b7b      	ldrb	r3, [r7, #13]
   10184:	06ca      	lsls	r2, r1, #27
   10186:	0f52      	lsrs	r2, r2, #29
   10188:	4013      	ands	r3, r2
   1018a:	009a      	lsls	r2, r3, #2
   1018c:	231c      	movs	r3, #28
   1018e:	4399      	bics	r1, r3
   10190:	000b      	movs	r3, r1
   10192:	4313      	orrs	r3, r2
   10194:	702b      	strb	r3, [r5, #0]
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   10196:	7b39      	ldrb	r1, [r7, #12]
   10198:	095a      	lsrs	r2, r3, #5
   1019a:	400a      	ands	r2, r1
   1019c:	211f      	movs	r1, #31
   1019e:	0152      	lsls	r2, r2, #5
   101a0:	400b      	ands	r3, r1
   101a2:	4313      	orrs	r3, r2
   101a4:	f000 fc48 	bl	10a38 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa39>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   101a8:	0030      	movs	r0, r6
   101aa:	30d9      	adds	r0, #217	; 0xd9
   101ac:	30ff      	adds	r0, #255	; 0xff
   101ae:	f7f9 fe5d 	bl	9e6c <mem_acquire>
   101b2:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
   101b4:	d105      	bne.n	101c2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1c3>
   101b6:	4bca      	ldr	r3, [pc, #808]	; (104e0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4e1>)
   101b8:	9301      	str	r3, [sp, #4]
   101ba:	4bca      	ldr	r3, [pc, #808]	; (104e4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4e5>)
   101bc:	9300      	str	r3, [sp, #0]
   101be:	4bca      	ldr	r3, [pc, #808]	; (104e8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4e9>)
   101c0:	e0d4      	b.n	1036c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x36d>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   101c2:	2203      	movs	r2, #3
   101c4:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   101c6:	7142      	strb	r2, [r0, #5]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   101c8:	4313      	orrs	r3, r2
   101ca:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   101cc:	2317      	movs	r3, #23
   101ce:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
		conn->phy_pref_tx;
   101d0:	002b      	movs	r3, r5
   101d2:	3332      	adds	r3, #50	; 0x32
   101d4:	781b      	ldrb	r3, [r3, #0]
   101d6:	075b      	lsls	r3, r3, #29
   101d8:	0f5b      	lsrs	r3, r3, #29
	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   101da:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_tx;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
		conn->phy_pref_rx;
   101dc:	002b      	movs	r3, r5
   101de:	3333      	adds	r3, #51	; 0x33
   101e0:	781b      	ldrb	r3, [r3, #0]
   101e2:	075b      	lsls	r3, r3, #29
   101e4:	0f5b      	lsrs	r3, r3, #29
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			   sizeof(struct pdu_data_llctrl_phy_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
		conn->phy_pref_tx;
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   101e6:	7243      	strb	r3, [r0, #9]
		conn->phy_pref_rx;

	ctrl_tx_enqueue(conn, node_tx);
   101e8:	0028      	movs	r0, r5
   101ea:	f7fd faab 	bl	d744 <ctrl_tx_enqueue>
   101ee:	f7ff fbbb 	bl	f968 <isr+0xd74>
			phy_rsp_send(_radio.conn_curr);
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
   101f2:	7bf3      	ldrb	r3, [r6, #15]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   101f4:	2400      	movs	r4, #0
			phy_rsp_send(_radio.conn_curr);
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
   101f6:	2b04      	cmp	r3, #4
   101f8:	d000      	beq.n	101fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x1fd>
   101fa:	e0e7      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
   101fc:	002b      	movs	r3, r5
   101fe:	33bd      	adds	r3, #189	; 0xbd
   10200:	781a      	ldrb	r2, [r3, #0]
   10202:	3b01      	subs	r3, #1
   10204:	781b      	ldrb	r3, [r3, #0]
   10206:	429a      	cmp	r2, r3
   10208:	d100      	bne.n	1020c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x20d>
   1020a:	e0df      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		    (_radio.conn_curr->llcp_phy.ack !=
		     _radio.conn_curr->llcp_phy.req) &&
		    (_radio.conn_curr->llcp_phy.state ==
   1020c:	0029      	movs	r1, r5
   1020e:	31be      	adds	r1, #190	; 0xbe
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_RSP:
		if ((_radio.role == ROLE_MASTER) &&
		    (_radio.conn_curr->llcp_phy.ack !=
		     _radio.conn_curr->llcp_phy.req) &&
   10210:	780b      	ldrb	r3, [r1, #0]
   10212:	2003      	movs	r0, #3
   10214:	001a      	movs	r2, r3
   10216:	4002      	ands	r2, r0
   10218:	2a02      	cmp	r2, #2
   1021a:	d000      	beq.n	1021e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x21f>
   1021c:	e0d6      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		    (_radio.conn_curr->llcp_phy.state ==
		     LLCP_PHY_STATE_RSP_WAIT)) {
			struct pdu_data_llctrl_phy_req_rsp *p =
				&pdu_data_rx->payload.llctrl.ctrldata.phy_rsp;

			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1021e:	4318      	orrs	r0, r3
   10220:	7008      	strb	r0, [r1, #0]

			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   10222:	7b7b      	ldrb	r3, [r7, #13]
   10224:	06c2      	lsls	r2, r0, #27
   10226:	0f52      	lsrs	r2, r2, #29
   10228:	401a      	ands	r2, r3
   1022a:	231c      	movs	r3, #28
   1022c:	4398      	bics	r0, r3
   1022e:	0003      	movs	r3, r0
   10230:	0092      	lsls	r2, r2, #2
   10232:	4313      	orrs	r3, r2
   10234:	700b      	strb	r3, [r1, #0]
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   10236:	7b38      	ldrb	r0, [r7, #12]
   10238:	095a      	lsrs	r2, r3, #5
   1023a:	4002      	ands	r2, r0
   1023c:	201f      	movs	r0, #31
   1023e:	0152      	lsls	r2, r2, #5
   10240:	4003      	ands	r3, r0
   10242:	4313      	orrs	r3, r2
   10244:	700b      	strb	r3, [r1, #0]

			/* Procedure timeout is stopped */
			_radio.conn_curr->procedure_expire = 0;
   10246:	876c      	strh	r4, [r5, #58]	; 0x3a
   10248:	e0c0      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	p = &pdu_data_rx->payload.llctrl.ctrldata.phy_upd_ind;

	/* Both tx and rx PHY unchanged */
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   1024a:	7b3a      	ldrb	r2, [r7, #12]
   1024c:	7b7b      	ldrb	r3, [r7, #13]
   1024e:	4313      	orrs	r3, r2
   10250:	2207      	movs	r2, #7
   10252:	4013      	ands	r3, r2
   10254:	d124      	bne.n	102a0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2a1>
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   10256:	002a      	movs	r2, r5
   10258:	0029      	movs	r1, r5
   1025a:	32bc      	adds	r2, #188	; 0xbc
   1025c:	31bd      	adds	r1, #189	; 0xbd
   1025e:	7810      	ldrb	r0, [r2, #0]
   10260:	780a      	ldrb	r2, [r1, #0]
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10262:	001c      	movs	r4, r3
	/* Both tx and rx PHY unchanged */
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   10264:	4282      	cmp	r2, r0
   10266:	d100      	bne.n	1026a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x26b>
   10268:	e0b0      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT) ||
   1026a:	002a      	movs	r2, r5
   1026c:	32be      	adds	r2, #190	; 0xbe
   1026e:	8814      	ldrh	r4, [r2, #0]
   10270:	4e9e      	ldr	r6, [pc, #632]	; (104ec <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4ed>)
   10272:	4a9f      	ldr	r2, [pc, #636]	; (104f0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4f1>)
   10274:	4022      	ands	r2, r4
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10276:	001c      	movs	r4, r3
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
		struct radio_le_phy_upd_cmplt *p;

		/* Ignore event generation if not local cmd initiated */
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT) ||
   10278:	42b2      	cmp	r2, r6
   1027a:	d000      	beq.n	1027e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x27f>
   1027c:	e0a6      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
		    (!conn->llcp_phy.cmd)) {
			return 0;
		}

		/* Procedure complete */
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1027e:	7008      	strb	r0, [r1, #0]
		conn->procedure_expire = 0;
   10280:	876b      	strh	r3, [r5, #58]	; 0x3a

		/* generate phy update complete event */
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10282:	330c      	adds	r3, #12
   10284:	713b      	strb	r3, [r7, #4]

		p = (struct radio_le_phy_upd_cmplt *)&pdu_data_rx->payload;
		p->status = 0;
   10286:	72fc      	strb	r4, [r7, #11]
		p->tx = conn->phy_tx;
   10288:	002b      	movs	r3, r5
   1028a:	3332      	adds	r3, #50	; 0x32
   1028c:	781b      	ldrb	r3, [r3, #0]
		p->rx = conn->phy_rx;
   1028e:	3533      	adds	r5, #51	; 0x33
		/* generate phy update complete event */
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;

		p = (struct radio_le_phy_upd_cmplt *)&pdu_data_rx->payload;
		p->status = 0;
		p->tx = conn->phy_tx;
   10290:	069b      	lsls	r3, r3, #26
   10292:	0f5b      	lsrs	r3, r3, #29
   10294:	733b      	strb	r3, [r7, #12]
		p->rx = conn->phy_rx;
   10296:	782b      	ldrb	r3, [r5, #0]
   10298:	069b      	lsls	r3, r3, #26
   1029a:	0f5b      	lsrs	r3, r3, #29
   1029c:	737b      	strb	r3, [r7, #13]
   1029e:	e5d8      	b.n	fe52 <isr+0x125e>

		return 0;
	}

	/* instant passed */
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   102a0:	7bfb      	ldrb	r3, [r7, #15]
   102a2:	7bba      	ldrb	r2, [r7, #14]
   102a4:	021b      	lsls	r3, r3, #8
   102a6:	4313      	orrs	r3, r2
   102a8:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   102aa:	1a9b      	subs	r3, r3, r2
   102ac:	4a91      	ldr	r2, [pc, #580]	; (104f4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4f5>)
   102ae:	b29b      	uxth	r3, r3
   102b0:	4293      	cmp	r3, r2
   102b2:	dd00      	ble.n	102b6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2b7>
   102b4:	e3be      	b.n	10a34 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa35>
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   102b6:	002b      	movs	r3, r5
   102b8:	3368      	adds	r3, #104	; 0x68
   102ba:	7819      	ldrb	r1, [r3, #0]
   102bc:	3301      	adds	r3, #1
   102be:	781b      	ldrb	r3, [r3, #0]
   102c0:	428b      	cmp	r3, r1
   102c2:	d008      	beq.n	102d6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x2d7>
   102c4:	4b86      	ldr	r3, [pc, #536]	; (104e0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4e1>)
   102c6:	9301      	str	r3, [sp, #4]
   102c8:	4b86      	ldr	r3, [pc, #536]	; (104e4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4e5>)
   102ca:	9300      	str	r3, [sp, #0]
   102cc:	4b8a      	ldr	r3, [pc, #552]	; (104f8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4f9>)
   102ce:	4a8b      	ldr	r2, [pc, #556]	; (104fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4fd>)
   102d0:	498b      	ldr	r1, [pc, #556]	; (10500 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x501>)
   102d2:	488c      	ldr	r0, [pc, #560]	; (10504 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x505>)
   102d4:	e395      	b.n	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   102d6:	002b      	movs	r3, r5
   102d8:	33bc      	adds	r3, #188	; 0xbc
   102da:	781a      	ldrb	r2, [r3, #0]
   102dc:	7858      	ldrb	r0, [r3, #1]
   102de:	3301      	adds	r3, #1
   102e0:	4290      	cmp	r0, r2
   102e2:	d012      	beq.n	1030a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x30b>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   102e4:	0028      	movs	r0, r5
   102e6:	30be      	adds	r0, #190	; 0xbe
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   102e8:	7804      	ldrb	r4, [r0, #0]
   102ea:	2003      	movs	r0, #3
   102ec:	4004      	ands	r4, r0
   102ee:	2c02      	cmp	r4, #2
   102f0:	d10b      	bne.n	1030a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x30b>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
		conn->llcp_phy.ack = conn->llcp_phy.req;
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   102f2:	0028      	movs	r0, r5

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
		conn->llcp_phy.ack = conn->llcp_phy.req;
   102f4:	701a      	strb	r2, [r3, #0]
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   102f6:	789a      	ldrb	r2, [r3, #2]
   102f8:	2302      	movs	r3, #2
   102fa:	306c      	adds	r0, #108	; 0x6c
   102fc:	4013      	ands	r3, r2
   102fe:	7802      	ldrb	r2, [r0, #0]
   10300:	43a2      	bics	r2, r4
   10302:	4313      	orrs	r3, r2
   10304:	7003      	strb	r3, [r0, #0]

		/* Procedure complete, just wait for instant */
		conn->procedure_expire = 0;
   10306:	2300      	movs	r3, #0
   10308:	876b      	strh	r3, [r5, #58]	; 0x3a
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   1030a:	002a      	movs	r2, r5
   1030c:	2407      	movs	r4, #7
   1030e:	261c      	movs	r6, #28
   10310:	7b7b      	ldrb	r3, [r7, #13]
   10312:	326c      	adds	r2, #108	; 0x6c
   10314:	7810      	ldrb	r0, [r2, #0]
   10316:	4023      	ands	r3, r4
   10318:	43b0      	bics	r0, r6
   1031a:	009b      	lsls	r3, r3, #2
   1031c:	4303      	orrs	r3, r0
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   1031e:	201f      	movs	r0, #31

		/* Procedure complete, just wait for instant */
		conn->procedure_expire = 0;
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   10320:	7013      	strb	r3, [r2, #0]
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   10322:	7b3b      	ldrb	r3, [r7, #12]
   10324:	7816      	ldrb	r6, [r2, #0]
   10326:	015b      	lsls	r3, r3, #5
   10328:	4030      	ands	r0, r6
   1032a:	4303      	orrs	r3, r0
   1032c:	7013      	strb	r3, [r2, #0]
	conn->llcp.phy_upd_ind.instant = p->instant;
   1032e:	7bfb      	ldrb	r3, [r7, #15]
   10330:	7bb8      	ldrb	r0, [r7, #14]
   10332:	021b      	lsls	r3, r3, #8
   10334:	4303      	orrs	r3, r0
   10336:	0028      	movs	r0, r5
   10338:	306e      	adds	r0, #110	; 0x6e
   1033a:	8003      	strh	r3, [r0, #0]
	conn->llcp.phy_upd_ind.initiate = 0;
   1033c:	2001      	movs	r0, #1
   1033e:	7813      	ldrb	r3, [r2, #0]

	conn->llcp_type = LLCP_PHY_UPD;
	conn->llcp_ack--;
   10340:	3901      	subs	r1, #1
	}

	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
	conn->llcp.phy_upd_ind.instant = p->instant;
	conn->llcp.phy_upd_ind.initiate = 0;
   10342:	4383      	bics	r3, r0
   10344:	7013      	strb	r3, [r2, #0]

	conn->llcp_type = LLCP_PHY_UPD;
   10346:	002b      	movs	r3, r5
	conn->llcp_ack--;
   10348:	3569      	adds	r5, #105	; 0x69
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
	conn->llcp.phy_upd_ind.instant = p->instant;
	conn->llcp.phy_upd_ind.initiate = 0;

	conn->llcp_type = LLCP_PHY_UPD;
   1034a:	336a      	adds	r3, #106	; 0x6a
   1034c:	701c      	strb	r4, [r3, #0]
	conn->llcp_ack--;
   1034e:	7029      	strb	r1, [r5, #0]
   10350:	f7ff fb0a 	bl	f968 <isr+0xd74>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10354:	0030      	movs	r0, r6
   10356:	30d9      	adds	r0, #217	; 0xd9
   10358:	30ff      	adds	r0, #255	; 0xff
   1035a:	f7f9 fd87 	bl	9e6c <mem_acquire>
   1035e:	1e01      	subs	r1, r0, #0
	LL_ASSERT(node_tx);
   10360:	d108      	bne.n	10374 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x375>
   10362:	4b5f      	ldr	r3, [pc, #380]	; (104e0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4e1>)
   10364:	9301      	str	r3, [sp, #4]
   10366:	4b5f      	ldr	r3, [pc, #380]	; (104e4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4e5>)
   10368:	9300      	str	r3, [sp, #0]
   1036a:	4b67      	ldr	r3, [pc, #412]	; (10508 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x509>)
   1036c:	4a63      	ldr	r2, [pc, #396]	; (104fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4fd>)
   1036e:	4964      	ldr	r1, [pc, #400]	; (10500 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x501>)
   10370:	4866      	ldr	r0, [pc, #408]	; (1050c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x50d>)
   10372:	e346      	b.n	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10374:	2203      	movs	r2, #3
   10376:	7903      	ldrb	r3, [r0, #4]
   10378:	4313      	orrs	r3, r2
   1037a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   1037c:	2302      	movs	r3, #2
   1037e:	7143      	strb	r3, [r0, #5]
		+ sizeof(struct pdu_data_llctrl_unknown_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   10380:	3305      	adds	r3, #5
   10382:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   10384:	466b      	mov	r3, sp
   10386:	3235      	adds	r2, #53	; 0x35
   10388:	189b      	adds	r3, r3, r2
   1038a:	781b      	ldrb	r3, [r3, #0]
   1038c:	7203      	strb	r3, [r0, #8]

	ctrl_tx_enqueue(conn, node_tx);
   1038e:	0028      	movs	r0, r5
   10390:	f7fd f9d8 	bl	d744 <ctrl_tx_enqueue>
   10394:	e01a      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
							    rx_enqueue);
				break;
			case PDU_DATA_LLID_RESV:
			default:
				LL_ASSERT(0);
   10396:	4b52      	ldr	r3, [pc, #328]	; (104e0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4e1>)
   10398:	9301      	str	r3, [sp, #4]
   1039a:	4b52      	ldr	r3, [pc, #328]	; (104e4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4e5>)
   1039c:	9300      	str	r3, [sp, #0]
   1039e:	4b5c      	ldr	r3, [pc, #368]	; (10510 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x511>)
   103a0:	e32c      	b.n	109fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9fd>
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		} else if ((_radio.conn_curr->enc_rx) ||
   103a2:	001a      	movs	r2, r3
   103a4:	32c0      	adds	r2, #192	; 0xc0
   103a6:	7814      	ldrb	r4, [r2, #0]
   103a8:	2214      	movs	r2, #20
   103aa:	4014      	ands	r4, r2
   103ac:	d100      	bne.n	103b0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3b1>
   103ae:	e347      	b.n	10a40 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa41>
			   (_radio.conn_curr->pause_rx)) {
			/* start authenticated payload (pre) timeout */
			if (_radio.conn_curr->apto_expire == 0) {
   103b0:	1d1a      	adds	r2, r3, #4
   103b2:	8fd4      	ldrh	r4, [r2, #62]	; 0x3e
   103b4:	2c00      	cmp	r4, #0
   103b6:	d000      	beq.n	103ba <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3bb>
   103b8:	e341      	b.n	10a3e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa3f>
				_radio.conn_curr->appto_expire =
   103ba:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
					_radio.conn_curr->appto_reload;
				_radio.conn_curr->apto_expire =
					_radio.conn_curr->apto_reload;
   103bc:	3302      	adds	r3, #2
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		} else if ((_radio.conn_curr->enc_rx) ||
			   (_radio.conn_curr->pause_rx)) {
			/* start authenticated payload (pre) timeout */
			if (_radio.conn_curr->apto_expire == 0) {
				_radio.conn_curr->appto_expire =
   103be:	8799      	strh	r1, [r3, #60]	; 0x3c
					_radio.conn_curr->appto_reload;
				_radio.conn_curr->apto_expire =
   103c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   103c2:	87d3      	strh	r3, [r2, #62]	; 0x3e
   103c4:	e33c      	b.n	10a40 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa41>
			}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		}

		if (!nack) {
   103c6:	2b00      	cmp	r3, #0
   103c8:	d000      	beq.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
   103ca:	e342      	b.n	10a52 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa53>
			_radio.conn_curr->nesn++;
   103cc:	23c8      	movs	r3, #200	; 0xc8
   103ce:	4a51      	ldr	r2, [pc, #324]	; (10514 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x515>)
   103d0:	005b      	lsls	r3, r3, #1
   103d2:	58d5      	ldr	r5, [r2, r3]
   103d4:	3b8f      	subs	r3, #143	; 0x8f
   103d6:	002a      	movs	r2, r5
   103d8:	32c0      	adds	r2, #192	; 0xc0
   103da:	7811      	ldrb	r1, [r2, #0]
   103dc:	3bff      	subs	r3, #255	; 0xff
   103de:	404b      	eors	r3, r1
   103e0:	7013      	strb	r3, [r2, #0]

			if (ccm_rx_increment) {
   103e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   103e4:	2b00      	cmp	r3, #0
   103e6:	d100      	bne.n	103ea <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3eb>
   103e8:	e333      	b.n	10a52 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa53>
				_radio.conn_curr->ccm_rx.counter++;
   103ea:	002b      	movs	r3, r5
   103ec:	002e      	movs	r6, r5
   103ee:	33d0      	adds	r3, #208	; 0xd0
   103f0:	36d4      	adds	r6, #212	; 0xd4
   103f2:	681b      	ldr	r3, [r3, #0]
   103f4:	7832      	ldrb	r2, [r6, #0]
   103f6:	0a1b      	lsrs	r3, r3, #8
   103f8:	0612      	lsls	r2, r2, #24
   103fa:	431a      	orrs	r2, r3
   103fc:	0010      	movs	r0, r2
   103fe:	002a      	movs	r2, r5
   10400:	32d8      	adds	r2, #216	; 0xd8
   10402:	6833      	ldr	r3, [r6, #0]
   10404:	7812      	ldrb	r2, [r2, #0]
   10406:	0a1b      	lsrs	r3, r3, #8
   10408:	0612      	lsls	r2, r2, #24
   1040a:	431a      	orrs	r2, r3
   1040c:	0011      	movs	r1, r2
   1040e:	2300      	movs	r3, #0
   10410:	2201      	movs	r2, #1
   10412:	1812      	adds	r2, r2, r0
   10414:	414b      	adcs	r3, r1
   10416:	920a      	str	r2, [sp, #40]	; 0x28
   10418:	930b      	str	r3, [sp, #44]	; 0x2c
   1041a:	2228      	movs	r2, #40	; 0x28
   1041c:	466b      	mov	r3, sp
   1041e:	189b      	adds	r3, r3, r2
   10420:	781b      	ldrb	r3, [r3, #0]
   10422:	35d1      	adds	r5, #209	; 0xd1
   10424:	702b      	strb	r3, [r5, #0]
   10426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10428:	0a19      	lsrs	r1, r3, #8
   1042a:	0e1a      	lsrs	r2, r3, #24
   1042c:	7069      	strb	r1, [r5, #1]
   1042e:	70ea      	strb	r2, [r5, #3]
   10430:	0c19      	lsrs	r1, r3, #16
   10432:	222c      	movs	r2, #44	; 0x2c
   10434:	466b      	mov	r3, sp
   10436:	189b      	adds	r3, r3, r2
   10438:	781b      	ldrb	r3, [r3, #0]
   1043a:	70a9      	strb	r1, [r5, #2]
   1043c:	712b      	strb	r3, [r5, #4]
   1043e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10440:	0a1a      	lsrs	r2, r3, #8
   10442:	716a      	strb	r2, [r5, #5]
   10444:	0c1a      	lsrs	r2, r3, #16
   10446:	0e1b      	lsrs	r3, r3, #24
   10448:	71aa      	strb	r2, [r5, #6]
   1044a:	71eb      	strb	r3, [r5, #7]
   1044c:	e301      	b.n	10a52 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa53>
		if (terminate) {
			goto isr_rx_conn_exit;
		}
	} else {
		/* Start CRC error countdown, if not already started */
		if (_radio.crc_expire == 0) {
   1044e:	5ce2      	ldrb	r2, [r4, r3]
   10450:	2a00      	cmp	r2, #0
   10452:	d101      	bne.n	10458 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x459>
			_radio.crc_expire = 2;
   10454:	3202      	adds	r2, #2
   10456:	54e2      	strb	r2, [r4, r3]
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
   10458:	5ce5      	ldrb	r5, [r4, r3]
   1045a:	3d01      	subs	r5, #1
   1045c:	b2ea      	uxtb	r2, r5
   1045e:	54e2      	strb	r2, [r4, r3]
		crc_close = (_radio.crc_expire == 0);
   10460:	4255      	negs	r5, r2
   10462:	4155      	adcs	r5, r2
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10464:	2400      	movs	r4, #0
			_radio.crc_expire = 2;
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
   10466:	b2ed      	uxtb	r5, r5

static inline void isr_rx_conn(u8_t crc_ok, u8_t trx_done,
			       u8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
   10468:	940c      	str	r4, [sp, #48]	; 0x30
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   1046a:	23c8      	movs	r3, #200	; 0xc8
   1046c:	4e29      	ldr	r6, [pc, #164]	; (10514 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x515>)
   1046e:	005b      	lsls	r3, r3, #1
   10470:	58f0      	ldr	r0, [r6, r3]
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   10472:	a915      	add	r1, sp, #84	; 0x54
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   10474:	0003      	movs	r3, r0
   10476:	33c0      	adds	r3, #192	; 0xc0
   10478:	781b      	ldrb	r3, [r3, #0]
   1047a:	09db      	lsrs	r3, r3, #7
   1047c:	930a      	str	r3, [sp, #40]	; 0x28
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   1047e:	f7fb fca3 	bl	bdc8 <prepare_pdu_data_tx>
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   10482:	7c33      	ldrb	r3, [r6, #16]
   10484:	2b03      	cmp	r3, #3
   10486:	d014      	beq.n	104b2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4b3>
   10488:	2303      	movs	r3, #3
   1048a:	2d00      	cmp	r5, #0
   1048c:	d111      	bne.n	104b2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4b3>
   1048e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10490:	2a00      	cmp	r2, #0
   10492:	d006      	beq.n	104a2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4a3>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   10494:	7a3a      	ldrb	r2, [r7, #8]
   10496:	06d2      	lsls	r2, r2, #27
   10498:	d403      	bmi.n	104a2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4a3>
   1049a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1049c:	7852      	ldrb	r2, [r2, #1]
   1049e:	2a00      	cmp	r2, #0
   104a0:	d007      	beq.n	104b2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4b3>
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
   104a2:	23c8      	movs	r3, #200	; 0xc8
   104a4:	005b      	lsls	r3, r3, #1
   104a6:	58f3      	ldr	r3, [r6, r3]
   104a8:	33a7      	adds	r3, #167	; 0xa7

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
   104aa:	781b      	ldrb	r3, [r3, #0]
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   104ac:	1e5a      	subs	r2, r3, #1
   104ae:	4193      	sbcs	r3, r2
   104b0:	3302      	adds	r3, #2
   104b2:	25c8      	movs	r5, #200	; 0xc8
   104b4:	7433      	strb	r3, [r6, #16]
   104b6:	006d      	lsls	r5, r5, #1
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
			STATE_CLOSE : STATE_TX;

	if (_radio.state == STATE_CLOSE) {
   104b8:	2b03      	cmp	r3, #3
   104ba:	d12d      	bne.n	10518 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x519>
		/* Event close for master */
		if (_radio.role == ROLE_MASTER) {
   104bc:	7bf3      	ldrb	r3, [r6, #15]
   104be:	2b04      	cmp	r3, #4
   104c0:	d10b      	bne.n	104da <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x4db>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   104c2:	227f      	movs	r2, #127	; 0x7f
   104c4:	5971      	ldr	r1, [r6, r5]
   104c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   104c8:	31c0      	adds	r1, #192	; 0xc0
   104ca:	7808      	ldrb	r0, [r1, #0]
   104cc:	01db      	lsls	r3, r3, #7
   104ce:	4002      	ands	r2, r0
   104d0:	4313      	orrs	r3, r2
   104d2:	700b      	strb	r3, [r1, #0]

			radio_disable();
   104d4:	f7f9 feba 	bl	a24c <radio_disable>
   104d8:	e046      	b.n	10568 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x569>

			goto isr_rx_conn_exit;
		}
		/* Event close for slave */
		else {
			radio_switch_complete_and_disable();
   104da:	f7f9 ff19 	bl	a310 <radio_switch_complete_and_disable>
   104de:	e027      	b.n	10530 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x531>
   104e0:	000145b0 	.word	0x000145b0
   104e4:	000145b5 	.word	0x000145b5
   104e8:	000172e8 	.word	0x000172e8
   104ec:	00000202 	.word	0x00000202
   104f0:	00000203 	.word	0x00000203
   104f4:	00007fff 	.word	0x00007fff
   104f8:	00016f9f 	.word	0x00016f9f
   104fc:	00014570 	.word	0x00014570
   10500:	00014577 	.word	0x00014577
   10504:	00016250 	.word	0x00016250
   10508:	0001703c 	.word	0x0001703c
   1050c:	0001602c 	.word	0x0001602c
   10510:	0001721a 	.word	0x0001721a
   10514:	20001254 	.word	0x20001254
		}
	} else {	/* if (_radio.state == STATE_TX) */
		radio_tmr_tifs_set(RADIO_TIFS);
   10518:	2096      	movs	r0, #150	; 0x96
   1051a:	f7f9 ff85 	bl	a428 <radio_tmr_tifs_set>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   1051e:	5973      	ldr	r3, [r6, r5]
   10520:	3333      	adds	r3, #51	; 0x33
   10522:	7818      	ldrb	r0, [r3, #0]
   10524:	0680      	lsls	r0, r0, #26
   10526:	0f40      	lsrs	r0, r0, #29
   10528:	f7f9 fee2 	bl	a2f0 <radio_switch_complete_and_rx>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
		radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */

		radio_tmr_end_capture();
   1052c:	f7fa f848 	bl	a5c0 <radio_tmr_end_capture>
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
   10530:	23c8      	movs	r3, #200	; 0xc8
   10532:	005b      	lsls	r3, r3, #1
   10534:	58f0      	ldr	r0, [r6, r3]
   10536:	9915      	ldr	r1, [sp, #84]	; 0x54
   10538:	0006      	movs	r6, r0
   1053a:	36c0      	adds	r6, #192	; 0xc0
   1053c:	7832      	ldrb	r2, [r6, #0]
   1053e:	3b90      	subs	r3, #144	; 0x90
   10540:	780d      	ldrb	r5, [r1, #0]
   10542:	3bff      	subs	r3, #255	; 0xff
   10544:	401a      	ands	r2, r3
   10546:	3307      	adds	r3, #7
   10548:	439d      	bics	r5, r3
   1054a:	00d2      	lsls	r2, r2, #3
   1054c:	432a      	orrs	r2, r5
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   1054e:	2504      	movs	r5, #4

		radio_tmr_end_capture();
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
   10550:	700a      	strb	r2, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   10552:	7832      	ldrb	r2, [r6, #0]
   10554:	3b07      	subs	r3, #7
   10556:	0852      	lsrs	r2, r2, #1
   10558:	4013      	ands	r3, r2
   1055a:	009a      	lsls	r2, r3, #2
   1055c:	780b      	ldrb	r3, [r1, #0]
   1055e:	43ab      	bics	r3, r5
   10560:	4313      	orrs	r3, r2
   10562:	700b      	strb	r3, [r1, #0]

	/* setup the radio tx packet buffer */
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   10564:	f7fb fcb7 	bl	bed6 <tx_packet_set>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
   10568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1056a:	2b00      	cmp	r3, #0
   1056c:	d007      	beq.n	1057e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x57f>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   1056e:	23c8      	movs	r3, #200	; 0xc8
   10570:	4ac9      	ldr	r2, [pc, #804]	; (10898 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x899>)
   10572:	005b      	lsls	r3, r3, #1
   10574:	58d3      	ldr	r3, [r2, r3]
   10576:	990c      	ldr	r1, [sp, #48]	; 0x30
   10578:	8c18      	ldrh	r0, [r3, #32]
   1057a:	f7fb ff4d 	bl	c418 <pdu_node_tx_release>
	}

	/* enqueue any rx packet/event towards application */
	if (rx_enqueue) {
   1057e:	2c00      	cmp	r4, #0
   10580:	d100      	bne.n	10584 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x585>
   10582:	e28a      	b.n	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>
		/* set data flow control lock on currently rx-ed connection */
		rx_fc_lock(_radio.conn_curr->handle);
   10584:	24c8      	movs	r4, #200	; 0xc8
   10586:	4dc4      	ldr	r5, [pc, #784]	; (10898 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x899>)
   10588:	0064      	lsls	r4, r4, #1
   1058a:	592b      	ldr	r3, [r5, r4]
   1058c:	8c18      	ldrh	r0, [r3, #32]
   1058e:	f7fb fd19 	bl	bfc4 <rx_fc_lock>

		/* set the connection handle and enqueue */
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   10592:	592b      	ldr	r3, [r5, r4]
   10594:	8c1b      	ldrh	r3, [r3, #32]
   10596:	80fb      	strh	r3, [r7, #6]
		packet_rx_enqueue();
   10598:	f7fb fcc6 	bl	bf28 <packet_rx_enqueue>
   1059c:	e27d      	b.n	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
   1059e:	4bbf      	ldr	r3, [pc, #764]	; (1089c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x89d>)
   105a0:	9301      	str	r3, [sp, #4]
   105a2:	4bbf      	ldr	r3, [pc, #764]	; (108a0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8a1>)
   105a4:	9300      	str	r3, [sp, #0]
   105a6:	4bbf      	ldr	r3, [pc, #764]	; (108a4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8a5>)
   105a8:	e228      	b.n	109fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9fd>

static inline void isr_radio_state_close(void)
{
	u32_t dont_close = 0;

	switch (_radio.role) {
   105aa:	7be0      	ldrb	r0, [r4, #15]
   105ac:	b2c0      	uxtb	r0, r0
   105ae:	2804      	cmp	r0, #4
   105b0:	d900      	bls.n	105b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5b5>
   105b2:	e218      	b.n	109e6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9e7>
   105b4:	f7ef fdea 	bl	18c <__gnu_thumb1_case_uhi>
   105b8:	00050208 	.word	0x00050208
   105bc:	007f0048 	.word	0x007f0048
   105c0:	007f      	.short	0x007f

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
   105c2:	2b03      	cmp	r3, #3
   105c4:	d10c      	bne.n	105e0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5e1>
	    (_radio.advertiser.chl_map_current != 0)) {
   105c6:	0023      	movs	r3, r4
   105c8:	33a4      	adds	r3, #164	; 0xa4

static inline u32_t isr_close_adv(void)
{
	u32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
   105ca:	781a      	ldrb	r2, [r3, #0]
   105cc:	230e      	movs	r3, #14
   105ce:	421a      	tst	r2, r3
   105d0:	d006      	beq.n	105e0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5e1>
	    (_radio.advertiser.chl_map_current != 0)) {
		dont_close = 1;

		adv_setup();
   105d2:	f7fc f955 	bl	c880 <adv_setup>

		radio_tx_enable();
   105d6:	f7f9 fe33 	bl	a240 <radio_tx_enable>

		radio_tmr_end_capture();
   105da:	f7f9 fff1 	bl	a5c0 <radio_tmr_end_capture>
   105de:	e25c      	b.n	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();
   105e0:	f7f9 feea 	bl	a3b8 <radio_filter_disable>

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
   105e4:	7c23      	ldrb	r3, [r4, #16]
   105e6:	2b03      	cmp	r3, #3
   105e8:	d000      	beq.n	105ec <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5ed>
   105ea:	e234      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
   105ec:	0023      	movs	r3, r4
   105ee:	33f4      	adds	r3, #244	; 0xf4
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
   105f0:	781a      	ldrb	r2, [r3, #0]
   105f2:	2327      	movs	r3, #39	; 0x27
   105f4:	4353      	muls	r3, r2
   105f6:	33a0      	adds	r3, #160	; 0xa0
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
   105f8:	18e3      	adds	r3, r4, r3

		radio_filter_disable();

		pdu_adv = (struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
   105fa:	799a      	ldrb	r2, [r3, #6]
   105fc:	230f      	movs	r3, #15
   105fe:	4013      	ands	r3, r2
   10600:	2b01      	cmp	r3, #1
   10602:	d100      	bne.n	10606 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x607>
   10604:	e227      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
			 * condition where in the Adv role is being stopped but
			 * at the same time it is preempted by Adv event that
			 * gets into close state. Accept failure when Adv role
			 * is being stopped.
			 */
			ticker_status =
   10606:	4ba8      	ldr	r3, [pc, #672]	; (108a8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8a9>)
   10608:	2000      	movs	r0, #0
   1060a:	9306      	str	r3, [sp, #24]
   1060c:	4ba7      	ldr	r3, [pc, #668]	; (108ac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8ad>)
   1060e:	9004      	str	r0, [sp, #16]
   10610:	9305      	str	r3, [sp, #20]
   10612:	2348      	movs	r3, #72	; 0x48
   10614:	9003      	str	r0, [sp, #12]
   10616:	33ff      	adds	r3, #255	; 0xff
   10618:	9002      	str	r0, [sp, #8]
   1061a:	9001      	str	r0, [sp, #4]
   1061c:	9000      	str	r0, [sp, #0]
   1061e:	2205      	movs	r2, #5
   10620:	0001      	movs	r1, r0
   10622:	f7fa ff39 	bl	b498 <ticker_update>
					      TICKER_US_TO_TICKS(random_delay *
								 1000),
					      0, 0, 0, 0, 0,
					      ticker_update_adv_assert,
					      (void *)__LINE__);
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10626:	2302      	movs	r3, #2
   10628:	4398      	bics	r0, r3
   1062a:	d100      	bne.n	1062e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x62f>
   1062c:	e213      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
   1062e:	7ba3      	ldrb	r3, [r4, #14]
   10630:	2b05      	cmp	r3, #5
   10632:	d100      	bne.n	10636 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x637>
   10634:	e20f      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
   10636:	4b99      	ldr	r3, [pc, #612]	; (1089c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x89d>)
   10638:	4a9d      	ldr	r2, [pc, #628]	; (108b0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8b1>)
   1063a:	9301      	str	r3, [sp, #4]
   1063c:	4b98      	ldr	r3, [pc, #608]	; (108a0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8a1>)
   1063e:	499d      	ldr	r1, [pc, #628]	; (108b4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8b5>)
   10640:	9300      	str	r3, [sp, #0]
   10642:	489d      	ldr	r0, [pc, #628]	; (108b8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8b9>)
   10644:	4b9d      	ldr	r3, [pc, #628]	; (108bc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8bd>)
   10646:	e1dc      	b.n	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>

static inline u32_t isr_close_scan(void)
{
	u32_t dont_close = 0;

	if (_radio.state == STATE_CLOSE) {
   10648:	2b03      	cmp	r3, #3
   1064a:	d126      	bne.n	1069a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x69b>
		dont_close = 1;

		radio_tmr_tifs_set(RADIO_TIFS);
   1064c:	2096      	movs	r0, #150	; 0x96
   1064e:	f7f9 feeb 	bl	a428 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0);
   10652:	2100      	movs	r1, #0
   10654:	0008      	movs	r0, r1
   10656:	f7f9 fe53 	bl	a300 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   1065a:	23be      	movs	r3, #190	; 0xbe
   1065c:	22dc      	movs	r2, #220	; 0xdc
   1065e:	33ff      	adds	r3, #255	; 0xff
   10660:	5ce3      	ldrb	r3, [r4, r3]
   10662:	0052      	lsls	r2, r2, #1
   10664:	58a2      	ldr	r2, [r4, r2]
   10666:	009b      	lsls	r3, r3, #2
   10668:	5898      	ldr	r0, [r3, r2]
   1066a:	3008      	adds	r0, #8
   1066c:	f7f9 fdca 	bl	a204 <radio_pkt_rx_set>
					pdu_data);
		radio_rssi_measure();
   10670:	f7f9 fe56 	bl	a320 <radio_rssi_measure>

		if (_radio.scanner.filter_policy && _radio.nirk) {
   10674:	235e      	movs	r3, #94	; 0x5e
   10676:	33ff      	adds	r3, #255	; 0xff
   10678:	5ce2      	ldrb	r2, [r4, r3]
   1067a:	3b2e      	subs	r3, #46	; 0x2e
   1067c:	3bff      	subs	r3, #255	; 0xff
   1067e:	421a      	tst	r2, r3
   10680:	d006      	beq.n	10690 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x691>
   10682:	7c60      	ldrb	r0, [r4, #17]
   10684:	2800      	cmp	r0, #0
   10686:	d003      	beq.n	10690 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x691>
			radio_ar_configure(_radio.nirk, _radio.irk);
   10688:	0021      	movs	r1, r4
   1068a:	3112      	adds	r1, #18
   1068c:	f7fa f84e 	bl	a72c <radio_ar_configure>
		}

		_radio.state = STATE_RX;
   10690:	2301      	movs	r3, #1
   10692:	7423      	strb	r3, [r4, #16]

		radio_rx_enable();
   10694:	f7f9 fdce 	bl	a234 <radio_rx_enable>
   10698:	e79f      	b.n	105da <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x5db>

		radio_tmr_end_capture();
	} else {
		radio_filter_disable();
   1069a:	f7f9 fe8d 	bl	a3b8 <radio_filter_disable>

		if (_radio.state == STATE_ABORT) {
   1069e:	7c23      	ldrb	r3, [r4, #16]
   106a0:	2b05      	cmp	r3, #5
   106a2:	d000      	beq.n	106a6 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6a7>
   106a4:	e1d7      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
			/* Scanner stop can expire while here in this ISR.
			 * Deferred attempt to stop can fail as it would have
			 * expired, hence ignore failure.
			 */
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   106a6:	2000      	movs	r0, #0
   106a8:	2204      	movs	r2, #4
   106aa:	9000      	str	r0, [sp, #0]
   106ac:	0003      	movs	r3, r0
   106ae:	0001      	movs	r1, r0
   106b0:	f7fa ff42 	bl	b538 <ticker_stop>
   106b4:	e1cf      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
	u16_t elapsed_event;
	u16_t lazy;
	u8_t force;

	/* Local initiated terminate happened */
	if (_radio.conn_curr == 0) {
   106b6:	25c8      	movs	r5, #200	; 0xc8
   106b8:	006d      	lsls	r5, r5, #1
   106ba:	5960      	ldr	r0, [r4, r5]
   106bc:	2800      	cmp	r0, #0
   106be:	d100      	bne.n	106c2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6c3>
   106c0:	e1c9      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
   106c2:	7be3      	ldrb	r3, [r4, #15]
   106c4:	2b03      	cmp	r3, #3
   106c6:	d107      	bne.n	106d8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6d9>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
   106c8:	0003      	movs	r3, r0
   106ca:	33a7      	adds	r3, #167	; 0xa7
   106cc:	7819      	ldrb	r1, [r3, #0]
	if (_radio.conn_curr == 0) {
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
   106ce:	2900      	cmp	r1, #0
   106d0:	d002      	beq.n	106d8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x6d9>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
   106d2:	f7fc fcb1 	bl	d038 <terminate_ind_rx_enqueue>
   106d6:	e08d      	b.n	107f4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7f5>
		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
   106d8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   106da:	930c      	str	r3, [sp, #48]	; 0x30
	elapsed_event = latency_event + 1;
   106dc:	1c5d      	adds	r5, r3, #1

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
   106de:	23ca      	movs	r3, #202	; 0xca
   106e0:	005b      	lsls	r3, r3, #1
   106e2:	5ce6      	ldrb	r6, [r4, r3]
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;
   106e4:	b2ad      	uxth	r5, r5

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
   106e6:	7be3      	ldrb	r3, [r4, #15]
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
   106e8:	2e00      	cmp	r6, #0
   106ea:	d061      	beq.n	107b0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7b1>
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
   106ec:	2b03      	cmp	r3, #3
   106ee:	d154      	bne.n	1079a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x79b>
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
   106f0:	f7f9 ff5a 	bl	a5a8 <radio_tmr_aa_get>
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
   106f4:	23c8      	movs	r3, #200	; 0xc8
   106f6:	005b      	lsls	r3, r3, #1
   106f8:	58e6      	ldr	r6, [r4, r3]
			u32_t start_to_address_actual_us;
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
   106fa:	0007      	movs	r7, r0
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
   106fc:	0033      	movs	r3, r6
   106fe:	3333      	adds	r3, #51	; 0x33
   10700:	781b      	ldrb	r3, [r3, #0]
			u32_t window_widening_event_us;
			u32_t preamble_to_addr_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
			window_widening_event_us =
   10702:	6d70      	ldr	r0, [r6, #84]	; 0x54
				_radio.conn_curr->role.slave.window_widening_event_us;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
   10704:	069b      	lsls	r3, r3, #26
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
   10706:	0f5b      	lsrs	r3, r3, #29
	default:
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
   10708:	2418      	movs	r4, #24
	packet_rx_allocate(0xFF);
}

static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
   1070a:	2b02      	cmp	r3, #2
   1070c:	d005      	beq.n	1071a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x71b>
   1070e:	2b04      	cmp	r3, #4
   10710:	d102      	bne.n	10718 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x719>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   10712:	3461      	adds	r4, #97	; 0x61
   10714:	34ff      	adds	r4, #255	; 0xff
   10716:	e000      	b.n	1071a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x71b>
static inline u32_t addr_us_get(u8_t phy)
{
	switch (phy) {
	default:
	case BIT(0):
		return 40;
   10718:	2428      	movs	r4, #40	; 0x28
			preamble_to_addr_us =
				addr_us_get(_radio.conn_curr->phy_rx);
#else /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			preamble_to_addr_us = addr_us_get(0);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
   1071a:	0003      	movs	r3, r0
   1071c:	3320      	adds	r3, #32
   1071e:	191b      	adds	r3, r3, r4
   10720:	930e      	str	r3, [sp, #56]	; 0x38
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
   10722:	4a67      	ldr	r2, [pc, #412]	; (108c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8c1>)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PHY */
			start_to_address_expected_us =
				(RADIO_TICKER_JITTER_US << 1) +
				preamble_to_addr_us +
				window_widening_event_us;
			if (start_to_address_actual_us <=
   10724:	429f      	cmp	r7, r3
   10726:	d80c      	bhi.n	10742 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x743>
			    start_to_address_expected_us) {
				ticks_drift_plus =
   10728:	2300      	movs	r3, #0
   1072a:	2100      	movs	r1, #0
   1072c:	f7ef fece 	bl	4cc <__aeabi_lmul>
   10730:	2307      	movs	r3, #7
   10732:	4a64      	ldr	r2, [pc, #400]	; (108c4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8c5>)
   10734:	f7ef feaa 	bl	48c <__aeabi_uldivmod>
   10738:	b283      	uxth	r3, r0
   1073a:	930a      	str	r3, [sp, #40]	; 0x28
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
   1073c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1073e:	1bd8      	subs	r0, r3, r7
   10740:	e00c      	b.n	1075c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x75d>
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
   10742:	2300      	movs	r3, #0
   10744:	0038      	movs	r0, r7
   10746:	2100      	movs	r1, #0
   10748:	f7ef fec0 	bl	4cc <__aeabi_lmul>
   1074c:	2307      	movs	r3, #7
   1074e:	4a5d      	ldr	r2, [pc, #372]	; (108c4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8c5>)
   10750:	f7ef fe9c 	bl	48c <__aeabi_uldivmod>
   10754:	b283      	uxth	r3, r0
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
   10756:	0020      	movs	r0, r4
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
   10758:	930a      	str	r3, [sp, #40]	; 0x28
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
   1075a:	3020      	adds	r0, #32
   1075c:	4a58      	ldr	r2, [pc, #352]	; (108c0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8c1>)
   1075e:	2300      	movs	r3, #0
   10760:	2100      	movs	r1, #0
   10762:	f7ef feb3 	bl	4cc <__aeabi_lmul>
   10766:	2307      	movs	r3, #7
   10768:	4a56      	ldr	r2, [pc, #344]	; (108c4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8c5>)
   1076a:	f7ef fe8f 	bl	48c <__aeabi_uldivmod>
							   preamble_to_addr_us);
			}


			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
   1076e:	2300      	movs	r3, #0
   10770:	6573      	str	r3, [r6, #84]	; 0x54
			_radio.conn_curr->role.slave.window_size_event_us = 0;
   10772:	65f3      	str	r3, [r6, #92]	; 0x5c

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
   10774:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
   10776:	b284      	uxth	r4, r0
			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
			_radio.conn_curr->role.slave.window_size_event_us = 0;

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
   10778:	8573      	strh	r3, [r6, #42]	; 0x2a
			if (_radio.conn_curr->pkt_tx_head) {
   1077a:	0033      	movs	r3, r6
   1077c:	33fc      	adds	r3, #252	; 0xfc
   1077e:	689b      	ldr	r3, [r3, #8]
   10780:	2b00      	cmp	r3, #0
   10782:	d00e      	beq.n	107a2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7a3>
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
   10784:	795b      	ldrb	r3, [r3, #5]
   10786:	2b00      	cmp	r3, #0
   10788:	d104      	bne.n	10794 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x795>
				    _radio.conn_curr->packet_tx_head_offset) {
   1078a:	0033      	movs	r3, r6
   1078c:	33ff      	adds	r3, #255	; 0xff
			if (_radio.conn_curr->pkt_tx_head) {
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
   1078e:	7d9b      	ldrb	r3, [r3, #22]
   10790:	2b00      	cmp	r3, #0
   10792:	d006      	beq.n	107a2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7a3>
				    _radio.conn_curr->packet_tx_head_offset) {
					_radio.conn_curr->latency_event = 0;
   10794:	2300      	movs	r3, #0
   10796:	8573      	strh	r3, [r6, #42]	; 0x2a
   10798:	e003      	b.n	107a2 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7a3>
				}
			}
		} else {
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
   1079a:	2400      	movs	r4, #0
   1079c:	3045      	adds	r0, #69	; 0x45
   1079e:	7004      	strb	r4, [r0, #0]
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
   107a0:	940a      	str	r4, [sp, #40]	; 0x28
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
		}

		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
   107a2:	23c8      	movs	r3, #200	; 0xc8
   107a4:	4a3c      	ldr	r2, [pc, #240]	; (10898 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x899>)
   107a6:	005b      	lsls	r3, r3, #1
   107a8:	58d3      	ldr	r3, [r2, r3]
   107aa:	2200      	movs	r2, #0
   107ac:	86da      	strh	r2, [r3, #54]	; 0x36
   107ae:	e02f      	b.n	10810 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x811>
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
   107b0:	2b04      	cmp	r3, #4
   107b2:	d10d      	bne.n	107d0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7d1>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
   107b4:	0003      	movs	r3, r0
   107b6:	33a7      	adds	r3, #167	; 0xa7
   107b8:	7819      	ldrb	r1, [r3, #0]
		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
   107ba:	2900      	cmp	r1, #0
   107bc:	d008      	beq.n	107d0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7d1>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
   107be:	25c8      	movs	r5, #200	; 0xc8
   107c0:	006d      	lsls	r5, r5, #1
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
   107c2:	f7fc fc39 	bl	d038 <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
   107c6:	5960      	ldr	r0, [r4, r5]
   107c8:	f7fb ff94 	bl	c6f4 <connection_release>
		_radio.conn_curr = NULL;
   107cc:	5166      	str	r6, [r4, r5]
   107ce:	e142      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
   107d0:	7be3      	ldrb	r3, [r4, #15]
   107d2:	2b04      	cmp	r3, #4
   107d4:	d114      	bne.n	10800 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x801>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
   107d6:	0002      	movs	r2, r0
   107d8:	3245      	adds	r2, #69	; 0x45
   107da:	7813      	ldrb	r3, [r2, #0]

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
   107dc:	2b00      	cmp	r3, #0
   107de:	d00f      	beq.n	10800 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x801>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
		if (_radio.conn_curr->role.master.connect_expire >
   107e0:	429d      	cmp	r5, r3
   107e2:	d202      	bcs.n	107ea <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x7eb>
		    elapsed_event) {
			_radio.conn_curr->role.master.connect_expire -= elapsed_event;
   107e4:	1b5b      	subs	r3, r3, r5
   107e6:	7013      	strb	r3, [r2, #0]
   107e8:	e010      	b.n	1080c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x80d>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   107ea:	213e      	movs	r1, #62	; 0x3e

			connection_release(_radio.conn_curr);
   107ec:	25c8      	movs	r5, #200	; 0xc8
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
		if (_radio.conn_curr->role.master.connect_expire >
		    elapsed_event) {
			_radio.conn_curr->role.master.connect_expire -= elapsed_event;
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   107ee:	f7fc fc23 	bl	d038 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
   107f2:	006d      	lsls	r5, r5, #1
   107f4:	5960      	ldr	r0, [r4, r5]
   107f6:	f7fb ff7d 	bl	c6f4 <connection_release>
			_radio.conn_curr = NULL;
   107fa:	2300      	movs	r3, #0
   107fc:	5163      	str	r3, [r4, r5]
   107fe:	e12a      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
	/* if anchor point not sync-ed, start supervision timeout, and break
	 * latency if any.
	 */
	else {
		/* Start supervision timeout, if not started already */
		if (_radio.conn_curr->supervision_expire == 0) {
   10800:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
   10802:	2c00      	cmp	r4, #0
   10804:	d102      	bne.n	1080c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x80d>
			_radio.conn_curr->supervision_expire =
   10806:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   10808:	86c3      	strh	r3, [r0, #54]	; 0x36
   1080a:	e000      	b.n	1080e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x80f>

		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
   1080c:	2400      	movs	r4, #0
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
   1080e:	940a      	str	r4, [sp, #40]	; 0x28
		}
	}

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
   10810:	23c8      	movs	r3, #200	; 0xc8
   10812:	4e21      	ldr	r6, [pc, #132]	; (10898 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x899>)
   10814:	005b      	lsls	r3, r3, #1
   10816:	58f0      	ldr	r0, [r6, r3]
   10818:	0037      	movs	r7, r6
   1081a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   1081c:	2b00      	cmp	r3, #0
   1081e:	d027      	beq.n	10870 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x871>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   10820:	429d      	cmp	r5, r3
   10822:	d218      	bcs.n	10856 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x857>
			_radio.conn_curr->supervision_expire -= elapsed_event;

			/* break latency */
			_radio.conn_curr->latency_event = 0;
   10824:	2200      	movs	r2, #0

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
			_radio.conn_curr->supervision_expire -= elapsed_event;
   10826:	1b5b      	subs	r3, r3, r5
   10828:	b29b      	uxth	r3, r3
   1082a:	86c3      	strh	r3, [r0, #54]	; 0x36

			/* break latency */
			_radio.conn_curr->latency_event = 0;
   1082c:	8542      	strh	r2, [r0, #42]	; 0x2a

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
				force = 1;
   1082e:	2601      	movs	r6, #1
			_radio.conn_curr->latency_event = 0;

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
   10830:	2b06      	cmp	r3, #6
   10832:	d91e      	bls.n	10872 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x873>
				force = 1;
			}
			/* use randomness to force slave role when anchor
			 * points are being missed.
			 */
			else if (_radio.role == ROLE_SLAVE) {
   10834:	7bfb      	ldrb	r3, [r7, #15]
   10836:	2b03      	cmp	r3, #3
   10838:	d11a      	bne.n	10870 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x871>
				if (latency_event != 0) {
   1083a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1083c:	4293      	cmp	r3, r2
   1083e:	d118      	bne.n	10872 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x873>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;
   10840:	6e02      	ldr	r2, [r0, #96]	; 0x60

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
   10842:	0853      	lsrs	r3, r2, #1
					if (force) {
   10844:	4232      	tst	r2, r6
   10846:	d101      	bne.n	1084c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x84d>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
   10848:	6603      	str	r3, [r0, #96]	; 0x60
   1084a:	e011      	b.n	10870 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x871>
					if (force) {
						_radio.conn_curr->role.slave.force |=
   1084c:	2280      	movs	r2, #128	; 0x80
   1084e:	0612      	lsls	r2, r2, #24
   10850:	4313      	orrs	r3, r2
   10852:	6603      	str	r3, [r0, #96]	; 0x60
   10854:	e00d      	b.n	10872 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x873>
							((u32_t)1 << 31);
					}
				}
			}
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   10856:	2108      	movs	r1, #8
   10858:	f7fc fbee 	bl	d038 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
   1085c:	23c8      	movs	r3, #200	; 0xc8
   1085e:	005b      	lsls	r3, r3, #1
   10860:	58f0      	ldr	r0, [r6, r3]
   10862:	f7fb ff47 	bl	c6f4 <connection_release>
			_radio.conn_curr = NULL;
   10866:	22c8      	movs	r2, #200	; 0xc8
   10868:	2300      	movs	r3, #0
   1086a:	0052      	lsls	r2, r2, #1
   1086c:	50b3      	str	r3, [r6, r2]
   1086e:	e0f2      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
				_radio.conn_curr->supervision_reload;
		}
	}

	/* check supervision timeout */
	force = 0;
   10870:	2600      	movs	r6, #0
			return;
		}
	}

	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
   10872:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   10874:	2b00      	cmp	r3, #0
   10876:	d027      	beq.n	108c8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8c9>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   10878:	429d      	cmp	r5, r3
   1087a:	d202      	bcs.n	10882 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x883>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   1087c:	1b5b      	subs	r3, r3, r5
   1087e:	8743      	strh	r3, [r0, #58]	; 0x3a
   10880:	e022      	b.n	108c8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8c9>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);

			connection_release(_radio.conn_curr);
   10882:	24c8      	movs	r4, #200	; 0xc8
	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
			_radio.conn_curr->procedure_expire -= elapsed_event;
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10884:	2122      	movs	r1, #34	; 0x22

			connection_release(_radio.conn_curr);
   10886:	0064      	lsls	r4, r4, #1
	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
			_radio.conn_curr->procedure_expire -= elapsed_event;
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10888:	f7fc fbd6 	bl	d038 <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
   1088c:	5938      	ldr	r0, [r7, r4]
   1088e:	f7fb ff31 	bl	c6f4 <connection_release>
			_radio.conn_curr = NULL;
   10892:	2300      	movs	r3, #0
   10894:	513b      	str	r3, [r7, r4]
   10896:	e0de      	b.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
   10898:	20001254 	.word	0x20001254
   1089c:	000145b0 	.word	0x000145b0
   108a0:	000145b5 	.word	0x000145b5
   108a4:	0001711f 	.word	0x0001711f
   108a8:	00000b29 	.word	0x00000b29
   108ac:	0000c0d1 	.word	0x0000c0d1
   108b0:	00014570 	.word	0x00014570
   108b4:	00014577 	.word	0x00014577
   108b8:	00016398 	.word	0x00016398
   108bc:	0001704d 	.word	0x0001704d
   108c0:	3b9aca00 	.word	0x3b9aca00
   108c4:	1afd498d 	.word	0x1afd498d
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
	/* check apto */
	if (_radio.conn_curr->apto_expire != 0) {
   108c8:	3004      	adds	r0, #4
   108ca:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   108cc:	2b00      	cmp	r3, #0
   108ce:	d01d      	beq.n	1090c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x90d>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   108d0:	429d      	cmp	r5, r3
   108d2:	d202      	bcs.n	108da <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8db>
			_radio.conn_curr->apto_expire -= elapsed_event;
   108d4:	1b5b      	subs	r3, r3, r5
   108d6:	87c3      	strh	r3, [r0, #62]	; 0x3e
   108d8:	e018      	b.n	1090c <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x90d>
		} else {
			struct radio_pdu_node_rx *radio_pdu_node_rx;

			_radio.conn_curr->apto_expire = 0;
   108da:	2300      	movs	r3, #0
   108dc:	87c3      	strh	r3, [r0, #62]	; 0x3e

			/* Prepare the rx packet structure */
			radio_pdu_node_rx = packet_rx_reserve_get(2);
   108de:	2002      	movs	r0, #2
   108e0:	f7fa ff38 	bl	b754 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
   108e4:	2800      	cmp	r0, #0
   108e6:	d108      	bne.n	108fa <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x8fb>
   108e8:	4b6d      	ldr	r3, [pc, #436]	; (10aa0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa1>)
   108ea:	9301      	str	r3, [sp, #4]
   108ec:	4b6d      	ldr	r3, [pc, #436]	; (10aa4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa5>)
   108ee:	9300      	str	r3, [sp, #0]
   108f0:	4b6d      	ldr	r3, [pc, #436]	; (10aa8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa9>)
   108f2:	4a6e      	ldr	r2, [pc, #440]	; (10aac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaad>)
   108f4:	496e      	ldr	r1, [pc, #440]	; (10ab0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xab1>)
   108f6:	486f      	ldr	r0, [pc, #444]	; (10ab4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xab5>)
   108f8:	e083      	b.n	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>

			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   108fa:	23c8      	movs	r3, #200	; 0xc8
   108fc:	005b      	lsls	r3, r3, #1
   108fe:	58fb      	ldr	r3, [r7, r3]
   10900:	8c1b      	ldrh	r3, [r3, #32]
   10902:	80c3      	strh	r3, [r0, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
   10904:	230a      	movs	r3, #10
   10906:	7103      	strb	r3, [r0, #4]

			/* enqueue apto event into rx queue */
			packet_rx_enqueue();
   10908:	f7fb fb0e 	bl	bf28 <packet_rx_enqueue>
		}
	}

	/* check appto */
	if (_radio.conn_curr->appto_expire != 0) {
   1090c:	23c8      	movs	r3, #200	; 0xc8
   1090e:	005b      	lsls	r3, r3, #1
   10910:	58fb      	ldr	r3, [r7, r3]
   10912:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   10914:	2a00      	cmp	r2, #0
   10916:	d017      	beq.n	10948 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x949>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   10918:	4295      	cmp	r5, r2
   1091a:	d202      	bcs.n	10922 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x923>
			_radio.conn_curr->appto_expire -= elapsed_event;
   1091c:	1b55      	subs	r5, r2, r5
   1091e:	87dd      	strh	r5, [r3, #62]	; 0x3e
   10920:	e012      	b.n	10948 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x949>
		} else {
			_radio.conn_curr->appto_expire = 0;
   10922:	2200      	movs	r2, #0
   10924:	87da      	strh	r2, [r3, #62]	; 0x3e

			if ((_radio.conn_curr->procedure_expire == 0) &&
   10926:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
   10928:	2a00      	cmp	r2, #0
   1092a:	d10d      	bne.n	10948 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x949>
			    (_radio.conn_curr->llcp_req ==
   1092c:	001a      	movs	r2, r3
			     _radio.conn_curr->llcp_ack)) {
   1092e:	0018      	movs	r0, r3
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
   10930:	3268      	adds	r2, #104	; 0x68
			     _radio.conn_curr->llcp_ack)) {
   10932:	3069      	adds	r0, #105	; 0x69
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
   10934:	7811      	ldrb	r1, [r2, #0]
		if (_radio.conn_curr->appto_expire > elapsed_event) {
			_radio.conn_curr->appto_expire -= elapsed_event;
		} else {
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
   10936:	7802      	ldrb	r2, [r0, #0]
   10938:	428a      	cmp	r2, r1
   1093a:	d10c      	bne.n	10956 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x957>
			    (_radio.conn_curr->llcp_req ==
			     _radio.conn_curr->llcp_ack)) {
				_radio.conn_curr->llcp_type = LLCP_PING;
   1093c:	0019      	movs	r1, r3
   1093e:	2506      	movs	r5, #6
   10940:	316a      	adds	r1, #106	; 0x6a
				_radio.conn_curr->llcp_ack--;
   10942:	3a01      	subs	r2, #1
			_radio.conn_curr->appto_expire = 0;

			if ((_radio.conn_curr->procedure_expire == 0) &&
			    (_radio.conn_curr->llcp_req ==
			     _radio.conn_curr->llcp_ack)) {
				_radio.conn_curr->llcp_type = LLCP_PING;
   10944:	700d      	strb	r5, [r1, #0]
				_radio.conn_curr->llcp_ack--;
   10946:	7002      	strb	r2, [r0, #0]
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10948:	001a      	movs	r2, r3
   1094a:	3269      	adds	r2, #105	; 0x69
   1094c:	7811      	ldrb	r1, [r2, #0]
   1094e:	3a01      	subs	r2, #1
   10950:	7812      	ldrb	r2, [r2, #0]
   10952:	4291      	cmp	r1, r2
   10954:	d007      	beq.n	10966 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x967>
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
   10956:	001a      	movs	r2, r3
   10958:	326a      	adds	r2, #106	; 0x6a
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   1095a:	7812      	ldrb	r2, [r2, #0]
   1095c:	3a01      	subs	r2, #1
   1095e:	2a01      	cmp	r2, #1
   10960:	d801      	bhi.n	10966 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x967>
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
   10962:	2200      	movs	r2, #0
   10964:	855a      	strh	r2, [r3, #42]	; 0x2a
   10966:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
	}

	/* check if latency needs update */
	lazy = 0;
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   10968:	2e00      	cmp	r6, #0
   1096a:	d103      	bne.n	10974 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x975>
   1096c:	980c      	ldr	r0, [sp, #48]	; 0x30
	     (_radio.conn_curr->llcp_type == LLCP_CHAN_MAP))) {
		_radio.conn_curr->latency_event = 0;
	}

	/* check if latency needs update */
	lazy = 0;
   1096e:	0031      	movs	r1, r6
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   10970:	4282      	cmp	r2, r0
   10972:	d001      	beq.n	10978 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x979>
		lazy = _radio.conn_curr->latency_event + 1;
   10974:	3201      	adds	r2, #1
   10976:	b291      	uxth	r1, r2
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   10978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1097a:	4322      	orrs	r2, r4
   1097c:	430a      	orrs	r2, r1
   1097e:	b292      	uxth	r2, r2
   10980:	2a00      	cmp	r2, #0
   10982:	d101      	bne.n	10988 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x989>
	    (lazy != 0) || (force != 0)) {
   10984:	2e00      	cmp	r6, #0
   10986:	d066      	beq.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
   10988:	2000      	movs	r0, #0
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   1098a:	8c1d      	ldrh	r5, [r3, #32]
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
   1098c:	4b4a      	ldr	r3, [pc, #296]	; (10ab8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xab9>)
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
	    (lazy != 0) || (force != 0)) {
		u32_t ticker_status;
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   1098e:	3507      	adds	r5, #7
   10990:	b2ed      	uxtb	r5, r5
		 * condition where in the Slave role is being stopped but
		 * at the same time it is preempted by Slave event that
		 * gets into close state. Accept failure when Slave role
		 * is being stopped.
		 */
		ticker_status =
   10992:	9305      	str	r3, [sp, #20]
   10994:	9103      	str	r1, [sp, #12]
   10996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10998:	9506      	str	r5, [sp, #24]
   1099a:	9604      	str	r6, [sp, #16]
   1099c:	9002      	str	r0, [sp, #8]
   1099e:	9001      	str	r0, [sp, #4]
   109a0:	9400      	str	r4, [sp, #0]
   109a2:	002a      	movs	r2, r5
   109a4:	0001      	movs	r1, r0
   109a6:	f7fa fd77 	bl	b498 <ticker_update>
				      RADIO_TICKER_USER_ID_WORKER,
				      ticker_id,
				      ticks_drift_plus, ticks_drift_minus, 0, 0,
				      lazy, force, ticker_update_slave_assert,
				      (void *)(u32_t)ticker_id);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   109aa:	2302      	movs	r3, #2
   109ac:	4398      	bics	r0, r3
   109ae:	d052      	beq.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
   109b0:	7bbb      	ldrb	r3, [r7, #14]
   109b2:	429d      	cmp	r5, r3
   109b4:	d04f      	beq.n	10a56 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa57>
   109b6:	4b3a      	ldr	r3, [pc, #232]	; (10aa0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa1>)
   109b8:	4a3c      	ldr	r2, [pc, #240]	; (10aac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaad>)
   109ba:	9301      	str	r3, [sp, #4]
   109bc:	4b39      	ldr	r3, [pc, #228]	; (10aa4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa5>)
   109be:	493c      	ldr	r1, [pc, #240]	; (10ab0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xab1>)
   109c0:	9300      	str	r3, [sp, #0]
   109c2:	483e      	ldr	r0, [pc, #248]	; (10abc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xabd>)
   109c4:	4b38      	ldr	r3, [pc, #224]	; (10aa8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa9>)
   109c6:	e01c      	b.n	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>
		 * no active role at that instance in time.
		 * Just reset the state to none. The role has gracefully closed
		 * before this ISR run.
		 * The above applies to aborting a role event too.
		 */
		LL_ASSERT((_radio.state == STATE_STOP) ||
   109c8:	3b04      	subs	r3, #4
   109ca:	2b01      	cmp	r3, #1
   109cc:	d908      	bls.n	109e0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9e1>
   109ce:	4b34      	ldr	r3, [pc, #208]	; (10aa0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa1>)
   109d0:	4a36      	ldr	r2, [pc, #216]	; (10aac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaad>)
   109d2:	9301      	str	r3, [sp, #4]
   109d4:	4b33      	ldr	r3, [pc, #204]	; (10aa4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa5>)
   109d6:	4936      	ldr	r1, [pc, #216]	; (10ab0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xab1>)
   109d8:	9300      	str	r3, [sp, #0]
   109da:	4839      	ldr	r0, [pc, #228]	; (10ac0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xac1>)
   109dc:	4b39      	ldr	r3, [pc, #228]	; (10ac4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xac5>)
   109de:	e010      	b.n	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>
			  (_radio.state == STATE_ABORT));

		_radio.state = STATE_NONE;
   109e0:	2300      	movs	r3, #0
   109e2:	7423      	strb	r3, [r4, #16]
   109e4:	e059      	b.n	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>

		return;

	default:
		LL_ASSERT(0);
   109e6:	4b2e      	ldr	r3, [pc, #184]	; (10aa0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa1>)
   109e8:	9301      	str	r3, [sp, #4]
   109ea:	4b2e      	ldr	r3, [pc, #184]	; (10aa4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa5>)
   109ec:	9300      	str	r3, [sp, #0]
   109ee:	4b35      	ldr	r3, [pc, #212]	; (10ac4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xac5>)
   109f0:	e004      	b.n	109fc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x9fd>
		 * using Radio Disable task.
		 */
		break;

	default:
		LL_ASSERT(0);
   109f2:	4b2b      	ldr	r3, [pc, #172]	; (10aa0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa1>)
   109f4:	9301      	str	r3, [sp, #4]
   109f6:	4b2b      	ldr	r3, [pc, #172]	; (10aa4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa5>)
   109f8:	9300      	str	r3, [sp, #0]
   109fa:	4b33      	ldr	r3, [pc, #204]	; (10ac8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xac9>)
   109fc:	4a2b      	ldr	r2, [pc, #172]	; (10aac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaad>)
   109fe:	492c      	ldr	r1, [pc, #176]	; (10ab0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xab1>)
   10a00:	4832      	ldr	r0, [pc, #200]	; (10acc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xacd>)
   10a02:	f7f0 feb1 	bl	1768 <printk>
   10a06:	b662      	cpsie	i
   10a08:	2004      	movs	r0, #4
   10a0a:	df02      	svc	2
	     ((((_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_REQ) ||
		(_radio.conn_curr->llcp_length.state ==
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
	       (pdu_data_rx->payload.llctrl.opcode ==
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   10a0c:	2b02      	cmp	r3, #2
   10a0e:	d101      	bne.n	10a14 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa15>
   10a10:	f7ff faae 	bl	ff70 <isr+0x137c>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10a14:	2400      	movs	r4, #0
			 */
			*rx_enqueue = 1;
		}
	} else {
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   10a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
static inline u8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
					    u8_t *rx_enqueue)
{
	u16_t eff_rx_octets;
	u16_t eff_tx_octets;
	u8_t nack = 0;
   10a18:	0023      	movs	r3, r4
			 */
			*rx_enqueue = 1;
		}
	} else {
		/* Drop response with no Local initiated request. */
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   10a1a:	2a15      	cmp	r2, #21
   10a1c:	d101      	bne.n	10a22 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa23>
   10a1e:	f7ff fb1f 	bl	10060 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x61>
   10a22:	4b1f      	ldr	r3, [pc, #124]	; (10aa0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa1>)
   10a24:	4a21      	ldr	r2, [pc, #132]	; (10aac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaad>)
   10a26:	9301      	str	r3, [sp, #4]
   10a28:	4b1e      	ldr	r3, [pc, #120]	; (10aa4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa5>)
   10a2a:	4921      	ldr	r1, [pc, #132]	; (10ab0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xab1>)
   10a2c:	9300      	str	r3, [sp, #0]
   10a2e:	4828      	ldr	r0, [pc, #160]	; (10ad0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xad1>)
   10a30:	4b28      	ldr	r3, [pc, #160]	; (10ad4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xad5>)
   10a32:	e7e6      	b.n	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   10a34:	2328      	movs	r3, #40	; 0x28
   10a36:	35a7      	adds	r5, #167	; 0xa7
   10a38:	702b      	strb	r3, [r5, #0]
   10a3a:	f7fe ff95 	bl	f968 <isr+0xd74>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10a3e:	000c      	movs	r4, r1
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		u8_t ccm_rx_increment = 0;
   10a40:	9412      	str	r4, [sp, #72]	; 0x48
   10a42:	e4c3      	b.n	103cc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x3cd>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
   10a44:	2400      	movs	r4, #0
   10a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10a48:	42a3      	cmp	r3, r4
   10a4a:	d000      	beq.n	10a4e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa4f>
   10a4c:	e58f      	b.n	1056e <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x56f>
   10a4e:	e024      	b.n	10a9a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa9b>
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	u8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	u8_t rx_enqueue = 0;
   10a50:	2400      	movs	r4, #0
	u8_t crc_close = 0;
   10a52:	2500      	movs	r5, #0
   10a54:	e509      	b.n	1046a <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0x46b>

	if (dont_close) {
		return;
	}

	_radio.role = ROLE_NONE;
   10a56:	2400      	movs	r4, #0
   10a58:	4d1f      	ldr	r5, [pc, #124]	; (10ad8 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xad9>)
   10a5a:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
   10a5c:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
   10a5e:	736c      	strb	r4, [r5, #13]

	radio_tmr_stop();
   10a60:	f7f9 fd4c 	bl	a4fc <radio_tmr_stop>
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10a64:	0022      	movs	r2, r4
   10a66:	0021      	movs	r1, r4
   10a68:	0020      	movs	r0, r4
   10a6a:	4b1c      	ldr	r3, [pc, #112]	; (10adc <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xadd>)
   10a6c:	f7f9 f8f6 	bl	9c5c <mayfly_enqueue>
   10a70:	1e04      	subs	r4, r0, #0
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
   10a72:	d008      	beq.n	10a86 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa87>
   10a74:	4b0a      	ldr	r3, [pc, #40]	; (10aa0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa1>)
   10a76:	4a0d      	ldr	r2, [pc, #52]	; (10aac <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaad>)
   10a78:	9301      	str	r3, [sp, #4]
   10a7a:	4b0a      	ldr	r3, [pc, #40]	; (10aa4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xaa5>)
   10a7c:	490c      	ldr	r1, [pc, #48]	; (10ab0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xab1>)
   10a7e:	9300      	str	r3, [sp, #0]
   10a80:	4817      	ldr	r0, [pc, #92]	; (10ae0 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae1>)
   10a82:	4b18      	ldr	r3, [pc, #96]	; (10ae4 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xae5>)
   10a84:	e7bd      	b.n	10a02 <CONFIG_BLUETOOTH_CONTROLLER_COMPANY_ID+0xa03>

	radio_tmr_stop();

	event_inactive(0, 0, 0, NULL);

	clock_control_off(_radio.hf_clock, NULL);
   10a86:	6828      	ldr	r0, [r5, #0]
   10a88:	0021      	movs	r1, r4
   10a8a:	6843      	ldr	r3, [r0, #4]
   10a8c:	685b      	ldr	r3, [r3, #4]
   10a8e:	4798      	blx	r3

	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   10a90:	2201      	movs	r2, #1
   10a92:	0020      	movs	r0, r4
   10a94:	0011      	movs	r1, r2
   10a96:	f7f9 f8c1 	bl	9c1c <mayfly_enable>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
   10a9a:	b017      	add	sp, #92	; 0x5c
   10a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a9e:	46c0      	nop			; (mov r8, r8)
   10aa0:	000145b0 	.word	0x000145b0
   10aa4:	000145b5 	.word	0x000145b5
   10aa8:	00017096 	.word	0x00017096
   10aac:	00014570 	.word	0x00014570
   10ab0:	00014577 	.word	0x00014577
   10ab4:	00015d05 	.word	0x00015d05
   10ab8:	0000c119 	.word	0x0000c119
   10abc:	00016406 	.word	0x00016406
   10ac0:	0001647c 	.word	0x0001647c
   10ac4:	00016ece 	.word	0x00016ece
   10ac8:	00016ee4 	.word	0x00016ee4
   10acc:	00014bc5 	.word	0x00014bc5
   10ad0:	00016331 	.word	0x00016331
   10ad4:	000167bd 	.word	0x000167bd
   10ad8:	20001254 	.word	0x20001254
   10adc:	20000628 	.word	0x20000628
   10ae0:	00015b04 	.word	0x00015b04
   10ae4:	00017334 	.word	0x00017334

00010ae8 <radio_init>:
u32_t radio_init(void *hf_clock, u8_t sca, u8_t connection_count_max,
		 u8_t rx_count_max, u8_t tx_count_max,
		 u16_t packet_data_octets_max,
		 u16_t packet_tx_data_size, u8_t *mem_radio,
		 u16_t mem_size)
{
   10ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10aea:	b087      	sub	sp, #28
   10aec:	9201      	str	r2, [sp, #4]
   10aee:	aa0c      	add	r2, sp, #48	; 0x30
   10af0:	7815      	ldrb	r5, [r2, #0]
   10af2:	aa0d      	add	r2, sp, #52	; 0x34
   10af4:	8817      	ldrh	r7, [r2, #0]
   10af6:	aa0e      	add	r2, sp, #56	; 0x38
   10af8:	8812      	ldrh	r2, [r2, #0]
   10afa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10afc:	9205      	str	r2, [sp, #20]
   10afe:	aa10      	add	r2, sp, #64	; 0x40
   10b00:	8812      	ldrh	r2, [r2, #0]
   10b02:	9202      	str	r2, [sp, #8]
	u32_t retcode;
	u8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
   10b04:	4a39      	ldr	r2, [pc, #228]	; (10bec <radio_init+0x104>)
   10b06:	6010      	str	r0, [r2, #0]

	/* initialise SCA */
	_radio.sca = sca;
   10b08:	20ce      	movs	r0, #206	; 0xce
   10b0a:	0040      	lsls	r0, r0, #1
   10b0c:	5411      	strb	r1, [r2, r0]

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;
   10b0e:	9902      	ldr	r1, [sp, #8]

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
   10b10:	4668      	mov	r0, sp

	/* initialise SCA */
	_radio.sca = sca;

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;
   10b12:	1861      	adds	r1, r4, r1
   10b14:	9103      	str	r1, [sp, #12]

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
   10b16:	21c6      	movs	r1, #198	; 0xc6
   10b18:	7900      	ldrb	r0, [r0, #4]
   10b1a:	0049      	lsls	r1, r1, #1
   10b1c:	5450      	strb	r0, [r2, r1]
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   10b1e:	208c      	movs	r0, #140	; 0x8c
	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
   10b20:	3908      	subs	r1, #8
   10b22:	5054      	str	r4, [r2, r1]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   10b24:	9901      	ldr	r1, [sp, #4]
   10b26:	0040      	lsls	r0, r0, #1
   10b28:	4348      	muls	r0, r1
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
   10b2a:	1cd9      	adds	r1, r3, #3
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
   10b2c:	3304      	adds	r3, #4
   10b2e:	b2de      	uxtb	r6, r3
   10b30:	23de      	movs	r3, #222	; 0xde
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   10b32:	1820      	adds	r0, r4, r0
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
   10b34:	005b      	lsls	r3, r3, #1
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
   10b36:	1c6c      	adds	r4, r5, #1
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
   10b38:	3502      	adds	r5, #2
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
   10b3a:	54d6      	strb	r6, [r2, r3]
	_radio.packet_tx_count = (tx_count_max + 1);
   10b3c:	b2ed      	uxtb	r5, r5
   10b3e:	3334      	adds	r3, #52	; 0x34
   10b40:	54d5      	strb	r5, [r2, r3]
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
   10b42:	b2e4      	uxtb	r4, r4
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;
   10b44:	3b20      	subs	r3, #32
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
   10b46:	b2c9      	uxtb	r1, r1
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;
   10b48:	54d1      	strb	r1, [r2, r3]
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
   10b4a:	9404      	str	r4, [sp, #16]
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
   10b4c:	3b18      	subs	r3, #24
	mem_radio +=
   10b4e:	00b4      	lsls	r4, r6, #2
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
   10b50:	50d0      	str	r0, [r2, r3]
	mem_radio +=
   10b52:	1904      	adds	r4, r0, r4
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
   10b54:	3330      	adds	r3, #48	; 0x30
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10b56:	00ed      	lsls	r5, r5, #3
	_radio.packet_rx = (void *)mem_radio;
	mem_radio +=
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
   10b58:	50d4      	str	r4, [r2, r3]
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10b5a:	1964      	adds	r4, r4, r5

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
   10b5c:	3304      	adds	r3, #4
   10b5e:	50d4      	str	r4, [r2, r3]
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((PDU_AC_SIZE_MAX + 1) <
   10b60:	1cf8      	adds	r0, r7, #3
	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
   10b62:	3b3c      	subs	r3, #60	; 0x3c
   10b64:	52d7      	strh	r7, [r2, r3]
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   10b66:	1964      	adds	r4, r4, r5
   10b68:	3302      	adds	r3, #2

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((PDU_AC_SIZE_MAX + 1) <
   10b6a:	2828      	cmp	r0, #40	; 0x28
   10b6c:	d903      	bls.n	10b76 <radio_init+0x8e>
	    (offsetof(struct pdu_data, payload) +
			_radio.packet_data_octets_max)) {
		_radio.packet_rx_data_pool_size =
   10b6e:	2003      	movs	r0, #3
   10b70:	370e      	adds	r7, #14
   10b72:	4387      	bics	r7, r0
   10b74:	e000      	b.n	10b78 <radio_init+0x90>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
   10b76:	2730      	movs	r7, #48	; 0x30
   10b78:	4379      	muls	r1, r7
   10b7a:	52d1      	strh	r1, [r2, r3]
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (PDU_AC_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10b7c:	23da      	movs	r3, #218	; 0xda
   10b7e:	2130      	movs	r1, #48	; 0x30
   10b80:	4d1a      	ldr	r5, [pc, #104]	; (10bec <radio_init+0x104>)
   10b82:	005b      	lsls	r3, r3, #1
   10b84:	52e9      	strh	r1, [r5, r3]
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10b86:	3b02      	subs	r3, #2
   10b88:	5aef      	ldrh	r7, [r5, r3]
   10b8a:	0038      	movs	r0, r7
   10b8c:	f7ef fb08 	bl	1a0 <__aeabi_uidiv>
   10b90:	23db      	movs	r3, #219	; 0xdb
   10b92:	005b      	lsls	r3, r3, #1
   10b94:	54e8      	strb	r0, [r5, r3]
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
   10b96:	3b0e      	subs	r3, #14
   10b98:	50ec      	str	r4, [r5, r3]
	mem_radio += _radio.packet_rx_data_pool_size;
   10b9a:	19e4      	adds	r4, r4, r7

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
   10b9c:	3318      	adds	r3, #24
   10b9e:	50ec      	str	r4, [r5, r3]
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   10ba0:	9b01      	ldr	r3, [sp, #4]
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
   10ba2:	9805      	ldr	r0, [sp, #20]
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   10ba4:	18f6      	adds	r6, r6, r3
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
   10ba6:	23ea      	movs	r3, #234	; 0xea
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   10ba8:	00f6      	lsls	r6, r6, #3
   10baa:	19a4      	adds	r4, r4, r6
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
   10bac:	005b      	lsls	r3, r3, #1
   10bae:	50ec      	str	r4, [r5, r3]
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
   10bb0:	3bd2      	subs	r3, #210	; 0xd2
   10bb2:	3bff      	subs	r3, #255	; 0xff
   10bb4:	300a      	adds	r0, #10
   10bb6:	4398      	bics	r0, r3
   10bb8:	33e2      	adds	r3, #226	; 0xe2
   10bba:	b280      	uxth	r0, r0
   10bbc:	33ff      	adds	r3, #255	; 0xff
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   10bbe:	3448      	adds	r4, #72	; 0x48

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
   10bc0:	52e8      	strh	r0, [r5, r3]
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
		       offsetof(struct pdu_data, payload) +
		       packet_tx_data_size);

	/* initialise tx data pool memory */
	_radio.pkt_tx_data_pool = mem_radio;
   10bc2:	3b08      	subs	r3, #8
   10bc4:	50ec      	str	r4, [r5, r3]
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
   10bc6:	9b04      	ldr	r3, [sp, #16]
   10bc8:	4343      	muls	r3, r0
   10bca:	18e4      	adds	r4, r4, r3
   10bcc:	9b03      	ldr	r3, [sp, #12]
   10bce:	1ae4      	subs	r4, r4, r3
	if (retcode) {
   10bd0:	d002      	beq.n	10bd8 <radio_init+0xf0>
		return (retcode + mem_size);
   10bd2:	9b02      	ldr	r3, [sp, #8]
   10bd4:	1918      	adds	r0, r3, r4
   10bd6:	e006      	b.n	10be6 <radio_init+0xfe>
	 * This is a simple flow control to rx data only on one selected
	 * connection handle.
	 * TODO: replace this feature with host-to-controller flowcontrol
	 * implementation/design.
	 */
	_radio.fc_ena = 1;
   10bd8:	23ff      	movs	r3, #255	; 0xff
   10bda:	2201      	movs	r2, #1
   10bdc:	005b      	lsls	r3, r3, #1
   10bde:	54ea      	strb	r2, [r5, r3]

	/* memory allocations */
	common_init();
   10be0:	f7fa fe1a 	bl	b818 <common_init>
#if defined(RADIO_UNIT_TEST) && \
	defined(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)
	chan_sel_2_ut();
#endif /* RADIO_UNIT_TEST && CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2 */

	return retcode;
   10be4:	0020      	movs	r0, r4
}
   10be6:	b007      	add	sp, #28
   10be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10bea:	46c0      	nop			; (mov r8, r8)
   10bec:	20001254 	.word	0x20001254

00010bf0 <ll_reset>:

void ll_reset(void)
{
   10bf0:	b570      	push	{r4, r5, r6, lr}
	u16_t conn_handle;

	/* disable advertiser events */
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   10bf2:	2103      	movs	r1, #3
   10bf4:	2005      	movs	r0, #5
   10bf6:	f7fa ff19 	bl	ba2c <role_disable>

	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   10bfa:	26c6      	movs	r6, #198	; 0xc6

	/* disable advertiser events */
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);

	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   10bfc:	2104      	movs	r1, #4
   10bfe:	2006      	movs	r0, #6
   10c00:	f7fa ff14 	bl	ba2c <role_disable>

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   10c04:	2500      	movs	r5, #0
   10c06:	0076      	lsls	r6, r6, #1
   10c08:	4c21      	ldr	r4, [pc, #132]	; (10c90 <ll_reset+0xa0>)
   10c0a:	5da3      	ldrb	r3, [r4, r6]
   10c0c:	42ab      	cmp	r3, r5
   10c0e:	d907      	bls.n	10c20 <ll_reset+0x30>
	     conn_handle++) {
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   10c10:	1de8      	adds	r0, r5, #7
   10c12:	b2c0      	uxtb	r0, r0
   10c14:	21ff      	movs	r1, #255	; 0xff
	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
	     conn_handle++) {
   10c16:	3501      	adds	r5, #1
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   10c18:	f7fa ff08 	bl	ba2c <role_disable>
	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
	     conn_handle++) {
   10c1c:	b2ad      	uxth	r5, r5
   10c1e:	e7f3      	b.n	10c08 <ll_reset+0x18>
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.nirk = 0;
	_radio.advertiser.is_enabled = 0;
   10c20:	0022      	movs	r2, r4
   10c22:	2101      	movs	r1, #1
   10c24:	32a4      	adds	r2, #164	; 0xa4
   10c26:	7813      	ldrb	r3, [r2, #0]
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.nirk = 0;
   10c28:	2500      	movs	r5, #0
	_radio.advertiser.is_enabled = 0;
   10c2a:	438b      	bics	r3, r1
   10c2c:	7013      	strb	r3, [r2, #0]
	_radio.advertiser.conn = NULL;
   10c2e:	0023      	movs	r3, r4
	_radio.scanner.is_enabled = 0;
   10c30:	22ae      	movs	r2, #174	; 0xae
	}

	/* reset controller context members */
	_radio.nirk = 0;
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
   10c32:	33fc      	adds	r3, #252	; 0xfc
	_radio.scanner.is_enabled = 0;
   10c34:	0052      	lsls	r2, r2, #1
	}

	/* reset controller context members */
	_radio.nirk = 0;
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
   10c36:	64dd      	str	r5, [r3, #76]	; 0x4c
	_radio.scanner.is_enabled = 0;
   10c38:	5ca3      	ldrb	r3, [r4, r2]
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.nirk = 0;
   10c3a:	7465      	strb	r5, [r4, #17]
	_radio.advertiser.is_enabled = 0;
	_radio.advertiser.conn = NULL;
	_radio.scanner.is_enabled = 0;
   10c3c:	438b      	bics	r3, r1
   10c3e:	54a3      	strb	r3, [r4, r2]
	_radio.scanner.conn = NULL;
   10c40:	23be      	movs	r3, #190	; 0xbe
   10c42:	005b      	lsls	r3, r3, #1
   10c44:	50e5      	str	r5, [r4, r3]
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   10c46:	312f      	adds	r1, #47	; 0x2f
   10c48:	3338      	adds	r3, #56	; 0x38
   10c4a:	52e1      	strh	r1, [r4, r3]
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   10c4c:	3b02      	subs	r3, #2
   10c4e:	5ae0      	ldrh	r0, [r4, r3]
   10c50:	f7ef faa6 	bl	1a0 <__aeabi_uidiv>
   10c54:	23db      	movs	r3, #219	; 0xdb
   10c56:	005b      	lsls	r3, r3, #1
   10c58:	54e0      	strb	r0, [r4, r3]
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
   10c5a:	23be      	movs	r3, #190	; 0xbe
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10c5c:	22e8      	movs	r2, #232	; 0xe8
	_radio.scanner.is_enabled = 0;
	_radio.scanner.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
   10c5e:	33ff      	adds	r3, #255	; 0xff
   10c60:	54e5      	strb	r5, [r4, r3]
	_radio.packet_rx_acquire = 0;
   10c62:	3301      	adds	r3, #1
   10c64:	54e5      	strb	r5, [r4, r3]
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   10c66:	3b02      	subs	r3, #2
   10c68:	5ce3      	ldrb	r3, [r4, r3]
   10c6a:	0052      	lsls	r2, r2, #1
   10c6c:	3b01      	subs	r3, #1
   10c6e:	54a3      	strb	r3, [r4, r2]
	_radio.packet_tx_first = 0;
   10c70:	23f2      	movs	r3, #242	; 0xf2
   10c72:	33ff      	adds	r3, #255	; 0xff
   10c74:	54e5      	strb	r5, [r4, r3]
	_radio.packet_tx_last = 0;
   10c76:	3301      	adds	r3, #1
   10c78:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_first = 0;
   10c7a:	23f4      	movs	r3, #244	; 0xf4
   10c7c:	33ff      	adds	r3, #255	; 0xff
   10c7e:	54e5      	strb	r5, [r4, r3]
	_radio.packet_release_last = 0;

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
   10c80:	0028      	movs	r0, r5
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
	_radio.packet_tx_first = 0;
	_radio.packet_tx_last = 0;
	_radio.packet_release_first = 0;
	_radio.packet_release_last = 0;
   10c82:	3301      	adds	r3, #1
   10c84:	54e5      	strb	r5, [r4, r3]

	/* reset whitelist and resolving list */
	ll_filter_reset(false);
   10c86:	f001 fa5b 	bl	12140 <ll_filter_reset>
	/* memory allocations */
	common_init();
   10c8a:	f7fa fdc5 	bl	b818 <common_init>
}
   10c8e:	bd70      	pop	{r4, r5, r6, pc}
   10c90:	20001254 	.word	0x20001254

00010c94 <radio_adv_data_get>:
	_radio.ticks_active_to_start = ticks_active_to_start;
}

struct radio_adv_data *radio_adv_data_get(void)
{
	return &_radio.advertiser.adv_data;
   10c94:	4801      	ldr	r0, [pc, #4]	; (10c9c <radio_adv_data_get+0x8>)
}
   10c96:	30a6      	adds	r0, #166	; 0xa6
   10c98:	4770      	bx	lr
   10c9a:	46c0      	nop			; (mov r8, r8)
   10c9c:	20001254 	.word	0x20001254

00010ca0 <radio_scan_data_get>:

struct radio_adv_data *radio_scan_data_get(void)
{
	return &_radio.advertiser.scan_data;
   10ca0:	4801      	ldr	r0, [pc, #4]	; (10ca8 <radio_scan_data_get+0x8>)
}
   10ca2:	30f6      	adds	r0, #246	; 0xf6
   10ca4:	4770      	bx	lr
   10ca6:	46c0      	nop			; (mov r8, r8)
   10ca8:	20001254 	.word	0x20001254

00010cac <radio_adv_is_enabled>:
	return status;
}

u32_t radio_adv_is_enabled(void)
{
	return _radio.advertiser.is_enabled;
   10cac:	4b03      	ldr	r3, [pc, #12]	; (10cbc <radio_adv_is_enabled+0x10>)
   10cae:	33a4      	adds	r3, #164	; 0xa4
   10cb0:	7818      	ldrb	r0, [r3, #0]
   10cb2:	07c0      	lsls	r0, r0, #31
   10cb4:	0fc0      	lsrs	r0, r0, #31
   10cb6:	b2c0      	uxtb	r0, r0
}
   10cb8:	4770      	bx	lr
   10cba:	46c0      	nop			; (mov r8, r8)
   10cbc:	20001254 	.word	0x20001254

00010cc0 <radio_adv_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
   10cc0:	4b05      	ldr	r3, [pc, #20]	; (10cd8 <radio_adv_filter_pol_get+0x18>)
		return _radio.advertiser.filter_policy;
	}

	return 0;
   10cc2:	2000      	movs	r0, #0
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.advertiser.is_enabled) {
   10cc4:	001a      	movs	r2, r3
   10cc6:	32a4      	adds	r2, #164	; 0xa4
   10cc8:	7812      	ldrb	r2, [r2, #0]
   10cca:	07d2      	lsls	r2, r2, #31
   10ccc:	d502      	bpl.n	10cd4 <radio_adv_filter_pol_get+0x14>
		return _radio.advertiser.filter_policy;
   10cce:	33a5      	adds	r3, #165	; 0xa5
   10cd0:	7818      	ldrb	r0, [r3, #0]
   10cd2:	0980      	lsrs	r0, r0, #6
	}

	return 0;
}
   10cd4:	4770      	bx	lr
   10cd6:	46c0      	nop			; (mov r8, r8)
   10cd8:	20001254 	.word	0x20001254

00010cdc <radio_scan_is_enabled>:
	return status;
}

u32_t radio_scan_is_enabled(void)
{
	return _radio.scanner.is_enabled;
   10cdc:	23ae      	movs	r3, #174	; 0xae
   10cde:	4a03      	ldr	r2, [pc, #12]	; (10cec <radio_scan_is_enabled+0x10>)
   10ce0:	005b      	lsls	r3, r3, #1
   10ce2:	5cd0      	ldrb	r0, [r2, r3]
   10ce4:	07c0      	lsls	r0, r0, #31
   10ce6:	0fc0      	lsrs	r0, r0, #31
   10ce8:	b2c0      	uxtb	r0, r0
}
   10cea:	4770      	bx	lr
   10cec:	20001254 	.word	0x20001254

00010cf0 <radio_scan_filter_pol_get>:
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
   10cf0:	22ae      	movs	r2, #174	; 0xae
   10cf2:	4b06      	ldr	r3, [pc, #24]	; (10d0c <radio_scan_filter_pol_get+0x1c>)
   10cf4:	0052      	lsls	r2, r2, #1
   10cf6:	5c9a      	ldrb	r2, [r3, r2]
		return _radio.scanner.filter_policy;
	}

	return 0;
   10cf8:	2000      	movs	r0, #0
	/* NOTE: filter_policy is only written in thread mode; if is_enabled is
	 * unset by ISR, returning the stale filter_policy is acceptable because
	 * the unset code path in ISR will generate a connection complete
	 * event.
	 */
	if (_radio.scanner.is_enabled) {
   10cfa:	07d2      	lsls	r2, r2, #31
   10cfc:	d504      	bpl.n	10d08 <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   10cfe:	225e      	movs	r2, #94	; 0x5e
   10d00:	32ff      	adds	r2, #255	; 0xff
   10d02:	5c98      	ldrb	r0, [r3, r2]
   10d04:	0680      	lsls	r0, r0, #26
   10d06:	0f80      	lsrs	r0, r0, #30
	}

	return 0;
}
   10d08:	4770      	bx	lr
   10d0a:	46c0      	nop			; (mov r8, r8)
   10d0c:	20001254 	.word	0x20001254

00010d10 <ll_conn_update>:
	return status;
}

u32_t ll_conn_update(u16_t handle, u8_t cmd, u8_t status, u16_t interval,
		     u16_t latency, u16_t timeout)
{
   10d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d12:	001f      	movs	r7, r3
   10d14:	ab06      	add	r3, sp, #24
   10d16:	881e      	ldrh	r6, [r3, #0]
   10d18:	ab07      	add	r3, sp, #28
   10d1a:	881d      	ldrh	r5, [r3, #0]
   10d1c:	000c      	movs	r4, r1
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
   10d1e:	f7fa fe6b 	bl	b9f8 <connection_get>
   10d22:	0003      	movs	r3, r0
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
		}

		return 1;
   10d24:	2001      	movs	r0, #1
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
   10d26:	2b00      	cmp	r3, #0
   10d28:	d03b      	beq.n	10da2 <ll_conn_update+0x92>
	    ((conn->llcp_req != conn->llcp_ack) &&
   10d2a:	001a      	movs	r2, r3
   10d2c:	0019      	movs	r1, r3
   10d2e:	3268      	adds	r2, #104	; 0x68
   10d30:	3169      	adds	r1, #105	; 0x69
   10d32:	7812      	ldrb	r2, [r2, #0]
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
   10d34:	7809      	ldrb	r1, [r1, #0]
   10d36:	4291      	cmp	r1, r2
   10d38:	d00c      	beq.n	10d54 <ll_conn_update+0x44>
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
   10d3a:	0019      	movs	r1, r3
   10d3c:	316a      	adds	r1, #106	; 0x6a

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
   10d3e:	7809      	ldrb	r1, [r1, #0]
   10d40:	4281      	cmp	r1, r0
   10d42:	d12e      	bne.n	10da2 <ll_conn_update+0x92>
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
	      (conn->llcp.connection_update.state !=
   10d44:	0019      	movs	r1, r3
   10d46:	3195      	adds	r1, #149	; 0x95
	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
   10d48:	7808      	ldrb	r0, [r1, #0]
   10d4a:	2107      	movs	r1, #7
   10d4c:	4001      	ands	r1, r0
	      (conn->llcp.connection_update.state !=
	       LLCP_CONN_STATE_APP_WAIT)))) {
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
   10d4e:	2002      	movs	r0, #2
	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
	    ((conn->llcp_req != conn->llcp_ack) &&
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
   10d50:	2904      	cmp	r1, #4
   10d52:	d126      	bne.n	10da2 <ll_conn_update+0x92>
		}

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
   10d54:	0018      	movs	r0, r3
   10d56:	2101      	movs	r1, #1
   10d58:	3094      	adds	r0, #148	; 0x94
   10d5a:	7001      	strb	r1, [r0, #0]
	conn->llcp.connection_update.win_offset_us = 0;
   10d5c:	208c      	movs	r0, #140	; 0x8c
   10d5e:	4684      	mov	ip, r0
   10d60:	449c      	add	ip, r3
   10d62:	4661      	mov	r1, ip
   10d64:	2000      	movs	r0, #0
   10d66:	6008      	str	r0, [r1, #0]
	conn->llcp.connection_update.interval = interval;
   10d68:	216c      	movs	r1, #108	; 0x6c
   10d6a:	468c      	mov	ip, r1
   10d6c:	449c      	add	ip, r3
   10d6e:	4661      	mov	r1, ip
   10d70:	800f      	strh	r7, [r1, #0]
	conn->llcp.connection_update.latency = latency;
   10d72:	001f      	movs	r7, r3
   10d74:	376e      	adds	r7, #110	; 0x6e
   10d76:	803e      	strh	r6, [r7, #0]
	conn->llcp.connection_update.timeout = timeout;
   10d78:	001e      	movs	r6, r3
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   10d7a:	2707      	movs	r7, #7
   10d7c:	3401      	adds	r4, #1

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
   10d7e:	3670      	adds	r6, #112	; 0x70
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   10d80:	403c      	ands	r4, r7

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
   10d82:	8035      	strh	r5, [r6, #0]
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   10d84:	0025      	movs	r5, r4
   10d86:	3625      	adds	r6, #37	; 0x25
   10d88:	7834      	ldrb	r4, [r6, #0]
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
   10d8a:	2101      	movs	r1, #1
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
   10d8c:	43bc      	bics	r4, r7
	conn->llcp.connection_update.is_internal = 0;
   10d8e:	432c      	orrs	r4, r5
   10d90:	2518      	movs	r5, #24
   10d92:	43ac      	bics	r4, r5
   10d94:	7034      	strb	r4, [r6, #0]

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
   10d96:	001c      	movs	r4, r3
	conn->llcp_req++;
   10d98:	3201      	adds	r2, #1
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
   10d9a:	346a      	adds	r4, #106	; 0x6a
	conn->llcp_req++;
   10d9c:	3368      	adds	r3, #104	; 0x68
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
   10d9e:	7021      	strb	r1, [r4, #0]
	conn->llcp_req++;
   10da0:	701a      	strb	r2, [r3, #0]

	return 0;
}
   10da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010da4 <ll_start_enc_req_send>:
	return 1;
}

u32_t ll_start_enc_req_send(u16_t handle, u8_t error_code,
			    u8_t const *const ltk)
{
   10da4:	b570      	push	{r4, r5, r6, lr}
   10da6:	000d      	movs	r5, r1
   10da8:	0016      	movs	r6, r2
	struct connection *conn;

	conn = connection_get(handle);
   10daa:	f7fa fe25 	bl	b9f8 <connection_get>
   10dae:	1e04      	subs	r4, r0, #0
	if (!conn) {
   10db0:	d101      	bne.n	10db6 <ll_start_enc_req_send+0x12>
		return 1;
   10db2:	2001      	movs	r0, #1
   10db4:	e03c      	b.n	10e30 <ll_start_enc_req_send+0x8c>
	}

	if (error_code) {
   10db6:	2d00      	cmp	r5, #0
   10db8:	d024      	beq.n	10e04 <ll_start_enc_req_send+0x60>
		if (conn->refresh == 0) {
   10dba:	0003      	movs	r3, r0
   10dbc:	33c0      	adds	r3, #192	; 0xc0
   10dbe:	7818      	ldrb	r0, [r3, #0]
   10dc0:	2340      	movs	r3, #64	; 0x40
   10dc2:	4018      	ands	r0, r3
   10dc4:	d110      	bne.n	10de8 <ll_start_enc_req_send+0x44>
			if (conn->llcp_req != conn->llcp_ack) {
   10dc6:	0022      	movs	r2, r4
   10dc8:	0023      	movs	r3, r4
   10dca:	3268      	adds	r2, #104	; 0x68
   10dcc:	3369      	adds	r3, #105	; 0x69
   10dce:	7811      	ldrb	r1, [r2, #0]
   10dd0:	781b      	ldrb	r3, [r3, #0]
   10dd2:	428b      	cmp	r3, r1
   10dd4:	d1ed      	bne.n	10db2 <ll_start_enc_req_send+0xe>
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;
   10dd6:	0021      	movs	r1, r4
   10dd8:	316c      	adds	r1, #108	; 0x6c
   10dda:	700d      	strb	r5, [r1, #0]

			conn->llcp_type = LLCP_ENCRYPTION;
   10ddc:	2103      	movs	r1, #3
   10dde:	346a      	adds	r4, #106	; 0x6a
			conn->llcp_req++;
   10de0:	3301      	adds	r3, #1
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
   10de2:	7021      	strb	r1, [r4, #0]
			conn->llcp_req++;
   10de4:	7013      	strb	r3, [r2, #0]
   10de6:	e023      	b.n	10e30 <ll_start_enc_req_send+0x8c>
		} else {
			if (conn->llcp_terminate.ack !=
   10de8:	0023      	movs	r3, r4
			    conn->llcp_terminate.req) {
   10dea:	0022      	movs	r2, r4
			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
		} else {
			if (conn->llcp_terminate.ack !=
   10dec:	33a5      	adds	r3, #165	; 0xa5
			    conn->llcp_terminate.req) {
   10dee:	32a4      	adds	r2, #164	; 0xa4
			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
		} else {
			if (conn->llcp_terminate.ack !=
   10df0:	7819      	ldrb	r1, [r3, #0]
   10df2:	7813      	ldrb	r3, [r2, #0]
   10df4:	428b      	cmp	r3, r1
   10df6:	d1dc      	bne.n	10db2 <ll_start_enc_req_send+0xe>
			    conn->llcp_terminate.req) {
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;
   10df8:	34a6      	adds	r4, #166	; 0xa6

			conn->llcp_terminate.req++;
   10dfa:	3301      	adds	r3, #1
			if (conn->llcp_terminate.ack !=
			    conn->llcp_terminate.req) {
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;
   10dfc:	7025      	strb	r5, [r4, #0]

		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_req++;
	}

	return 0;
   10dfe:	2000      	movs	r0, #0
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;

			conn->llcp_terminate.req++;
   10e00:	7013      	strb	r3, [r2, #0]
   10e02:	e015      	b.n	10e30 <ll_start_enc_req_send+0x8c>
		}
	} else {
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   10e04:	2210      	movs	r2, #16
   10e06:	0031      	movs	r1, r6
   10e08:	3077      	adds	r0, #119	; 0x77
   10e0a:	f7f0 faab 	bl	1364 <memcpy>
		       sizeof(conn->llcp.encryption.ltk));

		if (conn->llcp_req != conn->llcp_ack) {
   10e0e:	0022      	movs	r2, r4
   10e10:	0023      	movs	r3, r4
   10e12:	3268      	adds	r2, #104	; 0x68
   10e14:	3369      	adds	r3, #105	; 0x69
   10e16:	7811      	ldrb	r1, [r2, #0]
   10e18:	781b      	ldrb	r3, [r3, #0]
   10e1a:	428b      	cmp	r3, r1
   10e1c:	d1c9      	bne.n	10db2 <ll_start_enc_req_send+0xe>
			return 1;
		}

		conn->llcp.encryption.error_code = 0;
   10e1e:	0021      	movs	r1, r4
   10e20:	316c      	adds	r1, #108	; 0x6c
   10e22:	700d      	strb	r5, [r1, #0]

		conn->llcp_type = LLCP_ENCRYPTION;
   10e24:	2103      	movs	r1, #3
		conn->llcp_req++;
	}

	return 0;
   10e26:	0028      	movs	r0, r5
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
   10e28:	346a      	adds	r4, #106	; 0x6a
		conn->llcp_req++;
   10e2a:	3301      	adds	r3, #1
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
   10e2c:	7021      	strb	r1, [r4, #0]
		conn->llcp_req++;
   10e2e:	7013      	strb	r3, [r2, #0]
	}

	return 0;
}
   10e30:	bd70      	pop	{r4, r5, r6, pc}

00010e32 <ll_feature_req_send>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_ENC */

u32_t ll_feature_req_send(u16_t handle)
{
   10e32:	b510      	push	{r4, lr}
	struct connection *conn;

	conn = connection_get(handle);
   10e34:	f7fa fde0 	bl	b9f8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
   10e38:	2201      	movs	r2, #1
u32_t ll_feature_req_send(u16_t handle)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10e3a:	2800      	cmp	r0, #0
   10e3c:	d00d      	beq.n	10e5a <ll_feature_req_send+0x28>
   10e3e:	0001      	movs	r1, r0
   10e40:	0003      	movs	r3, r0
   10e42:	3168      	adds	r1, #104	; 0x68
   10e44:	3369      	adds	r3, #105	; 0x69
   10e46:	780c      	ldrb	r4, [r1, #0]
   10e48:	781b      	ldrb	r3, [r3, #0]
   10e4a:	42a3      	cmp	r3, r4
   10e4c:	d105      	bne.n	10e5a <ll_feature_req_send+0x28>
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   10e4e:	3203      	adds	r2, #3
   10e50:	306a      	adds	r0, #106	; 0x6a
   10e52:	7002      	strb	r2, [r0, #0]
	conn->llcp_req++;

	return 0;
   10e54:	2200      	movs	r2, #0
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
	conn->llcp_req++;
   10e56:	3301      	adds	r3, #1
   10e58:	700b      	strb	r3, [r1, #0]

	return 0;
}
   10e5a:	0010      	movs	r0, r2
   10e5c:	bd10      	pop	{r4, pc}

00010e5e <ll_version_ind_send>:

u32_t ll_version_ind_send(u16_t handle)
{
   10e5e:	b510      	push	{r4, lr}
	struct connection *conn;

	conn = connection_get(handle);
   10e60:	f7fa fdca 	bl	b9f8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
   10e64:	2201      	movs	r2, #1
u32_t ll_version_ind_send(u16_t handle)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   10e66:	2800      	cmp	r0, #0
   10e68:	d00d      	beq.n	10e86 <ll_version_ind_send+0x28>
   10e6a:	0001      	movs	r1, r0
   10e6c:	0003      	movs	r3, r0
   10e6e:	3168      	adds	r1, #104	; 0x68
   10e70:	3369      	adds	r3, #105	; 0x69
   10e72:	780c      	ldrb	r4, [r1, #0]
   10e74:	781b      	ldrb	r3, [r3, #0]
   10e76:	42a3      	cmp	r3, r4
   10e78:	d105      	bne.n	10e86 <ll_version_ind_send+0x28>
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   10e7a:	3204      	adds	r2, #4
   10e7c:	306a      	adds	r0, #106	; 0x6a
   10e7e:	7002      	strb	r2, [r0, #0]
	conn->llcp_req++;

	return 0;
   10e80:	2200      	movs	r2, #0
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
	conn->llcp_req++;
   10e82:	3301      	adds	r3, #1
   10e84:	700b      	strb	r3, [r1, #0]

	return 0;
}
   10e86:	0010      	movs	r0, r2
   10e88:	bd10      	pop	{r4, pc}

00010e8a <ll_terminate_ind_send>:

u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
   10e8a:	b570      	push	{r4, r5, r6, lr}
   10e8c:	000c      	movs	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
   10e8e:	f7fa fdb3 	bl	b9f8 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
   10e92:	2201      	movs	r2, #1
u32_t ll_terminate_ind_send(u16_t handle, u8_t reason)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   10e94:	2800      	cmp	r0, #0
   10e96:	d00c      	beq.n	10eb2 <ll_terminate_ind_send+0x28>
   10e98:	0003      	movs	r3, r0
   10e9a:	0001      	movs	r1, r0
   10e9c:	33a5      	adds	r3, #165	; 0xa5
   10e9e:	31a4      	adds	r1, #164	; 0xa4
   10ea0:	781d      	ldrb	r5, [r3, #0]
   10ea2:	780b      	ldrb	r3, [r1, #0]
   10ea4:	42ab      	cmp	r3, r5
   10ea6:	d104      	bne.n	10eb2 <ll_terminate_ind_send+0x28>
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;

	conn->llcp_terminate.req++;
   10ea8:	189b      	adds	r3, r3, r2

	return 0;
   10eaa:	2200      	movs	r2, #0
	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;
   10eac:	30a6      	adds	r0, #166	; 0xa6
   10eae:	7004      	strb	r4, [r0, #0]

	conn->llcp_terminate.req++;
   10eb0:	700b      	strb	r3, [r1, #0]

	return 0;
}
   10eb2:	0010      	movs	r0, r2
   10eb4:	bd70      	pop	{r4, r5, r6, pc}

00010eb6 <ll_length_req_send>:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
   10eb6:	b570      	push	{r4, r5, r6, lr}
   10eb8:	000c      	movs	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
   10eba:	f7fa fd9d 	bl	b9f8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
		return 1;
   10ebe:	2201      	movs	r2, #1
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10ec0:	2800      	cmp	r0, #0
   10ec2:	d019      	beq.n	10ef8 <ll_length_req_send+0x42>
   10ec4:	0003      	movs	r3, r0
   10ec6:	3368      	adds	r3, #104	; 0x68
   10ec8:	7819      	ldrb	r1, [r3, #0]
   10eca:	189b      	adds	r3, r3, r2
   10ecc:	781b      	ldrb	r3, [r3, #0]
   10ece:	4299      	cmp	r1, r3
   10ed0:	d112      	bne.n	10ef8 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   10ed2:	0001      	movs	r1, r0
   10ed4:	0003      	movs	r3, r0
   10ed6:	31b4      	adds	r1, #180	; 0xb4
   10ed8:	33b5      	adds	r3, #181	; 0xb5
   10eda:	780d      	ldrb	r5, [r1, #0]
u32_t ll_length_req_send(u16_t handle, u16_t tx_octets)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10edc:	781b      	ldrb	r3, [r3, #0]
   10ede:	42ab      	cmp	r3, r5
   10ee0:	d10a      	bne.n	10ef8 <ll_length_req_send+0x42>
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10ee2:	0005      	movs	r5, r0
   10ee4:	2603      	movs	r6, #3
   10ee6:	35b6      	adds	r5, #182	; 0xb6
   10ee8:	782a      	ldrb	r2, [r5, #0]
	conn->llcp_length.tx_octets = tx_octets;
   10eea:	30ba      	adds	r0, #186	; 0xba
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10eec:	43b2      	bics	r2, r6
   10eee:	702a      	strb	r2, [r5, #0]
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;

	return 0;
   10ef0:	2200      	movs	r2, #0

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;
   10ef2:	3301      	adds	r3, #1
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
	conn->llcp_length.tx_octets = tx_octets;
   10ef4:	8004      	strh	r4, [r0, #0]
	conn->llcp_length.req++;
   10ef6:	700b      	strb	r3, [r1, #0]

	return 0;
}
   10ef8:	0010      	movs	r0, r2
   10efa:	bd70      	pop	{r4, r5, r6, pc}

00010efc <ll_length_default_get>:

void ll_length_default_get(u16_t *max_tx_octets, u16_t *max_tx_time)
{
	*max_tx_octets = _radio.default_tx_octets;
   10efc:	22cf      	movs	r2, #207	; 0xcf
   10efe:	4b04      	ldr	r3, [pc, #16]	; (10f10 <ll_length_default_get+0x14>)
   10f00:	0052      	lsls	r2, r2, #1
   10f02:	5a9a      	ldrh	r2, [r3, r2]
   10f04:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   10f06:	22d0      	movs	r2, #208	; 0xd0
   10f08:	0052      	lsls	r2, r2, #1
   10f0a:	5a9b      	ldrh	r3, [r3, r2]
   10f0c:	800b      	strh	r3, [r1, #0]
}
   10f0e:	4770      	bx	lr
   10f10:	20001254 	.word	0x20001254

00010f14 <ll_length_default_set>:

u32_t ll_length_default_set(u16_t max_tx_octets, u16_t max_tx_time)
{
	/* TODO: parameter check (for BT 5.0 compliance) */

	_radio.default_tx_octets = max_tx_octets;
   10f14:	22cf      	movs	r2, #207	; 0xcf
   10f16:	4b03      	ldr	r3, [pc, #12]	; (10f24 <ll_length_default_set+0x10>)
   10f18:	0052      	lsls	r2, r2, #1
   10f1a:	5298      	strh	r0, [r3, r2]
	_radio.default_tx_time = max_tx_time;
   10f1c:	3202      	adds	r2, #2

	return 0;
}
   10f1e:	2000      	movs	r0, #0
u32_t ll_length_default_set(u16_t max_tx_octets, u16_t max_tx_time)
{
	/* TODO: parameter check (for BT 5.0 compliance) */

	_radio.default_tx_octets = max_tx_octets;
	_radio.default_tx_time = max_tx_time;
   10f20:	5299      	strh	r1, [r3, r2]

	return 0;
}
   10f22:	4770      	bx	lr
   10f24:	20001254 	.word	0x20001254

00010f28 <ll_length_max_get>:

void ll_length_max_get(u16_t *max_tx_octets, u16_t *max_tx_time,
		       u16_t *max_rx_octets, u16_t *max_rx_time)
{
   10f28:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10f2a:	241b      	movs	r4, #27
   10f2c:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
   10f2e:	20a4      	movs	r0, #164	; 0xa4
   10f30:	0040      	lsls	r0, r0, #1
   10f32:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   10f34:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
   10f36:	8018      	strh	r0, [r3, #0]
}
   10f38:	bd10      	pop	{r4, pc}

00010f3a <ll_phy_get>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
u32_t ll_phy_get(u16_t handle, u8_t *tx, u8_t *rx)
{
   10f3a:	b570      	push	{r4, r5, r6, lr}
   10f3c:	000d      	movs	r5, r1
   10f3e:	0014      	movs	r4, r2
	struct connection *conn;

	conn = connection_get(handle);
   10f40:	f7fa fd5a 	bl	b9f8 <connection_get>
	if (!conn) {
		return 1;
   10f44:	2301      	movs	r3, #1
u32_t ll_phy_get(u16_t handle, u8_t *tx, u8_t *rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn) {
   10f46:	2800      	cmp	r0, #0
   10f48:	d00b      	beq.n	10f62 <ll_phy_get+0x28>
		return 1;
	}

	/* TODO: context safe read */
	*tx = conn->phy_tx;
   10f4a:	0003      	movs	r3, r0
   10f4c:	3332      	adds	r3, #50	; 0x32
   10f4e:	781b      	ldrb	r3, [r3, #0]
	*rx = conn->phy_rx;
   10f50:	3033      	adds	r0, #51	; 0x33
	if (!conn) {
		return 1;
	}

	/* TODO: context safe read */
	*tx = conn->phy_tx;
   10f52:	069b      	lsls	r3, r3, #26
   10f54:	0f5b      	lsrs	r3, r3, #29
   10f56:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   10f58:	7803      	ldrb	r3, [r0, #0]
   10f5a:	069b      	lsls	r3, r3, #26
   10f5c:	0f5b      	lsrs	r3, r3, #29
   10f5e:	7023      	strb	r3, [r4, #0]

	return 0;
   10f60:	2300      	movs	r3, #0
}
   10f62:	0018      	movs	r0, r3
   10f64:	bd70      	pop	{r4, r5, r6, pc}
	...

00010f68 <ll_phy_default_set>:

u32_t ll_phy_default_set(u8_t tx, u8_t rx)
{
	/* TODO: validate against supported phy */

	_radio.default_phy_tx = tx;
   10f68:	22d1      	movs	r2, #209	; 0xd1
   10f6a:	4b03      	ldr	r3, [pc, #12]	; (10f78 <ll_phy_default_set+0x10>)
   10f6c:	0052      	lsls	r2, r2, #1
   10f6e:	5298      	strh	r0, [r3, r2]
	_radio.default_phy_rx = rx;
   10f70:	3202      	adds	r2, #2

	return 0;
}
   10f72:	2000      	movs	r0, #0
u32_t ll_phy_default_set(u8_t tx, u8_t rx)
{
	/* TODO: validate against supported phy */

	_radio.default_phy_tx = tx;
	_radio.default_phy_rx = rx;
   10f74:	5299      	strh	r1, [r3, r2]

	return 0;
}
   10f76:	4770      	bx	lr
   10f78:	20001254 	.word	0x20001254

00010f7c <ll_phy_req_send>:

u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
   10f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f7e:	0015      	movs	r5, r2
   10f80:	000e      	movs	r6, r1
   10f82:	9301      	str	r3, [sp, #4]
	struct connection *conn;

	conn = connection_get(handle);
   10f84:	f7fa fd38 	bl	b9f8 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
   10f88:	2201      	movs	r2, #1
u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10f8a:	2800      	cmp	r0, #0
   10f8c:	d023      	beq.n	10fd6 <ll_phy_req_send+0x5a>
   10f8e:	0003      	movs	r3, r0
   10f90:	3368      	adds	r3, #104	; 0x68
   10f92:	7819      	ldrb	r1, [r3, #0]
   10f94:	189b      	adds	r3, r3, r2
   10f96:	781b      	ldrb	r3, [r3, #0]
   10f98:	4299      	cmp	r1, r3
   10f9a:	d11c      	bne.n	10fd6 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   10f9c:	0007      	movs	r7, r0
   10f9e:	0001      	movs	r1, r0
   10fa0:	37bc      	adds	r7, #188	; 0xbc
   10fa2:	31bd      	adds	r1, #189	; 0xbd
   10fa4:	783b      	ldrb	r3, [r7, #0]
u32_t ll_phy_req_send(u16_t handle, u8_t tx, u8_t flags, u8_t rx)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   10fa6:	7809      	ldrb	r1, [r1, #0]
   10fa8:	4299      	cmp	r1, r3
   10faa:	d114      	bne.n	10fd6 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10fac:	0003      	movs	r3, r0
   10fae:	33be      	adds	r3, #190	; 0xbe
	conn->llcp_phy.cmd = 1;
   10fb0:	7858      	ldrb	r0, [r3, #1]
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
   10fb2:	4015      	ands	r5, r2
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
		return 1;
	}

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
   10fb4:	0004      	movs	r4, r0
	conn->llcp_phy.tx = tx;
   10fb6:	2007      	movs	r0, #7
   10fb8:	4006      	ands	r6, r0
	conn->llcp_phy.flags = flags;
   10fba:	3805      	subs	r0, #5
   10fbc:	4304      	orrs	r4, r0
   10fbe:	0020      	movs	r0, r4
   10fc0:	4390      	bics	r0, r2
   10fc2:	4305      	orrs	r5, r0
   10fc4:	705d      	strb	r5, [r3, #1]
	conn->llcp_phy.rx = rx;
   10fc6:	9a01      	ldr	r2, [sp, #4]
   10fc8:	00b6      	lsls	r6, r6, #2
   10fca:	0154      	lsls	r4, r2, #5
	conn->llcp_phy.req++;

	return 0;
   10fcc:	2200      	movs	r2, #0

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
	conn->llcp_phy.rx = rx;
   10fce:	4334      	orrs	r4, r6
	conn->llcp_phy.req++;
   10fd0:	3101      	adds	r1, #1

	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
	conn->llcp_phy.cmd = 1;
	conn->llcp_phy.tx = tx;
	conn->llcp_phy.flags = flags;
	conn->llcp_phy.rx = rx;
   10fd2:	701c      	strb	r4, [r3, #0]
	conn->llcp_phy.req++;
   10fd4:	7039      	strb	r1, [r7, #0]

	return 0;
}
   10fd6:	0010      	movs	r0, r2
   10fd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00010fdc <radio_rx_get>:

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
   10fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fde:	0005      	movs	r5, r0
   10fe0:	0008      	movs	r0, r1
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   10fe2:	21e6      	movs	r1, #230	; 0xe6
   10fe4:	4b1b      	ldr	r3, [pc, #108]	; (11054 <radio_rx_get+0x78>)
   10fe6:	22e4      	movs	r2, #228	; 0xe4
   10fe8:	0049      	lsls	r1, r1, #1
   10fea:	585c      	ldr	r4, [r3, r1]
   10fec:	0019      	movs	r1, r3
   10fee:	0052      	lsls	r2, r2, #1
   10ff0:	589a      	ldr	r2, [r3, r2]
   10ff2:	31f4      	adds	r1, #244	; 0xf4

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
   10ff4:	b085      	sub	sp, #20
   10ff6:	001e      	movs	r6, r3
   10ff8:	31ff      	adds	r1, #255	; 0xff
	u8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   10ffa:	42a2      	cmp	r2, r4
   10ffc:	d01d      	beq.n	1103a <radio_rx_get+0x5e>
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   10ffe:	6853      	ldr	r3, [r2, #4]

		cmplt = tx_cmplt_get(handle,
   11000:	781a      	ldrb	r2, [r3, #0]

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   11002:	9301      	str	r3, [sp, #4]

		cmplt = tx_cmplt_get(handle,
   11004:	f7fa fca8 	bl	b958 <tx_cmplt_get>
   11008:	1e04      	subs	r4, r0, #0
				&_radio.packet_release_first,
				_radio_pdu_node_rx->hdr.onion.
				packet_release_last);
		if (!cmplt) {
   1100a:	d11d      	bne.n	11048 <radio_rx_get+0x6c>
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
   1100c:	23f4      	movs	r3, #244	; 0xf4
			cmplt_curr = 0;
   1100e:	0007      	movs	r7, r0
				packet_release_last);
		if (!cmplt) {
			u16_t handle;
			u8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
   11010:	33ff      	adds	r3, #255	; 0xff
   11012:	5cf3      	ldrb	r3, [r6, r3]
   11014:	aa02      	add	r2, sp, #8
   11016:	7153      	strb	r3, [r2, #5]
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
   11018:	23fa      	movs	r3, #250	; 0xfa
   1101a:	005b      	lsls	r3, r3, #1
   1101c:	5cf2      	ldrb	r2, [r6, r3]
   1101e:	ab02      	add	r3, sp, #8
   11020:	b2d2      	uxtb	r2, r2
   11022:	1d59      	adds	r1, r3, #5
   11024:	1d98      	adds	r0, r3, #6
   11026:	f7fa fc97 	bl	b958 <tx_cmplt_get>
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
				 (cmplt_prev != cmplt_curr));
   1102a:	2f00      	cmp	r7, #0
   1102c:	d001      	beq.n	11032 <radio_rx_get+0x56>

	return cmplt;
}

u8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx, u16_t *handle)
{
   1102e:	0007      	movs	r7, r0
   11030:	e7f2      	b.n	11018 <radio_rx_get+0x3c>
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
   11032:	2800      	cmp	r0, #0
   11034:	d1fb      	bne.n	1102e <radio_rx_get+0x52>
				 (cmplt_prev != cmplt_curr));

			*radio_pdu_node_rx = _radio_pdu_node_rx;
   11036:	9b01      	ldr	r3, [sp, #4]
   11038:	e007      	b.n	1104a <radio_rx_get+0x6e>
		} else {
			*radio_pdu_node_rx = NULL;
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   1103a:	22fa      	movs	r2, #250	; 0xfa
   1103c:	0052      	lsls	r2, r2, #1
   1103e:	5c9a      	ldrb	r2, [r3, r2]
   11040:	b2d2      	uxtb	r2, r2
   11042:	f7fa fc89 	bl	b958 <tx_cmplt_get>
   11046:	0004      	movs	r4, r0
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
   11048:	2300      	movs	r3, #0
	}

	return cmplt;
}
   1104a:	0020      	movs	r0, r4
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
   1104c:	602b      	str	r3, [r5, #0]
	}

	return cmplt;
}
   1104e:	b005      	add	sp, #20
   11050:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11052:	46c0      	nop			; (mov r8, r8)
   11054:	20001254 	.word	0x20001254

00011058 <radio_rx_mem_release>:
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
   11058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1105a:	2680      	movs	r6, #128	; 0x80
   1105c:	0005      	movs	r5, r0
	struct radio_pdu_node_rx *_radio_pdu_node_rx;
	struct connection *conn;

	_radio_pdu_node_rx = *radio_pdu_node_rx;
   1105e:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   11060:	2800      	cmp	r0, #0
   11062:	d02b      	beq.n	110bc <radio_rx_mem_release+0x64>
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;

		switch (_radio_pdu_node_rx_free->hdr.type) {
   11064:	7903      	ldrb	r3, [r0, #4]
	_radio_pdu_node_rx = *radio_pdu_node_rx;
	while (_radio_pdu_node_rx) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   11066:	6807      	ldr	r7, [r0, #0]
   11068:	2b0c      	cmp	r3, #12
   1106a:	d81a      	bhi.n	110a2 <radio_rx_mem_release+0x4a>
   1106c:	2201      	movs	r2, #1
   1106e:	409a      	lsls	r2, r3
   11070:	0013      	movs	r3, r2
   11072:	4a15      	ldr	r2, [pc, #84]	; (110c8 <radio_rx_mem_release+0x70>)
   11074:	4c15      	ldr	r4, [pc, #84]	; (110cc <radio_rx_mem_release+0x74>)
   11076:	4213      	tst	r3, r2
   11078:	d10c      	bne.n	11094 <radio_rx_mem_release+0x3c>
   1107a:	4233      	tst	r3, r6
   1107c:	d011      	beq.n	110a2 <radio_rx_mem_release+0x4a>
			mem_release(_radio_pdu_node_rx_free,
				    &_radio.pkt_rx_data_free);
			break;

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1107e:	23c2      	movs	r3, #194	; 0xc2
   11080:	218c      	movs	r1, #140	; 0x8c
   11082:	005b      	lsls	r3, r3, #1
   11084:	88c2      	ldrh	r2, [r0, #6]
   11086:	0049      	lsls	r1, r1, #1
   11088:	58e0      	ldr	r0, [r4, r3]
   1108a:	f7f8 ff26 	bl	9eda <mem_get>
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
   1108e:	0021      	movs	r1, r4
   11090:	3189      	adds	r1, #137	; 0x89
   11092:	e001      	b.n	11098 <radio_rx_mem_release+0x40>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
		case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

			mem_release(_radio_pdu_node_rx_free,
   11094:	0021      	movs	r1, r4
   11096:	31ad      	adds	r1, #173	; 0xad

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
   11098:	31ff      	adds	r1, #255	; 0xff
   1109a:	f7f8 ff00 	bl	9e9e <mem_release>
		}
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
   1109e:	0038      	movs	r0, r7
   110a0:	e7de      	b.n	11060 <radio_rx_mem_release+0x8>

			mem_release(conn, &_radio.conn_free);
			break;

		default:
			LL_ASSERT(0);
   110a2:	4b0b      	ldr	r3, [pc, #44]	; (110d0 <radio_rx_mem_release+0x78>)
   110a4:	4a0b      	ldr	r2, [pc, #44]	; (110d4 <radio_rx_mem_release+0x7c>)
   110a6:	9301      	str	r3, [sp, #4]
   110a8:	4b0b      	ldr	r3, [pc, #44]	; (110d8 <radio_rx_mem_release+0x80>)
   110aa:	490c      	ldr	r1, [pc, #48]	; (110dc <radio_rx_mem_release+0x84>)
   110ac:	9300      	str	r3, [sp, #0]
   110ae:	480c      	ldr	r0, [pc, #48]	; (110e0 <radio_rx_mem_release+0x88>)
   110b0:	4b0c      	ldr	r3, [pc, #48]	; (110e4 <radio_rx_mem_release+0x8c>)
   110b2:	f7f0 fb59 	bl	1768 <printk>
   110b6:	b662      	cpsie	i
   110b8:	2004      	movs	r0, #4
   110ba:	df02      	svc	2
			break;
		}
	}

	*radio_pdu_node_rx = _radio_pdu_node_rx;
   110bc:	6028      	str	r0, [r5, #0]

	packet_rx_allocate(0xff);
   110be:	30ff      	adds	r0, #255	; 0xff
   110c0:	f7fa fb5e 	bl	b780 <packet_rx_allocate>
}
   110c4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   110c6:	46c0      	nop			; (mov r8, r8)
   110c8:	00001f7e 	.word	0x00001f7e
   110cc:	20001254 	.word	0x20001254
   110d0:	000145b0 	.word	0x000145b0
   110d4:	00014570 	.word	0x00014570
   110d8:	000145b5 	.word	0x000145b5
   110dc:	00014577 	.word	0x00014577
   110e0:	00014bc5 	.word	0x00014bc5
   110e4:	00017003 	.word	0x00017003

000110e8 <do_radio_rx_fc_set>:
		_radio.fc_req = req;
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
   110e8:	b530      	push	{r4, r5, lr}
   110ea:	4b19      	ldr	r3, [pc, #100]	; (11150 <do_radio_rx_fc_set+0x68>)
   110ec:	0004      	movs	r4, r0
	if (req == ack) {
   110ee:	4291      	cmp	r1, r2
   110f0:	d11f      	bne.n	11132 <do_radio_rx_fc_set+0x4a>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   110f2:	22e6      	movs	r2, #230	; 0xe6
   110f4:	20e4      	movs	r0, #228	; 0xe4
   110f6:	0052      	lsls	r2, r2, #1
   110f8:	0040      	lsls	r0, r0, #1
   110fa:	581d      	ldr	r5, [r3, r0]
   110fc:	589a      	ldr	r2, [r3, r2]
				_radio.fc_ack = ack;

				return 1;
			}
		} else {
			return 1;
   110fe:	38c8      	subs	r0, #200	; 0xc8
   11100:	38ff      	subs	r0, #255	; 0xff
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   11102:	4295      	cmp	r5, r2
   11104:	d123      	bne.n	1114e <do_radio_rx_fc_set+0x66>
			u8_t ack1 = ack;

			if (ack1 == 0) {
   11106:	1e0a      	subs	r2, r1, #0
   11108:	d100      	bne.n	1110c <do_radio_rx_fc_set+0x24>
				ack1 = TRIPLE_BUFFER_SIZE;
   1110a:	2203      	movs	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
   1110c:	3a01      	subs	r2, #1
   1110e:	b2d2      	uxtb	r2, r2
   11110:	0010      	movs	r0, r2
   11112:	30f8      	adds	r0, #248	; 0xf8
   11114:	0040      	lsls	r0, r0, #1
   11116:	1818      	adds	r0, r3, r0
   11118:	80c4      	strh	r4, [r0, #6]
			_radio.fc_ack = ack1;
   1111a:	24fe      	movs	r4, #254	; 0xfe
   1111c:	34ff      	adds	r4, #255	; 0xff
   1111e:	551a      	strb	r2, [r3, r4]

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
   11120:	22fe      	movs	r2, #254	; 0xfe
   11122:	0052      	lsls	r2, r2, #1
   11124:	5c9a      	ldrb	r2, [r3, r2]
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
   11126:	2000      	movs	r0, #0
			}
			_radio.fc_handle[--ack1] = handle;
			_radio.fc_ack = ack1;

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
   11128:	4291      	cmp	r1, r2
   1112a:	d010      	beq.n	1114e <do_radio_rx_fc_set+0x66>
				_radio.fc_ack = ack;
   1112c:	5519      	strb	r1, [r3, r4]

				return 1;
   1112e:	3001      	adds	r0, #1
   11130:	e00d      	b.n	1114e <do_radio_rx_fc_set+0x66>
			}
		} else {
			return 1;
		}
	} else if (((req == 0) &&
   11132:	2900      	cmp	r1, #0
   11134:	d103      	bne.n	1113e <do_radio_rx_fc_set+0x56>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   11136:	22fd      	movs	r2, #253	; 0xfd
   11138:	0052      	lsls	r2, r2, #1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
   1113a:	5a9b      	ldrh	r3, [r3, r2]
   1113c:	e003      	b.n	11146 <do_radio_rx_fc_set+0x5e>
		} else {
			return 1;
		}
	} else if (((req == 0) &&
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   1113e:	31f7      	adds	r1, #247	; 0xf7
   11140:	0049      	lsls	r1, r1, #1
   11142:	1859      	adds	r1, r3, r1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
   11144:	88cb      	ldrh	r3, [r1, #6]
   11146:	1b18      	subs	r0, r3, r4
   11148:	1e43      	subs	r3, r0, #1
   1114a:	4198      	sbcs	r0, r3
   1114c:	b2c0      	uxtb	r0, r0
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
}
   1114e:	bd30      	pop	{r4, r5, pc}
   11150:	20001254 	.word	0x20001254

00011154 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
   11154:	22ff      	movs	r2, #255	; 0xff

	return 0;
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
   11156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.fc_ena) {
   11158:	4b16      	ldr	r3, [pc, #88]	; (111b4 <radio_rx_fc_set+0x60>)
   1115a:	0052      	lsls	r2, r2, #1
   1115c:	5c9a      	ldrb	r2, [r3, r2]
   1115e:	2a00      	cmp	r2, #0
   11160:	d101      	bne.n	11166 <radio_rx_fc_set+0x12>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
   11162:	2000      	movs	r0, #0
   11164:	e024      	b.n	111b0 <radio_rx_fc_set+0x5c>
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
   11166:	22fe      	movs	r2, #254	; 0xfe
		u8_t ack = _radio.fc_ack;
   11168:	25fe      	movs	r5, #254	; 0xfe
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
   1116a:	0052      	lsls	r2, r2, #1
   1116c:	5c9c      	ldrb	r4, [r3, r2]
		u8_t ack = _radio.fc_ack;
   1116e:	35ff      	adds	r5, #255	; 0xff
}

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
	if (_radio.fc_ena) {
		u8_t req = _radio.fc_req;
   11170:	b2e4      	uxtb	r4, r4
		u8_t ack = _radio.fc_ack;
   11172:	5d5a      	ldrb	r2, [r3, r5]

		if (fc) {
   11174:	2900      	cmp	r1, #0
   11176:	d006      	beq.n	11186 <radio_rx_fc_set+0x32>
			if (handle != 0xffff) {
   11178:	4b0f      	ldr	r3, [pc, #60]	; (111b8 <radio_rx_fc_set+0x64>)
   1117a:	4298      	cmp	r0, r3
   1117c:	d0f1      	beq.n	11162 <radio_rx_fc_set+0xe>
				return do_radio_rx_fc_set(handle, req, ack);
   1117e:	0021      	movs	r1, r4
   11180:	f7ff ffb2 	bl	110e8 <do_radio_rx_fc_set>
   11184:	e014      	b.n	111b0 <radio_rx_fc_set+0x5c>
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   11186:	20e4      	movs	r0, #228	; 0xe4
   11188:	27e6      	movs	r7, #230	; 0xe6
   1118a:	0040      	lsls	r0, r0, #1
   1118c:	007f      	lsls	r7, r7, #1
   1118e:	5818      	ldr	r0, [r3, r0]
   11190:	59de      	ldr	r6, [r3, r7]
   11192:	42b0      	cmp	r0, r6
   11194:	d1e5      	bne.n	11162 <radio_rx_fc_set+0xe>
   11196:	4294      	cmp	r4, r2
   11198:	d0e3      	beq.n	11162 <radio_rx_fc_set+0xe>
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1119a:	59df      	ldr	r7, [r3, r7]
				return do_radio_rx_fc_set(handle, req, ack);
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;
   1119c:	555c      	strb	r4, [r3, r5]

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1119e:	42b8      	cmp	r0, r7
   111a0:	d0df      	beq.n	11162 <radio_rx_fc_set+0xe>
			    (req == _radio.fc_req)) {
   111a2:	20fe      	movs	r0, #254	; 0xfe
   111a4:	0040      	lsls	r0, r0, #1
   111a6:	5c18      	ldrb	r0, [r3, r0]
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   111a8:	4284      	cmp	r4, r0
   111aa:	d1da      	bne.n	11162 <radio_rx_fc_set+0xe>
				_radio.fc_ack = ack;
			}
		}
	}

	return 0;
   111ac:	0008      	movs	r0, r1
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
			    (req == _radio.fc_req)) {
				_radio.fc_ack = ack;
   111ae:	555a      	strb	r2, [r3, r5]
			}
		}
	}

	return 0;
}
   111b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111b2:	46c0      	nop			; (mov r8, r8)
   111b4:	20001254 	.word	0x20001254
   111b8:	0000ffff 	.word	0x0000ffff

000111bc <radio_tx_mem_acquire>:

	return 0;
}

struct radio_pdu_node_tx *radio_tx_mem_acquire(void)
{
   111bc:	b510      	push	{r4, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   111be:	4803      	ldr	r0, [pc, #12]	; (111cc <radio_tx_mem_acquire+0x10>)
   111c0:	30e1      	adds	r0, #225	; 0xe1
   111c2:	30ff      	adds	r0, #255	; 0xff
   111c4:	f7f8 fe52 	bl	9e6c <mem_acquire>
}
   111c8:	bd10      	pop	{r4, pc}
   111ca:	46c0      	nop			; (mov r8, r8)
   111cc:	20001254 	.word	0x20001254

000111d0 <radio_tx_mem_release>:

void radio_tx_mem_release(struct radio_pdu_node_tx *node_tx)
{
   111d0:	b510      	push	{r4, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   111d2:	4903      	ldr	r1, [pc, #12]	; (111e0 <radio_tx_mem_release+0x10>)
   111d4:	31e1      	adds	r1, #225	; 0xe1
   111d6:	31ff      	adds	r1, #255	; 0xff
   111d8:	f7f8 fe61 	bl	9e9e <mem_release>
}
   111dc:	bd10      	pop	{r4, pc}
   111de:	46c0      	nop			; (mov r8, r8)
   111e0:	20001254 	.word	0x20001254

000111e4 <radio_tx_mem_enqueue>:
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   111e4:	23f9      	movs	r3, #249	; 0xf9
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   111e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   111e8:	4c33      	ldr	r4, [pc, #204]	; (112b8 <radio_tx_mem_enqueue+0xd4>)
   111ea:	005b      	lsls	r3, r3, #1
   111ec:	5ce5      	ldrb	r5, [r4, r3]
	if (last == _radio.packet_tx_count) {
   111ee:	3b02      	subs	r3, #2
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   111f0:	3501      	adds	r5, #1
	if (last == _radio.packet_tx_count) {
   111f2:	5ce3      	ldrb	r3, [r4, r3]
{
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   111f4:	b2ed      	uxtb	r5, r5
	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   111f6:	b089      	sub	sp, #36	; 0x24
   111f8:	0007      	movs	r7, r0
   111fa:	000e      	movs	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
	if (last == _radio.packet_tx_count) {
   111fc:	42ab      	cmp	r3, r5
   111fe:	d100      	bne.n	11202 <radio_tx_mem_enqueue+0x1e>
		last = 0;
   11200:	2500      	movs	r5, #0
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   11202:	0038      	movs	r0, r7
   11204:	f7fa fbf8 	bl	b9f8 <connection_get>
   11208:	1e03      	subs	r3, r0, #0
	if (!conn || (last == _radio.packet_tx_first)) {
   1120a:	d052      	beq.n	112b2 <radio_tx_mem_enqueue+0xce>
   1120c:	22f2      	movs	r2, #242	; 0xf2
   1120e:	32ff      	adds	r2, #255	; 0xff
   11210:	5ca2      	ldrb	r2, [r4, r2]
   11212:	4295      	cmp	r5, r2
   11214:	d04d      	beq.n	112b2 <radio_tx_mem_enqueue+0xce>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   11216:	22f2      	movs	r2, #242	; 0xf2
   11218:	0052      	lsls	r2, r2, #1
   1121a:	5aa2      	ldrh	r2, [r4, r2]
   1121c:	7971      	ldrb	r1, [r6, #5]
   1121e:	3a07      	subs	r2, #7
   11220:	4291      	cmp	r1, r2
   11222:	d908      	bls.n	11236 <radio_tx_mem_enqueue+0x52>
   11224:	4b25      	ldr	r3, [pc, #148]	; (112bc <radio_tx_mem_enqueue+0xd8>)
   11226:	4a26      	ldr	r2, [pc, #152]	; (112c0 <radio_tx_mem_enqueue+0xdc>)
   11228:	9301      	str	r3, [sp, #4]
   1122a:	4b26      	ldr	r3, [pc, #152]	; (112c4 <radio_tx_mem_enqueue+0xe0>)
   1122c:	4926      	ldr	r1, [pc, #152]	; (112c8 <radio_tx_mem_enqueue+0xe4>)
   1122e:	9300      	str	r3, [sp, #0]
   11230:	4826      	ldr	r0, [pc, #152]	; (112cc <radio_tx_mem_enqueue+0xe8>)
   11232:	4b27      	ldr	r3, [pc, #156]	; (112d0 <radio_tx_mem_enqueue+0xec>)
   11234:	e038      	b.n	112a8 <radio_tx_mem_enqueue+0xc4>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   11236:	22f4      	movs	r2, #244	; 0xf4
   11238:	21f9      	movs	r1, #249	; 0xf9
   1123a:	0052      	lsls	r2, r2, #1
   1123c:	0049      	lsls	r1, r1, #1
   1123e:	58a0      	ldr	r0, [r4, r2]
   11240:	5c62      	ldrb	r2, [r4, r1]
   11242:	00d2      	lsls	r2, r2, #3
   11244:	5217      	strh	r7, [r2, r0]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   11246:	5c62      	ldrb	r2, [r4, r1]
   11248:	00d2      	lsls	r2, r2, #3
   1124a:	1882      	adds	r2, r0, r2
   1124c:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   1124e:	5465      	strb	r5, [r4, r1]

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
   11250:	001c      	movs	r4, r3
   11252:	3444      	adds	r4, #68	; 0x44
   11254:	39f2      	subs	r1, #242	; 0xf2
   11256:	7822      	ldrb	r2, [r4, #0]
   11258:	39ff      	subs	r1, #255	; 0xff
   1125a:	420a      	tst	r2, r1
   1125c:	d101      	bne.n	11262 <radio_tx_mem_enqueue+0x7e>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   1125e:	2000      	movs	r0, #0
   11260:	e028      	b.n	112b4 <radio_tx_mem_enqueue+0xd0>
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
	_radio.packet_tx_last = last;

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
   11262:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
   11264:	2800      	cmp	r0, #0
   11266:	d0fa      	beq.n	1125e <radio_tx_mem_enqueue+0x7a>
   11268:	2510      	movs	r5, #16
   1126a:	0010      	movs	r0, r2
   1126c:	4028      	ands	r0, r5
   1126e:	d1f6      	bne.n	1125e <radio_tx_mem_enqueue+0x7a>
	    (conn->role.slave.latency_cancel == 0)) {
		u32_t ticker_status;

		conn->role.slave.latency_cancel = 1;
   11270:	432a      	orrs	r2, r5
   11272:	7022      	strb	r2, [r4, #0]

		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   11274:	8c1a      	ldrh	r2, [r3, #32]
   11276:	9306      	str	r3, [sp, #24]
   11278:	4b16      	ldr	r3, [pc, #88]	; (112d4 <radio_tx_mem_enqueue+0xf0>)
   1127a:	3207      	adds	r2, #7
   1127c:	9305      	str	r3, [sp, #20]
   1127e:	9103      	str	r1, [sp, #12]
   11280:	0003      	movs	r3, r0
   11282:	b2d2      	uxtb	r2, r2
   11284:	9004      	str	r0, [sp, #16]
   11286:	9002      	str	r0, [sp, #8]
   11288:	9001      	str	r0, [sp, #4]
   1128a:	9000      	str	r0, [sp, #0]
   1128c:	2103      	movs	r1, #3
   1128e:	f7fa f903 	bl	b498 <ticker_update>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11292:	2302      	movs	r3, #2
   11294:	4398      	bics	r0, r3
   11296:	d0e2      	beq.n	1125e <radio_tx_mem_enqueue+0x7a>
   11298:	4b08      	ldr	r3, [pc, #32]	; (112bc <radio_tx_mem_enqueue+0xd8>)
   1129a:	4a09      	ldr	r2, [pc, #36]	; (112c0 <radio_tx_mem_enqueue+0xdc>)
   1129c:	9301      	str	r3, [sp, #4]
   1129e:	4b09      	ldr	r3, [pc, #36]	; (112c4 <radio_tx_mem_enqueue+0xe0>)
   112a0:	4909      	ldr	r1, [pc, #36]	; (112c8 <radio_tx_mem_enqueue+0xe4>)
   112a2:	9300      	str	r3, [sp, #0]
   112a4:	480c      	ldr	r0, [pc, #48]	; (112d8 <radio_tx_mem_enqueue+0xf4>)
   112a6:	4b0a      	ldr	r3, [pc, #40]	; (112d0 <radio_tx_mem_enqueue+0xec>)
   112a8:	f7f0 fa5e 	bl	1768 <printk>
   112ac:	b662      	cpsie	i
   112ae:	2004      	movs	r0, #4
   112b0:	df02      	svc	2
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
	if (!conn || (last == _radio.packet_tx_first)) {
		return 1;
   112b2:	2001      	movs	r0, #1
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
}
   112b4:	b009      	add	sp, #36	; 0x24
   112b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112b8:	20001254 	.word	0x20001254
   112bc:	000145b0 	.word	0x000145b0
   112c0:	00014570 	.word	0x00014570
   112c4:	000145b5 	.word	0x000145b5
   112c8:	00014577 	.word	0x00014577
   112cc:	000164db 	.word	0x000164db
   112d0:	00017181 	.word	0x00017181
   112d4:	0000c161 	.word	0x0000c161
   112d8:	00015cb7 	.word	0x00015cb7

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
   112dc:	4770      	bx	lr
	...

000112e0 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   112e0:	b510      	push	{r4, lr}
   112e2:	4b09      	ldr	r3, [pc, #36]	; (11308 <ll_adv_scan_state_cb+0x28>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}

static void rpa_refresh_start(void)
{
	if (!rl_enable) {
   112e4:	781b      	ldrb	r3, [r3, #0]
	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
	if (bm) {
   112e6:	2800      	cmp	r0, #0
   112e8:	d008      	beq.n	112fc <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}

static void rpa_refresh_start(void)
{
	if (!rl_enable) {
   112ea:	2b00      	cmp	r3, #0
   112ec:	d00b      	beq.n	11306 <ll_adv_scan_state_cb+0x26>
		return;
	}

	BT_DBG("");
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   112ee:	4b07      	ldr	r3, [pc, #28]	; (1130c <ll_adv_scan_state_cb+0x2c>)
   112f0:	4907      	ldr	r1, [pc, #28]	; (11310 <ll_adv_scan_state_cb+0x30>)
   112f2:	681a      	ldr	r2, [r3, #0]
   112f4:	4807      	ldr	r0, [pc, #28]	; (11314 <ll_adv_scan_state_cb+0x34>)
   112f6:	f002 feab 	bl	14050 <k_delayed_work_submit_to_queue>
   112fa:	e004      	b.n	11306 <ll_adv_scan_state_cb+0x26>
}

static void rpa_refresh_stop(void)
{
	if (!rl_enable) {
   112fc:	2b00      	cmp	r3, #0
   112fe:	d002      	beq.n	11306 <ll_adv_scan_state_cb+0x26>
		return;
	}

	k_delayed_work_cancel(&rpa_work);
   11300:	4803      	ldr	r0, [pc, #12]	; (11310 <ll_adv_scan_state_cb+0x30>)
   11302:	f002 fe6d 	bl	13fe0 <k_delayed_work_cancel>
	if (bm) {
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
	}
}
   11306:	bd10      	pop	{r4, pc}
   11308:	20001ceb 	.word	0x20001ceb
   1130c:	20001fe8 	.word	0x20001fe8
   11310:	20001f60 	.word	0x20001f60
   11314:	20002000 	.word	0x20002000

00011318 <radio_adv_enable>:
u32_t radio_adv_enable(u8_t phy_p, u16_t interval, u8_t chl_map,
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
   11318:	b5f0      	push	{r4, r5, r6, r7, lr}
   1131a:	b093      	sub	sp, #76	; 0x4c
   1131c:	930f      	str	r3, [sp, #60]	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1131e:	2302      	movs	r3, #2
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   11320:	4db4      	ldr	r5, [pc, #720]	; (115f4 <radio_adv_enable+0x2dc>)
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11322:	9311      	str	r3, [sp, #68]	; 0x44
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   11324:	002b      	movs	r3, r5
   11326:	33a4      	adds	r3, #164	; 0xa4
u32_t radio_adv_enable(u8_t phy_p, u16_t interval, u8_t chl_map,
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
   11328:	920e      	str	r2, [sp, #56]	; 0x38
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   1132a:	781a      	ldrb	r2, [r3, #0]
   1132c:	2301      	movs	r3, #1
u32_t radio_adv_enable(u8_t phy_p, u16_t interval, u8_t chl_map,
		       u8_t filter_policy)
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
u32_t radio_adv_enable(u16_t interval, u8_t chl_map, u8_t filter_policy)
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
{
   1132e:	900d      	str	r0, [sp, #52]	; 0x34
   11330:	910a      	str	r1, [sp, #40]	; 0x28
	u32_t ticks_slot_offset;
	struct connection *conn;
	struct pdu_adv *pdu_adv;
	u32_t ret;

	if (_radio.advertiser.is_enabled) {
   11332:	401a      	ands	r2, r3
   11334:	d000      	beq.n	11338 <radio_adv_enable+0x20>
   11336:	e159      	b.n	115ec <radio_adv_enable+0x2d4>
		return 1;
	}

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   11338:	002b      	movs	r3, r5
   1133a:	33f5      	adds	r3, #245	; 0xf5

	if (_radio.advertiser.is_enabled) {
		return 1;
	}

	pdu_adv = (struct pdu_adv *)
   1133c:	7819      	ldrb	r1, [r3, #0]
   1133e:	2327      	movs	r3, #39	; 0x27
   11340:	434b      	muls	r3, r1
   11342:	33a0      	adds	r3, #160	; 0xa0
   11344:	18eb      	adds	r3, r5, r3
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   11346:	7999      	ldrb	r1, [r3, #6]

	if (_radio.advertiser.is_enabled) {
		return 1;
	}

	pdu_adv = (struct pdu_adv *)
   11348:	930c      	str	r3, [sp, #48]	; 0x30
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   1134a:	230f      	movs	r3, #15
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
	} else {
		conn = NULL;
   1134c:	0017      	movs	r7, r2
	}

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   1134e:	400b      	ands	r3, r1
   11350:	2b01      	cmp	r3, #1
   11352:	d900      	bls.n	11356 <radio_adv_enable+0x3e>
   11354:	e092      	b.n	1147c <radio_adv_enable+0x164>
	    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND)) {
		void *link;

		if (_radio.advertiser.conn) {
   11356:	4ba8      	ldr	r3, [pc, #672]	; (115f8 <radio_adv_enable+0x2e0>)
   11358:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
   1135a:	2c00      	cmp	r4, #0
   1135c:	d000      	beq.n	11360 <radio_adv_enable+0x48>
   1135e:	e145      	b.n	115ec <radio_adv_enable+0x2d4>
			return 1;
		}

		link = mem_acquire(&_radio.link_rx_free);
   11360:	002e      	movs	r6, r5
   11362:	36c5      	adds	r6, #197	; 0xc5
   11364:	36ff      	adds	r6, #255	; 0xff
   11366:	0030      	movs	r0, r6
   11368:	f7f8 fd80 	bl	9e6c <mem_acquire>
   1136c:	900b      	str	r0, [sp, #44]	; 0x2c
		if (!link) {
   1136e:	2800      	cmp	r0, #0
   11370:	d100      	bne.n	11374 <radio_adv_enable+0x5c>
   11372:	e13b      	b.n	115ec <radio_adv_enable+0x2d4>
			return 1;
		}

		conn = mem_acquire(&_radio.conn_free);
   11374:	0028      	movs	r0, r5
   11376:	3089      	adds	r0, #137	; 0x89
   11378:	30ff      	adds	r0, #255	; 0xff
   1137a:	f7f8 fd77 	bl	9e6c <mem_acquire>
   1137e:	1e07      	subs	r7, r0, #0
		if (!conn) {
   11380:	d102      	bne.n	11388 <radio_adv_enable+0x70>
			mem_release(link, &_radio.link_rx_free);
   11382:	0031      	movs	r1, r6
   11384:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11386:	e12f      	b.n	115e8 <radio_adv_enable+0x2d0>

			return 1;
		}

		conn->handle = 0xFFFF;
   11388:	2301      	movs	r3, #1
   1138a:	425b      	negs	r3, r3
   1138c:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   1138e:	0003      	movs	r3, r0
		conn->data_chan_sel = 0;
   11390:	2640      	movs	r6, #64	; 0x40

			return 1;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
   11392:	4a9a      	ldr	r2, [pc, #616]	; (115fc <radio_adv_enable+0x2e4>)
   11394:	3398      	adds	r3, #152	; 0x98
   11396:	601a      	str	r2, [r3, #0]
		conn->data_chan_sel = 0;
   11398:	7f03      	ldrb	r3, [r0, #28]
		conn->data_chan_use = 0;
   1139a:	77c4      	strb	r4, [r0, #31]
			return 1;
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
   1139c:	43b3      	bics	r3, r6
   1139e:	7703      	strb	r3, [r0, #28]
		conn->event_counter = 0;
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
   113a0:	23cf      	movs	r3, #207	; 0xcf

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEAT;
		conn->data_chan_sel = 0;
		conn->data_chan_use = 0;
		conn->event_counter = 0;
   113a2:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   113a4:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
   113a6:	8544      	strh	r4, [r0, #42]	; 0x2a

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
   113a8:	005b      	lsls	r3, r3, #1
   113aa:	5aeb      	ldrh	r3, [r5, r3]
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
   113ac:	2107      	movs	r1, #7
		conn->event_counter = 0;
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
   113ae:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   113b0:	231b      	movs	r3, #27
   113b2:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   113b4:	8603      	strh	r3, [r0, #48]	; 0x30
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
   113b6:	3388      	adds	r3, #136	; 0x88
   113b8:	33ff      	adds	r3, #255	; 0xff
   113ba:	003a      	movs	r2, r7
   113bc:	5aeb      	ldrh	r3, [r5, r3]
   113be:	3232      	adds	r2, #50	; 0x32
   113c0:	400b      	ands	r3, r1
   113c2:	0018      	movs	r0, r3
   113c4:	7813      	ldrb	r3, [r2, #0]
   113c6:	438b      	bics	r3, r1
		conn->phy_tx = BIT(0);
   113c8:	4303      	orrs	r3, r0
   113ca:	2038      	movs	r0, #56	; 0x38
   113cc:	4383      	bics	r3, r0
   113ce:	3830      	subs	r0, #48	; 0x30
		conn->phy_pref_flags = 0;
   113d0:	4303      	orrs	r3, r0
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->phy_pref_tx = _radio.default_phy_tx;
		conn->phy_tx = BIT(0);
   113d2:	4684      	mov	ip, r0
		conn->phy_pref_flags = 0;
		conn->phy_flags = 0;
   113d4:	43b3      	bics	r3, r6
   113d6:	3077      	adds	r0, #119	; 0x77
   113d8:	4003      	ands	r3, r0
   113da:	7013      	strb	r3, [r2, #0]
		conn->phy_pref_rx = _radio.default_phy_rx;
   113dc:	23d2      	movs	r3, #210	; 0xd2
   113de:	005b      	lsls	r3, r3, #1
   113e0:	5aeb      	ldrh	r3, [r5, r3]
   113e2:	7850      	ldrb	r0, [r2, #1]
   113e4:	400b      	ands	r3, r1
   113e6:	4388      	bics	r0, r1
		conn->phy_rx = BIT(0);
   113e8:	4318      	orrs	r0, r3
   113ea:	2338      	movs	r3, #56	; 0x38
   113ec:	4398      	bics	r0, r3
   113ee:	4663      	mov	r3, ip
   113f0:	4318      	orrs	r0, r3
   113f2:	7050      	strb	r0, [r2, #1]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
   113f4:	0038      	movs	r0, r7
   113f6:	3044      	adds	r0, #68	; 0x44
   113f8:	7803      	ldrb	r3, [r0, #0]
		conn->role.slave.latency_cancel = 0;
   113fa:	3906      	subs	r1, #6
   113fc:	430b      	orrs	r3, r1
   113fe:	310f      	adds	r1, #15
   11400:	438b      	bics	r3, r1
   11402:	7003      	strb	r3, [r0, #0]
		conn->role.slave.window_widening_prepare_us = 0;
		conn->role.slave.window_widening_event_us = 0;
		conn->role.slave.ticks_to_offset = 0;
		conn->supervision_expire = 6;
   11404:	2306      	movs	r3, #6
   11406:	86fb      	strh	r3, [r7, #54]	; 0x36
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
   11408:	003b      	movs	r3, r7
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
   1140a:	2001      	movs	r0, #1
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
   1140c:	3368      	adds	r3, #104	; 0x68
		conn->phy_flags = 0;
		conn->phy_pref_rx = _radio.default_phy_rx;
		conn->phy_rx = BIT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->role.slave.role = 1;
   1140e:	1d3a      	adds	r2, r7, #4
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
   11410:	653c      	str	r4, [r7, #80]	; 0x50
		conn->role.slave.window_widening_event_us = 0;
   11412:	657c      	str	r4, [r7, #84]	; 0x54
		conn->role.slave.ticks_to_offset = 0;
   11414:	667c      	str	r4, [r7, #100]	; 0x64
		conn->supervision_expire = 6;
		conn->procedure_expire = 0;
   11416:	877c      	strh	r4, [r7, #58]	; 0x3a

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
   11418:	87d4      	strh	r4, [r2, #62]	; 0x3e
		conn->appto_expire = 0;
   1141a:	87fc      	strh	r4, [r7, #62]	; 0x3e
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
   1141c:	3298      	adds	r2, #152	; 0x98
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
   1141e:	701c      	strb	r4, [r3, #0]
		conn->llcp_ack = 0;
   11420:	705c      	strb	r4, [r3, #1]
		conn->llcp_version.tx = 0;
   11422:	7813      	ldrb	r3, [r2, #0]
		conn->llcp_version.rx = 0;
   11424:	4383      	bics	r3, r0
   11426:	1800      	adds	r0, r0, r0
   11428:	4383      	bics	r3, r0
   1142a:	7013      	strb	r3, [r2, #0]
		conn->llcp_terminate.req = 0;
   1142c:	003b      	movs	r3, r7
   1142e:	33a4      	adds	r3, #164	; 0xa4
   11430:	701c      	strb	r4, [r3, #0]
		conn->llcp_terminate.ack = 0;
   11432:	705c      	strb	r4, [r3, #1]
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   11434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
		conn->llcp_terminate.req = 0;
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
   11436:	70dc      	strb	r4, [r3, #3]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   11438:	3304      	adds	r3, #4
   1143a:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
		conn->llcp_phy.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
   1143c:	003a      	movs	r2, r7
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->llcp_length.req = 0;
   1143e:	731c      	strb	r4, [r3, #12]
		conn->llcp_length.ack = 0;
   11440:	735c      	strb	r4, [r3, #13]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PHY)
		conn->llcp_phy.req = 0;
   11442:	751c      	strb	r4, [r3, #20]
		conn->llcp_phy.ack = 0;
   11444:	755c      	strb	r4, [r3, #21]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PHY */

		conn->sn = 0;
   11446:	32c0      	adds	r2, #192	; 0xc0
   11448:	7813      	ldrb	r3, [r2, #0]
		conn->nesn = 0;
   1144a:	3801      	subs	r0, #1
   1144c:	4383      	bics	r3, r0
		conn->pause_rx = 0;
   1144e:	3001      	adds	r0, #1
   11450:	4383      	bics	r3, r0
		conn->pause_tx = 0;
   11452:	3002      	adds	r0, #2
   11454:	4383      	bics	r3, r0
		conn->enc_rx = 0;
   11456:	4660      	mov	r0, ip
   11458:	4383      	bics	r3, r0
		conn->enc_tx = 0;
   1145a:	438b      	bics	r3, r1
		conn->refresh = 0;
   1145c:	3110      	adds	r1, #16
   1145e:	438b      	bics	r3, r1
		conn->empty = 0;
   11460:	43b3      	bics	r3, r6
   11462:	315f      	adds	r1, #95	; 0x5f
   11464:	400b      	ands	r3, r1
   11466:	7013      	strb	r3, [r2, #0]
		conn->pkt_tx_head = NULL;
   11468:	003b      	movs	r3, r7
   1146a:	33fc      	adds	r3, #252	; 0xfc
   1146c:	609c      	str	r4, [r3, #8]
		conn->pkt_tx_ctrl = NULL;
   1146e:	60dc      	str	r4, [r3, #12]
		conn->pkt_tx_data = NULL;
   11470:	611c      	str	r4, [r3, #16]
		conn->pkt_tx_last = NULL;
   11472:	615c      	str	r4, [r3, #20]
		conn->packet_tx_head_len = 0;
   11474:	761c      	strb	r4, [r3, #24]
		conn->packet_tx_head_offset = 0;
   11476:	765c      	strb	r4, [r3, #25]
		conn->rssi_latest = 0x7F;
		conn->rssi_reported = 0x7F;
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
   11478:	4b5f      	ldr	r3, [pc, #380]	; (115f8 <radio_adv_enable+0x2e0>)
   1147a:	64df      	str	r7, [r3, #76]	; 0x4c
	} else {
		conn = NULL;
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
   1147c:	4c5d      	ldr	r4, [pc, #372]	; (115f4 <radio_adv_enable+0x2dc>)
   1147e:	2307      	movs	r3, #7
   11480:	0021      	movs	r1, r4
   11482:	31a4      	adds	r1, #164	; 0xa4
   11484:	784a      	ldrb	r2, [r1, #1]
   11486:	980d      	ldr	r0, [sp, #52]	; 0x34
   11488:	439a      	bics	r2, r3
   1148a:	4018      	ands	r0, r3
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
   1148c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1148e:	4302      	orrs	r2, r0
   11490:	2038      	movs	r0, #56	; 0x38
   11492:	401d      	ands	r5, r3
   11494:	00eb      	lsls	r3, r5, #3
	_radio.advertiser.filter_policy = filter_policy;
   11496:	253f      	movs	r5, #63	; 0x3f

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	_radio.advertiser.phy_p = phy_p;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
   11498:	4382      	bics	r2, r0
	_radio.advertiser.filter_policy = filter_policy;
   1149a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1149c:	4313      	orrs	r3, r2
   1149e:	402b      	ands	r3, r5
   114a0:	0180      	lsls	r0, r0, #6
   114a2:	4303      	orrs	r3, r0
   114a4:	704b      	strb	r3, [r1, #1]

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
   114a6:	2380      	movs	r3, #128	; 0x80
   114a8:	009b      	lsls	r3, r3, #2
   114aa:	58e5      	ldr	r5, [r4, r3]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
	_radio.advertiser.filter_policy = filter_policy;

	_radio.advertiser.hdr.ticks_active_to_start =
   114ac:	0023      	movs	r3, r4
		_radio.ticks_active_to_start;
	_radio.advertiser.hdr.ticks_xtal_to_start =
   114ae:	0022      	movs	r2, r4
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	_radio.advertiser.chl_map = chl_map;
	_radio.advertiser.filter_policy = filter_policy;

	_radio.advertiser.hdr.ticks_active_to_start =
   114b0:	3398      	adds	r3, #152	; 0x98
   114b2:	601d      	str	r5, [r3, #0]
		_radio.ticks_active_to_start;
	_radio.advertiser.hdr.ticks_xtal_to_start =
   114b4:	2327      	movs	r3, #39	; 0x27
   114b6:	3294      	adds	r2, #148	; 0x94
   114b8:	6013      	str	r3, [r2, #0]
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
   114ba:	0022      	movs	r2, r4
   114bc:	2100      	movs	r1, #0
   114be:	329c      	adds	r2, #156	; 0x9c
   114c0:	6011      	str	r1, [r2, #0]
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.advertiser.hdr.ticks_slot =
   114c2:	0022      	movs	r2, r4
   114c4:	3182      	adds	r1, #130	; 0x82
   114c6:	32a0      	adds	r2, #160	; 0xa0
   114c8:	6011      	str	r1, [r2, #0]
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
		/* Max. chain is ADV_IND + SCAN_REQ + SCAN_RESP */
		((376 + 150 + 176 + 150 + 376) * 3));

	ticks_slot_offset =
   114ca:	429d      	cmp	r5, r3
   114cc:	d200      	bcs.n	114d0 <radio_adv_enable+0x1b8>
   114ce:	001d      	movs	r5, r3
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   114d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   114d2:	ae11      	add	r6, sp, #68	; 0x44
   114d4:	799a      	ldrb	r2, [r3, #6]
   114d6:	230f      	movs	r3, #15
   114d8:	4013      	ands	r3, r2
   114da:	2b01      	cmp	r3, #1
   114dc:	d138      	bne.n	11550 <radio_adv_enable+0x238>
   114de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   114e0:	2b00      	cmp	r3, #0
   114e2:	d135      	bne.n	11550 <radio_adv_enable+0x238>
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
   114e4:	f7fa f8c4 	bl	b670 <ticker_ticks_now_get>

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				   RADIO_TICKER_USER_ID_APP,
				   RADIO_TICKER_ID_ADV, ticks_now, 0,
				   (ticks_slot_offset +
				    _radio.advertiser.hdr.ticks_slot),
   114e8:	0023      	movs	r3, r4
   114ea:	33a0      	adds	r3, #160	; 0xa0
   114ec:	681b      	ldr	r3, [r3, #0]
	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   114ee:	4a44      	ldr	r2, [pc, #272]	; (11600 <radio_adv_enable+0x2e8>)
   114f0:	195d      	adds	r5, r3, r5
   114f2:	9207      	str	r2, [sp, #28]
   114f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   114f6:	b2ab      	uxth	r3, r5
   114f8:	9206      	str	r2, [sp, #24]
   114fa:	9304      	str	r3, [sp, #16]
   114fc:	4a41      	ldr	r2, [pc, #260]	; (11604 <radio_adv_enable+0x2ec>)
   114fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		_radio.advertiser.hdr.ticks_active_to_start;

	/* High Duty Cycle Directed Advertising if interval is 0. */
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
	    !interval) {
		u32_t ticks_now = ticker_ticks_now_get();
   11500:	900b      	str	r0, [sp, #44]	; 0x2c

		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11502:	9205      	str	r2, [sp, #20]
   11504:	9303      	str	r3, [sp, #12]
   11506:	9302      	str	r3, [sp, #8]
   11508:	9501      	str	r5, [sp, #4]
   1150a:	9300      	str	r3, [sp, #0]
   1150c:	9608      	str	r6, [sp, #32]
   1150e:	0003      	movs	r3, r0
   11510:	2205      	movs	r2, #5
   11512:	2103      	movs	r1, #3
   11514:	980a      	ldr	r0, [sp, #40]	; 0x28
   11516:	f7f9 ff77 	bl	b408 <ticker_start>
   1151a:	4d39      	ldr	r5, [pc, #228]	; (11600 <radio_adv_enable+0x2e8>)
				   (ticks_slot_offset +
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
   1151c:	2802      	cmp	r0, #2
   1151e:	d011      	beq.n	11544 <radio_adv_enable+0x22c>
			while (ret_cb == TICKER_STATUS_BUSY) {
				cpu_sleep();
			}
		}

		if (ret_cb != TICKER_STATUS_SUCCESS) {
   11520:	9811      	ldr	r0, [sp, #68]	; 0x44
   11522:	2800      	cmp	r0, #0
   11524:	d152      	bne.n	115cc <radio_adv_enable+0x2b4>
			goto failure_cleanup;
		}

		ret =
   11526:	2203      	movs	r2, #3
   11528:	4b37      	ldr	r3, [pc, #220]	; (11608 <radio_adv_enable+0x2f0>)
   1152a:	9608      	str	r6, [sp, #32]
   1152c:	9305      	str	r3, [sp, #20]
   1152e:	4b37      	ldr	r3, [pc, #220]	; (1160c <radio_adv_enable+0x2f4>)
   11530:	9507      	str	r5, [sp, #28]
   11532:	9300      	str	r3, [sp, #0]
   11534:	9006      	str	r0, [sp, #24]
   11536:	9004      	str	r0, [sp, #16]
   11538:	9003      	str	r0, [sp, #12]
   1153a:	9002      	str	r0, [sp, #8]
   1153c:	9001      	str	r0, [sp, #4]
   1153e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11540:	0011      	movs	r1, r2
   11542:	e027      	b.n	11594 <radio_adv_enable+0x27c>
				    _radio.advertiser.hdr.ticks_slot),
				   radio_event_adv_prepare, NULL,
				   ticker_if_done, (void *)&ret_cb);

		if (ret == TICKER_STATUS_BUSY) {
			while (ret_cb == TICKER_STATUS_BUSY) {
   11544:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11546:	2b02      	cmp	r3, #2
   11548:	d1ea      	bne.n	11520 <radio_adv_enable+0x208>
				cpu_sleep();
   1154a:	f7fa f8bd 	bl	b6c8 <cpu_sleep>
   1154e:	e7f9      	b.n	11544 <radio_adv_enable+0x22c>
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11550:	f7fa f88e 	bl	b670 <ticker_ticks_now_get>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
   11554:	4b2a      	ldr	r3, [pc, #168]	; (11600 <radio_adv_enable+0x2e8>)
   11556:	9608      	str	r6, [sp, #32]
   11558:	9307      	str	r3, [sp, #28]
   1155a:	4b2a      	ldr	r3, [pc, #168]	; (11604 <radio_adv_enable+0x2ec>)
   1155c:	2600      	movs	r6, #0
   1155e:	9305      	str	r3, [sp, #20]
				     RADIO_TICKER_ID_ADV,
				     ticker_ticks_now_get(), 0,
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     (ticks_slot_offset +
				      _radio.advertiser.hdr.ticks_slot),
   11560:	0023      	movs	r3, r4
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
   11562:	9606      	str	r6, [sp, #24]
				     RADIO_TICKER_ID_ADV,
				     ticker_ticks_now_get(), 0,
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     (ticks_slot_offset +
				      _radio.advertiser.hdr.ticks_slot),
   11564:	33a0      	adds	r3, #160	; 0xa0
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
   11566:	681b      	ldr	r3, [r3, #0]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11568:	900b      	str	r0, [sp, #44]	; 0x2c
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, NULL, ticker_if_done,
				     (void *)&ret_cb);
	} else {
		ret =
   1156a:	195d      	adds	r5, r3, r5
   1156c:	4a28      	ldr	r2, [pc, #160]	; (11610 <radio_adv_enable+0x2f8>)
   1156e:	2391      	movs	r3, #145	; 0x91
   11570:	b2ad      	uxth	r5, r5
   11572:	980a      	ldr	r0, [sp, #40]	; 0x28
   11574:	0031      	movs	r1, r6
   11576:	9504      	str	r5, [sp, #16]
   11578:	9603      	str	r6, [sp, #12]
   1157a:	9602      	str	r6, [sp, #8]
   1157c:	f7ee ffa6 	bl	4cc <__aeabi_lmul>
   11580:	4a24      	ldr	r2, [pc, #144]	; (11614 <radio_adv_enable+0x2fc>)
   11582:	2307      	movs	r3, #7
   11584:	f7ee ff82 	bl	48c <__aeabi_uldivmod>
   11588:	2205      	movs	r2, #5
   1158a:	9001      	str	r0, [sp, #4]
   1158c:	2103      	movs	r1, #3
   1158e:	0030      	movs	r0, r6
   11590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11592:	9600      	str	r6, [sp, #0]
   11594:	f7f9 ff38 	bl	b408 <ticker_start>
				      _radio.advertiser.hdr.ticks_slot),
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
   11598:	2802      	cmp	r0, #2
   1159a:	d003      	beq.n	115a4 <radio_adv_enable+0x28c>
		while (ret_cb == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
   1159c:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1159e:	2d00      	cmp	r5, #0
   115a0:	d006      	beq.n	115b0 <radio_adv_enable+0x298>
   115a2:	e013      	b.n	115cc <radio_adv_enable+0x2b4>
				     radio_event_adv_prepare, NULL,
				     ticker_if_done, (void *)&ret_cb);
	}

	if (ret == TICKER_STATUS_BUSY) {
		while (ret_cb == TICKER_STATUS_BUSY) {
   115a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   115a6:	2b02      	cmp	r3, #2
   115a8:	d1f8      	bne.n	1159c <radio_adv_enable+0x284>
			cpu_sleep();
   115aa:	f7fa f88d 	bl	b6c8 <cpu_sleep>
   115ae:	e7f9      	b.n	115a4 <radio_adv_enable+0x28c>
		}
	}

	if (ret_cb == TICKER_STATUS_SUCCESS) {
		_radio.advertiser.is_enabled = 1;
   115b0:	0022      	movs	r2, r4
   115b2:	2001      	movs	r0, #1
   115b4:	32a4      	adds	r2, #164	; 0xa4
   115b6:	7813      	ldrb	r3, [r2, #0]
   115b8:	4303      	orrs	r3, r0
   115ba:	7013      	strb	r3, [r2, #0]

		if (!_radio.scanner.is_enabled) {
   115bc:	23ae      	movs	r3, #174	; 0xae
   115be:	005b      	lsls	r3, r3, #1
   115c0:	5ce3      	ldrb	r3, [r4, r3]
   115c2:	4203      	tst	r3, r0
   115c4:	d113      	bne.n	115ee <radio_adv_enable+0x2d6>
			ll_adv_scan_state_cb(BIT(0));
   115c6:	f7ff fe8b 	bl	112e0 <ll_adv_scan_state_cb>
   115ca:	e010      	b.n	115ee <radio_adv_enable+0x2d6>
		return 0;
	}

failure_cleanup:

	if (conn) {
   115cc:	2f00      	cmp	r7, #0
   115ce:	d00d      	beq.n	115ec <radio_adv_enable+0x2d4>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   115d0:	0021      	movs	r1, r4
   115d2:	003b      	movs	r3, r7
   115d4:	31c5      	adds	r1, #197	; 0xc5
   115d6:	33a8      	adds	r3, #168	; 0xa8
   115d8:	31ff      	adds	r1, #255	; 0xff
   115da:	6818      	ldr	r0, [r3, #0]
   115dc:	f7f8 fc5f 	bl	9e9e <mem_release>
			    onion.link, &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
   115e0:	0021      	movs	r1, r4
   115e2:	0038      	movs	r0, r7
   115e4:	3189      	adds	r1, #137	; 0x89
   115e6:	31ff      	adds	r1, #255	; 0xff
   115e8:	f7f8 fc59 	bl	9e9e <mem_release>
	}

	return 1;
   115ec:	2501      	movs	r5, #1
}
   115ee:	0028      	movs	r0, r5
   115f0:	b013      	add	sp, #76	; 0x4c
   115f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115f4:	20001254 	.word	0x20001254
   115f8:	20001350 	.word	0x20001350
   115fc:	0000407f 	.word	0x0000407f
   11600:	0000b6d1 	.word	0x0000b6d1
   11604:	0000d2c5 	.word	0x0000d2c5
   11608:	0000c211 	.word	0x0000c211
   1160c:	0000a3fe 	.word	0x0000a3fe
   11610:	84e72a00 	.word	0x84e72a00
   11614:	1afd498d 	.word	0x1afd498d

00011618 <radio_adv_disable>:

u32_t radio_adv_disable(void)
{
   11618:	b570      	push	{r4, r5, r6, lr}
	u32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
   1161a:	2103      	movs	r1, #3
   1161c:	2005      	movs	r0, #5
   1161e:	f7fa fa05 	bl	ba2c <role_disable>
   11622:	1e05      	subs	r5, r0, #0
			      RADIO_TICKER_ID_ADV_STOP);
	if (!status) {
   11624:	d122      	bne.n	1166c <radio_adv_disable+0x54>
		struct connection *conn;

		_radio.advertiser.is_enabled = 0;
   11626:	4c12      	ldr	r4, [pc, #72]	; (11670 <radio_adv_disable+0x58>)
   11628:	2201      	movs	r2, #1
   1162a:	0021      	movs	r1, r4
   1162c:	31a4      	adds	r1, #164	; 0xa4
   1162e:	780b      	ldrb	r3, [r1, #0]
   11630:	4393      	bics	r3, r2
   11632:	700b      	strb	r3, [r1, #0]

		if (!_radio.scanner.is_enabled) {
   11634:	23ae      	movs	r3, #174	; 0xae
   11636:	005b      	lsls	r3, r3, #1
   11638:	5ce3      	ldrb	r3, [r4, r3]
   1163a:	4213      	tst	r3, r2
   1163c:	d101      	bne.n	11642 <radio_adv_disable+0x2a>
			ll_adv_scan_state_cb(0);
   1163e:	f7ff fe4f 	bl	112e0 <ll_adv_scan_state_cb>
		}

		conn = _radio.advertiser.conn;
   11642:	0023      	movs	r3, r4
   11644:	33fc      	adds	r3, #252	; 0xfc
   11646:	6cde      	ldr	r6, [r3, #76]	; 0x4c
		if (conn) {
   11648:	2e00      	cmp	r6, #0
   1164a:	d00f      	beq.n	1166c <radio_adv_disable+0x54>
			_radio.advertiser.conn = NULL;
   1164c:	2200      	movs	r2, #0

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   1164e:	0021      	movs	r1, r4
			ll_adv_scan_state_cb(0);
		}

		conn = _radio.advertiser.conn;
		if (conn) {
			_radio.advertiser.conn = NULL;
   11650:	64da      	str	r2, [r3, #76]	; 0x4c

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   11652:	0033      	movs	r3, r6
   11654:	31c5      	adds	r1, #197	; 0xc5
   11656:	33a8      	adds	r3, #168	; 0xa8
   11658:	31ff      	adds	r1, #255	; 0xff
   1165a:	6818      	ldr	r0, [r3, #0]
   1165c:	f7f8 fc1f 	bl	9e9e <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
   11660:	0021      	movs	r1, r4
   11662:	3189      	adds	r1, #137	; 0x89
   11664:	31ff      	adds	r1, #255	; 0xff
   11666:	0030      	movs	r0, r6
   11668:	f7f8 fc19 	bl	9e9e <mem_release>
		}
	}

	return status;
}
   1166c:	0028      	movs	r0, r5
   1166e:	bd70      	pop	{r4, r5, r6, pc}
   11670:	20001254 	.word	0x20001254

00011674 <radio_rx_dequeue>:

	return cmplt;
}

void radio_rx_dequeue(void)
{
   11674:	b530      	push	{r4, r5, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11676:	4d52      	ldr	r5, [pc, #328]	; (117c0 <radio_rx_dequeue+0x14c>)
	return cmplt;
}

void radio_rx_dequeue(void)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   11678:	2300      	movs	r3, #0
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1167a:	0029      	movs	r1, r5

	return cmplt;
}

void radio_rx_dequeue(void)
{
   1167c:	b085      	sub	sp, #20
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   1167e:	9303      	str	r3, [sp, #12]
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   11680:	33cd      	adds	r3, #205	; 0xcd
   11682:	33ff      	adds	r3, #255	; 0xff
   11684:	31c9      	adds	r1, #201	; 0xc9
   11686:	58e8      	ldr	r0, [r5, r3]
   11688:	31ff      	adds	r1, #255	; 0xff
   1168a:	aa03      	add	r2, sp, #12
   1168c:	f7f8 fc61 	bl	9f52 <memq_dequeue>
   11690:	002c      	movs	r4, r5
			    (void **)&radio_pdu_node_rx);
	LL_ASSERT(link);
   11692:	2800      	cmp	r0, #0
   11694:	d108      	bne.n	116a8 <radio_rx_dequeue+0x34>
   11696:	4b4b      	ldr	r3, [pc, #300]	; (117c4 <radio_rx_dequeue+0x150>)
   11698:	4a4b      	ldr	r2, [pc, #300]	; (117c8 <radio_rx_dequeue+0x154>)
   1169a:	9301      	str	r3, [sp, #4]
   1169c:	4b4b      	ldr	r3, [pc, #300]	; (117cc <radio_rx_dequeue+0x158>)
   1169e:	494c      	ldr	r1, [pc, #304]	; (117d0 <radio_rx_dequeue+0x15c>)
   116a0:	9300      	str	r3, [sp, #0]
   116a2:	484c      	ldr	r0, [pc, #304]	; (117d4 <radio_rx_dequeue+0x160>)
   116a4:	4b4c      	ldr	r3, [pc, #304]	; (117d8 <radio_rx_dequeue+0x164>)
   116a6:	e021      	b.n	116ec <radio_rx_dequeue+0x78>

	mem_release(link, &_radio.link_rx_free);
   116a8:	0029      	movs	r1, r5
   116aa:	31c5      	adds	r1, #197	; 0xc5
   116ac:	31ff      	adds	r1, #255	; 0xff
   116ae:	f7f8 fbf6 	bl	9e9e <mem_release>

	switch (radio_pdu_node_rx->hdr.type) {
   116b2:	9b03      	ldr	r3, [sp, #12]
   116b4:	7919      	ldrb	r1, [r3, #4]
   116b6:	290c      	cmp	r1, #12
   116b8:	d820      	bhi.n	116fc <radio_rx_dequeue+0x88>
   116ba:	2201      	movs	r2, #1
   116bc:	408a      	lsls	r2, r1
   116be:	4947      	ldr	r1, [pc, #284]	; (117dc <radio_rx_dequeue+0x168>)
   116c0:	420a      	tst	r2, r1
   116c2:	d102      	bne.n	116ca <radio_rx_dequeue+0x56>
   116c4:	0612      	lsls	r2, r2, #24
   116c6:	d422      	bmi.n	1170e <radio_rx_dequeue+0x9a>
   116c8:	e018      	b.n	116fc <radio_rx_dequeue+0x88>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION)
	case NODE_RX_TYPE_ADV_INDICATION:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_INDICATION */

		/* release data link credit quota */
		LL_ASSERT(_radio.link_rx_data_quota <
   116ca:	21de      	movs	r1, #222	; 0xde
   116cc:	20e8      	movs	r0, #232	; 0xe8
   116ce:	0049      	lsls	r1, r1, #1
   116d0:	0040      	lsls	r0, r0, #1
   116d2:	5c69      	ldrb	r1, [r5, r1]
   116d4:	5c2a      	ldrb	r2, [r5, r0]
   116d6:	3901      	subs	r1, #1
   116d8:	428a      	cmp	r2, r1
   116da:	db0c      	blt.n	116f6 <radio_rx_dequeue+0x82>
   116dc:	4b39      	ldr	r3, [pc, #228]	; (117c4 <radio_rx_dequeue+0x150>)
   116de:	4a3a      	ldr	r2, [pc, #232]	; (117c8 <radio_rx_dequeue+0x154>)
   116e0:	9301      	str	r3, [sp, #4]
   116e2:	4b3a      	ldr	r3, [pc, #232]	; (117cc <radio_rx_dequeue+0x158>)
   116e4:	493a      	ldr	r1, [pc, #232]	; (117d0 <radio_rx_dequeue+0x15c>)
   116e6:	9300      	str	r3, [sp, #0]
   116e8:	483d      	ldr	r0, [pc, #244]	; (117e0 <radio_rx_dequeue+0x16c>)
   116ea:	4b3b      	ldr	r3, [pc, #236]	; (117d8 <radio_rx_dequeue+0x164>)
   116ec:	f7f0 f83c 	bl	1768 <printk>
   116f0:	b662      	cpsie	i
   116f2:	2004      	movs	r0, #4
   116f4:	df02      	svc	2
			  (_radio.packet_rx_count - 1));

		_radio.link_rx_data_quota++;
   116f6:	3201      	adds	r2, #1
   116f8:	542a      	strb	r2, [r5, r0]
		break;
   116fa:	e008      	b.n	1170e <radio_rx_dequeue+0x9a>
	case NODE_RX_TYPE_TERMINATE:
		/* did not use data link quota */
		break;

	default:
		LL_ASSERT(0);
   116fc:	4b31      	ldr	r3, [pc, #196]	; (117c4 <radio_rx_dequeue+0x150>)
   116fe:	4a32      	ldr	r2, [pc, #200]	; (117c8 <radio_rx_dequeue+0x154>)
   11700:	9301      	str	r3, [sp, #4]
   11702:	4b32      	ldr	r3, [pc, #200]	; (117cc <radio_rx_dequeue+0x158>)
   11704:	4932      	ldr	r1, [pc, #200]	; (117d0 <radio_rx_dequeue+0x15c>)
   11706:	9300      	str	r3, [sp, #0]
   11708:	4836      	ldr	r0, [pc, #216]	; (117e4 <radio_rx_dequeue+0x170>)
   1170a:	4b33      	ldr	r3, [pc, #204]	; (117d8 <radio_rx_dequeue+0x164>)
   1170c:	e7ee      	b.n	116ec <radio_rx_dequeue+0x78>
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   1170e:	791a      	ldrb	r2, [r3, #4]
   11710:	2a06      	cmp	r2, #6
   11712:	d152      	bne.n	117ba <radio_rx_dequeue+0x146>
		struct pdu_data *pdu_data_rx;
		u8_t bm;

		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   11714:	001a      	movs	r2, r3
   11716:	7adb      	ldrb	r3, [r3, #11]
   11718:	320b      	adds	r2, #11
   1171a:	2b3c      	cmp	r3, #60	; 0x3c
   1171c:	d004      	beq.n	11728 <radio_rx_dequeue+0xb4>
   1171e:	7853      	ldrb	r3, [r2, #1]
   11720:	2b00      	cmp	r3, #0
   11722:	d028      	beq.n	11776 <radio_rx_dequeue+0x102>
		break;
	}

	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
		struct radio_le_conn_cmplt *radio_le_conn_cmplt;
		struct connection *conn = NULL;
   11724:	2500      	movs	r5, #0
   11726:	e004      	b.n	11732 <radio_rx_dequeue+0xbe>
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
   11728:	0023      	movs	r3, r4
				_radio.advertiser.conn = NULL;
   1172a:	2200      	movs	r2, #0
		pdu_data_rx = (void *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt = (void *)&pdu_data_rx->payload;
		if ((radio_le_conn_cmplt->status == 0x3c) ||
		    radio_le_conn_cmplt->role) {
			if (radio_le_conn_cmplt->status == 0x3c) {
				conn = _radio.advertiser.conn;
   1172c:	33fc      	adds	r3, #252	; 0xfc
   1172e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
				_radio.advertiser.conn = NULL;
   11730:	64da      	str	r2, [r3, #76]	; 0x4c
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
   11732:	0022      	movs	r2, r4
   11734:	2101      	movs	r1, #1
   11736:	32a4      	adds	r2, #164	; 0xa4
   11738:	7813      	ldrb	r3, [r2, #0]
   1173a:	420b      	tst	r3, r1
   1173c:	d108      	bne.n	11750 <radio_rx_dequeue+0xdc>
   1173e:	4b21      	ldr	r3, [pc, #132]	; (117c4 <radio_rx_dequeue+0x150>)
   11740:	4a21      	ldr	r2, [pc, #132]	; (117c8 <radio_rx_dequeue+0x154>)
   11742:	9301      	str	r3, [sp, #4]
   11744:	4b21      	ldr	r3, [pc, #132]	; (117cc <radio_rx_dequeue+0x158>)
   11746:	4922      	ldr	r1, [pc, #136]	; (117d0 <radio_rx_dequeue+0x15c>)
   11748:	9300      	str	r3, [sp, #0]
   1174a:	4827      	ldr	r0, [pc, #156]	; (117e8 <radio_rx_dequeue+0x174>)
   1174c:	4b22      	ldr	r3, [pc, #136]	; (117d8 <radio_rx_dequeue+0x164>)
   1174e:	e7cd      	b.n	116ec <radio_rx_dequeue+0x78>
			_radio.advertiser.is_enabled = 0;
   11750:	438b      	bics	r3, r1
   11752:	7013      	strb	r3, [r2, #0]
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
			_radio.scanner.is_enabled = 0;
		}

		if (conn) {
   11754:	2d00      	cmp	r5, #0
   11756:	d01f      	beq.n	11798 <radio_rx_dequeue+0x124>
			struct radio_pdu_node_rx *node_rx = (void *)
				&conn->llcp_terminate.radio_pdu_node_rx;

			mem_release(node_rx->hdr.onion.link,
   11758:	0021      	movs	r1, r4
   1175a:	002b      	movs	r3, r5
   1175c:	31c5      	adds	r1, #197	; 0xc5
   1175e:	33a8      	adds	r3, #168	; 0xa8
   11760:	6818      	ldr	r0, [r3, #0]
   11762:	31ff      	adds	r1, #255	; 0xff
   11764:	f7f8 fb9b 	bl	9e9e <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
   11768:	0021      	movs	r1, r4
   1176a:	3189      	adds	r1, #137	; 0x89
   1176c:	31ff      	adds	r1, #255	; 0xff
   1176e:	0028      	movs	r0, r5
   11770:	f7f8 fb95 	bl	9e9e <mem_release>
   11774:	e010      	b.n	11798 <radio_rx_dequeue+0x124>
			}

			LL_ASSERT(_radio.advertiser.is_enabled);
			_radio.advertiser.is_enabled = 0;
		} else {
			LL_ASSERT(_radio.scanner.is_enabled);
   11776:	22ae      	movs	r2, #174	; 0xae
   11778:	2101      	movs	r1, #1
   1177a:	0052      	lsls	r2, r2, #1
   1177c:	5ca3      	ldrb	r3, [r4, r2]
   1177e:	420b      	tst	r3, r1
   11780:	d108      	bne.n	11794 <radio_rx_dequeue+0x120>
   11782:	4b10      	ldr	r3, [pc, #64]	; (117c4 <radio_rx_dequeue+0x150>)
   11784:	4a10      	ldr	r2, [pc, #64]	; (117c8 <radio_rx_dequeue+0x154>)
   11786:	9301      	str	r3, [sp, #4]
   11788:	4b10      	ldr	r3, [pc, #64]	; (117cc <radio_rx_dequeue+0x158>)
   1178a:	4911      	ldr	r1, [pc, #68]	; (117d0 <radio_rx_dequeue+0x15c>)
   1178c:	9300      	str	r3, [sp, #0]
   1178e:	4817      	ldr	r0, [pc, #92]	; (117ec <radio_rx_dequeue+0x178>)
   11790:	4b11      	ldr	r3, [pc, #68]	; (117d8 <radio_rx_dequeue+0x164>)
   11792:	e7ab      	b.n	116ec <radio_rx_dequeue+0x78>
			_radio.scanner.is_enabled = 0;
   11794:	438b      	bics	r3, r1
   11796:	54a3      	strb	r3, [r4, r2]
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   11798:	23ae      	movs	r3, #174	; 0xae
   1179a:	005b      	lsls	r3, r3, #1
   1179c:	5ce0      	ldrb	r0, [r4, r3]
		     _radio.advertiser.is_enabled;
   1179e:	34a4      	adds	r4, #164	; 0xa4
			mem_release(node_rx->hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   117a0:	07c0      	lsls	r0, r0, #31
   117a2:	0fc0      	lsrs	r0, r0, #31
		     _radio.advertiser.is_enabled;

		if (!bm) {
   117a4:	b2c0      	uxtb	r0, r0
   117a6:	0043      	lsls	r3, r0, #1
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
		}

		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
		     _radio.advertiser.is_enabled;
   117a8:	7820      	ldrb	r0, [r4, #0]
   117aa:	07c0      	lsls	r0, r0, #31
   117ac:	0fc0      	lsrs	r0, r0, #31

		if (!bm) {
   117ae:	4318      	orrs	r0, r3
   117b0:	b240      	sxtb	r0, r0
   117b2:	2800      	cmp	r0, #0
   117b4:	d101      	bne.n	117ba <radio_rx_dequeue+0x146>
			ll_adv_scan_state_cb(0);
   117b6:	f7ff fd93 	bl	112e0 <ll_adv_scan_state_cb>
		}
	}
}
   117ba:	b005      	add	sp, #20
   117bc:	bd30      	pop	{r4, r5, pc}
   117be:	46c0      	nop			; (mov r8, r8)
   117c0:	20001254 	.word	0x20001254
   117c4:	000145b0 	.word	0x000145b0
   117c8:	00014570 	.word	0x00014570
   117cc:	000145b5 	.word	0x000145b5
   117d0:	00014577 	.word	0x00014577
   117d4:	000159ff 	.word	0x000159ff
   117d8:	00016fbf 	.word	0x00016fbf
   117dc:	00001f7e 	.word	0x00001f7e
   117e0:	000160b5 	.word	0x000160b5
   117e4:	00014bc5 	.word	0x00014bc5
   117e8:	00016594 	.word	0x00016594
   117ec:	000165d2 	.word	0x000165d2

000117f0 <rtc0_nrf5_isr>:
static void rtc0_nrf5_isr(void *arg)
{
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   117f0:	4b0a      	ldr	r3, [pc, #40]	; (1181c <rtc0_nrf5_isr+0x2c>)
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   117f2:	b570      	push	{r4, r5, r6, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   117f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   117f6:	001c      	movs	r4, r3
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   117f8:	6c9d      	ldr	r5, [r3, #72]	; 0x48

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   117fa:	2a00      	cmp	r2, #0
   117fc:	d003      	beq.n	11806 <rtc0_nrf5_isr+0x16>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   117fe:	2000      	movs	r0, #0
   11800:	6458      	str	r0, [r3, #68]	; 0x44

		ticker_trigger(0);
   11802:	f7f9 fdf1 	bl	b3e8 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   11806:	2d00      	cmp	r5, #0
   11808:	d004      	beq.n	11814 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   1180a:	2300      	movs	r3, #0

		ticker_trigger(1);
   1180c:	2001      	movs	r0, #1
		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   1180e:	64a3      	str	r3, [r4, #72]	; 0x48

		ticker_trigger(1);
   11810:	f7f9 fdea 	bl	b3e8 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   11814:	2000      	movs	r0, #0
   11816:	f7f8 fa77 	bl	9d08 <mayfly_run>
}
   1181a:	bd70      	pop	{r4, r5, r6, pc}
   1181c:	4000b0fc 	.word	0x4000b0fc

00011820 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   11820:	b510      	push	{r4, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   11822:	2001      	movs	r0, #1
   11824:	f7f8 fa70 	bl	9d08 <mayfly_run>
}
   11828:	bd10      	pop	{r4, pc}

0001182a <rng_nrf5_isr>:

	mayfly_run(MAYFLY_CALL_ID_0);
}

static void rng_nrf5_isr(void *arg)
{
   1182a:	b510      	push	{r4, lr}
	isr_rand(arg);
   1182c:	f7f9 f83a 	bl	a8a4 <isr_rand>
}
   11830:	bd10      	pop	{r4, pc}

00011832 <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11832:	b510      	push	{r4, lr}
{
	isr_radio();
   11834:	f7f8 fc54 	bl	a0e0 <isr_radio>

	ISR_DIRECT_PM();
   11838:	f001 f906 	bl	12a48 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1183c:	f000 fffc 	bl	12838 <_IntExit>
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   11840:	bd10      	pop	{r4, pc}
	...

00011844 <mayfly_enable_cb>:
	u8_t pub_addr[BDADDR_SIZE];
	u8_t rnd_addr[BDADDR_SIZE];
} _ll_context;

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
   11844:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   11846:	2901      	cmp	r1, #1
   11848:	d00c      	beq.n	11864 <mayfly_enable_cb+0x20>
   1184a:	4b0b      	ldr	r3, [pc, #44]	; (11878 <mayfly_enable_cb+0x34>)
   1184c:	4a0b      	ldr	r2, [pc, #44]	; (1187c <mayfly_enable_cb+0x38>)
   1184e:	9301      	str	r3, [sp, #4]
   11850:	4b0b      	ldr	r3, [pc, #44]	; (11880 <mayfly_enable_cb+0x3c>)
   11852:	490c      	ldr	r1, [pc, #48]	; (11884 <mayfly_enable_cb+0x40>)
   11854:	9300      	str	r3, [sp, #0]
   11856:	480c      	ldr	r0, [pc, #48]	; (11888 <mayfly_enable_cb+0x44>)
   11858:	4b0c      	ldr	r3, [pc, #48]	; (1188c <mayfly_enable_cb+0x48>)
   1185a:	f7ef ff85 	bl	1768 <printk>
   1185e:	b662      	cpsie	i
   11860:	2004      	movs	r0, #4
   11862:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   11864:	2018      	movs	r0, #24
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
   11866:	2a00      	cmp	r2, #0
   11868:	d002      	beq.n	11870 <mayfly_enable_cb+0x2c>
		irq_enable(SWI4_IRQn);
   1186a:	f001 f897 	bl	1299c <_arch_irq_enable>
   1186e:	e001      	b.n	11874 <mayfly_enable_cb+0x30>
	} else {
		irq_disable(SWI4_IRQn);
   11870:	f001 f89e 	bl	129b0 <_arch_irq_disable>
	}
}
   11874:	bd07      	pop	{r0, r1, r2, pc}
   11876:	46c0      	nop			; (mov r8, r8)
   11878:	000145b0 	.word	0x000145b0
   1187c:	00014570 	.word	0x00014570
   11880:	000145b5 	.word	0x000145b5
   11884:	00014577 	.word	0x00014577
   11888:	0001660d 	.word	0x0001660d
   1188c:	00017359 	.word	0x00017359

00011890 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   11890:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
		return irq_is_enabled(RTC0_IRQn);
   11892:	200b      	movs	r0, #11

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
   11894:	2900      	cmp	r1, #0
   11896:	d002      	beq.n	1189e <mayfly_is_enabled+0xe>
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   11898:	2901      	cmp	r1, #1
   1189a:	d103      	bne.n	118a4 <mayfly_is_enabled+0x14>
		return irq_is_enabled(SWI4_IRQn);
   1189c:	2018      	movs	r0, #24
   1189e:	f001 f891 	bl	129c4 <_arch_irq_is_enabled>
	}

	LL_ASSERT(0);

	return 0;
}
   118a2:	bd0e      	pop	{r1, r2, r3, pc}
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
		return irq_is_enabled(SWI4_IRQn);
	}

	LL_ASSERT(0);
   118a4:	4b06      	ldr	r3, [pc, #24]	; (118c0 <mayfly_is_enabled+0x30>)
   118a6:	4a07      	ldr	r2, [pc, #28]	; (118c4 <mayfly_is_enabled+0x34>)
   118a8:	9301      	str	r3, [sp, #4]
   118aa:	4b07      	ldr	r3, [pc, #28]	; (118c8 <mayfly_is_enabled+0x38>)
   118ac:	4907      	ldr	r1, [pc, #28]	; (118cc <mayfly_is_enabled+0x3c>)
   118ae:	9300      	str	r3, [sp, #0]
   118b0:	4807      	ldr	r0, [pc, #28]	; (118d0 <mayfly_is_enabled+0x40>)
   118b2:	4b08      	ldr	r3, [pc, #32]	; (118d4 <mayfly_is_enabled+0x44>)
   118b4:	f7ef ff58 	bl	1768 <printk>
   118b8:	b662      	cpsie	i
   118ba:	2004      	movs	r0, #4
   118bc:	df02      	svc	2
   118be:	46c0      	nop			; (mov r8, r8)
   118c0:	000145b0 	.word	0x000145b0
   118c4:	00014570 	.word	0x00014570
   118c8:	000145b5 	.word	0x000145b5
   118cc:	00014577 	.word	0x00014577
   118d0:	00014bc5 	.word	0x00014bc5
   118d4:	0001736a 	.word	0x0001736a

000118d8 <mayfly_prio_is_equal>:

	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
   118d8:	0003      	movs	r3, r0
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
   118da:	2001      	movs	r0, #1
   118dc:	428b      	cmp	r3, r1
   118de:	d008      	beq.n	118f2 <mayfly_prio_is_equal+0x1a>
	return 0;
}

u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
	return (caller_id == callee_id) ||
   118e0:	2b00      	cmp	r3, #0
   118e2:	d101      	bne.n	118e8 <mayfly_prio_is_equal+0x10>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
   118e4:	3901      	subs	r1, #1
   118e6:	e002      	b.n	118ee <mayfly_prio_is_equal+0x16>
   118e8:	2000      	movs	r0, #0
   118ea:	2b01      	cmp	r3, #1
   118ec:	d101      	bne.n	118f2 <mayfly_prio_is_equal+0x1a>
   118ee:	4248      	negs	r0, r1
   118f0:	4148      	adcs	r0, r1
	       ((caller_id == MAYFLY_CALL_ID_1) &&
		(callee_id == MAYFLY_CALL_ID_0));
}
   118f2:	4770      	bx	lr

000118f4 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   118f4:	b507      	push	{r0, r1, r2, lr}
   118f6:	4b0c      	ldr	r3, [pc, #48]	; (11928 <mayfly_pend+0x34>)
	(void)caller_id;

	switch (callee_id) {
   118f8:	2900      	cmp	r1, #0
   118fa:	d004      	beq.n	11906 <mayfly_pend+0x12>
   118fc:	2901      	cmp	r1, #1
   118fe:	d106      	bne.n	1190e <mayfly_pend+0x1a>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   11900:	2280      	movs	r2, #128	; 0x80
   11902:	0452      	lsls	r2, r2, #17
   11904:	e001      	b.n	1190a <mayfly_pend+0x16>
   11906:	2280      	movs	r2, #128	; 0x80
   11908:	0112      	lsls	r2, r2, #4
   1190a:	605a      	str	r2, [r3, #4]
	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
		break;
	}
}
   1190c:	bd07      	pop	{r0, r1, r2, pc}
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
   1190e:	4b07      	ldr	r3, [pc, #28]	; (1192c <mayfly_pend+0x38>)
   11910:	4a07      	ldr	r2, [pc, #28]	; (11930 <mayfly_pend+0x3c>)
   11912:	9301      	str	r3, [sp, #4]
   11914:	4b07      	ldr	r3, [pc, #28]	; (11934 <mayfly_pend+0x40>)
   11916:	4908      	ldr	r1, [pc, #32]	; (11938 <mayfly_pend+0x44>)
   11918:	9300      	str	r3, [sp, #0]
   1191a:	4808      	ldr	r0, [pc, #32]	; (1193c <mayfly_pend+0x48>)
   1191c:	4b08      	ldr	r3, [pc, #32]	; (11940 <mayfly_pend+0x4c>)
   1191e:	f7ef ff23 	bl	1768 <printk>
   11922:	b662      	cpsie	i
   11924:	2004      	movs	r0, #4
   11926:	df02      	svc	2
   11928:	e000e1fc 	.word	0xe000e1fc
   1192c:	000145b0 	.word	0x000145b0
   11930:	00014570 	.word	0x00014570
   11934:	000145b5 	.word	0x000145b5
   11938:	00014577 	.word	0x00014577
   1193c:	00014bc5 	.word	0x00014bc5
   11940:	0001737c 	.word	0x0001737c

00011944 <radio_active_callback>:
	}
}

void radio_active_callback(u8_t active)
{
}
   11944:	4770      	bx	lr
	...

00011948 <radio_event_callback>:

void radio_event_callback(void)
{
   11948:	b510      	push	{r4, lr}
	k_sem_give(sem_recv);
   1194a:	4b02      	ldr	r3, [pc, #8]	; (11954 <radio_event_callback+0xc>)
   1194c:	6818      	ldr	r0, [r3, #0]
   1194e:	f002 f865 	bl	13a1c <k_sem_give>
}
   11952:	bd10      	pop	{r4, pc}
   11954:	200018d0 	.word	0x200018d0

00011958 <ll_init>:
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
   11958:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   1195a:	4b39      	ldr	r3, [pc, #228]	; (11a40 <ll_init+0xe8>)
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

int ll_init(struct k_sem *sem_rx)
{
   1195c:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   1195e:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(_rand_context, sizeof(_rand_context));
   11960:	2108      	movs	r1, #8
   11962:	4838      	ldr	r0, [pc, #224]	; (11a44 <ll_init+0xec>)
   11964:	f7f8 ff3a 	bl	a7dc <rand_init>

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   11968:	4837      	ldr	r0, [pc, #220]	; (11a48 <ll_init+0xf0>)
   1196a:	f001 f9c5 	bl	12cf8 <device_get_binding>
	if (!clk_k32) {
   1196e:	2800      	cmp	r0, #0
   11970:	d101      	bne.n	11976 <ll_init+0x1e>
		return -ENODEV;
   11972:	2013      	movs	r0, #19
   11974:	e03b      	b.n	119ee <ll_init+0x96>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
   11976:	6843      	ldr	r3, [r0, #4]
   11978:	2101      	movs	r1, #1
   1197a:	681b      	ldr	r3, [r3, #0]
   1197c:	4798      	blx	r3
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   1197e:	f7f8 fb09 	bl	9f94 <cntr_init>

	mayfly_init();
   11982:	f7f8 f929 	bl	9bd8 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   11986:	2203      	movs	r2, #3
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11988:	2108      	movs	r1, #8
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   1198a:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;
   1198c:	2402      	movs	r4, #2

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
   1198e:	250d      	movs	r5, #13
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11990:	4b2e      	ldr	r3, [pc, #184]	; (11a4c <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   11992:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
   11994:	4a2e      	ldr	r2, [pc, #184]	; (11a50 <ll_init+0xf8>)
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   11996:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   11998:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;
   1199a:	761c      	strb	r4, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
   1199c:	9202      	str	r2, [sp, #8]
   1199e:	9300      	str	r3, [sp, #0]
   119a0:	9501      	str	r5, [sp, #4]
   119a2:	2304      	movs	r3, #4
   119a4:	4a2b      	ldr	r2, [pc, #172]	; (11a54 <ll_init+0xfc>)
   119a6:	f7f9 fccb 	bl	b340 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    RADIO_TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   119aa:	482b      	ldr	r0, [pc, #172]	; (11a58 <ll_init+0x100>)
   119ac:	f001 f9a4 	bl	12cf8 <device_get_binding>
	if (!clk_m16) {
   119b0:	2800      	cmp	r0, #0
   119b2:	d0de      	beq.n	11972 <ll_init+0x1a>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   119b4:	4b29      	ldr	r3, [pc, #164]	; (11a5c <ll_init+0x104>)
   119b6:	26c4      	movs	r6, #196	; 0xc4
   119b8:	9303      	str	r3, [sp, #12]
   119ba:	231b      	movs	r3, #27
   119bc:	00b6      	lsls	r6, r6, #2
   119be:	9302      	str	r3, [sp, #8]
   119c0:	9301      	str	r3, [sp, #4]
   119c2:	3b1a      	subs	r3, #26
   119c4:	9400      	str	r4, [sp, #0]
   119c6:	9604      	str	r6, [sp, #16]
   119c8:	001a      	movs	r2, r3
   119ca:	2107      	movs	r1, #7
   119cc:	f7ff f88c 	bl	10ae8 <radio_init>
   119d0:	1e04      	subs	r4, r0, #0
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   119d2:	d00e      	beq.n	119f2 <ll_init+0x9a>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   119d4:	4b22      	ldr	r3, [pc, #136]	; (11a60 <ll_init+0x108>)
   119d6:	9001      	str	r0, [sp, #4]
   119d8:	9303      	str	r3, [sp, #12]
   119da:	4b22      	ldr	r3, [pc, #136]	; (11a64 <ll_init+0x10c>)
   119dc:	9602      	str	r6, [sp, #8]
   119de:	9300      	str	r3, [sp, #0]
   119e0:	4a21      	ldr	r2, [pc, #132]	; (11a68 <ll_init+0x110>)
   119e2:	4b22      	ldr	r3, [pc, #136]	; (11a6c <ll_init+0x114>)
   119e4:	4922      	ldr	r1, [pc, #136]	; (11a70 <ll_init+0x118>)
   119e6:	4823      	ldr	r0, [pc, #140]	; (11a74 <ll_init+0x11c>)
   119e8:	f7ef febe 	bl	1768 <printk>
		       sizeof(_radio));
		return -ENOMEM;
   119ec:	200c      	movs	r0, #12
   119ee:	4240      	negs	r0, r0
   119f0:	e023      	b.n	11a3a <ll_init+0xe2>
	}

	ll_filter_reset(true);
   119f2:	2001      	movs	r0, #1
   119f4:	f000 fba4 	bl	12140 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn,
   119f8:	0022      	movs	r2, r4
   119fa:	0021      	movs	r1, r4
   119fc:	2001      	movs	r0, #1
   119fe:	f000 ffed 	bl	129dc <_irq_priority_set>
			   CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BLUETOOTH_CONTROLLER_WORKER_PRIO,
   11a02:	0022      	movs	r2, r4
   11a04:	0021      	movs	r1, r4
   11a06:	200b      	movs	r0, #11
   11a08:	f000 ffe8 	bl	129dc <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BLUETOOTH_CONTROLLER_JOB_PRIO,
   11a0c:	0022      	movs	r2, r4
   11a0e:	0021      	movs	r1, r4
   11a10:	2018      	movs	r0, #24
   11a12:	f000 ffe3 	bl	129dc <_irq_priority_set>
		    swi4_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   11a16:	0022      	movs	r2, r4
   11a18:	2101      	movs	r1, #1
   11a1a:	0028      	movs	r0, r5
   11a1c:	f000 ffde 	bl	129dc <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   11a20:	2001      	movs	r0, #1
   11a22:	f000 ffbb 	bl	1299c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   11a26:	200b      	movs	r0, #11
   11a28:	f000 ffb8 	bl	1299c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   11a2c:	2018      	movs	r0, #24
   11a2e:	f000 ffb5 	bl	1299c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   11a32:	0028      	movs	r0, r5
   11a34:	f000 ffb2 	bl	1299c <_arch_irq_enable>

	return 0;
   11a38:	0020      	movs	r0, r4
}
   11a3a:	b006      	add	sp, #24
   11a3c:	bd70      	pop	{r4, r5, r6, pc}
   11a3e:	46c0      	nop			; (mov r8, r8)
   11a40:	200018d0 	.word	0x200018d0
   11a44:	20001b10 	.word	0x20001b10
   11a48:	00014366 	.word	0x00014366
   11a4c:	200018b0 	.word	0x200018b0
   11a50:	200018d4 	.word	0x200018d4
   11a54:	20001784 	.word	0x20001784
   11a58:	0001437b 	.word	0x0001437b
   11a5c:	2000145c 	.word	0x2000145c
   11a60:	000145b0 	.word	0x000145b0
   11a64:	000145b5 	.word	0x000145b5
   11a68:	00014570 	.word	0x00014570
   11a6c:	00017388 	.word	0x00017388
   11a70:	00014577 	.word	0x00014577
   11a74:	0001663d 	.word	0x0001663d

00011a78 <ll_addr_get>:

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
   11a78:	b510      	push	{r4, lr}
   11a7a:	0003      	movs	r3, r0
   11a7c:	4c09      	ldr	r4, [pc, #36]	; (11aa4 <ll_addr_get+0x2c>)
   11a7e:	0008      	movs	r0, r1
	if (addr_type) {
   11a80:	2b00      	cmp	r3, #0
   11a82:	d004      	beq.n	11a8e <ll_addr_get+0x16>
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
		}

		return _ll_context.rnd_addr;
   11a84:	1da3      	adds	r3, r4, #6

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type) {
		if (bdaddr) {
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   11a86:	001c      	movs	r4, r3
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type) {
		if (bdaddr) {
   11a88:	2900      	cmp	r1, #0
   11a8a:	d103      	bne.n	11a94 <ll_addr_get+0x1c>
   11a8c:	e007      	b.n	11a9e <ll_addr_get+0x26>

	if (bdaddr) {
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
	}

	return _ll_context.pub_addr;
   11a8e:	0023      	movs	r3, r4
		}

		return _ll_context.rnd_addr;
	}

	if (bdaddr) {
   11a90:	2900      	cmp	r1, #0
   11a92:	d004      	beq.n	11a9e <ll_addr_get+0x26>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   11a94:	2206      	movs	r2, #6
   11a96:	0021      	movs	r1, r4
   11a98:	f7ef fc64 	bl	1364 <memcpy>
	}

	return _ll_context.pub_addr;
   11a9c:	0023      	movs	r3, r4
}
   11a9e:	0018      	movs	r0, r3
   11aa0:	bd10      	pop	{r4, pc}
   11aa2:	46c0      	nop			; (mov r8, r8)
   11aa4:	200018a4 	.word	0x200018a4

00011aa8 <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   11aa8:	0003      	movs	r3, r0
   11aaa:	b510      	push	{r4, lr}
   11aac:	4803      	ldr	r0, [pc, #12]	; (11abc <ll_addr_set+0x14>)
	if (addr_type) {
   11aae:	2b00      	cmp	r3, #0
   11ab0:	d000      	beq.n	11ab4 <ll_addr_set+0xc>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   11ab2:	3006      	adds	r0, #6
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   11ab4:	2206      	movs	r2, #6
   11ab6:	f7ef fc55 	bl	1364 <memcpy>
	}
}
   11aba:	bd10      	pop	{r4, pc}
   11abc:	200018a4 	.word	0x200018a4

00011ac0 <rl_access_check.constprop.1>:
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
	}
}

static int rl_access_check(bool check_ar)
   11ac0:	b510      	push	{r4, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   11ac2:	f7ff f8f3 	bl	10cac <radio_adv_is_enabled>
   11ac6:	2300      	movs	r3, #0
   11ac8:	4298      	cmp	r0, r3
   11aca:	d103      	bne.n	11ad4 <rl_access_check.constprop.1+0x14>
   11acc:	f7ff f906 	bl	10cdc <radio_scan_is_enabled>
   11ad0:	4243      	negs	r3, r0
   11ad2:	4143      	adcs	r3, r0
}
   11ad4:	0018      	movs	r0, r3
   11ad6:	bd10      	pop	{r4, pc}

00011ad8 <ctrl_filter_get>:


struct ll_filter *ctrl_filter_get(void)
{
	return &wl;
}
   11ad8:	4800      	ldr	r0, [pc, #0]	; (11adc <ctrl_filter_get+0x4>)
   11ada:	4770      	bx	lr
   11adc:	20001b99 	.word	0x20001b99

00011ae0 <ll_wl_size_get>:
   11ae0:	2008      	movs	r0, #8
   11ae2:	4770      	bx	lr

00011ae4 <ll_wl_clear>:
{
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
   11ae4:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11ae6:	f7ff f8eb 	bl	10cc0 <radio_adv_filter_pol_get>
   11aea:	2800      	cmp	r0, #0
   11aec:	d001      	beq.n	11af2 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11aee:	200c      	movs	r0, #12
   11af0:	e009      	b.n	11b06 <ll_wl_clear+0x22>
	return WL_SIZE;
}

u32_t ll_wl_clear(void)
{
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11af2:	f7ff f8fd 	bl	10cf0 <radio_scan_filter_pol_get>
   11af6:	2301      	movs	r3, #1
   11af8:	4018      	ands	r0, r3
   11afa:	d1f8      	bne.n	11aee <ll_wl_clear+0xa>
struct k_delayed_work rpa_work;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   11afc:	4b02      	ldr	r3, [pc, #8]	; (11b08 <ll_wl_clear+0x24>)
   11afe:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   11b00:	7058      	strb	r0, [r3, #1]
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	filter_clear(&wl);
	wl_anon = 0;
   11b02:	4b02      	ldr	r3, [pc, #8]	; (11b0c <ll_wl_clear+0x28>)
   11b04:	7018      	strb	r0, [r3, #0]

	return 0;
}
   11b06:	bd10      	pop	{r4, pc}
   11b08:	20001b99 	.word	0x20001b99
   11b0c:	20001ef8 	.word	0x20001ef8

00011b10 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
   11b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b12:	0005      	movs	r5, r0

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11b14:	f7ff f8d4 	bl	10cc0 <radio_adv_filter_pol_get>
   11b18:	2800      	cmp	r0, #0
   11b1a:	d001      	beq.n	11b20 <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11b1c:	240c      	movs	r4, #12
   11b1e:	e02c      	b.n	11b7a <ll_wl_add+0x6a>
}

u32_t ll_wl_add(bt_addr_le_t *addr)
{

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11b20:	f7ff f8e6 	bl	10cf0 <radio_scan_filter_pol_get>
   11b24:	2201      	movs	r2, #1
   11b26:	4010      	ands	r0, r2
   11b28:	1e04      	subs	r4, r0, #0
   11b2a:	d1f7      	bne.n	11b1c <ll_wl_add+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
   11b2c:	782f      	ldrb	r7, [r5, #0]
   11b2e:	2fff      	cmp	r7, #255	; 0xff
   11b30:	d102      	bne.n	11b38 <ll_wl_add+0x28>
		wl_anon = 1;
   11b32:	4b13      	ldr	r3, [pc, #76]	; (11b80 <ll_wl_add+0x70>)
   11b34:	701a      	strb	r2, [r3, #0]
		return 0;
   11b36:	e020      	b.n	11b7a <ll_wl_add+0x6a>

static u32_t filter_add(struct ll_filter *filter, u8_t addr_type, u8_t *bdaddr)
{
	u8_t index;

	if (filter->enable_bitmask == 0xFF) {
   11b38:	4812      	ldr	r0, [pc, #72]	; (11b84 <ll_wl_add+0x74>)
   11b3a:	7801      	ldrb	r1, [r0, #0]
   11b3c:	29ff      	cmp	r1, #255	; 0xff
   11b3e:	d01b      	beq.n	11b78 <ll_wl_add+0x68>
   11b40:	0023      	movs	r3, r4
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
	}

	for (index = 0;
   11b42:	4694      	mov	ip, r2
   11b44:	000e      	movs	r6, r1
   11b46:	4662      	mov	r2, ip
   11b48:	411e      	asrs	r6, r3
   11b4a:	4216      	tst	r6, r2
   11b4c:	d002      	beq.n	11b54 <ll_wl_add+0x44>
	     (filter->enable_bitmask & (1 << index));
	     index++) {
   11b4e:	3301      	adds	r3, #1
   11b50:	b2db      	uxtb	r3, r3
   11b52:	e7f7      	b.n	11b44 <ll_wl_add+0x34>
	}
	filter->enable_bitmask |= (1 << index);
   11b54:	2601      	movs	r6, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11b56:	2201      	movs	r2, #1

	for (index = 0;
	     (filter->enable_bitmask & (1 << index));
	     index++) {
	}
	filter->enable_bitmask |= (1 << index);
   11b58:	409e      	lsls	r6, r3
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11b5a:	403a      	ands	r2, r7
   11b5c:	409a      	lsls	r2, r3

	for (index = 0;
	     (filter->enable_bitmask & (1 << index));
	     index++) {
	}
	filter->enable_bitmask |= (1 << index);
   11b5e:	4331      	orrs	r1, r6
   11b60:	7001      	strb	r1, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11b62:	7841      	ldrb	r1, [r0, #1]
   11b64:	430a      	orrs	r2, r1
   11b66:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11b68:	2206      	movs	r2, #6
   11b6a:	4353      	muls	r3, r2
   11b6c:	18c0      	adds	r0, r0, r3
	if (addr->type == ADDR_TYPE_ANON) {
		wl_anon = 1;
		return 0;
	}

	return filter_add(&wl, addr->type, addr->a.val);
   11b6e:	1c69      	adds	r1, r5, #1
	     (filter->enable_bitmask & (1 << index));
	     index++) {
	}
	filter->enable_bitmask |= (1 << index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11b70:	3002      	adds	r0, #2
   11b72:	f7ef fbf7 	bl	1364 <memcpy>
   11b76:	e000      	b.n	11b7a <ll_wl_add+0x6a>
static u32_t filter_add(struct ll_filter *filter, u8_t addr_type, u8_t *bdaddr)
{
	u8_t index;

	if (filter->enable_bitmask == 0xFF) {
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11b78:	2407      	movs	r4, #7
		wl_anon = 1;
		return 0;
	}

	return filter_add(&wl, addr->type, addr->a.val);
}
   11b7a:	0020      	movs	r0, r4
   11b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b7e:	46c0      	nop			; (mov r8, r8)
   11b80:	20001ef8 	.word	0x20001ef8
   11b84:	20001b99 	.word	0x20001b99

00011b88 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
   11b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11b8a:	0007      	movs	r7, r0

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11b8c:	f7ff f898 	bl	10cc0 <radio_adv_filter_pol_get>
   11b90:	2800      	cmp	r0, #0
   11b92:	d001      	beq.n	11b98 <ll_wl_remove+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11b94:	250c      	movs	r5, #12
   11b96:	e03a      	b.n	11c0e <ll_wl_remove+0x86>
}

u32_t ll_wl_remove(bt_addr_le_t *addr)
{

	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11b98:	f7ff f8aa 	bl	10cf0 <radio_scan_filter_pol_get>
   11b9c:	2301      	movs	r3, #1
   11b9e:	4018      	ands	r0, r3
   11ba0:	1e05      	subs	r5, r0, #0
   11ba2:	d1f7      	bne.n	11b94 <ll_wl_remove+0xc>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr->type == ADDR_TYPE_ANON) {
   11ba4:	783a      	ldrb	r2, [r7, #0]
   11ba6:	9200      	str	r2, [sp, #0]
   11ba8:	2aff      	cmp	r2, #255	; 0xff
   11baa:	d102      	bne.n	11bb2 <ll_wl_remove+0x2a>
		wl_anon = 0;
   11bac:	4b19      	ldr	r3, [pc, #100]	; (11c14 <ll_wl_remove+0x8c>)
   11bae:	7018      	strb	r0, [r3, #0]
		return 0;
   11bb0:	e02d      	b.n	11c0e <ll_wl_remove+0x86>
static u32_t filter_remove(struct ll_filter *filter, u8_t addr_type,
			   u8_t *bdaddr)
{
	u8_t index;

	if (!filter->enable_bitmask) {
   11bb2:	4a19      	ldr	r2, [pc, #100]	; (11c18 <ll_wl_remove+0x90>)
   11bb4:	7812      	ldrb	r2, [r2, #0]
   11bb6:	2a00      	cmp	r2, #0
   11bb8:	d00c      	beq.n	11bd4 <ll_wl_remove+0x4c>
   11bba:	2408      	movs	r4, #8
		return BT_HCI_ERR_INVALID_PARAM;
	}

	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
   11bbc:	9301      	str	r3, [sp, #4]
   11bbe:	e005      	b.n	11bcc <ll_wl_remove+0x44>
   11bc0:	4e15      	ldr	r6, [pc, #84]	; (11c18 <ll_wl_remove+0x90>)
   11bc2:	9a01      	ldr	r2, [sp, #4]
   11bc4:	7833      	ldrb	r3, [r6, #0]
   11bc6:	40e3      	lsrs	r3, r4
   11bc8:	4213      	tst	r3, r2
   11bca:	d105      	bne.n	11bd8 <ll_wl_remove+0x50>
	if (!filter->enable_bitmask) {
		return BT_HCI_ERR_INVALID_PARAM;
	}

	index = 8;
	while (index--) {
   11bcc:	3c01      	subs	r4, #1
   11bce:	b2e4      	uxtb	r4, r4
   11bd0:	2cff      	cmp	r4, #255	; 0xff
   11bd2:	d1f5      	bne.n	11bc0 <ll_wl_remove+0x38>
			   u8_t *bdaddr)
{
	u8_t index;

	if (!filter->enable_bitmask) {
		return BT_HCI_ERR_INVALID_PARAM;
   11bd4:	2512      	movs	r5, #18
   11bd6:	e01a      	b.n	11c0e <ll_wl_remove+0x86>
	}

	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
   11bd8:	7873      	ldrb	r3, [r6, #1]
   11bda:	9a00      	ldr	r2, [sp, #0]
   11bdc:	4123      	asrs	r3, r4
   11bde:	4053      	eors	r3, r2
   11be0:	9a01      	ldr	r2, [sp, #4]
   11be2:	4213      	tst	r3, r2
   11be4:	d1f2      	bne.n	11bcc <ll_wl_remove+0x44>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   11be6:	2006      	movs	r0, #6
   11be8:	4360      	muls	r0, r4
   11bea:	1830      	adds	r0, r6, r0
	if (addr->type == ADDR_TYPE_ANON) {
		wl_anon = 0;
		return 0;
	}

	return filter_remove(&wl, addr->type, addr->a.val);
   11bec:	1c79      	adds	r1, r7, #1
	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   11bee:	3002      	adds	r0, #2
   11bf0:	2206      	movs	r2, #6
   11bf2:	f7ef fb8f 	bl	1314 <memcmp>

	index = 8;
	while (index--) {
		if ((filter->enable_bitmask & BIT(index)) &&
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
   11bf6:	2800      	cmp	r0, #0
   11bf8:	d1e8      	bne.n	11bcc <ll_wl_remove+0x44>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
			filter->enable_bitmask &= ~BIT(index);
   11bfa:	2301      	movs	r3, #1
   11bfc:	40a3      	lsls	r3, r4
   11bfe:	43db      	mvns	r3, r3
   11c00:	7832      	ldrb	r2, [r6, #0]
   11c02:	b2db      	uxtb	r3, r3
   11c04:	401a      	ands	r2, r3
   11c06:	7032      	strb	r2, [r6, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   11c08:	7872      	ldrb	r2, [r6, #1]
   11c0a:	4013      	ands	r3, r2
   11c0c:	7073      	strb	r3, [r6, #1]
		wl_anon = 0;
		return 0;
	}

	return filter_remove(&wl, addr->type, addr->a.val);
}
   11c0e:	0028      	movs	r0, r5
   11c10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11c12:	46c0      	nop			; (mov r8, r8)
   11c14:	20001ef8 	.word	0x20001ef8
   11c18:	20001b99 	.word	0x20001b99

00011c1c <ll_rl_idx_find>:
		    rl[i].peer_id_addr_type == (id_addr_type & 0x1) && \
		    !memcmp(rl[i].peer_id_addr.val, id_addr, BDADDR_SIZE))


int ll_rl_idx_find(u8_t id_addr_type, u8_t *id_addr)
{
   11c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c1e:	0006      	movs	r6, r0
   11c20:	000d      	movs	r5, r1
	int i;
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   11c22:	2400      	movs	r4, #0
		if (RL_MATCH(i, id_addr_type, id_addr)) {
   11c24:	2701      	movs	r7, #1
   11c26:	2324      	movs	r3, #36	; 0x24
   11c28:	4363      	muls	r3, r4
   11c2a:	480e      	ldr	r0, [pc, #56]	; (11c64 <ll_rl_idx_find+0x48>)
   11c2c:	5c1a      	ldrb	r2, [r3, r0]
   11c2e:	07d2      	lsls	r2, r2, #31
   11c30:	d405      	bmi.n	11c3e <ll_rl_idx_find+0x22>


int ll_rl_idx_find(u8_t id_addr_type, u8_t *id_addr)
{
	int i;
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   11c32:	3401      	adds	r4, #1
   11c34:	2c08      	cmp	r4, #8
   11c36:	d1f6      	bne.n	11c26 <ll_rl_idx_find+0xa>
		if (RL_MATCH(i, id_addr_type, id_addr)) {
			return i;
		}
	}

	return -1;
   11c38:	2001      	movs	r0, #1
   11c3a:	4240      	negs	r0, r0
   11c3c:	e011      	b.n	11c62 <ll_rl_idx_find+0x46>

int ll_rl_idx_find(u8_t id_addr_type, u8_t *id_addr)
{
	int i;
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (RL_MATCH(i, id_addr_type, id_addr)) {
   11c3e:	0031      	movs	r1, r6
   11c40:	18c2      	adds	r2, r0, r3
   11c42:	7852      	ldrb	r2, [r2, #1]
   11c44:	4039      	ands	r1, r7
   11c46:	07d2      	lsls	r2, r2, #31
   11c48:	0fd2      	lsrs	r2, r2, #31
   11c4a:	b2d2      	uxtb	r2, r2
   11c4c:	428a      	cmp	r2, r1
   11c4e:	d1f0      	bne.n	11c32 <ll_rl_idx_find+0x16>
   11c50:	3302      	adds	r3, #2
   11c52:	18c0      	adds	r0, r0, r3
   11c54:	2206      	movs	r2, #6
   11c56:	0029      	movs	r1, r5
   11c58:	f7ef fb5c 	bl	1314 <memcmp>
   11c5c:	2800      	cmp	r0, #0
   11c5e:	d1e8      	bne.n	11c32 <ll_rl_idx_find+0x16>
   11c60:	0020      	movs	r0, r4
			return i;
		}
	}

	return -1;
}
   11c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c64:	20001bcb 	.word	0x20001bcb

00011c68 <ctrl_rl_enabled>:

bool ctrl_rl_enabled(void)
{
	return rl_enable;
   11c68:	4b02      	ldr	r3, [pc, #8]	; (11c74 <ctrl_rl_enabled+0xc>)
   11c6a:	7818      	ldrb	r0, [r3, #0]
   11c6c:	1e43      	subs	r3, r0, #1
   11c6e:	4198      	sbcs	r0, r3
   11c70:	b2c0      	uxtb	r0, r0
}
   11c72:	4770      	bx	lr
   11c74:	20001ceb 	.word	0x20001ceb

00011c78 <ll_rl_pdu_adv_update>:

void ll_rl_pdu_adv_update(int idx, struct pdu_adv *pdu)
{
   11c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11c7a:	0006      	movs	r6, r0
   11c7c:	000c      	movs	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
				  &pdu->payload.scan_rsp.addr[0] :
   11c7e:	1c8f      	adds	r7, r1, #2
				  &pdu->payload.adv_ind.addr[0];

	struct ll_adv_set *ll_adv = ll_adv_set_get();
   11c80:	f000 fa98 	bl	121b4 <ll_adv_set_get>
   11c84:	0005      	movs	r5, r0

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
   11c86:	2e00      	cmp	r6, #0
   11c88:	db1f      	blt.n	11cca <ll_rl_pdu_adv_update+0x52>
   11c8a:	2124      	movs	r1, #36	; 0x24
   11c8c:	4371      	muls	r1, r6
   11c8e:	4a28      	ldr	r2, [pc, #160]	; (11d30 <ll_rl_pdu_adv_update+0xb8>)
   11c90:	5c8b      	ldrb	r3, [r1, r2]
   11c92:	09d8      	lsrs	r0, r3, #7
   11c94:	d019      	beq.n	11cca <ll_rl_pdu_adv_update+0x52>
		LL_ASSERT(rl[idx].rpas_ready);
   11c96:	079b      	lsls	r3, r3, #30
   11c98:	d40c      	bmi.n	11cb4 <ll_rl_pdu_adv_update+0x3c>
   11c9a:	4b26      	ldr	r3, [pc, #152]	; (11d34 <ll_rl_pdu_adv_update+0xbc>)
   11c9c:	4a26      	ldr	r2, [pc, #152]	; (11d38 <ll_rl_pdu_adv_update+0xc0>)
   11c9e:	9301      	str	r3, [sp, #4]
   11ca0:	4b26      	ldr	r3, [pc, #152]	; (11d3c <ll_rl_pdu_adv_update+0xc4>)
   11ca2:	4927      	ldr	r1, [pc, #156]	; (11d40 <ll_rl_pdu_adv_update+0xc8>)
   11ca4:	9300      	str	r3, [sp, #0]
   11ca6:	4827      	ldr	r0, [pc, #156]	; (11d44 <ll_rl_pdu_adv_update+0xcc>)
   11ca8:	4b27      	ldr	r3, [pc, #156]	; (11d48 <ll_rl_pdu_adv_update+0xd0>)
   11caa:	f7ef fd5d 	bl	1768 <printk>
   11cae:	b662      	cpsie	i
   11cb0:	2004      	movs	r0, #4
   11cb2:	df02      	svc	2
		pdu->tx_addr = 1;
   11cb4:	2040      	movs	r0, #64	; 0x40
   11cb6:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa.val, BDADDR_SIZE);
   11cb8:	1851      	adds	r1, r2, r1
	struct ll_adv_set *ll_adv = ll_adv_set_get();

	/* AdvA */
	if (idx >= 0 && rl[idx].lirk) {
		LL_ASSERT(rl[idx].rpas_ready);
		pdu->tx_addr = 1;
   11cba:	4303      	orrs	r3, r0
   11cbc:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa.val, BDADDR_SIZE);
   11cbe:	311e      	adds	r1, #30
   11cc0:	2206      	movs	r2, #6
   11cc2:	0038      	movs	r0, r7
   11cc4:	f7ef fb4e 	bl	1364 <memcpy>
   11cc8:	e00f      	b.n	11cea <ll_rl_pdu_adv_update+0x72>
	} else {
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   11cca:	2101      	movs	r1, #1
   11ccc:	2040      	movs	r0, #64	; 0x40
   11cce:	786b      	ldrb	r3, [r5, #1]
   11cd0:	095b      	lsrs	r3, r3, #5
   11cd2:	400b      	ands	r3, r1
   11cd4:	019a      	lsls	r2, r3, #6
   11cd6:	7823      	ldrb	r3, [r4, #0]
   11cd8:	4383      	bics	r3, r0
   11cda:	4313      	orrs	r3, r2
   11cdc:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   11cde:	7868      	ldrb	r0, [r5, #1]
   11ce0:	0940      	lsrs	r0, r0, #5
   11ce2:	4008      	ands	r0, r1
   11ce4:	0039      	movs	r1, r7
   11ce6:	f7ff fec7 	bl	11a78 <ll_addr_get>
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   11cea:	230f      	movs	r3, #15
   11cec:	7822      	ldrb	r2, [r4, #0]
   11cee:	4013      	ands	r3, r2
   11cf0:	2b01      	cmp	r3, #1
   11cf2:	d11c      	bne.n	11d2e <ll_rl_pdu_adv_update+0xb6>
   11cf4:	0020      	movs	r0, r4
   11cf6:	3008      	adds	r0, #8
		if (idx >= 0 && rl[idx].pirk) {
   11cf8:	2e00      	cmp	r6, #0
   11cfa:	db0c      	blt.n	11d16 <ll_rl_pdu_adv_update+0x9e>
   11cfc:	3323      	adds	r3, #35	; 0x23
   11cfe:	435e      	muls	r6, r3
   11d00:	490b      	ldr	r1, [pc, #44]	; (11d30 <ll_rl_pdu_adv_update+0xb8>)
   11d02:	5c73      	ldrb	r3, [r6, r1]
   11d04:	075b      	lsls	r3, r3, #29
   11d06:	d506      	bpl.n	11d16 <ll_rl_pdu_adv_update+0x9e>
			pdu->rx_addr = 1;
   11d08:	2380      	movs	r3, #128	; 0x80
   11d0a:	425b      	negs	r3, r3
   11d0c:	431a      	orrs	r2, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   11d0e:	3618      	adds	r6, #24
	}

	/* TargetA */
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		if (idx >= 0 && rl[idx].pirk) {
			pdu->rx_addr = 1;
   11d10:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   11d12:	1989      	adds	r1, r1, r6
   11d14:	e008      	b.n	11d28 <ll_rl_pdu_adv_update+0xb0>
		} else {
			pdu->rx_addr = ll_adv->id_addr_type;
   11d16:	786b      	ldrb	r3, [r5, #1]
   11d18:	7821      	ldrb	r1, [r4, #0]
   11d1a:	09db      	lsrs	r3, r3, #7
   11d1c:	01da      	lsls	r2, r3, #7
   11d1e:	237f      	movs	r3, #127	; 0x7f
   11d20:	400b      	ands	r3, r1
   11d22:	4313      	orrs	r3, r2
   11d24:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       ll_adv->id_addr, BDADDR_SIZE);
   11d26:	1ca9      	adds	r1, r5, #2
			pdu->rx_addr = 1;
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
		} else {
			pdu->rx_addr = ll_adv->id_addr_type;
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   11d28:	2206      	movs	r2, #6
   11d2a:	f7ef fb1b 	bl	1364 <memcpy>
			       ll_adv->id_addr, BDADDR_SIZE);
		}
	}
}
   11d2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   11d30:	20001bcb 	.word	0x20001bcb
   11d34:	000145b0 	.word	0x000145b0
   11d38:	00014570 	.word	0x00014570
   11d3c:	000145b5 	.word	0x000145b5
   11d40:	00014577 	.word	0x00014577
   11d44:	00016672 	.word	0x00016672
   11d48:	00017390 	.word	0x00017390

00011d4c <ll_rl_rpa_update>:
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
}


void ll_rl_rpa_update(bool timeout)
{
   11d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d4e:	b087      	sub	sp, #28
   11d50:	9005      	str	r0, [sp, #20]
	int i, err;
	s64_t now = k_uptime_get();
   11d52:	f001 fecb 	bl	13aec <k_uptime_get>
	bool all = timeout || (rpa_last_ms == -1) ||
   11d56:	2301      	movs	r3, #1
   11d58:	9304      	str	r3, [sp, #16]
   11d5a:	9b05      	ldr	r3, [sp, #20]


void ll_rl_rpa_update(bool timeout)
{
	int i, err;
	s64_t now = k_uptime_get();
   11d5c:	9002      	str	r0, [sp, #8]
   11d5e:	9103      	str	r1, [sp, #12]
	bool all = timeout || (rpa_last_ms == -1) ||
   11d60:	2b00      	cmp	r3, #0
   11d62:	d117      	bne.n	11d94 <ll_rl_rpa_update+0x48>
   11d64:	4b5c      	ldr	r3, [pc, #368]	; (11ed8 <ll_rl_rpa_update+0x18c>)
   11d66:	681a      	ldr	r2, [r3, #0]
   11d68:	685b      	ldr	r3, [r3, #4]
   11d6a:	1c51      	adds	r1, r2, #1
   11d6c:	d101      	bne.n	11d72 <ll_rl_rpa_update+0x26>
   11d6e:	1c59      	adds	r1, r3, #1
   11d70:	d010      	beq.n	11d94 <ll_rl_rpa_update+0x48>
   11d72:	9802      	ldr	r0, [sp, #8]
   11d74:	9903      	ldr	r1, [sp, #12]
   11d76:	1a80      	subs	r0, r0, r2
   11d78:	4199      	sbcs	r1, r3
   11d7a:	0002      	movs	r2, r0
   11d7c:	2000      	movs	r0, #0
   11d7e:	000b      	movs	r3, r1
		   (now - rpa_last_ms >= rpa_timeout_ms);
   11d80:	4956      	ldr	r1, [pc, #344]	; (11edc <ll_rl_rpa_update+0x190>)

void ll_rl_rpa_update(bool timeout)
{
	int i, err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   11d82:	680c      	ldr	r4, [r1, #0]
   11d84:	2101      	movs	r1, #1
   11d86:	4298      	cmp	r0, r3
   11d88:	dc02      	bgt.n	11d90 <ll_rl_rpa_update+0x44>
   11d8a:	d102      	bne.n	11d92 <ll_rl_rpa_update+0x46>
   11d8c:	4294      	cmp	r4, r2
   11d8e:	d900      	bls.n	11d92 <ll_rl_rpa_update+0x46>
   11d90:	2100      	movs	r1, #0
   11d92:	9104      	str	r1, [sp, #16]
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   11d94:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11d96:	2624      	movs	r6, #36	; 0x24
   11d98:	4d51      	ldr	r5, [pc, #324]	; (11ee0 <ll_rl_rpa_update+0x194>)
   11d9a:	3508      	adds	r5, #8
   11d9c:	0032      	movs	r2, r6
   11d9e:	4362      	muls	r2, r4
   11da0:	4b4f      	ldr	r3, [pc, #316]	; (11ee0 <ll_rl_rpa_update+0x194>)
   11da2:	5cd2      	ldrb	r2, [r2, r3]
   11da4:	07d1      	lsls	r1, r2, #31
   11da6:	d530      	bpl.n	11e0a <ll_rl_rpa_update+0xbe>
   11da8:	9904      	ldr	r1, [sp, #16]
   11daa:	2900      	cmp	r1, #0
   11dac:	d101      	bne.n	11db2 <ll_rl_rpa_update+0x66>
   11dae:	0792      	lsls	r2, r2, #30
   11db0:	d42b      	bmi.n	11e0a <ll_rl_rpa_update+0xbe>

			if (rl[i].pirk) {
   11db2:	0032      	movs	r2, r6
   11db4:	4362      	muls	r2, r4
   11db6:	5c98      	ldrb	r0, [r3, r2]
   11db8:	0743      	lsls	r3, r0, #29
   11dba:	d50a      	bpl.n	11dd2 <ll_rl_rpa_update+0x86>
				err = bt_rpa_create(peer_irks[rl[i].pirk_idx],
   11dbc:	0029      	movs	r1, r5
   11dbe:	0640      	lsls	r0, r0, #25
   11dc0:	0f00      	lsrs	r0, r0, #28
   11dc2:	4b48      	ldr	r3, [pc, #288]	; (11ee4 <ll_rl_rpa_update+0x198>)
   11dc4:	0100      	lsls	r0, r0, #4
   11dc6:	1818      	adds	r0, r3, r0
   11dc8:	3110      	adds	r1, #16
   11dca:	f7f0 f98b 	bl	20e4 <bt_rpa_create>
						    &rl[i].peer_rpa);
				LL_ASSERT(!err);
   11dce:	2800      	cmp	r0, #0
   11dd0:	d10c      	bne.n	11dec <ll_rl_rpa_update+0xa0>
			}
			if (rl[i].lirk) {
   11dd2:	0033      	movs	r3, r6
   11dd4:	4363      	muls	r3, r4
   11dd6:	4f42      	ldr	r7, [pc, #264]	; (11ee0 <ll_rl_rpa_update+0x194>)
   11dd8:	5ddb      	ldrb	r3, [r3, r7]
   11dda:	09db      	lsrs	r3, r3, #7
   11ddc:	d00f      	beq.n	11dfe <ll_rl_rpa_update+0xb2>
				err = bt_rpa_create(rl[i].local_irk,
   11dde:	0029      	movs	r1, r5
   11de0:	0028      	movs	r0, r5
   11de2:	3116      	adds	r1, #22
   11de4:	f7f0 f97e 	bl	20e4 <bt_rpa_create>
						    &rl[i].local_rpa);
				LL_ASSERT(!err);
   11de8:	2800      	cmp	r0, #0
   11dea:	d008      	beq.n	11dfe <ll_rl_rpa_update+0xb2>
   11dec:	4b3e      	ldr	r3, [pc, #248]	; (11ee8 <ll_rl_rpa_update+0x19c>)
   11dee:	4a3f      	ldr	r2, [pc, #252]	; (11eec <ll_rl_rpa_update+0x1a0>)
   11df0:	9301      	str	r3, [sp, #4]
   11df2:	4b3f      	ldr	r3, [pc, #252]	; (11ef0 <ll_rl_rpa_update+0x1a4>)
   11df4:	493f      	ldr	r1, [pc, #252]	; (11ef4 <ll_rl_rpa_update+0x1a8>)
   11df6:	9300      	str	r3, [sp, #0]
   11df8:	483f      	ldr	r0, [pc, #252]	; (11ef8 <ll_rl_rpa_update+0x1ac>)
   11dfa:	4b40      	ldr	r3, [pc, #256]	; (11efc <ll_rl_rpa_update+0x1b0>)
   11dfc:	e055      	b.n	11eaa <ll_rl_rpa_update+0x15e>
			}

			rl[i].rpas_ready = 1;
   11dfe:	0032      	movs	r2, r6
   11e00:	2102      	movs	r1, #2
   11e02:	4362      	muls	r2, r4
   11e04:	5cbb      	ldrb	r3, [r7, r2]
   11e06:	430b      	orrs	r3, r1
   11e08:	54bb      	strb	r3, [r7, r2]
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
		   (now - rpa_last_ms >= rpa_timeout_ms);
	BT_DBG("");

	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   11e0a:	3401      	adds	r4, #1
   11e0c:	3524      	adds	r5, #36	; 0x24
   11e0e:	2c08      	cmp	r4, #8
   11e10:	d1c4      	bne.n	11d9c <ll_rl_rpa_update+0x50>

			rl[i].rpas_ready = 1;
		}
	}

	if (all) {
   11e12:	9b04      	ldr	r3, [sp, #16]
   11e14:	2b00      	cmp	r3, #0
   11e16:	d004      	beq.n	11e22 <ll_rl_rpa_update+0xd6>
		rpa_last_ms = now;
   11e18:	9902      	ldr	r1, [sp, #8]
   11e1a:	9a03      	ldr	r2, [sp, #12]
   11e1c:	4b2e      	ldr	r3, [pc, #184]	; (11ed8 <ll_rl_rpa_update+0x18c>)
   11e1e:	6019      	str	r1, [r3, #0]
   11e20:	605a      	str	r2, [r3, #4]
	}

	if (timeout) {
   11e22:	9b05      	ldr	r3, [sp, #20]
   11e24:	2b00      	cmp	r3, #0
   11e26:	d054      	beq.n	11ed2 <ll_rl_rpa_update+0x186>
		if (radio_adv_is_enabled()) {
   11e28:	f7fe ff40 	bl	10cac <radio_adv_is_enabled>
   11e2c:	2800      	cmp	r0, #0
   11e2e:	d050      	beq.n	11ed2 <ll_rl_rpa_update+0x186>
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;
	int idx;

	ll_adv = ll_adv_set_get();
   11e30:	f000 f9c0 	bl	121b4 <ll_adv_set_get>

	if (ll_adv->own_addr_type < BT_ADDR_LE_PUBLIC_ID) {
   11e34:	7843      	ldrb	r3, [r0, #1]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;
	int idx;

	ll_adv = ll_adv_set_get();
   11e36:	0007      	movs	r7, r0

	if (ll_adv->own_addr_type < BT_ADDR_LE_PUBLIC_ID) {
   11e38:	065b      	lsls	r3, r3, #25
   11e3a:	d54a      	bpl.n	11ed2 <ll_rl_rpa_update+0x186>
		return;
	}

	radio_adv_data = radio_adv_data_get();
   11e3c:	f7fe ff2a 	bl	10c94 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11e40:	0003      	movs	r3, r0
   11e42:	334f      	adds	r3, #79	; 0x4f
   11e44:	9304      	str	r3, [sp, #16]
   11e46:	781d      	ldrb	r5, [r3, #0]
   11e48:	2327      	movs	r3, #39	; 0x27
   11e4a:	001e      	movs	r6, r3
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   11e4c:	0002      	movs	r2, r0
	if (ll_adv->own_addr_type < BT_ADDR_LE_PUBLIC_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11e4e:	436e      	muls	r6, r5
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   11e50:	324e      	adds	r2, #78	; 0x4e
   11e52:	7812      	ldrb	r2, [r2, #0]
	if (ll_adv->own_addr_type < BT_ADDR_LE_PUBLIC_ID) {
		return;
	}

	radio_adv_data = radio_adv_data_get();
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11e54:	1986      	adds	r6, r0, r6
	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   11e56:	42aa      	cmp	r2, r5
   11e58:	d104      	bne.n	11e64 <ll_rl_rpa_update+0x118>
		last = radio_adv_data->last + 1;
   11e5a:	3501      	adds	r5, #1
   11e5c:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   11e5e:	2d02      	cmp	r5, #2
   11e60:	d100      	bne.n	11e64 <ll_rl_rpa_update+0x118>
			last = 0;
   11e62:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
   11e64:	210f      	movs	r1, #15
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   11e66:	436b      	muls	r3, r5
   11e68:	18c4      	adds	r4, r0, r3
	pdu->type = prev->type;
   11e6a:	7833      	ldrb	r3, [r6, #0]
   11e6c:	400b      	ands	r3, r1
   11e6e:	001a      	movs	r2, r3
   11e70:	7823      	ldrb	r3, [r4, #0]
   11e72:	438b      	bics	r3, r1
	pdu->rfu = 0;
   11e74:	4313      	orrs	r3, r2
   11e76:	2210      	movs	r2, #16
   11e78:	4393      	bics	r3, r2
   11e7a:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   11e7c:	2320      	movs	r3, #32
   11e7e:	7832      	ldrb	r2, [r6, #0]
   11e80:	3111      	adds	r1, #17
   11e82:	401a      	ands	r2, r3
   11e84:	7823      	ldrb	r3, [r4, #0]
   11e86:	438b      	bics	r3, r1
   11e88:	4313      	orrs	r3, r2
   11e8a:	7023      	strb	r3, [r4, #0]
	} else {
		pdu->chan_sel = 0;
	}


	idx = ll_rl_idx_find(ll_adv->id_addr_type, ll_adv->id_addr);
   11e8c:	7878      	ldrb	r0, [r7, #1]
   11e8e:	1cb9      	adds	r1, r7, #2
   11e90:	09c0      	lsrs	r0, r0, #7
   11e92:	f7ff fec3 	bl	11c1c <ll_rl_idx_find>
	LL_ASSERT(idx >= 0);
   11e96:	2800      	cmp	r0, #0
   11e98:	da0c      	bge.n	11eb4 <ll_rl_rpa_update+0x168>
   11e9a:	4b13      	ldr	r3, [pc, #76]	; (11ee8 <ll_rl_rpa_update+0x19c>)
   11e9c:	4a13      	ldr	r2, [pc, #76]	; (11eec <ll_rl_rpa_update+0x1a0>)
   11e9e:	9301      	str	r3, [sp, #4]
   11ea0:	4b13      	ldr	r3, [pc, #76]	; (11ef0 <ll_rl_rpa_update+0x1a4>)
   11ea2:	4914      	ldr	r1, [pc, #80]	; (11ef4 <ll_rl_rpa_update+0x1a8>)
   11ea4:	9300      	str	r3, [sp, #0]
   11ea6:	4816      	ldr	r0, [pc, #88]	; (11f00 <ll_rl_rpa_update+0x1b4>)
   11ea8:	4b16      	ldr	r3, [pc, #88]	; (11f04 <ll_rl_rpa_update+0x1b8>)
   11eaa:	f7ef fc5d 	bl	1768 <printk>
   11eae:	b662      	cpsie	i
   11eb0:	2004      	movs	r0, #4
   11eb2:	df02      	svc	2
	ll_rl_pdu_adv_update(idx, pdu);
   11eb4:	0021      	movs	r1, r4
   11eb6:	f7ff fedf 	bl	11c78 <ll_rl_pdu_adv_update>

	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   11eba:	0031      	movs	r1, r6
   11ebc:	0020      	movs	r0, r4
   11ebe:	7872      	ldrb	r2, [r6, #1]
   11ec0:	3108      	adds	r1, #8
   11ec2:	3a06      	subs	r2, #6
   11ec4:	3008      	adds	r0, #8
   11ec6:	f7ef fa4d 	bl	1364 <memcpy>
	       prev->len - BDADDR_SIZE);
	pdu->len = prev->len;;
   11eca:	7873      	ldrb	r3, [r6, #1]
   11ecc:	7063      	strb	r3, [r4, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   11ece:	9b04      	ldr	r3, [sp, #16]
   11ed0:	701d      	strb	r5, [r3, #0]
	if (timeout) {
		if (radio_adv_is_enabled()) {
			rpa_adv_refresh();
		}
	}
}
   11ed2:	b007      	add	sp, #28
   11ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ed6:	46c0      	nop			; (mov r8, r8)
   11ed8:	20001ef0 	.word	0x20001ef0
   11edc:	20001fe8 	.word	0x20001fe8
   11ee0:	20001bcb 	.word	0x20001bcb
   11ee4:	20001b19 	.word	0x20001b19
   11ee8:	000145b0 	.word	0x000145b0
   11eec:	00014570 	.word	0x00014570
   11ef0:	000145b5 	.word	0x000145b5
   11ef4:	00014577 	.word	0x00014577
   11ef8:	000166a6 	.word	0x000166a6
   11efc:	000173a5 	.word	0x000173a5
   11f00:	000166cc 	.word	0x000166cc
   11f04:	00016953 	.word	0x00016953

00011f08 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   11f08:	b510      	push	{r4, lr}
	ll_rl_rpa_update(true);
   11f0a:	2001      	movs	r0, #1
   11f0c:	f7ff ff1e 	bl	11d4c <ll_rl_rpa_update>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   11f10:	4b03      	ldr	r3, [pc, #12]	; (11f20 <rpa_timeout+0x18>)
   11f12:	4904      	ldr	r1, [pc, #16]	; (11f24 <rpa_timeout+0x1c>)
   11f14:	681a      	ldr	r2, [r3, #0]
   11f16:	4804      	ldr	r0, [pc, #16]	; (11f28 <rpa_timeout+0x20>)
   11f18:	f002 f89a 	bl	14050 <k_delayed_work_submit_to_queue>
}
   11f1c:	bd10      	pop	{r4, pc}
   11f1e:	46c0      	nop			; (mov r8, r8)
   11f20:	20001fe8 	.word	0x20001fe8
   11f24:	20001f60 	.word	0x20001f60
   11f28:	20002000 	.word	0x20002000

00011f2c <ll_rl_size_get>:


u32_t ll_rl_size_get(void)
{
	return CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
}
   11f2c:	2008      	movs	r0, #8
   11f2e:	4770      	bx	lr

00011f30 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   11f30:	b570      	push	{r4, r5, r6, lr}
	if (!rl_access_check(false)) {
   11f32:	f7ff fdc5 	bl	11ac0 <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11f36:	230c      	movs	r3, #12
	return CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE;
}

u32_t ll_rl_clear(void)
{
	if (!rl_access_check(false)) {
   11f38:	2800      	cmp	r0, #0
   11f3a:	d00c      	beq.n	11f56 <ll_rl_clear+0x26>
   11f3c:	2300      	movs	r3, #0
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
   11f3e:	2524      	movs	r5, #36	; 0x24
   11f40:	2401      	movs	r4, #1
   11f42:	4906      	ldr	r1, [pc, #24]	; (11f5c <ll_rl_clear+0x2c>)
   11f44:	0028      	movs	r0, r5
   11f46:	4358      	muls	r0, r3
   11f48:	5c42      	ldrb	r2, [r0, r1]
	radio_adv_data->last = last;
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   11f4a:	3301      	adds	r3, #1
		rl[i].taken = 0;
   11f4c:	43a2      	bics	r2, r4
   11f4e:	5442      	strb	r2, [r0, r1]
	radio_adv_data->last = last;
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   11f50:	2b08      	cmp	r3, #8
   11f52:	d1f7      	bne.n	11f44 <ll_rl_clear+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	rl_clear();

	return 0;
   11f54:	2300      	movs	r3, #0
}
   11f56:	0018      	movs	r0, r3
   11f58:	bd70      	pop	{r4, r5, r6, pc}
   11f5a:	46c0      	nop			; (mov r8, r8)
   11f5c:	20001bcb 	.word	0x20001bcb

00011f60 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   11f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11f62:	0004      	movs	r4, r0
   11f64:	9100      	str	r1, [sp, #0]
   11f66:	9201      	str	r2, [sp, #4]
	int i;

	if (!rl_access_check(false)) {
   11f68:	f7ff fdaa 	bl	11ac0 <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11f6c:	230c      	movs	r3, #12
u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
	int i;

	if (!rl_access_check(false)) {
   11f6e:	2800      	cmp	r0, #0
   11f70:	d05b      	beq.n	1202a <ll_rl_add+0xca>
   11f72:	2700      	movs	r7, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find an empty slot and insert device */
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].taken) {
   11f74:	4d2e      	ldr	r5, [pc, #184]	; (12030 <ll_rl_add+0xd0>)
   11f76:	3318      	adds	r3, #24
   11f78:	001e      	movs	r6, r3
   11f7a:	437e      	muls	r6, r7
   11f7c:	5d72      	ldrb	r2, [r6, r5]
   11f7e:	07d2      	lsls	r2, r2, #31
   11f80:	d44f      	bmi.n	12022 <ll_rl_add+0xc2>
			bt_addr_copy(&rl[i].peer_id_addr,
   11f82:	19ab      	adds	r3, r5, r6
					&id_addr->a);
   11f84:	1c61      	adds	r1, r4, #1
	}

	/* find an empty slot and insert device */
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].taken) {
			bt_addr_copy(&rl[i].peer_id_addr,
   11f86:	1c98      	adds	r0, r3, #2
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   11f88:	2206      	movs	r2, #6
   11f8a:	f7ef f9eb 	bl	1364 <memcpy>
					&id_addr->a);
			rl[i].peer_id_addr_type = id_addr->type & 0x1;
   11f8e:	7823      	ldrb	r3, [r4, #0]
   11f90:	2401      	movs	r4, #1
   11f92:	4023      	ands	r3, r4
   11f94:	001a      	movs	r2, r3
   11f96:	19ab      	adds	r3, r5, r6
   11f98:	785b      	ldrb	r3, [r3, #1]
			rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11f9a:	2110      	movs	r1, #16
	/* find an empty slot and insert device */
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].taken) {
			bt_addr_copy(&rl[i].peer_id_addr,
					&id_addr->a);
			rl[i].peer_id_addr_type = id_addr->type & 0x1;
   11f9c:	43a3      	bics	r3, r4
   11f9e:	4313      	orrs	r3, r2
   11fa0:	19aa      	adds	r2, r5, r6
   11fa2:	7053      	strb	r3, [r2, #1]
			rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11fa4:	9800      	ldr	r0, [sp, #0]
   11fa6:	f7f7 ffb3 	bl	9f10 <mem_nz>
   11faa:	2304      	movs	r3, #4
   11fac:	4004      	ands	r4, r0
   11fae:	00a0      	lsls	r0, r4, #2
   11fb0:	5d74      	ldrb	r4, [r6, r5]
			rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11fb2:	2110      	movs	r1, #16
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		if (!rl[i].taken) {
			bt_addr_copy(&rl[i].peer_id_addr,
					&id_addr->a);
			rl[i].peer_id_addr_type = id_addr->type & 0x1;
			rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   11fb4:	439c      	bics	r4, r3
   11fb6:	4304      	orrs	r4, r0
   11fb8:	5574      	strb	r4, [r6, r5]
			rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   11fba:	9801      	ldr	r0, [sp, #4]
   11fbc:	f7f7 ffa8 	bl	9f10 <mem_nz>
   11fc0:	237f      	movs	r3, #127	; 0x7f
   11fc2:	5d72      	ldrb	r2, [r6, r5]
   11fc4:	01c0      	lsls	r0, r0, #7
   11fc6:	4013      	ands	r3, r2
   11fc8:	4303      	orrs	r3, r0
   11fca:	5573      	strb	r3, [r6, r5]
			if (rl[i].pirk) {
   11fcc:	b2db      	uxtb	r3, r3
   11fce:	075a      	lsls	r2, r3, #29
   11fd0:	d511      	bpl.n	11ff6 <ll_rl_add+0x96>
				rl[i].pirk_idx = peer_irk_count;
   11fd2:	210f      	movs	r1, #15
   11fd4:	2478      	movs	r4, #120	; 0x78
   11fd6:	4a17      	ldr	r2, [pc, #92]	; (12034 <ll_rl_add+0xd4>)
   11fd8:	43a3      	bics	r3, r4
   11fda:	7810      	ldrb	r0, [r2, #0]
   11fdc:	4001      	ands	r1, r0
   11fde:	00c9      	lsls	r1, r1, #3
   11fe0:	430b      	orrs	r3, r1
   11fe2:	5573      	strb	r3, [r6, r5]
				memcpy(peer_irks[peer_irk_count++],
   11fe4:	1c43      	adds	r3, r0, #1
   11fe6:	7013      	strb	r3, [r2, #0]
   11fe8:	4b13      	ldr	r3, [pc, #76]	; (12038 <ll_rl_add+0xd8>)
   11fea:	0100      	lsls	r0, r0, #4
   11fec:	1818      	adds	r0, r3, r0
   11fee:	2210      	movs	r2, #16
   11ff0:	9900      	ldr	r1, [sp, #0]
   11ff2:	f7ef f9b7 	bl	1364 <memcpy>
				       pirk, 16);
			}
			if (rl[i].lirk) {
   11ff6:	2024      	movs	r0, #36	; 0x24
   11ff8:	4378      	muls	r0, r7
   11ffa:	4c0d      	ldr	r4, [pc, #52]	; (12030 <ll_rl_add+0xd0>)
   11ffc:	5d03      	ldrb	r3, [r0, r4]
   11ffe:	09db      	lsrs	r3, r3, #7
   12000:	d005      	beq.n	1200e <ll_rl_add+0xae>
				memcpy(rl[i].local_irk, lirk, 16);
   12002:	3008      	adds	r0, #8
   12004:	1820      	adds	r0, r4, r0
   12006:	2210      	movs	r2, #16
   12008:	9901      	ldr	r1, [sp, #4]
   1200a:	f7ef f9ab 	bl	1364 <memcpy>
			}
			rl[i].rpas_ready = 0;
   1200e:	2324      	movs	r3, #36	; 0x24
			rl[i].taken = 1;
   12010:	2202      	movs	r2, #2
				       pirk, 16);
			}
			if (rl[i].lirk) {
				memcpy(rl[i].local_irk, lirk, 16);
			}
			rl[i].rpas_ready = 0;
   12012:	435f      	muls	r7, r3
   12014:	5de3      	ldrb	r3, [r4, r7]
			rl[i].taken = 1;
   12016:	4393      	bics	r3, r2
   12018:	3a01      	subs	r2, #1
   1201a:	4313      	orrs	r3, r2
   1201c:	55e3      	strb	r3, [r4, r7]
			break;
		}
	}
	return (i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE) ?
   1201e:	2300      	movs	r3, #0
   12020:	e003      	b.n	1202a <ll_rl_add+0xca>
	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find an empty slot and insert device */
	for (i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   12022:	3701      	adds	r7, #1
   12024:	2f08      	cmp	r7, #8
   12026:	d1a7      	bne.n	11f78 <ll_rl_add+0x18>
			rl[i].rpas_ready = 0;
			rl[i].taken = 1;
			break;
		}
	}
	return (i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE) ?
   12028:	2307      	movs	r3, #7
		0x00 : BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;

}
   1202a:	0018      	movs	r0, r3
   1202c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1202e:	46c0      	nop			; (mov r8, r8)
   12030:	20001bcb 	.word	0x20001bcb
   12034:	20001b18 	.word	0x20001b18
   12038:	20001b19 	.word	0x20001b19

0001203c <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1203c:	b570      	push	{r4, r5, r6, lr}
   1203e:	0004      	movs	r4, r0
	int i;

	if (!rl_access_check(false)) {
   12040:	f7ff fd3e 	bl	11ac0 <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12044:	230c      	movs	r3, #12

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
	int i;

	if (!rl_access_check(false)) {
   12046:	2800      	cmp	r0, #0
   12048:	d022      	beq.n	12090 <ll_rl_remove+0x54>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
   1204a:	1c61      	adds	r1, r4, #1
   1204c:	7820      	ldrb	r0, [r4, #0]
   1204e:	f7ff fde5 	bl	11c1c <ll_rl_idx_find>
				16 * peer_irk_count--);
		}
		rl[i].taken = 0;
	}

	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   12052:	2302      	movs	r3, #2
	if (!rl_access_check(false)) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
   12054:	1e05      	subs	r5, r0, #0
	if (i >= 0) {
   12056:	db1b      	blt.n	12090 <ll_rl_remove+0x54>
		if (rl[i].pirk) {
   12058:	3322      	adds	r3, #34	; 0x22
   1205a:	4343      	muls	r3, r0
   1205c:	4c0d      	ldr	r4, [pc, #52]	; (12094 <ll_rl_remove+0x58>)
   1205e:	5d1b      	ldrb	r3, [r3, r4]
   12060:	075a      	lsls	r2, r3, #29
   12062:	d50e      	bpl.n	12082 <ll_rl_remove+0x46>
			u8_t idx = rl[i].pirk_idx;
			memmove(peer_irks[idx], peer_irks[idx + 1],
				16 * peer_irk_count--);
   12064:	490c      	ldr	r1, [pc, #48]	; (12098 <ll_rl_remove+0x5c>)

	/* find the device and mark it as empty */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		if (rl[i].pirk) {
			u8_t idx = rl[i].pirk_idx;
   12066:	065b      	lsls	r3, r3, #25
			memmove(peer_irks[idx], peer_irks[idx + 1],
				16 * peer_irk_count--);
   12068:	780a      	ldrb	r2, [r1, #0]
	/* find the device and mark it as empty */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		if (rl[i].pirk) {
			u8_t idx = rl[i].pirk_idx;
			memmove(peer_irks[idx], peer_irks[idx + 1],
   1206a:	0f1b      	lsrs	r3, r3, #28
				16 * peer_irk_count--);
   1206c:	1e50      	subs	r0, r2, #1
   1206e:	7008      	strb	r0, [r1, #0]
	/* find the device and mark it as empty */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
		if (rl[i].pirk) {
			u8_t idx = rl[i].pirk_idx;
			memmove(peer_irks[idx], peer_irks[idx + 1],
   12070:	480a      	ldr	r0, [pc, #40]	; (1209c <ll_rl_remove+0x60>)
   12072:	1c59      	adds	r1, r3, #1
   12074:	0109      	lsls	r1, r1, #4
   12076:	011b      	lsls	r3, r3, #4
   12078:	1841      	adds	r1, r0, r1
   1207a:	0112      	lsls	r2, r2, #4
   1207c:	18c0      	adds	r0, r0, r3
   1207e:	f7ef f95e 	bl	133e <memmove>
				16 * peer_irk_count--);
		}
		rl[i].taken = 0;
   12082:	2324      	movs	r3, #36	; 0x24
   12084:	2201      	movs	r2, #1
   12086:	435d      	muls	r5, r3
   12088:	5d63      	ldrb	r3, [r4, r5]
   1208a:	4393      	bics	r3, r2
   1208c:	5563      	strb	r3, [r4, r5]
	}

	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   1208e:	2300      	movs	r3, #0
}
   12090:	0018      	movs	r0, r3
   12092:	bd70      	pop	{r4, r5, r6, pc}
   12094:	20001bcb 	.word	0x20001bcb
   12098:	20001b18 	.word	0x20001b18
   1209c:	20001b19 	.word	0x20001b19

000120a0 <ll_rl_prpa_get>:

u32_t ll_rl_prpa_get(bt_addr_le_t *id_addr, bt_addr_t *prpa)
{
   120a0:	b510      	push	{r4, lr}
   120a2:	000c      	movs	r4, r1
	int i;

	/* find the device and return its RPA */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
   120a4:	1c41      	adds	r1, r0, #1
   120a6:	7800      	ldrb	r0, [r0, #0]
   120a8:	f7ff fdb8 	bl	11c1c <ll_rl_idx_find>
	if (i >= 0) {
		bt_addr_copy(prpa, &rl[i].peer_rpa);
	}

	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   120ac:	2302      	movs	r3, #2
{
	int i;

	/* find the device and return its RPA */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
   120ae:	2800      	cmp	r0, #0
   120b0:	db09      	blt.n	120c6 <ll_rl_prpa_get+0x26>
		bt_addr_copy(prpa, &rl[i].peer_rpa);
   120b2:	3322      	adds	r3, #34	; 0x22
   120b4:	4358      	muls	r0, r3
   120b6:	4905      	ldr	r1, [pc, #20]	; (120cc <ll_rl_prpa_get+0x2c>)
   120b8:	3018      	adds	r0, #24
   120ba:	1809      	adds	r1, r1, r0
   120bc:	2206      	movs	r2, #6
   120be:	0020      	movs	r0, r4
   120c0:	f7ef f950 	bl	1364 <memcpy>
	}

	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   120c4:	2300      	movs	r3, #0

}
   120c6:	0018      	movs	r0, r3
   120c8:	bd10      	pop	{r4, pc}
   120ca:	46c0      	nop			; (mov r8, r8)
   120cc:	20001bcb 	.word	0x20001bcb

000120d0 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   120d0:	b510      	push	{r4, lr}
   120d2:	000c      	movs	r4, r1
	int i;

	/* find the device and return the local RPA */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
   120d4:	1c41      	adds	r1, r0, #1
   120d6:	7800      	ldrb	r0, [r0, #0]
   120d8:	f7ff fda0 	bl	11c1c <ll_rl_idx_find>
	if (i >= 0) {
		bt_addr_copy(lrpa, &rl[i].local_rpa);
	}

	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   120dc:	2302      	movs	r3, #2
{
	int i;

	/* find the device and return the local RPA */
	i = ll_rl_idx_find(id_addr->type, id_addr->a.val);
	if (i >= 0) {
   120de:	2800      	cmp	r0, #0
   120e0:	db09      	blt.n	120f6 <ll_rl_lrpa_get+0x26>
		bt_addr_copy(lrpa, &rl[i].local_rpa);
   120e2:	3322      	adds	r3, #34	; 0x22
   120e4:	4358      	muls	r0, r3
   120e6:	4905      	ldr	r1, [pc, #20]	; (120fc <ll_rl_lrpa_get+0x2c>)
   120e8:	2206      	movs	r2, #6
   120ea:	1809      	adds	r1, r1, r0
   120ec:	311e      	adds	r1, #30
   120ee:	0020      	movs	r0, r4
   120f0:	f7ef f938 	bl	1364 <memcpy>
	}

	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
   120f4:	2300      	movs	r3, #0
}
   120f6:	0018      	movs	r0, r3
   120f8:	bd10      	pop	{r4, pc}
   120fa:	46c0      	nop			; (mov r8, r8)
   120fc:	20001bcb 	.word	0x20001bcb

00012100 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   12100:	b510      	push	{r4, lr}
   12102:	0004      	movs	r4, r0
	if (!rl_access_check(false)) {
   12104:	f7ff fcdc 	bl	11ac0 <rl_access_check.constprop.1>
		return BT_HCI_ERR_CMD_DISALLOWED;
   12108:	230c      	movs	r3, #12
	return (i >= 0) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
}

u32_t ll_rl_enable(u8_t enable)
{
	if (!rl_access_check(false)) {
   1210a:	2800      	cmp	r0, #0
   1210c:	d00c      	beq.n	12128 <ll_rl_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   1210e:	2c00      	cmp	r4, #0
   12110:	d005      	beq.n	1211e <ll_rl_enable+0x1e>
   12112:	2c01      	cmp	r4, #1
   12114:	d107      	bne.n	12126 <ll_rl_enable+0x26>
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
   12116:	4b05      	ldr	r3, [pc, #20]	; (1212c <ll_rl_enable+0x2c>)
   12118:	701c      	strb	r4, [r3, #0]
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return 0;
   1211a:	2300      	movs	r3, #0
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
   1211c:	e004      	b.n	12128 <ll_rl_enable+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
   1211e:	4b03      	ldr	r3, [pc, #12]	; (1212c <ll_rl_enable+0x2c>)
   12120:	701c      	strb	r4, [r3, #0]
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return 0;
   12122:	0023      	movs	r3, r4
	}

	switch (enable) {
	case BT_HCI_ADDR_RES_DISABLE:
		rl_enable = 0;
		break;
   12124:	e000      	b.n	12128 <ll_rl_enable+0x28>
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   12126:	2312      	movs	r3, #18
	}

	return 0;
}
   12128:	0018      	movs	r0, r3
   1212a:	bd10      	pop	{r4, pc}
   1212c:	20001ceb 	.word	0x20001ceb

00012130 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   12130:	23fa      	movs	r3, #250	; 0xfa
   12132:	009b      	lsls	r3, r3, #2
   12134:	4358      	muls	r0, r3
   12136:	4b01      	ldr	r3, [pc, #4]	; (1213c <ll_rl_timeout_set+0xc>)
   12138:	6018      	str	r0, [r3, #0]
}
   1213a:	4770      	bx	lr
   1213c:	20001fe8 	.word	0x20001fe8

00012140 <ll_filter_reset>:
struct k_delayed_work rpa_work;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   12140:	2300      	movs	r3, #0
   12142:	4a13      	ldr	r2, [pc, #76]	; (12190 <ll_filter_reset+0x50>)
	rpa_timeout_ms = timeout * 1000;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
   12144:	b570      	push	{r4, r5, r6, lr}
struct k_delayed_work rpa_work;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

static void filter_clear(struct ll_filter *filter)
{
	filter->enable_bitmask = 0;
   12146:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   12148:	7053      	strb	r3, [r2, #1]
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	filter_clear(&wl);
	wl_anon = 0;
   1214a:	4a12      	ldr	r2, [pc, #72]	; (12194 <ll_filter_reset+0x54>)

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1214c:	4912      	ldr	r1, [pc, #72]	; (12198 <ll_filter_reset+0x58>)
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
	filter_clear(&wl);
	wl_anon = 0;
   1214e:	7013      	strb	r3, [r2, #0]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	rl_enable = 0;
   12150:	4a12      	ldr	r2, [pc, #72]	; (1219c <ll_filter_reset+0x5c>)
	rpa_timeout_ms = timeout * 1000;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

void ll_filter_reset(bool init)
{
   12152:	0005      	movs	r5, r0
	filter_clear(&wl);
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	rl_enable = 0;
   12154:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12156:	4a12      	ldr	r2, [pc, #72]	; (121a0 <ll_filter_reset+0x60>)
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
   12158:	2624      	movs	r6, #36	; 0x24
	filter_clear(&wl);
	wl_anon = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1215a:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   1215c:	2001      	movs	r0, #1
   1215e:	4240      	negs	r0, r0
   12160:	17c1      	asrs	r1, r0, #31
   12162:	4a10      	ldr	r2, [pc, #64]	; (121a4 <ll_filter_reset+0x64>)
   12164:	6010      	str	r0, [r2, #0]
   12166:	6051      	str	r1, [r2, #4]
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
		rl[i].taken = 0;
   12168:	490f      	ldr	r1, [pc, #60]	; (121a8 <ll_filter_reset+0x68>)
   1216a:	3002      	adds	r0, #2
   1216c:	0034      	movs	r4, r6
   1216e:	435c      	muls	r4, r3
   12170:	5c62      	ldrb	r2, [r4, r1]
	radio_adv_data->last = last;
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   12172:	3301      	adds	r3, #1
		rl[i].taken = 0;
   12174:	4382      	bics	r2, r0
   12176:	5462      	strb	r2, [r4, r1]
	radio_adv_data->last = last;
}

static void rl_clear(void)
{
	for (int i = 0; i < CONFIG_BLUETOOTH_CONTROLLER_RL_SIZE; i++) {
   12178:	2b08      	cmp	r3, #8
   1217a:	d1f7      	bne.n	1216c <ll_filter_reset+0x2c>
   1217c:	480b      	ldr	r0, [pc, #44]	; (121ac <ll_filter_reset+0x6c>)
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	rl_enable = 0;
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
	rpa_last_ms = -1;
	rl_clear();
	if (init) {
   1217e:	2d00      	cmp	r5, #0
   12180:	d003      	beq.n	1218a <ll_filter_reset+0x4a>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   12182:	490b      	ldr	r1, [pc, #44]	; (121b0 <ll_filter_reset+0x70>)
   12184:	f001 ff16 	bl	13fb4 <k_delayed_work_init>
   12188:	e001      	b.n	1218e <ll_filter_reset+0x4e>
	} else {
		k_delayed_work_cancel(&rpa_work);
   1218a:	f001 ff29 	bl	13fe0 <k_delayed_work_cancel>
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */

}
   1218e:	bd70      	pop	{r4, r5, r6, pc}
   12190:	20001b99 	.word	0x20001b99
   12194:	20001ef8 	.word	0x20001ef8
   12198:	000dbba0 	.word	0x000dbba0
   1219c:	20001ceb 	.word	0x20001ceb
   121a0:	20001fe8 	.word	0x20001fe8
   121a4:	20001ef0 	.word	0x20001ef0
   121a8:	20001bcb 	.word	0x20001bcb
   121ac:	20001f60 	.word	0x20001f60
   121b0:	00011f09 	.word	0x00011f09

000121b4 <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   121b4:	4800      	ldr	r0, [pc, #0]	; (121b8 <ll_adv_set_get+0x4>)
   121b6:	4770      	bx	lr
   121b8:	20001cec 	.word	0x20001cec

000121bc <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   121bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   121be:	b08d      	sub	sp, #52	; 0x34
   121c0:	001f      	movs	r7, r3
   121c2:	ab12      	add	r3, sp, #72	; 0x48
   121c4:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   121c6:	4c83      	ldr	r4, [pc, #524]	; (123d4 <ll_adv_params_set+0x218>)
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   121c8:	9302      	str	r3, [sp, #8]
   121ca:	ab13      	add	r3, sp, #76	; 0x4c
   121cc:	781b      	ldrb	r3, [r3, #0]
   121ce:	9205      	str	r2, [sp, #20]
   121d0:	9303      	str	r3, [sp, #12]
   121d2:	ab15      	add	r3, sp, #84	; 0x54
   121d4:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   121d6:	2206      	movs	r2, #6
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   121d8:	9306      	str	r3, [sp, #24]
   121da:	ab16      	add	r3, sp, #88	; 0x58
   121dc:	781b      	ldrb	r3, [r3, #0]
   121de:	000e      	movs	r6, r1
   121e0:	9307      	str	r3, [sp, #28]
   121e2:	ab18      	add	r3, sp, #96	; 0x60
   121e4:	781b      	ldrb	r3, [r3, #0]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   121e6:	0021      	movs	r1, r4
   121e8:	a80a      	add	r0, sp, #40	; 0x28
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chl_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   121ea:	9304      	str	r3, [sp, #16]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   121ec:	f7ef f8ba 	bl	1364 <memcpy>
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   121f0:	f7fe fd5c 	bl	10cac <radio_adv_is_enabled>
   121f4:	9001      	str	r0, [sp, #4]
   121f6:	2800      	cmp	r0, #0
   121f8:	d000      	beq.n	121fc <ll_adv_params_set+0x40>
   121fa:	e0e3      	b.n	123c4 <ll_adv_params_set+0x208>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
   121fc:	2107      	movs	r1, #7
   121fe:	2501      	movs	r5, #1
   12200:	4a75      	ldr	r2, [pc, #468]	; (123d8 <ll_adv_params_set+0x21c>)
   12202:	7a13      	ldrb	r3, [r2, #8]
   12204:	438b      	bics	r3, r1
   12206:	432b      	orrs	r3, r5
   12208:	7213      	strb	r3, [r2, #8]

	/* extended */
	if (adv_type > 0x04) {
   1220a:	2f04      	cmp	r7, #4
   1220c:	d91f      	bls.n	1224e <ll_adv_params_set+0x92>
		/* legacy */
		if (evt_prop & BIT(4)) {
   1220e:	06f3      	lsls	r3, r6, #27
   12210:	d50c      	bpl.n	1222c <ll_adv_params_set+0x70>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   12212:	af09      	add	r7, sp, #36	; 0x24
   12214:	0038      	movs	r0, r7
   12216:	1da1      	adds	r1, r4, #6
   12218:	2204      	movs	r2, #4
   1221a:	f7ef f8a3 	bl	1364 <memcpy>

			adv_type = leg_adv_type[evt_prop & 0x03];
   1221e:	2303      	movs	r3, #3
   12220:	4033      	ands	r3, r6
   12222:	5cff      	ldrb	r7, [r7, r3]

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   12224:	0733      	lsls	r3, r6, #28
   12226:	d512      	bpl.n	1224e <ll_adv_params_set+0x92>
				adv_type = 0x01;
   12228:	002f      	movs	r7, r5
   1222a:	e015      	b.n	12258 <ll_adv_params_set+0x9c>
			}
		} else {
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
   1222c:	43f3      	mvns	r3, r6
   1222e:	079b      	lsls	r3, r3, #30
   12230:	d100      	bne.n	12234 <ll_adv_params_set+0x78>
   12232:	e0c9      	b.n	123c8 <ll_adv_params_set+0x20c>
   12234:	230c      	movs	r3, #12
   12236:	4033      	ands	r3, r6
   12238:	2b0c      	cmp	r3, #12
   1223a:	d100      	bne.n	1223e <ll_adv_params_set+0x82>
   1223c:	e0c4      	b.n	123c8 <ll_adv_params_set+0x20c>
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */

			ll_adv.phy_p = phy_p;
   1223e:	7a13      	ldrb	r3, [r2, #8]
   12240:	9804      	ldr	r0, [sp, #16]
   12242:	438b      	bics	r3, r1
   12244:	4008      	ands	r0, r1
   12246:	4303      	orrs	r3, r0
   12248:	7213      	strb	r3, [r2, #8]
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
			}

			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1224a:	2705      	movs	r7, #5
   1224c:	e001      	b.n	12252 <ll_adv_params_set+0x96>
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
   1224e:	2f01      	cmp	r7, #1
   12250:	d002      	beq.n	12258 <ll_adv_params_set+0x9c>
		ll_adv.interval = interval;
   12252:	4b61      	ldr	r3, [pc, #388]	; (123d8 <ll_adv_params_set+0x21c>)
   12254:	9a05      	ldr	r2, [sp, #20]
   12256:	e001      	b.n	1225c <ll_adv_params_set+0xa0>
	} else {
		ll_adv.interval = 0;
   12258:	2200      	movs	r2, #0
   1225a:	4b5f      	ldr	r3, [pc, #380]	; (123d8 <ll_adv_params_set+0x21c>)
   1225c:	60da      	str	r2, [r3, #12]
	}
	ll_adv.chl_map = chl_map;
   1225e:	2207      	movs	r2, #7
   12260:	4d5d      	ldr	r5, [pc, #372]	; (123d8 <ll_adv_params_set+0x21c>)
   12262:	9b06      	ldr	r3, [sp, #24]
   12264:	7829      	ldrb	r1, [r5, #0]
   12266:	4013      	ands	r3, r2
   12268:	4391      	bics	r1, r2
	ll_adv.filter_policy = filter_policy;
   1226a:	430b      	orrs	r3, r1
   1226c:	2118      	movs	r1, #24
   1226e:	9807      	ldr	r0, [sp, #28]
   12270:	3a04      	subs	r2, #4
   12272:	4010      	ands	r0, r2
   12274:	00c2      	lsls	r2, r0, #3
   12276:	438b      	bics	r3, r1
   12278:	4313      	orrs	r3, r2
   1227a:	702b      	strb	r3, [r5, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   1227c:	f7fe fd0a 	bl	10c94 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   12280:	0003      	movs	r3, r0
   12282:	334f      	adds	r3, #79	; 0x4f
   12284:	781c      	ldrb	r4, [r3, #0]
   12286:	2327      	movs	r3, #39	; 0x27
	pdu->type = pdu_adv_type[adv_type];
   12288:	210f      	movs	r1, #15
	ll_adv.chl_map = chl_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1228a:	435c      	muls	r4, r3
	pdu->type = pdu_adv_type[adv_type];
   1228c:	ab0a      	add	r3, sp, #40	; 0x28
   1228e:	5ddb      	ldrb	r3, [r3, r7]
	ll_adv.chl_map = chl_map;
	ll_adv.filter_policy = filter_policy;

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   12290:	1904      	adds	r4, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   12292:	400b      	ands	r3, r1
   12294:	001a      	movs	r2, r3
   12296:	7823      	ldrb	r3, [r4, #0]
   12298:	438b      	bics	r3, r1
	pdu->rfu = 0;
   1229a:	4313      	orrs	r3, r2
   1229c:	2210      	movs	r2, #16
   1229e:	4393      	bics	r3, r2
   122a0:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2) &&
   122a2:	4019      	ands	r1, r3
   122a4:	1892      	adds	r2, r2, r2
   122a6:	2901      	cmp	r1, #1
   122a8:	d801      	bhi.n	122ae <ll_adv_params_set+0xf2>
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
   122aa:	4313      	orrs	r3, r2
   122ac:	e000      	b.n	122b0 <ll_adv_params_set+0xf4>
	} else {
		pdu->chan_sel = 0;
   122ae:	4393      	bics	r3, r2
   122b0:	7023      	strb	r3, [r4, #0]
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   122b2:	2303      	movs	r3, #3
   122b4:	2160      	movs	r1, #96	; 0x60
   122b6:	9a02      	ldr	r2, [sp, #8]
   122b8:	4013      	ands	r3, r2
   122ba:	015a      	lsls	r2, r3, #5
   122bc:	786b      	ldrb	r3, [r5, #1]
   122be:	438b      	bics	r3, r1
   122c0:	4313      	orrs	r3, r2
   122c2:	706b      	strb	r3, [r5, #1]
	if (own_addr_type >= BT_ADDR_LE_PUBLIC_ID) {
   122c4:	9b02      	ldr	r3, [sp, #8]
   122c6:	2b01      	cmp	r3, #1
   122c8:	d90b      	bls.n	122e2 <ll_adv_params_set+0x126>
		ll_adv.id_addr_type = direct_addr_type;
   122ca:	9b03      	ldr	r3, [sp, #12]
   122cc:	311f      	adds	r1, #31
   122ce:	01da      	lsls	r2, r3, #7
   122d0:	786b      	ldrb	r3, [r5, #1]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   122d2:	1ca8      	adds	r0, r5, #2
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
	if (own_addr_type >= BT_ADDR_LE_PUBLIC_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   122d4:	400b      	ands	r3, r1
   122d6:	4313      	orrs	r3, r2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   122d8:	9914      	ldr	r1, [sp, #80]	; 0x50
   122da:	2206      	movs	r2, #6
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
	if (own_addr_type >= BT_ADDR_LE_PUBLIC_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   122dc:	706b      	strb	r3, [r5, #1]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   122de:	f7ef f841 	bl	1364 <memcpy>
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   122e2:	2101      	movs	r1, #1
   122e4:	2040      	movs	r0, #64	; 0x40
   122e6:	9d02      	ldr	r5, [sp, #8]
   122e8:	7823      	ldrb	r3, [r4, #0]
   122ea:	400d      	ands	r5, r1
   122ec:	01aa      	lsls	r2, r5, #6
   122ee:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
   122f0:	4313      	orrs	r3, r2
   122f2:	227f      	movs	r2, #127	; 0x7f
   122f4:	4013      	ands	r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   122f6:	3a70      	subs	r2, #112	; 0x70
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
   122f8:	7023      	strb	r3, [r4, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   122fa:	401a      	ands	r2, r3
   122fc:	428a      	cmp	r2, r1
   122fe:	d10b      	bne.n	12318 <ll_adv_params_set+0x15c>
		pdu->rx_addr = direct_addr_type;
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   12300:	0020      	movs	r0, r4
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		pdu->rx_addr = direct_addr_type;
   12302:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   12304:	3008      	adds	r0, #8
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
		pdu->rx_addr = direct_addr_type;
   12306:	01d2      	lsls	r2, r2, #7
   12308:	4313      	orrs	r3, r2
   1230a:	7023      	strb	r3, [r4, #0]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   1230c:	2206      	movs	r2, #6
   1230e:	9914      	ldr	r1, [sp, #80]	; 0x50
   12310:	f7ef f828 	bl	1364 <memcpy>
		       BDADDR_SIZE);
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   12314:	230c      	movs	r3, #12
   12316:	e03a      	b.n	1238e <ll_adv_params_set+0x1d2>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   12318:	2a07      	cmp	r2, #7
   1231a:	d134      	bne.n	12386 <ll_adv_params_set+0x1ca>
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;
   1231c:	01b0      	lsls	r0, r6, #6
   1231e:	70a0      	strb	r0, [r4, #2]

		/* Zero-init header flags */
		*(u8_t *)h = 0;
   12320:	2000      	movs	r0, #0
		struct pdu_adv_payload_com_ext_adv *p;
		struct ext_adv_hdr *h;
		u8_t *ptr;
		u8_t len;

		p = (void *)&pdu->payload.adv_ext_ind;
   12322:	1ca2      	adds	r2, r4, #2
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
   12324:	1d23      	adds	r3, r4, #4
		/* No ACAD and no AdvData */
		p->ext_hdr_len = 0;
		p->adv_mode = evt_prop & 0x03;

		/* Zero-init header flags */
		*(u8_t *)h = 0;
   12326:	70e0      	strb	r0, [r4, #3]

		/* AdvA flag */
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   12328:	06b0      	lsls	r0, r6, #26
   1232a:	d408      	bmi.n	1233e <ll_adv_params_set+0x182>
   1232c:	273f      	movs	r7, #63	; 0x3f
   1232e:	78a0      	ldrb	r0, [r4, #2]
   12330:	43b8      	bics	r0, r7
   12332:	d104      	bne.n	1233e <ll_adv_params_set+0x182>
   12334:	9804      	ldr	r0, [sp, #16]
   12336:	2804      	cmp	r0, #4
   12338:	d001      	beq.n	1233e <ll_adv_params_set+0x182>
			/* TODO: optional on 1M */
			h->adv_addr = 1;
   1233a:	70e1      	strb	r1, [r4, #3]

			/* NOTE: AdvA is filled at enable */
			ptr += BDADDR_SIZE;
   1233c:	3306      	adds	r3, #6
		/* TODO: AuxPtr flag */

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
   1233e:	2040      	movs	r0, #64	; 0x40
   12340:	4206      	tst	r6, r0
   12342:	d003      	beq.n	1234c <ll_adv_params_set+0x190>
			h->tx_pwr = 1;
   12344:	78e1      	ldrb	r1, [r4, #3]
			ptr++;
   12346:	3301      	adds	r3, #1

		/* TODO: SyncInfo flag */

		/* Tx Power flag */
		if (evt_prop & BIT(6)) {
			h->tx_pwr = 1;
   12348:	4301      	orrs	r1, r0
   1234a:	70e1      	strb	r1, [r4, #3]
			ptr++;
		}

		/* Calc primary PDU len */
		len = ptr - (u8_t *)p;
   1234c:	1a9a      	subs	r2, r3, r2
   1234e:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   12350:	2a02      	cmp	r2, #2
   12352:	d908      	bls.n	12366 <ll_adv_params_set+0x1aa>
				    ext_hdr_adi_adv_data) + sizeof(*h))) {
			p->ext_hdr_len = len -
   12354:	263f      	movs	r6, #63	; 0x3f
   12356:	1e51      	subs	r1, r2, #1
   12358:	4031      	ands	r1, r6
   1235a:	0008      	movs	r0, r1
   1235c:	78a1      	ldrb	r1, [r4, #2]
   1235e:	43b1      	bics	r1, r6
   12360:	4301      	orrs	r1, r0
   12362:	70a1      	strb	r1, [r4, #2]
   12364:	e000      	b.n	12368 <ll_adv_params_set+0x1ac>
				offsetof(struct pdu_adv_payload_com_ext_adv,
					 ext_hdr_adi_adv_data);
			pdu->len = len;
		} else {
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   12366:	2201      	movs	r2, #1
   12368:	7062      	strb	r2, [r4, #1]
		/* TODO: AdvData */

		/* TODO: ACAD */

		/* Tx Power */
		if (h->tx_pwr) {
   1236a:	78e2      	ldrb	r2, [r4, #3]
   1236c:	0652      	lsls	r2, r2, #25
   1236e:	d50f      	bpl.n	12390 <ll_adv_params_set+0x1d4>
			u8_t _tx_pwr;

			_tx_pwr = 0;
   12370:	9a17      	ldr	r2, [sp, #92]	; 0x5c
			if (tx_pwr) {
   12372:	1e11      	subs	r1, r2, #0
   12374:	d004      	beq.n	12380 <ll_adv_params_set+0x1c4>
				if (*tx_pwr != 0x7F) {
   12376:	7812      	ldrb	r2, [r2, #0]
   12378:	2a7f      	cmp	r2, #127	; 0x7f
   1237a:	d101      	bne.n	12380 <ll_adv_params_set+0x1c4>
					_tx_pwr = *tx_pwr;
				} else {
					*tx_pwr = _tx_pwr;
   1237c:	2200      	movs	r2, #0
   1237e:	700a      	strb	r2, [r1, #0]
				}
			}

			ptr--;
			*ptr = _tx_pwr;
   12380:	3b01      	subs	r3, #1
   12382:	701a      	strb	r2, [r3, #0]
   12384:	e004      	b.n	12390 <ll_adv_params_set+0x1d4>
		/* NOTE: TargetA, filled at enable and RPA timeout */

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	} else if (pdu->len == 0) {
   12386:	7863      	ldrb	r3, [r4, #1]
   12388:	2b00      	cmp	r3, #0
   1238a:	d101      	bne.n	12390 <ll_adv_params_set+0x1d4>
		pdu->len = BDADDR_SIZE;
   1238c:	3306      	adds	r3, #6
   1238e:	7063      	strb	r3, [r4, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   12390:	f7fe fc86 	bl	10ca0 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   12394:	0003      	movs	r3, r0
   12396:	334f      	adds	r3, #79	; 0x4f
   12398:	781a      	ldrb	r2, [r3, #0]
   1239a:	2327      	movs	r3, #39	; 0x27
   1239c:	4353      	muls	r3, r2
   1239e:	18c0      	adds	r0, r0, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   123a0:	230f      	movs	r3, #15
   123a2:	7802      	ldrb	r2, [r0, #0]
   123a4:	439a      	bics	r2, r3
	pdu->rfu = 0;
   123a6:	3b0b      	subs	r3, #11
   123a8:	431a      	orrs	r2, r3
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   123aa:	01ab      	lsls	r3, r5, #6
   123ac:	258f      	movs	r5, #143	; 0x8f
   123ae:	4015      	ands	r5, r2
	pdu->rx_addr = 0;
   123b0:	431d      	orrs	r5, r3
   123b2:	237f      	movs	r3, #127	; 0x7f
   123b4:	401d      	ands	r5, r3
	if (pdu->len == 0) {
   123b6:	7843      	ldrb	r3, [r0, #1]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
	pdu->rx_addr = 0;
   123b8:	7005      	strb	r5, [r0, #0]
	if (pdu->len == 0) {
   123ba:	2b00      	cmp	r3, #0
   123bc:	d106      	bne.n	123cc <ll_adv_params_set+0x210>
		pdu->len = BDADDR_SIZE;
   123be:	3306      	adds	r3, #6
   123c0:	7043      	strb	r3, [r0, #1]
   123c2:	e003      	b.n	123cc <ll_adv_params_set+0x210>

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
		return 0x0C; /* Command Disallowed */
   123c4:	230c      	movs	r3, #12
   123c6:	e000      	b.n	123ca <ll_adv_params_set+0x20e>
			/* - Connectable and scannable not allowed;
			 * - High duty cycle directed connectable not allowed
			 */
			if (((evt_prop & 0x03) == 0x03) ||
			    ((evt_prop & 0x0C) == 0x0C)) {
				return 0x12; /* invalid HCI cmd param */
   123c8:	2312      	movs	r3, #18
   123ca:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   123cc:	9801      	ldr	r0, [sp, #4]
   123ce:	b00d      	add	sp, #52	; 0x34
   123d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123d2:	46c0      	nop			; (mov r8, r8)
   123d4:	000141f2 	.word	0x000141f2
   123d8:	20001cec 	.word	0x20001cec

000123dc <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   123dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   123de:	0007      	movs	r7, r0
   123e0:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   123e2:	f7fe fc57 	bl	10c94 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   123e6:	0003      	movs	r3, r0
   123e8:	2127      	movs	r1, #39	; 0x27
   123ea:	334f      	adds	r3, #79	; 0x4f
   123ec:	781d      	ldrb	r5, [r3, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   123ee:	0006      	movs	r6, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   123f0:	4369      	muls	r1, r5
   123f2:	1841      	adds	r1, r0, r1
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   123f4:	200f      	movs	r0, #15
   123f6:	780b      	ldrb	r3, [r1, #0]
   123f8:	4018      	ands	r0, r3
   123fa:	2801      	cmp	r0, #1
   123fc:	d043      	beq.n	12486 <ll_adv_data_set+0xaa>
   123fe:	2807      	cmp	r0, #7
   12400:	d041      	beq.n	12486 <ll_adv_data_set+0xaa>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   12402:	0032      	movs	r2, r6
   12404:	324e      	adds	r2, #78	; 0x4e
   12406:	7812      	ldrb	r2, [r2, #0]
   12408:	42aa      	cmp	r2, r5
   1240a:	d104      	bne.n	12416 <ll_adv_data_set+0x3a>
		last = radio_adv_data->last + 1;
   1240c:	3501      	adds	r5, #1
   1240e:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   12410:	2d02      	cmp	r5, #2
   12412:	d100      	bne.n	12416 <ll_adv_data_set+0x3a>
			last = 0;
   12414:	2500      	movs	r5, #0
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
   12416:	200f      	movs	r0, #15
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   12418:	2427      	movs	r4, #39	; 0x27
	pdu->type = prev->type;
   1241a:	4003      	ands	r3, r0
   1241c:	001a      	movs	r2, r3
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1241e:	436c      	muls	r4, r5
   12420:	1934      	adds	r4, r6, r4
	pdu->type = prev->type;
   12422:	7823      	ldrb	r3, [r4, #0]
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
	pdu->len = BDADDR_SIZE + len;

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   12424:	364f      	adds	r6, #79	; 0x4f
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
   12426:	4383      	bics	r3, r0
	pdu->rfu = 0;
   12428:	4313      	orrs	r3, r2
   1242a:	2210      	movs	r2, #16
   1242c:	4393      	bics	r3, r2
   1242e:	7023      	strb	r3, [r4, #0]

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   12430:	2301      	movs	r3, #1
   12432:	7808      	ldrb	r0, [r1, #0]
   12434:	0940      	lsrs	r0, r0, #5
   12436:	4018      	ands	r0, r3
   12438:	7823      	ldrb	r3, [r4, #0]
   1243a:	0140      	lsls	r0, r0, #5
   1243c:	001a      	movs	r2, r3
   1243e:	2320      	movs	r3, #32
   12440:	439a      	bics	r2, r3
   12442:	4310      	orrs	r0, r2
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   12444:	2201      	movs	r2, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
	pdu->type = prev->type;
	pdu->rfu = 0;

	if (IS_ENABLED(CONFIG_BLUETOOTH_CONTROLLER_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   12446:	7020      	strb	r0, [r4, #0]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   12448:	780b      	ldrb	r3, [r1, #0]
   1244a:	099b      	lsrs	r3, r3, #6
   1244c:	4013      	ands	r3, r2
   1244e:	019a      	lsls	r2, r3, #6
   12450:	b2c3      	uxtb	r3, r0
   12452:	2040      	movs	r0, #64	; 0x40
   12454:	4383      	bics	r3, r0
   12456:	4313      	orrs	r3, r2
   12458:	7023      	strb	r3, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
   1245a:	780b      	ldrb	r3, [r1, #0]
   1245c:	7820      	ldrb	r0, [r4, #0]
   1245e:	09db      	lsrs	r3, r3, #7
   12460:	01da      	lsls	r2, r3, #7
   12462:	237f      	movs	r3, #127	; 0x7f
   12464:	4003      	ands	r3, r0
   12466:	4313      	orrs	r3, r2
   12468:	7023      	strb	r3, [r4, #0]
	memcpy(&pdu->payload.adv_ind.addr[0],
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
   1246a:	3102      	adds	r1, #2
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
	pdu->rx_addr = prev->rx_addr;
	memcpy(&pdu->payload.adv_ind.addr[0],
   1246c:	2206      	movs	r2, #6
   1246e:	1ca0      	adds	r0, r4, #2
   12470:	f7ee ff78 	bl	1364 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   12474:	0020      	movs	r0, r4
   12476:	003a      	movs	r2, r7
   12478:	3008      	adds	r0, #8
   1247a:	9901      	ldr	r1, [sp, #4]
   1247c:	f7ee ff72 	bl	1364 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   12480:	1dbb      	adds	r3, r7, #6
   12482:	7063      	strb	r3, [r4, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   12484:	7035      	strb	r5, [r6, #0]
}
   12486:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00012488 <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   12488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1248a:	0007      	movs	r7, r0
   1248c:	9101      	str	r1, [sp, #4]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1248e:	f7fe fc07 	bl	10ca0 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   12492:	0003      	movs	r3, r0
   12494:	0002      	movs	r2, r0
   12496:	334e      	adds	r3, #78	; 0x4e
   12498:	324f      	adds	r2, #79	; 0x4f
   1249a:	7811      	ldrb	r1, [r2, #0]
   1249c:	781b      	ldrb	r3, [r3, #0]
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1249e:	0005      	movs	r5, r0
   124a0:	000e      	movs	r6, r1
	if (radio_scan_data->first == radio_scan_data->last) {
   124a2:	428b      	cmp	r3, r1
   124a4:	d104      	bne.n	124b0 <ll_scan_data_set+0x28>
		last = radio_scan_data->last + 1;
   124a6:	1c4e      	adds	r6, r1, #1
   124a8:	b2f6      	uxtb	r6, r6
		if (last == DOUBLE_BUFFER_SIZE) {
   124aa:	2e02      	cmp	r6, #2
   124ac:	d100      	bne.n	124b0 <ll_scan_data_set+0x28>
			last = 0;
   124ae:	2600      	movs	r6, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   124b0:	2427      	movs	r4, #39	; 0x27
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   124b2:	220f      	movs	r2, #15
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   124b4:	4361      	muls	r1, r4
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   124b6:	4374      	muls	r4, r6
   124b8:	192c      	adds	r4, r5, r4
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   124ba:	7823      	ldrb	r3, [r4, #0]
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   124bc:	2040      	movs	r0, #64	; 0x40

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   124be:	4393      	bics	r3, r2
	pdu->rfu = 0;
   124c0:	3a0b      	subs	r2, #11
   124c2:	4313      	orrs	r3, r2
	pdu->chan_sel = 0;
   124c4:	32cb      	adds	r2, #203	; 0xcb
   124c6:	4013      	ands	r3, r2
   124c8:	7023      	strb	r3, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
   124ca:	2340      	movs	r3, #64	; 0x40
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   124cc:	1869      	adds	r1, r5, r1
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   124ce:	780a      	ldrb	r2, [r1, #0]
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE + len;
	memcpy(&pdu->payload.scan_rsp.addr[0],
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
   124d0:	3102      	adds	r1, #2
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   124d2:	401a      	ands	r2, r3
   124d4:	7823      	ldrb	r3, [r4, #0]
	memcpy(&pdu->payload.scan_rsp.addr[0],
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   124d6:	354f      	adds	r5, #79	; 0x4f
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = prev->tx_addr;
   124d8:	4383      	bics	r3, r0
	pdu->rx_addr = 0;
   124da:	4313      	orrs	r3, r2
   124dc:	227f      	movs	r2, #127	; 0x7f
   124de:	4013      	ands	r3, r2
   124e0:	7023      	strb	r3, [r4, #0]
	pdu->len = BDADDR_SIZE + len;
   124e2:	1dbb      	adds	r3, r7, #6
   124e4:	7063      	strb	r3, [r4, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   124e6:	1ca0      	adds	r0, r4, #2
   124e8:	3a79      	subs	r2, #121	; 0x79
   124ea:	f7ee ff3b 	bl	1364 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   124ee:	0020      	movs	r0, r4
   124f0:	003a      	movs	r2, r7
   124f2:	9901      	ldr	r1, [sp, #4]
   124f4:	3008      	adds	r0, #8
   124f6:	f7ee ff35 	bl	1364 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   124fa:	702e      	strb	r6, [r5, #0]
}
   124fc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

00012500 <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
   12500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   12502:	2800      	cmp	r0, #0
   12504:	d102      	bne.n	1250c <ll_adv_enable+0xc>
		status = radio_adv_disable();
   12506:	f7ff f887 	bl	11618 <radio_adv_disable>

		return status;
   1250a:	e059      	b.n	125c0 <ll_adv_enable+0xc0>
	 */

	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
   1250c:	f7fe fbc2 	bl	10c94 <radio_adv_data_get>
   12510:	0005      	movs	r5, r0
	radio_scan_data = radio_scan_data_get();
   12512:	f7fe fbc5 	bl	10ca0 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
   12516:	002b      	movs	r3, r5
	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   12518:	2227      	movs	r2, #39	; 0x27
			[radio_scan_data->last][0];

	if (0) {

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1251a:	210f      	movs	r1, #15
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
   1251c:	334f      	adds	r3, #79	; 0x4f
	/* remember addr to use and also update the addr in
	 * both adv and scan response PDUs.
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1251e:	781c      	ldrb	r4, [r3, #0]
   12520:	4e28      	ldr	r6, [pc, #160]	; (125c4 <ll_adv_enable+0xc4>)
   12522:	4354      	muls	r4, r2
   12524:	192c      	adds	r4, r5, r4
			[radio_scan_data->last][0];

	if (0) {

#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   12526:	7823      	ldrb	r3, [r4, #0]
   12528:	4019      	ands	r1, r3
   1252a:	2907      	cmp	r1, #7
   1252c:	d10a      	bne.n	12544 <ll_adv_enable+0x44>
		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);

		/* AdvA, fill here at enable */
		if (h->adv_addr) {
   1252e:	78e2      	ldrb	r2, [r4, #3]
   12530:	07d2      	lsls	r2, r2, #31
   12532:	d522      	bpl.n	1257a <ll_adv_enable+0x7a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   12534:	0658      	lsls	r0, r3, #25
   12536:	2100      	movs	r1, #0
   12538:	0fc0      	lsrs	r0, r0, #31
   1253a:	f7ff fa9d 	bl	11a78 <ll_addr_get>
   1253e:	0001      	movs	r1, r0
		struct ext_adv_hdr *h;
		u8_t *ptr;

		p = (void *)&pdu_adv->payload.adv_ext_ind;
		h = (void *)p->ext_hdr_adi_adv_data;
		ptr = (u8_t *)h + sizeof(*h);
   12540:	1d20      	adds	r0, r4, #4
   12542:	e039      	b.n	125b8 <ll_adv_enable+0xb8>
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
			[radio_scan_data->last][0];
   12544:	0003      	movs	r3, r0
   12546:	334f      	adds	r3, #79	; 0x4f
	 */
	radio_adv_data = radio_adv_data_get();
	radio_scan_data = radio_scan_data_get();
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
			[radio_adv_data->last][0];
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   12548:	781d      	ldrb	r5, [r3, #0]
   1254a:	436a      	muls	r2, r5
   1254c:	1885      	adds	r5, r0, r2
		/* TODO: TargetA, fill here at enable */
#endif /* CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	} else {
		bool priv = false;
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PRIVACY)
		if (ctrl_rl_enabled()) {
   1254e:	f7ff fb8b 	bl	11c68 <ctrl_rl_enabled>
			/*@todo: Enable AR */
		}

		if (ll_adv.own_addr_type >= BT_ADDR_LE_PUBLIC_ID) {
   12552:	7870      	ldrb	r0, [r6, #1]
   12554:	0643      	lsls	r3, r0, #25
   12556:	d51c      	bpl.n	12592 <ll_adv_enable+0x92>
			/* Look up the resolving list */
			int idx = ll_rl_idx_find(ll_adv.id_addr_type,
   12558:	1cb1      	adds	r1, r6, #2
   1255a:	09c0      	lsrs	r0, r0, #7
   1255c:	f7ff fb5e 	bl	11c1c <ll_rl_idx_find>
   12560:	1e07      	subs	r7, r0, #0
						 ll_adv.id_addr);

			if (idx >= 0) {
   12562:	db02      	blt.n	1256a <ll_adv_enable+0x6a>
				/* Generate RPAs if required */
				ll_rl_rpa_update(false);
   12564:	2000      	movs	r0, #0
   12566:	f7ff fbf1 	bl	11d4c <ll_rl_rpa_update>
			}

			ll_rl_pdu_adv_update(idx, pdu_adv);
   1256a:	0021      	movs	r1, r4
   1256c:	0038      	movs	r0, r7
   1256e:	f7ff fb83 	bl	11c78 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(idx, pdu_scan);
   12572:	0029      	movs	r1, r5
   12574:	0038      	movs	r0, r7
   12576:	f7ff fb7f 	bl	11c78 <ll_rl_pdu_adv_update>
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval, ll_adv.chl_map,
				  ll_adv.filter_policy);
   1257a:	7832      	ldrb	r2, [r6, #0]
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval, ll_adv.chl_map,
   1257c:	7a30      	ldrb	r0, [r6, #8]
				  ll_adv.filter_policy);
   1257e:	06d3      	lsls	r3, r2, #27
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
		}
	}
#if defined(CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT)
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval, ll_adv.chl_map,
   12580:	0740      	lsls	r0, r0, #29
   12582:	0752      	lsls	r2, r2, #29
   12584:	0f9b      	lsrs	r3, r3, #30
   12586:	0f52      	lsrs	r2, r2, #29
   12588:	89b1      	ldrh	r1, [r6, #12]
   1258a:	0f40      	lsrs	r0, r0, #29
   1258c:	f7fe fec4 	bl	11318 <radio_adv_enable>
#else /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */
	status = radio_adv_enable(ll_adv.interval, ll_adv.chl_map,
				  ll_adv.filter_policy);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
   12590:	e016      	b.n	125c0 <ll_adv_enable+0xc0>
			priv = true;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   12592:	7820      	ldrb	r0, [r4, #0]
   12594:	2100      	movs	r1, #0
   12596:	0640      	lsls	r0, r0, #25
   12598:	0fc0      	lsrs	r0, r0, #31
   1259a:	f7ff fa6d 	bl	11a78 <ll_addr_get>
			ll_rl_pdu_adv_update(idx, pdu_scan);
			priv = true;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1259e:	2206      	movs	r2, #6
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   125a0:	0001      	movs	r1, r0
			ll_rl_pdu_adv_update(idx, pdu_scan);
			priv = true;
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   125a2:	1ca0      	adds	r0, r4, #2
   125a4:	f7ee fede 	bl	1364 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   125a8:	7820      	ldrb	r0, [r4, #0]
   125aa:	2100      	movs	r1, #0
   125ac:	0640      	lsls	r0, r0, #25
   125ae:	0fc0      	lsrs	r0, r0, #31
   125b0:	f7ff fa62 	bl	11a78 <ll_addr_get>
   125b4:	0001      	movs	r1, r0
		}
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_PRIVACY */
		if (!priv) {
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   125b6:	1ca8      	adds	r0, r5, #2
   125b8:	2206      	movs	r2, #6
   125ba:	f7ee fed3 	bl	1364 <memcpy>
   125be:	e7dc      	b.n	1257a <ll_adv_enable+0x7a>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chl_map,
				  ll_adv.filter_policy);
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_ADV_EXT */

	return status;
}
   125c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125c2:	46c0      	nop			; (mov r8, r8)
   125c4:	20001cec 	.word	0x20001cec

000125c8 <net_buf_pool_get>:
/* Linker-defined symbol bound to the static pool structs */
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
   125c8:	2324      	movs	r3, #36	; 0x24
   125ca:	4358      	muls	r0, r3
   125cc:	4b01      	ldr	r3, [pc, #4]	; (125d4 <net_buf_pool_get+0xc>)
   125ce:	18c0      	adds	r0, r0, r3
}
   125d0:	4770      	bx	lr
   125d2:	46c0      	nop			; (mov r8, r8)
   125d4:	20000748 	.word	0x20000748

000125d8 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   125d8:	b570      	push	{r4, r5, r6, lr}
   125da:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   125dc:	f3ef 8510 	mrs	r5, PRIMASK
   125e0:	b672      	cpsid	i
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   125e2:	8ac3      	ldrh	r3, [r0, #22]
   125e4:	2b00      	cmp	r3, #0
   125e6:	d028      	beq.n	1263a <net_buf_alloc+0x62>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   125e8:	8a82      	ldrh	r2, [r0, #20]
   125ea:	429a      	cmp	r2, r3
   125ec:	d908      	bls.n	12600 <net_buf_alloc+0x28>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   125ee:	2100      	movs	r1, #0
   125f0:	f000 fff6 	bl	135e0 <k_queue_get>
			if (buf) {
   125f4:	2800      	cmp	r0, #0
   125f6:	d003      	beq.n	12600 <net_buf_alloc+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   125f8:	2d00      	cmp	r5, #0
   125fa:	d126      	bne.n	1264a <net_buf_alloc+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   125fc:	b662      	cpsie	i
   125fe:	e024      	b.n	1264a <net_buf_alloc+0x72>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   12600:	8ae0      	ldrh	r0, [r4, #22]
   12602:	1e43      	subs	r3, r0, #1
   12604:	82e3      	strh	r3, [r4, #22]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   12606:	2d00      	cmp	r5, #0
   12608:	d100      	bne.n	1260c <net_buf_alloc+0x34>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1260a:	b662      	cpsie	i
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1260c:	2103      	movs	r1, #3
   1260e:	8b23      	ldrh	r3, [r4, #24]
   12610:	8b62      	ldrh	r2, [r4, #26]
   12612:	3303      	adds	r3, #3
   12614:	1852      	adds	r2, r2, r1
   12616:	438a      	bics	r2, r1
   12618:	438b      	bics	r3, r1
   1261a:	189b      	adds	r3, r3, r2
   1261c:	8aa2      	ldrh	r2, [r4, #20]
   1261e:	3310      	adds	r3, #16
   12620:	1a10      	subs	r0, r2, r0
   12622:	4358      	muls	r0, r3
   12624:	6a23      	ldr	r3, [r4, #32]

	buf->pool_id = pool_id(pool);
   12626:	4a0e      	ldr	r2, [pc, #56]	; (12660 <net_buf_alloc+0x88>)
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      u16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   12628:	1818      	adds	r0, r3, r0

	buf->pool_id = pool_id(pool);
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <net_buf_alloc+0x8c>)
   1262c:	1ae3      	subs	r3, r4, r3
   1262e:	109b      	asrs	r3, r3, #2
   12630:	4353      	muls	r3, r2
   12632:	7183      	strb	r3, [r0, #6]
	buf->size = pool->buf_size;
   12634:	8b23      	ldrh	r3, [r4, #24]
   12636:	81c3      	strh	r3, [r0, #14]

		uninit_count = pool->uninit_count--;
		irq_unlock(key);

		buf = pool_get_uninit(pool, uninit_count);
		goto success;
   12638:	e007      	b.n	1264a <net_buf_alloc+0x72>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1263a:	2d00      	cmp	r5, #0
   1263c:	d100      	bne.n	12640 <net_buf_alloc+0x68>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1263e:	b662      	cpsie	i
		}
	} else {
		buf = k_lifo_get(&pool->free, timeout);
	}
#else
	buf = k_lifo_get(&pool->free, timeout);
   12640:	0020      	movs	r0, r4
   12642:	f000 ffcd 	bl	135e0 <k_queue_get>
#endif
	if (!buf) {
   12646:	2800      	cmp	r0, #0
   12648:	d008      	beq.n	1265c <net_buf_alloc+0x84>
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1264a:	2301      	movs	r3, #1
   1264c:	7103      	strb	r3, [r0, #4]
	buf->flags = 0;
   1264e:	2300      	movs	r3, #0
   12650:	7143      	strb	r3, [r0, #5]
	buf->frags = NULL;
   12652:	6003      	str	r3, [r0, #0]
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   12654:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   12656:	0003      	movs	r3, r0
   12658:	3310      	adds	r3, #16
   1265a:	6083      	str	r3, [r0, #8]
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1265c:	bd70      	pop	{r4, r5, r6, pc}
   1265e:	46c0      	nop			; (mov r8, r8)
   12660:	38e38e39 	.word	0x38e38e39
   12664:	20000748 	.word	0x20000748

00012668 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   12668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1266a:	0007      	movs	r7, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1266c:	f000 ffb8 	bl	135e0 <k_queue_get>
   12670:	1e05      	subs	r5, r0, #0
	if (!buf) {
   12672:	d00f      	beq.n	12694 <net_buf_get+0x2c>
   12674:	0004      	movs	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   12676:	2601      	movs	r6, #1
   12678:	7963      	ldrb	r3, [r4, #5]
   1267a:	4033      	ands	r3, r6
   1267c:	d009      	beq.n	12692 <net_buf_get+0x2a>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1267e:	2100      	movs	r1, #0
   12680:	0038      	movs	r0, r7
   12682:	f000 ffad 	bl	135e0 <k_queue_get>
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   12686:	7963      	ldrb	r3, [r4, #5]

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   12688:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1268a:	43b3      	bics	r3, r6
   1268c:	7163      	strb	r3, [r4, #5]
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1268e:	0004      	movs	r4, r0
   12690:	e7f2      	b.n	12678 <net_buf_get+0x10>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   12692:	6023      	str	r3, [r4, #0]

	return buf;
}
   12694:	0028      	movs	r0, r5
   12696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012698 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   12698:	0003      	movs	r3, r0
   1269a:	3310      	adds	r3, #16
   1269c:	1859      	adds	r1, r3, r1
   1269e:	6081      	str	r1, [r0, #8]
}
   126a0:	4770      	bx	lr

000126a2 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   126a2:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   126a4:	000a      	movs	r2, r1
		tail->flags |= NET_BUF_FRAGS;
   126a6:	2501      	movs	r5, #1
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   126a8:	6814      	ldr	r4, [r2, #0]
   126aa:	2c00      	cmp	r4, #0
   126ac:	d004      	beq.n	126b8 <net_buf_put+0x16>
		tail->flags |= NET_BUF_FRAGS;
   126ae:	7953      	ldrb	r3, [r2, #5]
   126b0:	432b      	orrs	r3, r5
   126b2:	7153      	strb	r3, [r2, #5]
   126b4:	0022      	movs	r2, r4
   126b6:	e7f7      	b.n	126a8 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   126b8:	f000 ff4e 	bl	13558 <k_queue_append_list>
}
   126bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000126c0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   126c0:	b570      	push	{r4, r5, r6, lr}
   126c2:	0001      	movs	r1, r0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   126c4:	2424      	movs	r4, #36	; 0x24
void net_buf_unref(struct net_buf *buf)
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
   126c6:	2900      	cmp	r1, #0
   126c8:	d015      	beq.n	126f6 <net_buf_unref+0x36>
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   126ca:	790b      	ldrb	r3, [r1, #4]
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
		struct net_buf *frags = buf->frags;
   126cc:	680d      	ldr	r5, [r1, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   126ce:	3b01      	subs	r3, #1
   126d0:	b2db      	uxtb	r3, r3
   126d2:	710b      	strb	r3, [r1, #4]
   126d4:	2b00      	cmp	r3, #0
   126d6:	d10e      	bne.n	126f6 <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   126d8:	7988      	ldrb	r0, [r1, #6]

		if (--buf->ref > 0) {
			return;
		}

		buf->frags = NULL;
   126da:	600b      	str	r3, [r1, #0]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   126dc:	4360      	muls	r0, r4
   126de:	4b06      	ldr	r3, [pc, #24]	; (126f8 <net_buf_unref+0x38>)
   126e0:	1818      	adds	r0, r3, r0
   126e2:	69c3      	ldr	r3, [r0, #28]
   126e4:	2b00      	cmp	r3, #0
   126e6:	d002      	beq.n	126ee <net_buf_unref+0x2e>
			pool->destroy(buf);
   126e8:	0008      	movs	r0, r1
   126ea:	4798      	blx	r3
   126ec:	e001      	b.n	126f2 <net_buf_unref+0x32>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   126ee:	f000 ff2d 	bl	1354c <k_queue_prepend>
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   126f2:	0029      	movs	r1, r5
   126f4:	e7e7      	b.n	126c6 <net_buf_unref+0x6>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   126f6:	bd70      	pop	{r4, r5, r6, pc}
   126f8:	20000748 	.word	0x20000748

000126fc <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   126fc:	7903      	ldrb	r3, [r0, #4]
   126fe:	3301      	adds	r3, #1
   12700:	7103      	strb	r3, [r0, #4]
	return buf;
}
   12702:	4770      	bx	lr

00012704 <net_buf_simple_add>:
 *
 *  @return Tail pointer for the buffer.
 */
static inline u8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
   12704:	8882      	ldrh	r2, [r0, #4]
   12706:	6803      	ldr	r3, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   12708:	1851      	adds	r1, r2, r1
   1270a:	189b      	adds	r3, r3, r2
   1270c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1270e:	0018      	movs	r0, r3
   12710:	4770      	bx	lr

00012712 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   12712:	b510      	push	{r4, lr}
   12714:	0004      	movs	r4, r0
   12716:	8883      	ldrh	r3, [r0, #4]
   12718:	6800      	ldr	r0, [r0, #0]
   1271a:	18c0      	adds	r0, r0, r3

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1271c:	189b      	adds	r3, r3, r2
   1271e:	80a3      	strh	r3, [r4, #4]
void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   12720:	f7ee fe20 	bl	1364 <memcpy>
}
   12724:	bd10      	pop	{r4, pc}

00012726 <net_buf_simple_add_u8>:
   12726:	8882      	ldrh	r2, [r0, #4]
   12728:	6803      	ldr	r3, [r0, #0]
   1272a:	189b      	adds	r3, r3, r2

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1272c:	3201      	adds	r2, #1
   1272e:	8082      	strh	r2, [r0, #4]

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;

	return u8;
}
   12730:	0018      	movs	r0, r3
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   12732:	7019      	strb	r1, [r3, #0]

	return u8;
}
   12734:	4770      	bx	lr

00012736 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   12736:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   12738:	8882      	ldrh	r2, [r0, #4]
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1273a:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   1273c:	1851      	adds	r1, r2, r1
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1273e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   12740:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   12742:	0018      	movs	r0, r3
   12744:	4770      	bx	lr

00012746 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   12746:	8883      	ldrh	r3, [r0, #4]
   12748:	1a5b      	subs	r3, r3, r1
   1274a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1274c:	6803      	ldr	r3, [r0, #0]
   1274e:	1859      	adds	r1, r3, r1
   12750:	6001      	str	r1, [r0, #0]
}
   12752:	0008      	movs	r0, r1
   12754:	4770      	bx	lr

00012756 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   12756:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   12758:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1275a:	2101      	movs	r1, #1

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
	u8_t val;

	val = buf->data[0];
   1275c:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1275e:	f7ff fff2 	bl	12746 <net_buf_simple_pull>

	return val;
}
   12762:	0020      	movs	r0, r4
   12764:	bd10      	pop	{r4, pc}

00012766 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   12766:	6802      	ldr	r2, [r0, #0]

	return val;
}

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   12768:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1276a:	7854      	ldrb	r4, [r2, #1]
   1276c:	7813      	ldrb	r3, [r2, #0]
   1276e:	0224      	lsls	r4, r4, #8
   12770:	431c      	orrs	r4, r3
	net_buf_simple_pull(buf, sizeof(val));
   12772:	2102      	movs	r1, #2
   12774:	f7ff ffe7 	bl	12746 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   12778:	0020      	movs	r0, r4
   1277a:	bd10      	pop	{r4, pc}

0001277c <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1277c:	0002      	movs	r2, r0
   1277e:	6803      	ldr	r3, [r0, #0]
   12780:	3208      	adds	r2, #8
   12782:	1a98      	subs	r0, r3, r2
}
   12784:	4770      	bx	lr

00012786 <net_buf_simple_tailroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   12786:	0003      	movs	r3, r0
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   12788:	6801      	ldr	r1, [r0, #0]
   1278a:	88c2      	ldrh	r2, [r0, #6]
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1278c:	3308      	adds	r3, #8
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1278e:	1acb      	subs	r3, r1, r3
   12790:	8880      	ldrh	r0, [r0, #4]
   12792:	1ad3      	subs	r3, r2, r3
   12794:	1a18      	subs	r0, r3, r0
}
   12796:	4770      	bx	lr

00012798 <nordicsemi_nrf51_init>:
static bool ftpan_59(void);

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK;

static int nordicsemi_nrf51_init(struct device *arg)
{
   12798:	b530      	push	{r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   1279a:	f3ef 8010 	mrs	r0, PRIMASK
   1279e:	b672      	cpsid	i
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   127a0:	4a1e      	ldr	r2, [pc, #120]	; (1281c <nordicsemi_nrf51_init+0x84>)
   127a2:	7813      	ldrb	r3, [r2, #0]
   127a4:	0011      	movs	r1, r2
   127a6:	2b01      	cmp	r3, #1
   127a8:	d119      	bne.n	127de <nordicsemi_nrf51_init+0x46>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   127aa:	4b1d      	ldr	r3, [pc, #116]	; (12820 <nordicsemi_nrf51_init+0x88>)
	return 0;
}

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   127ac:	681b      	ldr	r3, [r3, #0]
   127ae:	071b      	lsls	r3, r3, #28
   127b0:	d115      	bne.n	127de <nordicsemi_nrf51_init+0x46>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
   127b2:	4b1c      	ldr	r3, [pc, #112]	; (12824 <nordicsemi_nrf51_init+0x8c>)
   127b4:	25e0      	movs	r5, #224	; 0xe0
   127b6:	681a      	ldr	r2, [r3, #0]
   127b8:	23f0      	movs	r3, #240	; 0xf0
   127ba:	0014      	movs	r4, r2
   127bc:	401c      	ands	r4, r3
   127be:	422a      	tst	r2, r5
   127c0:	d10b      	bne.n	127da <nordicsemi_nrf51_init+0x42>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   127c2:	4a19      	ldr	r2, [pc, #100]	; (12828 <nordicsemi_nrf51_init+0x90>)

static bool ftpan_26(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x00) &&
   127c4:	6812      	ldr	r2, [r2, #0]
   127c6:	421a      	tst	r2, r3
   127c8:	d109      	bne.n	127de <nordicsemi_nrf51_init+0x46>
	 * instructions in the devices that do not need it is that the new
	 * peripherals in the second generation devices (LPCOMP for example)
	 * will not be available.
	 */
	if (ftpan_26()) {
		*(volatile u32_t *)0x40000504 = 0xC007FFDF;
   127ca:	4a18      	ldr	r2, [pc, #96]	; (1282c <nordicsemi_nrf51_init+0x94>)
   127cc:	4b18      	ldr	r3, [pc, #96]	; (12830 <nordicsemi_nrf51_init+0x98>)
   127ce:	601a      	str	r2, [r3, #0]
		*(volatile u32_t *)0x40006C18 = 0x00008000;
   127d0:	2280      	movs	r2, #128	; 0x80
   127d2:	4b18      	ldr	r3, [pc, #96]	; (12834 <nordicsemi_nrf51_init+0x9c>)
   127d4:	0212      	lsls	r2, r2, #8
   127d6:	601a      	str	r2, [r3, #0]
   127d8:	e001      	b.n	127de <nordicsemi_nrf51_init+0x46>
		}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x10) &&
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   127da:	2c30      	cmp	r4, #48	; 0x30
   127dc:	d0f1      	beq.n	127c2 <nordicsemi_nrf51_init+0x2a>
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   127de:	680b      	ldr	r3, [r1, #0]
   127e0:	b2db      	uxtb	r3, r3
   127e2:	2b01      	cmp	r3, #1
   127e4:	d10d      	bne.n	12802 <nordicsemi_nrf51_init+0x6a>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   127e6:	4a0e      	ldr	r2, [pc, #56]	; (12820 <nordicsemi_nrf51_init+0x88>)
	return false;
}

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
   127e8:	6812      	ldr	r2, [r2, #0]
   127ea:	0712      	lsls	r2, r2, #28
   127ec:	d109      	bne.n	12802 <nordicsemi_nrf51_init+0x6a>
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
   127ee:	21f0      	movs	r1, #240	; 0xf0
   127f0:	4a0c      	ldr	r2, [pc, #48]	; (12824 <nordicsemi_nrf51_init+0x8c>)
   127f2:	6812      	ldr	r2, [r2, #0]
   127f4:	400a      	ands	r2, r1
   127f6:	2a40      	cmp	r2, #64	; 0x40
   127f8:	d103      	bne.n	12802 <nordicsemi_nrf51_init+0x6a>
		    (((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   127fa:	4a0b      	ldr	r2, [pc, #44]	; (12828 <nordicsemi_nrf51_init+0x90>)

static bool ftpan_59(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x1) &&
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) &&
   127fc:	6812      	ldr	r2, [r2, #0]
   127fe:	420a      	tst	r2, r1
   12800:	d003      	beq.n	1280a <nordicsemi_nrf51_init+0x72>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   12802:	2800      	cmp	r0, #0
   12804:	d107      	bne.n	12816 <nordicsemi_nrf51_init+0x7e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   12806:	b662      	cpsie	i
	 */
	NMI_INIT();

	irq_unlock(key);

	return 0;
   12808:	e005      	b.n	12816 <nordicsemi_nrf51_init+0x7e>
	 * "MPU: Reset value of DISABLEINDEBUG register is incorrect" found
	 * at Product Anomaly document for your device found at
	 * https://www.nordicsemi.com/.
	 */
	if (ftpan_59()) {
		NRF_MPU->DISABLEINDEBUG =
   1280a:	22c1      	movs	r2, #193	; 0xc1
   1280c:	2180      	movs	r1, #128	; 0x80
   1280e:	00d2      	lsls	r2, r2, #3
   12810:	05c9      	lsls	r1, r1, #23
   12812:	508b      	str	r3, [r1, r2]
   12814:	e7f5      	b.n	12802 <nordicsemi_nrf51_init+0x6a>
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12816:	2000      	movs	r0, #0
   12818:	bd30      	pop	{r4, r5, pc}
   1281a:	46c0      	nop			; (mov r8, r8)
   1281c:	f0000fe0 	.word	0xf0000fe0
   12820:	f0000fe4 	.word	0xf0000fe4
   12824:	f0000fe8 	.word	0xf0000fe8
   12828:	f0000fec 	.word	0xf0000fec
   1282c:	c007ffdf 	.word	0xc007ffdf
   12830:	40000504 	.word	0x40000504
   12834:	40006c18 	.word	0x40006c18

00012838 <_IntExit>:
SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _IntExit)

/* _IntExit falls through to _ExcExit (they are aliases of each other) */

#ifdef CONFIG_TIMESLICING
    push {lr}
   12838:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   1283a:	f001 f88d 	bl	13958 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
   1283e:	bc01      	pop	{r0}
    mov lr, r0
   12840:	4686      	mov	lr, r0
   12842:	46c0      	nop			; (mov r8, r8)

00012844 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   12844:	4805      	ldr	r0, [pc, #20]	; (1285c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   12846:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   12848:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   1284a:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   1284c:	d805      	bhi.n	1285a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   1284e:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   12850:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   12852:	d002      	beq.n	1285a <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   12854:	4902      	ldr	r1, [pc, #8]	; (12860 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   12856:	4a03      	ldr	r2, [pc, #12]	; (12864 <_EXIT_EXC+0xa>)
    str r2, [r1]
   12858:	600a      	str	r2, [r1, #0]

0001285a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   1285a:	4770      	bx	lr
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   1285c:	20001dbc 	.word	0x20001dbc
    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    cmp r0, r1
    beq _EXIT_EXC

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   12860:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
   12864:	10000000 	.word	0x10000000

00012868 <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
   12868:	b5f0      	push	{r4, r5, r6, r7, lr}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   1286a:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
   1286c:	2200      	movs	r2, #0
   1286e:	2603      	movs	r6, #3
   12870:	25ff      	movs	r5, #255	; 0xff
   12872:	00a4      	lsls	r4, r4, #2
   12874:	0010      	movs	r0, r2
   12876:	002f      	movs	r7, r5
   12878:	4030      	ands	r0, r6
   1287a:	00c0      	lsls	r0, r0, #3
   1287c:	4087      	lsls	r7, r0
   1287e:	0893      	lsrs	r3, r2, #2
   12880:	4904      	ldr	r1, [pc, #16]	; (12894 <_IntLibInit+0x2c>)
   12882:	009b      	lsls	r3, r3, #2
   12884:	185b      	adds	r3, r3, r1
   12886:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12888:	3201      	adds	r2, #1
   1288a:	43b9      	bics	r1, r7
   1288c:	5119      	str	r1, [r3, r4]
   1288e:	2a1a      	cmp	r2, #26
   12890:	d1f0      	bne.n	12874 <_IntLibInit+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   12892:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12894:	e000e100 	.word	0xe000e100

00012898 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12898:	4913      	ldr	r1, [pc, #76]	; (128e8 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1289a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1289c:	2028      	movs	r0, #40	; 0x28
    add r0, r2
   1289e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   128a0:	f3ef 8c09 	mrs	ip, PSP

#if defined(CONFIG_ARMV6_M)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
   128a4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
   128a6:	4643      	mov	r3, r8
    mov r4, r9
   128a8:	464c      	mov	r4, r9
    mov r5, r10
   128aa:	4655      	mov	r5, sl
    mov r6, r11
   128ac:	465e      	mov	r6, fp
    mov r7, ip
   128ae:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
   128b0:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   128b2:	4f0e      	ldr	r7, [pc, #56]	; (128ec <_thread_irq_disabled+0x22>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   128b4:	4e0e      	ldr	r6, [pc, #56]	; (128f0 <_thread_irq_disabled+0x26>)

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
   128b6:	b672      	cpsid	i
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   128b8:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   128ba:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   128bc:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   128be:	6d90      	ldr	r0, [r2, #88]	; 0x58
    movs.n r3, #0
   128c0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   128c2:	6593      	str	r3, [r2, #88]	; 0x58
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
   128c4:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
   128c6:	d100      	bne.n	128ca <_thread_irq_disabled>
    cpsie i
   128c8:	b662      	cpsie	i

000128ca <_thread_irq_disabled>:
_thread_irq_disabled:

    ldr r4, =_thread_offset_to_callee_saved
   128ca:	2428      	movs	r4, #40	; 0x28
    adds r0, r2, r4
   128cc:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
   128ce:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
   128d0:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
   128d2:	4698      	mov	r8, r3
    mov r9, r4
   128d4:	46a1      	mov	r9, r4
    mov r10, r5
   128d6:	46aa      	mov	sl, r5
    mov r11, r6
   128d8:	46b3      	mov	fp, r6
    mov ip, r7
   128da:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
   128dc:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
   128de:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ldmia r0, {v1-v8, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   128e0:	f38c 8809 	msr	PSP, ip
    pop {lr}
#endif
#endif

    /* exc return */
    bx lr
   128e4:	4770      	bx	lr
   128e6:	0000      	.short	0x0000
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   128e8:	20001dbc 	.word	0x20001dbc
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   128ec:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
   128f0:	08000000 	.word	0x08000000

000128f4 <__svc>:
#if defined(CONFIG_ARMV6_M)
SECTION_FUNC(TEXT, __svc)
    /* Use EXC_RETURN state to find out if stack frame is on the
     * MSP or PSP
     */
    ldr r0, =0x4
   128f4:	2004      	movs	r0, #4
    mov r1, lr
   128f6:	4671      	mov	r1, lr
    tst r1, r0
   128f8:	4201      	tst	r1, r0
    beq _stack_frame_msp
   128fa:	d002      	beq.n	12902 <_stack_frame_msp>
    mrs r0, PSP
   128fc:	f3ef 8009 	mrs	r0, PSP
    bne _stack_frame_endif
   12900:	d101      	bne.n	12906 <_stack_frame_endif>

00012902 <_stack_frame_msp>:
_stack_frame_msp:
    mrs r0, MSP
   12902:	f3ef 8008 	mrs	r0, MSP

00012906 <_stack_frame_endif>:
_stack_frame_endif:

    /* Figure out what SVC call number was invoked */
    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   12906:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    subs r1, r1, #2
   12908:	3902      	subs	r1, #2
    ldrb r1, [r1, #0]
   1290a:	7809      	ldrb	r1, [r1, #0]
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */

    cmp r1, #2
   1290c:	2902      	cmp	r1, #2
    beq _oops
   1290e:	d000      	beq.n	12912 <_oops>
    pop {r3}
    mov lr, r3
#endif

    /* exception return is done in _IntExit() */
    b _IntExit
   12910:	e792      	b.n	12838 <_IntExit>

00012912 <_oops>:

_oops:
    push {lr}
   12912:	b500      	push	{lr}
    blx _do_kernel_oops
   12914:	f000 f918 	bl	12b48 <_do_kernel_oops>
    pop {pc}
   12918:	bd00      	pop	{pc}
   1291a:	46c0      	nop			; (mov r8, r8)

0001291c <__swap>:
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
   1291c:	4905      	ldr	r1, [pc, #20]	; (12934 <__swap+0x18>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1291e:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   12920:	6590      	str	r0, [r2, #88]	; 0x58

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   12922:	4905      	ldr	r1, [pc, #20]	; (12938 <__swap+0x1c>)
    ldr r1, [r1]
   12924:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   12926:	65d1      	str	r1, [r2, #92]	; 0x5c

#if defined(CONFIG_ARMV6_M)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
   12928:	4904      	ldr	r1, [pc, #16]	; (1293c <__swap+0x20>)
    ldr r3, =_SCS_ICSR_PENDSV
   1292a:	4b05      	ldr	r3, [pc, #20]	; (12940 <__swap+0x24>)
    str r3, [r1, #0]
   1292c:	600b      	str	r3, [r1, #0]
    /* Unlock interrupts to allow PendSV, since it's running at prio 0xff
     *
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
   1292e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   12930:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    bx lr
   12932:	4770      	bx	lr
    pop {r3}
#else
    pop {lr}
#endif
#endif
    ldr r1, =_kernel
   12934:	20001dbc 	.word	0x20001dbc

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   12938:	00017614 	.word	0x00017614

#if defined(CONFIG_ARMV6_M)
    /* No priority-based interrupt masking on M0/M0+,
     * pending PendSV is used instead of svc
     */
    ldr r1, =_SCS_ICSR
   1293c:	e000ed04 	.word	0xe000ed04
    ldr r3, =_SCS_ICSR_PENDSV
   12940:	10000000 	.word	0x10000000

00012944 <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12944:	4b0e      	ldr	r3, [pc, #56]	; (12980 <_Fault+0x3c>)
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   12946:	b510      	push	{r4, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12948:	685a      	ldr	r2, [r3, #4]
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   1294a:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1294c:	05d2      	lsls	r2, r2, #23
   1294e:	0dd2      	lsrs	r2, r2, #23
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
	switch (fault) {
   12950:	2a03      	cmp	r2, #3
   12952:	d108      	bne.n	12966 <_Fault+0x22>
 *
 * @return N/A
 */
static void _HardFault(const NANO_ESF *esf)
{
	PR_EXC("***** HARD FAULT *****\n");
   12954:	480b      	ldr	r0, [pc, #44]	; (12984 <_Fault+0x40>)
   12956:	f7ee ff07 	bl	1768 <printk>
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
{
	PR_EXC("  Executing thread ID (thread): %p\n"
   1295a:	f000 ffcd 	bl	138f8 <k_current_get>
   1295e:	69a2      	ldr	r2, [r4, #24]
   12960:	0001      	movs	r1, r0
   12962:	4809      	ldr	r0, [pc, #36]	; (12988 <_Fault+0x44>)
   12964:	e005      	b.n	12972 <_Fault+0x2e>
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   12966:	4909      	ldr	r1, [pc, #36]	; (1298c <_Fault+0x48>)
   12968:	2a0f      	cmp	r2, #15
   1296a:	dd00      	ble.n	1296e <_Fault+0x2a>
   1296c:	4908      	ldr	r1, [pc, #32]	; (12990 <_Fault+0x4c>)
   1296e:	4809      	ldr	r0, [pc, #36]	; (12994 <_Fault+0x50>)
   12970:	3a10      	subs	r2, #16
   12972:	f7ee fef9 	bl	1768 <printk>
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   12976:	0021      	movs	r1, r4
   12978:	2000      	movs	r0, #0
   1297a:	f000 f8eb 	bl	12b54 <_SysFatalErrorHandler>
}
   1297e:	bd10      	pop	{r4, pc}
   12980:	e000ed00 	.word	0xe000ed00
   12984:	000173e4 	.word	0x000173e4
   12988:	000173fc 	.word	0x000173fc
   1298c:	000173b6 	.word	0x000173b6
   12990:	000173cb 	.word	0x000173cb
   12994:	00017446 	.word	0x00017446

00012998 <_FaultInit>:
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
}
   12998:	4770      	bx	lr
	...

0001299c <_arch_irq_enable>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1299c:	231f      	movs	r3, #31
   1299e:	4018      	ands	r0, r3
   129a0:	3b1e      	subs	r3, #30
   129a2:	4083      	lsls	r3, r0
   129a4:	4a01      	ldr	r2, [pc, #4]	; (129ac <_arch_irq_enable+0x10>)
   129a6:	6013      	str	r3, [r2, #0]
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
}
   129a8:	4770      	bx	lr
   129aa:	46c0      	nop			; (mov r8, r8)
   129ac:	e000e100 	.word	0xe000e100

000129b0 <_arch_irq_disable>:
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   129b0:	231f      	movs	r3, #31
   129b2:	4018      	ands	r0, r3
   129b4:	3b1e      	subs	r3, #30
   129b6:	4083      	lsls	r3, r0
   129b8:	4a01      	ldr	r2, [pc, #4]	; (129c0 <_arch_irq_disable+0x10>)
   129ba:	67d3      	str	r3, [r2, #124]	; 0x7c
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}
   129bc:	4770      	bx	lr
   129be:	46c0      	nop			; (mov r8, r8)
   129c0:	e000e104 	.word	0xe000e104

000129c4 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   129c4:	0942      	lsrs	r2, r0, #5
   129c6:	4b04      	ldr	r3, [pc, #16]	; (129d8 <_arch_irq_is_enabled+0x14>)
   129c8:	0092      	lsls	r2, r2, #2
   129ca:	58d2      	ldr	r2, [r2, r3]
   129cc:	231f      	movs	r3, #31
   129ce:	4003      	ands	r3, r0
   129d0:	2001      	movs	r0, #1
   129d2:	4098      	lsls	r0, r3
   129d4:	4010      	ands	r0, r2
}
   129d6:	4770      	bx	lr
   129d8:	e000e100 	.word	0xe000e100

000129dc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   129dc:	b243      	sxtb	r3, r0
 * and possibly one additional to support zero latency interrupts.
 *
 * @return N/A
 */
void _irq_priority_set(unsigned int irq, unsigned int prio, u32_t flags)
{
   129de:	b570      	push	{r4, r5, r6, lr}
   129e0:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
   129e2:	2b00      	cmp	r3, #0
   129e4:	da14      	bge.n	12a10 <_irq_priority_set+0x34>
   129e6:	230f      	movs	r3, #15
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   129e8:	b2c0      	uxtb	r0, r0
   129ea:	4003      	ands	r3, r0
   129ec:	3b08      	subs	r3, #8
   129ee:	4a12      	ldr	r2, [pc, #72]	; (12a38 <_irq_priority_set+0x5c>)
   129f0:	089b      	lsrs	r3, r3, #2
   129f2:	2403      	movs	r4, #3
   129f4:	009b      	lsls	r3, r3, #2
   129f6:	189b      	adds	r3, r3, r2
   129f8:	22ff      	movs	r2, #255	; 0xff
   129fa:	4020      	ands	r0, r4
   129fc:	40a0      	lsls	r0, r4
   129fe:	0014      	movs	r4, r2
   12a00:	400a      	ands	r2, r1
   12a02:	4084      	lsls	r4, r0
   12a04:	4082      	lsls	r2, r0
   12a06:	69dd      	ldr	r5, [r3, #28]
   12a08:	43a5      	bics	r5, r4
   12a0a:	432a      	orrs	r2, r5
   12a0c:	61da      	str	r2, [r3, #28]
   12a0e:	e011      	b.n	12a34 <_irq_priority_set+0x58>
   12a10:	4a0a      	ldr	r2, [pc, #40]	; (12a3c <_irq_priority_set+0x60>)
   12a12:	089b      	lsrs	r3, r3, #2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   12a14:	2503      	movs	r5, #3
   12a16:	009b      	lsls	r3, r3, #2
   12a18:	189b      	adds	r3, r3, r2
   12a1a:	22ff      	movs	r2, #255	; 0xff
   12a1c:	4028      	ands	r0, r5
   12a1e:	40a8      	lsls	r0, r5
   12a20:	0015      	movs	r5, r2
   12a22:	24c0      	movs	r4, #192	; 0xc0
   12a24:	4085      	lsls	r5, r0
   12a26:	400a      	ands	r2, r1
   12a28:	4082      	lsls	r2, r0
   12a2a:	00a4      	lsls	r4, r4, #2
   12a2c:	591e      	ldr	r6, [r3, r4]
   12a2e:	43ae      	bics	r6, r5
   12a30:	4332      	orrs	r2, r6
   12a32:	511a      	str	r2, [r3, r4]
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
}
   12a34:	bd70      	pop	{r4, r5, r6, pc}
   12a36:	46c0      	nop			; (mov r8, r8)
   12a38:	e000ed00 	.word	0xe000ed00
   12a3c:	e000e100 	.word	0xe000e100

00012a40 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   12a40:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	__reserved();
   12a42:	f000 f841 	bl	12ac8 <__hard_fault>
}
   12a46:	bd10      	pop	{r4, pc}

00012a48 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   12a48:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   12a4a:	f3ef 8410 	mrs	r4, PRIMASK
   12a4e:	b672      	cpsid	i
	__asm__ volatile("cpsid i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   12a50:	4b05      	ldr	r3, [pc, #20]	; (12a68 <_arch_isr_direct_pm+0x20>)
   12a52:	6958      	ldr	r0, [r3, #20]
   12a54:	2800      	cmp	r0, #0
   12a56:	d003      	beq.n	12a60 <_arch_isr_direct_pm+0x18>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   12a58:	2200      	movs	r2, #0
   12a5a:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   12a5c:	f000 f966 	bl	12d2c <_sys_power_save_idle_exit>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   12a60:	2c00      	cmp	r4, #0
   12a62:	d100      	bne.n	12a66 <_arch_isr_direct_pm+0x1e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   12a64:	b662      	cpsie	i
	__asm__ volatile("cpsie i" : : : "memory");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

}
   12a66:	bd10      	pop	{r4, pc}
   12a68:	20001dbc 	.word	0x20001dbc

00012a6c <_new_thread>:

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   12a6c:	b570      	push	{r4, r5, r6, lr}
   12a6e:	001e      	movs	r6, r3

	__ASSERT(!((u32_t)pStackMem & (STACK_ALIGN - 1)),
		 "stack is not aligned properly\n"
		 "%d-byte alignment required\n", STACK_ALIGN);

	char *stackEnd = pStackMem + stackSize;
   12a70:	188c      	adds	r4, r1, r2
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   12a72:	9b08      	ldr	r3, [sp, #32]
   12a74:	9907      	ldr	r1, [sp, #28]
   12a76:	2204      	movs	r2, #4

void _new_thread(struct k_thread *thread, char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   12a78:	0005      	movs	r5, r0
   12a7a:	f001 fa47 	bl	13f0c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
   12a7e:	2207      	movs	r2, #7
   12a80:	4394      	bics	r4, r2
   12a82:	0022      	movs	r2, r4
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   12a84:	2001      	movs	r0, #1

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   12a86:	2300      	movs	r3, #0
   12a88:	4909      	ldr	r1, [pc, #36]	; (12ab0 <_new_thread+0x44>)

	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
   12a8a:	3a20      	subs	r2, #32
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   12a8c:	4381      	bics	r1, r0
   12a8e:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   12a90:	652b      	str	r3, [r5, #80]	; 0x50
   12a92:	6191      	str	r1, [r2, #24]
	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
   12a94:	9904      	ldr	r1, [sp, #16]

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
				    sizeof(struct __esf));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
	pInitCtx->a1 = (u32_t)pEntry;
   12a96:	6016      	str	r6, [r2, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   12a98:	6051      	str	r1, [r2, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   12a9a:	9905      	ldr	r1, [sp, #20]
   12a9c:	6091      	str	r1, [r2, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   12a9e:	9906      	ldr	r1, [sp, #24]
   12aa0:	60d1      	str	r1, [r2, #12]
	pInitCtx->xpsr =
   12aa2:	2180      	movs	r1, #128	; 0x80
   12aa4:	0449      	lsls	r1, r1, #17
   12aa6:	61d1      	str	r1, [r2, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   12aa8:	64aa      	str	r2, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   12aaa:	65ab      	str	r3, [r5, #88]	; 0x58
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */

	thread_monitor_init(thread);
}
   12aac:	bd70      	pop	{r4, r5, r6, pc}
   12aae:	46c0      	nop			; (mov r8, r8)
   12ab0:	00013dd9 	.word	0x00013dd9

00012ab4 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   12ab4:	4901      	ldr	r1, [pc, #4]	; (12abc <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   12ab6:	2210      	movs	r2, #16
	str r2, [r1]
   12ab8:	600a      	str	r2, [r1, #0]
	bx lr
   12aba:	4770      	bx	lr
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   12abc:	e000ed10 	.word	0xe000ed10

00012ac0 <k_cpu_idle>:
	pop {r0}
	mov lr, r0
#endif

#if defined(CONFIG_ARMV6_M)
	cpsie i
   12ac0:	b662      	cpsie	i
	msr BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   12ac2:	bf30      	wfi

	bx lr
   12ac4:	4770      	bx	lr
   12ac6:	46c0      	nop			; (mov r8, r8)

00012ac8 <__hard_fault>:
#endif /* CONFIG_ARMV6_M */
SECTION_SUBSEC_FUNC(TEXT,__fault,__reserved)

#if defined(CONFIG_ARMV6_M)
	/* force unlock interrupts */
	cpsie i
   12ac8:	b662      	cpsie	i

	/* Use EXC_RETURN state to find out if stack frame is on the
	 * MSP or PSP
	 */
	ldr r0, =0x4
   12aca:	2004      	movs	r0, #4
	mov r1, lr
   12acc:	4671      	mov	r1, lr
	tst r1, r0
   12ace:	4201      	tst	r1, r0
	beq _stack_frame_msp
   12ad0:	d002      	beq.n	12ad8 <_stack_frame_msp>
	mrs r0, PSP
   12ad2:	f3ef 8009 	mrs	r0, PSP
	bne _stack_frame_endif
   12ad6:	d101      	bne.n	12adc <_stack_frame_endif>

00012ad8 <_stack_frame_msp>:
_stack_frame_msp:
	mrs r0, MSP
   12ad8:	f3ef 8008 	mrs	r0, MSP

00012adc <_stack_frame_endif>:
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   12adc:	b500      	push	{lr}
	bl _Fault
   12ade:	f7ff ff31 	bl	12944 <_Fault>

	pop {pc}
   12ae2:	bd00      	pop	{pc}

00012ae4 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   12ae4:	b570      	push	{r4, r5, r6, lr}
   12ae6:	0004      	movs	r4, r0
	switch (reason) {
   12ae8:	3801      	subs	r0, #1
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   12aea:	000d      	movs	r5, r1
	switch (reason) {
   12aec:	2804      	cmp	r0, #4
   12aee:	d80e      	bhi.n	12b0e <_NanoFatalErrorHandler+0x2a>
   12af0:	f7ed fb42 	bl	178 <__gnu_thumb1_case_uqi>
   12af4:	09050d03 	.word	0x09050d03
   12af8:	0b          	.byte	0x0b
   12af9:	00          	.byte	0x00
	case _NANO_ERR_INVALID_TASK_EXIT:
		printk("***** Invalid Exit Software Error! *****\n");
   12afa:	480d      	ldr	r0, [pc, #52]	; (12b30 <_NanoFatalErrorHandler+0x4c>)
   12afc:	e000      	b.n	12b00 <_NanoFatalErrorHandler+0x1c>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
   12afe:	480d      	ldr	r0, [pc, #52]	; (12b34 <_NanoFatalErrorHandler+0x50>)
   12b00:	f7ee fe32 	bl	1768 <printk>
		break;
   12b04:	e007      	b.n	12b16 <_NanoFatalErrorHandler+0x32>

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
   12b06:	480c      	ldr	r0, [pc, #48]	; (12b38 <_NanoFatalErrorHandler+0x54>)
   12b08:	e7fa      	b.n	12b00 <_NanoFatalErrorHandler+0x1c>
		break;

	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
   12b0a:	480c      	ldr	r0, [pc, #48]	; (12b3c <_NanoFatalErrorHandler+0x58>)
   12b0c:	e7f8      	b.n	12b00 <_NanoFatalErrorHandler+0x1c>
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   12b0e:	0021      	movs	r1, r4
   12b10:	480b      	ldr	r0, [pc, #44]	; (12b40 <_NanoFatalErrorHandler+0x5c>)
   12b12:	f7ee fe29 	bl	1768 <printk>
		break;
	}
	printk("Current thread ID = %p\n"
   12b16:	f000 feef 	bl	138f8 <k_current_get>
   12b1a:	69aa      	ldr	r2, [r5, #24]
   12b1c:	0001      	movs	r1, r0
   12b1e:	4809      	ldr	r0, [pc, #36]	; (12b44 <_NanoFatalErrorHandler+0x60>)
   12b20:	f7ee fe22 	bl	1768 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   12b24:	0029      	movs	r1, r5
   12b26:	0020      	movs	r0, r4
   12b28:	f000 f814 	bl	12b54 <_SysFatalErrorHandler>
}
   12b2c:	bd70      	pop	{r4, r5, r6, pc}
   12b2e:	46c0      	nop			; (mov r8, r8)
   12b30:	0001745a 	.word	0x0001745a
   12b34:	00017484 	.word	0x00017484
   12b38:	000174aa 	.word	0x000174aa
   12b3c:	000174c4 	.word	0x000174c4
   12b40:	000174df 	.word	0x000174df
   12b44:	00017502 	.word	0x00017502

00012b48 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
   12b48:	b510      	push	{r4, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   12b4a:	0001      	movs	r1, r0
   12b4c:	6800      	ldr	r0, [r0, #0]
   12b4e:	f7ff ffc9 	bl	12ae4 <_NanoFatalErrorHandler>
}
   12b52:	bd10      	pop	{r4, pc}

00012b54 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   12b54:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   12b56:	2805      	cmp	r0, #5
   12b58:	d01a      	beq.n	12b90 <_SysFatalErrorHandler+0x3c>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   12b5a:	f001 f92b 	bl	13db4 <k_is_in_isr>
   12b5e:	2800      	cmp	r0, #0
   12b60:	d006      	beq.n	12b70 <_SysFatalErrorHandler+0x1c>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   12b62:	f001 f927 	bl	13db4 <k_is_in_isr>
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
   12b66:	490c      	ldr	r1, [pc, #48]	; (12b98 <_SysFatalErrorHandler+0x44>)
   12b68:	2800      	cmp	r0, #0
   12b6a:	d10e      	bne.n	12b8a <_SysFatalErrorHandler+0x36>
   12b6c:	490b      	ldr	r1, [pc, #44]	; (12b9c <_SysFatalErrorHandler+0x48>)
   12b6e:	e00c      	b.n	12b8a <_SysFatalErrorHandler+0x36>
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   12b70:	f001 f92a 	bl	13dc8 <_is_thread_essential>
   12b74:	2800      	cmp	r0, #0
   12b76:	d1f4      	bne.n	12b62 <_SysFatalErrorHandler+0xe>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
		goto hang_system;
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   12b78:	4c09      	ldr	r4, [pc, #36]	; (12ba0 <_SysFatalErrorHandler+0x4c>)
   12b7a:	480a      	ldr	r0, [pc, #40]	; (12ba4 <_SysFatalErrorHandler+0x50>)
   12b7c:	68a1      	ldr	r1, [r4, #8]
   12b7e:	f7ee fdf3 	bl	1768 <printk>
	k_thread_abort(_current);
   12b82:	68a0      	ldr	r0, [r4, #8]
   12b84:	f000 f812 	bl	12bac <k_thread_abort>

	for (;;) {
		k_cpu_idle();
	}
	CODE_UNREACHABLE;
}
   12b88:	bd10      	pop	{r4, pc}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
   12b8a:	4807      	ldr	r0, [pc, #28]	; (12ba8 <_SysFatalErrorHandler+0x54>)
   12b8c:	f7ee fdec 	bl	1768 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   12b90:	f7ff ff96 	bl	12ac0 <k_cpu_idle>
   12b94:	e7fc      	b.n	12b90 <_SysFatalErrorHandler+0x3c>
   12b96:	46c0      	nop			; (mov r8, r8)
   12b98:	0001753e 	.word	0x0001753e
   12b9c:	00017542 	.word	0x00017542
   12ba0:	20001dbc 	.word	0x20001dbc
   12ba4:	00017573 	.word	0x00017573
   12ba8:	00017553 	.word	0x00017553

00012bac <k_thread_abort>:
#include <wait_q.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void k_thread_abort(k_tid_t thread)
{
   12bac:	b570      	push	{r4, r5, r6, lr}
   12bae:	0005      	movs	r5, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   12bb0:	f3ef 8410 	mrs	r4, PRIMASK
   12bb4:	b672      	cpsid	i
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
   12bb6:	f001 f941 	bl	13e3c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   12bba:	4b0b      	ldr	r3, [pc, #44]	; (12be8 <k_thread_abort+0x3c>)
   12bbc:	689b      	ldr	r3, [r3, #8]
   12bbe:	429d      	cmp	r5, r3
   12bc0:	d10d      	bne.n	12bde <k_thread_abort+0x32>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   12bc2:	4b0a      	ldr	r3, [pc, #40]	; (12bec <k_thread_abort+0x40>)
   12bc4:	685a      	ldr	r2, [r3, #4]
   12bc6:	05d2      	lsls	r2, r2, #23
   12bc8:	d104      	bne.n	12bd4 <k_thread_abort+0x28>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   12bca:	f000 fec5 	bl	13958 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   12bce:	0020      	movs	r0, r4
   12bd0:	f7ff fea4 	bl	1291c <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12bd4:	2180      	movs	r1, #128	; 0x80
   12bd6:	685a      	ldr	r2, [r3, #4]
   12bd8:	0549      	lsls	r1, r1, #21
   12bda:	430a      	orrs	r2, r1
   12bdc:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   12bde:	0020      	movs	r0, r4
   12be0:	f000 fdfe 	bl	137e0 <_reschedule_threads>
}
   12be4:	bd70      	pop	{r4, r5, r6, pc}
   12be6:	46c0      	nop			; (mov r8, r8)
   12be8:	20001dbc 	.word	0x20001dbc
   12bec:	e000ed00 	.word	0xe000ed00

00012bf0 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   12bf0:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   12bf2:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12bf4:	4a0a      	ldr	r2, [pc, #40]	; (12c20 <_idle_state_cleared+0x1c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12bf6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   12bf8:	2800      	cmp	r0, #0

#if defined(CONFIG_ARMV6_M)
	beq _idle_state_cleared
   12bfa:	d003      	beq.n	12c04 <_idle_state_cleared>
	movs.n r1, #0
   12bfc:	2100      	movs	r1, #0
	/* clear kernel idle state */
	str r1, [r2, #_kernel_offset_to_idle]
   12bfe:	6151      	str	r1, [r2, #20]
	blx _sys_power_save_idle_exit
   12c00:	f000 f894 	bl	12d2c <_sys_power_save_idle_exit>

00012c04 <_idle_state_cleared>:
		blxne	_sys_power_save_idle_exit
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12c04:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   12c06:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
   12c0a:	2110      	movs	r1, #16
	subs r0, r1	/* get IRQ number */
   12c0c:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
   12c0e:	00c0      	lsls	r0, r0, #3
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   12c10:	4904      	ldr	r1, [pc, #16]	; (12c24 <_idle_state_cleared+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12c12:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12c14:	c909      	ldmia	r1!, {r0, r3}
	pop {r3}
#else
	pop {lr}
#endif
#endif
	blx r3		/* call ISR */
   12c16:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
   12c18:	bc08      	pop	{r3}
	mov lr, r3
   12c1a:	469e      	mov	lr, r3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   12c1c:	e60c      	b.n	12838 <_IntExit>
   12c1e:	0000      	.short	0x0000
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12c20:	20001dbc 	.word	0x20001dbc
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   12c24:	000000a8 	.word	0x000000a8

00012c28 <__reset>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
   12c28:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   12c2a:	4804      	ldr	r0, [pc, #16]	; (12c3c <__reset+0x14>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   12c2c:	4904      	ldr	r1, [pc, #16]	; (12c40 <__reset+0x18>)
    adds r0, r0, r1
   12c2e:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12c30:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   12c34:	2002      	movs	r0, #2
    msr CONTROL, r0
   12c36:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   12c3a:	e005      	b.n	12c48 <_PrepC>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   12c3c:	20003440 	.word	0x20003440
    ldr r1, =CONFIG_ISR_STACK_SIZE
   12c40:	00000800 	.word	0x00000800

00012c44 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   12c44:	bf30      	wfi
    b _SysNmiOnReset
   12c46:	e7fd      	b.n	12c44 <_SysNmiOnReset>

00012c48 <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
   12c48:	b510      	push	{r4, lr}
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   12c4a:	f000 f89f 	bl	12d8c <_bss_zero>
	_data_copy();
   12c4e:	f000 f8a9 	bl	12da4 <_data_copy>
	_Cstart();
   12c52:	f000 f8c9 	bl	12de8 <_Cstart>

00012c56 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   12c56:	b510      	push	{r4, lr}
	handler();
   12c58:	f7ff fff4 	bl	12c44 <_SysNmiOnReset>
	_ExcExit();
   12c5c:	f7ff fdf2 	bl	12844 <_ExcExit>
}
   12c60:	bd10      	pop	{r4, pc}

00012c62 <atomic_inc>:
   12c62:	f3ef 8210 	mrs	r2, PRIMASK
   12c66:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   12c68:	6803      	ldr	r3, [r0, #0]
	(*target)++;
   12c6a:	1c59      	adds	r1, r3, #1
   12c6c:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   12c6e:	2a00      	cmp	r2, #0
   12c70:	d100      	bne.n	12c74 <atomic_inc+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   12c72:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   12c74:	0018      	movs	r0, r3
   12c76:	4770      	bx	lr

00012c78 <atomic_dec>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   12c78:	f3ef 8210 	mrs	r2, PRIMASK
   12c7c:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   12c7e:	6803      	ldr	r3, [r0, #0]
	(*target)--;
   12c80:	1e59      	subs	r1, r3, #1
   12c82:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   12c84:	2a00      	cmp	r2, #0
   12c86:	d100      	bne.n	12c8a <atomic_dec+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   12c88:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   12c8a:	0018      	movs	r0, r3
   12c8c:	4770      	bx	lr

00012c8e <atomic_get>:
 *
 * @return The value read from <target>
 */
atomic_val_t atomic_get(const atomic_t *target)
{
	return *target;
   12c8e:	6800      	ldr	r0, [r0, #0]
}
   12c90:	4770      	bx	lr

00012c92 <atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
   12c92:	0003      	movs	r3, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   12c94:	f3ef 8210 	mrs	r2, PRIMASK
   12c98:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   12c9a:	6800      	ldr	r0, [r0, #0]
	*target = value;
   12c9c:	6019      	str	r1, [r3, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   12c9e:	2a00      	cmp	r2, #0
   12ca0:	d100      	bne.n	12ca4 <atomic_set+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   12ca2:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   12ca4:	4770      	bx	lr

00012ca6 <atomic_or>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   12ca6:	f3ef 8210 	mrs	r2, PRIMASK
   12caa:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   12cac:	6803      	ldr	r3, [r0, #0]
	*target |= value;
   12cae:	4319      	orrs	r1, r3
   12cb0:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   12cb2:	2a00      	cmp	r2, #0
   12cb4:	d100      	bne.n	12cb8 <atomic_or+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   12cb6:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   12cb8:	0018      	movs	r0, r3
   12cba:	4770      	bx	lr

00012cbc <atomic_and>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   12cbc:	f3ef 8210 	mrs	r2, PRIMASK
   12cc0:	b672      	cpsid	i
	unsigned int key;
	atomic_val_t ret;

	key = irq_lock();

	ret = *target;
   12cc2:	6803      	ldr	r3, [r0, #0]
	*target &= value;
   12cc4:	4019      	ands	r1, r3
   12cc6:	6001      	str	r1, [r0, #0]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   12cc8:	2a00      	cmp	r2, #0
   12cca:	d100      	bne.n	12cce <atomic_and+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   12ccc:	b662      	cpsie	i

	irq_unlock(key);

	return ret;
}
   12cce:	0018      	movs	r0, r3
   12cd0:	4770      	bx	lr
	...

00012cd4 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   12cd4:	b570      	push	{r4, r5, r6, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   12cd6:	4e07      	ldr	r6, [pc, #28]	; (12cf4 <_sys_device_do_config_level+0x20>)
   12cd8:	0083      	lsls	r3, r0, #2
   12cda:	599d      	ldr	r5, [r3, r6]
   12cdc:	3001      	adds	r0, #1
   12cde:	0084      	lsls	r4, r0, #2
   12ce0:	5933      	ldr	r3, [r6, r4]
   12ce2:	429d      	cmp	r5, r3
   12ce4:	d205      	bcs.n	12cf2 <_sys_device_do_config_level+0x1e>
								info++) {
		struct device_config *device = info->config;

		device->init(info);
   12ce6:	682b      	ldr	r3, [r5, #0]
   12ce8:	0028      	movs	r0, r5
   12cea:	685b      	ldr	r3, [r3, #4]
   12cec:	4798      	blx	r3
void _sys_device_do_config_level(int level)
{
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
								info++) {
   12cee:	350c      	adds	r5, #12
   12cf0:	e7f6      	b.n	12ce0 <_sys_device_do_config_level+0xc>
		struct device_config *device = info->config;

		device->init(info);
	}
}
   12cf2:	bd70      	pop	{r4, r5, r6, pc}
   12cf4:	00017600 	.word	0x00017600

00012cf8 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   12cf8:	b570      	push	{r4, r5, r6, lr}
   12cfa:	0005      	movs	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   12cfc:	4c09      	ldr	r4, [pc, #36]	; (12d24 <device_get_binding+0x2c>)
   12cfe:	4b0a      	ldr	r3, [pc, #40]	; (12d28 <device_get_binding+0x30>)
   12d00:	429c      	cmp	r4, r3
   12d02:	d00d      	beq.n	12d20 <device_get_binding+0x28>
		if (info->driver_api && !strcmp(name, info->config->name)) {
   12d04:	6863      	ldr	r3, [r4, #4]
   12d06:	2b00      	cmp	r3, #0
   12d08:	d101      	bne.n	12d0e <device_get_binding+0x16>

struct device *device_get_binding(const char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   12d0a:	340c      	adds	r4, #12
   12d0c:	e7f7      	b.n	12cfe <device_get_binding+0x6>
		if (info->driver_api && !strcmp(name, info->config->name)) {
   12d0e:	6823      	ldr	r3, [r4, #0]
   12d10:	0028      	movs	r0, r5
   12d12:	6819      	ldr	r1, [r3, #0]
   12d14:	f7ee faf2 	bl	12fc <strcmp>
   12d18:	2800      	cmp	r0, #0
   12d1a:	d1f6      	bne.n	12d0a <device_get_binding+0x12>
   12d1c:	0020      	movs	r0, r4
   12d1e:	e000      	b.n	12d22 <device_get_binding+0x2a>
			return info;
		}
	}

	return NULL;
   12d20:	2000      	movs	r0, #0
}
   12d22:	bd70      	pop	{r4, r5, r6, pc}
   12d24:	200006a0 	.word	0x200006a0
   12d28:	2000070c 	.word	0x2000070c

00012d2c <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   12d2c:	b510      	push	{r4, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   12d2e:	1c43      	adds	r3, r0, #1
   12d30:	d003      	beq.n	12d3a <_sys_power_save_idle_exit+0xe>
   12d32:	4b03      	ldr	r3, [pc, #12]	; (12d40 <_sys_power_save_idle_exit+0x14>)
   12d34:	681b      	ldr	r3, [r3, #0]
   12d36:	4298      	cmp	r0, r3
   12d38:	db01      	blt.n	12d3e <_sys_power_save_idle_exit+0x12>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   12d3a:	f7ed ffb3 	bl	ca4 <_timer_idle_exit>
	}
}
   12d3e:	bd10      	pop	{r4, pc}
   12d40:	20000698 	.word	0x20000698

00012d44 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   12d44:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   12d46:	f3ef 8310 	mrs	r3, PRIMASK
   12d4a:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12d4c:	4d0b      	ldr	r5, [pc, #44]	; (12d7c <idle+0x38>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12d4e:	4a0c      	ldr	r2, [pc, #48]	; (12d80 <idle+0x3c>)
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12d50:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12d52:	4293      	cmp	r3, r2
   12d54:	d009      	beq.n	12d6a <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   12d56:	2b00      	cmp	r3, #0
   12d58:	d007      	beq.n	12d6a <idle+0x26>
   12d5a:	691c      	ldr	r4, [r3, #16]
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   12d5c:	1c63      	adds	r3, r4, #1
   12d5e:	d006      	beq.n	12d6e <idle+0x2a>
   12d60:	4b08      	ldr	r3, [pc, #32]	; (12d84 <idle+0x40>)
   12d62:	681b      	ldr	r3, [r3, #0]
   12d64:	42a3      	cmp	r3, r4
   12d66:	dd02      	ble.n	12d6e <idle+0x2a>
   12d68:	e004      	b.n	12d74 <idle+0x30>
   12d6a:	2401      	movs	r4, #1
   12d6c:	4264      	negs	r4, r4
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   12d6e:	0020      	movs	r0, r4
   12d70:	f7ed ff82 	bl	c78 <_timer_idle_enter>
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   12d74:	616c      	str	r4, [r5, #20]
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   12d76:	f7ff fea3 	bl	12ac0 <k_cpu_idle>
   12d7a:	e7e4      	b.n	12d46 <idle+0x2>
   12d7c:	20001dbc 	.word	0x20001dbc
   12d80:	20001dc8 	.word	0x20001dc8
   12d84:	20000698 	.word	0x20000698

00012d88 <k_call_stacks_analyze>:
#endif /* CONFIG_ARC */
	STACK_ANALYZE("interrupt", _interrupt_stack);
	STACK_ANALYZE("workqueue", sys_work_q_stack);

#endif /* CONFIG_INIT_STACKS && CONFIG_PRINTK */
}
   12d88:	4770      	bx	lr
	...

00012d8c <_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
   12d8c:	b510      	push	{r4, lr}
	memset(&__bss_start, 0,
   12d8e:	4803      	ldr	r0, [pc, #12]	; (12d9c <_bss_zero+0x10>)
   12d90:	4a03      	ldr	r2, [pc, #12]	; (12da0 <_bss_zero+0x14>)
   12d92:	2100      	movs	r1, #0
   12d94:	1a12      	subs	r2, r2, r0
   12d96:	f7ee fb0f 	bl	13b8 <memset>
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
}
   12d9a:	bd10      	pop	{r4, pc}
   12d9c:	200007b8 	.word	0x200007b8
   12da0:	20002074 	.word	0x20002074

00012da4 <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
   12da4:	b510      	push	{r4, lr}
	memcpy(&__data_ram_start, &__data_rom_start,
   12da6:	4803      	ldr	r0, [pc, #12]	; (12db4 <_data_copy+0x10>)
   12da8:	4a03      	ldr	r2, [pc, #12]	; (12db8 <_data_copy+0x14>)
   12daa:	4904      	ldr	r1, [pc, #16]	; (12dbc <_data_copy+0x18>)
   12dac:	1a12      	subs	r2, r2, r0
   12dae:	f7ee fad9 	bl	1364 <memcpy>
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
}
   12db2:	bd10      	pop	{r4, pc}
   12db4:	20000000 	.word	0x20000000
   12db8:	200007b4 	.word	0x200007b4
   12dbc:	0001761c 	.word	0x0001761c

00012dc0 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
   12dc0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   12dc2:	2002      	movs	r0, #2
   12dc4:	f7ff ff86 	bl	12cd4 <_sys_device_do_config_level>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   12dc8:	2003      	movs	r0, #3
   12dca:	f7ff ff83 	bl	12cd4 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   12dce:	f001 f85d 	bl	13e8c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   12dd2:	f7ed fd77 	bl	8c4 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   12dd6:	2101      	movs	r1, #1
   12dd8:	4a02      	ldr	r2, [pc, #8]	; (12de4 <_main+0x24>)
   12dda:	7a13      	ldrb	r3, [r2, #8]
   12ddc:	438b      	bics	r3, r1
   12dde:	7213      	strb	r3, [r2, #8]
}
   12de0:	bd10      	pop	{r4, pc}
   12de2:	46c0      	nop			; (mov r8, r8)
   12de4:	20001cfc 	.word	0x20001cfc

00012de8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   12de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dea:	b087      	sub	sp, #28
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
   12dec:	f7ff fd3c 	bl	12868 <_IntLibInit>
   12df0:	4b2f      	ldr	r3, [pc, #188]	; (12eb0 <_Cstart+0xc8>)
   12df2:	4a30      	ldr	r2, [pc, #192]	; (12eb4 <_Cstart+0xcc>)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   12df4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   12df6:	605b      	str	r3, [r3, #4]
   12df8:	3308      	adds	r3, #8

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   12dfa:	429a      	cmp	r2, r3
   12dfc:	d1fa      	bne.n	12df4 <_Cstart+0xc>
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;

	_new_thread(_main_thread, _main_stack,
   12dfe:	2400      	movs	r4, #0
   12e00:	2301      	movs	r3, #1
   12e02:	2280      	movs	r2, #128	; 0x80
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
   12e04:	4d2c      	ldr	r5, [pc, #176]	; (12eb8 <_Cstart+0xd0>)
   12e06:	4e2d      	ldr	r6, [pc, #180]	; (12ebc <_Cstart+0xd4>)

	_new_thread(_main_thread, _main_stack,
   12e08:	492d      	ldr	r1, [pc, #180]	; (12ec0 <_Cstart+0xd8>)
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
   12e0a:	61b5      	str	r5, [r6, #24]

	_new_thread(_main_thread, _main_stack,
   12e0c:	0028      	movs	r0, r5
   12e0e:	9304      	str	r3, [sp, #16]
   12e10:	9403      	str	r4, [sp, #12]
   12e12:	9402      	str	r4, [sp, #8]
   12e14:	9401      	str	r4, [sp, #4]
   12e16:	9400      	str	r4, [sp, #0]
   12e18:	4b2a      	ldr	r3, [pc, #168]	; (12ec4 <_Cstart+0xdc>)
   12e1a:	00d2      	lsls	r2, r2, #3
   12e1c:	f7ff fe26 	bl	12a6c <_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12e20:	2204      	movs	r2, #4
   12e22:	7a6b      	ldrb	r3, [r5, #9]
		    MAIN_STACK_SIZE, _main, NULL, NULL, NULL,
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);
   12e24:	0028      	movs	r0, r5
   12e26:	4393      	bics	r3, r2
   12e28:	726b      	strb	r3, [r5, #9]
   12e2a:	f000 fc2f 	bl	1368c <_add_thread_to_ready_q>

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_thread, _idle_stack,
   12e2e:	2301      	movs	r3, #1
   12e30:	2280      	movs	r2, #128	; 0x80
   12e32:	4f25      	ldr	r7, [pc, #148]	; (12ec8 <_Cstart+0xe0>)
   12e34:	9304      	str	r3, [sp, #16]
   12e36:	330e      	adds	r3, #14
   12e38:	9303      	str	r3, [sp, #12]
   12e3a:	4924      	ldr	r1, [pc, #144]	; (12ecc <_Cstart+0xe4>)
   12e3c:	0038      	movs	r0, r7
   12e3e:	9402      	str	r4, [sp, #8]
   12e40:	9401      	str	r4, [sp, #4]
   12e42:	9400      	str	r4, [sp, #0]
   12e44:	4b22      	ldr	r3, [pc, #136]	; (12ed0 <_Cstart+0xe8>)
   12e46:	0052      	lsls	r2, r2, #1
   12e48:	f7ff fe10 	bl	12a6c <_new_thread>
   12e4c:	2204      	movs	r2, #4
   12e4e:	7a7b      	ldrb	r3, [r7, #9]
		    IDLE_STACK_SIZE, idle, NULL, NULL, NULL,
		    K_LOWEST_THREAD_PRIO, K_ESSENTIAL);
	_mark_thread_as_started(_idle_thread);
	_add_thread_to_ready_q(_idle_thread);
   12e50:	0038      	movs	r0, r7
   12e52:	4393      	bics	r3, r2
   12e54:	727b      	strb	r3, [r7, #9]
   12e56:	f000 fc19 	bl	1368c <_add_thread_to_ready_q>
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   12e5a:	2280      	movs	r2, #128	; 0x80
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   12e5c:	4b1d      	ldr	r3, [pc, #116]	; (12ed4 <_Cstart+0xec>)
   12e5e:	0112      	lsls	r2, r2, #4
   12e60:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   12e62:	6133      	str	r3, [r6, #16]
   12e64:	4b1c      	ldr	r3, [pc, #112]	; (12ed8 <_Cstart+0xf0>)
   12e66:	189b      	adds	r3, r3, r2
   12e68:	f383 8808 	msr	MSP, r3
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
   12e6c:	4a1b      	ldr	r2, [pc, #108]	; (12edc <_Cstart+0xf4>)
   12e6e:	4b1c      	ldr	r3, [pc, #112]	; (12ee0 <_Cstart+0xf8>)
   12e70:	6a11      	ldr	r1, [r2, #32]
   12e72:	400b      	ands	r3, r1
   12e74:	21c0      	movs	r1, #192	; 0xc0
   12e76:	0409      	lsls	r1, r1, #16
   12e78:	430b      	orrs	r3, r1
   12e7a:	6213      	str	r3, [r2, #32]
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   12e7c:	f7ff fd8c 	bl	12998 <_FaultInit>
	_CpuIdleInit();
   12e80:	f7ff fe18 	bl	12ab4 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   12e84:	0020      	movs	r0, r4
   12e86:	f7ff ff25 	bl	12cd4 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   12e8a:	2001      	movs	r0, #1
   12e8c:	f7ff ff22 	bl	12cd4 <_sys_device_do_config_level>

	_current = main_thread;

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   12e90:	2280      	movs	r2, #128	; 0x80
   12e92:	4b0b      	ldr	r3, [pc, #44]	; (12ec0 <_Cstart+0xd8>)
   12e94:	00d2      	lsls	r2, r2, #3
   12e96:	189b      	adds	r3, r3, r2
   12e98:	2207      	movs	r2, #7
   12e9a:	490a      	ldr	r1, [pc, #40]	; (12ec4 <_Cstart+0xdc>)
   12e9c:	4393      	bics	r3, r2
	char *start_of_main_stack;

	start_of_main_stack = main_stack + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
   12e9e:	60b5      	str	r5, [r6, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   12ea0:	4a10      	ldr	r2, [pc, #64]	; (12ee4 <_Cstart+0xfc>)
   12ea2:	000c      	movs	r4, r1
   12ea4:	f383 8809 	msr	PSP, r3
   12ea8:	b662      	cpsie	i
   12eaa:	1c20      	adds	r0, r4, #0
   12eac:	4710      	bx	r2
   12eae:	46c0      	nop			; (mov r8, r8)
   12eb0:	20001ddc 	.word	0x20001ddc
   12eb4:	20001edc 	.word	0x20001edc
   12eb8:	20001cfc 	.word	0x20001cfc
   12ebc:	20001dbc 	.word	0x20001dbc
   12ec0:	20002f40 	.word	0x20002f40
   12ec4:	00012dc1 	.word	0x00012dc1
   12ec8:	20001d5c 	.word	0x20001d5c
   12ecc:	20003340 	.word	0x20003340
   12ed0:	00012d45 	.word	0x00012d45
   12ed4:	20001dc8 	.word	0x20001dc8
   12ed8:	20003440 	.word	0x20003440
   12edc:	e000ed00 	.word	0xe000ed00
   12ee0:	ff00ffff 	.word	0xff00ffff
   12ee4:	00013dd9 	.word	0x00013dd9

00012ee8 <adjust_owner_prio.isra.6>:
	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
   12ee8:	230a      	movs	r3, #10
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
   12eea:	b570      	push	{r4, r5, r6, lr}
{
	if (mutex->owner->base.prio != new_prio) {
   12eec:	56c3      	ldrsb	r3, [r0, r3]
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
   12eee:	0004      	movs	r4, r0
   12ef0:	000d      	movs	r5, r1
{
	if (mutex->owner->base.prio != new_prio) {
   12ef2:	428b      	cmp	r3, r1
   12ef4:	d00d      	beq.n	12f12 <adjust_owner_prio.isra.6+0x2a>
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   12ef6:	7a43      	ldrb	r3, [r0, #9]
   12ef8:	06db      	lsls	r3, r3, #27
   12efa:	d109      	bne.n	12f10 <adjust_owner_prio.isra.6+0x28>
   12efc:	6a03      	ldr	r3, [r0, #32]
   12efe:	3301      	adds	r3, #1
   12f00:	d106      	bne.n	12f10 <adjust_owner_prio.isra.6+0x28>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
   12f02:	f000 fbeb 	bl	136dc <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   12f06:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   12f08:	0020      	movs	r0, r4
   12f0a:	f000 fbbf 	bl	1368c <_add_thread_to_ready_q>
   12f0e:	e000      	b.n	12f12 <adjust_owner_prio.isra.6+0x2a>
	} else {
		thread->base.prio = prio;
   12f10:	72a5      	strb	r5, [r4, #10]
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
   12f12:	bd70      	pop	{r4, r5, r6, pc}

00012f14 <k_mutex_lock>:

int k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   12f14:	b570      	push	{r4, r5, r6, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   12f16:	4a2f      	ldr	r2, [pc, #188]	; (12fd4 <k_mutex_lock+0xc0>)
   12f18:	000d      	movs	r5, r1
   12f1a:	6891      	ldr	r1, [r2, #8]
   12f1c:	0004      	movs	r4, r0
   12f1e:	7acb      	ldrb	r3, [r1, #11]
   12f20:	3b01      	subs	r3, #1
   12f22:	72cb      	strb	r3, [r1, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   12f24:	68c3      	ldr	r3, [r0, #12]
   12f26:	0010      	movs	r0, r2
   12f28:	2b00      	cmp	r3, #0
   12f2a:	d005      	beq.n	12f38 <k_mutex_lock+0x24>
   12f2c:	68a1      	ldr	r1, [r4, #8]
   12f2e:	6892      	ldr	r2, [r2, #8]
   12f30:	4291      	cmp	r1, r2
   12f32:	d10d      	bne.n	12f50 <k_mutex_lock+0x3c>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   12f34:	6922      	ldr	r2, [r4, #16]
   12f36:	e002      	b.n	12f3e <k_mutex_lock+0x2a>
   12f38:	6892      	ldr	r2, [r2, #8]
   12f3a:	7a92      	ldrb	r2, [r2, #10]
   12f3c:	b252      	sxtb	r2, r2
					mutex->owner_orig_prio;

		mutex->lock_count++;
   12f3e:	3301      	adds	r3, #1
   12f40:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   12f42:	6883      	ldr	r3, [r0, #8]

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   12f44:	6122      	str	r2, [r4, #16]
					_current->base.prio :
					mutex->owner_orig_prio;

		mutex->lock_count++;
		mutex->owner = _current;
   12f46:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   12f48:	f000 fc64 	bl	13814 <k_sched_unlock>

		return 0;
   12f4c:	2000      	movs	r0, #0
   12f4e:	e040      	b.n	12fd2 <k_mutex_lock+0xbe>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   12f50:	2d00      	cmp	r5, #0
   12f52:	d103      	bne.n	12f5c <k_mutex_lock+0x48>
		k_sched_unlock();
   12f54:	f000 fc5e 	bl	13814 <k_sched_unlock>
		return -EBUSY;
   12f58:	2010      	movs	r0, #16
   12f5a:	e039      	b.n	12fd0 <k_mutex_lock+0xbc>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   12f5c:	230a      	movs	r3, #10
   12f5e:	56cb      	ldrsb	r3, [r1, r3]
   12f60:	210a      	movs	r1, #10
   12f62:	5651      	ldrsb	r1, [r2, r1]
   12f64:	4299      	cmp	r1, r3
   12f66:	dd00      	ble.n	12f6a <k_mutex_lock+0x56>
   12f68:	0019      	movs	r1, r3
   12f6a:	43cb      	mvns	r3, r1
   12f6c:	17db      	asrs	r3, r3, #31
   12f6e:	4019      	ands	r1, r3
   12f70:	f3ef 8610 	mrs	r6, PRIMASK
   12f74:	b672      	cpsid	i

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   12f76:	230a      	movs	r3, #10
   12f78:	68a0      	ldr	r0, [r4, #8]
   12f7a:	56c3      	ldrsb	r3, [r0, r3]
   12f7c:	428b      	cmp	r3, r1
   12f7e:	dd01      	ble.n	12f84 <k_mutex_lock+0x70>
		adjust_owner_prio(mutex, new_prio);
   12f80:	f7ff ffb2 	bl	12ee8 <adjust_owner_prio.isra.6>
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   12f84:	0020      	movs	r0, r4
   12f86:	0029      	movs	r1, r5
   12f88:	f000 fc08 	bl	1379c <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   12f8c:	f000 fce4 	bl	13958 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   12f90:	0030      	movs	r0, r6
   12f92:	f7ff fcc3 	bl	1291c <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   12f96:	2800      	cmp	r0, #0
   12f98:	d0d6      	beq.n	12f48 <k_mutex_lock+0x34>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12f9a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12f9c:	42a3      	cmp	r3, r4
   12f9e:	d100      	bne.n	12fa2 <k_mutex_lock+0x8e>
   12fa0:	2300      	movs	r3, #0
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   12fa2:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   12fa4:	2b00      	cmp	r3, #0
   12fa6:	d007      	beq.n	12fb8 <k_mutex_lock+0xa4>

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
   12fa8:	7a9b      	ldrb	r3, [r3, #10]
   12faa:	b25b      	sxtb	r3, r3
   12fac:	4299      	cmp	r1, r3
   12fae:	dd00      	ble.n	12fb2 <k_mutex_lock+0x9e>
   12fb0:	0019      	movs	r1, r3
   12fb2:	43cb      	mvns	r3, r1
   12fb4:	17db      	asrs	r3, r3, #31
   12fb6:	4019      	ands	r1, r3
   12fb8:	f3ef 8510 	mrs	r5, PRIMASK
   12fbc:	b672      	cpsid	i
						     new_prio) : new_prio;

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   12fbe:	68a0      	ldr	r0, [r4, #8]
   12fc0:	f7ff ff92 	bl	12ee8 <adjust_owner_prio.isra.6>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   12fc4:	2d00      	cmp	r5, #0
   12fc6:	d100      	bne.n	12fca <k_mutex_lock+0xb6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   12fc8:	b662      	cpsie	i
	irq_unlock(key);

	k_sched_unlock();
   12fca:	f000 fc23 	bl	13814 <k_sched_unlock>

	return -EAGAIN;
   12fce:	200b      	movs	r0, #11
   12fd0:	4240      	negs	r0, r0
}
   12fd2:	bd70      	pop	{r4, r5, r6, pc}
   12fd4:	20001dbc 	.word	0x20001dbc

00012fd8 <k_mutex_unlock>:

void k_mutex_unlock(struct k_mutex *mutex)
{
   12fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12fda:	4e34      	ldr	r6, [pc, #208]	; (130ac <k_mutex_unlock+0xd4>)
   12fdc:	0005      	movs	r5, r0
   12fde:	68b2      	ldr	r2, [r6, #8]
   12fe0:	7ad3      	ldrb	r3, [r2, #11]
   12fe2:	3b01      	subs	r3, #1
   12fe4:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   12fe6:	68c3      	ldr	r3, [r0, #12]
   12fe8:	3b01      	subs	r3, #1
   12fea:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   12fec:	2b00      	cmp	r3, #0
   12fee:	d002      	beq.n	12ff6 <k_mutex_unlock+0x1e>
		k_sched_unlock();
   12ff0:	f000 fc10 	bl	13814 <k_sched_unlock>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
   12ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   12ff6:	f3ef 8710 	mrs	r7, PRIMASK
   12ffa:	b672      	cpsid	i
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   12ffc:	6901      	ldr	r1, [r0, #16]
   12ffe:	6880      	ldr	r0, [r0, #8]
   13000:	f7ff ff72 	bl	12ee8 <adjust_owner_prio.isra.6>
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   13004:	4b2a      	ldr	r3, [pc, #168]	; (130b0 <k_mutex_unlock+0xd8>)
   13006:	682c      	ldr	r4, [r5, #0]
   13008:	681b      	ldr	r3, [r3, #0]
   1300a:	2b00      	cmp	r3, #0
   1300c:	d00b      	beq.n	13026 <k_mutex_unlock+0x4e>
   1300e:	42a5      	cmp	r5, r4
   13010:	d042      	beq.n	13098 <k_mutex_unlock+0xc0>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   13012:	2c00      	cmp	r4, #0
   13014:	d040      	beq.n	13098 <k_mutex_unlock+0xc0>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   13016:	6a23      	ldr	r3, [r4, #32]
   13018:	3302      	adds	r3, #2
   1301a:	d108      	bne.n	1302e <k_mutex_unlock+0x56>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1301c:	686b      	ldr	r3, [r5, #4]
   1301e:	42a3      	cmp	r3, r4
   13020:	d03a      	beq.n	13098 <k_mutex_unlock+0xc0>
   13022:	6824      	ldr	r4, [r4, #0]
   13024:	e7f5      	b.n	13012 <k_mutex_unlock+0x3a>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13026:	42a5      	cmp	r5, r4
   13028:	d036      	beq.n	13098 <k_mutex_unlock+0xc0>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   1302a:	2c00      	cmp	r4, #0
   1302c:	d034      	beq.n	13098 <k_mutex_unlock+0xc0>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1302e:	6863      	ldr	r3, [r4, #4]
   13030:	6822      	ldr	r2, [r4, #0]
   13032:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13034:	6822      	ldr	r2, [r4, #0]
   13036:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   13038:	2202      	movs	r2, #2
   1303a:	7a63      	ldrb	r3, [r4, #9]
   1303c:	4393      	bics	r3, r2
   1303e:	7263      	strb	r3, [r4, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13040:	6a23      	ldr	r3, [r4, #32]
   13042:	1c5a      	adds	r2, r3, #1
   13044:	d010      	beq.n	13068 <k_mutex_unlock+0x90>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13046:	0022      	movs	r2, r4
   13048:	6931      	ldr	r1, [r6, #16]
   1304a:	3210      	adds	r2, #16
   1304c:	4291      	cmp	r1, r2
   1304e:	d003      	beq.n	13058 <k_mutex_unlock+0x80>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   13050:	6922      	ldr	r2, [r4, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13052:	6911      	ldr	r1, [r2, #16]
   13054:	18cb      	adds	r3, r1, r3
   13056:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13058:	6963      	ldr	r3, [r4, #20]
   1305a:	6922      	ldr	r2, [r4, #16]
   1305c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1305e:	6922      	ldr	r2, [r4, #16]
   13060:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   13062:	2301      	movs	r3, #1
   13064:	425b      	negs	r3, r3
   13066:	6223      	str	r3, [r4, #32]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13068:	7a63      	ldrb	r3, [r4, #9]
   1306a:	2204      	movs	r2, #4
   1306c:	0019      	movs	r1, r3
   1306e:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13070:	221b      	movs	r2, #27
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13072:	7261      	strb	r1, [r4, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13074:	4213      	tst	r3, r2
   13076:	d102      	bne.n	1307e <k_mutex_unlock+0xa6>
   13078:	6a23      	ldr	r3, [r4, #32]
   1307a:	3301      	adds	r3, #1
   1307c:	d012      	beq.n	130a4 <k_mutex_unlock+0xcc>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1307e:	2f00      	cmp	r7, #0
   13080:	d100      	bne.n	13084 <k_mutex_unlock+0xac>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13082:	b662      	cpsie	i
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   13084:	2300      	movs	r3, #0
   13086:	65e3      	str	r3, [r4, #92]	; 0x5c
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
		mutex->lock_count++;
   13088:	68eb      	ldr	r3, [r5, #12]
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   1308a:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   1308c:	3301      	adds	r3, #1
   1308e:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   13090:	230a      	movs	r3, #10
   13092:	56e3      	ldrsb	r3, [r4, r3]
   13094:	612b      	str	r3, [r5, #16]
   13096:	e7ab      	b.n	12ff0 <k_mutex_unlock+0x18>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13098:	2f00      	cmp	r7, #0
   1309a:	d100      	bne.n	1309e <k_mutex_unlock+0xc6>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1309c:	b662      	cpsie	i
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
   1309e:	2300      	movs	r3, #0
   130a0:	60ab      	str	r3, [r5, #8]
   130a2:	e7a5      	b.n	12ff0 <k_mutex_unlock+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   130a4:	0020      	movs	r0, r4
   130a6:	f000 faf1 	bl	1368c <_add_thread_to_ready_q>
   130aa:	e7e8      	b.n	1307e <k_mutex_unlock+0xa6>
   130ac:	20001dbc 	.word	0x20001dbc
   130b0:	20001ff0 	.word	0x20001ff0

000130b4 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   130b4:	230c      	movs	r3, #12
   130b6:	b510      	push	{r4, lr}
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;
   130b8:	2400      	movs	r4, #0
   130ba:	434b      	muls	r3, r1
   130bc:	18c0      	adds	r0, r0, r3
/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
	for (; last_registered >= 0; last_registered--) {
   130be:	2900      	cmp	r1, #0
   130c0:	db17      	blt.n	130f2 <clear_event_registrations+0x3e>
/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;

	switch (event->type) {
   130c2:	7943      	ldrb	r3, [r0, #5]
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
	event->poller = NULL;
   130c4:	6004      	str	r4, [r0, #0]

	switch (event->type) {
   130c6:	071b      	lsls	r3, r3, #28
   130c8:	0f1b      	lsrs	r3, r3, #28
   130ca:	2b02      	cmp	r3, #2
   130cc:	d006      	beq.n	130dc <clear_event_registrations+0x28>
   130ce:	2b04      	cmp	r3, #4
   130d0:	d004      	beq.n	130dc <clear_event_registrations+0x28>
   130d2:	2b01      	cmp	r3, #1
   130d4:	d104      	bne.n	130e0 <clear_event_registrations+0x2c>
		__ASSERT(event->queue, "invalid queue\n");
		event->queue->poll_event = NULL;
		break;
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->signal, "invalid poll signal\n");
		event->signal->poll_event = NULL;
   130d6:	6883      	ldr	r3, [r0, #8]
   130d8:	601c      	str	r4, [r3, #0]
   130da:	e001      	b.n	130e0 <clear_event_registrations+0x2c>
		__ASSERT(event->sem, "invalid semaphore\n");
		event->sem->poll_event = NULL;
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue, "invalid queue\n");
		event->queue->poll_event = NULL;
   130dc:	6883      	ldr	r3, [r0, #8]
   130de:	611c      	str	r4, [r3, #16]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   130e0:	2a00      	cmp	r2, #0
   130e2:	d100      	bne.n	130e6 <clear_event_registrations+0x32>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   130e4:	b662      	cpsie	i
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   130e6:	f3ef 8210 	mrs	r2, PRIMASK
   130ea:	b672      	cpsid	i
/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
	for (; last_registered >= 0; last_registered--) {
   130ec:	3901      	subs	r1, #1
   130ee:	380c      	subs	r0, #12
   130f0:	e7e5      	b.n	130be <clear_event_registrations+0xa>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   130f2:	bd10      	pop	{r4, pc}

000130f4 <_signal_poll_event>:

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
	*must_reschedule = 0;
   130f4:	2300      	movs	r3, #0
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   130f6:	b570      	push	{r4, r5, r6, lr}
	*must_reschedule = 0;
   130f8:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   130fa:	6803      	ldr	r3, [r0, #0]
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   130fc:	0004      	movs	r4, r0
   130fe:	000d      	movs	r5, r1
   13100:	0016      	movs	r6, r2
	*must_reschedule = 0;

	if (!event->poller) {
   13102:	2b00      	cmp	r3, #0
   13104:	d043      	beq.n	1318e <_signal_poll_event+0x9a>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   13106:	6818      	ldr	r0, [r3, #0]
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
   13108:	2220      	movs	r2, #32
   1310a:	7a43      	ldrb	r3, [r0, #9]
   1310c:	0019      	movs	r1, r3
   1310e:	4391      	bics	r1, r2

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   13110:	2202      	movs	r2, #2
   13112:	7241      	strb	r1, [r0, #9]
   13114:	4213      	tst	r3, r2
   13116:	d03a      	beq.n	1318e <_signal_poll_event+0x9a>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   13118:	6a03      	ldr	r3, [r0, #32]
   1311a:	3302      	adds	r3, #2
   1311c:	d045      	beq.n	131aa <_signal_poll_event+0xb6>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1311e:	6843      	ldr	r3, [r0, #4]
   13120:	6801      	ldr	r1, [r0, #0]
   13122:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   13124:	6801      	ldr	r1, [r0, #0]
   13126:	604b      	str	r3, [r1, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   13128:	7a43      	ldrb	r3, [r0, #9]
   1312a:	4393      	bics	r3, r2
   1312c:	7243      	strb	r3, [r0, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1312e:	6a03      	ldr	r3, [r0, #32]
   13130:	1c5a      	adds	r2, r3, #1
   13132:	d011      	beq.n	13158 <_signal_poll_event+0x64>
   13134:	4a20      	ldr	r2, [pc, #128]	; (131b8 <_signal_poll_event+0xc4>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13136:	6911      	ldr	r1, [r2, #16]
   13138:	0002      	movs	r2, r0
   1313a:	3210      	adds	r2, #16
   1313c:	4291      	cmp	r1, r2
   1313e:	d003      	beq.n	13148 <_signal_poll_event+0x54>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   13140:	6902      	ldr	r2, [r0, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13142:	6911      	ldr	r1, [r2, #16]
   13144:	18cb      	adds	r3, r1, r3
   13146:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13148:	6943      	ldr	r3, [r0, #20]
   1314a:	6902      	ldr	r2, [r0, #16]
   1314c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1314e:	6902      	ldr	r2, [r0, #16]
   13150:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   13152:	2301      	movs	r3, #1
   13154:	425b      	negs	r3, r3
   13156:	6203      	str	r3, [r0, #32]
   13158:	2300      	movs	r3, #0
   1315a:	65c3      	str	r3, [r0, #92]	; 0x5c
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   1315c:	7a43      	ldrb	r3, [r0, #9]
   1315e:	06db      	lsls	r3, r3, #27
   13160:	d115      	bne.n	1318e <_signal_poll_event+0x9a>
   13162:	6a03      	ldr	r3, [r0, #32]
   13164:	3301      	adds	r3, #1
   13166:	d112      	bne.n	1318e <_signal_poll_event+0x9a>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   13168:	f000 fa90 	bl	1368c <_add_thread_to_ready_q>
 */
static ALWAYS_INLINE u32_t _IpsrGet(void)
{
	u32_t vector;

	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   1316c:	f3ef 8305 	mrs	r3, IPSR
#endif
#if defined(CONFIG_ARMV6_M)
		/* On ARMv6-M there is no nested execution bit, so we check
		 * exception 3, hard fault, to a detect a nested exception.
		 */
		|| (vector == 3)
   13170:	2b0d      	cmp	r3, #13
   13172:	d81d      	bhi.n	131b0 <_signal_poll_event+0xbc>
   13174:	2b03      	cmp	r3, #3
   13176:	d01b      	beq.n	131b0 <_signal_poll_event+0xbc>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   13178:	4b0f      	ldr	r3, [pc, #60]	; (131b8 <_signal_poll_event+0xc4>)
   1317a:	689b      	ldr	r3, [r3, #8]
   1317c:	895b      	ldrh	r3, [r3, #10]
   1317e:	2b7f      	cmp	r3, #127	; 0x7f
   13180:	d816      	bhi.n	131b0 <_signal_poll_event+0xbc>
   13182:	f000 fb1b 	bl	137bc <__must_switch_threads>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   13186:	2301      	movs	r3, #1
   13188:	2800      	cmp	r0, #0
   1318a:	d011      	beq.n	131b0 <_signal_poll_event+0xbc>
   1318c:	6033      	str	r3, [r6, #0]
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
	event->state |= state;
   1318e:	221f      	movs	r2, #31
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   13190:	2000      	movs	r0, #0
	event->state |= state;
   13192:	6866      	ldr	r6, [r4, #4]
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   13194:	6020      	str	r0, [r4, #0]
	event->state |= state;
   13196:	03f1      	lsls	r1, r6, #15
   13198:	0ec9      	lsrs	r1, r1, #27
   1319a:	4329      	orrs	r1, r5
   1319c:	4011      	ands	r1, r2
   1319e:	030b      	lsls	r3, r1, #12
   131a0:	4906      	ldr	r1, [pc, #24]	; (131bc <_signal_poll_event+0xc8>)
   131a2:	4031      	ands	r1, r6
   131a4:	4319      	orrs	r1, r3
   131a6:	6061      	str	r1, [r4, #4]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   131a8:	e004      	b.n	131b4 <_signal_poll_event+0xc0>
	if (!_is_thread_pending(thread)) {
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
		return -EAGAIN;
   131aa:	200b      	movs	r0, #11
   131ac:	4240      	negs	r0, r0
   131ae:	e001      	b.n	131b4 <_signal_poll_event+0xc0>
	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   131b0:	2300      	movs	r3, #0
   131b2:	e7eb      	b.n	1318c <_signal_poll_event+0x98>

ready_event:
	set_event_ready(event, state);
	return 0;
}
   131b4:	bd70      	pop	{r4, r5, r6, pc}
   131b6:	46c0      	nop			; (mov r8, r8)
   131b8:	20001dbc 	.word	0x20001dbc
   131bc:	fffe0fff 	.word	0xfffe0fff

000131c0 <k_poll_event_init>:
#include <misc/dlist.h>
#include <misc/__assert.h>

void k_poll_event_init(struct k_poll_event *event, u32_t type,
		       int mode, void *obj)
{
   131c0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
   131c2:	2400      	movs	r4, #0
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   131c4:	260f      	movs	r6, #15
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
		 "only NOTIFY_ONLY mode is supported\n");
	__ASSERT(type < (1 << _POLL_NUM_TYPES), "invalid type\n");
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
   131c6:	6004      	str	r4, [r0, #0]
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   131c8:	7944      	ldrb	r4, [r0, #5]
   131ca:	4031      	ands	r1, r6
   131cc:	43b4      	bics	r4, r6
   131ce:	430c      	orrs	r4, r1
   131d0:	7144      	strb	r4, [r0, #5]
	event->state = K_POLL_STATE_NOT_READY;
   131d2:	6841      	ldr	r1, [r0, #4]
   131d4:	4c08      	ldr	r4, [pc, #32]	; (131f8 <k_poll_event_init+0x38>)
	event->mode = mode;
	event->unused = 0;
	event->obj = obj;
   131d6:	6083      	str	r3, [r0, #8]
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
   131d8:	400c      	ands	r4, r1
	event->mode = mode;
   131da:	2101      	movs	r1, #1
   131dc:	400a      	ands	r2, r1
   131de:	0051      	lsls	r1, r2, #1
   131e0:	22fc      	movs	r2, #252	; 0xfc
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
   131e2:	0c25      	lsrs	r5, r4, #16
	event->mode = mode;
   131e4:	402a      	ands	r2, r5
   131e6:	430a      	orrs	r2, r1
	__ASSERT(obj, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
	event->state = K_POLL_STATE_NOT_READY;
   131e8:	6044      	str	r4, [r0, #4]
	event->mode = mode;
   131ea:	7182      	strb	r2, [r0, #6]
	event->unused = 0;
   131ec:	2203      	movs	r2, #3
   131ee:	88c1      	ldrh	r1, [r0, #6]
   131f0:	400a      	ands	r2, r1
   131f2:	80c2      	strh	r2, [r0, #6]
	event->obj = obj;
}
   131f4:	bd70      	pop	{r4, r5, r6, pc}
   131f6:	46c0      	nop			; (mov r8, r8)
   131f8:	fffe0fff 	.word	0xfffe0fff

000131fc <k_poll>:
	event->poller = NULL;
	event->state |= state;
}

int k_poll(struct k_poll_event *events, int num_events, s32_t timeout)
{
   131fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   131fe:	b089      	sub	sp, #36	; 0x24
   13200:	0006      	movs	r6, r0
   13202:	9102      	str	r1, [sp, #8]
   13204:	9201      	str	r2, [sp, #4]
   13206:	f3ef 8410 	mrs	r4, PRIMASK
   1320a:	b672      	cpsid	i
#endif
}

static inline void _set_thread_states(struct k_thread *thread, u32_t states)
{
	thread->base.thread_state |= states;
   1320c:	2520      	movs	r5, #32

	int last_registered = -1, in_use = 0, rc;
	unsigned int key;

	key = irq_lock();
	set_polling_state(_current);
   1320e:	4b56      	ldr	r3, [pc, #344]	; (13368 <k_poll+0x16c>)
   13210:	6898      	ldr	r0, [r3, #8]
   13212:	7a42      	ldrb	r2, [r0, #9]
   13214:	432a      	orrs	r2, r5
   13216:	7242      	strb	r2, [r0, #9]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13218:	2c00      	cmp	r4, #0
   1321a:	d100      	bne.n	1321e <k_poll+0x22>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1321c:	b662      	cpsie	i
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   1321e:	2200      	movs	r2, #0
	/*
	 * We can get by with one poller structure for all events for now:
	 * if/when we allow multiple threads to poll on the same object, we
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };
   13220:	689b      	ldr	r3, [r3, #8]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
   13222:	2501      	movs	r5, #1
	/*
	 * We can get by with one poller structure for all events for now:
	 * if/when we allow multiple threads to poll on the same object, we
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };
   13224:	9305      	str	r3, [sp, #20]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
   13226:	0014      	movs	r4, r2
   13228:	0033      	movs	r3, r6
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   1322a:	9200      	str	r2, [sp, #0]
{
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(events, "NULL events\n");
	__ASSERT(num_events > 0, "zero events\n");

	int last_registered = -1, in_use = 0, rc;
   1322c:	426d      	negs	r5, r5
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   1322e:	9a02      	ldr	r2, [sp, #8]
   13230:	9900      	ldr	r1, [sp, #0]
   13232:	4291      	cmp	r1, r2
   13234:	da1d      	bge.n	13272 <k_poll+0x76>
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13236:	f3ef 8010 	mrs	r0, PRIMASK
   1323a:	b672      	cpsid	i
   1323c:	9003      	str	r0, [sp, #12]
}

/* must be called with interrupts locked */
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
   1323e:	7958      	ldrb	r0, [r3, #5]
   13240:	0700      	lsls	r0, r0, #28
   13242:	0f00      	lsrs	r0, r0, #28
   13244:	2802      	cmp	r0, #2
   13246:	d007      	beq.n	13258 <k_poll+0x5c>
   13248:	2804      	cmp	r0, #4
   1324a:	d00a      	beq.n	13262 <k_poll+0x66>
   1324c:	2801      	cmp	r0, #1
   1324e:	d13e      	bne.n	132ce <k_poll+0xd2>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_SIGNAL:
		if (event->signal->signaled) {
   13250:	689f      	ldr	r7, [r3, #8]
   13252:	687a      	ldr	r2, [r7, #4]
			*state = K_POLL_STATE_SIGNALED;
   13254:	2702      	movs	r7, #2
   13256:	e009      	b.n	1326c <k_poll+0x70>
   13258:	689f      	ldr	r7, [r3, #8]
/* must be called with interrupts locked */
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0) {
   1325a:	68bf      	ldr	r7, [r7, #8]
   1325c:	2f00      	cmp	r7, #0
   1325e:	d16a      	bne.n	13336 <k_poll+0x13a>
   13260:	e035      	b.n	132ce <k_poll+0xd2>
   13262:	689f      	ldr	r7, [r3, #8]
			*state = K_POLL_STATE_SEM_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		if (!k_queue_is_empty(event->queue)) {
   13264:	68bf      	ldr	r7, [r7, #8]
   13266:	46bc      	mov	ip, r7
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   13268:	2708      	movs	r7, #8
			*state = K_POLL_STATE_SEM_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		if (!k_queue_is_empty(event->queue)) {
   1326a:	4662      	mov	r2, ip
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
			return 1;
		}
		break;
	case K_POLL_TYPE_SIGNAL:
		if (event->signal->signaled) {
   1326c:	2a00      	cmp	r2, #0
   1326e:	d163      	bne.n	13338 <k_poll+0x13c>
   13270:	e02d      	b.n	132ce <k_poll+0xd2>
   13272:	f3ef 8710 	mrs	r7, PRIMASK
   13276:	b672      	cpsid	i
	 * success or a -EADDRINUSE error. In the case of a -EADDRINUSE error,
	 * the events that were available are still flagged as such, and it is
	 * valid for the caller to consider them available, as if this function
	 * returned success.
	 */
	if (!is_polling()) {
   13278:	2020      	movs	r0, #32
}

/* must be called with interrupts locked */
static inline int is_polling(void)
{
	return _is_thread_polling(_current);
   1327a:	4b3b      	ldr	r3, [pc, #236]	; (13368 <k_poll+0x16c>)
   1327c:	689a      	ldr	r2, [r3, #8]
   1327e:	7a53      	ldrb	r3, [r2, #9]
	 * success or a -EADDRINUSE error. In the case of a -EADDRINUSE error,
	 * the events that were available are still flagged as such, and it is
	 * valid for the caller to consider them available, as if this function
	 * returned success.
	 */
	if (!is_polling()) {
   13280:	4203      	tst	r3, r0
   13282:	d017      	beq.n	132b4 <k_poll+0xb8>
}

static inline void _reset_thread_states(struct k_thread *thread,
					u32_t states)
{
	thread->base.thread_state &= ~states;
   13284:	4383      	bics	r3, r0
   13286:	7253      	strb	r3, [r2, #9]
		return in_use;
	}

	clear_polling_state(_current);

	if (timeout == K_NO_WAIT) {
   13288:	9b01      	ldr	r3, [sp, #4]
   1328a:	2b00      	cmp	r3, #0
   1328c:	d103      	bne.n	13296 <k_poll+0x9a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1328e:	2f00      	cmp	r7, #0
   13290:	d11a      	bne.n	132c8 <k_poll+0xcc>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13292:	b662      	cpsie	i
   13294:	e018      	b.n	132c8 <k_poll+0xcc>
		irq_unlock(key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   13296:	a806      	add	r0, sp, #24

	_pend_current_thread(&wait_q, timeout);
   13298:	9901      	ldr	r1, [sp, #4]
	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EAGAIN;
	}

	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1329a:	9006      	str	r0, [sp, #24]
   1329c:	6040      	str	r0, [r0, #4]

	_pend_current_thread(&wait_q, timeout);
   1329e:	f000 fa7d 	bl	1379c <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   132a2:	f000 fb59 	bl	13958 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   132a6:	0038      	movs	r0, r7
   132a8:	f7ff fb38 	bl	1291c <__swap>
   132ac:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   132ae:	f3ef 8710 	mrs	r7, PRIMASK
   132b2:	b672      	cpsid	i
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = irq_lock();
	clear_event_registrations(events, last_registered, key);
   132b4:	0030      	movs	r0, r6
   132b6:	003a      	movs	r2, r7
   132b8:	0029      	movs	r1, r5
   132ba:	f7ff fefb 	bl	130b4 <clear_event_registrations>
	irq_unlock(key);

	return swap_rc;
   132be:	0020      	movs	r0, r4
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   132c0:	2f00      	cmp	r7, #0
   132c2:	d14f      	bne.n	13364 <k_poll+0x168>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   132c4:	b662      	cpsie	i
   132c6:	e04d      	b.n	13364 <k_poll+0x168>

	clear_polling_state(_current);

	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EAGAIN;
   132c8:	200b      	movs	r0, #11
   132ca:	4240      	negs	r0, r0
   132cc:	e04a      	b.n	13364 <k_poll+0x168>

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
   132ce:	9a01      	ldr	r2, [sp, #4]
   132d0:	2a00      	cmp	r2, #0
   132d2:	d027      	beq.n	13324 <k_poll+0x128>
   132d4:	2120      	movs	r1, #32
}

/* must be called with interrupts locked */
static inline int is_polling(void)
{
	return _is_thread_polling(_current);
   132d6:	4f24      	ldr	r7, [pc, #144]	; (13368 <k_poll+0x16c>)
   132d8:	68bf      	ldr	r7, [r7, #8]

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
   132da:	7a7a      	ldrb	r2, [r7, #9]
   132dc:	420a      	tst	r2, r1
   132de:	d021      	beq.n	13324 <k_poll+0x128>
   132e0:	2c00      	cmp	r4, #0
   132e2:	d11f      	bne.n	13324 <k_poll+0x128>
}

/* must be called with interrupts locked */
static inline int register_event(struct k_poll_event *event)
{
	switch (event->type) {
   132e4:	2802      	cmp	r0, #2
   132e6:	d004      	beq.n	132f2 <k_poll+0xf6>
   132e8:	2804      	cmp	r0, #4
   132ea:	d002      	beq.n	132f2 <k_poll+0xf6>
   132ec:	2801      	cmp	r0, #1
   132ee:	d135      	bne.n	1335c <k_poll+0x160>
   132f0:	e005      	b.n	132fe <k_poll+0x102>
		}
		event->sem->poll_event = event;
		break;
	case K_POLL_TYPE_DATA_AVAILABLE:
		__ASSERT(event->queue, "invalid queue\n");
		if (event->queue->poll_event) {
   132f2:	6898      	ldr	r0, [r3, #8]
   132f4:	6902      	ldr	r2, [r0, #16]
   132f6:	2a00      	cmp	r2, #0
   132f8:	d107      	bne.n	1330a <k_poll+0x10e>
			return -EADDRINUSE;
		}
		event->queue->poll_event = event;
   132fa:	6103      	str	r3, [r0, #16]
   132fc:	e02e      	b.n	1335c <k_poll+0x160>
		break;
	case K_POLL_TYPE_SIGNAL:
		__ASSERT(event->queue, "invalid poll signal\n");
		if (event->signal->poll_event) {
   132fe:	6898      	ldr	r0, [r3, #8]
   13300:	6802      	ldr	r2, [r0, #0]
   13302:	2a00      	cmp	r2, #0
   13304:	d101      	bne.n	1330a <k_poll+0x10e>
			return -EADDRINUSE;
		}
		event->signal->poll_event = event;
   13306:	6003      	str	r3, [r0, #0]
   13308:	e028      	b.n	1335c <k_poll+0x160>
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
				events[ii].state = K_POLL_STATE_EADDRINUSE;
   1330a:	685a      	ldr	r2, [r3, #4]
   1330c:	4817      	ldr	r0, [pc, #92]	; (1336c <k_poll+0x170>)
				++last_registered;
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
   1330e:	2430      	movs	r4, #48	; 0x30
				events[ii].state = K_POLL_STATE_EADDRINUSE;
   13310:	4010      	ands	r0, r2
   13312:	2280      	movs	r2, #128	; 0x80
   13314:	0152      	lsls	r2, r2, #5
   13316:	4310      	orrs	r0, r2
   13318:	2220      	movs	r2, #32
   1331a:	6058      	str	r0, [r3, #4]
   1331c:	7a78      	ldrb	r0, [r7, #9]
				++last_registered;
			} else if (rc == -EADDRINUSE) {
				/* setting in_use also prevents any further
				 * registrations by the current thread
				 */
				in_use = -EADDRINUSE;
   1331e:	4264      	negs	r4, r4
   13320:	4390      	bics	r0, r2
   13322:	7278      	strb	r0, [r7, #9]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13324:	9a03      	ldr	r2, [sp, #12]
   13326:	2a00      	cmp	r2, #0
   13328:	d100      	bne.n	1332c <k_poll+0x130>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1332a:	b662      	cpsie	i
	 * will need one per poll event associated with an object.
	 */
	struct _poller poller = { .thread = _current };

	/* find events whose condition is already fulfilled */
	for (int ii = 0; ii < num_events; ii++) {
   1332c:	9a00      	ldr	r2, [sp, #0]
   1332e:	330c      	adds	r3, #12
   13330:	3201      	adds	r2, #1
   13332:	9200      	str	r2, [sp, #0]
   13334:	e77b      	b.n	1322e <k_poll+0x32>
static inline int is_condition_met(struct k_poll_event *event, u32_t *state)
{
	switch (event->type) {
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0) {
			*state = K_POLL_STATE_SEM_AVAILABLE;
   13336:	2704      	movs	r7, #4
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   13338:	2000      	movs	r0, #0
	event->state |= state;
   1333a:	685a      	ldr	r2, [r3, #4]
	}
}

static inline void set_event_ready(struct k_poll_event *event, u32_t state)
{
	event->poller = NULL;
   1333c:	6018      	str	r0, [r3, #0]
	event->state |= state;
   1333e:	03d0      	lsls	r0, r2, #15
   13340:	0ec0      	lsrs	r0, r0, #27
   13342:	4307      	orrs	r7, r0
   13344:	4809      	ldr	r0, [pc, #36]	; (1336c <k_poll+0x170>)
   13346:	033f      	lsls	r7, r7, #12
   13348:	4010      	ands	r0, r2
   1334a:	2220      	movs	r2, #32
   1334c:	4338      	orrs	r0, r7
   1334e:	6058      	str	r0, [r3, #4]
		u32_t state;

		key = irq_lock();
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			clear_polling_state(_current);
   13350:	4805      	ldr	r0, [pc, #20]	; (13368 <k_poll+0x16c>)
   13352:	6887      	ldr	r7, [r0, #8]
   13354:	7a78      	ldrb	r0, [r7, #9]
   13356:	4390      	bics	r0, r2
   13358:	7278      	strb	r0, [r7, #9]
   1335a:	e7e3      	b.n	13324 <k_poll+0x128>
		} else if (timeout != K_NO_WAIT && is_polling() && !in_use) {
			rc = register_event(&events[ii]);
			if (rc == 0) {
				events[ii].poller = &poller;
   1335c:	a805      	add	r0, sp, #20
   1335e:	6018      	str	r0, [r3, #0]
				++last_registered;
   13360:	3501      	adds	r5, #1
   13362:	e7df      	b.n	13324 <k_poll+0x128>
	key = irq_lock();
	clear_event_registrations(events, last_registered, key);
	irq_unlock(key);

	return swap_rc;
}
   13364:	b009      	add	sp, #36	; 0x24
   13366:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13368:	20001dbc 	.word	0x20001dbc
   1336c:	fffe0fff 	.word	0xfffe0fff

00013370 <_handle_obj_poll_event>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
   13370:	b507      	push	{r0, r1, r2, lr}
   13372:	0003      	movs	r3, r0
	struct k_poll_event *poll_event = *obj_poll_event;
	int must_reschedule;

	*obj_poll_event = NULL;
   13374:	2200      	movs	r2, #0

/* returns 1 if a reschedule must take place, 0 otherwise */
/* *obj_poll_event is guaranteed to not be NULL */
int _handle_obj_poll_event(struct k_poll_event **obj_poll_event, u32_t state)
{
	struct k_poll_event *poll_event = *obj_poll_event;
   13376:	6800      	ldr	r0, [r0, #0]
	int must_reschedule;

	*obj_poll_event = NULL;
   13378:	601a      	str	r2, [r3, #0]
	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   1337a:	aa01      	add	r2, sp, #4
   1337c:	f7ff feba 	bl	130f4 <_signal_poll_event>
	return must_reschedule;
}
   13380:	9801      	ldr	r0, [sp, #4]
   13382:	bd0e      	pop	{r1, r2, r3, pc}

00013384 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   13384:	b537      	push	{r0, r1, r2, r4, r5, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13386:	f3ef 8510 	mrs	r5, PRIMASK
   1338a:	b672      	cpsid	i
	unsigned int key = irq_lock();
	int must_reschedule;

	signal->result = result;
	signal->signaled = 1;
   1338c:	2301      	movs	r3, #1
int k_poll_signal(struct k_poll_signal *signal, int result)
{
	unsigned int key = irq_lock();
	int must_reschedule;

	signal->result = result;
   1338e:	6081      	str	r1, [r0, #8]
	signal->signaled = 1;
   13390:	6043      	str	r3, [r0, #4]

	if (!signal->poll_event) {
   13392:	6800      	ldr	r0, [r0, #0]
   13394:	2800      	cmp	r0, #0
   13396:	d00e      	beq.n	133b6 <k_poll_signal+0x32>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(signal->poll_event, K_POLL_STATE_SIGNALED,
   13398:	aa01      	add	r2, sp, #4
   1339a:	2102      	movs	r1, #2
   1339c:	f7ff feaa 	bl	130f4 <_signal_poll_event>
				    &must_reschedule);

	if (must_reschedule) {
   133a0:	9b01      	ldr	r3, [sp, #4]
	if (!signal->poll_event) {
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(signal->poll_event, K_POLL_STATE_SIGNALED,
   133a2:	0004      	movs	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   133a4:	2b00      	cmp	r3, #0
   133a6:	d006      	beq.n	133b6 <k_poll_signal+0x32>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   133a8:	f000 fad6 	bl	13958 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   133ac:	0028      	movs	r0, r5
   133ae:	f7ff fab5 	bl	1291c <__swap>
		(void)_Swap(key);
	} else {
		irq_unlock(key);
	}

	return rc;
   133b2:	0020      	movs	r0, r4
   133b4:	e002      	b.n	133bc <k_poll_signal+0x38>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   133b6:	2d00      	cmp	r5, #0
   133b8:	d100      	bne.n	133bc <k_poll_signal+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   133ba:	b662      	cpsie	i
}
   133bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000133be <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   133be:	7a43      	ldrb	r3, [r0, #9]
   133c0:	2204      	movs	r2, #4
   133c2:	0019      	movs	r1, r3
   133c4:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   133c6:	221b      	movs	r2, #27
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
   133c8:	b510      	push	{r4, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   133ca:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   133cc:	4213      	tst	r3, r2
   133ce:	d104      	bne.n	133da <_ready_thread+0x1c>
   133d0:	6a03      	ldr	r3, [r0, #32]
   133d2:	3301      	adds	r3, #1
   133d4:	d101      	bne.n	133da <_ready_thread+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   133d6:	f000 f959 	bl	1368c <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
   133da:	bd10      	pop	{r4, pc}

000133dc <handle_poll_event>:
	_set_thread_return_value_with_data(thread, 0, data);
}

/* returns 1 if a reschedule must take place, 0 otherwise */
static inline int handle_poll_event(struct k_queue *queue)
{
   133dc:	0003      	movs	r3, r0
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
   133de:	6900      	ldr	r0, [r0, #16]
	_set_thread_return_value_with_data(thread, 0, data);
}

/* returns 1 if a reschedule must take place, 0 otherwise */
static inline int handle_poll_event(struct k_queue *queue)
{
   133e0:	b510      	push	{r4, lr}
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_DATA_AVAILABLE;

	return queue->poll_event ?
	       _handle_obj_poll_event(&queue->poll_event, state) : 0;
   133e2:	2800      	cmp	r0, #0
   133e4:	d004      	beq.n	133f0 <handle_poll_event+0x14>
   133e6:	3310      	adds	r3, #16
   133e8:	0018      	movs	r0, r3
   133ea:	2108      	movs	r1, #8
   133ec:	f7ff ffc0 	bl	13370 <_handle_obj_poll_event>
#else
	return 0;
#endif
}
   133f0:	bd10      	pop	{r4, pc}

000133f2 <_Swap>:
#ifdef CONFIG_STACK_SENTINEL
extern void _check_stack_sentinel(void);
#endif

static inline unsigned int _Swap(unsigned int key)
{
   133f2:	b510      	push	{r4, lr}
   133f4:	0004      	movs	r4, r0

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   133f6:	f000 faaf 	bl	13958 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   133fa:	0020      	movs	r0, r4
   133fc:	f7ff fa8e 	bl	1291c <__swap>
}
   13400:	bd10      	pop	{r4, pc}
	...

00013404 <_must_switch_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   13404:	4b05      	ldr	r3, [pc, #20]	; (1341c <_must_switch_threads+0x18>)
/*
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
   13406:	b510      	push	{r4, lr}
   13408:	689b      	ldr	r3, [r3, #8]
	return _is_preempt(_current) && __must_switch_threads();
   1340a:	2000      	movs	r0, #0
   1340c:	895b      	ldrh	r3, [r3, #10]
   1340e:	2b7f      	cmp	r3, #127	; 0x7f
   13410:	d803      	bhi.n	1341a <_must_switch_threads+0x16>
   13412:	f000 f9d3 	bl	137bc <__must_switch_threads>
   13416:	1e43      	subs	r3, r0, #1
   13418:	4198      	sbcs	r0, r3
}
   1341a:	bd10      	pop	{r4, pc}
   1341c:	20001dbc 	.word	0x20001dbc

00013420 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   13420:	4b14      	ldr	r3, [pc, #80]	; (13474 <_unpend_first_thread+0x54>)
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
   13422:	0001      	movs	r1, r0
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   13424:	681b      	ldr	r3, [r3, #0]
   13426:	6802      	ldr	r2, [r0, #0]
   13428:	2b00      	cmp	r3, #0
   1342a:	d00f      	beq.n	1344c <_unpend_first_thread+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1342c:	0013      	movs	r3, r2
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1342e:	2000      	movs	r0, #0
   13430:	4291      	cmp	r1, r2
   13432:	d01d      	beq.n	13470 <_unpend_first_thread+0x50>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   13434:	2b00      	cmp	r3, #0
   13436:	d007      	beq.n	13448 <_unpend_first_thread+0x28>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   13438:	6a1a      	ldr	r2, [r3, #32]
   1343a:	3202      	adds	r2, #2
   1343c:	d10c      	bne.n	13458 <_unpend_first_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1343e:	684a      	ldr	r2, [r1, #4]
   13440:	429a      	cmp	r2, r3
   13442:	d014      	beq.n	1346e <_unpend_first_thread+0x4e>
   13444:	681b      	ldr	r3, [r3, #0]
   13446:	e7f5      	b.n	13434 <_unpend_first_thread+0x14>
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   13448:	0018      	movs	r0, r3
   1344a:	e011      	b.n	13470 <_unpend_first_thread+0x50>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1344c:	0018      	movs	r0, r3
   1344e:	4291      	cmp	r1, r2
   13450:	d00e      	beq.n	13470 <_unpend_first_thread+0x50>
   13452:	1e10      	subs	r0, r2, #0
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   13454:	d101      	bne.n	1345a <_unpend_first_thread+0x3a>
   13456:	e00b      	b.n	13470 <_unpend_first_thread+0x50>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   13458:	0018      	movs	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1345a:	6843      	ldr	r3, [r0, #4]
   1345c:	6802      	ldr	r2, [r0, #0]
   1345e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13460:	6802      	ldr	r2, [r0, #0]
   13462:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   13464:	2202      	movs	r2, #2
   13466:	7a43      	ldrb	r3, [r0, #9]
   13468:	4393      	bics	r3, r2
   1346a:	7243      	strb	r3, [r0, #9]
   1346c:	e000      	b.n	13470 <_unpend_first_thread+0x50>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1346e:	2000      	movs	r0, #0
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
   13470:	4770      	bx	lr
   13472:	46c0      	nop			; (mov r8, r8)
   13474:	20001ff0 	.word	0x20001ff0

00013478 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   13478:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1347a:	6900      	ldr	r0, [r0, #16]
   1347c:	1c42      	adds	r2, r0, #1
   1347e:	d010      	beq.n	134a2 <_abort_timeout+0x2a>
   13480:	4a08      	ldr	r2, [pc, #32]	; (134a4 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13482:	6912      	ldr	r2, [r2, #16]
   13484:	4293      	cmp	r3, r2
   13486:	d003      	beq.n	13490 <_abort_timeout+0x18>
   13488:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1348a:	6911      	ldr	r1, [r2, #16]
   1348c:	1808      	adds	r0, r1, r0
   1348e:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13490:	685a      	ldr	r2, [r3, #4]
   13492:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
   13494:	2000      	movs	r0, #0
   13496:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   13498:	6819      	ldr	r1, [r3, #0]
   1349a:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   1349c:	2201      	movs	r2, #1
   1349e:	4252      	negs	r2, r2
   134a0:	611a      	str	r2, [r3, #16]

	return 0;
}
   134a2:	4770      	bx	lr
   134a4:	20001dbc 	.word	0x20001dbc

000134a8 <k_queue_init>:
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   134a8:	2300      	movs	r3, #0
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   134aa:	6000      	str	r0, [r0, #0]
   134ac:	6083      	str	r3, [r0, #8]
	list->tail = NULL;
   134ae:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   134b0:	6040      	str	r0, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);

	_INIT_OBJ_POLL_EVENT(queue);
   134b2:	6103      	str	r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
   134b4:	4770      	bx	lr

000134b6 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   134b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   134b8:	0005      	movs	r5, r0
   134ba:	000f      	movs	r7, r1
   134bc:	0014      	movs	r4, r2
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   134be:	f3ef 8310 	mrs	r3, PRIMASK
   134c2:	b672      	cpsid	i
   134c4:	9301      	str	r3, [sp, #4]
	struct k_thread *first_pending_thread;
	unsigned int key;

	key = irq_lock();

	first_pending_thread = _unpend_first_thread(&queue->wait_q);
   134c6:	f7ff ffab 	bl	13420 <_unpend_first_thread>
   134ca:	1e06      	subs	r6, r0, #0

	if (first_pending_thread) {
   134cc:	d00f      	beq.n	134ee <k_queue_insert+0x38>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   134ce:	3010      	adds	r0, #16
   134d0:	f7ff ffd2 	bl	13478 <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
   134d4:	0030      	movs	r0, r6
   134d6:	f7ff ff72 	bl	133be <_ready_thread>
   134da:	2300      	movs	r3, #0
_set_thread_return_value_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	_set_thread_return_value(thread, value);
	thread->base.swap_data = data;
   134dc:	60f4      	str	r4, [r6, #12]
   134de:	65f3      	str	r3, [r6, #92]	; 0x5c
   134e0:	f3ef 8305 	mrs	r3, IPSR
   134e4:	2b0d      	cmp	r3, #13
   134e6:	d822      	bhi.n	1352e <k_queue_insert+0x78>
   134e8:	2b03      	cmp	r3, #3
   134ea:	d125      	bne.n	13538 <k_queue_insert+0x82>
   134ec:	e01f      	b.n	1352e <k_queue_insert+0x78>
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
   134ee:	2f00      	cmp	r7, #0
   134f0:	d106      	bne.n	13500 <k_queue_insert+0x4a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
   134f2:	68ab      	ldr	r3, [r5, #8]
   134f4:	6023      	str	r3, [r4, #0]
	list->head = node;

	if (!list->tail) {
   134f6:	68eb      	ldr	r3, [r5, #12]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
   134f8:	60ac      	str	r4, [r5, #8]

	if (!list->tail) {
   134fa:	2b00      	cmp	r3, #0
   134fc:	d10e      	bne.n	1351c <k_queue_insert+0x66>
   134fe:	e00a      	b.n	13516 <k_queue_insert+0x60>
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
   13500:	683b      	ldr	r3, [r7, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
   13502:	6023      	str	r3, [r4, #0]
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
   13504:	2b00      	cmp	r3, #0
   13506:	d108      	bne.n	1351a <k_queue_insert+0x64>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
   13508:	68eb      	ldr	r3, [r5, #12]
   1350a:	2b00      	cmp	r3, #0
   1350c:	d102      	bne.n	13514 <k_queue_insert+0x5e>
		list->tail = node;
   1350e:	60ec      	str	r4, [r5, #12]
		list->head = node;
   13510:	60ac      	str	r4, [r5, #8]
   13512:	e003      	b.n	1351c <k_queue_insert+0x66>
	} else {
		list->tail->next = node;
   13514:	601c      	str	r4, [r3, #0]
		list->tail = node;
   13516:	60ec      	str	r4, [r5, #12]
   13518:	e000      	b.n	1351c <k_queue_insert+0x66>
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
		sys_slist_append(list, node);
	} else {
		node->next = prev->next;
		prev->next = node;
   1351a:	603c      	str	r4, [r7, #0]
			(void)_Swap(key);
			return;
		}
	} else {
		sys_slist_insert(&queue->data_q, prev, data);
		if (handle_poll_event(queue)) {
   1351c:	0028      	movs	r0, r5
   1351e:	f7ff ff5d 	bl	133dc <handle_poll_event>
   13522:	2800      	cmp	r0, #0
   13524:	d003      	beq.n	1352e <k_queue_insert+0x78>
			(void)_Swap(key);
   13526:	9801      	ldr	r0, [sp, #4]
   13528:	f7ff ff63 	bl	133f2 <_Swap>
			return;
   1352c:	e007      	b.n	1353e <k_queue_insert+0x88>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1352e:	9b01      	ldr	r3, [sp, #4]
   13530:	2b00      	cmp	r3, #0
   13532:	d104      	bne.n	1353e <k_queue_insert+0x88>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13534:	b662      	cpsie	i
   13536:	e002      	b.n	1353e <k_queue_insert+0x88>

	first_pending_thread = _unpend_first_thread(&queue->wait_q);

	if (first_pending_thread) {
		prepare_thread_to_run(first_pending_thread, data);
		if (!_is_in_isr() && _must_switch_threads()) {
   13538:	f7ff ff64 	bl	13404 <_must_switch_threads>
   1353c:	e7f1      	b.n	13522 <k_queue_insert+0x6c>
			return;
		}
	}

	irq_unlock(key);
}
   1353e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00013540 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
   13540:	b510      	push	{r4, lr}
   13542:	000a      	movs	r2, r1
	return k_queue_insert(queue, queue->data_q.tail, data);
   13544:	68c1      	ldr	r1, [r0, #12]
   13546:	f7ff ffb6 	bl	134b6 <k_queue_insert>
}
   1354a:	bd10      	pop	{r4, pc}

0001354c <k_queue_prepend>:

void k_queue_prepend(struct k_queue *queue, void *data)
{
   1354c:	b510      	push	{r4, lr}
   1354e:	000a      	movs	r2, r1
	return k_queue_insert(queue, NULL, data);
   13550:	2100      	movs	r1, #0
   13552:	f7ff ffb0 	bl	134b6 <k_queue_insert>
}
   13556:	bd10      	pop	{r4, pc}

00013558 <k_queue_append_list>:

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   13558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1355a:	0004      	movs	r4, r0
   1355c:	000d      	movs	r5, r1
   1355e:	9201      	str	r2, [sp, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13560:	f3ef 8710 	mrs	r7, PRIMASK
   13564:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13566:	6803      	ldr	r3, [r0, #0]
   13568:	9300      	str	r3, [sp, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1356a:	4298      	cmp	r0, r3
   1356c:	d112      	bne.n	13594 <k_queue_append_list+0x3c>
   1356e:	2300      	movs	r3, #0
   13570:	9300      	str	r3, [sp, #0]
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
   13572:	e00f      	b.n	13594 <k_queue_append_list+0x3c>
   13574:	0020      	movs	r0, r4
   13576:	f7ff ff53 	bl	13420 <_unpend_first_thread>
   1357a:	1e06      	subs	r6, r0, #0
   1357c:	d00d      	beq.n	1359a <k_queue_append_list+0x42>
   1357e:	0030      	movs	r0, r6
   13580:	3010      	adds	r0, #16
   13582:	f7ff ff79 	bl	13478 <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
   13586:	0030      	movs	r0, r6
   13588:	f7ff ff19 	bl	133be <_ready_thread>
   1358c:	2300      	movs	r3, #0
   1358e:	60f5      	str	r5, [r6, #12]
	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   13590:	682d      	ldr	r5, [r5, #0]
   13592:	65f3      	str	r3, [r6, #92]	; 0x5c
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&queue->wait_q);
	while (head && ((thread = _unpend_first_thread(&queue->wait_q)))) {
   13594:	2d00      	cmp	r5, #0
   13596:	d1ed      	bne.n	13574 <k_queue_append_list+0x1c>
   13598:	e005      	b.n	135a6 <k_queue_append_list+0x4e>
 * @param tail A pointer to the last element of the list to append
 */
static inline void sys_slist_append_list(sys_slist_t *list,
					 void *head, void *tail)
{
	if (!list->tail) {
   1359a:	68e3      	ldr	r3, [r4, #12]
   1359c:	2b00      	cmp	r3, #0
   1359e:	d119      	bne.n	135d4 <k_queue_append_list+0x7c>
		list->head = (sys_snode_t *)head;
   135a0:	60a5      	str	r5, [r4, #8]
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
   135a2:	9b01      	ldr	r3, [sp, #4]
   135a4:	60e3      	str	r3, [r4, #12]

	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
   135a6:	9b00      	ldr	r3, [sp, #0]
   135a8:	2b00      	cmp	r3, #0
   135aa:	d006      	beq.n	135ba <k_queue_append_list+0x62>
   135ac:	f3ef 8305 	mrs	r3, IPSR
   135b0:	2b0d      	cmp	r3, #13
   135b2:	d80b      	bhi.n	135cc <k_queue_append_list+0x74>
   135b4:	2b03      	cmp	r3, #3
   135b6:	d10f      	bne.n	135d8 <k_queue_append_list+0x80>
   135b8:	e008      	b.n	135cc <k_queue_append_list+0x74>
		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
			return;
		}
	} else {
		if (handle_poll_event(queue)) {
   135ba:	0020      	movs	r0, r4
   135bc:	f7ff ff0e 	bl	133dc <handle_poll_event>
   135c0:	2800      	cmp	r0, #0
   135c2:	d003      	beq.n	135cc <k_queue_append_list+0x74>
			(void)_Swap(key);
   135c4:	0038      	movs	r0, r7
   135c6:	f7ff ff14 	bl	133f2 <_Swap>
			return;
   135ca:	e008      	b.n	135de <k_queue_append_list+0x86>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   135cc:	2f00      	cmp	r7, #0
   135ce:	d106      	bne.n	135de <k_queue_append_list+0x86>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   135d0:	b662      	cpsie	i
   135d2:	e004      	b.n	135de <k_queue_append_list+0x86>
{
	if (!list->tail) {
		list->head = (sys_snode_t *)head;
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
   135d4:	601d      	str	r5, [r3, #0]
   135d6:	e7e4      	b.n	135a2 <k_queue_append_list+0x4a>
	if (head) {
		sys_slist_append_list(&queue->data_q, head, tail);
	}

	if (first_thread) {
		if (!_is_in_isr() && _must_switch_threads()) {
   135d8:	f7ff ff14 	bl	13404 <_must_switch_threads>
   135dc:	e7f0      	b.n	135c0 <k_queue_append_list+0x68>
			return;
		}
	}

	irq_unlock(key);
}
   135de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

000135e0 <k_queue_get>:
	k_queue_append_list(queue, list->head, list->tail);
	sys_slist_init(list);
}

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   135e0:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   135e2:	f3ef 8410 	mrs	r4, PRIMASK
   135e6:	b672      	cpsid	i
   135e8:	6883      	ldr	r3, [r0, #8]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   135ea:	2b00      	cmp	r3, #0
   135ec:	d00a      	beq.n	13604 <k_queue_get+0x24>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
   135ee:	681a      	ldr	r2, [r3, #0]
	if (list->tail == node) {
   135f0:	68c1      	ldr	r1, [r0, #12]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
   135f2:	6082      	str	r2, [r0, #8]
	if (list->tail == node) {
   135f4:	428b      	cmp	r3, r1
   135f6:	d100      	bne.n	135fa <k_queue_get+0x1a>
		list->tail = list->head;
   135f8:	60c2      	str	r2, [r0, #12]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   135fa:	0018      	movs	r0, r3
   135fc:	2c00      	cmp	r4, #0
   135fe:	d114      	bne.n	1362a <k_queue_get+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13600:	b662      	cpsie	i
   13602:	e012      	b.n	1362a <k_queue_get+0x4a>
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
   13604:	2900      	cmp	r1, #0
   13606:	d106      	bne.n	13616 <k_queue_get+0x36>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13608:	2c00      	cmp	r4, #0
   1360a:	d001      	beq.n	13610 <k_queue_get+0x30>
		irq_unlock(key);
		return NULL;
   1360c:	2000      	movs	r0, #0
   1360e:	e00c      	b.n	1362a <k_queue_get+0x4a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13610:	b662      	cpsie	i
   13612:	0020      	movs	r0, r4
   13614:	e009      	b.n	1362a <k_queue_get+0x4a>
	}

	_pend_current_thread(&queue->wait_q, timeout);
   13616:	f000 f8c1 	bl	1379c <_pend_current_thread>

	return _Swap(key) ? NULL : _current->base.swap_data;
   1361a:	0020      	movs	r0, r4
   1361c:	f7ff fee9 	bl	133f2 <_Swap>
   13620:	2800      	cmp	r0, #0
   13622:	d1f3      	bne.n	1360c <k_queue_get+0x2c>
   13624:	4b01      	ldr	r3, [pc, #4]	; (1362c <k_queue_get+0x4c>)
   13626:	689b      	ldr	r3, [r3, #8]
   13628:	68d8      	ldr	r0, [r3, #12]
}
   1362a:	bd10      	pop	{r4, pc}
   1362c:	20001dbc 	.word	0x20001dbc

00013630 <_add_timeout>:
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13630:	60ca      	str	r2, [r1, #12]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13632:	4a15      	ldr	r2, [pc, #84]	; (13688 <_add_timeout+0x58>)
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
   13634:	6088      	str	r0, [r1, #8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13636:	0010      	movs	r0, r2

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
   13638:	b530      	push	{r4, r5, lr}
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1363a:	610b      	str	r3, [r1, #16]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1363c:	68d3      	ldr	r3, [r2, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1363e:	300c      	adds	r0, #12
   13640:	4283      	cmp	r3, r0
   13642:	d108      	bne.n	13656 <_add_timeout+0x26>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   13644:	0013      	movs	r3, r2
   13646:	330c      	adds	r3, #12
   13648:	600b      	str	r3, [r1, #0]
	node->prev = list->tail;
   1364a:	6913      	ldr	r3, [r2, #16]
   1364c:	604b      	str	r3, [r1, #4]

	list->tail->next = node;
   1364e:	6913      	ldr	r3, [r2, #16]
   13650:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13652:	6111      	str	r1, [r2, #16]
   13654:	e017      	b.n	13686 <_add_timeout+0x56>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13656:	2b00      	cmp	r3, #0
   13658:	d0f4      	beq.n	13644 <_add_timeout+0x14>
   1365a:	6915      	ldr	r5, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   1365c:	6908      	ldr	r0, [r1, #16]
   1365e:	691c      	ldr	r4, [r3, #16]
   13660:	42a0      	cmp	r0, r4
   13662:	dc08      	bgt.n	13676 <_add_timeout+0x46>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   13664:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13666:	1a20      	subs	r0, r4, r0
   13668:	6118      	str	r0, [r3, #16]
   1366a:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1366c:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1366e:	685a      	ldr	r2, [r3, #4]
   13670:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   13672:	6059      	str	r1, [r3, #4]
   13674:	e007      	b.n	13686 <_add_timeout+0x56>
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   13676:	1b00      	subs	r0, r0, r4
   13678:	6108      	str	r0, [r1, #16]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1367a:	42ab      	cmp	r3, r5
   1367c:	d0e2      	beq.n	13644 <_add_timeout+0x14>
   1367e:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13680:	2b00      	cmp	r3, #0
   13682:	d1eb      	bne.n	1365c <_add_timeout+0x2c>
   13684:	e7de      	b.n	13644 <_add_timeout+0x14>
#ifdef CONFIG_TICKLESS_KERNEL
	if (!program_time || (adjusted_timeout < program_time)) {
		_set_time(adjusted_timeout);
	}
#endif
}
   13686:	bd30      	pop	{r4, r5, pc}
   13688:	20001dbc 	.word	0x20001dbc

0001368c <_add_thread_to_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   1368c:	230a      	movs	r3, #10
   1368e:	56c3      	ldrsb	r3, [r0, r3]
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   13690:	b530      	push	{r4, r5, lr}
   13692:	001d      	movs	r5, r3
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   13694:	241f      	movs	r4, #31
   13696:	3510      	adds	r5, #16
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
   13698:	116a      	asrs	r2, r5, #5
   1369a:	4025      	ands	r5, r4
   1369c:	3c1e      	subs	r4, #30
   1369e:	40ac      	lsls	r4, r5
   136a0:	490d      	ldr	r1, [pc, #52]	; (136d8 <_add_thread_to_ready_q+0x4c>)
   136a2:	3206      	adds	r2, #6
   136a4:	0092      	lsls	r2, r2, #2
   136a6:	188a      	adds	r2, r1, r2
   136a8:	6855      	ldr	r5, [r2, #4]

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   136aa:	3314      	adds	r3, #20
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   136ac:	432c      	orrs	r4, r5
   136ae:	6054      	str	r4, [r2, #4]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   136b0:	250a      	movs	r5, #10
   136b2:	240a      	movs	r4, #10

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   136b4:	00db      	lsls	r3, r3, #3
   136b6:	18cb      	adds	r3, r1, r3
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   136b8:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   136ba:	685a      	ldr	r2, [r3, #4]
   136bc:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
   136be:	685a      	ldr	r2, [r3, #4]
   136c0:	6010      	str	r0, [r2, #0]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   136c2:	698a      	ldr	r2, [r1, #24]
	list->tail = node;
   136c4:	6058      	str	r0, [r3, #4]
   136c6:	5745      	ldrsb	r5, [r0, r5]
   136c8:	5714      	ldrsb	r4, [r2, r4]
   136ca:	000b      	movs	r3, r1
   136cc:	42a5      	cmp	r5, r4
   136ce:	da00      	bge.n	136d2 <_add_thread_to_ready_q+0x46>
   136d0:	0002      	movs	r2, r0
   136d2:	619a      	str	r2, [r3, #24]
#else
	sys_dlist_append(&_ready_q.q[0], &thread->base.k_q_node);
	_ready_q.prio_bmap[0] = 1;
	_ready_q.cache = thread;
#endif
}
   136d4:	bd30      	pop	{r4, r5, pc}
   136d6:	46c0      	nop			; (mov r8, r8)
   136d8:	20001dbc 	.word	0x20001dbc

000136dc <_remove_thread_from_ready_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   136dc:	230a      	movs	r3, #10
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   136de:	b510      	push	{r4, lr}
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   136e0:	6842      	ldr	r2, [r0, #4]
   136e2:	6801      	ldr	r1, [r0, #0]
   136e4:	56c3      	ldrsb	r3, [r0, r3]
   136e6:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   136e8:	6801      	ldr	r1, [r0, #0]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   136ea:	4c11      	ldr	r4, [pc, #68]	; (13730 <_remove_thread_from_ready_q+0x54>)
   136ec:	3314      	adds	r3, #20
   136ee:	604a      	str	r2, [r1, #4]
   136f0:	00db      	lsls	r3, r3, #3
   136f2:	18e2      	adds	r2, r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   136f4:	591b      	ldr	r3, [r3, r4]
   136f6:	4293      	cmp	r3, r2
   136f8:	d10e      	bne.n	13718 <_remove_thread_from_ready_q+0x3c>
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
   136fa:	220a      	movs	r2, #10
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   136fc:	211f      	movs	r1, #31
   136fe:	5682      	ldrsb	r2, [r0, r2]
   13700:	3210      	adds	r2, #16
   13702:	1153      	asrs	r3, r2, #5
   13704:	400a      	ands	r2, r1
   13706:	391e      	subs	r1, #30
   13708:	4091      	lsls	r1, r2
   1370a:	000a      	movs	r2, r1
   1370c:	3306      	adds	r3, #6
   1370e:	009b      	lsls	r3, r3, #2
   13710:	18e3      	adds	r3, r4, r3
   13712:	6859      	ldr	r1, [r3, #4]
   13714:	4391      	bics	r1, r2
   13716:	6059      	str	r1, [r3, #4]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   13718:	69a3      	ldr	r3, [r4, #24]
   1371a:	4298      	cmp	r0, r3
   1371c:	d105      	bne.n	1372a <_remove_thread_from_ready_q+0x4e>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
   1371e:	69e0      	ldr	r0, [r4, #28]
   13720:	f7ec ff00 	bl	524 <__ffssi2>
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
   13724:	3003      	adds	r0, #3
   13726:	00c0      	lsls	r0, r0, #3
   13728:	5823      	ldr	r3, [r4, r0]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   1372a:	61a3      	str	r3, [r4, #24]
#else
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
   1372c:	bd10      	pop	{r4, pc}
   1372e:	46c0      	nop			; (mov r8, r8)
   13730:	20001dbc 	.word	0x20001dbc

00013734 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   13734:	b570      	push	{r4, r5, r6, lr}
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13736:	680b      	ldr	r3, [r1, #0]
   13738:	0004      	movs	r4, r0
   1373a:	000d      	movs	r5, r1
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1373c:	4299      	cmp	r1, r3
   1373e:	d013      	beq.n	13768 <_pend_thread+0x34>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(wait_q_list, node) {
   13740:	2b00      	cmp	r3, #0
   13742:	d011      	beq.n	13768 <_pend_thread+0x34>
		struct k_thread *pending = (struct k_thread *)node;

		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   13744:	200a      	movs	r0, #10
   13746:	210a      	movs	r1, #10
   13748:	5620      	ldrsb	r0, [r4, r0]
   1374a:	5659      	ldrsb	r1, [r3, r1]
   1374c:	4288      	cmp	r0, r1
   1374e:	da06      	bge.n	1375e <_pend_thread+0x2a>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   13750:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
   13752:	6023      	str	r3, [r4, #0]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   13754:	6061      	str	r1, [r4, #4]
		node->next = insert_point;
		insert_point->prev->next = node;
   13756:	6859      	ldr	r1, [r3, #4]
   13758:	600c      	str	r4, [r1, #0]
		insert_point->prev = node;
   1375a:	605c      	str	r4, [r3, #4]
   1375c:	e00a      	b.n	13774 <_pend_thread+0x40>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1375e:	6869      	ldr	r1, [r5, #4]
   13760:	428b      	cmp	r3, r1
   13762:	d001      	beq.n	13768 <_pend_thread+0x34>
   13764:	681b      	ldr	r3, [r3, #0]
   13766:	e7eb      	b.n	13740 <_pend_thread+0xc>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   13768:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1376a:	686b      	ldr	r3, [r5, #4]
   1376c:	6063      	str	r3, [r4, #4]

	list->tail->next = node;
   1376e:	686b      	ldr	r3, [r5, #4]
   13770:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13772:	606c      	str	r4, [r5, #4]
}

/* mark a thread as pending in its TCS */
static inline void _mark_thread_as_pending(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_PENDING;
   13774:	2102      	movs	r1, #2
   13776:	7a63      	ldrb	r3, [r4, #9]
   13778:	430b      	orrs	r3, r1
   1377a:	7263      	strb	r3, [r4, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   1377c:	1c53      	adds	r3, r2, #1
   1377e:	d00b      	beq.n	13798 <_pend_thread+0x64>

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       s32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13780:	3209      	adds	r2, #9
   13782:	0010      	movs	r0, r2
   13784:	3108      	adds	r1, #8
   13786:	f7ec fd0b 	bl	1a0 <__aeabi_uidiv>
   1378a:	0021      	movs	r1, r4
   1378c:	1c43      	adds	r3, r0, #1
   1378e:	3110      	adds	r1, #16
   13790:	002a      	movs	r2, r5
   13792:	0020      	movs	r0, r4
   13794:	f7ff ff4c 	bl	13630 <_add_timeout>
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   13798:	bd70      	pop	{r4, r5, r6, pc}
	...

0001379c <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   1379c:	b570      	push	{r4, r5, r6, lr}
   1379e:	000e      	movs	r6, r1
   137a0:	0005      	movs	r5, r0
	_remove_thread_from_ready_q(_current);
   137a2:	4c05      	ldr	r4, [pc, #20]	; (137b8 <_pend_current_thread+0x1c>)
   137a4:	68a0      	ldr	r0, [r4, #8]
   137a6:	f7ff ff99 	bl	136dc <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   137aa:	0032      	movs	r2, r6
   137ac:	0029      	movs	r1, r5
   137ae:	68a0      	ldr	r0, [r4, #8]
   137b0:	f7ff ffc0 	bl	13734 <_pend_thread>
}
   137b4:	bd70      	pop	{r4, r5, r6, pc}
   137b6:	46c0      	nop			; (mov r8, r8)
   137b8:	20001dbc 	.word	0x20001dbc

000137bc <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
   137bc:	b510      	push	{r4, lr}
{
	int bitmap = 0;
	u32_t ready_range;

#if (K_NUM_PRIORITIES <= 32)
	ready_range = _ready_q.prio_bmap[0];
   137be:	4c07      	ldr	r4, [pc, #28]	; (137dc <__must_switch_threads+0x20>)
   137c0:	69e0      	ldr	r0, [r4, #28]
   137c2:	f7ec feaf 	bl	524 <__ffssi2>

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   137c6:	220a      	movs	r2, #10
   137c8:	68a3      	ldr	r3, [r4, #8]
   137ca:	569a      	ldrsb	r2, [r3, r2]
   137cc:	0003      	movs	r3, r0
   137ce:	3b11      	subs	r3, #17
   137d0:	2001      	movs	r0, #1
   137d2:	429a      	cmp	r2, r3
   137d4:	dc00      	bgt.n	137d8 <__must_switch_threads+0x1c>
   137d6:	2000      	movs	r0, #0
#else
	return 0;
#endif
}
   137d8:	bd10      	pop	{r4, pc}
   137da:	46c0      	nop			; (mov r8, r8)
   137dc:	20001dbc 	.word	0x20001dbc

000137e0 <_reschedule_threads>:
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   137e0:	4b0a      	ldr	r3, [pc, #40]	; (1380c <_reschedule_threads+0x2c>)

/* reschedule threads if the scheduler is not locked */
/* not callable from ISR */
/* must be called with interrupts locked */
void _reschedule_threads(int key)
{
   137e2:	b510      	push	{r4, lr}
   137e4:	689b      	ldr	r3, [r3, #8]
   137e6:	0004      	movs	r4, r0
   137e8:	895b      	ldrh	r3, [r3, #10]
   137ea:	2b7f      	cmp	r3, #127	; 0x7f
   137ec:	d803      	bhi.n	137f6 <_reschedule_threads+0x16>
   137ee:	f7ff ffe5 	bl	137bc <__must_switch_threads>
   137f2:	2800      	cmp	r0, #0
   137f4:	d103      	bne.n	137fe <_reschedule_threads+0x1e>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   137f6:	2c00      	cmp	r4, #0
   137f8:	d107      	bne.n	1380a <_reschedule_threads+0x2a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   137fa:	b662      	cpsie	i
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
   137fc:	e005      	b.n	1380a <_reschedule_threads+0x2a>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   137fe:	2200      	movs	r2, #0
   13800:	4b03      	ldr	r3, [pc, #12]	; (13810 <_reschedule_threads+0x30>)
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
#endif

	return __swap(key);
   13802:	0020      	movs	r0, r4
   13804:	601a      	str	r2, [r3, #0]
   13806:	f7ff f889 	bl	1291c <__swap>
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
   1380a:	bd10      	pop	{r4, pc}
   1380c:	20001dbc 	.word	0x20001dbc
   13810:	20001ff4 	.word	0x20001ff4

00013814 <k_sched_unlock>:
		_current, _current->base.sched_locked);
#endif
}

void k_sched_unlock(void)
{
   13814:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13816:	f3ef 8010 	mrs	r0, PRIMASK
   1381a:	b672      	cpsid	i

	int key = irq_lock();

	/* compiler_barrier() not needed, comes from irq_lock() */

	++_current->base.sched_locked;
   1381c:	4b03      	ldr	r3, [pc, #12]	; (1382c <k_sched_unlock+0x18>)
   1381e:	689a      	ldr	r2, [r3, #8]
   13820:	7ad3      	ldrb	r3, [r2, #11]
   13822:	3301      	adds	r3, #1
   13824:	72d3      	strb	r3, [r2, #11]

	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule_threads(key);
   13826:	f7ff ffdb 	bl	137e0 <_reschedule_threads>
#endif
}
   1382a:	bd10      	pop	{r4, pc}
   1382c:	20001dbc 	.word	0x20001dbc

00013830 <_move_thread_to_end_of_prio_q>:
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
   13830:	230a      	movs	r3, #10
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
   13832:	b510      	push	{r4, lr}
   13834:	56c3      	ldrsb	r3, [r0, r3]
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
   13836:	4c0e      	ldr	r4, [pc, #56]	; (13870 <_move_thread_to_end_of_prio_q+0x40>)
   13838:	3314      	adds	r3, #20
   1383a:	00db      	lsls	r3, r3, #3
   1383c:	18e3      	adds	r3, r4, r3

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   1383e:	685a      	ldr	r2, [r3, #4]
   13840:	4290      	cmp	r0, r2
   13842:	d014      	beq.n	1386e <_move_thread_to_end_of_prio_q+0x3e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13844:	6842      	ldr	r2, [r0, #4]
   13846:	6801      	ldr	r1, [r0, #0]
   13848:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   1384a:	6801      	ldr	r1, [r0, #0]
   1384c:	604a      	str	r2, [r1, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1384e:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   13850:	685a      	ldr	r2, [r3, #4]
   13852:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
   13854:	685a      	ldr	r2, [r3, #4]
   13856:	6010      	str	r0, [r2, #0]
	list->tail = node;
   13858:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   1385a:	69a3      	ldr	r3, [r4, #24]
   1385c:	4298      	cmp	r0, r3
   1385e:	d105      	bne.n	1386c <_move_thread_to_end_of_prio_q+0x3c>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(u32_t op)
{
	return __builtin_ffs(op);
   13860:	69e0      	ldr	r0, [r4, #28]
   13862:	f7ec fe5f 	bl	524 <__ffssi2>
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
   13866:	3003      	adds	r0, #3
   13868:	00c0      	lsls	r0, r0, #3
   1386a:	5823      	ldr	r3, [r4, r0]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   1386c:	61a3      	str	r3, [r4, #24]
#endif
}
   1386e:	bd10      	pop	{r4, pc}
   13870:	20001dbc 	.word	0x20001dbc

00013874 <k_yield>:

void k_yield(void)
{
   13874:	b570      	push	{r4, r5, r6, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13876:	f3ef 8510 	mrs	r5, PRIMASK
   1387a:	b672      	cpsid	i
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	_move_thread_to_end_of_prio_q(_current);
   1387c:	4c09      	ldr	r4, [pc, #36]	; (138a4 <k_yield+0x30>)
   1387e:	68a0      	ldr	r0, [r4, #8]
   13880:	f7ff ffd6 	bl	13830 <_move_thread_to_end_of_prio_q>

	if (_current == _get_next_ready_thread()) {
   13884:	68a2      	ldr	r2, [r4, #8]
   13886:	69a3      	ldr	r3, [r4, #24]
   13888:	429a      	cmp	r2, r3
   1388a:	d103      	bne.n	13894 <k_yield+0x20>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1388c:	2d00      	cmp	r5, #0
   1388e:	d107      	bne.n	138a0 <k_yield+0x2c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13890:	b662      	cpsie	i
   13892:	e005      	b.n	138a0 <k_yield+0x2c>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13894:	2200      	movs	r2, #0
   13896:	4b04      	ldr	r3, [pc, #16]	; (138a8 <k_yield+0x34>)
   13898:	0028      	movs	r0, r5
   1389a:	601a      	str	r2, [r3, #0]
   1389c:	f7ff f83e 	bl	1291c <__swap>
		_check_stack_sentinel();
#endif
	} else {
		_Swap(key);
	}
}
   138a0:	bd70      	pop	{r4, r5, r6, pc}
   138a2:	46c0      	nop			; (mov r8, r8)
   138a4:	20001dbc 	.word	0x20001dbc
   138a8:	20001ff4 	.word	0x20001ff4

000138ac <k_sleep>:

void k_sleep(s32_t duration)
{
   138ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(duration != K_FOREVER, "");

	K_DEBUG("thread %p for %d ns\n", _current, duration);

	/* wait of 0 ms is treated as a 'yield' */
	if (duration == 0) {
   138ae:	2800      	cmp	r0, #0
   138b0:	d102      	bne.n	138b8 <k_sleep+0xc>
		k_yield();
   138b2:	f7ff ffdf 	bl	13874 <k_yield>
		return;
   138b6:	e019      	b.n	138ec <k_sleep+0x40>
	}

	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   138b8:	210a      	movs	r1, #10
   138ba:	3009      	adds	r0, #9
   138bc:	f7ec fc70 	bl	1a0 <__aeabi_uidiv>
   138c0:	3001      	adds	r0, #1
   138c2:	9001      	str	r0, [sp, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   138c4:	f3ef 8510 	mrs	r5, PRIMASK
   138c8:	b672      	cpsid	i
	key = irq_lock();

	_remove_thread_from_ready_q(_current);
   138ca:	4c09      	ldr	r4, [pc, #36]	; (138f0 <k_sleep+0x44>)
   138cc:	68a0      	ldr	r0, [r4, #8]
   138ce:	f7ff ff05 	bl	136dc <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   138d2:	68a0      	ldr	r0, [r4, #8]
   138d4:	9b01      	ldr	r3, [sp, #4]
   138d6:	0001      	movs	r1, r0
   138d8:	2200      	movs	r2, #0
   138da:	3110      	adds	r1, #16
   138dc:	f7ff fea8 	bl	13630 <_add_timeout>
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   138e0:	2200      	movs	r2, #0
   138e2:	4b04      	ldr	r3, [pc, #16]	; (138f4 <k_sleep+0x48>)
   138e4:	0028      	movs	r0, r5
   138e6:	601a      	str	r2, [r3, #0]
   138e8:	f7ff f818 	bl	1291c <__swap>
	_remove_thread_from_ready_q(_current);
	_add_thread_timeout(_current, NULL, ticks);

	_Swap(key);
#endif
}
   138ec:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   138ee:	46c0      	nop			; (mov r8, r8)
   138f0:	20001dbc 	.word	0x20001dbc
   138f4:	20001ff4 	.word	0x20001ff4

000138f8 <k_current_get>:
	}
}

k_tid_t k_current_get(void)
{
	return _current;
   138f8:	4b01      	ldr	r3, [pc, #4]	; (13900 <k_current_get+0x8>)
   138fa:	6898      	ldr	r0, [r3, #8]
}
   138fc:	4770      	bx	lr
   138fe:	46c0      	nop			; (mov r8, r8)
   13900:	20001dbc 	.word	0x20001dbc

00013904 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   13904:	4b10      	ldr	r3, [pc, #64]	; (13948 <_is_thread_time_slicing+0x44>)
	_time_slice_elapsed = 0;
	_time_slice_prio_ceiling = prio;
}

int _is_thread_time_slicing(struct k_thread *thread)
{
   13906:	b082      	sub	sp, #8
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   13908:	681a      	ldr	r2, [r3, #0]
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
   1390a:	2300      	movs	r3, #0
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   1390c:	429a      	cmp	r2, r3
   1390e:	dd17      	ble.n	13940 <_is_thread_time_slicing+0x3c>
	return entry_point == idle;
}

static inline int _is_idle_thread_ptr(k_tid_t thread)
{
	return thread == _idle_thread;
   13910:	4b0e      	ldr	r3, [pc, #56]	; (1394c <_is_thread_time_slicing+0x48>)
   13912:	681b      	ldr	r3, [r3, #0]
   13914:	9301      	str	r3, [sp, #4]
   13916:	9a01      	ldr	r2, [sp, #4]
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
		return 0;
   13918:	2300      	movs	r3, #0
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   1391a:	4290      	cmp	r0, r2
   1391c:	d010      	beq.n	13940 <_is_thread_time_slicing+0x3c>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   1391e:	220a      	movs	r2, #10
   13920:	4b0b      	ldr	r3, [pc, #44]	; (13950 <_is_thread_time_slicing+0x4c>)
   13922:	5682      	ldrsb	r2, [r0, r2]
   13924:	6819      	ldr	r1, [r3, #0]
		return 0;
   13926:	2300      	movs	r3, #0
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   13928:	428a      	cmp	r2, r1
   1392a:	db09      	blt.n	13940 <_is_thread_time_slicing+0x3c>
 * @return 1 if multiple nodes, 0 otherwise
 */

static inline int sys_dlist_has_multiple_nodes(sys_dlist_t *list)
{
	return list->head != list->tail;
   1392c:	0013      	movs	r3, r2
   1392e:	4909      	ldr	r1, [pc, #36]	; (13954 <_is_thread_time_slicing+0x50>)
   13930:	3314      	adds	r3, #20
   13932:	00db      	lsls	r3, r3, #3
   13934:	18ca      	adds	r2, r1, r3
   13936:	6850      	ldr	r0, [r2, #4]
   13938:	585b      	ldr	r3, [r3, r1]
   1393a:	1a1b      	subs	r3, r3, r0
   1393c:	1e58      	subs	r0, r3, #1
   1393e:	4183      	sbcs	r3, r0

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
}
   13940:	0018      	movs	r0, r3
   13942:	b002      	add	sp, #8
   13944:	4770      	bx	lr
   13946:	46c0      	nop			; (mov r8, r8)
   13948:	20001ee0 	.word	0x20001ee0
   1394c:	00017618 	.word	0x00017618
   13950:	20001edc 	.word	0x20001edc
   13954:	20001dbc 	.word	0x20001dbc

00013958 <_update_time_slice_before_swap>:
	if (!remaining || (_time_slice_duration < remaining)) {
		_set_time(_time_slice_duration);
	}
#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13958:	2200      	movs	r2, #0
   1395a:	4b01      	ldr	r3, [pc, #4]	; (13960 <_update_time_slice_before_swap+0x8>)
   1395c:	601a      	str	r2, [r3, #0]
}
   1395e:	4770      	bx	lr
   13960:	20001ff4 	.word	0x20001ff4

00013964 <_ready_thread>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13964:	7a43      	ldrb	r3, [r0, #9]
   13966:	2204      	movs	r2, #4
   13968:	0019      	movs	r1, r3
   1396a:	4391      	bics	r1, r2
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   1396c:	221b      	movs	r2, #27
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
   1396e:	b510      	push	{r4, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13970:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13972:	4213      	tst	r3, r2
   13974:	d104      	bne.n	13980 <_ready_thread+0x1c>
   13976:	6a03      	ldr	r3, [r0, #32]
   13978:	3301      	adds	r3, #1
   1397a:	d101      	bne.n	13980 <_ready_thread+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   1397c:	f7ff fe86 	bl	1368c <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
   13980:	bd10      	pop	{r4, pc}
	...

00013984 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   13984:	4b14      	ldr	r3, [pc, #80]	; (139d8 <_unpend_first_thread+0x54>)
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
   13986:	0001      	movs	r1, r0
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   13988:	681b      	ldr	r3, [r3, #0]
   1398a:	6802      	ldr	r2, [r0, #0]
   1398c:	2b00      	cmp	r3, #0
   1398e:	d00f      	beq.n	139b0 <_unpend_first_thread+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13990:	0013      	movs	r3, r2
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13992:	2000      	movs	r0, #0
   13994:	4291      	cmp	r1, r2
   13996:	d01d      	beq.n	139d4 <_unpend_first_thread+0x50>
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   13998:	2b00      	cmp	r3, #0
   1399a:	d007      	beq.n	139ac <_unpend_first_thread+0x28>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   1399c:	6a1a      	ldr	r2, [r3, #32]
   1399e:	3202      	adds	r2, #2
   139a0:	d10c      	bne.n	139bc <_unpend_first_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   139a2:	684a      	ldr	r2, [r1, #4]
   139a4:	429a      	cmp	r2, r3
   139a6:	d014      	beq.n	139d2 <_unpend_first_thread+0x4e>
   139a8:	681b      	ldr	r3, [r3, #0]
   139aa:	e7f5      	b.n	13998 <_unpend_first_thread+0x14>
	if (_handling_timeouts) {
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   139ac:	0018      	movs	r0, r3
   139ae:	e011      	b.n	139d4 <_unpend_first_thread+0x50>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   139b0:	0018      	movs	r0, r3
   139b2:	4291      	cmp	r1, r2
   139b4:	d00e      	beq.n	139d4 <_unpend_first_thread+0x50>
   139b6:	1e10      	subs	r0, r2, #0
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   139b8:	d101      	bne.n	139be <_unpend_first_thread+0x3a>
   139ba:	e00b      	b.n	139d4 <_unpend_first_thread+0x50>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   139bc:	0018      	movs	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   139be:	6843      	ldr	r3, [r0, #4]
   139c0:	6802      	ldr	r2, [r0, #0]
   139c2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   139c4:	6802      	ldr	r2, [r0, #0]
   139c6:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   139c8:	2202      	movs	r2, #2
   139ca:	7a43      	ldrb	r3, [r0, #9]
   139cc:	4393      	bics	r3, r2
   139ce:	7243      	strb	r3, [r0, #9]
   139d0:	e000      	b.n	139d4 <_unpend_first_thread+0x50>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   139d2:	2000      	movs	r0, #0
	if (thread) {
		_unpend_thread(thread);
	}

	return thread;
}
   139d4:	4770      	bx	lr
   139d6:	46c0      	nop			; (mov r8, r8)
   139d8:	20001ff0 	.word	0x20001ff0

000139dc <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   139dc:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   139de:	6900      	ldr	r0, [r0, #16]
   139e0:	1c42      	adds	r2, r0, #1
   139e2:	d010      	beq.n	13a06 <_abort_timeout+0x2a>
   139e4:	4a08      	ldr	r2, [pc, #32]	; (13a08 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   139e6:	6912      	ldr	r2, [r2, #16]
   139e8:	4293      	cmp	r3, r2
   139ea:	d003      	beq.n	139f4 <_abort_timeout+0x18>
   139ec:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   139ee:	6911      	ldr	r1, [r2, #16]
   139f0:	1808      	adds	r0, r1, r0
   139f2:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   139f4:	685a      	ldr	r2, [r3, #4]
   139f6:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
   139f8:	2000      	movs	r0, #0
   139fa:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   139fc:	6819      	ldr	r1, [r3, #0]
   139fe:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   13a00:	2201      	movs	r2, #1
   13a02:	4252      	negs	r2, r2
   13a04:	611a      	str	r2, [r3, #16]

	return 0;
}
   13a06:	4770      	bx	lr
   13a08:	20001dbc 	.word	0x20001dbc

00013a0c <k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
   13a0c:	2300      	movs	r3, #0
void k_sem_init(struct k_sem *sem, unsigned int initial_count,
		unsigned int limit)
{
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
   13a0e:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   13a10:	60c2      	str	r2, [r0, #12]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   13a12:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   13a14:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->wait_q);

	_INIT_OBJ_POLL_EVENT(sem);
   13a16:	6103      	str	r3, [r0, #16]

	SYS_TRACING_OBJ_INIT(k_sem, sem);
}
   13a18:	4770      	bx	lr
	...

00013a1c <k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void k_sem_give(struct k_sem *sem)
{
   13a1c:	b570      	push	{r4, r5, r6, lr}
   13a1e:	0004      	movs	r4, r0
   13a20:	f3ef 8510 	mrs	r5, PRIMASK
   13a24:	b672      	cpsid	i
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   13a26:	f7ff ffad 	bl	13984 <_unpend_first_thread>
   13a2a:	1e06      	subs	r6, r0, #0

	if (!thread) {
   13a2c:	d116      	bne.n	13a5c <k_sem_give+0x40>
#endif
}

static inline void increment_count_up_to_limit(struct k_sem *sem)
{
	sem->count += (sem->count != sem->limit);
   13a2e:	68a2      	ldr	r2, [r4, #8]
   13a30:	68e3      	ldr	r3, [r4, #12]
   13a32:	1a9b      	subs	r3, r3, r2
   13a34:	1e59      	subs	r1, r3, #1
   13a36:	418b      	sbcs	r3, r1
   13a38:	189b      	adds	r3, r3, r2
   13a3a:	60a3      	str	r3, [r4, #8]
{
#ifdef CONFIG_POLL
	u32_t state = K_POLL_STATE_SEM_AVAILABLE;

	return sem->poll_event ?
	       _handle_obj_poll_event(&sem->poll_event, state) : 0;
   13a3c:	6923      	ldr	r3, [r4, #16]
   13a3e:	2b00      	cmp	r3, #0
   13a40:	d022      	beq.n	13a88 <k_sem_give+0x6c>
   13a42:	0020      	movs	r0, r4
   13a44:	2104      	movs	r1, #4
   13a46:	3010      	adds	r0, #16
   13a48:	f7ff fc92 	bl	13370 <_handle_obj_poll_event>
{
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   13a4c:	2800      	cmp	r0, #0
   13a4e:	d01b      	beq.n	13a88 <k_sem_give+0x6c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   13a50:	f7ff ff82 	bl	13958 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   13a54:	0028      	movs	r0, r5
   13a56:	f7fe ff61 	bl	1291c <__swap>
   13a5a:	e018      	b.n	13a8e <k_sem_give+0x72>

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   13a5c:	3010      	adds	r0, #16
   13a5e:	f7ff ffbd 	bl	139dc <_abort_timeout>
	if (!thread) {
		increment_count_up_to_limit(sem);
		return handle_poll_event(sem);
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
   13a62:	0030      	movs	r0, r6
   13a64:	f7ff ff7e 	bl	13964 <_ready_thread>
   13a68:	2300      	movs	r3, #0
   13a6a:	65f3      	str	r3, [r6, #92]	; 0x5c
   13a6c:	f3ef 8305 	mrs	r3, IPSR
   13a70:	2b0d      	cmp	r3, #13
   13a72:	d809      	bhi.n	13a88 <k_sem_give+0x6c>
   13a74:	2b03      	cmp	r3, #3
   13a76:	d007      	beq.n	13a88 <k_sem_give+0x6c>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   13a78:	4b05      	ldr	r3, [pc, #20]	; (13a90 <k_sem_give+0x74>)
   13a7a:	689b      	ldr	r3, [r3, #8]
   13a7c:	895b      	ldrh	r3, [r3, #10]
   13a7e:	2b7f      	cmp	r3, #127	; 0x7f
   13a80:	d802      	bhi.n	13a88 <k_sem_give+0x6c>
   13a82:	f7ff fe9b 	bl	137bc <__must_switch_threads>
   13a86:	e7e1      	b.n	13a4c <k_sem_give+0x30>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13a88:	2d00      	cmp	r5, #0
   13a8a:	d100      	bne.n	13a8e <k_sem_give+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13a8c:	b662      	cpsie	i
	if (do_sem_give(sem)) {
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   13a8e:	bd70      	pop	{r4, r5, r6, pc}
   13a90:	20001dbc 	.word	0x20001dbc

00013a94 <k_sem_take>:

int k_sem_take(struct k_sem *sem, s32_t timeout)
{
   13a94:	b510      	push	{r4, lr}
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13a96:	f3ef 8410 	mrs	r4, PRIMASK
   13a9a:	b672      	cpsid	i
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   13a9c:	6883      	ldr	r3, [r0, #8]
   13a9e:	2b00      	cmp	r3, #0
   13aa0:	d006      	beq.n	13ab0 <k_sem_take+0x1c>
		sem->count--;
   13aa2:	3b01      	subs	r3, #1
   13aa4:	6083      	str	r3, [r0, #8]
		irq_unlock(key);
		return 0;
   13aa6:	2000      	movs	r0, #0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13aa8:	4284      	cmp	r4, r0
   13aaa:	d111      	bne.n	13ad0 <k_sem_take+0x3c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13aac:	b662      	cpsie	i
   13aae:	e00f      	b.n	13ad0 <k_sem_take+0x3c>
	}

	if (timeout == K_NO_WAIT) {
   13ab0:	2900      	cmp	r1, #0
   13ab2:	d103      	bne.n	13abc <k_sem_take+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13ab4:	2c00      	cmp	r4, #0
   13ab6:	d109      	bne.n	13acc <k_sem_take+0x38>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13ab8:	b662      	cpsie	i
   13aba:	e007      	b.n	13acc <k_sem_take+0x38>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   13abc:	f7ff fe6e 	bl	1379c <_pend_current_thread>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   13ac0:	f7ff ff4a 	bl	13958 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   13ac4:	0020      	movs	r0, r4
   13ac6:	f7fe ff29 	bl	1291c <__swap>

	return _Swap(key);
   13aca:	e001      	b.n	13ad0 <k_sem_take+0x3c>
		return 0;
	}

	if (timeout == K_NO_WAIT) {
		irq_unlock(key);
		return -EBUSY;
   13acc:	2010      	movs	r0, #16
   13ace:	4240      	negs	r0, r0
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
   13ad0:	bd10      	pop	{r4, pc}
	...

00013ad4 <_tick_get>:
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13ad4:	f3ef 8310 	mrs	r3, PRIMASK
   13ad8:	b672      	cpsid	i
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   13ada:	4a03      	ldr	r2, [pc, #12]	; (13ae8 <_tick_get+0x14>)
   13adc:	6810      	ldr	r0, [r2, #0]
   13ade:	6851      	ldr	r1, [r2, #4]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13ae0:	2b00      	cmp	r3, #0
   13ae2:	d100      	bne.n	13ae6 <_tick_get+0x12>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13ae4:	b662      	cpsie	i
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   13ae6:	4770      	bx	lr
   13ae8:	20001ff8 	.word	0x20001ff8

00013aec <k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t k_uptime_get(void)
{
   13aec:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   13aee:	f7ff fff1 	bl	13ad4 <_tick_get>
   13af2:	220a      	movs	r2, #10
   13af4:	2300      	movs	r3, #0
   13af6:	f7ec fce9 	bl	4cc <__aeabi_lmul>
}
   13afa:	bd10      	pop	{r4, pc}

00013afc <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   13afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   13afe:	b085      	sub	sp, #20
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13b00:	f3ef 8410 	mrs	r4, PRIMASK
   13b04:	b672      	cpsid	i

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   13b06:	495a      	ldr	r1, [pc, #360]	; (13c70 <_nano_sys_clock_tick_announce+0x174>)
   13b08:	17c3      	asrs	r3, r0, #31
   13b0a:	9301      	str	r3, [sp, #4]
   13b0c:	9000      	str	r0, [sp, #0]
   13b0e:	680a      	ldr	r2, [r1, #0]
   13b10:	684b      	ldr	r3, [r1, #4]
   13b12:	9d00      	ldr	r5, [sp, #0]
   13b14:	9e01      	ldr	r6, [sp, #4]
   13b16:	1952      	adds	r2, r2, r5
   13b18:	4173      	adcs	r3, r6
   13b1a:	600a      	str	r2, [r1, #0]
   13b1c:	604b      	str	r3, [r1, #4]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13b1e:	2c00      	cmp	r4, #0
   13b20:	d100      	bne.n	13b24 <_nano_sys_clock_tick_announce+0x28>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13b22:	b662      	cpsie	i
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   13b24:	aa02      	add	r2, sp, #8
   13b26:	9202      	str	r2, [sp, #8]
	list->tail = (sys_dnode_t *)list;
   13b28:	6052      	str	r2, [r2, #4]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13b2a:	f3ef 8610 	mrs	r6, PRIMASK
   13b2e:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13b30:	4d50      	ldr	r5, [pc, #320]	; (13c74 <_nano_sys_clock_tick_announce+0x178>)
   13b32:	4c51      	ldr	r4, [pc, #324]	; (13c78 <_nano_sys_clock_tick_announce+0x17c>)
   13b34:	68eb      	ldr	r3, [r5, #12]
   13b36:	0031      	movs	r1, r6
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13b38:	42a3      	cmp	r3, r4
   13b3a:	d001      	beq.n	13b40 <_nano_sys_clock_tick_announce+0x44>
		(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

	K_DEBUG("head: %p, delta: %d\n",
		head, head ? head->delta_ticks_from_prev : -2112);

	if (!head) {
   13b3c:	2b00      	cmp	r3, #0
   13b3e:	d103      	bne.n	13b48 <_nano_sys_clock_tick_announce+0x4c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13b40:	2e00      	cmp	r6, #0
   13b42:	d171      	bne.n	13c28 <_nano_sys_clock_tick_announce+0x12c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13b44:	b662      	cpsie	i
   13b46:	e06f      	b.n	13c28 <_nano_sys_clock_tick_announce+0x12c>
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
   13b48:	691e      	ldr	r6, [r3, #16]
   13b4a:	1a30      	subs	r0, r6, r0
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
   13b4c:	2601      	movs	r6, #1
	if (!head) {
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
   13b4e:	6118      	str	r0, [r3, #16]
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
   13b50:	484a      	ldr	r0, [pc, #296]	; (13c7c <_nano_sys_clock_tick_announce+0x180>)
   13b52:	6006      	str	r6, [r0, #0]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
   13b54:	3e03      	subs	r6, #3
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
   13b56:	6918      	ldr	r0, [r3, #16]
   13b58:	2800      	cmp	r0, #0
   13b5a:	d116      	bne.n	13b8a <_nano_sys_clock_tick_announce+0x8e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13b5c:	681f      	ldr	r7, [r3, #0]
   13b5e:	6858      	ldr	r0, [r3, #4]
   13b60:	6007      	str	r7, [r0, #0]
	node->next->prev = node->prev;
   13b62:	681f      	ldr	r7, [r3, #0]
   13b64:	6078      	str	r0, [r7, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
   13b66:	6810      	ldr	r0, [r2, #0]
	node->prev = list;
   13b68:	605a      	str	r2, [r3, #4]
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
   13b6a:	6018      	str	r0, [r3, #0]
	node->prev = list;

	list->head->prev = node;
   13b6c:	6810      	ldr	r0, [r2, #0]
	list->head = node;
   13b6e:	6013      	str	r3, [r2, #0]
static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list->head;
	node->prev = list;

	list->head->prev = node;
   13b70:	6043      	str	r3, [r0, #4]
		 * expired queue, they end up being processed in the same order
		 * they were added, time-wise.
		 */
		sys_dlist_prepend(&expired, next);

		timeout->delta_ticks_from_prev = _EXPIRED;
   13b72:	611e      	str	r6, [r3, #16]
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13b74:	2900      	cmp	r1, #0
   13b76:	d100      	bne.n	13b7a <_nano_sys_clock_tick_announce+0x7e>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13b78:	b662      	cpsie	i
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13b7a:	f3ef 8110 	mrs	r1, PRIMASK
   13b7e:	b672      	cpsid	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13b80:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13b82:	42a3      	cmp	r3, r4
   13b84:	d001      	beq.n	13b8a <_nano_sys_clock_tick_announce+0x8e>
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
   13b86:	2b00      	cmp	r3, #0
   13b88:	d1e5      	bne.n	13b56 <_nano_sys_clock_tick_announce+0x5a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13b8a:	2900      	cmp	r1, #0
   13b8c:	d100      	bne.n	13b90 <_nano_sys_clock_tick_announce+0x94>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13b8e:	b662      	cpsie	i
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13b90:	9b02      	ldr	r3, [sp, #8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13b92:	4293      	cmp	r3, r2
   13b94:	d103      	bne.n	13b9e <_nano_sys_clock_tick_announce+0xa2>

	irq_unlock(key);

	_handle_expired_timeouts(&expired);

	_handling_timeouts = 0;
   13b96:	2200      	movs	r2, #0
   13b98:	4b38      	ldr	r3, [pc, #224]	; (13c7c <_nano_sys_clock_tick_announce+0x180>)
   13b9a:	601a      	str	r2, [r3, #0]
   13b9c:	e044      	b.n	13c28 <_nano_sys_clock_tick_announce+0x12c>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13b9e:	2b00      	cmp	r3, #0
   13ba0:	d0f9      	beq.n	13b96 <_nano_sys_clock_tick_announce+0x9a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   13ba2:	9a03      	ldr	r2, [sp, #12]
   13ba4:	2400      	movs	r4, #0
   13ba6:	4293      	cmp	r3, r2
   13ba8:	d000      	beq.n	13bac <_nano_sys_clock_tick_announce+0xb0>
   13baa:	681c      	ldr	r4, [r3, #0]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13bac:	2704      	movs	r7, #4
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13bae:	6819      	ldr	r1, [r3, #0]
   13bb0:	685a      	ldr	r2, [r3, #4]
   13bb2:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   13bb4:	6819      	ldr	r1, [r3, #0]
   13bb6:	604a      	str	r2, [r1, #4]
 * kept as -EAGAIN, set previously in _Swap().
 */

static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
   13bb8:	6898      	ldr	r0, [r3, #8]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13bba:	f3ef 8610 	mrs	r6, PRIMASK
   13bbe:	b672      	cpsid	i
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
   13bc0:	2201      	movs	r2, #1
   13bc2:	4252      	negs	r2, r2
   13bc4:	611a      	str	r2, [r3, #16]

	K_DEBUG("timeout %p\n", timeout);
	if (thread) {
   13bc6:	2800      	cmp	r0, #0
   13bc8:	d01b      	beq.n	13c02 <_nano_sys_clock_tick_announce+0x106>
/* remove a thread timing out from kernel object's wait queue */

static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
   13bca:	68db      	ldr	r3, [r3, #12]
   13bcc:	2b00      	cmp	r3, #0
   13bce:	d00a      	beq.n	13be6 <_nano_sys_clock_tick_announce+0xea>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13bd0:	6843      	ldr	r3, [r0, #4]
   13bd2:	6802      	ldr	r2, [r0, #0]
   13bd4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13bd6:	6802      	ldr	r2, [r0, #0]
   13bd8:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   13bda:	2202      	movs	r2, #2
   13bdc:	7a43      	ldrb	r3, [r0, #9]
   13bde:	4393      	bics	r3, r2
   13be0:	7243      	strb	r3, [r0, #9]
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
   13be2:	2300      	movs	r3, #0
   13be4:	61c3      	str	r3, [r0, #28]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13be6:	7a43      	ldrb	r3, [r0, #9]
   13be8:	001a      	movs	r2, r3
   13bea:	43ba      	bics	r2, r7
   13bec:	7242      	strb	r2, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13bee:	221b      	movs	r2, #27
   13bf0:	4213      	tst	r3, r2
   13bf2:	d102      	bne.n	13bfa <_nano_sys_clock_tick_announce+0xfe>
   13bf4:	6a03      	ldr	r3, [r0, #32]
   13bf6:	3301      	adds	r3, #1
   13bf8:	d035      	beq.n	13c66 <_nano_sys_clock_tick_announce+0x16a>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13bfa:	2e00      	cmp	r6, #0
   13bfc:	d109      	bne.n	13c12 <_nano_sys_clock_tick_announce+0x116>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13bfe:	b662      	cpsie	i
   13c00:	e007      	b.n	13c12 <_nano_sys_clock_tick_announce+0x116>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13c02:	2e00      	cmp	r6, #0
   13c04:	d100      	bne.n	13c08 <_nano_sys_clock_tick_announce+0x10c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13c06:	b662      	cpsie	i
		_unpend_thread_timing_out(thread, timeout);
		_ready_thread(thread);
		irq_unlock(key);
	} else {
		irq_unlock(key);
		if (timeout->func) {
   13c08:	695a      	ldr	r2, [r3, #20]
   13c0a:	2a00      	cmp	r2, #0
   13c0c:	d001      	beq.n	13c12 <_nano_sys_clock_tick_announce+0x116>
			timeout->func(timeout);
   13c0e:	0018      	movs	r0, r3
   13c10:	4790      	blx	r2
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13c12:	2c00      	cmp	r4, #0
   13c14:	d0bf      	beq.n	13b96 <_nano_sys_clock_tick_announce+0x9a>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   13c16:	9b03      	ldr	r3, [sp, #12]
   13c18:	2200      	movs	r2, #0
   13c1a:	429c      	cmp	r4, r3
   13c1c:	d102      	bne.n	13c24 <_nano_sys_clock_tick_announce+0x128>
   13c1e:	0023      	movs	r3, r4
   13c20:	0014      	movs	r4, r2
   13c22:	e7c4      	b.n	13bae <_nano_sys_clock_tick_announce+0xb2>
   13c24:	6822      	ldr	r2, [r4, #0]
   13c26:	e7fa      	b.n	13c1e <_nano_sys_clock_tick_announce+0x122>
static void handle_time_slicing(s32_t ticks)
{
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   13c28:	68a8      	ldr	r0, [r5, #8]
   13c2a:	f7ff fe6b 	bl	13904 <_is_thread_time_slicing>
   13c2e:	2800      	cmp	r0, #0
   13c30:	d01c      	beq.n	13c6c <_nano_sys_clock_tick_announce+0x170>
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   13c32:	9800      	ldr	r0, [sp, #0]
   13c34:	9901      	ldr	r1, [sp, #4]
   13c36:	220a      	movs	r2, #10
   13c38:	2300      	movs	r3, #0
   13c3a:	f7ec fc47 	bl	4cc <__aeabi_lmul>
   13c3e:	4b10      	ldr	r3, [pc, #64]	; (13c80 <_nano_sys_clock_tick_announce+0x184>)
   13c40:	681a      	ldr	r2, [r3, #0]
   13c42:	1810      	adds	r0, r2, r0
	if (_time_slice_elapsed >= _time_slice_duration) {
   13c44:	4a0f      	ldr	r2, [pc, #60]	; (13c84 <_nano_sys_clock_tick_announce+0x188>)
#endif
	if (!_is_thread_time_slicing(_current)) {
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   13c46:	6018      	str	r0, [r3, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   13c48:	6812      	ldr	r2, [r2, #0]
   13c4a:	4290      	cmp	r0, r2
   13c4c:	db0e      	blt.n	13c6c <_nano_sys_clock_tick_announce+0x170>

		unsigned int key;

		_time_slice_elapsed = 0;
   13c4e:	2200      	movs	r2, #0
   13c50:	601a      	str	r2, [r3, #0]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13c52:	f3ef 8410 	mrs	r4, PRIMASK
   13c56:	b672      	cpsid	i

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   13c58:	68a8      	ldr	r0, [r5, #8]
   13c5a:	f7ff fde9 	bl	13830 <_move_thread_to_end_of_prio_q>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13c5e:	2c00      	cmp	r4, #0
   13c60:	d104      	bne.n	13c6c <_nano_sys_clock_tick_announce+0x170>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13c62:	b662      	cpsie	i
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   13c64:	e002      	b.n	13c6c <_nano_sys_clock_tick_announce+0x170>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   13c66:	f7ff fd11 	bl	1368c <_add_thread_to_ready_q>
   13c6a:	e7c6      	b.n	13bfa <_nano_sys_clock_tick_announce+0xfe>
   13c6c:	b005      	add	sp, #20
   13c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13c70:	20001ff8 	.word	0x20001ff8
   13c74:	20001dbc 	.word	0x20001dbc
   13c78:	20001dc8 	.word	0x20001dc8
   13c7c:	20001ff0 	.word	0x20001ff0
   13c80:	20001ff4 	.word	0x20001ff4
   13c84:	20001ee0 	.word	0x20001ee0

00013c88 <k_sys_work_q_init>:

static int k_sys_work_q_init(struct device *dev)
{
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   13c88:	2301      	movs	r3, #1
   13c8a:	2280      	movs	r2, #128	; 0x80
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   13c8c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   13c8e:	4804      	ldr	r0, [pc, #16]	; (13ca0 <k_sys_work_q_init+0x18>)
   13c90:	425b      	negs	r3, r3
   13c92:	00d2      	lsls	r2, r2, #3
   13c94:	4903      	ldr	r1, [pc, #12]	; (13ca4 <k_sys_work_q_init+0x1c>)
   13c96:	f000 f973 	bl	13f80 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   13c9a:	2000      	movs	r0, #0
   13c9c:	bd10      	pop	{r4, pc}
   13c9e:	46c0      	nop			; (mov r8, r8)
   13ca0:	20002000 	.word	0x20002000
   13ca4:	20003c40 	.word	0x20003c40

00013ca8 <_is_thread_ready>:
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
   13ca8:	7a42      	ldrb	r2, [r0, #9]
   13caa:	2300      	movs	r3, #0
   13cac:	06d2      	lsls	r2, r2, #27
   13cae:	d103      	bne.n	13cb8 <_is_thread_ready+0x10>
   13cb0:	6a03      	ldr	r3, [r0, #32]
   13cb2:	3301      	adds	r3, #1
   13cb4:	4258      	negs	r0, r3
   13cb6:	4143      	adcs	r3, r0
		 _is_thread_timeout_active(thread));
}
   13cb8:	0018      	movs	r0, r3
   13cba:	4770      	bx	lr

00013cbc <start_thread>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
static void start_thread(struct k_thread *thread)
{
   13cbc:	b570      	push	{r4, r5, r6, lr}
   13cbe:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13cc0:	f3ef 8510 	mrs	r5, PRIMASK
   13cc4:	b672      	cpsid	i
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13cc6:	2204      	movs	r2, #4
   13cc8:	7a43      	ldrb	r3, [r0, #9]
   13cca:	4393      	bics	r3, r2
   13ccc:	7243      	strb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   13cce:	f7ff ffeb 	bl	13ca8 <_is_thread_ready>
   13cd2:	2800      	cmp	r0, #0
   13cd4:	d011      	beq.n	13cfa <start_thread+0x3e>
		_add_thread_to_ready_q(thread);
   13cd6:	0020      	movs	r0, r4
   13cd8:	f7ff fcd8 	bl	1368c <_add_thread_to_ready_q>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
   13cdc:	4b09      	ldr	r3, [pc, #36]	; (13d04 <start_thread+0x48>)
   13cde:	689b      	ldr	r3, [r3, #8]
   13ce0:	895b      	ldrh	r3, [r3, #10]
   13ce2:	2b7f      	cmp	r3, #127	; 0x7f
   13ce4:	d809      	bhi.n	13cfa <start_thread+0x3e>
   13ce6:	f7ff fd69 	bl	137bc <__must_switch_threads>
   13cea:	2800      	cmp	r0, #0
   13cec:	d005      	beq.n	13cfa <start_thread+0x3e>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   13cee:	f7ff fe33 	bl	13958 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   13cf2:	0028      	movs	r0, r5
   13cf4:	f7fe fe12 	bl	1291c <__swap>
   13cf8:	e002      	b.n	13d00 <start_thread+0x44>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13cfa:	2d00      	cmp	r5, #0
   13cfc:	d100      	bne.n	13d00 <start_thread+0x44>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13cfe:	b662      	cpsie	i
			return;
		}
	}

	irq_unlock(key);
}
   13d00:	bd70      	pop	{r4, r5, r6, pc}
   13d02:	46c0      	nop			; (mov r8, r8)
   13d04:	20001dbc 	.word	0x20001dbc

00013d08 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
   13d08:	0003      	movs	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13d0a:	6900      	ldr	r0, [r0, #16]
   13d0c:	1c42      	adds	r2, r0, #1
   13d0e:	d010      	beq.n	13d32 <_abort_timeout+0x2a>
   13d10:	4a08      	ldr	r2, [pc, #32]	; (13d34 <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13d12:	6912      	ldr	r2, [r2, #16]
   13d14:	4293      	cmp	r3, r2
   13d16:	d003      	beq.n	13d20 <_abort_timeout+0x18>
   13d18:	681a      	ldr	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13d1a:	6911      	ldr	r1, [r2, #16]
   13d1c:	1808      	adds	r0, r1, r0
   13d1e:	6110      	str	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13d20:	685a      	ldr	r2, [r3, #4]
   13d22:	6819      	ldr	r1, [r3, #0]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;

	return 0;
   13d24:	2000      	movs	r0, #0
   13d26:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   13d28:	6819      	ldr	r1, [r3, #0]
   13d2a:	604a      	str	r2, [r1, #4]
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   13d2c:	2201      	movs	r2, #1
   13d2e:	4252      	negs	r2, r2
   13d30:	611a      	str	r2, [r3, #16]

	return 0;
}
   13d32:	4770      	bx	lr
   13d34:	20001dbc 	.word	0x20001dbc

00013d38 <schedule_new_thread.part.14>:
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   13d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d3a:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13d3c:	f3ef 8510 	mrs	r5, PRIMASK
   13d40:	b672      	cpsid	i
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13d42:	3109      	adds	r1, #9
   13d44:	0008      	movs	r0, r1
   13d46:	210a      	movs	r1, #10
   13d48:	f7ec fa2a 	bl	1a0 <__aeabi_uidiv>
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13d4c:	2300      	movs	r3, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   13d4e:	4a17      	ldr	r2, [pc, #92]	; (13dac <schedule_new_thread.part.14+0x74>)
   13d50:	61e3      	str	r3, [r4, #28]
   13d52:	4e17      	ldr	r6, [pc, #92]	; (13db0 <schedule_new_thread.part.14+0x78>)
   13d54:	68d3      	ldr	r3, [r2, #12]
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13d56:	3001      	adds	r0, #1
   13d58:	6220      	str	r0, [r4, #32]
	timeout->thread = thread;
   13d5a:	61a4      	str	r4, [r4, #24]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13d5c:	42b3      	cmp	r3, r6
   13d5e:	d107      	bne.n	13d70 <schedule_new_thread.part.14+0x38>
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
   13d60:	0023      	movs	r3, r4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   13d62:	6126      	str	r6, [r4, #16]
	node->prev = list->tail;
   13d64:	6911      	ldr	r1, [r2, #16]
   13d66:	3310      	adds	r3, #16
   13d68:	6161      	str	r1, [r4, #20]

	list->tail->next = node;
   13d6a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   13d6c:	6113      	str	r3, [r2, #16]
   13d6e:	e019      	b.n	13da4 <schedule_new_thread.part.14+0x6c>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13d70:	2b00      	cmp	r3, #0
   13d72:	d0f5      	beq.n	13d60 <schedule_new_thread.part.14+0x28>
   13d74:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   13d76:	6a21      	ldr	r1, [r4, #32]
   13d78:	6918      	ldr	r0, [r3, #16]
   13d7a:	4281      	cmp	r1, r0
   13d7c:	dc0a      	bgt.n	13d94 <schedule_new_thread.part.14+0x5c>
			in_q->delta_ticks_from_prev -= *delta;
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   13d7e:	0022      	movs	r2, r4
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
		if (*delta <= in_q->delta_ticks_from_prev) {
			in_q->delta_ticks_from_prev -= *delta;
   13d80:	1a41      	subs	r1, r0, r1
   13d82:	6119      	str	r1, [r3, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   13d84:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
   13d86:	6123      	str	r3, [r4, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   13d88:	6161      	str	r1, [r4, #20]
		node->next = insert_point;
		insert_point->prev->next = node;
   13d8a:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   13d8c:	3210      	adds	r2, #16
   13d8e:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
   13d90:	605a      	str	r2, [r3, #4]
   13d92:	e007      	b.n	13da4 <schedule_new_thread.part.14+0x6c>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   13d94:	1a09      	subs	r1, r1, r0
   13d96:	6221      	str	r1, [r4, #32]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   13d98:	42bb      	cmp	r3, r7
   13d9a:	d0e1      	beq.n	13d60 <schedule_new_thread.part.14+0x28>
   13d9c:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13d9e:	2b00      	cmp	r3, #0
   13da0:	d1e9      	bne.n	13d76 <schedule_new_thread.part.14+0x3e>
   13da2:	e7dd      	b.n	13d60 <schedule_new_thread.part.14+0x28>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13da4:	2d00      	cmp	r5, #0
   13da6:	d100      	bne.n	13daa <schedule_new_thread.part.14+0x72>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13da8:	b662      	cpsie	i
	}
#else
	ARG_UNUSED(delay);
	start_thread(thread);
#endif
}
   13daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13dac:	20001dbc 	.word	0x20001dbc
   13db0:	20001dc8 	.word	0x20001dc8

00013db4 <k_is_in_isr>:
   13db4:	f3ef 8305 	mrs	r3, IPSR
   13db8:	2001      	movs	r0, #1
   13dba:	2b0d      	cmp	r3, #13
   13dbc:	d802      	bhi.n	13dc4 <k_is_in_isr+0x10>
   13dbe:	3b03      	subs	r3, #3
   13dc0:	4258      	negs	r0, r3
   13dc2:	4158      	adcs	r0, r3


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   13dc4:	4770      	bx	lr
	...

00013dc8 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   13dc8:	4b02      	ldr	r3, [pc, #8]	; (13dd4 <_is_thread_essential+0xc>)
   13dca:	689b      	ldr	r3, [r3, #8]
   13dcc:	7a18      	ldrb	r0, [r3, #8]
   13dce:	2301      	movs	r3, #1
   13dd0:	4018      	ands	r0, r3
}
   13dd2:	4770      	bx	lr
   13dd4:	20001dbc 	.word	0x20001dbc

00013dd8 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
   13dd8:	b510      	push	{r4, lr}
   13dda:	0004      	movs	r4, r0
   13ddc:	0008      	movs	r0, r1
   13dde:	0011      	movs	r1, r2
	entry(p1, p2, p3);
   13de0:	001a      	movs	r2, r3
   13de2:	47a0      	blx	r4

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_MULTITHREADING
	if (_is_thread_essential()) {
   13de4:	f7ff fff0 	bl	13dc8 <_is_thread_essential>
   13de8:	2800      	cmp	r0, #0
   13dea:	d002      	beq.n	13df2 <_thread_entry+0x1a>
		_k_except_reason(_NANO_ERR_INVALID_TASK_EXIT);
   13dec:	b662      	cpsie	i
   13dee:	2001      	movs	r0, #1
   13df0:	df02      	svc	2
	}

	k_thread_abort(_current);
   13df2:	4b02      	ldr	r3, [pc, #8]	; (13dfc <_thread_entry+0x24>)
   13df4:	6898      	ldr	r0, [r3, #8]
   13df6:	f7fe fed9 	bl	12bac <k_thread_abort>
   13dfa:	46c0      	nop			; (mov r8, r8)
   13dfc:	20001dbc 	.word	0x20001dbc

00013e00 <k_thread_create>:

k_tid_t k_thread_create(struct k_thread *new_thread, char *stack,
			size_t stack_size, void (*entry)(void *, void *, void*),
			void *p1, void *p2, void *p3,
			int prio, u32_t options, s32_t delay)
{
   13e00:	b510      	push	{r4, lr}
   13e02:	0004      	movs	r4, r0
   13e04:	b086      	sub	sp, #24
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
   13e06:	980c      	ldr	r0, [sp, #48]	; 0x30
   13e08:	9004      	str	r0, [sp, #16]
   13e0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13e0c:	9003      	str	r0, [sp, #12]
   13e0e:	980a      	ldr	r0, [sp, #40]	; 0x28
   13e10:	9002      	str	r0, [sp, #8]
   13e12:	9809      	ldr	r0, [sp, #36]	; 0x24
   13e14:	9001      	str	r0, [sp, #4]
   13e16:	9808      	ldr	r0, [sp, #32]
   13e18:	9000      	str	r0, [sp, #0]
   13e1a:	0020      	movs	r0, r4
   13e1c:	f7fe fe26 	bl	12a6c <_new_thread>

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   13e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13e22:	2b00      	cmp	r3, #0
   13e24:	d103      	bne.n	13e2e <k_thread_create+0x2e>
		start_thread(thread);
   13e26:	0020      	movs	r0, r4
   13e28:	f7ff ff48 	bl	13cbc <start_thread>
   13e2c:	e003      	b.n	13e36 <k_thread_create+0x36>
   13e2e:	990d      	ldr	r1, [sp, #52]	; 0x34
   13e30:	0020      	movs	r0, r4
   13e32:	f7ff ff81 	bl	13d38 <schedule_new_thread.part.14>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3, prio,
		    options);

	schedule_new_thread(new_thread, delay);
	return new_thread;
}
   13e36:	0020      	movs	r0, r4
   13e38:	b006      	add	sp, #24
   13e3a:	bd10      	pop	{r4, pc}

00013e3c <_k_thread_single_abort>:
	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   13e3c:	6d03      	ldr	r3, [r0, #80]	; 0x50

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
   13e3e:	b510      	push	{r4, lr}
   13e40:	0004      	movs	r4, r0
	if (thread->fn_abort != NULL) {
   13e42:	2b00      	cmp	r3, #0
   13e44:	d000      	beq.n	13e48 <_k_thread_single_abort+0xc>
		thread->fn_abort();
   13e46:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   13e48:	0020      	movs	r0, r4
   13e4a:	f7ff ff2d 	bl	13ca8 <_is_thread_ready>
   13e4e:	2800      	cmp	r0, #0
   13e50:	d003      	beq.n	13e5a <_k_thread_single_abort+0x1e>
		_remove_thread_from_ready_q(thread);
   13e52:	0020      	movs	r0, r4
   13e54:	f7ff fc42 	bl	136dc <_remove_thread_from_ready_q>
   13e58:	e012      	b.n	13e80 <_k_thread_single_abort+0x44>
	} else {
		if (_is_thread_pending(thread)) {
   13e5a:	2202      	movs	r2, #2
   13e5c:	7a63      	ldrb	r3, [r4, #9]
   13e5e:	4213      	tst	r3, r2
   13e60:	d007      	beq.n	13e72 <_k_thread_single_abort+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13e62:	6863      	ldr	r3, [r4, #4]
   13e64:	6821      	ldr	r1, [r4, #0]
   13e66:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   13e68:	6821      	ldr	r1, [r4, #0]
   13e6a:	604b      	str	r3, [r1, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PENDING;
   13e6c:	7a63      	ldrb	r3, [r4, #9]
   13e6e:	4393      	bics	r3, r2
   13e70:	7263      	strb	r3, [r4, #9]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   13e72:	6a23      	ldr	r3, [r4, #32]
   13e74:	3301      	adds	r3, #1
   13e76:	d003      	beq.n	13e80 <_k_thread_single_abort+0x44>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
   13e78:	0020      	movs	r0, r4
   13e7a:	3010      	adds	r0, #16
   13e7c:	f7ff ff44 	bl	13d08 <_abort_timeout>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= _THREAD_DEAD;
   13e80:	2208      	movs	r2, #8
   13e82:	7a63      	ldrb	r3, [r4, #9]
   13e84:	4313      	orrs	r3, r2
   13e86:	7263      	strb	r3, [r4, #9]
			_abort_thread_timeout(thread);
		}
	}
	_mark_thread_as_dead(thread);
}
   13e88:	bd10      	pop	{r4, pc}
	...

00013e8c <_init_static_threads>:

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
   13e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   13e8e:	4c1c      	ldr	r4, [pc, #112]	; (13f00 <_init_static_threads+0x74>)
	_mark_thread_as_dead(thread);
}

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
   13e90:	b087      	sub	sp, #28
   13e92:	0025      	movs	r5, r4
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   13e94:	4e1b      	ldr	r6, [pc, #108]	; (13f04 <_init_static_threads+0x78>)
   13e96:	42b4      	cmp	r4, r6
   13e98:	d213      	bcs.n	13ec2 <_init_static_threads+0x36>
		_new_thread(
   13e9a:	6a23      	ldr	r3, [r4, #32]
   13e9c:	9304      	str	r3, [sp, #16]
   13e9e:	69e3      	ldr	r3, [r4, #28]
   13ea0:	9303      	str	r3, [sp, #12]
   13ea2:	69a3      	ldr	r3, [r4, #24]
   13ea4:	9302      	str	r3, [sp, #8]
   13ea6:	6963      	ldr	r3, [r4, #20]
   13ea8:	9301      	str	r3, [sp, #4]
   13eaa:	6923      	ldr	r3, [r4, #16]
   13eac:	9300      	str	r3, [sp, #0]
   13eae:	68e3      	ldr	r3, [r4, #12]
   13eb0:	68a2      	ldr	r2, [r4, #8]
   13eb2:	6861      	ldr	r1, [r4, #4]
   13eb4:	6820      	ldr	r0, [r4, #0]
   13eb6:	f7fe fdd9 	bl	12a6c <_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   13eba:	6823      	ldr	r3, [r4, #0]
   13ebc:	64dc      	str	r4, [r3, #76]	; 0x4c
#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   13ebe:	3430      	adds	r4, #48	; 0x30
   13ec0:	e7e8      	b.n	13e94 <_init_static_threads+0x8>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   13ec2:	4b11      	ldr	r3, [pc, #68]	; (13f08 <_init_static_threads+0x7c>)
   13ec4:	689a      	ldr	r2, [r3, #8]
   13ec6:	7ad3      	ldrb	r3, [r2, #11]
   13ec8:	3b01      	subs	r3, #1
   13eca:	72d3      	strb	r3, [r2, #11]
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13ecc:	f3ef 8710 	mrs	r7, PRIMASK
   13ed0:	b672      	cpsid	i
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   13ed2:	002c      	movs	r4, r5
   13ed4:	42b4      	cmp	r4, r6
   13ed6:	d20c      	bcs.n	13ef2 <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   13ed8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13eda:	1c4b      	adds	r3, r1, #1
   13edc:	d007      	beq.n	13eee <_init_static_threads+0x62>
			schedule_new_thread(thread_data->init_thread,
   13ede:	6820      	ldr	r0, [r4, #0]

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   13ee0:	2900      	cmp	r1, #0
   13ee2:	d102      	bne.n	13eea <_init_static_threads+0x5e>
		start_thread(thread);
   13ee4:	f7ff feea 	bl	13cbc <start_thread>
   13ee8:	e001      	b.n	13eee <_init_static_threads+0x62>
   13eea:	f7ff ff25 	bl	13d38 <schedule_new_thread.part.14>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   13eee:	3430      	adds	r4, #48	; 0x30
   13ef0:	e7f0      	b.n	13ed4 <_init_static_threads+0x48>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13ef2:	2f00      	cmp	r7, #0
   13ef4:	d100      	bne.n	13ef8 <_init_static_threads+0x6c>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13ef6:	b662      	cpsie	i
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   13ef8:	f7ff fc8c 	bl	13814 <k_sched_unlock>
}
   13efc:	b007      	add	sp, #28
   13efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f00:	2000070c 	.word	0x2000070c
   13f04:	2000070c 	.word	0x2000070c
   13f08:	20001dbc 	.word	0x20001dbc

00013f0c <_init_thread_base>:
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   13f0c:	7242      	strb	r2, [r0, #9]
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
   13f0e:	2201      	movs	r2, #1
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   13f10:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   13f12:	2300      	movs	r3, #0
   13f14:	4252      	negs	r2, r2
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
   13f16:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   13f18:	72c3      	strb	r3, [r0, #11]
   13f1a:	6202      	str	r2, [r0, #32]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   13f1c:	61c3      	str	r3, [r0, #28]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
   13f1e:	6183      	str	r3, [r0, #24]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   13f20:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
   13f22:	4770      	bx	lr

00013f24 <k_work_submit_to_queue>:
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
   13f24:	b570      	push	{r4, r5, r6, lr}
   13f26:	0005      	movs	r5, r0
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13f28:	0008      	movs	r0, r1
 *
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
   13f2a:	000c      	movs	r4, r1
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   13f2c:	3008      	adds	r0, #8
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13f2e:	2101      	movs	r1, #1
   13f30:	f7fe feb9 	bl	12ca6 <atomic_or>
   13f34:	07c3      	lsls	r3, r0, #31
   13f36:	d403      	bmi.n	13f40 <k_work_submit_to_queue+0x1c>
		k_fifo_put(&work_q->fifo, work);
   13f38:	0021      	movs	r1, r4
   13f3a:	0028      	movs	r0, r5
   13f3c:	f7ff fb00 	bl	13540 <k_queue_append>
	}
}
   13f40:	bd70      	pop	{r4, r5, r6, pc}

00013f42 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   13f42:	380c      	subs	r0, #12
			work_q, 0, 0, prio, 0, 0);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   13f44:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   13f46:	0001      	movs	r1, r0
   13f48:	0004      	movs	r4, r0
   13f4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   13f4c:	f7ff ffea 	bl	13f24 <k_work_submit_to_queue>
	/* detach from workqueue, for cancel to return appropriate status */
	w->work_q = NULL;
   13f50:	2300      	movs	r3, #0
   13f52:	6263      	str	r3, [r4, #36]	; 0x24
}
   13f54:	bd10      	pop	{r4, pc}

00013f56 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   13f56:	b570      	push	{r4, r5, r6, lr}
   13f58:	0005      	movs	r5, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_fifo_get(&work_q->fifo, K_FOREVER);
   13f5a:	2101      	movs	r1, #1
   13f5c:	0028      	movs	r0, r5
   13f5e:	4249      	negs	r1, r1
   13f60:	f7ff fb3e 	bl	135e0 <k_queue_get>
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13f64:	2102      	movs	r1, #2
   13f66:	0004      	movs	r4, r0

		handler = work->handler;
   13f68:	6846      	ldr	r6, [r0, #4]
   13f6a:	4249      	negs	r1, r1

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   13f6c:	3008      	adds	r0, #8
   13f6e:	f7fe fea5 	bl	12cbc <atomic_and>
   13f72:	07c3      	lsls	r3, r0, #31
   13f74:	d501      	bpl.n	13f7a <work_q_main+0x24>
					       K_WORK_STATE_PENDING)) {
			handler(work);
   13f76:	0020      	movs	r0, r4
   13f78:	47b0      	blx	r6
		}

		/* Make sure we don't hog up the CPU if the FIFO never (or
		 * very rarely) gets empty.
		 */
		k_yield();
   13f7a:	f7ff fc7b 	bl	13874 <k_yield>
	}
   13f7e:	e7ec      	b.n	13f5a <work_q_main+0x4>

00013f80 <k_work_q_start>:
}

void k_work_q_start(struct k_work_q *work_q, char *stack,
		    size_t stack_size, int prio)
{
   13f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f82:	0004      	movs	r4, r0
   13f84:	b087      	sub	sp, #28
   13f86:	001f      	movs	r7, r3
   13f88:	000d      	movs	r5, r1
   13f8a:	0016      	movs	r6, r2
	k_fifo_init(&work_q->fifo);
   13f8c:	f7ff fa8c 	bl	134a8 <k_queue_init>

	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
   13f90:	2300      	movs	r3, #0
   13f92:	0020      	movs	r0, r4
   13f94:	9305      	str	r3, [sp, #20]
   13f96:	9304      	str	r3, [sp, #16]
   13f98:	9302      	str	r3, [sp, #8]
   13f9a:	9301      	str	r3, [sp, #4]
   13f9c:	9703      	str	r7, [sp, #12]
   13f9e:	9400      	str	r4, [sp, #0]
   13fa0:	4b03      	ldr	r3, [pc, #12]	; (13fb0 <k_work_q_start+0x30>)
   13fa2:	0032      	movs	r2, r6
   13fa4:	0029      	movs	r1, r5
   13fa6:	3014      	adds	r0, #20
   13fa8:	f7ff ff2a 	bl	13e00 <k_thread_create>
			work_q, 0, 0, prio, 0, 0);
}
   13fac:	b007      	add	sp, #28
   13fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13fb0:	00013f57 	.word	0x00013f57

00013fb4 <k_delayed_work_init>:
	/* detach from workqueue, for cancel to return appropriate status */
	w->work_q = NULL;
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   13fb4:	b570      	push	{r4, r5, r6, lr}
   13fb6:	000d      	movs	r5, r1
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13fb8:	2102      	movs	r1, #2
   13fba:	0004      	movs	r4, r0
   13fbc:	4249      	negs	r1, r1
 *
 * @return N/A
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   13fbe:	3008      	adds	r0, #8
   13fc0:	f7fe fe7c 	bl	12cbc <atomic_and>
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
   13fc4:	2301      	movs	r3, #1
   13fc6:	425b      	negs	r3, r3
   13fc8:	61e3      	str	r3, [r4, #28]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   13fca:	2300      	movs	r3, #0
	t->thread = NULL;

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   13fcc:	4a03      	ldr	r2, [pc, #12]	; (13fdc <k_delayed_work_init+0x28>)
	work->handler = handler;
   13fce:	6065      	str	r5, [r4, #4]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
   13fd0:	61a3      	str	r3, [r4, #24]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
   13fd2:	6163      	str	r3, [r4, #20]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
   13fd4:	6222      	str	r2, [r4, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   13fd6:	6263      	str	r3, [r4, #36]	; 0x24
}
   13fd8:	bd70      	pop	{r4, r5, r6, pc}
   13fda:	46c0      	nop			; (mov r8, r8)
   13fdc:	00013f43 	.word	0x00013f43

00013fe0 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   13fe0:	b570      	push	{r4, r5, r6, lr}
   13fe2:	0004      	movs	r4, r0
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   13fe4:	f3ef 8510 	mrs	r5, PRIMASK
   13fe8:	b672      	cpsid	i
 *
 * @return 1 if work item is pending, or 0 if it is not pending.
 */
static inline int k_work_pending(struct k_work *work)
{
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   13fea:	3008      	adds	r0, #8
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13fec:	f7fe fe4f 	bl	12c8e <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
   13ff0:	2301      	movs	r3, #1
   13ff2:	4018      	ands	r0, r3
	int key = irq_lock();

	if (k_work_pending(&work->work)) {
   13ff4:	d003      	beq.n	13ffe <k_delayed_work_cancel+0x1e>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   13ff6:	2d00      	cmp	r5, #0
   13ff8:	d123      	bne.n	14042 <k_delayed_work_cancel+0x62>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   13ffa:	b662      	cpsie	i
   13ffc:	e021      	b.n	14042 <k_delayed_work_cancel+0x62>
		irq_unlock(key);
		return -EINPROGRESS;
	}

	if (!work->work_q) {
   13ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14000:	2b00      	cmp	r3, #0
   14002:	d103      	bne.n	1400c <k_delayed_work_cancel+0x2c>
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   14004:	2d00      	cmp	r5, #0
   14006:	d11e      	bne.n	14046 <k_delayed_work_cancel+0x66>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   14008:	b662      	cpsie	i
   1400a:	e01c      	b.n	14046 <k_delayed_work_cancel+0x66>
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1400c:	69e3      	ldr	r3, [r4, #28]
   1400e:	1c5a      	adds	r2, r3, #1
   14010:	d011      	beq.n	14036 <k_delayed_work_cancel+0x56>
   14012:	4a0e      	ldr	r2, [pc, #56]	; (1404c <k_delayed_work_cancel+0x6c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14014:	6911      	ldr	r1, [r2, #16]
   14016:	0022      	movs	r2, r4
   14018:	320c      	adds	r2, #12
   1401a:	4291      	cmp	r1, r2
   1401c:	d003      	beq.n	14026 <k_delayed_work_cancel+0x46>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1401e:	68e2      	ldr	r2, [r4, #12]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14020:	6911      	ldr	r1, [r2, #16]
   14022:	18cb      	adds	r3, r1, r3
   14024:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14026:	6923      	ldr	r3, [r4, #16]
   14028:	68e2      	ldr	r2, [r4, #12]
   1402a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1402c:	68e2      	ldr	r2, [r4, #12]
   1402e:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
   14030:	2301      	movs	r3, #1
   14032:	425b      	negs	r3, r3
   14034:	61e3      	str	r3, [r4, #28]

	/* Abort timeout, if it has expired this will do nothing */
	_abort_timeout(&work->timeout);

	/* Detach from workqueue */
	work->work_q = NULL;
   14036:	2300      	movs	r3, #0
   14038:	6263      	str	r3, [r4, #36]	; 0x24
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   1403a:	429d      	cmp	r5, r3
   1403c:	d105      	bne.n	1404a <k_delayed_work_cancel+0x6a>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   1403e:	b662      	cpsie	i
   14040:	e003      	b.n	1404a <k_delayed_work_cancel+0x6a>
{
	int key = irq_lock();

	if (k_work_pending(&work->work)) {
		irq_unlock(key);
		return -EINPROGRESS;
   14042:	2044      	movs	r0, #68	; 0x44
   14044:	e000      	b.n	14048 <k_delayed_work_cancel+0x68>
	}

	if (!work->work_q) {
		irq_unlock(key);
		return -EINVAL;
   14046:	2016      	movs	r0, #22
   14048:	4240      	negs	r0, r0
	work->work_q = NULL;

	irq_unlock(key);

	return 0;
}
   1404a:	bd70      	pop	{r4, r5, r6, pc}
   1404c:	20001dbc 	.word	0x20001dbc

00014050 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   s32_t delay)
{
   14050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14052:	0007      	movs	r7, r0
   14054:	000c      	movs	r4, r1
   14056:	0016      	movs	r6, r2
static ALWAYS_INLINE unsigned int _arch_irq_lock(void)
{
	unsigned int key;

#if defined(CONFIG_ARMV6_M)
	__asm__ volatile("mrs %0, PRIMASK;"
   14058:	f3ef 8510 	mrs	r5, PRIMASK
   1405c:	b672      	cpsid	i
	int key = irq_lock();
	int err;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
   1405e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   14060:	2b00      	cmp	r3, #0
   14062:	d002      	beq.n	1406a <k_delayed_work_submit_to_queue+0x1a>
   14064:	4283      	cmp	r3, r0
   14066:	d00b      	beq.n	14080 <k_delayed_work_submit_to_queue+0x30>
   14068:	e043      	b.n	140f2 <k_delayed_work_submit_to_queue+0xa2>
		err = -EADDRINUSE;
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
   1406a:	2800      	cmp	r0, #0
   1406c:	d008      	beq.n	14080 <k_delayed_work_submit_to_queue+0x30>
			goto done;
		}
	}

	/* Attach workqueue so the timeout callback can submit it */
	work->work_q = work_q;
   1406e:	6267      	str	r7, [r4, #36]	; 0x24

	if (!delay) {
   14070:	2e00      	cmp	r6, #0
   14072:	d10b      	bne.n	1408c <k_delayed_work_submit_to_queue+0x3c>
		/* Submit work if no ticks is 0 */
		k_work_submit_to_queue(work_q, &work->work);
   14074:	0038      	movs	r0, r7
   14076:	0021      	movs	r1, r4
   14078:	f7ff ff54 	bl	13f24 <k_work_submit_to_queue>
		/* Add timeout */
		_add_timeout(NULL, &work->timeout, NULL,
				_TICK_ALIGN + _ms_to_ticks(delay));
	}

	err = 0;
   1407c:	0030      	movs	r0, r6
   1407e:	e03a      	b.n	140f6 <k_delayed_work_submit_to_queue+0xa6>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = k_delayed_work_cancel(work);
   14080:	0020      	movs	r0, r4
   14082:	f7ff ffad 	bl	13fe0 <k_delayed_work_cancel>
		if (err < 0) {
   14086:	2800      	cmp	r0, #0
   14088:	daf1      	bge.n	1406e <k_delayed_work_submit_to_queue+0x1e>
   1408a:	e034      	b.n	140f6 <k_delayed_work_submit_to_queue+0xa6>
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1408c:	0030      	movs	r0, r6
   1408e:	210a      	movs	r1, #10
   14090:	3009      	adds	r0, #9
   14092:	f7ec f885 	bl	1a0 <__aeabi_uidiv>
	timeout->thread = thread;
   14096:	2300      	movs	r3, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14098:	4a19      	ldr	r2, [pc, #100]	; (14100 <k_delayed_work_submit_to_queue+0xb0>)
   1409a:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1409c:	61a3      	str	r3, [r4, #24]
   1409e:	4e19      	ldr	r6, [pc, #100]	; (14104 <k_delayed_work_submit_to_queue+0xb4>)
   140a0:	68d3      	ldr	r3, [r2, #12]
				_wait_q_t *wait_q,
				s32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
   140a2:	3001      	adds	r0, #1
   140a4:	61e0      	str	r0, [r4, #28]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   140a6:	42b3      	cmp	r3, r6
   140a8:	d108      	bne.n	140bc <k_delayed_work_submit_to_queue+0x6c>
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
   140aa:	0023      	movs	r3, r4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   140ac:	60e6      	str	r6, [r4, #12]
	node->prev = list->tail;
   140ae:	6911      	ldr	r1, [r2, #16]
   140b0:	330c      	adds	r3, #12
   140b2:	6121      	str	r1, [r4, #16]

	list->tail->next = node;
   140b4:	6911      	ldr	r1, [r2, #16]
   140b6:	600b      	str	r3, [r1, #0]
	list->tail = node;
   140b8:	6113      	str	r3, [r2, #16]
   140ba:	e010      	b.n	140de <k_delayed_work_submit_to_queue+0x8e>
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   140bc:	2b00      	cmp	r3, #0
   140be:	d0f4      	beq.n	140aa <k_delayed_work_submit_to_queue+0x5a>
   140c0:	6917      	ldr	r7, [r2, #16]
		if (*delta <= in_q->delta_ticks_from_prev) {
   140c2:	69e1      	ldr	r1, [r4, #28]
   140c4:	6918      	ldr	r0, [r3, #16]
   140c6:	4281      	cmp	r1, r0
   140c8:	dc0b      	bgt.n	140e2 <k_delayed_work_submit_to_queue+0x92>
			in_q->delta_ticks_from_prev -= *delta;
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   140ca:	0022      	movs	r2, r4
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
		if (*delta <= in_q->delta_ticks_from_prev) {
			in_q->delta_ticks_from_prev -= *delta;
   140cc:	1a41      	subs	r1, r0, r1
   140ce:	6119      	str	r1, [r3, #16]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   140d0:	6859      	ldr	r1, [r3, #4]
		node->next = insert_point;
   140d2:	60e3      	str	r3, [r4, #12]
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
   140d4:	6121      	str	r1, [r4, #16]
		node->next = insert_point;
		insert_point->prev->next = node;
   140d6:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, &in_q->node,
   140d8:	320c      	adds	r2, #12
   140da:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
   140dc:	605a      	str	r2, [r3, #4]
		/* Add timeout */
		_add_timeout(NULL, &work->timeout, NULL,
				_TICK_ALIGN + _ms_to_ticks(delay));
	}

	err = 0;
   140de:	2000      	movs	r0, #0
   140e0:	e009      	b.n	140f6 <k_delayed_work_submit_to_queue+0xa6>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
   140e2:	1a09      	subs	r1, r1, r0
   140e4:	61e1      	str	r1, [r4, #28]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   140e6:	42bb      	cmp	r3, r7
   140e8:	d0df      	beq.n	140aa <k_delayed_work_submit_to_queue+0x5a>
   140ea:	681b      	ldr	r3, [r3, #0]
	if (program_time > 0) {
		*delta += _get_elapsed_program_time();
	}
	adjusted_timeout = *delta;
#endif
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   140ec:	2b00      	cmp	r3, #0
   140ee:	d1e8      	bne.n	140c2 <k_delayed_work_submit_to_queue+0x72>
   140f0:	e7db      	b.n	140aa <k_delayed_work_submit_to_queue+0x5a>
	int key = irq_lock();
	int err;

	/* Work cannot be active in multiple queues */
	if (work->work_q && work->work_q != work_q) {
		err = -EADDRINUSE;
   140f2:	2030      	movs	r0, #48	; 0x30
   140f4:	4240      	negs	r0, r0
 */

static ALWAYS_INLINE void _arch_irq_unlock(unsigned int key)
{
#if defined(CONFIG_ARMV6_M)
	if (key) {
   140f6:	2d00      	cmp	r5, #0
   140f8:	d100      	bne.n	140fc <k_delayed_work_submit_to_queue+0xac>
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
   140fa:	b662      	cpsie	i

done:
	irq_unlock(key);

	return err;
}
   140fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140fe:	46c0      	nop			; (mov r8, r8)
   14100:	20001dbc 	.word	0x20001dbc
   14104:	20001dc8 	.word	0x20001dc8

00014108 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
   14108:	4770      	bx	lr
